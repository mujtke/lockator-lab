/* Generated by Frama-C */

#line 20  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/int-ll64.h"
typedef unsigned char __u8;

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/int-ll64.h"
typedef unsigned short __u16;

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/int-ll64.h"
typedef int __s32;

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/int-ll64.h"
typedef unsigned int __u32;

#line 30  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/int-ll64.h"
typedef unsigned long long __u64;

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef signed char s8;

#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef unsigned char u8;

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef unsigned short u16;

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef int s32;

#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef unsigned int u32;

#line 24  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef long long s64;

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef unsigned long long u64;

#line 14  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef long __kernel_long_t;

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef unsigned long __kernel_ulong_t;

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_pid_t;

#line 48  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_uid32_t;

#line 49  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_gid32_t;

#line 71  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef __kernel_ulong_t __kernel_size_t;

#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_ssize_t;

#line 87  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_loff_t;

#line 88  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_time_t;

#line 89  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_clock_t;

#line 90  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_timer_t;

#line 91  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_clockid_t;

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/types.h"
typedef __u16 __le16;

#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/types.h"
typedef __u16 __be16;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/types.h"
typedef __u32 __le32;

#line 35  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/types.h"
typedef __u32 __be32;

#line 40  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/types.h"
typedef __u32 __wsum;

#line 12  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __u32 __kernel_dev_t;

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_dev_t dev_t;

#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef unsigned short umode_t;

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_pid_t pid_t;

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_clockid_t clockid_t;

#line 29  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef _Bool bool;

#line 31  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_uid32_t uid_t;

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_gid32_t gid_t;

#line 45  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_loff_t loff_t;

#line 54  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_size_t size_t;

#line 59  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_ssize_t ssize_t;

#line 69  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_time_t time_t;

#line 102  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __s32 int32_t;

#line 106  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __u8 uint8_t;

#line 108  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __u32 uint32_t;

#line 111  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __u64 uint64_t;

#line 133  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef unsigned long sector_t;

#line 134  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef unsigned long blkcnt_t;

#line 152  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef u64 dma_addr_t;

#line 157  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef unsigned int gfp_t;

#line 158  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef unsigned int fmode_t;

#line 159  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef unsigned int oom_flags_t;

#line 162  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef u64 phys_addr_t;

#line 167  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef phys_addr_t resource_size_t;

#line 177  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int counter ;
};

#line 177  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;

#line 182  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   long counter ;
};

#line 182  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;

#line 183  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};

#line 188 
struct hlist_node;

#line 188  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
struct hlist_head {
   struct hlist_node *first ;
};

#line 192  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};

#line 203  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
struct callback_head {
   struct callback_head *next ;
   void (*func)(struct callback_head *) ;
};

#line 67  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/page_types.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/ptrace.h"
struct __anonstruct_9 {
   unsigned int a ;
   unsigned int b ;
};

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/ptrace.h"
struct __anonstruct_10 {
   u16 limit0 ;
   u16 base0 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))) base1 : 8 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) type : 4 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) s : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) dpl : 2 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) p : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) limit : 4 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) avl : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) l : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) d : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) g : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))) base2 : 8 ;
};

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/ptrace.h"
union __anonunion_8 {
   struct __anonstruct_9 __anonCompField___anonunion_8_4 ;
   struct __anonstruct_10 __anonCompField___anonunion_8_5 ;
};

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/ptrace.h"
struct desc_struct {
   union __anonunion_8 __anonCompField_desc_struct_6 ;
};

#line 12  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pteval_t;

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;

#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;

#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_64_types.h"
struct __anonstruct_pte_t_11 {
   pteval_t pte ;
};

#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_64_types.h"
typedef struct __anonstruct_pte_t_11 pte_t;

#line 20  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_64_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};

#line 218  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;

#line 220  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_12 {
   pgdval_t pgd ;
};

#line 220  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_12 pgd_t;

#line 361 
struct page;

#line 361  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_types.h"
typedef struct page *pgtable_t;

#line 372 
struct file;

#line 385 
struct seq_file;

#line 423 
struct thread_struct;

#line 425 
struct mm_struct;

#line 426 
struct task_struct;

#line 427 
struct cpumask;

#line 20  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/spinlock_types.h"
struct qspinlock {
   atomic_t val ;
};

#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/qspinlock_types.h"
typedef struct qspinlock arch_spinlock_t;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/qspinlock_types.h"
struct qrwlock {
   atomic_t cnts ;
   arch_spinlock_t lock ;
};

#line 14  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/qrwlock_types.h"
typedef struct qrwlock arch_rwlock_t;

#line 234  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/printk.h"
struct _ddebug {
   char const *modname ;
   char const *function ;
   char const *filename ;
   char const *format ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))) lineno : 18 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))) flags : 8 ;
};

#line 48  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dynamic_debug.h"
struct device;

#line 54 
struct net_device;

#line 420  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/printk.h"
struct file_operations;

#line 432 
struct completion;

#line 102  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bug.h"
struct timespec;

#line 103 
struct compat_timespec;

#line 104  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bug.h"
struct __anonstruct_futex_16 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};

#line 104  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bug.h"
struct __anonstruct_nanosleep_17 {
   clockid_t clockid ;
   struct timespec *rmtp ;
   struct compat_timespec *compat_rmtp ;
   u64 expires ;
};

#line 104 
struct pollfd;

#line 104  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bug.h"
struct __anonstruct_poll_18 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};

#line 104  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bug.h"
union __anonunion_15 {
   struct __anonstruct_futex_16 futex ;
   struct __anonstruct_nanosleep_17 nanosleep ;
   struct __anonstruct_poll_18 poll ;
};

#line 104  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bug.h"
struct restart_block {
   long (*fn)(struct restart_block *) ;
   union __anonunion_15 __anonCompField_restart_block_7 ;
};

#line 127  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/uapi/asm/vm86.h"
struct kernel_vm86_regs {
   struct pt_regs pt ;
   unsigned short es ;
   unsigned short __esh ;
   unsigned short ds ;
   unsigned short __dsh ;
   unsigned short fs ;
   unsigned short __fsh ;
   unsigned short gs ;
   unsigned short __gsh ;
};

#line 79  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/vm86.h"
union __anonunion_19 {
   struct pt_regs *regs ;
   struct kernel_vm86_regs *vm86 ;
};

#line 79  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/vm86.h"
struct math_emu_info {
   long ___orig_eip ;
   union __anonunion_19 __anonCompField_math_emu_info_8 ;
};

#line 328  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bitmap.h"
struct cpumask {
   unsigned long bits[128U] ;
};

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cpumask.h"
typedef struct cpumask cpumask_t;

#line 652  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cpumask.h"
typedef struct cpumask *cpumask_var_t;

#line 260  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/special_insns.h"
struct fregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_29 {
   u64 rip ;
   u64 rdp ;
};

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_30 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
union __anonunion_28 {
   struct __anonstruct_29 __anonCompField___anonunion_28_12 ;
   struct __anonstruct_30 __anonCompField___anonunion_28_13 ;
};

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
union __anonunion_31 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
struct fxregs_state {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_28 __anonCompField_fxregs_state_14 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_31 __anonCompField_fxregs_state_15 ;
};

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
struct swregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};

#line 155  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
struct xstate_header {
   u64 xfeatures ;
   u64 xcomp_bv ;
   u64 reserved[6U] ;
};

#line 161  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
struct xregs_state {
   struct fxregs_state i387 ;
   struct xstate_header header ;
   u8 __reserved[464U] ;
};

#line 179  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
union fpregs_state {
   struct fregs_state fsave ;
   struct fxregs_state fxsave ;
   struct swregs_state soft ;
   struct xregs_state xsave ;
   u8 __padding[4096U] ;
};

#line 194  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
struct fpu {
   unsigned int last_cpu ;
   unsigned char fpstate_active ;
   unsigned char fpregs_active ;
   unsigned char counter ;
   union fpregs_state state ;
};

#line 170  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/processor.h"
struct seq_operations;

#line 369 
struct perf_event;

#line 370  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp0 ;
   unsigned long sp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fs ;
   unsigned long gs ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_nr ;
   unsigned long error_code ;
   unsigned long *io_bitmap_ptr ;
   unsigned long iopl ;
   unsigned int io_bitmap_max ;
   struct fpu fpu ;
};

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/atomic-long.h"
typedef atomic64_t atomic_long_t;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bottom_half.h"
struct lockdep_map;

#line 55  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/debug_locks.h"
struct stack_trace {
   unsigned int nr_entries ;
   unsigned int max_entries ;
   unsigned long *entries ;
   int skip ;
};

#line 28  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/stacktrace.h"
struct lockdep_subclass_key {
   char __one_byte ;
};

#line 53  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockdep.h"
struct lock_class_key {
   struct lockdep_subclass_key subkeys[8U] ;
};

#line 59  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockdep.h"
struct lock_class {
   struct list_head hash_entry ;
   struct list_head lock_entry ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct stack_trace usage_traces[13U] ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   unsigned int version ;
   unsigned long ops ;
   char const *name ;
   int name_version ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};

#line 144  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache[2U] ;
   char const *name ;
   int cpu ;
   unsigned long ip ;
};

#line 205  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(13))) class_idx : 13 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) irq_context : 2 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) trylock : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) read : 2 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) check : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) hardirqs_off : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(12))) references : 12 ;
   unsigned int pin_count ;
};

#line 546  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockdep.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;

#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock_types.h"
struct __anonstruct_35 {
   u8 __padding[24U] ;
   struct lockdep_map dep_map ;
};

#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock_types.h"
union __anonunion_34 {
   struct raw_spinlock rlock ;
   struct __anonstruct_35 __anonCompField___anonunion_34_17 ;
};

#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion_34 __anonCompField_spinlock_18 ;
};

#line 76  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rwlock_types.h"
struct __anonstruct_rwlock_t_36 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rwlock_types.h"
typedef struct __anonstruct_rwlock_t_36 rwlock_t;

#line 41  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.h"
struct mutex;

#line 30  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/slab.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/uio.h"
struct kvec {
   void *iov_base ;
   size_t iov_len ;
};

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uio.h"
struct bio_vec;

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uio.h"
union __anonunion_37 {
   struct iovec const *iov ;
   struct kvec const *kvec ;
   struct bio_vec const *bvec ;
};

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uio.h"
struct iov_iter {
   int type ;
   size_t iov_offset ;
   size_t count ;
   union __anonunion_37 __anonCompField_iov_iter_19 ;
   unsigned long nr_segs ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/socket.h"
typedef unsigned short __kernel_sa_family_t;

#line 18 
struct pid;

#line 19 
struct cred;

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/socket.h"
typedef __kernel_sa_family_t sa_family_t;

#line 24  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/socket.h"
struct sockaddr {
   sa_family_t sa_family ;
   char sa_data[14U] ;
};

#line 38 
struct kiocb;

#line 43  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_sync_serial_settings_38 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
};

#line 43  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_sync_serial_settings_38 sync_serial_settings;

#line 50  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_te1_settings_39 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
   unsigned int slot_map ;
};

#line 50  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_te1_settings_39 te1_settings;

#line 55  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_raw_hdlc_proto_40 {
   unsigned short encoding ;
   unsigned short parity ;
};

#line 55  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_raw_hdlc_proto_40 raw_hdlc_proto;

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_41 {
   unsigned int t391 ;
   unsigned int t392 ;
   unsigned int n391 ;
   unsigned int n392 ;
   unsigned int n393 ;
   unsigned short lmi ;
   unsigned short dce ;
};

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_41 fr_proto;

#line 69  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_42 {
   unsigned int dlci ;
};

#line 69  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_42 fr_proto_pvc;

#line 74  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_info_43 {
   unsigned int dlci ;
   char master[16U] ;
};

#line 74  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_info_43 fr_proto_pvc_info;

#line 79  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_cisco_proto_44 {
   unsigned int interval ;
   unsigned int timeout ;
};

#line 79  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_cisco_proto_44 cisco_proto;

#line 117  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct ifmap {
   unsigned long mem_start ;
   unsigned long mem_end ;
   unsigned short base_addr ;
   unsigned char irq ;
   unsigned char dma ;
   unsigned char port ;
};

#line 177  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if.h"
union __anonunion_ifs_ifsu_45 {
   raw_hdlc_proto *raw_hdlc ;
   cisco_proto *cisco ;
   fr_proto *fr ;
   fr_proto_pvc *fr_pvc ;
   fr_proto_pvc_info *fr_pvc_info ;
   sync_serial_settings *sync ;
   te1_settings *te1 ;
};

#line 177  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if.h"
struct if_settings {
   unsigned int type ;
   unsigned int size ;
   union __anonunion_ifs_ifsu_45 ifs_ifsu ;
};

#line 195  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if.h"
union __anonunion_ifr_ifrn_46 {
   char ifrn_name[16U] ;
};

#line 195  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if.h"
union __anonunion_ifr_ifru_47 {
   struct sockaddr ifru_addr ;
   struct sockaddr ifru_dstaddr ;
   struct sockaddr ifru_broadaddr ;
   struct sockaddr ifru_netmask ;
   struct sockaddr ifru_hwaddr ;
   short ifru_flags ;
   int ifru_ivalue ;
   int ifru_mtu ;
   struct ifmap ifru_map ;
   char ifru_slave[16U] ;
   char ifru_newname[16U] ;
   void *ifru_data ;
   struct if_settings ifru_settings ;
};

#line 195  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if.h"
struct ifreq {
   union __anonunion_ifr_ifrn_46 ifr_ifrn ;
   union __anonunion_ifr_ifru_47 ifr_ifru ;
};

#line 135  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/uapi/asm/stat.h"
struct seqcount {
   unsigned int sequence ;
   struct lockdep_map dep_map ;
};

#line 52  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/seqlock.h"
typedef struct seqcount seqcount_t;

#line 404  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/seqlock.h"
struct __anonstruct_seqlock_t_57 {
   struct seqcount seqcount ;
   spinlock_t lock ;
};

#line 404  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/seqlock.h"
typedef struct __anonstruct_seqlock_t_57 seqlock_t;

#line 598  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/seqlock.h"
struct timespec {
   __kernel_time_t tv_sec ;
   long tv_nsec ;
};

#line 83  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/highuid.h"
struct user_namespace;

#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uidgid.h"
struct __anonstruct_kuid_t_58 {
   uid_t val ;
};

#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uidgid.h"
typedef struct __anonstruct_kuid_t_58 kuid_t;

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uidgid.h"
struct __anonstruct_kgid_t_59 {
   gid_t val ;
};

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uidgid.h"
typedef struct __anonstruct_kgid_t_59 kgid_t;

#line 139  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uidgid.h"
struct kstat {
   u64 ino ;
   dev_t dev ;
   umode_t mode ;
   unsigned int nlink ;
   kuid_t uid ;
   kgid_t gid ;
   dev_t rdev ;
   loff_t size ;
   struct timespec atime ;
   struct timespec mtime ;
   struct timespec ctime ;
   unsigned long blksize ;
   unsigned long long blocks ;
};

#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/wait.h"
struct __wait_queue_head {
   spinlock_t lock ;
   struct list_head task_list ;
};

#line 43  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/wait.h"
typedef struct __wait_queue_head wait_queue_head_t;

#line 1170  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/wait.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};

#line 437  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/jiffies.h"
union ktime {
   s64 tv64 ;
};

#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ktime.h"
typedef union ktime ktime_t;

#line 296  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rcupdate.h"
struct notifier_block;

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sem.h"
struct sem_undo_list;

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};

#line 93  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bit_spinlock.h"
struct hlist_bl_node;

#line 93  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bit_spinlock.h"
struct hlist_bl_head {
   struct hlist_bl_node *first ;
};

#line 36  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list_bl.h"
struct hlist_bl_node {
   struct hlist_bl_node *next ;
   struct hlist_bl_node **pprev ;
};

#line 114  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rculist_bl.h"
struct __anonstruct_67 {
   spinlock_t lock ;
   int count ;
};

#line 114  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rculist_bl.h"
union __anonunion_66 {
   struct __anonstruct_67 __anonCompField___anonunion_66_20 ;
};

#line 114  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rculist_bl.h"
struct lockref {
   union __anonunion_66 __anonCompField_lockref_21 ;
};

#line 50  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockref.h"
struct path;

#line 51 
struct vfsmount;

#line 52  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockref.h"
struct __anonstruct_69 {
   u32 hash ;
   u32 len ;
};

#line 52  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockref.h"
union __anonunion_68 {
   struct __anonstruct_69 __anonCompField___anonunion_68_22 ;
   u64 hash_len ;
};

#line 52  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockref.h"
struct qstr {
   union __anonunion_68 __anonCompField_qstr_23 ;
   unsigned char const *name ;
};

#line 90  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dcache.h"
struct inode;

#line 90 
struct dentry_operations;

#line 90 
struct super_block;

#line 90  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dcache.h"
union __anonunion_d_u_70 {
   struct hlist_node d_alias ;
   struct callback_head d_rcu ;
};

#line 90  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dcache.h"
struct dentry {
   unsigned int d_flags ;
   seqcount_t d_seq ;
   struct hlist_bl_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct inode *d_inode ;
   unsigned char d_iname[32U] ;
   struct lockref d_lockref ;
   struct dentry_operations const *d_op ;
   struct super_block *d_sb ;
   unsigned long d_time ;
   void *d_fsdata ;
   struct list_head d_lru ;
   struct list_head d_child ;
   struct list_head d_subdirs ;
   union __anonunion_d_u_70 d_u ;
};

#line 142  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_weak_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_hash)(struct dentry const *, struct qstr *) ;
   int (*d_compare)(struct dentry const *, struct dentry const *, unsigned int , char const *, struct qstr const *) ;
   int (*d_delete)(struct dentry const *) ;
   void (*d_release)(struct dentry *) ;
   void (*d_prune)(struct dentry *) ;
   void (*d_iput)(struct dentry *, struct inode *) ;
   char *(*d_dname)(struct dentry *, char *, int ) ;
   struct vfsmount *(*d_automount)(struct path *) ;
   int (*d_manage)(struct dentry *, bool ) ;
   struct inode *(*d_select_inode)(struct dentry *, unsigned int ) ;
};

#line 586  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dcache.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
};

#line 95  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/nodemask.h"
struct __anonstruct_nodemask_t_73 {
   unsigned long bits[16U] ;
};

#line 95  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/nodemask.h"
typedef struct __anonstruct_nodemask_t_73 nodemask_t;

#line 520 
struct mem_cgroup;

#line 520  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/nodemask.h"
struct shrink_control {
   gfp_t gfp_mask ;
   unsigned long nr_to_scan ;
   int nid ;
   struct mem_cgroup *memcg ;
};

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/shrinker.h"
struct shrinker {
   unsigned long (*count_objects)(struct shrinker *, struct shrink_control *) ;
   unsigned long (*scan_objects)(struct shrinker *, struct shrink_control *) ;
   int seeks ;
   long batch ;
   unsigned long flags ;
   struct list_head list ;
   atomic_long_t *nr_deferred ;
};

#line 80  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/shrinker.h"
struct list_lru_one {
   struct list_head list ;
   long nr_items ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list_lru.h"
struct list_lru_memcg {
   struct list_lru_one *lru[0U] ;
};

#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list_lru.h"
struct list_lru_node {
   spinlock_t lock ;
   struct list_lru_one lru ;
   struct list_lru_memcg *memcg_lrus ;
};

#line 47  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list_lru.h"
struct list_lru {
   struct list_lru_node *node ;
   struct list_head list ;
};

#line 189 
struct llist_node;

#line 64  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/llist.h"
struct llist_node {
   struct llist_node *next ;
};

#line 58  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/radix-tree.h"
struct __anonstruct_75 {
   struct radix_tree_node *parent ;
   void *private_data ;
};

#line 58  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/radix-tree.h"
union __anonunion_74 {
   struct __anonstruct_75 __anonCompField___anonunion_74_24 ;
   struct callback_head callback_head ;
};

#line 58  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/radix-tree.h"
struct radix_tree_node {
   unsigned int path ;
   unsigned int count ;
   union __anonunion_74 __anonCompField_radix_tree_node_25 ;
   struct list_head private_list ;
   void *slots[64U] ;
   unsigned long tags[3U][1U] ;
};

#line 105  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/radix-tree.h"
struct radix_tree_root {
   unsigned int height ;
   gfp_t gfp_mask ;
   struct radix_tree_node *rnode ;
};

#line 428  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/radix-tree.h"
struct rb_node {
   unsigned long __rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
};

#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};

#line 97 
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_PGID = 1,
    PIDTYPE_SID = 2,
    PIDTYPE_MAX = 3
};

#line 104 
struct pid_namespace;

#line 104  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rbtree.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
   struct hlist_node pid_chain ;
};

#line 56  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pid.h"
struct pid {
   atomic_t count ;
   unsigned int level ;
   struct hlist_head tasks[3U] ;
   struct callback_head rcu ;
   struct upid numbers[1U] ;
};

#line 68  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pid.h"
struct pid_link {
   struct hlist_node node ;
   struct pid *pid ;
};

#line 13  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/osq_lock.h"
struct optimistic_spin_queue {
   atomic_t tail ;
};

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/osq_lock.h"
struct mutex {
   atomic_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct task_struct *owner ;
   void *magic ;
   struct lockdep_map dep_map ;
};

#line 67  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   void *magic ;
};

#line 193 
struct rw_semaphore;

#line 194  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mutex.h"
struct rw_semaphore {
   long count ;
   struct list_head wait_list ;
   raw_spinlock_t wait_lock ;
   struct optimistic_spin_queue osq ;
   struct task_struct *owner ;
   struct lockdep_map dep_map ;
};

#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;

#line 45  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/semaphore.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};

#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/fiemap.h"
enum migrate_mode {
    MIGRATE_ASYNC = 0,
    MIGRATE_SYNC_LIGHT = 1,
    MIGRATE_SYNC = 2
};

#line 44 
struct vm_area_struct;

#line 64  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/e820.h"
struct resource {
   resource_size_t start ;
   resource_size_t end ;
   char const *name ;
   unsigned long flags ;
   struct resource *parent ;
   struct resource *sibling ;
   struct resource *child ;
};

#line 172  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/x86_init.h"
struct pci_dev;

#line 153  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/mpspec.h"
struct timer_list {
   struct hlist_node entry ;
   unsigned long expires ;
   void (*function)(unsigned long ) ;
   unsigned long data ;
   u32 flags ;
   int slack ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
   struct lockdep_map lockdep_map ;
};

#line 238  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timer.h"
struct hrtimer;

#line 239 
enum hrtimer_restart;

#line 837  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/sysctl.h"
struct ctl_table;

#line 838 
struct nsproxy;

#line 839 
struct ctl_table_root;

#line 840 
struct ctl_table_header;

#line 841 
struct ctl_dir;

#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
typedef int proc_handler(struct ctl_table *, int , void *, size_t *, loff_t *);

#line 57  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct ctl_table_poll {
   atomic_t event ;
   wait_queue_head_t wait ;
};

#line 96  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct ctl_table {
   char const *procname ;
   void *data ;
   int maxlen ;
   umode_t mode ;
   struct ctl_table *child ;
   proc_handler *proc_handler ;
   struct ctl_table_poll *poll ;
   void *extra1 ;
   void *extra2 ;
};

#line 117  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct ctl_node {
   struct rb_node node ;
   struct ctl_table_header *header ;
};

#line 122  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct __anonstruct_144 {
   struct ctl_table *ctl_table ;
   int used ;
   int count ;
   int nreg ;
};

#line 122  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
union __anonunion_143 {
   struct __anonstruct_144 __anonCompField___anonunion_143_26 ;
   struct callback_head rcu ;
};

#line 122 
struct ctl_table_set;

#line 122  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct ctl_table_header {
   union __anonunion_143 __anonCompField_ctl_table_header_27 ;
   struct completion *unregistering ;
   struct ctl_table *ctl_table_arg ;
   struct ctl_table_root *root ;
   struct ctl_table_set *set ;
   struct ctl_dir *parent ;
   struct ctl_node *node ;
};

#line 143  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct ctl_dir {
   struct ctl_table_header header ;
   struct rb_root root ;
};

#line 149  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct ctl_table_set {
   int (*is_seen)(struct ctl_table_set *) ;
   struct ctl_dir dir ;
};

#line 154  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct ctl_table_root {
   struct ctl_table_set default_set ;
   struct ctl_table_set *(*lookup)(struct ctl_table_root *, struct nsproxy *) ;
   int (*permissions)(struct ctl_table_header *, struct ctl_table *) ;
};

#line 259  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timer.h"
struct workqueue_struct;

#line 260 
struct work_struct;

#line 54  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct *) ;
   struct lockdep_map lockdep_map ;
};

#line 107  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
   struct workqueue_struct *wq ;
   int cpu ;
};

#line 58  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm.h"
struct pm_message {
   int event ;
};

#line 64  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm.h"
typedef struct pm_message pm_message_t;

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device *) ;
   void (*complete)(struct device *) ;
   int (*suspend)(struct device *) ;
   int (*resume)(struct device *) ;
   int (*freeze)(struct device *) ;
   int (*thaw)(struct device *) ;
   int (*poweroff)(struct device *) ;
   int (*restore)(struct device *) ;
   int (*suspend_late)(struct device *) ;
   int (*resume_early)(struct device *) ;
   int (*freeze_late)(struct device *) ;
   int (*thaw_early)(struct device *) ;
   int (*poweroff_late)(struct device *) ;
   int (*restore_early)(struct device *) ;
   int (*suspend_noirq)(struct device *) ;
   int (*resume_noirq)(struct device *) ;
   int (*freeze_noirq)(struct device *) ;
   int (*thaw_noirq)(struct device *) ;
   int (*poweroff_noirq)(struct device *) ;
   int (*restore_noirq)(struct device *) ;
   int (*runtime_suspend)(struct device *) ;
   int (*runtime_resume)(struct device *) ;
   int (*runtime_idle)(struct device *) ;
};

#line 320 
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
};

#line 327 
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_AUTOSUSPEND = 3,
    RPM_REQ_RESUME = 4
};

#line 335 
struct wakeup_source;

#line 336 
struct wake_irq;

#line 338  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm.h"
struct pm_subsys_data {
   spinlock_t lock ;
   unsigned int refcount ;
   struct list_head clock_list ;
};

#line 553 
struct dev_pm_qos;

#line 553  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) can_wakeup : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) async_suspend : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_prepared : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_suspended : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_noirq_suspended : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_late_suspended : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ignore_children : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) early_init : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) direct_complete : 1 ;
   spinlock_t lock ;
   struct list_head entry ;
   struct completion completion ;
   struct wakeup_source *wakeup ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) wakeup_path : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) syscore : 1 ;
   struct timer_list suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   struct wake_irq *wakeirq ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))) disable_depth : 3 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) idle_notification : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) request_pending : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) deferred_resume : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) run_wake : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) runtime_auto : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) no_callbacks : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) irq_safe : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) use_autosuspend : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) timer_autosuspends : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) memalloc_noio : 1 ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   int autosuspend_delay ;
   unsigned long last_busy ;
   unsigned long active_jiffies ;
   unsigned long suspended_jiffies ;
   unsigned long accounting_timestamp ;
   struct pm_subsys_data *subsys_data ;
   void (*set_latency_tolerance)(struct device *, s32 ) ;
   struct dev_pm_qos *qos ;
};

#line 615  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm.h"
struct dev_pm_domain {
   struct dev_pm_ops ops ;
   void (*detach)(struct device *, bool ) ;
   int (*activate)(struct device *) ;
   void (*sync)(struct device *) ;
   void (*dismiss)(struct device *) ;
};

#line 133  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/topology.h"
struct pci_bus;

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/mmu.h"
struct ldt_struct;

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/mmu.h"
struct __anonstruct_mm_context_t_145 {
   struct ldt_struct *ldt ;
   unsigned short ia32_compat ;
   struct mutex lock ;
   void *vdso ;
   atomic_t perf_rdpmc_allowed ;
};

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/mmu.h"
typedef struct __anonstruct_mm_context_t_145 mm_context_t;

#line 30  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/percpu-rwsem.h"
struct block_device;

#line 31 
struct io_context;

#line 32 
struct cgroup_subsys_state;

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blk_types.h"
struct bio_vec {
   struct page *bv_page ;
   unsigned int bv_len ;
   unsigned int bv_offset ;
};

#line 60  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/fs.h"
struct backing_dev_info;

#line 61 
struct bdi_writeback;

#line 62 
struct export_operations;

#line 64 
struct kobject;

#line 65 
struct pipe_inode_info;

#line 66 
struct poll_table_struct;

#line 67 
struct kstatfs;

#line 68 
struct swap_info_struct;

#line 69 
struct vm_fault;

#line 75  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   kuid_t ia_uid ;
   kgid_t ia_gid ;
   loff_t ia_size ;
   struct timespec ia_atime ;
   struct timespec ia_mtime ;
   struct timespec ia_ctime ;
   struct file *ia_file ;
};

#line 51  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/notifier.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block *, unsigned long , void *) ;
   struct notifier_block *next ;
   int priority ;
};

#line 428  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/gfp.h"
struct percpu_counter {
   raw_spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};

#line 212  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dqblk_xfs.h"
struct dquot;

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/projid.h"
typedef __kernel_uid32_t projid_t;

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/projid.h"
struct __anonstruct_kprojid_t_173 {
   projid_t val ;
};

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/projid.h"
typedef struct __anonstruct_kprojid_t_173 kprojid_t;

#line 166  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/quota.h"
enum quota_type {
    USRQUOTA = 0,
    GRPQUOTA = 1,
    PRJQUOTA = 2
};

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
typedef long long qsize_t;

#line 67  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
union __anonunion_174 {
   kuid_t uid ;
   kgid_t gid ;
   kprojid_t projid ;
};

#line 67  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct kqid {
   union __anonunion_174 __anonCompField_kqid_39 ;
   enum quota_type type ;
};

#line 184  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time_t dqb_btime ;
   time_t dqb_itime ;
};

#line 206 
struct quota_format_type;

#line 207  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_max_spc_limit ;
   qsize_t dqi_max_ino_limit ;
   void *dqi_priv ;
};

#line 272  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   atomic_t dq_count ;
   wait_queue_head_t dq_wait_unused ;
   struct super_block *dq_sb ;
   struct kqid dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   struct mem_dqblk dq_dqb ;
};

#line 299  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block *, int ) ;
   int (*read_file_info)(struct super_block *, int ) ;
   int (*write_file_info)(struct super_block *, int ) ;
   int (*free_file_info)(struct super_block *, int ) ;
   int (*read_dqblk)(struct dquot *) ;
   int (*commit_dqblk)(struct dquot *) ;
   int (*release_dqblk)(struct dquot *) ;
};

#line 310  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct dquot_operations {
   int (*write_dquot)(struct dquot *) ;
   struct dquot *(*alloc_dquot)(struct super_block *, int ) ;
   void (*destroy_dquot)(struct dquot *) ;
   int (*acquire_dquot)(struct dquot *) ;
   int (*release_dquot)(struct dquot *) ;
   int (*mark_dirty)(struct dquot *) ;
   int (*write_info)(struct super_block *, int ) ;
   qsize_t *(*get_reserved_space)(struct inode *) ;
   int (*get_projid)(struct inode *, kprojid_t *) ;
};

#line 325  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct qc_dqblk {
   int d_fieldmask ;
   u64 d_spc_hardlimit ;
   u64 d_spc_softlimit ;
   u64 d_ino_hardlimit ;
   u64 d_ino_softlimit ;
   u64 d_space ;
   u64 d_ino_count ;
   s64 d_ino_timer ;
   s64 d_spc_timer ;
   int d_ino_warns ;
   int d_spc_warns ;
   u64 d_rt_spc_hardlimit ;
   u64 d_rt_spc_softlimit ;
   u64 d_rt_space ;
   s64 d_rt_spc_timer ;
   int d_rt_spc_warns ;
};

#line 348  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct qc_type_state {
   unsigned int flags ;
   unsigned int spc_timelimit ;
   unsigned int ino_timelimit ;
   unsigned int rt_spc_timelimit ;
   unsigned int spc_warnlimit ;
   unsigned int ino_warnlimit ;
   unsigned int rt_spc_warnlimit ;
   unsigned long long ino ;
   blkcnt_t blocks ;
   blkcnt_t nextents ;
};

#line 394  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct qc_state {
   unsigned int s_incoredqs ;
   struct qc_type_state s_state[3U] ;
};

#line 405  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct qc_info {
   int i_fieldmask ;
   unsigned int i_flags ;
   unsigned int i_spc_timelimit ;
   unsigned int i_ino_timelimit ;
   unsigned int i_rt_spc_timelimit ;
   unsigned int i_spc_warnlimit ;
   unsigned int i_ino_warnlimit ;
   unsigned int i_rt_spc_warnlimit ;
};

#line 418  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block *, int , int , struct path *) ;
   int (*quota_off)(struct super_block *, int ) ;
   int (*quota_enable)(struct super_block *, unsigned int ) ;
   int (*quota_disable)(struct super_block *, unsigned int ) ;
   int (*quota_sync)(struct super_block *, int ) ;
   int (*set_info)(struct super_block *, int , struct qc_info *) ;
   int (*get_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*set_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_state)(struct super_block *, struct qc_state *) ;
   int (*rm_xquota)(struct super_block *, unsigned int ) ;
};

#line 432  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops const *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};

#line 496  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct mutex dqio_mutex ;
   struct mutex dqonoff_mutex ;
   struct inode *files[3U] ;
   struct mem_dqinfo info[3U] ;
   struct quota_format_ops const *ops[3U] ;
};

#line 526 
struct address_space;

#line 527 
struct writeback_control;

#line 528  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct kiocb {
   struct file *ki_filp ;
   loff_t ki_pos ;
   void (*ki_complete)(struct kiocb *, long , long ) ;
   void *private ;
   int ki_flags ;
};

#line 366  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page *, struct writeback_control *) ;
   int (*readpage)(struct file *, struct page *) ;
   int (*writepages)(struct address_space *, struct writeback_control *) ;
   int (*set_page_dirty)(struct page *) ;
   int (*readpages)(struct file *, struct address_space *, struct list_head *, unsigned int ) ;
   int (*write_begin)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page **, void **) ;
   int (*write_end)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page *, void *) ;
   sector_t (*bmap)(struct address_space *, sector_t ) ;
   void (*invalidatepage)(struct page *, unsigned int , unsigned int ) ;
   int (*releasepage)(struct page *, gfp_t ) ;
   void (*freepage)(struct page *) ;
   ssize_t (*direct_IO)(struct kiocb *, struct iov_iter *, loff_t ) ;
   int (*migratepage)(struct address_space *, struct page *, struct page *, enum migrate_mode ) ;
   int (*launder_page)(struct page *) ;
   int (*is_partially_uptodate)(struct page *, unsigned long , unsigned long ) ;
   void (*is_dirty_writeback)(struct page *, bool *, bool *) ;
   int (*error_remove_page)(struct address_space *, struct page *) ;
   int (*swap_activate)(struct swap_info_struct *, struct file *, sector_t *) ;
   void (*swap_deactivate)(struct file *) ;
};

#line 423  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct radix_tree_root page_tree ;
   spinlock_t tree_lock ;
   atomic_t i_mmap_writable ;
   struct rb_root i_mmap ;
   struct rw_semaphore i_mmap_rwsem ;
   unsigned long nrpages ;
   unsigned long nrshadows ;
   unsigned long writeback_index ;
   struct address_space_operations const *a_ops ;
   unsigned long flags ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   void *private_data ;
};

#line 443 
struct request_queue;

#line 444 
struct hd_struct;

#line 444 
struct gendisk;

#line 444  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   int bd_openers ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   struct mutex bd_mutex ;
   struct list_head bd_inodes ;
   void *bd_claiming ;
   void *bd_holder ;
   int bd_holders ;
   bool bd_write_holder ;
   struct list_head bd_holder_disks ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct request_queue *bd_queue ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
};

#line 560 
struct posix_acl;

#line 561 
struct inode_operations;

#line 561  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
union __anonunion_177 {
   unsigned int const i_nlink ;
   unsigned int __i_nlink ;
};

#line 561  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
union __anonunion_178 {
   struct hlist_head i_dentry ;
   struct callback_head i_rcu ;
};

#line 561 
struct file_lock_context;

#line 561 
struct cdev;

#line 561  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
union __anonunion_179 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
   char *i_link ;
};

#line 561  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct inode {
   umode_t i_mode ;
   unsigned short i_opflags ;
   kuid_t i_uid ;
   kgid_t i_gid ;
   unsigned int i_flags ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   struct inode_operations const *i_op ;
   struct super_block *i_sb ;
   struct address_space *i_mapping ;
   void *i_security ;
   unsigned long i_ino ;
   union __anonunion_177 __anonCompField_inode_40 ;
   dev_t i_rdev ;
   loff_t i_size ;
   struct timespec i_atime ;
   struct timespec i_mtime ;
   struct timespec i_ctime ;
   spinlock_t i_lock ;
   unsigned short i_bytes ;
   unsigned int i_blkbits ;
   blkcnt_t i_blocks ;
   unsigned long i_state ;
   struct mutex i_mutex ;
   unsigned long dirtied_when ;
   unsigned long dirtied_time_when ;
   struct hlist_node i_hash ;
   struct list_head i_wb_list ;
   struct bdi_writeback *i_wb ;
   int i_wb_frn_winner ;
   u16 i_wb_frn_avg_time ;
   u16 i_wb_frn_history ;
   struct list_head i_lru ;
   struct list_head i_sb_list ;
   union __anonunion_178 __anonCompField_inode_41 ;
   u64 i_version ;
   atomic_t i_count ;
   atomic_t i_dio_count ;
   atomic_t i_writecount ;
   atomic_t i_readcount ;
   struct file_operations const *i_fop ;
   struct file_lock_context *i_flctx ;
   struct address_space i_data ;
   struct list_head i_devices ;
   union __anonunion_179 __anonCompField_inode_42 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct hlist_head i_fsnotify_marks ;
   void *i_private ;
};

#line 807  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   kuid_t uid ;
   kuid_t euid ;
   int signum ;
};

#line 815  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};

#line 838  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
union __anonunion_f_u_180 {
   struct llist_node fu_llist ;
   struct callback_head fu_rcuhead ;
};

#line 838  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct file {
   union __anonunion_f_u_180 f_u ;
   struct path f_path ;
   struct inode *f_inode ;
   struct file_operations const *f_op ;
   spinlock_t f_lock ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   struct mutex f_pos_lock ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred const *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct list_head f_tfile_llink ;
   struct address_space *f_mapping ;
};

#line 923  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
typedef void *fl_owner_t;

#line 924 
struct file_lock;

#line 925  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock *, struct file_lock *) ;
   void (*fl_release_private)(struct file_lock *) ;
};

#line 931  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct lock_manager_operations {
   int (*lm_compare_owner)(struct file_lock *, struct file_lock *) ;
   unsigned long (*lm_owner_key)(struct file_lock *) ;
   fl_owner_t (*lm_get_owner)(fl_owner_t ) ;
   void (*lm_put_owner)(fl_owner_t ) ;
   void (*lm_notify)(struct file_lock *) ;
   int (*lm_grant)(struct file_lock *, int ) ;
   bool (*lm_break)(struct file_lock *) ;
   int (*lm_change)(struct file_lock *, int , struct list_head *) ;
   void (*lm_setup)(struct file_lock *, void **) ;
};

#line 947 
struct net;

#line 952 
struct nlm_lockowner;

#line 953  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};

#line 14  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/nfs_fs_i.h"
struct nfs4_lock_state;

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};

#line 19 
struct fasync_struct;

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/nfs_fs_i.h"
struct __anonstruct_afs_182 {
   struct list_head link ;
   int state ;
};

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/nfs_fs_i.h"
union __anonunion_fl_u_181 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_182 afs ;
};

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/nfs_fs_i.h"
struct file_lock {
   struct file_lock *fl_next ;
   struct list_head fl_list ;
   struct hlist_node fl_link ;
   struct list_head fl_block ;
   fl_owner_t fl_owner ;
   unsigned int fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   int fl_link_cpu ;
   struct pid *fl_nspid ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   unsigned long fl_downgrade_time ;
   struct file_lock_operations const *fl_ops ;
   struct lock_manager_operations const *fl_lmops ;
   union __anonunion_fl_u_181 fl_u ;
};

#line 1005  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct file_lock_context {
   spinlock_t flc_lock ;
   struct list_head flc_flock ;
   struct list_head flc_posix ;
   struct list_head flc_lease ;
};

#line 1061 
struct files_struct;

#line 1221  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct fasync_struct {
   spinlock_t fa_lock ;
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
   struct callback_head fa_rcu ;
};

#line 1256  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct sb_writers {
   struct percpu_counter counter[3U] ;
   wait_queue_head_t wait ;
   int frozen ;
   wait_queue_head_t wait_unfrozen ;
   struct lockdep_map lock_map[3U] ;
};

#line 1287 
struct file_system_type;

#line 1287 
struct super_operations;

#line 1287 
struct xattr_handler;

#line 1287 
struct mtd_info;

#line 1287  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations const *s_op ;
   struct dquot_operations const *dq_op ;
   struct quotactl_ops const *s_qcop ;
   struct export_operations const *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_iflags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   int s_count ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler const **s_xattr ;
   struct list_head s_inodes ;
   struct hlist_bl_head s_anon ;
   struct list_head s_mounts ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct hlist_node s_instances ;
   unsigned int s_quota_types ;
   struct quota_info s_dquot ;
   struct sb_writers s_writers ;
   char s_id[32U] ;
   u8 s_uuid[16U] ;
   void *s_fs_info ;
   unsigned int s_max_links ;
   fmode_t s_mode ;
   u32 s_time_gran ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   char *s_options ;
   struct dentry_operations const *s_d_op ;
   int cleancache_poolid ;
   struct shrinker s_shrink ;
   atomic_long_t s_remove_count ;
   int s_readonly_remount ;
   struct workqueue_struct *s_dio_done_wq ;
   struct hlist_head s_pins ;
   struct list_lru s_dentry_lru ;
   struct list_lru s_inode_lru ;
   struct callback_head rcu ;
   int s_stack_depth ;
};

#line 1526  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};

#line 1540 
struct dir_context;

#line 1565  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct dir_context {
   int (*actor)(struct dir_context *, char const *, int , loff_t , u64 , unsigned int ) ;
   loff_t pos ;
};

#line 1572  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file *, loff_t , int ) ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char const *, size_t , loff_t *) ;
   ssize_t (*read_iter)(struct kiocb *, struct iov_iter *) ;
   ssize_t (*write_iter)(struct kiocb *, struct iov_iter *) ;
   int (*iterate)(struct file *, struct dir_context *) ;
   unsigned int (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   int (*mremap)(struct file *, struct vm_area_struct *) ;
   int (*open)(struct inode *, struct file *) ;
   int (*flush)(struct file *, fl_owner_t ) ;
   int (*release)(struct inode *, struct file *) ;
   int (*fsync)(struct file *, loff_t , loff_t , int ) ;
   int (*aio_fsync)(struct kiocb *, int ) ;
   int (*fasync)(int , struct file *, int ) ;
   int (*lock)(struct file *, int , struct file_lock *) ;
   ssize_t (*sendpage)(struct file *, struct page *, int , size_t , loff_t *, int ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*check_flags)(int ) ;
   int (*flock)(struct file *, int , struct file_lock *) ;
   ssize_t (*splice_write)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ) ;
   ssize_t (*splice_read)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*setlease)(struct file *, long , struct file_lock **, void **) ;
   long (*fallocate)(struct file *, int , loff_t , loff_t ) ;
   void (*show_fdinfo)(struct seq_file *, struct file *) ;
};

#line 1633  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct inode_operations {
   struct dentry *(*lookup)(struct inode *, struct dentry *, unsigned int ) ;
   char const *(*follow_link)(struct dentry *, void **) ;
   int (*permission)(struct inode *, int ) ;
   struct posix_acl *(*get_acl)(struct inode *, int ) ;
   int (*readlink)(struct dentry *, char *, int ) ;
   void (*put_link)(struct inode *, void *) ;
   int (*create)(struct inode *, struct dentry *, umode_t , bool ) ;
   int (*link)(struct dentry *, struct inode *, struct dentry *) ;
   int (*unlink)(struct inode *, struct dentry *) ;
   int (*symlink)(struct inode *, struct dentry *, char const *) ;
   int (*mkdir)(struct inode *, struct dentry *, umode_t ) ;
   int (*rmdir)(struct inode *, struct dentry *) ;
   int (*mknod)(struct inode *, struct dentry *, umode_t , dev_t ) ;
   int (*rename)(struct inode *, struct dentry *, struct inode *, struct dentry *) ;
   int (*rename2)(struct inode *, struct dentry *, struct inode *, struct dentry *, unsigned int ) ;
   int (*setattr)(struct dentry *, struct iattr *) ;
   int (*getattr)(struct vfsmount *, struct dentry *, struct kstat *) ;
   int (*setxattr)(struct dentry *, char const *, void const *, size_t , int ) ;
   ssize_t (*getxattr)(struct dentry *, char const *, void *, size_t ) ;
   ssize_t (*listxattr)(struct dentry *, char *, size_t ) ;
   int (*removexattr)(struct dentry *, char const *) ;
   int (*fiemap)(struct inode *, struct fiemap_extent_info *, u64 , u64 ) ;
   int (*update_time)(struct inode *, struct timespec *, int ) ;
   int (*atomic_open)(struct inode *, struct dentry *, struct file *, unsigned int , umode_t , int *) ;
   int (*tmpfile)(struct inode *, struct dentry *, umode_t ) ;
   int (*set_acl)(struct inode *, struct posix_acl *, int ) ;
};

#line 1687  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block *) ;
   void (*destroy_inode)(struct inode *) ;
   void (*dirty_inode)(struct inode *, int ) ;
   int (*write_inode)(struct inode *, struct writeback_control *) ;
   int (*drop_inode)(struct inode *) ;
   void (*evict_inode)(struct inode *) ;
   void (*put_super)(struct super_block *) ;
   int (*sync_fs)(struct super_block *, int ) ;
   int (*freeze_super)(struct super_block *) ;
   int (*freeze_fs)(struct super_block *) ;
   int (*thaw_super)(struct super_block *) ;
   int (*unfreeze_fs)(struct super_block *) ;
   int (*statfs)(struct dentry *, struct kstatfs *) ;
   int (*remount_fs)(struct super_block *, int *, char *) ;
   void (*umount_begin)(struct super_block *) ;
   int (*show_options)(struct seq_file *, struct dentry *) ;
   int (*show_devname)(struct seq_file *, struct dentry *) ;
   int (*show_path)(struct seq_file *, struct dentry *) ;
   int (*show_stats)(struct seq_file *, struct dentry *) ;
   ssize_t (*quota_read)(struct super_block *, int , char *, size_t , loff_t ) ;
   ssize_t (*quota_write)(struct super_block *, int , char const *, size_t , loff_t ) ;
   struct dquot **(*get_dquots)(struct inode *) ;
   int (*bdev_try_to_free_page)(struct super_block *, struct page *, gfp_t ) ;
   long (*nr_cached_objects)(struct super_block *, struct shrink_control *) ;
   long (*free_cached_objects)(struct super_block *, struct shrink_control *) ;
};

#line 1926  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct file_system_type {
   char const *name ;
   int fs_flags ;
   struct dentry *(*mount)(struct file_system_type *, int , char const *, void *) ;
   void (*kill_sb)(struct super_block *) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct hlist_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key s_vfs_rename_key ;
   struct lock_class_key s_writers_key[3U] ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
};

#line 2251 
struct kmem_cache;

#line 84  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/plist.h"
struct plist_node {
   int prio ;
   struct list_head prio_list ;
   struct list_head node_list ;
};

#line 58  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/uprobes.h"
struct arch_uprobe_task {
   unsigned long saved_scratch_register ;
   unsigned int saved_trap_nr ;
   unsigned int saved_tf ;
};

#line 66 
enum uprobe_task_state {
    UTASK_RUNNING = 0,
    UTASK_SSTEP = 1,
    UTASK_SSTEP_ACK = 2,
    UTASK_SSTEP_TRAPPED = 3
};

#line 73  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/uprobes.h"
struct __anonstruct_188 {
   struct arch_uprobe_task autask ;
   unsigned long vaddr ;
};

#line 73  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/uprobes.h"
struct __anonstruct_189 {
   struct callback_head dup_xol_work ;
   unsigned long dup_xol_addr ;
};

#line 73  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/uprobes.h"
union __anonunion_187 {
   struct __anonstruct_188 __anonCompField___anonunion_187_45 ;
   struct __anonstruct_189 __anonCompField___anonunion_187_46 ;
};

#line 73 
struct uprobe;

#line 73 
struct return_instance;

#line 73  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/uprobes.h"
struct uprobe_task {
   enum uprobe_task_state state ;
   union __anonunion_187 __anonCompField_uprobe_task_47 ;
   struct uprobe *active_uprobe ;
   unsigned long xol_vaddr ;
   struct return_instance *return_instances ;
   unsigned int depth ;
};

#line 94  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uprobes.h"
struct xol_area;

#line 95  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uprobes.h"
struct uprobes_state {
   struct xol_area *xol_area ;
};

#line 31  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
typedef void compound_page_dtor(struct page *);

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
union __anonunion_190 {
   struct address_space *mapping ;
   void *s_mem ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
union __anonunion_192 {
   unsigned long index ;
   void *freelist ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct __anonstruct_196 {
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(16))) inuse : 16 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(15))) objects : 15 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) frozen : 1 ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
union __anonunion_195 {
   atomic_t _mapcount ;
   struct __anonstruct_196 __anonCompField___anonunion_195_50 ;
   int units ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct __anonstruct_194 {
   union __anonunion_195 __anonCompField___anonstruct_194_51 ;
   atomic_t _count ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
union __anonunion_193 {
   unsigned long counters ;
   struct __anonstruct_194 __anonCompField___anonunion_193_52 ;
   unsigned int active ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct __anonstruct_191 {
   union __anonunion_192 __anonCompField___anonstruct_191_49 ;
   union __anonunion_193 __anonCompField___anonstruct_191_53 ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct __anonstruct_198 {
   struct page *next ;
   int pages ;
   int pobjects ;
};

#line 32 
struct slab;

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct __anonstruct_199 {
   compound_page_dtor *compound_dtor ;
   unsigned long compound_order ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
union __anonunion_197 {
   struct list_head lru ;
   struct __anonstruct_198 __anonCompField___anonunion_197_55 ;
   struct slab *slab_page ;
   struct callback_head callback_head ;
   struct __anonstruct_199 __anonCompField___anonunion_197_56 ;
   pgtable_t pmd_huge_pte ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
union __anonunion_200 {
   unsigned long private ;
   spinlock_t *ptl ;
   struct kmem_cache *slab_cache ;
   struct page *first_page ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct page {
   unsigned long flags ;
   union __anonunion_190 __anonCompField_page_48 ;
   struct __anonstruct_191 __anonCompField_page_54 ;
   union __anonunion_197 __anonCompField_page_57 ;
   union __anonunion_200 __anonCompField_page_58 ;
   struct mem_cgroup *mem_cgroup ;
};

#line 172  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct page_frag {
   struct page *page ;
   __u32 offset ;
   __u32 size ;
};

#line 257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct __anonstruct_shared_201 {
   struct rb_node rb ;
   unsigned long rb_subtree_last ;
};

#line 257 
struct anon_vma;

#line 257 
struct vm_operations_struct;

#line 257 
struct mempolicy;

#line 257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct vm_area_struct {
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   struct vm_area_struct *vm_prev ;
   struct rb_node vm_rb ;
   unsigned long rb_subtree_gap ;
   struct mm_struct *vm_mm ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct __anonstruct_shared_201 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct const *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   struct mempolicy *vm_policy ;
};

#line 325  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};

#line 331  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};

#line 344  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct task_rss_stat {
   int events ;
   int count[3U] ;
};

#line 352  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct mm_rss_stat {
   atomic_long_t count[3U] ;
};

#line 357 
struct kioctx_table;

#line 358 
struct linux_binfmt;

#line 358 
struct mmu_notifier_mm;

#line 358  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct mm_struct {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   u32 vmacache_seqnum ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   unsigned long mmap_base ;
   unsigned long mmap_legacy_base ;
   unsigned long task_size ;
   unsigned long highest_vm_end ;
   pgd_t *pgd ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   atomic_long_t nr_ptes ;
   atomic_long_t nr_pmds ;
   int map_count ;
   spinlock_t page_table_lock ;
   struct rw_semaphore mmap_sem ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   unsigned long pinned_vm ;
   unsigned long shared_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long def_flags ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[46U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   cpumask_var_t cpu_vm_mask_var ;
   mm_context_t context ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct kioctx_table *ioctx_table ;
   struct task_struct *owner ;
   struct file *exe_file ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
   struct cpumask cpumask_allocation ;
   unsigned long numa_next_scan ;
   unsigned long numa_scan_offset ;
   int numa_scan_seq ;
   bool tlb_flush_pending ;
   struct uprobes_state uprobes_state ;
   void *bd_addr ;
};

#line 4  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/cputime_jiffies.h"
typedef unsigned long cputime_t;

#line 78  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/shm.h"
struct user_struct;

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/shm.h"
struct sysv_shm {
   struct list_head shm_clist ;
};

#line 24  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_203 {
   unsigned long sig[1U] ;
};

#line 24  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_203 sigset_t;

#line 25 
struct siginfo;

#line 17  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/signal-defs.h"
typedef void __signalfn_t(int );

#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;

#line 20  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/signal.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};

#line 10  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
typedef union sigval sigval_t;

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__kill_205 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__timer_206 {
   __kernel_timer_t _tid ;
   int _overrun ;
   char _pad[0U] ;
   sigval_t _sigval ;
   int _sys_private ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__rt_207 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigchld_208 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_bnd_210 {
   void *_lower ;
   void *_upper ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigfault_209 {
   void *_addr ;
   short _addr_lsb ;
   struct __anonstruct__addr_bnd_210 _addr_bnd ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_211 {
   long _band ;
   int _fd ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigsys_212 {
   void *_call_addr ;
   int _syscall ;
   unsigned int _arch ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
union __anonunion__sifields_204 {
   int _pad[28U] ;
   struct __anonstruct__kill_205 _kill ;
   struct __anonstruct__timer_206 _timer ;
   struct __anonstruct__rt_207 _rt ;
   struct __anonstruct__sigchld_208 _sigchld ;
   struct __anonstruct__sigfault_209 _sigfault ;
   struct __anonstruct__sigpoll_211 _sigpoll ;
   struct __anonstruct__sigsys_212 _sigsys ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct siginfo {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __anonunion__sifields_204 _sifields ;
};

#line 113  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
typedef struct siginfo siginfo_t;

#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/signal.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};

#line 243  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/signal.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};

#line 257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/signal.h"
struct k_sigaction {
   struct sigaction sa ;
};

#line 53  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/seccomp.h"
struct seccomp_filter;

#line 54  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/seccomp.h"
struct seccomp {
   int mode ;
   struct seccomp_filter *filter ;
};

#line 40  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rtmutex.h"
struct rt_mutex_waiter;

#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/resource.h"
struct rlimit {
   __kernel_ulong_t rlim_cur ;
   __kernel_ulong_t rlim_max ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/resource.h"
struct timerqueue_node {
   struct rb_node node ;
   ktime_t expires ;
};

#line 12  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timerqueue.h"
struct timerqueue_head {
   struct rb_root head ;
   struct timerqueue_node *next ;
};

#line 50 
struct hrtimer_clock_base;

#line 51 
struct hrtimer_cpu_base;

#line 60 
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
};

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timerqueue.h"
struct hrtimer {
   struct timerqueue_node node ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer *) ;
   struct hrtimer_clock_base *base ;
   unsigned long state ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   int index ;
   clockid_t clockid ;
   struct timerqueue_head active ;
   ktime_t (*get_time)(void) ;
   ktime_t offset ;
};

#line 156  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   seqcount_t seq ;
   struct hrtimer *running ;
   unsigned int cpu ;
   unsigned int active_bases ;
   unsigned int clock_was_set_seq ;
   bool migration_enabled ;
   bool nohz_active ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) in_hrtirq : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) hres_active : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) hang_detected : 1 ;
   ktime_t expires_next ;
   struct hrtimer *next_timer ;
   unsigned int nr_events ;
   unsigned int nr_retries ;
   unsigned int nr_hangs ;
   unsigned int max_hang_time ;
   struct hrtimer_clock_base clock_base[4U] ;
};

#line 466  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/hrtimer.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};

#line 45  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/task_io_accounting.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/latencytop.h"
struct assoc_array_ptr;

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/latencytop.h"
struct assoc_array {
   struct assoc_array_ptr *root ;
   unsigned long nr_leaves_on_tree ;
};

#line 31  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
typedef int32_t key_serial_t;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
typedef uint32_t key_perm_t;

#line 35 
struct key;

#line 36 
struct signal_struct;

#line 37 
struct key_type;

#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
struct keyring_index_key {
   struct key_type *type ;
   char const *description ;
   size_t desc_len ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
union __anonunion_215 {
   struct list_head graveyard_link ;
   struct rb_node serial_node ;
};

#line 123 
struct key_user;

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
union __anonunion_216 {
   time_t expiry ;
   time_t revoked_at ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
struct __anonstruct_218 {
   struct key_type *type ;
   char *description ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
union __anonunion_217 {
   struct keyring_index_key index_key ;
   struct __anonstruct_218 __anonCompField___anonunion_217_61 ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
union __anonunion_type_data_219 {
   struct list_head link ;
   unsigned long x[2U] ;
   void *p[2U] ;
   int reject_error ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
union __anonunion_payload_221 {
   unsigned long value ;
   void *rcudata ;
   void *data ;
   void *data2[2U] ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
union __anonunion_220 {
   union __anonunion_payload_221 payload ;
   struct assoc_array keys ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
struct key {
   atomic_t usage ;
   key_serial_t serial ;
   union __anonunion_215 __anonCompField_key_59 ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_216 __anonCompField_key_60 ;
   time_t last_used_at ;
   kuid_t uid ;
   kgid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   unsigned long flags ;
   union __anonunion_217 __anonCompField_key_62 ;
   union __anonunion_type_data_219 type_data ;
   union __anonunion_220 __anonCompField_key_63 ;
};

#line 358 
struct audit_context;

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/selinux.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   int nblocks ;
   kgid_t small_block[32U] ;
   kgid_t *blocks[0U] ;
};

#line 90  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   kuid_t uid ;
   kgid_t gid ;
   kuid_t suid ;
   kgid_t sgid ;
   kuid_t euid ;
   kgid_t egid ;
   kuid_t fsuid ;
   kgid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   unsigned char jit_keyring ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   void *security ;
   struct user_struct *user ;
   struct user_namespace *user_ns ;
   struct group_info *group_info ;
   struct callback_head rcu ;
};

#line 369  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cred.h"
union __anonunion_222 {
   unsigned long bitmap[4U] ;
   struct callback_head callback_head ;
};

#line 369  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cred.h"
struct idr_layer {
   int prefix ;
   int layer ;
   struct idr_layer *ary[256U] ;
   int count ;
   union __anonunion_222 __anonCompField_idr_layer_64 ;
};

#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/idr.h"
struct idr {
   struct idr_layer *hint ;
   struct idr_layer *top ;
   int layers ;
   int cur ;
   spinlock_t lock ;
   int id_free_cnt ;
   struct idr_layer *id_free ;
};

#line 124  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/idr.h"
struct ida_bitmap {
   long nr_busy ;
   unsigned long bitmap[15U] ;
};

#line 153  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/idr.h"
struct ida {
   struct idr idr ;
   struct ida_bitmap *free_bitmap ;
};

#line 185 
struct percpu_ref;

#line 55  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/percpu-refcount.h"
typedef void percpu_ref_func_t(struct percpu_ref *);

#line 68  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/percpu-refcount.h"
struct percpu_ref {
   atomic_long_t count ;
   unsigned long percpu_count_ptr ;
   percpu_ref_func_t *release ;
   percpu_ref_func_t *confirm_switch ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) force_atomic : 1 ;
   struct callback_head rcu ;
};

#line 327 
struct cgroup;

#line 328 
struct cgroup_root;

#line 329 
struct cgroup_subsys;

#line 330 
struct cgroup_taskset;

#line 331 
struct kernfs_node;

#line 332 
struct kernfs_ops;

#line 333 
struct kernfs_open_file;

#line 375  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/percpu-refcount.h"
struct cgroup_subsys_state {
   struct cgroup *cgroup ;
   struct cgroup_subsys *ss ;
   struct percpu_ref refcnt ;
   struct cgroup_subsys_state *parent ;
   struct list_head sibling ;
   struct list_head children ;
   int id ;
   unsigned int flags ;
   u64 serial_nr ;
   struct callback_head callback_head ;
   struct work_struct destroy_work ;
};

#line 124  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cgroup-defs.h"
struct css_set {
   atomic_t refcount ;
   struct hlist_node hlist ;
   struct list_head tasks ;
   struct list_head mg_tasks ;
   struct list_head cgrp_links ;
   struct cgroup *dfl_cgrp ;
   struct cgroup_subsys_state *subsys[12U] ;
   struct list_head mg_preload_node ;
   struct list_head mg_node ;
   struct cgroup *mg_src_cgrp ;
   struct css_set *mg_dst_cset ;
   struct list_head e_cset_node[12U] ;
   struct callback_head callback_head ;
};

#line 197  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cgroup-defs.h"
struct cgroup {
   struct cgroup_subsys_state self ;
   unsigned long flags ;
   int id ;
   int populated_cnt ;
   struct kernfs_node *kn ;
   struct kernfs_node *procs_kn ;
   struct kernfs_node *populated_kn ;
   unsigned int subtree_control ;
   unsigned int child_subsys_mask ;
   struct cgroup_subsys_state *subsys[12U] ;
   struct cgroup_root *root ;
   struct list_head cset_links ;
   struct list_head e_csets[12U] ;
   struct list_head pidlists ;
   struct mutex pidlist_mutex ;
   wait_queue_head_t offline_waitq ;
   struct work_struct release_agent_work ;
};

#line 270 
struct kernfs_root;

#line 270  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cgroup-defs.h"
struct cgroup_root {
   struct kernfs_root *kf_root ;
   unsigned int subsys_mask ;
   int hierarchy_id ;
   struct cgroup cgrp ;
   atomic_t nr_cgrps ;
   struct list_head root_list ;
   unsigned int flags ;
   struct idr cgroup_idr ;
   char release_agent_path[4096U] ;
   char name[64U] ;
};

#line 306  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cgroup-defs.h"
struct cftype {
   char name[64U] ;
   int private ;
   umode_t mode ;
   size_t max_write_len ;
   unsigned int flags ;
   struct cgroup_subsys *ss ;
   struct list_head node ;
   struct kernfs_ops *kf_ops ;
   u64 (*read_u64)(struct cgroup_subsys_state *, struct cftype *) ;
   s64 (*read_s64)(struct cgroup_subsys_state *, struct cftype *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   int (*write_u64)(struct cgroup_subsys_state *, struct cftype *, u64 ) ;
   int (*write_s64)(struct cgroup_subsys_state *, struct cftype *, s64 ) ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   struct lock_class_key lockdep_key ;
};

#line 388  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cgroup-defs.h"
struct cgroup_subsys {
   struct cgroup_subsys_state *(*css_alloc)(struct cgroup_subsys_state *) ;
   int (*css_online)(struct cgroup_subsys_state *) ;
   void (*css_offline)(struct cgroup_subsys_state *) ;
   void (*css_released)(struct cgroup_subsys_state *) ;
   void (*css_free)(struct cgroup_subsys_state *) ;
   void (*css_reset)(struct cgroup_subsys_state *) ;
   void (*css_e_css_changed)(struct cgroup_subsys_state *) ;
   int (*can_attach)(struct cgroup_subsys_state *, struct cgroup_taskset *) ;
   void (*cancel_attach)(struct cgroup_subsys_state *, struct cgroup_taskset *) ;
   void (*attach)(struct cgroup_subsys_state *, struct cgroup_taskset *) ;
   void (*fork)(struct task_struct *) ;
   void (*exit)(struct cgroup_subsys_state *, struct cgroup_subsys_state *, struct task_struct *) ;
   void (*bind)(struct cgroup_subsys_state *) ;
   int disabled ;
   int early_init ;
   bool broken_hierarchy ;
   bool warned_broken_hierarchy ;
   int id ;
   char const *name ;
   struct cgroup_root *root ;
   struct idr css_idr ;
   struct list_head cfts ;
   struct cftype *dfl_cftypes ;
   struct cftype *legacy_cftypes ;
   unsigned int depends_on ;
};

#line 128  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct futex_pi_state;

#line 129 
struct robust_list_head;

#line 130 
struct bio_list;

#line 131 
struct fs_struct;

#line 132 
struct perf_event_context;

#line 133 
struct blk_plug;

#line 134 
struct nameidata;

#line 188 
struct cfs_rq;

#line 189 
struct task_group;

#line 477  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct sighand_struct {
   atomic_t count ;
   struct k_sigaction action[64U] ;
   spinlock_t siglock ;
   wait_queue_head_t signalfd_wqh ;
};

#line 516  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   cputime_t ac_utime ;
   cputime_t ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};

#line 524  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct cpu_itimer {
   cputime_t expires ;
   cputime_t incr ;
   u32 error ;
   u32 incr_error ;
};

#line 531  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct cputime {
   cputime_t utime ;
   cputime_t stime ;
};

#line 543  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct task_cputime {
   cputime_t utime ;
   cputime_t stime ;
   unsigned long long sum_exec_runtime ;
};

#line 563  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct task_cputime_atomic {
   atomic64_t utime ;
   atomic64_t stime ;
   atomic64_t sum_exec_runtime ;
};

#line 584  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct thread_group_cputimer {
   struct task_cputime_atomic cputime_atomic ;
   int running ;
};

#line 620 
struct autogroup;

#line 621 
struct tty_struct;

#line 621 
struct taskstats;

#line 621 
struct tty_audit_buf;

#line 621  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct signal_struct {
   atomic_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   struct list_head thread_head ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_child_subreaper : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) has_child_subreaper : 1 ;
   int posix_timer_id ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   struct pid *leader_pid ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   struct autogroup *autogroup ;
   seqlock_t stats_lock ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t cutime ;
   cputime_t cstime ;
   cputime_t gtime ;
   cputime_t cgtime ;
   struct cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   unsigned int audit_tty_log_passwd ;
   struct tty_audit_buf *tty_audit_buf ;
   struct rw_semaphore group_rwsem ;
   oom_flags_t oom_flags ;
   short oom_score_adj ;
   short oom_score_adj_min ;
   struct mutex cred_guard_mutex ;
};

#line 802  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct user_struct {
   atomic_t __count ;
   atomic_t processes ;
   atomic_t sigpending ;
   atomic_t inotify_watches ;
   atomic_t inotify_devs ;
   atomic_t fanotify_listeners ;
   atomic_long_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   struct key *uid_keyring ;
   struct key *session_keyring ;
   struct hlist_node uidhash_node ;
   kuid_t uid ;
   atomic_long_t locked_vm ;
};

#line 845 
struct reclaim_state;

#line 846  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
};

#line 861  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct task_delay_info {
   spinlock_t lock ;
   unsigned int flags ;
   u64 blkio_start ;
   u64 blkio_delay ;
   u64 swapin_delay ;
   u32 blkio_count ;
   u32 swapin_count ;
   u64 freepages_start ;
   u64 freepages_delay ;
   u32 freepages_count ;
};

#line 909  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct wake_q_node {
   struct wake_q_node *next ;
};

#line 1172 
struct uts_namespace;

#line 1173  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   u32 inv_weight ;
};

#line 1181  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct sched_avg {
   u64 last_runnable_update ;
   s64 decay_count ;
   unsigned long load_avg_contrib ;
   unsigned long utilization_avg_contrib ;
   u32 runnable_avg_sum ;
   u32 avg_period ;
   u32 running_avg_sum ;
};

#line 1206  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};

#line 1241  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   int depth ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
   struct sched_avg avg ;
};

#line 1273 
struct rt_rq;

#line 1273  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned long watchdog_stamp ;
   unsigned int time_slice ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
};

#line 1289  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct sched_dl_entity {
   struct rb_node rb_node ;
   u64 dl_runtime ;
   u64 dl_deadline ;
   u64 dl_period ;
   u64 dl_bw ;
   s64 runtime ;
   u64 deadline ;
   unsigned int flags ;
   int dl_throttled ;
   int dl_new ;
   int dl_boosted ;
   int dl_yielded ;
   struct hrtimer dl_timer ;
};

#line 1355  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct memcg_oom_info {
   struct mem_cgroup *memcg ;
   gfp_t gfp_mask ;
   int order ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) may_oom : 1 ;
};

#line 1779 
struct sched_class;

#line 1779 
struct compat_robust_list_head;

#line 1779 
struct numa_group;

#line 1779 
struct ftrace_ret_stack;

#line 1779  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct task_struct {
   long volatile state ;
   void *stack ;
   atomic_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   struct llist_node wake_entry ;
   int on_cpu ;
   struct task_struct *last_wakee ;
   unsigned long wakee_flips ;
   unsigned long wakee_flip_decay_ts ;
   int wake_cpu ;
   int on_rq ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class const *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct task_group *sched_task_group ;
   struct sched_dl_entity dl ;
   struct hlist_head preempt_notifiers ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   int nr_cpus_allowed ;
   cpumask_t cpus_allowed ;
   unsigned long rcu_tasks_nvcsw ;
   bool rcu_tasks_holdout ;
   struct list_head rcu_tasks_holdout_list ;
   int rcu_tasks_idle_cpu ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct rb_node pushable_dl_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   u32 vmacache_seqnum ;
   struct vm_area_struct *vmacache[4U] ;
   struct task_rss_stat rss_stat ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned long jobctl ;
   unsigned int personality ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) in_execve : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) in_iowait : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) sched_reset_on_fork : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) sched_contributes_to_load : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) sched_migrated : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) memcg_kmem_skip_account : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) brk_randomized : 1 ;
   unsigned long atomic_flags ;
   struct restart_block restart_block ;
   pid_t pid ;
   pid_t tgid ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid_link pids[3U] ;
   struct list_head thread_group ;
   struct list_head thread_node ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t utimescaled ;
   cputime_t stimescaled ;
   cputime_t gtime ;
   struct cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   u64 start_time ;
   u64 real_start_time ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct cred const *real_cred ;
   struct cred const *cred ;
   char comm[16U] ;
   struct nameidata *nameidata ;
   struct sysv_sem sysvsem ;
   struct sysv_shm sysvshm ;
   unsigned long last_switch_count ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   int (*notifier)(void *) ;
   void *notifier_data ;
   sigset_t *notifier_mask ;
   struct callback_head *task_works ;
   struct audit_context *audit_context ;
   kuid_t loginuid ;
   unsigned int sessionid ;
   struct seccomp seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   raw_spinlock_t pi_lock ;
   struct wake_q_node wake_q ;
   struct rb_root pi_waiters ;
   struct rb_node *pi_waiters_leftmost ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   gfp_t lockdep_reclaim_gfp ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct blk_plug *plug ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   unsigned long ptrace_message ;
   siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   cputime_t acct_timexpd ;
   nodemask_t mems_allowed ;
   seqcount_t mems_allowed_seq ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct perf_event_context *perf_event_ctxp[2U] ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_next ;
   short pref_node_fork ;
   int numa_scan_seq ;
   unsigned int numa_scan_period ;
   unsigned int numa_scan_period_max ;
   int numa_preferred_nid ;
   unsigned long numa_migrate_retry ;
   u64 node_stamp ;
   u64 last_task_numa_placement ;
   u64 last_sum_exec_runtime ;
   struct callback_head numa_work ;
   struct list_head numa_entry ;
   struct numa_group *numa_group ;
   unsigned long *numa_faults ;
   unsigned long total_numa_faults ;
   unsigned long numa_faults_locality[3U] ;
   unsigned long numa_pages_migrated ;
   struct callback_head rcu ;
   struct pipe_inode_info *splice_pipe ;
   struct page_frag task_frag ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   int nr_dirtied ;
   int nr_dirtied_pause ;
   unsigned long dirty_paused_when ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   unsigned long timer_slack_ns ;
   unsigned long default_timer_slack_ns ;
   unsigned int kasan_depth ;
   int curr_ret_stack ;
   struct ftrace_ret_stack *ret_stack ;
   unsigned long long ftrace_timestamp ;
   atomic_t trace_overrun ;
   atomic_t tracing_graph_pause ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   struct memcg_oom_info memcg_oom ;
   struct uprobe_task *utask ;
   unsigned int sequential_io ;
   unsigned int sequential_io_avg ;
   unsigned long task_state_change ;
   int pagefault_disabled ;
   struct thread_struct thread ;
};

#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/compat.h"
typedef s32 compat_time_t;

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/compat.h"
typedef s32 compat_long_t;

#line 44  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/compat.h"
typedef u32 compat_uptr_t;

#line 45  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/compat.h"
struct compat_timespec {
   compat_time_t tv_sec ;
   s32 tv_nsec ;
};

#line 276  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/compat.h"
struct compat_robust_list {
   compat_uptr_t next ;
};

#line 280  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/compat.h"
struct compat_robust_list_head {
   struct compat_robust_list list ;
   compat_long_t futex_offset ;
   compat_uptr_t list_op_pending ;
};

#line 93  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/net.h"
struct sock;

#line 161  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/checksum_64.h"
struct in6_addr;

#line 140  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/checksum.h"
struct sk_buff;

#line 176 
struct kernfs_open_node;

#line 177 
struct kernfs_iattrs;

#line 200  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/checksum.h"
struct kernfs_elem_dir {
   unsigned long subdirs ;
   struct rb_root children ;
   struct kernfs_root *root ;
};

#line 85  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_elem_symlink {
   struct kernfs_node *target_kn ;
};

#line 89  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_elem_attr {
   struct kernfs_ops const *ops ;
   struct kernfs_open_node *open ;
   loff_t size ;
   struct kernfs_node *notify_next ;
};

#line 96  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
union __anonunion_255 {
   struct kernfs_elem_dir dir ;
   struct kernfs_elem_symlink symlink ;
   struct kernfs_elem_attr attr ;
};

#line 96  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_node {
   atomic_t count ;
   atomic_t active ;
   struct lockdep_map dep_map ;
   struct kernfs_node *parent ;
   char const *name ;
   struct rb_node rb ;
   void const *ns ;
   unsigned int hash ;
   union __anonunion_255 __anonCompField_kernfs_node_68 ;
   void *priv ;
   unsigned short flags ;
   umode_t mode ;
   unsigned int ino ;
   struct kernfs_iattrs *iattr ;
};

#line 138  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_syscall_ops {
   int (*remount_fs)(struct kernfs_root *, int *, char *) ;
   int (*show_options)(struct seq_file *, struct kernfs_root *) ;
   int (*mkdir)(struct kernfs_node *, char const *, umode_t ) ;
   int (*rmdir)(struct kernfs_node *) ;
   int (*rename)(struct kernfs_node *, struct kernfs_node *, char const *) ;
};

#line 155  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_root {
   struct kernfs_node *kn ;
   unsigned int flags ;
   struct ida ino_ida ;
   struct kernfs_syscall_ops *syscall_ops ;
   struct list_head supers ;
   wait_queue_head_t deactivate_waitq ;
};

#line 171  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_open_file {
   struct kernfs_node *kn ;
   struct file *file ;
   void *priv ;
   struct mutex mutex ;
   int event ;
   struct list_head list ;
   char *prealloc_buf ;
   size_t atomic_write_len ;
   bool mmapped ;
   struct vm_operations_struct const *vm_ops ;
};

#line 188  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_ops {
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   ssize_t (*read)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   size_t atomic_write_len ;
   bool prealloc ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   int (*mmap)(struct kernfs_open_file *, struct vm_area_struct *) ;
   struct lock_class_key lockdep_key ;
};

#line 477 
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
};

#line 483  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   bool (*current_may_mount)(void) ;
   void *(*grab_current_ns)(void) ;
   void const *(*netlink_ns)(struct sock *) ;
   void const *(*initial_ns)(void) ;
   void (*drop_ns)(void *) ;
};

#line 59  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject_ns.h"
struct bin_attribute;

#line 60  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject_ns.h"
struct attribute {
   char const *name ;
   umode_t mode ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ignore_lockdep : 1 ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};

#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysfs.h"
struct attribute_group {
   char const *name ;
   umode_t (*is_visible)(struct kobject *, struct attribute *, int ) ;
   struct attribute **attrs ;
   struct bin_attribute **bin_attrs ;
};

#line 82  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysfs.h"
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   ssize_t (*write)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   int (*mmap)(struct file *, struct kobject *, struct bin_attribute *, struct vm_area_struct *) ;
};

#line 155  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject *, struct attribute *, char *) ;
   ssize_t (*store)(struct kobject *, struct attribute *, char const *, size_t ) ;
};

#line 509  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysfs.h"
struct kref {
   atomic_t refcount ;
};

#line 52  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
struct kset;

#line 52 
struct kobj_type;

#line 52  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
struct kobject {
   char const *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct kernfs_node *sd ;
   struct kref kref ;
   struct delayed_work release ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) state_initialized : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) state_in_sysfs : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) state_add_uevent_sent : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) state_remove_uevent_sent : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) uevent_suppress : 1 ;
};

#line 115  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject *) ;
   struct sysfs_ops const *sysfs_ops ;
   struct attribute **default_attrs ;
   struct kobj_ns_type_operations const *(*child_ns_type)(struct kobject *) ;
   void const *(*namespace)(struct kobject *) ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
struct kobj_uevent_env {
   char *argv[3U] ;
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};

#line 131  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
struct kset_uevent_ops {
   int (* const filter)(struct kset *, struct kobject *) ;
   char const *(* const name)(struct kset *, struct kobject *) ;
   int (* const uevent)(struct kset *, struct kobject *, struct kobj_uevent_env *) ;
};

#line 148  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops const *uevent_ops ;
};

#line 223 
struct klist_node;

#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/klist.h"
struct klist_node {
   void *n_klist ;
   struct list_head n_node ;
   struct kref n_ref ;
};

#line 67  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/klist.h"
struct seq_file {
   char *buf ;
   size_t size ;
   size_t from ;
   size_t count ;
   size_t pad_until ;
   loff_t index ;
   loff_t read_pos ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations const *op ;
   int poll_event ;
   struct user_namespace *user_ns ;
   void *private ;
};

#line 35  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/seq_file.h"
struct seq_operations {
   void *(*start)(struct seq_file *, loff_t *) ;
   void (*stop)(struct seq_file *, void *) ;
   void *(*next)(struct seq_file *, void *, loff_t *) ;
   int (*show)(struct seq_file *, void *) ;
};

#line 222 
struct pinctrl;

#line 223 
struct pinctrl_state;

#line 194  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pinctrl/consumer.h"
struct dev_pin_info {
   struct pinctrl *p ;
   struct pinctrl_state *default_state ;
   struct pinctrl_state *sleep_state ;
   struct pinctrl_state *idle_state ;
};

#line 48  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ratelimit.h"
struct dma_map_ops;

#line 48  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ratelimit.h"
struct dev_archdata {
   struct dma_map_ops *dma_ops ;
   void *iommu ;
};

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/device.h"
struct device_driver;

#line 16 
struct driver_private;

#line 17 
struct class;

#line 18 
struct subsys_private;

#line 19 
struct bus_type;

#line 20 
struct device_node;

#line 21 
struct fwnode_handle;

#line 22 
struct iommu_ops;

#line 23 
struct iommu_group;

#line 61  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct device_attribute;

#line 61  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct bus_type {
   char const *name ;
   char const *dev_name ;
   struct device *dev_root ;
   struct device_attribute *dev_attrs ;
   struct attribute_group const **bus_groups ;
   struct attribute_group const **dev_groups ;
   struct attribute_group const **drv_groups ;
   int (*match)(struct device *, struct device_driver *) ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   int (*probe)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*online)(struct device *) ;
   int (*offline)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   struct dev_pm_ops const *pm ;
   struct iommu_ops const *iommu_ops ;
   struct subsys_private *p ;
   struct lock_class_key lock_key ;
};

#line 139 
struct device_type;

#line 197 
enum probe_type {
    PROBE_DEFAULT_STRATEGY = 0,
    PROBE_PREFER_ASYNCHRONOUS = 1,
    PROBE_FORCE_SYNCHRONOUS = 2
};

#line 203 
struct of_device_id;

#line 203 
struct acpi_device_id;

#line 203  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct device_driver {
   char const *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char const *mod_name ;
   bool suppress_bind_attrs ;
   enum probe_type probe_type ;
   struct of_device_id const *of_match_table ;
   struct acpi_device_id const *acpi_match_table ;
   int (*probe)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   struct attribute_group const **groups ;
   struct dev_pm_ops const *pm ;
   struct driver_private *p ;
};

#line 353 
struct class_attribute;

#line 353  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct class {
   char const *name ;
   struct module *owner ;
   struct class_attribute *class_attrs ;
   struct attribute_group const **dev_groups ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *) ;
   void (*class_release)(struct class *) ;
   void (*dev_release)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   struct kobj_ns_type_operations const *ns_type ;
   void const *(*namespace)(struct device *) ;
   struct dev_pm_ops const *pm ;
   struct subsys_private *p ;
};

#line 446  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct class_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct class *, struct class_attribute *, char *) ;
   ssize_t (*store)(struct class *, struct class_attribute *, char const *, size_t ) ;
};

#line 514  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct device_type {
   char const *name ;
   struct attribute_group const **groups ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *, kuid_t *, kgid_t *) ;
   void (*release)(struct device *) ;
   struct dev_pm_ops const *pm ;
};

#line 542  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device *, struct device_attribute *, char *) ;
   ssize_t (*store)(struct device *, struct device_attribute *, char const *, size_t ) ;
};

#line 675  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};

#line 684 
struct dma_coherent_mem;

#line 684 
struct cma;

#line 684  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct device {
   struct device *parent ;
   struct device_private *p ;
   struct kobject kobj ;
   char const *init_name ;
   struct device_type const *type ;
   struct mutex mutex ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   void *driver_data ;
   struct dev_pm_info power ;
   struct dev_pm_domain *pm_domain ;
   struct dev_pin_info *pins ;
   int numa_node ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   unsigned long dma_pfn_offset ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct cma *cma_area ;
   struct dev_archdata archdata ;
   struct device_node *of_node ;
   struct fwnode_handle *fwnode ;
   dev_t devt ;
   u32 id ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct klist_node knode_class ;
   struct class *class ;
   struct attribute_group const **groups ;
   void (*release)(struct device *) ;
   struct iommu_group *iommu_group ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) offline_disabled : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) offline : 1 ;
};

#line 830  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct wakeup_source {
   char const *name ;
   struct list_head entry ;
   spinlock_t lock ;
   struct wake_irq *wakeirq ;
   struct timer_list timer ;
   unsigned long timer_expires ;
   ktime_t total_time ;
   ktime_t max_time ;
   ktime_t last_time ;
   ktime_t start_prevent_time ;
   ktime_t prevent_sleep_time ;
   unsigned long event_count ;
   unsigned long active_count ;
   unsigned long relax_count ;
   unsigned long expire_count ;
   unsigned long wakeup_count ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) active : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) autosleep_enabled : 1 ;
};

#line 1283  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct dma_attrs {
   unsigned long flags[1U] ;
};

#line 70  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dma-attrs.h"
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
};

#line 207  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm.h"
struct vm_fault {
   unsigned int flags ;
   unsigned long pgoff ;
   void *virtual_address ;
   struct page *cow_page ;
   struct page *page ;
   unsigned long max_pgoff ;
   pte_t *pte ;
};

#line 239  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct *) ;
   void (*close)(struct vm_area_struct *) ;
   int (*fault)(struct vm_area_struct *, struct vm_fault *) ;
   void (*map_pages)(struct vm_area_struct *, struct vm_fault *) ;
   int (*page_mkwrite)(struct vm_area_struct *, struct vm_fault *) ;
   int (*pfn_mkwrite)(struct vm_area_struct *, struct vm_fault *) ;
   int (*access)(struct vm_area_struct *, unsigned long , void *, int , int ) ;
   char const *(*name)(struct vm_area_struct *) ;
   int (*set_policy)(struct vm_area_struct *, struct mempolicy *) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct *, unsigned long ) ;
   struct page *(*find_special_page)(struct vm_area_struct *, unsigned long ) ;
};

#line 2291  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm.h"
struct scatterlist {
   unsigned long sg_magic ;
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/scatterlist.h"
struct sg_table {
   struct scatterlist *sgl ;
   unsigned int nents ;
   unsigned int orig_nents ;
};

#line 380  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/scatterlist.h"
struct dma_map_ops {
   void *(*alloc)(struct device *, size_t , dma_addr_t *, gfp_t , struct dma_attrs *) ;
   void (*free)(struct device *, size_t , void *, dma_addr_t , struct dma_attrs *) ;
   int (*mmap)(struct device *, struct vm_area_struct *, void *, dma_addr_t , size_t , struct dma_attrs *) ;
   int (*get_sgtable)(struct device *, struct sg_table *, void *, dma_addr_t , size_t , struct dma_attrs *) ;
   dma_addr_t (*map_page)(struct device *, struct page *, unsigned long , size_t , enum dma_data_direction , struct dma_attrs *) ;
   void (*unmap_page)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *) ;
   int (*map_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , struct dma_attrs *) ;
   void (*unmap_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , struct dma_attrs *) ;
   void (*sync_single_for_cpu)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_single_for_device)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_sg_for_cpu)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*sync_sg_for_device)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   int (*mapping_error)(struct device *, dma_addr_t ) ;
   int (*dma_supported)(struct device *, u64 ) ;
   int (*set_dma_mask)(struct device *, u64 ) ;
   int is_phys ;
};

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdev_features.h"
typedef u64 netdev_features_t;

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdev_features.h"
union __anonunion_in6_u_256 {
   __u8 u6_addr8[16U] ;
   __be16 u6_addr16[8U] ;
   __be32 u6_addr32[4U] ;
};

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdev_features.h"
struct in6_addr {
   union __anonunion_in6_u_256 in6_u ;
};

#line 46  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/in6.h"
struct ethhdr {
   unsigned char h_dest[6U] ;
   unsigned char h_source[6U] ;
   __be16 h_proto ;
};

#line 218  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/flow_dissector.h"
struct pipe_buf_operations;

#line 218  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/flow_dissector.h"
struct pipe_buffer {
   struct page *page ;
   unsigned int offset ;
   unsigned int len ;
   struct pipe_buf_operations const *ops ;
   unsigned int flags ;
   unsigned long private ;
};

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pipe_fs_i.h"
struct pipe_inode_info {
   struct mutex mutex ;
   wait_queue_head_t wait ;
   unsigned int nrbufs ;
   unsigned int curbuf ;
   unsigned int buffers ;
   unsigned int readers ;
   unsigned int writers ;
   unsigned int files ;
   unsigned int waiting_writers ;
   unsigned int r_counter ;
   unsigned int w_counter ;
   struct page *tmp_page ;
   struct fasync_struct *fasync_readers ;
   struct fasync_struct *fasync_writers ;
   struct pipe_buffer *bufs ;
};

#line 61  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pipe_fs_i.h"
struct pipe_buf_operations {
   int can_merge ;
   int (*confirm)(struct pipe_inode_info *, struct pipe_buffer *) ;
   void (*release)(struct pipe_inode_info *, struct pipe_buffer *) ;
   int (*steal)(struct pipe_inode_info *, struct pipe_buffer *) ;
   void (*get)(struct pipe_inode_info *, struct pipe_buffer *) ;
};

#line 86  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/splice.h"
struct napi_struct;

#line 87  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/splice.h"
struct nf_conntrack {
   atomic_t use ;
};

#line 166  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
enum ldv_24741 {
    BRNF_PROTO_UNCHANGED = 0,
    BRNF_PROTO_8021Q = 1,
    BRNF_PROTO_PPPOE = 2
};

#line 172  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_261 {
   struct net_device *physoutdev ;
   char neigh_header[8U] ;
};

#line 172  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_262 {
   __be32 ipv4_daddr ;
   struct in6_addr ipv6_daddr ;
};

#line 172  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct nf_bridge_info {
   atomic_t use ;
   enum ldv_24741 __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))) orig_proto : 8 ;
   bool pkt_otherhost ;
   __u16 frag_max_size ;
   unsigned int mask ;
   struct net_device *physindev ;
   union __anonunion_261 __anonCompField_nf_bridge_info_72 ;
   union __anonunion_262 __anonCompField_nf_bridge_info_73 ;
};

#line 189  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct sk_buff_head {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   __u32 qlen ;
   spinlock_t lock ;
};

#line 403  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
typedef unsigned int sk_buff_data_t;

#line 404  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct __anonstruct_265 {
   u32 stamp_us ;
   u32 stamp_jiffies ;
};

#line 404  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_264 {
   u64 v64 ;
   struct __anonstruct_265 __anonCompField___anonunion_264_74 ;
};

#line 404  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct skb_mstamp {
   union __anonunion_264 __anonCompField_skb_mstamp_75 ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_268 {
   ktime_t tstamp ;
   struct skb_mstamp skb_mstamp ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct __anonstruct_267 {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   union __anonunion_268 __anonCompField___anonstruct_267_76 ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_266 {
   struct __anonstruct_267 __anonCompField___anonunion_266_77 ;
   struct rb_node rbnode ;
};

#line 457 
struct sec_path;

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct __anonstruct_270 {
   __u16 csum_start ;
   __u16 csum_offset ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_269 {
   __wsum csum ;
   struct __anonstruct_270 __anonCompField___anonunion_269_79 ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_271 {
   unsigned int napi_id ;
   unsigned int sender_cpu ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_272 {
   __u32 mark ;
   __u32 reserved_tailroom ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_273 {
   __be16 inner_protocol ;
   __u8 inner_ipproto ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct sk_buff {
   union __anonunion_266 __anonCompField_sk_buff_78 ;
   struct sock *sk ;
   struct net_device *dev ;
   char cb[48U] ;
   unsigned long _skb_refdst ;
   void (*destructor)(struct sk_buff *) ;
   struct sec_path *sp ;
   struct nf_conntrack *nfct ;
   struct nf_bridge_info *nf_bridge ;
   unsigned int len ;
   unsigned int data_len ;
   __u16 mac_len ;
   __u16 hdr_len ;
   __u16 queue_mapping ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) cloned : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) nohdr : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) fclone : 2 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) peeked : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) head_frag : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) xmit_more : 1 ;
   __u32 headers_start[0U] ;
   __u8 __pkt_type_offset[0U] ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))) pkt_type : 3 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) pfmemalloc : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ignore_df : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))) nfctinfo : 3 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) nf_trace : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) ip_summed : 2 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ooo_okay : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) l4_hash : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) sw_hash : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) wifi_acked_valid : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) wifi_acked : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) no_fcs : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) encapsulation : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) encap_hdr_csum : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) csum_valid : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) csum_complete_sw : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) csum_level : 2 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) csum_bad : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) ndisc_nodetype : 2 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ipvs_property : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) inner_protocol_type : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) remcsum_offload : 1 ;
   __u16 tc_index ;
   __u16 tc_verd ;
   union __anonunion_269 __anonCompField_sk_buff_80 ;
   __u32 priority ;
   int skb_iif ;
   __u32 hash ;
   __be16 vlan_proto ;
   __u16 vlan_tci ;
   union __anonunion_271 __anonCompField_sk_buff_81 ;
   __u32 secmark ;
   union __anonunion_272 __anonCompField_sk_buff_82 ;
   union __anonunion_273 __anonCompField_sk_buff_83 ;
   __u16 inner_transport_header ;
   __u16 inner_network_header ;
   __u16 inner_mac_header ;
   __be16 protocol ;
   __u16 transport_header ;
   __u16 network_header ;
   __u16 mac_header ;
   __u32 headers_end[0U] ;
   sk_buff_data_t tail ;
   sk_buff_data_t end ;
   unsigned char *head ;
   unsigned char *data ;
   unsigned int truesize ;
   atomic_t users ;
};

#line 718 
struct dst_entry;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/if_ether.h"
struct ethtool_cmd {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertising ;
   __u16 speed ;
   __u8 duplex ;
   __u8 port ;
   __u8 phy_address ;
   __u8 transceiver ;
   __u8 autoneg ;
   __u8 mdio_support ;
   __u32 maxtxpkt ;
   __u32 maxrxpkt ;
   __u16 speed_hi ;
   __u8 eth_tp_mdix ;
   __u8 eth_tp_mdix_ctrl ;
   __u32 lp_advertising ;
   __u32 reserved[2U] ;
};

#line 125  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_drvinfo {
   __u32 cmd ;
   char driver[32U] ;
   char version[32U] ;
   char fw_version[32U] ;
   char bus_info[32U] ;
   char erom_version[32U] ;
   char reserved2[12U] ;
   __u32 n_priv_flags ;
   __u32 n_stats ;
   __u32 testinfo_len ;
   __u32 eedump_len ;
   __u32 regdump_len ;
};

#line 189  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_wolinfo {
   __u32 cmd ;
   __u32 supported ;
   __u32 wolopts ;
   __u8 sopass[6U] ;
};

#line 233  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_tunable {
   __u32 cmd ;
   __u32 id ;
   __u32 type_id ;
   __u32 len ;
   void *data[0U] ;
};

#line 245  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_regs {
   __u32 cmd ;
   __u32 version ;
   __u32 len ;
   __u8 data[0U] ;
};

#line 267  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_eeprom {
   __u32 cmd ;
   __u32 magic ;
   __u32 offset ;
   __u32 len ;
   __u8 data[0U] ;
};

#line 293  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_eee {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertised ;
   __u32 lp_advertised ;
   __u32 eee_active ;
   __u32 eee_enabled ;
   __u32 tx_lpi_enabled ;
   __u32 tx_lpi_timer ;
   __u32 reserved[2U] ;
};

#line 322  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_modinfo {
   __u32 cmd ;
   __u32 type ;
   __u32 eeprom_len ;
   __u32 reserved[8U] ;
};

#line 339  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_coalesce {
   __u32 cmd ;
   __u32 rx_coalesce_usecs ;
   __u32 rx_max_coalesced_frames ;
   __u32 rx_coalesce_usecs_irq ;
   __u32 rx_max_coalesced_frames_irq ;
   __u32 tx_coalesce_usecs ;
   __u32 tx_max_coalesced_frames ;
   __u32 tx_coalesce_usecs_irq ;
   __u32 tx_max_coalesced_frames_irq ;
   __u32 stats_block_coalesce_usecs ;
   __u32 use_adaptive_rx_coalesce ;
   __u32 use_adaptive_tx_coalesce ;
   __u32 pkt_rate_low ;
   __u32 rx_coalesce_usecs_low ;
   __u32 rx_max_coalesced_frames_low ;
   __u32 tx_coalesce_usecs_low ;
   __u32 tx_max_coalesced_frames_low ;
   __u32 pkt_rate_high ;
   __u32 rx_coalesce_usecs_high ;
   __u32 rx_max_coalesced_frames_high ;
   __u32 tx_coalesce_usecs_high ;
   __u32 tx_max_coalesced_frames_high ;
   __u32 rate_sample_interval ;
};

#line 438  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_ringparam {
   __u32 cmd ;
   __u32 rx_max_pending ;
   __u32 rx_mini_max_pending ;
   __u32 rx_jumbo_max_pending ;
   __u32 tx_max_pending ;
   __u32 rx_pending ;
   __u32 rx_mini_pending ;
   __u32 rx_jumbo_pending ;
   __u32 tx_pending ;
};

#line 475  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_channels {
   __u32 cmd ;
   __u32 max_rx ;
   __u32 max_tx ;
   __u32 max_other ;
   __u32 max_combined ;
   __u32 rx_count ;
   __u32 tx_count ;
   __u32 other_count ;
   __u32 combined_count ;
};

#line 503  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_pauseparam {
   __u32 cmd ;
   __u32 autoneg ;
   __u32 rx_pause ;
   __u32 tx_pause ;
};

#line 605  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_test {
   __u32 cmd ;
   __u32 flags ;
   __u32 reserved ;
   __u32 len ;
   __u64 data[0U] ;
};

#line 637  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_stats {
   __u32 cmd ;
   __u32 n_stats ;
   __u64 data[0U] ;
};

#line 679  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_tcpip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tos ;
};

#line 712  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 spi ;
   __u8 tos ;
};

#line 728  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_usrip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 l4_4_bytes ;
   __u8 tos ;
   __u8 ip_ver ;
   __u8 proto ;
};

#line 748  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
union ethtool_flow_union {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   struct ethhdr ether_spec ;
   __u8 hdata[52U] ;
};

#line 759  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_flow_ext {
   __u8 padding[2U] ;
   unsigned char h_dest[6U] ;
   __be16 vlan_etype ;
   __be16 vlan_tci ;
   __be32 data[2U] ;
};

#line 778  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_rx_flow_spec {
   __u32 flow_type ;
   union ethtool_flow_union h_u ;
   struct ethtool_flow_ext h_ext ;
   union ethtool_flow_union m_u ;
   struct ethtool_flow_ext m_ext ;
   __u64 ring_cookie ;
   __u32 location ;
};

#line 828  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_rxnfc {
   __u32 cmd ;
   __u32 flow_type ;
   __u64 data ;
   struct ethtool_rx_flow_spec fs ;
   __u32 rule_cnt ;
   __u32 rule_locs[0U] ;
};

#line 999  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_flash {
   __u32 cmd ;
   __u32 region ;
   char data[128U] ;
};

#line 1007  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_dump {
   __u32 cmd ;
   __u32 version ;
   __u32 flag ;
   __u32 len ;
   __u8 data[0U] ;
};

#line 1083  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_ts_info {
   __u32 cmd ;
   __u32 so_timestamping ;
   __s32 phc_index ;
   __u32 tx_types ;
   __u32 tx_reserved[3U] ;
   __u32 rx_filters ;
   __u32 rx_reserved[3U] ;
};

#line 44  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ethtool.h"
enum ethtool_phys_id_state {
    ETHTOOL_ID_INACTIVE = 0,
    ETHTOOL_ID_ACTIVE = 1,
    ETHTOOL_ID_ON = 2,
    ETHTOOL_ID_OFF = 3
};

#line 99  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ethtool.h"
struct ethtool_ops {
   int (*get_settings)(struct net_device *, struct ethtool_cmd *) ;
   int (*set_settings)(struct net_device *, struct ethtool_cmd *) ;
   void (*get_drvinfo)(struct net_device *, struct ethtool_drvinfo *) ;
   int (*get_regs_len)(struct net_device *) ;
   void (*get_regs)(struct net_device *, struct ethtool_regs *, void *) ;
   void (*get_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   int (*set_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   u32 (*get_msglevel)(struct net_device *) ;
   void (*set_msglevel)(struct net_device *, u32 ) ;
   int (*nway_reset)(struct net_device *) ;
   u32 (*get_link)(struct net_device *) ;
   int (*get_eeprom_len)(struct net_device *) ;
   int (*get_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*set_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   int (*set_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   void (*get_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   int (*set_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   void (*get_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   int (*set_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   void (*self_test)(struct net_device *, struct ethtool_test *, u64 *) ;
   void (*get_strings)(struct net_device *, u32 , u8 *) ;
   int (*set_phys_id)(struct net_device *, enum ethtool_phys_id_state ) ;
   void (*get_ethtool_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
   int (*begin)(struct net_device *) ;
   void (*complete)(struct net_device *) ;
   u32 (*get_priv_flags)(struct net_device *) ;
   int (*set_priv_flags)(struct net_device *, u32 ) ;
   int (*get_sset_count)(struct net_device *, int ) ;
   int (*get_rxnfc)(struct net_device *, struct ethtool_rxnfc *, u32 *) ;
   int (*set_rxnfc)(struct net_device *, struct ethtool_rxnfc *) ;
   int (*flash_device)(struct net_device *, struct ethtool_flash *) ;
   int (*reset)(struct net_device *, u32 *) ;
   u32 (*get_rxfh_key_size)(struct net_device *) ;
   u32 (*get_rxfh_indir_size)(struct net_device *) ;
   int (*get_rxfh)(struct net_device *, u32 *, u8 *, u8 *) ;
   int (*set_rxfh)(struct net_device *, u32 const *, u8 const *, u8 const ) ;
   void (*get_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*set_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*get_dump_flag)(struct net_device *, struct ethtool_dump *) ;
   int (*get_dump_data)(struct net_device *, struct ethtool_dump *, void *) ;
   int (*set_dump)(struct net_device *, struct ethtool_dump *) ;
   int (*get_ts_info)(struct net_device *, struct ethtool_ts_info *) ;
   int (*get_module_info)(struct net_device *, struct ethtool_modinfo *) ;
   int (*get_module_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*set_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*get_tunable)(struct net_device *, struct ethtool_tunable const *, void *) ;
   int (*set_tunable)(struct net_device *, struct ethtool_tunable const *, void const *) ;
};

#line 13  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mod_devicetable.h"
typedef unsigned long kernel_ulong_t;

#line 14  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mod_devicetable.h"
struct pci_device_id {
   __u32 vendor ;
   __u32 device ;
   __u32 subvendor ;
   __u32 subdevice ;
   __u32 class ;
   __u32 class_mask ;
   kernel_ulong_t driver_data ;
};

#line 186  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mod_devicetable.h"
struct acpi_device_id {
   __u8 id[9U] ;
   kernel_ulong_t driver_data ;
   __u32 cls ;
   __u32 cls_msk ;
};

#line 221  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mod_devicetable.h"
struct of_device_id {
   char name[32U] ;
   char type[32U] ;
   char compatible[128U] ;
   void const *data ;
};

#line 70  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/resource_ext.h"
struct hotplug_slot;

#line 70  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/resource_ext.h"
struct pci_slot {
   struct pci_bus *bus ;
   struct list_head list ;
   struct hotplug_slot *hotplug ;
   unsigned char number ;
   struct kobject kobj ;
};

#line 110  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
typedef int pci_power_t;

#line 137  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
typedef unsigned int pci_channel_state_t;

#line 138 
enum pci_channel_state {
    pci_channel_io_normal = 1,
    pci_channel_io_frozen = 2,
    pci_channel_io_perm_failure = 3
};

#line 163  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
typedef unsigned short pci_dev_flags_t;

#line 192  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
typedef unsigned short pci_bus_flags_t;

#line 249 
struct pcie_link_state;

#line 250 
struct pci_vpd;

#line 251 
struct pci_sriov;

#line 252 
struct pci_ats;

#line 253 
struct proc_dir_entry;

#line 253 
struct pci_driver;

#line 253  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
union __anonunion_279 {
   struct pci_sriov *sriov ;
   struct pci_dev *physfn ;
};

#line 253  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
struct pci_dev {
   struct list_head bus_list ;
   struct pci_bus *bus ;
   struct pci_bus *subordinate ;
   void *sysdata ;
   struct proc_dir_entry *procent ;
   struct pci_slot *slot ;
   unsigned int devfn ;
   unsigned short vendor ;
   unsigned short device ;
   unsigned short subsystem_vendor ;
   unsigned short subsystem_device ;
   unsigned int class ;
   u8 revision ;
   u8 hdr_type ;
   u8 pcie_cap ;
   u8 msi_cap ;
   u8 msix_cap ;
   u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))) pcie_mpss : 3 ;
   u8 rom_base_reg ;
   u8 pin ;
   u16 pcie_flags_reg ;
   u8 dma_alias_devfn ;
   struct pci_driver *driver ;
   u64 dma_mask ;
   struct device_dma_parameters dma_parms ;
   pci_power_t current_state ;
   u8 pm_cap ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(5))) pme_support : 5 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) pme_interrupt : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) pme_poll : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) d1_support : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) d2_support : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) no_d1d2 : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) no_d3cold : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) d3cold_allowed : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) mmio_always_on : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) wakeup_prepared : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) runtime_d3cold : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ignore_hotplug : 1 ;
   unsigned int d3_delay ;
   unsigned int d3cold_delay ;
   struct pcie_link_state *link_state ;
   pci_channel_state_t error_state ;
   struct device dev ;
   int cfg_size ;
   unsigned int irq ;
   struct resource resource[17U] ;
   bool match_driver ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) transparent : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) multifunction : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_added : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_busmaster : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) no_msi : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) no_64bit_msi : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) block_cfg_access : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) broken_parity_status : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) irq_reroute_variant : 2 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) msi_enabled : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) msix_enabled : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ari_enabled : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_managed : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) needs_freset : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) state_saved : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_physfn : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_virtfn : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) reset_fn : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_hotplug_bridge : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) __aer_firmware_first_valid : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) __aer_firmware_first : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) broken_intx_masking : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) io_window_1k : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) irq_managed : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) has_secondary_link : 1 ;
   pci_dev_flags_t dev_flags ;
   atomic_t enable_cnt ;
   u32 saved_config_space[16U] ;
   struct hlist_head saved_cap_space ;
   struct bin_attribute *rom_attr ;
   int rom_attr_enabled ;
   struct bin_attribute *res_attr[17U] ;
   struct bin_attribute *res_attr_wc[17U] ;
   struct list_head msi_list ;
   struct attribute_group const **msi_irq_groups ;
   struct pci_vpd *vpd ;
   union __anonunion_279 __anonCompField_pci_dev_84 ;
   struct pci_ats *ats ;
   phys_addr_t rom ;
   size_t romlen ;
   char *driver_override ;
};

#line 442 
struct pci_ops;

#line 442 
struct msi_controller;

#line 442  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
struct pci_bus {
   struct list_head node ;
   struct pci_bus *parent ;
   struct list_head children ;
   struct list_head devices ;
   struct pci_dev *self ;
   struct list_head slots ;
   struct resource *resource[4U] ;
   struct list_head resources ;
   struct resource busn_res ;
   struct pci_ops *ops ;
   struct msi_controller *msi ;
   void *sysdata ;
   struct proc_dir_entry *procdir ;
   unsigned char number ;
   unsigned char primary ;
   unsigned char max_bus_speed ;
   unsigned char cur_bus_speed ;
   char name[48U] ;
   unsigned short bridge_ctl ;
   pci_bus_flags_t bus_flags ;
   struct device *bridge ;
   struct device dev ;
   struct bin_attribute *legacy_io ;
   struct bin_attribute *legacy_mem ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_added : 1 ;
};

#line 565  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
struct pci_ops {
   void *(*map_bus)(struct pci_bus *, unsigned int , int ) ;
   int (*read)(struct pci_bus *, unsigned int , int , int , u32 *) ;
   int (*write)(struct pci_bus *, unsigned int , int , int , u32 ) ;
};

#line 593  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
struct pci_dynids {
   spinlock_t lock ;
   struct list_head list ;
};

#line 607  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
typedef unsigned int pci_ers_result_t;

#line 617  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
struct pci_error_handlers {
   pci_ers_result_t (*error_detected)(struct pci_dev *, enum pci_channel_state ) ;
   pci_ers_result_t (*mmio_enabled)(struct pci_dev *) ;
   pci_ers_result_t (*link_reset)(struct pci_dev *) ;
   pci_ers_result_t (*slot_reset)(struct pci_dev *) ;
   void (*reset_notify)(struct pci_dev *, bool ) ;
   void (*resume)(struct pci_dev *) ;
};

#line 650  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
struct pci_driver {
   struct list_head node ;
   char const *name ;
   struct pci_device_id const *id_table ;
   int (*probe)(struct pci_dev *, struct pci_device_id const *) ;
   void (*remove)(struct pci_dev *) ;
   int (*suspend)(struct pci_dev *, pm_message_t ) ;
   int (*suspend_late)(struct pci_dev *, pm_message_t ) ;
   int (*resume_early)(struct pci_dev *) ;
   int (*resume)(struct pci_dev *) ;
   void (*shutdown)(struct pci_dev *) ;
   int (*sriov_configure)(struct pci_dev *, int ) ;
   struct pci_error_handlers const *err_handler ;
   struct device_driver driver ;
   struct pci_dynids dynids ;
};

#line 1182  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dmaengine.h"
struct dql {
   unsigned int num_queued ;
   unsigned int adj_limit ;
   unsigned int last_obj_cnt ;
   unsigned int limit ;
   unsigned int num_completed ;
   unsigned int prev_ovlimit ;
   unsigned int prev_num_queued ;
   unsigned int prev_last_obj_cnt ;
   unsigned int lowest_slack ;
   unsigned long slack_start_time ;
   unsigned int max_limit ;
   unsigned int min_limit ;
   unsigned int slack_hold_time ;
};

#line 235  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/flow.h"
struct prot_inuse;

#line 236  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/flow.h"
struct netns_core {
   struct ctl_table_header *sysctl_hdr ;
   int sysctl_somaxconn ;
   struct prot_inuse *inuse ;
};

#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct u64_stats_sync {
   
};

#line 146  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/u64_stats_sync.h"
struct ipstats_mib {
   u64 mibs[36U] ;
   struct u64_stats_sync syncp ;
};

#line 61  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct icmp_mib {
   unsigned long mibs[28U] ;
};

#line 67  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct icmpmsg_mib {
   atomic_long_t mibs[512U] ;
};

#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct icmpv6_mib {
   unsigned long mibs[6U] ;
};

#line 83  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct icmpv6msg_mib {
   atomic_long_t mibs[512U] ;
};

#line 93  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct tcp_mib {
   unsigned long mibs[16U] ;
};

#line 100  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct udp_mib {
   unsigned long mibs[9U] ;
};

#line 106  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct linux_mib {
   unsigned long mibs[115U] ;
};

#line 112  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct linux_xfrm_mib {
   unsigned long mibs[29U] ;
};

#line 118  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct netns_mib {
   struct tcp_mib *tcp_statistics ;
   struct ipstats_mib *ip_statistics ;
   struct linux_mib *net_statistics ;
   struct udp_mib *udp_statistics ;
   struct udp_mib *udplite_statistics ;
   struct icmp_mib *icmp_statistics ;
   struct icmpmsg_mib *icmpmsg_statistics ;
   struct proc_dir_entry *proc_net_devsnmp6 ;
   struct udp_mib *udp_stats_in6 ;
   struct udp_mib *udplite_stats_in6 ;
   struct ipstats_mib *ipv6_statistics ;
   struct icmpv6_mib *icmpv6_statistics ;
   struct icmpv6msg_mib *icmpv6msg_statistics ;
   struct linux_xfrm_mib *xfrm_statistics ;
};

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/mib.h"
struct netns_unix {
   int sysctl_max_dgram_qlen ;
   struct ctl_table_header *ctl ;
};

#line 12  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/unix.h"
struct netns_packet {
   struct mutex sklist_lock ;
   struct hlist_head sklist ;
};

#line 14  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/packet.h"
struct netns_frags {
   struct percpu_counter mem ;
   int timeout ;
   int high_thresh ;
   int low_thresh ;
};

#line 184  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/inet_frag.h"
struct ipv4_devconf;

#line 185 
struct fib_rules_ops;

#line 186 
struct fib_table;

#line 187  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/inet_frag.h"
struct local_ports {
   seqlock_t lock ;
   int range[2U] ;
   bool warned ;
};

#line 24  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ipv4.h"
struct ping_group_range {
   seqlock_t lock ;
   kgid_t range[2U] ;
};

#line 29 
struct inet_peer_base;

#line 29 
struct xt_table;

#line 29  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ipv4.h"
struct netns_ipv4 {
   struct ctl_table_header *forw_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *ipv4_hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *xfrm4_hdr ;
   struct ipv4_devconf *devconf_all ;
   struct ipv4_devconf *devconf_dflt ;
   struct fib_rules_ops *rules_ops ;
   bool fib_has_custom_rules ;
   struct fib_table *fib_local ;
   struct fib_table *fib_main ;
   struct fib_table *fib_default ;
   int fib_num_tclassid_users ;
   struct hlist_head *fib_table_hash ;
   bool fib_offload_disabled ;
   struct sock *fibnl ;
   struct sock **icmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct inet_peer_base *peers ;
   struct sock **tcp_sk ;
   struct netns_frags frags ;
   struct xt_table *iptable_filter ;
   struct xt_table *iptable_mangle ;
   struct xt_table *iptable_raw ;
   struct xt_table *arptable_filter ;
   struct xt_table *iptable_security ;
   struct xt_table *nat_table ;
   int sysctl_icmp_echo_ignore_all ;
   int sysctl_icmp_echo_ignore_broadcasts ;
   int sysctl_icmp_ignore_bogus_error_responses ;
   int sysctl_icmp_ratelimit ;
   int sysctl_icmp_ratemask ;
   int sysctl_icmp_errors_use_inbound_ifaddr ;
   struct local_ports ip_local_ports ;
   int sysctl_tcp_ecn ;
   int sysctl_tcp_ecn_fallback ;
   int sysctl_ip_no_pmtu_disc ;
   int sysctl_ip_fwd_use_pmtu ;
   int sysctl_ip_nonlocal_bind ;
   int sysctl_fwmark_reflect ;
   int sysctl_tcp_fwmark_accept ;
   int sysctl_tcp_mtu_probing ;
   int sysctl_tcp_base_mss ;
   int sysctl_tcp_probe_threshold ;
   u32 sysctl_tcp_probe_interval ;
   struct ping_group_range ping_group_range ;
   atomic_t dev_addr_genid ;
   unsigned long *sysctl_local_reserved_ports ;
   struct list_head mr_tables ;
   struct fib_rules_ops *mr_rules_ops ;
   atomic_t rt_genid ;
};

#line 113 
struct neighbour;

#line 113  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ipv4.h"
struct dst_ops {
   unsigned short family ;
   unsigned int gc_thresh ;
   int (*gc)(struct dst_ops *) ;
   struct dst_entry *(*check)(struct dst_entry *, __u32 ) ;
   unsigned int (*default_advmss)(struct dst_entry const *) ;
   unsigned int (*mtu)(struct dst_entry const *) ;
   u32 *(*cow_metrics)(struct dst_entry *, unsigned long ) ;
   void (*destroy)(struct dst_entry *) ;
   void (*ifdown)(struct dst_entry *, struct net_device *, int ) ;
   struct dst_entry *(*negative_advice)(struct dst_entry *) ;
   void (*link_failure)(struct sk_buff *) ;
   void (*update_pmtu)(struct dst_entry *, struct sock *, struct sk_buff *, u32 ) ;
   void (*redirect)(struct dst_entry *, struct sock *, struct sk_buff *) ;
   int (*local_out)(struct sk_buff *) ;
   struct neighbour *(*neigh_lookup)(struct dst_entry const *, struct sk_buff *, void const *) ;
   struct kmem_cache *kmem_cachep ;
   struct percpu_counter pcpuc_entries ;
};

#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dst_ops.h"
struct netns_sysctl_ipv6 {
   struct ctl_table_header *hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *icmp_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *xfrm6_hdr ;
   int bindv6only ;
   int flush_delay ;
   int ip6_rt_max_size ;
   int ip6_rt_gc_min_interval ;
   int ip6_rt_gc_timeout ;
   int ip6_rt_gc_interval ;
   int ip6_rt_gc_elasticity ;
   int ip6_rt_mtu_expires ;
   int ip6_rt_min_advmss ;
   int flowlabel_consistency ;
   int auto_flowlabels ;
   int icmpv6_time ;
   int anycast_src_echo_reply ;
   int fwmark_reflect ;
   int idgen_retries ;
   int idgen_delay ;
   int flowlabel_state_ranges ;
};

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ipv6.h"
struct ipv6_devconf;

#line 39 
struct rt6_info;

#line 39 
struct rt6_statistics;

#line 39 
struct fib6_table;

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ipv6.h"
struct netns_ipv6 {
   struct netns_sysctl_ipv6 sysctl ;
   struct ipv6_devconf *devconf_all ;
   struct ipv6_devconf *devconf_dflt ;
   struct inet_peer_base *peers ;
   struct netns_frags frags ;
   struct xt_table *ip6table_filter ;
   struct xt_table *ip6table_mangle ;
   struct xt_table *ip6table_raw ;
   struct xt_table *ip6table_security ;
   struct xt_table *ip6table_nat ;
   struct rt6_info *ip6_null_entry ;
   struct rt6_statistics *rt6_stats ;
   struct timer_list ip6_fib_timer ;
   struct hlist_head *fib_table_hash ;
   struct fib6_table *fib6_main_tbl ;
   struct dst_ops ip6_dst_ops ;
   unsigned int ip6_rt_gc_expire ;
   unsigned long ip6_rt_last_gc ;
   struct rt6_info *ip6_prohibit_entry ;
   struct rt6_info *ip6_blk_hole_entry ;
   struct fib6_table *fib6_local_tbl ;
   struct fib_rules_ops *fib6_rules_ops ;
   struct sock **icmp_sk ;
   struct sock *ndisc_sk ;
   struct sock *tcp_sk ;
   struct sock *igmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct list_head mr6_tables ;
   struct fib_rules_ops *mr6_rules_ops ;
   atomic_t dev_addr_genid ;
   atomic_t fib6_sernum ;
};

#line 85  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ipv6.h"
struct netns_nf_frag {
   struct netns_sysctl_ipv6 sysctl ;
   struct netns_frags frags ;
};

#line 91  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ipv6.h"
struct netns_sysctl_lowpan {
   struct ctl_table_header *frags_hdr ;
};

#line 14  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ieee802154_6lowpan.h"
struct netns_ieee802154_lowpan {
   struct netns_sysctl_lowpan sysctl ;
   struct netns_frags frags ;
};

#line 20 
struct sctp_mib;

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ieee802154_6lowpan.h"
struct netns_sctp {
   struct sctp_mib *sctp_statistics ;
   struct proc_dir_entry *proc_net_sctp ;
   struct ctl_table_header *sysctl_header ;
   struct sock *ctl_sock ;
   struct list_head local_addr_list ;
   struct list_head addr_waitq ;
   struct timer_list addr_wq_timer ;
   struct list_head auto_asconf_splist ;
   spinlock_t addr_wq_lock ;
   spinlock_t local_addr_lock ;
   unsigned int rto_initial ;
   unsigned int rto_min ;
   unsigned int rto_max ;
   int rto_alpha ;
   int rto_beta ;
   int max_burst ;
   int cookie_preserve_enable ;
   char *sctp_hmac_alg ;
   unsigned int valid_cookie_life ;
   unsigned int sack_timeout ;
   unsigned int hb_interval ;
   int max_retrans_association ;
   int max_retrans_path ;
   int max_retrans_init ;
   int pf_retrans ;
   int sndbuf_policy ;
   int rcvbuf_policy ;
   int default_auto_asconf ;
   int addip_enable ;
   int addip_noauth ;
   int prsctp_enable ;
   int auth_enable ;
   int scope_policy ;
   int rwnd_upd_shift ;
   unsigned long max_autoclose ;
};

#line 134  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/sctp.h"
struct netns_dccp {
   struct sock *v4_ctl_sk ;
   struct sock *v6_ctl_sk ;
};

#line 79  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/netfilter.h"
struct nf_logger;

#line 80  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/netfilter.h"
struct netns_nf {
   struct proc_dir_entry *proc_netfilter ;
   struct nf_logger const *nf_loggers[13U] ;
   struct ctl_table_header *nf_log_dir_header ;
};

#line 17  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/netfilter.h"
struct ebt_table;

#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/netfilter.h"
struct netns_xt {
   struct list_head tables[13U] ;
   bool notrack_deprecated_warning ;
   bool clusterip_deprecated_warning ;
   struct ebt_table *broute_table ;
   struct ebt_table *frame_filter ;
   struct ebt_table *frame_nat ;
};

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/x_tables.h"
struct hlist_nulls_node;

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/x_tables.h"
struct hlist_nulls_head {
   struct hlist_nulls_node *first ;
};

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/x_tables.h"
struct hlist_nulls_node {
   struct hlist_nulls_node *next ;
   struct hlist_nulls_node **pprev ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netfilter/nf_conntrack_tcp.h"
struct nf_proto_net {
   struct ctl_table_header *ctl_table_header ;
   struct ctl_table *ctl_table ;
   struct ctl_table_header *ctl_compat_header ;
   struct ctl_table *ctl_compat_table ;
   unsigned int users ;
};

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct nf_generic_net {
   struct nf_proto_net pn ;
   unsigned int timeout ;
};

#line 30  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct nf_tcp_net {
   struct nf_proto_net pn ;
   unsigned int timeouts[14U] ;
   unsigned int tcp_loose ;
   unsigned int tcp_be_liberal ;
   unsigned int tcp_max_retrans ;
};

#line 44  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct nf_udp_net {
   struct nf_proto_net pn ;
   unsigned int timeouts[2U] ;
};

#line 49  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct nf_icmp_net {
   struct nf_proto_net pn ;
   unsigned int timeout ;
};

#line 54  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct nf_ip_net {
   struct nf_generic_net generic ;
   struct nf_tcp_net tcp ;
   struct nf_udp_net udp ;
   struct nf_icmp_net icmp ;
   struct nf_icmp_net icmpv6 ;
   struct ctl_table_header *ctl_table_header ;
   struct ctl_table *ctl_table ;
};

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct ct_pcpu {
   spinlock_t lock ;
   struct hlist_nulls_head unconfirmed ;
   struct hlist_nulls_head dying ;
};

#line 72 
struct ip_conntrack_stat;

#line 72 
struct nf_ct_event_notifier;

#line 72 
struct nf_exp_event_notifier;

#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct netns_ct {
   atomic_t count ;
   unsigned int expect_count ;
   struct delayed_work ecache_dwork ;
   bool ecache_dwork_pending ;
   struct ctl_table_header *sysctl_header ;
   struct ctl_table_header *acct_sysctl_header ;
   struct ctl_table_header *tstamp_sysctl_header ;
   struct ctl_table_header *event_sysctl_header ;
   struct ctl_table_header *helper_sysctl_header ;
   char *slabname ;
   unsigned int sysctl_log_invalid ;
   int sysctl_events ;
   int sysctl_acct ;
   int sysctl_auto_assign_helper ;
   bool auto_assign_helper_warned ;
   int sysctl_tstamp ;
   int sysctl_checksum ;
   unsigned int htable_size ;
   seqcount_t generation ;
   struct kmem_cache *nf_conntrack_cachep ;
   struct hlist_nulls_head *hash ;
   struct hlist_head *expect_hash ;
   struct ct_pcpu *pcpu_lists ;
   struct ip_conntrack_stat *stat ;
   struct nf_ct_event_notifier *nf_conntrack_event_cb ;
   struct nf_exp_event_notifier *nf_expect_event_cb ;
   struct nf_ip_net nf_ct_proto ;
   unsigned int labels_used ;
   u8 label_words ;
   struct hlist_head *nat_bysource ;
   unsigned int nat_htable_size ;
};

#line 114 
struct nft_af_info;

#line 115  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct netns_nftables {
   struct list_head af_info ;
   struct list_head commit_list ;
   struct nft_af_info *ipv4 ;
   struct nft_af_info *ipv6 ;
   struct nft_af_info *inet ;
   struct nft_af_info *arp ;
   struct nft_af_info *bridge ;
   struct nft_af_info *netdev ;
   unsigned int base_seq ;
   u8 gencursor ;
};

#line 465  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/interrupt.h"
struct tasklet_struct {
   struct tasklet_struct *next ;
   unsigned long state ;
   atomic_t count ;
   void (*func)(unsigned long ) ;
   unsigned long data ;
};

#line 672  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/interrupt.h"
struct flow_cache_percpu {
   struct hlist_head *hash_table ;
   int hash_count ;
   u32 hash_rnd ;
   int hash_rnd_recalc ;
   struct tasklet_struct flush_tasklet ;
};

#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/flowcache.h"
struct flow_cache {
   u32 hash_shift ;
   struct flow_cache_percpu *percpu ;
   struct notifier_block hotcpu_notifier ;
   int low_watermark ;
   int high_watermark ;
   struct timer_list rnd_timer ;
};

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/flowcache.h"
struct xfrm_policy_hash {
   struct hlist_head *table ;
   unsigned int hmask ;
   u8 dbits4 ;
   u8 sbits4 ;
   u8 dbits6 ;
   u8 sbits6 ;
};

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/xfrm.h"
struct xfrm_policy_hthresh {
   struct work_struct work ;
   seqlock_t lock ;
   u8 lbits4 ;
   u8 rbits4 ;
   u8 lbits6 ;
   u8 rbits6 ;
};

#line 30  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/xfrm.h"
struct netns_xfrm {
   struct list_head state_all ;
   struct hlist_head *state_bydst ;
   struct hlist_head *state_bysrc ;
   struct hlist_head *state_byspi ;
   unsigned int state_hmask ;
   unsigned int state_num ;
   struct work_struct state_hash_work ;
   struct hlist_head state_gc_list ;
   struct work_struct state_gc_work ;
   struct list_head policy_all ;
   struct hlist_head *policy_byidx ;
   unsigned int policy_idx_hmask ;
   struct hlist_head policy_inexact[3U] ;
   struct xfrm_policy_hash policy_bydst[3U] ;
   unsigned int policy_count[6U] ;
   struct work_struct policy_hash_work ;
   struct xfrm_policy_hthresh policy_hthresh ;
   struct sock *nlsk ;
   struct sock *nlsk_stash ;
   u32 sysctl_aevent_etime ;
   u32 sysctl_aevent_rseqth ;
   int sysctl_larval_drop ;
   u32 sysctl_acq_expires ;
   struct ctl_table_header *sysctl_hdr ;
   struct dst_ops xfrm4_dst_ops ;
   struct dst_ops xfrm6_dst_ops ;
   spinlock_t xfrm_state_lock ;
   rwlock_t xfrm_policy_lock ;
   struct mutex xfrm_cfg_mutex ;
   struct flow_cache flow_cache_global ;
   atomic_t flow_cache_genid ;
   struct list_head flow_cache_gc_list ;
   spinlock_t flow_cache_gc_lock ;
   struct work_struct flow_cache_gc_work ;
   struct work_struct flow_cache_flush_work ;
   struct mutex flow_flush_sem ;
};

#line 88 
struct mpls_route;

#line 89  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/xfrm.h"
struct netns_mpls {
   size_t platform_labels ;
   struct mpls_route **platform_label ;
   struct ctl_table_header *ctl ;
};

#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/mpls.h"
struct proc_ns_operations;

#line 17  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/mpls.h"
struct ns_common {
   atomic_long_t stashed ;
   struct proc_ns_operations const *ops ;
   unsigned int inum ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ns_common.h"
struct net_generic;

#line 12 
struct netns_ipvs;

#line 13  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ns_common.h"
struct net {
   atomic_t passive ;
   atomic_t count ;
   spinlock_t rules_mod_lock ;
   atomic64_t cookie_gen ;
   struct list_head list ;
   struct list_head cleanup_list ;
   struct list_head exit_list ;
   struct user_namespace *user_ns ;
   spinlock_t nsid_lock ;
   struct idr netns_ids ;
   struct ns_common ns ;
   struct proc_dir_entry *proc_net ;
   struct proc_dir_entry *proc_net_stat ;
   struct ctl_table_set sysctls ;
   struct sock *rtnl ;
   struct sock *genl_sock ;
   struct list_head dev_base_head ;
   struct hlist_head *dev_name_head ;
   struct hlist_head *dev_index_head ;
   unsigned int dev_base_seq ;
   int ifindex ;
   unsigned int dev_unreg_count ;
   struct list_head rules_ops ;
   struct net_device *loopback_dev ;
   struct netns_core core ;
   struct netns_mib mib ;
   struct netns_packet packet ;
   struct netns_unix unx ;
   struct netns_ipv4 ipv4 ;
   struct netns_ipv6 ipv6 ;
   struct netns_ieee802154_lowpan ieee802154_lowpan ;
   struct netns_sctp sctp ;
   struct netns_dccp dccp ;
   struct netns_nf nf ;
   struct netns_xt xt ;
   struct netns_ct ct ;
   struct netns_nftables nft ;
   struct netns_nf_frag nf_frag ;
   struct sock *nfnl ;
   struct sock *nfnl_stash ;
   struct sk_buff_head wext_nlevents ;
   struct net_generic *gen ;
   struct netns_xfrm xfrm ;
   struct netns_ipvs *ipvs ;
   struct netns_mpls mpls ;
   struct sock *diag_nlsk ;
   atomic_t fnhe_genid ;
};

#line 241  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/net_namespace.h"
struct __anonstruct_possible_net_t_295 {
   struct net *net ;
};

#line 241  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/net_namespace.h"
typedef struct __anonstruct_possible_net_t_295 possible_net_t;

#line 376 
enum fwnode_type {
    FWNODE_INVALID = 0,
    FWNODE_OF = 1,
    FWNODE_ACPI = 2,
    FWNODE_PDATA = 3
};

#line 383  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/net_namespace.h"
struct fwnode_handle {
   enum fwnode_type type ;
   struct fwnode_handle *secondary ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/of.h"
typedef u32 phandle;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/of.h"
struct property {
   char *name ;
   int length ;
   void *value ;
   struct property *next ;
   unsigned long _flags ;
   unsigned int unique_id ;
   struct bin_attribute attr ;
};

#line 44  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/of.h"
struct device_node {
   char const *name ;
   char const *type ;
   phandle phandle ;
   char const *full_name ;
   struct fwnode_handle fwnode ;
   struct property *properties ;
   struct property *deadprops ;
   struct device_node *parent ;
   struct device_node *child ;
   struct device_node *sibling ;
   struct kobject kobj ;
   unsigned long _flags ;
   void *data ;
};

#line 1084 
enum ldv_28692 {
    PHY_INTERFACE_MODE_NA = 0,
    PHY_INTERFACE_MODE_MII = 1,
    PHY_INTERFACE_MODE_GMII = 2,
    PHY_INTERFACE_MODE_SGMII = 3,
    PHY_INTERFACE_MODE_TBI = 4,
    PHY_INTERFACE_MODE_REVMII = 5,
    PHY_INTERFACE_MODE_RMII = 6,
    PHY_INTERFACE_MODE_RGMII = 7,
    PHY_INTERFACE_MODE_RGMII_ID = 8,
    PHY_INTERFACE_MODE_RGMII_RXID = 9,
    PHY_INTERFACE_MODE_RGMII_TXID = 10,
    PHY_INTERFACE_MODE_RTBI = 11,
    PHY_INTERFACE_MODE_SMII = 12,
    PHY_INTERFACE_MODE_XGMII = 13,
    PHY_INTERFACE_MODE_MOCA = 14,
    PHY_INTERFACE_MODE_QSGMII = 15,
    PHY_INTERFACE_MODE_MAX = 16
};

#line 80  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy.h"
typedef enum ldv_28692 phy_interface_t;

#line 126 
enum ldv_28745 {
    MDIOBUS_ALLOCATED = 1,
    MDIOBUS_REGISTERED = 2,
    MDIOBUS_UNREGISTERED = 3,
    MDIOBUS_RELEASED = 4
};

#line 133 
struct phy_device;

#line 133  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy.h"
struct mii_bus {
   char const *name ;
   char id[17U] ;
   void *priv ;
   int (*read)(struct mii_bus *, int , int ) ;
   int (*write)(struct mii_bus *, int , int , u16 ) ;
   int (*reset)(struct mii_bus *) ;
   struct mutex mdio_lock ;
   struct device *parent ;
   enum ldv_28745 state ;
   struct device dev ;
   struct phy_device *phy_map[32U] ;
   u32 phy_mask ;
   u32 phy_ignore_ta_mask ;
   int *irq ;
};

#line 214 
enum phy_state {
    PHY_DOWN = 0,
    PHY_STARTING = 1,
    PHY_READY = 2,
    PHY_PENDING = 3,
    PHY_UP = 4,
    PHY_AN = 5,
    PHY_RUNNING = 6,
    PHY_NOLINK = 7,
    PHY_FORCING = 8,
    PHY_CHANGELINK = 9,
    PHY_HALTED = 10,
    PHY_RESUMING = 11
};

#line 229  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy.h"
struct phy_c45_device_ids {
   u32 devices_in_package ;
   u32 device_ids[8U] ;
};

#line 323 
struct phy_driver;

#line 323  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy.h"
struct phy_device {
   struct phy_driver *drv ;
   struct mii_bus *bus ;
   struct device dev ;
   u32 phy_id ;
   struct phy_c45_device_ids c45_ids ;
   bool is_c45 ;
   bool is_internal ;
   bool has_fixups ;
   bool suspended ;
   enum phy_state state ;
   u32 dev_flags ;
   phy_interface_t interface ;
   int addr ;
   int speed ;
   int duplex ;
   int pause ;
   int asym_pause ;
   int link ;
   u32 interrupts ;
   u32 supported ;
   u32 advertising ;
   u32 lp_advertising ;
   int autoneg ;
   int link_timeout ;
   int irq ;
   void *priv ;
   struct work_struct phy_queue ;
   struct delayed_work state_queue ;
   atomic_t irq_disable ;
   struct mutex lock ;
   struct net_device *attached_dev ;
   void (*adjust_link)(struct net_device *) ;
};

#line 429  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy.h"
struct phy_driver {
   u32 phy_id ;
   char *name ;
   unsigned int phy_id_mask ;
   u32 features ;
   u32 flags ;
   void const *driver_data ;
   int (*soft_reset)(struct phy_device *) ;
   int (*config_init)(struct phy_device *) ;
   int (*probe)(struct phy_device *) ;
   int (*suspend)(struct phy_device *) ;
   int (*resume)(struct phy_device *) ;
   int (*config_aneg)(struct phy_device *) ;
   int (*aneg_done)(struct phy_device *) ;
   int (*read_status)(struct phy_device *) ;
   int (*ack_interrupt)(struct phy_device *) ;
   int (*config_intr)(struct phy_device *) ;
   int (*did_interrupt)(struct phy_device *) ;
   void (*remove)(struct phy_device *) ;
   int (*match_phy_device)(struct phy_device *) ;
   int (*ts_info)(struct phy_device *, struct ethtool_ts_info *) ;
   int (*hwtstamp)(struct phy_device *, struct ifreq *) ;
   bool (*rxtstamp)(struct phy_device *, struct sk_buff *, int ) ;
   void (*txtstamp)(struct phy_device *, struct sk_buff *, int ) ;
   int (*set_wol)(struct phy_device *, struct ethtool_wolinfo *) ;
   void (*get_wol)(struct phy_device *, struct ethtool_wolinfo *) ;
   void (*link_change_notify)(struct phy_device *) ;
   int (*read_mmd_indirect)(struct phy_device *, int , int , int ) ;
   void (*write_mmd_indirect)(struct phy_device *, int , int , int , u32 ) ;
   int (*module_info)(struct phy_device *, struct ethtool_modinfo *) ;
   int (*module_eeprom)(struct phy_device *, struct ethtool_eeprom *, u8 *) ;
   struct device_driver driver ;
};

#line 803  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy.h"
struct fixed_phy_status {
   int link ;
   int speed ;
   int duplex ;
   int pause ;
   int asym_pause ;
};

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy_fixed.h"
enum dsa_tag_protocol {
    DSA_TAG_PROTO_NONE = 0,
    DSA_TAG_PROTO_DSA = 1,
    DSA_TAG_PROTO_TRAILER = 2,
    DSA_TAG_PROTO_EDSA = 3,
    DSA_TAG_PROTO_BRCM = 4
};

#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy_fixed.h"
struct dsa_chip_data {
   struct device *host_dev ;
   int sw_addr ;
   int eeprom_len ;
   struct device_node *of_node ;
   char *port_names[12U] ;
   struct device_node *port_dn[12U] ;
   s8 *rtable ;
};

#line 68  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dsa.h"
struct dsa_platform_data {
   struct device *netdev ;
   struct net_device *of_netdev ;
   int nr_chips ;
   struct dsa_chip_data *chip ;
};

#line 84 
struct packet_type;

#line 85 
struct dsa_switch;

#line 85  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dsa.h"
struct dsa_switch_tree {
   struct dsa_platform_data *pd ;
   struct net_device *master_netdev ;
   int (*rcv)(struct sk_buff *, struct net_device *, struct packet_type *, struct net_device *) ;
   enum dsa_tag_protocol tag_protocol ;
   s8 cpu_switch ;
   s8 cpu_port ;
   int link_poll_needed ;
   struct work_struct link_poll_work ;
   struct timer_list link_poll_timer ;
   struct dsa_switch *ds[4U] ;
};

#line 123 
struct dsa_switch_driver;

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dsa.h"
struct dsa_switch {
   struct dsa_switch_tree *dst ;
   int index ;
   enum dsa_tag_protocol tag_protocol ;
   struct dsa_chip_data *pd ;
   struct dsa_switch_driver *drv ;
   struct device *master_dev ;
   char hwmon_name[24U] ;
   struct device *hwmon_dev ;
   u32 dsa_port_mask ;
   u32 phys_port_mask ;
   u32 phys_mii_mask ;
   struct mii_bus *slave_mii_bus ;
   struct net_device *ports[12U] ;
};

#line 194  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dsa.h"
struct dsa_switch_driver {
   struct list_head list ;
   enum dsa_tag_protocol tag_protocol ;
   int priv_size ;
   char *(*probe)(struct device *, int ) ;
   int (*setup)(struct dsa_switch *) ;
   int (*set_addr)(struct dsa_switch *, u8 *) ;
   u32 (*get_phy_flags)(struct dsa_switch *, int ) ;
   int (*phy_read)(struct dsa_switch *, int , int ) ;
   int (*phy_write)(struct dsa_switch *, int , int , u16 ) ;
   void (*poll_link)(struct dsa_switch *) ;
   void (*adjust_link)(struct dsa_switch *, int , struct phy_device *) ;
   void (*fixed_link_update)(struct dsa_switch *, int , struct fixed_phy_status *) ;
   void (*get_strings)(struct dsa_switch *, int , uint8_t *) ;
   void (*get_ethtool_stats)(struct dsa_switch *, int , uint64_t *) ;
   int (*get_sset_count)(struct dsa_switch *) ;
   void (*get_wol)(struct dsa_switch *, int , struct ethtool_wolinfo *) ;
   int (*set_wol)(struct dsa_switch *, int , struct ethtool_wolinfo *) ;
   int (*suspend)(struct dsa_switch *) ;
   int (*resume)(struct dsa_switch *) ;
   int (*port_enable)(struct dsa_switch *, int , struct phy_device *) ;
   void (*port_disable)(struct dsa_switch *, int , struct phy_device *) ;
   int (*set_eee)(struct dsa_switch *, int , struct phy_device *, struct ethtool_eee *) ;
   int (*get_eee)(struct dsa_switch *, int , struct ethtool_eee *) ;
   int (*get_temp)(struct dsa_switch *, int *) ;
   int (*get_temp_limit)(struct dsa_switch *, int *) ;
   int (*set_temp_limit)(struct dsa_switch *, int ) ;
   int (*get_temp_alarm)(struct dsa_switch *, bool *) ;
   int (*get_eeprom_len)(struct dsa_switch *) ;
   int (*get_eeprom)(struct dsa_switch *, struct ethtool_eeprom *, u8 *) ;
   int (*set_eeprom)(struct dsa_switch *, struct ethtool_eeprom *, u8 *) ;
   int (*get_regs_len)(struct dsa_switch *, int ) ;
   void (*get_regs)(struct dsa_switch *, int , struct ethtool_regs *, void *) ;
   int (*port_join_bridge)(struct dsa_switch *, int , u32 ) ;
   int (*port_leave_bridge)(struct dsa_switch *, int , u32 ) ;
   int (*port_stp_update)(struct dsa_switch *, int , u8 ) ;
   int (*fdb_add)(struct dsa_switch *, int , unsigned char const *, u16 ) ;
   int (*fdb_del)(struct dsa_switch *, int , unsigned char const *, u16 ) ;
   int (*fdb_getnext)(struct dsa_switch *, int , unsigned char *, bool *) ;
};

#line 320  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dsa.h"
struct ieee_ets {
   __u8 willing ;
   __u8 ets_cap ;
   __u8 cbs ;
   __u8 tc_tx_bw[8U] ;
   __u8 tc_rx_bw[8U] ;
   __u8 tc_tsa[8U] ;
   __u8 prio_tc[8U] ;
   __u8 tc_reco_bw[8U] ;
   __u8 tc_reco_tsa[8U] ;
   __u8 reco_prio_tc[8U] ;
};

#line 69  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct ieee_maxrate {
   __u64 tc_maxrate[8U] ;
};

#line 87  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct ieee_qcn {
   __u8 rpg_enable[8U] ;
   __u32 rppp_max_rps[8U] ;
   __u32 rpg_time_reset[8U] ;
   __u32 rpg_byte_reset[8U] ;
   __u32 rpg_threshold[8U] ;
   __u32 rpg_max_rate[8U] ;
   __u32 rpg_ai_rate[8U] ;
   __u32 rpg_hai_rate[8U] ;
   __u32 rpg_gd[8U] ;
   __u32 rpg_min_dec_fac[8U] ;
   __u32 rpg_min_rate[8U] ;
   __u32 cndd_state_machine[8U] ;
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct ieee_qcn_stats {
   __u64 rppp_rp_centiseconds[8U] ;
   __u32 rppp_created_rps[8U] ;
};

#line 144  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct ieee_pfc {
   __u8 pfc_cap ;
   __u8 pfc_en ;
   __u8 mbc ;
   __u16 delay ;
   __u64 requests[8U] ;
   __u64 indications[8U] ;
};

#line 164  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct cee_pg {
   __u8 willing ;
   __u8 error ;
   __u8 pg_en ;
   __u8 tcs_supported ;
   __u8 pg_bw[8U] ;
   __u8 prio_pg[8U] ;
};

#line 187  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct cee_pfc {
   __u8 willing ;
   __u8 error ;
   __u8 pfc_en ;
   __u8 tcs_supported ;
};

#line 202  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct dcb_app {
   __u8 selector ;
   __u8 priority ;
   __u16 protocol ;
};

#line 236  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct dcb_peer_app_info {
   __u8 willing ;
   __u8 error ;
};

#line 40  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dcbnl.h"
struct dcbnl_rtnl_ops {
   int (*ieee_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_setets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_getmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_setmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_getqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_setqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_getqcnstats)(struct net_device *, struct ieee_qcn_stats *) ;
   int (*ieee_getpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_setpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_getapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_setapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_delapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_peer_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_peer_getpfc)(struct net_device *, struct ieee_pfc *) ;
   u8 (*getstate)(struct net_device *) ;
   u8 (*setstate)(struct net_device *, u8 ) ;
   void (*getpermhwaddr)(struct net_device *, u8 *) ;
   void (*setpgtccfgtx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgtx)(struct net_device *, int , u8 ) ;
   void (*setpgtccfgrx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgrx)(struct net_device *, int , u8 ) ;
   void (*getpgtccfgtx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgtx)(struct net_device *, int , u8 *) ;
   void (*getpgtccfgrx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgrx)(struct net_device *, int , u8 *) ;
   void (*setpfccfg)(struct net_device *, int , u8 ) ;
   void (*getpfccfg)(struct net_device *, int , u8 *) ;
   u8 (*setall)(struct net_device *) ;
   u8 (*getcap)(struct net_device *, int , u8 *) ;
   int (*getnumtcs)(struct net_device *, int , u8 *) ;
   int (*setnumtcs)(struct net_device *, int , u8 ) ;
   u8 (*getpfcstate)(struct net_device *) ;
   void (*setpfcstate)(struct net_device *, u8 ) ;
   void (*getbcncfg)(struct net_device *, int , u32 *) ;
   void (*setbcncfg)(struct net_device *, int , u32 ) ;
   void (*getbcnrp)(struct net_device *, int , u8 *) ;
   void (*setbcnrp)(struct net_device *, int , u8 ) ;
   int (*setapp)(struct net_device *, u8 , u16 , u8 ) ;
   int (*getapp)(struct net_device *, u8 , u16 ) ;
   u8 (*getfeatcfg)(struct net_device *, int , u8 *) ;
   u8 (*setfeatcfg)(struct net_device *, int , u8 ) ;
   u8 (*getdcbx)(struct net_device *) ;
   u8 (*setdcbx)(struct net_device *, u8 ) ;
   int (*peer_getappinfo)(struct net_device *, struct dcb_peer_app_info *, u16 *) ;
   int (*peer_getapptable)(struct net_device *, struct dcb_app *) ;
   int (*cee_peer_getpg)(struct net_device *, struct cee_pg *) ;
   int (*cee_peer_getpfc)(struct net_device *, struct cee_pfc *) ;
};

#line 105  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dcbnl.h"
struct taskstats {
   __u16 version ;
   __u32 ac_exitcode ;
   __u8 ac_flag ;
   __u8 ac_nice ;
   __u64 cpu_count ;
   __u64 cpu_delay_total ;
   __u64 blkio_count ;
   __u64 blkio_delay_total ;
   __u64 swapin_count ;
   __u64 swapin_delay_total ;
   __u64 cpu_run_real_total ;
   __u64 cpu_run_virtual_total ;
   char ac_comm[32U] ;
   __u8 ac_sched ;
   __u8 ac_pad[3U] ;
   __u32 ac_uid ;
   __u32 ac_gid ;
   __u32 ac_pid ;
   __u32 ac_ppid ;
   __u32 ac_btime ;
   __u64 ac_etime ;
   __u64 ac_utime ;
   __u64 ac_stime ;
   __u64 ac_minflt ;
   __u64 ac_majflt ;
   __u64 coremem ;
   __u64 virtmem ;
   __u64 hiwater_rss ;
   __u64 hiwater_vm ;
   __u64 read_char ;
   __u64 write_char ;
   __u64 read_syscalls ;
   __u64 write_syscalls ;
   __u64 read_bytes ;
   __u64 write_bytes ;
   __u64 cancelled_write_bytes ;
   __u64 nvcsw ;
   __u64 nivcsw ;
   __u64 ac_utimescaled ;
   __u64 ac_stimescaled ;
   __u64 cpu_scaled_run_real_total ;
   __u64 freepages_count ;
   __u64 freepages_delay_total ;
};

#line 515  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cgroup.h"
struct netprio_map {
   struct callback_head rcu ;
   u32 priomap_len ;
   u32 priomap[] ;
};

#line 1628  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/security.h"
struct mnt_namespace;

#line 1629 
struct ipc_namespace;

#line 1630  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/security.h"
struct nsproxy {
   atomic_t count ;
   struct uts_namespace *uts_ns ;
   struct ipc_namespace *ipc_ns ;
   struct mnt_namespace *mnt_ns ;
   struct pid_namespace *pid_ns_for_children ;
   struct net *net_ns ;
};

#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/netlink.h"
struct nlmsghdr {
   __u32 nlmsg_len ;
   __u16 nlmsg_type ;
   __u16 nlmsg_flags ;
   __u32 nlmsg_seq ;
   __u32 nlmsg_pid ;
};

#line 147  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/netlink.h"
struct nlattr {
   __u16 nla_len ;
   __u16 nla_type ;
};

#line 106  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netlink.h"
struct netlink_callback {
   struct sk_buff *skb ;
   struct nlmsghdr const *nlh ;
   int (*dump)(struct sk_buff *, struct netlink_callback *) ;
   int (*done)(struct netlink_callback *) ;
   void *data ;
   struct module *module ;
   u16 family ;
   u16 min_dump_alloc ;
   unsigned int prev_seq ;
   unsigned int seq ;
   long args[6U] ;
};

#line 182  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netlink.h"
struct ndmsg {
   __u8 ndm_family ;
   __u8 ndm_pad1 ;
   __u16 ndm_pad2 ;
   __s32 ndm_ifindex ;
   __u16 ndm_state ;
   __u8 ndm_flags ;
   __u8 ndm_type ;
};

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if_link.h"
struct rtnl_link_stats64 {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 rx_errors ;
   __u64 tx_errors ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
   __u64 multicast ;
   __u64 collisions ;
   __u64 rx_length_errors ;
   __u64 rx_over_errors ;
   __u64 rx_crc_errors ;
   __u64 rx_frame_errors ;
   __u64 rx_fifo_errors ;
   __u64 rx_missed_errors ;
   __u64 tx_aborted_errors ;
   __u64 tx_carrier_errors ;
   __u64 tx_fifo_errors ;
   __u64 tx_heartbeat_errors ;
   __u64 tx_window_errors ;
   __u64 rx_compressed ;
   __u64 tx_compressed ;
};

#line 643  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if_link.h"
struct ifla_vf_stats {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 broadcast ;
   __u64 multicast ;
};

#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/if_link.h"
struct ifla_vf_info {
   __u32 vf ;
   __u8 mac[32U] ;
   __u32 vlan ;
   __u32 qos ;
   __u32 spoofchk ;
   __u32 linkstate ;
   __u32 min_tx_rate ;
   __u32 max_tx_rate ;
   __u32 rss_query_en ;
};

#line 118  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if_bonding.h"
struct netpoll_info;

#line 119 
struct wireless_dev;

#line 120 
struct wpan_dev;

#line 121 
struct mpls_dev;

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
enum netdev_tx {
    __NETDEV_TX_MIN = -2147483648,
    NETDEV_TX_OK = 0,
    NETDEV_TX_BUSY = 16,
    NETDEV_TX_LOCKED = 32
};

#line 110  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
typedef enum netdev_tx netdev_tx_t;

#line 129  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct net_device_stats {
   unsigned long rx_packets ;
   unsigned long tx_packets ;
   unsigned long rx_bytes ;
   unsigned long tx_bytes ;
   unsigned long rx_errors ;
   unsigned long tx_errors ;
   unsigned long rx_dropped ;
   unsigned long tx_dropped ;
   unsigned long multicast ;
   unsigned long collisions ;
   unsigned long rx_length_errors ;
   unsigned long rx_over_errors ;
   unsigned long rx_crc_errors ;
   unsigned long rx_frame_errors ;
   unsigned long rx_fifo_errors ;
   unsigned long rx_missed_errors ;
   unsigned long tx_aborted_errors ;
   unsigned long tx_carrier_errors ;
   unsigned long tx_fifo_errors ;
   unsigned long tx_heartbeat_errors ;
   unsigned long tx_window_errors ;
   unsigned long rx_compressed ;
   unsigned long tx_compressed ;
};

#line 190 
struct neigh_parms;

#line 211  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct netdev_hw_addr_list {
   struct list_head list ;
   int count ;
};

#line 216  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct hh_cache {
   u16 hh_len ;
   u16 __pad ;
   seqlock_t hh_lock ;
   unsigned long hh_data[16U] ;
};

#line 245  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct header_ops {
   int (*create)(struct sk_buff *, struct net_device *, unsigned short , void const *, void const *, unsigned int ) ;
   int (*parse)(struct sk_buff const *, unsigned char *) ;
   int (*cache)(struct neighbour const *, struct hh_cache *, __be16 ) ;
   void (*cache_update)(struct hh_cache *, struct net_device const *, unsigned char const *) ;
};

#line 295  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct napi_struct {
   struct list_head poll_list ;
   unsigned long state ;
   int weight ;
   unsigned int gro_count ;
   int (*poll)(struct napi_struct *, int ) ;
   spinlock_t poll_lock ;
   int poll_owner ;
   struct net_device *dev ;
   struct sk_buff *gro_list ;
   struct sk_buff *skb ;
   struct hrtimer timer ;
   struct list_head dev_list ;
   struct hlist_node napi_hash_node ;
   unsigned int napi_id ;
};

#line 340 
enum rx_handler_result {
    RX_HANDLER_CONSUMED = 0,
    RX_HANDLER_ANOTHER = 1,
    RX_HANDLER_EXACT = 2,
    RX_HANDLER_PASS = 3
};

#line 388  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
typedef enum rx_handler_result rx_handler_result_t;

#line 389  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
typedef rx_handler_result_t rx_handler_func_t(struct sk_buff **);

#line 537 
struct Qdisc;

#line 537  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct netdev_queue {
   struct net_device *dev ;
   struct Qdisc *qdisc ;
   struct Qdisc *qdisc_sleeping ;
   struct kobject kobj ;
   int numa_node ;
   spinlock_t _xmit_lock ;
   int xmit_lock_owner ;
   unsigned long trans_start ;
   unsigned long trans_timeout ;
   unsigned long state ;
   struct dql dql ;
   unsigned long tx_maxrate ;
};

#line 607  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct rps_map {
   unsigned int len ;
   struct callback_head rcu ;
   u16 cpus[0U] ;
};

#line 619  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct rps_dev_flow {
   u16 cpu ;
   u16 filter ;
   unsigned int last_qtail ;
};

#line 631  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct rps_dev_flow_table {
   unsigned int mask ;
   struct callback_head rcu ;
   struct rps_dev_flow flows[0U] ;
};

#line 683  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct netdev_rx_queue {
   struct rps_map *rps_map ;
   struct rps_dev_flow_table *rps_flow_table ;
   struct kobject kobj ;
   struct net_device *dev ;
};

#line 706  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct xps_map {
   unsigned int len ;
   unsigned int alloc_len ;
   struct callback_head rcu ;
   u16 queues[0U] ;
};

#line 719  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct xps_dev_maps {
   struct callback_head rcu ;
   struct xps_map *cpu_map[0U] ;
};

#line 730  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct netdev_tc_txq {
   u16 count ;
   u16 offset ;
};

#line 741  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct netdev_fcoe_hbainfo {
   char manufacturer[64U] ;
   char serial_number[64U] ;
   char hardware_version[64U] ;
   char driver_version[64U] ;
   char optionrom_version[64U] ;
   char firmware_version[64U] ;
   char model[256U] ;
   char model_description[256U] ;
};

#line 757  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct netdev_phys_item_id {
   unsigned char id[32U] ;
   unsigned char id_len ;
};

#line 770  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct net_device_ops {
   int (*ndo_init)(struct net_device *) ;
   void (*ndo_uninit)(struct net_device *) ;
   int (*ndo_open)(struct net_device *) ;
   int (*ndo_stop)(struct net_device *) ;
   netdev_tx_t (*ndo_start_xmit)(struct sk_buff *, struct net_device *) ;
   u16 (*ndo_select_queue)(struct net_device *, struct sk_buff *, void *, u16 (*)(struct net_device *, struct sk_buff *)) ;
   void (*ndo_change_rx_flags)(struct net_device *, int ) ;
   void (*ndo_set_rx_mode)(struct net_device *) ;
   int (*ndo_set_mac_address)(struct net_device *, void *) ;
   int (*ndo_validate_addr)(struct net_device *) ;
   int (*ndo_do_ioctl)(struct net_device *, struct ifreq *, int ) ;
   int (*ndo_set_config)(struct net_device *, struct ifmap *) ;
   int (*ndo_change_mtu)(struct net_device *, int ) ;
   int (*ndo_neigh_setup)(struct net_device *, struct neigh_parms *) ;
   void (*ndo_tx_timeout)(struct net_device *) ;
   struct rtnl_link_stats64 *(*ndo_get_stats64)(struct net_device *, struct rtnl_link_stats64 *) ;
   struct net_device_stats *(*ndo_get_stats)(struct net_device *) ;
   int (*ndo_vlan_rx_add_vid)(struct net_device *, __be16 , u16 ) ;
   int (*ndo_vlan_rx_kill_vid)(struct net_device *, __be16 , u16 ) ;
   void (*ndo_poll_controller)(struct net_device *) ;
   int (*ndo_netpoll_setup)(struct net_device *, struct netpoll_info *) ;
   void (*ndo_netpoll_cleanup)(struct net_device *) ;
   int (*ndo_busy_poll)(struct napi_struct *) ;
   int (*ndo_set_vf_mac)(struct net_device *, int , u8 *) ;
   int (*ndo_set_vf_vlan)(struct net_device *, int , u16 , u8 ) ;
   int (*ndo_set_vf_rate)(struct net_device *, int , int , int ) ;
   int (*ndo_set_vf_spoofchk)(struct net_device *, int , bool ) ;
   int (*ndo_get_vf_config)(struct net_device *, int , struct ifla_vf_info *) ;
   int (*ndo_set_vf_link_state)(struct net_device *, int , int ) ;
   int (*ndo_get_vf_stats)(struct net_device *, int , struct ifla_vf_stats *) ;
   int (*ndo_set_vf_port)(struct net_device *, int , struct nlattr **) ;
   int (*ndo_get_vf_port)(struct net_device *, int , struct sk_buff *) ;
   int (*ndo_set_vf_rss_query_en)(struct net_device *, int , bool ) ;
   int (*ndo_setup_tc)(struct net_device *, u8 ) ;
   int (*ndo_fcoe_enable)(struct net_device *) ;
   int (*ndo_fcoe_disable)(struct net_device *) ;
   int (*ndo_fcoe_ddp_setup)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_ddp_done)(struct net_device *, u16 ) ;
   int (*ndo_fcoe_ddp_target)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_get_hbainfo)(struct net_device *, struct netdev_fcoe_hbainfo *) ;
   int (*ndo_fcoe_get_wwn)(struct net_device *, u64 *, int ) ;
   int (*ndo_rx_flow_steer)(struct net_device *, struct sk_buff const *, u16 , u32 ) ;
   int (*ndo_add_slave)(struct net_device *, struct net_device *) ;
   int (*ndo_del_slave)(struct net_device *, struct net_device *) ;
   netdev_features_t (*ndo_fix_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_set_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_neigh_construct)(struct neighbour *) ;
   void (*ndo_neigh_destroy)(struct neighbour *) ;
   int (*ndo_fdb_add)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char const *, u16 , u16 ) ;
   int (*ndo_fdb_del)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char const *, u16 ) ;
   int (*ndo_fdb_dump)(struct sk_buff *, struct netlink_callback *, struct net_device *, struct net_device *, int ) ;
   int (*ndo_bridge_setlink)(struct net_device *, struct nlmsghdr *, u16 ) ;
   int (*ndo_bridge_getlink)(struct sk_buff *, u32 , u32 , struct net_device *, u32 , int ) ;
   int (*ndo_bridge_dellink)(struct net_device *, struct nlmsghdr *, u16 ) ;
   int (*ndo_change_carrier)(struct net_device *, bool ) ;
   int (*ndo_get_phys_port_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_phys_port_name)(struct net_device *, char *, size_t ) ;
   void (*ndo_add_vxlan_port)(struct net_device *, sa_family_t , __be16 ) ;
   void (*ndo_del_vxlan_port)(struct net_device *, sa_family_t , __be16 ) ;
   void *(*ndo_dfwd_add_station)(struct net_device *, struct net_device *) ;
   void (*ndo_dfwd_del_station)(struct net_device *, void *) ;
   netdev_tx_t (*ndo_dfwd_start_xmit)(struct sk_buff *, struct net_device *, void *) ;
   int (*ndo_get_lock_subclass)(struct net_device *) ;
   netdev_features_t (*ndo_features_check)(struct sk_buff *, struct net_device *, netdev_features_t ) ;
   int (*ndo_set_tx_maxrate)(struct net_device *, int , u32 ) ;
   int (*ndo_get_iflink)(struct net_device const *) ;
};

#line 1243 
enum ldv_30457 {
    NETREG_UNINITIALIZED = 0,
    NETREG_REGISTERED = 1,
    NETREG_UNREGISTERING = 2,
    NETREG_UNREGISTERED = 3,
    NETREG_RELEASED = 4,
    NETREG_DUMMY = 5
};

#line 1252 
enum ldv_30458 {
    RTNL_LINK_INITIALIZED = 0,
    RTNL_LINK_INITIALIZING = 1
};

#line 1257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct __anonstruct_adj_list_305 {
   struct list_head upper ;
   struct list_head lower ;
};

#line 1257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct __anonstruct_all_adj_list_306 {
   struct list_head upper ;
   struct list_head lower ;
};

#line 1257 
struct iw_handler_def;

#line 1257 
struct iw_public_data;

#line 1257 
struct switchdev_ops;

#line 1257 
struct vlan_info;

#line 1257 
struct tipc_bearer;

#line 1257 
struct in_device;

#line 1257 
struct dn_dev;

#line 1257 
struct inet6_dev;

#line 1257 
struct tcf_proto;

#line 1257 
struct cpu_rmap;

#line 1257 
struct pcpu_lstats;

#line 1257 
struct pcpu_sw_netstats;

#line 1257 
struct pcpu_dstats;

#line 1257 
struct pcpu_vstats;

#line 1257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
union __anonunion_307 {
   void *ml_priv ;
   struct pcpu_lstats *lstats ;
   struct pcpu_sw_netstats *tstats ;
   struct pcpu_dstats *dstats ;
   struct pcpu_vstats *vstats ;
};

#line 1257 
struct garp_port;

#line 1257 
struct mrp_port;

#line 1257 
struct rtnl_link_ops;

#line 1257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct net_device {
   char name[16U] ;
   struct hlist_node name_hlist ;
   char *ifalias ;
   unsigned long mem_end ;
   unsigned long mem_start ;
   unsigned long base_addr ;
   int irq ;
   atomic_t carrier_changes ;
   unsigned long state ;
   struct list_head dev_list ;
   struct list_head napi_list ;
   struct list_head unreg_list ;
   struct list_head close_list ;
   struct list_head ptype_all ;
   struct list_head ptype_specific ;
   struct __anonstruct_adj_list_305 adj_list ;
   struct __anonstruct_all_adj_list_306 all_adj_list ;
   netdev_features_t features ;
   netdev_features_t hw_features ;
   netdev_features_t wanted_features ;
   netdev_features_t vlan_features ;
   netdev_features_t hw_enc_features ;
   netdev_features_t mpls_features ;
   int ifindex ;
   int group ;
   struct net_device_stats stats ;
   atomic_long_t rx_dropped ;
   atomic_long_t tx_dropped ;
   struct iw_handler_def const *wireless_handlers ;
   struct iw_public_data *wireless_data ;
   struct net_device_ops const *netdev_ops ;
   struct ethtool_ops const *ethtool_ops ;
   struct switchdev_ops const *switchdev_ops ;
   struct header_ops const *header_ops ;
   unsigned int flags ;
   unsigned int priv_flags ;
   unsigned short gflags ;
   unsigned short padded ;
   unsigned char operstate ;
   unsigned char link_mode ;
   unsigned char if_port ;
   unsigned char dma ;
   unsigned int mtu ;
   unsigned short type ;
   unsigned short hard_header_len ;
   unsigned short needed_headroom ;
   unsigned short needed_tailroom ;
   unsigned char perm_addr[32U] ;
   unsigned char addr_assign_type ;
   unsigned char addr_len ;
   unsigned short neigh_priv_len ;
   unsigned short dev_id ;
   unsigned short dev_port ;
   spinlock_t addr_list_lock ;
   unsigned char name_assign_type ;
   bool uc_promisc ;
   struct netdev_hw_addr_list uc ;
   struct netdev_hw_addr_list mc ;
   struct netdev_hw_addr_list dev_addrs ;
   struct kset *queues_kset ;
   unsigned int promiscuity ;
   unsigned int allmulti ;
   struct vlan_info *vlan_info ;
   struct dsa_switch_tree *dsa_ptr ;
   struct tipc_bearer *tipc_ptr ;
   void *atalk_ptr ;
   struct in_device *ip_ptr ;
   struct dn_dev *dn_ptr ;
   struct inet6_dev *ip6_ptr ;
   void *ax25_ptr ;
   struct wireless_dev *ieee80211_ptr ;
   struct wpan_dev *ieee802154_ptr ;
   struct mpls_dev *mpls_ptr ;
   unsigned long last_rx ;
   unsigned char *dev_addr ;
   struct netdev_rx_queue *_rx ;
   unsigned int num_rx_queues ;
   unsigned int real_num_rx_queues ;
   unsigned long gro_flush_timeout ;
   rx_handler_func_t *rx_handler ;
   void *rx_handler_data ;
   struct tcf_proto *ingress_cl_list ;
   struct netdev_queue *ingress_queue ;
   struct list_head nf_hooks_ingress ;
   unsigned char broadcast[32U] ;
   struct cpu_rmap *rx_cpu_rmap ;
   struct hlist_node index_hlist ;
   struct netdev_queue *_tx ;
   unsigned int num_tx_queues ;
   unsigned int real_num_tx_queues ;
   struct Qdisc *qdisc ;
   unsigned long tx_queue_len ;
   spinlock_t tx_global_lock ;
   int watchdog_timeo ;
   struct xps_dev_maps *xps_maps ;
   unsigned long trans_start ;
   struct timer_list watchdog_timer ;
   int *pcpu_refcnt ;
   struct list_head todo_list ;
   struct list_head link_watch_list ;
   enum ldv_30457 __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))) reg_state : 8 ;
   bool dismantle ;
   enum ldv_30458 __attribute__((__FRAMA_C_BITFIELD_SIZE__(16))) rtnl_link_state : 16 ;
   void (*destructor)(struct net_device *) ;
   struct netpoll_info *npinfo ;
   possible_net_t nd_net ;
   union __anonunion_307 __anonCompField_net_device_94 ;
   struct garp_port *garp_port ;
   struct mrp_port *mrp_port ;
   struct device dev ;
   struct attribute_group const *sysfs_groups[4U] ;
   struct attribute_group const *sysfs_rx_queue_group ;
   struct rtnl_link_ops const *rtnl_link_ops ;
   unsigned int gso_max_size ;
   u16 gso_max_segs ;
   u16 gso_min_segs ;
   struct dcbnl_rtnl_ops const *dcbnl_ops ;
   u8 num_tc ;
   struct netdev_tc_txq tc_to_txq[16U] ;
   u8 prio_tc_map[16U] ;
   unsigned int fcoe_ddp_xid ;
   struct netprio_map *priomap ;
   struct phy_device *phydev ;
   struct lock_class_key *qdisc_tx_busylock ;
};

#line 1978  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct packet_type {
   __be16 type ;
   struct net_device *dev ;
   int (*func)(struct sk_buff *, struct net_device *, struct packet_type *, struct net_device *) ;
   bool (*id_match)(struct packet_type *, struct sock *) ;
   void *af_packet_priv ;
   struct list_head list ;
};

#line 2025  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct pcpu_sw_netstats {
   u64 rx_packets ;
   u64 rx_bytes ;
   u64 tx_packets ;
   u64 tx_bytes ;
   struct u64_stats_sync syncp ;
};

#line 165  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/tulip.h"
struct tulip_rx_desc {
   __le32 status ;
   __le32 length ;
   __le32 buffer1 ;
   __le32 buffer2 ;
};

#line 191  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/tulip.h"
struct tulip_tx_desc {
   __le32 status ;
   __le32 length ;
   __le32 buffer1 ;
   __le32 buffer2 ;
};

#line 273  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/tulip.h"
struct medialeaf {
   u8 type ;
   u8 media ;
   unsigned char *leafdata ;
};

#line 373  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/tulip.h"
struct mediatable {
   u16 defaultmedia ;
   u8 leafcount ;
   u8 csr12dir ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) has_mii : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) has_nonmii : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(6))) has_reset : 6 ;
   u32 csr15dir ;
   u32 csr15val ;
   struct medialeaf mleaf[0U] ;
};

#line 394  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/tulip.h"
struct ring_info {
   struct sk_buff *skb ;
   dma_addr_t mapping ;
};

#line 399  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/tulip.h"
struct tulip_private {
   char const *product_name ;
   struct net_device *next_module ;
   struct tulip_rx_desc *rx_ring ;
   struct tulip_tx_desc *tx_ring ;
   dma_addr_t rx_ring_dma ;
   dma_addr_t tx_ring_dma ;
   struct ring_info tx_buffers[32U] ;
   struct ring_info rx_buffers[128U] ;
   u16 setup_frame[96U] ;
   int chip_id ;
   int revision ;
   int flags ;
   struct napi_struct napi ;
   struct timer_list timer ;
   struct timer_list oom_timer ;
   u32 mc_filter[2U] ;
   spinlock_t lock ;
   spinlock_t mii_lock ;
   unsigned int cur_rx ;
   unsigned int cur_tx ;
   unsigned int dirty_rx ;
   unsigned int dirty_tx ;
   int mit_on ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) full_duplex : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) full_duplex_lock : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) fake_addr : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) default_port : 4 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) media2 : 4 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) medialock : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) mediasense : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) nway : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) nwayset : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) timeout_recovery : 1 ;
   unsigned int csr0 ;
   unsigned int csr6 ;
   unsigned char eeprom[512U] ;
   void (*link_change)(struct net_device *, int ) ;
   struct ethtool_wolinfo wolinfo ;
   u16 sym_advertise ;
   u16 mii_advertise ;
   u16 lpar ;
   u16 advertising[4U] ;
   signed char phys[4U] ;
   signed char mii_cnt ;
   struct mediatable *mtable ;
   int cur_index ;
   int saved_if_port ;
   struct pci_dev *pdev ;
   int ttimer ;
   int susp_rx ;
   unsigned long nir ;
   void *base_addr ;
   int csr12_shadow ;
   int pad0 ;
   struct work_struct media_work ;
   struct net_device *dev ;
};

#line 9  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/unaligned/generic.h"
struct tulip_chip_table {
   char *chip_name ;
   int io_size ;
   int valid_intrs ;
   int flags ;
   void (*media_timer)(unsigned long ) ;
   void (*media_task)(struct work_struct *) ;
};

#line 508  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/xfrm.h"
enum irqreturn {
    IRQ_NONE = 0,
    IRQ_HANDLED = 1,
    IRQ_WAKE_THREAD = 2
};

#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/irqreturn.h"
typedef enum irqreturn irqreturn_t;

#line 2893  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
enum skb_free_reason {
    SKB_REASON_CONSUMED = 0,
    SKB_REASON_DROPPED = 1
};

#line 14  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/weaver/.tmp_tulip_core.c.aux"
struct kernel_symbol {
   unsigned long value ;
   char const *name ;
};

#line 131  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/init.h"
typedef void (*ctor_fn_t)(void);

#line 555  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/percpu.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};

#line 59  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/jump_label.h"
struct jump_entry;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/jump_label.h"
typedef u64 jump_label_t;

#line 35  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/jump_label.h"
struct jump_entry {
   jump_label_t code ;
   jump_label_t target ;
   jump_label_t key ;
};

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/workqueue.h"
enum ldv_11758 {
    WORK_STRUCT_PENDING_BIT = 0,
    WORK_STRUCT_DELAYED_BIT = 1,
    WORK_STRUCT_PWQ_BIT = 2,
    WORK_STRUCT_LINKED_BIT = 3,
    WORK_STRUCT_STATIC_BIT = 4,
    WORK_STRUCT_COLOR_SHIFT = 5,
    WORK_STRUCT_COLOR_BITS = 4,
    WORK_STRUCT_PENDING = 1,
    WORK_STRUCT_DELAYED = 2,
    WORK_STRUCT_PWQ = 4,
    WORK_STRUCT_LINKED = 8,
    WORK_STRUCT_STATIC = 16,
    WORK_NR_COLORS = 15,
    WORK_NO_COLOR = 15,
    WORK_CPU_UNBOUND = 8192,
    WORK_STRUCT_FLAG_BITS = 9,
    WORK_OFFQ_FLAG_BASE = 5,
    __WORK_OFFQ_CANCELING = 5,
    WORK_OFFQ_CANCELING = 32,
    WORK_OFFQ_FLAG_BITS = 1,
    WORK_OFFQ_POOL_SHIFT = 6,
    WORK_OFFQ_LEFT = 58,
    WORK_OFFQ_POOL_BITS = 31,
    WORK_OFFQ_POOL_NONE = 2147483647,
    WORK_STRUCT_FLAG_MASK = 511,
    WORK_STRUCT_WQ_DATA_MASK = -512,
    WORK_STRUCT_NO_POOL = 137438953408,
    WORK_BUSY_PENDING = 1,
    WORK_BUSY_RUNNING = 2,
    WORKER_DESC_LEN = 24
};

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/elf.h"
typedef __u64 Elf64_Addr;

#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/elf.h"
typedef __u16 Elf64_Half;

#line 20  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/elf.h"
typedef __u32 Elf64_Word;

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/elf.h"
typedef __u64 Elf64_Xword;

#line 190  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};

#line 198  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;

#line 223  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
struct kernel_param;

#line 228  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
struct kernel_param_ops {
   unsigned int flags ;
   int (*set)(char const *, struct kernel_param const *) ;
   int (*get)(char *, struct kernel_param const *) ;
   void (*free)(void *) ;
};

#line 62  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/moduleparam.h"
struct kparam_string;

#line 62 
struct kparam_array;

#line 62  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/moduleparam.h"
union __anonunion_1732 {
   void *arg ;
   struct kparam_string const *str ;
   struct kparam_array const *arr ;
};

#line 62  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/moduleparam.h"
struct kernel_param {
   char const *name ;
   struct module *mod ;
   struct kernel_param_ops const *ops ;
   u16 const perm ;
   s8 level ;
   u8 flags ;
   union __anonunion_1732 __anonCompField_kernel_param_49 ;
};

#line 83  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};

#line 89  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int elemsize ;
   unsigned int *num ;
   struct kernel_param_ops const *ops ;
   void *elem ;
};

#line 469  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/moduleparam.h"
struct latch_tree_node {
   struct rb_node node[2U] ;
};

#line 211  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rbtree_latch.h"
struct mod_arch_specific {
   
};

#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/module.h"
struct module_param_attrs;

#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
   struct completion *kobj_completion ;
};

#line 48  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute *, struct module_kobject *, char *) ;
   ssize_t (*store)(struct module_attribute *, struct module_kobject *, char const *, size_t ) ;
   void (*setup)(struct module *, char const *) ;
   int (*test)(struct module *) ;
   void (*free)(struct module *) ;
};

#line 74 
struct exception_table_entry;

#line 290 
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2,
    MODULE_STATE_UNFORMED = 3
};

#line 297  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/module.h"
struct mod_tree_node {
   struct module *mod ;
   struct latch_tree_node node ;
};

#line 304 
struct module_sect_attrs;

#line 304 
struct module_notes_attrs;

#line 304 
struct tracepoint;

#line 304 
struct trace_event_call;

#line 304 
struct trace_enum_map;

#line 304  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char const *version ;
   char const *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol const *syms ;
   unsigned long const *crcs ;
   unsigned int num_syms ;
   struct mutex param_lock ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol const *gpl_syms ;
   unsigned long const *gpl_crcs ;
   struct kernel_symbol const *unused_syms ;
   unsigned long const *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol const *unused_gpl_syms ;
   unsigned long const *unused_gpl_crcs ;
   bool sig_ok ;
   bool async_probe_requested ;
   struct kernel_symbol const *gpl_future_syms ;
   unsigned long const *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   void *module_init ;
   void *module_core ;
   unsigned int init_size ;
   unsigned int core_size ;
   unsigned int init_text_size ;
   unsigned int core_text_size ;
   struct mod_tree_node mtn_core ;
   struct mod_tree_node mtn_init ;
   unsigned int init_ro_size ;
   unsigned int core_ro_size ;
   struct mod_arch_specific arch ;
   unsigned int taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   Elf64_Sym *symtab ;
   Elf64_Sym *core_symtab ;
   unsigned int num_symtab ;
   unsigned int core_num_syms ;
   char *strtab ;
   char *core_strtab ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   char *args ;
   void *percpu ;
   unsigned int percpu_size ;
   unsigned int num_tracepoints ;
   struct tracepoint * const *tracepoints_ptrs ;
   struct jump_entry *jump_entries ;
   unsigned int num_jump_entries ;
   unsigned int num_trace_bprintk_fmt ;
   char const **trace_bprintk_fmt_start ;
   struct trace_event_call **trace_events ;
   unsigned int num_trace_events ;
   struct trace_enum_map **trace_enums ;
   unsigned int num_trace_enums ;
   unsigned int num_ftrace_callsites ;
   unsigned long *ftrace_callsites ;
   bool klp_alive ;
   struct list_head source_list ;
   struct list_head target_list ;
   void (*exit)(void) ;
   atomic_t refcnt ;
   ctor_fn_t (**ctors)(void) ;
   unsigned int num_ctors ;
};

#line 62  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/uaccess.h"
struct exception_table_entry {
   int insn ;
   int fixup ;
};

#line 1084  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/of.h"
struct mii_ioctl_data {
   __u16 phy_id ;
   __u16 reg_num ;
   __u16 val_in ;
   __u16 val_out ;
};

#line 191  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct netdev_hw_addr {
   struct list_head list ;
   unsigned char addr[32U] ;
   unsigned char type ;
   bool global_use ;
   int sync_cnt ;
   int refcount ;
   int synced ;
   struct callback_head callback_head ;
};

#line 459  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/tulip.h"
struct eeprom_fixup {
   char *name ;
   unsigned char addr0 ;
   unsigned char addr1 ;
   unsigned char addr2 ;
   u16 newtable[32U] ;
};

#line 62  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memory.h"
struct ldv_list_element {
   void *data ;
   struct ldv_list_element *next ;
};

#line 26  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memlist.h"
typedef struct ldv_list_element *ldv_list_ptr;

#line 41  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.h"
struct device_private {
   void *driver_data ;
};

#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef short s16;

#line 54  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kthread.h"
struct kthread_work;

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kthread.h"
struct kthread_worker {
   spinlock_t lock ;
   struct list_head work_list ;
   struct task_struct *task ;
   struct kthread_work *current_work ;
};

#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kthread.h"
struct kthread_work {
   struct list_head node ;
   void (*func)(struct kthread_work *) ;
   struct kthread_worker *worker ;
};

#line 380  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/scatterlist.h"
struct dma_chan;

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spi/spi.h"
struct spi_master;

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spi/spi.h"
struct spi_device {
   struct device dev ;
   struct spi_master *master ;
   u32 max_speed_hz ;
   u8 chip_select ;
   u8 bits_per_word ;
   u16 mode ;
   int irq ;
   void *controller_state ;
   void *controller_data ;
   char modalias[32U] ;
   int cs_gpio ;
};

#line 151 
struct spi_message;

#line 152 
struct spi_transfer;

#line 205  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spi/spi.h"
struct spi_master {
   struct device dev ;
   struct list_head list ;
   s16 bus_num ;
   u16 num_chipselect ;
   u16 dma_alignment ;
   u16 mode_bits ;
   u32 bits_per_word_mask ;
   u32 min_speed_hz ;
   u32 max_speed_hz ;
   u16 flags ;
   spinlock_t bus_lock_spinlock ;
   struct mutex bus_lock_mutex ;
   bool bus_lock_flag ;
   int (*setup)(struct spi_device *) ;
   int (*transfer)(struct spi_device *, struct spi_message *) ;
   void (*cleanup)(struct spi_device *) ;
   bool (*can_dma)(struct spi_master *, struct spi_device *, struct spi_transfer *) ;
   bool queued ;
   struct kthread_worker kworker ;
   struct task_struct *kworker_task ;
   struct kthread_work pump_messages ;
   spinlock_t queue_lock ;
   struct list_head queue ;
   struct spi_message *cur_msg ;
   bool idling ;
   bool busy ;
   bool running ;
   bool rt ;
   bool auto_runtime_pm ;
   bool cur_msg_prepared ;
   bool cur_msg_mapped ;
   struct completion xfer_completion ;
   size_t max_dma_len ;
   int (*prepare_transfer_hardware)(struct spi_master *) ;
   int (*transfer_one_message)(struct spi_master *, struct spi_message *) ;
   int (*unprepare_transfer_hardware)(struct spi_master *) ;
   int (*prepare_message)(struct spi_master *, struct spi_message *) ;
   int (*unprepare_message)(struct spi_master *, struct spi_message *) ;
   void (*set_cs)(struct spi_device *, bool ) ;
   int (*transfer_one)(struct spi_master *, struct spi_device *, struct spi_transfer *) ;
   void (*handle_err)(struct spi_master *, struct spi_message *) ;
   int *cs_gpios ;
   struct dma_chan *dma_tx ;
   struct dma_chan *dma_rx ;
   void *dummy_rx ;
   void *dummy_tx ;
};

#line 506  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spi/spi.h"
struct spi_transfer {
   void const *tx_buf ;
   void *rx_buf ;
   unsigned int len ;
   dma_addr_t tx_dma ;
   dma_addr_t rx_dma ;
   struct sg_table tx_sg ;
   struct sg_table rx_sg ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) cs_change : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))) tx_nbits : 3 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))) rx_nbits : 3 ;
   u8 bits_per_word ;
   u16 delay_usecs ;
   u32 speed_hz ;
   struct list_head transfer_list ;
};

#line 630  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spi/spi.h"
struct spi_message {
   struct list_head transfers ;
   struct spi_device *spi ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_dma_mapped : 1 ;
   void (*complete)(void *) ;
   void *context ;
   unsigned int frame_length ;
   unsigned int actual_length ;
   int status ;
   struct list_head queue ;
   void *state ;
};

#line 21  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/thread.h"
typedef unsigned long pthread_t;

#line 22  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/thread.h"
union pthread_attr_t {
   char __size[56U] ;
   long __align ;
};

#line 29  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/thread.h"
typedef union pthread_attr_t pthread_attr_t;

#line 3835  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct ldv_struct_free_irq_3 {
   int arg0 ;
   int signal_pending ;
};

#line 19  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/emg/environment_model.c"
struct ldv_struct_interrupt_scenario_14 {
   enum irqreturn (*arg2)(int , void *) ;
   enum irqreturn (*arg1)(int , void *) ;
   void *arg3 ;
   int arg0 ;
   int signal_pending ;
};

#line 27  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/emg/environment_model.c"
struct ldv_struct_pci_scenario_16 {
   struct pci_driver *arg0 ;
   int signal_pending ;
};

#line 32  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/emg/environment_model.c"
struct ldv_struct_random_allocationless_scenario_13 {
   struct net_device *arg0 ;
   int signal_pending ;
};

#line 37  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/emg/environment_model.c"
struct ldv_struct_timer_scenario_15 {
   struct timer_list *arg0 ;
   int signal_pending ;
};

#line 7  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/fvtp/.tmp_media.c"
void ldv_inline_asm(void);


#line 63  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/byteorder/little_endian.h"
__inline static __u16 __le16_to_cpup(__le16 const *p)
{
  __u16 __retres;
  
#line 65 
  __retres = *p;
  
#line 65 
  return __retres;
}


#line 142  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/printk.h"
int printk(char const * , ...);


#line 45  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dynamic_debug.h"
void __dynamic_pr_debug(struct _ddebug *, char const * , ...);


#line 59 
void __dynamic_netdev_dbg(struct _ddebug *, struct net_device const *, char const * , ...);


#line 45  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock_api_smp.h"
void _raw_spin_unlock_irqrestore(raw_spinlock_t *, unsigned long);


#line 442  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_unlock_irqrestore(spinlock_t *lock, unsigned long flags)
{
  {
    unsigned long __dummy;
    unsigned long __dummy2;
    
  }
  
#line 444 
  _raw_spin_unlock_irqrestore(& lock->__anonCompField_spinlock_18.rlock,flags);
  
#line 445 
  return;
}


#line 474 
static void ldv_spin_unlock_irqrestore_73(spinlock_t *lock, unsigned long flags);


#line 478 
static void ldv_spin_unlock_irqrestore_74(spinlock_t *lock, unsigned long flags);


#line 482 
static void ldv_spin_unlock_irqrestore_76(spinlock_t *lock, unsigned long flags);


#line 486 
static void ldv_spin_unlock_irqrestore_77(spinlock_t *lock, unsigned long flags);


#line 43  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/weaver/.tmp_media.c.aux"
void __ldv_spin_lock(spinlock_t *);


#line 70 
static void ldv___ldv_spin_lock_72(spinlock_t *ldv_func_arg1);


#line 74 
static void ldv___ldv_spin_lock_75(spinlock_t *ldv_func_arg1);


#line 82 
void ldv_spin_model_lock(char *);


#line 83 
void ldv_spin_model_unlock(char *);


#line 31  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/iomap.h"
unsigned int ioread32(void *);


#line 37 
void iowrite32(u32, void *);


#line 1089  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
void _dev_info(struct device const *, char const * , ...);


#line 64  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mii.h"
__inline static unsigned int mii_nway_result(unsigned int negotiated)
{
  unsigned int ret;
  
#line 68 
  if ((negotiated & 256U) != 0U) 
#line 69 
                                 ret = 256U;
  else 
    
#line 70 
    if ((negotiated & 512U) != 0U) 
#line 71 
                                   ret = 512U;
    else 
      
#line 72 
      if ((negotiated & 128U) != 0U) 
#line 73 
                                     ret = 128U;
      else 
        
#line 74 
        if ((negotiated & 64U) != 0U) 
#line 75 
                                      ret = 64U; else 
#line 77 
                                                      ret = 32U;
  
#line 79 
  return ret;
}


#line 91  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mii.h"
__inline static unsigned int mii_duplex(unsigned int duplex_lock, unsigned int negotiated)
{
  unsigned int __retres;
  unsigned int tmp;
  
#line 94 
  if (duplex_lock != 0U) {
    
#line 95 
    __retres = 1U;
    
#line 95 
    goto return_label;
  }
  else ;
  
#line 96 
  tmp = mii_nway_result(negotiated);
  
#line 96 
  if ((tmp & 320U) != 0U) {
    
#line 97 
    __retres = 1U;
    
#line 97 
    goto return_label;
  }
  else ;
  
#line 98 
  __retres = 0U;
  return_label: 
#line 98 
                return __retres;
}


#line 10  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/delay.h"
void __const_udelay(unsigned long);


#line 1880  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void *netdev_priv(struct net_device const *dev)
{
  void *__retres;
  
#line 1882 
  __retres = (void *)dev + 3008U;
  
#line 1882 
  return __retres;
}


#line 7  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/unaligned/access_ok.h"
__inline static u16 get_unaligned_le16(void const *p)
{
  u16 tmp;
  
#line 9 
  tmp = __le16_to_cpup((__le16 const *)p);
  
#line 9 
  return tmp;
}


#line 471  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/tulip.h"
u16 t21142_csr14[5U];


#line 498 
int tulip_mdio_read(struct net_device *dev, int phy_id, int location);


#line 499 
void tulip_mdio_write(struct net_device *dev, int phy_id, int location, int val);


#line 500 
void tulip_select_media(struct net_device *dev, int startup);


#line 501 
int tulip_check_duplex(struct net_device *dev);


#line 502 
void tulip_find_mii(struct net_device *dev, int board_idx);


#line 515 
int tulip_debug;


#line 516 
char const * const medianame[32U];


#line 517 
char const tulip_media_cap[32U];


#line 522  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/tulip.h"
__inline static void tulip_start_rxtx(struct tulip_private *tp)
{
  
#line 524 
  void *ioaddr = tp->base_addr;
  
#line 525 
  iowrite32(tp->csr6 | 8194U,ioaddr + 48U);
  
#line 526 
  ldv_inline_asm();
  
#line 527 
  ioread32(ioaddr + 48U);
  
#line 528 
  return;
}


#line 530  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/tulip.h"
__inline static void tulip_stop_rxtx(struct tulip_private *tp)
{
  
#line 532 
  void *ioaddr = tp->base_addr;
  
#line 533 
  u32 csr6 = ioread32(ioaddr + 48U);
  
#line 535 
  if ((csr6 & 8194U) != 0U) {
    
#line 536 
    unsigned int i = 130U;
    
#line 537 
    iowrite32(csr6 & 4294959101U,ioaddr + 48U);
    
#line 538 
    ldv_inline_asm();
    
#line 543 
    goto ldv_45317;
    ldv_45316: 
#line 544 
    ;
    
#line 544 
    __const_udelay(42950UL);
    ldv_45317: 
#line 546 
    ;
    
#line 543 
    i -= 1U;
    
#line 543 
    if (i != 0U) {
      unsigned int tmp_0;
      
#line 543 
      tmp_0 = ioread32(ioaddr + 40U);
      
#line 543 
      if ((tmp_0 & 8257536U) != 0U) 
#line 545 
                                    goto ldv_45316; else 
#line 548 
                                                         goto ldv_45318;
    }
    else 
#line 548 
         goto ldv_45318;
    ldv_45318: 
#line 549 
    ;
    
#line 546 
    if (i == 0U) {
      
#line 547 
      struct _ddebug descriptor = {.modname = "tulip", .function = "tulip_stop_rxtx", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/tulip.h", .format = "tulip_stop_rxtx() failed (CSR5 0x%x CSR6 0x%x)\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))549U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))1U};
      
#line 547 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
        unsigned int tmp_1;
        unsigned int tmp_2;
        
#line 547 
        tmp_1 = ioread32(ioaddr + 48U);
        
#line 547 
        tmp_2 = ioread32(ioaddr + 40U);
        
#line 547 
        ;
        
#line 547 
        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)tp->dev,"tulip_stop_rxtx() failed (CSR5 0x%x CSR6 0x%x)\n",tmp_2,tmp_1);
      }
      else ;
    }
    else ;
  }
  else ;
  
#line 550 
  return;
}


#line 553  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/tulip.h"
__inline static void tulip_restart_rxtx(struct tulip_private *tp)
{
  
#line 555 
  tulip_stop_rxtx(tp);
  
#line 556 
  __const_udelay(21475UL);
  
#line 557 
  tulip_start_rxtx(tp);
  
#line 558 
  return;
}


#line 35  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/media.c"
static unsigned char const comet_miireg2offset[32U] = {(unsigned char)180U, (unsigned char)184U, (unsigned char)188U, (unsigned char)192U, (unsigned char)196U, (unsigned char)200U, (unsigned char)204U, (unsigned char)0U, (unsigned char)0U, (unsigned char)0U, (unsigned char)0U, (unsigned char)0U, (unsigned char)0U, (unsigned char)0U, (unsigned char)0U, (unsigned char)0U, (unsigned char)0U, (unsigned char)208U, (unsigned char)0U, (unsigned char)0U, (unsigned char)0U, (unsigned char)0U, (unsigned char)0U, (unsigned char)0U, (unsigned char)0U, (unsigned char)0U, (unsigned char)0U, (unsigned char)0U, (unsigned char)0U, (unsigned char)212U, (unsigned char)216U, (unsigned char)220U};

#line 47  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/media.c"
int tulip_mdio_read(struct net_device *dev, int phy_id, int location)
{
  int __retres;
  int i;
  unsigned long flags;
  unsigned int tmp_2;
  
#line 49 
  struct tulip_private *tp = netdev_priv((struct net_device const *)dev);
  
#line 51 
  int read_cmd = (((phy_id << 5) & 992) | 251904) | location;
  
#line 52 
  int retval = 0;
  
#line 53 
  void *ioaddr = tp->base_addr;
  
#line 54 
  void *mdio_addr = ioaddr + 72U;
  
#line 57 
  if ((location & -32) != 0) {
    
#line 58 
    __retres = 65535;
    
#line 58 
    goto return_label;
  }
  else ;
  
#line 60 
  if (tp->chip_id == 10 && phy_id == 30) {
    
#line 61 
    if ((unsigned int)comet_miireg2offset[location] != 0U) {
      unsigned int tmp_0;
      
#line 62 
      tmp_0 = ioread32(ioaddr + (int)comet_miireg2offset[location]);
      
#line 62 
      __retres = (int)tmp_0;
      
#line 62 
      goto return_label;
    }
    else ;
    
#line 63 
    __retres = 65535;
    
#line 63 
    goto return_label;
  }
  else ;
  
#line 66 
  ldv___ldv_spin_lock_72(& tp->mii_lock);
  
#line 67 
  if (tp->chip_id == 4) {
    unsigned int tmp_1;
    
#line 68 
    iowrite32((unsigned int)(((phy_id << 23) + 1610743808) + (location << 18)),ioaddr + 160U);
    
#line 69 
    ioread32(ioaddr + 160U);
    
#line 70 
    ioread32(ioaddr + 160U);
    
#line 71 
    i = 1000;
    
#line 71 
    goto ldv_45343;
    ldv_45342: 
#line 72 
    ;
    
#line 73 
    ldv_inline_asm();
    
#line 73 
    tmp_1 = ioread32(ioaddr + 160U);
    
#line 73 
    retval = (int)tmp_1;
    
#line 73 
    if (retval >= 0) 
#line 74 
                     goto ldv_45341; else ;
    
#line 71 
    i -= 1;
    ldv_45343: 
#line 72 
    ;
    
#line 71 
    if (i >= 0) 
#line 73 
                goto ldv_45342; else 
#line 76 
                                     goto ldv_45341;
    ldv_45341: 
#line 77 
    ;
    
#line 76 
    ldv_spin_unlock_irqrestore_73(& tp->mii_lock,flags);
    
#line 77 
    __retres = retval & 65535;
    
#line 77 
    goto return_label;
  }
  else ;
  
#line 81 
  i = 32;
  
#line 81 
  goto ldv_45345;
  ldv_45344: 
#line 82 
  ;
  
#line 82 
  iowrite32(131072U,mdio_addr);
  
#line 83 
  ioread32(mdio_addr);
  
#line 84 
  iowrite32(196608U,mdio_addr);
  
#line 85 
  ioread32(mdio_addr);
  
#line 81 
  i -= 1;
  ldv_45345: 
#line 82 
  ;
  
#line 81 
  if (i >= 0) 
#line 83 
              goto ldv_45344; else 
#line 86 
                                   goto ldv_45346;
  ldv_45346: 
#line 87 
  ;
  
#line 88 
  i = 15;
  
#line 88 
  goto ldv_45349;
  ldv_45348: 
#line 89 
  ;
  {
    
#line 89 
    int dataval = ((read_cmd >> i) << 17) & 131072;
    
#line 91 
    iowrite32((unsigned int)dataval,mdio_addr);
    
#line 92 
    ioread32(mdio_addr);
    
#line 93 
    iowrite32((unsigned int)(dataval | 65536),mdio_addr);
    
#line 94 
    ioread32(mdio_addr);
  }
  
#line 88 
  i -= 1;
  ldv_45349: 
#line 89 
  ;
  
#line 88 
  if (i >= 0) 
#line 90 
              goto ldv_45348; else 
#line 93 
                                   goto ldv_45350;
  ldv_45350: 
#line 94 
  ;
  
#line 97 
  i = 19;
  
#line 97 
  goto ldv_45352;
  ldv_45351: 
#line 98 
  ;
  
#line 98 
  iowrite32(262144U,mdio_addr);
  
#line 99 
  ioread32(mdio_addr);
  
#line 100 
  tmp_2 = ioread32(mdio_addr);
  
#line 100 
  retval = (retval << 1) | ((tmp_2 & 524288U) != 0U);
  
#line 101 
  iowrite32(327680U,mdio_addr);
  
#line 102 
  ioread32(mdio_addr);
  
#line 97 
  i -= 1;
  ldv_45352: 
#line 98 
  ;
  
#line 97 
  if (i > 0) 
#line 99 
             goto ldv_45351; else 
#line 102 
                                  goto ldv_45353;
  ldv_45353: 
#line 103 
  ;
  
#line 105 
  ldv_spin_unlock_irqrestore_74(& tp->mii_lock,flags);
  
#line 106 
  __retres = (retval >> 1) & 65535;
  return_label: 
#line 106 
                return __retres;
}


#line 109  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/media.c"
void tulip_mdio_write(struct net_device *dev, int phy_id, int location, int val)
{
  int i;
  unsigned long flags;
  
#line 111 
  struct tulip_private *tp = netdev_priv((struct net_device const *)dev);
  
#line 113 
  int cmd = ((((phy_id << 23) & 260046848) | 1342308352) | (location << 18)) | (val & 65535);
  
#line 114 
  void *ioaddr = tp->base_addr;
  
#line 115 
  void *mdio_addr = ioaddr + 72U;
  
#line 118 
  if ((location & -32) != 0) 
#line 119 
                             goto return_label; else ;
  
#line 121 
  if (tp->chip_id == 10 && phy_id == 30) {
    
#line 122 
    if ((unsigned int)comet_miireg2offset[location] != 0U) 
#line 123 
                                                           iowrite32((unsigned int)val,ioaddr + (int)comet_miireg2offset[location]); else ;
    
#line 124 
    goto return_label;
  }
  else ;
  
#line 127 
  ldv___ldv_spin_lock_75(& tp->mii_lock);
  
#line 128 
  if (tp->chip_id == 4) {
    unsigned int tmp_0;
    
#line 129 
    iowrite32((unsigned int)cmd,ioaddr + 160U);
    
#line 130 
    i = 1000;
    
#line 130 
    goto ldv_45368;
    ldv_45367: 
#line 131 
    ;
    
#line 132 
    ldv_inline_asm();
    
#line 132 
    tmp_0 = ioread32(ioaddr + 160U);
    
#line 132 
    if (tmp_0 >= (unsigned int)0) 
#line 133 
                                  goto ldv_45366; else ;
    
#line 130 
    i -= 1;
    ldv_45368: 
#line 131 
    ;
    
#line 130 
    if (i >= 0) 
#line 132 
                goto ldv_45367; else 
#line 135 
                                     goto ldv_45366;
    ldv_45366: 
#line 136 
    ;
    
#line 135 
    ldv_spin_unlock_irqrestore_76(& tp->mii_lock,flags);
    
#line 136 
    goto return_label;
  }
  else ;
  
#line 140 
  i = 32;
  
#line 140 
  goto ldv_45370;
  ldv_45369: 
#line 141 
  ;
  
#line 141 
  iowrite32(131072U,mdio_addr);
  
#line 142 
  ioread32(mdio_addr);
  
#line 143 
  iowrite32(196608U,mdio_addr);
  
#line 144 
  ioread32(mdio_addr);
  
#line 140 
  i -= 1;
  ldv_45370: 
#line 141 
  ;
  
#line 140 
  if (i >= 0) 
#line 142 
              goto ldv_45369; else 
#line 145 
                                   goto ldv_45371;
  ldv_45371: 
#line 146 
  ;
  
#line 147 
  i = 31;
  
#line 147 
  goto ldv_45374;
  ldv_45373: 
#line 148 
  ;
  {
    
#line 148 
    int dataval = ((cmd >> i) << 17) & 131072;
    
#line 149 
    iowrite32((unsigned int)dataval,mdio_addr);
    
#line 150 
    ioread32(mdio_addr);
    
#line 151 
    iowrite32((unsigned int)(dataval | 65536),mdio_addr);
    
#line 152 
    ioread32(mdio_addr);
  }
  
#line 147 
  i -= 1;
  ldv_45374: 
#line 148 
  ;
  
#line 147 
  if (i >= 0) 
#line 149 
              goto ldv_45373; else 
#line 152 
                                   goto ldv_45375;
  ldv_45375: 
#line 153 
  ;
  
#line 155 
  i = 2;
  
#line 155 
  goto ldv_45377;
  ldv_45376: 
#line 156 
  ;
  
#line 156 
  iowrite32(262144U,mdio_addr);
  
#line 157 
  ioread32(mdio_addr);
  
#line 158 
  iowrite32(327680U,mdio_addr);
  
#line 159 
  ioread32(mdio_addr);
  
#line 155 
  i -= 1;
  ldv_45377: 
#line 156 
  ;
  
#line 155 
  if (i > 0) 
#line 157 
             goto ldv_45376; else 
#line 160 
                                  goto ldv_45378;
  ldv_45378: 
#line 161 
  ;
  
#line 162 
  ldv_spin_unlock_irqrestore_77(& tp->mii_lock,flags);
  return_label: 
#line 163 
                return;
}


#line 167  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/media.c"
void tulip_select_media(struct net_device *dev, int startup)
{
  u32 new_csr6;
  int i;
  
#line 169 
  struct tulip_private *tp = netdev_priv((struct net_device const *)dev);
  
#line 170 
  void *ioaddr = tp->base_addr;
  
#line 171 
  struct mediatable *mtable = tp->mtable;
  
#line 175 
  if (mtable != (struct mediatable *)0) {
    
#line 176 
    struct medialeaf *mleaf = & mtable->mleaf[tp->cur_index];
    
#line 177 
    unsigned char *p = mleaf->leafdata;
    
#line 178 
    switch ((int)mleaf->type) {
      case 0: 
#line 179 
      ;
      
#line 180 
      if (tulip_debug > 1) {
        
#line 181 
        struct _ddebug descriptor = {.modname = "tulip", .function = "tulip_select_media", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/media.c", .format = "Using a 21140 non-MII transceiver with control setting %02x\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))182U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))1U};
        
#line 181 
        if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 181 
                                                            __dynamic_netdev_dbg(& descriptor,(struct net_device const *)dev,"Using a 21140 non-MII transceiver with control setting %02x\n",(int)*(p + 1U)); else ;
      }
      else ;
      
#line 183 
      dev->if_port = *p;
      
#line 184 
      if (startup != 0) 
#line 185 
                        iowrite32((unsigned int)((int)mtable->csr12dir | 256),ioaddr + 96U); else ;
      
#line 186 
      iowrite32((unsigned int)*(p + 1U),ioaddr + 96U);
      
#line 187 
      new_csr6 = (unsigned int)((((int)*(p + 2U) << 18) & 29622272) | 33554432);
      
#line 188 
      goto ldv_45393;
      case 2: 
#line 189 
      ;
      case 4: 
#line 189 
      ;
      {
        u16 setup[5U];
        u32 csr13val;
        u32 csr14val;
        u32 csr15dir;
        u32 csr15val;
        
#line 192 
        i = 0;
        
#line 192 
        goto ldv_45402;
        ldv_45401: 
#line 193 
        ;
        
#line 193 
        setup[i] = get_unaligned_le16((void const *)(p + ((unsigned int)(i * 2) + 1U)));
        
#line 192 
        i += 1;
        ldv_45402: 
#line 193 
        ;
        
#line 192 
        if (i <= 4) 
#line 194 
                    goto ldv_45401; else 
#line 197 
                                         goto ldv_45403;
        ldv_45403: 
#line 198 
        ;
        
#line 195 
        dev->if_port = (unsigned char)((unsigned int)*p & 31U);
        
#line 196 
        if (((int)tulip_media_cap[(int)dev->if_port] & 2) != 0) 
#line 197 
                                                                tp->full_duplex = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U; else ;
        
#line 199 
        if (startup != 0 && (unsigned int)*((unsigned char *)mtable + 4UL) != 0U) {
          u16 tmp_0;
          
#line 200 
          struct medialeaf *rleaf = & mtable->mleaf[(int)mtable->has_reset];
          
#line 201 
          unsigned char *rst = rleaf->leafdata;
          
#line 202 
          if (tulip_debug > 1) {
            
#line 203 
            struct _ddebug descriptor_0 = {.modname = "tulip", .function = "tulip_select_media", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/media.c", .format = "Resetting the transceiver\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))203U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))1U};
            
#line 203 
            if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 203 
                                                                  __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)dev,"Resetting the transceiver\n"); else ;
          }
          else ;
          
#line 204 
          i = 0;
          
#line 204 
          goto ldv_45408;
          ldv_45407: 
#line 205 
          ;
          
#line 205 
          ;
          
#line 205 
          tmp_0 = get_unaligned_le16((void const *)(rst + ((unsigned int)(i << 1) + 1U)));
          
#line 205 
          iowrite32((unsigned int)((int)tmp_0 << 16),ioaddr + 120U);
          
#line 204 
          i += 1;
          ldv_45408: 
#line 205 
          ;
          
#line 204 
          if ((int)*rst > i) 
#line 206 
                             goto ldv_45407; else 
#line 209 
                                                  goto ldv_45409;
          ldv_45409: 
#line 210 
          ;
        }
        else ;
        
#line 207 
        if (tulip_debug > 1) {
          
#line 208 
          struct _ddebug descriptor_1 = {.modname = "tulip", .function = "tulip_select_media", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/media.c", .format = "21143 non-MII %s transceiver control %04x/%04x\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))210U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))1U};
          
#line 208 
          if ((long)(((int)descriptor_1.flags & 1) != 0) != 0L) 
#line 208 
                                                                __dynamic_netdev_dbg(& descriptor_1,(struct net_device const *)dev,"21143 non-MII %s transceiver control %04x/%04x\n",medianame[(int)dev->if_port],(int)setup[0],(int)setup[1]); else ;
        }
        else ;
        
#line 211 
        if (((int)*p & 64) != 0) {
          
#line 212 
          csr13val = (unsigned int)setup[0];
          
#line 213 
          csr14val = (unsigned int)setup[1];
          
#line 214 
          csr15dir = (unsigned int)(((int)setup[3] << 16) | (int)setup[2]);
          
#line 215 
          csr15val = (unsigned int)(((int)setup[4] << 16) | (int)setup[2]);
          
#line 216 
          iowrite32(0U,ioaddr + 104U);
          
#line 217 
          iowrite32(csr14val,ioaddr + 112U);
          
#line 218 
          iowrite32(csr15dir,ioaddr + 120U);
          
#line 219 
          iowrite32(csr15val,ioaddr + 120U);
          
#line 220 
          iowrite32(csr13val,ioaddr + 104U);
        }
        else {
          
#line 222 
          csr13val = 1U;
          
#line 223 
          csr14val = 0U;
          
#line 224 
          csr15dir = (unsigned int)(((int)setup[0] << 16) | 8);
          
#line 225 
          csr15val = (unsigned int)(((int)setup[1] << 16) | 8);
          
#line 226 
          if ((unsigned int)dev->if_port <= 4U) 
#line 227 
                                                csr14val = (unsigned int)t21142_csr14[(int)dev->if_port]; else ;
          
#line 228 
          if (startup != 0) {
            
#line 229 
            iowrite32(0U,ioaddr + 104U);
            
#line 230 
            iowrite32(csr14val,ioaddr + 112U);
          }
          else ;
          
#line 232 
          iowrite32(csr15dir,ioaddr + 120U);
          
#line 233 
          iowrite32(csr15val,ioaddr + 120U);
          
#line 234 
          if (startup != 0) 
#line 234 
                            iowrite32(csr13val,ioaddr + 104U); else ;
        }
        
#line 236 
        if (tulip_debug > 1) {
          
#line 237 
          struct _ddebug descriptor_2 = {.modname = "tulip", .function = "tulip_select_media", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/media.c", .format = "Setting CSR15 to %08x/%08x\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))238U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))1U};
          
#line 237 
          if ((long)(((int)descriptor_2.flags & 1) != 0) != 0L) 
#line 237 
                                                                __dynamic_netdev_dbg(& descriptor_2,(struct net_device const *)dev,"Setting CSR15 to %08x/%08x\n",csr15dir,csr15val); else ;
        }
        else ;
        
#line 239 
        if ((unsigned int)mleaf->type == 4U) 
#line 240 
                                             new_csr6 = ((unsigned int)((int)setup[2] << 18) & 29622272U) | 2181169152U; else 
                                                                    
#line 242 
                                                                    new_csr6 = 2185363456U;
        
#line 243 
        goto ldv_45393;
      }
      case 1: 
#line 245 
      ;
      case 3: 
#line 245 
      ;
      {
        u16 *misc_info;
        u16 tmp_info;
        
#line 246 
        int phy_num = (int)*p;
        
#line 247 
        int init_length = (int)*(p + 1U);
        
#line 250 
        dev->if_port = (unsigned char)11U;
        
#line 251 
        new_csr6 = 34471936U;
        
#line 252 
        if ((unsigned int)mleaf->type == 3U) {
          u16 tmp_4;
          
#line 253 
          u16 *init_sequence = (u16 *)(p + 2U);
          
#line 254 
          u16 *reset_sequence = (u16 *)(p + 3U) + init_length;
          
#line 255 
          int reset_length = (int)*(p + (init_length + 1) * 2);
          
#line 256 
          misc_info = reset_sequence + reset_length;
          
#line 257 
          if (startup != 0) {
            u16 tmp_1;
            int tmp_2;
            
#line 258 
            int timeout = 10;
            
#line 259 
            i = 0;
            
#line 259 
            goto ldv_45423;
            ldv_45422: 
#line 260 
            ;
            
#line 260 
            ;
            
#line 260 
            tmp_1 = get_unaligned_le16((void const *)(reset_sequence + i));
            
#line 260 
            iowrite32((unsigned int)((int)tmp_1 << 16),ioaddr + 120U);
            
#line 259 
            i += 1;
            ldv_45423: 
#line 260 
            ;
            
#line 259 
            if (i < reset_length) 
#line 261 
                                  goto ldv_45422; else 
#line 264 
                                                       goto ldv_45424;
            ldv_45424: 
#line 265 
            ;
            
#line 263 
            ioread32(ioaddr + 120U);
            
#line 266 
            __const_udelay(2147500UL);
            
#line 270 
            goto ldv_45426;
            ldv_45425: 
#line 271 
            ;
            
#line 272 
            __const_udelay(429500UL);
            ldv_45426: 
#line 274 
            ;
            
#line 270 
            tmp_2 = timeout;
            
#line 270 
            timeout -= 1;
            
#line 270 
            ;
            
#line 270 
            if (tmp_2 != 0) {
              int tmp_3;
              
#line 270 
              tmp_3 = tulip_mdio_read(dev,phy_num,0);
              
#line 270 
              if ((tmp_3 & 32768) != 0) 
#line 272 
                                        goto ldv_45425; else 
#line 275 
                                                             goto ldv_45427;
            }
            else 
#line 275 
                 goto ldv_45427;
            ldv_45427: 
#line 276 
            ;
          }
          else ;
          
#line 274 
          i = 0;
          
#line 274 
          goto ldv_45429;
          ldv_45428: 
#line 275 
          ;
          
#line 275 
          ;
          
#line 275 
          tmp_4 = get_unaligned_le16((void const *)(init_sequence + i));
          
#line 275 
          iowrite32((unsigned int)((int)tmp_4 << 16),ioaddr + 120U);
          
#line 274 
          i += 1;
          ldv_45429: 
#line 275 
          ;
          
#line 274 
          if (i < init_length) 
#line 276 
                               goto ldv_45428; else 
#line 279 
                                                    goto ldv_45430;
          ldv_45430: 
#line 280 
          ;
          
#line 277 
          ioread32(ioaddr + 120U);
        }
        else {
          
#line 279 
          u8 *init_sequence_0 = p + 2U;
          
#line 280 
          u8 *reset_sequence_0 = p + ((unsigned int)init_length + 3U);
          
#line 281 
          int reset_length_0 = (int)*(p + (init_length + 2));
          
#line 282 
          misc_info = (u16 *)(reset_sequence_0 + reset_length_0);
          
#line 283 
          if (startup != 0) {
            int tmp_5;
            
#line 284 
            int timeout_0 = 10;
            
#line 285 
            iowrite32((unsigned int)((int)mtable->csr12dir | 256),ioaddr + 96U);
            
#line 286 
            i = 0;
            
#line 286 
            goto ldv_45436;
            ldv_45435: 
#line 287 
            ;
            
#line 287 
            iowrite32((unsigned int)*(reset_sequence_0 + i),ioaddr + 96U);
            
#line 286 
            i += 1;
            ldv_45436: 
#line 287 
            ;
            
#line 286 
            if (i < reset_length_0) 
#line 288 
                                    goto ldv_45435; else 
#line 291 
                                                         goto ldv_45437;
            ldv_45437: 
#line 292 
            ;
            
#line 290 
            ioread32(ioaddr + 96U);
            
#line 293 
            __const_udelay(2147500UL);
            
#line 297 
            goto ldv_45439;
            ldv_45438: 
#line 298 
            ;
            
#line 299 
            __const_udelay(429500UL);
            ldv_45439: 
#line 301 
            ;
            
#line 297 
            tmp_5 = timeout_0;
            
#line 297 
            timeout_0 -= 1;
            
#line 297 
            ;
            
#line 297 
            if (tmp_5 != 0) {
              int tmp_6;
              
#line 297 
              tmp_6 = tulip_mdio_read(dev,phy_num,0);
              
#line 297 
              if ((tmp_6 & 32768) != 0) 
#line 299 
                                        goto ldv_45438; else 
#line 302 
                                                             goto ldv_45440;
            }
            else 
#line 302 
                 goto ldv_45440;
            ldv_45440: 
#line 303 
            ;
          }
          else ;
          
#line 301 
          i = 0;
          
#line 301 
          goto ldv_45442;
          ldv_45441: 
#line 302 
          ;
          
#line 302 
          iowrite32((unsigned int)*(init_sequence_0 + i),ioaddr + 96U);
          
#line 301 
          i += 1;
          ldv_45442: 
#line 302 
          ;
          
#line 301 
          if (i < init_length) 
#line 303 
                               goto ldv_45441; else 
#line 306 
                                                    goto ldv_45443;
          ldv_45443: 
#line 307 
          ;
          
#line 304 
          ioread32(ioaddr + 96U);
        }
        
#line 307 
        tmp_info = get_unaligned_le16((void const *)(misc_info + 1U));
        
#line 308 
        if ((unsigned int)tmp_info != 0U) 
#line 309 
                                          tp->advertising[phy_num] = (unsigned short)((unsigned int)tmp_info | 1U); else ;
        
#line 310 
        if ((unsigned int)tmp_info != 0U && startup <= 1) {
          
#line 311 
          if ((unsigned int)tp->mii_advertise == 0U) 
#line 312 
                                                     tp->mii_advertise = tp->advertising[phy_num]; else ;
          
#line 313 
          if (tulip_debug > 1) {
            
#line 314 
            struct _ddebug descriptor_3 = {.modname = "tulip", .function = "tulip_select_media", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/media.c", .format = " Advertising %04x on MII %d\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))316U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))1U};
            
#line 314 
            if ((long)(((int)descriptor_3.flags & 1) != 0) != 0L) 
#line 314 
                                                                  __dynamic_netdev_dbg(& descriptor_3,(struct net_device const *)dev," Advertising %04x on MII %d\n",(int)tp->mii_advertise,(int)tp->phys[phy_num]); else ;
          }
          else ;
          
#line 317 
          tulip_mdio_write(dev,(int)tp->phys[phy_num],4,(int)tp->mii_advertise);
        }
        else ;
        
#line 319 
        goto ldv_45393;
      }
      case 5: 
#line 321 
      ;
      case 6: 
#line 321 
      ;
      {
        u16 setup_0[5U];
        
#line 324 
        new_csr6 = 0U;
        
#line 326 
        i = 0;
        
#line 326 
        goto ldv_45449;
        ldv_45448: 
#line 327 
        ;
        
#line 327 
        setup_0[i] = get_unaligned_le16((void const *)(p + ((unsigned int)(i * 2) + 1U)));
        
#line 326 
        i += 1;
        ldv_45449: 
#line 327 
        ;
        
#line 326 
        if (i <= 4) 
#line 328 
                    goto ldv_45448; else 
#line 331 
                                         goto ldv_45450;
        ldv_45450: 
#line 332 
        ;
        
#line 329 
        if (startup != 0 && (unsigned int)*((unsigned char *)mtable + 4UL) != 0U) {
          u16 tmp_7;
          
#line 330 
          struct medialeaf *rleaf_0 = & mtable->mleaf[(int)mtable->has_reset];
          
#line 331 
          unsigned char *rst_0 = rleaf_0->leafdata;
          
#line 332 
          if (tulip_debug > 1) {
            
#line 333 
            struct _ddebug descriptor_4 = {.modname = "tulip", .function = "tulip_select_media", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/media.c", .format = "Resetting the transceiver\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))333U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))1U};
            
#line 333 
            if ((long)(((int)descriptor_4.flags & 1) != 0) != 0L) 
#line 333 
                                                                  __dynamic_netdev_dbg(& descriptor_4,(struct net_device const *)dev,"Resetting the transceiver\n"); else ;
          }
          else ;
          
#line 334 
          i = 0;
          
#line 334 
          goto ldv_45455;
          ldv_45454: 
#line 335 
          ;
          
#line 335 
          ;
          
#line 335 
          tmp_7 = get_unaligned_le16((void const *)(rst_0 + ((unsigned int)(i << 1) + 1U)));
          
#line 335 
          iowrite32((unsigned int)((int)tmp_7 << 16),ioaddr + 120U);
          
#line 334 
          i += 1;
          ldv_45455: 
#line 335 
          ;
          
#line 334 
          if ((int)*rst_0 > i) 
#line 336 
                               goto ldv_45454; else 
#line 339 
                                                    goto ldv_45456;
          ldv_45456: 
#line 340 
          ;
        }
        else ;
        
#line 338 
        goto ldv_45393;
      }
      default: 
#line 340 
      ;
      {
        
#line 341 
        struct _ddebug descriptor_5 = {.modname = "tulip", .function = "tulip_select_media", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/media.c", .format = " Invalid media table selection %d\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))342U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))1U};
        
#line 341 
        if ((long)(((int)descriptor_5.flags & 1) != 0) != 0L) 
#line 341 
                                                              __dynamic_netdev_dbg(& descriptor_5,(struct net_device const *)dev," Invalid media table selection %d\n",(int)mleaf->type); else ;
      }
      
#line 343 
      new_csr6 = 34471936U;
    }
    ldv_45393: 
#line 345 
    ;
    
#line 345 
    if (tulip_debug > 1) {
      
#line 346 
      struct _ddebug descriptor_6 = {.modname = "tulip", .function = "tulip_select_media", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/media.c", .format = "Using media type %s, CSR12 is %02x\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))348U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))1U};
      
#line 346 
      if ((long)(((int)descriptor_6.flags & 1) != 0) != 0L) {
        unsigned int tmp_8;
        
#line 346 
        tmp_8 = ioread32(ioaddr + 96U);
        
#line 346 
        ;
        
#line 346 
        ;
        
#line 346 
        __dynamic_netdev_dbg(& descriptor_6,(struct net_device const *)dev,"Using media type %s, CSR12 is %02x\n",medianame[(int)dev->if_port],tmp_8 & 255U);
      }
      else ;
    }
    else ;
  }
  else 
    
#line 349 
    if (tp->chip_id == 4) {
      
#line 350 
      if (startup != 0 && (unsigned int)*((unsigned char *)tp + 3525UL) == 0U) 
        
#line 351 
        if ((int)tp->mii_cnt != 0) 
#line 351 
                                   dev->if_port = (unsigned char)11U; else 
                                                                    
#line 351 
                                                                    dev->if_port = (unsigned char)0U;
      else ;
      
#line 352 
      if (tulip_debug > 1) {
        
#line 353 
        struct _ddebug descriptor_7 = {.modname = "tulip", .function = "tulip_select_media", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/media.c", .format = "PNIC PHY status is %3.3x, media %s\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))355U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))1U};
        
#line 353 
        if ((long)(((int)descriptor_7.flags & 1) != 0) != 0L) {
          unsigned int tmp_9;
          
#line 353 
          ;
          
#line 353 
          tmp_9 = ioread32(ioaddr + 184U);
          
#line 353 
          ;
          
#line 353 
          __dynamic_netdev_dbg(& descriptor_7,(struct net_device const *)dev,"PNIC PHY status is %3.3x, media %s\n",tmp_9,medianame[(int)dev->if_port]);
        }
        else ;
      }
      else ;
      
#line 356 
      if ((int)tp->mii_cnt != 0) {
        
#line 357 
        new_csr6 = 2165047296U;
        
#line 358 
        iowrite32(1U,ioaddr + 120U);
        
#line 359 
        iowrite32(33665146U,ioaddr + 184U);
      }
      else 
        
#line 360 
        if (startup != 0) {
          
#line 362 
          iowrite32(50U,ioaddr + 96U);
          
#line 363 
          new_csr6 = 4325376U;
          
#line 364 
          iowrite32(110712U,ioaddr + 184U);
          
#line 365 
          iowrite32(33665144U,ioaddr + 184U);
        }
        else 
          
#line 366 
          if ((unsigned int)dev->if_port == 3U || (unsigned int)dev->if_port == 5U) {
            int tmp_10;
            
#line 367 
            iowrite32(51U,ioaddr + 96U);
            
#line 368 
            new_csr6 = 25559040U;
            
#line 370 
            ;
            
#line 370 
            if (startup != 0) 
#line 370 
                              tmp_10 = 33683560; else 
#line 370 
                                                      tmp_10 = 129128;
            
#line 370 
            iowrite32((unsigned int)tmp_10,ioaddr + 184U);
          }
          else {
            
#line 372 
            iowrite32(50U,ioaddr + 96U);
            
#line 373 
            new_csr6 = 4325376U;
            
#line 374 
            iowrite32(127096U,ioaddr + 184U);
          }
    }
    else {
      
#line 377 
      if ((unsigned int)*((unsigned char *)tp + 3524UL) == 0U) 
        
#line 378 
        if ((int)tp->mii_cnt != 0) 
#line 378 
                                   dev->if_port = (unsigned char)11U; else 
                                                                    
#line 378 
                                                                    dev->if_port = (unsigned char)3U;
      else ;
      
#line 379 
      if (((int)tulip_media_cap[(int)dev->if_port] & 4) != 0) 
#line 380 
                                                              new_csr6 = 34471936U;
      else 
        
#line 381 
        if (((int)tulip_media_cap[(int)dev->if_port] & 8) != 0) 
#line 382 
                                                                new_csr6 = 42336256U; else 
                                                                    
#line 384 
                                                                    new_csr6 = 59113472U;
      
#line 385 
      if (tulip_debug > 1) {
        
#line 386 
        struct _ddebug descriptor_8 = {.modname = "tulip", .function = "tulip_select_media", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/media.c", .format = "No media description table, assuming %s transceiver, CSR12 %02x\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))388U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))1U};
        
#line 386 
        if ((long)(((int)descriptor_8.flags & 1) != 0) != 0L) {
          unsigned int tmp_11;
          
#line 386 
          tmp_11 = ioread32(ioaddr + 96U);
          
#line 386 
          ;
          
#line 386 
          ;
          
#line 386 
          __dynamic_netdev_dbg(& descriptor_8,(struct net_device const *)dev,"No media description table, assuming %s transceiver, CSR12 %02x\n",medianame[(int)dev->if_port],tmp_11);
        }
        else ;
      }
      else ;
    }
  
#line 391 
  tp->csr6 = ((tp->csr6 & 65023U) | new_csr6) | ((unsigned int)((int)*((unsigned char *)tp + 3524UL) << 9) & 512U);
  
#line 393 
  if (1) 
#line 393 
         __const_udelay(4295000UL);
  else {
    
#line 393 
    unsigned long __ms = 1UL;
    {
      unsigned long tmp_12;
      
#line 393 
      goto ldv_45464;
      ldv_45463: 
#line 394 
      ;
      
#line 393 
      __const_udelay(4295000UL);
      ldv_45464: 
#line 395 
      ;
      
#line 393 
      tmp_12 = __ms;
      
#line 393 
      __ms -= 1UL;
      
#line 393 
      ;
      
#line 393 
      if (tmp_12 != 0UL) 
#line 395 
                         goto ldv_45463; else 
#line 398 
                                              goto ldv_45465;
      ldv_45465: 
#line 399 
      ;
    }
  }
  
#line 402 
  return;
}


#line 402  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/media.c"
int tulip_check_duplex(struct net_device *dev)
{
  int __retres;
  unsigned int bmsr;
  unsigned int lpa;
  unsigned int negotiated;
  unsigned int new_csr6;
  int tmp_0;
  int tmp_1;
  unsigned int tmp_3;
  
#line 404 
  struct tulip_private *tp = netdev_priv((struct net_device const *)dev);
  
#line 407 
  tmp_0 = tulip_mdio_read(dev,(int)tp->phys[0],1);
  
#line 407 
  bmsr = (unsigned int)tmp_0;
  
#line 408 
  tmp_1 = tulip_mdio_read(dev,(int)tp->phys[0],5);
  
#line 408 
  lpa = (unsigned int)tmp_1;
  
#line 409 
  if (tulip_debug > 1) 
#line 410 
                       _dev_info((struct device const *)(& dev->dev),"MII status %04x, Link partner report %04x\n",bmsr,lpa); else ;
  
#line 412 
  if (bmsr == 65535U) {
    
#line 413 
    __retres = -2;
    
#line 413 
    goto return_label;
  }
  else ;
  
#line 414 
  if ((bmsr & 4U) == 0U) {
    
#line 415 
    int new_bmsr = tulip_mdio_read(dev,(int)tp->phys[0],1);
    
#line 416 
    if ((new_bmsr & 4) == 0) {
      
#line 417 
      if (tulip_debug > 1) 
#line 418 
                           _dev_info((struct device const *)(& dev->dev),"No link beat on the MII interface, status %04x\n",new_bmsr); else ;
      
#line 421 
      __retres = -1;
      
#line 421 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 424 
  negotiated = (unsigned int)tp->advertising[0] & lpa;
  
#line 425 
  tmp_3 = mii_duplex((unsigned int)tp->full_duplex_lock,negotiated);
  
#line 425 
  tp->full_duplex = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))tmp_3;
  
#line 427 
  new_csr6 = tp->csr6;
  
#line 429 
  if ((negotiated & 896U) != 0U) 
#line 429 
                                 new_csr6 &= 4290772991U; else 
#line 430 
                                                               new_csr6 |= 4194304U;
  
#line 431 
  if ((unsigned int)*((unsigned char *)tp + 3524UL) != 0U) 
#line 431 
                                                           new_csr6 |= 512U; else 
                                                                    
#line 432 
                                                                    new_csr6 &= 4294966783U;
  
#line 434 
  if (tp->csr6 != new_csr6) {
    
#line 435 
    tp->csr6 = new_csr6;
    
#line 436 
    tulip_restart_rxtx(tp);
    
#line 438 
    if (tulip_debug > 0) {
      char *tmp_4;
      
#line 439 
      ;
      
#line 439 
      ;
      
#line 439 
      if ((unsigned int)*((unsigned char *)tp + 3524UL) != 0U) 
#line 439 
                                                               tmp_4 = (char *)"full"; else 
                                                                    
#line 439 
                                                                    tmp_4 = (char *)"half";
      
#line 439 
      ;
      
#line 439 
      _dev_info((struct device const *)(& dev->dev),"Setting %s-duplex based on MII#%d link partner capability of %04x\n",tmp_4,(int)tp->phys[0],lpa);
    }
    else ;
    
#line 443 
    __retres = 1;
    
#line 443 
    goto return_label;
  }
  else ;
  
#line 446 
  __retres = 0;
  return_label: 
#line 446 
                return __retres;
}


#line 449  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/media.c"
void tulip_find_mii(struct net_device *dev, int board_idx)
{
  int phyn;
  int mii_reg0;
  int mii_advert;
  unsigned int to_advert;
  unsigned int new_bmcr;
  unsigned int ane_switch;
  
#line 451 
  struct tulip_private *tp = netdev_priv((struct net_device const *)dev);
  
#line 452 
  int phy_idx = 0;
  
#line 460 
  phyn = 1;
  
#line 460 
  goto ldv_45497;
  ldv_45496: 
#line 461 
  ;
  {
    int tmp_3;
    
#line 461 
    int phy = phyn & 31;
    
#line 462 
    int mii_status = tulip_mdio_read(dev,phy,1);
    
#line 463 
    if ((mii_status & 33537) == 32769 || ((mii_status & 32768) == 0 && (mii_status & 30720) != 0)) ; else 
                                                                    
#line 468 
                                                                    goto ldv_45492;
    
#line 471 
    mii_reg0 = tulip_mdio_read(dev,phy,0);
    
#line 472 
    mii_advert = tulip_mdio_read(dev,phy,4);
    
#line 473 
    ane_switch = 0U;
    
#line 479 
    if ((mii_advert & 480) == 0) {
      int tmp_1;
      
#line 480 
      tmp_1 = tulip_mdio_read(dev,phy,1);
      
#line 480 
      unsigned int tmpadv = (unsigned int)tmp_1;
      
#line 481 
      mii_advert = (int)(((tmpadv >> 6) & 992U) | 1U);
    }
    else ;
    
#line 484 
    if ((unsigned int)tp->mii_advertise != 0U) {
      
#line 485 
      to_advert = (unsigned int)tp->mii_advertise;
      
#line 485 
      tp->advertising[phy_idx] = (unsigned short)to_advert;
    }
    else 
      
#line 487 
      if ((unsigned int)tp->advertising[phy_idx] != 0U) 
#line 488 
                                                        to_advert = (unsigned int)tp->advertising[phy_idx];
      else {
        u16 tmp_2;
        
#line 491 
        to_advert = (unsigned int)mii_advert;
        
#line 490 
        tmp_2 = (unsigned short)to_advert;
        
#line 490 
        tp->mii_advertise = tmp_2;
        
#line 490 
        tp->advertising[phy_idx] = tmp_2;
      }
    
#line 495 
    tmp_3 = phy_idx;
    
#line 495 
    phy_idx += 1;
    
#line 495 
    tp->phys[tmp_3] = (signed char)phy;
    
#line 497 
    printk("\001",board_idx,phy,mii_reg0,mii_status,mii_advert);
    
#line 501 
    if ((unsigned int)mii_advert != to_advert) {
      {
        
#line 502 
        struct _ddebug descriptor = {.modname = "tulip", .function = "tulip_find_mii", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/media.c", .format = "tulip%d:  Advertising %04x on PHY %d, previously advertising %04x\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))503U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))1U};
        
#line 502 
        if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 502 
                                                            __dynamic_pr_debug(& descriptor,"tulip%d:  Advertising %04x on PHY %d, previously advertising %04x\n",board_idx,to_advert,phy,mii_advert); else ;
      }
      
#line 504 
      tulip_mdio_write(dev,phy,4,(int)to_advert);
    }
    else ;
    
#line 508 
    if ((unsigned int)*((unsigned char *)tp + 3524UL) == 0U) {
      
#line 509 
      new_bmcr = (unsigned int)(mii_reg0 | 4096);
      
#line 510 
      if (new_bmcr != (unsigned int)mii_reg0) {
        
#line 511 
        new_bmcr |= 512U;
        
#line 512 
        ane_switch = 1U;
      }
      else ;
    }
    else {
      
#line 517 
      new_bmcr = (unsigned int)mii_reg0 & 4294963199U;
      
#line 518 
      if (new_bmcr != (unsigned int)mii_reg0) 
#line 519 
                                              ane_switch = 1U; else ;
    }
    
#line 523 
    new_bmcr &= 4294906495U;
    
#line 527 
    if ((unsigned int)*((unsigned char *)tp + 3524UL) != 0U) 
#line 528 
                                                             new_bmcr |= 256U; else ;
    
#line 529 
    if (((int)tulip_media_cap[(int)tp->default_port] & 16) != 0) 
#line 530 
                                                                 new_bmcr |= 8192U; else ;
    
#line 532 
    if (new_bmcr != (unsigned int)mii_reg0) {
      
#line 539 
      if (ane_switch != 0U) {
        
#line 540 
        tulip_mdio_write(dev,phy,0,(int)new_bmcr);
        
#line 541 
        __const_udelay(42950UL);
      }
      else ;
      
#line 543 
      tulip_mdio_write(dev,phy,0,(int)new_bmcr);
    }
    else ;
  }
  ldv_45492: 
#line 546 
  ;
  
#line 460 
  phyn += 1;
  ldv_45497: 
#line 461 
  ;
  
#line 460 
  if (phyn <= 32 && (unsigned int)phy_idx <= 3U) 
#line 462 
                                                 goto ldv_45496; else 
                                                                   
#line 465 
                                                                   goto ldv_45498;
  ldv_45498: 
#line 466 
  ;
  
#line 546 
  tp->mii_cnt = (signed char)phy_idx;
  
#line 547 
  if ((tp->mtable != (struct mediatable *)0 && (unsigned int)*((unsigned char *)tp->mtable + 4UL) != 0U) && phy_idx == 0) {
    
#line 548 
    printk("\001",board_idx);
    
#line 550 
    tp->phys[0] = (signed char)1;
  }
  else ;
  
#line 552 
  return;
}


#line 738  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/weaver/.tmp_media.c.aux"
static void ldv___ldv_spin_lock_72(spinlock_t *ldv_func_arg1)
{
  
#line 742 
  ldv_spin_model_lock((char *)"mii_lock_of_tulip_private");
  
#line 744 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 745 
  return;
}


#line 748  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/weaver/.tmp_media.c.aux"
static void ldv_spin_unlock_irqrestore_73(spinlock_t *lock, unsigned long flags)
{
  
#line 752 
  ldv_spin_model_unlock((char *)"mii_lock_of_tulip_private");
  
#line 754 
  spin_unlock_irqrestore(lock,flags);
  
#line 755 
  return;
}


#line 758  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/weaver/.tmp_media.c.aux"
static void ldv_spin_unlock_irqrestore_74(spinlock_t *lock, unsigned long flags)
{
  
#line 762 
  ldv_spin_model_unlock((char *)"mii_lock_of_tulip_private");
  
#line 764 
  spin_unlock_irqrestore(lock,flags);
  
#line 765 
  return;
}


#line 768  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/weaver/.tmp_media.c.aux"
static void ldv___ldv_spin_lock_75(spinlock_t *ldv_func_arg1)
{
  
#line 772 
  ldv_spin_model_lock((char *)"mii_lock_of_tulip_private");
  
#line 774 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 775 
  return;
}


#line 778  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/weaver/.tmp_media.c.aux"
static void ldv_spin_unlock_irqrestore_76(spinlock_t *lock, unsigned long flags)
{
  
#line 782 
  ldv_spin_model_unlock((char *)"mii_lock_of_tulip_private");
  
#line 784 
  spin_unlock_irqrestore(lock,flags);
  
#line 785 
  return;
}


#line 788  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/weaver/.tmp_media.c.aux"
static void ldv_spin_unlock_irqrestore_77(spinlock_t *lock, unsigned long flags)
{
  
#line 792 
  ldv_spin_model_unlock((char *)"mii_lock_of_tulip_private");
  
#line 794 
  spin_unlock_irqrestore(lock,flags);
  
#line 795 
  return;
}


#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock_api_smp.h"
void _raw_spin_lock(raw_spinlock_t *);


#line 31 
void _raw_spin_lock_irq(raw_spinlock_t *);


#line 41 
void _raw_spin_unlock(raw_spinlock_t *);


#line 43 
void _raw_spin_unlock_irq(raw_spinlock_t *);


#line 310  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_lock(spinlock_t *lock)
{
  
#line 312 
  _raw_spin_lock(& lock->__anonCompField_spinlock_18.rlock);
  
#line 313 
  return;
}


#line 358 
static void ldv_spin_lock_72(spinlock_t *lock);


#line 344  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_lock_irq(spinlock_t *lock)
{
  
#line 346 
  _raw_spin_lock_irq(& lock->__anonCompField_spinlock_18.rlock);
  
#line 347 
  return;
}


#line 366 
static void ldv_spin_lock_irq_74(spinlock_t *lock);


#line 367  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_unlock(spinlock_t *lock)
{
  
#line 369 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_18.rlock);
  
#line 370 
  return;
}


#line 411 
static void ldv_spin_unlock_73(spinlock_t *lock);


#line 437  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_unlock_irq(spinlock_t *lock)
{
  
#line 439 
  _raw_spin_unlock_irq(& lock->__anonCompField_spinlock_18.rlock);
  
#line 440 
  return;
}


#line 453 
static void ldv_spin_unlock_irq_75(spinlock_t *lock);


#line 78  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/jiffies.h"
extern unsigned long volatile jiffies;


#line 173  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timer.h"
static int ldv_mod_timer_76(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2);


#line 192  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/interrupt.h"
void disable_irq(unsigned int);


#line 194 
void enable_irq(unsigned int);


#line 3043  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
unsigned long dev_trans_start(struct net_device *);


#line 491  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/tulip.h"
int tulip_refill_rx(struct net_device *dev);


#line 505 
void pnic_do_nway(struct net_device *dev);


#line 506 
void pnic_lnk_change(struct net_device *dev, int csr5);


#line 507 
void pnic_timer(unsigned long data);


#line 518 
struct tulip_chip_table tulip_tbl[15U];


#line 530  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/tulip.h"
__inline static void tulip_stop_rxtx_0(struct tulip_private *tp)
{
  
#line 532 
  void *ioaddr = tp->base_addr;
  
#line 533 
  u32 csr6 = ioread32(ioaddr + 48U);
  
#line 535 
  if ((csr6 & 8194U) != 0U) {
    
#line 536 
    unsigned int i = 130U;
    
#line 537 
    iowrite32(csr6 & 4294959101U,ioaddr + 48U);
    
#line 538 
    ldv_inline_asm();
    
#line 543 
    goto ldv_45303;
    ldv_45302: 
#line 544 
    ;
    
#line 544 
    __const_udelay(42950UL);
    ldv_45303: 
#line 546 
    ;
    
#line 543 
    i -= 1U;
    
#line 543 
    if (i != 0U) {
      unsigned int tmp_0;
      
#line 543 
      tmp_0 = ioread32(ioaddr + 40U);
      
#line 543 
      if ((tmp_0 & 8257536U) != 0U) 
#line 545 
                                    goto ldv_45302; else 
#line 548 
                                                         goto ldv_45304;
    }
    else 
#line 548 
         goto ldv_45304;
    ldv_45304: 
#line 549 
    ;
    
#line 546 
    if (i == 0U) {
      
#line 547 
      struct _ddebug descriptor = {.modname = "tulip", .function = "tulip_stop_rxtx", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/tulip.h", .format = "tulip_stop_rxtx() failed (CSR5 0x%x CSR6 0x%x)\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))549U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))1U};
      
#line 547 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
        unsigned int tmp_1;
        unsigned int tmp_2;
        
#line 547 
        tmp_1 = ioread32(ioaddr + 48U);
        
#line 547 
        tmp_2 = ioread32(ioaddr + 40U);
        
#line 547 
        ;
        
#line 547 
        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)tp->dev,"tulip_stop_rxtx() failed (CSR5 0x%x CSR6 0x%x)\n",tmp_2,tmp_1);
      }
      else ;
    }
    else ;
  }
  else ;
  
#line 550 
  return;
}


#line 553  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/tulip.h"
__inline static void tulip_restart_rxtx_0(struct tulip_private *tp)
{
  
#line 555 
  tulip_stop_rxtx_0(tp);
  
#line 556 
  __const_udelay(21475UL);
  
#line 557 
  tulip_start_rxtx(tp);
  
#line 558 
  return;
}


#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/pnic.c"
void pnic_do_nway(struct net_device *dev)
{
  
#line 21 
  struct tulip_private *tp = netdev_priv((struct net_device const *)dev);
  
#line 22 
  void *ioaddr = tp->base_addr;
  
#line 23 
  u32 phy_reg = ioread32(ioaddr + 184U);
  
#line 24 
  u32 new_csr6 = tp->csr6 & 3208379903U;
  
#line 26 
  if ((phy_reg & 2013265920U) != 0U) {
    int tmp_1;
    
#line 27 
    if ((phy_reg & 536870912U) != 0U) 
#line 27 
                                      dev->if_port = (unsigned char)5U;
    else 
      
#line 28 
      if ((phy_reg & 1073741824U) != 0U) 
#line 28 
                                         dev->if_port = (unsigned char)3U;
      else 
        
#line 29 
        if ((phy_reg & 268435456U) != 0U) 
#line 29 
                                          dev->if_port = (unsigned char)4U;
        else 
          
#line 30 
          if ((phy_reg & 134217728U) != 0U) 
#line 30 
                                            dev->if_port = (unsigned char)0U; else ;
    
#line 31 
    tp->nwayset = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U;
    
#line 32 
    if (((int)dev->if_port & 1) != 0) 
#line 32 
                                      tmp_1 = 25559040; else 
#line 32 
                                                             tmp_1 = 4325376;
    
#line 32 
    new_csr6 = (unsigned int)tmp_1;
    
#line 33 
    iowrite32((unsigned int)(((int)dev->if_port & 1) | 50),ioaddr + 96U);
    
#line 34 
    if (((int)dev->if_port & 1) != 0) 
#line 35 
                                      iowrite32(129128U,ioaddr + 184U); else ;
    
#line 36 
    if ((phy_reg & 805306368U) != 0U) {
      
#line 37 
      tp->full_duplex = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U;
      
#line 38 
      new_csr6 |= 512U;
    }
    else ;
    
#line 40 
    if (tulip_debug > 1) {
      
#line 41 
      struct _ddebug descriptor = {.modname = "tulip", .function = "pnic_do_nway", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/pnic.c", .format = "PNIC autonegotiated status %08x, %s\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))42U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))1U};
      
#line 41 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 41 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)dev,"PNIC autonegotiated status %08x, %s\n",phy_reg,medianame[(int)dev->if_port]); else ;
    }
    else ;
    
#line 43 
    if (tp->csr6 != new_csr6) {
      
#line 44 
      tp->csr6 = new_csr6;
      
#line 46 
      tulip_restart_rxtx_0(tp);
      
#line 47 
      dev->trans_start = jiffies;
    }
    else ;
  }
  else ;
  
#line 50 
  return;
}


#line 52  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/pnic.c"
void pnic_lnk_change(struct net_device *dev, int csr5)
{
  unsigned int tmp_0;
  unsigned int tmp_7;
  
#line 54 
  struct tulip_private *tp = netdev_priv((struct net_device const *)dev);
  
#line 55 
  void *ioaddr = tp->base_addr;
  
#line 56 
  tmp_0 = ioread32(ioaddr + 184U);
  
#line 56 
  int phy_reg = (int)tmp_0;
  
#line 58 
  if (tulip_debug > 1) {
    
#line 59 
    struct _ddebug descriptor = {.modname = "tulip", .function = "pnic_lnk_change", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/pnic.c", .format = "PNIC link changed state %08x, CSR5 %08x\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))60U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))1U};
    
#line 59 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 59 
                                                        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)dev,"PNIC link changed state %08x, CSR5 %08x\n",phy_reg,csr5); else ;
  }
  else ;
  
#line 61 
  tmp_7 = ioread32(ioaddr + 40U);
  
#line 61 
  if ((tmp_7 & 4096U) != 0U) {
    unsigned int tmp_1;
    
#line 62 
    ;
    
#line 62 
    tmp_1 = ioread32(ioaddr + 56U);
    
#line 62 
    iowrite32((tmp_1 & 4294963183U) | 16U,ioaddr + 56U);
    
#line 66 
    if (((int)tulip_media_cap[(int)dev->if_port] & 4) != 0) 
#line 67 
                                                            goto return_label; else ;
    
#line 68 
    if ((unsigned int)*((unsigned char *)tp + 3525UL) == 0U) 
#line 68 
                                                             goto _LOR;
    else {
      int tmp_2;
      {
        unsigned long __dummy;
        unsigned long volatile __dummy2;
        
#line 68 
        tmp_2 = 1;
      }
      
#line 68 
      if (tmp_2 != 0) {
        int tmp_3;
        {
          unsigned long __dummy_0;
          unsigned long __dummy2_0;
          
#line 68 
          tmp_3 = 1;
        }
        
#line 68 
        if (tmp_3 != 0) {
          unsigned long tmp_4;
          
#line 68 
          tmp_4 = dev_trans_start(dev);
          
#line 68 
          ;
          
#line 68 
          if ((long)((tmp_4 - jiffies) + 250UL) < 0L) {
            _LOR: {
                    
#line 69 
                    tp->csr6 = (tp->csr6 & 65023U) | 4325376U;
                    
#line 70 
                    iowrite32(tp->csr6,ioaddr + 48U);
                    
#line 71 
                    iowrite32(48U,ioaddr + 96U);
                    
#line 72 
                    iowrite32(33681528U,ioaddr + 184U);
                    
#line 73 
                    dev->trans_start = jiffies;
                  }
          }
          else ;
        }
        else ;
      }
      else ;
    }
  }
  else {
    unsigned int tmp_6;
    
#line 75 
    tmp_6 = ioread32(ioaddr + 40U);
    
#line 75 
    if ((tmp_6 & 16U) != 0U) {
      unsigned int tmp_5;
      
#line 76 
      if (((int)tulip_media_cap[(int)dev->if_port] & 4) != 0) {
        
#line 77 
        ldv_spin_lock_72(& tp->lock);
        
#line 78 
        tulip_check_duplex(dev);
        
#line 79 
        ldv_spin_unlock_73(& tp->lock);
      }
      else 
#line 81 
           pnic_do_nway(dev);
      
#line 83 
      ;
      
#line 83 
      tmp_5 = ioread32(ioaddr + 56U);
      
#line 83 
      iowrite32((tmp_5 & 4294963183U) | 4096U,ioaddr + 56U);
    }
    else ;
  }
  return_label: 
#line 85 
                return;
}


#line 87  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/pnic.c"
void pnic_timer(unsigned long data)
{
  unsigned int tmp_0;
  unsigned int tmp_8;
  
#line 89 
  struct net_device *dev = (struct net_device *)data;
  
#line 90 
  struct tulip_private *tp = netdev_priv((struct net_device const *)dev);
  
#line 91 
  void *ioaddr = tp->base_addr;
  
#line 92 
  int next_tick = 15000;
  
#line 94 
  tmp_0 = ioread32(ioaddr + 56U);
  
#line 94 
  if (tmp_0 == 0U) 
#line 100 
                   goto too_good_connection; else ;
  
#line 103 
  if (((int)tulip_media_cap[(int)dev->if_port] & 4) != 0) {
    int tmp_1;
    
#line 104 
    ldv_spin_lock_irq_74(& tp->lock);
    
#line 105 
    tmp_1 = tulip_check_duplex(dev);
    
#line 105 
    if (tmp_1 > 0) 
#line 106 
                   next_tick = 750; else ;
    
#line 107 
    ldv_spin_unlock_irq_75(& tp->lock);
  }
  else {
    unsigned int tmp_2;
    unsigned int tmp_3;
    unsigned int tmp_4;
    
#line 109 
    tmp_2 = ioread32(ioaddr + 96U);
    
#line 109 
    int csr12 = (int)tmp_2;
    
#line 110 
    int new_csr6 = (int)tp->csr6 & -1086587393;
    
#line 111 
    tmp_3 = ioread32(ioaddr + 184U);
    
#line 111 
    int phy_reg = (int)tmp_3;
    
#line 112 
    tmp_4 = ioread32(ioaddr + 40U);
    
#line 112 
    int csr5 = (int)tmp_4;
    
#line 114 
    if (tulip_debug > 1) {
      
#line 115 
      struct _ddebug descriptor = {.modname = "tulip", .function = "pnic_timer", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/pnic.c", .format = "PNIC timer PHY status %08x, %s CSR5 %08x\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))116U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))1U};
      
#line 115 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 115 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)dev,"PNIC timer PHY status %08x, %s CSR5 %08x\n",phy_reg,medianame[(int)dev->if_port],csr5); else ;
    }
    else ;
    
#line 117 
    if ((phy_reg & 67108864) != 0) {
      
#line 118 
      iowrite32(33681528U,ioaddr + 184U);
      
#line 119 
      next_tick = 250;
      
#line 120 
      tp->nwayset = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U;
    }
    else 
      
#line 121 
      if ((phy_reg & 2013265920) != 0) {
        
#line 122 
        pnic_do_nway(dev);
        
#line 123 
        next_tick = 15000;
      }
      else 
        
#line 124 
        if ((csr5 & 4096) != 0) {
          
#line 125 
          if (tulip_debug > 1) {
            
#line 126 
            struct _ddebug descriptor_0 = {.modname = "tulip", .function = "pnic_timer", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/pnic.c", .format = "%s link beat failed, CSR12 %04x, CSR5 %08x, PHY %03x\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))130U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))1U};
            
#line 126 
            if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) {
              unsigned int tmp_5;
              unsigned int tmp_6;
              
#line 126 
              tmp_5 = ioread32(ioaddr + 184U);
              
#line 126 
              tmp_6 = ioread32(ioaddr + 40U);
              
#line 126 
              ;
              
#line 126 
              ;
              
#line 126 
              ;
              
#line 126 
              __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)dev,"%s link beat failed, CSR12 %04x, CSR5 %08x, PHY %03x\n",medianame[(int)dev->if_port],csr12,tmp_6,tmp_5);
            }
            else ;
          }
          else ;
          
#line 131 
          next_tick = 750;
          
#line 132 
          if ((unsigned int)*((unsigned char *)tp + 3525UL) != 0U) ;
          else 
            
#line 133 
            if ((unsigned int)*((unsigned char *)tp + 3525UL) != 0U && ((int)dev->if_port & 1) != 0) 
              
#line 134 
              next_tick = 250;
            else 
              
#line 135 
              if ((unsigned int)dev->if_port == 0U) {
                
#line 136 
                dev->if_port = (unsigned char)3U;
                
#line 137 
                iowrite32(51U,ioaddr + 96U);
                
#line 138 
                new_csr6 = 25559040;
                
#line 139 
                iowrite32(129128U,ioaddr + 184U);
              }
              else {
                
#line 141 
                dev->if_port = (unsigned char)0U;
                
#line 142 
                iowrite32(50U,ioaddr + 96U);
                
#line 143 
                new_csr6 = 4325376;
                
#line 144 
                iowrite32(127096U,ioaddr + 184U);
              }
          
#line 146 
          if (tp->csr6 != (unsigned int)new_csr6) {
            
#line 147 
            tp->csr6 = (unsigned int)new_csr6;
            
#line 149 
            tulip_restart_rxtx_0(tp);
            
#line 150 
            dev->trans_start = jiffies;
            
#line 151 
            if (tulip_debug > 1) {
              char *tmp_7;
              
#line 152 
              ;
              
#line 152 
              if ((unsigned int)*((unsigned char *)tp + 3524UL) != 0U) 
                
#line 152 
                tmp_7 = (char *)"full"; else 
#line 152 
                                             tmp_7 = (char *)"half";
              
#line 152 
              ;
              
#line 152 
              ;
              
#line 152 
              _dev_info((struct device const *)(& dev->dev),"Changing PNIC configuration to %s %s-duplex, CSR6 %08x\n",medianame[(int)dev->if_port],tmp_7,new_csr6);
            }
            else ;
          }
          else ;
        }
        else ;
  }
  too_good_connection: 
#line 160 
  ;
  
#line 161 
  ldv_mod_timer_76(& tp->timer,(unsigned long)next_tick + jiffies);
  
#line 162 
  tmp_8 = ioread32(ioaddr + 56U);
  
#line 162 
  if (tmp_8 == 0U) {
    
#line 163 
    if (tulip_debug > 1) 
#line 164 
                         _dev_info((struct device const *)(& dev->dev),"sw timer wakeup\n"); else ;
    
#line 165 
    disable_irq((unsigned int)dev->irq);
    
#line 166 
    tulip_refill_rx(dev);
    
#line 167 
    enable_irq((unsigned int)dev->irq);
    
#line 168 
    iowrite32((unsigned int)tulip_tbl[tp->chip_id].valid_intrs,ioaddr + 56U);
  }
  else ;
  
#line 170 
  return;
}


#line 64  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/weaver/.tmp_pnic.c.aux"
int ldv_emg_mod_timer(struct timer_list *arg0, unsigned long arg1);


#line 738  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/weaver/.tmp_pnic.c.aux"
static void ldv_spin_lock_72(spinlock_t *lock)
{
  
#line 742 
  ldv_spin_model_lock((char *)"lock_of_tulip_private");
  
#line 744 
  spin_lock(lock);
  
#line 745 
  return;
}


#line 748  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/weaver/.tmp_pnic.c.aux"
static void ldv_spin_unlock_73(spinlock_t *lock)
{
  
#line 752 
  ldv_spin_model_unlock((char *)"lock_of_tulip_private");
  
#line 754 
  spin_unlock(lock);
  
#line 755 
  return;
}


#line 758  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/weaver/.tmp_pnic.c.aux"
static void ldv_spin_lock_irq_74(spinlock_t *lock)
{
  
#line 762 
  ldv_spin_model_lock((char *)"lock_of_tulip_private");
  
#line 764 
  spin_lock_irq(lock);
  
#line 765 
  return;
}


#line 768  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/weaver/.tmp_pnic.c.aux"
static void ldv_spin_unlock_irq_75(spinlock_t *lock)
{
  
#line 772 
  ldv_spin_model_unlock((char *)"lock_of_tulip_private");
  
#line 774 
  spin_unlock_irq(lock);
  
#line 775 
  return;
}


#line 778  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/weaver/.tmp_pnic.c.aux"
static int ldv_mod_timer_76(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2)
{
  int tmp;
  
#line 782 
  tmp = ldv_emg_mod_timer(ldv_func_arg1,ldv_func_arg2);
  
#line 782 
  return tmp;
}

void __builtin_unreachable(void);


#line 204  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/bitops.h"
__inline static int test_and_set_bit(long nr, unsigned long volatile *addr)
{
  int __retres;
  
#line 206 
  ldv_inline_asm();
  
#line 207 
  ldv_inline_asm();
  
#line 206 
  __retres = 0;
  
#line 206 
  goto return_label;
  cc_label: 
#line 206 
  ;
  
#line 206 
  __retres = 1;
  return_label: 
#line 206 
                return __retres;
}


#line 308  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/bitops.h"
__inline static int constant_test_bit(long nr, unsigned long const volatile *addr)
{
  int __retres;
  
#line 311 
  __retres = ((*(addr + (nr >> 6)) >> (nr & 63L)) & 1UL) != 0UL;
  
#line 311 
  return __retres;
}


#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/page_64.h"
unsigned long __phys_addr(unsigned long);


#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/string_64.h"
void *memcpy(void *, void const *, size_t);


#line 310  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_lock_0(spinlock_t *lock)
{
  
#line 312 
  _raw_spin_lock(& lock->__anonCompField_spinlock_18.rlock);
  
#line 313 
  return;
}


#line 358 
static void ldv_spin_lock_73(spinlock_t *lock);


#line 363  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_unlock_0(spinlock_t *lock)
{
  
#line 365 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_18.rlock);
  
#line 366 
  return;
}


#line 407 
static void ldv_spin_unlock_74(spinlock_t *lock);


#line 173  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timer.h"
static int ldv_mod_timer_72(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2);


#line 177 
static int ldv_mod_timer_75(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2);


#line 1083  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
void dev_err(struct device const *, char const * , ...);


#line 1085 
void dev_warn(struct device const *, char const * , ...);


#line 73  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dma-mapping.h"
__inline static int valid_dma_direction(int dma_direction)
{
  int __retres;
  
#line 76 
  __retres = (unsigned int)dma_direction <= 2U;
  
#line 76 
  return __retres;
}


#line 131  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kmemcheck.h"
__inline static void kmemcheck_mark_initialized(void *address, unsigned int n)
{
  
#line 133 
  return;
}


#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dma-debug.h"
void debug_dma_map_page(struct device *, struct page *, size_t, size_t, int, dma_addr_t, bool);


#line 42 
void debug_dma_mapping_error(struct device *, dma_addr_t);


#line 44 
void debug_dma_unmap_page(struct device *, dma_addr_t, size_t, int, bool);


#line 59 
void debug_dma_sync_single_for_cpu(struct device *, dma_addr_t, size_t, int);


#line 63 
void debug_dma_sync_single_for_device(struct device *, dma_addr_t, size_t, int);


#line 30  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/dma-mapping.h"
extern struct dma_map_ops *dma_ops;


#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/dma-mapping.h"
__inline static struct dma_map_ops *get_dma_ops(struct device *dev)
{
  struct dma_map_ops *__retres;
  
#line 37 
  if ((long)(dev == (struct device *)0) != 0L || dev->archdata.dma_ops == (struct dma_map_ops *)0) {
    
#line 38 
    __retres = dma_ops;
    
#line 38 
    goto return_label;
  }
  else {
    
#line 40 
    __retres = dev->archdata.dma_ops;
    
#line 40 
    goto return_label;
  }
  return_label: 
#line 37 
                return __retres;
}


#line 10  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/dma-mapping-common.h"
__inline static dma_addr_t dma_map_single_attrs(struct device *dev, void *ptr, size_t size, enum dma_data_direction dir, struct dma_attrs *attrs)
{
  dma_addr_t addr;
  int tmp_0;
  unsigned long tmp_1;
  unsigned long tmp_2;
  
#line 15 
  struct dma_map_ops *ops_0 = get_dma_ops(dev);
  
#line 18 
  kmemcheck_mark_initialized(ptr,(unsigned int)size);
  
#line 19 
  tmp_0 = valid_dma_direction((int)dir);
  
#line 19 
  if ((long)(tmp_0 == 0) != 0L) {
    
#line 21 
    ldv_inline_asm();
    
#line 19 
    ;
  }
  else ;
  
#line 20 
  ;
  
#line 20 
  ;
  
#line 20 
  ;
  
#line 20 
  ;
  
#line 20 
  tmp_1 = __phys_addr((unsigned long)ptr);
  
#line 20 
  ;
  
#line 20 
  addr = (*(ops_0->map_page))(dev,(struct page *)(-24189255811072) + (tmp_1 >> 12),(unsigned long)ptr & 4095UL,size,dir,attrs);
  
#line 23 
  ;
  
#line 23 
  ;
  
#line 23 
  ;
  
#line 23 
  ;
  
#line 23 
  tmp_2 = __phys_addr((unsigned long)ptr);
  
#line 23 
  ;
  
#line 23 
  debug_dma_map_page(dev,(struct page *)(-24189255811072) + (tmp_2 >> 12),(unsigned long)ptr & 4095UL,size,(int)dir,addr,(_Bool)1);
  
#line 26 
  return addr;
}


#line 29  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/dma-mapping-common.h"
__inline static void dma_unmap_single_attrs(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir, struct dma_attrs *attrs)
{
  int tmp_0;
  
#line 34 
  struct dma_map_ops *ops_0 = get_dma_ops(dev);
  
#line 36 
  tmp_0 = valid_dma_direction((int)dir);
  
#line 36 
  if ((long)(tmp_0 == 0) != 0L) {
    
#line 38 
    ldv_inline_asm();
    
#line 36 
    ;
  }
  else ;
  
#line 37 
  if (ops_0->unmap_page != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *))0) 
    
#line 38 
    (*(ops_0->unmap_page))(dev,addr,size,dir,attrs); else ;
  
#line 39 
  debug_dma_unmap_page(dev,addr,size,(int)dir,(_Bool)1);
  
#line 40 
  return;
}


#line 102  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/dma-mapping-common.h"
__inline static void dma_sync_single_for_cpu(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir)
{
  int tmp_0;
  
#line 106 
  struct dma_map_ops *ops_0 = get_dma_ops(dev);
  
#line 108 
  tmp_0 = valid_dma_direction((int)dir);
  
#line 108 
  if ((long)(tmp_0 == 0) != 0L) {
    
#line 110 
    ldv_inline_asm();
    
#line 108 
    ;
  }
  else ;
  
#line 109 
  if (ops_0->sync_single_for_cpu != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ))0) 
    
#line 110 
    (*(ops_0->sync_single_for_cpu))(dev,addr,size,dir); else ;
  
#line 111 
  debug_dma_sync_single_for_cpu(dev,addr,size,(int)dir);
  
#line 112 
  return;
}


#line 114  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/dma-mapping-common.h"
__inline static void dma_sync_single_for_device(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir)
{
  int tmp_0;
  
#line 118 
  struct dma_map_ops *ops_0 = get_dma_ops(dev);
  
#line 120 
  tmp_0 = valid_dma_direction((int)dir);
  
#line 120 
  if ((long)(tmp_0 == 0) != 0L) {
    
#line 122 
    ldv_inline_asm();
    
#line 120 
    ;
  }
  else ;
  
#line 121 
  if (ops_0->sync_single_for_device != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ))0) 
    
#line 122 
    (*(ops_0->sync_single_for_device))(dev,addr,size,dir); else ;
  
#line 123 
  debug_dma_sync_single_for_device(dev,addr,size,(int)dir);
  
#line 124 
  return;
}


#line 47  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/dma-mapping.h"
__inline static int dma_mapping_error(struct device *dev, dma_addr_t dma_addr)
{
  int __retres;
  
#line 49 
  struct dma_map_ops *ops_0 = get_dma_ops(dev);
  
#line 50 
  debug_dma_mapping_error(dev,dma_addr);
  
#line 51 
  if (ops_0->mapping_error != (int (*)(struct device *, dma_addr_t ))0) {
    int tmp_0;
    
#line 52 
    tmp_0 = (*(ops_0->mapping_error))(dev,dma_addr);
    
#line 52 
    __retres = tmp_0;
    
#line 52 
    goto return_label;
  }
  else ;
  
#line 54 
  __retres = dma_addr == 0ULL;
  return_label: 
#line 54 
                return __retres;
}


#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/pci-dma-compat.h"
__inline static dma_addr_t pci_map_single(struct pci_dev *hwdev, void *ptr, size_t size, int direction)
{
  dma_addr_t tmp_0;
  struct device *tmp;
  
#line 40 
  ;
  
#line 40 
  ;
  
#line 40 
  ;
  
#line 40 
  if (hwdev != (struct pci_dev *)0) 
#line 40 
                                    tmp = & hwdev->dev; else 
#line 40 
                                                             tmp = (struct device *)0;
  
#line 40 
  tmp_0 = dma_map_single_attrs(tmp,ptr,size,(enum dma_data_direction)direction,(struct dma_attrs *)0);
  
#line 40 
  return tmp_0;
}


#line 44  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/pci-dma-compat.h"
__inline static void pci_unmap_single(struct pci_dev *hwdev, dma_addr_t dma_addr, size_t size, int direction)
{
  struct device *tmp;
  
#line 47 
  ;
  
#line 47 
  ;
  
#line 47 
  ;
  
#line 47 
  if (hwdev != (struct pci_dev *)0) 
#line 47 
                                    tmp = & hwdev->dev; else 
#line 47 
                                                             tmp = (struct device *)0;
  
#line 47 
  dma_unmap_single_attrs(tmp,dma_addr,size,(enum dma_data_direction)direction,(struct dma_attrs *)0);
  
#line 48 
  return;
}


#line 79  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/pci-dma-compat.h"
__inline static void pci_dma_sync_single_for_cpu(struct pci_dev *hwdev, dma_addr_t dma_handle, size_t size, int direction)
{
  struct device *tmp;
  
#line 82 
  ;
  
#line 82 
  ;
  
#line 82 
  ;
  
#line 82 
  if (hwdev != (struct pci_dev *)0) 
#line 82 
                                    tmp = & hwdev->dev; else 
#line 82 
                                                             tmp = (struct device *)0;
  
#line 82 
  dma_sync_single_for_cpu(tmp,dma_handle,size,(enum dma_data_direction)direction);
  
#line 83 
  return;
}


#line 86  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/pci-dma-compat.h"
__inline static void pci_dma_sync_single_for_device(struct pci_dev *hwdev, dma_addr_t dma_handle, size_t size, int direction)
{
  struct device *tmp;
  
#line 89 
  ;
  
#line 89 
  ;
  
#line 89 
  ;
  
#line 89 
  if (hwdev != (struct pci_dev *)0) 
#line 89 
                                    tmp = & hwdev->dev; else 
#line 89 
                                                             tmp = (struct device *)0;
  
#line 89 
  dma_sync_single_for_device(tmp,dma_handle,size,(enum dma_data_direction)direction);
  
#line 90 
  return;
}


#line 775  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
void consume_skb(struct sk_buff *);


#line 1688 
unsigned char *skb_put(struct sk_buff *, unsigned int);


#line 1789  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void skb_reserve(struct sk_buff *skb, int len)
{
  
#line 1791 
  skb->data += len;
  
#line 1792 
  skb->tail += (unsigned int)len;
  
#line 1793 
  return;
}


#line 2140 
struct sk_buff *__netdev_alloc_skb(struct net_device *, unsigned int, gfp_t);


#line 2156  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static struct sk_buff *netdev_alloc_skb(struct net_device *dev, unsigned int length)
{
  struct sk_buff *tmp;
  
#line 2159 
  tmp = __netdev_alloc_skb(dev,length,32U);
  
#line 2159 
  return tmp;
}


#line 2803  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void skb_copy_to_linear_data(struct sk_buff *skb, void const *from, unsigned int const len)
{
  
#line 2807 
  memcpy((void *)skb->data,from,(unsigned long)len);
  
#line 2808 
  return;
}


#line 391  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
void __napi_schedule(struct napi_struct *);


#line 394  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static bool napi_disable_pending(struct napi_struct *n)
{
  bool __retres;
  int tmp;
  
#line 396 
  tmp = constant_test_bit(1L,(unsigned long const volatile *)(& n->state));
  
#line 396 
  __retres = (_Bool)(tmp != 0);
  
#line 396 
  return __retres;
}


#line 408  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static bool napi_schedule_prep(struct napi_struct *n)
{
  bool __retres;
  int tmp_2;
  int tmp_0;
  bool tmp;
  
#line 410 
  tmp = napi_disable_pending(n);
  
#line 410 
  if (tmp) 
#line 410 
           tmp_0 = 0; else 
#line 410 
                           tmp_0 = 1;
  
#line 410 
  if (tmp_0) {
    int tmp_1;
    
#line 410 
    tmp_1 = test_and_set_bit(0L,(unsigned long volatile *)(& n->state));
    
#line 410 
    if (tmp_1 == 0) 
#line 410 
                    tmp_2 = 1; else 
#line 410 
                                    tmp_2 = 0;
  }
  else 
#line 410 
       tmp_2 = 0;
  
#line 410 
  __retres = (_Bool)(tmp_2 != 0);
  
#line 410 
  return __retres;
}


#line 421  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void napi_schedule(struct napi_struct *n)
{
  bool tmp;
  
#line 423 
  tmp = napi_schedule_prep(n);
  
#line 423 
  if ((int)tmp != 0) 
#line 424 
                     __napi_schedule(n); else ;
  
#line 425 
  return;
}


#line 450 
void napi_complete_done(struct napi_struct *, int);


#line 458  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void napi_complete(struct napi_struct *n)
{
  
#line 460 
  napi_complete_done(n,0);
  
#line 461 
  return;
}


#line 1822  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static struct netdev_queue *netdev_get_tx_queue(struct net_device const *dev, unsigned int index)
{
  struct netdev_queue *__retres;
  
#line 1825 
  __retres = dev->_tx + index;
  
#line 1825 
  return __retres;
}


#line 2541 
void netif_tx_wake_queue(struct netdev_queue *);


#line 2550  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void netif_wake_queue(struct net_device *dev)
{
  struct netdev_queue *tmp;
  
#line 2552 
  tmp = netdev_get_tx_queue((struct net_device const *)dev,0U);
  
#line 2552 
  netif_tx_wake_queue(tmp);
  
#line 2553 
  return;
}


#line 2899 
void __dev_kfree_skb_irq(struct sk_buff *, enum skb_free_reason);


#line 2921  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void dev_kfree_skb_irq(struct sk_buff *skb)
{
  
#line 2923 
  __dev_kfree_skb_irq(skb,(enum skb_free_reason)SKB_REASON_DROPPED);
  
#line 2924 
  return;
}


#line 2943 
int netif_receive_skb_sk(struct sock *, struct sk_buff *);


#line 2944  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static int netif_receive_skb(struct sk_buff *skb)
{
  int tmp;
  
#line 2946 
  tmp = netif_receive_skb_sk(skb->sk,skb);
  
#line 2946 
  return tmp;
}


#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/interrupt.c"
unsigned int tulip_max_interrupt_work;

#line 17  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/interrupt.c"
int tulip_rx_copybreak;

#line 490  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/tulip.h"
irqreturn_t tulip_interrupt(int irq, void *dev_instance);


#line 493 
int tulip_poll(struct napi_struct *napi, int budget);


#line 519 
void oom_timer(unsigned long data);


#line 530  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/tulip.h"
__inline static void tulip_stop_rxtx_1(struct tulip_private *tp)
{
  
#line 532 
  void *ioaddr = tp->base_addr;
  
#line 533 
  u32 csr6 = ioread32(ioaddr + 48U);
  
#line 535 
  if ((csr6 & 8194U) != 0U) {
    
#line 536 
    unsigned int i = 130U;
    
#line 537 
    iowrite32(csr6 & 4294959101U,ioaddr + 48U);
    
#line 538 
    ldv_inline_asm();
    
#line 543 
    goto ldv_45299;
    ldv_45298: 
#line 544 
    ;
    
#line 544 
    __const_udelay(42950UL);
    ldv_45299: 
#line 546 
    ;
    
#line 543 
    i -= 1U;
    
#line 543 
    if (i != 0U) {
      unsigned int tmp_0;
      
#line 543 
      tmp_0 = ioread32(ioaddr + 40U);
      
#line 543 
      if ((tmp_0 & 8257536U) != 0U) 
#line 545 
                                    goto ldv_45298; else 
#line 548 
                                                         goto ldv_45300;
    }
    else 
#line 548 
         goto ldv_45300;
    ldv_45300: 
#line 549 
    ;
    
#line 546 
    if (i == 0U) {
      
#line 547 
      struct _ddebug descriptor = {.modname = "tulip", .function = "tulip_stop_rxtx", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/tulip.h", .format = "tulip_stop_rxtx() failed (CSR5 0x%x CSR6 0x%x)\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))549U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))1U};
      
#line 547 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
        unsigned int tmp_1;
        unsigned int tmp_2;
        
#line 547 
        tmp_1 = ioread32(ioaddr + 48U);
        
#line 547 
        tmp_2 = ioread32(ioaddr + 40U);
        
#line 547 
        ;
        
#line 547 
        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)tp->dev,"tulip_stop_rxtx() failed (CSR5 0x%x CSR6 0x%x)\n",tmp_2,tmp_1);
      }
      else ;
    }
    else ;
  }
  else ;
  
#line 550 
  return;
}


#line 553  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/tulip.h"
__inline static void tulip_restart_rxtx_1(struct tulip_private *tp)
{
  
#line 555 
  tulip_stop_rxtx_1(tp);
  
#line 556 
  __const_udelay(21475UL);
  
#line 557 
  tulip_start_rxtx(tp);
  
#line 558 
  return;
}


#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/etherdevice.h"
__be16 eth_type_trans(struct sk_buff *, struct net_device *);


#line 24  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/interrupt.c"
static unsigned int mit_table[16U] = {0U, 2148859904U, 2148859904U, 2150039552U, 2151088128U, 2152267776U, 2153316352U, 2154364928U, 2155544576U, 2156593152U, 2157772800U, 2158821376U, 2159869952U, 2161049600U, 2162098176U, 2163277824U};

#line 59  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/interrupt.c"
int tulip_refill_rx(struct net_device *dev)
{
  int entry;
  
#line 61 
  struct tulip_private *tp = netdev_priv((struct net_device const *)dev);
  
#line 63 
  int refilled = 0;
  
#line 66 
  goto ldv_45483;
  ldv_45482: 
#line 67 
  ;
  
#line 67 
  entry = (int)tp->dirty_rx & 127;
  
#line 68 
  if (tp->rx_buffers[entry].skb == (struct sk_buff *)0) {
    struct sk_buff *skb;
    dma_addr_t mapping;
    struct sk_buff *tmp_0;
    int tmp_1;
    
#line 72 
    tmp_0 = netdev_alloc_skb(dev,1540U);
    
#line 72 
    tp->rx_buffers[entry].skb = tmp_0;
    
#line 72 
    skb = tmp_0;
    
#line 74 
    if (skb == (struct sk_buff *)0) 
#line 75 
                                    goto ldv_45481; else ;
    
#line 77 
    mapping = pci_map_single(tp->pdev,(void *)skb->data,1540UL,2);
    
#line 79 
    tmp_1 = dma_mapping_error(& (tp->pdev)->dev,mapping);
    
#line 79 
    if (tmp_1 != 0) {
      
#line 80 
      consume_skb(skb);
      
#line 81 
      tp->rx_buffers[entry].skb = (struct sk_buff *)0;
      
#line 82 
      goto ldv_45481;
    }
    else ;
    
#line 85 
    tp->rx_buffers[entry].mapping = mapping;
    
#line 87 
    (tp->rx_ring + entry)->buffer1 = (unsigned int)mapping;
    
#line 88 
    refilled += 1;
  }
  else ;
  
#line 90 
  (tp->rx_ring + entry)->status = 2147483648U;
  
#line 66 
  tp->dirty_rx += 1U;
  ldv_45483: 
#line 67 
  ;
  
#line 66 
  if (tp->cur_rx != tp->dirty_rx) 
#line 68 
                                  goto ldv_45482; else 
#line 71 
                                                       goto ldv_45481;
  ldv_45481: 
#line 72 
  ;
  
#line 92 
  if (tp->chip_id == 4) {
    unsigned int tmp_2;
    
#line 93 
    tmp_2 = ioread32(tp->base_addr + 40U);
    
#line 93 
    if (((tmp_2 >> 17) & 7U) == 4U) 
#line 97 
                                    iowrite32(1U,tp->base_addr + 16U); else ;
  }
  else ;
  
#line 100 
  return refilled;
}


#line 105  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/interrupt.c"
void oom_timer(unsigned long data)
{
  
#line 107 
  struct net_device *dev = (struct net_device *)data;
  
#line 108 
  struct tulip_private *tp = netdev_priv((struct net_device const *)dev);
  
#line 109 
  napi_schedule(& tp->napi);
  
#line 110 
  return;
}


#line 112  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/interrupt.c"
int tulip_poll(struct napi_struct *napi, int budget)
{
  int __retres;
  struct tulip_private *tmp;
  unsigned int tmp_0;
  unsigned int tmp_2;
  {
    
#line 114 
    struct napi_struct const *__mptr = (struct napi_struct const *)napi;
    
#line 114 
    tmp = (struct tulip_private *)__mptr + 18446744073709548800U;
  }
  
#line 114 
  struct tulip_private *tp = tmp;
  
#line 115 
  struct net_device *dev = tp->dev;
  
#line 116 
  int entry = (int)tp->cur_rx & 127;
  
#line 117 
  int work_done = 0;
  
#line 119 
  int received = 0;
  
#line 127 
  if (budget > 127) 
#line 127 
                    budget -= 1; else ;
  
#line 130 
  if (tulip_debug > 4) {
    
#line 131 
    struct _ddebug descriptor = {.modname = "tulip", .function = "tulip_poll", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/interrupt.c", .format = " In tulip_rx(), entry %d %08x\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))132U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))1U};
    
#line 131 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 131 
                                                        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)dev," In tulip_rx(), entry %d %08x\n",entry,(tp->rx_ring + entry)->status); else ;
  }
  else ;
  ldv_45514: 
#line 133 
  ;
  
#line 135 
  tmp_0 = ioread32(tp->base_addr + 40U);
  
#line 135 
  if (tmp_0 == 4294967295U) {
    {
      
#line 136 
      struct _ddebug descriptor_0 = {.modname = "tulip", .function = "tulip_poll", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/interrupt.c", .format = " In tulip_poll(), hardware disappeared\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))136U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))1U};
      
#line 136 
      if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 136 
                                                            __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)dev," In tulip_poll(), hardware disappeared\n"); else ;
    }
    
#line 137 
    goto ldv_45503;
  }
  else ;
  
#line 140 
  iowrite32(192U,tp->base_addr + 40U);
  
#line 144 
  goto ldv_45513;
  ldv_45512: 
#line 145 
  ;
  {
    short pkt_len;
    
#line 145 
    s32 status = (int)(tp->rx_ring + entry)->status;
    
#line 148 
    if (tp->dirty_rx + 128U == tp->cur_rx) 
#line 149 
                                           goto ldv_45506; else ;
    
#line 151 
    if (tulip_debug > 5) {
      
#line 152 
      struct _ddebug descriptor_1 = {.modname = "tulip", .function = "tulip_poll", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/interrupt.c", .format = "In tulip_rx(), entry %d %08x\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))153U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))1U};
      
#line 152 
      if ((long)(((int)descriptor_1.flags & 1) != 0) != 0L) 
#line 152 
                                                            __dynamic_netdev_dbg(& descriptor_1,(struct net_device const *)dev,"In tulip_rx(), entry %d %08x\n",entry,status); else ;
    }
    else ;
    
#line 155 
    work_done += 1;
    
#line 155 
    ;
    
#line 155 
    if (work_done >= budget) 
#line 156 
                             goto not_done; else ;
    
#line 163 
    pkt_len = (short)(((unsigned int)(status >> 16) & 2047U) + 65532U);
    
#line 171 
    if ((status & 939543378) != 768 || (int)pkt_len > 1518) 
      
#line 178 
      if ((status & 939524880) != 768) {
        
#line 181 
        if ((status & 65535) != 32767) {
          
#line 182 
          if (tulip_debug > 1) 
#line 183 
                               dev_warn((struct device const *)(& dev->dev),"Oversized Ethernet frame spanned multiple buffers, status %08x!\n",status); else ;
          
#line 186 
          dev->stats.rx_length_errors += 1UL;
        }
        else ;
      }
      else {
        
#line 190 
        if (tulip_debug > 2) {
          
#line 191 
          struct _ddebug descriptor_2 = {.modname = "tulip", .function = "tulip_poll", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/interrupt.c", .format = "Receive error, Rx status %08x\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))192U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))1U};
          
#line 191 
          if ((long)(((int)descriptor_2.flags & 1) != 0) != 0L) 
#line 191 
                                                                __dynamic_netdev_dbg(& descriptor_2,(struct net_device const *)dev,"Receive error, Rx status %08x\n",status); else ;
        }
        else ;
        
#line 193 
        dev->stats.rx_errors += 1UL;
        
#line 194 
        if ((int)pkt_len > 1518 || (status & 2048) != 0) 
#line 196 
                                                         dev->stats.rx_length_errors += 1UL; else ;
        
#line 198 
        if ((status & 4) != 0) 
#line 199 
                               dev->stats.rx_frame_errors += 1UL; else ;
        
#line 200 
        if ((status & 2) != 0) 
#line 201 
                               dev->stats.rx_crc_errors += 1UL; else ;
        
#line 202 
        if ((status & 1) != 0) 
#line 203 
                               dev->stats.rx_fifo_errors += 1UL; else ;
      }
    else {
      struct sk_buff *skb;
      
#line 210 
      if ((int)pkt_len < tulip_rx_copybreak) {
        
#line 211 
        skb = netdev_alloc_skb(dev,(unsigned int)((int)pkt_len + 2));
        
#line 210 
        if (skb != (struct sk_buff *)0) {
          
#line 212 
          skb_reserve(skb,2);
          
#line 213 
          pci_dma_sync_single_for_cpu(tp->pdev,tp->rx_buffers[entry].mapping,(unsigned long)pkt_len,2);
          
#line 217 
          skb_copy_to_linear_data(skb,(void const *)(tp->rx_buffers[entry].skb)->data,(unsigned int)pkt_len);
          
#line 219 
          skb_put(skb,(unsigned int)pkt_len);
          
#line 225 
          pci_dma_sync_single_for_device(tp->pdev,tp->rx_buffers[entry].mapping,(unsigned long)pkt_len,2);
        }
        else 
#line 210 
             goto _LAND;
      }
      else {
        _LAND: {
                 char *tmp_1;
                 
#line 229 
                 ;
                 
#line 229 
                 skb = tp->rx_buffers[entry].skb;
                 
#line 229 
                 tmp_1 = (char *)skb_put(skb,(unsigned int)pkt_len);
                 
#line 229 
                 char *temp = tmp_1;
                 
#line 233 
                 if (tp->rx_buffers[entry].mapping != (unsigned long long)(tp->rx_ring + entry)->buffer1) 
                   
#line 235 
                   dev_err((struct device const *)(& dev->dev),"Internal fault: The skbuff addresses do not match in tulip_rx: %08x vs. %08llx %p / %p\n",(tp->rx_ring + entry)->buffer1,tp->rx_buffers[entry].mapping,skb->head,temp); else ;
                 
#line 243 
                 pci_unmap_single(tp->pdev,tp->rx_buffers[entry].mapping,1540UL,2);
                 
#line 246 
                 tp->rx_buffers[entry].skb = (struct sk_buff *)0;
                 
#line 247 
                 tp->rx_buffers[entry].mapping = 0ULL;
               }
      }
      
#line 249 
      skb->protocol = eth_type_trans(skb,dev);
      
#line 251 
      netif_receive_skb(skb);
      
#line 253 
      dev->stats.rx_packets += 1UL;
      
#line 254 
      dev->stats.rx_bytes += (unsigned long)pkt_len;
    }
    
#line 257 
    received += 1;
    
#line 260 
    tp->cur_rx += 1U;
    
#line 260 
    entry = (int)tp->cur_rx & 127;
    
#line 261 
    if (tp->cur_rx - tp->dirty_rx > 32U) 
#line 262 
                                         tulip_refill_rx(dev); else ;
  }
  ldv_45513: 
#line 264 
  ;
  
#line 144 
  if ((tp->rx_ring + entry)->status >= (__le32)0) 
#line 146 
                                                  goto ldv_45512; else 
                                                                    
#line 149 
                                                                    goto ldv_45506;
  ldv_45506: 
#line 150 
  ;
  
#line 276 
  tmp_2 = ioread32(tp->base_addr + 40U);
  
#line 276 
  if ((tmp_2 & 64U) != 0U) 
#line 278 
                           goto ldv_45514; else 
#line 281 
                                                goto ldv_45503;
  ldv_45503: 
#line 282 
  ;
  
#line 297 
  if ((tp->flags & 256) != 0) {
    
#line 298 
    if (received > 1) {
      
#line 299 
      if (tp->mit_on == 0) {
        
#line 300 
        tp->mit_on = 1;
        
#line 301 
        iowrite32(mit_table[15],tp->base_addr + 88U);
      }
      else ;
    }
    else 
      
#line 305 
      if (tp->mit_on != 0) {
        
#line 306 
        tp->mit_on = 0;
        
#line 307 
        iowrite32(0U,tp->base_addr + 88U);
      }
      else ;
  }
  else ;
  
#line 314 
  tulip_refill_rx(dev);
  
#line 317 
  if (tp->rx_buffers[tp->dirty_rx & 127U].skb == (struct sk_buff *)0) 
    
#line 318 
    goto oom; else ;
  
#line 322 
  napi_complete(napi);
  
#line 323 
  iowrite32((unsigned int)tulip_tbl[tp->chip_id].valid_intrs,tp->base_addr + 56U);
  
#line 336 
  __retres = work_done;
  
#line 336 
  goto return_label;
  not_done: 
#line 338 
  ;
  
#line 339 
  if (tp->cur_rx - tp->dirty_rx > 64U || tp->rx_buffers[tp->dirty_rx & 127U].skb == (struct sk_buff *)0) 
    
#line 341 
    tulip_refill_rx(dev); else ;
  
#line 343 
  if (tp->rx_buffers[tp->dirty_rx & 127U].skb == (struct sk_buff *)0) 
    
#line 344 
    goto oom; else ;
  
#line 346 
  __retres = work_done;
  
#line 346 
  goto return_label;
  oom: 
#line 348 
  ;
  
#line 351 
  ldv_mod_timer_72(& tp->oom_timer,jiffies + 1UL);
  
#line 358 
  napi_complete(napi);
  
#line 360 
  __retres = work_done;
  return_label: 
#line 360 
                return __retres;
}


#line 489  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/interrupt.c"
__inline static unsigned int phy_interrupt(struct net_device *dev)
{
  unsigned int __retres;
  
#line 510 
  __retres = 0U;
  
#line 510 
  return __retres;
}


#line 515  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/interrupt.c"
irqreturn_t tulip_interrupt(int irq, void *dev_instance)
{
  irqreturn_t __retres;
  int csr5;
  int missed;
  unsigned int tmp_0;
  unsigned int tmp_4;
  unsigned int tmp_6;
  
#line 517 
  struct net_device *dev = (struct net_device *)dev_instance;
  
#line 518 
  struct tulip_private *tp = netdev_priv((struct net_device const *)dev);
  
#line 519 
  void *ioaddr = tp->base_addr;
  
#line 522 
  int rx = 0;
  
#line 523 
  int tx = 0;
  
#line 524 
  int oi = 0;
  
#line 525 
  int maxrx = 128;
  
#line 526 
  int maxtx = 32;
  
#line 527 
  int maxoi = 32;
  
#line 529 
  int rxd = 0;
  
#line 533 
  unsigned int work_count = tulip_max_interrupt_work;
  
#line 534 
  unsigned int handled = 0U;
  
#line 537 
  tmp_0 = ioread32(ioaddr + 40U);
  
#line 537 
  csr5 = (int)tmp_0;
  
#line 539 
  if ((tp->flags & 8192) != 0) 
#line 540 
                               handled = phy_interrupt(dev); else ;
  
#line 542 
  if ((csr5 & 98304) == 0) {
    
#line 543 
    __retres = (enum irqreturn)(handled != 0U);
    
#line 543 
    goto return_label;
  }
  else ;
  
#line 545 
  tp->nir += 1UL;
  ldv_45549: 
#line 546 
  ;
  
#line 551 
  if (rxd == 0 && (csr5 & 192) != 0) {
    
#line 552 
    rxd += 1;
    
#line 554 
    iowrite32((unsigned int)tulip_tbl[tp->chip_id].valid_intrs & 4294966335U,ioaddr + 56U);
    
#line 555 
    napi_schedule(& tp->napi);
    
#line 557 
    if ((csr5 & -99281) == 0) 
#line 558 
                              goto ldv_45537; else ;
  }
  else ;
  
#line 564 
  iowrite32((unsigned int)csr5 & 130879U,ioaddr + 40U);
  
#line 578 
  if (tulip_debug > 4) {
    
#line 579 
    struct _ddebug descriptor = {.modname = "tulip", .function = "tulip_interrupt", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/interrupt.c", .format = "interrupt  csr5=%#8.8x new csr5=%#8.8x\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))580U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))1U};
    
#line 579 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
      unsigned int tmp_1;
      
#line 579 
      tmp_1 = ioread32(ioaddr + 40U);
      
#line 579 
      ;
      
#line 579 
      ;
      
#line 579 
      __dynamic_netdev_dbg(& descriptor,(struct net_device const *)dev,"interrupt  csr5=%#8.8x new csr5=%#8.8x\n",csr5,tmp_1);
    }
    else ;
  }
  else ;
  
#line 583 
  if ((csr5 & 2055) != 0) {
    unsigned int dirty_tx;
    
#line 586 
    ldv_spin_lock_73(& tp->lock);
    
#line 588 
    dirty_tx = tp->dirty_tx;
    
#line 588 
    goto ldv_45547;
    ldv_45546: 
#line 589 
    ;
    {
      
#line 590 
      int entry = (int)dirty_tx & 31;
      
#line 591 
      int status = (int)(tp->tx_ring + entry)->status;
      
#line 593 
      if (status < 0) 
#line 594 
                      goto ldv_45543; else ;
      
#line 597 
      if (tp->tx_buffers[entry].skb == (struct sk_buff *)0) {
        
#line 599 
        if (tp->tx_buffers[entry].mapping != 0ULL) 
#line 600 
                                                   pci_unmap_single(tp->pdev,tp->tx_buffers[entry].mapping,192UL,1); else ;
        
#line 604 
        goto ldv_45544;
      }
      else ;
      
#line 607 
      if ((status & 32768) != 0) {
        
#line 610 
        if (tulip_debug > 1) {
          
#line 611 
          struct _ddebug descriptor_0 = {.modname = "tulip", .function = "tulip_interrupt", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/interrupt.c", .format = "Transmit error, Tx status %08x\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))612U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))1U};
          
#line 611 
          if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 611 
                                                                __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)dev,"Transmit error, Tx status %08x\n",status); else ;
        }
        else ;
        
#line 614 
        dev->stats.tx_errors += 1UL;
        
#line 615 
        if ((status & 16644) != 0) 
#line 616 
                                   dev->stats.tx_aborted_errors += 1UL; else ;
        
#line 617 
        if ((status & 3072) != 0) 
#line 618 
                                  dev->stats.tx_carrier_errors += 1UL; else ;
        
#line 619 
        if ((status & 512) != 0) 
#line 620 
                                 dev->stats.tx_window_errors += 1UL; else ;
        
#line 621 
        if ((status & 2) != 0) 
#line 622 
                               dev->stats.tx_fifo_errors += 1UL; else ;
        
#line 623 
        if ((status & 128) != 0 && (unsigned int)*((unsigned char *)tp + 3524UL) == 0U) 
          
#line 624 
          dev->stats.tx_heartbeat_errors += 1UL; else ;
      }
      else {
        
#line 626 
        dev->stats.tx_bytes += (unsigned long)(tp->tx_buffers[entry].skb)->len;
        
#line 628 
        dev->stats.collisions += (unsigned long)(status >> 3) & 15UL;
        
#line 629 
        dev->stats.tx_packets += 1UL;
      }
      
#line 632 
      pci_unmap_single(tp->pdev,tp->tx_buffers[entry].mapping,(unsigned long)(tp->tx_buffers[entry].skb)->len,1);
      
#line 637 
      dev_kfree_skb_irq(tp->tx_buffers[entry].skb);
      
#line 638 
      tp->tx_buffers[entry].skb = (struct sk_buff *)0;
      
#line 639 
      tp->tx_buffers[entry].mapping = 0ULL;
      
#line 640 
      tx += 1;
    }
    ldv_45544: 
#line 642 
    ;
    
#line 589 
    dirty_tx += 1U;
    ldv_45547: 
#line 590 
    ;
    
#line 588 
    if (tp->cur_tx != dirty_tx) 
#line 590 
                                goto ldv_45546; else 
#line 593 
                                                     goto ldv_45543;
    ldv_45543: 
#line 594 
    ;
    
#line 644 
    if (tp->cur_tx - dirty_tx > 32U) {
      
#line 645 
      dev_err((struct device const *)(& dev->dev),"Out-of-sync dirty pointer, %d vs. %d\n",dirty_tx,tp->cur_tx);
      
#line 648 
      dirty_tx += 32U;
    }
    else ;
    
#line 652 
    if (tp->cur_tx - dirty_tx <= 29U) 
#line 653 
                                      netif_wake_queue(dev); else ;
    
#line 655 
    tp->dirty_tx = dirty_tx;
    
#line 656 
    if ((csr5 & 2) != 0) {
      
#line 657 
      if (tulip_debug > 2) {
        unsigned int tmp_2;
        
#line 658 
        ;
        
#line 659 
        tmp_2 = ioread32(ioaddr + 48U);
        
#line 658 
        ;
        
#line 658 
        ;
        
#line 658 
        dev_warn((struct device const *)(& dev->dev),"The transmitter stopped.  CSR5 is %x, CSR6 %x, new CSR6 %x\n",csr5,tmp_2,tp->csr6);
      }
      else ;
      
#line 662 
      tulip_restart_rxtx_1(tp);
    }
    else ;
    
#line 664 
    ldv_spin_unlock_74(& tp->lock);
  }
  else ;
  
#line 668 
  if ((csr5 & 32768) != 0) {
    
#line 669 
    if (csr5 == -1) 
#line 670 
                    goto ldv_45537; else ;
    
#line 671 
    if ((csr5 & 8) != 0) 
#line 672 
                         dev->stats.tx_errors += 1UL; else ;
    
#line 673 
    if ((csr5 & 32) != 0) {
      
#line 674 
      if ((tp->csr6 & 49152U) != 49152U) 
#line 675 
                                         tp->csr6 += 16384U; else 
#line 677 
                                                                  tp->csr6 |= 2097152U;
      
#line 679 
      tulip_restart_rxtx_1(tp);
      
#line 680 
      iowrite32(0U,ioaddr + 8U);
    }
    else ;
    
#line 682 
    if ((csr5 & 384) != 0) {
      
#line 683 
      if ((tp->flags & 2048) != 0) {
        
#line 684 
        iowrite32(tp->mc_filter[0],ioaddr + 172U);
        
#line 685 
        iowrite32(tp->mc_filter[1],ioaddr + 176U);
      }
      else ;
    }
    else ;
    
#line 688 
    if ((csr5 & 256) != 0) {
      unsigned int tmp_3;
      
#line 689 
      tmp_3 = ioread32(ioaddr + 64U);
      
#line 689 
      dev->stats.rx_missed_errors += (unsigned long)(tmp_3 & 65535U);
      
#line 690 
      dev->stats.rx_errors += 1UL;
      
#line 691 
      tulip_start_rxtx(tp);
    }
    else ;
    
#line 697 
    if ((csr5 & 134221840) != 0) {
      
#line 698 
      if (tp->link_change != (void (*)(struct net_device *, int ))0) 
        
#line 699 
        (*(tp->link_change))(dev,csr5); else ;
    }
    else ;
    
#line 701 
    if ((csr5 & 8192) != 0) {
      
#line 702 
      int error = (csr5 >> 23) & 7;
      
#line 713 
      dev_err((struct device const *)(& dev->dev),"(%lu) System Error occurred (%d)\n",tp->nir,error);
    }
    else ;
    
#line 718 
    iowrite32(134281146U,ioaddr + 40U);
    
#line 719 
    oi += 1;
  }
  else ;
  
#line 721 
  if ((csr5 & 2048) != 0) {
    
#line 723 
    if (tulip_debug > 2) 
#line 724 
                         dev_err((struct device const *)(& dev->dev),"Re-enabling interrupts, %08x\n",csr5); else ;
    
#line 727 
    iowrite32((unsigned int)tulip_tbl[tp->chip_id].valid_intrs,ioaddr + 56U);
    
#line 728 
    tp->ttimer = 0;
    
#line 729 
    oi += 1;
  }
  else ;
  
#line 731 
  if ((tx > maxtx || rx > maxrx) || oi > maxoi) {
    
#line 732 
    if (tulip_debug > 1) 
#line 733 
                         dev_warn((struct device const *)(& dev->dev),"Too much work during an interrupt, csr5=0x%08x. (%lu) (%d,%d,%d)\n",csr5,tp->nir,tx,rx,oi); else ;
    
#line 737 
    iowrite32(2147614719U,ioaddr + 40U);
    
#line 738 
    if ((tp->flags & 256) != 0) 
#line 741 
                                iowrite32(2334392320U,ioaddr + 88U);
    else 
      
#line 742 
      if (tp->chip_id == 4) {
        
#line 744 
        iowrite32(0U,ioaddr + 56U);
        
#line 745 
        ldv_mod_timer_75(& tp->timer,jiffies + 5UL);
      }
      else {
        
#line 749 
        iowrite32((unsigned int)((~ csr5 & 91119) | 34816),ioaddr + 56U);
        
#line 750 
        iowrite32(18U,ioaddr + 88U);
      }
    
#line 752 
    goto ldv_45537;
  }
  else ;
  
#line 755 
  work_count -= 1U;
  
#line 756 
  if (work_count == 0U) 
#line 757 
                        goto ldv_45537; else ;
  
#line 759 
  tmp_4 = ioread32(ioaddr + 40U);
  
#line 759 
  csr5 = (int)tmp_4;
  
#line 762 
  if (rxd != 0) 
#line 763 
                csr5 &= -961; else ;
  
#line 773 
  if ((csr5 & 14639) != 0) 
#line 775 
                           goto ldv_45549; else 
#line 778 
                                                goto ldv_45537;
  ldv_45537: 
#line 779 
  ;
  
#line 805 
  tmp_6 = ioread32(ioaddr + 64U);
  
#line 805 
  missed = (int)tmp_6 & 131071;
  
#line 805 
  if (missed != 0) {
    int tmp_5;
    
#line 806 
    if ((missed & 65536) == 0) 
#line 806 
                               tmp_5 = missed; else 
#line 806 
                                                    tmp_5 = 65536;
    
#line 806 
    dev->stats.rx_dropped += (unsigned long)tmp_5;
  }
  else ;
  
#line 809 
  if (tulip_debug > 4) {
    
#line 810 
    struct _ddebug descriptor_1 = {.modname = "tulip", .function = "tulip_interrupt", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/interrupt.c", .format = "exiting interrupt, csr5=%#04x\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))811U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))1U};
    
#line 810 
    if ((long)(((int)descriptor_1.flags & 1) != 0) != 0L) {
      unsigned int tmp_7;
      
#line 810 
      tmp_7 = ioread32(ioaddr + 40U);
      
#line 810 
      ;
      
#line 810 
      __dynamic_netdev_dbg(& descriptor_1,(struct net_device const *)dev,"exiting interrupt, csr5=%#04x\n",tmp_7);
    }
    else ;
  }
  else ;
  
#line 813 
  __retres = IRQ_HANDLED;
  return_label: 
#line 813 
                return __retres;
}


#line 739  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/weaver/.tmp_interrupt.c.aux"
static int ldv_mod_timer_72(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2)
{
  int tmp;
  
#line 743 
  tmp = ldv_emg_mod_timer(ldv_func_arg1,ldv_func_arg2);
  
#line 743 
  return tmp;
}


#line 747  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/weaver/.tmp_interrupt.c.aux"
static void ldv_spin_lock_73(spinlock_t *lock)
{
  
#line 751 
  ldv_spin_model_lock((char *)"lock_of_tulip_private");
  
#line 753 
  spin_lock_0(lock);
  
#line 754 
  return;
}


#line 757  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/weaver/.tmp_interrupt.c.aux"
static void ldv_spin_unlock_74(spinlock_t *lock)
{
  
#line 761 
  ldv_spin_model_unlock((char *)"lock_of_tulip_private");
  
#line 763 
  spin_unlock_0(lock);
  
#line 764 
  return;
}


#line 767  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/weaver/.tmp_interrupt.c.aux"
static int ldv_mod_timer_75(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2)
{
  int tmp;
  
#line 771 
  tmp = ldv_emg_mod_timer(ldv_func_arg1,ldv_func_arg2);
  
#line 771 
  return tmp;
}


#line 173  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timer.h"
static int ldv_mod_timer_72_0(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2);


#line 224 
void add_timer(struct timer_list *);


#line 232 
static int ldv_del_timer_sync_73(struct timer_list *ldv_func_arg1);


#line 236 
static int ldv_del_timer_sync_74(struct timer_list *ldv_func_arg1);


#line 35  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/iomap.h"
void iowrite16(u16, void *);


#line 3047  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
void netif_carrier_on(struct net_device *);


#line 3049 
void netif_carrier_off(struct net_device *);


#line 472  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/tulip.h"
void t21142_media_task(struct work_struct *work);


#line 473 
void t21142_start_nway(struct net_device *dev);


#line 474 
void t21142_lnk_change(struct net_device *dev, int csr5);


#line 530  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/tulip.h"
__inline static void tulip_stop_rxtx_2(struct tulip_private *tp)
{
  
#line 532 
  void *ioaddr = tp->base_addr;
  
#line 533 
  u32 csr6 = ioread32(ioaddr + 48U);
  
#line 535 
  if ((csr6 & 8194U) != 0U) {
    
#line 536 
    unsigned int i = 130U;
    
#line 537 
    iowrite32(csr6 & 4294959101U,ioaddr + 48U);
    
#line 538 
    ldv_inline_asm();
    
#line 543 
    goto ldv_45291;
    ldv_45290: 
#line 544 
    ;
    
#line 544 
    __const_udelay(42950UL);
    ldv_45291: 
#line 546 
    ;
    
#line 543 
    i -= 1U;
    
#line 543 
    if (i != 0U) {
      unsigned int tmp_0;
      
#line 543 
      tmp_0 = ioread32(ioaddr + 40U);
      
#line 543 
      if ((tmp_0 & 8257536U) != 0U) 
#line 545 
                                    goto ldv_45290; else 
#line 548 
                                                         goto ldv_45292;
    }
    else 
#line 548 
         goto ldv_45292;
    ldv_45292: 
#line 549 
    ;
    
#line 546 
    if (i == 0U) {
      
#line 547 
      struct _ddebug descriptor = {.modname = "tulip", .function = "tulip_stop_rxtx", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/tulip.h", .format = "tulip_stop_rxtx() failed (CSR5 0x%x CSR6 0x%x)\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))549U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))1U};
      
#line 547 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
        unsigned int tmp_1;
        unsigned int tmp_2;
        
#line 547 
        tmp_1 = ioread32(ioaddr + 48U);
        
#line 547 
        tmp_2 = ioread32(ioaddr + 40U);
        
#line 547 
        ;
        
#line 547 
        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)tp->dev,"tulip_stop_rxtx() failed (CSR5 0x%x CSR6 0x%x)\n",tmp_2,tmp_1);
      }
      else ;
    }
    else ;
  }
  else ;
  
#line 550 
  return;
}


#line 553  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/tulip.h"
__inline static void tulip_restart_rxtx_2(struct tulip_private *tp)
{
  
#line 555 
  tulip_stop_rxtx_2(tp);
  
#line 556 
  __const_udelay(21475UL);
  
#line 557 
  tulip_start_rxtx(tp);
  
#line 558 
  return;
}


#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/21142.c"
static u16 t21142_csr13[5U] = {(unsigned short)1U, (unsigned short)9U, (unsigned short)9U, (unsigned short)0U, (unsigned short)1U};

#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/21142.c"
u16 t21142_csr14[5U] = {(unsigned short)65535U, (unsigned short)1797U, (unsigned short)1797U, (unsigned short)0U, (unsigned short)32573U};

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/21142.c"
static u16 t21142_csr15[5U] = {(unsigned short)8U, (unsigned short)6U, (unsigned short)14U, (unsigned short)8U, (unsigned short)8U};

#line 28  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/21142.c"
void t21142_media_task(struct work_struct *work)
{
  struct tulip_private *tmp;
  unsigned int tmp_0;
  unsigned int tmp_1;
  {
    
#line 31 
    struct work_struct const *__mptr = (struct work_struct const *)work;
    
#line 31 
    tmp = (struct tulip_private *)__mptr + 18446744073709547464U;
  }
  
#line 30 
  struct tulip_private *tp = tmp;
  
#line 32 
  struct net_device *dev = tp->dev;
  
#line 33 
  void *ioaddr = tp->base_addr;
  
#line 34 
  tmp_0 = ioread32(ioaddr + 96U);
  
#line 34 
  int csr12 = (int)tmp_0;
  
#line 35 
  int next_tick = 15000;
  
#line 36 
  int new_csr6 = 0;
  
#line 37 
  tmp_1 = ioread32(ioaddr + 112U);
  
#line 37 
  int csr14 = (int)tmp_1;
  
#line 40 
  if ((csr14 & 128) != 0 && (csr12 & 28672) != 20480) 
#line 41 
                                                      csr12 |= 6; else ;
  
#line 42 
  if (tulip_debug > 2) 
#line 43 
                       _dev_info((struct device const *)(& dev->dev),"21143 negotiation status %08x, %s\n",csr12,medianame[(int)dev->if_port]); else ;
  
#line 45 
  if (((int)tulip_media_cap[(int)dev->if_port] & 4) != 0) {
    int tmp_2;
    
#line 46 
    tmp_2 = tulip_check_duplex(dev);
    
#line 46 
    if (tmp_2 < 0) {
      
#line 47 
      netif_carrier_off(dev);
      
#line 48 
      next_tick = 750;
    }
    else {
      
#line 50 
      netif_carrier_on(dev);
      
#line 51 
      next_tick = 15000;
    }
  }
  else 
    
#line 53 
    if ((unsigned int)*((unsigned char *)tp + 3525UL) != 0U) {
      
#line 55 
      if (tulip_debug > 1) 
#line 56 
                           _dev_info((struct device const *)(& dev->dev),"Using NWay-set %s media, csr12 %08x\n",medianame[(int)dev->if_port],csr12); else ;
    }
    else 
      
#line 59 
      if ((unsigned int)*((unsigned char *)tp + 3525UL) != 0U) ;
      else 
        
#line 61 
        if ((unsigned int)dev->if_port == 3U) {
          
#line 62 
          if ((csr12 & 2) != 0) {
            
#line 63 
            if (tulip_debug > 1) 
#line 64 
                                 _dev_info((struct device const *)(& dev->dev),"No 21143 100baseTx link beat, %08x, trying NWay\n",csr12); else ;
            
#line 67 
            t21142_start_nway(dev);
            
#line 68 
            next_tick = 750;
          }
          else ;
        }
        else 
          
#line 70 
          if ((csr12 & 28672) != 20480) {
            
#line 72 
            if (tulip_debug > 1) 
#line 73 
                                 _dev_info((struct device const *)(& dev->dev),"21143 negotiation failed, status %08x\n",csr12); else ;
            
#line 76 
            if ((csr12 & 4) == 0) {
              
#line 77 
              new_csr6 = -2109603840;
              
#line 78 
              dev->if_port = (unsigned char)0U;
              
#line 79 
              iowrite32(0U,ioaddr + 104U);
              
#line 80 
              iowrite32(262143U,ioaddr + 112U);
              
#line 81 
              iowrite16((unsigned short)((int)t21142_csr15[(int)dev->if_port]),ioaddr + 120U);
              
#line 82 
              iowrite32((unsigned int)t21142_csr13[(int)dev->if_port],ioaddr + 104U);
            }
            else {
              
#line 85 
              new_csr6 = -2088370176;
              
#line 86 
              dev->if_port = (unsigned char)3U;
              
#line 87 
              iowrite32(0U,ioaddr + 104U);
              
#line 88 
              iowrite32(262143U,ioaddr + 112U);
              
#line 89 
              iowrite16((unsigned short)8,ioaddr + 120U);
              
#line 90 
              iowrite32(1U,ioaddr + 104U);
            }
            
#line 92 
            if (tulip_debug > 1) 
#line 93 
                                 _dev_info((struct device const *)(& dev->dev),"Testing new 21143 media %s\n",medianame[(int)dev->if_port]); else ;
            
#line 95 
            if ((tp->csr6 & 4294967082U) != (unsigned int)new_csr6) {
              
#line 96 
              tp->csr6 &= 213U;
              
#line 97 
              tp->csr6 |= (unsigned int)new_csr6;
              
#line 98 
              iowrite32(769U,ioaddr + 96U);
              
#line 99 
              tulip_restart_rxtx_2(tp);
            }
            else ;
            
#line 101 
            next_tick = 750;
          }
          else ;
  
#line 107 
  ldv_mod_timer_72_0(& tp->timer,(unsigned long)next_tick + jiffies);
  
#line 108 
  return;
}


#line 111  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/21142.c"
void t21142_start_nway(struct net_device *dev)
{
  
#line 113 
  struct tulip_private *tp = netdev_priv((struct net_device const *)dev);
  
#line 114 
  void *ioaddr = tp->base_addr;
  
#line 115 
  int csr14 = ((((int)tp->sym_advertise << 9) & 983040) | (((int)tp->sym_advertise << 1) & 64)) | 65471;
  
#line 118 
  dev->if_port = (unsigned char)0U;
  
#line 119 
  tp->mediasense = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U;
  
#line 119 
  tp->nway = tp->mediasense;
  
#line 120 
  tp->lpar = (unsigned short)0U;
  
#line 120 
  tp->nwayset = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U;
  
#line 121 
  if (tulip_debug > 1) {
    
#line 122 
    struct _ddebug descriptor = {.modname = "tulip", .function = "t21142_start_nway", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/21142.c", .format = "Restarting 21143 autonegotiation, csr14=%08x\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))123U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))1U};
    
#line 122 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 122 
                                                        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)dev,"Restarting 21143 autonegotiation, csr14=%08x\n",csr14); else ;
  }
  else ;
  
#line 124 
  iowrite32(1U,ioaddr + 104U);
  
#line 125 
  __const_udelay(429500UL);
  
#line 126 
  iowrite32((unsigned int)csr14,ioaddr + 112U);
  
#line 127 
  tp->csr6 = ((unsigned int)((int)tp->sym_advertise << 3) & 512U) | 2185363456U;
  
#line 128 
  iowrite32(tp->csr6,ioaddr + 48U);
  
#line 129 
  if (tp->mtable != (struct mediatable *)0 && (tp->mtable)->csr15dir != 0U) {
    
#line 130 
    iowrite32((tp->mtable)->csr15dir,ioaddr + 120U);
    
#line 131 
    iowrite32((tp->mtable)->csr15val,ioaddr + 120U);
  }
  else 
#line 133 
       iowrite16((unsigned short)8,ioaddr + 120U);
  
#line 134 
  iowrite32(4865U,ioaddr + 96U);
  
#line 135 
  return;
}


#line 139  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/21142.c"
void t21142_lnk_change(struct net_device *dev, int csr5)
{
  unsigned int tmp_0;
  unsigned int tmp_1;
  
#line 141 
  struct tulip_private *tp = netdev_priv((struct net_device const *)dev);
  
#line 142 
  void *ioaddr = tp->base_addr;
  
#line 143 
  tmp_0 = ioread32(ioaddr + 96U);
  
#line 143 
  int csr12 = (int)tmp_0;
  
#line 144 
  tmp_1 = ioread32(ioaddr + 112U);
  
#line 144 
  int csr14 = (int)tmp_1;
  
#line 147 
  if ((csr14 & 128) != 0 && (csr12 & 28672) != 20480) 
#line 148 
                                                      csr12 |= 6; else ;
  
#line 149 
  if (tulip_debug > 1) 
#line 150 
                       _dev_info((struct device const *)(& dev->dev),"21143 link status interrupt %08x, CSR5 %x, %08x\n",csr12,csr5,csr14); else ;
  
#line 155 
  if (((unsigned int)*((unsigned char *)tp + 3525UL) != 0U && (unsigned int)*((unsigned char *)tp + 3525UL) == 0U) && (csr12 & 28672) == 20480) {
    
#line 156 
    int setup_done = 0;
    
#line 157 
    int negotiated = (int)tp->sym_advertise & (csr12 >> 16);
    
#line 158 
    tp->lpar = (unsigned short)(csr12 >> 16);
    
#line 159 
    tp->nwayset = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U;
    
#line 161 
    if ((csr12 & 32768) == 0) 
#line 161 
                              dev->if_port = (unsigned char)0U;
    else 
      
#line 162 
      if ((negotiated & 256) != 0) 
#line 162 
                                   dev->if_port = (unsigned char)5U;
      else 
        
#line 163 
        if ((negotiated & 128) != 0) 
#line 163 
                                     dev->if_port = (unsigned char)3U;
        else 
          
#line 164 
          if ((negotiated & 64) != 0) 
#line 164 
                                      dev->if_port = (unsigned char)4U;
          else 
            
#line 165 
            if ((negotiated & 32) != 0) 
#line 165 
                                        dev->if_port = (unsigned char)0U;
            else {
              
#line 167 
              tp->nwayset = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U;
              
#line 168 
              if ((csr12 & 2) == 0 && ((int)tp->sym_advertise & 384) != 0) 
                
#line 169 
                dev->if_port = (unsigned char)3U; else ;
            }
    
#line 171 
    tp->full_duplex = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))((int)tulip_media_cap[(int)dev->if_port] >> 1);
    
#line 173 
    if (tulip_debug > 1) 
      
#line 174 
      if ((unsigned int)*((unsigned char *)tp + 3525UL) != 0U) 
#line 175 
                                                               _dev_info((struct device const *)(& dev->dev),"Switching to %s based on link negotiation %04x & %04x = %04x\n",medianame[(int)dev->if_port],(int)tp->sym_advertise,(int)tp->lpar,negotiated); else 
                                                                    
#line 181 
                                                                    _dev_info((struct device const *)(& dev->dev),"Autonegotiation failed, using %s, link beat status %04x\n",medianame[(int)dev->if_port],csr12);
    else ;
    
#line 186 
    if (tp->mtable != (struct mediatable *)0) {
      int i;
      
#line 188 
      i = 0;
      
#line 188 
      goto ldv_45339;
      ldv_45338: 
#line 189 
      ;
      
#line 189 
      if ((int)(tp->mtable)->mleaf[i].media == (int)dev->if_port) {
        
#line 190 
        int startup = (tp->chip_id != 3 || (tp->revision != 48 && tp->revision != 65)) != 0;
        
#line 191 
        tp->cur_index = i;
        
#line 192 
        tulip_select_media(dev,startup);
        
#line 193 
        setup_done = 1;
        
#line 194 
        goto ldv_45337;
      }
      else ;
      
#line 188 
      i += 1;
      ldv_45339: 
#line 189 
      ;
      
#line 188 
      if ((int)(tp->mtable)->leafcount > i) 
#line 190 
                                            goto ldv_45338; else 
#line 193 
                                                                 goto ldv_45337;
      ldv_45337: 
#line 194 
      ;
    }
    else ;
    
#line 197 
    if (setup_done == 0) {
      unsigned int tmp_2;
      
#line 198 
      if (((int)dev->if_port & 1) != 0) 
#line 198 
                                        tmp_2 = 2207121408U; else 
#line 198 
                                                                  tmp_2 = 2185363456U;
      
#line 198 
      tp->csr6 = tmp_2 | (tp->csr6 & 8447U);
      
#line 199 
      if ((unsigned int)*((unsigned char *)tp + 3524UL) != 0U) 
#line 200 
                                                               tp->csr6 |= 512U; else ;
      
#line 201 
      iowrite32(1U,ioaddr + 104U);
    }
    else ;
    
#line 209 
    tulip_start_rxtx(tp);
    
#line 210 
    if (tulip_debug > 2) {
      
#line 211 
      struct _ddebug descriptor = {.modname = "tulip", .function = "t21142_lnk_change", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/21142.c", .format = " Setting CSR6 %08x/%x CSR12 %08x\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))213U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))1U};
      
#line 211 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
        unsigned int tmp_3;
        unsigned int tmp_4;
        
#line 211 
        tmp_3 = ioread32(ioaddr + 96U);
        
#line 211 
        tmp_4 = ioread32(ioaddr + 48U);
        
#line 211 
        ;
        
#line 211 
        ;
        
#line 211 
        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)dev," Setting CSR6 %08x/%x CSR12 %08x\n",tp->csr6,tmp_4,tmp_3);
      }
      else ;
    }
    else ;
  }
  else 
    
#line 214 
    if (((((unsigned int)*((unsigned char *)tp + 3525UL) != 0U && (csr5 & 134217728) != 0) && ((unsigned int)dev->if_port == 3U || (unsigned int)dev->if_port == 5U)) && (csr12 & 2) != 0) || ((unsigned int)*((unsigned char *)tp + 3525UL) != 0U && (csr5 & 4096) != 0)) {
      
#line 219 
      ldv_del_timer_sync_73(& tp->timer);
      
#line 220 
      t21142_start_nway(dev);
      
#line 221 
      tp->timer.expires = jiffies + 750UL;
      
#line 222 
      add_timer(& tp->timer);
    }
    else 
      
#line 223 
      if ((unsigned int)dev->if_port == 3U || (unsigned int)dev->if_port == 5U) {
        
#line 224 
        if (tulip_debug > 1) {
          char *tmp_5;
          
#line 225 
          if ((csr12 & 2) != 0) 
#line 225 
                                tmp_5 = (char *)"failed"; else 
#line 225 
                                                               tmp_5 = (char *)"good";
          
#line 225 
          ;
          
#line 225 
          ;
          
#line 225 
          _dev_info((struct device const *)(& dev->dev),"21143 %s link beat %s\n",medianame[(int)dev->if_port],tmp_5);
        }
        else ;
        
#line 228 
        if ((csr12 & 2) != 0 && (unsigned int)*((unsigned char *)tp + 3525UL) == 0U) {
          
#line 229 
          ldv_del_timer_sync_74(& tp->timer);
          
#line 230 
          t21142_start_nway(dev);
          
#line 231 
          tp->timer.expires = jiffies + 750UL;
          
#line 232 
          add_timer(& tp->timer);
        }
        else 
          
#line 233 
          if ((unsigned int)dev->if_port == 5U) 
#line 234 
                                                iowrite32((unsigned int)csr14 & 4294967167U,ioaddr + 112U); else ;
      }
      else 
        
#line 235 
        if ((unsigned int)dev->if_port == 0U || (unsigned int)dev->if_port == 4U) {
          
#line 236 
          if ((csr12 & 4) == 0) 
#line 237 
                                _dev_info((struct device const *)(& dev->dev),"21143 10baseT link beat good\n"); else ;
        }
        else 
          
#line 238 
          if ((csr12 & 4) == 0) {
            
#line 239 
            if (tulip_debug != 0) 
#line 240 
                                  _dev_info((struct device const *)(& dev->dev),"21143 10mbps sensed media\n"); else ;
            
#line 241 
            dev->if_port = (unsigned char)0U;
          }
          else 
            
#line 242 
            if ((unsigned int)*((unsigned char *)tp + 3525UL) != 0U) {
              
#line 243 
              if (tulip_debug != 0) 
#line 244 
                                    _dev_info((struct device const *)(& dev->dev),"21143 using NWay-set %s, csr6 %08x\n",medianame[(int)dev->if_port],tp->csr6); else ;
            }
            else {
              
#line 247 
              if (tulip_debug != 0) 
#line 248 
                                    _dev_info((struct device const *)(& dev->dev),"21143 100baseTx sensed media\n"); else ;
              
#line 249 
              dev->if_port = (unsigned char)3U;
              
#line 250 
              tp->csr6 = (tp->csr6 & 8447U) | 2207121408U;
              
#line 251 
              iowrite32(262015U,ioaddr + 112U);
              
#line 252 
              iowrite32(769U,ioaddr + 96U);
              
#line 253 
              tulip_restart_rxtx_2(tp);
            }
  
#line 255 
  return;
}


#line 62  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/weaver/.tmp_21142.c.aux"
int ldv_emg_del_timer_sync(struct timer_list *arg0);


#line 738  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/weaver/.tmp_21142.c.aux"
static int ldv_mod_timer_72_0(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2)
{
  int tmp;
  
#line 742 
  tmp = ldv_emg_mod_timer(ldv_func_arg1,ldv_func_arg2);
  
#line 742 
  return tmp;
}


#line 746  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/weaver/.tmp_21142.c.aux"
static int ldv_del_timer_sync_73(struct timer_list *ldv_func_arg1)
{
  int tmp;
  
#line 750 
  tmp = ldv_emg_del_timer_sync(ldv_func_arg1);
  
#line 750 
  return tmp;
}


#line 754  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/weaver/.tmp_21142.c.aux"
static int ldv_del_timer_sync_74(struct timer_list *ldv_func_arg1)
{
  int tmp;
  
#line 758 
  tmp = ldv_emg_del_timer_sync(ldv_func_arg1);
  
#line 758 
  return tmp;
}


#line 173  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timer.h"
static int ldv_mod_timer_72_1(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2);


#line 232 
static int ldv_del_timer_sync_73_0(struct timer_list *ldv_func_arg1);


#line 236 
static int ldv_del_timer_sync_74_0(struct timer_list *ldv_func_arg1);


#line 240 
static int ldv_del_timer_sync_75(struct timer_list *ldv_func_arg1);


#line 478  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/tulip.h"
void pnic2_lnk_change(struct net_device *dev, int csr5);


#line 479 
void pnic2_timer(unsigned long data);


#line 480 
void pnic2_start_nway(struct net_device *dev);


#line 530  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/tulip.h"
__inline static void tulip_stop_rxtx_3(struct tulip_private *tp)
{
  
#line 532 
  void *ioaddr = tp->base_addr;
  
#line 533 
  u32 csr6 = ioread32(ioaddr + 48U);
  
#line 535 
  if ((csr6 & 8194U) != 0U) {
    
#line 536 
    unsigned int i = 130U;
    
#line 537 
    iowrite32(csr6 & 4294959101U,ioaddr + 48U);
    
#line 538 
    ldv_inline_asm();
    
#line 543 
    goto ldv_45295;
    ldv_45294: 
#line 544 
    ;
    
#line 544 
    __const_udelay(42950UL);
    ldv_45295: 
#line 546 
    ;
    
#line 543 
    i -= 1U;
    
#line 543 
    if (i != 0U) {
      unsigned int tmp_0;
      
#line 543 
      tmp_0 = ioread32(ioaddr + 40U);
      
#line 543 
      if ((tmp_0 & 8257536U) != 0U) 
#line 545 
                                    goto ldv_45294; else 
#line 548 
                                                         goto ldv_45296;
    }
    else 
#line 548 
         goto ldv_45296;
    ldv_45296: 
#line 549 
    ;
    
#line 546 
    if (i == 0U) {
      
#line 547 
      struct _ddebug descriptor = {.modname = "tulip", .function = "tulip_stop_rxtx", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/tulip.h", .format = "tulip_stop_rxtx() failed (CSR5 0x%x CSR6 0x%x)\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))549U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))1U};
      
#line 547 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
        unsigned int tmp_1;
        unsigned int tmp_2;
        
#line 547 
        tmp_1 = ioread32(ioaddr + 48U);
        
#line 547 
        tmp_2 = ioread32(ioaddr + 40U);
        
#line 547 
        ;
        
#line 547 
        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)tp->dev,"tulip_stop_rxtx() failed (CSR5 0x%x CSR6 0x%x)\n",tmp_2,tmp_1);
      }
      else ;
    }
    else ;
  }
  else ;
  
#line 550 
  return;
}


#line 553  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/tulip.h"
__inline static void tulip_restart_rxtx_3(struct tulip_private *tp)
{
  
#line 555 
  tulip_stop_rxtx_3(tp);
  
#line 556 
  __const_udelay(21475UL);
  
#line 557 
  tulip_start_rxtx(tp);
  
#line 558 
  return;
}


#line 79  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/pnic2.c"
void pnic2_timer(unsigned long data)
{
  
#line 81 
  struct net_device *dev = (struct net_device *)data;
  
#line 82 
  struct tulip_private *tp = netdev_priv((struct net_device const *)dev);
  
#line 83 
  void *ioaddr = tp->base_addr;
  
#line 84 
  int next_tick = 15000;
  
#line 86 
  if (tulip_debug > 3) {
    unsigned int tmp_0;
    
#line 87 
    tmp_0 = ioread32(ioaddr + 96U);
    
#line 87 
    ;
    
#line 87 
    _dev_info((struct device const *)(& dev->dev),"PNIC2 negotiation status %08x\n",tmp_0);
  }
  else ;
  
#line 90 
  if (next_tick != 0) 
#line 91 
                      ldv_mod_timer_72_1(& tp->timer,(unsigned long)next_tick + jiffies); else ;
  
#line 92 
  return;
}


#line 96  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/pnic2.c"
void pnic2_start_nway(struct net_device *dev)
{
  int csr14;
  int csr12;
  unsigned int tmp_0;
  unsigned int tmp_1;
  
#line 98 
  struct tulip_private *tp = netdev_priv((struct net_device const *)dev);
  
#line 99 
  void *ioaddr = tp->base_addr;
  
#line 108 
  tmp_0 = ioread32(ioaddr + 112U);
  
#line 108 
  csr14 = (int)tmp_0 & -987591;
  
#line 111 
  if (((int)tp->sym_advertise & 256) != 0) 
#line 111 
                                           csr14 |= 131072; else ;
  
#line 114 
  if (((int)tp->sym_advertise & 128) != 0) 
#line 114 
                                           csr14 |= 65536; else ;
  
#line 117 
  if (((int)tp->sym_advertise & 32) != 0) 
#line 117 
                                          csr14 |= 64; else ;
  
#line 122 
  csr14 |= 4484;
  
#line 124 
  if (tulip_debug > 1) {
    
#line 125 
    struct _ddebug descriptor = {.modname = "tulip", .function = "pnic2_start_nway", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/pnic2.c", .format = "Restarting PNIC2 autonegotiation, csr14=%08x\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))126U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))1U};
    
#line 125 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 125 
                                                        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)dev,"Restarting PNIC2 autonegotiation, csr14=%08x\n",csr14); else ;
  }
  else ;
  
#line 129 
  dev->if_port = (unsigned char)0U;
  
#line 130 
  tp->mediasense = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U;
  
#line 130 
  tp->nway = tp->mediasense;
  
#line 131 
  tp->lpar = (unsigned short)0U;
  
#line 131 
  tp->nwayset = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U;
  
#line 135 
  tp->csr6 = ioread32(ioaddr + 48U);
  
#line 136 
  if (tulip_debug > 1) {
    
#line 137 
    struct _ddebug descriptor_0 = {.modname = "tulip", .function = "pnic2_start_nway", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/pnic2.c", .format = "On Entry to Nway, csr6=%08x\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))137U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))1U};
    
#line 137 
    if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 137 
                                                          __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)dev,"On Entry to Nway, csr6=%08x\n",tp->csr6); else ;
  }
  else ;
  
#line 142 
  tp->csr6 &= 4265333245U;
  
#line 146 
  if (((int)tp->sym_advertise & 64) != 0) 
#line 146 
                                          tp->csr6 |= 512U; else ;
  
#line 152 
  tp->csr6 |= 16777216U;
  
#line 153 
  iowrite32((unsigned int)csr14,ioaddr + 112U);
  
#line 154 
  iowrite32(tp->csr6,ioaddr + 48U);
  
#line 155 
  __const_udelay(429500UL);
  
#line 163 
  tmp_1 = ioread32(ioaddr + 96U);
  
#line 163 
  csr12 = (int)tmp_1 & -28673;
  
#line 164 
  csr12 |= 4096;
  
#line 165 
  iowrite32((unsigned int)csr12,ioaddr + 96U);
  
#line 166 
  return;
}


#line 170  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/pnic2.c"
void pnic2_lnk_change(struct net_device *dev, int csr5)
{
  int csr14;
  unsigned int tmp_0;
  unsigned int tmp_10;
  unsigned int tmp_11;
  
#line 172 
  struct tulip_private *tp = netdev_priv((struct net_device const *)dev);
  
#line 173 
  void *ioaddr = tp->base_addr;
  
#line 177 
  tmp_0 = ioread32(ioaddr + 96U);
  
#line 177 
  int csr12 = (int)tmp_0;
  
#line 179 
  if (tulip_debug > 1) {
    unsigned int tmp_1;
    
#line 180 
    tmp_1 = ioread32(ioaddr + 112U);
    
#line 180 
    ;
    
#line 180 
    ;
    
#line 180 
    ;
    
#line 180 
    _dev_info((struct device const *)(& dev->dev),"PNIC2 link status interrupt %08x,  CSR5 %x, %08x\n",csr12,csr5,tmp_1);
  }
  else ;
  
#line 187 
  if ((unsigned int)*((unsigned char *)tp + 3525UL) != 0U && (unsigned int)*((unsigned char *)tp + 3525UL) == 0U) 
    
#line 191 
    if ((csr12 & 28672) == 20480) {
      unsigned int tmp_2;
      unsigned int tmp_3;
      
#line 204 
      int negotiated = ((csr12 >> 16) & 480) & (int)tp->sym_advertise;
      
#line 205 
      tp->lpar = (unsigned short)(csr12 >> 16);
      
#line 206 
      tp->nwayset = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U;
      
#line 208 
      if ((negotiated & 256) != 0) 
#line 208 
                                   dev->if_port = (unsigned char)5U;
      else 
        
#line 209 
        if ((negotiated & 128) != 0) 
#line 209 
                                     dev->if_port = (unsigned char)3U;
        else 
          
#line 210 
          if ((negotiated & 64) != 0) 
#line 210 
                                      dev->if_port = (unsigned char)4U;
          else 
            
#line 211 
            if ((negotiated & 32) != 0) 
#line 211 
                                        dev->if_port = (unsigned char)0U;
            else {
              
#line 213 
              if (tulip_debug > 1) 
#line 214 
                                   _dev_info((struct device const *)(& dev->dev),"funny autonegotiate result csr12 %08x advertising %04x\n",csr12,(int)tp->sym_advertise); else ;
              
#line 217 
              tp->nwayset = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U;
              
#line 219 
              if ((csr12 & 2) == 0 && ((int)tp->sym_advertise & 384) != 0) 
                
#line 220 
                dev->if_port = (unsigned char)3U; else ;
            }
      
#line 224 
      tp->full_duplex = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U;
      
#line 225 
      if ((unsigned int)dev->if_port + 252U <= 1U) 
#line 226 
                                                   tp->full_duplex = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U; else ;
      
#line 228 
      if (tulip_debug > 1) {
        
#line 229 
        if ((unsigned int)*((unsigned char *)tp + 3525UL) != 0U) 
#line 230 
                                                                 _dev_info((struct device const *)(& dev->dev),"Switching to %s based on link negotiation %04x & %04x = %04x\n",medianame[(int)dev->if_port],(int)tp->sym_advertise,(int)tp->lpar,negotiated); else ;
      }
      else ;
      
#line 241 
      tmp_2 = ioread32(ioaddr + 112U);
      
#line 241 
      csr14 = (int)tmp_2 & -129;
      
#line 242 
      iowrite32((unsigned int)csr14,ioaddr + 112U);
      
#line 253 
      tmp_3 = ioread32(ioaddr + 48U);
      
#line 253 
      tp->csr6 = tmp_3 & 4265333245U;
      
#line 261 
      if (((int)dev->if_port & 1) != 0) 
#line 261 
                                        tp->csr6 |= 25427968U; else 
#line 262 
                                                                    tp->csr6 |= 4194304U;
      
#line 265 
      if ((unsigned int)*((unsigned char *)tp + 3524UL) != 0U) 
#line 265 
                                                               tp->csr6 |= 512U; else ;
      
#line 267 
      iowrite32(1U,ioaddr + 104U);
      
#line 269 
      if (tulip_debug > 2) {
        
#line 270 
        struct _ddebug descriptor = {.modname = "tulip", .function = "pnic2_lnk_change", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/pnic2.c", .format = "Setting CSR6 %08x/%x CSR12 %08x\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))273U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))1U};
        
#line 270 
        if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
          unsigned int tmp_4;
          unsigned int tmp_5;
          
#line 270 
          tmp_4 = ioread32(ioaddr + 96U);
          
#line 270 
          tmp_5 = ioread32(ioaddr + 48U);
          
#line 270 
          ;
          
#line 270 
          ;
          
#line 270 
          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)dev,"Setting CSR6 %08x/%x CSR12 %08x\n",tp->csr6,tmp_5,tmp_4);
        }
        else ;
      }
      else ;
      
#line 278 
      tulip_start_rxtx(tp);
      
#line 280 
      goto return_label;
    }
    else {
      unsigned int tmp_6;
      unsigned int tmp_7;
      
#line 283 
      _dev_info((struct device const *)(& dev->dev),"Autonegotiation failed, using %s, link beat status %04x\n",medianame[(int)dev->if_port],csr12);
      
#line 290 
      tmp_6 = ioread32(ioaddr + 112U);
      
#line 290 
      csr14 = (int)tmp_6 & -129;
      
#line 291 
      iowrite32((unsigned int)csr14,ioaddr + 112U);
      
#line 300 
      dev->if_port = (unsigned char)0U;
      
#line 301 
      tp->nway = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U;
      
#line 302 
      tp->nwayset = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U;
      
#line 307 
      tmp_7 = ioread32(ioaddr + 48U);
      
#line 307 
      tp->csr6 = tmp_7 & 4265333245U;
      
#line 308 
      tp->csr6 |= 4194304U;
      
#line 310 
      tulip_restart_rxtx_3(tp);
      
#line 312 
      goto return_label;
    }
  else ;
  
#line 317 
  if (((((unsigned int)*((unsigned char *)tp + 3525UL) != 0U && (csr5 & 134217728) != 0) && ((unsigned int)dev->if_port == 3U || (unsigned int)dev->if_port == 5U)) && (csr12 & 2) != 0) || ((unsigned int)*((unsigned char *)tp + 3525UL) != 0U && (csr5 & 4096) != 0)) {
    
#line 323 
    if (tulip_debug > 2) {
      
#line 324 
      struct _ddebug descriptor_0 = {.modname = "tulip", .function = "pnic2_lnk_change", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/pnic2.c", .format = "Ugh! Link blew?\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))324U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))1U};
      
#line 324 
      if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 324 
                                                            __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)dev,"Ugh! Link blew?\n"); else ;
    }
    else ;
    
#line 326 
    ldv_del_timer_sync_73_0(& tp->timer);
    
#line 327 
    pnic2_start_nway(dev);
    
#line 328 
    tp->timer.expires = jiffies + 750UL;
    
#line 329 
    add_timer(& tp->timer);
    
#line 331 
    goto return_label;
  }
  else ;
  
#line 335 
  if ((unsigned int)dev->if_port == 3U || (unsigned int)dev->if_port == 5U) {
    
#line 339 
    if (tulip_debug > 1) {
      char *tmp_8;
      
#line 340 
      if ((csr12 & 2) != 0) 
#line 340 
                            tmp_8 = (char *)"failed"; else 
#line 340 
                                                           tmp_8 = (char *)"good";
      
#line 340 
      ;
      
#line 340 
      ;
      
#line 340 
      _dev_info((struct device const *)(& dev->dev),"PNIC2 %s link beat %s\n",medianame[(int)dev->if_port],tmp_8);
    }
    else ;
    
#line 346 
    tp->nway = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U;
    
#line 347 
    tp->nwayset = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U;
    
#line 350 
    if ((csr12 & 2) != 0 && (unsigned int)*((unsigned char *)tp + 3525UL) == 0U) {
      
#line 351 
      ldv_del_timer_sync_74_0(& tp->timer);
      
#line 352 
      pnic2_start_nway(dev);
      
#line 353 
      tp->timer.expires = jiffies + 750UL;
      
#line 354 
      add_timer(& tp->timer);
    }
    else ;
    
#line 357 
    goto return_label;
  }
  else ;
  
#line 360 
  if ((unsigned int)dev->if_port == 0U || (unsigned int)dev->if_port == 4U) {
    
#line 364 
    if (tulip_debug > 1) {
      char *tmp_9;
      
#line 365 
      if ((csr12 & 4) != 0) 
#line 365 
                            tmp_9 = (char *)"failed"; else 
#line 365 
                                                           tmp_9 = (char *)"good";
      
#line 365 
      ;
      
#line 365 
      ;
      
#line 365 
      _dev_info((struct device const *)(& dev->dev),"PNIC2 %s link beat %s\n",medianame[(int)dev->if_port],tmp_9);
    }
    else ;
    
#line 370 
    tp->nway = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U;
    
#line 371 
    tp->nwayset = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U;
    
#line 374 
    if ((csr12 & 4) != 0 && (unsigned int)*((unsigned char *)tp + 3525UL) == 0U) {
      
#line 375 
      ldv_del_timer_sync_75(& tp->timer);
      
#line 376 
      pnic2_start_nway(dev);
      
#line 377 
      tp->timer.expires = jiffies + 750UL;
      
#line 378 
      add_timer(& tp->timer);
    }
    else ;
    
#line 381 
    goto return_label;
  }
  else ;
  
#line 385 
  if (tulip_debug > 1) 
#line 386 
                       _dev_info((struct device const *)(& dev->dev),"PNIC2 Link Change Default?\n"); else ;
  
#line 389 
  dev->if_port = (unsigned char)0U;
  
#line 392 
  tmp_10 = ioread32(ioaddr + 112U);
  
#line 392 
  csr14 = (int)tmp_10 & -129;
  
#line 393 
  iowrite32((unsigned int)csr14,ioaddr + 112U);
  
#line 398 
  tmp_11 = ioread32(ioaddr + 48U);
  
#line 398 
  tp->csr6 = tmp_11 & 4265333245U;
  
#line 399 
  tp->csr6 |= 4194304U;
  
#line 401 
  tulip_restart_rxtx_3(tp);
  return_label: 
#line 402 
                return;
}


#line 738  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/weaver/.tmp_pnic2.c.aux"
static int ldv_mod_timer_72_1(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2)
{
  int tmp;
  
#line 742 
  tmp = ldv_emg_mod_timer(ldv_func_arg1,ldv_func_arg2);
  
#line 742 
  return tmp;
}


#line 746  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/weaver/.tmp_pnic2.c.aux"
static int ldv_del_timer_sync_73_0(struct timer_list *ldv_func_arg1)
{
  int tmp;
  
#line 750 
  tmp = ldv_emg_del_timer_sync(ldv_func_arg1);
  
#line 750 
  return tmp;
}


#line 754  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/weaver/.tmp_pnic2.c.aux"
static int ldv_del_timer_sync_74_0(struct timer_list *ldv_func_arg1)
{
  int tmp;
  
#line 758 
  tmp = ldv_emg_del_timer_sync(ldv_func_arg1);
  
#line 758 
  return tmp;
}


#line 762  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/weaver/.tmp_pnic2.c.aux"
static int ldv_del_timer_sync_75(struct timer_list *ldv_func_arg1)
{
  int tmp;
  
#line 766 
  tmp = ldv_emg_del_timer_sync(ldv_func_arg1);
  
#line 766 
  return tmp;
}


#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/export.h"
extern struct module __this_module;


#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/bitops.h"
__inline static void set_bit(long nr, unsigned long volatile *addr)
{
  
#line 74 
  if (0 != 0) 
#line 76 
              ldv_inline_asm(); else 
#line 79 
                                     ldv_inline_asm();
  
#line 80 
  return;
}


#line 94  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/bitops.h"
__inline static void __set_bit(long nr, unsigned long volatile *addr)
{
  
#line 96 
  ldv_inline_asm();
  
#line 97 
  return;
}


#line 55  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/byteorder/little_endian.h"
__inline static __u32 __le32_to_cpup(__le32 const *p)
{
  __u32 __retres;
  
#line 57 
  __retres = *p;
  
#line 57 
  return __retres;
}


#line 67  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/bitops/le.h"
__inline static void __set_bit_le(int nr, void *addr)
{
  
#line 69 
  __set_bit((long)nr,(unsigned long volatile *)addr);
  
#line 70 
  return;
}


#line 402  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernel.h"
int sprintf(char *, char const * , ...);


#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list.h"
__inline static void INIT_LIST_HEAD(struct list_head *list)
{
  
#line 27 
  list->next = list;
  
#line 28 
  list->prev = list;
  
#line 29 
  return;
}


#line 56  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/string_64.h"
void *memset(void *, int, size_t);


#line 65 
char *strcpy(char *, char const *);


#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/string.h"
size_t strlcpy(char *, char const *, size_t);


#line 280  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockdep.h"
void lockdep_init_map(struct lockdep_map *, char const *, struct lock_class_key *, int);


#line 93  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
void __raw_spin_lock_init(raw_spinlock_t *, char const *, struct lock_class_key *);


#line 299  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
__inline static raw_spinlock_t *spinlock_check(spinlock_t *lock)
{
  raw_spinlock_t *__retres;
  
#line 301 
  __retres = & lock->__anonCompField_spinlock_18.rlock;
  
#line 301 
  return __retres;
}


#line 442  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_unlock_irqrestore_0(spinlock_t *lock, unsigned long flags)
{
  {
    unsigned long __dummy;
    unsigned long __dummy2;
    
  }
  
#line 444 
  _raw_spin_unlock_irqrestore(& lock->__anonCompField_spinlock_18.rlock,flags);
  
#line 445 
  return;
}


#line 474 
static void ldv_spin_unlock_irqrestore_76_0(spinlock_t *lock, unsigned long flags);


#line 478 
static void ldv_spin_unlock_irqrestore_78(spinlock_t *lock, unsigned long flags);


#line 482 
static void ldv_spin_unlock_irqrestore_82(spinlock_t *lock, unsigned long flags);


#line 486 
static void ldv_spin_unlock_irqrestore_85(spinlock_t *lock, unsigned long flags);


#line 490 
static void ldv_spin_unlock_irqrestore_87(spinlock_t *lock, unsigned long flags);


#line 70  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/weaver/.tmp_tulip_core.c.aux"
static void ldv___ldv_spin_lock_74(spinlock_t *ldv_func_arg1);


#line 74 
static void ldv___ldv_spin_lock_77(spinlock_t *ldv_func_arg1);


#line 78 
static void ldv___ldv_spin_lock_81(spinlock_t *ldv_func_arg1);


#line 82 
static void ldv___ldv_spin_lock_84(spinlock_t *ldv_func_arg1);


#line 86 
static void ldv___ldv_spin_lock_86(spinlock_t *ldv_func_arg1);


#line 88  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timer.h"
void init_timer_key(struct timer_list *, unsigned int, char const *, struct lock_class_key *);


#line 232 
static int ldv_del_timer_sync_79(struct timer_list *ldv_func_arg1);


#line 236 
static int ldv_del_timer_sync_80(struct timer_list *ldv_func_arg1);


#line 181  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/workqueue.h"
void __init_work(struct work_struct *, int);


#line 444 
bool cancel_work_sync(struct work_struct *);


#line 560 
static bool ldv_schedule_work_72(struct work_struct *work);


#line 564 
static bool ldv_schedule_work_75(struct work_struct *work);


#line 29  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/iomap.h"
unsigned int ioread16(void *);


#line 76 
void pci_iounmap(struct pci_dev *, void *);


#line 17  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/pci_iomap.h"
void *pci_iomap(struct pci_dev *, int, unsigned long);


#line 87  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
__inline static char const *kobject_name(struct kobject const *kobj)
{
  char const *__retres;
  
#line 89 
  __retres = kobj->name;
  
#line 89 
  return __retres;
}


#line 104  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm_wakeup.h"
int device_set_wakeup_enable(struct device *, bool);


#line 833  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
__inline static char const *dev_name(struct device const *dev)
{
  char const *__retres;
  char const *tmp;
  
#line 836 
  if (dev->init_name != (char const *)0) {
    
#line 837 
    __retres = dev->init_name;
    
#line 837 
    goto return_label;
  }
  else ;
  
#line 839 
  tmp = kobject_name(& dev->kobj);
  
#line 839 
  __retres = tmp;
  return_label: 
#line 839 
                return __retres;
}


#line 864  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
__inline static void *dev_get_drvdata(struct device const *dev)
{
  void *__retres;
  
#line 866 
  __retres = dev->driver_data;
  
#line 866 
  return __retres;
}


#line 869  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
__inline static void dev_set_drvdata(struct device *dev, void *data)
{
  
#line 871 
  dev->driver_data = data;
  
#line 872 
  return;
}


#line 143  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/slab.h"
void kfree(void const *);


#line 857  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
int pci_dev_present(struct pci_device_id const *);


#line 859 
int pci_bus_read_config_byte(struct pci_bus *, unsigned int, int, u8 *);


#line 861 
int pci_bus_read_config_word(struct pci_bus *, unsigned int, int, u16 *);


#line 863 
int pci_bus_read_config_dword(struct pci_bus *, unsigned int, int, u32 *);


#line 869 
int pci_bus_write_config_dword(struct pci_bus *, unsigned int, int, u32);


#line 883  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
__inline static int pci_read_config_byte(struct pci_dev const *dev, int where, u8 *val)
{
  int tmp;
  
#line 885 
  tmp = pci_bus_read_config_byte(dev->bus,dev->devfn,where,val);
  
#line 885 
  return tmp;
}


#line 887  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
__inline static int pci_read_config_word(struct pci_dev const *dev, int where, u16 *val)
{
  int tmp;
  
#line 889 
  tmp = pci_bus_read_config_word(dev->bus,dev->devfn,where,val);
  
#line 889 
  return tmp;
}


#line 891  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
__inline static int pci_read_config_dword(struct pci_dev const *dev, int where, u32 *val)
{
  int tmp;
  
#line 894 
  tmp = pci_bus_read_config_dword(dev->bus,dev->devfn,where,val);
  
#line 894 
  return tmp;
}


#line 904  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
__inline static int pci_write_config_dword(struct pci_dev const *dev, int where, u32 val)
{
  int tmp;
  
#line 907 
  tmp = pci_bus_write_config_dword(dev->bus,dev->devfn,where,val);
  
#line 907 
  return tmp;
}


#line 951 
int pci_enable_device(struct pci_dev *);


#line 968 
void pci_disable_device(struct pci_dev *);


#line 971 
void pci_set_master(struct pci_dev *);


#line 978 
int pci_try_set_mwi(struct pci_dev *);


#line 979 
void pci_clear_mwi(struct pci_dev *);


#line 1026 
int pci_save_state(struct pci_dev *);


#line 1027 
void pci_restore_state(struct pci_dev *);


#line 1040 
int pci_set_power_state(struct pci_dev *, pci_power_t);


#line 1041 
pci_power_t pci_choose_state(struct pci_dev *, pm_message_t);


#line 1044 
int __pci_enable_wake(struct pci_dev *, pci_power_t, bool, bool);


#line 1053  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
__inline static int pci_enable_wake(struct pci_dev *dev, pci_power_t state, bool enable)
{
  int tmp;
  
#line 1056 
  tmp = __pci_enable_wake(dev,state,(_Bool)0,(_Bool)((bool)((int)enable) != 0));
  
#line 1056 
  return tmp;
}


#line 1094 
int pci_request_regions(struct pci_dev *, char const *);


#line 1096 
void pci_release_regions(struct pci_dev *);


#line 1146 
static int ldv___pci_register_driver_95(struct pci_driver *ldv_func_arg1, struct module *ldv_func_arg2, char const *ldv_func_arg3);


#line 1158 
static void ldv_pci_unregister_driver_96(struct pci_driver *ldv_func_arg1);


#line 131  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/dma-mapping.h"
void *dma_alloc_attrs(struct device *, size_t, dma_addr_t *, gfp_t, struct dma_attrs *);


#line 136 
void dma_free_attrs(struct device *, size_t, void *, dma_addr_t, struct dma_attrs *);


#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/pci-dma-compat.h"
__inline static void *pci_alloc_consistent(struct pci_dev *hwdev, size_t size, dma_addr_t *dma_handle)
{
  void *tmp_0;
  struct device *tmp;
  
#line 19 
  ;
  
#line 19 
  ;
  
#line 19 
  if (hwdev != (struct pci_dev *)0) 
#line 19 
                                    tmp = & hwdev->dev; else 
#line 19 
                                                             tmp = (struct device *)0;
  
#line 19 
  tmp_0 = dma_alloc_attrs(tmp,size,dma_handle,32U,(struct dma_attrs *)0);
  
#line 19 
  return tmp_0;
}


#line 31  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/pci-dma-compat.h"
__inline static void pci_free_consistent(struct pci_dev *hwdev, size_t size, void *vaddr, dma_addr_t dma_handle)
{
  struct device *tmp;
  
#line 34 
  ;
  
#line 34 
  ;
  
#line 34 
  ;
  
#line 34 
  if (hwdev != (struct pci_dev *)0) 
#line 34 
                                    tmp = & hwdev->dev; else 
#line 34 
                                                             tmp = (struct device *)0;
  
#line 34 
  dma_free_attrs(tmp,size,vaddr,dma_handle,(struct dma_attrs *)0);
  
#line 35 
  return;
}


#line 1471  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
__inline static void *pci_get_drvdata(struct pci_dev *pdev)
{
  void *tmp;
  
#line 1473 
  tmp = dev_get_drvdata((struct device const *)(& pdev->dev));
  
#line 1473 
  return tmp;
}


#line 1476  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
__inline static void pci_set_drvdata(struct pci_dev *pdev, void *data)
{
  
#line 1478 
  dev_set_drvdata(& pdev->dev,data);
  
#line 1479 
  return;
}


#line 1484  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
__inline static char const *pci_name(struct pci_dev const *pdev)
{
  char const *tmp;
  
#line 1486 
  tmp = dev_name(& pdev->dev);
  
#line 1486 
  return tmp;
}


#line 141  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/interrupt.h"
static int ldv_request_irq_73(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev);


#line 145 
static int ldv_request_irq_92(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev);


#line 157 
static void ldv_free_irq_83(unsigned int ldv_func_arg1, void *ldv_func_arg2);


#line 161 
static void ldv_free_irq_91(unsigned int ldv_func_arg1, void *ldv_func_arg2);


#line 45  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mii.h"
__inline static struct mii_ioctl_data *if_mii(struct ifreq *rq)
{
  struct mii_ioctl_data *__retres;
  
#line 47 
  __retres = (struct mii_ioctl_data *)(& rq->ifr_ifru);
  
#line 47 
  return __retres;
}


#line 496  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
void napi_disable(struct napi_struct *);


#line 505  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void napi_enable(struct napi_struct *n)
{
  int tmp;
  
#line 507 
  tmp = constant_test_bit(0L,(unsigned long const volatile *)(& n->state));
  
#line 507 
  if ((long)(tmp == 0) != 0L) {
    
#line 509 
    ldv_inline_asm();
    
#line 507 
    ;
  }
  else ;
  
#line 509 
  ldv_inline_asm();
  
#line 509 
  set_bit(0L,(unsigned long volatile *)(& n->state));
  
#line 510 
  return;
}


#line 1911 
void netif_napi_add(struct net_device *, struct napi_struct *, int (*)(struct napi_struct *, int ), int);


#line 2205 
static void ldv_free_netdev_90(struct net_device *ldv_func_arg1);


#line 2209 
static void ldv_free_netdev_94(struct net_device *ldv_func_arg1);


#line 2515  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void netif_tx_start_queue(struct netdev_queue *dev_queue)
{
  
#line 2517 
  set_bit(0L,(unsigned long volatile *)(& dev_queue->state));
  
#line 2518 
  return;
}


#line 2526  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void netif_start_queue(struct net_device *dev)
{
  struct netdev_queue *tmp;
  
#line 2528 
  tmp = netdev_get_tx_queue((struct net_device const *)dev,0U);
  
#line 2528 
  netif_tx_start_queue(tmp);
  
#line 2529 
  return;
}


#line 2769  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static bool netif_running(struct net_device const *dev)
{
  bool __retres;
  int tmp;
  
#line 2771 
  tmp = constant_test_bit(0L,(unsigned long const volatile *)(& dev->state));
  
#line 2771 
  __retres = (_Bool)(tmp != 0);
  
#line 2771 
  return __retres;
}


#line 3117 
void netif_device_detach(struct net_device *);


#line 3119 
void netif_device_attach(struct net_device *);


#line 3355 
static int ldv_register_netdev_89(struct net_device *ldv_func_arg1);


#line 3360 
static void ldv_unregister_netdev_93(struct net_device *ldv_func_arg1);


#line 12  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/unaligned/access_ok.h"
__inline static u32 get_unaligned_le32(void const *p)
{
  u32 tmp;
  
#line 14 
  tmp = __le32_to_cpup((__le32 const *)p);
  
#line 14 
  return tmp;
}


#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/unaligned/access_ok.h"
__inline static void put_unaligned_le16(u16 val, void *p)
{
  
#line 39 
  *((__le16 *)p) = val;
  
#line 40 
  return;
}


#line 42  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/unaligned/access_ok.h"
__inline static void put_unaligned_le32(u32 val, void *p)
{
  
#line 44 
  *((__le32 *)p) = val;
  
#line 45 
  return;
}


#line 484  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/tulip.h"
void tulip_parse_eeprom(struct net_device *dev);


#line 485 
int tulip_read_eeprom(struct net_device *dev, int location, int addr_len);


#line 510 
void tulip_media_task(struct work_struct *work);


#line 511 
void mxic_timer(unsigned long data);


#line 512 
void comet_timer(unsigned long data);


#line 530  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/tulip.h"
__inline static void tulip_stop_rxtx_4(struct tulip_private *tp)
{
  
#line 532 
  void *ioaddr = tp->base_addr;
  
#line 533 
  u32 csr6 = ioread32(ioaddr + 48U);
  
#line 535 
  if ((csr6 & 8194U) != 0U) {
    
#line 536 
    unsigned int i = 130U;
    
#line 537 
    iowrite32(csr6 & 4294959101U,ioaddr + 48U);
    
#line 538 
    ldv_inline_asm();
    
#line 543 
    goto ldv_46336;
    ldv_46335: 
#line 544 
    ;
    
#line 544 
    __const_udelay(42950UL);
    ldv_46336: 
#line 546 
    ;
    
#line 543 
    i -= 1U;
    
#line 543 
    if (i != 0U) {
      unsigned int tmp_0;
      
#line 543 
      tmp_0 = ioread32(ioaddr + 40U);
      
#line 543 
      if ((tmp_0 & 8257536U) != 0U) 
#line 545 
                                    goto ldv_46335; else 
#line 548 
                                                         goto ldv_46337;
    }
    else 
#line 548 
         goto ldv_46337;
    ldv_46337: 
#line 549 
    ;
    
#line 546 
    if (i == 0U) {
      
#line 547 
      struct _ddebug descriptor = {.modname = "tulip", .function = "tulip_stop_rxtx", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/tulip.h", .format = "tulip_stop_rxtx() failed (CSR5 0x%x CSR6 0x%x)\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))549U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))1U};
      
#line 547 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
        unsigned int tmp_1;
        unsigned int tmp_2;
        
#line 547 
        tmp_1 = ioread32(ioaddr + 48U);
        
#line 547 
        tmp_2 = ioread32(ioaddr + 40U);
        
#line 547 
        ;
        
#line 547 
        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)tp->dev,"tulip_stop_rxtx() failed (CSR5 0x%x CSR6 0x%x)\n",tmp_2,tmp_1);
      }
      else ;
    }
    else ;
  }
  else ;
  
#line 550 
  return;
}


#line 553  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/tulip.h"
__inline static void tulip_restart_rxtx_4(struct tulip_private *tp)
{
  
#line 555 
  tulip_stop_rxtx_4(tp);
  
#line 556 
  __const_udelay(21475UL);
  
#line 557 
  tulip_start_rxtx(tp);
  
#line 558 
  return;
}


#line 560  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/tulip.h"
__inline static void tulip_tx_timeout_complete(struct tulip_private *tp, void *ioaddr)
{
  
#line 563 
  tulip_restart_rxtx_4(tp);
  
#line 565 
  iowrite32(0U,ioaddr + 8U);
  
#line 567 
  (tp->dev)->stats.tx_errors += 1UL;
  
#line 568 
  return;
}


#line 45  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/etherdevice.h"
int eth_mac_addr(struct net_device *, void *);


#line 46 
int eth_change_mtu(struct net_device *, int);


#line 47 
int eth_validate_addr(struct net_device *);


#line 53 
static struct net_device *ldv_alloc_etherdev_mqs_88(int ldv_func_arg1, unsigned int ldv_func_arg2, unsigned int ldv_func_arg3);


#line 14  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bitrev.h"
extern u8 const byte_rev_table[256U];


#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bitrev.h"
__inline static u8 __bitrev8(u8 byte)
{
  u8 __retres;
  
#line 17 
  __retres = byte_rev_table[(int)byte];
  
#line 17 
  return __retres;
}


#line 20  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bitrev.h"
__inline static u16 __bitrev16(u16 x)
{
  u16 __retres;
  u8 tmp;
  u8 tmp_0;
  
#line 22 
  tmp = __bitrev8((unsigned char)((int)((unsigned char)x)));
  
#line 22 
  tmp_0 = __bitrev8((unsigned char)((int)((unsigned char)((int)x >> 8))));
  
#line 22 
  __retres = (unsigned short)(((int)tmp << 8) | (int)tmp_0);
  
#line 22 
  return __retres;
}


#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bitrev.h"
__inline static u32 __bitrev32(u32 x)
{
  u32 __retres;
  u16 tmp;
  u16 tmp_0;
  
#line 27 
  tmp = __bitrev16((unsigned short)((int)((unsigned short)x)));
  
#line 27 
  tmp_0 = __bitrev16((unsigned short)((int)((unsigned short)(x >> 16))));
  
#line 27 
  __retres = (unsigned int)(((int)tmp << 16) | (int)tmp_0);
  
#line 27 
  return __retres;
}


#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/crc32.h"
u32 crc32_le(u32, unsigned char const *, size_t);


#line 40  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/tulip_core.c"
static char version[55U] = {(char)'L', (char)'i', (char)'n', (char)'u', (char)'x', (char)' ', (char)'T', (char)'u', (char)'l', (char)'i', (char)'p', (char)' ', (char)'d', (char)'r', (char)'i', (char)'v', (char)'e', (char)'r', (char)' ', (char)'v', (char)'e', (char)'r', (char)'s', (char)'i', (char)'o', (char)'n', (char)' ', (char)'\000'};

#line 46  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/tulip_core.c"
static unsigned int max_interrupt_work = 25U;

#line 50  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/tulip_core.c"
static int full_duplex[8U];

#line 51  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/tulip_core.c"
static int options[8U];

#line 52  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/tulip_core.c"
static int mtu[8U];

#line 55  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/tulip_core.c"
char const * const medianame[32U] = {"10baseT", "10base2", "AUI", "100baseTx", "10baseT-FDX", "100baseTx-FDX", "100baseT4", "100baseFx", "100baseFx-FDX", "MII 10baseT", "MII 10baseT-FDX", "MII", "10baseT(forced)", "MII 100baseTx", "MII 100baseTx-FDX", "MII 100baseT4", "MII 100baseFx-HDX", "MII 100baseFx-FDX", "Home-PNA 1Mbps", "Invalid-19", "", "", "", "", "", "", "", "", "", "", "", "Transceiver reset"};

#line 70  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/tulip_core.c"
static int rx_copybreak = 100;

#line 89  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/tulip_core.c"
static int csr0 = 27295744;

#line 122  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/tulip_core.c"
int tulip_debug = 1;

#line 127  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/tulip_core.c"
static void tulip_timer(unsigned long data)
{
  bool tmp_0;
  
#line 129 
  struct net_device *dev = (struct net_device *)data;
  
#line 130 
  struct tulip_private *tp = netdev_priv((struct net_device const *)dev);
  
#line 132 
  tmp_0 = netif_running((struct net_device const *)dev);
  
#line 132 
  if ((int)tmp_0 != 0) 
#line 133 
                       ldv_schedule_work_72(& tp->media_work); else ;
  
#line 134 
  return;
}


#line 142  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/tulip_core.c"
struct tulip_chip_table tulip_tbl[15U] = {{.chip_name = (char *)0, .io_size = 0, .valid_intrs = 0, .flags = 0, .media_timer = (void (*)(unsigned long ))0, .media_task = (void (*)(struct work_struct *))0}, {.chip_name = (char *)0, .io_size = 0, .valid_intrs = 0, .flags = 0, .media_timer = (void (*)(unsigned long ))0, .media_task = (void (*)(struct work_struct *))0}, {.chip_name = (char *)"Digital DS21140 Tulip", .io_size = 128, .valid_intrs = 125935, .flags = 4103, .media_timer = & tulip_timer, .media_task = & tulip_media_task}, {.chip_name = (char *)"Digital DS21142/43 Tulip", .io_size = 128, .valid_intrs = 134347775, .flags = 4443, .media_timer = & tulip_timer, .media_task = & t21142_media_task}, {.chip_name = (char *)"Lite-On 82c168 PNIC", .io_size = 256, .valid_intrs = 130031, .flags = 129, .media_timer = & pnic_timer, .media_task = (void (*)(struct work_struct *))0}, {.chip_name = (char *)"Macronix 98713 PMAC", .io_size = 128, .valid_intrs = 125935, .flags = 7, .media_timer = & mxic_timer, .media_task = (void (*)(struct work_struct *))0}, {.chip_name = (char *)"Macronix 98715 PMAC", .io_size = 256, .valid_intrs = 125935, .flags = 2, .media_timer = & mxic_timer, .media_task = (void (*)(struct work_struct *))0}, {.chip_name = (char *)"Macronix 98725 PMAC", .io_size = 256, .valid_intrs = 125935, .flags = 2, .media_timer = & mxic_timer, .media_task = (void (*)(struct work_struct *))0}, {.chip_name = (char *)"ASIX AX88140", .io_size = 128, .valid_intrs = 130047, .flags = 551, .media_timer = & tulip_timer, .media_task = & tulip_media_task}, {.chip_name = (char *)"Lite-On PNIC-II", .io_size = 256, .valid_intrs = 134347775, .flags = 5185, .media_timer = & pnic2_timer, .media_task = (void (*)(struct work_struct *))0}, {.chip_name = (char *)"ADMtek Comet", .io_size = 256, .valid_intrs = 109551, .flags = 2081, .media_timer = & comet_timer, .media_task = (void (*)(struct work_struct *))0}, {.chip_name = (char *)"Compex 9881 PMAC", .io_size = 128, .valid_intrs = 125935, .flags = 7, .media_timer = & mxic_timer, .media_task = (void (*)(struct work_struct *))0}, {.chip_name = (char *)"Intel DS21145 Tulip", .io_size = 128, .valid_intrs = 134347775, .flags = 4187, .media_timer = & tulip_timer, .media_task = & tulip_media_task}, {.chip_name = (char *)0, .io_size = 0, .valid_intrs = 0, .flags = 0, .media_timer = (void (*)(unsigned long ))0, .media_task = (void (*)(struct work_struct *))0}, {.chip_name = (char *)"Conexant LANfinity", .io_size = 256, .valid_intrs = 125935, .flags = 17, .media_timer = & tulip_timer, .media_task = & tulip_media_task}};

#line 210  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/tulip_core.c"
static struct pci_device_id const tulip_pci_tbl[35U] = {{.vendor = 4113U, .device = 9U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 2UL}, {.vendor = 4113U, .device = 25U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 3UL}, {.vendor = 4525U, .device = 2U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 4313U, .device = 1298U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 5UL}, {.vendor = 4313U, .device = 1329U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 6UL}, {.vendor = 4699U, .device = 5120U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 8UL}, {.vendor = 4525U, .device = 49429U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 9UL}, {.vendor = 4887U, .device = 2433U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 10UL}, {.vendor = 4887U, .device = 2437U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 10UL}, {.vendor = 4887U, .device = 6533U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 10UL}, {.vendor = 4887U, .device = 38161U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 10UL}, {.vendor = 5073U, .device = 43778U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 10UL}, {.vendor = 5073U, .device = 43779U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 10UL}, {.vendor = 5073U, .device = 43784U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 10UL}, {.vendor = 4170U, .device = 2433U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 10UL}, {.vendor = 4170U, .device = 10100U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 10UL}, {.vendor = 4697U, .device = 41248U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 10UL}, {.vendor = 4598U, .device = 39041U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 11UL}, {.vendor = 32902U, .device = 57U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 12UL}, {.vendor = 4371U, .device = 4630U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 10UL}, {.vendor = 4371U, .device = 4631U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 6UL}, {.vendor = 4371U, .device = 38161U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 10UL}, {.vendor = 4486U, .device = 5441U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 10UL}, {.vendor = 4486U, .device = 5473U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 10UL}, {.vendor = 4486U, .device = 5521U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 10UL}, {.vendor = 5361U, .device = 6147U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 14UL}, {.vendor = 5670U, .device = 33808U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 10UL}, {.vendor = 5943U, .device = 43785U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 10UL}, {.vendor = 5943U, .device = 43784U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 10UL}, {.vendor = 6067U, .device = 43784U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 10UL}, {.vendor = 4279U, .device = 37632U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 10UL}, {.vendor = 5354U, .device = 43784U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 10UL}, {.vendor = 5140U, .device = 1U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 10UL}, {.vendor = 5140U, .device = 2U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 10UL}, {.vendor = 0U, .device = 0U, .subvendor = 0U, .subdevice = 0U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}};

#line 252  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/tulip_core.c"
struct pci_device_id const __mod_pci__tulip_pci_tbl_device_table[35U];

#line 256  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/tulip_core.c"
char const tulip_media_cap[32U] = {(char)0, (char)0, (char)0, (char)16, (char)3, (char)19, (char)16, (char)24, (char)27, (char)4, (char)7, (char)5, (char)0, (char)20, (char)23, (char)20, (char)28, (char)31, (char)0, (char)0};

#line 259 
static void tulip_tx_timeout(struct net_device *dev);


#line 260 
static void tulip_init_ring(struct net_device *dev);


#line 261 
static void tulip_free_ring(struct net_device *dev);


#line 262 
static netdev_tx_t tulip_start_xmit(struct sk_buff *skb, struct net_device *dev);


#line 264 
static int tulip_open(struct net_device *dev);


#line 265 
static int tulip_close(struct net_device *dev);


#line 266 
static void tulip_up(struct net_device *dev);


#line 267 
static void tulip_down(struct net_device *dev);


#line 268 
static struct net_device_stats *tulip_get_stats(struct net_device *dev);


#line 269 
static int private_ioctl(struct net_device *dev, struct ifreq *rq, int cmd);


#line 270 
static void set_rx_mode(struct net_device *dev);


#line 271 
static void tulip_set_wolopts(struct pci_dev *pdev, u32 wolopts);


#line 273 
static void poll_tulip(struct net_device *dev);


#line 276  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/tulip_core.c"
static void tulip_set_power_state(struct tulip_private *tp, int sleep, int snooze)
{
  
#line 279 
  if ((tp->flags & 16) != 0) {
    u32 tmp;
    u32 newtmp;
    
#line 281 
    pci_read_config_dword((struct pci_dev const *)tp->pdev,64,& tmp);
    
#line 282 
    newtmp = tmp & 1073741823U;
    
#line 283 
    if (sleep != 0) 
#line 284 
                    newtmp |= 2147483648U;
    else 
      
#line 285 
      if (snooze != 0) 
#line 286 
                       newtmp |= 1073741824U; else ;
    
#line 287 
    if (tmp != newtmp) 
#line 288 
                       pci_write_config_dword((struct pci_dev const *)tp->pdev,64,newtmp); else ;
  }
  else ;
  
#line 290 
  return;
}


#line 294  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/tulip_core.c"
static void tulip_up(struct net_device *dev)
{
  u32 reg;
  int i;
  unsigned int tmp_0;
  unsigned int tmp_1;
  
#line 296 
  struct tulip_private *tp = netdev_priv((struct net_device const *)dev);
  
#line 297 
  void *ioaddr = tp->base_addr;
  
#line 298 
  int next_tick = 750;
  
#line 303 
  napi_enable(& tp->napi);
  
#line 307 
  tulip_set_power_state(tp,0,0);
  
#line 310 
  pci_enable_wake(tp->pdev,3,(_Bool)0);
  
#line 311 
  pci_enable_wake(tp->pdev,4,(_Bool)0);
  
#line 312 
  tulip_set_wolopts(tp->pdev,0U);
  
#line 315 
  if ((int)tp->mii_cnt != 0 || (tp->mtable != (struct mediatable *)0 && (unsigned int)*((unsigned char *)tp->mtable + 4UL) != 0U)) 
    
#line 316 
    iowrite32(262144U,ioaddr + 48U); else ;
  
#line 319 
  iowrite32(1U,ioaddr);
  
#line 320 
  pci_read_config_dword((struct pci_dev const *)tp->pdev,4,& reg);
  
#line 321 
  __const_udelay(429500UL);
  
#line 326 
  iowrite32(tp->csr0,ioaddr);
  
#line 327 
  pci_read_config_dword((struct pci_dev const *)tp->pdev,4,& reg);
  
#line 328 
  __const_udelay(429500UL);
  
#line 330 
  if (tulip_debug > 1) {
    
#line 331 
    struct _ddebug descriptor = {.modname = "tulip", .function = "tulip_up", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/tulip_core.c", .format = "tulip_up(), irq==%d\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))331U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))1U};
    
#line 331 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 331 
                                                        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)dev,"tulip_up(), irq==%d\n",(tp->pdev)->irq); else ;
  }
  else ;
  
#line 333 
  iowrite32((unsigned int)tp->rx_ring_dma,ioaddr + 24U);
  
#line 334 
  iowrite32((unsigned int)tp->tx_ring_dma,ioaddr + 32U);
  
#line 335 
  tmp_0 = 0U;
  
#line 335 
  tp->cur_tx = tmp_0;
  
#line 335 
  tp->cur_rx = tmp_0;
  
#line 336 
  tmp_1 = 0U;
  
#line 336 
  tp->dirty_tx = tmp_1;
  
#line 336 
  tp->dirty_rx = tmp_1;
  
#line 338 
  if ((tp->flags & 32) != 0) {
    u16 tmp_3;
    
#line 339 
    u32 addr_low = get_unaligned_le32((void const *)dev->dev_addr);
    
#line 340 
    tmp_3 = get_unaligned_le16((void const *)(dev->dev_addr + 4U));
    
#line 340 
    u32 addr_high = (unsigned int)tmp_3;
    
#line 341 
    if (tp->chip_id == 8) {
      
#line 342 
      iowrite32(0U,ioaddr + 104U);
      
#line 343 
      iowrite32(addr_low,ioaddr + 112U);
      
#line 344 
      iowrite32(1U,ioaddr + 104U);
      
#line 345 
      iowrite32(addr_high,ioaddr + 112U);
    }
    else 
      
#line 346 
      if ((tp->flags & 2048) != 0) {
        
#line 347 
        iowrite32(addr_low,ioaddr + 164U);
        
#line 348 
        iowrite32(addr_high,ioaddr + 168U);
        
#line 349 
        iowrite32(0U,ioaddr + 172U);
        
#line 350 
        iowrite32(0U,ioaddr + 176U);
      }
      else ;
  }
  else {
    dma_addr_t mapping;
    u16 *tmp_4;
    u16 *tmp_5;
    u16 *tmp_6;
    u16 *tmp_7;
    u16 *tmp_8;
    u16 *tmp_9;
    
#line 354 
    u16 *eaddrs = (u16 *)dev->dev_addr;
    
#line 355 
    u16 *setup_frm = & tp->setup_frame[90];
    
#line 359 
    memset((void *)(& tp->setup_frame),255,192UL);
    
#line 361 
    tmp_4 = setup_frm;
    
#line 361 
    setup_frm += 1;
    
#line 361 
    *tmp_4 = *eaddrs;
    
#line 361 
    tmp_5 = setup_frm;
    
#line 361 
    setup_frm += 1;
    
#line 361 
    *tmp_5 = *eaddrs;
    
#line 362 
    tmp_6 = setup_frm;
    
#line 362 
    setup_frm += 1;
    
#line 362 
    *tmp_6 = *(eaddrs + 1U);
    
#line 362 
    tmp_7 = setup_frm;
    
#line 362 
    setup_frm += 1;
    
#line 362 
    *tmp_7 = *(eaddrs + 1U);
    
#line 363 
    tmp_8 = setup_frm;
    
#line 363 
    setup_frm += 1;
    
#line 363 
    *tmp_8 = *(eaddrs + 2U);
    
#line 363 
    tmp_9 = setup_frm;
    
#line 363 
    setup_frm += 1;
    
#line 363 
    *tmp_9 = *(eaddrs + 2U);
    
#line 365 
    mapping = pci_map_single(tp->pdev,(void *)(& tp->setup_frame),192UL,1);
    
#line 368 
    tp->tx_buffers[tp->cur_tx].skb = (struct sk_buff *)0;
    
#line 369 
    tp->tx_buffers[tp->cur_tx].mapping = mapping;
    
#line 372 
    (tp->tx_ring + tp->cur_tx)->length = 134217920U;
    
#line 373 
    (tp->tx_ring + tp->cur_tx)->buffer1 = (unsigned int)mapping;
    
#line 374 
    (tp->tx_ring + tp->cur_tx)->status = 2147483648U;
    
#line 376 
    tp->cur_tx += 1U;
  }
  
#line 379 
  tp->saved_if_port = (int)dev->if_port;
  
#line 380 
  if ((unsigned int)dev->if_port == 0U) 
#line 381 
                                        dev->if_port = (unsigned char)tp->default_port; else ;
  
#line 384 
  i = 0;
  
#line 385 
  if (tp->mtable == (struct mediatable *)0) 
#line 386 
                                            goto media_picked; else ;
  
#line 387 
  if ((unsigned int)dev->if_port != 0U) {
    int tmp_11;
    
#line 388 
    if (((int)tulip_media_cap[(int)dev->if_port] & 4) == 0) {
      int tmp_10;
      
#line 388 
      if ((unsigned int)dev->if_port != 12U) 
#line 388 
                                             tmp_10 = (int)dev->if_port; else 
                                                                    
#line 388 
                                                                    tmp_10 = 0;
      
#line 388 
      tmp_11 = tmp_10;
    }
    else 
#line 388 
         tmp_11 = 11;
    
#line 388 
    int looking_for = tmp_11;
    
#line 390 
    i = 0;
    
#line 390 
    goto ldv_46782;
    ldv_46781: 
#line 391 
    ;
    
#line 391 
    if ((int)(tp->mtable)->mleaf[i].media == looking_for) {
      
#line 392 
      _dev_info((struct device const *)(& dev->dev),"Using user-specified media %s\n",medianame[(int)dev->if_port]);
      
#line 395 
      goto media_picked;
    }
    else ;
    
#line 390 
    i += 1;
    ldv_46782: 
#line 391 
    ;
    
#line 390 
    if ((int)(tp->mtable)->leafcount > i) 
#line 392 
                                          goto ldv_46781; else 
#line 395 
                                                               goto ldv_46783;
    ldv_46783: 
#line 396 
    ;
  }
  else ;
  
#line 398 
  if (((int)(tp->mtable)->defaultmedia & 2048) == 0) {
    
#line 399 
    int looking_for_0 = (int)(tp->mtable)->defaultmedia & 31;
    
#line 400 
    i = 0;
    
#line 400 
    goto ldv_46786;
    ldv_46785: 
#line 401 
    ;
    
#line 401 
    if ((int)(tp->mtable)->mleaf[i].media == looking_for_0) {
      
#line 402 
      _dev_info((struct device const *)(& dev->dev),"Using EEPROM-set media %s\n",medianame[looking_for_0]);
      
#line 405 
      goto media_picked;
    }
    else ;
    
#line 400 
    i += 1;
    ldv_46786: 
#line 401 
    ;
    
#line 400 
    if ((int)(tp->mtable)->leafcount > i) 
#line 402 
                                          goto ldv_46785; else 
#line 405 
                                                               goto ldv_46787;
    ldv_46787: 
#line 406 
    ;
  }
  else ;
  
#line 409 
  i = (int)(tp->mtable)->leafcount + -1;
  
#line 409 
  goto ldv_46789;
  ldv_46788: 
#line 410 
  ;
  
#line 410 
  i -= 1;
  ldv_46789: 
#line 411 
  ;
  
#line 409 
  if (((int)tulip_media_cap[(int)(tp->mtable)->mleaf[i].media] & 2) != 0 && i > 0) 
    
#line 412 
    goto ldv_46788; else 
#line 415 
                         goto ldv_46790;
  ldv_46790: 
#line 416 
  ;
  media_picked: 
#line 412 
  ;
  
#line 414 
  tp->csr6 = 0U;
  
#line 415 
  tp->cur_index = i;
  
#line 416 
  tp->nwayset = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U;
  
#line 418 
  if ((unsigned int)dev->if_port != 0U) {
    
#line 419 
    if (tp->chip_id == 3 && ((int)tulip_media_cap[(int)dev->if_port] & 4) != 0) {
      
#line 422 
      iowrite32(0U,ioaddr + 104U);
      
#line 423 
      iowrite32(0U,ioaddr + 112U);
      
#line 424 
      iowrite32(8U,ioaddr + 120U);
    }
    else ;
    
#line 426 
    tulip_select_media(dev,1);
  }
  else 
    
#line 427 
    if (tp->chip_id == 3) 
      
#line 428 
      if ((int)tp->mii_cnt != 0) {
        
#line 429 
        tulip_select_media(dev,1);
        
#line 430 
        if (tulip_debug > 1) {
          int tmp_12;
          
#line 431 
          tmp_12 = tulip_mdio_read(dev,(int)tp->phys[0],1);
          
#line 431 
          ;
          
#line 431 
          ;
          
#line 431 
          _dev_info((struct device const *)(& dev->dev),"Using MII transceiver %d, status %04x\n",(int)tp->phys[0],tmp_12);
        }
        else ;
        
#line 435 
        iowrite32(2181169152U,ioaddr + 48U);
        
#line 436 
        tp->csr6 = 2181955584U;
        
#line 437 
        dev->if_port = (unsigned char)11U;
        
#line 438 
        iowrite32(0U,ioaddr + 104U);
        
#line 439 
        iowrite32(0U,ioaddr + 112U);
      }
      else 
#line 441 
           t21142_start_nway(dev);
    else 
      
#line 442 
      if (tp->chip_id == 9) {
        unsigned int tmp_13;
        unsigned int tmp_14;
        
#line 444 
        tp->sym_advertise = (unsigned short)480U;
        
#line 446 
        ;
        
#line 446 
        tmp_13 = ioread32(ioaddr + 40U);
        
#line 446 
        iowrite32(tmp_13 | 32784U,ioaddr + 40U);
        
#line 447 
        ;
        
#line 447 
        tmp_14 = ioread32(ioaddr + 56U);
        
#line 447 
        iowrite32(tmp_14 | 32784U,ioaddr + 56U);
        
#line 448 
        pnic2_start_nway(dev);
      }
      else 
        
#line 449 
        if (tp->chip_id == 4 && (unsigned int)*((unsigned char *)tp + 3525UL) == 0U) 
          
#line 450 
          if ((int)tp->mii_cnt != 0) {
            
#line 451 
            dev->if_port = (unsigned char)11U;
            
#line 452 
            tp->csr6 = ((unsigned int)((int)*((unsigned char *)tp + 3524UL) << 9) & 512U) | 2169241600U;
            
#line 453 
            iowrite32(1U,ioaddr + 120U);
          }
          else {
            unsigned int tmp_15;
            
#line 454 
            tmp_15 = ioread32(ioaddr + 40U);
            
#line 454 
            if ((tmp_15 & 16U) != 0U) 
#line 455 
                                      pnic_do_nway(dev);
            else {
              
#line 458 
              iowrite32(50U,ioaddr + 96U);
              
#line 459 
              tp->csr6 = 4325376U;
              
#line 460 
              iowrite32(110712U,ioaddr + 184U);
              
#line 461 
              iowrite32(33665144U,ioaddr + 184U);
              
#line 462 
              next_tick = 250;
            }
          }
        else 
          
#line 464 
          if ((tp->chip_id == 5 || tp->chip_id == 11) && (unsigned int)*((unsigned char *)tp + 3525UL) == 0U) {
            unsigned int tmp_16;
            
#line 466 
            dev->if_port = (unsigned char)0U;
            
#line 467 
            tp->csr6 = (unsigned int)((((int)*((unsigned char *)tp + 3524UL) << 9) & 512) | 25690112);
            
#line 468 
            ;
            
#line 468 
            tmp_16 = ioread16(ioaddr + 128U);
            
#line 468 
            iowrite32(tmp_16 | 255262720U,ioaddr + 128U);
          }
          else 
            
#line 469 
            if ((unsigned int)tp->chip_id + 4294967290U <= 1U) {
              unsigned int tmp_17;
              unsigned int tmp_18;
              
#line 471 
              dev->if_port = (unsigned char)0U;
              
#line 472 
              tp->csr6 = 27787776U;
              
#line 473 
              ;
              
#line 473 
              tmp_17 = ioread16(ioaddr + 128U);
              
#line 473 
              iowrite32(tmp_17 | 255262720U,ioaddr + 128U);
              
#line 474 
              ;
              
#line 474 
              tmp_18 = ioread16(ioaddr + 160U);
              
#line 474 
              iowrite32(tmp_18 | 69632U,ioaddr + 160U);
            }
            else 
              
#line 475 
              if (tp->chip_id == 10 || tp->chip_id == 14) {
                unsigned int tmp_19;
                
#line 477 
                ;
                
#line 477 
                tmp_19 = ioread32(ioaddr + 136U);
                
#line 477 
                iowrite32(tmp_19 | 1U,ioaddr + 136U);
                
#line 478 
                if ((int)tp->mii_cnt != 0) 
#line 478 
                                           dev->if_port = (unsigned char)11U; else 
                                                                    
#line 478 
                                                                    dev->if_port = (unsigned char)0U;
                
#line 479 
                tp->csr6 = 262144U;
              }
              else 
                
#line 480 
                if (tp->chip_id == 8) {
                  int tmp_20;
                  
#line 481 
                  if ((int)tp->mii_cnt != 0) 
#line 481 
                                             tmp_20 = 262400; else 
#line 481 
                                                                   tmp_20 = 256;
                  
#line 481 
                  tp->csr6 = (unsigned int)tmp_20;
                }
                else 
#line 483 
                     tulip_select_media(dev,1);
  
#line 486 
  tulip_stop_rxtx_4(tp);
  
#line 487 
  ldv_inline_asm();
  
#line 488 
  __const_udelay(21475UL);
  
#line 489 
  iowrite32(tp->csr6 | 8192U,ioaddr + 48U);
  
#line 492 
  iowrite32((unsigned int)tulip_tbl[tp->chip_id].valid_intrs,ioaddr + 40U);
  
#line 493 
  iowrite32((unsigned int)tulip_tbl[tp->chip_id].valid_intrs,ioaddr + 56U);
  
#line 494 
  tulip_start_rxtx(tp);
  
#line 495 
  iowrite32(0U,ioaddr + 16U);
  
#line 497 
  if (tulip_debug > 2) {
    
#line 498 
    struct _ddebug descriptor_0 = {.modname = "tulip", .function = "tulip_up", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/tulip_core.c", .format = "Done tulip_up(), CSR0 %08x, CSR5 %08x CSR6 %08x\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))501U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))1U};
    
#line 498 
    if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) {
      unsigned int tmp_21;
      unsigned int tmp_22;
      unsigned int tmp_23;
      
#line 498 
      tmp_21 = ioread32(ioaddr + 48U);
      
#line 498 
      tmp_22 = ioread32(ioaddr + 40U);
      
#line 498 
      tmp_23 = ioread32(ioaddr);
      
#line 498 
      ;
      
#line 498 
      __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)dev,"Done tulip_up(), CSR0 %08x, CSR5 %08x CSR6 %08x\n",tmp_23,tmp_22,tmp_21);
    }
    else ;
  }
  else ;
  
#line 506 
  tp->timer.expires = (unsigned long)next_tick + jiffies;
  
#line 507 
  add_timer(& tp->timer);
  {
    struct lock_class_key __key;
    
#line 509 
    init_timer_key(& tp->oom_timer,0U,"(&tp->oom_timer)",& __key);
  }
  
#line 510 
  tp->oom_timer.data = (unsigned long)dev;
  
#line 511 
  tp->oom_timer.function = & oom_timer;
  
#line 512 
  return;
}


#line 516  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/tulip_core.c"
static int tulip_open(struct net_device *dev)
{
  int __retres;
  int retval;
  
#line 518 
  struct tulip_private *tp = netdev_priv((struct net_device const *)dev);
  
#line 521 
  tulip_init_ring(dev);
  
#line 523 
  retval = ldv_request_irq_73((tp->pdev)->irq,& tulip_interrupt,128UL,(char const *)(& dev->name),(void *)dev);
  
#line 525 
  if (retval != 0) 
#line 526 
                   goto free_ring; else ;
  
#line 528 
  tulip_up(dev);
  
#line 530 
  netif_start_queue(dev);
  
#line 532 
  __retres = 0;
  
#line 532 
  goto return_label;
  free_ring: 
#line 534 
  ;
  
#line 535 
  tulip_free_ring(dev);
  
#line 536 
  __retres = retval;
  return_label: 
#line 536 
                return __retres;
}


#line 540  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/tulip_core.c"
static void tulip_tx_timeout(struct net_device *dev)
{
  unsigned long flags;
  
#line 542 
  struct tulip_private *tp = netdev_priv((struct net_device const *)dev);
  
#line 543 
  void *ioaddr = tp->base_addr;
  
#line 546 
  ldv___ldv_spin_lock_74(& tp->lock);
  
#line 548 
  if (((int)tulip_media_cap[(int)dev->if_port] & 4) != 0) {
    
#line 550 
    if (tulip_debug > 1) 
#line 551 
                         dev_warn((struct device const *)(& dev->dev),"Transmit timeout using MII device\n"); else ;
  }
  else 
    
#line 553 
    if ((((unsigned int)tp->chip_id + 4294967294U <= 1U || tp->chip_id == 5) || tp->chip_id == 11) || tp->chip_id == 13) {
      unsigned int tmp_0;
      unsigned int tmp_1;
      unsigned int tmp_2;
      unsigned int tmp_3;
      unsigned int tmp_4;
      
#line 559 
      tmp_0 = ioread32(ioaddr + 120U);
      
#line 559 
      tmp_1 = ioread32(ioaddr + 112U);
      
#line 558 
      tmp_2 = ioread32(ioaddr + 104U);
      
#line 558 
      tmp_3 = ioread32(ioaddr + 96U);
      
#line 557 
      tmp_4 = ioread32(ioaddr + 40U);
      
#line 556 
      ;
      
#line 556 
      dev_warn((struct device const *)(& dev->dev),"21140 transmit timed out, status %08x, SIA %08x %08x %08x %08x, resetting...\n",tmp_4,tmp_3,tmp_2,tmp_1,tmp_0);
      
#line 561 
      tp->timeout_recovery = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U;
      
#line 562 
      ldv_schedule_work_75(& tp->media_work);
      
#line 563 
      goto out_unlock;
    }
    else 
      
#line 564 
      if (tp->chip_id == 9) {
        unsigned int tmp_5;
        unsigned int tmp_6;
        unsigned int tmp_7;
        unsigned int tmp_8;
        
#line 570 
        tmp_5 = ioread32(ioaddr + 96U);
        
#line 569 
        tmp_6 = ioread32(ioaddr + 56U);
        
#line 568 
        tmp_7 = ioread32(ioaddr + 48U);
        
#line 567 
        tmp_8 = ioread32(ioaddr + 40U);
        
#line 565 
        ;
        
#line 565 
        dev_warn((struct device const *)(& dev->dev),"PNIC2 transmit timed out, status %08x, CSR6/7 %08x / %08x CSR12 %08x, resetting...\n",(int)tmp_8,(int)tmp_7,(int)tmp_6,(int)tmp_5);
      }
      else {
        unsigned int tmp_9;
        unsigned int tmp_10;
        
#line 574 
        tmp_9 = ioread32(ioaddr + 96U);
        
#line 573 
        tmp_10 = ioread32(ioaddr + 40U);
        
#line 572 
        ;
        
#line 572 
        dev_warn((struct device const *)(& dev->dev),"Transmit timed out, status %08x, CSR12 %08x, resetting...\n",tmp_10,tmp_9);
        
#line 575 
        dev->if_port = (unsigned char)0U;
      }
  
#line 607 
  tulip_tx_timeout_complete(tp,ioaddr);
  out_unlock: 
#line 609 
  ;
  
#line 610 
  ldv_spin_unlock_irqrestore_76_0(& tp->lock,flags);
  
#line 611 
  dev->trans_start = jiffies;
  
#line 612 
  netif_wake_queue(dev);
  
#line 613 
  return;
}


#line 617  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/tulip_core.c"
static void tulip_init_ring(struct net_device *dev)
{
  int i;
  
#line 619 
  struct tulip_private *tp = netdev_priv((struct net_device const *)dev);
  
#line 622 
  tp->susp_rx = 0;
  
#line 623 
  tp->ttimer = 0;
  
#line 624 
  tp->nir = 0UL;
  
#line 626 
  i = 0;
  
#line 626 
  goto ldv_46812;
  ldv_46811: 
#line 627 
  ;
  
#line 627 
  (tp->rx_ring + i)->status = 0U;
  
#line 628 
  (tp->rx_ring + i)->length = 1540U;
  
#line 629 
  (tp->rx_ring + i)->buffer2 = (unsigned int)tp->rx_ring_dma + (unsigned int)((unsigned long)(i + 1)) * 16U;
  
#line 630 
  tp->rx_buffers[i].skb = (struct sk_buff *)0;
  
#line 631 
  tp->rx_buffers[i].mapping = 0ULL;
  
#line 626 
  i += 1;
  ldv_46812: 
#line 627 
  ;
  
#line 626 
  if (i <= 127) 
#line 628 
                goto ldv_46811; else 
#line 631 
                                     goto ldv_46813;
  ldv_46813: 
#line 632 
  ;
  
#line 634 
  (tp->rx_ring + ((unsigned long)i + 18446744073709551615U))->length = 33555972U;
  
#line 635 
  (tp->rx_ring + ((unsigned long)i + 18446744073709551615U))->buffer2 = (unsigned int)tp->rx_ring_dma;
  
#line 637 
  i = 0;
  
#line 637 
  goto ldv_46818;
  ldv_46817: 
#line 638 
  ;
  {
    dma_addr_t mapping;
    
#line 643 
    struct sk_buff *skb = netdev_alloc_skb(dev,1540U);
    
#line 644 
    tp->rx_buffers[i].skb = skb;
    
#line 645 
    if (skb == (struct sk_buff *)0) 
#line 646 
                                    goto ldv_46816; else ;
    
#line 647 
    mapping = pci_map_single(tp->pdev,(void *)skb->data,1540UL,2);
    
#line 649 
    tp->rx_buffers[i].mapping = mapping;
    
#line 650 
    (tp->rx_ring + i)->status = 2147483648U;
    
#line 651 
    (tp->rx_ring + i)->buffer1 = (unsigned int)mapping;
  }
  
#line 637 
  i += 1;
  ldv_46818: 
#line 638 
  ;
  
#line 637 
  if (i <= 127) 
#line 639 
                goto ldv_46817; else 
#line 642 
                                     goto ldv_46816;
  ldv_46816: 
#line 643 
  ;
  
#line 653 
  tp->dirty_rx = (unsigned int)(i + -128);
  
#line 657 
  i = 0;
  
#line 657 
  goto ldv_46820;
  ldv_46819: 
#line 658 
  ;
  
#line 658 
  tp->tx_buffers[i].skb = (struct sk_buff *)0;
  
#line 659 
  tp->tx_buffers[i].mapping = 0ULL;
  
#line 660 
  (tp->tx_ring + i)->status = 0U;
  
#line 661 
  (tp->tx_ring + i)->buffer2 = (unsigned int)tp->tx_ring_dma + (unsigned int)((unsigned long)(i + 1)) * 16U;
  
#line 657 
  i += 1;
  ldv_46820: 
#line 658 
  ;
  
#line 657 
  if (i <= 31) 
#line 659 
               goto ldv_46819; else 
#line 662 
                                    goto ldv_46821;
  ldv_46821: 
#line 663 
  ;
  
#line 663 
  (tp->tx_ring + ((unsigned long)i + 18446744073709551615U))->buffer2 = (unsigned int)tp->tx_ring_dma;
  
#line 664 
  return;
}


#line 667  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/tulip_core.c"
static netdev_tx_t tulip_start_xmit(struct sk_buff *skb, struct net_device *dev)
{
  netdev_tx_t __retres;
  int entry;
  u32 flag;
  dma_addr_t mapping;
  unsigned long flags;
  
#line 669 
  struct tulip_private *tp = netdev_priv((struct net_device const *)dev);
  
#line 675 
  ldv___ldv_spin_lock_77(& tp->lock);
  
#line 678 
  entry = (int)tp->cur_tx & 31;
  
#line 680 
  tp->tx_buffers[entry].skb = skb;
  
#line 681 
  mapping = pci_map_single(tp->pdev,(void *)skb->data,(unsigned long)skb->len,1);
  
#line 683 
  tp->tx_buffers[entry].mapping = mapping;
  
#line 684 
  (tp->tx_ring + entry)->buffer1 = (unsigned int)mapping;
  
#line 686 
  if (tp->cur_tx - tp->dirty_tx <= 15U) 
#line 687 
                                        flag = 1610612736U;
  else 
    
#line 688 
    if (tp->cur_tx - tp->dirty_tx == 16U) 
#line 689 
                                          flag = 3758096384U;
    else 
      
#line 690 
      if (tp->cur_tx - tp->dirty_tx <= 29U) 
#line 691 
                                            flag = 1610612736U;
      else {
        
#line 693 
        flag = 3758096384U;
        
#line 694 
        netif_start_queue(dev);
      }
  
#line 696 
  if (entry == 31) 
#line 697 
                   flag = 3791650816U; else ;
  
#line 699 
  (tp->tx_ring + entry)->length = skb->len | flag;
  
#line 702 
  (tp->tx_ring + entry)->status = 2147483648U;
  
#line 703 
  ldv_inline_asm();
  
#line 705 
  tp->cur_tx += 1U;
  
#line 708 
  iowrite32(0U,tp->base_addr + 8U);
  
#line 710 
  ldv_spin_unlock_irqrestore_78(& tp->lock,flags);
  
#line 712 
  __retres = NETDEV_TX_OK;
  
#line 712 
  return __retres;
}


#line 715  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/tulip_core.c"
static void tulip_clean_tx_ring(struct tulip_private *tp)
{
  unsigned int dirty_tx;
  
#line 719 
  dirty_tx = tp->dirty_tx;
  
#line 719 
  goto ldv_46839;
  ldv_46838: 
#line 720 
  ;
  {
    
#line 721 
    int entry = (int)dirty_tx & 31;
    
#line 722 
    int status = (int)(tp->tx_ring + entry)->status;
    
#line 724 
    if (status < 0) {
      
#line 725 
      (tp->dev)->stats.tx_errors += 1UL;
      
#line 726 
      (tp->tx_ring + entry)->status = 0U;
    }
    else ;
    
#line 730 
    if (tp->tx_buffers[entry].skb == (struct sk_buff *)0) {
      
#line 732 
      if (tp->tx_buffers[entry].mapping != 0ULL) 
#line 733 
                                                 pci_unmap_single(tp->pdev,tp->tx_buffers[entry].mapping,192UL,1); else ;
      
#line 737 
      goto ldv_46837;
    }
    else ;
    
#line 740 
    pci_unmap_single(tp->pdev,tp->tx_buffers[entry].mapping,(unsigned long)(tp->tx_buffers[entry].skb)->len,1);
    
#line 745 
    dev_kfree_skb_irq(tp->tx_buffers[entry].skb);
    
#line 746 
    tp->tx_buffers[entry].skb = (struct sk_buff *)0;
    
#line 747 
    tp->tx_buffers[entry].mapping = 0ULL;
  }
  ldv_46837: 
#line 749 
  ;
  
#line 720 
  dirty_tx += 1U;
  ldv_46839: 
#line 721 
  ;
  
#line 719 
  if (tp->cur_tx != dirty_tx) 
#line 721 
                              goto ldv_46838; else 
#line 724 
                                                   goto ldv_46840;
  ldv_46840: 
#line 725 
  ;
  
#line 726 
  return;
}


#line 751  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/tulip_core.c"
static void tulip_down(struct net_device *dev)
{
  unsigned long flags;
  unsigned int tmp_1;
  
#line 753 
  struct tulip_private *tp = netdev_priv((struct net_device const *)dev);
  
#line 754 
  void *ioaddr = tp->base_addr;
  
#line 757 
  cancel_work_sync(& tp->media_work);
  
#line 760 
  napi_disable(& tp->napi);
  
#line 763 
  ldv_del_timer_sync_79(& tp->timer);
  
#line 765 
  ldv_del_timer_sync_80(& tp->oom_timer);
  
#line 767 
  ldv___ldv_spin_lock_81(& tp->lock);
  
#line 770 
  iowrite32(0U,ioaddr + 56U);
  
#line 773 
  tulip_stop_rxtx_4(tp);
  
#line 776 
  tulip_refill_rx(dev);
  
#line 779 
  tulip_clean_tx_ring(tp);
  
#line 781 
  tmp_1 = ioread32(ioaddr + 48U);
  
#line 781 
  if (tmp_1 != 4294967295U) {
    unsigned int tmp_0;
    
#line 782 
    tmp_0 = ioread32(ioaddr + 64U);
    
#line 782 
    dev->stats.rx_missed_errors += (unsigned long)(tmp_0 & 65535U);
  }
  else ;
  
#line 784 
  ldv_spin_unlock_irqrestore_82(& tp->lock,flags);
  {
    struct lock_class_key __key;
    
#line 786 
    init_timer_key(& tp->timer,0U,"(&tp->timer)",& __key);
  }
  
#line 787 
  tp->timer.data = (unsigned long)dev;
  
#line 788 
  tp->timer.function = tulip_tbl[tp->chip_id].media_timer;
  
#line 790 
  dev->if_port = (unsigned char)tp->saved_if_port;
  
#line 793 
  tulip_set_power_state(tp,0,1);
  
#line 794 
  return;
}


#line 796  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/tulip_core.c"
static void tulip_free_ring(struct net_device *dev)
{
  int i;
  
#line 798 
  struct tulip_private *tp = netdev_priv((struct net_device const *)dev);
  
#line 802 
  i = 0;
  
#line 802 
  goto ldv_46856;
  ldv_46855: 
#line 803 
  ;
  {
    
#line 803 
    struct sk_buff *skb = tp->rx_buffers[i].skb;
    
#line 804 
    dma_addr_t mapping = tp->rx_buffers[i].mapping;
    
#line 806 
    tp->rx_buffers[i].skb = (struct sk_buff *)0;
    
#line 807 
    tp->rx_buffers[i].mapping = 0ULL;
    
#line 809 
    (tp->rx_ring + i)->status = 0U;
    
#line 810 
    (tp->rx_ring + i)->length = 0U;
    
#line 812 
    (tp->rx_ring + i)->buffer1 = 3135176912U;
    
#line 813 
    if (skb != (struct sk_buff *)0) {
      
#line 814 
      pci_unmap_single(tp->pdev,mapping,1540UL,2);
      
#line 816 
      consume_skb(skb);
    }
    else ;
  }
  
#line 802 
  i += 1;
  ldv_46856: 
#line 803 
  ;
  
#line 802 
  if (i <= 127) 
#line 804 
                goto ldv_46855; else 
#line 807 
                                     goto ldv_46857;
  ldv_46857: 
#line 808 
  ;
  
#line 820 
  i = 0;
  
#line 820 
  goto ldv_46860;
  ldv_46859: 
#line 821 
  ;
  {
    
#line 821 
    struct sk_buff *skb_0 = tp->tx_buffers[i].skb;
    
#line 823 
    if (skb_0 != (struct sk_buff *)0) {
      
#line 824 
      pci_unmap_single(tp->pdev,tp->tx_buffers[i].mapping,(unsigned long)skb_0->len,1);
      
#line 826 
      consume_skb(skb_0);
    }
    else ;
    
#line 828 
    tp->tx_buffers[i].skb = (struct sk_buff *)0;
    
#line 829 
    tp->tx_buffers[i].mapping = 0ULL;
  }
  
#line 820 
  i += 1;
  ldv_46860: 
#line 821 
  ;
  
#line 820 
  if (i <= 31) 
#line 822 
               goto ldv_46859; else 
#line 825 
                                    goto ldv_46861;
  ldv_46861: 
#line 826 
  ;
  
#line 827 
  return;
}


#line 833  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/tulip_core.c"
static int tulip_close(struct net_device *dev)
{
  int __retres;
  
#line 835 
  struct tulip_private *tp = netdev_priv((struct net_device const *)dev);
  
#line 836 
  void *ioaddr = tp->base_addr;
  
#line 838 
  netif_start_queue(dev);
  
#line 840 
  tulip_down(dev);
  
#line 842 
  if (tulip_debug > 1) {
    
#line 843 
    struct _ddebug descriptor = {.modname = "tulip", .function = "tulip_close", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/tulip_core.c", .format = "Shutting down ethercard, status was %02x\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))844U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))1U};
    
#line 843 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
      unsigned int tmp_0;
      
#line 843 
      tmp_0 = ioread32(ioaddr + 40U);
      
#line 843 
      ;
      
#line 843 
      __dynamic_netdev_dbg(& descriptor,(struct net_device const *)dev,"Shutting down ethercard, status was %02x\n",tmp_0);
    }
    else ;
  }
  else ;
  
#line 846 
  ldv_free_irq_83((tp->pdev)->irq,(void *)dev);
  
#line 848 
  tulip_free_ring(dev);
  
#line 850 
  __retres = 0;
  
#line 850 
  return __retres;
}


#line 853  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/tulip_core.c"
static struct net_device_stats *tulip_get_stats(struct net_device *dev)
{
  struct net_device_stats *__retres;
  bool tmp_1;
  
#line 855 
  struct tulip_private *tp = netdev_priv((struct net_device const *)dev);
  
#line 856 
  void *ioaddr = tp->base_addr;
  
#line 858 
  tmp_1 = netif_running((struct net_device const *)dev);
  
#line 858 
  if ((int)tmp_1 != 0) {
    unsigned long flags;
    unsigned int tmp_0;
    
#line 861 
    ldv___ldv_spin_lock_84(& tp->lock);
    
#line 863 
    tmp_0 = ioread32(ioaddr + 64U);
    
#line 863 
    dev->stats.rx_missed_errors += (unsigned long)(tmp_0 & 65535U);
    
#line 865 
    ldv_spin_unlock_irqrestore_85(& tp->lock,flags);
  }
  else ;
  
#line 868 
  __retres = & dev->stats;
  
#line 868 
  return __retres;
}


#line 872  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/tulip_core.c"
static void tulip_get_drvinfo(struct net_device *dev, struct ethtool_drvinfo *info)
{
  char const *tmp_0;
  
#line 874 
  struct tulip_private *np = netdev_priv((struct net_device const *)dev);
  
#line 875 
  strlcpy((char *)(& info->driver),"tulip",32UL);
  
#line 876 
  strlcpy((char *)(& info->version),"1.1.15-NAPI",32UL);
  
#line 877 
  tmp_0 = pci_name((struct pci_dev const *)np->pdev);
  
#line 877 
  ;
  
#line 877 
  strlcpy((char *)(& info->bus_info),tmp_0,32UL);
  
#line 878 
  return;
}


#line 881  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/tulip_core.c"
static int tulip_ethtool_set_wol(struct net_device *dev, struct ethtool_wolinfo *wolinfo)
{
  int __retres;
  
#line 884 
  struct tulip_private *tp = netdev_priv((struct net_device const *)dev);
  
#line 886 
  if ((wolinfo->wolopts & ~ tp->wolinfo.supported) != 0U) {
    
#line 887 
    __retres = -95;
    
#line 887 
    goto return_label;
  }
  else ;
  
#line 889 
  tp->wolinfo.wolopts = wolinfo->wolopts;
  
#line 890 
  device_set_wakeup_enable(& (tp->pdev)->dev,(_Bool)(tp->wolinfo.wolopts != 0U));
  
#line 891 
  __retres = 0;
  return_label: 
#line 891 
                return __retres;
}


#line 894  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/tulip_core.c"
static void tulip_ethtool_get_wol(struct net_device *dev, struct ethtool_wolinfo *wolinfo)
{
  
#line 897 
  struct tulip_private *tp = netdev_priv((struct net_device const *)dev);
  
#line 899 
  wolinfo->supported = tp->wolinfo.supported;
  
#line 900 
  wolinfo->wolopts = tp->wolinfo.wolopts;
  
#line 901 
  return;
}


#line 905  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/tulip_core.c"
static struct ethtool_ops const ops = {.get_settings = (int (*)(struct net_device *, struct ethtool_cmd *))0, .set_settings = (int (*)(struct net_device *, struct ethtool_cmd *))0, .get_drvinfo = & tulip_get_drvinfo, .get_regs_len = (int (*)(struct net_device *))0, .get_regs = (void (*)(struct net_device *, struct ethtool_regs *, void *))0, .get_wol = & tulip_ethtool_get_wol, .set_wol = & tulip_ethtool_set_wol, .get_msglevel = (u32 (*)(struct net_device *))0, .set_msglevel = (void (*)(struct net_device *, u32 ))0, .nway_reset = (int (*)(struct net_device *))0, .get_link = (u32 (*)(struct net_device *))0, .get_eeprom_len = (int (*)(struct net_device *))0, .get_eeprom = (int (*)(struct net_device *, struct ethtool_eeprom *, u8 *))0, .set_eeprom = (int (*)(struct net_device *, struct ethtool_eeprom *, u8 *))0, .get_coalesce = (int (*)(struct net_device *, struct ethtool_coalesce *))0, .set_coalesce = (int (*)(struct net_device *, struct ethtool_coalesce *))0, .get_ringparam = (void (*)(struct net_device *, struct ethtool_ringparam *))0, .set_ringparam = (int (*)(struct net_device *, struct ethtool_ringparam *))0, .get_pauseparam = (void (*)(struct net_device *, struct ethtool_pauseparam *))0, .set_pauseparam = (int (*)(struct net_device *, struct ethtool_pauseparam *))0, .self_test = (void (*)(struct net_device *, struct ethtool_test *, u64 *))0, .get_strings = (void (*)(struct net_device *, u32 , u8 *))0, .set_phys_id = (int (*)(struct net_device *, enum ethtool_phys_id_state ))0, .get_ethtool_stats = (void (*)(struct net_device *, struct ethtool_stats *, u64 *))0, .begin = (int (*)(struct net_device *))0, .complete = (void (*)(struct net_device *))0, .get_priv_flags = (u32 (*)(struct net_device *))0, .set_priv_flags = (int (*)(struct net_device *, u32 ))0, .get_sset_count = (int (*)(struct net_device *, int ))0, .get_rxnfc = (int (*)(struct net_device *, struct ethtool_rxnfc *, u32 *))0, .set_rxnfc = (int (*)(struct net_device *, struct ethtool_rxnfc *))0, .flash_device = (int (*)(struct net_device *, struct ethtool_flash *))0, .reset = (int (*)(struct net_device *, u32 *))0, .get_rxfh_key_size = (u32 (*)(struct net_device *))0, .get_rxfh_indir_size = (u32 (*)(struct net_device *))0, .get_rxfh = (int (*)(struct net_device *, u32 *, u8 *, u8 *))0, .set_rxfh = (int (*)(struct net_device *, u32 const *, u8 const *, u8 const ))0, .get_channels = (void (*)(struct net_device *, struct ethtool_channels *))0, .set_channels = (int (*)(struct net_device *, struct ethtool_channels *))0, .get_dump_flag = (int (*)(struct net_device *, struct ethtool_dump *))0, .get_dump_data = (int (*)(struct net_device *, struct ethtool_dump *, void *))0, .set_dump = (int (*)(struct net_device *, struct ethtool_dump *))0, .get_ts_info = (int (*)(struct net_device *, struct ethtool_ts_info *))0, .get_module_info = (int (*)(struct net_device *, struct ethtool_modinfo *))0, .get_module_eeprom = (int (*)(struct net_device *, struct ethtool_eeprom *, u8 *))0, .get_eee = (int (*)(struct net_device *, struct ethtool_eee *))0, .set_eee = (int (*)(struct net_device *, struct ethtool_eee *))0, .get_tunable = (int (*)(struct net_device *, struct ethtool_tunable const *, void *))0, .set_tunable = (int (*)(struct net_device *, struct ethtool_tunable const *, void const *))0};

#line 912  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/tulip_core.c"
static int private_ioctl(struct net_device *dev, struct ifreq *rq, int cmd)
{
  int __retres;
  
#line 914 
  struct tulip_private *tp = netdev_priv((struct net_device const *)dev);
  
#line 915 
  void *ioaddr = tp->base_addr;
  
#line 916 
  struct mii_ioctl_data *data = if_mii(rq);
  
#line 917 
  unsigned int const phy_idx = 0U;
  
#line 918 
  int phy = (int)tp->phys[0U] & 31;
  
#line 919 
  unsigned int regnum = (unsigned int)data->reg_num;
  
#line 921 
  switch (cmd) {
    case 35143: 
#line 922 
    ;
    
#line 923 
    if ((int)tp->mii_cnt != 0) 
#line 924 
                               data->phy_id = (unsigned short)phy;
    else 
      
#line 925 
      if ((tp->flags & 64) != 0) 
#line 926 
                                 data->phy_id = (unsigned short)32U;
      else 
        
#line 927 
        if (tp->chip_id == 10) 
#line 928 
                               data->phy_id = (unsigned short)1U;
        else {
          
#line 930 
          __retres = -19;
          
#line 930 
          goto return_label;
        }
    case 35144: 
#line 932 
    ;
    
#line 933 
    if ((unsigned int)data->phy_id == 32U && (tp->flags & 64) != 0) {
      unsigned int tmp_1;
      unsigned int tmp_2;
      
#line 934 
      tmp_1 = ioread32(ioaddr + 96U);
      
#line 934 
      int csr12 = (int)tmp_1;
      
#line 935 
      tmp_2 = ioread32(ioaddr + 112U);
      
#line 935 
      int csr14 = (int)tmp_2;
      
#line 936 
      switch (regnum) {
        unsigned int tmp_3;
        unsigned int tmp_4;
        unsigned int tmp_5;
        case (unsigned int)0: 
#line 937 
        ;
        
#line 938 
        if (((csr14 << 5) & 4096) != 0 || ((unsigned int)dev->if_port == 5U && (unsigned int)*((unsigned char *)tp + 3525UL) != 0U)) 
          
#line 940 
          data->val_out = (unsigned short)4096U; else 
#line 942 
                                                      data->val_out = (unsigned short)((((int)tulip_media_cap[(int)dev->if_port] << 9) & 8192) | (((int)tulip_media_cap[(int)dev->if_port] << 8) & 256));
        
#line 944 
        goto ldv_46907;
        case (unsigned int)1: 
#line 945 
        ;
        
#line 946 
        if ((csr12 & 28672) == 20480) 
#line 946 
                                      tmp_3 = 6248U; else 
#line 946 
                                                          tmp_3 = 6216U;
        
#line 948 
        if ((csr12 & 6) == 6) 
#line 948 
                              tmp_4 = 0U; else 
#line 948 
                                               tmp_4 = 4U;
        
#line 946 
        data->val_out = (unsigned short)(tmp_3 + tmp_4);
        
#line 950 
        data->val_out = (unsigned short)((unsigned int)data->val_out | 24648U);
        
#line 951 
        goto ldv_46907;
        case (unsigned int)4: 
#line 952 
        ;
        
#line 954 
        tmp_5 = ioread32(ioaddr + 48U);
        
#line 954 
        data->val_out = (unsigned short)((((unsigned int)((unsigned short)(tmp_5 >> 3)) & 64U) + ((unsigned int)((unsigned short)(csr14 >> 1)) & 32U)) + 1U);
        
#line 957 
        data->val_out = (unsigned short)((int)data->val_out | ((csr14 >> 9) & 960));
        
#line 958 
        goto ldv_46907;
        case (unsigned int)5: 
#line 959 
        ;
        
#line 959 
        data->val_out = tp->lpar;
        
#line 959 
        goto ldv_46907;
        default: 
#line 960 
        ;
        
#line 960 
        data->val_out = (unsigned short)0U;
        
#line 960 
        goto ldv_46907;
      }
      ldv_46907: 
#line 962 
      ;
    }
    else {
      int tmp_6;
      
#line 963 
      tmp_6 = tulip_mdio_read(dev,(int)data->phy_id & 31,(int)regnum);
      
#line 963 
      data->val_out = (unsigned short)tmp_6;
    }
    
#line 965 
    __retres = 0;
    
#line 965 
    goto return_label;
    case 35145: 
#line 967 
    ;
    
#line 968 
    if ((regnum & 4294967264U) != 0U) {
      
#line 969 
      __retres = -22;
      
#line 969 
      goto return_label;
    }
    else ;
    
#line 970 
    if ((int)data->phy_id == phy) {
      
#line 971 
      u16 value = data->val_in;
      
#line 972 
      switch (regnum) {
        u16 tmp_7;
        case (unsigned int)0: 
#line 973 
        ;
        
#line 974 
        tp->full_duplex_lock = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))(((int)value & 36864) == 0);
        
#line 975 
        if ((unsigned int)*((unsigned char *)tp + 3524UL) != 0U) 
#line 976 
                                                                 tp->full_duplex = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))((int)value >> 8); else ;
        
#line 977 
        goto ldv_46915;
        case (unsigned int)4: 
#line 978 
        ;
        
#line 979 
        tmp_7 = data->val_in;
        
#line 979 
        tp->mii_advertise = tmp_7;
        
#line 979 
        tp->advertising[0U] = tmp_7;
        
#line 981 
        goto ldv_46915;
      }
      ldv_46915: 
#line 983 
      ;
    }
    else ;
    
#line 984 
    if ((unsigned int)data->phy_id == 32U && (tp->flags & 64) != 0) {
      
#line 985 
      u16 value_0 = data->val_in;
      
#line 986 
      if (regnum == 0U) {
        
#line 987 
        if (((int)value_0 & 4608) == 4608) 
          
#line 988 
          if (tp->chip_id == 9) 
#line 989 
                                pnic2_start_nway(dev); else 
#line 991 
                                                            t21142_start_nway(dev);
        else ;
      }
      else 
        
#line 994 
        if (regnum == 4U) 
#line 995 
                          tp->sym_advertise = value_0; else ;
    }
    else 
#line 997 
         tulip_mdio_write(dev,(int)data->phy_id & 31,(int)regnum,(int)data->val_in);
    
#line 999 
    __retres = 0;
    
#line 999 
    goto return_label;
    default: 
#line 1000 
    ;
    
#line 1001 
    __retres = -95;
    
#line 1001 
    goto return_label;
  }
  
#line 1004 
  __retres = -95;
  return_label: 
#line 1004 
                return __retres;
}


#line 1013  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/tulip_core.c"
static void build_setup_frame_hash(u16 *setup_frm, struct net_device *dev)
{
  u16 hash_table[32U];
  struct netdev_hw_addr *ha;
  int i;
  u16 *eaddrs;
  struct netdev_hw_addr *tmp_0;
  struct netdev_hw_addr *tmp_2;
  u16 *tmp_3;
  u16 *tmp_4;
  u16 *tmp_5;
  u16 *tmp_6;
  u16 *tmp_7;
  u16 *tmp_8;
  u16 *tmp_9;
  u16 *tmp_10;
  
#line 1015 
  struct tulip_private *tp = netdev_priv((struct net_device const *)dev);
  
#line 1021 
  memset((void *)(& hash_table),0,64UL);
  
#line 1022 
  __set_bit_le(255,(void *)(& hash_table));
  {
    
#line 1024 
    struct list_head const *__mptr = (struct list_head const *)dev->mc.list.next;
    
#line 1024 
    tmp_0 = (struct netdev_hw_addr *)__mptr;
  }
  
#line 1024 
  ha = tmp_0;
  
#line 1024 
  goto ldv_46934;
  ldv_46933: 
#line 1025 
  ;
  {
    u32 tmp_1;
    
#line 1025 
    tmp_1 = crc32_le(4294967295U,(unsigned char const *)(& ha->addr),6UL);
    
#line 1025 
    int index = (int)tmp_1 & 511;
    
#line 1027 
    __set_bit_le(index,(void *)(& hash_table));
  }
  {
    
#line 1024 
    struct list_head const *__mptr_0 = (struct list_head const *)ha->list.next;
    
#line 1024 
    tmp_2 = (struct netdev_hw_addr *)__mptr_0;
  }
  
#line 1024 
  ha = tmp_2;
  ldv_46934: 
#line 1026 
  ;
  
#line 1024 
  if (& ha->list != & dev->mc.list) 
#line 1026 
                                    goto ldv_46933; else 
#line 1029 
                                                         goto ldv_46935;
  ldv_46935: 
#line 1030 
  ;
  
#line 1029 
  i = 0;
  
#line 1029 
  goto ldv_46937;
  ldv_46936: 
#line 1030 
  ;
  
#line 1030 
  tmp_3 = setup_frm;
  
#line 1030 
  setup_frm += 1;
  
#line 1030 
  *tmp_3 = hash_table[i];
  
#line 1031 
  tmp_4 = setup_frm;
  
#line 1031 
  setup_frm += 1;
  
#line 1031 
  *tmp_4 = hash_table[i];
  
#line 1029 
  i += 1;
  ldv_46937: 
#line 1030 
  ;
  
#line 1029 
  if (i <= 31) 
#line 1031 
               goto ldv_46936; else 
#line 1034 
                                    goto ldv_46938;
  ldv_46938: 
#line 1035 
  ;
  
#line 1033 
  setup_frm = & tp->setup_frame[78];
  
#line 1036 
  eaddrs = (u16 *)dev->dev_addr;
  
#line 1037 
  tmp_5 = setup_frm;
  
#line 1037 
  setup_frm += 1;
  
#line 1037 
  *tmp_5 = *eaddrs;
  
#line 1037 
  tmp_6 = setup_frm;
  
#line 1037 
  setup_frm += 1;
  
#line 1037 
  *tmp_6 = *eaddrs;
  
#line 1038 
  tmp_7 = setup_frm;
  
#line 1038 
  setup_frm += 1;
  
#line 1038 
  *tmp_7 = *(eaddrs + 1U);
  
#line 1038 
  tmp_8 = setup_frm;
  
#line 1038 
  setup_frm += 1;
  
#line 1038 
  *tmp_8 = *(eaddrs + 1U);
  
#line 1039 
  tmp_9 = setup_frm;
  
#line 1039 
  setup_frm += 1;
  
#line 1039 
  *tmp_9 = *(eaddrs + 2U);
  
#line 1039 
  tmp_10 = setup_frm;
  
#line 1039 
  setup_frm += 1;
  
#line 1039 
  *tmp_10 = *(eaddrs + 2U);
  
#line 1040 
  return;
}


#line 1042  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/tulip_core.c"
static void build_setup_frame_perfect(u16 *setup_frm, struct net_device *dev)
{
  struct netdev_hw_addr *ha;
  u16 *eaddrs;
  struct netdev_hw_addr *tmp_0;
  u16 *tmp_1;
  u16 *tmp_2;
  u16 *tmp_3;
  u16 *tmp_4;
  u16 *tmp_5;
  u16 *tmp_6;
  u16 *tmp_7;
  u16 *tmp_8;
  u16 *tmp_9;
  struct netdev_hw_addr *tmp_10;
  u16 *tmp_11;
  u16 *tmp_12;
  u16 *tmp_13;
  u16 *tmp_14;
  u16 *tmp_15;
  u16 *tmp_16;
  
#line 1044 
  struct tulip_private *tp = netdev_priv((struct net_device const *)dev);
  {
    
#line 1050 
    struct list_head const *__mptr = (struct list_head const *)dev->mc.list.next;
    
#line 1050 
    tmp_0 = (struct netdev_hw_addr *)__mptr;
  }
  
#line 1050 
  ha = tmp_0;
  
#line 1050 
  goto ldv_46951;
  ldv_46950: 
#line 1051 
  ;
  
#line 1051 
  eaddrs = (u16 *)(& ha->addr);
  
#line 1052 
  tmp_1 = setup_frm;
  
#line 1052 
  setup_frm += 1;
  
#line 1052 
  *tmp_1 = *eaddrs;
  
#line 1052 
  tmp_2 = setup_frm;
  
#line 1052 
  setup_frm += 1;
  
#line 1052 
  tmp_3 = eaddrs;
  
#line 1052 
  eaddrs += 1;
  
#line 1052 
  *tmp_2 = *tmp_3;
  
#line 1053 
  tmp_4 = setup_frm;
  
#line 1053 
  setup_frm += 1;
  
#line 1053 
  *tmp_4 = *eaddrs;
  
#line 1053 
  tmp_5 = setup_frm;
  
#line 1053 
  setup_frm += 1;
  
#line 1053 
  tmp_6 = eaddrs;
  
#line 1053 
  eaddrs += 1;
  
#line 1053 
  *tmp_5 = *tmp_6;
  
#line 1054 
  tmp_7 = setup_frm;
  
#line 1054 
  setup_frm += 1;
  
#line 1054 
  *tmp_7 = *eaddrs;
  
#line 1054 
  tmp_8 = setup_frm;
  
#line 1054 
  setup_frm += 1;
  
#line 1054 
  tmp_9 = eaddrs;
  
#line 1054 
  eaddrs += 1;
  
#line 1054 
  *tmp_8 = *tmp_9;
  {
    
#line 1050 
    struct list_head const *__mptr_0 = (struct list_head const *)ha->list.next;
    
#line 1050 
    tmp_10 = (struct netdev_hw_addr *)__mptr_0;
  }
  
#line 1050 
  ha = tmp_10;
  ldv_46951: 
#line 1052 
  ;
  
#line 1050 
  if (& ha->list != & dev->mc.list) 
#line 1052 
                                    goto ldv_46950; else 
#line 1055 
                                                         goto ldv_46952;
  ldv_46952: 
#line 1056 
  ;
  
#line 1057 
  memset((void *)setup_frm,255,(unsigned long)((15 - dev->mc.count) * 12));
  
#line 1058 
  setup_frm = & tp->setup_frame[90];
  
#line 1061 
  eaddrs = (u16 *)dev->dev_addr;
  
#line 1062 
  tmp_11 = setup_frm;
  
#line 1062 
  setup_frm += 1;
  
#line 1062 
  *tmp_11 = *eaddrs;
  
#line 1062 
  tmp_12 = setup_frm;
  
#line 1062 
  setup_frm += 1;
  
#line 1062 
  *tmp_12 = *eaddrs;
  
#line 1063 
  tmp_13 = setup_frm;
  
#line 1063 
  setup_frm += 1;
  
#line 1063 
  *tmp_13 = *(eaddrs + 1U);
  
#line 1063 
  tmp_14 = setup_frm;
  
#line 1063 
  setup_frm += 1;
  
#line 1063 
  *tmp_14 = *(eaddrs + 1U);
  
#line 1064 
  tmp_15 = setup_frm;
  
#line 1064 
  setup_frm += 1;
  
#line 1064 
  *tmp_15 = *(eaddrs + 2U);
  
#line 1064 
  tmp_16 = setup_frm;
  
#line 1064 
  setup_frm += 1;
  
#line 1064 
  *tmp_16 = *(eaddrs + 2U);
  
#line 1065 
  return;
}


#line 1068  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/tulip_core.c"
static void set_rx_mode(struct net_device *dev)
{
  int csr6;
  unsigned int tmp_0;
  
#line 1070 
  struct tulip_private *tp = netdev_priv((struct net_device const *)dev);
  
#line 1071 
  void *ioaddr = tp->base_addr;
  
#line 1074 
  tmp_0 = ioread32(ioaddr + 48U);
  
#line 1074 
  csr6 = (int)tmp_0 & -214;
  
#line 1076 
  tp->csr6 &= 4294967082U;
  
#line 1077 
  if ((dev->flags & 256U) != 0U) {
    
#line 1078 
    tp->csr6 |= 192U;
    
#line 1079 
    csr6 |= 192;
  }
  else 
    
#line 1080 
    if (dev->mc.count > 1000 || (dev->flags & 512U) != 0U) {
      
#line 1083 
      tp->csr6 |= 128U;
      
#line 1084 
      csr6 |= 128;
    }
    else 
      
#line 1085 
      if ((tp->flags & 32) != 0) {
        struct netdev_hw_addr *ha;
        
#line 1089 
        if (dev->mc.count > 64) {
          
#line 1091 
          tp->csr6 |= 128U;
          
#line 1092 
          csr6 |= 128;
        }
        else {
          int filterbit;
          struct netdev_hw_addr *tmp_1;
          struct netdev_hw_addr *tmp_13;
          
#line 1094 
          u32 mc_filter[2U] = {0U, 0U};
          {
            
#line 1096 
            struct list_head const *__mptr = (struct list_head const *)dev->mc.list.next;
            
#line 1096 
            tmp_1 = (struct netdev_hw_addr *)__mptr;
          }
          
#line 1096 
          ha = tmp_1;
          
#line 1096 
          goto ldv_46975;
          ldv_46974: 
#line 1097 
          ;
          
#line 1097 
          if ((tp->flags & 2048) != 0) {
            u32 tmp_2;
            
#line 1098 
            tmp_2 = crc32_le(4294967295U,(unsigned char const *)(& ha->addr),6UL);
            
#line 1098 
            filterbit = (int)tmp_2;
          }
          else {
            u32 tmp_7;
            {
              u32 tmp_6;
              
#line 1101 
              u32 __x = crc32_le(4294967295U,(unsigned char const *)(& ha->addr),6UL);
              
#line 1101 
              if (0 != 0) {
                u32 tmp_4;
                {
                  
#line 1101 
                  u32 __x_0 = __x_0;
                  
#line 1101 
                  __x_0 = (__x_0 << 16) | (__x_0 >> ((unsigned long)8 * sizeof(__x_0) - (unsigned long)16));
                  
#line 1101 
                  __x_0 = ((__x_0 >> 8) & 16711935U) | ((__x_0 << 8) & 4278255360U);
                  
#line 1101 
                  __x_0 = ((__x_0 >> 4) & 252645135U) | ((__x_0 << 4) & 4042322160U);
                  
#line 1101 
                  __x_0 = ((__x_0 >> 2) & 858993459U) | ((__x_0 << 2) & 3435973836U);
                  
#line 1101 
                  __x_0 = ((__x_0 >> 1) & 1431655765U) | ((__x_0 << 1) & 2863311530U);
                  
#line 1101 
                  tmp_4 = __x_0;
                }
                
#line 1101 
                tmp_6 = tmp_4;
              }
              else 
#line 1101 
                   tmp_6 = __bitrev32(__x);
              
#line 1101 
              tmp_7 = tmp_6;
            }
            
#line 1101 
            filterbit = (int)(tmp_7 >> 26);
          }
          
#line 1103 
          filterbit &= 63;
          
#line 1104 
          mc_filter[filterbit >> 5] |= (unsigned int)(1 << (filterbit & 31));
          
#line 1105 
          if (tulip_debug > 2) {
            u32 tmp_12;
            
#line 1106 
            ;
            {
              u32 tmp_11;
              
#line 1106 
              u32 __x_1 = crc32_le(4294967295U,(unsigned char const *)(& ha->addr),6UL);
              
#line 1106 
              if (0 != 0) {
                u32 tmp_9;
                {
                  
#line 1106 
                  u32 __x_2 = __x_2;
                  
#line 1106 
                  __x_2 = (__x_2 << 16) | (__x_2 >> ((unsigned long)8 * sizeof(__x_2) - (unsigned long)16));
                  
#line 1106 
                  __x_2 = ((__x_2 >> 8) & 16711935U) | ((__x_2 << 8) & 4278255360U);
                  
#line 1106 
                  __x_2 = ((__x_2 >> 4) & 252645135U) | ((__x_2 << 4) & 4042322160U);
                  
#line 1106 
                  __x_2 = ((__x_2 >> 2) & 858993459U) | ((__x_2 << 2) & 3435973836U);
                  
#line 1106 
                  __x_2 = ((__x_2 >> 1) & 1431655765U) | ((__x_2 << 1) & 2863311530U);
                  
#line 1106 
                  tmp_9 = __x_2;
                }
                
#line 1106 
                tmp_11 = tmp_9;
              }
              else 
#line 1106 
                   tmp_11 = __bitrev32(__x_1);
              
#line 1106 
              tmp_12 = tmp_11;
            }
            
#line 1106 
            ;
            
#line 1106 
            ;
            
#line 1106 
            _dev_info((struct device const *)(& dev->dev),"Added filter for %pM  %08x bit %d\n",(unsigned char *)(& ha->addr),tmp_12,filterbit);
          }
          else ;
          {
            
#line 1096 
            struct list_head const *__mptr_0 = (struct list_head const *)ha->list.next;
            
#line 1096 
            tmp_13 = (struct netdev_hw_addr *)__mptr_0;
          }
          
#line 1096 
          ha = tmp_13;
          ldv_46975: 
#line 1098 
          ;
          
#line 1096 
          if (& ha->list != & dev->mc.list) 
#line 1098 
                                            goto ldv_46974; else 
#line 1101 
                                                                 goto ldv_46976;
          ldv_46976: 
#line 1102 
          ;
          
#line 1112 
          if (mc_filter[0] == tp->mc_filter[0] && mc_filter[1] == tp->mc_filter[1]) ;
          else 
            
#line 1115 
            if ((tp->flags & 512) != 0) {
              
#line 1116 
              iowrite32(2U,ioaddr + 104U);
              
#line 1117 
              iowrite32(mc_filter[0],ioaddr + 112U);
              
#line 1118 
              iowrite32(3U,ioaddr + 104U);
              
#line 1119 
              iowrite32(mc_filter[1],ioaddr + 112U);
            }
            else 
              
#line 1120 
              if ((tp->flags & 2048) != 0) {
                
#line 1121 
                iowrite32(mc_filter[0],ioaddr + 172U);
                
#line 1122 
                iowrite32(mc_filter[1],ioaddr + 176U);
              }
              else ;
          
#line 1124 
          tp->mc_filter[0] = mc_filter[0];
          
#line 1125 
          tp->mc_filter[1] = mc_filter[1];
        }
      }
      else {
        unsigned long flags;
        
#line 1129 
        u32 tx_flags = 134217920U;
        
#line 1133 
        if (dev->mc.count > 14) {
          
#line 1135 
          build_setup_frame_hash((u16 *)(& tp->setup_frame),dev);
          
#line 1136 
          tx_flags = 138412224U;
        }
        else 
#line 1138 
             build_setup_frame_perfect((u16 *)(& tp->setup_frame),dev);
        
#line 1141 
        ldv___ldv_spin_lock_86(& tp->lock);
        
#line 1143 
        if (tp->cur_tx - tp->dirty_tx > 30U) ;
        else {
          unsigned int entry;
          unsigned int tmp_14;
          
#line 1147 
          int dummy = -1;
          
#line 1151 
          tmp_14 = tp->cur_tx;
          
#line 1151 
          tp->cur_tx += 1U;
          
#line 1151 
          entry = tmp_14 & 31U;
          
#line 1153 
          if (entry != 0U) {
            unsigned int tmp_15;
            
#line 1155 
            tp->tx_buffers[entry].skb = (struct sk_buff *)0;
            
#line 1156 
            tp->tx_buffers[entry].mapping = 0ULL;
            
#line 1157 
            if (entry == 31U) 
#line 1157 
                              (tp->tx_ring + entry)->length = 33554432U; else 
                                                                    
#line 1157 
                                                                    (tp->tx_ring + entry)->length = 0U;
            
#line 1159 
            (tp->tx_ring + entry)->buffer1 = 0U;
            
#line 1161 
            dummy = (int)entry;
            
#line 1162 
            tmp_15 = tp->cur_tx;
            
#line 1162 
            tp->cur_tx += 1U;
            
#line 1162 
            entry = tmp_15 & 31U;
          }
          else ;
          
#line 1166 
          tp->tx_buffers[entry].skb = (struct sk_buff *)0;
          
#line 1167 
          tp->tx_buffers[entry].mapping = pci_map_single(tp->pdev,(void *)(& tp->setup_frame),192UL,1);
          
#line 1172 
          if (entry == 31U) 
#line 1173 
                            tx_flags |= 33554432U; else ;
          
#line 1174 
          (tp->tx_ring + entry)->length = tx_flags;
          
#line 1175 
          (tp->tx_ring + entry)->buffer1 = (unsigned int)tp->tx_buffers[entry].mapping;
          
#line 1177 
          (tp->tx_ring + entry)->status = 2147483648U;
          
#line 1178 
          if (dummy >= 0) 
#line 1179 
                          (tp->tx_ring + dummy)->status = 2147483648U; else ;
          
#line 1180 
          if (tp->cur_tx - tp->dirty_tx > 29U) 
#line 1181 
                                               netif_start_queue(dev); else ;
          
#line 1184 
          iowrite32(0U,ioaddr + 8U);
        }
        
#line 1187 
        ldv_spin_unlock_irqrestore_87(& tp->lock,flags);
      }
  
#line 1190 
  iowrite32((unsigned int)csr6,ioaddr + 48U);
  
#line 1191 
  return;
}


#line 1194  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/tulip_core.c"
static void tulip_mwi_config(struct pci_dev *pdev, struct net_device *dev)
{
  u8 cache;
  u16 pci_command;
  u32 csr0_0;
  
#line 1196 
  struct tulip_private *tp = netdev_priv((struct net_device const *)dev);
  
#line 1201 
  if (tulip_debug > 3) {
    
#line 1202 
    struct _ddebug descriptor = {.modname = "tulip", .function = "tulip_mwi_config", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/tulip_core.c", .format = "tulip_mwi_config()\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1202U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))1U};
    
#line 1202 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 1202 
                                                        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)dev,"tulip_mwi_config()\n"); else ;
  }
  else ;
  
#line 1204 
  csr0_0 = 0U;
  
#line 1204 
  tp->csr0 = csr0_0;
  
#line 1207 
  csr0_0 |= 18874368U;
  
#line 1212 
  pci_try_set_mwi(pdev);
  
#line 1215 
  pci_read_config_word((struct pci_dev const *)pdev,4,& pci_command);
  
#line 1216 
  if ((csr0_0 & 16777216U) != 0U && ((int)pci_command & 16) == 0) 
#line 1217 
                                                                  csr0_0 &= 4278190079U; else ;
  
#line 1220 
  pci_read_config_byte((struct pci_dev const *)pdev,12,& cache);
  
#line 1221 
  if ((csr0_0 & 16777216U) != 0U && (unsigned int)cache == 0U) {
    
#line 1222 
    csr0_0 &= 4278190079U;
    
#line 1223 
    pci_clear_mwi(pdev);
  }
  else ;
  
#line 1229 
  switch ((int)cache) {
    case 8: 
#line 1230 
    ;
    
#line 1231 
    csr0_0 |= 8409088U;
    
#line 1232 
    goto ldv_46992;
    case 16: 
#line 1233 
    ;
    
#line 1234 
    csr0_0 |= 8425472U;
    
#line 1235 
    goto ldv_46992;
    case 32: 
#line 1236 
    ;
    
#line 1237 
    csr0_0 |= 8445952U;
    
#line 1238 
    goto ldv_46992;
    default: 
#line 1239 
    ;
    
#line 1240 
    cache = (unsigned char)0U;
    
#line 1241 
    goto ldv_46992;
  }
  ldv_46992: 
#line 1247 
  ;
  
#line 1247 
  if ((unsigned int)cache != 0U) 
#line 1248 
                                 goto out; else ;
  
#line 1251 
  if ((csr0_0 & 16777216U) != 0U) {
    
#line 1252 
    pci_clear_mwi(pdev);
    
#line 1253 
    csr0_0 &= 4278190079U;
  }
  else ;
  
#line 1259 
  csr0_0 |= 18432U;
  out: 
#line 1261 
  ;
  
#line 1262 
  tp->csr0 = csr0_0;
  
#line 1263 
  if (tulip_debug > 2) {
    
#line 1264 
    struct _ddebug descriptor_0 = {.modname = "tulip", .function = "tulip_mwi_config", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/tulip_core.c", .format = "MWI config cacheline=%d, csr0=%08x\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1265U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))1U};
    
#line 1264 
    if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 1264 
                                                          __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)dev,"MWI config cacheline=%d, csr0=%08x\n",(int)cache,csr0_0); else ;
  }
  else ;
  
#line 1266 
  return;
}


#line 1274  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/tulip_core.c"
static int tulip_uli_dm_quirk(struct pci_dev *pdev)
{
  int __retres;
  
#line 1276 
  if ((unsigned int)pdev->vendor == 4738U && (unsigned int)pdev->device == 37122U) {
    
#line 1277 
    __retres = 1;
    
#line 1277 
    goto return_label;
  }
  else ;
  
#line 1278 
  __retres = 0;
  return_label: 
#line 1278 
                return __retres;
}


#line 1281  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/tulip_core.c"
static struct net_device_ops const tulip_netdev_ops = {.ndo_init = (int (*)(struct net_device *))0, .ndo_uninit = (void (*)(struct net_device *))0, .ndo_open = & tulip_open, .ndo_stop = & tulip_close, .ndo_start_xmit = & tulip_start_xmit, .ndo_select_queue = (u16 (*)(struct net_device *, struct sk_buff *, void *, u16 (*)(struct net_device *, struct sk_buff *)))0, .ndo_change_rx_flags = (void (*)(struct net_device *, int ))0, .ndo_set_rx_mode = & set_rx_mode, .ndo_set_mac_address = & eth_mac_addr, .ndo_validate_addr = & eth_validate_addr, .ndo_do_ioctl = & private_ioctl, .ndo_set_config = (int (*)(struct net_device *, struct ifmap *))0, .ndo_change_mtu = & eth_change_mtu, .ndo_neigh_setup = (int (*)(struct net_device *, struct neigh_parms *))0, .ndo_tx_timeout = & tulip_tx_timeout, .ndo_get_stats64 = (struct rtnl_link_stats64 *(*)(struct net_device *, struct rtnl_link_stats64 *))0, .ndo_get_stats = & tulip_get_stats, .ndo_vlan_rx_add_vid = (int (*)(struct net_device *, __be16 , u16 ))0, .ndo_vlan_rx_kill_vid = (int (*)(struct net_device *, __be16 , u16 ))0, .ndo_poll_controller = & poll_tulip, .ndo_netpoll_setup = (int (*)(struct net_device *, struct netpoll_info *))0, .ndo_netpoll_cleanup = (void (*)(struct net_device *))0, .ndo_busy_poll = (int (*)(struct napi_struct *))0, .ndo_set_vf_mac = (int (*)(struct net_device *, int , u8 *))0, .ndo_set_vf_vlan = (int (*)(struct net_device *, int , u16 , u8 ))0, .ndo_set_vf_rate = (int (*)(struct net_device *, int , int , int ))0, .ndo_set_vf_spoofchk = (int (*)(struct net_device *, int , bool ))0, .ndo_get_vf_config = (int (*)(struct net_device *, int , struct ifla_vf_info *))0, .ndo_set_vf_link_state = (int (*)(struct net_device *, int , int ))0, .ndo_get_vf_stats = (int (*)(struct net_device *, int , struct ifla_vf_stats *))0, .ndo_set_vf_port = (int (*)(struct net_device *, int , struct nlattr **))0, .ndo_get_vf_port = (int (*)(struct net_device *, int , struct sk_buff *))0, .ndo_set_vf_rss_query_en = (int (*)(struct net_device *, int , bool ))0, .ndo_setup_tc = (int (*)(struct net_device *, u8 ))0, .ndo_fcoe_enable = (int (*)(struct net_device *))0, .ndo_fcoe_disable = (int (*)(struct net_device *))0, .ndo_fcoe_ddp_setup = (int (*)(struct net_device *, u16 , struct scatterlist *, unsigned int ))0, .ndo_fcoe_ddp_done = (int (*)(struct net_device *, u16 ))0, .ndo_fcoe_ddp_target = (int (*)(struct net_device *, u16 , struct scatterlist *, unsigned int ))0, .ndo_fcoe_get_hbainfo = (int (*)(struct net_device *, struct netdev_fcoe_hbainfo *))0, .ndo_fcoe_get_wwn = (int (*)(struct net_device *, u64 *, int ))0, .ndo_rx_flow_steer = (int (*)(struct net_device *, struct sk_buff const *, u16 , u32 ))0, .ndo_add_slave = (int (*)(struct net_device *, struct net_device *))0, .ndo_del_slave = (int (*)(struct net_device *, struct net_device *))0, .ndo_fix_features = (netdev_features_t (*)(struct net_device *, netdev_features_t ))0, .ndo_set_features = (int (*)(struct net_device *, netdev_features_t ))0, .ndo_neigh_construct = (int (*)(struct neighbour *))0, .ndo_neigh_destroy = (void (*)(struct neighbour *))0, .ndo_fdb_add = (int (*)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char const *, u16 , u16 ))0, .ndo_fdb_del = (int (*)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char const *, u16 ))0, .ndo_fdb_dump = (int (*)(struct sk_buff *, struct netlink_callback *, struct net_device *, struct net_device *, int ))0, .ndo_bridge_setlink = (int (*)(struct net_device *, struct nlmsghdr *, u16 ))0, .ndo_bridge_getlink = (int (*)(struct sk_buff *, u32 , u32 , struct net_device *, u32 , int ))0, .ndo_bridge_dellink = (int (*)(struct net_device *, struct nlmsghdr *, u16 ))0, .ndo_change_carrier = (int (*)(struct net_device *, bool ))0, .ndo_get_phys_port_id = (int (*)(struct net_device *, struct netdev_phys_item_id *))0, .ndo_get_phys_port_name = (int (*)(struct net_device *, char *, size_t ))0, .ndo_add_vxlan_port = (void (*)(struct net_device *, sa_family_t , __be16 ))0, .ndo_del_vxlan_port = (void (*)(struct net_device *, sa_family_t , __be16 ))0, .ndo_dfwd_add_station = (void *(*)(struct net_device *, struct net_device *))0, .ndo_dfwd_del_station = (void (*)(struct net_device *, void *))0, .ndo_dfwd_start_xmit = (netdev_tx_t (*)(struct sk_buff *, struct net_device *, void *))0, .ndo_get_lock_subclass = (int (*)(struct net_device *))0, .ndo_features_check = (netdev_features_t (*)(struct sk_buff *, struct net_device *, netdev_features_t ))0, .ndo_set_tx_maxrate = (int (*)(struct net_device *, int , u32 ))0, .ndo_get_iflink = (int (*)(struct net_device const *))0};

#line 1297  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/tulip_core.c"
struct pci_device_id const early_486_chipsets[3U] = {{.vendor = 32902U, .device = 1155U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}, {.vendor = 4153U, .device = 1174U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}, {.vendor = 0U, .device = 0U, .subvendor = 0U, .subdevice = 0U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}};

#line 1303  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/tulip_core.c"
static int tulip_init_one(struct pci_dev *pdev, struct pci_device_id const *ent)
{
  int __retres;
  struct tulip_private *tp;
  int last_irq;
  int multiport_cnt;
  int i;
  int irq;
  unsigned short sum;
  unsigned char *ee_data;
  struct net_device *dev;
  void *ioaddr;
  int tmp;
  int tmp_0;
  resource_size_t tmp_3;
  int tmp_4;
  int tmp_14;
  char *tmp_15;
  
#line 1307 
  unsigned char last_phys_addr[6U] = {(unsigned char)0U, (unsigned char)76U, (unsigned char)105U, (unsigned char)110U, (unsigned char)117U, (unsigned char)120U};
  
#line 1317 
  int board_idx = -1;
  
#line 1318 
  int chip_idx = (int)ent->driver_data;
  
#line 1319 
  char const *chip_name = (char const *)tulip_tbl[chip_idx].chip_name;
  
#line 1320 
  unsigned int eeprom_missing = 0U;
  
#line 1321 
  unsigned int force_csr0 = 0U;
  
#line 1328 
  board_idx += 1;
  
#line 1335 
  if ((unsigned int)pdev->subsystem_vendor == 4982U) {
    
#line 1336 
    printk("\001");
    
#line 1337 
    __retres = -19;
    
#line 1337 
    goto return_label;
  }
  else 
    
#line 1338 
    if ((unsigned int)pdev->subsystem_vendor == 4470U && (((unsigned int)pdev->subsystem_device == 9U || (unsigned int)pdev->subsystem_device == 2305U) || (unsigned int)pdev->subsystem_device == 2306U)) {
      
#line 1342 
      printk("\001");
      
#line 1343 
      __retres = -19;
      
#line 1343 
      goto return_label;
    }
    else ;
  
#line 1383 
  tmp = pci_dev_present((struct pci_device_id const *)(& early_486_chipsets));
  
#line 1383 
  if (tmp != 0) {
    
#line 1384 
    csr0 = 10504192;
    
#line 1385 
    force_csr0 = 1U;
  }
  else ;
  
#line 1389 
  if (chip_idx == 8) {
    
#line 1390 
    if ((csr0 & 16128) == 0) 
#line 1391 
                             csr0 |= 8192; else ;
  }
  else ;
  
#line 1395 
  if (chip_idx == 4) 
#line 1396 
                     csr0 &= 983039; else ;
  
#line 1399 
  tmp_0 = tulip_uli_dm_quirk(pdev);
  
#line 1399 
  if (tmp_0 != 0) 
#line 1400 
                  csr0 &= -32571648; else ;
  
#line 1409 
  i = pci_enable_device(pdev);
  
#line 1410 
  if (i != 0) {
    
#line 1411 
    printk("\001",board_idx);
    
#line 1412 
    __retres = i;
    
#line 1412 
    goto return_label;
  }
  else ;
  
#line 1415 
  irq = (int)pdev->irq;
  
#line 1418 
  dev = ldv_alloc_etherdev_mqs_88(4240,1U,1U);
  
#line 1419 
  if (dev == (struct net_device *)0) {
    
#line 1420 
    __retres = -12;
    
#line 1420 
    goto return_label;
  }
  else ;
  
#line 1422 
  dev->dev.parent = & pdev->dev;
  
#line 1423 
  if (pdev->resource[0].start != 0ULL || pdev->resource[0].end != pdev->resource[0].start) 
    
#line 1423 
    tmp_3 = (pdev->resource[0].end - pdev->resource[0].start) + 1ULL; else 
                                                                    
#line 1423 
                                                                    tmp_3 = 0ULL;
  
#line 1423 
  ;
  
#line 1423 
  if (tmp_3 < (unsigned long long)tulip_tbl[chip_idx].io_size) {
    resource_size_t tmp_1;
    char const *tmp_2;
    
#line 1424 
    ;
    
#line 1424 
    if (pdev->resource[0].start != 0ULL || pdev->resource[0].end != pdev->resource[0].start) 
      
#line 1424 
      tmp_1 = (pdev->resource[0].end - pdev->resource[0].start) + 1ULL; else 
                                                                    
#line 1424 
                                                                    tmp_1 = 0ULL;
    
#line 1424 
    tmp_2 = pci_name((struct pci_dev const *)pdev);
    
#line 1424 
    printk("\001",tmp_2,tmp_1,pdev->resource[0].start);
    
#line 1428 
    goto err_out_free_netdev;
  }
  else ;
  
#line 1433 
  tmp_4 = pci_request_regions(pdev,"tulip");
  
#line 1433 
  if (tmp_4 != 0) 
#line 1434 
                  goto err_out_free_netdev; else ;
  
#line 1436 
  ioaddr = pci_iomap(pdev,1,(unsigned long)tulip_tbl[chip_idx].io_size);
  
#line 1438 
  if (ioaddr == (void *)0) 
#line 1439 
                           goto err_out_free_res; else ;
  
#line 1445 
  tp = (struct tulip_private *)netdev_priv((struct net_device const *)dev);
  
#line 1446 
  tp->dev = dev;
  
#line 1448 
  tp->rx_ring = (struct tulip_rx_desc *)pci_alloc_consistent(pdev,2560UL,& tp->rx_ring_dma);
  
#line 1452 
  if (tp->rx_ring == (struct tulip_rx_desc *)0) 
#line 1453 
                                                goto err_out_mtable; else ;
  
#line 1454 
  tp->tx_ring = (struct tulip_tx_desc *)(tp->rx_ring + 128U);
  
#line 1455 
  tp->tx_ring_dma = tp->rx_ring_dma + 2048ULL;
  
#line 1457 
  tp->chip_id = chip_idx;
  
#line 1458 
  tp->flags = tulip_tbl[chip_idx].flags;
  
#line 1460 
  tp->wolinfo.supported = 0U;
  
#line 1461 
  tp->wolinfo.wolopts = 0U;
  
#line 1463 
  if (chip_idx == 10) {
    u32 sig;
    
#line 1465 
    pci_read_config_dword((struct pci_dev const *)pdev,128,& sig);
    
#line 1466 
    if (sig == 159453975U) {
      
#line 1467 
      tp->flags |= 65536;
      
#line 1468 
      tp->wolinfo.supported = 33U;
      
#line 1469 
      printk("\001","tulip_init_one");
    }
    else ;
  }
  else ;
  
#line 1473 
  tp->pdev = pdev;
  
#line 1474 
  tp->base_addr = ioaddr;
  
#line 1475 
  tp->revision = (int)pdev->revision;
  
#line 1476 
  tp->csr0 = (unsigned int)csr0;
  
#line 1477 
  spinlock_check(& tp->lock);
  {
    struct lock_class_key __key;
    
#line 1477 
    __raw_spin_lock_init(& tp->lock.__anonCompField_spinlock_18.rlock,"&(&tp->lock)->rlock",& __key);
  }
  
#line 1478 
  spinlock_check(& tp->mii_lock);
  {
    struct lock_class_key __key_0;
    
#line 1478 
    __raw_spin_lock_init(& tp->mii_lock.__anonCompField_spinlock_18.rlock,"&(&tp->mii_lock)->rlock",& __key_0);
  }
  {
    struct lock_class_key __key_1;
    
#line 1479 
    init_timer_key(& tp->timer,0U,"(&tp->timer)",& __key_1);
  }
  
#line 1480 
  tp->timer.data = (unsigned long)dev;
  
#line 1481 
  tp->timer.function = tulip_tbl[tp->chip_id].media_timer;
  {
    struct lock_class_key __key_2;
    
#line 1483 
    __init_work(& tp->media_work,0);
    
#line 1483 
    atomic_long_t __constr_expr_37 = {.counter = WORK_STRUCT_NO_POOL};
    
#line 1483 
    tp->media_work.data = __constr_expr_37;
    
#line 1483 
    lockdep_init_map(& tp->media_work.lockdep_map,"(&tp->media_work)",& __key_2,0);
    
#line 1483 
    INIT_LIST_HEAD(& tp->media_work.entry);
    
#line 1483 
    tp->media_work.func = tulip_tbl[tp->chip_id].media_task;
  }
  
#line 1486 
  if (force_csr0 == 0U && (tp->flags & 4096) != 0) 
#line 1487 
                                                   tulip_mwi_config(pdev,dev); else ;
  
#line 1491 
  tulip_stop_rxtx_4(tp);
  
#line 1493 
  pci_set_master(pdev);
  
#line 1513 
  ioread32(ioaddr + 64U);
  
#line 1519 
  ee_data = (unsigned char *)(& tp->eeprom);
  
#line 1520 
  memset((void *)ee_data,0,512UL);
  
#line 1521 
  sum = (unsigned short)0U;
  
#line 1522 
  if (chip_idx == 4) {
    
#line 1523 
    i = 0;
    
#line 1523 
    goto ldv_47037;
    ldv_47036: 
#line 1524 
    ;
    {
      int value;
      unsigned int tmp_7;
      
#line 1524 
      int boguscnt = 100000;
      
#line 1525 
      iowrite32((unsigned int)(i | 1536),ioaddr + 152U);
      ldv_47034: 
#line 1526 
      ;
      
#line 1527 
      tmp_7 = ioread32(ioaddr + 72U);
      
#line 1527 
      value = (int)tmp_7;
      
#line 1528 
      if (value < 0) {
        
#line 1528 
        boguscnt -= 1;
        
#line 1528 
        if (boguscnt > 0) 
#line 1530 
                          goto ldv_47034; else 
#line 1533 
                                               goto ldv_47035;
      }
      else 
#line 1533 
           goto ldv_47035;
      ldv_47035: 
#line 1534 
      ;
      
#line 1529 
      put_unaligned_le16((unsigned short)((int)((unsigned short)value)),(void *)dev->dev_addr + i);
      
#line 1530 
      sum = (unsigned short)((int)((unsigned short)value) + (int)sum);
    }
    
#line 1523 
    i += 1;
    ldv_47037: 
#line 1524 
    ;
    
#line 1523 
    if (i <= 2) 
#line 1525 
                goto ldv_47036; else 
#line 1528 
                                     goto ldv_47038;
    ldv_47038: 
#line 1529 
    ;
  }
  else 
    
#line 1532 
    if (chip_idx == 10) {
      unsigned int tmp_8;
      unsigned int tmp_9;
      
#line 1534 
      ;
      
#line 1534 
      tmp_8 = ioread32(ioaddr + 164U);
      
#line 1534 
      put_unaligned_le32(tmp_8,(void *)dev->dev_addr);
      
#line 1535 
      ;
      
#line 1535 
      tmp_9 = ioread32(ioaddr + 168U);
      
#line 1535 
      put_unaligned_le16((unsigned short)((int)((unsigned short)tmp_9)),(void *)(dev->dev_addr + 4U));
      
#line 1536 
      i = 0;
      
#line 1536 
      goto ldv_47040;
      ldv_47039: 
#line 1537 
      ;
      
#line 1537 
      sum = (unsigned short)((int)((unsigned short)*(dev->dev_addr + i)) + (int)sum);
      
#line 1536 
      i += 1;
      ldv_47040: 
#line 1537 
      ;
      
#line 1536 
      if (i <= 5) 
#line 1538 
                  goto ldv_47039; else 
#line 1541 
                                       goto ldv_47041;
      ldv_47041: 
#line 1542 
      ;
    }
    else {
      int tmp_11;
      int tmp_10;
      
#line 1540 
      int sa_offset = 0;
      
#line 1541 
      tmp_10 = tulip_read_eeprom(dev,255,8);
      
#line 1541 
      if ((tmp_10 & 262144) != 0) 
#line 1541 
                                  tmp_11 = 8; else 
#line 1541 
                                                   tmp_11 = 6;
      
#line 1541 
      int ee_addr_size = tmp_11;
      
#line 1542 
      int ee_max_addr = (int)((unsigned long)((1 << ee_addr_size) + -1) * (unsigned long)2U);
      
#line 1544 
      if ((unsigned int)ee_max_addr > 512U) 
#line 1545 
                                            ee_max_addr = 512; else ;
      
#line 1547 
      i = 0;
      
#line 1547 
      goto ldv_47047;
      ldv_47046: 
#line 1548 
      ;
      {
        int tmp_12;
        
#line 1548 
        tmp_12 = tulip_read_eeprom(dev,i / 2,ee_addr_size);
        
#line 1548 
        u16 data = (unsigned short)tmp_12;
        
#line 1549 
        *(ee_data + i) = (unsigned char)data;
        
#line 1550 
        *(ee_data + ((unsigned int)i + 1U)) = (unsigned char)((int)data >> 8);
      }
      
#line 1547 
      i = (int)((unsigned int)i + 2U);
      ldv_47047: 
#line 1548 
      ;
      
#line 1547 
      if (i < ee_max_addr) 
#line 1549 
                           goto ldv_47046; else 
#line 1552 
                                                goto ldv_47048;
      ldv_47048: 
#line 1553 
      ;
      
#line 1556 
      i = 0;
      
#line 1556 
      goto ldv_47050;
      ldv_47049: 
#line 1557 
      ;
      
#line 1557 
      if ((int)*(ee_data + i) != (int)*(ee_data + (i + 16))) 
#line 1558 
                                                             sa_offset = 20; else ;
      
#line 1556 
      i += 1;
      ldv_47050: 
#line 1557 
      ;
      
#line 1556 
      if (i <= 7) 
#line 1558 
                  goto ldv_47049; else 
#line 1561 
                                       goto ldv_47051;
      ldv_47051: 
#line 1562 
      ;
      
#line 1559 
      if (chip_idx == 14) {
        
#line 1561 
        if ((unsigned int)*(ee_data + 408U) == 4U && (unsigned int)*(ee_data + 409U) == 6U) 
          
#line 1562 
          sa_offset = 410; else ;
      }
      else 
        
#line 1563 
        if (((unsigned int)*ee_data == 255U && (unsigned int)*(ee_data + 1U) == 255U) && (unsigned int)*(ee_data + 2U) == 0U) {
          
#line 1565 
          sa_offset = 2;
          
#line 1566 
          multiport_cnt = 4;
        }
        else ;
      
#line 1598 
      i = 0;
      
#line 1598 
      goto ldv_47053;
      ldv_47052: 
#line 1599 
      ;
      
#line 1599 
      *(dev->dev_addr + i) = *(ee_data + (i + sa_offset));
      
#line 1600 
      sum = (unsigned short)((int)((unsigned short)*(ee_data + (i + sa_offset))) + (int)sum);
      
#line 1598 
      i += 1;
      ldv_47053: 
#line 1599 
      ;
      
#line 1598 
      if (i <= 5) 
#line 1600 
                  goto ldv_47052; else 
#line 1603 
                                       goto ldv_47054;
      ldv_47054: 
#line 1604 
      ;
    }
  
#line 1604 
  if ((((unsigned int)*(dev->dev_addr) == 160U || (unsigned int)*(dev->dev_addr) == 192U) || (unsigned int)*(dev->dev_addr) == 2U) && (unsigned int)*(dev->dev_addr + 1U) == 0U) {
    
#line 1608 
    i = 0;
    
#line 1608 
    goto ldv_47057;
    ldv_47056: 
#line 1609 
    ;
    {
      
#line 1609 
      char tmp_13 = (char)*(dev->dev_addr + i);
      
#line 1610 
      *(dev->dev_addr + i) = *(dev->dev_addr + ((unsigned int)i + 1U));
      
#line 1611 
      *(dev->dev_addr + ((unsigned int)i + 1U)) = (unsigned char)tmp_13;
    }
    
#line 1608 
    i += 2;
    ldv_47057: 
#line 1609 
    ;
    
#line 1608 
    if (i <= 5) 
#line 1610 
                goto ldv_47056; else 
#line 1613 
                                     goto ldv_47058;
    ldv_47058: 
#line 1614 
    ;
  }
  else ;
  
#line 1620 
  if ((unsigned int)sum == 0U || (unsigned int)sum == 1530U) {
    
#line 1626 
    eeprom_missing = 1U;
    
#line 1627 
    i = 0;
    
#line 1627 
    goto ldv_47060;
    ldv_47059: 
#line 1628 
    ;
    
#line 1628 
    *(dev->dev_addr + i) = last_phys_addr[i];
    
#line 1627 
    i += 1;
    ldv_47060: 
#line 1628 
    ;
    
#line 1627 
    if (i <= 4) 
#line 1629 
                goto ldv_47059; else 
#line 1632 
                                     goto ldv_47061;
    ldv_47061: 
#line 1633 
    ;
    
#line 1629 
    *(dev->dev_addr + i) = (unsigned char)((unsigned int)last_phys_addr[i] + 1U);
    
#line 1636 
    if (last_irq != 0) 
#line 1637 
                       irq = last_irq; else ;
  }
  else ;
  
#line 1641 
  i = 0;
  
#line 1641 
  goto ldv_47063;
  ldv_47062: 
#line 1642 
  ;
  
#line 1642 
  last_phys_addr[i] = *(dev->dev_addr + i);
  
#line 1641 
  i += 1;
  ldv_47063: 
#line 1642 
  ;
  
#line 1641 
  if (i <= 5) 
#line 1643 
              goto ldv_47062; else 
#line 1646 
                                   goto ldv_47064;
  ldv_47064: 
#line 1647 
  ;
  
#line 1643 
  last_irq = irq;
  
#line 1646 
  if ((unsigned int)board_idx <= 7U) {
    
#line 1647 
    if ((options[board_idx] & 31) != 0) 
#line 1648 
                                        tp->default_port = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))options[board_idx]; else ;
    
#line 1649 
    if ((options[board_idx] & 512) != 0 || full_duplex[board_idx] > 0) 
      
#line 1650 
      tp->full_duplex = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U; else ;
    
#line 1651 
    if (mtu[board_idx] > 0) 
#line 1652 
                            dev->mtu = (unsigned int)mtu[board_idx]; else ;
  }
  else ;
  
#line 1654 
  if ((dev->mem_start & 31UL) != 0UL) 
#line 1655 
                                      tp->default_port = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))dev->mem_start; else ;
  
#line 1656 
  if ((unsigned int)*((unsigned char *)tp + 3524UL) != 0U) {
    
#line 1657 
    printk("\001",board_idx,medianame[(int)tp->default_port & 31]);
    
#line 1659 
    tp->medialock = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U;
    
#line 1660 
    if (((int)tulip_media_cap[(int)tp->default_port] & 2) != 0) 
#line 1661 
                                                                tp->full_duplex = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U; else ;
  }
  else ;
  
#line 1663 
  if ((unsigned int)*((unsigned char *)tp + 3524UL) != 0U) 
#line 1664 
                                                           tp->full_duplex_lock = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U; else ;
  
#line 1666 
  if (((int)tulip_media_cap[(int)tp->default_port] & 4) != 0) {
    
#line 1667 
    u16 const media2advert[7U] = {(unsigned short)32U, (unsigned short)64U, (unsigned short)992U, (unsigned short)96U, (unsigned short)128U, (unsigned short)256U, (unsigned short)512U};
    
#line 1670 
    tp->mii_advertise = media2advert[(int)tp->default_port + -9];
    
#line 1671 
    tp->mii_advertise = (unsigned short)((int)tp->mii_advertise | (tp->flags & 1024));
  }
  else ;
  
#line 1674 
  if ((tp->flags & 2) != 0) {
    
#line 1675 
    sprintf((char *)(& dev->name),"tulip",board_idx);
    
#line 1676 
    tulip_parse_eeprom(dev);
    
#line 1677 
    strcpy((char *)(& dev->name),"eth%d");
  }
  else ;
  
#line 1680 
  if (((tp->flags & 8) != 0 || (tp->mtable != (struct mediatable *)0 && (unsigned int)*((unsigned char *)tp->mtable + 4UL) != 0U)) || (tp->mtable == (struct mediatable *)0 && (tp->flags & 1) != 0)) {
    
#line 1683 
    if (tp->mtable != (struct mediatable *)0 && (unsigned int)*((unsigned char *)tp->mtable + 4UL) != 0U) {
      
#line 1684 
      i = 0;
      
#line 1684 
      goto ldv_47068;
      ldv_47067: 
#line 1685 
      ;
      
#line 1685 
      if ((unsigned int)(tp->mtable)->mleaf[i].media == 11U) {
        
#line 1686 
        tp->cur_index = i;
        
#line 1687 
        tp->saved_if_port = (int)dev->if_port;
        
#line 1688 
        tulip_select_media(dev,2);
        
#line 1689 
        dev->if_port = (unsigned char)tp->saved_if_port;
        
#line 1690 
        goto ldv_47066;
      }
      else ;
      
#line 1684 
      i += 1;
      ldv_47068: 
#line 1685 
      ;
      
#line 1684 
      if ((int)(tp->mtable)->leafcount > i) 
#line 1686 
                                            goto ldv_47067; else 
#line 1689 
                                                                 goto ldv_47066;
      ldv_47066: 
#line 1690 
      ;
    }
    else ;
    
#line 1697 
    tulip_find_mii(dev,board_idx);
  }
  else ;
  
#line 1701 
  dev->netdev_ops = & tulip_netdev_ops;
  
#line 1702 
  dev->watchdog_timeo = 1000;
  
#line 1704 
  netif_napi_add(dev,& tp->napi,& tulip_poll,16);
  
#line 1706 
  dev->ethtool_ops = & ops;
  
#line 1708 
  tmp_14 = ldv_register_netdev_89(dev);
  
#line 1708 
  if (tmp_14 != 0) 
#line 1709 
                   goto err_out_free_ring; else ;
  
#line 1711 
  pci_set_drvdata(pdev,(void *)dev);
  
#line 1713 
  ;
  
#line 1713 
  ;
  
#line 1713 
  if (eeprom_missing != 0U) 
#line 1713 
                            tmp_15 = (char *)" EEPROM not present,"; else 
                                                                    
#line 1713 
                                                                    tmp_15 = (char *)"";
  
#line 1713 
  ;
  
#line 1713 
  ;
  
#line 1713 
  ;
  
#line 1713 
  ;
  
#line 1713 
  _dev_info((struct device const *)(& dev->dev),"%s rev %d at MMIO %#llx,%s %pM, IRQ %d\n",chip_name,(int)pdev->revision,pdev->resource[1].start,tmp_15,dev->dev_addr,irq);
  
#line 1724 
  if (tp->chip_id == 9) 
#line 1725 
                        tp->link_change = & pnic2_lnk_change;
  else 
    
#line 1726 
    if ((tp->flags & 64) != 0) 
#line 1727 
                               tp->link_change = & t21142_lnk_change;
    else 
      
#line 1728 
      if ((tp->flags & 128) != 0) 
#line 1729 
                                  tp->link_change = & pnic_lnk_change; else ;
  
#line 1732 
  switch (chip_idx) {
    case 2: 
#line 1733 
    ;
    case 13: 
#line 1734 
    ;
    default: 
#line 1735 
    ;
    
#line 1736 
    if (tp->mtable != (struct mediatable *)0) 
#line 1737 
                                              iowrite32((unsigned int)((int)(tp->mtable)->csr12dir | 256),ioaddr + 96U); else ;
    
#line 1738 
    goto ldv_47073;
    case 3: 
#line 1739 
    ;
    
#line 1740 
    if ((int)tp->mii_cnt != 0 || ((int)tulip_media_cap[(int)dev->if_port] & 4) != 0) {
      
#line 1741 
      iowrite32(2181169152U,ioaddr + 48U);
      
#line 1742 
      iowrite32(0U,ioaddr + 104U);
      
#line 1743 
      iowrite32(0U,ioaddr + 112U);
      
#line 1744 
      iowrite32(2181955584U,ioaddr + 48U);
    }
    else 
#line 1746 
         t21142_start_nway(dev);
    
#line 1747 
    goto ldv_47073;
    case 9: 
#line 1748 
    ;
    
#line 1750 
    iowrite32(0U,ioaddr + 104U);
    
#line 1751 
    iowrite32(0U,ioaddr + 112U);
    
#line 1752 
    goto ldv_47073;
    case 4: 
#line 1753 
    ;
    
#line 1754 
    if ((int)tp->mii_cnt == 0) {
      
#line 1755 
      tp->nway = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U;
      
#line 1756 
      tp->nwayset = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U;
      
#line 1757 
      iowrite32(4325376U,ioaddr + 48U);
      
#line 1758 
      iowrite32(48U,ioaddr + 96U);
      
#line 1759 
      iowrite32(127096U,ioaddr + 48U);
      
#line 1760 
      iowrite32(33681528U,ioaddr + 48U);
    }
    else ;
    
#line 1762 
    goto ldv_47073;
    case 5: 
#line 1763 
    ;
    case 11: 
#line 1764 
    ;
    
#line 1765 
    iowrite32(0U,ioaddr + 48U);
    
#line 1766 
    iowrite32(463296U,ioaddr + 112U);
    
#line 1767 
    iowrite32(1U,ioaddr + 104U);
    
#line 1768 
    goto ldv_47073;
    case 6: 
#line 1769 
    ;
    case 7: 
#line 1770 
    ;
    
#line 1771 
    iowrite32(27787264U,ioaddr + 48U);
    
#line 1772 
    iowrite32(4294967295U,ioaddr + 112U);
    
#line 1773 
    iowrite32(4096U,ioaddr + 96U);
    
#line 1774 
    goto ldv_47073;
    case 10: 
#line 1775 
    ;
    
#line 1777 
    goto ldv_47073;
  }
  ldv_47073: 
#line 1781 
  ;
  
#line 1781 
  tulip_set_power_state(tp,0,1);
  
#line 1783 
  __retres = 0;
  
#line 1783 
  goto return_label;
  err_out_free_ring: 
#line 1785 
  ;
  
#line 1786 
  pci_free_consistent(pdev,2560UL,(void *)tp->rx_ring,tp->rx_ring_dma);
  err_out_mtable: 
#line 1791 
  ;
  
#line 1792 
  kfree((void const *)tp->mtable);
  
#line 1793 
  pci_iounmap(pdev,ioaddr);
  err_out_free_res: 
#line 1795 
  ;
  
#line 1796 
  pci_release_regions(pdev);
  err_out_free_netdev: 
#line 1798 
  ;
  
#line 1799 
  ldv_free_netdev_90(dev);
  
#line 1800 
  __retres = -19;
  return_label: 
#line 1800 
                return __retres;
}


#line 1805  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/tulip_core.c"
static void tulip_set_wolopts(struct pci_dev *pdev, u32 wolopts)
{
  
#line 1807 
  struct net_device *dev = pci_get_drvdata(pdev);
  
#line 1808 
  struct tulip_private *tp = netdev_priv((struct net_device const *)dev);
  
#line 1809 
  void *ioaddr = tp->base_addr;
  
#line 1811 
  if ((tp->flags & 65536) != 0) {
    unsigned int tmp_1;
    
#line 1815 
    tmp_1 = ioread32(ioaddr + 136U);
    
#line 1816 
    tmp_1 &= 4277927807U;
    
#line 1817 
    tmp_1 |= 524288U;
    
#line 1818 
    iowrite32(tmp_1,ioaddr + 136U);
    
#line 1821 
    tmp_1 = ioread32(ioaddr + 104U);
    
#line 1822 
    tmp_1 &= 4294768895U;
    
#line 1823 
    if ((wolopts & 32U) != 0U) 
#line 1824 
                               tmp_1 |= 512U; else ;
    
#line 1825 
    if ((wolopts & 1U) != 0U) 
#line 1826 
                              tmp_1 |= 196864U; else ;
    
#line 1828 
    tmp_1 |= 7U;
    
#line 1829 
    iowrite32(tmp_1,ioaddr + 104U);
  }
  else ;
  
#line 1831 
  return;
}


#line 1836  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/tulip_core.c"
static int tulip_suspend(struct pci_dev *pdev, pm_message_t state)
{
  int __retres;
  pci_power_t pstate;
  int tmp_2;
  bool tmp_1;
  
#line 1839 
  struct net_device *dev = pci_get_drvdata(pdev);
  
#line 1840 
  struct tulip_private *tp = netdev_priv((struct net_device const *)dev);
  
#line 1842 
  if (dev == (struct net_device *)0) {
    
#line 1843 
    __retres = -22;
    
#line 1843 
    goto return_label;
  }
  else ;
  
#line 1845 
  tmp_1 = netif_running((struct net_device const *)dev);
  
#line 1845 
  if (tmp_1) 
#line 1845 
             tmp_2 = 0; else 
#line 1845 
                             tmp_2 = 1;
  
#line 1845 
  if (tmp_2) 
#line 1846 
             goto save_state; else ;
  
#line 1848 
  tulip_down(dev);
  
#line 1850 
  netif_device_detach(dev);
  
#line 1852 
  ldv_free_irq_91((tp->pdev)->irq,(void *)dev);
  save_state: 
#line 1854 
  ;
  
#line 1855 
  pci_save_state(pdev);
  
#line 1856 
  pci_disable_device(pdev);
  
#line 1857 
  pstate = pci_choose_state(pdev,state);
  
#line 1858 
  if (state.event == 2 && pstate != 0) {
    int rc;
    
#line 1861 
    tulip_set_wolopts(pdev,tp->wolinfo.wolopts);
    
#line 1862 
    rc = pci_enable_wake(pdev,pstate,(_Bool)(tp->wolinfo.wolopts != 0U));
    
#line 1863 
    if (rc != 0) 
#line 1864 
                 printk("\001",rc); else ;
  }
  else ;
  
#line 1866 
  pci_set_power_state(pdev,pstate);
  
#line 1868 
  __retres = 0;
  return_label: 
#line 1868 
                return __retres;
}


#line 1872  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/tulip_core.c"
static int tulip_resume(struct pci_dev *pdev)
{
  int __retres;
  int retval;
  unsigned int tmp_1;
  int tmp_3;
  bool tmp_2;
  bool tmp_4;
  
#line 1874 
  struct net_device *dev = pci_get_drvdata(pdev);
  
#line 1875 
  struct tulip_private *tp = netdev_priv((struct net_device const *)dev);
  
#line 1876 
  void *ioaddr = tp->base_addr;
  
#line 1880 
  if (dev == (struct net_device *)0) {
    
#line 1881 
    __retres = -22;
    
#line 1881 
    goto return_label;
  }
  else ;
  
#line 1883 
  pci_set_power_state(pdev,0);
  
#line 1884 
  pci_restore_state(pdev);
  
#line 1886 
  tmp_2 = netif_running((struct net_device const *)dev);
  
#line 1886 
  if (tmp_2) 
#line 1886 
             tmp_3 = 0; else 
#line 1886 
                             tmp_3 = 1;
  
#line 1886 
  if (tmp_3) {
    
#line 1887 
    __retres = 0;
    
#line 1887 
    goto return_label;
  }
  else ;
  
#line 1889 
  retval = pci_enable_device(pdev);
  
#line 1889 
  if (retval != 0) {
    
#line 1890 
    printk("\001");
    
#line 1891 
    __retres = retval;
    
#line 1891 
    goto return_label;
  }
  else ;
  
#line 1894 
  retval = ldv_request_irq_92(pdev->irq,& tulip_interrupt,128UL,(char const *)(& dev->name),(void *)dev);
  
#line 1896 
  if (retval != 0) {
    
#line 1897 
    printk("\001");
    
#line 1898 
    __retres = retval;
    
#line 1898 
    goto return_label;
  }
  else ;
  
#line 1901 
  if ((tp->flags & 65536) != 0) {
    
#line 1902 
    pci_enable_wake(pdev,3,(_Bool)0);
    
#line 1903 
    pci_enable_wake(pdev,4,(_Bool)0);
    
#line 1906 
    tmp_1 = ioread32(ioaddr + 144U);
    
#line 1907 
    tmp_1 |= 32768U;
    
#line 1908 
    iowrite32(tmp_1,ioaddr + 144U);
    
#line 1911 
    tulip_set_wolopts(pdev,0U);
  }
  else ;
  
#line 1913 
  netif_device_attach(dev);
  
#line 1915 
  tmp_4 = netif_running((struct net_device const *)dev);
  
#line 1915 
  if ((int)tmp_4 != 0) 
#line 1916 
                       tulip_up(dev); else ;
  
#line 1918 
  __retres = 0;
  return_label: 
#line 1918 
                return __retres;
}


#line 1924  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/tulip_core.c"
static void tulip_remove_one(struct pci_dev *pdev)
{
  struct tulip_private *tp;
  
#line 1926 
  struct net_device *dev = pci_get_drvdata(pdev);
  
#line 1929 
  if (dev == (struct net_device *)0) 
#line 1930 
                                     goto return_label; else ;
  
#line 1932 
  tp = (struct tulip_private *)netdev_priv((struct net_device const *)dev);
  
#line 1933 
  ldv_unregister_netdev_93(dev);
  
#line 1934 
  pci_free_consistent(pdev,2560UL,(void *)tp->rx_ring,tp->rx_ring_dma);
  
#line 1938 
  kfree((void const *)tp->mtable);
  
#line 1939 
  pci_iounmap(pdev,tp->base_addr);
  
#line 1940 
  ldv_free_netdev_94(dev);
  
#line 1941 
  pci_release_regions(pdev);
  
#line 1942 
  pci_disable_device(pdev);
  return_label: 
#line 1943 
                return;
}


#line 1954  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/tulip_core.c"
static void poll_tulip(struct net_device *dev)
{
  
#line 1956 
  struct tulip_private *tp = netdev_priv((struct net_device const *)dev);
  
#line 1957 
  int const irq = (int)(tp->pdev)->irq;
  
#line 1961 
  disable_irq((unsigned int)irq);
  
#line 1962 
  tulip_interrupt(irq,(void *)dev);
  
#line 1963 
  enable_irq((unsigned int)irq);
  
#line 1964 
  return;
}


#line 1967  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/tulip_core.c"
static struct pci_driver tulip_driver = {.node = {.next = (struct list_head *)0, .prev = (struct list_head *)0}, .name = "tulip", .id_table = (struct pci_device_id const *)(& tulip_pci_tbl), .probe = & tulip_init_one, .remove = & tulip_remove_one, .suspend = & tulip_suspend, .suspend_late = (int (*)(struct pci_dev *, pm_message_t ))0, .resume_early = (int (*)(struct pci_dev *))0, .resume = & tulip_resume, .shutdown = (void (*)(struct pci_dev *))0, .sriov_configure = (int (*)(struct pci_dev *, int ))0, .err_handler = (struct pci_error_handlers const *)0, .driver = {.name = (char const *)0, .bus = (struct bus_type *)0, .owner = (struct module *)0, .mod_name = (char const *)0, .suppress_bind_attrs = (_Bool)0, .probe_type = 0, .of_match_table = (struct of_device_id const *)0, .acpi_match_table = (struct acpi_device_id const *)0, .probe = (int (*)(struct device *))0, .remove = (int (*)(struct device *))0, .shutdown = (void (*)(struct device *))0, .suspend = (int (*)(struct device *, pm_message_t ))0, .resume = (int (*)(struct device *))0, .groups = (struct attribute_group const **)0, .pm = (struct dev_pm_ops const *)0, .p = (struct driver_private *)0}, .dynids = {.lock = {.__anonCompField_spinlock_18 = {.rlock = {.raw_lock = {.val = {.counter = 0}}, .magic = 0U, .owner_cpu = 0U, .owner = (void *)0, .dep_map = {.key = (struct lock_class_key *)0, .class_cache = {(struct lock_class *)0, (struct lock_class *)0}, .name = (char const *)0, .cpu = 0, .ip = 0UL}}}}, .list = {.next = (struct list_head *)0, .prev = (struct list_head *)0}}};

#line 1979  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/tulip_core.c"
static int tulip_init(void)
{
  int tmp;
  
#line 1982 
  printk("\001",(char *)(& version));
  
#line 1986 
  tulip_rx_copybreak = rx_copybreak;
  
#line 1987 
  tulip_max_interrupt_work = max_interrupt_work;
  
#line 1990 
  tmp = ldv___pci_register_driver_95(& tulip_driver,& __this_module,"tulip");
  
#line 1990 
  return tmp;
}


#line 1994  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/tulip_core.c"
static void tulip_cleanup(void)
{
  
#line 1996 
  ldv_pci_unregister_driver_96(& tulip_driver);
  
#line 1997 
  return;
}


#line 56  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/weaver/.tmp_tulip_core.c.aux"
int (*ldv_emg_alias_eth_change_mtu_5)(struct net_device *, int ) = & eth_change_mtu;

#line 57  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/weaver/.tmp_tulip_core.c.aux"
int (*ldv_emg_alias_eth_validate_addr_2)(struct net_device *) = & eth_validate_addr;

#line 58  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/weaver/.tmp_tulip_core.c.aux"
struct pci_driver *ldv_emg_alias_tulip_driver_2 = & tulip_driver;

#line 59  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/weaver/.tmp_tulip_core.c.aux"
int (*ldv_emg_alias_eth_mac_addr_12)(struct net_device *, void *) = & eth_mac_addr;

#line 62 
void ldv_emg_unregister_netdev(struct net_device *arg0);


#line 63 
void ldv_emg_free_irq(unsigned int arg0, void *arg1);


#line 64 
_Bool ldv_emg_schedule_work(struct work_struct *arg0);


#line 65 
int ldv_emg___pci_register_driver(struct pci_driver *arg0, struct module *arg1, char *arg2);


#line 67 
void ldv_emg_pci_unregister_driver(struct pci_driver *arg0);


#line 69 
void ldv_emg_free_netdev(struct net_device *arg0);


#line 70 
int ldv_emg_register_netdev(struct net_device *arg0);


#line 71 
struct net_device *ldv_emg_alloc_etherdev_mqs(int arg0, unsigned int arg1, unsigned int arg2);


#line 72 
int ldv_emg_request_irq(unsigned int arg0, enum irqreturn (*arg1)(int , void *), unsigned long arg2, char *arg3, void *arg4);


#line 76  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/weaver/.tmp_tulip_core.c.aux"
int ldv_emg_wrapper_tulip_init_one_2(struct pci_dev *arg0, struct pci_device_id *arg1)
{
  int tmp;
  
#line 77 
  tmp = tulip_init_one(arg0,(struct pci_device_id const *)arg1);
  
#line 77 
  return tmp;
}


#line 81  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/weaver/.tmp_tulip_core.c.aux"
int ldv_emg_wrapper_tulip_resume_5(struct pci_dev *arg0)
{
  int tmp;
  
#line 82 
  tmp = tulip_resume(arg0);
  
#line 82 
  return tmp;
}


#line 86  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/weaver/.tmp_tulip_core.c.aux"
void ldv_emg_wrapper_tulip_remove_one_4(struct pci_dev *arg0)
{
  
#line 87 
  tulip_remove_one(arg0);
  
#line 88 
  return;
}


#line 91  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/weaver/.tmp_tulip_core.c.aux"
int ldv_emg_wrapper_private_ioctl_4(struct net_device *arg0, struct ifreq *arg1, int arg2)
{
  int tmp;
  
#line 92 
  tmp = private_ioctl(arg0,arg1,arg2);
  
#line 92 
  return tmp;
}


#line 96  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/weaver/.tmp_tulip_core.c.aux"
int ldv_emg_wrapper_tulip_suspend_3(struct pci_dev *arg0, struct pm_message arg1)
{
  int tmp;
  
#line 97 
  tmp = tulip_suspend(arg0,arg1);
  
#line 97 
  return tmp;
}


#line 101  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/weaver/.tmp_tulip_core.c.aux"
struct net_device_stats *ldv_emg_wrapper_tulip_get_stats_8(struct net_device *arg0)
{
  struct net_device_stats *tmp;
  
#line 102 
  tmp = tulip_get_stats(arg0);
  
#line 102 
  return tmp;
}


#line 106  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/weaver/.tmp_tulip_core.c.aux"
void ldv_emg_wrapper_poll_tulip_10(struct net_device *arg0)
{
  
#line 107 
  poll_tulip(arg0);
  
#line 108 
  return;
}


#line 111  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/weaver/.tmp_tulip_core.c.aux"
enum netdev_tx ldv_emg_wrapper_tulip_start_xmit_11(struct sk_buff *arg0, struct net_device *arg1)
{
  enum netdev_tx tmp;
  
#line 112 
  tmp = tulip_start_xmit(arg0,arg1);
  
#line 112 
  return tmp;
}


#line 116  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/weaver/.tmp_tulip_core.c.aux"
void ldv_emg_wrapper_tulip_ethtool_get_wol_3(struct net_device *arg0, struct ethtool_wolinfo *arg1)
{
  
#line 117 
  tulip_ethtool_get_wol(arg0,arg1);
  
#line 118 
  return;
}


#line 121  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/weaver/.tmp_tulip_core.c.aux"
int ldv_emg_tulip_init(void)
{
  int tmp;
  
#line 122 
  tmp = tulip_init();
  
#line 122 
  return tmp;
}


#line 125  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/weaver/.tmp_tulip_core.c.aux"
void ldv_emg_tulip_cleanup(void)
{
  
#line 126 
  tulip_cleanup();
  
#line 127 
  return;
}


#line 129  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/weaver/.tmp_tulip_core.c.aux"
void ldv_emg_wrapper_tulip_get_drvinfo_7(struct net_device *arg0, struct ethtool_drvinfo *arg1)
{
  
#line 130 
  tulip_get_drvinfo(arg0,arg1);
  
#line 131 
  return;
}


#line 134  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/weaver/.tmp_tulip_core.c.aux"
int ldv_emg_wrapper_tulip_ethtool_set_wol_9(struct net_device *arg0, struct ethtool_wolinfo *arg1)
{
  int tmp;
  
#line 135 
  tmp = tulip_ethtool_set_wol(arg0,arg1);
  
#line 135 
  return tmp;
}


#line 139  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/weaver/.tmp_tulip_core.c.aux"
void ldv_emg_wrapper_set_rx_mode_13(struct net_device *arg0)
{
  
#line 140 
  set_rx_mode(arg0);
  
#line 141 
  return;
}


#line 144  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/weaver/.tmp_tulip_core.c.aux"
int ldv_emg_wrapper_tulip_close_2(struct net_device *arg0)
{
  int tmp;
  
#line 145 
  tmp = tulip_close(arg0);
  
#line 145 
  return tmp;
}


#line 149  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/weaver/.tmp_tulip_core.c.aux"
void ldv_emg_wrapper_tulip_tx_timeout_6(struct net_device *arg0)
{
  
#line 150 
  tulip_tx_timeout(arg0);
  
#line 151 
  return;
}


#line 154  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/weaver/.tmp_tulip_core.c.aux"
int ldv_emg_wrapper_tulip_open_2(struct net_device *arg0)
{
  int tmp;
  
#line 155 
  tmp = tulip_open(arg0);
  
#line 155 
  return tmp;
}


#line 830  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/weaver/.tmp_tulip_core.c.aux"
static bool ldv_schedule_work_72(struct work_struct *work)
{
  bool __retres;
  bool tmp;
  
#line 834 
  tmp = ldv_emg_schedule_work(work);
  
#line 834 
  __retres = tmp != 0;
  
#line 834 
  return __retres;
}


#line 838  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/weaver/.tmp_tulip_core.c.aux"
static int ldv_request_irq_73(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev)
{
  int tmp;
  
#line 842 
  tmp = ldv_emg_request_irq(irq,handler,flags,(char *)name,dev);
  
#line 842 
  return tmp;
}


#line 846  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/weaver/.tmp_tulip_core.c.aux"
static void ldv___ldv_spin_lock_74(spinlock_t *ldv_func_arg1)
{
  
#line 850 
  ldv_spin_model_lock((char *)"lock_of_tulip_private");
  
#line 852 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 853 
  return;
}


#line 856  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/weaver/.tmp_tulip_core.c.aux"
static bool ldv_schedule_work_75(struct work_struct *work)
{
  bool __retres;
  bool tmp;
  
#line 860 
  tmp = ldv_emg_schedule_work(work);
  
#line 860 
  __retres = tmp != 0;
  
#line 860 
  return __retres;
}


#line 864  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/weaver/.tmp_tulip_core.c.aux"
static void ldv_spin_unlock_irqrestore_76_0(spinlock_t *lock, unsigned long flags)
{
  
#line 868 
  ldv_spin_model_unlock((char *)"lock_of_tulip_private");
  
#line 870 
  spin_unlock_irqrestore_0(lock,flags);
  
#line 871 
  return;
}


#line 874  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/weaver/.tmp_tulip_core.c.aux"
static void ldv___ldv_spin_lock_77(spinlock_t *ldv_func_arg1)
{
  
#line 878 
  ldv_spin_model_lock((char *)"lock_of_tulip_private");
  
#line 880 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 881 
  return;
}


#line 884  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/weaver/.tmp_tulip_core.c.aux"
static void ldv_spin_unlock_irqrestore_78(spinlock_t *lock, unsigned long flags)
{
  
#line 888 
  ldv_spin_model_unlock((char *)"lock_of_tulip_private");
  
#line 890 
  spin_unlock_irqrestore_0(lock,flags);
  
#line 891 
  return;
}


#line 894  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/weaver/.tmp_tulip_core.c.aux"
static int ldv_del_timer_sync_79(struct timer_list *ldv_func_arg1)
{
  int tmp;
  
#line 898 
  tmp = ldv_emg_del_timer_sync(ldv_func_arg1);
  
#line 898 
  return tmp;
}


#line 902  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/weaver/.tmp_tulip_core.c.aux"
static int ldv_del_timer_sync_80(struct timer_list *ldv_func_arg1)
{
  int tmp;
  
#line 906 
  tmp = ldv_emg_del_timer_sync(ldv_func_arg1);
  
#line 906 
  return tmp;
}


#line 910  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/weaver/.tmp_tulip_core.c.aux"
static void ldv___ldv_spin_lock_81(spinlock_t *ldv_func_arg1)
{
  
#line 914 
  ldv_spin_model_lock((char *)"lock_of_tulip_private");
  
#line 916 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 917 
  return;
}


#line 920  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/weaver/.tmp_tulip_core.c.aux"
static void ldv_spin_unlock_irqrestore_82(spinlock_t *lock, unsigned long flags)
{
  
#line 924 
  ldv_spin_model_unlock((char *)"lock_of_tulip_private");
  
#line 926 
  spin_unlock_irqrestore_0(lock,flags);
  
#line 927 
  return;
}


#line 930  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/weaver/.tmp_tulip_core.c.aux"
static void ldv_free_irq_83(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  
#line 934 
  ldv_emg_free_irq(ldv_func_arg1,ldv_func_arg2);
  
#line 935 
  return;
}


#line 938  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/weaver/.tmp_tulip_core.c.aux"
static void ldv___ldv_spin_lock_84(spinlock_t *ldv_func_arg1)
{
  
#line 942 
  ldv_spin_model_lock((char *)"lock_of_tulip_private");
  
#line 944 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 945 
  return;
}


#line 948  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/weaver/.tmp_tulip_core.c.aux"
static void ldv_spin_unlock_irqrestore_85(spinlock_t *lock, unsigned long flags)
{
  
#line 952 
  ldv_spin_model_unlock((char *)"lock_of_tulip_private");
  
#line 954 
  spin_unlock_irqrestore_0(lock,flags);
  
#line 955 
  return;
}


#line 958  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/weaver/.tmp_tulip_core.c.aux"
static void ldv___ldv_spin_lock_86(spinlock_t *ldv_func_arg1)
{
  
#line 962 
  ldv_spin_model_lock((char *)"lock_of_tulip_private");
  
#line 964 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 965 
  return;
}


#line 968  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/weaver/.tmp_tulip_core.c.aux"
static void ldv_spin_unlock_irqrestore_87(spinlock_t *lock, unsigned long flags)
{
  
#line 972 
  ldv_spin_model_unlock((char *)"lock_of_tulip_private");
  
#line 974 
  spin_unlock_irqrestore_0(lock,flags);
  
#line 975 
  return;
}


#line 978  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/weaver/.tmp_tulip_core.c.aux"
static struct net_device *ldv_alloc_etherdev_mqs_88(int ldv_func_arg1, unsigned int ldv_func_arg2, unsigned int ldv_func_arg3)
{
  struct net_device *tmp;
  
#line 982 
  tmp = ldv_emg_alloc_etherdev_mqs(ldv_func_arg1,ldv_func_arg2,ldv_func_arg3);
  
#line 982 
  return tmp;
}


#line 986  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/weaver/.tmp_tulip_core.c.aux"
static int ldv_register_netdev_89(struct net_device *ldv_func_arg1)
{
  int tmp;
  
#line 990 
  tmp = ldv_emg_register_netdev(ldv_func_arg1);
  
#line 990 
  return tmp;
}


#line 994  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/weaver/.tmp_tulip_core.c.aux"
static void ldv_free_netdev_90(struct net_device *ldv_func_arg1)
{
  
#line 998 
  ldv_emg_free_netdev(ldv_func_arg1);
  
#line 999 
  return;
}


#line 1002  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/weaver/.tmp_tulip_core.c.aux"
static void ldv_free_irq_91(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  
#line 1006 
  ldv_emg_free_irq(ldv_func_arg1,ldv_func_arg2);
  
#line 1007 
  return;
}


#line 1010  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/weaver/.tmp_tulip_core.c.aux"
static int ldv_request_irq_92(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev)
{
  int tmp;
  
#line 1014 
  tmp = ldv_emg_request_irq(irq,handler,flags,(char *)name,dev);
  
#line 1014 
  return tmp;
}


#line 1018  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/weaver/.tmp_tulip_core.c.aux"
static void ldv_unregister_netdev_93(struct net_device *ldv_func_arg1)
{
  
#line 1022 
  ldv_emg_unregister_netdev(ldv_func_arg1);
  
#line 1023 
  return;
}


#line 1026  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/weaver/.tmp_tulip_core.c.aux"
static void ldv_free_netdev_94(struct net_device *ldv_func_arg1)
{
  
#line 1030 
  ldv_emg_free_netdev(ldv_func_arg1);
  
#line 1031 
  return;
}


#line 1034  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/weaver/.tmp_tulip_core.c.aux"
static int ldv___pci_register_driver_95(struct pci_driver *ldv_func_arg1, struct module *ldv_func_arg2, char const *ldv_func_arg3)
{
  int tmp;
  
#line 1038 
  tmp = ldv_emg___pci_register_driver(ldv_func_arg1,ldv_func_arg2,(char *)ldv_func_arg3);
  
#line 1038 
  return tmp;
}


#line 1042  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/weaver/.tmp_tulip_core.c.aux"
static void ldv_pci_unregister_driver_96(struct pci_driver *ldv_func_arg1)
{
  
#line 1046 
  ldv_emg_pci_unregister_driver(ldv_func_arg1);
  
#line 1047 
  return;
}

unsigned short __builtin_bswap16(unsigned short);


#line 46  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/swab.h"
__inline static __u16 __fswab16(__u16 val)
{
  __u16 tmp;
  
#line 49 
  tmp = __builtin_bswap16((unsigned short)((int)val));
  
#line 49 
  return tmp;
}


#line 24  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/slab.h"
void *ldv_kmalloc(size_t size, gfp_t flags);


#line 418  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/slab.h"
static void *kmalloc(size_t size, gfp_t flags);


#line 28  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/eeprom.c"
static struct eeprom_fixup eeprom_fixups[8U] = {{.name = (char *)"Asante", .addr0 = (unsigned char)0U, .addr1 = (unsigned char)0U, .addr2 = (unsigned char)148U, .newtable = {(unsigned short)7680U, (unsigned short)0U, (unsigned short)2048U, (unsigned short)256U, (unsigned short)396U, (unsigned short)0U, (unsigned short)0U, (unsigned short)57464U, (unsigned short)1U, (unsigned short)80U, (unsigned short)24U}}, {.name = (char *)"SMC9332DST", .addr0 = (unsigned char)0U, .addr1 = (unsigned char)0U, .addr2 = (unsigned char)192U, .newtable = {(unsigned short)7680U, (unsigned short)0U, (unsigned short)2048U, (unsigned short)1055U, (unsigned short)0U, (unsigned short)158U, (unsigned short)4U, (unsigned short)158U, (unsigned short)2307U, (unsigned short)109U, (unsigned short)2309U, (unsigned short)109U}}, {.name = (char *)"Cogent EM100", .addr0 = (unsigned char)0U, .addr1 = (unsigned char)0U, .addr2 = (unsigned char)146U, .newtable = {(unsigned short)7680U, (unsigned short)0U, (unsigned short)2048U, (unsigned short)1599U, (unsigned short)263U, (unsigned short)32801U, (unsigned short)264U, (unsigned short)32801U, (unsigned short)256U, (unsigned short)158U, (unsigned short)260U, (unsigned short)158U, (unsigned short)259U, (unsigned short)109U, (unsigned short)261U, (unsigned short)109U}}, {.name = (char *)"Maxtech NX-110", .addr0 = (unsigned char)0U, .addr1 = (unsigned char)0U, .addr2 = (unsigned char)232U, .newtable = {(unsigned short)7680U, (unsigned short)0U, (unsigned short)2048U, (unsigned short)1299U, (unsigned short)4097U, (unsigned short)158U, (unsigned short)0U, (unsigned short)158U, (unsigned short)4U, (unsigned short)158U, (unsigned short)771U, (unsigned short)109U, (unsigned short)773U, (unsigned short)109U}}, {.name = (char *)"Accton EN1207", .addr0 = (unsigned char)0U, .addr1 = (unsigned char)0U, .addr2 = (unsigned char)232U, .newtable = {(unsigned short)7680U, (unsigned short)0U, (unsigned short)2048U, (unsigned short)1311U, (unsigned short)6913U, (unsigned short)0U, (unsigned short)2816U, (unsigned short)158U, (unsigned short)2820U, (unsigned short)158U, (unsigned short)6915U, (unsigned short)109U, (unsigned short)6917U, (unsigned short)109U}}, {.name = (char *)"NetWinder", .addr0 = (unsigned char)0U, .addr1 = (unsigned char)16U, .addr2 = (unsigned char)87U, .newtable = {(unsigned short)7680U, (unsigned short)0U, (unsigned short)11U, (unsigned short)36609U, (unsigned short)259U, (unsigned short)768U, (unsigned short)2081U, (unsigned short)0U, (unsigned short)1U, (unsigned short)0U, (unsigned short)481U}}, {.name = (char *)"Cobalt Microserver", .addr0 = (unsigned char)0U, .addr1 = (unsigned char)16U, .addr2 = (unsigned char)224U, .newtable = {(unsigned short)7680U, (unsigned short)0U, (unsigned short)2048U, (unsigned short)32769U, (unsigned short)3U, (unsigned short)1024U, (unsigned short)2049U, (unsigned short)0U, (unsigned short)2048U, (unsigned short)0U, (unsigned short)30720U, (unsigned short)480U, (unsigned short)20480U, (unsigned short)6144U, (unsigned short)0U}}, {.name = (char *)0, .addr0 = (unsigned char)0, .addr1 = (unsigned char)0, .addr2 = (unsigned char)0, .newtable = {(unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0, (unsigned short)0}}};

#line 81  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/eeprom.c"
static char const * const block_name[6U] = {"21140 non-MII", "21140 MII PHY", "21142 Serial PHY", "21142 MII PHY", "21143 SYM PHY", "21143 reset method"};

#line 104  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/eeprom.c"
static void tulip_build_fake_mediatable(struct tulip_private *tp)
{
  
#line 106 
  return;
}


#line 142  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/eeprom.c"
void tulip_parse_eeprom(struct net_device *dev)
{
  struct mediatable *last_mediatable;
  unsigned char *last_ee_data;
  int controller_index;
  int i;
  
#line 154 
  struct tulip_private *tp = netdev_priv((struct net_device const *)dev);
  
#line 155 
  unsigned char *ee_data = (unsigned char *)(& tp->eeprom);
  
#line 158 
  tp->mtable = (struct mediatable *)0;
  
#line 161 
  i = 0;
  
#line 161 
  goto ldv_45304;
  ldv_45303: 
#line 162 
  ;
  
#line 162 
  if ((int)*(ee_data + i) != (int)*(ee_data + (i + 16))) 
#line 163 
                                                         goto ldv_45302; else ;
  
#line 161 
  i += 1;
  ldv_45304: 
#line 162 
  ;
  
#line 161 
  if (i <= 7) 
#line 163 
              goto ldv_45303; else 
#line 166 
                                   goto ldv_45302;
  ldv_45302: 
#line 167 
  ;
  
#line 164 
  if (i > 7) {
    
#line 165 
    if ((unsigned int)*ee_data == 255U) {
      
#line 166 
      if (last_mediatable != (struct mediatable *)0) {
        
#line 167 
        controller_index += 1;
        
#line 168 
        printk("\001",(char *)(& dev->name),controller_index);
        
#line 170 
        tp->mtable = last_mediatable;
        
#line 171 
        ee_data = last_ee_data;
        
#line 172 
        goto subsequent_board;
      }
      else 
#line 174 
           printk("\001",(char *)(& dev->name));
      
#line 176 
      goto return_label;
    }
    else ;
    
#line 179 
    i = 0;
    
#line 179 
    goto ldv_45308;
    ldv_45307: 
#line 180 
    ;
    
#line 180 
    if (((int)*(dev->dev_addr) == (int)eeprom_fixups[i].addr0 && (int)*(dev->dev_addr + 1U) == (int)eeprom_fixups[i].addr1) && (int)*(dev->dev_addr + 2U) == (int)eeprom_fixups[i].addr2) {
      
#line 183 
      if ((unsigned int)*(dev->dev_addr + 2U) == 232U && (unsigned int)*(ee_data + 26U) == 85U) 
        
#line 184 
        i += 1; else ;
      
#line 185 
      memcpy((void *)(ee_data + 26U),(void const *)(& eeprom_fixups[i].newtable),64UL);
      
#line 187 
      printk("\001",(char *)(& dev->name),eeprom_fixups[i].name);
      
#line 189 
      goto ldv_45306;
    }
    else ;
    
#line 179 
    i += 1;
    ldv_45308: 
#line 180 
    ;
    
#line 179 
    if (eeprom_fixups[i].name != (char *)0) 
#line 181 
                                            goto ldv_45307; else 
#line 184 
                                                                 goto ldv_45306;
    ldv_45306: 
#line 185 
    ;
    
#line 192 
    if (eeprom_fixups[i].name == (char *)0) {
      
#line 193 
      printk("\001",(char *)(& dev->name));
      
#line 195 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 199 
  controller_index = 0;
  
#line 200 
  if ((unsigned int)*(ee_data + 19U) > 1U) 
#line 201 
                                           last_ee_data = ee_data; else ;
  subsequent_board: 
#line 203 
  ;
  
#line 205 
  if ((unsigned int)*(ee_data + 27U) == 0U) 
#line 206 
                                            tulip_build_fake_mediatable(tp);
  else {
    int count;
    struct mediatable *mtable;
    unsigned char *tmp_2;
    struct mediatable *tmp_4;
    u32 tmp_5;
    char const *tmp_6;
    
#line 208 
    unsigned char *p = ee_data + (int)*(ee_data + 27U);
    
#line 209 
    unsigned char csr12dir = (unsigned char)0U;
    
#line 210 
    int new_advertise = 0;
    
#line 212 
    u16 media = get_unaligned_le16((void const *)p);
    
#line 214 
    p += 2U;
    
#line 215 
    if ((tp->flags & 4) != 0) {
      unsigned char *tmp_1;
      
#line 216 
      tmp_1 = p;
      
#line 216 
      p += 1;
      
#line 216 
      csr12dir = *tmp_1;
    }
    else ;
    
#line 217 
    tmp_2 = p;
    
#line 217 
    p += 1;
    
#line 217 
    count = (int)*tmp_2;
    
#line 220 
    if (count == 0) {
      
#line 221 
      if (tulip_debug > 0) 
#line 222 
                           printk("\001",(char *)(& dev->name)); else ;
      
#line 224 
      goto return_label;
    }
    else ;
    
#line 227 
    mtable = (struct mediatable *)kmalloc(((unsigned long)count + 1UL) * 16UL,208U);
    
#line 230 
    if (mtable == (struct mediatable *)0) 
#line 231 
                                          goto return_label; else ;
    
#line 232 
    tmp_4 = mtable;
    
#line 232 
    tp->mtable = tmp_4;
    
#line 232 
    last_mediatable = tmp_4;
    
#line 233 
    mtable->defaultmedia = media;
    
#line 234 
    mtable->leafcount = (unsigned char)count;
    
#line 235 
    mtable->csr12dir = csr12dir;
    
#line 236 
    mtable->has_reset = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(6))))0U;
    
#line 236 
    mtable->has_mii = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))mtable->has_reset;
    
#line 236 
    mtable->has_nonmii = mtable->has_mii;
    
#line 237 
    tmp_5 = 0U;
    
#line 237 
    mtable->csr15val = tmp_5;
    
#line 237 
    mtable->csr15dir = tmp_5;
    
#line 239 
    if (((int)media & 2048) == 0) 
#line 239 
                                  tmp_6 = medianame[(int)media & 31]; else 
                                                                    
#line 239 
                                                                    tmp_6 = "Autosense";
    
#line 239 
    ;
    
#line 239 
    printk("\001",(char *)(& dev->name),tmp_6);
    
#line 243 
    i = 0;
    
#line 243 
    goto ldv_45331;
    ldv_45330: 
#line 244 
    ;
    {
      char const *tmp_13;
      
#line 244 
      struct medialeaf *leaf = & mtable->mleaf[i];
      
#line 246 
      if ((int)*p >= 0) {
        
#line 247 
        leaf->type = (unsigned char)0U;
        
#line 248 
        leaf->media = (unsigned char)((unsigned int)*p & 63U);
        
#line 249 
        leaf->leafdata = p;
        
#line 250 
        if (((int)*(p + 2U) & 97) == 1) 
#line 251 
                                        mtable->has_mii = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U; else ;
        
#line 252 
        p += 4U;
      }
      else {
        
#line 254 
        leaf->type = *(p + 1U);
        
#line 255 
        if ((unsigned int)*(p + 1U) == 5U) {
          
#line 256 
          mtable->has_reset = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(6))))i;
          
#line 257 
          leaf->media = (unsigned char)((unsigned int)*(p + 2U) & 15U);
        }
        else 
          
#line 258 
          if (tp->chip_id == 13 && (unsigned int)*(p + 1U) == 128U) {
            
#line 260 
            mtable->leafcount = (u8)((int)mtable->leafcount - 1);
            
#line 261 
            count -= 1;
            
#line 262 
            i -= 1;
            
#line 263 
            leaf->leafdata = p + 2U;
            
#line 264 
            p += ((unsigned int)*p & 63U) + 1U;
            
#line 265 
            goto ldv_45316;
          }
          else 
            
#line 266 
            if (((int)*(p + 1U) & 1) != 0) {
              int gpr_len;
              int reset_len;
              u16 tmp_7;
              
#line 269 
              mtable->has_mii = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U;
              
#line 270 
              leaf->media = (unsigned char)11U;
              
#line 271 
              gpr_len = (int)*(p + 3U) * 2;
              
#line 272 
              reset_len = (int)*(p + (gpr_len + 4)) * 2;
              
#line 273 
              tmp_7 = get_unaligned_le16((void const *)(p + ((gpr_len + 7) + reset_len)));
              
#line 273 
              new_advertise = (int)tmp_7 | new_advertise;
            }
            else {
              
#line 275 
              mtable->has_nonmii = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U;
              
#line 276 
              leaf->media = (unsigned char)((unsigned int)*(p + 2U) & 31U);
              
#line 278 
              if (tp->chip_id == 13 && (unsigned int)leaf->media == 1U) 
                
#line 279 
                leaf->media = (unsigned char)3U; else ;
              
#line 280 
              switch ((int)leaf->media) {
                case 0: 
#line 281 
                ;
                
#line 281 
                new_advertise |= 32;
                
#line 281 
                goto ldv_45320;
                case 4: 
#line 282 
                ;
                
#line 282 
                new_advertise |= 64;
                
#line 282 
                goto ldv_45320;
                case 3: 
#line 283 
                ;
                
#line 283 
                new_advertise |= 128;
                
#line 283 
                goto ldv_45320;
                case 5: 
#line 284 
                ;
                
#line 284 
                new_advertise |= 256;
                
#line 284 
                goto ldv_45320;
                case 6: 
#line 285 
                ;
                
#line 285 
                new_advertise |= 512;
                
#line 285 
                goto ldv_45320;
              }
              ldv_45320: 
#line 287 
              ;
              
#line 287 
              if ((unsigned int)*(p + 1U) == 2U && (unsigned int)leaf->media == 0U) 
                
#line 288 
                if (((int)*(p + 2U) & 64) != 0) {
                  u16 tmp_8;
                  u16 tmp_9;
                  u16 tmp_10;
                  
#line 289 
                  tmp_8 = get_unaligned_le16((void const *)(p + 7U));
                  
#line 289 
                  u32 base15 = (unsigned int)tmp_8;
                  
#line 291 
                  tmp_9 = get_unaligned_le16((void const *)(p + 9U));
                  
#line 290 
                  mtable->csr15dir = (unsigned int)((int)tmp_9 << 16) + base15;
                  
#line 293 
                  tmp_10 = get_unaligned_le16((void const *)(p + 11U));
                  
#line 292 
                  mtable->csr15val = (unsigned int)((int)tmp_10 << 16) + base15;
                }
                else {
                  u16 tmp_11;
                  u16 tmp_12;
                  
#line 295 
                  tmp_11 = get_unaligned_le16((void const *)(p + 3U));
                  
#line 295 
                  mtable->csr15dir = (unsigned int)((int)tmp_11 << 16);
                  
#line 296 
                  tmp_12 = get_unaligned_le16((void const *)(p + 5U));
                  
#line 296 
                  mtable->csr15val = (unsigned int)((int)tmp_12 << 16);
                }
              else ;
            }
        
#line 300 
        leaf->leafdata = p + 2U;
        
#line 301 
        p += ((unsigned int)*p & 63U) + 1U;
      }
      
#line 303 
      if (tulip_debug > 1 && (unsigned int)leaf->media == 11U) {
        
#line 304 
        unsigned char *bp = leaf->leafdata;
        
#line 305 
        printk("\001",(char *)(& dev->name),(int)*bp,(int)*(bp + 1U),(int)*(bp + ((int)*(bp + 1U) + 1) * 2),(int)*(bp + ((int)*(bp + ((int)*(bp + 1U) + 1) * 2) * 2 + 5)),(int)*(bp + ((int)*(bp + ((int)*(bp + 1U) + 1) * 2) + 2) * 2));
      }
      else ;
      
#line 311 
      ;
      
#line 311 
      if ((unsigned int)leaf->type <= 5U) 
#line 311 
                                          tmp_13 = block_name[(int)leaf->type]; else 
                                                                    
#line 311 
                                                                    tmp_13 = "<unknown>";
      
#line 311 
      ;
      
#line 311 
      ;
      
#line 311 
      ;
      
#line 311 
      ;
      
#line 311 
      printk("\001",(char *)(& dev->name),i,medianame[(int)leaf->media & 15],(int)leaf->media,tmp_13,(int)leaf->type);
    }
    ldv_45316: 
#line 313 
    ;
    
#line 243 
    i += 1;
    ldv_45331: 
#line 244 
    ;
    
#line 243 
    if (i < count) 
#line 245 
                   goto ldv_45330; else 
#line 248 
                                        goto ldv_45332;
    ldv_45332: 
#line 249 
    ;
    
#line 317 
    if (new_advertise != 0) 
#line 318 
                            tp->sym_advertise = (unsigned short)new_advertise; else ;
  }
  return_label: 
#line 320 
                return;
}


#line 341  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/eeprom.c"
int tulip_read_eeprom(struct net_device *dev, int location, int addr_len)
{
  int __retres;
  int i;
  unsigned int tmp_1;
  unsigned int tmp_4;
  
#line 344 
  unsigned int retval = 0U;
  
#line 345 
  struct tulip_private *tp = netdev_priv((struct net_device const *)dev);
  
#line 346 
  void *ee_addr = tp->base_addr + 72U;
  
#line 347 
  int read_cmd = (6 << addr_len) | location;
  
#line 352 
  if ((1 << addr_len) + -1 < location) {
    
#line 353 
    __retres = 0;
    
#line 353 
    goto return_label;
  }
  else ;
  
#line 355 
  iowrite32(18432U,ee_addr);
  
#line 356 
  iowrite32(18433U,ee_addr);
  
#line 359 
  i = addr_len + 4;
  
#line 359 
  goto ldv_45345;
  ldv_45344: 
#line 360 
  ;
  {
    unsigned int tmp_0;
    
#line 360 
    short dataval = (short)((int)((short)((read_cmd >> i) << 2)) & 4);
    
#line 361 
    iowrite32((unsigned int)((int)dataval | 18433),ee_addr);
    
#line 362 
    ioread32(ee_addr);
    
#line 363 
    iowrite32((unsigned int)((int)dataval | 18435),ee_addr);
    
#line 364 
    ioread32(ee_addr);
    
#line 365 
    tmp_0 = ioread32(ee_addr);
    
#line 365 
    retval = (retval << 1) | (unsigned int)((tmp_0 & 8U) != 0U);
  }
  
#line 359 
  i -= 1;
  ldv_45345: 
#line 360 
  ;
  
#line 359 
  if (i >= 0) 
#line 361 
              goto ldv_45344; else 
#line 364 
                                   goto ldv_45346;
  ldv_45346: 
#line 365 
  ;
  
#line 367 
  iowrite32(18433U,ee_addr);
  
#line 368 
  ioread32(ee_addr);
  
#line 370 
  i = 16;
  
#line 370 
  goto ldv_45348;
  ldv_45347: 
#line 371 
  ;
  
#line 371 
  iowrite32(18435U,ee_addr);
  
#line 372 
  ioread32(ee_addr);
  
#line 373 
  tmp_1 = ioread32(ee_addr);
  
#line 373 
  retval = (retval << 1) | (unsigned int)((tmp_1 & 8U) != 0U);
  
#line 374 
  iowrite32(18433U,ee_addr);
  
#line 375 
  ioread32(ee_addr);
  
#line 370 
  i -= 1;
  ldv_45348: 
#line 371 
  ;
  
#line 370 
  if (i > 0) 
#line 372 
             goto ldv_45347; else 
#line 375 
                                  goto ldv_45349;
  ldv_45349: 
#line 376 
  ;
  
#line 379 
  iowrite32(18432U,ee_addr);
  
#line 380 
  if ((tp->flags & 16384) != 0) {
    int tmp_3;
    
#line 380 
    if (0 != 0) 
#line 380 
                tmp_3 = (int)((unsigned short)(((int)((unsigned short)retval) << 8) | ((int)((unsigned short)retval) >> 8)));
    else {
      __u16 tmp_2;
      
#line 380 
      tmp_2 = __fswab16((unsigned short)((int)((unsigned short)retval)));
      
#line 380 
      tmp_3 = (int)tmp_2;
    }
    
#line 380 
    tmp_4 = (unsigned int)tmp_3;
  }
  else 
#line 380 
       tmp_4 = retval;
  
#line 380 
  __retres = (int)tmp_4;
  return_label: 
#line 380 
                return __retres;
}


#line 471  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/weaver/.tmp_eeprom.c.aux"
static void *kmalloc(size_t size, gfp_t flags)
{
  void *tmp;
  
#line 474 
  tmp = ldv_kmalloc(size,flags);
  
#line 474 
  return tmp;
}


#line 442  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_unlock_irqrestore_1(spinlock_t *lock, unsigned long flags)
{
  {
    unsigned long __dummy;
    unsigned long __dummy2;
    
  }
  
#line 444 
  _raw_spin_unlock_irqrestore(& lock->__anonCompField_spinlock_18.rlock,flags);
  
#line 445 
  return;
}


#line 474 
static void ldv_spin_unlock_irqrestore_73_0(spinlock_t *lock, unsigned long flags);


#line 70  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/weaver/.tmp_timer.c.aux"
static void ldv___ldv_spin_lock_72_0(spinlock_t *ldv_func_arg1);


#line 173  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timer.h"
static int ldv_mod_timer_74(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2);


#line 177 
static int ldv_mod_timer_75_0(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2);


#line 181 
static int ldv_mod_timer_76_0(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2);


#line 530  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/tulip.h"
__inline static void tulip_stop_rxtx_5(struct tulip_private *tp)
{
  
#line 532 
  void *ioaddr = tp->base_addr;
  
#line 533 
  u32 csr6 = ioread32(ioaddr + 48U);
  
#line 535 
  if ((csr6 & 8194U) != 0U) {
    
#line 536 
    unsigned int i = 130U;
    
#line 537 
    iowrite32(csr6 & 4294959101U,ioaddr + 48U);
    
#line 538 
    ldv_inline_asm();
    
#line 543 
    goto ldv_45307;
    ldv_45306: 
#line 544 
    ;
    
#line 544 
    __const_udelay(42950UL);
    ldv_45307: 
#line 546 
    ;
    
#line 543 
    i -= 1U;
    
#line 543 
    if (i != 0U) {
      unsigned int tmp_0;
      
#line 543 
      tmp_0 = ioread32(ioaddr + 40U);
      
#line 543 
      if ((tmp_0 & 8257536U) != 0U) 
#line 545 
                                    goto ldv_45306; else 
#line 548 
                                                         goto ldv_45308;
    }
    else 
#line 548 
         goto ldv_45308;
    ldv_45308: 
#line 549 
    ;
    
#line 546 
    if (i == 0U) {
      
#line 547 
      struct _ddebug descriptor = {.modname = "tulip", .function = "tulip_stop_rxtx", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/tulip.h", .format = "tulip_stop_rxtx() failed (CSR5 0x%x CSR6 0x%x)\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))549U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))1U};
      
#line 547 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
        unsigned int tmp_1;
        unsigned int tmp_2;
        
#line 547 
        tmp_1 = ioread32(ioaddr + 48U);
        
#line 547 
        tmp_2 = ioread32(ioaddr + 40U);
        
#line 547 
        ;
        
#line 547 
        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)tp->dev,"tulip_stop_rxtx() failed (CSR5 0x%x CSR6 0x%x)\n",tmp_2,tmp_1);
      }
      else ;
    }
    else ;
  }
  else ;
  
#line 550 
  return;
}


#line 553  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/tulip.h"
__inline static void tulip_restart_rxtx_5(struct tulip_private *tp)
{
  
#line 555 
  tulip_stop_rxtx_5(tp);
  
#line 556 
  __const_udelay(21475UL);
  
#line 557 
  tulip_start_rxtx(tp);
  
#line 558 
  return;
}


#line 560  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/tulip.h"
__inline static void tulip_tx_timeout_complete_0(struct tulip_private *tp, void *ioaddr)
{
  
#line 563 
  tulip_restart_rxtx_5(tp);
  
#line 565 
  iowrite32(0U,ioaddr + 8U);
  
#line 567 
  (tp->dev)->stats.tx_errors += 1UL;
  
#line 568 
  return;
}


#line 17  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/timer.c"
void tulip_media_task(struct work_struct *work)
{
  struct tulip_private *tmp;
  unsigned long flags;
  {
    
#line 20 
    struct work_struct const *__mptr = (struct work_struct const *)work;
    
#line 20 
    tmp = (struct tulip_private *)__mptr + 18446744073709547464U;
  }
  
#line 19 
  struct tulip_private *tp = tmp;
  
#line 21 
  struct net_device *dev = tp->dev;
  
#line 22 
  void *ioaddr = tp->base_addr;
  
#line 23 
  u32 csr12 = ioread32(ioaddr + 96U);
  
#line 24 
  int next_tick = 500;
  
#line 27 
  if (tulip_debug > 2) {
    
#line 28 
    struct _ddebug descriptor = {.modname = "tulip", .function = "tulip_media_task", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/timer.c", .format = "Media selection tick, %s, status %08x mode %08x SIA %08x %08x %08x %08x\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))32U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))1U};
    
#line 28 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
      unsigned int tmp_1;
      unsigned int tmp_2;
      unsigned int tmp_3;
      unsigned int tmp_4;
      unsigned int tmp_5;
      
#line 28 
      tmp_1 = ioread32(ioaddr + 120U);
      
#line 28 
      tmp_2 = ioread32(ioaddr + 112U);
      
#line 28 
      tmp_3 = ioread32(ioaddr + 104U);
      
#line 28 
      ;
      
#line 28 
      tmp_4 = ioread32(ioaddr + 48U);
      
#line 28 
      tmp_5 = ioread32(ioaddr + 40U);
      
#line 28 
      ;
      
#line 28 
      ;
      
#line 28 
      __dynamic_netdev_dbg(& descriptor,(struct net_device const *)dev,"Media selection tick, %s, status %08x mode %08x SIA %08x %08x %08x %08x\n",medianame[(int)dev->if_port],tmp_5,tmp_4,csr12,tmp_3,tmp_2,tmp_1);
    }
    else ;
  }
  else ;
  
#line 34 
  switch (tp->chip_id) {
    case 2: 
#line 35 
    ;
    case 3: 
#line 36 
    ;
    case 5: 
#line 37 
    ;
    case 11: 
#line 38 
    ;
    case 13: 
#line 39 
    ;
    default: 
#line 40 
    ;
    {
      struct medialeaf *mleaf;
      unsigned char *p;
      
#line 43 
      if (tp->mtable == (struct mediatable *)0) {
        
#line 46 
        next_tick = 15000;
        
#line 47 
        if (tulip_debug > 2) {
          
#line 48 
          struct _ddebug descriptor_0 = {.modname = "tulip", .function = "tulip_media_task", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/timer.c", .format = "network media monitor CSR6 %08x CSR12 0x%02x\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))50U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))1U};
          
#line 48 
          if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) {
            unsigned int tmp_6;
            
#line 48 
            ;
            
#line 48 
            tmp_6 = ioread32(ioaddr + 48U);
            
#line 48 
            ;
            
#line 48 
            __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)dev,"network media monitor CSR6 %08x CSR12 0x%02x\n",tmp_6,csr12 & 255U);
          }
          else ;
        }
        else ;
        
#line 51 
        goto ldv_45340;
      }
      else ;
      
#line 53 
      mleaf = & (tp->mtable)->mleaf[tp->cur_index];
      
#line 54 
      p = mleaf->leafdata;
      
#line 55 
      switch ((int)mleaf->type) {
        int tmp_8;
        case 0: 
#line 56 
        ;
        case 4: 
#line 56 
        ;
        {
          int tmp_7;
          
#line 58 
          if ((unsigned int)mleaf->type == 4U) 
#line 58 
                                               tmp_7 = 5; else 
#line 58 
                                                               tmp_7 = 2;
          
#line 58 
          int offset = tmp_7;
          
#line 59 
          s8 bitnum = (signed char)*(p + offset);
          
#line 60 
          if ((int)*(p + ((unsigned int)offset + 1U)) < 0) {
            
#line 61 
            if (tulip_debug > 1) {
              
#line 62 
              struct _ddebug descriptor_1 = {.modname = "tulip", .function = "tulip_media_task", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/timer.c", .format = "Transceiver monitor tick CSR12=%#02x, no media sense\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))63U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))1U};
              
#line 62 
              if ((long)(((int)descriptor_1.flags & 1) != 0) != 0L) 
#line 62 
                                                                    __dynamic_netdev_dbg(& descriptor_1,(struct net_device const *)dev,"Transceiver monitor tick CSR12=%#02x, no media sense\n",csr12); else ;
            }
            else ;
            
#line 64 
            if ((unsigned int)mleaf->type == 4U) {
              
#line 65 
              if ((unsigned int)mleaf->media == 3U && (csr12 & 2U) != 0U) 
                
#line 66 
                goto select_next_media; else ;
            }
            else ;
            
#line 68 
            goto ldv_45347;
          }
          else ;
          
#line 70 
          if (tulip_debug > 2) {
            
#line 71 
            struct _ddebug descriptor_2 = {.modname = "tulip", .function = "tulip_media_task", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/timer.c", .format = "Transceiver monitor tick: CSR12=%#02x bit %d is %d, expecting %d\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))74U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))1U};
            
#line 71 
            if ((long)(((int)descriptor_2.flags & 1) != 0) != 0L) 
#line 71 
                                                                  __dynamic_netdev_dbg(& descriptor_2,(struct net_device const *)dev,"Transceiver monitor tick: CSR12=%#02x bit %d is %d, expecting %d\n",csr12,((int)bitnum >> 1) & 7,((unsigned int)(1 << (((int)bitnum >> 1) & 7)) & csr12) != 0U,(int)bitnum >= 0); else ;
          }
          else ;
          
#line 76 
          if (((int)bitnum < 0) ^ (((unsigned int)(1 << (((int)bitnum >> 1) & 7)) & csr12) != 0U)) {
            
#line 78 
            if (tulip_debug > 2) {
              
#line 79 
              struct _ddebug descriptor_3 = {.modname = "tulip", .function = "tulip_media_task", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/timer.c", .format = "Link beat detected for %s\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))80U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))1U};
              
#line 79 
              if ((long)(((int)descriptor_3.flags & 1) != 0) != 0L) 
#line 79 
                                                                    __dynamic_netdev_dbg(& descriptor_3,(struct net_device const *)dev,"Link beat detected for %s\n",medianame[(int)mleaf->media & 31]); else ;
            }
            else ;
            
#line 81 
            if (((int)*(p + 2U) & 97) == 1) 
#line 82 
                                            goto actually_mii; else ;
            
#line 83 
            netif_carrier_on(dev);
            
#line 84 
            goto ldv_45347;
          }
          else ;
          
#line 86 
          netif_carrier_off(dev);
          
#line 87 
          if ((unsigned int)*((unsigned char *)tp + 3525UL) != 0U) 
#line 88 
                                                                   goto ldv_45347; else ;
          select_next_media: 
#line 89 
          ;
          
#line 90 
          tp->cur_index -= 1;
          
#line 90 
          if (tp->cur_index < 0) 
#line 92 
                                 tp->cur_index = (int)(tp->mtable)->leafcount + -1; else ;
          
#line 94 
          dev->if_port = (tp->mtable)->mleaf[tp->cur_index].media;
          
#line 95 
          if (((int)tulip_media_cap[(int)dev->if_port] & 1) != 0) 
#line 96 
                                                                  goto select_next_media; else ;
          
#line 97 
          if (tulip_debug > 1) {
            
#line 98 
            struct _ddebug descriptor_4 = {.modname = "tulip", .function = "tulip_media_task", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/timer.c", .format = "No link beat on media %s, trying transceiver type %s\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))100U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))1U};
            
#line 98 
            if ((long)(((int)descriptor_4.flags & 1) != 0) != 0L) 
#line 98 
                                                                  __dynamic_netdev_dbg(& descriptor_4,(struct net_device const *)dev,"No link beat on media %s, trying transceiver type %s\n",medianame[(int)mleaf->media & 31],medianame[(int)(tp->mtable)->mleaf[tp->cur_index].media]); else ;
          }
          else ;
          
#line 101 
          tulip_select_media(dev,0);
          
#line 103 
          tulip_restart_rxtx_5(tp);
          
#line 104 
          next_tick = 600;
          
#line 105 
          goto ldv_45347;
        }
        case 1: 
#line 107 
        ;
        case 3: 
#line 107 
        ;
        actually_mii: 
#line 108 
        ;
        
#line 109 
        tmp_8 = tulip_check_duplex(dev);
        
#line 109 
        if (tmp_8 < 0) {
          
#line 110 
          netif_carrier_off(dev);
          
#line 111 
          next_tick = 750;
        }
        else {
          
#line 113 
          netif_carrier_on(dev);
          
#line 114 
          next_tick = 15000;
        }
        
#line 116 
        goto ldv_45347;
        case 2: 
#line 117 
        ;
        default: 
#line 118 
        ;
        
#line 119 
        goto ldv_45347;
      }
      ldv_45347: 
#line 121 
      ;
    }
    
#line 122 
    goto ldv_45340;
  }
  ldv_45340: 
#line 126 
  ;
  
#line 126 
  ldv___ldv_spin_lock_72_0(& tp->lock);
  
#line 127 
  if ((unsigned int)*((unsigned char *)tp + 3525UL) != 0U) {
    
#line 128 
    tulip_tx_timeout_complete_0(tp,ioaddr);
    
#line 129 
    tp->timeout_recovery = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U;
  }
  else ;
  
#line 131 
  ldv_spin_unlock_irqrestore_73_0(& tp->lock,flags);
  
#line 136 
  ldv_mod_timer_74(& tp->timer,(unsigned long)next_tick + jiffies);
  
#line 137 
  return;
}


#line 140  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/timer.c"
void mxic_timer(unsigned long data)
{
  
#line 142 
  struct net_device *dev = (struct net_device *)data;
  
#line 143 
  struct tulip_private *tp = netdev_priv((struct net_device const *)dev);
  
#line 144 
  void *ioaddr = tp->base_addr;
  
#line 145 
  int next_tick = 15000;
  
#line 147 
  if (tulip_debug > 3) {
    unsigned int tmp_0;
    
#line 148 
    tmp_0 = ioread32(ioaddr + 96U);
    
#line 148 
    ;
    
#line 148 
    _dev_info((struct device const *)(& dev->dev),"MXIC negotiation status %08x\n",tmp_0);
  }
  else ;
  
#line 151 
  if (next_tick != 0) 
#line 152 
                      ldv_mod_timer_75_0(& tp->timer,(unsigned long)next_tick + jiffies); else ;
  
#line 153 
  return;
}


#line 157  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/timer.c"
void comet_timer(unsigned long data)
{
  int tmp_2;
  
#line 159 
  struct net_device *dev = (struct net_device *)data;
  
#line 160 
  struct tulip_private *tp = netdev_priv((struct net_device const *)dev);
  
#line 161 
  int next_tick = 500;
  
#line 163 
  if (tulip_debug > 1) {
    
#line 164 
    struct _ddebug descriptor = {.modname = "tulip", .function = "comet_timer", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/dec/tulip/timer.c", .format = "Comet link status %04x partner capability %04x\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))166U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))1U};
    
#line 164 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
      int tmp_0;
      int tmp_1;
      
#line 164 
      tmp_0 = tulip_mdio_read(dev,(int)tp->phys[0],5);
      
#line 164 
      tmp_1 = tulip_mdio_read(dev,(int)tp->phys[0],1);
      
#line 164 
      ;
      
#line 164 
      __dynamic_netdev_dbg(& descriptor,(struct net_device const *)dev,"Comet link status %04x partner capability %04x\n",tmp_1,tmp_0);
    }
    else ;
  }
  else ;
  
#line 170 
  tmp_2 = tulip_check_duplex(dev);
  
#line 170 
  if (tmp_2 < 0) 
#line 171 
                 netif_carrier_off(dev); else 
#line 173 
                                              netif_carrier_on(dev);
  
#line 174 
  ldv_mod_timer_76_0(& tp->timer,(unsigned long)next_tick + jiffies);
  
#line 175 
  return;
}


#line 738  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/weaver/.tmp_timer.c.aux"
static void ldv___ldv_spin_lock_72_0(spinlock_t *ldv_func_arg1)
{
  
#line 742 
  ldv_spin_model_lock((char *)"lock_of_tulip_private");
  
#line 744 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 745 
  return;
}


#line 748  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/weaver/.tmp_timer.c.aux"
static void ldv_spin_unlock_irqrestore_73_0(spinlock_t *lock, unsigned long flags)
{
  
#line 752 
  ldv_spin_model_unlock((char *)"lock_of_tulip_private");
  
#line 754 
  spin_unlock_irqrestore_1(lock,flags);
  
#line 755 
  return;
}


#line 758  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/weaver/.tmp_timer.c.aux"
static int ldv_mod_timer_74(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2)
{
  int tmp;
  
#line 762 
  tmp = ldv_emg_mod_timer(ldv_func_arg1,ldv_func_arg2);
  
#line 762 
  return tmp;
}


#line 766  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/weaver/.tmp_timer.c.aux"
static int ldv_mod_timer_75_0(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2)
{
  int tmp;
  
#line 770 
  tmp = ldv_emg_mod_timer(ldv_func_arg1,ldv_func_arg2);
  
#line 770 
  return tmp;
}


#line 774  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/weaver/.tmp_timer.c.aux"
static int ldv_mod_timer_76_0(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2)
{
  int tmp;
  
#line 778 
  tmp = ldv_emg_mod_timer(ldv_func_arg1,ldv_func_arg2);
  
#line 778 
  return tmp;
}


#line 21  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
void ldv_atomic_add(int i, atomic_t *v)
{
  
#line 23 
  v->counter += i;
  
#line 24 
  return;
}


#line 27  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
void ldv_atomic_sub(int i, atomic_t *v)
{
  
#line 29 
  v->counter -= i;
  
#line 30 
  return;
}


#line 33  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
int ldv_atomic_sub_and_test(int i, atomic_t *v)
{
  int __retres;
  
#line 35 
  v->counter -= i;
  
#line 36 
  if (v->counter != 0) {
    
#line 37 
    __retres = 0;
    
#line 37 
    goto return_label;
  }
  else ;
  
#line 39 
  __retres = 1;
  return_label: 
#line 39 
                return __retres;
}


#line 43  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
void ldv_atomic_inc(atomic_t *v)
{
  
#line 45 
  v->counter += 1;
  
#line 46 
  return;
}


#line 49  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
void ldv_atomic_dec(atomic_t *v)
{
  
#line 51 
  v->counter -= 1;
  
#line 52 
  return;
}


#line 55  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
int ldv_atomic_dec_and_test(atomic_t *v)
{
  int __retres;
  
#line 57 
  v->counter -= 1;
  
#line 58 
  if (v->counter != 0) {
    
#line 59 
    __retres = 0;
    
#line 59 
    goto return_label;
  }
  else ;
  
#line 61 
  __retres = 1;
  return_label: 
#line 61 
                return __retres;
}


#line 65  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
int ldv_atomic_inc_and_test(atomic_t *v)
{
  int __retres;
  
#line 67 
  v->counter += 1;
  
#line 68 
  if (v->counter != 0) {
    
#line 69 
    __retres = 0;
    
#line 69 
    goto return_label;
  }
  else ;
  
#line 71 
  __retres = 1;
  return_label: 
#line 71 
                return __retres;
}


#line 75  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
int ldv_atomic_add_return(int i, atomic_t *v)
{
  int __retres;
  
#line 77 
  v->counter += i;
  
#line 78 
  __retres = v->counter;
  
#line 78 
  return __retres;
}


#line 82  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
int ldv_atomic_add_negative(int i, atomic_t *v)
{
  int __retres;
  
#line 84 
  v->counter += i;
  
#line 85 
  __retres = v->counter < 0;
  
#line 85 
  return __retres;
}


#line 89  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
int ldv_atomic_inc_short(short *v)
{
  int __retres;
  
#line 91 
  *v = (short)((unsigned int)*v + 1U);
  
#line 92 
  __retres = (int)*v;
  
#line 92 
  return __retres;
}


#line 23  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/device.h"
void *ldv_dev_get_drvdata(struct device const *dev);


#line 24 
int ldv_dev_set_drvdata(struct device *dev, void *data);


#line 30  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memory.h"
void *ldv_xmalloc(size_t size);


#line 31 
void *ldv_xzalloc(size_t size);


#line 28  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memlist.h"
struct ldv_list_element global_list = {.data = (void *)0, .next = (struct ldv_list_element *)0};

#line 33  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memlist.h"
__inline static ldv_list_ptr ldv_list_create(void *data)
{
  
#line 35 
  ldv_list_ptr list = (struct ldv_list_element *)0;
  
#line 37 
  list = (ldv_list_ptr)ldv_xmalloc(16UL);
  
#line 39 
  list->data = data;
  
#line 40 
  list->next = (struct ldv_list_element *)0;
  
#line 42 
  return list;
}


#line 45  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memlist.h"
__inline static void ldv_save_pointer(void *data)
{
  ldv_list_ptr element;
  ldv_list_ptr cached;
  
#line 50 
  if (global_list.data == (void *)0) {
    
#line 51 
    element = & global_list;
    
#line 52 
    element->data = data;
  }
  else {
    
#line 54 
    element = ldv_list_create(data);
    
#line 55 
    cached = global_list.next;
    
#line 56 
    global_list.next = element;
    
#line 57 
    element->next = cached;
  }
  
#line 60 
  return;
}


#line 28  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device const *dev)
{
  void *__retres;
  
#line 30 
  if (dev != (struct device const *)0 && dev->p != (struct device_private *)0) {
    
#line 31 
    __retres = (dev->p)->driver_data;
    
#line 31 
    goto return_label;
  }
  else ;
  
#line 33 
  __retres = (void *)0;
  return_label: 
#line 33 
                return __retres;
}


#line 42  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data)
{
  int __retres;
  
#line 44 
  dev->p = (struct device_private *)ldv_xzalloc(8UL);
  
#line 45 
  ldv_save_pointer((void *)dev->p);
  
#line 46 
  (dev->p)->driver_data = data;
  
#line 48 
  __retres = 0;
  
#line 48 
  return __retres;
}


#line 25  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memory.h"
void *ldv_zalloc(size_t size);


#line 23  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/drivers/spi.c"
struct spi_master *ldv_spi_alloc_master(struct device *host, unsigned int size)
{
  struct spi_master *__retres;
  struct spi_master *master;
  
#line 27 
  master = (struct spi_master *)ldv_zalloc((unsigned long)size + 2192UL);
  
#line 29 
  if (master == (struct spi_master *)0) {
    
#line 30 
    __retres = (struct spi_master *)0;
    
#line 30 
    goto return_label;
  }
  else ;
  
#line 32 
  ldv_dev_set_drvdata(& master->dev,(void *)(master + 1U));
  
#line 34 
  __retres = master;
  return_label: 
#line 34 
                return __retres;
}


#line 27  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/err.h"
long ldv_is_err(void const *ptr);


#line 28 
long ldv_is_err_or_null(void const *ptr);


#line 29 
void *ldv_err_ptr(long error);


#line 30 
long ldv_ptr_err(void const *ptr);


#line 23  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/common.h"
void __VERIFIER_assume(int);


#line 21  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_is_err(void const *ptr)
{
  long __retres;
  
#line 23 
  __retres = (long)((unsigned long)ptr > 4294967295UL);
  
#line 23 
  return __retres;
}


#line 26  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error)
{
  void *__retres;
  
#line 28 
  __VERIFIER_assume(error < 0L);
  
#line 29 
  __retres = (void *)(4294967295L - error);
  
#line 29 
  return __retres;
}


#line 32  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_ptr_err(void const *ptr)
{
  long __retres;
  
#line 34 
  __VERIFIER_assume((unsigned long)ptr > 4294967295UL);
  
#line 35 
  __retres = (long)(4294967295UL - (unsigned long)ptr);
  
#line 35 
  return __retres;
}


#line 38  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_is_err_or_null(void const *ptr)
{
  long __retres;
  int tmp_0;
  
#line 40 
  if (ptr == (void const *)0) 
#line 40 
                              tmp_0 = 1;
  else {
    long tmp;
    
#line 40 
    tmp = ldv_is_err(ptr);
    
#line 40 
    if (tmp != 0L) 
#line 40 
                   tmp_0 = 1; else 
#line 40 
                                   tmp_0 = 0;
  }
  
#line 40 
  __retres = (long)tmp_0;
  
#line 40 
  return __retres;
}


#line 21  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/panic.h"
void ldv_panic(void);


#line 21  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void)
{
  
#line 23 
  __VERIFIER_assume(0);
  
#line 24 
  return;
}


#line 32  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.h"
void ldv_switch_to_interrupt_context(void);


#line 42 
void ldv_switch_to_process_context(void);


#line 50 
bool ldv_in_interrupt_context(void);


#line 112 
int ldv_post_init(int init_ret_val);


#line 132 
int ldv_post_probe(int probe_ret_val);


#line 133 
void ldv_check_return_value_probe(int);


#line 141 
int ldv_filter_err_code(int ret_val);


#line 25  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
static bool __ldv_in_interrupt_context = (_Bool)0;

#line 28  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
void ldv_switch_to_interrupt_context(void)
{
  
#line 30 
  __ldv_in_interrupt_context = (_Bool)1;
  
#line 31 
  return;
}


#line 34  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
void ldv_switch_to_process_context(void)
{
  
#line 36 
  __ldv_in_interrupt_context = (_Bool)0;
  
#line 37 
  return;
}


#line 39  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
bool ldv_in_interrupt_context(void)
{
  
#line 41 
  return __ldv_in_interrupt_context;
}


#line 44  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
static int ldv_filter_positive_int(int val)
{
  
#line 46 
  __VERIFIER_assume(val <= 0);
  
#line 47 
  return val;
}


#line 54  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
int ldv_post_init(int init_ret_val)
{
  int tmp;
  
#line 56 
  tmp = ldv_filter_positive_int(init_ret_val);
  
#line 56 
  return tmp;
}


#line 60  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
int ldv_post_probe(int probe_ret_val)
{
  int tmp;
  
#line 62 
  ldv_check_return_value_probe(probe_ret_val);
  
#line 63 
  tmp = ldv_filter_positive_int(probe_ret_val);
  
#line 63 
  return tmp;
}


#line 67  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
int ldv_filter_err_code(int ret_val)
{
  int tmp;
  
#line 69 
  tmp = ldv_filter_positive_int(ret_val);
  
#line 69 
  return tmp;
}


#line 23  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/slab.h"
void *ldv_kzalloc(size_t size, gfp_t flags);


#line 25 
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags);


#line 26 
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags);


#line 28 
void ldv_check_alloc_flags(gfp_t);


#line 29 
void ldv_after_alloc(void *);


#line 23  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memory.h"
void *ldv_malloc(size_t size);


#line 24 
void *ldv_calloc(size_t nmemb, size_t size);


#line 21  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc(size_t size, gfp_t flags)
{
  void *res;
  
#line 25 
  ldv_check_alloc_flags(flags);
  
#line 26 
  res = ldv_malloc(size);
  
#line 27 
  ldv_after_alloc(res);
  
#line 29 
  return res;
}


#line 32  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags)
{
  void *res;
  
#line 36 
  ldv_check_alloc_flags(flags);
  
#line 37 
  res = ldv_calloc(n,size);
  
#line 38 
  ldv_after_alloc(res);
  
#line 40 
  return res;
}


#line 43  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kzalloc(size_t size, gfp_t flags)
{
  void *res;
  
#line 47 
  ldv_check_alloc_flags(flags);
  
#line 48 
  res = ldv_zalloc(size);
  
#line 49 
  ldv_after_alloc(res);
  
#line 51 
  return res;
}


#line 54  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  void *res;
  
#line 58 
  ldv_check_alloc_flags(flags);
  
#line 59 
  res = ldv_malloc(n * size);
  
#line 60 
  ldv_after_alloc(res);
  
#line 62 
  return res;
}


#line 26  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memory.h"
void ldv_free(void *s);


#line 35 
void *ldv_malloc_unknown_size(void);


#line 36 
void *ldv_calloc_unknown_size(void);


#line 37 
void *ldv_zalloc_unknown_size(void);


#line 40 
void *ldv_reference_malloc(size_t size);


#line 41 
void *ldv_reference_calloc(size_t nmemb, size_t size);


#line 42 
void *ldv_reference_zalloc(size_t size);


#line 43 
void ldv_reference_free(void *s);


#line 47 
void *ldv_reference_xmalloc(size_t size);


#line 48 
void *ldv_reference_xzalloc(size_t size);


#line 52 
void *ldv_reference_malloc_unknown_size(void);


#line 53 
void *ldv_reference_calloc_unknown_size(void);


#line 54 
void *ldv_reference_zalloc_unknown_size(void);


#line 61 
void *ldv_xmalloc_unknown_size(size_t size);


#line 32  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size);


#line 34  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc(size_t size)
{
  void *res;
  
#line 37 
  res = ldv_reference_malloc(size);
  
#line 38 
  if (res != (void *)0) {
    long tmp;
    
#line 39 
    tmp = ldv_is_err((void const *)res);
    
#line 39 
    __VERIFIER_assume(tmp == 0L);
  }
  else ;
  
#line 40 
  return res;
}


#line 43  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc(size_t nmemb, size_t size)
{
  void *res;
  
#line 46 
  res = ldv_reference_calloc(nmemb,size);
  
#line 47 
  if (res != (void *)0) {
    long tmp;
    
#line 48 
    tmp = ldv_is_err((void const *)res);
    
#line 48 
    __VERIFIER_assume(tmp == 0L);
  }
  else ;
  
#line 49 
  return res;
}


#line 52  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc(size_t size)
{
  void *res;
  
#line 55 
  res = ldv_reference_zalloc(size);
  
#line 56 
  if (res != (void *)0) {
    long tmp;
    
#line 57 
    tmp = ldv_is_err((void const *)res);
    
#line 57 
    __VERIFIER_assume(tmp == 0L);
  }
  else ;
  
#line 58 
  return res;
}


#line 61  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void ldv_free(void *s)
{
  
#line 63 
  ldv_reference_free(s);
  
#line 64 
  return;
}


#line 66  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc(size_t size)
{
  void *res;
  long tmp;
  
#line 69 
  res = ldv_reference_xmalloc(size);
  
#line 70 
  tmp = ldv_is_err((void const *)res);
  
#line 70 
  __VERIFIER_assume(tmp == 0L);
  
#line 71 
  return res;
}


#line 74  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xzalloc(size_t size)
{
  void *res;
  long tmp;
  
#line 77 
  res = ldv_reference_xzalloc(size);
  
#line 78 
  tmp = ldv_is_err((void const *)res);
  
#line 78 
  __VERIFIER_assume(tmp == 0L);
  
#line 79 
  return res;
}


#line 82  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc_unknown_size(void)
{
  void *res;
  
#line 85 
  res = ldv_reference_malloc_unknown_size();
  
#line 86 
  if (res != (void *)0) {
    long tmp;
    
#line 87 
    tmp = ldv_is_err((void const *)res);
    
#line 87 
    __VERIFIER_assume(tmp == 0L);
  }
  else ;
  
#line 88 
  return res;
}


#line 91  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void)
{
  void *res;
  
#line 94 
  res = ldv_reference_calloc_unknown_size();
  
#line 95 
  if (res != (void *)0) {
    long tmp;
    
#line 96 
    tmp = ldv_is_err((void const *)res);
    
#line 96 
    __VERIFIER_assume(tmp == 0L);
  }
  else ;
  
#line 97 
  return res;
}


#line 100  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void)
{
  void *res;
  
#line 103 
  res = ldv_reference_zalloc_unknown_size();
  
#line 104 
  if (res != (void *)0) {
    long tmp;
    
#line 105 
    tmp = ldv_is_err((void const *)res);
    
#line 105 
    __VERIFIER_assume(tmp == 0L);
  }
  else ;
  
#line 106 
  return res;
}


#line 109  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size)
{
  void *res;
  long tmp;
  
#line 112 
  res = ldv_reference_xmalloc_unknown_size(size);
  
#line 113 
  tmp = ldv_is_err((void const *)res);
  
#line 113 
  __VERIFIER_assume(tmp == 0L);
  
#line 114 
  return res;
}

long __builtin_expect(long exp, long c);


#line 22  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/common.h"
void __VERIFIER_error(void);


#line 24  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/gcc.c"
long __builtin_expect(long exp, long c)
{
  
#line 26 
  return exp;
}


#line 35  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/gcc.c"
void __builtin_trap(void)
{
  
#line 37 
  __VERIFIER_error();
  
#line 38 
  return;
}


#line 23  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.h"
int ldv_undef_int(void);


#line 24 
int ldv_undef_long(void);


#line 25 
unsigned int ldv_undef_uint(void);


#line 26 
unsigned long ldv_undef_ulong(void);


#line 27 
unsigned long long ldv_undef_ulonglong(void);


#line 28 
void *ldv_undef_ptr(void);


#line 31 
int ldv_undef_int_positive(void);


#line 34 
int ldv_undef_int_negative(void);


#line 37 
int ldv_undef_int_nonpositive(void);


#line 40 
void *ldv_undef_ptr_non_null(void);


#line 29  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __VERIFIER_nondet_int(void);


#line 31 
long __VERIFIER_nondet_long(void);


#line 38 
unsigned int __VERIFIER_nondet_uint(void);


#line 41 
unsigned long __VERIFIER_nondet_ulong(void);


#line 42 
unsigned long long __VERIFIER_nondet_ulonglong(void);


#line 43 
void *__VERIFIER_nondet_pointer(void);


#line 46  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int(void)
{
  int tmp;
  
#line 48 
  tmp = __VERIFIER_nondet_int();
  
#line 48 
  return tmp;
}


#line 51  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_long(void)
{
  int __retres;
  long tmp;
  
#line 53 
  tmp = __VERIFIER_nondet_long();
  
#line 53 
  __retres = (int)tmp;
  
#line 53 
  return __retres;
}


#line 56  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void)
{
  unsigned int tmp;
  
#line 58 
  tmp = __VERIFIER_nondet_uint();
  
#line 58 
  return tmp;
}


#line 61  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void)
{
  void *tmp;
  
#line 63 
  tmp = __VERIFIER_nondet_pointer();
  
#line 63 
  return tmp;
}


#line 66  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void)
{
  unsigned long tmp;
  
#line 68 
  tmp = __VERIFIER_nondet_ulong();
  
#line 68 
  return tmp;
}


#line 71  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void)
{
  unsigned long long tmp;
  
#line 73 
  tmp = __VERIFIER_nondet_ulonglong();
  
#line 73 
  return tmp;
}


#line 76  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_positive(void)
{
  
#line 78 
  int ret = ldv_undef_int();
  
#line 80 
  __VERIFIER_assume(ret > 0);
  
#line 82 
  return ret;
}


#line 85  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_negative(void)
{
  
#line 87 
  int ret = ldv_undef_int();
  
#line 89 
  __VERIFIER_assume(ret < 0);
  
#line 91 
  return ret;
}


#line 94  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonpositive(void)
{
  
#line 96 
  int ret = ldv_undef_int();
  
#line 98 
  __VERIFIER_assume(ret <= 0);
  
#line 100 
  return ret;
}


#line 103  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void)
{
  
#line 105 
  void *ret = ldv_undef_ptr();
  
#line 107 
  __VERIFIER_assume(ret != (void *)0);
  
#line 109 
  return ret;
}


#line 33  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memory.h"
void *external_allocated_data(void);


#line 45 
void *ldv_reference_realloc(void *ptr, size_t size);


#line 23  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *malloc(size_t);


#line 24 
void *calloc(size_t, size_t);


#line 25 
void free(void *);


#line 33  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size)
{
  void *__retres;
  void *res;
  int tmp;
  
#line 37 
  tmp = ldv_undef_int();
  
#line 37 
  if (tmp != 0) {
    
#line 39 
    res = malloc(size);
    
#line 40 
    __VERIFIER_assume(res != (void *)0);
    
#line 41 
    __retres = res;
    
#line 41 
    goto return_label;
  }
  else {
    
#line 44 
    __retres = (void *)0;
    
#line 44 
    goto return_label;
  }
  return_label: 
#line 37 
                return __retres;
}


#line 47  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size)
{
  void *tmp;
  
#line 49 
  tmp = calloc(nmemb,size);
  
#line 49 
  return tmp;
}


#line 52  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size)
{
  void *tmp;
  
#line 54 
  tmp = calloc(1UL,size);
  
#line 54 
  return tmp;
}


#line 57  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s)
{
  
#line 59 
  free(s);
  
#line 60 
  return;
}


#line 62  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size)
{
  void *__retres;
  void *res;
  int tmp;
  
#line 66 
  if (ptr != (void *)0 && size == 0UL) {
    
#line 67 
    free(ptr);
    
#line 68 
    __retres = (void *)0;
    
#line 68 
    goto return_label;
  }
  else ;
  
#line 71 
  if (ptr == (void *)0) {
    
#line 72 
    res = malloc(size);
    
#line 73 
    __retres = res;
    
#line 73 
    goto return_label;
  }
  else ;
  
#line 76 
  tmp = ldv_undef_int();
  
#line 76 
  if (tmp != 0) {
    
#line 78 
    res = malloc(size);
    
#line 79 
    __VERIFIER_assume(res != (void *)0);
    
#line 81 
    memcpy(res,(void const *)ptr,size);
    
#line 82 
    free(ptr);
    
#line 84 
    __retres = res;
    
#line 84 
    goto return_label;
  }
  else {
    
#line 87 
    __retres = (void *)0;
    
#line 87 
    goto return_label;
  }
  return_label: 
#line 76 
                return __retres;
}


#line 90  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size)
{
  void *res;
  
#line 94 
  res = malloc(size);
  
#line 95 
  __VERIFIER_assume(res != (void *)0);
  
#line 97 
  return res;
}


#line 100  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size)
{
  void *res;
  
#line 104 
  res = calloc(1UL,size);
  
#line 105 
  __VERIFIER_assume(res != (void *)0);
  
#line 107 
  return res;
}


#line 110  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void)
{
  void *__retres;
  void *res;
  int tmp;
  
#line 114 
  tmp = ldv_undef_int();
  
#line 114 
  if (tmp != 0) {
    
#line 115 
    res = external_allocated_data();
    
#line 116 
    __VERIFIER_assume(res != (void *)0);
    
#line 117 
    __retres = res;
    
#line 117 
    goto return_label;
  }
  else {
    
#line 120 
    __retres = (void *)0;
    
#line 120 
    goto return_label;
  }
  return_label: 
#line 114 
                return __retres;
}


#line 123  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void)
{
  void *__retres;
  void *res;
  int tmp;
  
#line 127 
  tmp = ldv_undef_int();
  
#line 127 
  if (tmp != 0) {
    
#line 128 
    res = external_allocated_data();
    
#line 129 
    memset(res,0,8UL);
    
#line 130 
    __VERIFIER_assume(res != (void *)0);
    
#line 131 
    __retres = res;
    
#line 131 
    goto return_label;
  }
  else {
    
#line 134 
    __retres = (void *)0;
    
#line 134 
    goto return_label;
  }
  return_label: 
#line 127 
                return __retres;
}


#line 137  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void)
{
  void *tmp;
  
#line 139 
  tmp = ldv_reference_calloc_unknown_size();
  
#line 139 
  return tmp;
}


#line 142  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size)
{
  void *res;
  
#line 146 
  res = external_allocated_data();
  
#line 147 
  __VERIFIER_assume(res != (void *)0);
  
#line 149 
  return res;
}


#line 62  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.h"
void ldv_initialize(void);


#line 97 
void ldv_failed_register_netdev(void);


#line 123 
void ldv_pre_probe(void);


#line 33  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/thread.h"
int pthread_create(pthread_t *, pthread_attr_t const *, void *(*)(void *), void *);


#line 37 
int pthread_join(pthread_t, void **);


#line 69  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_register_11_4(struct net_device *arg0);


#line 73 
int main(void);


#line 74 
void *ldv_timer_scenario_15(void *arg0);


#line 75 
void ldv_dispatch_irq_register_12_3(int arg0, enum irqreturn (*arg1)(int , void *), enum irqreturn (*arg2)(int , void *), void *arg3);


#line 76 
void ldv_dispatch_irq_deregister_3_1(int arg0);


#line 78 
void ldv_dispatch_register_7_3(struct pci_driver *arg0);


#line 80 
void *ldv_random_allocationless_scenario_13(void *arg0);


#line 82 
void *ldv_initialization_1(void *arg0);


#line 83 
void ldv_dispatch_instance_deregister_9_1(struct timer_list *arg0);


#line 84 
void ldv_dispatch_deregister_10_1(struct pci_driver *arg0);


#line 85 
void *ldv_pci_scenario_16(void *arg0);


#line 89 
void ldv_dispatch_instance_register_4_3(struct timer_list *arg0);


#line 90 
void ldv_dispatch_deregister_6_1(struct net_device *arg0);


#line 92 
void *ldv_interrupt_scenario_14(void *arg0);


#line 96  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_14;

#line 97  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_13;

#line 98  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_15;

#line 99  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_16;

#line 103  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_register_11_4(struct net_device *arg0)
{
  int ret;
  struct ldv_struct_random_allocationless_scenario_13 *cf_arg_13;
  int tmp;
  
#line 106 
  tmp = ldv_undef_int();
  
#line 106 
  switch (tmp) {
    case 0: 
#line 107 
    ;
    
#line 108 
    cf_arg_13 = (struct ldv_struct_random_allocationless_scenario_13 *)ldv_xmalloc(16UL);
    
#line 109 
    cf_arg_13->arg0 = arg0;
    
#line 110 
    ret = pthread_create(& ldv_thread_13,(pthread_attr_t const *)0,& ldv_random_allocationless_scenario_13,(void *)cf_arg_13);
    
#line 111 
    __VERIFIER_assume(ret == 0);
    
#line 112 
    goto ldv_44687;
    default: 
#line 114 
    ;
    
#line 114 
    __VERIFIER_assume(0);
  }
  ldv_44687: 
#line 115 
  ;
  
#line 116 
  return;
}


#line 120  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/emg/environment_model.c"
int ldv_emg_del_timer_sync(struct timer_list *arg0)
{
  int __retres;
  struct timer_list *ldv_9_timer_list;
  
#line 126 
  ldv_9_timer_list = arg0;
  
#line 130 
  ldv_dispatch_instance_deregister_9_1(ldv_9_timer_list);
  
#line 131 
  ;
  
#line 131 
  __retres = 0;
  
#line 131 
  return __retres;
}


#line 139  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_emg_pci_unregister_driver(struct pci_driver *arg0)
{
  
#line 142 
  struct pci_driver *ldv_10_pci_driver = ldv_emg_alias_tulip_driver_2;
  
#line 145 
  ldv_10_pci_driver = arg0;
  
#line 149 
  ldv_dispatch_deregister_10_1(ldv_10_pci_driver);
  
#line 153 
  goto return_label;
  return_label: 
#line 155 
                return;
}


#line 160  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/emg/environment_model.c"
int ldv_emg___pci_register_driver(struct pci_driver *arg0, struct module *arg1, char *arg2)
{
  int __retres;
  int tmp_0;
  
#line 163 
  struct pci_driver *ldv_7_pci_driver = ldv_emg_alias_tulip_driver_2;
  
#line 167 
  tmp_0 = ldv_undef_int();
  
#line 167 
  if (tmp_0 != 0) {
    
#line 169 
    ldv_7_pci_driver = arg0;
    
#line 173 
    ldv_dispatch_register_7_3(ldv_7_pci_driver);
    
#line 177 
    __retres = 0;
    
#line 177 
    goto return_label;
  }
  else {
    int tmp;
    
#line 184 
    tmp = ldv_undef_int_negative();
    
#line 184 
    __retres = tmp;
    
#line 184 
    goto return_label;
  }
  return_label: 
#line 167 
                return __retres;
}


#line 194  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/emg/environment_model.c"
int main(void)
{
  int __retres;
  
#line 197 
  ldv_initialize();
  
#line 200 
  ldv_initialization_1((void *)0);
  
#line 202 
  __retres = 0;
  
#line 202 
  return __retres;
}


#line 207  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_timer_scenario_15(void *arg0)
{
  void *__retres;
  struct timer_list *ldv_15_container;
  
#line 212 
  struct ldv_struct_timer_scenario_15 *data = (struct ldv_struct_timer_scenario_15 *)arg0;
  
#line 217 
  if (data != (struct ldv_struct_timer_scenario_15 *)0) {
    
#line 218 
    ldv_15_container = data->arg0;
    
#line 219 
    ldv_free((void *)data);
  }
  else ;
  
#line 224 
  if (ldv_15_container->function != (void (*)(unsigned long ))0) {
    
#line 226 
    ldv_switch_to_interrupt_context();
    
#line 228 
    (*(ldv_15_container->function))(ldv_15_container->data);
    
#line 230 
    ldv_switch_to_process_context();
  }
  else ;
  
#line 239 
  __retres = (void *)0;
  
#line 239 
  goto return_label;
  
#line 241 
  __retres = (void *)0;
  return_label: 
#line 241 
                return __retres;
}


#line 246  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_irq_register_12_3(int arg0, enum irqreturn (*arg1)(int , void *), enum irqreturn (*arg2)(int , void *), void *arg3)
{
  int ret;
  struct ldv_struct_interrupt_scenario_14 *cf_arg_14;
  int tmp;
  
#line 249 
  tmp = ldv_undef_int();
  
#line 249 
  switch (tmp) {
    case 0: 
#line 250 
    ;
    
#line 251 
    cf_arg_14 = (struct ldv_struct_interrupt_scenario_14 *)ldv_xmalloc(32UL);
    
#line 252 
    cf_arg_14->arg0 = arg0;
    
#line 253 
    cf_arg_14->arg1 = arg1;
    
#line 254 
    cf_arg_14->arg2 = arg2;
    
#line 255 
    cf_arg_14->arg3 = arg3;
    
#line 256 
    ret = pthread_create(& ldv_thread_14,(pthread_attr_t const *)0,& ldv_interrupt_scenario_14,(void *)cf_arg_14);
    
#line 257 
    __VERIFIER_assume(ret == 0);
    
#line 258 
    goto ldv_44724;
    default: 
#line 260 
    ;
    
#line 260 
    __VERIFIER_assume(0);
  }
  ldv_44724: 
#line 261 
  ;
  
#line 262 
  return;
}


#line 266  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_irq_deregister_3_1(int arg0)
{
  int ret;
  struct ldv_struct_free_irq_3 *cf_arg_14;
  int tmp;
  
#line 269 
  tmp = ldv_undef_int();
  
#line 269 
  switch (tmp) {
    case 0: 
#line 270 
    ;
    
#line 271 
    ret = pthread_join(ldv_thread_14,(void **)0);
    
#line 272 
    __VERIFIER_assume(ret == 0);
    
#line 273 
    goto ldv_44732;
    default: 
#line 275 
    ;
    
#line 275 
    __VERIFIER_assume(0);
  }
  ldv_44732: 
#line 276 
  ;
  
#line 277 
  return;
}


#line 281  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/emg/environment_model.c"
struct net_device *ldv_emg_alloc_etherdev_mqs(int arg0, unsigned int arg1, unsigned int arg2)
{
  struct net_device *__retres;
  struct net_device *ldv_5_netdev;
  int tmp_0;
  
#line 288 
  tmp_0 = ldv_undef_int();
  
#line 288 
  if (tmp_0 != 0) {
    
#line 290 
    ldv_5_netdev = (struct net_device *)ldv_xmalloc_unknown_size(0UL);
    
#line 294 
    __retres = ldv_5_netdev;
    
#line 294 
    goto return_label;
  }
  else {
    
#line 301 
    __retres = (struct net_device *)0;
    
#line 301 
    goto return_label;
  }
  return_label: 
#line 288 
                return __retres;
}


#line 311  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_register_7_3(struct pci_driver *arg0)
{
  int ret;
  struct ldv_struct_pci_scenario_16 *cf_arg_16;
  int tmp;
  
#line 314 
  tmp = ldv_undef_int();
  
#line 314 
  switch (tmp) {
    case 0: 
#line 315 
    ;
    
#line 316 
    cf_arg_16 = (struct ldv_struct_pci_scenario_16 *)ldv_xmalloc(16UL);
    
#line 317 
    cf_arg_16->arg0 = arg0;
    
#line 318 
    ret = pthread_create(& ldv_thread_16,(pthread_attr_t const *)0,& ldv_pci_scenario_16,(void *)cf_arg_16);
    
#line 319 
    __VERIFIER_assume(ret == 0);
    
#line 320 
    goto ldv_44746;
    default: 
#line 322 
    ;
    
#line 322 
    __VERIFIER_assume(0);
  }
  ldv_44746: 
#line 323 
  ;
  
#line 324 
  return;
}


#line 328  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/emg/environment_model.c"
int ldv_emg_request_irq(unsigned int arg0, enum irqreturn (*arg1)(int , void *), unsigned long arg2, char *arg3, void *arg4)
{
  int __retres;
  int ldv_12_line;
  void *ldv_12_data;
  enum irqreturn (*ldv_12_thread)(int , void *);
  int tmp_0;
  
#line 333 
  enum irqreturn (*ldv_12_callback)(int , void *) = & tulip_interrupt;
  
#line 338 
  tmp_0 = ldv_undef_int();
  
#line 338 
  if (tmp_0 != 0) {
    
#line 340 
    ldv_12_line = (int)arg0;
    
#line 341 
    ldv_12_callback = arg1;
    
#line 342 
    ldv_12_thread = (enum irqreturn (*)(int , void *))0;
    
#line 343 
    ldv_12_data = arg4;
    
#line 347 
    ldv_dispatch_irq_register_12_3(ldv_12_line,ldv_12_callback,ldv_12_thread,ldv_12_data);
    
#line 351 
    __retres = 0;
    
#line 351 
    goto return_label;
  }
  else {
    int tmp;
    
#line 358 
    tmp = ldv_undef_int_negative();
    
#line 358 
    __retres = tmp;
    
#line 358 
    goto return_label;
  }
  return_label: 
#line 338 
                return __retres;
}


#line 368  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_random_allocationless_scenario_13(void *arg0)
{
  void *__retres;
  struct ethtool_wolinfo *ldv_13_ldv_param_1_2;
  struct ethtool_wolinfo *ldv_13_ldv_param_1_3;
  struct ifreq *ldv_13_ldv_param_1_5;
  struct ethtool_drvinfo *ldv_13_ldv_param_1_4;
  int ldv_13_ldv_param_2_6;
  int ldv_13_ldv_param_1_7;
  struct sk_buff *ldv_13_ldv_param_0_8;
  struct net_device *ldv_13_container;
  void *ldv_13_ldv_param_1_9;
  int tmp_5;
  
#line 381 
  struct ldv_struct_random_allocationless_scenario_13 *data = (struct ldv_struct_random_allocationless_scenario_13 *)arg0;
  
#line 386 
  if (data != (struct ldv_struct_random_allocationless_scenario_13 *)0) {
    
#line 387 
    ldv_13_container = data->arg0;
    
#line 388 
    ldv_free((void *)data);
  }
  else ;
  
#line 396 
  goto ldv_call_13;
  
#line 398 
  __retres = (void *)0;
  
#line 398 
  goto return_label;
  ldv_call_13: 
#line 401 
  ;
  
#line 404 
  tmp_5 = ldv_undef_int();
  
#line 404 
  if (tmp_5 != 0) {
    int tmp_0;
    
#line 406 
    ldv_13_ldv_param_1_2 = (struct ethtool_wolinfo *)ldv_xmalloc_unknown_size(0UL);
    
#line 409 
    tmp_0 = ldv_undef_int();
    
#line 409 
    switch (tmp_0) {
      case 1: 
#line 410 
      ;
      
#line 413 
      ldv_emg_wrapper_tulip_ethtool_get_wol_3(ldv_13_container,ldv_13_ldv_param_1_2);
      
#line 416 
      goto ldv_44780;
      case 2: 
#line 418 
      ;
      
#line 421 
      ldv_emg_wrapper_set_rx_mode_13(ldv_13_container);
      
#line 424 
      goto ldv_44780;
      case 3: 
#line 426 
      ;
      
#line 428 
      ldv_13_ldv_param_1_9 = ldv_xmalloc_unknown_size(0UL);
      
#line 433 
      (*ldv_emg_alias_eth_mac_addr_12)(ldv_13_container,ldv_13_ldv_param_1_9);
      
#line 437 
      ldv_free(ldv_13_ldv_param_1_9);
      
#line 440 
      goto ldv_44780;
      case 4: 
#line 442 
      ;
      
#line 444 
      ldv_13_ldv_param_0_8 = (struct sk_buff *)ldv_xmalloc_unknown_size(0UL);
      
#line 449 
      ldv_emg_wrapper_tulip_start_xmit_11(ldv_13_ldv_param_0_8,ldv_13_container);
      
#line 453 
      ldv_free((void *)ldv_13_ldv_param_0_8);
      
#line 456 
      goto ldv_44780;
      case 5: 
#line 458 
      ;
      
#line 464 
      (*ldv_emg_alias_eth_change_mtu_5)(ldv_13_container,ldv_13_ldv_param_1_7);
      
#line 470 
      goto ldv_44780;
      case 6: 
#line 472 
      ;
      
#line 474 
      ldv_13_ldv_param_1_5 = (struct ifreq *)ldv_xmalloc_unknown_size(0UL);
      
#line 479 
      ldv_emg_wrapper_private_ioctl_4(ldv_13_container,ldv_13_ldv_param_1_5,ldv_13_ldv_param_2_6);
      
#line 483 
      ldv_free((void *)ldv_13_ldv_param_1_5);
      
#line 486 
      goto ldv_44780;
      case 7: 
#line 488 
      ;
      
#line 491 
      ldv_emg_wrapper_poll_tulip_10(ldv_13_container);
      
#line 494 
      goto ldv_44780;
      case 8: 
#line 496 
      ;
      
#line 499 
      ldv_emg_wrapper_tulip_get_stats_8(ldv_13_container);
      
#line 502 
      goto ldv_44780;
      case 9: 
#line 504 
      ;
      
#line 506 
      ldv_13_ldv_param_1_4 = (struct ethtool_drvinfo *)ldv_xmalloc_unknown_size(0UL);
      
#line 511 
      ldv_emg_wrapper_tulip_get_drvinfo_7(ldv_13_container,ldv_13_ldv_param_1_4);
      
#line 515 
      ldv_free((void *)ldv_13_ldv_param_1_4);
      
#line 518 
      goto ldv_44780;
      case 10: 
#line 520 
      ;
      
#line 523 
      ldv_emg_wrapper_tulip_tx_timeout_6(ldv_13_container);
      
#line 526 
      goto ldv_44780;
      case 11: 
#line 528 
      ;
      
#line 531 
      (*ldv_emg_alias_eth_validate_addr_2)(ldv_13_container);
      
#line 534 
      goto ldv_44780;
      case 12: 
#line 536 
      ;
      
#line 538 
      ldv_13_ldv_param_1_3 = (struct ethtool_wolinfo *)ldv_xmalloc_unknown_size(0UL);
      
#line 543 
      ldv_emg_wrapper_tulip_ethtool_set_wol_9(ldv_13_container,ldv_13_ldv_param_1_3);
      
#line 547 
      ldv_free((void *)ldv_13_ldv_param_1_3);
      
#line 550 
      goto ldv_44780;
      default: 
#line 552 
      ;
      
#line 552 
      __VERIFIER_assume(0);
    }
    ldv_44780: 
#line 555 
    ;
    
#line 555 
    ldv_free((void *)ldv_13_ldv_param_1_2);
    
#line 562 
    goto ldv_call_13;
  }
  else {
    
#line 570 
    __retres = (void *)0;
    
#line 570 
    goto return_label;
  }
  
#line 573 
  __retres = (void *)0;
  return_label: 
#line 573 
                return __retres;
}


#line 578  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/emg/environment_model.c"
_Bool ldv_emg_schedule_work(struct work_struct *arg0)
{
  _Bool __retres;
  struct work_struct *ldv_8_work_struct;
  int tmp;
  
#line 585 
  tmp = ldv_undef_int();
  
#line 585 
  if (tmp != 0) {
    
#line 587 
    ldv_8_work_struct = arg0;
    
#line 591 
    if (ldv_8_work_struct->func != (void (*)(struct work_struct *))0) 
      
#line 593 
      (*(ldv_8_work_struct->func))(ldv_8_work_struct); else ;
    
#line 598 
    __retres = (_Bool)1;
    
#line 598 
    goto return_label;
  }
  else {
    
#line 605 
    __retres = (_Bool)0;
    
#line 605 
    goto return_label;
  }
  return_label: 
#line 585 
                return __retres;
}


#line 615  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_initialization_1(void *arg0)
{
  void *__retres;
  int ldv_1_ret;
  int tmp;
  
#line 622 
  ldv_1_ret = ldv_emg_tulip_init();
  
#line 623 
  ldv_1_ret = ldv_post_init(ldv_1_ret);
  
#line 626 
  tmp = ldv_undef_int();
  
#line 626 
  if (tmp != 0) {
    
#line 628 
    __VERIFIER_assume(ldv_1_ret != 0);
    
#line 632 
    __retres = (void *)0;
    
#line 632 
    goto return_label;
  }
  else {
    
#line 636 
    __VERIFIER_assume(ldv_1_ret == 0);
    
#line 641 
    ldv_emg_tulip_cleanup();
    
#line 645 
    __retres = (void *)0;
    
#line 645 
    goto return_label;
  }
  
#line 648 
  __retres = (void *)0;
  return_label: 
#line 648 
                return __retres;
}


#line 653  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_instance_deregister_9_1(struct timer_list *arg0)
{
  int ret;
  struct ldv_struct_timer_scenario_15 *cf_arg_15;
  int tmp;
  
#line 656 
  tmp = ldv_undef_int();
  
#line 656 
  switch (tmp) {
    case 0: 
#line 657 
    ;
    
#line 658 
    ret = pthread_join(ldv_thread_15,(void **)0);
    
#line 659 
    __VERIFIER_assume(ret == 0);
    
#line 660 
    goto ldv_44807;
    default: 
#line 662 
    ;
    
#line 662 
    __VERIFIER_assume(0);
  }
  ldv_44807: 
#line 663 
  ;
  
#line 664 
  return;
}


#line 668  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_deregister_10_1(struct pci_driver *arg0)
{
  int ret;
  struct ldv_struct_pci_scenario_16 *cf_arg_16;
  int tmp;
  
#line 671 
  tmp = ldv_undef_int();
  
#line 671 
  switch (tmp) {
    case 0: 
#line 672 
    ;
    
#line 673 
    ret = pthread_join(ldv_thread_16,(void **)0);
    
#line 674 
    __VERIFIER_assume(ret == 0);
    
#line 675 
    goto ldv_44815;
    default: 
#line 677 
    ;
    
#line 677 
    __VERIFIER_assume(0);
  }
  ldv_44815: 
#line 678 
  ;
  
#line 679 
  return;
}


#line 683  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_pci_scenario_16(void *arg0)
{
  void *__retres;
  struct pci_dev *ldv_16_resource_1;
  struct pci_device_id *ldv_16_ldv_param_1_2;
  struct pm_message ldv_16_resource_0;
  int tmp_2;
  int tmp_3;
  
#line 688 
  struct pci_driver *ldv_16_container = ldv_emg_alias_tulip_driver_2;
  
#line 689 
  int ldv_16_ret = ldv_undef_int();
  
#line 692 
  struct ldv_struct_pci_scenario_16 *data = (struct ldv_struct_pci_scenario_16 *)arg0;
  
#line 696 
  ldv_16_ret = ldv_undef_int();
  
#line 699 
  if (data != (struct ldv_struct_pci_scenario_16 *)0) {
    
#line 700 
    ldv_16_container = data->arg0;
    
#line 701 
    ldv_free((void *)data);
  }
  else ;
  
#line 712 
  goto ldv_main_16;
  
#line 714 
  __retres = (void *)0;
  
#line 714 
  goto return_label;
  ldv_main_16: 
#line 717 
  ;
  
#line 720 
  tmp_2 = ldv_undef_int();
  
#line 720 
  if (tmp_2 != 0) {
    int tmp_1;
    
#line 722 
    ldv_16_ldv_param_1_2 = (struct pci_device_id *)ldv_xmalloc_unknown_size(0UL);
    
#line 727 
    ldv_pre_probe();
    
#line 729 
    ldv_16_ret = ldv_emg_wrapper_tulip_init_one_2(ldv_16_resource_1,ldv_16_ldv_param_1_2);
    
#line 731 
    ldv_16_ret = ldv_post_probe(ldv_16_ret);
    
#line 735 
    ldv_free((void *)ldv_16_ldv_param_1_2);
    
#line 738 
    tmp_1 = ldv_undef_int();
    
#line 738 
    if (tmp_1 != 0) {
      
#line 740 
      __VERIFIER_assume(ldv_16_ret == 0);
      
#line 747 
      goto ldv_call_16;
    }
    else {
      
#line 751 
      __VERIFIER_assume(ldv_16_ret != 0);
      
#line 758 
      goto ldv_main_16;
    }
  }
  else {
    
#line 770 
    __retres = (void *)0;
    
#line 770 
    goto return_label;
  }
  
#line 773 
  __retres = (void *)0;
  
#line 773 
  goto return_label;
  ldv_call_16: 
#line 776 
  ;
  
#line 779 
  tmp_3 = ldv_undef_int();
  
#line 779 
  switch (tmp_3) {
    case 1: 
#line 780 
    ;
    
#line 789 
    goto ldv_call_16;
    case 2: 
#line 792 
    ;
    
#line 795 
    ldv_16_ret = ldv_emg_wrapper_tulip_suspend_3(ldv_16_resource_1,ldv_16_resource_0);
    
#line 797 
    ldv_16_ret = ldv_filter_err_code(ldv_16_ret);
    
#line 801 
    if (ldv_16_container->suspend_late != (int (*)(struct pci_dev *, pm_message_t ))0) {
      
#line 803 
      ldv_16_ret = (*(ldv_16_container->suspend_late))(ldv_16_resource_1,ldv_16_resource_0);
      
#line 805 
      ldv_16_ret = ldv_filter_err_code(ldv_16_ret);
    }
    else 
#line 807 
         ldv_16_ret = ldv_undef_int();
    
#line 812 
    if (ldv_16_container->resume_early != (int (*)(struct pci_dev *))0) 
      
#line 814 
      (*(ldv_16_container->resume_early))(ldv_16_resource_1); else ;
    
#line 820 
    ldv_emg_wrapper_tulip_resume_5(ldv_16_resource_1);
    
#line 827 
    goto ldv_call_16;
    case 3: 
#line 830 
    ;
    
#line 832 
    if (ldv_16_container->shutdown != (void (*)(struct pci_dev *))0) 
      
#line 834 
      (*(ldv_16_container->shutdown))(ldv_16_resource_1); else ;
    
#line 840 
    ldv_emg_wrapper_tulip_remove_one_4(ldv_16_resource_1);
    
#line 847 
    goto ldv_main_16;
    default: 
#line 850 
    ;
    
#line 850 
    __VERIFIER_assume(0);
  }
  
#line 853 
  __retres = (void *)0;
  return_label: 
#line 853 
                return __retres;
}


#line 858  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/emg/environment_model.c"
int ldv_emg_register_netdev(struct net_device *arg0)
{
  int __retres;
  struct net_device *ldv_11_netdev;
  int tmp_3;
  
#line 862 
  int ldv_11_ret = ldv_undef_int();
  
#line 865 
  ldv_11_ret = ldv_undef_int();
  
#line 868 
  tmp_3 = ldv_undef_int();
  
#line 868 
  if (tmp_3 != 0) {
    int tmp_1;
    
#line 870 
    ldv_11_netdev = arg0;
    
#line 875 
    ldv_11_ret = ldv_emg_wrapper_tulip_open_2(ldv_11_netdev);
    
#line 878 
    tmp_1 = ldv_undef_int();
    
#line 878 
    if (tmp_1 != 0) {
      
#line 880 
      __VERIFIER_assume(ldv_11_ret == 0);
      
#line 884 
      ldv_dispatch_register_11_4(ldv_11_netdev);
      
#line 888 
      __retres = 0;
      
#line 888 
      goto return_label;
    }
    else {
      int tmp_0;
      
#line 895 
      __VERIFIER_assume(ldv_11_ret != 0);
      
#line 896 
      ldv_failed_register_netdev();
      
#line 897 
      tmp_0 = ldv_undef_int_negative();
      
#line 897 
      __retres = tmp_0;
      
#line 897 
      goto return_label;
    }
  }
  else {
    int tmp_2;
    
#line 905 
    ldv_failed_register_netdev();
    
#line 906 
    tmp_2 = ldv_undef_int_negative();
    
#line 906 
    __retres = tmp_2;
    
#line 906 
    goto return_label;
  }
  return_label: 
#line 868 
                return __retres;
}


#line 916  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_emg_unregister_netdev(struct net_device *arg0)
{
  struct net_device *ldv_6_netdev;
  
#line 922 
  ldv_6_netdev = arg0;
  
#line 927 
  ldv_emg_wrapper_tulip_close_2(ldv_6_netdev);
  
#line 931 
  ldv_dispatch_deregister_6_1(ldv_6_netdev);
  
#line 935 
  goto return_label;
  return_label: 
#line 937 
                return;
}


#line 942  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_emg_free_irq(unsigned int arg0, void *arg1)
{
  int ldv_3_line;
  
#line 948 
  ldv_3_line = (int)arg0;
  
#line 952 
  ldv_dispatch_irq_deregister_3_1(ldv_3_line);
  
#line 956 
  goto return_label;
  return_label: 
#line 958 
                return;
}


#line 963  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_instance_register_4_3(struct timer_list *arg0)
{
  int ret;
  struct ldv_struct_timer_scenario_15 *cf_arg_15;
  int tmp;
  
#line 966 
  tmp = ldv_undef_int();
  
#line 966 
  switch (tmp) {
    case 0: 
#line 967 
    ;
    
#line 968 
    cf_arg_15 = (struct ldv_struct_timer_scenario_15 *)ldv_xmalloc(16UL);
    
#line 969 
    cf_arg_15->arg0 = arg0;
    
#line 970 
    ret = pthread_create(& ldv_thread_15,(pthread_attr_t const *)0,& ldv_timer_scenario_15,(void *)cf_arg_15);
    
#line 971 
    __VERIFIER_assume(ret == 0);
    
#line 972 
    goto ldv_44852;
    default: 
#line 974 
    ;
    
#line 974 
    __VERIFIER_assume(0);
  }
  ldv_44852: 
#line 975 
  ;
  
#line 976 
  return;
}


#line 980  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_deregister_6_1(struct net_device *arg0)
{
  int ret;
  struct ldv_struct_random_allocationless_scenario_13 *cf_arg_13;
  int tmp;
  
#line 983 
  tmp = ldv_undef_int();
  
#line 983 
  switch (tmp) {
    case 0: 
#line 984 
    ;
    
#line 985 
    ret = pthread_join(ldv_thread_13,(void **)0);
    
#line 986 
    __VERIFIER_assume(ret == 0);
    
#line 987 
    goto ldv_44860;
    default: 
#line 989 
    ;
    
#line 989 
    __VERIFIER_assume(0);
  }
  ldv_44860: 
#line 990 
  ;
  
#line 991 
  return;
}


#line 995  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_emg_free_netdev(struct net_device *arg0)
{
  struct net_device *ldv_2_netdev;
  
#line 1001 
  ldv_2_netdev = arg0;
  
#line 1002 
  ldv_free((void *)ldv_2_netdev);
  
#line 1006 
  goto return_label;
  return_label: 
#line 1008 
                return;
}


#line 1013  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_interrupt_scenario_14(void *arg0)
{
  void *__retres;
  enum irqreturn ldv_14_ret_val;
  int ldv_14_line;
  void *ldv_14_data;
  enum irqreturn (*ldv_14_thread)(int , void *);
  int tmp;
  
#line 1019 
  enum irqreturn (*ldv_14_callback)(int , void *) = & tulip_interrupt;
  
#line 1022 
  struct ldv_struct_interrupt_scenario_14 *data = (struct ldv_struct_interrupt_scenario_14 *)arg0;
  
#line 1027 
  if (data != (struct ldv_struct_interrupt_scenario_14 *)0) {
    
#line 1028 
    ldv_14_line = data->arg0;
    
#line 1029 
    ldv_14_callback = data->arg1;
    
#line 1030 
    ldv_14_thread = data->arg2;
    
#line 1031 
    ldv_14_data = data->arg3;
    
#line 1032 
    ldv_free((void *)data);
  }
  else ;
  
#line 1038 
  ldv_switch_to_interrupt_context();
  
#line 1040 
  ldv_14_ret_val = tulip_interrupt(ldv_14_line,ldv_14_data);
  
#line 1042 
  ldv_switch_to_process_context();
  
#line 1045 
  tmp = ldv_undef_int();
  
#line 1045 
  if (tmp != 0) {
    
#line 1047 
    __VERIFIER_assume(ldv_14_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    
#line 1051 
    if (ldv_14_thread != (enum irqreturn (*)(int , void *))0) 
#line 1053 
                                                              (*ldv_14_thread)(ldv_14_line,ldv_14_data); else ;
  }
  else 
#line 1060 
       __VERIFIER_assume(ldv_14_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  
#line 1069 
  __retres = (void *)0;
  
#line 1069 
  goto return_label;
  
#line 1071 
  __retres = (void *)0;
  return_label: 
#line 1071 
                return __retres;
}


#line 1076  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/dec/tulip/tulip.ko/linux:concurrency safety/emg/environment_model.c"
int ldv_emg_mod_timer(struct timer_list *arg0, unsigned long arg1)
{
  int __retres;
  struct timer_list *ldv_4_timer_list;
  int tmp_0;
  
#line 1083 
  tmp_0 = ldv_undef_int();
  
#line 1083 
  if (tmp_0 != 0) {
    
#line 1085 
    ldv_4_timer_list = arg0;
    
#line 1089 
    ldv_dispatch_instance_register_4_3(ldv_4_timer_list);
    
#line 1093 
    __retres = 0;
    
#line 1093 
    goto return_label;
  }
  else {
    int tmp;
    
#line 1100 
    tmp = ldv_undef_int_negative();
    
#line 1100 
    __retres = tmp;
    
#line 1100 
    goto return_label;
  }
  return_label: 
#line 1083 
                return __retres;
}


