<?xml version="1.0"?>
<!DOCTYPE benchmark PUBLIC "+//IDN sosy-lab.org//DTD BenchExec benchmark 1.0//EN" "http://www.sosy-lab.org/benchexec/benchmark-1.0.dtd">
<benchmark tool="cpachecker" timelimit="900" hardtimelimit="1000" memlimit="8000 MB" cpuCores="2">
  <!-- This file contains regression tests from the LDV project.
       It expects the git repository git@bitbucket.org:dbeyer/ldv-benchmarks.git
       to be checked out at test/programs/ldv-benchmarks. -->

  <option name="-setprop">statistics.memory=true</option>
  <option name="-heap">10000M</option>
  <option name="-setprop">counterexample.export.exportWitness=false</option>
  <option name="-setprop">cpa.thread.skipTheSameThread=true</option>
  <option name="-setprop">cpa.arg.export=false</option>
  <option name="-setprop">counterexample.export.exportAsSource=false</option>
  <option name="-setprop">cpa.lock.refinement=false</option>


  <propertyfile>./data-race.prp</propertyfile>
  
  <tasks name="DeviceDrivers64">
    <includesfile>Tasks.set</includesfile>
  </tasks>

  <rundefinition name="base">
    <option name="-lockator-linux-without-shared"/>
    <option name="-setprop">cpa.predicate.refinement.predicateBasisStrategy=subgraph</option>
    <option name="-setprop">cpa=cpa.arg.ARGCPA</option>
    <option name="-setprop">CompositeCPA.cpas=cpa.location.LocationCPA,cpa.callstack.CallstackCPA,cpa.thread.ThreadCPA,cpa.lock.LockCPA,cpa.functionpointer.FunctionPointerCPA</option>
    <option name="-setprop">cpa.usage.refinement.refinementChain=IdentifierIterator,PointIterator,UsageIterator,SinglePathIterator</option>
  </rundefinition>

  <rundefinition name="with-bam">
    <option name="-lockator-linux-without-shared"/>
    <option name="-setprop">cpa.predicate.refinement.predicateBasisStrategy=subgraph</option>
    <option name="-setprop">CompositeCPA.cpas=cpa.location.LocationCPA,cpa.callstack.CallstackCPA,cpa.thread.ThreadCPA,cpa.lock.LockCPA,cpa.functionpointer.FunctionPointerCPA</option>
    <option name="-setprop">cpa.usage.refinement.refinementChain=IdentifierIterator,PointIterator,UsageIterator,SinglePathIterator</option>
  </rundefinition>

  <rundefinition name="with-predicate">
    <option name="-lockator-linux-without-shared"/>
    <option name="-setprop">cpa.predicate.refinement.predicateBasisStrategy=subgraph</option>
    <option name="-setprop">cpa=cpa.arg.ARGCPA</option>
    <option name="-setprop">CompositeCPA.cpas=cpa.location.LocationCPA,cpa.callstack.CallstackCPA,cpa.thread.ThreadCPA,cpa.lock.LockCPA,cpa.predicate.PredicateCPA,cpa.functionpointer.FunctionPointerCPA</option>
    <option name="-setprop">cpa.usage.refinement.refinementChain=IdentifierIterator,PointIterator,UsageIterator,SinglePathIterator,PredicateRefiner</option>
  </rundefinition>

  <rundefinition name="both">
    <option name="-lockator-linux-without-shared"/>
    <option name="-setprop">cpa.predicate.refinement.predicateBasisStrategy=subgraph</option>
  </rundefinition>

  <rundefinition name="cex-check">
    <option name="-lockator-linux-without-shared"/>
    <option name="-setprop">cpa.predicate.refinement.predicateBasisStrategy=subgraph</option>
    <option name="-setprop">cegar.maxIterations=1</option>
    <option name="-setprop">cpa=cpa.arg.ARGCPA</option>
    <option name="-setprop">CompositeCPA.cpas=cpa.location.LocationCPA,cpa.callstack.CallstackCPA,cpa.thread.ThreadCPA,cpa.lock.LockCPA,cpa.predicate.PredicateCPA,cpa.functionpointer.FunctionPointerCPA</option>
    <option name="-setprop">cpa.usage.refinement.refinementChain=IdentifierIterator,PointIterator,UsageIterator,SinglePathIterator,PredicateRefiner</option>
  </rundefinition>

  <rundefinition name="cex-check-bam">
    <option name="-lockator-linux-without-shared"/>
    <option name="-setprop">cpa.predicate.refinement.predicateBasisStrategy=subgraph</option>
    <option name="-setprop">cegar.maxIterations=1</option>
    <option name="-setprop">CompositeCPA.cpas=cpa.location.LocationCPA,cpa.callstack.CallstackCPA,cpa.thread.ThreadCPA,cpa.lock.LockCPA,cpa.predicate.BAMPredicateCPA,cpa.functionpointer.FunctionPointerCPA</option>
    <option name="-setprop">cpa.usage.refinement.refinementChain=IdentifierIterator,PointIterator,UsageIterator,SinglePathIterator,PredicateRefiner</option>
  </rundefinition>
</benchmark>
