/* Generated by Frama-C */

#line 20  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/int-ll64.h"
typedef unsigned char __u8;

#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/int-ll64.h"
typedef short __s16;

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/int-ll64.h"
typedef unsigned short __u16;

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/int-ll64.h"
typedef int __s32;

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/int-ll64.h"
typedef unsigned int __u32;

#line 30  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/int-ll64.h"
typedef unsigned long long __u64;

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef signed char s8;

#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef unsigned char u8;

#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef short s16;

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef unsigned short u16;

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef int s32;

#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef unsigned int u32;

#line 24  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef long long s64;

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef unsigned long long u64;

#line 14  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef long __kernel_long_t;

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef unsigned long __kernel_ulong_t;

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_pid_t;

#line 48  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_uid32_t;

#line 49  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_gid32_t;

#line 71  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef __kernel_ulong_t __kernel_size_t;

#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_ssize_t;

#line 87  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_loff_t;

#line 88  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_time_t;

#line 89  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_clock_t;

#line 90  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_timer_t;

#line 91  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_clockid_t;

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/types.h"
typedef __u16 __le16;

#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/types.h"
typedef __u16 __be16;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/types.h"
typedef __u32 __le32;

#line 35  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/types.h"
typedef __u32 __be32;

#line 40  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/types.h"
typedef __u32 __wsum;

#line 12  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __u32 __kernel_dev_t;

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_dev_t dev_t;

#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef unsigned short umode_t;

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_pid_t pid_t;

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_clockid_t clockid_t;

#line 29  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef _Bool bool;

#line 31  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_uid32_t uid_t;

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_gid32_t gid_t;

#line 45  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_loff_t loff_t;

#line 54  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_size_t size_t;

#line 59  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_ssize_t ssize_t;

#line 69  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_time_t time_t;

#line 102  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __s32 int32_t;

#line 106  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __u8 uint8_t;

#line 108  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __u32 uint32_t;

#line 111  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __u64 uint64_t;

#line 133  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef unsigned long sector_t;

#line 134  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef unsigned long blkcnt_t;

#line 152  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef u64 dma_addr_t;

#line 157  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef unsigned int gfp_t;

#line 158  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef unsigned int fmode_t;

#line 159  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef unsigned int oom_flags_t;

#line 177  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int counter ;
};

#line 177  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;

#line 182  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   long counter ;
};

#line 182  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;

#line 183  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};

#line 188 
struct hlist_node;

#line 188  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
struct hlist_head {
   struct hlist_node *first ;
};

#line 192  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};

#line 203  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
struct callback_head {
   struct callback_head *next ;
   void (*func)(struct callback_head *) ;
};

#line 14  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_uap_cmd.c.aux"
struct kernel_symbol {
   unsigned long value ;
   char const *name ;
};

#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/export.h"
struct module;

#line 67  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/page_types.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/ptrace.h"
struct __anonstruct_9 {
   unsigned int a ;
   unsigned int b ;
};

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/ptrace.h"
struct __anonstruct_10 {
   u16 limit0 ;
   u16 base0 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))) base1 : 8 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) type : 4 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) s : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) dpl : 2 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) p : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) limit : 4 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) avl : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) l : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) d : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) g : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))) base2 : 8 ;
};

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/ptrace.h"
union __anonunion_8 {
   struct __anonstruct_9 __anonCompField___anonunion_8_4 ;
   struct __anonstruct_10 __anonCompField___anonunion_8_5 ;
};

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/ptrace.h"
struct desc_struct {
   union __anonunion_8 __anonCompField_desc_struct_6 ;
};

#line 12  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pteval_t;

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;

#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;

#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_64_types.h"
struct __anonstruct_pte_t_11 {
   pteval_t pte ;
};

#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_64_types.h"
typedef struct __anonstruct_pte_t_11 pte_t;

#line 20  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_64_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};

#line 218  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;

#line 220  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_12 {
   pgdval_t pgd ;
};

#line 220  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_12 pgd_t;

#line 361 
struct page;

#line 361  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_types.h"
typedef struct page *pgtable_t;

#line 372 
struct file;

#line 385 
struct seq_file;

#line 423 
struct thread_struct;

#line 425 
struct mm_struct;

#line 426 
struct task_struct;

#line 427 
struct cpumask;

#line 20  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/spinlock_types.h"
struct qspinlock {
   atomic_t val ;
};

#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/qspinlock_types.h"
typedef struct qspinlock arch_spinlock_t;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/qspinlock_types.h"
struct qrwlock {
   atomic_t cnts ;
   arch_spinlock_t lock ;
};

#line 14  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/qrwlock_types.h"
typedef struct qrwlock arch_rwlock_t;

#line 131  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/init.h"
typedef void (*ctor_fn_t)(void);

#line 48  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dynamic_debug.h"
struct device;

#line 54 
struct net_device;

#line 420  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/printk.h"
struct file_operations;

#line 432 
struct completion;

#line 555  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/percpu.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};

#line 102  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bug.h"
struct timespec;

#line 103 
struct compat_timespec;

#line 104  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bug.h"
struct __anonstruct_futex_16 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};

#line 104  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bug.h"
struct __anonstruct_nanosleep_17 {
   clockid_t clockid ;
   struct timespec *rmtp ;
   struct compat_timespec *compat_rmtp ;
   u64 expires ;
};

#line 104 
struct pollfd;

#line 104  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bug.h"
struct __anonstruct_poll_18 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};

#line 104  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bug.h"
union __anonunion_15 {
   struct __anonstruct_futex_16 futex ;
   struct __anonstruct_nanosleep_17 nanosleep ;
   struct __anonstruct_poll_18 poll ;
};

#line 104  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bug.h"
struct restart_block {
   long (*fn)(struct restart_block *) ;
   union __anonunion_15 __anonCompField_restart_block_7 ;
};

#line 127  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/uapi/asm/vm86.h"
struct kernel_vm86_regs {
   struct pt_regs pt ;
   unsigned short es ;
   unsigned short __esh ;
   unsigned short ds ;
   unsigned short __dsh ;
   unsigned short fs ;
   unsigned short __fsh ;
   unsigned short gs ;
   unsigned short __gsh ;
};

#line 79  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/vm86.h"
union __anonunion_19 {
   struct pt_regs *regs ;
   struct kernel_vm86_regs *vm86 ;
};

#line 79  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/vm86.h"
struct math_emu_info {
   long ___orig_eip ;
   union __anonunion_19 __anonCompField_math_emu_info_8 ;
};

#line 328  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bitmap.h"
struct cpumask {
   unsigned long bits[128U] ;
};

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cpumask.h"
typedef struct cpumask cpumask_t;

#line 652  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cpumask.h"
typedef struct cpumask *cpumask_var_t;

#line 260  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/special_insns.h"
struct fregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_29 {
   u64 rip ;
   u64 rdp ;
};

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_30 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
union __anonunion_28 {
   struct __anonstruct_29 __anonCompField___anonunion_28_12 ;
   struct __anonstruct_30 __anonCompField___anonunion_28_13 ;
};

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
union __anonunion_31 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
struct fxregs_state {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_28 __anonCompField_fxregs_state_14 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_31 __anonCompField_fxregs_state_15 ;
};

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
struct swregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};

#line 155  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
struct xstate_header {
   u64 xfeatures ;
   u64 xcomp_bv ;
   u64 reserved[6U] ;
};

#line 161  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
struct xregs_state {
   struct fxregs_state i387 ;
   struct xstate_header header ;
   u8 __reserved[464U] ;
};

#line 179  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
union fpregs_state {
   struct fregs_state fsave ;
   struct fxregs_state fxsave ;
   struct swregs_state soft ;
   struct xregs_state xsave ;
   u8 __padding[4096U] ;
};

#line 194  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
struct fpu {
   unsigned int last_cpu ;
   unsigned char fpstate_active ;
   unsigned char fpregs_active ;
   unsigned char counter ;
   union fpregs_state state ;
};

#line 170  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/processor.h"
struct seq_operations;

#line 369 
struct perf_event;

#line 370  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp0 ;
   unsigned long sp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fs ;
   unsigned long gs ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_nr ;
   unsigned long error_code ;
   unsigned long *io_bitmap_ptr ;
   unsigned long iopl ;
   unsigned int io_bitmap_max ;
   struct fpu fpu ;
};

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/atomic-long.h"
typedef atomic64_t atomic_long_t;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bottom_half.h"
struct lockdep_map;

#line 55  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/debug_locks.h"
struct stack_trace {
   unsigned int nr_entries ;
   unsigned int max_entries ;
   unsigned long *entries ;
   int skip ;
};

#line 28  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/stacktrace.h"
struct lockdep_subclass_key {
   char __one_byte ;
};

#line 53  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockdep.h"
struct lock_class_key {
   struct lockdep_subclass_key subkeys[8U] ;
};

#line 59  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockdep.h"
struct lock_class {
   struct list_head hash_entry ;
   struct list_head lock_entry ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct stack_trace usage_traces[13U] ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   unsigned int version ;
   unsigned long ops ;
   char const *name ;
   int name_version ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};

#line 144  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache[2U] ;
   char const *name ;
   int cpu ;
   unsigned long ip ;
};

#line 205  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(13))) class_idx : 13 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) irq_context : 2 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) trylock : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) read : 2 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) check : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) hardirqs_off : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(12))) references : 12 ;
   unsigned int pin_count ;
};

#line 546  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockdep.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;

#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock_types.h"
struct __anonstruct_35 {
   u8 __padding[24U] ;
   struct lockdep_map dep_map ;
};

#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock_types.h"
union __anonunion_34 {
   struct raw_spinlock rlock ;
   struct __anonstruct_35 __anonCompField___anonunion_34_17 ;
};

#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion_34 __anonCompField_spinlock_18 ;
};

#line 76  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rwlock_types.h"
struct __anonstruct_rwlock_t_36 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rwlock_types.h"
typedef struct __anonstruct_rwlock_t_36 rwlock_t;

#line 59  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/jump_label.h"
struct jump_entry;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/jump_label.h"
typedef u64 jump_label_t;

#line 35  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/jump_label.h"
struct jump_entry {
   jump_label_t code ;
   jump_label_t target ;
   jump_label_t key ;
};

#line 41  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.h"
struct mutex;

#line 135  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/uapi/asm/stat.h"
struct seqcount {
   unsigned int sequence ;
   struct lockdep_map dep_map ;
};

#line 52  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/seqlock.h"
typedef struct seqcount seqcount_t;

#line 404  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/seqlock.h"
struct __anonstruct_seqlock_t_45 {
   struct seqcount seqcount ;
   spinlock_t lock ;
};

#line 404  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/seqlock.h"
typedef struct __anonstruct_seqlock_t_45 seqlock_t;

#line 598  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/seqlock.h"
struct timespec {
   __kernel_time_t tv_sec ;
   long tv_nsec ;
};

#line 83  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/highuid.h"
struct user_namespace;

#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uidgid.h"
struct __anonstruct_kuid_t_46 {
   uid_t val ;
};

#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uidgid.h"
typedef struct __anonstruct_kuid_t_46 kuid_t;

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uidgid.h"
struct __anonstruct_kgid_t_47 {
   gid_t val ;
};

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uidgid.h"
typedef struct __anonstruct_kgid_t_47 kgid_t;

#line 139  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uidgid.h"
struct kstat {
   u64 ino ;
   dev_t dev ;
   umode_t mode ;
   unsigned int nlink ;
   kuid_t uid ;
   kgid_t gid ;
   dev_t rdev ;
   loff_t size ;
   struct timespec atime ;
   struct timespec mtime ;
   struct timespec ctime ;
   unsigned long blksize ;
   unsigned long long blocks ;
};

#line 36  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/stat.h"
struct vm_area_struct;

#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/wait.h"
struct __wait_queue_head {
   spinlock_t lock ;
   struct list_head task_list ;
};

#line 43  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/wait.h"
typedef struct __wait_queue_head wait_queue_head_t;

#line 95  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/nodemask.h"
struct __anonstruct_nodemask_t_48 {
   unsigned long bits[16U] ;
};

#line 95  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/nodemask.h"
typedef struct __anonstruct_nodemask_t_48 nodemask_t;

#line 13  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/osq_lock.h"
struct optimistic_spin_queue {
   atomic_t tail ;
};

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/osq_lock.h"
struct mutex {
   atomic_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct task_struct *owner ;
   void *magic ;
   struct lockdep_map dep_map ;
};

#line 67  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   void *magic ;
};

#line 193 
struct rw_semaphore;

#line 194  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mutex.h"
struct rw_semaphore {
   long count ;
   struct list_head wait_list ;
   raw_spinlock_t wait_lock ;
   struct optimistic_spin_queue osq ;
   struct task_struct *owner ;
   struct lockdep_map dep_map ;
};

#line 172  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rwsem.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};

#line 437  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/jiffies.h"
union ktime {
   s64 tv64 ;
};

#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ktime.h"
typedef union ktime ktime_t;

#line 296  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rcupdate.h"
struct notifier_block;

#line 1121  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rcupdate.h"
struct timer_list {
   struct hlist_node entry ;
   unsigned long expires ;
   void (*function)(unsigned long ) ;
   unsigned long data ;
   u32 flags ;
   int slack ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
   struct lockdep_map lockdep_map ;
};

#line 238  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timer.h"
struct hrtimer;

#line 239 
enum hrtimer_restart;

#line 240  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timer.h"
struct rb_node {
   unsigned long __rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
};

#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};

#line 837  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/sysctl.h"
struct ctl_table;

#line 838 
struct nsproxy;

#line 839 
struct ctl_table_root;

#line 840 
struct ctl_table_header;

#line 841 
struct ctl_dir;

#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
typedef int proc_handler(struct ctl_table *, int , void *, size_t *, loff_t *);

#line 57  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct ctl_table_poll {
   atomic_t event ;
   wait_queue_head_t wait ;
};

#line 96  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct ctl_table {
   char const *procname ;
   void *data ;
   int maxlen ;
   umode_t mode ;
   struct ctl_table *child ;
   proc_handler *proc_handler ;
   struct ctl_table_poll *poll ;
   void *extra1 ;
   void *extra2 ;
};

#line 117  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct ctl_node {
   struct rb_node node ;
   struct ctl_table_header *header ;
};

#line 122  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct __anonstruct_50 {
   struct ctl_table *ctl_table ;
   int used ;
   int count ;
   int nreg ;
};

#line 122  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
union __anonunion_49 {
   struct __anonstruct_50 __anonCompField___anonunion_49_19 ;
   struct callback_head rcu ;
};

#line 122 
struct ctl_table_set;

#line 122  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct ctl_table_header {
   union __anonunion_49 __anonCompField_ctl_table_header_20 ;
   struct completion *unregistering ;
   struct ctl_table *ctl_table_arg ;
   struct ctl_table_root *root ;
   struct ctl_table_set *set ;
   struct ctl_dir *parent ;
   struct ctl_node *node ;
};

#line 143  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct ctl_dir {
   struct ctl_table_header header ;
   struct rb_root root ;
};

#line 149  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct ctl_table_set {
   int (*is_seen)(struct ctl_table_set *) ;
   struct ctl_dir dir ;
};

#line 154  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct ctl_table_root {
   struct ctl_table_set default_set ;
   struct ctl_table_set *(*lookup)(struct ctl_table_root *, struct nsproxy *) ;
   int (*permissions)(struct ctl_table_header *, struct ctl_table *) ;
};

#line 259  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timer.h"
struct workqueue_struct;

#line 260 
struct work_struct;

#line 54  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct *) ;
   struct lockdep_map lockdep_map ;
};

#line 107  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
   struct workqueue_struct *wq ;
   int cpu ;
};

#line 51  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/notifier.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block *, unsigned long , void *) ;
   struct notifier_block *next ;
   int priority ;
};

#line 58  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm.h"
struct pm_message {
   int event ;
};

#line 64  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm.h"
typedef struct pm_message pm_message_t;

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device *) ;
   void (*complete)(struct device *) ;
   int (*suspend)(struct device *) ;
   int (*resume)(struct device *) ;
   int (*freeze)(struct device *) ;
   int (*thaw)(struct device *) ;
   int (*poweroff)(struct device *) ;
   int (*restore)(struct device *) ;
   int (*suspend_late)(struct device *) ;
   int (*resume_early)(struct device *) ;
   int (*freeze_late)(struct device *) ;
   int (*thaw_early)(struct device *) ;
   int (*poweroff_late)(struct device *) ;
   int (*restore_early)(struct device *) ;
   int (*suspend_noirq)(struct device *) ;
   int (*resume_noirq)(struct device *) ;
   int (*freeze_noirq)(struct device *) ;
   int (*thaw_noirq)(struct device *) ;
   int (*poweroff_noirq)(struct device *) ;
   int (*restore_noirq)(struct device *) ;
   int (*runtime_suspend)(struct device *) ;
   int (*runtime_resume)(struct device *) ;
   int (*runtime_idle)(struct device *) ;
};

#line 320 
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
};

#line 327 
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_AUTOSUSPEND = 3,
    RPM_REQ_RESUME = 4
};

#line 335 
struct wakeup_source;

#line 336 
struct wake_irq;

#line 338  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm.h"
struct pm_subsys_data {
   spinlock_t lock ;
   unsigned int refcount ;
   struct list_head clock_list ;
};

#line 553 
struct dev_pm_qos;

#line 553  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) can_wakeup : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) async_suspend : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_prepared : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_suspended : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_noirq_suspended : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_late_suspended : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ignore_children : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) early_init : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) direct_complete : 1 ;
   spinlock_t lock ;
   struct list_head entry ;
   struct completion completion ;
   struct wakeup_source *wakeup ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) wakeup_path : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) syscore : 1 ;
   struct timer_list suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   struct wake_irq *wakeirq ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))) disable_depth : 3 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) idle_notification : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) request_pending : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) deferred_resume : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) run_wake : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) runtime_auto : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) no_callbacks : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) irq_safe : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) use_autosuspend : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) timer_autosuspends : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) memalloc_noio : 1 ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   int autosuspend_delay ;
   unsigned long last_busy ;
   unsigned long active_jiffies ;
   unsigned long suspended_jiffies ;
   unsigned long accounting_timestamp ;
   struct pm_subsys_data *subsys_data ;
   void (*set_latency_tolerance)(struct device *, s32 ) ;
   struct dev_pm_qos *qos ;
};

#line 615  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm.h"
struct dev_pm_domain {
   struct dev_pm_ops ops ;
   void (*detach)(struct device *, bool ) ;
   int (*activate)(struct device *) ;
   void (*sync)(struct device *) ;
   void (*dismiss)(struct device *) ;
};

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/mmu.h"
struct ldt_struct;

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/mmu.h"
struct __anonstruct_mm_context_t_115 {
   struct ldt_struct *ldt ;
   unsigned short ia32_compat ;
   struct mutex lock ;
   void *vdso ;
   atomic_t perf_rdpmc_allowed ;
};

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/mmu.h"
typedef struct __anonstruct_mm_context_t_115 mm_context_t;

#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/xen/features.h"
struct bio_vec;

#line 1281  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mmzone.h"
struct llist_node;

#line 64  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/llist.h"
struct llist_node {
   struct llist_node *next ;
};

#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kmod.h"
struct cred;

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/elf.h"
struct inode;

#line 58  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/uprobes.h"
struct arch_uprobe_task {
   unsigned long saved_scratch_register ;
   unsigned int saved_trap_nr ;
   unsigned int saved_tf ;
};

#line 66 
enum uprobe_task_state {
    UTASK_RUNNING = 0,
    UTASK_SSTEP = 1,
    UTASK_SSTEP_ACK = 2,
    UTASK_SSTEP_TRAPPED = 3
};

#line 73  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/uprobes.h"
struct __anonstruct_148 {
   struct arch_uprobe_task autask ;
   unsigned long vaddr ;
};

#line 73  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/uprobes.h"
struct __anonstruct_149 {
   struct callback_head dup_xol_work ;
   unsigned long dup_xol_addr ;
};

#line 73  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/uprobes.h"
union __anonunion_147 {
   struct __anonstruct_148 __anonCompField___anonunion_147_33 ;
   struct __anonstruct_149 __anonCompField___anonunion_147_34 ;
};

#line 73 
struct uprobe;

#line 73 
struct return_instance;

#line 73  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/uprobes.h"
struct uprobe_task {
   enum uprobe_task_state state ;
   union __anonunion_147 __anonCompField_uprobe_task_35 ;
   struct uprobe *active_uprobe ;
   unsigned long xol_vaddr ;
   struct return_instance *return_instances ;
   unsigned int depth ;
};

#line 94  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uprobes.h"
struct xol_area;

#line 95  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uprobes.h"
struct uprobes_state {
   struct xol_area *xol_area ;
};

#line 133 
struct address_space;

#line 134 
struct mem_cgroup;

#line 31  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
typedef void compound_page_dtor(struct page *);

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
union __anonunion_150 {
   struct address_space *mapping ;
   void *s_mem ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
union __anonunion_152 {
   unsigned long index ;
   void *freelist ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct __anonstruct_156 {
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(16))) inuse : 16 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(15))) objects : 15 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) frozen : 1 ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
union __anonunion_155 {
   atomic_t _mapcount ;
   struct __anonstruct_156 __anonCompField___anonunion_155_38 ;
   int units ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct __anonstruct_154 {
   union __anonunion_155 __anonCompField___anonstruct_154_39 ;
   atomic_t _count ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
union __anonunion_153 {
   unsigned long counters ;
   struct __anonstruct_154 __anonCompField___anonunion_153_40 ;
   unsigned int active ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct __anonstruct_151 {
   union __anonunion_152 __anonCompField___anonstruct_151_37 ;
   union __anonunion_153 __anonCompField___anonstruct_151_41 ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct __anonstruct_158 {
   struct page *next ;
   int pages ;
   int pobjects ;
};

#line 32 
struct slab;

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct __anonstruct_159 {
   compound_page_dtor *compound_dtor ;
   unsigned long compound_order ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
union __anonunion_157 {
   struct list_head lru ;
   struct __anonstruct_158 __anonCompField___anonunion_157_43 ;
   struct slab *slab_page ;
   struct callback_head callback_head ;
   struct __anonstruct_159 __anonCompField___anonunion_157_44 ;
   pgtable_t pmd_huge_pte ;
};

#line 32 
struct kmem_cache;

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
union __anonunion_160 {
   unsigned long private ;
   spinlock_t *ptl ;
   struct kmem_cache *slab_cache ;
   struct page *first_page ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct page {
   unsigned long flags ;
   union __anonunion_150 __anonCompField_page_36 ;
   struct __anonstruct_151 __anonCompField_page_42 ;
   union __anonunion_157 __anonCompField_page_45 ;
   union __anonunion_160 __anonCompField_page_46 ;
   struct mem_cgroup *mem_cgroup ;
};

#line 172  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct page_frag {
   struct page *page ;
   __u32 offset ;
   __u32 size ;
};

#line 257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct __anonstruct_shared_161 {
   struct rb_node rb ;
   unsigned long rb_subtree_last ;
};

#line 257 
struct anon_vma;

#line 257 
struct vm_operations_struct;

#line 257 
struct mempolicy;

#line 257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct vm_area_struct {
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   struct vm_area_struct *vm_prev ;
   struct rb_node vm_rb ;
   unsigned long rb_subtree_gap ;
   struct mm_struct *vm_mm ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct __anonstruct_shared_161 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct const *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   struct mempolicy *vm_policy ;
};

#line 325  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};

#line 331  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};

#line 344  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct task_rss_stat {
   int events ;
   int count[3U] ;
};

#line 352  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct mm_rss_stat {
   atomic_long_t count[3U] ;
};

#line 357 
struct kioctx_table;

#line 358 
struct linux_binfmt;

#line 358 
struct mmu_notifier_mm;

#line 358  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct mm_struct {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   u32 vmacache_seqnum ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   unsigned long mmap_base ;
   unsigned long mmap_legacy_base ;
   unsigned long task_size ;
   unsigned long highest_vm_end ;
   pgd_t *pgd ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   atomic_long_t nr_ptes ;
   atomic_long_t nr_pmds ;
   int map_count ;
   spinlock_t page_table_lock ;
   struct rw_semaphore mmap_sem ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   unsigned long pinned_vm ;
   unsigned long shared_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long def_flags ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[46U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   cpumask_var_t cpu_vm_mask_var ;
   mm_context_t context ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct kioctx_table *ioctx_table ;
   struct task_struct *owner ;
   struct file *exe_file ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
   struct cpumask cpumask_allocation ;
   unsigned long numa_next_scan ;
   unsigned long numa_scan_offset ;
   int numa_scan_seq ;
   bool tlb_flush_pending ;
   struct uprobes_state uprobes_state ;
   void *bd_addr ;
};

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/elf.h"
typedef __u64 Elf64_Addr;

#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/elf.h"
typedef __u16 Elf64_Half;

#line 20  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/elf.h"
typedef __u32 Elf64_Word;

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/elf.h"
typedef __u64 Elf64_Xword;

#line 190  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};

#line 198  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;

#line 53  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/elf.h"
union __anonunion_166 {
   unsigned long bitmap[4U] ;
   struct callback_head callback_head ;
};

#line 53  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/elf.h"
struct idr_layer {
   int prefix ;
   int layer ;
   struct idr_layer *ary[256U] ;
   int count ;
   union __anonunion_166 __anonCompField_idr_layer_47 ;
};

#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/idr.h"
struct idr {
   struct idr_layer *hint ;
   struct idr_layer *top ;
   int layers ;
   int cur ;
   spinlock_t lock ;
   int id_free_cnt ;
   struct idr_layer *id_free ;
};

#line 124  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/idr.h"
struct ida_bitmap {
   long nr_busy ;
   unsigned long bitmap[15U] ;
};

#line 153  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/idr.h"
struct ida {
   struct idr idr ;
   struct ida_bitmap *free_bitmap ;
};

#line 185 
struct dentry;

#line 186 
struct iattr;

#line 187 
struct super_block;

#line 188 
struct file_system_type;

#line 189 
struct kernfs_open_node;

#line 190 
struct kernfs_iattrs;

#line 213 
struct kernfs_root;

#line 213  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/idr.h"
struct kernfs_elem_dir {
   unsigned long subdirs ;
   struct rb_root children ;
   struct kernfs_root *root ;
};

#line 85  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_node;

#line 85  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_elem_symlink {
   struct kernfs_node *target_kn ;
};

#line 89 
struct kernfs_ops;

#line 89  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_elem_attr {
   struct kernfs_ops const *ops ;
   struct kernfs_open_node *open ;
   loff_t size ;
   struct kernfs_node *notify_next ;
};

#line 96  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
union __anonunion_171 {
   struct kernfs_elem_dir dir ;
   struct kernfs_elem_symlink symlink ;
   struct kernfs_elem_attr attr ;
};

#line 96  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_node {
   atomic_t count ;
   atomic_t active ;
   struct lockdep_map dep_map ;
   struct kernfs_node *parent ;
   char const *name ;
   struct rb_node rb ;
   void const *ns ;
   unsigned int hash ;
   union __anonunion_171 __anonCompField_kernfs_node_48 ;
   void *priv ;
   unsigned short flags ;
   umode_t mode ;
   unsigned int ino ;
   struct kernfs_iattrs *iattr ;
};

#line 138  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_syscall_ops {
   int (*remount_fs)(struct kernfs_root *, int *, char *) ;
   int (*show_options)(struct seq_file *, struct kernfs_root *) ;
   int (*mkdir)(struct kernfs_node *, char const *, umode_t ) ;
   int (*rmdir)(struct kernfs_node *) ;
   int (*rename)(struct kernfs_node *, struct kernfs_node *, char const *) ;
};

#line 155  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_root {
   struct kernfs_node *kn ;
   unsigned int flags ;
   struct ida ino_ida ;
   struct kernfs_syscall_ops *syscall_ops ;
   struct list_head supers ;
   wait_queue_head_t deactivate_waitq ;
};

#line 171  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_open_file {
   struct kernfs_node *kn ;
   struct file *file ;
   void *priv ;
   struct mutex mutex ;
   int event ;
   struct list_head list ;
   char *prealloc_buf ;
   size_t atomic_write_len ;
   bool mmapped ;
   struct vm_operations_struct const *vm_ops ;
};

#line 188  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_ops {
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   ssize_t (*read)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   size_t atomic_write_len ;
   bool prealloc ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   int (*mmap)(struct kernfs_open_file *, struct vm_area_struct *) ;
   struct lock_class_key lockdep_key ;
};

#line 477 
struct sock;

#line 478 
struct kobject;

#line 479 
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
};

#line 485  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   bool (*current_may_mount)(void) ;
   void *(*grab_current_ns)(void) ;
   void const *(*netlink_ns)(struct sock *) ;
   void const *(*initial_ns)(void) ;
   void (*drop_ns)(void *) ;
};

#line 59  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject_ns.h"
struct bin_attribute;

#line 60  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject_ns.h"
struct attribute {
   char const *name ;
   umode_t mode ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ignore_lockdep : 1 ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};

#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysfs.h"
struct attribute_group {
   char const *name ;
   umode_t (*is_visible)(struct kobject *, struct attribute *, int ) ;
   struct attribute **attrs ;
   struct bin_attribute **bin_attrs ;
};

#line 82  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysfs.h"
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   ssize_t (*write)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   int (*mmap)(struct file *, struct kobject *, struct bin_attribute *, struct vm_area_struct *) ;
};

#line 155  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject *, struct attribute *, char *) ;
   ssize_t (*store)(struct kobject *, struct attribute *, char const *, size_t ) ;
};

#line 509  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysfs.h"
struct kref {
   atomic_t refcount ;
};

#line 52  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
struct kset;

#line 52 
struct kobj_type;

#line 52  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
struct kobject {
   char const *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct kernfs_node *sd ;
   struct kref kref ;
   struct delayed_work release ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) state_initialized : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) state_in_sysfs : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) state_add_uevent_sent : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) state_remove_uevent_sent : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) uevent_suppress : 1 ;
};

#line 115  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject *) ;
   struct sysfs_ops const *sysfs_ops ;
   struct attribute **default_attrs ;
   struct kobj_ns_type_operations const *(*child_ns_type)(struct kobject *) ;
   void const *(*namespace)(struct kobject *) ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
struct kobj_uevent_env {
   char *argv[3U] ;
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};

#line 131  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
struct kset_uevent_ops {
   int (* const filter)(struct kset *, struct kobject *) ;
   char const *(* const name)(struct kset *, struct kobject *) ;
   int (* const uevent)(struct kset *, struct kobject *, struct kobj_uevent_env *) ;
};

#line 148  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops const *uevent_ops ;
};

#line 223 
struct kernel_param;

#line 228  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
struct kernel_param_ops {
   unsigned int flags ;
   int (*set)(char const *, struct kernel_param const *) ;
   int (*get)(char *, struct kernel_param const *) ;
   void (*free)(void *) ;
};

#line 62  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/moduleparam.h"
struct kparam_string;

#line 62 
struct kparam_array;

#line 62  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/moduleparam.h"
union __anonunion_172 {
   void *arg ;
   struct kparam_string const *str ;
   struct kparam_array const *arr ;
};

#line 62  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/moduleparam.h"
struct kernel_param {
   char const *name ;
   struct module *mod ;
   struct kernel_param_ops const *ops ;
   u16 const perm ;
   s8 level ;
   u8 flags ;
   union __anonunion_172 __anonCompField_kernel_param_49 ;
};

#line 83  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};

#line 89  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int elemsize ;
   unsigned int *num ;
   struct kernel_param_ops const *ops ;
   void *elem ;
};

#line 469  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/moduleparam.h"
struct latch_tree_node {
   struct rb_node node[2U] ;
};

#line 211  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rbtree_latch.h"
struct mod_arch_specific {
   
};

#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/module.h"
struct module_param_attrs;

#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
   struct completion *kobj_completion ;
};

#line 48  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute *, struct module_kobject *, char *) ;
   ssize_t (*store)(struct module_attribute *, struct module_kobject *, char const *, size_t ) ;
   void (*setup)(struct module *, char const *) ;
   int (*test)(struct module *) ;
   void (*free)(struct module *) ;
};

#line 74 
struct exception_table_entry;

#line 290 
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2,
    MODULE_STATE_UNFORMED = 3
};

#line 297  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/module.h"
struct mod_tree_node {
   struct module *mod ;
   struct latch_tree_node node ;
};

#line 304 
struct module_sect_attrs;

#line 304 
struct module_notes_attrs;

#line 304 
struct tracepoint;

#line 304 
struct trace_event_call;

#line 304 
struct trace_enum_map;

#line 304  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char const *version ;
   char const *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol const *syms ;
   unsigned long const *crcs ;
   unsigned int num_syms ;
   struct mutex param_lock ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol const *gpl_syms ;
   unsigned long const *gpl_crcs ;
   struct kernel_symbol const *unused_syms ;
   unsigned long const *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol const *unused_gpl_syms ;
   unsigned long const *unused_gpl_crcs ;
   bool sig_ok ;
   bool async_probe_requested ;
   struct kernel_symbol const *gpl_future_syms ;
   unsigned long const *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   void *module_init ;
   void *module_core ;
   unsigned int init_size ;
   unsigned int core_size ;
   unsigned int init_text_size ;
   unsigned int core_text_size ;
   struct mod_tree_node mtn_core ;
   struct mod_tree_node mtn_init ;
   unsigned int init_ro_size ;
   unsigned int core_ro_size ;
   struct mod_arch_specific arch ;
   unsigned int taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   Elf64_Sym *symtab ;
   Elf64_Sym *core_symtab ;
   unsigned int num_symtab ;
   unsigned int core_num_syms ;
   char *strtab ;
   char *core_strtab ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   char *args ;
   void *percpu ;
   unsigned int percpu_size ;
   unsigned int num_tracepoints ;
   struct tracepoint * const *tracepoints_ptrs ;
   struct jump_entry *jump_entries ;
   unsigned int num_jump_entries ;
   unsigned int num_trace_bprintk_fmt ;
   char const **trace_bprintk_fmt_start ;
   struct trace_event_call **trace_events ;
   unsigned int num_trace_events ;
   struct trace_enum_map **trace_enums ;
   unsigned int num_trace_enums ;
   unsigned int num_ftrace_callsites ;
   unsigned long *ftrace_callsites ;
   bool klp_alive ;
   struct list_head source_list ;
   struct list_head target_list ;
   void (*exit)(void) ;
   atomic_t refcnt ;
   ctor_fn_t (**ctors)(void) ;
   unsigned int num_ctors ;
};

#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;

#line 84  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/plist.h"
struct plist_node {
   int prio ;
   struct list_head prio_list ;
   struct list_head node_list ;
};

#line 4  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/cputime_jiffies.h"
typedef unsigned long cputime_t;

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sem.h"
struct sem_undo_list;

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};

#line 78  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/shm.h"
struct user_struct;

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/shm.h"
struct sysv_shm {
   struct list_head shm_clist ;
};

#line 24  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_180 {
   unsigned long sig[1U] ;
};

#line 24  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_180 sigset_t;

#line 25 
struct siginfo;

#line 17  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/signal-defs.h"
typedef void __signalfn_t(int );

#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;

#line 20  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/signal.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};

#line 10  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
typedef union sigval sigval_t;

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__kill_182 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__timer_183 {
   __kernel_timer_t _tid ;
   int _overrun ;
   char _pad[0U] ;
   sigval_t _sigval ;
   int _sys_private ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__rt_184 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigchld_185 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_bnd_187 {
   void *_lower ;
   void *_upper ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigfault_186 {
   void *_addr ;
   short _addr_lsb ;
   struct __anonstruct__addr_bnd_187 _addr_bnd ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_188 {
   long _band ;
   int _fd ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigsys_189 {
   void *_call_addr ;
   int _syscall ;
   unsigned int _arch ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
union __anonunion__sifields_181 {
   int _pad[28U] ;
   struct __anonstruct__kill_182 _kill ;
   struct __anonstruct__timer_183 _timer ;
   struct __anonstruct__rt_184 _rt ;
   struct __anonstruct__sigchld_185 _sigchld ;
   struct __anonstruct__sigfault_186 _sigfault ;
   struct __anonstruct__sigpoll_188 _sigpoll ;
   struct __anonstruct__sigsys_189 _sigsys ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct siginfo {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __anonunion__sifields_181 _sifields ;
};

#line 113  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
typedef struct siginfo siginfo_t;

#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/signal.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};

#line 243  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/signal.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};

#line 257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/signal.h"
struct k_sigaction {
   struct sigaction sa ;
};

#line 443 
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_PGID = 1,
    PIDTYPE_SID = 2,
    PIDTYPE_MAX = 3
};

#line 450 
struct pid_namespace;

#line 450  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/signal.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
   struct hlist_node pid_chain ;
};

#line 56  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pid.h"
struct pid {
   atomic_t count ;
   unsigned int level ;
   struct hlist_head tasks[3U] ;
   struct callback_head rcu ;
   struct upid numbers[1U] ;
};

#line 68  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pid.h"
struct pid_link {
   struct hlist_node node ;
   struct pid *pid ;
};

#line 174  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pid.h"
struct percpu_counter {
   raw_spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};

#line 53  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/seccomp.h"
struct seccomp_filter;

#line 54  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/seccomp.h"
struct seccomp {
   int mode ;
   struct seccomp_filter *filter ;
};

#line 40  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rtmutex.h"
struct rt_mutex_waiter;

#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/resource.h"
struct rlimit {
   __kernel_ulong_t rlim_cur ;
   __kernel_ulong_t rlim_max ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/resource.h"
struct timerqueue_node {
   struct rb_node node ;
   ktime_t expires ;
};

#line 12  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timerqueue.h"
struct timerqueue_head {
   struct rb_root head ;
   struct timerqueue_node *next ;
};

#line 50 
struct hrtimer_clock_base;

#line 51 
struct hrtimer_cpu_base;

#line 60 
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
};

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timerqueue.h"
struct hrtimer {
   struct timerqueue_node node ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer *) ;
   struct hrtimer_clock_base *base ;
   unsigned long state ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   int index ;
   clockid_t clockid ;
   struct timerqueue_head active ;
   ktime_t (*get_time)(void) ;
   ktime_t offset ;
};

#line 156  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   seqcount_t seq ;
   struct hrtimer *running ;
   unsigned int cpu ;
   unsigned int active_bases ;
   unsigned int clock_was_set_seq ;
   bool migration_enabled ;
   bool nohz_active ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) in_hrtirq : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) hres_active : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) hang_detected : 1 ;
   ktime_t expires_next ;
   struct hrtimer *next_timer ;
   unsigned int nr_events ;
   unsigned int nr_retries ;
   unsigned int nr_hangs ;
   unsigned int max_hang_time ;
   struct hrtimer_clock_base clock_base[4U] ;
};

#line 466  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/hrtimer.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};

#line 45  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/task_io_accounting.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/latencytop.h"
struct assoc_array_ptr;

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/latencytop.h"
struct assoc_array {
   struct assoc_array_ptr *root ;
   unsigned long nr_leaves_on_tree ;
};

#line 31  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
typedef int32_t key_serial_t;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
typedef uint32_t key_perm_t;

#line 35 
struct key;

#line 36 
struct signal_struct;

#line 37 
struct key_type;

#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
struct keyring_index_key {
   struct key_type *type ;
   char const *description ;
   size_t desc_len ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
union __anonunion_196 {
   struct list_head graveyard_link ;
   struct rb_node serial_node ;
};

#line 123 
struct key_user;

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
union __anonunion_197 {
   time_t expiry ;
   time_t revoked_at ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
struct __anonstruct_199 {
   struct key_type *type ;
   char *description ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
union __anonunion_198 {
   struct keyring_index_key index_key ;
   struct __anonstruct_199 __anonCompField___anonunion_198_52 ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
union __anonunion_type_data_200 {
   struct list_head link ;
   unsigned long x[2U] ;
   void *p[2U] ;
   int reject_error ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
union __anonunion_payload_202 {
   unsigned long value ;
   void *rcudata ;
   void *data ;
   void *data2[2U] ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
union __anonunion_201 {
   union __anonunion_payload_202 payload ;
   struct assoc_array keys ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
struct key {
   atomic_t usage ;
   key_serial_t serial ;
   union __anonunion_196 __anonCompField_key_50 ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_197 __anonCompField_key_51 ;
   time_t last_used_at ;
   kuid_t uid ;
   kgid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   unsigned long flags ;
   union __anonunion_198 __anonCompField_key_53 ;
   union __anonunion_type_data_200 type_data ;
   union __anonunion_201 __anonCompField_key_54 ;
};

#line 358 
struct audit_context;

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/selinux.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   int nblocks ;
   kgid_t small_block[32U] ;
   kgid_t *blocks[0U] ;
};

#line 90  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   kuid_t uid ;
   kgid_t gid ;
   kuid_t suid ;
   kgid_t sgid ;
   kuid_t euid ;
   kgid_t egid ;
   kuid_t fsuid ;
   kgid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   unsigned char jit_keyring ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   void *security ;
   struct user_struct *user ;
   struct user_namespace *user_ns ;
   struct group_info *group_info ;
   struct callback_head rcu ;
};

#line 369 
struct percpu_ref;

#line 55  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/percpu-refcount.h"
typedef void percpu_ref_func_t(struct percpu_ref *);

#line 68  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/percpu-refcount.h"
struct percpu_ref {
   atomic_long_t count ;
   unsigned long percpu_count_ptr ;
   percpu_ref_func_t *release ;
   percpu_ref_func_t *confirm_switch ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) force_atomic : 1 ;
   struct callback_head rcu ;
};

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/percpu-rwsem.h"
struct cgroup;

#line 28 
struct cgroup_root;

#line 29 
struct cgroup_subsys;

#line 30 
struct cgroup_taskset;

#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/percpu-rwsem.h"
struct cgroup_subsys_state {
   struct cgroup *cgroup ;
   struct cgroup_subsys *ss ;
   struct percpu_ref refcnt ;
   struct cgroup_subsys_state *parent ;
   struct list_head sibling ;
   struct list_head children ;
   int id ;
   unsigned int flags ;
   u64 serial_nr ;
   struct callback_head callback_head ;
   struct work_struct destroy_work ;
};

#line 124  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cgroup-defs.h"
struct css_set {
   atomic_t refcount ;
   struct hlist_node hlist ;
   struct list_head tasks ;
   struct list_head mg_tasks ;
   struct list_head cgrp_links ;
   struct cgroup *dfl_cgrp ;
   struct cgroup_subsys_state *subsys[12U] ;
   struct list_head mg_preload_node ;
   struct list_head mg_node ;
   struct cgroup *mg_src_cgrp ;
   struct css_set *mg_dst_cset ;
   struct list_head e_cset_node[12U] ;
   struct callback_head callback_head ;
};

#line 197  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cgroup-defs.h"
struct cgroup {
   struct cgroup_subsys_state self ;
   unsigned long flags ;
   int id ;
   int populated_cnt ;
   struct kernfs_node *kn ;
   struct kernfs_node *procs_kn ;
   struct kernfs_node *populated_kn ;
   unsigned int subtree_control ;
   unsigned int child_subsys_mask ;
   struct cgroup_subsys_state *subsys[12U] ;
   struct cgroup_root *root ;
   struct list_head cset_links ;
   struct list_head e_csets[12U] ;
   struct list_head pidlists ;
   struct mutex pidlist_mutex ;
   wait_queue_head_t offline_waitq ;
   struct work_struct release_agent_work ;
};

#line 270  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cgroup-defs.h"
struct cgroup_root {
   struct kernfs_root *kf_root ;
   unsigned int subsys_mask ;
   int hierarchy_id ;
   struct cgroup cgrp ;
   atomic_t nr_cgrps ;
   struct list_head root_list ;
   unsigned int flags ;
   struct idr cgroup_idr ;
   char release_agent_path[4096U] ;
   char name[64U] ;
};

#line 306  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cgroup-defs.h"
struct cftype {
   char name[64U] ;
   int private ;
   umode_t mode ;
   size_t max_write_len ;
   unsigned int flags ;
   struct cgroup_subsys *ss ;
   struct list_head node ;
   struct kernfs_ops *kf_ops ;
   u64 (*read_u64)(struct cgroup_subsys_state *, struct cftype *) ;
   s64 (*read_s64)(struct cgroup_subsys_state *, struct cftype *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   int (*write_u64)(struct cgroup_subsys_state *, struct cftype *, u64 ) ;
   int (*write_s64)(struct cgroup_subsys_state *, struct cftype *, s64 ) ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   struct lock_class_key lockdep_key ;
};

#line 388  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cgroup-defs.h"
struct cgroup_subsys {
   struct cgroup_subsys_state *(*css_alloc)(struct cgroup_subsys_state *) ;
   int (*css_online)(struct cgroup_subsys_state *) ;
   void (*css_offline)(struct cgroup_subsys_state *) ;
   void (*css_released)(struct cgroup_subsys_state *) ;
   void (*css_free)(struct cgroup_subsys_state *) ;
   void (*css_reset)(struct cgroup_subsys_state *) ;
   void (*css_e_css_changed)(struct cgroup_subsys_state *) ;
   int (*can_attach)(struct cgroup_subsys_state *, struct cgroup_taskset *) ;
   void (*cancel_attach)(struct cgroup_subsys_state *, struct cgroup_taskset *) ;
   void (*attach)(struct cgroup_subsys_state *, struct cgroup_taskset *) ;
   void (*fork)(struct task_struct *) ;
   void (*exit)(struct cgroup_subsys_state *, struct cgroup_subsys_state *, struct task_struct *) ;
   void (*bind)(struct cgroup_subsys_state *) ;
   int disabled ;
   int early_init ;
   bool broken_hierarchy ;
   bool warned_broken_hierarchy ;
   int id ;
   char const *name ;
   struct cgroup_root *root ;
   struct idr css_idr ;
   struct list_head cfts ;
   struct cftype *dfl_cftypes ;
   struct cftype *legacy_cftypes ;
   unsigned int depends_on ;
};

#line 128  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct futex_pi_state;

#line 129 
struct robust_list_head;

#line 130 
struct bio_list;

#line 131 
struct fs_struct;

#line 132 
struct perf_event_context;

#line 133 
struct blk_plug;

#line 135 
struct nameidata;

#line 188 
struct cfs_rq;

#line 189 
struct task_group;

#line 477  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct sighand_struct {
   atomic_t count ;
   struct k_sigaction action[64U] ;
   spinlock_t siglock ;
   wait_queue_head_t signalfd_wqh ;
};

#line 516  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   cputime_t ac_utime ;
   cputime_t ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};

#line 524  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct cpu_itimer {
   cputime_t expires ;
   cputime_t incr ;
   u32 error ;
   u32 incr_error ;
};

#line 531  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct cputime {
   cputime_t utime ;
   cputime_t stime ;
};

#line 543  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct task_cputime {
   cputime_t utime ;
   cputime_t stime ;
   unsigned long long sum_exec_runtime ;
};

#line 563  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct task_cputime_atomic {
   atomic64_t utime ;
   atomic64_t stime ;
   atomic64_t sum_exec_runtime ;
};

#line 584  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct thread_group_cputimer {
   struct task_cputime_atomic cputime_atomic ;
   int running ;
};

#line 620 
struct autogroup;

#line 621 
struct tty_struct;

#line 621 
struct taskstats;

#line 621 
struct tty_audit_buf;

#line 621  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct signal_struct {
   atomic_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   struct list_head thread_head ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_child_subreaper : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) has_child_subreaper : 1 ;
   int posix_timer_id ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   struct pid *leader_pid ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   struct autogroup *autogroup ;
   seqlock_t stats_lock ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t cutime ;
   cputime_t cstime ;
   cputime_t gtime ;
   cputime_t cgtime ;
   struct cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   unsigned int audit_tty_log_passwd ;
   struct tty_audit_buf *tty_audit_buf ;
   struct rw_semaphore group_rwsem ;
   oom_flags_t oom_flags ;
   short oom_score_adj ;
   short oom_score_adj_min ;
   struct mutex cred_guard_mutex ;
};

#line 802  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct user_struct {
   atomic_t __count ;
   atomic_t processes ;
   atomic_t sigpending ;
   atomic_t inotify_watches ;
   atomic_t inotify_devs ;
   atomic_t fanotify_listeners ;
   atomic_long_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   struct key *uid_keyring ;
   struct key *session_keyring ;
   struct hlist_node uidhash_node ;
   kuid_t uid ;
   atomic_long_t locked_vm ;
};

#line 845 
struct backing_dev_info;

#line 846 
struct reclaim_state;

#line 847  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
};

#line 861  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct task_delay_info {
   spinlock_t lock ;
   unsigned int flags ;
   u64 blkio_start ;
   u64 blkio_delay ;
   u64 swapin_delay ;
   u32 blkio_count ;
   u32 swapin_count ;
   u64 freepages_start ;
   u64 freepages_delay ;
   u32 freepages_count ;
};

#line 909  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct wake_q_node {
   struct wake_q_node *next ;
};

#line 1138 
struct io_context;

#line 1172 
struct pipe_inode_info;

#line 1173 
struct uts_namespace;

#line 1174  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   u32 inv_weight ;
};

#line 1181  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct sched_avg {
   u64 last_runnable_update ;
   s64 decay_count ;
   unsigned long load_avg_contrib ;
   unsigned long utilization_avg_contrib ;
   u32 runnable_avg_sum ;
   u32 avg_period ;
   u32 running_avg_sum ;
};

#line 1206  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};

#line 1241  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   int depth ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
   struct sched_avg avg ;
};

#line 1273 
struct rt_rq;

#line 1273  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned long watchdog_stamp ;
   unsigned int time_slice ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
};

#line 1289  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct sched_dl_entity {
   struct rb_node rb_node ;
   u64 dl_runtime ;
   u64 dl_deadline ;
   u64 dl_period ;
   u64 dl_bw ;
   s64 runtime ;
   u64 deadline ;
   unsigned int flags ;
   int dl_throttled ;
   int dl_new ;
   int dl_boosted ;
   int dl_yielded ;
   struct hrtimer dl_timer ;
};

#line 1355  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct memcg_oom_info {
   struct mem_cgroup *memcg ;
   gfp_t gfp_mask ;
   int order ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) may_oom : 1 ;
};

#line 1779 
struct sched_class;

#line 1779 
struct files_struct;

#line 1779 
struct compat_robust_list_head;

#line 1779 
struct numa_group;

#line 1779 
struct ftrace_ret_stack;

#line 1779  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct task_struct {
   long volatile state ;
   void *stack ;
   atomic_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   struct llist_node wake_entry ;
   int on_cpu ;
   struct task_struct *last_wakee ;
   unsigned long wakee_flips ;
   unsigned long wakee_flip_decay_ts ;
   int wake_cpu ;
   int on_rq ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class const *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct task_group *sched_task_group ;
   struct sched_dl_entity dl ;
   struct hlist_head preempt_notifiers ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   int nr_cpus_allowed ;
   cpumask_t cpus_allowed ;
   unsigned long rcu_tasks_nvcsw ;
   bool rcu_tasks_holdout ;
   struct list_head rcu_tasks_holdout_list ;
   int rcu_tasks_idle_cpu ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct rb_node pushable_dl_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   u32 vmacache_seqnum ;
   struct vm_area_struct *vmacache[4U] ;
   struct task_rss_stat rss_stat ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned long jobctl ;
   unsigned int personality ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) in_execve : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) in_iowait : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) sched_reset_on_fork : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) sched_contributes_to_load : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) sched_migrated : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) memcg_kmem_skip_account : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) brk_randomized : 1 ;
   unsigned long atomic_flags ;
   struct restart_block restart_block ;
   pid_t pid ;
   pid_t tgid ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid_link pids[3U] ;
   struct list_head thread_group ;
   struct list_head thread_node ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t utimescaled ;
   cputime_t stimescaled ;
   cputime_t gtime ;
   struct cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   u64 start_time ;
   u64 real_start_time ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct cred const *real_cred ;
   struct cred const *cred ;
   char comm[16U] ;
   struct nameidata *nameidata ;
   struct sysv_sem sysvsem ;
   struct sysv_shm sysvshm ;
   unsigned long last_switch_count ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   int (*notifier)(void *) ;
   void *notifier_data ;
   sigset_t *notifier_mask ;
   struct callback_head *task_works ;
   struct audit_context *audit_context ;
   kuid_t loginuid ;
   unsigned int sessionid ;
   struct seccomp seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   raw_spinlock_t pi_lock ;
   struct wake_q_node wake_q ;
   struct rb_root pi_waiters ;
   struct rb_node *pi_waiters_leftmost ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   gfp_t lockdep_reclaim_gfp ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct blk_plug *plug ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   unsigned long ptrace_message ;
   siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   cputime_t acct_timexpd ;
   nodemask_t mems_allowed ;
   seqcount_t mems_allowed_seq ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct perf_event_context *perf_event_ctxp[2U] ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_next ;
   short pref_node_fork ;
   int numa_scan_seq ;
   unsigned int numa_scan_period ;
   unsigned int numa_scan_period_max ;
   int numa_preferred_nid ;
   unsigned long numa_migrate_retry ;
   u64 node_stamp ;
   u64 last_task_numa_placement ;
   u64 last_sum_exec_runtime ;
   struct callback_head numa_work ;
   struct list_head numa_entry ;
   struct numa_group *numa_group ;
   unsigned long *numa_faults ;
   unsigned long total_numa_faults ;
   unsigned long numa_faults_locality[3U] ;
   unsigned long numa_pages_migrated ;
   struct callback_head rcu ;
   struct pipe_inode_info *splice_pipe ;
   struct page_frag task_frag ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   int nr_dirtied ;
   int nr_dirtied_pause ;
   unsigned long dirty_paused_when ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   unsigned long timer_slack_ns ;
   unsigned long default_timer_slack_ns ;
   unsigned int kasan_depth ;
   int curr_ret_stack ;
   struct ftrace_ret_stack *ret_stack ;
   unsigned long long ftrace_timestamp ;
   atomic_t trace_overrun ;
   atomic_t tracing_graph_pause ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   struct memcg_oom_info memcg_oom ;
   struct uprobe_task *utask ;
   unsigned int sequential_io ;
   unsigned int sequential_io_avg ;
   unsigned long task_state_change ;
   int pagefault_disabled ;
   struct thread_struct thread ;
};

#line 3165  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct semaphore {
   raw_spinlock_t lock ;
   unsigned int count ;
   struct list_head wait_list ;
};

#line 158  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kmemcheck.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/uio.h"
struct kvec {
   void *iov_base ;
   size_t iov_len ;
};

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uio.h"
union __anonunion_215 {
   struct iovec const *iov ;
   struct kvec const *kvec ;
   struct bio_vec const *bvec ;
};

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uio.h"
struct iov_iter {
   int type ;
   size_t iov_offset ;
   size_t count ;
   union __anonunion_215 __anonCompField_iov_iter_56 ;
   unsigned long nr_segs ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/socket.h"
typedef unsigned short __kernel_sa_family_t;

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/socket.h"
typedef __kernel_sa_family_t sa_family_t;

#line 24  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/socket.h"
struct sockaddr {
   sa_family_t sa_family ;
   char sa_data[14U] ;
};

#line 38 
struct kiocb;

#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/socket.h"
struct msghdr {
   void *msg_name ;
   int msg_namelen ;
   struct iov_iter msg_iter ;
   void *msg_control ;
   __kernel_size_t msg_controllen ;
   unsigned int msg_flags ;
   struct kiocb *msg_iocb ;
};

#line 217  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/fcntl.h"
enum ldv_18014 {
    SS_FREE = 0,
    SS_UNCONNECTED = 1,
    SS_CONNECTING = 2,
    SS_CONNECTED = 3,
    SS_DISCONNECTING = 4
};

#line 53  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/net.h"
typedef enum ldv_18014 socket_state;

#line 54 
struct poll_table_struct;

#line 55 
struct net;

#line 72 
struct fasync_struct;

#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/net.h"
struct socket_wq {
   wait_queue_head_t wait ;
   struct fasync_struct *fasync_list ;
   struct callback_head rcu ;
};

#line 93  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/net.h"
struct proto_ops;

#line 93  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/net.h"
struct socket {
   socket_state state ;
   short type ;
   unsigned long flags ;
   struct socket_wq *wq ;
   struct file *file ;
   struct sock *sk ;
   struct proto_ops const *ops ;
};

#line 119  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/net.h"
struct proto_ops {
   int family ;
   struct module *owner ;
   int (*release)(struct socket *) ;
   int (*bind)(struct socket *, struct sockaddr *, int ) ;
   int (*connect)(struct socket *, struct sockaddr *, int , int ) ;
   int (*socketpair)(struct socket *, struct socket *) ;
   int (*accept)(struct socket *, struct socket *, int ) ;
   int (*getname)(struct socket *, struct sockaddr *, int *, int ) ;
   unsigned int (*poll)(struct file *, struct socket *, struct poll_table_struct *) ;
   int (*ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*compat_ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*listen)(struct socket *, int ) ;
   int (*shutdown)(struct socket *, int ) ;
   int (*setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*compat_setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*sendmsg)(struct socket *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct socket *, struct msghdr *, size_t , int ) ;
   int (*mmap)(struct file *, struct socket *, struct vm_area_struct *) ;
   ssize_t (*sendpage)(struct socket *, struct page *, int , size_t , int ) ;
   ssize_t (*splice_read)(struct socket *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*set_peek_off)(struct sock *, int ) ;
};

#line 62  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/uaccess.h"
struct exception_table_entry {
   int insn ;
   int fixup ;
};

#line 161  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/checksum_64.h"
struct in6_addr;

#line 140  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/checksum.h"
struct sk_buff;

#line 176 
struct klist_node;

#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/klist.h"
struct klist_node {
   void *n_klist ;
   struct list_head n_node ;
   struct kref n_ref ;
};

#line 67 
struct path;

#line 68  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/klist.h"
struct seq_file {
   char *buf ;
   size_t size ;
   size_t from ;
   size_t count ;
   size_t pad_until ;
   loff_t index ;
   loff_t read_pos ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations const *op ;
   int poll_event ;
   struct user_namespace *user_ns ;
   void *private ;
};

#line 35  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/seq_file.h"
struct seq_operations {
   void *(*start)(struct seq_file *, loff_t *) ;
   void (*stop)(struct seq_file *, void *) ;
   void *(*next)(struct seq_file *, void *, loff_t *) ;
   int (*show)(struct seq_file *, void *) ;
};

#line 222 
struct pinctrl;

#line 223 
struct pinctrl_state;

#line 194  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pinctrl/consumer.h"
struct dev_pin_info {
   struct pinctrl *p ;
   struct pinctrl_state *default_state ;
   struct pinctrl_state *sleep_state ;
   struct pinctrl_state *idle_state ;
};

#line 48  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ratelimit.h"
struct dma_map_ops;

#line 48  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ratelimit.h"
struct dev_archdata {
   struct dma_map_ops *dma_ops ;
   void *iommu ;
};

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/device.h"
struct device_driver;

#line 16 
struct driver_private;

#line 17 
struct class;

#line 18 
struct subsys_private;

#line 19 
struct bus_type;

#line 20 
struct device_node;

#line 21 
struct fwnode_handle;

#line 22 
struct iommu_ops;

#line 23 
struct iommu_group;

#line 61  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct device_attribute;

#line 61  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct bus_type {
   char const *name ;
   char const *dev_name ;
   struct device *dev_root ;
   struct device_attribute *dev_attrs ;
   struct attribute_group const **bus_groups ;
   struct attribute_group const **dev_groups ;
   struct attribute_group const **drv_groups ;
   int (*match)(struct device *, struct device_driver *) ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   int (*probe)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*online)(struct device *) ;
   int (*offline)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   struct dev_pm_ops const *pm ;
   struct iommu_ops const *iommu_ops ;
   struct subsys_private *p ;
   struct lock_class_key lock_key ;
};

#line 139 
struct device_type;

#line 197 
enum probe_type {
    PROBE_DEFAULT_STRATEGY = 0,
    PROBE_PREFER_ASYNCHRONOUS = 1,
    PROBE_FORCE_SYNCHRONOUS = 2
};

#line 203 
struct of_device_id;

#line 203 
struct acpi_device_id;

#line 203  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct device_driver {
   char const *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char const *mod_name ;
   bool suppress_bind_attrs ;
   enum probe_type probe_type ;
   struct of_device_id const *of_match_table ;
   struct acpi_device_id const *acpi_match_table ;
   int (*probe)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   struct attribute_group const **groups ;
   struct dev_pm_ops const *pm ;
   struct driver_private *p ;
};

#line 353 
struct class_attribute;

#line 353  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct class {
   char const *name ;
   struct module *owner ;
   struct class_attribute *class_attrs ;
   struct attribute_group const **dev_groups ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *) ;
   void (*class_release)(struct class *) ;
   void (*dev_release)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   struct kobj_ns_type_operations const *ns_type ;
   void const *(*namespace)(struct device *) ;
   struct dev_pm_ops const *pm ;
   struct subsys_private *p ;
};

#line 446  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct class_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct class *, struct class_attribute *, char *) ;
   ssize_t (*store)(struct class *, struct class_attribute *, char const *, size_t ) ;
};

#line 514  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct device_type {
   char const *name ;
   struct attribute_group const **groups ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *, kuid_t *, kgid_t *) ;
   void (*release)(struct device *) ;
   struct dev_pm_ops const *pm ;
};

#line 542  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device *, struct device_attribute *, char *) ;
   ssize_t (*store)(struct device *, struct device_attribute *, char const *, size_t ) ;
};

#line 675  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};

#line 684 
struct dma_coherent_mem;

#line 684 
struct cma;

#line 684  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct device {
   struct device *parent ;
   struct device_private *p ;
   struct kobject kobj ;
   char const *init_name ;
   struct device_type const *type ;
   struct mutex mutex ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   void *driver_data ;
   struct dev_pm_info power ;
   struct dev_pm_domain *pm_domain ;
   struct dev_pin_info *pins ;
   int numa_node ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   unsigned long dma_pfn_offset ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct cma *cma_area ;
   struct dev_archdata archdata ;
   struct device_node *of_node ;
   struct fwnode_handle *fwnode ;
   dev_t devt ;
   u32 id ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct klist_node knode_class ;
   struct class *class ;
   struct attribute_group const **groups ;
   void (*release)(struct device *) ;
   struct iommu_group *iommu_group ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) offline_disabled : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) offline : 1 ;
};

#line 830  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct wakeup_source {
   char const *name ;
   struct list_head entry ;
   spinlock_t lock ;
   struct wake_irq *wakeirq ;
   struct timer_list timer ;
   unsigned long timer_expires ;
   ktime_t total_time ;
   ktime_t max_time ;
   ktime_t last_time ;
   ktime_t start_prevent_time ;
   ktime_t prevent_sleep_time ;
   unsigned long event_count ;
   unsigned long active_count ;
   unsigned long relax_count ;
   unsigned long expire_count ;
   unsigned long wakeup_count ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) active : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) autosleep_enabled : 1 ;
};

#line 1283  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct dma_attrs {
   unsigned long flags[1U] ;
};

#line 70  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dma-attrs.h"
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
};

#line 93  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bit_spinlock.h"
struct shrink_control {
   gfp_t gfp_mask ;
   unsigned long nr_to_scan ;
   int nid ;
   struct mem_cgroup *memcg ;
};

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/shrinker.h"
struct shrinker {
   unsigned long (*count_objects)(struct shrinker *, struct shrink_control *) ;
   unsigned long (*scan_objects)(struct shrinker *, struct shrink_control *) ;
   int seeks ;
   long batch ;
   unsigned long flags ;
   struct list_head list ;
   atomic_long_t *nr_deferred ;
};

#line 64  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/page_ext.h"
struct file_ra_state;

#line 65 
struct writeback_control;

#line 66 
struct bdi_writeback;

#line 207  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm.h"
struct vm_fault {
   unsigned int flags ;
   unsigned long pgoff ;
   void *virtual_address ;
   struct page *cow_page ;
   struct page *page ;
   unsigned long max_pgoff ;
   pte_t *pte ;
};

#line 239  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct *) ;
   void (*close)(struct vm_area_struct *) ;
   int (*fault)(struct vm_area_struct *, struct vm_fault *) ;
   void (*map_pages)(struct vm_area_struct *, struct vm_fault *) ;
   int (*page_mkwrite)(struct vm_area_struct *, struct vm_fault *) ;
   int (*pfn_mkwrite)(struct vm_area_struct *, struct vm_fault *) ;
   int (*access)(struct vm_area_struct *, unsigned long , void *, int , int ) ;
   char const *(*name)(struct vm_area_struct *) ;
   int (*set_policy)(struct vm_area_struct *, struct mempolicy *) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct *, unsigned long ) ;
   struct page *(*find_special_page)(struct vm_area_struct *, unsigned long ) ;
};

#line 2291  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm.h"
struct scatterlist {
   unsigned long sg_magic ;
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/scatterlist.h"
struct sg_table {
   struct scatterlist *sgl ;
   unsigned int nents ;
   unsigned int orig_nents ;
};

#line 380  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/scatterlist.h"
struct dma_map_ops {
   void *(*alloc)(struct device *, size_t , dma_addr_t *, gfp_t , struct dma_attrs *) ;
   void (*free)(struct device *, size_t , void *, dma_addr_t , struct dma_attrs *) ;
   int (*mmap)(struct device *, struct vm_area_struct *, void *, dma_addr_t , size_t , struct dma_attrs *) ;
   int (*get_sgtable)(struct device *, struct sg_table *, void *, dma_addr_t , size_t , struct dma_attrs *) ;
   dma_addr_t (*map_page)(struct device *, struct page *, unsigned long , size_t , enum dma_data_direction , struct dma_attrs *) ;
   void (*unmap_page)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *) ;
   int (*map_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , struct dma_attrs *) ;
   void (*unmap_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , struct dma_attrs *) ;
   void (*sync_single_for_cpu)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_single_for_device)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_sg_for_cpu)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*sync_sg_for_device)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   int (*mapping_error)(struct device *, dma_addr_t ) ;
   int (*dma_supported)(struct device *, u64 ) ;
   int (*set_dma_mask)(struct device *, u64 ) ;
   int is_phys ;
};

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdev_features.h"
typedef u64 netdev_features_t;

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdev_features.h"
union __anonunion_in6_u_218 {
   __u8 u6_addr8[16U] ;
   __be16 u6_addr16[8U] ;
   __be32 u6_addr32[4U] ;
};

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdev_features.h"
struct in6_addr {
   union __anonunion_in6_u_218 in6_u ;
};

#line 46  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/in6.h"
struct ethhdr {
   unsigned char h_dest[6U] ;
   unsigned char h_source[6U] ;
   __be16 h_proto ;
};

#line 218  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/flow_dissector.h"
struct pipe_buf_operations;

#line 218  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/flow_dissector.h"
struct pipe_buffer {
   struct page *page ;
   unsigned int offset ;
   unsigned int len ;
   struct pipe_buf_operations const *ops ;
   unsigned int flags ;
   unsigned long private ;
};

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pipe_fs_i.h"
struct pipe_inode_info {
   struct mutex mutex ;
   wait_queue_head_t wait ;
   unsigned int nrbufs ;
   unsigned int curbuf ;
   unsigned int buffers ;
   unsigned int readers ;
   unsigned int writers ;
   unsigned int files ;
   unsigned int waiting_writers ;
   unsigned int r_counter ;
   unsigned int w_counter ;
   struct page *tmp_page ;
   struct fasync_struct *fasync_readers ;
   struct fasync_struct *fasync_writers ;
   struct pipe_buffer *bufs ;
};

#line 61  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pipe_fs_i.h"
struct pipe_buf_operations {
   int can_merge ;
   int (*confirm)(struct pipe_inode_info *, struct pipe_buffer *) ;
   void (*release)(struct pipe_inode_info *, struct pipe_buffer *) ;
   int (*steal)(struct pipe_inode_info *, struct pipe_buffer *) ;
   void (*get)(struct pipe_inode_info *, struct pipe_buffer *) ;
};

#line 86  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/splice.h"
struct napi_struct;

#line 87  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/splice.h"
struct nf_conntrack {
   atomic_t use ;
};

#line 166  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
enum ldv_22810 {
    BRNF_PROTO_UNCHANGED = 0,
    BRNF_PROTO_8021Q = 1,
    BRNF_PROTO_PPPOE = 2
};

#line 172  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_223 {
   struct net_device *physoutdev ;
   char neigh_header[8U] ;
};

#line 172  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_224 {
   __be32 ipv4_daddr ;
   struct in6_addr ipv6_daddr ;
};

#line 172  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct nf_bridge_info {
   atomic_t use ;
   enum ldv_22810 __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))) orig_proto : 8 ;
   bool pkt_otherhost ;
   __u16 frag_max_size ;
   unsigned int mask ;
   struct net_device *physindev ;
   union __anonunion_223 __anonCompField_nf_bridge_info_62 ;
   union __anonunion_224 __anonCompField_nf_bridge_info_63 ;
};

#line 189  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct sk_buff_head {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   __u32 qlen ;
   spinlock_t lock ;
};

#line 403  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
typedef unsigned int sk_buff_data_t;

#line 404  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct __anonstruct_227 {
   u32 stamp_us ;
   u32 stamp_jiffies ;
};

#line 404  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_226 {
   u64 v64 ;
   struct __anonstruct_227 __anonCompField___anonunion_226_64 ;
};

#line 404  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct skb_mstamp {
   union __anonunion_226 __anonCompField_skb_mstamp_65 ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_230 {
   ktime_t tstamp ;
   struct skb_mstamp skb_mstamp ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct __anonstruct_229 {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   union __anonunion_230 __anonCompField___anonstruct_229_66 ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_228 {
   struct __anonstruct_229 __anonCompField___anonunion_228_67 ;
   struct rb_node rbnode ;
};

#line 457 
struct sec_path;

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct __anonstruct_232 {
   __u16 csum_start ;
   __u16 csum_offset ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_231 {
   __wsum csum ;
   struct __anonstruct_232 __anonCompField___anonunion_231_69 ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_233 {
   unsigned int napi_id ;
   unsigned int sender_cpu ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_234 {
   __u32 mark ;
   __u32 reserved_tailroom ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_235 {
   __be16 inner_protocol ;
   __u8 inner_ipproto ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct sk_buff {
   union __anonunion_228 __anonCompField_sk_buff_68 ;
   struct sock *sk ;
   struct net_device *dev ;
   char cb[48U] ;
   unsigned long _skb_refdst ;
   void (*destructor)(struct sk_buff *) ;
   struct sec_path *sp ;
   struct nf_conntrack *nfct ;
   struct nf_bridge_info *nf_bridge ;
   unsigned int len ;
   unsigned int data_len ;
   __u16 mac_len ;
   __u16 hdr_len ;
   __u16 queue_mapping ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) cloned : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) nohdr : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) fclone : 2 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) peeked : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) head_frag : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) xmit_more : 1 ;
   __u32 headers_start[0U] ;
   __u8 __pkt_type_offset[0U] ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))) pkt_type : 3 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) pfmemalloc : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ignore_df : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))) nfctinfo : 3 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) nf_trace : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) ip_summed : 2 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ooo_okay : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) l4_hash : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) sw_hash : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) wifi_acked_valid : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) wifi_acked : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) no_fcs : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) encapsulation : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) encap_hdr_csum : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) csum_valid : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) csum_complete_sw : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) csum_level : 2 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) csum_bad : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) ndisc_nodetype : 2 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ipvs_property : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) inner_protocol_type : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) remcsum_offload : 1 ;
   __u16 tc_index ;
   __u16 tc_verd ;
   union __anonunion_231 __anonCompField_sk_buff_70 ;
   __u32 priority ;
   int skb_iif ;
   __u32 hash ;
   __be16 vlan_proto ;
   __u16 vlan_tci ;
   union __anonunion_233 __anonCompField_sk_buff_71 ;
   __u32 secmark ;
   union __anonunion_234 __anonCompField_sk_buff_72 ;
   union __anonunion_235 __anonCompField_sk_buff_73 ;
   __u16 inner_transport_header ;
   __u16 inner_network_header ;
   __u16 inner_mac_header ;
   __be16 protocol ;
   __u16 transport_header ;
   __u16 network_header ;
   __u16 mac_header ;
   __u32 headers_end[0U] ;
   sk_buff_data_t tail ;
   sk_buff_data_t end ;
   unsigned char *head ;
   unsigned char *data ;
   unsigned int truesize ;
   atomic_t users ;
};

#line 718 
struct dst_entry;

#line 767 
struct rtable;

#line 1182  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dmaengine.h"
struct dql {
   unsigned int num_queued ;
   unsigned int adj_limit ;
   unsigned int last_obj_cnt ;
   unsigned int limit ;
   unsigned int num_completed ;
   unsigned int prev_ovlimit ;
   unsigned int prev_num_queued ;
   unsigned int prev_last_obj_cnt ;
   unsigned int lowest_slack ;
   unsigned long slack_start_time ;
   unsigned int max_limit ;
   unsigned int min_limit ;
   unsigned int slack_hold_time ;
};

#line 43  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_sync_serial_settings_237 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
};

#line 43  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_sync_serial_settings_237 sync_serial_settings;

#line 50  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_te1_settings_238 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
   unsigned int slot_map ;
};

#line 50  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_te1_settings_238 te1_settings;

#line 55  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_raw_hdlc_proto_239 {
   unsigned short encoding ;
   unsigned short parity ;
};

#line 55  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_raw_hdlc_proto_239 raw_hdlc_proto;

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_240 {
   unsigned int t391 ;
   unsigned int t392 ;
   unsigned int n391 ;
   unsigned int n392 ;
   unsigned int n393 ;
   unsigned short lmi ;
   unsigned short dce ;
};

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_240 fr_proto;

#line 69  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_241 {
   unsigned int dlci ;
};

#line 69  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_241 fr_proto_pvc;

#line 74  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_info_242 {
   unsigned int dlci ;
   char master[16U] ;
};

#line 74  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_info_242 fr_proto_pvc_info;

#line 79  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_cisco_proto_243 {
   unsigned int interval ;
   unsigned int timeout ;
};

#line 79  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_cisco_proto_243 cisco_proto;

#line 117  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct ifmap {
   unsigned long mem_start ;
   unsigned long mem_end ;
   unsigned short base_addr ;
   unsigned char irq ;
   unsigned char dma ;
   unsigned char port ;
};

#line 177  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if.h"
union __anonunion_ifs_ifsu_244 {
   raw_hdlc_proto *raw_hdlc ;
   cisco_proto *cisco ;
   fr_proto *fr ;
   fr_proto_pvc *fr_pvc ;
   fr_proto_pvc_info *fr_pvc_info ;
   sync_serial_settings *sync ;
   te1_settings *te1 ;
};

#line 177  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if.h"
struct if_settings {
   unsigned int type ;
   unsigned int size ;
   union __anonunion_ifs_ifsu_244 ifs_ifsu ;
};

#line 195  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if.h"
union __anonunion_ifr_ifrn_245 {
   char ifrn_name[16U] ;
};

#line 195  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if.h"
union __anonunion_ifr_ifru_246 {
   struct sockaddr ifru_addr ;
   struct sockaddr ifru_dstaddr ;
   struct sockaddr ifru_broadaddr ;
   struct sockaddr ifru_netmask ;
   struct sockaddr ifru_hwaddr ;
   short ifru_flags ;
   int ifru_ivalue ;
   int ifru_mtu ;
   struct ifmap ifru_map ;
   char ifru_slave[16U] ;
   char ifru_newname[16U] ;
   void *ifru_data ;
   struct if_settings ifru_settings ;
};

#line 195  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if.h"
struct ifreq {
   union __anonunion_ifr_ifrn_245 ifr_ifrn ;
   union __anonunion_ifr_ifru_246 ifr_ifru ;
};

#line 91  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kdev_t.h"
struct hlist_bl_node;

#line 91  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kdev_t.h"
struct hlist_bl_head {
   struct hlist_bl_node *first ;
};

#line 36  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list_bl.h"
struct hlist_bl_node {
   struct hlist_bl_node *next ;
   struct hlist_bl_node **pprev ;
};

#line 114  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rculist_bl.h"
struct __anonstruct_251 {
   spinlock_t lock ;
   int count ;
};

#line 114  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rculist_bl.h"
union __anonunion_250 {
   struct __anonstruct_251 __anonCompField___anonunion_250_74 ;
};

#line 114  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rculist_bl.h"
struct lockref {
   union __anonunion_250 __anonCompField_lockref_75 ;
};

#line 50  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockref.h"
struct vfsmount;

#line 51  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockref.h"
struct __anonstruct_253 {
   u32 hash ;
   u32 len ;
};

#line 51  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockref.h"
union __anonunion_252 {
   struct __anonstruct_253 __anonCompField___anonunion_252_76 ;
   u64 hash_len ;
};

#line 51  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockref.h"
struct qstr {
   union __anonunion_252 __anonCompField_qstr_77 ;
   unsigned char const *name ;
};

#line 90  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dcache.h"
struct dentry_operations;

#line 90  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dcache.h"
union __anonunion_d_u_254 {
   struct hlist_node d_alias ;
   struct callback_head d_rcu ;
};

#line 90  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dcache.h"
struct dentry {
   unsigned int d_flags ;
   seqcount_t d_seq ;
   struct hlist_bl_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct inode *d_inode ;
   unsigned char d_iname[32U] ;
   struct lockref d_lockref ;
   struct dentry_operations const *d_op ;
   struct super_block *d_sb ;
   unsigned long d_time ;
   void *d_fsdata ;
   struct list_head d_lru ;
   struct list_head d_child ;
   struct list_head d_subdirs ;
   union __anonunion_d_u_254 d_u ;
};

#line 142  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_weak_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_hash)(struct dentry const *, struct qstr *) ;
   int (*d_compare)(struct dentry const *, struct dentry const *, unsigned int , char const *, struct qstr const *) ;
   int (*d_delete)(struct dentry const *) ;
   void (*d_release)(struct dentry *) ;
   void (*d_prune)(struct dentry *) ;
   void (*d_iput)(struct dentry *, struct inode *) ;
   char *(*d_dname)(struct dentry *, char *, int ) ;
   struct vfsmount *(*d_automount)(struct path *) ;
   int (*d_manage)(struct dentry *, bool ) ;
   struct inode *(*d_select_inode)(struct dentry *, unsigned int ) ;
};

#line 586  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dcache.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
};

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/path.h"
struct list_lru_one {
   struct list_head list ;
   long nr_items ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list_lru.h"
struct list_lru_memcg {
   struct list_lru_one *lru[0U] ;
};

#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list_lru.h"
struct list_lru_node {
   spinlock_t lock ;
   struct list_lru_one lru ;
   struct list_lru_memcg *memcg_lrus ;
};

#line 47  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list_lru.h"
struct list_lru {
   struct list_lru_node *node ;
   struct list_head list ;
};

#line 58  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/radix-tree.h"
struct __anonstruct_258 {
   struct radix_tree_node *parent ;
   void *private_data ;
};

#line 58  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/radix-tree.h"
union __anonunion_257 {
   struct __anonstruct_258 __anonCompField___anonunion_257_78 ;
   struct callback_head callback_head ;
};

#line 58  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/radix-tree.h"
struct radix_tree_node {
   unsigned int path ;
   unsigned int count ;
   union __anonunion_257 __anonCompField_radix_tree_node_79 ;
   struct list_head private_list ;
   void *slots[64U] ;
   unsigned long tags[3U][1U] ;
};

#line 105  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/radix-tree.h"
struct radix_tree_root {
   unsigned int height ;
   gfp_t gfp_mask ;
   struct radix_tree_node *rnode ;
};

#line 428  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/radix-tree.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};

#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/fiemap.h"
enum migrate_mode {
    MIGRATE_ASYNC = 0,
    MIGRATE_SYNC_LIGHT = 1,
    MIGRATE_SYNC = 2
};

#line 47 
struct block_device;

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blk_types.h"
struct bio_vec {
   struct page *bv_page ;
   unsigned int bv_len ;
   unsigned int bv_offset ;
};

#line 60  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/fs.h"
struct export_operations;

#line 62 
struct kstatfs;

#line 63 
struct swap_info_struct;

#line 75  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   kuid_t ia_uid ;
   kgid_t ia_gid ;
   loff_t ia_size ;
   struct timespec ia_atime ;
   struct timespec ia_mtime ;
   struct timespec ia_ctime ;
   struct file *ia_file ;
};

#line 212  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dqblk_xfs.h"
struct dquot;

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/projid.h"
typedef __kernel_uid32_t projid_t;

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/projid.h"
struct __anonstruct_kprojid_t_262 {
   projid_t val ;
};

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/projid.h"
typedef struct __anonstruct_kprojid_t_262 kprojid_t;

#line 166  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/quota.h"
enum quota_type {
    USRQUOTA = 0,
    GRPQUOTA = 1,
    PRJQUOTA = 2
};

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
typedef long long qsize_t;

#line 67  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
union __anonunion_263 {
   kuid_t uid ;
   kgid_t gid ;
   kprojid_t projid ;
};

#line 67  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct kqid {
   union __anonunion_263 __anonCompField_kqid_81 ;
   enum quota_type type ;
};

#line 184  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time_t dqb_btime ;
   time_t dqb_itime ;
};

#line 206 
struct quota_format_type;

#line 207  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_max_spc_limit ;
   qsize_t dqi_max_ino_limit ;
   void *dqi_priv ;
};

#line 272  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   atomic_t dq_count ;
   wait_queue_head_t dq_wait_unused ;
   struct super_block *dq_sb ;
   struct kqid dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   struct mem_dqblk dq_dqb ;
};

#line 299  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block *, int ) ;
   int (*read_file_info)(struct super_block *, int ) ;
   int (*write_file_info)(struct super_block *, int ) ;
   int (*free_file_info)(struct super_block *, int ) ;
   int (*read_dqblk)(struct dquot *) ;
   int (*commit_dqblk)(struct dquot *) ;
   int (*release_dqblk)(struct dquot *) ;
};

#line 310  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct dquot_operations {
   int (*write_dquot)(struct dquot *) ;
   struct dquot *(*alloc_dquot)(struct super_block *, int ) ;
   void (*destroy_dquot)(struct dquot *) ;
   int (*acquire_dquot)(struct dquot *) ;
   int (*release_dquot)(struct dquot *) ;
   int (*mark_dirty)(struct dquot *) ;
   int (*write_info)(struct super_block *, int ) ;
   qsize_t *(*get_reserved_space)(struct inode *) ;
   int (*get_projid)(struct inode *, kprojid_t *) ;
};

#line 325  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct qc_dqblk {
   int d_fieldmask ;
   u64 d_spc_hardlimit ;
   u64 d_spc_softlimit ;
   u64 d_ino_hardlimit ;
   u64 d_ino_softlimit ;
   u64 d_space ;
   u64 d_ino_count ;
   s64 d_ino_timer ;
   s64 d_spc_timer ;
   int d_ino_warns ;
   int d_spc_warns ;
   u64 d_rt_spc_hardlimit ;
   u64 d_rt_spc_softlimit ;
   u64 d_rt_space ;
   s64 d_rt_spc_timer ;
   int d_rt_spc_warns ;
};

#line 348  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct qc_type_state {
   unsigned int flags ;
   unsigned int spc_timelimit ;
   unsigned int ino_timelimit ;
   unsigned int rt_spc_timelimit ;
   unsigned int spc_warnlimit ;
   unsigned int ino_warnlimit ;
   unsigned int rt_spc_warnlimit ;
   unsigned long long ino ;
   blkcnt_t blocks ;
   blkcnt_t nextents ;
};

#line 394  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct qc_state {
   unsigned int s_incoredqs ;
   struct qc_type_state s_state[3U] ;
};

#line 405  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct qc_info {
   int i_fieldmask ;
   unsigned int i_flags ;
   unsigned int i_spc_timelimit ;
   unsigned int i_ino_timelimit ;
   unsigned int i_rt_spc_timelimit ;
   unsigned int i_spc_warnlimit ;
   unsigned int i_ino_warnlimit ;
   unsigned int i_rt_spc_warnlimit ;
};

#line 418  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block *, int , int , struct path *) ;
   int (*quota_off)(struct super_block *, int ) ;
   int (*quota_enable)(struct super_block *, unsigned int ) ;
   int (*quota_disable)(struct super_block *, unsigned int ) ;
   int (*quota_sync)(struct super_block *, int ) ;
   int (*set_info)(struct super_block *, int , struct qc_info *) ;
   int (*get_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*set_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_state)(struct super_block *, struct qc_state *) ;
   int (*rm_xquota)(struct super_block *, unsigned int ) ;
};

#line 432  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops const *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};

#line 496  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct mutex dqio_mutex ;
   struct mutex dqonoff_mutex ;
   struct inode *files[3U] ;
   struct mem_dqinfo info[3U] ;
   struct quota_format_ops const *ops[3U] ;
};

#line 526  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct kiocb {
   struct file *ki_filp ;
   loff_t ki_pos ;
   void (*ki_complete)(struct kiocb *, long , long ) ;
   void *private ;
   int ki_flags ;
};

#line 366  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page *, struct writeback_control *) ;
   int (*readpage)(struct file *, struct page *) ;
   int (*writepages)(struct address_space *, struct writeback_control *) ;
   int (*set_page_dirty)(struct page *) ;
   int (*readpages)(struct file *, struct address_space *, struct list_head *, unsigned int ) ;
   int (*write_begin)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page **, void **) ;
   int (*write_end)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page *, void *) ;
   sector_t (*bmap)(struct address_space *, sector_t ) ;
   void (*invalidatepage)(struct page *, unsigned int , unsigned int ) ;
   int (*releasepage)(struct page *, gfp_t ) ;
   void (*freepage)(struct page *) ;
   ssize_t (*direct_IO)(struct kiocb *, struct iov_iter *, loff_t ) ;
   int (*migratepage)(struct address_space *, struct page *, struct page *, enum migrate_mode ) ;
   int (*launder_page)(struct page *) ;
   int (*is_partially_uptodate)(struct page *, unsigned long , unsigned long ) ;
   void (*is_dirty_writeback)(struct page *, bool *, bool *) ;
   int (*error_remove_page)(struct address_space *, struct page *) ;
   int (*swap_activate)(struct swap_info_struct *, struct file *, sector_t *) ;
   void (*swap_deactivate)(struct file *) ;
};

#line 423  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct radix_tree_root page_tree ;
   spinlock_t tree_lock ;
   atomic_t i_mmap_writable ;
   struct rb_root i_mmap ;
   struct rw_semaphore i_mmap_rwsem ;
   unsigned long nrpages ;
   unsigned long nrshadows ;
   unsigned long writeback_index ;
   struct address_space_operations const *a_ops ;
   unsigned long flags ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   void *private_data ;
};

#line 443 
struct request_queue;

#line 444 
struct hd_struct;

#line 444 
struct gendisk;

#line 444  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   int bd_openers ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   struct mutex bd_mutex ;
   struct list_head bd_inodes ;
   void *bd_claiming ;
   void *bd_holder ;
   int bd_holders ;
   bool bd_write_holder ;
   struct list_head bd_holder_disks ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct request_queue *bd_queue ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
};

#line 560 
struct posix_acl;

#line 561 
struct inode_operations;

#line 561  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
union __anonunion_266 {
   unsigned int const i_nlink ;
   unsigned int __i_nlink ;
};

#line 561  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
union __anonunion_267 {
   struct hlist_head i_dentry ;
   struct callback_head i_rcu ;
};

#line 561 
struct file_lock_context;

#line 561 
struct cdev;

#line 561  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
union __anonunion_268 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
   char *i_link ;
};

#line 561  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct inode {
   umode_t i_mode ;
   unsigned short i_opflags ;
   kuid_t i_uid ;
   kgid_t i_gid ;
   unsigned int i_flags ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   struct inode_operations const *i_op ;
   struct super_block *i_sb ;
   struct address_space *i_mapping ;
   void *i_security ;
   unsigned long i_ino ;
   union __anonunion_266 __anonCompField_inode_82 ;
   dev_t i_rdev ;
   loff_t i_size ;
   struct timespec i_atime ;
   struct timespec i_mtime ;
   struct timespec i_ctime ;
   spinlock_t i_lock ;
   unsigned short i_bytes ;
   unsigned int i_blkbits ;
   blkcnt_t i_blocks ;
   unsigned long i_state ;
   struct mutex i_mutex ;
   unsigned long dirtied_when ;
   unsigned long dirtied_time_when ;
   struct hlist_node i_hash ;
   struct list_head i_wb_list ;
   struct bdi_writeback *i_wb ;
   int i_wb_frn_winner ;
   u16 i_wb_frn_avg_time ;
   u16 i_wb_frn_history ;
   struct list_head i_lru ;
   struct list_head i_sb_list ;
   union __anonunion_267 __anonCompField_inode_83 ;
   u64 i_version ;
   atomic_t i_count ;
   atomic_t i_dio_count ;
   atomic_t i_writecount ;
   atomic_t i_readcount ;
   struct file_operations const *i_fop ;
   struct file_lock_context *i_flctx ;
   struct address_space i_data ;
   struct list_head i_devices ;
   union __anonunion_268 __anonCompField_inode_84 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct hlist_head i_fsnotify_marks ;
   void *i_private ;
};

#line 807  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   kuid_t uid ;
   kuid_t euid ;
   int signum ;
};

#line 815  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};

#line 838  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
union __anonunion_f_u_269 {
   struct llist_node fu_llist ;
   struct callback_head fu_rcuhead ;
};

#line 838  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct file {
   union __anonunion_f_u_269 f_u ;
   struct path f_path ;
   struct inode *f_inode ;
   struct file_operations const *f_op ;
   spinlock_t f_lock ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   struct mutex f_pos_lock ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred const *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct list_head f_tfile_llink ;
   struct address_space *f_mapping ;
};

#line 923  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
typedef void *fl_owner_t;

#line 924 
struct file_lock;

#line 925  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock *, struct file_lock *) ;
   void (*fl_release_private)(struct file_lock *) ;
};

#line 931  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct lock_manager_operations {
   int (*lm_compare_owner)(struct file_lock *, struct file_lock *) ;
   unsigned long (*lm_owner_key)(struct file_lock *) ;
   fl_owner_t (*lm_get_owner)(fl_owner_t ) ;
   void (*lm_put_owner)(fl_owner_t ) ;
   void (*lm_notify)(struct file_lock *) ;
   int (*lm_grant)(struct file_lock *, int ) ;
   bool (*lm_break)(struct file_lock *) ;
   int (*lm_change)(struct file_lock *, int , struct list_head *) ;
   void (*lm_setup)(struct file_lock *, void **) ;
};

#line 952 
struct nlm_lockowner;

#line 953  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};

#line 14  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/nfs_fs_i.h"
struct nfs4_lock_state;

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/nfs_fs_i.h"
struct __anonstruct_afs_271 {
   struct list_head link ;
   int state ;
};

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/nfs_fs_i.h"
union __anonunion_fl_u_270 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_271 afs ;
};

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/nfs_fs_i.h"
struct file_lock {
   struct file_lock *fl_next ;
   struct list_head fl_list ;
   struct hlist_node fl_link ;
   struct list_head fl_block ;
   fl_owner_t fl_owner ;
   unsigned int fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   int fl_link_cpu ;
   struct pid *fl_nspid ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   unsigned long fl_downgrade_time ;
   struct file_lock_operations const *fl_ops ;
   struct lock_manager_operations const *fl_lmops ;
   union __anonunion_fl_u_270 fl_u ;
};

#line 1005  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct file_lock_context {
   spinlock_t flc_lock ;
   struct list_head flc_flock ;
   struct list_head flc_posix ;
   struct list_head flc_lease ;
};

#line 1221  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct fasync_struct {
   spinlock_t fa_lock ;
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
   struct callback_head fa_rcu ;
};

#line 1256  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct sb_writers {
   struct percpu_counter counter[3U] ;
   wait_queue_head_t wait ;
   int frozen ;
   wait_queue_head_t wait_unfrozen ;
   struct lockdep_map lock_map[3U] ;
};

#line 1287 
struct super_operations;

#line 1287 
struct xattr_handler;

#line 1287 
struct mtd_info;

#line 1287  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations const *s_op ;
   struct dquot_operations const *dq_op ;
   struct quotactl_ops const *s_qcop ;
   struct export_operations const *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_iflags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   int s_count ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler const **s_xattr ;
   struct list_head s_inodes ;
   struct hlist_bl_head s_anon ;
   struct list_head s_mounts ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct hlist_node s_instances ;
   unsigned int s_quota_types ;
   struct quota_info s_dquot ;
   struct sb_writers s_writers ;
   char s_id[32U] ;
   u8 s_uuid[16U] ;
   void *s_fs_info ;
   unsigned int s_max_links ;
   fmode_t s_mode ;
   u32 s_time_gran ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   char *s_options ;
   struct dentry_operations const *s_d_op ;
   int cleancache_poolid ;
   struct shrinker s_shrink ;
   atomic_long_t s_remove_count ;
   int s_readonly_remount ;
   struct workqueue_struct *s_dio_done_wq ;
   struct hlist_head s_pins ;
   struct list_lru s_dentry_lru ;
   struct list_lru s_inode_lru ;
   struct callback_head rcu ;
   int s_stack_depth ;
};

#line 1526  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};

#line 1540 
struct dir_context;

#line 1565  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct dir_context {
   int (*actor)(struct dir_context *, char const *, int , loff_t , u64 , unsigned int ) ;
   loff_t pos ;
};

#line 1572  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file *, loff_t , int ) ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char const *, size_t , loff_t *) ;
   ssize_t (*read_iter)(struct kiocb *, struct iov_iter *) ;
   ssize_t (*write_iter)(struct kiocb *, struct iov_iter *) ;
   int (*iterate)(struct file *, struct dir_context *) ;
   unsigned int (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   int (*mremap)(struct file *, struct vm_area_struct *) ;
   int (*open)(struct inode *, struct file *) ;
   int (*flush)(struct file *, fl_owner_t ) ;
   int (*release)(struct inode *, struct file *) ;
   int (*fsync)(struct file *, loff_t , loff_t , int ) ;
   int (*aio_fsync)(struct kiocb *, int ) ;
   int (*fasync)(int , struct file *, int ) ;
   int (*lock)(struct file *, int , struct file_lock *) ;
   ssize_t (*sendpage)(struct file *, struct page *, int , size_t , loff_t *, int ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*check_flags)(int ) ;
   int (*flock)(struct file *, int , struct file_lock *) ;
   ssize_t (*splice_write)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ) ;
   ssize_t (*splice_read)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*setlease)(struct file *, long , struct file_lock **, void **) ;
   long (*fallocate)(struct file *, int , loff_t , loff_t ) ;
   void (*show_fdinfo)(struct seq_file *, struct file *) ;
};

#line 1633  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct inode_operations {
   struct dentry *(*lookup)(struct inode *, struct dentry *, unsigned int ) ;
   char const *(*follow_link)(struct dentry *, void **) ;
   int (*permission)(struct inode *, int ) ;
   struct posix_acl *(*get_acl)(struct inode *, int ) ;
   int (*readlink)(struct dentry *, char *, int ) ;
   void (*put_link)(struct inode *, void *) ;
   int (*create)(struct inode *, struct dentry *, umode_t , bool ) ;
   int (*link)(struct dentry *, struct inode *, struct dentry *) ;
   int (*unlink)(struct inode *, struct dentry *) ;
   int (*symlink)(struct inode *, struct dentry *, char const *) ;
   int (*mkdir)(struct inode *, struct dentry *, umode_t ) ;
   int (*rmdir)(struct inode *, struct dentry *) ;
   int (*mknod)(struct inode *, struct dentry *, umode_t , dev_t ) ;
   int (*rename)(struct inode *, struct dentry *, struct inode *, struct dentry *) ;
   int (*rename2)(struct inode *, struct dentry *, struct inode *, struct dentry *, unsigned int ) ;
   int (*setattr)(struct dentry *, struct iattr *) ;
   int (*getattr)(struct vfsmount *, struct dentry *, struct kstat *) ;
   int (*setxattr)(struct dentry *, char const *, void const *, size_t , int ) ;
   ssize_t (*getxattr)(struct dentry *, char const *, void *, size_t ) ;
   ssize_t (*listxattr)(struct dentry *, char *, size_t ) ;
   int (*removexattr)(struct dentry *, char const *) ;
   int (*fiemap)(struct inode *, struct fiemap_extent_info *, u64 , u64 ) ;
   int (*update_time)(struct inode *, struct timespec *, int ) ;
   int (*atomic_open)(struct inode *, struct dentry *, struct file *, unsigned int , umode_t , int *) ;
   int (*tmpfile)(struct inode *, struct dentry *, umode_t ) ;
   int (*set_acl)(struct inode *, struct posix_acl *, int ) ;
};

#line 1687  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block *) ;
   void (*destroy_inode)(struct inode *) ;
   void (*dirty_inode)(struct inode *, int ) ;
   int (*write_inode)(struct inode *, struct writeback_control *) ;
   int (*drop_inode)(struct inode *) ;
   void (*evict_inode)(struct inode *) ;
   void (*put_super)(struct super_block *) ;
   int (*sync_fs)(struct super_block *, int ) ;
   int (*freeze_super)(struct super_block *) ;
   int (*freeze_fs)(struct super_block *) ;
   int (*thaw_super)(struct super_block *) ;
   int (*unfreeze_fs)(struct super_block *) ;
   int (*statfs)(struct dentry *, struct kstatfs *) ;
   int (*remount_fs)(struct super_block *, int *, char *) ;
   void (*umount_begin)(struct super_block *) ;
   int (*show_options)(struct seq_file *, struct dentry *) ;
   int (*show_devname)(struct seq_file *, struct dentry *) ;
   int (*show_path)(struct seq_file *, struct dentry *) ;
   int (*show_stats)(struct seq_file *, struct dentry *) ;
   ssize_t (*quota_read)(struct super_block *, int , char *, size_t , loff_t ) ;
   ssize_t (*quota_write)(struct super_block *, int , char const *, size_t , loff_t ) ;
   struct dquot **(*get_dquots)(struct inode *) ;
   int (*bdev_try_to_free_page)(struct super_block *, struct page *, gfp_t ) ;
   long (*nr_cached_objects)(struct super_block *, struct shrink_control *) ;
   long (*free_cached_objects)(struct super_block *, struct shrink_control *) ;
};

#line 1926  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct file_system_type {
   char const *name ;
   int fs_flags ;
   struct dentry *(*mount)(struct file_system_type *, int , char const *, void *) ;
   void (*kill_sb)(struct super_block *) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct hlist_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key s_vfs_rename_key ;
   struct lock_class_key s_writers_key[3U] ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
};

#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/compat.h"
typedef s32 compat_time_t;

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/compat.h"
typedef s32 compat_long_t;

#line 44  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/compat.h"
typedef u32 compat_uptr_t;

#line 45  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/compat.h"
struct compat_timespec {
   compat_time_t tv_sec ;
   s32 tv_nsec ;
};

#line 276  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/compat.h"
struct compat_robust_list {
   compat_uptr_t next ;
};

#line 280  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/compat.h"
struct compat_robust_list_head {
   struct compat_robust_list list ;
   compat_long_t futex_offset ;
   compat_uptr_t list_op_pending ;
};

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/if_ether.h"
struct ethtool_cmd {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertising ;
   __u16 speed ;
   __u8 duplex ;
   __u8 port ;
   __u8 phy_address ;
   __u8 transceiver ;
   __u8 autoneg ;
   __u8 mdio_support ;
   __u32 maxtxpkt ;
   __u32 maxrxpkt ;
   __u16 speed_hi ;
   __u8 eth_tp_mdix ;
   __u8 eth_tp_mdix_ctrl ;
   __u32 lp_advertising ;
   __u32 reserved[2U] ;
};

#line 125  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_drvinfo {
   __u32 cmd ;
   char driver[32U] ;
   char version[32U] ;
   char fw_version[32U] ;
   char bus_info[32U] ;
   char erom_version[32U] ;
   char reserved2[12U] ;
   __u32 n_priv_flags ;
   __u32 n_stats ;
   __u32 testinfo_len ;
   __u32 eedump_len ;
   __u32 regdump_len ;
};

#line 189  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_wolinfo {
   __u32 cmd ;
   __u32 supported ;
   __u32 wolopts ;
   __u8 sopass[6U] ;
};

#line 233  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_tunable {
   __u32 cmd ;
   __u32 id ;
   __u32 type_id ;
   __u32 len ;
   void *data[0U] ;
};

#line 245  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_regs {
   __u32 cmd ;
   __u32 version ;
   __u32 len ;
   __u8 data[0U] ;
};

#line 267  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_eeprom {
   __u32 cmd ;
   __u32 magic ;
   __u32 offset ;
   __u32 len ;
   __u8 data[0U] ;
};

#line 293  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_eee {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertised ;
   __u32 lp_advertised ;
   __u32 eee_active ;
   __u32 eee_enabled ;
   __u32 tx_lpi_enabled ;
   __u32 tx_lpi_timer ;
   __u32 reserved[2U] ;
};

#line 322  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_modinfo {
   __u32 cmd ;
   __u32 type ;
   __u32 eeprom_len ;
   __u32 reserved[8U] ;
};

#line 339  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_coalesce {
   __u32 cmd ;
   __u32 rx_coalesce_usecs ;
   __u32 rx_max_coalesced_frames ;
   __u32 rx_coalesce_usecs_irq ;
   __u32 rx_max_coalesced_frames_irq ;
   __u32 tx_coalesce_usecs ;
   __u32 tx_max_coalesced_frames ;
   __u32 tx_coalesce_usecs_irq ;
   __u32 tx_max_coalesced_frames_irq ;
   __u32 stats_block_coalesce_usecs ;
   __u32 use_adaptive_rx_coalesce ;
   __u32 use_adaptive_tx_coalesce ;
   __u32 pkt_rate_low ;
   __u32 rx_coalesce_usecs_low ;
   __u32 rx_max_coalesced_frames_low ;
   __u32 tx_coalesce_usecs_low ;
   __u32 tx_max_coalesced_frames_low ;
   __u32 pkt_rate_high ;
   __u32 rx_coalesce_usecs_high ;
   __u32 rx_max_coalesced_frames_high ;
   __u32 tx_coalesce_usecs_high ;
   __u32 tx_max_coalesced_frames_high ;
   __u32 rate_sample_interval ;
};

#line 438  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_ringparam {
   __u32 cmd ;
   __u32 rx_max_pending ;
   __u32 rx_mini_max_pending ;
   __u32 rx_jumbo_max_pending ;
   __u32 tx_max_pending ;
   __u32 rx_pending ;
   __u32 rx_mini_pending ;
   __u32 rx_jumbo_pending ;
   __u32 tx_pending ;
};

#line 475  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_channels {
   __u32 cmd ;
   __u32 max_rx ;
   __u32 max_tx ;
   __u32 max_other ;
   __u32 max_combined ;
   __u32 rx_count ;
   __u32 tx_count ;
   __u32 other_count ;
   __u32 combined_count ;
};

#line 503  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_pauseparam {
   __u32 cmd ;
   __u32 autoneg ;
   __u32 rx_pause ;
   __u32 tx_pause ;
};

#line 605  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_test {
   __u32 cmd ;
   __u32 flags ;
   __u32 reserved ;
   __u32 len ;
   __u64 data[0U] ;
};

#line 637  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_stats {
   __u32 cmd ;
   __u32 n_stats ;
   __u64 data[0U] ;
};

#line 679  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_tcpip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tos ;
};

#line 712  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 spi ;
   __u8 tos ;
};

#line 728  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_usrip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 l4_4_bytes ;
   __u8 tos ;
   __u8 ip_ver ;
   __u8 proto ;
};

#line 748  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
union ethtool_flow_union {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   struct ethhdr ether_spec ;
   __u8 hdata[52U] ;
};

#line 759  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_flow_ext {
   __u8 padding[2U] ;
   unsigned char h_dest[6U] ;
   __be16 vlan_etype ;
   __be16 vlan_tci ;
   __be32 data[2U] ;
};

#line 778  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_rx_flow_spec {
   __u32 flow_type ;
   union ethtool_flow_union h_u ;
   struct ethtool_flow_ext h_ext ;
   union ethtool_flow_union m_u ;
   struct ethtool_flow_ext m_ext ;
   __u64 ring_cookie ;
   __u32 location ;
};

#line 828  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_rxnfc {
   __u32 cmd ;
   __u32 flow_type ;
   __u64 data ;
   struct ethtool_rx_flow_spec fs ;
   __u32 rule_cnt ;
   __u32 rule_locs[0U] ;
};

#line 999  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_flash {
   __u32 cmd ;
   __u32 region ;
   char data[128U] ;
};

#line 1007  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_dump {
   __u32 cmd ;
   __u32 version ;
   __u32 flag ;
   __u32 len ;
   __u8 data[0U] ;
};

#line 1083  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_ts_info {
   __u32 cmd ;
   __u32 so_timestamping ;
   __s32 phc_index ;
   __u32 tx_types ;
   __u32 tx_reserved[3U] ;
   __u32 rx_filters ;
   __u32 rx_reserved[3U] ;
};

#line 44  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ethtool.h"
enum ethtool_phys_id_state {
    ETHTOOL_ID_INACTIVE = 0,
    ETHTOOL_ID_ACTIVE = 1,
    ETHTOOL_ID_ON = 2,
    ETHTOOL_ID_OFF = 3
};

#line 99  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ethtool.h"
struct ethtool_ops {
   int (*get_settings)(struct net_device *, struct ethtool_cmd *) ;
   int (*set_settings)(struct net_device *, struct ethtool_cmd *) ;
   void (*get_drvinfo)(struct net_device *, struct ethtool_drvinfo *) ;
   int (*get_regs_len)(struct net_device *) ;
   void (*get_regs)(struct net_device *, struct ethtool_regs *, void *) ;
   void (*get_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   int (*set_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   u32 (*get_msglevel)(struct net_device *) ;
   void (*set_msglevel)(struct net_device *, u32 ) ;
   int (*nway_reset)(struct net_device *) ;
   u32 (*get_link)(struct net_device *) ;
   int (*get_eeprom_len)(struct net_device *) ;
   int (*get_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*set_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   int (*set_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   void (*get_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   int (*set_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   void (*get_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   int (*set_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   void (*self_test)(struct net_device *, struct ethtool_test *, u64 *) ;
   void (*get_strings)(struct net_device *, u32 , u8 *) ;
   int (*set_phys_id)(struct net_device *, enum ethtool_phys_id_state ) ;
   void (*get_ethtool_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
   int (*begin)(struct net_device *) ;
   void (*complete)(struct net_device *) ;
   u32 (*get_priv_flags)(struct net_device *) ;
   int (*set_priv_flags)(struct net_device *, u32 ) ;
   int (*get_sset_count)(struct net_device *, int ) ;
   int (*get_rxnfc)(struct net_device *, struct ethtool_rxnfc *, u32 *) ;
   int (*set_rxnfc)(struct net_device *, struct ethtool_rxnfc *) ;
   int (*flash_device)(struct net_device *, struct ethtool_flash *) ;
   int (*reset)(struct net_device *, u32 *) ;
   u32 (*get_rxfh_key_size)(struct net_device *) ;
   u32 (*get_rxfh_indir_size)(struct net_device *) ;
   int (*get_rxfh)(struct net_device *, u32 *, u8 *, u8 *) ;
   int (*set_rxfh)(struct net_device *, u32 const *, u8 const *, u8 const ) ;
   void (*get_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*set_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*get_dump_flag)(struct net_device *, struct ethtool_dump *) ;
   int (*get_dump_data)(struct net_device *, struct ethtool_dump *, void *) ;
   int (*set_dump)(struct net_device *, struct ethtool_dump *) ;
   int (*get_ts_info)(struct net_device *, struct ethtool_ts_info *) ;
   int (*get_module_info)(struct net_device *, struct ethtool_modinfo *) ;
   int (*get_module_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*set_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*get_tunable)(struct net_device *, struct ethtool_tunable const *, void *) ;
   int (*set_tunable)(struct net_device *, struct ethtool_tunable const *, void const *) ;
};

#line 235  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/flow.h"
struct prot_inuse;

#line 236  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/flow.h"
struct netns_core {
   struct ctl_table_header *sysctl_hdr ;
   int sysctl_somaxconn ;
   struct prot_inuse *inuse ;
};

#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct u64_stats_sync {
   
};

#line 146  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/u64_stats_sync.h"
struct ipstats_mib {
   u64 mibs[36U] ;
   struct u64_stats_sync syncp ;
};

#line 61  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct icmp_mib {
   unsigned long mibs[28U] ;
};

#line 67  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct icmpmsg_mib {
   atomic_long_t mibs[512U] ;
};

#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct icmpv6_mib {
   unsigned long mibs[6U] ;
};

#line 83  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct icmpv6msg_mib {
   atomic_long_t mibs[512U] ;
};

#line 93  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct tcp_mib {
   unsigned long mibs[16U] ;
};

#line 100  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct udp_mib {
   unsigned long mibs[9U] ;
};

#line 106  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct linux_mib {
   unsigned long mibs[115U] ;
};

#line 112  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct linux_xfrm_mib {
   unsigned long mibs[29U] ;
};

#line 118 
struct proc_dir_entry;

#line 118  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct netns_mib {
   struct tcp_mib *tcp_statistics ;
   struct ipstats_mib *ip_statistics ;
   struct linux_mib *net_statistics ;
   struct udp_mib *udp_statistics ;
   struct udp_mib *udplite_statistics ;
   struct icmp_mib *icmp_statistics ;
   struct icmpmsg_mib *icmpmsg_statistics ;
   struct proc_dir_entry *proc_net_devsnmp6 ;
   struct udp_mib *udp_stats_in6 ;
   struct udp_mib *udplite_stats_in6 ;
   struct ipstats_mib *ipv6_statistics ;
   struct icmpv6_mib *icmpv6_statistics ;
   struct icmpv6msg_mib *icmpv6msg_statistics ;
   struct linux_xfrm_mib *xfrm_statistics ;
};

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/mib.h"
struct netns_unix {
   int sysctl_max_dgram_qlen ;
   struct ctl_table_header *ctl ;
};

#line 12  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/unix.h"
struct netns_packet {
   struct mutex sklist_lock ;
   struct hlist_head sklist ;
};

#line 14  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/packet.h"
struct netns_frags {
   struct percpu_counter mem ;
   int timeout ;
   int high_thresh ;
   int low_thresh ;
};

#line 184  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/inet_frag.h"
struct ipv4_devconf;

#line 185 
struct fib_rules_ops;

#line 186 
struct fib_table;

#line 187  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/inet_frag.h"
struct local_ports {
   seqlock_t lock ;
   int range[2U] ;
   bool warned ;
};

#line 24  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ipv4.h"
struct ping_group_range {
   seqlock_t lock ;
   kgid_t range[2U] ;
};

#line 29 
struct inet_peer_base;

#line 29 
struct xt_table;

#line 29  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ipv4.h"
struct netns_ipv4 {
   struct ctl_table_header *forw_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *ipv4_hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *xfrm4_hdr ;
   struct ipv4_devconf *devconf_all ;
   struct ipv4_devconf *devconf_dflt ;
   struct fib_rules_ops *rules_ops ;
   bool fib_has_custom_rules ;
   struct fib_table *fib_local ;
   struct fib_table *fib_main ;
   struct fib_table *fib_default ;
   int fib_num_tclassid_users ;
   struct hlist_head *fib_table_hash ;
   bool fib_offload_disabled ;
   struct sock *fibnl ;
   struct sock **icmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct inet_peer_base *peers ;
   struct sock **tcp_sk ;
   struct netns_frags frags ;
   struct xt_table *iptable_filter ;
   struct xt_table *iptable_mangle ;
   struct xt_table *iptable_raw ;
   struct xt_table *arptable_filter ;
   struct xt_table *iptable_security ;
   struct xt_table *nat_table ;
   int sysctl_icmp_echo_ignore_all ;
   int sysctl_icmp_echo_ignore_broadcasts ;
   int sysctl_icmp_ignore_bogus_error_responses ;
   int sysctl_icmp_ratelimit ;
   int sysctl_icmp_ratemask ;
   int sysctl_icmp_errors_use_inbound_ifaddr ;
   struct local_ports ip_local_ports ;
   int sysctl_tcp_ecn ;
   int sysctl_tcp_ecn_fallback ;
   int sysctl_ip_no_pmtu_disc ;
   int sysctl_ip_fwd_use_pmtu ;
   int sysctl_ip_nonlocal_bind ;
   int sysctl_fwmark_reflect ;
   int sysctl_tcp_fwmark_accept ;
   int sysctl_tcp_mtu_probing ;
   int sysctl_tcp_base_mss ;
   int sysctl_tcp_probe_threshold ;
   u32 sysctl_tcp_probe_interval ;
   struct ping_group_range ping_group_range ;
   atomic_t dev_addr_genid ;
   unsigned long *sysctl_local_reserved_ports ;
   struct list_head mr_tables ;
   struct fib_rules_ops *mr_rules_ops ;
   atomic_t rt_genid ;
};

#line 113 
struct neighbour;

#line 113  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ipv4.h"
struct dst_ops {
   unsigned short family ;
   unsigned int gc_thresh ;
   int (*gc)(struct dst_ops *) ;
   struct dst_entry *(*check)(struct dst_entry *, __u32 ) ;
   unsigned int (*default_advmss)(struct dst_entry const *) ;
   unsigned int (*mtu)(struct dst_entry const *) ;
   u32 *(*cow_metrics)(struct dst_entry *, unsigned long ) ;
   void (*destroy)(struct dst_entry *) ;
   void (*ifdown)(struct dst_entry *, struct net_device *, int ) ;
   struct dst_entry *(*negative_advice)(struct dst_entry *) ;
   void (*link_failure)(struct sk_buff *) ;
   void (*update_pmtu)(struct dst_entry *, struct sock *, struct sk_buff *, u32 ) ;
   void (*redirect)(struct dst_entry *, struct sock *, struct sk_buff *) ;
   int (*local_out)(struct sk_buff *) ;
   struct neighbour *(*neigh_lookup)(struct dst_entry const *, struct sk_buff *, void const *) ;
   struct kmem_cache *kmem_cachep ;
   struct percpu_counter pcpuc_entries ;
};

#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dst_ops.h"
struct netns_sysctl_ipv6 {
   struct ctl_table_header *hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *icmp_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *xfrm6_hdr ;
   int bindv6only ;
   int flush_delay ;
   int ip6_rt_max_size ;
   int ip6_rt_gc_min_interval ;
   int ip6_rt_gc_timeout ;
   int ip6_rt_gc_interval ;
   int ip6_rt_gc_elasticity ;
   int ip6_rt_mtu_expires ;
   int ip6_rt_min_advmss ;
   int flowlabel_consistency ;
   int auto_flowlabels ;
   int icmpv6_time ;
   int anycast_src_echo_reply ;
   int fwmark_reflect ;
   int idgen_retries ;
   int idgen_delay ;
   int flowlabel_state_ranges ;
};

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ipv6.h"
struct ipv6_devconf;

#line 39 
struct rt6_info;

#line 39 
struct rt6_statistics;

#line 39 
struct fib6_table;

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ipv6.h"
struct netns_ipv6 {
   struct netns_sysctl_ipv6 sysctl ;
   struct ipv6_devconf *devconf_all ;
   struct ipv6_devconf *devconf_dflt ;
   struct inet_peer_base *peers ;
   struct netns_frags frags ;
   struct xt_table *ip6table_filter ;
   struct xt_table *ip6table_mangle ;
   struct xt_table *ip6table_raw ;
   struct xt_table *ip6table_security ;
   struct xt_table *ip6table_nat ;
   struct rt6_info *ip6_null_entry ;
   struct rt6_statistics *rt6_stats ;
   struct timer_list ip6_fib_timer ;
   struct hlist_head *fib_table_hash ;
   struct fib6_table *fib6_main_tbl ;
   struct dst_ops ip6_dst_ops ;
   unsigned int ip6_rt_gc_expire ;
   unsigned long ip6_rt_last_gc ;
   struct rt6_info *ip6_prohibit_entry ;
   struct rt6_info *ip6_blk_hole_entry ;
   struct fib6_table *fib6_local_tbl ;
   struct fib_rules_ops *fib6_rules_ops ;
   struct sock **icmp_sk ;
   struct sock *ndisc_sk ;
   struct sock *tcp_sk ;
   struct sock *igmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct list_head mr6_tables ;
   struct fib_rules_ops *mr6_rules_ops ;
   atomic_t dev_addr_genid ;
   atomic_t fib6_sernum ;
};

#line 85  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ipv6.h"
struct netns_nf_frag {
   struct netns_sysctl_ipv6 sysctl ;
   struct netns_frags frags ;
};

#line 91  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ipv6.h"
struct netns_sysctl_lowpan {
   struct ctl_table_header *frags_hdr ;
};

#line 14  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ieee802154_6lowpan.h"
struct netns_ieee802154_lowpan {
   struct netns_sysctl_lowpan sysctl ;
   struct netns_frags frags ;
};

#line 20 
struct sctp_mib;

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ieee802154_6lowpan.h"
struct netns_sctp {
   struct sctp_mib *sctp_statistics ;
   struct proc_dir_entry *proc_net_sctp ;
   struct ctl_table_header *sysctl_header ;
   struct sock *ctl_sock ;
   struct list_head local_addr_list ;
   struct list_head addr_waitq ;
   struct timer_list addr_wq_timer ;
   struct list_head auto_asconf_splist ;
   spinlock_t addr_wq_lock ;
   spinlock_t local_addr_lock ;
   unsigned int rto_initial ;
   unsigned int rto_min ;
   unsigned int rto_max ;
   int rto_alpha ;
   int rto_beta ;
   int max_burst ;
   int cookie_preserve_enable ;
   char *sctp_hmac_alg ;
   unsigned int valid_cookie_life ;
   unsigned int sack_timeout ;
   unsigned int hb_interval ;
   int max_retrans_association ;
   int max_retrans_path ;
   int max_retrans_init ;
   int pf_retrans ;
   int sndbuf_policy ;
   int rcvbuf_policy ;
   int default_auto_asconf ;
   int addip_enable ;
   int addip_noauth ;
   int prsctp_enable ;
   int auth_enable ;
   int scope_policy ;
   int rwnd_upd_shift ;
   unsigned long max_autoclose ;
};

#line 134  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/sctp.h"
struct netns_dccp {
   struct sock *v4_ctl_sk ;
   struct sock *v6_ctl_sk ;
};

#line 79  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/netfilter.h"
struct nf_logger;

#line 80  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/netfilter.h"
struct netns_nf {
   struct proc_dir_entry *proc_netfilter ;
   struct nf_logger const *nf_loggers[13U] ;
   struct ctl_table_header *nf_log_dir_header ;
};

#line 17  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/netfilter.h"
struct ebt_table;

#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/netfilter.h"
struct netns_xt {
   struct list_head tables[13U] ;
   bool notrack_deprecated_warning ;
   bool clusterip_deprecated_warning ;
   struct ebt_table *broute_table ;
   struct ebt_table *frame_filter ;
   struct ebt_table *frame_nat ;
};

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/x_tables.h"
struct hlist_nulls_node;

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/x_tables.h"
struct hlist_nulls_head {
   struct hlist_nulls_node *first ;
};

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/x_tables.h"
struct hlist_nulls_node {
   struct hlist_nulls_node *next ;
   struct hlist_nulls_node **pprev ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netfilter/nf_conntrack_tcp.h"
struct nf_proto_net {
   struct ctl_table_header *ctl_table_header ;
   struct ctl_table *ctl_table ;
   struct ctl_table_header *ctl_compat_header ;
   struct ctl_table *ctl_compat_table ;
   unsigned int users ;
};

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct nf_generic_net {
   struct nf_proto_net pn ;
   unsigned int timeout ;
};

#line 30  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct nf_tcp_net {
   struct nf_proto_net pn ;
   unsigned int timeouts[14U] ;
   unsigned int tcp_loose ;
   unsigned int tcp_be_liberal ;
   unsigned int tcp_max_retrans ;
};

#line 44  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct nf_udp_net {
   struct nf_proto_net pn ;
   unsigned int timeouts[2U] ;
};

#line 49  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct nf_icmp_net {
   struct nf_proto_net pn ;
   unsigned int timeout ;
};

#line 54  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct nf_ip_net {
   struct nf_generic_net generic ;
   struct nf_tcp_net tcp ;
   struct nf_udp_net udp ;
   struct nf_icmp_net icmp ;
   struct nf_icmp_net icmpv6 ;
   struct ctl_table_header *ctl_table_header ;
   struct ctl_table *ctl_table ;
};

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct ct_pcpu {
   spinlock_t lock ;
   struct hlist_nulls_head unconfirmed ;
   struct hlist_nulls_head dying ;
};

#line 72 
struct ip_conntrack_stat;

#line 72 
struct nf_ct_event_notifier;

#line 72 
struct nf_exp_event_notifier;

#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct netns_ct {
   atomic_t count ;
   unsigned int expect_count ;
   struct delayed_work ecache_dwork ;
   bool ecache_dwork_pending ;
   struct ctl_table_header *sysctl_header ;
   struct ctl_table_header *acct_sysctl_header ;
   struct ctl_table_header *tstamp_sysctl_header ;
   struct ctl_table_header *event_sysctl_header ;
   struct ctl_table_header *helper_sysctl_header ;
   char *slabname ;
   unsigned int sysctl_log_invalid ;
   int sysctl_events ;
   int sysctl_acct ;
   int sysctl_auto_assign_helper ;
   bool auto_assign_helper_warned ;
   int sysctl_tstamp ;
   int sysctl_checksum ;
   unsigned int htable_size ;
   seqcount_t generation ;
   struct kmem_cache *nf_conntrack_cachep ;
   struct hlist_nulls_head *hash ;
   struct hlist_head *expect_hash ;
   struct ct_pcpu *pcpu_lists ;
   struct ip_conntrack_stat *stat ;
   struct nf_ct_event_notifier *nf_conntrack_event_cb ;
   struct nf_exp_event_notifier *nf_expect_event_cb ;
   struct nf_ip_net nf_ct_proto ;
   unsigned int labels_used ;
   u8 label_words ;
   struct hlist_head *nat_bysource ;
   unsigned int nat_htable_size ;
};

#line 114 
struct nft_af_info;

#line 115  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct netns_nftables {
   struct list_head af_info ;
   struct list_head commit_list ;
   struct nft_af_info *ipv4 ;
   struct nft_af_info *ipv6 ;
   struct nft_af_info *inet ;
   struct nft_af_info *arp ;
   struct nft_af_info *bridge ;
   struct nft_af_info *netdev ;
   unsigned int base_seq ;
   u8 gencursor ;
};

#line 465  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/interrupt.h"
struct tasklet_struct {
   struct tasklet_struct *next ;
   unsigned long state ;
   atomic_t count ;
   void (*func)(unsigned long ) ;
   unsigned long data ;
};

#line 672  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/interrupt.h"
struct flow_cache_percpu {
   struct hlist_head *hash_table ;
   int hash_count ;
   u32 hash_rnd ;
   int hash_rnd_recalc ;
   struct tasklet_struct flush_tasklet ;
};

#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/flowcache.h"
struct flow_cache {
   u32 hash_shift ;
   struct flow_cache_percpu *percpu ;
   struct notifier_block hotcpu_notifier ;
   int low_watermark ;
   int high_watermark ;
   struct timer_list rnd_timer ;
};

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/flowcache.h"
struct xfrm_policy_hash {
   struct hlist_head *table ;
   unsigned int hmask ;
   u8 dbits4 ;
   u8 sbits4 ;
   u8 dbits6 ;
   u8 sbits6 ;
};

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/xfrm.h"
struct xfrm_policy_hthresh {
   struct work_struct work ;
   seqlock_t lock ;
   u8 lbits4 ;
   u8 rbits4 ;
   u8 lbits6 ;
   u8 rbits6 ;
};

#line 30  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/xfrm.h"
struct netns_xfrm {
   struct list_head state_all ;
   struct hlist_head *state_bydst ;
   struct hlist_head *state_bysrc ;
   struct hlist_head *state_byspi ;
   unsigned int state_hmask ;
   unsigned int state_num ;
   struct work_struct state_hash_work ;
   struct hlist_head state_gc_list ;
   struct work_struct state_gc_work ;
   struct list_head policy_all ;
   struct hlist_head *policy_byidx ;
   unsigned int policy_idx_hmask ;
   struct hlist_head policy_inexact[3U] ;
   struct xfrm_policy_hash policy_bydst[3U] ;
   unsigned int policy_count[6U] ;
   struct work_struct policy_hash_work ;
   struct xfrm_policy_hthresh policy_hthresh ;
   struct sock *nlsk ;
   struct sock *nlsk_stash ;
   u32 sysctl_aevent_etime ;
   u32 sysctl_aevent_rseqth ;
   int sysctl_larval_drop ;
   u32 sysctl_acq_expires ;
   struct ctl_table_header *sysctl_hdr ;
   struct dst_ops xfrm4_dst_ops ;
   struct dst_ops xfrm6_dst_ops ;
   spinlock_t xfrm_state_lock ;
   rwlock_t xfrm_policy_lock ;
   struct mutex xfrm_cfg_mutex ;
   struct flow_cache flow_cache_global ;
   atomic_t flow_cache_genid ;
   struct list_head flow_cache_gc_list ;
   spinlock_t flow_cache_gc_lock ;
   struct work_struct flow_cache_gc_work ;
   struct work_struct flow_cache_flush_work ;
   struct mutex flow_flush_sem ;
};

#line 88 
struct mpls_route;

#line 89  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/xfrm.h"
struct netns_mpls {
   size_t platform_labels ;
   struct mpls_route **platform_label ;
   struct ctl_table_header *ctl ;
};

#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/mpls.h"
struct proc_ns_operations;

#line 17  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/mpls.h"
struct ns_common {
   atomic_long_t stashed ;
   struct proc_ns_operations const *ops ;
   unsigned int inum ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ns_common.h"
struct net_generic;

#line 12 
struct netns_ipvs;

#line 13  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ns_common.h"
struct net {
   atomic_t passive ;
   atomic_t count ;
   spinlock_t rules_mod_lock ;
   atomic64_t cookie_gen ;
   struct list_head list ;
   struct list_head cleanup_list ;
   struct list_head exit_list ;
   struct user_namespace *user_ns ;
   spinlock_t nsid_lock ;
   struct idr netns_ids ;
   struct ns_common ns ;
   struct proc_dir_entry *proc_net ;
   struct proc_dir_entry *proc_net_stat ;
   struct ctl_table_set sysctls ;
   struct sock *rtnl ;
   struct sock *genl_sock ;
   struct list_head dev_base_head ;
   struct hlist_head *dev_name_head ;
   struct hlist_head *dev_index_head ;
   unsigned int dev_base_seq ;
   int ifindex ;
   unsigned int dev_unreg_count ;
   struct list_head rules_ops ;
   struct net_device *loopback_dev ;
   struct netns_core core ;
   struct netns_mib mib ;
   struct netns_packet packet ;
   struct netns_unix unx ;
   struct netns_ipv4 ipv4 ;
   struct netns_ipv6 ipv6 ;
   struct netns_ieee802154_lowpan ieee802154_lowpan ;
   struct netns_sctp sctp ;
   struct netns_dccp dccp ;
   struct netns_nf nf ;
   struct netns_xt xt ;
   struct netns_ct ct ;
   struct netns_nftables nft ;
   struct netns_nf_frag nf_frag ;
   struct sock *nfnl ;
   struct sock *nfnl_stash ;
   struct sk_buff_head wext_nlevents ;
   struct net_generic *gen ;
   struct netns_xfrm xfrm ;
   struct netns_ipvs *ipvs ;
   struct netns_mpls mpls ;
   struct sock *diag_nlsk ;
   atomic_t fnhe_genid ;
};

#line 241  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/net_namespace.h"
struct __anonstruct_possible_net_t_302 {
   struct net *net ;
};

#line 241  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/net_namespace.h"
typedef struct __anonstruct_possible_net_t_302 possible_net_t;

#line 13  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mod_devicetable.h"
typedef unsigned long kernel_ulong_t;

#line 186  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mod_devicetable.h"
struct acpi_device_id {
   __u8 id[9U] ;
   kernel_ulong_t driver_data ;
   __u32 cls ;
   __u32 cls_msk ;
};

#line 221  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mod_devicetable.h"
struct of_device_id {
   char name[32U] ;
   char type[32U] ;
   char compatible[128U] ;
   void const *data ;
};

#line 652 
enum fwnode_type {
    FWNODE_INVALID = 0,
    FWNODE_OF = 1,
    FWNODE_ACPI = 2,
    FWNODE_PDATA = 3
};

#line 659  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mod_devicetable.h"
struct fwnode_handle {
   enum fwnode_type type ;
   struct fwnode_handle *secondary ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/of.h"
typedef u32 phandle;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/of.h"
struct property {
   char *name ;
   int length ;
   void *value ;
   struct property *next ;
   unsigned long _flags ;
   unsigned int unique_id ;
   struct bin_attribute attr ;
};

#line 44  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/of.h"
struct device_node {
   char const *name ;
   char const *type ;
   phandle phandle ;
   char const *full_name ;
   struct fwnode_handle fwnode ;
   struct property *properties ;
   struct property *deadprops ;
   struct device_node *parent ;
   struct device_node *child ;
   struct device_node *sibling ;
   struct kobject kobj ;
   unsigned long _flags ;
   void *data ;
};

#line 338  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mii.h"
enum ldv_28372 {
    PHY_INTERFACE_MODE_NA = 0,
    PHY_INTERFACE_MODE_MII = 1,
    PHY_INTERFACE_MODE_GMII = 2,
    PHY_INTERFACE_MODE_SGMII = 3,
    PHY_INTERFACE_MODE_TBI = 4,
    PHY_INTERFACE_MODE_REVMII = 5,
    PHY_INTERFACE_MODE_RMII = 6,
    PHY_INTERFACE_MODE_RGMII = 7,
    PHY_INTERFACE_MODE_RGMII_ID = 8,
    PHY_INTERFACE_MODE_RGMII_RXID = 9,
    PHY_INTERFACE_MODE_RGMII_TXID = 10,
    PHY_INTERFACE_MODE_RTBI = 11,
    PHY_INTERFACE_MODE_SMII = 12,
    PHY_INTERFACE_MODE_XGMII = 13,
    PHY_INTERFACE_MODE_MOCA = 14,
    PHY_INTERFACE_MODE_QSGMII = 15,
    PHY_INTERFACE_MODE_MAX = 16
};

#line 80  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy.h"
typedef enum ldv_28372 phy_interface_t;

#line 126 
enum ldv_28425 {
    MDIOBUS_ALLOCATED = 1,
    MDIOBUS_REGISTERED = 2,
    MDIOBUS_UNREGISTERED = 3,
    MDIOBUS_RELEASED = 4
};

#line 133 
struct phy_device;

#line 133  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy.h"
struct mii_bus {
   char const *name ;
   char id[17U] ;
   void *priv ;
   int (*read)(struct mii_bus *, int , int ) ;
   int (*write)(struct mii_bus *, int , int , u16 ) ;
   int (*reset)(struct mii_bus *) ;
   struct mutex mdio_lock ;
   struct device *parent ;
   enum ldv_28425 state ;
   struct device dev ;
   struct phy_device *phy_map[32U] ;
   u32 phy_mask ;
   u32 phy_ignore_ta_mask ;
   int *irq ;
};

#line 214 
enum phy_state {
    PHY_DOWN = 0,
    PHY_STARTING = 1,
    PHY_READY = 2,
    PHY_PENDING = 3,
    PHY_UP = 4,
    PHY_AN = 5,
    PHY_RUNNING = 6,
    PHY_NOLINK = 7,
    PHY_FORCING = 8,
    PHY_CHANGELINK = 9,
    PHY_HALTED = 10,
    PHY_RESUMING = 11
};

#line 229  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy.h"
struct phy_c45_device_ids {
   u32 devices_in_package ;
   u32 device_ids[8U] ;
};

#line 323 
struct phy_driver;

#line 323  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy.h"
struct phy_device {
   struct phy_driver *drv ;
   struct mii_bus *bus ;
   struct device dev ;
   u32 phy_id ;
   struct phy_c45_device_ids c45_ids ;
   bool is_c45 ;
   bool is_internal ;
   bool has_fixups ;
   bool suspended ;
   enum phy_state state ;
   u32 dev_flags ;
   phy_interface_t interface ;
   int addr ;
   int speed ;
   int duplex ;
   int pause ;
   int asym_pause ;
   int link ;
   u32 interrupts ;
   u32 supported ;
   u32 advertising ;
   u32 lp_advertising ;
   int autoneg ;
   int link_timeout ;
   int irq ;
   void *priv ;
   struct work_struct phy_queue ;
   struct delayed_work state_queue ;
   atomic_t irq_disable ;
   struct mutex lock ;
   struct net_device *attached_dev ;
   void (*adjust_link)(struct net_device *) ;
};

#line 429  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy.h"
struct phy_driver {
   u32 phy_id ;
   char *name ;
   unsigned int phy_id_mask ;
   u32 features ;
   u32 flags ;
   void const *driver_data ;
   int (*soft_reset)(struct phy_device *) ;
   int (*config_init)(struct phy_device *) ;
   int (*probe)(struct phy_device *) ;
   int (*suspend)(struct phy_device *) ;
   int (*resume)(struct phy_device *) ;
   int (*config_aneg)(struct phy_device *) ;
   int (*aneg_done)(struct phy_device *) ;
   int (*read_status)(struct phy_device *) ;
   int (*ack_interrupt)(struct phy_device *) ;
   int (*config_intr)(struct phy_device *) ;
   int (*did_interrupt)(struct phy_device *) ;
   void (*remove)(struct phy_device *) ;
   int (*match_phy_device)(struct phy_device *) ;
   int (*ts_info)(struct phy_device *, struct ethtool_ts_info *) ;
   int (*hwtstamp)(struct phy_device *, struct ifreq *) ;
   bool (*rxtstamp)(struct phy_device *, struct sk_buff *, int ) ;
   void (*txtstamp)(struct phy_device *, struct sk_buff *, int ) ;
   int (*set_wol)(struct phy_device *, struct ethtool_wolinfo *) ;
   void (*get_wol)(struct phy_device *, struct ethtool_wolinfo *) ;
   void (*link_change_notify)(struct phy_device *) ;
   int (*read_mmd_indirect)(struct phy_device *, int , int , int ) ;
   void (*write_mmd_indirect)(struct phy_device *, int , int , int , u32 ) ;
   int (*module_info)(struct phy_device *, struct ethtool_modinfo *) ;
   int (*module_eeprom)(struct phy_device *, struct ethtool_eeprom *, u8 *) ;
   struct device_driver driver ;
};

#line 803  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy.h"
struct fixed_phy_status {
   int link ;
   int speed ;
   int duplex ;
   int pause ;
   int asym_pause ;
};

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy_fixed.h"
enum dsa_tag_protocol {
    DSA_TAG_PROTO_NONE = 0,
    DSA_TAG_PROTO_DSA = 1,
    DSA_TAG_PROTO_TRAILER = 2,
    DSA_TAG_PROTO_EDSA = 3,
    DSA_TAG_PROTO_BRCM = 4
};

#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy_fixed.h"
struct dsa_chip_data {
   struct device *host_dev ;
   int sw_addr ;
   int eeprom_len ;
   struct device_node *of_node ;
   char *port_names[12U] ;
   struct device_node *port_dn[12U] ;
   s8 *rtable ;
};

#line 68  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dsa.h"
struct dsa_platform_data {
   struct device *netdev ;
   struct net_device *of_netdev ;
   int nr_chips ;
   struct dsa_chip_data *chip ;
};

#line 84 
struct packet_type;

#line 85 
struct dsa_switch;

#line 85  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dsa.h"
struct dsa_switch_tree {
   struct dsa_platform_data *pd ;
   struct net_device *master_netdev ;
   int (*rcv)(struct sk_buff *, struct net_device *, struct packet_type *, struct net_device *) ;
   enum dsa_tag_protocol tag_protocol ;
   s8 cpu_switch ;
   s8 cpu_port ;
   int link_poll_needed ;
   struct work_struct link_poll_work ;
   struct timer_list link_poll_timer ;
   struct dsa_switch *ds[4U] ;
};

#line 123 
struct dsa_switch_driver;

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dsa.h"
struct dsa_switch {
   struct dsa_switch_tree *dst ;
   int index ;
   enum dsa_tag_protocol tag_protocol ;
   struct dsa_chip_data *pd ;
   struct dsa_switch_driver *drv ;
   struct device *master_dev ;
   char hwmon_name[24U] ;
   struct device *hwmon_dev ;
   u32 dsa_port_mask ;
   u32 phys_port_mask ;
   u32 phys_mii_mask ;
   struct mii_bus *slave_mii_bus ;
   struct net_device *ports[12U] ;
};

#line 194  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dsa.h"
struct dsa_switch_driver {
   struct list_head list ;
   enum dsa_tag_protocol tag_protocol ;
   int priv_size ;
   char *(*probe)(struct device *, int ) ;
   int (*setup)(struct dsa_switch *) ;
   int (*set_addr)(struct dsa_switch *, u8 *) ;
   u32 (*get_phy_flags)(struct dsa_switch *, int ) ;
   int (*phy_read)(struct dsa_switch *, int , int ) ;
   int (*phy_write)(struct dsa_switch *, int , int , u16 ) ;
   void (*poll_link)(struct dsa_switch *) ;
   void (*adjust_link)(struct dsa_switch *, int , struct phy_device *) ;
   void (*fixed_link_update)(struct dsa_switch *, int , struct fixed_phy_status *) ;
   void (*get_strings)(struct dsa_switch *, int , uint8_t *) ;
   void (*get_ethtool_stats)(struct dsa_switch *, int , uint64_t *) ;
   int (*get_sset_count)(struct dsa_switch *) ;
   void (*get_wol)(struct dsa_switch *, int , struct ethtool_wolinfo *) ;
   int (*set_wol)(struct dsa_switch *, int , struct ethtool_wolinfo *) ;
   int (*suspend)(struct dsa_switch *) ;
   int (*resume)(struct dsa_switch *) ;
   int (*port_enable)(struct dsa_switch *, int , struct phy_device *) ;
   void (*port_disable)(struct dsa_switch *, int , struct phy_device *) ;
   int (*set_eee)(struct dsa_switch *, int , struct phy_device *, struct ethtool_eee *) ;
   int (*get_eee)(struct dsa_switch *, int , struct ethtool_eee *) ;
   int (*get_temp)(struct dsa_switch *, int *) ;
   int (*get_temp_limit)(struct dsa_switch *, int *) ;
   int (*set_temp_limit)(struct dsa_switch *, int ) ;
   int (*get_temp_alarm)(struct dsa_switch *, bool *) ;
   int (*get_eeprom_len)(struct dsa_switch *) ;
   int (*get_eeprom)(struct dsa_switch *, struct ethtool_eeprom *, u8 *) ;
   int (*set_eeprom)(struct dsa_switch *, struct ethtool_eeprom *, u8 *) ;
   int (*get_regs_len)(struct dsa_switch *, int ) ;
   void (*get_regs)(struct dsa_switch *, int , struct ethtool_regs *, void *) ;
   int (*port_join_bridge)(struct dsa_switch *, int , u32 ) ;
   int (*port_leave_bridge)(struct dsa_switch *, int , u32 ) ;
   int (*port_stp_update)(struct dsa_switch *, int , u8 ) ;
   int (*fdb_add)(struct dsa_switch *, int , unsigned char const *, u16 ) ;
   int (*fdb_del)(struct dsa_switch *, int , unsigned char const *, u16 ) ;
   int (*fdb_getnext)(struct dsa_switch *, int , unsigned char *, bool *) ;
};

#line 320  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dsa.h"
struct ieee_ets {
   __u8 willing ;
   __u8 ets_cap ;
   __u8 cbs ;
   __u8 tc_tx_bw[8U] ;
   __u8 tc_rx_bw[8U] ;
   __u8 tc_tsa[8U] ;
   __u8 prio_tc[8U] ;
   __u8 tc_reco_bw[8U] ;
   __u8 tc_reco_tsa[8U] ;
   __u8 reco_prio_tc[8U] ;
};

#line 69  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct ieee_maxrate {
   __u64 tc_maxrate[8U] ;
};

#line 87  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct ieee_qcn {
   __u8 rpg_enable[8U] ;
   __u32 rppp_max_rps[8U] ;
   __u32 rpg_time_reset[8U] ;
   __u32 rpg_byte_reset[8U] ;
   __u32 rpg_threshold[8U] ;
   __u32 rpg_max_rate[8U] ;
   __u32 rpg_ai_rate[8U] ;
   __u32 rpg_hai_rate[8U] ;
   __u32 rpg_gd[8U] ;
   __u32 rpg_min_dec_fac[8U] ;
   __u32 rpg_min_rate[8U] ;
   __u32 cndd_state_machine[8U] ;
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct ieee_qcn_stats {
   __u64 rppp_rp_centiseconds[8U] ;
   __u32 rppp_created_rps[8U] ;
};

#line 144  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct ieee_pfc {
   __u8 pfc_cap ;
   __u8 pfc_en ;
   __u8 mbc ;
   __u16 delay ;
   __u64 requests[8U] ;
   __u64 indications[8U] ;
};

#line 164  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct cee_pg {
   __u8 willing ;
   __u8 error ;
   __u8 pg_en ;
   __u8 tcs_supported ;
   __u8 pg_bw[8U] ;
   __u8 prio_pg[8U] ;
};

#line 187  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct cee_pfc {
   __u8 willing ;
   __u8 error ;
   __u8 pfc_en ;
   __u8 tcs_supported ;
};

#line 202  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct dcb_app {
   __u8 selector ;
   __u8 priority ;
   __u16 protocol ;
};

#line 236  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct dcb_peer_app_info {
   __u8 willing ;
   __u8 error ;
};

#line 40  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dcbnl.h"
struct dcbnl_rtnl_ops {
   int (*ieee_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_setets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_getmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_setmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_getqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_setqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_getqcnstats)(struct net_device *, struct ieee_qcn_stats *) ;
   int (*ieee_getpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_setpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_getapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_setapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_delapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_peer_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_peer_getpfc)(struct net_device *, struct ieee_pfc *) ;
   u8 (*getstate)(struct net_device *) ;
   u8 (*setstate)(struct net_device *, u8 ) ;
   void (*getpermhwaddr)(struct net_device *, u8 *) ;
   void (*setpgtccfgtx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgtx)(struct net_device *, int , u8 ) ;
   void (*setpgtccfgrx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgrx)(struct net_device *, int , u8 ) ;
   void (*getpgtccfgtx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgtx)(struct net_device *, int , u8 *) ;
   void (*getpgtccfgrx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgrx)(struct net_device *, int , u8 *) ;
   void (*setpfccfg)(struct net_device *, int , u8 ) ;
   void (*getpfccfg)(struct net_device *, int , u8 *) ;
   u8 (*setall)(struct net_device *) ;
   u8 (*getcap)(struct net_device *, int , u8 *) ;
   int (*getnumtcs)(struct net_device *, int , u8 *) ;
   int (*setnumtcs)(struct net_device *, int , u8 ) ;
   u8 (*getpfcstate)(struct net_device *) ;
   void (*setpfcstate)(struct net_device *, u8 ) ;
   void (*getbcncfg)(struct net_device *, int , u32 *) ;
   void (*setbcncfg)(struct net_device *, int , u32 ) ;
   void (*getbcnrp)(struct net_device *, int , u8 *) ;
   void (*setbcnrp)(struct net_device *, int , u8 ) ;
   int (*setapp)(struct net_device *, u8 , u16 , u8 ) ;
   int (*getapp)(struct net_device *, u8 , u16 ) ;
   u8 (*getfeatcfg)(struct net_device *, int , u8 *) ;
   u8 (*setfeatcfg)(struct net_device *, int , u8 ) ;
   u8 (*getdcbx)(struct net_device *) ;
   u8 (*setdcbx)(struct net_device *, u8 ) ;
   int (*peer_getappinfo)(struct net_device *, struct dcb_peer_app_info *, u16 *) ;
   int (*peer_getapptable)(struct net_device *, struct dcb_app *) ;
   int (*cee_peer_getpg)(struct net_device *, struct cee_pg *) ;
   int (*cee_peer_getpfc)(struct net_device *, struct cee_pfc *) ;
};

#line 105  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dcbnl.h"
struct taskstats {
   __u16 version ;
   __u32 ac_exitcode ;
   __u8 ac_flag ;
   __u8 ac_nice ;
   __u64 cpu_count ;
   __u64 cpu_delay_total ;
   __u64 blkio_count ;
   __u64 blkio_delay_total ;
   __u64 swapin_count ;
   __u64 swapin_delay_total ;
   __u64 cpu_run_real_total ;
   __u64 cpu_run_virtual_total ;
   char ac_comm[32U] ;
   __u8 ac_sched ;
   __u8 ac_pad[3U] ;
   __u32 ac_uid ;
   __u32 ac_gid ;
   __u32 ac_pid ;
   __u32 ac_ppid ;
   __u32 ac_btime ;
   __u64 ac_etime ;
   __u64 ac_utime ;
   __u64 ac_stime ;
   __u64 ac_minflt ;
   __u64 ac_majflt ;
   __u64 coremem ;
   __u64 virtmem ;
   __u64 hiwater_rss ;
   __u64 hiwater_vm ;
   __u64 read_char ;
   __u64 write_char ;
   __u64 read_syscalls ;
   __u64 write_syscalls ;
   __u64 read_bytes ;
   __u64 write_bytes ;
   __u64 cancelled_write_bytes ;
   __u64 nvcsw ;
   __u64 nivcsw ;
   __u64 ac_utimescaled ;
   __u64 ac_stimescaled ;
   __u64 cpu_scaled_run_real_total ;
   __u64 freepages_count ;
   __u64 freepages_delay_total ;
};

#line 515  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cgroup.h"
struct netprio_map {
   struct callback_head rcu ;
   u32 priomap_len ;
   u32 priomap[] ;
};

#line 97  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/security.h"
struct xfrm_policy;

#line 98 
struct xfrm_state;

#line 1628 
struct mnt_namespace;

#line 1629 
struct ipc_namespace;

#line 1630  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/security.h"
struct nsproxy {
   atomic_t count ;
   struct uts_namespace *uts_ns ;
   struct ipc_namespace *ipc_ns ;
   struct mnt_namespace *mnt_ns ;
   struct pid_namespace *pid_ns_for_children ;
   struct net *net_ns ;
};

#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/netlink.h"
struct nlmsghdr {
   __u32 nlmsg_len ;
   __u16 nlmsg_type ;
   __u16 nlmsg_flags ;
   __u32 nlmsg_seq ;
   __u32 nlmsg_pid ;
};

#line 147  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/netlink.h"
struct nlattr {
   __u16 nla_len ;
   __u16 nla_type ;
};

#line 106  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netlink.h"
struct netlink_callback {
   struct sk_buff *skb ;
   struct nlmsghdr const *nlh ;
   int (*dump)(struct sk_buff *, struct netlink_callback *) ;
   int (*done)(struct netlink_callback *) ;
   void *data ;
   struct module *module ;
   u16 family ;
   u16 min_dump_alloc ;
   unsigned int prev_seq ;
   unsigned int seq ;
   long args[6U] ;
};

#line 182  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netlink.h"
struct ndmsg {
   __u8 ndm_family ;
   __u8 ndm_pad1 ;
   __u16 ndm_pad2 ;
   __s32 ndm_ifindex ;
   __u16 ndm_state ;
   __u8 ndm_flags ;
   __u8 ndm_type ;
};

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if_link.h"
struct rtnl_link_stats64 {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 rx_errors ;
   __u64 tx_errors ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
   __u64 multicast ;
   __u64 collisions ;
   __u64 rx_length_errors ;
   __u64 rx_over_errors ;
   __u64 rx_crc_errors ;
   __u64 rx_frame_errors ;
   __u64 rx_fifo_errors ;
   __u64 rx_missed_errors ;
   __u64 tx_aborted_errors ;
   __u64 tx_carrier_errors ;
   __u64 tx_fifo_errors ;
   __u64 tx_heartbeat_errors ;
   __u64 tx_window_errors ;
   __u64 rx_compressed ;
   __u64 tx_compressed ;
};

#line 643  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if_link.h"
struct ifla_vf_stats {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 broadcast ;
   __u64 multicast ;
};

#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/if_link.h"
struct ifla_vf_info {
   __u32 vf ;
   __u8 mac[32U] ;
   __u32 vlan ;
   __u32 qos ;
   __u32 spoofchk ;
   __u32 linkstate ;
   __u32 min_tx_rate ;
   __u32 max_tx_rate ;
   __u32 rss_query_en ;
};

#line 118  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if_bonding.h"
struct netpoll_info;

#line 119 
struct wireless_dev;

#line 120 
struct wpan_dev;

#line 121 
struct mpls_dev;

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
enum netdev_tx {
    __NETDEV_TX_MIN = -2147483648,
    NETDEV_TX_OK = 0,
    NETDEV_TX_BUSY = 16,
    NETDEV_TX_LOCKED = 32
};

#line 110  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
typedef enum netdev_tx netdev_tx_t;

#line 129  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct net_device_stats {
   unsigned long rx_packets ;
   unsigned long tx_packets ;
   unsigned long rx_bytes ;
   unsigned long tx_bytes ;
   unsigned long rx_errors ;
   unsigned long tx_errors ;
   unsigned long rx_dropped ;
   unsigned long tx_dropped ;
   unsigned long multicast ;
   unsigned long collisions ;
   unsigned long rx_length_errors ;
   unsigned long rx_over_errors ;
   unsigned long rx_crc_errors ;
   unsigned long rx_frame_errors ;
   unsigned long rx_fifo_errors ;
   unsigned long rx_missed_errors ;
   unsigned long tx_aborted_errors ;
   unsigned long tx_carrier_errors ;
   unsigned long tx_fifo_errors ;
   unsigned long tx_heartbeat_errors ;
   unsigned long tx_window_errors ;
   unsigned long rx_compressed ;
   unsigned long tx_compressed ;
};

#line 190 
struct neigh_parms;

#line 211  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct netdev_hw_addr_list {
   struct list_head list ;
   int count ;
};

#line 216  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct hh_cache {
   u16 hh_len ;
   u16 __pad ;
   seqlock_t hh_lock ;
   unsigned long hh_data[16U] ;
};

#line 245  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct header_ops {
   int (*create)(struct sk_buff *, struct net_device *, unsigned short , void const *, void const *, unsigned int ) ;
   int (*parse)(struct sk_buff const *, unsigned char *) ;
   int (*cache)(struct neighbour const *, struct hh_cache *, __be16 ) ;
   void (*cache_update)(struct hh_cache *, struct net_device const *, unsigned char const *) ;
};

#line 295  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct napi_struct {
   struct list_head poll_list ;
   unsigned long state ;
   int weight ;
   unsigned int gro_count ;
   int (*poll)(struct napi_struct *, int ) ;
   spinlock_t poll_lock ;
   int poll_owner ;
   struct net_device *dev ;
   struct sk_buff *gro_list ;
   struct sk_buff *skb ;
   struct hrtimer timer ;
   struct list_head dev_list ;
   struct hlist_node napi_hash_node ;
   unsigned int napi_id ;
};

#line 340 
enum rx_handler_result {
    RX_HANDLER_CONSUMED = 0,
    RX_HANDLER_ANOTHER = 1,
    RX_HANDLER_EXACT = 2,
    RX_HANDLER_PASS = 3
};

#line 388  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
typedef enum rx_handler_result rx_handler_result_t;

#line 389  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
typedef rx_handler_result_t rx_handler_func_t(struct sk_buff **);

#line 537 
struct Qdisc;

#line 537  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct netdev_queue {
   struct net_device *dev ;
   struct Qdisc *qdisc ;
   struct Qdisc *qdisc_sleeping ;
   struct kobject kobj ;
   int numa_node ;
   spinlock_t _xmit_lock ;
   int xmit_lock_owner ;
   unsigned long trans_start ;
   unsigned long trans_timeout ;
   unsigned long state ;
   struct dql dql ;
   unsigned long tx_maxrate ;
};

#line 607  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct rps_map {
   unsigned int len ;
   struct callback_head rcu ;
   u16 cpus[0U] ;
};

#line 619  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct rps_dev_flow {
   u16 cpu ;
   u16 filter ;
   unsigned int last_qtail ;
};

#line 631  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct rps_dev_flow_table {
   unsigned int mask ;
   struct callback_head rcu ;
   struct rps_dev_flow flows[0U] ;
};

#line 683  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct netdev_rx_queue {
   struct rps_map *rps_map ;
   struct rps_dev_flow_table *rps_flow_table ;
   struct kobject kobj ;
   struct net_device *dev ;
};

#line 706  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct xps_map {
   unsigned int len ;
   unsigned int alloc_len ;
   struct callback_head rcu ;
   u16 queues[0U] ;
};

#line 719  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct xps_dev_maps {
   struct callback_head rcu ;
   struct xps_map *cpu_map[0U] ;
};

#line 730  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct netdev_tc_txq {
   u16 count ;
   u16 offset ;
};

#line 741  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct netdev_fcoe_hbainfo {
   char manufacturer[64U] ;
   char serial_number[64U] ;
   char hardware_version[64U] ;
   char driver_version[64U] ;
   char optionrom_version[64U] ;
   char firmware_version[64U] ;
   char model[256U] ;
   char model_description[256U] ;
};

#line 757  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct netdev_phys_item_id {
   unsigned char id[32U] ;
   unsigned char id_len ;
};

#line 770  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct net_device_ops {
   int (*ndo_init)(struct net_device *) ;
   void (*ndo_uninit)(struct net_device *) ;
   int (*ndo_open)(struct net_device *) ;
   int (*ndo_stop)(struct net_device *) ;
   netdev_tx_t (*ndo_start_xmit)(struct sk_buff *, struct net_device *) ;
   u16 (*ndo_select_queue)(struct net_device *, struct sk_buff *, void *, u16 (*)(struct net_device *, struct sk_buff *)) ;
   void (*ndo_change_rx_flags)(struct net_device *, int ) ;
   void (*ndo_set_rx_mode)(struct net_device *) ;
   int (*ndo_set_mac_address)(struct net_device *, void *) ;
   int (*ndo_validate_addr)(struct net_device *) ;
   int (*ndo_do_ioctl)(struct net_device *, struct ifreq *, int ) ;
   int (*ndo_set_config)(struct net_device *, struct ifmap *) ;
   int (*ndo_change_mtu)(struct net_device *, int ) ;
   int (*ndo_neigh_setup)(struct net_device *, struct neigh_parms *) ;
   void (*ndo_tx_timeout)(struct net_device *) ;
   struct rtnl_link_stats64 *(*ndo_get_stats64)(struct net_device *, struct rtnl_link_stats64 *) ;
   struct net_device_stats *(*ndo_get_stats)(struct net_device *) ;
   int (*ndo_vlan_rx_add_vid)(struct net_device *, __be16 , u16 ) ;
   int (*ndo_vlan_rx_kill_vid)(struct net_device *, __be16 , u16 ) ;
   void (*ndo_poll_controller)(struct net_device *) ;
   int (*ndo_netpoll_setup)(struct net_device *, struct netpoll_info *) ;
   void (*ndo_netpoll_cleanup)(struct net_device *) ;
   int (*ndo_busy_poll)(struct napi_struct *) ;
   int (*ndo_set_vf_mac)(struct net_device *, int , u8 *) ;
   int (*ndo_set_vf_vlan)(struct net_device *, int , u16 , u8 ) ;
   int (*ndo_set_vf_rate)(struct net_device *, int , int , int ) ;
   int (*ndo_set_vf_spoofchk)(struct net_device *, int , bool ) ;
   int (*ndo_get_vf_config)(struct net_device *, int , struct ifla_vf_info *) ;
   int (*ndo_set_vf_link_state)(struct net_device *, int , int ) ;
   int (*ndo_get_vf_stats)(struct net_device *, int , struct ifla_vf_stats *) ;
   int (*ndo_set_vf_port)(struct net_device *, int , struct nlattr **) ;
   int (*ndo_get_vf_port)(struct net_device *, int , struct sk_buff *) ;
   int (*ndo_set_vf_rss_query_en)(struct net_device *, int , bool ) ;
   int (*ndo_setup_tc)(struct net_device *, u8 ) ;
   int (*ndo_fcoe_enable)(struct net_device *) ;
   int (*ndo_fcoe_disable)(struct net_device *) ;
   int (*ndo_fcoe_ddp_setup)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_ddp_done)(struct net_device *, u16 ) ;
   int (*ndo_fcoe_ddp_target)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_get_hbainfo)(struct net_device *, struct netdev_fcoe_hbainfo *) ;
   int (*ndo_fcoe_get_wwn)(struct net_device *, u64 *, int ) ;
   int (*ndo_rx_flow_steer)(struct net_device *, struct sk_buff const *, u16 , u32 ) ;
   int (*ndo_add_slave)(struct net_device *, struct net_device *) ;
   int (*ndo_del_slave)(struct net_device *, struct net_device *) ;
   netdev_features_t (*ndo_fix_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_set_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_neigh_construct)(struct neighbour *) ;
   void (*ndo_neigh_destroy)(struct neighbour *) ;
   int (*ndo_fdb_add)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char const *, u16 , u16 ) ;
   int (*ndo_fdb_del)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char const *, u16 ) ;
   int (*ndo_fdb_dump)(struct sk_buff *, struct netlink_callback *, struct net_device *, struct net_device *, int ) ;
   int (*ndo_bridge_setlink)(struct net_device *, struct nlmsghdr *, u16 ) ;
   int (*ndo_bridge_getlink)(struct sk_buff *, u32 , u32 , struct net_device *, u32 , int ) ;
   int (*ndo_bridge_dellink)(struct net_device *, struct nlmsghdr *, u16 ) ;
   int (*ndo_change_carrier)(struct net_device *, bool ) ;
   int (*ndo_get_phys_port_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_phys_port_name)(struct net_device *, char *, size_t ) ;
   void (*ndo_add_vxlan_port)(struct net_device *, sa_family_t , __be16 ) ;
   void (*ndo_del_vxlan_port)(struct net_device *, sa_family_t , __be16 ) ;
   void *(*ndo_dfwd_add_station)(struct net_device *, struct net_device *) ;
   void (*ndo_dfwd_del_station)(struct net_device *, void *) ;
   netdev_tx_t (*ndo_dfwd_start_xmit)(struct sk_buff *, struct net_device *, void *) ;
   int (*ndo_get_lock_subclass)(struct net_device *) ;
   netdev_features_t (*ndo_features_check)(struct sk_buff *, struct net_device *, netdev_features_t ) ;
   int (*ndo_set_tx_maxrate)(struct net_device *, int , u32 ) ;
   int (*ndo_get_iflink)(struct net_device const *) ;
};

#line 1257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct __anonstruct_adj_list_315 {
   struct list_head upper ;
   struct list_head lower ;
};

#line 1257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct __anonstruct_all_adj_list_316 {
   struct list_head upper ;
   struct list_head lower ;
};

#line 1257 
struct iw_handler_def;

#line 1257 
struct iw_public_data;

#line 1257 
struct switchdev_ops;

#line 1257 
struct vlan_info;

#line 1257 
struct tipc_bearer;

#line 1257 
struct in_device;

#line 1257 
struct dn_dev;

#line 1257 
struct inet6_dev;

#line 1257 
struct tcf_proto;

#line 1257 
struct cpu_rmap;

#line 1257 
struct pcpu_lstats;

#line 1257 
struct pcpu_sw_netstats;

#line 1257 
struct pcpu_dstats;

#line 1257 
struct pcpu_vstats;

#line 1257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
union __anonunion_317 {
   void *ml_priv ;
   struct pcpu_lstats *lstats ;
   struct pcpu_sw_netstats *tstats ;
   struct pcpu_dstats *dstats ;
   struct pcpu_vstats *vstats ;
};

#line 1257 
struct garp_port;

#line 1257 
struct mrp_port;

#line 1257 
struct rtnl_link_ops;

#line 1257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct net_device {
   char name[16U] ;
   struct hlist_node name_hlist ;
   char *ifalias ;
   unsigned long mem_end ;
   unsigned long mem_start ;
   unsigned long base_addr ;
   int irq ;
   atomic_t carrier_changes ;
   unsigned long state ;
   struct list_head dev_list ;
   struct list_head napi_list ;
   struct list_head unreg_list ;
   struct list_head close_list ;
   struct list_head ptype_all ;
   struct list_head ptype_specific ;
   struct __anonstruct_adj_list_315 adj_list ;
   struct __anonstruct_all_adj_list_316 all_adj_list ;
   netdev_features_t features ;
   netdev_features_t hw_features ;
   netdev_features_t wanted_features ;
   netdev_features_t vlan_features ;
   netdev_features_t hw_enc_features ;
   netdev_features_t mpls_features ;
   int ifindex ;
   int group ;
   struct net_device_stats stats ;
   atomic_long_t rx_dropped ;
   atomic_long_t tx_dropped ;
   struct iw_handler_def const *wireless_handlers ;
   struct iw_public_data *wireless_data ;
   struct net_device_ops const *netdev_ops ;
   struct ethtool_ops const *ethtool_ops ;
   struct switchdev_ops const *switchdev_ops ;
   struct header_ops const *header_ops ;
   unsigned int flags ;
   unsigned int priv_flags ;
   unsigned short gflags ;
   unsigned short padded ;
   unsigned char operstate ;
   unsigned char link_mode ;
   unsigned char if_port ;
   unsigned char dma ;
   unsigned int mtu ;
   unsigned short type ;
   unsigned short hard_header_len ;
   unsigned short needed_headroom ;
   unsigned short needed_tailroom ;
   unsigned char perm_addr[32U] ;
   unsigned char addr_assign_type ;
   unsigned char addr_len ;
   unsigned short neigh_priv_len ;
   unsigned short dev_id ;
   unsigned short dev_port ;
   spinlock_t addr_list_lock ;
   unsigned char name_assign_type ;
   bool uc_promisc ;
   struct netdev_hw_addr_list uc ;
   struct netdev_hw_addr_list mc ;
   struct netdev_hw_addr_list dev_addrs ;
   struct kset *queues_kset ;
   unsigned int promiscuity ;
   unsigned int allmulti ;
   struct vlan_info *vlan_info ;
   struct dsa_switch_tree *dsa_ptr ;
   struct tipc_bearer *tipc_ptr ;
   void *atalk_ptr ;
   struct in_device *ip_ptr ;
   struct dn_dev *dn_ptr ;
   struct inet6_dev *ip6_ptr ;
   void *ax25_ptr ;
   struct wireless_dev *ieee80211_ptr ;
   struct wpan_dev *ieee802154_ptr ;
   struct mpls_dev *mpls_ptr ;
   unsigned long last_rx ;
   unsigned char *dev_addr ;
   struct netdev_rx_queue *_rx ;
   unsigned int num_rx_queues ;
   unsigned int real_num_rx_queues ;
   unsigned long gro_flush_timeout ;
   rx_handler_func_t *rx_handler ;
   void *rx_handler_data ;
   struct tcf_proto *ingress_cl_list ;
   struct netdev_queue *ingress_queue ;
   struct list_head nf_hooks_ingress ;
   unsigned char broadcast[32U] ;
   struct cpu_rmap *rx_cpu_rmap ;
   struct hlist_node index_hlist ;
   struct netdev_queue *_tx ;
   unsigned int num_tx_queues ;
   unsigned int real_num_tx_queues ;
   struct Qdisc *qdisc ;
   unsigned long tx_queue_len ;
   spinlock_t tx_global_lock ;
   int watchdog_timeo ;
   struct xps_dev_maps *xps_maps ;
   unsigned long trans_start ;
   struct timer_list watchdog_timer ;
   int *pcpu_refcnt ;
   struct list_head todo_list ;
   struct list_head link_watch_list ;
   int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))) reg_state : 8 ;
   bool dismantle ;
   int __attribute__((__FRAMA_C_BITFIELD_SIZE__(16))) rtnl_link_state : 16 ;
   void (*destructor)(struct net_device *) ;
   struct netpoll_info *npinfo ;
   possible_net_t nd_net ;
   union __anonunion_317 __anonCompField_net_device_94 ;
   struct garp_port *garp_port ;
   struct mrp_port *mrp_port ;
   struct device dev ;
   struct attribute_group const *sysfs_groups[4U] ;
   struct attribute_group const *sysfs_rx_queue_group ;
   struct rtnl_link_ops const *rtnl_link_ops ;
   unsigned int gso_max_size ;
   u16 gso_max_segs ;
   u16 gso_min_segs ;
   struct dcbnl_rtnl_ops const *dcbnl_ops ;
   u8 num_tc ;
   struct netdev_tc_txq tc_to_txq[16U] ;
   u8 prio_tc_map[16U] ;
   unsigned int fcoe_ddp_xid ;
   struct netprio_map *priomap ;
   struct phy_device *phydev ;
   struct lock_class_key *qdisc_tx_busylock ;
};

#line 1978  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct packet_type {
   __be16 type ;
   struct net_device *dev ;
   int (*func)(struct sk_buff *, struct net_device *, struct packet_type *, struct net_device *) ;
   bool (*id_match)(struct packet_type *, struct sock *) ;
   void *af_packet_priv ;
   struct list_head list ;
};

#line 2025  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct pcpu_sw_netstats {
   u64 rx_packets ;
   u64 rx_bytes ;
   u64 tx_packets ;
   u64 tx_bytes ;
   struct u64_stats_sync syncp ;
};

#line 131  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uaccess.h"
struct page_counter {
   atomic_long_t count ;
   unsigned long limit ;
   struct page_counter *parent ;
   unsigned long watermark ;
   unsigned long failcnt ;
};

#line 170  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/cacheflush.h"
struct sock_filter {
   __u16 code ;
   __u8 jt ;
   __u8 jf ;
   __u32 k ;
};

#line 49  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/filter.h"
struct bpf_insn {
   __u8 code ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) dst_reg : 4 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) src_reg : 4 ;
   __s16 off ;
   __s32 imm ;
};

#line 81  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/bpf.h"
enum bpf_prog_type {
    BPF_PROG_TYPE_UNSPEC = 0,
    BPF_PROG_TYPE_SOCKET_FILTER = 1,
    BPF_PROG_TYPE_KPROBE = 2,
    BPF_PROG_TYPE_SCHED_CLS = 3,
    BPF_PROG_TYPE_SCHED_ACT = 4
};

#line 273 
struct bpf_prog_aux;

#line 314  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/filter.h"
struct sock_fprog_kern {
   u16 len ;
   struct sock_filter *filter ;
};

#line 325  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/filter.h"
union __anonunion_332 {
   struct sock_filter insns[0U] ;
   struct bpf_insn insnsi[0U] ;
};

#line 325  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/filter.h"
struct bpf_prog {
   u16 pages ;
   bool jited ;
   bool gpl_compatible ;
   u32 len ;
   enum bpf_prog_type type ;
   struct bpf_prog_aux *aux ;
   struct sock_fprog_kern *orig_prog ;
   unsigned int (*bpf_func)(struct sk_buff const *, struct bpf_insn const *) ;
   union __anonunion_332 __anonCompField_bpf_prog_99 ;
};

#line 342  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/filter.h"
struct sk_filter {
   atomic_t refcnt ;
   struct callback_head rcu ;
   struct bpf_prog *prog ;
};

#line 101  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rculist_nulls.h"
struct pollfd {
   int fd ;
   short events ;
   short revents ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/poll.h"
struct poll_table_struct {
   void (*_qproc)(struct file *, wait_queue_head_t *, struct poll_table_struct *) ;
   unsigned long _key ;
};

#line 136  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rtnetlink.h"
struct nla_policy {
   u16 type ;
   u16 len ;
};

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/rtnetlink.h"
struct rtnl_link_ops {
   struct list_head list ;
   char const *kind ;
   size_t priv_size ;
   void (*setup)(struct net_device *) ;
   int maxtype ;
   struct nla_policy const *policy ;
   int (*validate)(struct nlattr **, struct nlattr **) ;
   int (*newlink)(struct net *, struct net_device *, struct nlattr **, struct nlattr **) ;
   int (*changelink)(struct net_device *, struct nlattr **, struct nlattr **) ;
   void (*dellink)(struct net_device *, struct list_head *) ;
   size_t (*get_size)(struct net_device const *) ;
   int (*fill_info)(struct sk_buff *, struct net_device const *) ;
   size_t (*get_xstats_size)(struct net_device const *) ;
   int (*fill_xstats)(struct sk_buff *, struct net_device const *) ;
   unsigned int (*get_num_tx_queues)(void) ;
   unsigned int (*get_num_rx_queues)(void) ;
   int slave_maxtype ;
   struct nla_policy const *slave_policy ;
   int (*slave_validate)(struct nlattr **, struct nlattr **) ;
   int (*slave_changelink)(struct net_device *, struct net_device *, struct nlattr **, struct nlattr **) ;
   size_t (*get_slave_size)(struct net_device const *, struct net_device const *) ;
   int (*fill_slave_info)(struct sk_buff *, struct net_device const *, struct net_device const *) ;
   struct net *(*get_link_net)(struct net_device const *) ;
};

#line 171 
struct neigh_table;

#line 171  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/rtnetlink.h"
struct neigh_parms {
   possible_net_t net ;
   struct net_device *dev ;
   struct list_head list ;
   int (*neigh_setup)(struct neighbour *) ;
   void (*neigh_cleanup)(struct neighbour *) ;
   struct neigh_table *tbl ;
   void *sysctl_table ;
   int dead ;
   atomic_t refcnt ;
   struct callback_head callback_head ;
   int reachable_time ;
   int data[13U] ;
   unsigned long data_state[1U] ;
};

#line 110  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/neighbour.h"
struct neigh_statistics {
   unsigned long allocs ;
   unsigned long destroys ;
   unsigned long hash_grows ;
   unsigned long res_failed ;
   unsigned long lookups ;
   unsigned long hits ;
   unsigned long rcv_probes_mcast ;
   unsigned long rcv_probes_ucast ;
   unsigned long periodic_gc_runs ;
   unsigned long forced_gc_runs ;
   unsigned long unres_discards ;
};

#line 129 
struct neigh_ops;

#line 129  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/neighbour.h"
struct neighbour {
   struct neighbour *next ;
   struct neigh_table *tbl ;
   struct neigh_parms *parms ;
   unsigned long confirmed ;
   unsigned long updated ;
   rwlock_t lock ;
   atomic_t refcnt ;
   struct sk_buff_head arp_queue ;
   unsigned int arp_queue_len_bytes ;
   struct timer_list timer ;
   unsigned long used ;
   atomic_t probes ;
   __u8 flags ;
   __u8 nud_state ;
   __u8 type ;
   __u8 dead ;
   seqlock_t ha_lock ;
   unsigned char ha[32U] ;
   struct hh_cache hh ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   struct neigh_ops const *ops ;
   struct callback_head rcu ;
   struct net_device *dev ;
   u8 primary_key[0U] ;
};

#line 158  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/neighbour.h"
struct neigh_ops {
   int family ;
   void (*solicit)(struct neighbour *, struct sk_buff *) ;
   void (*error_report)(struct neighbour *, struct sk_buff *) ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   int (*connected_output)(struct neighbour *, struct sk_buff *) ;
};

#line 166  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/neighbour.h"
struct pneigh_entry {
   struct pneigh_entry *next ;
   possible_net_t net ;
   struct net_device *dev ;
   u8 flags ;
   u8 key[0U] ;
};

#line 174  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/neighbour.h"
struct neigh_hash_table {
   struct neighbour **hash_buckets ;
   unsigned int hash_shift ;
   __u32 hash_rnd[4U] ;
   struct callback_head rcu ;
};

#line 187  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/neighbour.h"
struct neigh_table {
   int family ;
   int entry_size ;
   int key_len ;
   __be16 protocol ;
   __u32 (*hash)(void const *, struct net_device const *, __u32 *) ;
   bool (*key_eq)(struct neighbour const *, void const *) ;
   int (*constructor)(struct neighbour *) ;
   int (*pconstructor)(struct pneigh_entry *) ;
   void (*pdestructor)(struct pneigh_entry *) ;
   void (*proxy_redo)(struct sk_buff *) ;
   char *id ;
   struct neigh_parms parms ;
   struct list_head parms_list ;
   int gc_interval ;
   int gc_thresh1 ;
   int gc_thresh2 ;
   int gc_thresh3 ;
   unsigned long last_flush ;
   struct delayed_work gc_work ;
   struct timer_list proxy_timer ;
   struct sk_buff_head proxy_queue ;
   atomic_t entries ;
   rwlock_t lock ;
   unsigned long last_rand ;
   struct neigh_statistics *stats ;
   struct neigh_hash_table *nht ;
   struct pneigh_entry **phash_buckets ;
};

#line 519 
struct dn_route;

#line 519  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/neighbour.h"
union __anonunion_343 {
   struct dst_entry *next ;
   struct rtable *rt_next ;
   struct rt6_info *rt6_next ;
   struct dn_route *dn_next ;
};

#line 519  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/neighbour.h"
struct dst_entry {
   struct callback_head callback_head ;
   struct dst_entry *child ;
   struct net_device *dev ;
   struct dst_ops *ops ;
   unsigned long _metrics ;
   unsigned long expires ;
   struct dst_entry *path ;
   struct dst_entry *from ;
   struct xfrm_state *xfrm ;
   int (*input)(struct sk_buff *) ;
   int (*output)(struct sock *, struct sk_buff *) ;
   unsigned short flags ;
   unsigned short pending_confirm ;
   short error ;
   short obsolete ;
   unsigned short header_len ;
   unsigned short trailer_len ;
   __u32 tclassid ;
   long __pad_to_align_refcnt[2U] ;
   atomic_t __refcnt ;
   int __use ;
   unsigned long lastuse ;
   union __anonunion_343 __anonCompField_dst_entry_100 ;
};

#line 124  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
struct __anonstruct_socket_lock_t_344 {
   spinlock_t slock ;
   int owned ;
   wait_queue_head_t wq ;
   struct lockdep_map dep_map ;
};

#line 124  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
typedef struct __anonstruct_socket_lock_t_344 socket_lock_t;

#line 124 
struct proto;

#line 130  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
typedef __u32 __portpair;

#line 131  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
typedef __u64 __addrpair;

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
struct __anonstruct_346 {
   __be32 skc_daddr ;
   __be32 skc_rcv_saddr ;
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
union __anonunion_345 {
   __addrpair skc_addrpair ;
   struct __anonstruct_346 __anonCompField___anonunion_345_101 ;
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
union __anonunion_347 {
   unsigned int skc_hash ;
   __u16 skc_u16hashes[2U] ;
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
struct __anonstruct_349 {
   __be16 skc_dport ;
   __u16 skc_num ;
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
union __anonunion_348 {
   __portpair skc_portpair ;
   struct __anonstruct_349 __anonCompField___anonunion_348_104 ;
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
union __anonunion_350 {
   struct hlist_node skc_bind_node ;
   struct hlist_nulls_node skc_portaddr_node ;
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
union __anonunion_351 {
   struct hlist_node skc_node ;
   struct hlist_nulls_node skc_nulls_node ;
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
struct sock_common {
   union __anonunion_345 __anonCompField_sock_common_102 ;
   union __anonunion_347 __anonCompField_sock_common_103 ;
   union __anonunion_348 __anonCompField_sock_common_105 ;
   unsigned short skc_family ;
   unsigned char volatile skc_state ;
   unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) skc_reuse : 4 ;
   unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) skc_reuseport : 1 ;
   unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) skc_ipv6only : 1 ;
   unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) skc_net_refcnt : 1 ;
   int skc_bound_dev_if ;
   union __anonunion_350 __anonCompField_sock_common_106 ;
   struct proto *skc_prot ;
   possible_net_t skc_net ;
   struct in6_addr skc_v6_daddr ;
   struct in6_addr skc_v6_rcv_saddr ;
   atomic64_t skc_cookie ;
   int skc_dontcopy_begin[0U] ;
   union __anonunion_351 __anonCompField_sock_common_107 ;
   int skc_tx_queue_mapping ;
   atomic_t skc_refcnt ;
   int skc_dontcopy_end[0U] ;
};

#line 219 
struct cg_proto;

#line 220  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
struct __anonstruct_sk_backlog_352 {
   atomic_t rmem_alloc ;
   int len ;
   struct sk_buff *head ;
   struct sk_buff *tail ;
};

#line 220  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
struct sock {
   struct sock_common __sk_common ;
   socket_lock_t sk_lock ;
   struct sk_buff_head sk_receive_queue ;
   struct __anonstruct_sk_backlog_352 sk_backlog ;
   int sk_forward_alloc ;
   __u32 sk_rxhash ;
   u16 sk_incoming_cpu ;
   __u32 sk_txhash ;
   unsigned int sk_napi_id ;
   unsigned int sk_ll_usec ;
   atomic_t sk_drops ;
   int sk_rcvbuf ;
   struct sk_filter *sk_filter ;
   struct socket_wq *sk_wq ;
   struct xfrm_policy *sk_policy[2U] ;
   unsigned long sk_flags ;
   struct dst_entry *sk_rx_dst ;
   struct dst_entry *sk_dst_cache ;
   spinlock_t sk_dst_lock ;
   atomic_t sk_wmem_alloc ;
   atomic_t sk_omem_alloc ;
   int sk_sndbuf ;
   struct sk_buff_head sk_write_queue ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) sk_shutdown : 2 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) sk_no_check_tx : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) sk_no_check_rx : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) sk_userlocks : 4 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))) sk_protocol : 8 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(16))) sk_type : 16 ;
   int sk_wmem_queued ;
   gfp_t sk_allocation ;
   u32 sk_pacing_rate ;
   u32 sk_max_pacing_rate ;
   netdev_features_t sk_route_caps ;
   netdev_features_t sk_route_nocaps ;
   int sk_gso_type ;
   unsigned int sk_gso_max_size ;
   u16 sk_gso_max_segs ;
   int sk_rcvlowat ;
   unsigned long sk_lingertime ;
   struct sk_buff_head sk_error_queue ;
   struct proto *sk_prot_creator ;
   rwlock_t sk_callback_lock ;
   int sk_err ;
   int sk_err_soft ;
   u32 sk_ack_backlog ;
   u32 sk_max_ack_backlog ;
   __u32 sk_priority ;
   __u32 sk_cgrp_prioidx ;
   struct pid *sk_peer_pid ;
   struct cred const *sk_peer_cred ;
   long sk_rcvtimeo ;
   long sk_sndtimeo ;
   struct timer_list sk_timer ;
   ktime_t sk_stamp ;
   u16 sk_tsflags ;
   u32 sk_tskey ;
   struct socket *sk_socket ;
   void *sk_user_data ;
   struct page_frag sk_frag ;
   struct sk_buff *sk_send_head ;
   __s32 sk_peek_off ;
   int sk_write_pending ;
   void *sk_security ;
   __u32 sk_mark ;
   u32 sk_classid ;
   struct cg_proto *sk_cgrp ;
   void (*sk_state_change)(struct sock *) ;
   void (*sk_data_ready)(struct sock *) ;
   void (*sk_write_space)(struct sock *) ;
   void (*sk_error_report)(struct sock *) ;
   int (*sk_backlog_rcv)(struct sock *, struct sk_buff *) ;
   void (*sk_destruct)(struct sock *) ;
};

#line 914 
struct request_sock_ops;

#line 915 
struct timewait_sock_ops;

#line 916 
struct inet_hashinfo;

#line 917 
struct raw_hashinfo;

#line 932 
struct udp_table;

#line 932  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
union __anonunion_h_355 {
   struct inet_hashinfo *hashinfo ;
   struct udp_table *udp_table ;
   struct raw_hashinfo *raw_hash ;
};

#line 932  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
struct proto {
   void (*close)(struct sock *, long ) ;
   int (*connect)(struct sock *, struct sockaddr *, int ) ;
   int (*disconnect)(struct sock *, int ) ;
   struct sock *(*accept)(struct sock *, int , int *) ;
   int (*ioctl)(struct sock *, int , unsigned long ) ;
   int (*init)(struct sock *) ;
   void (*destroy)(struct sock *) ;
   void (*shutdown)(struct sock *, int ) ;
   int (*setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct sock *, int , int , char *, int *) ;
   int (*compat_setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct sock *, int , int , char *, int *) ;
   int (*compat_ioctl)(struct sock *, unsigned int , unsigned long ) ;
   int (*sendmsg)(struct sock *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct sock *, struct msghdr *, size_t , int , int , int *) ;
   int (*sendpage)(struct sock *, struct page *, int , size_t , int ) ;
   int (*bind)(struct sock *, struct sockaddr *, int ) ;
   int (*backlog_rcv)(struct sock *, struct sk_buff *) ;
   void (*release_cb)(struct sock *) ;
   void (*hash)(struct sock *) ;
   void (*unhash)(struct sock *) ;
   void (*rehash)(struct sock *) ;
   int (*get_port)(struct sock *, unsigned short ) ;
   void (*clear_sk)(struct sock *, int ) ;
   unsigned int inuse_idx ;
   bool (*stream_memory_free)(struct sock const *) ;
   void (*enter_memory_pressure)(struct sock *) ;
   atomic_long_t *memory_allocated ;
   struct percpu_counter *sockets_allocated ;
   int *memory_pressure ;
   long *sysctl_mem ;
   int *sysctl_wmem ;
   int *sysctl_rmem ;
   int max_header ;
   bool no_autobind ;
   struct kmem_cache *slab ;
   unsigned int obj_size ;
   int slab_flags ;
   struct percpu_counter *orphan_count ;
   struct request_sock_ops *rsk_prot ;
   struct timewait_sock_ops *twsk_prot ;
   union __anonunion_h_355 h ;
   struct module *owner ;
   char name[32U] ;
   struct list_head node ;
   int (*init_cgroup)(struct mem_cgroup *, struct cgroup_subsys *) ;
   void (*destroy_cgroup)(struct mem_cgroup *) ;
   struct cg_proto *(*proto_cgroup)(struct mem_cgroup *) ;
};

#line 1054  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
struct cg_proto {
   struct page_counter memory_allocated ;
   struct percpu_counter sockets_allocated ;
   int memory_pressure ;
   long sysctl_mem[3U] ;
   unsigned long flags ;
   struct mem_cgroup *memcg ;
};

#line 1204  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ieee80211.h"
struct ieee80211_mcs_info {
   u8 rx_mask[10U] ;
   __le16 rx_highest ;
   u8 tx_params ;
   u8 reserved[3U] ;
};

#line 1229  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ieee80211.h"
struct ieee80211_ht_cap {
   __le16 cap_info ;
   u8 ampdu_params_info ;
   struct ieee80211_mcs_info mcs ;
   __le16 extended_ht_cap_info ;
   __le32 tx_BF_cap_info ;
   u8 antenna_selection_info ;
};

#line 1297  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ieee80211.h"
struct ieee80211_ht_operation {
   u8 primary_chan ;
   u8 ht_param ;
   __le16 operation_mode ;
   __le16 stbc_param ;
   u8 basic_set[16U] ;
};

#line 1354  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ieee80211.h"
struct ieee80211_vht_mcs_info {
   __le16 rx_mcs_map ;
   __le16 rx_highest ;
   __le16 tx_mcs_map ;
   __le16 tx_highest ;
};

#line 1435  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ieee80211.h"
struct ieee80211_vht_cap {
   __le32 vht_cap_info ;
   struct ieee80211_vht_mcs_info supp_mcs ;
};

#line 1469  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ieee80211.h"
struct ieee80211_vht_operation {
   u8 chan_width ;
   u8 center_freq_seg1_idx ;
   u8 center_freq_seg2_idx ;
   __le16 basic_mcs_set ;
};

#line 1916  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ieee80211.h"
struct __anonstruct_chans_401 {
   u8 first_channel ;
   u8 num_channels ;
   s8 max_power ;
};

#line 1916  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ieee80211.h"
struct __anonstruct_ext_402 {
   u8 reg_extension_id ;
   u8 reg_class ;
   u8 coverage_class ;
};

#line 1916  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ieee80211.h"
union __anonunion_400 {
   struct __anonstruct_chans_401 chans ;
   struct __anonstruct_ext_402 ext ;
};

#line 1916  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ieee80211.h"
struct ieee80211_country_ie_triplet {
   union __anonunion_400 __anonCompField_ieee80211_country_ie_triplet_108 ;
};

#line 193  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/vmalloc.h"
struct firmware {
   size_t size ;
   u8 const *data ;
   struct page **pages ;
   void *priv ;
};

#line 69  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ctype.h"
struct ipv4_devconf {
   void *sysctl ;
   int data[29U] ;
   unsigned long state[1U] ;
};

#line 20  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/inetdevice.h"
struct in_ifaddr;

#line 20 
struct ip_mc_list;

#line 20  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/inetdevice.h"
struct in_device {
   struct net_device *dev ;
   atomic_t refcnt ;
   int dead ;
   struct in_ifaddr *ifa_list ;
   struct ip_mc_list *mc_list ;
   struct ip_mc_list **mc_hash ;
   int mc_count ;
   spinlock_t mc_tomb_lock ;
   struct ip_mc_list *mc_tomb ;
   unsigned long mr_v1_seen ;
   unsigned long mr_v2_seen ;
   unsigned long mr_maxdelay ;
   unsigned char mr_qrv ;
   unsigned char mr_gq_running ;
   unsigned char mr_ifc_count ;
   struct timer_list mr_gq_timer ;
   struct timer_list mr_ifc_timer ;
   struct neigh_parms *arp_parms ;
   struct ipv4_devconf cnf ;
   struct callback_head callback_head ;
};

#line 71  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/inetdevice.h"
struct in_ifaddr {
   struct hlist_node hash ;
   struct in_ifaddr *ifa_next ;
   struct in_device *ifa_dev ;
   struct callback_head callback_head ;
   __be32 ifa_local ;
   __be32 ifa_address ;
   __be32 ifa_mask ;
   __be32 ifa_broadcast ;
   unsigned char ifa_scope ;
   unsigned char ifa_prefixlen ;
   __u32 ifa_flags ;
   char ifa_label[16U] ;
   __u32 ifa_valid_lft ;
   __u32 ifa_preferred_lft ;
   unsigned long ifa_cstamp ;
   unsigned long ifa_tstamp ;
};

#line 470  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/debugfs.h"
enum nl80211_iftype {
    NL80211_IFTYPE_UNSPECIFIED = 0,
    NL80211_IFTYPE_ADHOC = 1,
    NL80211_IFTYPE_STATION = 2,
    NL80211_IFTYPE_AP = 3,
    NL80211_IFTYPE_AP_VLAN = 4,
    NL80211_IFTYPE_WDS = 5,
    NL80211_IFTYPE_MONITOR = 6,
    NL80211_IFTYPE_MESH_POINT = 7,
    NL80211_IFTYPE_P2P_CLIENT = 8,
    NL80211_IFTYPE_P2P_GO = 9,
    NL80211_IFTYPE_P2P_DEVICE = 10,
    NL80211_IFTYPE_OCB = 11,
    NUM_NL80211_IFTYPES = 12,
    NL80211_IFTYPE_MAX = 11
};

#line 2431  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/nl80211.h"
enum nl80211_reg_initiator {
    NL80211_REGDOM_SET_BY_CORE = 0,
    NL80211_REGDOM_SET_BY_USER = 1,
    NL80211_REGDOM_SET_BY_DRIVER = 2,
    NL80211_REGDOM_SET_BY_COUNTRY_IE = 3
};

#line 2484 
enum nl80211_dfs_regions {
    NL80211_DFS_UNSET = 0,
    NL80211_DFS_FCC = 1,
    NL80211_DFS_ETSI = 2,
    NL80211_DFS_JP = 3
};

#line 2491 
enum nl80211_user_reg_hint_type {
    NL80211_USER_REG_HINT_USER = 0,
    NL80211_USER_REG_HINT_CELL_BASE = 1,
    NL80211_USER_REG_HINT_INDOOR = 2
};

#line 2524 
enum nl80211_mesh_power_mode {
    NL80211_MESH_POWER_UNKNOWN = 0,
    NL80211_MESH_POWER_ACTIVE = 1,
    NL80211_MESH_POWER_LIGHT_SLEEP = 2,
    NL80211_MESH_POWER_DEEP_SLEEP = 3,
    __NL80211_MESH_POWER_AFTER_LAST = 4,
    NL80211_MESH_POWER_MAX = 3
};

#line 2607 
enum nl80211_chan_width {
    NL80211_CHAN_WIDTH_20_NOHT = 0,
    NL80211_CHAN_WIDTH_20 = 1,
    NL80211_CHAN_WIDTH_40 = 2,
    NL80211_CHAN_WIDTH_80 = 3,
    NL80211_CHAN_WIDTH_80P80 = 4,
    NL80211_CHAN_WIDTH_160 = 5,
    NL80211_CHAN_WIDTH_5 = 6,
    NL80211_CHAN_WIDTH_10 = 7
};

#line 2618 
enum nl80211_bss_scan_width {
    NL80211_BSS_CHAN_WIDTH_20 = 0,
    NL80211_BSS_CHAN_WIDTH_10 = 1,
    NL80211_BSS_CHAN_WIDTH_5 = 2
};

#line 2650 
enum nl80211_auth_type {
    NL80211_AUTHTYPE_OPEN_SYSTEM = 0,
    NL80211_AUTHTYPE_SHARED_KEY = 1,
    NL80211_AUTHTYPE_FT = 2,
    NL80211_AUTHTYPE_NETWORK_EAP = 3,
    NL80211_AUTHTYPE_SAE = 4,
    __NL80211_AUTHTYPE_NUM = 5,
    NL80211_AUTHTYPE_MAX = 4,
    NL80211_AUTHTYPE_AUTOMATIC = 5
};

#line 2668 
enum nl80211_mfp {
    NL80211_MFP_NO = 0,
    NL80211_MFP_REQUIRED = 1
};

#line 3734  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/nl80211.h"
struct nl80211_wowlan_tcp_data_seq {
   __u32 start ;
   __u32 offset ;
   __u32 len ;
};

#line 3871  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/nl80211.h"
struct nl80211_wowlan_tcp_data_token {
   __u32 offset ;
   __u32 len ;
   __u8 token_stream[] ;
};

#line 3883  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/nl80211.h"
struct nl80211_wowlan_tcp_data_token_feature {
   __u32 min_len ;
   __u32 max_len ;
   __u32 bufsize ;
};

#line 4021 
enum nl80211_hidden_ssid {
    NL80211_HIDDEN_SSID_NOT_IN_USE = 0,
    NL80211_HIDDEN_SSID_ZERO_LEN = 1,
    NL80211_HIDDEN_SSID_ZERO_CONTENTS = 2
};

#line 4111 
enum nl80211_acl_policy {
    NL80211_ACL_POLICY_ACCEPT_UNLESS_LISTED = 0,
    NL80211_ACL_POLICY_DENY_UNLESS_LISTED = 1
};

#line 4116 
enum nl80211_smps_mode {
    NL80211_SMPS_OFF = 0,
    NL80211_SMPS_STATIC = 1,
    NL80211_SMPS_DYNAMIC = 2,
    __NL80211_SMPS_AFTER_LAST = 3,
    NL80211_SMPS_MAX = 2
};

#line 4131 
enum nl80211_dfs_state {
    NL80211_DFS_USABLE = 0,
    NL80211_DFS_UNAVAILABLE = 1,
    NL80211_DFS_AVAILABLE = 2
};

#line 4153  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/nl80211.h"
struct nl80211_vendor_cmd_info {
   __u32 vendor_id ;
   __u32 subcmd ;
};

#line 4581 
enum environment_cap {
    ENVIRON_ANY = 0,
    ENVIRON_INDOOR = 1,
    ENVIRON_OUTDOOR = 2
};

#line 4587  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/nl80211.h"
struct regulatory_request {
   struct callback_head callback_head ;
   int wiphy_idx ;
   enum nl80211_reg_initiator initiator ;
   enum nl80211_user_reg_hint_type user_reg_hint_type ;
   char alpha2[2U] ;
   enum nl80211_dfs_regions dfs_region ;
   bool intersect ;
   bool processed ;
   enum environment_cap country_ie_env ;
   struct list_head list ;
};

#line 99  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/regulatory.h"
struct ieee80211_freq_range {
   u32 start_freq_khz ;
   u32 end_freq_khz ;
   u32 max_bandwidth_khz ;
};

#line 185  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/regulatory.h"
struct ieee80211_power_rule {
   u32 max_antenna_gain ;
   u32 max_eirp ;
};

#line 190  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/regulatory.h"
struct ieee80211_reg_rule {
   struct ieee80211_freq_range freq_range ;
   struct ieee80211_power_rule power_rule ;
   u32 flags ;
   u32 dfs_cac_ms ;
};

#line 197  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/regulatory.h"
struct ieee80211_regdomain {
   struct callback_head callback_head ;
   u32 n_reg_rules ;
   char alpha2[3U] ;
   enum nl80211_dfs_regions dfs_region ;
   struct ieee80211_reg_rule reg_rules[] ;
};

#line 205 
struct wiphy;

#line 206 
enum ieee80211_band {
    IEEE80211_BAND_2GHZ = 0,
    IEEE80211_BAND_5GHZ = 1,
    IEEE80211_BAND_60GHZ = 2,
    IEEE80211_NUM_BANDS = 3
};

#line 228  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/regulatory.h"
struct ieee80211_channel {
   enum ieee80211_band band ;
   u16 center_freq ;
   u16 hw_value ;
   u32 flags ;
   int max_antenna_gain ;
   int max_power ;
   int max_reg_power ;
   bool beacon_found ;
   u32 orig_flags ;
   int orig_mag ;
   int orig_mpwr ;
   enum nl80211_dfs_state dfs_state ;
   unsigned long dfs_state_entered ;
   unsigned int dfs_cac_ms ;
};

#line 207  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/cfg80211.h"
struct ieee80211_rate {
   u32 flags ;
   u16 bitrate ;
   u16 hw_value ;
   u16 hw_value_short ;
};

#line 269  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/cfg80211.h"
struct ieee80211_sta_ht_cap {
   u16 cap ;
   bool ht_supported ;
   u8 ampdu_factor ;
   u8 ampdu_density ;
   struct ieee80211_mcs_info mcs ;
};

#line 289  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/cfg80211.h"
struct ieee80211_sta_vht_cap {
   bool vht_supported ;
   u32 cap ;
   struct ieee80211_vht_mcs_info vht_mcs ;
};

#line 305  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/cfg80211.h"
struct ieee80211_supported_band {
   struct ieee80211_channel *channels ;
   struct ieee80211_rate *bitrates ;
   enum ieee80211_band band ;
   int n_channels ;
   int n_bitrates ;
   struct ieee80211_sta_ht_cap ht_cap ;
   struct ieee80211_sta_vht_cap vht_cap ;
};

#line 387  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/cfg80211.h"
struct cfg80211_chan_def {
   struct ieee80211_channel *chan ;
   enum nl80211_chan_width width ;
   u32 center_freq1 ;
   u32 center_freq2 ;
};

#line 608  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/cfg80211.h"
struct cfg80211_crypto_settings {
   u32 wpa_versions ;
   u32 cipher_group ;
   int n_ciphers_pairwise ;
   u32 ciphers_pairwise[5U] ;
   int n_akm_suites ;
   u32 akm_suites[2U] ;
   bool control_port ;
   __be16 control_port_ethertype ;
   bool control_port_no_encrypt ;
};

#line 638  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/cfg80211.h"
struct cfg80211_beacon_data {
   u8 const *head ;
   u8 const *tail ;
   u8 const *beacon_ies ;
   u8 const *proberesp_ies ;
   u8 const *assocresp_ies ;
   u8 const *probe_resp ;
   size_t head_len ;
   size_t tail_len ;
   size_t beacon_ies_len ;
   size_t proberesp_ies_len ;
   size_t assocresp_ies_len ;
   size_t probe_resp_len ;
};

#line 671  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/cfg80211.h"
struct mac_address {
   u8 addr[6U] ;
};

#line 675  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/cfg80211.h"
struct cfg80211_acl_data {
   enum nl80211_acl_policy acl_policy ;
   int n_acl_entries ;
   struct mac_address mac_addrs[] ;
};

#line 691  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/cfg80211.h"
struct cfg80211_ap_settings {
   struct cfg80211_chan_def chandef ;
   struct cfg80211_beacon_data beacon ;
   int beacon_interval ;
   int dtim_period ;
   u8 const *ssid ;
   size_t ssid_len ;
   enum nl80211_hidden_ssid hidden_ssid ;
   struct cfg80211_crypto_settings crypto ;
   bool privacy ;
   enum nl80211_auth_type auth_type ;
   enum nl80211_smps_mode smps_mode ;
   int inactivity_timeout ;
   u8 p2p_ctwindow ;
   bool p2p_opp_ps ;
   struct cfg80211_acl_data const *acl ;
};

#line 768  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/cfg80211.h"
struct station_parameters {
   u8 const *supported_rates ;
   struct net_device *vlan ;
   u32 sta_flags_mask ;
   u32 sta_flags_set ;
   u32 sta_modify_mask ;
   int listen_interval ;
   u16 aid ;
   u8 supported_rates_len ;
   u8 plink_action ;
   u8 plink_state ;
   struct ieee80211_ht_cap const *ht_capa ;
   struct ieee80211_vht_cap const *vht_capa ;
   u8 uapsd_queues ;
   u8 max_sp ;
   enum nl80211_mesh_power_mode local_pm ;
   u16 capability ;
   u8 const *ext_capab ;
   u8 ext_capab_len ;
   u8 const *supported_channels ;
   u8 supported_channels_len ;
   u8 const *supported_oper_classes ;
   u8 supported_oper_classes_len ;
   u8 opmode_notif ;
   bool opmode_notif_used ;
};

#line 1395  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/cfg80211.h"
struct cfg80211_ssid {
   u8 ssid[32U] ;
   u8 ssid_len ;
};

#line 1428  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/cfg80211.h"
struct cfg80211_scan_request {
   struct cfg80211_ssid *ssids ;
   int n_ssids ;
   u32 n_channels ;
   enum nl80211_bss_scan_width scan_width ;
   u8 const *ie ;
   size_t ie_len ;
   u32 flags ;
   u32 rates[3U] ;
   struct wireless_dev *wdev ;
   u8 mac_addr[6U] ;
   u8 mac_addr_mask[6U] ;
   struct wiphy *wiphy ;
   unsigned long scan_start ;
   bool aborted ;
   bool notified ;
   bool no_cck ;
   struct ieee80211_channel *channels[0U] ;
};

#line 1491  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/cfg80211.h"
struct cfg80211_match_set {
   struct cfg80211_ssid ssid ;
   s32 rssi_thold ;
};

#line 1499  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/cfg80211.h"
struct cfg80211_sched_scan_request {
   struct cfg80211_ssid *ssids ;
   int n_ssids ;
   u32 n_channels ;
   enum nl80211_bss_scan_width scan_width ;
   u32 interval ;
   u8 const *ie ;
   size_t ie_len ;
   u32 flags ;
   struct cfg80211_match_set *match_sets ;
   int n_match_sets ;
   s32 min_rssi_thold ;
   u32 delay ;
   u8 mac_addr[6U] ;
   u8 mac_addr_mask[6U] ;
   struct wiphy *wiphy ;
   struct net_device *dev ;
   unsigned long scan_start ;
   struct callback_head callback_head ;
   u32 owner_nlportid ;
   struct ieee80211_channel *channels[0U] ;
};

#line 1561 
enum cfg80211_signal_type {
    CFG80211_SIGNAL_TYPE_NONE = 0,
    CFG80211_SIGNAL_TYPE_MBM = 1,
    CFG80211_SIGNAL_TYPE_UNSPEC = 2
};

#line 1766  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/cfg80211.h"
struct cfg80211_ibss_params {
   u8 const *ssid ;
   u8 const *bssid ;
   struct cfg80211_chan_def chandef ;
   u8 const *ie ;
   u8 ssid_len ;
   u8 ie_len ;
   u16 beacon_interval ;
   u32 basic_rates ;
   bool channel_fixed ;
   bool privacy ;
   bool control_port ;
   bool userspace_handles_dfs ;
   int mcast_rate[3U] ;
   struct ieee80211_ht_cap ht_capa ;
   struct ieee80211_ht_cap ht_capa_mask ;
};

#line 1814  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/cfg80211.h"
struct cfg80211_connect_params {
   struct ieee80211_channel *channel ;
   struct ieee80211_channel *channel_hint ;
   u8 const *bssid ;
   u8 const *bssid_hint ;
   u8 const *ssid ;
   size_t ssid_len ;
   enum nl80211_auth_type auth_type ;
   u8 const *ie ;
   size_t ie_len ;
   bool privacy ;
   enum nl80211_mfp mfp ;
   struct cfg80211_crypto_settings crypto ;
   u8 const *key ;
   u8 key_len ;
   u8 key_idx ;
   u32 flags ;
   int bg_scan_period ;
   struct ieee80211_ht_cap ht_capa ;
   struct ieee80211_ht_cap ht_capa_mask ;
   struct ieee80211_vht_cap vht_capa ;
   struct ieee80211_vht_cap vht_capa_mask ;
};

#line 1916  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/cfg80211.h"
struct cfg80211_pkt_pattern {
   u8 const *mask ;
   u8 const *pattern ;
   int pattern_len ;
   int pkt_offset ;
};

#line 1933  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/cfg80211.h"
struct cfg80211_wowlan_tcp {
   struct socket *sock ;
   __be32 src ;
   __be32 dst ;
   u16 src_port ;
   u16 dst_port ;
   u8 dst_mac[6U] ;
   int payload_len ;
   u8 const *payload ;
   struct nl80211_wowlan_tcp_data_seq payload_seq ;
   u32 data_interval ;
   u32 wake_len ;
   u8 const *wake_data ;
   u8 const *wake_mask ;
   u32 tokens_size ;
   struct nl80211_wowlan_tcp_data_token payload_tok ;
};

#line 1968  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/cfg80211.h"
struct cfg80211_wowlan {
   bool any ;
   bool disconnect ;
   bool magic_pkt ;
   bool gtk_rekey_failure ;
   bool eap_identity_req ;
   bool four_way_handshake ;
   bool rfkill_release ;
   struct cfg80211_pkt_pattern *patterns ;
   struct cfg80211_wowlan_tcp *tcp ;
   int n_patterns ;
   struct cfg80211_sched_scan_request *nd_config ;
};

#line 2736  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/cfg80211.h"
struct ieee80211_iface_limit {
   u16 max ;
   u16 types ;
};

#line 2797  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/cfg80211.h"
struct ieee80211_iface_combination {
   struct ieee80211_iface_limit const *limits ;
   u32 num_different_channels ;
   u16 max_interfaces ;
   u8 n_limits ;
   bool beacon_int_infra_match ;
   u8 radar_detect_widths ;
   u8 radar_detect_regions ;
};

#line 2869  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/cfg80211.h"
struct ieee80211_txrx_stypes {
   u16 tx ;
   u16 rx ;
};

#line 2885  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/cfg80211.h"
struct wiphy_wowlan_tcp_support {
   struct nl80211_wowlan_tcp_data_token_feature const *tok ;
   u32 data_payload_max ;
   u32 data_interval_max ;
   u32 wake_payload_max ;
   bool seq ;
};

#line 2910  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/cfg80211.h"
struct wiphy_wowlan_support {
   u32 flags ;
   int n_patterns ;
   int pattern_max_len ;
   int pattern_min_len ;
   int max_pkt_offset ;
   int max_nd_match_sets ;
   struct wiphy_wowlan_tcp_support const *tcp ;
};

#line 2935  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/cfg80211.h"
struct wiphy_coalesce_support {
   int n_rules ;
   int max_delay ;
   int n_patterns ;
   int pattern_max_len ;
   int pattern_min_len ;
   int max_pkt_offset ;
};

#line 2960  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/cfg80211.h"
struct wiphy_vendor_command {
   struct nl80211_vendor_cmd_info info ;
   u32 flags ;
   int (*doit)(struct wiphy *, struct wireless_dev *, void const *, int ) ;
};

#line 2981  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/cfg80211.h"
struct wiphy {
   u8 perm_addr[6U] ;
   u8 addr_mask[6U] ;
   struct mac_address *addresses ;
   struct ieee80211_txrx_stypes const *mgmt_stypes ;
   struct ieee80211_iface_combination const *iface_combinations ;
   int n_iface_combinations ;
   u16 software_iftypes ;
   u16 n_addresses ;
   u16 interface_modes ;
   u16 max_acl_mac_addrs ;
   u32 flags ;
   u32 regulatory_flags ;
   u32 features ;
   u8 ext_features[1U] ;
   u32 ap_sme_capa ;
   enum cfg80211_signal_type signal_type ;
   int bss_priv_size ;
   u8 max_scan_ssids ;
   u8 max_sched_scan_ssids ;
   u8 max_match_sets ;
   u16 max_scan_ie_len ;
   u16 max_sched_scan_ie_len ;
   int n_cipher_suites ;
   u32 const *cipher_suites ;
   u8 retry_short ;
   u8 retry_long ;
   u32 frag_threshold ;
   u32 rts_threshold ;
   u8 coverage_class ;
   char fw_version[32U] ;
   u32 hw_version ;
   struct wiphy_wowlan_support const *wowlan ;
   struct cfg80211_wowlan *wowlan_config ;
   u16 max_remain_on_channel_duration ;
   u8 max_num_pmkids ;
   u32 available_antennas_tx ;
   u32 available_antennas_rx ;
   u32 probe_resp_offload ;
   u8 const *extended_capabilities ;
   u8 const *extended_capabilities_mask ;
   u8 extended_capabilities_len ;
   void const *privid ;
   struct ieee80211_supported_band *bands[3U] ;
   void (*reg_notifier)(struct wiphy *, struct regulatory_request *) ;
   struct ieee80211_regdomain const *regd ;
   struct device dev ;
   bool registered ;
   struct dentry *debugfsdir ;
   struct ieee80211_ht_cap const *ht_capa_mod_mask ;
   struct ieee80211_vht_cap const *vht_capa_mod_mask ;
   possible_net_t _net ;
   struct iw_handler_def const *wext ;
   struct wiphy_coalesce_support const *coalesce ;
   struct wiphy_vendor_command const *vendor_commands ;
   struct nl80211_vendor_cmd_info const *vendor_events ;
   int n_vendor_commands ;
   int n_vendor_events ;
   u16 max_ap_assoc_sta ;
   u8 max_num_csa_counters ;
   u8 max_adj_channel_rssi_comp ;
   char priv[0U] ;
};

#line 3369 
struct cfg80211_conn;

#line 3370 
struct cfg80211_internal_bss;

#line 3371 
struct cfg80211_cached_keys;

#line 3372  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/cfg80211.h"
struct __anonstruct_wext_406 {
   struct cfg80211_ibss_params ibss ;
   struct cfg80211_connect_params connect ;
   struct cfg80211_cached_keys *keys ;
   u8 const *ie ;
   size_t ie_len ;
   u8 bssid[6U] ;
   u8 prev_bssid[6U] ;
   u8 ssid[32U] ;
   s8 default_key ;
   s8 default_mgmt_key ;
   bool prev_bssid_valid ;
};

#line 3372  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/cfg80211.h"
struct wireless_dev {
   struct wiphy *wiphy ;
   enum nl80211_iftype iftype ;
   struct list_head list ;
   struct net_device *netdev ;
   u32 identifier ;
   struct list_head mgmt_registrations ;
   spinlock_t mgmt_registrations_lock ;
   struct mutex mtx ;
   bool use_4addr ;
   bool p2p_started ;
   u8 address[6U] ;
   u8 ssid[32U] ;
   u8 ssid_len ;
   u8 mesh_id_len ;
   u8 mesh_id_up_len ;
   struct cfg80211_conn *conn ;
   struct cfg80211_cached_keys *connect_keys ;
   struct list_head event_list ;
   spinlock_t event_lock ;
   struct cfg80211_internal_bss *current_bss ;
   struct cfg80211_chan_def preset_chandef ;
   struct cfg80211_chan_def chandef ;
   bool ibss_fixed ;
   bool ibss_dfs_possible ;
   bool ps ;
   int ps_timeout ;
   int beacon_interval ;
   u32 ap_unexpected_nlportid ;
   bool cac_started ;
   unsigned long cac_start_time ;
   unsigned int cac_time_ms ;
   u32 owner_nlportid ;
   struct __anonstruct_wext_406 wext ;
};

#line 5468  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/mac80211.h"
struct mwifiex_fw_image {
   u8 *helper_buf ;
   u32 helper_len ;
   u8 *fw_buf ;
   u32 fw_len ;
};

#line 170  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/decl.h"
struct mwifiex_802_11_ssid {
   u32 ssid_len ;
   u8 ssid[32U] ;
};

#line 175  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/decl.h"
struct mwifiex_wait_queue {
   wait_queue_head_t wait ;
   int status ;
};

#line 199 
enum mwifiex_wmm_ac_e {
    WMM_AC_BK = 0,
    WMM_AC_BE = 1,
    WMM_AC_VI = 2,
    WMM_AC_VO = 3
};

#line 206  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/decl.h"
struct ieee_types_wmm_ac_parameters {
   u8 aci_aifsn_bitmap ;
   u8 ecw_bitmap ;
   __le16 tx_op_limit ;
};

#line 212  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/decl.h"
struct mwifiex_types_wmm_info {
   u8 oui[4U] ;
   u8 subtype ;
   u8 version ;
   u8 qos_info ;
   u8 reserved ;
   struct ieee_types_wmm_ac_parameters ac_params[4U] ;
};

#line 229  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/decl.h"
struct mwifiex_chan_stats {
   u8 chan_num ;
   u8 bandcfg ;
   u8 flags ;
   s8 noise ;
   u16 total_bss ;
   u16 cca_scan_dur ;
   u16 cca_busy_dur ;
};

#line 239  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/decl.h"
struct mwifiex_histogram_data {
   atomic_t rx_rate[74U] ;
   atomic_t snr[256U] ;
   atomic_t noise_flr[256U] ;
   atomic_t sig_str[256U] ;
   atomic_t num_samples ;
};

#line 254  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/decl.h"
struct mwifiex_iface_comb {
   u8 sta_intf ;
   u8 uap_intf ;
   u8 p2p_intf ;
};

#line 265  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/decl.h"
struct mwifiex_11h_intf_state {
   bool is_11h_enabled ;
   bool is_11h_active ;
};

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/ioctl.h"
struct wpa_param {
   u8 pairwise_cipher_wpa ;
   u8 pairwise_cipher_wpa2 ;
   u8 group_cipher ;
   u32 length ;
   u8 passphrase[64U] ;
};

#line 74  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/ioctl.h"
struct wep_key {
   u8 key_index ;
   u8 is_default ;
   u16 length ;
   u8 key[13U] ;
};

#line 81  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/ioctl.h"
struct mwifiex_uap_bss_param {
   u8 channel ;
   u8 band_cfg ;
   u16 rts_threshold ;
   u16 frag_threshold ;
   u8 retry_limit ;
   struct mwifiex_802_11_ssid ssid ;
   u8 bcast_ssid_ctl ;
   u8 radio_ctl ;
   u8 dtim_period ;
   u16 beacon_period ;
   u16 auth_mode ;
   u16 protocol ;
   u16 key_mgmt ;
   u16 key_mgmt_operation ;
   struct wpa_param wpa_cfg ;
   struct wep_key wep_cfg[4U] ;
   struct ieee80211_ht_cap ht_cap ;
   struct ieee80211_vht_cap vht_cap ;
   u8 rates[14U] ;
   u32 sta_ao_timer ;
   u32 ps_sta_ao_timer ;
   u8 qos_info ;
   u8 power_constraint ;
   struct mwifiex_types_wmm_info wmm_info ;
};

#line 292  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/ioctl.h"
struct mwifiex_11ac_vht_cfg {
   u8 band_config ;
   u8 misc_config ;
   u32 cap_info ;
   u32 mcs_tx_set ;
   u32 mcs_rx_set ;
};

#line 346  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/ioctl.h"
struct mwifiex_ds_mem_rw {
   u32 addr ;
   u32 value ;
};

#line 372  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/ioctl.h"
struct subsc_evt_cfg {
   u8 abs_value ;
   u8 evt_freq ;
};

#line 380  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/ioctl.h"
struct mwifiex_ds_misc_subsc_evt {
   u16 action ;
   u16 events ;
   struct subsc_evt_cfg bcn_l_rssi_cfg ;
   struct subsc_evt_cfg bcn_h_rssi_cfg ;
};

#line 469 
struct mwifiex_private;

#line 81  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct mwifiex_ie_types_header {
   __le16 type ;
   __le16 len ;
};

#line 662  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct mwifiex_chan_scan_param_set {
   u8 radio_type ;
   u8 chan_number ;
   u8 chan_scan_mode_bitmap ;
   __le16 min_scan_time ;
   __le16 max_scan_time ;
};

#line 783  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct mwifiex_ie_type_key_param_set {
   __le16 type ;
   __le16 length ;
   __le16 key_type_id ;
   __le16 key_info ;
   __le16 key_len ;
   u8 key[50U] ;
};

#line 801  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct mwifiex_wep_param {
   __le16 key_len ;
   u8 key[13U] ;
};

#line 806  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct mwifiex_tkip_param {
   u8 pn[8U] ;
   __le16 key_len ;
   u8 key[32U] ;
};

#line 812  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct mwifiex_aes_param {
   u8 pn[8U] ;
   __le16 key_len ;
   u8 key[16U] ;
};

#line 818  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct mwifiex_wapi_param {
   u8 pn[16U] ;
   __le16 key_len ;
   u8 key[32U] ;
};

#line 824  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct mwifiex_cmac_aes_param {
   u8 ipn[8U] ;
   __le16 key_len ;
   u8 key[16U] ;
};

#line 830  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
union __anonunion_key_params_428 {
   struct mwifiex_wep_param wep ;
   struct mwifiex_tkip_param tkip ;
   struct mwifiex_aes_param aes ;
   struct mwifiex_wapi_param wapi ;
   struct mwifiex_cmac_aes_param cmac_aes ;
};

#line 830  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct mwifiex_ie_type_key_param_set_v2 {
   __le16 type ;
   __le16 len ;
   u8 mac_addr[6U] ;
   u8 key_idx ;
   u8 key_type ;
   __le16 key_info ;
   union __anonunion_key_params_428 key_params ;
};

#line 846  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct host_cmd_ds_802_11_key_material_v2 {
   __le16 action ;
   struct mwifiex_ie_type_key_param_set_v2 key_param_set ;
};

#line 851  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct host_cmd_ds_802_11_key_material {
   __le16 action ;
   struct mwifiex_ie_type_key_param_set key_param_set ;
};

#line 868  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct mwifiex_ps_param {
   __le16 null_pkt_interval ;
   __le16 multiple_dtims ;
   __le16 bcn_miss_timeout ;
   __le16 local_listen_interval ;
   __le16 adhoc_wake_period ;
   __le16 mode ;
   __le16 delay_to_ps ;
};

#line 893  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
union __anonunion_params_429 {
   struct mwifiex_ps_param opt_ps ;
   __le16 ps_bitmap ;
};

#line 893  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct host_cmd_ds_802_11_ps_mode_enh {
   __le16 action ;
   union __anonunion_params_429 params ;
};

#line 914  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct host_cmd_ds_get_hw_spec {
   __le16 hw_if_version ;
   __le16 version ;
   __le16 reserved ;
   __le16 num_of_mcast_adr ;
   u8 permanent_addr[6U] ;
   __le16 region_code ;
   __le16 number_of_antenna ;
   __le32 fw_release_number ;
   __le32 reserved_1 ;
   __le32 reserved_2 ;
   __le32 reserved_3 ;
   __le32 fw_cap_info ;
   __le32 dot_11n_dev_cap ;
   u8 dev_mcs_support ;
   __le16 mp_end_port ;
   __le16 mgmt_buf_count ;
   __le32 reserved_5 ;
   __le32 reserved_6 ;
   __le32 dot_11ac_dev_cap ;
   __le32 dot_11ac_mcs_support ;
   u8 tlvs[0U] ;
};

#line 938  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct host_cmd_ds_802_11_rssi_info {
   __le16 action ;
   __le16 ndata ;
   __le16 nbcn ;
   __le16 reserved[9U] ;
   long long reserved_1 ;
};

#line 946  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct host_cmd_ds_802_11_rssi_info_rsp {
   __le16 action ;
   __le16 ndata ;
   __le16 nbcn ;
   __le16 data_rssi_last ;
   __le16 data_nf_last ;
   __le16 data_rssi_avg ;
   __le16 data_nf_avg ;
   __le16 bcn_rssi_last ;
   __le16 bcn_nf_last ;
   __le16 bcn_rssi_avg ;
   __le16 bcn_nf_avg ;
   long long tsf_bcn ;
};

#line 961  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct host_cmd_ds_802_11_mac_address {
   __le16 action ;
   u8 mac_addr[6U] ;
};

#line 966  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct host_cmd_ds_mac_control {
   __le16 action ;
   __le16 reserved ;
};

#line 971  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct host_cmd_ds_mac_multicast_adr {
   __le16 action ;
   __le16 num_of_adrs ;
   u8 mac_list[32U][6U] ;
};

#line 977  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct host_cmd_ds_802_11_deauthenticate {
   u8 mac_addr[6U] ;
   __le16 reason_code ;
};

#line 982  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct host_cmd_ds_802_11_associate {
   u8 peer_sta_addr[6U] ;
   __le16 cap_info_bitmap ;
   __le16 listen_interval ;
   __le16 beacon_period ;
   u8 dtim_period ;
};

#line 990  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct ieee_types_assoc_rsp {
   __le16 cap_info_bitmap ;
   __le16 status_code ;
   __le16 a_id ;
   u8 ie_buffer[1U] ;
};

#line 997  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct host_cmd_ds_802_11_associate_rsp {
   struct ieee_types_assoc_rsp assoc_rsp ;
};

#line 1001  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct ieee_types_cf_param_set {
   u8 element_id ;
   u8 len ;
   u8 cfp_cnt ;
   u8 cfp_period ;
   __le16 cfp_max_duration ;
   __le16 cfp_duration_remaining ;
};

#line 1010  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct ieee_types_ibss_param_set {
   u8 element_id ;
   u8 len ;
   __le16 atim_window ;
};

#line 1016  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
union ieee_types_ss_param_set {
   struct ieee_types_cf_param_set cf_param_set ;
   struct ieee_types_ibss_param_set ibss_param_set ;
};

#line 1021  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct ieee_types_fh_param_set {
   u8 element_id ;
   u8 len ;
   __le16 dwell_time ;
   u8 hop_set ;
   u8 hop_pattern ;
   u8 hop_index ;
};

#line 1030  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct ieee_types_ds_param_set {
   u8 element_id ;
   u8 len ;
   u8 current_chan ;
};

#line 1036  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
union ieee_types_phy_param_set {
   struct ieee_types_fh_param_set fh_param_set ;
   struct ieee_types_ds_param_set ds_param_set ;
};

#line 1041  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct ieee_types_oper_mode_ntf {
   u8 element_id ;
   u8 len ;
   u8 oper_mode ;
};

#line 1047  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct host_cmd_ds_802_11_ad_hoc_start {
   u8 ssid[32U] ;
   u8 bss_mode ;
   __le16 beacon_period ;
   u8 dtim_period ;
   union ieee_types_ss_param_set ss_param_set ;
   union ieee_types_phy_param_set phy_param_set ;
   u16 reserved1 ;
   __le16 cap_info_bitmap ;
   u8 data_rate[14U] ;
};

#line 1059  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct host_cmd_ds_802_11_ad_hoc_result {
   u8 pad[3U] ;
   u8 bssid[6U] ;
};

#line 1064  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct adhoc_bss_desc {
   u8 bssid[6U] ;
   u8 ssid[32U] ;
   u8 bss_mode ;
   __le16 beacon_period ;
   u8 dtim_period ;
   u8 time_stamp[8U] ;
   u8 local_time[8U] ;
   union ieee_types_phy_param_set phy_param_set ;
   union ieee_types_ss_param_set ss_param_set ;
   __le16 cap_info_bitmap ;
   u8 data_rates[14U] ;
};

#line 1078  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct host_cmd_ds_802_11_ad_hoc_join {
   struct adhoc_bss_desc bss_descriptor ;
   u16 reserved1 ;
   u16 reserved2 ;
};

#line 1090  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct host_cmd_ds_802_11_get_log {
   __le32 mcast_tx_frame ;
   __le32 failed ;
   __le32 retry ;
   __le32 multi_retry ;
   __le32 frame_dup ;
   __le32 rts_success ;
   __le32 rts_failure ;
   __le32 ack_failure ;
   __le32 rx_frag ;
   __le32 mcast_rx_frame ;
   __le32 fcs_error ;
   __le32 tx_frame ;
   __le32 reserved ;
   __le32 wep_icv_err_cnt[4U] ;
   __le32 bcn_rcv_cnt ;
   __le32 bcn_miss_cnt ;
};

#line 1116  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct host_cmd_ds_tx_rate_query {
   u8 tx_rate ;
   u8 ht_info ;
};

#line 1138  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct mwifiex_hs_config_param {
   __le32 conditions ;
   u8 gpio ;
   u8 gap ;
};

#line 1144  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct hs_activate_param {
   __le16 resp_ctrl ;
};

#line 1148  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
union __anonunion_params_430 {
   struct mwifiex_hs_config_param hs_config ;
   struct hs_activate_param hs_activate ;
};

#line 1148  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct host_cmd_ds_802_11_hs_cfg_enh {
   __le16 action ;
   union __anonunion_params_430 params ;
};

#line 1175  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct host_cmd_ds_802_11_snmp_mib {
   __le16 query_type ;
   __le16 oid ;
   __le16 buf_size ;
   u8 value[1U] ;
};

#line 1199  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct host_cmd_ds_tx_rate_cfg {
   __le16 action ;
   __le16 cfg_index ;
};

#line 1220  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct host_cmd_ds_txpwr_cfg {
   __le16 action ;
   __le16 cfg_index ;
   __le32 mode ;
};

#line 1226  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct host_cmd_ds_rf_tx_pwr {
   __le16 action ;
   __le16 cur_level ;
   u8 max_power ;
   u8 min_power ;
};

#line 1233  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct host_cmd_ds_rf_ant_mimo {
   __le16 action_tx ;
   __le16 tx_ant_mode ;
   __le16 action_rx ;
   __le16 rx_ant_mode ;
};

#line 1240  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct host_cmd_ds_rf_ant_siso {
   __le16 action ;
   __le16 ant_mode ;
};

#line 1245  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct host_cmd_ds_tdls_oper {
   __le16 tdls_action ;
   __le16 reason ;
   u8 peer_mac[6U] ;
};

#line 1251  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct mwifiex_chan_desc {
   __le16 start_freq ;
   u8 chan_width ;
   u8 chan_num ;
};

#line 1257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct host_cmd_ds_chan_rpt_req {
   struct mwifiex_chan_desc chan_desc ;
   __le32 msec_dwell_time ;
};

#line 1269  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct host_cmd_sdio_sp_rx_aggr_cfg {
   u8 action ;
   u8 enable ;
   __le16 block_size ;
};

#line 1355  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct host_cmd_ds_802_11_scan {
   u8 bss_mode ;
   u8 bssid[6U] ;
   u8 tlv_buffer[1U] ;
};

#line 1361  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct host_cmd_ds_802_11_scan_rsp {
   __le16 bss_descript_size ;
   u8 number_of_sets ;
   u8 bss_desc_and_tlv_buffer[1U] ;
};

#line 1367  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct host_cmd_ds_802_11_scan_ext {
   u32 reserved ;
   u8 tlv_buffer[1U] ;
};

#line 1389  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct host_cmd_ds_802_11_bg_scan_query {
   u8 flush ;
};

#line 1393  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct host_cmd_ds_802_11_bg_scan_query_rsp {
   __le32 report_condition ;
   struct host_cmd_ds_802_11_scan_rsp scan_resp ;
};

#line 1398  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct mwifiex_ietypes_domain_param_set {
   struct mwifiex_ie_types_header header ;
   u8 country_code[3U] ;
   struct ieee80211_country_ie_triplet triplet[1U] ;
};

#line 1404  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct host_cmd_ds_802_11d_domain_info {
   __le16 action ;
   struct mwifiex_ietypes_domain_param_set domain ;
};

#line 1409  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct host_cmd_ds_802_11d_domain_info_rsp {
   __le16 action ;
   struct mwifiex_ietypes_domain_param_set domain ;
};

#line 1414  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct host_cmd_ds_11n_addba_req {
   u8 add_req_result ;
   u8 peer_mac_addr[6U] ;
   u8 dialog_token ;
   __le16 block_ack_param_set ;
   __le16 block_ack_tmo ;
   __le16 ssn ;
};

#line 1423  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct host_cmd_ds_11n_addba_rsp {
   u8 add_rsp_result ;
   u8 peer_mac_addr[6U] ;
   u8 dialog_token ;
   __le16 status_code ;
   __le16 block_ack_param_set ;
   __le16 block_ack_tmo ;
   __le16 ssn ;
};

#line 1433  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct host_cmd_ds_11n_delba {
   u8 del_result ;
   u8 peer_mac_addr[6U] ;
   __le16 del_ba_param_set ;
   __le16 reason_code ;
   u8 reserved ;
};

#line 1447  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct host_cmd_ds_11n_cfg {
   __le16 action ;
   __le16 ht_tx_cap ;
   __le16 ht_tx_info ;
   __le16 misc_config ;
};

#line 1454  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct host_cmd_ds_txbuf_cfg {
   __le16 action ;
   __le16 buff_size ;
   __le16 mp_end_port ;
   __le16 reserved3 ;
};

#line 1461  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct host_cmd_ds_amsdu_aggr_ctrl {
   __le16 action ;
   __le16 enable ;
   __le16 curr_buf_size ;
};

#line 1467  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct host_cmd_ds_sta_deauth {
   u8 mac[6U] ;
   __le16 reason ;
};

#line 1479  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct host_cmd_ds_sta_list {
   u16 sta_count ;
   u8 tlv[0U] ;
};

#line 1511  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct ieee_types_vendor_header {
   u8 element_id ;
   u8 len ;
   u8 oui[4U] ;
   u8 oui_subtype ;
   u8 version ;
};

#line 1519  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct ieee_types_wmm_parameter {
   struct ieee_types_vendor_header vend_hdr ;
   u8 qos_info_bitmap ;
   u8 reserved ;
   struct ieee_types_wmm_ac_parameters ac_params[4U] ;
};

#line 1551  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct host_cmd_ds_wmm_get_status {
   u8 queue_status_tlv[64U] ;
   u8 wmm_param_tlv[28U] ;
};

#line 1557  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct mwifiex_wmm_ac_status {
   u8 disabled ;
   u8 flow_required ;
   u8 flow_created ;
};

#line 1563  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct mwifiex_ie_types_htcap {
   struct mwifiex_ie_types_header header ;
   struct ieee80211_ht_cap ht_cap ;
};

#line 1593  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct mwifiex_ie_types_wmmcap {
   struct mwifiex_ie_types_header header ;
   struct mwifiex_types_wmm_info wmm_info ;
};

#line 1613  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct host_cmd_ds_mem_access {
   __le16 action ;
   __le16 reserved ;
   __le32 addr ;
   __le32 value ;
};

#line 1625  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct host_cmd_ds_mac_reg_access {
   __le16 action ;
   __le16 offset ;
   __le32 value ;
};

#line 1631  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct host_cmd_ds_bbp_reg_access {
   __le16 action ;
   __le16 offset ;
   u8 value ;
   u8 reserved[3U] ;
};

#line 1638  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct host_cmd_ds_rf_reg_access {
   __le16 action ;
   __le16 offset ;
   u8 value ;
   u8 reserved[3U] ;
};

#line 1645  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct host_cmd_ds_pmic_reg_access {
   __le16 action ;
   __le16 offset ;
   u8 value ;
   u8 reserved[3U] ;
};

#line 1652  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct host_cmd_ds_802_11_eeprom_access {
   __le16 action ;
   __le16 offset ;
   __le16 byte_count ;
   u8 value ;
};

#line 1670  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct host_cmd_ds_sys_config {
   __le16 action ;
   u8 tlv[0U] ;
};

#line 1675  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct host_cmd_11ac_vht_cfg {
   __le16 action ;
   u8 band_config ;
   u8 misc_config ;
   __le32 cap_info ;
   __le32 mcs_tx_set ;
   __le32 mcs_rx_set ;
};

#line 1684  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct host_cmd_tlv_akmp {
   struct mwifiex_ie_types_header header ;
   __le16 key_mgmt ;
   __le16 key_mgmt_operation ;
};

#line 1690  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct host_cmd_tlv_pwk_cipher {
   struct mwifiex_ie_types_header header ;
   __le16 proto ;
   u8 cipher ;
   u8 reserved ;
};

#line 1697  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct host_cmd_tlv_gwk_cipher {
   struct mwifiex_ie_types_header header ;
   u8 cipher ;
   u8 reserved ;
};

#line 1703  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct host_cmd_tlv_passphrase {
   struct mwifiex_ie_types_header header ;
   u8 passphrase[0U] ;
};

#line 1708  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct host_cmd_tlv_wep_key {
   struct mwifiex_ie_types_header header ;
   u8 key_index ;
   u8 is_default ;
   u8 key[1U] ;
};

#line 1715  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct host_cmd_tlv_auth_type {
   struct mwifiex_ie_types_header header ;
   u8 auth_type ;
};

#line 1720  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct host_cmd_tlv_encrypt_protocol {
   struct mwifiex_ie_types_header header ;
   __le16 proto ;
};

#line 1725  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct host_cmd_tlv_ssid {
   struct mwifiex_ie_types_header header ;
   u8 ssid[0U] ;
};

#line 1730  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct host_cmd_tlv_rates {
   struct mwifiex_ie_types_header header ;
   u8 rates[0U] ;
};

#line 1740  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct host_cmd_tlv_bcast_ssid {
   struct mwifiex_ie_types_header header ;
   u8 bcast_ctl ;
};

#line 1745  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct host_cmd_tlv_beacon_period {
   struct mwifiex_ie_types_header header ;
   __le16 period ;
};

#line 1750  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct host_cmd_tlv_dtim_period {
   struct mwifiex_ie_types_header header ;
   u8 period ;
};

#line 1755  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct host_cmd_tlv_frag_threshold {
   struct mwifiex_ie_types_header header ;
   __le16 frag_thr ;
};

#line 1760  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct host_cmd_tlv_rts_threshold {
   struct mwifiex_ie_types_header header ;
   __le16 rts_thr ;
};

#line 1765  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct host_cmd_tlv_retry_limit {
   struct mwifiex_ie_types_header header ;
   u8 limit ;
};

#line 1775  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct host_cmd_tlv_channel_band {
   struct mwifiex_ie_types_header header ;
   u8 band_config ;
   u8 channel ;
};

#line 1781  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct host_cmd_tlv_ageout_timer {
   struct mwifiex_ie_types_header header ;
   __le32 sta_ao_timer ;
};

#line 1786  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct host_cmd_tlv_power_constraint {
   struct mwifiex_ie_types_header header ;
   u8 constraint ;
};

#line 1807  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct host_cmd_ds_version_ext {
   u8 version_str_sel ;
   char version_str[128U] ;
};

#line 1812  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct host_cmd_ds_mgmt_frame_reg {
   __le16 action ;
   __le32 mask ;
};

#line 1817  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct host_cmd_ds_p2p_mode_cfg {
   __le16 action ;
   __le16 mode ;
};

#line 1822  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct host_cmd_ds_remain_on_chan {
   __le16 action ;
   u8 status ;
   u8 reserved ;
   u8 band_cfg ;
   u8 channel ;
   __le32 duration ;
};

#line 1831  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct host_cmd_ds_802_11_ibss_status {
   __le16 action ;
   __le16 enable ;
   u8 bssid[6U] ;
   __le16 beacon_interval ;
   __le16 atim_window ;
   __le16 use_g_rate_protect ;
};

#line 1840  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct mwifiex_fw_mef_entry {
   u8 mode ;
   u8 action ;
   __le16 exprsize ;
   u8 expr[0U] ;
};

#line 1847  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct host_cmd_ds_mef_cfg {
   __le32 criteria ;
   __le16 num_entries ;
   struct mwifiex_fw_mef_entry mef_entry[0U] ;
};

#line 1853  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct host_cmd_ds_set_bss_mode {
   u8 con_type ;
};

#line 1861  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct host_cmd_ds_pcie_details {
   u32 txbd_addr_lo ;
   u32 txbd_addr_hi ;
   u32 txbd_count ;
   u32 rxbd_addr_lo ;
   u32 rxbd_addr_hi ;
   u32 rxbd_count ;
   u32 evtbd_addr_lo ;
   u32 evtbd_addr_hi ;
   u32 evtbd_count ;
   u32 sleep_cookie_addr_lo ;
   u32 sleep_cookie_addr_hi ;
};

#line 1924  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct host_cmd_ds_802_11_subsc_evt {
   __le16 action ;
   __le16 events ;
};

#line 1938  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct mwifiex_ie {
   __le16 ie_index ;
   __le16 mgmt_subtype_mask ;
   __le16 ie_length ;
   u8 ie_buffer[256U] ;
};

#line 1945  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct mwifiex_ie_list {
   __le16 type ;
   __le16 len ;
   struct mwifiex_ie ie_list[16U] ;
};

#line 1952  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct coalesce_filt_field_param {
   u8 operation ;
   u8 operand_len ;
   __le16 offset ;
   u8 operand_byte_stream[4U] ;
};

#line 1959  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct coalesce_receive_filt_rule {
   struct mwifiex_ie_types_header header ;
   u8 num_of_fields ;
   u8 pkt_type ;
   __le16 max_coalescing_delay ;
   struct coalesce_filt_field_param params[0U] ;
};

#line 1967  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct host_cmd_ds_coalesce_cfg {
   __le16 action ;
   __le16 num_of_rules ;
   struct coalesce_receive_filt_rule rule[0U] ;
};

#line 1973  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
union __anonunion_params_432 {
   struct host_cmd_ds_get_hw_spec hw_spec ;
   struct host_cmd_ds_mac_control mac_ctrl ;
   struct host_cmd_ds_802_11_mac_address mac_addr ;
   struct host_cmd_ds_mac_multicast_adr mc_addr ;
   struct host_cmd_ds_802_11_get_log get_log ;
   struct host_cmd_ds_802_11_rssi_info rssi_info ;
   struct host_cmd_ds_802_11_rssi_info_rsp rssi_info_rsp ;
   struct host_cmd_ds_802_11_snmp_mib smib ;
   struct host_cmd_ds_tx_rate_query tx_rate ;
   struct host_cmd_ds_tx_rate_cfg tx_rate_cfg ;
   struct host_cmd_ds_txpwr_cfg txp_cfg ;
   struct host_cmd_ds_rf_tx_pwr txp ;
   struct host_cmd_ds_rf_ant_mimo ant_mimo ;
   struct host_cmd_ds_rf_ant_siso ant_siso ;
   struct host_cmd_ds_802_11_ps_mode_enh psmode_enh ;
   struct host_cmd_ds_802_11_hs_cfg_enh opt_hs_cfg ;
   struct host_cmd_ds_802_11_scan scan ;
   struct host_cmd_ds_802_11_scan_ext ext_scan ;
   struct host_cmd_ds_802_11_scan_rsp scan_resp ;
   struct host_cmd_ds_802_11_bg_scan_query bg_scan_query ;
   struct host_cmd_ds_802_11_bg_scan_query_rsp bg_scan_query_resp ;
   struct host_cmd_ds_802_11_associate associate ;
   struct host_cmd_ds_802_11_associate_rsp associate_rsp ;
   struct host_cmd_ds_802_11_deauthenticate deauth ;
   struct host_cmd_ds_802_11_ad_hoc_start adhoc_start ;
   struct host_cmd_ds_802_11_ad_hoc_result adhoc_result ;
   struct host_cmd_ds_802_11_ad_hoc_join adhoc_join ;
   struct host_cmd_ds_802_11d_domain_info domain_info ;
   struct host_cmd_ds_802_11d_domain_info_rsp domain_info_resp ;
   struct host_cmd_ds_11n_addba_req add_ba_req ;
   struct host_cmd_ds_11n_addba_rsp add_ba_rsp ;
   struct host_cmd_ds_11n_delba del_ba ;
   struct host_cmd_ds_txbuf_cfg tx_buf ;
   struct host_cmd_ds_amsdu_aggr_ctrl amsdu_aggr_ctrl ;
   struct host_cmd_ds_11n_cfg htcfg ;
   struct host_cmd_ds_wmm_get_status get_wmm_status ;
   struct host_cmd_ds_802_11_key_material key_material ;
   struct host_cmd_ds_802_11_key_material_v2 key_material_v2 ;
   struct host_cmd_ds_version_ext verext ;
   struct host_cmd_ds_mgmt_frame_reg reg_mask ;
   struct host_cmd_ds_remain_on_chan roc_cfg ;
   struct host_cmd_ds_p2p_mode_cfg mode_cfg ;
   struct host_cmd_ds_802_11_ibss_status ibss_coalescing ;
   struct host_cmd_ds_mef_cfg mef_cfg ;
   struct host_cmd_ds_mem_access mem ;
   struct host_cmd_ds_mac_reg_access mac_reg ;
   struct host_cmd_ds_bbp_reg_access bbp_reg ;
   struct host_cmd_ds_rf_reg_access rf_reg ;
   struct host_cmd_ds_pmic_reg_access pmic_reg ;
   struct host_cmd_ds_set_bss_mode bss_mode ;
   struct host_cmd_ds_pcie_details pcie_host_spec ;
   struct host_cmd_ds_802_11_eeprom_access eeprom ;
   struct host_cmd_ds_802_11_subsc_evt subsc_evt ;
   struct host_cmd_ds_sys_config uap_sys_config ;
   struct host_cmd_ds_sta_deauth sta_deauth ;
   struct host_cmd_ds_sta_list sta_list ;
   struct host_cmd_11ac_vht_cfg vht_cfg ;
   struct host_cmd_ds_coalesce_cfg coalesce_cfg ;
   struct host_cmd_ds_tdls_oper tdls_oper ;
   struct host_cmd_ds_chan_rpt_req chan_rpt_req ;
   struct host_cmd_sdio_sp_rx_aggr_cfg sdio_rx_aggr_cfg ;
};

#line 1973  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct host_cmd_ds_command {
   __le16 command ;
   __le16 size ;
   __le16 seq_num ;
   __le16 result ;
   union __anonunion_params_432 params ;
};

#line 250  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/pcie.h"
struct mwifiex_adapter;

#line 77  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.h"
struct mwifiex_dbg {
   u32 num_cmd_host_to_card_failure ;
   u32 num_cmd_sleep_cfm_host_to_card_failure ;
   u32 num_tx_host_to_card_failure ;
   u32 num_event_deauth ;
   u32 num_event_disassoc ;
   u32 num_event_link_lost ;
   u32 num_cmd_deauth ;
   u32 num_cmd_assoc_success ;
   u32 num_cmd_assoc_failure ;
   u32 num_tx_timeout ;
   u16 timeout_cmd_id ;
   u16 timeout_cmd_act ;
   u16 last_cmd_id[5U] ;
   u16 last_cmd_act[5U] ;
   u16 last_cmd_index ;
   u16 last_cmd_resp_id[5U] ;
   u16 last_cmd_resp_index ;
   u16 last_event[5U] ;
   u16 last_event_index ;
};

#line 220 
enum MWIFIEX_HARDWARE_STATUS {
    MWIFIEX_HW_STATUS_READY = 0,
    MWIFIEX_HW_STATUS_INITIALIZING = 1,
    MWIFIEX_HW_STATUS_INIT_DONE = 2,
    MWIFIEX_HW_STATUS_RESET = 3,
    MWIFIEX_HW_STATUS_CLOSING = 4,
    MWIFIEX_HW_STATUS_NOT_READY = 5
};

#line 234  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.h"
struct mwifiex_tx_param {
   u32 next_pkt_len ;
};

#line 251  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.h"
struct mwifiex_add_ba_param {
   u32 tx_win_size ;
   u32 rx_win_size ;
   u32 timeout ;
   u8 tx_amsdu ;
   u8 rx_amsdu ;
};

#line 259  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.h"
struct mwifiex_tx_aggr {
   u8 ampdu_user ;
   u8 ampdu_ap ;
   u8 amsdu ;
};

#line 285  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.h"
struct mwifiex_tid_tbl {
   struct list_head ra_list ;
};

#line 289  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.h"
struct mwifiex_wmm_desc {
   struct mwifiex_tid_tbl tid_tbl_ptr[8U] ;
   u32 packets_out[8U] ;
   spinlock_t ra_list_spinlock ;
   struct mwifiex_wmm_ac_status ac_status[4U] ;
   enum mwifiex_wmm_ac_e ac_down_graded_vals[4U] ;
   u32 drv_pkt_delay_max ;
   u8 queue_priority[4U] ;
   u32 user_pri_pkt_tx_ctrl[8U] ;
   atomic_t tx_pkts_queued ;
   atomic_t highest_queued_prio ;
};

#line 309  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.h"
struct mwifiex_802_11_security {
   u8 wpa_enabled ;
   u8 wpa2_enabled ;
   u8 wapi_enabled ;
   u8 wapi_key_on ;
   u8 wep_enabled ;
   u32 authentication_mode ;
   u8 is_authtype_auto ;
   u32 encryption_mode ;
};

#line 320  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.h"
struct ieee_types_header {
   u8 element_id ;
   u8 len ;
};

#line 325  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.h"
struct ieee_types_vendor_specific {
   struct ieee_types_vendor_header vend_hdr ;
   u8 data[248U] ;
};

#line 330  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.h"
struct ieee_types_generic {
   struct ieee_types_header ieee_hdr ;
   u8 data[254U] ;
};

#line 360  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.h"
struct mwifiex_bssdescriptor {
   u8 mac_address[6U] ;
   struct cfg80211_ssid ssid ;
   u32 privacy ;
   s32 rssi ;
   u32 channel ;
   u32 freq ;
   u16 beacon_period ;
   u8 erp_flags ;
   u32 bss_mode ;
   u8 supported_rates[14U] ;
   u8 data_rates[14U] ;
   u16 bss_band ;
   u64 fw_tsf ;
   u64 timestamp ;
   union ieee_types_phy_param_set phy_param_set ;
   union ieee_types_ss_param_set ss_param_set ;
   u16 cap_info_bitmap ;
   struct ieee_types_wmm_parameter wmm_ie ;
   u8 disable_11n ;
   struct ieee80211_ht_cap *bcn_ht_cap ;
   u16 ht_cap_offset ;
   struct ieee80211_ht_operation *bcn_ht_oper ;
   u16 ht_info_offset ;
   u8 *bcn_bss_co_2040 ;
   u16 bss_co_2040_offset ;
   u8 *bcn_ext_cap ;
   u16 ext_cap_offset ;
   struct ieee80211_vht_cap *bcn_vht_cap ;
   u16 vht_cap_offset ;
   struct ieee80211_vht_operation *bcn_vht_oper ;
   u16 vht_info_offset ;
   struct ieee_types_oper_mode_ntf *oper_mode ;
   u16 oper_mode_offset ;
   u8 disable_11ac ;
   struct ieee_types_vendor_specific *bcn_wpa_ie ;
   u16 wpa_offset ;
   struct ieee_types_generic *bcn_rsn_ie ;
   u16 rsn_offset ;
   struct ieee_types_generic *bcn_wapi_ie ;
   u16 wapi_offset ;
   u8 *beacon_buf ;
   u32 beacon_buf_size ;
   u8 sensed_11h ;
   u8 local_constraint ;
   u8 chan_sw_ie_present ;
};

#line 413  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.h"
struct mwifiex_current_bss_params {
   struct mwifiex_bssdescriptor bss_descriptor ;
   u8 wmm_enabled ;
   u8 wmm_uapsd_enabled ;
   u8 band ;
   u32 num_of_rates ;
   u8 data_rates[14U] ;
};

#line 422  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.h"
struct mwifiex_sleep_params {
   u16 sp_error ;
   u16 sp_offset ;
   u16 sp_stable_time ;
   u8 sp_cal_control ;
   u8 sp_ext_sleep_clk ;
   u16 sp_reserved ;
};

#line 431  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.h"
struct mwifiex_sleep_period {
   u16 period ;
   u16 reserved ;
};

#line 436  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.h"
struct mwifiex_wep_key {
   u32 length ;
   u32 key_index ;
   u32 key_length ;
   u8 key_material[16U] ;
};

#line 443  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.h"
struct mwifiex_chan_freq_power {
   u16 channel ;
   u32 freq ;
   u16 max_tx_power ;
   u8 unsupported ;
};

#line 452 
enum state_11d_t {
    DISABLE_11D = 0,
    ENABLE_11D = 1
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.h"
struct mwifiex_802_11d_domain_reg {
   u8 country_code[3U] ;
   u8 no_of_triplet ;
   struct ieee80211_country_ie_triplet triplet[83U] ;
};

#line 466  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.h"
struct mwifiex_vendor_spec_cfg_ie {
   u16 mask ;
   u16 flag ;
   u8 ie[256U] ;
};

#line 472  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.h"
struct wps {
   u8 session_enable ;
};

#line 476  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.h"
struct mwifiex_roc_cfg {
   u64 cookie ;
   struct ieee80211_channel chan ;
};

#line 481  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.h"
struct memory_type_mapping {
   u8 mem_name[8U] ;
   u8 *mem_ptr ;
   u32 mem_size ;
   u8 done_flag ;
};

#line 506  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.h"
struct mwifiex_private {
   struct mwifiex_adapter *adapter ;
   u8 bss_type ;
   u8 bss_role ;
   u8 bss_priority ;
   u8 bss_num ;
   u8 bss_started ;
   u8 frame_type ;
   u8 curr_addr[6U] ;
   u8 media_connected ;
   u32 num_tx_timeout ;
   u8 tx_timeout_cnt ;
   struct net_device *netdev ;
   struct net_device_stats stats ;
   u16 curr_pkt_filter ;
   u32 bss_mode ;
   u32 pkt_tx_ctrl ;
   u16 tx_power_level ;
   u8 max_tx_power_level ;
   u8 min_tx_power_level ;
   u8 tx_rate ;
   u8 tx_htinfo ;
   u8 rxpd_htinfo ;
   u8 rxpd_rate ;
   u16 rate_bitmap ;
   u16 bitmap_rates[18U] ;
   u32 data_rate ;
   u8 is_data_rate_auto ;
   u16 bcn_avg_factor ;
   u16 data_avg_factor ;
   s16 data_rssi_last ;
   s16 data_nf_last ;
   s16 data_rssi_avg ;
   s16 data_nf_avg ;
   s16 bcn_rssi_last ;
   s16 bcn_nf_last ;
   s16 bcn_rssi_avg ;
   s16 bcn_nf_avg ;
   struct mwifiex_bssdescriptor *attempted_bss_desc ;
   struct cfg80211_ssid prev_ssid ;
   u8 prev_bssid[6U] ;
   struct mwifiex_current_bss_params curr_bss_params ;
   u16 beacon_period ;
   u8 dtim_period ;
   u16 listen_interval ;
   u16 atim_window ;
   u8 adhoc_channel ;
   u8 adhoc_is_link_sensed ;
   u8 adhoc_state ;
   struct mwifiex_802_11_security sec_info ;
   struct mwifiex_wep_key wep_key[4U] ;
   u16 wep_key_curr_index ;
   u8 wpa_ie[256U] ;
   u8 wpa_ie_len ;
   u8 wpa_is_gtk_set ;
   struct host_cmd_ds_802_11_key_material aes_key ;
   struct host_cmd_ds_802_11_key_material_v2 aes_key_v2 ;
   u8 wapi_ie[256U] ;
   u8 wapi_ie_len ;
   u8 *wps_ie ;
   u8 wps_ie_len ;
   u8 wmm_required ;
   u8 wmm_enabled ;
   u8 wmm_qosinfo ;
   struct mwifiex_wmm_desc wmm ;
   atomic_t wmm_tx_pending[4U] ;
   struct list_head sta_list ;
   spinlock_t sta_list_spinlock ;
   struct list_head auto_tdls_list ;
   spinlock_t auto_tdls_lock ;
   struct list_head tx_ba_stream_tbl_ptr ;
   spinlock_t tx_ba_stream_tbl_lock ;
   struct mwifiex_tx_aggr aggr_prio_tbl[8U] ;
   struct mwifiex_add_ba_param add_ba_param ;
   u16 rx_seq[8U] ;
   u8 tos_to_tid_inv[8U] ;
   struct list_head rx_reorder_tbl_ptr ;
   spinlock_t rx_reorder_tbl_lock ;
   spinlock_t rx_pkt_lock ;
   u8 assoc_rsp_buf[500U] ;
   u32 assoc_rsp_size ;
   u8 gen_ie_buf[256U] ;
   u8 gen_ie_buf_len ;
   struct mwifiex_vendor_spec_cfg_ie vs_ie[8U] ;
   u8 assoc_tlv_buf[256U] ;
   u8 assoc_tlv_buf_len ;
   u8 *curr_bcn_buf ;
   u32 curr_bcn_size ;
   spinlock_t curr_bcn_buf_lock ;
   struct wireless_dev wdev ;
   struct mwifiex_chan_freq_power cfp ;
   char version_str[128U] ;
   struct dentry *dfs_dev_dir ;
   u16 current_key_index ;
   struct semaphore async_sem ;
   struct cfg80211_scan_request *scan_request ;
   u8 cfg_bssid[6U] ;
   struct wps wps ;
   u8 scan_block ;
   s32 cqm_rssi_thold ;
   u32 cqm_rssi_hyst ;
   u8 subsc_evt_rssi_state ;
   struct mwifiex_ds_misc_subsc_evt async_subsc_evt_storage ;
   struct mwifiex_ie mgmt_ie[16U] ;
   u16 beacon_idx ;
   u16 proberesp_idx ;
   u16 assocresp_idx ;
   u16 gen_idx ;
   u8 ap_11n_enabled ;
   u8 ap_11ac_enabled ;
   u32 mgmt_frame_mask ;
   struct mwifiex_roc_cfg roc_cfg ;
   bool scan_aborting ;
   u8 csa_chan ;
   unsigned long csa_expire_time ;
   u8 del_list_idx ;
   bool hs2_enabled ;
   struct mwifiex_uap_bss_param bss_cfg ;
   struct cfg80211_chan_def bss_chandef ;
   struct station_parameters *sta_params ;
   struct sk_buff_head tdls_txq ;
   u8 check_tdls_tx ;
   struct timer_list auto_tdls_timer ;
   bool auto_tdls_timer_active ;
   struct idr ack_status_frames ;
   spinlock_t ack_status_lock ;
   struct mwifiex_histogram_data *hist_data ;
   struct cfg80211_chan_def dfs_chandef ;
   struct workqueue_struct *dfs_cac_workqueue ;
   struct delayed_work dfs_cac_work ;
   struct timer_list dfs_chan_switch_timer ;
   struct workqueue_struct *dfs_chan_sw_workqueue ;
   struct delayed_work dfs_chan_sw_work ;
   struct cfg80211_beacon_data beacon_after ;
   struct mwifiex_11h_intf_state state_11h ;
   struct mwifiex_ds_mem_rw mem_rw ;
};

#line 697  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.h"
struct mwifiex_bss_prio_node {
   struct list_head list ;
   struct mwifiex_private *priv ;
};

#line 702  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.h"
struct mwifiex_bss_prio_tbl {
   struct list_head bss_prio_head ;
   spinlock_t bss_prio_lock ;
   struct mwifiex_bss_prio_node *bss_prio_cur ;
};

#line 709  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.h"
struct cmd_ctrl_node {
   struct list_head list ;
   struct mwifiex_private *priv ;
   u32 cmd_oid ;
   u32 cmd_flag ;
   struct sk_buff *cmd_skb ;
   struct sk_buff *resp_skb ;
   void *data_buf ;
   u32 wait_q_enabled ;
   struct sk_buff *skb ;
   u8 *condition ;
   u8 cmd_wait_q_woken ;
};

#line 783  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.h"
struct mwifiex_if_ops {
   int (*init_if)(struct mwifiex_adapter *) ;
   void (*cleanup_if)(struct mwifiex_adapter *) ;
   int (*check_fw_status)(struct mwifiex_adapter *, u32 ) ;
   int (*prog_fw)(struct mwifiex_adapter *, struct mwifiex_fw_image *) ;
   int (*register_dev)(struct mwifiex_adapter *) ;
   void (*unregister_dev)(struct mwifiex_adapter *) ;
   int (*enable_int)(struct mwifiex_adapter *) ;
   void (*disable_int)(struct mwifiex_adapter *) ;
   int (*process_int_status)(struct mwifiex_adapter *) ;
   int (*host_to_card)(struct mwifiex_adapter *, u8 , struct sk_buff *, struct mwifiex_tx_param *) ;
   int (*wakeup)(struct mwifiex_adapter *) ;
   int (*wakeup_complete)(struct mwifiex_adapter *) ;
   void (*update_mp_end_port)(struct mwifiex_adapter *, u16 ) ;
   void (*cleanup_mpa_buf)(struct mwifiex_adapter *) ;
   int (*cmdrsp_complete)(struct mwifiex_adapter *, struct sk_buff *) ;
   int (*event_complete)(struct mwifiex_adapter *, struct sk_buff *) ;
   int (*init_fw_port)(struct mwifiex_adapter *) ;
   int (*dnld_fw)(struct mwifiex_adapter *, struct mwifiex_fw_image *) ;
   void (*card_reset)(struct mwifiex_adapter *) ;
   int (*reg_dump)(struct mwifiex_adapter *, char *) ;
   void (*device_dump)(struct mwifiex_adapter *) ;
   int (*clean_pcie_ring)(struct mwifiex_adapter *) ;
   void (*iface_work)(struct work_struct *) ;
   void (*submit_rem_rx_urbs)(struct mwifiex_adapter *) ;
   void (*deaggr_pkt)(struct mwifiex_adapter *, struct sk_buff *) ;
};

#line 814  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.h"
struct mwifiex_adapter {
   u8 iface_type ;
   unsigned int debug_mask ;
   struct mwifiex_iface_comb iface_limit ;
   struct mwifiex_iface_comb curr_iface_comb ;
   struct mwifiex_private *priv[3U] ;
   u8 priv_num ;
   struct firmware const *firmware ;
   char fw_name[32U] ;
   int winner ;
   struct device *dev ;
   struct wiphy *wiphy ;
   u8 perm_addr[6U] ;
   bool surprise_removed ;
   u32 fw_release_number ;
   u16 init_wait_q_woken ;
   wait_queue_head_t init_wait_q ;
   void *card ;
   struct mwifiex_if_ops if_ops ;
   atomic_t rx_pending ;
   atomic_t tx_pending ;
   atomic_t cmd_pending ;
   struct workqueue_struct *workqueue ;
   struct work_struct main_work ;
   struct workqueue_struct *rx_workqueue ;
   struct work_struct rx_work ;
   struct workqueue_struct *dfs_workqueue ;
   struct work_struct dfs_work ;
   bool rx_work_enabled ;
   bool rx_processing ;
   bool delay_main_work ;
   bool rx_locked ;
   bool main_locked ;
   struct mwifiex_bss_prio_tbl bss_prio_tbl[3U] ;
   spinlock_t mwifiex_lock ;
   spinlock_t main_proc_lock ;
   u32 mwifiex_processing ;
   u8 more_task_flag ;
   u16 tx_buf_size ;
   u16 curr_tx_buf_size ;
   bool sdio_rx_aggr_enable ;
   u16 sdio_rx_block_size ;
   u32 ioport ;
   enum MWIFIEX_HARDWARE_STATUS hw_status ;
   u16 number_of_antenna ;
   u32 fw_cap_info ;
   spinlock_t int_lock ;
   u8 int_status ;
   u32 event_cause ;
   struct sk_buff *event_skb ;
   u8 upld_buf[2312U] ;
   u8 data_sent ;
   u8 cmd_sent ;
   u8 cmd_resp_received ;
   u8 event_received ;
   u8 data_received ;
   u16 seq_num ;
   struct cmd_ctrl_node *cmd_pool ;
   struct cmd_ctrl_node *curr_cmd ;
   spinlock_t mwifiex_cmd_lock ;
   u8 is_cmd_timedout ;
   u16 last_init_cmd ;
   struct timer_list cmd_timer ;
   struct list_head cmd_free_q ;
   spinlock_t cmd_free_q_lock ;
   struct list_head cmd_pending_q ;
   spinlock_t cmd_pending_q_lock ;
   struct list_head scan_pending_q ;
   spinlock_t scan_pending_q_lock ;
   spinlock_t rx_proc_lock ;
   struct sk_buff_head tx_data_q ;
   atomic_t tx_queued ;
   u32 scan_processing ;
   u16 region_code ;
   struct mwifiex_802_11d_domain_reg domain_reg ;
   u16 scan_probes ;
   u32 scan_mode ;
   u16 specific_scan_time ;
   u16 active_scan_time ;
   u16 passive_scan_time ;
   u16 scan_chan_gap_time ;
   u8 fw_bands ;
   u8 adhoc_start_band ;
   u8 config_bands ;
   struct mwifiex_chan_scan_param_set *scan_channels ;
   u8 tx_lock_flag ;
   struct mwifiex_sleep_params sleep_params ;
   struct mwifiex_sleep_period sleep_period ;
   u16 ps_mode ;
   u32 ps_state ;
   u8 need_to_wakeup ;
   u16 multiple_dtim ;
   u16 local_listen_interval ;
   u16 null_pkt_interval ;
   struct sk_buff *sleep_cfm ;
   u16 bcn_miss_time_out ;
   u16 adhoc_awake_period ;
   u8 is_deep_sleep ;
   u8 delay_null_pkt ;
   u16 delay_to_ps ;
   u16 enhanced_ps_mode ;
   u8 pm_wakeup_card_req ;
   u16 gen_null_pkt ;
   u16 pps_uapsd_mode ;
   u32 pm_wakeup_fw_try ;
   struct timer_list wakeup_timer ;
   u8 is_hs_configured ;
   struct mwifiex_hs_config_param hs_cfg ;
   u8 hs_activated ;
   u16 hs_activate_wait_q_woken ;
   wait_queue_head_t hs_activate_wait_q ;
   bool is_suspended ;
   bool hs_enabling ;
   u8 event_body[2048U] ;
   u32 hw_dot_11n_dev_cap ;
   u8 hw_dev_mcs_support ;
   u8 user_dev_mcs_support ;
   u8 adhoc_11n_enabled ;
   u8 sec_chan_offset ;
   struct mwifiex_dbg dbg ;
   u8 arp_filter[68U] ;
   u32 arp_filter_size ;
   struct mwifiex_wait_queue cmd_wait_q ;
   u8 scan_wait_q_woken ;
   spinlock_t queue_lock ;
   u8 country_code[3U] ;
   u16 max_mgmt_ie_index ;
   struct firmware const *cal_data ;
   struct device_node *dt_node ;
   u32 is_hw_11ac_capable ;
   u32 hw_dot_11ac_dev_cap ;
   u32 hw_dot_11ac_mcs_support ;
   u32 usr_dot_11ac_dev_cap_bg ;
   u32 usr_dot_11ac_dev_cap_a ;
   u32 usr_dot_11ac_mcs_support ;
   atomic_t pending_bridged_pkts ;
   struct semaphore *card_sem ;
   bool ext_scan ;
   u8 fw_api_ver ;
   u8 key_api_major_ver ;
   u8 key_api_minor_ver ;
   struct memory_type_mapping *mem_type_mapping_tbl ;
   u8 num_mem_types ;
   void *drv_info_dump ;
   u32 drv_info_size ;
   bool scan_chan_gap_enabled ;
   struct sk_buff_head rx_data_q ;
   struct mwifiex_chan_stats *chan_stats ;
   u32 num_in_chan_stats ;
   int survey_idx ;
   bool auto_tdls ;
   u8 coex_scan ;
   u8 coex_min_scan_time ;
   u8 coex_max_scan_time ;
   u8 coex_win_size ;
   u8 coex_tx_win_size ;
   u8 coex_rx_win_size ;
};

#line 107  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __u16 uint16_t;

#line 2893  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
enum skb_free_reason {
    SKB_REASON_CONSUMED = 0,
    SKB_REASON_DROPPED = 1
};

#line 5440  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/mac80211.h"
enum mwifiex_bss_role {
    MWIFIEX_BSS_ROLE_STA = 0,
    MWIFIEX_BSS_ROLE_UAP = 1,
    MWIFIEX_BSS_ROLE_ANY = 255
};

#line 180  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/decl.h"
struct mwifiex_rxinfo {
   struct sk_buff *parent ;
   u8 bss_num ;
   u8 bss_type ;
   u8 use_count ;
   u8 buf_type ;
};

#line 188  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/decl.h"
struct mwifiex_txinfo {
   u32 status_code ;
   u8 flags ;
   u8 bss_num ;
   u8 bss_type ;
   u8 aggr_num ;
   u32 pkt_len ;
   u8 ack_frame_id ;
   u64 cookie ;
};

#line 261  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/ioctl.h"
struct mwifiex_ds_hs_cfg {
   u32 is_invoke_hostcmd ;
   u32 conditions ;
   u32 gpio ;
   u32 gap ;
};

#line 273  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/ioctl.h"
struct mwifiex_ds_auto_ds {
   u16 auto_ds ;
   u16 idle_time ;
};

#line 283  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/ioctl.h"
union __anonunion_param_802 {
   u32 ps_mode ;
   struct mwifiex_ds_hs_cfg hs_cfg ;
   struct mwifiex_ds_auto_ds auto_deep_sleep ;
   u32 sleep_period ;
};

#line 283  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/ioctl.h"
struct mwifiex_ds_pm_cfg {
   union __anonunion_param_802 param ;
};

#line 361  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/ioctl.h"
struct mwifiex_ds_misc_cmd {
   u32 len ;
   u8 cmd[2048U] ;
};

#line 470  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/ioctl.h"
struct mwifiex_dma_mapping {
   dma_addr_t addr ;
   size_t len ;
};

#line 29  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/util.h"
union __anonunion_803 {
   struct mwifiex_rxinfo rx_info ;
   struct mwifiex_txinfo tx_info ;
};

#line 29  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/util.h"
struct mwifiex_cb {
   struct mwifiex_dma_mapping dma_mapping ;
   union __anonunion_803 __anonCompField_mwifiex_cb_100 ;
};

#line 880  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct mwifiex_ie_types_auto_ds_param {
   struct mwifiex_ie_types_header header ;
   __le16 deep_sleep_timeout ;
};

#line 888  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct mwifiex_ie_types_ps_param {
   struct mwifiex_ie_types_header header ;
   struct mwifiex_ps_param param ;
};

#line 907  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct hw_spec_api_rev {
   struct mwifiex_ie_types_header header ;
   __le16 api_id ;
   u8 major_ver ;
   u8 minor_ver ;
};

#line 2043  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct mwifiex_opt_sleep_confirm {
   __le16 command ;
   __le16 size ;
   __le16 seq_num ;
   __le16 result ;
   __le16 action ;
   __le16 resp_ctrl ;
};

#line 234  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/printk.h"
struct _ddebug {
   char const *modname ;
   char const *function ;
   char const *filename ;
   char const *format ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))) lineno : 18 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))) flags : 8 ;
};

#line 12  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/wait.h"
struct __wait_queue;

#line 12  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/wait.h"
typedef struct __wait_queue wait_queue_t;

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/wait.h"
struct __wait_queue {
   unsigned int flags ;
   void *private ;
   int (*func)(wait_queue_t *, unsigned int , int , void *) ;
   struct list_head task_list ;
};

#line 81  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timekeeping.h"
enum tk_offsets {
    TK_OFFS_REAL = 0,
    TK_OFFS_BOOT = 1,
    TK_OFFS_TAI = 2,
    TK_OFFS_MAX = 3
};

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/workqueue.h"
enum ldv_11816 {
    WORK_STRUCT_PENDING_BIT = 0,
    WORK_STRUCT_DELAYED_BIT = 1,
    WORK_STRUCT_PWQ_BIT = 2,
    WORK_STRUCT_LINKED_BIT = 3,
    WORK_STRUCT_STATIC_BIT = 4,
    WORK_STRUCT_COLOR_SHIFT = 5,
    WORK_STRUCT_COLOR_BITS = 4,
    WORK_STRUCT_PENDING = 1,
    WORK_STRUCT_DELAYED = 2,
    WORK_STRUCT_PWQ = 4,
    WORK_STRUCT_LINKED = 8,
    WORK_STRUCT_STATIC = 16,
    WORK_NR_COLORS = 15,
    WORK_NO_COLOR = 15,
    WORK_CPU_UNBOUND = 8192,
    WORK_STRUCT_FLAG_BITS = 9,
    WORK_OFFQ_FLAG_BASE = 5,
    __WORK_OFFQ_CANCELING = 5,
    WORK_OFFQ_CANCELING = 32,
    WORK_OFFQ_FLAG_BITS = 1,
    WORK_OFFQ_POOL_SHIFT = 6,
    WORK_OFFQ_LEFT = 58,
    WORK_OFFQ_POOL_BITS = 31,
    WORK_OFFQ_POOL_NONE = 2147483647,
    WORK_STRUCT_FLAG_MASK = 511,
    WORK_STRUCT_WQ_DATA_MASK = -512,
    WORK_STRUCT_NO_POOL = 137438953408,
    WORK_BUSY_PENDING = 1,
    WORK_BUSY_RUNNING = 2,
    WORKER_DESC_LEN = 24
};

#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pinctrl/devinfo.h"
struct ratelimit_state {
   raw_spinlock_t lock ;
   int interval ;
   int burst ;
   int printed ;
   int missed ;
   unsigned long begin ;
};

#line 215  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct skb_frag_struct;

#line 215  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
typedef struct skb_frag_struct skb_frag_t;

#line 216  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct __anonstruct_page_1091 {
   struct page *p ;
};

#line 216  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct skb_frag_struct {
   struct __anonstruct_page_1091 page ;
   __u32 page_offset ;
   __u32 size ;
};

#line 249  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct skb_shared_hwtstamps {
   ktime_t hwtstamp ;
};

#line 319  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct skb_shared_info {
   unsigned char nr_frags ;
   __u8 tx_flags ;
   unsigned short gso_size ;
   unsigned short gso_segs ;
   unsigned short gso_type ;
   struct sk_buff *frag_list ;
   struct skb_shared_hwtstamps hwtstamps ;
   u32 tskey ;
   __be32 ip6_frag_id ;
   atomic_t dataref ;
   void *destructor_arg ;
   skb_frag_t frags[17U] ;
};

#line 332  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/cfg80211.h"
struct vif_params {
   int use_4addr ;
   u8 macaddr[6U] ;
};

#line 2138  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/cfg80211.h"
struct cfg80211_dscp_exception {
   u8 dscp ;
   u8 up ;
};

#line 2149  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/cfg80211.h"
struct cfg80211_dscp_range {
   u8 low ;
   u8 high ;
};

#line 2160  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/cfg80211.h"
struct cfg80211_qos_map {
   u8 num_des ;
   struct cfg80211_dscp_exception dscp_exception[21U] ;
   struct cfg80211_dscp_range up[8U] ;
};

#line 35  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/ioctl.h"
struct mwifiex_multicast_list {
   u32 mode ;
   u32 num_multicast_addr ;
   u8 mac_list[32U][6U] ;
};

#line 167  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/ioctl.h"
struct mwifiex_ds_rx_reorder_tbl {
   u16 tid ;
   u8 ta[6U] ;
   u32 start_win ;
   u32 win_size ;
   u32 buffer[64U] ;
};

#line 179  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/ioctl.h"
struct mwifiex_ds_tx_ba_stream_tbl {
   u16 tid ;
   u8 ra[6U] ;
   u8 amsdu ;
};

#line 185  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/ioctl.h"
struct tdls_peer_info {
   u8 peer_addr[6U] ;
};

#line 191  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/ioctl.h"
struct mwifiex_debug_info {
   unsigned int debug_mask ;
   u32 int_counter ;
   u32 packets_out[8U] ;
   u32 tx_buf_size ;
   u32 curr_tx_buf_size ;
   u32 tx_tbl_num ;
   struct mwifiex_ds_tx_ba_stream_tbl tx_tbl[2U] ;
   u32 rx_tbl_num ;
   struct mwifiex_ds_rx_reorder_tbl rx_tbl[16U] ;
   u32 tdls_peer_num ;
   struct tdls_peer_info tdls_list[8U] ;
   u16 ps_mode ;
   u32 ps_state ;
   u8 is_deep_sleep ;
   u8 pm_wakeup_card_req ;
   u32 pm_wakeup_fw_try ;
   u8 is_hs_configured ;
   u8 hs_activated ;
   u32 num_cmd_host_to_card_failure ;
   u32 num_cmd_sleep_cfm_host_to_card_failure ;
   u32 num_tx_host_to_card_failure ;
   u32 num_event_deauth ;
   u32 num_event_disassoc ;
   u32 num_event_link_lost ;
   u32 num_cmd_deauth ;
   u32 num_cmd_assoc_success ;
   u32 num_cmd_assoc_failure ;
   u32 num_tx_timeout ;
   u8 is_cmd_timedout ;
   u16 timeout_cmd_id ;
   u16 timeout_cmd_act ;
   u16 last_cmd_id[5U] ;
   u16 last_cmd_act[5U] ;
   u16 last_cmd_index ;
   u16 last_cmd_resp_id[5U] ;
   u16 last_cmd_resp_index ;
   u16 last_event[5U] ;
   u16 last_event_index ;
   u8 data_sent ;
   u8 cmd_sent ;
   u8 cmd_resp_received ;
   u8 event_received ;
};

#line 253  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/usb/ch9.h"
struct usb_device_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __le16 bcdUSB ;
   __u8 bDeviceClass ;
   __u8 bDeviceSubClass ;
   __u8 bDeviceProtocol ;
   __u8 bMaxPacketSize0 ;
   __le16 idVendor ;
   __le16 idProduct ;
   __le16 bcdDevice ;
   __u8 iManufacturer ;
   __u8 iProduct ;
   __u8 iSerialNumber ;
   __u8 bNumConfigurations ;
};

#line 275  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/usb/ch9.h"
struct usb_config_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __le16 wTotalLength ;
   __u8 bNumInterfaces ;
   __u8 bConfigurationValue ;
   __u8 iConfiguration ;
   __u8 bmAttributes ;
   __u8 bMaxPower ;
};

#line 343  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/usb/ch9.h"
struct usb_interface_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bInterfaceNumber ;
   __u8 bAlternateSetting ;
   __u8 bNumEndpoints ;
   __u8 bInterfaceClass ;
   __u8 bInterfaceSubClass ;
   __u8 bInterfaceProtocol ;
   __u8 iInterface ;
};

#line 363  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/usb/ch9.h"
struct usb_endpoint_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bEndpointAddress ;
   __u8 bmAttributes ;
   __le16 wMaxPacketSize ;
   __u8 bInterval ;
   __u8 bRefresh ;
   __u8 bSynchAddress ;
};

#line 613  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/usb/ch9.h"
struct usb_ss_ep_comp_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bMaxBurst ;
   __u8 bmAttributes ;
   __le16 wBytesPerInterval ;
};

#line 692  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/usb/ch9.h"
struct usb_interface_assoc_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bFirstInterface ;
   __u8 bInterfaceCount ;
   __u8 bFunctionClass ;
   __u8 bFunctionSubClass ;
   __u8 bFunctionProtocol ;
   __u8 iFunction ;
};

#line 751  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/usb/ch9.h"
struct usb_bos_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __le16 wTotalLength ;
   __u8 bNumDeviceCaps ;
};

#line 801  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/usb/ch9.h"
struct usb_ext_cap_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bDevCapabilityType ;
   __le32 bmAttributes ;
};

#line 811  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/usb/ch9.h"
struct usb_ss_cap_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bDevCapabilityType ;
   __u8 bmAttributes ;
   __le16 wSpeedSupported ;
   __u8 bFunctionalitySupport ;
   __u8 bU1devExitLat ;
   __le16 bU2DevExitLat ;
};

#line 840  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/usb/ch9.h"
struct usb_ss_container_id_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bDevCapabilityType ;
   __u8 bReserved ;
   __u8 ContainerID[16U] ;
};

#line 905 
enum usb_device_speed {
    USB_SPEED_UNKNOWN = 0,
    USB_SPEED_LOW = 1,
    USB_SPEED_FULL = 2,
    USB_SPEED_HIGH = 3,
    USB_SPEED_WIRELESS = 4,
    USB_SPEED_SUPER = 5
};

#line 914 
enum usb_device_state {
    USB_STATE_NOTATTACHED = 0,
    USB_STATE_ATTACHED = 1,
    USB_STATE_POWERED = 2,
    USB_STATE_RECONNECTING = 3,
    USB_STATE_UNAUTHENTICATED = 4,
    USB_STATE_DEFAULT = 5,
    USB_STATE_ADDRESS = 6,
    USB_STATE_CONFIGURED = 7,
    USB_STATE_SUSPENDED = 8
};

#line 282  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm_runtime.h"
struct usb_device;

#line 284 
struct wusb_dev;

#line 285 
struct ep_device;

#line 286  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm_runtime.h"
struct usb_host_endpoint {
   struct usb_endpoint_descriptor desc ;
   struct usb_ss_ep_comp_descriptor ss_ep_comp ;
   struct list_head urb_list ;
   void *hcpriv ;
   struct ep_device *ep_dev ;
   unsigned char *extra ;
   int extralen ;
   int enabled ;
   int streams ;
};

#line 77  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/usb.h"
struct usb_host_interface {
   struct usb_interface_descriptor desc ;
   int extralen ;
   unsigned char *extra ;
   struct usb_host_endpoint *endpoint ;
   char *string ;
};

#line 92 
enum usb_interface_condition {
    USB_INTERFACE_UNBOUND = 0,
    USB_INTERFACE_BINDING = 1,
    USB_INTERFACE_BOUND = 2,
    USB_INTERFACE_UNBINDING = 3
};

#line 99  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/usb.h"
struct usb_interface {
   struct usb_host_interface *altsetting ;
   struct usb_host_interface *cur_altsetting ;
   unsigned int num_altsetting ;
   struct usb_interface_assoc_descriptor *intf_assoc ;
   int minor ;
   enum usb_interface_condition condition ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) sysfs_files_created : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ep_devs_created : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) unregistering : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) needs_remote_wakeup : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) needs_altsetting0 : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) needs_binding : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) resetting_device : 1 ;
   struct device dev ;
   struct device *usb_dev ;
   atomic_t pm_usage_cnt ;
   struct work_struct reset_ws ;
};

#line 201  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/usb.h"
struct usb_interface_cache {
   unsigned int num_altsetting ;
   struct kref ref ;
   struct usb_host_interface altsetting[0U] ;
};

#line 256  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/usb.h"
struct usb_host_config {
   struct usb_config_descriptor desc ;
   char *string ;
   struct usb_interface_assoc_descriptor *intf_assoc[16U] ;
   struct usb_interface *interface[32U] ;
   struct usb_interface_cache *intf_cache[32U] ;
   unsigned char *extra ;
   int extralen ;
};

#line 320  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/usb.h"
struct usb_host_bos {
   struct usb_bos_descriptor *desc ;
   struct usb_ext_cap_descriptor *ext_cap ;
   struct usb_ss_cap_descriptor *ss_cap ;
   struct usb_ss_container_id_descriptor *ss_id ;
};

#line 332  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/usb.h"
struct usb_devmap {
   unsigned long devicemap[2U] ;
};

#line 344 
struct mon_bus;

#line 344  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/usb.h"
struct usb_bus {
   struct device *controller ;
   int busnum ;
   char const *bus_name ;
   u8 uses_dma ;
   u8 uses_pio_for_control ;
   u8 otg_port ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_b_host : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) b_hnp_enable : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) no_stop_on_short : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) no_sg_constraint : 1 ;
   unsigned int sg_tablesize ;
   int devnum_next ;
   struct usb_devmap devmap ;
   struct usb_device *root_hub ;
   struct usb_bus *hs_companion ;
   struct list_head bus_list ;
   struct mutex usb_address0_mutex ;
   int bandwidth_allocated ;
   int bandwidth_int_reqs ;
   int bandwidth_isoc_reqs ;
   unsigned int resuming_ports ;
   struct mon_bus *mon_bus ;
   int monitored ;
};

#line 395 
struct usb_tt;

#line 396 
enum usb_device_removable {
    USB_DEVICE_REMOVABLE_UNKNOWN = 0,
    USB_DEVICE_REMOVABLE = 1,
    USB_DEVICE_FIXED = 2
};

#line 409  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/usb.h"
struct usb2_lpm_parameters {
   unsigned int besl ;
   int timeout ;
};

#line 430  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/usb.h"
struct usb3_lpm_parameters {
   unsigned int mel ;
   unsigned int pel ;
   unsigned int sel ;
   int timeout ;
};

#line 469  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/usb.h"
struct usb_device {
   int devnum ;
   char devpath[16U] ;
   u32 route ;
   enum usb_device_state state ;
   enum usb_device_speed speed ;
   struct usb_tt *tt ;
   int ttport ;
   unsigned int toggle[2U] ;
   struct usb_device *parent ;
   struct usb_bus *bus ;
   struct usb_host_endpoint ep0 ;
   struct device dev ;
   struct usb_device_descriptor descriptor ;
   struct usb_host_bos *bos ;
   struct usb_host_config *config ;
   struct usb_host_config *actconfig ;
   struct usb_host_endpoint *ep_in[16U] ;
   struct usb_host_endpoint *ep_out[16U] ;
   char **rawdescriptors ;
   unsigned short bus_mA ;
   u8 portnum ;
   u8 level ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) can_submit : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) persist_enabled : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) have_langid : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) authorized : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) authenticated : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) wusb : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) lpm_capable : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) usb2_hw_lpm_capable : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) usb2_hw_lpm_besl_capable : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) usb2_hw_lpm_enabled : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) usb2_hw_lpm_allowed : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) usb3_lpm_enabled : 1 ;
   int string_langid ;
   char *product ;
   char *manufacturer ;
   char *serial ;
   struct list_head filelist ;
   int maxchild ;
   u32 quirks ;
   atomic_t urbnum ;
   unsigned long active_duration ;
   unsigned long connect_time ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) do_remote_wakeup : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) reset_resume : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) port_is_suspended : 1 ;
   struct wusb_dev *wusb_dev ;
   int slot_id ;
   enum usb_device_removable removable ;
   struct usb2_lpm_parameters l1_params ;
   struct usb3_lpm_parameters u1_params ;
   struct usb3_lpm_parameters u2_params ;
   unsigned int lpm_disable_count ;
};

#line 1200  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/usb.h"
struct usb_iso_packet_descriptor {
   unsigned int offset ;
   unsigned int length ;
   unsigned int actual_length ;
   int status ;
};

#line 1242 
struct urb;

#line 1243  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/usb.h"
struct usb_anchor {
   struct list_head urb_list ;
   wait_queue_head_t wait ;
   spinlock_t lock ;
   atomic_t suspend_wakeups ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) poisoned : 1 ;
};

#line 1262  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/usb.h"
struct urb {
   struct kref kref ;
   void *hcpriv ;
   atomic_t use_count ;
   atomic_t reject ;
   int unlinked ;
   struct list_head urb_list ;
   struct list_head anchor_list ;
   struct usb_anchor *anchor ;
   struct usb_device *dev ;
   struct usb_host_endpoint *ep ;
   unsigned int pipe ;
   unsigned int stream_id ;
   int status ;
   unsigned int transfer_flags ;
   void *transfer_buffer ;
   dma_addr_t transfer_dma ;
   struct scatterlist *sg ;
   int num_mapped_sgs ;
   int num_sgs ;
   u32 transfer_buffer_length ;
   u32 actual_length ;
   unsigned char *setup_packet ;
   dma_addr_t setup_dma ;
   int start_frame ;
   int number_of_packets ;
   int interval ;
   int error_count ;
   void *context ;
   void (*complete)(struct urb *) ;
   struct usb_iso_packet_descriptor iso_frame_desc[0U] ;
};

#line 1894  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/usb.h"
struct urb_context {
   struct mwifiex_adapter *adapter ;
   struct sk_buff *skb ;
   struct urb *urb ;
   u8 ep ;
};

#line 63  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/usb.h"
struct usb_card_rec {
   struct mwifiex_adapter *adapter ;
   struct usb_device *udev ;
   struct usb_interface *intf ;
   u8 rx_cmd_ep ;
   struct urb_context rx_cmd ;
   atomic_t rx_cmd_urb_pending ;
   struct urb_context rx_data_list[6U] ;
   u8 usb_boot_state ;
   u8 rx_data_ep ;
   atomic_t rx_data_urb_pending ;
   u8 tx_data_ep ;
   u8 tx_cmd_ep ;
   atomic_t tx_data_urb_pending ;
   atomic_t tx_cmd_urb_pending ;
   int bulk_out_maxpktsize ;
   struct urb_context tx_cmd ;
   int tx_data_ix ;
   struct urb_context tx_data_list[6U] ;
};

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mmc/pm.h"
typedef unsigned int mmc_pm_flag_t;

#line 26 
struct mmc_card;

#line 27 
struct sdio_func;

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mmc/sdio_func.h"
typedef void sdio_irq_handler_t(struct sdio_func *);

#line 24  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mmc/sdio_func.h"
struct sdio_func_tuple {
   struct sdio_func_tuple *next ;
   unsigned char code ;
   unsigned char size ;
   unsigned char data[0U] ;
};

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mmc/sdio_func.h"
struct sdio_func {
   struct mmc_card *card ;
   struct device dev ;
   sdio_irq_handler_t *irq_handler ;
   unsigned int num ;
   unsigned char class ;
   unsigned short vendor ;
   unsigned short device ;
   unsigned int max_blksize ;
   unsigned int cur_blksize ;
   unsigned int enable_timeout ;
   unsigned int state ;
   u8 tmpbuf[4U] ;
   unsigned int num_info ;
   char const **info ;
   struct sdio_func_tuple *tuples ;
};

#line 162 
struct mmc_data;

#line 163 
struct mmc_request;

#line 164  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mmc/sdio_func.h"
struct mmc_command {
   u32 opcode ;
   u32 arg ;
   u32 resp[4U] ;
   unsigned int flags ;
   unsigned int retries ;
   int error ;
   unsigned int busy_timeout ;
   bool sanitize_busy ;
   struct mmc_data *data ;
   struct mmc_request *mrq ;
};

#line 105  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mmc/core.h"
struct mmc_data {
   unsigned int timeout_ns ;
   unsigned int timeout_clks ;
   unsigned int blksz ;
   unsigned int blocks ;
   int error ;
   unsigned int flags ;
   unsigned int bytes_xfered ;
   struct mmc_command *stop ;
   struct mmc_request *mrq ;
   unsigned int sg_len ;
   int sg_count ;
   struct scatterlist *sg ;
   s32 host_cookie ;
};

#line 128 
struct mmc_host;

#line 129  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mmc/core.h"
struct mmc_request {
   struct mmc_command *sbc ;
   struct mmc_command *cmd ;
   struct mmc_data *data ;
   struct mmc_command *stop ;
   struct completion completion ;
   void (*done)(struct mmc_request *) ;
   struct mmc_host *host ;
};

#line 140 
struct mmc_async_req;

#line 215  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mmc/core.h"
struct mmc_cid {
   unsigned int manfid ;
   char prod_name[8U] ;
   unsigned char prv ;
   unsigned int serial ;
   unsigned short oemid ;
   unsigned short year ;
   unsigned char hwrev ;
   unsigned char fwrev ;
   unsigned char month ;
};

#line 28  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mmc/card.h"
struct mmc_csd {
   unsigned char structure ;
   unsigned char mmca_vsn ;
   unsigned short cmdclass ;
   unsigned short tacc_clks ;
   unsigned int tacc_ns ;
   unsigned int c_size ;
   unsigned int r2w_factor ;
   unsigned int max_dtr ;
   unsigned int erase_size ;
   unsigned int read_blkbits ;
   unsigned int write_blkbits ;
   unsigned int capacity ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) read_partial : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) read_misalign : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) write_partial : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) write_misalign : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) dsr_imp : 1 ;
};

#line 48  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mmc/card.h"
struct mmc_ext_csd {
   u8 rev ;
   u8 erase_group_def ;
   u8 sec_feature_support ;
   u8 rel_sectors ;
   u8 rel_param ;
   u8 part_config ;
   u8 cache_ctrl ;
   u8 rst_n_function ;
   u8 max_packed_writes ;
   u8 max_packed_reads ;
   u8 packed_event_en ;
   unsigned int part_time ;
   unsigned int sa_timeout ;
   unsigned int generic_cmd6_time ;
   unsigned int power_off_longtime ;
   u8 power_off_notification ;
   unsigned int hs_max_dtr ;
   unsigned int hs200_max_dtr ;
   unsigned int sectors ;
   unsigned int hc_erase_size ;
   unsigned int hc_erase_timeout ;
   unsigned int sec_trim_mult ;
   unsigned int sec_erase_mult ;
   unsigned int trim_timeout ;
   bool partition_setting_completed ;
   unsigned long long enhanced_area_offset ;
   unsigned int enhanced_area_size ;
   unsigned int cache_size ;
   bool hpi_en ;
   bool hpi ;
   unsigned int hpi_cmd ;
   bool bkops ;
   bool man_bkops_en ;
   unsigned int data_sector_size ;
   unsigned int data_tag_unit_size ;
   unsigned int boot_ro_lock ;
   bool boot_ro_lockable ;
   bool ffu_capable ;
   u8 fwrev[8U] ;
   u8 raw_exception_status ;
   u8 raw_partition_support ;
   u8 raw_rpmb_size_mult ;
   u8 raw_erased_mem_count ;
   u8 raw_ext_csd_structure ;
   u8 raw_card_type ;
   u8 raw_driver_strength ;
   u8 out_of_int_time ;
   u8 raw_pwr_cl_52_195 ;
   u8 raw_pwr_cl_26_195 ;
   u8 raw_pwr_cl_52_360 ;
   u8 raw_pwr_cl_26_360 ;
   u8 raw_s_a_timeout ;
   u8 raw_hc_erase_gap_size ;
   u8 raw_erase_timeout_mult ;
   u8 raw_hc_erase_grp_size ;
   u8 raw_sec_trim_mult ;
   u8 raw_sec_erase_mult ;
   u8 raw_sec_feature_support ;
   u8 raw_trim_mult ;
   u8 raw_pwr_cl_200_195 ;
   u8 raw_pwr_cl_200_360 ;
   u8 raw_pwr_cl_ddr_52_195 ;
   u8 raw_pwr_cl_ddr_52_360 ;
   u8 raw_pwr_cl_ddr_200_360 ;
   u8 raw_bkops_status ;
   u8 raw_sectors[4U] ;
   unsigned int feature_support ;
};

#line 124  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mmc/card.h"
struct sd_scr {
   unsigned char sda_vsn ;
   unsigned char sda_spec3 ;
   unsigned char bus_widths ;
   unsigned char cmds ;
};

#line 134  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mmc/card.h"
struct sd_ssr {
   unsigned int au ;
   unsigned int erase_timeout ;
   unsigned int erase_offset ;
};

#line 142  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mmc/card.h"
struct sd_switch_caps {
   unsigned int hs_max_dtr ;
   unsigned int uhs_max_dtr ;
   unsigned int sd3_bus_mode ;
   unsigned int sd3_drv_type ;
   unsigned int sd3_curr_limit ;
};

#line 173  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mmc/card.h"
struct sdio_cccr {
   unsigned int sdio_vsn ;
   unsigned int sd_vsn ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) multi_block : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) low_speed : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) wide_bus : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) high_power : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) high_speed : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) disable_cd : 1 ;
};

#line 194  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mmc/card.h"
struct sdio_cis {
   unsigned short vendor ;
   unsigned short device ;
   unsigned short blksize ;
   unsigned int max_dtr ;
};

#line 201 
struct mmc_ios;

#line 214  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mmc/card.h"
struct mmc_part {
   unsigned int size ;
   unsigned int part_cfg ;
   char name[20U] ;
   bool force_ro ;
   unsigned int area_type ;
};

#line 240  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mmc/card.h"
struct mmc_card {
   struct mmc_host *host ;
   struct device dev ;
   u32 ocr ;
   unsigned int rca ;
   unsigned int type ;
   unsigned int state ;
   unsigned int quirks ;
   unsigned int erase_size ;
   unsigned int erase_shift ;
   unsigned int pref_erase ;
   u8 erased_byte ;
   u32 raw_cid[4U] ;
   u32 raw_csd[4U] ;
   u32 raw_scr[2U] ;
   struct mmc_cid cid ;
   struct mmc_csd csd ;
   struct mmc_ext_csd ext_csd ;
   struct sd_scr scr ;
   struct sd_ssr ssr ;
   struct sd_switch_caps sw_caps ;
   unsigned int sdio_funcs ;
   struct sdio_cccr cccr ;
   struct sdio_cis cis ;
   struct sdio_func *sdio_func[7U] ;
   struct sdio_func *sdio_single_irq ;
   unsigned int num_info ;
   char const **info ;
   struct sdio_func_tuple *tuples ;
   unsigned int sd_bus_speed ;
   unsigned int mmc_avail_type ;
   unsigned int drive_strength ;
   struct dentry *debugfs_root ;
   struct mmc_part part[7U] ;
   unsigned int nr_parts ;
};

#line 531 
enum led_brightness {
    LED_OFF = 0,
    LED_HALF = 127,
    LED_FULL = 255
};

#line 537 
struct led_trigger;

#line 537  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mmc/card.h"
struct led_classdev {
   char const *name ;
   enum led_brightness brightness ;
   enum led_brightness max_brightness ;
   int flags ;
   void (*brightness_set)(struct led_classdev *, enum led_brightness ) ;
   int (*brightness_set_sync)(struct led_classdev *, enum led_brightness ) ;
   enum led_brightness (*brightness_get)(struct led_classdev *) ;
   int (*blink_set)(struct led_classdev *, unsigned long *, unsigned long *) ;
   struct device *dev ;
   struct attribute_group const **groups ;
   struct list_head node ;
   char const *default_trigger ;
   unsigned long blink_delay_on ;
   unsigned long blink_delay_off ;
   struct timer_list blink_timer ;
   int blink_brightness ;
   void (*flash_resume)(struct led_classdev *) ;
   struct work_struct set_brightness_work ;
   int delayed_set_value ;
   struct rw_semaphore trigger_lock ;
   struct led_trigger *trigger ;
   struct list_head trig_list ;
   void *trigger_data ;
   bool activated ;
   struct mutex led_access ;
};

#line 200  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/leds.h"
struct led_trigger {
   char const *name ;
   void (*activate)(struct led_classdev *) ;
   void (*deactivate)(struct led_classdev *) ;
   rwlock_t leddev_list_lock ;
   struct list_head led_cdevs ;
   struct list_head next_trig ;
};

#line 365  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/leds.h"
struct fault_attr {
   unsigned long probability ;
   unsigned long interval ;
   atomic_t times ;
   atomic_t space ;
   unsigned long verbose ;
   u32 task_filter ;
   unsigned long stacktrace_depth ;
   unsigned long require_start ;
   unsigned long require_end ;
   unsigned long reject_start ;
   unsigned long reject_end ;
   unsigned long count ;
   struct ratelimit_state ratelimit_state ;
   struct dentry *dname ;
};

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fault-inject.h"
struct mmc_ios {
   unsigned int clock ;
   unsigned short vdd ;
   unsigned char bus_mode ;
   unsigned char chip_select ;
   unsigned char power_mode ;
   unsigned char bus_width ;
   unsigned char timing ;
   unsigned char signal_voltage ;
   unsigned char drv_type ;
};

#line 76  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mmc/host.h"
struct mmc_host_ops {
   void (*post_req)(struct mmc_host *, struct mmc_request *, int ) ;
   void (*pre_req)(struct mmc_host *, struct mmc_request *, bool ) ;
   void (*request)(struct mmc_host *, struct mmc_request *) ;
   void (*set_ios)(struct mmc_host *, struct mmc_ios *) ;
   int (*get_ro)(struct mmc_host *) ;
   int (*get_cd)(struct mmc_host *) ;
   void (*enable_sdio_irq)(struct mmc_host *, int ) ;
   void (*init_card)(struct mmc_host *, struct mmc_card *) ;
   int (*start_signal_voltage_switch)(struct mmc_host *, struct mmc_ios *) ;
   int (*card_busy)(struct mmc_host *) ;
   int (*execute_tuning)(struct mmc_host *, u32 ) ;
   int (*prepare_hs400_tuning)(struct mmc_host *, struct mmc_ios *) ;
   int (*select_drive_strength)(struct mmc_card *, unsigned int , int , int , int *) ;
   void (*hw_reset)(struct mmc_host *) ;
   void (*card_event)(struct mmc_host *) ;
   int (*multi_io_quirk)(struct mmc_card *, unsigned int , int ) ;
};

#line 147  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mmc/host.h"
struct mmc_async_req {
   struct mmc_request *mrq ;
   int (*err_check)(struct mmc_card *, struct mmc_async_req *) ;
};

#line 161  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mmc/host.h"
struct mmc_slot {
   int cd_irq ;
   void *handler_priv ;
};

#line 177  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mmc/host.h"
struct mmc_context_info {
   bool is_done_rcv ;
   bool is_new_req ;
   bool is_waiting_last_req ;
   wait_queue_head_t wait ;
   spinlock_t lock ;
};

#line 193 
struct regulator;

#line 194 
struct mmc_pwrseq;

#line 195  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mmc/host.h"
struct mmc_supply {
   struct regulator *vmmc ;
   struct regulator *vqmmc ;
};

#line 201 
struct mmc_bus_ops;

#line 201  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mmc/host.h"
struct mmc_host {
   struct device *parent ;
   struct device class_dev ;
   int index ;
   struct mmc_host_ops const *ops ;
   struct mmc_pwrseq *pwrseq ;
   unsigned int f_min ;
   unsigned int f_max ;
   unsigned int f_init ;
   u32 ocr_avail ;
   u32 ocr_avail_sdio ;
   u32 ocr_avail_sd ;
   u32 ocr_avail_mmc ;
   struct notifier_block pm_notify ;
   u32 max_current_330 ;
   u32 max_current_300 ;
   u32 max_current_180 ;
   u32 caps ;
   u32 caps2 ;
   mmc_pm_flag_t pm_caps ;
   int clk_requests ;
   unsigned int clk_delay ;
   bool clk_gated ;
   struct delayed_work clk_gate_work ;
   unsigned int clk_old ;
   spinlock_t clk_lock ;
   struct mutex clk_gate_mutex ;
   struct device_attribute clkgate_delay_attr ;
   unsigned long clkgate_delay ;
   unsigned int max_seg_size ;
   unsigned short max_segs ;
   unsigned short unused ;
   unsigned int max_req_size ;
   unsigned int max_blk_size ;
   unsigned int max_blk_count ;
   unsigned int max_busy_timeout ;
   spinlock_t lock ;
   struct mmc_ios ios ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) use_spi_crc : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) claimed : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) bus_dead : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) removed : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) can_retune : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) doing_retune : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) retune_now : 1 ;
   int rescan_disable ;
   int rescan_entered ;
   int need_retune ;
   int hold_retune ;
   unsigned int retune_period ;
   struct timer_list retune_timer ;
   bool trigger_card_event ;
   struct mmc_card *card ;
   wait_queue_head_t wq ;
   struct task_struct *claimer ;
   int claim_cnt ;
   struct delayed_work detect ;
   int detect_change ;
   struct mmc_slot slot ;
   struct mmc_bus_ops const *bus_ops ;
   unsigned int bus_refs ;
   unsigned int sdio_irqs ;
   struct task_struct *sdio_irq_thread ;
   bool sdio_irq_pending ;
   atomic_t sdio_irq_thread_abort ;
   mmc_pm_flag_t pm_flags ;
   struct led_trigger *led ;
   bool regulator_enabled ;
   struct mmc_supply supply ;
   struct dentry *debugfs_root ;
   struct mmc_async_req *areq ;
   struct mmc_context_info context_info ;
   struct fault_attr fail_mmc_request ;
   unsigned int actual_clock ;
   unsigned int slotno ;
   int dsr_req ;
   u32 dsr ;
   unsigned long private[0U] ;
};

#line 541  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mmc/host.h"
struct mwifiex_sdio_mpa_tx {
   u8 *buf ;
   u32 buf_len ;
   u32 pkt_cnt ;
   u32 ports ;
   u16 start_port ;
   u8 enabled ;
   u32 buf_size ;
   u32 pkt_aggr_limit ;
};

#line 168  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sdio.h"
struct mwifiex_sdio_mpa_rx {
   u8 *buf ;
   u32 buf_len ;
   u32 pkt_cnt ;
   u32 ports ;
   u16 start_port ;
   struct sk_buff **skb_arr ;
   u32 *len_arr ;
   u8 enabled ;
   u32 buf_size ;
   u32 pkt_aggr_limit ;
};

#line 186  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sdio.h"
struct mwifiex_sdio_card_reg {
   u8 start_rd_port ;
   u8 start_wr_port ;
   u8 base_0_reg ;
   u8 base_1_reg ;
   u8 poll_reg ;
   u8 host_int_enable ;
   u8 host_int_rsr_reg ;
   u8 host_int_status_reg ;
   u8 host_int_mask_reg ;
   u8 status_reg_0 ;
   u8 status_reg_1 ;
   u8 sdio_int_mask ;
   u32 data_port_mask ;
   u8 io_port_0_reg ;
   u8 io_port_1_reg ;
   u8 io_port_2_reg ;
   u8 max_mp_regs ;
   u8 rd_bitmap_l ;
   u8 rd_bitmap_u ;
   u8 rd_bitmap_1l ;
   u8 rd_bitmap_1u ;
   u8 wr_bitmap_l ;
   u8 wr_bitmap_u ;
   u8 wr_bitmap_1l ;
   u8 wr_bitmap_1u ;
   u8 rd_len_p0_l ;
   u8 rd_len_p0_u ;
   u8 card_misc_cfg_reg ;
   u8 card_cfg_2_1_reg ;
   u8 cmd_rd_len_0 ;
   u8 cmd_rd_len_1 ;
   u8 cmd_rd_len_2 ;
   u8 cmd_rd_len_3 ;
   u8 cmd_cfg_0 ;
   u8 cmd_cfg_1 ;
   u8 cmd_cfg_2 ;
   u8 cmd_cfg_3 ;
   u8 fw_dump_ctrl ;
   u8 fw_dump_start ;
   u8 fw_dump_end ;
   u8 func1_dump_reg_start ;
   u8 func1_dump_reg_end ;
   u8 func1_scratch_reg ;
   u8 func1_spec_reg_num ;
   u8 func1_spec_reg_table[13U] ;
};

#line 234  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sdio.h"
struct sdio_mmc_card {
   struct sdio_func *func ;
   struct mwifiex_adapter *adapter ;
   char const *firmware ;
   struct mwifiex_sdio_card_reg const *reg ;
   u8 max_ports ;
   u8 mp_agg_pkt_limit ;
   u16 tx_buf_size ;
   u32 mp_tx_agg_buf_size ;
   u32 mp_rx_agg_buf_size ;
   u32 mp_rd_bitmap ;
   u32 mp_wr_bitmap ;
   u16 mp_end_port ;
   u32 mp_data_port_mask ;
   u8 curr_rd_port ;
   u8 curr_wr_port ;
   u8 *mp_regs ;
   bool supports_sdio_new_mode ;
   bool has_control_mask ;
   bool can_dump_fw ;
   bool can_auto_tdls ;
   bool can_ext_scan ;
   struct mwifiex_sdio_mpa_tx mpa_tx ;
   struct mwifiex_sdio_mpa_rx mpa_rx ;
};

#line 143  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ieee80211.h"
struct ieee80211_hdr {
   __le16 frame_control ;
   __le16 duration_id ;
   u8 addr1[6U] ;
   u8 addr2[6U] ;
   u8 addr3[6U] ;
   __le16 seq_ctrl ;
   u8 addr4[6U] ;
};

#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/util.h"
struct mwifiex_debug_data {
   char name[32U] ;
   u32 size ;
   size_t addr ;
   int num ;
};

#line 584  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct rxpd {
   u8 bss_type ;
   u8 bss_num ;
   __le16 rx_pkt_length ;
   __le16 rx_pkt_offset ;
   __le16 rx_pkt_type ;
   __le16 seq_num ;
   u8 priority ;
   u8 rx_rate ;
   s8 snr ;
   s8 nf ;
   u8 ht_info ;
   u8 reserved[3U] ;
   u8 flags ;
};

#line 340  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.h"
struct ieee_types_extcap {
   struct ieee_types_header ieee_hdr ;
   u8 ext_capab[8U] ;
};

#line 728  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.h"
struct mwifiex_tdls_capab {
   __le16 capab ;
   u8 rates[32U] ;
   u8 rates_len ;
   u8 qos_info ;
   u8 coex_2040 ;
   u16 aid ;
   struct ieee80211_ht_cap ht_capb ;
   struct ieee80211_ht_operation ht_oper ;
   struct ieee_types_extcap extcap ;
   struct ieee_types_generic rsn_ie ;
   struct ieee80211_vht_cap vhtcap ;
   struct ieee80211_vht_operation vhtoper ;
};

#line 743  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.h"
struct mwifiex_station_stats {
   u64 last_rx ;
   s8 rssi ;
   u64 rx_bytes ;
   u64 tx_bytes ;
   u32 rx_packets ;
   u32 tx_packets ;
   u32 tx_failed ;
   u8 last_tx_rate ;
   u8 last_tx_htinfo ;
};

#line 755  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.h"
struct mwifiex_sta_node {
   struct list_head list ;
   u8 mac_addr[6U] ;
   u8 is_wmm_enabled ;
   u8 is_11n_enabled ;
   u8 is_11ac_enabled ;
   u8 ampdu_sta[8U] ;
   u16 rx_seq[8U] ;
   u16 max_amsdu ;
   u8 tdls_status ;
   struct mwifiex_tdls_capab tdls_cap ;
   struct mwifiex_station_stats stats ;
};

#line 36  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/types.h"
typedef __u64 __le64;

#line 677  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ieee80211.h"
struct ieee80211_msrment_ie {
   u8 token ;
   u8 mode ;
   u8 type ;
   u8 request[0U] ;
};

#line 700  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ieee80211.h"
struct ieee80211_ext_chansw_ie {
   u8 mode ;
   u8 new_operating_class ;
   u8 new_ch_num ;
   u8 count ;
};

#line 831  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ieee80211.h"
struct ieee80211_tpc_report_ie {
   u8 tx_power ;
   u8 link_margin ;
};

#line 856  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ieee80211.h"
struct __anonstruct_auth_2097 {
   __le16 auth_alg ;
   __le16 auth_transaction ;
   __le16 status_code ;
   u8 variable[0U] ;
};

#line 856  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ieee80211.h"
struct __anonstruct_deauth_2098 {
   __le16 reason_code ;
};

#line 856  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ieee80211.h"
struct __anonstruct_assoc_req_2099 {
   __le16 capab_info ;
   __le16 listen_interval ;
   u8 variable[0U] ;
};

#line 856  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ieee80211.h"
struct __anonstruct_assoc_resp_2100 {
   __le16 capab_info ;
   __le16 status_code ;
   __le16 aid ;
   u8 variable[0U] ;
};

#line 856  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ieee80211.h"
struct __anonstruct_reassoc_resp_2101 {
   __le16 capab_info ;
   __le16 status_code ;
   __le16 aid ;
   u8 variable[0U] ;
};

#line 856  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ieee80211.h"
struct __anonstruct_reassoc_req_2102 {
   __le16 capab_info ;
   __le16 listen_interval ;
   u8 current_ap[6U] ;
   u8 variable[0U] ;
};

#line 856  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ieee80211.h"
struct __anonstruct_disassoc_2103 {
   __le16 reason_code ;
};

#line 856  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ieee80211.h"
struct __anonstruct_beacon_2104 {
   __le64 timestamp ;
   __le16 beacon_int ;
   __le16 capab_info ;
   u8 variable[0U] ;
};

#line 856  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ieee80211.h"
struct __anonstruct_probe_req_2105 {
   u8 variable[0U] ;
};

#line 856  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ieee80211.h"
struct __anonstruct_probe_resp_2106 {
   __le64 timestamp ;
   __le16 beacon_int ;
   __le16 capab_info ;
   u8 variable[0U] ;
};

#line 856  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ieee80211.h"
struct __anonstruct_wme_action_2109 {
   u8 action_code ;
   u8 dialog_token ;
   u8 status_code ;
   u8 variable[0U] ;
};

#line 856  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ieee80211.h"
struct __anonstruct_chan_switch_2110 {
   u8 action_code ;
   u8 variable[0U] ;
};

#line 856  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ieee80211.h"
struct __anonstruct_ext_chan_switch_2111 {
   u8 action_code ;
   struct ieee80211_ext_chansw_ie data ;
   u8 variable[0U] ;
};

#line 856  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ieee80211.h"
struct __anonstruct_measurement_2112 {
   u8 action_code ;
   u8 dialog_token ;
   u8 element_id ;
   u8 length ;
   struct ieee80211_msrment_ie msr_elem ;
};

#line 856  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ieee80211.h"
struct __anonstruct_addba_req_2113 {
   u8 action_code ;
   u8 dialog_token ;
   __le16 capab ;
   __le16 timeout ;
   __le16 start_seq_num ;
};

#line 856  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ieee80211.h"
struct __anonstruct_addba_resp_2114 {
   u8 action_code ;
   u8 dialog_token ;
   __le16 status ;
   __le16 capab ;
   __le16 timeout ;
};

#line 856  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ieee80211.h"
struct __anonstruct_delba_2115 {
   u8 action_code ;
   __le16 params ;
   __le16 reason_code ;
};

#line 856  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ieee80211.h"
struct __anonstruct_self_prot_2116 {
   u8 action_code ;
   u8 variable[0U] ;
};

#line 856  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ieee80211.h"
struct __anonstruct_mesh_action_2117 {
   u8 action_code ;
   u8 variable[0U] ;
};

#line 856  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ieee80211.h"
struct __anonstruct_sa_query_2118 {
   u8 action ;
   u8 trans_id[2U] ;
};

#line 856  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ieee80211.h"
struct __anonstruct_ht_smps_2119 {
   u8 action ;
   u8 smps_control ;
};

#line 856  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ieee80211.h"
struct __anonstruct_ht_notify_cw_2120 {
   u8 action_code ;
   u8 chanwidth ;
};

#line 856  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ieee80211.h"
struct __anonstruct_tdls_discover_resp_2121 {
   u8 action_code ;
   u8 dialog_token ;
   __le16 capability ;
   u8 variable[0U] ;
};

#line 856  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ieee80211.h"
struct __anonstruct_vht_opmode_notif_2122 {
   u8 action_code ;
   u8 operating_mode ;
};

#line 856  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ieee80211.h"
struct __anonstruct_tpc_report_2123 {
   u8 action_code ;
   u8 dialog_token ;
   u8 tpc_elem_id ;
   u8 tpc_elem_length ;
   struct ieee80211_tpc_report_ie tpc ;
};

#line 856  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ieee80211.h"
union __anonunion_u_2108 {
   struct __anonstruct_wme_action_2109 wme_action ;
   struct __anonstruct_chan_switch_2110 chan_switch ;
   struct __anonstruct_ext_chan_switch_2111 ext_chan_switch ;
   struct __anonstruct_measurement_2112 measurement ;
   struct __anonstruct_addba_req_2113 addba_req ;
   struct __anonstruct_addba_resp_2114 addba_resp ;
   struct __anonstruct_delba_2115 delba ;
   struct __anonstruct_self_prot_2116 self_prot ;
   struct __anonstruct_mesh_action_2117 mesh_action ;
   struct __anonstruct_sa_query_2118 sa_query ;
   struct __anonstruct_ht_smps_2119 ht_smps ;
   struct __anonstruct_ht_notify_cw_2120 ht_notify_cw ;
   struct __anonstruct_tdls_discover_resp_2121 tdls_discover_resp ;
   struct __anonstruct_vht_opmode_notif_2122 vht_opmode_notif ;
   struct __anonstruct_tpc_report_2123 tpc_report ;
};

#line 856  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ieee80211.h"
struct __anonstruct_action_2107 {
   u8 category ;
   union __anonunion_u_2108 u ;
};

#line 856  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ieee80211.h"
union __anonunion_u_2096 {
   struct __anonstruct_auth_2097 auth ;
   struct __anonstruct_deauth_2098 deauth ;
   struct __anonstruct_assoc_req_2099 assoc_req ;
   struct __anonstruct_assoc_resp_2100 assoc_resp ;
   struct __anonstruct_reassoc_resp_2101 reassoc_resp ;
   struct __anonstruct_reassoc_req_2102 reassoc_req ;
   struct __anonstruct_disassoc_2103 disassoc ;
   struct __anonstruct_beacon_2104 beacon ;
   struct __anonstruct_probe_req_2105 probe_req ;
   struct __anonstruct_probe_resp_2106 probe_resp ;
   struct __anonstruct_action_2107 action ;
};

#line 856  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ieee80211.h"
struct ieee80211_mgmt {
   __le16 frame_control ;
   __le16 duration ;
   u8 da[6U] ;
   u8 sa[6U] ;
   u8 bssid[6U] ;
   __le16 seq_ctrl ;
   union __anonunion_u_2096 u ;
};

#line 1035  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ieee80211.h"
struct ieee80211_wmm_ac_param {
   u8 aci_aifsn ;
   u8 cw ;
   __le16 txop_limit ;
};

#line 1041  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ieee80211.h"
struct ieee80211_wmm_param_ie {
   u8 element_id ;
   u8 len ;
   u8 oui[3U] ;
   u8 oui_type ;
   u8 oui_subtype ;
   u8 version ;
   u8 qos_info ;
   u8 reserved ;
   struct ieee80211_wmm_ac_param ac[4U] ;
};

#line 1084  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ieee80211.h"
struct ieee80211_tdls_lnkie {
   u8 ie_type ;
   u8 ie_len ;
   u8 bssid[6U] ;
   u8 init_sta[6U] ;
   u8 resp_sta[6U] ;
};

#line 1093  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ieee80211.h"
struct __anonstruct_setup_req_2125 {
   u8 dialog_token ;
   __le16 capability ;
   u8 variable[0U] ;
};

#line 1093  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ieee80211.h"
struct __anonstruct_setup_resp_2126 {
   __le16 status_code ;
   u8 dialog_token ;
   __le16 capability ;
   u8 variable[0U] ;
};

#line 1093  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ieee80211.h"
struct __anonstruct_setup_cfm_2127 {
   __le16 status_code ;
   u8 dialog_token ;
   u8 variable[0U] ;
};

#line 1093  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ieee80211.h"
struct __anonstruct_teardown_2128 {
   __le16 reason_code ;
   u8 variable[0U] ;
};

#line 1093  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ieee80211.h"
struct __anonstruct_discover_req_2129 {
   u8 dialog_token ;
   u8 variable[0U] ;
};

#line 1093  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ieee80211.h"
struct __anonstruct_chan_switch_req_2130 {
   u8 target_channel ;
   u8 oper_class ;
   u8 variable[0U] ;
};

#line 1093  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ieee80211.h"
struct __anonstruct_chan_switch_resp_2131 {
   __le16 status_code ;
   u8 variable[0U] ;
};

#line 1093  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ieee80211.h"
union __anonunion_u_2124 {
   struct __anonstruct_setup_req_2125 setup_req ;
   struct __anonstruct_setup_resp_2126 setup_resp ;
   struct __anonstruct_setup_cfm_2127 setup_cfm ;
   struct __anonstruct_teardown_2128 teardown ;
   struct __anonstruct_discover_req_2129 discover_req ;
   struct __anonstruct_chan_switch_req_2130 chan_switch_req ;
   struct __anonstruct_chan_switch_resp_2131 chan_switch_resp ;
};

#line 1093  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ieee80211.h"
struct ieee80211_tdls_data {
   u8 da[6U] ;
   u8 sa[6U] ;
   __be16 ether_type ;
   u8 payload_type ;
   u8 category ;
   u8 action_code ;
   union __anonunion_u_2124 u ;
};

#line 4044  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/nl80211.h"
enum nl80211_tdls_operation {
    NL80211_TDLS_DISCOVERY_REQ = 0,
    NL80211_TDLS_SETUP = 1,
    NL80211_TDLS_TEARDOWN = 2,
    NL80211_TDLS_ENABLE_LINK = 3,
    NL80211_TDLS_DISABLE_LINK = 4
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/ioctl.h"
struct mwifiex_ds_tdls_oper {
   u16 tdls_action ;
   u8 peer_mac[6U] ;
   u16 capability ;
   u8 qos_info ;
   u8 *ext_capab ;
   u8 ext_capab_len ;
   u8 *supp_rates ;
   u8 supp_rates_len ;
   u8 *ht_capab ;
};

#line 265  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.h"
enum mwifiex_ba_status {
    BA_SETUP_NONE = 0,
    BA_SETUP_INPROGRESS = 1,
    BA_SETUP_COMPLETE = 2
};

#line 271  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.h"
struct mwifiex_ra_list_tbl {
   struct list_head list ;
   struct sk_buff_head skb_head ;
   u8 ra[6U] ;
   u32 is_11n_enabled ;
   u16 max_amsdu ;
   u16 ba_pkt_count ;
   u8 ba_packet_thr ;
   enum mwifiex_ba_status ba_status ;
   u8 amsdu_in_ampdu ;
   u16 total_pkt_count ;
   bool tdls_link ;
};

#line 772  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.h"
struct mwifiex_auto_tdls_peer {
   struct list_head list ;
   u8 mac_addr[6U] ;
   u8 tdls_status ;
   int rssi ;
   long rssi_jiffies ;
   u8 failure_count ;
   u8 do_discover ;
   u8 do_setup ;
};

#line 500  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/debugfs.h"
struct nl80211_sta_flag_update {
   __u32 mask ;
   __u32 set ;
};

#line 914  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/cfg80211.h"
struct rate_info {
   u8 flags ;
   u8 mcs ;
   u16 legacy ;
   u8 nss ;
   u8 bw ;
};

#line 964  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/cfg80211.h"
struct sta_bss_parameters {
   u8 flags ;
   u8 dtim_period ;
   u16 beacon_interval ;
};

#line 989  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/cfg80211.h"
struct cfg80211_tid_stats {
   u32 filled ;
   u64 rx_msdu ;
   u64 tx_msdu ;
   u64 tx_msdu_retries ;
   u64 tx_msdu_failed ;
};

#line 1007  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/cfg80211.h"
struct station_info {
   u32 filled ;
   u32 connected_time ;
   u32 inactive_time ;
   u64 rx_bytes ;
   u64 tx_bytes ;
   u16 llid ;
   u16 plid ;
   u8 plink_state ;
   s8 signal ;
   s8 signal_avg ;
   u8 chains ;
   s8 chain_signal[4U] ;
   s8 chain_signal_avg[4U] ;
   struct rate_info txrate ;
   struct rate_info rxrate ;
   u32 rx_packets ;
   u32 tx_packets ;
   u32 tx_retries ;
   u32 tx_failed ;
   u32 rx_dropped_misc ;
   struct sta_bss_parameters bss_param ;
   struct nl80211_sta_flag_update sta_flags ;
   int generation ;
   u8 const *assoc_req_ies ;
   size_t assoc_req_ies_len ;
   u32 beacon_loss_count ;
   s64 t_offset ;
   enum nl80211_mesh_power_mode local_pm ;
   enum nl80211_mesh_power_mode peer_pm ;
   enum nl80211_mesh_power_mode nonpeer_pm ;
   u32 expected_throughput ;
   u64 rx_beacon ;
   u8 rx_beacon_signal_avg ;
   struct cfg80211_tid_stats pertid[17U] ;
};

#line 558  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct mwifiex_ie_types_data {
   struct mwifiex_ie_types_header header ;
   u8 data[1U] ;
};

#line 1441  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct host_cmd_ds_11n_batimeout {
   u8 tid ;
   u8 peer_mac_addr[6U] ;
   u8 origninator ;
};

#line 1660  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct mwifiex_assoc_event {
   u8 sta_addr[6U] ;
   __le16 type ;
   __le16 len ;
   __le16 frame_control ;
   __le16 cap_info ;
   __le16 listen_interval ;
   u8 data[0U] ;
};

#line 40  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_suseconds_t;

#line 13  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/time.h"
struct timeval {
   __kernel_time_t tv_sec ;
   __kernel_suseconds_t tv_usec ;
};

#line 1496  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct mwifiex_ie_types_wmm_param_set {
   struct mwifiex_ie_types_header header ;
   u8 wmm_ie[1U] ;
};

#line 1501  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct mwifiex_ie_types_wmm_queue_status {
   struct mwifiex_ie_types_header header ;
   u8 queue_index ;
   u8 disabled ;
   __le16 medium_time ;
   u8 flow_required ;
   u8 flow_created ;
   u32 reserved ;
};

#line 666  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.h"
struct mwifiex_tx_ba_stream_tbl {
   struct list_head list ;
   int tid ;
   u8 ra[6U] ;
   enum mwifiex_ba_status ba_status ;
   u8 amsdu ;
};

#line 1567  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/cfg80211.h"
struct cfg80211_bss_ies {
   u64 tsf ;
   struct callback_head callback_head ;
   int len ;
   bool from_beacon ;
   u8 data[] ;
};

#line 1590  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/cfg80211.h"
struct cfg80211_bss {
   struct ieee80211_channel *channel ;
   enum nl80211_bss_scan_width scan_width ;
   struct cfg80211_bss_ies const *ies ;
   struct cfg80211_bss_ies const *beacon_ies ;
   struct cfg80211_bss_ies const *proberesp_ies ;
   struct cfg80211_bss *hidden_beacon_bss ;
   s32 signal ;
   u16 beacon_interval ;
   u16 capability ;
   u8 bssid[6U] ;
   u8 priv[0U] ;
};

#line 3981 
enum cfg80211_bss_frame_type {
    CFG80211_BSS_FTYPE_UNKNOWN = 0,
    CFG80211_BSS_FTYPE_BEACON = 1,
    CFG80211_BSS_FTYPE_PRESP = 2
};

#line 647  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct mwifiex_fw_chan_stats {
   u8 chan_num ;
   u8 bandcfg ;
   u8 flags ;
   s8 noise ;
   __le16 total_bss ;
   __le16 cca_scan_dur ;
   __le16 cca_busy_dur ;
};

#line 670  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct mwifiex_ie_types_chan_list_param_set {
   struct mwifiex_ie_types_header header ;
   struct mwifiex_chan_scan_param_set chan_scan_param[1U] ;
};

#line 675  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct chan_band_param_set {
   u8 radio_type ;
   u8 chan_number ;
};

#line 680  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct mwifiex_ie_types_chan_band_list_param_set {
   struct mwifiex_ie_types_header header ;
   struct chan_band_param_set chan_band_param[1U] ;
};

#line 685  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct mwifiex_ie_types_rates_param_set {
   struct mwifiex_ie_types_header header ;
   u8 rates[1U] ;
};

#line 695  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct mwifiex_ie_types_num_probes {
   struct mwifiex_ie_types_header header ;
   __le16 num_probes ;
};

#line 700  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct mwifiex_ie_types_scan_chan_gap {
   struct mwifiex_ie_types_header header ;
   __le16 chan_gap ;
};

#line 706  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct mwifiex_ietypes_chanstats {
   struct mwifiex_ie_types_header header ;
   struct mwifiex_fw_chan_stats chanstats[0U] ;
};

#line 711  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct mwifiex_ie_types_wildcard_ssid_params {
   struct mwifiex_ie_types_header header ;
   u8 max_ssid_length ;
   u8 ssid[1U] ;
};

#line 717  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct mwifiex_ie_types_tsf_timestamp {
   struct mwifiex_ie_types_header header ;
   u8 tsf_data[1U] ;
};

#line 766  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct mwifiex_ie_types_vendor_param_set {
   struct mwifiex_ie_types_header header ;
   u8 ie[256U] ;
};

#line 1275  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct mwifiex_fixed_bcn_param {
   __le64 timestamp ;
   __le16 beacon_period ;
   __le16 cap_info_bitmap ;
};

#line 1281  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct mwifiex_event_scan_result {
   __le16 event_id ;
   u8 bss_index ;
   u8 bss_type ;
   u8 more_event ;
   u8 reserved[3U] ;
   __le16 buf_size ;
   u8 num_of_set ;
};

#line 1297  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct mwifiex_scan_cmd_config {
   u8 bss_mode ;
   u8 specific_bssid[6U] ;
   u32 tlv_buf_len ;
   u8 tlv_buf[1U] ;
};

#line 1322  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct mwifiex_user_scan_chan {
   u8 chan_number ;
   u8 radio_type ;
   u8 scan_type ;
   u8 reserved ;
   u32 scan_time ;
};

#line 1331  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct mwifiex_user_scan_cfg {
   u8 bss_mode ;
   u8 num_probes ;
   u8 reserved ;
   u8 specific_bssid[6U] ;
   struct cfg80211_ssid *ssid_list ;
   u8 num_ssids ;
   struct mwifiex_user_scan_chan chan_list[50U] ;
   u16 scan_chan_gap ;
};

#line 1349  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct ie_body {
   u8 grp_key_oui[4U] ;
   u8 ptk_cnt[2U] ;
   u8 ptk_body[4U] ;
};

#line 1372  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct mwifiex_ie_types_bss_scan_rsp {
   struct mwifiex_ie_types_header header ;
   u8 bssid[6U] ;
   u8 frame_body[1U] ;
};

#line 1378  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct mwifiex_ie_types_bss_scan_info {
   struct mwifiex_ie_types_header header ;
   __le16 rssi ;
   __le16 anpi ;
   u8 cca_busy_fraction ;
   u8 radio_type ;
   u8 channel ;
   u8 reserved ;
   __le64 tsf ;
};

#line 1735  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct mwifiex_ie_types_bssid_list {
   struct mwifiex_ie_types_header header ;
   u8 bssid[6U] ;
};

#line 723  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.h"
struct mwifiex_bss_priv {
   u8 band ;
   u64 fw_tsf ;
};

#line 28  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfg80211.h"
union mwifiex_scan_cmd_config_tlv {
   struct mwifiex_scan_cmd_config config ;
   u8 config_alloc_buf[549U] ;
};

#line 675  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.h"
struct mwifiex_rx_reorder_tbl;

#line 676  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.h"
struct reorder_tmr_cnxt {
   struct timer_list timer ;
   struct mwifiex_rx_reorder_tbl *ptr ;
   struct mwifiex_private *priv ;
   u8 timer_is_set ;
};

#line 684  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.h"
struct mwifiex_rx_reorder_tbl {
   struct list_head list ;
   int tid ;
   u8 ta[6U] ;
   int init_win ;
   int start_win ;
   int win_size ;
   void **rx_reorder_ptr ;
   struct reorder_tmr_cnxt timer_context ;
   u8 amsdu ;
   u8 flags ;
};

#line 94  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/util.h"
struct rfc_1042_hdr {
   u8 llc_dsap ;
   u8 llc_ssap ;
   u8 llc_ctrl ;
   u8 snap_oui[3U] ;
   __be16 snap_type ;
};

#line 40  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct tx_packet_hdr {
   struct ethhdr eth803_hdr ;
   struct rfc_1042_hdr rfc1042_hdr ;
};

#line 563  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct txpd {
   u8 bss_type ;
   u8 bss_num ;
   __le16 tx_pkt_length ;
   __le16 tx_pkt_offset ;
   __le16 tx_pkt_type ;
   __le32 tx_control ;
   u8 priority ;
   u8 flags ;
   u8 pkt_delay_2ms ;
   u8 reserved1[2U] ;
   u8 tx_token_id ;
   u8 reserved[2U] ;
};

#line 130  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfp.c"
struct region_code_mapping {
   u8 code ;
   u8 region[3U] ;
};

#line 690  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct mwifiex_ie_types_ssid_param_set {
   struct mwifiex_ie_types_header header ;
   u8 ssid[1U] ;
};

#line 723  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct mwifiex_cf_param_set {
   u8 cfp_cnt ;
   u8 cfp_period ;
   __le16 cfp_max_duration ;
   __le16 cfp_duration_remaining ;
};

#line 730  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct mwifiex_ibss_param_set {
   __le16 atim_window ;
};

#line 734  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
union __anonunion_cf_ibss_6004 {
   struct mwifiex_cf_param_set cf_param_set[1U] ;
   struct mwifiex_ibss_param_set ibss_param_set[1U] ;
};

#line 734  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct mwifiex_ie_types_ss_param_set {
   struct mwifiex_ie_types_header header ;
   union __anonunion_cf_ibss_6004 cf_ibss ;
};

#line 742  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct mwifiex_fh_param_set {
   __le16 dwell_time ;
   u8 hop_set ;
   u8 hop_pattern ;
   u8 hop_index ;
};

#line 749  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct mwifiex_ds_param_set {
   u8 current_chan ;
};

#line 753  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
union __anonunion_fh_ds_6005 {
   struct mwifiex_fh_param_set fh_param_set[1U] ;
   struct mwifiex_ds_param_set ds_param_set[1U] ;
};

#line 753  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct mwifiex_ie_types_phy_param_set {
   struct mwifiex_ie_types_header header ;
   union __anonunion_fh_ds_6005 fh_ds ;
};

#line 761  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct mwifiex_ie_types_auth_type {
   struct mwifiex_ie_types_header header ;
   __le16 auth_type ;
};

#line 778  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct mwifiex_ie_types_rsn_param_set {
   struct mwifiex_ie_types_header header ;
   u8 rsn_ie[1U] ;
};

#line 1598  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct mwifiex_ie_types_htinfo {
   struct mwifiex_ie_types_header header ;
   struct ieee80211_ht_operation ht_oper ;
};

#line 162  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef u64 phys_addr_t;

#line 167  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef phys_addr_t resource_size_t;

#line 64  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/e820.h"
struct resource {
   resource_size_t start ;
   resource_size_t end ;
   char const *name ;
   unsigned long flags ;
   struct resource *parent ;
   struct resource *sibling ;
   struct resource *child ;
};

#line 172  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/x86_init.h"
struct pci_dev;

#line 133  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/topology.h"
struct pci_bus;

#line 14  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mod_devicetable.h"
struct pci_device_id {
   __u32 vendor ;
   __u32 device ;
   __u32 subvendor ;
   __u32 subdevice ;
   __u32 class ;
   __u32 class_mask ;
   kernel_ulong_t driver_data ;
};

#line 239  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/ioctl.h"
struct mwifiex_ds_encrypt_key {
   u32 key_disable ;
   u32 key_index ;
   u32 key_len ;
   u8 key_material[32U] ;
   u8 mac_addr[6U] ;
   u32 is_wapi_key ;
   u8 pn[16U] ;
   u8 pn_len ;
   u8 is_igtk_key ;
   u8 is_current_wep_key ;
   u8 is_rx_seq_valid ;
};

#line 300  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/ioctl.h"
struct mwifiex_ds_11n_tx_cfg {
   u16 tx_htcap ;
   u16 tx_htinfo ;
   u16 misc_config ;
};

#line 306  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/ioctl.h"
struct mwifiex_ds_11n_amsdu_aggr_ctrl {
   u16 enable ;
   u16 curr_buf_size ;
};

#line 311  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/ioctl.h"
struct mwifiex_ds_ant_cfg {
   u32 tx_ant ;
   u32 rx_ant ;
};

#line 329  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/ioctl.h"
struct mwifiex_ds_reg_rw {
   __le32 type ;
   __le32 offset ;
   __le32 value ;
};

#line 338  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/ioctl.h"
struct mwifiex_ds_read_eeprom {
   __le16 offset ;
   __le16 byte_count ;
   u8 value[256U] ;
};

#line 387  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/ioctl.h"
struct mwifiex_mef_filter {
   u16 repeat ;
   u16 offset ;
   s8 byte_seq[7U] ;
   u8 filt_type ;
   u8 filt_action ;
};

#line 398  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/ioctl.h"
struct mwifiex_mef_entry {
   u8 mode ;
   u8 action ;
   struct mwifiex_mef_filter filter[10U] ;
};

#line 404  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/ioctl.h"
struct mwifiex_ds_mef_cfg {
   u32 criteria ;
   u16 num_entries ;
   struct mwifiex_mef_entry *mef_entry ;
};

#line 426  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/ioctl.h"
struct filt_field_param {
   u8 operation ;
   u8 operand_len ;
   u16 offset ;
   u8 operand_byte_stream[4U] ;
};

#line 445  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/ioctl.h"
struct mwifiex_coalesce_rule {
   u16 max_coalescing_delay ;
   u8 num_of_fields ;
   u8 pkt_type ;
   struct filt_field_param params[4U] ;
};

#line 452  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/ioctl.h"
struct mwifiex_ds_coalesce_cfg {
   u16 num_of_rules ;
   struct mwifiex_coalesce_rule rule[8U] ;
};

#line 771  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct mwifiex_ie_types_tdls_idle_timeout {
   struct mwifiex_ie_types_header header ;
   __le16 value ;
};

#line 794  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct mwifiex_cmac_param {
   u8 ipn[8U] ;
   u8 key[16U] ;
};

#line 1184  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct mwifiex_rate_scope {
   __le16 type ;
   __le16 length ;
   __le16 hr_dsss_rate_bitmap ;
   __le16 ofdm_rate_bitmap ;
   __le16 ht_mcs_rate_bitmap[8U] ;
   __le16 vht_mcs_rate_bitmap[8U] ;
};

#line 1193  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct mwifiex_rate_drop_pattern {
   __le16 type ;
   __le16 length ;
   __le32 rate_drop_mode ;
};

#line 1215  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct mwifiex_types_power_group {
   __le16 type ;
   __le16 length ;
};

#line 1568  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct mwifiex_ie_types_vhtcap {
   struct mwifiex_ie_types_header header ;
   struct ieee80211_vht_cap vht_cap ;
};

#line 1573  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct mwifiex_ie_types_aid {
   struct mwifiex_ie_types_header header ;
   __le16 aid ;
};

#line 1608  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct mwifiex_ie_types_extcap {
   struct mwifiex_ie_types_header header ;
   u8 ext_capab[0U] ;
};

#line 1620  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct mwifiex_ie_types_qos_info {
   struct mwifiex_ie_types_header header ;
   u8 qos_info ;
};

#line 1770  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct host_cmd_tlv_mac_addr {
   struct mwifiex_ie_types_header header ;
   u8 mac_addr[6U] ;
};

#line 1885  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct mwifiex_ie_types_rssi_threshold {
   struct mwifiex_ie_types_header header ;
   u8 abs_value ;
   u8 evt_freq ;
};

#line 70  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/resource_ext.h"
struct hotplug_slot;

#line 70  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/resource_ext.h"
struct pci_slot {
   struct pci_bus *bus ;
   struct list_head list ;
   struct hotplug_slot *hotplug ;
   unsigned char number ;
   struct kobject kobj ;
};

#line 110  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
typedef int pci_power_t;

#line 137  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
typedef unsigned int pci_channel_state_t;

#line 138 
enum pci_channel_state {
    pci_channel_io_normal = 1,
    pci_channel_io_frozen = 2,
    pci_channel_io_perm_failure = 3
};

#line 163  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
typedef unsigned short pci_dev_flags_t;

#line 192  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
typedef unsigned short pci_bus_flags_t;

#line 249 
struct pcie_link_state;

#line 250 
struct pci_vpd;

#line 251 
struct pci_sriov;

#line 252 
struct pci_ats;

#line 253 
struct pci_driver;

#line 253  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
union __anonunion_6499 {
   struct pci_sriov *sriov ;
   struct pci_dev *physfn ;
};

#line 253  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
struct pci_dev {
   struct list_head bus_list ;
   struct pci_bus *bus ;
   struct pci_bus *subordinate ;
   void *sysdata ;
   struct proc_dir_entry *procent ;
   struct pci_slot *slot ;
   unsigned int devfn ;
   unsigned short vendor ;
   unsigned short device ;
   unsigned short subsystem_vendor ;
   unsigned short subsystem_device ;
   unsigned int class ;
   u8 revision ;
   u8 hdr_type ;
   u8 pcie_cap ;
   u8 msi_cap ;
   u8 msix_cap ;
   u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))) pcie_mpss : 3 ;
   u8 rom_base_reg ;
   u8 pin ;
   u16 pcie_flags_reg ;
   u8 dma_alias_devfn ;
   struct pci_driver *driver ;
   u64 dma_mask ;
   struct device_dma_parameters dma_parms ;
   pci_power_t current_state ;
   u8 pm_cap ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(5))) pme_support : 5 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) pme_interrupt : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) pme_poll : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) d1_support : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) d2_support : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) no_d1d2 : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) no_d3cold : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) d3cold_allowed : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) mmio_always_on : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) wakeup_prepared : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) runtime_d3cold : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ignore_hotplug : 1 ;
   unsigned int d3_delay ;
   unsigned int d3cold_delay ;
   struct pcie_link_state *link_state ;
   pci_channel_state_t error_state ;
   struct device dev ;
   int cfg_size ;
   unsigned int irq ;
   struct resource resource[17U] ;
   bool match_driver ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) transparent : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) multifunction : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_added : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_busmaster : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) no_msi : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) no_64bit_msi : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) block_cfg_access : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) broken_parity_status : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) irq_reroute_variant : 2 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) msi_enabled : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) msix_enabled : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ari_enabled : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_managed : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) needs_freset : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) state_saved : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_physfn : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_virtfn : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) reset_fn : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_hotplug_bridge : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) __aer_firmware_first_valid : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) __aer_firmware_first : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) broken_intx_masking : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) io_window_1k : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) irq_managed : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) has_secondary_link : 1 ;
   pci_dev_flags_t dev_flags ;
   atomic_t enable_cnt ;
   u32 saved_config_space[16U] ;
   struct hlist_head saved_cap_space ;
   struct bin_attribute *rom_attr ;
   int rom_attr_enabled ;
   struct bin_attribute *res_attr[17U] ;
   struct bin_attribute *res_attr_wc[17U] ;
   struct list_head msi_list ;
   struct attribute_group const **msi_irq_groups ;
   struct pci_vpd *vpd ;
   union __anonunion_6499 __anonCompField_pci_dev_115 ;
   struct pci_ats *ats ;
   phys_addr_t rom ;
   size_t romlen ;
   char *driver_override ;
};

#line 442 
struct pci_ops;

#line 442 
struct msi_controller;

#line 442  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
struct pci_bus {
   struct list_head node ;
   struct pci_bus *parent ;
   struct list_head children ;
   struct list_head devices ;
   struct pci_dev *self ;
   struct list_head slots ;
   struct resource *resource[4U] ;
   struct list_head resources ;
   struct resource busn_res ;
   struct pci_ops *ops ;
   struct msi_controller *msi ;
   void *sysdata ;
   struct proc_dir_entry *procdir ;
   unsigned char number ;
   unsigned char primary ;
   unsigned char max_bus_speed ;
   unsigned char cur_bus_speed ;
   char name[48U] ;
   unsigned short bridge_ctl ;
   pci_bus_flags_t bus_flags ;
   struct device *bridge ;
   struct device dev ;
   struct bin_attribute *legacy_io ;
   struct bin_attribute *legacy_mem ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_added : 1 ;
};

#line 565  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
struct pci_ops {
   void *(*map_bus)(struct pci_bus *, unsigned int , int ) ;
   int (*read)(struct pci_bus *, unsigned int , int , int , u32 *) ;
   int (*write)(struct pci_bus *, unsigned int , int , int , u32 ) ;
};

#line 593  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
struct pci_dynids {
   spinlock_t lock ;
   struct list_head list ;
};

#line 607  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
typedef unsigned int pci_ers_result_t;

#line 617  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
struct pci_error_handlers {
   pci_ers_result_t (*error_detected)(struct pci_dev *, enum pci_channel_state ) ;
   pci_ers_result_t (*mmio_enabled)(struct pci_dev *) ;
   pci_ers_result_t (*link_reset)(struct pci_dev *) ;
   pci_ers_result_t (*slot_reset)(struct pci_dev *) ;
   void (*reset_notify)(struct pci_dev *, bool ) ;
   void (*resume)(struct pci_dev *) ;
};

#line 650  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
struct pci_driver {
   struct list_head node ;
   char const *name ;
   struct pci_device_id const *id_table ;
   int (*probe)(struct pci_dev *, struct pci_device_id const *) ;
   void (*remove)(struct pci_dev *) ;
   int (*suspend)(struct pci_dev *, pm_message_t ) ;
   int (*suspend_late)(struct pci_dev *, pm_message_t ) ;
   int (*resume_early)(struct pci_dev *) ;
   int (*resume)(struct pci_dev *) ;
   void (*shutdown)(struct pci_dev *) ;
   int (*sriov_configure)(struct pci_dev *, int ) ;
   struct pci_error_handlers const *err_handler ;
   struct device_driver driver ;
   struct pci_dynids dynids ;
};

#line 67  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pcieport_if.h"
struct mwifiex_pcie_card_reg {
   u16 cmd_addr_lo ;
   u16 cmd_addr_hi ;
   u16 fw_status ;
   u16 cmd_size ;
   u16 cmdrsp_addr_lo ;
   u16 cmdrsp_addr_hi ;
   u16 tx_rdptr ;
   u16 tx_wrptr ;
   u16 rx_rdptr ;
   u16 rx_wrptr ;
   u16 evt_rdptr ;
   u16 evt_wrptr ;
   u16 drv_rdy ;
   u16 tx_start_ptr ;
   u32 tx_mask ;
   u32 tx_wrap_mask ;
   u32 rx_mask ;
   u32 rx_wrap_mask ;
   u32 tx_rollover_ind ;
   u32 rx_rollover_ind ;
   u32 evt_rollover_ind ;
   u8 ring_flag_sop ;
   u8 ring_flag_eop ;
   u8 ring_flag_xs_sop ;
   u8 ring_flag_xs_eop ;
   u32 ring_tx_start_ptr ;
   u8 pfu_enabled ;
   u8 sleep_cookie ;
   u16 fw_dump_ctrl ;
   u16 fw_dump_start ;
   u16 fw_dump_end ;
};

#line 170  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/pcie.h"
struct mwifiex_pcie_device {
   char const *firmware ;
   struct mwifiex_pcie_card_reg const *reg ;
   u16 blksz_fw_dl ;
   u16 tx_buf_size ;
   bool can_dump_fw ;
   bool can_ext_scan ;
};

#line 250  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/pcie.h"
struct pcie_service_card {
   struct pci_dev *dev ;
   struct mwifiex_adapter *adapter ;
   struct mwifiex_pcie_device pcie ;
   u8 txbd_flush ;
   u32 txbd_wrptr ;
   u32 txbd_rdptr ;
   u32 txbd_ring_size ;
   u8 *txbd_ring_vbase ;
   dma_addr_t txbd_ring_pbase ;
   void *txbd_ring[32U] ;
   struct sk_buff *tx_buf_list[32U] ;
   u32 rxbd_wrptr ;
   u32 rxbd_rdptr ;
   u32 rxbd_ring_size ;
   u8 *rxbd_ring_vbase ;
   dma_addr_t rxbd_ring_pbase ;
   void *rxbd_ring[32U] ;
   struct sk_buff *rx_buf_list[32U] ;
   u32 evtbd_wrptr ;
   u32 evtbd_rdptr ;
   u32 evtbd_ring_size ;
   u8 *evtbd_ring_vbase ;
   dma_addr_t evtbd_ring_pbase ;
   void *evtbd_ring[8U] ;
   struct sk_buff *evt_buf_list[8U] ;
   struct sk_buff *cmd_buf ;
   struct sk_buff *cmdrsp_buf ;
   u8 *sleep_cookie_vbase ;
   dma_addr_t sleep_cookie_pbase ;
   void *pci_mmap ;
   void *pci_mmap1 ;
};

#line 35  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct rx_packet_hdr {
   struct ethhdr eth803_hdr ;
   struct rfc_1042_hdr rfc1042_hdr ;
};

#line 616  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct uap_txpd {
   u8 bss_type ;
   u8 bss_num ;
   __le16 tx_pkt_length ;
   __le16 tx_pkt_offset ;
   __le16 tx_pkt_type ;
   __le32 tx_control ;
   u8 priority ;
   u8 flags ;
   u8 pkt_delay_2ms ;
   u8 reserved1[2U] ;
   u8 tx_token_id ;
   u8 reserved[2U] ;
};

#line 631  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct uap_rxpd {
   u8 bss_type ;
   u8 bss_num ;
   __le16 rx_pkt_length ;
   __le16 rx_pkt_offset ;
   __le16 rx_pkt_type ;
   __le16 seq_num ;
   u8 priority ;
   u8 rx_rate ;
   s8 snr ;
   s8 nf ;
   u8 ht_info ;
   u8 reserved[3U] ;
   u8 flags ;
};

#line 1578  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct mwifiex_ie_types_oper_mode_ntf {
   struct mwifiex_ie_types_header header ;
   u8 oper_mode ;
};

#line 1583  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct mwifiex_ie_types_vht_oper {
   struct mwifiex_ie_types_header header ;
   u8 chan_width ;
   u8 chan_center_freq_1 ;
   u8 chan_center_freq_2 ;
   __le16 basic_mcs_map ;
};

#line 117  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/idr.h"
union __anonunion___u_7557 {
   struct idr_layer *__val ;
   char __c[1U] ;
};

#line 120  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/idr.h"
union __anonunion___u_7559 {
   struct idr_layer *__val ;
   char __c[1U] ;
};

#line 1291  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct tx_status_event {
   u8 packet_type ;
   u8 tx_token_id ;
   u8 status ;
};

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/types.h"
typedef __u16 __sum16;

#line 106  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ipv6.h"
struct ipv6hdr {
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) priority : 4 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) version : 4 ;
   __u8 flow_lbl[3U] ;
   __be16 payload_len ;
   __u8 nexthdr ;
   __u8 hop_limit ;
   struct in6_addr saddr ;
   struct in6_addr daddr ;
};

#line 3470  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct icmpv6_echo {
   __be16 identifier ;
   __be16 sequence ;
};

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/icmpv6.h"
struct icmpv6_nd_advt {
   __u32 __attribute__((__FRAMA_C_BITFIELD_SIZE__(5))) reserved : 5 ;
   __u32 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) override : 1 ;
   __u32 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) solicited : 1 ;
   __u32 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) router : 1 ;
   __u32 __attribute__((__FRAMA_C_BITFIELD_SIZE__(24))) reserved2 : 24 ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/icmpv6.h"
struct icmpv6_nd_ra {
   __u8 hop_limit ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))) reserved : 3 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) router_pref : 2 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) home_agent : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) other : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) managed : 1 ;
   __be16 rt_lifetime ;
};

#line 61  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/icmpv6.h"
union __anonunion_icmp6_dataun_8460 {
   __be32 un_data32[1U] ;
   __be16 un_data16[2U] ;
   __u8 un_data8[4U] ;
   struct icmpv6_echo u_echo ;
   struct icmpv6_nd_advt u_nd_advt ;
   struct icmpv6_nd_ra u_nd_ra ;
};

#line 61  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/icmpv6.h"
struct icmp6hdr {
   __u8 icmp6_type ;
   __u8 icmp6_code ;
   __sum16 icmp6_cksum ;
   union __anonunion_icmp6_dataun_8460 icmp6_dataun ;
};

#line 127  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if_arp.h"
struct arphdr {
   __be16 ar_hrd ;
   __be16 ar_pro ;
   unsigned char ar_hln ;
   unsigned char ar_pln ;
   __be16 ar_op ;
};

#line 221  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/decl.h"
struct mwifiex_arp_eth_header {
   struct arphdr hdr ;
   u8 ar_sha[6U] ;
   u8 ar_sip[4U] ;
   u8 ar_tha[6U] ;
   u8 ar_tip[4U] ;
};

#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/preempt.h"
typedef int pao_T__;

#line 191  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct netdev_hw_addr {
   struct list_head list ;
   unsigned char addr[32U] ;
   unsigned char type ;
   bool global_use ;
   int sync_cnt ;
   int refcount ;
   int synced ;
   struct callback_head callback_head ;
};

#line 2600  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/nl80211.h"
enum nl80211_channel_type {
    NL80211_CHAN_NO_HT = 0,
    NL80211_CHAN_HT20 = 1,
    NL80211_CHAN_HT40MINUS = 2,
    NL80211_CHAN_HT40PLUS = 3
};

#line 366  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/cfg80211.h"
struct key_params {
   u8 const *key ;
   u8 const *seq ;
   int key_len ;
   int seq_len ;
   u32 cipher ;
};

#line 126  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/ioctl.h"
struct mwifiex_ds_get_stats {
   u32 mcast_tx_frame ;
   u32 failed ;
   u32 retry ;
   u32 multi_retry ;
   u32 frame_dup ;
   u32 rts_success ;
   u32 rts_failure ;
   u32 ack_failure ;
   u32 rx_frag ;
   u32 mcast_rx_frame ;
   u32 fcs_error ;
   u32 tx_frame ;
   u32 wep_icv_error[4U] ;
   u32 bcn_rcv_cnt ;
   u32 bcn_miss_cnt ;
};

#line 144  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/ioctl.h"
struct mwifiex_ver_ext {
   u32 version_str_sel ;
   char version_str[128U] ;
};

#line 151  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/ioctl.h"
struct mwifiex_bss_info {
   u32 bss_mode ;
   struct cfg80211_ssid ssid ;
   u32 bss_chan ;
   u8 country_code[3U] ;
   u32 media_connected ;
   u32 max_power_level ;
   u32 min_power_level ;
   u32 adhoc_state ;
   int bcn_nf_last ;
   u32 wep_status ;
   u32 is_hs_configured ;
   u32 is_deep_sleep ;
   u8 bssid[6U] ;
};

#line 256  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/ioctl.h"
struct mwifiex_power_cfg {
   u32 is_power_auto ;
   u32 power_level ;
};

#line 351  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/ioctl.h"
struct mwifiex_ds_misc_gen_ie {
   u32 type ;
   u32 len ;
   u8 ie_data[256U] ;
};

#line 1204  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct mwifiex_power_group {
   u8 modulation_class ;
   u8 first_rate_code ;
   u8 last_rate_code ;
   s8 power_step ;
   s8 power_min ;
   s8 power_max ;
   u8 ht_bandwidth ;
   u8 reserved ;
};

#line 151  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_ioctl.c"
union __anonunion___u_9104 {
   struct cfg80211_bss_ies const *__val ;
   char __c[1U] ;
};

#line 1054  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_ioctl.c"
union __anonunion_ver_9106 {
   __le32 l ;
   u8 c[4U] ;
};

#line 1472  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct mwifiex_ie_types_sta_info {
   struct mwifiex_ie_types_header header ;
   u8 mac[6U] ;
   u8 power_mfg_status ;
   s8 rssi ;
};

#line 777  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_cmdresp.c"
union reg {
   struct host_cmd_ds_mac_reg_access *mac ;
   struct host_cmd_ds_bbp_reg_access *bbp ;
   struct host_cmd_ds_rf_reg_access *rf ;
   struct host_cmd_ds_pmic_reg_access *pmic ;
   struct host_cmd_ds_802_11_eeprom_access *eeprom ;
};

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/workqueue.h"
enum ldv_11874 {
    WORK_STRUCT_PENDING_BIT_0 = 0,
    WORK_STRUCT_DELAYED_BIT_0 = 1,
    WORK_STRUCT_PWQ_BIT_0 = 2,
    WORK_STRUCT_LINKED_BIT_0 = 3,
    WORK_STRUCT_STATIC_BIT_0 = 4,
    WORK_STRUCT_COLOR_SHIFT_0 = 5,
    WORK_STRUCT_COLOR_BITS_0 = 4,
    WORK_STRUCT_PENDING_0 = 1,
    WORK_STRUCT_DELAYED_0 = 2,
    WORK_STRUCT_PWQ_0 = 4,
    WORK_STRUCT_LINKED_0 = 8,
    WORK_STRUCT_STATIC_0 = 16,
    WORK_NR_COLORS_0 = 15,
    WORK_NO_COLOR_0 = 15,
    WORK_CPU_UNBOUND_0 = 8192,
    WORK_STRUCT_FLAG_BITS_0 = 9,
    WORK_OFFQ_FLAG_BASE_0 = 5,
    __WORK_OFFQ_CANCELING_0 = 5,
    WORK_OFFQ_CANCELING_0 = 32,
    WORK_OFFQ_FLAG_BITS_0 = 1,
    WORK_OFFQ_POOL_SHIFT_0 = 6,
    WORK_OFFQ_LEFT_0 = 58,
    WORK_OFFQ_POOL_BITS_0 = 31,
    WORK_OFFQ_POOL_NONE_0 = 2147483647,
    WORK_STRUCT_FLAG_MASK_0 = 511,
    WORK_STRUCT_WQ_DATA_MASK_0 = -512,
    WORK_STRUCT_NO_POOL_0 = 137438953408,
    WORK_BUSY_PENDING_0 = 1,
    WORK_BUSY_RUNNING_0 = 2,
    WORKER_DESC_LEN_0 = 24
};

#line 2592  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/nl80211.h"
enum nl80211_ac {
    NL80211_AC_VO = 0,
    NL80211_AC_VI = 1,
    NL80211_AC_BE = 2,
    NL80211_AC_BK = 3,
    NL80211_NUM_ACS = 4
};

#line 3559 
enum nl80211_txrate_gi {
    NL80211_TXRATE_DEFAULT_GI = 0,
    NL80211_TXRATE_FORCE_SGI = 1,
    NL80211_TXRATE_FORCE_LGI = 2
};

#line 3596 
enum nl80211_tx_power_setting {
    NL80211_TX_POWER_AUTOMATIC = 0,
    NL80211_TX_POWER_LIMITED = 1,
    NL80211_TX_POWER_FIXED = 2
};

#line 3968 
enum nl80211_coalesce_condition {
    NL80211_COALESCE_CONDITION_MATCH = 0,
    NL80211_COALESCE_CONDITION_NO_MATCH = 1
};

#line 4141 
enum nl80211_crit_proto_id {
    NL80211_CRIT_PROTO_UNSPEC = 0,
    NL80211_CRIT_PROTO_DHCP = 1,
    NL80211_CRIT_PROTO_EAPOL = 2,
    NL80211_CRIT_PROTO_APIPA = 3,
    NUM_NL80211_CRIT_PROTO = 4
};

#line 689  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ieee80211.h"
struct ieee80211_channel_sw_ie {
   u8 mode ;
   u8 new_ch_num ;
   u8 count ;
};

#line 193  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/cfg80211.h"
enum ieee80211_bss_type {
    IEEE80211_BSS_TYPE_ESS = 0,
    IEEE80211_BSS_TYPE_PBSS = 1,
    IEEE80211_BSS_TYPE_IBSS = 2,
    IEEE80211_BSS_TYPE_MBSS = 3,
    IEEE80211_BSS_TYPE_ANY = 4
};

#line 201 
enum ieee80211_privacy {
    IEEE80211_PRIVACY_ON = 0,
    IEEE80211_PRIVACY_OFF = 1,
    IEEE80211_PRIVACY_ANY = 2
};

#line 561  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/cfg80211.h"
struct survey_info {
   struct ieee80211_channel *channel ;
   u64 time ;
   u64 time_busy ;
   u64 time_ext_busy ;
   u64 time_rx ;
   u64 time_tx ;
   u64 time_scan ;
   u32 filled ;
   s8 noise ;
};

#line 733  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/cfg80211.h"
struct cfg80211_csa_settings {
   struct cfg80211_chan_def chandef ;
   struct cfg80211_beacon_data beacon_csa ;
   u16 const *counter_offsets_beacon ;
   u16 const *counter_offsets_presp ;
   unsigned int n_counter_offsets_beacon ;
   unsigned int n_counter_offsets_presp ;
   struct cfg80211_beacon_data beacon_after ;
   bool radar_required ;
   bool block_tx ;
   u8 count ;
};

#line 841  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/cfg80211.h"
struct station_del_parameters {
   u8 const *mac ;
   u8 subtype ;
   u16 reason_code ;
};

#line 1136  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/cfg80211.h"
struct mpath_info {
   u32 filled ;
   u32 frame_qlen ;
   u32 sn ;
   u32 metric ;
   u32 exptime ;
   u32 discovery_timeout ;
   u8 discovery_retries ;
   u8 flags ;
   int generation ;
};

#line 1195  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/cfg80211.h"
struct bss_parameters {
   int use_cts_prot ;
   int use_short_preamble ;
   int use_short_slot_time ;
   u8 const *basic_rates ;
   u8 basic_rates_len ;
   int ap_isolate ;
   int ht_opmode ;
   s8 p2p_ctwindow ;
   s8 p2p_opp_ps ;
};

#line 1226  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/cfg80211.h"
struct mesh_config {
   u16 dot11MeshRetryTimeout ;
   u16 dot11MeshConfirmTimeout ;
   u16 dot11MeshHoldingTimeout ;
   u16 dot11MeshMaxPeerLinks ;
   u8 dot11MeshMaxRetries ;
   u8 dot11MeshTTL ;
   u8 element_ttl ;
   bool auto_open_plinks ;
   u32 dot11MeshNbrOffsetMaxNeighbor ;
   u8 dot11MeshHWMPmaxPREQretries ;
   u32 path_refresh_time ;
   u16 min_discovery_timeout ;
   u32 dot11MeshHWMPactivePathTimeout ;
   u16 dot11MeshHWMPpreqMinInterval ;
   u16 dot11MeshHWMPperrMinInterval ;
   u16 dot11MeshHWMPnetDiameterTraversalTime ;
   u8 dot11MeshHWMPRootMode ;
   u16 dot11MeshHWMPRannInterval ;
   bool dot11MeshGateAnnouncementProtocol ;
   bool dot11MeshForwarding ;
   s32 rssi_threshold ;
   u16 ht_opmode ;
   u32 dot11MeshHWMPactivePathToRootTimeout ;
   u16 dot11MeshHWMProotInterval ;
   u16 dot11MeshHWMPconfirmationInterval ;
   enum nl80211_mesh_power_mode power_mode ;
   u16 dot11MeshAwakeWindowDuration ;
   u32 plink_timeout ;
};

#line 1327  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/cfg80211.h"
struct mesh_setup {
   struct cfg80211_chan_def chandef ;
   u8 const *mesh_id ;
   u8 mesh_id_len ;
   u8 sync_method ;
   u8 path_sel_proto ;
   u8 path_metric ;
   u8 auth_id ;
   u8 const *ie ;
   u8 ie_len ;
   bool is_authenticated ;
   bool is_secure ;
   bool user_mpm ;
   u8 dtim_period ;
   u16 beacon_interval ;
   int mcast_rate[3U] ;
   u32 basic_rates ;
};

#line 1367  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/cfg80211.h"
struct ocb_setup {
   struct cfg80211_chan_def chandef ;
};

#line 1377  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/cfg80211.h"
struct ieee80211_txq_params {
   enum nl80211_ac ac ;
   u16 txop ;
   u16 cwmin ;
   u16 cwmax ;
   u8 aifs ;
};

#line 1648  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/cfg80211.h"
struct cfg80211_auth_request {
   struct cfg80211_bss *bss ;
   u8 const *ie ;
   size_t ie_len ;
   enum nl80211_auth_type auth_type ;
   u8 const *key ;
   u8 key_len ;
   u8 key_idx ;
   u8 const *sae_data ;
   size_t sae_data_len ;
};

#line 1684  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/cfg80211.h"
struct cfg80211_assoc_request {
   struct cfg80211_bss *bss ;
   u8 const *ie ;
   u8 const *prev_bssid ;
   size_t ie_len ;
   struct cfg80211_crypto_settings crypto ;
   bool use_mfp ;
   u32 flags ;
   struct ieee80211_ht_cap ht_capa ;
   struct ieee80211_ht_cap ht_capa_mask ;
   struct ieee80211_vht_cap vht_capa ;
   struct ieee80211_vht_cap vht_capa_mask ;
};

#line 1724  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/cfg80211.h"
struct cfg80211_deauth_request {
   u8 const *bssid ;
   u8 const *ie ;
   size_t ie_len ;
   u16 reason_code ;
   bool local_state_change ;
};

#line 1745  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/cfg80211.h"
struct cfg80211_disassoc_request {
   struct cfg80211_bss *bss ;
   u8 const *ie ;
   size_t ie_len ;
   u16 reason_code ;
   bool local_state_change ;
};

#line 1882  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/cfg80211.h"
struct __anonstruct_control_10324 {
   u32 legacy ;
   u8 ht_mcs[10U] ;
   u16 vht_mcs[8U] ;
   enum nl80211_txrate_gi gi ;
};

#line 1882  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/cfg80211.h"
struct cfg80211_bitrate_mask {
   struct __anonstruct_control_10324 control[3U] ;
};

#line 1903  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/cfg80211.h"
struct cfg80211_pmksa {
   u8 const *bssid ;
   u8 const *pmkid ;
};

#line 1996  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/cfg80211.h"
struct cfg80211_coalesce_rules {
   int delay ;
   enum nl80211_coalesce_condition condition ;
   struct cfg80211_pkt_pattern *patterns ;
   int n_patterns ;
};

#line 2013  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/cfg80211.h"
struct cfg80211_coalesce {
   struct cfg80211_coalesce_rules *rules ;
   int n_rules ;
};

#line 2086  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/cfg80211.h"
struct cfg80211_gtk_rekey_data {
   u8 const *kek ;
   u8 const *kck ;
   u8 const *replay_ctr ;
};

#line 2096  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/cfg80211.h"
struct cfg80211_update_ft_ies_params {
   u16 md ;
   u8 const *ie ;
   size_t ie_len ;
};

#line 2111  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/cfg80211.h"
struct cfg80211_mgmt_tx_params {
   struct ieee80211_channel *chan ;
   bool offchan ;
   unsigned int wait ;
   u8 const *buf ;
   size_t len ;
   bool no_cck ;
   bool dont_wait_for_ack ;
   int n_csa_offsets ;
   u16 const *csa_offsets ;
};

#line 2182  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/cfg80211.h"
struct cfg80211_ops {
   int (*suspend)(struct wiphy *, struct cfg80211_wowlan *) ;
   int (*resume)(struct wiphy *) ;
   void (*set_wakeup)(struct wiphy *, bool ) ;
   struct wireless_dev *(*add_virtual_intf)(struct wiphy *, char const *, unsigned char , enum nl80211_iftype , u32 *, struct vif_params *) ;
   int (*del_virtual_intf)(struct wiphy *, struct wireless_dev *) ;
   int (*change_virtual_intf)(struct wiphy *, struct net_device *, enum nl80211_iftype , u32 *, struct vif_params *) ;
   int (*add_key)(struct wiphy *, struct net_device *, u8 , bool , u8 const *, struct key_params *) ;
   int (*get_key)(struct wiphy *, struct net_device *, u8 , bool , u8 const *, void *, void (*)(void *, struct key_params *)) ;
   int (*del_key)(struct wiphy *, struct net_device *, u8 , bool , u8 const *) ;
   int (*set_default_key)(struct wiphy *, struct net_device *, u8 , bool , bool ) ;
   int (*set_default_mgmt_key)(struct wiphy *, struct net_device *, u8 ) ;
   int (*start_ap)(struct wiphy *, struct net_device *, struct cfg80211_ap_settings *) ;
   int (*change_beacon)(struct wiphy *, struct net_device *, struct cfg80211_beacon_data *) ;
   int (*stop_ap)(struct wiphy *, struct net_device *) ;
   int (*add_station)(struct wiphy *, struct net_device *, u8 const *, struct station_parameters *) ;
   int (*del_station)(struct wiphy *, struct net_device *, struct station_del_parameters *) ;
   int (*change_station)(struct wiphy *, struct net_device *, u8 const *, struct station_parameters *) ;
   int (*get_station)(struct wiphy *, struct net_device *, u8 const *, struct station_info *) ;
   int (*dump_station)(struct wiphy *, struct net_device *, int , u8 *, struct station_info *) ;
   int (*add_mpath)(struct wiphy *, struct net_device *, u8 const *, u8 const *) ;
   int (*del_mpath)(struct wiphy *, struct net_device *, u8 const *) ;
   int (*change_mpath)(struct wiphy *, struct net_device *, u8 const *, u8 const *) ;
   int (*get_mpath)(struct wiphy *, struct net_device *, u8 *, u8 *, struct mpath_info *) ;
   int (*dump_mpath)(struct wiphy *, struct net_device *, int , u8 *, u8 *, struct mpath_info *) ;
   int (*get_mpp)(struct wiphy *, struct net_device *, u8 *, u8 *, struct mpath_info *) ;
   int (*dump_mpp)(struct wiphy *, struct net_device *, int , u8 *, u8 *, struct mpath_info *) ;
   int (*get_mesh_config)(struct wiphy *, struct net_device *, struct mesh_config *) ;
   int (*update_mesh_config)(struct wiphy *, struct net_device *, u32 , struct mesh_config const *) ;
   int (*join_mesh)(struct wiphy *, struct net_device *, struct mesh_config const *, struct mesh_setup const *) ;
   int (*leave_mesh)(struct wiphy *, struct net_device *) ;
   int (*join_ocb)(struct wiphy *, struct net_device *, struct ocb_setup *) ;
   int (*leave_ocb)(struct wiphy *, struct net_device *) ;
   int (*change_bss)(struct wiphy *, struct net_device *, struct bss_parameters *) ;
   int (*set_txq_params)(struct wiphy *, struct net_device *, struct ieee80211_txq_params *) ;
   int (*libertas_set_mesh_channel)(struct wiphy *, struct net_device *, struct ieee80211_channel *) ;
   int (*set_monitor_channel)(struct wiphy *, struct cfg80211_chan_def *) ;
   int (*scan)(struct wiphy *, struct cfg80211_scan_request *) ;
   int (*auth)(struct wiphy *, struct net_device *, struct cfg80211_auth_request *) ;
   int (*assoc)(struct wiphy *, struct net_device *, struct cfg80211_assoc_request *) ;
   int (*deauth)(struct wiphy *, struct net_device *, struct cfg80211_deauth_request *) ;
   int (*disassoc)(struct wiphy *, struct net_device *, struct cfg80211_disassoc_request *) ;
   int (*connect)(struct wiphy *, struct net_device *, struct cfg80211_connect_params *) ;
   int (*disconnect)(struct wiphy *, struct net_device *, u16 ) ;
   int (*join_ibss)(struct wiphy *, struct net_device *, struct cfg80211_ibss_params *) ;
   int (*leave_ibss)(struct wiphy *, struct net_device *) ;
   int (*set_mcast_rate)(struct wiphy *, struct net_device *, int *) ;
   int (*set_wiphy_params)(struct wiphy *, u32 ) ;
   int (*set_tx_power)(struct wiphy *, struct wireless_dev *, enum nl80211_tx_power_setting , int ) ;
   int (*get_tx_power)(struct wiphy *, struct wireless_dev *, int *) ;
   int (*set_wds_peer)(struct wiphy *, struct net_device *, u8 const *) ;
   void (*rfkill_poll)(struct wiphy *) ;
   int (*testmode_cmd)(struct wiphy *, struct wireless_dev *, void *, int ) ;
   int (*testmode_dump)(struct wiphy *, struct sk_buff *, struct netlink_callback *, void *, int ) ;
   int (*set_bitrate_mask)(struct wiphy *, struct net_device *, u8 const *, struct cfg80211_bitrate_mask const *) ;
   int (*dump_survey)(struct wiphy *, struct net_device *, int , struct survey_info *) ;
   int (*set_pmksa)(struct wiphy *, struct net_device *, struct cfg80211_pmksa *) ;
   int (*del_pmksa)(struct wiphy *, struct net_device *, struct cfg80211_pmksa *) ;
   int (*flush_pmksa)(struct wiphy *, struct net_device *) ;
   int (*remain_on_channel)(struct wiphy *, struct wireless_dev *, struct ieee80211_channel *, unsigned int , u64 *) ;
   int (*cancel_remain_on_channel)(struct wiphy *, struct wireless_dev *, u64 ) ;
   int (*mgmt_tx)(struct wiphy *, struct wireless_dev *, struct cfg80211_mgmt_tx_params *, u64 *) ;
   int (*mgmt_tx_cancel_wait)(struct wiphy *, struct wireless_dev *, u64 ) ;
   int (*set_power_mgmt)(struct wiphy *, struct net_device *, bool , int ) ;
   int (*set_cqm_rssi_config)(struct wiphy *, struct net_device *, s32 , u32 ) ;
   int (*set_cqm_txe_config)(struct wiphy *, struct net_device *, u32 , u32 , u32 ) ;
   void (*mgmt_frame_register)(struct wiphy *, struct wireless_dev *, u16 , bool ) ;
   int (*set_antenna)(struct wiphy *, u32 , u32 ) ;
   int (*get_antenna)(struct wiphy *, u32 *, u32 *) ;
   int (*sched_scan_start)(struct wiphy *, struct net_device *, struct cfg80211_sched_scan_request *) ;
   int (*sched_scan_stop)(struct wiphy *, struct net_device *) ;
   int (*set_rekey_data)(struct wiphy *, struct net_device *, struct cfg80211_gtk_rekey_data *) ;
   int (*tdls_mgmt)(struct wiphy *, struct net_device *, u8 const *, u8 , u8 , u16 , u32 , bool , u8 const *, size_t ) ;
   int (*tdls_oper)(struct wiphy *, struct net_device *, u8 const *, enum nl80211_tdls_operation ) ;
   int (*probe_client)(struct wiphy *, struct net_device *, u8 const *, u64 *) ;
   int (*set_noack_map)(struct wiphy *, struct net_device *, u16 ) ;
   int (*get_channel)(struct wiphy *, struct wireless_dev *, struct cfg80211_chan_def *) ;
   int (*start_p2p_device)(struct wiphy *, struct wireless_dev *) ;
   void (*stop_p2p_device)(struct wiphy *, struct wireless_dev *) ;
   int (*set_mac_acl)(struct wiphy *, struct net_device *, struct cfg80211_acl_data const *) ;
   int (*start_radar_detection)(struct wiphy *, struct net_device *, struct cfg80211_chan_def *, u32 ) ;
   int (*update_ft_ies)(struct wiphy *, struct net_device *, struct cfg80211_update_ft_ies_params *) ;
   int (*crit_proto_start)(struct wiphy *, struct wireless_dev *, enum nl80211_crit_proto_id , u16 ) ;
   void (*crit_proto_stop)(struct wiphy *, struct wireless_dev *) ;
   int (*set_coalesce)(struct wiphy *, struct cfg80211_coalesce *) ;
   int (*channel_switch)(struct wiphy *, struct net_device *, struct cfg80211_csa_settings *) ;
   int (*set_qos_map)(struct wiphy *, struct net_device *, struct cfg80211_qos_map *) ;
   int (*set_ap_chanwidth)(struct wiphy *, struct net_device *, struct cfg80211_chan_def *) ;
   int (*add_tx_ts)(struct wiphy *, struct net_device *, u8 , u8 const *, u8 , u16 ) ;
   int (*del_tx_ts)(struct wiphy *, struct net_device *, u8 , u8 const *) ;
   int (*tdls_channel_switch)(struct wiphy *, struct net_device *, u8 const *, u8 , struct cfg80211_chan_def *) ;
   void (*tdls_cancel_channel_switch)(struct wiphy *, struct net_device *, u8 const *) ;
};

#line 260  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/decl.h"
struct mwifiex_radar_params {
   struct cfg80211_chan_def *chandef ;
   u32 cac_time_ms ;
};

#line 1028  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ieee80211.h"
struct ieee80211_vendor_ie {
   u8 element_id ;
   u8 len ;
   u8 oui[3U] ;
   u8 oui_type ;
};

#line 1603  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct mwifiex_ie_types_2040bssco {
   struct mwifiex_ie_types_header header ;
   u8 bss_co_2040 ;
};

#line 2661  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/nl80211.h"
enum nl80211_key_type {
    NL80211_KEYTYPE_GROUP = 0,
    NL80211_KEYTYPE_PAIRWISE = 1,
    NL80211_KEYTYPE_PEERKEY = 2,
    NUM_NL80211_KEYTYPES = 3
};

#line 3590 
enum nl80211_cqm_rssi_threshold_event {
    NL80211_CQM_RSSI_THRESHOLD_EVENT_LOW = 0,
    NL80211_CQM_RSSI_THRESHOLD_EVENT_HIGH = 1,
    NL80211_CQM_RSSI_BEACON_LOSS_EVENT = 2
};

#line 1791  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct mwifiex_ie_types_btcoex_scan_time {
   struct mwifiex_ie_types_header header ;
   u8 coex_scan ;
   u8 reserved ;
   u16 min_scan_time ;
   u16 max_scan_time ;
};

#line 1799  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct mwifiex_ie_types_btcoex_aggr_win_size {
   struct mwifiex_ie_types_header header ;
   u8 coex_win_size ;
   u8 tx_win_size ;
   u8 rx_win_size ;
   u8 reserved ;
};

#line 1929  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
union __anonunion_u_11650 {
   __le16 reason_code ;
   __le16 reserved ;
};

#line 1929  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct mwifiex_tdls_generic_event {
   __le16 type ;
   u8 peer_mac[6U] ;
   union __anonunion_u_11650 u ;
};

#line 4124  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/nl80211.h"
enum nl80211_radar_event {
    NL80211_RADAR_DETECTED = 0,
    NL80211_RADAR_CAC_FINISHED = 1,
    NL80211_RADAR_CAC_ABORTED = 2,
    NL80211_RADAR_NOP_FINISHED = 3
};

#line 1262  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct host_cmd_ds_chan_rpt_event {
   __le32 result ;
   __le64 start_tsf ;
   __le32 duration ;
   u8 tlvbuf[0U] ;
};

#line 1484  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct mwifiex_ie_types_pwr_capability {
   struct mwifiex_ie_types_header header ;
   s8 min_pwr ;
   s8 max_pwr ;
};

#line 1490  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct mwifiex_ie_types_local_pwr_constraint {
   struct mwifiex_ie_types_header header ;
   u8 chan ;
   u8 constraint ;
};

#line 1891  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct mwifiex_radar_det_event {
   __le32 detect_count ;
   u8 reg_domain ;
   u8 det_type ;
   __le16 pw_chirp_type ;
   u8 pw_chirp_idx ;
   u8 pw_value ;
   u8 pri_radar_type ;
   u8 pri_bincnt ;
   u8 bin_counter[7U] ;
   u8 num_dfs_records ;
   u8 dfs_record_hdr[10U][8U] ;
   __le32 passed ;
};

#line 1910  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct meas_rpt_map {
   u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))) rssi : 3 ;
   u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) unmeasured : 1 ;
   u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) radar : 1 ;
   u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) unidentified_sig : 1 ;
   u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ofdm_preamble : 1 ;
   u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) bss : 1 ;
};

#line 1919  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/fw.h"
struct mwifiex_ie_types_chan_rpt_data {
   struct mwifiex_ie_types_header header ;
   struct meas_rpt_map map ;
};

#line 62  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memory.h"
struct ldv_list_element {
   void *data ;
   struct ldv_list_element *next ;
};

#line 26  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memlist.h"
typedef struct ldv_list_element *ldv_list_ptr;

#line 41  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.h"
struct device_private {
   void *driver_data ;
};

#line 54  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kthread.h"
struct kthread_work;

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kthread.h"
struct kthread_worker {
   spinlock_t lock ;
   struct list_head work_list ;
   struct task_struct *task ;
   struct kthread_work *current_work ;
};

#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kthread.h"
struct kthread_work {
   struct list_head node ;
   void (*func)(struct kthread_work *) ;
   struct kthread_worker *worker ;
};

#line 380  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/scatterlist.h"
struct dma_chan;

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spi/spi.h"
struct spi_master;

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spi/spi.h"
struct spi_device {
   struct device dev ;
   struct spi_master *master ;
   u32 max_speed_hz ;
   u8 chip_select ;
   u8 bits_per_word ;
   u16 mode ;
   int irq ;
   void *controller_state ;
   void *controller_data ;
   char modalias[32U] ;
   int cs_gpio ;
};

#line 151 
struct spi_message;

#line 152 
struct spi_transfer;

#line 205  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spi/spi.h"
struct spi_master {
   struct device dev ;
   struct list_head list ;
   s16 bus_num ;
   u16 num_chipselect ;
   u16 dma_alignment ;
   u16 mode_bits ;
   u32 bits_per_word_mask ;
   u32 min_speed_hz ;
   u32 max_speed_hz ;
   u16 flags ;
   spinlock_t bus_lock_spinlock ;
   struct mutex bus_lock_mutex ;
   bool bus_lock_flag ;
   int (*setup)(struct spi_device *) ;
   int (*transfer)(struct spi_device *, struct spi_message *) ;
   void (*cleanup)(struct spi_device *) ;
   bool (*can_dma)(struct spi_master *, struct spi_device *, struct spi_transfer *) ;
   bool queued ;
   struct kthread_worker kworker ;
   struct task_struct *kworker_task ;
   struct kthread_work pump_messages ;
   spinlock_t queue_lock ;
   struct list_head queue ;
   struct spi_message *cur_msg ;
   bool idling ;
   bool busy ;
   bool running ;
   bool rt ;
   bool auto_runtime_pm ;
   bool cur_msg_prepared ;
   bool cur_msg_mapped ;
   struct completion xfer_completion ;
   size_t max_dma_len ;
   int (*prepare_transfer_hardware)(struct spi_master *) ;
   int (*transfer_one_message)(struct spi_master *, struct spi_message *) ;
   int (*unprepare_transfer_hardware)(struct spi_master *) ;
   int (*prepare_message)(struct spi_master *, struct spi_message *) ;
   int (*unprepare_message)(struct spi_master *, struct spi_message *) ;
   void (*set_cs)(struct spi_device *, bool ) ;
   int (*transfer_one)(struct spi_master *, struct spi_device *, struct spi_transfer *) ;
   void (*handle_err)(struct spi_master *, struct spi_message *) ;
   int *cs_gpios ;
   struct dma_chan *dma_tx ;
   struct dma_chan *dma_rx ;
   void *dummy_rx ;
   void *dummy_tx ;
};

#line 506  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spi/spi.h"
struct spi_transfer {
   void const *tx_buf ;
   void *rx_buf ;
   unsigned int len ;
   dma_addr_t tx_dma ;
   dma_addr_t rx_dma ;
   struct sg_table tx_sg ;
   struct sg_table rx_sg ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) cs_change : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))) tx_nbits : 3 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))) rx_nbits : 3 ;
   u8 bits_per_word ;
   u16 delay_usecs ;
   u32 speed_hz ;
   struct list_head transfer_list ;
};

#line 630  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spi/spi.h"
struct spi_message {
   struct list_head transfers ;
   struct spi_device *spi ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_dma_mapped : 1 ;
   void (*complete)(void *) ;
   void *context ;
   unsigned int frame_length ;
   unsigned int actual_length ;
   int status ;
   struct list_head queue ;
   void *state ;
};

#line 21  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/thread.h"
typedef unsigned long pthread_t;

#line 22  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/thread.h"
union pthread_attr_t {
   char __size[56U] ;
   long __align ;
};

#line 29  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/thread.h"
typedef union pthread_attr_t pthread_attr_t;

#line 3835  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct ldv_struct_character_driver_scenario_11 {
   struct file_operations *arg0 ;
   int signal_pending ;
};

#line 19  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/emg/environment_model.c"
struct ldv_struct_timer_scenario_12 {
   struct timer_list *arg0 ;
   int signal_pending ;
};

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/string_64.h"
void *memcpy(void *, void const *, size_t);


#line 56 
void *memset(void *, int, size_t);


#line 1089  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
void _dev_info(struct device const *, char const * , ...);


#line 3535  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/cfg80211.h"
int ieee80211_frequency_to_channel(int);


#line 3775 
u8 const *cfg80211_find_ie(u8, u8 const *, int);


#line 3793 
u8 const *cfg80211_find_vendor_ie(unsigned int, u8, u8 const *, int);


#line 1019  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.h"
int mwifiex_send_cmd(struct mwifiex_private *priv, u16 cmd_no, u16 cmd_action, u32 cmd_oid, void *data_buf, bool sync);


#line 1074 
int mwifiex_uap_prepare_cmd(struct mwifiex_private *priv, unsigned short cmd_no, u16 cmd_action, u32 type, void *data_buf, void *cmd_buf);


#line 1149 
int mwifiex_set_secure_params(struct mwifiex_private *priv, struct mwifiex_uap_bss_param *bss_config, struct cfg80211_ap_settings *params);


#line 1152 
void mwifiex_set_ht_params(struct mwifiex_private *priv, struct mwifiex_uap_bss_param *bss_cfg, struct cfg80211_ap_settings *params);


#line 1155 
void mwifiex_set_vht_params(struct mwifiex_private *priv, struct mwifiex_uap_bss_param *bss_cfg, struct cfg80211_ap_settings *params);


#line 1158 
void mwifiex_set_tpc_params(struct mwifiex_private *priv, struct mwifiex_uap_bss_param *bss_cfg, struct cfg80211_ap_settings *params);


#line 1161 
void mwifiex_set_uap_rates(struct mwifiex_uap_bss_param *bss_cfg, struct cfg80211_ap_settings *params);


#line 1163 
void mwifiex_set_vht_width(struct mwifiex_private *priv, enum nl80211_chan_width width, bool ap_11ac_enable);


#line 1167 
void mwifiex_set_wmm_params(struct mwifiex_private *priv, struct mwifiex_uap_bss_param *bss_cfg, struct cfg80211_ap_settings *params);


#line 1423 
void mwifiex_set_sys_config_invalid_data(struct mwifiex_uap_bss_param *config);


#line 1429 
int mwifiex_del_mgmt_ies(struct mwifiex_private *priv);


#line 1431 
void mwifiex_uap_set_channel(struct mwifiex_private *priv, struct mwifiex_uap_bss_param *bss_cfg, struct cfg80211_chan_def chandef);


#line 1434 
int mwifiex_config_start_uap(struct mwifiex_private *priv, struct mwifiex_uap_bss_param *bss_cfg);


#line 1491 
int mwifiex_cmd_issue_chan_report_request(struct mwifiex_private *priv, struct host_cmd_ds_command *cmd, void *data_buf);


#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/uap_cmd.c"
int mwifiex_set_secure_params(struct mwifiex_private *priv, struct mwifiex_uap_bss_param *bss_config, struct cfg80211_ap_settings *params)
{
  int __retres;
  int i;
  struct mwifiex_wep_key wep_key;
  
#line 32 
  if (! params->privacy) {
    
#line 33 
    bss_config->protocol = (unsigned short)1U;
    
#line 34 
    bss_config->key_mgmt = (unsigned short)4U;
    
#line 35 
    bss_config->wpa_cfg.length = 0U;
    
#line 36 
    priv->sec_info.wep_enabled = (unsigned char)0U;
    
#line 37 
    priv->sec_info.wpa_enabled = (unsigned char)0U;
    
#line 38 
    priv->sec_info.wpa2_enabled = (unsigned char)0U;
    
#line 40 
    __retres = 0;
    
#line 40 
    goto return_label;
  }
  else ;
  
#line 43 
  switch ((unsigned int)params->auth_type) {
    case (unsigned int)0: 
#line 44 
    ;
    
#line 45 
    bss_config->auth_mode = (unsigned short)0U;
    
#line 46 
    goto ldv_61208;
    case (unsigned int)1: 
#line 47 
    ;
    
#line 48 
    bss_config->auth_mode = (unsigned short)1U;
    
#line 49 
    goto ldv_61208;
    case (unsigned int)3: 
#line 50 
    ;
    
#line 51 
    bss_config->auth_mode = (unsigned short)128U;
    
#line 52 
    goto ldv_61208;
    default: 
#line 53 
    ;
    
#line 54 
    bss_config->auth_mode = (unsigned short)255U;
    
#line 55 
    goto ldv_61208;
  }
  ldv_61208: 
#line 58 
  ;
  
#line 58 
  bss_config->key_mgmt_operation = (unsigned short)((unsigned int)bss_config->key_mgmt_operation | 3U);
  
#line 60 
  i = 0;
  
#line 60 
  goto ldv_61217;
  ldv_61216: 
#line 61 
  ;
  
#line 61 
  switch (params->crypto.akm_suites[i]) {
    case (u32)1027073: 
#line 62 
    ;
    
#line 63 
    if ((params->crypto.wpa_versions & 1U) != 0U) {
      
#line 65 
      bss_config->protocol = (unsigned short)8U;
      
#line 66 
      bss_config->key_mgmt = (unsigned short)1U;
    }
    else ;
    
#line 68 
    if ((params->crypto.wpa_versions & 2U) != 0U) {
      
#line 70 
      bss_config->protocol = (unsigned short)((unsigned int)bss_config->protocol | 32U);
      
#line 71 
      bss_config->key_mgmt = (unsigned short)1U;
    }
    else ;
    
#line 73 
    goto ldv_61213;
    case (u32)1027074: 
#line 74 
    ;
    
#line 75 
    if ((params->crypto.wpa_versions & 1U) != 0U) {
      
#line 77 
      bss_config->protocol = (unsigned short)8U;
      
#line 78 
      bss_config->key_mgmt = (unsigned short)2U;
    }
    else ;
    
#line 80 
    if ((params->crypto.wpa_versions & 2U) != 0U) {
      
#line 82 
      bss_config->protocol = (unsigned short)((unsigned int)bss_config->protocol | 32U);
      
#line 83 
      bss_config->key_mgmt = (unsigned short)2U;
    }
    else ;
    
#line 85 
    goto ldv_61213;
    default: 
#line 86 
    ;
    
#line 87 
    goto ldv_61213;
  }
  ldv_61213: 
#line 89 
  ;
  
#line 60 
  i += 1;
  ldv_61217: 
#line 61 
  ;
  
#line 60 
  if (params->crypto.n_akm_suites > i) 
#line 62 
                                       goto ldv_61216; else 
#line 65 
                                                            goto ldv_61218;
  ldv_61218: 
#line 66 
  ;
  
#line 90 
  i = 0;
  
#line 90 
  goto ldv_61226;
  ldv_61225: 
#line 91 
  ;
  
#line 91 
  switch (params->crypto.ciphers_pairwise[i]) {
    case (u32)1027073: 
#line 92 
    ;
    case (u32)1027077: 
#line 93 
    ;
    
#line 94 
    goto ldv_61221;
    case (u32)1027074: 
#line 95 
    ;
    
#line 96 
    if ((params->crypto.wpa_versions & 1U) != 0U) 
#line 97 
                                                  bss_config->wpa_cfg.pairwise_cipher_wpa = (unsigned char)((unsigned int)bss_config->wpa_cfg.pairwise_cipher_wpa | 4U); else ;
    
#line 99 
    if ((params->crypto.wpa_versions & 2U) != 0U) 
#line 100 
                                                  bss_config->wpa_cfg.pairwise_cipher_wpa2 = (unsigned char)((unsigned int)bss_config->wpa_cfg.pairwise_cipher_wpa2 | 4U); else ;
    
#line 102 
    goto ldv_61221;
    case (u32)1027076: 
#line 103 
    ;
    
#line 104 
    if ((params->crypto.wpa_versions & 1U) != 0U) 
#line 105 
                                                  bss_config->wpa_cfg.pairwise_cipher_wpa = (unsigned char)((unsigned int)bss_config->wpa_cfg.pairwise_cipher_wpa | 8U); else ;
    
#line 107 
    if ((params->crypto.wpa_versions & 2U) != 0U) 
#line 108 
                                                  bss_config->wpa_cfg.pairwise_cipher_wpa2 = (unsigned char)((unsigned int)bss_config->wpa_cfg.pairwise_cipher_wpa2 | 8U); else ;
    default: 
#line 110 
    ;
    
#line 111 
    goto ldv_61221;
  }
  ldv_61221: 
#line 113 
  ;
  
#line 90 
  i += 1;
  ldv_61226: 
#line 91 
  ;
  
#line 90 
  if (params->crypto.n_ciphers_pairwise > i) 
#line 92 
                                             goto ldv_61225; else 
#line 95 
                                                                  goto ldv_61227;
  ldv_61227: 
#line 96 
  ;
  
#line 115 
  switch (params->crypto.cipher_group) {
    case (u32)1027073: 
#line 116 
    ;
    case (u32)1027077: 
#line 117 
    ;
    
#line 118 
    if ((unsigned int)priv->sec_info.wep_enabled != 0U) {
      
#line 119 
      bss_config->protocol = (unsigned short)2U;
      
#line 120 
      bss_config->key_mgmt = (unsigned short)4U;
      
#line 121 
      bss_config->wpa_cfg.length = 0U;
      
#line 123 
      i = 0;
      
#line 123 
      goto ldv_61231;
      ldv_61230: 
#line 124 
      ;
      
#line 124 
      wep_key = priv->wep_key[i];
      
#line 125 
      bss_config->wep_cfg[i].key_index = (unsigned char)i;
      
#line 127 
      if ((int)priv->wep_key_curr_index == i) 
#line 128 
                                              bss_config->wep_cfg[i].is_default = (unsigned char)1U; else 
                                                                    
#line 130 
                                                                    bss_config->wep_cfg[i].is_default = (unsigned char)0U;
      
#line 132 
      bss_config->wep_cfg[i].length = (unsigned short)wep_key.key_length;
      
#line 134 
      memcpy((void *)(& bss_config->wep_cfg[i].key),(void const *)(& wep_key.key_material),(unsigned long)wep_key.key_length);
      
#line 123 
      i += 1;
      ldv_61231: 
#line 124 
      ;
      
#line 123 
      if (i <= 3) 
#line 125 
                  goto ldv_61230; else 
#line 128 
                                       goto ldv_61232;
      ldv_61232: 
#line 129 
      ;
    }
    else ;
    
#line 139 
    goto ldv_61233;
    case (u32)1027074: 
#line 140 
    ;
    
#line 141 
    bss_config->wpa_cfg.group_cipher = (unsigned char)4U;
    
#line 142 
    goto ldv_61233;
    case (u32)1027076: 
#line 143 
    ;
    
#line 144 
    bss_config->wpa_cfg.group_cipher = (unsigned char)8U;
    
#line 145 
    goto ldv_61233;
    default: 
#line 146 
    ;
    
#line 147 
    goto ldv_61233;
  }
  ldv_61233: 
#line 150 
  ;
  
#line 150 
  __retres = 0;
  return_label: 
#line 150 
                return __retres;
}


#line 157  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/uap_cmd.c"
void mwifiex_set_ht_params(struct mwifiex_private *priv, struct mwifiex_uap_bss_param *bss_cfg, struct cfg80211_ap_settings *params)
{
  u8 const *ht_ie;
  u16 cap_info;
  
#line 164 
  if (((unsigned long)(priv->adapter)->fw_cap_info & 2048UL) == 0UL) 
    
#line 165 
    goto return_label; else ;
  
#line 167 
  ht_ie = cfg80211_find_ie((unsigned char)45,params->beacon.tail,(int)params->beacon.tail_len);
  
#line 169 
  if (ht_ie != (u8 const *)0U) {
    
#line 170 
    memcpy((void *)(& bss_cfg->ht_cap),(void const *)(ht_ie + 2U),26UL);
    
#line 172 
    cap_info = bss_cfg->ht_cap.cap_info;
    
#line 173 
    memset((void *)(& bss_cfg->ht_cap.mcs),0,(unsigned long)(priv->adapter)->number_of_antenna);
    
#line 175 
    switch ((int)cap_info & 768) {
      case 256: 
#line 176 
      ;
      
#line 178 
      bss_cfg->ht_cap.mcs.rx_mask[0] = (unsigned char)255U;
      
#line 179 
      goto ldv_61245;
      case 512: 
#line 180 
      ;
      case 768: 
#line 181 
      ;
      
#line 183 
      bss_cfg->ht_cap.mcs.rx_mask[0] = (unsigned char)255U;
      
#line 184 
      bss_cfg->ht_cap.mcs.rx_mask[1] = (unsigned char)255U;
      
#line 185 
      goto ldv_61245;
      default: 
#line 186 
      ;
      
#line 187 
      if (((priv->adapter)->debug_mask & 536870912U) != 0U) {
        
#line 187 
        if ((priv->adapter)->dev != (struct device *)0) 
#line 187 
                                                        _dev_info((struct device const *)(priv->adapter)->dev,"Unsupported RX-STBC, default to 2x2\n"); else ;
      }
      else ;
      
#line 189 
      bss_cfg->ht_cap.mcs.rx_mask[0] = (unsigned char)255U;
      
#line 190 
      bss_cfg->ht_cap.mcs.rx_mask[1] = (unsigned char)255U;
      
#line 191 
      goto ldv_61245;
    }
    ldv_61245: 
#line 193 
    ;
    
#line 193 
    priv->ap_11n_enabled = (unsigned char)1U;
  }
  else {
    
#line 195 
    memset((void *)(& bss_cfg->ht_cap),0,26UL);
    
#line 196 
    bss_cfg->ht_cap.cap_info = (unsigned short)4364U;
    
#line 197 
    bss_cfg->ht_cap.ampdu_params_info = (unsigned char)3U;
  }
  return_label: 
#line 200 
                return;
}


#line 206  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/uap_cmd.c"
void mwifiex_set_vht_params(struct mwifiex_private *priv, struct mwifiex_uap_bss_param *bss_cfg, struct cfg80211_ap_settings *params)
{
  u8 const *vht_ie;
  
#line 212 
  vht_ie = cfg80211_find_ie((unsigned char)191,params->beacon.tail,(int)params->beacon.tail_len);
  
#line 214 
  if (vht_ie != (u8 const *)0U) {
    
#line 215 
    memcpy((void *)(& bss_cfg->vht_cap),(void const *)(vht_ie + 2U),12UL);
    
#line 217 
    priv->ap_11ac_enabled = (unsigned char)1U;
  }
  else 
#line 219 
       priv->ap_11ac_enabled = (unsigned char)0U;
  
#line 222 
  return;
}


#line 228  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/uap_cmd.c"
void mwifiex_set_tpc_params(struct mwifiex_private *priv, struct mwifiex_uap_bss_param *bss_cfg, struct cfg80211_ap_settings *params)
{
  u8 const *tpc_ie;
  
#line 234 
  tpc_ie = cfg80211_find_ie((unsigned char)34,params->beacon.tail,(int)params->beacon.tail_len);
  
#line 236 
  if (tpc_ie != (u8 const *)0U) 
#line 237 
                                bss_cfg->power_constraint = *(tpc_ie + 2U); else 
                                                                    
#line 239 
                                                                    bss_cfg->power_constraint = (unsigned char)0U;
  
#line 240 
  return;
}


#line 245  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/uap_cmd.c"
void mwifiex_set_vht_width(struct mwifiex_private *priv, enum nl80211_chan_width width, bool ap_11ac_enable)
{
  struct mwifiex_11ac_vht_cfg vht_cfg;
  
#line 249 
  struct mwifiex_adapter *adapter = priv->adapter;
  
#line 252 
  vht_cfg.band_config = (unsigned char)2U;
  
#line 253 
  vht_cfg.cap_info = adapter->hw_dot_11ac_dev_cap;
  
#line 255 
  if (! ap_11ac_enable) {
    
#line 256 
    vht_cfg.mcs_tx_set = 65535U;
    
#line 257 
    vht_cfg.mcs_rx_set = 65535U;
  }
  else {
    
#line 259 
    vht_cfg.mcs_tx_set = 65530U;
    
#line 260 
    vht_cfg.mcs_rx_set = 65530U;
  }
  
#line 263 
  vht_cfg.misc_config = (unsigned char)3U;
  
#line 265 
  if ((int)ap_11ac_enable != 0 && width > (unsigned int)NL80211_CHAN_WIDTH_40) 
    
#line 266 
    vht_cfg.misc_config = (unsigned char)((unsigned int)vht_cfg.misc_config | 4U); else ;
  
#line 268 
  mwifiex_send_cmd(priv,(unsigned short)274,(unsigned short)1,0U,(void *)(& vht_cfg),(_Bool)1);
  
#line 271 
  return;
}


#line 278  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/uap_cmd.c"
void mwifiex_set_uap_rates(struct mwifiex_uap_bss_param *bss_cfg, struct cfg80211_ap_settings *params)
{
  struct ieee_types_header *rate_ie;
  
#line 282 
  int var_offset = 36;
  
#line 283 
  u8 const *var_pos = params->beacon.head + var_offset;
  
#line 284 
  int len = (int)(params->beacon.head_len - (size_t)var_offset);
  
#line 285 
  u8 rate_len = (unsigned char)0U;
  
#line 287 
  rate_ie = (struct ieee_types_header *)cfg80211_find_ie((unsigned char)1,var_pos,len);
  
#line 288 
  if (rate_ie != (struct ieee_types_header *)0) {
    
#line 289 
    memcpy((void *)(& bss_cfg->rates),(void const *)(rate_ie + 1U),(unsigned long)rate_ie->len);
    
#line 290 
    rate_len = rate_ie->len;
  }
  else ;
  
#line 293 
  rate_ie = (struct ieee_types_header *)cfg80211_find_ie((unsigned char)50,params->beacon.tail,(int)params->beacon.tail_len);
  
#line 296 
  if (rate_ie != (struct ieee_types_header *)0) 
#line 297 
                                                memcpy((void *)(& bss_cfg->rates) + (int)rate_len,(void const *)(rate_ie + 1U),(unsigned long)rate_ie->len); else ;
  
#line 299 
  return;
}


#line 306  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/uap_cmd.c"
void mwifiex_set_sys_config_invalid_data(struct mwifiex_uap_bss_param *config)
{
  
#line 308 
  config->bcast_ssid_ctl = (unsigned char)127U;
  
#line 309 
  config->radio_ctl = (unsigned char)127U;
  
#line 310 
  config->dtim_period = (unsigned char)127U;
  
#line 311 
  config->beacon_period = (unsigned short)32767U;
  
#line 312 
  config->auth_mode = (unsigned short)127U;
  
#line 313 
  config->rts_threshold = (unsigned short)32767U;
  
#line 314 
  config->frag_threshold = (unsigned short)32767U;
  
#line 315 
  config->retry_limit = (unsigned char)127U;
  
#line 316 
  config->qos_info = (unsigned char)255U;
  
#line 317 
  return;
}


#line 324  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/uap_cmd.c"
static void mwifiex_uap_bss_wpa(u8 **tlv_buf, void *cmd_buf, u16 *param_size)
{
  struct host_cmd_tlv_pwk_cipher *pwk_cipher;
  struct host_cmd_tlv_gwk_cipher *gwk_cipher;
  struct host_cmd_tlv_passphrase *passphrase;
  struct host_cmd_tlv_akmp *tlv_akmp;
  
#line 330 
  struct mwifiex_uap_bss_param *bss_cfg = (struct mwifiex_uap_bss_param *)cmd_buf;
  
#line 331 
  u16 cmd_size = *param_size;
  
#line 332 
  u8 *tlv = *tlv_buf;
  
#line 334 
  tlv_akmp = (struct host_cmd_tlv_akmp *)tlv;
  
#line 335 
  tlv_akmp->header.type = (unsigned short)321U;
  
#line 336 
  tlv_akmp->header.len = (unsigned short)4U;
  
#line 338 
  tlv_akmp->key_mgmt_operation = bss_cfg->key_mgmt_operation;
  
#line 339 
  tlv_akmp->key_mgmt = bss_cfg->key_mgmt;
  
#line 340 
  cmd_size = (unsigned short)((unsigned int)cmd_size + 8U);
  
#line 341 
  tlv += 8U;
  
#line 343 
  if (((int)bss_cfg->wpa_cfg.pairwise_cipher_wpa & 12) != 0) {
    
#line 344 
    pwk_cipher = (struct host_cmd_tlv_pwk_cipher *)tlv;
    
#line 345 
    pwk_cipher->header.type = (unsigned short)401U;
    
#line 346 
    pwk_cipher->header.len = (unsigned short)4U;
    
#line 349 
    pwk_cipher->proto = (unsigned short)8U;
    
#line 350 
    pwk_cipher->cipher = bss_cfg->wpa_cfg.pairwise_cipher_wpa;
    
#line 351 
    cmd_size = (unsigned short)((unsigned int)cmd_size + 8U);
    
#line 352 
    tlv += 8U;
  }
  else ;
  
#line 355 
  if (((int)bss_cfg->wpa_cfg.pairwise_cipher_wpa2 & 12) != 0) {
    
#line 356 
    pwk_cipher = (struct host_cmd_tlv_pwk_cipher *)tlv;
    
#line 357 
    pwk_cipher->header.type = (unsigned short)401U;
    
#line 358 
    pwk_cipher->header.len = (unsigned short)4U;
    
#line 361 
    pwk_cipher->proto = (unsigned short)32U;
    
#line 362 
    pwk_cipher->cipher = bss_cfg->wpa_cfg.pairwise_cipher_wpa2;
    
#line 363 
    cmd_size = (unsigned short)((unsigned int)cmd_size + 8U);
    
#line 364 
    tlv += 8U;
  }
  else ;
  
#line 367 
  if (((int)bss_cfg->wpa_cfg.group_cipher & 12) != 0) {
    
#line 368 
    gwk_cipher = (struct host_cmd_tlv_gwk_cipher *)tlv;
    
#line 369 
    gwk_cipher->header.type = (unsigned short)402U;
    
#line 370 
    gwk_cipher->header.len = (unsigned short)2U;
    
#line 373 
    gwk_cipher->cipher = bss_cfg->wpa_cfg.group_cipher;
    
#line 374 
    cmd_size = (unsigned short)((unsigned int)cmd_size + 6U);
    
#line 375 
    tlv += 6U;
  }
  else ;
  
#line 378 
  if (bss_cfg->wpa_cfg.length != 0U) {
    
#line 379 
    passphrase = (struct host_cmd_tlv_passphrase *)tlv;
    
#line 380 
    passphrase->header.type = (unsigned short)316U;
    
#line 382 
    passphrase->header.len = (unsigned short)bss_cfg->wpa_cfg.length;
    
#line 383 
    memcpy((void *)(& passphrase->passphrase),(void const *)(& bss_cfg->wpa_cfg.passphrase),(unsigned long)bss_cfg->wpa_cfg.length);
    
#line 385 
    cmd_size = (unsigned short)((unsigned int)((int)((unsigned short)bss_cfg->wpa_cfg.length) + (int)cmd_size) + 4U);
    
#line 387 
    tlv += (unsigned long)bss_cfg->wpa_cfg.length + 4UL;
  }
  else ;
  
#line 391 
  *param_size = cmd_size;
  
#line 392 
  *tlv_buf = tlv;
  
#line 394 
  return;
}


#line 401  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/uap_cmd.c"
void mwifiex_set_wmm_params(struct mwifiex_private *priv, struct mwifiex_uap_bss_param *bss_cfg, struct cfg80211_ap_settings *params)
{
  u8 const *vendor_ie;
  struct ieee_types_header *wmm_ie;
  
#line 407 
  u8 wmm_oui[4U] = {(unsigned char)0U, (unsigned char)80U, (unsigned char)242U, (unsigned char)2U};
  
#line 409 
  vendor_ie = cfg80211_find_vendor_ie(20722U,(unsigned char)2,params->beacon.tail,(int)params->beacon.tail_len);
  
#line 413 
  if (vendor_ie != (u8 const *)0U) {
    
#line 414 
    wmm_ie = (struct ieee_types_header *)vendor_ie;
    
#line 415 
    memcpy((void *)(& bss_cfg->wmm_info),(void const *)(wmm_ie + 1U),24UL);
    
#line 417 
    priv->wmm_enabled = (unsigned char)1U;
  }
  else {
    
#line 419 
    memset((void *)(& bss_cfg->wmm_info),0,24UL);
    
#line 420 
    memcpy((void *)(& bss_cfg->wmm_info.oui),(void const *)(& wmm_oui),4UL);
    
#line 421 
    bss_cfg->wmm_info.subtype = (unsigned char)1U;
    
#line 422 
    bss_cfg->wmm_info.version = (unsigned char)1U;
    
#line 423 
    priv->wmm_enabled = (unsigned char)0U;
  }
  
#line 426 
  bss_cfg->qos_info = (unsigned char)0U;
  
#line 427 
  return;
}


#line 434  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/uap_cmd.c"
static void mwifiex_uap_bss_wep(u8 **tlv_buf, void *cmd_buf, u16 *param_size)
{
  struct host_cmd_tlv_wep_key *wep_key;
  int i;
  
#line 437 
  u16 cmd_size = *param_size;
  
#line 439 
  u8 *tlv = *tlv_buf;
  
#line 440 
  struct mwifiex_uap_bss_param *bss_cfg = (struct mwifiex_uap_bss_param *)cmd_buf;
  
#line 442 
  i = 0;
  
#line 442 
  goto ldv_61311;
  ldv_61310: 
#line 443 
  ;
  
#line 443 
  if ((unsigned int)bss_cfg->wep_cfg[i].length != 0U && ((unsigned int)bss_cfg->wep_cfg[i].length == 5U || (unsigned int)bss_cfg->wep_cfg[i].length == 13U)) {
    
#line 446 
    wep_key = (struct host_cmd_tlv_wep_key *)tlv;
    
#line 447 
    wep_key->header.type = (unsigned short)315U;
    
#line 449 
    wep_key->header.len = (unsigned short)((unsigned int)bss_cfg->wep_cfg[i].length + 2U);
    
#line 451 
    wep_key->key_index = bss_cfg->wep_cfg[i].key_index;
    
#line 452 
    wep_key->is_default = bss_cfg->wep_cfg[i].is_default;
    
#line 453 
    memcpy((void *)(& wep_key->key),(void const *)(& bss_cfg->wep_cfg[i].key),(unsigned long)bss_cfg->wep_cfg[i].length);
    
#line 455 
    cmd_size = (unsigned short)((unsigned int)((int)bss_cfg->wep_cfg[i].length + (int)cmd_size) + 6U);
    
#line 457 
    tlv += (unsigned long)bss_cfg->wep_cfg[i].length + 6UL;
  }
  else ;
  
#line 442 
  i += 1;
  ldv_61311: 
#line 443 
  ;
  
#line 442 
  if (i <= 3) 
#line 444 
              goto ldv_61310; else 
#line 447 
                                   goto ldv_61312;
  ldv_61312: 
#line 448 
  ;
  
#line 462 
  *param_size = cmd_size;
  
#line 463 
  *tlv_buf = tlv;
  
#line 465 
  return;
}


#line 472  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/uap_cmd.c"
static int mwifiex_uap_bss_param_prepare(u8 *tlv, void *cmd_buf, u16 *param_size)
{
  int __retres;
  struct host_cmd_tlv_dtim_period *dtim_period;
  struct host_cmd_tlv_beacon_period *beacon_period;
  struct host_cmd_tlv_ssid *ssid;
  struct host_cmd_tlv_bcast_ssid *bcast_ssid;
  struct host_cmd_tlv_channel_band *chan_band;
  struct host_cmd_tlv_frag_threshold *frag_threshold;
  struct host_cmd_tlv_rts_threshold *rts_threshold;
  struct host_cmd_tlv_retry_limit *retry_limit;
  struct host_cmd_tlv_encrypt_protocol *encrypt_protocol;
  struct host_cmd_tlv_auth_type *auth_type;
  struct host_cmd_tlv_rates *tlv_rates;
  struct host_cmd_tlv_ageout_timer *ao_timer;
  struct host_cmd_tlv_ageout_timer *ps_ao_timer;
  struct host_cmd_tlv_power_constraint *pwr_ct;
  struct mwifiex_ie_types_htcap *htcap;
  struct mwifiex_ie_types_wmmcap *wmm_cap;
  int i;
  
#line 489 
  struct mwifiex_uap_bss_param *bss_cfg = (struct mwifiex_uap_bss_param *)cmd_buf;
  
#line 491 
  u16 cmd_size = *param_size;
  
#line 493 
  if (bss_cfg->ssid.ssid_len != 0U) {
    
#line 494 
    ssid = (struct host_cmd_tlv_ssid *)tlv;
    
#line 495 
    ssid->header.type = (unsigned short)0U;
    
#line 496 
    ssid->header.len = (unsigned short)bss_cfg->ssid.ssid_len;
    
#line 497 
    memcpy((void *)(& ssid->ssid),(void const *)(& bss_cfg->ssid.ssid),(unsigned long)bss_cfg->ssid.ssid_len);
    
#line 498 
    cmd_size = (unsigned short)((unsigned int)((int)((unsigned short)bss_cfg->ssid.ssid_len) + (int)cmd_size) + 4U);
    
#line 500 
    tlv += (unsigned long)bss_cfg->ssid.ssid_len + 4UL;
    
#line 503 
    bcast_ssid = (struct host_cmd_tlv_bcast_ssid *)tlv;
    
#line 504 
    bcast_ssid->header.type = (unsigned short)304U;
    
#line 505 
    bcast_ssid->header.len = (unsigned short)1U;
    
#line 507 
    bcast_ssid->bcast_ctl = bss_cfg->bcast_ssid_ctl;
    
#line 508 
    cmd_size = (unsigned short)((unsigned int)cmd_size + 5U);
    
#line 509 
    tlv += 5U;
  }
  else ;
  
#line 511 
  if ((unsigned int)bss_cfg->rates[0] != 0U) {
    
#line 512 
    tlv_rates = (struct host_cmd_tlv_rates *)tlv;
    
#line 513 
    tlv_rates->header.type = (unsigned short)1U;
    
#line 515 
    i = 0;
    
#line 515 
    goto ldv_61338;
    ldv_61337: 
#line 516 
    ;
    
#line 517 
    tlv_rates->rates[i] = bss_cfg->rates[i];
    
#line 516 
    i += 1;
    ldv_61338: 
#line 517 
    ;
    
#line 515 
    if (i <= 13 && (unsigned int)bss_cfg->rates[i] != 0U) 
#line 517 
                                                          goto ldv_61337; else 
                                                                    
#line 520 
                                                                    goto ldv_61339;
    ldv_61339: 
#line 521 
    ;
    
#line 519 
    tlv_rates->header.len = (unsigned short)i;
    
#line 520 
    cmd_size = (unsigned short)((unsigned int)((int)((unsigned short)i) + (int)cmd_size) + 4U);
    
#line 521 
    tlv += (unsigned long)i + 4UL;
  }
  else ;
  
#line 523 
  if ((unsigned int)bss_cfg->channel != 0U && (((unsigned int)bss_cfg->band_cfg == 0U && (unsigned int)bss_cfg->channel <= 14U) || ((unsigned int)bss_cfg->band_cfg == 1U && (unsigned int)bss_cfg->channel <= 165U))) {
    
#line 528 
    chan_band = (struct host_cmd_tlv_channel_band *)tlv;
    
#line 529 
    chan_band->header.type = (unsigned short)298U;
    
#line 530 
    chan_band->header.len = (unsigned short)2U;
    
#line 533 
    chan_band->band_config = bss_cfg->band_cfg;
    
#line 534 
    chan_band->channel = bss_cfg->channel;
    
#line 535 
    cmd_size = (unsigned short)((unsigned int)cmd_size + 6U);
    
#line 536 
    tlv += 6U;
  }
  else ;
  
#line 538 
  if ((unsigned int)bss_cfg->beacon_period + 65486U <= 3950U) {
    
#line 540 
    beacon_period = (struct host_cmd_tlv_beacon_period *)tlv;
    
#line 541 
    beacon_period->header.type = (unsigned short)300U;
    
#line 543 
    beacon_period->header.len = (unsigned short)2U;
    
#line 546 
    beacon_period->period = bss_cfg->beacon_period;
    
#line 547 
    cmd_size = (unsigned short)((unsigned int)cmd_size + 6U);
    
#line 548 
    tlv += 6U;
  }
  else ;
  
#line 550 
  if ((unsigned int)bss_cfg->dtim_period + 255U <= 99U) {
    
#line 552 
    dtim_period = (struct host_cmd_tlv_dtim_period *)tlv;
    
#line 553 
    dtim_period->header.type = (unsigned short)301U;
    
#line 555 
    dtim_period->header.len = (unsigned short)1U;
    
#line 558 
    dtim_period->period = bss_cfg->dtim_period;
    
#line 559 
    cmd_size = (unsigned short)((unsigned int)cmd_size + 5U);
    
#line 560 
    tlv += 5U;
  }
  else ;
  
#line 562 
  if ((unsigned int)bss_cfg->rts_threshold <= 2347U) {
    
#line 563 
    rts_threshold = (struct host_cmd_tlv_rts_threshold *)tlv;
    
#line 564 
    rts_threshold->header.type = (unsigned short)307U;
    
#line 566 
    rts_threshold->header.len = (unsigned short)2U;
    
#line 569 
    rts_threshold->rts_thr = bss_cfg->rts_threshold;
    
#line 570 
    cmd_size = (unsigned short)((unsigned int)cmd_size + 6U);
    
#line 571 
    tlv += 6U;
  }
  else ;
  
#line 573 
  if ((unsigned int)bss_cfg->frag_threshold + 65280U <= 2090U) {
    
#line 575 
    frag_threshold = (struct host_cmd_tlv_frag_threshold *)tlv;
    
#line 576 
    frag_threshold->header.type = (unsigned short)326U;
    
#line 578 
    frag_threshold->header.len = (unsigned short)2U;
    
#line 581 
    frag_threshold->frag_thr = bss_cfg->frag_threshold;
    
#line 582 
    cmd_size = (unsigned short)((unsigned int)cmd_size + 6U);
    
#line 583 
    tlv += 6U;
  }
  else ;
  
#line 585 
  if ((unsigned int)bss_cfg->retry_limit <= 14U) {
    
#line 586 
    retry_limit = (struct host_cmd_tlv_retry_limit *)tlv;
    
#line 587 
    retry_limit->header.type = (unsigned short)349U;
    
#line 589 
    retry_limit->header.len = (unsigned short)1U;
    
#line 592 
    retry_limit->limit = bss_cfg->retry_limit;
    
#line 593 
    cmd_size = (unsigned short)((unsigned int)cmd_size + 5U);
    
#line 594 
    tlv += 5U;
  }
  else ;
  
#line 596 
  if ((((int)bss_cfg->protocol & 8) != 0 || ((int)bss_cfg->protocol & 32) != 0) || ((int)bss_cfg->protocol & 64) != 0) 
    
#line 599 
    mwifiex_uap_bss_wpa(& tlv,cmd_buf,& cmd_size); else 
#line 601 
                                                        mwifiex_uap_bss_wep(& tlv,cmd_buf,& cmd_size);
  
#line 603 
  if ((unsigned int)bss_cfg->auth_mode <= 1U || (unsigned int)bss_cfg->auth_mode == 255U) {
    
#line 605 
    auth_type = (struct host_cmd_tlv_auth_type *)tlv;
    
#line 606 
    auth_type->header.type = (unsigned short)287U;
    
#line 607 
    auth_type->header.len = (unsigned short)1U;
    
#line 610 
    auth_type->auth_type = (unsigned char)bss_cfg->auth_mode;
    
#line 611 
    cmd_size = (unsigned short)((unsigned int)cmd_size + 5U);
    
#line 612 
    tlv += 5U;
  }
  else ;
  
#line 614 
  if ((unsigned int)bss_cfg->protocol != 0U) {
    
#line 615 
    encrypt_protocol = (struct host_cmd_tlv_encrypt_protocol *)tlv;
    
#line 616 
    encrypt_protocol->header.type = (unsigned short)320U;
    
#line 618 
    encrypt_protocol->header.len = (unsigned short)2U;
    
#line 621 
    encrypt_protocol->proto = bss_cfg->protocol;
    
#line 622 
    cmd_size = (unsigned short)((unsigned int)cmd_size + 6U);
    
#line 623 
    tlv += 6U;
  }
  else ;
  
#line 626 
  if ((unsigned int)bss_cfg->ht_cap.cap_info != 0U) {
    
#line 627 
    htcap = (struct mwifiex_ie_types_htcap *)tlv;
    
#line 628 
    htcap->header.type = (unsigned short)45U;
    
#line 629 
    htcap->header.len = (unsigned short)26U;
    
#line 631 
    htcap->ht_cap.cap_info = bss_cfg->ht_cap.cap_info;
    
#line 632 
    htcap->ht_cap.ampdu_params_info = bss_cfg->ht_cap.ampdu_params_info;
    
#line 634 
    memcpy((void *)(& htcap->ht_cap.mcs),(void const *)(& bss_cfg->ht_cap.mcs),16UL);
    
#line 636 
    htcap->ht_cap.extended_ht_cap_info = bss_cfg->ht_cap.extended_ht_cap_info;
    
#line 638 
    htcap->ht_cap.tx_BF_cap_info = bss_cfg->ht_cap.tx_BF_cap_info;
    
#line 639 
    htcap->ht_cap.antenna_selection_info = bss_cfg->ht_cap.antenna_selection_info;
    
#line 641 
    cmd_size = (unsigned short)((unsigned int)cmd_size + 30U);
    
#line 642 
    tlv += 30U;
  }
  else ;
  
#line 645 
  if ((unsigned int)bss_cfg->wmm_info.qos_info != 255U) {
    
#line 646 
    wmm_cap = (struct mwifiex_ie_types_wmmcap *)tlv;
    
#line 647 
    wmm_cap->header.type = (unsigned short)221U;
    
#line 648 
    wmm_cap->header.len = (unsigned short)24U;
    
#line 649 
    memcpy((void *)(& wmm_cap->wmm_info),(void const *)(& bss_cfg->wmm_info),24UL);
    
#line 651 
    cmd_size = (unsigned short)((unsigned int)cmd_size + 28U);
    
#line 652 
    tlv += 28U;
  }
  else ;
  
#line 655 
  if (bss_cfg->sta_ao_timer != 0U) {
    
#line 656 
    ao_timer = (struct host_cmd_tlv_ageout_timer *)tlv;
    
#line 657 
    ao_timer->header.type = (unsigned short)313U;
    
#line 658 
    ao_timer->header.len = (unsigned short)4U;
    
#line 660 
    ao_timer->sta_ao_timer = bss_cfg->sta_ao_timer;
    
#line 661 
    cmd_size = (unsigned short)((unsigned int)cmd_size + 8U);
    
#line 662 
    tlv += 8U;
  }
  else ;
  
#line 665 
  if ((unsigned int)bss_cfg->power_constraint != 0U) {
    
#line 666 
    pwr_ct = (struct host_cmd_tlv_power_constraint *)tlv;
    
#line 667 
    pwr_ct->header.type = (unsigned short)32U;
    
#line 668 
    pwr_ct->header.len = (unsigned short)1U;
    
#line 669 
    pwr_ct->constraint = bss_cfg->power_constraint;
    
#line 670 
    cmd_size = (unsigned short)((unsigned int)cmd_size + 5U);
    
#line 671 
    tlv += 5U;
  }
  else ;
  
#line 674 
  if (bss_cfg->ps_sta_ao_timer != 0U) {
    
#line 675 
    ps_ao_timer = (struct host_cmd_tlv_ageout_timer *)tlv;
    
#line 676 
    ps_ao_timer->header.type = (unsigned short)379U;
    
#line 678 
    ps_ao_timer->header.len = (unsigned short)4U;
    
#line 680 
    ps_ao_timer->sta_ao_timer = bss_cfg->ps_sta_ao_timer;
    
#line 682 
    cmd_size = (unsigned short)((unsigned int)cmd_size + 8U);
    
#line 683 
    tlv += 8U;
  }
  else ;
  
#line 686 
  *param_size = cmd_size;
  
#line 688 
  __retres = 0;
  
#line 688 
  return __retres;
}


#line 692  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/uap_cmd.c"
static int mwifiex_uap_custom_ie_prepare(u8 *tlv, void *cmd_buf, u16 *ie_size)
{
  int __retres;
  
#line 694 
  struct mwifiex_ie_list *ap_ie = (struct mwifiex_ie_list *)cmd_buf;
  
#line 695 
  struct mwifiex_ie_types_header *tlv_ie = (struct mwifiex_ie_types_header *)tlv;
  
#line 697 
  if ((ap_ie == (struct mwifiex_ie_list *)0 || (unsigned int)ap_ie->len == 0U) || & ap_ie->ie_list == (struct mwifiex_ie (*)[16U])0) {
    
#line 698 
    __retres = -1;
    
#line 698 
    goto return_label;
  }
  else ;
  
#line 700 
  *ie_size = (unsigned short)((unsigned int)((int)*ie_size + (int)ap_ie->len) + 4U);
  
#line 703 
  tlv_ie->type = (unsigned short)361U;
  
#line 704 
  tlv_ie->len = ap_ie->len;
  
#line 705 
  tlv += 4U;
  
#line 707 
  memcpy((void *)tlv,(void const *)(& ap_ie->ie_list),(unsigned long)ap_ie->len);
  
#line 709 
  __retres = 0;
  return_label: 
#line 709 
                return __retres;
}


#line 716  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/uap_cmd.c"
static int mwifiex_cmd_uap_sys_config(struct host_cmd_ds_command *cmd, u16 cmd_action, u32 type, void *cmd_buf)
{
  int __retres;
  u8 *tlv;
  u16 cmd_size;
  u16 param_size;
  u16 ie_size;
  struct host_cmd_ds_sys_config *sys_cfg;
  
#line 723 
  cmd->command = (unsigned short)176U;
  
#line 724 
  cmd_size = (unsigned short)10U;
  
#line 725 
  sys_cfg = & cmd->params.uap_sys_config;
  
#line 726 
  sys_cfg->action = cmd_action;
  
#line 727 
  tlv = (u8 *)(& sys_cfg->tlv);
  
#line 729 
  switch (type) {
    int tmp;
    int tmp_0;
    case (u32)0: 
#line 730 
    ;
    
#line 731 
    param_size = cmd_size;
    
#line 732 
    tmp = mwifiex_uap_bss_param_prepare(tlv,cmd_buf,& param_size);
    
#line 732 
    if (tmp != 0) {
      
#line 733 
      __retres = -1;
      
#line 733 
      goto return_label;
    }
    else ;
    
#line 734 
    cmd->size = param_size;
    
#line 735 
    goto ldv_61359;
    case (u32)1: 
#line 736 
    ;
    
#line 737 
    ie_size = cmd_size;
    
#line 738 
    tmp_0 = mwifiex_uap_custom_ie_prepare(tlv,cmd_buf,& ie_size);
    
#line 738 
    if (tmp_0 != 0) {
      
#line 739 
      __retres = -1;
      
#line 739 
      goto return_label;
    }
    else ;
    
#line 740 
    cmd->size = ie_size;
    
#line 741 
    goto ldv_61359;
    default: 
#line 742 
    ;
    
#line 743 
    __retres = -1;
    
#line 743 
    goto return_label;
  }
  ldv_61359: 
#line 746 
  ;
  
#line 746 
  __retres = 0;
  return_label: 
#line 746 
                return __retres;
}


#line 752  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/uap_cmd.c"
static int mwifiex_cmd_uap_sta_deauth(struct mwifiex_private *priv, struct host_cmd_ds_command *cmd, u8 *mac)
{
  int __retres;
  
#line 755 
  struct host_cmd_ds_sta_deauth *sta_deauth = & cmd->params.sta_deauth;
  
#line 757 
  cmd->command = (unsigned short)181U;
  
#line 758 
  memcpy((void *)(& sta_deauth->mac),(void const *)mac,6UL);
  
#line 759 
  sta_deauth->reason = (unsigned short)3U;
  
#line 761 
  cmd->size = (unsigned short)16U;
  
#line 763 
  __retres = 0;
  
#line 763 
  return __retres;
}


#line 771  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/uap_cmd.c"
int mwifiex_uap_prepare_cmd(struct mwifiex_private *priv, unsigned short cmd_no, u16 cmd_action, u32 type, void *data_buf, void *cmd_buf)
{
  int __retres;
  
#line 775 
  struct host_cmd_ds_command *cmd = (struct host_cmd_ds_command *)cmd_buf;
  
#line 777 
  switch ((int)cmd_no) {
    int tmp;
    int tmp_0;
    int tmp_1;
    case 176: 
#line 778 
    ;
    
#line 779 
    tmp = mwifiex_cmd_uap_sys_config(cmd,(unsigned short)((int)cmd_action),type,data_buf);
    
#line 779 
    if (tmp != 0) {
      
#line 780 
      __retres = -1;
      
#line 780 
      goto return_label;
    }
    else ;
    
#line 781 
    goto ldv_61378;
    case 177: 
#line 782 
    ;
    case 178: 
#line 783 
    ;
    case 175: 
#line 784 
    ;
    case 179: 
#line 785 
    ;
    
#line 786 
    cmd->command = cmd_no;
    
#line 787 
    cmd->size = (unsigned short)8U;
    
#line 788 
    goto ldv_61378;
    case 181: 
#line 789 
    ;
    
#line 790 
    tmp_0 = mwifiex_cmd_uap_sta_deauth(priv,cmd,(u8 *)data_buf);
    
#line 790 
    if (tmp_0 != 0) {
      
#line 791 
      __retres = -1;
      
#line 791 
      goto return_label;
    }
    else ;
    
#line 792 
    goto ldv_61378;
    case 221: 
#line 793 
    ;
    
#line 794 
    tmp_1 = mwifiex_cmd_issue_chan_report_request(priv,(struct host_cmd_ds_command *)cmd_buf,data_buf);
    
#line 794 
    if (tmp_1 != 0) {
      
#line 796 
      __retres = -1;
      
#line 796 
      goto return_label;
    }
    else ;
    
#line 797 
    goto ldv_61378;
    default: 
#line 798 
    ;
    
#line 799 
    if (((priv->adapter)->debug_mask & 4U) != 0U) {
      
#line 799 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 799 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"PREP_CMD: unknown cmd %#x\n",(int)cmd_no); else ;
    }
    else ;
    
#line 801 
    __retres = -1;
    
#line 801 
    goto return_label;
  }
  ldv_61378: 
#line 804 
  ;
  
#line 804 
  __retres = 0;
  return_label: 
#line 804 
                return __retres;
}


#line 807  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/uap_cmd.c"
void mwifiex_uap_set_channel(struct mwifiex_private *priv, struct mwifiex_uap_bss_param *bss_cfg, struct cfg80211_chan_def chandef)
{
  int tmp;
  
#line 811 
  u8 config_bands = (unsigned char)0U;
  
#line 813 
  priv->bss_chandef = chandef;
  
#line 815 
  tmp = ieee80211_frequency_to_channel((int)(chandef.chan)->center_freq);
  
#line 815 
  bss_cfg->channel = (unsigned char)tmp;
  
#line 819 
  if ((chandef.chan)->band == (unsigned int)IEEE80211_BAND_2GHZ) {
    
#line 820 
    bss_cfg->band_cfg = (unsigned char)0U;
    
#line 821 
    config_bands = (unsigned char)3U;
    
#line 823 
    if (chandef.width != (unsigned int)NL80211_CHAN_WIDTH_20_NOHT) 
#line 824 
                                                                   config_bands = (unsigned char)((unsigned int)config_bands | 8U); else ;
  }
  else {
    
#line 826 
    bss_cfg->band_cfg = (unsigned char)1U;
    
#line 827 
    config_bands = (unsigned char)4U;
    
#line 829 
    if (chandef.width != (unsigned int)NL80211_CHAN_WIDTH_20_NOHT) 
#line 830 
                                                                   config_bands = (unsigned char)((unsigned int)config_bands | 16U); else ;
    
#line 832 
    if (chandef.width > (unsigned int)NL80211_CHAN_WIDTH_40) 
#line 833 
                                                             config_bands = (unsigned char)((unsigned int)config_bands | 32U); else ;
  }
  
#line 836 
  (priv->adapter)->config_bands = config_bands;
  
#line 837 
  return;
}


#line 839  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/uap_cmd.c"
int mwifiex_config_start_uap(struct mwifiex_private *priv, struct mwifiex_uap_bss_param *bss_cfg)
{
  int __retres;
  enum state_11d_t state_11d;
  int tmp;
  int tmp_0;
  int tmp_1;
  int tmp_2;
  int tmp_3;
  int tmp_4;
  int tmp_5;
  
#line 844 
  tmp = mwifiex_del_mgmt_ies(priv);
  
#line 844 
  if (tmp != 0) {
    
#line 845 
    if (((priv->adapter)->debug_mask & 4U) != 0U) {
      
#line 845 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 845 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"Failed to delete mgmt IEs!\n"); else ;
    }
    else ;
  }
  else ;
  
#line 848 
  tmp_0 = mwifiex_send_cmd(priv,(unsigned short)178,(unsigned short)1,0U,(void *)0,(_Bool)1);
  
#line 848 
  if (tmp_0 != 0) {
    
#line 850 
    if (((priv->adapter)->debug_mask & 4U) != 0U) {
      
#line 850 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 850 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"Failed to stop the BSS\n"); else ;
    }
    else ;
    
#line 851 
    __retres = -1;
    
#line 851 
    goto return_label;
  }
  else ;
  
#line 854 
  tmp_1 = mwifiex_send_cmd(priv,(unsigned short)175,(unsigned short)1,0U,(void *)0,(_Bool)1);
  
#line 854 
  if (tmp_1 != 0) {
    
#line 856 
    if (((priv->adapter)->debug_mask & 4U) != 0U) {
      
#line 856 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 856 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"Failed to reset BSS\n"); else ;
    }
    else ;
    
#line 857 
    __retres = -1;
    
#line 857 
    goto return_label;
  }
  else ;
  
#line 860 
  tmp_2 = mwifiex_send_cmd(priv,(unsigned short)176,(unsigned short)1,0U,(void *)bss_cfg,(_Bool)0);
  
#line 860 
  if (tmp_2 != 0) {
    
#line 863 
    if (((priv->adapter)->debug_mask & 4U) != 0U) {
      
#line 863 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 863 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"Failed to set the SSID\n"); else ;
    }
    else ;
    
#line 865 
    __retres = -1;
    
#line 865 
    goto return_label;
  }
  else ;
  
#line 869 
  state_11d = ENABLE_11D;
  
#line 870 
  tmp_3 = mwifiex_send_cmd(priv,(unsigned short)22,(unsigned short)1,9U,(void *)(& state_11d),(_Bool)1);
  
#line 870 
  if (tmp_3 != 0) {
    
#line 873 
    if (((priv->adapter)->debug_mask & 4U) != 0U) {
      
#line 873 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 873 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"11D: failed to enable 11D\n"); else ;
    }
    else ;
    
#line 875 
    __retres = -1;
    
#line 875 
    goto return_label;
  }
  else ;
  
#line 878 
  tmp_4 = mwifiex_send_cmd(priv,(unsigned short)177,(unsigned short)1,0U,(void *)0,(_Bool)0);
  
#line 878 
  if (tmp_4 != 0) {
    
#line 880 
    if (((priv->adapter)->debug_mask & 4U) != 0U) {
      
#line 880 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 880 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"Failed to start the BSS\n"); else ;
    }
    else ;
    
#line 882 
    __retres = -1;
    
#line 882 
    goto return_label;
  }
  else ;
  
#line 885 
  if ((unsigned int)priv->sec_info.wep_enabled != 0U) 
#line 886 
                                                      priv->curr_pkt_filter = (unsigned short)((unsigned int)priv->curr_pkt_filter | 8U); else 
                                                                    
#line 888 
                                                                    priv->curr_pkt_filter = (unsigned short)((unsigned int)priv->curr_pkt_filter & 65527U);
  
#line 890 
  tmp_5 = mwifiex_send_cmd(priv,(unsigned short)40,(unsigned short)1,0U,(void *)(& priv->curr_pkt_filter),(_Bool)1);
  
#line 890 
  if (tmp_5 != 0) {
    
#line 893 
    __retres = -1;
    
#line 893 
    goto return_label;
  }
  else ;
  
#line 895 
  __retres = 0;
  return_label: 
#line 895 
                return __retres;
}


#line 7  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_cmdevt.c.aux"
void ldv_atomic_inc(atomic_t *v);


#line 8 
void ldv_atomic_dec(atomic_t *v);


#line 142  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/printk.h"
int printk(char const * , ...);


#line 431 
void print_hex_dump(char const *, char const *, int, int, int, void const *, size_t, bool);


#line 48  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list.h"
void __list_add(struct list_head *, struct list_head *, struct list_head *);


#line 61  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list.h"
__inline static void list_add(struct list_head *new, struct list_head *head)
{
  
#line 63 
  __list_add(new,head,head->next);
  
#line 64 
  return;
}


#line 75  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list.h"
__inline static void list_add_tail(struct list_head *new, struct list_head *head)
{
  
#line 77 
  __list_add(new,head->prev,head);
  
#line 78 
  return;
}


#line 113 
void list_del(struct list_head *);


#line 187  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list.h"
__inline static int list_empty(struct list_head const *head)
{
  int __retres;
  
#line 189 
  __retres = (struct list_head const *)head->next == head;
  
#line 189 
  return __retres;
}


#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/atomic.h"
__inline static int atomic_read(atomic_t const *v)
{
  int __retres;
  int const volatile *tmp;
  {
    
#line 27 
    int const __var = 0;
    
#line 27 
    tmp = (int const volatile *)(& v->counter);
  }
  
#line 27 
  __retres = *tmp;
  
#line 27 
  return __retres;
}


#line 98 
static void atomic_inc(atomic_t *v);


#line 114 
static void atomic_dec(atomic_t *v);


#line 45  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock_api_smp.h"
void _raw_spin_unlock_irqrestore(raw_spinlock_t *, unsigned long);


#line 446  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_unlock_irqrestore(spinlock_t *lock, unsigned long flags)
{
  {
    unsigned long __dummy;
    unsigned long __dummy2;
    
  }
  
#line 448 
  _raw_spin_unlock_irqrestore(& lock->__anonCompField_spinlock_18.rlock,flags);
  
#line 449 
  return;
}


#line 482 
static void ldv_spin_unlock_irqrestore_79(spinlock_t *lock, unsigned long flags);


#line 486 
static void ldv_spin_unlock_irqrestore_80(spinlock_t *lock, unsigned long flags);


#line 490 
static void ldv_spin_unlock_irqrestore_83(spinlock_t *lock, unsigned long flags);


#line 494 
static void ldv_spin_unlock_irqrestore_85(spinlock_t *lock, unsigned long flags);


#line 498 
static void ldv_spin_unlock_irqrestore_89(spinlock_t *lock, unsigned long flags);


#line 502 
static void ldv_spin_unlock_irqrestore_91(spinlock_t *lock, unsigned long flags);


#line 506 
static void ldv_spin_unlock_irqrestore_94(spinlock_t *lock, unsigned long flags);


#line 510 
static void ldv_spin_unlock_irqrestore_95(spinlock_t *lock, unsigned long flags);


#line 514 
static void ldv_spin_unlock_irqrestore_96(spinlock_t *lock, unsigned long flags);


#line 518 
static void ldv_spin_unlock_irqrestore_97(spinlock_t *lock, unsigned long flags);


#line 522 
static void ldv_spin_unlock_irqrestore_99(spinlock_t *lock, unsigned long flags);


#line 526 
static void ldv_spin_unlock_irqrestore_100(spinlock_t *lock, unsigned long flags);


#line 530 
static void ldv_spin_unlock_irqrestore_103(spinlock_t *lock, unsigned long flags);


#line 534 
static void ldv_spin_unlock_irqrestore_105(spinlock_t *lock, unsigned long flags);


#line 538 
static void ldv_spin_unlock_irqrestore_107(spinlock_t *lock, unsigned long flags);


#line 542 
static void ldv_spin_unlock_irqrestore_110(spinlock_t *lock, unsigned long flags);


#line 546 
static void ldv_spin_unlock_irqrestore_112(spinlock_t *lock, unsigned long flags);


#line 550 
static void ldv_spin_unlock_irqrestore_113(spinlock_t *lock, unsigned long flags);


#line 554 
static void ldv_spin_unlock_irqrestore_115(spinlock_t *lock, unsigned long flags);


#line 558 
static void ldv_spin_unlock_irqrestore_117(spinlock_t *lock, unsigned long flags);


#line 562 
static void ldv_spin_unlock_irqrestore_119(spinlock_t *lock, unsigned long flags);


#line 566 
static void ldv_spin_unlock_irqrestore_121(spinlock_t *lock, unsigned long flags);


#line 570 
static void ldv_spin_unlock_irqrestore_123(spinlock_t *lock, unsigned long flags);


#line 43  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_cmdevt.c.aux"
void __ldv_spin_lock(spinlock_t *);


#line 74 
static void ldv___ldv_spin_lock_78(spinlock_t *ldv_func_arg1);


#line 78 
static void ldv___ldv_spin_lock_82(spinlock_t *ldv_func_arg1);


#line 82 
static void ldv___ldv_spin_lock_84(spinlock_t *ldv_func_arg1);


#line 86 
static void ldv___ldv_spin_lock_88(spinlock_t *ldv_func_arg1);


#line 90 
static void ldv___ldv_spin_lock_90(spinlock_t *ldv_func_arg1);


#line 94 
static void ldv___ldv_spin_lock_92(spinlock_t *ldv_func_arg1);


#line 98 
static void ldv___ldv_spin_lock_93(spinlock_t *ldv_func_arg1);


#line 102 
static void ldv___ldv_spin_lock_98(spinlock_t *ldv_func_arg1);


#line 106 
static void ldv___ldv_spin_lock_102(spinlock_t *ldv_func_arg1);


#line 110 
static void ldv___ldv_spin_lock_104(spinlock_t *ldv_func_arg1);


#line 114 
static void ldv___ldv_spin_lock_106(spinlock_t *ldv_func_arg1);


#line 118 
static void ldv___ldv_spin_lock_108(spinlock_t *ldv_func_arg1);


#line 122 
static void ldv___ldv_spin_lock_109(spinlock_t *ldv_func_arg1);


#line 126 
static void ldv___ldv_spin_lock_111(spinlock_t *ldv_func_arg1);


#line 130 
static void ldv___ldv_spin_lock_114(spinlock_t *ldv_func_arg1);


#line 134 
static void ldv___ldv_spin_lock_116(spinlock_t *ldv_func_arg1);


#line 138 
static void ldv___ldv_spin_lock_118(spinlock_t *ldv_func_arg1);


#line 142 
static void ldv___ldv_spin_lock_120(spinlock_t *ldv_func_arg1);


#line 146 
static void ldv___ldv_spin_lock_122(spinlock_t *ldv_func_arg1);


#line 154 
void ldv_spin_model_lock(char *);


#line 155 
void ldv_spin_model_unlock(char *);


#line 25  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/slab.h"
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags);


#line 149  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/wait.h"
void __wake_up(wait_queue_head_t *, unsigned int, int, void *);


#line 78  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/jiffies.h"
extern unsigned long volatile jiffies;


#line 292 
unsigned long __msecs_to_jiffies(unsigned int const);


#line 299  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/jiffies.h"
__inline static unsigned long _msecs_to_jiffies(unsigned int const m)
{
  unsigned long __retres;
  
#line 301 
  __retres = (unsigned long)(((long)m + 3L) / 4L);
  
#line 301 
  return __retres;
}


#line 354  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/jiffies.h"
__inline static unsigned long msecs_to_jiffies(unsigned int const m)
{
  unsigned long __retres;
  
#line 356 
  if (0 != 0) {
    unsigned long tmp;
    
#line 357 
    if ((int)m < 0) {
      
#line 358 
      __retres = 4611686018427387902UL;
      
#line 358 
      goto return_label;
    }
    else ;
    
#line 359 
    tmp = _msecs_to_jiffies(m);
    
#line 359 
    __retres = tmp;
    
#line 359 
    goto return_label;
  }
  else {
    unsigned long tmp_0;
    
#line 361 
    tmp_0 = __msecs_to_jiffies(m);
    
#line 361 
    __retres = tmp_0;
    
#line 361 
    goto return_label;
  }
  return_label: 
#line 356 
                return __retres;
}


#line 173  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timer.h"
static int ldv_mod_timer_86(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2);


#line 232 
static int ldv_del_timer_sync_101(struct timer_list *ldv_func_arg1);


#line 494  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/workqueue.h"
static bool ldv_queue_work_81(struct workqueue_struct *wq, struct work_struct *work);


#line 498 
static bool ldv_queue_work_87(struct workqueue_struct *wq, struct work_struct *work);


#line 143  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/slab.h"
void kfree(void const *);


#line 542 
static void *kcalloc(size_t n, size_t size, gfp_t flags);


#line 1688  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
unsigned char *skb_put(struct sk_buff *, unsigned int);


#line 1698 
unsigned char *skb_push(struct sk_buff *, unsigned int);


#line 1706 
unsigned char *skb_pull(struct sk_buff *, unsigned int);


#line 2057 
void skb_trim(struct sk_buff *, unsigned int);


#line 2140 
struct sk_buff *__netdev_alloc_skb(struct net_device *, unsigned int, gfp_t);


#line 2156  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static struct sk_buff *netdev_alloc_skb(struct net_device *dev, unsigned int length)
{
  struct sk_buff *tmp;
  
#line 2159 
  tmp = __netdev_alloc_skb(dev,length,32U);
  
#line 2159 
  return tmp;
}


#line 2170  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static struct sk_buff *dev_alloc_skb(unsigned int length)
{
  struct sk_buff *tmp;
  
#line 2172 
  tmp = netdev_alloc_skb((struct net_device *)0,length);
  
#line 2172 
  return tmp;
}


#line 2900  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
void __dev_kfree_skb_any(struct sk_buff *, enum skb_free_reason);


#line 2931  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void dev_kfree_skb_any(struct sk_buff *skb)
{
  
#line 2933 
  __dev_kfree_skb_any(skb,(enum skb_free_reason)SKB_REASON_DROPPED);
  
#line 2934 
  return;
}


#line 3917  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/cfg80211.h"
void cfg80211_scan_done(struct cfg80211_scan_request *, bool);


#line 57  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/util.h"
void __compiletime_assert_57(void);


#line 53  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/util.h"
__inline static struct mwifiex_rxinfo *MWIFIEX_SKB_RXCB(struct sk_buff *skb)
{
  struct mwifiex_rxinfo *__retres;
  
#line 55 
  struct mwifiex_cb *cb = (struct mwifiex_cb *)(& skb->cb);
  {
    
#line 57 
    bool __cond = (_Bool)0;
    
#line 57 
    if ((int)__cond != 0) 
#line 57 
                          __compiletime_assert_57(); else ;
  }
  
#line 58 
  __retres = & cb->__anonCompField_mwifiex_cb_100.rx_info;
  
#line 58 
  return __retres;
}


#line 271  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/etherdevice.h"
__inline static void ether_addr_copy(u8 *dst, u8 const *src)
{
  
#line 274 
  *((u32 *)dst) = *((u32 const *)src);
  
#line 275 
  *((u16 *)(dst + 4U)) = *((u16 const *)(src + 4U));
  
#line 276 
  return;
}


#line 1001  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.h"
int mwifiex_init_fw_complete(struct mwifiex_adapter *adapter);


#line 1014 
int mwifiex_process_event(struct mwifiex_adapter *adapter);


#line 1016 
int mwifiex_complete_cmd(struct mwifiex_adapter *adapter, struct cmd_ctrl_node *cmd_node);


#line 1022 
void mwifiex_cmd_timeout_func(unsigned long function_context);


#line 1027 
int mwifiex_alloc_cmd_buffer(struct mwifiex_adapter *adapter);


#line 1028 
int mwifiex_free_cmd_buffer(struct mwifiex_adapter *adapter);


#line 1029 
void mwifiex_cancel_all_pending_cmd(struct mwifiex_adapter *adapter);


#line 1030 
void mwifiex_cancel_pending_ioctl(struct mwifiex_adapter *adapter);


#line 1032 
void mwifiex_insert_cmd_to_free_q(struct mwifiex_adapter *adapter, struct cmd_ctrl_node *cmd_node);


#line 1034 
void mwifiex_recycle_cmd_node(struct mwifiex_adapter *adapter, struct cmd_ctrl_node *cmd_node);


#line 1037 
void mwifiex_insert_cmd_to_pending_q(struct mwifiex_adapter *adapter, struct cmd_ctrl_node *cmd_node, u32 add_tail);


#line 1041 
int mwifiex_exec_next_cmd(struct mwifiex_adapter *adapter);


#line 1042 
int mwifiex_process_cmdresp(struct mwifiex_adapter *adapter);


#line 1052 
void mwifiex_check_ps_cond(struct mwifiex_adapter *adapter);


#line 1053 
void mwifiex_process_sleep_confirm_resp(struct mwifiex_adapter *adapter, u8 *pbuf, u32 upld_len);


#line 1055 
int mwifiex_cmd_enh_power_mode(struct mwifiex_private *priv, struct host_cmd_ds_command *cmd, u16 cmd_action, uint16_t ps_bitmap, struct mwifiex_ds_auto_ds *auto_ds);


#line 1059 
int mwifiex_ret_enh_power_mode(struct mwifiex_private *priv, struct host_cmd_ds_command *resp, struct mwifiex_ds_pm_cfg *pm_cfg);


#line 1062 
void mwifiex_process_hs_config(struct mwifiex_adapter *adapter);


#line 1063 
void mwifiex_hs_activated_event(struct mwifiex_private *priv, u8 activated);


#line 1067 
int mwifiex_ret_802_11_hs_cfg(struct mwifiex_private *priv, struct host_cmd_ds_command *resp);


#line 1071 
int mwifiex_sta_prepare_cmd(struct mwifiex_private *priv, uint16_t cmd_no, u16 cmd_action, u32 cmd_oid, void *data_buf, void *cmd_buf);


#line 1077 
int mwifiex_process_sta_cmdresp(struct mwifiex_private *priv, u16 cmdresp_no, struct host_cmd_ds_command *resp);


#line 1085 
int mwifiex_process_sta_event(struct mwifiex_private *priv);


#line 1086 
int mwifiex_process_uap_event(struct mwifiex_private *priv);


#line 1095 
void mwifiex_queue_scan_cmd(struct mwifiex_private *priv, struct cmd_ctrl_node *cmd_node);


#line 1139 
u16 region_code_index[7U];


#line 1142 
int mwifiex_cmd_get_hw_spec(struct mwifiex_private *priv, struct host_cmd_ds_command *cmd);


#line 1144 
int mwifiex_ret_get_hw_spec(struct mwifiex_private *priv, struct host_cmd_ds_command *resp);


#line 1224  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.h"
__inline static struct mwifiex_private *mwifiex_get_priv_by_id(struct mwifiex_adapter *adapter, u8 bss_num, u8 bss_type)
{
  int i;
  struct mwifiex_private *tmp;
  
#line 1229 
  i = 0;
  
#line 1229 
  goto ldv_61118;
  ldv_61117: 
#line 1230 
  ;
  
#line 1230 
  if (adapter->priv[i] != (struct mwifiex_private *)0) {
    
#line 1231 
    if ((int)(adapter->priv[i])->bss_num == (int)bss_num && (int)(adapter->priv[i])->bss_type == (int)bss_type) 
      
#line 1233 
      goto ldv_61116; else ;
  }
  else ;
  
#line 1229 
  i += 1;
  ldv_61118: 
#line 1230 
  ;
  
#line 1229 
  if ((int)adapter->priv_num > i) 
#line 1231 
                                  goto ldv_61117; else 
#line 1234 
                                                       goto ldv_61116;
  ldv_61116: 
#line 1235 
  ;
  
#line 1236 
  if ((int)adapter->priv_num > i) 
#line 1236 
                                  tmp = adapter->priv[i]; else 
#line 1236 
                                                               tmp = (struct mwifiex_private *)0;
  
#line 1236 
  return tmp;
}


#line 1244  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.h"
__inline static struct mwifiex_private *mwifiex_get_priv(struct mwifiex_adapter *adapter, enum mwifiex_bss_role bss_role)
{
  int i;
  struct mwifiex_private *tmp;
  
#line 1249 
  i = 0;
  
#line 1249 
  goto ldv_61126;
  ldv_61125: 
#line 1250 
  ;
  
#line 1250 
  if (adapter->priv[i] != (struct mwifiex_private *)0) {
    
#line 1251 
    if (bss_role == (unsigned int)MWIFIEX_BSS_ROLE_ANY || ((unsigned long)(adapter->priv[i])->bss_role & 1UL) == (unsigned long)bss_role) 
      
#line 1253 
      goto ldv_61124; else ;
  }
  else ;
  
#line 1249 
  i += 1;
  ldv_61126: 
#line 1250 
  ;
  
#line 1249 
  if ((int)adapter->priv_num > i) 
#line 1251 
                                  goto ldv_61125; else 
#line 1254 
                                                       goto ldv_61124;
  ldv_61124: 
#line 1255 
  ;
  
#line 1257 
  if ((int)adapter->priv_num > i) 
#line 1257 
                                  tmp = adapter->priv[i]; else 
#line 1257 
                                                               tmp = (struct mwifiex_private *)0;
  
#line 1257 
  return tmp;
}


#line 1344 
int mwifiex_wait_queue_complete(struct mwifiex_adapter *adapter, struct cmd_ctrl_node *cmd_queued);


#line 83  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11n_rxreorder.h"
void mwifiex_update_rxreor_flags(struct mwifiex_adapter *adapter, u8 flags);


#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cmdevt.c"
static void mwifiex_init_cmd_node(struct mwifiex_private *priv, struct cmd_ctrl_node *cmd_node, u32 cmd_oid, void *data_buf, bool sync)
{
  
#line 42 
  cmd_node->priv = priv;
  
#line 43 
  cmd_node->cmd_oid = cmd_oid;
  
#line 44 
  if ((int)sync != 0) {
    
#line 45 
    cmd_node->wait_q_enabled = 1U;
    
#line 46 
    cmd_node->cmd_wait_q_woken = (unsigned char)0U;
    
#line 47 
    cmd_node->condition = & cmd_node->cmd_wait_q_woken;
  }
  else ;
  
#line 49 
  cmd_node->data_buf = data_buf;
  
#line 50 
  cmd_node->cmd_skb = cmd_node->skb;
  
#line 51 
  return;
}


#line 58  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cmdevt.c"
static struct cmd_ctrl_node *mwifiex_get_cmd_node(struct mwifiex_adapter *adapter)
{
  struct cmd_ctrl_node *__retres;
  struct cmd_ctrl_node *cmd_node;
  unsigned long flags;
  int tmp;
  struct cmd_ctrl_node *tmp_0;
  
#line 63 
  ldv___ldv_spin_lock_78(& adapter->cmd_free_q_lock);
  
#line 64 
  tmp = list_empty((struct list_head const *)(& adapter->cmd_free_q));
  
#line 64 
  if (tmp != 0) {
    
#line 65 
    if ((adapter->debug_mask & 4U) != 0U) {
      
#line 65 
      if (adapter->dev != (struct device *)0) 
#line 65 
                                              _dev_info((struct device const *)adapter->dev,"GET_CMD_NODE: cmd node not available\n"); else ;
    }
    else ;
    
#line 67 
    ldv_spin_unlock_irqrestore_79(& adapter->cmd_free_q_lock,flags);
    
#line 68 
    __retres = (struct cmd_ctrl_node *)0;
    
#line 68 
    goto return_label;
  }
  else ;
  {
    
#line 70 
    struct list_head const *__mptr = (struct list_head const *)adapter->cmd_free_q.next;
    
#line 70 
    tmp_0 = (struct cmd_ctrl_node *)__mptr;
  }
  
#line 70 
  cmd_node = tmp_0;
  
#line 72 
  list_del(& cmd_node->list);
  
#line 73 
  ldv_spin_unlock_irqrestore_80(& adapter->cmd_free_q_lock,flags);
  
#line 75 
  __retres = cmd_node;
  return_label: 
#line 75 
                return __retres;
}


#line 90  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cmdevt.c"
static void mwifiex_clean_cmd_node(struct mwifiex_adapter *adapter, struct cmd_ctrl_node *cmd_node)
{
  
#line 93 
  cmd_node->cmd_oid = 0U;
  
#line 94 
  cmd_node->cmd_flag = 0U;
  
#line 95 
  cmd_node->data_buf = (void *)0;
  
#line 96 
  cmd_node->wait_q_enabled = 0U;
  
#line 98 
  if (cmd_node->cmd_skb != (struct sk_buff *)0) 
#line 99 
                                                skb_trim(cmd_node->cmd_skb,0U); else ;
  
#line 101 
  if (cmd_node->resp_skb != (struct sk_buff *)0) {
    
#line 102 
    (*(adapter->if_ops.cmdrsp_complete))(adapter,cmd_node->resp_skb);
    
#line 103 
    cmd_node->resp_skb = (struct sk_buff *)0;
  }
  else ;
  
#line 105 
  return;
}


#line 114  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cmdevt.c"
static int mwifiex_cmd_host_cmd(struct mwifiex_private *priv, struct host_cmd_ds_command *cmd, struct mwifiex_ds_misc_cmd *pcmd_ptr)
{
  int __retres;
  
#line 119 
  memcpy((void *)cmd,(void const *)(& pcmd_ptr->cmd),(unsigned long)pcmd_ptr->len);
  
#line 120 
  if (((priv->adapter)->debug_mask & 16U) != 0U) {
    
#line 120 
    if ((priv->adapter)->dev != (struct device *)0) 
#line 120 
                                                    _dev_info((struct device const *)(priv->adapter)->dev,"cmd: host cmd size = %d\n",pcmd_ptr->len); else ;
  }
  else ;
  
#line 122 
  __retres = 0;
  
#line 122 
  return __retres;
}


#line 133  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cmdevt.c"
static int mwifiex_dnld_cmd_to_fw(struct mwifiex_private *priv, struct cmd_ctrl_node *cmd_node)
{
  int __retres;
  int ret;
  struct host_cmd_ds_command *host_cmd;
  uint16_t cmd_code;
  uint16_t cmd_size;
  unsigned long flags;
  __le32 tmp;
  unsigned long tmp_0;
  
#line 137 
  struct mwifiex_adapter *adapter = priv->adapter;
  
#line 145 
  if (adapter == (struct mwifiex_adapter *)0 || cmd_node == (struct cmd_ctrl_node *)0) {
    
#line 146 
    __retres = -1;
    
#line 146 
    goto return_label;
  }
  else ;
  
#line 148 
  host_cmd = (struct host_cmd_ds_command *)(cmd_node->cmd_skb)->data;
  
#line 151 
  if (host_cmd == (struct host_cmd_ds_command *)0 || (unsigned int)host_cmd->size == 0U) {
    
#line 152 
    if ((adapter->debug_mask & 4U) != 0U) {
      
#line 152 
      if (adapter->dev != (struct device *)0) 
#line 152 
                                              _dev_info((struct device const *)adapter->dev,"DNLD_CMD: host_cmd is null\t"); else ;
    }
    else ;
    
#line 155 
    if (cmd_node->wait_q_enabled != 0U) 
#line 156 
                                        adapter->cmd_wait_q.status = -1; else ;
    
#line 157 
    mwifiex_recycle_cmd_node(adapter,cmd_node);
    
#line 158 
    __retres = -1;
    
#line 158 
    goto return_label;
  }
  else ;
  
#line 161 
  cmd_code = host_cmd->command;
  
#line 162 
  cmd_size = host_cmd->size;
  
#line 164 
  if (adapter->hw_status == (unsigned int)MWIFIEX_HW_STATUS_RESET && (unsigned int)cmd_code + 65367U > 1U) {
    
#line 167 
    if ((adapter->debug_mask & 4U) != 0U) {
      
#line 167 
      if (adapter->dev != (struct device *)0) 
#line 167 
                                              _dev_info((struct device const *)adapter->dev,"DNLD_CMD: FW in reset state, ignore cmd %#x\n",(int)cmd_code); else ;
    }
    else ;
    
#line 170 
    if (cmd_node->wait_q_enabled != 0U) 
#line 171 
                                        mwifiex_complete_cmd(adapter,cmd_node); else ;
    
#line 172 
    mwifiex_recycle_cmd_node(adapter,cmd_node);
    
#line 173 
    ldv_queue_work_81(adapter->workqueue,& adapter->main_work);
    
#line 174 
    __retres = -1;
    
#line 174 
    goto return_label;
  }
  else ;
  
#line 178 
  adapter->seq_num = (u16)((int)adapter->seq_num + 1);
  
#line 179 
  host_cmd->seq_num = (unsigned short)((((int)adapter->seq_num & 255) | (((int)(cmd_node->priv)->bss_num << 8) & 3840)) | (((int)(cmd_node->priv)->bss_type << 12) & 65535));
  
#line 184 
  ldv___ldv_spin_lock_82(& adapter->mwifiex_cmd_lock);
  
#line 185 
  adapter->curr_cmd = cmd_node;
  
#line 186 
  ldv_spin_unlock_irqrestore_83(& adapter->mwifiex_cmd_lock,flags);
  
#line 189 
  if ((cmd_node->cmd_skb)->len > (unsigned int)cmd_size) 
#line 194 
                                                         skb_trim(cmd_node->cmd_skb,(unsigned int)cmd_size);
  else 
    
#line 195 
    if ((cmd_node->cmd_skb)->len < (unsigned int)cmd_size) 
#line 201 
                                                           skb_put(cmd_node->cmd_skb,(unsigned int)cmd_size - (cmd_node->cmd_skb)->len); else ;
  
#line 203 
  if ((adapter->debug_mask & 16U) != 0U) {
    
#line 203 
    if (adapter->dev != (struct device *)0) 
#line 203 
                                            _dev_info((struct device const *)adapter->dev,"cmd: DNLD_CMD: %#x, act %#x, len %d, seqno %#x\n",(int)cmd_code,(int)*((__le16 *)host_cmd + 8U),(int)cmd_size,(int)host_cmd->seq_num); else ;
  }
  else ;
  
#line 208 
  if ((adapter->debug_mask & 131072U) != 0U) 
#line 208 
                                             print_hex_dump("\001","cmd buffer:",2,16,1,(void const *)host_cmd,(unsigned long)cmd_size,(_Bool)0); else ;
  
#line 210 
  if ((unsigned int)adapter->iface_type == 2U) {
    
#line 211 
    tmp = 4027448014U;
    
#line 212 
    skb_push(cmd_node->cmd_skb,4U);
    
#line 213 
    memcpy((void *)(cmd_node->cmd_skb)->data,(void const *)(& tmp),4UL);
    
#line 214 
    adapter->cmd_sent = (unsigned char)1U;
    
#line 215 
    ret = (*(adapter->if_ops.host_to_card))(adapter,(unsigned char)1,cmd_node->cmd_skb,(struct mwifiex_tx_param *)0);
    
#line 218 
    skb_pull(cmd_node->cmd_skb,4U);
    
#line 219 
    if (ret == -16) 
#line 220 
                    cmd_node->cmd_skb = (struct sk_buff *)0; else ;
  }
  else {
    
#line 222 
    skb_push(cmd_node->cmd_skb,4U);
    
#line 223 
    ret = (*(adapter->if_ops.host_to_card))(adapter,(unsigned char)1,cmd_node->cmd_skb,(struct mwifiex_tx_param *)0);
    
#line 225 
    skb_pull(cmd_node->cmd_skb,4U);
  }
  
#line 228 
  if (ret == -1) {
    
#line 229 
    if ((adapter->debug_mask & 4U) != 0U) {
      
#line 229 
      if (adapter->dev != (struct device *)0) 
#line 229 
                                              _dev_info((struct device const *)adapter->dev,"DNLD_CMD: host to card failed\n"); else ;
    }
    else ;
    
#line 231 
    if ((unsigned int)adapter->iface_type == 2U) 
#line 232 
                                                 adapter->cmd_sent = (unsigned char)0U; else ;
    
#line 233 
    if (cmd_node->wait_q_enabled != 0U) 
#line 234 
                                        adapter->cmd_wait_q.status = -1; else ;
    
#line 235 
    mwifiex_recycle_cmd_node(adapter,adapter->curr_cmd);
    
#line 237 
    ldv___ldv_spin_lock_84(& adapter->mwifiex_cmd_lock);
    
#line 238 
    adapter->curr_cmd = (struct cmd_ctrl_node *)0;
    
#line 239 
    ldv_spin_unlock_irqrestore_85(& adapter->mwifiex_cmd_lock,flags);
    
#line 241 
    adapter->dbg.num_cmd_host_to_card_failure += 1U;
    
#line 242 
    __retres = -1;
    
#line 242 
    goto return_label;
  }
  else ;
  
#line 246 
  adapter->dbg.last_cmd_index = (unsigned short)(((int)adapter->dbg.last_cmd_index + 1) % 5);
  
#line 248 
  adapter->dbg.last_cmd_id[(int)adapter->dbg.last_cmd_index] = cmd_code;
  
#line 249 
  adapter->dbg.last_cmd_act[(int)adapter->dbg.last_cmd_index] = *((__le16 *)host_cmd + 8U);
  
#line 253 
  cmd_code = (unsigned short)((unsigned int)cmd_code & 4095U);
  
#line 256 
  tmp_0 = msecs_to_jiffies(10000U);
  
#line 256 
  ;
  
#line 256 
  ;
  
#line 256 
  ldv_mod_timer_86(& adapter->cmd_timer,tmp_0 + jiffies);
  
#line 259 
  __retres = 0;
  return_label: 
#line 259 
                return __retres;
}


#line 271  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cmdevt.c"
static int mwifiex_dnld_sleep_confirm_cmd(struct mwifiex_adapter *adapter)
{
  int __retres;
  int ret;
  struct mwifiex_private *priv;
  struct sk_buff *sleep_cfm_tmp;
  __le32 tmp;
  
#line 275 
  struct mwifiex_opt_sleep_confirm *sleep_cfm_buf = (struct mwifiex_opt_sleep_confirm *)(adapter->sleep_cfm)->data;
  
#line 281 
  priv = mwifiex_get_priv(adapter,(enum mwifiex_bss_role)MWIFIEX_BSS_ROLE_ANY);
  
#line 283 
  adapter->seq_num = (u16)((int)adapter->seq_num + 1);
  
#line 284 
  sleep_cfm_buf->seq_num = (unsigned short)((((int)adapter->seq_num & 255) | (((int)priv->bss_num << 8) & 3840)) | (((int)priv->bss_type << 12) & 65535));
  
#line 289 
  if ((adapter->debug_mask & 16U) != 0U) {
    
#line 289 
    if (adapter->dev != (struct device *)0) 
#line 289 
                                            _dev_info((struct device const *)adapter->dev,"cmd: DNLD_CMD: %#x, act %#x, len %d, seqno %#x\n",(int)sleep_cfm_buf->command,(int)sleep_cfm_buf->action,(int)sleep_cfm_buf->size,(int)sleep_cfm_buf->seq_num); else ;
  }
  else ;
  
#line 295 
  if ((adapter->debug_mask & 131072U) != 0U) 
#line 295 
                                             print_hex_dump("\001","SLEEP_CFM buffer: ",2,16,1,(void const *)sleep_cfm_buf,(unsigned long)sleep_cfm_buf->size,(_Bool)0); else ;
  
#line 298 
  if ((unsigned int)adapter->iface_type == 2U) {
    
#line 299 
    sleep_cfm_tmp = dev_alloc_skb(16U);
    
#line 302 
    skb_put(sleep_cfm_tmp,16U);
    
#line 304 
    tmp = 4027448014U;
    
#line 305 
    memcpy((void *)sleep_cfm_tmp->data,(void const *)(& tmp),4UL);
    
#line 306 
    memcpy((void *)(sleep_cfm_tmp->data + 4U),(void const *)(adapter->sleep_cfm)->data,12UL);
    
#line 309 
    ret = (*(adapter->if_ops.host_to_card))(adapter,(unsigned char)1,sleep_cfm_tmp,(struct mwifiex_tx_param *)0);
    
#line 312 
    if (ret != -16) 
#line 313 
                    dev_kfree_skb_any(sleep_cfm_tmp); else ;
  }
  else {
    
#line 315 
    skb_push(adapter->sleep_cfm,4U);
    
#line 316 
    ret = (*(adapter->if_ops.host_to_card))(adapter,(unsigned char)1,adapter->sleep_cfm,(struct mwifiex_tx_param *)0);
    
#line 318 
    skb_pull(adapter->sleep_cfm,4U);
  }
  
#line 321 
  if (ret == -1) {
    
#line 322 
    if ((adapter->debug_mask & 4U) != 0U) {
      
#line 322 
      if (adapter->dev != (struct device *)0) 
#line 322 
                                              _dev_info((struct device const *)adapter->dev,"SLEEP_CFM: failed\n"); else ;
    }
    else ;
    
#line 323 
    adapter->dbg.num_cmd_sleep_cfm_host_to_card_failure += 1U;
    
#line 324 
    __retres = -1;
    
#line 324 
    goto return_label;
  }
  else ;
  
#line 327 
  if ((unsigned int)sleep_cfm_buf->resp_ctrl == 0U) 
#line 329 
                                                    adapter->ps_state = 3U; else 
                                                                    
#line 331 
                                                                    adapter->ps_state = 2U;
  
#line 333 
  if ((unsigned int)sleep_cfm_buf->resp_ctrl == 0U && ((unsigned int)adapter->is_hs_configured != 0U && (unsigned int)adapter->sleep_period.period == 0U)) {
    struct mwifiex_private *tmp_0;
    
#line 336 
    adapter->pm_wakeup_card_req = (unsigned char)1U;
    
#line 337 
    tmp_0 = mwifiex_get_priv(adapter,(enum mwifiex_bss_role)MWIFIEX_BSS_ROLE_ANY);
    
#line 337 
    mwifiex_hs_activated_event(tmp_0,(unsigned char)1);
  }
  else ;
  
#line 341 
  __retres = ret;
  return_label: 
#line 341 
                return __retres;
}


#line 356  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cmdevt.c"
int mwifiex_alloc_cmd_buffer(struct mwifiex_adapter *adapter)
{
  int __retres;
  struct cmd_ctrl_node *cmd_array;
  u32 i;
  
#line 362 
  cmd_array = (struct cmd_ctrl_node *)kcalloc(50UL,88UL,208U);
  
#line 364 
  if (cmd_array == (struct cmd_ctrl_node *)0) {
    
#line 365 
    __retres = -12;
    
#line 365 
    goto return_label;
  }
  else ;
  
#line 367 
  adapter->cmd_pool = cmd_array;
  
#line 370 
  i = 0U;
  
#line 370 
  goto ldv_61805;
  ldv_61804: 
#line 371 
  ;
  
#line 371 
  (cmd_array + i)->skb = dev_alloc_skb(2048U);
  
#line 372 
  if ((cmd_array + i)->skb == (struct sk_buff *)0) {
    
#line 373 
    if ((adapter->debug_mask & 4U) != 0U) {
      
#line 373 
      if (adapter->dev != (struct device *)0) 
#line 373 
                                              _dev_info((struct device const *)adapter->dev,"unable to allocate command buffer\n"); else ;
    }
    else ;
    
#line 375 
    __retres = -12;
    
#line 375 
    goto return_label;
  }
  else ;
  
#line 370 
  i += 1U;
  ldv_61805: 
#line 371 
  ;
  
#line 370 
  if (i <= 49U) 
#line 372 
                goto ldv_61804; else 
#line 375 
                                     goto ldv_61806;
  ldv_61806: 
#line 376 
  ;
  
#line 379 
  i = 0U;
  
#line 379 
  goto ldv_61808;
  ldv_61807: 
#line 380 
  ;
  
#line 380 
  mwifiex_insert_cmd_to_free_q(adapter,cmd_array + i);
  
#line 379 
  i += 1U;
  ldv_61808: 
#line 380 
  ;
  
#line 379 
  if (i <= 49U) 
#line 381 
                goto ldv_61807; else 
#line 384 
                                     goto ldv_61809;
  ldv_61809: 
#line 385 
  ;
  
#line 382 
  __retres = 0;
  return_label: 
#line 382 
                return __retres;
}


#line 391  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cmdevt.c"
int mwifiex_free_cmd_buffer(struct mwifiex_adapter *adapter)
{
  int __retres;
  struct cmd_ctrl_node *cmd_array;
  u32 i;
  
#line 397 
  if (adapter->cmd_pool == (struct cmd_ctrl_node *)0) {
    
#line 398 
    if ((adapter->debug_mask & 2U) != 0U) {
      
#line 398 
      if (adapter->dev != (struct device *)0) 
#line 398 
                                              _dev_info((struct device const *)adapter->dev,"info: FREE_CMD_BUF: cmd_pool is null\n"); else ;
    }
    else ;
    
#line 400 
    __retres = 0;
    
#line 400 
    goto return_label;
  }
  else ;
  
#line 403 
  cmd_array = adapter->cmd_pool;
  
#line 406 
  i = 0U;
  
#line 406 
  goto ldv_61817;
  ldv_61816: 
#line 407 
  ;
  
#line 407 
  if ((cmd_array + i)->skb != (struct sk_buff *)0) {
    
#line 408 
    if ((adapter->debug_mask & 16U) != 0U) {
      
#line 408 
      if (adapter->dev != (struct device *)0) 
#line 408 
                                              _dev_info((struct device const *)adapter->dev,"cmd: free cmd buffer %d\n",i); else ;
    }
    else ;
    
#line 410 
    dev_kfree_skb_any((cmd_array + i)->skb);
  }
  else ;
  
#line 412 
  if ((cmd_array + i)->resp_skb == (struct sk_buff *)0) 
#line 413 
                                                        goto ldv_61815; else ;
  
#line 415 
  if ((unsigned int)adapter->iface_type == 2U) 
#line 416 
                                               (*(adapter->if_ops.cmdrsp_complete))(adapter,(cmd_array + i)->resp_skb); else 
                                                                    
#line 419 
                                                                    dev_kfree_skb_any((cmd_array + i)->resp_skb);
  ldv_61815: 
#line 420 
  ;
  
#line 406 
  i += 1U;
  ldv_61817: 
#line 407 
  ;
  
#line 406 
  if (i <= 49U) 
#line 408 
                goto ldv_61816; else 
#line 411 
                                     goto ldv_61818;
  ldv_61818: 
#line 412 
  ;
  
#line 422 
  if (adapter->cmd_pool != (struct cmd_ctrl_node *)0) {
    
#line 423 
    if ((adapter->debug_mask & 16U) != 0U) {
      
#line 423 
      if (adapter->dev != (struct device *)0) 
#line 423 
                                              _dev_info((struct device const *)adapter->dev,"cmd: free cmd pool\n"); else ;
    }
    else ;
    
#line 425 
    kfree((void const *)adapter->cmd_pool);
    
#line 426 
    adapter->cmd_pool = (struct cmd_ctrl_node *)0;
  }
  else ;
  
#line 429 
  __retres = 0;
  return_label: 
#line 429 
                return __retres;
}


#line 442  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cmdevt.c"
int mwifiex_process_event(struct mwifiex_adapter *adapter)
{
  int ret;
  struct mwifiex_rxinfo *rx_info;
  
#line 445 
  struct mwifiex_private *priv = mwifiex_get_priv(adapter,(enum mwifiex_bss_role)MWIFIEX_BSS_ROLE_ANY);
  
#line 447 
  struct sk_buff *skb = adapter->event_skb;
  
#line 448 
  u32 eventcause = adapter->event_cause;
  
#line 452 
  adapter->dbg.last_event_index = (unsigned short)(((int)adapter->dbg.last_event_index + 1) % 5);
  
#line 454 
  adapter->dbg.last_event[(int)adapter->dbg.last_event_index] = (unsigned short)eventcause;
  
#line 458 
  priv = mwifiex_get_priv_by_id(adapter,(unsigned char)((int)((unsigned char)(eventcause >> 16)) & 15),(unsigned char)((int)((unsigned char)(eventcause >> 24))));
  
#line 460 
  if (priv == (struct mwifiex_private *)0) 
#line 461 
                                           priv = mwifiex_get_priv(adapter,(enum mwifiex_bss_role)MWIFIEX_BSS_ROLE_ANY); else ;
  
#line 464 
  eventcause &= 65535U;
  
#line 465 
  adapter->event_cause = eventcause;
  
#line 467 
  if (skb != (struct sk_buff *)0) {
    
#line 468 
    rx_info = MWIFIEX_SKB_RXCB(skb);
    
#line 469 
    memset((void *)rx_info,0,16UL);
    
#line 470 
    rx_info->bss_num = priv->bss_num;
    
#line 471 
    rx_info->bss_type = priv->bss_type;
    
#line 472 
    if ((adapter->debug_mask & 262144U) != 0U) 
#line 472 
                                               print_hex_dump("\001","Event Buf:",2,16,1,(void const *)skb->data,(unsigned long)skb->len,(_Bool)0); else ;
  }
  else ;
  
#line 476 
  if ((adapter->debug_mask & 32U) != 0U) {
    
#line 476 
    if (adapter->dev != (struct device *)0) 
#line 476 
                                            _dev_info((struct device const *)adapter->dev,"EVENT: cause: %#x\n",eventcause); else ;
  }
  else ;
  
#line 478 
  if ((unsigned int)priv->bss_role == 1U) 
#line 479 
                                          ret = mwifiex_process_uap_event(priv); else 
                                                                    
#line 481 
                                                                    ret = mwifiex_process_sta_event(priv);
  
#line 483 
  adapter->event_cause = 0U;
  
#line 484 
  adapter->event_skb = (struct sk_buff *)0;
  
#line 485 
  (*(adapter->if_ops.event_complete))(adapter,skb);
  
#line 487 
  return ret;
}


#line 501  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cmdevt.c"
int mwifiex_send_cmd(struct mwifiex_private *priv, u16 cmd_no, u16 cmd_action, u32 cmd_oid, void *data_buf, bool sync)
{
  int __retres;
  int ret;
  struct cmd_ctrl_node *cmd_node;
  struct host_cmd_ds_command *cmd_ptr;
  unsigned char *tmp;
  
#line 505 
  struct mwifiex_adapter *adapter = priv->adapter;
  
#line 509 
  if (adapter == (struct mwifiex_adapter *)0) {
    
#line 510 
    printk("\001");
    
#line 511 
    __retres = -1;
    
#line 511 
    goto return_label;
  }
  else ;
  
#line 514 
  if ((int)adapter->is_suspended != 0) {
    
#line 515 
    if ((adapter->debug_mask & 4U) != 0U) {
      
#line 515 
      if (adapter->dev != (struct device *)0) 
#line 515 
                                              _dev_info((struct device const *)adapter->dev,"PREP_CMD: device in suspended state\n"); else ;
    }
    else ;
    
#line 517 
    __retres = -1;
    
#line 517 
    goto return_label;
  }
  else ;
  
#line 520 
  if ((int)adapter->hs_enabling != 0 && (unsigned int)cmd_no != 229U) {
    
#line 521 
    if ((adapter->debug_mask & 4U) != 0U) {
      
#line 521 
      if (adapter->dev != (struct device *)0) 
#line 521 
                                              _dev_info((struct device const *)adapter->dev,"PREP_CMD: host entering sleep state\n"); else ;
    }
    else ;
    
#line 523 
    __retres = -1;
    
#line 523 
    goto return_label;
  }
  else ;
  
#line 526 
  if ((int)adapter->surprise_removed != 0) {
    
#line 527 
    if ((adapter->debug_mask & 4U) != 0U) {
      
#line 527 
      if (adapter->dev != (struct device *)0) 
#line 527 
                                              _dev_info((struct device const *)adapter->dev,"PREP_CMD: card is removed\n"); else ;
    }
    else ;
    
#line 529 
    __retres = -1;
    
#line 529 
    goto return_label;
  }
  else ;
  
#line 532 
  if ((unsigned int)adapter->is_cmd_timedout != 0U) {
    
#line 533 
    if ((adapter->debug_mask & 4U) != 0U) {
      
#line 533 
      if (adapter->dev != (struct device *)0) 
#line 533 
                                              _dev_info((struct device const *)adapter->dev,"PREP_CMD: FW is in bad state\n"); else ;
    }
    else ;
    
#line 535 
    __retres = -1;
    
#line 535 
    goto return_label;
  }
  else ;
  
#line 538 
  if (adapter->hw_status == (unsigned int)MWIFIEX_HW_STATUS_RESET) {
    
#line 539 
    if ((unsigned int)cmd_no != 169U) {
      
#line 540 
      if ((adapter->debug_mask & 4U) != 0U) {
        
#line 540 
        if (adapter->dev != (struct device *)0) 
#line 540 
                                                _dev_info((struct device const *)adapter->dev,"PREP_CMD: FW in reset state\n"); else ;
      }
      else ;
      
#line 542 
      __retres = -1;
      
#line 542 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 547 
  cmd_node = mwifiex_get_cmd_node(adapter);
  
#line 549 
  if (cmd_node == (struct cmd_ctrl_node *)0) {
    
#line 550 
    if ((adapter->debug_mask & 4U) != 0U) {
      
#line 550 
      if (adapter->dev != (struct device *)0) 
#line 550 
                                              _dev_info((struct device const *)adapter->dev,"PREP_CMD: no free cmd node\n"); else ;
    }
    else ;
    
#line 552 
    __retres = -1;
    
#line 552 
    goto return_label;
  }
  else ;
  
#line 556 
  mwifiex_init_cmd_node(priv,cmd_node,cmd_oid,data_buf,(_Bool)((bool)((int)sync) != 0));
  
#line 558 
  if (cmd_node->cmd_skb == (struct sk_buff *)0) {
    
#line 559 
    if ((adapter->debug_mask & 4U) != 0U) {
      
#line 559 
      if (adapter->dev != (struct device *)0) 
#line 559 
                                              _dev_info((struct device const *)adapter->dev,"PREP_CMD: no free cmd buf\n"); else ;
    }
    else ;
    
#line 561 
    __retres = -1;
    
#line 561 
    goto return_label;
  }
  else ;
  
#line 564 
  tmp = skb_put(cmd_node->cmd_skb,208U);
  
#line 564 
  memset((void *)tmp,0,208UL);
  
#line 567 
  cmd_ptr = (struct host_cmd_ds_command *)(cmd_node->cmd_skb)->data;
  
#line 568 
  cmd_ptr->command = cmd_no;
  
#line 569 
  cmd_ptr->result = (unsigned short)0U;
  
#line 572 
  if ((unsigned int)cmd_no != 0U) {
    
#line 573 
    switch ((int)cmd_no) {
      case 176: 
#line 574 
      ;
      case 177: 
#line 575 
      ;
      case 178: 
#line 576 
      ;
      case 181: 
#line 577 
      ;
      case 175: 
#line 578 
      ;
      case 179: 
#line 579 
      ;
      
#line 580 
      ret = mwifiex_uap_prepare_cmd(priv,(unsigned short)((int)cmd_no),(unsigned short)((int)cmd_action),cmd_oid,data_buf,(void *)cmd_ptr);
      
#line 583 
      goto ldv_61845;
      default: 
#line 584 
      ;
      
#line 585 
      ret = mwifiex_sta_prepare_cmd(priv,(unsigned short)((int)cmd_no),(unsigned short)((int)cmd_action),cmd_oid,data_buf,(void *)cmd_ptr);
      
#line 588 
      goto ldv_61845;
    }
    ldv_61845: 
#line 590 
    ;
  }
  else {
    
#line 591 
    ret = mwifiex_cmd_host_cmd(priv,cmd_ptr,(struct mwifiex_ds_misc_cmd *)data_buf);
    
#line 592 
    cmd_node->cmd_flag |= 1U;
  }
  
#line 596 
  if (ret != 0) {
    
#line 597 
    if ((adapter->debug_mask & 4U) != 0U) {
      
#line 597 
      if (adapter->dev != (struct device *)0) 
#line 597 
                                              _dev_info((struct device const *)adapter->dev,"PREP_CMD: cmd %#x preparation failed\n",(int)cmd_no); else ;
    }
    else ;
    
#line 600 
    mwifiex_insert_cmd_to_free_q(adapter,cmd_node);
    
#line 601 
    __retres = -1;
    
#line 601 
    goto return_label;
  }
  else ;
  
#line 605 
  if ((unsigned int)cmd_no == 6U || (unsigned int)cmd_no == 263U) 
#line 607 
                                                                  mwifiex_queue_scan_cmd(priv,cmd_node);
  else {
    
#line 609 
    mwifiex_insert_cmd_to_pending_q(adapter,cmd_node,1U);
    
#line 610 
    ldv_queue_work_87(adapter->workqueue,& adapter->main_work);
    
#line 611 
    if (cmd_node->wait_q_enabled != 0U) 
#line 612 
                                        ret = mwifiex_wait_queue_complete(adapter,cmd_node); else ;
  }
  
#line 615 
  __retres = ret;
  return_label: 
#line 615 
                return __retres;
}


#line 625  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cmdevt.c"
void mwifiex_insert_cmd_to_free_q(struct mwifiex_adapter *adapter, struct cmd_ctrl_node *cmd_node)
{
  unsigned long flags;
  
#line 630 
  if (cmd_node == (struct cmd_ctrl_node *)0) 
#line 631 
                                             goto return_label; else ;
  
#line 633 
  if (cmd_node->wait_q_enabled != 0U) 
#line 634 
                                      mwifiex_complete_cmd(adapter,cmd_node); else ;
  
#line 636 
  mwifiex_clean_cmd_node(adapter,cmd_node);
  
#line 639 
  ldv___ldv_spin_lock_88(& adapter->cmd_free_q_lock);
  
#line 640 
  list_add_tail(& cmd_node->list,& adapter->cmd_free_q);
  
#line 641 
  ldv_spin_unlock_irqrestore_89(& adapter->cmd_free_q_lock,flags);
  return_label: 
#line 642 
                return;
}


#line 645  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cmdevt.c"
void mwifiex_recycle_cmd_node(struct mwifiex_adapter *adapter, struct cmd_ctrl_node *cmd_node)
{
  
#line 648 
  struct host_cmd_ds_command *host_cmd = (struct host_cmd_ds_command *)(cmd_node->cmd_skb)->data;
  
#line 650 
  mwifiex_insert_cmd_to_free_q(adapter,cmd_node);
  
#line 652 
  atomic_dec(& adapter->cmd_pending);
  
#line 653 
  if ((adapter->debug_mask & 16U) != 0U) {
    
#line 653 
    if (adapter->dev != (struct device *)0) {
      int tmp;
      
#line 653 
      tmp = atomic_read((atomic_t const *)(& adapter->cmd_pending));
      
#line 653 
      ;
      
#line 653 
      ;
      
#line 653 
      _dev_info((struct device const *)adapter->dev,"cmd: FREE_CMD: cmd=%#x, cmd_pending=%d\n",(int)host_cmd->command,tmp);
    }
    else ;
  }
  else ;
  
#line 654 
  return;
}


#line 667  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cmdevt.c"
void mwifiex_insert_cmd_to_pending_q(struct mwifiex_adapter *adapter, struct cmd_ctrl_node *cmd_node, u32 add_tail)
{
  u16 command;
  unsigned long flags;
  
#line 670 
  struct host_cmd_ds_command *host_cmd = (struct host_cmd_ds_command *)0;
  
#line 674 
  host_cmd = (struct host_cmd_ds_command *)(cmd_node->cmd_skb)->data;
  
#line 675 
  if (host_cmd == (struct host_cmd_ds_command *)0) {
    
#line 676 
    if ((adapter->debug_mask & 4U) != 0U) {
      
#line 676 
      if (adapter->dev != (struct device *)0) 
#line 676 
                                              _dev_info((struct device const *)adapter->dev,"QUEUE_CMD: host_cmd is NULL\n"); else ;
    }
    else ;
    
#line 677 
    goto return_label;
  }
  else ;
  
#line 680 
  command = host_cmd->command;
  
#line 683 
  if ((unsigned int)command == 228U) {
    
#line 684 
    struct host_cmd_ds_802_11_ps_mode_enh *pm = & host_cmd->params.psmode_enh;
    
#line 686 
    if ((unsigned int)pm->action == 2U || (unsigned int)pm->action == 254U) {
      
#line 688 
      if (adapter->ps_state != 0U) 
#line 689 
                                   add_tail = 0U; else ;
    }
    else ;
  }
  else ;
  
#line 693 
  ldv___ldv_spin_lock_90(& adapter->cmd_pending_q_lock);
  
#line 694 
  if (add_tail != 0U) 
#line 695 
                      list_add_tail(& cmd_node->list,& adapter->cmd_pending_q); else 
                                                                    
#line 697 
                                                                    list_add(& cmd_node->list,& adapter->cmd_pending_q);
  
#line 698 
  ldv_spin_unlock_irqrestore_91(& adapter->cmd_pending_q_lock,flags);
  
#line 700 
  atomic_inc(& adapter->cmd_pending);
  
#line 701 
  if ((adapter->debug_mask & 16U) != 0U) {
    
#line 701 
    if (adapter->dev != (struct device *)0) {
      int tmp;
      
#line 701 
      tmp = atomic_read((atomic_t const *)(& adapter->cmd_pending));
      
#line 701 
      ;
      
#line 701 
      ;
      
#line 701 
      _dev_info((struct device const *)adapter->dev,"cmd: QUEUE_CMD: cmd=%#x, cmd_pending=%d\n",(int)command,tmp);
    }
    else ;
  }
  else ;
  return_label: 
#line 702 
                return;
}


#line 717  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cmdevt.c"
int mwifiex_exec_next_cmd(struct mwifiex_adapter *adapter)
{
  int __retres;
  struct mwifiex_private *priv;
  struct cmd_ctrl_node *cmd_node;
  struct host_cmd_ds_command *host_cmd;
  unsigned long cmd_flags;
  unsigned long cmd_pending_q_flags;
  int tmp;
  struct cmd_ctrl_node *tmp_0;
  
#line 721 
  int ret = 0;
  
#line 727 
  if (adapter->curr_cmd != (struct cmd_ctrl_node *)0) {
    
#line 728 
    if ((adapter->debug_mask & 2U) != 0U) {
      
#line 728 
      if (adapter->dev != (struct device *)0) 
#line 728 
                                              _dev_info((struct device const *)adapter->dev,"EXEC_NEXT_CMD: cmd in processing\n"); else ;
    }
    else ;
    
#line 730 
    __retres = -1;
    
#line 730 
    goto return_label;
  }
  else ;
  
#line 733 
  ldv___ldv_spin_lock_92(& adapter->mwifiex_cmd_lock);
  
#line 735 
  ldv___ldv_spin_lock_93(& adapter->cmd_pending_q_lock);
  
#line 736 
  tmp = list_empty((struct list_head const *)(& adapter->cmd_pending_q));
  
#line 736 
  if (tmp != 0) {
    
#line 737 
    ldv_spin_unlock_irqrestore_94(& adapter->cmd_pending_q_lock,cmd_pending_q_flags);
    
#line 739 
    ldv_spin_unlock_irqrestore_95(& adapter->mwifiex_cmd_lock,cmd_flags);
    
#line 740 
    __retres = 0;
    
#line 740 
    goto return_label;
  }
  else ;
  {
    
#line 742 
    struct list_head const *__mptr = (struct list_head const *)adapter->cmd_pending_q.next;
    
#line 742 
    tmp_0 = (struct cmd_ctrl_node *)__mptr;
  }
  
#line 742 
  cmd_node = tmp_0;
  
#line 744 
  ldv_spin_unlock_irqrestore_96(& adapter->cmd_pending_q_lock,cmd_pending_q_flags);
  
#line 747 
  host_cmd = (struct host_cmd_ds_command *)(cmd_node->cmd_skb)->data;
  
#line 748 
  priv = cmd_node->priv;
  
#line 750 
  if (adapter->ps_state != 0U) {
    
#line 751 
    if ((adapter->debug_mask & 4U) != 0U) {
      
#line 751 
      if (adapter->dev != (struct device *)0) 
#line 751 
                                              _dev_info((struct device const *)adapter->dev,"%s: cannot send cmd in sleep state,\t","mwifiex_exec_next_cmd"); else ;
    }
    else ;
    
#line 754 
    ldv_spin_unlock_irqrestore_97(& adapter->mwifiex_cmd_lock,cmd_flags);
    
#line 755 
    __retres = ret;
    
#line 755 
    goto return_label;
  }
  else ;
  
#line 758 
  ldv___ldv_spin_lock_98(& adapter->cmd_pending_q_lock);
  
#line 759 
  list_del(& cmd_node->list);
  
#line 760 
  ldv_spin_unlock_irqrestore_99(& adapter->cmd_pending_q_lock,cmd_pending_q_flags);
  
#line 763 
  ldv_spin_unlock_irqrestore_100(& adapter->mwifiex_cmd_lock,cmd_flags);
  
#line 764 
  ret = mwifiex_dnld_cmd_to_fw(priv,cmd_node);
  
#line 765 
  priv = mwifiex_get_priv(adapter,(enum mwifiex_bss_role)MWIFIEX_BSS_ROLE_ANY);
  
#line 770 
  if (priv != (struct mwifiex_private *)0 && (unsigned int)host_cmd->command != 229U) {
    
#line 772 
    if ((unsigned int)adapter->hs_activated != 0U) {
      
#line 773 
      adapter->is_hs_configured = (unsigned char)0U;
      
#line 774 
      mwifiex_hs_activated_event(priv,(unsigned char)0);
    }
    else ;
  }
  else ;
  
#line 778 
  __retres = ret;
  return_label: 
#line 778 
                return __retres;
}


#line 787  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cmdevt.c"
int mwifiex_process_cmdresp(struct mwifiex_adapter *adapter)
{
  int __retres;
  struct host_cmd_ds_command *resp;
  uint16_t orig_cmdresp_no;
  uint16_t cmdresp_no;
  uint16_t cmdresp_result;
  unsigned long flags;
  
#line 790 
  struct mwifiex_private *priv = mwifiex_get_priv(adapter,(enum mwifiex_bss_role)MWIFIEX_BSS_ROLE_ANY);
  
#line 792 
  int ret = 0;
  
#line 799 
  ldv_del_timer_sync_101(& adapter->cmd_timer);
  
#line 801 
  if (adapter->curr_cmd == (struct cmd_ctrl_node *)0 || (adapter->curr_cmd)->resp_skb == (struct sk_buff *)0) {
    
#line 802 
    resp = (struct host_cmd_ds_command *)(& adapter->upld_buf);
    
#line 803 
    if ((adapter->debug_mask & 4U) != 0U) {
      
#line 803 
      if (adapter->dev != (struct device *)0) 
#line 803 
                                              _dev_info((struct device const *)adapter->dev,"CMD_RESP: NULL curr_cmd, %#x\n",(int)resp->command); else ;
    }
    else ;
    
#line 806 
    __retres = -1;
    
#line 806 
    goto return_label;
  }
  else ;
  
#line 809 
  adapter->is_cmd_timedout = (unsigned char)0U;
  
#line 811 
  resp = (struct host_cmd_ds_command *)((adapter->curr_cmd)->resp_skb)->data;
  
#line 812 
  if (((adapter->curr_cmd)->cmd_flag & 2U) != 0U) {
    
#line 813 
    if ((adapter->debug_mask & 4U) != 0U) {
      
#line 813 
      if (adapter->dev != (struct device *)0) 
#line 813 
                                              _dev_info((struct device const *)adapter->dev,"CMD_RESP: %#x been canceled\n",(int)resp->command); else ;
    }
    else ;
    
#line 816 
    mwifiex_recycle_cmd_node(adapter,adapter->curr_cmd);
    
#line 817 
    ldv___ldv_spin_lock_102(& adapter->mwifiex_cmd_lock);
    
#line 818 
    adapter->curr_cmd = (struct cmd_ctrl_node *)0;
    
#line 819 
    ldv_spin_unlock_irqrestore_103(& adapter->mwifiex_cmd_lock,flags);
    
#line 820 
    __retres = -1;
    
#line 820 
    goto return_label;
  }
  else ;
  
#line 823 
  if (((adapter->curr_cmd)->cmd_flag & 1U) != 0U) {
    struct mwifiex_ds_misc_cmd *hostcmd;
    int tmp_1;
    
#line 826 
    uint16_t size = resp->size;
    
#line 827 
    if ((adapter->debug_mask & 1073741824U) != 0U) {
      
#line 827 
      if (adapter->dev != (struct device *)0) 
#line 827 
                                              _dev_info((struct device const *)adapter->dev,"info: host cmd resp size = %d\n",(int)size); else ;
    }
    else ;
    {
      int tmp_0;
      
#line 829 
      u16 __min1 = size;
      
#line 829 
      u16 __min2 = (unsigned short)2048U;
      
#line 829 
      if ((int)__min1 < (int)__min2) 
#line 829 
                                     tmp_0 = (int)__min1; else 
#line 829 
                                                               tmp_0 = (int)__min2;
      
#line 829 
      tmp_1 = tmp_0;
    }
    
#line 829 
    size = (unsigned short)tmp_1;
    
#line 830 
    if ((adapter->curr_cmd)->data_buf != (void *)0) {
      
#line 831 
      hostcmd = (struct mwifiex_ds_misc_cmd *)(adapter->curr_cmd)->data_buf;
      
#line 832 
      hostcmd->len = (unsigned int)size;
      
#line 833 
      memcpy((void *)(& hostcmd->cmd),(void const *)resp,(unsigned long)size);
    }
    else ;
  }
  else ;
  
#line 836 
  orig_cmdresp_no = resp->command;
  
#line 839 
  priv = mwifiex_get_priv_by_id(adapter,(unsigned char)((int)((unsigned char)((int)resp->seq_num >> 8)) & 15),(unsigned char)((int)((unsigned char)((int)resp->seq_num >> 12))));
  
#line 842 
  if (priv == (struct mwifiex_private *)0) 
#line 843 
                                           priv = mwifiex_get_priv(adapter,(enum mwifiex_bss_role)MWIFIEX_BSS_ROLE_ANY); else ;
  
#line 845 
  resp->command = (unsigned short)((unsigned int)orig_cmdresp_no & 4095U);
  
#line 847 
  cmdresp_no = resp->command;
  
#line 848 
  cmdresp_result = resp->result;
  
#line 851 
  adapter->dbg.last_cmd_resp_index = (unsigned short)(((int)adapter->dbg.last_cmd_resp_index + 1) % 5);
  
#line 853 
  adapter->dbg.last_cmd_resp_id[(int)adapter->dbg.last_cmd_resp_index] = orig_cmdresp_no;
  
#line 856 
  if ((adapter->debug_mask & 16U) != 0U) {
    
#line 856 
    if (adapter->dev != (struct device *)0) 
#line 856 
                                            _dev_info((struct device const *)adapter->dev,"cmd: CMD_RESP: 0x%x, result %d, len %d, seqno 0x%x\n",(int)orig_cmdresp_no,(int)cmdresp_result,(int)resp->size,(int)resp->seq_num); else ;
  }
  else ;
  
#line 860 
  if ((adapter->debug_mask & 131072U) != 0U) 
#line 860 
                                             print_hex_dump("\001","CMD_RESP buffer:",2,16,1,(void const *)resp,(unsigned long)resp->size,(_Bool)0); else ;
  
#line 863 
  if ((int)orig_cmdresp_no >= 0) {
    
#line 864 
    if ((adapter->debug_mask & 4U) != 0U) {
      
#line 864 
      if (adapter->dev != (struct device *)0) 
#line 864 
                                              _dev_info((struct device const *)adapter->dev,"CMD_RESP: invalid cmd resp\n"); else ;
    }
    else ;
    
#line 865 
    if ((adapter->curr_cmd)->wait_q_enabled != 0U) 
#line 866 
                                                   adapter->cmd_wait_q.status = -1; else ;
    
#line 868 
    mwifiex_recycle_cmd_node(adapter,adapter->curr_cmd);
    
#line 869 
    ldv___ldv_spin_lock_104(& adapter->mwifiex_cmd_lock);
    
#line 870 
    adapter->curr_cmd = (struct cmd_ctrl_node *)0;
    
#line 871 
    ldv_spin_unlock_irqrestore_105(& adapter->mwifiex_cmd_lock,flags);
    
#line 872 
    __retres = -1;
    
#line 872 
    goto return_label;
  }
  else ;
  
#line 875 
  if (((adapter->curr_cmd)->cmd_flag & 1U) != 0U) {
    
#line 876 
    (adapter->curr_cmd)->cmd_flag &= 4294967294U;
    
#line 877 
    if ((unsigned int)cmdresp_result == 0U && (unsigned int)cmdresp_no == 229U) 
      
#line 879 
      ret = mwifiex_ret_802_11_hs_cfg(priv,resp); else ;
  }
  else 
#line 882 
       ret = mwifiex_process_sta_cmdresp(priv,(unsigned short)((int)cmdresp_no),resp);
  
#line 886 
  if (adapter->hw_status == (unsigned int)MWIFIEX_HW_STATUS_INITIALIZING) {
    
#line 887 
    if (ret != 0) {
      
#line 888 
      if ((adapter->debug_mask & 4U) != 0U) {
        
#line 888 
        if (adapter->dev != (struct device *)0) 
#line 888 
                                                _dev_info((struct device const *)adapter->dev,"%s: cmd %#x failed during\t","mwifiex_process_cmdresp",(int)cmdresp_no); else ;
      }
      else ;
      
#line 891 
      mwifiex_init_fw_complete(adapter);
      
#line 892 
      __retres = -1;
      
#line 892 
      goto return_label;
    }
    else 
      
#line 893 
      if ((int)adapter->last_init_cmd == (int)cmdresp_no) 
#line 894 
                                                          adapter->hw_status = MWIFIEX_HW_STATUS_INIT_DONE; else ;
  }
  else ;
  
#line 897 
  if (adapter->curr_cmd != (struct cmd_ctrl_node *)0) {
    
#line 898 
    if ((adapter->curr_cmd)->wait_q_enabled != 0U) 
#line 899 
                                                   adapter->cmd_wait_q.status = ret; else ;
    
#line 901 
    mwifiex_recycle_cmd_node(adapter,adapter->curr_cmd);
    
#line 903 
    ldv___ldv_spin_lock_106(& adapter->mwifiex_cmd_lock);
    
#line 904 
    adapter->curr_cmd = (struct cmd_ctrl_node *)0;
    
#line 905 
    ldv_spin_unlock_irqrestore_107(& adapter->mwifiex_cmd_lock,flags);
  }
  else ;
  
#line 908 
  __retres = ret;
  return_label: 
#line 908 
                return __retres;
}


#line 917  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cmdevt.c"
void mwifiex_cmd_timeout_func(unsigned long function_context)
{
  struct cmd_ctrl_node *cmd_node;
  
#line 919 
  struct mwifiex_adapter *adapter = (struct mwifiex_adapter *)function_context;
  
#line 923 
  adapter->is_cmd_timedout = (unsigned char)1U;
  
#line 924 
  if (adapter->curr_cmd == (struct cmd_ctrl_node *)0) {
    
#line 925 
    if ((adapter->debug_mask & 4U) != 0U) {
      
#line 925 
      if (adapter->dev != (struct device *)0) 
#line 925 
                                              _dev_info((struct device const *)adapter->dev,"cmd: empty curr_cmd\n"); else ;
    }
    else ;
    
#line 927 
    goto return_label;
  }
  else ;
  
#line 929 
  cmd_node = adapter->curr_cmd;
  
#line 930 
  if (cmd_node != (struct cmd_ctrl_node *)0) {
    
#line 931 
    adapter->dbg.timeout_cmd_id = adapter->dbg.last_cmd_id[(int)adapter->dbg.last_cmd_index];
    
#line 933 
    adapter->dbg.timeout_cmd_act = adapter->dbg.last_cmd_act[(int)adapter->dbg.last_cmd_index];
    
#line 935 
    if ((adapter->debug_mask & 1U) != 0U) {
      
#line 935 
      if (adapter->dev != (struct device *)0) 
#line 935 
                                              _dev_info((struct device const *)adapter->dev,"%s: Timeout cmd id = %#x, act = %#x\n","mwifiex_cmd_timeout_func",(int)adapter->dbg.timeout_cmd_id,(int)adapter->dbg.timeout_cmd_act); else ;
    }
    else ;
    
#line 940 
    if ((adapter->debug_mask & 1U) != 0U) {
      
#line 940 
      if (adapter->dev != (struct device *)0) 
#line 940 
                                              _dev_info((struct device const *)adapter->dev,"num_data_h2c_failure = %d\n",adapter->dbg.num_tx_host_to_card_failure); else ;
    }
    else ;
    
#line 943 
    if ((adapter->debug_mask & 1U) != 0U) {
      
#line 943 
      if (adapter->dev != (struct device *)0) 
#line 943 
                                              _dev_info((struct device const *)adapter->dev,"num_cmd_h2c_failure = %d\n",adapter->dbg.num_cmd_host_to_card_failure); else ;
    }
    else ;
    
#line 947 
    if ((adapter->debug_mask & 1U) != 0U) {
      
#line 947 
      if (adapter->dev != (struct device *)0) 
#line 947 
                                              _dev_info((struct device const *)adapter->dev,"is_cmd_timedout = %d\n",(int)adapter->is_cmd_timedout); else ;
    }
    else ;
    
#line 950 
    if ((adapter->debug_mask & 1U) != 0U) {
      
#line 950 
      if (adapter->dev != (struct device *)0) 
#line 950 
                                              _dev_info((struct device const *)adapter->dev,"num_tx_timeout = %d\n",adapter->dbg.num_tx_timeout); else ;
    }
    else ;
    
#line 954 
    if ((adapter->debug_mask & 1U) != 0U) {
      
#line 954 
      if (adapter->dev != (struct device *)0) 
#line 954 
                                              _dev_info((struct device const *)adapter->dev,"last_cmd_index = %d\n",(int)adapter->dbg.last_cmd_index); else ;
    }
    else ;
    
#line 957 
    if ((adapter->debug_mask & 1U) != 0U) {
      
#line 957 
      if (adapter->dev != (struct device *)0) 
#line 957 
                                              _dev_info((struct device const *)adapter->dev,"last_cmd_id: %*ph\n",10,(u16 *)(& adapter->dbg.last_cmd_id)); else ;
    }
    else ;
    
#line 961 
    if ((adapter->debug_mask & 1U) != 0U) {
      
#line 961 
      if (adapter->dev != (struct device *)0) 
#line 961 
                                              _dev_info((struct device const *)adapter->dev,"last_cmd_act: %*ph\n",10,(u16 *)(& adapter->dbg.last_cmd_act)); else ;
    }
    else ;
    
#line 966 
    if ((adapter->debug_mask & 1U) != 0U) {
      
#line 966 
      if (adapter->dev != (struct device *)0) 
#line 966 
                                              _dev_info((struct device const *)adapter->dev,"last_cmd_resp_index = %d\n",(int)adapter->dbg.last_cmd_resp_index); else ;
    }
    else ;
    
#line 969 
    if ((adapter->debug_mask & 1U) != 0U) {
      
#line 969 
      if (adapter->dev != (struct device *)0) 
#line 969 
                                              _dev_info((struct device const *)adapter->dev,"last_cmd_resp_id: %*ph\n",10,(u16 *)(& adapter->dbg.last_cmd_resp_id)); else ;
    }
    else ;
    
#line 974 
    if ((adapter->debug_mask & 1U) != 0U) {
      
#line 974 
      if (adapter->dev != (struct device *)0) 
#line 974 
                                              _dev_info((struct device const *)adapter->dev,"last_event_index = %d\n",(int)adapter->dbg.last_event_index); else ;
    }
    else ;
    
#line 977 
    if ((adapter->debug_mask & 1U) != 0U) {
      
#line 977 
      if (adapter->dev != (struct device *)0) 
#line 977 
                                              _dev_info((struct device const *)adapter->dev,"last_event: %*ph\n",10,(u16 *)(& adapter->dbg.last_event)); else ;
    }
    else ;
    
#line 982 
    if ((adapter->debug_mask & 1U) != 0U) {
      
#line 982 
      if (adapter->dev != (struct device *)0) 
#line 982 
                                              _dev_info((struct device const *)adapter->dev,"data_sent=%d cmd_sent=%d\n",(int)adapter->data_sent,(int)adapter->cmd_sent); else ;
    }
    else ;
    
#line 986 
    if ((adapter->debug_mask & 1U) != 0U) {
      
#line 986 
      if (adapter->dev != (struct device *)0) 
#line 986 
                                              _dev_info((struct device const *)adapter->dev,"ps_mode=%d ps_state=%d\n",(int)adapter->ps_mode,adapter->ps_state); else ;
    }
    else ;
    
#line 990 
    if (cmd_node->wait_q_enabled != 0U) {
      
#line 991 
      adapter->cmd_wait_q.status = -110;
      
#line 992 
      __wake_up(& adapter->cmd_wait_q.wait,1U,1,(void *)0);
      
#line 993 
      mwifiex_cancel_pending_ioctl(adapter);
    }
    else ;
  }
  else ;
  
#line 996 
  if (adapter->hw_status == (unsigned int)MWIFIEX_HW_STATUS_INITIALIZING) 
    
#line 997 
    mwifiex_init_fw_complete(adapter); else ;
  
#line 999 
  if (adapter->if_ops.device_dump != (void (*)(struct mwifiex_adapter *))0) 
    
#line 1000 
    (*(adapter->if_ops.device_dump))(adapter); else ;
  
#line 1002 
  if (adapter->if_ops.card_reset != (void (*)(struct mwifiex_adapter *))0) 
    
#line 1003 
    (*(adapter->if_ops.card_reset))(adapter); else ;
  return_label: 
#line 1004 
                return;
}


#line 1014  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cmdevt.c"
void mwifiex_cancel_all_pending_cmd(struct mwifiex_adapter *adapter)
{
  struct cmd_ctrl_node *tmp_node;
  unsigned long flags;
  unsigned long cmd_flags;
  struct mwifiex_private *priv;
  int i;
  struct cmd_ctrl_node *tmp;
  struct cmd_ctrl_node *tmp_0;
  struct cmd_ctrl_node *tmp_1;
  struct cmd_ctrl_node *tmp_2;
  struct cmd_ctrl_node *tmp_3;
  struct cmd_ctrl_node *tmp_4;
  
#line 1016 
  struct cmd_ctrl_node *cmd_node = (struct cmd_ctrl_node *)0;
  
#line 1021 
  ldv___ldv_spin_lock_108(& adapter->mwifiex_cmd_lock);
  
#line 1023 
  if (adapter->curr_cmd != (struct cmd_ctrl_node *)0 && (adapter->curr_cmd)->wait_q_enabled != 0U) {
    
#line 1024 
    (adapter->curr_cmd)->wait_q_enabled = 0U;
    
#line 1025 
    adapter->cmd_wait_q.status = -1;
    
#line 1026 
    mwifiex_complete_cmd(adapter,adapter->curr_cmd);
  }
  else ;
  
#line 1029 
  ldv___ldv_spin_lock_109(& adapter->cmd_pending_q_lock);
  {
    
#line 1030 
    struct list_head const *__mptr = (struct list_head const *)adapter->cmd_pending_q.next;
    
#line 1030 
    tmp = (struct cmd_ctrl_node *)__mptr;
  }
  
#line 1030 
  cmd_node = tmp;
  {
    
#line 1030 
    struct list_head const *__mptr_0 = (struct list_head const *)cmd_node->list.next;
    
#line 1030 
    tmp_0 = (struct cmd_ctrl_node *)__mptr_0;
  }
  
#line 1031 
  tmp_node = tmp_0;
  
#line 1030 
  goto ldv_61916;
  ldv_61915: 
#line 1031 
  ;
  
#line 1032 
  list_del(& cmd_node->list);
  
#line 1033 
  ldv_spin_unlock_irqrestore_110(& adapter->cmd_pending_q_lock,flags);
  
#line 1035 
  if (cmd_node->wait_q_enabled != 0U) {
    
#line 1036 
    adapter->cmd_wait_q.status = -1;
    
#line 1037 
    mwifiex_complete_cmd(adapter,cmd_node);
    
#line 1038 
    cmd_node->wait_q_enabled = 0U;
  }
  else ;
  
#line 1040 
  mwifiex_recycle_cmd_node(adapter,cmd_node);
  
#line 1041 
  ldv___ldv_spin_lock_111(& adapter->cmd_pending_q_lock);
  
#line 1030 
  cmd_node = tmp_node;
  {
    
#line 1030 
    struct list_head const *__mptr_1 = (struct list_head const *)tmp_node->list.next;
    
#line 1030 
    tmp_1 = (struct cmd_ctrl_node *)__mptr_1;
  }
  
#line 1030 
  tmp_node = tmp_1;
  ldv_61916: 
#line 1032 
  ;
  
#line 1030 
  if (& cmd_node->list != & adapter->cmd_pending_q) 
#line 1032 
                                                    goto ldv_61915; else 
                                                                    
#line 1035 
                                                                    goto ldv_61917;
  ldv_61917: 
#line 1036 
  ;
  
#line 1043 
  ldv_spin_unlock_irqrestore_112(& adapter->cmd_pending_q_lock,flags);
  
#line 1044 
  ldv_spin_unlock_irqrestore_113(& adapter->mwifiex_cmd_lock,cmd_flags);
  
#line 1047 
  ldv___ldv_spin_lock_114(& adapter->scan_pending_q_lock);
  {
    
#line 1048 
    struct list_head const *__mptr_2 = (struct list_head const *)adapter->scan_pending_q.next;
    
#line 1048 
    tmp_2 = (struct cmd_ctrl_node *)__mptr_2;
  }
  
#line 1048 
  cmd_node = tmp_2;
  {
    
#line 1048 
    struct list_head const *__mptr_3 = (struct list_head const *)cmd_node->list.next;
    
#line 1048 
    tmp_3 = (struct cmd_ctrl_node *)__mptr_3;
  }
  
#line 1049 
  tmp_node = tmp_3;
  
#line 1048 
  goto ldv_61925;
  ldv_61924: 
#line 1049 
  ;
  
#line 1050 
  list_del(& cmd_node->list);
  
#line 1052 
  cmd_node->wait_q_enabled = 0U;
  
#line 1053 
  mwifiex_insert_cmd_to_free_q(adapter,cmd_node);
  
#line 1048 
  cmd_node = tmp_node;
  {
    
#line 1048 
    struct list_head const *__mptr_4 = (struct list_head const *)tmp_node->list.next;
    
#line 1048 
    tmp_4 = (struct cmd_ctrl_node *)__mptr_4;
  }
  
#line 1048 
  tmp_node = tmp_4;
  ldv_61925: 
#line 1050 
  ;
  
#line 1048 
  if (& cmd_node->list != & adapter->scan_pending_q) 
#line 1050 
                                                     goto ldv_61924; else 
                                                                    
#line 1053 
                                                                    goto ldv_61926;
  ldv_61926: 
#line 1054 
  ;
  
#line 1055 
  ldv_spin_unlock_irqrestore_115(& adapter->scan_pending_q_lock,flags);
  
#line 1057 
  if (adapter->scan_processing != 0U) {
    
#line 1058 
    ldv___ldv_spin_lock_116(& adapter->mwifiex_cmd_lock);
    
#line 1059 
    adapter->scan_processing = 0U;
    
#line 1060 
    ldv_spin_unlock_irqrestore_117(& adapter->mwifiex_cmd_lock,cmd_flags);
    
#line 1061 
    i = 0;
    
#line 1061 
    goto ldv_61929;
    ldv_61928: 
#line 1062 
    ;
    
#line 1062 
    priv = adapter->priv[i];
    
#line 1063 
    if (priv == (struct mwifiex_private *)0) 
#line 1064 
                                             goto ldv_61927; else ;
    
#line 1065 
    if (priv->scan_request != (struct cfg80211_scan_request *)0) {
      
#line 1066 
      if ((adapter->debug_mask & 536870912U) != 0U) {
        
#line 1066 
        if (adapter->dev != (struct device *)0) 
#line 1066 
                                                _dev_info((struct device const *)adapter->dev,"info: aborting scan\n"); else ;
      }
      else ;
      
#line 1067 
      cfg80211_scan_done(priv->scan_request,(_Bool)1);
      
#line 1068 
      priv->scan_request = (struct cfg80211_scan_request *)0;
    }
    else ;
    ldv_61927: 
#line 1070 
    ;
    
#line 1061 
    i += 1;
    ldv_61929: 
#line 1062 
    ;
    
#line 1061 
    if ((int)adapter->priv_num > i) 
#line 1063 
                                    goto ldv_61928; else 
#line 1066 
                                                         goto ldv_61930;
    ldv_61930: 
#line 1067 
    ;
  }
  else ;
  
#line 1069 
  return;
}


#line 1085  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cmdevt.c"
void mwifiex_cancel_pending_ioctl(struct mwifiex_adapter *adapter)
{
  unsigned long cmd_flags;
  unsigned long scan_pending_q_flags;
  struct mwifiex_private *priv;
  int i;
  struct cmd_ctrl_node *tmp;
  struct cmd_ctrl_node *tmp_0;
  struct cmd_ctrl_node *tmp_1;
  
#line 1087 
  struct cmd_ctrl_node *cmd_node = (struct cmd_ctrl_node *)0;
  
#line 1087 
  struct cmd_ctrl_node *tmp_node = (struct cmd_ctrl_node *)0;
  
#line 1093 
  if (adapter->curr_cmd != (struct cmd_ctrl_node *)0 && (adapter->curr_cmd)->wait_q_enabled != 0U) {
    
#line 1095 
    ldv___ldv_spin_lock_118(& adapter->mwifiex_cmd_lock);
    
#line 1096 
    cmd_node = adapter->curr_cmd;
    
#line 1097 
    cmd_node->wait_q_enabled = 0U;
    
#line 1098 
    cmd_node->cmd_flag |= 2U;
    
#line 1099 
    mwifiex_recycle_cmd_node(adapter,cmd_node);
    
#line 1100 
    mwifiex_complete_cmd(adapter,adapter->curr_cmd);
    
#line 1101 
    adapter->curr_cmd = (struct cmd_ctrl_node *)0;
    
#line 1102 
    ldv_spin_unlock_irqrestore_119(& adapter->mwifiex_cmd_lock,cmd_flags);
  }
  else ;
  
#line 1106 
  ldv___ldv_spin_lock_120(& adapter->scan_pending_q_lock);
  {
    
#line 1108 
    struct list_head const *__mptr = (struct list_head const *)adapter->scan_pending_q.next;
    
#line 1108 
    tmp = (struct cmd_ctrl_node *)__mptr;
  }
  
#line 1108 
  cmd_node = tmp;
  {
    
#line 1108 
    struct list_head const *__mptr_0 = (struct list_head const *)cmd_node->list.next;
    
#line 1108 
    tmp_0 = (struct cmd_ctrl_node *)__mptr_0;
  }
  
#line 1109 
  tmp_node = tmp_0;
  
#line 1108 
  goto ldv_61947;
  ldv_61946: 
#line 1109 
  ;
  
#line 1110 
  list_del(& cmd_node->list);
  
#line 1111 
  cmd_node->wait_q_enabled = 0U;
  
#line 1112 
  mwifiex_insert_cmd_to_free_q(adapter,cmd_node);
  
#line 1108 
  cmd_node = tmp_node;
  {
    
#line 1108 
    struct list_head const *__mptr_1 = (struct list_head const *)tmp_node->list.next;
    
#line 1108 
    tmp_1 = (struct cmd_ctrl_node *)__mptr_1;
  }
  
#line 1108 
  tmp_node = tmp_1;
  ldv_61947: 
#line 1110 
  ;
  
#line 1108 
  if (& cmd_node->list != & adapter->scan_pending_q) 
#line 1110 
                                                     goto ldv_61946; else 
                                                                    
#line 1113 
                                                                    goto ldv_61948;
  ldv_61948: 
#line 1114 
  ;
  
#line 1114 
  ldv_spin_unlock_irqrestore_121(& adapter->scan_pending_q_lock,scan_pending_q_flags);
  
#line 1117 
  if (adapter->scan_processing != 0U) {
    
#line 1118 
    ldv___ldv_spin_lock_122(& adapter->mwifiex_cmd_lock);
    
#line 1119 
    adapter->scan_processing = 0U;
    
#line 1120 
    ldv_spin_unlock_irqrestore_123(& adapter->mwifiex_cmd_lock,cmd_flags);
    
#line 1121 
    i = 0;
    
#line 1121 
    goto ldv_61951;
    ldv_61950: 
#line 1122 
    ;
    
#line 1122 
    priv = adapter->priv[i];
    
#line 1123 
    if (priv == (struct mwifiex_private *)0) 
#line 1124 
                                             goto ldv_61949; else ;
    
#line 1125 
    if (priv->scan_request != (struct cfg80211_scan_request *)0) {
      
#line 1126 
      if ((adapter->debug_mask & 536870912U) != 0U) {
        
#line 1126 
        if (adapter->dev != (struct device *)0) 
#line 1126 
                                                _dev_info((struct device const *)adapter->dev,"info: aborting scan\n"); else ;
      }
      else ;
      
#line 1127 
      cfg80211_scan_done(priv->scan_request,(_Bool)1);
      
#line 1128 
      priv->scan_request = (struct cfg80211_scan_request *)0;
    }
    else ;
    ldv_61949: 
#line 1130 
    ;
    
#line 1121 
    i += 1;
    ldv_61951: 
#line 1122 
    ;
    
#line 1121 
    if ((int)adapter->priv_num > i) 
#line 1123 
                                    goto ldv_61950; else 
#line 1126 
                                                         goto ldv_61952;
    ldv_61952: 
#line 1127 
    ;
  }
  else ;
  
#line 1132 
  adapter->cmd_wait_q.status = -1;
  
#line 1133 
  return;
}


#line 1145  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cmdevt.c"
void mwifiex_check_ps_cond(struct mwifiex_adapter *adapter)
{
  
#line 1147 
  if (((unsigned int)adapter->cmd_sent == 0U && adapter->curr_cmd == (struct cmd_ctrl_node *)0) && (((unsigned int)adapter->cmd_resp_received == 0U && (unsigned int)adapter->event_received == 0U) && (unsigned int)adapter->data_received == 0U)) 
    
#line 1149 
    mwifiex_dnld_sleep_confirm_cmd(adapter);
  else 
    
#line 1151 
    if ((adapter->debug_mask & 16U) != 0U) {
      
#line 1151 
      if (adapter->dev != (struct device *)0) {
        char *tmp;
        char *tmp_0;
        char *tmp_1;
        
#line 1151 
        if (((unsigned int)adapter->cmd_resp_received != 0U || (unsigned int)adapter->event_received != 0U) || (unsigned int)adapter->data_received != 0U) 
          
#line 1151 
          tmp = (char *)"R"; else 
#line 1151 
                                  tmp = (char *)"";
        
#line 1151 
        if (adapter->curr_cmd != (struct cmd_ctrl_node *)0) 
#line 1151 
                                                            tmp_0 = (char *)"C"; else 
                                                                    
#line 1151 
                                                                    tmp_0 = (char *)"";
        
#line 1151 
        if ((unsigned int)adapter->cmd_sent != 0U) 
#line 1151 
                                                   tmp_1 = (char *)"D"; else 
                                                                    
#line 1151 
                                                                    tmp_1 = (char *)"";
        
#line 1151 
        ;
        
#line 1151 
        _dev_info((struct device const *)adapter->dev,"cmd: Delay Sleep Confirm (%s%s%s)\n",tmp_1,tmp_0,tmp);
      }
      else ;
    }
    else ;
  
#line 1152 
  return;
}


#line 1164  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cmdevt.c"
void mwifiex_hs_activated_event(struct mwifiex_private *priv, u8 activated)
{
  
#line 1166 
  if ((unsigned int)activated != 0U) {
    
#line 1167 
    if ((unsigned int)(priv->adapter)->is_hs_configured != 0U) {
      
#line 1168 
      (priv->adapter)->hs_activated = (unsigned char)1U;
      
#line 1169 
      mwifiex_update_rxreor_flags(priv->adapter,(unsigned char)1);
      
#line 1171 
      if (((priv->adapter)->debug_mask & 32U) != 0U) {
        
#line 1171 
        if ((priv->adapter)->dev != (struct device *)0) 
#line 1171 
                                                        _dev_info((struct device const *)(priv->adapter)->dev,"event: hs_activated\n"); else ;
      }
      else ;
      
#line 1173 
      (priv->adapter)->hs_activate_wait_q_woken = (unsigned short)1U;
      
#line 1174 
      __wake_up(& (priv->adapter)->hs_activate_wait_q,1U,1,(void *)0);
    }
    else 
      
#line 1177 
      if (((priv->adapter)->debug_mask & 32U) != 0U) {
        
#line 1177 
        if ((priv->adapter)->dev != (struct device *)0) 
#line 1177 
                                                        _dev_info((struct device const *)(priv->adapter)->dev,"event: HS not configured\n"); else ;
      }
      else ;
  }
  else {
    
#line 1181 
    if (((priv->adapter)->debug_mask & 32U) != 0U) {
      
#line 1181 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 1181 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"event: hs_deactivated\n"); else ;
    }
    else ;
    
#line 1183 
    (priv->adapter)->hs_activated = (unsigned char)0U;
  }
  
#line 1185 
  return;
}


#line 1197  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cmdevt.c"
int mwifiex_ret_802_11_hs_cfg(struct mwifiex_private *priv, struct host_cmd_ds_command *resp)
{
  int __retres;
  
#line 1200 
  struct mwifiex_adapter *adapter = priv->adapter;
  
#line 1201 
  struct host_cmd_ds_802_11_hs_cfg_enh *phs_cfg = & resp->params.opt_hs_cfg;
  
#line 1203 
  uint32_t conditions = phs_cfg->params.hs_config.conditions;
  
#line 1205 
  if ((unsigned int)phs_cfg->action == 2U && (unsigned int)adapter->iface_type != 2U) {
    
#line 1207 
    mwifiex_hs_activated_event(priv,(unsigned char)1);
    
#line 1208 
    __retres = 0;
    
#line 1208 
    goto return_label;
  }
  else 
    
#line 1210 
    if ((adapter->debug_mask & 16U) != 0U) {
      
#line 1210 
      if (adapter->dev != (struct device *)0) 
#line 1210 
                                              _dev_info((struct device const *)adapter->dev,"cmd: CMD_RESP: HS_CFG cmd reply\t",(int)resp->result,conditions,(int)phs_cfg->params.hs_config.gpio,(int)phs_cfg->params.hs_config.gap); else ;
    }
    else ;
  
#line 1217 
  if (conditions != 4294967295U) {
    
#line 1218 
    adapter->is_hs_configured = (unsigned char)1U;
    
#line 1219 
    if ((unsigned int)adapter->iface_type == 2U) 
#line 1220 
                                                 mwifiex_hs_activated_event(priv,(unsigned char)1); else ;
  }
  else {
    
#line 1222 
    adapter->is_hs_configured = (unsigned char)0U;
    
#line 1223 
    if ((unsigned int)adapter->hs_activated != 0U) 
#line 1224 
                                                   mwifiex_hs_activated_event(priv,(unsigned char)0); else ;
  }
  
#line 1227 
  __retres = 0;
  return_label: 
#line 1227 
                return __retres;
}


#line 1235  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cmdevt.c"
void mwifiex_process_hs_config(struct mwifiex_adapter *adapter)
{
  struct mwifiex_private *tmp;
  
#line 1237 
  if ((adapter->debug_mask & 1073741824U) != 0U) {
    
#line 1237 
    if (adapter->dev != (struct device *)0) 
#line 1237 
                                            _dev_info((struct device const *)adapter->dev,"info: %s: auto cancelling host sleep\t","mwifiex_process_hs_config"); else ;
  }
  else ;
  
#line 1242 
  (*(adapter->if_ops.wakeup))(adapter);
  
#line 1243 
  adapter->hs_activated = (unsigned char)0U;
  
#line 1244 
  adapter->is_hs_configured = (unsigned char)0U;
  
#line 1245 
  adapter->is_suspended = (_Bool)0;
  
#line 1246 
  tmp = mwifiex_get_priv(adapter,(enum mwifiex_bss_role)MWIFIEX_BSS_ROLE_ANY);
  
#line 1246 
  mwifiex_hs_activated_event(tmp,(unsigned char)0);
  
#line 1247 
  return;
}


#line 1250  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cmdevt.c"
static char const __kstrtab_mwifiex_process_hs_config[26U] = {(char)'m', (char)'w', (char)'i', (char)'f', (char)'i', (char)'e', (char)'x', (char)'_', (char)'p', (char)'r', (char)'o', (char)'c', (char)'e', (char)'s', (char)'s', (char)'_', (char)'h', (char)'s', (char)'_', (char)'c', (char)'o', (char)'n', (char)'f', (char)'i', (char)'g', (char)'\000'};

#line 1250 
struct kernel_symbol const __ksymtab_mwifiex_process_hs_config;


#line 1250  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cmdevt.c"
struct kernel_symbol const __ksymtab_mwifiex_process_hs_config = {.value = (unsigned long)(& mwifiex_process_hs_config), .name = (char const *)(& __kstrtab_mwifiex_process_hs_config)};

#line 1258  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cmdevt.c"
void mwifiex_process_sleep_confirm_resp(struct mwifiex_adapter *adapter, u8 *pbuf, u32 upld_len)
{
  
#line 1261 
  struct host_cmd_ds_command *cmd = (struct host_cmd_ds_command *)pbuf;
  
#line 1262 
  struct mwifiex_private *priv = mwifiex_get_priv(adapter,(enum mwifiex_bss_role)MWIFIEX_BSS_ROLE_ANY);
  
#line 1264 
  uint16_t result = cmd->result;
  
#line 1265 
  uint16_t command = cmd->command;
  
#line 1266 
  uint16_t seq_num = cmd->seq_num;
  
#line 1268 
  if (upld_len == 0U) {
    
#line 1269 
    if ((adapter->debug_mask & 4U) != 0U) {
      
#line 1269 
      if (adapter->dev != (struct device *)0) 
#line 1269 
                                              _dev_info((struct device const *)adapter->dev,"%s: cmd size is 0\n","mwifiex_process_sleep_confirm_resp"); else ;
    }
    else ;
    
#line 1271 
    goto return_label;
  }
  else ;
  
#line 1274 
  if ((adapter->debug_mask & 16U) != 0U) {
    
#line 1274 
    if (adapter->dev != (struct device *)0) 
#line 1274 
                                            _dev_info((struct device const *)adapter->dev,"cmd: CMD_RESP: 0x%x, result %d, len %d, seqno 0x%x\n",(int)command,(int)result,(int)cmd->size,(int)seq_num); else ;
  }
  else ;
  
#line 1279 
  priv = mwifiex_get_priv_by_id(adapter,(unsigned char)((int)((unsigned char)((int)seq_num >> 8)) & 15),(unsigned char)((int)((unsigned char)((int)seq_num >> 12))));
  
#line 1281 
  if (priv == (struct mwifiex_private *)0) 
#line 1282 
                                           priv = mwifiex_get_priv(adapter,(enum mwifiex_bss_role)MWIFIEX_BSS_ROLE_ANY); else ;
  
#line 1285 
  seq_num = (unsigned short)((unsigned int)seq_num & 255U);
  
#line 1287 
  command = (unsigned short)((unsigned int)command & 4095U);
  
#line 1289 
  if ((unsigned int)command != 228U) {
    
#line 1290 
    if ((adapter->debug_mask & 4U) != 0U) {
      
#line 1290 
      if (adapter->dev != (struct device *)0) 
#line 1290 
                                              _dev_info((struct device const *)adapter->dev,"%s: rcvd unexpected resp for cmd %#x, result = %x\n","mwifiex_process_sleep_confirm_resp",(int)command,(int)result); else ;
    }
    else ;
    
#line 1293 
    goto return_label;
  }
  else ;
  
#line 1296 
  if ((unsigned int)result != 0U) {
    
#line 1297 
    if ((adapter->debug_mask & 4U) != 0U) {
      
#line 1297 
      if (adapter->dev != (struct device *)0) 
#line 1297 
                                              _dev_info((struct device const *)adapter->dev,"%s: sleep confirm cmd failed\n","mwifiex_process_sleep_confirm_resp"); else ;
    }
    else ;
    
#line 1300 
    adapter->pm_wakeup_card_req = (unsigned char)0U;
    
#line 1301 
    adapter->ps_state = 0U;
    
#line 1302 
    goto return_label;
  }
  else ;
  
#line 1304 
  adapter->pm_wakeup_card_req = (unsigned char)1U;
  
#line 1305 
  if ((unsigned int)adapter->is_hs_configured != 0U) {
    struct mwifiex_private *tmp_0;
    
#line 1306 
    tmp_0 = mwifiex_get_priv(adapter,(enum mwifiex_bss_role)MWIFIEX_BSS_ROLE_ANY);
    
#line 1306 
    mwifiex_hs_activated_event(tmp_0,(unsigned char)1);
  }
  else ;
  
#line 1309 
  adapter->ps_state = 3U;
  
#line 1310 
  cmd->command = command;
  
#line 1311 
  cmd->seq_num = seq_num;
  return_label: 
#line 1312 
                return;
}


#line 1313  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cmdevt.c"
static char const __kstrtab_mwifiex_process_sleep_confirm_resp[35U] = {(char)'m', (char)'w', (char)'i', (char)'f', (char)'i', (char)'e', (char)'x', (char)'_', (char)'p', (char)'r', (char)'o', (char)'c', (char)'e', (char)'s', (char)'s', (char)'_', (char)'s', (char)'l', (char)'e', (char)'e', (char)'p', (char)'_', (char)'c', (char)'o', (char)'n', (char)'f', (char)'i', (char)'r', (char)'m', (char)'_', (char)'r', (char)'e', (char)'s', (char)'p', (char)'\000'};

#line 1313 
struct kernel_symbol const __ksymtab_mwifiex_process_sleep_confirm_resp;


#line 1313  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cmdevt.c"
struct kernel_symbol const __ksymtab_mwifiex_process_sleep_confirm_resp = {.value = (unsigned long)(& mwifiex_process_sleep_confirm_resp), .name = (char const *)(& __kstrtab_mwifiex_process_sleep_confirm_resp)};

#line 1327  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cmdevt.c"
int mwifiex_cmd_enh_power_mode(struct mwifiex_private *priv, struct host_cmd_ds_command *cmd, u16 cmd_action, uint16_t ps_bitmap, struct mwifiex_ds_auto_ds *auto_ds)
{
  int __retres;
  u8 *tlv;
  
#line 1332 
  struct host_cmd_ds_802_11_ps_mode_enh *psmode_enh = & cmd->params.psmode_enh;
  
#line 1335 
  u16 cmd_size = (unsigned short)0U;
  
#line 1337 
  cmd->command = (unsigned short)228U;
  
#line 1338 
  if ((unsigned int)cmd_action == 254U) {
    
#line 1339 
    psmode_enh->action = (unsigned short)254U;
    
#line 1340 
    psmode_enh->params.ps_bitmap = ps_bitmap;
    
#line 1341 
    cmd->size = (unsigned short)12U;
  }
  else 
    
#line 1343 
    if ((unsigned int)cmd_action == 0U) {
      
#line 1344 
      psmode_enh->action = (unsigned short)0U;
      
#line 1345 
      psmode_enh->params.ps_bitmap = ps_bitmap;
      
#line 1346 
      cmd->size = (unsigned short)12U;
    }
    else 
      
#line 1348 
      if ((unsigned int)cmd_action == 255U) {
        
#line 1349 
        psmode_enh->action = (unsigned short)255U;
        
#line 1350 
        psmode_enh->params.ps_bitmap = ps_bitmap;
        
#line 1351 
        cmd_size = (unsigned short)12U;
        
#line 1353 
        tlv = (u8 *)cmd + (int)cmd_size;
        
#line 1354 
        if (((int)ps_bitmap & 16) != 0) {
          
#line 1355 
          struct mwifiex_adapter *adapter = priv->adapter;
          
#line 1356 
          struct mwifiex_ie_types_ps_param *ps_tlv = (struct mwifiex_ie_types_ps_param *)tlv;
          
#line 1358 
          struct mwifiex_ps_param *ps_mode = & ps_tlv->param;
          
#line 1359 
          ps_tlv->header.type = (unsigned short)370U;
          
#line 1360 
          ps_tlv->header.len = (unsigned short)14U;
          
#line 1362 
          cmd_size = (unsigned short)((unsigned int)cmd_size + 18U);
          
#line 1363 
          tlv += 18U;
          
#line 1364 
          if (((priv->adapter)->debug_mask & 16U) != 0U) {
            
#line 1364 
            if ((priv->adapter)->dev != (struct device *)0) 
#line 1364 
                                                            _dev_info((struct device const *)(priv->adapter)->dev,"cmd: PS Command: Enter PS\n"); else ;
          }
          else ;
          
#line 1366 
          ps_mode->null_pkt_interval = adapter->null_pkt_interval;
          
#line 1368 
          ps_mode->multiple_dtims = adapter->multiple_dtim;
          
#line 1370 
          ps_mode->bcn_miss_timeout = adapter->bcn_miss_time_out;
          
#line 1372 
          ps_mode->local_listen_interval = adapter->local_listen_interval;
          
#line 1374 
          ps_mode->adhoc_wake_period = adapter->adhoc_awake_period;
          
#line 1376 
          ps_mode->delay_to_ps = adapter->delay_to_ps;
          
#line 1378 
          ps_mode->mode = adapter->enhanced_ps_mode;
        }
        else ;
        
#line 1381 
        if (((int)ps_bitmap & 1) != 0) {
          
#line 1382 
          struct mwifiex_ie_types_auto_ds_param *auto_ds_tlv = (struct mwifiex_ie_types_auto_ds_param *)tlv;
          
#line 1384 
          u16 idletime = (unsigned short)0U;
          
#line 1386 
          auto_ds_tlv->header.type = (unsigned short)369U;
          
#line 1388 
          auto_ds_tlv->header.len = (unsigned short)2U;
          
#line 1391 
          cmd_size = (unsigned short)((unsigned int)cmd_size + 6U);
          
#line 1392 
          tlv += 6U;
          
#line 1393 
          if (auto_ds != (struct mwifiex_ds_auto_ds *)0) 
#line 1394 
                                                         idletime = auto_ds->idle_time; else ;
          
#line 1395 
          if (((priv->adapter)->debug_mask & 16U) != 0U) {
            
#line 1395 
            if ((priv->adapter)->dev != (struct device *)0) 
#line 1395 
                                                            _dev_info((struct device const *)(priv->adapter)->dev,"cmd: PS Command: Enter Auto Deep Sleep\n"); else ;
          }
          else ;
          
#line 1397 
          auto_ds_tlv->deep_sleep_timeout = idletime;
        }
        else ;
        
#line 1399 
        cmd->size = cmd_size;
      }
      else ;
  
#line 1401 
  __retres = 0;
  
#line 1401 
  return __retres;
}


#line 1411  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cmdevt.c"
int mwifiex_ret_enh_power_mode(struct mwifiex_private *priv, struct host_cmd_ds_command *resp, struct mwifiex_ds_pm_cfg *pm_cfg)
{
  int __retres;
  
#line 1415 
  struct mwifiex_adapter *adapter = priv->adapter;
  
#line 1416 
  struct host_cmd_ds_802_11_ps_mode_enh *ps_mode = & resp->params.psmode_enh;
  
#line 1418 
  uint16_t action = ps_mode->action;
  
#line 1419 
  uint16_t ps_bitmap = ps_mode->params.ps_bitmap;
  
#line 1420 
  uint16_t auto_ps_bitmap = ps_mode->params.ps_bitmap;
  
#line 1423 
  if ((adapter->debug_mask & 1073741824U) != 0U) {
    
#line 1423 
    if (adapter->dev != (struct device *)0) 
#line 1423 
                                            _dev_info((struct device const *)adapter->dev,"info: %s: PS_MODE cmd reply result=%#x action=%#X\n","mwifiex_ret_enh_power_mode",(int)resp->result,(int)action); else ;
  }
  else ;
  
#line 1426 
  if ((unsigned int)action == 255U) {
    
#line 1427 
    if (((int)auto_ps_bitmap & 1) != 0) {
      
#line 1428 
      if ((adapter->debug_mask & 16U) != 0U) {
        
#line 1428 
        if (adapter->dev != (struct device *)0) 
#line 1428 
                                                _dev_info((struct device const *)adapter->dev,"cmd: Enabled auto deep sleep\n"); else ;
      }
      else ;
      
#line 1430 
      (priv->adapter)->is_deep_sleep = (unsigned char)1U;
    }
    else ;
    
#line 1432 
    if (((int)auto_ps_bitmap & 16) != 0) {
      
#line 1433 
      if ((adapter->debug_mask & 16U) != 0U) {
        
#line 1433 
        if (adapter->dev != (struct device *)0) 
#line 1433 
                                                _dev_info((struct device const *)adapter->dev,"cmd: Enabled STA power save\n"); else ;
      }
      else ;
      
#line 1435 
      if ((unsigned int)adapter->sleep_period.period != 0U) {
        
#line 1436 
        if ((adapter->debug_mask & 16U) != 0U) {
          
#line 1436 
          if (adapter->dev != (struct device *)0) 
#line 1436 
                                                  _dev_info((struct device const *)adapter->dev,"cmd: set to uapsd/pps mode\n"); else ;
        }
        else ;
      }
      else ;
    }
    else ;
  }
  else 
    
#line 1439 
    if ((unsigned int)action == 254U) {
      
#line 1440 
      if (((int)ps_bitmap & 1) != 0) {
        
#line 1441 
        (priv->adapter)->is_deep_sleep = (unsigned char)0U;
        
#line 1442 
        if ((adapter->debug_mask & 16U) != 0U) {
          
#line 1442 
          if (adapter->dev != (struct device *)0) 
#line 1442 
                                                  _dev_info((struct device const *)adapter->dev,"cmd: Disabled auto deep sleep\n"); else ;
        }
        else ;
      }
      else ;
      
#line 1445 
      if (((int)ps_bitmap & 16) != 0) {
        
#line 1446 
        if ((adapter->debug_mask & 16U) != 0U) {
          
#line 1446 
          if (adapter->dev != (struct device *)0) 
#line 1446 
                                                  _dev_info((struct device const *)adapter->dev,"cmd: Disabled STA power save\n"); else ;
        }
        else ;
        
#line 1448 
        if ((unsigned int)adapter->sleep_period.period != 0U) {
          
#line 1449 
          adapter->delay_null_pkt = (unsigned char)0U;
          
#line 1450 
          adapter->tx_lock_flag = (unsigned char)0U;
          
#line 1451 
          adapter->pps_uapsd_mode = (unsigned short)0U;
        }
        else ;
      }
      else ;
    }
    else 
      
#line 1454 
      if ((unsigned int)action == 0U) {
        
#line 1455 
        if (((int)ps_bitmap & 16) != 0) 
#line 1456 
                                        adapter->ps_mode = (unsigned short)1U; else 
                                                                    
#line 1458 
                                                                    adapter->ps_mode = (unsigned short)0U;
        
#line 1460 
        if ((adapter->debug_mask & 16U) != 0U) {
          
#line 1460 
          if (adapter->dev != (struct device *)0) 
#line 1460 
                                                  _dev_info((struct device const *)adapter->dev,"cmd: ps_bitmap=%#x\n",(int)ps_bitmap); else ;
        }
        else ;
        
#line 1463 
        if (pm_cfg != (struct mwifiex_ds_pm_cfg *)0) 
          
#line 1465 
          if (((int)ps_bitmap & 16) != 0) 
#line 1466 
                                          pm_cfg->param.ps_mode = 1U; else 
                                                                    
#line 1468 
                                                                    pm_cfg->param.ps_mode = 0U;
        else ;
      }
      else ;
  
#line 1471 
  __retres = 0;
  
#line 1471 
  return __retres;
}


#line 1482  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cmdevt.c"
int mwifiex_cmd_get_hw_spec(struct mwifiex_private *priv, struct host_cmd_ds_command *cmd)
{
  int __retres;
  
#line 1485 
  struct host_cmd_ds_get_hw_spec *hw_spec = & cmd->params.hw_spec;
  
#line 1487 
  cmd->command = (unsigned short)3U;
  
#line 1488 
  cmd->size = (unsigned short)71U;
  
#line 1490 
  memcpy((void *)(& hw_spec->permanent_addr),(void const *)(& priv->curr_addr),6UL);
  
#line 1492 
  __retres = 0;
  
#line 1492 
  return __retres;
}


#line 1515  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cmdevt.c"
int mwifiex_ret_get_hw_spec(struct mwifiex_private *priv, struct host_cmd_ds_command *resp)
{
  int __retres;
  struct mwifiex_ie_types_header *tlv;
  struct hw_spec_api_rev *api_rev;
  u16 resp_size;
  u16 api_id;
  int i;
  int left_len;
  
#line 1518 
  struct host_cmd_ds_get_hw_spec *hw_spec = & resp->params.hw_spec;
  
#line 1519 
  struct mwifiex_adapter *adapter = priv->adapter;
  
#line 1523 
  int parsed_len = 0;
  
#line 1525 
  adapter->fw_cap_info = hw_spec->fw_cap_info;
  
#line 1527 
  if (((unsigned long)adapter->fw_cap_info & 12032UL) != 0UL) 
#line 1528 
                                                              adapter->fw_bands = (unsigned char)((unsigned int)((unsigned char)(adapter->fw_cap_info >> 8)) & 47U); else 
                                                                    
#line 1530 
                                                                    adapter->fw_bands = (unsigned char)1U;
  
#line 1532 
  adapter->config_bands = adapter->fw_bands;
  
#line 1534 
  if (((int)adapter->fw_bands & 4) != 0) {
    
#line 1535 
    if (((int)adapter->fw_bands & 8) != 0) {
      
#line 1536 
      adapter->config_bands = (unsigned char)((unsigned int)adapter->config_bands | 16U);
      
#line 1537 
      adapter->fw_bands = (unsigned char)((unsigned int)adapter->fw_bands | 16U);
    }
    else ;
    
#line 1539 
    if (((int)adapter->fw_bands & 16) != 0) {
      
#line 1540 
      adapter->adhoc_start_band = (unsigned char)20U;
      
#line 1541 
      adapter->adhoc_11n_enabled = (unsigned char)1U;
    }
    else 
#line 1543 
         adapter->adhoc_start_band = (unsigned char)4U;
    
#line 1545 
    priv->adhoc_channel = (unsigned char)36U;
  }
  else 
    
#line 1546 
    if (((int)adapter->fw_bands & 8) != 0) {
      
#line 1547 
      adapter->adhoc_start_band = (unsigned char)11U;
      
#line 1548 
      priv->adhoc_channel = (unsigned char)6U;
      
#line 1549 
      adapter->adhoc_11n_enabled = (unsigned char)1U;
    }
    else 
      
#line 1550 
      if (((int)adapter->fw_bands & 2) != 0) {
        
#line 1551 
        adapter->adhoc_start_band = (unsigned char)3U;
        
#line 1552 
        priv->adhoc_channel = (unsigned char)6U;
      }
      else 
        
#line 1553 
        if (((int)adapter->fw_bands & 1) != 0) {
          
#line 1554 
          adapter->adhoc_start_band = (unsigned char)1U;
          
#line 1555 
          priv->adhoc_channel = (unsigned char)6U;
        }
        else ;
  
#line 1558 
  adapter->fw_release_number = hw_spec->fw_release_number;
  
#line 1559 
  adapter->fw_api_ver = (unsigned char)(adapter->fw_release_number >> 16);
  
#line 1560 
  adapter->number_of_antenna = hw_spec->number_of_antenna;
  
#line 1562 
  if (hw_spec->dot_11ac_dev_cap != 0U) {
    
#line 1563 
    adapter->is_hw_11ac_capable = 1U;
    
#line 1566 
    adapter->hw_dot_11ac_dev_cap = hw_spec->dot_11ac_dev_cap;
    
#line 1568 
    adapter->usr_dot_11ac_dev_cap_bg = adapter->hw_dot_11ac_dev_cap & 4292933631U;
    
#line 1570 
    adapter->usr_dot_11ac_dev_cap_a = adapter->hw_dot_11ac_dev_cap & 4292933631U;
    
#line 1574 
    adapter->hw_dot_11ac_mcs_support = hw_spec->dot_11ac_mcs_support;
    
#line 1576 
    adapter->usr_dot_11ac_mcs_support = adapter->hw_dot_11ac_mcs_support;
  }
  else 
#line 1579 
       adapter->is_hw_11ac_capable = 0U;
  
#line 1582 
  resp_size = (unsigned short)((unsigned int)resp->size + 65528U);
  
#line 1583 
  if ((unsigned int)resp_size > 63U) {
    
#line 1585 
    left_len = (int)((unsigned int)resp_size + 4294967233U);
    
#line 1586 
    goto ldv_62050;
    ldv_62049: 
#line 1587 
    ;
    
#line 1587 
    tlv = (struct mwifiex_ie_types_header *)(& hw_spec->tlvs) + parsed_len;
    
#line 1588 
    switch ((int)tlv->type) {
      case 455: 
#line 1589 
      ;
      
#line 1590 
      api_rev = (struct hw_spec_api_rev *)tlv;
      
#line 1591 
      api_id = api_rev->api_id;
      
#line 1592 
      switch ((int)api_id) {
        case 1: 
#line 1593 
        ;
        
#line 1594 
        adapter->key_api_major_ver = api_rev->major_ver;
        
#line 1596 
        adapter->key_api_minor_ver = api_rev->minor_ver;
        
#line 1598 
        if ((adapter->debug_mask & 1073741824U) != 0U) {
          
#line 1598 
          if (adapter->dev != (struct device *)0) 
#line 1598 
                                                  _dev_info((struct device const *)adapter->dev,"key_api v%d.%d\n",(int)adapter->key_api_major_ver,(int)adapter->key_api_minor_ver); else ;
        }
        else ;
        
#line 1602 
        goto ldv_62044;
        case 2: 
#line 1603 
        ;
        
#line 1604 
        adapter->fw_api_ver = api_rev->major_ver;
        
#line 1606 
        if ((adapter->debug_mask & 1073741824U) != 0U) {
          
#line 1606 
          if (adapter->dev != (struct device *)0) 
#line 1606 
                                                  _dev_info((struct device const *)adapter->dev,"Firmware api version %d\n",(int)adapter->fw_api_ver); else ;
        }
        else ;
        
#line 1609 
        goto ldv_62044;
        default: 
#line 1610 
        ;
        
#line 1611 
        if ((adapter->debug_mask & 2U) != 0U) {
          
#line 1611 
          if (adapter->dev != (struct device *)0) 
#line 1611 
                                                  _dev_info((struct device const *)adapter->dev,"Unknown api_id: %d\n",(int)api_id); else ;
        }
        else ;
        
#line 1614 
        goto ldv_62044;
      }
      ldv_62044: 
#line 1616 
      ;
      
#line 1616 
      goto ldv_62047;
      default: 
#line 1617 
      ;
      
#line 1618 
      if ((adapter->debug_mask & 2U) != 0U) {
        
#line 1618 
        if (adapter->dev != (struct device *)0) 
#line 1618 
                                                _dev_info((struct device const *)adapter->dev,"Unknown GET_HW_SPEC TLV type: %#x\n",(int)tlv->type); else ;
      }
      else ;
      
#line 1621 
      goto ldv_62047;
    }
    ldv_62047: 
#line 1623 
    ;
    
#line 1623 
    parsed_len = (int)((unsigned int)((int)tlv->len + parsed_len) + 4U);
    
#line 1625 
    left_len = (int)((unsigned int)(left_len - (int)tlv->len) + 4294967292U);
    ldv_62050: 
#line 1626 
    ;
    
#line 1586 
    if ((unsigned int)left_len > 4U) 
#line 1588 
                                     goto ldv_62049; else 
#line 1591 
                                                          goto ldv_62051;
    ldv_62051: 
#line 1592 
    ;
  }
  else ;
  
#line 1630 
  if ((adapter->debug_mask & 1073741824U) != 0U) {
    
#line 1630 
    if (adapter->dev != (struct device *)0) 
#line 1630 
                                            _dev_info((struct device const *)adapter->dev,"info: GET_HW_SPEC: fw_release_number- %#x\n",adapter->fw_release_number); else ;
  }
  else ;
  
#line 1633 
  if ((adapter->debug_mask & 1073741824U) != 0U) {
    
#line 1633 
    if (adapter->dev != (struct device *)0) 
#line 1633 
                                            _dev_info((struct device const *)adapter->dev,"info: GET_HW_SPEC: permanent addr: %pM\n",(u8 *)(& hw_spec->permanent_addr)); else ;
  }
  else ;
  
#line 1636 
  if ((adapter->debug_mask & 1073741824U) != 0U) {
    
#line 1636 
    if (adapter->dev != (struct device *)0) 
#line 1636 
                                            _dev_info((struct device const *)adapter->dev,"info: GET_HW_SPEC: hw_if_version=%#x version=%#x\n",(int)hw_spec->hw_if_version,(int)hw_spec->version); else ;
  }
  else ;
  
#line 1641 
  ether_addr_copy((u8 *)(& (priv->adapter)->perm_addr),(u8 const *)(& hw_spec->permanent_addr));
  
#line 1642 
  adapter->region_code = hw_spec->region_code;
  
#line 1644 
  i = 0;
  
#line 1644 
  goto ldv_62054;
  ldv_62053: 
#line 1645 
  ;
  
#line 1646 
  if ((int)adapter->region_code == (int)region_code_index[i]) 
#line 1647 
                                                              goto ldv_62052; else ;
  
#line 1644 
  i += 1;
  ldv_62054: 
#line 1645 
  ;
  
#line 1644 
  if (i <= 6) 
#line 1646 
              goto ldv_62053; else 
#line 1649 
                                   goto ldv_62052;
  ldv_62052: 
#line 1650 
  ;
  
#line 1650 
  if (i > 6) {
    
#line 1651 
    adapter->region_code = (unsigned short)16U;
    
#line 1652 
    if ((adapter->debug_mask & 536870912U) != 0U) {
      
#line 1652 
      if (adapter->dev != (struct device *)0) 
#line 1652 
                                              _dev_info((struct device const *)adapter->dev,"cmd: unknown region code, use default (USA)\n"); else ;
    }
    else ;
  }
  else ;
  
#line 1656 
  adapter->hw_dot_11n_dev_cap = hw_spec->dot_11n_dev_cap;
  
#line 1657 
  adapter->hw_dev_mcs_support = hw_spec->dev_mcs_support;
  
#line 1658 
  adapter->user_dev_mcs_support = adapter->hw_dev_mcs_support;
  
#line 1660 
  if (adapter->if_ops.update_mp_end_port != (void (*)(struct mwifiex_adapter *, u16 ))0) 
    
#line 1661 
    (*(adapter->if_ops.update_mp_end_port))(adapter,(unsigned short)((int)hw_spec->mp_end_port)); else ;
  
#line 1664 
  if ((unsigned int)adapter->fw_api_ver == 15U) 
#line 1665 
                                                adapter->scan_chan_gap_enabled = (_Bool)1; else ;
  
#line 1667 
  __retres = 0;
  
#line 1667 
  return __retres;
}


#line 56  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_cmdevt.c.aux"
int ldv_emg_del_timer_sync(struct timer_list *arg0);


#line 63 
_Bool ldv_emg_queue_work(struct workqueue_struct *arg0, struct work_struct *arg1);


#line 64 
int ldv_emg_mod_timer(struct timer_list *arg0, unsigned long arg1);


#line 120  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_cmdevt.c.aux"
static void atomic_inc(atomic_t *v)
{
  
#line 123 
  ldv_atomic_inc(v);
  
#line 124 
  return;
}


#line 127  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_cmdevt.c.aux"
static void atomic_dec(atomic_t *v)
{
  
#line 130 
  ldv_atomic_dec(v);
  
#line 131 
  return;
}


#line 429  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_cmdevt.c.aux"
static void *kcalloc(size_t n, size_t size, gfp_t flags)
{
  void *tmp;
  
#line 432 
  tmp = ldv_kcalloc(n,size,flags);
  
#line 432 
  return tmp;
}


#line 791  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_cmdevt.c.aux"
static void ldv___ldv_spin_lock_78(spinlock_t *ldv_func_arg1)
{
  
#line 795 
  ldv_spin_model_lock((char *)"cmd_free_q_lock_of_mwifiex_adapter");
  
#line 797 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 798 
  return;
}


#line 801  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_cmdevt.c.aux"
static void ldv_spin_unlock_irqrestore_79(spinlock_t *lock, unsigned long flags)
{
  
#line 805 
  ldv_spin_model_unlock((char *)"cmd_free_q_lock_of_mwifiex_adapter");
  
#line 807 
  spin_unlock_irqrestore(lock,flags);
  
#line 808 
  return;
}


#line 811  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_cmdevt.c.aux"
static void ldv_spin_unlock_irqrestore_80(spinlock_t *lock, unsigned long flags)
{
  
#line 815 
  ldv_spin_model_unlock((char *)"cmd_free_q_lock_of_mwifiex_adapter");
  
#line 817 
  spin_unlock_irqrestore(lock,flags);
  
#line 818 
  return;
}


#line 821  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_cmdevt.c.aux"
static bool ldv_queue_work_81(struct workqueue_struct *wq, struct work_struct *work)
{
  bool __retres;
  bool tmp;
  
#line 825 
  tmp = ldv_emg_queue_work(wq,work);
  
#line 825 
  __retres = tmp != 0;
  
#line 825 
  return __retres;
}


#line 829  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_cmdevt.c.aux"
static void ldv___ldv_spin_lock_82(spinlock_t *ldv_func_arg1)
{
  
#line 833 
  ldv_spin_model_lock((char *)"mwifiex_cmd_lock_of_mwifiex_adapter");
  
#line 835 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 836 
  return;
}


#line 839  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_cmdevt.c.aux"
static void ldv_spin_unlock_irqrestore_83(spinlock_t *lock, unsigned long flags)
{
  
#line 843 
  ldv_spin_model_unlock((char *)"mwifiex_cmd_lock_of_mwifiex_adapter");
  
#line 845 
  spin_unlock_irqrestore(lock,flags);
  
#line 846 
  return;
}


#line 849  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_cmdevt.c.aux"
static void ldv___ldv_spin_lock_84(spinlock_t *ldv_func_arg1)
{
  
#line 853 
  ldv_spin_model_lock((char *)"mwifiex_cmd_lock_of_mwifiex_adapter");
  
#line 855 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 856 
  return;
}


#line 859  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_cmdevt.c.aux"
static void ldv_spin_unlock_irqrestore_85(spinlock_t *lock, unsigned long flags)
{
  
#line 863 
  ldv_spin_model_unlock((char *)"mwifiex_cmd_lock_of_mwifiex_adapter");
  
#line 865 
  spin_unlock_irqrestore(lock,flags);
  
#line 866 
  return;
}


#line 869  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_cmdevt.c.aux"
static int ldv_mod_timer_86(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2)
{
  int tmp;
  
#line 873 
  tmp = ldv_emg_mod_timer(ldv_func_arg1,ldv_func_arg2);
  
#line 873 
  return tmp;
}


#line 877  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_cmdevt.c.aux"
static bool ldv_queue_work_87(struct workqueue_struct *wq, struct work_struct *work)
{
  bool __retres;
  bool tmp;
  
#line 881 
  tmp = ldv_emg_queue_work(wq,work);
  
#line 881 
  __retres = tmp != 0;
  
#line 881 
  return __retres;
}


#line 885  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_cmdevt.c.aux"
static void ldv___ldv_spin_lock_88(spinlock_t *ldv_func_arg1)
{
  
#line 889 
  ldv_spin_model_lock((char *)"cmd_free_q_lock_of_mwifiex_adapter");
  
#line 891 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 892 
  return;
}


#line 895  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_cmdevt.c.aux"
static void ldv_spin_unlock_irqrestore_89(spinlock_t *lock, unsigned long flags)
{
  
#line 899 
  ldv_spin_model_unlock((char *)"cmd_free_q_lock_of_mwifiex_adapter");
  
#line 901 
  spin_unlock_irqrestore(lock,flags);
  
#line 902 
  return;
}


#line 905  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_cmdevt.c.aux"
static void ldv___ldv_spin_lock_90(spinlock_t *ldv_func_arg1)
{
  
#line 909 
  ldv_spin_model_lock((char *)"cmd_pending_q_lock_of_mwifiex_adapter");
  
#line 911 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 912 
  return;
}


#line 915  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_cmdevt.c.aux"
static void ldv_spin_unlock_irqrestore_91(spinlock_t *lock, unsigned long flags)
{
  
#line 919 
  ldv_spin_model_unlock((char *)"cmd_pending_q_lock_of_mwifiex_adapter");
  
#line 921 
  spin_unlock_irqrestore(lock,flags);
  
#line 922 
  return;
}


#line 925  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_cmdevt.c.aux"
static void ldv___ldv_spin_lock_92(spinlock_t *ldv_func_arg1)
{
  
#line 929 
  ldv_spin_model_lock((char *)"mwifiex_cmd_lock_of_mwifiex_adapter");
  
#line 931 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 932 
  return;
}


#line 935  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_cmdevt.c.aux"
static void ldv___ldv_spin_lock_93(spinlock_t *ldv_func_arg1)
{
  
#line 939 
  ldv_spin_model_lock((char *)"cmd_pending_q_lock_of_mwifiex_adapter");
  
#line 941 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 942 
  return;
}


#line 945  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_cmdevt.c.aux"
static void ldv_spin_unlock_irqrestore_94(spinlock_t *lock, unsigned long flags)
{
  
#line 949 
  ldv_spin_model_unlock((char *)"cmd_pending_q_lock_of_mwifiex_adapter");
  
#line 951 
  spin_unlock_irqrestore(lock,flags);
  
#line 952 
  return;
}


#line 955  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_cmdevt.c.aux"
static void ldv_spin_unlock_irqrestore_95(spinlock_t *lock, unsigned long flags)
{
  
#line 959 
  ldv_spin_model_unlock((char *)"mwifiex_cmd_lock_of_mwifiex_adapter");
  
#line 961 
  spin_unlock_irqrestore(lock,flags);
  
#line 962 
  return;
}


#line 965  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_cmdevt.c.aux"
static void ldv_spin_unlock_irqrestore_96(spinlock_t *lock, unsigned long flags)
{
  
#line 969 
  ldv_spin_model_unlock((char *)"cmd_pending_q_lock_of_mwifiex_adapter");
  
#line 971 
  spin_unlock_irqrestore(lock,flags);
  
#line 972 
  return;
}


#line 975  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_cmdevt.c.aux"
static void ldv_spin_unlock_irqrestore_97(spinlock_t *lock, unsigned long flags)
{
  
#line 979 
  ldv_spin_model_unlock((char *)"mwifiex_cmd_lock_of_mwifiex_adapter");
  
#line 981 
  spin_unlock_irqrestore(lock,flags);
  
#line 982 
  return;
}


#line 985  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_cmdevt.c.aux"
static void ldv___ldv_spin_lock_98(spinlock_t *ldv_func_arg1)
{
  
#line 989 
  ldv_spin_model_lock((char *)"cmd_pending_q_lock_of_mwifiex_adapter");
  
#line 991 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 992 
  return;
}


#line 995  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_cmdevt.c.aux"
static void ldv_spin_unlock_irqrestore_99(spinlock_t *lock, unsigned long flags)
{
  
#line 999 
  ldv_spin_model_unlock((char *)"cmd_pending_q_lock_of_mwifiex_adapter");
  
#line 1001 
  spin_unlock_irqrestore(lock,flags);
  
#line 1002 
  return;
}


#line 1005  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_cmdevt.c.aux"
static void ldv_spin_unlock_irqrestore_100(spinlock_t *lock, unsigned long flags)
{
  
#line 1009 
  ldv_spin_model_unlock((char *)"mwifiex_cmd_lock_of_mwifiex_adapter");
  
#line 1011 
  spin_unlock_irqrestore(lock,flags);
  
#line 1012 
  return;
}


#line 1015  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_cmdevt.c.aux"
static int ldv_del_timer_sync_101(struct timer_list *ldv_func_arg1)
{
  int tmp;
  
#line 1019 
  tmp = ldv_emg_del_timer_sync(ldv_func_arg1);
  
#line 1019 
  return tmp;
}


#line 1023  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_cmdevt.c.aux"
static void ldv___ldv_spin_lock_102(spinlock_t *ldv_func_arg1)
{
  
#line 1027 
  ldv_spin_model_lock((char *)"mwifiex_cmd_lock_of_mwifiex_adapter");
  
#line 1029 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 1030 
  return;
}


#line 1033  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_cmdevt.c.aux"
static void ldv_spin_unlock_irqrestore_103(spinlock_t *lock, unsigned long flags)
{
  
#line 1037 
  ldv_spin_model_unlock((char *)"mwifiex_cmd_lock_of_mwifiex_adapter");
  
#line 1039 
  spin_unlock_irqrestore(lock,flags);
  
#line 1040 
  return;
}


#line 1043  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_cmdevt.c.aux"
static void ldv___ldv_spin_lock_104(spinlock_t *ldv_func_arg1)
{
  
#line 1047 
  ldv_spin_model_lock((char *)"mwifiex_cmd_lock_of_mwifiex_adapter");
  
#line 1049 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 1050 
  return;
}


#line 1053  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_cmdevt.c.aux"
static void ldv_spin_unlock_irqrestore_105(spinlock_t *lock, unsigned long flags)
{
  
#line 1057 
  ldv_spin_model_unlock((char *)"mwifiex_cmd_lock_of_mwifiex_adapter");
  
#line 1059 
  spin_unlock_irqrestore(lock,flags);
  
#line 1060 
  return;
}


#line 1063  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_cmdevt.c.aux"
static void ldv___ldv_spin_lock_106(spinlock_t *ldv_func_arg1)
{
  
#line 1067 
  ldv_spin_model_lock((char *)"mwifiex_cmd_lock_of_mwifiex_adapter");
  
#line 1069 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 1070 
  return;
}


#line 1073  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_cmdevt.c.aux"
static void ldv_spin_unlock_irqrestore_107(spinlock_t *lock, unsigned long flags)
{
  
#line 1077 
  ldv_spin_model_unlock((char *)"mwifiex_cmd_lock_of_mwifiex_adapter");
  
#line 1079 
  spin_unlock_irqrestore(lock,flags);
  
#line 1080 
  return;
}


#line 1083  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_cmdevt.c.aux"
static void ldv___ldv_spin_lock_108(spinlock_t *ldv_func_arg1)
{
  
#line 1087 
  ldv_spin_model_lock((char *)"mwifiex_cmd_lock_of_mwifiex_adapter");
  
#line 1089 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 1090 
  return;
}


#line 1093  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_cmdevt.c.aux"
static void ldv___ldv_spin_lock_109(spinlock_t *ldv_func_arg1)
{
  
#line 1097 
  ldv_spin_model_lock((char *)"cmd_pending_q_lock_of_mwifiex_adapter");
  
#line 1099 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 1100 
  return;
}


#line 1103  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_cmdevt.c.aux"
static void ldv_spin_unlock_irqrestore_110(spinlock_t *lock, unsigned long flags)
{
  
#line 1107 
  ldv_spin_model_unlock((char *)"cmd_pending_q_lock_of_mwifiex_adapter");
  
#line 1109 
  spin_unlock_irqrestore(lock,flags);
  
#line 1110 
  return;
}


#line 1113  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_cmdevt.c.aux"
static void ldv___ldv_spin_lock_111(spinlock_t *ldv_func_arg1)
{
  
#line 1117 
  ldv_spin_model_lock((char *)"cmd_pending_q_lock_of_mwifiex_adapter");
  
#line 1119 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 1120 
  return;
}


#line 1123  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_cmdevt.c.aux"
static void ldv_spin_unlock_irqrestore_112(spinlock_t *lock, unsigned long flags)
{
  
#line 1127 
  ldv_spin_model_unlock((char *)"cmd_pending_q_lock_of_mwifiex_adapter");
  
#line 1129 
  spin_unlock_irqrestore(lock,flags);
  
#line 1130 
  return;
}


#line 1133  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_cmdevt.c.aux"
static void ldv_spin_unlock_irqrestore_113(spinlock_t *lock, unsigned long flags)
{
  
#line 1137 
  ldv_spin_model_unlock((char *)"mwifiex_cmd_lock_of_mwifiex_adapter");
  
#line 1139 
  spin_unlock_irqrestore(lock,flags);
  
#line 1140 
  return;
}


#line 1143  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_cmdevt.c.aux"
static void ldv___ldv_spin_lock_114(spinlock_t *ldv_func_arg1)
{
  
#line 1147 
  ldv_spin_model_lock((char *)"scan_pending_q_lock_of_mwifiex_adapter");
  
#line 1149 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 1150 
  return;
}


#line 1153  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_cmdevt.c.aux"
static void ldv_spin_unlock_irqrestore_115(spinlock_t *lock, unsigned long flags)
{
  
#line 1157 
  ldv_spin_model_unlock((char *)"scan_pending_q_lock_of_mwifiex_adapter");
  
#line 1159 
  spin_unlock_irqrestore(lock,flags);
  
#line 1160 
  return;
}


#line 1163  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_cmdevt.c.aux"
static void ldv___ldv_spin_lock_116(spinlock_t *ldv_func_arg1)
{
  
#line 1167 
  ldv_spin_model_lock((char *)"mwifiex_cmd_lock_of_mwifiex_adapter");
  
#line 1169 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 1170 
  return;
}


#line 1173  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_cmdevt.c.aux"
static void ldv_spin_unlock_irqrestore_117(spinlock_t *lock, unsigned long flags)
{
  
#line 1177 
  ldv_spin_model_unlock((char *)"mwifiex_cmd_lock_of_mwifiex_adapter");
  
#line 1179 
  spin_unlock_irqrestore(lock,flags);
  
#line 1180 
  return;
}


#line 1183  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_cmdevt.c.aux"
static void ldv___ldv_spin_lock_118(spinlock_t *ldv_func_arg1)
{
  
#line 1187 
  ldv_spin_model_lock((char *)"mwifiex_cmd_lock_of_mwifiex_adapter");
  
#line 1189 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 1190 
  return;
}


#line 1193  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_cmdevt.c.aux"
static void ldv_spin_unlock_irqrestore_119(spinlock_t *lock, unsigned long flags)
{
  
#line 1197 
  ldv_spin_model_unlock((char *)"mwifiex_cmd_lock_of_mwifiex_adapter");
  
#line 1199 
  spin_unlock_irqrestore(lock,flags);
  
#line 1200 
  return;
}


#line 1203  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_cmdevt.c.aux"
static void ldv___ldv_spin_lock_120(spinlock_t *ldv_func_arg1)
{
  
#line 1207 
  ldv_spin_model_lock((char *)"scan_pending_q_lock_of_mwifiex_adapter");
  
#line 1209 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 1210 
  return;
}


#line 1213  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_cmdevt.c.aux"
static void ldv_spin_unlock_irqrestore_121(spinlock_t *lock, unsigned long flags)
{
  
#line 1217 
  ldv_spin_model_unlock((char *)"scan_pending_q_lock_of_mwifiex_adapter");
  
#line 1219 
  spin_unlock_irqrestore(lock,flags);
  
#line 1220 
  return;
}


#line 1223  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_cmdevt.c.aux"
static void ldv___ldv_spin_lock_122(spinlock_t *ldv_func_arg1)
{
  
#line 1227 
  ldv_spin_model_lock((char *)"mwifiex_cmd_lock_of_mwifiex_adapter");
  
#line 1229 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 1230 
  return;
}


#line 1233  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_cmdevt.c.aux"
static void ldv_spin_unlock_irqrestore_123(spinlock_t *lock, unsigned long flags)
{
  
#line 1237 
  ldv_spin_model_unlock((char *)"mwifiex_cmd_lock_of_mwifiex_adapter");
  
#line 1239 
  spin_unlock_irqrestore(lock,flags);
  
#line 1240 
  return;
}


#line 7  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/fvtp/.tmp_main.c"
void ldv_inline_asm(void);


#line 11  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_main.c.aux"
int ldv_atomic_add_return(int i, atomic_t *v);


#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/export.h"
extern struct module __this_module;


#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/bitops.h"
__inline static void set_bit(long nr, unsigned long volatile *addr)
{
  
#line 74 
  if (0 != 0) 
#line 76 
              ldv_inline_asm(); else 
#line 79 
                                     ldv_inline_asm();
  
#line 80 
  return;
}


#line 308  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/bitops.h"
__inline static int constant_test_bit(long nr, unsigned long const volatile *addr)
{
  int __retres;
  
#line 311 
  __retres = ((*(addr + (nr >> 6)) >> (nr & 63L)) & 1UL) != 0UL;
  
#line 311 
  return __retres;
}


#line 45  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/arch_hweight.h"
__inline static unsigned long __arch_hweight64(__u64 w)
{
  
#line 47 
  unsigned long res = 0UL;
  
#line 48 
  ldv_inline_asm();
  
#line 58 
  return res;
}


#line 78  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bitops.h"
__inline static unsigned long hweight_long(unsigned long w)
{
  unsigned long tmp_0;
  
#line 80 
  if (0 != 0) 
#line 80 
              tmp_0 = (unsigned long)((((unsigned int)((((((((((unsigned long long)w & 1ULL) != 0ULL) + (((unsigned long long)w & 2ULL) != 0ULL)) + (((unsigned long long)w & 4ULL) != 0ULL)) + (((unsigned long long)w & 8ULL) != 0ULL)) + (((unsigned long long)w & 16ULL) != 0ULL)) + (((unsigned long long)w & 32ULL) != 0ULL)) + (((unsigned long long)w & 64ULL) != 0ULL)) + (((unsigned long long)w & 128ULL) != 0ULL)) + (unsigned int)((((((((((unsigned long long)(w >> 8) & 1ULL) != 0ULL) + (((unsigned long long)(w >> 8) & 2ULL) != 0ULL)) + (((unsigned long long)(w >> 8) & 4ULL) != 0ULL)) + (((unsigned long long)(w >> 8) & 8ULL) != 0ULL)) + (((unsigned long long)(w >> 8) & 16ULL) != 0ULL)) + (((unsigned long long)(w >> 8) & 32ULL) != 0ULL)) + (((unsigned long long)(w >> 8) & 64ULL) != 0ULL)) + (((unsigned long long)(w >> 8) & 128ULL) != 0ULL))) + ((unsigned int)((((((((((unsigned long long)(w >> 16) & 1ULL) != 0ULL) + (((unsigned long long)(w >> 16) & 2ULL) != 0ULL)) + (((unsigned long long)(w >> 16) & 4ULL) != 0ULL)) + (((unsigned long long)(w >> 16) & 8ULL) != 0ULL)) + (((unsigned long long)(w >> 16) & 16ULL) != 0ULL)) + (((unsigned long long)(w >> 16) & 32ULL) != 0ULL)) + (((unsigned long long)(w >> 16) & 64ULL) != 0ULL)) + (((unsigned long long)(w >> 16) & 128ULL) != 0ULL)) + (unsigned int)((((((((((unsigned long long)(w >> 24) & 1ULL) != 0ULL) + (((unsigned long long)(w >> 24) & 2ULL) != 0ULL)) + (((unsigned long long)(w >> 24) & 4ULL) != 0ULL)) + (((unsigned long long)(w >> 24) & 8ULL) != 0ULL)) + (((unsigned long long)(w >> 24) & 16ULL) != 0ULL)) + (((unsigned long long)(w >> 24) & 32ULL) != 0ULL)) + (((unsigned long long)(w >> 24) & 64ULL) != 0ULL)) + (((unsigned long long)(w >> 24) & 128ULL) != 0ULL)))) + (((unsigned int)((((((((((unsigned long long)(w >> 32) & 1ULL) != 0ULL) + (((unsigned long long)(w >> 32) & 2ULL) != 0ULL)) + (((unsigned long long)(w >> 32) & 4ULL) != 0ULL)) + (((unsigned long long)(w >> 32) & 8ULL) != 0ULL)) + (((unsigned long long)(w >> 32) & 16ULL) != 0ULL)) + (((unsigned long long)(w >> 32) & 32ULL) != 0ULL)) + (((unsigned long long)(w >> 32) & 64ULL) != 0ULL)) + (((unsigned long long)(w >> 32) & 128ULL) != 0ULL)) + (unsigned int)((((((((((unsigned long long)(w >> 40) & 1ULL) != 0ULL) + (((unsigned long long)(w >> 40) & 2ULL) != 0ULL)) + (((unsigned long long)(w >> 40) & 4ULL) != 0ULL)) + (((unsigned long long)(w >> 40) & 8ULL) != 0ULL)) + (((unsigned long long)(w >> 40) & 16ULL) != 0ULL)) + (((unsigned long long)(w >> 40) & 32ULL) != 0ULL)) + (((unsigned long long)(w >> 40) & 64ULL) != 0ULL)) + (((unsigned long long)(w >> 40) & 128ULL) != 0ULL))) + ((unsigned int)((((((((((unsigned long long)(w >> 48) & 1ULL) != 0ULL) + (((unsigned long long)(w >> 48) & 2ULL) != 0ULL)) + (((unsigned long long)(w >> 48) & 4ULL) != 0ULL)) + (((unsigned long long)(w >> 48) & 8ULL) != 0ULL)) + (((unsigned long long)(w >> 48) & 16ULL) != 0ULL)) + (((unsigned long long)(w >> 48) & 32ULL) != 0ULL)) + (((unsigned long long)(w >> 48) & 64ULL) != 0ULL)) + (((unsigned long long)(w >> 48) & 128ULL) != 0ULL)) + (unsigned int)((((((((((unsigned long long)(w >> 56) & 1ULL) != 0ULL) + (((unsigned long long)(w >> 56) & 2ULL) != 0ULL)) + (((unsigned long long)(w >> 56) & 4ULL) != 0ULL)) + (((unsigned long long)(w >> 56) & 8ULL) != 0ULL)) + (((unsigned long long)(w >> 56) & 16ULL) != 0ULL)) + (((unsigned long long)(w >> 56) & 32ULL) != 0ULL)) + (((unsigned long long)(w >> 56) & 64ULL) != 0ULL)) + (((unsigned long long)(w >> 56) & 128ULL) != 0ULL))))); else 
                                                                    
#line 80 
                                                                    tmp_0 = __arch_hweight64((unsigned long long)w);
  
#line 80 
  return tmp_0;
}


#line 45  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dynamic_debug.h"
void __dynamic_pr_debug(struct _ddebug *, char const * , ...);


#line 178  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernel.h"
void __might_sleep(char const *, int, int);


#line 402 
int sprintf(char *, char const * , ...);


#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list.h"
__inline static void INIT_LIST_HEAD(struct list_head *list)
{
  
#line 27 
  list->next = list;
  
#line 28 
  list->prev = list;
  
#line 29 
  return;
}


#line 60  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/string_64.h"
void *memmove(void *, void const *, size_t);


#line 64 
size_t strlen(char const *);


#line 65 
char *strcpy(char *, char const *);


#line 112  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bitmap.h"
int __bitmap_weight(unsigned long const *, unsigned int);


#line 298  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bitmap.h"
__inline static int bitmap_weight(unsigned long const *src, unsigned int nbits)
{
  int __retres;
  int tmp_0;
  
#line 300 
  if (0 != 0 && nbits <= 64U) {
    unsigned long tmp;
    
#line 301 
    tmp = hweight_long(*src & (18446744073709551615UL >> (- nbits & 63U)));
    
#line 301 
    __retres = (int)tmp;
    
#line 301 
    goto return_label;
  }
  else ;
  
#line 302 
  tmp_0 = __bitmap_weight(src,nbits);
  
#line 302 
  __retres = tmp_0;
  return_label: 
#line 302 
                return __retres;
}


#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cpumask.h"
extern int nr_cpu_ids;


#line 88 
extern struct cpumask const * const cpu_possible_mask;


#line 474  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cpumask.h"
__inline static unsigned int cpumask_weight(struct cpumask const *srcp)
{
  unsigned int __retres;
  int tmp;
  
#line 476 
  tmp = bitmap_weight((unsigned long const *)(& srcp->bits),(unsigned int)nr_cpu_ids);
  
#line 476 
  __retres = (unsigned int)tmp;
  
#line 476 
  return __retres;
}


#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/err.h"
static bool IS_ERR(void const *ptr);


#line 98  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/atomic.h"
static void atomic_inc_0(atomic_t *v);


#line 114 
static void atomic_dec_0(atomic_t *v);


#line 159 
static int atomic_add_return(int i, atomic_t *v);


#line 280  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockdep.h"
void lockdep_init_map(struct lockdep_map *, char const *, struct lock_class_key *, int);


#line 446  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_unlock_irqrestore_0(spinlock_t *lock, unsigned long flags)
{
  {
    unsigned long __dummy;
    unsigned long __dummy2;
    
  }
  
#line 448 
  _raw_spin_unlock_irqrestore(& lock->__anonCompField_spinlock_18.rlock,flags);
  
#line 449 
  return;
}


#line 482 
static void ldv_spin_unlock_irqrestore_80_0(spinlock_t *lock, unsigned long flags);


#line 486 
static void ldv_spin_unlock_irqrestore_81(spinlock_t *lock, unsigned long flags);


#line 490 
static void ldv_spin_unlock_irqrestore_84(spinlock_t *lock, unsigned long flags);


#line 494 
static void ldv_spin_unlock_irqrestore_85_0(spinlock_t *lock, unsigned long flags);


#line 498 
static void ldv_spin_unlock_irqrestore_88(spinlock_t *lock, unsigned long flags);


#line 502 
static void ldv_spin_unlock_irqrestore_89_0(spinlock_t *lock, unsigned long flags);


#line 506 
static void ldv_spin_unlock_irqrestore_91_0(spinlock_t *lock, unsigned long flags);


#line 510 
static void ldv_spin_unlock_irqrestore_93(spinlock_t *lock, unsigned long flags);


#line 514 
static void ldv_spin_unlock_irqrestore_94_0(spinlock_t *lock, unsigned long flags);


#line 518 
static void ldv_spin_unlock_irqrestore_98(spinlock_t *lock, unsigned long flags);


#line 522 
static void ldv_spin_unlock_irqrestore_99_0(spinlock_t *lock, unsigned long flags);


#line 526 
static void ldv_spin_unlock_irqrestore_101(spinlock_t *lock, unsigned long flags);


#line 530 
static void ldv_spin_unlock_irqrestore_103_0(spinlock_t *lock, unsigned long flags);


#line 74  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_main.c.aux"
static void ldv___ldv_spin_lock_79(spinlock_t *ldv_func_arg1);


#line 78 
static void ldv___ldv_spin_lock_83(spinlock_t *ldv_func_arg1);


#line 82 
static void ldv___ldv_spin_lock_87(spinlock_t *ldv_func_arg1);


#line 86 
static void ldv___ldv_spin_lock_90_0(spinlock_t *ldv_func_arg1);


#line 90 
static void ldv___ldv_spin_lock_92_0(spinlock_t *ldv_func_arg1);


#line 94 
static void ldv___ldv_spin_lock_97(spinlock_t *ldv_func_arg1);


#line 98 
static void ldv___ldv_spin_lock_100(spinlock_t *ldv_func_arg1);


#line 102 
static void ldv___ldv_spin_lock_102_0(spinlock_t *ldv_func_arg1);


#line 27  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/err.h"
long ldv_is_err(void const *ptr);


#line 23  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/slab.h"
void *ldv_kzalloc(size_t size, gfp_t flags);


#line 24 
void *ldv_kmalloc(size_t size, gfp_t flags);


#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/wait.h"
void __init_waitqueue_head(wait_queue_head_t *, char const *, struct lock_class_key *);


#line 926 
long prepare_to_wait_event(wait_queue_head_t *, wait_queue_t *, int);


#line 927 
void finish_wait(wait_queue_head_t *, wait_queue_t *);


#line 162  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timekeeping.h"
ktime_t ktime_get_with_offset(enum tk_offsets);


#line 170  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timekeeping.h"
__inline static ktime_t ktime_get_real(void)
{
  ktime_t tmp;
  
#line 172 
  tmp = ktime_get_with_offset((enum tk_offsets)TK_OFFS_REAL);
  
#line 172 
  return tmp;
}


#line 88  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timer.h"
void init_timer_key(struct timer_list *, unsigned int, char const *, struct lock_class_key *);


#line 172 
static int ldv_del_timer_96(struct timer_list *ldv_func_arg1);


#line 177 
static int ldv_mod_timer_95(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2);


#line 232 
static int ldv_del_timer_sync_78(struct timer_list *ldv_func_arg1);


#line 181  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/workqueue.h"
void __init_work(struct work_struct *, int);


#line 361 
struct workqueue_struct *__alloc_workqueue_key(char const *, unsigned int, int, struct lock_class_key *, char const * , ...);


#line 421 
void destroy_workqueue(struct workqueue_struct *);


#line 436 
void flush_workqueue(struct workqueue_struct *);


#line 494 
static bool ldv_queue_work_82(struct workqueue_struct *wq, struct work_struct *work);


#line 498 
static bool ldv_queue_work_86(struct workqueue_struct *wq, struct work_struct *work);


#line 81  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/idr.h"
int idr_alloc(struct idr *, void *, int, int, gfp_t);


#line 425  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
void schedule(void);


#line 40  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/semaphore.h"
int down_interruptible(struct semaphore *);


#line 44 
void up(struct semaphore *);


#line 418  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/slab.h"
static void *kmalloc(size_t size, gfp_t flags);


#line 581 
static void *kzalloc(size_t size, gfp_t flags);


#line 772  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
void kfree_skb(struct sk_buff *);


#line 842 
struct sk_buff *skb_clone(struct sk_buff *, gfp_t);


#line 853 
struct sk_buff *skb_realloc_headroom(struct sk_buff *, unsigned int);


#line 976  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static unsigned char *skb_end_pointer(struct sk_buff const *skb)
{
  unsigned char *__retres;
  
#line 978 
  __retres = skb->head + skb->end;
  
#line 978 
  return __retres;
}


#line 1011  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static int skb_queue_empty(struct sk_buff_head const *list)
{
  int __retres;
  
#line 1013 
  __retres = (struct sk_buff const *)list->next == (struct sk_buff const *)list;
  
#line 1013 
  return __retres;
}


#line 1176  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static int skb_shared(struct sk_buff const *skb)
{
  int __retres;
  int tmp;
  
#line 1178 
  tmp = atomic_read(& skb->users);
  
#line 1178 
  __retres = tmp != 1;
  
#line 1178 
  return __retres;
}


#line 1540 
struct sk_buff *skb_dequeue(struct sk_buff_head *);


#line 1750  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static unsigned int skb_headroom(struct sk_buff const *skb)
{
  unsigned int __retres;
  
#line 1752 
  __retres = (unsigned int)((long)skb->data - (long)skb->head);
  
#line 1752 
  return __retres;
}


#line 2846  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void __net_timestamp(struct sk_buff *skb)
{
  
#line 2848 
  skb->__anonCompField_sk_buff_68.__anonCompField___anonunion_228_67.__anonCompField___anonstruct_229_66.tstamp = ktime_get_real();
  
#line 2849 
  return;
}


#line 1822  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static struct netdev_queue *netdev_get_tx_queue(struct net_device const *dev, unsigned int index)
{
  struct netdev_queue *__retres;
  
#line 1825 
  __retres = dev->_tx + index;
  
#line 1825 
  return __retres;
}


#line 1880  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void *netdev_priv(struct net_device const *dev)
{
  void *__retres;
  
#line 1882 
  __retres = (void *)dev + 3008U;
  
#line 1882 
  return __retres;
}


#line 2202 
void free_netdev(struct net_device *);


#line 2565  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void netif_tx_stop_queue(struct netdev_queue *dev_queue)
{
  
#line 2567 
  set_bit(0L,(unsigned long volatile *)(& dev_queue->state));
  
#line 2568 
  return;
}


#line 2584  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static bool netif_tx_queue_stopped(struct netdev_queue const *dev_queue)
{
  bool __retres;
  int tmp;
  
#line 2586 
  tmp = constant_test_bit(0L,(unsigned long const volatile *)(& dev_queue->state));
  
#line 2586 
  __retres = (_Bool)(tmp != 0);
  
#line 2586 
  return __retres;
}


#line 3038  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static bool netif_carrier_ok(struct net_device const *dev)
{
  bool __retres;
  int tmp;
  
#line 3040 
  tmp = constant_test_bit(2L,(unsigned long const volatile *)(& dev->state));
  
#line 3040 
  __retres = (_Bool)(tmp == 0);
  
#line 3040 
  return __retres;
}


#line 3049 
void netif_carrier_off(struct net_device *);


#line 111  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/etherdevice.h"
__inline static bool is_multicast_ether_addr(u8 const *addr)
{
  bool __retres;
  
#line 114 
  u32 a = *((u32 const *)addr);
  
#line 121 
  __retres = (_Bool)((a & 1U) != 0U);
  
#line 121 
  return __retres;
}


#line 310  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/etherdevice.h"
__inline static bool ether_addr_equal(u8 const *addr1, u8 const *addr2)
{
  bool __retres;
  
#line 313 
  u32 fold = (*((u32 const *)addr1) ^ *((u32 const *)addr2)) | (unsigned int)((int)*((u16 const *)(addr1 + 4U)) ^ (int)*((u16 const *)(addr2 + 4U)));
  
#line 316 
  __retres = (_Bool)(fold == 0U);
  
#line 316 
  return __retres;
}


#line 364  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/etherdevice.h"
__inline static bool ether_addr_equal_unaligned(u8 const *addr1, u8 const *addr2)
{
  bool tmp;
  
#line 367 
  tmp = ether_addr_equal(addr1,addr2);
  
#line 367 
  return tmp;
}


#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rtnetlink.h"
void rtnl_lock(void);


#line 28 
void rtnl_unlock(void);


#line 70  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/vmalloc.h"
void *vzalloc(unsigned long);


#line 83 
void vfree(void const *);


#line 42  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/firmware.h"
int request_firmware(struct firmware const **, char const *, struct device *);


#line 44 
int request_firmware_nowait(struct module *, bool, char const *, struct device *, gfp_t, void *, void (*)(struct firmware const *, void *));


#line 51 
void release_firmware(struct firmware const *);


#line 9  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/devcoredump.h"
void dev_coredumpv(struct device *, void const *, size_t, gfp_t);


#line 3361  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/cfg80211.h"
void wiphy_unregister(struct wiphy *);


#line 3368 
void wiphy_free(struct wiphy *);


#line 3757 
unsigned int cfg80211_classify8021d(struct sk_buff *, struct cfg80211_qos_map *);


#line 61  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/util.h"
__inline static struct mwifiex_txinfo *MWIFIEX_SKB_TXCB(struct sk_buff *skb)
{
  struct mwifiex_txinfo *__retres;
  
#line 63 
  struct mwifiex_cb *cb = (struct mwifiex_cb *)(& skb->cb);
  
#line 65 
  __retres = & cb->__anonCompField_mwifiex_cb_100.tx_info;
  
#line 65 
  return __retres;
}


#line 93 
int mwifiex_debug_info_to_buffer(struct mwifiex_private *priv, char *buf, struct mwifiex_debug_info *info_0);


#line 49  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.h"
char const driver_version[18U];


#line 984 
void mwifiex_process_tx_queue(struct mwifiex_adapter *adapter);


#line 986 
int mwifiex_init_lock_list(struct mwifiex_adapter *adapter);


#line 988 
void mwifiex_set_trans_start(struct net_device *dev);


#line 990 
void mwifiex_stop_net_dev_queue(struct net_device *netdev, struct mwifiex_adapter *adapter);


#line 999 
int mwifiex_init_fw(struct mwifiex_adapter *adapter);


#line 1003 
int mwifiex_shutdown_drv(struct mwifiex_adapter *adapter);


#line 1007 
int mwifiex_dnld_fw(struct mwifiex_adapter *adapter, struct mwifiex_fw_image *pmfw);


#line 1024 
int mwifiex_get_debug_info(struct mwifiex_private *priv, struct mwifiex_debug_info *info_0);


#line 1043 
int mwifiex_handle_rx_packet(struct mwifiex_adapter *adapter, struct sk_buff *skb);


#line 1047 
int mwifiex_send_null_packet(struct mwifiex_private *priv, u8 flags);


#line 1141 
void mwifiex_free_curr_bcn(struct mwifiex_private *priv);


#line 1146 
int is_command_pending(struct mwifiex_adapter *adapter);


#line 1147 
void mwifiex_init_priv_params(struct mwifiex_private *priv, struct net_device *dev);


#line 1244  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.h"
__inline static struct mwifiex_private *mwifiex_get_priv_0(struct mwifiex_adapter *adapter, enum mwifiex_bss_role bss_role)
{
  int i;
  struct mwifiex_private *tmp;
  
#line 1249 
  i = 0;
  
#line 1249 
  goto ldv_61006;
  ldv_61005: 
#line 1250 
  ;
  
#line 1250 
  if (adapter->priv[i] != (struct mwifiex_private *)0) {
    
#line 1251 
    if (bss_role == (unsigned int)MWIFIEX_BSS_ROLE_ANY || ((unsigned long)(adapter->priv[i])->bss_role & 1UL) == (unsigned long)bss_role) 
      
#line 1253 
      goto ldv_61004; else ;
  }
  else ;
  
#line 1249 
  i += 1;
  ldv_61006: 
#line 1250 
  ;
  
#line 1249 
  if ((int)adapter->priv_num > i) 
#line 1251 
                                  goto ldv_61005; else 
#line 1254 
                                                       goto ldv_61004;
  ldv_61004: 
#line 1255 
  ;
  
#line 1257 
  if ((int)adapter->priv_num > i) 
#line 1257 
                                  tmp = adapter->priv[i]; else 
#line 1257 
                                                               tmp = (struct mwifiex_private *)0;
  
#line 1257 
  return tmp;
}


#line 1283  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.h"
__inline static struct mwifiex_private *mwifiex_netdev_get_priv(struct net_device *dev)
{
  struct mwifiex_private *__retres;
  void *tmp;
  
#line 1285 
  tmp = netdev_priv((struct net_device const *)dev);
  
#line 1285 
  __retres = (struct mwifiex_private *)*((unsigned long *)tmp);
  
#line 1285 
  return __retres;
}


#line 1335 
int mwifiex_add_card(void *card, struct semaphore *sem, struct mwifiex_if_ops *if_ops, u8 iface_type);


#line 1336 
int mwifiex_remove_card(struct mwifiex_adapter *adapter, struct semaphore *sem);


#line 1340 
int mwifiex_request_set_multicast_list(struct mwifiex_private *priv, struct mwifiex_multicast_list *mcast_list);


#line 1342 
int mwifiex_copy_mcast_addr(struct mwifiex_multicast_list *mlist, struct net_device *dev);


#line 1392 
int mwifiex_drv_get_driver_version(struct mwifiex_adapter *adapter, char *version, int max_len);


#line 1398 
int mwifiex_main_process(struct mwifiex_adapter *adapter);


#line 1400 
int mwifiex_queue_tx_pkt(struct mwifiex_private *priv, struct sk_buff *skb);


#line 1415 
struct wireless_dev *mwifiex_add_virtual_intf(struct wiphy *wiphy, char const *name, unsigned char name_assign_type, enum nl80211_iftype type, u32 *flags, struct vif_params *params);


#line 1421 
int mwifiex_del_virtual_intf(struct wiphy *wiphy, struct wireless_dev *wdev);


#line 1479 
int mwifiex_init_channel_scan_gap(struct mwifiex_adapter *adapter);


#line 1481 
int mwifiex_tdls_check_tx(struct mwifiex_private *priv, struct sk_buff *skb);


#line 1501 
struct sk_buff *mwifiex_clone_skb_for_tx_status(struct mwifiex_private *priv, struct sk_buff *skb, u8 flag, u64 *cookie);


#line 1513 
void mwifiex_hist_data_reset(struct mwifiex_private *priv);


#line 1519 
void mwifiex_drv_info_dump(struct mwifiex_adapter *adapter);


#line 1520 
void mwifiex_upload_device_dump(struct mwifiex_adapter *adapter);


#line 1522 
void mwifiex_queue_main_work(struct mwifiex_adapter *adapter);


#line 1526 
void mwifiex_debugfs_init(void);


#line 1527 
void mwifiex_debugfs_remove(void);


#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/wmm.h"
static u16 const mwifiex_1d_to_wmm_queue[8U] = {(unsigned short)1U, (unsigned short)0U, (unsigned short)0U, (unsigned short)1U, (unsigned short)2U, (unsigned short)2U, (unsigned short)3U, (unsigned short)3U};

#line 100 
void mwifiex_wmm_add_buf_txqueue(struct mwifiex_private *priv, struct sk_buff *skb);


#line 106 
int mwifiex_wmm_lists_empty(struct mwifiex_adapter *adapter);


#line 107 
void mwifiex_wmm_process_tx(struct mwifiex_adapter *adapter);


#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfg80211.h"
int mwifiex_register_cfg80211(struct mwifiex_adapter *adapter);


#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.c"
static unsigned int debug_mask = 7U;

#line 31  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.c"
char const driver_version[18U] = {(char)'m', (char)'w', (char)'i', (char)'f', (char)'i', (char)'e', (char)'x', (char)' ', (char)'\000'};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.c"
static char *cal_data_cfg;

#line 35  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.c"
static unsigned short driver_mode;

#line 55  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.c"
static int mwifiex_register(void *card, struct mwifiex_if_ops *if_ops, void **padapter)
{
  int __retres;
  struct mwifiex_adapter *adapter;
  int i;
  
#line 61 
  adapter = (struct mwifiex_adapter *)kzalloc(7456UL,208U);
  
#line 62 
  if (adapter == (struct mwifiex_adapter *)0) {
    
#line 63 
    __retres = -12;
    
#line 63 
    goto return_label;
  }
  else ;
  
#line 65 
  *padapter = (void *)adapter;
  
#line 66 
  adapter->card = card;
  
#line 69 
  memmove((void *)(& adapter->if_ops),(void const *)if_ops,200UL);
  
#line 70 
  adapter->debug_mask = debug_mask;
  
#line 73 
  if (adapter->if_ops.init_if != (int (*)(struct mwifiex_adapter *))0) {
    int tmp_0;
    
#line 74 
    tmp_0 = (*(adapter->if_ops.init_if))(adapter);
    
#line 74 
    if (tmp_0 != 0) 
#line 75 
                    goto error; else ;
  }
  else ;
  
#line 77 
  adapter->priv_num = (unsigned char)0U;
  
#line 79 
  i = 0;
  
#line 79 
  goto ldv_61709;
  ldv_61708: 
#line 80 
  ;
  
#line 82 
  adapter->priv[i] = (struct mwifiex_private *)kzalloc(12568UL,208U);
  
#line 83 
  if (adapter->priv[i] == (struct mwifiex_private *)0) 
#line 84 
                                                       goto error; else ;
  
#line 86 
  (adapter->priv[i])->adapter = adapter;
  
#line 87 
  adapter->priv_num = (u8)((int)adapter->priv_num + 1);
  
#line 79 
  i += 1;
  ldv_61709: 
#line 80 
  ;
  
#line 79 
  if (i <= 2) 
#line 81 
              goto ldv_61708; else 
#line 84 
                                   goto ldv_61710;
  ldv_61710: 
#line 85 
  ;
  
#line 89 
  mwifiex_init_lock_list(adapter);
  {
    struct lock_class_key __key;
    
#line 91 
    init_timer_key(& adapter->cmd_timer,0U,"((&adapter->cmd_timer))",& __key);
  }
  
#line 91 
  adapter->cmd_timer.function = & mwifiex_cmd_timeout_func;
  
#line 91 
  adapter->cmd_timer.data = (unsigned long)adapter;
  
#line 94 
  __retres = 0;
  
#line 94 
  goto return_label;
  error: 
#line 96 
  ;
  
#line 97 
  if ((adapter->debug_mask & 4U) != 0U) {
    
#line 97 
    if (adapter->dev != (struct device *)0) 
#line 97 
                                            _dev_info((struct device const *)adapter->dev,"info: leave mwifiex_register with error\n"); else ;
  }
  else ;
  
#line 100 
  i = 0;
  
#line 100 
  goto ldv_61713;
  ldv_61712: 
#line 101 
  ;
  
#line 101 
  kfree((void const *)adapter->priv[i]);
  
#line 100 
  i += 1;
  ldv_61713: 
#line 101 
  ;
  
#line 100 
  if ((int)adapter->priv_num > i) 
#line 102 
                                  goto ldv_61712; else 
#line 105 
                                                       goto ldv_61714;
  ldv_61714: 
#line 106 
  ;
  
#line 103 
  kfree((void const *)adapter);
  
#line 105 
  __retres = -1;
  return_label: 
#line 105 
                return __retres;
}


#line 118  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.c"
static int mwifiex_unregister(struct mwifiex_adapter *adapter)
{
  int __retres;
  s32 i;
  
#line 122 
  if (adapter->if_ops.cleanup_if != (void (*)(struct mwifiex_adapter *))0) 
    
#line 123 
    (*(adapter->if_ops.cleanup_if))(adapter); else ;
  
#line 125 
  ldv_del_timer_sync_78(& adapter->cmd_timer);
  
#line 128 
  i = 0;
  
#line 128 
  goto ldv_61720;
  ldv_61719: 
#line 129 
  ;
  
#line 129 
  if (adapter->priv[i] != (struct mwifiex_private *)0) {
    
#line 130 
    mwifiex_free_curr_bcn(adapter->priv[i]);
    
#line 131 
    kfree((void const *)adapter->priv[i]);
  }
  else ;
  
#line 128 
  i += 1;
  ldv_61720: 
#line 129 
  ;
  
#line 128 
  if ((int)adapter->priv_num > i) 
#line 130 
                                  goto ldv_61719; else 
#line 133 
                                                       goto ldv_61721;
  ldv_61721: 
#line 134 
  ;
  
#line 135 
  vfree((void const *)adapter->chan_stats);
  
#line 136 
  kfree((void const *)adapter);
  
#line 137 
  __retres = 0;
  
#line 137 
  return __retres;
}


#line 140  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.c"
void mwifiex_queue_main_work(struct mwifiex_adapter *adapter)
{
  unsigned long flags;
  
#line 144 
  ldv___ldv_spin_lock_79(& adapter->main_proc_lock);
  
#line 145 
  if (adapter->mwifiex_processing != 0U) {
    
#line 146 
    adapter->more_task_flag = (unsigned char)1U;
    
#line 147 
    ldv_spin_unlock_irqrestore_80_0(& adapter->main_proc_lock,flags);
  }
  else {
    
#line 149 
    ldv_spin_unlock_irqrestore_81(& adapter->main_proc_lock,flags);
    
#line 150 
    ldv_queue_work_82(adapter->workqueue,& adapter->main_work);
  }
  
#line 152 
  return;
}


#line 153  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.c"
static char const __kstrtab_mwifiex_queue_main_work[24U] = {(char)'m', (char)'w', (char)'i', (char)'f', (char)'i', (char)'e', (char)'x', (char)'_', (char)'q', (char)'u', (char)'e', (char)'u', (char)'e', (char)'_', (char)'m', (char)'a', (char)'i', (char)'n', (char)'_', (char)'w', (char)'o', (char)'r', (char)'k', (char)'\000'};

#line 153 
struct kernel_symbol const __ksymtab_mwifiex_queue_main_work;


#line 153  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.c"
struct kernel_symbol const __ksymtab_mwifiex_queue_main_work = {.value = (unsigned long)(& mwifiex_queue_main_work), .name = (char const *)(& __kstrtab_mwifiex_queue_main_work)};

#line 155  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.c"
static void mwifiex_queue_rx_work(struct mwifiex_adapter *adapter)
{
  unsigned long flags;
  
#line 159 
  ldv___ldv_spin_lock_83(& adapter->rx_proc_lock);
  
#line 160 
  if ((int)adapter->rx_processing != 0) 
#line 161 
                                        ldv_spin_unlock_irqrestore_84(& adapter->rx_proc_lock,flags);
  else {
    
#line 163 
    ldv_spin_unlock_irqrestore_85_0(& adapter->rx_proc_lock,flags);
    
#line 164 
    ldv_queue_work_86(adapter->rx_workqueue,& adapter->rx_work);
  }
  
#line 166 
  return;
}


#line 168  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.c"
static int mwifiex_process_rx(struct mwifiex_adapter *adapter)
{
  int __retres;
  unsigned long flags;
  struct sk_buff *skb;
  struct mwifiex_rxinfo *rx_info;
  
#line 174 
  ldv___ldv_spin_lock_87(& adapter->rx_proc_lock);
  
#line 175 
  if ((int)adapter->rx_processing != 0 || (int)adapter->rx_locked != 0) {
    
#line 176 
    ldv_spin_unlock_irqrestore_88(& adapter->rx_proc_lock,flags);
    
#line 177 
    goto exit_rx_proc;
  }
  else {
    
#line 179 
    adapter->rx_processing = (_Bool)1;
    
#line 180 
    ldv_spin_unlock_irqrestore_89_0(& adapter->rx_proc_lock,flags);
  }
  
#line 184 
  goto ldv_61745;
  ldv_61744: 
#line 185 
  ;
  
#line 185 
  atomic_dec_0(& adapter->rx_pending);
  
#line 186 
  if ((int)adapter->delay_main_work != 0 || (unsigned int)adapter->iface_type == 2U) {
    int tmp;
    
#line 187 
    tmp = atomic_read((atomic_t const *)(& adapter->rx_pending));
    
#line 187 
    if (tmp <= 19) {
      
#line 189 
      if (adapter->if_ops.submit_rem_rx_urbs != (void (*)(struct mwifiex_adapter *))0) 
        
#line 190 
        (*(adapter->if_ops.submit_rem_rx_urbs))(adapter); else ;
      
#line 191 
      adapter->delay_main_work = (_Bool)0;
      
#line 192 
      mwifiex_queue_main_work(adapter);
    }
    else ;
  }
  else ;
  
#line 194 
  rx_info = MWIFIEX_SKB_RXCB(skb);
  
#line 195 
  if ((unsigned int)rx_info->buf_type == 10U) {
    
#line 196 
    if (adapter->if_ops.deaggr_pkt != (void (*)(struct mwifiex_adapter *, struct sk_buff *))0) 
      
#line 197 
      (*(adapter->if_ops.deaggr_pkt))(adapter,skb); else ;
    
#line 198 
    dev_kfree_skb_any(skb);
  }
  else 
#line 200 
       mwifiex_handle_rx_packet(adapter,skb);
  ldv_61745: 
#line 201 
  ;
  
#line 184 
  skb = skb_dequeue(& adapter->rx_data_q);
  
#line 184 
  if (skb != (struct sk_buff *)0) 
#line 186 
                                  goto ldv_61744; else 
#line 189 
                                                       goto ldv_61746;
  ldv_61746: 
#line 190 
  ;
  
#line 203 
  ldv___ldv_spin_lock_90_0(& adapter->rx_proc_lock);
  
#line 204 
  adapter->rx_processing = (_Bool)0;
  
#line 205 
  ldv_spin_unlock_irqrestore_91_0(& adapter->rx_proc_lock,flags);
  exit_rx_proc: 
#line 207 
  ;
  
#line 208 
  __retres = 0;
  
#line 208 
  return __retres;
}


#line 226  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.c"
int mwifiex_main_process(struct mwifiex_adapter *adapter)
{
  unsigned long flags;
  int tmp;
  
#line 228 
  int ret = 0;
  
#line 231 
  ldv___ldv_spin_lock_92_0(& adapter->main_proc_lock);
  
#line 234 
  if (adapter->mwifiex_processing != 0U || (int)adapter->main_locked != 0) {
    
#line 235 
    adapter->more_task_flag = (unsigned char)1U;
    
#line 236 
    ldv_spin_unlock_irqrestore_93(& adapter->main_proc_lock,flags);
    
#line 237 
    goto exit_main_proc;
  }
  else {
    
#line 239 
    adapter->mwifiex_processing = 1U;
    
#line 240 
    ldv_spin_unlock_irqrestore_94_0(& adapter->main_proc_lock,flags);
  }
  process_start: 
#line 242 
  ;
  ldv_61756: 
#line 243 
  ;
  
#line 244 
  if ((unsigned int)adapter->hw_status + 4294967292U <= 1U) 
#line 246 
                                                            goto ldv_61754; else ;
  
#line 255 
  tmp = atomic_read((atomic_t const *)(& adapter->rx_pending));
  
#line 255 
  if (tmp > 49) {
    
#line 255 
    if ((unsigned int)adapter->iface_type != 2U) {
      
#line 257 
      adapter->delay_main_work = (_Bool)1;
      
#line 258 
      mwifiex_queue_rx_work(adapter);
      
#line 259 
      goto ldv_61754;
    }
    else ;
  }
  else ;
  
#line 263 
  if ((unsigned int)adapter->int_status != 0U) {
    
#line 264 
    if ((unsigned int)adapter->hs_activated != 0U) 
#line 265 
                                                   mwifiex_process_hs_config(adapter); else ;
    
#line 266 
    if (adapter->if_ops.process_int_status != (int (*)(struct mwifiex_adapter *))0) 
      
#line 267 
      (*(adapter->if_ops.process_int_status))(adapter); else ;
  }
  else ;
  
#line 270 
  if ((int)adapter->rx_work_enabled != 0 && (unsigned int)adapter->data_received != 0U) 
    
#line 271 
    mwifiex_queue_rx_work(adapter); else ;
  
#line 274 
  if (adapter->ps_state == 3U && ((unsigned int)adapter->pm_wakeup_card_req != 0U && adapter->pm_wakeup_fw_try == 0U)) {
    int tmp_0;
    
#line 276 
    tmp_0 = is_command_pending(adapter);
    
#line 276 
    if (tmp_0 != 0) 
#line 274 
                    goto _LOR;
    else {
      int tmp_1;
      
#line 277 
      tmp_1 = skb_queue_empty((struct sk_buff_head const *)(& adapter->tx_data_q));
      
#line 277 
      if (tmp_1 == 0) 
#line 274 
                      goto _LOR;
      else {
        int tmp_2;
        
#line 278 
        tmp_2 = mwifiex_wmm_lists_empty(adapter);
        
#line 278 
        if (tmp_2 == 0) {
          _LOR: {
                  
#line 280 
                  adapter->pm_wakeup_fw_try = 1U;
                  
#line 281 
                  ldv_mod_timer_95(& adapter->wakeup_timer,jiffies + 750UL);
                  
#line 282 
                  (*(adapter->if_ops.wakeup))(adapter);
                  
#line 283 
                  goto ldv_61755;
                }
        }
        else ;
      }
    }
  }
  else ;
  
#line 286 
  if (((unsigned int)adapter->cmd_resp_received != 0U || (unsigned int)adapter->event_received != 0U) || (unsigned int)adapter->data_received != 0U) {
    
#line 287 
    adapter->data_received = (unsigned char)0U;
    
#line 288 
    adapter->pm_wakeup_fw_try = 0U;
    
#line 289 
    ldv_del_timer_96(& adapter->wakeup_timer);
    
#line 290 
    if (adapter->ps_state == 3U) 
#line 291 
                                 adapter->ps_state = 0U; else ;
  }
  else {
    
#line 294 
    if (adapter->pm_wakeup_fw_try != 0U) 
#line 295 
                                         goto ldv_61754; else ;
    
#line 296 
    if (adapter->ps_state != 0U || (unsigned int)adapter->tx_lock_flag != 0U) 
      
#line 298 
      goto ldv_61754; else ;
    
#line 300 
    if ((! adapter->scan_chan_gap_enabled && adapter->scan_processing != 0U) || (unsigned int)adapter->data_sent != 0U) 
      
#line 300 
      goto _LOR_0;
    else {
      int tmp_4;
      
#line 301 
      tmp_4 = mwifiex_wmm_lists_empty(adapter);
      
#line 301 
      if (tmp_4 != 0) {
        int tmp_5;
        
#line 302 
        tmp_5 = skb_queue_empty((struct sk_buff_head const *)(& adapter->tx_data_q));
        
#line 302 
        if (tmp_5 != 0) {
          _LOR_0: 
#line 304 
                  if ((unsigned int)adapter->cmd_sent != 0U || adapter->curr_cmd != (struct cmd_ctrl_node *)0) 
                    
#line 306 
                    goto ldv_61754;
                  else {
                    int tmp_3;
                    
#line 304 
                    tmp_3 = is_command_pending(adapter);
                    
#line 304 
                    if (tmp_3 == 0) 
#line 306 
                                    goto ldv_61754; else ;
                  }
        }
        else ;
      }
      else ;
    }
  }
  
#line 311 
  if ((unsigned int)adapter->event_received != 0U) {
    
#line 312 
    adapter->event_received = (unsigned char)0U;
    
#line 313 
    mwifiex_process_event(adapter);
  }
  else ;
  
#line 317 
  if ((unsigned int)adapter->cmd_resp_received != 0U) {
    
#line 318 
    adapter->cmd_resp_received = (unsigned char)0U;
    
#line 319 
    mwifiex_process_cmdresp(adapter);
    
#line 322 
    if (adapter->hw_status == (unsigned int)MWIFIEX_HW_STATUS_INIT_DONE) {
      
#line 323 
      adapter->hw_status = MWIFIEX_HW_STATUS_READY;
      
#line 324 
      mwifiex_init_fw_complete(adapter);
    }
    else ;
  }
  else ;
  
#line 330 
  if (adapter->ps_state == 1U) {
    
#line 331 
    if ((unsigned int)adapter->cmd_sent == 0U && adapter->curr_cmd == (struct cmd_ctrl_node *)0) 
      
#line 332 
      mwifiex_check_ps_cond(adapter); else ;
  }
  else ;
  
#line 338 
  if (((adapter->ps_state == 3U || adapter->ps_state == 1U) || adapter->ps_state == 2U) || (unsigned int)adapter->tx_lock_flag != 0U) 
    
#line 342 
    goto ldv_61755; else ;
  
#line 345 
  if ((unsigned int)adapter->cmd_sent == 0U && adapter->curr_cmd == (struct cmd_ctrl_node *)0) {
    int tmp_6;
    
#line 346 
    tmp_6 = mwifiex_exec_next_cmd(adapter);
    
#line 346 
    if (tmp_6 == -1) {
      
#line 347 
      ret = -1;
      
#line 348 
      goto ldv_61754;
    }
    else ;
  }
  else ;
  
#line 352 
  if (((int)adapter->scan_chan_gap_enabled != 0 || adapter->scan_processing == 0U) && (unsigned int)adapter->data_sent == 0U) {
    int tmp_8;
    
#line 354 
    tmp_8 = skb_queue_empty((struct sk_buff_head const *)(& adapter->tx_data_q));
    
#line 354 
    if (tmp_8 == 0) {
      
#line 356 
      mwifiex_process_tx_queue(adapter);
      
#line 357 
      if ((unsigned int)adapter->hs_activated != 0U) {
        struct mwifiex_private *tmp_7;
        
#line 358 
        adapter->is_hs_configured = (unsigned char)0U;
        
#line 359 
        tmp_7 = mwifiex_get_priv_0(adapter,(enum mwifiex_bss_role)MWIFIEX_BSS_ROLE_ANY);
        
#line 359 
        mwifiex_hs_activated_event(tmp_7,(unsigned char)0);
      }
      else ;
    }
    else ;
  }
  else ;
  
#line 366 
  if (((int)adapter->scan_chan_gap_enabled != 0 || adapter->scan_processing == 0U) && (unsigned int)adapter->data_sent == 0U) {
    int tmp_10;
    
#line 368 
    tmp_10 = mwifiex_wmm_lists_empty(adapter);
    
#line 368 
    if (tmp_10 == 0) {
      
#line 369 
      mwifiex_wmm_process_tx(adapter);
      
#line 370 
      if ((unsigned int)adapter->hs_activated != 0U) {
        struct mwifiex_private *tmp_9;
        
#line 371 
        adapter->is_hs_configured = (unsigned char)0U;
        
#line 372 
        tmp_9 = mwifiex_get_priv_0(adapter,(enum mwifiex_bss_role)MWIFIEX_BSS_ROLE_ANY);
        
#line 372 
        mwifiex_hs_activated_event(tmp_9,(unsigned char)0);
      }
      else ;
    }
    else ;
  }
  else ;
  
#line 379 
  if (((unsigned int)adapter->delay_null_pkt != 0U && (unsigned int)adapter->cmd_sent == 0U) && adapter->curr_cmd == (struct cmd_ctrl_node *)0) {
    int tmp_13;
    
#line 380 
    tmp_13 = is_command_pending(adapter);
    
#line 380 
    if (tmp_13 == 0) {
      int tmp_14;
      
#line 380 
      tmp_14 = mwifiex_wmm_lists_empty(adapter);
      
#line 380 
      if (tmp_14 != 0) {
        int tmp_15;
        
#line 381 
        tmp_15 = skb_queue_empty((struct sk_buff_head const *)(& adapter->tx_data_q));
        
#line 381 
        if (tmp_15 != 0) {
          int tmp_12;
          struct mwifiex_private *tmp_11;
          
#line 383 
          tmp_11 = mwifiex_get_priv_0(adapter,(enum mwifiex_bss_role)MWIFIEX_BSS_ROLE_STA);
          
#line 383 
          tmp_12 = mwifiex_send_null_packet(tmp_11,(unsigned char)9);
          
#line 383 
          if (tmp_12 == 0) {
            
#line 387 
            adapter->delay_null_pkt = (unsigned char)0U;
            
#line 388 
            adapter->ps_state = 3U;
          }
          else ;
          
#line 390 
          goto ldv_61754;
        }
        else ;
      }
      else ;
    }
    else ;
  }
  else ;
  ldv_61755: 
#line 392 
  ;
  
#line 244 
  goto ldv_61756;
  ldv_61754: 
#line 245 
  ;
  
#line 394 
  ldv___ldv_spin_lock_97(& adapter->main_proc_lock);
  
#line 395 
  if ((unsigned int)adapter->more_task_flag != 0U) {
    
#line 396 
    adapter->more_task_flag = (unsigned char)0U;
    
#line 397 
    ldv_spin_unlock_irqrestore_98(& adapter->main_proc_lock,flags);
    
#line 398 
    goto process_start;
  }
  else ;
  
#line 400 
  adapter->mwifiex_processing = 0U;
  
#line 401 
  ldv_spin_unlock_irqrestore_99_0(& adapter->main_proc_lock,flags);
  exit_main_proc: 
#line 403 
  ;
  
#line 404 
  if (adapter->hw_status == (unsigned int)MWIFIEX_HW_STATUS_CLOSING) 
    
#line 405 
    mwifiex_shutdown_drv(adapter); else ;
  
#line 406 
  return ret;
}


#line 408  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.c"
static char const __kstrtab_mwifiex_main_process[21U] = {(char)'m', (char)'w', (char)'i', (char)'f', (char)'i', (char)'e', (char)'x', (char)'_', (char)'m', (char)'a', (char)'i', (char)'n', (char)'_', (char)'p', (char)'r', (char)'o', (char)'c', (char)'e', (char)'s', (char)'s', (char)'\000'};

#line 408 
struct kernel_symbol const __ksymtab_mwifiex_main_process;


#line 408  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.c"
struct kernel_symbol const __ksymtab_mwifiex_main_process = {.value = (unsigned long)(& mwifiex_main_process), .name = (char const *)(& __kstrtab_mwifiex_main_process)};

#line 416  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.c"
static void mwifiex_free_adapter(struct mwifiex_adapter *adapter)
{
  
#line 418 
  if (adapter == (struct mwifiex_adapter *)0) {
    
#line 419 
    printk("\001","mwifiex_free_adapter");
    
#line 420 
    goto return_label;
  }
  else ;
  
#line 423 
  mwifiex_unregister(adapter);
  {
    
#line 424 
    struct _ddebug descriptor = {.modname = "mwifiex", .function = "mwifiex_free_adapter", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.c", .format = "info: %s: free adapter\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))424U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 424 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 424 
                                                        __dynamic_pr_debug(& descriptor,"mwifiex","mwifiex_free_adapter"); else ;
  }
  return_label: 
#line 426 
                return;
}


#line 431  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.c"
static void mwifiex_terminate_workqueue(struct mwifiex_adapter *adapter)
{
  
#line 433 
  flush_workqueue(adapter->workqueue);
  
#line 434 
  destroy_workqueue(adapter->workqueue);
  
#line 435 
  adapter->workqueue = (struct workqueue_struct *)0;
  
#line 437 
  if (adapter->rx_workqueue != (struct workqueue_struct *)0) {
    
#line 438 
    flush_workqueue(adapter->rx_workqueue);
    
#line 439 
    destroy_workqueue(adapter->rx_workqueue);
    
#line 440 
    adapter->rx_workqueue = (struct workqueue_struct *)0;
  }
  else ;
  
#line 442 
  return;
}


#line 451  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.c"
static void mwifiex_fw_dpc(struct firmware const *firmware, void *context)
{
  int ret;
  char fmt[64U];
  struct mwifiex_private *priv;
  struct mwifiex_fw_image fw;
  struct wireless_dev *wdev;
  int tmp_3_0;
  int tmp_4;
  bool tmp_5;
  
#line 456 
  struct mwifiex_adapter *adapter = (struct mwifiex_adapter *)context;
  
#line 458 
  struct semaphore *sem = adapter->card_sem;
  
#line 459 
  bool init_failed = (_Bool)0;
  
#line 462 
  if (firmware == (struct firmware const *)0) {
    
#line 463 
    if ((adapter->debug_mask & 4U) != 0U) {
      
#line 463 
      if (adapter->dev != (struct device *)0) 
#line 463 
                                              _dev_info((struct device const *)adapter->dev,"Failed to get firmware %s\n",(char *)(& adapter->fw_name)); else ;
    }
    else ;
    
#line 465 
    goto err_dnld_fw;
  }
  else ;
  
#line 468 
  memset((void *)(& fw),0,32UL);
  
#line 469 
  adapter->firmware = firmware;
  
#line 470 
  fw.fw_buf = (u8 *)(adapter->firmware)->data;
  
#line 471 
  fw.fw_len = (unsigned int)(adapter->firmware)->size;
  
#line 473 
  if (adapter->if_ops.dnld_fw != (int (*)(struct mwifiex_adapter *, struct mwifiex_fw_image *))0) 
    
#line 474 
    ret = (*(adapter->if_ops.dnld_fw))(adapter,& fw); else 
#line 476 
                                                           ret = mwifiex_dnld_fw(adapter,& fw);
  
#line 477 
  if (ret == -1) 
#line 478 
                 goto err_dnld_fw; else ;
  
#line 480 
  if ((adapter->debug_mask & 1U) != 0U) {
    
#line 480 
    if (adapter->dev != (struct device *)0) 
#line 480 
                                            _dev_info((struct device const *)adapter->dev,"WLAN FW is active\n"); else ;
  }
  else ;
  
#line 482 
  if (cal_data_cfg != (char *)0) {
    int tmp;
    
#line 483 
    tmp = request_firmware(& adapter->cal_data,(char const *)cal_data_cfg,adapter->dev);
    
#line 483 
    if (tmp < 0) {
      
#line 485 
      if ((adapter->debug_mask & 4U) != 0U) {
        
#line 485 
        if (adapter->dev != (struct device *)0) 
#line 485 
                                                _dev_info((struct device const *)adapter->dev,"Cal data request_firmware() failed\n"); else ;
      }
      else ;
    }
    else ;
  }
  else ;
  
#line 490 
  if (adapter->if_ops.enable_int != (int (*)(struct mwifiex_adapter *))0) {
    int tmp_0;
    
#line 491 
    tmp_0 = (*(adapter->if_ops.enable_int))(adapter);
    
#line 491 
    if (tmp_0 != 0) 
#line 492 
                    goto err_dnld_fw; else ;
  }
  else ;
  
#line 495 
  adapter->init_wait_q_woken = (unsigned short)0U;
  
#line 496 
  ret = mwifiex_init_fw(adapter);
  
#line 497 
  if (ret == -1) 
#line 498 
                 goto err_init_fw;
  else 
    
#line 499 
    if (ret == 0) {
      
#line 500 
      adapter->hw_status = MWIFIEX_HW_STATUS_READY;
      
#line 501 
      goto done;
    }
    else ;
  {
    
#line 504 
    int __ret = 0;
    
#line 504 
    __might_sleep("/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.c",505,0);
    
#line 504 
    if ((unsigned int)adapter->init_wait_q_woken == 0U) {
      long tmp_2;
      {
        wait_queue_t __wait;
        
#line 504 
        long __ret_0 = 0L;
        
#line 504 
        INIT_LIST_HEAD(& __wait.task_list);
        
#line 504 
        __wait.flags = 0U;
        ldv_61793: 
#line 507 
        ;
        {
          
#line 504 
          long __int = prepare_to_wait_event(& adapter->init_wait_q,& __wait,1);
          
#line 504 
          if ((unsigned int)adapter->init_wait_q_woken != 0U) 
#line 504 
                                                              goto ldv_61792; else ;
          
#line 504 
          if (__int != 0L) {
            
#line 504 
            __ret_0 = __int;
            
#line 504 
            goto ldv_61792;
          }
          else ;
          
#line 504 
          schedule();
        }
        
#line 504 
        goto ldv_61793;
        ldv_61792: 
#line 505 
        ;
        
#line 504 
        finish_wait(& adapter->init_wait_q,& __wait);
        __out_0: 
#line 504 
        ;
        
#line 504 
        tmp_2 = __ret_0;
      }
      
#line 504 
      __ret = (int)tmp_2;
    }
    else ;
    
#line 504 
    int tmp_3 = __ret;
  }
  
#line 506 
  if (adapter->hw_status != (unsigned int)MWIFIEX_HW_STATUS_READY) 
#line 507 
                                                                   goto err_init_fw; else ;
  
#line 509 
  priv = adapter->priv[0];
  
#line 510 
  tmp_3_0 = mwifiex_register_cfg80211(adapter);
  
#line 510 
  if (tmp_3_0 != 0) {
    
#line 511 
    if ((adapter->debug_mask & 4U) != 0U) {
      
#line 511 
      if (adapter->dev != (struct device *)0) 
#line 511 
                                              _dev_info((struct device const *)adapter->dev,"cannot register with cfg80211\n"); else ;
    }
    else ;
    
#line 513 
    goto err_init_fw;
  }
  else ;
  
#line 516 
  tmp_4 = mwifiex_init_channel_scan_gap(adapter);
  
#line 516 
  if (tmp_4 != 0) {
    
#line 517 
    if ((adapter->debug_mask & 4U) != 0U) {
      
#line 517 
      if (adapter->dev != (struct device *)0) 
#line 517 
                                              _dev_info((struct device const *)adapter->dev,"could not init channel stats table\n"); else ;
    }
    else ;
    
#line 519 
    goto err_init_fw;
  }
  else ;
  
#line 522 
  if ((unsigned int)driver_mode != 0U) {
    
#line 523 
    driver_mode = (unsigned short)((unsigned int)driver_mode & 7U);
    
#line 524 
    driver_mode = (unsigned short)((unsigned int)driver_mode | 1U);
  }
  else ;
  
#line 527 
  rtnl_lock();
  
#line 529 
  wdev = mwifiex_add_virtual_intf(adapter->wiphy,"mlan%d",(unsigned char)1,(enum nl80211_iftype)NL80211_IFTYPE_STATION,(u32 *)0U,(struct vif_params *)0);
  
#line 531 
  tmp_5 = IS_ERR((void const *)wdev);
  
#line 531 
  if ((int)tmp_5 != 0) {
    
#line 532 
    if ((adapter->debug_mask & 4U) != 0U) {
      
#line 532 
      if (adapter->dev != (struct device *)0) 
#line 532 
                                              _dev_info((struct device const *)adapter->dev,"cannot create default STA interface\n"); else ;
    }
    else ;
    
#line 534 
    rtnl_unlock();
    
#line 535 
    goto err_add_intf;
  }
  else ;
  
#line 538 
  if (((unsigned long)driver_mode & 2UL) != 0UL) {
    bool tmp_6;
    
#line 539 
    wdev = mwifiex_add_virtual_intf(adapter->wiphy,"uap%d",(unsigned char)1,(enum nl80211_iftype)NL80211_IFTYPE_AP,(u32 *)0U,(struct vif_params *)0);
    
#line 541 
    tmp_6 = IS_ERR((void const *)wdev);
    
#line 541 
    if ((int)tmp_6 != 0) {
      
#line 542 
      if ((adapter->debug_mask & 4U) != 0U) {
        
#line 542 
        if (adapter->dev != (struct device *)0) 
#line 542 
                                                _dev_info((struct device const *)adapter->dev,"cannot create AP interface\n"); else ;
      }
      else ;
      
#line 544 
      rtnl_unlock();
      
#line 545 
      goto err_add_intf;
    }
    else ;
  }
  else ;
  
#line 549 
  if (((unsigned long)driver_mode & 4UL) != 0UL) {
    bool tmp_7;
    
#line 550 
    wdev = mwifiex_add_virtual_intf(adapter->wiphy,"p2p%d",(unsigned char)1,(enum nl80211_iftype)NL80211_IFTYPE_P2P_CLIENT,(u32 *)0U,(struct vif_params *)0);
    
#line 553 
    tmp_7 = IS_ERR((void const *)wdev);
    
#line 553 
    if ((int)tmp_7 != 0) {
      
#line 554 
      if ((adapter->debug_mask & 4U) != 0U) {
        
#line 554 
        if (adapter->dev != (struct device *)0) 
#line 554 
                                                _dev_info((struct device const *)adapter->dev,"cannot create p2p client interface\n"); else ;
      }
      else ;
      
#line 556 
      rtnl_unlock();
      
#line 557 
      goto err_add_intf;
    }
    else ;
  }
  else ;
  
#line 560 
  rtnl_unlock();
  
#line 562 
  mwifiex_drv_get_driver_version(adapter,(char *)(& fmt),63);
  
#line 563 
  if ((adapter->debug_mask & 1U) != 0U) {
    
#line 563 
    if (adapter->dev != (struct device *)0) 
#line 563 
                                            _dev_info((struct device const *)adapter->dev,"driver_version = %s\n",(char *)(& fmt)); else ;
  }
  else ;
  
#line 564 
  goto done;
  err_add_intf: 
#line 566 
  ;
  
#line 567 
  wiphy_unregister(adapter->wiphy);
  
#line 568 
  wiphy_free(adapter->wiphy);
  err_init_fw: 
#line 569 
  ;
  
#line 570 
  if (adapter->if_ops.disable_int != (void (*)(struct mwifiex_adapter *))0) 
    
#line 571 
    (*(adapter->if_ops.disable_int))(adapter); else ;
  err_dnld_fw: 
#line 572 
  ;
  
#line 573 
  if ((adapter->debug_mask & 4U) != 0U) {
    
#line 573 
    if (adapter->dev != (struct device *)0) 
#line 573 
                                            _dev_info((struct device const *)adapter->dev,"info: %s: unregister device\n","mwifiex_fw_dpc"); else ;
  }
  else ;
  
#line 575 
  if (adapter->if_ops.unregister_dev != (void (*)(struct mwifiex_adapter *))0) 
    
#line 576 
    (*(adapter->if_ops.unregister_dev))(adapter); else ;
  
#line 578 
  if (adapter->hw_status == (unsigned int)MWIFIEX_HW_STATUS_READY) {
    int tmp_10_0;
    {
      
#line 579 
      struct _ddebug descriptor = {.modname = "mwifiex", .function = "mwifiex_fw_dpc", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.c", .format = "info: %s: shutdown mwifiex\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))579U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 579 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 579 
                                                          __dynamic_pr_debug(& descriptor,"mwifiex","mwifiex_fw_dpc"); else ;
    }
    
#line 580 
    adapter->init_wait_q_woken = (unsigned short)0U;
    
#line 582 
    tmp_10_0 = mwifiex_shutdown_drv(adapter);
    
#line 582 
    if (tmp_10_0 == -115) {
      
#line 583 
      int __ret_1 = 0;
      
#line 583 
      __might_sleep("/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.c",584,0);
      
#line 583 
      if ((unsigned int)adapter->init_wait_q_woken == 0U) {
        long tmp_9;
        {
          wait_queue_t __wait_0;
          
#line 583 
          long __ret_2 = 0L;
          
#line 583 
          INIT_LIST_HEAD(& __wait_0.task_list);
          
#line 583 
          __wait_0.flags = 0U;
          ldv_61805: 
#line 586 
          ;
          {
            
#line 583 
            long __int_0 = prepare_to_wait_event(& adapter->init_wait_q,& __wait_0,1);
            
#line 583 
            if ((unsigned int)adapter->init_wait_q_woken != 0U) 
#line 583 
                                                                goto ldv_61804; else ;
            
#line 583 
            if (__int_0 != 0L) {
              
#line 583 
              __ret_2 = __int_0;
              
#line 583 
              goto ldv_61804;
            }
            else ;
            
#line 583 
            schedule();
          }
          
#line 583 
          goto ldv_61805;
          ldv_61804: 
#line 584 
          ;
          
#line 583 
          finish_wait(& adapter->init_wait_q,& __wait_0);
          __out_1: 
#line 583 
          ;
          
#line 583 
          tmp_9 = __ret_2;
        }
        
#line 583 
        __ret_1 = (int)tmp_9;
      }
      else ;
      
#line 583 
      int tmp_10 = __ret_1;
    }
    else ;
  }
  else ;
  
#line 586 
  adapter->surprise_removed = (_Bool)1;
  
#line 587 
  mwifiex_terminate_workqueue(adapter);
  
#line 588 
  init_failed = (_Bool)1;
  done: 
#line 589 
  ;
  
#line 590 
  if (adapter->cal_data != (struct firmware const *)0) {
    
#line 591 
    release_firmware(adapter->cal_data);
    
#line 592 
    adapter->cal_data = (struct firmware const *)0;
  }
  else ;
  
#line 594 
  if (adapter->firmware != (struct firmware const *)0) {
    
#line 595 
    release_firmware(adapter->firmware);
    
#line 596 
    adapter->firmware = (struct firmware const *)0;
  }
  else ;
  
#line 598 
  if ((int)init_failed != 0) 
#line 599 
                             mwifiex_free_adapter(adapter); else ;
  
#line 600 
  up(sem);
  
#line 601 
  return;
}


#line 607  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.c"
static int mwifiex_init_hw_fw(struct mwifiex_adapter *adapter)
{
  int ret;
  
#line 611 
  ret = request_firmware_nowait(& __this_module,(_Bool)1,(char const *)(& adapter->fw_name),adapter->dev,208U,(void *)adapter,& mwifiex_fw_dpc);
  
#line 614 
  if (ret < 0) {
    
#line 615 
    if ((adapter->debug_mask & 4U) != 0U) {
      
#line 615 
      if (adapter->dev != (struct device *)0) 
#line 615 
                                              _dev_info((struct device const *)adapter->dev,"request_firmware_nowait error %d\n",ret); else ;
    }
    else ;
  }
  else ;
  
#line 617 
  return ret;
}


#line 626  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.c"
static int mwifiex_open(struct net_device *dev)
{
  int __retres;
  
#line 628 
  netif_carrier_off(dev);
  
#line 630 
  __retres = 0;
  
#line 630 
  return __retres;
}


#line 637  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.c"
static int mwifiex_close(struct net_device *dev)
{
  int __retres;
  
#line 639 
  struct mwifiex_private *priv = mwifiex_netdev_get_priv(dev);
  
#line 641 
  if (priv->scan_request != (struct cfg80211_scan_request *)0) {
    
#line 642 
    if (((priv->adapter)->debug_mask & 1073741824U) != 0U) {
      
#line 642 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 642 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"aborting scan on ndo_stop\n"); else ;
    }
    else ;
    
#line 644 
    cfg80211_scan_done(priv->scan_request,(_Bool)1);
    
#line 645 
    priv->scan_request = (struct cfg80211_scan_request *)0;
    
#line 646 
    priv->scan_aborting = (_Bool)1;
  }
  else ;
  
#line 649 
  __retres = 0;
  
#line 649 
  return __retres;
}


#line 655  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.c"
int mwifiex_queue_tx_pkt(struct mwifiex_private *priv, struct sk_buff *skb)
{
  int __retres;
  struct netdev_queue *txq;
  int tmp_1;
  
#line 658 
  int index = (int)mwifiex_1d_to_wmm_queue[skb->priority];
  
#line 660 
  tmp_1 = atomic_add_return(1,& priv->wmm_tx_pending[index]);
  
#line 660 
  if (tmp_1 > 99) {
    int tmp_0;
    bool tmp;
    
#line 661 
    txq = netdev_get_tx_queue((struct net_device const *)priv->netdev,(unsigned int)index);
    
#line 662 
    tmp = netif_tx_queue_stopped((struct netdev_queue const *)txq);
    
#line 662 
    if (tmp) 
#line 662 
             tmp_0 = 0; else 
#line 662 
                             tmp_0 = 1;
    
#line 662 
    if (tmp_0) {
      
#line 663 
      netif_tx_stop_queue(txq);
      
#line 664 
      if (((priv->adapter)->debug_mask & 8U) != 0U) {
        
#line 664 
        if ((priv->adapter)->dev != (struct device *)0) 
#line 664 
                                                        _dev_info((struct device const *)(priv->adapter)->dev,"stop queue: %d\n",index); else ;
      }
      else ;
    }
    else ;
  }
  else ;
  
#line 669 
  atomic_inc_0(& (priv->adapter)->tx_pending);
  
#line 670 
  mwifiex_wmm_add_buf_txqueue(priv,skb);
  
#line 672 
  mwifiex_queue_main_work(priv->adapter);
  
#line 674 
  __retres = 0;
  
#line 674 
  return __retres;
}


#line 678  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.c"
struct sk_buff *mwifiex_clone_skb_for_tx_status(struct mwifiex_private *priv, struct sk_buff *skb, u8 flag, u64 *cookie)
{
  struct mwifiex_txinfo *tx_info;
  struct mwifiex_txinfo *orig_tx_info;
  
#line 681 
  struct sk_buff *orig_skb = skb;
  
#line 684 
  skb = skb_clone(skb,32U);
  
#line 685 
  if (skb != (struct sk_buff *)0) {
    unsigned long flags;
    int id;
    
#line 689 
    ldv___ldv_spin_lock_100(& priv->ack_status_lock);
    
#line 690 
    id = idr_alloc(& priv->ack_status_frames,(void *)orig_skb,1,255,32U);
    
#line 692 
    ldv_spin_unlock_irqrestore_101(& priv->ack_status_lock,flags);
    
#line 694 
    if (id >= 0) {
      
#line 695 
      tx_info = MWIFIEX_SKB_TXCB(skb);
      
#line 696 
      tx_info->ack_frame_id = (unsigned char)id;
      
#line 697 
      tx_info->flags = (unsigned char)((int)tx_info->flags | (int)flag);
      
#line 698 
      orig_tx_info = MWIFIEX_SKB_TXCB(orig_skb);
      
#line 699 
      orig_tx_info->ack_frame_id = (unsigned char)id;
      
#line 700 
      orig_tx_info->flags = (unsigned char)((int)orig_tx_info->flags | (int)flag);
      
#line 702 
      if ((unsigned int)flag == 16U && cookie != (u64 *)0ULL) 
#line 703 
                                                              orig_tx_info->cookie = *cookie; else ;
    }
    else {
      int tmp;
      
#line 705 
      tmp = skb_shared((struct sk_buff const *)skb);
      
#line 705 
      if (tmp != 0) 
#line 706 
                    kfree_skb(orig_skb);
      else {
        
#line 708 
        kfree_skb(skb);
        
#line 709 
        skb = orig_skb;
      }
    }
  }
  else 
#line 713 
       skb = orig_skb;
  
#line 716 
  return skb;
}


#line 723  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.c"
static int mwifiex_hard_start_xmit(struct sk_buff *skb, struct net_device *dev)
{
  int __retres;
  struct sk_buff *new_skb;
  struct mwifiex_txinfo *tx_info;
  bool multicast;
  unsigned int tmp_2;
  int tmp_4;
  
#line 725 
  struct mwifiex_private *priv = mwifiex_netdev_get_priv(dev);
  
#line 730 
  if (((priv->adapter)->debug_mask & 8U) != 0U) {
    
#line 730 
    if ((priv->adapter)->dev != (struct device *)0) 
#line 730 
                                                    _dev_info((struct device const *)(priv->adapter)->dev,"data: %lu BSS(%d-%d): Data <= kernel\n",jiffies,(int)priv->bss_type,(int)priv->bss_num); else ;
  }
  else ;
  
#line 734 
  if ((int)(priv->adapter)->surprise_removed != 0) {
    
#line 735 
    kfree_skb(skb);
    
#line 736 
    priv->stats.tx_dropped += 1UL;
    
#line 737 
    __retres = 0;
    
#line 737 
    goto return_label;
  }
  else ;
  
#line 739 
  if (skb->len + 4294967295U > 1513U) {
    
#line 740 
    if (((priv->adapter)->debug_mask & 4U) != 0U) {
      
#line 740 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 740 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"Tx: bad skb len %d\n",skb->len); else ;
    }
    else ;
    
#line 742 
    kfree_skb(skb);
    
#line 743 
    priv->stats.tx_dropped += 1UL;
    
#line 744 
    __retres = 0;
    
#line 744 
    goto return_label;
  }
  else ;
  
#line 746 
  tmp_2 = skb_headroom((struct sk_buff const *)skb);
  
#line 746 
  if (tmp_2 <= 99U) {
    
#line 747 
    if (((priv->adapter)->debug_mask & 8U) != 0U) {
      
#line 747 
      if ((priv->adapter)->dev != (struct device *)0) {
        unsigned int tmp_0;
        
#line 747 
        tmp_0 = skb_headroom((struct sk_buff const *)skb);
        
#line 747 
        ;
        
#line 747 
        _dev_info((struct device const *)(priv->adapter)->dev,"data: Tx: insufficient skb headroom %d\n",tmp_0);
      }
      else ;
    }
    else ;
    
#line 751 
    new_skb = skb_realloc_headroom(skb,100U);
    
#line 753 
    if ((long)(new_skb == (struct sk_buff *)0) != 0L) {
      
#line 754 
      if (((priv->adapter)->debug_mask & 4U) != 0U) {
        
#line 754 
        if ((priv->adapter)->dev != (struct device *)0) 
#line 754 
                                                        _dev_info((struct device const *)(priv->adapter)->dev,"Tx: cannot alloca new_skb\n"); else ;
      }
      else ;
      
#line 756 
      kfree_skb(skb);
      
#line 757 
      priv->stats.tx_dropped += 1UL;
      
#line 758 
      __retres = 0;
      
#line 758 
      goto return_label;
    }
    else ;
    
#line 760 
    kfree_skb(skb);
    
#line 761 
    skb = new_skb;
    
#line 762 
    if (((priv->adapter)->debug_mask & 1073741824U) != 0U) {
      
#line 762 
      if ((priv->adapter)->dev != (struct device *)0) {
        unsigned int tmp_1;
        
#line 762 
        tmp_1 = skb_headroom((struct sk_buff const *)skb);
        
#line 762 
        ;
        
#line 762 
        _dev_info((struct device const *)(priv->adapter)->dev,"info: new skb headroomd %d\n",tmp_1);
      }
      else ;
    }
    else ;
  }
  else ;
  
#line 767 
  tx_info = MWIFIEX_SKB_TXCB(skb);
  
#line 768 
  memset((void *)tx_info,0,24UL);
  
#line 769 
  tx_info->bss_num = priv->bss_num;
  
#line 770 
  tx_info->bss_type = priv->bss_type;
  
#line 771 
  tx_info->pkt_len = skb->len;
  
#line 773 
  multicast = is_multicast_ether_addr((u8 const *)skb->data);
  
#line 775 
  if ((((long)(! multicast) != 0L && (long)(skb->sk != (struct sock *)0) != 0L) != 0) != 0) {
    unsigned char *tmp_3;
    
#line 775 
    tmp_3 = skb_end_pointer((struct sk_buff const *)skb);
    
#line 775 
    ;
    
#line 775 
    if ((long)(((int)((struct skb_shared_info *)tmp_3)->tx_flags & 16) != 0) != 0L) 
      
#line 775 
      tmp_4 = 1; else 
#line 775 
                      tmp_4 = 0;
  }
  else 
#line 775 
       tmp_4 = 0;
  
#line 775 
  if (tmp_4 != 0) {
    
#line 775 
    if ((long)((unsigned int)(priv->adapter)->fw_api_ver == 15U) != 0L) 
      
#line 778 
      skb = mwifiex_clone_skb_for_tx_status(priv,skb,(unsigned char)8,(u64 *)0ULL); else ;
  }
  else ;
  
#line 789 
  __net_timestamp(skb);
  
#line 791 
  if (((unsigned long)(priv->adapter)->fw_cap_info & 16384UL) != 0UL && (unsigned int)priv->bss_type == 0U) {
    int tmp_6;
    bool tmp_5;
    
#line 793 
    tmp_5 = ether_addr_equal_unaligned((u8 const *)(& priv->cfg_bssid),(u8 const *)skb->data);
    
#line 793 
    if (tmp_5) 
#line 793 
               tmp_6 = 0; else 
#line 793 
                               tmp_6 = 1;
    
#line 793 
    if (tmp_6) {
      
#line 794 
      if ((int)(priv->adapter)->auto_tdls != 0 && (unsigned int)priv->check_tdls_tx != 0U) 
        
#line 795 
        mwifiex_tdls_check_tx(priv,skb); else ;
    }
    else ;
  }
  else ;
  
#line 798 
  mwifiex_queue_tx_pkt(priv,skb);
  
#line 800 
  __retres = 0;
  return_label: 
#line 800 
                return __retres;
}


#line 807  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.c"
static int mwifiex_set_mac_address(struct net_device *dev, void *addr)
{
  int ret;
  
#line 809 
  struct mwifiex_private *priv = mwifiex_netdev_get_priv(dev);
  
#line 810 
  struct sockaddr *hw_addr = (struct sockaddr *)addr;
  
#line 813 
  memcpy((void *)(& priv->curr_addr),(void const *)(& hw_addr->sa_data),6UL);
  
#line 816 
  ret = mwifiex_send_cmd(priv,(unsigned short)77,(unsigned short)1,0U,(void *)0,(_Bool)1);
  
#line 819 
  if (ret == 0) 
#line 820 
                memcpy((void *)(priv->netdev)->dev_addr,(void const *)(& priv->curr_addr),6UL);
  else 
    
#line 822 
    if (((priv->adapter)->debug_mask & 4U) != 0U) {
      
#line 822 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 822 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"set mac address failed: ret=%d\n",ret); else ;
    }
    else ;
  
#line 825 
  memcpy((void *)dev->dev_addr,(void const *)(& priv->curr_addr),6UL);
  
#line 827 
  return ret;
}


#line 833  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.c"
static void mwifiex_set_multicast_list(struct net_device *dev)
{
  struct mwifiex_multicast_list mcast_list;
  
#line 835 
  struct mwifiex_private *priv = mwifiex_netdev_get_priv(dev);
  
#line 838 
  if ((dev->flags & 256U) != 0U) 
#line 839 
                                 mcast_list.mode = 1U;
  else 
    
#line 840 
    if ((dev->flags & 512U) != 0U || dev->mc.count > 32) 
#line 842 
                                                         mcast_list.mode = 4U;
    else {
      int tmp_0;
      
#line 844 
      mcast_list.mode = 2U;
      
#line 846 
      tmp_0 = mwifiex_copy_mcast_addr(& mcast_list,dev);
      
#line 845 
      mcast_list.num_multicast_addr = (unsigned int)tmp_0;
    }
  
#line 848 
  mwifiex_request_set_multicast_list(priv,& mcast_list);
  
#line 849 
  return;
}


#line 855  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.c"
static void mwifiex_tx_timeout(struct net_device *dev)
{
  
#line 857 
  struct mwifiex_private *priv = mwifiex_netdev_get_priv(dev);
  
#line 859 
  priv->num_tx_timeout += 1U;
  
#line 860 
  priv->tx_timeout_cnt = (u8)((int)priv->tx_timeout_cnt + 1);
  
#line 861 
  if (((priv->adapter)->debug_mask & 4U) != 0U) {
    
#line 861 
    if ((priv->adapter)->dev != (struct device *)0) 
#line 861 
                                                    _dev_info((struct device const *)(priv->adapter)->dev,"%lu : Tx timeout(#%d), bss_type-num = %d-%d\n",jiffies,(int)priv->tx_timeout_cnt,(int)priv->bss_type,(int)priv->bss_num); else ;
  }
  else ;
  
#line 865 
  mwifiex_set_trans_start(dev);
  
#line 867 
  if ((unsigned int)priv->tx_timeout_cnt > 6U && (priv->adapter)->if_ops.card_reset != (void (*)(struct mwifiex_adapter *))0) {
    
#line 869 
    if (((priv->adapter)->debug_mask & 4U) != 0U) {
      
#line 869 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 869 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"tx_timeout_cnt exceeds threshold.\t"); else ;
    }
    else ;
    
#line 872 
    (*((priv->adapter)->if_ops.card_reset))(priv->adapter);
  }
  else ;
  
#line 874 
  return;
}


#line 876  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.c"
void mwifiex_drv_info_dump(struct mwifiex_adapter *adapter)
{
  void *p;
  char drv_version[64U];
  struct usb_card_rec *cardp;
  struct sdio_mmc_card *sdio_card;
  struct mwifiex_private *priv;
  int i;
  int idx;
  struct netdev_queue *txq;
  struct mwifiex_debug_info *debug_info;
  int tmp;
  int tmp_0;
  int tmp_10;
  int tmp_9;
  int tmp_12;
  int tmp_11;
  int tmp_15;
  int tmp_17;
  int tmp_16;
  int tmp_19;
  int tmp_18;
  int tmp_21;
  int tmp_20;
  int tmp_23;
  int tmp_22;
  int tmp_25;
  char *tmp_24;
  int tmp_28;
  char *tmp_27;
  bool tmp_26;
  int tmp_31;
  char *tmp_30;
  bool tmp_29;
  int tmp_32;
  int tmp_35;
  
#line 887 
  if (adapter->drv_info_dump != (void *)0) {
    
#line 888 
    vfree((void const *)adapter->drv_info_dump);
    
#line 889 
    adapter->drv_info_dump = (void *)0;
    
#line 890 
    adapter->drv_info_size = 0U;
  }
  else ;
  
#line 893 
  if ((adapter->debug_mask & 1U) != 0U) {
    
#line 893 
    if (adapter->dev != (struct device *)0) 
#line 893 
                                            _dev_info((struct device const *)adapter->dev,"===mwifiex driverinfo dump start===\n"); else ;
  }
  else ;
  
#line 895 
  adapter->drv_info_dump = vzalloc(262144UL);
  
#line 897 
  if (adapter->drv_info_dump == (void *)0) 
#line 898 
                                           goto return_label; else ;
  
#line 900 
  p = adapter->drv_info_dump;
  
#line 901 
  tmp = sprintf((char *)p,"driver_name = ");
  
#line 901 
  p += tmp;
  
#line 903 
  mwifiex_drv_get_driver_version(adapter,(char *)(& drv_version),63);
  
#line 905 
  tmp_0 = sprintf((char *)p,"driver_version = %s\n",(char *)(& drv_version));
  
#line 905 
  p += tmp_0;
  
#line 907 
  if ((unsigned int)adapter->iface_type == 2U) {
    int tmp_2;
    int tmp_1;
    int tmp_4;
    int tmp_3;
    int tmp_6;
    int tmp_5;
    int tmp_8;
    int tmp_7;
    
#line 908 
    cardp = (struct usb_card_rec *)adapter->card;
    
#line 909 
    tmp_1 = atomic_read((atomic_t const *)(& cardp->tx_cmd_urb_pending));
    
#line 909 
    tmp_2 = sprintf((char *)p,"tx_cmd_urb_pending = %d\n",tmp_1);
    
#line 910 
    p += tmp_2;
    
#line 911 
    tmp_3 = atomic_read((atomic_t const *)(& cardp->tx_data_urb_pending));
    
#line 911 
    tmp_4 = sprintf((char *)p,"tx_data_urb_pending = %d\n",tmp_3);
    
#line 912 
    p += tmp_4;
    
#line 913 
    tmp_5 = atomic_read((atomic_t const *)(& cardp->rx_cmd_urb_pending));
    
#line 913 
    tmp_6 = sprintf((char *)p,"rx_cmd_urb_pending = %d\n",tmp_5);
    
#line 914 
    p += tmp_6;
    
#line 915 
    tmp_7 = atomic_read((atomic_t const *)(& cardp->rx_data_urb_pending));
    
#line 915 
    tmp_8 = sprintf((char *)p,"rx_data_urb_pending = %d\n",tmp_7);
    
#line 916 
    p += tmp_8;
  }
  else ;
  
#line 919 
  tmp_9 = atomic_read((atomic_t const *)(& adapter->tx_pending));
  
#line 919 
  tmp_10 = sprintf((char *)p,"tx_pending = %d\n",tmp_9);
  
#line 920 
  p += tmp_10;
  
#line 921 
  tmp_11 = atomic_read((atomic_t const *)(& adapter->rx_pending));
  
#line 921 
  tmp_12 = sprintf((char *)p,"rx_pending = %d\n",tmp_11);
  
#line 922 
  p += tmp_12;
  
#line 924 
  if ((unsigned int)adapter->iface_type == 0U) {
    int tmp_13;
    int tmp_14;
    
#line 925 
    sdio_card = (struct sdio_mmc_card *)adapter->card;
    
#line 926 
    tmp_13 = sprintf((char *)p,"\nmp_rd_bitmap=0x%x curr_rd_port=0x%x\n",sdio_card->mp_rd_bitmap,(int)sdio_card->curr_rd_port);
    
#line 927 
    p += tmp_13;
    
#line 928 
    tmp_14 = sprintf((char *)p,"mp_wr_bitmap=0x%x curr_wr_port=0x%x\n",sdio_card->mp_wr_bitmap,(int)sdio_card->curr_wr_port);
    
#line 929 
    p += tmp_14;
  }
  else ;
  
#line 932 
  i = 0;
  
#line 932 
  goto ldv_61877;
  ldv_61876: 
#line 933 
  ;
  
#line 933 
  if (adapter->priv[i] == (struct mwifiex_private *)0 || (adapter->priv[i])->netdev == (struct net_device *)0) 
    
#line 934 
    goto ldv_61872; else ;
  
#line 935 
  priv = adapter->priv[i];
  
#line 936 
  tmp_15 = sprintf((char *)p,"\n[interface  : \"%s\"]\n",(char *)(& (priv->netdev)->name));
  
#line 937 
  p += tmp_15;
  
#line 938 
  tmp_16 = atomic_read((atomic_t const *)(& priv->wmm_tx_pending[0]));
  
#line 938 
  tmp_17 = sprintf((char *)p,"wmm_tx_pending[0] = %d\n",tmp_16);
  
#line 939 
  p += tmp_17;
  
#line 940 
  tmp_18 = atomic_read((atomic_t const *)(& priv->wmm_tx_pending[1]));
  
#line 940 
  tmp_19 = sprintf((char *)p,"wmm_tx_pending[1] = %d\n",tmp_18);
  
#line 941 
  p += tmp_19;
  
#line 942 
  tmp_20 = atomic_read((atomic_t const *)(& priv->wmm_tx_pending[2]));
  
#line 942 
  tmp_21 = sprintf((char *)p,"wmm_tx_pending[2] = %d\n",tmp_20);
  
#line 943 
  p += tmp_21;
  
#line 944 
  tmp_22 = atomic_read((atomic_t const *)(& priv->wmm_tx_pending[3]));
  
#line 944 
  tmp_23 = sprintf((char *)p,"wmm_tx_pending[3] = %d\n",tmp_22);
  
#line 945 
  p += tmp_23;
  
#line 946 
  if ((unsigned int)priv->media_connected == 0U) 
#line 946 
                                                 tmp_24 = (char *)"Disconnected"; else 
                                                                    
#line 946 
                                                                    tmp_24 = (char *)"Connected";
  
#line 946 
  tmp_25 = sprintf((char *)p,"media_state=\"%s\"\n",tmp_24);
  
#line 947 
  p += tmp_25;
  
#line 948 
  tmp_26 = netif_carrier_ok((struct net_device const *)priv->netdev);
  
#line 948 
  if ((int)tmp_26 != 0) 
#line 948 
                        tmp_27 = (char *)"on"; else 
#line 948 
                                                    tmp_27 = (char *)"off";
  
#line 948 
  tmp_28 = sprintf((char *)p,"carrier %s\n",tmp_27);
  
#line 949 
  p += tmp_28;
  
#line 950 
  idx = 0;
  
#line 950 
  goto ldv_61874;
  ldv_61873: 
#line 951 
  ;
  
#line 951 
  txq = netdev_get_tx_queue((struct net_device const *)priv->netdev,(unsigned int)idx);
  
#line 952 
  tmp_29 = netif_tx_queue_stopped((struct netdev_queue const *)txq);
  
#line 952 
  if ((int)tmp_29 != 0) 
#line 952 
                        tmp_30 = (char *)"stopped"; else 
#line 952 
                                                         tmp_30 = (char *)"started";
  
#line 952 
  ;
  
#line 952 
  tmp_31 = sprintf((char *)p,"tx queue %d:%s  ",idx,tmp_30);
  
#line 954 
  p += tmp_31;
  
#line 950 
  idx += 1;
  ldv_61874: 
#line 951 
  ;
  
#line 950 
  if ((priv->netdev)->num_tx_queues > (unsigned int)idx) 
#line 952 
                                                         goto ldv_61873; else 
                                                                    
#line 955 
                                                                    goto ldv_61875;
  ldv_61875: 
#line 956 
  ;
  
#line 956 
  tmp_32 = sprintf((char *)p,"\n%s: num_tx_timeout = %d\n",(char *)(& (priv->netdev)->name),priv->num_tx_timeout);
  
#line 957 
  p += tmp_32;
  ldv_61872: 
#line 958 
  ;
  
#line 932 
  i += 1;
  ldv_61877: 
#line 933 
  ;
  
#line 932 
  if ((int)adapter->priv_num > i) 
#line 934 
                                  goto ldv_61876; else 
#line 937 
                                                       goto ldv_61878;
  ldv_61878: 
#line 938 
  ;
  
#line 960 
  if ((unsigned int)adapter->iface_type == 0U) {
    int tmp_33;
    
#line 961 
    tmp_33 = sprintf((char *)p,"\n=== SDIO register dump===\n");
    
#line 961 
    p += tmp_33;
    
#line 962 
    if (adapter->if_ops.reg_dump != (int (*)(struct mwifiex_adapter *, char *))0) {
      int tmp_34;
      
#line 963 
      tmp_34 = (*(adapter->if_ops.reg_dump))(adapter,(char *)p);
      
#line 963 
      p += tmp_34;
    }
    else ;
  }
  else ;
  
#line 966 
  tmp_35 = sprintf((char *)p,"\n=== more debug information\n");
  
#line 966 
  p += tmp_35;
  
#line 967 
  debug_info = (struct mwifiex_debug_info *)kzalloc(4596UL,208U);
  
#line 968 
  if (debug_info != (struct mwifiex_debug_info *)0) {
    int tmp_37;
    
#line 969 
    i = 0;
    
#line 969 
    goto ldv_61882;
    ldv_61881: 
#line 970 
    ;
    
#line 970 
    if (adapter->priv[i] == (struct mwifiex_private *)0 || (adapter->priv[i])->netdev == (struct net_device *)0) 
      
#line 971 
      goto ldv_61879; else ;
    
#line 972 
    priv = adapter->priv[i];
    
#line 973 
    mwifiex_get_debug_info(priv,debug_info);
    
#line 974 
    tmp_37 = mwifiex_debug_info_to_buffer(priv,(char *)p,debug_info);
    
#line 974 
    p += tmp_37;
    
#line 975 
    goto ldv_61880;
    ldv_61879: 
#line 976 
    ;
    
#line 969 
    i += 1;
    ldv_61882: 
#line 970 
    ;
    
#line 969 
    if ((int)adapter->priv_num > i) 
#line 971 
                                    goto ldv_61881; else 
#line 974 
                                                         goto ldv_61880;
    ldv_61880: 
#line 975 
    ;
    
#line 977 
    kfree((void const *)debug_info);
  }
  else ;
  
#line 980 
  adapter->drv_info_size = (unsigned int)((long)p - (long)adapter->drv_info_dump);
  
#line 981 
  if ((adapter->debug_mask & 1U) != 0U) {
    
#line 981 
    if (adapter->dev != (struct device *)0) 
#line 981 
                                            _dev_info((struct device const *)adapter->dev,"===mwifiex driverinfo dump end===\n"); else ;
  }
  else ;
  return_label: 
#line 982 
                return;
}


#line 983  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.c"
static char const __kstrtab_mwifiex_drv_info_dump[22U] = {(char)'m', (char)'w', (char)'i', (char)'f', (char)'i', (char)'e', (char)'x', (char)'_', (char)'d', (char)'r', (char)'v', (char)'_', (char)'i', (char)'n', (char)'f', (char)'o', (char)'_', (char)'d', (char)'u', (char)'m', (char)'p', (char)'\000'};

#line 983 
struct kernel_symbol const __ksymtab_mwifiex_drv_info_dump;


#line 983  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.c"
struct kernel_symbol const __ksymtab_mwifiex_drv_info_dump = {.value = (unsigned long)(& mwifiex_drv_info_dump), .name = (char const *)(& __kstrtab_mwifiex_drv_info_dump)};

#line 985  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.c"
void mwifiex_upload_device_dump(struct mwifiex_adapter *adapter)
{
  u8 idx;
  u8 *dump_data;
  u8 *fw_dump_ptr;
  u32 dump_len;
  size_t tmp;
  size_t tmp_0;
  size_t tmp_6;
  size_t tmp_7;
  
#line 990 
  tmp = strlen("========Start dump driverinfo========\n");
  
#line 991 
  tmp_0 = strlen("\n========End dump========\n");
  
#line 990 
  dump_len = ((unsigned int)tmp + adapter->drv_info_size) + (unsigned int)tmp_0;
  
#line 994 
  idx = (unsigned char)0U;
  
#line 994 
  goto ldv_61899;
  ldv_61898: 
#line 995 
  ;
  {
    
#line 995 
    struct memory_type_mapping *entry = adapter->mem_type_mapping_tbl + (int)idx;
    
#line 998 
    if (entry->mem_ptr != (u8 *)0U) {
      size_t tmp_1;
      size_t tmp_2;
      size_t tmp_3;
      size_t tmp_4;
      
#line 999 
      tmp_1 = strlen("========Start dump ");
      
#line 999 
      tmp_2 = strlen((char const *)(& entry->mem_name));
      
#line 1000 
      tmp_3 = strlen("========\n");
      
#line 1002 
      tmp_4 = strlen("\n========End dump========\n");
      
#line 1003 
      dump_len = (unsigned int)((((tmp_1 + tmp_2) + tmp_3) + (unsigned long)(entry->mem_size + 1U)) + tmp_4) + dump_len;
    }
    else ;
  }
  
#line 994 
  idx = (u8)((int)idx + 1);
  ldv_61899: 
#line 995 
  ;
  
#line 994 
  if ((int)adapter->num_mem_types > (int)idx) 
#line 996 
                                              goto ldv_61898; else 
#line 999 
                                                                   goto ldv_61900;
  ldv_61900: 
#line 1000 
  ;
  
#line 1007 
  dump_data = (u8 *)vzalloc((unsigned long)(dump_len + 1U));
  
#line 1008 
  if (dump_data == (u8 *)0U) 
#line 1009 
                             goto done; else ;
  
#line 1011 
  fw_dump_ptr = dump_data;
  
#line 1016 
  if ((adapter->debug_mask & 1U) != 0U) {
    
#line 1016 
    if (adapter->dev != (struct device *)0) 
#line 1016 
                                            _dev_info((struct device const *)adapter->dev,"== mwifiex dump information to /sys/class/devcoredump start"); else ;
  }
  else ;
  
#line 1019 
  strcpy((char *)fw_dump_ptr,"========Start dump driverinfo========\n");
  
#line 1020 
  tmp_6 = strlen("========Start dump driverinfo========\n");
  
#line 1020 
  fw_dump_ptr += tmp_6;
  
#line 1021 
  memcpy((void *)fw_dump_ptr,(void const *)adapter->drv_info_dump,(unsigned long)adapter->drv_info_size);
  
#line 1022 
  fw_dump_ptr += adapter->drv_info_size;
  
#line 1023 
  strcpy((char *)fw_dump_ptr,"\n========End dump========\n");
  
#line 1024 
  tmp_7 = strlen("\n========End dump========\n");
  
#line 1024 
  fw_dump_ptr += tmp_7;
  
#line 1026 
  idx = (unsigned char)0U;
  
#line 1026 
  goto ldv_61904;
  ldv_61903: 
#line 1027 
  ;
  {
    
#line 1027 
    struct memory_type_mapping *entry_0 = adapter->mem_type_mapping_tbl + (int)idx;
    
#line 1030 
    if (entry_0->mem_ptr != (u8 *)0U) {
      size_t tmp_8;
      size_t tmp_9;
      size_t tmp_10;
      size_t tmp_11;
      
#line 1031 
      strcpy((char *)fw_dump_ptr,"========Start dump ");
      
#line 1032 
      tmp_8 = strlen("========Start dump ");
      
#line 1032 
      fw_dump_ptr += tmp_8;
      
#line 1034 
      strcpy((char *)fw_dump_ptr,(char const *)(& entry_0->mem_name));
      
#line 1035 
      tmp_9 = strlen((char const *)(& entry_0->mem_name));
      
#line 1035 
      fw_dump_ptr += tmp_9;
      
#line 1037 
      strcpy((char *)fw_dump_ptr,"========\n");
      
#line 1038 
      tmp_10 = strlen("========\n");
      
#line 1038 
      fw_dump_ptr += tmp_10;
      
#line 1040 
      memcpy((void *)fw_dump_ptr,(void const *)entry_0->mem_ptr,(unsigned long)entry_0->mem_size);
      
#line 1041 
      fw_dump_ptr += entry_0->mem_size;
      
#line 1043 
      strcpy((char *)fw_dump_ptr,"\n========End dump========\n");
      
#line 1044 
      tmp_11 = strlen("\n========End dump========\n");
      
#line 1044 
      fw_dump_ptr += tmp_11;
    }
    else ;
  }
  
#line 1026 
  idx = (u8)((int)idx + 1);
  ldv_61904: 
#line 1027 
  ;
  
#line 1026 
  if ((int)adapter->num_mem_types > (int)idx) 
#line 1028 
                                              goto ldv_61903; else 
#line 1031 
                                                                   goto ldv_61905;
  ldv_61905: 
#line 1032 
  ;
  
#line 1051 
  dev_coredumpv(adapter->dev,(void const *)dump_data,(unsigned long)dump_len,208U);
  
#line 1052 
  if ((adapter->debug_mask & 1U) != 0U) {
    
#line 1052 
    if (adapter->dev != (struct device *)0) 
#line 1052 
                                            _dev_info((struct device const *)adapter->dev,"== mwifiex dump information to /sys/class/devcoredump end"); else ;
  }
  else ;
  done: 
#line 1055 
  ;
  
#line 1056 
  idx = (unsigned char)0U;
  
#line 1056 
  goto ldv_61908;
  ldv_61907: 
#line 1057 
  ;
  {
    
#line 1057 
    struct memory_type_mapping *entry_1 = adapter->mem_type_mapping_tbl + (int)idx;
    
#line 1060 
    if (entry_1->mem_ptr != (u8 *)0U) {
      
#line 1061 
      vfree((void const *)entry_1->mem_ptr);
      
#line 1062 
      entry_1->mem_ptr = (u8 *)0U;
    }
    else ;
    
#line 1064 
    entry_1->mem_size = 0U;
  }
  
#line 1056 
  idx = (u8)((int)idx + 1);
  ldv_61908: 
#line 1057 
  ;
  
#line 1056 
  if ((int)adapter->num_mem_types > (int)idx) 
#line 1058 
                                              goto ldv_61907; else 
#line 1061 
                                                                   goto ldv_61909;
  ldv_61909: 
#line 1062 
  ;
  
#line 1067 
  if (adapter->drv_info_dump != (void *)0) {
    
#line 1068 
    vfree((void const *)adapter->drv_info_dump);
    
#line 1069 
    adapter->drv_info_dump = (void *)0;
    
#line 1070 
    adapter->drv_info_size = 0U;
  }
  else ;
  
#line 1072 
  return;
}


#line 1073  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.c"
static char const __kstrtab_mwifiex_upload_device_dump[27U] = {(char)'m', (char)'w', (char)'i', (char)'f', (char)'i', (char)'e', (char)'x', (char)'_', (char)'u', (char)'p', (char)'l', (char)'o', (char)'a', (char)'d', (char)'_', (char)'d', (char)'e', (char)'v', (char)'i', (char)'c', (char)'e', (char)'_', (char)'d', (char)'u', (char)'m', (char)'p', (char)'\000'};

#line 1073 
struct kernel_symbol const __ksymtab_mwifiex_upload_device_dump;


#line 1073  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.c"
struct kernel_symbol const __ksymtab_mwifiex_upload_device_dump = {.value = (unsigned long)(& mwifiex_upload_device_dump), .name = (char const *)(& __kstrtab_mwifiex_upload_device_dump)};

#line 1078  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.c"
static struct net_device_stats *mwifiex_get_stats(struct net_device *dev)
{
  struct net_device_stats *__retres;
  
#line 1080 
  struct mwifiex_private *priv = mwifiex_netdev_get_priv(dev);
  
#line 1082 
  __retres = & priv->stats;
  
#line 1082 
  return __retres;
}


#line 1086  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.c"
static u16 mwifiex_netdev_select_wmm_queue(struct net_device *dev, struct sk_buff *skb, void *accel_priv, u16 (*fallback)(struct net_device *, struct sk_buff *))
{
  u16 __retres;
  
#line 1089 
  skb->priority = cfg80211_classify8021d(skb,(struct cfg80211_qos_map *)0);
  
#line 1090 
  __retres = mwifiex_1d_to_wmm_queue[skb->priority];
  
#line 1090 
  return __retres;
}


#line 1094  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.c"
static struct net_device_ops const mwifiex_netdev_ops = {.ndo_init = (int (*)(struct net_device *))0, .ndo_uninit = (void (*)(struct net_device *))0, .ndo_open = & mwifiex_open, .ndo_stop = & mwifiex_close, .ndo_start_xmit = (netdev_tx_t (*)(struct sk_buff *, struct net_device *))(& mwifiex_hard_start_xmit), .ndo_select_queue = & mwifiex_netdev_select_wmm_queue, .ndo_change_rx_flags = (void (*)(struct net_device *, int ))0, .ndo_set_rx_mode = & mwifiex_set_multicast_list, .ndo_set_mac_address = & mwifiex_set_mac_address, .ndo_validate_addr = (int (*)(struct net_device *))0, .ndo_do_ioctl = (int (*)(struct net_device *, struct ifreq *, int ))0, .ndo_set_config = (int (*)(struct net_device *, struct ifmap *))0, .ndo_change_mtu = (int (*)(struct net_device *, int ))0, .ndo_neigh_setup = (int (*)(struct net_device *, struct neigh_parms *))0, .ndo_tx_timeout = & mwifiex_tx_timeout, .ndo_get_stats64 = (struct rtnl_link_stats64 *(*)(struct net_device *, struct rtnl_link_stats64 *))0, .ndo_get_stats = & mwifiex_get_stats, .ndo_vlan_rx_add_vid = (int (*)(struct net_device *, __be16 , u16 ))0, .ndo_vlan_rx_kill_vid = (int (*)(struct net_device *, __be16 , u16 ))0, .ndo_poll_controller = (void (*)(struct net_device *))0, .ndo_netpoll_setup = (int (*)(struct net_device *, struct netpoll_info *))0, .ndo_netpoll_cleanup = (void (*)(struct net_device *))0, .ndo_busy_poll = (int (*)(struct napi_struct *))0, .ndo_set_vf_mac = (int (*)(struct net_device *, int , u8 *))0, .ndo_set_vf_vlan = (int (*)(struct net_device *, int , u16 , u8 ))0, .ndo_set_vf_rate = (int (*)(struct net_device *, int , int , int ))0, .ndo_set_vf_spoofchk = (int (*)(struct net_device *, int , bool ))0, .ndo_get_vf_config = (int (*)(struct net_device *, int , struct ifla_vf_info *))0, .ndo_set_vf_link_state = (int (*)(struct net_device *, int , int ))0, .ndo_get_vf_stats = (int (*)(struct net_device *, int , struct ifla_vf_stats *))0, .ndo_set_vf_port = (int (*)(struct net_device *, int , struct nlattr **))0, .ndo_get_vf_port = (int (*)(struct net_device *, int , struct sk_buff *))0, .ndo_set_vf_rss_query_en = (int (*)(struct net_device *, int , bool ))0, .ndo_setup_tc = (int (*)(struct net_device *, u8 ))0, .ndo_fcoe_enable = (int (*)(struct net_device *))0, .ndo_fcoe_disable = (int (*)(struct net_device *))0, .ndo_fcoe_ddp_setup = (int (*)(struct net_device *, u16 , struct scatterlist *, unsigned int ))0, .ndo_fcoe_ddp_done = (int (*)(struct net_device *, u16 ))0, .ndo_fcoe_ddp_target = (int (*)(struct net_device *, u16 , struct scatterlist *, unsigned int ))0, .ndo_fcoe_get_hbainfo = (int (*)(struct net_device *, struct netdev_fcoe_hbainfo *))0, .ndo_fcoe_get_wwn = (int (*)(struct net_device *, u64 *, int ))0, .ndo_rx_flow_steer = (int (*)(struct net_device *, struct sk_buff const *, u16 , u32 ))0, .ndo_add_slave = (int (*)(struct net_device *, struct net_device *))0, .ndo_del_slave = (int (*)(struct net_device *, struct net_device *))0, .ndo_fix_features = (netdev_features_t (*)(struct net_device *, netdev_features_t ))0, .ndo_set_features = (int (*)(struct net_device *, netdev_features_t ))0, .ndo_neigh_construct = (int (*)(struct neighbour *))0, .ndo_neigh_destroy = (void (*)(struct neighbour *))0, .ndo_fdb_add = (int (*)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char const *, u16 , u16 ))0, .ndo_fdb_del = (int (*)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char const *, u16 ))0, .ndo_fdb_dump = (int (*)(struct sk_buff *, struct netlink_callback *, struct net_device *, struct net_device *, int ))0, .ndo_bridge_setlink = (int (*)(struct net_device *, struct nlmsghdr *, u16 ))0, .ndo_bridge_getlink = (int (*)(struct sk_buff *, u32 , u32 , struct net_device *, u32 , int ))0, .ndo_bridge_dellink = (int (*)(struct net_device *, struct nlmsghdr *, u16 ))0, .ndo_change_carrier = (int (*)(struct net_device *, bool ))0, .ndo_get_phys_port_id = (int (*)(struct net_device *, struct netdev_phys_item_id *))0, .ndo_get_phys_port_name = (int (*)(struct net_device *, char *, size_t ))0, .ndo_add_vxlan_port = (void (*)(struct net_device *, sa_family_t , __be16 ))0, .ndo_del_vxlan_port = (void (*)(struct net_device *, sa_family_t , __be16 ))0, .ndo_dfwd_add_station = (void *(*)(struct net_device *, struct net_device *))0, .ndo_dfwd_del_station = (void (*)(struct net_device *, void *))0, .ndo_dfwd_start_xmit = (netdev_tx_t (*)(struct sk_buff *, struct net_device *, void *))0, .ndo_get_lock_subclass = (int (*)(struct net_device *))0, .ndo_features_check = (netdev_features_t (*)(struct sk_buff *, struct net_device *, netdev_features_t ))0, .ndo_set_tx_maxrate = (int (*)(struct net_device *, int , u32 ))0, .ndo_get_iflink = (int (*)(struct net_device const *))0};

#line 1125  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.c"
void mwifiex_init_priv_params(struct mwifiex_private *priv, struct net_device *dev)
{
  
#line 1128 
  dev->netdev_ops = & mwifiex_netdev_ops;
  
#line 1129 
  dev->destructor = & free_netdev;
  
#line 1131 
  priv->current_key_index = (unsigned short)0U;
  
#line 1132 
  priv->media_connected = (unsigned char)0U;
  
#line 1133 
  memset((void *)(& priv->mgmt_ie),0,4192UL);
  
#line 1135 
  priv->beacon_idx = (unsigned short)65535U;
  
#line 1136 
  priv->proberesp_idx = (unsigned short)65535U;
  
#line 1137 
  priv->assocresp_idx = (unsigned short)65535U;
  
#line 1138 
  priv->gen_idx = (unsigned short)65535U;
  
#line 1139 
  priv->num_tx_timeout = 0U;
  
#line 1140 
  ether_addr_copy((u8 *)(& priv->curr_addr),(u8 const *)(& (priv->adapter)->perm_addr));
  
#line 1141 
  memcpy((void *)dev->dev_addr,(void const *)(& priv->curr_addr),6UL);
  
#line 1145 
  priv->hist_data = (struct mwifiex_histogram_data *)kmalloc(3372UL,208U);
  
#line 1146 
  if (priv->hist_data != (struct mwifiex_histogram_data *)0) 
#line 1147 
                                                             mwifiex_hist_data_reset(priv); else ;
  
#line 1149 
  return;
}


#line 1154  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.c"
int is_command_pending(struct mwifiex_adapter *adapter)
{
  int __retres;
  unsigned long flags;
  int is_cmd_pend_q_empty;
  
#line 1159 
  ldv___ldv_spin_lock_102_0(& adapter->cmd_pending_q_lock);
  
#line 1160 
  is_cmd_pend_q_empty = list_empty((struct list_head const *)(& adapter->cmd_pending_q));
  
#line 1161 
  ldv_spin_unlock_irqrestore_103_0(& adapter->cmd_pending_q_lock,flags);
  
#line 1163 
  __retres = is_cmd_pend_q_empty == 0;
  
#line 1163 
  return __retres;
}


#line 1171  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.c"
static void mwifiex_rx_work_queue(struct work_struct *work)
{
  struct mwifiex_adapter *tmp;
  {
    
#line 1174 
    struct work_struct const *__mptr = (struct work_struct const *)work;
    
#line 1174 
    tmp = (struct mwifiex_adapter *)__mptr + 18446744073709551080U;
  }
  
#line 1173 
  struct mwifiex_adapter *adapter = tmp;
  
#line 1176 
  if ((int)adapter->surprise_removed != 0) 
#line 1177 
                                           goto return_label; else ;
  
#line 1178 
  mwifiex_process_rx(adapter);
  return_label: 
#line 1179 
                return;
}


#line 1187  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.c"
static void mwifiex_main_work_queue(struct work_struct *work)
{
  struct mwifiex_adapter *tmp;
  {
    
#line 1190 
    struct work_struct const *__mptr = (struct work_struct const *)work;
    
#line 1190 
    tmp = (struct mwifiex_adapter *)__mptr + 18446744073709551168U;
  }
  
#line 1189 
  struct mwifiex_adapter *adapter = tmp;
  
#line 1192 
  if ((int)adapter->surprise_removed != 0) 
#line 1193 
                                           goto return_label; else ;
  
#line 1194 
  mwifiex_main_process(adapter);
  return_label: 
#line 1195 
                return;
}


#line 1211  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.c"
int mwifiex_add_card(void *card, struct semaphore *sem, struct mwifiex_if_ops *if_ops, u8 iface_type)
{
  int __retres;
  struct mwifiex_adapter *adapter;
  int tmp;
  int tmp_0;
  unsigned int tmp_2;
  struct workqueue_struct *tmp_4;
  int tmp_7;
  int tmp_8;
  
#line 1216 
  tmp = down_interruptible(sem);
  
#line 1216 
  if (tmp != 0) 
#line 1217 
                goto exit_sem_err; else ;
  
#line 1219 
  tmp_0 = mwifiex_register(card,if_ops,(void **)(& adapter));
  
#line 1219 
  if (tmp_0 != 0) {
    
#line 1220 
    printk("\001","mwifiex_add_card");
    
#line 1221 
    goto err_init_sw;
  }
  else ;
  
#line 1224 
  adapter->iface_type = iface_type;
  
#line 1225 
  adapter->card_sem = sem;
  
#line 1227 
  adapter->hw_status = MWIFIEX_HW_STATUS_INITIALIZING;
  
#line 1228 
  adapter->surprise_removed = (_Bool)0;
  {
    struct lock_class_key __key;
    
#line 1229 
    __init_waitqueue_head(& adapter->init_wait_q,"&adapter->init_wait_q",& __key);
  }
  
#line 1230 
  adapter->is_suspended = (_Bool)0;
  
#line 1231 
  adapter->hs_activated = (unsigned char)0U;
  {
    struct lock_class_key __key_0;
    
#line 1232 
    __init_waitqueue_head(& adapter->hs_activate_wait_q,"&adapter->hs_activate_wait_q",& __key_0);
  }
  {
    struct lock_class_key __key_1;
    
#line 1233 
    __init_waitqueue_head(& adapter->cmd_wait_q.wait,"&adapter->cmd_wait_q.wait",& __key_1);
  }
  
#line 1234 
  adapter->cmd_wait_q.status = 0;
  
#line 1235 
  adapter->scan_wait_q_woken = (unsigned char)0U;
  
#line 1237 
  tmp_2 = cpumask_weight(cpu_possible_mask);
  
#line 1237 
  if (tmp_2 > 1U) 
#line 1237 
                  goto _LOR;
  else 
    
#line 1237 
    if ((unsigned int)adapter->iface_type == 2U) {
      _LOR: {
              unsigned int tmp_1;
              
#line 1238 
              adapter->rx_work_enabled = (_Bool)1;
              
#line 1239 
              tmp_1 = cpumask_weight(cpu_possible_mask);
              
#line 1239 
              printk("\001",tmp_1);
            }
    }
    else ;
  {
    struct lock_class_key __key_2;
    char const *__lock_name;
    
#line 1243 
    __lock_name = "\"MWIFIEX_WORK_QUEUE\"";
    
#line 1243 
    tmp_4 = __alloc_workqueue_key("MWIFIEX_WORK_QUEUE",26U,1,& __key_2,__lock_name);
  }
  
#line 1242 
  adapter->workqueue = tmp_4;
  
#line 1245 
  if (adapter->workqueue == (struct workqueue_struct *)0) 
#line 1246 
                                                          goto err_kmalloc; else ;
  {
    struct lock_class_key __key_3;
    
#line 1248 
    __init_work(& adapter->main_work,0);
    
#line 1248 
    atomic_long_t __constr_expr_37 = {.counter = WORK_STRUCT_NO_POOL};
    
#line 1248 
    adapter->main_work.data = __constr_expr_37;
    
#line 1248 
    lockdep_init_map(& adapter->main_work.lockdep_map,"(&adapter->main_work)",& __key_3,0);
    
#line 1248 
    INIT_LIST_HEAD(& adapter->main_work.entry);
    
#line 1248 
    adapter->main_work.func = & mwifiex_main_work_queue;
  }
  
#line 1250 
  if ((int)adapter->rx_work_enabled != 0) {
    struct workqueue_struct *tmp_6;
    {
      struct lock_class_key __key_4;
      char const *__lock_name_0;
      
#line 1251 
      __lock_name_0 = "\"MWIFIEX_RX_WORK_QUEUE\"";
      
#line 1251 
      tmp_6 = __alloc_workqueue_key("MWIFIEX_RX_WORK_QUEUE",26U,1,& __key_4,__lock_name_0);
    }
    
#line 1251 
    adapter->rx_workqueue = tmp_6;
    
#line 1255 
    if (adapter->rx_workqueue == (struct workqueue_struct *)0) 
#line 1256 
                                                               goto err_kmalloc; else ;
    {
      struct lock_class_key __key_5;
      
#line 1258 
      __init_work(& adapter->rx_work,0);
      
#line 1258 
      atomic_long_t __constr_expr_38 = {.counter = WORK_STRUCT_NO_POOL};
      
#line 1258 
      adapter->rx_work.data = __constr_expr_38;
      
#line 1258 
      lockdep_init_map(& adapter->rx_work.lockdep_map,"(&adapter->rx_work)",& __key_5,0);
      
#line 1258 
      INIT_LIST_HEAD(& adapter->rx_work.entry);
      
#line 1258 
      adapter->rx_work.func = & mwifiex_rx_work_queue;
    }
  }
  else ;
  
#line 1263 
  tmp_7 = (*(adapter->if_ops.register_dev))(adapter);
  
#line 1263 
  if (tmp_7 != 0) {
    
#line 1264 
    printk("\001","mwifiex_add_card");
    
#line 1265 
    goto err_registerdev;
  }
  else ;
  
#line 1268 
  tmp_8 = mwifiex_init_hw_fw(adapter);
  
#line 1268 
  if (tmp_8 != 0) {
    
#line 1269 
    printk("\001","mwifiex_add_card");
    
#line 1270 
    goto err_init_fw;
  }
  else ;
  
#line 1273 
  __retres = 0;
  
#line 1273 
  goto return_label;
  err_init_fw: 
#line 1275 
  ;
  {
    
#line 1276 
    struct _ddebug descriptor = {.modname = "mwifiex", .function = "mwifiex_add_card", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.c", .format = "info: %s: unregister device\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1276U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 1276 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 1276 
                                                        __dynamic_pr_debug(& descriptor,"mwifiex","mwifiex_add_card"); else ;
  }
  
#line 1277 
  if (adapter->if_ops.unregister_dev != (void (*)(struct mwifiex_adapter *))0) 
    
#line 1278 
    (*(adapter->if_ops.unregister_dev))(adapter); else ;
  
#line 1279 
  if (adapter->hw_status == (unsigned int)MWIFIEX_HW_STATUS_READY) {
    int tmp_11_0;
    {
      
#line 1280 
      struct _ddebug descriptor_0 = {.modname = "mwifiex", .function = "mwifiex_add_card", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.c", .format = "info: %s: shutdown mwifiex\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1280U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1280 
      if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 1280 
                                                            __dynamic_pr_debug(& descriptor_0,"mwifiex","mwifiex_add_card"); else ;
    }
    
#line 1281 
    adapter->init_wait_q_woken = (unsigned short)0U;
    
#line 1283 
    tmp_11_0 = mwifiex_shutdown_drv(adapter);
    
#line 1283 
    if (tmp_11_0 == -115) {
      
#line 1284 
      int __ret = 0;
      
#line 1284 
      __might_sleep("/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.c",1285,0);
      
#line 1284 
      if ((unsigned int)adapter->init_wait_q_woken == 0U) {
        long tmp_10;
        {
          wait_queue_t __wait;
          
#line 1284 
          long __ret_0 = 0L;
          
#line 1284 
          INIT_LIST_HEAD(& __wait.task_list);
          
#line 1284 
          __wait.flags = 0U;
          ldv_61983: 
#line 1287 
          ;
          {
            
#line 1284 
            long __int = prepare_to_wait_event(& adapter->init_wait_q,& __wait,1);
            
#line 1284 
            if ((unsigned int)adapter->init_wait_q_woken != 0U) 
#line 1284 
                                                                goto ldv_61982; else ;
            
#line 1284 
            if (__int != 0L) {
              
#line 1284 
              __ret_0 = __int;
              
#line 1284 
              goto ldv_61982;
            }
            else ;
            
#line 1284 
            schedule();
          }
          
#line 1284 
          goto ldv_61983;
          ldv_61982: 
#line 1285 
          ;
          
#line 1284 
          finish_wait(& adapter->init_wait_q,& __wait);
          __out_0: 
#line 1284 
          ;
          
#line 1284 
          tmp_10 = __ret_0;
        }
        
#line 1284 
        __ret = (int)tmp_10;
      }
      else ;
      
#line 1284 
      int tmp_11 = __ret;
    }
    else ;
  }
  else ;
  err_registerdev: 
#line 1287 
  ;
  
#line 1288 
  adapter->surprise_removed = (_Bool)1;
  
#line 1289 
  mwifiex_terminate_workqueue(adapter);
  err_kmalloc: 
#line 1290 
  ;
  
#line 1291 
  mwifiex_free_adapter(adapter);
  err_init_sw: 
#line 1293 
  ;
  
#line 1294 
  up(sem);
  exit_sem_err: 
#line 1296 
  ;
  
#line 1297 
  __retres = -1;
  return_label: 
#line 1297 
                return __retres;
}


#line 1299  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.c"
static char const __kstrtab_mwifiex_add_card[17U] = {(char)'m', (char)'w', (char)'i', (char)'f', (char)'i', (char)'e', (char)'x', (char)'_', (char)'a', (char)'d', (char)'d', (char)'_', (char)'c', (char)'a', (char)'r', (char)'d', (char)'\000'};

#line 1299 
struct kernel_symbol const __ksymtab_mwifiex_add_card;


#line 1299  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.c"
struct kernel_symbol const __ksymtab_mwifiex_add_card = {.value = (unsigned long)(& mwifiex_add_card), .name = (char const *)(& __kstrtab_mwifiex_add_card)};

#line 1312  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.c"
int mwifiex_remove_card(struct mwifiex_adapter *adapter, struct semaphore *sem)
{
  int __retres;
  int i;
  int tmp;
  int tmp_3_0;
  int tmp_7;
  
#line 1314 
  struct mwifiex_private *priv = (struct mwifiex_private *)0;
  
#line 1317 
  tmp = down_interruptible(sem);
  
#line 1317 
  if (tmp != 0) 
#line 1318 
                goto exit_sem_err; else ;
  
#line 1320 
  if (adapter == (struct mwifiex_adapter *)0) 
#line 1321 
                                              goto exit_remove; else ;
  
#line 1325 
  if (adapter->if_ops.disable_int != (void (*)(struct mwifiex_adapter *))0) 
    
#line 1326 
    (*(adapter->if_ops.disable_int))(adapter); else ;
  
#line 1328 
  adapter->surprise_removed = (_Bool)1;
  
#line 1330 
  mwifiex_terminate_workqueue(adapter);
  
#line 1333 
  i = 0;
  
#line 1333 
  goto ldv_62005;
  ldv_62004: 
#line 1334 
  ;
  
#line 1334 
  priv = adapter->priv[i];
  
#line 1335 
  if (priv != (struct mwifiex_private *)0 && priv->netdev != (struct net_device *)0) {
    bool tmp_0;
    
#line 1336 
    mwifiex_stop_net_dev_queue(priv->netdev,adapter);
    
#line 1337 
    tmp_0 = netif_carrier_ok((struct net_device const *)priv->netdev);
    
#line 1337 
    if ((int)tmp_0 != 0) 
#line 1338 
                         netif_carrier_off(priv->netdev); else ;
  }
  else ;
  
#line 1333 
  i += 1;
  ldv_62005: 
#line 1334 
  ;
  
#line 1333 
  if ((int)adapter->priv_num > i) 
#line 1335 
                                  goto ldv_62004; else 
#line 1338 
                                                       goto ldv_62006;
  ldv_62006: 
#line 1339 
  ;
  
#line 1342 
  if ((adapter->debug_mask & 16U) != 0U) {
    
#line 1342 
    if (adapter->dev != (struct device *)0) 
#line 1342 
                                            _dev_info((struct device const *)adapter->dev,"cmd: calling mwifiex_shutdown_drv...\n"); else ;
  }
  else ;
  
#line 1344 
  adapter->init_wait_q_woken = (unsigned short)0U;
  
#line 1346 
  tmp_3_0 = mwifiex_shutdown_drv(adapter);
  
#line 1346 
  if (tmp_3_0 == -115) {
    
#line 1347 
    int __ret = 0;
    
#line 1347 
    __might_sleep("/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.c",1348,0);
    
#line 1347 
    if ((unsigned int)adapter->init_wait_q_woken == 0U) {
      long tmp_2;
      {
        wait_queue_t __wait;
        
#line 1347 
        long __ret_0 = 0L;
        
#line 1347 
        INIT_LIST_HEAD(& __wait.task_list);
        
#line 1347 
        __wait.flags = 0U;
        ldv_62013: 
#line 1350 
        ;
        {
          
#line 1347 
          long __int = prepare_to_wait_event(& adapter->init_wait_q,& __wait,1);
          
#line 1347 
          if ((unsigned int)adapter->init_wait_q_woken != 0U) 
#line 1347 
                                                              goto ldv_62012; else ;
          
#line 1347 
          if (__int != 0L) {
            
#line 1347 
            __ret_0 = __int;
            
#line 1347 
            goto ldv_62012;
          }
          else ;
          
#line 1347 
          schedule();
        }
        
#line 1347 
        goto ldv_62013;
        ldv_62012: 
#line 1348 
        ;
        
#line 1347 
        finish_wait(& adapter->init_wait_q,& __wait);
        __out_0: 
#line 1347 
        ;
        
#line 1347 
        tmp_2 = __ret_0;
      }
      
#line 1347 
      __ret = (int)tmp_2;
    }
    else ;
    
#line 1347 
    int tmp_3 = __ret;
  }
  else ;
  
#line 1349 
  if ((adapter->debug_mask & 16U) != 0U) {
    
#line 1349 
    if (adapter->dev != (struct device *)0) 
#line 1349 
                                            _dev_info((struct device const *)adapter->dev,"cmd: mwifiex_shutdown_drv done\n"); else ;
  }
  else ;
  
#line 1351 
  tmp_7 = atomic_read((atomic_t const *)(& adapter->rx_pending));
  
#line 1351 
  if (tmp_7 != 0) 
#line 1351 
                  goto _LOR;
  else {
    int tmp_8;
    
#line 1351 
    tmp_8 = atomic_read((atomic_t const *)(& adapter->tx_pending));
    
#line 1351 
    if (tmp_8 != 0) 
#line 1351 
                    goto _LOR;
    else {
      int tmp_9;
      
#line 1352 
      tmp_9 = atomic_read((atomic_t const *)(& adapter->cmd_pending));
      
#line 1352 
      if (tmp_9 != 0) {
        _LOR: 
#line 1354 
        ;
        
#line 1354 
        if ((adapter->debug_mask & 4U) != 0U) {
          
#line 1354 
          if (adapter->dev != (struct device *)0) {
            int tmp_4;
            int tmp_5;
            int tmp_6;
            
#line 1354 
            tmp_4 = atomic_read((atomic_t const *)(& adapter->cmd_pending));
            
#line 1354 
            tmp_5 = atomic_read((atomic_t const *)(& adapter->tx_pending));
            
#line 1354 
            tmp_6 = atomic_read((atomic_t const *)(& adapter->rx_pending));
            
#line 1354 
            ;
            
#line 1354 
            _dev_info((struct device const *)adapter->dev,"rx_pending=%d, tx_pending=%d,\t",tmp_6,tmp_5,tmp_4);
          }
          else ;
        }
        else ;
      }
      else ;
    }
  }
  
#line 1362 
  i = 0;
  
#line 1362 
  goto ldv_62018;
  ldv_62017: 
#line 1363 
  ;
  
#line 1363 
  priv = adapter->priv[i];
  
#line 1365 
  if (priv == (struct mwifiex_private *)0) 
#line 1366 
                                           goto ldv_62016; else ;
  
#line 1368 
  rtnl_lock();
  
#line 1369 
  if (priv->netdev != (struct net_device *)0 && priv->wdev.iftype != (unsigned int)NL80211_IFTYPE_UNSPECIFIED) 
    
#line 1371 
    mwifiex_del_virtual_intf(adapter->wiphy,& priv->wdev); else ;
  
#line 1372 
  rtnl_unlock();
  ldv_62016: 
#line 1373 
  ;
  
#line 1362 
  i += 1;
  ldv_62018: 
#line 1363 
  ;
  
#line 1362 
  if ((int)adapter->priv_num > i) 
#line 1364 
                                  goto ldv_62017; else 
#line 1367 
                                                       goto ldv_62019;
  ldv_62019: 
#line 1368 
  ;
  
#line 1375 
  wiphy_unregister(adapter->wiphy);
  
#line 1376 
  wiphy_free(adapter->wiphy);
  
#line 1379 
  if ((adapter->debug_mask & 1073741824U) != 0U) {
    
#line 1379 
    if (adapter->dev != (struct device *)0) 
#line 1379 
                                            _dev_info((struct device const *)adapter->dev,"info: unregister device\n"); else ;
  }
  else ;
  
#line 1381 
  if (adapter->if_ops.unregister_dev != (void (*)(struct mwifiex_adapter *))0) 
    
#line 1382 
    (*(adapter->if_ops.unregister_dev))(adapter); else ;
  
#line 1384 
  if ((adapter->debug_mask & 1073741824U) != 0U) {
    
#line 1384 
    if (adapter->dev != (struct device *)0) 
#line 1384 
                                            _dev_info((struct device const *)adapter->dev,"info: free adapter\n"); else ;
  }
  else ;
  
#line 1386 
  mwifiex_free_adapter(adapter);
  exit_remove: 
#line 1388 
  ;
  
#line 1389 
  up(sem);
  exit_sem_err: 
#line 1390 
  ;
  
#line 1391 
  __retres = 0;
  
#line 1391 
  return __retres;
}


#line 1393  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.c"
static char const __kstrtab_mwifiex_remove_card[20U] = {(char)'m', (char)'w', (char)'i', (char)'f', (char)'i', (char)'e', (char)'x', (char)'_', (char)'r', (char)'e', (char)'m', (char)'o', (char)'v', (char)'e', (char)'_', (char)'c', (char)'a', (char)'r', (char)'d', (char)'\000'};

#line 1393 
struct kernel_symbol const __ksymtab_mwifiex_remove_card;


#line 1393  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.c"
struct kernel_symbol const __ksymtab_mwifiex_remove_card = {.value = (unsigned long)(& mwifiex_remove_card), .name = (char const *)(& __kstrtab_mwifiex_remove_card)};

#line 1401  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.c"
static int mwifiex_init_module(void)
{
  int __retres;
  
#line 1404 
  mwifiex_debugfs_init();
  
#line 1406 
  __retres = 0;
  
#line 1406 
  return __retres;
}


#line 1415  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.c"
static void mwifiex_cleanup_module(void)
{
  
#line 1418 
  mwifiex_debugfs_remove();
  
#line 1419 
  return;
}


#line 57  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_main.c.aux"
int ldv_emg_del_timer(struct timer_list *arg0);


#line 68  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_main.c.aux"
int ldv_emg_mwifiex_init_module(void)
{
  int tmp;
  
#line 69 
  tmp = mwifiex_init_module();
  
#line 69 
  return tmp;
}


#line 72  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_main.c.aux"
void ldv_emg_mwifiex_cleanup_module(void)
{
  
#line 73 
  mwifiex_cleanup_module();
  
#line 74 
  return;
}


#line 91  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_main.c.aux"
static bool IS_ERR(void const *ptr)
{
  bool __retres;
  long ret;
  
#line 95 
  ret = ldv_is_err(ptr);
  
#line 96 
  __retres = (_Bool)(ret != 0L);
  
#line 96 
  return __retres;
}


#line 130  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_main.c.aux"
static void atomic_inc_0(atomic_t *v)
{
  
#line 133 
  ldv_atomic_inc(v);
  
#line 134 
  return;
}


#line 137  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_main.c.aux"
static void atomic_dec_0(atomic_t *v)
{
  
#line 140 
  ldv_atomic_dec(v);
  
#line 141 
  return;
}


#line 165  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_main.c.aux"
static int atomic_add_return(int i, atomic_t *v)
{
  int tmp;
  
#line 168 
  tmp = ldv_atomic_add_return(i,v);
  
#line 168 
  return tmp;
}


#line 461  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_main.c.aux"
static void *kmalloc(size_t size, gfp_t flags)
{
  void *tmp;
  
#line 464 
  tmp = ldv_kmalloc(size,flags);
  
#line 464 
  return tmp;
}


#line 482  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_main.c.aux"
static void *kzalloc(size_t size, gfp_t flags)
{
  void *tmp;
  
#line 485 
  tmp = ldv_kzalloc(size,flags);
  
#line 485 
  return tmp;
}


#line 801  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_main.c.aux"
static int ldv_del_timer_sync_78(struct timer_list *ldv_func_arg1)
{
  int tmp;
  
#line 805 
  tmp = ldv_emg_del_timer_sync(ldv_func_arg1);
  
#line 805 
  return tmp;
}


#line 809  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_main.c.aux"
static void ldv___ldv_spin_lock_79(spinlock_t *ldv_func_arg1)
{
  
#line 813 
  ldv_spin_model_lock((char *)"main_proc_lock_of_mwifiex_adapter");
  
#line 815 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 816 
  return;
}


#line 819  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_main.c.aux"
static void ldv_spin_unlock_irqrestore_80_0(spinlock_t *lock, unsigned long flags)
{
  
#line 823 
  ldv_spin_model_unlock((char *)"main_proc_lock_of_mwifiex_adapter");
  
#line 825 
  spin_unlock_irqrestore_0(lock,flags);
  
#line 826 
  return;
}


#line 829  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_main.c.aux"
static void ldv_spin_unlock_irqrestore_81(spinlock_t *lock, unsigned long flags)
{
  
#line 833 
  ldv_spin_model_unlock((char *)"main_proc_lock_of_mwifiex_adapter");
  
#line 835 
  spin_unlock_irqrestore_0(lock,flags);
  
#line 836 
  return;
}


#line 839  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_main.c.aux"
static bool ldv_queue_work_82(struct workqueue_struct *wq, struct work_struct *work)
{
  bool __retres;
  bool tmp;
  
#line 843 
  tmp = ldv_emg_queue_work(wq,work);
  
#line 843 
  __retres = tmp != 0;
  
#line 843 
  return __retres;
}


#line 847  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_main.c.aux"
static void ldv___ldv_spin_lock_83(spinlock_t *ldv_func_arg1)
{
  
#line 851 
  ldv_spin_model_lock((char *)"rx_proc_lock_of_mwifiex_adapter");
  
#line 853 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 854 
  return;
}


#line 857  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_main.c.aux"
static void ldv_spin_unlock_irqrestore_84(spinlock_t *lock, unsigned long flags)
{
  
#line 861 
  ldv_spin_model_unlock((char *)"rx_proc_lock_of_mwifiex_adapter");
  
#line 863 
  spin_unlock_irqrestore_0(lock,flags);
  
#line 864 
  return;
}


#line 867  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_main.c.aux"
static void ldv_spin_unlock_irqrestore_85_0(spinlock_t *lock, unsigned long flags)
{
  
#line 871 
  ldv_spin_model_unlock((char *)"rx_proc_lock_of_mwifiex_adapter");
  
#line 873 
  spin_unlock_irqrestore_0(lock,flags);
  
#line 874 
  return;
}


#line 877  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_main.c.aux"
static bool ldv_queue_work_86(struct workqueue_struct *wq, struct work_struct *work)
{
  bool __retres;
  bool tmp;
  
#line 881 
  tmp = ldv_emg_queue_work(wq,work);
  
#line 881 
  __retres = tmp != 0;
  
#line 881 
  return __retres;
}


#line 885  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_main.c.aux"
static void ldv___ldv_spin_lock_87(spinlock_t *ldv_func_arg1)
{
  
#line 889 
  ldv_spin_model_lock((char *)"rx_proc_lock_of_mwifiex_adapter");
  
#line 891 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 892 
  return;
}


#line 895  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_main.c.aux"
static void ldv_spin_unlock_irqrestore_88(spinlock_t *lock, unsigned long flags)
{
  
#line 899 
  ldv_spin_model_unlock((char *)"rx_proc_lock_of_mwifiex_adapter");
  
#line 901 
  spin_unlock_irqrestore_0(lock,flags);
  
#line 902 
  return;
}


#line 905  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_main.c.aux"
static void ldv_spin_unlock_irqrestore_89_0(spinlock_t *lock, unsigned long flags)
{
  
#line 909 
  ldv_spin_model_unlock((char *)"rx_proc_lock_of_mwifiex_adapter");
  
#line 911 
  spin_unlock_irqrestore_0(lock,flags);
  
#line 912 
  return;
}


#line 915  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_main.c.aux"
static void ldv___ldv_spin_lock_90_0(spinlock_t *ldv_func_arg1)
{
  
#line 919 
  ldv_spin_model_lock((char *)"rx_proc_lock_of_mwifiex_adapter");
  
#line 921 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 922 
  return;
}


#line 925  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_main.c.aux"
static void ldv_spin_unlock_irqrestore_91_0(spinlock_t *lock, unsigned long flags)
{
  
#line 929 
  ldv_spin_model_unlock((char *)"rx_proc_lock_of_mwifiex_adapter");
  
#line 931 
  spin_unlock_irqrestore_0(lock,flags);
  
#line 932 
  return;
}


#line 935  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_main.c.aux"
static void ldv___ldv_spin_lock_92_0(spinlock_t *ldv_func_arg1)
{
  
#line 939 
  ldv_spin_model_lock((char *)"main_proc_lock_of_mwifiex_adapter");
  
#line 941 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 942 
  return;
}


#line 945  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_main.c.aux"
static void ldv_spin_unlock_irqrestore_93(spinlock_t *lock, unsigned long flags)
{
  
#line 949 
  ldv_spin_model_unlock((char *)"main_proc_lock_of_mwifiex_adapter");
  
#line 951 
  spin_unlock_irqrestore_0(lock,flags);
  
#line 952 
  return;
}


#line 955  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_main.c.aux"
static void ldv_spin_unlock_irqrestore_94_0(spinlock_t *lock, unsigned long flags)
{
  
#line 959 
  ldv_spin_model_unlock((char *)"main_proc_lock_of_mwifiex_adapter");
  
#line 961 
  spin_unlock_irqrestore_0(lock,flags);
  
#line 962 
  return;
}


#line 965  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_main.c.aux"
static int ldv_mod_timer_95(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2)
{
  int tmp;
  
#line 969 
  tmp = ldv_emg_mod_timer(ldv_func_arg1,ldv_func_arg2);
  
#line 969 
  return tmp;
}


#line 973  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_main.c.aux"
static int ldv_del_timer_96(struct timer_list *ldv_func_arg1)
{
  int tmp;
  
#line 977 
  tmp = ldv_emg_del_timer(ldv_func_arg1);
  
#line 977 
  return tmp;
}


#line 981  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_main.c.aux"
static void ldv___ldv_spin_lock_97(spinlock_t *ldv_func_arg1)
{
  
#line 985 
  ldv_spin_model_lock((char *)"main_proc_lock_of_mwifiex_adapter");
  
#line 987 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 988 
  return;
}


#line 991  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_main.c.aux"
static void ldv_spin_unlock_irqrestore_98(spinlock_t *lock, unsigned long flags)
{
  
#line 995 
  ldv_spin_model_unlock((char *)"main_proc_lock_of_mwifiex_adapter");
  
#line 997 
  spin_unlock_irqrestore_0(lock,flags);
  
#line 998 
  return;
}


#line 1001  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_main.c.aux"
static void ldv_spin_unlock_irqrestore_99_0(spinlock_t *lock, unsigned long flags)
{
  
#line 1005 
  ldv_spin_model_unlock((char *)"main_proc_lock_of_mwifiex_adapter");
  
#line 1007 
  spin_unlock_irqrestore_0(lock,flags);
  
#line 1008 
  return;
}


#line 1011  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_main.c.aux"
static void ldv___ldv_spin_lock_100(spinlock_t *ldv_func_arg1)
{
  
#line 1015 
  ldv_spin_model_lock((char *)"ack_status_lock_of_mwifiex_private");
  
#line 1017 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 1018 
  return;
}


#line 1021  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_main.c.aux"
static void ldv_spin_unlock_irqrestore_101(spinlock_t *lock, unsigned long flags)
{
  
#line 1025 
  ldv_spin_model_unlock((char *)"ack_status_lock_of_mwifiex_private");
  
#line 1027 
  spin_unlock_irqrestore_0(lock,flags);
  
#line 1028 
  return;
}


#line 1031  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_main.c.aux"
static void ldv___ldv_spin_lock_102_0(spinlock_t *ldv_func_arg1)
{
  
#line 1035 
  ldv_spin_model_lock((char *)"cmd_pending_q_lock_of_mwifiex_adapter");
  
#line 1037 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 1038 
  return;
}


#line 1041  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_main.c.aux"
static void ldv_spin_unlock_irqrestore_103_0(spinlock_t *lock, unsigned long flags)
{
  
#line 1045 
  ldv_spin_model_unlock((char *)"cmd_pending_q_lock_of_mwifiex_adapter");
  
#line 1047 
  spin_unlock_irqrestore_0(lock,flags);
  
#line 1048 
  return;
}


#line 87  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/percpu.h"
void __bad_percpu_size(void);


#line 63  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/string_64.h"
int memcmp(void const *, void const *, size_t);


#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/atomic.h"
__inline static void atomic_set(atomic_t *v, int i)
{
  
#line 39 
  v->counter = i;
  
#line 40 
  return;
}


#line 98 
static void atomic_inc_1(atomic_t *v);


#line 20  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/preempt.h"
__inline static int preempt_count(void)
{
  int __retres;
  int tmp;
  {
    int pfo_ret__;
    
#line 22 
    switch (4UL) {
      case (unsigned long)1: 
#line 22 
      ;
      
#line 23 
      ldv_inline_asm();
      
#line 22 
      goto ldv_6320;
      case (unsigned long)2: 
#line 22 
      ;
      
#line 23 
      ldv_inline_asm();
      
#line 22 
      goto ldv_6320;
      case (unsigned long)4: 
#line 22 
      ;
      
#line 23 
      ldv_inline_asm();
      
#line 22 
      goto ldv_6320;
      case (unsigned long)8: 
#line 22 
      ;
      
#line 23 
      ldv_inline_asm();
      
#line 22 
      goto ldv_6320;
      default: 
#line 22 
      ;
      
#line 22 
      __bad_percpu_size();
    }
    ldv_6320: 
#line 22 
    ;
    
#line 22 
    tmp = pfo_ret__;
  }
  
#line 22 
  __retres = tmp & 2147483647;
  
#line 22 
  return __retres;
}


#line 446  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_unlock_irqrestore_1(spinlock_t *lock, unsigned long flags)
{
  {
    unsigned long __dummy;
    unsigned long __dummy2;
    
  }
  
#line 448 
  _raw_spin_unlock_irqrestore(& lock->__anonCompField_spinlock_18.rlock,flags);
  
#line 449 
  return;
}


#line 482 
static void ldv_spin_unlock_irqrestore_79_0(spinlock_t *lock, unsigned long flags);


#line 486 
static void ldv_spin_unlock_irqrestore_81_0(spinlock_t *lock, unsigned long flags);


#line 490 
static void ldv_spin_unlock_irqrestore_83_0(spinlock_t *lock, unsigned long flags);


#line 74  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_util.c.aux"
static void ldv___ldv_spin_lock_78_0(spinlock_t *ldv_func_arg1);


#line 78 
static void ldv___ldv_spin_lock_80(spinlock_t *ldv_func_arg1);


#line 82 
static void ldv___ldv_spin_lock_82_0(spinlock_t *ldv_func_arg1);


#line 581  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/slab.h"
static void *kzalloc_0(size_t size, gfp_t flags);


#line 1789  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void skb_reserve(struct sk_buff *skb, int len)
{
  
#line 1791 
  skb->data += len;
  
#line 1792 
  skb->tail += (unsigned int)len;
  
#line 1793 
  return;
}


#line 2163  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static struct sk_buff *__dev_alloc_skb(unsigned int length, gfp_t gfp_mask)
{
  struct sk_buff *tmp;
  
#line 2166 
  tmp = __netdev_alloc_skb((struct net_device *)0,length,gfp_mask);
  
#line 2166 
  return tmp;
}


#line 335  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ieee80211.h"
__inline static int ieee80211_is_mgmt(__le16 fc)
{
  int __retres;
  
#line 337 
  __retres = ((int)fc & 12) == 0;
  
#line 337 
  return __retres;
}


#line 2941  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
int netif_rx(struct sk_buff *);


#line 2942 
int netif_rx_ni(struct sk_buff *);


#line 4683  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/cfg80211.h"
bool cfg80211_rx_mgmt(struct wireless_dev *, int, int, u8 const *, size_t, u32);


#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/etherdevice.h"
__be16 eth_type_trans(struct sk_buff *, struct net_device *);


#line 1005  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.h"
int mwifiex_shutdown_fw_complete(struct mwifiex_adapter *adapter);


#line 1009 
int mwifiex_recv_packet(struct mwifiex_private *priv, struct sk_buff *skb);


#line 1011 
int mwifiex_process_mgmt_packet(struct mwifiex_private *priv, struct sk_buff *skb);


#line 1333 
int mwifiex_init_shutdown_fw(struct mwifiex_private *priv, u32 func_init_shutdown);


#line 1452 
void mwifiex_del_all_sta_list(struct mwifiex_private *priv);


#line 1453 
void mwifiex_del_sta_entry(struct mwifiex_private *priv, u8 const *mac);


#line 1455 
void mwifiex_set_sta_ht_cap(struct mwifiex_private *priv, u8 const *ies, int ies_len, struct mwifiex_sta_node *node);


#line 1458 
struct mwifiex_sta_node *mwifiex_add_sta_entry(struct mwifiex_private *priv, u8 const *mac);


#line 1460 
struct mwifiex_sta_node *mwifiex_get_sta_entry(struct mwifiex_private *priv, u8 const *mac);


#line 1473 
int mwifiex_get_tdls_list(struct mwifiex_private *priv, struct tdls_peer_info *buf);


#line 1485 
void mwifiex_auto_tdls_update_peer_signal(struct mwifiex_private *priv, u8 *mac, s8 snr, s8 nflr);


#line 1511 
void mwifiex_hist_data_set(struct mwifiex_private *priv, u8 rx_rate, s8 snr, s8 nflr);


#line 1514 
void mwifiex_hist_data_add(struct mwifiex_private *priv, u8 rx_rate, s8 snr, s8 nflr);


#line 1521 
void *mwifiex_alloc_dma_align_buf(int rx_len, gfp_t flags);


#line 55  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11n.h"
int mwifiex_get_rx_reorder_tbl(struct mwifiex_private *priv, struct mwifiex_ds_rx_reorder_tbl *buf);


#line 57 
int mwifiex_get_tx_ba_stream_tbl(struct mwifiex_private *priv, struct mwifiex_ds_tx_ba_stream_tbl *buf);


#line 28  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/util.c"
static struct mwifiex_debug_data items[42U] = {{.name = {(char)'d', (char)'e', (char)'b', (char)'u', (char)'g', (char)'_', (char)'m', (char)'a', (char)'s', (char)'k', (char)'\000'}, .size = 4U, .addr = 0UL, .num = 1}, {.name = {(char)'i', (char)'n', (char)'t', (char)'_', (char)'c', (char)'o', (char)'u', (char)'n', (char)'t', (char)'e', (char)'r', (char)'\000'}, .size = 4U, .addr = 4UL, .num = 1}, {.name = {(char)'w', (char)'m', (char)'m', (char)'_', (char)'a', (char)'c', (char)'_', (char)'v', (char)'o', (char)'\000'}, .size = 4U, .addr = 20UL, .num = 1}, {.name = {(char)'w', (char)'m', (char)'m', (char)'_', (char)'a', (char)'c', (char)'_', (char)'v', (char)'i', (char)'\000'}, .size = 4U, .addr = 16UL, .num = 1}, {.name = {(char)'w', (char)'m', (char)'m', (char)'_', (char)'a', (char)'c', (char)'_', (char)'b', (char)'e', (char)'\000'}, .size = 4U, .addr = 12UL, .num = 1}, {.name = {(char)'w', (char)'m', (char)'m', (char)'_', (char)'a', (char)'c', (char)'_', (char)'b', (char)'k', (char)'\000'}, .size = 4U, .addr = 8UL, .num = 1}, {.name = {(char)'t', (char)'x', (char)'_', (char)'b', (char)'u', (char)'f', (char)'_', (char)'s', (char)'i', (char)'z', (char)'e', (char)'\000'}, .size = 4U, .addr = 40UL, .num = 1}, {.name = {(char)'c', (char)'u', (char)'r', (char)'r', (char)'_', (char)'t', (char)'x', (char)'_', (char)'b', (char)'u', (char)'f', (char)'_', (char)'s', (char)'i', (char)'z', (char)'e', (char)'\000'}, .size = 4U, .addr = 44UL, .num = 1}, {.name = {(char)'p', (char)'s', (char)'_', (char)'m', (char)'o', (char)'d', (char)'e', (char)'\000'}, .size = 2U, .addr = 4480UL, .num = 1}, {.name = {(char)'p', (char)'s', (char)'_', (char)'s', (char)'t', (char)'a', (char)'t', (char)'e', (char)'\000'}, .size = 4U, .addr = 4484UL, .num = 1}, {.name = {(char)'i', (char)'s', (char)'_', (char)'d', (char)'e', (char)'e', (char)'p', (char)'_', (char)'s', (char)'l', (char)'e', (char)'e', (char)'p', (char)'\000'}, .size = 1U, .addr = 4488UL, .num = 1}, {.name = {(char)'w', (char)'a', (char)'k', (char)'e', (char)'u', (char)'p', (char)'_', (char)'d', (char)'e', (char)'v', (char)'_', (char)'r', (char)'e', (char)'q', (char)'\000'}, .size = 1U, .addr = 4489UL, .num = 1}, {.name = {(char)'w', (char)'a', (char)'k', (char)'e', (char)'u', (char)'p', (char)'_', (char)'t', (char)'r', (char)'i', (char)'e', (char)'s', (char)'\000'}, .size = 4U, .addr = 4492UL, .num = 1}, {.name = {(char)'h', (char)'s', (char)'_', (char)'c', (char)'o', (char)'n', (char)'f', (char)'i', (char)'g', (char)'u', (char)'r', (char)'e', (char)'d', (char)'\000'}, .size = 1U, .addr = 4496UL, .num = 1}, {.name = {(char)'h', (char)'s', (char)'_', (char)'a', (char)'c', (char)'t', (char)'i', (char)'v', (char)'a', (char)'t', (char)'e', (char)'d', (char)'\000'}, .size = 1U, .addr = 4497UL, .num = 1}, {.name = {(char)'n', (char)'u', (char)'m', (char)'_', (char)'t', (char)'x', (char)'_', (char)'t', (char)'i', (char)'m', (char)'e', (char)'o', (char)'u', (char)'t', (char)'\000'}, .size = 4U, .addr = 4536UL, .num = 1}, {.name = {(char)'i', (char)'s', (char)'_', (char)'c', (char)'m', (char)'d', (char)'_', (char)'t', (char)'i', (char)'m', (char)'e', (char)'d', (char)'o', (char)'u', (char)'t', (char)'\000'}, .size = 1U, .addr = 4540UL, .num = 1}, {.name = {(char)'t', (char)'i', (char)'m', (char)'e', (char)'o', (char)'u', (char)'t', (char)'_', (char)'c', (char)'m', (char)'d', (char)'_', (char)'i', (char)'d', (char)'\000'}, .size = 2U, .addr = 4542UL, .num = 1}, {.name = {(char)'t', (char)'i', (char)'m', (char)'e', (char)'o', (char)'u', (char)'t', (char)'_', (char)'c', (char)'m', (char)'d', (char)'_', (char)'a', (char)'c', (char)'t', (char)'\000'}, .size = 2U, .addr = 4544UL, .num = 1}, {.name = {(char)'l', (char)'a', (char)'s', (char)'t', (char)'_', (char)'c', (char)'m', (char)'d', (char)'_', (char)'i', (char)'d', (char)'\000'}, .size = 10U, .addr = 4546UL, .num = 5}, {.name = {(char)'l', (char)'a', (char)'s', (char)'t', (char)'_', (char)'c', (char)'m', (char)'d', (char)'_', (char)'a', (char)'c', (char)'t', (char)'\000'}, .size = 10U, .addr = 4556UL, .num = 5}, {.name = {(char)'l', (char)'a', (char)'s', (char)'t', (char)'_', (char)'c', (char)'m', (char)'d', (char)'_', (char)'i', (char)'n', (char)'d', (char)'e', (char)'x', (char)'\000'}, .size = 2U, .addr = 4566UL, .num = 1}, {.name = {(char)'l', (char)'a', (char)'s', (char)'t', (char)'_', (char)'c', (char)'m', (char)'d', (char)'_', (char)'r', (char)'e', (char)'s', (char)'p', (char)'_', (char)'i', (char)'d', (char)'\000'}, .size = 10U, .addr = 4568UL, .num = 5}, {.name = {(char)'l', (char)'a', (char)'s', (char)'t', (char)'_', (char)'c', (char)'m', (char)'d', (char)'_', (char)'r', (char)'e', (char)'s', (char)'p', (char)'_', (char)'i', (char)'n', (char)'d', (char)'e', (char)'x', (char)'\000'}, .size = 2U, .addr = 4578UL, .num = 1}, {.name = {(char)'l', (char)'a', (char)'s', (char)'t', (char)'_', (char)'e', (char)'v', (char)'e', (char)'n', (char)'t', (char)'\000'}, .size = 10U, .addr = 4580UL, .num = 5}, {.name = {(char)'l', (char)'a', (char)'s', (char)'t', (char)'_', (char)'e', (char)'v', (char)'e', (char)'n', (char)'t', (char)'_', (char)'i', (char)'n', (char)'d', (char)'e', (char)'x', (char)'\000'}, .size = 2U, .addr = 4590UL, .num = 1}, {.name = {(char)'n', (char)'u', (char)'m', (char)'_', (char)'c', (char)'m', (char)'d', (char)'_', (char)'h', (char)'2', (char)'c', (char)'_', (char)'f', (char)'a', (char)'i', (char)'l', (char)'\000'}, .size = 4U, .addr = 4500UL, .num = 1}, {.name = {(char)'n', (char)'u', (char)'m', (char)'_', (char)'c', (char)'m', (char)'d', (char)'_', (char)'s', (char)'l', (char)'e', (char)'e', (char)'p', (char)'_', (char)'c', (char)'f', (char)'m', (char)'_', (char)'f', (char)'a', (char)'i', (char)'l', (char)'\000'}, .size = 4U, .addr = 4504UL, .num = 1}, {.name = {(char)'n', (char)'u', (char)'m', (char)'_', (char)'t', (char)'x', (char)'_', (char)'h', (char)'2', (char)'c', (char)'_', (char)'f', (char)'a', (char)'i', (char)'l', (char)'\000'}, .size = 4U, .addr = 4508UL, .num = 1}, {.name = {(char)'n', (char)'u', (char)'m', (char)'_', (char)'e', (char)'v', (char)'t', (char)'_', (char)'d', (char)'e', (char)'a', (char)'u', (char)'t', (char)'h', (char)'\000'}, .size = 4U, .addr = 4512UL, .num = 1}, {.name = {(char)'n', (char)'u', (char)'m', (char)'_', (char)'e', (char)'v', (char)'t', (char)'_', (char)'d', (char)'i', (char)'s', (char)'a', (char)'s', (char)'s', (char)'o', (char)'c', (char)'\000'}, .size = 4U, .addr = 4516UL, .num = 1}, {.name = {(char)'n', (char)'u', (char)'m', (char)'_', (char)'e', (char)'v', (char)'t', (char)'_', (char)'l', (char)'i', (char)'n', (char)'k', (char)'_', (char)'l', (char)'o', (char)'s', (char)'t', (char)'\000'}, .size = 4U, .addr = 4520UL, .num = 1}, {.name = {(char)'n', (char)'u', (char)'m', (char)'_', (char)'c', (char)'m', (char)'d', (char)'_', (char)'d', (char)'e', (char)'a', (char)'u', (char)'t', (char)'h', (char)'\000'}, .size = 4U, .addr = 4524UL, .num = 1}, {.name = {(char)'n', (char)'u', (char)'m', (char)'_', (char)'c', (char)'m', (char)'d', (char)'_', (char)'a', (char)'s', (char)'s', (char)'o', (char)'c', (char)'_', (char)'o', (char)'k', (char)'\000'}, .size = 4U, .addr = 4528UL, .num = 1}, {.name = {(char)'n', (char)'u', (char)'m', (char)'_', (char)'c', (char)'m', (char)'d', (char)'_', (char)'a', (char)'s', (char)'s', (char)'o', (char)'c', (char)'_', (char)'f', (char)'a', (char)'i', (char)'l', (char)'\000'}, .size = 4U, .addr = 4532UL, .num = 1}, {.name = {(char)'c', (char)'m', (char)'d', (char)'_', (char)'s', (char)'e', (char)'n', (char)'t', (char)'\000'}, .size = 1U, .addr = 4593UL, .num = 1}, {.name = {(char)'d', (char)'a', (char)'t', (char)'a', (char)'_', (char)'s', (char)'e', (char)'n', (char)'t', (char)'\000'}, .size = 1U, .addr = 4592UL, .num = 1}, {.name = {(char)'c', (char)'m', (char)'d', (char)'_', (char)'r', (char)'e', (char)'s', (char)'p', (char)'_', (char)'r', (char)'e', (char)'c', (char)'e', (char)'i', (char)'v', (char)'e', (char)'d', (char)'\000'}, .size = 1U, .addr = 4594UL, .num = 1}, {.name = {(char)'e', (char)'v', (char)'e', (char)'n', (char)'t', (char)'_', (char)'r', (char)'e', (char)'c', (char)'e', (char)'i', (char)'v', (char)'e', (char)'d', (char)'\000'}, .size = 1U, .addr = 4595UL, .num = 1}, {.name = {(char)'c', (char)'m', (char)'d', (char)'_', (char)'p', (char)'e', (char)'n', (char)'d', (char)'i', (char)'n', (char)'g', (char)'\000'}, .size = 4U, .addr = 432UL, .num = 1}, {.name = {(char)'t', (char)'x', (char)'_', (char)'p', (char)'e', (char)'n', (char)'d', (char)'i', (char)'n', (char)'g', (char)'\000'}, .size = 4U, .addr = 428UL, .num = 1}, {.name = {(char)'r', (char)'x', (char)'_', (char)'p', (char)'e', (char)'n', (char)'d', (char)'i', (char)'n', (char)'g', (char)'\000'}, .size = 4U, .addr = 424UL, .num = 1}};

#line 118  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/util.c"
static int num_of_items = 42;

#line 126  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/util.c"
int mwifiex_init_fw_complete(struct mwifiex_adapter *adapter)
{
  int __retres;
  
#line 129 
  adapter->init_wait_q_woken = (unsigned short)1U;
  
#line 130 
  __wake_up(& adapter->init_wait_q,1U,1,(void *)0);
  
#line 131 
  __retres = 0;
  
#line 131 
  return __retres;
}


#line 141  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/util.c"
int mwifiex_shutdown_fw_complete(struct mwifiex_adapter *adapter)
{
  int __retres;
  
#line 143 
  adapter->hw_status = MWIFIEX_HW_STATUS_NOT_READY;
  
#line 144 
  adapter->init_wait_q_woken = (unsigned short)1U;
  
#line 145 
  __wake_up(& adapter->init_wait_q,1U,1,(void *)0);
  
#line 146 
  __retres = 0;
  
#line 146 
  return __retres;
}


#line 153  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/util.c"
int mwifiex_init_shutdown_fw(struct mwifiex_private *priv, u32 func_init_shutdown)
{
  int __retres;
  u16 cmd;
  int tmp;
  
#line 158 
  if (func_init_shutdown == 1U) 
#line 159 
                                cmd = (unsigned short)169U;
  else 
    
#line 160 
    if (func_init_shutdown == 2U) 
#line 161 
                                  cmd = (unsigned short)170U;
    else {
      
#line 163 
      if (((priv->adapter)->debug_mask & 4U) != 0U) {
        
#line 163 
        if ((priv->adapter)->dev != (struct device *)0) 
#line 163 
                                                        _dev_info((struct device const *)(priv->adapter)->dev,"unsupported parameter\n"); else ;
      }
      else ;
      
#line 165 
      __retres = -1;
      
#line 165 
      goto return_label;
    }
  
#line 168 
  tmp = mwifiex_send_cmd(priv,(unsigned short)((int)cmd),(unsigned short)1,0U,(void *)0,(_Bool)1);
  
#line 168 
  __retres = tmp;
  return_label: 
#line 168 
                return __retres;
}


#line 170  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/util.c"
static char const __kstrtab_mwifiex_init_shutdown_fw[25U] = {(char)'m', (char)'w', (char)'i', (char)'f', (char)'i', (char)'e', (char)'x', (char)'_', (char)'i', (char)'n', (char)'i', (char)'t', (char)'_', (char)'s', (char)'h', (char)'u', (char)'t', (char)'d', (char)'o', (char)'w', (char)'n', (char)'_', (char)'f', (char)'w', (char)'\000'};

#line 170 
struct kernel_symbol const __ksymtab_mwifiex_init_shutdown_fw;


#line 170  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/util.c"
struct kernel_symbol const __ksymtab_mwifiex_init_shutdown_fw = {.value = (unsigned long)(& mwifiex_init_shutdown_fw), .name = (char const *)(& __kstrtab_mwifiex_init_shutdown_fw)};

#line 178  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/util.c"
int mwifiex_get_debug_info(struct mwifiex_private *priv, struct mwifiex_debug_info *info_0)
{
  int __retres;
  
#line 181 
  struct mwifiex_adapter *adapter = priv->adapter;
  
#line 183 
  if (info_0 != (struct mwifiex_debug_info *)0) {
    int tmp;
    int tmp_0;
    int tmp_1;
    
#line 184 
    info_0->debug_mask = adapter->debug_mask;
    
#line 185 
    memcpy((void *)(& info_0->packets_out),(void const *)(& priv->wmm.packets_out),32UL);
    
#line 188 
    info_0->curr_tx_buf_size = (unsigned int)adapter->curr_tx_buf_size;
    
#line 189 
    info_0->tx_buf_size = (unsigned int)adapter->tx_buf_size;
    
#line 190 
    tmp = mwifiex_get_rx_reorder_tbl(priv,(struct mwifiex_ds_rx_reorder_tbl *)(& info_0->rx_tbl));
    
#line 190 
    info_0->rx_tbl_num = (unsigned int)tmp;
    
#line 192 
    tmp_0 = mwifiex_get_tx_ba_stream_tbl(priv,(struct mwifiex_ds_tx_ba_stream_tbl *)(& info_0->tx_tbl));
    
#line 192 
    info_0->tx_tbl_num = (unsigned int)tmp_0;
    
#line 194 
    tmp_1 = mwifiex_get_tdls_list(priv,(struct tdls_peer_info *)(& info_0->tdls_list));
    
#line 194 
    info_0->tdls_peer_num = (unsigned int)tmp_1;
    
#line 196 
    info_0->ps_mode = adapter->ps_mode;
    
#line 197 
    info_0->ps_state = adapter->ps_state;
    
#line 198 
    info_0->is_deep_sleep = adapter->is_deep_sleep;
    
#line 199 
    info_0->pm_wakeup_card_req = adapter->pm_wakeup_card_req;
    
#line 200 
    info_0->pm_wakeup_fw_try = adapter->pm_wakeup_fw_try;
    
#line 201 
    info_0->is_hs_configured = adapter->is_hs_configured;
    
#line 202 
    info_0->hs_activated = adapter->hs_activated;
    
#line 203 
    info_0->is_cmd_timedout = adapter->is_cmd_timedout;
    
#line 205 
    info_0->num_cmd_host_to_card_failure = adapter->dbg.num_cmd_host_to_card_failure;
    
#line 207 
    info_0->num_cmd_sleep_cfm_host_to_card_failure = adapter->dbg.num_cmd_sleep_cfm_host_to_card_failure;
    
#line 209 
    info_0->num_tx_host_to_card_failure = adapter->dbg.num_tx_host_to_card_failure;
    
#line 210 
    info_0->num_event_deauth = adapter->dbg.num_event_deauth;
    
#line 211 
    info_0->num_event_disassoc = adapter->dbg.num_event_disassoc;
    
#line 212 
    info_0->num_event_link_lost = adapter->dbg.num_event_link_lost;
    
#line 213 
    info_0->num_cmd_deauth = adapter->dbg.num_cmd_deauth;
    
#line 214 
    info_0->num_cmd_assoc_success = adapter->dbg.num_cmd_assoc_success;
    
#line 216 
    info_0->num_cmd_assoc_failure = adapter->dbg.num_cmd_assoc_failure;
    
#line 218 
    info_0->num_tx_timeout = adapter->dbg.num_tx_timeout;
    
#line 219 
    info_0->timeout_cmd_id = adapter->dbg.timeout_cmd_id;
    
#line 220 
    info_0->timeout_cmd_act = adapter->dbg.timeout_cmd_act;
    
#line 221 
    memcpy((void *)(& info_0->last_cmd_id),(void const *)(& adapter->dbg.last_cmd_id),10UL);
    
#line 223 
    memcpy((void *)(& info_0->last_cmd_act),(void const *)(& adapter->dbg.last_cmd_act),10UL);
    
#line 225 
    info_0->last_cmd_index = adapter->dbg.last_cmd_index;
    
#line 226 
    memcpy((void *)(& info_0->last_cmd_resp_id),(void const *)(& adapter->dbg.last_cmd_resp_id),10UL);
    
#line 228 
    info_0->last_cmd_resp_index = adapter->dbg.last_cmd_resp_index;
    
#line 229 
    memcpy((void *)(& info_0->last_event),(void const *)(& adapter->dbg.last_event),10UL);
    
#line 231 
    info_0->last_event_index = adapter->dbg.last_event_index;
    
#line 232 
    info_0->data_sent = adapter->data_sent;
    
#line 233 
    info_0->cmd_sent = adapter->cmd_sent;
    
#line 234 
    info_0->cmd_resp_received = adapter->cmd_resp_received;
  }
  else ;
  
#line 237 
  __retres = 0;
  
#line 237 
  return __retres;
}


#line 240  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/util.c"
int mwifiex_debug_info_to_buffer(struct mwifiex_private *priv, char *buf, struct mwifiex_debug_info *info_0)
{
  int __retres;
  size_t size;
  size_t addr;
  long val;
  int i;
  int j;
  int tmp;
  int tmp_0;
  int tmp_1;
  
#line 243 
  char *p = buf;
  
#line 244 
  struct mwifiex_debug_data *d = &(items[0]);
  
#line 249 
  if (info_0 == (struct mwifiex_debug_info *)0) {
    
#line 250 
    __retres = 0;
    
#line 250 
    goto return_label;
  }
  else ;
  
#line 252 
  i = 0;
  
#line 252 
  goto ldv_61541;
  ldv_61540: 
#line 253 
  ;
  
#line 253 
  tmp = sprintf(p,"%s=",(char *)(& (d + i)->name));
  
#line 253 
  p += tmp;
  
#line 255 
  size = (unsigned long)((d + i)->size / (unsigned int)(d + i)->num);
  
#line 257 
  if (num_of_items + -3 > i) 
#line 258 
                             addr = (d + i)->addr + (unsigned long)info_0; else 
                                                                    
#line 260 
                                                                    addr = (d + i)->addr + (unsigned long)priv->adapter;
  
#line 262 
  j = 0;
  
#line 262 
  goto ldv_61538;
  ldv_61537: 
#line 263 
  ;
  
#line 263 
  switch (size) {
    case (size_t)1: 
#line 264 
    ;
    
#line 265 
    val = (long)*((u8 *)addr);
    
#line 266 
    goto ldv_61532;
    case (size_t)2: 
#line 267 
    ;
    
#line 268 
    val = (long)*((u16 *)addr);
    
#line 269 
    goto ldv_61532;
    case (size_t)4: 
#line 270 
    ;
    
#line 271 
    val = (long)*((u32 *)addr);
    
#line 272 
    goto ldv_61532;
    case (size_t)8: 
#line 273 
    ;
    
#line 274 
    val = (long)*((long long *)addr);
    
#line 275 
    goto ldv_61532;
    default: 
#line 276 
    ;
    
#line 277 
    val = -1L;
    
#line 278 
    goto ldv_61532;
  }
  ldv_61532: 
#line 281 
  ;
  
#line 281 
  tmp_0 = sprintf(p,"%#lx ",val);
  
#line 281 
  p += tmp_0;
  
#line 282 
  addr += size;
  
#line 262 
  j += 1;
  ldv_61538: 
#line 263 
  ;
  
#line 262 
  if ((d + i)->num > j) 
#line 264 
                        goto ldv_61537; else 
#line 267 
                                             goto ldv_61539;
  ldv_61539: 
#line 268 
  ;
  
#line 285 
  tmp_1 = sprintf(p,"\n");
  
#line 285 
  p += tmp_1;
  
#line 252 
  i += 1;
  ldv_61541: 
#line 253 
  ;
  
#line 252 
  if (i < num_of_items) 
#line 254 
                        goto ldv_61540; else 
#line 257 
                                             goto ldv_61542;
  ldv_61542: 
#line 258 
  ;
  
#line 288 
  if (info_0->tx_tbl_num != 0U) {
    int tmp_2;
    int tmp_3;
    
#line 289 
    tmp_2 = sprintf(p,"Tx BA stream table:\n");
    
#line 289 
    p += tmp_2;
    
#line 290 
    i = 0;
    
#line 290 
    goto ldv_61544;
    ldv_61543: 
#line 291 
    ;
    
#line 291 
    tmp_3 = sprintf(p,"tid = %d, ra = %pM\n",(int)info_0->tx_tbl[i].tid,(u8 *)(& info_0->tx_tbl[i].ra));
    
#line 292 
    p += tmp_3;
    
#line 290 
    i += 1;
    ldv_61544: 
#line 291 
    ;
    
#line 290 
    if (info_0->tx_tbl_num > (unsigned int)i) 
#line 292 
                                              goto ldv_61543; else 
#line 295 
                                                                   goto ldv_61545;
    ldv_61545: 
#line 296 
    ;
  }
  else ;
  
#line 295 
  if (info_0->rx_tbl_num != 0U) {
    int tmp_4;
    int tmp_5;
    int tmp_6;
    int tmp_7;
    int tmp_9;
    int tmp_8;
    int tmp_10;
    
#line 296 
    tmp_4 = sprintf(p,"Rx reorder table:\n");
    
#line 296 
    p += tmp_4;
    
#line 297 
    i = 0;
    
#line 297 
    goto ldv_61550;
    ldv_61549: 
#line 298 
    ;
    
#line 298 
    tmp_5 = sprintf(p,"tid = %d, ta = %pM, ",(int)info_0->rx_tbl[i].tid,(u8 *)(& info_0->rx_tbl[i].ta));
    
#line 300 
    p += tmp_5;
    
#line 301 
    tmp_6 = sprintf(p,"start_win = %d, ",info_0->rx_tbl[i].start_win);
    
#line 302 
    p += tmp_6;
    
#line 303 
    tmp_7 = sprintf(p,"win_size = %d, buffer: ",info_0->rx_tbl[i].win_size);
    
#line 304 
    p += tmp_7;
    
#line 306 
    j = 0;
    
#line 306 
    goto ldv_61547;
    ldv_61546: 
#line 307 
    ;
    
#line 307 
    if (info_0->rx_tbl[i].buffer[j] != 0U) 
#line 307 
                                           tmp_8 = 49; else 
#line 307 
                                                            tmp_8 = 48;
    
#line 307 
    tmp_9 = sprintf(p,"%c ",tmp_8);
    
#line 309 
    p += tmp_9;
    
#line 306 
    j += 1;
    ldv_61547: 
#line 307 
    ;
    
#line 306 
    if (info_0->rx_tbl[i].win_size > (unsigned int)j) 
#line 308 
                                                      goto ldv_61546; else 
                                                                    
#line 311 
                                                                    goto ldv_61548;
    ldv_61548: 
#line 312 
    ;
    
#line 311 
    tmp_10 = sprintf(p,"\n");
    
#line 311 
    p += tmp_10;
    
#line 297 
    i += 1;
    ldv_61550: 
#line 298 
    ;
    
#line 297 
    if (info_0->rx_tbl_num > (unsigned int)i) 
#line 299 
                                              goto ldv_61549; else 
#line 302 
                                                                   goto ldv_61551;
    ldv_61551: 
#line 303 
    ;
  }
  else ;
  
#line 315 
  if (info_0->tdls_peer_num != 0U) {
    int tmp_11;
    int tmp_12;
    int tmp_13;
    
#line 316 
    tmp_11 = sprintf(p,"TDLS peer table:\n");
    
#line 316 
    p += tmp_11;
    
#line 317 
    i = 0;
    
#line 317 
    goto ldv_61553;
    ldv_61552: 
#line 318 
    ;
    
#line 318 
    tmp_12 = sprintf(p,"peer = %pM",(u8 *)(& info_0->tdls_list[i].peer_addr));
    
#line 319 
    p += tmp_12;
    
#line 320 
    tmp_13 = sprintf(p,"\n");
    
#line 320 
    p += tmp_13;
    
#line 317 
    i += 1;
    ldv_61553: 
#line 318 
    ;
    
#line 317 
    if (info_0->tdls_peer_num > (unsigned int)i) 
#line 319 
                                                 goto ldv_61552; else 
                                                                   
#line 322 
                                                                   goto ldv_61554;
    ldv_61554: 
#line 323 
    ;
  }
  else ;
  
#line 324 
  __retres = (int)((long)p - (long)buf);
  return_label: 
#line 324 
                return __retres;
}


#line 328  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/util.c"
static int mwifiex_parse_mgmt_packet(struct mwifiex_private *priv, u8 *payload, u16 len, struct rxpd *rx_pd)
{
  int __retres;
  u16 stype;
  u8 category;
  u8 action_code;
  u8 *addr2;
  
#line 333 
  struct ieee80211_hdr *ieee_hdr = (struct ieee80211_hdr *)payload;
  
#line 335 
  stype = (unsigned short)((unsigned int)ieee_hdr->frame_control & 240U);
  
#line 337 
  switch ((int)stype) {
    case 208: 
#line 338 
    ;
    
#line 339 
    category = *(payload + 30U);
    
#line 340 
    switch ((int)category) {
      case 4: 
#line 341 
      ;
      
#line 342 
      action_code = *(payload + 31U);
      
#line 344 
      if ((unsigned int)action_code == 14U) {
        
#line 345 
        addr2 = (u8 *)(& ieee_hdr->addr2);
        
#line 346 
        if (((priv->adapter)->debug_mask & 1073741824U) != 0U) {
          
#line 346 
          if ((priv->adapter)->dev != (struct device *)0) 
#line 346 
                                                          _dev_info((struct device const *)(priv->adapter)->dev,"TDLS discovery response %pM nf=%d, snr=%d\n",addr2,(int)rx_pd->nf,(int)rx_pd->snr); else ;
        }
        else ;
        
#line 349 
        mwifiex_auto_tdls_update_peer_signal(priv,addr2,(signed char)((int)rx_pd->snr),(signed char)((int)rx_pd->nf));
      }
      else ;
      
#line 354 
      goto ldv_61568;
      case 3: 
#line 355 
      ;
      
#line 357 
      if (((priv->adapter)->debug_mask & 1073741824U) != 0U) {
        
#line 357 
        if ((priv->adapter)->dev != (struct device *)0) 
#line 357 
                                                        _dev_info((struct device const *)(priv->adapter)->dev,"drop BACK action frames"); else ;
      }
      else ;
      
#line 359 
      __retres = -1;
      
#line 359 
      goto return_label;
      default: 
#line 360 
      ;
      
#line 361 
      if (((priv->adapter)->debug_mask & 1073741824U) != 0U) {
        
#line 361 
        if ((priv->adapter)->dev != (struct device *)0) 
#line 361 
                                                        _dev_info((struct device const *)(priv->adapter)->dev,"unknown public action frame category %d\n",(int)category); else ;
      }
      else ;
    }
    ldv_61568: 
#line 365 
    ;
    default: 
#line 365 
    ;
    
#line 366 
    if (((priv->adapter)->debug_mask & 1073741824U) != 0U) {
      
#line 366 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 366 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"unknown mgmt frame subtype %#x\n",(int)stype); else ;
    }
    else ;
    
#line 368 
    __retres = 0;
    
#line 368 
    goto return_label;
  }
  
#line 371 
  __retres = 0;
  return_label: 
#line 371 
                return __retres;
}


#line 378  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/util.c"
int mwifiex_process_mgmt_packet(struct mwifiex_private *priv, struct sk_buff *skb)
{
  int __retres;
  struct rxpd *rx_pd;
  u16 pkt_len;
  struct ieee80211_hdr *ieee_hdr;
  int tmp_0;
  
#line 385 
  if (skb == (struct sk_buff *)0) {
    
#line 386 
    __retres = -1;
    
#line 386 
    goto return_label;
  }
  else ;
  
#line 388 
  if (priv->mgmt_frame_mask == 0U || priv->wdev.iftype == (unsigned int)NL80211_IFTYPE_UNSPECIFIED) {
    
#line 390 
    if (((priv->adapter)->debug_mask & 4U) != 0U) {
      
#line 390 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 390 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"do not receive mgmt frames on uninitialized intf"); else ;
    }
    else ;
    
#line 392 
    __retres = -1;
    
#line 392 
    goto return_label;
  }
  else ;
  
#line 395 
  rx_pd = (struct rxpd *)skb->data;
  
#line 397 
  skb_pull(skb,(unsigned int)rx_pd->rx_pkt_offset);
  
#line 398 
  skb_pull(skb,2U);
  
#line 400 
  pkt_len = rx_pd->rx_pkt_length;
  
#line 402 
  ieee_hdr = (struct ieee80211_hdr *)skb->data;
  
#line 403 
  tmp_0 = ieee80211_is_mgmt((unsigned short)((int)ieee_hdr->frame_control));
  
#line 403 
  if (tmp_0 != 0) {
    int tmp;
    
#line 404 
    tmp = mwifiex_parse_mgmt_packet(priv,(u8 *)ieee_hdr,(unsigned short)((int)pkt_len),rx_pd);
    
#line 404 
    if (tmp != 0) {
      
#line 406 
      __retres = -1;
      
#line 406 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 409 
  memmove((void *)(skb->data + 24U),(void const *)(skb->data + 30U),(unsigned long)pkt_len + 18446744073709551586UL);
  
#line 413 
  pkt_len = (unsigned short)((unsigned int)pkt_len + 65528U);
  
#line 414 
  rx_pd->rx_pkt_length = pkt_len;
  
#line 416 
  cfg80211_rx_mgmt(& priv->wdev,(int)priv->roc_cfg.chan.center_freq,(int)((short)rx_pd->snr) + (int)((short)rx_pd->nf),(u8 const *)skb->data,(unsigned long)pkt_len,0U);
  
#line 420 
  __retres = 0;
  return_label: 
#line 420 
                return __retres;
}


#line 432  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/util.c"
int mwifiex_recv_packet(struct mwifiex_private *priv, struct sk_buff *skb)
{
  int __retres;
  struct mwifiex_sta_node *src_node;
  struct ethhdr *p_ethhdr;
  int tmp;
  
#line 437 
  if (skb == (struct sk_buff *)0) {
    
#line 438 
    __retres = -1;
    
#line 438 
    goto return_label;
  }
  else ;
  
#line 440 
  priv->stats.rx_bytes += (unsigned long)skb->len;
  
#line 441 
  priv->stats.rx_packets += 1UL;
  
#line 443 
  if (((unsigned long)priv->bss_role & 1UL) != 0UL) {
    
#line 444 
    p_ethhdr = (struct ethhdr *)skb->data;
    
#line 445 
    src_node = mwifiex_get_sta_entry(priv,(u8 const *)(& p_ethhdr->h_source));
    
#line 446 
    if (src_node != (struct mwifiex_sta_node *)0) {
      
#line 447 
      src_node->stats.last_rx = (unsigned long long)jiffies;
      
#line 448 
      src_node->stats.rx_bytes += (unsigned long long)skb->len;
      
#line 449 
      src_node->stats.rx_packets += 1U;
    }
    else ;
  }
  else ;
  
#line 453 
  skb->dev = priv->netdev;
  
#line 454 
  skb->protocol = eth_type_trans(skb,priv->netdev);
  
#line 455 
  skb->ip_summed = (unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U;
  
#line 474 
  if ((unsigned int)(priv->adapter)->iface_type + 255U <= 1U && skb->truesize > 4096U) 
    
#line 477 
    skb->truesize = (skb->truesize + skb->len) + 4294963200U; else ;
  
#line 479 
  tmp = preempt_count();
  
#line 479 
  if (((unsigned long)tmp & 2096896UL) != 0UL) 
#line 480 
                                               netif_rx(skb); else 
#line 482 
                                                                   netif_rx_ni(skb);
  
#line 484 
  __retres = 0;
  return_label: 
#line 484 
                return __retres;
}


#line 496  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/util.c"
int mwifiex_complete_cmd(struct mwifiex_adapter *adapter, struct cmd_ctrl_node *cmd_node)
{
  int __retres;
  
#line 499 
  if ((adapter->debug_mask & 16U) != 0U) {
    
#line 499 
    if (adapter->dev != (struct device *)0) 
#line 499 
                                            _dev_info((struct device const *)adapter->dev,"cmd completed: status=%d\n",adapter->cmd_wait_q.status); else ;
  }
  else ;
  
#line 503 
  *(cmd_node->condition) = (unsigned char)1U;
  
#line 505 
  if (adapter->cmd_wait_q.status == -110) {
    
#line 506 
    if ((adapter->debug_mask & 4U) != 0U) {
      
#line 506 
      if (adapter->dev != (struct device *)0) 
#line 506 
                                              _dev_info((struct device const *)adapter->dev,"cmd timeout\n"); else ;
    }
    else ;
  }
  else 
#line 508 
       __wake_up(& adapter->cmd_wait_q.wait,1U,1,(void *)0);
  
#line 510 
  __retres = 0;
  
#line 510 
  return __retres;
}


#line 519  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/util.c"
struct mwifiex_sta_node *mwifiex_get_sta_entry(struct mwifiex_private *priv, u8 const *mac)
{
  struct mwifiex_sta_node *__retres;
  struct mwifiex_sta_node *node;
  struct mwifiex_sta_node *tmp;
  int tmp_0;
  struct mwifiex_sta_node *tmp_1;
  
#line 523 
  if (mac == (u8 const *)0U) {
    
#line 524 
    __retres = (struct mwifiex_sta_node *)0;
    
#line 524 
    goto return_label;
  }
  else ;
  {
    
#line 526 
    struct list_head const *__mptr = (struct list_head const *)priv->sta_list.next;
    
#line 526 
    tmp = (struct mwifiex_sta_node *)__mptr;
  }
  
#line 526 
  node = tmp;
  
#line 526 
  goto ldv_61599;
  ldv_61598: 
#line 527 
  ;
  
#line 527 
  tmp_0 = memcmp((void const *)(& node->mac_addr),(void const *)mac,6UL);
  
#line 527 
  if (tmp_0 == 0) {
    
#line 528 
    __retres = node;
    
#line 528 
    goto return_label;
  }
  else ;
  {
    
#line 526 
    struct list_head const *__mptr_0 = (struct list_head const *)node->list.next;
    
#line 526 
    tmp_1 = (struct mwifiex_sta_node *)__mptr_0;
  }
  
#line 526 
  node = tmp_1;
  ldv_61599: 
#line 528 
  ;
  
#line 526 
  if (& node->list != & priv->sta_list) 
#line 528 
                                        goto ldv_61598; else 
#line 531 
                                                             goto ldv_61600;
  ldv_61600: 
#line 532 
  ;
  
#line 531 
  __retres = (struct mwifiex_sta_node *)0;
  return_label: 
#line 531 
                return __retres;
}


#line 540  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/util.c"
struct mwifiex_sta_node *mwifiex_add_sta_entry(struct mwifiex_private *priv, u8 const *mac)
{
  struct mwifiex_sta_node *__retres;
  struct mwifiex_sta_node *node;
  unsigned long flags;
  
#line 545 
  if (mac == (u8 const *)0U) {
    
#line 546 
    __retres = (struct mwifiex_sta_node *)0;
    
#line 546 
    goto return_label;
  }
  else ;
  
#line 548 
  ldv___ldv_spin_lock_78_0(& priv->sta_list_spinlock);
  
#line 549 
  node = mwifiex_get_sta_entry(priv,mac);
  
#line 550 
  if (node != (struct mwifiex_sta_node *)0) 
#line 551 
                                            goto done; else ;
  
#line 553 
  node = (struct mwifiex_sta_node *)kzalloc_0(480UL,32U);
  
#line 554 
  if (node == (struct mwifiex_sta_node *)0) 
#line 555 
                                            goto done; else ;
  
#line 557 
  memcpy((void *)(& node->mac_addr),(void const *)mac,6UL);
  
#line 558 
  list_add_tail(& node->list,& priv->sta_list);
  done: 
#line 560 
  ;
  
#line 561 
  ldv_spin_unlock_irqrestore_79_0(& priv->sta_list_spinlock,flags);
  
#line 562 
  __retres = node;
  return_label: 
#line 562 
                return __retres;
}


#line 569  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/util.c"
void mwifiex_set_sta_ht_cap(struct mwifiex_private *priv, u8 const *ies, int ies_len, struct mwifiex_sta_node *node)
{
  struct ieee_types_header *ht_cap_ie;
  struct ieee80211_ht_cap const *ht_cap;
  
#line 575 
  if (ies == (u8 const *)0U) 
#line 576 
                             goto return_label; else ;
  
#line 578 
  ht_cap_ie = (struct ieee_types_header *)cfg80211_find_ie((unsigned char)45,ies,ies_len);
  
#line 580 
  if (ht_cap_ie != (struct ieee_types_header *)0) {
    
#line 581 
    ht_cap = (struct ieee80211_ht_cap const *)(ht_cap_ie + 1U);
    
#line 582 
    node->is_11n_enabled = (unsigned char)1U;
    
#line 583 
    if (((int)ht_cap->cap_info & 2048) != 0) 
#line 583 
                                             node->max_amsdu = (unsigned short)8192U; else 
                                                                    
#line 583 
                                                                    node->max_amsdu = (unsigned short)4096U;
  }
  else 
#line 588 
       node->is_11n_enabled = (unsigned char)0U;
  return_label: 
#line 591 
                return;
}


#line 595  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/util.c"
void mwifiex_del_sta_entry(struct mwifiex_private *priv, u8 const *mac)
{
  struct mwifiex_sta_node *node;
  unsigned long flags;
  
#line 600 
  ldv___ldv_spin_lock_80(& priv->sta_list_spinlock);
  
#line 602 
  node = mwifiex_get_sta_entry(priv,mac);
  
#line 603 
  if (node != (struct mwifiex_sta_node *)0) {
    
#line 604 
    list_del(& node->list);
    
#line 605 
    kfree((void const *)node);
  }
  else ;
  
#line 608 
  ldv_spin_unlock_irqrestore_81_0(& priv->sta_list_spinlock,flags);
  
#line 609 
  return;
}


#line 613  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/util.c"
void mwifiex_del_all_sta_list(struct mwifiex_private *priv)
{
  struct mwifiex_sta_node *node;
  struct mwifiex_sta_node *tmp;
  unsigned long flags;
  struct mwifiex_sta_node *tmp_0;
  struct mwifiex_sta_node *tmp_1;
  struct mwifiex_sta_node *tmp_2;
  
#line 618 
  ldv___ldv_spin_lock_82_0(& priv->sta_list_spinlock);
  {
    
#line 620 
    struct list_head const *__mptr = (struct list_head const *)priv->sta_list.next;
    
#line 620 
    tmp_0 = (struct mwifiex_sta_node *)__mptr;
  }
  
#line 620 
  node = tmp_0;
  {
    
#line 620 
    struct list_head const *__mptr_0 = (struct list_head const *)node->list.next;
    
#line 620 
    tmp_1 = (struct mwifiex_sta_node *)__mptr_0;
  }
  
#line 621 
  tmp = tmp_1;
  
#line 620 
  goto ldv_61635;
  ldv_61634: 
#line 621 
  ;
  
#line 621 
  list_del(& node->list);
  
#line 622 
  kfree((void const *)node);
  
#line 620 
  node = tmp;
  {
    
#line 620 
    struct list_head const *__mptr_1 = (struct list_head const *)tmp->list.next;
    
#line 620 
    tmp_2 = (struct mwifiex_sta_node *)__mptr_1;
  }
  
#line 620 
  tmp = tmp_2;
  ldv_61635: 
#line 622 
  ;
  
#line 620 
  if (& node->list != & priv->sta_list) 
#line 622 
                                        goto ldv_61634; else 
#line 625 
                                                             goto ldv_61636;
  ldv_61636: 
#line 626 
  ;
  
#line 625 
  INIT_LIST_HEAD(& priv->sta_list);
  
#line 626 
  ldv_spin_unlock_irqrestore_83_0(& priv->sta_list_spinlock,flags);
  
#line 627 
  return;
}


#line 631  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/util.c"
void mwifiex_hist_data_add(struct mwifiex_private *priv, u8 rx_rate, s8 snr, s8 nflr)
{
  int tmp;
  
#line 634 
  struct mwifiex_histogram_data *phist_data = priv->hist_data;
  
#line 636 
  tmp = atomic_read((atomic_t const *)(& phist_data->num_samples));
  
#line 636 
  if (tmp > 1048576) 
#line 637 
                     mwifiex_hist_data_reset(priv); else ;
  
#line 638 
  mwifiex_hist_data_set(priv,(unsigned char)((int)rx_rate),(signed char)((int)snr),(signed char)((int)nflr));
  
#line 639 
  return;
}


#line 642  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/util.c"
void mwifiex_hist_data_set(struct mwifiex_private *priv, u8 rx_rate, s8 snr, s8 nflr)
{
  
#line 645 
  struct mwifiex_histogram_data *phist_data = priv->hist_data;
  
#line 647 
  atomic_inc_1(& phist_data->num_samples);
  
#line 648 
  atomic_inc_1(& phist_data->rx_rate[(int)rx_rate]);
  
#line 649 
  atomic_inc_1(& phist_data->snr[(int)snr]);
  
#line 650 
  atomic_inc_1(& phist_data->noise_flr[(int)nflr + 128]);
  
#line 651 
  atomic_inc_1(& phist_data->sig_str[(int)nflr - (int)snr]);
  
#line 652 
  return;
}


#line 655  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/util.c"
void mwifiex_hist_data_reset(struct mwifiex_private *priv)
{
  int ix;
  
#line 658 
  struct mwifiex_histogram_data *phist_data = priv->hist_data;
  
#line 660 
  atomic_set(& phist_data->num_samples,0);
  
#line 661 
  ix = 0;
  
#line 661 
  goto ldv_61657;
  ldv_61656: 
#line 662 
  ;
  
#line 662 
  atomic_set(& phist_data->rx_rate[ix],0);
  
#line 661 
  ix += 1;
  ldv_61657: 
#line 662 
  ;
  
#line 661 
  if (ix <= 73) 
#line 663 
                goto ldv_61656; else 
#line 666 
                                     goto ldv_61658;
  ldv_61658: 
#line 667 
  ;
  
#line 663 
  ix = 0;
  
#line 663 
  goto ldv_61660;
  ldv_61659: 
#line 664 
  ;
  
#line 664 
  atomic_set(& phist_data->snr[ix],0);
  
#line 663 
  ix += 1;
  ldv_61660: 
#line 664 
  ;
  
#line 663 
  if (ix <= 255) 
#line 665 
                 goto ldv_61659; else 
#line 668 
                                      goto ldv_61661;
  ldv_61661: 
#line 669 
  ;
  
#line 665 
  ix = 0;
  
#line 665 
  goto ldv_61663;
  ldv_61662: 
#line 666 
  ;
  
#line 666 
  atomic_set(& phist_data->noise_flr[ix],0);
  
#line 665 
  ix += 1;
  ldv_61663: 
#line 666 
  ;
  
#line 665 
  if (ix <= 255) 
#line 667 
                 goto ldv_61662; else 
#line 670 
                                      goto ldv_61664;
  ldv_61664: 
#line 671 
  ;
  
#line 667 
  ix = 0;
  
#line 667 
  goto ldv_61666;
  ldv_61665: 
#line 668 
  ;
  
#line 668 
  atomic_set(& phist_data->sig_str[ix],0);
  
#line 667 
  ix += 1;
  ldv_61666: 
#line 668 
  ;
  
#line 667 
  if (ix <= 255) 
#line 669 
                 goto ldv_61665; else 
#line 672 
                                      goto ldv_61667;
  ldv_61667: 
#line 673 
  ;
  
#line 674 
  return;
}


#line 671  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/util.c"
void *mwifiex_alloc_dma_align_buf(int rx_len, gfp_t flags)
{
  void *__retres;
  struct sk_buff *skb;
  int buf_len;
  int pad;
  
#line 676 
  buf_len = rx_len + 128;
  
#line 678 
  skb = __dev_alloc_skb((unsigned int)buf_len,flags);
  
#line 680 
  if (skb == (struct sk_buff *)0) {
    
#line 681 
    __retres = (void *)0;
    
#line 681 
    goto return_label;
  }
  else ;
  
#line 683 
  skb_reserve(skb,64);
  
#line 685 
  pad = (int)((((long)skb->data + (long)63U) & (long)4294967232U) - (long)skb->data);
  
#line 688 
  skb_reserve(skb,pad);
  
#line 690 
  __retres = (void *)skb;
  return_label: 
#line 690 
                return __retres;
}


#line 692  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/util.c"
static char const __kstrtab_mwifiex_alloc_dma_align_buf[28U] = {(char)'m', (char)'w', (char)'i', (char)'f', (char)'i', (char)'e', (char)'x', (char)'_', (char)'a', (char)'l', (char)'l', (char)'o', (char)'c', (char)'_', (char)'d', (char)'m', (char)'a', (char)'_', (char)'a', (char)'l', (char)'i', (char)'g', (char)'n', (char)'_', (char)'b', (char)'u', (char)'f', (char)'\000'};

#line 692 
struct kernel_symbol const __ksymtab_mwifiex_alloc_dma_align_buf;


#line 692  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/util.c"
struct kernel_symbol const __ksymtab_mwifiex_alloc_dma_align_buf = {.value = (unsigned long)(& mwifiex_alloc_dma_align_buf), .name = (char const *)(& __kstrtab_mwifiex_alloc_dma_align_buf)};

#line 120  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_util.c.aux"
static void atomic_inc_1(atomic_t *v)
{
  
#line 123 
  ldv_atomic_inc(v);
  
#line 124 
  return;
}


#line 436  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_util.c.aux"
static void *kzalloc_0(size_t size, gfp_t flags)
{
  void *tmp;
  
#line 439 
  tmp = ldv_kzalloc(size,flags);
  
#line 439 
  return tmp;
}


#line 791  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_util.c.aux"
static void ldv___ldv_spin_lock_78_0(spinlock_t *ldv_func_arg1)
{
  
#line 795 
  ldv_spin_model_lock((char *)"sta_list_spinlock_of_mwifiex_private");
  
#line 797 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 798 
  return;
}


#line 801  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_util.c.aux"
static void ldv_spin_unlock_irqrestore_79_0(spinlock_t *lock, unsigned long flags)
{
  
#line 805 
  ldv_spin_model_unlock((char *)"sta_list_spinlock_of_mwifiex_private");
  
#line 807 
  spin_unlock_irqrestore_1(lock,flags);
  
#line 808 
  return;
}


#line 811  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_util.c.aux"
static void ldv___ldv_spin_lock_80(spinlock_t *ldv_func_arg1)
{
  
#line 815 
  ldv_spin_model_lock((char *)"sta_list_spinlock_of_mwifiex_private");
  
#line 817 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 818 
  return;
}


#line 821  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_util.c.aux"
static void ldv_spin_unlock_irqrestore_81_0(spinlock_t *lock, unsigned long flags)
{
  
#line 825 
  ldv_spin_model_unlock((char *)"sta_list_spinlock_of_mwifiex_private");
  
#line 827 
  spin_unlock_irqrestore_1(lock,flags);
  
#line 828 
  return;
}


#line 831  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_util.c.aux"
static void ldv___ldv_spin_lock_82_0(spinlock_t *ldv_func_arg1)
{
  
#line 835 
  ldv_spin_model_lock((char *)"sta_list_spinlock_of_mwifiex_private");
  
#line 837 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 838 
  return;
}


#line 841  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_util.c.aux"
static void ldv_spin_unlock_irqrestore_83_0(spinlock_t *lock, unsigned long flags)
{
  
#line 845 
  ldv_spin_model_unlock((char *)"sta_list_spinlock_of_mwifiex_private");
  
#line 847 
  spin_unlock_irqrestore_1(lock,flags);
  
#line 848 
  return;
}


#line 71  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/bug.h"
void warn_slowpath_null(char const *, int const);


#line 98  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/atomic.h"
static void atomic_inc_2(atomic_t *v);


#line 114 
static void atomic_dec_1(atomic_t *v);


#line 446  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_unlock_irqrestore_2(spinlock_t *lock, unsigned long flags)
{
  {
    unsigned long __dummy;
    unsigned long __dummy2;
    
  }
  
#line 448 
  _raw_spin_unlock_irqrestore(& lock->__anonCompField_spinlock_18.rlock,flags);
  
#line 449 
  return;
}


#line 482 
static void ldv_spin_unlock_irqrestore_79_1(spinlock_t *lock, unsigned long flags);


#line 486 
static void ldv_spin_unlock_irqrestore_81_1(spinlock_t *lock, unsigned long flags);


#line 490 
static void ldv_spin_unlock_irqrestore_83_1(spinlock_t *lock, unsigned long flags);


#line 494 
static void ldv_spin_unlock_irqrestore_85_1(spinlock_t *lock, unsigned long flags);


#line 498 
static void ldv_spin_unlock_irqrestore_87(spinlock_t *lock, unsigned long flags);


#line 502 
static void ldv_spin_unlock_irqrestore_89_1(spinlock_t *lock, unsigned long flags);


#line 506 
static void ldv_spin_unlock_irqrestore_91_1(spinlock_t *lock, unsigned long flags);


#line 510 
static void ldv_spin_unlock_irqrestore_93_0(spinlock_t *lock, unsigned long flags);


#line 514 
static void ldv_spin_unlock_irqrestore_95_0(spinlock_t *lock, unsigned long flags);


#line 518 
static void ldv_spin_unlock_irqrestore_96_0(spinlock_t *lock, unsigned long flags);


#line 522 
static void ldv_spin_unlock_irqrestore_98_0(spinlock_t *lock, unsigned long flags);


#line 526 
static void ldv_spin_unlock_irqrestore_100_0(spinlock_t *lock, unsigned long flags);


#line 530 
static void ldv_spin_unlock_irqrestore_103_1(spinlock_t *lock, unsigned long flags);


#line 74  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_tdls.c.aux"
static void ldv___ldv_spin_lock_78_1(spinlock_t *ldv_func_arg1);


#line 78 
static void ldv___ldv_spin_lock_80_0(spinlock_t *ldv_func_arg1);


#line 82 
static void ldv___ldv_spin_lock_82_1(spinlock_t *ldv_func_arg1);


#line 86 
static void ldv___ldv_spin_lock_84_0(spinlock_t *ldv_func_arg1);


#line 90 
static void ldv___ldv_spin_lock_86(spinlock_t *ldv_func_arg1);


#line 94 
static void ldv___ldv_spin_lock_88_0(spinlock_t *ldv_func_arg1);


#line 98 
static void ldv___ldv_spin_lock_90_1(spinlock_t *ldv_func_arg1);


#line 102 
static void ldv___ldv_spin_lock_92_1(spinlock_t *ldv_func_arg1);


#line 106 
static void ldv___ldv_spin_lock_94(spinlock_t *ldv_func_arg1);


#line 110 
static void ldv___ldv_spin_lock_97_0(spinlock_t *ldv_func_arg1);


#line 114 
static void ldv___ldv_spin_lock_99(spinlock_t *ldv_func_arg1);


#line 118 
static void ldv___ldv_spin_lock_102_1(spinlock_t *ldv_func_arg1);


#line 172  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timer.h"
static int ldv_del_timer_106(struct timer_list *ldv_func_arg1);


#line 177 
static int ldv_mod_timer_101(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2);


#line 181 
static int ldv_mod_timer_104(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2);


#line 185 
static int ldv_mod_timer_105(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2);


#line 581  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/slab.h"
static void *kzalloc_1(size_t size, gfp_t flags);


#line 1508  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
void skb_queue_tail(struct sk_buff_head *, struct sk_buff *);


#line 1520  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void __skb_unlink(struct sk_buff *skb, struct sk_buff_head *list)
{
  struct sk_buff *next;
  struct sk_buff *prev;
  struct sk_buff *tmp;
  
#line 1524 
  list->qlen -= 1U;
  
#line 1525 
  next = skb->__anonCompField_sk_buff_68.__anonCompField___anonunion_228_67.next;
  
#line 1526 
  prev = skb->__anonCompField_sk_buff_68.__anonCompField___anonunion_228_67.prev;
  
#line 1527 
  tmp = (struct sk_buff *)0;
  
#line 1527 
  skb->__anonCompField_sk_buff_68.__anonCompField___anonunion_228_67.prev = tmp;
  
#line 1527 
  skb->__anonCompField_sk_buff_68.__anonCompField___anonunion_228_67.next = tmp;
  
#line 1528 
  next->__anonCompField_sk_buff_68.__anonCompField___anonunion_228_67.prev = prev;
  
#line 1529 
  prev->__anonCompField_sk_buff_68.__anonCompField___anonunion_228_67.next = next;
  
#line 1530 
  return;
}


#line 1567  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static bool skb_is_nonlinear(struct sk_buff const *skb)
{
  bool __retres;
  
#line 1569 
  __retres = (_Bool)(skb->data_len != 0U);
  
#line 1569 
  return __retres;
}


#line 1761  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static int skb_tailroom(struct sk_buff const *skb)
{
  int __retres;
  unsigned int tmp_0;
  bool tmp;
  
#line 1763 
  tmp = skb_is_nonlinear(skb);
  
#line 1763 
  if ((int)tmp == 0) 
#line 1763 
                     tmp_0 = skb->end - skb->tail; else 
#line 1763 
                                                        tmp_0 = 0U;
  
#line 1763 
  __retres = (int)tmp_0;
  
#line 1763 
  return __retres;
}


#line 4950  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/cfg80211.h"
void cfg80211_tdls_oper_request(struct net_device *, u8 const *, enum nl80211_tdls_operation, u16, gfp_t);


#line 1048  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.h"
int mwifiex_write_data_complete(struct mwifiex_adapter *adapter, struct sk_buff *skb, int aggr, int status);


#line 1108 
u8 mwifiex_band_to_radio_type(u8 band);


#line 1135 
u32 mwifiex_get_supported_rates(struct mwifiex_private *priv, u8 *rates);


#line 1461 
int mwifiex_send_tdls_data_frame(struct mwifiex_private *priv, u8 const *peer, u8 action_code, u8 dialog_token, u16 status_code, u8 const *extra_ies, size_t extra_ies_len);


#line 1465 
int mwifiex_send_tdls_action_frame(struct mwifiex_private *priv, u8 const *peer, u8 action_code, u8 dialog_token, u16 status_code, u8 const *extra_ies, size_t extra_ies_len);


#line 1469 
void mwifiex_process_tdls_action_frame(struct mwifiex_private *priv, u8 *buf, int len);


#line 1471 
int mwifiex_tdls_oper(struct mwifiex_private *priv, u8 const *peer, u8 action);


#line 1472 
int mwifiex_get_tdls_link_status(struct mwifiex_private *priv, u8 const *mac);


#line 1475 
void mwifiex_disable_all_tdls_links(struct mwifiex_private *priv);


#line 1476 
bool mwifiex_is_bss_in_11ac_mode(struct mwifiex_private *priv);


#line 1477 
u8 mwifiex_get_center_freq_index(struct mwifiex_private *priv, u8 band, u32 pri_chan, u8 chan_bw);


#line 1482 
void mwifiex_flush_auto_tdls_list(struct mwifiex_private *priv);


#line 1483 
void mwifiex_auto_tdls_update_peer_status(struct mwifiex_private *priv, u8 const *mac, u8 link_status);


#line 1487 
void mwifiex_check_auto_tdls(unsigned long context);


#line 1488 
void mwifiex_add_auto_tdls_peer(struct mwifiex_private *priv, u8 const *mac);


#line 1489 
void mwifiex_setup_auto_tdls_timer(struct mwifiex_private *priv);


#line 1490 
void mwifiex_clean_auto_tdls(struct mwifiex_private *priv);


#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/wmm.h"
static u8 const tos_to_tid_inv[8U] = {(unsigned char)2U, (unsigned char)0U, (unsigned char)1U, (unsigned char)3U, (unsigned char)4U, (unsigned char)5U, (unsigned char)6U, (unsigned char)7U};

#line 126 
struct mwifiex_ra_list_tbl *mwifiex_wmm_get_queue_raptr(struct mwifiex_private *priv, u8 tid, u8 const *ra_addr);


#line 128 
u8 mwifiex_wmm_downgrade_tid(struct mwifiex_private *priv, u32 tid);


#line 75  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11n_rxreorder.h"
void mwifiex_11n_cleanup_reorder_tbl(struct mwifiex_private *priv);


#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11n.h"
int mwifiex_fill_cap_info(struct mwifiex_private *priv, u8 radio_type, struct ieee80211_ht_cap *ht_cap);


#line 44 
void mwifiex_11n_delete_all_tx_ba_stream_tbl(struct mwifiex_private *priv);


#line 66 
u8 mwifiex_get_sec_chan_offset(int chan);


#line 43  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11ac.h"
void mwifiex_fill_vht_cap_tlv(struct mwifiex_private *priv, struct ieee80211_vht_cap *vht_cap, u8 bands);


#line 29  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/tdls.c"
static void mwifiex_restore_tdls_packets(struct mwifiex_private *priv, u8 const *mac, u8 status)
{
  struct mwifiex_ra_list_tbl *ra_list;
  struct list_head *tid_list;
  struct sk_buff *skb;
  struct sk_buff *tmp;
  struct mwifiex_txinfo *tx_info;
  unsigned long flags;
  u32 tid;
  u8 tid_down;
  int tmp_1;
  bool tmp_0;
  int tmp_4;
  
#line 40 
  if (((priv->adapter)->debug_mask & 8U) != 0U) {
    
#line 40 
    if ((priv->adapter)->dev != (struct device *)0) 
#line 40 
                                                    _dev_info((struct device const *)(priv->adapter)->dev,"%s: %pM\n","mwifiex_restore_tdls_packets",mac); else ;
  }
  else ;
  
#line 41 
  ldv___ldv_spin_lock_78_1(& priv->wmm.ra_list_spinlock);
  
#line 43 
  skb = priv->tdls_txq.next;
  
#line 43 
  tmp = skb->__anonCompField_sk_buff_68.__anonCompField___anonunion_228_67.next;
  
#line 43 
  goto ldv_61663;
  ldv_61662: 
#line 44 
  ;
  
#line 44 
  tmp_0 = ether_addr_equal(mac,(u8 const *)skb->data);
  
#line 44 
  if (tmp_0) 
#line 44 
             tmp_1 = 0; else 
#line 44 
                             tmp_1 = 1;
  
#line 44 
  if (tmp_1) 
#line 45 
             goto ldv_61659; else ;
  
#line 47 
  __skb_unlink(skb,& priv->tdls_txq);
  
#line 48 
  tx_info = MWIFIEX_SKB_TXCB(skb);
  
#line 49 
  tid = skb->priority;
  
#line 50 
  tid_down = mwifiex_wmm_downgrade_tid(priv,tid);
  
#line 52 
  if ((unsigned int)status == 2U) {
    
#line 53 
    ra_list = mwifiex_wmm_get_queue_raptr(priv,(unsigned char)((int)((unsigned char)tid)),mac);
    
#line 54 
    ra_list->tdls_link = (_Bool)1;
    
#line 55 
    tx_info->flags = (unsigned char)((unsigned int)tx_info->flags | 4U);
  }
  else {
    int tmp_3;
    
#line 57 
    tid_list = & priv->wmm.tid_tbl_ptr[(int)tid_down].ra_list;
    
#line 58 
    tmp_3 = list_empty((struct list_head const *)tid_list);
    
#line 58 
    if (tmp_3 == 0) {
      struct mwifiex_ra_list_tbl *tmp_2;
      {
        
#line 59 
        struct list_head const *__mptr = (struct list_head const *)tid_list->next;
        
#line 59 
        tmp_2 = (struct mwifiex_ra_list_tbl *)__mptr;
      }
      
#line 59 
      ra_list = tmp_2;
    }
    else 
#line 62 
         ra_list = (struct mwifiex_ra_list_tbl *)0;
    
#line 63 
    tx_info->flags = (unsigned char)((unsigned int)tx_info->flags & 251U);
  }
  
#line 66 
  if (ra_list == (struct mwifiex_ra_list_tbl *)0) {
    
#line 67 
    mwifiex_write_data_complete(priv->adapter,skb,0,-1);
    
#line 68 
    goto ldv_61659;
  }
  else ;
  
#line 71 
  skb_queue_tail(& ra_list->skb_head,skb);
  
#line 73 
  ra_list->ba_pkt_count = (u16)((int)ra_list->ba_pkt_count + 1);
  
#line 74 
  ra_list->total_pkt_count = (u16)((int)ra_list->total_pkt_count + 1);
  
#line 76 
  tmp_4 = atomic_read((atomic_t const *)(& priv->wmm.highest_queued_prio));
  
#line 76 
  ;
  
#line 76 
  if (tmp_4 < (int)tos_to_tid_inv[(int)tid_down]) 
#line 78 
                                                  atomic_set(& priv->wmm.highest_queued_prio,(int)tos_to_tid_inv[(int)tid_down]); else ;
  
#line 81 
  atomic_inc_2(& priv->wmm.tx_pkts_queued);
  ldv_61659: 
#line 82 
  ;
  
#line 43 
  skb = tmp;
  
#line 43 
  tmp = skb->__anonCompField_sk_buff_68.__anonCompField___anonunion_228_67.next;
  ldv_61663: 
#line 44 
  ;
  
#line 43 
  if ((struct sk_buff *)(& priv->tdls_txq) != skb) 
#line 45 
                                                   goto ldv_61662; else 
                                                                    
#line 48 
                                                                    goto ldv_61664;
  ldv_61664: 
#line 49 
  ;
  
#line 84 
  ldv_spin_unlock_irqrestore_79_1(& priv->wmm.ra_list_spinlock,flags);
  
#line 85 
  return;
}


#line 88  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/tdls.c"
static void mwifiex_hold_tdls_packets(struct mwifiex_private *priv, u8 const *mac)
{
  struct mwifiex_ra_list_tbl *ra_list;
  struct list_head *ra_list_head;
  struct sk_buff *skb;
  struct sk_buff *tmp;
  unsigned long flags;
  int i;
  int tmp_4;
  
#line 97 
  if (((priv->adapter)->debug_mask & 8U) != 0U) {
    
#line 97 
    if ((priv->adapter)->dev != (struct device *)0) 
#line 97 
                                                    _dev_info((struct device const *)(priv->adapter)->dev,"%s: %pM\n","mwifiex_hold_tdls_packets",mac); else ;
  }
  else ;
  
#line 98 
  ldv___ldv_spin_lock_80_0(& priv->wmm.ra_list_spinlock);
  
#line 100 
  i = 0;
  
#line 100 
  goto ldv_61688;
  ldv_61687: 
#line 101 
  ;
  
#line 101 
  tmp_4 = list_empty((struct list_head const *)(& priv->wmm.tid_tbl_ptr[i].ra_list));
  
#line 101 
  if (tmp_4 == 0) {
    struct mwifiex_ra_list_tbl *tmp_0;
    int tmp_2;
    bool tmp_1;
    struct mwifiex_ra_list_tbl *tmp_3;
    
#line 102 
    ra_list_head = & priv->wmm.tid_tbl_ptr[i].ra_list;
    {
      
#line 103 
      struct list_head const *__mptr = (struct list_head const *)ra_list_head->next;
      
#line 103 
      tmp_0 = (struct mwifiex_ra_list_tbl *)__mptr;
    }
    
#line 103 
    ra_list = tmp_0;
    
#line 103 
    goto ldv_61685;
    ldv_61684: 
#line 104 
    ;
    
#line 104 
    skb = ra_list->skb_head.next;
    
#line 104 
    tmp = skb->__anonCompField_sk_buff_68.__anonCompField___anonunion_228_67.next;
    
#line 104 
    goto ldv_61682;
    ldv_61681: 
#line 105 
    ;
    
#line 106 
    tmp_1 = ether_addr_equal(mac,(u8 const *)skb->data);
    
#line 106 
    if (tmp_1) 
#line 106 
               tmp_2 = 0; else 
#line 106 
                               tmp_2 = 1;
    
#line 106 
    if (tmp_2) 
#line 107 
               goto ldv_61680; else ;
    
#line 108 
    __skb_unlink(skb,& ra_list->skb_head);
    
#line 109 
    atomic_dec_1(& priv->wmm.tx_pkts_queued);
    
#line 110 
    ra_list->total_pkt_count = (u16)((int)ra_list->total_pkt_count - 1);
    
#line 111 
    skb_queue_tail(& priv->tdls_txq,skb);
    ldv_61680: 
#line 112 
    ;
    
#line 104 
    skb = tmp;
    
#line 104 
    tmp = skb->__anonCompField_sk_buff_68.__anonCompField___anonunion_228_67.next;
    ldv_61682: 
#line 105 
    ;
    
#line 104 
    if ((struct sk_buff *)(& ra_list->skb_head) != skb) 
#line 106 
                                                        goto ldv_61681; else 
                                                                    
#line 109 
                                                                    goto ldv_61683;
    ldv_61683: 
#line 110 
    ;
    {
      
#line 103 
      struct list_head const *__mptr_0 = (struct list_head const *)ra_list->list.next;
      
#line 103 
      tmp_3 = (struct mwifiex_ra_list_tbl *)__mptr_0;
    }
    
#line 103 
    ra_list = tmp_3;
    ldv_61685: 
#line 105 
    ;
    
#line 103 
    if (& ra_list->list != ra_list_head) 
#line 105 
                                         goto ldv_61684; else 
#line 108 
                                                              goto ldv_61686;
    ldv_61686: 
#line 109 
    ;
  }
  else ;
  
#line 100 
  i += 1;
  ldv_61688: 
#line 101 
  ;
  
#line 100 
  if (i <= 7) 
#line 102 
              goto ldv_61687; else 
#line 105 
                                   goto ldv_61689;
  ldv_61689: 
#line 106 
  ;
  
#line 117 
  ldv_spin_unlock_irqrestore_81_1(& priv->wmm.ra_list_spinlock,flags);
  
#line 118 
  return;
}


#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/tdls.c"
static int mwifiex_tdls_append_rates_ie(struct mwifiex_private *priv, struct sk_buff *skb)
{
  int __retres;
  u8 rates[14U];
  u8 *pos;
  u16 rates_size;
  u16 supp_rates_size;
  u16 ext_rates_size;
  u32 tmp;
  int tmp_1;
  int tmp_2;
  u8 *tmp_4;
  u8 *tmp_5;
  
#line 129 
  memset((void *)(& rates),0,14UL);
  
#line 130 
  tmp = mwifiex_get_supported_rates(priv,(u8 *)(& rates));
  
#line 130 
  rates_size = (unsigned short)tmp;
  {
    int tmp_0;
    
#line 132 
    u16 __min1 = rates_size;
    
#line 132 
    u16 __min2 = (unsigned short)8U;
    
#line 132 
    if ((int)__min1 < (int)__min2) 
#line 132 
                                   tmp_0 = (int)__min1; else 
#line 132 
                                                             tmp_0 = (int)__min2;
    
#line 132 
    tmp_1 = tmp_0;
  }
  
#line 132 
  supp_rates_size = (unsigned short)tmp_1;
  
#line 134 
  tmp_2 = skb_tailroom((struct sk_buff const *)skb);
  
#line 134 
  ;
  
#line 134 
  if (tmp_2 < (int)rates_size + 4) {
    
#line 135 
    if (((priv->adapter)->debug_mask & 4U) != 0U) {
      
#line 135 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 135 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"Insuffient space while adding rates\n"); else ;
    }
    else ;
    
#line 137 
    __retres = -12;
    
#line 137 
    goto return_label;
  }
  else ;
  
#line 140 
  pos = skb_put(skb,(unsigned int)((int)supp_rates_size + 2));
  
#line 141 
  tmp_4 = pos;
  
#line 141 
  pos += 1;
  
#line 141 
  *tmp_4 = (unsigned char)1U;
  
#line 142 
  tmp_5 = pos;
  
#line 142 
  pos += 1;
  
#line 142 
  *tmp_5 = (unsigned char)supp_rates_size;
  
#line 143 
  memcpy((void *)pos,(void const *)(& rates),(unsigned long)supp_rates_size);
  
#line 145 
  if ((unsigned int)rates_size > 8U) {
    u8 *tmp_7;
    u8 *tmp_8;
    
#line 146 
    ext_rates_size = (unsigned short)((unsigned int)rates_size + 65528U);
    
#line 147 
    pos = skb_put(skb,(unsigned int)((int)ext_rates_size + 2));
    
#line 148 
    tmp_7 = pos;
    
#line 148 
    pos += 1;
    
#line 148 
    *tmp_7 = (unsigned char)50U;
    
#line 149 
    tmp_8 = pos;
    
#line 149 
    pos += 1;
    
#line 149 
    *tmp_8 = (unsigned char)ext_rates_size;
    
#line 150 
    memcpy((void *)pos,(void const *)(& rates) + 8U,(unsigned long)ext_rates_size);
  }
  else ;
  
#line 154 
  __retres = 0;
  return_label: 
#line 154 
                return __retres;
}


#line 157  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/tdls.c"
static void mwifiex_tdls_add_aid(struct mwifiex_private *priv, struct sk_buff *skb)
{
  struct ieee_types_assoc_rsp *assoc_rsp;
  u8 *pos;
  u8 *tmp_0;
  u8 *tmp_1;
  u8 *tmp_2;
  
#line 163 
  assoc_rsp = (struct ieee_types_assoc_rsp *)(& priv->assoc_rsp_buf);
  
#line 164 
  pos = skb_put(skb,4U);
  
#line 165 
  tmp_0 = pos;
  
#line 165 
  pos += 1;
  
#line 165 
  *tmp_0 = (unsigned char)197U;
  
#line 166 
  tmp_1 = pos;
  
#line 166 
  pos += 1;
  
#line 166 
  *tmp_1 = (unsigned char)2U;
  
#line 167 
  tmp_2 = pos;
  
#line 167 
  pos += 1;
  
#line 167 
  *tmp_2 = (unsigned char)assoc_rsp->a_id;
  
#line 169 
  return;
}


#line 172  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/tdls.c"
static int mwifiex_tdls_add_vht_capab(struct mwifiex_private *priv, struct sk_buff *skb)
{
  int __retres;
  struct ieee80211_vht_cap vht_cap;
  u8 *pos;
  u8 *tmp_0;
  u8 *tmp_1;
  
#line 178 
  pos = skb_put(skb,14U);
  
#line 179 
  tmp_0 = pos;
  
#line 179 
  pos += 1;
  
#line 179 
  *tmp_0 = (unsigned char)191U;
  
#line 180 
  tmp_1 = pos;
  
#line 180 
  pos += 1;
  
#line 180 
  *tmp_1 = (unsigned char)12U;
  
#line 182 
  memset((void *)(& vht_cap),0,12UL);
  
#line 184 
  mwifiex_fill_vht_cap_tlv(priv,& vht_cap,(unsigned char)((int)priv->curr_bss_params.band));
  
#line 185 
  memcpy((void *)pos,(void const *)(& vht_cap),12UL);
  
#line 187 
  __retres = 0;
  
#line 187 
  return __retres;
}


#line 191  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/tdls.c"
static int mwifiex_tdls_add_ht_oper(struct mwifiex_private *priv, u8 const *mac, u8 vht_enabled, struct sk_buff *skb)
{
  int __retres;
  struct ieee80211_ht_operation *ht_oper;
  struct mwifiex_sta_node *sta_ptr;
  u8 *pos;
  u8 *tmp_0;
  u8 *tmp_1;
  
#line 196 
  struct mwifiex_bssdescriptor *bss_desc = & priv->curr_bss_params.bss_descriptor;
  
#line 200 
  sta_ptr = mwifiex_get_sta_entry(priv,mac);
  
#line 201 
  if ((long)(sta_ptr == (struct mwifiex_sta_node *)0) != 0L) {
    
#line 202 
    if (((priv->adapter)->debug_mask & 4U) != 0U) {
      
#line 202 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 202 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"TDLS peer station not found in list\n"); else ;
    }
    else ;
    
#line 204 
    __retres = -1;
    
#line 204 
    goto return_label;
  }
  else ;
  
#line 207 
  pos = skb_put(skb,24U);
  
#line 208 
  tmp_0 = pos;
  
#line 208 
  pos += 1;
  
#line 208 
  *tmp_0 = (unsigned char)61U;
  
#line 209 
  tmp_1 = pos;
  
#line 209 
  pos += 1;
  
#line 209 
  *tmp_1 = (unsigned char)22U;
  
#line 210 
  ht_oper = (struct ieee80211_ht_operation *)pos;
  
#line 212 
  ht_oper->primary_chan = (unsigned char)bss_desc->channel;
  
#line 215 
  if ((((unsigned long)(priv->adapter)->hw_dot_11n_dev_cap & 131072UL) != 0UL && bss_desc->bcn_ht_cap != (struct ieee80211_ht_cap *)0) && ((unsigned long)(bss_desc->bcn_ht_oper)->ht_param & 4UL) != 0UL) 
    
#line 218 
    ht_oper->ht_param = (bss_desc->bcn_ht_oper)->ht_param; else ;
  
#line 220 
  if ((unsigned int)vht_enabled != 0U) {
    
#line 221 
    ht_oper->ht_param = mwifiex_get_sec_chan_offset((int)bss_desc->channel);
    
#line 223 
    ht_oper->ht_param = (unsigned char)((unsigned int)ht_oper->ht_param | 4U);
  }
  else ;
  
#line 226 
  memcpy((void *)(& sta_ptr->tdls_cap.ht_oper),(void const *)ht_oper,22UL);
  
#line 229 
  __retres = 0;
  return_label: 
#line 229 
                return __retres;
}


#line 232  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/tdls.c"
static int mwifiex_tdls_add_vht_oper(struct mwifiex_private *priv, u8 const *mac, struct sk_buff *skb)
{
  int __retres;
  struct mwifiex_bssdescriptor *bss_desc;
  struct ieee80211_vht_operation *vht_oper;
  struct ieee80211_vht_cap *vht_cap;
  struct mwifiex_sta_node *sta_ptr;
  u8 supp_chwd_set;
  u8 peer_supp_chwd_set;
  u8 *pos;
  u8 ap_supp_chwd_set;
  u8 chan_bw;
  u16 mcs_map_user;
  u16 mcs_map_resp;
  u16 mcs_map_result;
  u16 mcs_user;
  u16 mcs_resp;
  u16 nss;
  u32 usr_vht_cap_info;
  int tmp_0;
  bool tmp;
  u8 *tmp_2;
  u8 *tmp_3;
  int tmp_5;
  
#line 237 
  struct ieee80211_vht_cap *ap_vht_cap = (struct ieee80211_vht_cap *)0;
  
#line 239 
  struct mwifiex_adapter *adapter = priv->adapter;
  
#line 246 
  bss_desc = & priv->curr_bss_params.bss_descriptor;
  
#line 248 
  sta_ptr = mwifiex_get_sta_entry(priv,mac);
  
#line 249 
  if ((long)(sta_ptr == (struct mwifiex_sta_node *)0) != 0L) {
    
#line 250 
    if ((adapter->debug_mask & 4U) != 0U) {
      
#line 250 
      if (adapter->dev != (struct device *)0) 
#line 250 
                                              _dev_info((struct device const *)adapter->dev,"TDLS peer station not found in list\n"); else ;
    }
    else ;
    
#line 252 
    __retres = -1;
    
#line 252 
    goto return_label;
  }
  else ;
  
#line 255 
  tmp = mwifiex_is_bss_in_11ac_mode(priv);
  
#line 255 
  if (tmp) 
#line 255 
           tmp_0 = 0; else 
#line 255 
                           tmp_0 = 1;
  
#line 255 
  if (tmp_0) {
    
#line 256 
    if ((int)sta_ptr->tdls_cap.extcap.ext_capab[7] < 0) {
      
#line 258 
      if ((adapter->debug_mask & 536870912U) != 0U) {
        
#line 258 
        if (adapter->dev != (struct device *)0) 
#line 258 
                                                _dev_info((struct device const *)adapter->dev,"TDLS peer doesn\'t support wider bandwidth\n"); else ;
      }
      else ;
      
#line 260 
      __retres = 0;
      
#line 260 
      goto return_label;
    }
    else ;
  }
  else 
#line 263 
       ap_vht_cap = bss_desc->bcn_vht_cap;
  
#line 266 
  pos = skb_put(skb,7U);
  
#line 267 
  tmp_2 = pos;
  
#line 267 
  pos += 1;
  
#line 267 
  *tmp_2 = (unsigned char)192U;
  
#line 268 
  tmp_3 = pos;
  
#line 268 
  pos += 1;
  
#line 268 
  *tmp_3 = (unsigned char)5U;
  
#line 269 
  vht_oper = (struct ieee80211_vht_operation *)pos;
  
#line 271 
  if (((int)bss_desc->bss_band & 4) != 0) 
#line 272 
                                          usr_vht_cap_info = adapter->usr_dot_11ac_dev_cap_a; else 
                                                                    
#line 274 
                                                                    usr_vht_cap_info = adapter->usr_dot_11ac_dev_cap_bg;
  
#line 277 
  vht_cap = & sta_ptr->tdls_cap.vhtcap;
  
#line 278 
  supp_chwd_set = (unsigned char)((unsigned int)((unsigned char)(usr_vht_cap_info >> 2)) & 3U);
  
#line 279 
  peer_supp_chwd_set = (unsigned char)((unsigned int)((unsigned char)(vht_cap->vht_cap_info >> 2)) & 3U);
  {
    int tmp_4;
    
#line 281 
    u8 __min1 = supp_chwd_set;
    
#line 281 
    u8 __min2 = peer_supp_chwd_set;
    
#line 281 
    if ((int)__min1 < (int)__min2) 
#line 281 
                                   tmp_4 = (int)__min1; else 
#line 281 
                                                             tmp_4 = (int)__min2;
    
#line 281 
    tmp_5 = tmp_4;
  }
  
#line 281 
  supp_chwd_set = (unsigned char)tmp_5;
  
#line 285 
  if (ap_vht_cap != (struct ieee80211_vht_cap *)0 && (int)sta_ptr->tdls_cap.extcap.ext_capab[7] < 0) {
    int tmp_7;
    
#line 287 
    ap_supp_chwd_set = (unsigned char)((unsigned int)((unsigned char)(ap_vht_cap->vht_cap_info >> 2)) & 3U);
    {
      int tmp_6;
      
#line 289 
      u8 __min1_0 = supp_chwd_set;
      
#line 289 
      u8 __min2_0 = ap_supp_chwd_set;
      
#line 289 
      if ((int)__min1_0 < (int)__min2_0) 
#line 289 
                                         tmp_6 = (int)__min1_0; else 
                                                                  
#line 289 
                                                                  tmp_6 = (int)__min2_0;
      
#line 289 
      tmp_7 = tmp_6;
    }
    
#line 289 
    supp_chwd_set = (unsigned char)tmp_7;
  }
  else ;
  
#line 292 
  switch ((int)supp_chwd_set) {
    case 1: 
#line 293 
    ;
    
#line 294 
    vht_oper->chan_width = (unsigned char)1U;
    
#line 295 
    goto ldv_61754;
    case 2: 
#line 296 
    ;
    
#line 297 
    vht_oper->chan_width = (unsigned char)2U;
    
#line 298 
    goto ldv_61754;
    case 3: 
#line 299 
    ;
    
#line 300 
    vht_oper->chan_width = (unsigned char)3U;
    
#line 301 
    goto ldv_61754;
    default: 
#line 302 
    ;
    
#line 303 
    vht_oper->chan_width = (unsigned char)0U;
    
#line 304 
    goto ldv_61754;
  }
  ldv_61754: 
#line 307 
  ;
  
#line 307 
  mcs_map_user = (unsigned short)adapter->usr_dot_11ac_mcs_support;
  
#line 308 
  mcs_map_resp = vht_cap->supp_mcs.rx_mcs_map;
  
#line 309 
  mcs_map_result = (unsigned short)0U;
  
#line 311 
  nss = (unsigned short)1U;
  
#line 311 
  goto ldv_61762;
  ldv_61761: 
#line 312 
  ;
  
#line 312 
  mcs_user = (unsigned short)((unsigned int)((unsigned short)((int)mcs_map_user >> ((int)nss + -1) * 2)) & 3U);
  
#line 313 
  mcs_resp = (unsigned short)((unsigned int)((unsigned short)((int)mcs_map_resp >> ((int)nss + -1) * 2)) & 3U);
  
#line 315 
  if ((unsigned int)mcs_user == 3U || (unsigned int)mcs_resp == 3U) 
#line 317 
                                                                    mcs_map_result = (unsigned short)((3 << ((int)nss + -1) * 2) | (int)mcs_map_result);
  else {
    int tmp_9;
    {
      int tmp_8;
      
#line 320 
      u16 __min1_1 = mcs_user;
      
#line 320 
      u16 __min2_1 = mcs_resp;
      
#line 320 
      if ((int)__min1_1 < (int)__min2_1) 
#line 320 
                                         tmp_8 = (int)__min1_1; else 
                                                                  
#line 320 
                                                                  tmp_8 = (int)__min2_1;
      
#line 320 
      tmp_9 = tmp_8;
    }
    
#line 321 
    mcs_map_result = (unsigned short)(((tmp_9 & 3) << ((int)nss + -1) * 2) | (int)mcs_map_result);
  }
  
#line 311 
  nss = (u16)((int)nss + 1);
  ldv_61762: 
#line 312 
  ;
  
#line 311 
  if ((unsigned int)nss <= 8U) 
#line 313 
                               goto ldv_61761; else 
#line 316 
                                                    goto ldv_61763;
  ldv_61763: 
#line 317 
  ;
  
#line 324 
  vht_oper->basic_mcs_set = mcs_map_result;
  
#line 326 
  switch ((int)vht_oper->chan_width) {
    case 1: 
#line 327 
    ;
    
#line 328 
    chan_bw = (unsigned char)1U;
    
#line 329 
    goto ldv_61765;
    case 2: 
#line 330 
    ;
    
#line 331 
    chan_bw = (unsigned char)2U;
    
#line 332 
    goto ldv_61765;
    case 3: 
#line 333 
    ;
    
#line 334 
    chan_bw = (unsigned char)1U;
    
#line 335 
    goto ldv_61765;
    default: 
#line 336 
    ;
    
#line 337 
    chan_bw = (unsigned char)0U;
    
#line 338 
    goto ldv_61765;
  }
  ldv_61765: 
#line 340 
  ;
  
#line 340 
  vht_oper->center_freq_seg1_idx = mwifiex_get_center_freq_index(priv,(unsigned char)32,bss_desc->channel,(unsigned char)((int)chan_bw));
  
#line 345 
  __retres = 0;
  return_label: 
#line 345 
                return __retres;
}


#line 348  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/tdls.c"
static void mwifiex_tdls_add_ext_capab(struct mwifiex_private *priv, struct sk_buff *skb)
{
  struct ieee_types_extcap *extcap;
  
#line 353 
  extcap = (struct ieee_types_extcap *)skb_put(skb,10U);
  
#line 354 
  extcap->ieee_hdr.element_id = (unsigned char)127U;
  
#line 355 
  extcap->ieee_hdr.len = (unsigned char)8U;
  
#line 356 
  memset((void *)(& extcap->ext_capab),0,8UL);
  
#line 357 
  extcap->ext_capab[4] = (unsigned char)((unsigned int)extcap->ext_capab[4] | 32U);
  
#line 359 
  if ((priv->adapter)->is_hw_11ac_capable != 0U) 
#line 360 
                                                 extcap->ext_capab[7] = (unsigned char)((unsigned int)extcap->ext_capab[7] | 128U); else ;
  
#line 361 
  return;
}


#line 363  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/tdls.c"
static void mwifiex_tdls_add_qos_capab(struct sk_buff *skb)
{
  u8 *tmp_0;
  u8 *tmp_1;
  u8 *tmp_2;
  
#line 365 
  u8 *pos = skb_put(skb,3U);
  
#line 367 
  tmp_0 = pos;
  
#line 367 
  pos += 1;
  
#line 367 
  *tmp_0 = (unsigned char)46U;
  
#line 368 
  tmp_1 = pos;
  
#line 368 
  pos += 1;
  
#line 368 
  *tmp_1 = (unsigned char)1U;
  
#line 369 
  tmp_2 = pos;
  
#line 369 
  pos += 1;
  
#line 369 
  *tmp_2 = (unsigned char)15U;
  
#line 370 
  return;
}


#line 373  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/tdls.c"
static void mwifiex_tdls_add_wmm_param_ie(struct mwifiex_private *priv, struct sk_buff *skb)
{
  struct ieee80211_wmm_param_ie *wmm;
  
#line 376 
  u8 ac_vi[4U] = {(unsigned char)66U, (unsigned char)67U, (unsigned char)94U, (unsigned char)0U};
  
#line 377 
  u8 ac_vo[4U] = {(unsigned char)98U, (unsigned char)50U, (unsigned char)47U, (unsigned char)0U};
  
#line 378 
  u8 ac_be[4U] = {(unsigned char)3U, (unsigned char)164U, (unsigned char)0U, (unsigned char)0U};
  
#line 379 
  u8 ac_bk[4U] = {(unsigned char)39U, (unsigned char)164U, (unsigned char)0U, (unsigned char)0U};
  
#line 381 
  wmm = (struct ieee80211_wmm_param_ie *)skb_put(skb,26U);
  
#line 382 
  memset((void *)wmm,0,26UL);
  
#line 384 
  wmm->element_id = (unsigned char)221U;
  
#line 385 
  wmm->len = (unsigned char)24U;
  
#line 386 
  wmm->oui[0] = (unsigned char)0U;
  
#line 387 
  wmm->oui[1] = (unsigned char)80U;
  
#line 388 
  wmm->oui[2] = (unsigned char)242U;
  
#line 389 
  wmm->oui_type = (unsigned char)2U;
  
#line 390 
  wmm->oui_subtype = (unsigned char)1U;
  
#line 391 
  wmm->version = (unsigned char)1U;
  
#line 392 
  wmm->qos_info = (unsigned char)0U;
  
#line 395 
  memcpy((void *)(& wmm->ac[0]),(void const *)(& ac_be),4UL);
  
#line 396 
  memcpy((void *)(& wmm->ac[1]),(void const *)(& ac_bk),4UL);
  
#line 397 
  memcpy((void *)(& wmm->ac[2]),(void const *)(& ac_vi),4UL);
  
#line 398 
  memcpy((void *)(& wmm->ac[3]),(void const *)(& ac_vo),4UL);
  
#line 399 
  return;
}


#line 402  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/tdls.c"
static void mwifiex_add_wmm_info_ie(struct mwifiex_private *priv, struct sk_buff *skb, u8 qosinfo)
{
  u8 *buf;
  u8 *tmp_0;
  u8 *tmp_1;
  u8 *tmp_2;
  u8 *tmp_3;
  u8 *tmp_4;
  u8 *tmp_5;
  u8 *tmp_6;
  u8 *tmp_7;
  u8 *tmp_8;
  
#line 407 
  buf = skb_put(skb,9U);
  
#line 410 
  tmp_0 = buf;
  
#line 410 
  buf += 1;
  
#line 410 
  *tmp_0 = (unsigned char)221U;
  
#line 411 
  tmp_1 = buf;
  
#line 411 
  buf += 1;
  
#line 411 
  *tmp_1 = (unsigned char)7U;
  
#line 412 
  tmp_2 = buf;
  
#line 412 
  buf += 1;
  
#line 412 
  *tmp_2 = (unsigned char)0U;
  
#line 413 
  tmp_3 = buf;
  
#line 413 
  buf += 1;
  
#line 413 
  *tmp_3 = (unsigned char)80U;
  
#line 414 
  tmp_4 = buf;
  
#line 414 
  buf += 1;
  
#line 414 
  *tmp_4 = (unsigned char)242U;
  
#line 415 
  tmp_5 = buf;
  
#line 415 
  buf += 1;
  
#line 415 
  *tmp_5 = (unsigned char)2U;
  
#line 416 
  tmp_6 = buf;
  
#line 416 
  buf += 1;
  
#line 416 
  *tmp_6 = (unsigned char)0U;
  
#line 417 
  tmp_7 = buf;
  
#line 417 
  buf += 1;
  
#line 417 
  *tmp_7 = (unsigned char)1U;
  
#line 418 
  tmp_8 = buf;
  
#line 418 
  buf += 1;
  
#line 418 
  *tmp_8 = qosinfo;
  
#line 419 
  return;
}


#line 421  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/tdls.c"
static int mwifiex_prep_tdls_encap_data(struct mwifiex_private *priv, u8 const *peer, u8 action_code, u8 dialog_token, u16 status_code, struct sk_buff *skb)
{
  int __retres;
  struct ieee80211_tdls_data *tf;
  int ret;
  u16 capab;
  struct ieee80211_ht_cap *ht_cap;
  u8 radio;
  u8 *pos;
  
#line 432 
  capab = priv->curr_bss_params.bss_descriptor.cap_info_bitmap;
  
#line 434 
  tf = (struct ieee80211_tdls_data *)skb_put(skb,17U);
  
#line 435 
  memcpy((void *)(& tf->da),(void const *)peer,6UL);
  
#line 436 
  memcpy((void *)(& tf->sa),(void const *)(& priv->curr_addr),6UL);
  
#line 437 
  tf->ether_type = (unsigned short)3465U;
  
#line 438 
  tf->payload_type = (unsigned char)2U;
  
#line 440 
  switch ((int)action_code) {
    u8 *tmp_1;
    u8 *tmp_2;
    u8 *tmp_4;
    u8 *tmp_5;
    case 0: 
#line 441 
    ;
    
#line 442 
    tf->category = (unsigned char)12U;
    
#line 443 
    tf->action_code = (unsigned char)0U;
    
#line 444 
    skb_put(skb,3U);
    
#line 445 
    tf->u.setup_req.dialog_token = dialog_token;
    
#line 446 
    tf->u.setup_req.capability = capab;
    
#line 447 
    ret = mwifiex_tdls_append_rates_ie(priv,skb);
    
#line 448 
    if (ret != 0) {
      
#line 449 
      dev_kfree_skb_any(skb);
      
#line 450 
      __retres = ret;
      
#line 450 
      goto return_label;
    }
    else ;
    
#line 453 
    pos = skb_put(skb,28U);
    
#line 454 
    tmp_1 = pos;
    
#line 454 
    pos += 1;
    
#line 454 
    *tmp_1 = (unsigned char)45U;
    
#line 455 
    tmp_2 = pos;
    
#line 455 
    pos += 1;
    
#line 455 
    *tmp_2 = (unsigned char)26U;
    
#line 456 
    ht_cap = (struct ieee80211_ht_cap *)pos;
    
#line 457 
    radio = mwifiex_band_to_radio_type((unsigned char)((int)priv->curr_bss_params.band));
    
#line 458 
    ret = mwifiex_fill_cap_info(priv,(unsigned char)((int)radio),ht_cap);
    
#line 459 
    if (ret != 0) {
      
#line 460 
      dev_kfree_skb_any(skb);
      
#line 461 
      __retres = ret;
      
#line 461 
      goto return_label;
    }
    else ;
    
#line 464 
    if ((priv->adapter)->is_hw_11ac_capable != 0U) {
      
#line 465 
      ret = mwifiex_tdls_add_vht_capab(priv,skb);
      
#line 466 
      if (ret != 0) {
        
#line 467 
        dev_kfree_skb_any(skb);
        
#line 468 
        __retres = ret;
        
#line 468 
        goto return_label;
      }
      else ;
      
#line 470 
      mwifiex_tdls_add_aid(priv,skb);
    }
    else ;
    
#line 473 
    mwifiex_tdls_add_ext_capab(priv,skb);
    
#line 474 
    mwifiex_tdls_add_qos_capab(skb);
    
#line 475 
    mwifiex_add_wmm_info_ie(priv,skb,(unsigned char)0);
    
#line 476 
    goto ldv_61808;
    case 1: 
#line 478 
    ;
    
#line 479 
    tf->category = (unsigned char)12U;
    
#line 480 
    tf->action_code = (unsigned char)1U;
    
#line 481 
    skb_put(skb,5U);
    
#line 482 
    tf->u.setup_resp.status_code = status_code;
    
#line 483 
    tf->u.setup_resp.dialog_token = dialog_token;
    
#line 484 
    tf->u.setup_resp.capability = capab;
    
#line 485 
    ret = mwifiex_tdls_append_rates_ie(priv,skb);
    
#line 486 
    if (ret != 0) {
      
#line 487 
      dev_kfree_skb_any(skb);
      
#line 488 
      __retres = ret;
      
#line 488 
      goto return_label;
    }
    else ;
    
#line 491 
    pos = skb_put(skb,28U);
    
#line 492 
    tmp_4 = pos;
    
#line 492 
    pos += 1;
    
#line 492 
    *tmp_4 = (unsigned char)45U;
    
#line 493 
    tmp_5 = pos;
    
#line 493 
    pos += 1;
    
#line 493 
    *tmp_5 = (unsigned char)26U;
    
#line 494 
    ht_cap = (struct ieee80211_ht_cap *)pos;
    
#line 495 
    radio = mwifiex_band_to_radio_type((unsigned char)((int)priv->curr_bss_params.band));
    
#line 496 
    ret = mwifiex_fill_cap_info(priv,(unsigned char)((int)radio),ht_cap);
    
#line 497 
    if (ret != 0) {
      
#line 498 
      dev_kfree_skb_any(skb);
      
#line 499 
      __retres = ret;
      
#line 499 
      goto return_label;
    }
    else ;
    
#line 502 
    if ((priv->adapter)->is_hw_11ac_capable != 0U) {
      
#line 503 
      ret = mwifiex_tdls_add_vht_capab(priv,skb);
      
#line 504 
      if (ret != 0) {
        
#line 505 
        dev_kfree_skb_any(skb);
        
#line 506 
        __retres = ret;
        
#line 506 
        goto return_label;
      }
      else ;
      
#line 508 
      mwifiex_tdls_add_aid(priv,skb);
    }
    else ;
    
#line 511 
    mwifiex_tdls_add_ext_capab(priv,skb);
    
#line 512 
    mwifiex_tdls_add_qos_capab(skb);
    
#line 513 
    mwifiex_add_wmm_info_ie(priv,skb,(unsigned char)0);
    
#line 514 
    goto ldv_61808;
    case 2: 
#line 516 
    ;
    
#line 517 
    tf->category = (unsigned char)12U;
    
#line 518 
    tf->action_code = (unsigned char)2U;
    
#line 519 
    skb_put(skb,3U);
    
#line 520 
    tf->u.setup_cfm.status_code = status_code;
    
#line 521 
    tf->u.setup_cfm.dialog_token = dialog_token;
    
#line 523 
    mwifiex_tdls_add_wmm_param_ie(priv,skb);
    
#line 524 
    if ((priv->adapter)->is_hw_11ac_capable != 0U) {
      
#line 525 
      ret = mwifiex_tdls_add_vht_oper(priv,peer,skb);
      
#line 526 
      if (ret != 0) {
        
#line 527 
        dev_kfree_skb_any(skb);
        
#line 528 
        __retres = ret;
        
#line 528 
        goto return_label;
      }
      else ;
      
#line 530 
      ret = mwifiex_tdls_add_ht_oper(priv,peer,(unsigned char)1,skb);
      
#line 531 
      if (ret != 0) {
        
#line 532 
        dev_kfree_skb_any(skb);
        
#line 533 
        __retres = ret;
        
#line 533 
        goto return_label;
      }
      else ;
    }
    else {
      
#line 536 
      ret = mwifiex_tdls_add_ht_oper(priv,peer,(unsigned char)0,skb);
      
#line 537 
      if (ret != 0) {
        
#line 538 
        dev_kfree_skb_any(skb);
        
#line 539 
        __retres = ret;
        
#line 539 
        goto return_label;
      }
      else ;
    }
    
#line 542 
    goto ldv_61808;
    case 3: 
#line 544 
    ;
    
#line 545 
    tf->category = (unsigned char)12U;
    
#line 546 
    tf->action_code = (unsigned char)3U;
    
#line 547 
    skb_put(skb,2U);
    
#line 548 
    tf->u.teardown.reason_code = status_code;
    
#line 549 
    goto ldv_61808;
    case 10: 
#line 551 
    ;
    
#line 552 
    tf->category = (unsigned char)12U;
    
#line 553 
    tf->action_code = (unsigned char)10U;
    
#line 554 
    skb_put(skb,1U);
    
#line 555 
    tf->u.discover_req.dialog_token = dialog_token;
    
#line 556 
    goto ldv_61808;
    default: 
#line 557 
    ;
    
#line 558 
    if (((priv->adapter)->debug_mask & 4U) != 0U) {
      
#line 558 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 558 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"Unknown TDLS frame type.\n"); else ;
    }
    else ;
    
#line 559 
    __retres = -22;
    
#line 559 
    goto return_label;
  }
  ldv_61808: 
#line 562 
  ;
  
#line 562 
  __retres = 0;
  return_label: 
#line 562 
                return __retres;
}


#line 566  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/tdls.c"
static void mwifiex_tdls_add_link_ie(struct sk_buff *skb, u8 const *src_addr, u8 const *peer, u8 const *bssid)
{
  struct ieee80211_tdls_lnkie *lnkid;
  
#line 571 
  lnkid = (struct ieee80211_tdls_lnkie *)skb_put(skb,20U);
  
#line 572 
  lnkid->ie_type = (unsigned char)101U;
  
#line 573 
  lnkid->ie_len = (unsigned char)18U;
  
#line 576 
  memcpy((void *)(& lnkid->bssid),(void const *)bssid,6UL);
  
#line 577 
  memcpy((void *)(& lnkid->init_sta),(void const *)src_addr,6UL);
  
#line 578 
  memcpy((void *)(& lnkid->resp_sta),(void const *)peer,6UL);
  
#line 579 
  return;
}


#line 581  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/tdls.c"
int mwifiex_send_tdls_data_frame(struct mwifiex_private *priv, u8 const *peer, u8 action_code, u8 dialog_token, u16 status_code, u8 const *extra_ies, size_t extra_ies_len)
{
  int __retres;
  struct sk_buff *skb;
  struct mwifiex_txinfo *tx_info;
  int ret;
  u16 skb_len;
  unsigned long tmp_0;
  {
    unsigned long tmp;
    
#line 592 
    unsigned long _max1 = 36UL;
    
#line 592 
    unsigned long _max2 = 22UL;
    
#line 592 
    if (_max1 > _max2) 
#line 592 
                       tmp = _max1; else 
#line 592 
                                         tmp = _max2;
    
#line 592 
    tmp_0 = tmp;
  }
  
#line 591 
  skb_len = (unsigned short)((unsigned int)((int)((unsigned short)tmp_0) + (int)((unsigned short)extra_ies_len)) + 232U);
  
#line 605 
  if ((priv->adapter)->is_hw_11ac_capable != 0U) 
#line 606 
                                                 skb_len = (unsigned short)((unsigned int)skb_len + 25U); else ;
  
#line 610 
  skb = dev_alloc_skb((unsigned int)skb_len);
  
#line 611 
  if (skb == (struct sk_buff *)0) {
    
#line 612 
    if (((priv->adapter)->debug_mask & 4U) != 0U) {
      
#line 612 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 612 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"allocate skb failed for management frame\n"); else ;
    }
    else ;
    
#line 614 
    __retres = -12;
    
#line 614 
    goto return_label;
  }
  else ;
  
#line 616 
  skb_reserve(skb,100);
  
#line 618 
  switch ((int)action_code) {
    case 0: 
#line 619 
    ;
    case 2: 
#line 620 
    ;
    case 3: 
#line 621 
    ;
    case 10: 
#line 622 
    ;
    
#line 623 
    ret = mwifiex_prep_tdls_encap_data(priv,peer,(unsigned char)((int)action_code),(unsigned char)((int)dialog_token),(unsigned short)((int)status_code),skb);
    
#line 626 
    if (ret != 0) {
      
#line 627 
      dev_kfree_skb_any(skb);
      
#line 628 
      __retres = ret;
      
#line 628 
      goto return_label;
    }
    else ;
    
#line 630 
    if (extra_ies_len != 0UL) {
      unsigned char *tmp_1;
      
#line 631 
      ;
      
#line 631 
      ;
      
#line 631 
      tmp_1 = skb_put(skb,(unsigned int)extra_ies_len);
      
#line 631 
      memcpy((void *)tmp_1,(void const *)extra_ies,extra_ies_len);
    }
    else ;
    
#line 633 
    mwifiex_tdls_add_link_ie(skb,(u8 const *)(& priv->curr_addr),peer,(u8 const *)(& priv->cfg_bssid));
    
#line 635 
    goto ldv_61841;
    case 1: 
#line 636 
    ;
    
#line 637 
    ret = mwifiex_prep_tdls_encap_data(priv,peer,(unsigned char)((int)action_code),(unsigned char)((int)dialog_token),(unsigned short)((int)status_code),skb);
    
#line 640 
    if (ret != 0) {
      
#line 641 
      dev_kfree_skb_any(skb);
      
#line 642 
      __retres = ret;
      
#line 642 
      goto return_label;
    }
    else ;
    
#line 644 
    if (extra_ies_len != 0UL) {
      unsigned char *tmp_2;
      
#line 645 
      ;
      
#line 645 
      ;
      
#line 645 
      tmp_2 = skb_put(skb,(unsigned int)extra_ies_len);
      
#line 645 
      memcpy((void *)tmp_2,(void const *)extra_ies,extra_ies_len);
    }
    else ;
    
#line 647 
    mwifiex_tdls_add_link_ie(skb,peer,(u8 const *)(& priv->curr_addr),(u8 const *)(& priv->cfg_bssid));
    
#line 649 
    goto ldv_61841;
  }
  ldv_61841: 
#line 652 
  ;
  
#line 652 
  switch ((int)action_code) {
    case 0: 
#line 653 
    ;
    case 1: 
#line 654 
    ;
    
#line 655 
    skb->priority = 2U;
    
#line 656 
    goto ldv_61845;
    default: 
#line 657 
    ;
    
#line 658 
    skb->priority = 5U;
    
#line 659 
    goto ldv_61845;
  }
  ldv_61845: 
#line 662 
  ;
  
#line 662 
  tx_info = MWIFIEX_SKB_TXCB(skb);
  
#line 663 
  memset((void *)tx_info,0,24UL);
  
#line 664 
  tx_info->bss_num = priv->bss_num;
  
#line 665 
  tx_info->bss_type = priv->bss_type;
  
#line 667 
  __net_timestamp(skb);
  
#line 668 
  mwifiex_queue_tx_pkt(priv,skb);
  
#line 670 
  __retres = 0;
  return_label: 
#line 670 
                return __retres;
}


#line 674  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/tdls.c"
static int mwifiex_construct_tdls_action_frame(struct mwifiex_private *priv, u8 const *peer, u8 action_code, u8 dialog_token, u16 status_code, struct sk_buff *skb)
{
  int __retres;
  struct ieee80211_mgmt *mgmt;
  int ret;
  u16 capab;
  struct ieee80211_ht_cap *ht_cap;
  u8 radio;
  u8 *pos;
  
#line 680 
  u8 bc_addr[6U] = {(unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U};
  
#line 686 
  capab = priv->curr_bss_params.bss_descriptor.cap_info_bitmap;
  
#line 688 
  mgmt = (struct ieee80211_mgmt *)skb_put(skb,24U);
  
#line 690 
  memset((void *)mgmt,0,24UL);
  
#line 691 
  memcpy((void *)(& mgmt->da),(void const *)peer,6UL);
  
#line 692 
  memcpy((void *)(& mgmt->sa),(void const *)(& priv->curr_addr),6UL);
  
#line 693 
  memcpy((void *)(& mgmt->bssid),(void const *)(& priv->cfg_bssid),6UL);
  
#line 694 
  mgmt->frame_control = (unsigned short)208U;
  
#line 698 
  pos = skb_put(skb,6U);
  
#line 700 
  switch ((int)action_code) {
    u8 *tmp_2;
    u8 *tmp_3;
    case 14: 
#line 701 
    ;
    
#line 702 
    skb_put(skb,5U);
    
#line 703 
    mgmt->u.action.category = (unsigned char)4U;
    
#line 704 
    mgmt->u.action.u.tdls_discover_resp.action_code = (unsigned char)14U;
    
#line 706 
    mgmt->u.action.u.tdls_discover_resp.dialog_token = dialog_token;
    
#line 708 
    mgmt->u.action.u.tdls_discover_resp.capability = capab;
    
#line 711 
    memmove((void *)(pos + 6U),(void const *)(& mgmt->u.action.category),4UL);
    
#line 714 
    memcpy((void *)pos,(void const *)(& bc_addr),6UL);
    
#line 716 
    ret = mwifiex_tdls_append_rates_ie(priv,skb);
    
#line 717 
    if (ret != 0) {
      
#line 718 
      dev_kfree_skb_any(skb);
      
#line 719 
      __retres = ret;
      
#line 719 
      goto return_label;
    }
    else ;
    
#line 722 
    pos = skb_put(skb,28U);
    
#line 723 
    tmp_2 = pos;
    
#line 723 
    pos += 1;
    
#line 723 
    *tmp_2 = (unsigned char)45U;
    
#line 724 
    tmp_3 = pos;
    
#line 724 
    pos += 1;
    
#line 724 
    *tmp_3 = (unsigned char)26U;
    
#line 725 
    ht_cap = (struct ieee80211_ht_cap *)pos;
    
#line 726 
    radio = mwifiex_band_to_radio_type((unsigned char)((int)priv->curr_bss_params.band));
    
#line 727 
    ret = mwifiex_fill_cap_info(priv,(unsigned char)((int)radio),ht_cap);
    
#line 728 
    if (ret != 0) {
      
#line 729 
      dev_kfree_skb_any(skb);
      
#line 730 
      __retres = ret;
      
#line 730 
      goto return_label;
    }
    else ;
    
#line 733 
    if ((priv->adapter)->is_hw_11ac_capable != 0U) {
      
#line 734 
      ret = mwifiex_tdls_add_vht_capab(priv,skb);
      
#line 735 
      if (ret != 0) {
        
#line 736 
        dev_kfree_skb_any(skb);
        
#line 737 
        __retres = ret;
        
#line 737 
        goto return_label;
      }
      else ;
      
#line 739 
      mwifiex_tdls_add_aid(priv,skb);
    }
    else ;
    
#line 742 
    mwifiex_tdls_add_ext_capab(priv,skb);
    
#line 743 
    mwifiex_tdls_add_qos_capab(skb);
    
#line 744 
    goto ldv_61863;
    default: 
#line 745 
    ;
    
#line 746 
    if (((priv->adapter)->debug_mask & 4U) != 0U) {
      
#line 746 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 746 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"Unknown TDLS action frame type\n"); else ;
    }
    else ;
    
#line 747 
    __retres = -22;
    
#line 747 
    goto return_label;
  }
  ldv_61863: 
#line 750 
  ;
  
#line 750 
  __retres = 0;
  return_label: 
#line 750 
                return __retres;
}


#line 753  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/tdls.c"
int mwifiex_send_tdls_action_frame(struct mwifiex_private *priv, u8 const *peer, u8 action_code, u8 dialog_token, u16 status_code, u8 const *extra_ies, size_t extra_ies_len)
{
  int __retres;
  struct sk_buff *skb;
  struct mwifiex_txinfo *tx_info;
  u8 *pos;
  u32 pkt_type;
  u32 tx_control;
  u16 pkt_len;
  u16 skb_len;
  unsigned long tmp_0;
  int tmp_2;
  {
    unsigned long tmp;
    
#line 765 
    unsigned long _max1 = 36UL;
    
#line 765 
    unsigned long _max2 = 22UL;
    
#line 765 
    if (_max1 > _max2) 
#line 765 
                       tmp = _max1; else 
#line 765 
                                         tmp = _max2;
    
#line 765 
    tmp_0 = tmp;
  }
  
#line 764 
  skb_len = (unsigned short)((unsigned int)((int)((unsigned short)tmp_0) + (int)((unsigned short)extra_ies_len)) + 212U);
  
#line 778 
  if ((priv->adapter)->is_hw_11ac_capable != 0U) 
#line 779 
                                                 skb_len = (unsigned short)((unsigned int)skb_len + 25U); else ;
  
#line 783 
  skb = dev_alloc_skb((unsigned int)skb_len);
  
#line 784 
  if (skb == (struct sk_buff *)0) {
    
#line 785 
    if (((priv->adapter)->debug_mask & 4U) != 0U) {
      
#line 785 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 785 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"allocate skb failed for management frame\n"); else ;
    }
    else ;
    
#line 787 
    __retres = -12;
    
#line 787 
    goto return_label;
  }
  else ;
  
#line 790 
  skb_reserve(skb,100);
  
#line 792 
  pkt_type = 229U;
  
#line 793 
  tx_control = 0U;
  
#line 794 
  pos = skb_put(skb,10U);
  
#line 795 
  memset((void *)pos,0,10UL);
  
#line 796 
  memcpy((void *)pos,(void const *)(& pkt_type),4UL);
  
#line 797 
  memcpy((void *)(pos + 4U),(void const *)(& tx_control),4UL);
  
#line 799 
  tmp_2 = mwifiex_construct_tdls_action_frame(priv,peer,(unsigned char)((int)action_code),(unsigned char)((int)dialog_token),(unsigned short)((int)status_code),skb);
  
#line 799 
  if (tmp_2 != 0) {
    
#line 802 
    dev_kfree_skb_any(skb);
    
#line 803 
    __retres = -22;
    
#line 803 
    goto return_label;
  }
  else ;
  
#line 806 
  if (extra_ies_len != 0UL) {
    unsigned char *tmp_3;
    
#line 807 
    ;
    
#line 807 
    ;
    
#line 807 
    tmp_3 = skb_put(skb,(unsigned int)extra_ies_len);
    
#line 807 
    memcpy((void *)tmp_3,(void const *)extra_ies,extra_ies_len);
  }
  else ;
  
#line 811 
  mwifiex_tdls_add_link_ie(skb,peer,(u8 const *)(& priv->curr_addr),(u8 const *)(& priv->cfg_bssid));
  
#line 814 
  skb->priority = 5U;
  
#line 816 
  tx_info = MWIFIEX_SKB_TXCB(skb);
  
#line 817 
  memset((void *)tx_info,0,24UL);
  
#line 818 
  tx_info->bss_num = priv->bss_num;
  
#line 819 
  tx_info->bss_type = priv->bss_type;
  
#line 820 
  tx_info->flags = (unsigned char)((unsigned int)tx_info->flags | 4U);
  
#line 822 
  pkt_len = (unsigned short)((unsigned int)((unsigned short)skb->len) + 65526U);
  
#line 823 
  memcpy((void *)(skb->data + 8U),(void const *)(& pkt_len),2UL);
  
#line 825 
  __net_timestamp(skb);
  
#line 826 
  mwifiex_queue_tx_pkt(priv,skb);
  
#line 828 
  __retres = 0;
  return_label: 
#line 828 
                return __retres;
}


#line 834  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/tdls.c"
void mwifiex_process_tdls_action_frame(struct mwifiex_private *priv, u8 *buf, int len)
{
  struct mwifiex_sta_node *sta_ptr;
  u8 *peer;
  u8 *pos;
  u8 *end;
  u8 i;
  u8 action;
  u8 basic;
  
#line 840 
  __le16 cap = (unsigned short)0U;
  
#line 841 
  int ie_len = 0;
  
#line 843 
  if ((unsigned int)len <= 16U) 
#line 844 
                                goto return_label; else ;
  
#line 845 
  if ((unsigned int)*(buf + 14U) != 2U) 
#line 846 
                                        goto return_label; else ;
  
#line 847 
  if ((unsigned int)*(buf + 15U) != 12U) 
#line 848 
                                         goto return_label; else ;
  
#line 850 
  peer = buf + 6U;
  
#line 851 
  action = *(buf + 16U);
  
#line 852 
  if (((priv->adapter)->debug_mask & 8U) != 0U) {
    
#line 852 
    if ((priv->adapter)->dev != (struct device *)0) 
#line 852 
                                                    _dev_info((struct device const *)(priv->adapter)->dev,"rx:tdls action: peer=%pM, action=%d\n",peer,(int)action); else ;
  }
  else ;
  
#line 855 
  switch ((int)action) {
    case 0: 
#line 856 
    ;
    
#line 857 
    if ((unsigned int)len <= 19U) 
#line 858 
                                  goto return_label; else ;
    
#line 860 
    pos = buf + 18U;
    
#line 862 
    cap = *((u16 *)pos);
    
#line 863 
    ie_len = (int)((unsigned int)len + 4294967276U);
    
#line 864 
    pos += 2U;
    
#line 865 
    goto ldv_61899;
    case 1: 
#line 867 
    ;
    
#line 868 
    if ((unsigned int)len <= 21U) 
#line 869 
                                  goto return_label; else ;
    
#line 871 
    pos = buf + 20U;
    
#line 872 
    cap = *((u16 *)pos);
    
#line 873 
    ie_len = (int)((unsigned int)len + 4294967274U);
    
#line 874 
    pos += 2U;
    
#line 875 
    goto ldv_61899;
    case 2: 
#line 877 
    ;
    
#line 878 
    if ((unsigned int)len <= 19U) 
#line 879 
                                  goto return_label; else ;
    
#line 880 
    pos = buf + 20U;
    
#line 881 
    ie_len = (int)((unsigned int)len + 4294967276U);
    
#line 882 
    goto ldv_61899;
    default: 
#line 883 
    ;
    
#line 884 
    if (((priv->adapter)->debug_mask & 4U) != 0U) {
      
#line 884 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 884 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"Unknown TDLS frame type.\n"); else ;
    }
    else ;
    
#line 885 
    goto return_label;
  }
  ldv_61899: 
#line 888 
  ;
  
#line 888 
  sta_ptr = mwifiex_add_sta_entry(priv,(u8 const *)peer);
  
#line 889 
  if (sta_ptr == (struct mwifiex_sta_node *)0) 
#line 890 
                                               goto return_label; else ;
  
#line 892 
  sta_ptr->tdls_cap.capab = cap;
  
#line 894 
  end = pos + ie_len;
  
#line 894 
  goto ldv_61930;
  ldv_61929: 
#line 895 
  ;
  
#line 895 
  if (pos + ((unsigned int)*(pos + 1U) + 2U) > end) 
#line 896 
                                                    goto ldv_61903; else ;
  
#line 898 
  switch ((int)*pos) {
    int tmp_0;
    int tmp_2;
    case 1: 
#line 899 
    ;
    
#line 900 
    sta_ptr->tdls_cap.rates_len = *(pos + 1U);
    
#line 901 
    i = (unsigned char)0U;
    
#line 901 
    goto ldv_61906;
    ldv_61905: 
#line 902 
    ;
    
#line 902 
    sta_ptr->tdls_cap.rates[(int)i] = *(pos + ((unsigned int)i + 2U));
    
#line 901 
    i = (u8)((int)i + 1);
    ldv_61906: 
#line 902 
    ;
    
#line 901 
    if ((int)*(pos + 1U) > (int)i) 
#line 903 
                                   goto ldv_61905; else 
#line 906 
                                                        goto ldv_61907;
    ldv_61907: 
#line 907 
    ;
    
#line 903 
    goto ldv_61908;
    case 50: 
#line 905 
    ;
    
#line 906 
    basic = sta_ptr->tdls_cap.rates_len;
    
#line 907 
    i = (unsigned char)0U;
    
#line 907 
    goto ldv_61911;
    ldv_61910: 
#line 908 
    ;
    
#line 908 
    sta_ptr->tdls_cap.rates[(int)basic + (int)i] = *(pos + ((unsigned int)i + 2U));
    
#line 907 
    i = (u8)((int)i + 1);
    ldv_61911: 
#line 908 
    ;
    
#line 907 
    if ((int)*(pos + 1U) > (int)i) 
#line 909 
                                   goto ldv_61910; else 
#line 912 
                                                        goto ldv_61912;
    ldv_61912: 
#line 913 
    ;
    
#line 909 
    sta_ptr->tdls_cap.rates_len = (unsigned char)((int)sta_ptr->tdls_cap.rates_len + (int)*(pos + 1U));
    
#line 910 
    goto ldv_61908;
    case 45: 
#line 911 
    ;
    
#line 912 
    memcpy((void *)(& sta_ptr->tdls_cap.ht_capb),(void const *)pos,26UL);
    
#line 914 
    sta_ptr->is_11n_enabled = (unsigned char)1U;
    
#line 915 
    goto ldv_61908;
    case 61: 
#line 916 
    ;
    
#line 917 
    memcpy((void *)(& sta_ptr->tdls_cap.ht_oper),(void const *)pos,22UL);
    
#line 919 
    goto ldv_61908;
    case 72: 
#line 920 
    ;
    
#line 921 
    sta_ptr->tdls_cap.coex_2040 = *(pos + 2U);
    
#line 922 
    goto ldv_61908;
    case 127: 
#line 923 
    ;
    {
      int tmp;
      
#line 926 
      u8 __min1 = *(pos + 1U);
      
#line 926 
      u8 __min2 = (unsigned char)8U;
      
#line 926 
      if ((int)__min1 < (int)__min2) 
#line 926 
                                     tmp = (int)__min1; else 
#line 926 
                                                             tmp = (int)__min2;
      
#line 926 
      tmp_0 = tmp;
    }
    
#line 924 
    ;
    
#line 924 
    ;
    
#line 924 
    memcpy((void *)(& sta_ptr->tdls_cap.extcap),(void const *)pos,(unsigned long)tmp_0 + 2UL);
    
#line 927 
    goto ldv_61908;
    case 48: 
#line 928 
    ;
    {
      int tmp_1;
      
#line 931 
      u8 __min1_0 = *(pos + 1U);
      
#line 931 
      u8 __min2_0 = (unsigned char)254U;
      
#line 931 
      if ((int)__min1_0 < (int)__min2_0) 
#line 931 
                                         tmp_1 = (int)__min1_0; else 
                                                                  
#line 931 
                                                                  tmp_1 = (int)__min2_0;
      
#line 931 
      tmp_2 = tmp_1;
    }
    
#line 929 
    ;
    
#line 929 
    ;
    
#line 929 
    memcpy((void *)(& sta_ptr->tdls_cap.rsn_ie),(void const *)pos,(unsigned long)tmp_2 + 2UL);
    
#line 933 
    goto ldv_61908;
    case 46: 
#line 934 
    ;
    
#line 935 
    sta_ptr->tdls_cap.qos_info = *(pos + 2U);
    
#line 936 
    goto ldv_61908;
    case 192: 
#line 937 
    ;
    
#line 938 
    if ((priv->adapter)->is_hw_11ac_capable != 0U) 
#line 939 
                                                   memcpy((void *)(& sta_ptr->tdls_cap.vhtoper),(void const *)pos,5UL); else ;
    
#line 941 
    goto ldv_61908;
    case 191: 
#line 942 
    ;
    
#line 943 
    if ((priv->adapter)->is_hw_11ac_capable != 0U) {
      
#line 944 
      memcpy((void *)(& sta_ptr->tdls_cap.vhtcap),(void const *)pos,12UL);
      
#line 946 
      sta_ptr->is_11ac_enabled = (unsigned char)1U;
    }
    else ;
    
#line 948 
    goto ldv_61908;
    case 197: 
#line 949 
    ;
    
#line 950 
    if ((priv->adapter)->is_hw_11ac_capable != 0U) 
#line 951 
                                                   sta_ptr->tdls_cap.aid = *((__le16 *)(pos + 2U)); else ;
    default: 
#line 953 
    ;
    
#line 954 
    goto ldv_61908;
  }
  ldv_61908: 
#line 956 
  ;
  
#line 894 
  pos += (int)*(pos + 1U) + 2;
  ldv_61930: 
#line 895 
  ;
  
#line 894 
  if (pos + 1U < end) 
#line 896 
                      goto ldv_61929; else 
#line 899 
                                           goto ldv_61903;
  ldv_61903: 
#line 900 
  ;
  return_label: 
#line 958 
                return;
}


#line 962  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/tdls.c"
static int mwifiex_tdls_process_config_link(struct mwifiex_private *priv, u8 const *peer)
{
  int __retres;
  struct mwifiex_sta_node *sta_ptr;
  struct mwifiex_ds_tdls_oper tdls_oper;
  int tmp;
  
#line 967 
  memset((void *)(& tdls_oper),0,56UL);
  
#line 968 
  sta_ptr = mwifiex_get_sta_entry(priv,peer);
  
#line 970 
  if (sta_ptr == (struct mwifiex_sta_node *)0 || (unsigned int)sta_ptr->tdls_status == 3U) {
    
#line 971 
    if (((priv->adapter)->debug_mask & 4U) != 0U) {
      
#line 971 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 971 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"link absent for peer %pM; cannot config\n",peer); else ;
    }
    else ;
    
#line 973 
    __retres = -22;
    
#line 973 
    goto return_label;
  }
  else ;
  
#line 976 
  memcpy((void *)(& tdls_oper.peer_mac),(void const *)peer,6UL);
  
#line 977 
  tdls_oper.tdls_action = (unsigned short)3U;
  
#line 978 
  tmp = mwifiex_send_cmd(priv,(unsigned short)290,(unsigned short)1,0U,(void *)(& tdls_oper),(_Bool)1);
  
#line 978 
  __retres = tmp;
  return_label: 
#line 978 
                return __retres;
}


#line 983  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/tdls.c"
static int mwifiex_tdls_process_create_link(struct mwifiex_private *priv, u8 const *peer)
{
  int __retres;
  struct mwifiex_sta_node *sta_ptr;
  struct mwifiex_ds_tdls_oper tdls_oper;
  int tmp;
  
#line 988 
  memset((void *)(& tdls_oper),0,56UL);
  
#line 989 
  sta_ptr = mwifiex_get_sta_entry(priv,peer);
  
#line 991 
  if (sta_ptr != (struct mwifiex_sta_node *)0 && (unsigned int)sta_ptr->tdls_status == 1U) {
    
#line 992 
    if (((priv->adapter)->debug_mask & 536870912U) != 0U) {
      
#line 992 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 992 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"Setup already in progress for peer %pM\n",peer); else ;
    }
    else ;
    
#line 994 
    __retres = 0;
    
#line 994 
    goto return_label;
  }
  else ;
  
#line 997 
  sta_ptr = mwifiex_add_sta_entry(priv,peer);
  
#line 998 
  if (sta_ptr == (struct mwifiex_sta_node *)0) {
    
#line 999 
    __retres = -12;
    
#line 999 
    goto return_label;
  }
  else ;
  
#line 1001 
  sta_ptr->tdls_status = (unsigned char)1U;
  
#line 1002 
  mwifiex_hold_tdls_packets(priv,peer);
  
#line 1003 
  memcpy((void *)(& tdls_oper.peer_mac),(void const *)peer,6UL);
  
#line 1004 
  tdls_oper.tdls_action = (unsigned short)2U;
  
#line 1005 
  tmp = mwifiex_send_cmd(priv,(unsigned short)290,(unsigned short)1,0U,(void *)(& tdls_oper),(_Bool)1);
  
#line 1005 
  __retres = tmp;
  return_label: 
#line 1005 
                return __retres;
}


#line 1010  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/tdls.c"
static int mwifiex_tdls_process_disable_link(struct mwifiex_private *priv, u8 const *peer)
{
  struct mwifiex_sta_node *sta_ptr;
  struct mwifiex_ds_tdls_oper tdls_oper;
  unsigned long flags;
  int tmp;
  
#line 1016 
  memset((void *)(& tdls_oper),0,56UL);
  
#line 1017 
  sta_ptr = mwifiex_get_sta_entry(priv,peer);
  
#line 1019 
  if (sta_ptr != (struct mwifiex_sta_node *)0) {
    
#line 1020 
    if ((unsigned int)sta_ptr->is_11n_enabled != 0U) {
      
#line 1021 
      mwifiex_11n_cleanup_reorder_tbl(priv);
      
#line 1022 
      ldv___ldv_spin_lock_82_1(& priv->wmm.ra_list_spinlock);
      
#line 1024 
      mwifiex_11n_delete_all_tx_ba_stream_tbl(priv);
      
#line 1025 
      ldv_spin_unlock_irqrestore_83_1(& priv->wmm.ra_list_spinlock,flags);
    }
    else ;
    
#line 1028 
    mwifiex_del_sta_entry(priv,peer);
  }
  else ;
  
#line 1031 
  mwifiex_restore_tdls_packets(priv,peer,(unsigned char)4);
  
#line 1032 
  mwifiex_auto_tdls_update_peer_status(priv,peer,(unsigned char)0);
  
#line 1033 
  memcpy((void *)(& tdls_oper.peer_mac),(void const *)peer,6UL);
  
#line 1034 
  tdls_oper.tdls_action = (unsigned short)0U;
  
#line 1035 
  tmp = mwifiex_send_cmd(priv,(unsigned short)290,(unsigned short)1,0U,(void *)(& tdls_oper),(_Bool)1);
  
#line 1035 
  return tmp;
}


#line 1040  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/tdls.c"
static int mwifiex_tdls_process_enable_link(struct mwifiex_private *priv, u8 const *peer)
{
  int __retres;
  struct mwifiex_sta_node *sta_ptr;
  struct ieee80211_mcs_info mcs;
  unsigned long flags;
  int i;
  
#line 1047 
  sta_ptr = mwifiex_get_sta_entry(priv,peer);
  
#line 1049 
  if (sta_ptr != (struct mwifiex_sta_node *)0 && (unsigned int)sta_ptr->tdls_status != 3U) {
    
#line 1050 
    if (((priv->adapter)->debug_mask & 1U) != 0U) {
      
#line 1050 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 1050 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"tdls: enable link %pM success\n",peer); else ;
    }
    else ;
    
#line 1053 
    sta_ptr->tdls_status = (unsigned char)2U;
    
#line 1055 
    mcs = sta_ptr->tdls_cap.ht_capb.mcs;
    
#line 1056 
    if ((unsigned int)mcs.rx_mask[0] != 255U) 
#line 1057 
                                              sta_ptr->is_11n_enabled = (unsigned char)1U; else ;
    
#line 1058 
    if ((unsigned int)sta_ptr->is_11n_enabled != 0U) {
      
#line 1059 
      if (((int)sta_ptr->tdls_cap.ht_capb.cap_info & 2048) != 0) 
#line 1061 
                                                                 sta_ptr->max_amsdu = (unsigned short)8192U; else 
                                                                    
#line 1064 
                                                                    sta_ptr->max_amsdu = (unsigned short)4096U;
      
#line 1067 
      i = 0;
      
#line 1067 
      goto ldv_61959;
      ldv_61958: 
#line 1068 
      ;
      
#line 1068 
      sta_ptr->ampdu_sta[i] = priv->aggr_prio_tbl[i].ampdu_user;
      
#line 1067 
      i += 1;
      ldv_61959: 
#line 1068 
      ;
      
#line 1067 
      if (i <= 7) 
#line 1069 
                  goto ldv_61958; else 
#line 1072 
                                       goto ldv_61960;
      ldv_61960: 
#line 1073 
      ;
    }
    else {
      
#line 1071 
      i = 0;
      
#line 1071 
      goto ldv_61962;
      ldv_61961: 
#line 1072 
      ;
      
#line 1072 
      sta_ptr->ampdu_sta[i] = (unsigned char)255U;
      
#line 1071 
      i += 1;
      ldv_61962: 
#line 1072 
      ;
      
#line 1071 
      if (i <= 7) 
#line 1073 
                  goto ldv_61961; else 
#line 1076 
                                       goto ldv_61963;
      ldv_61963: 
#line 1077 
      ;
    }
    
#line 1075 
    memset((void *)(& sta_ptr->rx_seq),255,16UL);
    
#line 1076 
    mwifiex_restore_tdls_packets(priv,peer,(unsigned char)2);
    
#line 1077 
    mwifiex_auto_tdls_update_peer_status(priv,peer,(unsigned char)2);
  }
  else {
    
#line 1080 
    if (((priv->adapter)->debug_mask & 4U) != 0U) {
      
#line 1080 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 1080 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"tdls: enable link %pM failed\n",peer); else ;
    }
    else ;
    
#line 1082 
    if (sta_ptr != (struct mwifiex_sta_node *)0) {
      
#line 1083 
      mwifiex_11n_cleanup_reorder_tbl(priv);
      
#line 1084 
      ldv___ldv_spin_lock_84_0(& priv->wmm.ra_list_spinlock);
      
#line 1086 
      mwifiex_11n_delete_all_tx_ba_stream_tbl(priv);
      
#line 1087 
      ldv_spin_unlock_irqrestore_85_1(& priv->wmm.ra_list_spinlock,flags);
      
#line 1089 
      mwifiex_del_sta_entry(priv,peer);
    }
    else ;
    
#line 1091 
    mwifiex_restore_tdls_packets(priv,peer,(unsigned char)4);
    
#line 1092 
    mwifiex_auto_tdls_update_peer_status(priv,peer,(unsigned char)0);
    
#line 1095 
    __retres = -1;
    
#line 1095 
    goto return_label;
  }
  
#line 1098 
  __retres = 0;
  return_label: 
#line 1098 
                return __retres;
}


#line 1101  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/tdls.c"
int mwifiex_tdls_oper(struct mwifiex_private *priv, u8 const *peer, u8 action)
{
  int __retres;
  
#line 1103 
  switch ((int)action) {
    int tmp;
    int tmp_0;
    int tmp_1;
    int tmp_2;
    case 1: 
#line 1104 
    ;
    
#line 1105 
    tmp = mwifiex_tdls_process_enable_link(priv,peer);
    
#line 1105 
    __retres = tmp;
    
#line 1105 
    goto return_label;
    case 0: 
#line 1106 
    ;
    
#line 1107 
    tmp_0 = mwifiex_tdls_process_disable_link(priv,peer);
    
#line 1107 
    __retres = tmp_0;
    
#line 1107 
    goto return_label;
    case 2: 
#line 1108 
    ;
    
#line 1109 
    tmp_1 = mwifiex_tdls_process_create_link(priv,peer);
    
#line 1109 
    __retres = tmp_1;
    
#line 1109 
    goto return_label;
    case 3: 
#line 1110 
    ;
    
#line 1111 
    tmp_2 = mwifiex_tdls_process_config_link(priv,peer);
    
#line 1111 
    __retres = tmp_2;
    
#line 1111 
    goto return_label;
  }
  
#line 1113 
  __retres = 0;
  return_label: 
#line 1113 
                return __retres;
}


#line 1116  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/tdls.c"
int mwifiex_get_tdls_link_status(struct mwifiex_private *priv, u8 const *mac)
{
  int __retres;
  struct mwifiex_sta_node *sta_ptr;
  
#line 1120 
  sta_ptr = mwifiex_get_sta_entry(priv,mac);
  
#line 1121 
  if (sta_ptr != (struct mwifiex_sta_node *)0) {
    
#line 1122 
    __retres = (int)sta_ptr->tdls_status;
    
#line 1122 
    goto return_label;
  }
  else ;
  
#line 1124 
  __retres = 0;
  return_label: 
#line 1124 
                return __retres;
}


#line 1127  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/tdls.c"
int mwifiex_get_tdls_list(struct mwifiex_private *priv, struct tdls_peer_info *buf)
{
  int __retres;
  struct mwifiex_sta_node *sta_ptr;
  unsigned long flags;
  struct mwifiex_sta_node *tmp;
  struct mwifiex_sta_node *tmp_0;
  
#line 1131 
  struct tdls_peer_info *peer = buf;
  
#line 1132 
  int count = 0;
  
#line 1135 
  if (((unsigned long)(priv->adapter)->fw_cap_info & 16384UL) == 0UL) {
    
#line 1136 
    __retres = 0;
    
#line 1136 
    goto return_label;
  }
  else ;
  
#line 1139 
  if ((unsigned int)priv->bss_type != 0U || (unsigned int)priv->media_connected == 0U) {
    
#line 1140 
    __retres = 0;
    
#line 1140 
    goto return_label;
  }
  else ;
  
#line 1142 
  ldv___ldv_spin_lock_86(& priv->sta_list_spinlock);
  {
    
#line 1143 
    struct list_head const *__mptr = (struct list_head const *)priv->sta_list.next;
    
#line 1143 
    tmp = (struct mwifiex_sta_node *)__mptr;
  }
  
#line 1143 
  sta_ptr = tmp;
  
#line 1143 
  goto ldv_61992;
  ldv_61991: 
#line 1144 
  ;
  
#line 1144 
  if ((unsigned int)sta_ptr->tdls_status == 2U) {
    
#line 1145 
    ether_addr_copy((u8 *)(& peer->peer_addr),(u8 const *)(& sta_ptr->mac_addr));
    
#line 1146 
    peer += 1;
    
#line 1147 
    count += 1;
    
#line 1148 
    if (count > 7) 
#line 1149 
                   goto ldv_61990; else ;
  }
  else ;
  {
    
#line 1143 
    struct list_head const *__mptr_0 = (struct list_head const *)sta_ptr->list.next;
    
#line 1143 
    tmp_0 = (struct mwifiex_sta_node *)__mptr_0;
  }
  
#line 1143 
  sta_ptr = tmp_0;
  ldv_61992: 
#line 1145 
  ;
  
#line 1143 
  if (& sta_ptr->list != & priv->sta_list) 
#line 1145 
                                           goto ldv_61991; else 
#line 1148 
                                                                goto ldv_61990;
  ldv_61990: 
#line 1149 
  ;
  
#line 1152 
  ldv_spin_unlock_irqrestore_87(& priv->sta_list_spinlock,flags);
  
#line 1154 
  __retres = count;
  return_label: 
#line 1154 
                return __retres;
}


#line 1157  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/tdls.c"
void mwifiex_disable_all_tdls_links(struct mwifiex_private *priv)
{
  struct mwifiex_sta_node *sta_ptr;
  struct mwifiex_ds_tdls_oper tdls_oper;
  unsigned long flags;
  int tmp;
  struct mwifiex_sta_node *tmp_0;
  int tmp_1;
  struct mwifiex_sta_node *tmp_2;
  
#line 1163 
  tmp = list_empty((struct list_head const *)(& priv->sta_list));
  
#line 1163 
  if (tmp != 0) 
#line 1164 
                goto return_label; else ;
  {
    
#line 1166 
    struct list_head const *__mptr = (struct list_head const *)priv->sta_list.next;
    
#line 1166 
    tmp_0 = (struct mwifiex_sta_node *)__mptr;
  }
  
#line 1166 
  sta_ptr = tmp_0;
  
#line 1166 
  goto ldv_62004;
  ldv_62003: 
#line 1167 
  ;
  
#line 1167 
  memset((void *)(& tdls_oper),0,56UL);
  
#line 1169 
  if ((unsigned int)sta_ptr->is_11n_enabled != 0U) {
    
#line 1170 
    mwifiex_11n_cleanup_reorder_tbl(priv);
    
#line 1171 
    ldv___ldv_spin_lock_88_0(& priv->wmm.ra_list_spinlock);
    
#line 1173 
    mwifiex_11n_delete_all_tx_ba_stream_tbl(priv);
    
#line 1174 
    ldv_spin_unlock_irqrestore_89_1(& priv->wmm.ra_list_spinlock,flags);
  }
  else ;
  
#line 1178 
  mwifiex_restore_tdls_packets(priv,(u8 const *)(& sta_ptr->mac_addr),(unsigned char)4);
  
#line 1180 
  memcpy((void *)(& tdls_oper.peer_mac),(void const *)(& sta_ptr->mac_addr),6UL);
  
#line 1181 
  tdls_oper.tdls_action = (unsigned short)0U;
  
#line 1182 
  tmp_1 = mwifiex_send_cmd(priv,(unsigned short)290,(unsigned short)1,0U,(void *)(& tdls_oper),(_Bool)0);
  
#line 1182 
  if (tmp_1 != 0) {
    
#line 1184 
    if (((priv->adapter)->debug_mask & 4U) != 0U) {
      
#line 1184 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 1184 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"Disable link failed for TDLS peer %pM",(u8 *)(& sta_ptr->mac_addr)); else ;
    }
    else ;
  }
  else ;
  {
    
#line 1166 
    struct list_head const *__mptr_0 = (struct list_head const *)sta_ptr->list.next;
    
#line 1166 
    tmp_2 = (struct mwifiex_sta_node *)__mptr_0;
  }
  
#line 1166 
  sta_ptr = tmp_2;
  ldv_62004: 
#line 1168 
  ;
  
#line 1166 
  if (& sta_ptr->list != & priv->sta_list) 
#line 1168 
                                           goto ldv_62003; else 
#line 1171 
                                                                goto ldv_62005;
  ldv_62005: 
#line 1172 
  ;
  
#line 1189 
  mwifiex_del_all_sta_list(priv);
  return_label: 
#line 1190 
                return;
}


#line 1192  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/tdls.c"
int mwifiex_tdls_check_tx(struct mwifiex_private *priv, struct sk_buff *skb)
{
  int __retres;
  struct mwifiex_auto_tdls_peer *peer;
  unsigned long flags;
  u8 mac[6U];
  struct mwifiex_auto_tdls_peer *tmp;
  int tmp_0;
  struct mwifiex_auto_tdls_peer *tmp_1;
  
#line 1198 
  ether_addr_copy((u8 *)(& mac),(u8 const *)skb->data);
  
#line 1200 
  ldv___ldv_spin_lock_90_1(& priv->auto_tdls_lock);
  {
    
#line 1201 
    struct list_head const *__mptr = (struct list_head const *)priv->auto_tdls_list.next;
    
#line 1201 
    tmp = (struct mwifiex_auto_tdls_peer *)__mptr;
  }
  
#line 1201 
  peer = tmp;
  
#line 1201 
  goto ldv_62018;
  ldv_62017: 
#line 1202 
  ;
  
#line 1202 
  tmp_0 = memcmp((void const *)(& mac),(void const *)(& peer->mac_addr),6UL);
  
#line 1202 
  if (tmp_0 == 0) {
    
#line 1203 
    if ((peer->rssi <= 50 && (unsigned int)peer->tdls_status == 0U) && (unsigned int)peer->failure_count <= 3U) {
      
#line 1207 
      peer->tdls_status = (unsigned char)1U;
      
#line 1208 
      if (((priv->adapter)->debug_mask & 1073741824U) != 0U) {
        
#line 1208 
        if ((priv->adapter)->dev != (struct device *)0) 
#line 1208 
                                                        _dev_info((struct device const *)(priv->adapter)->dev,"setup TDLS link, peer=%pM rssi=%d\n",(u8 *)(& peer->mac_addr),peer->rssi); else ;
      }
      else ;
      
#line 1212 
      cfg80211_tdls_oper_request(priv->netdev,(u8 const *)(& peer->mac_addr),(enum nl80211_tdls_operation)NL80211_TDLS_SETUP,(unsigned short)0,32U);
      
#line 1216 
      peer->do_setup = (unsigned char)0U;
      
#line 1217 
      priv->check_tdls_tx = (unsigned char)0U;
    }
    else 
      
#line 1218 
      if ((unsigned int)peer->failure_count <= 3U && (unsigned int)peer->do_discover != 0U) {
        
#line 1221 
        mwifiex_send_tdls_data_frame(priv,(u8 const *)(& peer->mac_addr),(unsigned char)10,(unsigned char)1,(unsigned short)0,(u8 const *)0U,0UL);
        
#line 1225 
        peer->do_discover = (unsigned char)0U;
      }
      else ;
  }
  else ;
  {
    
#line 1201 
    struct list_head const *__mptr_0 = (struct list_head const *)peer->list.next;
    
#line 1201 
    tmp_1 = (struct mwifiex_auto_tdls_peer *)__mptr_0;
  }
  
#line 1201 
  peer = tmp_1;
  ldv_62018: 
#line 1203 
  ;
  
#line 1201 
  if (& peer->list != & priv->auto_tdls_list) 
#line 1203 
                                              goto ldv_62017; else 
#line 1206 
                                                                   goto ldv_62019;
  ldv_62019: 
#line 1207 
  ;
  
#line 1229 
  ldv_spin_unlock_irqrestore_91_1(& priv->auto_tdls_lock,flags);
  
#line 1231 
  __retres = 0;
  
#line 1231 
  return __retres;
}


#line 1234  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/tdls.c"
void mwifiex_flush_auto_tdls_list(struct mwifiex_private *priv)
{
  struct mwifiex_auto_tdls_peer *peer;
  struct mwifiex_auto_tdls_peer *tmp_node;
  unsigned long flags;
  struct mwifiex_auto_tdls_peer *tmp;
  struct mwifiex_auto_tdls_peer *tmp_0;
  struct mwifiex_auto_tdls_peer *tmp_1;
  
#line 1239 
  ldv___ldv_spin_lock_92_1(& priv->auto_tdls_lock);
  {
    
#line 1240 
    struct list_head const *__mptr = (struct list_head const *)priv->auto_tdls_list.next;
    
#line 1240 
    tmp = (struct mwifiex_auto_tdls_peer *)__mptr;
  }
  
#line 1240 
  peer = tmp;
  {
    
#line 1240 
    struct list_head const *__mptr_0 = (struct list_head const *)peer->list.next;
    
#line 1240 
    tmp_0 = (struct mwifiex_auto_tdls_peer *)__mptr_0;
  }
  
#line 1241 
  tmp_node = tmp_0;
  
#line 1240 
  goto ldv_62033;
  ldv_62032: 
#line 1241 
  ;
  
#line 1241 
  list_del(& peer->list);
  
#line 1242 
  kfree((void const *)peer);
  
#line 1240 
  peer = tmp_node;
  {
    
#line 1240 
    struct list_head const *__mptr_1 = (struct list_head const *)tmp_node->list.next;
    
#line 1240 
    tmp_1 = (struct mwifiex_auto_tdls_peer *)__mptr_1;
  }
  
#line 1240 
  tmp_node = tmp_1;
  ldv_62033: 
#line 1242 
  ;
  
#line 1240 
  if (& peer->list != & priv->auto_tdls_list) 
#line 1242 
                                              goto ldv_62032; else 
#line 1245 
                                                                   goto ldv_62034;
  ldv_62034: 
#line 1246 
  ;
  
#line 1245 
  INIT_LIST_HEAD(& priv->auto_tdls_list);
  
#line 1246 
  ldv_spin_unlock_irqrestore_93_0(& priv->auto_tdls_lock,flags);
  
#line 1247 
  priv->check_tdls_tx = (unsigned char)0U;
  
#line 1248 
  return;
}


#line 1250  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/tdls.c"
void mwifiex_add_auto_tdls_peer(struct mwifiex_private *priv, u8 const *mac)
{
  struct mwifiex_auto_tdls_peer *tdls_peer;
  unsigned long flags;
  struct mwifiex_auto_tdls_peer *tmp;
  int tmp_0;
  struct mwifiex_auto_tdls_peer *tmp_1;
  
#line 1255 
  if (! (priv->adapter)->auto_tdls) 
#line 1256 
                                    goto return_label; else ;
  
#line 1258 
  ldv___ldv_spin_lock_94(& priv->auto_tdls_lock);
  {
    
#line 1259 
    struct list_head const *__mptr = (struct list_head const *)priv->auto_tdls_list.next;
    
#line 1259 
    tmp = (struct mwifiex_auto_tdls_peer *)__mptr;
  }
  
#line 1259 
  tdls_peer = tmp;
  
#line 1259 
  goto ldv_62046;
  ldv_62045: 
#line 1260 
  ;
  
#line 1260 
  tmp_0 = memcmp((void const *)(& tdls_peer->mac_addr),(void const *)mac,6UL);
  
#line 1260 
  if (tmp_0 == 0) {
    
#line 1261 
    tdls_peer->tdls_status = (unsigned char)1U;
    
#line 1262 
    tdls_peer->rssi_jiffies = (long)jiffies;
    
#line 1263 
    ldv_spin_unlock_irqrestore_95_0(& priv->auto_tdls_lock,flags);
    
#line 1264 
    goto return_label;
  }
  else ;
  {
    
#line 1259 
    struct list_head const *__mptr_0 = (struct list_head const *)tdls_peer->list.next;
    
#line 1259 
    tmp_1 = (struct mwifiex_auto_tdls_peer *)__mptr_0;
  }
  
#line 1259 
  tdls_peer = tmp_1;
  ldv_62046: 
#line 1261 
  ;
  
#line 1259 
  if (& tdls_peer->list != & priv->auto_tdls_list) 
#line 1261 
                                                   goto ldv_62045; else 
                                                                    
#line 1264 
                                                                    goto ldv_62047;
  ldv_62047: 
#line 1265 
  ;
  
#line 1269 
  tdls_peer = (struct mwifiex_auto_tdls_peer *)kzalloc_1(48UL,32U);
  
#line 1270 
  if (tdls_peer != (struct mwifiex_auto_tdls_peer *)0) {
    
#line 1271 
    ether_addr_copy((u8 *)(& tdls_peer->mac_addr),mac);
    
#line 1272 
    tdls_peer->tdls_status = (unsigned char)1U;
    
#line 1273 
    tdls_peer->rssi_jiffies = (long)jiffies;
    
#line 1274 
    INIT_LIST_HEAD(& tdls_peer->list);
    
#line 1275 
    list_add_tail(& tdls_peer->list,& priv->auto_tdls_list);
    
#line 1276 
    if (((priv->adapter)->debug_mask & 1073741824U) != 0U) {
      
#line 1276 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 1276 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"Add auto TDLS peer= %pM to list\n",mac); else ;
    }
    else ;
  }
  else ;
  
#line 1280 
  ldv_spin_unlock_irqrestore_96_0(& priv->auto_tdls_lock,flags);
  return_label: 
#line 1281 
                return;
}


#line 1283  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/tdls.c"
void mwifiex_auto_tdls_update_peer_status(struct mwifiex_private *priv, u8 const *mac, u8 link_status)
{
  struct mwifiex_auto_tdls_peer *peer;
  unsigned long flags;
  struct mwifiex_auto_tdls_peer *tmp;
  int tmp_0;
  struct mwifiex_auto_tdls_peer *tmp_1;
  
#line 1289 
  if (! (priv->adapter)->auto_tdls) 
#line 1290 
                                    goto return_label; else ;
  
#line 1292 
  ldv___ldv_spin_lock_97_0(& priv->auto_tdls_lock);
  {
    
#line 1293 
    struct list_head const *__mptr = (struct list_head const *)priv->auto_tdls_list.next;
    
#line 1293 
    tmp = (struct mwifiex_auto_tdls_peer *)__mptr;
  }
  
#line 1293 
  peer = tmp;
  
#line 1293 
  goto ldv_62061;
  ldv_62060: 
#line 1294 
  ;
  
#line 1294 
  tmp_0 = memcmp((void const *)(& peer->mac_addr),(void const *)mac,6UL);
  
#line 1294 
  if (tmp_0 == 0) {
    
#line 1295 
    if ((unsigned int)link_status == 0U && (unsigned int)peer->tdls_status == 1U) 
      
#line 1297 
      peer->failure_count = (u8)((int)peer->failure_count + 1);
    else 
      
#line 1298 
      if ((unsigned int)link_status == 2U) 
#line 1299 
                                           peer->failure_count = (unsigned char)0U; else ;
    
#line 1301 
    peer->tdls_status = link_status;
    
#line 1302 
    goto ldv_62059;
  }
  else ;
  {
    
#line 1293 
    struct list_head const *__mptr_0 = (struct list_head const *)peer->list.next;
    
#line 1293 
    tmp_1 = (struct mwifiex_auto_tdls_peer *)__mptr_0;
  }
  
#line 1293 
  peer = tmp_1;
  ldv_62061: 
#line 1295 
  ;
  
#line 1293 
  if (& peer->list != & priv->auto_tdls_list) 
#line 1295 
                                              goto ldv_62060; else 
#line 1298 
                                                                   goto ldv_62059;
  ldv_62059: 
#line 1299 
  ;
  
#line 1305 
  ldv_spin_unlock_irqrestore_98_0(& priv->auto_tdls_lock,flags);
  return_label: 
#line 1306 
                return;
}


#line 1308  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/tdls.c"
void mwifiex_auto_tdls_update_peer_signal(struct mwifiex_private *priv, u8 *mac, s8 snr, s8 nflr)
{
  struct mwifiex_auto_tdls_peer *peer;
  unsigned long flags;
  struct mwifiex_auto_tdls_peer *tmp;
  int tmp_0;
  struct mwifiex_auto_tdls_peer *tmp_1;
  
#line 1314 
  if (! (priv->adapter)->auto_tdls) 
#line 1315 
                                    goto return_label; else ;
  
#line 1317 
  ldv___ldv_spin_lock_99(& priv->auto_tdls_lock);
  {
    
#line 1318 
    struct list_head const *__mptr = (struct list_head const *)priv->auto_tdls_list.next;
    
#line 1318 
    tmp = (struct mwifiex_auto_tdls_peer *)__mptr;
  }
  
#line 1318 
  peer = tmp;
  
#line 1318 
  goto ldv_62076;
  ldv_62075: 
#line 1319 
  ;
  
#line 1319 
  tmp_0 = memcmp((void const *)(& peer->mac_addr),(void const *)mac,6UL);
  
#line 1319 
  if (tmp_0 == 0) {
    
#line 1320 
    peer->rssi = (int)nflr - (int)snr;
    
#line 1321 
    peer->rssi_jiffies = (long)jiffies;
    
#line 1322 
    goto ldv_62074;
  }
  else ;
  {
    
#line 1318 
    struct list_head const *__mptr_0 = (struct list_head const *)peer->list.next;
    
#line 1318 
    tmp_1 = (struct mwifiex_auto_tdls_peer *)__mptr_0;
  }
  
#line 1318 
  peer = tmp_1;
  ldv_62076: 
#line 1320 
  ;
  
#line 1318 
  if (& peer->list != & priv->auto_tdls_list) 
#line 1320 
                                              goto ldv_62075; else 
#line 1323 
                                                                   goto ldv_62074;
  ldv_62074: 
#line 1324 
  ;
  
#line 1325 
  ldv_spin_unlock_irqrestore_100_0(& priv->auto_tdls_lock,flags);
  return_label: 
#line 1326 
                return;
}


#line 1328  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/tdls.c"
void mwifiex_check_auto_tdls(unsigned long context)
{
  struct mwifiex_auto_tdls_peer *tdls_peer;
  unsigned long flags;
  int tmp_0;
  int tmp_2;
  struct mwifiex_auto_tdls_peer *tmp_3;
  struct mwifiex_auto_tdls_peer *tmp_4;
  unsigned long tmp_5;
  
#line 1330 
  struct mwifiex_private *priv = (struct mwifiex_private *)context;
  
#line 1333 
  u16 reason = (unsigned short)26U;
  {
    bool __warned;
    
#line 1335 
    int __ret_warn_once = (priv == (struct mwifiex_private *)0 || priv->adapter == (struct mwifiex_adapter *)0) != 0;
    
#line 1335 
    if ((long)(__ret_warn_once != 0) != 0L) {
      int tmp;
      {
        
#line 1335 
        int __ret_warn_on = ! __warned;
        
#line 1335 
        if ((long)(__ret_warn_on != 0) != 0L) 
#line 1335 
                                              warn_slowpath_null("/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/tdls.c",1335); else ;
        
#line 1335 
        tmp = (long)(__ret_warn_on != 0);
      }
      
#line 1335 
      if ((long)tmp != 0L) 
#line 1335 
                           __warned = (_Bool)1; else ;
    }
    else ;
    
#line 1335 
    tmp_0 = (long)(__ret_warn_once != 0);
  }
  
#line 1335 
  if ((long)tmp_0 != 0L) {
    
#line 1336 
    printk("\001","mwifiex_check_auto_tdls");
    
#line 1338 
    goto return_label;
  }
  else ;
  
#line 1341 
  if ((long)(! (priv->adapter)->auto_tdls) != 0L) 
#line 1342 
                                                  goto return_label; else ;
  
#line 1344 
  if (! priv->auto_tdls_timer_active) {
    
#line 1345 
    if (((priv->adapter)->debug_mask & 1073741824U) != 0U) {
      
#line 1345 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 1345 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"auto TDLS timer inactive; return"); else ;
    }
    else ;
    
#line 1347 
    goto return_label;
  }
  else ;
  
#line 1350 
  priv->check_tdls_tx = (unsigned char)0U;
  
#line 1352 
  tmp_2 = list_empty((struct list_head const *)(& priv->auto_tdls_list));
  
#line 1352 
  if (tmp_2 != 0) {
    unsigned long tmp_1;
    
#line 1353 
    tmp_1 = msecs_to_jiffies(10000U);
    
#line 1353 
    ;
    
#line 1353 
    ;
    
#line 1353 
    ldv_mod_timer_101(& priv->auto_tdls_timer,tmp_1 + jiffies);
    
#line 1356 
    goto return_label;
  }
  else ;
  
#line 1359 
  ldv___ldv_spin_lock_102_1(& priv->auto_tdls_lock);
  {
    
#line 1360 
    struct list_head const *__mptr = (struct list_head const *)priv->auto_tdls_list.next;
    
#line 1360 
    tmp_3 = (struct mwifiex_auto_tdls_peer *)__mptr;
  }
  
#line 1360 
  tdls_peer = tmp_3;
  
#line 1360 
  goto ldv_62095;
  ldv_62094: 
#line 1361 
  ;
  
#line 1361 
  if (jiffies - (unsigned long)tdls_peer->rssi_jiffies > 2500UL) {
    
#line 1363 
    tdls_peer->rssi = 0;
    
#line 1364 
    tdls_peer->do_discover = (unsigned char)1U;
    
#line 1365 
    priv->check_tdls_tx = (unsigned char)1U;
  }
  else ;
  
#line 1368 
  if ((tdls_peer->rssi > 54 || tdls_peer->rssi == 0) && (unsigned int)tdls_peer->tdls_status == 2U) {
    
#line 1371 
    tdls_peer->tdls_status = (unsigned char)4U;
    
#line 1372 
    if (((priv->adapter)->debug_mask & 1U) != 0U) {
      
#line 1372 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 1372 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"teardown TDLS link,peer=%pM rssi=%d\n",(u8 *)(& tdls_peer->mac_addr),- tdls_peer->rssi); else ;
    }
    else ;
    
#line 1375 
    tdls_peer->do_discover = (unsigned char)1U;
    
#line 1376 
    priv->check_tdls_tx = (unsigned char)1U;
    
#line 1377 
    cfg80211_tdls_oper_request(priv->netdev,(u8 const *)(& tdls_peer->mac_addr),(enum nl80211_tdls_operation)NL80211_TDLS_TEARDOWN,(unsigned short)((int)reason),32U);
  }
  else 
    
#line 1381 
    if (((tdls_peer->rssi != 0 && tdls_peer->rssi <= 50) && (unsigned int)tdls_peer->tdls_status == 0U) && (unsigned int)tdls_peer->failure_count <= 3U) {
      
#line 1386 
      priv->check_tdls_tx = (unsigned char)1U;
      
#line 1387 
      tdls_peer->do_setup = (unsigned char)1U;
      
#line 1388 
      if (((priv->adapter)->debug_mask & 1073741824U) != 0U) {
        
#line 1388 
        if ((priv->adapter)->dev != (struct device *)0) 
#line 1388 
                                                        _dev_info((struct device const *)(priv->adapter)->dev,"check TDLS with peer=%pM\t",(u8 *)(& tdls_peer->mac_addr),tdls_peer->rssi); else ;
      }
      else ;
    }
    else ;
  {
    
#line 1360 
    struct list_head const *__mptr_0 = (struct list_head const *)tdls_peer->list.next;
    
#line 1360 
    tmp_4 = (struct mwifiex_auto_tdls_peer *)__mptr_0;
  }
  
#line 1360 
  tdls_peer = tmp_4;
  ldv_62095: 
#line 1362 
  ;
  
#line 1360 
  if (& tdls_peer->list != & priv->auto_tdls_list) 
#line 1362 
                                                   goto ldv_62094; else 
                                                                    
#line 1365 
                                                                    goto ldv_62096;
  ldv_62096: 
#line 1366 
  ;
  
#line 1394 
  ldv_spin_unlock_irqrestore_103_1(& priv->auto_tdls_lock,flags);
  
#line 1396 
  tmp_5 = msecs_to_jiffies(10000U);
  
#line 1396 
  ;
  
#line 1396 
  ;
  
#line 1396 
  ldv_mod_timer_104(& priv->auto_tdls_timer,tmp_5 + jiffies);
  return_label: 
#line 1398 
                return;
}


#line 1400  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/tdls.c"
void mwifiex_setup_auto_tdls_timer(struct mwifiex_private *priv)
{
  unsigned long tmp;
  {
    struct lock_class_key __key;
    
#line 1402 
    init_timer_key(& priv->auto_tdls_timer,0U,"((&priv->auto_tdls_timer))",& __key);
  }
  
#line 1402 
  priv->auto_tdls_timer.function = & mwifiex_check_auto_tdls;
  
#line 1402 
  priv->auto_tdls_timer.data = (unsigned long)priv;
  
#line 1404 
  priv->auto_tdls_timer_active = (_Bool)1;
  
#line 1405 
  tmp = msecs_to_jiffies(10000U);
  
#line 1405 
  ;
  
#line 1405 
  ;
  
#line 1405 
  ldv_mod_timer_105(& priv->auto_tdls_timer,tmp + jiffies);
  
#line 1407 
  return;
}


#line 1409  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/tdls.c"
void mwifiex_clean_auto_tdls(struct mwifiex_private *priv)
{
  
#line 1411 
  if ((((unsigned long)(priv->adapter)->fw_cap_info & 16384UL) != 0UL && (int)(priv->adapter)->auto_tdls != 0) && (unsigned int)priv->bss_type == 0U) {
    
#line 1414 
    priv->auto_tdls_timer_active = (_Bool)0;
    
#line 1415 
    ldv_del_timer_106(& priv->auto_tdls_timer);
    
#line 1416 
    mwifiex_flush_auto_tdls_list(priv);
  }
  else ;
  
#line 1418 
  return;
}


#line 120  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_tdls.c.aux"
static void atomic_inc_2(atomic_t *v)
{
  
#line 123 
  ldv_atomic_inc(v);
  
#line 124 
  return;
}


#line 127  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_tdls.c.aux"
static void atomic_dec_1(atomic_t *v)
{
  
#line 130 
  ldv_atomic_dec(v);
  
#line 131 
  return;
}


#line 472  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_tdls.c.aux"
static void *kzalloc_1(size_t size, gfp_t flags)
{
  void *tmp;
  
#line 475 
  tmp = ldv_kzalloc(size,flags);
  
#line 475 
  return tmp;
}


#line 791  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_tdls.c.aux"
static void ldv___ldv_spin_lock_78_1(spinlock_t *ldv_func_arg1)
{
  
#line 795 
  ldv_spin_model_lock((char *)"ra_list_spinlock_of_mwifiex_wmm_desc");
  
#line 797 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 798 
  return;
}


#line 801  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_tdls.c.aux"
static void ldv_spin_unlock_irqrestore_79_1(spinlock_t *lock, unsigned long flags)
{
  
#line 805 
  ldv_spin_model_unlock((char *)"ra_list_spinlock_of_mwifiex_wmm_desc");
  
#line 807 
  spin_unlock_irqrestore_2(lock,flags);
  
#line 808 
  return;
}


#line 811  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_tdls.c.aux"
static void ldv___ldv_spin_lock_80_0(spinlock_t *ldv_func_arg1)
{
  
#line 815 
  ldv_spin_model_lock((char *)"ra_list_spinlock_of_mwifiex_wmm_desc");
  
#line 817 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 818 
  return;
}


#line 821  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_tdls.c.aux"
static void ldv_spin_unlock_irqrestore_81_1(spinlock_t *lock, unsigned long flags)
{
  
#line 825 
  ldv_spin_model_unlock((char *)"ra_list_spinlock_of_mwifiex_wmm_desc");
  
#line 827 
  spin_unlock_irqrestore_2(lock,flags);
  
#line 828 
  return;
}


#line 831  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_tdls.c.aux"
static void ldv___ldv_spin_lock_82_1(spinlock_t *ldv_func_arg1)
{
  
#line 835 
  ldv_spin_model_lock((char *)"ra_list_spinlock_of_mwifiex_wmm_desc");
  
#line 837 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 838 
  return;
}


#line 841  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_tdls.c.aux"
static void ldv_spin_unlock_irqrestore_83_1(spinlock_t *lock, unsigned long flags)
{
  
#line 845 
  ldv_spin_model_unlock((char *)"ra_list_spinlock_of_mwifiex_wmm_desc");
  
#line 847 
  spin_unlock_irqrestore_2(lock,flags);
  
#line 848 
  return;
}


#line 851  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_tdls.c.aux"
static void ldv___ldv_spin_lock_84_0(spinlock_t *ldv_func_arg1)
{
  
#line 855 
  ldv_spin_model_lock((char *)"ra_list_spinlock_of_mwifiex_wmm_desc");
  
#line 857 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 858 
  return;
}


#line 861  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_tdls.c.aux"
static void ldv_spin_unlock_irqrestore_85_1(spinlock_t *lock, unsigned long flags)
{
  
#line 865 
  ldv_spin_model_unlock((char *)"ra_list_spinlock_of_mwifiex_wmm_desc");
  
#line 867 
  spin_unlock_irqrestore_2(lock,flags);
  
#line 868 
  return;
}


#line 871  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_tdls.c.aux"
static void ldv___ldv_spin_lock_86(spinlock_t *ldv_func_arg1)
{
  
#line 875 
  ldv_spin_model_lock((char *)"sta_list_spinlock_of_mwifiex_private");
  
#line 877 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 878 
  return;
}


#line 881  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_tdls.c.aux"
static void ldv_spin_unlock_irqrestore_87(spinlock_t *lock, unsigned long flags)
{
  
#line 885 
  ldv_spin_model_unlock((char *)"sta_list_spinlock_of_mwifiex_private");
  
#line 887 
  spin_unlock_irqrestore_2(lock,flags);
  
#line 888 
  return;
}


#line 891  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_tdls.c.aux"
static void ldv___ldv_spin_lock_88_0(spinlock_t *ldv_func_arg1)
{
  
#line 895 
  ldv_spin_model_lock((char *)"ra_list_spinlock_of_mwifiex_wmm_desc");
  
#line 897 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 898 
  return;
}


#line 901  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_tdls.c.aux"
static void ldv_spin_unlock_irqrestore_89_1(spinlock_t *lock, unsigned long flags)
{
  
#line 905 
  ldv_spin_model_unlock((char *)"ra_list_spinlock_of_mwifiex_wmm_desc");
  
#line 907 
  spin_unlock_irqrestore_2(lock,flags);
  
#line 908 
  return;
}


#line 911  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_tdls.c.aux"
static void ldv___ldv_spin_lock_90_1(spinlock_t *ldv_func_arg1)
{
  
#line 915 
  ldv_spin_model_lock((char *)"auto_tdls_lock_of_mwifiex_private");
  
#line 917 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 918 
  return;
}


#line 921  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_tdls.c.aux"
static void ldv_spin_unlock_irqrestore_91_1(spinlock_t *lock, unsigned long flags)
{
  
#line 925 
  ldv_spin_model_unlock((char *)"auto_tdls_lock_of_mwifiex_private");
  
#line 927 
  spin_unlock_irqrestore_2(lock,flags);
  
#line 928 
  return;
}


#line 931  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_tdls.c.aux"
static void ldv___ldv_spin_lock_92_1(spinlock_t *ldv_func_arg1)
{
  
#line 935 
  ldv_spin_model_lock((char *)"auto_tdls_lock_of_mwifiex_private");
  
#line 937 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 938 
  return;
}


#line 941  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_tdls.c.aux"
static void ldv_spin_unlock_irqrestore_93_0(spinlock_t *lock, unsigned long flags)
{
  
#line 945 
  ldv_spin_model_unlock((char *)"auto_tdls_lock_of_mwifiex_private");
  
#line 947 
  spin_unlock_irqrestore_2(lock,flags);
  
#line 948 
  return;
}


#line 951  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_tdls.c.aux"
static void ldv___ldv_spin_lock_94(spinlock_t *ldv_func_arg1)
{
  
#line 955 
  ldv_spin_model_lock((char *)"auto_tdls_lock_of_mwifiex_private");
  
#line 957 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 958 
  return;
}


#line 961  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_tdls.c.aux"
static void ldv_spin_unlock_irqrestore_95_0(spinlock_t *lock, unsigned long flags)
{
  
#line 965 
  ldv_spin_model_unlock((char *)"auto_tdls_lock_of_mwifiex_private");
  
#line 967 
  spin_unlock_irqrestore_2(lock,flags);
  
#line 968 
  return;
}


#line 971  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_tdls.c.aux"
static void ldv_spin_unlock_irqrestore_96_0(spinlock_t *lock, unsigned long flags)
{
  
#line 975 
  ldv_spin_model_unlock((char *)"auto_tdls_lock_of_mwifiex_private");
  
#line 977 
  spin_unlock_irqrestore_2(lock,flags);
  
#line 978 
  return;
}


#line 981  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_tdls.c.aux"
static void ldv___ldv_spin_lock_97_0(spinlock_t *ldv_func_arg1)
{
  
#line 985 
  ldv_spin_model_lock((char *)"auto_tdls_lock_of_mwifiex_private");
  
#line 987 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 988 
  return;
}


#line 991  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_tdls.c.aux"
static void ldv_spin_unlock_irqrestore_98_0(spinlock_t *lock, unsigned long flags)
{
  
#line 995 
  ldv_spin_model_unlock((char *)"auto_tdls_lock_of_mwifiex_private");
  
#line 997 
  spin_unlock_irqrestore_2(lock,flags);
  
#line 998 
  return;
}


#line 1001  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_tdls.c.aux"
static void ldv___ldv_spin_lock_99(spinlock_t *ldv_func_arg1)
{
  
#line 1005 
  ldv_spin_model_lock((char *)"auto_tdls_lock_of_mwifiex_private");
  
#line 1007 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 1008 
  return;
}


#line 1011  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_tdls.c.aux"
static void ldv_spin_unlock_irqrestore_100_0(spinlock_t *lock, unsigned long flags)
{
  
#line 1015 
  ldv_spin_model_unlock((char *)"auto_tdls_lock_of_mwifiex_private");
  
#line 1017 
  spin_unlock_irqrestore_2(lock,flags);
  
#line 1018 
  return;
}


#line 1021  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_tdls.c.aux"
static int ldv_mod_timer_101(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2)
{
  int tmp;
  
#line 1025 
  tmp = ldv_emg_mod_timer(ldv_func_arg1,ldv_func_arg2);
  
#line 1025 
  return tmp;
}


#line 1029  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_tdls.c.aux"
static void ldv___ldv_spin_lock_102_1(spinlock_t *ldv_func_arg1)
{
  
#line 1033 
  ldv_spin_model_lock((char *)"auto_tdls_lock_of_mwifiex_private");
  
#line 1035 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 1036 
  return;
}


#line 1039  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_tdls.c.aux"
static void ldv_spin_unlock_irqrestore_103_1(spinlock_t *lock, unsigned long flags)
{
  
#line 1043 
  ldv_spin_model_unlock((char *)"auto_tdls_lock_of_mwifiex_private");
  
#line 1045 
  spin_unlock_irqrestore_2(lock,flags);
  
#line 1046 
  return;
}


#line 1049  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_tdls.c.aux"
static int ldv_mod_timer_104(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2)
{
  int tmp;
  
#line 1053 
  tmp = ldv_emg_mod_timer(ldv_func_arg1,ldv_func_arg2);
  
#line 1053 
  return tmp;
}


#line 1057  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_tdls.c.aux"
static int ldv_mod_timer_105(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2)
{
  int tmp;
  
#line 1061 
  tmp = ldv_emg_mod_timer(ldv_func_arg1,ldv_func_arg2);
  
#line 1061 
  return tmp;
}


#line 1065  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_tdls.c.aux"
static int ldv_del_timer_106(struct timer_list *ldv_func_arg1)
{
  int tmp;
  
#line 1069 
  tmp = ldv_emg_del_timer(ldv_func_arg1);
  
#line 1069 
  return tmp;
}


#line 1083  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
void dev_err(struct device const *, char const * , ...);


#line 393  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ieee80211.h"
__inline static int ieee80211_is_assoc_req(__le16 fc)
{
  int __retres;
  
#line 395 
  __retres = ((int)fc & 252) == 0;
  
#line 395 
  return __retres;
}


#line 413  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ieee80211.h"
__inline static int ieee80211_is_reassoc_req(__le16 fc)
{
  int __retres;
  
#line 415 
  __retres = ((int)fc & 252) == 32;
  
#line 415 
  return __retres;
}


#line 3047  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
void netif_carrier_on(struct net_device *);


#line 4621  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/cfg80211.h"
void cfg80211_new_sta(struct net_device *, u8 const *, struct station_info *, gfp_t);


#line 4631 
void cfg80211_del_sta_sinfo(struct net_device *, u8 const *, struct station_info *, gfp_t);


#line 4641  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/cfg80211.h"
__inline static void cfg80211_del_sta(struct net_device *dev, u8 const *mac_addr, gfp_t gfp)
{
  
#line 4644 
  cfg80211_del_sta_sinfo(dev,mac_addr,(struct station_info *)0,gfp);
  
#line 4645 
  return;
}


#line 993  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.h"
void mwifiex_wake_up_net_dev_queue(struct net_device *netdev, struct mwifiex_adapter *adapter);


#line 1050 
void mwifiex_clean_txrx(struct mwifiex_private *priv);


#line 1051 
u8 mwifiex_check_last_packet_indication(struct mwifiex_private *priv);


#line 1088 
void mwifiex_wmm_del_peer_ra_list(struct mwifiex_private *priv, u8 const *ra_addr);


#line 1173 
void mwifiex_bt_coex_wlan_param_update_event(struct mwifiex_private *priv, struct sk_buff *event_skb);


#line 1182 
int mwifiex_handle_event_ext_scan_report(struct mwifiex_private *priv, void *buf);


#line 1436 
void mwifiex_uap_del_sta_data(struct mwifiex_private *priv, struct mwifiex_sta_node *node);


#line 1494 
int mwifiex_11h_handle_chanrpt_ready(struct mwifiex_private *priv, struct sk_buff *skb);


#line 1497 
void mwifiex_parse_tx_status_event(struct mwifiex_private *priv, void *event_body);


#line 1508 
int mwifiex_11h_handle_radar_detected(struct mwifiex_private *priv, struct sk_buff *skb);


#line 62  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11n_rxreorder.h"
void mwifiex_11n_ba_stream_timeout(struct mwifiex_private *priv, struct host_cmd_ds_11n_batimeout *event);


#line 82 
void mwifiex_11n_del_rx_reorder_tbl_by_ta(struct mwifiex_private *priv, u8 *ta);


#line 120  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/wmm.h"
void mwifiex_wmm_setup_queue_priorities(struct mwifiex_private *priv, struct ieee_types_wmm_parameter *wmm_ie);


#line 122 
void mwifiex_wmm_setup_ac_downgrade(struct mwifiex_private *priv);


#line 54  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11n.h"
void mwifiex_11n_delete_ba_stream(struct mwifiex_private *priv, u8 *del_ba);


#line 65 
void mwifiex_del_tx_ba_stream_tbl_by_ra(struct mwifiex_private *priv, u8 *ra);


#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/uap_event.c"
static int mwifiex_check_uap_capabilties(struct mwifiex_private *priv, struct sk_buff *event)
{
  int __retres;
  int evt_len;
  u8 *curr;
  u16 tlv_len;
  struct mwifiex_ie_types_data *tlv_hdr;
  
#line 33 
  struct ieee_types_wmm_parameter *wmm_param_ie = (struct ieee_types_wmm_parameter *)0;
  
#line 34 
  int mask = 15;
  
#line 36 
  priv->wmm_enabled = (unsigned char)0U;
  
#line 37 
  skb_pull(event,12U);
  
#line 38 
  evt_len = (int)event->len;
  
#line 39 
  curr = event->data;
  
#line 41 
  if (((priv->adapter)->debug_mask & 262144U) != 0U) 
#line 41 
                                                     print_hex_dump("\001","uap capabilties:",2,16,1,(void const *)event->data,(unsigned long)event->len,(_Bool)0); else ;
  
#line 44 
  goto ldv_61471;
  ldv_61470: 
#line 45 
  ;
  
#line 45 
  tlv_hdr = (struct mwifiex_ie_types_data *)curr;
  
#line 46 
  tlv_len = tlv_hdr->header.len;
  
#line 48 
  if ((unsigned long)evt_len < (unsigned long)tlv_len + 4UL) 
#line 49 
                                                             goto ldv_61464; else ;
  
#line 51 
  switch ((int)tlv_hdr->header.type) {
    case 45: 
#line 52 
    ;
    
#line 53 
    priv->ap_11n_enabled = (unsigned char)1U;
    
#line 54 
    goto ldv_61466;
    case 191: 
#line 56 
    ;
    
#line 57 
    priv->ap_11ac_enabled = (unsigned char)1U;
    
#line 58 
    goto ldv_61466;
    case 221: 
#line 60 
    ;
    
#line 64 
    wmm_param_ie = (struct ieee_types_wmm_parameter *)(curr + 2U);
    
#line 65 
    wmm_param_ie->vend_hdr.len = (unsigned char)tlv_len;
    
#line 66 
    wmm_param_ie->vend_hdr.element_id = (unsigned char)221U;
    
#line 68 
    if (((priv->adapter)->debug_mask & 32U) != 0U) {
      
#line 68 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 68 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"info: check uap capabilities:\t",(int)wmm_param_ie->qos_info_bitmap & mask); else ;
    }
    else ;
    
#line 73 
    mwifiex_wmm_setup_ac_downgrade(priv);
    
#line 74 
    priv->wmm_enabled = (unsigned char)1U;
    
#line 75 
    mwifiex_wmm_setup_queue_priorities(priv,wmm_param_ie);
    
#line 76 
    goto ldv_61466;
    default: 
#line 78 
    ;
    
#line 79 
    goto ldv_61466;
  }
  ldv_61466: 
#line 82 
  ;
  
#line 82 
  curr += (unsigned int)tlv_len + 4U;
  
#line 83 
  evt_len = (int)((unsigned int)(evt_len - (int)tlv_len) + 4294967292U);
  ldv_61471: 
#line 84 
  ;
  
#line 44 
  if ((unsigned int)evt_len > 3U) 
#line 46 
                                  goto ldv_61470; else 
#line 49 
                                                       goto ldv_61464;
  ldv_61464: 
#line 50 
  ;
  
#line 86 
  __retres = 0;
  
#line 86 
  return __retres;
}


#line 104  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/uap_event.c"
int mwifiex_process_uap_event(struct mwifiex_private *priv)
{
  int __retres;
  int len;
  int i;
  struct station_info sinfo;
  struct mwifiex_assoc_event *event;
  struct mwifiex_sta_node *node;
  u8 *deauth_mac;
  struct host_cmd_ds_11n_batimeout *ba_timeout;
  u16 ctrl;
  
#line 106 
  struct mwifiex_adapter *adapter = priv->adapter;
  
#line 108 
  u32 eventcause = adapter->event_cause;
  
#line 116 
  switch (eventcause) {
    bool tmp_1;
    int tmp_3;
    bool tmp_2;
    case (u32)45: 
#line 117 
    ;
    
#line 118 
    memset((void *)(& sinfo),0,840UL);
    
#line 119 
    event = (struct mwifiex_assoc_event *)(& adapter->event_body) + 2U;
    
#line 121 
    if ((unsigned int)event->type == 360U) {
      int tmp_0;
      
#line 122 
      len = -1;
      
#line 124 
      tmp_0 = ieee80211_is_assoc_req((unsigned short)((int)event->frame_control));
      
#line 124 
      if (tmp_0 != 0) 
#line 125 
                      len = 0;
      else {
        int tmp;
        
#line 126 
        tmp = ieee80211_is_reassoc_req((unsigned short)((int)event->frame_control));
        
#line 126 
        if (tmp != 0) 
#line 130 
                      len = 6; else ;
      }
      
#line 132 
      if (len != -1) {
        
#line 133 
        sinfo.assoc_req_ies = (u8 const *)(& event->data[len]);
        
#line 134 
        len = (int)((long)sinfo.assoc_req_ies - (long)(& event->frame_control));
        
#line 136 
        sinfo.assoc_req_ies_len = (unsigned long)((int)event->len - (int)((unsigned short)len));
      }
      else ;
    }
    else ;
    
#line 140 
    cfg80211_new_sta(priv->netdev,(u8 const *)(& event->sta_addr),& sinfo,208U);
    
#line 143 
    node = mwifiex_add_sta_entry(priv,(u8 const *)(& event->sta_addr));
    
#line 144 
    if (node == (struct mwifiex_sta_node *)0) {
      
#line 145 
      if ((adapter->debug_mask & 4U) != 0U) {
        
#line 145 
        if (adapter->dev != (struct device *)0) 
#line 145 
                                                _dev_info((struct device const *)adapter->dev,"could not create station entry!\n"); else ;
      }
      else ;
      
#line 147 
      __retres = -1;
      
#line 147 
      goto return_label;
    }
    else ;
    
#line 150 
    if ((unsigned int)priv->ap_11n_enabled == 0U) 
#line 151 
                                                  goto ldv_61486; else ;
    
#line 153 
    mwifiex_set_sta_ht_cap(priv,sinfo.assoc_req_ies,(int)sinfo.assoc_req_ies_len,node);
    
#line 156 
    i = 0;
    
#line 156 
    goto ldv_61488;
    ldv_61487: 
#line 157 
    ;
    
#line 157 
    if ((unsigned int)node->is_11n_enabled != 0U) 
#line 158 
                                                  node->ampdu_sta[i] = priv->aggr_prio_tbl[i].ampdu_user; else 
                                                                    
#line 161 
                                                                    node->ampdu_sta[i] = (unsigned char)255U;
    
#line 156 
    i += 1;
    ldv_61488: 
#line 157 
    ;
    
#line 156 
    if (i <= 7) 
#line 158 
                goto ldv_61487; else 
#line 161 
                                     goto ldv_61489;
    ldv_61489: 
#line 162 
    ;
    
#line 163 
    memset((void *)(& node->rx_seq),255,16UL);
    
#line 164 
    goto ldv_61486;
    case (u32)44: 
#line 165 
    ;
    
#line 166 
    deauth_mac = (u8 *)(& adapter->event_body) + 2U;
    
#line 168 
    cfg80211_del_sta(priv->netdev,(u8 const *)deauth_mac,208U);
    
#line 170 
    if ((unsigned int)priv->ap_11n_enabled != 0U) {
      
#line 171 
      mwifiex_11n_del_rx_reorder_tbl_by_ta(priv,deauth_mac);
      
#line 172 
      mwifiex_del_tx_ba_stream_tbl_by_ra(priv,deauth_mac);
    }
    else ;
    
#line 174 
    mwifiex_wmm_del_peer_ra_list(priv,(u8 const *)deauth_mac);
    
#line 175 
    mwifiex_del_sta_entry(priv,(u8 const *)deauth_mac);
    
#line 176 
    goto ldv_61486;
    case (u32)67: 
#line 177 
    ;
    
#line 178 
    priv->media_connected = (unsigned char)0U;
    
#line 179 
    tmp_1 = netif_carrier_ok((struct net_device const *)priv->netdev);
    
#line 179 
    if ((int)tmp_1 != 0) 
#line 180 
                         netif_carrier_off(priv->netdev); else ;
    
#line 181 
    mwifiex_stop_net_dev_queue(priv->netdev,adapter);
    
#line 183 
    mwifiex_clean_txrx(priv);
    
#line 184 
    mwifiex_del_all_sta_list(priv);
    
#line 185 
    goto ldv_61486;
    case (u32)68: 
#line 186 
    ;
    
#line 187 
    priv->media_connected = (unsigned char)1U;
    
#line 188 
    tmp_2 = netif_carrier_ok((struct net_device const *)priv->netdev);
    
#line 188 
    if (tmp_2) 
#line 188 
               tmp_3 = 0; else 
#line 188 
                               tmp_3 = 1;
    
#line 188 
    if (tmp_3) 
#line 189 
               netif_carrier_on(priv->netdev); else ;
    
#line 190 
    mwifiex_wake_up_net_dev_queue(priv->netdev,adapter);
    
#line 191 
    goto ldv_61486;
    case (u32)46: 
#line 192 
    ;
    
#line 193 
    if ((adapter->debug_mask & 32U) != 0U) {
      
#line 193 
      if (adapter->dev != (struct device *)0) 
#line 193 
                                              _dev_info((struct device const *)adapter->dev,"AP EVENT: event id: %#x\n",eventcause); else ;
    }
    else ;
    
#line 195 
    memcpy((void *)(priv->netdev)->dev_addr,(void const *)(& adapter->event_body) + 2U,6UL);
    
#line 197 
    if (priv->hist_data != (struct mwifiex_histogram_data *)0) 
#line 198 
                                                               mwifiex_hist_data_reset(priv); else ;
    
#line 199 
    mwifiex_check_uap_capabilties(priv,adapter->event_skb);
    
#line 200 
    goto ldv_61486;
    case (u32)76: 
#line 201 
    ;
    
#line 203 
    if ((adapter->debug_mask & 32U) != 0U) {
      
#line 203 
      if (adapter->dev != (struct device *)0) 
#line 203 
                                              _dev_info((struct device const *)adapter->dev,"AP EVENT: event id: %#x\n",eventcause); else ;
    }
    else ;
    
#line 205 
    goto ldv_61486;
    case (u32)66: 
#line 206 
    ;
    
#line 207 
    ctrl = *((__le16 *)(& adapter->event_body));
    
#line 208 
    if ((adapter->debug_mask & 32U) != 0U) {
      
#line 208 
      if (adapter->dev != (struct device *)0) 
#line 208 
                                              _dev_info((struct device const *)adapter->dev,"event: AMSDU_AGGR_CTRL %d\n",(int)ctrl); else ;
    }
    else ;
    
#line 211 
    if ((unsigned int)priv->media_connected != 0U) {
      int tmp_5;
      {
        int tmp_4;
        
#line 213 
        u16 __min1 = adapter->curr_tx_buf_size;
        
#line 213 
        u16 __min2 = ctrl;
        
#line 213 
        if ((int)__min1 < (int)__min2) 
#line 213 
                                       tmp_4 = (int)__min1; else 
#line 213 
                                                                 tmp_4 = (int)__min2;
        
#line 213 
        tmp_5 = tmp_4;
      }
      
#line 212 
      adapter->tx_buf_size = (unsigned short)tmp_5;
      
#line 214 
      if ((adapter->debug_mask & 32U) != 0U) {
        
#line 214 
        if (adapter->dev != (struct device *)0) 
#line 214 
                                                _dev_info((struct device const *)adapter->dev,"event: tx_buf_size %d\n",(int)adapter->tx_buf_size); else ;
      }
      else ;
    }
    else ;
    
#line 218 
    goto ldv_61486;
    case (u32)51: 
#line 219 
    ;
    
#line 220 
    if ((adapter->debug_mask & 32U) != 0U) {
      
#line 220 
      if (adapter->dev != (struct device *)0) 
#line 220 
                                              _dev_info((struct device const *)adapter->dev,"event: ADDBA Request\n"); else ;
    }
    else ;
    
#line 221 
    if ((unsigned int)priv->media_connected != 0U) 
#line 222 
                                                   mwifiex_send_cmd(priv,(unsigned short)207,(unsigned short)1,0U,(void *)(& adapter->event_body),(_Bool)0); else ;
    
#line 225 
    goto ldv_61486;
    case (u32)52: 
#line 226 
    ;
    
#line 227 
    if ((adapter->debug_mask & 32U) != 0U) {
      
#line 227 
      if (adapter->dev != (struct device *)0) 
#line 227 
                                              _dev_info((struct device const *)adapter->dev,"event: DELBA Request\n"); else ;
    }
    else ;
    
#line 228 
    if ((unsigned int)priv->media_connected != 0U) 
#line 229 
                                                   mwifiex_11n_delete_ba_stream(priv,(u8 *)(& adapter->event_body)); else ;
    
#line 230 
    goto ldv_61486;
    case (u32)55: 
#line 231 
    ;
    
#line 232 
    if ((adapter->debug_mask & 32U) != 0U) {
      
#line 232 
      if (adapter->dev != (struct device *)0) 
#line 232 
                                              _dev_info((struct device const *)adapter->dev,"event:  BA Stream timeout\n"); else ;
    }
    else ;
    
#line 233 
    if ((unsigned int)priv->media_connected != 0U) {
      
#line 234 
      ba_timeout = (struct host_cmd_ds_11n_batimeout *)(& adapter->event_body);
      
#line 235 
      mwifiex_11n_ba_stream_timeout(priv,ba_timeout);
    }
    else ;
    
#line 237 
    goto ldv_61486;
    case (u32)88: 
#line 238 
    ;
    
#line 239 
    if ((adapter->debug_mask & 32U) != 0U) {
      
#line 239 
      if (adapter->dev != (struct device *)0) 
#line 239 
                                              _dev_info((struct device const *)adapter->dev,"event: EXT_SCAN Report\n"); else ;
    }
    else ;
    
#line 240 
    if ((int)adapter->ext_scan != 0) {
      int tmp_6;
      
#line 241 
      tmp_6 = mwifiex_handle_event_ext_scan_report(priv,(void *)(adapter->event_skb)->data);
      
#line 241 
      __retres = tmp_6;
      
#line 241 
      goto return_label;
    }
    else ;
    
#line 243 
    goto ldv_61486;
    case (u32)116: 
#line 244 
    ;
    
#line 245 
    if ((adapter->debug_mask & 32U) != 0U) {
      
#line 245 
      if (adapter->dev != (struct device *)0) 
#line 245 
                                              _dev_info((struct device const *)adapter->dev,"event: TX_STATUS Report\n"); else ;
    }
    else ;
    
#line 246 
    mwifiex_parse_tx_status_event(priv,(void *)(& adapter->event_body));
    
#line 247 
    goto ldv_61486;
    case (u32)11: 
#line 248 
    ;
    
#line 249 
    if ((adapter->debug_mask & 32U) != 0U) {
      
#line 249 
      if (adapter->dev != (struct device *)0) 
#line 249 
                                              _dev_info((struct device const *)adapter->dev,"info: EVENT: SLEEP\n"); else ;
    }
    else ;
    
#line 251 
    adapter->ps_state = 1U;
    
#line 253 
    mwifiex_check_ps_cond(adapter);
    
#line 254 
    goto ldv_61486;
    case (u32)10: 
#line 256 
    ;
    
#line 257 
    if ((adapter->debug_mask & 32U) != 0U) {
      
#line 257 
      if (adapter->dev != (struct device *)0) 
#line 257 
                                              _dev_info((struct device const *)adapter->dev,"info: EVENT: AWAKE\n"); else ;
    }
    else ;
    
#line 258 
    if (((unsigned int)adapter->pps_uapsd_mode == 0U && (unsigned int)priv->media_connected != 0U) && (unsigned int)adapter->sleep_period.period != 0U) {
      
#line 260 
      adapter->pps_uapsd_mode = (unsigned short)1U;
      
#line 261 
      if ((adapter->debug_mask & 32U) != 0U) {
        
#line 261 
        if (adapter->dev != (struct device *)0) 
#line 261 
                                                _dev_info((struct device const *)adapter->dev,"event: PPS/UAPSD mode activated\n"); else ;
      }
      else ;
    }
    else ;
    
#line 264 
    adapter->tx_lock_flag = (unsigned char)0U;
    
#line 265 
    if ((unsigned int)adapter->pps_uapsd_mode != 0U && (unsigned int)adapter->gen_null_pkt != 0U) {
      u8 tmp_8;
      
#line 266 
      tmp_8 = mwifiex_check_last_packet_indication(priv);
      
#line 266 
      if ((unsigned int)tmp_8 != 0U) {
        int tmp_7;
        
#line 267 
        if ((unsigned int)adapter->data_sent != 0U) {
          
#line 268 
          adapter->ps_state = 0U;
          
#line 269 
          adapter->pm_wakeup_card_req = (unsigned char)0U;
          
#line 270 
          adapter->pm_wakeup_fw_try = 0U;
          
#line 271 
          goto ldv_61486;
        }
        else ;
        
#line 273 
        tmp_7 = mwifiex_send_null_packet(priv,(unsigned char)9);
        
#line 273 
        if (tmp_7 == 0) 
#line 277 
                        adapter->ps_state = 3U; else ;
        
#line 279 
        __retres = 0;
        
#line 279 
        goto return_label;
      }
      else ;
    }
    else ;
    
#line 282 
    adapter->ps_state = 0U;
    
#line 283 
    adapter->pm_wakeup_card_req = (unsigned char)0U;
    
#line 284 
    adapter->pm_wakeup_fw_try = 0U;
    
#line 285 
    goto ldv_61486;
    case (u32)84: 
#line 287 
    ;
    
#line 288 
    if ((adapter->debug_mask & 32U) != 0U) {
      
#line 288 
      if (adapter->dev != (struct device *)0) 
#line 288 
                                              _dev_info((struct device const *)adapter->dev,"event: Channel Report\n"); else ;
    }
    else ;
    
#line 289 
    mwifiex_11h_handle_chanrpt_ready(priv,adapter->event_skb);
    
#line 290 
    goto ldv_61486;
    case (u32)83: 
#line 291 
    ;
    
#line 292 
    if ((adapter->debug_mask & 32U) != 0U) {
      
#line 292 
      if (adapter->dev != (struct device *)0) 
#line 292 
                                              _dev_info((struct device const *)adapter->dev,"event: Radar detected\n"); else ;
    }
    else ;
    
#line 293 
    mwifiex_11h_handle_radar_detected(priv,adapter->event_skb);
    
#line 294 
    goto ldv_61486;
    case (u32)118: 
#line 295 
    ;
    
#line 296 
    dev_err((struct device const *)adapter->dev,"EVENT: BT coex wlan param update\n");
    
#line 297 
    mwifiex_bt_coex_wlan_param_update_event(priv,adapter->event_skb);
    
#line 299 
    goto ldv_61486;
    default: 
#line 300 
    ;
    
#line 301 
    if ((adapter->debug_mask & 32U) != 0U) {
      
#line 301 
      if (adapter->dev != (struct device *)0) 
#line 301 
                                              _dev_info((struct device const *)adapter->dev,"event: unknown event id: %#x\n",eventcause); else ;
    }
    else ;
    
#line 303 
    goto ldv_61486;
  }
  ldv_61486: 
#line 306 
  ;
  
#line 306 
  __retres = 0;
  return_label: 
#line 306 
                return __retres;
}


#line 313  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/uap_event.c"
void mwifiex_uap_del_sta_data(struct mwifiex_private *priv, struct mwifiex_sta_node *node)
{
  
#line 316 
  if ((unsigned int)priv->ap_11n_enabled != 0U && (unsigned int)node->is_11n_enabled != 0U) {
    
#line 317 
    mwifiex_11n_del_rx_reorder_tbl_by_ta(priv,(u8 *)(& node->mac_addr));
    
#line 318 
    mwifiex_del_tx_ba_stream_tbl_by_ra(priv,(u8 *)(& node->mac_addr));
  }
  else ;
  
#line 320 
  mwifiex_del_sta_entry(priv,(u8 const *)(& node->mac_addr));
  
#line 322 
  return;
}

unsigned short __builtin_bswap16(unsigned short);


#line 5  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_wmm.c.aux"
void ldv_atomic_sub(int i, atomic_t *v);


#line 46  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/swab.h"
__inline static __u16 __fswab16(__u16 val)
{
  __u16 tmp;
  
#line 49 
  tmp = __builtin_bswap16((unsigned short)((int)val));
  
#line 49 
  return tmp;
}


#line 112  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list.h"
void __list_del_entry(struct list_head *);


#line 154  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list.h"
__inline static void list_move(struct list_head *list, struct list_head *head)
{
  
#line 156 
  __list_del_entry(list);
  
#line 157 
  list_add(list,head);
  
#line 158 
  return;
}


#line 67  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/atomic.h"
static void atomic_sub(int i, atomic_t *v);


#line 98 
static void atomic_inc_3(atomic_t *v);


#line 114 
static void atomic_dec_2(atomic_t *v);


#line 93  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
void __raw_spin_lock_init(raw_spinlock_t *, char const *, struct lock_class_key *);


#line 299  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
__inline static raw_spinlock_t *spinlock_check(spinlock_t *lock)
{
  raw_spinlock_t *__retres;
  
#line 301 
  __retres = & lock->__anonCompField_spinlock_18.rlock;
  
#line 301 
  return __retres;
}


#line 446  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_unlock_irqrestore_3(spinlock_t *lock, unsigned long flags)
{
  {
    unsigned long __dummy;
    unsigned long __dummy2;
    
  }
  
#line 448 
  _raw_spin_unlock_irqrestore(& lock->__anonCompField_spinlock_18.rlock,flags);
  
#line 449 
  return;
}


#line 478 
static void ldv_spin_unlock_irqrestore_77(spinlock_t *lock, unsigned long flags);


#line 482 
static void ldv_spin_unlock_irqrestore_79_2(spinlock_t *lock, unsigned long flags);


#line 486 
static void ldv_spin_unlock_irqrestore_81_2(spinlock_t *lock, unsigned long flags);


#line 490 
static void ldv_spin_unlock_irqrestore_83_2(spinlock_t *lock, unsigned long flags);


#line 494 
static void ldv_spin_unlock_irqrestore_85_2(spinlock_t *lock, unsigned long flags);


#line 498 
static void ldv_spin_unlock_irqrestore_86(spinlock_t *lock, unsigned long flags);


#line 502 
static void ldv_spin_unlock_irqrestore_87_0(spinlock_t *lock, unsigned long flags);


#line 506 
static void ldv_spin_unlock_irqrestore_89_2(spinlock_t *lock, unsigned long flags);


#line 510 
static void ldv_spin_unlock_irqrestore_90(spinlock_t *lock, unsigned long flags);


#line 514 
static void ldv_spin_unlock_irqrestore_92(spinlock_t *lock, unsigned long flags);


#line 518 
static void ldv_spin_unlock_irqrestore_94_1(spinlock_t *lock, unsigned long flags);


#line 522 
static void ldv_spin_unlock_irqrestore_95_1(spinlock_t *lock, unsigned long flags);


#line 526 
static void ldv_spin_unlock_irqrestore_96_1(spinlock_t *lock, unsigned long flags);


#line 530 
static void ldv_spin_unlock_irqrestore_98_1(spinlock_t *lock, unsigned long flags);


#line 534 
static void ldv_spin_unlock_irqrestore_99_1(spinlock_t *lock, unsigned long flags);


#line 538 
static void ldv_spin_unlock_irqrestore_100_1(spinlock_t *lock, unsigned long flags);


#line 542 
static void ldv_spin_unlock_irqrestore_101_0(spinlock_t *lock, unsigned long flags);


#line 546 
static void ldv_spin_unlock_irqrestore_102(spinlock_t *lock, unsigned long flags);


#line 550 
static void ldv_spin_unlock_irqrestore_104(spinlock_t *lock, unsigned long flags);


#line 554 
static void ldv_spin_unlock_irqrestore_105_0(spinlock_t *lock, unsigned long flags);


#line 558 
static void ldv_spin_unlock_irqrestore_107_0(spinlock_t *lock, unsigned long flags);


#line 70  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_wmm.c.aux"
static void ldv___ldv_spin_lock_76(spinlock_t *ldv_func_arg1);


#line 74 
static void ldv___ldv_spin_lock_78_2(spinlock_t *ldv_func_arg1);


#line 78 
static void ldv___ldv_spin_lock_80_1(spinlock_t *ldv_func_arg1);


#line 82 
static void ldv___ldv_spin_lock_82_2(spinlock_t *ldv_func_arg1);


#line 86 
static void ldv___ldv_spin_lock_84_1(spinlock_t *ldv_func_arg1);


#line 90 
static void ldv___ldv_spin_lock_88_1(spinlock_t *ldv_func_arg1);


#line 94 
static void ldv___ldv_spin_lock_91(spinlock_t *ldv_func_arg1);


#line 98 
static void ldv___ldv_spin_lock_93_0(spinlock_t *ldv_func_arg1);


#line 102 
static void ldv___ldv_spin_lock_97_1(spinlock_t *ldv_func_arg1);


#line 106 
static void ldv___ldv_spin_lock_103(spinlock_t *ldv_func_arg1);


#line 110 
static void ldv___ldv_spin_lock_106_0(spinlock_t *ldv_func_arg1);


#line 188  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ktime.h"
__inline static s64 ktime_divns(ktime_t const kt, s64 div)
{
  s64 __retres;
  {
    
#line 194 
    int __ret_warn_on = div < 0LL;
    
#line 194 
    if ((long)(__ret_warn_on != 0) != 0L) 
#line 194 
                                          warn_slowpath_null("include/linux/ktime.h",194); else ;
    
#line 194 
    long tmp = (long)(__ret_warn_on != 0);
  }
  
#line 195 
  __retres = kt.tv64 / div;
  
#line 195 
  return __retres;
}


#line 204  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ktime.h"
__inline static s64 ktime_to_ms(ktime_t const kt)
{
  s64 tmp;
  
#line 206 
  tmp = ktime_divns(kt,1000000LL);
  
#line 206 
  return tmp;
}


#line 12  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timekeeping.h"
void do_gettimeofday(struct timeval *);


#line 83  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/idr.h"
int idr_for_each(struct idr *, int (*)(int , void *, void *), void *);


#line 88 
void idr_destroy(struct idr *);


#line 581  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/slab.h"
static void *kzalloc_2(size_t size, gfp_t flags);


#line 1259  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static struct sk_buff *skb_peek(struct sk_buff_head const *list_)
{
  
#line 1261 
  struct sk_buff *skb = list_->next;
  
#line 1263 
  if (skb == (struct sk_buff *)list_) 
#line 1264 
                                      skb = (struct sk_buff *)0; else ;
  
#line 1265 
  return skb;
}


#line 1331  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void __skb_queue_head_init(struct sk_buff_head *list)
{
  struct sk_buff *tmp;
  
#line 1333 
  tmp = (struct sk_buff *)list;
  
#line 1333 
  list->next = tmp;
  
#line 1333 
  list->prev = tmp;
  
#line 1334 
  list->qlen = 0U;
  
#line 1335 
  return;
}


#line 1345  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void skb_queue_head_init(struct sk_buff_head *list)
{
  
#line 1347 
  spinlock_check(& list->lock);
  {
    struct lock_class_key __key;
    
#line 1347 
    __raw_spin_lock_init(& list->lock.__anonCompField_spinlock_18.rlock,"&(&list->lock)->rlock",& __key);
  }
  
#line 1348 
  __skb_queue_head_init(list);
  
#line 1349 
  return;
}


#line 2851  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static ktime_t net_timedelta(ktime_t t)
{
  ktime_t tmp;
  
#line 2853 
  tmp = ktime_get_real();
  
#line 2853 
  ktime_t __constr_expr_28 = {.tv64 = tmp.tv64 - t.tv64};
  
#line 2853 
  return __constr_expr_28;
}


#line 157  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/etherdevice.h"
__inline static bool is_broadcast_ether_addr(u8 const *addr)
{
  bool __retres;
  
#line 161 
  __retres = (_Bool)((unsigned int)(((int)*((u16 const *)addr) & (int)*((u16 const *)(addr + 2U))) & (int)*((u16 const *)(addr + 4U))) == 65535U);
  
#line 161 
  return __retres;
}


#line 233  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/etherdevice.h"
__inline static void eth_broadcast_addr(u8 *addr)
{
  
#line 235 
  memset((void *)addr,255,6UL);
  
#line 236 
  return;
}


#line 1045  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.h"
int mwifiex_process_tx(struct mwifiex_private *priv, struct sk_buff *skb, struct mwifiex_tx_param *tx_param);


#line 1170 
void mwifiex_set_ba_params(struct mwifiex_private *priv);


#line 1189  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.h"
__inline static u8 mwifiex_queuing_ra_based(struct mwifiex_private *priv)
{
  u8 __retres;
  
#line 1195 
  if (priv->bss_mode == 2U && ((unsigned long)priv->bss_role & 1UL) == 0UL) {
    
#line 1197 
    __retres = (unsigned char)0U;
    
#line 1197 
    goto return_label;
  }
  else ;
  
#line 1199 
  __retres = (unsigned char)1U;
  return_label: 
#line 1199 
                return __retres;
}


#line 1291  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.h"
__inline static bool mwifiex_is_skb_mgmt_frame(struct sk_buff *skb)
{
  bool __retres;
  
#line 1293 
  __retres = (_Bool)(*((__le32 *)skb->data) == 229U);
  
#line 1293 
  return __retres;
}


#line 55  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/wmm.h"
__inline static int mwifiex_get_tid(struct mwifiex_ra_list_tbl *ptr)
{
  int __retres;
  struct sk_buff *skb;
  int tmp;
  
#line 59 
  tmp = skb_queue_empty((struct sk_buff_head const *)(& ptr->skb_head));
  
#line 59 
  if (tmp != 0) {
    
#line 60 
    __retres = 0;
    
#line 60 
    goto return_label;
  }
  else ;
  
#line 62 
  skb = skb_peek((struct sk_buff_head const *)(& ptr->skb_head));
  
#line 64 
  __retres = (int)skb->priority;
  return_label: 
#line 64 
                return __retres;
}


#line 71  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/wmm.h"
__inline static int mwifiex_wmm_list_len(struct list_head *head)
{
  struct list_head *pos;
  
#line 74 
  int count = 0;
  
#line 76 
  pos = head->next;
  
#line 76 
  goto ldv_61414;
  ldv_61413: 
#line 77 
  ;
  
#line 77 
  count += 1;
  
#line 76 
  pos = pos->next;
  ldv_61414: 
#line 77 
  ;
  
#line 76 
  if (pos != head) 
#line 78 
                   goto ldv_61413; else 
#line 81 
                                        goto ldv_61415;
  ldv_61415: 
#line 82 
  ;
  
#line 79 
  return count;
}


#line 102 
void mwifiex_ralist_add(struct mwifiex_private *priv, u8 const *ra);


#line 103 
void mwifiex_rotate_priolists(struct mwifiex_private *priv, struct mwifiex_ra_list_tbl *ra, int tid);


#line 108 
int mwifiex_is_ralist_valid(struct mwifiex_private *priv, struct mwifiex_ra_list_tbl *ra_list, int ptr_index);


#line 111 
u8 mwifiex_wmm_compute_drv_pkt_delay(struct mwifiex_private *priv, struct sk_buff const *skb);


#line 113 
void mwifiex_wmm_init(struct mwifiex_adapter *adapter);


#line 115 
u32 mwifiex_wmm_process_association_req(struct mwifiex_private *priv, u8 **assoc_buf, struct ieee_types_wmm_parameter *wmm_ie, struct ieee80211_ht_cap *ht_cap);


#line 123 
int mwifiex_ret_wmm_get_status(struct mwifiex_private *priv, struct host_cmd_ds_command const *resp);


#line 130 
struct mwifiex_ra_list_tbl *mwifiex_wmm_get_ralist_node(struct mwifiex_private *priv, u8 tid, u8 const *ra_addr);


#line 28  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11n_aggr.h"
int mwifiex_11n_aggregate_pkt(struct mwifiex_private *priv, struct mwifiex_ra_list_tbl *pra_list, int ptrindex, unsigned long ra_list_flags);


#line 51  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11n_rxreorder.h"
__inline static void mwifiex_reset_11n_rx_seq_num(struct mwifiex_private *priv)
{
  
#line 53 
  memset((void *)(& priv->rx_seq),255,16UL);
  
#line 54 
  return;
}


#line 49  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11n.h"
void mwifiex_create_ba_tbl(struct mwifiex_private *priv, u8 *ra, int tid, enum mwifiex_ba_status ba_status);


#line 51 
int mwifiex_send_addba(struct mwifiex_private *priv, int tid, u8 *peer_mac);


#line 52 
int mwifiex_send_delba(struct mwifiex_private *priv, int tid, u8 *peer_mac, int initiator);


#line 69  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11n.h"
__inline static u8 mwifiex_is_station_ampdu_allowed(struct mwifiex_private *priv, struct mwifiex_ra_list_tbl *ptr, int tid)
{
  u8 __retres;
  
#line 72 
  struct mwifiex_sta_node *node = mwifiex_get_sta_entry(priv,(u8 const *)(& ptr->ra));
  
#line 74 
  if ((long)(node == (struct mwifiex_sta_node *)0) != 0L) {
    
#line 75 
    __retres = (unsigned char)0U;
    
#line 75 
    goto return_label;
  }
  else ;
  
#line 77 
  __retres = (unsigned char)((unsigned int)node->ampdu_sta[tid] != 255U);
  return_label: 
#line 77 
                return __retres;
}


#line 82  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11n.h"
__inline static u8 mwifiex_is_ampdu_allowed(struct mwifiex_private *priv, struct mwifiex_ra_list_tbl *ptr, int tid)
{
  u8 __retres;
  bool tmp;
  
#line 85 
  tmp = is_broadcast_ether_addr((u8 const *)(& ptr->ra));
  
#line 85 
  if ((int)tmp != 0) {
    
#line 86 
    __retres = (unsigned char)0U;
    
#line 86 
    goto return_label;
  }
  else ;
  
#line 87 
  if (((unsigned long)priv->bss_role & 1UL) != 0UL) {
    u8 tmp_0;
    
#line 88 
    tmp_0 = mwifiex_is_station_ampdu_allowed(priv,ptr,tid);
    
#line 88 
    __retres = tmp_0;
    
#line 88 
    goto return_label;
  }
  else {
    
#line 90 
    if ((int)ptr->tdls_link != 0) {
      u8 tmp_1;
      
#line 91 
      tmp_1 = mwifiex_is_station_ampdu_allowed(priv,ptr,tid);
      
#line 91 
      __retres = tmp_1;
      
#line 91 
      goto return_label;
    }
    else ;
    
#line 94 
    __retres = (unsigned char)((unsigned int)priv->aggr_prio_tbl[tid].ampdu_ap != 255U);
    
#line 94 
    goto return_label;
  }
  return_label: 
#line 87 
                return __retres;
}


#line 102  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11n.h"
__inline static u8 mwifiex_is_amsdu_allowed(struct mwifiex_private *priv, int tid)
{
  u8 __retres;
  
#line 106 
  __retres = (unsigned char)(((unsigned int)priv->aggr_prio_tbl[tid].amsdu != 255U && ((unsigned int)priv->is_data_rate_auto != 0U || ((int)priv->bitmap_rates[2] & 3) == 0)) != 0);
  
#line 106 
  return __retres;
}


#line 112  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11n.h"
__inline static u8 mwifiex_space_avail_for_new_ba_stream(struct mwifiex_adapter *adapter)
{
  u8 __retres;
  struct mwifiex_private *priv;
  u8 i;
  u32 ba_stream_max;
  
#line 117 
  u32 ba_stream_num = 0U;
  
#line 119 
  ba_stream_max = 2U;
  
#line 121 
  i = (unsigned char)0U;
  
#line 121 
  goto ldv_61626;
  ldv_61625: 
#line 122 
  ;
  
#line 122 
  priv = adapter->priv[(int)i];
  
#line 123 
  if (priv != (struct mwifiex_private *)0) {
    int tmp;
    
#line 124 
    tmp = mwifiex_wmm_list_len(& priv->tx_ba_stream_tbl_ptr);
    
#line 125 
    ba_stream_num = (unsigned int)tmp + ba_stream_num;
  }
  else ;
  
#line 121 
  i = (u8)((int)i + 1);
  ldv_61626: 
#line 122 
  ;
  
#line 121 
  if ((int)adapter->priv_num > (int)i) 
#line 123 
                                       goto ldv_61625; else 
#line 126 
                                                            goto ldv_61627;
  ldv_61627: 
#line 127 
  ;
  
#line 128 
  if ((unsigned int)adapter->fw_api_ver == 15U) {
    
#line 129 
    ba_stream_max = (adapter->hw_dot_11n_dev_cap >> 18) & 15U;
    
#line 131 
    if (ba_stream_max == 0U) 
#line 132 
                             ba_stream_max = 2U; else ;
  }
  else ;
  
#line 135 
  __retres = (unsigned char)(ba_stream_num < ba_stream_max);
  
#line 135 
  return __retres;
}


#line 144  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11n.h"
__inline static u8 mwifiex_find_stream_to_delete(struct mwifiex_private *priv, int ptr_tid, int *ptid, u8 *ra)
{
  int tid;
  struct mwifiex_tx_ba_stream_tbl *tx_tbl;
  unsigned long flags;
  struct mwifiex_tx_ba_stream_tbl *tmp;
  struct mwifiex_tx_ba_stream_tbl *tmp_0;
  
#line 148 
  u8 ret = (unsigned char)0U;
  
#line 152 
  tid = (int)priv->aggr_prio_tbl[ptr_tid].ampdu_user;
  
#line 154 
  ldv___ldv_spin_lock_76(& priv->tx_ba_stream_tbl_lock);
  {
    
#line 155 
    struct list_head const *__mptr = (struct list_head const *)priv->tx_ba_stream_tbl_ptr.next;
    
#line 155 
    tmp = (struct mwifiex_tx_ba_stream_tbl *)__mptr;
  }
  
#line 155 
  tx_tbl = tmp;
  
#line 155 
  goto ldv_61643;
  ldv_61642: 
#line 156 
  ;
  
#line 156 
  if ((int)priv->aggr_prio_tbl[tx_tbl->tid].ampdu_user < tid) {
    
#line 157 
    tid = (int)priv->aggr_prio_tbl[tx_tbl->tid].ampdu_user;
    
#line 158 
    *ptid = tx_tbl->tid;
    
#line 159 
    memcpy((void *)ra,(void const *)(& tx_tbl->ra),6UL);
    
#line 160 
    ret = (unsigned char)1U;
  }
  else ;
  {
    
#line 155 
    struct list_head const *__mptr_0 = (struct list_head const *)tx_tbl->list.next;
    
#line 155 
    tmp_0 = (struct mwifiex_tx_ba_stream_tbl *)__mptr_0;
  }
  
#line 155 
  tx_tbl = tmp_0;
  ldv_61643: 
#line 157 
  ;
  
#line 155 
  if (& tx_tbl->list != & priv->tx_ba_stream_tbl_ptr) 
#line 157 
                                                      goto ldv_61642; else 
                                                                    
#line 160 
                                                                    goto ldv_61644;
  ldv_61644: 
#line 161 
  ;
  
#line 163 
  ldv_spin_unlock_irqrestore_77(& priv->tx_ba_stream_tbl_lock,flags);
  
#line 165 
  return ret;
}


#line 171  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11n.h"
__inline static int mwifiex_is_sta_11n_enabled(struct mwifiex_private *priv, struct mwifiex_sta_node *node)
{
  int __retres;
  
#line 175 
  if ((node == (struct mwifiex_sta_node *)0 || (unsigned int)priv->bss_role != 1U) || (unsigned int)priv->ap_11n_enabled == 0U) {
    
#line 177 
    __retres = 0;
    
#line 177 
    goto return_label;
  }
  else ;
  
#line 179 
  __retres = (int)node->is_11n_enabled;
  return_label: 
#line 179 
                return __retres;
}


#line 183  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11n.h"
__inline static u8 mwifiex_tdls_peer_11n_enabled(struct mwifiex_private *priv, u8 const *ra)
{
  u8 __retres;
  
#line 185 
  struct mwifiex_sta_node *node = mwifiex_get_sta_entry(priv,ra);
  
#line 186 
  if (node != (struct mwifiex_sta_node *)0) {
    
#line 187 
    __retres = node->is_11n_enabled;
    
#line 187 
    goto return_label;
  }
  else ;
  
#line 189 
  __retres = (unsigned char)0U;
  return_label: 
#line 189 
                return __retres;
}


#line 40  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/wmm.c"
static bool disable_tx_amsdu;

#line 44  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/wmm.c"
static u8 const wmm_info_ie[9U] = {(unsigned char)221U, (unsigned char)7U, (unsigned char)0U, (unsigned char)80U, (unsigned char)242U, (unsigned char)2U, (unsigned char)0U, (unsigned char)1U, (unsigned char)0U};

#line 49  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/wmm.c"
static u8 const wmm_aci_to_qidx_map[4U] = {(unsigned char)1U, (unsigned char)0U, (unsigned char)2U, (unsigned char)3U};

#line 55  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/wmm.c"
static u8 tos_to_tid[8U] = {(unsigned char)1U, (unsigned char)2U, (unsigned char)0U, (unsigned char)3U, (unsigned char)4U, (unsigned char)5U, (unsigned char)6U, (unsigned char)7U};

#line 67  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/wmm.c"
static u8 ac_to_tid[4U][2U] = {{(unsigned char)1U, (unsigned char)2U}, {(unsigned char)0U, (unsigned char)3U}, {(unsigned char)4U, (unsigned char)5U}, {(unsigned char)6U, (unsigned char)7U}};

#line 73  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/wmm.c"
static void mwifiex_wmm_ac_debug_print(struct ieee_types_wmm_ac_parameters const *ac_param)
{
  
#line 75 
  char const *ac_str[4U] = {"BK", "BE", "VI", "VO"};
  {
    
#line 77 
    struct _ddebug descriptor = {.modname = "mwifiex", .function = "mwifiex_wmm_ac_debug_print", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/wmm.c", .format = "info: WMM AC_%s: ACI=%d, ACM=%d, Aifsn=%d, ", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))86U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 77 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 77 
                                                        __dynamic_pr_debug(& descriptor,"mwifiex",ac_str[(int)wmm_aci_to_qidx_map[((int)ac_param->aci_aifsn_bitmap >> 5) & 3]],((int)ac_param->aci_aifsn_bitmap >> 5) & 3,((int)ac_param->aci_aifsn_bitmap >> 4) & 1,(int)ac_param->aci_aifsn_bitmap & 15,(int)ac_param->ecw_bitmap & 15,(int)ac_param->ecw_bitmap >> 4,(int)ac_param->tx_op_limit); else ;
  }
  
#line 79 
  return;
}


#line 95  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/wmm.c"
static struct mwifiex_ra_list_tbl *mwifiex_wmm_allocate_ralist_node(struct mwifiex_adapter *adapter, u8 const *ra)
{
  struct mwifiex_ra_list_tbl *__retres;
  struct mwifiex_ra_list_tbl *ra_list;
  
#line 99 
  ra_list = (struct mwifiex_ra_list_tbl *)kzalloc_2(144UL,32U);
  
#line 100 
  if (ra_list == (struct mwifiex_ra_list_tbl *)0) {
    
#line 101 
    __retres = (struct mwifiex_ra_list_tbl *)0;
    
#line 101 
    goto return_label;
  }
  else ;
  
#line 103 
  INIT_LIST_HEAD(& ra_list->list);
  
#line 104 
  skb_queue_head_init(& ra_list->skb_head);
  
#line 106 
  memcpy((void *)(& ra_list->ra),(void const *)ra,6UL);
  
#line 108 
  ra_list->total_pkt_count = (unsigned short)0U;
  
#line 110 
  if ((adapter->debug_mask & 1073741824U) != 0U) {
    
#line 110 
    if (adapter->dev != (struct device *)0) 
#line 110 
                                            _dev_info((struct device const *)adapter->dev,"info: allocated ra_list %p\n",ra_list); else ;
  }
  else ;
  
#line 112 
  __retres = ra_list;
  return_label: 
#line 112 
                return __retres;
}


#line 118  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/wmm.c"
static u8 mwifiex_get_random_ba_threshold(void)
{
  u32 sec;
  u32 usec;
  struct timeval ba_tstamp;
  u8 ba_threshold;
  
#line 129 
  do_gettimeofday(& ba_tstamp);
  
#line 130 
  sec = ((unsigned int)ba_tstamp.tv_sec & 65535U) + (unsigned int)(ba_tstamp.tv_sec >> 16);
  
#line 131 
  usec = ((unsigned int)ba_tstamp.tv_usec & 65535U) + (unsigned int)(ba_tstamp.tv_usec >> 16);
  
#line 132 
  ba_threshold = (unsigned char)(((unsigned int)((unsigned char)usec) & 15U) + 16U);
  
#line 135 
  return ba_threshold;
}


#line 142  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/wmm.c"
void mwifiex_ralist_add(struct mwifiex_private *priv, u8 const *ra)
{
  int i;
  struct mwifiex_ra_list_tbl *ra_list;
  struct mwifiex_sta_node *node;
  unsigned long flags;
  u8 tmp_2;
  
#line 146 
  struct mwifiex_adapter *adapter = priv->adapter;
  
#line 151 
  i = 0;
  
#line 151 
  goto ldv_61712;
  ldv_61711: 
#line 152 
  ;
  
#line 152 
  ra_list = mwifiex_wmm_allocate_ralist_node(adapter,ra);
  
#line 153 
  if ((adapter->debug_mask & 1073741824U) != 0U) {
    
#line 153 
    if (adapter->dev != (struct device *)0) 
#line 153 
                                            _dev_info((struct device const *)adapter->dev,"info: created ra_list %p\n",ra_list); else ;
  }
  else ;
  
#line 156 
  if (ra_list == (struct mwifiex_ra_list_tbl *)0) 
#line 157 
                                                  goto ldv_61710; else ;
  
#line 159 
  ra_list->is_11n_enabled = 0U;
  
#line 160 
  ra_list->tdls_link = (_Bool)0;
  
#line 161 
  ra_list->ba_status = BA_SETUP_NONE;
  
#line 162 
  ra_list->amsdu_in_ampdu = (unsigned char)0U;
  
#line 163 
  tmp_2 = mwifiex_queuing_ra_based(priv);
  
#line 163 
  if ((unsigned int)tmp_2 == 0U) {
    int tmp_0;
    
#line 164 
    tmp_0 = mwifiex_get_tdls_link_status(priv,ra);
    
#line 164 
    if (tmp_0 == 2) {
      u8 tmp;
      
#line 166 
      ra_list->tdls_link = (_Bool)1;
      
#line 168 
      tmp = mwifiex_tdls_peer_11n_enabled(priv,ra);
      
#line 167 
      ra_list->is_11n_enabled = (unsigned int)tmp;
    }
    else 
#line 170 
         ra_list->is_11n_enabled = (unsigned int)(((((int)(priv->adapter)->config_bands & 8) != 0 || ((int)(priv->adapter)->config_bands & 16) != 0) && priv->curr_bss_params.bss_descriptor.bcn_ht_cap != (struct ieee80211_ht_cap *)0) != 0);
  }
  else {
    int tmp_1;
    
#line 173 
    ldv___ldv_spin_lock_78_2(& priv->sta_list_spinlock);
    
#line 174 
    node = mwifiex_get_sta_entry(priv,ra);
    
#line 176 
    tmp_1 = mwifiex_is_sta_11n_enabled(priv,node);
    
#line 175 
    ra_list->is_11n_enabled = (unsigned int)tmp_1;
    
#line 177 
    if (ra_list->is_11n_enabled != 0U) 
#line 178 
                                       ra_list->max_amsdu = node->max_amsdu; else ;
    
#line 179 
    ldv_spin_unlock_irqrestore_79_2(& priv->sta_list_spinlock,flags);
  }
  
#line 182 
  if ((adapter->debug_mask & 8U) != 0U) {
    
#line 182 
    if (adapter->dev != (struct device *)0) 
#line 182 
                                            _dev_info((struct device const *)adapter->dev,"data: ralist %p: is_11n_enabled=%d\n",ra_list,ra_list->is_11n_enabled); else ;
  }
  else ;
  
#line 185 
  if (ra_list->is_11n_enabled != 0U) {
    
#line 186 
    ra_list->ba_pkt_count = (unsigned short)0U;
    
#line 187 
    ra_list->ba_packet_thr = mwifiex_get_random_ba_threshold();
  }
  else ;
  
#line 190 
  list_add_tail(& ra_list->list,& priv->wmm.tid_tbl_ptr[i].ra_list);
  
#line 151 
  i += 1;
  ldv_61712: 
#line 152 
  ;
  
#line 151 
  if (i <= 7) 
#line 153 
              goto ldv_61711; else 
#line 156 
                                   goto ldv_61710;
  ldv_61710: 
#line 157 
  ;
  
#line 158 
  return;
}


#line 198  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/wmm.c"
static void mwifiex_wmm_default_queue_priorities(struct mwifiex_private *priv)
{
  
#line 201 
  priv->wmm.queue_priority[0] = (unsigned char)3U;
  
#line 202 
  priv->wmm.queue_priority[1] = (unsigned char)2U;
  
#line 203 
  priv->wmm.queue_priority[2] = (unsigned char)1U;
  
#line 204 
  priv->wmm.queue_priority[3] = (unsigned char)0U;
  
#line 205 
  return;
}


#line 211  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/wmm.c"
static void mwifiex_wmm_queue_priorities_tid(struct mwifiex_private *priv)
{
  int i;
  
#line 213 
  struct mwifiex_wmm_desc *wmm = & priv->wmm;
  
#line 214 
  u8 *queue_priority = (u8 *)(& wmm->queue_priority);
  
#line 217 
  i = 0;
  
#line 217 
  goto ldv_61723;
  ldv_61722: 
#line 218 
  ;
  
#line 218 
  tos_to_tid[7 - i * 2] = ac_to_tid[(int)*(queue_priority + i)][1];
  
#line 219 
  tos_to_tid[(3 - i) * 2] = ac_to_tid[(int)*(queue_priority + i)][0];
  
#line 217 
  i += 1;
  ldv_61723: 
#line 218 
  ;
  
#line 217 
  if (i <= 3) 
#line 219 
              goto ldv_61722; else 
#line 222 
                                   goto ldv_61724;
  ldv_61724: 
#line 223 
  ;
  
#line 222 
  i = 0;
  
#line 222 
  goto ldv_61726;
  ldv_61725: 
#line 223 
  ;
  
#line 223 
  priv->tos_to_tid_inv[(int)tos_to_tid[i]] = (unsigned char)i;
  
#line 222 
  i += 1;
  ldv_61726: 
#line 223 
  ;
  
#line 222 
  if (i <= 7) 
#line 224 
              goto ldv_61725; else 
#line 227 
                                   goto ldv_61727;
  ldv_61727: 
#line 228 
  ;
  
#line 225 
  atomic_set(& wmm->highest_queued_prio,7);
  
#line 226 
  return;
}


#line 232  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/wmm.c"
void mwifiex_wmm_setup_queue_priorities(struct mwifiex_private *priv, struct ieee_types_wmm_parameter *wmm_ie)
{
  u16 cw_min;
  u16 avg_back_off;
  u16 tmp[4U];
  u32 i;
  u32 j;
  u32 num_ac;
  u8 ac_idx;
  
#line 239 
  if (wmm_ie == (struct ieee_types_wmm_parameter *)0 || (unsigned int)priv->wmm_enabled == 0U) {
    
#line 241 
    mwifiex_wmm_default_queue_priorities(priv);
    
#line 242 
    goto return_label;
  }
  else ;
  
#line 245 
  if (((priv->adapter)->debug_mask & 1073741824U) != 0U) {
    
#line 245 
    if ((priv->adapter)->dev != (struct device *)0) 
#line 245 
                                                    _dev_info((struct device const *)(priv->adapter)->dev,"info: WMM Parameter IE: version=%d,\t",(int)wmm_ie->vend_hdr.version,(int)wmm_ie->qos_info_bitmap & 15,(int)wmm_ie->reserved); else ;
  }
  else ;
  
#line 252 
  num_ac = 0U;
  
#line 252 
  goto ldv_61745;
  ldv_61744: 
#line 253 
  ;
  {
    
#line 253 
    u8 ecw = wmm_ie->ac_params[num_ac].ecw_bitmap;
    
#line 254 
    u8 aci_aifsn = wmm_ie->ac_params[num_ac].aci_aifsn_bitmap;
    
#line 255 
    cw_min = (unsigned short)((unsigned int)((unsigned short)(1 << ((int)ecw & 15))) + 65535U);
    
#line 256 
    avg_back_off = (unsigned short)((unsigned int)((unsigned short)((int)cw_min >> 1)) + ((unsigned int)((unsigned short)aci_aifsn) & 15U));
    
#line 258 
    ac_idx = wmm_aci_to_qidx_map[((int)aci_aifsn >> 5) & 3];
    
#line 259 
    priv->wmm.queue_priority[(int)ac_idx] = ac_idx;
    
#line 260 
    tmp[(int)ac_idx] = avg_back_off;
    
#line 262 
    if (((priv->adapter)->debug_mask & 1073741824U) != 0U) {
      
#line 262 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 262 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"info: WMM: CWmax=%d CWmin=%d Avg Back-off=%d\n",(1 << ((int)ecw >> 4)) + -1,(int)cw_min,(int)avg_back_off); else ;
    }
    else ;
    
#line 266 
    mwifiex_wmm_ac_debug_print((struct ieee_types_wmm_ac_parameters const *)(& wmm_ie->ac_params[num_ac]));
  }
  
#line 252 
  num_ac += 1U;
  ldv_61745: 
#line 253 
  ;
  
#line 252 
  if (num_ac <= 3U) 
#line 254 
                    goto ldv_61744; else 
#line 257 
                                         goto ldv_61746;
  ldv_61746: 
#line 258 
  ;
  
#line 270 
  i = 0U;
  
#line 270 
  goto ldv_61754;
  ldv_61753: 
#line 271 
  ;
  
#line 271 
  j = 1U;
  
#line 271 
  goto ldv_61751;
  ldv_61750: 
#line 272 
  ;
  
#line 272 
  if ((int)tmp[j + 4294967295U] > (int)tmp[j]) {
    {
      
#line 273 
      u16 __tmp = tmp[j + 4294967295U];
      
#line 273 
      tmp[j + 4294967295U] = tmp[j];
      
#line 273 
      tmp[j] = __tmp;
    }
    {
      
#line 274 
      u8 __tmp_0 = priv->wmm.queue_priority[j + 4294967295U];
      
#line 274 
      priv->wmm.queue_priority[j + 4294967295U] = priv->wmm.queue_priority[j];
      
#line 274 
      priv->wmm.queue_priority[j] = __tmp_0;
    }
  }
  else 
    
#line 276 
    if ((int)tmp[j + 4294967295U] == (int)tmp[j]) {
      
#line 277 
      if ((int)priv->wmm.queue_priority[j + 4294967295U] < (int)priv->wmm.queue_priority[j]) {
        
#line 279 
        u8 __tmp_1 = priv->wmm.queue_priority[j + 4294967295U];
        
#line 279 
        priv->wmm.queue_priority[j + 4294967295U] = priv->wmm.queue_priority[j];
        
#line 279 
        priv->wmm.queue_priority[j] = __tmp_1;
      }
      else ;
    }
    else ;
  
#line 271 
  j += 1U;
  ldv_61751: 
#line 272 
  ;
  
#line 271 
  if (num_ac - i > j) 
#line 273 
                      goto ldv_61750; else 
#line 276 
                                           goto ldv_61752;
  ldv_61752: 
#line 277 
  ;
  
#line 270 
  i += 1U;
  ldv_61754: 
#line 271 
  ;
  
#line 270 
  if (i < num_ac) 
#line 272 
                  goto ldv_61753; else 
#line 275 
                                       goto ldv_61755;
  ldv_61755: 
#line 276 
  ;
  
#line 285 
  mwifiex_wmm_queue_priorities_tid(priv);
  return_label: 
#line 286 
                return;
}


#line 295  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/wmm.c"
static enum mwifiex_wmm_ac_e mwifiex_wmm_eval_downgrade_ac(struct mwifiex_private *priv, enum mwifiex_wmm_ac_e eval_ac)
{
  enum mwifiex_wmm_ac_e __retres;
  int down_ac;
  enum mwifiex_wmm_ac_e ret_ac;
  struct mwifiex_wmm_ac_status *ac_status;
  
#line 302 
  ac_status = & priv->wmm.ac_status[(int)eval_ac];
  
#line 304 
  if ((unsigned int)ac_status->disabled == 0U) {
    
#line 306 
    __retres = eval_ac;
    
#line 306 
    goto return_label;
  }
  else ;
  
#line 309 
  ret_ac = WMM_AC_BK;
  
#line 318 
  down_ac = 0;
  
#line 318 
  goto ldv_61764;
  ldv_61763: 
#line 319 
  ;
  
#line 319 
  ac_status = & priv->wmm.ac_status[down_ac];
  
#line 321 
  if ((unsigned int)ac_status->disabled == 0U && (unsigned int)ac_status->flow_required == 0U) 
    
#line 324 
    ret_ac = (enum mwifiex_wmm_ac_e)down_ac; else ;
  
#line 318 
  down_ac += 1;
  ldv_61764: 
#line 319 
  ;
  
#line 318 
  if ((int)eval_ac > down_ac) 
#line 320 
                              goto ldv_61763; else 
#line 323 
                                                   goto ldv_61765;
  ldv_61765: 
#line 324 
  ;
  
#line 327 
  __retres = ret_ac;
  return_label: 
#line 327 
                return __retres;
}


#line 334  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/wmm.c"
void mwifiex_wmm_setup_ac_downgrade(struct mwifiex_private *priv)
{
  int ac_val;
  
#line 338 
  if (((priv->adapter)->debug_mask & 1073741824U) != 0U) {
    
#line 338 
    if ((priv->adapter)->dev != (struct device *)0) 
#line 338 
                                                    _dev_info((struct device const *)(priv->adapter)->dev,"info: WMM: AC Priorities:\t"); else ;
  }
  else ;
  
#line 341 
  if ((unsigned int)priv->wmm_enabled == 0U) {
    
#line 343 
    ac_val = 0;
    
#line 343 
    goto ldv_61771;
    ldv_61770: 
#line 344 
    ;
    
#line 344 
    priv->wmm.ac_down_graded_vals[ac_val] = (enum mwifiex_wmm_ac_e)ac_val;
    
#line 343 
    ac_val += 1;
    ldv_61771: 
#line 344 
    ;
    
#line 343 
    if (ac_val <= 3) 
#line 345 
                     goto ldv_61770; else 
#line 348 
                                          goto ldv_61772;
    ldv_61772: 
#line 349 
    ;
  }
  else {
    
#line 347 
    ac_val = 0;
    
#line 347 
    goto ldv_61774;
    ldv_61773: 
#line 348 
    ;
    
#line 349 
    priv->wmm.ac_down_graded_vals[ac_val] = mwifiex_wmm_eval_downgrade_ac(priv,(enum mwifiex_wmm_ac_e)((int)((enum mwifiex_wmm_ac_e)ac_val)));
    
#line 351 
    if (((priv->adapter)->debug_mask & 1073741824U) != 0U) {
      
#line 351 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 351 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"info: WMM: AC PRIO %d maps to %d\n",ac_val,(int)priv->wmm.ac_down_graded_vals[ac_val]); else ;
    }
    else ;
    
#line 347 
    ac_val += 1;
    ldv_61774: 
#line 348 
    ;
    
#line 347 
    if (ac_val <= 3) 
#line 349 
                     goto ldv_61773; else 
#line 352 
                                          goto ldv_61775;
    ldv_61775: 
#line 353 
    ;
  }
  
#line 355 
  return;
}


#line 364  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/wmm.c"
static enum mwifiex_wmm_ac_e mwifiex_wmm_convert_tos_to_ac(struct mwifiex_adapter *adapter, u32 tos)
{
  enum mwifiex_wmm_ac_e __retres;
  
#line 367 
  enum mwifiex_wmm_ac_e const tos_to_ac[8U] = {WMM_AC_BE, WMM_AC_BK, WMM_AC_BK, WMM_AC_BE, WMM_AC_VI, WMM_AC_VI, WMM_AC_VO, WMM_AC_VO};
  
#line 377 
  if (tos > 7U) {
    
#line 378 
    __retres = WMM_AC_BE;
    
#line 378 
    goto return_label;
  }
  else ;
  
#line 380 
  __retres = tos_to_ac[tos];
  return_label: 
#line 380 
                return __retres;
}


#line 389  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/wmm.c"
u8 mwifiex_wmm_downgrade_tid(struct mwifiex_private *priv, u32 tid)
{
  enum mwifiex_wmm_ac_e ac;
  enum mwifiex_wmm_ac_e ac_down;
  u8 new_tid;
  
#line 394 
  ac = mwifiex_wmm_convert_tos_to_ac(priv->adapter,tid);
  
#line 395 
  ac_down = priv->wmm.ac_down_graded_vals[(int)ac];
  
#line 400 
  new_tid = ac_to_tid[(int)ac_down][tid & 1U];
  
#line 402 
  return new_tid;
}


#line 410  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/wmm.c"
void mwifiex_wmm_init(struct mwifiex_adapter *adapter)
{
  int i;
  int j;
  struct mwifiex_private *priv;
  u8 tmp_0;
  u8 tmp;
  u8 tmp_2;
  u8 tmp_1;
  
#line 415 
  j = 0;
  
#line 415 
  goto ldv_61802;
  ldv_61801: 
#line 416 
  ;
  
#line 416 
  priv = adapter->priv[j];
  
#line 417 
  if (priv == (struct mwifiex_private *)0) 
#line 418 
                                           goto ldv_61797; else ;
  
#line 420 
  i = 0;
  
#line 420 
  goto ldv_61799;
  ldv_61798: 
#line 421 
  ;
  
#line 421 
  if (! disable_tx_amsdu && (unsigned int)adapter->tx_buf_size > 2048U) 
    
#line 423 
    priv->aggr_prio_tbl[i].amsdu = priv->tos_to_tid_inv[i]; else 
#line 426 
                                                                 priv->aggr_prio_tbl[i].amsdu = (unsigned char)255U;
  
#line 428 
  priv->aggr_prio_tbl[i].ampdu_ap = priv->tos_to_tid_inv[i];
  
#line 430 
  priv->aggr_prio_tbl[i].ampdu_user = priv->tos_to_tid_inv[i];
  
#line 420 
  i += 1;
  ldv_61799: 
#line 421 
  ;
  
#line 420 
  if (i <= 7) 
#line 422 
              goto ldv_61798; else 
#line 425 
                                   goto ldv_61800;
  ldv_61800: 
#line 426 
  ;
  
#line 436 
  tmp_0 = (unsigned char)255U;
  
#line 436 
  priv->aggr_prio_tbl[6].ampdu_user = tmp_0;
  
#line 435 
  tmp = tmp_0;
  
#line 435 
  priv->aggr_prio_tbl[6].ampdu_ap = tmp;
  
#line 435 
  priv->aggr_prio_tbl[6].amsdu = tmp;
  
#line 440 
  tmp_2 = (unsigned char)255U;
  
#line 440 
  priv->aggr_prio_tbl[7].ampdu_user = tmp_2;
  
#line 439 
  tmp_1 = tmp_2;
  
#line 439 
  priv->aggr_prio_tbl[7].ampdu_ap = tmp_1;
  
#line 439 
  priv->aggr_prio_tbl[7].amsdu = tmp_1;
  
#line 443 
  mwifiex_set_ba_params(priv);
  
#line 444 
  mwifiex_reset_11n_rx_seq_num(priv);
  
#line 446 
  atomic_set(& priv->wmm.tx_pkts_queued,0);
  
#line 447 
  atomic_set(& priv->wmm.highest_queued_prio,7);
  ldv_61797: 
#line 448 
  ;
  
#line 415 
  j += 1;
  ldv_61802: 
#line 416 
  ;
  
#line 415 
  if ((int)adapter->priv_num > j) 
#line 417 
                                  goto ldv_61801; else 
#line 420 
                                                       goto ldv_61803;
  ldv_61803: 
#line 421 
  ;
  
#line 422 
  return;
}


#line 455  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/wmm.c"
int mwifiex_wmm_lists_empty(struct mwifiex_adapter *adapter)
{
  int __retres;
  int i;
  struct mwifiex_private *priv;
  
#line 460 
  i = 0;
  
#line 460 
  goto ldv_61810;
  ldv_61809: 
#line 461 
  ;
  
#line 461 
  priv = adapter->priv[i];
  
#line 462 
  if (priv != (struct mwifiex_private *)0) {
    int tmp;
    
#line 462 
    tmp = atomic_read((atomic_t const *)(& priv->wmm.tx_pkts_queued));
    
#line 462 
    if (tmp != 0) {
      
#line 463 
      __retres = 0;
      
#line 463 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 460 
  i += 1;
  ldv_61810: 
#line 461 
  ;
  
#line 460 
  if ((int)adapter->priv_num > i) 
#line 462 
                                  goto ldv_61809; else 
#line 465 
                                                       goto ldv_61811;
  ldv_61811: 
#line 466 
  ;
  
#line 466 
  __retres = 1;
  return_label: 
#line 466 
                return __retres;
}


#line 477  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/wmm.c"
static void mwifiex_wmm_del_pkts_in_ralist_node(struct mwifiex_private *priv, struct mwifiex_ra_list_tbl *ra_list)
{
  struct sk_buff *skb;
  struct sk_buff *tmp;
  
#line 480 
  struct mwifiex_adapter *adapter = priv->adapter;
  
#line 483 
  skb = ra_list->skb_head.next;
  
#line 483 
  tmp = skb->__anonCompField_sk_buff_68.__anonCompField___anonunion_228_67.next;
  
#line 483 
  goto ldv_61820;
  ldv_61819: 
#line 484 
  ;
  
#line 484 
  mwifiex_write_data_complete(adapter,skb,0,-1);
  
#line 483 
  skb = tmp;
  
#line 483 
  tmp = skb->__anonCompField_sk_buff_68.__anonCompField___anonunion_228_67.next;
  ldv_61820: 
#line 484 
  ;
  
#line 483 
  if ((struct sk_buff *)(& ra_list->skb_head) != skb) 
#line 485 
                                                      goto ldv_61819; else 
                                                                    
#line 488 
                                                                    goto ldv_61821;
  ldv_61821: 
#line 489 
  ;
  
#line 490 
  return;
}


#line 494  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/wmm.c"
static void mwifiex_wmm_del_pkts_in_ralist(struct mwifiex_private *priv, struct list_head *ra_list_head)
{
  struct mwifiex_ra_list_tbl *ra_list;
  struct mwifiex_ra_list_tbl *tmp;
  struct mwifiex_ra_list_tbl *tmp_0;
  {
    
#line 499 
    struct list_head const *__mptr = (struct list_head const *)ra_list_head->next;
    
#line 499 
    tmp = (struct mwifiex_ra_list_tbl *)__mptr;
  }
  
#line 499 
  ra_list = tmp;
  
#line 499 
  goto ldv_61832;
  ldv_61831: 
#line 500 
  ;
  
#line 500 
  mwifiex_wmm_del_pkts_in_ralist_node(priv,ra_list);
  {
    
#line 499 
    struct list_head const *__mptr_0 = (struct list_head const *)ra_list->list.next;
    
#line 499 
    tmp_0 = (struct mwifiex_ra_list_tbl *)__mptr_0;
  }
  
#line 499 
  ra_list = tmp_0;
  ldv_61832: 
#line 501 
  ;
  
#line 499 
  if (& ra_list->list != ra_list_head) 
#line 501 
                                       goto ldv_61831; else 
#line 504 
                                                            goto ldv_61833;
  ldv_61833: 
#line 505 
  ;
  
#line 506 
  return;
}


#line 506  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/wmm.c"
static void mwifiex_wmm_cleanup_queues(struct mwifiex_private *priv)
{
  int i;
  
#line 510 
  i = 0;
  
#line 510 
  goto ldv_61839;
  ldv_61838: 
#line 511 
  ;
  
#line 511 
  mwifiex_wmm_del_pkts_in_ralist(priv,& priv->wmm.tid_tbl_ptr[i].ra_list);
  
#line 510 
  i += 1;
  ldv_61839: 
#line 511 
  ;
  
#line 510 
  if (i <= 7) 
#line 512 
              goto ldv_61838; else 
#line 515 
                                   goto ldv_61840;
  ldv_61840: 
#line 516 
  ;
  
#line 514 
  atomic_set(& priv->wmm.tx_pkts_queued,0);
  
#line 515 
  atomic_set(& priv->wmm.highest_queued_prio,7);
  
#line 516 
  return;
}


#line 521  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/wmm.c"
static void mwifiex_wmm_delete_all_ralist(struct mwifiex_private *priv)
{
  struct mwifiex_ra_list_tbl *ra_list;
  struct mwifiex_ra_list_tbl *tmp_node;
  int i;
  struct mwifiex_ra_list_tbl *tmp;
  struct mwifiex_ra_list_tbl *tmp_0;
  struct mwifiex_ra_list_tbl *tmp_1;
  
#line 526 
  i = 0;
  
#line 526 
  goto ldv_61857;
  ldv_61856: 
#line 527 
  ;
  
#line 527 
  if (((priv->adapter)->debug_mask & 1073741824U) != 0U) {
    
#line 527 
    if ((priv->adapter)->dev != (struct device *)0) 
#line 527 
                                                    _dev_info((struct device const *)(priv->adapter)->dev,"info: ra_list: freeing buf for tid %d\n",i); else ;
  }
  else ;
  {
    
#line 529 
    struct list_head const *__mptr = (struct list_head const *)priv->wmm.tid_tbl_ptr[i].ra_list.next;
    
#line 529 
    tmp = (struct mwifiex_ra_list_tbl *)__mptr;
  }
  
#line 529 
  ra_list = tmp;
  {
    
#line 529 
    struct list_head const *__mptr_0 = (struct list_head const *)ra_list->list.next;
    
#line 529 
    tmp_0 = (struct mwifiex_ra_list_tbl *)__mptr_0;
  }
  
#line 530 
  tmp_node = tmp_0;
  
#line 529 
  goto ldv_61854;
  ldv_61853: 
#line 530 
  ;
  
#line 532 
  list_del(& ra_list->list);
  
#line 533 
  kfree((void const *)ra_list);
  
#line 529 
  ra_list = tmp_node;
  {
    
#line 529 
    struct list_head const *__mptr_1 = (struct list_head const *)tmp_node->list.next;
    
#line 529 
    tmp_1 = (struct mwifiex_ra_list_tbl *)__mptr_1;
  }
  
#line 529 
  tmp_node = tmp_1;
  ldv_61854: 
#line 531 
  ;
  
#line 529 
  if (& ra_list->list != & priv->wmm.tid_tbl_ptr[i].ra_list) 
#line 531 
                                                             goto ldv_61853; else 
                                                                    
#line 534 
                                                                    goto ldv_61855;
  ldv_61855: 
#line 535 
  ;
  
#line 536 
  INIT_LIST_HEAD(& priv->wmm.tid_tbl_ptr[i].ra_list);
  
#line 526 
  i += 1;
  ldv_61857: 
#line 527 
  ;
  
#line 526 
  if (i <= 7) 
#line 528 
              goto ldv_61856; else 
#line 531 
                                   goto ldv_61858;
  ldv_61858: 
#line 532 
  ;
  
#line 533 
  return;
}


#line 540  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/wmm.c"
static int mwifiex_free_ack_frame(int id, void *p, void *data)
{
  int __retres;
  
#line 542 
  printk("\001");
  
#line 543 
  kfree_skb((struct sk_buff *)p);
  
#line 544 
  __retres = 0;
  
#line 544 
  return __retres;
}


#line 558  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/wmm.c"
void mwifiex_clean_txrx(struct mwifiex_private *priv)
{
  unsigned long flags;
  struct sk_buff *skb;
  struct sk_buff *tmp;
  
#line 563 
  mwifiex_11n_cleanup_reorder_tbl(priv);
  
#line 564 
  ldv___ldv_spin_lock_80_1(& priv->wmm.ra_list_spinlock);
  
#line 566 
  mwifiex_wmm_cleanup_queues(priv);
  
#line 567 
  mwifiex_11n_delete_all_tx_ba_stream_tbl(priv);
  
#line 569 
  if ((priv->adapter)->if_ops.cleanup_mpa_buf != (void (*)(struct mwifiex_adapter *))0) 
    
#line 570 
    (*((priv->adapter)->if_ops.cleanup_mpa_buf))(priv->adapter); else ;
  
#line 572 
  mwifiex_wmm_delete_all_ralist(priv);
  
#line 573 
  memcpy((void *)(& tos_to_tid),(void const *)(& ac_to_tid),8UL);
  
#line 575 
  if ((priv->adapter)->if_ops.clean_pcie_ring != (int (*)(struct mwifiex_adapter *))0 && ! (priv->adapter)->surprise_removed) 
    
#line 577 
    (*((priv->adapter)->if_ops.clean_pcie_ring))(priv->adapter); else ;
  
#line 578 
  ldv_spin_unlock_irqrestore_81_2(& priv->wmm.ra_list_spinlock,flags);
  
#line 580 
  skb = priv->tdls_txq.next;
  
#line 580 
  tmp = skb->__anonCompField_sk_buff_68.__anonCompField___anonunion_228_67.next;
  
#line 580 
  goto ldv_61871;
  ldv_61870: 
#line 581 
  ;
  
#line 581 
  mwifiex_write_data_complete(priv->adapter,skb,0,-1);
  
#line 580 
  skb = tmp;
  
#line 580 
  tmp = skb->__anonCompField_sk_buff_68.__anonCompField___anonunion_228_67.next;
  ldv_61871: 
#line 581 
  ;
  
#line 580 
  if ((struct sk_buff *)(& priv->tdls_txq) != skb) 
#line 582 
                                                   goto ldv_61870; else 
                                                                    
#line 585 
                                                                    goto ldv_61872;
  ldv_61872: 
#line 586 
  ;
  
#line 583 
  idr_for_each(& priv->ack_status_frames,& mwifiex_free_ack_frame,(void *)0);
  
#line 584 
  idr_destroy(& priv->ack_status_frames);
  
#line 585 
  return;
}


#line 592  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/wmm.c"
struct mwifiex_ra_list_tbl *mwifiex_wmm_get_ralist_node(struct mwifiex_private *priv, u8 tid, u8 const *ra_addr)
{
  struct mwifiex_ra_list_tbl *__retres;
  struct mwifiex_ra_list_tbl *ra_list;
  struct mwifiex_ra_list_tbl *tmp;
  int tmp_0;
  struct mwifiex_ra_list_tbl *tmp_1;
  {
    
#line 597 
    struct list_head const *__mptr = (struct list_head const *)priv->wmm.tid_tbl_ptr[(int)tid].ra_list.next;
    
#line 597 
    tmp = (struct mwifiex_ra_list_tbl *)__mptr;
  }
  
#line 597 
  ra_list = tmp;
  
#line 597 
  goto ldv_61884;
  ldv_61883: 
#line 598 
  ;
  
#line 599 
  tmp_0 = memcmp((void const *)(& ra_list->ra),(void const *)ra_addr,6UL);
  
#line 599 
  if (tmp_0 == 0) {
    
#line 600 
    __retres = ra_list;
    
#line 600 
    goto return_label;
  }
  else ;
  {
    
#line 597 
    struct list_head const *__mptr_0 = (struct list_head const *)ra_list->list.next;
    
#line 597 
    tmp_1 = (struct mwifiex_ra_list_tbl *)__mptr_0;
  }
  
#line 597 
  ra_list = tmp_1;
  ldv_61884: 
#line 599 
  ;
  
#line 597 
  if (& ra_list->list != & priv->wmm.tid_tbl_ptr[(int)tid].ra_list) 
#line 599 
                                                                    goto ldv_61883; else 
                                                                    
#line 602 
                                                                    goto ldv_61885;
  ldv_61885: 
#line 603 
  ;
  
#line 603 
  __retres = (struct mwifiex_ra_list_tbl *)0;
  return_label: 
#line 603 
                return __retres;
}


#line 614  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/wmm.c"
struct mwifiex_ra_list_tbl *mwifiex_wmm_get_queue_raptr(struct mwifiex_private *priv, u8 tid, u8 const *ra_addr)
{
  struct mwifiex_ra_list_tbl *__retres;
  struct mwifiex_ra_list_tbl *ra_list;
  struct mwifiex_ra_list_tbl *tmp;
  
#line 619 
  ra_list = mwifiex_wmm_get_ralist_node(priv,(unsigned char)((int)tid),ra_addr);
  
#line 620 
  if (ra_list != (struct mwifiex_ra_list_tbl *)0) {
    
#line 621 
    __retres = ra_list;
    
#line 621 
    goto return_label;
  }
  else ;
  
#line 622 
  mwifiex_ralist_add(priv,ra_addr);
  
#line 624 
  tmp = mwifiex_wmm_get_ralist_node(priv,(unsigned char)((int)tid),ra_addr);
  
#line 624 
  __retres = tmp;
  return_label: 
#line 624 
                return __retres;
}


#line 632  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/wmm.c"
void mwifiex_wmm_del_peer_ra_list(struct mwifiex_private *priv, u8 const *ra_addr)
{
  struct mwifiex_ra_list_tbl *ra_list;
  unsigned long flags;
  int i;
  
#line 638 
  ldv___ldv_spin_lock_82_2(& priv->wmm.ra_list_spinlock);
  
#line 640 
  i = 0;
  
#line 640 
  goto ldv_61901;
  ldv_61900: 
#line 641 
  ;
  
#line 641 
  ra_list = mwifiex_wmm_get_ralist_node(priv,(unsigned char)((int)((unsigned char)i)),ra_addr);
  
#line 643 
  if (ra_list == (struct mwifiex_ra_list_tbl *)0) 
#line 644 
                                                  goto ldv_61899; else ;
  
#line 645 
  mwifiex_wmm_del_pkts_in_ralist_node(priv,ra_list);
  
#line 646 
  atomic_sub((int)ra_list->total_pkt_count,& priv->wmm.tx_pkts_queued);
  
#line 647 
  list_del(& ra_list->list);
  
#line 648 
  kfree((void const *)ra_list);
  ldv_61899: 
#line 649 
  ;
  
#line 640 
  i += 1;
  ldv_61901: 
#line 641 
  ;
  
#line 640 
  if (i <= 7) 
#line 642 
              goto ldv_61900; else 
#line 645 
                                   goto ldv_61902;
  ldv_61902: 
#line 646 
  ;
  
#line 650 
  ldv_spin_unlock_irqrestore_83_2(& priv->wmm.ra_list_spinlock,flags);
  
#line 651 
  return;
}


#line 658  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/wmm.c"
int mwifiex_is_ralist_valid(struct mwifiex_private *priv, struct mwifiex_ra_list_tbl *ra_list, int ptr_index)
{
  int __retres;
  struct mwifiex_ra_list_tbl *rlist;
  struct mwifiex_ra_list_tbl *tmp;
  struct mwifiex_ra_list_tbl *tmp_0;
  {
    
#line 663 
    struct list_head const *__mptr = (struct list_head const *)priv->wmm.tid_tbl_ptr[ptr_index].ra_list.next;
    
#line 663 
    tmp = (struct mwifiex_ra_list_tbl *)__mptr;
  }
  
#line 663 
  rlist = tmp;
  
#line 663 
  goto ldv_61914;
  ldv_61913: 
#line 664 
  ;
  
#line 665 
  if (rlist == ra_list) {
    
#line 666 
    __retres = 1;
    
#line 666 
    goto return_label;
  }
  else ;
  {
    
#line 663 
    struct list_head const *__mptr_0 = (struct list_head const *)rlist->list.next;
    
#line 663 
    tmp_0 = (struct mwifiex_ra_list_tbl *)__mptr_0;
  }
  
#line 663 
  rlist = tmp_0;
  ldv_61914: 
#line 665 
  ;
  
#line 663 
  if (& rlist->list != & priv->wmm.tid_tbl_ptr[ptr_index].ra_list) 
#line 665 
                                                                   goto ldv_61913; else 
                                                                    
#line 668 
                                                                    goto ldv_61915;
  ldv_61915: 
#line 669 
  ;
  
#line 669 
  __retres = 0;
  return_label: 
#line 669 
                return __retres;
}


#line 682  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/wmm.c"
void mwifiex_wmm_add_buf_txqueue(struct mwifiex_private *priv, struct sk_buff *skb)
{
  u32 tid;
  struct mwifiex_ra_list_tbl *ra_list;
  u8 ra[6U];
  u8 tid_down;
  unsigned long flags;
  struct list_head list_head;
  u8 tmp_8;
  int tmp_11;
  
#line 685 
  struct mwifiex_adapter *adapter = priv->adapter;
  
#line 691 
  int tdls_status = 0;
  
#line 692 
  struct ethhdr *eth_hdr_0 = (struct ethhdr *)skb->data;
  
#line 693 
  struct mwifiex_txinfo *tx_info = MWIFIEX_SKB_TXCB(skb);
  
#line 695 
  memcpy((void *)(& ra),(void const *)(& eth_hdr_0->h_dest),6UL);
  
#line 697 
  if (((unsigned long)priv->bss_role & 1UL) == 0UL && ((unsigned long)adapter->fw_cap_info & 16384UL) != 0UL) {
    int tmp_2;
    
#line 699 
    if (0 != 0) 
#line 699 
                tmp_2 = (((int)eth_hdr_0->h_proto << 8) | ((int)eth_hdr_0->h_proto >> 8)) == -30451;
    else {
      __u16 tmp_1;
      
#line 699 
      tmp_1 = __fswab16((unsigned short)((int)eth_hdr_0->h_proto));
      
#line 699 
      tmp_2 = (unsigned int)tmp_1 == 35085U;
    }
    
#line 699 
    if (tmp_2) {
      
#line 700 
      if ((adapter->debug_mask & 8U) != 0U) {
        
#line 700 
        if (adapter->dev != (struct device *)0) 
#line 700 
                                                _dev_info((struct device const *)adapter->dev,"TDLS setup packet for %pM.\t",(u8 *)(& ra)); else ;
      }
      else ;
    }
    else {
      int tmp_0;
      
#line 703 
      tmp_0 = memcmp((void const *)(& priv->cfg_bssid),(void const *)(& ra),6UL);
      
#line 703 
      if (tmp_0 != 0) 
#line 704 
                      tdls_status = mwifiex_get_tdls_link_status(priv,(u8 const *)(& ra)); else ;
    }
  }
  else ;
  
#line 707 
  if ((unsigned int)priv->media_connected == 0U) {
    int tmp_4;
    bool tmp_3;
    
#line 707 
    tmp_3 = mwifiex_is_skb_mgmt_frame(skb);
    
#line 707 
    if (tmp_3) 
#line 707 
               tmp_4 = 0; else 
#line 707 
                               tmp_4 = 1;
    
#line 707 
    if (tmp_4) {
      
#line 708 
      if ((adapter->debug_mask & 8U) != 0U) {
        
#line 708 
        if (adapter->dev != (struct device *)0) 
#line 708 
                                                _dev_info((struct device const *)adapter->dev,"data: drop packet in disconnect\n"); else ;
      }
      else ;
      
#line 709 
      mwifiex_write_data_complete(adapter,skb,0,-1);
      
#line 710 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 713 
  tid = skb->priority;
  
#line 715 
  ldv___ldv_spin_lock_84_1(& priv->wmm.ra_list_spinlock);
  
#line 717 
  tid_down = mwifiex_wmm_downgrade_tid(priv,tid);
  
#line 722 
  tmp_8 = mwifiex_queuing_ra_based(priv);
  
#line 722 
  if ((unsigned int)tmp_8 == 0U) {
    int tmp_10;
    bool tmp_9;
    
#line 723 
    tmp_9 = mwifiex_is_skb_mgmt_frame(skb);
    
#line 723 
    if (tmp_9) 
#line 723 
               tmp_10 = 0; else 
#line 723 
                                tmp_10 = 1;
    
#line 723 
    if (tmp_10) {
      
#line 724 
      switch (tdls_status) {
        int tmp_6;
        case 2: 
#line 725 
        ;
        
#line 726 
        ra_list = mwifiex_wmm_get_queue_raptr(priv,(unsigned char)((int)tid_down),(u8 const *)(& ra));
        
#line 728 
        tx_info->flags = (unsigned char)((unsigned int)tx_info->flags | 4U);
        
#line 729 
        goto ldv_61931;
        case 1: 
#line 730 
        ;
        
#line 731 
        skb_queue_tail(& priv->tdls_txq,skb);
        
#line 732 
        ldv_spin_unlock_irqrestore_85_2(& priv->wmm.ra_list_spinlock,flags);
        
#line 734 
        goto return_label;
        default: 
#line 735 
        ;
        
#line 736 
        list_head = priv->wmm.tid_tbl_ptr[(int)tid_down].ra_list;
        
#line 737 
        tmp_6 = list_empty((struct list_head const *)(& list_head));
        
#line 737 
        if (tmp_6 == 0) {
          struct mwifiex_ra_list_tbl *tmp_5;
          {
            
#line 738 
            struct list_head const *__mptr = (struct list_head const *)list_head.next;
            
#line 738 
            tmp_5 = (struct mwifiex_ra_list_tbl *)__mptr;
          }
          
#line 738 
          ra_list = tmp_5;
        }
        else 
#line 742 
             ra_list = (struct mwifiex_ra_list_tbl *)0;
        
#line 743 
        goto ldv_61931;
      }
      ldv_61931: 
#line 745 
      ;
    }
    else 
#line 722 
         goto _LAND;
  }
  else {
    _LAND: {
             
#line 746 
             memcpy((void *)(& ra),(void const *)skb->data,6UL);
             
#line 747 
             if (((int)ra[0] & 1) != 0) 
#line 748 
                                        eth_broadcast_addr((u8 *)(& ra));
             else {
               bool tmp_7;
               
#line 747 
               tmp_7 = mwifiex_is_skb_mgmt_frame(skb);
               
#line 747 
               if ((int)tmp_7 != 0) 
#line 748 
                                    eth_broadcast_addr((u8 *)(& ra)); else ;
             }
             
#line 749 
             ra_list = mwifiex_wmm_get_queue_raptr(priv,(unsigned char)((int)tid_down),(u8 const *)(& ra));
           }
  }
  
#line 752 
  if (ra_list == (struct mwifiex_ra_list_tbl *)0) {
    
#line 753 
    ldv_spin_unlock_irqrestore_86(& priv->wmm.ra_list_spinlock,flags);
    
#line 754 
    mwifiex_write_data_complete(adapter,skb,0,-1);
    
#line 755 
    goto return_label;
  }
  else ;
  
#line 758 
  skb_queue_tail(& ra_list->skb_head,skb);
  
#line 760 
  ra_list->ba_pkt_count = (u16)((int)ra_list->ba_pkt_count + 1);
  
#line 761 
  ra_list->total_pkt_count = (u16)((int)ra_list->total_pkt_count + 1);
  
#line 763 
  tmp_11 = atomic_read((atomic_t const *)(& priv->wmm.highest_queued_prio));
  
#line 763 
  ;
  
#line 763 
  if (tmp_11 < (int)priv->tos_to_tid_inv[(int)tid_down]) 
#line 765 
                                                         atomic_set(& priv->wmm.highest_queued_prio,(int)priv->tos_to_tid_inv[(int)tid_down]); else ;
  
#line 768 
  atomic_inc_3(& priv->wmm.tx_pkts_queued);
  
#line 770 
  ldv_spin_unlock_irqrestore_87_0(& priv->wmm.ra_list_spinlock,flags);
  return_label: 
#line 771 
                return;
}


#line 784  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/wmm.c"
int mwifiex_ret_wmm_get_status(struct mwifiex_private *priv, struct host_cmd_ds_command const *resp)
{
  int __retres;
  uint16_t tlv_len;
  struct mwifiex_ie_types_data *tlv_hdr;
  struct mwifiex_ie_types_wmm_queue_status *tlv_wmm_qstatus;
  struct mwifiex_wmm_ac_status *ac_status;
  
#line 787 
  u8 *curr = (u8 *)(& resp->params.get_wmm_status);
  
#line 788 
  uint16_t resp_len = resp->size;
  
#line 789 
  int mask = 15;
  
#line 790 
  bool valid = (_Bool)1;
  
#line 794 
  struct ieee_types_wmm_parameter *wmm_param_ie = (struct ieee_types_wmm_parameter *)0;
  
#line 797 
  if (((priv->adapter)->debug_mask & 1073741824U) != 0U) {
    
#line 797 
    if ((priv->adapter)->dev != (struct device *)0) 
#line 797 
                                                    _dev_info((struct device const *)(priv->adapter)->dev,"info: WMM: WMM_GET_STATUS cmdresp received: %d\n",(int)resp_len); else ;
  }
  else ;
  
#line 801 
  goto ldv_61955;
  ldv_61954: 
#line 802 
  ;
  
#line 802 
  tlv_hdr = (struct mwifiex_ie_types_data *)curr;
  
#line 803 
  tlv_len = tlv_hdr->header.len;
  
#line 805 
  if ((unsigned long)resp_len < (unsigned long)tlv_len + 4UL) 
#line 806 
                                                              goto ldv_61949; else ;
  
#line 808 
  switch ((int)tlv_hdr->header.type) {
    case 272: 
#line 809 
    ;
    
#line 810 
    tlv_wmm_qstatus = (struct mwifiex_ie_types_wmm_queue_status *)tlv_hdr;
    
#line 813 
    if (((priv->adapter)->debug_mask & 16U) != 0U) {
      
#line 813 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 813 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"info: CMD_RESP: WMM_GET_STATUS:\t",(int)tlv_wmm_qstatus->queue_index,(int)tlv_wmm_qstatus->flow_required,(int)tlv_wmm_qstatus->disabled); else ;
    }
    else ;
    
#line 820 
    ac_status = & priv->wmm.ac_status[(int)tlv_wmm_qstatus->queue_index];
    
#line 822 
    ac_status->disabled = tlv_wmm_qstatus->disabled;
    
#line 823 
    ac_status->flow_required = tlv_wmm_qstatus->flow_required;
    
#line 825 
    ac_status->flow_created = tlv_wmm_qstatus->flow_created;
    
#line 826 
    goto ldv_61951;
    case 221: 
#line 828 
    ;
    
#line 834 
    wmm_param_ie = (struct ieee_types_wmm_parameter *)(curr + 2U);
    
#line 837 
    wmm_param_ie->vend_hdr.len = (unsigned char)tlv_len;
    
#line 838 
    wmm_param_ie->vend_hdr.element_id = (unsigned char)221U;
    
#line 841 
    if (((priv->adapter)->debug_mask & 16U) != 0U) {
      
#line 841 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 841 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"info: CMD_RESP: WMM_GET_STATUS:\t",(int)wmm_param_ie->qos_info_bitmap & mask); else ;
    }
    else ;
    
#line 846 
    memcpy((void *)(& priv->curr_bss_params.bss_descriptor.wmm_ie),(void const *)wmm_param_ie,(unsigned long)((int)wmm_param_ie->vend_hdr.len + 2));
    
#line 850 
    goto ldv_61951;
    default: 
#line 852 
    ;
    
#line 853 
    valid = (_Bool)0;
    
#line 854 
    goto ldv_61951;
  }
  ldv_61951: 
#line 857 
  ;
  
#line 857 
  curr += (unsigned int)tlv_len + 4U;
  
#line 858 
  resp_len = (unsigned short)((unsigned int)((int)resp_len - (int)tlv_len) + 65532U);
  ldv_61955: 
#line 859 
  ;
  
#line 801 
  if ((unsigned int)resp_len > 3U && (int)valid != 0) 
#line 803 
                                                      goto ldv_61954; else 
                                                                    
#line 806 
                                                                    goto ldv_61949;
  ldv_61949: 
#line 807 
  ;
  
#line 861 
  mwifiex_wmm_setup_queue_priorities(priv,wmm_param_ie);
  
#line 862 
  mwifiex_wmm_setup_ac_downgrade(priv);
  
#line 864 
  __retres = 0;
  
#line 864 
  return __retres;
}


#line 875  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/wmm.c"
u32 mwifiex_wmm_process_association_req(struct mwifiex_private *priv, u8 **assoc_buf, struct ieee_types_wmm_parameter *wmm_ie, struct ieee80211_ht_cap *ht_cap)
{
  u32 __retres;
  struct mwifiex_ie_types_wmm_param_set *wmm_tlv;
  
#line 881 
  u32 ret_len = 0U;
  
#line 884 
  if (assoc_buf == (u8 **)0U) {
    
#line 885 
    __retres = 0U;
    
#line 885 
    goto return_label;
  }
  else ;
  
#line 886 
  if (*assoc_buf == (u8 *)0U) {
    
#line 887 
    __retres = 0U;
    
#line 887 
    goto return_label;
  }
  else ;
  
#line 889 
  if (wmm_ie == (struct ieee_types_wmm_parameter *)0) {
    
#line 890 
    __retres = 0U;
    
#line 890 
    goto return_label;
  }
  else ;
  
#line 892 
  if (((priv->adapter)->debug_mask & 1073741824U) != 0U) {
    
#line 892 
    if ((priv->adapter)->dev != (struct device *)0) 
#line 892 
                                                    _dev_info((struct device const *)(priv->adapter)->dev,"info: WMM: process assoc req: bss->wmm_ie=%#x\n",(int)wmm_ie->vend_hdr.element_id); else ;
  }
  else ;
  
#line 896 
  if (((unsigned int)priv->wmm_required != 0U || (ht_cap != (struct ieee80211_ht_cap *)0 && (((int)(priv->adapter)->config_bands & 8) != 0 || ((int)(priv->adapter)->config_bands & 16) != 0))) && (unsigned int)wmm_ie->vend_hdr.element_id == 221U) {
    
#line 900 
    wmm_tlv = (struct mwifiex_ie_types_wmm_param_set *)*assoc_buf;
    
#line 901 
    wmm_tlv->header.type = (unsigned short)wmm_info_ie[0];
    
#line 902 
    wmm_tlv->header.len = (unsigned short)wmm_info_ie[1];
    
#line 903 
    memcpy((void *)(& wmm_tlv->wmm_ie),(void const *)(& wmm_info_ie[2]),(unsigned long)wmm_tlv->header.len);
    
#line 905 
    if ((int)wmm_ie->qos_info_bitmap < 0) 
#line 906 
                                          memcpy((void *)(& wmm_tlv->wmm_ie) + ((unsigned long)wmm_tlv->header.len + 18446744073709551615U),(void const *)(& priv->wmm_qosinfo),1UL); else ;
    
#line 911 
    ret_len = (unsigned int)wmm_tlv->header.len + 4U;
    
#line 914 
    *assoc_buf += ret_len;
  }
  else ;
  
#line 917 
  __retres = ret_len;
  return_label: 
#line 917 
                return __retres;
}


#line 930  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/wmm.c"
u8 mwifiex_wmm_compute_drv_pkt_delay(struct mwifiex_private *priv, struct sk_buff const *skb)
{
  s64 tmp_0;
  ktime_t tmp;
  u8 ret_val;
  u32 tmp_2;
  
#line 933 
  tmp = net_timedelta(skb->__anonCompField_sk_buff_68.__anonCompField___anonunion_228_67.__anonCompField___anonstruct_229_66.tstamp);
  
#line 933 
  tmp_0 = ktime_to_ms(tmp);
  
#line 933 
  u32 queue_delay = (unsigned int)tmp_0;
  {
    u32 tmp_1;
    
#line 942 
    u32 _min1 = queue_delay;
    
#line 942 
    u32 _min2 = priv->wmm.drv_pkt_delay_max;
    
#line 942 
    if (_min1 < _min2) 
#line 942 
                       tmp_1 = _min1; else 
#line 942 
                                           tmp_1 = _min2;
    
#line 942 
    tmp_2 = tmp_1;
  }
  
#line 942 
  ret_val = (unsigned char)(tmp_2 >> 1);
  
#line 944 
  if (((priv->adapter)->debug_mask & 8U) != 0U) {
    
#line 944 
    if ((priv->adapter)->dev != (struct device *)0) 
#line 944 
                                                    _dev_info((struct device const *)(priv->adapter)->dev,"data: WMM: Pkt Delay: %d ms,\t",queue_delay,(int)ret_val); else ;
  }
  else ;
  
#line 947 
  return ret_val;
}


#line 954  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/wmm.c"
static struct mwifiex_ra_list_tbl *mwifiex_wmm_get_highest_priolist_ptr(struct mwifiex_adapter *adapter, struct mwifiex_private **priv, int *tid)
{
  struct mwifiex_ra_list_tbl *__retres;
  struct mwifiex_private *priv_tmp;
  struct mwifiex_ra_list_tbl *ptr;
  struct mwifiex_tid_tbl *tid_ptr;
  atomic_t *hqp;
  unsigned long flags_ra;
  int i;
  int j;
  struct mwifiex_bss_prio_node *tmp;
  int tmp_0;
  struct mwifiex_ra_list_tbl *tmp_1;
  int tmp_2;
  struct mwifiex_ra_list_tbl *tmp_3;
  struct mwifiex_bss_prio_node *tmp_4;
  int tmp_5;
  
#line 965 
  j = (int)adapter->priv_num + -1;
  
#line 965 
  goto ldv_62005;
  ldv_62004: 
#line 966 
  ;
  {
    
#line 967 
    struct list_head const *__mptr = (struct list_head const *)adapter->bss_prio_tbl[j].bss_prio_head.next;
    
#line 967 
    tmp = (struct mwifiex_bss_prio_node *)__mptr;
  }
  
#line 967 
  adapter->bss_prio_tbl[j].bss_prio_cur = tmp;
  
#line 967 
  goto ldv_62002;
  ldv_62001: 
#line 968 
  ;
  
#line 971 
  priv_tmp = (adapter->bss_prio_tbl[j].bss_prio_cur)->priv;
  
#line 973 
  tmp_0 = atomic_read((atomic_t const *)(& priv_tmp->wmm.tx_pkts_queued));
  
#line 973 
  if (tmp_0 == 0) 
#line 974 
                  goto ldv_61989; else ;
  
#line 977 
  hqp = & priv_tmp->wmm.highest_queued_prio;
  
#line 978 
  i = atomic_read((atomic_t const *)hqp);
  
#line 978 
  goto ldv_61999;
  ldv_61998: 
#line 979 
  ;
  
#line 980 
  ldv___ldv_spin_lock_88_1(& priv_tmp->wmm.ra_list_spinlock);
  
#line 983 
  tid_ptr = & priv_tmp->wmm.tid_tbl_ptr[(int)tos_to_tid[i]];
  {
    
#line 987 
    struct list_head const *__mptr_0 = (struct list_head const *)tid_ptr->ra_list.next;
    
#line 987 
    tmp_1 = (struct mwifiex_ra_list_tbl *)__mptr_0;
  }
  
#line 987 
  ptr = tmp_1;
  
#line 987 
  goto ldv_61996;
  ldv_61995: 
#line 988 
  ;
  
#line 990 
  tmp_2 = skb_queue_empty((struct sk_buff_head const *)(& ptr->skb_head));
  
#line 990 
  if (tmp_2 == 0) 
#line 992 
                  goto found; else ;
  {
    
#line 987 
    struct list_head const *__mptr_1 = (struct list_head const *)ptr->list.next;
    
#line 987 
    tmp_3 = (struct mwifiex_ra_list_tbl *)__mptr_1;
  }
  
#line 987 
  ptr = tmp_3;
  ldv_61996: 
#line 989 
  ;
  
#line 987 
  if ((void *)ptr != (void *)tid_ptr) 
#line 989 
                                      goto ldv_61995; else 
#line 992 
                                                           goto ldv_61997;
  ldv_61997: 
#line 993 
  ;
  
#line 995 
  ldv_spin_unlock_irqrestore_89_2(& priv_tmp->wmm.ra_list_spinlock,flags_ra);
  
#line 978 
  i -= 1;
  ldv_61999: 
#line 979 
  ;
  
#line 978 
  if (i >= 0) 
#line 980 
              goto ldv_61998; else 
#line 983 
                                   goto ldv_62000;
  ldv_62000: 
#line 984 
  ;
  ldv_61989: 
#line 985 
  ;
  {
    
#line 967 
    struct list_head const *__mptr_2 = (struct list_head const *)(adapter->bss_prio_tbl[j].bss_prio_cur)->list.next;
    
#line 967 
    tmp_4 = (struct mwifiex_bss_prio_node *)__mptr_2;
  }
  
#line 967 
  adapter->bss_prio_tbl[j].bss_prio_cur = tmp_4;
  ldv_62002: 
#line 969 
  ;
  
#line 967 
  if (& (adapter->bss_prio_tbl[j].bss_prio_cur)->list != & adapter->bss_prio_tbl[j].bss_prio_head) 
    
#line 969 
    goto ldv_62001; else 
#line 972 
                         goto ldv_62003;
  ldv_62003: 
#line 973 
  ;
  
#line 965 
  j -= 1;
  ldv_62005: 
#line 966 
  ;
  
#line 965 
  if (j >= 0) 
#line 967 
              goto ldv_62004; else 
#line 970 
                                   goto ldv_62006;
  ldv_62006: 
#line 971 
  ;
  
#line 1003 
  __retres = (struct mwifiex_ra_list_tbl *)0;
  
#line 1003 
  goto return_label;
  found: 
#line 1005 
  ;
  
#line 1007 
  tmp_5 = atomic_read((atomic_t const *)hqp);
  
#line 1007 
  ;
  
#line 1007 
  if (tmp_5 > i) 
#line 1008 
                 atomic_set(hqp,i); else ;
  
#line 1009 
  ldv_spin_unlock_irqrestore_90(& priv_tmp->wmm.ra_list_spinlock,flags_ra);
  
#line 1011 
  *priv = priv_tmp;
  
#line 1012 
  *tid = (int)tos_to_tid[i];
  
#line 1014 
  __retres = ptr;
  return_label: 
#line 1014 
                return __retres;
}


#line 1026  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/wmm.c"
void mwifiex_rotate_priolists(struct mwifiex_private *priv, struct mwifiex_ra_list_tbl *ra, int tid)
{
  unsigned long flags;
  int tmp;
  
#line 1030 
  struct mwifiex_adapter *adapter = priv->adapter;
  
#line 1031 
  struct mwifiex_bss_prio_tbl *tbl = (struct mwifiex_bss_prio_tbl *)(& adapter->bss_prio_tbl);
  
#line 1032 
  struct mwifiex_tid_tbl *tid_ptr = & priv->wmm.tid_tbl_ptr[tid];
  
#line 1035 
  ldv___ldv_spin_lock_91(& (tbl + (int)priv->bss_priority)->bss_prio_lock);
  
#line 1040 
  list_move(& (tbl + (int)priv->bss_priority)->bss_prio_head,& ((tbl + (int)priv->bss_priority)->bss_prio_cur)->list);
  
#line 1042 
  ldv_spin_unlock_irqrestore_92(& (tbl + (int)priv->bss_priority)->bss_prio_lock,flags);
  
#line 1044 
  ldv___ldv_spin_lock_93_0(& priv->wmm.ra_list_spinlock);
  
#line 1045 
  tmp = mwifiex_is_ralist_valid(priv,ra,tid);
  
#line 1045 
  if (tmp != 0) {
    
#line 1046 
    priv->wmm.packets_out[tid] += 1U;
    
#line 1048 
    list_move(& tid_ptr->ra_list,& ra->list);
  }
  else ;
  
#line 1050 
  ldv_spin_unlock_irqrestore_94_1(& priv->wmm.ra_list_spinlock,flags);
  
#line 1051 
  return;
}


#line 1057  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/wmm.c"
static int mwifiex_is_11n_aggragation_possible(struct mwifiex_private *priv, struct mwifiex_ra_list_tbl *ptr, int max_buf_size)
{
  int __retres;
  struct sk_buff *skb;
  struct sk_buff *tmp;
  int max_amsdu_size;
  
#line 1061 
  int count = 0;
  
#line 1061 
  int total_size = 0;
  
#line 1065 
  if (((unsigned int)priv->bss_role == 1U && (unsigned int)priv->ap_11n_enabled != 0U) && ptr->is_11n_enabled != 0U) {
    int tmp_1;
    {
      int tmp_0;
      
#line 1067 
      int __min1 = (int)ptr->max_amsdu;
      
#line 1067 
      int __min2 = max_buf_size;
      
#line 1067 
      if (__min1 < __min2) 
#line 1067 
                           tmp_0 = __min1; else 
#line 1067 
                                                tmp_0 = __min2;
      
#line 1067 
      tmp_1 = tmp_0;
    }
    
#line 1067 
    max_amsdu_size = tmp_1;
  }
  else 
#line 1069 
       max_amsdu_size = max_buf_size;
  
#line 1071 
  skb = ptr->skb_head.next;
  
#line 1071 
  tmp = skb->__anonCompField_sk_buff_68.__anonCompField___anonunion_228_67.next;
  
#line 1071 
  goto ldv_62031;
  ldv_62030: 
#line 1072 
  ;
  
#line 1072 
  total_size = (int)(skb->len + (unsigned int)total_size);
  
#line 1073 
  if (total_size >= max_amsdu_size) 
#line 1074 
                                    goto ldv_62029; else ;
  
#line 1075 
  count += 1;
  
#line 1075 
  if (count > 1) {
    
#line 1076 
    __retres = 1;
    
#line 1076 
    goto return_label;
  }
  else ;
  
#line 1071 
  skb = tmp;
  
#line 1071 
  tmp = skb->__anonCompField_sk_buff_68.__anonCompField___anonunion_228_67.next;
  ldv_62031: 
#line 1072 
  ;
  
#line 1071 
  if ((struct sk_buff *)(& ptr->skb_head) != skb) 
#line 1073 
                                                  goto ldv_62030; else 
                                                                    
#line 1076 
                                                                    goto ldv_62029;
  ldv_62029: 
#line 1077 
  ;
  
#line 1079 
  __retres = 0;
  return_label: 
#line 1079 
                return __retres;
}


#line 1086  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/wmm.c"
static void mwifiex_send_single_packet(struct mwifiex_private *priv, struct mwifiex_ra_list_tbl *ptr, int ptr_index, unsigned long ra_list_flags)
{
  struct sk_buff *skb;
  struct sk_buff *skb_next;
  struct mwifiex_tx_param tx_param;
  struct mwifiex_txinfo *tx_info;
  int tmp;
  int tmp_0;
  int tmp_2;
  
#line 1093 
  struct mwifiex_adapter *adapter = priv->adapter;
  
#line 1096 
  tmp = skb_queue_empty((struct sk_buff_head const *)(& ptr->skb_head));
  
#line 1096 
  if (tmp != 0) {
    
#line 1097 
    ldv_spin_unlock_irqrestore_95_1(& priv->wmm.ra_list_spinlock,ra_list_flags);
    
#line 1099 
    if ((adapter->debug_mask & 8U) != 0U) {
      
#line 1099 
      if (adapter->dev != (struct device *)0) 
#line 1099 
                                              _dev_info((struct device const *)adapter->dev,"data: nothing to send\n"); else ;
    }
    else ;
    
#line 1100 
    goto return_label;
  }
  else ;
  
#line 1103 
  skb = skb_dequeue(& ptr->skb_head);
  
#line 1105 
  tx_info = MWIFIEX_SKB_TXCB(skb);
  
#line 1106 
  if ((adapter->debug_mask & 8U) != 0U) {
    
#line 1106 
    if (adapter->dev != (struct device *)0) 
#line 1106 
                                            _dev_info((struct device const *)adapter->dev,"data: dequeuing the packet %p %p\n",ptr,skb); else ;
  }
  else ;
  
#line 1109 
  ptr->total_pkt_count = (u16)((int)ptr->total_pkt_count - 1);
  
#line 1111 
  tmp_0 = skb_queue_empty((struct sk_buff_head const *)(& ptr->skb_head));
  
#line 1111 
  if (tmp_0 == 0) 
#line 1112 
                  skb_next = skb_peek((struct sk_buff_head const *)(& ptr->skb_head)); else 
                                                                    
#line 1114 
                                                                    skb_next = (struct sk_buff *)0;
  
#line 1116 
  ldv_spin_unlock_irqrestore_96_1(& priv->wmm.ra_list_spinlock,ra_list_flags);
  
#line 1118 
  if (skb_next != (struct sk_buff *)0) 
#line 1118 
                                       tx_param.next_pkt_len = skb_next->len + 20U; else 
                                                                    
#line 1118 
                                                                    tx_param.next_pkt_len = 0U;
  
#line 1121 
  tmp_2 = mwifiex_process_tx(priv,skb,& tx_param);
  
#line 1121 
  if (tmp_2 == -16) {
    int tmp_1;
    
#line 1123 
    ldv___ldv_spin_lock_97_1(& priv->wmm.ra_list_spinlock);
    
#line 1125 
    tmp_1 = mwifiex_is_ralist_valid(priv,ptr,ptr_index);
    
#line 1125 
    if (tmp_1 == 0) {
      
#line 1126 
      ldv_spin_unlock_irqrestore_98_1(& priv->wmm.ra_list_spinlock,ra_list_flags);
      
#line 1128 
      mwifiex_write_data_complete(adapter,skb,0,-1);
      
#line 1129 
      goto return_label;
    }
    else ;
    
#line 1132 
    skb_queue_tail(& ptr->skb_head,skb);
    
#line 1134 
    ptr->total_pkt_count = (u16)((int)ptr->total_pkt_count + 1);
    
#line 1135 
    ptr->ba_pkt_count = (u16)((int)ptr->ba_pkt_count + 1);
    
#line 1136 
    tx_info->flags = (unsigned char)((unsigned int)tx_info->flags | 1U);
    
#line 1137 
    ldv_spin_unlock_irqrestore_99_1(& priv->wmm.ra_list_spinlock,ra_list_flags);
  }
  else {
    
#line 1140 
    mwifiex_rotate_priolists(priv,ptr,ptr_index);
    
#line 1141 
    atomic_dec_2(& priv->wmm.tx_pkts_queued);
  }
  return_label: 
#line 1143 
                return;
}


#line 1150  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/wmm.c"
static int mwifiex_is_ptr_processed(struct mwifiex_private *priv, struct mwifiex_ra_list_tbl *ptr)
{
  int __retres;
  struct sk_buff *skb;
  struct mwifiex_txinfo *tx_info;
  int tmp;
  
#line 1156 
  tmp = skb_queue_empty((struct sk_buff_head const *)(& ptr->skb_head));
  
#line 1156 
  if (tmp != 0) {
    
#line 1157 
    __retres = 0;
    
#line 1157 
    goto return_label;
  }
  else ;
  
#line 1159 
  skb = skb_peek((struct sk_buff_head const *)(& ptr->skb_head));
  
#line 1161 
  tx_info = MWIFIEX_SKB_TXCB(skb);
  
#line 1162 
  if (((unsigned long)tx_info->flags & 1UL) != 0UL) {
    
#line 1163 
    __retres = 1;
    
#line 1163 
    goto return_label;
  }
  else ;
  
#line 1165 
  __retres = 0;
  return_label: 
#line 1165 
                return __retres;
}


#line 1173  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/wmm.c"
static void mwifiex_send_processed_packet(struct mwifiex_private *priv, struct mwifiex_ra_list_tbl *ptr, int ptr_index, unsigned long ra_list_flags)
{
  struct mwifiex_tx_param tx_param;
  struct sk_buff *skb;
  struct sk_buff *skb_next;
  struct mwifiex_txinfo *tx_info;
  int tmp;
  int tmp_0;
  
#line 1179 
  struct mwifiex_adapter *adapter = priv->adapter;
  
#line 1180 
  int ret = -1;
  
#line 1184 
  tmp = skb_queue_empty((struct sk_buff_head const *)(& ptr->skb_head));
  
#line 1184 
  if (tmp != 0) {
    
#line 1185 
    ldv_spin_unlock_irqrestore_100_1(& priv->wmm.ra_list_spinlock,ra_list_flags);
    
#line 1187 
    goto return_label;
  }
  else ;
  
#line 1190 
  skb = skb_dequeue(& ptr->skb_head);
  
#line 1192 
  if ((unsigned int)adapter->data_sent != 0U || (unsigned int)adapter->tx_lock_flag != 0U) {
    
#line 1193 
    ldv_spin_unlock_irqrestore_101_0(& priv->wmm.ra_list_spinlock,ra_list_flags);
    
#line 1195 
    skb_queue_tail(& adapter->tx_data_q,skb);
    
#line 1196 
    atomic_inc_3(& adapter->tx_queued);
    
#line 1197 
    goto return_label;
  }
  else ;
  
#line 1200 
  tmp_0 = skb_queue_empty((struct sk_buff_head const *)(& ptr->skb_head));
  
#line 1200 
  if (tmp_0 == 0) 
#line 1201 
                  skb_next = skb_peek((struct sk_buff_head const *)(& ptr->skb_head)); else 
                                                                    
#line 1203 
                                                                    skb_next = (struct sk_buff *)0;
  
#line 1205 
  tx_info = MWIFIEX_SKB_TXCB(skb);
  
#line 1207 
  ldv_spin_unlock_irqrestore_102(& priv->wmm.ra_list_spinlock,ra_list_flags);
  
#line 1209 
  if ((unsigned int)adapter->iface_type == 2U) {
    
#line 1210 
    adapter->data_sent = (unsigned char)1U;
    
#line 1211 
    ret = (*(adapter->if_ops.host_to_card))(adapter,(unsigned char)2,skb,(struct mwifiex_tx_param *)0);
  }
  else {
    
#line 1214 
    if (skb_next != (struct sk_buff *)0) 
#line 1214 
                                         tx_param.next_pkt_len = skb_next->len + 20U; else 
                                                                    
#line 1214 
                                                                    tx_param.next_pkt_len = 0U;
    
#line 1217 
    ret = (*(adapter->if_ops.host_to_card))(adapter,(unsigned char)0,skb,& tx_param);
  }
  
#line 1221 
  switch (ret) {
    int tmp_1;
    case -16: 
#line 1222 
    ;
    
#line 1223 
    if ((adapter->debug_mask & 4U) != 0U) {
      
#line 1223 
      if (adapter->dev != (struct device *)0) 
#line 1223 
                                              _dev_info((struct device const *)adapter->dev,"data: -EBUSY is returned\n"); else ;
    }
    else ;
    
#line 1224 
    ldv___ldv_spin_lock_103(& priv->wmm.ra_list_spinlock);
    
#line 1226 
    tmp_1 = mwifiex_is_ralist_valid(priv,ptr,ptr_index);
    
#line 1226 
    if (tmp_1 == 0) {
      
#line 1227 
      ldv_spin_unlock_irqrestore_104(& priv->wmm.ra_list_spinlock,ra_list_flags);
      
#line 1229 
      mwifiex_write_data_complete(adapter,skb,0,-1);
      
#line 1230 
      goto return_label;
    }
    else ;
    
#line 1233 
    skb_queue_tail(& ptr->skb_head,skb);
    
#line 1235 
    tx_info->flags = (unsigned char)((unsigned int)tx_info->flags | 1U);
    
#line 1236 
    ldv_spin_unlock_irqrestore_105_0(& priv->wmm.ra_list_spinlock,ra_list_flags);
    
#line 1238 
    goto ldv_62062;
    case -1: 
#line 1239 
    ;
    
#line 1240 
    if ((unsigned int)adapter->iface_type != 1U) 
#line 1241 
                                                 adapter->data_sent = (unsigned char)0U; else ;
    
#line 1242 
    if ((adapter->debug_mask & 4U) != 0U) {
      
#line 1242 
      if (adapter->dev != (struct device *)0) 
#line 1242 
                                              _dev_info((struct device const *)adapter->dev,"host_to_card failed: %#x\n",ret); else ;
    }
    else ;
    
#line 1243 
    adapter->dbg.num_tx_host_to_card_failure += 1U;
    
#line 1244 
    mwifiex_write_data_complete(adapter,skb,0,ret);
    
#line 1245 
    goto ldv_62062;
    case -115: 
#line 1246 
    ;
    
#line 1247 
    if ((unsigned int)adapter->iface_type != 1U) 
#line 1248 
                                                 adapter->data_sent = (unsigned char)0U; else ;
    
#line 1249 
    goto ldv_62062;
    case 0: 
#line 1250 
    ;
    
#line 1251 
    mwifiex_write_data_complete(adapter,skb,0,ret);
    default: 
#line 1252 
    ;
    
#line 1253 
    goto ldv_62062;
  }
  ldv_62062: 
#line 1255 
  ;
  
#line 1255 
  if (ret != -16) {
    
#line 1256 
    mwifiex_rotate_priolists(priv,ptr,ptr_index);
    
#line 1257 
    atomic_dec_2(& priv->wmm.tx_pkts_queued);
  }
  else ;
  return_label: 
#line 1259 
                return;
}


#line 1266  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/wmm.c"
static int mwifiex_dequeue_tx_packet(struct mwifiex_adapter *adapter)
{
  int __retres;
  struct mwifiex_ra_list_tbl *ptr;
  u8 ra[6U];
  unsigned long flags;
  int tmp;
  int tmp_0;
  
#line 1269 
  struct mwifiex_private *priv = (struct mwifiex_private *)0;
  
#line 1270 
  int ptr_index = 0;
  
#line 1272 
  int tid_del = 0;
  
#line 1272 
  int tid = 0;
  
#line 1275 
  ptr = mwifiex_wmm_get_highest_priolist_ptr(adapter,& priv,& ptr_index);
  
#line 1276 
  if (ptr == (struct mwifiex_ra_list_tbl *)0) {
    
#line 1277 
    __retres = -1;
    
#line 1277 
    goto return_label;
  }
  else ;
  
#line 1279 
  tid = mwifiex_get_tid(ptr);
  
#line 1281 
  if ((adapter->debug_mask & 8U) != 0U) {
    
#line 1281 
    if (adapter->dev != (struct device *)0) 
#line 1281 
                                            _dev_info((struct device const *)adapter->dev,"data: tid=%d\n",tid); else ;
  }
  else ;
  
#line 1283 
  ldv___ldv_spin_lock_106_0(& priv->wmm.ra_list_spinlock);
  
#line 1284 
  tmp = mwifiex_is_ralist_valid(priv,ptr,ptr_index);
  
#line 1284 
  if (tmp == 0) {
    
#line 1285 
    ldv_spin_unlock_irqrestore_107_0(& priv->wmm.ra_list_spinlock,flags);
    
#line 1286 
    __retres = -1;
    
#line 1286 
    goto return_label;
  }
  else ;
  
#line 1289 
  tmp_0 = mwifiex_is_ptr_processed(priv,ptr);
  
#line 1289 
  if (tmp_0 != 0) {
    
#line 1290 
    mwifiex_send_processed_packet(priv,ptr,ptr_index,flags);
    
#line 1293 
    __retres = 0;
    
#line 1293 
    goto return_label;
  }
  else ;
  
#line 1296 
  if ((ptr->is_11n_enabled == 0U || ptr->ba_status != (unsigned int)BA_SETUP_NONE) || (unsigned int)priv->wps.session_enable != 0U) 
    
#line 1299 
    if ((ptr->is_11n_enabled != 0U && ptr->ba_status != (unsigned int)BA_SETUP_NONE) && (unsigned int)ptr->amsdu_in_ampdu != 0U) {
      u8 tmp_1;
      
#line 1301 
      tmp_1 = mwifiex_is_amsdu_allowed(priv,tid);
      
#line 1301 
      if ((unsigned int)tmp_1 != 0U) {
        int tmp_2;
        
#line 1302 
        tmp_2 = mwifiex_is_11n_aggragation_possible(priv,ptr,(int)adapter->tx_buf_size);
        
#line 1302 
        if (tmp_2 != 0) 
#line 1305 
                        mwifiex_11n_aggregate_pkt(priv,ptr,ptr_index,flags); else 
                                                                    
#line 1310 
                                                                    mwifiex_send_single_packet(priv,ptr,ptr_index,flags);
      }
      else 
#line 1310 
           mwifiex_send_single_packet(priv,ptr,ptr_index,flags);
    }
    else 
#line 1310 
         mwifiex_send_single_packet(priv,ptr,ptr_index,flags);
  else {
    u8 tmp_5;
    u8 tmp_6;
    
#line 1315 
    tmp_5 = mwifiex_is_ampdu_allowed(priv,ptr,tid);
    
#line 1315 
    if ((unsigned int)tmp_5 != 0U) {
      
#line 1316 
      if ((int)ptr->ba_pkt_count > (int)((unsigned short)ptr->ba_packet_thr)) {
        u8 tmp_4;
        
#line 1317 
        tmp_4 = mwifiex_space_avail_for_new_ba_stream(adapter);
        
#line 1317 
        if ((unsigned int)tmp_4 != 0U) {
          
#line 1318 
          mwifiex_create_ba_tbl(priv,(u8 *)(& ptr->ra),tid,(enum mwifiex_ba_status)BA_SETUP_INPROGRESS);
          
#line 1320 
          mwifiex_send_addba(priv,tid,(u8 *)(& ptr->ra));
        }
        else {
          u8 tmp_3;
          
#line 1321 
          tmp_3 = mwifiex_find_stream_to_delete(priv,tid,& tid_del,(u8 *)(& ra));
          
#line 1321 
          if ((unsigned int)tmp_3 != 0U) {
            
#line 1323 
            mwifiex_create_ba_tbl(priv,(u8 *)(& ptr->ra),tid,(enum mwifiex_ba_status)BA_SETUP_INPROGRESS);
            
#line 1325 
            mwifiex_send_delba(priv,tid_del,(u8 *)(& ra),1);
          }
          else ;
        }
      }
      else ;
    }
    else ;
    
#line 1328 
    tmp_6 = mwifiex_is_amsdu_allowed(priv,tid);
    
#line 1328 
    if ((unsigned int)tmp_6 != 0U) {
      int tmp_7;
      
#line 1328 
      tmp_7 = mwifiex_is_11n_aggragation_possible(priv,ptr,(int)adapter->tx_buf_size);
      
#line 1328 
      if (tmp_7 != 0) 
#line 1331 
                      mwifiex_11n_aggregate_pkt(priv,ptr,ptr_index,flags); else 
                                                                    
#line 1335 
                                                                    mwifiex_send_single_packet(priv,ptr,ptr_index,flags);
    }
    else 
#line 1335 
         mwifiex_send_single_packet(priv,ptr,ptr_index,flags);
  }
  
#line 1339 
  __retres = 0;
  return_label: 
#line 1339 
                return __retres;
}


#line 1347  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/wmm.c"
void mwifiex_wmm_process_tx(struct mwifiex_adapter *adapter)
{
  int tmp;
  int tmp_1;
  ldv_62081: 
#line 1349 
  ;
  
#line 1350 
  tmp = mwifiex_dequeue_tx_packet(adapter);
  
#line 1350 
  if (tmp != 0) 
#line 1351 
                goto ldv_62080; else ;
  
#line 1352 
  if ((unsigned int)adapter->iface_type != 0U) {
    
#line 1353 
    if ((unsigned int)adapter->data_sent != 0U || (unsigned int)adapter->tx_lock_flag != 0U) 
      
#line 1355 
      goto ldv_62080; else ;
  }
  else {
    int tmp_0;
    
#line 1357 
    tmp_0 = atomic_read((atomic_t const *)(& adapter->tx_queued));
    
#line 1357 
    if (tmp_0 > 15) 
#line 1359 
                    goto ldv_62080; else ;
  }
  
#line 1361 
  tmp_1 = mwifiex_wmm_lists_empty(adapter);
  
#line 1361 
  if (tmp_1 == 0) 
#line 1363 
                  goto ldv_62081; else 
#line 1366 
                                       goto ldv_62080;
  ldv_62080: 
#line 1367 
  ;
  
#line 1368 
  return;
}


#line 106  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_wmm.c.aux"
static void atomic_sub(int i, atomic_t *v)
{
  
#line 109 
  ldv_atomic_sub(i,v);
  
#line 110 
  return;
}


#line 120  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_wmm.c.aux"
static void atomic_inc_3(atomic_t *v)
{
  
#line 123 
  ldv_atomic_inc(v);
  
#line 124 
  return;
}


#line 127  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_wmm.c.aux"
static void atomic_dec_2(atomic_t *v)
{
  
#line 130 
  ldv_atomic_dec(v);
  
#line 131 
  return;
}


#line 436  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_wmm.c.aux"
static void *kzalloc_2(size_t size, gfp_t flags)
{
  void *tmp;
  
#line 439 
  tmp = ldv_kzalloc(size,flags);
  
#line 439 
  return tmp;
}


#line 771  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_wmm.c.aux"
static void ldv___ldv_spin_lock_76(spinlock_t *ldv_func_arg1)
{
  
#line 775 
  ldv_spin_model_lock((char *)"tx_ba_stream_tbl_lock_of_mwifiex_private");
  
#line 777 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 778 
  return;
}


#line 781  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_wmm.c.aux"
static void ldv_spin_unlock_irqrestore_77(spinlock_t *lock, unsigned long flags)
{
  
#line 785 
  ldv_spin_model_unlock((char *)"tx_ba_stream_tbl_lock_of_mwifiex_private");
  
#line 787 
  spin_unlock_irqrestore_3(lock,flags);
  
#line 788 
  return;
}


#line 791  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_wmm.c.aux"
static void ldv___ldv_spin_lock_78_2(spinlock_t *ldv_func_arg1)
{
  
#line 795 
  ldv_spin_model_lock((char *)"sta_list_spinlock_of_mwifiex_private");
  
#line 797 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 798 
  return;
}


#line 801  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_wmm.c.aux"
static void ldv_spin_unlock_irqrestore_79_2(spinlock_t *lock, unsigned long flags)
{
  
#line 805 
  ldv_spin_model_unlock((char *)"sta_list_spinlock_of_mwifiex_private");
  
#line 807 
  spin_unlock_irqrestore_3(lock,flags);
  
#line 808 
  return;
}


#line 811  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_wmm.c.aux"
static void ldv___ldv_spin_lock_80_1(spinlock_t *ldv_func_arg1)
{
  
#line 815 
  ldv_spin_model_lock((char *)"ra_list_spinlock_of_mwifiex_wmm_desc");
  
#line 817 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 818 
  return;
}


#line 821  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_wmm.c.aux"
static void ldv_spin_unlock_irqrestore_81_2(spinlock_t *lock, unsigned long flags)
{
  
#line 825 
  ldv_spin_model_unlock((char *)"ra_list_spinlock_of_mwifiex_wmm_desc");
  
#line 827 
  spin_unlock_irqrestore_3(lock,flags);
  
#line 828 
  return;
}


#line 831  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_wmm.c.aux"
static void ldv___ldv_spin_lock_82_2(spinlock_t *ldv_func_arg1)
{
  
#line 835 
  ldv_spin_model_lock((char *)"ra_list_spinlock_of_mwifiex_wmm_desc");
  
#line 837 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 838 
  return;
}


#line 841  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_wmm.c.aux"
static void ldv_spin_unlock_irqrestore_83_2(spinlock_t *lock, unsigned long flags)
{
  
#line 845 
  ldv_spin_model_unlock((char *)"ra_list_spinlock_of_mwifiex_wmm_desc");
  
#line 847 
  spin_unlock_irqrestore_3(lock,flags);
  
#line 848 
  return;
}


#line 851  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_wmm.c.aux"
static void ldv___ldv_spin_lock_84_1(spinlock_t *ldv_func_arg1)
{
  
#line 855 
  ldv_spin_model_lock((char *)"ra_list_spinlock_of_mwifiex_wmm_desc");
  
#line 857 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 858 
  return;
}


#line 861  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_wmm.c.aux"
static void ldv_spin_unlock_irqrestore_85_2(spinlock_t *lock, unsigned long flags)
{
  
#line 865 
  ldv_spin_model_unlock((char *)"ra_list_spinlock_of_mwifiex_wmm_desc");
  
#line 867 
  spin_unlock_irqrestore_3(lock,flags);
  
#line 868 
  return;
}


#line 871  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_wmm.c.aux"
static void ldv_spin_unlock_irqrestore_86(spinlock_t *lock, unsigned long flags)
{
  
#line 875 
  ldv_spin_model_unlock((char *)"ra_list_spinlock_of_mwifiex_wmm_desc");
  
#line 877 
  spin_unlock_irqrestore_3(lock,flags);
  
#line 878 
  return;
}


#line 881  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_wmm.c.aux"
static void ldv_spin_unlock_irqrestore_87_0(spinlock_t *lock, unsigned long flags)
{
  
#line 885 
  ldv_spin_model_unlock((char *)"ra_list_spinlock_of_mwifiex_wmm_desc");
  
#line 887 
  spin_unlock_irqrestore_3(lock,flags);
  
#line 888 
  return;
}


#line 891  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_wmm.c.aux"
static void ldv___ldv_spin_lock_88_1(spinlock_t *ldv_func_arg1)
{
  
#line 895 
  ldv_spin_model_lock((char *)"ra_list_spinlock_of_mwifiex_wmm_desc");
  
#line 897 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 898 
  return;
}


#line 901  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_wmm.c.aux"
static void ldv_spin_unlock_irqrestore_89_2(spinlock_t *lock, unsigned long flags)
{
  
#line 905 
  ldv_spin_model_unlock((char *)"ra_list_spinlock_of_mwifiex_wmm_desc");
  
#line 907 
  spin_unlock_irqrestore_3(lock,flags);
  
#line 908 
  return;
}


#line 911  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_wmm.c.aux"
static void ldv_spin_unlock_irqrestore_90(spinlock_t *lock, unsigned long flags)
{
  
#line 915 
  ldv_spin_model_unlock((char *)"ra_list_spinlock_of_mwifiex_wmm_desc");
  
#line 917 
  spin_unlock_irqrestore_3(lock,flags);
  
#line 918 
  return;
}


#line 921  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_wmm.c.aux"
static void ldv___ldv_spin_lock_91(spinlock_t *ldv_func_arg1)
{
  
#line 925 
  ldv_spin_model_lock((char *)"bss_prio_lock_of_mwifiex_bss_prio_tbl");
  
#line 927 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 928 
  return;
}


#line 931  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_wmm.c.aux"
static void ldv_spin_unlock_irqrestore_92(spinlock_t *lock, unsigned long flags)
{
  
#line 935 
  ldv_spin_model_unlock((char *)"bss_prio_lock_of_mwifiex_bss_prio_tbl");
  
#line 937 
  spin_unlock_irqrestore_3(lock,flags);
  
#line 938 
  return;
}


#line 941  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_wmm.c.aux"
static void ldv___ldv_spin_lock_93_0(spinlock_t *ldv_func_arg1)
{
  
#line 945 
  ldv_spin_model_lock((char *)"ra_list_spinlock_of_mwifiex_wmm_desc");
  
#line 947 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 948 
  return;
}


#line 951  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_wmm.c.aux"
static void ldv_spin_unlock_irqrestore_94_1(spinlock_t *lock, unsigned long flags)
{
  
#line 955 
  ldv_spin_model_unlock((char *)"ra_list_spinlock_of_mwifiex_wmm_desc");
  
#line 957 
  spin_unlock_irqrestore_3(lock,flags);
  
#line 958 
  return;
}


#line 961  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_wmm.c.aux"
static void ldv_spin_unlock_irqrestore_95_1(spinlock_t *lock, unsigned long flags)
{
  
#line 965 
  ldv_spin_model_unlock((char *)"ra_list_spinlock_of_mwifiex_wmm_desc");
  
#line 967 
  spin_unlock_irqrestore_3(lock,flags);
  
#line 968 
  return;
}


#line 971  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_wmm.c.aux"
static void ldv_spin_unlock_irqrestore_96_1(spinlock_t *lock, unsigned long flags)
{
  
#line 975 
  ldv_spin_model_unlock((char *)"ra_list_spinlock_of_mwifiex_wmm_desc");
  
#line 977 
  spin_unlock_irqrestore_3(lock,flags);
  
#line 978 
  return;
}


#line 981  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_wmm.c.aux"
static void ldv___ldv_spin_lock_97_1(spinlock_t *ldv_func_arg1)
{
  
#line 985 
  ldv_spin_model_lock((char *)"ra_list_spinlock_of_mwifiex_wmm_desc");
  
#line 987 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 988 
  return;
}


#line 991  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_wmm.c.aux"
static void ldv_spin_unlock_irqrestore_98_1(spinlock_t *lock, unsigned long flags)
{
  
#line 995 
  ldv_spin_model_unlock((char *)"ra_list_spinlock_of_mwifiex_wmm_desc");
  
#line 997 
  spin_unlock_irqrestore_3(lock,flags);
  
#line 998 
  return;
}


#line 1001  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_wmm.c.aux"
static void ldv_spin_unlock_irqrestore_99_1(spinlock_t *lock, unsigned long flags)
{
  
#line 1005 
  ldv_spin_model_unlock((char *)"ra_list_spinlock_of_mwifiex_wmm_desc");
  
#line 1007 
  spin_unlock_irqrestore_3(lock,flags);
  
#line 1008 
  return;
}


#line 1011  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_wmm.c.aux"
static void ldv_spin_unlock_irqrestore_100_1(spinlock_t *lock, unsigned long flags)
{
  
#line 1015 
  ldv_spin_model_unlock((char *)"ra_list_spinlock_of_mwifiex_wmm_desc");
  
#line 1017 
  spin_unlock_irqrestore_3(lock,flags);
  
#line 1018 
  return;
}


#line 1021  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_wmm.c.aux"
static void ldv_spin_unlock_irqrestore_101_0(spinlock_t *lock, unsigned long flags)
{
  
#line 1025 
  ldv_spin_model_unlock((char *)"ra_list_spinlock_of_mwifiex_wmm_desc");
  
#line 1027 
  spin_unlock_irqrestore_3(lock,flags);
  
#line 1028 
  return;
}


#line 1031  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_wmm.c.aux"
static void ldv_spin_unlock_irqrestore_102(spinlock_t *lock, unsigned long flags)
{
  
#line 1035 
  ldv_spin_model_unlock((char *)"ra_list_spinlock_of_mwifiex_wmm_desc");
  
#line 1037 
  spin_unlock_irqrestore_3(lock,flags);
  
#line 1038 
  return;
}


#line 1041  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_wmm.c.aux"
static void ldv___ldv_spin_lock_103(spinlock_t *ldv_func_arg1)
{
  
#line 1045 
  ldv_spin_model_lock((char *)"ra_list_spinlock_of_mwifiex_wmm_desc");
  
#line 1047 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 1048 
  return;
}


#line 1051  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_wmm.c.aux"
static void ldv_spin_unlock_irqrestore_104(spinlock_t *lock, unsigned long flags)
{
  
#line 1055 
  ldv_spin_model_unlock((char *)"ra_list_spinlock_of_mwifiex_wmm_desc");
  
#line 1057 
  spin_unlock_irqrestore_3(lock,flags);
  
#line 1058 
  return;
}


#line 1061  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_wmm.c.aux"
static void ldv_spin_unlock_irqrestore_105_0(spinlock_t *lock, unsigned long flags)
{
  
#line 1065 
  ldv_spin_model_unlock((char *)"ra_list_spinlock_of_mwifiex_wmm_desc");
  
#line 1067 
  spin_unlock_irqrestore_3(lock,flags);
  
#line 1068 
  return;
}


#line 1071  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_wmm.c.aux"
static void ldv___ldv_spin_lock_106_0(spinlock_t *ldv_func_arg1)
{
  
#line 1075 
  ldv_spin_model_lock((char *)"ra_list_spinlock_of_mwifiex_wmm_desc");
  
#line 1077 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 1078 
  return;
}


#line 1081  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_wmm.c.aux"
static void ldv_spin_unlock_irqrestore_107_0(spinlock_t *lock, unsigned long flags)
{
  
#line 1085 
  ldv_spin_model_unlock((char *)"ra_list_spinlock_of_mwifiex_wmm_desc");
  
#line 1087 
  spin_unlock_irqrestore_3(lock,flags);
  
#line 1088 
  return;
}


#line 143  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/byteorder/generic.h"
__inline static void le16_add_cpu(__le16 *var, u16 val)
{
  
#line 145 
  *var = (unsigned short)((int)*var + (int)val);
  
#line 146 
  return;
}


#line 446  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_unlock_irqrestore_4(spinlock_t *lock, unsigned long flags)
{
  {
    unsigned long __dummy;
    unsigned long __dummy2;
    
  }
  
#line 448 
  _raw_spin_unlock_irqrestore(& lock->__anonCompField_spinlock_18.rlock,flags);
  
#line 449 
  return;
}


#line 482 
static void ldv_spin_unlock_irqrestore_79_3(spinlock_t *lock, unsigned long flags);


#line 486 
static void ldv_spin_unlock_irqrestore_81_3(spinlock_t *lock, unsigned long flags);


#line 490 
static void ldv_spin_unlock_irqrestore_83_3(spinlock_t *lock, unsigned long flags);


#line 494 
static void ldv_spin_unlock_irqrestore_85_3(spinlock_t *lock, unsigned long flags);


#line 498 
static void ldv_spin_unlock_irqrestore_87_1(spinlock_t *lock, unsigned long flags);


#line 502 
static void ldv_spin_unlock_irqrestore_89_3(spinlock_t *lock, unsigned long flags);


#line 506 
static void ldv_spin_unlock_irqrestore_91_2(spinlock_t *lock, unsigned long flags);


#line 510 
static void ldv_spin_unlock_irqrestore_93_1(spinlock_t *lock, unsigned long flags);


#line 514 
static void ldv_spin_unlock_irqrestore_94_2(spinlock_t *lock, unsigned long flags);


#line 518 
static void ldv_spin_unlock_irqrestore_96_2(spinlock_t *lock, unsigned long flags);


#line 522 
static void ldv_spin_unlock_irqrestore_97_0(spinlock_t *lock, unsigned long flags);


#line 526 
static void ldv_spin_unlock_irqrestore_100_2(spinlock_t *lock, unsigned long flags);


#line 530 
static void ldv_spin_unlock_irqrestore_101_1(spinlock_t *lock, unsigned long flags);


#line 534 
static void ldv_spin_unlock_irqrestore_103_2(spinlock_t *lock, unsigned long flags);


#line 74  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_scan.c.aux"
static void ldv___ldv_spin_lock_78_3(spinlock_t *ldv_func_arg1);


#line 78 
static void ldv___ldv_spin_lock_80_2(spinlock_t *ldv_func_arg1);


#line 82 
static void ldv___ldv_spin_lock_82_3(spinlock_t *ldv_func_arg1);


#line 86 
static void ldv___ldv_spin_lock_86_0(spinlock_t *ldv_func_arg1);


#line 90 
static void ldv___ldv_spin_lock_88_2(spinlock_t *ldv_func_arg1);


#line 94 
static void ldv___ldv_spin_lock_90_2(spinlock_t *ldv_func_arg1);


#line 98 
static void ldv___ldv_spin_lock_92_2(spinlock_t *ldv_func_arg1);


#line 102 
static void ldv___ldv_spin_lock_95(spinlock_t *ldv_func_arg1);


#line 106 
static void ldv___ldv_spin_lock_98_0(spinlock_t *ldv_func_arg1);


#line 110 
static void ldv___ldv_spin_lock_99_0(spinlock_t *ldv_func_arg1);


#line 114 
static void ldv___ldv_spin_lock_102_2(spinlock_t *ldv_func_arg1);


#line 494  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/workqueue.h"
static bool ldv_queue_work_84(struct workqueue_struct *wq, struct work_struct *work);


#line 418  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/slab.h"
static void *kmalloc_0(size_t size, gfp_t flags);


#line 542 
static void *kcalloc_0(size_t n, size_t size, gfp_t flags);


#line 581 
static void *kzalloc_3(size_t size, gfp_t flags);


#line 3544  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/cfg80211.h"
struct ieee80211_channel *__ieee80211_get_channel(struct wiphy *, int);


#line 3553  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/cfg80211.h"
__inline static struct ieee80211_channel *ieee80211_get_channel(struct wiphy *wiphy, int freq)
{
  struct ieee80211_channel *tmp;
  
#line 3555 
  tmp = __ieee80211_get_channel(wiphy,freq);
  
#line 3555 
  return tmp;
}


#line 4020 
struct cfg80211_bss *cfg80211_inform_bss_width(struct wiphy *, struct ieee80211_channel *, enum nl80211_bss_scan_width, enum cfg80211_bss_frame_type, u8 const *, u64, u16, u16, u8 const *, size_t, s32, gfp_t);


#line 4029  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/cfg80211.h"
__inline static struct cfg80211_bss *cfg80211_inform_bss(struct wiphy *wiphy, struct ieee80211_channel *rx_channel, enum cfg80211_bss_frame_type ftype, u8 const *bssid, u64 tsf, u16 capability, u16 beacon_interval, u8 const *ie, size_t ielen, s32 signal, gfp_t gfp)
{
  struct cfg80211_bss *tmp;
  
#line 4036 
  tmp = cfg80211_inform_bss_width(wiphy,rx_channel,(enum nl80211_bss_scan_width)NL80211_BSS_CHAN_WIDTH_20,ftype,bssid,tsf,(unsigned short)((int)capability),(unsigned short)((int)beacon_interval),ie,ielen,signal,gfp);
  
#line 4036 
  return tmp;
}


#line 4075 
void cfg80211_put_bss(struct wiphy *, struct cfg80211_bss *);


#line 93  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/etherdevice.h"
__inline static bool is_zero_ether_addr(u8 const *addr)
{
  bool __retres;
  
#line 96 
  __retres = (_Bool)((*((u32 const *)addr) | (unsigned int)*((u16 const *)(addr + 4U))) == 0U);
  
#line 96 
  return __retres;
}


#line 1093  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.h"
int mwifiex_cmd_802_11_scan(struct host_cmd_ds_command *cmd, struct mwifiex_scan_cmd_config *scan_cfg);


#line 1097 
int mwifiex_ret_802_11_scan(struct mwifiex_private *priv, struct host_cmd_ds_command *resp);


#line 1099 
s32 mwifiex_ssid_cmp(struct cfg80211_ssid *ssid1, struct cfg80211_ssid *ssid2);


#line 1123 
int mwifiex_cmd_802_11_bg_scan_query(struct host_cmd_ds_command *cmd);


#line 1124 
struct mwifiex_chan_freq_power *mwifiex_get_cfp(struct mwifiex_private *priv, u8 band, u16 channel, u32 freq);


#line 1131 
int mwifiex_cmd_append_vsie_tlv(struct mwifiex_private *priv, u16 vsie_mask, u8 **buffer);


#line 1136 
u32 mwifiex_get_rates_from_cfg80211(struct mwifiex_private *priv, u8 *rates, u8 radio_type);


#line 1140 
void mwifiex_save_curr_bcn(struct mwifiex_private *priv);


#line 1177 
int mwifiex_cmd_802_11_scan_ext(struct mwifiex_private *priv, struct host_cmd_ds_command *cmd, void *data_buf);


#line 1180 
int mwifiex_ret_802_11_scan_ext(struct mwifiex_private *priv, struct host_cmd_ds_command *resp);


#line 1300  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.h"
__inline static u8 mwifiex_11h_get_csa_closed_channel(struct mwifiex_private *priv)
{
  u8 __retres;
  int tmp;
  
#line 1302 
  if ((unsigned int)priv->csa_chan == 0U) {
    
#line 1303 
    __retres = (unsigned char)0U;
    
#line 1303 
    goto return_label;
  }
  else ;
  {
    unsigned long __dummy;
    unsigned long volatile __dummy2;
    
#line 1306 
    tmp = 1;
  }
  
#line 1306 
  if (tmp != 0) {
    int tmp_0;
    {
      unsigned long __dummy_0;
      unsigned long __dummy2_0;
      
#line 1306 
      tmp_0 = 1;
    }
    
#line 1306 
    if (tmp_0 != 0) {
      
#line 1306 
      if ((long)(priv->csa_expire_time - jiffies) < 0L) {
        
#line 1307 
        priv->csa_chan = (unsigned char)0U;
        
#line 1308 
        priv->csa_expire_time = 0UL;
      }
      else ;
    }
    else ;
  }
  else ;
  
#line 1311 
  __retres = priv->csa_chan;
  return_label: 
#line 1311 
                return __retres;
}


#line 1352 
int mwifiex_request_scan(struct mwifiex_private *priv, struct cfg80211_ssid *req_ssid);


#line 1354 
int mwifiex_scan_networks(struct mwifiex_private *priv, struct mwifiex_user_scan_cfg const *user_scan_in);


#line 1404 
int mwifiex_fill_new_bss_desc(struct mwifiex_private *priv, struct cfg80211_bss *bss, struct mwifiex_bssdescriptor *bss_desc);


#line 1407 
int mwifiex_update_bss_desc_with_ie(struct mwifiex_adapter *adapter, struct mwifiex_bssdescriptor *bss_entry);


#line 1409 
int mwifiex_check_network_compatibility(struct mwifiex_private *priv, struct mwifiex_bssdescriptor *bss_desc);


#line 70  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/scan.c"
static u8 mwifiex_wpa_oui[2U][4U] = {{(unsigned char)0U, (unsigned char)80U, (unsigned char)242U, (unsigned char)2U}, {(unsigned char)0U, (unsigned char)80U, (unsigned char)242U, (unsigned char)4U}};

#line 74  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/scan.c"
static u8 mwifiex_rsn_oui[2U][4U] = {{(unsigned char)0U, (unsigned char)15U, (unsigned char)172U, (unsigned char)2U}, {(unsigned char)0U, (unsigned char)15U, (unsigned char)172U, (unsigned char)4U}};

#line 86  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/scan.c"
static u8 mwifiex_search_oui_in_ie(struct ie_body *iebody, u8 *oui)
{
  u8 __retres;
  u8 count;
  int tmp;
  
#line 90 
  count = iebody->ptk_cnt[0];
  
#line 96 
  goto ldv_61635;
  ldv_61634: 
#line 97 
  ;
  
#line 97 
  tmp = memcmp((void const *)(& iebody->ptk_body),(void const *)oui,4UL);
  
#line 97 
  if (tmp == 0) {
    
#line 98 
    __retres = (unsigned char)1U;
    
#line 98 
    goto return_label;
  }
  else ;
  
#line 100 
  count = (u8)((int)count - 1);
  
#line 101 
  if ((unsigned int)count != 0U) 
#line 102 
                                 iebody += 4U; else ;
  ldv_61635: 
#line 103 
  ;
  
#line 96 
  if ((unsigned int)count != 0U) 
#line 98 
                                 goto ldv_61634; else 
#line 101 
                                                      goto ldv_61636;
  ldv_61636: 
#line 102 
  ;
  {
    
#line 106 
    struct _ddebug descriptor = {.modname = "mwifiex", .function = "mwifiex_search_oui_in_ie", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/scan.c", .format = "info: %s: OUI is not found in PTK\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))106U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 106 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 106 
                                                        __dynamic_pr_debug(& descriptor,"mwifiex","mwifiex_search_oui_in_ie"); else ;
  }
  
#line 107 
  __retres = (unsigned char)0U;
  return_label: 
#line 107 
                return __retres;
}


#line 118  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/scan.c"
static u8 mwifiex_is_rsn_oui_present(struct mwifiex_bssdescriptor *bss_desc, u32 cipher)
{
  u8 __retres;
  u8 *oui;
  struct ie_body *iebody;
  
#line 122 
  u8 ret = (unsigned char)0U;
  
#line 124 
  if (bss_desc->bcn_rsn_ie != (struct ieee_types_generic *)0 && (unsigned int)(bss_desc->bcn_rsn_ie)->ieee_hdr.element_id == 48U) {
    
#line 126 
    iebody = (struct ie_body *)(& (bss_desc->bcn_rsn_ie)->data) + 2U;
    
#line 129 
    oui = & mwifiex_rsn_oui[cipher][0];
    
#line 130 
    ret = mwifiex_search_oui_in_ie(iebody,oui);
    
#line 131 
    if ((unsigned int)ret != 0U) {
      
#line 132 
      __retres = ret;
      
#line 132 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 134 
  __retres = ret;
  return_label: 
#line 134 
                return __retres;
}


#line 145  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/scan.c"
static u8 mwifiex_is_wpa_oui_present(struct mwifiex_bssdescriptor *bss_desc, u32 cipher)
{
  u8 __retres;
  u8 *oui;
  struct ie_body *iebody;
  
#line 149 
  u8 ret = (unsigned char)0U;
  
#line 151 
  if (bss_desc->bcn_wpa_ie != (struct ieee_types_vendor_specific *)0 && (unsigned int)(bss_desc->bcn_wpa_ie)->vend_hdr.element_id == 221U) {
    
#line 154 
    iebody = (struct ie_body *)(& (bss_desc->bcn_wpa_ie)->data);
    
#line 155 
    oui = & mwifiex_wpa_oui[cipher][0];
    
#line 156 
    ret = mwifiex_search_oui_in_ie(iebody,oui);
    
#line 157 
    if ((unsigned int)ret != 0U) {
      
#line 158 
      __retres = ret;
      
#line 158 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 160 
  __retres = ret;
  return_label: 
#line 160 
                return __retres;
}


#line 167  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/scan.c"
s32 mwifiex_ssid_cmp(struct cfg80211_ssid *ssid1, struct cfg80211_ssid *ssid2)
{
  s32 __retres;
  s32 tmp;
  
#line 169 
  if ((ssid1 == (struct cfg80211_ssid *)0 || ssid2 == (struct cfg80211_ssid *)0) || (int)ssid1->ssid_len != (int)ssid2->ssid_len) {
    
#line 170 
    __retres = -1;
    
#line 170 
    goto return_label;
  }
  else ;
  
#line 171 
  tmp = memcmp((void const *)(& ssid1->ssid),(void const *)(& ssid2->ssid),(unsigned long)ssid1->ssid_len);
  
#line 171 
  __retres = tmp;
  return_label: 
#line 171 
                return __retres;
}


#line 179  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/scan.c"
static bool mwifiex_is_bss_wapi(struct mwifiex_private *priv, struct mwifiex_bssdescriptor *bss_desc)
{
  bool __retres;
  
#line 182 
  if ((unsigned int)priv->sec_info.wapi_enabled != 0U && (bss_desc->bcn_wapi_ie != (struct ieee_types_generic *)0 && (unsigned int)(bss_desc->bcn_wapi_ie)->ieee_hdr.element_id == 68U)) {
    
#line 186 
    __retres = (_Bool)1;
    
#line 186 
    goto return_label;
  }
  else ;
  
#line 188 
  __retres = (_Bool)0;
  return_label: 
#line 188 
                return __retres;
}


#line 196  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/scan.c"
static bool mwifiex_is_bss_no_sec(struct mwifiex_private *priv, struct mwifiex_bssdescriptor *bss_desc)
{
  bool __retres;
  
#line 199 
  if (((((((unsigned int)priv->sec_info.wep_enabled == 0U && (unsigned int)priv->sec_info.wpa_enabled == 0U) && (unsigned int)priv->sec_info.wpa2_enabled == 0U) && (bss_desc->bcn_wpa_ie == (struct ieee_types_vendor_specific *)0 || (unsigned int)(bss_desc->bcn_wpa_ie)->vend_hdr.element_id != 221U)) && (bss_desc->bcn_rsn_ie == (struct ieee_types_generic *)0 || (unsigned int)(bss_desc->bcn_rsn_ie)->ieee_hdr.element_id != 48U)) && priv->sec_info.encryption_mode == 0U) && bss_desc->privacy == 0U) {
    
#line 207 
    __retres = (_Bool)1;
    
#line 207 
    goto return_label;
  }
  else ;
  
#line 209 
  __retres = (_Bool)0;
  return_label: 
#line 209 
                return __retres;
}


#line 217  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/scan.c"
static bool mwifiex_is_bss_static_wep(struct mwifiex_private *priv, struct mwifiex_bssdescriptor *bss_desc)
{
  bool __retres;
  
#line 220 
  if ((((unsigned int)priv->sec_info.wep_enabled != 0U && (unsigned int)priv->sec_info.wpa_enabled == 0U) && (unsigned int)priv->sec_info.wpa2_enabled == 0U) && bss_desc->privacy != 0U) {
    
#line 222 
    __retres = (_Bool)1;
    
#line 222 
    goto return_label;
  }
  else ;
  
#line 224 
  __retres = (_Bool)0;
  return_label: 
#line 224 
                return __retres;
}


#line 232  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/scan.c"
static bool mwifiex_is_bss_wpa(struct mwifiex_private *priv, struct mwifiex_bssdescriptor *bss_desc)
{
  bool __retres;
  
#line 235 
  if ((((unsigned int)priv->sec_info.wep_enabled == 0U && (unsigned int)priv->sec_info.wpa_enabled != 0U) && (unsigned int)priv->sec_info.wpa2_enabled == 0U) && (bss_desc->bcn_wpa_ie != (struct ieee_types_vendor_specific *)0 && (unsigned int)(bss_desc->bcn_wpa_ie)->vend_hdr.element_id == 221U)) {
    
#line 244 
    if (((priv->adapter)->debug_mask & 1073741824U) != 0U) {
      
#line 244 
      if ((priv->adapter)->dev != (struct device *)0) {
        char *tmp;
        char *tmp_0;
        char *tmp_1;
        int tmp_2;
        int tmp_3;
        
#line 244 
        ;
        
#line 244 
        ;
        
#line 244 
        if ((unsigned int)priv->sec_info.wpa2_enabled != 0U) 
#line 244 
                                                             tmp = (char *)"e"; else 
                                                                    
#line 244 
                                                                    tmp = (char *)"d";
        
#line 244 
        if ((unsigned int)priv->sec_info.wpa_enabled != 0U) 
#line 244 
                                                            tmp_0 = (char *)"e"; else 
                                                                    
#line 244 
                                                                    tmp_0 = (char *)"d";
        
#line 244 
        if ((unsigned int)priv->sec_info.wep_enabled != 0U) 
#line 244 
                                                            tmp_1 = (char *)"e"; else 
                                                                    
#line 244 
                                                                    tmp_1 = (char *)"d";
        
#line 244 
        if (bss_desc->bcn_rsn_ie != (struct ieee_types_generic *)0) 
#line 244 
                                                                    tmp_2 = (int)(bss_desc->bcn_rsn_ie)->ieee_hdr.element_id; else 
                                                                    
#line 244 
                                                                    tmp_2 = 0;
        
#line 244 
        if (bss_desc->bcn_wpa_ie != (struct ieee_types_vendor_specific *)0) 
          
#line 244 
          tmp_3 = (int)(bss_desc->bcn_wpa_ie)->vend_hdr.element_id; else 
                                                                    
#line 244 
                                                                    tmp_3 = 0;
        
#line 244 
        ;
        
#line 244 
        _dev_info((struct device const *)(priv->adapter)->dev,"info: %s: WPA:\t","mwifiex_is_bss_wpa",tmp_3,tmp_2,tmp_1,tmp_0,tmp,priv->sec_info.encryption_mode,bss_desc->privacy);
      }
      else ;
    }
    else ;
    
#line 259 
    __retres = (_Bool)1;
    
#line 259 
    goto return_label;
  }
  else ;
  
#line 261 
  __retres = (_Bool)0;
  return_label: 
#line 261 
                return __retres;
}


#line 269  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/scan.c"
static bool mwifiex_is_bss_wpa2(struct mwifiex_private *priv, struct mwifiex_bssdescriptor *bss_desc)
{
  bool __retres;
  
#line 272 
  if ((((unsigned int)priv->sec_info.wep_enabled == 0U && (unsigned int)priv->sec_info.wpa_enabled == 0U) && (unsigned int)priv->sec_info.wpa2_enabled != 0U) && (bss_desc->bcn_rsn_ie != (struct ieee_types_generic *)0 && (unsigned int)(bss_desc->bcn_rsn_ie)->ieee_hdr.element_id == 48U)) {
    
#line 281 
    if (((priv->adapter)->debug_mask & 1073741824U) != 0U) {
      
#line 281 
      if ((priv->adapter)->dev != (struct device *)0) {
        char *tmp;
        char *tmp_0;
        char *tmp_1;
        int tmp_2;
        int tmp_3;
        
#line 281 
        ;
        
#line 281 
        ;
        
#line 281 
        if ((unsigned int)priv->sec_info.wpa2_enabled != 0U) 
#line 281 
                                                             tmp = (char *)"e"; else 
                                                                    
#line 281 
                                                                    tmp = (char *)"d";
        
#line 281 
        if ((unsigned int)priv->sec_info.wpa_enabled != 0U) 
#line 281 
                                                            tmp_0 = (char *)"e"; else 
                                                                    
#line 281 
                                                                    tmp_0 = (char *)"d";
        
#line 281 
        if ((unsigned int)priv->sec_info.wep_enabled != 0U) 
#line 281 
                                                            tmp_1 = (char *)"e"; else 
                                                                    
#line 281 
                                                                    tmp_1 = (char *)"d";
        
#line 281 
        if (bss_desc->bcn_rsn_ie != (struct ieee_types_generic *)0) 
#line 281 
                                                                    tmp_2 = (int)(bss_desc->bcn_rsn_ie)->ieee_hdr.element_id; else 
                                                                    
#line 281 
                                                                    tmp_2 = 0;
        
#line 281 
        if (bss_desc->bcn_wpa_ie != (struct ieee_types_vendor_specific *)0) 
          
#line 281 
          tmp_3 = (int)(bss_desc->bcn_wpa_ie)->vend_hdr.element_id; else 
                                                                    
#line 281 
                                                                    tmp_3 = 0;
        
#line 281 
        ;
        
#line 281 
        _dev_info((struct device const *)(priv->adapter)->dev,"info: %s: WPA2:\t","mwifiex_is_bss_wpa2",tmp_3,tmp_2,tmp_1,tmp_0,tmp,priv->sec_info.encryption_mode,bss_desc->privacy);
      }
      else ;
    }
    else ;
    
#line 296 
    __retres = (_Bool)1;
    
#line 296 
    goto return_label;
  }
  else ;
  
#line 298 
  __retres = (_Bool)0;
  return_label: 
#line 298 
                return __retres;
}


#line 306  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/scan.c"
static bool mwifiex_is_bss_adhoc_aes(struct mwifiex_private *priv, struct mwifiex_bssdescriptor *bss_desc)
{
  bool __retres;
  
#line 309 
  if (((((((unsigned int)priv->sec_info.wep_enabled == 0U && (unsigned int)priv->sec_info.wpa_enabled == 0U) && (unsigned int)priv->sec_info.wpa2_enabled == 0U) && (bss_desc->bcn_wpa_ie == (struct ieee_types_vendor_specific *)0 || (unsigned int)(bss_desc->bcn_wpa_ie)->vend_hdr.element_id != 221U)) && (bss_desc->bcn_rsn_ie == (struct ieee_types_generic *)0 || (unsigned int)(bss_desc->bcn_rsn_ie)->ieee_hdr.element_id != 48U)) && priv->sec_info.encryption_mode == 0U) && bss_desc->privacy != 0U) {
    
#line 317 
    __retres = (_Bool)1;
    
#line 317 
    goto return_label;
  }
  else ;
  
#line 319 
  __retres = (_Bool)0;
  return_label: 
#line 319 
                return __retres;
}


#line 327  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/scan.c"
static bool mwifiex_is_bss_dynamic_wep(struct mwifiex_private *priv, struct mwifiex_bssdescriptor *bss_desc)
{
  bool __retres;
  
#line 330 
  if (((((((unsigned int)priv->sec_info.wep_enabled == 0U && (unsigned int)priv->sec_info.wpa_enabled == 0U) && (unsigned int)priv->sec_info.wpa2_enabled == 0U) && (bss_desc->bcn_wpa_ie == (struct ieee_types_vendor_specific *)0 || (unsigned int)(bss_desc->bcn_wpa_ie)->vend_hdr.element_id != 221U)) && (bss_desc->bcn_rsn_ie == (struct ieee_types_generic *)0 || (unsigned int)(bss_desc->bcn_rsn_ie)->ieee_hdr.element_id != 48U)) && priv->sec_info.encryption_mode != 0U) && bss_desc->privacy != 0U) {
    
#line 338 
    if (((priv->adapter)->debug_mask & 1073741824U) != 0U) {
      
#line 338 
      if ((priv->adapter)->dev != (struct device *)0) {
        int tmp;
        int tmp_0;
        
#line 338 
        ;
        
#line 338 
        ;
        
#line 338 
        if (bss_desc->bcn_rsn_ie != (struct ieee_types_generic *)0) 
#line 338 
                                                                    tmp = (int)(bss_desc->bcn_rsn_ie)->ieee_hdr.element_id; else 
                                                                    
#line 338 
                                                                    tmp = 0;
        
#line 338 
        if (bss_desc->bcn_wpa_ie != (struct ieee_types_vendor_specific *)0) 
          
#line 338 
          tmp_0 = (int)(bss_desc->bcn_wpa_ie)->vend_hdr.element_id; else 
                                                                    
#line 338 
                                                                    tmp_0 = 0;
        
#line 338 
        ;
        
#line 338 
        _dev_info((struct device const *)(priv->adapter)->dev,"info: %s: dynamic\t","mwifiex_is_bss_dynamic_wep",tmp_0,tmp,priv->sec_info.encryption_mode,bss_desc->privacy);
      }
      else ;
    }
    else ;
    
#line 351 
    __retres = (_Bool)1;
    
#line 351 
    goto return_label;
  }
  else ;
  
#line 353 
  __retres = (_Bool)0;
  return_label: 
#line 353 
                return __retres;
}


#line 375  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/scan.c"
static s32 mwifiex_is_network_compatible(struct mwifiex_private *priv, struct mwifiex_bssdescriptor *bss_desc, u32 mode)
{
  s32 __retres;
  bool tmp;
  
#line 378 
  struct mwifiex_adapter *adapter = priv->adapter;
  
#line 380 
  bss_desc->disable_11n = (unsigned char)0U;
  
#line 383 
  if (((unsigned int)priv->media_connected != 0U && priv->bss_mode == 2U) && bss_desc->bss_mode == 2U) {
    
#line 386 
    __retres = 0;
    
#line 386 
    goto return_label;
  }
  else ;
  
#line 388 
  if ((unsigned int)priv->wps.session_enable != 0U) {
    
#line 389 
    if ((adapter->debug_mask & 128U) != 0U) {
      
#line 389 
      if (adapter->dev != (struct device *)0) 
#line 389 
                                              _dev_info((struct device const *)adapter->dev,"info: return success directly in WPS period\n"); else ;
    }
    else ;
    
#line 391 
    __retres = 0;
    
#line 391 
    goto return_label;
  }
  else ;
  
#line 394 
  if ((unsigned int)bss_desc->chan_sw_ie_present != 0U) {
    
#line 395 
    if ((adapter->debug_mask & 1073741824U) != 0U) {
      
#line 395 
      if (adapter->dev != (struct device *)0) 
#line 395 
                                              _dev_info((struct device const *)adapter->dev,"Don\'t connect to AP with WLAN_EID_CHANNEL_SWITCH\n"); else ;
    }
    else ;
    
#line 397 
    __retres = -1;
    
#line 397 
    goto return_label;
  }
  else ;
  
#line 400 
  tmp = mwifiex_is_bss_wapi(priv,bss_desc);
  
#line 400 
  if ((int)tmp != 0) {
    
#line 401 
    if ((adapter->debug_mask & 1073741824U) != 0U) {
      
#line 401 
      if (adapter->dev != (struct device *)0) 
#line 401 
                                              _dev_info((struct device const *)adapter->dev,"info: return success for WAPI AP\n"); else ;
    }
    else ;
    
#line 403 
    __retres = 0;
    
#line 403 
    goto return_label;
  }
  else ;
  
#line 406 
  if (bss_desc->bss_mode == mode) {
    bool tmp_9;
    
#line 407 
    tmp_9 = mwifiex_is_bss_no_sec(priv,bss_desc);
    
#line 407 
    if ((int)tmp_9 != 0) {
      
#line 409 
      __retres = 0;
      
#line 409 
      goto return_label;
    }
    else {
      bool tmp_8;
      
#line 410 
      tmp_8 = mwifiex_is_bss_static_wep(priv,bss_desc);
      
#line 410 
      if ((int)tmp_8 != 0) {
        
#line 412 
        if ((adapter->debug_mask & 1073741824U) != 0U) {
          
#line 412 
          if (adapter->dev != (struct device *)0) 
#line 412 
                                                  _dev_info((struct device const *)adapter->dev,"info: Disable 11n in WEP mode.\n"); else ;
        }
        else ;
        
#line 414 
        bss_desc->disable_11n = (unsigned char)1U;
        
#line 415 
        __retres = 0;
        
#line 415 
        goto return_label;
      }
      else {
        bool tmp_7;
        
#line 416 
        tmp_7 = mwifiex_is_bss_wpa(priv,bss_desc);
        
#line 416 
        if ((int)tmp_7 != 0) {
          
#line 418 
          if ((((int)(priv->adapter)->config_bands & 8) != 0 || ((int)(priv->adapter)->config_bands & 16) != 0) && bss_desc->bcn_ht_cap != (struct ieee80211_ht_cap *)0) {
            u8 tmp_1;
            
#line 420 
            tmp_1 = mwifiex_is_wpa_oui_present(bss_desc,1U);
            
#line 420 
            if ((unsigned int)tmp_1 == 0U) {
              u8 tmp_0;
              
#line 424 
              tmp_0 = mwifiex_is_wpa_oui_present(bss_desc,0U);
              
#line 424 
              if ((unsigned int)tmp_0 != 0U) {
                
#line 426 
                if ((adapter->debug_mask & 1073741824U) != 0U) {
                  
#line 426 
                  if (adapter->dev != (struct device *)0) 
#line 426 
                                                          _dev_info((struct device const *)adapter->dev,"info: Disable 11n if AES\t"); else ;
                }
                else ;
                
#line 429 
                bss_desc->disable_11n = (unsigned char)1U;
              }
              else {
                
#line 431 
                __retres = -1;
                
#line 431 
                goto return_label;
              }
            }
            else ;
          }
          else ;
          
#line 434 
          __retres = 0;
          
#line 434 
          goto return_label;
        }
        else {
          bool tmp_6;
          
#line 435 
          tmp_6 = mwifiex_is_bss_wpa2(priv,bss_desc);
          
#line 435 
          if ((int)tmp_6 != 0) {
            
#line 437 
            if ((((int)(priv->adapter)->config_bands & 8) != 0 || ((int)(priv->adapter)->config_bands & 16) != 0) && bss_desc->bcn_ht_cap != (struct ieee80211_ht_cap *)0) {
              u8 tmp_3;
              
#line 439 
              tmp_3 = mwifiex_is_rsn_oui_present(bss_desc,1U);
              
#line 439 
              if ((unsigned int)tmp_3 == 0U) {
                u8 tmp_2;
                
#line 443 
                tmp_2 = mwifiex_is_rsn_oui_present(bss_desc,0U);
                
#line 443 
                if ((unsigned int)tmp_2 != 0U) {
                  
#line 445 
                  if ((adapter->debug_mask & 1073741824U) != 0U) {
                    
#line 445 
                    if (adapter->dev != (struct device *)0) 
#line 445 
                                                            _dev_info((struct device const *)adapter->dev,"info: Disable 11n if AES\t"); else ;
                  }
                  else ;
                  
#line 448 
                  bss_desc->disable_11n = (unsigned char)1U;
                }
                else {
                  
#line 450 
                  __retres = -1;
                  
#line 450 
                  goto return_label;
                }
              }
              else ;
            }
            else ;
            
#line 453 
            __retres = 0;
            
#line 453 
            goto return_label;
          }
          else {
            bool tmp_5;
            
#line 454 
            tmp_5 = mwifiex_is_bss_adhoc_aes(priv,bss_desc);
            
#line 454 
            if ((int)tmp_5 != 0) {
              
#line 456 
              __retres = 0;
              
#line 456 
              goto return_label;
            }
            else {
              bool tmp_4;
              
#line 457 
              tmp_4 = mwifiex_is_bss_dynamic_wep(priv,bss_desc);
              
#line 457 
              if ((int)tmp_4 != 0) {
                
#line 459 
                __retres = 0;
                
#line 459 
                goto return_label;
              }
              else ;
            }
          }
        }
      }
    }
    
#line 463 
    if ((adapter->debug_mask & 4U) != 0U) {
      
#line 463 
      if (adapter->dev != (struct device *)0) {
        char *tmp_10;
        char *tmp_11;
        char *tmp_12;
        int tmp_13;
        int tmp_14;
        
#line 463 
        ;
        
#line 463 
        ;
        
#line 463 
        if ((unsigned int)priv->sec_info.wpa2_enabled != 0U) 
#line 463 
                                                             tmp_10 = (char *)"e"; else 
                                                                    
#line 463 
                                                                    tmp_10 = (char *)"d";
        
#line 463 
        if ((unsigned int)priv->sec_info.wpa_enabled != 0U) 
#line 463 
                                                            tmp_11 = (char *)"e"; else 
                                                                    
#line 463 
                                                                    tmp_11 = (char *)"d";
        
#line 463 
        if ((unsigned int)priv->sec_info.wep_enabled != 0U) 
#line 463 
                                                            tmp_12 = (char *)"e"; else 
                                                                    
#line 463 
                                                                    tmp_12 = (char *)"d";
        
#line 463 
        if (bss_desc->bcn_rsn_ie != (struct ieee_types_generic *)0) 
#line 463 
                                                                    tmp_13 = (int)(bss_desc->bcn_rsn_ie)->ieee_hdr.element_id; else 
                                                                    
#line 463 
                                                                    tmp_13 = 0;
        
#line 463 
        if (bss_desc->bcn_wpa_ie != (struct ieee_types_vendor_specific *)0) 
          
#line 463 
          tmp_14 = (int)(bss_desc->bcn_wpa_ie)->vend_hdr.element_id; else 
                                                                    
#line 463 
                                                                    tmp_14 = 0;
        
#line 463 
        ;
        
#line 463 
        _dev_info((struct device const *)adapter->dev,"info: %s: failed: wpa_ie=%#x wpa2_ie=%#x WEP=%s\t","mwifiex_is_network_compatible",tmp_14,tmp_13,tmp_12,tmp_11,tmp_10,priv->sec_info.encryption_mode,bss_desc->privacy);
      }
      else ;
    }
    else ;
    
#line 475 
    __retres = -1;
    
#line 475 
    goto return_label;
  }
  else ;
  
#line 479 
  __retres = -1;
  return_label: 
#line 479 
                return __retres;
}


#line 490  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/scan.c"
static int mwifiex_scan_create_channel_list(struct mwifiex_private *priv, struct mwifiex_user_scan_cfg const *user_scan_in, struct mwifiex_chan_scan_param_set *scan_chan_list, u8 filtered_scan)
{
  enum ieee80211_band band;
  struct ieee80211_supported_band *sband;
  struct ieee80211_channel *ch;
  int i;
  
#line 500 
  struct mwifiex_adapter *adapter = priv->adapter;
  
#line 501 
  int chan_idx = 0;
  
#line 503 
  band = IEEE80211_BAND_2GHZ;
  
#line 503 
  goto ldv_61713;
  ldv_61712: 
#line 504 
  ;
  
#line 505 
  if ((priv->wdev.wiphy)->bands[(unsigned int)band] == (struct ieee80211_supported_band *)0) 
    
#line 506 
    goto ldv_61707; else ;
  
#line 508 
  sband = (priv->wdev.wiphy)->bands[(unsigned int)band];
  
#line 510 
  i = 0;
  
#line 510 
  goto ldv_61710;
  ldv_61709: 
#line 511 
  ;
  
#line 511 
  ch = sband->channels + i;
  
#line 512 
  if ((ch->flags & 1U) != 0U) 
#line 513 
                              goto ldv_61708; else ;
  
#line 514 
  (scan_chan_list + chan_idx)->radio_type = (unsigned char)band;
  
#line 516 
  if (user_scan_in != (struct mwifiex_user_scan_cfg const *)0 && user_scan_in->chan_list[0].scan_time != 0U) 
    
#line 518 
    (scan_chan_list + chan_idx)->max_scan_time = (unsigned short)user_scan_in->chan_list[0].scan_time;
  else 
    
#line 521 
    if ((ch->flags & 2U) != 0U) 
#line 522 
                                (scan_chan_list + chan_idx)->max_scan_time = adapter->passive_scan_time; else 
                                                                    
#line 525 
                                                                    (scan_chan_list + chan_idx)->max_scan_time = adapter->active_scan_time;
  
#line 528 
  if ((ch->flags & 2U) != 0U) 
#line 530 
                              (scan_chan_list + chan_idx)->chan_scan_mode_bitmap = (unsigned char)((unsigned int)(scan_chan_list + chan_idx)->chan_scan_mode_bitmap | 1U); else 
                                                                    
#line 533 
                                                                    (scan_chan_list + chan_idx)->chan_scan_mode_bitmap = (unsigned char)((unsigned int)(scan_chan_list + chan_idx)->chan_scan_mode_bitmap & 254U);
  
#line 534 
  (scan_chan_list + chan_idx)->chan_number = (unsigned char)ch->hw_value;
  
#line 536 
  if ((unsigned int)filtered_scan != 0U) {
    
#line 537 
    (scan_chan_list + chan_idx)->max_scan_time = adapter->specific_scan_time;
    
#line 540 
    (scan_chan_list + chan_idx)->chan_scan_mode_bitmap = (unsigned char)((unsigned int)(scan_chan_list + chan_idx)->chan_scan_mode_bitmap | 2U);
  }
  else ;
  
#line 542 
  chan_idx += 1;
  ldv_61708: 
#line 543 
  ;
  
#line 510 
  i += 1;
  ldv_61710: 
#line 511 
  ;
  
#line 510 
  if (sband->n_channels > i) 
#line 512 
                             goto ldv_61709; else 
#line 515 
                                                  goto ldv_61711;
  ldv_61711: 
#line 516 
  ;
  ldv_61707: 
#line 517 
  ;
  
#line 503 
  band += 1U;
  ldv_61713: 
#line 504 
  ;
  
#line 503 
  if (band <= (unsigned int)IEEE80211_BAND_60GHZ) 
#line 505 
                                                  goto ldv_61712; else 
                                                                    
#line 508 
                                                                    goto ldv_61714;
  ldv_61714: 
#line 509 
  ;
  
#line 546 
  return chan_idx;
}


#line 551  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/scan.c"
static int mwifiex_append_rate_tlv(struct mwifiex_private *priv, struct mwifiex_scan_cmd_config *scan_cfg_out, u8 radio)
{
  int __retres;
  struct mwifiex_ie_types_rates_param_set *rates_tlv;
  u8 rates[14U];
  u8 *tlv_pos;
  u32 rates_size;
  
#line 559 
  memset((void *)(& rates),0,14UL);
  
#line 561 
  tlv_pos = (u8 *)(& scan_cfg_out->tlv_buf) + scan_cfg_out->tlv_buf_len;
  
#line 563 
  if (priv->scan_request != (struct cfg80211_scan_request *)0) 
#line 564 
                                                               rates_size = mwifiex_get_rates_from_cfg80211(priv,(u8 *)(& rates),(unsigned char)((int)radio)); else 
                                                                    
#line 567 
                                                                    rates_size = mwifiex_get_supported_rates(priv,(u8 *)(& rates));
  
#line 569 
  if (((priv->adapter)->debug_mask & 16U) != 0U) {
    
#line 569 
    if ((priv->adapter)->dev != (struct device *)0) 
#line 569 
                                                    _dev_info((struct device const *)(priv->adapter)->dev,"info: SCAN_CMD: Rates size = %d\n",rates_size); else ;
  }
  else ;
  
#line 572 
  rates_tlv = (struct mwifiex_ie_types_rates_param_set *)tlv_pos;
  
#line 573 
  rates_tlv->header.type = (unsigned short)1U;
  
#line 574 
  rates_tlv->header.len = (unsigned short)rates_size;
  
#line 575 
  memcpy((void *)(& rates_tlv->rates),(void const *)(& rates),(unsigned long)rates_size);
  
#line 576 
  scan_cfg_out->tlv_buf_len = (scan_cfg_out->tlv_buf_len + rates_size) + 4U;
  
#line 578 
  __retres = (int)rates_size;
  
#line 578 
  return __retres;
}


#line 591  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/scan.c"
static int mwifiex_scan_channel_list(struct mwifiex_private *priv, u32 max_chan_per_scan, u8 filtered_scan, struct mwifiex_scan_cmd_config *scan_cfg_out, struct mwifiex_ie_types_chan_list_param_set *chan_tlv_out, struct mwifiex_chan_scan_param_set *scan_chan_list)
{
  int __retres;
  struct mwifiex_chan_scan_param_set *tmp_chan_list;
  struct mwifiex_chan_scan_param_set *start_chan;
  struct cmd_ctrl_node *cmd_node;
  struct cmd_ctrl_node *tmp_node;
  unsigned long flags;
  u32 tlv_idx;
  u32 rates_size;
  u32 cmd_no;
  u32 total_scan_time;
  u32 done_early;
  u8 radio_type;
  int tmp;
  
#line 598 
  struct mwifiex_adapter *adapter = priv->adapter;
  
#line 599 
  int ret = 0;
  
#line 609 
  if ((scan_cfg_out == (struct mwifiex_scan_cmd_config *)0 || chan_tlv_out == (struct mwifiex_ie_types_chan_list_param_set *)0) || scan_chan_list == (struct mwifiex_chan_scan_param_set *)0) {
    
#line 610 
    if (((priv->adapter)->debug_mask & 4U) != 0U) {
      
#line 610 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 610 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"info: Scan: Null detect: %p, %p, %p\n",scan_cfg_out,chan_tlv_out,scan_chan_list); else ;
    }
    else ;
    
#line 613 
    __retres = -1;
    
#line 613 
    goto return_label;
  }
  else ;
  
#line 617 
  mwifiex_11h_get_csa_closed_channel(priv);
  
#line 619 
  chan_tlv_out->header.type = (unsigned short)257U;
  
#line 623 
  tmp_chan_list = scan_chan_list;
  
#line 628 
  goto ldv_61759;
  ldv_61758: 
#line 629 
  ;
  
#line 630 
  tlv_idx = 0U;
  
#line 631 
  total_scan_time = 0U;
  
#line 632 
  radio_type = (unsigned char)0U;
  
#line 633 
  chan_tlv_out->header.len = (unsigned short)0U;
  
#line 634 
  start_chan = tmp_chan_list;
  
#line 635 
  done_early = 0U;
  
#line 646 
  goto ldv_61745;
  ldv_61746: 
#line 647 
  ;
  
#line 649 
  if ((int)tmp_chan_list->chan_number == (int)priv->csa_chan) {
    
#line 650 
    tmp_chan_list += 1;
    
#line 651 
    goto ldv_61745;
  }
  else ;
  
#line 654 
  radio_type = tmp_chan_list->radio_type;
  
#line 655 
  if (((priv->adapter)->debug_mask & 1073741824U) != 0U) {
    
#line 655 
    if ((priv->adapter)->dev != (struct device *)0) 
#line 655 
                                                    _dev_info((struct device const *)(priv->adapter)->dev,"info: Scan: Chan(%3d), Radio(%d),\t",(int)tmp_chan_list->chan_number,(int)tmp_chan_list->radio_type,(int)tmp_chan_list->chan_scan_mode_bitmap & 1,((int)tmp_chan_list->chan_scan_mode_bitmap >> 1) & 1,(int)tmp_chan_list->max_scan_time); else ;
  }
  else ;
  
#line 668 
  memcpy((void *)(& chan_tlv_out->chan_scan_param) + tlv_idx,(void const *)tmp_chan_list,7UL);
  
#line 674 
  le16_add_cpu(& chan_tlv_out->header.len,(unsigned short)7);
  
#line 683 
  scan_cfg_out->tlv_buf_len = (unsigned int)((long)chan_tlv_out - (long)(& scan_cfg_out->tlv_buf));
  
#line 688 
  scan_cfg_out->tlv_buf_len = (scan_cfg_out->tlv_buf_len + (unsigned int)chan_tlv_out->header.len) + 4U;
  
#line 694 
  tlv_idx += 1U;
  
#line 697 
  total_scan_time = (unsigned int)tmp_chan_list->max_scan_time + total_scan_time;
  
#line 700 
  done_early = 0U;
  
#line 705 
  if ((unsigned int)filtered_scan == 0U && (((unsigned int)tmp_chan_list->chan_number == 1U || (unsigned int)tmp_chan_list->chan_number == 6U) || (unsigned int)tmp_chan_list->chan_number == 11U)) 
    
#line 709 
    done_early = 1U; else ;
  
#line 713 
  tmp_chan_list += 1;
  
#line 718 
  if ((unsigned int)filtered_scan == 0U && (((unsigned int)tmp_chan_list->chan_number == 1U || (unsigned int)tmp_chan_list->chan_number == 6U) || (unsigned int)tmp_chan_list->chan_number == 11U)) 
    
#line 722 
    done_early = 1U; else ;
  ldv_61745: 
#line 723 
  ;
  
#line 646 
  if ((tlv_idx < max_chan_per_scan && (unsigned int)tmp_chan_list->chan_number != 0U) && done_early == 0U) 
    
#line 649 
    goto ldv_61746; else 
#line 652 
                         goto ldv_61747;
  ldv_61747: 
#line 653 
  ;
  
#line 727 
  if (total_scan_time > 9000U) {
    
#line 728 
    if (((priv->adapter)->debug_mask & 4U) != 0U) {
      
#line 728 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 728 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"total scan time %dms\t",total_scan_time,9000); else ;
    }
    else ;
    
#line 733 
    ret = -1;
    
#line 734 
    goto ldv_61748;
  }
  else ;
  
#line 737 
  tmp = mwifiex_append_rate_tlv(priv,scan_cfg_out,(unsigned char)((int)radio_type));
  
#line 737 
  rates_size = (unsigned int)tmp;
  
#line 740 
  (priv->adapter)->scan_channels = start_chan;
  
#line 744 
  if ((int)(priv->adapter)->ext_scan != 0) 
#line 745 
                                           cmd_no = 263U; else 
#line 747 
                                                               cmd_no = 6U;
  
#line 749 
  ret = mwifiex_send_cmd(priv,(unsigned short)((int)((unsigned short)cmd_no)),(unsigned short)1,0U,(void *)scan_cfg_out,(_Bool)0);
  
#line 756 
  scan_cfg_out->tlv_buf_len = (scan_cfg_out->tlv_buf_len - rates_size) + 4294967292U;
  
#line 759 
  if (ret != 0) {
    struct cmd_ctrl_node *tmp_0;
    struct cmd_ctrl_node *tmp_1;
    struct cmd_ctrl_node *tmp_2;
    
#line 760 
    ldv___ldv_spin_lock_78_3(& adapter->scan_pending_q_lock);
    {
      
#line 761 
      struct list_head const *__mptr = (struct list_head const *)adapter->scan_pending_q.next;
      
#line 761 
      tmp_0 = (struct cmd_ctrl_node *)__mptr;
    }
    
#line 761 
    cmd_node = tmp_0;
    {
      
#line 761 
      struct list_head const *__mptr_0 = (struct list_head const *)cmd_node->list.next;
      
#line 761 
      tmp_1 = (struct cmd_ctrl_node *)__mptr_0;
    }
    
#line 762 
    tmp_node = tmp_1;
    
#line 761 
    goto ldv_61756;
    ldv_61755: 
#line 762 
    ;
    
#line 764 
    list_del(& cmd_node->list);
    
#line 765 
    cmd_node->wait_q_enabled = 0U;
    
#line 766 
    mwifiex_insert_cmd_to_free_q(adapter,cmd_node);
    
#line 761 
    cmd_node = tmp_node;
    {
      
#line 761 
      struct list_head const *__mptr_1 = (struct list_head const *)tmp_node->list.next;
      
#line 761 
      tmp_2 = (struct cmd_ctrl_node *)__mptr_1;
    }
    
#line 761 
    tmp_node = tmp_2;
    ldv_61756: 
#line 763 
    ;
    
#line 761 
    if (& cmd_node->list != & adapter->scan_pending_q) 
#line 763 
                                                       goto ldv_61755; else 
                                                                    
#line 766 
                                                                    goto ldv_61757;
    ldv_61757: 
#line 767 
    ;
    
#line 768 
    ldv_spin_unlock_irqrestore_79_3(& adapter->scan_pending_q_lock,flags);
    
#line 770 
    goto ldv_61748;
  }
  else ;
  ldv_61759: 
#line 772 
  ;
  
#line 628 
  if ((unsigned int)tmp_chan_list->chan_number != 0U) 
#line 630 
                                                      goto ldv_61758; else 
                                                                    
#line 633 
                                                                    goto ldv_61748;
  ldv_61748: 
#line 634 
  ;
  
#line 774 
  if (ret != 0) {
    
#line 775 
    __retres = -1;
    
#line 775 
    goto return_label;
  }
  else ;
  
#line 777 
  __retres = 0;
  return_label: 
#line 777 
                return __retres;
}


#line 801  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/scan.c"
static void mwifiex_config_scan(struct mwifiex_private *priv, struct mwifiex_user_scan_cfg const *user_scan_in, struct mwifiex_scan_cmd_config *scan_cfg_out, struct mwifiex_ie_types_chan_list_param_set **chan_list_out, struct mwifiex_chan_scan_param_set *scan_chan_list, u8 *max_chan_per_scan, u8 *filtered_scan, u8 *scan_current_only)
{
  struct mwifiex_ie_types_num_probes *num_probes_tlv;
  struct mwifiex_ie_types_scan_chan_gap *chan_gap_tlv;
  struct mwifiex_ie_types_wildcard_ssid_params *wildcard_ssid_tlv;
  struct mwifiex_ie_types_bssid_list *bssid_tlv;
  u8 *tlv_pos;
  u32 num_probes;
  u32 ssid_len;
  u32 chan_idx;
  u32 chan_num;
  u32 scan_type;
  u16 scan_dur;
  u8 channel;
  u8 radio_type;
  int i;
  u8 ssid_filter;
  struct mwifiex_ie_types_htcap *ht_cap;
  
#line 809 
  struct mwifiex_adapter *adapter = priv->adapter;
  
#line 832 
  scan_cfg_out->tlv_buf_len = 0U;
  
#line 837 
  tlv_pos = (u8 *)(& scan_cfg_out->tlv_buf);
  
#line 841 
  *filtered_scan = (unsigned char)0U;
  
#line 846 
  *scan_current_only = (unsigned char)0U;
  
#line 848 
  if (user_scan_in != (struct mwifiex_user_scan_cfg const *)0) {
    int tmp;
    
#line 853 
    ssid_filter = (unsigned char)1U;
    
#line 857 
    if ((unsigned int)user_scan_in->bss_mode != 0U) 
#line 857 
                                                    scan_cfg_out->bss_mode = user_scan_in->bss_mode; else 
                                                                    
#line 857 
                                                                    scan_cfg_out->bss_mode = (unsigned char)adapter->scan_mode;
    
#line 865 
    if ((unsigned int)user_scan_in->num_probes != 0U) 
#line 865 
                                                      tmp = (int)user_scan_in->num_probes; else 
                                                                    
#line 865 
                                                                    tmp = (int)adapter->scan_probes;
    
#line 863 
    num_probes = (unsigned int)tmp;
    
#line 872 
    memcpy((void *)(& scan_cfg_out->specific_bssid),(void const *)(& user_scan_in->specific_bssid),6UL);
    
#line 876 
    if ((int)adapter->ext_scan != 0) {
      int tmp_1;
      bool tmp_0;
      
#line 877 
      tmp_0 = is_zero_ether_addr((u8 const *)(& scan_cfg_out->specific_bssid));
      
#line 877 
      if (tmp_0) 
#line 877 
                 tmp_1 = 0; else 
#line 877 
                                 tmp_1 = 1;
      
#line 877 
      if (tmp_1) {
        
#line 878 
        bssid_tlv = (struct mwifiex_ie_types_bssid_list *)tlv_pos;
        
#line 880 
        bssid_tlv->header.type = (unsigned short)291U;
        
#line 881 
        bssid_tlv->header.len = (unsigned short)6U;
        
#line 882 
        memcpy((void *)(& bssid_tlv->bssid),(void const *)(& user_scan_in->specific_bssid),6UL);
        
#line 884 
        tlv_pos += 10U;
      }
      else ;
    }
    else ;
    
#line 887 
    i = 0;
    
#line 887 
    goto ldv_61788;
    ldv_61787: 
#line 888 
    ;
    
#line 888 
    ssid_len = (unsigned int)(user_scan_in->ssid_list + i)->ssid_len;
    
#line 890 
    wildcard_ssid_tlv = (struct mwifiex_ie_types_wildcard_ssid_params *)tlv_pos;
    
#line 893 
    wildcard_ssid_tlv->header.type = (unsigned short)274U;
    
#line 895 
    wildcard_ssid_tlv->header.len = (unsigned short)((unsigned int)((unsigned short)ssid_len) + 1U);
    
#line 905 
    if (ssid_len != 0U) 
#line 906 
                        wildcard_ssid_tlv->max_ssid_length = (unsigned char)0U; else 
                                                                    
#line 908 
                                                                    wildcard_ssid_tlv->max_ssid_length = (unsigned char)32U;
    
#line 911 
    memcpy((void *)(& wildcard_ssid_tlv->ssid),(void const *)(& (user_scan_in->ssid_list + i)->ssid),(unsigned long)ssid_len);
    
#line 914 
    tlv_pos += (unsigned long)wildcard_ssid_tlv->header.len + 4UL;
    
#line 917 
    if ((adapter->debug_mask & 1073741824U) != 0U) {
      
#line 917 
      if (adapter->dev != (struct device *)0) 
#line 917 
                                              _dev_info((struct device const *)adapter->dev,"info: scan: ssid[%d]: %s, %d\n",i,(u8 *)(& wildcard_ssid_tlv->ssid),(int)wildcard_ssid_tlv->max_ssid_length); else ;
    }
    else ;
    
#line 926 
    if (ssid_len == 0U && (unsigned int)wildcard_ssid_tlv->max_ssid_length != 0U) 
      
#line 927 
      ssid_filter = (unsigned char)0U; else ;
    
#line 887 
    i += 1;
    ldv_61788: 
#line 888 
    ;
    
#line 887 
    if ((int)user_scan_in->num_ssids > i) 
#line 889 
                                          goto ldv_61787; else 
#line 892 
                                                               goto ldv_61789;
    ldv_61789: 
#line 893 
    ;
    
#line 936 
    if (i != 0 && (unsigned int)ssid_filter != 0U) 
#line 938 
                                                   *filtered_scan = (unsigned char)1U;
    else {
      int tmp_3;
      bool tmp_2;
      
#line 937 
      tmp_2 = is_zero_ether_addr((u8 const *)(& scan_cfg_out->specific_bssid));
      
#line 937 
      if (tmp_2) 
#line 937 
                 tmp_3 = 0; else 
#line 937 
                                 tmp_3 = 1;
      
#line 937 
      if (tmp_3) 
#line 938 
                 *filtered_scan = (unsigned char)1U; else ;
    }
    
#line 940 
    if ((unsigned int)user_scan_in->scan_chan_gap != 0U) {
      
#line 941 
      if ((adapter->debug_mask & 1073741824U) != 0U) {
        
#line 941 
        if (adapter->dev != (struct device *)0) 
#line 941 
                                                _dev_info((struct device const *)adapter->dev,"info: scan: channel gap = %d\n",(int)user_scan_in->scan_chan_gap); else ;
      }
      else ;
      
#line 944 
      *max_chan_per_scan = (unsigned char)14U;
      
#line 947 
      chan_gap_tlv = (struct mwifiex_ie_types_scan_chan_gap *)tlv_pos;
      
#line 948 
      chan_gap_tlv->header.type = (unsigned short)453U;
      
#line 950 
      chan_gap_tlv->header.len = (unsigned short)2U;
      
#line 952 
      chan_gap_tlv->chan_gap = user_scan_in->scan_chan_gap;
      
#line 954 
      tlv_pos += 6U;
    }
    else ;
  }
  else {
    
#line 958 
    scan_cfg_out->bss_mode = (unsigned char)adapter->scan_mode;
    
#line 959 
    num_probes = (unsigned int)adapter->scan_probes;
  }
  
#line 966 
  if ((unsigned int)*filtered_scan != 0U) 
#line 967 
                                          *max_chan_per_scan = (unsigned char)14U; else 
                                                                    
#line 969 
                                                                    *max_chan_per_scan = (unsigned char)4U;
  
#line 973 
  if (num_probes != 0U) {
    
#line 975 
    if ((adapter->debug_mask & 1073741824U) != 0U) {
      
#line 975 
      if (adapter->dev != (struct device *)0) 
#line 975 
                                              _dev_info((struct device const *)adapter->dev,"info: scan: num_probes = %d\n",num_probes); else ;
    }
    else ;
    
#line 979 
    num_probes_tlv = (struct mwifiex_ie_types_num_probes *)tlv_pos;
    
#line 980 
    num_probes_tlv->header.type = (unsigned short)258U;
    
#line 981 
    num_probes_tlv->header.len = (unsigned short)2U;
    
#line 983 
    num_probes_tlv->num_probes = (unsigned short)num_probes;
    
#line 985 
    tlv_pos += (unsigned long)num_probes_tlv->header.len + 4UL;
  }
  else ;
  
#line 990 
  if (((unsigned long)(priv->adapter)->fw_cap_info & 2048UL) != 0UL && (((int)(priv->adapter)->config_bands & 8) != 0 || ((int)(priv->adapter)->config_bands & 16) != 0)) {
    
#line 993 
    ht_cap = (struct mwifiex_ie_types_htcap *)tlv_pos;
    
#line 994 
    memset((void *)ht_cap,0,30UL);
    
#line 995 
    ht_cap->header.type = (unsigned short)45U;
    
#line 996 
    ht_cap->header.len = (unsigned short)26U;
    
#line 998 
    radio_type = mwifiex_band_to_radio_type((unsigned char)((int)(priv->adapter)->config_bands));
    
#line 1000 
    mwifiex_fill_cap_info(priv,(unsigned char)((int)radio_type),& ht_cap->ht_cap);
    
#line 1001 
    tlv_pos += 30U;
  }
  else ;
  
#line 1005 
  mwifiex_cmd_append_vsie_tlv(priv,(unsigned short)1,& tlv_pos);
  
#line 1013 
  *chan_list_out = (struct mwifiex_ie_types_chan_list_param_set *)tlv_pos;
  
#line 1016 
  if (user_scan_in != (struct mwifiex_user_scan_cfg const *)0 && (unsigned int)user_scan_in->chan_list[0].chan_number != 0U) {
    
#line 1018 
    if ((adapter->debug_mask & 1073741824U) != 0U) {
      
#line 1018 
      if (adapter->dev != (struct device *)0) 
#line 1018 
                                              _dev_info((struct device const *)adapter->dev,"info: Scan: Using supplied channel list\n"); else ;
    }
    else ;
    
#line 1021 
    chan_idx = 0U;
    
#line 1021 
    goto ldv_61791;
    ldv_61790: 
#line 1022 
    ;
    
#line 1026 
    channel = user_scan_in->chan_list[chan_idx].chan_number;
    
#line 1027 
    (scan_chan_list + chan_idx)->chan_number = channel;
    
#line 1029 
    radio_type = user_scan_in->chan_list[chan_idx].radio_type;
    
#line 1031 
    (scan_chan_list + chan_idx)->radio_type = radio_type;
    
#line 1033 
    scan_type = (unsigned int)user_scan_in->chan_list[chan_idx].scan_type;
    
#line 1035 
    if (scan_type == 2U) 
#line 1038 
                         (scan_chan_list + chan_idx)->chan_scan_mode_bitmap = (unsigned char)((unsigned int)(scan_chan_list + chan_idx)->chan_scan_mode_bitmap | 1U); else 
                                                                    
#line 1042 
                                                                    (scan_chan_list + chan_idx)->chan_scan_mode_bitmap = (unsigned char)((unsigned int)(scan_chan_list + chan_idx)->chan_scan_mode_bitmap & 254U);
    
#line 1044 
    if ((unsigned int)*filtered_scan != 0U) 
#line 1047 
                                            (scan_chan_list + chan_idx)->chan_scan_mode_bitmap = (unsigned char)((unsigned int)(scan_chan_list + chan_idx)->chan_scan_mode_bitmap | 2U); else ;
    
#line 1049 
    if (user_scan_in->chan_list[chan_idx].scan_time != 0U) 
#line 1050 
                                                           scan_dur = (unsigned short)user_scan_in->chan_list[chan_idx].scan_time;
    else 
      
#line 1053 
      if (scan_type == 2U) 
#line 1054 
                           scan_dur = adapter->passive_scan_time;
      else 
        
#line 1055 
        if ((unsigned int)*filtered_scan != 0U) 
#line 1056 
                                                scan_dur = adapter->specific_scan_time; else 
                                                                    
#line 1058 
                                                                    scan_dur = adapter->active_scan_time;
    
#line 1061 
    (scan_chan_list + chan_idx)->min_scan_time = scan_dur;
    
#line 1063 
    (scan_chan_list + chan_idx)->max_scan_time = scan_dur;
    
#line 1024 
    chan_idx += 1U;
    ldv_61791: 
#line 1025 
    ;
    
#line 1021 
    if (chan_idx <= 49U && (unsigned int)user_scan_in->chan_list[chan_idx].chan_number != 0U) 
      
#line 1024 
      goto ldv_61790; else 
#line 1027 
                           goto ldv_61792;
    ldv_61792: 
#line 1028 
    ;
    
#line 1068 
    if (chan_idx == 1U && (unsigned int)user_scan_in->chan_list[0].chan_number == priv->curr_bss_params.bss_descriptor.channel) {
      
#line 1071 
      *scan_current_only = (unsigned char)1U;
      
#line 1072 
      if ((adapter->debug_mask & 1073741824U) != 0U) {
        
#line 1072 
        if (adapter->dev != (struct device *)0) 
#line 1072 
                                                _dev_info((struct device const *)adapter->dev,"info: Scan: Scanning current channel only\n"); else ;
      }
      else ;
    }
    else ;
    
#line 1075 
    chan_num = chan_idx;
  }
  else {
    int tmp_4;
    
#line 1077 
    if ((adapter->debug_mask & 1073741824U) != 0U) {
      
#line 1077 
      if (adapter->dev != (struct device *)0) 
#line 1077 
                                              _dev_info((struct device const *)adapter->dev,"info: Scan: Creating full region channel list\n"); else ;
    }
    else ;
    
#line 1079 
    tmp_4 = mwifiex_scan_create_channel_list(priv,user_scan_in,scan_chan_list,(unsigned char)((int)*filtered_scan));
    
#line 1079 
    chan_num = (unsigned int)tmp_4;
  }
  
#line 1083 
  return;
}


#line 1096  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/scan.c"
static void mwifiex_ret_802_11_scan_get_tlv_ptrs(struct mwifiex_adapter *adapter, struct mwifiex_ie_types_data *tlv, u32 tlv_buf_size, u32 req_tlv_type, struct mwifiex_ie_types_data **tlv_data)
{
  struct mwifiex_ie_types_data *current_tlv;
  u32 tlv_buf_left;
  u32 tlv_type;
  u32 tlv_len;
  
#line 1106 
  current_tlv = tlv;
  
#line 1107 
  tlv_buf_left = tlv_buf_size;
  
#line 1108 
  *tlv_data = (struct mwifiex_ie_types_data *)0;
  
#line 1110 
  if ((adapter->debug_mask & 1073741824U) != 0U) {
    
#line 1110 
    if (adapter->dev != (struct device *)0) 
#line 1110 
                                            _dev_info((struct device const *)adapter->dev,"info: SCAN_RESP: tlv_buf_size = %d\n",tlv_buf_size); else ;
  }
  else ;
  
#line 1114 
  goto ldv_61810;
  ldv_61809: 
#line 1115 
  ;
  
#line 1116 
  tlv_type = (unsigned int)current_tlv->header.type;
  
#line 1117 
  tlv_len = (unsigned int)current_tlv->header.len;
  
#line 1119 
  if ((unsigned long)tlv_len + 4UL > (unsigned long)tlv_buf_left) {
    
#line 1120 
    if ((adapter->debug_mask & 4U) != 0U) {
      
#line 1120 
      if (adapter->dev != (struct device *)0) 
#line 1120 
                                              _dev_info((struct device const *)adapter->dev,"SCAN_RESP: TLV buffer corrupt\n"); else ;
    }
    else ;
    
#line 1122 
    goto ldv_61804;
  }
  else ;
  
#line 1125 
  if (req_tlv_type == tlv_type) {
    
#line 1126 
    switch (tlv_type) {
      case (u32)275: 
#line 1127 
      ;
      
#line 1128 
      if ((adapter->debug_mask & 1073741824U) != 0U) {
        
#line 1128 
        if (adapter->dev != (struct device *)0) 
#line 1128 
                                                _dev_info((struct device const *)adapter->dev,"info: SCAN_RESP: TSF\t",tlv_len); else ;
      }
      else ;
      
#line 1132 
      *tlv_data = current_tlv;
      
#line 1133 
      goto ldv_61806;
      case (u32)298: 
#line 1134 
      ;
      
#line 1135 
      if ((adapter->debug_mask & 1073741824U) != 0U) {
        
#line 1135 
        if (adapter->dev != (struct device *)0) 
#line 1135 
                                                _dev_info((struct device const *)adapter->dev,"info: SCAN_RESP: channel\t",tlv_len); else ;
      }
      else ;
      
#line 1139 
      *tlv_data = current_tlv;
      
#line 1140 
      goto ldv_61806;
      default: 
#line 1141 
      ;
      
#line 1142 
      if ((adapter->debug_mask & 4U) != 0U) {
        
#line 1142 
        if (adapter->dev != (struct device *)0) 
#line 1142 
                                                _dev_info((struct device const *)adapter->dev,"SCAN_RESP: unhandled TLV = %d\n",tlv_type); else ;
      }
      else ;
      
#line 1146 
      goto return_label;
    }
    ldv_61806: 
#line 1148 
    ;
  }
  else ;
  
#line 1150 
  if (*tlv_data != (struct mwifiex_ie_types_data *)0) 
#line 1151 
                                                      goto ldv_61804; else ;
  
#line 1154 
  tlv_buf_left = (tlv_buf_left - tlv_len) + 4294967292U;
  
#line 1155 
  current_tlv = (struct mwifiex_ie_types_data *)(& current_tlv->data) + tlv_len;
  ldv_61810: 
#line 1157 
  ;
  
#line 1114 
  if (tlv_buf_left > 3U) 
#line 1116 
                         goto ldv_61809; else 
#line 1119 
                                              goto ldv_61804;
  ldv_61804: 
#line 1120 
  ;
  return_label: 
#line 1121 
                return;
}


#line 1166  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/scan.c"
int mwifiex_update_bss_desc_with_ie(struct mwifiex_adapter *adapter, struct mwifiex_bssdescriptor *bss_entry)
{
  int __retres;
  u8 element_id;
  struct ieee_types_fh_param_set *fh_param_set;
  struct ieee_types_ds_param_set *ds_param_set;
  struct ieee_types_cf_param_set *cf_param_set;
  struct ieee_types_ibss_param_set *ibss_param_set;
  u8 *current_ptr;
  u8 *rate;
  u8 element_len;
  u16 total_ie_len;
  u8 bytes_to_copy;
  u8 rate_size;
  u8 found_data_rate_ie;
  u32 bytes_left;
  struct ieee_types_vendor_specific *vendor_ie;
  
#line 1169 
  int ret = 0;
  
#line 1184 
  u8 const wpa_oui[4U] = {(unsigned char)0U, (unsigned char)80U, (unsigned char)242U, (unsigned char)1U};
  
#line 1185 
  u8 const wmm_oui[4U] = {(unsigned char)0U, (unsigned char)80U, (unsigned char)242U, (unsigned char)2U};
  
#line 1187 
  found_data_rate_ie = (unsigned char)0U;
  
#line 1188 
  rate_size = (unsigned char)0U;
  
#line 1189 
  current_ptr = bss_entry->beacon_buf;
  
#line 1190 
  bytes_left = bss_entry->beacon_buf_size;
  
#line 1193 
  goto ldv_61858;
  ldv_61857: 
#line 1194 
  ;
  
#line 1194 
  element_id = *current_ptr;
  
#line 1195 
  element_len = *(current_ptr + 1U);
  
#line 1196 
  total_ie_len = (unsigned short)((unsigned int)((unsigned short)element_len) + 2U);
  
#line 1198 
  if ((unsigned int)total_ie_len > bytes_left) {
    
#line 1199 
    if ((adapter->debug_mask & 4U) != 0U) {
      
#line 1199 
      if (adapter->dev != (struct device *)0) 
#line 1199 
                                              _dev_info((struct device const *)adapter->dev,"err: InterpretIE: in processing\t"); else ;
    }
    else ;
    
#line 1202 
    __retres = -1;
    
#line 1202 
    goto return_label;
  }
  else ;
  
#line 1204 
  switch ((int)element_id) {
    int tmp_0;
    case 0: 
#line 1205 
    ;
    
#line 1206 
    bss_entry->ssid.ssid_len = element_len;
    
#line 1207 
    memcpy((void *)(& bss_entry->ssid.ssid),(void const *)(current_ptr + 2U),(unsigned long)element_len);
    
#line 1209 
    if ((adapter->debug_mask & 1073741824U) != 0U) {
      
#line 1209 
      if (adapter->dev != (struct device *)0) 
#line 1209 
                                              _dev_info((struct device const *)adapter->dev,"info: InterpretIE: ssid: %-32s\n",(u8 *)(& bss_entry->ssid.ssid)); else ;
    }
    else ;
    
#line 1212 
    goto ldv_61833;
    case 1: 
#line 1214 
    ;
    
#line 1215 
    memcpy((void *)(& bss_entry->data_rates),(void const *)(current_ptr + 2U),(unsigned long)element_len);
    
#line 1217 
    memcpy((void *)(& bss_entry->supported_rates),(void const *)(current_ptr + 2U),(unsigned long)element_len);
    
#line 1219 
    rate_size = element_len;
    
#line 1220 
    found_data_rate_ie = (unsigned char)1U;
    
#line 1221 
    goto ldv_61833;
    case 2: 
#line 1223 
    ;
    
#line 1224 
    fh_param_set = (struct ieee_types_fh_param_set *)current_ptr;
    
#line 1226 
    memcpy((void *)(& bss_entry->phy_param_set.fh_param_set),(void const *)fh_param_set,7UL);
    
#line 1229 
    goto ldv_61833;
    case 3: 
#line 1231 
    ;
    
#line 1232 
    ds_param_set = (struct ieee_types_ds_param_set *)current_ptr;
    
#line 1235 
    bss_entry->channel = (unsigned int)ds_param_set->current_chan;
    
#line 1237 
    memcpy((void *)(& bss_entry->phy_param_set.ds_param_set),(void const *)ds_param_set,3UL);
    
#line 1240 
    goto ldv_61833;
    case 4: 
#line 1242 
    ;
    
#line 1243 
    cf_param_set = (struct ieee_types_cf_param_set *)current_ptr;
    
#line 1245 
    memcpy((void *)(& bss_entry->ss_param_set.cf_param_set),(void const *)cf_param_set,8UL);
    
#line 1248 
    goto ldv_61833;
    case 6: 
#line 1250 
    ;
    
#line 1251 
    ibss_param_set = (struct ieee_types_ibss_param_set *)current_ptr;
    
#line 1254 
    memcpy((void *)(& bss_entry->ss_param_set.ibss_param_set),(void const *)ibss_param_set,4UL);
    
#line 1257 
    goto ldv_61833;
    case 42: 
#line 1259 
    ;
    
#line 1260 
    bss_entry->erp_flags = *(current_ptr + 2U);
    
#line 1261 
    goto ldv_61833;
    case 32: 
#line 1263 
    ;
    
#line 1264 
    bss_entry->local_constraint = *(current_ptr + 2U);
    
#line 1265 
    bss_entry->sensed_11h = (unsigned char)1U;
    
#line 1266 
    goto ldv_61833;
    case 37: 
#line 1268 
    ;
    
#line 1269 
    bss_entry->chan_sw_ie_present = (unsigned char)1U;
    case 33: 
#line 1270 
    ;
    case 35: 
#line 1271 
    ;
    case 40: 
#line 1272 
    ;
    
#line 1273 
    bss_entry->sensed_11h = (unsigned char)1U;
    
#line 1274 
    goto ldv_61833;
    case 50: 
#line 1276 
    ;
    
#line 1283 
    if ((unsigned int)found_data_rate_ie != 0U) {
      
#line 1284 
      if ((int)element_len + (int)rate_size > 14) 
#line 1286 
                                                  bytes_to_copy = (unsigned char)(14U - (unsigned int)rate_size); else 
                                                                    
#line 1290 
                                                                    bytes_to_copy = element_len;
      
#line 1292 
      rate = (u8 *)(& bss_entry->data_rates);
      
#line 1293 
      rate += (int)rate_size;
      
#line 1294 
      memcpy((void *)rate,(void const *)(current_ptr + 2U),(unsigned long)bytes_to_copy);
      
#line 1296 
      rate = (u8 *)(& bss_entry->supported_rates);
      
#line 1297 
      rate += (int)rate_size;
      
#line 1298 
      memcpy((void *)rate,(void const *)(current_ptr + 2U),(unsigned long)bytes_to_copy);
    }
    else ;
    
#line 1300 
    goto ldv_61833;
    case 221: 
#line 1302 
    ;
    
#line 1303 
    vendor_ie = (struct ieee_types_vendor_specific *)current_ptr;
    
#line 1306 
    tmp_0 = memcmp((void const *)(& vendor_ie->vend_hdr.oui),(void const *)(& wpa_oui),4UL);
    
#line 1306 
    if (tmp_0 == 0) {
      
#line 1309 
      bss_entry->bcn_wpa_ie = (struct ieee_types_vendor_specific *)current_ptr;
      
#line 1312 
      bss_entry->wpa_offset = (unsigned short)((long)current_ptr - (long)bss_entry->beacon_buf);
    }
    else {
      int tmp;
      
#line 1314 
      tmp = memcmp((void const *)(& vendor_ie->vend_hdr.oui),(void const *)(& wmm_oui),4UL);
      
#line 1314 
      if (tmp == 0) {
        
#line 1316 
        if ((unsigned int)total_ie_len == 26U || (unsigned int)total_ie_len == 9U) 
          
#line 1325 
          memcpy((void *)(& bss_entry->wmm_ie),(void const *)current_ptr,(unsigned long)total_ie_len); else ;
      }
      else ;
    }
    
#line 1328 
    goto ldv_61833;
    case 48: 
#line 1329 
    ;
    
#line 1330 
    bss_entry->bcn_rsn_ie = (struct ieee_types_generic *)current_ptr;
    
#line 1332 
    bss_entry->rsn_offset = (unsigned short)((long)current_ptr - (long)bss_entry->beacon_buf);
    
#line 1334 
    goto ldv_61833;
    case 68: 
#line 1335 
    ;
    
#line 1336 
    bss_entry->bcn_wapi_ie = (struct ieee_types_generic *)current_ptr;
    
#line 1338 
    bss_entry->wapi_offset = (unsigned short)((long)current_ptr - (long)bss_entry->beacon_buf);
    
#line 1340 
    goto ldv_61833;
    case 45: 
#line 1341 
    ;
    
#line 1342 
    bss_entry->bcn_ht_cap = (struct ieee80211_ht_cap *)(current_ptr + 2U);
    
#line 1345 
    bss_entry->ht_cap_offset = (unsigned short)((long)(current_ptr + 2U) - (long)bss_entry->beacon_buf);
    
#line 1348 
    goto ldv_61833;
    case 61: 
#line 1349 
    ;
    
#line 1350 
    bss_entry->bcn_ht_oper = (struct ieee80211_ht_operation *)(current_ptr + 2U);
    
#line 1353 
    bss_entry->ht_info_offset = (unsigned short)((long)(current_ptr + 2U) - (long)bss_entry->beacon_buf);
    
#line 1356 
    goto ldv_61833;
    case 191: 
#line 1357 
    ;
    
#line 1358 
    bss_entry->disable_11ac = (unsigned char)0U;
    
#line 1359 
    bss_entry->bcn_vht_cap = (struct ieee80211_vht_cap *)(current_ptr + 2U);
    
#line 1362 
    bss_entry->vht_cap_offset = (unsigned short)((long)bss_entry->bcn_vht_cap - (long)bss_entry->beacon_buf);
    
#line 1365 
    goto ldv_61833;
    case 192: 
#line 1366 
    ;
    
#line 1367 
    bss_entry->bcn_vht_oper = (struct ieee80211_vht_operation *)(current_ptr + 2U);
    
#line 1370 
    bss_entry->vht_info_offset = (unsigned short)((long)bss_entry->bcn_vht_oper - (long)bss_entry->beacon_buf);
    
#line 1373 
    goto ldv_61833;
    case 72: 
#line 1374 
    ;
    
#line 1375 
    bss_entry->bcn_bss_co_2040 = current_ptr;
    
#line 1376 
    bss_entry->bss_co_2040_offset = (unsigned short)((long)current_ptr - (long)bss_entry->beacon_buf);
    
#line 1378 
    goto ldv_61833;
    case 127: 
#line 1379 
    ;
    
#line 1380 
    bss_entry->bcn_ext_cap = current_ptr;
    
#line 1381 
    bss_entry->ext_cap_offset = (unsigned short)((long)current_ptr - (long)bss_entry->beacon_buf);
    
#line 1383 
    goto ldv_61833;
    case 199: 
#line 1384 
    ;
    
#line 1385 
    bss_entry->oper_mode = (struct ieee_types_oper_mode_ntf *)current_ptr;
    
#line 1386 
    bss_entry->oper_mode_offset = (unsigned short)((long)bss_entry->oper_mode - (long)bss_entry->beacon_buf);
    
#line 1389 
    goto ldv_61833;
    default: 
#line 1390 
    ;
    
#line 1391 
    goto ldv_61833;
  }
  ldv_61833: 
#line 1394 
  ;
  
#line 1394 
  current_ptr += (unsigned int)element_len + 2U;
  
#line 1397 
  bytes_left = (bytes_left - (unsigned int)element_len) - 2U;
  ldv_61858: 
#line 1398 
  ;
  
#line 1193 
  if (bytes_left > 1U) 
#line 1195 
                       goto ldv_61857; else 
#line 1198 
                                            goto ldv_61859;
  ldv_61859: 
#line 1199 
  ;
  
#line 1400 
  __retres = ret;
  return_label: 
#line 1400 
                return __retres;
}


#line 1408  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/scan.c"
static u8 mwifiex_radio_type_to_band(u8 radio_type)
{
  u8 __retres;
  
#line 1410 
  switch ((int)radio_type) {
    case 1: 
#line 1411 
    ;
    
#line 1412 
    __retres = (unsigned char)4U;
    
#line 1412 
    goto return_label;
    case 0: 
#line 1413 
    ;
    default: 
#line 1414 
    ;
    
#line 1415 
    __retres = (unsigned char)2U;
    
#line 1415 
    goto return_label;
  }
  return_label: 
#line 1410 
                return __retres;
}


#line 1427  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/scan.c"
int mwifiex_scan_networks(struct mwifiex_private *priv, struct mwifiex_user_scan_cfg const *user_scan_in)
{
  int __retres;
  int ret;
  struct cmd_ctrl_node *cmd_node;
  union mwifiex_scan_cmd_config_tlv *scan_cfg_out;
  struct mwifiex_ie_types_chan_list_param_set *chan_list_out;
  struct mwifiex_chan_scan_param_set *scan_chan_list;
  u8 filtered_scan;
  u8 scan_current_chan_only;
  u8 max_chan_per_scan;
  unsigned long flags;
  
#line 1431 
  struct mwifiex_adapter *adapter = priv->adapter;
  
#line 1441 
  if (adapter->scan_processing != 0U) {
    
#line 1442 
    if ((adapter->debug_mask & 536870912U) != 0U) {
      
#line 1442 
      if (adapter->dev != (struct device *)0) 
#line 1442 
                                              _dev_info((struct device const *)adapter->dev,"cmd: Scan already in process...\n"); else ;
    }
    else ;
    
#line 1444 
    __retres = -16;
    
#line 1444 
    goto return_label;
  }
  else ;
  
#line 1447 
  if ((unsigned int)priv->scan_block != 0U) {
    
#line 1448 
    if ((adapter->debug_mask & 536870912U) != 0U) {
      
#line 1448 
      if (adapter->dev != (struct device *)0) 
#line 1448 
                                              _dev_info((struct device const *)adapter->dev,"cmd: Scan is blocked during association...\n"); else ;
    }
    else ;
    
#line 1450 
    __retres = -16;
    
#line 1450 
    goto return_label;
  }
  else ;
  
#line 1453 
  if ((int)adapter->surprise_removed != 0 || (unsigned int)adapter->is_cmd_timedout != 0U) {
    
#line 1454 
    if ((adapter->debug_mask & 4U) != 0U) {
      
#line 1454 
      if (adapter->dev != (struct device *)0) 
#line 1454 
                                              _dev_info((struct device const *)adapter->dev,"Ignore scan. Card removed or firmware in bad state\n"); else ;
    }
    else ;
    
#line 1456 
    __retres = -14;
    
#line 1456 
    goto return_label;
  }
  else ;
  
#line 1459 
  ldv___ldv_spin_lock_80_2(& adapter->mwifiex_cmd_lock);
  
#line 1460 
  adapter->scan_processing = 1U;
  
#line 1461 
  ldv_spin_unlock_irqrestore_81_3(& adapter->mwifiex_cmd_lock,flags);
  
#line 1463 
  scan_cfg_out = (union mwifiex_scan_cmd_config_tlv *)kzalloc_3(549UL,208U);
  
#line 1465 
  if (scan_cfg_out == (union mwifiex_scan_cmd_config_tlv *)0) {
    
#line 1466 
    ret = -12;
    
#line 1467 
    goto done;
  }
  else ;
  
#line 1470 
  scan_chan_list = (struct mwifiex_chan_scan_param_set *)kcalloc_0(50UL,7UL,208U);
  
#line 1473 
  if (scan_chan_list == (struct mwifiex_chan_scan_param_set *)0) {
    
#line 1474 
    kfree((void const *)scan_cfg_out);
    
#line 1475 
    ret = -12;
    
#line 1476 
    goto done;
  }
  else ;
  
#line 1479 
  mwifiex_config_scan(priv,user_scan_in,& scan_cfg_out->config,& chan_list_out,scan_chan_list,& max_chan_per_scan,& filtered_scan,& scan_current_chan_only);
  
#line 1483 
  ret = mwifiex_scan_channel_list(priv,(unsigned int)max_chan_per_scan,(unsigned char)((int)filtered_scan),& scan_cfg_out->config,chan_list_out,scan_chan_list);
  
#line 1488 
  if (ret == 0) {
    int tmp_2;
    
#line 1489 
    ldv___ldv_spin_lock_82_3(& adapter->scan_pending_q_lock);
    
#line 1490 
    tmp_2 = list_empty((struct list_head const *)(& adapter->scan_pending_q));
    
#line 1490 
    if (tmp_2 == 0) {
      struct cmd_ctrl_node *tmp_1;
      {
        
#line 1491 
        struct list_head const *__mptr = (struct list_head const *)adapter->scan_pending_q.next;
        
#line 1491 
        tmp_1 = (struct cmd_ctrl_node *)__mptr;
      }
      
#line 1491 
      cmd_node = tmp_1;
      
#line 1493 
      list_del(& cmd_node->list);
      
#line 1494 
      ldv_spin_unlock_irqrestore_83_3(& adapter->scan_pending_q_lock,flags);
      
#line 1496 
      mwifiex_insert_cmd_to_pending_q(adapter,cmd_node,1U);
      
#line 1498 
      ldv_queue_work_84(adapter->workqueue,& adapter->main_work);
      
#line 1501 
      if (priv->scan_request == (struct cfg80211_scan_request *)0) {
        
#line 1502 
        if ((adapter->debug_mask & 1073741824U) != 0U) {
          
#line 1502 
          if (adapter->dev != (struct device *)0) 
#line 1502 
                                                  _dev_info((struct device const *)adapter->dev,"wait internal scan\n"); else ;
        }
        else ;
        
#line 1504 
        mwifiex_wait_queue_complete(adapter,cmd_node);
      }
      else ;
    }
    else 
#line 1507 
         ldv_spin_unlock_irqrestore_85_3(& adapter->scan_pending_q_lock,flags);
  }
  else ;
  
#line 1512 
  kfree((void const *)scan_cfg_out);
  
#line 1513 
  kfree((void const *)scan_chan_list);
  done: 
#line 1514 
  ;
  
#line 1515 
  if (ret != 0) {
    
#line 1516 
    ldv___ldv_spin_lock_86_0(& adapter->mwifiex_cmd_lock);
    
#line 1517 
    adapter->scan_processing = 0U;
    
#line 1518 
    ldv_spin_unlock_irqrestore_87_1(& adapter->mwifiex_cmd_lock,flags);
  }
  else ;
  
#line 1520 
  __retres = ret;
  return_label: 
#line 1520 
                return __retres;
}


#line 1537  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/scan.c"
int mwifiex_cmd_802_11_scan(struct host_cmd_ds_command *cmd, struct mwifiex_scan_cmd_config *scan_cfg)
{
  int __retres;
  
#line 1540 
  struct host_cmd_ds_802_11_scan *scan_cmd = & cmd->params.scan;
  
#line 1543 
  scan_cmd->bss_mode = scan_cfg->bss_mode;
  
#line 1544 
  memcpy((void *)(& scan_cmd->bssid),(void const *)(& scan_cfg->specific_bssid),6UL);
  
#line 1546 
  memcpy((void *)(& scan_cmd->tlv_buffer),(void const *)(& scan_cfg->tlv_buf),(unsigned long)scan_cfg->tlv_buf_len);
  
#line 1548 
  cmd->command = (unsigned short)6U;
  
#line 1551 
  cmd->size = (unsigned short)((unsigned int)((unsigned short)scan_cfg->tlv_buf_len) + 15U);
  
#line 1555 
  __retres = 0;
  
#line 1555 
  return __retres;
}


#line 1562  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/scan.c"
int mwifiex_check_network_compatibility(struct mwifiex_private *priv, struct mwifiex_bssdescriptor *bss_desc)
{
  int __retres;
  struct mwifiex_chan_freq_power *tmp;
  
#line 1565 
  int ret = -1;
  
#line 1567 
  if (bss_desc == (struct mwifiex_bssdescriptor *)0) {
    
#line 1568 
    __retres = -1;
    
#line 1568 
    goto return_label;
  }
  else ;
  
#line 1570 
  tmp = mwifiex_get_cfp(priv,(unsigned char)((int)((unsigned char)bss_desc->bss_band)),(unsigned short)((int)((unsigned short)bss_desc->channel)),0U);
  
#line 1570 
  if (tmp != (struct mwifiex_chan_freq_power *)0) {
    
#line 1572 
    switch (priv->bss_mode) {
      case (u32)2: 
#line 1573 
      ;
      case (u32)1: 
#line 1574 
      ;
      
#line 1575 
      ret = mwifiex_is_network_compatible(priv,bss_desc,priv->bss_mode);
      
#line 1577 
      if (ret != 0) {
        
#line 1578 
        if (((priv->adapter)->debug_mask & 4U) != 0U) {
          
#line 1578 
          if ((priv->adapter)->dev != (struct device *)0) 
#line 1578 
                                                          _dev_info((struct device const *)(priv->adapter)->dev,"Incompatible network settings\n"); else ;
        }
        else ;
      }
      else ;
      
#line 1580 
      goto ldv_61895;
      default: 
#line 1581 
      ;
      
#line 1582 
      ret = 0;
    }
    ldv_61895: 
#line 1584 
    ;
  }
  else ;
  
#line 1586 
  __retres = ret;
  return_label: 
#line 1586 
                return __retres;
}


#line 1589  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/scan.c"
static int mwifiex_update_curr_bss_params(struct mwifiex_private *priv, struct cfg80211_bss *bss)
{
  int __retres;
  struct mwifiex_bssdescriptor *bss_desc;
  int ret;
  unsigned long flags;
  
#line 1597 
  bss_desc = (struct mwifiex_bssdescriptor *)kzalloc_3(336UL,208U);
  
#line 1598 
  if (bss_desc == (struct mwifiex_bssdescriptor *)0) {
    
#line 1599 
    __retres = -12;
    
#line 1599 
    goto return_label;
  }
  else ;
  
#line 1601 
  ret = mwifiex_fill_new_bss_desc(priv,bss,bss_desc);
  
#line 1602 
  if (ret != 0) 
#line 1603 
                goto done; else ;
  
#line 1605 
  ret = mwifiex_check_network_compatibility(priv,bss_desc);
  
#line 1606 
  if (ret != 0) 
#line 1607 
                goto done; else ;
  
#line 1609 
  ldv___ldv_spin_lock_88_2(& priv->curr_bcn_buf_lock);
  
#line 1611 
  memcpy((void *)(& priv->curr_bss_params.bss_descriptor),(void const *)bss_desc,336UL);
  
#line 1617 
  mwifiex_save_curr_bcn(priv);
  
#line 1618 
  ldv_spin_unlock_irqrestore_89_3(& priv->curr_bcn_buf_lock,flags);
  done: 
#line 1620 
  ;
  
#line 1624 
  kfree((void const *)bss_desc->beacon_buf);
  
#line 1625 
  kfree((void const *)bss_desc);
  
#line 1626 
  __retres = 0;
  return_label: 
#line 1626 
                return __retres;
}


#line 1630  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/scan.c"
static int mwifiex_parse_single_response_buf(struct mwifiex_private *priv, u8 **bss_info, u32 *bytes_left, u64 fw_tsf, u8 *radio_type, bool ext_scan, s32 rssi_val)
{
  int __retres;
  struct mwifiex_chan_freq_power *cfp;
  struct cfg80211_bss *bss;
  u8 bssid[6U];
  s32 rssi;
  u8 const *ie_buf;
  size_t ie_len;
  u32 curr_bcn_bytes;
  u32 freq;
  u16 beacon_period;
  u16 cap_info_bitmap;
  u8 *current_ptr;
  u64 timestamp;
  struct mwifiex_fixed_bcn_param *bcn_param;
  struct mwifiex_bss_priv *bss_priv;
  
#line 1634 
  struct mwifiex_adapter *adapter = priv->adapter;
  
#line 1641 
  u16 channel = (unsigned short)0U;
  
#line 1642 
  u16 beacon_size = (unsigned short)0U;
  
#line 1652 
  if (*bytes_left > 1U) {
    
#line 1654 
    beacon_size = *((__le16 *)*bss_info);
    
#line 1655 
    *bytes_left += 4294967294U;
    
#line 1656 
    *bss_info += 2U;
  }
  else ;
  
#line 1659 
  if ((unsigned int)beacon_size == 0U || (unsigned int)beacon_size > *bytes_left) {
    
#line 1660 
    *bss_info += *bytes_left;
    
#line 1661 
    *bytes_left = 0U;
    
#line 1662 
    __retres = -14;
    
#line 1662 
    goto return_label;
  }
  else ;
  
#line 1668 
  current_ptr = *bss_info;
  
#line 1671 
  *bss_info += (int)beacon_size;
  
#line 1672 
  *bytes_left -= (unsigned int)beacon_size;
  
#line 1674 
  curr_bcn_bytes = (unsigned int)beacon_size;
  
#line 1679 
  if (curr_bcn_bytes <= 18U) {
    
#line 1681 
    if ((adapter->debug_mask & 4U) != 0U) {
      
#line 1681 
      if (adapter->dev != (struct device *)0) 
#line 1681 
                                              _dev_info((struct device const *)adapter->dev,"InterpretIE: not enough bytes left\n"); else ;
    }
    else ;
    
#line 1683 
    __retres = -14;
    
#line 1683 
    goto return_label;
  }
  else ;
  
#line 1686 
  memcpy((void *)(& bssid),(void const *)current_ptr,6UL);
  
#line 1687 
  current_ptr += 6U;
  
#line 1688 
  curr_bcn_bytes += 4294967290U;
  
#line 1690 
  if (! ext_scan) {
    
#line 1691 
    rssi = (int)*current_ptr;
    
#line 1692 
    rssi *= -100;
    
#line 1693 
    current_ptr += 1U;
    
#line 1694 
    curr_bcn_bytes += 4294967295U;
    
#line 1695 
    if ((adapter->debug_mask & 1073741824U) != 0U) {
      
#line 1695 
      if (adapter->dev != (struct device *)0) 
#line 1695 
                                              _dev_info((struct device const *)adapter->dev,"info: InterpretIE: RSSI=%d\n",rssi); else ;
    }
    else ;
  }
  else 
#line 1698 
       rssi = rssi_val;
  
#line 1701 
  bcn_param = (struct mwifiex_fixed_bcn_param *)current_ptr;
  
#line 1702 
  current_ptr += 12U;
  
#line 1703 
  curr_bcn_bytes += 4294967284U;
  
#line 1705 
  timestamp = bcn_param->timestamp;
  
#line 1706 
  beacon_period = bcn_param->beacon_period;
  
#line 1708 
  cap_info_bitmap = bcn_param->cap_info_bitmap;
  
#line 1709 
  if ((adapter->debug_mask & 1073741824U) != 0U) {
    
#line 1709 
    if (adapter->dev != (struct device *)0) 
#line 1709 
                                            _dev_info((struct device const *)adapter->dev,"info: InterpretIE: capabilities=0x%X\n",(int)cap_info_bitmap); else ;
  }
  else ;
  
#line 1714 
  ie_buf = (u8 const *)current_ptr;
  
#line 1715 
  ie_len = (unsigned long)curr_bcn_bytes;
  
#line 1716 
  if ((adapter->debug_mask & 1073741824U) != 0U) {
    
#line 1716 
    if (adapter->dev != (struct device *)0) 
#line 1716 
                                            _dev_info((struct device const *)adapter->dev,"info: InterpretIE: IELength for this AP = %d\n",curr_bcn_bytes); else ;
  }
  else ;
  
#line 1720 
  goto ldv_61936;
  ldv_61935: 
#line 1721 
  ;
  {
    u8 element_id;
    u8 element_len;
    
#line 1723 
    element_id = *current_ptr;
    
#line 1724 
    element_len = *(current_ptr + 1U);
    
#line 1725 
    if ((unsigned long)curr_bcn_bytes < (unsigned long)element_len + 2UL) {
      
#line 1727 
      if ((adapter->debug_mask & 4U) != 0U) {
        
#line 1727 
        if (adapter->dev != (struct device *)0) 
#line 1727 
                                                _dev_info((struct device const *)adapter->dev,"%s: bytes left < IE length\n","mwifiex_parse_single_response_buf"); else ;
      }
      else ;
      
#line 1729 
      __retres = -14;
      
#line 1729 
      goto return_label;
    }
    else ;
    
#line 1731 
    if ((unsigned int)element_id == 3U) {
      
#line 1732 
      channel = (unsigned short)*(current_ptr + 2U);
      
#line 1734 
      goto ldv_61934;
    }
    else ;
    
#line 1737 
    current_ptr += (unsigned int)element_len + 2U;
    
#line 1738 
    curr_bcn_bytes = (curr_bcn_bytes - (unsigned int)element_len) + 4294967294U;
  }
  ldv_61936: 
#line 1740 
  ;
  
#line 1720 
  if (curr_bcn_bytes > 1U) 
#line 1722 
                           goto ldv_61935; else 
#line 1725 
                                                goto ldv_61934;
  ldv_61934: 
#line 1726 
  ;
  
#line 1742 
  if ((unsigned int)channel != 0U) {
    struct ieee80211_channel *chan;
    u8 band;
    
#line 1747 
    if ((int)((unsigned short)priv->csa_chan) == (int)channel) {
      
#line 1748 
      if ((adapter->debug_mask & 536870912U) != 0U) {
        
#line 1748 
        if (adapter->dev != (struct device *)0) 
#line 1748 
                                                _dev_info((struct device const *)adapter->dev,"Dropping entry on csa closed channel\n"); else ;
      }
      else ;
      
#line 1750 
      __retres = 0;
      
#line 1750 
      goto return_label;
    }
    else ;
    
#line 1753 
    band = (unsigned char)2U;
    
#line 1754 
    if (radio_type != (u8 *)0U) 
#line 1755 
                                band = mwifiex_radio_type_to_band((unsigned char)((int)*radio_type & 3)); else ;
    
#line 1758 
    cfp = mwifiex_get_cfp(priv,(unsigned char)((int)band),(unsigned short)((int)channel),0U);
    
#line 1760 
    if (cfp != (struct mwifiex_chan_freq_power *)0) 
#line 1760 
                                                    freq = cfp->freq; else 
                                                                    
#line 1760 
                                                                    freq = 0U;
    
#line 1762 
    chan = ieee80211_get_channel(priv->wdev.wiphy,(int)freq);
    
#line 1764 
    if (chan != (struct ieee80211_channel *)0 && (chan->flags & 1U) == 0U) {
      
#line 1765 
      bss = cfg80211_inform_bss(priv->wdev.wiphy,chan,(enum cfg80211_bss_frame_type)CFG80211_BSS_FTYPE_UNKNOWN,(u8 const *)(& bssid),timestamp,(unsigned short)((int)cap_info_bitmap),(unsigned short)((int)beacon_period),ie_buf,ie_len,rssi,208U);
      
#line 1770 
      bss_priv = (struct mwifiex_bss_priv *)(& bss->priv);
      
#line 1771 
      bss_priv->band = band;
      
#line 1772 
      bss_priv->fw_tsf = fw_tsf;
      
#line 1773 
      if ((unsigned int)priv->media_connected != 0U) {
        int tmp;
        
#line 1773 
        tmp = memcmp((void const *)(& bssid),(void const *)(& priv->curr_bss_params.bss_descriptor.mac_address),6UL);
        
#line 1773 
        if (tmp == 0) 
#line 1776 
                      mwifiex_update_curr_bss_params(priv,bss); else ;
      }
      else ;
      
#line 1777 
      cfg80211_put_bss(priv->wdev.wiphy,bss);
    }
    else ;
  }
  else 
    
#line 1780 
    if ((adapter->debug_mask & 536870912U) != 0U) {
      
#line 1780 
      if (adapter->dev != (struct device *)0) 
#line 1780 
                                              _dev_info((struct device const *)adapter->dev,"missing BSS channel IE\n"); else ;
    }
    else ;
  
#line 1783 
  __retres = 0;
  return_label: 
#line 1783 
                return __retres;
}


#line 1786  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/scan.c"
static void mwifiex_complete_scan(struct mwifiex_private *priv)
{
  
#line 1788 
  struct mwifiex_adapter *adapter = priv->adapter;
  
#line 1790 
  adapter->survey_idx = 0;
  
#line 1791 
  if ((adapter->curr_cmd)->wait_q_enabled != 0U) {
    
#line 1792 
    adapter->cmd_wait_q.status = 0;
    
#line 1793 
    if (priv->scan_request == (struct cfg80211_scan_request *)0) {
      
#line 1794 
      if ((adapter->debug_mask & 1073741824U) != 0U) {
        
#line 1794 
        if (adapter->dev != (struct device *)0) 
#line 1794 
                                                _dev_info((struct device const *)adapter->dev,"complete internal scan\n"); else ;
      }
      else ;
      
#line 1796 
      mwifiex_complete_cmd(adapter,adapter->curr_cmd);
    }
    else ;
  }
  else ;
  
#line 1799 
  return;
}


#line 1801  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/scan.c"
static void mwifiex_check_next_scan_command(struct mwifiex_private *priv)
{
  struct cmd_ctrl_node *cmd_node;
  struct cmd_ctrl_node *tmp_node;
  unsigned long flags;
  int tmp_3;
  
#line 1803 
  struct mwifiex_adapter *adapter = priv->adapter;
  
#line 1807 
  ldv___ldv_spin_lock_90_2(& adapter->scan_pending_q_lock);
  
#line 1808 
  tmp_3 = list_empty((struct list_head const *)(& adapter->scan_pending_q));
  
#line 1808 
  if (tmp_3 != 0) {
    
#line 1809 
    ldv_spin_unlock_irqrestore_91_2(& adapter->scan_pending_q_lock,flags);
    
#line 1810 
    ldv___ldv_spin_lock_92_2(& adapter->mwifiex_cmd_lock);
    
#line 1811 
    adapter->scan_processing = 0U;
    
#line 1812 
    ldv_spin_unlock_irqrestore_93_1(& adapter->mwifiex_cmd_lock,flags);
    
#line 1814 
    if (! adapter->ext_scan) 
#line 1815 
                             mwifiex_complete_scan(priv); else ;
    
#line 1817 
    if (priv->scan_request != (struct cfg80211_scan_request *)0) {
      
#line 1818 
      if ((adapter->debug_mask & 1073741824U) != 0U) {
        
#line 1818 
        if (adapter->dev != (struct device *)0) 
#line 1818 
                                                _dev_info((struct device const *)adapter->dev,"info: notifying scan done\n"); else ;
      }
      else ;
      
#line 1820 
      cfg80211_scan_done(priv->scan_request,(_Bool)0);
      
#line 1821 
      priv->scan_request = (struct cfg80211_scan_request *)0;
    }
    else {
      
#line 1823 
      priv->scan_aborting = (_Bool)0;
      
#line 1824 
      if ((adapter->debug_mask & 1073741824U) != 0U) {
        
#line 1824 
        if (adapter->dev != (struct device *)0) 
#line 1824 
                                                _dev_info((struct device const *)adapter->dev,"info: scan already aborted\n"); else ;
      }
      else ;
    }
  }
  else 
    
#line 1827 
    if (((int)priv->scan_aborting != 0 && priv->scan_request == (struct cfg80211_scan_request *)0) || (unsigned int)priv->scan_block != 0U) {
      struct cmd_ctrl_node *tmp;
      struct cmd_ctrl_node *tmp_0;
      struct cmd_ctrl_node *tmp_1;
      {
        
#line 1829 
        struct list_head const *__mptr = (struct list_head const *)adapter->scan_pending_q.next;
        
#line 1829 
        tmp = (struct cmd_ctrl_node *)__mptr;
      }
      
#line 1829 
      cmd_node = tmp;
      {
        
#line 1829 
        struct list_head const *__mptr_0 = (struct list_head const *)cmd_node->list.next;
        
#line 1829 
        tmp_0 = (struct cmd_ctrl_node *)__mptr_0;
      }
      
#line 1830 
      tmp_node = tmp_0;
      
#line 1829 
      goto ldv_61957;
      ldv_61956: 
#line 1830 
      ;
      
#line 1831 
      list_del(& cmd_node->list);
      
#line 1832 
      mwifiex_insert_cmd_to_free_q(adapter,cmd_node);
      
#line 1829 
      cmd_node = tmp_node;
      {
        
#line 1829 
        struct list_head const *__mptr_1 = (struct list_head const *)tmp_node->list.next;
        
#line 1829 
        tmp_1 = (struct cmd_ctrl_node *)__mptr_1;
      }
      
#line 1829 
      tmp_node = tmp_1;
      ldv_61957: 
#line 1831 
      ;
      
#line 1829 
      if (& cmd_node->list != & adapter->scan_pending_q) 
#line 1831 
                                                         goto ldv_61956; else 
                                                                    
#line 1834 
                                                                    goto ldv_61958;
      ldv_61958: 
#line 1835 
      ;
      
#line 1834 
      ldv_spin_unlock_irqrestore_94_2(& adapter->scan_pending_q_lock,flags);
      
#line 1836 
      ldv___ldv_spin_lock_95(& adapter->mwifiex_cmd_lock);
      
#line 1837 
      adapter->scan_processing = 0U;
      
#line 1838 
      ldv_spin_unlock_irqrestore_96_2(& adapter->mwifiex_cmd_lock,flags);
      
#line 1840 
      if (priv->scan_request != (struct cfg80211_scan_request *)0) {
        
#line 1841 
        if ((adapter->debug_mask & 1073741824U) != 0U) {
          
#line 1841 
          if (adapter->dev != (struct device *)0) 
#line 1841 
                                                  _dev_info((struct device const *)adapter->dev,"info: aborting scan\n"); else ;
        }
        else ;
        
#line 1843 
        cfg80211_scan_done(priv->scan_request,(_Bool)1);
        
#line 1844 
        priv->scan_request = (struct cfg80211_scan_request *)0;
      }
      else {
        
#line 1846 
        priv->scan_aborting = (_Bool)0;
        
#line 1847 
        if ((adapter->debug_mask & 1073741824U) != 0U) {
          
#line 1847 
          if (adapter->dev != (struct device *)0) 
#line 1847 
                                                  _dev_info((struct device const *)adapter->dev,"info: scan already aborted\n"); else ;
        }
        else ;
      }
    }
    else {
      struct cmd_ctrl_node *tmp_2;
      {
        
#line 1854 
        struct list_head const *__mptr_2 = (struct list_head const *)adapter->scan_pending_q.next;
        
#line 1854 
        tmp_2 = (struct cmd_ctrl_node *)__mptr_2;
      }
      
#line 1854 
      cmd_node = tmp_2;
      
#line 1856 
      list_del(& cmd_node->list);
      
#line 1857 
      ldv_spin_unlock_irqrestore_97_0(& adapter->scan_pending_q_lock,flags);
      
#line 1858 
      mwifiex_insert_cmd_to_pending_q(adapter,cmd_node,1U);
    }
  
#line 1861 
  return;
}


#line 1883  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/scan.c"
int mwifiex_ret_802_11_scan(struct mwifiex_private *priv, struct host_cmd_ds_command *resp)
{
  struct host_cmd_ds_802_11_scan_rsp *scan_rsp;
  struct mwifiex_ie_types_data *tlv_data;
  struct mwifiex_ie_types_tsf_timestamp *tsf_tlv;
  u8 *bss_info;
  u32 scan_resp_size;
  u32 bytes_left;
  u32 idx;
  u32 tlv_buf_size;
  struct mwifiex_ie_types_chan_band_list_param_set *chan_band_tlv;
  struct chan_band_param_set *chan_band;
  u8 is_bgscan_resp;
  u8 *radio_type;
  
#line 1886 
  int ret = 0;
  
#line 1887 
  struct mwifiex_adapter *adapter = priv->adapter;
  
#line 1899 
  __le64 fw_tsf = 0ULL;
  
#line 1902 
  is_bgscan_resp = (unsigned char)((unsigned int)resp->command == 108U);
  
#line 1904 
  if ((unsigned int)is_bgscan_resp != 0U) 
#line 1905 
                                          scan_rsp = & resp->params.bg_scan_query_resp.scan_resp; else 
                                                                    
#line 1907 
                                                                    scan_rsp = & resp->params.scan_resp;
  
#line 1910 
  if ((unsigned int)scan_rsp->number_of_sets > 64U) {
    
#line 1911 
    if ((adapter->debug_mask & 4U) != 0U) {
      
#line 1911 
      if (adapter->dev != (struct device *)0) 
#line 1911 
                                              _dev_info((struct device const *)adapter->dev,"SCAN_RESP: too many AP returned (%d)\n",(int)scan_rsp->number_of_sets); else ;
    }
    else ;
    
#line 1914 
    ret = -1;
    
#line 1915 
    goto check_next_scan;
  }
  else ;
  
#line 1919 
  mwifiex_11h_get_csa_closed_channel(priv);
  
#line 1921 
  bytes_left = (unsigned int)scan_rsp->bss_descript_size;
  
#line 1922 
  if ((adapter->debug_mask & 1073741824U) != 0U) {
    
#line 1922 
    if (adapter->dev != (struct device *)0) 
#line 1922 
                                            _dev_info((struct device const *)adapter->dev,"info: SCAN_RESP: bss_descript_size %d\n",bytes_left); else ;
  }
  else ;
  
#line 1926 
  scan_resp_size = (unsigned int)resp->size;
  
#line 1928 
  if ((adapter->debug_mask & 1073741824U) != 0U) {
    
#line 1928 
    if (adapter->dev != (struct device *)0) 
#line 1928 
                                            _dev_info((struct device const *)adapter->dev,"info: SCAN_RESP: returned %d APs before parsing\n",(int)scan_rsp->number_of_sets); else ;
  }
  else ;
  
#line 1932 
  bss_info = (u8 *)(& scan_rsp->bss_desc_and_tlv_buffer);
  
#line 1940 
  tlv_buf_size = (scan_resp_size - bytes_left) + 4294967285U;
  
#line 1945 
  tlv_data = (struct mwifiex_ie_types_data *)(& scan_rsp->bss_desc_and_tlv_buffer) + bytes_left;
  
#line 1951 
  mwifiex_ret_802_11_scan_get_tlv_ptrs(adapter,tlv_data,tlv_buf_size,275U,(struct mwifiex_ie_types_data **)(& tsf_tlv));
  
#line 1958 
  mwifiex_ret_802_11_scan_get_tlv_ptrs(adapter,tlv_data,tlv_buf_size,298U,(struct mwifiex_ie_types_data **)(& chan_band_tlv));
  
#line 1963 
  idx = 0U;
  
#line 1963 
  goto ldv_61982;
  ldv_61981: 
#line 1964 
  ;
  
#line 1970 
  if (tsf_tlv != (struct mwifiex_ie_types_tsf_timestamp *)0) 
#line 1971 
                                                             memcpy((void *)(& fw_tsf),(void const *)(& tsf_tlv->tsf_data[idx * 8U]),8UL); else ;
  
#line 1974 
  if (chan_band_tlv != (struct mwifiex_ie_types_chan_band_list_param_set *)0) {
    
#line 1975 
    chan_band = & chan_band_tlv->chan_band_param[idx];
    
#line 1976 
    radio_type = & chan_band->radio_type;
  }
  else 
#line 1978 
       radio_type = (u8 *)0U;
  
#line 1981 
  ret = mwifiex_parse_single_response_buf(priv,& bss_info,& bytes_left,fw_tsf,radio_type,(_Bool)0,0);
  
#line 1985 
  if (ret != 0) 
#line 1986 
                goto check_next_scan; else ;
  
#line 1963 
  idx += 1U;
  ldv_61982: 
#line 1964 
  ;
  
#line 1963 
  if ((unsigned int)scan_rsp->number_of_sets > idx && bytes_left != 0U) 
    
#line 1965 
    goto ldv_61981; else 
#line 1968 
                         goto ldv_61983;
  ldv_61983: 
#line 1969 
  ;
  check_next_scan: 
#line 1989 
  ;
  
#line 1990 
  mwifiex_check_next_scan_command(priv);
  
#line 1991 
  return ret;
}


#line 2001  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/scan.c"
int mwifiex_cmd_802_11_scan_ext(struct mwifiex_private *priv, struct host_cmd_ds_command *cmd, void *data_buf)
{
  int __retres;
  
#line 2005 
  struct host_cmd_ds_802_11_scan_ext *ext_scan = & cmd->params.ext_scan;
  
#line 2006 
  struct mwifiex_scan_cmd_config *scan_cfg = (struct mwifiex_scan_cmd_config *)data_buf;
  
#line 2008 
  memcpy((void *)(& ext_scan->tlv_buffer),(void const *)(& scan_cfg->tlv_buf),(unsigned long)scan_cfg->tlv_buf_len);
  
#line 2010 
  cmd->command = (unsigned short)263U;
  
#line 2013 
  cmd->size = (unsigned short)((unsigned int)((unsigned short)scan_cfg->tlv_buf_len) + 12U);
  
#line 2016 
  __retres = 0;
  
#line 2016 
  return __retres;
}


#line 2020  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/scan.c"
static void mwifiex_update_chan_statistics(struct mwifiex_private *priv, struct mwifiex_ietypes_chanstats *tlv_stat)
{
  u8 i;
  u8 num_chan;
  struct mwifiex_fw_chan_stats *fw_chan_stats;
  struct mwifiex_chan_stats chan_stats;
  int tmp;
  
#line 2023 
  struct mwifiex_adapter *adapter = priv->adapter;
  
#line 2028 
  fw_chan_stats = (struct mwifiex_fw_chan_stats *)tlv_stat + 4U;
  
#line 2030 
  num_chan = (unsigned char)((unsigned int)tlv_stat->header.len / 10U);
  
#line 2033 
  i = (unsigned char)0U;
  
#line 2033 
  goto ldv_62001;
  ldv_62000: 
#line 2034 
  ;
  
#line 2034 
  chan_stats.chan_num = fw_chan_stats->chan_num;
  
#line 2035 
  chan_stats.bandcfg = fw_chan_stats->bandcfg;
  
#line 2036 
  chan_stats.flags = fw_chan_stats->flags;
  
#line 2037 
  chan_stats.noise = fw_chan_stats->noise;
  
#line 2038 
  chan_stats.total_bss = fw_chan_stats->total_bss;
  
#line 2039 
  chan_stats.cca_scan_dur = fw_chan_stats->cca_scan_dur;
  
#line 2041 
  chan_stats.cca_busy_dur = fw_chan_stats->cca_busy_dur;
  
#line 2043 
  if ((adapter->debug_mask & 1073741824U) != 0U) {
    
#line 2043 
    if (adapter->dev != (struct device *)0) 
#line 2043 
                                            _dev_info((struct device const *)adapter->dev,"chan=%d, noise=%d, total_network=%d scan_duration=%d, busy_duration=%d\n",(int)chan_stats.chan_num,(int)chan_stats.noise,(int)chan_stats.total_bss,(int)chan_stats.cca_scan_dur,(int)chan_stats.cca_busy_dur); else ;
  }
  else ;
  
#line 2050 
  tmp = adapter->survey_idx;
  
#line 2050 
  adapter->survey_idx += 1;
  
#line 2050 
  ;
  
#line 2050 
  memcpy((void *)(adapter->chan_stats + tmp),(void const *)(& chan_stats),10UL);
  
#line 2052 
  fw_chan_stats += 1;
  
#line 2033 
  i = (u8)((int)i + 1);
  ldv_62001: 
#line 2034 
  ;
  
#line 2033 
  if ((int)i < (int)num_chan) 
#line 2035 
                              goto ldv_62000; else 
#line 2038 
                                                   goto ldv_62002;
  ldv_62002: 
#line 2039 
  ;
  
#line 2040 
  return;
}


#line 2057  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/scan.c"
int mwifiex_ret_802_11_scan_ext(struct mwifiex_private *priv, struct host_cmd_ds_command *resp)
{
  int __retres;
  struct host_cmd_ds_802_11_scan_ext *ext_scan_resp;
  struct mwifiex_ie_types_header *tlv;
  struct mwifiex_ietypes_chanstats *tlv_stat;
  u16 buf_left;
  u16 type;
  u16 len;
  struct host_cmd_ds_command *cmd_ptr;
  struct cmd_ctrl_node *cmd_node;
  unsigned long cmd_flags;
  unsigned long scan_flags;
  int tmp_1;
  
#line 2060 
  struct mwifiex_adapter *adapter = priv->adapter;
  
#line 2069 
  bool complete_scan = (_Bool)0;
  
#line 2071 
  if ((adapter->debug_mask & 1073741824U) != 0U) {
    
#line 2071 
    if (adapter->dev != (struct device *)0) 
#line 2071 
                                            _dev_info((struct device const *)adapter->dev,"info: EXT scan returns successfully\n"); else ;
  }
  else ;
  
#line 2073 
  ext_scan_resp = & resp->params.ext_scan;
  
#line 2075 
  tlv = (struct mwifiex_ie_types_header *)(& ext_scan_resp->tlv_buffer);
  
#line 2076 
  buf_left = (unsigned short)((unsigned int)resp->size + 65524U);
  
#line 2079 
  goto ldv_62024;
  ldv_62023: 
#line 2080 
  ;
  
#line 2080 
  type = tlv->type;
  
#line 2081 
  len = tlv->len;
  
#line 2083 
  if ((unsigned long)buf_left < (unsigned long)len + 4UL) {
    
#line 2084 
    if ((adapter->debug_mask & 4U) != 0U) {
      
#line 2084 
      if (adapter->dev != (struct device *)0) 
#line 2084 
                                              _dev_info((struct device const *)adapter->dev,"error processing scan response TLVs"); else ;
    }
    else ;
    
#line 2086 
    goto ldv_62019;
  }
  else ;
  
#line 2089 
  switch ((int)type) {
    case 454: 
#line 2090 
    ;
    
#line 2091 
    tlv_stat = (struct mwifiex_ietypes_chanstats *)tlv;
    
#line 2092 
    mwifiex_update_chan_statistics(priv,tlv_stat);
    
#line 2093 
    goto ldv_62021;
    default: 
#line 2094 
    ;
    
#line 2095 
    goto ldv_62021;
  }
  ldv_62021: 
#line 2098 
  ;
  
#line 2098 
  buf_left = (unsigned short)((unsigned int)((int)buf_left - (int)len) + 65532U);
  
#line 2099 
  tlv += (unsigned int)len + 4U;
  ldv_62024: 
#line 2100 
  ;
  
#line 2079 
  if ((unsigned int)buf_left > 3U) 
#line 2081 
                                   goto ldv_62023; else 
#line 2084 
                                                        goto ldv_62019;
  ldv_62019: 
#line 2085 
  ;
  
#line 2103 
  ldv___ldv_spin_lock_98_0(& adapter->cmd_pending_q_lock);
  
#line 2104 
  ldv___ldv_spin_lock_99_0(& adapter->scan_pending_q_lock);
  
#line 2105 
  tmp_1 = list_empty((struct list_head const *)(& adapter->scan_pending_q));
  
#line 2105 
  if (tmp_1 != 0) {
    struct cmd_ctrl_node *tmp;
    struct cmd_ctrl_node *tmp_0;
    
#line 2106 
    complete_scan = (_Bool)1;
    {
      
#line 2107 
      struct list_head const *__mptr = (struct list_head const *)adapter->cmd_pending_q.next;
      
#line 2107 
      tmp = (struct cmd_ctrl_node *)__mptr;
    }
    
#line 2107 
    cmd_node = tmp;
    
#line 2107 
    goto ldv_62031;
    ldv_62030: 
#line 2108 
    ;
    
#line 2108 
    cmd_ptr = (struct host_cmd_ds_command *)(cmd_node->cmd_skb)->data;
    
#line 2109 
    if ((unsigned int)cmd_ptr->command == 263U) {
      
#line 2111 
      if ((adapter->debug_mask & 1073741824U) != 0U) {
        
#line 2111 
        if (adapter->dev != (struct device *)0) 
#line 2111 
                                                _dev_info((struct device const *)adapter->dev,"Scan pending in command pending list"); else ;
      }
      else ;
      
#line 2113 
      complete_scan = (_Bool)0;
      
#line 2114 
      goto ldv_62029;
    }
    else ;
    {
      
#line 2107 
      struct list_head const *__mptr_0 = (struct list_head const *)cmd_node->list.next;
      
#line 2107 
      tmp_0 = (struct cmd_ctrl_node *)__mptr_0;
    }
    
#line 2107 
    cmd_node = tmp_0;
    ldv_62031: 
#line 2109 
    ;
    
#line 2107 
    if (& cmd_node->list != & adapter->cmd_pending_q) 
#line 2109 
                                                      goto ldv_62030; else 
                                                                    
#line 2112 
                                                                    goto ldv_62029;
    ldv_62029: 
#line 2113 
    ;
  }
  else ;
  
#line 2118 
  ldv_spin_unlock_irqrestore_100_2(& adapter->scan_pending_q_lock,scan_flags);
  
#line 2119 
  ldv_spin_unlock_irqrestore_101_1(& adapter->cmd_pending_q_lock,cmd_flags);
  
#line 2121 
  if ((int)complete_scan != 0) 
#line 2122 
                               mwifiex_complete_scan(priv); else ;
  
#line 2124 
  __retres = 0;
  
#line 2124 
  return __retres;
}


#line 2130  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/scan.c"
int mwifiex_handle_event_ext_scan_report(struct mwifiex_private *priv, void *buf)
{
  u8 *bss_info;
  u32 bytes_left;
  u32 bytes_left_for_tlv;
  u32 idx;
  u16 type;
  u16 len;
  struct mwifiex_ie_types_data *tlv;
  struct mwifiex_ie_types_bss_scan_rsp *scan_rsp_tlv;
  struct mwifiex_ie_types_bss_scan_info *scan_info_tlv;
  u8 *radio_type;
  
#line 2133 
  int ret = 0;
  
#line 2134 
  struct mwifiex_adapter *adapter = priv->adapter;
  
#line 2142 
  u64 fw_tsf = 0ULL;
  
#line 2143 
  s32 rssi = 0;
  
#line 2144 
  struct mwifiex_event_scan_result *event_scan = (struct mwifiex_event_scan_result *)buf;
  
#line 2145 
  u8 num_of_set = event_scan->num_of_set;
  
#line 2146 
  u8 *scan_resp = (u8 *)(buf + 11U);
  
#line 2147 
  u16 scan_resp_size = event_scan->buf_size;
  
#line 2149 
  if ((unsigned int)num_of_set > 64U) {
    
#line 2150 
    if ((adapter->debug_mask & 4U) != 0U) {
      
#line 2150 
      if (adapter->dev != (struct device *)0) 
#line 2150 
                                              _dev_info((struct device const *)adapter->dev,"EXT_SCAN: Invalid number of AP returned (%d)!!\n",(int)num_of_set); else ;
    }
    else ;
    
#line 2153 
    ret = -1;
    
#line 2154 
    goto check_next_scan;
  }
  else ;
  
#line 2157 
  bytes_left = (unsigned int)scan_resp_size;
  
#line 2158 
  if ((adapter->debug_mask & 1073741824U) != 0U) {
    
#line 2158 
    if (adapter->dev != (struct device *)0) 
#line 2158 
                                            _dev_info((struct device const *)adapter->dev,"EXT_SCAN: size %d, returned %d APs...",(int)scan_resp_size,(int)num_of_set); else ;
  }
  else ;
  
#line 2161 
  if ((adapter->debug_mask & 131072U) != 0U) 
#line 2161 
                                             print_hex_dump("\001","EXT_SCAN buffer:",2,16,1,(void const *)buf,(unsigned long)scan_resp_size + 11UL,(_Bool)0); else ;
  
#line 2165 
  tlv = (struct mwifiex_ie_types_data *)scan_resp;
  
#line 2167 
  idx = 0U;
  
#line 2167 
  goto ldv_62063;
  ldv_62062: 
#line 2168 
  ;
  
#line 2168 
  type = tlv->header.type;
  
#line 2169 
  len = tlv->header.len;
  
#line 2170 
  if ((unsigned long)bytes_left < (unsigned long)len + 4UL) {
    
#line 2171 
    if ((adapter->debug_mask & 4U) != 0U) {
      
#line 2171 
      if (adapter->dev != (struct device *)0) 
#line 2171 
                                              _dev_info((struct device const *)adapter->dev,"EXT_SCAN: Error bytes left < TLV length\n"); else ;
    }
    else ;
    
#line 2173 
    goto ldv_62055;
  }
  else ;
  
#line 2175 
  scan_rsp_tlv = (struct mwifiex_ie_types_bss_scan_rsp *)0;
  
#line 2176 
  scan_info_tlv = (struct mwifiex_ie_types_bss_scan_info *)0;
  
#line 2177 
  bytes_left_for_tlv = bytes_left;
  
#line 2182 
  if ((unsigned int)type != 342U) 
#line 2183 
                                  goto ldv_62055; else ;
  
#line 2185 
  bss_info = (u8 *)tlv;
  
#line 2186 
  scan_rsp_tlv = (struct mwifiex_ie_types_bss_scan_rsp *)tlv;
  
#line 2187 
  tlv = (struct mwifiex_ie_types_data *)(& tlv->data) + (int)len;
  
#line 2188 
  bytes_left_for_tlv = (bytes_left_for_tlv - (unsigned int)len) + 4294967292U;
  
#line 2191 
  goto ldv_62056;
  ldv_62060: 
#line 2192 
  ;
  
#line 2194 
  type = tlv->header.type;
  
#line 2195 
  len = tlv->header.len;
  
#line 2196 
  if ((unsigned long)bytes_left_for_tlv < (unsigned long)len + 4UL) {
    
#line 2198 
    if ((adapter->debug_mask & 4U) != 0U) {
      
#line 2198 
      if (adapter->dev != (struct device *)0) 
#line 2198 
                                              _dev_info((struct device const *)adapter->dev,"EXT_SCAN: Error in processing TLV,\t"); else ;
    }
    else ;
    
#line 2201 
    scan_rsp_tlv = (struct mwifiex_ie_types_bss_scan_rsp *)0;
    
#line 2202 
    bytes_left_for_tlv = 0U;
    
#line 2203 
    goto ldv_62056;
  }
  else ;
  
#line 2205 
  switch ((int)type) {
    case 343: 
#line 2206 
    ;
    
#line 2207 
    scan_info_tlv = (struct mwifiex_ie_types_bss_scan_info *)tlv;
    
#line 2209 
    if ((unsigned int)len != 16U) {
      
#line 2212 
      bytes_left_for_tlv = 0U;
      
#line 2213 
      goto ldv_62056;
    }
    else ;
    
#line 2215 
    goto ldv_62058;
    default: 
#line 2216 
    ;
    
#line 2217 
    goto ldv_62058;
  }
  ldv_62058: 
#line 2219 
  ;
  
#line 2219 
  tlv = (struct mwifiex_ie_types_data *)(& tlv->data) + (int)len;
  
#line 2220 
  bytes_left = (bytes_left - (unsigned int)len) + 4294967292U;
  
#line 2222 
  bytes_left_for_tlv = (bytes_left_for_tlv - (unsigned int)len) + 4294967292U;
  ldv_62056: 
#line 2223 
  ;
  
#line 2191 
  if (bytes_left_for_tlv > 3U && (unsigned int)tlv->header.type != 342U) 
    
#line 2195 
    goto ldv_62060; else 
#line 2198 
                         goto ldv_62061;
  ldv_62061: 
#line 2199 
  ;
  
#line 2226 
  if (scan_rsp_tlv == (struct mwifiex_ie_types_bss_scan_rsp *)0) 
#line 2227 
                                                                 goto ldv_62055; else ;
  
#line 2234 
  bss_info += 2U;
  
#line 2235 
  bytes_left += 4294967294U;
  
#line 2237 
  if (scan_info_tlv != (struct mwifiex_ie_types_bss_scan_info *)0) {
    
#line 2238 
    rssi = (int)((short)scan_info_tlv->rssi);
    
#line 2239 
    rssi *= 100;
    
#line 2240 
    if ((adapter->debug_mask & 1073741824U) != 0U) {
      
#line 2240 
      if (adapter->dev != (struct device *)0) 
#line 2240 
                                              _dev_info((struct device const *)adapter->dev,"info: InterpretIE: RSSI=%d\n",rssi); else ;
    }
    else ;
    
#line 2242 
    fw_tsf = scan_info_tlv->tsf;
    
#line 2243 
    radio_type = & scan_info_tlv->radio_type;
  }
  else 
#line 2245 
       radio_type = (u8 *)0U;
  
#line 2247 
  ret = mwifiex_parse_single_response_buf(priv,& bss_info,& bytes_left,fw_tsf,radio_type,(_Bool)1,rssi);
  
#line 2250 
  if (ret != 0) 
#line 2251 
                goto check_next_scan; else ;
  
#line 2167 
  idx += 1U;
  ldv_62063: 
#line 2168 
  ;
  
#line 2167 
  if ((unsigned int)num_of_set > idx && bytes_left != 0U) 
#line 2169 
                                                          goto ldv_62062; else 
                                                                    
#line 2172 
                                                                    goto ldv_62055;
  ldv_62055: 
#line 2173 
  ;
  check_next_scan: 
#line 2254 
  ;
  
#line 2255 
  if ((unsigned int)event_scan->more_event == 0U) 
#line 2256 
                                                  mwifiex_check_next_scan_command(priv); else ;
  
#line 2258 
  return ret;
}


#line 2269  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/scan.c"
int mwifiex_cmd_802_11_bg_scan_query(struct host_cmd_ds_command *cmd)
{
  int __retres;
  
#line 2271 
  struct host_cmd_ds_802_11_bg_scan_query *bg_query = & cmd->params.bg_scan_query;
  
#line 2274 
  cmd->command = (unsigned short)108U;
  
#line 2275 
  cmd->size = (unsigned short)9U;
  
#line 2278 
  bg_query->flush = (unsigned char)1U;
  
#line 2280 
  __retres = 0;
  
#line 2280 
  return __retres;
}


#line 2287  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/scan.c"
void mwifiex_queue_scan_cmd(struct mwifiex_private *priv, struct cmd_ctrl_node *cmd_node)
{
  unsigned long flags;
  
#line 2290 
  struct mwifiex_adapter *adapter = priv->adapter;
  
#line 2293 
  cmd_node->wait_q_enabled = 1U;
  
#line 2294 
  cmd_node->condition = & adapter->scan_wait_q_woken;
  
#line 2295 
  ldv___ldv_spin_lock_102_2(& adapter->scan_pending_q_lock);
  
#line 2296 
  list_add_tail(& cmd_node->list,& adapter->scan_pending_q);
  
#line 2297 
  ldv_spin_unlock_irqrestore_103_2(& adapter->scan_pending_q_lock,flags);
  
#line 2298 
  return;
}


#line 2304  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/scan.c"
static int mwifiex_scan_specific_ssid(struct mwifiex_private *priv, struct cfg80211_ssid *req_ssid)
{
  int __retres;
  int ret;
  struct mwifiex_user_scan_cfg *scan_cfg;
  
#line 2307 
  struct mwifiex_adapter *adapter = priv->adapter;
  
#line 2311 
  if (adapter->scan_processing != 0U) {
    
#line 2312 
    if ((adapter->debug_mask & 536870912U) != 0U) {
      
#line 2312 
      if (adapter->dev != (struct device *)0) 
#line 2312 
                                              _dev_info((struct device const *)adapter->dev,"cmd: Scan already in process...\n"); else ;
    }
    else ;
    
#line 2314 
    __retres = -16;
    
#line 2314 
    goto return_label;
  }
  else ;
  
#line 2317 
  if ((unsigned int)priv->scan_block != 0U) {
    
#line 2318 
    if ((adapter->debug_mask & 536870912U) != 0U) {
      
#line 2318 
      if (adapter->dev != (struct device *)0) 
#line 2318 
                                              _dev_info((struct device const *)adapter->dev,"cmd: Scan is blocked during association...\n"); else ;
    }
    else ;
    
#line 2320 
    __retres = -16;
    
#line 2320 
    goto return_label;
  }
  else ;
  
#line 2323 
  scan_cfg = (struct mwifiex_user_scan_cfg *)kzalloc_3(420UL,208U);
  
#line 2324 
  if (scan_cfg == (struct mwifiex_user_scan_cfg *)0) {
    
#line 2325 
    __retres = -12;
    
#line 2325 
    goto return_label;
  }
  else ;
  
#line 2327 
  scan_cfg->ssid_list = req_ssid;
  
#line 2328 
  scan_cfg->num_ssids = (unsigned char)1U;
  
#line 2330 
  ret = mwifiex_scan_networks(priv,(struct mwifiex_user_scan_cfg const *)scan_cfg);
  
#line 2332 
  kfree((void const *)scan_cfg);
  
#line 2333 
  __retres = ret;
  return_label: 
#line 2333 
                return __retres;
}


#line 2345  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/scan.c"
int mwifiex_request_scan(struct mwifiex_private *priv, struct cfg80211_ssid *req_ssid)
{
  int __retres;
  int ret;
  int tmp;
  
#line 2350 
  tmp = down_interruptible(& priv->async_sem);
  
#line 2350 
  if (tmp != 0) {
    
#line 2351 
    if (((priv->adapter)->debug_mask & 4U) != 0U) {
      
#line 2351 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 2351 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"%s: acquire semaphore fail\n","mwifiex_request_scan"); else ;
    }
    else ;
    
#line 2354 
    __retres = -1;
    
#line 2354 
    goto return_label;
  }
  else ;
  
#line 2357 
  (priv->adapter)->scan_wait_q_woken = (unsigned char)0U;
  
#line 2359 
  if (req_ssid != (struct cfg80211_ssid *)0 && (unsigned int)req_ssid->ssid_len != 0U) 
    
#line 2361 
    ret = mwifiex_scan_specific_ssid(priv,req_ssid); else 
#line 2364 
                                                          ret = mwifiex_scan_networks(priv,(struct mwifiex_user_scan_cfg const *)0);
  
#line 2366 
  up(& priv->async_sem);
  
#line 2368 
  __retres = ret;
  return_label: 
#line 2368 
                return __retres;
}


#line 2375  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/scan.c"
int mwifiex_cmd_append_vsie_tlv(struct mwifiex_private *priv, u16 vsie_mask, u8 **buffer)
{
  int __retres;
  int id;
  struct mwifiex_ie_types_vendor_param_set *vs_param_set;
  
#line 2378 
  int ret_len = 0;
  
#line 2381 
  if (buffer == (u8 **)0U) {
    
#line 2382 
    __retres = 0;
    
#line 2382 
    goto return_label;
  }
  else ;
  
#line 2383 
  if (*buffer == (u8 *)0U) {
    
#line 2384 
    __retres = 0;
    
#line 2384 
    goto return_label;
  }
  else ;
  
#line 2390 
  id = 0;
  
#line 2390 
  goto ldv_62096;
  ldv_62095: 
#line 2391 
  ;
  
#line 2391 
  if ((unsigned int)((int)priv->vs_ie[id].mask & (int)vsie_mask) != 0U) {
    
#line 2392 
    vs_param_set = (struct mwifiex_ie_types_vendor_param_set *)*buffer;
    
#line 2395 
    vs_param_set->header.type = (unsigned short)266U;
    
#line 2397 
    vs_param_set->header.len = (unsigned short)((unsigned int)((unsigned short)priv->vs_ie[id].ie[1]) + 2U);
    
#line 2400 
    memcpy((void *)(& vs_param_set->ie),(void const *)(& priv->vs_ie[id].ie),(unsigned long)vs_param_set->header.len);
    
#line 2402 
    *buffer += (unsigned int)vs_param_set->header.len + 4U;
    
#line 2404 
    ret_len = (int)((unsigned int)((int)vs_param_set->header.len + ret_len) + 4U);
  }
  else ;
  
#line 2390 
  id += 1;
  ldv_62096: 
#line 2391 
  ;
  
#line 2390 
  if (id <= 7) 
#line 2392 
               goto ldv_62095; else 
#line 2395 
                                    goto ldv_62097;
  ldv_62097: 
#line 2396 
  ;
  
#line 2408 
  __retres = ret_len;
  return_label: 
#line 2408 
                return __retres;
}


#line 2421  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/scan.c"
void mwifiex_save_curr_bcn(struct mwifiex_private *priv)
{
  
#line 2423 
  struct mwifiex_bssdescriptor *curr_bss = & priv->curr_bss_params.bss_descriptor;
  
#line 2426 
  if (curr_bss->beacon_buf_size == 0U) 
#line 2427 
                                       goto return_label; else ;
  
#line 2430 
  if (priv->curr_bcn_buf == (u8 *)0U || priv->curr_bcn_size != curr_bss->beacon_buf_size) {
    
#line 2432 
    priv->curr_bcn_size = curr_bss->beacon_buf_size;
    
#line 2434 
    kfree((void const *)priv->curr_bcn_buf);
    
#line 2435 
    priv->curr_bcn_buf = (u8 *)kmalloc_0((unsigned long)curr_bss->beacon_buf_size,32U);
    
#line 2437 
    if (priv->curr_bcn_buf == (u8 *)0U) 
#line 2438 
                                        goto return_label; else ;
  }
  else ;
  
#line 2441 
  memcpy((void *)priv->curr_bcn_buf,(void const *)curr_bss->beacon_buf,(unsigned long)curr_bss->beacon_buf_size);
  
#line 2443 
  if (((priv->adapter)->debug_mask & 1073741824U) != 0U) {
    
#line 2443 
    if ((priv->adapter)->dev != (struct device *)0) 
#line 2443 
                                                    _dev_info((struct device const *)(priv->adapter)->dev,"info: current beacon saved %d\n",priv->curr_bcn_size); else ;
  }
  else ;
  
#line 2447 
  curr_bss->beacon_buf = priv->curr_bcn_buf;
  
#line 2450 
  if (curr_bss->bcn_wpa_ie != (struct ieee_types_vendor_specific *)0) 
    
#line 2451 
    curr_bss->bcn_wpa_ie = (struct ieee_types_vendor_specific *)(curr_bss->beacon_buf + (int)curr_bss->wpa_offset); else ;
  
#line 2456 
  if (curr_bss->bcn_rsn_ie != (struct ieee_types_generic *)0) 
#line 2457 
                                                              curr_bss->bcn_rsn_ie = (struct ieee_types_generic *)(curr_bss->beacon_buf + (int)curr_bss->rsn_offset); else ;
  
#line 2461 
  if (curr_bss->bcn_ht_cap != (struct ieee80211_ht_cap *)0) 
#line 2462 
                                                            curr_bss->bcn_ht_cap = (struct ieee80211_ht_cap *)(curr_bss->beacon_buf + (int)curr_bss->ht_cap_offset); else ;
  
#line 2466 
  if (curr_bss->bcn_ht_oper != (struct ieee80211_ht_operation *)0) 
#line 2467 
                                                                   curr_bss->bcn_ht_oper = (struct ieee80211_ht_operation *)(curr_bss->beacon_buf + (int)curr_bss->ht_info_offset); else ;
  
#line 2471 
  if (curr_bss->bcn_vht_cap != (struct ieee80211_vht_cap *)0) 
#line 2472 
                                                              curr_bss->bcn_vht_cap = (struct ieee80211_vht_cap *)(curr_bss->beacon_buf + (int)curr_bss->vht_cap_offset); else ;
  
#line 2475 
  if (curr_bss->bcn_vht_oper != (struct ieee80211_vht_operation *)0) 
    
#line 2476 
    curr_bss->bcn_vht_oper = (struct ieee80211_vht_operation *)(curr_bss->beacon_buf + (int)curr_bss->vht_info_offset); else ;
  
#line 2479 
  if (curr_bss->bcn_bss_co_2040 != (u8 *)0U) 
#line 2480 
                                             curr_bss->bcn_bss_co_2040 = curr_bss->beacon_buf + (int)curr_bss->bss_co_2040_offset; else ;
  
#line 2483 
  if (curr_bss->bcn_ext_cap != (u8 *)0U) 
#line 2484 
                                         curr_bss->bcn_ext_cap = curr_bss->beacon_buf + (int)curr_bss->ext_cap_offset; else ;
  
#line 2487 
  if (curr_bss->oper_mode != (struct ieee_types_oper_mode_ntf *)0) 
#line 2488 
                                                                   curr_bss->oper_mode = (struct ieee_types_oper_mode_ntf *)(curr_bss->beacon_buf + (int)curr_bss->oper_mode_offset); else ;
  return_label: 
#line 2490 
                return;
}


#line 2496  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/scan.c"
void mwifiex_free_curr_bcn(struct mwifiex_private *priv)
{
  
#line 2498 
  kfree((void const *)priv->curr_bcn_buf);
  
#line 2499 
  priv->curr_bcn_buf = (u8 *)0U;
  
#line 2500 
  return;
}


#line 415  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_scan.c.aux"
static void *kmalloc_0(size_t size, gfp_t flags)
{
  void *tmp;
  
#line 418 
  tmp = ldv_kmalloc(size,flags);
  
#line 418 
  return tmp;
}


#line 429  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_scan.c.aux"
static void *kcalloc_0(size_t n, size_t size, gfp_t flags)
{
  void *tmp;
  
#line 432 
  tmp = ldv_kcalloc(n,size,flags);
  
#line 432 
  return tmp;
}


#line 436  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_scan.c.aux"
static void *kzalloc_3(size_t size, gfp_t flags)
{
  void *tmp;
  
#line 439 
  tmp = ldv_kzalloc(size,flags);
  
#line 439 
  return tmp;
}


#line 791  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_scan.c.aux"
static void ldv___ldv_spin_lock_78_3(spinlock_t *ldv_func_arg1)
{
  
#line 795 
  ldv_spin_model_lock((char *)"scan_pending_q_lock_of_mwifiex_adapter");
  
#line 797 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 798 
  return;
}


#line 801  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_scan.c.aux"
static void ldv_spin_unlock_irqrestore_79_3(spinlock_t *lock, unsigned long flags)
{
  
#line 805 
  ldv_spin_model_unlock((char *)"scan_pending_q_lock_of_mwifiex_adapter");
  
#line 807 
  spin_unlock_irqrestore_4(lock,flags);
  
#line 808 
  return;
}


#line 811  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_scan.c.aux"
static void ldv___ldv_spin_lock_80_2(spinlock_t *ldv_func_arg1)
{
  
#line 815 
  ldv_spin_model_lock((char *)"mwifiex_cmd_lock_of_mwifiex_adapter");
  
#line 817 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 818 
  return;
}


#line 821  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_scan.c.aux"
static void ldv_spin_unlock_irqrestore_81_3(spinlock_t *lock, unsigned long flags)
{
  
#line 825 
  ldv_spin_model_unlock((char *)"mwifiex_cmd_lock_of_mwifiex_adapter");
  
#line 827 
  spin_unlock_irqrestore_4(lock,flags);
  
#line 828 
  return;
}


#line 831  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_scan.c.aux"
static void ldv___ldv_spin_lock_82_3(spinlock_t *ldv_func_arg1)
{
  
#line 835 
  ldv_spin_model_lock((char *)"scan_pending_q_lock_of_mwifiex_adapter");
  
#line 837 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 838 
  return;
}


#line 841  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_scan.c.aux"
static void ldv_spin_unlock_irqrestore_83_3(spinlock_t *lock, unsigned long flags)
{
  
#line 845 
  ldv_spin_model_unlock((char *)"scan_pending_q_lock_of_mwifiex_adapter");
  
#line 847 
  spin_unlock_irqrestore_4(lock,flags);
  
#line 848 
  return;
}


#line 851  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_scan.c.aux"
static bool ldv_queue_work_84(struct workqueue_struct *wq, struct work_struct *work)
{
  bool __retres;
  bool tmp;
  
#line 855 
  tmp = ldv_emg_queue_work(wq,work);
  
#line 855 
  __retres = tmp != 0;
  
#line 855 
  return __retres;
}


#line 859  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_scan.c.aux"
static void ldv_spin_unlock_irqrestore_85_3(spinlock_t *lock, unsigned long flags)
{
  
#line 863 
  ldv_spin_model_unlock((char *)"scan_pending_q_lock_of_mwifiex_adapter");
  
#line 865 
  spin_unlock_irqrestore_4(lock,flags);
  
#line 866 
  return;
}


#line 869  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_scan.c.aux"
static void ldv___ldv_spin_lock_86_0(spinlock_t *ldv_func_arg1)
{
  
#line 873 
  ldv_spin_model_lock((char *)"mwifiex_cmd_lock_of_mwifiex_adapter");
  
#line 875 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 876 
  return;
}


#line 879  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_scan.c.aux"
static void ldv_spin_unlock_irqrestore_87_1(spinlock_t *lock, unsigned long flags)
{
  
#line 883 
  ldv_spin_model_unlock((char *)"mwifiex_cmd_lock_of_mwifiex_adapter");
  
#line 885 
  spin_unlock_irqrestore_4(lock,flags);
  
#line 886 
  return;
}


#line 889  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_scan.c.aux"
static void ldv___ldv_spin_lock_88_2(spinlock_t *ldv_func_arg1)
{
  
#line 893 
  ldv_spin_model_lock((char *)"curr_bcn_buf_lock_of_mwifiex_private");
  
#line 895 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 896 
  return;
}


#line 899  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_scan.c.aux"
static void ldv_spin_unlock_irqrestore_89_3(spinlock_t *lock, unsigned long flags)
{
  
#line 903 
  ldv_spin_model_unlock((char *)"curr_bcn_buf_lock_of_mwifiex_private");
  
#line 905 
  spin_unlock_irqrestore_4(lock,flags);
  
#line 906 
  return;
}


#line 909  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_scan.c.aux"
static void ldv___ldv_spin_lock_90_2(spinlock_t *ldv_func_arg1)
{
  
#line 913 
  ldv_spin_model_lock((char *)"scan_pending_q_lock_of_mwifiex_adapter");
  
#line 915 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 916 
  return;
}


#line 919  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_scan.c.aux"
static void ldv_spin_unlock_irqrestore_91_2(spinlock_t *lock, unsigned long flags)
{
  
#line 923 
  ldv_spin_model_unlock((char *)"scan_pending_q_lock_of_mwifiex_adapter");
  
#line 925 
  spin_unlock_irqrestore_4(lock,flags);
  
#line 926 
  return;
}


#line 929  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_scan.c.aux"
static void ldv___ldv_spin_lock_92_2(spinlock_t *ldv_func_arg1)
{
  
#line 933 
  ldv_spin_model_lock((char *)"mwifiex_cmd_lock_of_mwifiex_adapter");
  
#line 935 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 936 
  return;
}


#line 939  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_scan.c.aux"
static void ldv_spin_unlock_irqrestore_93_1(spinlock_t *lock, unsigned long flags)
{
  
#line 943 
  ldv_spin_model_unlock((char *)"mwifiex_cmd_lock_of_mwifiex_adapter");
  
#line 945 
  spin_unlock_irqrestore_4(lock,flags);
  
#line 946 
  return;
}


#line 949  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_scan.c.aux"
static void ldv_spin_unlock_irqrestore_94_2(spinlock_t *lock, unsigned long flags)
{
  
#line 953 
  ldv_spin_model_unlock((char *)"scan_pending_q_lock_of_mwifiex_adapter");
  
#line 955 
  spin_unlock_irqrestore_4(lock,flags);
  
#line 956 
  return;
}


#line 959  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_scan.c.aux"
static void ldv___ldv_spin_lock_95(spinlock_t *ldv_func_arg1)
{
  
#line 963 
  ldv_spin_model_lock((char *)"mwifiex_cmd_lock_of_mwifiex_adapter");
  
#line 965 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 966 
  return;
}


#line 969  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_scan.c.aux"
static void ldv_spin_unlock_irqrestore_96_2(spinlock_t *lock, unsigned long flags)
{
  
#line 973 
  ldv_spin_model_unlock((char *)"mwifiex_cmd_lock_of_mwifiex_adapter");
  
#line 975 
  spin_unlock_irqrestore_4(lock,flags);
  
#line 976 
  return;
}


#line 979  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_scan.c.aux"
static void ldv_spin_unlock_irqrestore_97_0(spinlock_t *lock, unsigned long flags)
{
  
#line 983 
  ldv_spin_model_unlock((char *)"scan_pending_q_lock_of_mwifiex_adapter");
  
#line 985 
  spin_unlock_irqrestore_4(lock,flags);
  
#line 986 
  return;
}


#line 989  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_scan.c.aux"
static void ldv___ldv_spin_lock_98_0(spinlock_t *ldv_func_arg1)
{
  
#line 993 
  ldv_spin_model_lock((char *)"cmd_pending_q_lock_of_mwifiex_adapter");
  
#line 995 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 996 
  return;
}


#line 999  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_scan.c.aux"
static void ldv___ldv_spin_lock_99_0(spinlock_t *ldv_func_arg1)
{
  
#line 1003 
  ldv_spin_model_lock((char *)"scan_pending_q_lock_of_mwifiex_adapter");
  
#line 1005 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 1006 
  return;
}


#line 1009  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_scan.c.aux"
static void ldv_spin_unlock_irqrestore_100_2(spinlock_t *lock, unsigned long flags)
{
  
#line 1013 
  ldv_spin_model_unlock((char *)"scan_pending_q_lock_of_mwifiex_adapter");
  
#line 1015 
  spin_unlock_irqrestore_4(lock,flags);
  
#line 1016 
  return;
}


#line 1019  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_scan.c.aux"
static void ldv_spin_unlock_irqrestore_101_1(spinlock_t *lock, unsigned long flags)
{
  
#line 1023 
  ldv_spin_model_unlock((char *)"cmd_pending_q_lock_of_mwifiex_adapter");
  
#line 1025 
  spin_unlock_irqrestore_4(lock,flags);
  
#line 1026 
  return;
}


#line 1029  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_scan.c.aux"
static void ldv___ldv_spin_lock_102_2(spinlock_t *ldv_func_arg1)
{
  
#line 1033 
  ldv_spin_model_lock((char *)"scan_pending_q_lock_of_mwifiex_adapter");
  
#line 1035 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 1036 
  return;
}


#line 1039  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_scan.c.aux"
static void ldv_spin_unlock_irqrestore_103_2(spinlock_t *lock, unsigned long flags)
{
  
#line 1043 
  ldv_spin_model_unlock((char *)"scan_pending_q_lock_of_mwifiex_adapter");
  
#line 1045 
  spin_unlock_irqrestore_4(lock,flags);
  
#line 1046 
  return;
}


#line 53  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dynamic_debug.h"
void __dynamic_dev_dbg(struct _ddebug *, struct device const *, char const * , ...);


#line 446  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_unlock_irqrestore_5(spinlock_t *lock, unsigned long flags)
{
  {
    unsigned long __dummy;
    unsigned long __dummy2;
    
  }
  
#line 448 
  _raw_spin_unlock_irqrestore(& lock->__anonCompField_spinlock_18.rlock,flags);
  
#line 449 
  return;
}


#line 482 
static void ldv_spin_unlock_irqrestore_79_4(spinlock_t *lock, unsigned long flags);


#line 486 
static void ldv_spin_unlock_irqrestore_81_4(spinlock_t *lock, unsigned long flags);


#line 490 
static void ldv_spin_unlock_irqrestore_83_4(spinlock_t *lock, unsigned long flags);


#line 494 
static void ldv_spin_unlock_irqrestore_84_0(spinlock_t *lock, unsigned long flags);


#line 498 
static void ldv_spin_unlock_irqrestore_86_0(spinlock_t *lock, unsigned long flags);


#line 502 
static void ldv_spin_unlock_irqrestore_88_0(spinlock_t *lock, unsigned long flags);


#line 506 
static void ldv_spin_unlock_irqrestore_89_4(spinlock_t *lock, unsigned long flags);


#line 510 
static void ldv_spin_unlock_irqrestore_92_0(spinlock_t *lock, unsigned long flags);


#line 514 
static void ldv_spin_unlock_irqrestore_94_3(spinlock_t *lock, unsigned long flags);


#line 518 
static void ldv_spin_unlock_irqrestore_96_3(spinlock_t *lock, unsigned long flags);


#line 522 
static void ldv_spin_unlock_irqrestore_97_1(spinlock_t *lock, unsigned long flags);


#line 526 
static void ldv_spin_unlock_irqrestore_99_2(spinlock_t *lock, unsigned long flags);


#line 530 
static void ldv_spin_unlock_irqrestore_101_2(spinlock_t *lock, unsigned long flags);


#line 534 
static void ldv_spin_unlock_irqrestore_103_3(spinlock_t *lock, unsigned long flags);


#line 538 
static void ldv_spin_unlock_irqrestore_104_0(spinlock_t *lock, unsigned long flags);


#line 542 
static void ldv_spin_unlock_irqrestore_106(spinlock_t *lock, unsigned long flags);


#line 546 
static void ldv_spin_unlock_irqrestore_108(spinlock_t *lock, unsigned long flags);


#line 550 
static void ldv_spin_unlock_irqrestore_111(spinlock_t *lock, unsigned long flags);


#line 554 
static void ldv_spin_unlock_irqrestore_112_0(spinlock_t *lock, unsigned long flags);


#line 558 
static void ldv_spin_unlock_irqrestore_114(spinlock_t *lock, unsigned long flags);


#line 562 
static void ldv_spin_unlock_irqrestore_116(spinlock_t *lock, unsigned long flags);


#line 566 
static void ldv_spin_unlock_irqrestore_118(spinlock_t *lock, unsigned long flags);


#line 570 
static void ldv_spin_unlock_irqrestore_120(spinlock_t *lock, unsigned long flags);


#line 574 
static void ldv_spin_unlock_irqrestore_121_0(spinlock_t *lock, unsigned long flags);


#line 74  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_11n_rxreorder.c.aux"
static void ldv___ldv_spin_lock_78_4(spinlock_t *ldv_func_arg1);


#line 78 
static void ldv___ldv_spin_lock_80_3(spinlock_t *ldv_func_arg1);


#line 82 
static void ldv___ldv_spin_lock_82_4(spinlock_t *ldv_func_arg1);


#line 86 
static void ldv___ldv_spin_lock_85(spinlock_t *ldv_func_arg1);


#line 90 
static void ldv___ldv_spin_lock_87_0(spinlock_t *ldv_func_arg1);


#line 94 
static void ldv___ldv_spin_lock_91_0(spinlock_t *ldv_func_arg1);


#line 98 
static void ldv___ldv_spin_lock_93_1(spinlock_t *ldv_func_arg1);


#line 102 
static void ldv___ldv_spin_lock_95_0(spinlock_t *ldv_func_arg1);


#line 106 
static void ldv___ldv_spin_lock_98_1(spinlock_t *ldv_func_arg1);


#line 110 
static void ldv___ldv_spin_lock_100_0(spinlock_t *ldv_func_arg1);


#line 114 
static void ldv___ldv_spin_lock_102_3(spinlock_t *ldv_func_arg1);


#line 118 
static void ldv___ldv_spin_lock_105(spinlock_t *ldv_func_arg1);


#line 122 
static void ldv___ldv_spin_lock_107(spinlock_t *ldv_func_arg1);


#line 126 
static void ldv___ldv_spin_lock_110(spinlock_t *ldv_func_arg1);


#line 130 
static void ldv___ldv_spin_lock_113(spinlock_t *ldv_func_arg1);


#line 134 
static void ldv___ldv_spin_lock_115(spinlock_t *ldv_func_arg1);


#line 138 
static void ldv___ldv_spin_lock_117(spinlock_t *ldv_func_arg1);


#line 142 
static void ldv___ldv_spin_lock_119(spinlock_t *ldv_func_arg1);


#line 173  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timer.h"
static int ldv_mod_timer_109(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2);


#line 232 
static int ldv_del_timer_sync_90(struct timer_list *ldv_func_arg1);


#line 581  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/slab.h"
static void *kzalloc_4(size_t size, gfp_t flags);


#line 1541  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static struct sk_buff *__skb_dequeue(struct sk_buff_head *list)
{
  
#line 1543 
  struct sk_buff *skb = skb_peek((struct sk_buff_head const *)list);
  
#line 1544 
  if (skb != (struct sk_buff *)0) 
#line 1545 
                                  __skb_unlink(skb,list); else ;
  
#line 1546 
  return skb;
}


#line 3746  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/cfg80211.h"
void ieee80211_amsdu_to_8023s(struct sk_buff *, struct sk_buff_head *, u8 const *, enum nl80211_iftype, unsigned int const, bool);


#line 1069  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.h"
int mwifiex_process_rx_packet(struct mwifiex_private *priv, struct sk_buff *skb);


#line 1083 
int mwifiex_handle_uap_rx_forward(struct mwifiex_private *priv, struct sk_buff *skb);


#line 1523 
void mwifiex_coex_ampdu_rxwinsize(struct mwifiex_adapter *adapter);


#line 1524 
void mwifiex_11n_delba(struct mwifiex_private *priv, int tid);


#line 56  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11n_rxreorder.h"
int mwifiex_11n_rx_reorder_pkt(struct mwifiex_private *priv, u16 seq_num, u16 tid, u8 *ta, u8 pkt_type, void *payload);


#line 60 
void mwifiex_del_ba_tbl(struct mwifiex_private *priv, int tid, u8 *peer_mac, u8 type, int initiator);


#line 64 
int mwifiex_ret_11n_addba_resp(struct mwifiex_private *priv, struct host_cmd_ds_command *resp);


#line 67 
int mwifiex_cmd_11n_delba(struct host_cmd_ds_command *cmd, void *data_buf);


#line 69 
int mwifiex_cmd_11n_addba_rsp_gen(struct mwifiex_private *priv, struct host_cmd_ds_command *cmd, struct host_cmd_ds_11n_addba_req *cmd_addba_req);


#line 73 
int mwifiex_cmd_11n_addba_req(struct host_cmd_ds_command *cmd, void *data_buf);


#line 81 
struct mwifiex_rx_reorder_tbl *mwifiex_11n_get_rx_reorder_tbl(struct mwifiex_private *priv, int tid, u8 *ta);


#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11n.h"
void mwifiex_11n_delete_tx_ba_stream_tbl_entry(struct mwifiex_private *priv, struct mwifiex_tx_ba_stream_tbl *tx_ba_tsr_tbl);


#line 45 
struct mwifiex_tx_ba_stream_tbl *mwifiex_get_ba_tbl(struct mwifiex_private *priv, int tid, u8 *ra);


#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11n_rxreorder.c"
static int mwifiex_11n_dispatch_amsdu_pkt(struct mwifiex_private *priv, struct sk_buff *skb)
{
  int __retres;
  int ret;
  
#line 35 
  struct rxpd *local_rx_pd = (struct rxpd *)skb->data;
  
#line 38 
  if ((unsigned int)local_rx_pd->rx_pkt_type == 230U) {
    struct sk_buff_head list;
    struct sk_buff *rx_skb;
    int tmp;
    
#line 42 
    __skb_queue_head_init(& list);
    
#line 44 
    skb_pull(skb,(unsigned int)local_rx_pd->rx_pkt_offset);
    
#line 45 
    skb_trim(skb,(unsigned int)local_rx_pd->rx_pkt_length);
    
#line 47 
    ieee80211_amsdu_to_8023s(skb,& list,(u8 const *)(& priv->curr_addr),priv->wdev.iftype,0U,(_Bool)0);
    
#line 50 
    goto ldv_61737;
    ldv_61736: 
#line 51 
    ;
    
#line 51 
    rx_skb = __skb_dequeue(& list);
    
#line 52 
    ret = mwifiex_recv_packet(priv,rx_skb);
    
#line 53 
    if (ret == -1) {
      
#line 54 
      if (((priv->adapter)->debug_mask & 4U) != 0U) {
        
#line 54 
        if ((priv->adapter)->dev != (struct device *)0) 
#line 54 
                                                        _dev_info((struct device const *)(priv->adapter)->dev,"Rx of A-MSDU failed"); else ;
      }
      else ;
    }
    else ;
    ldv_61737: 
#line 55 
    ;
    
#line 50 
    tmp = skb_queue_empty((struct sk_buff_head const *)(& list));
    
#line 50 
    if (tmp == 0) 
#line 52 
                  goto ldv_61736; else 
#line 55 
                                       goto ldv_61738;
    ldv_61738: 
#line 56 
    ;
    
#line 57 
    __retres = 0;
    
#line 57 
    goto return_label;
  }
  else ;
  
#line 60 
  __retres = -1;
  return_label: 
#line 60 
                return __retres;
}


#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11n_rxreorder.c"
static int mwifiex_11n_dispatch_pkt(struct mwifiex_private *priv, void *payload)
{
  int __retres;
  int tmp_1;
  
#line 68 
  int ret = mwifiex_11n_dispatch_amsdu_pkt(priv,(struct sk_buff *)payload);
  
#line 70 
  if (ret == 0) {
    
#line 71 
    __retres = 0;
    
#line 71 
    goto return_label;
  }
  else ;
  
#line 73 
  if ((unsigned int)priv->bss_role == 1U) {
    int tmp_0;
    
#line 74 
    tmp_0 = mwifiex_handle_uap_rx_forward(priv,(struct sk_buff *)payload);
    
#line 74 
    __retres = tmp_0;
    
#line 74 
    goto return_label;
  }
  else ;
  
#line 76 
  tmp_1 = mwifiex_process_rx_packet(priv,(struct sk_buff *)payload);
  
#line 76 
  __retres = tmp_1;
  return_label: 
#line 76 
                return __retres;
}


#line 88  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11n_rxreorder.c"
static void mwifiex_11n_dispatch_pkt_until_start_win(struct mwifiex_private *priv, struct mwifiex_rx_reorder_tbl *tbl, int start_win)
{
  int pkt_to_send;
  int i;
  void *rx_tmp_ptr;
  unsigned long flags;
  
#line 96 
  if (tbl->start_win < start_win) {
    int tmp_0;
    {
      int tmp;
      
#line 97 
      int _min1 = start_win - tbl->start_win;
      
#line 97 
      int _min2 = tbl->win_size;
      
#line 97 
      if (_min1 < _min2) 
#line 97 
                         tmp = _min1; else 
#line 97 
                                           tmp = _min2;
      
#line 97 
      tmp_0 = tmp;
    }
    
#line 96 
    pkt_to_send = tmp_0;
  }
  else 
#line 96 
       pkt_to_send = tbl->win_size;
  
#line 100 
  i = 0;
  
#line 100 
  goto ldv_61757;
  ldv_61756: 
#line 101 
  ;
  
#line 101 
  ldv___ldv_spin_lock_78_4(& priv->rx_pkt_lock);
  
#line 102 
  rx_tmp_ptr = (void *)0;
  
#line 103 
  if (*(tbl->rx_reorder_ptr + i) != (void *)0) {
    
#line 104 
    rx_tmp_ptr = *(tbl->rx_reorder_ptr + i);
    
#line 105 
    *(tbl->rx_reorder_ptr + i) = (void *)0;
  }
  else ;
  
#line 107 
  ldv_spin_unlock_irqrestore_79_4(& priv->rx_pkt_lock,flags);
  
#line 108 
  if (rx_tmp_ptr != (void *)0) 
#line 109 
                               mwifiex_11n_dispatch_pkt(priv,rx_tmp_ptr); else ;
  
#line 100 
  i += 1;
  ldv_61757: 
#line 101 
  ;
  
#line 100 
  if (i < pkt_to_send) 
#line 102 
                       goto ldv_61756; else 
#line 105 
                                            goto ldv_61758;
  ldv_61758: 
#line 106 
  ;
  
#line 112 
  ldv___ldv_spin_lock_80_3(& priv->rx_pkt_lock);
  
#line 117 
  i = 0;
  
#line 117 
  goto ldv_61760;
  ldv_61759: 
#line 118 
  ;
  
#line 118 
  *(tbl->rx_reorder_ptr + i) = *(tbl->rx_reorder_ptr + (pkt_to_send + i));
  
#line 119 
  *(tbl->rx_reorder_ptr + (pkt_to_send + i)) = (void *)0;
  
#line 117 
  i += 1;
  ldv_61760: 
#line 118 
  ;
  
#line 117 
  if (tbl->win_size - pkt_to_send > i) 
#line 119 
                                       goto ldv_61759; else 
#line 122 
                                                            goto ldv_61761;
  ldv_61761: 
#line 123 
  ;
  
#line 122 
  tbl->start_win = start_win;
  
#line 123 
  ldv_spin_unlock_irqrestore_81_4(& priv->rx_pkt_lock,flags);
  
#line 124 
  return;
}


#line 135  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11n_rxreorder.c"
static void mwifiex_11n_scan_and_dispatch(struct mwifiex_private *priv, struct mwifiex_rx_reorder_tbl *tbl)
{
  int i;
  int j;
  int xchg;
  void *rx_tmp_ptr;
  unsigned long flags;
  
#line 142 
  i = 0;
  
#line 142 
  goto ldv_61773;
  ldv_61772: 
#line 143 
  ;
  
#line 143 
  ldv___ldv_spin_lock_82_4(& priv->rx_pkt_lock);
  
#line 144 
  if (*(tbl->rx_reorder_ptr + i) == (void *)0) {
    
#line 145 
    ldv_spin_unlock_irqrestore_83_4(& priv->rx_pkt_lock,flags);
    
#line 146 
    goto ldv_61771;
  }
  else ;
  
#line 148 
  rx_tmp_ptr = *(tbl->rx_reorder_ptr + i);
  
#line 149 
  *(tbl->rx_reorder_ptr + i) = (void *)0;
  
#line 150 
  ldv_spin_unlock_irqrestore_84_0(& priv->rx_pkt_lock,flags);
  
#line 151 
  mwifiex_11n_dispatch_pkt(priv,rx_tmp_ptr);
  
#line 142 
  i += 1;
  ldv_61773: 
#line 143 
  ;
  
#line 142 
  if (tbl->win_size > i) 
#line 144 
                         goto ldv_61772; else 
#line 147 
                                              goto ldv_61771;
  ldv_61771: 
#line 148 
  ;
  
#line 154 
  ldv___ldv_spin_lock_85(& priv->rx_pkt_lock);
  
#line 159 
  if (i > 0) {
    
#line 160 
    xchg = tbl->win_size - i;
    
#line 161 
    j = 0;
    
#line 161 
    goto ldv_61775;
    ldv_61774: 
#line 162 
    ;
    
#line 162 
    *(tbl->rx_reorder_ptr + j) = *(tbl->rx_reorder_ptr + (i + j));
    
#line 163 
    *(tbl->rx_reorder_ptr + (i + j)) = (void *)0;
    
#line 161 
    j += 1;
    ldv_61775: 
#line 162 
    ;
    
#line 161 
    if (j < xchg) 
#line 163 
                  goto ldv_61774; else 
#line 166 
                                       goto ldv_61776;
    ldv_61776: 
#line 167 
    ;
  }
  else ;
  
#line 166 
  tbl->start_win = (tbl->start_win + i) & 4095;
  
#line 167 
  ldv_spin_unlock_irqrestore_86_0(& priv->rx_pkt_lock,flags);
  
#line 168 
  return;
}


#line 177  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11n_rxreorder.c"
static void mwifiex_del_rx_reorder_entry(struct mwifiex_private *priv, struct mwifiex_rx_reorder_tbl *tbl)
{
  unsigned long flags;
  int start_win;
  
#line 183 
  if (tbl == (struct mwifiex_rx_reorder_tbl *)0) 
#line 184 
                                                 goto return_label; else ;
  
#line 186 
  ldv___ldv_spin_lock_87_0(& (priv->adapter)->rx_proc_lock);
  
#line 187 
  (priv->adapter)->rx_locked = (_Bool)1;
  
#line 188 
  if ((int)(priv->adapter)->rx_processing != 0) {
    
#line 189 
    ldv_spin_unlock_irqrestore_88_0(& (priv->adapter)->rx_proc_lock,flags);
    
#line 190 
    flush_workqueue((priv->adapter)->rx_workqueue);
  }
  else 
#line 192 
       ldv_spin_unlock_irqrestore_89_4(& (priv->adapter)->rx_proc_lock,flags);
  
#line 195 
  start_win = (tbl->start_win + tbl->win_size) & 4095;
  
#line 196 
  mwifiex_11n_dispatch_pkt_until_start_win(priv,tbl,start_win);
  
#line 198 
  ldv_del_timer_sync_90(& tbl->timer_context.timer);
  
#line 199 
  tbl->timer_context.timer_is_set = (unsigned char)0U;
  
#line 201 
  ldv___ldv_spin_lock_91_0(& priv->rx_reorder_tbl_lock);
  
#line 202 
  list_del(& tbl->list);
  
#line 203 
  ldv_spin_unlock_irqrestore_92_0(& priv->rx_reorder_tbl_lock,flags);
  
#line 205 
  kfree((void const *)tbl->rx_reorder_ptr);
  
#line 206 
  kfree((void const *)tbl);
  
#line 208 
  ldv___ldv_spin_lock_93_1(& (priv->adapter)->rx_proc_lock);
  
#line 209 
  (priv->adapter)->rx_locked = (_Bool)0;
  
#line 210 
  ldv_spin_unlock_irqrestore_94_3(& (priv->adapter)->rx_proc_lock,flags);
  return_label: 
#line 211 
                return;
}


#line 219  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11n_rxreorder.c"
struct mwifiex_rx_reorder_tbl *mwifiex_11n_get_rx_reorder_tbl(struct mwifiex_private *priv, int tid, u8 *ta)
{
  struct mwifiex_rx_reorder_tbl *__retres;
  struct mwifiex_rx_reorder_tbl *tbl;
  unsigned long flags;
  struct mwifiex_rx_reorder_tbl *tmp;
  int tmp_0;
  struct mwifiex_rx_reorder_tbl *tmp_1;
  
#line 224 
  ldv___ldv_spin_lock_95_0(& priv->rx_reorder_tbl_lock);
  {
    
#line 225 
    struct list_head const *__mptr = (struct list_head const *)priv->rx_reorder_tbl_ptr.next;
    
#line 225 
    tmp = (struct mwifiex_rx_reorder_tbl *)__mptr;
  }
  
#line 225 
  tbl = tmp;
  
#line 225 
  goto ldv_61795;
  ldv_61794: 
#line 226 
  ;
  
#line 226 
  tmp_0 = memcmp((void const *)(& tbl->ta),(void const *)ta,6UL);
  
#line 226 
  if (tmp_0 == 0) {
    
#line 226 
    if (tbl->tid == tid) {
      
#line 227 
      ldv_spin_unlock_irqrestore_96_3(& priv->rx_reorder_tbl_lock,flags);
      
#line 229 
      __retres = tbl;
      
#line 229 
      goto return_label;
    }
    else ;
  }
  else ;
  {
    
#line 225 
    struct list_head const *__mptr_0 = (struct list_head const *)tbl->list.next;
    
#line 225 
    tmp_1 = (struct mwifiex_rx_reorder_tbl *)__mptr_0;
  }
  
#line 225 
  tbl = tmp_1;
  ldv_61795: 
#line 227 
  ;
  
#line 225 
  if (& tbl->list != & priv->rx_reorder_tbl_ptr) 
#line 227 
                                                 goto ldv_61794; else 
                                                                   
#line 230 
                                                                   goto ldv_61796;
  ldv_61796: 
#line 231 
  ;
  
#line 232 
  ldv_spin_unlock_irqrestore_97_1(& priv->rx_reorder_tbl_lock,flags);
  
#line 234 
  __retres = (struct mwifiex_rx_reorder_tbl *)0;
  return_label: 
#line 234 
                return __retres;
}


#line 240  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11n_rxreorder.c"
void mwifiex_11n_del_rx_reorder_tbl_by_ta(struct mwifiex_private *priv, u8 *ta)
{
  struct mwifiex_rx_reorder_tbl *tbl;
  struct mwifiex_rx_reorder_tbl *tmp;
  unsigned long flags;
  struct mwifiex_rx_reorder_tbl *tmp_0;
  struct mwifiex_rx_reorder_tbl *tmp_1;
  int tmp_2;
  struct mwifiex_rx_reorder_tbl *tmp_3;
  
#line 245 
  if (ta == (u8 *)0U) 
#line 246 
                      goto return_label; else ;
  
#line 248 
  ldv___ldv_spin_lock_98_1(& priv->rx_reorder_tbl_lock);
  {
    
#line 249 
    struct list_head const *__mptr = (struct list_head const *)priv->rx_reorder_tbl_ptr.next;
    
#line 249 
    tmp_0 = (struct mwifiex_rx_reorder_tbl *)__mptr;
  }
  
#line 249 
  tbl = tmp_0;
  {
    
#line 249 
    struct list_head const *__mptr_0 = (struct list_head const *)tbl->list.next;
    
#line 249 
    tmp_1 = (struct mwifiex_rx_reorder_tbl *)__mptr_0;
  }
  
#line 250 
  tmp = tmp_1;
  
#line 249 
  goto ldv_61811;
  ldv_61810: 
#line 250 
  ;
  
#line 250 
  tmp_2 = memcmp((void const *)(& tbl->ta),(void const *)ta,6UL);
  
#line 250 
  if (tmp_2 == 0) {
    
#line 251 
    ldv_spin_unlock_irqrestore_99_2(& priv->rx_reorder_tbl_lock,flags);
    
#line 253 
    mwifiex_del_rx_reorder_entry(priv,tbl);
    
#line 254 
    ldv___ldv_spin_lock_100_0(& priv->rx_reorder_tbl_lock);
  }
  else ;
  
#line 249 
  tbl = tmp;
  {
    
#line 249 
    struct list_head const *__mptr_1 = (struct list_head const *)tmp->list.next;
    
#line 249 
    tmp_3 = (struct mwifiex_rx_reorder_tbl *)__mptr_1;
  }
  
#line 249 
  tmp = tmp_3;
  ldv_61811: 
#line 251 
  ;
  
#line 249 
  if (& tbl->list != & priv->rx_reorder_tbl_ptr) 
#line 251 
                                                 goto ldv_61810; else 
                                                                   
#line 254 
                                                                   goto ldv_61812;
  ldv_61812: 
#line 255 
  ;
  
#line 257 
  ldv_spin_unlock_irqrestore_101_2(& priv->rx_reorder_tbl_lock,flags);
  return_label: 
#line 259 
                return;
}


#line 267  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11n_rxreorder.c"
static int mwifiex_11n_find_last_seq_num(struct reorder_tmr_cnxt *ctx)
{
  int __retres;
  unsigned long flags;
  int i;
  
#line 269 
  struct mwifiex_rx_reorder_tbl *rx_reorder_tbl_ptr = ctx->ptr;
  
#line 270 
  struct mwifiex_private *priv = ctx->priv;
  
#line 274 
  ldv___ldv_spin_lock_102_3(& priv->rx_reorder_tbl_lock);
  
#line 275 
  i = rx_reorder_tbl_ptr->win_size + -1;
  
#line 275 
  goto ldv_61821;
  ldv_61820: 
#line 276 
  ;
  
#line 276 
  if (*(rx_reorder_tbl_ptr->rx_reorder_ptr + i) != (void *)0) {
    
#line 277 
    ldv_spin_unlock_irqrestore_103_3(& priv->rx_reorder_tbl_lock,flags);
    
#line 279 
    __retres = i;
    
#line 279 
    goto return_label;
  }
  else ;
  
#line 275 
  i -= 1;
  ldv_61821: 
#line 276 
  ;
  
#line 275 
  if (i >= 0) 
#line 277 
              goto ldv_61820; else 
#line 280 
                                   goto ldv_61822;
  ldv_61822: 
#line 281 
  ;
  
#line 282 
  ldv_spin_unlock_irqrestore_104_0(& priv->rx_reorder_tbl_lock,flags);
  
#line 284 
  __retres = -1;
  return_label: 
#line 284 
                return __retres;
}


#line 295  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11n_rxreorder.c"
static void mwifiex_flush_data(unsigned long context)
{
  int start_win;
  int seq_num;
  
#line 297 
  struct reorder_tmr_cnxt *ctx = (struct reorder_tmr_cnxt *)context;
  
#line 301 
  ctx->timer_is_set = (unsigned char)0U;
  
#line 302 
  seq_num = mwifiex_11n_find_last_seq_num(ctx);
  
#line 304 
  if (seq_num < 0) 
#line 305 
                   goto return_label; else ;
  
#line 307 
  if ((((ctx->priv)->adapter)->debug_mask & 1073741824U) != 0U) {
    
#line 307 
    if (((ctx->priv)->adapter)->dev != (struct device *)0) 
#line 307 
                                                           _dev_info((struct device const *)((ctx->priv)->adapter)->dev,"info: flush data %d\n",seq_num); else ;
  }
  else ;
  
#line 308 
  start_win = (((ctx->ptr)->start_win + seq_num) + 1) & 4095;
  
#line 309 
  mwifiex_11n_dispatch_pkt_until_start_win(ctx->priv,ctx->ptr,start_win);
  return_label: 
#line 310 
                return;
}


#line 324  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11n_rxreorder.c"
static void mwifiex_11n_create_rx_reorder_tbl(struct mwifiex_private *priv, u8 *ta, int tid, int win_size, int seq_num)
{
  int i;
  struct mwifiex_rx_reorder_tbl *tbl;
  struct mwifiex_rx_reorder_tbl *new_node;
  unsigned long flags;
  struct mwifiex_sta_node *node;
  u8 tmp_0;
  
#line 329 
  u16 last_seq = (unsigned short)0U;
  
#line 337 
  tbl = mwifiex_11n_get_rx_reorder_tbl(priv,tid,ta);
  
#line 338 
  if (tbl != (struct mwifiex_rx_reorder_tbl *)0) {
    
#line 339 
    mwifiex_11n_dispatch_pkt_until_start_win(priv,tbl,seq_num);
    
#line 340 
    goto return_label;
  }
  else ;
  
#line 343 
  new_node = (struct mwifiex_rx_reorder_tbl *)kzalloc_4(208UL,208U);
  
#line 344 
  if (new_node == (struct mwifiex_rx_reorder_tbl *)0) 
#line 345 
                                                      goto return_label; else ;
  
#line 347 
  INIT_LIST_HEAD(& new_node->list);
  
#line 348 
  new_node->tid = tid;
  
#line 349 
  memcpy((void *)(& new_node->ta),(void const *)ta,6UL);
  
#line 350 
  new_node->start_win = seq_num;
  
#line 351 
  new_node->init_win = seq_num;
  
#line 352 
  new_node->flags = (unsigned char)0U;
  
#line 354 
  ldv___ldv_spin_lock_105(& priv->sta_list_spinlock);
  
#line 355 
  tmp_0 = mwifiex_queuing_ra_based(priv);
  
#line 355 
  if ((unsigned int)tmp_0 != 0U) {
    
#line 356 
    if ((unsigned int)priv->bss_role == 1U) {
      
#line 357 
      node = mwifiex_get_sta_entry(priv,(u8 const *)ta);
      
#line 358 
      if (node != (struct mwifiex_sta_node *)0) 
#line 359 
                                                last_seq = node->rx_seq[tid]; else ;
    }
    else ;
  }
  else {
    
#line 362 
    node = mwifiex_get_sta_entry(priv,(u8 const *)ta);
    
#line 363 
    if (node != (struct mwifiex_sta_node *)0) 
#line 364 
                                              last_seq = node->rx_seq[tid]; else 
                                                                    
#line 366 
                                                                    last_seq = priv->rx_seq[tid];
  }
  
#line 368 
  ldv_spin_unlock_irqrestore_106(& priv->sta_list_spinlock,flags);
  
#line 370 
  if (((priv->adapter)->debug_mask & 1073741824U) != 0U) {
    
#line 370 
    if ((priv->adapter)->dev != (struct device *)0) 
#line 370 
                                                    _dev_info((struct device const *)(priv->adapter)->dev,"info: last_seq=%d start_win=%d\n",(int)last_seq,new_node->start_win); else ;
  }
  else ;
  
#line 374 
  if ((unsigned int)last_seq != 65535U && (int)last_seq >= new_node->start_win) {
    
#line 376 
    new_node->start_win = (int)last_seq + 1;
    
#line 377 
    new_node->flags = (unsigned char)((unsigned int)new_node->flags | 2U);
  }
  else ;
  
#line 380 
  new_node->win_size = win_size;
  
#line 382 
  new_node->rx_reorder_ptr = (void **)kzalloc_4((unsigned long)win_size * 8UL,208U);
  
#line 384 
  if (new_node->rx_reorder_ptr == (void **)0) {
    
#line 385 
    kfree((void const *)new_node);
    
#line 386 
    if (((priv->adapter)->debug_mask & 4U) != 0U) {
      
#line 386 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 386 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"%s: failed to alloc reorder_ptr\n","mwifiex_11n_create_rx_reorder_tbl"); else ;
    }
    else ;
    
#line 388 
    goto return_label;
  }
  else ;
  
#line 391 
  new_node->timer_context.ptr = new_node;
  
#line 392 
  new_node->timer_context.priv = priv;
  
#line 393 
  new_node->timer_context.timer_is_set = (unsigned char)0U;
  {
    struct lock_class_key __key;
    
#line 395 
    init_timer_key(& new_node->timer_context.timer,0U,"((&new_node->timer_context.timer))",& __key);
  }
  
#line 395 
  new_node->timer_context.timer.function = & mwifiex_flush_data;
  
#line 395 
  new_node->timer_context.timer.data = (unsigned long)(& new_node->timer_context);
  
#line 398 
  i = 0;
  
#line 398 
  goto ldv_61845;
  ldv_61844: 
#line 399 
  ;
  
#line 399 
  *(new_node->rx_reorder_ptr + i) = (void *)0;
  
#line 398 
  i += 1;
  ldv_61845: 
#line 399 
  ;
  
#line 398 
  if (i < win_size) 
#line 400 
                    goto ldv_61844; else 
#line 403 
                                         goto ldv_61846;
  ldv_61846: 
#line 404 
  ;
  
#line 401 
  ldv___ldv_spin_lock_107(& priv->rx_reorder_tbl_lock);
  
#line 402 
  list_add_tail(& new_node->list,& priv->rx_reorder_tbl_ptr);
  
#line 403 
  ldv_spin_unlock_irqrestore_108(& priv->rx_reorder_tbl_lock,flags);
  return_label: 
#line 404 
                return;
}


#line 407  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11n_rxreorder.c"
static void mwifiex_11n_rxreorder_timer_restart(struct mwifiex_rx_reorder_tbl *tbl)
{
  u32 min_flush_time;
  unsigned long tmp;
  
#line 411 
  if (tbl->win_size > 31) 
#line 412 
                          min_flush_time = 15U; else 
#line 414 
                                                     min_flush_time = 50U;
  
#line 416 
  tmp = msecs_to_jiffies((unsigned int)tbl->win_size * min_flush_time);
  
#line 416 
  ;
  
#line 416 
  ;
  
#line 416 
  ldv_mod_timer_109(& tbl->timer_context.timer,tmp + jiffies);
  
#line 419 
  tbl->timer_context.timer_is_set = (unsigned char)1U;
  
#line 420 
  return;
}


#line 430  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11n_rxreorder.c"
int mwifiex_cmd_11n_addba_req(struct host_cmd_ds_command *cmd, void *data_buf)
{
  int __retres;
  
#line 432 
  struct host_cmd_ds_11n_addba_req *add_ba_req = & cmd->params.add_ba_req;
  
#line 434 
  cmd->command = (unsigned short)206U;
  
#line 435 
  cmd->size = (unsigned short)22U;
  
#line 436 
  memcpy((void *)add_ba_req,(void const *)data_buf,14UL);
  
#line 438 
  __retres = 0;
  
#line 438 
  return __retres;
}


#line 449  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11n_rxreorder.c"
int mwifiex_cmd_11n_addba_rsp_gen(struct mwifiex_private *priv, struct host_cmd_ds_command *cmd, struct host_cmd_ds_11n_addba_req *cmd_addba_req)
{
  int __retres;
  struct mwifiex_sta_node *sta_ptr;
  u8 tid;
  int win_size;
  unsigned long flags;
  uint16_t block_ack_param_set;
  
#line 454 
  struct host_cmd_ds_11n_addba_rsp *add_ba_rsp = & cmd->params.add_ba_rsp;
  
#line 456 
  u32 rx_win_size = priv->add_ba_param.rx_win_size;
  
#line 462 
  if ((((unsigned long)priv->bss_role & 1UL) == 0UL && ((unsigned long)(priv->adapter)->fw_cap_info & 16384UL) != 0UL) && (priv->adapter)->is_hw_11ac_capable != 0U) {
    int tmp;
    
#line 464 
    tmp = memcmp((void const *)(& priv->cfg_bssid),(void const *)(& cmd_addba_req->peer_mac_addr),6UL);
    
#line 464 
    if (tmp != 0) {
      
#line 466 
      ldv___ldv_spin_lock_110(& priv->sta_list_spinlock);
      
#line 467 
      sta_ptr = mwifiex_get_sta_entry(priv,(u8 const *)(& cmd_addba_req->peer_mac_addr));
      
#line 469 
      if (sta_ptr == (struct mwifiex_sta_node *)0) {
        
#line 470 
        ldv_spin_unlock_irqrestore_111(& priv->sta_list_spinlock,flags);
        
#line 471 
        if (((priv->adapter)->debug_mask & 4U) != 0U) {
          
#line 471 
          if ((priv->adapter)->dev != (struct device *)0) 
#line 471 
                                                          _dev_info((struct device const *)(priv->adapter)->dev,"BA setup with unknown TDLS peer %pM!\n",(u8 *)(& cmd_addba_req->peer_mac_addr)); else ;
        }
        else ;
        
#line 474 
        __retres = -1;
        
#line 474 
        goto return_label;
      }
      else ;
      
#line 476 
      if ((unsigned int)sta_ptr->is_11ac_enabled != 0U) 
#line 477 
                                                        rx_win_size = 64U; else ;
      
#line 478 
      ldv_spin_unlock_irqrestore_112_0(& priv->sta_list_spinlock,flags);
    }
    else ;
  }
  else ;
  
#line 481 
  cmd->command = (unsigned short)207U;
  
#line 482 
  cmd->size = (unsigned short)24U;
  
#line 484 
  memcpy((void *)(& add_ba_rsp->peer_mac_addr),(void const *)(& cmd_addba_req->peer_mac_addr),6UL);
  
#line 486 
  add_ba_rsp->dialog_token = cmd_addba_req->dialog_token;
  
#line 487 
  add_ba_rsp->block_ack_tmo = cmd_addba_req->block_ack_tmo;
  
#line 488 
  add_ba_rsp->ssn = cmd_addba_req->ssn;
  
#line 490 
  block_ack_param_set = cmd_addba_req->block_ack_param_set;
  
#line 491 
  tid = (unsigned char)((unsigned int)((unsigned char)((int)block_ack_param_set >> 2)) & 15U);
  
#line 493 
  add_ba_rsp->status_code = (unsigned short)0U;
  
#line 494 
  block_ack_param_set = (unsigned short)((unsigned int)block_ack_param_set & 63U);
  
#line 497 
  if ((unsigned int)priv->add_ba_param.rx_amsdu == 0U || (unsigned int)priv->aggr_prio_tbl[(int)tid].amsdu == 255U) 
    
#line 499 
    block_ack_param_set = (unsigned short)((unsigned int)block_ack_param_set & 65534U); else ;
  
#line 500 
  block_ack_param_set = (unsigned short)(((int)((unsigned short)rx_win_size) << 6U) | (int)block_ack_param_set);
  
#line 501 
  add_ba_rsp->block_ack_param_set = block_ack_param_set;
  
#line 502 
  win_size = (int)add_ba_rsp->block_ack_param_set >> 6;
  
#line 505 
  cmd_addba_req->block_ack_param_set = block_ack_param_set;
  
#line 507 
  mwifiex_11n_create_rx_reorder_tbl(priv,(u8 *)(& cmd_addba_req->peer_mac_addr),(int)tid,win_size,(int)cmd_addba_req->ssn);
  
#line 510 
  __retres = 0;
  return_label: 
#line 510 
                return __retres;
}


#line 521  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11n_rxreorder.c"
int mwifiex_cmd_11n_delba(struct host_cmd_ds_command *cmd, void *data_buf)
{
  int __retres;
  
#line 523 
  struct host_cmd_ds_11n_delba *del_ba = & cmd->params.del_ba;
  
#line 525 
  cmd->command = (unsigned short)208U;
  
#line 526 
  cmd->size = (unsigned short)20U;
  
#line 527 
  memcpy((void *)del_ba,(void const *)data_buf,12UL);
  
#line 529 
  __retres = 0;
  
#line 529 
  return __retres;
}


#line 545  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11n_rxreorder.c"
int mwifiex_11n_rx_reorder_pkt(struct mwifiex_private *priv, u16 seq_num, u16 tid, u8 *ta, u8 pkt_type, void *payload)
{
  int __retres;
  struct mwifiex_rx_reorder_tbl *tbl;
  int prev_start_win;
  int start_win;
  int end_win;
  int win_size;
  u16 pkt_index;
  
#line 552 
  bool init_window_shift = (_Bool)0;
  
#line 553 
  int ret = 0;
  
#line 555 
  tbl = mwifiex_11n_get_rx_reorder_tbl(priv,(int)tid,ta);
  
#line 556 
  if (tbl == (struct mwifiex_rx_reorder_tbl *)0) {
    
#line 557 
    if ((unsigned int)pkt_type != 231U) 
#line 558 
                                        mwifiex_11n_dispatch_pkt(priv,payload); else ;
    
#line 559 
    __retres = ret;
    
#line 559 
    goto return_label;
  }
  else ;
  
#line 562 
  if ((unsigned int)pkt_type == 230U && (unsigned int)tbl->amsdu == 0U) {
    
#line 563 
    mwifiex_11n_dispatch_pkt(priv,payload);
    
#line 564 
    __retres = ret;
    
#line 564 
    goto return_label;
  }
  else ;
  
#line 567 
  start_win = tbl->start_win;
  
#line 568 
  prev_start_win = start_win;
  
#line 569 
  win_size = tbl->win_size;
  
#line 570 
  end_win = ((start_win + win_size) + -1) & 4095;
  
#line 571 
  if (((int)tbl->flags & 2) != 0) {
    
#line 572 
    init_window_shift = (_Bool)1;
    
#line 573 
    tbl->flags = (unsigned char)((unsigned int)tbl->flags & 253U);
  }
  else ;
  
#line 576 
  if (((int)tbl->flags & 1) != 0) {
    
#line 577 
    if (((priv->adapter)->debug_mask & 1073741824U) != 0U) {
      
#line 577 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 577 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"RXREOR_FORCE_NO_DROP when HS is activated\n"); else ;
    }
    else ;
    
#line 579 
    tbl->flags = (unsigned char)((unsigned int)tbl->flags & 254U);
  }
  else 
    
#line 580 
    if (((int)init_window_shift != 0 && (int)seq_num < start_win) && (int)seq_num >= tbl->init_win) {
      
#line 582 
      if (((priv->adapter)->debug_mask & 1073741824U) != 0U) {
        
#line 582 
        if ((priv->adapter)->dev != (struct device *)0) 
#line 582 
                                                        _dev_info((struct device const *)(priv->adapter)->dev,"Sender TID sequence number reset %d->%d for SSN %d\n",start_win,(int)seq_num,tbl->init_win); else ;
      }
      else ;
      
#line 585 
      start_win = (int)seq_num;
      
#line 585 
      tbl->start_win = start_win;
      
#line 586 
      end_win = ((start_win + win_size) + -1) & 4095;
    }
    else 
      
#line 592 
      if (start_win + 2048 > 4095) {
        
#line 593 
        if ((int)seq_num >= ((start_win + 2048) & 4095) && (int)seq_num < start_win) {
          
#line 596 
          ret = -1;
          
#line 597 
          goto done;
        }
        else ;
      }
      else 
        
#line 599 
        if ((int)seq_num < start_win || (int)seq_num >= start_win + 2048) {
          
#line 601 
          ret = -1;
          
#line 602 
          goto done;
        }
        else ;
  
#line 610 
  if ((unsigned int)pkt_type == 231U) 
#line 611 
                                      seq_num = (unsigned short)((unsigned int)((unsigned short)((unsigned int)(win_size + (int)seq_num) + 65535U)) & 4095U); else ;
  
#line 613 
  if (((end_win < start_win && (int)seq_num < start_win) && (int)seq_num > end_win) || (end_win > start_win && ((int)seq_num > end_win || (int)seq_num < start_win))) {
    
#line 617 
    end_win = (int)seq_num;
    
#line 618 
    if (((int)seq_num - win_size) + 1 >= 0) 
#line 619 
                                            start_win = (end_win - win_size) + 1; else 
                                                                    
#line 621 
                                                                    start_win = 4097 - (win_size - (int)seq_num);
    
#line 622 
    mwifiex_11n_dispatch_pkt_until_start_win(priv,tbl,start_win);
  }
  else ;
  
#line 625 
  if ((unsigned int)pkt_type != 231U) {
    
#line 626 
    if ((int)seq_num >= start_win) 
#line 627 
                                   pkt_index = (unsigned short)((int)seq_num - (int)((unsigned short)start_win)); else 
                                                                    
#line 629 
                                                                    pkt_index = (unsigned short)((unsigned int)((int)seq_num - (int)((unsigned short)start_win)) + 4096U);
    
#line 631 
    if (*(tbl->rx_reorder_ptr + (int)pkt_index) != (void *)0) {
      
#line 632 
      ret = -1;
      
#line 633 
      goto done;
    }
    else ;
    
#line 636 
    *(tbl->rx_reorder_ptr + (int)pkt_index) = payload;
  }
  else ;
  
#line 643 
  mwifiex_11n_scan_and_dispatch(priv,tbl);
  done: 
#line 645 
  ;
  
#line 646 
  if ((unsigned int)tbl->timer_context.timer_is_set == 0U || tbl->start_win != prev_start_win) 
    
#line 648 
    mwifiex_11n_rxreorder_timer_restart(tbl); else ;
  
#line 649 
  __retres = ret;
  return_label: 
#line 649 
                return __retres;
}


#line 658  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11n_rxreorder.c"
void mwifiex_del_ba_tbl(struct mwifiex_private *priv, int tid, u8 *peer_mac, u8 type, int initiator)
{
  struct mwifiex_rx_reorder_tbl *tbl;
  struct mwifiex_tx_ba_stream_tbl *ptx_tbl;
  struct mwifiex_ra_list_tbl *ra_list;
  u8 cleanup_rx_reorder_tbl;
  unsigned long flags;
  int tid_down;
  
#line 668 
  if ((unsigned int)type == 2U) 
#line 669 
                                cleanup_rx_reorder_tbl = (unsigned char)(initiator != 0); else 
                                                                    
#line 671 
                                                                    cleanup_rx_reorder_tbl = (unsigned char)(initiator == 0);
  
#line 673 
  if (((priv->adapter)->debug_mask & 32U) != 0U) {
    
#line 673 
    if ((priv->adapter)->dev != (struct device *)0) 
#line 673 
                                                    _dev_info((struct device const *)(priv->adapter)->dev,"event: DELBA: %pM tid=%d initiator=%d\n",peer_mac,tid,initiator); else ;
  }
  else ;
  
#line 676 
  if ((unsigned int)cleanup_rx_reorder_tbl != 0U) {
    
#line 677 
    tbl = mwifiex_11n_get_rx_reorder_tbl(priv,tid,peer_mac);
    
#line 679 
    if (tbl == (struct mwifiex_rx_reorder_tbl *)0) {
      
#line 680 
      if (((priv->adapter)->debug_mask & 32U) != 0U) {
        
#line 680 
        if ((priv->adapter)->dev != (struct device *)0) 
#line 680 
                                                        _dev_info((struct device const *)(priv->adapter)->dev,"event: TID, TA not found in table\n"); else ;
      }
      else ;
      
#line 682 
      goto return_label;
    }
    else ;
    
#line 684 
    mwifiex_del_rx_reorder_entry(priv,tbl);
  }
  else {
    u8 tmp;
    
#line 686 
    ptx_tbl = mwifiex_get_ba_tbl(priv,tid,peer_mac);
    
#line 687 
    if (ptx_tbl == (struct mwifiex_tx_ba_stream_tbl *)0) {
      
#line 688 
      if (((priv->adapter)->debug_mask & 32U) != 0U) {
        
#line 688 
        if ((priv->adapter)->dev != (struct device *)0) 
#line 688 
                                                        _dev_info((struct device const *)(priv->adapter)->dev,"event: TID, RA not found in table\n"); else ;
      }
      else ;
      
#line 690 
      goto return_label;
    }
    else ;
    
#line 693 
    tmp = mwifiex_wmm_downgrade_tid(priv,(unsigned int)tid);
    
#line 693 
    tid_down = (int)tmp;
    
#line 694 
    ra_list = mwifiex_wmm_get_ralist_node(priv,(unsigned char)((int)((unsigned char)tid_down)),(u8 const *)peer_mac);
    
#line 695 
    if (ra_list != (struct mwifiex_ra_list_tbl *)0) {
      
#line 696 
      ra_list->amsdu_in_ampdu = (unsigned char)0U;
      
#line 697 
      ra_list->ba_status = BA_SETUP_NONE;
    }
    else ;
    
#line 699 
    ldv___ldv_spin_lock_113(& priv->tx_ba_stream_tbl_lock);
    
#line 700 
    mwifiex_11n_delete_tx_ba_stream_tbl_entry(priv,ptx_tbl);
    
#line 701 
    ldv_spin_unlock_irqrestore_114(& priv->tx_ba_stream_tbl_lock,flags);
  }
  return_label: 
#line 703 
                return;
}


#line 711  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11n_rxreorder.c"
int mwifiex_ret_11n_addba_resp(struct mwifiex_private *priv, struct host_cmd_ds_command *resp)
{
  int __retres;
  int tid;
  int win_size;
  struct mwifiex_rx_reorder_tbl *tbl;
  uint16_t block_ack_param_set;
  
#line 714 
  struct host_cmd_ds_11n_addba_rsp *add_ba_rsp = & resp->params.add_ba_rsp;
  
#line 719 
  block_ack_param_set = add_ba_rsp->block_ack_param_set;
  
#line 721 
  tid = ((int)block_ack_param_set >> 2) & 15;
  
#line 727 
  if ((unsigned int)add_ba_rsp->status_code != 0U) {
    
#line 728 
    if (((priv->adapter)->debug_mask & 4U) != 0U) {
      
#line 728 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 728 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"ADDBA RSP: failed %pM tid=%d)\n",(u8 *)(& add_ba_rsp->peer_mac_addr),tid); else ;
    }
    else ;
    
#line 731 
    tbl = mwifiex_11n_get_rx_reorder_tbl(priv,tid,(u8 *)(& add_ba_rsp->peer_mac_addr));
    
#line 733 
    if (tbl != (struct mwifiex_rx_reorder_tbl *)0) 
#line 734 
                                                   mwifiex_del_rx_reorder_entry(priv,tbl); else ;
    
#line 736 
    __retres = 0;
    
#line 736 
    goto return_label;
  }
  else ;
  
#line 739 
  win_size = (int)block_ack_param_set >> 6;
  
#line 742 
  tbl = mwifiex_11n_get_rx_reorder_tbl(priv,tid,(u8 *)(& add_ba_rsp->peer_mac_addr));
  
#line 744 
  if (tbl != (struct mwifiex_rx_reorder_tbl *)0) 
    
#line 745 
    if ((((int)block_ack_param_set & 1) != 0 && (unsigned int)priv->add_ba_param.rx_amsdu != 0U) && (unsigned int)priv->aggr_prio_tbl[tid].amsdu != 255U) 
      
#line 748 
      tbl->amsdu = (unsigned char)1U; else 
#line 750 
                                           tbl->amsdu = (unsigned char)0U;
  else ;
  
#line 753 
  if (((priv->adapter)->debug_mask & 16U) != 0U) {
    
#line 753 
    if ((priv->adapter)->dev != (struct device *)0) 
#line 753 
                                                    _dev_info((struct device const *)(priv->adapter)->dev,"cmd: ADDBA RSP: %pM tid=%d ssn=%d win_size=%d\n",(u8 *)(& add_ba_rsp->peer_mac_addr),tid,(int)add_ba_rsp->ssn,win_size); else ;
  }
  else ;
  
#line 757 
  __retres = 0;
  return_label: 
#line 757 
                return __retres;
}


#line 764  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11n_rxreorder.c"
void mwifiex_11n_ba_stream_timeout(struct mwifiex_private *priv, struct host_cmd_ds_11n_batimeout *event)
{
  struct host_cmd_ds_11n_delba delba;
  
#line 769 
  memset((void *)(& delba),0,12UL);
  
#line 770 
  memcpy((void *)(& delba.peer_mac_addr),(void const *)(& event->peer_mac_addr),6UL);
  
#line 772 
  delba.del_ba_param_set = (unsigned short)((int)delba.del_ba_param_set | ((int)((unsigned short)event->tid) << 12U));
  
#line 774 
  delba.del_ba_param_set = (unsigned short)((int)delba.del_ba_param_set | ((int)((unsigned short)event->origninator) << 11U));
  
#line 776 
  delba.reason_code = (unsigned short)39U;
  
#line 777 
  mwifiex_send_cmd(priv,(unsigned short)208,(unsigned short)0,0U,(void *)(& delba),(_Bool)0);
  
#line 778 
  return;
}


#line 784  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11n_rxreorder.c"
void mwifiex_11n_cleanup_reorder_tbl(struct mwifiex_private *priv)
{
  struct mwifiex_rx_reorder_tbl *del_tbl_ptr;
  struct mwifiex_rx_reorder_tbl *tmp_node;
  unsigned long flags;
  struct mwifiex_rx_reorder_tbl *tmp;
  struct mwifiex_rx_reorder_tbl *tmp_0;
  struct mwifiex_rx_reorder_tbl *tmp_1;
  
#line 789 
  ldv___ldv_spin_lock_115(& priv->rx_reorder_tbl_lock);
  {
    
#line 790 
    struct list_head const *__mptr = (struct list_head const *)priv->rx_reorder_tbl_ptr.next;
    
#line 790 
    tmp = (struct mwifiex_rx_reorder_tbl *)__mptr;
  }
  
#line 790 
  del_tbl_ptr = tmp;
  {
    
#line 790 
    struct list_head const *__mptr_0 = (struct list_head const *)del_tbl_ptr->list.next;
    
#line 790 
    tmp_0 = (struct mwifiex_rx_reorder_tbl *)__mptr_0;
  }
  
#line 791 
  tmp_node = tmp_0;
  
#line 790 
  goto ldv_61930;
  ldv_61929: 
#line 791 
  ;
  
#line 792 
  ldv_spin_unlock_irqrestore_116(& priv->rx_reorder_tbl_lock,flags);
  
#line 793 
  mwifiex_del_rx_reorder_entry(priv,del_tbl_ptr);
  
#line 794 
  ldv___ldv_spin_lock_117(& priv->rx_reorder_tbl_lock);
  
#line 790 
  del_tbl_ptr = tmp_node;
  {
    
#line 790 
    struct list_head const *__mptr_1 = (struct list_head const *)tmp_node->list.next;
    
#line 790 
    tmp_1 = (struct mwifiex_rx_reorder_tbl *)__mptr_1;
  }
  
#line 790 
  tmp_node = tmp_1;
  ldv_61930: 
#line 792 
  ;
  
#line 790 
  if (& del_tbl_ptr->list != & priv->rx_reorder_tbl_ptr) 
#line 792 
                                                         goto ldv_61929; else 
                                                                    
#line 795 
                                                                    goto ldv_61931;
  ldv_61931: 
#line 796 
  ;
  
#line 796 
  INIT_LIST_HEAD(& priv->rx_reorder_tbl_ptr);
  
#line 797 
  ldv_spin_unlock_irqrestore_118(& priv->rx_reorder_tbl_lock,flags);
  
#line 799 
  mwifiex_reset_11n_rx_seq_num(priv);
  
#line 800 
  return;
}


#line 805  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11n_rxreorder.c"
void mwifiex_update_rxreor_flags(struct mwifiex_adapter *adapter, u8 flags)
{
  struct mwifiex_private *priv;
  struct mwifiex_rx_reorder_tbl *tbl;
  unsigned long lock_flags;
  int i;
  int tmp;
  struct mwifiex_rx_reorder_tbl *tmp_0;
  struct mwifiex_rx_reorder_tbl *tmp_1;
  
#line 812 
  i = 0;
  
#line 812 
  goto ldv_61949;
  ldv_61948: 
#line 813 
  ;
  
#line 813 
  priv = adapter->priv[i];
  
#line 814 
  if (priv == (struct mwifiex_private *)0) 
#line 815 
                                           goto ldv_61940; else ;
  
#line 817 
  ldv___ldv_spin_lock_119(& priv->rx_reorder_tbl_lock);
  
#line 818 
  tmp = list_empty((struct list_head const *)(& priv->rx_reorder_tbl_ptr));
  
#line 818 
  if (tmp != 0) {
    
#line 819 
    ldv_spin_unlock_irqrestore_120(& priv->rx_reorder_tbl_lock,lock_flags);
    
#line 821 
    goto ldv_61940;
  }
  else ;
  {
    
#line 824 
    struct list_head const *__mptr = (struct list_head const *)priv->rx_reorder_tbl_ptr.next;
    
#line 824 
    tmp_0 = (struct mwifiex_rx_reorder_tbl *)__mptr;
  }
  
#line 824 
  tbl = tmp_0;
  
#line 824 
  goto ldv_61946;
  ldv_61945: 
#line 825 
  ;
  
#line 825 
  tbl->flags = flags;
  {
    
#line 824 
    struct list_head const *__mptr_0 = (struct list_head const *)tbl->list.next;
    
#line 824 
    tmp_1 = (struct mwifiex_rx_reorder_tbl *)__mptr_0;
  }
  
#line 824 
  tbl = tmp_1;
  ldv_61946: 
#line 826 
  ;
  
#line 824 
  if (& tbl->list != & priv->rx_reorder_tbl_ptr) 
#line 826 
                                                 goto ldv_61945; else 
                                                                   
#line 829 
                                                                   goto ldv_61947;
  ldv_61947: 
#line 830 
  ;
  
#line 826 
  ldv_spin_unlock_irqrestore_121_0(& priv->rx_reorder_tbl_lock,lock_flags);
  ldv_61940: 
#line 827 
  ;
  
#line 812 
  i += 1;
  ldv_61949: 
#line 813 
  ;
  
#line 812 
  if ((int)adapter->priv_num > i) 
#line 814 
                                  goto ldv_61948; else 
#line 817 
                                                       goto ldv_61950;
  ldv_61950: 
#line 818 
  ;
  
#line 829 
  return;
}


#line 834  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11n_rxreorder.c"
static void mwifiex_update_ampdu_rxwinsize(struct mwifiex_adapter *adapter, bool coex_flag)
{
  u8 i;
  u32 rx_win_size;
  struct mwifiex_private *priv;
  {
    
#line 841 
    struct _ddebug descriptor = {.modname = "mwifiex", .function = "mwifiex_update_ampdu_rxwinsize", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11n_rxreorder.c", .format = "Update rxwinsize %d\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))841U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 841 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 841 
                                                        __dynamic_dev_dbg(& descriptor,(struct device const *)adapter->dev,"Update rxwinsize %d\n",(int)coex_flag); else ;
  }
  
#line 843 
  i = (unsigned char)0U;
  
#line 843 
  goto ldv_61965;
  ldv_61964: 
#line 844 
  ;
  
#line 844 
  if (adapter->priv[(int)i] == (struct mwifiex_private *)0) 
#line 845 
                                                            goto ldv_61960; else ;
  
#line 846 
  priv = adapter->priv[(int)i];
  
#line 847 
  rx_win_size = priv->add_ba_param.rx_win_size;
  
#line 848 
  if ((int)coex_flag != 0) {
    
#line 849 
    if ((unsigned int)priv->bss_type == 0U) 
#line 850 
                                            priv->add_ba_param.rx_win_size = 16U; else ;
    
#line 852 
    if ((unsigned int)priv->bss_type == 2U) 
#line 853 
                                            priv->add_ba_param.rx_win_size = 16U; else ;
    
#line 855 
    if ((unsigned int)priv->bss_type == 1U) 
#line 856 
                                            priv->add_ba_param.rx_win_size = 16U; else ;
  }
  else {
    
#line 859 
    if ((unsigned int)priv->bss_type == 0U) 
#line 860 
                                            priv->add_ba_param.rx_win_size = 64U; else ;
    
#line 862 
    if ((unsigned int)priv->bss_type == 2U) 
#line 863 
                                            priv->add_ba_param.rx_win_size = 64U; else ;
    
#line 865 
    if ((unsigned int)priv->bss_type == 1U) 
#line 866 
                                            priv->add_ba_param.rx_win_size = 16U; else ;
  }
  
#line 870 
  if ((unsigned int)adapter->coex_win_size != 0U && (unsigned int)adapter->coex_rx_win_size != 0U) 
    
#line 871 
    priv->add_ba_param.rx_win_size = (unsigned int)adapter->coex_rx_win_size; else ;
  
#line 874 
  if (priv->add_ba_param.rx_win_size != rx_win_size) {
    
#line 875 
    if ((unsigned int)priv->media_connected == 0U) 
#line 876 
                                                   goto ldv_61960; else ;
    
#line 877 
    i = (unsigned char)0U;
    
#line 877 
    goto ldv_61962;
    ldv_61961: 
#line 878 
    ;
    
#line 878 
    mwifiex_11n_delba(priv,(int)i);
    
#line 877 
    i = (u8)((int)i + 1);
    ldv_61962: 
#line 878 
    ;
    
#line 877 
    if ((unsigned int)i <= 7U) 
#line 879 
                               goto ldv_61961; else 
#line 882 
                                                    goto ldv_61963;
    ldv_61963: 
#line 883 
    ;
  }
  else ;
  ldv_61960: 
#line 885 
  ;
  
#line 843 
  i = (u8)((int)i + 1);
  ldv_61965: 
#line 844 
  ;
  
#line 843 
  if ((int)adapter->priv_num > (int)i) 
#line 845 
                                       goto ldv_61964; else 
#line 848 
                                                            goto ldv_61966;
  ldv_61966: 
#line 849 
  ;
  
#line 850 
  return;
}


#line 885  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11n_rxreorder.c"
void mwifiex_coex_ampdu_rxwinsize(struct mwifiex_adapter *adapter)
{
  u8 i;
  struct mwifiex_private *priv;
  
#line 889 
  u8 count = (unsigned char)0U;
  
#line 891 
  i = (unsigned char)0U;
  
#line 891 
  goto ldv_61975;
  ldv_61974: 
#line 892 
  ;
  
#line 892 
  if (adapter->priv[(int)i] != (struct mwifiex_private *)0) {
    
#line 893 
    priv = adapter->priv[(int)i];
    
#line 894 
    if (((unsigned long)priv->bss_role & 1UL) == 0UL) {
      
#line 895 
      if ((unsigned int)priv->media_connected != 0U) 
#line 896 
                                                     count = (u8)((int)count + 1); else ;
    }
    else ;
    
#line 898 
    if (((unsigned long)priv->bss_role & 1UL) != 0UL) {
      
#line 899 
      if ((unsigned int)priv->bss_started != 0U) 
#line 900 
                                                 count = (u8)((int)count + 1); else ;
    }
    else ;
  }
  else ;
  
#line 903 
  if ((unsigned int)count > 1U) 
#line 904 
                                goto ldv_61973; else ;
  
#line 891 
  i = (u8)((int)i + 1);
  ldv_61975: 
#line 892 
  ;
  
#line 891 
  if ((int)adapter->priv_num > (int)i) 
#line 893 
                                       goto ldv_61974; else 
#line 896 
                                                            goto ldv_61973;
  ldv_61973: 
#line 897 
  ;
  
#line 906 
  if ((unsigned int)count > 1U) 
#line 907 
                                mwifiex_update_ampdu_rxwinsize(adapter,(_Bool)1); else 
                                                                    
#line 909 
                                                                    mwifiex_update_ampdu_rxwinsize(adapter,(_Bool)0);
  
#line 910 
  return;
}


#line 436  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_11n_rxreorder.c.aux"
static void *kzalloc_4(size_t size, gfp_t flags)
{
  void *tmp;
  
#line 439 
  tmp = ldv_kzalloc(size,flags);
  
#line 439 
  return tmp;
}


#line 791  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_11n_rxreorder.c.aux"
static void ldv___ldv_spin_lock_78_4(spinlock_t *ldv_func_arg1)
{
  
#line 795 
  ldv_spin_model_lock((char *)"rx_pkt_lock_of_mwifiex_private");
  
#line 797 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 798 
  return;
}


#line 801  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_11n_rxreorder.c.aux"
static void ldv_spin_unlock_irqrestore_79_4(spinlock_t *lock, unsigned long flags)
{
  
#line 805 
  ldv_spin_model_unlock((char *)"rx_pkt_lock_of_mwifiex_private");
  
#line 807 
  spin_unlock_irqrestore_5(lock,flags);
  
#line 808 
  return;
}


#line 811  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_11n_rxreorder.c.aux"
static void ldv___ldv_spin_lock_80_3(spinlock_t *ldv_func_arg1)
{
  
#line 815 
  ldv_spin_model_lock((char *)"rx_pkt_lock_of_mwifiex_private");
  
#line 817 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 818 
  return;
}


#line 821  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_11n_rxreorder.c.aux"
static void ldv_spin_unlock_irqrestore_81_4(spinlock_t *lock, unsigned long flags)
{
  
#line 825 
  ldv_spin_model_unlock((char *)"rx_pkt_lock_of_mwifiex_private");
  
#line 827 
  spin_unlock_irqrestore_5(lock,flags);
  
#line 828 
  return;
}


#line 831  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_11n_rxreorder.c.aux"
static void ldv___ldv_spin_lock_82_4(spinlock_t *ldv_func_arg1)
{
  
#line 835 
  ldv_spin_model_lock((char *)"rx_pkt_lock_of_mwifiex_private");
  
#line 837 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 838 
  return;
}


#line 841  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_11n_rxreorder.c.aux"
static void ldv_spin_unlock_irqrestore_83_4(spinlock_t *lock, unsigned long flags)
{
  
#line 845 
  ldv_spin_model_unlock((char *)"rx_pkt_lock_of_mwifiex_private");
  
#line 847 
  spin_unlock_irqrestore_5(lock,flags);
  
#line 848 
  return;
}


#line 851  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_11n_rxreorder.c.aux"
static void ldv_spin_unlock_irqrestore_84_0(spinlock_t *lock, unsigned long flags)
{
  
#line 855 
  ldv_spin_model_unlock((char *)"rx_pkt_lock_of_mwifiex_private");
  
#line 857 
  spin_unlock_irqrestore_5(lock,flags);
  
#line 858 
  return;
}


#line 861  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_11n_rxreorder.c.aux"
static void ldv___ldv_spin_lock_85(spinlock_t *ldv_func_arg1)
{
  
#line 865 
  ldv_spin_model_lock((char *)"rx_pkt_lock_of_mwifiex_private");
  
#line 867 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 868 
  return;
}


#line 871  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_11n_rxreorder.c.aux"
static void ldv_spin_unlock_irqrestore_86_0(spinlock_t *lock, unsigned long flags)
{
  
#line 875 
  ldv_spin_model_unlock((char *)"rx_pkt_lock_of_mwifiex_private");
  
#line 877 
  spin_unlock_irqrestore_5(lock,flags);
  
#line 878 
  return;
}


#line 881  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_11n_rxreorder.c.aux"
static void ldv___ldv_spin_lock_87_0(spinlock_t *ldv_func_arg1)
{
  
#line 885 
  ldv_spin_model_lock((char *)"rx_proc_lock_of_mwifiex_adapter");
  
#line 887 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 888 
  return;
}


#line 891  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_11n_rxreorder.c.aux"
static void ldv_spin_unlock_irqrestore_88_0(spinlock_t *lock, unsigned long flags)
{
  
#line 895 
  ldv_spin_model_unlock((char *)"rx_proc_lock_of_mwifiex_adapter");
  
#line 897 
  spin_unlock_irqrestore_5(lock,flags);
  
#line 898 
  return;
}


#line 901  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_11n_rxreorder.c.aux"
static void ldv_spin_unlock_irqrestore_89_4(spinlock_t *lock, unsigned long flags)
{
  
#line 905 
  ldv_spin_model_unlock((char *)"rx_proc_lock_of_mwifiex_adapter");
  
#line 907 
  spin_unlock_irqrestore_5(lock,flags);
  
#line 908 
  return;
}


#line 911  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_11n_rxreorder.c.aux"
static int ldv_del_timer_sync_90(struct timer_list *ldv_func_arg1)
{
  int tmp;
  
#line 915 
  tmp = ldv_emg_del_timer_sync(ldv_func_arg1);
  
#line 915 
  return tmp;
}


#line 919  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_11n_rxreorder.c.aux"
static void ldv___ldv_spin_lock_91_0(spinlock_t *ldv_func_arg1)
{
  
#line 923 
  ldv_spin_model_lock((char *)"rx_reorder_tbl_lock_of_mwifiex_private");
  
#line 925 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 926 
  return;
}


#line 929  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_11n_rxreorder.c.aux"
static void ldv_spin_unlock_irqrestore_92_0(spinlock_t *lock, unsigned long flags)
{
  
#line 933 
  ldv_spin_model_unlock((char *)"rx_reorder_tbl_lock_of_mwifiex_private");
  
#line 935 
  spin_unlock_irqrestore_5(lock,flags);
  
#line 936 
  return;
}


#line 939  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_11n_rxreorder.c.aux"
static void ldv___ldv_spin_lock_93_1(spinlock_t *ldv_func_arg1)
{
  
#line 943 
  ldv_spin_model_lock((char *)"rx_proc_lock_of_mwifiex_adapter");
  
#line 945 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 946 
  return;
}


#line 949  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_11n_rxreorder.c.aux"
static void ldv_spin_unlock_irqrestore_94_3(spinlock_t *lock, unsigned long flags)
{
  
#line 953 
  ldv_spin_model_unlock((char *)"rx_proc_lock_of_mwifiex_adapter");
  
#line 955 
  spin_unlock_irqrestore_5(lock,flags);
  
#line 956 
  return;
}


#line 959  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_11n_rxreorder.c.aux"
static void ldv___ldv_spin_lock_95_0(spinlock_t *ldv_func_arg1)
{
  
#line 963 
  ldv_spin_model_lock((char *)"rx_reorder_tbl_lock_of_mwifiex_private");
  
#line 965 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 966 
  return;
}


#line 969  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_11n_rxreorder.c.aux"
static void ldv_spin_unlock_irqrestore_96_3(spinlock_t *lock, unsigned long flags)
{
  
#line 973 
  ldv_spin_model_unlock((char *)"rx_reorder_tbl_lock_of_mwifiex_private");
  
#line 975 
  spin_unlock_irqrestore_5(lock,flags);
  
#line 976 
  return;
}


#line 979  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_11n_rxreorder.c.aux"
static void ldv_spin_unlock_irqrestore_97_1(spinlock_t *lock, unsigned long flags)
{
  
#line 983 
  ldv_spin_model_unlock((char *)"rx_reorder_tbl_lock_of_mwifiex_private");
  
#line 985 
  spin_unlock_irqrestore_5(lock,flags);
  
#line 986 
  return;
}


#line 989  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_11n_rxreorder.c.aux"
static void ldv___ldv_spin_lock_98_1(spinlock_t *ldv_func_arg1)
{
  
#line 993 
  ldv_spin_model_lock((char *)"rx_reorder_tbl_lock_of_mwifiex_private");
  
#line 995 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 996 
  return;
}


#line 999  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_11n_rxreorder.c.aux"
static void ldv_spin_unlock_irqrestore_99_2(spinlock_t *lock, unsigned long flags)
{
  
#line 1003 
  ldv_spin_model_unlock((char *)"rx_reorder_tbl_lock_of_mwifiex_private");
  
#line 1005 
  spin_unlock_irqrestore_5(lock,flags);
  
#line 1006 
  return;
}


#line 1009  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_11n_rxreorder.c.aux"
static void ldv___ldv_spin_lock_100_0(spinlock_t *ldv_func_arg1)
{
  
#line 1013 
  ldv_spin_model_lock((char *)"rx_reorder_tbl_lock_of_mwifiex_private");
  
#line 1015 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 1016 
  return;
}


#line 1019  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_11n_rxreorder.c.aux"
static void ldv_spin_unlock_irqrestore_101_2(spinlock_t *lock, unsigned long flags)
{
  
#line 1023 
  ldv_spin_model_unlock((char *)"rx_reorder_tbl_lock_of_mwifiex_private");
  
#line 1025 
  spin_unlock_irqrestore_5(lock,flags);
  
#line 1026 
  return;
}


#line 1029  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_11n_rxreorder.c.aux"
static void ldv___ldv_spin_lock_102_3(spinlock_t *ldv_func_arg1)
{
  
#line 1033 
  ldv_spin_model_lock((char *)"rx_reorder_tbl_lock_of_mwifiex_private");
  
#line 1035 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 1036 
  return;
}


#line 1039  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_11n_rxreorder.c.aux"
static void ldv_spin_unlock_irqrestore_103_3(spinlock_t *lock, unsigned long flags)
{
  
#line 1043 
  ldv_spin_model_unlock((char *)"rx_reorder_tbl_lock_of_mwifiex_private");
  
#line 1045 
  spin_unlock_irqrestore_5(lock,flags);
  
#line 1046 
  return;
}


#line 1049  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_11n_rxreorder.c.aux"
static void ldv_spin_unlock_irqrestore_104_0(spinlock_t *lock, unsigned long flags)
{
  
#line 1053 
  ldv_spin_model_unlock((char *)"rx_reorder_tbl_lock_of_mwifiex_private");
  
#line 1055 
  spin_unlock_irqrestore_5(lock,flags);
  
#line 1056 
  return;
}


#line 1059  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_11n_rxreorder.c.aux"
static void ldv___ldv_spin_lock_105(spinlock_t *ldv_func_arg1)
{
  
#line 1063 
  ldv_spin_model_lock((char *)"sta_list_spinlock_of_mwifiex_private");
  
#line 1065 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 1066 
  return;
}


#line 1069  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_11n_rxreorder.c.aux"
static void ldv_spin_unlock_irqrestore_106(spinlock_t *lock, unsigned long flags)
{
  
#line 1073 
  ldv_spin_model_unlock((char *)"sta_list_spinlock_of_mwifiex_private");
  
#line 1075 
  spin_unlock_irqrestore_5(lock,flags);
  
#line 1076 
  return;
}


#line 1079  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_11n_rxreorder.c.aux"
static void ldv___ldv_spin_lock_107(spinlock_t *ldv_func_arg1)
{
  
#line 1083 
  ldv_spin_model_lock((char *)"rx_reorder_tbl_lock_of_mwifiex_private");
  
#line 1085 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 1086 
  return;
}


#line 1089  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_11n_rxreorder.c.aux"
static void ldv_spin_unlock_irqrestore_108(spinlock_t *lock, unsigned long flags)
{
  
#line 1093 
  ldv_spin_model_unlock((char *)"rx_reorder_tbl_lock_of_mwifiex_private");
  
#line 1095 
  spin_unlock_irqrestore_5(lock,flags);
  
#line 1096 
  return;
}


#line 1099  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_11n_rxreorder.c.aux"
static int ldv_mod_timer_109(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2)
{
  int tmp;
  
#line 1103 
  tmp = ldv_emg_mod_timer(ldv_func_arg1,ldv_func_arg2);
  
#line 1103 
  return tmp;
}


#line 1107  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_11n_rxreorder.c.aux"
static void ldv___ldv_spin_lock_110(spinlock_t *ldv_func_arg1)
{
  
#line 1111 
  ldv_spin_model_lock((char *)"sta_list_spinlock_of_mwifiex_private");
  
#line 1113 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 1114 
  return;
}


#line 1117  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_11n_rxreorder.c.aux"
static void ldv_spin_unlock_irqrestore_111(spinlock_t *lock, unsigned long flags)
{
  
#line 1121 
  ldv_spin_model_unlock((char *)"sta_list_spinlock_of_mwifiex_private");
  
#line 1123 
  spin_unlock_irqrestore_5(lock,flags);
  
#line 1124 
  return;
}


#line 1127  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_11n_rxreorder.c.aux"
static void ldv_spin_unlock_irqrestore_112_0(spinlock_t *lock, unsigned long flags)
{
  
#line 1131 
  ldv_spin_model_unlock((char *)"sta_list_spinlock_of_mwifiex_private");
  
#line 1133 
  spin_unlock_irqrestore_5(lock,flags);
  
#line 1134 
  return;
}


#line 1137  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_11n_rxreorder.c.aux"
static void ldv___ldv_spin_lock_113(spinlock_t *ldv_func_arg1)
{
  
#line 1141 
  ldv_spin_model_lock((char *)"tx_ba_stream_tbl_lock_of_mwifiex_private");
  
#line 1143 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 1144 
  return;
}


#line 1147  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_11n_rxreorder.c.aux"
static void ldv_spin_unlock_irqrestore_114(spinlock_t *lock, unsigned long flags)
{
  
#line 1151 
  ldv_spin_model_unlock((char *)"tx_ba_stream_tbl_lock_of_mwifiex_private");
  
#line 1153 
  spin_unlock_irqrestore_5(lock,flags);
  
#line 1154 
  return;
}


#line 1157  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_11n_rxreorder.c.aux"
static void ldv___ldv_spin_lock_115(spinlock_t *ldv_func_arg1)
{
  
#line 1161 
  ldv_spin_model_lock((char *)"rx_reorder_tbl_lock_of_mwifiex_private");
  
#line 1163 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 1164 
  return;
}


#line 1167  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_11n_rxreorder.c.aux"
static void ldv_spin_unlock_irqrestore_116(spinlock_t *lock, unsigned long flags)
{
  
#line 1171 
  ldv_spin_model_unlock((char *)"rx_reorder_tbl_lock_of_mwifiex_private");
  
#line 1173 
  spin_unlock_irqrestore_5(lock,flags);
  
#line 1174 
  return;
}


#line 1177  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_11n_rxreorder.c.aux"
static void ldv___ldv_spin_lock_117(spinlock_t *ldv_func_arg1)
{
  
#line 1181 
  ldv_spin_model_lock((char *)"rx_reorder_tbl_lock_of_mwifiex_private");
  
#line 1183 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 1184 
  return;
}


#line 1187  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_11n_rxreorder.c.aux"
static void ldv_spin_unlock_irqrestore_118(spinlock_t *lock, unsigned long flags)
{
  
#line 1191 
  ldv_spin_model_unlock((char *)"rx_reorder_tbl_lock_of_mwifiex_private");
  
#line 1193 
  spin_unlock_irqrestore_5(lock,flags);
  
#line 1194 
  return;
}


#line 1197  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_11n_rxreorder.c.aux"
static void ldv___ldv_spin_lock_119(spinlock_t *ldv_func_arg1)
{
  
#line 1201 
  ldv_spin_model_lock((char *)"rx_reorder_tbl_lock_of_mwifiex_private");
  
#line 1203 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 1204 
  return;
}


#line 1207  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_11n_rxreorder.c.aux"
static void ldv_spin_unlock_irqrestore_120(spinlock_t *lock, unsigned long flags)
{
  
#line 1211 
  ldv_spin_model_unlock((char *)"rx_reorder_tbl_lock_of_mwifiex_private");
  
#line 1213 
  spin_unlock_irqrestore_5(lock,flags);
  
#line 1214 
  return;
}


#line 1217  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_11n_rxreorder.c.aux"
static void ldv_spin_unlock_irqrestore_121_0(spinlock_t *lock, unsigned long flags)
{
  
#line 1221 
  ldv_spin_model_unlock((char *)"rx_reorder_tbl_lock_of_mwifiex_private");
  
#line 1223 
  spin_unlock_irqrestore_5(lock,flags);
  
#line 1224 
  return;
}


#line 1450  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.h"
struct ethtool_ops const mwifiex_ethtool_ops;


#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/ethtool.c"
static void mwifiex_ethtool_get_wol(struct net_device *dev, struct ethtool_wolinfo *wol)
{
  
#line 25 
  struct mwifiex_private *priv = mwifiex_netdev_get_priv(dev);
  
#line 26 
  u32 conditions = (priv->adapter)->hs_cfg.conditions;
  
#line 28 
  wol->supported = 15U;
  
#line 30 
  if (conditions == 0U) 
#line 31 
                        goto return_label; else ;
  
#line 33 
  if ((conditions & 2U) != 0U) 
#line 34 
                               wol->wolopts |= 2U; else ;
  
#line 35 
  if ((conditions & 8U) != 0U) 
#line 36 
                               wol->wolopts |= 4U; else ;
  
#line 37 
  if ((conditions & 1U) != 0U) 
#line 38 
                               wol->wolopts |= 8U; else ;
  
#line 39 
  if ((conditions & 4U) != 0U) 
#line 40 
                               wol->wolopts |= 1U; else ;
  return_label: 
#line 41 
                return;
}


#line 43  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/ethtool.c"
static int mwifiex_ethtool_set_wol(struct net_device *dev, struct ethtool_wolinfo *wol)
{
  int __retres;
  
#line 46 
  struct mwifiex_private *priv = mwifiex_netdev_get_priv(dev);
  
#line 47 
  u32 conditions = 0U;
  
#line 49 
  if ((wol->wolopts & 4294967280U) != 0U) {
    
#line 50 
    __retres = -95;
    
#line 50 
    goto return_label;
  }
  else ;
  
#line 52 
  if ((wol->wolopts & 2U) != 0U) 
#line 53 
                                 conditions |= 2U; else ;
  
#line 54 
  if ((wol->wolopts & 4U) != 0U) 
#line 55 
                                 conditions |= 8U; else ;
  
#line 56 
  if ((wol->wolopts & 8U) != 0U) 
#line 57 
                                 conditions |= 1U; else ;
  
#line 58 
  if ((wol->wolopts & 1U) != 0U) 
#line 59 
                                 conditions |= 4U; else ;
  
#line 60 
  if (wol->wolopts == 0U) 
#line 61 
                          conditions = conditions; else ;
  
#line 62 
  (priv->adapter)->hs_cfg.conditions = conditions;
  
#line 64 
  __retres = 0;
  return_label: 
#line 64 
                return __retres;
}


#line 67  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/ethtool.c"
struct ethtool_ops const mwifiex_ethtool_ops = {.get_settings = (int (*)(struct net_device *, struct ethtool_cmd *))0, .set_settings = (int (*)(struct net_device *, struct ethtool_cmd *))0, .get_drvinfo = (void (*)(struct net_device *, struct ethtool_drvinfo *))0, .get_regs_len = (int (*)(struct net_device *))0, .get_regs = (void (*)(struct net_device *, struct ethtool_regs *, void *))0, .get_wol = & mwifiex_ethtool_get_wol, .set_wol = & mwifiex_ethtool_set_wol, .get_msglevel = (u32 (*)(struct net_device *))0, .set_msglevel = (void (*)(struct net_device *, u32 ))0, .nway_reset = (int (*)(struct net_device *))0, .get_link = (u32 (*)(struct net_device *))0, .get_eeprom_len = (int (*)(struct net_device *))0, .get_eeprom = (int (*)(struct net_device *, struct ethtool_eeprom *, u8 *))0, .set_eeprom = (int (*)(struct net_device *, struct ethtool_eeprom *, u8 *))0, .get_coalesce = (int (*)(struct net_device *, struct ethtool_coalesce *))0, .set_coalesce = (int (*)(struct net_device *, struct ethtool_coalesce *))0, .get_ringparam = (void (*)(struct net_device *, struct ethtool_ringparam *))0, .set_ringparam = (int (*)(struct net_device *, struct ethtool_ringparam *))0, .get_pauseparam = (void (*)(struct net_device *, struct ethtool_pauseparam *))0, .set_pauseparam = (int (*)(struct net_device *, struct ethtool_pauseparam *))0, .self_test = (void (*)(struct net_device *, struct ethtool_test *, u64 *))0, .get_strings = (void (*)(struct net_device *, u32 , u8 *))0, .set_phys_id = (int (*)(struct net_device *, enum ethtool_phys_id_state ))0, .get_ethtool_stats = (void (*)(struct net_device *, struct ethtool_stats *, u64 *))0, .begin = (int (*)(struct net_device *))0, .complete = (void (*)(struct net_device *))0, .get_priv_flags = (u32 (*)(struct net_device *))0, .set_priv_flags = (int (*)(struct net_device *, u32 ))0, .get_sset_count = (int (*)(struct net_device *, int ))0, .get_rxnfc = (int (*)(struct net_device *, struct ethtool_rxnfc *, u32 *))0, .set_rxnfc = (int (*)(struct net_device *, struct ethtool_rxnfc *))0, .flash_device = (int (*)(struct net_device *, struct ethtool_flash *))0, .reset = (int (*)(struct net_device *, u32 *))0, .get_rxfh_key_size = (u32 (*)(struct net_device *))0, .get_rxfh_indir_size = (u32 (*)(struct net_device *))0, .get_rxfh = (int (*)(struct net_device *, u32 *, u8 *, u8 *))0, .set_rxfh = (int (*)(struct net_device *, u32 const *, u8 const *, u8 const ))0, .get_channels = (void (*)(struct net_device *, struct ethtool_channels *))0, .set_channels = (int (*)(struct net_device *, struct ethtool_channels *))0, .get_dump_flag = (int (*)(struct net_device *, struct ethtool_dump *))0, .get_dump_data = (int (*)(struct net_device *, struct ethtool_dump *, void *))0, .set_dump = (int (*)(struct net_device *, struct ethtool_dump *))0, .get_ts_info = (int (*)(struct net_device *, struct ethtool_ts_info *))0, .get_module_info = (int (*)(struct net_device *, struct ethtool_modinfo *))0, .get_module_eeprom = (int (*)(struct net_device *, struct ethtool_eeprom *, u8 *))0, .get_eee = (int (*)(struct net_device *, struct ethtool_eee *))0, .set_eee = (int (*)(struct net_device *, struct ethtool_eee *))0, .get_tunable = (int (*)(struct net_device *, struct ethtool_tunable const *, void *))0, .set_tunable = (int (*)(struct net_device *, struct ethtool_tunable const *, void const *))0};

#line 4  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_11n_aggr.c.aux"
void ldv_atomic_add(int i, atomic_t *v);


#line 49  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/atomic.h"
static void atomic_add(int i, atomic_t *v);


#line 98 
static void atomic_inc_4(atomic_t *v);


#line 114 
static void atomic_dec_3(atomic_t *v);


#line 446  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_unlock_irqrestore_6(spinlock_t *lock, unsigned long flags)
{
  {
    unsigned long __dummy;
    unsigned long __dummy2;
    
  }
  
#line 448 
  _raw_spin_unlock_irqrestore(& lock->__anonCompField_spinlock_18.rlock,flags);
  
#line 449 
  return;
}


#line 482 
static void ldv_spin_unlock_irqrestore_78(spinlock_t *lock, unsigned long flags);


#line 486 
static void ldv_spin_unlock_irqrestore_79_5(spinlock_t *lock, unsigned long flags);


#line 490 
static void ldv_spin_unlock_irqrestore_80_1(spinlock_t *lock, unsigned long flags);


#line 494 
static void ldv_spin_unlock_irqrestore_82(spinlock_t *lock, unsigned long flags);


#line 498 
static void ldv_spin_unlock_irqrestore_83_5(spinlock_t *lock, unsigned long flags);


#line 502 
static void ldv_spin_unlock_irqrestore_85_4(spinlock_t *lock, unsigned long flags);


#line 506 
static void ldv_spin_unlock_irqrestore_86_1(spinlock_t *lock, unsigned long flags);


#line 74  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_11n_aggr.c.aux"
static void ldv___ldv_spin_lock_81(spinlock_t *ldv_func_arg1);


#line 78 
static void ldv___ldv_spin_lock_84_2(spinlock_t *ldv_func_arg1);


#line 50  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ktime.h"
__inline static ktime_t ktime_set(s64 const secs, unsigned long const nsecs)
{
  ktime_t __retres;
  
#line 52 
  if ((long)(secs > 9223372035LL) != 0L) {
    
#line 53 
    ktime_t __constr_expr_10 = {.tv64 = 9223372036854775807LL};
    
#line 53 
    __retres = __constr_expr_10;
    
#line 53 
    goto return_label;
  }
  else ;
  
#line 55 
  ktime_t __constr_expr_11 = {.tv64 = secs * 1000000000LL + (long long)nsecs};
  
#line 55 
  __retres = __constr_expr_11;
  return_label: 
#line 55 
                return __retres;
}


#line 93  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ktime.h"
__inline static ktime_t timeval_to_ktime(struct timeval tv)
{
  ktime_t tmp;
  
#line 95 
  tmp = ktime_set((long long)tv.tv_sec,(unsigned long)(tv.tv_usec * 1000L));
  
#line 95 
  return tmp;
}


#line 47  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11n_aggr.c"
static int mwifiex_11n_form_amsdu_pkt(struct sk_buff *skb_aggr, struct sk_buff *skb_src, int *pad)
{
  int __retres;
  int dt_offset;
  struct tx_packet_hdr *tx_header;
  unsigned char *tmp_1;
  
#line 52 
  struct rfc_1042_hdr snap = {.llc_dsap = (unsigned char)170U, .llc_ssap = (unsigned char)170U, .llc_ctrl = (unsigned char)3U, .snap_oui = {(unsigned char)0U, (unsigned char)0U, (unsigned char)0U}, .snap_type = (unsigned short)0U};
  
#line 65 
  tx_header = (struct tx_packet_hdr *)skb_put(skb_aggr,22U);
  
#line 68 
  dt_offset = 12;
  
#line 69 
  memcpy((void *)(& tx_header->eth803_hdr),(void const *)skb_src->data,(unsigned long)dt_offset);
  
#line 72 
  snap.snap_type = ((struct ethhdr *)skb_src->data)->h_proto;
  
#line 74 
  dt_offset = (int)((unsigned int)dt_offset + 2U);
  
#line 76 
  memcpy((void *)(& tx_header->rfc1042_hdr),(void const *)(& snap),8UL);
  
#line 78 
  skb_pull(skb_src,(unsigned int)dt_offset);
  
#line 81 
  if (0 != 0) 
#line 81 
              tx_header->eth803_hdr.h_proto = (unsigned short)((unsigned int)((int)((unsigned int)((unsigned short)skb_src->len) + 8U) << 8) | (((unsigned int)((unsigned short)skb_src->len) + 8U) >> 8)); else 
                                                                    
#line 81 
                                                                    tx_header->eth803_hdr.h_proto = __fswab16((unsigned short)((int)((unsigned int)((unsigned short)skb_src->len) + 8U)));
  
#line 84 
  ;
  
#line 84 
  ;
  
#line 84 
  tmp_1 = skb_put(skb_aggr,skb_src->len);
  
#line 84 
  memcpy((void *)tmp_1,(void const *)skb_src->data,(unsigned long)skb_src->len);
  
#line 87 
  *pad = (int)(- skb_aggr->tail) & 3;
  
#line 89 
  __retres = (int)(skb_aggr->len + (unsigned int)*pad);
  
#line 89 
  return __retres;
}


#line 99  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11n_aggr.c"
static void mwifiex_11n_form_amsdu_txpd(struct mwifiex_private *priv, struct sk_buff *skb)
{
  struct txpd *local_tx_pd;
  unsigned int pad;
  int tmp_0;
  
#line 103 
  struct mwifiex_txinfo *tx_info = MWIFIEX_SKB_TXCB(skb);
  
#line 105 
  if ((unsigned int)(priv->adapter)->iface_type == 2U) 
#line 105 
                                                       tmp_0 = 0; else 
                                                                    
#line 105 
                                                                    tmp_0 = 4;
  
#line 105 
  int headroom = tmp_0;
  
#line 108 
  pad = (unsigned int)((long)((void *)skb->data + ((unsigned long)(- headroom) + 18446744073709551596U))) & 63U;
  
#line 110 
  skb_push(skb,pad);
  
#line 112 
  skb_push(skb,20U);
  
#line 114 
  local_tx_pd = (struct txpd *)skb->data;
  
#line 115 
  memset((void *)local_tx_pd,0,20UL);
  
#line 118 
  local_tx_pd->priority = (unsigned char)skb->priority;
  
#line 119 
  local_tx_pd->pkt_delay_2ms = mwifiex_wmm_compute_drv_pkt_delay(priv,(struct sk_buff const *)skb);
  
#line 121 
  local_tx_pd->bss_num = priv->bss_num;
  
#line 122 
  local_tx_pd->bss_type = priv->bss_type;
  
#line 124 
  local_tx_pd->tx_pkt_offset = (unsigned short)((unsigned int)((unsigned short)pad) + 20U);
  
#line 126 
  local_tx_pd->tx_pkt_type = (unsigned short)230U;
  
#line 127 
  local_tx_pd->tx_pkt_length = (unsigned short)((unsigned int)((int)((unsigned short)skb->len) - (int)((unsigned short)pad)) + 65516U);
  
#line 131 
  if (((unsigned long)tx_info->flags & 4UL) != 0UL) 
#line 132 
                                                    local_tx_pd->flags = (unsigned char)((unsigned int)local_tx_pd->flags | 16U); else ;
  
#line 134 
  if (local_tx_pd->tx_control == 0U) 
#line 136 
                                     local_tx_pd->tx_control = priv->pkt_tx_ctrl; else ;
  
#line 138 
  if (((unsigned long)priv->bss_role & 1UL) == 0UL && (unsigned int)(priv->adapter)->pps_uapsd_mode != 0U) {
    u8 tmp_1;
    
#line 140 
    tmp_1 = mwifiex_check_last_packet_indication(priv);
    
#line 140 
    if ((unsigned int)tmp_1 == 1U) {
      
#line 141 
      (priv->adapter)->tx_lock_flag = (unsigned char)1U;
      
#line 142 
      local_tx_pd->flags = (unsigned char)8U;
    }
    else ;
  }
  else ;
  
#line 144 
  return;
}


#line 165  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11n_aggr.c"
int mwifiex_11n_aggregate_pkt(struct mwifiex_private *priv, struct mwifiex_ra_list_tbl *pra_list, int ptrindex, unsigned long ra_list_flags)
{
  int __retres;
  struct sk_buff *skb_aggr;
  struct sk_buff *skb_src;
  struct mwifiex_txinfo *tx_info_aggr;
  struct mwifiex_txinfo *tx_info_src;
  int ret;
  struct mwifiex_tx_param tx_param;
  struct timeval tv;
  int tmp;
  int tmp_1;
  int tmp_2;
  int tmp_3;
  
#line 170 
  struct mwifiex_adapter *adapter = priv->adapter;
  
#line 173 
  int pad = 0;
  
#line 173 
  int aggr_num = 0;
  
#line 175 
  struct txpd *ptx_pd = (struct txpd *)0;
  
#line 177 
  if ((unsigned int)adapter->iface_type == 2U) 
#line 177 
                                               tmp = 0; else 
#line 177 
                                                             tmp = 4;
  
#line 177 
  int headroom = tmp;
  
#line 179 
  skb_src = skb_peek((struct sk_buff_head const *)(& pra_list->skb_head));
  
#line 180 
  if (skb_src == (struct sk_buff *)0) {
    
#line 181 
    ldv_spin_unlock_irqrestore_78(& priv->wmm.ra_list_spinlock,ra_list_flags);
    
#line 183 
    __retres = 0;
    
#line 183 
    goto return_label;
  }
  else ;
  
#line 186 
  tx_info_src = MWIFIEX_SKB_TXCB(skb_src);
  
#line 187 
  skb_aggr = (struct sk_buff *)mwifiex_alloc_dma_align_buf((int)adapter->tx_buf_size,33U);
  
#line 189 
  if (skb_aggr == (struct sk_buff *)0) {
    
#line 190 
    ldv_spin_unlock_irqrestore_79_5(& priv->wmm.ra_list_spinlock,ra_list_flags);
    
#line 192 
    __retres = -1;
    
#line 192 
    goto return_label;
  }
  else ;
  
#line 194 
  skb_reserve(skb_aggr,100);
  
#line 195 
  tx_info_aggr = MWIFIEX_SKB_TXCB(skb_aggr);
  
#line 197 
  memset((void *)tx_info_aggr,0,24UL);
  
#line 198 
  tx_info_aggr->bss_type = tx_info_src->bss_type;
  
#line 199 
  tx_info_aggr->bss_num = tx_info_src->bss_num;
  
#line 201 
  if (((unsigned long)tx_info_src->flags & 4UL) != 0UL) 
#line 202 
                                                        tx_info_aggr->flags = (unsigned char)((unsigned int)tx_info_aggr->flags | 4U); else ;
  
#line 203 
  tx_info_aggr->flags = (unsigned char)((unsigned int)tx_info_aggr->flags | 32U);
  
#line 204 
  skb_aggr->priority = skb_src->priority;
  
#line 206 
  do_gettimeofday(& tv);
  
#line 207 
  skb_aggr->__anonCompField_sk_buff_68.__anonCompField___anonunion_228_67.__anonCompField___anonstruct_229_66.tstamp = timeval_to_ktime(tv);
  ldv_61553: 
#line 208 
  ;
  
#line 211 
  tmp_1 = skb_tailroom((struct sk_buff const *)skb_aggr);
  
#line 211 
  ;
  
#line 211 
  if ((unsigned int)tmp_1 < skb_src->len + 8U) 
#line 212 
                                               goto ldv_61552; else ;
  
#line 214 
  skb_src = skb_dequeue(& pra_list->skb_head);
  
#line 215 
  pra_list->total_pkt_count = (u16)((int)pra_list->total_pkt_count - 1);
  
#line 216 
  atomic_dec_3(& priv->wmm.tx_pkts_queued);
  
#line 217 
  aggr_num += 1;
  
#line 218 
  ldv_spin_unlock_irqrestore_80_1(& priv->wmm.ra_list_spinlock,ra_list_flags);
  
#line 220 
  mwifiex_11n_form_amsdu_pkt(skb_aggr,skb_src,& pad);
  
#line 222 
  mwifiex_write_data_complete(adapter,skb_src,0,0);
  
#line 224 
  ldv___ldv_spin_lock_81(& priv->wmm.ra_list_spinlock);
  
#line 226 
  tmp_2 = mwifiex_is_ralist_valid(priv,pra_list,ptrindex);
  
#line 226 
  if (tmp_2 == 0) {
    
#line 227 
    ldv_spin_unlock_irqrestore_82(& priv->wmm.ra_list_spinlock,ra_list_flags);
    
#line 229 
    __retres = -1;
    
#line 229 
    goto return_label;
  }
  else ;
  
#line 232 
  tmp_3 = skb_tailroom((struct sk_buff const *)skb_aggr);
  
#line 232 
  ;
  
#line 232 
  if (tmp_3 < pad) {
    
#line 233 
    pad = 0;
    
#line 234 
    goto ldv_61552;
  }
  else ;
  
#line 236 
  skb_put(skb_aggr,(unsigned int)pad);
  
#line 238 
  skb_src = skb_peek((struct sk_buff_head const *)(& pra_list->skb_head));
  
#line 240 
  if (skb_src != (struct sk_buff *)0) 
#line 242 
                                      goto ldv_61553; else 
#line 245 
                                                           goto ldv_61552;
  ldv_61552: 
#line 246 
  ;
  
#line 242 
  ldv_spin_unlock_irqrestore_83_5(& priv->wmm.ra_list_spinlock,ra_list_flags);
  
#line 245 
  skb_trim(skb_aggr,skb_aggr->len - (unsigned int)pad);
  
#line 248 
  mwifiex_11n_form_amsdu_txpd(priv,skb_aggr);
  
#line 249 
  if (((unsigned long)priv->bss_role & 1UL) == 0UL) 
#line 250 
                                                    ptx_pd = (struct txpd *)skb_aggr->data; else ;
  
#line 252 
  skb_push(skb_aggr,(unsigned int)headroom);
  
#line 253 
  tx_info_aggr->aggr_num = (unsigned char)((unsigned int)((unsigned char)aggr_num) * 2U);
  
#line 254 
  if ((unsigned int)adapter->data_sent != 0U || (unsigned int)adapter->tx_lock_flag != 0U) {
    
#line 255 
    atomic_add(aggr_num * 2,& adapter->tx_queued);
    
#line 256 
    skb_queue_tail(& adapter->tx_data_q,skb_aggr);
    
#line 257 
    __retres = 0;
    
#line 257 
    goto return_label;
  }
  else ;
  
#line 260 
  if ((unsigned int)adapter->iface_type == 2U) {
    
#line 261 
    adapter->data_sent = (unsigned char)1U;
    
#line 262 
    ret = (*(adapter->if_ops.host_to_card))(adapter,(unsigned char)2,skb_aggr,(struct mwifiex_tx_param *)0);
  }
  else {
    
#line 265 
    if (skb_src != (struct sk_buff *)0) 
#line 266 
                                        tx_param.next_pkt_len = skb_src->len + 20U; else 
                                                                    
#line 269 
                                                                    tx_param.next_pkt_len = 0U;
    
#line 271 
    ret = (*(adapter->if_ops.host_to_card))(adapter,(unsigned char)0,skb_aggr,& tx_param);
  }
  
#line 274 
  switch (ret) {
    int tmp_4;
    case -16: 
#line 275 
    ;
    
#line 276 
    ldv___ldv_spin_lock_84_2(& priv->wmm.ra_list_spinlock);
    
#line 277 
    tmp_4 = mwifiex_is_ralist_valid(priv,pra_list,ptrindex);
    
#line 277 
    if (tmp_4 == 0) {
      
#line 278 
      ldv_spin_unlock_irqrestore_85_4(& priv->wmm.ra_list_spinlock,ra_list_flags);
      
#line 280 
      mwifiex_write_data_complete(adapter,skb_aggr,1,-1);
      
#line 281 
      __retres = -1;
      
#line 281 
      goto return_label;
    }
    else ;
    
#line 283 
    if ((((unsigned long)priv->bss_role & 1UL) == 0UL && (unsigned int)adapter->pps_uapsd_mode != 0U) && (unsigned int)adapter->tx_lock_flag != 0U) {
      
#line 285 
      (priv->adapter)->tx_lock_flag = (unsigned char)0U;
      
#line 286 
      if (ptx_pd != (struct txpd *)0) 
#line 287 
                                      ptx_pd->flags = (unsigned char)0U; else ;
    }
    else ;
    
#line 290 
    skb_queue_tail(& pra_list->skb_head,skb_aggr);
    
#line 292 
    pra_list->total_pkt_count = (u16)((int)pra_list->total_pkt_count + 1);
    
#line 294 
    atomic_inc_4(& priv->wmm.tx_pkts_queued);
    
#line 296 
    tx_info_aggr->flags = (unsigned char)((unsigned int)tx_info_aggr->flags | 1U);
    
#line 297 
    ldv_spin_unlock_irqrestore_86_1(& priv->wmm.ra_list_spinlock,ra_list_flags);
    
#line 299 
    if ((adapter->debug_mask & 4U) != 0U) {
      
#line 299 
      if (adapter->dev != (struct device *)0) 
#line 299 
                                              _dev_info((struct device const *)adapter->dev,"data: -EBUSY is returned\n"); else ;
    }
    else ;
    
#line 300 
    goto ldv_61555;
    case -1: 
#line 301 
    ;
    
#line 302 
    if ((unsigned int)adapter->iface_type != 1U) 
#line 303 
                                                 adapter->data_sent = (unsigned char)0U; else ;
    
#line 304 
    if ((adapter->debug_mask & 4U) != 0U) {
      
#line 304 
      if (adapter->dev != (struct device *)0) 
#line 304 
                                              _dev_info((struct device const *)adapter->dev,"%s: host_to_card failed: %#x\n","mwifiex_11n_aggregate_pkt",ret); else ;
    }
    else ;
    
#line 306 
    adapter->dbg.num_tx_host_to_card_failure += 1U;
    
#line 307 
    mwifiex_write_data_complete(adapter,skb_aggr,1,ret);
    
#line 308 
    __retres = 0;
    
#line 308 
    goto return_label;
    case -115: 
#line 309 
    ;
    
#line 310 
    if ((unsigned int)adapter->iface_type != 1U) 
#line 311 
                                                 adapter->data_sent = (unsigned char)0U; else ;
    
#line 312 
    goto ldv_61555;
    case 0: 
#line 313 
    ;
    
#line 314 
    mwifiex_write_data_complete(adapter,skb_aggr,1,ret);
    
#line 315 
    goto ldv_61555;
    default: 
#line 316 
    ;
    
#line 317 
    goto ldv_61555;
  }
  ldv_61555: 
#line 319 
  ;
  
#line 319 
  if (ret != -16) 
#line 320 
                  mwifiex_rotate_priolists(priv,pra_list,ptrindex); else ;
  
#line 323 
  __retres = 0;
  return_label: 
#line 323 
                return __retres;
}


#line 99  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_11n_aggr.c.aux"
static void atomic_add(int i, atomic_t *v)
{
  
#line 102 
  ldv_atomic_add(i,v);
  
#line 103 
  return;
}


#line 120  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_11n_aggr.c.aux"
static void atomic_inc_4(atomic_t *v)
{
  
#line 123 
  ldv_atomic_inc(v);
  
#line 124 
  return;
}


#line 127  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_11n_aggr.c.aux"
static void atomic_dec_3(atomic_t *v)
{
  
#line 130 
  ldv_atomic_dec(v);
  
#line 131 
  return;
}


#line 791  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_11n_aggr.c.aux"
static void ldv_spin_unlock_irqrestore_78(spinlock_t *lock, unsigned long flags)
{
  
#line 795 
  ldv_spin_model_unlock((char *)"ra_list_spinlock_of_mwifiex_wmm_desc");
  
#line 797 
  spin_unlock_irqrestore_6(lock,flags);
  
#line 798 
  return;
}


#line 801  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_11n_aggr.c.aux"
static void ldv_spin_unlock_irqrestore_79_5(spinlock_t *lock, unsigned long flags)
{
  
#line 805 
  ldv_spin_model_unlock((char *)"ra_list_spinlock_of_mwifiex_wmm_desc");
  
#line 807 
  spin_unlock_irqrestore_6(lock,flags);
  
#line 808 
  return;
}


#line 811  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_11n_aggr.c.aux"
static void ldv_spin_unlock_irqrestore_80_1(spinlock_t *lock, unsigned long flags)
{
  
#line 815 
  ldv_spin_model_unlock((char *)"ra_list_spinlock_of_mwifiex_wmm_desc");
  
#line 817 
  spin_unlock_irqrestore_6(lock,flags);
  
#line 818 
  return;
}


#line 821  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_11n_aggr.c.aux"
static void ldv___ldv_spin_lock_81(spinlock_t *ldv_func_arg1)
{
  
#line 825 
  ldv_spin_model_lock((char *)"ra_list_spinlock_of_mwifiex_wmm_desc");
  
#line 827 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 828 
  return;
}


#line 831  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_11n_aggr.c.aux"
static void ldv_spin_unlock_irqrestore_82(spinlock_t *lock, unsigned long flags)
{
  
#line 835 
  ldv_spin_model_unlock((char *)"ra_list_spinlock_of_mwifiex_wmm_desc");
  
#line 837 
  spin_unlock_irqrestore_6(lock,flags);
  
#line 838 
  return;
}


#line 841  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_11n_aggr.c.aux"
static void ldv_spin_unlock_irqrestore_83_5(spinlock_t *lock, unsigned long flags)
{
  
#line 845 
  ldv_spin_model_unlock((char *)"ra_list_spinlock_of_mwifiex_wmm_desc");
  
#line 847 
  spin_unlock_irqrestore_6(lock,flags);
  
#line 848 
  return;
}


#line 851  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_11n_aggr.c.aux"
static void ldv___ldv_spin_lock_84_2(spinlock_t *ldv_func_arg1)
{
  
#line 855 
  ldv_spin_model_lock((char *)"ra_list_spinlock_of_mwifiex_wmm_desc");
  
#line 857 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 858 
  return;
}


#line 861  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_11n_aggr.c.aux"
static void ldv_spin_unlock_irqrestore_85_4(spinlock_t *lock, unsigned long flags)
{
  
#line 865 
  ldv_spin_model_unlock((char *)"ra_list_spinlock_of_mwifiex_wmm_desc");
  
#line 867 
  spin_unlock_irqrestore_6(lock,flags);
  
#line 868 
  return;
}


#line 871  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_11n_aggr.c.aux"
static void ldv_spin_unlock_irqrestore_86_1(spinlock_t *lock, unsigned long flags)
{
  
#line 875 
  ldv_spin_model_unlock((char *)"ra_list_spinlock_of_mwifiex_wmm_desc");
  
#line 877 
  spin_unlock_irqrestore_6(lock,flags);
  
#line 878 
  return;
}


#line 1126  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.h"
u32 mwifiex_index_to_data_rate(struct mwifiex_private *priv, u8 index, u8 ht_info);


#line 1128 
u32 mwifiex_index_to_acs_data_rate(struct mwifiex_private *priv, u8 index, u8 ht_info);


#line 1133 
u32 mwifiex_get_active_data_rates(struct mwifiex_private *priv, u8 *rates);


#line 1138 
u8 mwifiex_is_rate_auto(struct mwifiex_private *priv);


#line 1206  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.h"
__inline static u32 mwifiex_copy_rates(u8 *dest, u32 pos, u8 *src, int len)
{
  int i;
  
#line 1210 
  i = 0;
  
#line 1210 
  goto ldv_60811;
  ldv_60810: 
#line 1211 
  ;
  
#line 1211 
  if (pos > 13U) 
#line 1212 
                 goto ldv_60809; else ;
  
#line 1213 
  *(dest + pos) = *(src + i);
  
#line 1210 
  i += 1;
  
#line 1210 
  pos += 1U;
  ldv_60811: 
#line 1211 
  ;
  
#line 1210 
  if (i < len && (unsigned int)*(src + i) != 0U) 
#line 1212 
                                                 goto ldv_60810; else 
                                                                   
#line 1215 
                                                                   goto ldv_60809;
  ldv_60809: 
#line 1216 
  ;
  
#line 1216 
  return pos;
}


#line 1430 
u8 *mwifiex_11d_code_2_region(u8 code);


#line 1516 
u8 mwifiex_adjust_data_rate(struct mwifiex_private *priv, u8 rx_rate, u8 rate_info);


#line 40  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfp.c"
static u8 adhoc_rates_b[5U] = {(unsigned char)130U, (unsigned char)132U, (unsigned char)139U, (unsigned char)150U, (unsigned char)0U};

#line 42  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfp.c"
static u8 adhoc_rates_g[9U] = {(unsigned char)140U, (unsigned char)18U, (unsigned char)152U, (unsigned char)36U, (unsigned char)176U, (unsigned char)72U, (unsigned char)96U, (unsigned char)108U, (unsigned char)0U};

#line 45  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfp.c"
static u8 adhoc_rates_bg[13U] = {(unsigned char)130U, (unsigned char)132U, (unsigned char)139U, (unsigned char)150U, (unsigned char)12U, (unsigned char)18U, (unsigned char)24U, (unsigned char)36U, (unsigned char)48U, (unsigned char)72U, (unsigned char)96U, (unsigned char)108U, (unsigned char)0U};

#line 49  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfp.c"
static u8 adhoc_rates_a[9U] = {(unsigned char)140U, (unsigned char)18U, (unsigned char)152U, (unsigned char)36U, (unsigned char)176U, (unsigned char)72U, (unsigned char)96U, (unsigned char)108U, (unsigned char)0U};

#line 51  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfp.c"
static u8 supported_rates_a[9U] = {(unsigned char)12U, (unsigned char)18U, (unsigned char)24U, (unsigned char)36U, (unsigned char)176U, (unsigned char)72U, (unsigned char)96U, (unsigned char)108U, (unsigned char)0U};

#line 53  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfp.c"
static u16 mwifiex_data_rates[32U] = {(unsigned short)2U, (unsigned short)4U, (unsigned short)11U, (unsigned short)22U, (unsigned short)0U, (unsigned short)12U, (unsigned short)18U, (unsigned short)24U, (unsigned short)36U, (unsigned short)48U, (unsigned short)72U, (unsigned short)96U, (unsigned short)108U, (unsigned short)144U, (unsigned short)13U, (unsigned short)26U, (unsigned short)39U, (unsigned short)52U, (unsigned short)78U, (unsigned short)104U, (unsigned short)117U, (unsigned short)130U, (unsigned short)12U, (unsigned short)27U, (unsigned short)54U, (unsigned short)81U, (unsigned short)108U, (unsigned short)162U, (unsigned short)216U, (unsigned short)243U, (unsigned short)270U, (unsigned short)0U};

#line 60  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfp.c"
static u8 supported_rates_b[5U] = {(unsigned char)2U, (unsigned char)4U, (unsigned char)11U, (unsigned char)22U, (unsigned char)0U};

#line 62  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfp.c"
static u8 supported_rates_g[9U] = {(unsigned char)12U, (unsigned char)18U, (unsigned char)24U, (unsigned char)36U, (unsigned char)48U, (unsigned char)72U, (unsigned char)96U, (unsigned char)108U, (unsigned char)0U};

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfp.c"
static u8 supported_rates_bg[13U] = {(unsigned char)2U, (unsigned char)4U, (unsigned char)11U, (unsigned char)12U, (unsigned char)18U, (unsigned char)22U, (unsigned char)24U, (unsigned char)36U, (unsigned char)48U, (unsigned char)72U, (unsigned char)96U, (unsigned char)108U, (unsigned char)0U};

#line 69  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfp.c"
u16 region_code_index[7U] = {(unsigned short)16U, (unsigned short)32U, (unsigned short)48U, (unsigned short)50U, (unsigned short)64U, (unsigned short)65U, (unsigned short)255U};

#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfp.c"
static u8 supported_rates_n[3U] = {(unsigned char)2U, (unsigned char)4U, (unsigned char)0U};

#line 77  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfp.c"
static u16 const mcs_rate[4U][16U] = {{(unsigned short)27U, (unsigned short)54U, (unsigned short)81U, (unsigned short)108U, (unsigned short)162U, (unsigned short)216U, (unsigned short)243U, (unsigned short)270U, (unsigned short)54U, (unsigned short)108U, (unsigned short)162U, (unsigned short)216U, (unsigned short)324U, (unsigned short)432U, (unsigned short)486U, (unsigned short)540U}, {(unsigned short)30U, (unsigned short)60U, (unsigned short)90U, (unsigned short)120U, (unsigned short)180U, (unsigned short)240U, (unsigned short)270U, (unsigned short)300U, (unsigned short)60U, (unsigned short)120U, (unsigned short)180U, (unsigned short)240U, (unsigned short)360U, (unsigned short)480U, (unsigned short)540U, (unsigned short)600U}, {(unsigned short)13U, (unsigned short)26U, (unsigned short)39U, (unsigned short)52U, (unsigned short)78U, (unsigned short)104U, (unsigned short)117U, (unsigned short)130U, (unsigned short)26U, (unsigned short)52U, (unsigned short)78U, (unsigned short)104U, (unsigned short)156U, (unsigned short)208U, (unsigned short)234U, (unsigned short)260U}, {(unsigned short)14U, (unsigned short)28U, (unsigned short)43U, (unsigned short)57U, (unsigned short)86U, (unsigned short)115U, (unsigned short)130U, (unsigned short)144U, (unsigned short)28U, (unsigned short)57U, (unsigned short)86U, (unsigned short)115U, (unsigned short)173U, (unsigned short)231U, (unsigned short)260U, (unsigned short)288U}};

#line 96  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfp.c"
static u16 const ac_mcs_rate_nss1[8U][10U] = {{(unsigned short)117U, (unsigned short)234U, (unsigned short)351U, (unsigned short)468U, (unsigned short)702U, (unsigned short)936U, (unsigned short)1053U, (unsigned short)1170U, (unsigned short)1404U, (unsigned short)1560U}, {(unsigned short)130U, (unsigned short)260U, (unsigned short)390U, (unsigned short)520U, (unsigned short)780U, (unsigned short)1040U, (unsigned short)1170U, (unsigned short)1300U, (unsigned short)1560U, (unsigned short)1734U}, {(unsigned short)59U, (unsigned short)117U, (unsigned short)176U, (unsigned short)234U, (unsigned short)351U, (unsigned short)468U, (unsigned short)527U, (unsigned short)585U, (unsigned short)702U, (unsigned short)780U}, {(unsigned short)65U, (unsigned short)130U, (unsigned short)195U, (unsigned short)260U, (unsigned short)390U, (unsigned short)520U, (unsigned short)585U, (unsigned short)650U, (unsigned short)780U, (unsigned short)867U}, {(unsigned short)27U, (unsigned short)54U, (unsigned short)81U, (unsigned short)108U, (unsigned short)162U, (unsigned short)216U, (unsigned short)243U, (unsigned short)270U, (unsigned short)324U, (unsigned short)360U}, {(unsigned short)30U, (unsigned short)60U, (unsigned short)90U, (unsigned short)120U, (unsigned short)180U, (unsigned short)240U, (unsigned short)270U, (unsigned short)300U, (unsigned short)360U, (unsigned short)400U}, {(unsigned short)13U, (unsigned short)26U, (unsigned short)39U, (unsigned short)52U, (unsigned short)78U, (unsigned short)104U, (unsigned short)117U, (unsigned short)130U, (unsigned short)156U, (unsigned short)0U}, {(unsigned short)15U, (unsigned short)29U, (unsigned short)44U, (unsigned short)58U, (unsigned short)87U, (unsigned short)116U, (unsigned short)130U, (unsigned short)145U, (unsigned short)174U, (unsigned short)0U}};

#line 129  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfp.c"
static u16 const ac_mcs_rate_nss2[8U][10U] = {{(unsigned short)234U, (unsigned short)468U, (unsigned short)702U, (unsigned short)936U, (unsigned short)1404U, (unsigned short)1872U, (unsigned short)2106U, (unsigned short)2340U, (unsigned short)2808U, (unsigned short)3120U}, {(unsigned short)260U, (unsigned short)520U, (unsigned short)780U, (unsigned short)1040U, (unsigned short)1560U, (unsigned short)2080U, (unsigned short)2340U, (unsigned short)2600U, (unsigned short)3120U, (unsigned short)3467U}, {(unsigned short)117U, (unsigned short)234U, (unsigned short)351U, (unsigned short)468U, (unsigned short)702U, (unsigned short)936U, (unsigned short)1053U, (unsigned short)1170U, (unsigned short)1404U, (unsigned short)1560U}, {(unsigned short)130U, (unsigned short)260U, (unsigned short)390U, (unsigned short)520U, (unsigned short)780U, (unsigned short)1040U, (unsigned short)1170U, (unsigned short)1300U, (unsigned short)1560U, (unsigned short)1734U}, {(unsigned short)54U, (unsigned short)108U, (unsigned short)162U, (unsigned short)216U, (unsigned short)324U, (unsigned short)432U, (unsigned short)486U, (unsigned short)540U, (unsigned short)648U, (unsigned short)720U}, {(unsigned short)60U, (unsigned short)120U, (unsigned short)180U, (unsigned short)240U, (unsigned short)360U, (unsigned short)480U, (unsigned short)540U, (unsigned short)600U, (unsigned short)720U, (unsigned short)800U}, {(unsigned short)26U, (unsigned short)52U, (unsigned short)74U, (unsigned short)104U, (unsigned short)156U, (unsigned short)208U, (unsigned short)234U, (unsigned short)260U, (unsigned short)312U, (unsigned short)0U}, {(unsigned short)29U, (unsigned short)58U, (unsigned short)87U, (unsigned short)116U, (unsigned short)174U, (unsigned short)230U, (unsigned short)260U, (unsigned short)289U, (unsigned short)347U, (unsigned short)0U}};

#line 168  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfp.c"
static struct region_code_mapping region_code_mapping_t[8U] = {{.code = (unsigned char)16U, .region = {(unsigned char)'U', (unsigned char)'S', (unsigned char)' '}}, {.code = (unsigned char)32U, .region = {(unsigned char)'C', (unsigned char)'A', (unsigned char)' '}}, {.code = (unsigned char)48U, .region = {(unsigned char)'E', (unsigned char)'U', (unsigned char)' '}}, {.code = (unsigned char)49U, .region = {(unsigned char)'E', (unsigned char)'S', (unsigned char)' '}}, {.code = (unsigned char)50U, .region = {(unsigned char)'F', (unsigned char)'R', (unsigned char)' '}}, {.code = (unsigned char)64U, .region = {(unsigned char)'J', (unsigned char)'P', (unsigned char)' '}}, {.code = (unsigned char)65U, .region = {(unsigned char)'J', (unsigned char)'P', (unsigned char)' '}}, {.code = (unsigned char)80U, .region = {(unsigned char)'C', (unsigned char)'N', (unsigned char)' '}}};

#line 180  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfp.c"
u8 *mwifiex_11d_code_2_region(u8 code)
{
  u8 *__retres;
  u8 i;
  
#line 183 
  u8 size = (unsigned char)8U;
  
#line 187 
  i = (unsigned char)0U;
  
#line 187 
  goto ldv_61209;
  ldv_61208: 
#line 188 
  ;
  
#line 188 
  if ((int)region_code_mapping_t[(int)i].code == (int)code) {
    
#line 189 
    __retres = (u8 *)(& region_code_mapping_t[(int)i].region);
    
#line 189 
    goto return_label;
  }
  else ;
  
#line 187 
  i = (u8)((int)i + 1);
  ldv_61209: 
#line 188 
  ;
  
#line 187 
  if ((int)i < (int)size) 
#line 189 
                          goto ldv_61208; else 
#line 192 
                                               goto ldv_61210;
  ldv_61210: 
#line 193 
  ;
  
#line 191 
  __retres = (u8 *)0U;
  return_label: 
#line 191 
                return __retres;
}


#line 198  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfp.c"
u32 mwifiex_index_to_acs_data_rate(struct mwifiex_private *priv, u8 index, u8 ht_info)
{
  
#line 201 
  u32 rate = 0U;
  
#line 202 
  u8 mcs_index = (unsigned char)0U;
  
#line 203 
  u8 bw = (unsigned char)0U;
  
#line 204 
  u8 gi = (unsigned char)0U;
  
#line 206 
  if (((int)ht_info & 3) == 2) {
    int tmp_0;
    {
      int tmp;
      
#line 207 
      int _min1 = (int)index & 15;
      
#line 207 
      int _min2 = 9;
      
#line 207 
      if (_min1 < _min2) 
#line 207 
                         tmp = _min1; else 
#line 207 
                                           tmp = _min2;
      
#line 207 
      tmp_0 = tmp;
    }
    
#line 207 
    mcs_index = (unsigned char)tmp_0;
    
#line 210 
    bw = (unsigned char)((unsigned int)((unsigned char)((int)ht_info >> 2)) & 3U);
    
#line 213 
    gi = (unsigned char)((unsigned int)((unsigned char)((int)ht_info >> 4)) & 1U);
    
#line 215 
    if ((unsigned int)((int)index >> 4) == 1U) 
#line 216 
                                               rate = (unsigned int)ac_mcs_rate_nss2[(3 - (int)bw) * 2 + (int)gi][(int)mcs_index]; else 
                                                                    
#line 218 
                                                                    rate = (unsigned int)ac_mcs_rate_nss1[(3 - (int)bw) * 2 + (int)gi][(int)mcs_index];
  }
  else 
    
#line 219 
    if (((int)ht_info & 3) == 1) {
      
#line 221 
      bw = (unsigned char)((unsigned int)((unsigned char)((int)ht_info >> 2)) & 3U);
      
#line 224 
      gi = (unsigned char)((unsigned int)((unsigned char)((int)ht_info >> 4)) & 1U);
      
#line 226 
      if ((unsigned int)index == 32U) 
        
#line 227 
        if ((unsigned int)gi == 1U) 
#line 228 
                                    rate = 13U; else 
#line 230 
                                                     rate = 12U;
      else 
        
#line 231 
        if ((unsigned int)index <= 15U) 
          
#line 232 
          if ((unsigned int)bw <= 1U) 
#line 233 
                                      rate = (unsigned int)mcs_rate[(1 - (int)bw) * 2 + (int)gi][(int)index]; else 
                                                                    
#line 235 
                                                                    rate = (unsigned int)mwifiex_data_rates[0];
        else 
#line 237 
             rate = (unsigned int)mwifiex_data_rates[0];
    }
    else {
      
#line 241 
      if ((unsigned int)index > 31U) 
#line 242 
                                     index = (unsigned char)0U; else ;
      
#line 243 
      rate = (unsigned int)mwifiex_data_rates[(int)index];
    }
  
#line 246 
  return rate;
}


#line 252  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfp.c"
u32 mwifiex_index_to_data_rate(struct mwifiex_private *priv, u8 index, u8 ht_info)
{
  u32 __retres;
  int tmp;
  u32 rate;
  
#line 256 
  if ((unsigned int)(priv->adapter)->user_dev_mcs_support == 34U) 
#line 256 
                                                                  tmp = 16; else 
                                                                    
#line 256 
                                                                    tmp = 8;
  
#line 255 
  u32 mcs_num_supp = (unsigned int)tmp;
  
#line 259 
  if ((priv->adapter)->is_hw_11ac_capable != 0U) {
    u32 tmp_0;
    
#line 260 
    tmp_0 = mwifiex_index_to_acs_data_rate(priv,(unsigned char)((int)index),(unsigned char)((int)ht_info));
    
#line 260 
    __retres = tmp_0;
    
#line 260 
    goto return_label;
  }
  else ;
  
#line 262 
  if (((unsigned long)ht_info & 1UL) != 0UL) 
    
#line 263 
    if ((unsigned int)index == 32U) 
      
#line 264 
      if (((unsigned long)ht_info & 4UL) != 0UL) 
#line 265 
                                                 rate = 13U; else 
#line 267 
                                                                  rate = 12U;
    else 
      
#line 268 
      if ((unsigned int)index < mcs_num_supp) 
        
#line 269 
        if (((unsigned long)ht_info & 2UL) != 0UL) 
          
#line 270 
          if (((unsigned long)ht_info & 4UL) != 0UL) 
#line 272 
                                                     rate = (unsigned int)mcs_rate[1][(int)index]; else 
                                                                    
#line 275 
                                                                    rate = (unsigned int)mcs_rate[0][(int)index];
        else 
          
#line 277 
          if (((unsigned long)ht_info & 4UL) != 0UL) 
#line 279 
                                                     rate = (unsigned int)mcs_rate[3][(int)index]; else 
                                                                    
#line 282 
                                                                    rate = (unsigned int)mcs_rate[2][(int)index];
      else 
#line 285 
           rate = (unsigned int)mwifiex_data_rates[0];
  else {
    
#line 287 
    if ((unsigned int)index > 31U) 
#line 288 
                                   index = (unsigned char)0U; else ;
    
#line 289 
    rate = (unsigned int)mwifiex_data_rates[(int)index];
  }
  
#line 291 
  __retres = rate;
  return_label: 
#line 291 
                return __retres;
}


#line 299  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfp.c"
u32 mwifiex_get_active_data_rates(struct mwifiex_private *priv, u8 *rates)
{
  u32 __retres;
  
#line 301 
  if ((unsigned int)priv->media_connected == 0U) {
    u32 tmp;
    
#line 302 
    tmp = mwifiex_get_supported_rates(priv,rates);
    
#line 302 
    __retres = tmp;
    
#line 302 
    goto return_label;
  }
  else {
    u32 tmp_0;
    
#line 304 
    tmp_0 = mwifiex_copy_rates(rates,0U,(u8 *)(& priv->curr_bss_params.data_rates),(int)priv->curr_bss_params.num_of_rates);
    
#line 304 
    __retres = tmp_0;
    
#line 304 
    goto return_label;
  }
  return_label: 
#line 301 
                return __retres;
}


#line 314  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfp.c"
struct mwifiex_chan_freq_power *mwifiex_get_cfp(struct mwifiex_private *priv, u8 band, u16 channel, u32 freq)
{
  struct mwifiex_chan_freq_power *__retres;
  struct ieee80211_supported_band *sband;
  int i;
  u8 tmp;
  
#line 316 
  struct mwifiex_chan_freq_power *cfp = (struct mwifiex_chan_freq_power *)0;
  
#line 318 
  struct ieee80211_channel *ch = (struct ieee80211_channel *)0;
  
#line 321 
  if ((unsigned int)channel == 0U && freq == 0U) {
    
#line 322 
    __retres = cfp;
    
#line 322 
    goto return_label;
  }
  else ;
  
#line 324 
  tmp = mwifiex_band_to_radio_type((unsigned char)((int)band));
  
#line 324 
  if ((unsigned int)tmp == 0U) 
#line 325 
                               sband = (priv->wdev.wiphy)->bands[0]; else 
                                                                    
#line 327 
                                                                    sband = (priv->wdev.wiphy)->bands[1];
  
#line 329 
  if (sband == (struct ieee80211_supported_band *)0) {
    
#line 330 
    if (((priv->adapter)->debug_mask & 4U) != 0U) {
      
#line 330 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 330 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"%s: cannot find cfp by band %d\n","mwifiex_get_cfp",(int)band); else ;
    }
    else ;
    
#line 333 
    __retres = cfp;
    
#line 333 
    goto return_label;
  }
  else ;
  
#line 336 
  i = 0;
  
#line 336 
  goto ldv_61248;
  ldv_61247: 
#line 337 
  ;
  
#line 337 
  ch = sband->channels + i;
  
#line 339 
  if ((ch->flags & 1U) != 0U) 
#line 340 
                              goto ldv_61245; else ;
  
#line 342 
  if (freq != 0U) {
    
#line 343 
    if ((unsigned int)ch->center_freq == freq) 
#line 344 
                                               goto ldv_61246; else ;
  }
  else 
    
#line 347 
    if ((int)ch->hw_value == (int)channel || (unsigned int)channel == 255U) 
      
#line 349 
      goto ldv_61246; else ;
  ldv_61245: 
#line 350 
  ;
  
#line 336 
  i += 1;
  ldv_61248: 
#line 337 
  ;
  
#line 336 
  if (sband->n_channels > i) 
#line 338 
                             goto ldv_61247; else 
#line 341 
                                                  goto ldv_61246;
  ldv_61246: 
#line 342 
  ;
  
#line 352 
  if (sband->n_channels == i) {
    
#line 353 
    if (((priv->adapter)->debug_mask & 4U) != 0U) {
      
#line 353 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 353 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"%s: cannot find cfp by band %d\t","mwifiex_get_cfp",(int)band,(int)channel,freq); else ;
    }
    else ;
  }
  else {
    
#line 358 
    if (ch == (struct ieee80211_channel *)0) {
      
#line 359 
      __retres = cfp;
      
#line 359 
      goto return_label;
    }
    else ;
    
#line 361 
    priv->cfp.channel = ch->hw_value;
    
#line 362 
    priv->cfp.freq = (unsigned int)ch->center_freq;
    
#line 363 
    priv->cfp.max_tx_power = (unsigned short)ch->max_power;
    
#line 364 
    cfp = & priv->cfp;
  }
  
#line 367 
  __retres = cfp;
  return_label: 
#line 367 
                return __retres;
}


#line 374  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfp.c"
u8 mwifiex_is_rate_auto(struct mwifiex_private *priv)
{
  u8 __retres;
  u32 i;
  
#line 377 
  int rate_num = 0;
  
#line 379 
  i = 0U;
  
#line 379 
  goto ldv_61258;
  ldv_61257: 
#line 380 
  ;
  
#line 380 
  if ((unsigned int)priv->bitmap_rates[i] != 0U) 
#line 381 
                                                 rate_num += 1; else ;
  
#line 379 
  i += 1U;
  ldv_61258: 
#line 380 
  ;
  
#line 379 
  if (i <= 17U) 
#line 381 
                goto ldv_61257; else 
#line 384 
                                     goto ldv_61259;
  ldv_61259: 
#line 385 
  ;
  
#line 383 
  if (rate_num > 1) {
    
#line 384 
    __retres = (unsigned char)1U;
    
#line 384 
    goto return_label;
  }
  else {
    
#line 386 
    __retres = (unsigned char)0U;
    
#line 386 
    goto return_label;
  }
  return_label: 
#line 383 
                return __retres;
}


#line 392  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfp.c"
u32 mwifiex_get_rates_from_cfg80211(struct mwifiex_private *priv, u8 *rates, u8 radio_type)
{
  u32 __retres;
  u32 num_rates;
  u32 rate_mask;
  struct ieee80211_supported_band *sband;
  int i;
  u32 tmp_3;
  
#line 395 
  struct wiphy *wiphy = (priv->adapter)->wiphy;
  
#line 396 
  struct cfg80211_scan_request *request = priv->scan_request;
  
#line 401 
  if ((unsigned int)radio_type != 0U) {
    int tmp_0;
    
#line 402 
    sband = wiphy->bands[1];
    {
      bool __warned;
      
#line 403 
      int __ret_warn_once = sband == (struct ieee80211_supported_band *)0;
      
#line 403 
      if ((long)(__ret_warn_once != 0) != 0L) {
        int tmp;
        {
          
#line 403 
          int __ret_warn_on = ! __warned;
          
#line 403 
          if ((long)(__ret_warn_on != 0) != 0L) 
#line 403 
                                                warn_slowpath_null("/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfp.c",403); else ;
          
#line 403 
          tmp = (long)(__ret_warn_on != 0);
        }
        
#line 403 
        if ((long)tmp != 0L) 
#line 403 
                             __warned = (_Bool)1; else ;
      }
      else ;
      
#line 403 
      tmp_0 = (long)(__ret_warn_once != 0);
    }
    
#line 403 
    if ((long)tmp_0 != 0L) {
      
#line 404 
      __retres = 0U;
      
#line 404 
      goto return_label;
    }
    else ;
    
#line 405 
    rate_mask = request->rates[1];
  }
  else {
    int tmp_2;
    
#line 407 
    sband = wiphy->bands[0];
    {
      bool __warned_0;
      
#line 408 
      int __ret_warn_once_0 = sband == (struct ieee80211_supported_band *)0;
      
#line 408 
      if ((long)(__ret_warn_once_0 != 0) != 0L) {
        int tmp_1;
        {
          
#line 408 
          int __ret_warn_on_0 = ! __warned_0;
          
#line 408 
          if ((long)(__ret_warn_on_0 != 0) != 0L) 
#line 408 
                                                  warn_slowpath_null("/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfp.c",408); else ;
          
#line 408 
          tmp_1 = (long)(__ret_warn_on_0 != 0);
        }
        
#line 408 
        if ((long)tmp_1 != 0L) 
#line 408 
                               __warned_0 = (_Bool)1; else ;
      }
      else ;
      
#line 408 
      tmp_2 = (long)(__ret_warn_once_0 != 0);
    }
    
#line 408 
    if ((long)tmp_2 != 0L) {
      
#line 409 
      __retres = 0U;
      
#line 409 
      goto return_label;
    }
    else ;
    
#line 410 
    rate_mask = request->rates[0];
  }
  
#line 413 
  num_rates = 0U;
  
#line 414 
  i = 0;
  
#line 414 
  goto ldv_61283;
  ldv_61282: 
#line 415 
  ;
  
#line 415 
  if ((((unsigned long)rate_mask >> i) & 1UL) == 0UL) 
#line 416 
                                                      goto ldv_61281; else ;
  
#line 417 
  tmp_3 = num_rates;
  
#line 417 
  num_rates += 1U;
  
#line 417 
  *(rates + tmp_3) = (unsigned char)((unsigned int)(sband->bitrates + i)->bitrate / 5U);
  ldv_61281: 
#line 418 
  ;
  
#line 414 
  i += 1;
  ldv_61283: 
#line 415 
  ;
  
#line 414 
  if (sband->n_bitrates > i) 
#line 416 
                             goto ldv_61282; else 
#line 419 
                                                  goto ldv_61284;
  ldv_61284: 
#line 420 
  ;
  
#line 420 
  __retres = num_rates;
  return_label: 
#line 420 
                return __retres;
}


#line 427  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfp.c"
u32 mwifiex_get_supported_rates(struct mwifiex_private *priv, u8 *rates)
{
  
#line 429 
  u32 k = 0U;
  
#line 430 
  struct mwifiex_adapter *adapter = priv->adapter;
  
#line 432 
  if (priv->bss_mode == 2U || priv->bss_mode == 8U) {
    
#line 434 
    switch ((int)adapter->config_bands) {
      case 1: 
#line 435 
      ;
      
#line 436 
      if ((adapter->debug_mask & 1073741824U) != 0U) {
        
#line 436 
        if (adapter->dev != (struct device *)0) 
#line 436 
                                                _dev_info((struct device const *)adapter->dev,"info: infra band=%d\t",(int)adapter->config_bands); else ;
      }
      else ;
      
#line 439 
      k = mwifiex_copy_rates(rates,k,(u8 *)(& supported_rates_b),5);
      
#line 441 
      goto ldv_61292;
      case 2: 
#line 442 
      ;
      case 10: 
#line 443 
      ;
      
#line 444 
      if ((adapter->debug_mask & 1073741824U) != 0U) {
        
#line 444 
        if (adapter->dev != (struct device *)0) 
#line 444 
                                                _dev_info((struct device const *)adapter->dev,"info: infra band=%d\t",(int)adapter->config_bands); else ;
      }
      else ;
      
#line 447 
      k = mwifiex_copy_rates(rates,k,(u8 *)(& supported_rates_g),9);
      
#line 449 
      goto ldv_61292;
      case 3: 
#line 450 
      ;
      case 7: 
#line 451 
      ;
      case 5: 
#line 452 
      ;
      case 31: 
#line 453 
      ;
      case 63: 
#line 454 
      ;
      case 11: 
#line 455 
      ;
      
#line 456 
      if ((adapter->debug_mask & 1073741824U) != 0U) {
        
#line 456 
        if (adapter->dev != (struct device *)0) 
#line 456 
                                                _dev_info((struct device const *)adapter->dev,"info: infra band=%d\t",(int)adapter->config_bands); else ;
      }
      else ;
      
#line 459 
      k = mwifiex_copy_rates(rates,k,(u8 *)(& supported_rates_bg),13);
      
#line 461 
      goto ldv_61292;
      case 4: 
#line 462 
      ;
      case 6: 
#line 463 
      ;
      
#line 464 
      if ((adapter->debug_mask & 1073741824U) != 0U) {
        
#line 464 
        if (adapter->dev != (struct device *)0) 
#line 464 
                                                _dev_info((struct device const *)adapter->dev,"info: infra band=%d\t",(int)adapter->config_bands); else ;
      }
      else ;
      
#line 467 
      k = mwifiex_copy_rates(rates,k,(u8 *)(& supported_rates_a),9);
      
#line 469 
      goto ldv_61292;
      case 16: 
#line 470 
      ;
      case 20: 
#line 471 
      ;
      case 52: 
#line 472 
      ;
      case 30: 
#line 473 
      ;
      case 62: 
#line 474 
      ;
      
#line 475 
      if ((adapter->debug_mask & 1073741824U) != 0U) {
        
#line 475 
        if (adapter->dev != (struct device *)0) 
#line 475 
                                                _dev_info((struct device const *)adapter->dev,"info: infra band=%d\t",(int)adapter->config_bands); else ;
      }
      else ;
      
#line 478 
      k = mwifiex_copy_rates(rates,k,(u8 *)(& supported_rates_a),9);
      
#line 480 
      goto ldv_61292;
      case 8: 
#line 481 
      ;
      
#line 482 
      if ((adapter->debug_mask & 1073741824U) != 0U) {
        
#line 482 
        if (adapter->dev != (struct device *)0) 
#line 482 
                                                _dev_info((struct device const *)adapter->dev,"info: infra band=%d\t",(int)adapter->config_bands); else ;
      }
      else ;
      
#line 485 
      k = mwifiex_copy_rates(rates,k,(u8 *)(& supported_rates_n),3);
      
#line 487 
      goto ldv_61292;
    }
    ldv_61292: 
#line 489 
    ;
  }
  else {
    
#line 491 
    switch ((int)adapter->adhoc_start_band) {
      case 1: 
#line 492 
      ;
      
#line 493 
      if ((adapter->debug_mask & 1073741824U) != 0U) {
        
#line 493 
        if (adapter->dev != (struct device *)0) 
#line 493 
                                                _dev_info((struct device const *)adapter->dev,"info: adhoc B\n"); else ;
      }
      else ;
      
#line 494 
      k = mwifiex_copy_rates(rates,k,(u8 *)(& adhoc_rates_b),5);
      
#line 496 
      goto ldv_61310;
      case 2: 
#line 497 
      ;
      case 10: 
#line 498 
      ;
      
#line 499 
      if ((adapter->debug_mask & 1073741824U) != 0U) {
        
#line 499 
        if (adapter->dev != (struct device *)0) 
#line 499 
                                                _dev_info((struct device const *)adapter->dev,"info: adhoc G only\n"); else ;
      }
      else ;
      
#line 500 
      k = mwifiex_copy_rates(rates,k,(u8 *)(& adhoc_rates_g),9);
      
#line 502 
      goto ldv_61310;
      case 3: 
#line 503 
      ;
      case 11: 
#line 504 
      ;
      
#line 505 
      if ((adapter->debug_mask & 1073741824U) != 0U) {
        
#line 505 
        if (adapter->dev != (struct device *)0) 
#line 505 
                                                _dev_info((struct device const *)adapter->dev,"info: adhoc BG\n"); else ;
      }
      else ;
      
#line 506 
      k = mwifiex_copy_rates(rates,k,(u8 *)(& adhoc_rates_bg),13);
      
#line 508 
      goto ldv_61310;
      case 4: 
#line 509 
      ;
      case 20: 
#line 510 
      ;
      
#line 511 
      if ((adapter->debug_mask & 1073741824U) != 0U) {
        
#line 511 
        if (adapter->dev != (struct device *)0) 
#line 511 
                                                _dev_info((struct device const *)adapter->dev,"info: adhoc A\n"); else ;
      }
      else ;
      
#line 512 
      k = mwifiex_copy_rates(rates,k,(u8 *)(& adhoc_rates_a),9);
      
#line 514 
      goto ldv_61310;
    }
    ldv_61310: 
#line 516 
    ;
  }
  
#line 518 
  return k;
}


#line 521  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfp.c"
u8 mwifiex_adjust_data_rate(struct mwifiex_private *priv, u8 rx_rate, u8 rate_info)
{
  
#line 524 
  u8 rate_index = (unsigned char)0U;
  
#line 527 
  if (((unsigned long)rate_info & 1UL) != 0UL && ((unsigned long)rate_info & 2UL) != 0UL) 
    
#line 528 
    rate_index = (unsigned char)((unsigned int)rx_rate + 27U);
  else 
    
#line 530 
    if (((unsigned long)rate_info & 1UL) != 0UL) 
#line 531 
                                                 rate_index = (unsigned char)((unsigned int)rx_rate + 12U);
    else 
      
#line 533 
      if ((unsigned int)rx_rate > 4U) 
#line 533 
                                      rate_index = (unsigned char)((unsigned int)rx_rate + 255U); else 
                                                                    
#line 533 
                                                                    rate_index = rx_rate;
  
#line 536 
  return rate_index;
}

void __builtin_unreachable(void);


#line 1090  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.h"
void *mwifiex_process_sta_txpd(struct mwifiex_private *priv, struct sk_buff *skb);


#line 44  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_tx.c"
void *mwifiex_process_sta_txpd(struct mwifiex_private *priv, struct sk_buff *skb)
{
  void *__retres;
  struct txpd *local_tx_pd;
  unsigned int pad;
  u16 pkt_type;
  u16 pkt_offset;
  int tmp_0;
  unsigned int tmp_1;
  bool tmp_2;
  
#line 47 
  struct mwifiex_adapter *adapter = priv->adapter;
  
#line 49 
  struct mwifiex_txinfo *tx_info = MWIFIEX_SKB_TXCB(skb);
  
#line 52 
  if ((unsigned int)(priv->adapter)->iface_type == 2U) 
#line 52 
                                                       tmp_0 = 0; else 
                                                                    
#line 52 
                                                                    tmp_0 = 4;
  
#line 52 
  int hroom = tmp_0;
  
#line 55 
  if (skb->len == 0U) {
    
#line 56 
    if ((adapter->debug_mask & 4U) != 0U) {
      
#line 56 
      if (adapter->dev != (struct device *)0) 
#line 56 
                                              _dev_info((struct device const *)adapter->dev,"Tx: bad packet length: %d\n",skb->len); else ;
    }
    else ;
    
#line 58 
    tx_info->status_code = 4294967295U;
    
#line 59 
    __retres = (void *)skb->data;
    
#line 59 
    goto return_label;
  }
  else ;
  
#line 62 
  tmp_1 = skb_headroom((struct sk_buff const *)skb);
  
#line 62 
  if ((long)(tmp_1 <= 99U) != 0L) {
    
#line 64 
    ldv_inline_asm();
    
#line 62 
    ;
  }
  else ;
  
#line 64 
  tmp_2 = mwifiex_is_skb_mgmt_frame(skb);
  
#line 64 
  if ((int)tmp_2 != 0) 
#line 64 
                       pkt_type = (unsigned short)229U; else 
#line 64 
                                                             pkt_type = (unsigned short)0U;
  
#line 66 
  pad = (unsigned int)((long)((void *)skb->data + (18446744073709551596UL - (unsigned long)hroom))) & 63U;
  
#line 68 
  skb_push(skb,pad + 20U);
  
#line 70 
  local_tx_pd = (struct txpd *)skb->data;
  
#line 71 
  memset((void *)local_tx_pd,0,20UL);
  
#line 72 
  local_tx_pd->bss_num = priv->bss_num;
  
#line 73 
  local_tx_pd->bss_type = priv->bss_type;
  
#line 74 
  local_tx_pd->tx_pkt_length = (unsigned short)((unsigned int)((int)((unsigned short)skb->len) - (int)((unsigned short)pad)) + 65516U);
  
#line 78 
  local_tx_pd->priority = (unsigned char)skb->priority;
  
#line 79 
  local_tx_pd->pkt_delay_2ms = mwifiex_wmm_compute_drv_pkt_delay(priv,(struct sk_buff const *)skb);
  
#line 82 
  if (((unsigned long)tx_info->flags & 8UL) != 0UL || ((unsigned long)tx_info->flags & 16UL) != 0UL) {
    
#line 84 
    local_tx_pd->tx_token_id = tx_info->ack_frame_id;
    
#line 85 
    local_tx_pd->flags = (unsigned char)((unsigned int)local_tx_pd->flags | 32U);
  }
  else ;
  
#line 88 
  if ((unsigned int)local_tx_pd->priority <= 7U) 
#line 94 
                                                 local_tx_pd->tx_control = priv->wmm.user_pri_pkt_tx_ctrl[(int)local_tx_pd->priority]; else ;
  
#line 98 
  if ((unsigned int)adapter->pps_uapsd_mode != 0U) {
    u8 tmp_3;
    
#line 99 
    tmp_3 = mwifiex_check_last_packet_indication(priv);
    
#line 99 
    if ((unsigned int)tmp_3 != 0U) {
      
#line 100 
      adapter->tx_lock_flag = (unsigned char)1U;
      
#line 101 
      local_tx_pd->flags = (unsigned char)8U;
    }
    else ;
  }
  else ;
  
#line 106 
  if (((unsigned long)tx_info->flags & 4UL) != 0UL) 
#line 107 
                                                    local_tx_pd->flags = (unsigned char)((unsigned int)local_tx_pd->flags | 16U); else ;
  
#line 110 
  pkt_offset = (unsigned short)((unsigned int)((unsigned short)pad) + 20U);
  
#line 111 
  if ((unsigned int)pkt_type == 229U) {
    
#line 113 
    local_tx_pd->tx_pkt_type = pkt_type;
    
#line 114 
    pkt_offset = (unsigned short)((unsigned int)pkt_offset + 8U);
  }
  else ;
  
#line 117 
  local_tx_pd->tx_pkt_offset = pkt_offset;
  
#line 120 
  skb_push(skb,(unsigned int)hroom);
  
#line 122 
  if (local_tx_pd->tx_control == 0U) 
#line 124 
                                     local_tx_pd->tx_control = priv->pkt_tx_ctrl; else ;
  
#line 126 
  __retres = (void *)skb->data;
  return_label: 
#line 126 
                return __retres;
}


#line 135  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_tx.c"
int mwifiex_send_null_packet(struct mwifiex_private *priv, u8 flags)
{
  int __retres;
  struct txpd *local_tx_pd;
  struct mwifiex_tx_param tx_param;
  struct sk_buff *skb;
  int ret;
  
#line 137 
  struct mwifiex_adapter *adapter = priv->adapter;
  
#line 142 
  u32 data_len = 64U;
  
#line 145 
  struct mwifiex_txinfo *tx_info = (struct mwifiex_txinfo *)0;
  
#line 147 
  if ((int)adapter->surprise_removed != 0) {
    
#line 148 
    __retres = -1;
    
#line 148 
    goto return_label;
  }
  else ;
  
#line 150 
  if ((unsigned int)priv->media_connected == 0U) {
    
#line 151 
    __retres = -1;
    
#line 151 
    goto return_label;
  }
  else ;
  
#line 153 
  if ((unsigned int)adapter->data_sent != 0U) {
    
#line 154 
    __retres = -1;
    
#line 154 
    goto return_label;
  }
  else ;
  
#line 156 
  skb = dev_alloc_skb(data_len);
  
#line 157 
  if (skb == (struct sk_buff *)0) {
    
#line 158 
    __retres = -1;
    
#line 158 
    goto return_label;
  }
  else ;
  
#line 160 
  tx_info = MWIFIEX_SKB_TXCB(skb);
  
#line 161 
  memset((void *)tx_info,0,24UL);
  
#line 162 
  tx_info->bss_num = priv->bss_num;
  
#line 163 
  tx_info->bss_type = priv->bss_type;
  
#line 164 
  tx_info->pkt_len = data_len + 4294967272U;
  
#line 165 
  skb_reserve(skb,24);
  
#line 166 
  skb_push(skb,20U);
  
#line 168 
  local_tx_pd = (struct txpd *)skb->data;
  
#line 169 
  local_tx_pd->tx_control = priv->pkt_tx_ctrl;
  
#line 170 
  local_tx_pd->flags = flags;
  
#line 171 
  local_tx_pd->priority = (unsigned char)7U;
  
#line 172 
  local_tx_pd->tx_pkt_offset = (unsigned short)20U;
  
#line 173 
  local_tx_pd->bss_num = priv->bss_num;
  
#line 174 
  local_tx_pd->bss_type = priv->bss_type;
  
#line 176 
  if ((unsigned int)adapter->iface_type == 2U) 
#line 177 
                                               ret = (*(adapter->if_ops.host_to_card))(adapter,(unsigned char)2,skb,(struct mwifiex_tx_param *)0);
  else {
    
#line 180 
    skb_push(skb,4U);
    
#line 181 
    tx_param.next_pkt_len = 0U;
    
#line 182 
    ret = (*(adapter->if_ops.host_to_card))(adapter,(unsigned char)0,skb,& tx_param);
  }
  
#line 185 
  switch (ret) {
    case -16: 
#line 186 
    ;
    
#line 187 
    dev_kfree_skb_any(skb);
    
#line 188 
    if ((adapter->debug_mask & 4U) != 0U) {
      
#line 188 
      if (adapter->dev != (struct device *)0) 
#line 188 
                                              _dev_info((struct device const *)adapter->dev,"%s: host_to_card failed: ret=%d\n","mwifiex_send_null_packet",ret); else ;
    }
    else ;
    
#line 191 
    adapter->dbg.num_tx_host_to_card_failure += 1U;
    
#line 192 
    goto ldv_61290;
    case -1: 
#line 193 
    ;
    
#line 194 
    adapter->data_sent = (unsigned char)0U;
    
#line 195 
    dev_kfree_skb_any(skb);
    
#line 196 
    if ((adapter->debug_mask & 4U) != 0U) {
      
#line 196 
      if (adapter->dev != (struct device *)0) 
#line 196 
                                              _dev_info((struct device const *)adapter->dev,"%s: host_to_card failed: ret=%d\n","mwifiex_send_null_packet",ret); else ;
    }
    else ;
    
#line 199 
    adapter->dbg.num_tx_host_to_card_failure += 1U;
    
#line 200 
    goto ldv_61290;
    case 0: 
#line 201 
    ;
    
#line 202 
    dev_kfree_skb_any(skb);
    
#line 203 
    if ((adapter->debug_mask & 8U) != 0U) {
      
#line 203 
      if (adapter->dev != (struct device *)0) 
#line 203 
                                              _dev_info((struct device const *)adapter->dev,"data: %s: host_to_card succeeded\n","mwifiex_send_null_packet"); else ;
    }
    else ;
    
#line 206 
    adapter->tx_lock_flag = (unsigned char)1U;
    
#line 207 
    goto ldv_61290;
    case -115: 
#line 208 
    ;
    
#line 209 
    adapter->tx_lock_flag = (unsigned char)1U;
    
#line 210 
    goto ldv_61290;
    default: 
#line 211 
    ;
    
#line 212 
    goto ldv_61290;
  }
  ldv_61290: 
#line 215 
  ;
  
#line 215 
  __retres = ret;
  return_label: 
#line 215 
                return __retres;
}


#line 222  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_tx.c"
u8 mwifiex_check_last_packet_indication(struct mwifiex_private *priv)
{
  u8 __retres;
  int tmp;
  
#line 224 
  struct mwifiex_adapter *adapter = priv->adapter;
  
#line 225 
  u8 ret = (unsigned char)0U;
  
#line 227 
  if ((unsigned int)adapter->sleep_period.period == 0U) {
    
#line 228 
    __retres = ret;
    
#line 228 
    goto return_label;
  }
  else ;
  
#line 229 
  tmp = mwifiex_wmm_lists_empty(adapter);
  
#line 229 
  if (tmp != 0) 
#line 230 
                ret = (unsigned char)1U; else ;
  
#line 232 
  if (((unsigned int)ret != 0U && (unsigned int)adapter->cmd_sent == 0U) && adapter->curr_cmd == (struct cmd_ctrl_node *)0) {
    int tmp_0;
    
#line 232 
    tmp_0 = is_command_pending(adapter);
    
#line 232 
    if (tmp_0 == 0) {
      
#line 234 
      adapter->delay_null_pkt = (unsigned char)0U;
      
#line 235 
      ret = (unsigned char)1U;
    }
    else 
#line 232 
         goto _LAND;
  }
  else {
    _LAND: {
             
#line 237 
             ret = (unsigned char)0U;
             
#line 238 
             adapter->delay_null_pkt = (unsigned char)1U;
           }
  }
  
#line 240 
  __retres = ret;
  return_label: 
#line 240 
                return __retres;
}


#line 121  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/string.h"
void *kmemdup(void const *, size_t, gfp_t);


#line 4584  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/cfg80211.h"
void cfg80211_disconnected(struct net_device *, u16, u8 const *, size_t, bool, gfp_t);


#line 1100  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.h"
int mwifiex_associate(struct mwifiex_private *priv, struct mwifiex_bssdescriptor *bss_desc);


#line 1102 
int mwifiex_cmd_802_11_associate(struct mwifiex_private *priv, struct host_cmd_ds_command *cmd, struct mwifiex_bssdescriptor *bss_desc);


#line 1105 
int mwifiex_ret_802_11_associate(struct mwifiex_private *priv, struct host_cmd_ds_command *resp);


#line 1107 
void mwifiex_reset_connect_state(struct mwifiex_private *priv, u16 reason_code);


#line 1109 
int mwifiex_deauthenticate(struct mwifiex_private *priv, u8 *mac);


#line 1110 
void mwifiex_deauthenticate_all(struct mwifiex_adapter *adapter);


#line 1111 
int mwifiex_adhoc_start(struct mwifiex_private *priv, struct cfg80211_ssid *adhoc_ssid);


#line 1113 
int mwifiex_adhoc_join(struct mwifiex_private *priv, struct mwifiex_bssdescriptor *bss_desc);


#line 1115 
int mwifiex_cmd_802_11_ad_hoc_start(struct mwifiex_private *priv, struct host_cmd_ds_command *cmd, struct cfg80211_ssid *req_ssid);


#line 1118 
int mwifiex_cmd_802_11_ad_hoc_join(struct mwifiex_private *priv, struct host_cmd_ds_command *cmd, struct mwifiex_bssdescriptor *bss_desc);


#line 1121 
int mwifiex_ret_802_11_ad_hoc(struct mwifiex_private *priv, struct host_cmd_ds_command *resp);


#line 1176 
void mwifiex_set_11ac_ba_params(struct mwifiex_private *priv);


#line 1443 
void mwifiex_11h_process_join(struct mwifiex_private *priv, u8 **buffer, struct mwifiex_bssdescriptor *bss_desc);


#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11n.h"
int mwifiex_cmd_append_11n_tlv(struct mwifiex_private *priv, struct mwifiex_bssdescriptor *bss_desc, u8 **buffer);


#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11ac.h"
int mwifiex_cmd_append_11ac_tlv(struct mwifiex_private *priv, struct mwifiex_bssdescriptor *bss_desc, u8 **buffer);


#line 40  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/join.c"
static int mwifiex_cmd_append_generic_ie(struct mwifiex_private *priv, u8 **buffer)
{
  int __retres;
  struct mwifiex_ie_types_header ie_header;
  
#line 42 
  int ret_len = 0;
  
#line 46 
  if (buffer == (u8 **)0U) {
    
#line 47 
    __retres = 0;
    
#line 47 
    goto return_label;
  }
  else ;
  
#line 48 
  if (*buffer == (u8 *)0U) {
    
#line 49 
    __retres = 0;
    
#line 49 
    goto return_label;
  }
  else ;
  
#line 55 
  if ((unsigned int)priv->gen_ie_buf_len != 0U) {
    
#line 56 
    if (((priv->adapter)->debug_mask & 1073741824U) != 0U) {
      
#line 56 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 56 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"info: %s: append generic ie len %d to %p\n","mwifiex_cmd_append_generic_ie",(int)priv->gen_ie_buf_len,*buffer); else ;
    }
    else ;
    
#line 61 
    ie_header.type = (unsigned short)266U;
    
#line 62 
    ie_header.len = (unsigned short)priv->gen_ie_buf_len;
    
#line 63 
    memcpy((void *)*buffer,(void const *)(& ie_header),4UL);
    
#line 67 
    *buffer += 4U;
    
#line 68 
    ret_len = (int)((unsigned int)ret_len + 4U);
    
#line 72 
    memcpy((void *)*buffer,(void const *)(& priv->gen_ie_buf),(unsigned long)priv->gen_ie_buf_len);
    
#line 76 
    *buffer += (int)priv->gen_ie_buf_len;
    
#line 77 
    ret_len = (int)priv->gen_ie_buf_len + ret_len;
    
#line 80 
    priv->gen_ie_buf_len = (unsigned char)0U;
  }
  else ;
  
#line 84 
  __retres = ret_len;
  return_label: 
#line 84 
                return __retres;
}


#line 101  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/join.c"
static int mwifiex_cmd_append_tsf_tlv(struct mwifiex_private *priv, u8 **buffer, struct mwifiex_bssdescriptor *bss_desc)
{
  int __retres;
  struct mwifiex_ie_types_tsf_timestamp tsf_tlv;
  __le64 tsf_val;
  
#line 108 
  if (buffer == (u8 **)0U) {
    
#line 109 
    __retres = 0;
    
#line 109 
    goto return_label;
  }
  else ;
  
#line 110 
  if (*buffer == (u8 *)0U) {
    
#line 111 
    __retres = 0;
    
#line 111 
    goto return_label;
  }
  else ;
  
#line 113 
  memset((void *)(& tsf_tlv),0,5UL);
  
#line 115 
  tsf_tlv.header.type = (unsigned short)275U;
  
#line 116 
  tsf_tlv.header.len = (unsigned short)16U;
  
#line 118 
  memcpy((void *)*buffer,(void const *)(& tsf_tlv),4UL);
  
#line 119 
  *buffer += 4U;
  
#line 122 
  tsf_val = bss_desc->fw_tsf;
  
#line 123 
  memcpy((void *)*buffer,(void const *)(& tsf_val),8UL);
  
#line 124 
  *buffer += 8U;
  
#line 126 
  tsf_val = bss_desc->timestamp;
  
#line 128 
  if (((priv->adapter)->debug_mask & 1073741824U) != 0U) {
    
#line 128 
    if ((priv->adapter)->dev != (struct device *)0) 
#line 128 
                                                    _dev_info((struct device const *)(priv->adapter)->dev,"info: %s: TSF offset calc: %016llx - %016llx\n","mwifiex_cmd_append_tsf_tlv",bss_desc->timestamp,bss_desc->fw_tsf); else ;
  }
  else ;
  
#line 132 
  memcpy((void *)*buffer,(void const *)(& tsf_val),8UL);
  
#line 133 
  *buffer += 8U;
  
#line 135 
  __retres = 20;
  return_label: 
#line 135 
                return __retres;
}


#line 146  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/join.c"
static int mwifiex_get_common_rates(struct mwifiex_private *priv, u8 *rate1, u32 rate1_size, u8 *rate2, u32 rate2_size)
{
  int __retres;
  int ret;
  u8 *tmp;
  u32 i;
  u32 j;
  
#line 150 
  u8 *ptr = rate1;
  
#line 153 
  tmp = (u8 *)kmemdup((void const *)rate1,(unsigned long)rate1_size,208U);
  
#line 154 
  if (tmp == (u8 *)0U) {
    
#line 155 
    if (((priv->adapter)->debug_mask & 4U) != 0U) {
      
#line 155 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 155 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"failed to alloc tmp buf\n"); else ;
    }
    else ;
    
#line 156 
    __retres = -12;
    
#line 156 
    goto return_label;
  }
  else ;
  
#line 159 
  memset((void *)rate1,0,(unsigned long)rate1_size);
  
#line 161 
  i = 0U;
  
#line 161 
  goto ldv_61502;
  ldv_61501: 
#line 162 
  ;
  
#line 162 
  j = 0U;
  
#line 162 
  goto ldv_61500;
  ldv_61499: 
#line 163 
  ;
  
#line 165 
  if ((((int)*(rate2 + i) ^ (int)*(tmp + j)) & 127) == 0) {
    u8 *tmp_1;
    
#line 166 
    tmp_1 = rate1;
    
#line 166 
    rate1 += 1;
    
#line 166 
    *tmp_1 = *(tmp + j);
    
#line 167 
    goto ldv_61498;
  }
  else ;
  
#line 162 
  j += 1U;
  ldv_61500: 
#line 163 
  ;
  
#line 162 
  if (j < rate1_size && (unsigned int)*(tmp + j) != 0U) 
#line 164 
                                                        goto ldv_61499; else 
                                                                    
#line 167 
                                                                    goto ldv_61498;
  ldv_61498: 
#line 168 
  ;
  
#line 161 
  i += 1U;
  ldv_61502: 
#line 162 
  ;
  
#line 161 
  if (i < rate2_size && (unsigned int)*(rate2 + i) != 0U) 
#line 163 
                                                          goto ldv_61501; else 
                                                                    
#line 166 
                                                                    goto ldv_61503;
  ldv_61503: 
#line 167 
  ;
  
#line 172 
  if (((priv->adapter)->debug_mask & 1073741824U) != 0U) {
    
#line 172 
    if ((priv->adapter)->dev != (struct device *)0) 
#line 172 
                                                    _dev_info((struct device const *)(priv->adapter)->dev,"info: Tx data rate set to %#x\n",priv->data_rate); else ;
  }
  else ;
  
#line 175 
  if ((unsigned int)priv->is_data_rate_auto == 0U) {
    
#line 176 
    goto ldv_61506;
    ldv_61505: 
#line 177 
    ;
    
#line 177 
    if (((unsigned int)*ptr & 127U) == priv->data_rate) {
      
#line 178 
      ret = 0;
      
#line 179 
      goto done;
    }
    else ;
    
#line 181 
    ptr += 1;
    ldv_61506: 
#line 182 
    ;
    
#line 176 
    if ((unsigned int)*ptr != 0U) 
#line 178 
                                  goto ldv_61505; else 
#line 181 
                                                       goto ldv_61507;
    ldv_61507: 
#line 182 
    ;
    
#line 183 
    if (((priv->adapter)->debug_mask & 4U) != 0U) {
      
#line 183 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 183 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"previously set fixed data rate %#x\t",priv->data_rate); else ;
    }
    else ;
    
#line 188 
    ret = -1;
    
#line 189 
    goto done;
  }
  else ;
  
#line 192 
  ret = 0;
  done: 
#line 193 
  ;
  
#line 194 
  kfree((void const *)tmp);
  
#line 195 
  __retres = ret;
  return_label: 
#line 195 
                return __retres;
}


#line 203  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/join.c"
static int mwifiex_setup_rates_from_bssdesc(struct mwifiex_private *priv, struct mwifiex_bssdescriptor *bss_desc, u8 *out_rates, u32 *out_rates_size)
{
  int __retres;
  u8 card_rates[14U];
  u32 card_rates_size;
  int tmp;
  size_t tmp_2;
  
#line 211 
  memcpy((void *)out_rates,(void const *)(& bss_desc->supported_rates),14UL);
  
#line 213 
  card_rates_size = mwifiex_get_active_data_rates(priv,(u8 *)(& card_rates));
  
#line 215 
  tmp = mwifiex_get_common_rates(priv,out_rates,14U,(u8 *)(& card_rates),card_rates_size);
  
#line 215 
  if (tmp != 0) {
    
#line 217 
    *out_rates_size = 0U;
    
#line 218 
    if (((priv->adapter)->debug_mask & 4U) != 0U) {
      
#line 218 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 218 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"%s: cannot get common rates\n","mwifiex_setup_rates_from_bssdesc"); else ;
    }
    else ;
    
#line 221 
    __retres = -1;
    
#line 221 
    goto return_label;
  }
  else ;
  {
    size_t tmp_1;
    
#line 225 
    size_t __min1 = strlen((char const *)out_rates);
    
#line 225 
    size_t __min2 = 14UL;
    
#line 225 
    if (__min1 < __min2) 
#line 225 
                         tmp_1 = __min1; else 
#line 225 
                                              tmp_1 = __min2;
    
#line 225 
    tmp_2 = tmp_1;
  }
  
#line 224 
  *out_rates_size = (unsigned int)tmp_2;
  
#line 227 
  __retres = 0;
  return_label: 
#line 227 
                return __retres;
}


#line 238  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/join.c"
static int mwifiex_cmd_append_wps_ie(struct mwifiex_private *priv, u8 **buffer)
{
  int __retres;
  struct mwifiex_ie_types_header ie_header;
  
#line 240 
  int retLen = 0;
  
#line 243 
  if (buffer == (u8 **)0U || *buffer == (u8 *)0U) {
    
#line 244 
    __retres = 0;
    
#line 244 
    goto return_label;
  }
  else ;
  
#line 250 
  if ((unsigned int)priv->wps_ie_len != 0U) {
    
#line 251 
    if (((priv->adapter)->debug_mask & 16U) != 0U) {
      
#line 251 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 251 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"cmd: append wps ie %d to %p\n",(int)priv->wps_ie_len,*buffer); else ;
    }
    else ;
    
#line 256 
    ie_header.type = (unsigned short)361U;
    
#line 257 
    ie_header.len = (unsigned short)priv->wps_ie_len;
    
#line 258 
    memcpy((void *)*buffer,(void const *)(& ie_header),4UL);
    
#line 259 
    *buffer += 4U;
    
#line 260 
    retLen = (int)((unsigned int)retLen + 4U);
    
#line 262 
    memcpy((void *)*buffer,(void const *)priv->wps_ie,(unsigned long)priv->wps_ie_len);
    
#line 263 
    *buffer += (int)priv->wps_ie_len;
    
#line 264 
    retLen = (int)priv->wps_ie_len + retLen;
  }
  else ;
  
#line 268 
  kfree((void const *)priv->wps_ie);
  
#line 269 
  priv->wps_ie_len = (unsigned char)0U;
  
#line 270 
  __retres = retLen;
  return_label: 
#line 270 
                return __retres;
}


#line 282  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/join.c"
static int mwifiex_cmd_append_wapi_ie(struct mwifiex_private *priv, u8 **buffer)
{
  int __retres;
  struct mwifiex_ie_types_header ie_header;
  
#line 284 
  int retLen = 0;
  
#line 288 
  if (buffer == (u8 **)0U) {
    
#line 289 
    __retres = 0;
    
#line 289 
    goto return_label;
  }
  else ;
  
#line 290 
  if (*buffer == (u8 *)0U) {
    
#line 291 
    __retres = 0;
    
#line 291 
    goto return_label;
  }
  else ;
  
#line 297 
  if ((unsigned int)priv->wapi_ie_len != 0U) {
    
#line 298 
    if (((priv->adapter)->debug_mask & 16U) != 0U) {
      
#line 298 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 298 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"cmd: append wapi ie %d to %p\n",(int)priv->wapi_ie_len,*buffer); else ;
    }
    else ;
    
#line 303 
    ie_header.type = (unsigned short)350U;
    
#line 304 
    ie_header.len = (unsigned short)priv->wapi_ie_len;
    
#line 305 
    memcpy((void *)*buffer,(void const *)(& ie_header),4UL);
    
#line 309 
    *buffer += 4U;
    
#line 310 
    retLen = (int)((unsigned int)retLen + 4U);
    
#line 314 
    memcpy((void *)*buffer,(void const *)(& priv->wapi_ie),(unsigned long)priv->wapi_ie_len);
    
#line 318 
    *buffer += (int)priv->wapi_ie_len;
    
#line 319 
    retLen = (int)priv->wapi_ie_len + retLen;
  }
  else ;
  
#line 323 
  __retres = retLen;
  return_label: 
#line 323 
                return __retres;
}


#line 330  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/join.c"
static int mwifiex_append_rsn_ie_wpa_wpa2(struct mwifiex_private *priv, u8 **buffer)
{
  int __retres;
  struct mwifiex_ie_types_rsn_param_set *rsn_ie_tlv;
  int rsn_ie_len;
  
#line 336 
  if (buffer == (u8 **)0U || *buffer == (u8 *)0U) {
    
#line 337 
    __retres = 0;
    
#line 337 
    goto return_label;
  }
  else ;
  
#line 339 
  rsn_ie_tlv = (struct mwifiex_ie_types_rsn_param_set *)*buffer;
  
#line 340 
  rsn_ie_tlv->header.type = (unsigned short)priv->wpa_ie[0];
  
#line 341 
  rsn_ie_tlv->header.type = (unsigned short)((unsigned int)rsn_ie_tlv->header.type & 255U);
  
#line 343 
  rsn_ie_tlv->header.len = (unsigned short)priv->wpa_ie[1];
  
#line 344 
  rsn_ie_tlv->header.len = (unsigned short)((unsigned int)rsn_ie_tlv->header.len & 255U);
  
#line 346 
  if ((unsigned int)rsn_ie_tlv->header.len <= 254U) 
#line 347 
                                                    memcpy((void *)(& rsn_ie_tlv->rsn_ie),(void const *)(& priv->wpa_ie[2]),(unsigned long)rsn_ie_tlv->header.len);
  else {
    
#line 350 
    __retres = -1;
    
#line 350 
    goto return_label;
  }
  
#line 352 
  rsn_ie_len = (int)((unsigned int)rsn_ie_tlv->header.len + 4U);
  
#line 354 
  *buffer += rsn_ie_len;
  
#line 356 
  __retres = rsn_ie_len;
  return_label: 
#line 356 
                return __retres;
}


#line 387  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/join.c"
int mwifiex_cmd_802_11_associate(struct mwifiex_private *priv, struct host_cmd_ds_command *cmd, struct mwifiex_bssdescriptor *bss_desc)
{
  int __retres;
  struct mwifiex_ie_types_ssid_param_set *ssid_tlv;
  struct mwifiex_ie_types_phy_param_set *phy_tlv;
  struct mwifiex_ie_types_ss_param_set *ss_tlv;
  struct mwifiex_ie_types_rates_param_set *rates_tlv;
  struct mwifiex_ie_types_auth_type *auth_tlv;
  struct mwifiex_ie_types_chan_list_param_set *chan_tlv;
  u8 rates[14U];
  u32 rates_size;
  u16 tmp_cap;
  u8 *pos;
  int tmp;
  
#line 391 
  struct host_cmd_ds_802_11_associate *assoc = & cmd->params.associate;
  
#line 402 
  int rsn_ie_len = 0;
  
#line 404 
  pos = (u8 *)assoc;
  
#line 406 
  cmd->command = (unsigned short)18U;
  
#line 409 
  priv->attempted_bss_desc = bss_desc;
  
#line 411 
  memcpy((void *)(& assoc->peer_sta_addr),(void const *)(& bss_desc->mac_address),6UL);
  
#line 413 
  pos += 6U;
  
#line 416 
  assoc->listen_interval = priv->listen_interval;
  
#line 418 
  assoc->beacon_period = bss_desc->beacon_period;
  
#line 420 
  pos += 2U;
  
#line 421 
  pos += 2U;
  
#line 422 
  pos += 2U;
  
#line 423 
  pos += 1U;
  
#line 425 
  ssid_tlv = (struct mwifiex_ie_types_ssid_param_set *)pos;
  
#line 426 
  ssid_tlv->header.type = (unsigned short)0U;
  
#line 427 
  ssid_tlv->header.len = (unsigned short)bss_desc->ssid.ssid_len;
  
#line 428 
  memcpy((void *)(& ssid_tlv->ssid),(void const *)(& bss_desc->ssid.ssid),(unsigned long)ssid_tlv->header.len);
  
#line 430 
  pos += (unsigned long)ssid_tlv->header.len + 4UL;
  
#line 432 
  phy_tlv = (struct mwifiex_ie_types_phy_param_set *)pos;
  
#line 433 
  phy_tlv->header.type = (unsigned short)3U;
  
#line 434 
  phy_tlv->header.len = (unsigned short)1U;
  
#line 435 
  memcpy((void *)(& phy_tlv->fh_ds.ds_param_set),(void const *)(& bss_desc->phy_param_set.ds_param_set.current_chan),1UL);
  
#line 438 
  pos += (unsigned long)phy_tlv->header.len + 4UL;
  
#line 440 
  ss_tlv = (struct mwifiex_ie_types_ss_param_set *)pos;
  
#line 441 
  ss_tlv->header.type = (unsigned short)4U;
  
#line 442 
  ss_tlv->header.len = (unsigned short)6U;
  
#line 443 
  pos += (unsigned long)ss_tlv->header.len + 4UL;
  
#line 446 
  tmp = mwifiex_setup_rates_from_bssdesc(priv,bss_desc,(u8 *)(& rates),& rates_size);
  
#line 446 
  if (tmp != 0) {
    
#line 448 
    __retres = -1;
    
#line 448 
    goto return_label;
  }
  else ;
  
#line 451 
  priv->curr_bss_params.num_of_rates = rates_size;
  
#line 452 
  memcpy((void *)(& priv->curr_bss_params.data_rates),(void const *)(& rates),(unsigned long)rates_size);
  
#line 455 
  rates_tlv = (struct mwifiex_ie_types_rates_param_set *)pos;
  
#line 456 
  rates_tlv->header.type = (unsigned short)1U;
  
#line 457 
  rates_tlv->header.len = (unsigned short)rates_size;
  
#line 458 
  memcpy((void *)(& rates_tlv->rates),(void const *)(& rates),(unsigned long)rates_size);
  
#line 459 
  pos += (unsigned long)rates_size + 4UL;
  
#line 460 
  if (((priv->adapter)->debug_mask & 1073741824U) != 0U) {
    
#line 460 
    if ((priv->adapter)->dev != (struct device *)0) 
#line 460 
                                                    _dev_info((struct device const *)(priv->adapter)->dev,"info: ASSOC_CMD: rates size = %d\n",rates_size); else ;
  }
  else ;
  
#line 464 
  auth_tlv = (struct mwifiex_ie_types_auth_type *)pos;
  
#line 465 
  auth_tlv->header.type = (unsigned short)287U;
  
#line 466 
  auth_tlv->header.len = (unsigned short)2U;
  
#line 467 
  if ((unsigned int)priv->sec_info.wep_enabled != 0U) 
#line 468 
                                                      auth_tlv->auth_type = (unsigned short)priv->sec_info.authentication_mode; else 
                                                                    
#line 471 
                                                                    auth_tlv->auth_type = (unsigned short)0U;
  
#line 473 
  pos += (unsigned long)auth_tlv->header.len + 4UL;
  
#line 475 
  if (((unsigned long)(priv->adapter)->fw_cap_info & 12032UL) != 0UL && (((((unsigned long)(priv->adapter)->fw_cap_info & 2048UL) == 0UL || (unsigned int)bss_desc->disable_11n != 0U) || (((int)(priv->adapter)->config_bands & 8) == 0 && ((int)(priv->adapter)->config_bands & 16) == 0)) || bss_desc->bcn_ht_cap == (struct ieee80211_ht_cap *)0)) {
    
#line 485 
    chan_tlv = (struct mwifiex_ie_types_chan_list_param_set *)pos;
    
#line 486 
    chan_tlv->header.type = (unsigned short)257U;
    
#line 487 
    chan_tlv->header.len = (unsigned short)7U;
    
#line 490 
    memset((void *)(& chan_tlv->chan_scan_param),0,7UL);
    
#line 492 
    chan_tlv->chan_scan_param[0].chan_number = bss_desc->phy_param_set.ds_param_set.current_chan;
    
#line 494 
    if (((priv->adapter)->debug_mask & 1073741824U) != 0U) {
      
#line 494 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 494 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"info: Assoc: TLV Chan = %d\n",(int)chan_tlv->chan_scan_param[0].chan_number); else ;
    }
    else ;
    
#line 497 
    chan_tlv->chan_scan_param[0].radio_type = mwifiex_band_to_radio_type((unsigned char)((int)((unsigned char)bss_desc->bss_band)));
    
#line 500 
    if (((priv->adapter)->debug_mask & 1073741824U) != 0U) {
      
#line 500 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 500 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"info: Assoc: TLV Band = %d\n",(int)chan_tlv->chan_scan_param[0].radio_type); else ;
    }
    else ;
    
#line 502 
    pos += 11U;
  }
  else ;
  
#line 506 
  if ((unsigned int)priv->wps.session_enable == 0U) {
    
#line 507 
    if ((unsigned int)priv->sec_info.wpa_enabled != 0U || (unsigned int)priv->sec_info.wpa2_enabled != 0U) 
      
#line 508 
      rsn_ie_len = mwifiex_append_rsn_ie_wpa_wpa2(priv,& pos); else ;
    
#line 510 
    if (rsn_ie_len == -1) {
      
#line 511 
      __retres = -1;
      
#line 511 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 514 
  if ((((unsigned long)(priv->adapter)->fw_cap_info & 2048UL) != 0UL && (unsigned int)bss_desc->disable_11n == 0U) && (((int)(priv->adapter)->config_bands & 8) != 0 || ((int)(priv->adapter)->config_bands & 16) != 0)) 
    
#line 518 
    mwifiex_cmd_append_11n_tlv(priv,bss_desc,& pos); else ;
  
#line 520 
  if (((((unsigned long)(priv->adapter)->fw_cap_info & 8192UL) != 0UL && (unsigned int)bss_desc->disable_11n == 0U) && (unsigned int)bss_desc->disable_11ac == 0U) && ((int)(priv->adapter)->config_bands & 32) != 0) 
    
#line 523 
    mwifiex_cmd_append_11ac_tlv(priv,bss_desc,& pos); else ;
  
#line 526 
  mwifiex_cmd_append_vsie_tlv(priv,(unsigned short)2,& pos);
  
#line 528 
  mwifiex_wmm_process_association_req(priv,& pos,& bss_desc->wmm_ie,bss_desc->bcn_ht_cap);
  
#line 530 
  if ((unsigned int)priv->sec_info.wapi_enabled != 0U && (unsigned int)priv->wapi_ie_len != 0U) 
    
#line 531 
    mwifiex_cmd_append_wapi_ie(priv,& pos); else ;
  
#line 533 
  if ((unsigned int)priv->wps.session_enable != 0U && (unsigned int)priv->wps_ie_len != 0U) 
    
#line 534 
    mwifiex_cmd_append_wps_ie(priv,& pos); else ;
  
#line 536 
  mwifiex_cmd_append_generic_ie(priv,& pos);
  
#line 538 
  mwifiex_cmd_append_tsf_tlv(priv,& pos,bss_desc);
  
#line 540 
  mwifiex_11h_process_join(priv,& pos,bss_desc);
  
#line 542 
  cmd->size = (unsigned short)((unsigned int)((unsigned short)((long)pos - (long)assoc)) + 8U);
  
#line 545 
  tmp_cap = bss_desc->cap_info_bitmap;
  
#line 547 
  if ((unsigned int)(priv->adapter)->config_bands == 1U) 
#line 548 
                                                         tmp_cap = (unsigned short)((unsigned int)tmp_cap & 64511U); else ;
  
#line 550 
  tmp_cap = (unsigned short)((unsigned int)tmp_cap & 9727U);
  
#line 551 
  if (((priv->adapter)->debug_mask & 1073741824U) != 0U) {
    
#line 551 
    if ((priv->adapter)->dev != (struct device *)0) 
#line 551 
                                                    _dev_info((struct device const *)(priv->adapter)->dev,"info: ASSOC_CMD: tmp_cap=%4X CAPINFO_MASK=%4lX\n",(int)tmp_cap,18446744073709495807UL); else ;
  }
  else ;
  
#line 554 
  assoc->cap_info_bitmap = tmp_cap;
  
#line 556 
  __retres = 0;
  return_label: 
#line 556 
                return __retres;
}


#line 559  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/join.c"
static char const *assoc_failure_reason_to_str(u16 cap_info)
{
  char const *__retres;
  
#line 561 
  switch ((int)cap_info) {
    case 65531: 
#line 562 
    ;
    
#line 563 
    __retres = "CONNECT_ERR_AUTH_ERR_STA_FAILURE";
    
#line 563 
    goto return_label;
    case 65534: 
#line 564 
    ;
    
#line 565 
    __retres = "CONNECT_ERR_AUTH_MSG_UNHANDLED";
    
#line 565 
    goto return_label;
    case 65532: 
#line 566 
    ;
    
#line 567 
    __retres = "CONNECT_ERR_ASSOC_ERR_TIMEOUT";
    
#line 567 
    goto return_label;
    case 65533: 
#line 568 
    ;
    
#line 569 
    __retres = "CONNECT_ERR_ASSOC_ERR_AUTH_REFUSED";
    
#line 569 
    goto return_label;
    case 65535: 
#line 570 
    ;
    
#line 571 
    __retres = "CONNECT_ERR_STA_FAILURE";
    
#line 571 
    goto return_label;
  }
  
#line 574 
  __retres = "Unknown connect failure";
  return_label: 
#line 574 
                return __retres;
}


#line 638  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/join.c"
int mwifiex_ret_802_11_associate(struct mwifiex_private *priv, struct host_cmd_ds_command *resp)
{
  struct ieee_types_assoc_rsp *assoc_rsp;
  struct mwifiex_bssdescriptor *bss_desc;
  u16 cap_info;
  u16 status_code;
  u16 aid;
  unsigned long tmp_0;
  int tmp_3;
  bool tmp_2;
  
#line 641 
  struct mwifiex_adapter *adapter = priv->adapter;
  
#line 642 
  int ret = 0;
  
#line 645 
  bool enable_data = (_Bool)1;
  
#line 648 
  assoc_rsp = (struct ieee_types_assoc_rsp *)(& resp->params);
  
#line 650 
  cap_info = assoc_rsp->cap_info_bitmap;
  
#line 651 
  status_code = assoc_rsp->status_code;
  
#line 652 
  aid = assoc_rsp->a_id;
  
#line 654 
  if (((unsigned long)aid & 49152UL) != 49152UL) 
#line 655 
                                                 dev_err((struct device const *)(priv->adapter)->dev,"invalid AID value 0x%x; bits 15:14 not set\n",(int)aid); else ;
  
#line 659 
  aid = (unsigned short)((unsigned int)aid & 16383U);
  {
    unsigned long tmp;
    
#line 661 
    unsigned long _min1 = (unsigned long)resp->size + 18446744073709551608UL;
    
#line 661 
    unsigned long _min2 = 500UL;
    
#line 661 
    if (_min1 < _min2) 
#line 661 
                       tmp = _min1; else 
#line 661 
                                         tmp = _min2;
    
#line 661 
    tmp_0 = tmp;
  }
  
#line 661 
  priv->assoc_rsp_size = (unsigned int)tmp_0;
  
#line 664 
  memcpy((void *)(& priv->assoc_rsp_buf),(void const *)(& resp->params),(unsigned long)priv->assoc_rsp_size);
  
#line 666 
  assoc_rsp->a_id = aid;
  
#line 668 
  if ((unsigned int)status_code != 0U) {
    
#line 669 
    (priv->adapter)->dbg.num_cmd_assoc_failure += 1U;
    
#line 670 
    if (((priv->adapter)->debug_mask & 4U) != 0U) {
      
#line 670 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 670 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"ASSOC_RESP: failed,\t",(int)status_code,(int)cap_info,(int)assoc_rsp->a_id); else ;
    }
    else ;
    
#line 676 
    if (((priv->adapter)->debug_mask & 4U) != 0U) {
      
#line 676 
      if ((priv->adapter)->dev != (struct device *)0) {
        char const *tmp_1;
        
#line 676 
        tmp_1 = assoc_failure_reason_to_str((unsigned short)((int)cap_info));
        
#line 676 
        ;
        
#line 676 
        _dev_info((struct device const *)(priv->adapter)->dev,"assoc failure: reason %s\n",tmp_1);
      }
      else ;
    }
    else ;
    
#line 678 
    if ((unsigned int)cap_info == 65532U) 
      
#line 679 
      if ((unsigned int)status_code == 2U) {
        
#line 680 
        ret = 16;
        
#line 681 
        if (((priv->adapter)->debug_mask & 4U) != 0U) {
          
#line 681 
          if ((priv->adapter)->dev != (struct device *)0) 
#line 681 
                                                          _dev_info((struct device const *)(priv->adapter)->dev,"ASSOC_RESP: AUTH timeout\n"); else ;
        }
        else ;
      }
      else {
        
#line 684 
        ret = 1;
        
#line 685 
        if (((priv->adapter)->debug_mask & 4U) != 0U) {
          
#line 685 
          if ((priv->adapter)->dev != (struct device *)0) 
#line 685 
                                                          _dev_info((struct device const *)(priv->adapter)->dev,"ASSOC_RESP: UNSPECIFIED failure\n"); else ;
        }
        else ;
      }
    else 
#line 689 
         ret = (int)status_code;
    
#line 692 
    goto done;
  }
  else ;
  
#line 696 
  priv->media_connected = (unsigned char)1U;
  
#line 698 
  (priv->adapter)->ps_state = 0U;
  
#line 699 
  (priv->adapter)->pps_uapsd_mode = (unsigned short)0U;
  
#line 700 
  (priv->adapter)->tx_lock_flag = (unsigned char)0U;
  
#line 703 
  bss_desc = priv->attempted_bss_desc;
  
#line 705 
  if (((priv->adapter)->debug_mask & 1073741824U) != 0U) {
    
#line 705 
    if ((priv->adapter)->dev != (struct device *)0) 
#line 705 
                                                    _dev_info((struct device const *)(priv->adapter)->dev,"info: ASSOC_RESP: %s\n",(u8 *)(& bss_desc->ssid.ssid)); else ;
  }
  else ;
  
#line 709 
  memcpy((void *)(& priv->curr_bss_params.bss_descriptor),(void const *)bss_desc,336UL);
  
#line 714 
  priv->curr_bss_params.bss_descriptor.channel = (unsigned int)bss_desc->phy_param_set.ds_param_set.current_chan;
  
#line 716 
  priv->curr_bss_params.band = (unsigned char)bss_desc->bss_band;
  
#line 718 
  if ((unsigned int)bss_desc->wmm_ie.vend_hdr.element_id == 221U) 
#line 719 
                                                                  priv->curr_bss_params.wmm_enabled = (unsigned char)1U; else 
                                                                    
#line 721 
                                                                    priv->curr_bss_params.wmm_enabled = (unsigned char)0U;
  
#line 723 
  if (((unsigned int)priv->wmm_required != 0U || bss_desc->bcn_ht_cap != (struct ieee80211_ht_cap *)0) && (unsigned int)priv->curr_bss_params.wmm_enabled != 0U) 
    
#line 725 
    priv->wmm_enabled = (unsigned char)1U; else 
#line 727 
                                                priv->wmm_enabled = (unsigned char)0U;
  
#line 729 
  priv->curr_bss_params.wmm_uapsd_enabled = (unsigned char)0U;
  
#line 731 
  if ((unsigned int)priv->wmm_enabled != 0U) 
#line 733 
                                             priv->curr_bss_params.wmm_uapsd_enabled = (unsigned char)((int)bss_desc->wmm_ie.qos_info_bitmap >> 7); else ;
  
#line 736 
  if (((priv->adapter)->debug_mask & 1073741824U) != 0U) {
    
#line 736 
    if ((priv->adapter)->dev != (struct device *)0) 
#line 736 
                                                    _dev_info((struct device const *)(priv->adapter)->dev,"info: ASSOC_RESP: curr_pkt_filter is %#x\n",(int)priv->curr_pkt_filter); else ;
  }
  else ;
  
#line 739 
  if ((unsigned int)priv->sec_info.wpa_enabled != 0U || (unsigned int)priv->sec_info.wpa2_enabled != 0U) 
    
#line 740 
    priv->wpa_is_gtk_set = (unsigned char)0U; else ;
  
#line 742 
  if ((unsigned int)priv->wmm_enabled != 0U) 
#line 745 
                                             enable_data = (_Bool)0;
  else {
    
#line 749 
    mwifiex_wmm_setup_queue_priorities(priv,(struct ieee_types_wmm_parameter *)0);
    
#line 750 
    mwifiex_wmm_setup_ac_downgrade(priv);
  }
  
#line 753 
  if ((int)enable_data != 0) {
    
#line 754 
    if (((priv->adapter)->debug_mask & 1073741824U) != 0U) {
      
#line 754 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 754 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"info: post association, re-enabling data flow\n"); else ;
    }
    else ;
  }
  else ;
  
#line 758 
  priv->data_rssi_last = (short)0;
  
#line 759 
  priv->data_nf_last = (short)0;
  
#line 760 
  priv->data_rssi_avg = (short)0;
  
#line 761 
  priv->data_nf_avg = (short)0;
  
#line 762 
  priv->bcn_rssi_last = (short)0;
  
#line 763 
  priv->bcn_nf_last = (short)0;
  
#line 764 
  priv->bcn_rssi_avg = (short)0;
  
#line 765 
  priv->bcn_nf_avg = (short)0;
  
#line 766 
  priv->rxpd_rate = (unsigned char)0U;
  
#line 767 
  priv->rxpd_htinfo = (unsigned char)0U;
  
#line 769 
  mwifiex_save_curr_bcn(priv);
  
#line 771 
  (priv->adapter)->dbg.num_cmd_assoc_success += 1U;
  
#line 773 
  if (((priv->adapter)->debug_mask & 1073741824U) != 0U) {
    
#line 773 
    if ((priv->adapter)->dev != (struct device *)0) 
#line 773 
                                                    _dev_info((struct device const *)(priv->adapter)->dev,"info: ASSOC_RESP: associated\n"); else ;
  }
  else ;
  
#line 777 
  mwifiex_ralist_add(priv,(u8 const *)(& priv->curr_bss_params.bss_descriptor.mac_address));
  
#line 780 
  tmp_2 = netif_carrier_ok((struct net_device const *)priv->netdev);
  
#line 780 
  if (tmp_2) 
#line 780 
             tmp_3 = 0; else 
#line 780 
                             tmp_3 = 1;
  
#line 780 
  if (tmp_3) 
#line 781 
             netif_carrier_on(priv->netdev); else ;
  
#line 782 
  mwifiex_wake_up_net_dev_queue(priv->netdev,adapter);
  
#line 784 
  if ((unsigned int)priv->sec_info.wpa_enabled != 0U || (unsigned int)priv->sec_info.wpa2_enabled != 0U) 
    
#line 785 
    priv->scan_block = (unsigned char)1U; else ;
  done: 
#line 787 
  ;
  
#line 789 
  if ((adapter->curr_cmd)->wait_q_enabled != 0U) 
    
#line 790 
    if (ret != 0) 
#line 791 
                  adapter->cmd_wait_q.status = -1; else 
#line 793 
                                                        adapter->cmd_wait_q.status = 0;
  else ;
  
#line 796 
  return ret;
}


#line 818  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/join.c"
int mwifiex_cmd_802_11_ad_hoc_start(struct mwifiex_private *priv, struct host_cmd_ds_command *cmd, struct cfg80211_ssid *req_ssid)
{
  int __retres;
  struct mwifiex_bssdescriptor *bss_desc;
  u32 i;
  u16 tmp_cap;
  struct mwifiex_ie_types_chan_list_param_set *chan_tlv;
  u8 radio_type;
  struct mwifiex_ie_types_htcap *ht_cap;
  struct mwifiex_ie_types_htinfo *ht_info;
  struct mwifiex_chan_freq_power *tmp;
  int tmp_1;
  
#line 822 
  int rsn_ie_len = 0;
  
#line 823 
  struct mwifiex_adapter *adapter = priv->adapter;
  
#line 824 
  struct host_cmd_ds_802_11_ad_hoc_start *adhoc_start = & cmd->params.adhoc_start;
  
#line 827 
  u32 cmd_append_size = 0U;
  
#line 835 
  u8 *pos = (u8 *)adhoc_start + 69U;
  
#line 838 
  if (adapter == (struct mwifiex_adapter *)0) {
    
#line 839 
    __retres = -1;
    
#line 839 
    goto return_label;
  }
  else ;
  
#line 841 
  cmd->command = (unsigned short)43U;
  
#line 843 
  bss_desc = & priv->curr_bss_params.bss_descriptor;
  
#line 844 
  priv->attempted_bss_desc = bss_desc;
  
#line 856 
  memset((void *)(& adhoc_start->ssid),0,32UL);
  
#line 858 
  memcpy((void *)(& adhoc_start->ssid),(void const *)(& req_ssid->ssid),(unsigned long)req_ssid->ssid_len);
  
#line 860 
  if ((adapter->debug_mask & 1073741824U) != 0U) {
    
#line 860 
    if (adapter->dev != (struct device *)0) 
#line 860 
                                            _dev_info((struct device const *)adapter->dev,"info: ADHOC_S_CMD: SSID = %s\n",(u8 *)(& adhoc_start->ssid)); else ;
  }
  else ;
  
#line 863 
  memset((void *)(& bss_desc->ssid.ssid),0,32UL);
  
#line 864 
  memcpy((void *)(& bss_desc->ssid.ssid),(void const *)(& req_ssid->ssid),(unsigned long)req_ssid->ssid_len);
  
#line 866 
  bss_desc->ssid.ssid_len = req_ssid->ssid_len;
  
#line 869 
  adhoc_start->bss_mode = (unsigned char)2U;
  
#line 870 
  bss_desc->bss_mode = 1U;
  
#line 871 
  adhoc_start->beacon_period = priv->beacon_period;
  
#line 872 
  bss_desc->beacon_period = priv->beacon_period;
  
#line 880 
  adhoc_start->phy_param_set.ds_param_set.element_id = (unsigned char)3U;
  
#line 881 
  adhoc_start->phy_param_set.ds_param_set.len = (unsigned char)1U;
  
#line 883 
  tmp = mwifiex_get_cfp(priv,(unsigned char)((int)adapter->adhoc_start_band),(unsigned short)((int)priv->adhoc_channel),0U);
  
#line 883 
  if (tmp == (struct mwifiex_chan_freq_power *)0) {
    struct mwifiex_chan_freq_power *cfp;
    
#line 886 
    cfp = mwifiex_get_cfp(priv,(unsigned char)((int)adapter->adhoc_start_band),(unsigned short)255,0U);
    
#line 888 
    if (cfp != (struct mwifiex_chan_freq_power *)0) 
#line 889 
                                                    priv->adhoc_channel = (unsigned char)cfp->channel; else ;
  }
  else ;
  
#line 892 
  if ((unsigned int)priv->adhoc_channel == 0U) {
    
#line 893 
    if ((adapter->debug_mask & 4U) != 0U) {
      
#line 893 
      if (adapter->dev != (struct device *)0) 
#line 893 
                                              _dev_info((struct device const *)adapter->dev,"ADHOC_S_CMD: adhoc_channel cannot be 0\n"); else ;
    }
    else ;
    
#line 895 
    __retres = -1;
    
#line 895 
    goto return_label;
  }
  else ;
  
#line 898 
  if ((adapter->debug_mask & 1073741824U) != 0U) {
    
#line 898 
    if (adapter->dev != (struct device *)0) 
#line 898 
                                            _dev_info((struct device const *)adapter->dev,"info: ADHOC_S_CMD: creating ADHOC on channel %d\n",(int)priv->adhoc_channel); else ;
  }
  else ;
  
#line 902 
  priv->curr_bss_params.bss_descriptor.channel = (unsigned int)priv->adhoc_channel;
  
#line 903 
  priv->curr_bss_params.band = adapter->adhoc_start_band;
  
#line 905 
  bss_desc->channel = (unsigned int)priv->adhoc_channel;
  
#line 906 
  adhoc_start->phy_param_set.ds_param_set.current_chan = priv->adhoc_channel;
  
#line 909 
  memcpy((void *)(& bss_desc->phy_param_set),(void const *)(& adhoc_start->phy_param_set),7UL);
  
#line 918 
  adhoc_start->ss_param_set.ibss_param_set.element_id = (unsigned char)6U;
  
#line 919 
  adhoc_start->ss_param_set.ibss_param_set.len = (unsigned char)2U;
  
#line 921 
  adhoc_start->ss_param_set.ibss_param_set.atim_window = priv->atim_window;
  
#line 922 
  memcpy((void *)(& bss_desc->ss_param_set),(void const *)(& adhoc_start->ss_param_set),8UL);
  
#line 926 
  bss_desc->cap_info_bitmap = (unsigned short)((unsigned int)bss_desc->cap_info_bitmap | 2U);
  
#line 927 
  tmp_cap = (unsigned short)2U;
  
#line 930 
  if (priv->sec_info.encryption_mode != 0U) {
    
#line 932 
    if ((adapter->debug_mask & 1073741824U) != 0U) {
      
#line 932 
      if (adapter->dev != (struct device *)0) 
#line 932 
                                              _dev_info((struct device const *)adapter->dev,"info: ADHOC_S_CMD: wep_status set privacy to WEP\n"); else ;
    }
    else ;
    
#line 934 
    bss_desc->privacy = 1U;
    
#line 935 
    tmp_cap = (unsigned short)((unsigned int)tmp_cap | 16U);
  }
  else {
    
#line 937 
    if ((adapter->debug_mask & 1073741824U) != 0U) {
      
#line 937 
      if (adapter->dev != (struct device *)0) 
#line 937 
                                              _dev_info((struct device const *)adapter->dev,"info: ADHOC_S_CMD: wep_status NOT set,\t"); else ;
    }
    else ;
    
#line 940 
    bss_desc->privacy = 0U;
  }
  
#line 943 
  memset((void *)(& adhoc_start->data_rate),0,14UL);
  
#line 944 
  mwifiex_get_active_data_rates(priv,(u8 *)(& adhoc_start->data_rate));
  
#line 945 
  if (((int)adapter->adhoc_start_band & 2) != 0 && ((int)priv->curr_pkt_filter & 8192) != 0) {
    int tmp_0;
    
#line 947 
    tmp_0 = mwifiex_send_cmd(priv,(unsigned short)40,(unsigned short)1,0U,(void *)(& priv->curr_pkt_filter),(_Bool)0);
    
#line 947 
    if (tmp_0 != 0) {
      
#line 950 
      if ((adapter->debug_mask & 4U) != 0U) {
        
#line 950 
        if (adapter->dev != (struct device *)0) 
#line 950 
                                                _dev_info((struct device const *)adapter->dev,"ADHOC_S_CMD: G Protection config failed\n"); else ;
      }
      else ;
      
#line 952 
      __retres = -1;
      
#line 952 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 956 
  i = 0U;
  
#line 956 
  goto ldv_61599;
  ldv_61598: 
#line 957 
  ;
  
#line 957 
  if ((unsigned int)adhoc_start->data_rate[i] == 0U) 
#line 958 
                                                     goto ldv_61597; else ;
  
#line 956 
  i += 1U;
  ldv_61599: 
#line 957 
  ;
  
#line 956 
  if (i <= 13U) 
#line 958 
                goto ldv_61598; else 
#line 961 
                                     goto ldv_61597;
  ldv_61597: 
#line 962 
  ;
  
#line 960 
  priv->curr_bss_params.num_of_rates = i;
  
#line 963 
  memcpy((void *)(& priv->curr_bss_params.data_rates),(void const *)(& adhoc_start->data_rate),(unsigned long)priv->curr_bss_params.num_of_rates);
  
#line 966 
  if ((adapter->debug_mask & 1073741824U) != 0U) {
    
#line 966 
    if (adapter->dev != (struct device *)0) 
#line 966 
                                            _dev_info((struct device const *)adapter->dev,"info: ADHOC_S_CMD: rates=%4ph\n",(u8 *)(& adhoc_start->data_rate)); else ;
  }
  else ;
  
#line 969 
  if ((adapter->debug_mask & 1073741824U) != 0U) {
    
#line 969 
    if (adapter->dev != (struct device *)0) 
#line 969 
                                            _dev_info((struct device const *)adapter->dev,"info: ADHOC_S_CMD: AD-HOC Start command is ready\n"); else ;
  }
  else ;
  
#line 971 
  if (((unsigned long)adapter->fw_cap_info & 12032UL) != 0UL) {
    
#line 973 
    chan_tlv = (struct mwifiex_ie_types_chan_list_param_set *)pos;
    
#line 974 
    chan_tlv->header.type = (unsigned short)257U;
    
#line 975 
    chan_tlv->header.len = (unsigned short)7U;
    
#line 978 
    memset((void *)(& chan_tlv->chan_scan_param),0,7UL);
    
#line 980 
    chan_tlv->chan_scan_param[0].chan_number = (unsigned char)priv->curr_bss_params.bss_descriptor.channel;
    
#line 983 
    if ((adapter->debug_mask & 1073741824U) != 0U) {
      
#line 983 
      if (adapter->dev != (struct device *)0) 
#line 983 
                                              _dev_info((struct device const *)adapter->dev,"info: ADHOC_S_CMD: TLV Chan = %d\n",(int)chan_tlv->chan_scan_param[0].chan_number); else ;
    }
    else ;
    
#line 987 
    chan_tlv->chan_scan_param[0].radio_type = mwifiex_band_to_radio_type((unsigned char)((int)priv->curr_bss_params.band));
    
#line 988 
    if (((int)adapter->adhoc_start_band & 8) != 0 || ((int)adapter->adhoc_start_band & 16) != 0) {
      
#line 990 
      if ((unsigned int)adapter->sec_chan_offset == 1U) 
#line 992 
                                                        chan_tlv->chan_scan_param[0].radio_type = (unsigned char)((unsigned int)chan_tlv->chan_scan_param[0].radio_type | 16U);
      else 
        
#line 994 
        if ((unsigned int)adapter->sec_chan_offset == 3U) 
#line 996 
                                                          chan_tlv->chan_scan_param[0].radio_type = (unsigned char)((unsigned int)chan_tlv->chan_scan_param[0].radio_type | 48U); else ;
    }
    else ;
    
#line 999 
    if ((adapter->debug_mask & 1073741824U) != 0U) {
      
#line 999 
      if (adapter->dev != (struct device *)0) 
#line 999 
                                              _dev_info((struct device const *)adapter->dev,"info: ADHOC_S_CMD: TLV Band = %d\n",(int)chan_tlv->chan_scan_param[0].radio_type); else ;
    }
    else ;
    
#line 1001 
    pos += 11U;
    
#line 1003 
    cmd_append_size += 11U;
  }
  else ;
  
#line 1009 
  tmp_1 = mwifiex_cmd_append_vsie_tlv(priv,(unsigned short)4,& pos);
  
#line 1010 
  cmd_append_size = (unsigned int)tmp_1 + cmd_append_size;
  
#line 1012 
  if ((unsigned int)priv->sec_info.wpa_enabled != 0U) {
    
#line 1013 
    rsn_ie_len = mwifiex_append_rsn_ie_wpa_wpa2(priv,& pos);
    
#line 1014 
    if (rsn_ie_len == -1) {
      
#line 1015 
      __retres = -1;
      
#line 1015 
      goto return_label;
    }
    else ;
    
#line 1016 
    cmd_append_size += (unsigned int)rsn_ie_len;
  }
  else ;
  
#line 1019 
  if ((unsigned int)adapter->adhoc_11n_enabled != 0U) {
    
#line 1021 
    ht_cap = (struct mwifiex_ie_types_htcap *)pos;
    
#line 1022 
    memset((void *)ht_cap,0,30UL);
    
#line 1023 
    ht_cap->header.type = (unsigned short)45U;
    
#line 1024 
    ht_cap->header.len = (unsigned short)26U;
    
#line 1026 
    radio_type = mwifiex_band_to_radio_type((unsigned char)((int)(priv->adapter)->config_bands));
    
#line 1028 
    mwifiex_fill_cap_info(priv,(unsigned char)((int)radio_type),& ht_cap->ht_cap);
    
#line 1030 
    if ((unsigned int)adapter->sec_chan_offset == 0U) {
      u16 tmp_ht_cap;
      
#line 1034 
      tmp_ht_cap = ht_cap->ht_cap.cap_info;
      
#line 1035 
      tmp_ht_cap = (unsigned short)((unsigned int)tmp_ht_cap & 65533U);
      
#line 1036 
      tmp_ht_cap = (unsigned short)((unsigned int)tmp_ht_cap & 65471U);
      
#line 1037 
      ht_cap->ht_cap.cap_info = tmp_ht_cap;
    }
    else ;
    
#line 1040 
    pos += 30U;
    
#line 1041 
    cmd_append_size += 30U;
    
#line 1044 
    ht_info = (struct mwifiex_ie_types_htinfo *)pos;
    
#line 1045 
    memset((void *)ht_info,0,26UL);
    
#line 1046 
    ht_info->header.type = (unsigned short)61U;
    
#line 1047 
    ht_info->header.len = (unsigned short)22U;
    
#line 1050 
    ht_info->ht_oper.primary_chan = (unsigned char)priv->curr_bss_params.bss_descriptor.channel;
    
#line 1052 
    if ((unsigned int)adapter->sec_chan_offset != 0U) {
      
#line 1053 
      ht_info->ht_oper.ht_param = adapter->sec_chan_offset;
      
#line 1054 
      ht_info->ht_oper.ht_param = (unsigned char)((unsigned int)ht_info->ht_oper.ht_param | 4U);
    }
    else ;
    
#line 1057 
    ht_info->ht_oper.operation_mode = (unsigned short)4U;
    
#line 1059 
    ht_info->ht_oper.basic_set[0] = (unsigned char)255U;
    
#line 1060 
    pos += 26U;
    
#line 1061 
    cmd_append_size += 26U;
  }
  else ;
  
#line 1065 
  cmd->size = (unsigned short)((unsigned int)((unsigned short)cmd_append_size) + 77U);
  
#line 1069 
  if ((unsigned int)adapter->adhoc_start_band == 1U) 
#line 1070 
                                                     tmp_cap = (unsigned short)((unsigned int)tmp_cap & 64511U); else 
                                                                    
#line 1072 
                                                                    tmp_cap = (unsigned short)((unsigned int)tmp_cap | 1024U);
  
#line 1074 
  adhoc_start->cap_info_bitmap = tmp_cap;
  
#line 1076 
  __retres = 0;
  return_label: 
#line 1076 
                return __retres;
}


#line 1096  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/join.c"
int mwifiex_cmd_802_11_ad_hoc_join(struct mwifiex_private *priv, struct host_cmd_ds_command *cmd, struct mwifiex_bssdescriptor *bss_desc)
{
  int __retres;
  struct mwifiex_ie_types_chan_list_param_set *chan_tlv;
  u16 tmp_cap;
  u32 i;
  u16 curr_pkt_filter;
  int tmp_1;
  
#line 1100 
  int rsn_ie_len = 0;
  
#line 1101 
  struct host_cmd_ds_802_11_ad_hoc_join *adhoc_join = & cmd->params.adhoc_join;
  
#line 1104 
  u32 cmd_append_size = 0U;
  
#line 1106 
  u32 rates_size = 0U;
  
#line 1108 
  u8 *pos = (u8 *)adhoc_join + 93U;
  
#line 1114 
  if (((int)bss_desc->erp_flags & 2) != 0) {
    int tmp;
    
#line 1115 
    curr_pkt_filter = (unsigned short)((unsigned int)priv->curr_pkt_filter | 8192U);
    
#line 1119 
    tmp = mwifiex_send_cmd(priv,(unsigned short)40,(unsigned short)1,0U,(void *)(& curr_pkt_filter),(_Bool)0);
    
#line 1119 
    if (tmp != 0) {
      
#line 1122 
      if (((priv->adapter)->debug_mask & 4U) != 0U) {
        
#line 1122 
        if ((priv->adapter)->dev != (struct device *)0) 
#line 1122 
                                                        _dev_info((struct device const *)(priv->adapter)->dev,"ADHOC_J_CMD: G Protection config failed\n"); else ;
      }
      else ;
      
#line 1124 
      __retres = -1;
      
#line 1124 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 1128 
  priv->attempted_bss_desc = bss_desc;
  
#line 1130 
  cmd->command = (unsigned short)44U;
  
#line 1132 
  adhoc_join->bss_descriptor.bss_mode = (unsigned char)2U;
  
#line 1135 
  adhoc_join->bss_descriptor.beacon_period = bss_desc->beacon_period;
  
#line 1137 
  memcpy((void *)(& adhoc_join->bss_descriptor.bssid),(void const *)(& bss_desc->mac_address),6UL);
  
#line 1140 
  memcpy((void *)(& adhoc_join->bss_descriptor.ssid),(void const *)(& bss_desc->ssid.ssid),(unsigned long)bss_desc->ssid.ssid_len);
  
#line 1143 
  memcpy((void *)(& adhoc_join->bss_descriptor.phy_param_set),(void const *)(& bss_desc->phy_param_set),7UL);
  
#line 1147 
  memcpy((void *)(& adhoc_join->bss_descriptor.ss_param_set),(void const *)(& bss_desc->ss_param_set),8UL);
  
#line 1150 
  tmp_cap = bss_desc->cap_info_bitmap;
  
#line 1152 
  tmp_cap = (unsigned short)((unsigned int)tmp_cap & 9727U);
  
#line 1154 
  if (((priv->adapter)->debug_mask & 1073741824U) != 0U) {
    
#line 1154 
    if ((priv->adapter)->dev != (struct device *)0) 
#line 1154 
                                                    _dev_info((struct device const *)(priv->adapter)->dev,"info: ADHOC_J_CMD: tmp_cap=%4X CAPINFO_MASK=%4lX\n",(int)tmp_cap,18446744073709495807UL); else ;
  }
  else ;
  
#line 1159 
  if (((priv->adapter)->debug_mask & 1073741824U) != 0U) {
    
#line 1159 
    if ((priv->adapter)->dev != (struct device *)0) 
#line 1159 
                                                    _dev_info((struct device const *)(priv->adapter)->dev,"info: ADHOC_J_CMD: BSSID=%pM, SSID=\'%s\'\n",(u8 *)(& adhoc_join->bss_descriptor.bssid),(u8 *)(& adhoc_join->bss_descriptor.ssid)); else ;
  }
  else ;
  
#line 1164 
  i = 0U;
  
#line 1164 
  goto ldv_61616;
  ldv_61615: 
#line 1165 
  ;
  
#line 1165 
  i += 1U;
  ldv_61616: 
#line 1166 
  ;
  
#line 1164 
  if (i <= 13U && (unsigned int)bss_desc->supported_rates[i] != 0U) 
#line 1166 
                                                                    goto ldv_61615; else 
                                                                    
#line 1169 
                                                                    goto ldv_61617;
  ldv_61617: 
#line 1170 
  ;
  
#line 1167 
  rates_size = i;
  
#line 1170 
  memset((void *)(& adhoc_join->bss_descriptor.data_rates),0,14UL);
  
#line 1172 
  memcpy((void *)(& adhoc_join->bss_descriptor.data_rates),(void const *)(& bss_desc->supported_rates),(unsigned long)rates_size);
  
#line 1176 
  priv->curr_bss_params.num_of_rates = rates_size;
  
#line 1177 
  memcpy((void *)(& priv->curr_bss_params.data_rates),(void const *)(& bss_desc->supported_rates),(unsigned long)rates_size);
  
#line 1181 
  priv->curr_bss_params.bss_descriptor.channel = bss_desc->channel;
  
#line 1182 
  priv->curr_bss_params.band = (unsigned char)bss_desc->bss_band;
  
#line 1184 
  if ((unsigned int)priv->sec_info.wep_enabled != 0U || (unsigned int)priv->sec_info.wpa_enabled != 0U) 
    
#line 1185 
    tmp_cap = (unsigned short)((unsigned int)tmp_cap | 16U); else ;
  
#line 1187 
  if (((unsigned long)(priv->adapter)->fw_cap_info & 12032UL) != 0UL) {
    
#line 1189 
    chan_tlv = (struct mwifiex_ie_types_chan_list_param_set *)pos;
    
#line 1190 
    chan_tlv->header.type = (unsigned short)257U;
    
#line 1191 
    chan_tlv->header.len = (unsigned short)7U;
    
#line 1194 
    memset((void *)(& chan_tlv->chan_scan_param),0,7UL);
    
#line 1196 
    chan_tlv->chan_scan_param[0].chan_number = bss_desc->phy_param_set.ds_param_set.current_chan;
    
#line 1198 
    if (((priv->adapter)->debug_mask & 1073741824U) != 0U) {
      
#line 1198 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 1198 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"info: ADHOC_J_CMD: TLV Chan=%d\n",(int)chan_tlv->chan_scan_param[0].chan_number); else ;
    }
    else ;
    
#line 1201 
    chan_tlv->chan_scan_param[0].radio_type = mwifiex_band_to_radio_type((unsigned char)((int)((unsigned char)bss_desc->bss_band)));
    
#line 1204 
    if (((priv->adapter)->debug_mask & 1073741824U) != 0U) {
      
#line 1204 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 1204 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"info: ADHOC_J_CMD: TLV Band=%d\n",(int)chan_tlv->chan_scan_param[0].radio_type); else ;
    }
    else ;
    
#line 1206 
    pos += 11U;
    
#line 1208 
    cmd_append_size += 11U;
  }
  else ;
  
#line 1212 
  if ((unsigned int)priv->sec_info.wpa_enabled != 0U) 
#line 1213 
                                                      rsn_ie_len = mwifiex_append_rsn_ie_wpa_wpa2(priv,& pos); else ;
  
#line 1214 
  if (rsn_ie_len == -1) {
    
#line 1215 
    __retres = -1;
    
#line 1215 
    goto return_label;
  }
  else ;
  
#line 1216 
  cmd_append_size += (unsigned int)rsn_ie_len;
  
#line 1218 
  if (((unsigned long)(priv->adapter)->fw_cap_info & 2048UL) != 0UL) {
    int tmp_0;
    
#line 1219 
    tmp_0 = mwifiex_cmd_append_11n_tlv(priv,bss_desc,& pos);
    
#line 1220 
    cmd_append_size = (unsigned int)tmp_0 + cmd_append_size;
  }
  else ;
  
#line 1223 
  tmp_1 = mwifiex_cmd_append_vsie_tlv(priv,(unsigned short)4,& pos);
  
#line 1224 
  cmd_append_size = (unsigned int)tmp_1 + cmd_append_size;
  
#line 1226 
  cmd->size = (unsigned short)((unsigned int)((unsigned short)cmd_append_size) + 101U);
  
#line 1230 
  adhoc_join->bss_descriptor.cap_info_bitmap = tmp_cap;
  
#line 1232 
  __retres = 0;
  return_label: 
#line 1232 
                return __retres;
}


#line 1243  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/join.c"
int mwifiex_ret_802_11_ad_hoc(struct mwifiex_private *priv, struct host_cmd_ds_command *resp)
{
  struct host_cmd_ds_802_11_ad_hoc_result *adhoc_result;
  struct mwifiex_bssdescriptor *bss_desc;
  u16 reason_code;
  int tmp_0;
  bool tmp;
  
#line 1246 
  int ret = 0;
  
#line 1247 
  struct mwifiex_adapter *adapter = priv->adapter;
  
#line 1252 
  adhoc_result = & resp->params.adhoc_result;
  
#line 1254 
  bss_desc = priv->attempted_bss_desc;
  
#line 1257 
  reason_code = resp->result;
  
#line 1258 
  if ((unsigned int)reason_code != 0U) {
    
#line 1259 
    if (((priv->adapter)->debug_mask & 4U) != 0U) {
      
#line 1259 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 1259 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"ADHOC_RESP: failed\n"); else ;
    }
    else ;
    
#line 1260 
    if ((unsigned int)priv->media_connected != 0U) 
#line 1261 
                                                   mwifiex_reset_connect_state(priv,(unsigned short)((int)reason_code)); else ;
    
#line 1263 
    memset((void *)(& priv->curr_bss_params.bss_descriptor),0,336UL);
    
#line 1266 
    ret = -1;
    
#line 1267 
    goto done;
  }
  else ;
  
#line 1271 
  priv->media_connected = (unsigned char)1U;
  
#line 1273 
  if ((unsigned int)resp->command == 43U) {
    
#line 1274 
    if (((priv->adapter)->debug_mask & 1073741824U) != 0U) {
      
#line 1274 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 1274 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"info: ADHOC_S_RESP %s\n",(u8 *)(& bss_desc->ssid.ssid)); else ;
    }
    else ;
    
#line 1278 
    memcpy((void *)(& bss_desc->mac_address),(void const *)(& adhoc_result->bssid),6UL);
    
#line 1281 
    priv->adhoc_state = (unsigned char)1U;
  }
  else {
    
#line 1287 
    if (((priv->adapter)->debug_mask & 1073741824U) != 0U) {
      
#line 1287 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 1287 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"info: ADHOC_J_RESP %s\n",(u8 *)(& bss_desc->ssid.ssid)); else ;
    }
    else ;
    
#line 1296 
    memcpy((void *)(& priv->curr_bss_params.bss_descriptor),(void const *)bss_desc,336UL);
    
#line 1299 
    priv->adhoc_state = (unsigned char)2U;
  }
  
#line 1302 
  if (((priv->adapter)->debug_mask & 1073741824U) != 0U) {
    
#line 1302 
    if ((priv->adapter)->dev != (struct device *)0) 
#line 1302 
                                                    _dev_info((struct device const *)(priv->adapter)->dev,"info: ADHOC_RESP: channel = %d\n",(int)priv->adhoc_channel); else ;
  }
  else ;
  
#line 1304 
  if (((priv->adapter)->debug_mask & 1073741824U) != 0U) {
    
#line 1304 
    if ((priv->adapter)->dev != (struct device *)0) 
#line 1304 
                                                    _dev_info((struct device const *)(priv->adapter)->dev,"info: ADHOC_RESP: BSSID = %pM\n",(u8 *)(& priv->curr_bss_params.bss_descriptor.mac_address)); else ;
  }
  else ;
  
#line 1307 
  tmp = netif_carrier_ok((struct net_device const *)priv->netdev);
  
#line 1307 
  if (tmp) 
#line 1307 
           tmp_0 = 0; else 
#line 1307 
                           tmp_0 = 1;
  
#line 1307 
  if (tmp_0) 
#line 1308 
             netif_carrier_on(priv->netdev); else ;
  
#line 1309 
  mwifiex_wake_up_net_dev_queue(priv->netdev,adapter);
  
#line 1311 
  mwifiex_save_curr_bcn(priv);
  done: 
#line 1313 
  ;
  
#line 1315 
  if ((adapter->curr_cmd)->wait_q_enabled != 0U) 
    
#line 1316 
    if (ret != 0) 
#line 1317 
                  adapter->cmd_wait_q.status = -1; else 
#line 1319 
                                                        adapter->cmd_wait_q.status = 0;
  else ;
  
#line 1323 
  return ret;
}


#line 1333  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/join.c"
int mwifiex_associate(struct mwifiex_private *priv, struct mwifiex_bssdescriptor *bss_desc)
{
  int __retres;
  int tmp;
  
#line 1339 
  if (((unsigned long)priv->bss_role & 1UL) != 0UL || bss_desc->bss_mode != 2U) {
    
#line 1341 
    __retres = -1;
    
#line 1341 
    goto return_label;
  }
  else ;
  
#line 1343 
  if (((((unsigned long)(priv->adapter)->fw_cap_info & 8192UL) != 0UL && (unsigned int)bss_desc->disable_11n == 0U) && (unsigned int)bss_desc->disable_11ac == 0U) && ((int)(priv->adapter)->config_bands & 32) != 0) 
    
#line 1346 
    mwifiex_set_11ac_ba_params(priv); else 
#line 1348 
                                           mwifiex_set_ba_params(priv);
  
#line 1352 
  priv->assoc_rsp_size = 0U;
  
#line 1354 
  tmp = mwifiex_send_cmd(priv,(unsigned short)18,(unsigned short)1,0U,(void *)bss_desc,(_Bool)1);
  
#line 1354 
  __retres = tmp;
  return_label: 
#line 1354 
                return __retres;
}


#line 1364  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/join.c"
int mwifiex_adhoc_start(struct mwifiex_private *priv, struct cfg80211_ssid *adhoc_ssid)
{
  int tmp;
  
#line 1367 
  if (((priv->adapter)->debug_mask & 1073741824U) != 0U) {
    
#line 1367 
    if ((priv->adapter)->dev != (struct device *)0) 
#line 1367 
                                                    _dev_info((struct device const *)(priv->adapter)->dev,"info: Adhoc Channel = %d\n",(int)priv->adhoc_channel); else ;
  }
  else ;
  
#line 1369 
  if (((priv->adapter)->debug_mask & 1073741824U) != 0U) {
    
#line 1369 
    if ((priv->adapter)->dev != (struct device *)0) 
#line 1369 
                                                    _dev_info((struct device const *)(priv->adapter)->dev,"info: curr_bss_params.channel = %d\n",priv->curr_bss_params.bss_descriptor.channel); else ;
  }
  else ;
  
#line 1371 
  if (((priv->adapter)->debug_mask & 1073741824U) != 0U) {
    
#line 1371 
    if ((priv->adapter)->dev != (struct device *)0) 
#line 1371 
                                                    _dev_info((struct device const *)(priv->adapter)->dev,"info: curr_bss_params.band = %d\n",(int)priv->curr_bss_params.band); else ;
  }
  else ;
  
#line 1374 
  if (((unsigned long)(priv->adapter)->fw_cap_info & 8192UL) != 0UL && ((int)(priv->adapter)->config_bands & 32) != 0) 
    
#line 1376 
    mwifiex_set_11ac_ba_params(priv); else 
#line 1378 
                                           mwifiex_set_ba_params(priv);
  
#line 1380 
  tmp = mwifiex_send_cmd(priv,(unsigned short)43,(unsigned short)1,0U,(void *)adhoc_ssid,(_Bool)1);
  
#line 1380 
  return tmp;
}


#line 1390  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/join.c"
int mwifiex_adhoc_join(struct mwifiex_private *priv, struct mwifiex_bssdescriptor *bss_desc)
{
  int __retres;
  int tmp_0;
  
#line 1393 
  if (((priv->adapter)->debug_mask & 1073741824U) != 0U) {
    
#line 1393 
    if ((priv->adapter)->dev != (struct device *)0) 
#line 1393 
                                                    _dev_info((struct device const *)(priv->adapter)->dev,"info: adhoc join: curr_bss ssid =%s\n",(u8 *)(& priv->curr_bss_params.bss_descriptor.ssid.ssid)); else ;
  }
  else ;
  
#line 1396 
  if (((priv->adapter)->debug_mask & 1073741824U) != 0U) {
    
#line 1396 
    if ((priv->adapter)->dev != (struct device *)0) 
#line 1396 
                                                    _dev_info((struct device const *)(priv->adapter)->dev,"info: adhoc join: curr_bss ssid_len =%u\n",(int)priv->curr_bss_params.bss_descriptor.ssid.ssid_len); else ;
  }
  else ;
  
#line 1399 
  if (((priv->adapter)->debug_mask & 1073741824U) != 0U) {
    
#line 1399 
    if ((priv->adapter)->dev != (struct device *)0) 
#line 1399 
                                                    _dev_info((struct device const *)(priv->adapter)->dev,"info: adhoc join: ssid =%s\n",(u8 *)(& bss_desc->ssid.ssid)); else ;
  }
  else ;
  
#line 1401 
  if (((priv->adapter)->debug_mask & 1073741824U) != 0U) {
    
#line 1401 
    if ((priv->adapter)->dev != (struct device *)0) 
#line 1401 
                                                    _dev_info((struct device const *)(priv->adapter)->dev,"info: adhoc join: ssid_len =%u\n",(int)bss_desc->ssid.ssid_len); else ;
  }
  else ;
  
#line 1405 
  if ((unsigned int)priv->curr_bss_params.bss_descriptor.ssid.ssid_len != 0U) {
    s32 tmp;
    
#line 1405 
    tmp = mwifiex_ssid_cmp(& bss_desc->ssid,& priv->curr_bss_params.bss_descriptor.ssid);
    
#line 1405 
    if (tmp == 0) {
      
#line 1407 
      if (priv->curr_bss_params.bss_descriptor.bss_mode == 1U) {
        
#line 1410 
        if (((priv->adapter)->debug_mask & 1073741824U) != 0U) {
          
#line 1410 
          if ((priv->adapter)->dev != (struct device *)0) 
#line 1410 
                                                          _dev_info((struct device const *)(priv->adapter)->dev,"info: ADHOC_J_CMD: new ad-hoc SSID\t"); else ;
        }
        else ;
        
#line 1413 
        __retres = -1;
        
#line 1413 
        goto return_label;
      }
      else ;
    }
    else ;
  }
  else ;
  
#line 1416 
  if (((((unsigned long)(priv->adapter)->fw_cap_info & 8192UL) != 0UL && (unsigned int)bss_desc->disable_11n == 0U) && (unsigned int)bss_desc->disable_11ac == 0U) && ((int)(priv->adapter)->config_bands & 32) != 0) 
    
#line 1419 
    mwifiex_set_11ac_ba_params(priv); else 
#line 1421 
                                           mwifiex_set_ba_params(priv);
  
#line 1423 
  if (((priv->adapter)->debug_mask & 1073741824U) != 0U) {
    
#line 1423 
    if ((priv->adapter)->dev != (struct device *)0) 
#line 1423 
                                                    _dev_info((struct device const *)(priv->adapter)->dev,"info: curr_bss_params.channel = %d\n",priv->curr_bss_params.bss_descriptor.channel); else ;
  }
  else ;
  
#line 1426 
  if (((priv->adapter)->debug_mask & 1073741824U) != 0U) {
    
#line 1426 
    if ((priv->adapter)->dev != (struct device *)0) 
#line 1426 
                                                    _dev_info((struct device const *)(priv->adapter)->dev,"info: curr_bss_params.band = %c\n",(int)priv->curr_bss_params.band); else ;
  }
  else ;
  
#line 1430 
  tmp_0 = mwifiex_send_cmd(priv,(unsigned short)44,(unsigned short)1,0U,(void *)bss_desc,(_Bool)1);
  
#line 1430 
  __retres = tmp_0;
  return_label: 
#line 1430 
                return __retres;
}


#line 1438  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/join.c"
static int mwifiex_deauthenticate_infra(struct mwifiex_private *priv, u8 *mac)
{
  u8 mac_address[6U];
  int ret;
  
#line 1443 
  if (mac == (u8 *)0U) 
#line 1443 
                       goto _LOR;
  else {
    bool tmp;
    
#line 1443 
    tmp = is_zero_ether_addr((u8 const *)mac);
    
#line 1443 
    if ((int)tmp != 0) _LOR: 
#line 1444 
                             memcpy((void *)(& mac_address),(void const *)(& priv->curr_bss_params.bss_descriptor.mac_address),6UL); else 
                                                                    
#line 1448 
                                                                    memcpy((void *)(& mac_address),(void const *)mac,6UL);
  }
  
#line 1450 
  ret = mwifiex_send_cmd(priv,(unsigned short)36,(unsigned short)1,0U,(void *)(& mac_address),(_Bool)1);
  
#line 1453 
  return ret;
}


#line 1463  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/join.c"
int mwifiex_deauthenticate(struct mwifiex_private *priv, u8 *mac)
{
  int __retres;
  
#line 1465 
  int ret = 0;
  
#line 1467 
  if ((unsigned int)priv->media_connected == 0U) {
    
#line 1468 
    __retres = 0;
    
#line 1468 
    goto return_label;
  }
  else ;
  
#line 1470 
  switch (priv->bss_mode) {
    int tmp;
    int tmp_0;
    case (u32)2: 
#line 1471 
    ;
    case (u32)8: 
#line 1472 
    ;
    
#line 1473 
    ret = mwifiex_deauthenticate_infra(priv,mac);
    
#line 1474 
    if (ret != 0) 
#line 1475 
                  cfg80211_disconnected(priv->netdev,(unsigned short)0,(u8 const *)0U,0UL,(_Bool)1,208U); else ;
    
#line 1477 
    goto ldv_61653;
    case (u32)1: 
#line 1478 
    ;
    
#line 1479 
    tmp = mwifiex_send_cmd(priv,(unsigned short)64,(unsigned short)1,0U,(void *)0,(_Bool)1);
    
#line 1479 
    __retres = tmp;
    
#line 1479 
    goto return_label;
    case (u32)3: 
#line 1481 
    ;
    
#line 1482 
    tmp_0 = mwifiex_send_cmd(priv,(unsigned short)178,(unsigned short)1,0U,(void *)0,(_Bool)1);
    
#line 1482 
    __retres = tmp_0;
    
#line 1482 
    goto return_label;
    default: 
#line 1484 
    ;
    
#line 1485 
    goto ldv_61653;
  }
  ldv_61653: 
#line 1488 
  ;
  
#line 1488 
  __retres = ret;
  return_label: 
#line 1488 
                return __retres;
}


#line 1492  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/join.c"
void mwifiex_deauthenticate_all(struct mwifiex_adapter *adapter)
{
  struct mwifiex_private *priv;
  int i;
  
#line 1497 
  i = 0;
  
#line 1497 
  goto ldv_61663;
  ldv_61662: 
#line 1498 
  ;
  
#line 1498 
  priv = adapter->priv[i];
  
#line 1499 
  if (priv != (struct mwifiex_private *)0) 
#line 1500 
                                           mwifiex_deauthenticate(priv,(u8 *)0U); else ;
  
#line 1497 
  i += 1;
  ldv_61663: 
#line 1498 
  ;
  
#line 1497 
  if ((int)adapter->priv_num > i) 
#line 1499 
                                  goto ldv_61662; else 
#line 1502 
                                                       goto ldv_61664;
  ldv_61664: 
#line 1503 
  ;
  
#line 1504 
  return;
}


#line 1503  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/join.c"
static char const __kstrtab_mwifiex_deauthenticate_all[27U] = {(char)'m', (char)'w', (char)'i', (char)'f', (char)'i', (char)'e', (char)'x', (char)'_', (char)'d', (char)'e', (char)'a', (char)'u', (char)'t', (char)'h', (char)'e', (char)'n', (char)'t', (char)'i', (char)'c', (char)'a', (char)'t', (char)'e', (char)'_', (char)'a', (char)'l', (char)'l', (char)'\000'};

#line 1503 
struct kernel_symbol const __ksymtab_mwifiex_deauthenticate_all;


#line 1503  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/join.c"
struct kernel_symbol const __ksymtab_mwifiex_deauthenticate_all = {.value = (unsigned long)(& mwifiex_deauthenticate_all), .name = (char const *)(& __kstrtab_mwifiex_deauthenticate_all)};

#line 1509  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/join.c"
u8 mwifiex_band_to_radio_type(u8 band)
{
  u8 __retres;
  
#line 1511 
  switch ((int)band) {
    case 4: 
#line 1512 
    ;
    case 16: 
#line 1513 
    ;
    case 20: 
#line 1514 
    ;
    case 52: 
#line 1515 
    ;
    
#line 1516 
    __retres = (unsigned char)1U;
    
#line 1516 
    goto return_label;
    case 1: 
#line 1517 
    ;
    case 2: 
#line 1518 
    ;
    case 3: 
#line 1519 
    ;
    default: 
#line 1520 
    ;
    
#line 1521 
    __retres = (unsigned char)0U;
    
#line 1521 
    goto return_label;
  }
  return_label: 
#line 1511 
                return __retres;
}


#line 394  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernel.h"
long simple_strtol(char const *, char **, unsigned int);


#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/string.h"
int strncmp(char const *, char const *, __kernel_size_t);


#line 241  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/of.h"
struct device_node *of_find_node_by_name(struct device_node *, char const *);


#line 283 
int of_property_read_u8_array(struct device_node const *, char const *, u8 *, size_t);


#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ctype.h"
extern unsigned char const _ctype[];


#line 1092  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.h"
int mwifiex_sta_init_cmd(struct mwifiex_private *priv, u8 first_sta, bool init);


#line 1446 
int mwifiex_dnld_dt_cfgdata(struct mwifiex_private *priv, struct device_node *node, char const *prefix);


#line 31  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11n.h"
int mwifiex_cmd_11n_cfg(struct mwifiex_private *priv, struct host_cmd_ds_command *cmd, u16 cmd_action, struct mwifiex_ds_11n_tx_cfg *txcfg);


#line 59 
int mwifiex_cmd_recfg_tx_buf(struct mwifiex_private *priv, struct host_cmd_ds_command *cmd, int cmd_action, u16 *buf_size);


#line 62 
int mwifiex_cmd_amsdu_aggr_ctrl(struct host_cmd_ds_command *cmd, int cmd_action, struct mwifiex_ds_11n_amsdu_aggr_ctrl *aa_ctrl);


#line 40  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11ac.h"
int mwifiex_cmd_11ac_cfg(struct mwifiex_private *priv, struct host_cmd_ds_command *cmd, u16 cmd_action, struct mwifiex_11ac_vht_cfg *cfg);


#line 29  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_cmd.c"
static bool disable_auto_ds;

#line 43  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_cmd.c"
static int mwifiex_cmd_802_11_rssi_info(struct mwifiex_private *priv, struct host_cmd_ds_command *cmd, u16 cmd_action)
{
  int __retres;
  
#line 46 
  cmd->command = (unsigned short)164U;
  
#line 47 
  cmd->size = (unsigned short)40U;
  
#line 49 
  cmd->params.rssi_info.action = cmd_action;
  
#line 50 
  cmd->params.rssi_info.ndata = priv->data_avg_factor;
  
#line 51 
  cmd->params.rssi_info.nbcn = priv->bcn_avg_factor;
  
#line 54 
  priv->data_rssi_last = (short)0;
  
#line 55 
  priv->data_nf_last = (short)0;
  
#line 56 
  priv->data_rssi_avg = (short)0;
  
#line 57 
  priv->data_nf_avg = (short)0;
  
#line 58 
  priv->bcn_rssi_last = (short)0;
  
#line 59 
  priv->bcn_nf_last = (short)0;
  
#line 60 
  priv->bcn_rssi_avg = (short)0;
  
#line 61 
  priv->bcn_nf_avg = (short)0;
  
#line 63 
  __retres = 0;
  
#line 63 
  return __retres;
}


#line 73  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_cmd.c"
static int mwifiex_cmd_mac_control(struct mwifiex_private *priv, struct host_cmd_ds_command *cmd, u16 cmd_action, u16 *action)
{
  int __retres;
  
#line 77 
  struct host_cmd_ds_mac_control *mac_ctrl = & cmd->params.mac_ctrl;
  
#line 79 
  if ((unsigned int)cmd_action != 1U) {
    
#line 80 
    if (((priv->adapter)->debug_mask & 4U) != 0U) {
      
#line 80 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 80 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"mac_control: only support set cmd\n"); else ;
    }
    else ;
    
#line 82 
    __retres = -1;
    
#line 82 
    goto return_label;
  }
  else ;
  
#line 85 
  cmd->command = (unsigned short)40U;
  
#line 86 
  cmd->size = (unsigned short)12U;
  
#line 88 
  mac_ctrl->action = *action;
  
#line 90 
  __retres = 0;
  return_label: 
#line 90 
                return __retres;
}


#line 108  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_cmd.c"
static int mwifiex_cmd_802_11_snmp_mib(struct mwifiex_private *priv, struct host_cmd_ds_command *cmd, u16 cmd_action, u32 cmd_oid, u16 *ul_temp)
{
  int __retres;
  
#line 113 
  struct host_cmd_ds_802_11_snmp_mib *snmp_mib = & cmd->params.smib;
  
#line 115 
  if (((priv->adapter)->debug_mask & 16U) != 0U) {
    
#line 115 
    if ((priv->adapter)->dev != (struct device *)0) 
#line 115 
                                                    _dev_info((struct device const *)(priv->adapter)->dev,"cmd: SNMP_CMD: cmd_oid = 0x%x\n",cmd_oid); else ;
  }
  else ;
  
#line 117 
  cmd->command = (unsigned short)22U;
  
#line 118 
  cmd->size = (unsigned short)14U;
  
#line 121 
  snmp_mib->oid = (unsigned short)cmd_oid;
  
#line 122 
  if ((unsigned int)cmd_action == 0U) {
    
#line 123 
    snmp_mib->query_type = (unsigned short)0U;
    
#line 124 
    snmp_mib->buf_size = (unsigned short)128U;
    
#line 125 
    le16_add_cpu(& cmd->size,(unsigned short)128);
  }
  else 
    
#line 126 
    if ((unsigned int)cmd_action == 1U) {
      
#line 127 
      snmp_mib->query_type = (unsigned short)1U;
      
#line 128 
      snmp_mib->buf_size = (unsigned short)2U;
      
#line 129 
      *((__le16 *)(& snmp_mib->value)) = *ul_temp;
      
#line 130 
      le16_add_cpu(& cmd->size,(unsigned short)2);
    }
    else ;
  
#line 133 
  if (((priv->adapter)->debug_mask & 16U) != 0U) {
    
#line 133 
    if ((priv->adapter)->dev != (struct device *)0) 
#line 133 
                                                    _dev_info((struct device const *)(priv->adapter)->dev,"cmd: SNMP_CMD: Action=0x%x, OID=0x%x,\t",(int)cmd_action,cmd_oid,(int)snmp_mib->buf_size,(int)*((__le16 *)(& snmp_mib->value))); else ;
  }
  else ;
  
#line 138 
  __retres = 0;
  
#line 138 
  return __retres;
}


#line 149  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_cmd.c"
static int mwifiex_cmd_802_11_get_log(struct host_cmd_ds_command *cmd)
{
  int __retres;
  
#line 151 
  cmd->command = (unsigned short)11U;
  
#line 152 
  cmd->size = (unsigned short)84U;
  
#line 154 
  __retres = 0;
  
#line 154 
  return __retres;
}


#line 166  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_cmd.c"
static int mwifiex_cmd_tx_rate_cfg(struct mwifiex_private *priv, struct host_cmd_ds_command *cmd, u16 cmd_action, u16 *pbitmap_rates)
{
  int __retres;
  struct mwifiex_rate_scope *rate_scope;
  struct mwifiex_rate_drop_pattern *rate_drop;
  u32 i;
  
#line 170 
  struct host_cmd_ds_tx_rate_cfg *rate_cfg = & cmd->params.tx_rate_cfg;
  
#line 175 
  cmd->command = (unsigned short)214U;
  
#line 177 
  rate_cfg->action = cmd_action;
  
#line 178 
  rate_cfg->cfg_index = (unsigned short)0U;
  
#line 180 
  rate_scope = (struct mwifiex_rate_scope *)rate_cfg + 4U;
  
#line 182 
  rate_scope->type = (unsigned short)339U;
  
#line 183 
  rate_scope->length = (unsigned short)36U;
  
#line 185 
  if (pbitmap_rates != (u16 *)0U) {
    
#line 186 
    rate_scope->hr_dsss_rate_bitmap = *pbitmap_rates;
    
#line 187 
    rate_scope->ofdm_rate_bitmap = *(pbitmap_rates + 1U);
    
#line 188 
    i = 0U;
    
#line 188 
    goto ldv_61531;
    ldv_61530: 
#line 189 
    ;
    
#line 191 
    rate_scope->ht_mcs_rate_bitmap[i] = *(pbitmap_rates + (i + 2U));
    
#line 190 
    i += 1U;
    ldv_61531: 
#line 191 
    ;
    
#line 188 
    if (i <= 7U) 
#line 191 
                 goto ldv_61530; else 
#line 194 
                                      goto ldv_61532;
    ldv_61532: 
#line 195 
    ;
    
#line 193 
    if ((unsigned int)(priv->adapter)->fw_api_ver == 15U) {
      
#line 194 
      i = 0U;
      
#line 194 
      goto ldv_61537;
      ldv_61536: 
#line 195 
      ;
      
#line 197 
      rate_scope->vht_mcs_rate_bitmap[i] = *(pbitmap_rates + (i + 10U));
      
#line 196 
      i += 1U;
      ldv_61537: 
#line 197 
      ;
      
#line 194 
      if (i <= 7U) 
#line 197 
                   goto ldv_61536; else 
#line 200 
                                        goto ldv_61538;
      ldv_61538: 
#line 201 
      ;
    }
    else ;
  }
  else {
    
#line 201 
    rate_scope->hr_dsss_rate_bitmap = priv->bitmap_rates[0];
    
#line 203 
    rate_scope->ofdm_rate_bitmap = priv->bitmap_rates[1];
    
#line 205 
    i = 0U;
    
#line 205 
    goto ldv_61540;
    ldv_61539: 
#line 206 
    ;
    
#line 208 
    rate_scope->ht_mcs_rate_bitmap[i] = priv->bitmap_rates[i + 2U];
    
#line 207 
    i += 1U;
    ldv_61540: 
#line 208 
    ;
    
#line 205 
    if (i <= 7U) 
#line 208 
                 goto ldv_61539; else 
#line 211 
                                      goto ldv_61541;
    ldv_61541: 
#line 212 
    ;
    
#line 210 
    if ((unsigned int)(priv->adapter)->fw_api_ver == 15U) {
      
#line 211 
      i = 0U;
      
#line 211 
      goto ldv_61546;
      ldv_61545: 
#line 212 
      ;
      
#line 214 
      rate_scope->vht_mcs_rate_bitmap[i] = priv->bitmap_rates[i + 10U];
      
#line 213 
      i += 1U;
      ldv_61546: 
#line 214 
      ;
      
#line 211 
      if (i <= 7U) 
#line 214 
                   goto ldv_61545; else 
#line 217 
                                        goto ldv_61547;
      ldv_61547: 
#line 218 
      ;
    }
    else ;
  }
  
#line 219 
  rate_drop = (struct mwifiex_rate_drop_pattern *)rate_scope + 40U;
  
#line 221 
  rate_drop->type = (unsigned short)338U;
  
#line 222 
  rate_drop->length = (unsigned short)4U;
  
#line 223 
  rate_drop->rate_drop_mode = 0U;
  
#line 225 
  cmd->size = (unsigned short)60U;
  
#line 230 
  __retres = 0;
  
#line 230 
  return __retres;
}


#line 242  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_cmd.c"
static int mwifiex_cmd_tx_power_cfg(struct host_cmd_ds_command *cmd, u16 cmd_action, struct host_cmd_ds_txpwr_cfg *txp)
{
  int __retres;
  struct mwifiex_types_power_group *pg_tlv;
  
#line 247 
  struct host_cmd_ds_txpwr_cfg *cmd_txp_cfg = & cmd->params.txp_cfg;
  
#line 249 
  cmd->command = (unsigned short)209U;
  
#line 250 
  cmd->size = (unsigned short)16U;
  
#line 252 
  switch ((int)cmd_action) {
    case 1: 
#line 253 
    ;
    
#line 254 
    if (txp->mode != 0U) {
      
#line 255 
      pg_tlv = (struct mwifiex_types_power_group *)((unsigned long)txp + 8UL);
      
#line 258 
      memmove((void *)cmd_txp_cfg,(void const *)txp,(unsigned long)pg_tlv->length + 12UL);
      
#line 263 
      pg_tlv = (struct mwifiex_types_power_group *)cmd_txp_cfg + 8U;
      
#line 266 
      cmd->size = (unsigned short)((unsigned int)((int)cmd->size + (int)pg_tlv->length) + 4U);
    }
    else 
#line 270 
         memmove((void *)cmd_txp_cfg,(void const *)txp,8UL);
    
#line 272 
    cmd_txp_cfg->action = cmd_action;
    
#line 273 
    goto ldv_61556;
    case 0: 
#line 274 
    ;
    
#line 275 
    cmd_txp_cfg->action = cmd_action;
    
#line 276 
    goto ldv_61556;
  }
  ldv_61556: 
#line 279 
  ;
  
#line 279 
  __retres = 0;
  
#line 279 
  return __retres;
}


#line 285  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_cmd.c"
static int mwifiex_cmd_rf_tx_power(struct mwifiex_private *priv, struct host_cmd_ds_command *cmd, u16 cmd_action, void *data_buf)
{
  int __retres;
  
#line 289 
  struct host_cmd_ds_rf_tx_pwr *txp = & cmd->params.txp;
  
#line 291 
  cmd->size = (unsigned short)14U;
  
#line 293 
  cmd->command = (unsigned short)30U;
  
#line 294 
  txp->action = cmd_action;
  
#line 296 
  __retres = 0;
  
#line 296 
  return __retres;
}


#line 302  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_cmd.c"
static int mwifiex_cmd_rf_antenna(struct mwifiex_private *priv, struct host_cmd_ds_command *cmd, u16 cmd_action, struct mwifiex_ds_ant_cfg *ant_cfg)
{
  int __retres;
  
#line 307 
  struct host_cmd_ds_rf_ant_mimo *ant_mimo = & cmd->params.ant_mimo;
  
#line 308 
  struct host_cmd_ds_rf_ant_siso *ant_siso = & cmd->params.ant_siso;
  
#line 310 
  cmd->command = (unsigned short)32U;
  
#line 312 
  if ((unsigned int)cmd_action != 1U) {
    
#line 313 
    __retres = 0;
    
#line 313 
    goto return_label;
  }
  else ;
  
#line 315 
  if ((unsigned int)(priv->adapter)->hw_dev_mcs_support == 34U) {
    
#line 316 
    cmd->size = (unsigned short)16U;
    
#line 318 
    ant_mimo->action_tx = (unsigned short)2U;
    
#line 319 
    ant_mimo->tx_ant_mode = (unsigned short)ant_cfg->tx_ant;
    
#line 320 
    ant_mimo->action_rx = (unsigned short)1U;
    
#line 321 
    ant_mimo->rx_ant_mode = (unsigned short)ant_cfg->rx_ant;
  }
  else {
    
#line 323 
    cmd->size = (unsigned short)12U;
    
#line 325 
    ant_siso->action = (unsigned short)3U;
    
#line 326 
    ant_siso->ant_mode = (unsigned short)ant_cfg->tx_ant;
  }
  
#line 329 
  __retres = 0;
  return_label: 
#line 329 
                return __retres;
}


#line 342  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_cmd.c"
static int mwifiex_cmd_802_11_hs_cfg(struct mwifiex_private *priv, struct host_cmd_ds_command *cmd, u16 cmd_action, struct mwifiex_hs_config_param *hscfg_param)
{
  int __retres;
  
#line 347 
  struct mwifiex_adapter *adapter = priv->adapter;
  
#line 348 
  struct host_cmd_ds_802_11_hs_cfg_enh *hs_cfg = & cmd->params.opt_hs_cfg;
  
#line 349 
  bool hs_activate = (_Bool)0;
  
#line 351 
  if (hscfg_param == (struct mwifiex_hs_config_param *)0) 
#line 353 
                                                          hs_activate = (_Bool)1; else ;
  
#line 354 
  cmd->command = (unsigned short)229U;
  
#line 356 
  if ((! hs_activate && hscfg_param->conditions != 4294967295U) && adapter->arp_filter_size + 4294967295U <= 67U) {
    
#line 360 
    if ((adapter->debug_mask & 16U) != 0U) {
      
#line 360 
      if (adapter->dev != (struct device *)0) 
#line 360 
                                              _dev_info((struct device const *)adapter->dev,"cmd: Attach %d bytes ArpFilter to HSCfg cmd\n",adapter->arp_filter_size); else ;
    }
    else ;
    
#line 363 
    memcpy((void *)hs_cfg + 8U,(void const *)(& adapter->arp_filter),(unsigned long)adapter->arp_filter_size);
    
#line 366 
    cmd->size = (unsigned short)((unsigned int)((unsigned short)adapter->arp_filter_size) + 16U);
  }
  else 
#line 371 
       cmd->size = (unsigned short)16U;
  
#line 374 
  if ((int)hs_activate != 0) {
    
#line 375 
    hs_cfg->action = (unsigned short)2U;
    
#line 376 
    hs_cfg->params.hs_activate.resp_ctrl = (unsigned short)1U;
  }
  else {
    
#line 378 
    hs_cfg->action = (unsigned short)1U;
    
#line 379 
    hs_cfg->params.hs_config.conditions = hscfg_param->conditions;
    
#line 380 
    hs_cfg->params.hs_config.gpio = hscfg_param->gpio;
    
#line 381 
    hs_cfg->params.hs_config.gap = hscfg_param->gap;
    
#line 382 
    if ((adapter->debug_mask & 16U) != 0U) {
      
#line 382 
      if (adapter->dev != (struct device *)0) 
#line 382 
                                              _dev_info((struct device const *)adapter->dev,"cmd: HS_CFG_CMD: condition:0x%x gpio:0x%x gap:0x%x\n",hs_cfg->params.hs_config.conditions,(int)hs_cfg->params.hs_config.gpio,(int)hs_cfg->params.hs_config.gap); else ;
    }
    else ;
  }
  
#line 389 
  __retres = 0;
  
#line 389 
  return __retres;
}


#line 400  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_cmd.c"
static int mwifiex_cmd_802_11_mac_address(struct mwifiex_private *priv, struct host_cmd_ds_command *cmd, u16 cmd_action)
{
  int __retres;
  
#line 404 
  cmd->command = (unsigned short)77U;
  
#line 405 
  cmd->size = (unsigned short)16U;
  
#line 407 
  cmd->result = (unsigned short)0U;
  
#line 409 
  cmd->params.mac_addr.action = cmd_action;
  
#line 411 
  if ((unsigned int)cmd_action == 1U) 
#line 412 
                                      memcpy((void *)(& cmd->params.mac_addr.mac_addr),(void const *)(& priv->curr_addr),6UL); else ;
  
#line 414 
  __retres = 0;
  
#line 414 
  return __retres;
}


#line 426  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_cmd.c"
static int mwifiex_cmd_mac_multicast_adr(struct host_cmd_ds_command *cmd, u16 cmd_action, struct mwifiex_multicast_list *mcast_list)
{
  int __retres;
  
#line 430 
  struct host_cmd_ds_mac_multicast_adr *mcast_addr = & cmd->params.mc_addr;
  
#line 432 
  cmd->size = (unsigned short)204U;
  
#line 434 
  cmd->command = (unsigned short)16U;
  
#line 436 
  mcast_addr->action = cmd_action;
  
#line 437 
  mcast_addr->num_of_adrs = (unsigned short)mcast_list->num_multicast_addr;
  
#line 439 
  memcpy((void *)(& mcast_addr->mac_list),(void const *)(& mcast_list->mac_list),(unsigned long)(mcast_list->num_multicast_addr * 6U));
  
#line 442 
  __retres = 0;
  
#line 442 
  return __retres;
}


#line 453  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_cmd.c"
static int mwifiex_cmd_802_11_deauthenticate(struct mwifiex_private *priv, struct host_cmd_ds_command *cmd, u8 *mac)
{
  int __retres;
  
#line 457 
  struct host_cmd_ds_802_11_deauthenticate *deauth = & cmd->params.deauth;
  
#line 459 
  cmd->command = (unsigned short)36U;
  
#line 460 
  cmd->size = (unsigned short)16U;
  
#line 464 
  memcpy((void *)(& deauth->mac_addr),(void const *)mac,6UL);
  
#line 466 
  if (((priv->adapter)->debug_mask & 16U) != 0U) {
    
#line 466 
    if ((priv->adapter)->dev != (struct device *)0) 
#line 466 
                                                    _dev_info((struct device const *)(priv->adapter)->dev,"cmd: Deauth: %pM\n",(u8 *)(& deauth->mac_addr)); else ;
  }
  else ;
  
#line 468 
  deauth->reason_code = (unsigned short)3U;
  
#line 470 
  __retres = 0;
  
#line 470 
  return __retres;
}


#line 480  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_cmd.c"
static int mwifiex_cmd_802_11_ad_hoc_stop(struct host_cmd_ds_command *cmd)
{
  int __retres;
  
#line 482 
  cmd->command = (unsigned short)64U;
  
#line 483 
  cmd->size = (unsigned short)8U;
  
#line 484 
  __retres = 0;
  
#line 484 
  return __retres;
}


#line 494  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_cmd.c"
static int mwifiex_set_keyparamset_wep(struct mwifiex_private *priv, struct mwifiex_ie_type_key_param_set *key_param_set, u16 *key_param_len)
{
  int __retres;
  int cur_key_param_len;
  u8 i;
  
#line 502 
  i = (unsigned char)0U;
  
#line 502 
  goto ldv_61611;
  ldv_61610: 
#line 503 
  ;
  
#line 503 
  if (priv->wep_key[(int)i].key_length == 5U || priv->wep_key[(int)i].key_length == 13U) {
    
#line 505 
    key_param_set->type = (unsigned short)256U;
    
#line 509 
    key_param_set->length = (unsigned short)((unsigned int)((unsigned short)priv->wep_key[(int)i].key_length) + 8U);
    
#line 513 
    key_param_set->key_type_id = (unsigned short)0U;
    
#line 515 
    key_param_set->key_info = (unsigned short)7U;
    
#line 518 
    key_param_set->key_len = (unsigned short)priv->wep_key[(int)i].key_length;
    
#line 521 
    key_param_set->key[0] = i;
    
#line 523 
    if ((int)i == ((int)priv->wep_key_curr_index & 16383)) 
#line 526 
                                                           key_param_set->key[1] = (unsigned char)1U; else 
                                                                    
#line 528 
                                                                    key_param_set->key[1] = (unsigned char)0U;
    
#line 529 
    memmove((void *)(& key_param_set->key[2]),(void const *)(& priv->wep_key[(int)i].key_material),(unsigned long)priv->wep_key[(int)i].key_length);
    
#line 533 
    cur_key_param_len = (int)(priv->wep_key[(int)i].key_length + 12U);
    
#line 536 
    *key_param_len = (unsigned short)((int)*key_param_len + (int)((unsigned short)cur_key_param_len));
    
#line 537 
    key_param_set += cur_key_param_len;
  }
  else 
    
#line 541 
    if (priv->wep_key[(int)i].key_length == 0U) 
#line 542 
                                                goto ldv_61609;
    else {
      
#line 544 
      if (((priv->adapter)->debug_mask & 4U) != 0U) {
        
#line 544 
        if ((priv->adapter)->dev != (struct device *)0) 
#line 544 
                                                        _dev_info((struct device const *)(priv->adapter)->dev,"key%d Length = %d is incorrect\n",(int)i + 1,priv->wep_key[(int)i].key_length); else ;
      }
      else ;
      
#line 547 
      __retres = -1;
      
#line 547 
      goto return_label;
    }
  ldv_61609: 
#line 549 
  ;
  
#line 502 
  i = (u8)((int)i + 1);
  ldv_61611: 
#line 503 
  ;
  
#line 502 
  if ((unsigned int)i <= 3U) 
#line 504 
                             goto ldv_61610; else 
#line 507 
                                                  goto ldv_61612;
  ldv_61612: 
#line 508 
  ;
  
#line 551 
  __retres = 0;
  return_label: 
#line 551 
                return __retres;
}


#line 557  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_cmd.c"
static int mwifiex_set_aes_key_v2(struct mwifiex_private *priv, struct host_cmd_ds_command *cmd, struct mwifiex_ds_encrypt_key *enc_key, struct host_cmd_ds_802_11_key_material_v2 *km)
{
  int __retres;
  u16 size;
  
#line 562 
  struct mwifiex_adapter *adapter = priv->adapter;
  
#line 563 
  u16 len = (unsigned short)10U;
  
#line 565 
  if ((unsigned int)enc_key->is_igtk_key != 0U) {
    
#line 566 
    if ((adapter->debug_mask & 1073741824U) != 0U) {
      
#line 566 
      if (adapter->dev != (struct device *)0) 
#line 566 
                                              _dev_info((struct device const *)adapter->dev,"%s: Set CMAC AES Key\n","mwifiex_set_aes_key_v2"); else ;
    }
    else ;
    
#line 568 
    if ((unsigned int)enc_key->is_rx_seq_valid != 0U) 
#line 569 
                                                      memcpy((void *)(& km->key_param_set.key_params.cmac_aes.ipn),(void const *)(& enc_key->pn),(unsigned long)enc_key->pn_len); else ;
    
#line 571 
    km->key_param_set.key_info = (unsigned short)((unsigned int)km->key_param_set.key_info & 65534U);
    
#line 572 
    km->key_param_set.key_info = (unsigned short)((unsigned int)km->key_param_set.key_info | 1024U);
    
#line 573 
    km->key_param_set.key_type = (unsigned char)4U;
    
#line 574 
    km->key_param_set.key_params.cmac_aes.key_len = (unsigned short)enc_key->key_len;
    
#line 576 
    memcpy((void *)(& km->key_param_set.key_params.cmac_aes.key),(void const *)(& enc_key->key_material),(unsigned long)enc_key->key_len);
    
#line 578 
    len = (unsigned short)((unsigned int)len + 26U);
  }
  else {
    
#line 580 
    if ((adapter->debug_mask & 1073741824U) != 0U) {
      
#line 580 
      if (adapter->dev != (struct device *)0) 
#line 580 
                                              _dev_info((struct device const *)adapter->dev,"%s: Set AES Key\n","mwifiex_set_aes_key_v2"); else ;
    }
    else ;
    
#line 582 
    if ((unsigned int)enc_key->is_rx_seq_valid != 0U) 
#line 583 
                                                      memcpy((void *)(& km->key_param_set.key_params.aes.pn),(void const *)(& enc_key->pn),(unsigned long)enc_key->pn_len); else ;
    
#line 585 
    km->key_param_set.key_type = (unsigned char)2U;
    
#line 586 
    km->key_param_set.key_params.aes.key_len = (unsigned short)enc_key->key_len;
    
#line 588 
    memcpy((void *)(& km->key_param_set.key_params.aes.key),(void const *)(& enc_key->key_material),(unsigned long)enc_key->key_len);
    
#line 590 
    len = (unsigned short)((unsigned int)len + 26U);
  }
  
#line 593 
  km->key_param_set.len = len;
  
#line 594 
  size = (unsigned short)((unsigned int)len + 14U);
  
#line 596 
  cmd->size = size;
  
#line 598 
  __retres = 0;
  
#line 598 
  return __retres;
}


#line 610  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_cmd.c"
static int mwifiex_cmd_802_11_key_material_v2(struct mwifiex_private *priv, struct host_cmd_ds_command *cmd, u16 cmd_action, u32 cmd_oid, struct mwifiex_ds_encrypt_key *enc_key)
{
  int __retres;
  u16 key_info;
  bool tmp_0;
  
#line 615 
  struct mwifiex_adapter *adapter = priv->adapter;
  
#line 616 
  u8 *mac = (u8 *)(& enc_key->mac_addr);
  
#line 617 
  u16 len = (unsigned short)10U;
  
#line 618 
  struct host_cmd_ds_802_11_key_material_v2 *km = & cmd->params.key_material_v2;
  
#line 621 
  cmd->command = (unsigned short)94U;
  
#line 622 
  km->action = cmd_action;
  
#line 624 
  if ((unsigned int)cmd_action == 0U) {
    
#line 625 
    if ((adapter->debug_mask & 1073741824U) != 0U) {
      
#line 625 
      if (adapter->dev != (struct device *)0) 
#line 625 
                                              _dev_info((struct device const *)adapter->dev,"%s: Get key\n","mwifiex_cmd_802_11_key_material_v2"); else ;
    }
    else ;
    
#line 626 
    km->key_param_set.key_idx = (unsigned char)((unsigned int)((unsigned char)enc_key->key_index) & 15U);
    
#line 628 
    km->key_param_set.type = (unsigned short)412U;
    
#line 629 
    km->key_param_set.len = (unsigned short)10U;
    
#line 630 
    memcpy((void *)(& km->key_param_set.mac_addr),(void const *)mac,6UL);
    
#line 632 
    if ((enc_key->key_index & 1073741824U) != 0U) 
#line 633 
                                                  key_info = (unsigned short)2U; else 
                                                                    
#line 635 
                                                                    key_info = (unsigned short)1U;
    
#line 637 
    if ((unsigned int)enc_key->is_igtk_key != 0U) 
#line 638 
                                                  key_info = (unsigned short)((unsigned int)key_info | 1024U); else ;
    
#line 640 
    km->key_param_set.key_info = key_info;
    
#line 642 
    cmd->size = (unsigned short)24U;
    
#line 645 
    __retres = 0;
    
#line 645 
    goto return_label;
  }
  else ;
  
#line 648 
  memset((void *)(& km->key_param_set),0,64UL);
  
#line 651 
  if (enc_key->key_disable != 0U) {
    
#line 652 
    if ((adapter->debug_mask & 1073741824U) != 0U) {
      
#line 652 
      if (adapter->dev != (struct device *)0) 
#line 652 
                                              _dev_info((struct device const *)adapter->dev,"%s: Remove key\n","mwifiex_cmd_802_11_key_material_v2"); else ;
    }
    else ;
    
#line 653 
    km->action = (unsigned short)4U;
    
#line 654 
    km->key_param_set.type = (unsigned short)412U;
    
#line 655 
    km->key_param_set.len = (unsigned short)10U;
    
#line 656 
    km->key_param_set.key_idx = (unsigned char)((unsigned int)((unsigned char)enc_key->key_index) & 15U);
    
#line 657 
    key_info = (unsigned short)3U;
    
#line 658 
    km->key_param_set.key_info = key_info;
    
#line 659 
    memcpy((void *)(& km->key_param_set.mac_addr),(void const *)mac,6UL);
    
#line 660 
    cmd->size = (unsigned short)24U;
    
#line 663 
    __retres = 0;
    
#line 663 
    goto return_label;
  }
  else ;
  
#line 666 
  km->action = (unsigned short)1U;
  
#line 667 
  km->key_param_set.key_idx = (unsigned char)((unsigned int)((unsigned char)enc_key->key_index) & 15U);
  
#line 668 
  km->key_param_set.type = (unsigned short)412U;
  
#line 669 
  key_info = (unsigned short)4U;
  
#line 670 
  memcpy((void *)(& km->key_param_set.mac_addr),(void const *)mac,6UL);
  
#line 672 
  if (enc_key->key_len <= 13U) {
    
#line 673 
    if ((adapter->debug_mask & 1073741824U) != 0U) {
      
#line 673 
      if (adapter->dev != (struct device *)0) 
#line 673 
                                              _dev_info((struct device const *)adapter->dev,"%s: Set WEP Key\n","mwifiex_cmd_802_11_key_material_v2"); else ;
    }
    else ;
    
#line 674 
    len = (unsigned short)((unsigned int)len + 15U);
    
#line 675 
    km->key_param_set.len = len;
    
#line 676 
    km->key_param_set.key_type = (unsigned char)0U;
    
#line 678 
    if (((unsigned long)priv->bss_role & 1UL) != 0UL) 
#line 679 
                                                      key_info = (unsigned short)((unsigned int)key_info | 3U);
    else 
      
#line 681 
      if ((unsigned int)enc_key->is_current_wep_key != 0U) {
        
#line 682 
        key_info = (unsigned short)((unsigned int)key_info | 3U);
        
#line 683 
        if ((int)km->key_param_set.key_idx == ((int)priv->wep_key_curr_index & 15)) 
          
#line 685 
          key_info = (unsigned short)((unsigned int)key_info | 8U); else ;
      }
      else 
        
#line 687 
        if (mac != (u8 *)0U) {
          bool tmp;
          
#line 688 
          tmp = is_broadcast_ether_addr((u8 const *)mac);
          
#line 688 
          if ((int)tmp != 0) 
#line 689 
                             key_info = (unsigned short)((unsigned int)key_info | 1U); else 
                                                                    
#line 691 
                                                                    key_info = (unsigned short)((unsigned int)key_info | 10U);
        }
        else 
#line 694 
             key_info = (unsigned short)((unsigned int)key_info | 1U);
    
#line 698 
    km->key_param_set.key_info = key_info;
    
#line 700 
    km->key_param_set.key_params.wep.key_len = (unsigned short)enc_key->key_len;
    
#line 702 
    memcpy((void *)(& km->key_param_set.key_params.wep.key),(void const *)(& enc_key->key_material),(unsigned long)enc_key->key_len);
    
#line 705 
    cmd->size = (unsigned short)((unsigned int)len + 14U);
    
#line 707 
    __retres = 0;
    
#line 707 
    goto return_label;
  }
  else ;
  
#line 710 
  tmp_0 = is_broadcast_ether_addr((u8 const *)mac);
  
#line 710 
  if ((int)tmp_0 != 0) 
#line 711 
                       key_info = (unsigned short)((unsigned int)key_info | 33U); else 
                                                                    
#line 713 
                                                                    key_info = (unsigned short)((unsigned int)key_info | 50U);
  
#line 715 
  if (enc_key->is_wapi_key != 0U) {
    bool tmp_1;
    
#line 716 
    if ((adapter->debug_mask & 1073741824U) != 0U) {
      
#line 716 
      if (adapter->dev != (struct device *)0) 
#line 716 
                                              _dev_info((struct device const *)adapter->dev,"%s: Set WAPI Key\n","mwifiex_cmd_802_11_key_material_v2"); else ;
    }
    else ;
    
#line 717 
    km->key_param_set.key_type = (unsigned char)3U;
    
#line 718 
    memcpy((void *)(& km->key_param_set.key_params.wapi.pn),(void const *)(& enc_key->pn),16UL);
    
#line 720 
    km->key_param_set.key_params.wapi.key_len = (unsigned short)enc_key->key_len;
    
#line 722 
    memcpy((void *)(& km->key_param_set.key_params.wapi.key),(void const *)(& enc_key->key_material),(unsigned long)enc_key->key_len);
    
#line 724 
    tmp_1 = is_broadcast_ether_addr((u8 const *)mac);
    
#line 724 
    if ((int)tmp_1 != 0) 
#line 725 
                         priv->sec_info.wapi_key_on = (unsigned char)1U; else ;
    
#line 727 
    if ((unsigned int)priv->sec_info.wapi_key_on == 0U) 
#line 728 
                                                        key_info = (unsigned short)((unsigned int)key_info | 8U); else ;
    
#line 729 
    km->key_param_set.key_info = key_info;
    
#line 731 
    len = (unsigned short)((unsigned int)len + 50U);
    
#line 732 
    km->key_param_set.len = len;
    
#line 733 
    cmd->size = (unsigned short)((unsigned int)len + 14U);
    
#line 735 
    __retres = 0;
    
#line 735 
    goto return_label;
  }
  else ;
  
#line 738 
  if (priv->bss_mode == 1U) {
    
#line 739 
    key_info = (unsigned short)((unsigned int)key_info | 8U);
    
#line 741 
    if ((unsigned int)priv->sec_info.wpa2_enabled == 0U) {
      int tmp_3;
      bool tmp_2;
      
#line 742 
      tmp_2 = is_broadcast_ether_addr((u8 const *)mac);
      
#line 742 
      if (tmp_2) 
#line 742 
                 tmp_3 = 0; else 
#line 742 
                                 tmp_3 = 1;
      
#line 742 
      if (tmp_3) 
#line 743 
                 key_info = (unsigned short)((unsigned int)key_info | 2U); else ;
    }
    else ;
  }
  else 
    
#line 746 
    if ((unsigned int)priv->wpa_is_gtk_set == 0U) 
#line 747 
                                                  key_info = (unsigned short)((unsigned int)key_info | 8U); else ;
  
#line 750 
  km->key_param_set.key_info = key_info;
  
#line 752 
  if (enc_key->key_len == 16U) {
    int tmp_4;
    
#line 753 
    tmp_4 = mwifiex_set_aes_key_v2(priv,cmd,enc_key,km);
    
#line 753 
    __retres = tmp_4;
    
#line 753 
    goto return_label;
  }
  else ;
  
#line 755 
  if (enc_key->key_len == 32U) {
    
#line 756 
    if ((adapter->debug_mask & 1073741824U) != 0U) {
      
#line 756 
      if (adapter->dev != (struct device *)0) 
#line 756 
                                              _dev_info((struct device const *)adapter->dev,"%s: Set TKIP Key\n","mwifiex_cmd_802_11_key_material_v2"); else ;
    }
    else ;
    
#line 758 
    if ((unsigned int)enc_key->is_rx_seq_valid != 0U) 
#line 759 
                                                      memcpy((void *)(& km->key_param_set.key_params.tkip.pn),(void const *)(& enc_key->pn),(unsigned long)enc_key->pn_len); else ;
    
#line 761 
    km->key_param_set.key_type = (unsigned char)1U;
    
#line 762 
    km->key_param_set.key_params.tkip.key_len = (unsigned short)enc_key->key_len;
    
#line 764 
    memcpy((void *)(& km->key_param_set.key_params.tkip.key),(void const *)(& enc_key->key_material),(unsigned long)enc_key->key_len);
    
#line 767 
    len = (unsigned short)((unsigned int)len + 42U);
    
#line 768 
    km->key_param_set.len = len;
    
#line 769 
    cmd->size = (unsigned short)((unsigned int)len + 14U);
  }
  else ;
  
#line 773 
  __retres = 0;
  return_label: 
#line 773 
                return __retres;
}


#line 787  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_cmd.c"
static int mwifiex_cmd_802_11_key_material_v1(struct mwifiex_private *priv, struct host_cmd_ds_command *cmd, u16 cmd_action, u32 cmd_oid, struct mwifiex_ds_encrypt_key *enc_key)
{
  int __retres;
  struct host_cmd_tlv_mac_addr *tlv_mac;
  u16 cmd_size;
  
#line 792 
  struct host_cmd_ds_802_11_key_material *key_material = & cmd->params.key_material;
  
#line 795 
  u16 key_param_len = (unsigned short)0U;
  
#line 796 
  int ret = 0;
  
#line 798 
  cmd->command = (unsigned short)94U;
  
#line 799 
  key_material->action = cmd_action;
  
#line 801 
  if ((unsigned int)cmd_action == 0U) {
    
#line 802 
    cmd->size = (unsigned short)10U;
    
#line 804 
    __retres = ret;
    
#line 804 
    goto return_label;
  }
  else ;
  
#line 807 
  if (enc_key == (struct mwifiex_ds_encrypt_key *)0) {
    
#line 808 
    memset((void *)(& key_material->key_param_set),0,240UL);
    
#line 811 
    ret = mwifiex_set_keyparamset_wep(priv,& key_material->key_param_set,& key_param_len);
    
#line 814 
    cmd->size = (unsigned short)((unsigned int)key_param_len + 10U);
    
#line 816 
    __retres = ret;
    
#line 816 
    goto return_label;
  }
  else 
#line 818 
       memset((void *)(& key_material->key_param_set),0,60UL);
  
#line 820 
  if (enc_key->is_wapi_key != 0U) {
    int tmp_0;
    bool tmp;
    
#line 821 
    if (((priv->adapter)->debug_mask & 1073741824U) != 0U) {
      
#line 821 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 821 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"info: Set WAPI Key\n"); else ;
    }
    else ;
    
#line 822 
    key_material->key_param_set.key_type_id = (unsigned short)3U;
    
#line 824 
    if (cmd_oid == 1U) 
#line 825 
                       key_material->key_param_set.key_info = (unsigned short)4U; else 
                                                                    
#line 828 
                                                                    key_material->key_param_set.key_info = (unsigned short)0U;
    
#line 831 
    key_material->key_param_set.key[0] = (unsigned char)enc_key->key_index;
    
#line 832 
    if ((unsigned int)priv->sec_info.wapi_key_on == 0U) 
#line 833 
                                                        key_material->key_param_set.key[1] = (unsigned char)1U; else 
                                                                    
#line 836 
                                                                    key_material->key_param_set.key[1] = (unsigned char)0U;
    
#line 838 
    tmp = is_broadcast_ether_addr((u8 const *)(& enc_key->mac_addr));
    
#line 838 
    if (tmp) 
#line 838 
             tmp_0 = 0; else 
#line 838 
                             tmp_0 = 1;
    
#line 838 
    if (tmp_0) 
#line 840 
               key_material->key_param_set.key_info = (unsigned short)((unsigned int)key_material->key_param_set.key_info | 2U);
    else {
      
#line 843 
      key_material->key_param_set.key_info = (unsigned short)((unsigned int)key_material->key_param_set.key_info | 1U);
      
#line 845 
      priv->sec_info.wapi_key_on = (unsigned char)1U;
    }
    
#line 848 
    key_material->key_param_set.type = (unsigned short)256U;
    
#line 850 
    key_material->key_param_set.key_len = (unsigned short)50U;
    
#line 852 
    memcpy((void *)(& key_material->key_param_set.key[2]),(void const *)(& enc_key->key_material),(unsigned long)enc_key->key_len);
    
#line 854 
    memcpy((void *)(& key_material->key_param_set.key[enc_key->key_len + 2U]),(void const *)(& enc_key->pn),16UL);
    
#line 856 
    key_material->key_param_set.length = (unsigned short)56U;
    
#line 859 
    key_param_len = (unsigned short)60U;
    
#line 861 
    cmd->size = (unsigned short)((unsigned int)key_param_len + 10U);
    
#line 863 
    __retres = ret;
    
#line 863 
    goto return_label;
  }
  else ;
  
#line 865 
  if (enc_key->key_len == 16U) 
    
#line 866 
    if ((unsigned int)enc_key->is_igtk_key != 0U) {
      
#line 867 
      if (((priv->adapter)->debug_mask & 16U) != 0U) {
        
#line 867 
        if ((priv->adapter)->dev != (struct device *)0) 
#line 867 
                                                        _dev_info((struct device const *)(priv->adapter)->dev,"cmd: CMAC_AES\n"); else ;
      }
      else ;
      
#line 868 
      key_material->key_param_set.key_type_id = (unsigned short)4U;
      
#line 870 
      if (cmd_oid == 1U) 
#line 871 
                         key_material->key_param_set.key_info = (unsigned short)4U; else 
                                                                    
#line 874 
                                                                    key_material->key_param_set.key_info = (unsigned short)0U;
      
#line 877 
      key_material->key_param_set.key_info = (unsigned short)((unsigned int)key_material->key_param_set.key_info | 1024U);
    }
    else {
      
#line 880 
      if (((priv->adapter)->debug_mask & 16U) != 0U) {
        
#line 880 
        if ((priv->adapter)->dev != (struct device *)0) 
#line 880 
                                                        _dev_info((struct device const *)(priv->adapter)->dev,"cmd: WPA_AES\n"); else ;
      }
      else ;
      
#line 881 
      key_material->key_param_set.key_type_id = (unsigned short)2U;
      
#line 883 
      if (cmd_oid == 1U) 
#line 884 
                         key_material->key_param_set.key_info = (unsigned short)4U; else 
                                                                    
#line 887 
                                                                    key_material->key_param_set.key_info = (unsigned short)0U;
      
#line 890 
      if ((enc_key->key_index & 1073741824U) != 0U) 
#line 892 
                                                    key_material->key_param_set.key_info = (unsigned short)((unsigned int)key_material->key_param_set.key_info | 2U); else 
                                                                    
#line 895 
                                                                    key_material->key_param_set.key_info = (unsigned short)((unsigned int)key_material->key_param_set.key_info | 1U);
    }
  else 
    
#line 898 
    if (enc_key->key_len == 32U) {
      
#line 899 
      if (((priv->adapter)->debug_mask & 16U) != 0U) {
        
#line 899 
        if ((priv->adapter)->dev != (struct device *)0) 
#line 899 
                                                        _dev_info((struct device const *)(priv->adapter)->dev,"cmd: WPA_TKIP\n"); else ;
      }
      else ;
      
#line 900 
      key_material->key_param_set.key_type_id = (unsigned short)1U;
      
#line 902 
      key_material->key_param_set.key_info = (unsigned short)4U;
      
#line 905 
      if ((enc_key->key_index & 1073741824U) != 0U) 
#line 907 
                                                    key_material->key_param_set.key_info = (unsigned short)((unsigned int)key_material->key_param_set.key_info | 2U); else 
                                                                    
#line 910 
                                                                    key_material->key_param_set.key_info = (unsigned short)((unsigned int)key_material->key_param_set.key_info | 1U);
    }
    else ;
  
#line 914 
  if ((unsigned int)key_material->key_param_set.key_type_id != 0U) {
    
#line 915 
    key_material->key_param_set.type = (unsigned short)256U;
    
#line 917 
    key_material->key_param_set.key_len = (unsigned short)enc_key->key_len;
    
#line 919 
    memcpy((void *)(& key_material->key_param_set.key),(void const *)(& enc_key->key_material),(unsigned long)enc_key->key_len);
    
#line 921 
    key_material->key_param_set.length = (unsigned short)((unsigned int)((unsigned short)enc_key->key_len) + 6U);
    
#line 925 
    key_param_len = (unsigned short)((unsigned int)((unsigned short)enc_key->key_len) + 10U);
    
#line 928 
    if ((unsigned int)key_material->key_param_set.key_type_id == 4U) {
      
#line 930 
      struct mwifiex_cmac_param *param = (struct mwifiex_cmac_param *)(& key_material->key_param_set.key);
      
#line 933 
      memcpy((void *)(& param->ipn),(void const *)(& enc_key->pn),8UL);
      
#line 934 
      memcpy((void *)(& param->key),(void const *)(& enc_key->key_material),16UL);
      
#line 937 
      key_param_len = (unsigned short)24U;
      
#line 938 
      key_material->key_param_set.key_len = key_param_len;
      
#line 940 
      key_param_len = (unsigned short)((unsigned int)key_param_len + 6U);
      
#line 941 
      key_material->key_param_set.length = key_param_len;
      
#line 943 
      key_param_len = (unsigned short)((unsigned int)key_param_len + 4U);
    }
    else ;
    
#line 946 
    cmd->size = (unsigned short)((unsigned int)key_param_len + 10U);
    
#line 949 
    if (((unsigned long)priv->bss_role & 1UL) != 0UL) {
      
#line 950 
      tlv_mac = (struct host_cmd_tlv_mac_addr *)(& key_material->key_param_set) + (int)key_param_len;
      
#line 952 
      tlv_mac->header.type = (unsigned short)288U;
      
#line 954 
      tlv_mac->header.len = (unsigned short)6U;
      
#line 955 
      memcpy((void *)(& tlv_mac->mac_addr),(void const *)(& enc_key->mac_addr),6UL);
      
#line 956 
      cmd_size = (unsigned short)((unsigned int)key_param_len + 20U);
    }
    else 
#line 960 
         cmd_size = (unsigned short)((unsigned int)key_param_len + 10U);
    
#line 963 
    cmd->size = cmd_size;
  }
  else ;
  
#line 966 
  __retres = ret;
  return_label: 
#line 966 
                return __retres;
}


#line 971  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_cmd.c"
static int mwifiex_cmd_802_11_key_material(struct mwifiex_private *priv, struct host_cmd_ds_command *cmd, u16 cmd_action, u32 cmd_oid, struct mwifiex_ds_encrypt_key *enc_key)
{
  int __retres;
  
#line 976 
  if ((unsigned int)(priv->adapter)->key_api_major_ver == 2U) {
    int tmp;
    
#line 977 
    tmp = mwifiex_cmd_802_11_key_material_v2(priv,cmd,(unsigned short)((int)cmd_action),cmd_oid,enc_key);
    
#line 977 
    __retres = tmp;
    
#line 977 
    goto return_label;
  }
  else {
    int tmp_0;
    
#line 982 
    tmp_0 = mwifiex_cmd_802_11_key_material_v1(priv,cmd,(unsigned short)((int)cmd_action),cmd_oid,enc_key);
    
#line 982 
    __retres = tmp_0;
    
#line 982 
    goto return_label;
  }
  return_label: 
#line 976 
                return __retres;
}


#line 995  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_cmd.c"
static int mwifiex_cmd_802_11d_domain_info(struct mwifiex_private *priv, struct host_cmd_ds_command *cmd, u16 cmd_action)
{
  int __retres;
  
#line 999 
  struct mwifiex_adapter *adapter = priv->adapter;
  
#line 1000 
  struct host_cmd_ds_802_11d_domain_info *domain_info = & cmd->params.domain_info;
  
#line 1002 
  struct mwifiex_ietypes_domain_param_set *domain = & domain_info->domain;
  
#line 1004 
  u8 no_of_triplet = adapter->domain_reg.no_of_triplet;
  
#line 1006 
  if ((adapter->debug_mask & 1073741824U) != 0U) {
    
#line 1006 
    if (adapter->dev != (struct device *)0) 
#line 1006 
                                            _dev_info((struct device const *)adapter->dev,"info: 11D: no_of_triplet=0x%x\n",(int)no_of_triplet); else ;
  }
  else ;
  
#line 1009 
  cmd->command = (unsigned short)91U;
  
#line 1010 
  domain_info->action = cmd_action;
  
#line 1011 
  if ((unsigned int)cmd_action == 0U) {
    
#line 1012 
    cmd->size = (unsigned short)10U;
    
#line 1013 
    __retres = 0;
    
#line 1013 
    goto return_label;
  }
  else ;
  
#line 1017 
  domain->header.type = (unsigned short)7U;
  
#line 1018 
  memcpy((void *)(& domain->country_code),(void const *)(& adapter->domain_reg.country_code),3UL);
  
#line 1021 
  domain->header.len = (unsigned short)(((unsigned int)((unsigned short)no_of_triplet) + 1U) * 3U);
  
#line 1026 
  if ((unsigned int)no_of_triplet != 0U) {
    
#line 1027 
    memcpy((void *)(& domain->triplet),(void const *)(& adapter->domain_reg.triplet),(unsigned long)no_of_triplet * 3UL);
    
#line 1031 
    cmd->size = (unsigned short)((unsigned int)domain->header.len + 14U);
  }
  else 
#line 1036 
       cmd->size = (unsigned short)10U;
  
#line 1039 
  __retres = 0;
  return_label: 
#line 1039 
                return __retres;
}


#line 1050  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_cmd.c"
static int mwifiex_cmd_ibss_coalescing_status(struct host_cmd_ds_command *cmd, u16 cmd_action, u16 *enable)
{
  int __retres;
  
#line 1053 
  struct host_cmd_ds_802_11_ibss_status *ibss_coal = & cmd->params.ibss_coalescing;
  
#line 1056 
  cmd->command = (unsigned short)131U;
  
#line 1057 
  cmd->size = (unsigned short)24U;
  
#line 1059 
  cmd->result = (unsigned short)0U;
  
#line 1060 
  ibss_coal->action = cmd_action;
  
#line 1062 
  switch ((int)cmd_action) {
    case 1: 
#line 1063 
    ;
    
#line 1064 
    if (enable != (u16 *)0U) 
#line 1065 
                             ibss_coal->enable = *enable; else 
#line 1067 
                                                               ibss_coal->enable = (unsigned short)0U;
    
#line 1068 
    goto ldv_61672;
    case 0: 
#line 1071 
    ;
    default: 
#line 1072 
    ;
    
#line 1073 
    goto ldv_61672;
  }
  ldv_61672: 
#line 1076 
  ;
  
#line 1076 
  __retres = 0;
  
#line 1076 
  return __retres;
}


#line 1082  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_cmd.c"
static int mwifiex_cmd_mem_access(struct host_cmd_ds_command *cmd, u16 cmd_action, void *pdata_buf)
{
  int __retres;
  
#line 1085 
  struct mwifiex_ds_mem_rw *mem_rw = (struct mwifiex_ds_mem_rw *)pdata_buf;
  
#line 1086 
  struct host_cmd_ds_mem_access *mem_access = & cmd->params.mem;
  
#line 1088 
  cmd->command = (unsigned short)134U;
  
#line 1089 
  cmd->size = (unsigned short)20U;
  
#line 1092 
  mem_access->action = cmd_action;
  
#line 1093 
  mem_access->addr = mem_rw->addr;
  
#line 1094 
  mem_access->value = mem_rw->value;
  
#line 1096 
  __retres = 0;
  
#line 1096 
  return __retres;
}


#line 1116  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_cmd.c"
static int mwifiex_cmd_reg_access(struct host_cmd_ds_command *cmd, u16 cmd_action, void *data_buf)
{
  int __retres;
  
#line 1119 
  struct mwifiex_ds_reg_rw *reg_rw = (struct mwifiex_ds_reg_rw *)data_buf;
  
#line 1121 
  switch ((int)cmd->command) {
    case 25: 
#line 1122 
    ;
    {
      struct host_cmd_ds_mac_reg_access *mac_reg;
      
#line 1126 
      cmd->size = (unsigned short)16U;
      
#line 1127 
      mac_reg = & cmd->params.mac_reg;
      
#line 1128 
      mac_reg->action = cmd_action;
      
#line 1129 
      mac_reg->offset = (unsigned short)reg_rw->offset;
      
#line 1131 
      mac_reg->value = reg_rw->value;
      
#line 1132 
      goto ldv_61690;
    }
    case 26: 
#line 1134 
    ;
    {
      struct host_cmd_ds_bbp_reg_access *bbp_reg;
      
#line 1138 
      cmd->size = (unsigned short)16U;
      
#line 1139 
      bbp_reg = & cmd->params.bbp_reg;
      
#line 1140 
      bbp_reg->action = cmd_action;
      
#line 1141 
      bbp_reg->offset = (unsigned short)reg_rw->offset;
      
#line 1143 
      bbp_reg->value = (unsigned char)reg_rw->value;
      
#line 1144 
      goto ldv_61690;
    }
    case 27: 
#line 1146 
    ;
    {
      struct host_cmd_ds_rf_reg_access *rf_reg;
      
#line 1150 
      cmd->size = (unsigned short)16U;
      
#line 1151 
      rf_reg = & cmd->params.rf_reg;
      
#line 1152 
      rf_reg->action = cmd_action;
      
#line 1153 
      rf_reg->offset = (unsigned short)reg_rw->offset;
      
#line 1154 
      rf_reg->value = (unsigned char)reg_rw->value;
      
#line 1155 
      goto ldv_61690;
    }
    case 173: 
#line 1157 
    ;
    {
      struct host_cmd_ds_pmic_reg_access *pmic_reg;
      
#line 1161 
      cmd->size = (unsigned short)16U;
      
#line 1162 
      pmic_reg = & cmd->params.pmic_reg;
      
#line 1163 
      pmic_reg->action = cmd_action;
      
#line 1164 
      pmic_reg->offset = (unsigned short)reg_rw->offset;
      
#line 1166 
      pmic_reg->value = (unsigned char)reg_rw->value;
      
#line 1167 
      goto ldv_61690;
    }
    case 237: 
#line 1169 
    ;
    {
      struct host_cmd_ds_rf_reg_access *cau_reg;
      
#line 1173 
      cmd->size = (unsigned short)16U;
      
#line 1174 
      cau_reg = & cmd->params.rf_reg;
      
#line 1175 
      cau_reg->action = cmd_action;
      
#line 1176 
      cau_reg->offset = (unsigned short)reg_rw->offset;
      
#line 1178 
      cau_reg->value = (unsigned char)reg_rw->value;
      
#line 1179 
      goto ldv_61690;
    }
    case 89: 
#line 1181 
    ;
    {
      
#line 1183 
      struct mwifiex_ds_read_eeprom *rd_eeprom = (struct mwifiex_ds_read_eeprom *)data_buf;
      
#line 1184 
      struct host_cmd_ds_802_11_eeprom_access *cmd_eeprom = & cmd->params.eeprom;
      
#line 1187 
      cmd->size = (unsigned short)15U;
      
#line 1188 
      cmd_eeprom->action = cmd_action;
      
#line 1189 
      cmd_eeprom->offset = rd_eeprom->offset;
      
#line 1190 
      cmd_eeprom->byte_count = rd_eeprom->byte_count;
      
#line 1191 
      cmd_eeprom->value = (unsigned char)0U;
      
#line 1192 
      goto ldv_61690;
    }
    default: 
#line 1194 
    ;
    
#line 1195 
    __retres = -1;
    
#line 1195 
    goto return_label;
  }
  ldv_61690: 
#line 1198 
  ;
  
#line 1198 
  __retres = 0;
  return_label: 
#line 1198 
                return __retres;
}


#line 1211  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_cmd.c"
static int mwifiex_cmd_pcie_host_spec(struct mwifiex_private *priv, struct host_cmd_ds_command *cmd, u16 action)
{
  int __retres;
  
#line 1214 
  struct host_cmd_ds_pcie_details *host_spec = & cmd->params.pcie_host_spec;
  
#line 1216 
  struct pcie_service_card *card = (struct pcie_service_card *)(priv->adapter)->card;
  
#line 1218 
  cmd->command = (unsigned short)250U;
  
#line 1219 
  cmd->size = (unsigned short)52U;
  
#line 1221 
  cmd->result = (unsigned short)0U;
  
#line 1223 
  memset((void *)host_spec,0,44UL);
  
#line 1225 
  if ((unsigned int)action != 1U) {
    
#line 1226 
    __retres = 0;
    
#line 1226 
    goto return_label;
  }
  else ;
  
#line 1229 
  host_spec->txbd_addr_lo = (unsigned int)card->txbd_ring_pbase;
  
#line 1230 
  host_spec->txbd_addr_hi = (unsigned int)(card->txbd_ring_pbase >> 32);
  
#line 1231 
  host_spec->txbd_count = 32U;
  
#line 1232 
  host_spec->rxbd_addr_lo = (unsigned int)card->rxbd_ring_pbase;
  
#line 1233 
  host_spec->rxbd_addr_hi = (unsigned int)(card->rxbd_ring_pbase >> 32);
  
#line 1234 
  host_spec->rxbd_count = 32U;
  
#line 1235 
  host_spec->evtbd_addr_lo = (unsigned int)card->evtbd_ring_pbase;
  
#line 1236 
  host_spec->evtbd_addr_hi = (unsigned int)(card->evtbd_ring_pbase >> 32);
  
#line 1237 
  host_spec->evtbd_count = 8U;
  
#line 1238 
  if (card->sleep_cookie_vbase != (u8 *)0U) {
    
#line 1239 
    host_spec->sleep_cookie_addr_lo = (unsigned int)card->sleep_cookie_pbase;
    
#line 1241 
    host_spec->sleep_cookie_addr_hi = (unsigned int)(card->sleep_cookie_pbase >> 32);
    
#line 1243 
    if (((priv->adapter)->debug_mask & 1073741824U) != 0U) {
      
#line 1243 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 1243 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"sleep_cook_lo phy addr: 0x%x\n",host_spec->sleep_cookie_addr_lo); else ;
    }
    else ;
  }
  else ;
  
#line 1248 
  __retres = 0;
  return_label: 
#line 1248 
                return __retres;
}


#line 1258  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_cmd.c"
static int mwifiex_cmd_802_11_subsc_evt(struct mwifiex_private *priv, struct host_cmd_ds_command *cmd, struct mwifiex_ds_misc_subsc_evt *subsc_evt_cfg)
{
  int __retres;
  struct mwifiex_ie_types_rssi_threshold *rssi_tlv;
  u16 event_bitmap;
  u8 *pos;
  
#line 1262 
  struct host_cmd_ds_802_11_subsc_evt *subsc_evt = & cmd->params.subsc_evt;
  
#line 1267 
  cmd->command = (unsigned short)117U;
  
#line 1268 
  cmd->size = (unsigned short)12U;
  
#line 1271 
  subsc_evt->action = subsc_evt_cfg->action;
  
#line 1272 
  if (((priv->adapter)->debug_mask & 16U) != 0U) {
    
#line 1272 
    if ((priv->adapter)->dev != (struct device *)0) 
#line 1272 
                                                    _dev_info((struct device const *)(priv->adapter)->dev,"cmd: action: %d\n",(int)subsc_evt_cfg->action); else ;
  }
  else ;
  
#line 1276 
  if ((unsigned int)subsc_evt_cfg->action == 0U) {
    
#line 1277 
    __retres = 0;
    
#line 1277 
    goto return_label;
  }
  else ;
  
#line 1279 
  subsc_evt->events = subsc_evt_cfg->events;
  
#line 1281 
  event_bitmap = subsc_evt_cfg->events;
  
#line 1282 
  if (((priv->adapter)->debug_mask & 16U) != 0U) {
    
#line 1282 
    if ((priv->adapter)->dev != (struct device *)0) 
#line 1282 
                                                    _dev_info((struct device const *)(priv->adapter)->dev,"cmd: event bitmap : %16x\n",(int)event_bitmap); else ;
  }
  else ;
  
#line 1285 
  if ((unsigned int)subsc_evt_cfg->action + 65534U <= 1U && (unsigned int)event_bitmap == 0U) {
    
#line 1288 
    if (((priv->adapter)->debug_mask & 4U) != 0U) {
      
#line 1288 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 1288 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"Error: No event specified\t"); else ;
    }
    else ;
    
#line 1291 
    __retres = -22;
    
#line 1291 
    goto return_label;
  }
  else ;
  
#line 1299 
  if ((unsigned int)subsc_evt_cfg->action == 3U) {
    
#line 1300 
    __retres = 0;
    
#line 1300 
    goto return_label;
  }
  else ;
  
#line 1302 
  pos = (u8 *)subsc_evt + 4U;
  
#line 1305 
  if (((unsigned long)event_bitmap & 1UL) != 0UL) {
    
#line 1306 
    rssi_tlv = (struct mwifiex_ie_types_rssi_threshold *)pos;
    
#line 1308 
    rssi_tlv->header.type = (unsigned short)260U;
    
#line 1309 
    rssi_tlv->header.len = (unsigned short)2U;
    
#line 1312 
    rssi_tlv->abs_value = subsc_evt_cfg->bcn_l_rssi_cfg.abs_value;
    
#line 1313 
    rssi_tlv->evt_freq = subsc_evt_cfg->bcn_l_rssi_cfg.evt_freq;
    
#line 1315 
    if (((priv->adapter)->debug_mask & 32U) != 0U) {
      
#line 1315 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 1315 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"Cfg Beacon Low Rssi event,\t",(int)subsc_evt_cfg->bcn_l_rssi_cfg.abs_value,(int)subsc_evt_cfg->bcn_l_rssi_cfg.evt_freq); else ;
    }
    else ;
    
#line 1321 
    pos += 6U;
    
#line 1322 
    le16_add_cpu(& cmd->size,(unsigned short)6);
  }
  else ;
  
#line 1326 
  if (((unsigned long)event_bitmap & 16UL) != 0UL) {
    
#line 1327 
    rssi_tlv = (struct mwifiex_ie_types_rssi_threshold *)pos;
    
#line 1329 
    rssi_tlv->header.type = (unsigned short)278U;
    
#line 1330 
    rssi_tlv->header.len = (unsigned short)2U;
    
#line 1333 
    rssi_tlv->abs_value = subsc_evt_cfg->bcn_h_rssi_cfg.abs_value;
    
#line 1334 
    rssi_tlv->evt_freq = subsc_evt_cfg->bcn_h_rssi_cfg.evt_freq;
    
#line 1336 
    if (((priv->adapter)->debug_mask & 32U) != 0U) {
      
#line 1336 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 1336 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"Cfg Beacon High Rssi event,\t",(int)subsc_evt_cfg->bcn_h_rssi_cfg.abs_value,(int)subsc_evt_cfg->bcn_h_rssi_cfg.evt_freq); else ;
    }
    else ;
    
#line 1342 
    pos += 6U;
    
#line 1343 
    le16_add_cpu(& cmd->size,(unsigned short)6);
  }
  else ;
  
#line 1347 
  __retres = 0;
  return_label: 
#line 1347 
                return __retres;
}


#line 1351  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_cmd.c"
static int mwifiex_cmd_append_rpn_expression(struct mwifiex_private *priv, struct mwifiex_mef_entry *mef_entry, u8 **buffer)
{
  int __retres;
  int i;
  int byte_len;
  
#line 1355 
  struct mwifiex_mef_filter *filter = (struct mwifiex_mef_filter *)(& mef_entry->filter);
  
#line 1357 
  u8 *stack_ptr = *buffer;
  
#line 1359 
  i = 0;
  
#line 1359 
  goto ldv_61730;
  ldv_61729: 
#line 1360 
  ;
  
#line 1360 
  filter = & mef_entry->filter[i];
  
#line 1361 
  if ((unsigned int)filter->filt_type == 0U) 
#line 1362 
                                             goto ldv_61728; else ;
  
#line 1363 
  *((__le32 *)stack_ptr) = (unsigned int)filter->repeat;
  
#line 1364 
  stack_ptr += 4U;
  
#line 1365 
  *stack_ptr = (unsigned char)1U;
  
#line 1366 
  stack_ptr += 1U;
  
#line 1368 
  byte_len = (int)filter->byte_seq[6];
  
#line 1369 
  memcpy((void *)stack_ptr,(void const *)(& filter->byte_seq),(unsigned long)byte_len);
  
#line 1370 
  stack_ptr += byte_len;
  
#line 1371 
  *stack_ptr = (unsigned char)byte_len;
  
#line 1372 
  stack_ptr += 1U;
  
#line 1373 
  *stack_ptr = (unsigned char)2U;
  
#line 1374 
  stack_ptr += 1U;
  
#line 1376 
  *((__le32 *)stack_ptr) = (unsigned int)filter->offset;
  
#line 1377 
  stack_ptr += 4U;
  
#line 1378 
  *stack_ptr = (unsigned char)1U;
  
#line 1379 
  stack_ptr += 1U;
  
#line 1381 
  *stack_ptr = filter->filt_type;
  
#line 1382 
  stack_ptr += 1U;
  
#line 1384 
  if ((unsigned int)filter->filt_action != 0U) {
    
#line 1385 
    *stack_ptr = filter->filt_action;
    
#line 1386 
    stack_ptr += 1U;
  }
  else ;
  
#line 1389 
  if ((long)stack_ptr - (long)*buffer > 100L) {
    
#line 1390 
    __retres = -1;
    
#line 1390 
    goto return_label;
  }
  else ;
  
#line 1359 
  i += 1;
  ldv_61730: 
#line 1360 
  ;
  
#line 1359 
  if (i <= 9) 
#line 1361 
              goto ldv_61729; else 
#line 1364 
                                   goto ldv_61728;
  ldv_61728: 
#line 1365 
  ;
  
#line 1393 
  *buffer = stack_ptr;
  
#line 1394 
  __retres = 0;
  return_label: 
#line 1394 
                return __retres;
}


#line 1398  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_cmd.c"
static int mwifiex_cmd_mef_cfg(struct mwifiex_private *priv, struct host_cmd_ds_command *cmd, struct mwifiex_ds_mef_cfg *mef)
{
  int __retres;
  u16 i;
  int tmp;
  
#line 1402 
  struct host_cmd_ds_mef_cfg *mef_cfg = & cmd->params.mef_cfg;
  
#line 1403 
  struct mwifiex_fw_mef_entry *mef_entry = (struct mwifiex_fw_mef_entry *)0;
  
#line 1404 
  u8 *pos = (u8 *)mef_cfg;
  
#line 1407 
  cmd->command = (unsigned short)154U;
  
#line 1409 
  mef_cfg->criteria = mef->criteria;
  
#line 1410 
  mef_cfg->num_entries = mef->num_entries;
  
#line 1411 
  pos += 6U;
  
#line 1413 
  i = (unsigned short)0U;
  
#line 1413 
  goto ldv_61741;
  ldv_61740: 
#line 1414 
  ;
  
#line 1414 
  mef_entry = (struct mwifiex_fw_mef_entry *)pos;
  
#line 1415 
  mef_entry->mode = (mef->mef_entry + (int)i)->mode;
  
#line 1416 
  mef_entry->action = (mef->mef_entry + (int)i)->action;
  
#line 1417 
  pos += 4U;
  
#line 1419 
  tmp = mwifiex_cmd_append_rpn_expression(priv,mef->mef_entry + (int)i,& pos);
  
#line 1419 
  if (tmp != 0) {
    
#line 1421 
    __retres = -1;
    
#line 1421 
    goto return_label;
  }
  else ;
  
#line 1423 
  mef_entry->exprsize = (unsigned short)((long)pos - (long)(& mef_entry->expr));
  
#line 1413 
  i = (u16)((int)i + 1);
  ldv_61741: 
#line 1414 
  ;
  
#line 1413 
  if ((int)mef->num_entries > (int)i) 
#line 1415 
                                      goto ldv_61740; else 
#line 1418 
                                                           goto ldv_61742;
  ldv_61742: 
#line 1419 
  ;
  
#line 1426 
  cmd->size = (unsigned short)((unsigned int)((unsigned short)((long)pos - (long)mef_cfg)) + 8U);
  
#line 1428 
  __retres = 0;
  return_label: 
#line 1428 
                return __retres;
}


#line 1432  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_cmd.c"
static u32 mwifiex_parse_cal_cfg(u8 *src, size_t len, u8 *dst)
{
  u32 __retres;
  
#line 1434 
  u8 *s = src;
  
#line 1434 
  u8 *d = dst;
  
#line 1436 
  goto ldv_61750;
  ldv_61751: 
#line 1437 
  ;
  
#line 1437 
  if ((unsigned int)*s != 0U && (((int)_ctype[(int)*s] & 32) != 0 || (unsigned int)*s == 9U)) {
    
#line 1438 
    s += 1;
    
#line 1439 
    goto ldv_61750;
  }
  else ;
  
#line 1441 
  if (((int)_ctype[(int)*s] & 68) != 0) {
    u8 *tmp;
    long tmp_0;
    
#line 1442 
    tmp = d;
    
#line 1442 
    d += 1;
    
#line 1442 
    tmp_0 = simple_strtol((char const *)s,(char **)0,16U);
    
#line 1442 
    *tmp = (unsigned char)tmp_0;
    
#line 1443 
    s += 2U;
  }
  else 
#line 1445 
       s += 1;
  ldv_61750: 
#line 1446 
  ;
  
#line 1436 
  if ((unsigned long)((long)s - (long)src) < len) 
#line 1438 
                                                  goto ldv_61751; else 
                                                                    
#line 1441 
                                                                    goto ldv_61752;
  ldv_61752: 
#line 1442 
  ;
  
#line 1449 
  __retres = (unsigned int)((long)d - (long)dst);
  
#line 1449 
  return __retres;
}


#line 1452  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_cmd.c"
int mwifiex_dnld_dt_cfgdata(struct mwifiex_private *priv, struct device_node *node, char const *prefix)
{
  int __retres;
  struct property *prop;
  int ret;
  size_t tmp_0;
  
#line 1457 
  size_t len = strlen(prefix);
  
#line 1461 
  prop = node->properties;
  
#line 1461 
  goto ldv_61763;
  ldv_61762: 
#line 1462 
  ;
  
#line 1462 
  tmp_0 = strlen((char const *)prop->name);
  
#line 1462 
  ;
  
#line 1462 
  if (tmp_0 < len) 
#line 1462 
                   goto _LOR;
  else {
    int tmp_1;
    
#line 1462 
    tmp_1 = strncmp((char const *)prop->name,prefix,len);
    
#line 1462 
    if (tmp_1 != 0) _LOR: 
#line 1464 
                          goto ldv_61761; else ;
  }
  
#line 1467 
  if (((prop != (struct property *)0 && prop->value != (void *)0) && prop->length > 6) && (unsigned int)prop->length <= 2040U) {
    
#line 1469 
    ret = mwifiex_send_cmd(priv,(unsigned short)143,(unsigned short)1,0U,(void *)prop,(_Bool)1);
    
#line 1472 
    if (ret != 0) {
      
#line 1473 
      __retres = ret;
      
#line 1473 
      goto return_label;
    }
    else ;
  }
  else ;
  ldv_61761: 
#line 1475 
  ;
  
#line 1461 
  prop = prop->next;
  ldv_61763: 
#line 1462 
  ;
  
#line 1461 
  if (prop != (struct property *)0) 
#line 1463 
                                    goto ldv_61762; else 
#line 1466 
                                                         goto ldv_61764;
  ldv_61764: 
#line 1467 
  ;
  
#line 1477 
  __retres = 0;
  return_label: 
#line 1477 
                return __retres;
}


#line 1481  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_cmd.c"
static int mwifiex_cmd_cfg_data(struct mwifiex_private *priv, struct host_cmd_ds_command *cmd, void *data_buf)
{
  int __retres;
  u32 len;
  int ret;
  
#line 1484 
  struct mwifiex_adapter *adapter = priv->adapter;
  
#line 1485 
  struct property *prop = (struct property *)data_buf;
  
#line 1487 
  u8 *data = (u8 *)cmd + 8U;
  
#line 1490 
  if (prop != (struct property *)0) {
    
#line 1491 
    len = (unsigned int)prop->length;
    
#line 1492 
    ret = of_property_read_u8_array((struct device_node const *)adapter->dt_node,(char const *)prop->name,data,(unsigned long)len);
    
#line 1494 
    if (ret != 0) {
      
#line 1495 
      __retres = ret;
      
#line 1495 
      goto return_label;
    }
    else ;
    
#line 1496 
    if ((adapter->debug_mask & 1073741824U) != 0U) {
      
#line 1496 
      if (adapter->dev != (struct device *)0) 
#line 1496 
                                              _dev_info((struct device const *)adapter->dev,"download cfg_data from device tree: %s\n",prop->name); else ;
    }
    else ;
  }
  else 
    
#line 1499 
    if ((adapter->cal_data)->data != (u8 const *)0U && (adapter->cal_data)->size != 0UL) {
      
#line 1500 
      len = mwifiex_parse_cal_cfg((u8 *)(adapter->cal_data)->data,(adapter->cal_data)->size,data);
      
#line 1502 
      if ((adapter->debug_mask & 1073741824U) != 0U) {
        
#line 1502 
        if (adapter->dev != (struct device *)0) 
#line 1502 
                                                _dev_info((struct device const *)adapter->dev,"download cfg_data from config file\n"); else ;
      }
      else ;
    }
    else {
      
#line 1505 
      __retres = -1;
      
#line 1505 
      goto return_label;
    }
  
#line 1508 
  cmd->command = (unsigned short)143U;
  
#line 1509 
  cmd->size = (unsigned short)((unsigned int)((unsigned short)len) + 8U);
  
#line 1511 
  __retres = 0;
  return_label: 
#line 1511 
                return __retres;
}


#line 1515  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_cmd.c"
static int mwifiex_cmd_coalesce_cfg(struct mwifiex_private *priv, struct host_cmd_ds_command *cmd, u16 cmd_action, void *data_buf)
{
  int __retres;
  struct coalesce_filt_field_param *param;
  u16 cnt;
  u16 idx;
  u16 length;
  struct coalesce_receive_filt_rule *rule;
  
#line 1519 
  struct host_cmd_ds_coalesce_cfg *coalesce_cfg = & cmd->params.coalesce_cfg;
  
#line 1521 
  struct mwifiex_ds_coalesce_cfg *cfg = (struct mwifiex_ds_coalesce_cfg *)data_buf;
  
#line 1526 
  cmd->command = (unsigned short)266U;
  
#line 1527 
  cmd->size = (unsigned short)8U;
  
#line 1529 
  coalesce_cfg->action = cmd_action;
  
#line 1530 
  coalesce_cfg->num_of_rules = cfg->num_of_rules;
  
#line 1531 
  rule = (struct coalesce_receive_filt_rule *)(& coalesce_cfg->rule);
  
#line 1533 
  cnt = (unsigned short)0U;
  
#line 1533 
  goto ldv_61792;
  ldv_61791: 
#line 1534 
  ;
  
#line 1534 
  rule->header.type = (unsigned short)410U;
  
#line 1535 
  rule->max_coalescing_delay = cfg->rule[(int)cnt].max_coalescing_delay;
  
#line 1537 
  rule->pkt_type = cfg->rule[(int)cnt].pkt_type;
  
#line 1538 
  rule->num_of_fields = cfg->rule[(int)cnt].num_of_fields;
  
#line 1540 
  length = (unsigned short)0U;
  
#line 1542 
  param = (struct coalesce_filt_field_param *)(& rule->params);
  
#line 1543 
  idx = (unsigned short)0U;
  
#line 1543 
  goto ldv_61789;
  ldv_61788: 
#line 1544 
  ;
  
#line 1544 
  param->operation = cfg->rule[(int)cnt].params[(int)idx].operation;
  
#line 1545 
  param->operand_len = cfg->rule[(int)cnt].params[(int)idx].operand_len;
  
#line 1547 
  param->offset = cfg->rule[(int)cnt].params[(int)idx].offset;
  
#line 1549 
  memcpy((void *)(& param->operand_byte_stream),(void const *)(& cfg->rule[(int)cnt].params[(int)idx].operand_byte_stream),(unsigned long)param->operand_len);
  
#line 1553 
  length = (unsigned short)((unsigned int)length + 8U);
  
#line 1555 
  param += 1;
  
#line 1543 
  idx = (u16)((int)idx + 1);
  ldv_61789: 
#line 1544 
  ;
  
#line 1543 
  if ((int)((unsigned short)cfg->rule[(int)cnt].num_of_fields) > (int)idx) 
    
#line 1545 
    goto ldv_61788; else 
#line 1548 
                         goto ldv_61790;
  ldv_61790: 
#line 1549 
  ;
  
#line 1562 
  rule->header.len = (unsigned short)((unsigned int)length + 4U);
  
#line 1566 
  le16_add_cpu(& cmd->size,(unsigned short)((int)((unsigned int)rule->header.len + 4U)));
  
#line 1569 
  rule = (struct coalesce_receive_filt_rule *)(& rule->params) + (int)length;
  
#line 1533 
  cnt = (u16)((int)cnt + 1);
  ldv_61792: 
#line 1534 
  ;
  
#line 1533 
  if ((int)cfg->num_of_rules > (int)cnt) 
#line 1535 
                                         goto ldv_61791; else 
#line 1538 
                                                              goto ldv_61793;
  ldv_61793: 
#line 1539 
  ;
  
#line 1573 
  le16_add_cpu(& cmd->size,(unsigned short)4);
  
#line 1575 
  __retres = 0;
  
#line 1575 
  return __retres;
}


#line 1579  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_cmd.c"
static int mwifiex_cmd_tdls_oper(struct mwifiex_private *priv, struct host_cmd_ds_command *cmd, void *data_buf)
{
  int __retres;
  struct mwifiex_sta_node *sta_ptr;
  struct host_cmd_tlv_rates *tlv_rates;
  struct mwifiex_ie_types_htcap *ht_capab;
  struct mwifiex_ie_types_qos_info *wmm_qos_info;
  struct mwifiex_ie_types_extcap *extcap;
  struct mwifiex_ie_types_vhtcap *vht_capab;
  struct mwifiex_ie_types_aid *aid;
  struct mwifiex_ie_types_tdls_idle_timeout *timeout;
  u8 *pos;
  u8 qos_info;
  
#line 1583 
  struct host_cmd_ds_tdls_oper *tdls_oper = & cmd->params.tdls_oper;
  
#line 1584 
  struct mwifiex_ds_tdls_oper *oper = (struct mwifiex_ds_tdls_oper *)data_buf;
  
#line 1594 
  u16 config_len = (unsigned short)0U;
  
#line 1595 
  struct station_parameters *params = priv->sta_params;
  
#line 1597 
  cmd->command = (unsigned short)290U;
  
#line 1598 
  cmd->size = (unsigned short)8U;
  
#line 1599 
  le16_add_cpu(& cmd->size,(unsigned short)10);
  
#line 1601 
  tdls_oper->reason = (unsigned short)0U;
  
#line 1602 
  memcpy((void *)(& tdls_oper->peer_mac),(void const *)(& oper->peer_mac),6UL);
  
#line 1603 
  sta_ptr = mwifiex_get_sta_entry(priv,(u8 const *)(& oper->peer_mac));
  
#line 1605 
  pos = (u8 *)tdls_oper + 10U;
  
#line 1607 
  switch ((int)oper->tdls_action) {
    case 0: 
#line 1608 
    ;
    
#line 1609 
    tdls_oper->tdls_action = (unsigned short)0U;
    
#line 1610 
    goto ldv_61814;
    case 2: 
#line 1611 
    ;
    
#line 1612 
    tdls_oper->tdls_action = (unsigned short)1U;
    
#line 1613 
    goto ldv_61814;
    case 3: 
#line 1614 
    ;
    
#line 1615 
    tdls_oper->tdls_action = (unsigned short)2U;
    
#line 1617 
    if (params == (struct station_parameters *)0) {
      
#line 1618 
      if (((priv->adapter)->debug_mask & 4U) != 0U) {
        
#line 1618 
        if ((priv->adapter)->dev != (struct device *)0) 
#line 1618 
                                                        _dev_info((struct device const *)(priv->adapter)->dev,"TDLS config params not available for %pM\n",(u8 *)(& oper->peer_mac)); else ;
      }
      else ;
      
#line 1621 
      __retres = -61;
      
#line 1621 
      goto return_label;
    }
    else ;
    
#line 1624 
    *((__le16 *)pos) = params->capability;
    
#line 1625 
    config_len = (unsigned short)((unsigned int)config_len + 2U);
    
#line 1627 
    qos_info = (unsigned char)((int)params->uapsd_queues | ((int)params->max_sp << 5));
    
#line 1628 
    wmm_qos_info = (struct mwifiex_ie_types_qos_info *)(pos + (int)config_len);
    
#line 1630 
    wmm_qos_info->header.type = (unsigned short)46U;
    
#line 1631 
    wmm_qos_info->header.len = (unsigned short)1U;
    
#line 1632 
    wmm_qos_info->qos_info = qos_info;
    
#line 1633 
    config_len = (unsigned short)((unsigned int)config_len + 5U);
    
#line 1635 
    if (params->ht_capa != (struct ieee80211_ht_cap const *)0) {
      
#line 1636 
      ht_capab = (struct mwifiex_ie_types_htcap *)(pos + (int)config_len);
      
#line 1638 
      ht_capab->header.type = (unsigned short)45U;
      
#line 1640 
      ht_capab->header.len = (unsigned short)26U;
      
#line 1642 
      memcpy((void *)(& ht_capab->ht_cap),(void const *)params->ht_capa,26UL);
      
#line 1644 
      config_len = (unsigned short)((unsigned int)config_len + 30U);
    }
    else ;
    
#line 1647 
    if (params->supported_rates != (u8 const *)0U && (unsigned int)params->supported_rates_len != 0U) {
      
#line 1648 
      tlv_rates = (struct host_cmd_tlv_rates *)(pos + (int)config_len);
      
#line 1650 
      tlv_rates->header.type = (unsigned short)1U;
      
#line 1652 
      tlv_rates->header.len = (unsigned short)params->supported_rates_len;
      
#line 1654 
      memcpy((void *)(& tlv_rates->rates),(void const *)params->supported_rates,(unsigned long)params->supported_rates_len);
      
#line 1656 
      config_len = (unsigned short)((unsigned int)((int)((unsigned short)params->supported_rates_len) + (int)config_len) + 4U);
    }
    else ;
    
#line 1660 
    if (params->ext_capab != (u8 const *)0U && (unsigned int)params->ext_capab_len != 0U) {
      
#line 1661 
      extcap = (struct mwifiex_ie_types_extcap *)(pos + (int)config_len);
      
#line 1663 
      extcap->header.type = (unsigned short)127U;
      
#line 1665 
      extcap->header.len = (unsigned short)params->ext_capab_len;
      
#line 1666 
      memcpy((void *)(& extcap->ext_capab),(void const *)params->ext_capab,(unsigned long)params->ext_capab_len);
      
#line 1668 
      config_len = (unsigned short)((unsigned int)((int)((unsigned short)params->ext_capab_len) + (int)config_len) + 4U);
    }
    else ;
    
#line 1671 
    if (params->vht_capa != (struct ieee80211_vht_cap const *)0) {
      
#line 1672 
      vht_capab = (struct mwifiex_ie_types_vhtcap *)(pos + (int)config_len);
      
#line 1674 
      vht_capab->header.type = (unsigned short)191U;
      
#line 1676 
      vht_capab->header.len = (unsigned short)12U;
      
#line 1678 
      memcpy((void *)(& vht_capab->vht_cap),(void const *)params->vht_capa,12UL);
      
#line 1680 
      config_len = (unsigned short)((unsigned int)config_len + 16U);
    }
    else ;
    
#line 1682 
    if ((unsigned int)params->aid != 0U) {
      
#line 1683 
      aid = (struct mwifiex_ie_types_aid *)(pos + (int)config_len);
      
#line 1684 
      aid->header.type = (unsigned short)197U;
      
#line 1685 
      aid->header.len = (unsigned short)2U;
      
#line 1686 
      aid->aid = params->aid;
      
#line 1687 
      config_len = (unsigned short)((unsigned int)config_len + 6U);
    }
    else ;
    
#line 1690 
    timeout = (struct mwifiex_ie_types_tdls_idle_timeout *)(pos + (int)config_len);
    
#line 1691 
    timeout->header.type = (unsigned short)450U;
    
#line 1692 
    timeout->header.len = (unsigned short)2U;
    
#line 1693 
    timeout->value = (unsigned short)60U;
    
#line 1694 
    config_len = (unsigned short)((unsigned int)config_len + 6U);
    
#line 1696 
    goto ldv_61814;
    default: 
#line 1697 
    ;
    
#line 1698 
    if (((priv->adapter)->debug_mask & 4U) != 0U) {
      
#line 1698 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 1698 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"Unknown TDLS operation\n"); else ;
    }
    else ;
    
#line 1699 
    __retres = -524;
    
#line 1699 
    goto return_label;
  }
  ldv_61814: 
#line 1702 
  ;
  
#line 1702 
  le16_add_cpu(& cmd->size,(unsigned short)((int)config_len));
  
#line 1704 
  __retres = 0;
  return_label: 
#line 1704 
                return __retres;
}


#line 1708  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_cmd.c"
static int mwifiex_cmd_sdio_rx_aggr_cfg(struct host_cmd_ds_command *cmd, u16 cmd_action, void *data_buf)
{
  int __retres;
  
#line 1711 
  struct host_cmd_sdio_sp_rx_aggr_cfg *cfg = & cmd->params.sdio_rx_aggr_cfg;
  
#line 1714 
  cmd->command = (unsigned short)547U;
  
#line 1715 
  cmd->size = (unsigned short)12U;
  
#line 1718 
  cfg->action = (unsigned char)cmd_action;
  
#line 1719 
  if ((unsigned int)cmd_action == 1U) 
#line 1720 
                                      cfg->enable = *((u8 *)data_buf); else ;
  
#line 1722 
  __retres = 0;
  
#line 1722 
  return __retres;
}


#line 1731  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_cmd.c"
int mwifiex_sta_prepare_cmd(struct mwifiex_private *priv, uint16_t cmd_no, u16 cmd_action, u32 cmd_oid, void *data_buf, void *cmd_buf)
{
  
#line 1735 
  struct host_cmd_ds_command *cmd_ptr = (struct host_cmd_ds_command *)cmd_buf;
  
#line 1736 
  int ret = 0;
  
#line 1739 
  switch ((int)cmd_no) {
    case 3: 
#line 1740 
    ;
    
#line 1741 
    ret = mwifiex_cmd_get_hw_spec(priv,cmd_ptr);
    
#line 1742 
    goto ldv_61835;
    case 143: 
#line 1743 
    ;
    
#line 1744 
    ret = mwifiex_cmd_cfg_data(priv,cmd_ptr,data_buf);
    
#line 1745 
    goto ldv_61835;
    case 40: 
#line 1746 
    ;
    
#line 1747 
    ret = mwifiex_cmd_mac_control(priv,cmd_ptr,(unsigned short)((int)cmd_action),(u16 *)data_buf);
    
#line 1749 
    goto ldv_61835;
    case 77: 
#line 1750 
    ;
    
#line 1751 
    ret = mwifiex_cmd_802_11_mac_address(priv,cmd_ptr,(unsigned short)((int)cmd_action));
    
#line 1753 
    goto ldv_61835;
    case 16: 
#line 1754 
    ;
    
#line 1755 
    ret = mwifiex_cmd_mac_multicast_adr(cmd_ptr,(unsigned short)((int)cmd_action),(struct mwifiex_multicast_list *)data_buf);
    
#line 1757 
    goto ldv_61835;
    case 214: 
#line 1758 
    ;
    
#line 1759 
    ret = mwifiex_cmd_tx_rate_cfg(priv,cmd_ptr,(unsigned short)((int)cmd_action),(u16 *)data_buf);
    
#line 1761 
    goto ldv_61835;
    case 209: 
#line 1762 
    ;
    
#line 1763 
    ret = mwifiex_cmd_tx_power_cfg(cmd_ptr,(unsigned short)((int)cmd_action),(struct host_cmd_ds_txpwr_cfg *)data_buf);
    
#line 1765 
    goto ldv_61835;
    case 30: 
#line 1766 
    ;
    
#line 1767 
    ret = mwifiex_cmd_rf_tx_power(priv,cmd_ptr,(unsigned short)((int)cmd_action),data_buf);
    
#line 1769 
    goto ldv_61835;
    case 32: 
#line 1770 
    ;
    
#line 1771 
    ret = mwifiex_cmd_rf_antenna(priv,cmd_ptr,(unsigned short)((int)cmd_action),(struct mwifiex_ds_ant_cfg *)data_buf);
    
#line 1773 
    goto ldv_61835;
    case 228: 
#line 1774 
    ;
    
#line 1775 
    ret = mwifiex_cmd_enh_power_mode(priv,cmd_ptr,(unsigned short)((int)cmd_action),(unsigned short)((int)((unsigned short)cmd_oid)),(struct mwifiex_ds_auto_ds *)data_buf);
    
#line 1777 
    goto ldv_61835;
    case 229: 
#line 1778 
    ;
    
#line 1779 
    ret = mwifiex_cmd_802_11_hs_cfg(priv,cmd_ptr,(unsigned short)((int)cmd_action),(struct mwifiex_hs_config_param *)data_buf);
    
#line 1781 
    goto ldv_61835;
    case 6: 
#line 1782 
    ;
    
#line 1783 
    ret = mwifiex_cmd_802_11_scan(cmd_ptr,(struct mwifiex_scan_cmd_config *)data_buf);
    
#line 1784 
    goto ldv_61835;
    case 108: 
#line 1785 
    ;
    
#line 1786 
    ret = mwifiex_cmd_802_11_bg_scan_query(cmd_ptr);
    
#line 1787 
    goto ldv_61835;
    case 18: 
#line 1788 
    ;
    
#line 1789 
    ret = mwifiex_cmd_802_11_associate(priv,cmd_ptr,(struct mwifiex_bssdescriptor *)data_buf);
    
#line 1790 
    goto ldv_61835;
    case 36: 
#line 1791 
    ;
    
#line 1792 
    ret = mwifiex_cmd_802_11_deauthenticate(priv,cmd_ptr,(u8 *)data_buf);
    
#line 1794 
    goto ldv_61835;
    case 43: 
#line 1795 
    ;
    
#line 1796 
    ret = mwifiex_cmd_802_11_ad_hoc_start(priv,cmd_ptr,(struct cfg80211_ssid *)data_buf);
    
#line 1798 
    goto ldv_61835;
    case 11: 
#line 1799 
    ;
    
#line 1800 
    ret = mwifiex_cmd_802_11_get_log(cmd_ptr);
    
#line 1801 
    goto ldv_61835;
    case 44: 
#line 1802 
    ;
    
#line 1803 
    ret = mwifiex_cmd_802_11_ad_hoc_join(priv,cmd_ptr,(struct mwifiex_bssdescriptor *)data_buf);
    
#line 1805 
    goto ldv_61835;
    case 64: 
#line 1806 
    ;
    
#line 1807 
    ret = mwifiex_cmd_802_11_ad_hoc_stop(cmd_ptr);
    
#line 1808 
    goto ldv_61835;
    case 164: 
#line 1809 
    ;
    
#line 1810 
    ret = mwifiex_cmd_802_11_rssi_info(priv,cmd_ptr,(unsigned short)((int)cmd_action));
    
#line 1811 
    goto ldv_61835;
    case 22: 
#line 1812 
    ;
    
#line 1813 
    ret = mwifiex_cmd_802_11_snmp_mib(priv,cmd_ptr,(unsigned short)((int)cmd_action),cmd_oid,(u16 *)data_buf);
    
#line 1815 
    goto ldv_61835;
    case 127: 
#line 1816 
    ;
    
#line 1817 
    cmd_ptr->command = (unsigned short)127U;
    
#line 1819 
    cmd_ptr->size = (unsigned short)10U;
    
#line 1822 
    priv->tx_rate = (unsigned char)0U;
    
#line 1823 
    ret = 0;
    
#line 1824 
    goto ldv_61835;
    case 151: 
#line 1825 
    ;
    
#line 1826 
    cmd_ptr->command = cmd_no;
    
#line 1827 
    cmd_ptr->params.verext.version_str_sel = (unsigned char)*((u32 *)data_buf);
    
#line 1829 
    memcpy((void *)(& cmd_ptr->params),(void const *)data_buf,129UL);
    
#line 1831 
    cmd_ptr->size = (unsigned short)137U;
    
#line 1834 
    ret = 0;
    
#line 1835 
    goto ldv_61835;
    case 268: 
#line 1836 
    ;
    
#line 1837 
    cmd_ptr->command = cmd_no;
    
#line 1838 
    cmd_ptr->params.reg_mask.action = cmd_action;
    
#line 1839 
    cmd_ptr->params.reg_mask.mask = *((u32 *)data_buf);
    
#line 1840 
    cmd_ptr->size = (unsigned short)14U;
    
#line 1843 
    ret = 0;
    
#line 1844 
    goto ldv_61835;
    case 269: 
#line 1845 
    ;
    
#line 1846 
    cmd_ptr->command = cmd_no;
    
#line 1847 
    memcpy((void *)(& cmd_ptr->params),(void const *)data_buf,10UL);
    
#line 1849 
    cmd_ptr->size = (unsigned short)18U;
    
#line 1852 
    goto ldv_61835;
    case 274: 
#line 1853 
    ;
    
#line 1854 
    ret = mwifiex_cmd_11ac_cfg(priv,cmd_ptr,(unsigned short)((int)cmd_action),(struct mwifiex_11ac_vht_cfg *)data_buf);
    
#line 1855 
    goto ldv_61835;
    case 235: 
#line 1856 
    ;
    
#line 1857 
    cmd_ptr->command = cmd_no;
    
#line 1858 
    cmd_ptr->params.mode_cfg.action = cmd_action;
    
#line 1859 
    cmd_ptr->params.mode_cfg.mode = *((u16 *)data_buf);
    
#line 1860 
    cmd_ptr->size = (unsigned short)12U;
    
#line 1863 
    goto ldv_61835;
    case 169: 
#line 1864 
    ;
    
#line 1865 
    if ((priv->adapter)->hw_status == (unsigned int)MWIFIEX_HW_STATUS_RESET) 
      
#line 1866 
      (priv->adapter)->hw_status = MWIFIEX_HW_STATUS_READY; else ;
    
#line 1867 
    cmd_ptr->command = cmd_no;
    
#line 1868 
    cmd_ptr->size = (unsigned short)8U;
    
#line 1869 
    goto ldv_61835;
    case 170: 
#line 1870 
    ;
    
#line 1871 
    (priv->adapter)->hw_status = MWIFIEX_HW_STATUS_RESET;
    
#line 1872 
    cmd_ptr->command = cmd_no;
    
#line 1873 
    cmd_ptr->size = (unsigned short)8U;
    
#line 1874 
    goto ldv_61835;
    case 206: 
#line 1875 
    ;
    
#line 1876 
    ret = mwifiex_cmd_11n_addba_req(cmd_ptr,data_buf);
    
#line 1877 
    goto ldv_61835;
    case 208: 
#line 1878 
    ;
    
#line 1879 
    ret = mwifiex_cmd_11n_delba(cmd_ptr,data_buf);
    
#line 1880 
    goto ldv_61835;
    case 207: 
#line 1881 
    ;
    
#line 1882 
    ret = mwifiex_cmd_11n_addba_rsp_gen(priv,cmd_ptr,(struct host_cmd_ds_11n_addba_req *)data_buf);
    
#line 1883 
    goto ldv_61835;
    case 94: 
#line 1884 
    ;
    
#line 1885 
    ret = mwifiex_cmd_802_11_key_material(priv,cmd_ptr,(unsigned short)((int)cmd_action),cmd_oid,(struct mwifiex_ds_encrypt_key *)data_buf);
    
#line 1888 
    goto ldv_61835;
    case 91: 
#line 1889 
    ;
    
#line 1890 
    ret = mwifiex_cmd_802_11d_domain_info(priv,cmd_ptr,(unsigned short)((int)cmd_action));
    
#line 1892 
    goto ldv_61835;
    case 217: 
#line 1893 
    ;
    
#line 1894 
    ret = mwifiex_cmd_recfg_tx_buf(priv,cmd_ptr,(int)cmd_action,(u16 *)data_buf);
    
#line 1896 
    goto ldv_61835;
    case 223: 
#line 1897 
    ;
    
#line 1898 
    ret = mwifiex_cmd_amsdu_aggr_ctrl(cmd_ptr,(int)cmd_action,(struct mwifiex_ds_11n_amsdu_aggr_ctrl *)data_buf);
    
#line 1900 
    goto ldv_61835;
    case 205: 
#line 1901 
    ;
    
#line 1902 
    ret = mwifiex_cmd_11n_cfg(priv,cmd_ptr,(unsigned short)((int)cmd_action),(struct mwifiex_ds_11n_tx_cfg *)data_buf);
    
#line 1903 
    goto ldv_61835;
    case 113: 
#line 1904 
    ;
    
#line 1905 
    if (((priv->adapter)->debug_mask & 16U) != 0U) {
      
#line 1905 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 1905 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"cmd: WMM: WMM_GET_STATUS cmd sent\n"); else ;
    }
    else ;
    
#line 1907 
    cmd_ptr->command = (unsigned short)113U;
    
#line 1908 
    cmd_ptr->size = (unsigned short)100U;
    
#line 1911 
    ret = 0;
    
#line 1912 
    goto ldv_61835;
    case 131: 
#line 1913 
    ;
    
#line 1914 
    ret = mwifiex_cmd_ibss_coalescing_status(cmd_ptr,(unsigned short)((int)cmd_action),(u16 *)data_buf);
    
#line 1916 
    goto ldv_61835;
    case 263: 
#line 1917 
    ;
    
#line 1918 
    ret = mwifiex_cmd_802_11_scan_ext(priv,cmd_ptr,data_buf);
    
#line 1919 
    goto ldv_61835;
    case 134: 
#line 1920 
    ;
    
#line 1921 
    ret = mwifiex_cmd_mem_access(cmd_ptr,(unsigned short)((int)cmd_action),data_buf);
    
#line 1922 
    goto ldv_61835;
    case 25: 
#line 1923 
    ;
    case 26: 
#line 1924 
    ;
    case 27: 
#line 1925 
    ;
    case 173: 
#line 1926 
    ;
    case 237: 
#line 1927 
    ;
    case 89: 
#line 1928 
    ;
    
#line 1929 
    ret = mwifiex_cmd_reg_access(cmd_ptr,(unsigned short)((int)cmd_action),data_buf);
    
#line 1930 
    goto ldv_61835;
    case 247: 
#line 1931 
    ;
    
#line 1932 
    cmd_ptr->command = cmd_no;
    
#line 1933 
    if (priv->bss_mode == 1U) 
#line 1934 
                              cmd_ptr->params.bss_mode.con_type = (unsigned char)1U;
    else 
      
#line 1936 
      if (priv->bss_mode == 2U) 
#line 1937 
                                cmd_ptr->params.bss_mode.con_type = (unsigned char)0U;
      else 
        
#line 1939 
        if (priv->bss_mode == 3U) 
#line 1940 
                                  cmd_ptr->params.bss_mode.con_type = (unsigned char)2U; else ;
    
#line 1941 
    cmd_ptr->size = (unsigned short)9U;
    
#line 1943 
    ret = 0;
    
#line 1944 
    goto ldv_61835;
    case 250: 
#line 1945 
    ;
    
#line 1946 
    ret = mwifiex_cmd_pcie_host_spec(priv,cmd_ptr,(unsigned short)((int)cmd_action));
    
#line 1947 
    goto ldv_61835;
    case 117: 
#line 1948 
    ;
    
#line 1949 
    ret = mwifiex_cmd_802_11_subsc_evt(priv,cmd_ptr,(struct mwifiex_ds_misc_subsc_evt *)data_buf);
    
#line 1950 
    goto ldv_61835;
    case 154: 
#line 1951 
    ;
    
#line 1952 
    ret = mwifiex_cmd_mef_cfg(priv,cmd_ptr,(struct mwifiex_ds_mef_cfg *)data_buf);
    
#line 1953 
    goto ldv_61835;
    case 266: 
#line 1954 
    ;
    
#line 1955 
    ret = mwifiex_cmd_coalesce_cfg(priv,cmd_ptr,(unsigned short)((int)cmd_action),data_buf);
    
#line 1957 
    goto ldv_61835;
    case 290: 
#line 1958 
    ;
    
#line 1959 
    ret = mwifiex_cmd_tdls_oper(priv,cmd_ptr,data_buf);
    
#line 1960 
    goto ldv_61835;
    case 221: 
#line 1961 
    ;
    
#line 1962 
    ret = mwifiex_cmd_issue_chan_report_request(priv,cmd_ptr,data_buf);
    
#line 1964 
    goto ldv_61835;
    case 547: 
#line 1965 
    ;
    
#line 1966 
    ret = mwifiex_cmd_sdio_rx_aggr_cfg(cmd_ptr,(unsigned short)((int)cmd_action),data_buf);
    
#line 1968 
    goto ldv_61835;
    default: 
#line 1969 
    ;
    
#line 1970 
    if (((priv->adapter)->debug_mask & 4U) != 0U) {
      
#line 1970 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 1970 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"PREP_CMD: unknown cmd- %#x\n",(int)cmd_no); else ;
    }
    else ;
    
#line 1972 
    ret = -1;
    
#line 1973 
    goto ldv_61835;
  }
  ldv_61835: 
#line 1975 
  ;
  
#line 1975 
  return ret;
}


#line 1999  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_cmd.c"
int mwifiex_sta_init_cmd(struct mwifiex_private *priv, u8 first_sta, bool init)
{
  int __retres;
  int ret;
  struct mwifiex_ds_11n_amsdu_aggr_ctrl amsdu_aggr_ctrl;
  struct mwifiex_ds_auto_ds auto_ds;
  enum state_11d_t state_11d;
  struct mwifiex_ds_11n_tx_cfg tx_cfg;
  u8 sdio_sp_rx_aggr_enable;
  
#line 2001 
  struct mwifiex_adapter *adapter = priv->adapter;
  
#line 2003 
  u16 enable = (unsigned short)1U;
  
#line 2010 
  if ((unsigned int)first_sta != 0U) {
    
#line 2011 
    if ((unsigned int)(priv->adapter)->iface_type == 1U) {
      
#line 2012 
      ret = mwifiex_send_cmd(priv,(unsigned short)250,(unsigned short)1,0U,(void *)0,(_Bool)1);
      
#line 2016 
      if (ret != 0) {
        
#line 2017 
        __retres = -1;
        
#line 2017 
        goto return_label;
      }
      else ;
    }
    else ;
    
#line 2020 
    ret = mwifiex_send_cmd(priv,(unsigned short)169,(unsigned short)1,0U,(void *)0,(_Bool)1);
    
#line 2022 
    if (ret != 0) {
      
#line 2023 
      __retres = -1;
      
#line 2023 
      goto return_label;
    }
    else ;
    
#line 2029 
    adapter->dt_node = of_find_node_by_name((struct device_node *)0,"marvell_cfgdata");
    
#line 2031 
    if (adapter->dt_node != (struct device_node *)0) {
      
#line 2032 
      ret = mwifiex_dnld_dt_cfgdata(priv,adapter->dt_node,"marvell,caldata");
      
#line 2034 
      if (ret != 0) {
        
#line 2035 
        __retres = -1;
        
#line 2035 
        goto return_label;
      }
      else ;
    }
    else ;
    
#line 2038 
    if (adapter->cal_data != (struct firmware const *)0) {
      
#line 2039 
      ret = mwifiex_send_cmd(priv,(unsigned short)143,(unsigned short)1,0U,(void *)0,(_Bool)1);
      
#line 2042 
      if (ret != 0) {
        
#line 2043 
        __retres = -1;
        
#line 2043 
        goto return_label;
      }
      else ;
    }
    else ;
    
#line 2047 
    ret = mwifiex_send_cmd(priv,(unsigned short)3,(unsigned short)0,0U,(void *)0,(_Bool)1);
    
#line 2049 
    if (ret != 0) {
      
#line 2050 
      __retres = -1;
      
#line 2050 
      goto return_label;
    }
    else ;
    
#line 2053 
    if ((unsigned int)(priv->adapter)->iface_type == 0U && ((unsigned long)(priv->adapter)->fw_cap_info & 65536UL) != 0UL) {
      
#line 2055 
      sdio_sp_rx_aggr_enable = (unsigned char)1U;
      
#line 2056 
      ret = mwifiex_send_cmd(priv,(unsigned short)547,(unsigned short)1,0U,(void *)(& sdio_sp_rx_aggr_enable),(_Bool)1);
      
#line 2061 
      if (ret != 0) {
        
#line 2062 
        if (((priv->adapter)->debug_mask & 4U) != 0U) {
          
#line 2062 
          if ((priv->adapter)->dev != (struct device *)0) 
#line 2062 
                                                          _dev_info((struct device const *)(priv->adapter)->dev,"error while enabling SP aggregation..disable it"); else ;
        }
        else ;
        
#line 2064 
        adapter->sdio_rx_aggr_enable = (_Bool)0;
      }
      else ;
    }
    else ;
    
#line 2069 
    ret = mwifiex_send_cmd(priv,(unsigned short)217,(unsigned short)1,0U,(void *)(& (priv->adapter)->tx_buf_size),(_Bool)1);
    
#line 2072 
    if (ret != 0) {
      
#line 2073 
      __retres = -1;
      
#line 2073 
      goto return_label;
    }
    else ;
    
#line 2075 
    if ((unsigned int)priv->bss_type != 1U) {
      
#line 2077 
      (priv->adapter)->ps_mode = (unsigned short)1U;
      
#line 2078 
      ret = mwifiex_send_cmd(priv,(unsigned short)228,(unsigned short)255,16U,(void *)0,(_Bool)1);
      
#line 2082 
      if (ret != 0) {
        
#line 2083 
        __retres = -1;
        
#line 2083 
        goto return_label;
      }
      else ;
    }
    else ;
  }
  else ;
  
#line 2088 
  ret = mwifiex_send_cmd(priv,(unsigned short)214,(unsigned short)0,0U,(void *)0,(_Bool)1);
  
#line 2090 
  if (ret != 0) {
    
#line 2091 
    __retres = -1;
    
#line 2091 
    goto return_label;
  }
  else ;
  
#line 2092 
  priv->data_rate = 0U;
  
#line 2095 
  ret = mwifiex_send_cmd(priv,(unsigned short)30,(unsigned short)0,0U,(void *)0,(_Bool)1);
  
#line 2097 
  if (ret != 0) {
    
#line 2098 
    __retres = -1;
    
#line 2098 
    goto return_label;
  }
  else ;
  
#line 2100 
  if ((unsigned int)priv->bss_type == 0U) {
    
#line 2102 
    ret = mwifiex_send_cmd(priv,(unsigned short)131,(unsigned short)1,0U,(void *)(& enable),(_Bool)1);
    
#line 2106 
    if (ret != 0) {
      
#line 2107 
      __retres = -1;
      
#line 2107 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 2110 
  memset((void *)(& amsdu_aggr_ctrl),0,4UL);
  
#line 2111 
  amsdu_aggr_ctrl.enable = (unsigned short)1U;
  
#line 2113 
  ret = mwifiex_send_cmd(priv,(unsigned short)223,(unsigned short)1,0U,(void *)(& amsdu_aggr_ctrl),(_Bool)1);
  
#line 2116 
  if (ret != 0) {
    
#line 2117 
    __retres = -1;
    
#line 2117 
    goto return_label;
  }
  else ;
  
#line 2120 
  ret = mwifiex_send_cmd(priv,(unsigned short)40,(unsigned short)1,0U,(void *)(& priv->curr_pkt_filter),(_Bool)1);
  
#line 2123 
  if (ret != 0) {
    
#line 2124 
    __retres = -1;
    
#line 2124 
    goto return_label;
  }
  else ;
  
#line 2126 
  if (((! disable_auto_ds && (unsigned int)first_sta != 0U) && (unsigned int)(priv->adapter)->iface_type != 2U) && (unsigned int)priv->bss_type != 1U) {
    
#line 2130 
    auto_ds.auto_ds = (unsigned short)1U;
    
#line 2131 
    auto_ds.idle_time = (unsigned short)100U;
    
#line 2132 
    ret = mwifiex_send_cmd(priv,(unsigned short)228,(unsigned short)255,1U,(void *)(& auto_ds),(_Bool)1);
    
#line 2135 
    if (ret != 0) {
      
#line 2136 
      __retres = -1;
      
#line 2136 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 2139 
  if ((unsigned int)priv->bss_type != 1U) {
    
#line 2141 
    state_11d = ENABLE_11D;
    
#line 2142 
    ret = mwifiex_send_cmd(priv,(unsigned short)22,(unsigned short)1,9U,(void *)(& state_11d),(_Bool)1);
    
#line 2145 
    if (ret != 0) {
      
#line 2146 
      if (((priv->adapter)->debug_mask & 4U) != 0U) {
        
#line 2146 
        if ((priv->adapter)->dev != (struct device *)0) 
#line 2146 
                                                        _dev_info((struct device const *)(priv->adapter)->dev,"11D: failed to enable 11D\n"); else ;
      }
      else ;
    }
    else ;
  }
  else ;
  
#line 2153 
  tx_cfg.tx_htcap = (unsigned short)114U;
  
#line 2154 
  ret = mwifiex_send_cmd(priv,(unsigned short)205,(unsigned short)1,0U,(void *)(& tx_cfg),(_Bool)1);
  
#line 2157 
  if ((int)init != 0) {
    
#line 2159 
    (priv->adapter)->last_init_cmd = (unsigned short)205U;
    
#line 2160 
    ret = -115;
  }
  else ;
  
#line 2163 
  __retres = ret;
  return_label: 
#line 2163 
                return __retres;
}


#line 98  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/atomic.h"
static void atomic_inc_5(atomic_t *v);


#line 114 
static void atomic_dec_4(atomic_t *v);


#line 446  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_unlock_irqrestore_7(spinlock_t *lock, unsigned long flags)
{
  {
    unsigned long __dummy;
    unsigned long __dummy2;
    
  }
  
#line 448 
  _raw_spin_unlock_irqrestore(& lock->__anonCompField_spinlock_18.rlock,flags);
  
#line 449 
  return;
}


#line 478 
static void ldv_spin_unlock_irqrestore_77_0(spinlock_t *lock, unsigned long flags);


#line 482 
static void ldv_spin_unlock_irqrestore_79_6(spinlock_t *lock, unsigned long flags);


#line 70  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_uap_txrx.c.aux"
static void ldv___ldv_spin_lock_76_0(spinlock_t *ldv_func_arg1);


#line 74 
static void ldv___ldv_spin_lock_78_5(spinlock_t *ldv_func_arg1);


#line 843  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct sk_buff *skb_copy(struct sk_buff const *, gfp_t);


#line 3667  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/cfg80211.h"
extern unsigned char const rfc1042_header[6U];


#line 3668 
extern unsigned char const bridge_tunnel_header[6U];


#line 170  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/etherdevice.h"
__inline static bool is_unicast_ether_addr(u8 const *addr)
{
  bool __retres;
  int tmp_0;
  bool tmp;
  
#line 172 
  tmp = is_multicast_ether_addr(addr);
  
#line 172 
  if ((int)tmp != 0) 
#line 172 
                     tmp_0 = 0; else 
#line 172 
                                     tmp_0 = 1;
  
#line 172 
  __retres = (_Bool)(tmp_0 != 0);
  
#line 172 
  return __retres;
}


#line 1081  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.h"
int mwifiex_process_uap_rx_packet(struct mwifiex_private *priv, struct sk_buff *skb);


#line 1091 
void *mwifiex_process_uap_txpd(struct mwifiex_private *priv, struct sk_buff *skb);


#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/uap_txrx.c"
static bool mwifiex_uap_del_tx_pkts_in_ralist(struct mwifiex_private *priv, struct list_head *ra_list_head)
{
  struct mwifiex_ra_list_tbl *ra_list;
  struct sk_buff *skb;
  struct sk_buff *tmp;
  struct mwifiex_txinfo *tx_info;
  struct mwifiex_ra_list_tbl *tmp_0;
  int tmp_1;
  int tmp_2;
  struct mwifiex_ra_list_tbl *tmp_3;
  
#line 38 
  bool pkt_deleted = (_Bool)0;
  
#line 40 
  struct mwifiex_adapter *adapter = priv->adapter;
  {
    
#line 42 
    struct list_head const *__mptr = (struct list_head const *)ra_list_head->next;
    
#line 42 
    tmp_0 = (struct mwifiex_ra_list_tbl *)__mptr;
  }
  
#line 42 
  ra_list = tmp_0;
  
#line 42 
  goto ldv_61365;
  ldv_61364: 
#line 43 
  ;
  
#line 43 
  tmp_1 = skb_queue_empty((struct sk_buff_head const *)(& ra_list->skb_head));
  
#line 43 
  if (tmp_1 != 0) 
#line 44 
                  goto ldv_61360; else ;
  
#line 46 
  skb = ra_list->skb_head.next;
  
#line 46 
  tmp = skb->__anonCompField_sk_buff_68.__anonCompField___anonunion_228_67.next;
  
#line 46 
  goto ldv_61363;
  ldv_61362: 
#line 47 
  ;
  
#line 47 
  tx_info = MWIFIEX_SKB_TXCB(skb);
  
#line 48 
  if (((unsigned long)tx_info->flags & 2UL) != 0UL) {
    
#line 49 
    __skb_unlink(skb,& ra_list->skb_head);
    
#line 50 
    mwifiex_write_data_complete(adapter,skb,0,-1);
    
#line 52 
    atomic_dec_4(& priv->wmm.tx_pkts_queued);
    
#line 53 
    pkt_deleted = (_Bool)1;
  }
  else ;
  
#line 55 
  tmp_2 = atomic_read((atomic_t const *)(& adapter->pending_bridged_pkts));
  
#line 55 
  if (tmp_2 <= 128) 
#line 57 
                    goto ldv_61361; else ;
  
#line 46 
  skb = tmp;
  
#line 46 
  tmp = skb->__anonCompField_sk_buff_68.__anonCompField___anonunion_228_67.next;
  ldv_61363: 
#line 47 
  ;
  
#line 46 
  if ((struct sk_buff *)(& ra_list->skb_head) != skb) 
#line 48 
                                                      goto ldv_61362; else 
                                                                    
#line 51 
                                                                    goto ldv_61361;
  ldv_61361: 
#line 52 
  ;
  ldv_61360: 
#line 53 
  ;
  {
    
#line 42 
    struct list_head const *__mptr_0 = (struct list_head const *)ra_list->list.next;
    
#line 42 
    tmp_3 = (struct mwifiex_ra_list_tbl *)__mptr_0;
  }
  
#line 42 
  ra_list = tmp_3;
  ldv_61365: 
#line 44 
  ;
  
#line 42 
  if (& ra_list->list != ra_list_head) 
#line 44 
                                       goto ldv_61364; else 
#line 47 
                                                            goto ldv_61366;
  ldv_61366: 
#line 48 
  ;
  
#line 61 
  return pkt_deleted;
}


#line 68  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/uap_txrx.c"
static void mwifiex_uap_cleanup_tx_queues(struct mwifiex_private *priv)
{
  unsigned long flags;
  struct list_head *ra_list;
  int i;
  bool tmp;
  
#line 74 
  ldv___ldv_spin_lock_76_0(& priv->wmm.ra_list_spinlock);
  
#line 76 
  i = 0;
  
#line 76 
  goto ldv_61375;
  ldv_61374: 
#line 77 
  ;
  
#line 77 
  if ((unsigned int)priv->del_list_idx == 8U) 
#line 78 
                                              priv->del_list_idx = (unsigned char)0U; else ;
  
#line 79 
  ra_list = & priv->wmm.tid_tbl_ptr[(int)priv->del_list_idx].ra_list;
  
#line 80 
  tmp = mwifiex_uap_del_tx_pkts_in_ralist(priv,ra_list);
  
#line 80 
  if ((int)tmp != 0) {
    
#line 81 
    priv->del_list_idx = (u8)((int)priv->del_list_idx + 1);
    
#line 82 
    goto ldv_61373;
  }
  else ;
  
#line 76 
  i += 1;
  
#line 76 
  priv->del_list_idx = (u8)((int)priv->del_list_idx + 1);
  ldv_61375: 
#line 77 
  ;
  
#line 76 
  if (i <= 7) 
#line 78 
              goto ldv_61374; else 
#line 81 
                                   goto ldv_61373;
  ldv_61373: 
#line 82 
  ;
  
#line 86 
  ldv_spin_unlock_irqrestore_77_0(& priv->wmm.ra_list_spinlock,flags);
  
#line 87 
  return;
}


#line 90  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/uap_txrx.c"
static void mwifiex_uap_queue_bridged_pkt(struct mwifiex_private *priv, struct sk_buff *skb)
{
  struct uap_rxpd *uap_rx_pd;
  struct rx_packet_hdr *rx_pkt_hdr;
  struct sk_buff *new_skb;
  struct mwifiex_txinfo *tx_info;
  int hdr_chop;
  struct ethhdr *p_ethhdr;
  struct mwifiex_sta_node *src_node;
  int tmp;
  int tmp_0;
  unsigned int tmp_8;
  bool tmp_9;
  
#line 93 
  struct mwifiex_adapter *adapter = priv->adapter;
  
#line 102 
  uap_rx_pd = (struct uap_rxpd *)skb->data;
  
#line 103 
  rx_pkt_hdr = (struct rx_packet_hdr *)uap_rx_pd + (int)uap_rx_pd->rx_pkt_offset;
  
#line 105 
  tmp = atomic_read((atomic_t const *)(& adapter->pending_bridged_pkts));
  
#line 105 
  if (tmp > 1023) {
    
#line 107 
    if (((priv->adapter)->debug_mask & 4U) != 0U) {
      
#line 107 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 107 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"Tx: Bridge packet limit reached. Drop packet!\n"); else ;
    }
    else ;
    
#line 109 
    kfree_skb(skb);
    
#line 110 
    mwifiex_uap_cleanup_tx_queues(priv);
    
#line 111 
    goto return_label;
  }
  else ;
  
#line 114 
  tmp_0 = memcmp((void const *)(& rx_pkt_hdr->rfc1042_hdr),(void const *)(& bridge_tunnel_header),6UL);
  
#line 114 
  if (tmp_0 == 0) 
#line 114 
                  goto _LOR;
  else {
    int tmp_1;
    
#line 115 
    tmp_1 = memcmp((void const *)(& rx_pkt_hdr->rfc1042_hdr),(void const *)(& rfc1042_header),6UL);
    
#line 115 
    if (tmp_1 == 0) {
      int tmp_3;
      
#line 117 
      if (0 != 0) 
#line 117 
                  tmp_3 = (((int)rx_pkt_hdr->rfc1042_hdr.snap_type << 8) | ((int)rx_pkt_hdr->rfc1042_hdr.snap_type >> 8)) != -32525;
      else {
        __u16 tmp_2;
        
#line 118 
        tmp_2 = __fswab16((unsigned short)((int)rx_pkt_hdr->rfc1042_hdr.snap_type));
        
#line 117 
        tmp_3 = (unsigned int)tmp_2 != 33011U;
      }
      
#line 117 
      if (tmp_3) {
        int tmp_5;
        
#line 118 
        if (0 != 0) 
#line 118 
                    tmp_5 = (((int)rx_pkt_hdr->rfc1042_hdr.snap_type << 8) | ((int)rx_pkt_hdr->rfc1042_hdr.snap_type >> 8)) != -32457;
        else {
          __u16 tmp_4;
          
#line 119 
          tmp_4 = __fswab16((unsigned short)((int)rx_pkt_hdr->rfc1042_hdr.snap_type));
          
#line 118 
          tmp_5 = (unsigned int)tmp_4 != 33079U;
        }
        
#line 118 
        if (tmp_5) {
          _LOR: {
                  
#line 130 
                  p_ethhdr = & rx_pkt_hdr->eth803_hdr + 8U;
                  
#line 137 
                  memcpy((void *)(& p_ethhdr->h_source),(void const *)(& rx_pkt_hdr->eth803_hdr.h_source),6UL);
                  
#line 139 
                  memcpy((void *)(& p_ethhdr->h_dest),(void const *)(& rx_pkt_hdr->eth803_hdr.h_dest),6UL);
                  
#line 144 
                  hdr_chop = (int)((long)p_ethhdr - (long)uap_rx_pd);
                }
        }
        else 
#line 147 
             hdr_chop = (int)((long)(& rx_pkt_hdr->eth803_hdr) - (long)uap_rx_pd);
      }
      else 
#line 147 
           hdr_chop = (int)((long)(& rx_pkt_hdr->eth803_hdr) - (long)uap_rx_pd);
    }
    else 
#line 147 
         hdr_chop = (int)((long)(& rx_pkt_hdr->eth803_hdr) - (long)uap_rx_pd);
  }
  
#line 154 
  skb_pull(skb,(unsigned int)hdr_chop);
  
#line 156 
  tmp_8 = skb_headroom((struct sk_buff const *)skb);
  
#line 156 
  if (tmp_8 <= 99U) {
    
#line 157 
    if (((priv->adapter)->debug_mask & 4U) != 0U) {
      
#line 157 
      if ((priv->adapter)->dev != (struct device *)0) {
        unsigned int tmp_6;
        
#line 157 
        tmp_6 = skb_headroom((struct sk_buff const *)skb);
        
#line 157 
        ;
        
#line 157 
        _dev_info((struct device const *)(priv->adapter)->dev,"data: Tx: insufficient skb headroom %d\n",tmp_6);
      }
      else ;
    }
    else ;
    
#line 161 
    new_skb = skb_realloc_headroom(skb,100U);
    
#line 163 
    if ((long)(new_skb == (struct sk_buff *)0) != 0L) {
      
#line 164 
      if (((priv->adapter)->debug_mask & 4U) != 0U) {
        
#line 164 
        if ((priv->adapter)->dev != (struct device *)0) 
#line 164 
                                                        _dev_info((struct device const *)(priv->adapter)->dev,"Tx: cannot allocate new_skb\n"); else ;
      }
      else ;
      
#line 166 
      kfree_skb(skb);
      
#line 167 
      priv->stats.tx_dropped += 1UL;
      
#line 168 
      goto return_label;
    }
    else ;
    
#line 171 
    kfree_skb(skb);
    
#line 172 
    skb = new_skb;
    
#line 173 
    if (((priv->adapter)->debug_mask & 1073741824U) != 0U) {
      
#line 173 
      if ((priv->adapter)->dev != (struct device *)0) {
        unsigned int tmp_7;
        
#line 173 
        tmp_7 = skb_headroom((struct sk_buff const *)skb);
        
#line 173 
        ;
        
#line 173 
        _dev_info((struct device const *)(priv->adapter)->dev,"info: new skb headroom %d\n",tmp_7);
      }
      else ;
    }
    else ;
  }
  else ;
  
#line 178 
  tx_info = MWIFIEX_SKB_TXCB(skb);
  
#line 179 
  memset((void *)tx_info,0,24UL);
  
#line 180 
  tx_info->bss_num = priv->bss_num;
  
#line 181 
  tx_info->bss_type = priv->bss_type;
  
#line 182 
  tx_info->flags = (unsigned char)((unsigned int)tx_info->flags | 2U);
  
#line 184 
  src_node = mwifiex_get_sta_entry(priv,(u8 const *)(& rx_pkt_hdr->eth803_hdr.h_source));
  
#line 185 
  if (src_node != (struct mwifiex_sta_node *)0) {
    
#line 186 
    src_node->stats.last_rx = (unsigned long long)jiffies;
    
#line 187 
    src_node->stats.rx_bytes += (unsigned long long)skb->len;
    
#line 188 
    src_node->stats.rx_packets += 1U;
    
#line 189 
    src_node->stats.last_tx_rate = uap_rx_pd->rx_rate;
    
#line 190 
    src_node->stats.last_tx_htinfo = uap_rx_pd->ht_info;
  }
  else ;
  
#line 193 
  tmp_9 = is_unicast_ether_addr((u8 const *)(& rx_pkt_hdr->eth803_hdr.h_dest));
  
#line 193 
  if ((int)tmp_9 != 0) {
    
#line 197 
    priv->stats.rx_bytes += (unsigned long)skb->len;
    
#line 198 
    priv->stats.rx_packets += 1UL;
    
#line 203 
    tx_info->pkt_len = skb->len;
  }
  else ;
  
#line 206 
  __net_timestamp(skb);
  
#line 207 
  mwifiex_wmm_add_buf_txqueue(priv,skb);
  
#line 208 
  atomic_inc_5(& adapter->tx_pending);
  
#line 209 
  atomic_inc_5(& adapter->pending_bridged_pkts);
  return_label: 
#line 211 
                return;
}


#line 225  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/uap_txrx.c"
int mwifiex_handle_uap_rx_forward(struct mwifiex_private *priv, struct sk_buff *skb)
{
  int __retres;
  struct uap_rxpd *uap_rx_pd;
  struct rx_packet_hdr *rx_pkt_hdr;
  u8 ra[6U];
  struct sk_buff *skb_uap;
  bool tmp_0;
  int tmp_1;
  
#line 228 
  struct mwifiex_adapter *adapter = priv->adapter;
  
#line 234 
  uap_rx_pd = (struct uap_rxpd *)skb->data;
  
#line 235 
  rx_pkt_hdr = (struct rx_packet_hdr *)uap_rx_pd + (int)uap_rx_pd->rx_pkt_offset;
  
#line 238 
  if ((unsigned int)priv->media_connected == 0U) {
    
#line 239 
    if ((adapter->debug_mask & 4U) != 0U) {
      
#line 239 
      if (adapter->dev != (struct device *)0) 
#line 239 
                                              _dev_info((struct device const *)adapter->dev,"drop packet in disconnected state.\n"); else ;
    }
    else ;
    
#line 241 
    dev_kfree_skb_any(skb);
    
#line 242 
    __retres = 0;
    
#line 242 
    goto return_label;
  }
  else ;
  
#line 245 
  memcpy((void *)(& ra),(void const *)(& rx_pkt_hdr->eth803_hdr.h_dest),6UL);
  
#line 247 
  tmp_0 = is_multicast_ether_addr((u8 const *)(& ra));
  
#line 247 
  if ((int)tmp_0 != 0) {
    
#line 248 
    skb_uap = skb_copy((struct sk_buff const *)skb,32U);
    
#line 249 
    mwifiex_uap_queue_bridged_pkt(priv,skb_uap);
  }
  else {
    struct mwifiex_sta_node *tmp;
    
#line 251 
    tmp = mwifiex_get_sta_entry(priv,(u8 const *)(& ra));
    
#line 251 
    if (tmp != (struct mwifiex_sta_node *)0) {
      
#line 253 
      mwifiex_uap_queue_bridged_pkt(priv,skb);
      
#line 254 
      __retres = 0;
      
#line 254 
      goto return_label;
    }
    else ;
  }
  
#line 259 
  tmp_1 = mwifiex_process_rx_packet(priv,skb);
  
#line 259 
  __retres = tmp_1;
  return_label: 
#line 259 
                return __retres;
}


#line 272  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/uap_txrx.c"
int mwifiex_process_uap_rx_packet(struct mwifiex_private *priv, struct sk_buff *skb)
{
  int __retres;
  int ret;
  struct uap_rxpd *uap_rx_pd;
  struct rx_packet_hdr *rx_pkt_hdr;
  u16 rx_pkt_type;
  u8 ta[6U];
  u8 pkt_type;
  unsigned long flags;
  struct mwifiex_sta_node *node;
  
#line 275 
  struct mwifiex_adapter *adapter = priv->adapter;
  
#line 284 
  uap_rx_pd = (struct uap_rxpd *)skb->data;
  
#line 285 
  rx_pkt_type = uap_rx_pd->rx_pkt_type;
  
#line 286 
  rx_pkt_hdr = (struct rx_packet_hdr *)uap_rx_pd + (int)uap_rx_pd->rx_pkt_offset;
  
#line 288 
  ether_addr_copy((u8 *)(& ta),(u8 const *)(& rx_pkt_hdr->eth803_hdr.h_source));
  
#line 290 
  if ((int)uap_rx_pd->rx_pkt_offset + (int)uap_rx_pd->rx_pkt_length > (int)((unsigned short)skb->len)) {
    
#line 292 
    if ((adapter->debug_mask & 4U) != 0U) {
      
#line 292 
      if (adapter->dev != (struct device *)0) 
#line 292 
                                              _dev_info((struct device const *)adapter->dev,"wrong rx packet: len=%d, offset=%d, length=%d\n",skb->len,(int)uap_rx_pd->rx_pkt_offset,(int)uap_rx_pd->rx_pkt_length); else ;
    }
    else ;
    
#line 296 
    priv->stats.rx_dropped += 1UL;
    
#line 298 
    node = mwifiex_get_sta_entry(priv,(u8 const *)(& ta));
    
#line 299 
    if (node != (struct mwifiex_sta_node *)0) 
#line 300 
                                              node->stats.tx_failed += 1U; else ;
    
#line 302 
    dev_kfree_skb_any(skb);
    
#line 303 
    __retres = 0;
    
#line 303 
    goto return_label;
  }
  else ;
  
#line 306 
  if ((unsigned int)rx_pkt_type == 229U) {
    
#line 307 
    ret = mwifiex_process_mgmt_packet(priv,skb);
    
#line 308 
    if (ret != 0) {
      
#line 309 
      if ((adapter->debug_mask & 4U) != 0U) {
        
#line 309 
        if (adapter->dev != (struct device *)0) 
#line 309 
                                                _dev_info((struct device const *)adapter->dev,"Rx of mgmt packet failed"); else ;
      }
      else ;
    }
    else ;
    
#line 311 
    dev_kfree_skb_any(skb);
    
#line 312 
    __retres = ret;
    
#line 312 
    goto return_label;
  }
  else ;
  
#line 316 
  if ((unsigned int)rx_pkt_type != 231U && (unsigned int)uap_rx_pd->priority <= 7U) {
    
#line 317 
    ldv___ldv_spin_lock_78_5(& priv->sta_list_spinlock);
    
#line 318 
    node = mwifiex_get_sta_entry(priv,(u8 const *)(& ta));
    
#line 319 
    if (node != (struct mwifiex_sta_node *)0) 
#line 320 
                                              node->rx_seq[(int)uap_rx_pd->priority] = uap_rx_pd->seq_num; else ;
    
#line 322 
    ldv_spin_unlock_irqrestore_79_6(& priv->sta_list_spinlock,flags);
  }
  else ;
  
#line 325 
  if ((unsigned int)priv->ap_11n_enabled == 0U) 
#line 325 
                                                goto _LOR;
  else {
    struct mwifiex_rx_reorder_tbl *tmp;
    
#line 325 
    tmp = mwifiex_11n_get_rx_reorder_tbl(priv,(int)uap_rx_pd->priority,(u8 *)(& ta));
    
#line 325 
    if (tmp == (struct mwifiex_rx_reorder_tbl *)0) {
      
#line 326 
      if ((unsigned int)uap_rx_pd->rx_pkt_type != 230U) {
        _LOR: {
                
#line 328 
                ret = mwifiex_handle_uap_rx_forward(priv,skb);
                
#line 329 
                __retres = ret;
                
#line 329 
                goto return_label;
              }
      }
      else ;
    }
    else ;
  }
  
#line 333 
  pkt_type = (unsigned char)uap_rx_pd->rx_pkt_type;
  
#line 334 
  ret = mwifiex_11n_rx_reorder_pkt(priv,(unsigned short)((int)uap_rx_pd->seq_num),(unsigned short)((int)uap_rx_pd->priority),(u8 *)(& ta),(unsigned char)((int)pkt_type),(void *)skb);
  
#line 338 
  if (ret != 0 || (unsigned int)rx_pkt_type == 231U) 
#line 339 
                                                     dev_kfree_skb_any(skb); else ;
  
#line 341 
  if (ret != 0) 
#line 342 
                priv->stats.rx_dropped += 1UL; else ;
  
#line 344 
  __retres = ret;
  return_label: 
#line 344 
                return __retres;
}


#line 364  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/uap_txrx.c"
void *mwifiex_process_uap_txpd(struct mwifiex_private *priv, struct sk_buff *skb)
{
  void *__retres;
  struct uap_txpd *txpd;
  int pad;
  u16 pkt_type;
  u16 pkt_offset;
  int tmp_0;
  unsigned int tmp_1;
  bool tmp_2;
  
#line 367 
  struct mwifiex_adapter *adapter = priv->adapter;
  
#line 369 
  struct mwifiex_txinfo *tx_info = MWIFIEX_SKB_TXCB(skb);
  
#line 372 
  if ((unsigned int)(priv->adapter)->iface_type == 2U) 
#line 372 
                                                       tmp_0 = 0; else 
                                                                    
#line 372 
                                                                    tmp_0 = 4;
  
#line 372 
  int hroom = tmp_0;
  
#line 375 
  if (skb->len == 0U) {
    
#line 376 
    if ((adapter->debug_mask & 4U) != 0U) {
      
#line 376 
      if (adapter->dev != (struct device *)0) 
#line 376 
                                              _dev_info((struct device const *)adapter->dev,"Tx: bad packet length: %d\n",skb->len); else ;
    }
    else ;
    
#line 378 
    tx_info->status_code = 4294967295U;
    
#line 379 
    __retres = (void *)skb->data;
    
#line 379 
    goto return_label;
  }
  else ;
  
#line 382 
  tmp_1 = skb_headroom((struct sk_buff const *)skb);
  
#line 382 
  if ((long)(tmp_1 <= 99U) != 0L) {
    
#line 384 
    ldv_inline_asm();
    
#line 382 
    ;
  }
  else ;
  
#line 384 
  tmp_2 = mwifiex_is_skb_mgmt_frame(skb);
  
#line 384 
  if ((int)tmp_2 != 0) 
#line 384 
                       pkt_type = (unsigned short)229U; else 
#line 384 
                                                             pkt_type = (unsigned short)0U;
  
#line 386 
  pad = (int)((long)((void *)skb->data + (18446744073709551596UL - (unsigned long)hroom))) & 63;
  
#line 389 
  skb_push(skb,(unsigned int)pad + 20U);
  
#line 391 
  txpd = (struct uap_txpd *)skb->data;
  
#line 392 
  memset((void *)txpd,0,20UL);
  
#line 393 
  txpd->bss_num = priv->bss_num;
  
#line 394 
  txpd->bss_type = priv->bss_type;
  
#line 395 
  txpd->tx_pkt_length = (unsigned short)((unsigned int)((int)((unsigned short)skb->len) - (int)((unsigned short)pad)) + 65516U);
  
#line 397 
  txpd->priority = (unsigned char)skb->priority;
  
#line 399 
  txpd->pkt_delay_2ms = mwifiex_wmm_compute_drv_pkt_delay(priv,(struct sk_buff const *)skb);
  
#line 401 
  if (((unsigned long)tx_info->flags & 8UL) != 0UL || ((unsigned long)tx_info->flags & 16UL) != 0UL) {
    
#line 403 
    txpd->tx_token_id = tx_info->ack_frame_id;
    
#line 404 
    txpd->flags = (unsigned char)((unsigned int)txpd->flags | 32U);
  }
  else ;
  
#line 407 
  if ((unsigned int)txpd->priority <= 7U) 
#line 412 
                                          txpd->tx_control = priv->wmm.user_pri_pkt_tx_ctrl[(int)txpd->priority]; else ;
  
#line 416 
  pkt_offset = (unsigned short)((unsigned int)((unsigned short)pad) + 20U);
  
#line 417 
  if ((unsigned int)pkt_type == 229U) {
    
#line 419 
    txpd->tx_pkt_type = pkt_type;
    
#line 420 
    pkt_offset = (unsigned short)((unsigned int)pkt_offset + 8U);
  }
  else ;
  
#line 423 
  txpd->tx_pkt_offset = pkt_offset;
  
#line 426 
  skb_push(skb,(unsigned int)hroom);
  
#line 428 
  if (txpd->tx_control == 0U) 
#line 430 
                              txpd->tx_control = priv->pkt_tx_ctrl; else ;
  
#line 432 
  __retres = (void *)skb->data;
  return_label: 
#line 432 
                return __retres;
}


#line 120  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_uap_txrx.c.aux"
static void atomic_inc_5(atomic_t *v)
{
  
#line 123 
  ldv_atomic_inc(v);
  
#line 124 
  return;
}


#line 127  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_uap_txrx.c.aux"
static void atomic_dec_4(atomic_t *v)
{
  
#line 130 
  ldv_atomic_dec(v);
  
#line 131 
  return;
}


#line 771  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_uap_txrx.c.aux"
static void ldv___ldv_spin_lock_76_0(spinlock_t *ldv_func_arg1)
{
  
#line 775 
  ldv_spin_model_lock((char *)"ra_list_spinlock_of_mwifiex_wmm_desc");
  
#line 777 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 778 
  return;
}


#line 781  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_uap_txrx.c.aux"
static void ldv_spin_unlock_irqrestore_77_0(spinlock_t *lock, unsigned long flags)
{
  
#line 785 
  ldv_spin_model_unlock((char *)"ra_list_spinlock_of_mwifiex_wmm_desc");
  
#line 787 
  spin_unlock_irqrestore_7(lock,flags);
  
#line 788 
  return;
}


#line 791  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_uap_txrx.c.aux"
static void ldv___ldv_spin_lock_78_5(spinlock_t *ldv_func_arg1)
{
  
#line 795 
  ldv_spin_model_lock((char *)"sta_list_spinlock_of_mwifiex_private");
  
#line 797 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 798 
  return;
}


#line 801  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_uap_txrx.c.aux"
static void ldv_spin_unlock_irqrestore_79_6(spinlock_t *lock, unsigned long flags)
{
  
#line 805 
  ldv_spin_model_unlock((char *)"sta_list_spinlock_of_mwifiex_private");
  
#line 807 
  spin_unlock_irqrestore_7(lock,flags);
  
#line 808 
  return;
}


#line 29  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11ac.c"
static u16 const max_rate_lgi_80MHZ[8U][3U] = {{(unsigned short)292U, (unsigned short)351U, (unsigned short)390U}, {(unsigned short)585U, (unsigned short)702U, (unsigned short)780U}, {(unsigned short)877U, (unsigned short)1053U, (unsigned short)1170U}, {(unsigned short)1170U, (unsigned short)1404U, (unsigned short)1560U}, {(unsigned short)1462U, (unsigned short)1755U, (unsigned short)1950U}, {(unsigned short)1755U, (unsigned short)2106U, (unsigned short)0U}, {(unsigned short)2047U, (unsigned short)2457U, (unsigned short)2730U}, {(unsigned short)2340U, (unsigned short)2808U, (unsigned short)3120U}};

#line 40  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11ac.c"
static u16 const max_rate_lgi_160MHZ[8U][3U] = {{(unsigned short)585U, (unsigned short)702U, (unsigned short)780U}, {(unsigned short)1170U, (unsigned short)1404U, (unsigned short)1560U}, {(unsigned short)1755U, (unsigned short)2106U, (unsigned short)0U}, {(unsigned short)2340U, (unsigned short)2808U, (unsigned short)3120U}, {(unsigned short)2925U, (unsigned short)3510U, (unsigned short)3900U}, {(unsigned short)3510U, (unsigned short)4212U, (unsigned short)4680U}, {(unsigned short)4095U, (unsigned short)4914U, (unsigned short)5460U}, {(unsigned short)4680U, (unsigned short)5616U, (unsigned short)6240U}};

#line 55  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11ac.c"
static u16 mwifiex_convert_mcsmap_to_maxrate(struct mwifiex_private *priv, u8 bands, u16 mcs_map)
{
  u8 i;
  u8 nss;
  u8 mcs;
  
#line 59 
  u16 max_rate = (unsigned short)0U;
  
#line 60 
  u32 usr_vht_cap_info = 0U;
  
#line 61 
  struct mwifiex_adapter *adapter = priv->adapter;
  
#line 63 
  if (((int)bands & 32) != 0) 
#line 64 
                              usr_vht_cap_info = adapter->usr_dot_11ac_dev_cap_a; else 
                                                                    
#line 66 
                                                                    usr_vht_cap_info = adapter->usr_dot_11ac_dev_cap_bg;
  
#line 69 
  nss = (unsigned char)1U;
  
#line 70 
  i = (unsigned char)1U;
  
#line 70 
  goto ldv_61214;
  ldv_61213: 
#line 71 
  ;
  
#line 71 
  mcs = (unsigned char)((unsigned int)((unsigned char)((int)mcs_map >> ((int)i + -1) * 2)) & 3U);
  
#line 72 
  if ((unsigned int)mcs <= 2U) 
#line 73 
                               nss = i; else ;
  
#line 70 
  i = (u8)((int)i + 1);
  ldv_61214: 
#line 71 
  ;
  
#line 70 
  if ((unsigned int)i <= 8U) 
#line 72 
                             goto ldv_61213; else 
#line 75 
                                                  goto ldv_61215;
  ldv_61215: 
#line 76 
  ;
  
#line 75 
  mcs = (unsigned char)((unsigned int)((unsigned char)((int)mcs_map >> ((int)nss + -1) * 2)) & 3U);
  
#line 78 
  if ((unsigned int)mcs == 3U) 
#line 79 
                               mcs = (unsigned char)2U; else ;
  
#line 81 
  if (((usr_vht_cap_info >> 2) & 3U) != 0U) {
    
#line 83 
    max_rate = max_rate_lgi_160MHZ[(int)nss + -1][(int)mcs];
    
#line 84 
    if ((unsigned int)max_rate == 0U) 
#line 86 
                                      max_rate = max_rate_lgi_160MHZ[(int)nss + -1][(int)mcs + -1]; else ;
  }
  else {
    
#line 88 
    max_rate = max_rate_lgi_80MHZ[(int)nss + -1][(int)mcs];
    
#line 89 
    if ((unsigned int)max_rate == 0U) 
#line 91 
                                      max_rate = max_rate_lgi_80MHZ[(int)nss + -1][(int)mcs + -1]; else ;
  }
  
#line 94 
  return max_rate;
}


#line 98  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11ac.c"
static void mwifiex_fill_vht_cap_info(struct mwifiex_private *priv, struct ieee80211_vht_cap *vht_cap, u8 bands)
{
  
#line 101 
  struct mwifiex_adapter *adapter = priv->adapter;
  
#line 103 
  if (((int)bands & 4) != 0) 
#line 104 
                             vht_cap->vht_cap_info = adapter->usr_dot_11ac_dev_cap_a; else 
                                                                    
#line 107 
                                                                    vht_cap->vht_cap_info = adapter->usr_dot_11ac_dev_cap_bg;
  
#line 109 
  return;
}


#line 111  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11ac.c"
void mwifiex_fill_vht_cap_tlv(struct mwifiex_private *priv, struct ieee80211_vht_cap *vht_cap, u8 bands)
{
  u16 mcs_map_user;
  u16 mcs_map_resp;
  u16 mcs_map_result;
  u16 mcs_user;
  u16 mcs_resp;
  u16 nss;
  u16 tmp;
  
#line 114 
  struct mwifiex_adapter *adapter = priv->adapter;
  
#line 119 
  mwifiex_fill_vht_cap_info(priv,vht_cap,(unsigned char)((int)bands));
  
#line 122 
  mcs_map_user = (unsigned short)adapter->usr_dot_11ac_mcs_support;
  
#line 123 
  mcs_map_resp = vht_cap->supp_mcs.rx_mcs_map;
  
#line 124 
  mcs_map_result = (unsigned short)0U;
  
#line 126 
  nss = (unsigned short)1U;
  
#line 126 
  goto ldv_61239;
  ldv_61238: 
#line 127 
  ;
  
#line 127 
  mcs_user = (unsigned short)((unsigned int)((unsigned short)((int)mcs_map_user >> ((int)nss + -1) * 2)) & 3U);
  
#line 128 
  mcs_resp = (unsigned short)((unsigned int)((unsigned short)((int)mcs_map_resp >> ((int)nss + -1) * 2)) & 3U);
  
#line 130 
  if ((unsigned int)mcs_user == 3U || (unsigned int)mcs_resp == 3U) 
#line 132 
                                                                    mcs_map_result = (unsigned short)((3 << ((int)nss + -1) * 2) | (int)mcs_map_result);
  else {
    int tmp_1;
    {
      int tmp_0;
      
#line 135 
      u16 _min1 = mcs_user;
      
#line 135 
      u16 _min2 = mcs_resp;
      
#line 135 
      if ((int)_min1 < (int)_min2) 
#line 135 
                                   tmp_0 = (int)_min1; else 
#line 135 
                                                            tmp_0 = (int)_min2;
      
#line 135 
      tmp_1 = tmp_0;
    }
    
#line 136 
    mcs_map_result = (unsigned short)(((tmp_1 & 3) << ((int)nss + -1) * 2) | (int)mcs_map_result);
  }
  
#line 126 
  nss = (u16)((int)nss + 1);
  ldv_61239: 
#line 127 
  ;
  
#line 126 
  if ((unsigned int)nss <= 8U) 
#line 128 
                               goto ldv_61238; else 
#line 131 
                                                    goto ldv_61240;
  ldv_61240: 
#line 132 
  ;
  
#line 139 
  vht_cap->supp_mcs.rx_mcs_map = mcs_map_result;
  
#line 141 
  tmp = mwifiex_convert_mcsmap_to_maxrate(priv,(unsigned char)((int)bands),(unsigned short)((int)mcs_map_result));
  
#line 142 
  vht_cap->supp_mcs.rx_highest = tmp;
  
#line 145 
  mcs_map_user = (unsigned short)(adapter->usr_dot_11ac_mcs_support >> 16);
  
#line 146 
  mcs_map_resp = vht_cap->supp_mcs.tx_mcs_map;
  
#line 147 
  mcs_map_result = (unsigned short)0U;
  
#line 149 
  nss = (unsigned short)1U;
  
#line 149 
  goto ldv_61245;
  ldv_61244: 
#line 150 
  ;
  
#line 150 
  mcs_user = (unsigned short)((unsigned int)((unsigned short)((int)mcs_map_user >> ((int)nss + -1) * 2)) & 3U);
  
#line 151 
  mcs_resp = (unsigned short)((unsigned int)((unsigned short)((int)mcs_map_resp >> ((int)nss + -1) * 2)) & 3U);
  
#line 152 
  if ((unsigned int)mcs_user == 3U || (unsigned int)mcs_resp == 3U) 
#line 154 
                                                                    mcs_map_result = (unsigned short)((3 << ((int)nss + -1) * 2) | (int)mcs_map_result);
  else {
    int tmp_3;
    {
      int tmp_2;
      
#line 157 
      u16 _min1_0 = mcs_user;
      
#line 157 
      u16 _min2_0 = mcs_resp;
      
#line 157 
      if ((int)_min1_0 < (int)_min2_0) 
#line 157 
                                       tmp_2 = (int)_min1_0; else 
#line 157 
                                                                  tmp_2 = (int)_min2_0;
      
#line 157 
      tmp_3 = tmp_2;
    }
    
#line 158 
    mcs_map_result = (unsigned short)(((tmp_3 & 3) << ((int)nss + -1) * 2) | (int)mcs_map_result);
  }
  
#line 149 
  nss = (u16)((int)nss + 1);
  ldv_61245: 
#line 150 
  ;
  
#line 149 
  if ((unsigned int)nss <= 8U) 
#line 151 
                               goto ldv_61244; else 
#line 154 
                                                    goto ldv_61246;
  ldv_61246: 
#line 155 
  ;
  
#line 161 
  vht_cap->supp_mcs.tx_mcs_map = mcs_map_result;
  
#line 163 
  tmp = mwifiex_convert_mcsmap_to_maxrate(priv,(unsigned char)((int)bands),(unsigned short)((int)mcs_map_result));
  
#line 164 
  vht_cap->supp_mcs.tx_highest = tmp;
  
#line 166 
  return;
}


#line 169  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11ac.c"
int mwifiex_cmd_append_11ac_tlv(struct mwifiex_private *priv, struct mwifiex_bssdescriptor *bss_desc, u8 **buffer)
{
  struct mwifiex_ie_types_vhtcap *vht_cap;
  struct mwifiex_ie_types_oper_mode_ntf *oper_ntf;
  struct ieee_types_oper_mode_ntf *ieee_oper_ntf;
  struct mwifiex_ie_types_vht_oper *vht_op;
  u8 supp_chwd_set;
  u32 usr_vht_cap_info;
  
#line 177 
  struct mwifiex_adapter *adapter = priv->adapter;
  
#line 180 
  int ret_len = 0;
  
#line 182 
  if (((int)bss_desc->bss_band & 4) != 0) 
#line 183 
                                          usr_vht_cap_info = adapter->usr_dot_11ac_dev_cap_a; else 
                                                                    
#line 185 
                                                                    usr_vht_cap_info = adapter->usr_dot_11ac_dev_cap_bg;
  
#line 188 
  if (bss_desc->bcn_vht_cap != (struct ieee80211_vht_cap *)0) {
    
#line 189 
    vht_cap = (struct mwifiex_ie_types_vhtcap *)*buffer;
    
#line 190 
    memset((void *)vht_cap,0,16UL);
    
#line 191 
    vht_cap->header.type = (unsigned short)191U;
    
#line 192 
    vht_cap->header.len = (unsigned short)12U;
    
#line 194 
    memcpy((void *)vht_cap + 4U,(void const *)bss_desc->bcn_vht_cap,(unsigned long)vht_cap->header.len);
    
#line 198 
    mwifiex_fill_vht_cap_tlv(priv,& vht_cap->vht_cap,(unsigned char)((int)((unsigned char)bss_desc->bss_band)));
    
#line 200 
    *buffer += 16U;
    
#line 201 
    ret_len = (int)((unsigned int)ret_len + 16U);
  }
  else ;
  
#line 205 
  if (bss_desc->bcn_vht_oper != (struct ieee80211_vht_operation *)0) {
    
#line 206 
    if (priv->bss_mode == 2U) {
      
#line 207 
      vht_op = (struct mwifiex_ie_types_vht_oper *)*buffer;
      
#line 208 
      memset((void *)vht_op,0,9UL);
      
#line 209 
      vht_op->header.type = (unsigned short)192U;
      
#line 211 
      vht_op->header.len = (unsigned short)5U;
      
#line 213 
      memcpy((void *)vht_op + 4U,(void const *)bss_desc->bcn_vht_oper,(unsigned long)vht_op->header.len);
      
#line 221 
      supp_chwd_set = (unsigned char)((unsigned int)((unsigned char)(usr_vht_cap_info >> 2)) & 3U);
      
#line 223 
      switch ((int)supp_chwd_set) {
        int tmp_0;
        int tmp_2;
        int tmp_4;
        case 0: 
#line 224 
        ;
        {
          int tmp;
          
#line 226 
          u8 __min1 = (unsigned char)1U;
          
#line 226 
          u8 __min2 = (bss_desc->bcn_vht_oper)->chan_width;
          
#line 226 
          if ((int)__min1 < (int)__min2) 
#line 226 
                                         tmp = (int)__min1; else 
#line 226 
                                                                 tmp = (int)__min2;
          
#line 226 
          tmp_0 = tmp;
        }
        
#line 225 
        vht_op->chan_width = (unsigned char)tmp_0;
        
#line 228 
        goto ldv_61264;
        case 1: 
#line 229 
        ;
        {
          int tmp_1;
          
#line 231 
          u8 __min1_0 = (unsigned char)2U;
          
#line 231 
          u8 __min2_0 = (bss_desc->bcn_vht_oper)->chan_width;
          
#line 231 
          if ((int)__min1_0 < (int)__min2_0) 
#line 231 
                                             tmp_1 = (int)__min1_0; else 
                                                                    
#line 231 
                                                                    tmp_1 = (int)__min2_0;
          
#line 231 
          tmp_2 = tmp_1;
        }
        
#line 230 
        vht_op->chan_width = (unsigned char)tmp_2;
        
#line 233 
        goto ldv_61264;
        case 2: 
#line 234 
        ;
        {
          int tmp_3;
          
#line 236 
          u8 __min1_1 = (unsigned char)3U;
          
#line 236 
          u8 __min2_1 = (bss_desc->bcn_vht_oper)->chan_width;
          
#line 236 
          if ((int)__min1_1 < (int)__min2_1) 
#line 236 
                                             tmp_3 = (int)__min1_1; else 
                                                                    
#line 236 
                                                                    tmp_3 = (int)__min2_1;
          
#line 236 
          tmp_4 = tmp_3;
        }
        
#line 235 
        vht_op->chan_width = (unsigned char)tmp_4;
        
#line 238 
        goto ldv_61264;
        default: 
#line 239 
        ;
        
#line 240 
        vht_op->chan_width = (unsigned char)0U;
        
#line 242 
        goto ldv_61264;
      }
      ldv_61264: 
#line 245 
      ;
      
#line 245 
      *buffer += 9U;
      
#line 246 
      ret_len = (int)((unsigned int)ret_len + 9U);
    }
    else ;
  }
  else ;
  
#line 251 
  if (bss_desc->oper_mode != (struct ieee_types_oper_mode_ntf *)0) {
    
#line 252 
    ieee_oper_ntf = bss_desc->oper_mode;
    
#line 253 
    oper_ntf = (struct mwifiex_ie_types_oper_mode_ntf *)*buffer;
    
#line 254 
    memset((void *)oper_ntf,0,5UL);
    
#line 255 
    oper_ntf->header.type = (unsigned short)199U;
    
#line 256 
    oper_ntf->header.len = (unsigned short)1U;
    
#line 257 
    oper_ntf->oper_mode = ieee_oper_ntf->oper_mode;
    
#line 258 
    *buffer += 5U;
    
#line 259 
    ret_len = (int)((unsigned int)ret_len + 5U);
  }
  else ;
  
#line 262 
  return ret_len;
}


#line 265  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11ac.c"
int mwifiex_cmd_11ac_cfg(struct mwifiex_private *priv, struct host_cmd_ds_command *cmd, u16 cmd_action, struct mwifiex_11ac_vht_cfg *cfg)
{
  int __retres;
  
#line 269 
  struct host_cmd_11ac_vht_cfg *vhtcfg = & cmd->params.vht_cfg;
  
#line 271 
  cmd->command = (unsigned short)274U;
  
#line 272 
  cmd->size = (unsigned short)24U;
  
#line 274 
  vhtcfg->action = cmd_action;
  
#line 275 
  vhtcfg->band_config = cfg->band_config;
  
#line 276 
  vhtcfg->misc_config = cfg->misc_config;
  
#line 277 
  vhtcfg->cap_info = cfg->cap_info;
  
#line 278 
  vhtcfg->mcs_tx_set = cfg->mcs_tx_set;
  
#line 279 
  vhtcfg->mcs_rx_set = cfg->mcs_rx_set;
  
#line 281 
  __retres = 0;
  
#line 281 
  return __retres;
}


#line 287  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11ac.c"
void mwifiex_set_11ac_ba_params(struct mwifiex_private *priv)
{
  
#line 289 
  priv->add_ba_param.timeout = 65535U;
  
#line 291 
  if (((unsigned long)priv->bss_role & 1UL) != 0UL) {
    
#line 292 
    priv->add_ba_param.tx_win_size = 64U;
    
#line 294 
    priv->add_ba_param.rx_win_size = 64U;
  }
  else {
    
#line 297 
    priv->add_ba_param.tx_win_size = 64U;
    
#line 299 
    priv->add_ba_param.rx_win_size = 64U;
  }
  
#line 303 
  return;
}


#line 306  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11ac.c"
bool mwifiex_is_bss_in_11ac_mode(struct mwifiex_private *priv)
{
  bool __retres;
  struct mwifiex_bssdescriptor *bss_desc;
  struct ieee80211_vht_operation *vht_oper;
  
#line 311 
  bss_desc = & priv->curr_bss_params.bss_descriptor;
  
#line 312 
  vht_oper = bss_desc->bcn_vht_oper;
  
#line 314 
  if (bss_desc->bcn_vht_cap == (struct ieee80211_vht_cap *)0 || vht_oper == (struct ieee80211_vht_operation *)0) {
    
#line 315 
    __retres = (_Bool)0;
    
#line 315 
    goto return_label;
  }
  else ;
  
#line 317 
  if ((unsigned int)vht_oper->chan_width == 0U) {
    
#line 318 
    __retres = (_Bool)0;
    
#line 318 
    goto return_label;
  }
  else ;
  
#line 320 
  __retres = (_Bool)1;
  return_label: 
#line 320 
                return __retres;
}


#line 323  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11ac.c"
u8 mwifiex_get_center_freq_index(struct mwifiex_private *priv, u8 band, u32 pri_chan, u8 chan_bw)
{
  
#line 326 
  u8 center_freq_idx = (unsigned char)0U;
  
#line 328 
  if (((int)band & 32) != 0) {
    
#line 329 
    switch (pri_chan) {
      case (u32)36: 
#line 330 
      ;
      case (u32)40: 
#line 331 
      ;
      case (u32)44: 
#line 332 
      ;
      case (u32)48: 
#line 333 
      ;
      
#line 334 
      if ((unsigned int)chan_bw == 1U) 
#line 335 
                                       center_freq_idx = (unsigned char)42U; else ;
      
#line 336 
      goto ldv_61300;
      case (u32)52: 
#line 337 
      ;
      case (u32)56: 
#line 338 
      ;
      case (u32)60: 
#line 339 
      ;
      case (u32)64: 
#line 340 
      ;
      
#line 341 
      if ((unsigned int)chan_bw == 1U) 
#line 342 
                                       center_freq_idx = (unsigned char)58U;
      else 
        
#line 343 
        if ((unsigned int)chan_bw == 2U) 
#line 344 
                                         center_freq_idx = (unsigned char)50U; else ;
      
#line 345 
      goto ldv_61300;
      case (u32)100: 
#line 346 
      ;
      case (u32)104: 
#line 347 
      ;
      case (u32)108: 
#line 348 
      ;
      case (u32)112: 
#line 349 
      ;
      
#line 350 
      if ((unsigned int)chan_bw == 1U) 
#line 351 
                                       center_freq_idx = (unsigned char)106U; else ;
      
#line 352 
      goto ldv_61300;
      case (u32)116: 
#line 353 
      ;
      case (u32)120: 
#line 354 
      ;
      case (u32)124: 
#line 355 
      ;
      case (u32)128: 
#line 356 
      ;
      
#line 357 
      if ((unsigned int)chan_bw == 1U) 
#line 358 
                                       center_freq_idx = (unsigned char)122U;
      else 
        
#line 359 
        if ((unsigned int)chan_bw == 2U) 
#line 360 
                                         center_freq_idx = (unsigned char)114U; else ;
      
#line 361 
      goto ldv_61300;
      case (u32)132: 
#line 362 
      ;
      case (u32)136: 
#line 363 
      ;
      case (u32)140: 
#line 364 
      ;
      case (u32)144: 
#line 365 
      ;
      
#line 366 
      if ((unsigned int)chan_bw == 1U) 
#line 367 
                                       center_freq_idx = (unsigned char)138U; else ;
      
#line 368 
      goto ldv_61300;
      case (u32)149: 
#line 369 
      ;
      case (u32)153: 
#line 370 
      ;
      case (u32)157: 
#line 371 
      ;
      case (u32)161: 
#line 372 
      ;
      
#line 373 
      if ((unsigned int)chan_bw == 1U) 
#line 374 
                                       center_freq_idx = (unsigned char)155U; else ;
      
#line 375 
      goto ldv_61300;
      default: 
#line 376 
      ;
      
#line 377 
      center_freq_idx = (unsigned char)42U;
    }
    ldv_61300: 
#line 379 
    ;
  }
  else ;
  
#line 381 
  return center_freq_idx;
}

void *__builtin_memcpy(void *, void const *, unsigned long);


#line 201  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/compiler.h"
__inline static void __read_once_size(void const volatile *p, void *res, int size)
{
  
#line 203 
  switch (size) {
    case 1: 
#line 204 
    ;
    
#line 204 
    *((__u8 *)res) = *((__u8 volatile *)p);
    
#line 204 
    goto ldv_1185;
    case 2: 
#line 205 
    ;
    
#line 205 
    *((__u16 *)res) = *((__u16 volatile *)p);
    
#line 205 
    goto ldv_1185;
    case 4: 
#line 206 
    ;
    
#line 206 
    *((__u32 *)res) = *((__u32 volatile *)p);
    
#line 206 
    goto ldv_1185;
    case 8: 
#line 207 
    ;
    
#line 207 
    *((__u64 *)res) = *((__u64 volatile *)p);
    
#line 207 
    goto ldv_1185;
    default: 
#line 208 
    ;
    
#line 209 
    ldv_inline_asm();
    
#line 210 
    __builtin_memcpy(res,(void const *)p,(unsigned long)size);
    
#line 211 
    ldv_inline_asm();
  }
  ldv_1185: 
#line 213 
  ;
  
#line 214 
  return;
}


#line 49  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/atomic.h"
static void atomic_add_0(int i, atomic_t *v);


#line 67 
static void atomic_sub_0(int i, atomic_t *v);


#line 98 
static void atomic_inc_6(atomic_t *v);


#line 114 
static void atomic_dec_5(atomic_t *v);


#line 159 
static int atomic_add_return_0(int i, atomic_t *v);


#line 171  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/atomic.h"
__inline static int atomic_sub_return(int i, atomic_t *v)
{
  int tmp;
  
#line 173 
  tmp = atomic_add_return_0(- i,v);
  
#line 173 
  return tmp;
}


#line 446  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_unlock_irqrestore_8(spinlock_t *lock, unsigned long flags)
{
  {
    unsigned long __dummy;
    unsigned long __dummy2;
    
  }
  
#line 448 
  _raw_spin_unlock_irqrestore(& lock->__anonCompField_spinlock_18.rlock,flags);
  
#line 449 
  return;
}


#line 478 
static void ldv_spin_unlock_irqrestore_77_1(spinlock_t *lock, unsigned long flags);


#line 70  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_txrx.c.aux"
static void ldv___ldv_spin_lock_76_1(spinlock_t *ldv_func_arg1);


#line 461  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rcupdate.h"
int debug_lockdep_rcu_enabled(void);


#line 79  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/idr.h"
void *idr_find_slowpath(struct idr *, int);


#line 87 
void idr_remove(struct idr *, int);


#line 115  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/idr.h"
__inline static void *idr_find(struct idr *idr, int id)
{
  void *__retres;
  struct idr_layer *tmp_3;
  void *tmp_9;
  {
    struct idr_layer *tmp_0;
    {
      struct idr_layer *tmp;
      {
        union __anonunion___u_7557 __u;
        
#line 117 
        __read_once_size((void const volatile *)(& idr->hint),(void *)(& __u.__c),8);
        
#line 117 
        tmp = __u.__val;
      }
      
#line 117 
      struct idr_layer *_________p1 = tmp;
      
#line 117 
      tmp_0 = _________p1;
    }
    
#line 117 
    struct idr_layer *________p1 = tmp_0;
    {
      bool __warned;
      int tmp_2;
      int tmp_1;
      
#line 117 
      tmp_1 = debug_lockdep_rcu_enabled();
      
#line 117 
      if (tmp_1 != 0) 
        
#line 117 
        if (! __warned) 
#line 117 
                        tmp_2 = 1; else 
#line 117 
                                        tmp_2 = 0;
      else 
#line 117 
           tmp_2 = 0;
    }
    
#line 117 
    tmp_3 = ________p1;
  }
  
#line 117 
  struct idr_layer *hint = tmp_3;
  
#line 119 
  if (hint != (struct idr_layer *)0 && (id & -256) == hint->prefix) {
    struct idr_layer *tmp_8;
    {
      struct idr_layer *tmp_5;
      {
        struct idr_layer *tmp_4;
        {
          union __anonunion___u_7559 __u_0;
          
#line 120 
          __read_once_size((void const volatile *)(& hint->ary[id & 255]),(void *)(& __u_0.__c),8);
          
#line 120 
          tmp_4 = __u_0.__val;
        }
        
#line 120 
        struct idr_layer *_________p1_0 = tmp_4;
        
#line 120 
        tmp_5 = _________p1_0;
      }
      
#line 120 
      struct idr_layer *________p1_0 = tmp_5;
      {
        bool __warned_0;
        int tmp_7;
        int tmp_6;
        
#line 120 
        tmp_6 = debug_lockdep_rcu_enabled();
        
#line 120 
        if (tmp_6 != 0) 
          
#line 120 
          if (! __warned_0) 
#line 120 
                            tmp_7 = 1; else 
#line 120 
                                            tmp_7 = 0;
        else 
#line 120 
             tmp_7 = 0;
      }
      
#line 120 
      tmp_8 = ________p1_0;
    }
    
#line 120 
    __retres = (void *)tmp_8;
    
#line 120 
    goto return_label;
  }
  else ;
  
#line 122 
  tmp_9 = idr_find_slowpath(idr,id);
  
#line 122 
  __retres = tmp_9;
  return_label: 
#line 122 
                return __retres;
}


#line 1491  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
void skb_queue_head(struct sk_buff_head *, struct sk_buff *);


#line 2946 
void skb_complete_wifi_ack(struct sk_buff *, bool);


#line 2541  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
void netif_tx_wake_queue(struct netdev_queue *);


#line 4699  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/cfg80211.h"
void cfg80211_mgmt_tx_status(struct wireless_dev *, u64, u8 const *, size_t, bool, gfp_t);


#line 1079  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.h"
int mwifiex_process_sta_rx_packet(struct mwifiex_private *priv, struct sk_buff *skb);


#line 1224  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.h"
__inline static struct mwifiex_private *mwifiex_get_priv_by_id_0(struct mwifiex_adapter *adapter, u8 bss_num, u8 bss_type)
{
  int i;
  struct mwifiex_private *tmp;
  
#line 1229 
  i = 0;
  
#line 1229 
  goto ldv_60832;
  ldv_60831: 
#line 1230 
  ;
  
#line 1230 
  if (adapter->priv[i] != (struct mwifiex_private *)0) {
    
#line 1231 
    if ((int)(adapter->priv[i])->bss_num == (int)bss_num && (int)(adapter->priv[i])->bss_type == (int)bss_type) 
      
#line 1233 
      goto ldv_60830; else ;
  }
  else ;
  
#line 1229 
  i += 1;
  ldv_60832: 
#line 1230 
  ;
  
#line 1229 
  if ((int)adapter->priv_num > i) 
#line 1231 
                                  goto ldv_60831; else 
#line 1234 
                                                       goto ldv_60830;
  ldv_60830: 
#line 1235 
  ;
  
#line 1236 
  if ((int)adapter->priv_num > i) 
#line 1236 
                                  tmp = adapter->priv[i]; else 
#line 1236 
                                                               tmp = (struct mwifiex_private *)0;
  
#line 1236 
  return tmp;
}


#line 1244  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.h"
__inline static struct mwifiex_private *mwifiex_get_priv_1(struct mwifiex_adapter *adapter, enum mwifiex_bss_role bss_role)
{
  int i;
  struct mwifiex_private *tmp;
  
#line 1249 
  i = 0;
  
#line 1249 
  goto ldv_60840;
  ldv_60839: 
#line 1250 
  ;
  
#line 1250 
  if (adapter->priv[i] != (struct mwifiex_private *)0) {
    
#line 1251 
    if (bss_role == (unsigned int)MWIFIEX_BSS_ROLE_ANY || ((unsigned long)(adapter->priv[i])->bss_role & 1UL) == (unsigned long)bss_role) 
      
#line 1253 
      goto ldv_60838; else ;
  }
  else ;
  
#line 1249 
  i += 1;
  ldv_60840: 
#line 1250 
  ;
  
#line 1249 
  if ((int)adapter->priv_num > i) 
#line 1251 
                                  goto ldv_60839; else 
#line 1254 
                                                       goto ldv_60838;
  ldv_60838: 
#line 1255 
  ;
  
#line 1257 
  if ((int)adapter->priv_num > i) 
#line 1257 
                                  tmp = adapter->priv[i]; else 
#line 1257 
                                                               tmp = (struct mwifiex_private *)0;
  
#line 1257 
  return tmp;
}


#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/wmm.h"
static u16 const mwifiex_1d_to_wmm_queue_0[8U] = {(unsigned short)1U, (unsigned short)0U, (unsigned short)0U, (unsigned short)1U, (unsigned short)2U, (unsigned short)2U, (unsigned short)3U, (unsigned short)3U};

#line 36  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/txrx.c"
int mwifiex_handle_rx_packet(struct mwifiex_adapter *adapter, struct sk_buff *skb)
{
  int __retres;
  struct rxpd *local_rx_pd;
  int ret;
  
#line 39 
  struct mwifiex_private *priv = mwifiex_get_priv_1(adapter,(enum mwifiex_bss_role)MWIFIEX_BSS_ROLE_ANY);
  
#line 42 
  struct mwifiex_rxinfo *rx_info = MWIFIEX_SKB_RXCB(skb);
  
#line 45 
  local_rx_pd = (struct rxpd *)skb->data;
  
#line 47 
  priv = mwifiex_get_priv_by_id_0(adapter,(unsigned char)((int)local_rx_pd->bss_num & 15),(unsigned char)((int)local_rx_pd->bss_type));
  
#line 49 
  if (priv == (struct mwifiex_private *)0) 
#line 50 
                                           priv = mwifiex_get_priv_1(adapter,(enum mwifiex_bss_role)MWIFIEX_BSS_ROLE_ANY); else ;
  
#line 52 
  if (priv == (struct mwifiex_private *)0) {
    
#line 53 
    if ((adapter->debug_mask & 4U) != 0U) {
      
#line 53 
      if (adapter->dev != (struct device *)0) 
#line 53 
                                              _dev_info((struct device const *)adapter->dev,"data: priv not found. Drop RX packet\n"); else ;
    }
    else ;
    
#line 55 
    dev_kfree_skb_any(skb);
    
#line 56 
    __retres = -1;
    
#line 56 
    goto return_label;
  }
  else ;
  
#line 59 
  if ((adapter->debug_mask & 65536U) != 0U) {
    size_t tmp_2;
    {
      size_t tmp_1;
      
#line 59 
      size_t __min1 = (unsigned long)skb->len;
      
#line 59 
      size_t __min2 = 128UL;
      
#line 59 
      if (__min1 < __min2) 
#line 59 
                           tmp_1 = __min1; else 
#line 59 
                                                tmp_1 = __min2;
      
#line 59 
      tmp_2 = tmp_1;
    }
    
#line 59 
    ;
    
#line 59 
    print_hex_dump("\001","rx pkt:",2,16,1,(void const *)skb->data,tmp_2,(_Bool)0);
  }
  else ;
  
#line 62 
  memset((void *)rx_info,0,16UL);
  
#line 63 
  rx_info->bss_num = priv->bss_num;
  
#line 64 
  rx_info->bss_type = priv->bss_type;
  
#line 66 
  if ((unsigned int)priv->bss_role == 1U) 
#line 67 
                                          ret = mwifiex_process_uap_rx_packet(priv,skb); else 
                                                                    
#line 69 
                                                                    ret = mwifiex_process_sta_rx_packet(priv,skb);
  
#line 71 
  __retres = ret;
  return_label: 
#line 71 
                return __retres;
}


#line 73  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/txrx.c"
static char const __kstrtab_mwifiex_handle_rx_packet[25U] = {(char)'m', (char)'w', (char)'i', (char)'f', (char)'i', (char)'e', (char)'x', (char)'_', (char)'h', (char)'a', (char)'n', (char)'d', (char)'l', (char)'e', (char)'_', (char)'r', (char)'x', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'\000'};

#line 73 
struct kernel_symbol const __ksymtab_mwifiex_handle_rx_packet;


#line 73  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/txrx.c"
struct kernel_symbol const __ksymtab_mwifiex_handle_rx_packet = {.value = (unsigned long)(& mwifiex_handle_rx_packet), .name = (char const *)(& __kstrtab_mwifiex_handle_rx_packet)};

#line 84  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/txrx.c"
int mwifiex_process_tx(struct mwifiex_private *priv, struct sk_buff *skb, struct mwifiex_tx_param *tx_param)
{
  int __retres;
  int hroom;
  u8 *head_ptr;
  struct mwifiex_sta_node *dest_node;
  
#line 87 
  int ret = -1;
  
#line 88 
  struct mwifiex_adapter *adapter = priv->adapter;
  
#line 90 
  struct txpd *local_tx_pd = (struct txpd *)0;
  
#line 92 
  struct ethhdr *hdr = (struct ethhdr *)skb->data;
  
#line 94 
  if ((unsigned int)adapter->iface_type == 2U) 
#line 94 
                                               hroom = 0; else 
#line 94 
                                                               hroom = 4;
  
#line 96 
  if ((unsigned int)priv->bss_role == 1U) {
    
#line 97 
    dest_node = mwifiex_get_sta_entry(priv,(u8 const *)(& hdr->h_dest));
    
#line 98 
    if (dest_node != (struct mwifiex_sta_node *)0) {
      
#line 99 
      dest_node->stats.tx_bytes += (unsigned long long)skb->len;
      
#line 100 
      dest_node->stats.tx_packets += 1U;
    }
    else ;
    
#line 103 
    head_ptr = (u8 *)mwifiex_process_uap_txpd(priv,skb);
  }
  else 
#line 105 
       head_ptr = (u8 *)mwifiex_process_sta_txpd(priv,skb);
  
#line 108 
  if (((unsigned int)adapter->data_sent != 0U || (unsigned int)adapter->tx_lock_flag != 0U) && head_ptr != (u8 *)0U) {
    
#line 109 
    skb_queue_tail(& adapter->tx_data_q,skb);
    
#line 110 
    atomic_inc_6(& adapter->tx_queued);
    
#line 111 
    __retres = 0;
    
#line 111 
    goto return_label;
  }
  else ;
  
#line 114 
  if (head_ptr != (u8 *)0U) {
    
#line 115 
    if (((unsigned long)priv->bss_role & 1UL) == 0UL) 
#line 116 
                                                      local_tx_pd = (struct txpd *)(head_ptr + hroom); else ;
    
#line 117 
    if ((unsigned int)adapter->iface_type == 2U) {
      
#line 118 
      adapter->data_sent = (unsigned char)1U;
      
#line 119 
      ret = (*(adapter->if_ops.host_to_card))(adapter,(unsigned char)2,skb,(struct mwifiex_tx_param *)0);
    }
    else 
#line 123 
         ret = (*(adapter->if_ops.host_to_card))(adapter,(unsigned char)0,skb,tx_param);
  }
  else ;
  
#line 128 
  if ((adapter->debug_mask & 65536U) != 0U) {
    size_t tmp_2;
    {
      size_t tmp_1;
      
#line 128 
      size_t __min1 = (unsigned long)skb->len;
      
#line 128 
      size_t __min2 = 128UL;
      
#line 128 
      if (__min1 < __min2) 
#line 128 
                           tmp_1 = __min1; else 
#line 128 
                                                tmp_1 = __min2;
      
#line 128 
      tmp_2 = tmp_1;
    }
    
#line 128 
    ;
    
#line 128 
    print_hex_dump("\001","tx pkt:",2,16,1,(void const *)skb->data,tmp_2,(_Bool)0);
  }
  else ;
  
#line 131 
  switch (ret) {
    case -63: 
#line 132 
    ;
    
#line 133 
    if ((adapter->debug_mask & 4U) != 0U) {
      
#line 133 
      if (adapter->dev != (struct device *)0) 
#line 133 
                                              _dev_info((struct device const *)adapter->dev,"data: -ENOSR is returned\n"); else ;
    }
    else ;
    
#line 134 
    goto ldv_61310;
    case -16: 
#line 135 
    ;
    
#line 136 
    if ((((unsigned long)priv->bss_role & 1UL) == 0UL && (unsigned int)adapter->pps_uapsd_mode != 0U) && (unsigned int)adapter->tx_lock_flag != 0U) {
      
#line 138 
      (priv->adapter)->tx_lock_flag = (unsigned char)0U;
      
#line 139 
      if (local_tx_pd != (struct txpd *)0) 
#line 140 
                                           local_tx_pd->flags = (unsigned char)0U; else ;
    }
    else ;
    
#line 142 
    if ((adapter->debug_mask & 4U) != 0U) {
      
#line 142 
      if (adapter->dev != (struct device *)0) 
#line 142 
                                              _dev_info((struct device const *)adapter->dev,"data: -EBUSY is returned\n"); else ;
    }
    else ;
    
#line 143 
    goto ldv_61310;
    case -1: 
#line 144 
    ;
    
#line 145 
    if ((unsigned int)adapter->iface_type != 1U) 
#line 146 
                                                 adapter->data_sent = (unsigned char)0U; else ;
    
#line 147 
    if ((adapter->debug_mask & 4U) != 0U) {
      
#line 147 
      if (adapter->dev != (struct device *)0) 
#line 147 
                                              _dev_info((struct device const *)adapter->dev,"mwifiex_write_data_async failed: 0x%X\n",ret); else ;
    }
    else ;
    
#line 150 
    adapter->dbg.num_tx_host_to_card_failure += 1U;
    
#line 151 
    mwifiex_write_data_complete(adapter,skb,0,ret);
    
#line 152 
    goto ldv_61310;
    case -115: 
#line 153 
    ;
    
#line 154 
    if ((unsigned int)adapter->iface_type != 1U) 
#line 155 
                                                 adapter->data_sent = (unsigned char)0U; else ;
    
#line 156 
    goto ldv_61310;
    case 0: 
#line 157 
    ;
    
#line 158 
    mwifiex_write_data_complete(adapter,skb,0,ret);
    
#line 159 
    goto ldv_61310;
    default: 
#line 160 
    ;
    
#line 161 
    goto ldv_61310;
  }
  ldv_61310: 
#line 164 
  ;
  
#line 164 
  __retres = ret;
  return_label: 
#line 164 
                return __retres;
}


#line 167  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/txrx.c"
static int mwifiex_host_to_card(struct mwifiex_adapter *adapter, struct sk_buff *skb, struct mwifiex_tx_param *tx_param)
{
  int __retres;
  struct mwifiex_private *priv;
  struct mwifiex_txinfo *tx_info;
  
#line 171 
  struct txpd *local_tx_pd = (struct txpd *)0;
  
#line 172 
  u8 *head_ptr = skb->data;
  
#line 173 
  int ret = 0;
  
#line 177 
  tx_info = MWIFIEX_SKB_TXCB(skb);
  
#line 178 
  priv = mwifiex_get_priv_by_id_0(adapter,(unsigned char)((int)tx_info->bss_num),(unsigned char)((int)tx_info->bss_type));
  
#line 180 
  if (priv == (struct mwifiex_private *)0) {
    
#line 181 
    if ((adapter->debug_mask & 4U) != 0U) {
      
#line 181 
      if (adapter->dev != (struct device *)0) 
#line 181 
                                              _dev_info((struct device const *)adapter->dev,"data: priv not found. Drop TX packet\n"); else ;
    }
    else ;
    
#line 183 
    adapter->dbg.num_tx_host_to_card_failure += 1U;
    
#line 184 
    mwifiex_write_data_complete(adapter,skb,0,0);
    
#line 185 
    __retres = ret;
    
#line 185 
    goto return_label;
  }
  else ;
  
#line 187 
  if (((unsigned long)priv->bss_role & 1UL) == 0UL) 
    
#line 188 
    if ((unsigned int)adapter->iface_type == 2U) 
#line 189 
                                                 local_tx_pd = (struct txpd *)head_ptr; else 
                                                                    
#line 191 
                                                                    local_tx_pd = (struct txpd *)(head_ptr + 4U);
  else ;
  
#line 195 
  if ((unsigned int)adapter->iface_type == 2U) {
    
#line 196 
    adapter->data_sent = (unsigned char)1U;
    
#line 197 
    ret = (*(adapter->if_ops.host_to_card))(adapter,(unsigned char)2,skb,(struct mwifiex_tx_param *)0);
  }
  else 
#line 201 
       ret = (*(adapter->if_ops.host_to_card))(adapter,(unsigned char)0,skb,tx_param);
  
#line 205 
  switch (ret) {
    case -63: 
#line 206 
    ;
    
#line 207 
    if ((adapter->debug_mask & 4U) != 0U) {
      
#line 207 
      if (adapter->dev != (struct device *)0) 
#line 207 
                                              _dev_info((struct device const *)adapter->dev,"data: -ENOSR is returned\n"); else ;
    }
    else ;
    
#line 208 
    goto ldv_61327;
    case -16: 
#line 209 
    ;
    
#line 210 
    if ((((unsigned long)priv->bss_role & 1UL) == 0UL && (unsigned int)adapter->pps_uapsd_mode != 0U) && (unsigned int)adapter->tx_lock_flag != 0U) {
      
#line 213 
      (priv->adapter)->tx_lock_flag = (unsigned char)0U;
      
#line 214 
      if (local_tx_pd != (struct txpd *)0) 
#line 215 
                                           local_tx_pd->flags = (unsigned char)0U; else ;
    }
    else ;
    
#line 217 
    skb_queue_head(& adapter->tx_data_q,skb);
    
#line 218 
    if (((unsigned long)tx_info->flags & 32UL) != 0UL) 
#line 219 
                                                       atomic_add_0((int)tx_info->aggr_num,& adapter->tx_queued); else 
                                                                    
#line 221 
                                                                    atomic_inc_6(& adapter->tx_queued);
    
#line 222 
    if ((adapter->debug_mask & 4U) != 0U) {
      
#line 222 
      if (adapter->dev != (struct device *)0) 
#line 222 
                                              _dev_info((struct device const *)adapter->dev,"data: -EBUSY is returned\n"); else ;
    }
    else ;
    
#line 223 
    goto ldv_61327;
    case -1: 
#line 224 
    ;
    
#line 225 
    if ((unsigned int)adapter->iface_type != 1U) 
#line 226 
                                                 adapter->data_sent = (unsigned char)0U; else ;
    
#line 227 
    if ((adapter->debug_mask & 4U) != 0U) {
      
#line 227 
      if (adapter->dev != (struct device *)0) 
#line 227 
                                              _dev_info((struct device const *)adapter->dev,"mwifiex_write_data_async failed: 0x%X\n",ret); else ;
    }
    else ;
    
#line 229 
    adapter->dbg.num_tx_host_to_card_failure += 1U;
    
#line 230 
    mwifiex_write_data_complete(adapter,skb,0,ret);
    
#line 231 
    goto ldv_61327;
    case -115: 
#line 232 
    ;
    
#line 233 
    if ((unsigned int)adapter->iface_type != 1U) 
#line 234 
                                                 adapter->data_sent = (unsigned char)0U; else ;
    
#line 235 
    goto ldv_61327;
    case 0: 
#line 236 
    ;
    
#line 237 
    mwifiex_write_data_complete(adapter,skb,0,ret);
    
#line 238 
    goto ldv_61327;
    default: 
#line 239 
    ;
    
#line 240 
    goto ldv_61327;
  }
  ldv_61327: 
#line 242 
  ;
  
#line 242 
  __retres = ret;
  return_label: 
#line 242 
                return __retres;
}


#line 246  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/txrx.c"
static int mwifiex_dequeue_tx_queue(struct mwifiex_adapter *adapter)
{
  int __retres;
  struct sk_buff *skb;
  struct sk_buff *skb_next;
  struct mwifiex_txinfo *tx_info;
  struct mwifiex_tx_param tx_param;
  int tmp;
  int tmp_1;
  
#line 252 
  skb = skb_dequeue(& adapter->tx_data_q);
  
#line 253 
  if (skb == (struct sk_buff *)0) {
    
#line 254 
    __retres = -1;
    
#line 254 
    goto return_label;
  }
  else ;
  
#line 256 
  tx_info = MWIFIEX_SKB_TXCB(skb);
  
#line 257 
  if (((unsigned long)tx_info->flags & 32UL) != 0UL) 
#line 258 
                                                     atomic_sub_0((int)tx_info->aggr_num,& adapter->tx_queued); else 
                                                                    
#line 260 
                                                                    atomic_dec_5(& adapter->tx_queued);
  
#line 262 
  tmp = skb_queue_empty((struct sk_buff_head const *)(& adapter->tx_data_q));
  
#line 262 
  if (tmp == 0) 
#line 263 
                skb_next = skb_peek((struct sk_buff_head const *)(& adapter->tx_data_q)); else 
                                                                    
#line 265 
                                                                    skb_next = (struct sk_buff *)0;
  
#line 266 
  if (skb_next != (struct sk_buff *)0) 
#line 266 
                                       tx_param.next_pkt_len = skb_next->len; else 
                                                                    
#line 266 
                                                                    tx_param.next_pkt_len = 0U;
  
#line 267 
  if (tx_param.next_pkt_len == 0U) {
    int tmp_0;
    
#line 268 
    tmp_0 = mwifiex_wmm_lists_empty(adapter);
    
#line 268 
    if (tmp_0 == 0) 
#line 269 
                    tx_param.next_pkt_len = 1U; else ;
  }
  else ;
  
#line 271 
  tmp_1 = mwifiex_host_to_card(adapter,skb,& tx_param);
  
#line 271 
  __retres = tmp_1;
  return_label: 
#line 271 
                return __retres;
}


#line 275  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/txrx.c"
void mwifiex_process_tx_queue(struct mwifiex_adapter *adapter)
{
  int tmp;
  int tmp_0;
  ldv_61344: 
#line 277 
  ;
  
#line 278 
  if ((unsigned int)adapter->data_sent != 0U || (unsigned int)adapter->tx_lock_flag != 0U) 
    
#line 279 
    goto ldv_61343; else ;
  
#line 280 
  tmp = mwifiex_dequeue_tx_queue(adapter);
  
#line 280 
  if (tmp != 0) 
#line 281 
                goto ldv_61343; else ;
  
#line 282 
  tmp_0 = skb_queue_empty((struct sk_buff_head const *)(& adapter->tx_data_q));
  
#line 282 
  if (tmp_0 == 0) 
#line 284 
                  goto ldv_61344; else 
#line 287 
                                       goto ldv_61343;
  ldv_61343: 
#line 288 
  ;
  
#line 289 
  return;
}


#line 292  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/txrx.c"
int mwifiex_write_data_complete(struct mwifiex_adapter *adapter, struct sk_buff *skb, int aggr, int status)
{
  int __retres;
  struct mwifiex_private *priv;
  struct mwifiex_txinfo *tx_info;
  struct netdev_queue *txq;
  int index;
  int tmp_0;
  
#line 300 
  if (skb == (struct sk_buff *)0) {
    
#line 301 
    __retres = 0;
    
#line 301 
    goto return_label;
  }
  else ;
  
#line 303 
  tx_info = MWIFIEX_SKB_TXCB(skb);
  
#line 304 
  priv = mwifiex_get_priv_by_id_0(adapter,(unsigned char)((int)tx_info->bss_num),(unsigned char)((int)tx_info->bss_type));
  
#line 306 
  if (priv == (struct mwifiex_private *)0) 
#line 307 
                                           goto done; else ;
  
#line 309 
  if ((unsigned int)adapter->iface_type == 2U) 
#line 310 
                                               adapter->data_sent = (unsigned char)0U; else ;
  
#line 312 
  mwifiex_set_trans_start(priv->netdev);
  
#line 313 
  if (status == 0) {
    
#line 314 
    priv->stats.tx_packets += 1UL;
    
#line 315 
    priv->stats.tx_bytes += (unsigned long)tx_info->pkt_len;
    
#line 316 
    if ((unsigned int)priv->tx_timeout_cnt != 0U) 
#line 317 
                                                  priv->tx_timeout_cnt = (unsigned char)0U; else ;
  }
  else 
#line 319 
       priv->stats.tx_errors += 1UL;
  
#line 322 
  if (((unsigned long)tx_info->flags & 2UL) != 0UL) 
#line 323 
                                                    atomic_sub_return(1,& adapter->pending_bridged_pkts); else ;
  
#line 325 
  if (((unsigned long)tx_info->flags & 32UL) != 0UL) 
#line 326 
                                                     goto done; else ;
  
#line 328 
  if (aggr != 0) 
#line 330 
                 goto done; else ;
  
#line 332 
  atomic_dec_5(& adapter->tx_pending);
  
#line 334 
  index = (int)mwifiex_1d_to_wmm_queue_0[skb->priority];
  
#line 335 
  tmp_0 = atomic_sub_return(1,& priv->wmm_tx_pending[index]);
  
#line 335 
  if (tmp_0 <= 79) {
    bool tmp;
    
#line 336 
    txq = netdev_get_tx_queue((struct net_device const *)priv->netdev,(unsigned int)index);
    
#line 337 
    tmp = netif_tx_queue_stopped((struct netdev_queue const *)txq);
    
#line 337 
    if ((int)tmp != 0) {
      
#line 338 
      netif_tx_wake_queue(txq);
      
#line 339 
      if ((adapter->debug_mask & 8U) != 0U) {
        
#line 339 
        if (adapter->dev != (struct device *)0) 
#line 339 
                                                _dev_info((struct device const *)adapter->dev,"wake queue: %d\n",index); else ;
      }
      else ;
    }
    else ;
  }
  else ;
  done: 
#line 342 
  ;
  
#line 343 
  dev_kfree_skb_any(skb);
  
#line 345 
  __retres = 0;
  return_label: 
#line 345 
                return __retres;
}


#line 347  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/txrx.c"
static char const __kstrtab_mwifiex_write_data_complete[28U] = {(char)'m', (char)'w', (char)'i', (char)'f', (char)'i', (char)'e', (char)'x', (char)'_', (char)'w', (char)'r', (char)'i', (char)'t', (char)'e', (char)'_', (char)'d', (char)'a', (char)'t', (char)'a', (char)'_', (char)'c', (char)'o', (char)'m', (char)'p', (char)'l', (char)'e', (char)'t', (char)'e', (char)'\000'};

#line 347 
struct kernel_symbol const __ksymtab_mwifiex_write_data_complete;


#line 347  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/txrx.c"
struct kernel_symbol const __ksymtab_mwifiex_write_data_complete = {.value = (unsigned long)(& mwifiex_write_data_complete), .name = (char const *)(& __kstrtab_mwifiex_write_data_complete)};

#line 349  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/txrx.c"
void mwifiex_parse_tx_status_event(struct mwifiex_private *priv, void *event_body)
{
  struct sk_buff *ack_skb;
  unsigned long flags;
  struct mwifiex_txinfo *tx_info;
  
#line 352 
  struct tx_status_event *tx_status = (struct tx_status_event *)(& (priv->adapter)->event_body);
  
#line 357 
  if ((unsigned int)tx_status->tx_token_id == 0U) 
#line 358 
                                                  goto return_label; else ;
  
#line 360 
  ldv___ldv_spin_lock_76_1(& priv->ack_status_lock);
  
#line 361 
  ack_skb = (struct sk_buff *)idr_find(& priv->ack_status_frames,(int)tx_status->tx_token_id);
  
#line 362 
  if (ack_skb != (struct sk_buff *)0) 
#line 363 
                                      idr_remove(& priv->ack_status_frames,(int)tx_status->tx_token_id); else ;
  
#line 364 
  ldv_spin_unlock_irqrestore_77_1(& priv->ack_status_lock,flags);
  
#line 366 
  if (ack_skb != (struct sk_buff *)0) {
    
#line 367 
    tx_info = MWIFIEX_SKB_TXCB(ack_skb);
    
#line 369 
    if (((unsigned long)tx_info->flags & 8UL) != 0UL) 
#line 371 
                                                      skb_complete_wifi_ack(ack_skb,(_Bool)((unsigned int)tx_status->status == 0U));
    else {
      
#line 373 
      cfg80211_mgmt_tx_status(& priv->wdev,tx_info->cookie,(u8 const *)ack_skb->data,(unsigned long)ack_skb->len,(_Bool)((unsigned int)tx_status->status == 0U),32U);
      
#line 376 
      dev_kfree_skb_any(ack_skb);
    }
  }
  else ;
  return_label: 
#line 379 
                return;
}


#line 99  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_txrx.c.aux"
static void atomic_add_0(int i, atomic_t *v)
{
  
#line 102 
  ldv_atomic_add(i,v);
  
#line 103 
  return;
}


#line 106  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_txrx.c.aux"
static void atomic_sub_0(int i, atomic_t *v)
{
  
#line 109 
  ldv_atomic_sub(i,v);
  
#line 110 
  return;
}


#line 120  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_txrx.c.aux"
static void atomic_inc_6(atomic_t *v)
{
  
#line 123 
  ldv_atomic_inc(v);
  
#line 124 
  return;
}


#line 127  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_txrx.c.aux"
static void atomic_dec_5(atomic_t *v)
{
  
#line 130 
  ldv_atomic_dec(v);
  
#line 131 
  return;
}


#line 155  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_txrx.c.aux"
static int atomic_add_return_0(int i, atomic_t *v)
{
  int tmp;
  
#line 158 
  tmp = ldv_atomic_add_return(i,v);
  
#line 158 
  return tmp;
}


#line 771  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_txrx.c.aux"
static void ldv___ldv_spin_lock_76_1(spinlock_t *ldv_func_arg1)
{
  
#line 775 
  ldv_spin_model_lock((char *)"ack_status_lock_of_mwifiex_private");
  
#line 777 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 778 
  return;
}


#line 781  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_txrx.c.aux"
static void ldv_spin_unlock_irqrestore_77_1(spinlock_t *lock, unsigned long flags)
{
  
#line 785 
  ldv_spin_model_unlock((char *)"ack_status_lock_of_mwifiex_private");
  
#line 787 
  spin_unlock_irqrestore_8(lock,flags);
  
#line 788 
  return;
}


#line 114  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/atomic.h"
static void atomic_dec_6(atomic_t *v);


#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock_api_smp.h"
void _raw_spin_lock(raw_spinlock_t *);


#line 41 
void _raw_spin_unlock(raw_spinlock_t *);


#line 310  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_lock(spinlock_t *lock)
{
  
#line 312 
  _raw_spin_lock(& lock->__anonCompField_spinlock_18.rlock);
  
#line 313 
  return;
}


#line 358 
static void ldv_spin_lock_93(spinlock_t *lock);


#line 363  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_unlock(spinlock_t *lock)
{
  
#line 365 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_18.rlock);
  
#line 366 
  return;
}


#line 407 
static void ldv_spin_unlock_94(spinlock_t *lock);


#line 450  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_unlock_irqrestore_9(spinlock_t *lock, unsigned long flags)
{
  {
    unsigned long __dummy;
    unsigned long __dummy2;
    
  }
  
#line 452 
  _raw_spin_unlock_irqrestore(& lock->__anonCompField_spinlock_18.rlock,flags);
  
#line 453 
  return;
}


#line 486 
static void ldv_spin_unlock_irqrestore_79_7(spinlock_t *lock, unsigned long flags);


#line 490 
static void ldv_spin_unlock_irqrestore_81_5(spinlock_t *lock, unsigned long flags);


#line 494 
static void ldv_spin_unlock_irqrestore_83_6(spinlock_t *lock, unsigned long flags);


#line 498 
static void ldv_spin_unlock_irqrestore_86_2(spinlock_t *lock, unsigned long flags);


#line 502 
static void ldv_spin_unlock_irqrestore_88_1(spinlock_t *lock, unsigned long flags);


#line 506 
static void ldv_spin_unlock_irqrestore_89_5(spinlock_t *lock, unsigned long flags);


#line 510 
static void ldv_spin_unlock_irqrestore_92_1(spinlock_t *lock, unsigned long flags);


#line 74  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_init.c.aux"
static void ldv___ldv_spin_lock_78_6(spinlock_t *ldv_func_arg1);


#line 78 
static void ldv___ldv_spin_lock_80_4(spinlock_t *ldv_func_arg1);


#line 82 
static void ldv___ldv_spin_lock_82_5(spinlock_t *ldv_func_arg1);


#line 86 
static void ldv___ldv_spin_lock_85_0(spinlock_t *ldv_func_arg1);


#line 90 
static void ldv___ldv_spin_lock_87_1(spinlock_t *ldv_func_arg1);


#line 94 
static void ldv___ldv_spin_lock_91_1(spinlock_t *ldv_func_arg1);


#line 172  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timer.h"
static int ldv_del_timer_84(struct timer_list *ldv_func_arg1);


#line 232 
static int ldv_del_timer_sync_90_0(struct timer_list *ldv_func_arg1);


#line 89  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/idr.h"
void idr_init(struct idr *);


#line 581  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/slab.h"
static void *kzalloc_5(size_t size, gfp_t flags);


#line 996  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.h"
int mwifiex_init_priv(struct mwifiex_private *priv);


#line 997 
void mwifiex_free_priv(struct mwifiex_private *priv);


#line 1439 
void mwifiex_init_11h_params(struct mwifiex_private *priv);


#line 1505 
void mwifiex_abort_cac(struct mwifiex_private *priv);


#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/wmm.h"
static u8 const tos_to_tid_inv_0[8U] = {(unsigned char)2U, (unsigned char)0U, (unsigned char)1U, (unsigned char)3U, (unsigned char)4U, (unsigned char)5U, (unsigned char)6U, (unsigned char)7U};

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/init.c"
static int mwifiex_add_bss_prio_tbl(struct mwifiex_private *priv)
{
  int __retres;
  struct mwifiex_bss_prio_node *bss_prio;
  unsigned long flags;
  
#line 36 
  struct mwifiex_adapter *adapter = priv->adapter;
  
#line 38 
  struct mwifiex_bss_prio_tbl *tbl = (struct mwifiex_bss_prio_tbl *)(& adapter->bss_prio_tbl);
  
#line 41 
  bss_prio = (struct mwifiex_bss_prio_node *)kzalloc_5(24UL,208U);
  
#line 42 
  if (bss_prio == (struct mwifiex_bss_prio_node *)0) {
    
#line 43 
    __retres = -12;
    
#line 43 
    goto return_label;
  }
  else ;
  
#line 45 
  bss_prio->priv = priv;
  
#line 46 
  INIT_LIST_HEAD(& bss_prio->list);
  
#line 48 
  ldv___ldv_spin_lock_78_6(& (tbl + (int)priv->bss_priority)->bss_prio_lock);
  
#line 49 
  list_add_tail(& bss_prio->list,& (tbl + (int)priv->bss_priority)->bss_prio_head);
  
#line 50 
  ldv_spin_unlock_irqrestore_79_7(& (tbl + (int)priv->bss_priority)->bss_prio_lock,flags);
  
#line 52 
  __retres = 0;
  return_label: 
#line 52 
                return __retres;
}


#line 55  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/init.c"
static void wakeup_timer_fn(unsigned long data)
{
  
#line 57 
  struct mwifiex_adapter *adapter = (struct mwifiex_adapter *)data;
  
#line 59 
  if ((adapter->debug_mask & 4U) != 0U) {
    
#line 59 
    if (adapter->dev != (struct device *)0) 
#line 59 
                                            _dev_info((struct device const *)adapter->dev,"Firmware wakeup failed\n"); else ;
  }
  else ;
  
#line 60 
  adapter->hw_status = MWIFIEX_HW_STATUS_RESET;
  
#line 61 
  mwifiex_cancel_all_pending_cmd(adapter);
  
#line 63 
  if (adapter->if_ops.card_reset != (void (*)(struct mwifiex_adapter *))0) 
    
#line 64 
    (*(adapter->if_ops.card_reset))(adapter); else ;
  
#line 65 
  return;
}


#line 74  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/init.c"
int mwifiex_init_priv(struct mwifiex_private *priv)
{
  u32 i;
  int tmp;
  
#line 78 
  priv->media_connected = (unsigned char)0U;
  
#line 79 
  eth_broadcast_addr((u8 *)(& priv->curr_addr));
  
#line 81 
  priv->pkt_tx_ctrl = 0U;
  
#line 82 
  priv->bss_mode = 0U;
  
#line 83 
  priv->data_rate = 0U;
  
#line 84 
  priv->is_data_rate_auto = (unsigned char)1U;
  
#line 85 
  priv->bcn_avg_factor = (unsigned short)8U;
  
#line 86 
  priv->data_avg_factor = (unsigned short)8U;
  
#line 88 
  priv->sec_info.wep_enabled = (unsigned char)0U;
  
#line 89 
  priv->sec_info.authentication_mode = 0U;
  
#line 90 
  priv->sec_info.encryption_mode = 0U;
  
#line 91 
  i = 0U;
  
#line 91 
  goto ldv_61571;
  ldv_61570: 
#line 92 
  ;
  
#line 92 
  memset((void *)(& priv->wep_key[i]),0,28UL);
  
#line 91 
  i += 1U;
  ldv_61571: 
#line 92 
  ;
  
#line 91 
  if (i <= 3U) 
#line 93 
               goto ldv_61570; else 
#line 96 
                                    goto ldv_61572;
  ldv_61572: 
#line 97 
  ;
  
#line 93 
  priv->wep_key_curr_index = (unsigned short)0U;
  
#line 94 
  priv->curr_pkt_filter = (unsigned short)19U;
  
#line 97 
  priv->beacon_period = (unsigned short)100U;
  
#line 98 
  priv->attempted_bss_desc = (struct mwifiex_bssdescriptor *)0;
  
#line 99 
  memset((void *)(& priv->curr_bss_params),0,360UL);
  
#line 100 
  priv->listen_interval = (unsigned short)10U;
  
#line 102 
  memset((void *)(& priv->prev_ssid),0,33UL);
  
#line 103 
  memset((void *)(& priv->prev_bssid),0,6UL);
  
#line 104 
  memset((void *)(& priv->assoc_rsp_buf),0,500UL);
  
#line 105 
  priv->assoc_rsp_size = 0U;
  
#line 106 
  priv->adhoc_channel = (unsigned char)6U;
  
#line 107 
  priv->atim_window = (unsigned short)0U;
  
#line 108 
  priv->adhoc_state = (unsigned char)0U;
  
#line 109 
  priv->tx_power_level = (unsigned short)0U;
  
#line 110 
  priv->max_tx_power_level = (unsigned char)0U;
  
#line 111 
  priv->min_tx_power_level = (unsigned char)0U;
  
#line 112 
  priv->tx_rate = (unsigned char)0U;
  
#line 113 
  priv->rxpd_htinfo = (unsigned char)0U;
  
#line 114 
  priv->rxpd_rate = (unsigned char)0U;
  
#line 115 
  priv->rate_bitmap = (unsigned short)0U;
  
#line 116 
  priv->data_rssi_last = (short)0;
  
#line 117 
  priv->data_rssi_avg = (short)0;
  
#line 118 
  priv->data_nf_avg = (short)0;
  
#line 119 
  priv->data_nf_last = (short)0;
  
#line 120 
  priv->bcn_rssi_last = (short)0;
  
#line 121 
  priv->bcn_rssi_avg = (short)0;
  
#line 122 
  priv->bcn_nf_avg = (short)0;
  
#line 123 
  priv->bcn_nf_last = (short)0;
  
#line 124 
  memset((void *)(& priv->wpa_ie),0,256UL);
  
#line 125 
  memset((void *)(& priv->aes_key),0,62UL);
  
#line 126 
  priv->wpa_ie_len = (unsigned char)0U;
  
#line 127 
  priv->wpa_is_gtk_set = (unsigned char)0U;
  
#line 129 
  memset((void *)(& priv->assoc_tlv_buf),0,256UL);
  
#line 130 
  priv->assoc_tlv_buf_len = (unsigned char)0U;
  
#line 131 
  memset((void *)(& priv->wps),0,1UL);
  
#line 132 
  memset((void *)(& priv->gen_ie_buf),0,256UL);
  
#line 133 
  priv->gen_ie_buf_len = (unsigned char)0U;
  
#line 134 
  memset((void *)(& priv->vs_ie),0,2080UL);
  
#line 136 
  priv->wmm_required = (unsigned char)1U;
  
#line 137 
  priv->wmm_enabled = (unsigned char)0U;
  
#line 138 
  priv->wmm_qosinfo = (unsigned char)0U;
  
#line 139 
  priv->curr_bcn_buf = (u8 *)0U;
  
#line 140 
  priv->curr_bcn_size = 0U;
  
#line 141 
  priv->wps_ie = (u8 *)0U;
  
#line 142 
  priv->wps_ie_len = (unsigned char)0U;
  
#line 143 
  priv->ap_11n_enabled = (unsigned char)0U;
  
#line 144 
  memset((void *)(& priv->roc_cfg),0,72UL);
  
#line 146 
  priv->scan_block = (unsigned char)0U;
  
#line 148 
  priv->csa_chan = (unsigned char)0U;
  
#line 149 
  priv->csa_expire_time = 0UL;
  
#line 150 
  priv->del_list_idx = (unsigned char)0U;
  
#line 151 
  priv->hs2_enabled = (_Bool)0;
  
#line 152 
  priv->check_tdls_tx = (unsigned char)0U;
  
#line 153 
  memcpy((void *)(& priv->tos_to_tid_inv),(void const *)(& tos_to_tid_inv_0),8UL);
  
#line 155 
  mwifiex_init_11h_params(priv);
  
#line 157 
  tmp = mwifiex_add_bss_prio_tbl(priv);
  
#line 157 
  return tmp;
}


#line 168  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/init.c"
static int mwifiex_allocate_adapter(struct mwifiex_adapter *adapter)
{
  int __retres;
  int ret;
  
#line 173 
  ret = mwifiex_alloc_cmd_buffer(adapter);
  
#line 174 
  if (ret != 0) {
    
#line 175 
    if ((adapter->debug_mask & 4U) != 0U) {
      
#line 175 
      if (adapter->dev != (struct device *)0) 
#line 175 
                                              _dev_info((struct device const *)adapter->dev,"%s: failed to alloc cmd buffer\n","mwifiex_allocate_adapter"); else ;
    }
    else ;
    
#line 178 
    __retres = -1;
    
#line 178 
    goto return_label;
  }
  else ;
  
#line 181 
  adapter->sleep_cfm = dev_alloc_skb(16U);
  
#line 185 
  if (adapter->sleep_cfm == (struct sk_buff *)0) {
    
#line 186 
    if ((adapter->debug_mask & 4U) != 0U) {
      
#line 186 
      if (adapter->dev != (struct device *)0) 
#line 186 
                                              _dev_info((struct device const *)adapter->dev,"%s: failed to alloc sleep cfm\t","mwifiex_allocate_adapter"); else ;
    }
    else ;
    
#line 189 
    __retres = -1;
    
#line 189 
    goto return_label;
  }
  else ;
  
#line 191 
  skb_reserve(adapter->sleep_cfm,4);
  
#line 193 
  __retres = 0;
  return_label: 
#line 193 
                return __retres;
}


#line 203  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/init.c"
static void mwifiex_init_adapter(struct mwifiex_adapter *adapter)
{
  
#line 205 
  struct mwifiex_opt_sleep_confirm *sleep_cfm_buf = (struct mwifiex_opt_sleep_confirm *)0;
  
#line 207 
  skb_put(adapter->sleep_cfm,12U);
  
#line 209 
  adapter->cmd_sent = (unsigned char)0U;
  
#line 211 
  if ((unsigned int)adapter->iface_type == 0U) 
#line 212 
                                               adapter->data_sent = (unsigned char)1U; else 
                                                                    
#line 214 
                                                                    adapter->data_sent = (unsigned char)0U;
  
#line 216 
  adapter->cmd_resp_received = (unsigned char)0U;
  
#line 217 
  adapter->event_received = (unsigned char)0U;
  
#line 218 
  adapter->data_received = (unsigned char)0U;
  
#line 220 
  adapter->surprise_removed = (_Bool)0;
  
#line 222 
  adapter->hw_status = MWIFIEX_HW_STATUS_INITIALIZING;
  
#line 224 
  adapter->ps_mode = (unsigned short)0U;
  
#line 225 
  adapter->ps_state = 0U;
  
#line 226 
  adapter->need_to_wakeup = (unsigned char)0U;
  
#line 228 
  adapter->scan_mode = 3U;
  
#line 229 
  adapter->specific_scan_time = (unsigned short)30U;
  
#line 230 
  adapter->active_scan_time = (unsigned short)30U;
  
#line 231 
  adapter->passive_scan_time = (unsigned short)110U;
  
#line 232 
  adapter->scan_chan_gap_time = (unsigned short)50U;
  
#line 234 
  adapter->scan_probes = (unsigned short)1U;
  
#line 236 
  adapter->multiple_dtim = (unsigned short)1U;
  
#line 238 
  adapter->local_listen_interval = (unsigned short)0U;
  
#line 241 
  adapter->is_deep_sleep = (unsigned char)0U;
  
#line 243 
  adapter->delay_null_pkt = (unsigned char)0U;
  
#line 244 
  adapter->delay_to_ps = (unsigned short)1000U;
  
#line 245 
  adapter->enhanced_ps_mode = (unsigned short)1U;
  
#line 247 
  adapter->gen_null_pkt = (unsigned short)0U;
  
#line 249 
  adapter->pps_uapsd_mode = (unsigned short)0U;
  
#line 251 
  adapter->pm_wakeup_card_req = (unsigned char)0U;
  
#line 253 
  adapter->pm_wakeup_fw_try = 0U;
  
#line 255 
  adapter->curr_tx_buf_size = (unsigned short)2048U;
  
#line 257 
  adapter->is_hs_configured = (unsigned char)0U;
  
#line 258 
  adapter->hs_cfg.conditions = 0U;
  
#line 259 
  adapter->hs_cfg.gpio = (unsigned char)255U;
  
#line 260 
  adapter->hs_cfg.gap = (unsigned char)255U;
  
#line 261 
  adapter->hs_activated = (unsigned char)0U;
  
#line 263 
  memset((void *)(& adapter->event_body),0,2048UL);
  
#line 264 
  adapter->hw_dot_11n_dev_cap = 0U;
  
#line 265 
  adapter->hw_dev_mcs_support = (unsigned char)0U;
  
#line 266 
  adapter->sec_chan_offset = (unsigned char)0U;
  
#line 267 
  adapter->adhoc_11n_enabled = (unsigned char)0U;
  
#line 269 
  mwifiex_wmm_init(adapter);
  
#line 271 
  sleep_cfm_buf = (struct mwifiex_opt_sleep_confirm *)(adapter->sleep_cfm)->data;
  
#line 273 
  memset((void *)sleep_cfm_buf,0,(unsigned long)(adapter->sleep_cfm)->len);
  
#line 274 
  sleep_cfm_buf->command = (unsigned short)228U;
  
#line 275 
  sleep_cfm_buf->size = (unsigned short)(adapter->sleep_cfm)->len;
  
#line 276 
  sleep_cfm_buf->result = (unsigned short)0U;
  
#line 277 
  sleep_cfm_buf->action = (unsigned short)5U;
  
#line 278 
  sleep_cfm_buf->resp_ctrl = (unsigned short)1U;
  
#line 280 
  memset((void *)(& adapter->sleep_params),0,10UL);
  
#line 281 
  memset((void *)(& adapter->sleep_period),0,4UL);
  
#line 282 
  adapter->tx_lock_flag = (unsigned char)0U;
  
#line 283 
  adapter->null_pkt_interval = (unsigned short)0U;
  
#line 284 
  adapter->fw_bands = (unsigned char)0U;
  
#line 285 
  adapter->config_bands = (unsigned char)0U;
  
#line 286 
  adapter->adhoc_start_band = (unsigned char)0U;
  
#line 287 
  adapter->scan_channels = (struct mwifiex_chan_scan_param_set *)0;
  
#line 288 
  adapter->fw_release_number = 0U;
  
#line 289 
  adapter->fw_cap_info = 0U;
  
#line 290 
  memset((void *)(& adapter->upld_buf),0,2312UL);
  
#line 291 
  adapter->event_cause = 0U;
  
#line 292 
  adapter->region_code = (unsigned short)0U;
  
#line 293 
  adapter->bcn_miss_time_out = (unsigned short)5U;
  
#line 294 
  adapter->adhoc_awake_period = (unsigned short)0U;
  
#line 295 
  memset((void *)(& adapter->arp_filter),0,68UL);
  
#line 296 
  adapter->arp_filter_size = 0U;
  
#line 297 
  adapter->max_mgmt_ie_index = (unsigned short)16U;
  
#line 298 
  adapter->key_api_major_ver = (unsigned char)0U;
  
#line 299 
  adapter->key_api_minor_ver = (unsigned char)0U;
  
#line 300 
  eth_broadcast_addr((u8 *)(& adapter->perm_addr));
  
#line 301 
  adapter->iface_limit.sta_intf = (unsigned char)1U;
  
#line 302 
  adapter->iface_limit.uap_intf = (unsigned char)1U;
  
#line 303 
  adapter->iface_limit.p2p_intf = (unsigned char)1U;
  {
    struct lock_class_key __key;
    
#line 305 
    init_timer_key(& adapter->wakeup_timer,0U,"((&adapter->wakeup_timer))",& __key);
  }
  
#line 305 
  adapter->wakeup_timer.function = & wakeup_timer_fn;
  
#line 305 
  adapter->wakeup_timer.data = (unsigned long)adapter;
  
#line 306 
  return;
}


#line 312  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/init.c"
void mwifiex_set_trans_start(struct net_device *dev)
{
  int i;
  struct netdev_queue *tmp;
  
#line 316 
  i = 0;
  
#line 316 
  goto ldv_61588;
  ldv_61587: 
#line 317 
  ;
  
#line 317 
  tmp = netdev_get_tx_queue((struct net_device const *)dev,(unsigned int)i);
  
#line 317 
  tmp->trans_start = jiffies;
  
#line 316 
  i += 1;
  ldv_61588: 
#line 317 
  ;
  
#line 316 
  if (dev->num_tx_queues > (unsigned int)i) 
#line 318 
                                            goto ldv_61587; else 
#line 321 
                                                                 goto ldv_61589;
  ldv_61589: 
#line 322 
  ;
  
#line 319 
  dev->trans_start = jiffies;
  
#line 320 
  return;
}


#line 325  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/init.c"
void mwifiex_wake_up_net_dev_queue(struct net_device *netdev, struct mwifiex_adapter *adapter)
{
  unsigned long dev_queue_flags;
  unsigned int i;
  
#line 331 
  ldv___ldv_spin_lock_80_4(& adapter->queue_lock);
  
#line 333 
  i = 0U;
  
#line 333 
  goto ldv_61598;
  ldv_61597: 
#line 334 
  ;
  {
    bool tmp_0;
    
#line 334 
    struct netdev_queue *txq = netdev_get_tx_queue((struct net_device const *)netdev,i);
    
#line 336 
    tmp_0 = netif_tx_queue_stopped((struct netdev_queue const *)txq);
    
#line 336 
    if ((int)tmp_0 != 0) 
#line 337 
                         netif_tx_wake_queue(txq); else ;
  }
  
#line 333 
  i += 1U;
  ldv_61598: 
#line 334 
  ;
  
#line 333 
  if (netdev->num_tx_queues > i) 
#line 335 
                                 goto ldv_61597; else 
#line 338 
                                                      goto ldv_61599;
  ldv_61599: 
#line 339 
  ;
  
#line 340 
  ldv_spin_unlock_irqrestore_81_5(& adapter->queue_lock,dev_queue_flags);
  
#line 341 
  return;
}


#line 346  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/init.c"
void mwifiex_stop_net_dev_queue(struct net_device *netdev, struct mwifiex_adapter *adapter)
{
  unsigned long dev_queue_flags;
  unsigned int i;
  
#line 352 
  ldv___ldv_spin_lock_82_5(& adapter->queue_lock);
  
#line 354 
  i = 0U;
  
#line 354 
  goto ldv_61608;
  ldv_61607: 
#line 355 
  ;
  {
    int tmp_1;
    bool tmp_0;
    
#line 355 
    struct netdev_queue *txq = netdev_get_tx_queue((struct net_device const *)netdev,i);
    
#line 357 
    tmp_0 = netif_tx_queue_stopped((struct netdev_queue const *)txq);
    
#line 357 
    if (tmp_0) 
#line 357 
               tmp_1 = 0; else 
#line 357 
                               tmp_1 = 1;
    
#line 357 
    if (tmp_1) 
#line 358 
               netif_tx_stop_queue(txq); else ;
  }
  
#line 354 
  i += 1U;
  ldv_61608: 
#line 355 
  ;
  
#line 354 
  if (netdev->num_tx_queues > i) 
#line 356 
                                 goto ldv_61607; else 
#line 359 
                                                      goto ldv_61609;
  ldv_61609: 
#line 360 
  ;
  
#line 361 
  ldv_spin_unlock_irqrestore_83_6(& adapter->queue_lock,dev_queue_flags);
  
#line 362 
  return;
}


#line 368  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/init.c"
static void mwifiex_free_lock_list(struct mwifiex_adapter *adapter)
{
  struct mwifiex_private *priv;
  s32 i;
  s32 j;
  
#line 374 
  list_del(& adapter->cmd_free_q);
  
#line 375 
  list_del(& adapter->cmd_pending_q);
  
#line 376 
  list_del(& adapter->scan_pending_q);
  
#line 378 
  i = 0;
  
#line 378 
  goto ldv_61617;
  ldv_61616: 
#line 379 
  ;
  
#line 379 
  list_del(& adapter->bss_prio_tbl[i].bss_prio_head);
  
#line 378 
  i += 1;
  ldv_61617: 
#line 379 
  ;
  
#line 378 
  if ((int)adapter->priv_num > i) 
#line 380 
                                  goto ldv_61616; else 
#line 383 
                                                       goto ldv_61618;
  ldv_61618: 
#line 384 
  ;
  
#line 381 
  i = 0;
  
#line 381 
  goto ldv_61623;
  ldv_61622: 
#line 382 
  ;
  
#line 382 
  if (adapter->priv[i] != (struct mwifiex_private *)0) {
    
#line 383 
    priv = adapter->priv[i];
    
#line 384 
    j = 0;
    
#line 384 
    goto ldv_61620;
    ldv_61619: 
#line 385 
    ;
    
#line 385 
    list_del(& priv->wmm.tid_tbl_ptr[j].ra_list);
    
#line 384 
    j += 1;
    ldv_61620: 
#line 385 
    ;
    
#line 384 
    if (j <= 7) 
#line 386 
                goto ldv_61619; else 
#line 389 
                                     goto ldv_61621;
    ldv_61621: 
#line 390 
    ;
    
#line 386 
    list_del(& priv->tx_ba_stream_tbl_ptr);
    
#line 387 
    list_del(& priv->rx_reorder_tbl_ptr);
    
#line 388 
    list_del(& priv->sta_list);
    
#line 389 
    list_del(& priv->auto_tdls_list);
  }
  else ;
  
#line 381 
  i += 1;
  ldv_61623: 
#line 382 
  ;
  
#line 381 
  if ((int)adapter->priv_num > i) 
#line 383 
                                  goto ldv_61622; else 
#line 386 
                                                       goto ldv_61624;
  ldv_61624: 
#line 387 
  ;
  
#line 388 
  return;
}


#line 404  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/init.c"
static void mwifiex_adapter_cleanup(struct mwifiex_adapter *adapter)
{
  int idx;
  
#line 408 
  if (adapter == (struct mwifiex_adapter *)0) {
    
#line 409 
    printk("\001","mwifiex_adapter_cleanup");
    
#line 410 
    goto return_label;
  }
  else ;
  
#line 413 
  ldv_del_timer_84(& adapter->wakeup_timer);
  
#line 414 
  mwifiex_cancel_all_pending_cmd(adapter);
  
#line 415 
  __wake_up(& adapter->cmd_wait_q.wait,1U,1,(void *)0);
  
#line 416 
  __wake_up(& adapter->hs_activate_wait_q,1U,1,(void *)0);
  
#line 419 
  mwifiex_free_lock_list(adapter);
  
#line 422 
  if ((adapter->debug_mask & 1073741824U) != 0U) {
    
#line 422 
    if (adapter->dev != (struct device *)0) 
#line 422 
                                            _dev_info((struct device const *)adapter->dev,"info: free cmd buffer\n"); else ;
  }
  else ;
  
#line 423 
  mwifiex_free_cmd_buffer(adapter);
  
#line 425 
  idx = 0;
  
#line 425 
  goto ldv_61632;
  ldv_61631: 
#line 426 
  ;
  {
    
#line 426 
    struct memory_type_mapping *entry = adapter->mem_type_mapping_tbl + idx;
    
#line 429 
    if (entry->mem_ptr != (u8 *)0U) {
      
#line 430 
      vfree((void const *)entry->mem_ptr);
      
#line 431 
      entry->mem_ptr = (u8 *)0U;
    }
    else ;
    
#line 433 
    entry->mem_size = 0U;
  }
  
#line 425 
  idx += 1;
  ldv_61632: 
#line 426 
  ;
  
#line 425 
  if ((int)adapter->num_mem_types > idx) 
#line 427 
                                         goto ldv_61631; else 
#line 430 
                                                              goto ldv_61633;
  ldv_61633: 
#line 431 
  ;
  
#line 436 
  if (adapter->drv_info_dump != (void *)0) {
    
#line 437 
    vfree((void const *)adapter->drv_info_dump);
    
#line 438 
    adapter->drv_info_dump = (void *)0;
    
#line 439 
    adapter->drv_info_size = 0U;
  }
  else ;
  
#line 442 
  if (adapter->sleep_cfm != (struct sk_buff *)0) 
#line 443 
                                                 dev_kfree_skb_any(adapter->sleep_cfm); else ;
  return_label: 
#line 444 
                return;
}


#line 450  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/init.c"
int mwifiex_init_lock_list(struct mwifiex_adapter *adapter)
{
  int __retres;
  struct mwifiex_private *priv;
  s32 i;
  s32 j;
  
#line 455 
  spinlock_check(& adapter->mwifiex_lock);
  {
    struct lock_class_key __key;
    
#line 455 
    __raw_spin_lock_init(& adapter->mwifiex_lock.__anonCompField_spinlock_18.rlock,"&(&adapter->mwifiex_lock)->rlock",& __key);
  }
  
#line 456 
  spinlock_check(& adapter->int_lock);
  {
    struct lock_class_key __key_0;
    
#line 456 
    __raw_spin_lock_init(& adapter->int_lock.__anonCompField_spinlock_18.rlock,"&(&adapter->int_lock)->rlock",& __key_0);
  }
  
#line 457 
  spinlock_check(& adapter->main_proc_lock);
  {
    struct lock_class_key __key_1;
    
#line 457 
    __raw_spin_lock_init(& adapter->main_proc_lock.__anonCompField_spinlock_18.rlock,"&(&adapter->main_proc_lock)->rlock",& __key_1);
  }
  
#line 458 
  spinlock_check(& adapter->mwifiex_cmd_lock);
  {
    struct lock_class_key __key_2;
    
#line 458 
    __raw_spin_lock_init(& adapter->mwifiex_cmd_lock.__anonCompField_spinlock_18.rlock,"&(&adapter->mwifiex_cmd_lock)->rlock",& __key_2);
  }
  
#line 459 
  spinlock_check(& adapter->queue_lock);
  {
    struct lock_class_key __key_3;
    
#line 459 
    __raw_spin_lock_init(& adapter->queue_lock.__anonCompField_spinlock_18.rlock,"&(&adapter->queue_lock)->rlock",& __key_3);
  }
  
#line 460 
  i = 0;
  
#line 460 
  goto ldv_61651;
  ldv_61650: 
#line 461 
  ;
  
#line 461 
  if (adapter->priv[i] != (struct mwifiex_private *)0) {
    
#line 462 
    priv = adapter->priv[i];
    
#line 463 
    spinlock_check(& priv->rx_pkt_lock);
    {
      struct lock_class_key __key_4;
      
#line 463 
      __raw_spin_lock_init(& priv->rx_pkt_lock.__anonCompField_spinlock_18.rlock,"&(&priv->rx_pkt_lock)->rlock",& __key_4);
    }
    
#line 464 
    spinlock_check(& priv->wmm.ra_list_spinlock);
    {
      struct lock_class_key __key_5;
      
#line 464 
      __raw_spin_lock_init(& priv->wmm.ra_list_spinlock.__anonCompField_spinlock_18.rlock,"&(&priv->wmm.ra_list_spinlock)->rlock",& __key_5);
    }
    
#line 465 
    spinlock_check(& priv->curr_bcn_buf_lock);
    {
      struct lock_class_key __key_6;
      
#line 465 
      __raw_spin_lock_init(& priv->curr_bcn_buf_lock.__anonCompField_spinlock_18.rlock,"&(&priv->curr_bcn_buf_lock)->rlock",& __key_6);
    }
    
#line 466 
    spinlock_check(& priv->sta_list_spinlock);
    {
      struct lock_class_key __key_7;
      
#line 466 
      __raw_spin_lock_init(& priv->sta_list_spinlock.__anonCompField_spinlock_18.rlock,"&(&priv->sta_list_spinlock)->rlock",& __key_7);
    }
    
#line 467 
    spinlock_check(& priv->auto_tdls_lock);
    {
      struct lock_class_key __key_8;
      
#line 467 
      __raw_spin_lock_init(& priv->auto_tdls_lock.__anonCompField_spinlock_18.rlock,"&(&priv->auto_tdls_lock)->rlock",& __key_8);
    }
  }
  else ;
  
#line 460 
  i += 1;
  ldv_61651: 
#line 461 
  ;
  
#line 460 
  if ((int)adapter->priv_num > i) 
#line 462 
                                  goto ldv_61650; else 
#line 465 
                                                       goto ldv_61652;
  ldv_61652: 
#line 466 
  ;
  
#line 472 
  INIT_LIST_HEAD(& adapter->cmd_free_q);
  
#line 474 
  INIT_LIST_HEAD(& adapter->cmd_pending_q);
  
#line 476 
  INIT_LIST_HEAD(& adapter->scan_pending_q);
  
#line 478 
  spinlock_check(& adapter->cmd_free_q_lock);
  {
    struct lock_class_key __key_9;
    
#line 478 
    __raw_spin_lock_init(& adapter->cmd_free_q_lock.__anonCompField_spinlock_18.rlock,"&(&adapter->cmd_free_q_lock)->rlock",& __key_9);
  }
  
#line 479 
  spinlock_check(& adapter->cmd_pending_q_lock);
  {
    struct lock_class_key __key_10;
    
#line 479 
    __raw_spin_lock_init(& adapter->cmd_pending_q_lock.__anonCompField_spinlock_18.rlock,"&(&adapter->cmd_pending_q_lock)->rlock",& __key_10);
  }
  
#line 480 
  spinlock_check(& adapter->scan_pending_q_lock);
  {
    struct lock_class_key __key_11;
    
#line 480 
    __raw_spin_lock_init(& adapter->scan_pending_q_lock.__anonCompField_spinlock_18.rlock,"&(&adapter->scan_pending_q_lock)->rlock",& __key_11);
  }
  
#line 481 
  spinlock_check(& adapter->rx_proc_lock);
  {
    struct lock_class_key __key_12;
    
#line 481 
    __raw_spin_lock_init(& adapter->rx_proc_lock.__anonCompField_spinlock_18.rlock,"&(&adapter->rx_proc_lock)->rlock",& __key_12);
  }
  
#line 483 
  skb_queue_head_init(& adapter->rx_data_q);
  
#line 484 
  skb_queue_head_init(& adapter->tx_data_q);
  
#line 486 
  i = 0;
  
#line 486 
  goto ldv_61659;
  ldv_61658: 
#line 487 
  ;
  
#line 487 
  INIT_LIST_HEAD(& adapter->bss_prio_tbl[i].bss_prio_head);
  
#line 488 
  spinlock_check(& adapter->bss_prio_tbl[i].bss_prio_lock);
  {
    struct lock_class_key __key_13;
    
#line 488 
    __raw_spin_lock_init(& adapter->bss_prio_tbl[i].bss_prio_lock.__anonCompField_spinlock_18.rlock,"&(&adapter->bss_prio_tbl[i].bss_prio_lock)->rlock",& __key_13);
  }
  
#line 486 
  i += 1;
  ldv_61659: 
#line 487 
  ;
  
#line 486 
  if ((int)adapter->priv_num > i) 
#line 488 
                                  goto ldv_61658; else 
#line 491 
                                                       goto ldv_61660;
  ldv_61660: 
#line 492 
  ;
  
#line 491 
  i = 0;
  
#line 491 
  goto ldv_61669;
  ldv_61668: 
#line 492 
  ;
  
#line 492 
  if (adapter->priv[i] == (struct mwifiex_private *)0) 
#line 493 
                                                       goto ldv_61661; else ;
  
#line 494 
  priv = adapter->priv[i];
  
#line 495 
  j = 0;
  
#line 495 
  goto ldv_61663;
  ldv_61662: 
#line 496 
  ;
  
#line 496 
  INIT_LIST_HEAD(& priv->wmm.tid_tbl_ptr[j].ra_list);
  
#line 495 
  j += 1;
  ldv_61663: 
#line 496 
  ;
  
#line 495 
  if (j <= 7) 
#line 497 
              goto ldv_61662; else 
#line 500 
                                   goto ldv_61664;
  ldv_61664: 
#line 501 
  ;
  
#line 497 
  INIT_LIST_HEAD(& priv->tx_ba_stream_tbl_ptr);
  
#line 498 
  INIT_LIST_HEAD(& priv->rx_reorder_tbl_ptr);
  
#line 499 
  INIT_LIST_HEAD(& priv->sta_list);
  
#line 500 
  INIT_LIST_HEAD(& priv->auto_tdls_list);
  
#line 501 
  skb_queue_head_init(& priv->tdls_txq);
  
#line 503 
  spinlock_check(& priv->tx_ba_stream_tbl_lock);
  {
    struct lock_class_key __key_14;
    
#line 503 
    __raw_spin_lock_init(& priv->tx_ba_stream_tbl_lock.__anonCompField_spinlock_18.rlock,"&(&priv->tx_ba_stream_tbl_lock)->rlock",& __key_14);
  }
  
#line 504 
  spinlock_check(& priv->rx_reorder_tbl_lock);
  {
    struct lock_class_key __key_15;
    
#line 504 
    __raw_spin_lock_init(& priv->rx_reorder_tbl_lock.__anonCompField_spinlock_18.rlock,"&(&priv->rx_reorder_tbl_lock)->rlock",& __key_15);
  }
  
#line 506 
  spinlock_check(& priv->ack_status_lock);
  {
    struct lock_class_key __key_16;
    
#line 506 
    __raw_spin_lock_init(& priv->ack_status_lock.__anonCompField_spinlock_18.rlock,"&(&priv->ack_status_lock)->rlock",& __key_16);
  }
  
#line 507 
  idr_init(& priv->ack_status_frames);
  ldv_61661: 
#line 508 
  ;
  
#line 491 
  i += 1;
  ldv_61669: 
#line 492 
  ;
  
#line 491 
  if ((int)adapter->priv_num > i) 
#line 493 
                                  goto ldv_61668; else 
#line 496 
                                                       goto ldv_61670;
  ldv_61670: 
#line 497 
  ;
  
#line 510 
  __retres = 0;
  
#line 510 
  return __retres;
}


#line 524  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/init.c"
int mwifiex_init_fw(struct mwifiex_adapter *adapter)
{
  int __retres;
  int ret;
  struct mwifiex_private *priv;
  u8 i;
  int is_cmd_pend_q_empty;
  unsigned long flags;
  
#line 528 
  u8 first_sta = (unsigned char)1U;
  
#line 532 
  adapter->hw_status = MWIFIEX_HW_STATUS_INITIALIZING;
  
#line 535 
  ret = mwifiex_allocate_adapter(adapter);
  
#line 536 
  if (ret != 0) {
    
#line 537 
    __retres = -1;
    
#line 537 
    goto return_label;
  }
  else ;
  
#line 540 
  mwifiex_init_adapter(adapter);
  
#line 542 
  i = (unsigned char)0U;
  
#line 542 
  goto ldv_61681;
  ldv_61680: 
#line 543 
  ;
  
#line 543 
  if (adapter->priv[(int)i] != (struct mwifiex_private *)0) {
    
#line 544 
    priv = adapter->priv[(int)i];
    
#line 547 
    ret = mwifiex_init_priv(priv);
    
#line 548 
    if (ret != 0) {
      
#line 549 
      __retres = -1;
      
#line 549 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 542 
  i = (u8)((int)i + 1);
  ldv_61681: 
#line 543 
  ;
  
#line 542 
  if ((int)adapter->priv_num > (int)i) 
#line 544 
                                       goto ldv_61680; else 
#line 547 
                                                            goto ldv_61682;
  ldv_61682: 
#line 548 
  ;
  
#line 553 
  if (adapter->if_ops.init_fw_port != (int (*)(struct mwifiex_adapter *))0) {
    int tmp;
    
#line 554 
    tmp = (*(adapter->if_ops.init_fw_port))(adapter);
    
#line 554 
    if (tmp != 0) {
      
#line 555 
      __retres = -1;
      
#line 555 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 558 
  i = (unsigned char)0U;
  
#line 558 
  goto ldv_61684;
  ldv_61683: 
#line 559 
  ;
  
#line 559 
  if (adapter->priv[(int)i] != (struct mwifiex_private *)0) {
    
#line 560 
    ret = mwifiex_sta_init_cmd(adapter->priv[(int)i],(unsigned char)((int)first_sta),(_Bool)1);
    
#line 562 
    if (ret == -1) {
      
#line 563 
      __retres = -1;
      
#line 563 
      goto return_label;
    }
    else ;
    
#line 565 
    first_sta = (unsigned char)0U;
  }
  else ;
  
#line 558 
  i = (u8)((int)i + 1);
  ldv_61684: 
#line 559 
  ;
  
#line 558 
  if ((int)adapter->priv_num > (int)i) 
#line 560 
                                       goto ldv_61683; else 
#line 563 
                                                            goto ldv_61685;
  ldv_61685: 
#line 564 
  ;
  
#line 569 
  ldv___ldv_spin_lock_85_0(& adapter->cmd_pending_q_lock);
  
#line 570 
  is_cmd_pend_q_empty = list_empty((struct list_head const *)(& adapter->cmd_pending_q));
  
#line 571 
  ldv_spin_unlock_irqrestore_86_2(& adapter->cmd_pending_q_lock,flags);
  
#line 572 
  if (is_cmd_pend_q_empty == 0) {
    int tmp_0;
    
#line 574 
    tmp_0 = mwifiex_main_process(adapter);
    
#line 574 
    if (tmp_0 != -1) 
#line 575 
                     ret = -115; else ;
  }
  else 
#line 577 
       adapter->hw_status = MWIFIEX_HW_STATUS_READY;
  
#line 580 
  __retres = ret;
  return_label: 
#line 580 
                return __retres;
}


#line 589  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/init.c"
static void mwifiex_delete_bss_prio_tbl(struct mwifiex_private *priv)
{
  int i;
  struct mwifiex_bss_prio_node *bssprio_node;
  struct mwifiex_bss_prio_node *tmp_node;
  struct list_head *head;
  spinlock_t *lock;
  unsigned long flags;
  int tmp;
  struct mwifiex_bss_prio_node *tmp_0;
  struct mwifiex_bss_prio_node *tmp_1;
  struct mwifiex_bss_prio_node *tmp_2;
  
#line 592 
  struct mwifiex_adapter *adapter = priv->adapter;
  
#line 598 
  i = 0;
  
#line 598 
  goto ldv_61707;
  ldv_61706: 
#line 599 
  ;
  
#line 599 
  head = & adapter->bss_prio_tbl[i].bss_prio_head;
  
#line 600 
  lock = & adapter->bss_prio_tbl[i].bss_prio_lock;
  
#line 601 
  if ((adapter->debug_mask & 1073741824U) != 0U) {
    
#line 601 
    if (adapter->dev != (struct device *)0) 
#line 601 
                                            _dev_info((struct device const *)adapter->dev,"info: delete BSS priority table,\t",(int)priv->bss_type,(int)priv->bss_num,i,head); else ;
  }
  else ;
  
#line 608 
  ldv___ldv_spin_lock_87_1(lock);
  
#line 609 
  tmp = list_empty((struct list_head const *)head);
  
#line 609 
  if (tmp != 0) {
    
#line 610 
    ldv_spin_unlock_irqrestore_88_1(lock,flags);
    
#line 611 
    goto ldv_61696;
  }
  else ;
  {
    
#line 613 
    struct list_head const *__mptr = (struct list_head const *)head->next;
    
#line 613 
    tmp_0 = (struct mwifiex_bss_prio_node *)__mptr;
  }
  
#line 613 
  bssprio_node = tmp_0;
  {
    
#line 613 
    struct list_head const *__mptr_0 = (struct list_head const *)bssprio_node->list.next;
    
#line 613 
    tmp_1 = (struct mwifiex_bss_prio_node *)__mptr_0;
  }
  
#line 614 
  tmp_node = tmp_1;
  
#line 613 
  goto ldv_61704;
  ldv_61703: 
#line 614 
  ;
  
#line 615 
  if (bssprio_node->priv == priv) {
    
#line 616 
    if ((adapter->debug_mask & 1073741824U) != 0U) {
      
#line 616 
      if (adapter->dev != (struct device *)0) 
#line 616 
                                              _dev_info((struct device const *)adapter->dev,"info: Delete\t",bssprio_node,tmp_node); else ;
    }
    else ;
    
#line 620 
    list_del(& bssprio_node->list);
    
#line 621 
    kfree((void const *)bssprio_node);
  }
  else ;
  
#line 613 
  bssprio_node = tmp_node;
  {
    
#line 613 
    struct list_head const *__mptr_1 = (struct list_head const *)tmp_node->list.next;
    
#line 613 
    tmp_2 = (struct mwifiex_bss_prio_node *)__mptr_1;
  }
  
#line 613 
  tmp_node = tmp_2;
  ldv_61704: 
#line 615 
  ;
  
#line 613 
  if (& bssprio_node->list != head) 
#line 615 
                                    goto ldv_61703; else 
#line 618 
                                                         goto ldv_61705;
  ldv_61705: 
#line 619 
  ;
  
#line 624 
  ldv_spin_unlock_irqrestore_89_5(lock,flags);
  ldv_61696: 
#line 625 
  ;
  
#line 598 
  i += 1;
  ldv_61707: 
#line 599 
  ;
  
#line 598 
  if ((int)adapter->priv_num > i) 
#line 600 
                                  goto ldv_61706; else 
#line 603 
                                                       goto ldv_61708;
  ldv_61708: 
#line 604 
  ;
  
#line 605 
  return;
}


#line 633  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/init.c"
void mwifiex_free_priv(struct mwifiex_private *priv)
{
  
#line 635 
  mwifiex_clean_txrx(priv);
  
#line 636 
  mwifiex_delete_bss_prio_tbl(priv);
  
#line 637 
  mwifiex_free_curr_bcn(priv);
  
#line 638 
  return;
}


#line 652  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/init.c"
int mwifiex_shutdown_drv(struct mwifiex_adapter *adapter)
{
  int __retres;
  struct mwifiex_private *priv;
  s32 i;
  unsigned long flags;
  struct sk_buff *skb;
  
#line 654 
  int ret = -115;
  
#line 661 
  if (adapter->hw_status == (unsigned int)MWIFIEX_HW_STATUS_NOT_READY) {
    
#line 662 
    __retres = 0;
    
#line 662 
    goto return_label;
  }
  else ;
  
#line 664 
  adapter->hw_status = MWIFIEX_HW_STATUS_CLOSING;
  
#line 666 
  if (adapter->mwifiex_processing != 0U) {
    
#line 667 
    if ((adapter->debug_mask & 536870912U) != 0U) {
      
#line 667 
      if (adapter->dev != (struct device *)0) 
#line 667 
                                              _dev_info((struct device const *)adapter->dev,"main process is still running\n"); else ;
    }
    else ;
    
#line 669 
    __retres = ret;
    
#line 669 
    goto return_label;
  }
  else ;
  
#line 673 
  if (adapter->curr_cmd != (struct cmd_ctrl_node *)0) {
    
#line 674 
    if ((adapter->debug_mask & 536870912U) != 0U) {
      
#line 674 
      if (adapter->dev != (struct device *)0) 
#line 674 
                                              _dev_info((struct device const *)adapter->dev,"curr_cmd is still in processing\n"); else ;
    }
    else ;
    
#line 676 
    ldv_del_timer_sync_90_0(& adapter->cmd_timer);
    
#line 677 
    mwifiex_recycle_cmd_node(adapter,adapter->curr_cmd);
    
#line 678 
    adapter->curr_cmd = (struct cmd_ctrl_node *)0;
  }
  else ;
  
#line 682 
  if ((adapter->debug_mask & 1U) != 0U) {
    
#line 682 
    if (adapter->dev != (struct device *)0) 
#line 682 
                                            _dev_info((struct device const *)adapter->dev,"info: shutdown mwifiex...\n"); else ;
  }
  else ;
  
#line 686 
  i = 0;
  
#line 686 
  goto ldv_61721;
  ldv_61720: 
#line 687 
  ;
  
#line 687 
  if (adapter->priv[i] != (struct mwifiex_private *)0) {
    
#line 688 
    priv = adapter->priv[i];
    
#line 690 
    mwifiex_clean_auto_tdls(priv);
    
#line 691 
    mwifiex_abort_cac(priv);
    
#line 692 
    mwifiex_clean_txrx(priv);
    
#line 693 
    mwifiex_delete_bss_prio_tbl(priv);
  }
  else ;
  
#line 686 
  i += 1;
  ldv_61721: 
#line 687 
  ;
  
#line 686 
  if ((int)adapter->priv_num > i) 
#line 688 
                                  goto ldv_61720; else 
#line 691 
                                                       goto ldv_61722;
  ldv_61722: 
#line 692 
  ;
  
#line 697 
  atomic_set(& adapter->tx_queued,0);
  
#line 698 
  goto ldv_61724;
  ldv_61723: 
#line 699 
  ;
  
#line 699 
  mwifiex_write_data_complete(adapter,skb,0,0);
  ldv_61724: 
#line 700 
  ;
  
#line 698 
  skb = skb_dequeue(& adapter->tx_data_q);
  
#line 698 
  if (skb != (struct sk_buff *)0) 
#line 700 
                                  goto ldv_61723; else 
#line 703 
                                                       goto ldv_61725;
  ldv_61725: 
#line 704 
  ;
  
#line 701 
  ldv___ldv_spin_lock_91_1(& adapter->rx_proc_lock);
  
#line 703 
  goto ldv_61728;
  ldv_61727: 
#line 704 
  ;
  {
    
#line 704 
    struct mwifiex_rxinfo *rx_info = MWIFIEX_SKB_RXCB(skb);
    
#line 706 
    atomic_dec_6(& adapter->rx_pending);
    
#line 707 
    priv = adapter->priv[(int)rx_info->bss_num];
    
#line 708 
    if (priv != (struct mwifiex_private *)0) 
#line 709 
                                             priv->stats.rx_dropped += 1UL; else ;
    
#line 711 
    dev_kfree_skb_any(skb);
  }
  ldv_61728: 
#line 713 
  ;
  
#line 703 
  skb = skb_dequeue(& adapter->rx_data_q);
  
#line 703 
  if (skb != (struct sk_buff *)0) 
#line 705 
                                  goto ldv_61727; else 
#line 708 
                                                       goto ldv_61729;
  ldv_61729: 
#line 709 
  ;
  
#line 714 
  ldv_spin_unlock_irqrestore_92_1(& adapter->rx_proc_lock,flags);
  
#line 716 
  ldv_spin_lock_93(& adapter->mwifiex_lock);
  
#line 718 
  mwifiex_adapter_cleanup(adapter);
  
#line 720 
  ldv_spin_unlock_94(& adapter->mwifiex_lock);
  
#line 723 
  ret = mwifiex_shutdown_fw_complete(adapter);
  
#line 725 
  __retres = ret;
  return_label: 
#line 725 
                return __retres;
}


#line 740  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/init.c"
int mwifiex_dnld_fw(struct mwifiex_adapter *adapter, struct mwifiex_fw_image *pmfw)
{
  int __retres;
  int ret;
  
#line 744 
  u32 poll_num = 1U;
  
#line 746 
  if (adapter->if_ops.check_fw_status != (int (*)(struct mwifiex_adapter *, u32 ))0) {
    
#line 747 
    adapter->winner = 0;
    
#line 750 
    ret = (*(adapter->if_ops.check_fw_status))(adapter,poll_num);
    
#line 751 
    if (ret == 0) {
      
#line 752 
      if ((adapter->debug_mask & 1U) != 0U) {
        
#line 752 
        if (adapter->dev != (struct device *)0) 
#line 752 
                                                _dev_info((struct device const *)adapter->dev,"WLAN FW already running! Skip FW dnld\n"); else ;
      }
      else ;
      
#line 754 
      __retres = 0;
      
#line 754 
      goto return_label;
    }
    else ;
    
#line 757 
    poll_num = 100U;
    
#line 760 
    if (adapter->winner == 0) {
      
#line 761 
      if ((adapter->debug_mask & 1U) != 0U) {
        
#line 761 
        if (adapter->dev != (struct device *)0) 
#line 761 
                                                _dev_info((struct device const *)adapter->dev,"FW already running! Skip FW dnld\n"); else ;
      }
      else ;
      
#line 763 
      goto poll_fw;
    }
    else ;
  }
  else ;
  
#line 767 
  if (pmfw != (struct mwifiex_fw_image *)0) {
    
#line 769 
    ret = (*(adapter->if_ops.prog_fw))(adapter,pmfw);
    
#line 770 
    if (ret != 0) {
      
#line 771 
      if ((adapter->debug_mask & 4U) != 0U) {
        
#line 771 
        if (adapter->dev != (struct device *)0) 
#line 771 
                                                _dev_info((struct device const *)adapter->dev,"prog_fw failed ret=%#x\n",ret); else ;
      }
      else ;
      
#line 773 
      __retres = ret;
      
#line 773 
      goto return_label;
    }
    else ;
  }
  else ;
  poll_fw: 
#line 777 
  ;
  
#line 779 
  ret = (*(adapter->if_ops.check_fw_status))(adapter,poll_num);
  
#line 780 
  if (ret != 0) {
    
#line 781 
    if ((adapter->debug_mask & 4U) != 0U) {
      
#line 781 
      if (adapter->dev != (struct device *)0) 
#line 781 
                                              _dev_info((struct device const *)adapter->dev,"FW failed to be active in time\n"); else ;
    }
    else ;
  }
  else ;
  
#line 784 
  __retres = ret;
  return_label: 
#line 784 
                return __retres;
}


#line 127  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_init.c.aux"
static void atomic_dec_6(atomic_t *v)
{
  
#line 130 
  ldv_atomic_dec(v);
  
#line 131 
  return;
}


#line 436  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_init.c.aux"
static void *kzalloc_5(size_t size, gfp_t flags)
{
  void *tmp;
  
#line 439 
  tmp = ldv_kzalloc(size,flags);
  
#line 439 
  return tmp;
}


#line 791  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_init.c.aux"
static void ldv___ldv_spin_lock_78_6(spinlock_t *ldv_func_arg1)
{
  
#line 795 
  ldv_spin_model_lock((char *)"bss_prio_lock_of_mwifiex_bss_prio_tbl");
  
#line 797 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 798 
  return;
}


#line 801  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_init.c.aux"
static void ldv_spin_unlock_irqrestore_79_7(spinlock_t *lock, unsigned long flags)
{
  
#line 805 
  ldv_spin_model_unlock((char *)"bss_prio_lock_of_mwifiex_bss_prio_tbl");
  
#line 807 
  spin_unlock_irqrestore_9(lock,flags);
  
#line 808 
  return;
}


#line 811  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_init.c.aux"
static void ldv___ldv_spin_lock_80_4(spinlock_t *ldv_func_arg1)
{
  
#line 815 
  ldv_spin_model_lock((char *)"queue_lock_of_mwifiex_adapter");
  
#line 817 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 818 
  return;
}


#line 821  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_init.c.aux"
static void ldv_spin_unlock_irqrestore_81_5(spinlock_t *lock, unsigned long flags)
{
  
#line 825 
  ldv_spin_model_unlock((char *)"queue_lock_of_mwifiex_adapter");
  
#line 827 
  spin_unlock_irqrestore_9(lock,flags);
  
#line 828 
  return;
}


#line 831  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_init.c.aux"
static void ldv___ldv_spin_lock_82_5(spinlock_t *ldv_func_arg1)
{
  
#line 835 
  ldv_spin_model_lock((char *)"queue_lock_of_mwifiex_adapter");
  
#line 837 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 838 
  return;
}


#line 841  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_init.c.aux"
static void ldv_spin_unlock_irqrestore_83_6(spinlock_t *lock, unsigned long flags)
{
  
#line 845 
  ldv_spin_model_unlock((char *)"queue_lock_of_mwifiex_adapter");
  
#line 847 
  spin_unlock_irqrestore_9(lock,flags);
  
#line 848 
  return;
}


#line 851  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_init.c.aux"
static int ldv_del_timer_84(struct timer_list *ldv_func_arg1)
{
  int tmp;
  
#line 855 
  tmp = ldv_emg_del_timer(ldv_func_arg1);
  
#line 855 
  return tmp;
}


#line 859  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_init.c.aux"
static void ldv___ldv_spin_lock_85_0(spinlock_t *ldv_func_arg1)
{
  
#line 863 
  ldv_spin_model_lock((char *)"cmd_pending_q_lock_of_mwifiex_adapter");
  
#line 865 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 866 
  return;
}


#line 869  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_init.c.aux"
static void ldv_spin_unlock_irqrestore_86_2(spinlock_t *lock, unsigned long flags)
{
  
#line 873 
  ldv_spin_model_unlock((char *)"cmd_pending_q_lock_of_mwifiex_adapter");
  
#line 875 
  spin_unlock_irqrestore_9(lock,flags);
  
#line 876 
  return;
}


#line 879  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_init.c.aux"
static void ldv___ldv_spin_lock_87_1(spinlock_t *ldv_func_arg1)
{
  
#line 883 
  ldv_spin_model_lock((char *)"lock");
  
#line 885 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 886 
  return;
}


#line 889  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_init.c.aux"
static void ldv_spin_unlock_irqrestore_88_1(spinlock_t *lock, unsigned long flags)
{
  
#line 893 
  ldv_spin_model_unlock((char *)"lock");
  
#line 895 
  spin_unlock_irqrestore_9(lock,flags);
  
#line 896 
  return;
}


#line 899  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_init.c.aux"
static void ldv_spin_unlock_irqrestore_89_5(spinlock_t *lock, unsigned long flags)
{
  
#line 903 
  ldv_spin_model_unlock((char *)"lock");
  
#line 905 
  spin_unlock_irqrestore_9(lock,flags);
  
#line 906 
  return;
}


#line 909  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_init.c.aux"
static int ldv_del_timer_sync_90_0(struct timer_list *ldv_func_arg1)
{
  int tmp;
  
#line 913 
  tmp = ldv_emg_del_timer_sync(ldv_func_arg1);
  
#line 913 
  return tmp;
}


#line 917  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_init.c.aux"
static void ldv___ldv_spin_lock_91_1(spinlock_t *ldv_func_arg1)
{
  
#line 921 
  ldv_spin_model_lock((char *)"rx_proc_lock_of_mwifiex_adapter");
  
#line 923 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 924 
  return;
}


#line 927  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_init.c.aux"
static void ldv_spin_unlock_irqrestore_92_1(spinlock_t *lock, unsigned long flags)
{
  
#line 931 
  ldv_spin_model_unlock((char *)"rx_proc_lock_of_mwifiex_adapter");
  
#line 933 
  spin_unlock_irqrestore_9(lock,flags);
  
#line 934 
  return;
}


#line 937  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_init.c.aux"
static void ldv_spin_lock_93(spinlock_t *lock)
{
  
#line 941 
  ldv_spin_model_lock((char *)"mwifiex_lock_of_mwifiex_adapter");
  
#line 943 
  spin_lock(lock);
  
#line 944 
  return;
}


#line 947  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_init.c.aux"
static void ldv_spin_unlock_94(spinlock_t *lock)
{
  
#line 951 
  ldv_spin_model_unlock((char *)"mwifiex_lock_of_mwifiex_adapter");
  
#line 953 
  spin_unlock(lock);
  
#line 954 
  return;
}


#line 35  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_rx.c"
static bool mwifiex_discard_gratuitous_arp(struct mwifiex_private *priv, struct sk_buff *skb)
{
  bool __retres;
  struct mwifiex_arp_eth_header const *arp;
  struct ethhdr *eth;
  struct ipv6hdr *ipv6;
  struct icmp6hdr *icmpv6;
  int tmp_0;
  
#line 43 
  eth = (struct ethhdr *)skb->data;
  
#line 44 
  if (0 != 0) 
#line 44 
              tmp_0 = (int)((unsigned short)(((int)eth->h_proto << 8) | ((int)eth->h_proto >> 8)));
  else {
    __u16 tmp;
    
#line 44 
    tmp = __fswab16((unsigned short)((int)eth->h_proto));
    
#line 44 
    tmp_0 = (int)tmp;
  }
  
#line 44 
  switch (tmp_0) {
    case 2054: 
#line 45 
    ;
    
#line 46 
    arp = (struct mwifiex_arp_eth_header const *)(skb->data + 14U);
    
#line 47 
    if ((unsigned int)arp->hdr.ar_op == 512U || (unsigned int)arp->hdr.ar_op == 256U) {
      int tmp_1;
      
#line 49 
      tmp_1 = memcmp((void const *)(& arp->ar_sip),(void const *)(& arp->ar_tip),4UL);
      
#line 49 
      if (tmp_1 == 0) {
        
#line 50 
        __retres = (_Bool)1;
        
#line 50 
        goto return_label;
      }
      else ;
    }
    else ;
    
#line 52 
    goto ldv_61549;
    case 34525: 
#line 53 
    ;
    
#line 54 
    ipv6 = (struct ipv6hdr *)(skb->data + 14U);
    
#line 55 
    icmpv6 = (struct icmp6hdr *)(skb->data + 54U);
    
#line 57 
    if ((unsigned int)icmpv6->icmp6_type == 136U) {
      int tmp_2;
      
#line 58 
      tmp_2 = memcmp((void const *)(& ipv6->saddr),(void const *)(& ipv6->daddr),16UL);
      
#line 58 
      if (tmp_2 == 0) {
        
#line 60 
        __retres = (_Bool)1;
        
#line 60 
        goto return_label;
      }
      else ;
    }
    else ;
    
#line 62 
    goto ldv_61549;
    default: 
#line 63 
    ;
    
#line 64 
    goto ldv_61549;
  }
  ldv_61549: 
#line 67 
  ;
  
#line 67 
  __retres = (_Bool)0;
  return_label: 
#line 67 
                return __retres;
}


#line 83  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_rx.c"
int mwifiex_process_rx_packet(struct mwifiex_private *priv, struct sk_buff *skb)
{
  int __retres;
  int ret;
  struct rx_packet_hdr *rx_pkt_hdr;
  struct rxpd *local_rx_pd;
  int hdr_chop;
  struct ethhdr *eth;
  u16 rx_pkt_off;
  u16 rx_pkt_len;
  u8 *offset;
  int tmp;
  
#line 93 
  u8 adj_rx_rate = (unsigned char)0U;
  
#line 95 
  local_rx_pd = (struct rxpd *)skb->data;
  
#line 97 
  rx_pkt_off = local_rx_pd->rx_pkt_offset;
  
#line 98 
  rx_pkt_len = local_rx_pd->rx_pkt_length;
  
#line 99 
  rx_pkt_hdr = (struct rx_packet_hdr *)local_rx_pd + (int)rx_pkt_off;
  
#line 101 
  tmp = memcmp((void const *)(& rx_pkt_hdr->rfc1042_hdr),(void const *)(& bridge_tunnel_header),6UL);
  
#line 101 
  if (tmp == 0) 
#line 101 
                goto _LOR;
  else {
    int tmp_0;
    
#line 102 
    tmp_0 = memcmp((void const *)(& rx_pkt_hdr->rfc1042_hdr),(void const *)(& rfc1042_header),6UL);
    
#line 102 
    if (tmp_0 == 0) {
      int tmp_2;
      
#line 104 
      if (0 != 0) 
#line 104 
                  tmp_2 = (((int)rx_pkt_hdr->rfc1042_hdr.snap_type << 8) | ((int)rx_pkt_hdr->rfc1042_hdr.snap_type >> 8)) != -32525;
      else {
        __u16 tmp_1;
        
#line 105 
        tmp_1 = __fswab16((unsigned short)((int)rx_pkt_hdr->rfc1042_hdr.snap_type));
        
#line 104 
        tmp_2 = (unsigned int)tmp_1 != 33011U;
      }
      
#line 104 
      if (tmp_2) {
        int tmp_4;
        
#line 105 
        if (0 != 0) 
#line 105 
                    tmp_4 = (((int)rx_pkt_hdr->rfc1042_hdr.snap_type << 8) | ((int)rx_pkt_hdr->rfc1042_hdr.snap_type >> 8)) != -32457;
        else {
          __u16 tmp_3;
          
#line 106 
          tmp_3 = __fswab16((unsigned short)((int)rx_pkt_hdr->rfc1042_hdr.snap_type));
          
#line 105 
          tmp_4 = (unsigned int)tmp_3 != 33079U;
        }
        
#line 105 
        if (tmp_4) {
          _LOR: {
                  
#line 116 
                  eth = & rx_pkt_hdr->eth803_hdr + 8U;
                  
#line 124 
                  memcpy((void *)(& eth->h_source),(void const *)(& rx_pkt_hdr->eth803_hdr.h_source),6UL);
                  
#line 126 
                  memcpy((void *)(& eth->h_dest),(void const *)(& rx_pkt_hdr->eth803_hdr.h_dest),6UL);
                  
#line 131 
                  hdr_chop = (int)((long)eth - (long)local_rx_pd);
                }
        }
        else 
#line 134 
             hdr_chop = (int)((long)(& rx_pkt_hdr->eth803_hdr) - (long)local_rx_pd);
      }
      else 
#line 134 
           hdr_chop = (int)((long)(& rx_pkt_hdr->eth803_hdr) - (long)local_rx_pd);
    }
    else 
#line 134 
         hdr_chop = (int)((long)(& rx_pkt_hdr->eth803_hdr) - (long)local_rx_pd);
  }
  
#line 140 
  skb_pull(skb,(unsigned int)hdr_chop);
  
#line 142 
  if ((int)priv->hs2_enabled != 0) {
    bool tmp_5;
    
#line 142 
    tmp_5 = mwifiex_discard_gratuitous_arp(priv,skb);
    
#line 142 
    if ((int)tmp_5 != 0) {
      
#line 144 
      if (((priv->adapter)->debug_mask & 1073741824U) != 0U) {
        
#line 144 
        if ((priv->adapter)->dev != (struct device *)0) 
#line 144 
                                                        _dev_info((struct device const *)(priv->adapter)->dev,"Bypassed Gratuitous ARP\n"); else ;
      }
      else ;
      
#line 145 
      dev_kfree_skb_any(skb);
      
#line 146 
      __retres = 0;
      
#line 146 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 149 
  if (((unsigned long)(priv->adapter)->fw_cap_info & 16384UL) != 0UL) {
    int tmp_7;
    
#line 149 
    if (0 != 0) 
#line 149 
                tmp_7 = (((int)rx_pkt_hdr->eth803_hdr.h_proto << 8) | ((int)rx_pkt_hdr->eth803_hdr.h_proto >> 8)) == -30451;
    else {
      __u16 tmp_6;
      
#line 150 
      tmp_6 = __fswab16((unsigned short)((int)rx_pkt_hdr->eth803_hdr.h_proto));
      
#line 149 
      tmp_7 = (unsigned int)tmp_6 == 35085U;
    }
    
#line 149 
    if (tmp_7) {
      
#line 151 
      offset = (u8 *)local_rx_pd + (int)rx_pkt_off;
      
#line 152 
      mwifiex_process_tdls_action_frame(priv,offset,(int)rx_pkt_len);
    }
    else ;
  }
  else ;
  
#line 155 
  priv->rxpd_rate = local_rx_pd->rx_rate;
  
#line 157 
  priv->rxpd_htinfo = local_rx_pd->ht_info;
  
#line 161 
  adj_rx_rate = mwifiex_adjust_data_rate(priv,(unsigned char)((int)priv->rxpd_rate),(unsigned char)((int)priv->rxpd_htinfo));
  
#line 163 
  mwifiex_hist_data_add(priv,(unsigned char)((int)adj_rx_rate),(signed char)((int)local_rx_pd->snr),(signed char)((int)local_rx_pd->nf));
  
#line 167 
  ret = mwifiex_recv_packet(priv,skb);
  
#line 168 
  if (ret == -1) {
    
#line 169 
    if (((priv->adapter)->debug_mask & 4U) != 0U) {
      
#line 169 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 169 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"recv packet failed\n"); else ;
    }
    else ;
  }
  else ;
  
#line 172 
  __retres = ret;
  return_label: 
#line 172 
                return __retres;
}


#line 187  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_rx.c"
int mwifiex_process_sta_rx_packet(struct mwifiex_private *priv, struct sk_buff *skb)
{
  int __retres;
  struct rxpd *local_rx_pd;
  struct rx_packet_hdr *rx_pkt_hdr;
  u8 ta[6U];
  u16 rx_pkt_type;
  u16 rx_pkt_offset;
  u16 rx_pkt_length;
  u16 seq_num;
  struct mwifiex_sta_node *sta_ptr;
  u8 tmp_1;
  
#line 190 
  struct mwifiex_adapter *adapter = priv->adapter;
  
#line 191 
  int ret = 0;
  
#line 198 
  local_rx_pd = (struct rxpd *)skb->data;
  
#line 199 
  rx_pkt_type = local_rx_pd->rx_pkt_type;
  
#line 200 
  rx_pkt_offset = local_rx_pd->rx_pkt_offset;
  
#line 201 
  rx_pkt_length = local_rx_pd->rx_pkt_length;
  
#line 202 
  seq_num = local_rx_pd->seq_num;
  
#line 204 
  rx_pkt_hdr = (struct rx_packet_hdr *)local_rx_pd + (int)rx_pkt_offset;
  
#line 206 
  if ((int)rx_pkt_offset + (int)rx_pkt_length > (int)((unsigned short)skb->len)) {
    
#line 207 
    if ((adapter->debug_mask & 4U) != 0U) {
      
#line 207 
      if (adapter->dev != (struct device *)0) 
#line 207 
                                              _dev_info((struct device const *)adapter->dev,"wrong rx packet: len=%d, rx_pkt_offset=%d, rx_pkt_length=%d\n",skb->len,(int)rx_pkt_offset,(int)rx_pkt_length); else ;
    }
    else ;
    
#line 210 
    priv->stats.rx_dropped += 1UL;
    
#line 211 
    dev_kfree_skb_any(skb);
    
#line 212 
    __retres = ret;
    
#line 212 
    goto return_label;
  }
  else ;
  
#line 215 
  if ((unsigned int)rx_pkt_type == 229U) {
    
#line 216 
    ret = mwifiex_process_mgmt_packet(priv,skb);
    
#line 217 
    if (ret != 0) {
      
#line 218 
      if ((adapter->debug_mask & 4U) != 0U) {
        
#line 218 
        if (adapter->dev != (struct device *)0) 
#line 218 
                                                _dev_info((struct device const *)adapter->dev,"Rx of mgmt packet failed"); else ;
      }
      else ;
    }
    else ;
    
#line 219 
    dev_kfree_skb_any(skb);
    
#line 220 
    __retres = ret;
    
#line 220 
    goto return_label;
  }
  else ;
  
#line 227 
  if (((((int)(priv->adapter)->config_bands & 8) == 0 && ((int)(priv->adapter)->config_bands & 16) == 0) || priv->curr_bss_params.bss_descriptor.bcn_ht_cap == (struct ieee80211_ht_cap *)0) && (((unsigned long)(priv->adapter)->fw_cap_info & 16384UL) == 0UL || ((int)local_rx_pd->flags & 1) != 0)) 
    
#line 227 
    goto _LOR;
  else {
    int tmp_0;
    bool tmp;
    
#line 230 
    tmp = ether_addr_equal_unaligned((u8 const *)(& priv->curr_addr),(u8 const *)(& rx_pkt_hdr->eth803_hdr.h_dest));
    
#line 230 
    if (tmp) 
#line 230 
             tmp_0 = 0; else 
#line 230 
                             tmp_0 = 1;
    
#line 230 
    if (tmp_0) {
      _LOR: {
              
#line 231 
              mwifiex_process_rx_packet(priv,skb);
              
#line 232 
              __retres = ret;
              
#line 232 
              goto return_label;
            }
    }
    else ;
  }
  
#line 235 
  tmp_1 = mwifiex_queuing_ra_based(priv);
  
#line 235 
  if ((unsigned int)tmp_1 != 0U) 
#line 235 
                                 goto _LOR_0;
  else 
    
#line 235 
    if (((unsigned long)(priv->adapter)->fw_cap_info & 16384UL) != 0UL && ((int)local_rx_pd->flags & 1) != 0) {
      _LOR_0: {
                
#line 238 
                memcpy((void *)(& ta),(void const *)(& rx_pkt_hdr->eth803_hdr.h_source),6UL);
                
#line 239 
                if (((int)local_rx_pd->flags & 1) != 0 && (unsigned int)local_rx_pd->priority <= 7U) {
                  
#line 241 
                  sta_ptr = mwifiex_get_sta_entry(priv,(u8 const *)(& ta));
                  
#line 242 
                  if (sta_ptr != (struct mwifiex_sta_node *)0) 
#line 243 
                                                               sta_ptr->rx_seq[(int)local_rx_pd->priority] = local_rx_pd->seq_num; else ;
                  
#line 245 
                  mwifiex_auto_tdls_update_peer_signal(priv,(u8 *)(& ta),(signed char)((int)local_rx_pd->snr),(signed char)((int)local_rx_pd->nf));
                }
                else ;
              }
    }
    else {
      
#line 250 
      if ((unsigned int)rx_pkt_type != 231U) 
#line 251 
                                             priv->rx_seq[(int)local_rx_pd->priority] = seq_num; else ;
      
#line 252 
      memcpy((void *)(& ta),(void const *)(& priv->curr_bss_params.bss_descriptor.mac_address),6UL);
    }
  
#line 257 
  ret = mwifiex_11n_rx_reorder_pkt(priv,(unsigned short)((int)seq_num),(unsigned short)((int)local_rx_pd->priority),(u8 *)(& ta),(unsigned char)((int)((unsigned char)rx_pkt_type)),(void *)skb);
  
#line 260 
  if (ret != 0 || (unsigned int)rx_pkt_type == 231U) 
#line 261 
                                                     dev_kfree_skb_any(skb); else ;
  
#line 263 
  if (ret != 0) 
#line 264 
                priv->stats.rx_dropped += 1UL; else ;
  
#line 266 
  __retres = ret;
  return_label: 
#line 266 
                return __retres;
}


#line 405  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernel.h"
int snprintf(char *, size_t, char const * , ...);


#line 70  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/preempt.h"
__inline static void __preempt_count_add(int val)
{
  int tmp;
  
#line 72 
  if (0 != 0 && (val == 1 || val == -1)) 
#line 72 
                                         tmp = val; else 
#line 72 
                                                         tmp = 0;
  
#line 72 
  int const pao_ID__ = tmp;
  
#line 72 
  switch (4UL) {
    case (unsigned long)1: 
#line 72 
    ;
    
#line 72 
    if (pao_ID__ == 1) 
#line 74 
                       ldv_inline_asm();
    else 
      
#line 72 
      if (pao_ID__ == -1) 
#line 74 
                          ldv_inline_asm(); else 
#line 77 
                                                 ldv_inline_asm();
    
#line 72 
    goto ldv_6377;
    case (unsigned long)2: 
#line 72 
    ;
    
#line 72 
    if (pao_ID__ == 1) 
#line 74 
                       ldv_inline_asm();
    else 
      
#line 72 
      if (pao_ID__ == -1) 
#line 74 
                          ldv_inline_asm(); else 
#line 77 
                                                 ldv_inline_asm();
    
#line 72 
    goto ldv_6377;
    case (unsigned long)4: 
#line 72 
    ;
    
#line 72 
    if (pao_ID__ == 1) 
#line 74 
                       ldv_inline_asm();
    else 
      
#line 72 
      if (pao_ID__ == -1) 
#line 74 
                          ldv_inline_asm(); else 
#line 77 
                                                 ldv_inline_asm();
    
#line 72 
    goto ldv_6377;
    case (unsigned long)8: 
#line 72 
    ;
    
#line 72 
    if (pao_ID__ == 1) 
#line 74 
                       ldv_inline_asm();
    else 
      
#line 72 
      if (pao_ID__ == -1) 
#line 74 
                          ldv_inline_asm(); else 
#line 77 
                                                 ldv_inline_asm();
    
#line 72 
    goto ldv_6377;
    default: 
#line 72 
    ;
    
#line 72 
    __bad_percpu_size();
  }
  ldv_6377: 
#line 72 
  ;
  
#line 74 
  return;
}


#line 75  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/preempt.h"
__inline static void __preempt_count_sub(int val)
{
  int tmp;
  
#line 77 
  if (0 != 0 && (- val == 1 || - val == -1)) 
#line 77 
                                             tmp = - val; else 
#line 77 
                                                               tmp = 0;
  
#line 77 
  int const pao_ID__ = tmp;
  
#line 77 
  switch (4UL) {
    case (unsigned long)1: 
#line 77 
    ;
    
#line 77 
    if (pao_ID__ == 1) 
#line 79 
                       ldv_inline_asm();
    else 
      
#line 77 
      if (pao_ID__ == -1) 
#line 79 
                          ldv_inline_asm(); else 
#line 82 
                                                 ldv_inline_asm();
    
#line 77 
    goto ldv_6389;
    case (unsigned long)2: 
#line 77 
    ;
    
#line 77 
    if (pao_ID__ == 1) 
#line 79 
                       ldv_inline_asm();
    else 
      
#line 77 
      if (pao_ID__ == -1) 
#line 79 
                          ldv_inline_asm(); else 
#line 82 
                                                 ldv_inline_asm();
    
#line 77 
    goto ldv_6389;
    case (unsigned long)4: 
#line 77 
    ;
    
#line 77 
    if (pao_ID__ == 1) 
#line 79 
                       ldv_inline_asm();
    else 
      
#line 77 
      if (pao_ID__ == -1) 
#line 79 
                          ldv_inline_asm(); else 
#line 82 
                                                 ldv_inline_asm();
    
#line 77 
    goto ldv_6389;
    case (unsigned long)8: 
#line 77 
    ;
    
#line 77 
    if (pao_ID__ == 1) 
#line 79 
                       ldv_inline_asm();
    else 
      
#line 77 
      if (pao_ID__ == -1) 
#line 79 
                          ldv_inline_asm(); else 
#line 82 
                                                 ldv_inline_asm();
    
#line 77 
    goto ldv_6389;
    default: 
#line 77 
    ;
    
#line 77 
    __bad_percpu_size();
  }
  ldv_6389: 
#line 77 
  ;
  
#line 79 
  return;
}


#line 333  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockdep.h"
void lock_acquire(struct lockdep_map *, unsigned int, int, int, int, struct lockdep_map *, unsigned long);


#line 337 
void lock_release(struct lockdep_map *, int, unsigned long);


#line 545 
void lockdep_rcu_suspicious(char const *, int const, char const *);


#line 268  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rcupdate.h"
__inline static void __rcu_read_lock(void)
{
  
#line 270 
  __preempt_count_add(1);
  
#line 271 
  ldv_inline_asm();
  
#line 272 
  return;
}


#line 273  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rcupdate.h"
__inline static void __rcu_read_unlock(void)
{
  
#line 275 
  ldv_inline_asm();
  
#line 275 
  __preempt_count_sub(1);
  
#line 276 
  return;
}


#line 104  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rcutree.h"
bool rcu_is_watching(void);


#line 447  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rcupdate.h"
__inline static void rcu_lock_acquire(struct lockdep_map *map)
{
  __here_0: 
#line 449 
  ;
  
#line 449 
  ;
  
#line 449 
  lock_acquire(map,0U,0,2,0,(struct lockdep_map *)0,(unsigned long)((void *)0));
  
#line 451 
  return;
}


#line 452  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rcupdate.h"
__inline static void rcu_lock_release(struct lockdep_map *map)
{
  __here_0: 
#line 454 
  ;
  
#line 454 
  ;
  
#line 454 
  lock_release(map,1,(unsigned long)((void *)0));
  
#line 456 
  return;
}


#line 457 
extern struct lockdep_map rcu_lock_map;


#line 463 
int rcu_read_lock_held(void);


#line 843  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rcupdate.h"
__inline static void rcu_read_lock(void)
{
  
#line 845 
  __rcu_read_lock();
  
#line 847 
  rcu_lock_acquire(& rcu_lock_map);
  {
    bool __warned;
    int tmp;
    
#line 848 
    tmp = debug_lockdep_rcu_enabled();
    
#line 848 
    if (tmp != 0) {
      
#line 848 
      if (! __warned) {
        int tmp_1;
        bool tmp_0;
        
#line 848 
        tmp_0 = rcu_is_watching();
        
#line 848 
        if (tmp_0) 
#line 848 
                   tmp_1 = 0; else 
#line 848 
                                   tmp_1 = 1;
        
#line 848 
        if (tmp_1) {
          
#line 848 
          __warned = (_Bool)1;
          
#line 848 
          lockdep_rcu_suspicious("include/linux/rcupdate.h",849,"rcu_read_lock() used illegally while idle");
        }
        else ;
      }
      else ;
    }
    else ;
  }
  
#line 851 
  return;
}


#line 897  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rcupdate.h"
__inline static void rcu_read_unlock(void)
{
  {
    bool __warned;
    int tmp;
    
#line 899 
    tmp = debug_lockdep_rcu_enabled();
    
#line 899 
    if (tmp != 0) {
      
#line 899 
      if (! __warned) {
        int tmp_1;
        bool tmp_0;
        
#line 899 
        tmp_0 = rcu_is_watching();
        
#line 899 
        if (tmp_0) 
#line 899 
                   tmp_1 = 0; else 
#line 899 
                                   tmp_1 = 1;
        
#line 899 
        if (tmp_1) {
          
#line 899 
          __warned = (_Bool)1;
          
#line 899 
          lockdep_rcu_suspicious("include/linux/rcupdate.h",900,"rcu_read_unlock() used illegally while idle");
        }
        else ;
      }
      else ;
    }
    else ;
  }
  
#line 902 
  __rcu_read_unlock();
  
#line 903 
  rcu_lock_release(& rcu_lock_map);
  
#line 904 
  return;
}


#line 421  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
long schedule_timeout(long);


#line 581  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/slab.h"
static void *kzalloc_6(size_t size, gfp_t flags);


#line 1647  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/cfg80211.h"
u8 const *ieee80211_bss_get_ie(struct cfg80211_bss *, u8);


#line 1065  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.h"
int mwifiex_set_hs_params(struct mwifiex_private *priv, u16 action, int cmd_type, struct mwifiex_ds_hs_cfg *hs_cfg);


#line 1346 
int mwifiex_bss_start(struct mwifiex_private *priv, struct cfg80211_bss *bss, struct cfg80211_ssid *req_ssid);


#line 1348 
int mwifiex_cancel_hs(struct mwifiex_private *priv, int cmd_type);


#line 1349 
int mwifiex_enable_hs(struct mwifiex_adapter *adapter);


#line 1350 
int mwifiex_disable_auto_ds(struct mwifiex_private *priv);


#line 1351 
int mwifiex_drv_get_data_rate(struct mwifiex_private *priv, u32 *rate);


#line 1358 
int mwifiex_set_encode(struct mwifiex_private *priv, struct key_params *kp, u8 const *key, int key_len, u8 key_index, u8 const *mac_addr, int disable);


#line 1362 
int mwifiex_set_gen_ie(struct mwifiex_private *priv, u8 const *ie, int ie_len);


#line 1364 
int mwifiex_get_ver_ext(struct mwifiex_private *priv);


#line 1366 
int mwifiex_remain_on_chan_cfg(struct mwifiex_private *priv, u16 action, struct ieee80211_channel *chan, unsigned int duration);


#line 1370 
int mwifiex_get_stats_info(struct mwifiex_private *priv, struct mwifiex_ds_get_stats *log);


#line 1373 
int mwifiex_reg_write(struct mwifiex_private *priv, u32 reg_type, u32 reg_offset, u32 reg_value);


#line 1376 
int mwifiex_reg_read(struct mwifiex_private *priv, u32 reg_type, u32 reg_offset, u32 *value);


#line 1379 
int mwifiex_eeprom_read(struct mwifiex_private *priv, u16 offset, u16 bytes, u8 *value);


#line 1390 
int mwifiex_drv_set_power(struct mwifiex_private *priv, u32 *ps_mode);


#line 1395 
int mwifiex_set_tx_power(struct mwifiex_private *priv, struct mwifiex_power_cfg *power_cfg);


#line 1402 
int mwifiex_get_bss_info(struct mwifiex_private *priv, struct mwifiex_bss_info *info_0);


#line 1412 
u8 mwifiex_chan_type_to_sec_chan_offset(enum nl80211_channel_type chan_type);


#line 1448 
void mwifiex_dnld_txpwr_table(struct mwifiex_private *priv);


#line 29  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_ioctl.c"
static int disconnect_on_suspend;

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_ioctl.c"
int mwifiex_copy_mcast_addr(struct mwifiex_multicast_list *mlist, struct net_device *dev)
{
  struct netdev_hw_addr *ha;
  struct netdev_hw_addr *tmp;
  int tmp_0;
  struct netdev_hw_addr *tmp_1;
  
#line 42 
  int i = 0;
  {
    
#line 45 
    struct list_head const *__mptr = (struct list_head const *)dev->mc.list.next;
    
#line 45 
    tmp = (struct netdev_hw_addr *)__mptr;
  }
  
#line 45 
  ha = tmp;
  
#line 45 
  goto ldv_61492;
  ldv_61491: 
#line 46 
  ;
  
#line 46 
  ;
  
#line 46 
  tmp_0 = i;
  
#line 46 
  i += 1;
  
#line 46 
  ;
  
#line 46 
  memcpy((void *)(& mlist->mac_list[tmp_0]),(void const *)(& ha->addr),6UL);
  {
    
#line 45 
    struct list_head const *__mptr_0 = (struct list_head const *)ha->list.next;
    
#line 45 
    tmp_1 = (struct netdev_hw_addr *)__mptr_0;
  }
  
#line 45 
  ha = tmp_1;
  ldv_61492: 
#line 47 
  ;
  
#line 45 
  if (& ha->list != & dev->mc.list) 
#line 47 
                                    goto ldv_61491; else 
#line 50 
                                                         goto ldv_61493;
  ldv_61493: 
#line 51 
  ;
  
#line 48 
  return i;
}


#line 57  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_ioctl.c"
int mwifiex_wait_queue_complete(struct mwifiex_adapter *adapter, struct cmd_ctrl_node *cmd_queued)
{
  int __retres;
  int status;
  long tmp_3;
  {
    
#line 63 
    long __ret = 3000L;
    
#line 63 
    __might_sleep("/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_ioctl.c",65,0);
    {
      int tmp_2;
      {
        
#line 63 
        bool __cond_0 = (_Bool)((unsigned int)*(cmd_queued->condition) != 0U);
        
#line 63 
        if ((int)__cond_0 != 0 && __ret == 0L) 
#line 63 
                                               __ret = 1L; else ;
        
#line 63 
        tmp_2 = ((int)__cond_0 != 0 || __ret == 0L) != 0;
      }
      
#line 63 
      if (tmp_2 == 0) {
        long tmp_1;
        {
          wait_queue_t __wait;
          
#line 63 
          long __ret_0 = 3000L;
          
#line 63 
          INIT_LIST_HEAD(& __wait.task_list);
          
#line 63 
          __wait.flags = 0U;
          ldv_61509: 
#line 66 
          ;
          {
            int tmp_0;
            
#line 63 
            long __int = prepare_to_wait_event(& adapter->cmd_wait_q.wait,& __wait,1);
            {
              
#line 63 
              bool __cond = (_Bool)((unsigned int)*(cmd_queued->condition) != 0U);
              
#line 63 
              if ((int)__cond != 0 && __ret_0 == 0L) 
#line 63 
                                                     __ret_0 = 1L; else ;
              
#line 63 
              tmp_0 = ((int)__cond != 0 || __ret_0 == 0L) != 0;
            }
            
#line 63 
            if (tmp_0 != 0) 
#line 63 
                            goto ldv_61508; else ;
            
#line 63 
            if (__int != 0L) {
              
#line 63 
              __ret_0 = __int;
              
#line 63 
              goto ldv_61508;
            }
            else ;
            
#line 63 
            __ret_0 = schedule_timeout(__ret_0);
          }
          
#line 63 
          goto ldv_61509;
          ldv_61508: 
#line 64 
          ;
          
#line 63 
          finish_wait(& adapter->cmd_wait_q.wait,& __wait);
          __out_0: 
#line 63 
          ;
          
#line 63 
          tmp_1 = __ret_0;
        }
        
#line 63 
        __ret = tmp_1;
      }
      else ;
    }
    
#line 63 
    tmp_3 = __ret;
  }
  
#line 63 
  status = (int)tmp_3;
  
#line 66 
  if (status <= 0) {
    
#line 67 
    if (status == 0) 
#line 68 
                     status = -110; else ;
    
#line 69 
    if ((adapter->debug_mask & 4U) != 0U) {
      
#line 69 
      if (adapter->dev != (struct device *)0) 
#line 69 
                                              _dev_info((struct device const *)adapter->dev,"cmd_wait_q terminated: %d\n",status); else ;
    }
    else ;
    
#line 71 
    mwifiex_cancel_all_pending_cmd(adapter);
    
#line 72 
    __retres = status;
    
#line 72 
    goto return_label;
  }
  else ;
  
#line 75 
  status = adapter->cmd_wait_q.status;
  
#line 76 
  adapter->cmd_wait_q.status = 0;
  
#line 78 
  __retres = status;
  return_label: 
#line 78 
                return __retres;
}


#line 88  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_ioctl.c"
int mwifiex_request_set_multicast_list(struct mwifiex_private *priv, struct mwifiex_multicast_list *mcast_list)
{
  u16 old_pkt_filter;
  
#line 91 
  int ret = 0;
  
#line 94 
  old_pkt_filter = priv->curr_pkt_filter;
  
#line 96 
  if (mcast_list->mode == 1U) {
    
#line 97 
    if (((priv->adapter)->debug_mask & 1073741824U) != 0U) {
      
#line 97 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 97 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"info: Enable Promiscuous mode\n"); else ;
    }
    else ;
    
#line 99 
    priv->curr_pkt_filter = (unsigned short)((unsigned int)priv->curr_pkt_filter | 128U);
    
#line 100 
    priv->curr_pkt_filter = (unsigned short)((unsigned int)priv->curr_pkt_filter & 65279U);
  }
  else {
    
#line 104 
    priv->curr_pkt_filter = (unsigned short)((unsigned int)priv->curr_pkt_filter & 65407U);
    
#line 105 
    if (mcast_list->mode == 4U) {
      
#line 106 
      if (((priv->adapter)->debug_mask & 1073741824U) != 0U) {
        
#line 106 
        if ((priv->adapter)->dev != (struct device *)0) 
#line 106 
                                                        _dev_info((struct device const *)(priv->adapter)->dev,"info: Enabling All Multicast!\n"); else ;
      }
      else ;
      
#line 108 
      priv->curr_pkt_filter = (unsigned short)((unsigned int)priv->curr_pkt_filter | 256U);
    }
    else {
      
#line 111 
      priv->curr_pkt_filter = (unsigned short)((unsigned int)priv->curr_pkt_filter & 65279U);
      
#line 113 
      if (((priv->adapter)->debug_mask & 1073741824U) != 0U) {
        
#line 113 
        if ((priv->adapter)->dev != (struct device *)0) 
#line 113 
                                                        _dev_info((struct device const *)(priv->adapter)->dev,"info: Set multicast list=%d\n",mcast_list->num_multicast_addr); else ;
      }
      else ;
      
#line 117 
      ret = mwifiex_send_cmd(priv,(unsigned short)16,(unsigned short)1,0U,(void *)mcast_list,(_Bool)0);
    }
  }
  
#line 123 
  if (((priv->adapter)->debug_mask & 1073741824U) != 0U) {
    
#line 123 
    if ((priv->adapter)->dev != (struct device *)0) 
#line 123 
                                                    _dev_info((struct device const *)(priv->adapter)->dev,"info: old_pkt_filter=%#x, curr_pkt_filter=%#x\n",(int)old_pkt_filter,(int)priv->curr_pkt_filter); else ;
  }
  else ;
  
#line 126 
  if ((int)priv->curr_pkt_filter != (int)old_pkt_filter) 
#line 127 
                                                         ret = mwifiex_send_cmd(priv,(unsigned short)40,(unsigned short)1,0U,(void *)(& priv->curr_pkt_filter),(_Bool)0); else ;
  
#line 132 
  return ret;
}


#line 141  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_ioctl.c"
int mwifiex_fill_new_bss_desc(struct mwifiex_private *priv, struct cfg80211_bss *bss, struct mwifiex_bssdescriptor *bss_desc)
{
  int __retres;
  u8 *beacon_ie;
  size_t beacon_ie_len;
  struct cfg80211_bss_ies const *ies;
  struct cfg80211_bss_ies const *tmp_3;
  int tmp_5;
  
#line 147 
  struct mwifiex_bss_priv *bss_priv = (struct mwifiex_bss_priv *)(& bss->priv);
  
#line 150 
  rcu_read_lock();
  {
    struct cfg80211_bss_ies const *tmp_0;
    {
      struct cfg80211_bss_ies const *tmp;
      {
        union __anonunion___u_9104 __u;
        
#line 151 
        __read_once_size((void const volatile *)(& bss->ies),(void *)(& __u.__c),8);
        
#line 151 
        tmp = __u.__val;
      }
      
#line 151 
      struct cfg80211_bss_ies const *_________p1 = tmp;
      
#line 151 
      tmp_0 = _________p1;
    }
    
#line 151 
    struct cfg80211_bss_ies const *________p1 = tmp_0;
    {
      bool __warned;
      int tmp_1;
      
#line 151 
      tmp_1 = debug_lockdep_rcu_enabled();
      
#line 151 
      if (tmp_1 != 0) {
        
#line 151 
        if (! __warned) {
          int tmp_2;
          
#line 151 
          tmp_2 = rcu_read_lock_held();
          
#line 151 
          if (tmp_2 == 0) {
            
#line 151 
            __warned = (_Bool)1;
            
#line 151 
            lockdep_rcu_suspicious("/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_ioctl.c",151,"suspicious rcu_dereference_check() usage");
          }
          else ;
        }
        else ;
      }
      else ;
    }
    
#line 151 
    tmp_3 = ________p1;
  }
  
#line 151 
  ies = tmp_3;
  
#line 152 
  beacon_ie = (u8 *)kmemdup((void const *)(& ies->data),(unsigned long)ies->len,32U);
  
#line 153 
  beacon_ie_len = (unsigned long)ies->len;
  
#line 154 
  bss_desc->timestamp = ies->tsf;
  
#line 155 
  rcu_read_unlock();
  
#line 157 
  if (beacon_ie == (u8 *)0U) {
    
#line 158 
    if (((priv->adapter)->debug_mask & 4U) != 0U) {
      
#line 158 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 158 
                                                      _dev_info((struct device const *)(priv->adapter)->dev," failed to alloc beacon_ie\n"); else ;
    }
    else ;
    
#line 160 
    __retres = -12;
    
#line 160 
    goto return_label;
  }
  else ;
  
#line 163 
  memcpy((void *)(& bss_desc->mac_address),(void const *)(& bss->bssid),6UL);
  
#line 164 
  bss_desc->rssi = bss->signal;
  
#line 166 
  bss_desc->beacon_buf = beacon_ie;
  
#line 167 
  bss_desc->beacon_buf_size = (unsigned int)beacon_ie_len;
  
#line 168 
  bss_desc->beacon_period = bss->beacon_interval;
  
#line 169 
  bss_desc->cap_info_bitmap = bss->capability;
  
#line 170 
  bss_desc->bss_band = (unsigned short)bss_priv->band;
  
#line 171 
  bss_desc->fw_tsf = bss_priv->fw_tsf;
  
#line 172 
  if (((int)bss_desc->cap_info_bitmap & 16) != 0) {
    
#line 173 
    if (((priv->adapter)->debug_mask & 1073741824U) != 0U) {
      
#line 173 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 173 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"info: InterpretIE: AP WEP enabled\n"); else ;
    }
    else ;
    
#line 175 
    bss_desc->privacy = 1U;
  }
  else 
#line 177 
       bss_desc->privacy = 0U;
  
#line 179 
  if (((int)bss_desc->cap_info_bitmap & 2) != 0) 
#line 180 
                                                 bss_desc->bss_mode = 1U; else 
                                                                    
#line 182 
                                                                    bss_desc->bss_mode = 2U;
  
#line 187 
  bss_desc->disable_11ac = (unsigned char)1U;
  
#line 189 
  if (((int)bss_desc->cap_info_bitmap & 256) != 0) 
#line 190 
                                                   bss_desc->sensed_11h = (unsigned char)1U; else ;
  
#line 192 
  tmp_5 = mwifiex_update_bss_desc_with_ie(priv->adapter,bss_desc);
  
#line 192 
  __retres = tmp_5;
  return_label: 
#line 192 
                return __retres;
}


#line 195  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_ioctl.c"
void mwifiex_dnld_txpwr_table(struct mwifiex_private *priv)
{
  
#line 197 
  if ((priv->adapter)->dt_node != (struct device_node *)0) {
    
#line 198 
    char txpwr[22U] = {(char)'m', (char)'a', (char)'r', (char)'v', (char)'e', (char)'l', (char)'l', (char)',', (char)'0', (char)'0', (char)'_', (char)'t', (char)'x', (char)'p', (char)'w', (char)'r', (char)'l', (char)'i', (char)'m', (char)'i', (char)'t', (char)'\000'};
    
#line 200 
    memcpy((void *)(& txpwr[8]),(void const *)(& (priv->adapter)->country_code),2UL);
    
#line 201 
    mwifiex_dnld_dt_cfgdata(priv,(priv->adapter)->dt_node,(char const *)(& txpwr));
  }
  else ;
  
#line 203 
  return;
}


#line 205  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_ioctl.c"
static int mwifiex_process_country_ie(struct mwifiex_private *priv, struct cfg80211_bss *bss)
{
  int __retres;
  u8 const *country_ie;
  u8 country_ie_len;
  int tmp;
  int tmp_0;
  
#line 210 
  struct mwifiex_802_11d_domain_reg *domain_info = & (priv->adapter)->domain_reg;
  
#line 213 
  rcu_read_lock();
  
#line 214 
  country_ie = ieee80211_bss_get_ie(bss,(unsigned char)7);
  
#line 215 
  if (country_ie == (u8 const *)0U) {
    
#line 216 
    rcu_read_unlock();
    
#line 217 
    __retres = 0;
    
#line 217 
    goto return_label;
  }
  else ;
  
#line 220 
  country_ie_len = *(country_ie + 1U);
  
#line 221 
  if ((unsigned int)country_ie_len <= 5U) {
    
#line 222 
    rcu_read_unlock();
    
#line 223 
    __retres = 0;
    
#line 223 
    goto return_label;
  }
  else ;
  
#line 226 
  tmp = strncmp((char const *)(& (priv->adapter)->country_code),(char const *)(country_ie + 2U),2UL);
  
#line 226 
  if (tmp == 0) {
    
#line 227 
    rcu_read_unlock();
    
#line 228 
    if (((priv->adapter)->debug_mask & 1073741824U) != 0U) {
      
#line 228 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 228 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"11D: skip setting domain info in FW\n"); else ;
    }
    else ;
    
#line 230 
    __retres = 0;
    
#line 230 
    goto return_label;
  }
  else ;
  
#line 232 
  memcpy((void *)(& (priv->adapter)->country_code),(void const *)(country_ie + 2U),2UL);
  
#line 234 
  domain_info->country_code[0] = *(country_ie + 2U);
  
#line 235 
  domain_info->country_code[1] = *(country_ie + 3U);
  
#line 236 
  domain_info->country_code[2] = (unsigned char)32U;
  
#line 238 
  country_ie_len = (unsigned char)((unsigned int)country_ie_len + 253U);
  
#line 240 
  domain_info->no_of_triplet = (unsigned char)((unsigned int)country_ie_len / 3U);
  
#line 243 
  memcpy((void *)(& domain_info->triplet),(void const *)(country_ie + 5U),(unsigned long)country_ie_len);
  
#line 246 
  rcu_read_unlock();
  
#line 248 
  tmp_0 = mwifiex_send_cmd(priv,(unsigned short)91,(unsigned short)1,0U,(void *)0,(_Bool)0);
  
#line 248 
  if (tmp_0 != 0) {
    
#line 250 
    if (((priv->adapter)->debug_mask & 4U) != 0U) {
      
#line 250 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 250 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"11D: setting domain info in FW fail\n"); else ;
    }
    else ;
    
#line 252 
    __retres = -1;
    
#line 252 
    goto return_label;
  }
  else ;
  
#line 255 
  mwifiex_dnld_txpwr_table(priv);
  
#line 257 
  __retres = 0;
  return_label: 
#line 257 
                return __retres;
}


#line 265  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_ioctl.c"
int mwifiex_bss_start(struct mwifiex_private *priv, struct cfg80211_bss *bss, struct cfg80211_ssid *req_ssid)
{
  int __retres;
  int ret;
  
#line 269 
  struct mwifiex_adapter *adapter = priv->adapter;
  
#line 270 
  struct mwifiex_bssdescriptor *bss_desc = (struct mwifiex_bssdescriptor *)0;
  
#line 272 
  priv->scan_block = (unsigned char)0U;
  
#line 274 
  if (bss != (struct cfg80211_bss *)0) {
    
#line 275 
    mwifiex_process_country_ie(priv,bss);
    
#line 278 
    bss_desc = (struct mwifiex_bssdescriptor *)kzalloc_6(336UL,208U);
    
#line 280 
    if (bss_desc == (struct mwifiex_bssdescriptor *)0) {
      
#line 281 
      __retres = -12;
      
#line 281 
      goto return_label;
    }
    else ;
    
#line 283 
    ret = mwifiex_fill_new_bss_desc(priv,bss,bss_desc);
    
#line 284 
    if (ret != 0) 
#line 285 
                  goto done; else ;
  }
  else ;
  
#line 288 
  if (priv->bss_mode == 2U || priv->bss_mode == 8U) {
    u8 config_bands;
    u8 tmp_0;
    u8 tmp_1;
    bool tmp_2;
    
#line 292 
    if (bss_desc == (struct mwifiex_bssdescriptor *)0) {
      
#line 293 
      __retres = -1;
      
#line 293 
      goto return_label;
    }
    else ;
    
#line 295 
    tmp_0 = mwifiex_band_to_radio_type((unsigned char)((int)((unsigned char)bss_desc->bss_band)));
    
#line 295 
    if ((unsigned int)tmp_0 == 0U) 
#line 297 
                                   config_bands = (unsigned char)11U;
    else {
      
#line 299 
      config_bands = (unsigned char)20U;
      
#line 300 
      if (((int)adapter->fw_bands & 32) != 0) 
#line 301 
                                              config_bands = (unsigned char)((unsigned int)config_bands | 32U); else ;
    }
    
#line 304 
    if ((((int)adapter->fw_bands | (int)config_bands) & ~ ((int)adapter->fw_bands)) == 0) 
      
#line 305 
      adapter->config_bands = config_bands; else ;
    
#line 307 
    ret = mwifiex_check_network_compatibility(priv,bss_desc);
    
#line 308 
    if (ret != 0) 
#line 309 
                  goto done; else ;
    
#line 311 
    tmp_1 = mwifiex_11h_get_csa_closed_channel(priv);
    
#line 311 
    ;
    
#line 311 
    if ((int)tmp_1 == (int)((unsigned char)bss_desc->channel)) {
      
#line 313 
      if ((adapter->debug_mask & 4U) != 0U) {
        
#line 313 
        if (adapter->dev != (struct device *)0) 
#line 313 
                                                _dev_info((struct device const *)adapter->dev,"Attempt to reconnect on csa closed chan(%d)\n",bss_desc->channel); else ;
      }
      else ;
      
#line 316 
      goto done;
    }
    else ;
    
#line 319 
    if ((adapter->debug_mask & 1073741824U) != 0U) {
      
#line 319 
      if (adapter->dev != (struct device *)0) 
#line 319 
                                              _dev_info((struct device const *)adapter->dev,"info: SSID found in scan list ...\t"); else ;
    }
    else ;
    
#line 323 
    mwifiex_stop_net_dev_queue(priv->netdev,adapter);
    
#line 324 
    tmp_2 = netif_carrier_ok((struct net_device const *)priv->netdev);
    
#line 324 
    if ((int)tmp_2 != 0) 
#line 325 
                         netif_carrier_off(priv->netdev); else ;
    
#line 329 
    priv->assoc_rsp_size = 0U;
    
#line 330 
    ret = mwifiex_associate(priv,bss_desc);
    
#line 334 
    if ((ret == 13 && (unsigned int)priv->sec_info.is_authtype_auto != 0U) && (unsigned int)priv->sec_info.wep_enabled != 0U) {
      
#line 337 
      priv->sec_info.authentication_mode = 1U;
      
#line 339 
      ret = mwifiex_associate(priv,bss_desc);
    }
    else ;
    
#line 342 
    if (bss != (struct cfg80211_bss *)0) 
#line 343 
                                         cfg80211_put_bss((priv->adapter)->wiphy,bss); else ;
  }
  else {
    bool tmp_4;
    
#line 347 
    if (bss_desc != (struct mwifiex_bssdescriptor *)0 && (unsigned int)bss_desc->ssid.ssid_len != 0U) {
      s32 tmp_3;
      
#line 347 
      tmp_3 = mwifiex_ssid_cmp(& priv->curr_bss_params.bss_descriptor.ssid,& bss_desc->ssid);
      
#line 347 
      if (tmp_3 == 0) {
        
#line 350 
        ret = 0;
        
#line 351 
        goto done;
      }
      else ;
    }
    else ;
    
#line 354 
    priv->adhoc_is_link_sensed = (unsigned char)0U;
    
#line 356 
    ret = mwifiex_check_network_compatibility(priv,bss_desc);
    
#line 358 
    mwifiex_stop_net_dev_queue(priv->netdev,adapter);
    
#line 359 
    tmp_4 = netif_carrier_ok((struct net_device const *)priv->netdev);
    
#line 359 
    if ((int)tmp_4 != 0) 
#line 360 
                         netif_carrier_off(priv->netdev); else ;
    
#line 362 
    if (ret == 0) {
      
#line 363 
      if ((adapter->debug_mask & 1073741824U) != 0U) {
        
#line 363 
        if (adapter->dev != (struct device *)0) 
#line 363 
                                                _dev_info((struct device const *)adapter->dev,"info: network found in scan\t"); else ;
      }
      else ;
      
#line 366 
      ret = mwifiex_adhoc_join(priv,bss_desc);
      
#line 367 
      if (bss != (struct cfg80211_bss *)0) 
#line 368 
                                           cfg80211_put_bss((priv->adapter)->wiphy,bss); else ;
    }
    else {
      
#line 370 
      if ((adapter->debug_mask & 1073741824U) != 0U) {
        
#line 370 
        if (adapter->dev != (struct device *)0) 
#line 370 
                                                _dev_info((struct device const *)adapter->dev,"info: Network not found in\t",(u8 *)(& req_ssid->ssid)); else ;
      }
      else ;
      
#line 374 
      ret = mwifiex_adhoc_start(priv,req_ssid);
    }
  }
  done: 
#line 378 
  ;
  
#line 382 
  if (bss_desc != (struct mwifiex_bssdescriptor *)0) 
#line 383 
                                                     kfree((void const *)bss_desc->beacon_buf); else ;
  
#line 384 
  kfree((void const *)bss_desc);
  
#line 385 
  __retres = ret;
  return_label: 
#line 385 
                return __retres;
}


#line 394  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_ioctl.c"
int mwifiex_set_hs_params(struct mwifiex_private *priv, u16 action, int cmd_type, struct mwifiex_ds_hs_cfg *hs_cfg)
{
  int __retres;
  
#line 398 
  struct mwifiex_adapter *adapter = priv->adapter;
  
#line 399 
  int status = 0;
  
#line 400 
  u32 prev_cond = 0U;
  
#line 402 
  if (hs_cfg == (struct mwifiex_ds_hs_cfg *)0) {
    
#line 403 
    __retres = -12;
    
#line 403 
    goto return_label;
  }
  else ;
  
#line 405 
  switch ((int)action) {
    case 1: 
#line 406 
    ;
    
#line 407 
    if ((unsigned int)adapter->pps_uapsd_mode != 0U) {
      
#line 408 
      if ((adapter->debug_mask & 1073741824U) != 0U) {
        
#line 408 
        if (adapter->dev != (struct device *)0) 
#line 408 
                                                _dev_info((struct device const *)adapter->dev,"info: Host Sleep IOCTL\t"); else ;
      }
      else ;
      
#line 411 
      status = -1;
      
#line 412 
      goto ldv_61568;
    }
    else ;
    
#line 414 
    if (hs_cfg->is_invoke_hostcmd != 0U) {
      
#line 415 
      if (hs_cfg->conditions == 4294967295U) {
        
#line 416 
        if ((unsigned int)adapter->is_hs_configured == 0U) 
#line 418 
                                                           goto ldv_61568; else ;
        
#line 420 
        prev_cond = adapter->hs_cfg.conditions;
        
#line 422 
        adapter->hs_cfg.conditions = hs_cfg->conditions;
      }
      else 
        
#line 424 
        if (hs_cfg->conditions != 0U) {
          
#line 425 
          adapter->hs_cfg.conditions = hs_cfg->conditions;
          
#line 427 
          adapter->hs_cfg.gpio = (unsigned char)hs_cfg->gpio;
          
#line 428 
          if (hs_cfg->gap != 0U) 
#line 429 
                                 adapter->hs_cfg.gap = (unsigned char)hs_cfg->gap; else ;
        }
        else 
          
#line 430 
          if (adapter->hs_cfg.conditions == 4294967295U) {
            
#line 434 
            status = -1;
            
#line 435 
            goto ldv_61568;
          }
          else ;
      
#line 438 
      status = mwifiex_send_cmd(priv,(unsigned short)229,(unsigned short)1,0U,(void *)(& adapter->hs_cfg),(_Bool)(cmd_type == 1));
      
#line 444 
      if (hs_cfg->conditions == 4294967295U) 
#line 446 
                                             adapter->hs_cfg.conditions = prev_cond; else ;
    }
    else {
      
#line 449 
      adapter->hs_cfg.conditions = hs_cfg->conditions;
      
#line 451 
      adapter->hs_cfg.gpio = (unsigned char)hs_cfg->gpio;
      
#line 452 
      adapter->hs_cfg.gap = (unsigned char)hs_cfg->gap;
    }
    
#line 454 
    goto ldv_61568;
    case 0: 
#line 455 
    ;
    
#line 456 
    hs_cfg->conditions = adapter->hs_cfg.conditions;
    
#line 457 
    hs_cfg->gpio = (unsigned int)adapter->hs_cfg.gpio;
    
#line 458 
    hs_cfg->gap = (unsigned int)adapter->hs_cfg.gap;
    
#line 459 
    goto ldv_61568;
    default: 
#line 460 
    ;
    
#line 461 
    status = -1;
    
#line 462 
    goto ldv_61568;
  }
  ldv_61568: 
#line 465 
  ;
  
#line 465 
  __retres = status;
  return_label: 
#line 465 
                return __retres;
}


#line 474  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_ioctl.c"
int mwifiex_cancel_hs(struct mwifiex_private *priv, int cmd_type)
{
  struct mwifiex_ds_hs_cfg hscfg;
  int tmp;
  
#line 478 
  hscfg.conditions = 4294967295U;
  
#line 479 
  hscfg.is_invoke_hostcmd = 1U;
  
#line 481 
  tmp = mwifiex_set_hs_params(priv,(unsigned short)1,cmd_type,& hscfg);
  
#line 481 
  return tmp;
}


#line 484  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_ioctl.c"
static char const __kstrtab_mwifiex_cancel_hs[18U] = {(char)'m', (char)'w', (char)'i', (char)'f', (char)'i', (char)'e', (char)'x', (char)'_', (char)'c', (char)'a', (char)'n', (char)'c', (char)'e', (char)'l', (char)'_', (char)'h', (char)'s', (char)'\000'};

#line 484 
struct kernel_symbol const __ksymtab_mwifiex_cancel_hs;


#line 484  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_ioctl.c"
struct kernel_symbol const __ksymtab_mwifiex_cancel_hs = {.value = (unsigned long)(& mwifiex_cancel_hs), .name = (char const *)(& __kstrtab_mwifiex_cancel_hs)};

#line 492  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_ioctl.c"
int mwifiex_enable_hs(struct mwifiex_adapter *adapter)
{
  int __retres;
  struct mwifiex_ds_hs_cfg hscfg;
  struct mwifiex_private *priv;
  int i;
  int tmp_0;
  struct mwifiex_private *tmp;
  long tmp_5;
  
#line 498 
  if (disconnect_on_suspend != 0) {
    
#line 499 
    i = 0;
    
#line 499 
    goto ldv_61591;
    ldv_61590: 
#line 500 
    ;
    
#line 500 
    priv = adapter->priv[i];
    
#line 501 
    if (priv != (struct mwifiex_private *)0) 
#line 502 
                                             mwifiex_deauthenticate(priv,(u8 *)0U); else ;
    
#line 499 
    i += 1;
    ldv_61591: 
#line 500 
    ;
    
#line 499 
    if ((int)adapter->priv_num > i) 
#line 501 
                                    goto ldv_61590; else 
#line 504 
                                                         goto ldv_61592;
    ldv_61592: 
#line 505 
    ;
  }
  else ;
  
#line 506 
  if ((unsigned int)adapter->hs_activated != 0U) {
    
#line 507 
    if ((adapter->debug_mask & 16U) != 0U) {
      
#line 507 
      if (adapter->dev != (struct device *)0) 
#line 507 
                                              _dev_info((struct device const *)adapter->dev,"cmd: HS Already activated\n"); else ;
    }
    else ;
    
#line 509 
    __retres = 1;
    
#line 509 
    goto return_label;
  }
  else ;
  
#line 512 
  adapter->hs_activate_wait_q_woken = (unsigned short)0U;
  
#line 514 
  memset((void *)(& hscfg),0,16UL);
  
#line 515 
  hscfg.is_invoke_hostcmd = 1U;
  
#line 517 
  adapter->hs_enabling = (_Bool)1;
  
#line 518 
  mwifiex_cancel_all_pending_cmd(adapter);
  
#line 520 
  tmp = mwifiex_get_priv_1(adapter,(enum mwifiex_bss_role)MWIFIEX_BSS_ROLE_STA);
  
#line 520 
  tmp_0 = mwifiex_set_hs_params(tmp,(unsigned short)1,1,& hscfg);
  
#line 520 
  if (tmp_0 != 0) {
    
#line 524 
    if ((adapter->debug_mask & 4U) != 0U) {
      
#line 524 
      if (adapter->dev != (struct device *)0) 
#line 524 
                                              _dev_info((struct device const *)adapter->dev,"IOCTL request HS enable failed\n"); else ;
    }
    else ;
    
#line 526 
    __retres = 0;
    
#line 526 
    goto return_label;
  }
  else ;
  {
    
#line 529 
    long __ret = 2500L;
    
#line 529 
    __might_sleep("/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_ioctl.c",531,0);
    {
      int tmp_4;
      {
        
#line 529 
        bool __cond_0 = (_Bool)((unsigned int)adapter->hs_activate_wait_q_woken != 0U);
        
#line 529 
        if ((int)__cond_0 != 0 && __ret == 0L) 
#line 529 
                                               __ret = 1L; else ;
        
#line 529 
        tmp_4 = ((int)__cond_0 != 0 || __ret == 0L) != 0;
      }
      
#line 529 
      if (tmp_4 == 0) {
        long tmp_3;
        {
          wait_queue_t __wait;
          
#line 529 
          long __ret_0 = 2500L;
          
#line 529 
          INIT_LIST_HEAD(& __wait.task_list);
          
#line 529 
          __wait.flags = 0U;
          ldv_61603: 
#line 532 
          ;
          {
            int tmp_2;
            
#line 529 
            long __int = prepare_to_wait_event(& adapter->hs_activate_wait_q,& __wait,1);
            {
              
#line 529 
              bool __cond = (_Bool)((unsigned int)adapter->hs_activate_wait_q_woken != 0U);
              
#line 529 
              if ((int)__cond != 0 && __ret_0 == 0L) 
#line 529 
                                                     __ret_0 = 1L; else ;
              
#line 529 
              tmp_2 = ((int)__cond != 0 || __ret_0 == 0L) != 0;
            }
            
#line 529 
            if (tmp_2 != 0) 
#line 529 
                            goto ldv_61602; else ;
            
#line 529 
            if (__int != 0L) {
              
#line 529 
              __ret_0 = __int;
              
#line 529 
              goto ldv_61602;
            }
            else ;
            
#line 529 
            __ret_0 = schedule_timeout(__ret_0);
          }
          
#line 529 
          goto ldv_61603;
          ldv_61602: 
#line 530 
          ;
          
#line 529 
          finish_wait(& adapter->hs_activate_wait_q,& __wait);
          __out_0: 
#line 529 
          ;
          
#line 529 
          tmp_3 = __ret_0;
        }
        
#line 529 
        __ret = tmp_3;
      }
      else ;
    }
    
#line 529 
    tmp_5 = __ret;
  }
  
#line 529 
  if (tmp_5 <= 0L) {
    
#line 532 
    if ((adapter->debug_mask & 4U) != 0U) {
      
#line 532 
      if (adapter->dev != (struct device *)0) 
#line 532 
                                              _dev_info((struct device const *)adapter->dev,"hs_activate_wait_q terminated\n"); else ;
    }
    else ;
    
#line 534 
    __retres = 0;
    
#line 534 
    goto return_label;
  }
  else ;
  
#line 537 
  __retres = 1;
  return_label: 
#line 537 
                return __retres;
}


#line 539  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_ioctl.c"
static char const __kstrtab_mwifiex_enable_hs[18U] = {(char)'m', (char)'w', (char)'i', (char)'f', (char)'i', (char)'e', (char)'x', (char)'_', (char)'e', (char)'n', (char)'a', (char)'b', (char)'l', (char)'e', (char)'_', (char)'h', (char)'s', (char)'\000'};

#line 539 
struct kernel_symbol const __ksymtab_mwifiex_enable_hs;


#line 539  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_ioctl.c"
struct kernel_symbol const __ksymtab_mwifiex_enable_hs = {.value = (unsigned long)(& mwifiex_enable_hs), .name = (char const *)(& __kstrtab_mwifiex_enable_hs)};

#line 547  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_ioctl.c"
int mwifiex_get_bss_info(struct mwifiex_private *priv, struct mwifiex_bss_info *info_0)
{
  int __retres;
  struct mwifiex_bssdescriptor *bss_desc;
  
#line 550 
  struct mwifiex_adapter *adapter = priv->adapter;
  
#line 553 
  if (info_0 == (struct mwifiex_bss_info *)0) {
    
#line 554 
    __retres = -1;
    
#line 554 
    goto return_label;
  }
  else ;
  
#line 556 
  bss_desc = & priv->curr_bss_params.bss_descriptor;
  
#line 558 
  info_0->bss_mode = priv->bss_mode;
  
#line 560 
  memcpy((void *)(& info_0->ssid),(void const *)(& bss_desc->ssid),33UL);
  
#line 562 
  memcpy((void *)(& info_0->bssid),(void const *)(& bss_desc->mac_address),6UL);
  
#line 564 
  info_0->bss_chan = bss_desc->channel;
  
#line 566 
  memcpy((void *)(& info_0->country_code),(void const *)(& adapter->country_code),3UL);
  
#line 569 
  info_0->media_connected = (unsigned int)priv->media_connected;
  
#line 571 
  info_0->max_power_level = (unsigned int)priv->max_tx_power_level;
  
#line 572 
  info_0->min_power_level = (unsigned int)priv->min_tx_power_level;
  
#line 574 
  info_0->adhoc_state = (unsigned int)priv->adhoc_state;
  
#line 576 
  info_0->bcn_nf_last = (int)priv->bcn_nf_last;
  
#line 578 
  if ((unsigned int)priv->sec_info.wep_enabled != 0U) 
#line 579 
                                                      info_0->wep_status = 1U; else 
                                                                    
#line 581 
                                                                    info_0->wep_status = 0U;
  
#line 583 
  info_0->is_hs_configured = (unsigned int)adapter->is_hs_configured;
  
#line 584 
  info_0->is_deep_sleep = (unsigned int)adapter->is_deep_sleep;
  
#line 586 
  __retres = 0;
  return_label: 
#line 586 
                return __retres;
}


#line 592  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_ioctl.c"
int mwifiex_disable_auto_ds(struct mwifiex_private *priv)
{
  struct mwifiex_ds_auto_ds auto_ds;
  int tmp;
  
#line 596 
  auto_ds.auto_ds = (unsigned short)0U;
  
#line 598 
  tmp = mwifiex_send_cmd(priv,(unsigned short)228,(unsigned short)254,1U,(void *)(& auto_ds),(_Bool)1);
  
#line 598 
  return tmp;
}


#line 601  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_ioctl.c"
static char const __kstrtab_mwifiex_disable_auto_ds[24U] = {(char)'m', (char)'w', (char)'i', (char)'f', (char)'i', (char)'e', (char)'x', (char)'_', (char)'d', (char)'i', (char)'s', (char)'a', (char)'b', (char)'l', (char)'e', (char)'_', (char)'a', (char)'u', (char)'t', (char)'o', (char)'_', (char)'d', (char)'s', (char)'\000'};

#line 601 
struct kernel_symbol const __ksymtab_mwifiex_disable_auto_ds;


#line 601  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_ioctl.c"
struct kernel_symbol const __ksymtab_mwifiex_disable_auto_ds = {.value = (unsigned long)(& mwifiex_disable_auto_ds), .name = (char const *)(& __kstrtab_mwifiex_disable_auto_ds)};

#line 609  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_ioctl.c"
int mwifiex_drv_get_data_rate(struct mwifiex_private *priv, u32 *rate)
{
  int ret;
  
#line 613 
  ret = mwifiex_send_cmd(priv,(unsigned short)127,(unsigned short)0,0U,(void *)0,(_Bool)1);
  
#line 616 
  if (ret == 0) 
    
#line 617 
    if ((unsigned int)priv->is_data_rate_auto != 0U) 
#line 618 
                                                     *rate = mwifiex_index_to_data_rate(priv,(unsigned char)((int)priv->tx_rate),(unsigned char)((int)priv->tx_htinfo)); else 
                                                                    
#line 621 
                                                                    *rate = priv->data_rate;
  else ;
  
#line 624 
  return ret;
}


#line 639  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_ioctl.c"
int mwifiex_set_tx_power(struct mwifiex_private *priv, struct mwifiex_power_cfg *power_cfg)
{
  int __retres;
  int ret;
  struct host_cmd_ds_txpwr_cfg *txp_cfg;
  struct mwifiex_types_power_group *pg_tlv;
  struct mwifiex_power_group *pg;
  u8 *buf;
  
#line 647 
  u16 dbm = (unsigned short)0U;
  
#line 649 
  if (power_cfg->is_power_auto == 0U) {
    
#line 650 
    dbm = (unsigned short)power_cfg->power_level;
    
#line 651 
    if ((int)((unsigned short)priv->min_tx_power_level) > (int)dbm || (int)((unsigned short)priv->max_tx_power_level) < (int)dbm) {
      
#line 653 
      if (((priv->adapter)->debug_mask & 4U) != 0U) {
        
#line 653 
        if ((priv->adapter)->dev != (struct device *)0) 
#line 653 
                                                        _dev_info((struct device const *)(priv->adapter)->dev,"txpower value %d dBm\t",(int)dbm,(int)priv->min_tx_power_level,(int)priv->max_tx_power_level); else ;
      }
      else ;
      
#line 658 
      __retres = -1;
      
#line 658 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 661 
  buf = (u8 *)kzalloc_6(2048UL,208U);
  
#line 662 
  if (buf == (u8 *)0U) {
    
#line 663 
    __retres = -12;
    
#line 663 
    goto return_label;
  }
  else ;
  
#line 665 
  txp_cfg = (struct host_cmd_ds_txpwr_cfg *)buf;
  
#line 666 
  txp_cfg->action = (unsigned short)1U;
  
#line 667 
  if (power_cfg->is_power_auto == 0U) {
    
#line 668 
    txp_cfg->mode = 1U;
    
#line 669 
    pg_tlv = (struct mwifiex_types_power_group *)(buf + 8U);
    
#line 671 
    pg_tlv->type = (unsigned short)340U;
    
#line 672 
    pg_tlv->length = (unsigned short)32U;
    
#line 674 
    pg = (struct mwifiex_power_group *)(buf + 12U);
    
#line 678 
    pg->first_rate_code = (unsigned char)0U;
    
#line 679 
    pg->last_rate_code = (unsigned char)3U;
    
#line 680 
    pg->modulation_class = (unsigned char)3U;
    
#line 681 
    pg->power_step = (signed char)0;
    
#line 682 
    pg->power_min = (signed char)dbm;
    
#line 683 
    pg->power_max = (signed char)dbm;
    
#line 684 
    pg += 1;
    
#line 686 
    pg->first_rate_code = (unsigned char)0U;
    
#line 687 
    pg->last_rate_code = (unsigned char)7U;
    
#line 688 
    pg->modulation_class = (unsigned char)7U;
    
#line 689 
    pg->power_step = (signed char)0;
    
#line 690 
    pg->power_min = (signed char)dbm;
    
#line 691 
    pg->power_max = (signed char)dbm;
    
#line 692 
    pg += 1;
    
#line 694 
    pg->first_rate_code = (unsigned char)0U;
    
#line 695 
    pg->last_rate_code = (unsigned char)32U;
    
#line 696 
    pg->modulation_class = (unsigned char)8U;
    
#line 697 
    pg->power_step = (signed char)0;
    
#line 698 
    pg->power_min = (signed char)dbm;
    
#line 699 
    pg->power_max = (signed char)dbm;
    
#line 700 
    pg->ht_bandwidth = (unsigned char)0U;
    
#line 701 
    pg += 1;
    
#line 703 
    pg->first_rate_code = (unsigned char)0U;
    
#line 704 
    pg->last_rate_code = (unsigned char)32U;
    
#line 705 
    pg->modulation_class = (unsigned char)8U;
    
#line 706 
    pg->power_step = (signed char)0;
    
#line 707 
    pg->power_min = (signed char)dbm;
    
#line 708 
    pg->power_max = (signed char)dbm;
    
#line 709 
    pg->ht_bandwidth = (unsigned char)1U;
  }
  else ;
  
#line 711 
  ret = mwifiex_send_cmd(priv,(unsigned short)209,(unsigned short)1,0U,(void *)buf,(_Bool)1);
  
#line 714 
  kfree((void const *)buf);
  
#line 715 
  __retres = ret;
  return_label: 
#line 715 
                return __retres;
}


#line 724  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_ioctl.c"
int mwifiex_drv_set_power(struct mwifiex_private *priv, u32 *ps_mode)
{
  int ret;
  u16 sub_cmd;
  
#line 727 
  struct mwifiex_adapter *adapter = priv->adapter;
  
#line 730 
  if (*ps_mode != 0U) 
#line 731 
                      adapter->ps_mode = (unsigned short)1U; else 
#line 733 
                                                                  adapter->ps_mode = (unsigned short)0U;
  
#line 734 
  if (*ps_mode != 0U) 
#line 734 
                      sub_cmd = (unsigned short)255U; else 
#line 734 
                                                           sub_cmd = (unsigned short)254U;
  
#line 735 
  ret = mwifiex_send_cmd(priv,(unsigned short)228,(unsigned short)((int)sub_cmd),16U,(void *)0,(_Bool)1);
  
#line 737 
  if (ret == 0 && (unsigned int)sub_cmd == 254U) 
#line 738 
                                                 ret = mwifiex_send_cmd(priv,(unsigned short)228,(unsigned short)0,0U,(void *)0,(_Bool)0); else ;
  
#line 741 
  return ret;
}


#line 751  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_ioctl.c"
static int mwifiex_set_wpa_ie_helper(struct mwifiex_private *priv, u8 *ie_data_ptr, u16 ie_len)
{
  int __retres;
  
#line 754 
  if ((unsigned int)ie_len != 0U) {
    
#line 755 
    if ((unsigned int)ie_len > 256U) {
      
#line 756 
      if (((priv->adapter)->debug_mask & 4U) != 0U) {
        
#line 756 
        if ((priv->adapter)->dev != (struct device *)0) 
#line 756 
                                                        _dev_info((struct device const *)(priv->adapter)->dev,"failed to copy WPA IE, too big\n"); else ;
      }
      else ;
      
#line 758 
      __retres = -1;
      
#line 758 
      goto return_label;
    }
    else ;
    
#line 760 
    memcpy((void *)(& priv->wpa_ie),(void const *)ie_data_ptr,(unsigned long)ie_len);
    
#line 761 
    priv->wpa_ie_len = (unsigned char)ie_len;
    
#line 762 
    if (((priv->adapter)->debug_mask & 16U) != 0U) {
      
#line 762 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 762 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"cmd: Set Wpa_ie_len=%d IE=%#x\n",(int)priv->wpa_ie_len,(int)priv->wpa_ie[0]); else ;
    }
    else ;
    
#line 766 
    if ((unsigned int)priv->wpa_ie[0] == 221U) 
#line 767 
                                               priv->sec_info.wpa_enabled = (unsigned char)1U;
    else 
      
#line 768 
      if ((unsigned int)priv->wpa_ie[0] == 48U) 
#line 769 
                                                priv->sec_info.wpa2_enabled = (unsigned char)1U;
      else {
        
#line 771 
        priv->sec_info.wpa_enabled = (unsigned char)0U;
        
#line 772 
        priv->sec_info.wpa2_enabled = (unsigned char)0U;
      }
  }
  else {
    
#line 775 
    memset((void *)(& priv->wpa_ie),0,256UL);
    
#line 776 
    priv->wpa_ie_len = (unsigned char)0U;
    
#line 777 
    if (((priv->adapter)->debug_mask & 1073741824U) != 0U) {
      
#line 777 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 777 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"info: reset wpa_ie_len=%d IE=%#x\n",(int)priv->wpa_ie_len,(int)priv->wpa_ie[0]); else ;
    }
    else ;
    
#line 780 
    priv->sec_info.wpa_enabled = (unsigned char)0U;
    
#line 781 
    priv->sec_info.wpa2_enabled = (unsigned char)0U;
  }
  
#line 784 
  __retres = 0;
  return_label: 
#line 784 
                return __retres;
}


#line 794  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_ioctl.c"
static int mwifiex_set_wapi_ie(struct mwifiex_private *priv, u8 *ie_data_ptr, u16 ie_len)
{
  int __retres;
  
#line 797 
  if ((unsigned int)ie_len != 0U) {
    
#line 798 
    if ((unsigned int)ie_len > 256U) {
      
#line 799 
      if (((priv->adapter)->debug_mask & 4U) != 0U) {
        
#line 799 
        if ((priv->adapter)->dev != (struct device *)0) 
#line 799 
                                                        _dev_info((struct device const *)(priv->adapter)->dev,"info: failed to copy WAPI IE, too big\n"); else ;
      }
      else ;
      
#line 801 
      __retres = -1;
      
#line 801 
      goto return_label;
    }
    else ;
    
#line 803 
    memcpy((void *)(& priv->wapi_ie),(void const *)ie_data_ptr,(unsigned long)ie_len);
    
#line 804 
    priv->wapi_ie_len = (unsigned char)ie_len;
    
#line 805 
    if (((priv->adapter)->debug_mask & 16U) != 0U) {
      
#line 805 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 805 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"cmd: Set wapi_ie_len=%d IE=%#x\n",(int)priv->wapi_ie_len,(int)priv->wapi_ie[0]); else ;
    }
    else ;
    
#line 809 
    if ((unsigned int)priv->wapi_ie[0] == 68U) 
#line 810 
                                               priv->sec_info.wapi_enabled = (unsigned char)1U; else ;
  }
  else {
    
#line 812 
    memset((void *)(& priv->wapi_ie),0,256UL);
    
#line 813 
    priv->wapi_ie_len = (unsigned char)ie_len;
    
#line 814 
    if (((priv->adapter)->debug_mask & 1073741824U) != 0U) {
      
#line 814 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 814 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"info: Reset wapi_ie_len=%d IE=%#x\n",(int)priv->wapi_ie_len,(int)priv->wapi_ie[0]); else ;
    }
    else ;
    
#line 817 
    priv->sec_info.wapi_enabled = (unsigned char)0U;
  }
  
#line 819 
  __retres = 0;
  return_label: 
#line 819 
                return __retres;
}


#line 829  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_ioctl.c"
static int mwifiex_set_wps_ie(struct mwifiex_private *priv, u8 *ie_data_ptr, u16 ie_len)
{
  int __retres;
  
#line 832 
  if ((unsigned int)ie_len != 0U) {
    
#line 833 
    if ((unsigned int)ie_len > 256U) {
      
#line 834 
      if (((priv->adapter)->debug_mask & 4U) != 0U) {
        
#line 834 
        if ((priv->adapter)->dev != (struct device *)0) 
#line 834 
                                                        _dev_info((struct device const *)(priv->adapter)->dev,"info: failed to copy WPS IE, too big\n"); else ;
      }
      else ;
      
#line 836 
      __retres = -1;
      
#line 836 
      goto return_label;
    }
    else ;
    
#line 839 
    priv->wps_ie = (u8 *)kzalloc_6(256UL,208U);
    
#line 840 
    if (priv->wps_ie == (u8 *)0U) {
      
#line 841 
      __retres = -12;
      
#line 841 
      goto return_label;
    }
    else ;
    
#line 843 
    memcpy((void *)priv->wps_ie,(void const *)ie_data_ptr,(unsigned long)ie_len);
    
#line 844 
    priv->wps_ie_len = (unsigned char)ie_len;
    
#line 845 
    if (((priv->adapter)->debug_mask & 16U) != 0U) {
      
#line 845 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 845 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"cmd: Set wps_ie_len=%d IE=%#x\n",(int)priv->wps_ie_len,(int)*(priv->wps_ie)); else ;
    }
    else ;
  }
  else {
    
#line 849 
    kfree((void const *)priv->wps_ie);
    
#line 850 
    priv->wps_ie_len = (unsigned char)ie_len;
    
#line 851 
    if (((priv->adapter)->debug_mask & 1073741824U) != 0U) {
      
#line 851 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 851 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"info: Reset wps_ie_len=%d\n",(int)priv->wps_ie_len); else ;
    }
    else ;
  }
  
#line 854 
  __retres = 0;
  return_label: 
#line 854 
                return __retres;
}


#line 863  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_ioctl.c"
static int mwifiex_sec_ioctl_set_wapi_key(struct mwifiex_private *priv, struct mwifiex_ds_encrypt_key *encrypt_key)
{
  int tmp;
  
#line 867 
  tmp = mwifiex_send_cmd(priv,(unsigned short)94,(unsigned short)1,1U,(void *)encrypt_key,(_Bool)1);
  
#line 867 
  return tmp;
}


#line 878  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_ioctl.c"
static int mwifiex_sec_ioctl_set_wep_key(struct mwifiex_private *priv, struct mwifiex_ds_encrypt_key *encrypt_key)
{
  int __retres;
  int ret;
  struct mwifiex_wep_key *wep_key;
  int index;
  
#line 881 
  struct mwifiex_adapter *adapter = priv->adapter;
  
#line 886 
  if ((unsigned int)priv->wep_key_curr_index > 3U) 
#line 887 
                                                   priv->wep_key_curr_index = (unsigned short)0U; else ;
  
#line 888 
  wep_key = & priv->wep_key[(int)priv->wep_key_curr_index];
  
#line 889 
  index = (int)encrypt_key->key_index;
  
#line 890 
  if (encrypt_key->key_disable != 0U) 
#line 891 
                                      priv->sec_info.wep_enabled = (unsigned char)0U;
  else 
    
#line 892 
    if (encrypt_key->key_len == 0U) {
      
#line 894 
      wep_key = & priv->wep_key[index];
      
#line 895 
      if (wep_key->key_length == 0U) {
        
#line 896 
        if ((adapter->debug_mask & 4U) != 0U) {
          
#line 896 
          if (adapter->dev != (struct device *)0) 
#line 896 
                                                  _dev_info((struct device const *)adapter->dev,"key not set, so cannot enable it\n"); else ;
        }
        else ;
        
#line 898 
        __retres = -1;
        
#line 898 
        goto return_label;
      }
      else ;
      
#line 901 
      if ((unsigned int)adapter->key_api_major_ver == 2U) {
        
#line 902 
        memcpy((void *)(& encrypt_key->key_material),(void const *)(& wep_key->key_material),(unsigned long)wep_key->key_length);
        
#line 904 
        encrypt_key->key_len = wep_key->key_length;
      }
      else ;
      
#line 907 
      priv->wep_key_curr_index = (unsigned short)index;
      
#line 908 
      priv->sec_info.wep_enabled = (unsigned char)1U;
    }
    else {
      
#line 910 
      wep_key = & priv->wep_key[index];
      
#line 911 
      memset((void *)wep_key,0,28UL);
      
#line 913 
      memcpy((void *)(& wep_key->key_material),(void const *)(& encrypt_key->key_material),(unsigned long)encrypt_key->key_len);
      
#line 916 
      wep_key->key_index = (unsigned int)index;
      
#line 917 
      wep_key->key_length = encrypt_key->key_len;
      
#line 918 
      priv->sec_info.wep_enabled = (unsigned char)1U;
    }
  
#line 920 
  if (wep_key->key_length != 0U) {
    void *enc_key;
    
#line 923 
    if (encrypt_key->key_disable != 0U) {
      
#line 924 
      memset((void *)(& priv->wep_key[index]),0,28UL);
      
#line 926 
      if (wep_key->key_length != 0U) 
#line 927 
                                     goto done; else ;
    }
    else ;
    
#line 930 
    if ((unsigned int)adapter->key_api_major_ver == 2U) 
#line 931 
                                                        enc_key = (void *)encrypt_key; else 
                                                                    
#line 933 
                                                                    enc_key = (void *)0;
    
#line 936 
    ret = mwifiex_send_cmd(priv,(unsigned short)94,(unsigned short)1,0U,enc_key,(_Bool)0);
    
#line 938 
    if (ret != 0) {
      
#line 939 
      __retres = ret;
      
#line 939 
      goto return_label;
    }
    else ;
  }
  else ;
  done: 
#line 942 
  ;
  
#line 943 
  if ((unsigned int)priv->sec_info.wep_enabled != 0U) 
#line 944 
                                                      priv->curr_pkt_filter = (unsigned short)((unsigned int)priv->curr_pkt_filter | 8U); else 
                                                                    
#line 946 
                                                                    priv->curr_pkt_filter = (unsigned short)((unsigned int)priv->curr_pkt_filter & 65527U);
  
#line 948 
  ret = mwifiex_send_cmd(priv,(unsigned short)40,(unsigned short)1,0U,(void *)(& priv->curr_pkt_filter),(_Bool)1);
  
#line 952 
  __retres = ret;
  return_label: 
#line 952 
                return __retres;
}


#line 965  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_ioctl.c"
static int mwifiex_sec_ioctl_set_wpa_key(struct mwifiex_private *priv, struct mwifiex_ds_encrypt_key *encrypt_key)
{
  int __retres;
  int ret;
  struct host_cmd_ds_802_11_key_material *ibss_key;
  
#line 969 
  u8 remove_key = (unsigned char)0U;
  
#line 973 
  if (encrypt_key->key_len > 32U) {
    
#line 974 
    if (((priv->adapter)->debug_mask & 4U) != 0U) {
      
#line 974 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 974 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"key length too long\n"); else ;
    }
    else ;
    
#line 976 
    __retres = -1;
    
#line 976 
    goto return_label;
  }
  else ;
  
#line 979 
  if (priv->bss_mode == 1U) {
    
#line 985 
    encrypt_key->key_index = 1073741824U;
    
#line 986 
    ret = mwifiex_send_cmd(priv,(unsigned short)94,(unsigned short)1,1U,(void *)encrypt_key,(_Bool)0);
    
#line 989 
    if (ret != 0) {
      
#line 990 
      __retres = ret;
      
#line 990 
      goto return_label;
    }
    else ;
    
#line 992 
    ibss_key = & priv->aes_key;
    
#line 993 
    memset((void *)ibss_key,0,62UL);
    
#line 996 
    memcpy((void *)(& ibss_key->key_param_set.key),(void const *)(& encrypt_key->key_material),(unsigned long)encrypt_key->key_len);
    
#line 998 
    memcpy((void *)(& ibss_key->key_param_set.key_len),(void const *)(& encrypt_key->key_len),2UL);
    
#line 1001 
    ibss_key->key_param_set.key_type_id = (unsigned short)1U;
    
#line 1002 
    ibss_key->key_param_set.key_info = (unsigned short)4U;
    
#line 1005 
    encrypt_key->key_index = 3221225471U;
  }
  else ;
  
#line 1008 
  if (encrypt_key->key_index == 0U) 
#line 1009 
                                    encrypt_key->key_index = 1073741824U; else ;
  
#line 1011 
  if ((unsigned int)remove_key != 0U) 
#line 1012 
                                      ret = mwifiex_send_cmd(priv,(unsigned short)94,(unsigned short)1,0U,(void *)encrypt_key,(_Bool)1); else 
                                                                    
#line 1016 
                                                                    ret = mwifiex_send_cmd(priv,(unsigned short)94,(unsigned short)1,1U,(void *)encrypt_key,(_Bool)1);
  
#line 1020 
  __retres = ret;
  return_label: 
#line 1020 
                return __retres;
}


#line 1030  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_ioctl.c"
static int mwifiex_sec_ioctl_encrypt_key(struct mwifiex_private *priv, struct mwifiex_ds_encrypt_key *encrypt_key)
{
  int status;
  
#line 1035 
  if (encrypt_key->is_wapi_key != 0U) 
#line 1036 
                                      status = mwifiex_sec_ioctl_set_wapi_key(priv,encrypt_key);
  else 
    
#line 1037 
    if (encrypt_key->key_len > 13U) 
#line 1038 
                                    status = mwifiex_sec_ioctl_set_wpa_key(priv,encrypt_key); else 
                                                                    
#line 1040 
                                                                    status = mwifiex_sec_ioctl_set_wep_key(priv,encrypt_key);
  
#line 1041 
  return status;
}


#line 1048  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_ioctl.c"
int mwifiex_drv_get_driver_version(struct mwifiex_adapter *adapter, char *version, int max_len)
{
  int __retres;
  union __anonunion_ver_9106 ver;
  char fw_ver[32U];
  
#line 1057 
  ver.l = adapter->fw_release_number;
  
#line 1058 
  sprintf((char *)(& fw_ver),"%u.%u.%u.p%u",(int)ver.c[2],(int)ver.c[1],(int)ver.c[0],(int)ver.c[3]);
  
#line 1060 
  snprintf(version,(unsigned long)max_len,(char const *)(& driver_version),(char *)(& fw_ver));
  
#line 1062 
  if ((adapter->debug_mask & 1U) != 0U) {
    
#line 1062 
    if (adapter->dev != (struct device *)0) 
#line 1062 
                                            _dev_info((struct device const *)adapter->dev,"info: MWIFIEX VERSION: %s\n",version); else ;
  }
  else ;
  
#line 1064 
  __retres = 0;
  
#line 1064 
  return __retres;
}


#line 1073  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_ioctl.c"
int mwifiex_set_encode(struct mwifiex_private *priv, struct key_params *kp, u8 const *key, int key_len, u8 key_index, u8 const *mac_addr, int disable)
{
  int __retres;
  struct mwifiex_ds_encrypt_key encrypt_key;
  int tmp;
  
#line 1079 
  memset((void *)(& encrypt_key),0,76UL);
  
#line 1080 
  encrypt_key.key_len = (unsigned int)key_len;
  
#line 1081 
  encrypt_key.key_index = (unsigned int)key_index;
  
#line 1083 
  if (kp != (struct key_params *)0 && kp->cipher == 1027078U) 
#line 1084 
                                                              encrypt_key.is_igtk_key = (unsigned char)1U; else ;
  
#line 1086 
  if (disable == 0) {
    
#line 1087 
    if (key_len != 0) 
#line 1088 
                      memcpy((void *)(& encrypt_key.key_material),(void const *)key,(unsigned long)key_len); else 
                                                                    
#line 1090 
                                                                    encrypt_key.is_current_wep_key = (unsigned char)1U;
    
#line 1092 
    if (mac_addr != (u8 const *)0U) 
#line 1093 
                                    memcpy((void *)(& encrypt_key.mac_addr),(void const *)mac_addr,6UL); else ;
    
#line 1094 
    if ((kp != (struct key_params *)0 && kp->seq != (u8 const *)0U) && kp->seq_len != 0) {
      
#line 1095 
      memcpy((void *)(& encrypt_key.pn),(void const *)kp->seq,(unsigned long)kp->seq_len);
      
#line 1096 
      encrypt_key.pn_len = (unsigned char)kp->seq_len;
      
#line 1097 
      encrypt_key.is_rx_seq_valid = (unsigned char)1U;
    }
    else ;
  }
  else {
    
#line 1100 
    if (((unsigned long)priv->bss_role & 1UL) != 0UL) {
      
#line 1101 
      __retres = 0;
      
#line 1101 
      goto return_label;
    }
    else ;
    
#line 1102 
    encrypt_key.key_disable = 1U;
    
#line 1103 
    if (mac_addr != (u8 const *)0U) 
#line 1104 
                                    memcpy((void *)(& encrypt_key.mac_addr),(void const *)mac_addr,6UL); else ;
  }
  
#line 1107 
  tmp = mwifiex_sec_ioctl_encrypt_key(priv,& encrypt_key);
  
#line 1107 
  __retres = tmp;
  return_label: 
#line 1107 
                return __retres;
}


#line 1117  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_ioctl.c"
int mwifiex_get_ver_ext(struct mwifiex_private *priv)
{
  int __retres;
  struct mwifiex_ver_ext ver_ext;
  int tmp;
  
#line 1121 
  memset((void *)(& ver_ext),0,129UL);
  
#line 1122 
  tmp = mwifiex_send_cmd(priv,(unsigned short)151,(unsigned short)0,0U,(void *)(& ver_ext),(_Bool)1);
  
#line 1122 
  if (tmp != 0) {
    
#line 1124 
    __retres = -1;
    
#line 1124 
    goto return_label;
  }
  else ;
  
#line 1126 
  __retres = 0;
  return_label: 
#line 1126 
                return __retres;
}


#line 1130  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_ioctl.c"
int mwifiex_remain_on_chan_cfg(struct mwifiex_private *priv, u16 action, struct ieee80211_channel *chan, unsigned int duration)
{
  int __retres;
  struct host_cmd_ds_remain_on_chan roc_cfg;
  u8 sc;
  int tmp_0;
  
#line 1137 
  memset((void *)(& roc_cfg),0,10UL);
  
#line 1138 
  roc_cfg.action = action;
  
#line 1139 
  if ((unsigned int)action == 1U) {
    int tmp;
    
#line 1140 
    roc_cfg.band_cfg = (unsigned char)chan->band;
    
#line 1141 
    sc = mwifiex_chan_type_to_sec_chan_offset((enum nl80211_channel_type)NL80211_CHAN_NO_HT);
    
#line 1142 
    roc_cfg.band_cfg = (unsigned char)((int)roc_cfg.band_cfg | ((int)sc << 2));
    
#line 1144 
    tmp = ieee80211_frequency_to_channel((int)chan->center_freq);
    
#line 1144 
    roc_cfg.channel = (unsigned char)tmp;
    
#line 1146 
    roc_cfg.duration = duration;
  }
  else ;
  
#line 1148 
  tmp_0 = mwifiex_send_cmd(priv,(unsigned short)269,(unsigned short)((int)action),0U,(void *)(& roc_cfg),(_Bool)1);
  
#line 1148 
  if (tmp_0 != 0) {
    
#line 1150 
    if (((priv->adapter)->debug_mask & 4U) != 0U) {
      
#line 1150 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 1150 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"failed to remain on channel\n"); else ;
    }
    else ;
    
#line 1152 
    __retres = -1;
    
#line 1152 
    goto return_label;
  }
  else ;
  
#line 1155 
  __retres = (int)roc_cfg.status;
  return_label: 
#line 1155 
                return __retres;
}


#line 1165  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_ioctl.c"
int mwifiex_get_stats_info(struct mwifiex_private *priv, struct mwifiex_ds_get_stats *log)
{
  int tmp;
  
#line 1168 
  tmp = mwifiex_send_cmd(priv,(unsigned short)11,(unsigned short)0,0U,(void *)log,(_Bool)1);
  
#line 1168 
  return tmp;
}


#line 1185  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_ioctl.c"
static int mwifiex_reg_mem_ioctl_reg_rw(struct mwifiex_private *priv, struct mwifiex_ds_reg_rw *reg_rw, u16 action)
{
  int __retres;
  u16 cmd_no;
  int tmp;
  
#line 1191 
  switch (reg_rw->type) {
    case (__le32)1: 
#line 1192 
    ;
    
#line 1193 
    cmd_no = (unsigned short)25U;
    
#line 1194 
    goto ldv_61736;
    case (__le32)2: 
#line 1195 
    ;
    
#line 1196 
    cmd_no = (unsigned short)26U;
    
#line 1197 
    goto ldv_61736;
    case (__le32)3: 
#line 1198 
    ;
    
#line 1199 
    cmd_no = (unsigned short)27U;
    
#line 1200 
    goto ldv_61736;
    case (__le32)4: 
#line 1201 
    ;
    
#line 1202 
    cmd_no = (unsigned short)173U;
    
#line 1203 
    goto ldv_61736;
    case (__le32)5: 
#line 1204 
    ;
    
#line 1205 
    cmd_no = (unsigned short)237U;
    
#line 1206 
    goto ldv_61736;
    default: 
#line 1207 
    ;
    
#line 1208 
    __retres = -1;
    
#line 1208 
    goto return_label;
  }
  ldv_61736: 
#line 1211 
  ;
  
#line 1211 
  tmp = mwifiex_send_cmd(priv,(unsigned short)((int)cmd_no),(unsigned short)((int)action),0U,(void *)reg_rw,(_Bool)1);
  
#line 1211 
  __retres = tmp;
  return_label: 
#line 1211 
                return __retres;
}


#line 1221  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_ioctl.c"
int mwifiex_reg_write(struct mwifiex_private *priv, u32 reg_type, u32 reg_offset, u32 reg_value)
{
  struct mwifiex_ds_reg_rw reg_rw;
  int tmp;
  
#line 1226 
  reg_rw.type = reg_type;
  
#line 1227 
  reg_rw.offset = reg_offset;
  
#line 1228 
  reg_rw.value = reg_value;
  
#line 1230 
  tmp = mwifiex_reg_mem_ioctl_reg_rw(priv,& reg_rw,(unsigned short)1);
  
#line 1230 
  return tmp;
}


#line 1240  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_ioctl.c"
int mwifiex_reg_read(struct mwifiex_private *priv, u32 reg_type, u32 reg_offset, u32 *value)
{
  int ret;
  struct mwifiex_ds_reg_rw reg_rw;
  
#line 1246 
  reg_rw.type = reg_type;
  
#line 1247 
  reg_rw.offset = reg_offset;
  
#line 1248 
  ret = mwifiex_reg_mem_ioctl_reg_rw(priv,& reg_rw,(unsigned short)0);
  
#line 1250 
  if (ret != 0) 
#line 1251 
                goto done; else ;
  
#line 1253 
  *value = reg_rw.value;
  done: 
#line 1255 
  ;
  
#line 1256 
  return ret;
}


#line 1266  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_ioctl.c"
int mwifiex_eeprom_read(struct mwifiex_private *priv, u16 offset, u16 bytes, u8 *value)
{
  int ret;
  struct mwifiex_ds_read_eeprom rd_eeprom;
  
#line 1272 
  rd_eeprom.offset = offset;
  
#line 1273 
  rd_eeprom.byte_count = bytes;
  
#line 1276 
  ret = mwifiex_send_cmd(priv,(unsigned short)89,(unsigned short)0,0U,(void *)(& rd_eeprom),(_Bool)1);
  
#line 1279 
  if (ret == 0) 
#line 1280 
                memcpy((void *)value,(void const *)(& rd_eeprom.value),256UL); else ;
  
#line 1281 
  return ret;
}


#line 1289  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_ioctl.c"
static int mwifiex_set_gen_ie_helper(struct mwifiex_private *priv, u8 *ie_data_ptr, u16 ie_len)
{
  int __retres;
  struct ieee_types_vendor_header *pvendor_ie;
  
#line 1292 
  int ret = 0;
  
#line 1294 
  u8 const wpa_oui[4U] = {(unsigned char)0U, (unsigned char)80U, (unsigned char)242U, (unsigned char)1U};
  
#line 1295 
  u8 const wps_oui[4U] = {(unsigned char)0U, (unsigned char)80U, (unsigned char)242U, (unsigned char)4U};
  
#line 1298 
  if ((unsigned int)ie_len == 0U) {
    
#line 1299 
    priv->gen_ie_buf_len = (unsigned char)0U;
    
#line 1300 
    priv->wps.session_enable = (unsigned char)0U;
    
#line 1302 
    __retres = 0;
    
#line 1302 
    goto return_label;
  }
  else 
    
#line 1303 
    if (ie_data_ptr == (u8 *)0U) {
      
#line 1304 
      __retres = -1;
      
#line 1304 
      goto return_label;
    }
    else ;
  
#line 1306 
  pvendor_ie = (struct ieee_types_vendor_header *)ie_data_ptr;
  
#line 1308 
  if ((unsigned int)pvendor_ie->element_id == 221U) {
    int tmp;
    
#line 1308 
    tmp = memcmp((void const *)(& pvendor_ie->oui),(void const *)(& wpa_oui),4UL);
    
#line 1308 
    if (tmp == 0) 
#line 1308 
                  goto _LOR; else 
#line 1308 
                                  goto _LAND;
  }
  else {
    _LAND: 
#line 1309 
    ;
    
#line 1309 
    if ((unsigned int)pvendor_ie->element_id == 48U) {
      _LOR: {
              
#line 1313 
              ret = mwifiex_set_wpa_ie_helper(priv,ie_data_ptr,(unsigned short)((int)ie_len));
              
#line 1314 
              priv->wps.session_enable = (unsigned char)0U;
              
#line 1316 
              __retres = ret;
              
#line 1316 
              goto return_label;
            }
    }
    else 
      
#line 1317 
      if ((unsigned int)pvendor_ie->element_id == 68U) {
        
#line 1319 
        ret = mwifiex_set_wapi_ie(priv,ie_data_ptr,(unsigned short)((int)ie_len));
        
#line 1321 
        __retres = ret;
        
#line 1321 
        goto return_label;
      }
      else ;
  }
  
#line 1327 
  if ((unsigned long)ie_len < 256UL - (unsigned long)priv->gen_ie_buf_len) {
    
#line 1332 
    pvendor_ie = (struct ieee_types_vendor_header *)ie_data_ptr;
    
#line 1333 
    if ((unsigned int)pvendor_ie->element_id == 221U) {
      int tmp_0;
      
#line 1333 
      tmp_0 = memcmp((void const *)(& pvendor_ie->oui),(void const *)(& wps_oui),4UL);
      
#line 1333 
      if (tmp_0 == 0) {
        
#line 1335 
        priv->wps.session_enable = (unsigned char)1U;
        
#line 1336 
        if (((priv->adapter)->debug_mask & 1073741824U) != 0U) {
          
#line 1336 
          if ((priv->adapter)->dev != (struct device *)0) 
#line 1336 
                                                          _dev_info((struct device const *)(priv->adapter)->dev,"info: WPS Session Enabled.\n"); else ;
        }
        else ;
        
#line 1338 
        ret = mwifiex_set_wps_ie(priv,ie_data_ptr,(unsigned short)((int)ie_len));
      }
      else ;
    }
    else ;
    
#line 1343 
    memcpy((void *)(& priv->gen_ie_buf) + (int)priv->gen_ie_buf_len,(void const *)ie_data_ptr,(unsigned long)ie_len);
    
#line 1347 
    priv->gen_ie_buf_len = (unsigned char)((int)priv->gen_ie_buf_len + (int)((unsigned char)ie_len));
  }
  else 
#line 1351 
       ret = -1;
  
#line 1355 
  __retres = ret;
  return_label: 
#line 1355 
                return __retres;
}


#line 1364  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_ioctl.c"
static int mwifiex_misc_ioctl_gen_ie(struct mwifiex_private *priv, struct mwifiex_ds_misc_gen_ie *gen_ie, u16 action)
{
  int __retres;
  
#line 1368 
  struct mwifiex_adapter *adapter = priv->adapter;
  
#line 1370 
  switch (gen_ie->type) {
    case (u32)0: 
#line 1371 
    ;
    
#line 1372 
    if ((unsigned int)action == 0U) {
      
#line 1373 
      gen_ie->len = (unsigned int)priv->wpa_ie_len;
      
#line 1374 
      memcpy((void *)(& gen_ie->ie_data),(void const *)(& priv->wpa_ie),(unsigned long)gen_ie->len);
    }
    else 
#line 1376 
         mwifiex_set_gen_ie_helper(priv,(u8 *)(& gen_ie->ie_data),(unsigned short)((int)((unsigned short)gen_ie->len)));
    
#line 1379 
    goto ldv_61782;
    case (u32)1: 
#line 1380 
    ;
    
#line 1381 
    memset((void *)(& adapter->arp_filter),0,68UL);
    
#line 1382 
    if (gen_ie->len > 68U) {
      
#line 1383 
      adapter->arp_filter_size = 0U;
      
#line 1384 
      if ((adapter->debug_mask & 4U) != 0U) {
        
#line 1384 
        if (adapter->dev != (struct device *)0) 
#line 1384 
                                                _dev_info((struct device const *)adapter->dev,"invalid ARP filter size\n"); else ;
      }
      else ;
      
#line 1386 
      __retres = -1;
      
#line 1386 
      goto return_label;
    }
    else {
      
#line 1388 
      memcpy((void *)(& adapter->arp_filter),(void const *)(& gen_ie->ie_data),(unsigned long)gen_ie->len);
      
#line 1390 
      adapter->arp_filter_size = gen_ie->len;
    }
    
#line 1392 
    goto ldv_61782;
    default: 
#line 1393 
    ;
    
#line 1394 
    if ((adapter->debug_mask & 4U) != 0U) {
      
#line 1394 
      if (adapter->dev != (struct device *)0) 
#line 1394 
                                              _dev_info((struct device const *)adapter->dev,"invalid IE type\n"); else ;
    }
    else ;
    
#line 1395 
    __retres = -1;
    
#line 1395 
    goto return_label;
  }
  ldv_61782: 
#line 1397 
  ;
  
#line 1397 
  __retres = 0;
  return_label: 
#line 1397 
                return __retres;
}


#line 1407  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_ioctl.c"
int mwifiex_set_gen_ie(struct mwifiex_private *priv, u8 const *ie, int ie_len)
{
  int __retres;
  struct mwifiex_ds_misc_gen_ie gen_ie;
  int tmp;
  
#line 1411 
  if (ie_len > 256) {
    
#line 1412 
    __retres = -14;
    
#line 1412 
    goto return_label;
  }
  else ;
  
#line 1414 
  gen_ie.type = 0U;
  
#line 1415 
  gen_ie.len = (unsigned int)ie_len;
  
#line 1416 
  memcpy((void *)(& gen_ie.ie_data),(void const *)ie,(unsigned long)ie_len);
  
#line 1417 
  tmp = mwifiex_misc_ioctl_gen_ie(priv,& gen_ie,(unsigned short)1);
  
#line 1417 
  if (tmp != 0) {
    
#line 1418 
    __retres = -14;
    
#line 1418 
    goto return_label;
  }
  else ;
  
#line 1420 
  __retres = 0;
  return_label: 
#line 1420 
                return __retres;
}


#line 436  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_sta_ioctl.c.aux"
static void *kzalloc_6(size_t size, gfp_t flags)
{
  void *tmp;
  
#line 439 
  tmp = ldv_kzalloc(size,flags);
  
#line 439 
  return tmp;
}


#line 248  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernel.h"
void __might_fault(char const *, int);


#line 271 
int kstrtoull(char const *, unsigned int, unsigned long long *);


#line 290  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernel.h"
__inline static int kstrtoul(char const *s, unsigned int base, unsigned long *res)
{
  int tmp;
  
#line 298 
  tmp = kstrtoull(s,base,(unsigned long long *)res);
  
#line 298 
  return tmp;
}


#line 418 
int sscanf(char const *, char const * , ...);


#line 353  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/gfp.h"
unsigned long get_zeroed_page(gfp_t);


#line 367 
void free_pages(unsigned long, unsigned int);


#line 2812  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
int simple_open(struct inode *, struct file *);


#line 2843 
ssize_t simple_read_from_buffer(void *, size_t, loff_t *, void const *, size_t);


#line 54  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/debugfs.h"
static struct dentry *ldv_debugfs_create_file_78(char const *ldv_func_arg1, umode_t ldv_func_arg2, struct dentry *ldv_func_arg3, void *ldv_func_arg4, struct file_operations const *ldv_func_arg5);


#line 58 
static struct dentry *ldv_debugfs_create_file_79(char const *ldv_func_arg1, umode_t ldv_func_arg2, struct dentry *ldv_func_arg3, void *ldv_func_arg4, struct file_operations const *ldv_func_arg5);


#line 62 
static struct dentry *ldv_debugfs_create_file_80(char const *ldv_func_arg1, umode_t ldv_func_arg2, struct dentry *ldv_func_arg3, void *ldv_func_arg4, struct file_operations const *ldv_func_arg5);


#line 66 
static struct dentry *ldv_debugfs_create_file_81(char const *ldv_func_arg1, umode_t ldv_func_arg2, struct dentry *ldv_func_arg3, void *ldv_func_arg4, struct file_operations const *ldv_func_arg5);


#line 70 
static struct dentry *ldv_debugfs_create_file_82(char const *ldv_func_arg1, umode_t ldv_func_arg2, struct dentry *ldv_func_arg3, void *ldv_func_arg4, struct file_operations const *ldv_func_arg5);


#line 74 
static struct dentry *ldv_debugfs_create_file_83(char const *ldv_func_arg1, umode_t ldv_func_arg2, struct dentry *ldv_func_arg3, void *ldv_func_arg4, struct file_operations const *ldv_func_arg5);


#line 78 
static struct dentry *ldv_debugfs_create_file_84(char const *ldv_func_arg1, umode_t ldv_func_arg2, struct dentry *ldv_func_arg3, void *ldv_func_arg4, struct file_operations const *ldv_func_arg5);


#line 82 
static struct dentry *ldv_debugfs_create_file_85(char const *ldv_func_arg1, umode_t ldv_func_arg2, struct dentry *ldv_func_arg3, void *ldv_func_arg4, struct file_operations const *ldv_func_arg5);


#line 86 
static struct dentry *ldv_debugfs_create_file_86(char const *ldv_func_arg1, umode_t ldv_func_arg2, struct dentry *ldv_func_arg3, void *ldv_func_arg4, struct file_operations const *ldv_func_arg5);


#line 90 
static struct dentry *ldv_debugfs_create_file_87(char const *ldv_func_arg1, umode_t ldv_func_arg2, struct dentry *ldv_func_arg3, void *ldv_func_arg4, struct file_operations const *ldv_func_arg5);


#line 98 
struct dentry *debugfs_create_dir(char const *, struct dentry *);


#line 111 
static void ldv_debugfs_remove_88(struct dentry *ldv_func_arg1);


#line 113 
void debugfs_remove_recursive(struct dentry *);


#line 650  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/uaccess.h"
unsigned long _copy_from_user(void *, void const *, unsigned int);


#line 662 
void copy_from_user_overflow(void);


#line 672 
void __copy_from_user_overflow(void);


#line 693  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/uaccess.h"
__inline static unsigned long copy_from_user(void *to, void const *from, unsigned long n)
{
  
#line 695 
  int sz = -1;
  
#line 697 
  __might_fault("./arch/x86/include/asm/uaccess.h",697);
  
#line 717 
  if ((long)(sz < 0) != 0L || (long)((unsigned long)sz >= n) != 0L) 
#line 718 
                                                                    n = _copy_from_user(to,from,(unsigned int)n);
  else 
    
#line 719 
    if (0 != 0) 
#line 720 
                copy_from_user_overflow(); else 
#line 722 
                                                __copy_from_user_overflow();
  
#line 724 
  return n;
}


#line 1529  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.h"
void mwifiex_dev_debugfs_init(struct mwifiex_private *priv);


#line 1530 
void mwifiex_dev_debugfs_remove(struct mwifiex_private *priv);


#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/debugfs.c"
static struct dentry *mwifiex_dfs_dir;

#line 28  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/debugfs.c"
static char *bss_modes[11U] = {(char *)"UNSPECIFIED", (char *)"ADHOC", (char *)"STATION", (char *)"AP", (char *)"AP_VLAN", (char *)"WDS", (char *)"MONITOR", (char *)"MESH_POINT", (char *)"P2P_CLIENT", (char *)"P2P_GO", (char *)"P2P_DEVICE"};

#line 74  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/debugfs.c"
static ssize_t mwifiex_info_read(struct file *file, char *ubuf, size_t count, loff_t *ppos)
{
  ssize_t __retres;
  struct netdev_hw_addr *ha;
  struct netdev_queue *txq;
  char fmt[64U];
  struct mwifiex_bss_info info_0;
  ssize_t ret;
  int tmp_0;
  int tmp_1;
  int tmp_2;
  int tmp_3;
  int tmp_4;
  int tmp_8;
  char *tmp_7;
  int tmp_9;
  int tmp_19;
  int tmp_20;
  int tmp_21;
  int tmp_22;
  int tmp_23;
  int tmp_24;
  int tmp_25;
  int tmp_26;
  int tmp_29;
  char *tmp_28;
  bool tmp_27;
  int tmp_30;
  int tmp_33;
  char *tmp_32;
  bool tmp_31;
  int tmp_34;
  
#line 77 
  struct mwifiex_private *priv = (struct mwifiex_private *)file->private_data;
  
#line 79 
  struct net_device *netdev = priv->netdev;
  
#line 82 
  unsigned long page = get_zeroed_page(208U);
  
#line 83 
  char *p = (char *)page;
  
#line 86 
  int i = 0;
  
#line 88 
  if (p == (char *)0) {
    
#line 89 
    __retres = -12L;
    
#line 89 
    goto return_label;
  }
  else ;
  
#line 91 
  memset((void *)(& info_0),0,88UL);
  
#line 92 
  tmp_0 = mwifiex_get_bss_info(priv,& info_0);
  
#line 92 
  ret = (long)tmp_0;
  
#line 93 
  if (ret != 0L) 
#line 94 
                 goto free_and_exit; else ;
  
#line 96 
  mwifiex_drv_get_driver_version(priv->adapter,(char *)(& fmt),63);
  
#line 98 
  if ((int)priv->version_str[0] == 0) 
#line 99 
                                      mwifiex_get_ver_ext(priv); else ;
  
#line 101 
  tmp_1 = sprintf(p,"driver_name = ");
  
#line 101 
  p += tmp_1;
  
#line 102 
  tmp_2 = sprintf(p,"driver_version = %s",(char *)(& fmt));
  
#line 102 
  p += tmp_2;
  
#line 103 
  tmp_3 = sprintf(p,"\nverext = %s",(char *)(& priv->version_str));
  
#line 103 
  p += tmp_3;
  
#line 104 
  tmp_4 = sprintf(p,"\ninterface_name=\"%s\"\n",(char *)(& netdev->name));
  
#line 104 
  p += tmp_4;
  
#line 106 
  if (info_0.bss_mode > 10U) {
    int tmp_5;
    
#line 107 
    tmp_5 = sprintf(p,"bss_mode=\"%d\"\n",info_0.bss_mode);
    
#line 107 
    p += tmp_5;
  }
  else {
    int tmp_6;
    
#line 109 
    tmp_6 = sprintf(p,"bss_mode=\"%s\"\n",bss_modes[info_0.bss_mode]);
    
#line 109 
    p += tmp_6;
  }
  
#line 111 
  if ((unsigned int)priv->media_connected == 0U) 
#line 111 
                                                 tmp_7 = (char *)"Disconnected"; else 
                                                                    
#line 111 
                                                                    tmp_7 = (char *)"Connected";
  
#line 111 
  tmp_8 = sprintf(p,"media_state=\"%s\"\n",tmp_7);
  
#line 112 
  p += tmp_8;
  
#line 113 
  tmp_9 = sprintf(p,"mac_address=\"%pM\"\n",netdev->dev_addr);
  
#line 113 
  p += tmp_9;
  
#line 115 
  if (((unsigned long)priv->bss_role & 1UL) == 0UL) {
    int tmp_10;
    int tmp_11;
    int tmp_12;
    int tmp_13;
    int tmp_14;
    struct netdev_hw_addr *tmp_15;
    int tmp_17;
    int tmp_16;
    struct netdev_hw_addr *tmp_18;
    
#line 116 
    tmp_10 = sprintf(p,"multicast_count=\"%d\"\n",netdev->mc.count);
    
#line 117 
    p += tmp_10;
    
#line 118 
    tmp_11 = sprintf(p,"essid=\"%s\"\n",(u8 *)(& info_0.ssid.ssid));
    
#line 118 
    p += tmp_11;
    
#line 119 
    tmp_12 = sprintf(p,"bssid=\"%pM\"\n",(u8 *)(& info_0.bssid));
    
#line 119 
    p += tmp_12;
    
#line 120 
    tmp_13 = sprintf(p,"channel=\"%d\"\n",(int)info_0.bss_chan);
    
#line 120 
    p += tmp_13;
    
#line 121 
    tmp_14 = sprintf(p,"country_code = \"%s\"\n",(u8 *)(& info_0.country_code));
    
#line 121 
    p += tmp_14;
    {
      
#line 123 
      struct list_head const *__mptr = (struct list_head const *)netdev->mc.list.next;
      
#line 123 
      tmp_15 = (struct netdev_hw_addr *)__mptr;
    }
    
#line 123 
    ha = tmp_15;
    
#line 123 
    goto ldv_61605;
    ldv_61604: 
#line 124 
    ;
    
#line 124 
    ;
    
#line 124 
    tmp_16 = i;
    
#line 124 
    i += 1;
    
#line 124 
    ;
    
#line 124 
    tmp_17 = sprintf(p,"multicast_address[%d]=\"%pM\"\n",tmp_16,(unsigned char *)(& ha->addr));
    
#line 125 
    p += tmp_17;
    {
      
#line 123 
      struct list_head const *__mptr_0 = (struct list_head const *)ha->list.next;
      
#line 123 
      tmp_18 = (struct netdev_hw_addr *)__mptr_0;
    }
    
#line 123 
    ha = tmp_18;
    ldv_61605: 
#line 125 
    ;
    
#line 123 
    if (& ha->list != & netdev->mc.list) 
#line 125 
                                         goto ldv_61604; else 
#line 128 
                                                              goto ldv_61606;
    ldv_61606: 
#line 129 
    ;
  }
  else ;
  
#line 128 
  tmp_19 = sprintf(p,"num_tx_bytes = %lu\n",priv->stats.tx_bytes);
  
#line 128 
  p += tmp_19;
  
#line 129 
  tmp_20 = sprintf(p,"num_rx_bytes = %lu\n",priv->stats.rx_bytes);
  
#line 129 
  p += tmp_20;
  
#line 130 
  tmp_21 = sprintf(p,"num_tx_pkts = %lu\n",priv->stats.tx_packets);
  
#line 130 
  p += tmp_21;
  
#line 131 
  tmp_22 = sprintf(p,"num_rx_pkts = %lu\n",priv->stats.rx_packets);
  
#line 131 
  p += tmp_22;
  
#line 132 
  tmp_23 = sprintf(p,"num_tx_pkts_dropped = %lu\n",priv->stats.tx_dropped);
  
#line 132 
  p += tmp_23;
  
#line 133 
  tmp_24 = sprintf(p,"num_rx_pkts_dropped = %lu\n",priv->stats.rx_dropped);
  
#line 133 
  p += tmp_24;
  
#line 134 
  tmp_25 = sprintf(p,"num_tx_pkts_err = %lu\n",priv->stats.tx_errors);
  
#line 134 
  p += tmp_25;
  
#line 135 
  tmp_26 = sprintf(p,"num_rx_pkts_err = %lu\n",priv->stats.rx_errors);
  
#line 135 
  p += tmp_26;
  
#line 136 
  tmp_27 = netif_carrier_ok((struct net_device const *)priv->netdev);
  
#line 136 
  if ((int)tmp_27 != 0) 
#line 136 
                        tmp_28 = (char *)"on"; else 
#line 136 
                                                    tmp_28 = (char *)"off";
  
#line 136 
  tmp_29 = sprintf(p,"carrier %s\n",tmp_28);
  
#line 137 
  p += tmp_29;
  
#line 138 
  tmp_30 = sprintf(p,"tx queue");
  
#line 138 
  p += tmp_30;
  
#line 139 
  i = 0;
  
#line 139 
  goto ldv_61608;
  ldv_61607: 
#line 140 
  ;
  
#line 140 
  txq = netdev_get_tx_queue((struct net_device const *)netdev,(unsigned int)i);
  
#line 141 
  tmp_31 = netif_tx_queue_stopped((struct netdev_queue const *)txq);
  
#line 141 
  if ((int)tmp_31 != 0) 
#line 141 
                        tmp_32 = (char *)"stopped"; else 
#line 141 
                                                         tmp_32 = (char *)"started";
  
#line 141 
  ;
  
#line 141 
  tmp_33 = sprintf(p," %d:%s",i,tmp_32);
  
#line 142 
  p += tmp_33;
  
#line 139 
  i += 1;
  ldv_61608: 
#line 140 
  ;
  
#line 139 
  if (netdev->num_tx_queues > (unsigned int)i) 
#line 141 
                                               goto ldv_61607; else 
#line 144 
                                                                    goto ldv_61609;
  ldv_61609: 
#line 145 
  ;
  
#line 144 
  tmp_34 = sprintf(p,"\n");
  
#line 144 
  p += tmp_34;
  
#line 146 
  ret = simple_read_from_buffer((void *)ubuf,count,ppos,(void const *)page,(unsigned long)p - page);
  free_and_exit: 
#line 149 
  ;
  
#line 150 
  free_pages(page,0U);
  
#line 151 
  __retres = ret;
  return_label: 
#line 151 
                return __retres;
}


#line 164  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/debugfs.c"
static ssize_t mwifiex_device_dump_read(struct file *file, char *ubuf, size_t count, loff_t *ppos)
{
  ssize_t __retres;
  
#line 167 
  struct mwifiex_private *priv = (struct mwifiex_private *)file->private_data;
  
#line 169 
  if ((priv->adapter)->if_ops.device_dump == (void (*)(struct mwifiex_adapter *))0) {
    
#line 170 
    __retres = -5L;
    
#line 170 
    goto return_label;
  }
  else ;
  
#line 172 
  (*((priv->adapter)->if_ops.device_dump))(priv->adapter);
  
#line 174 
  __retres = 0L;
  return_label: 
#line 174 
                return __retres;
}


#line 199  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/debugfs.c"
static ssize_t mwifiex_getlog_read(struct file *file, char *ubuf, size_t count, loff_t *ppos)
{
  ssize_t __retres;
  ssize_t ret;
  struct mwifiex_ds_get_stats stats;
  int tmp_0;
  int tmp_1;
  
#line 202 
  struct mwifiex_private *priv = (struct mwifiex_private *)file->private_data;
  
#line 204 
  unsigned long page = get_zeroed_page(208U);
  
#line 205 
  char *p = (char *)page;
  
#line 209 
  if (p == (char *)0) {
    
#line 210 
    __retres = -12L;
    
#line 210 
    goto return_label;
  }
  else ;
  
#line 212 
  memset((void *)(& stats),0,72UL);
  
#line 213 
  tmp_0 = mwifiex_get_stats_info(priv,& stats);
  
#line 213 
  ret = (long)tmp_0;
  
#line 214 
  if (ret != 0L) 
#line 215 
                 goto free_and_exit; else ;
  
#line 217 
  tmp_1 = sprintf(p,"\n",stats.mcast_tx_frame,stats.failed,stats.retry,stats.multi_retry,stats.frame_dup,stats.rts_success,stats.rts_failure,stats.ack_failure,stats.rx_frag,stats.mcast_rx_frame,stats.fcs_error,stats.tx_frame,stats.wep_icv_error[0],stats.wep_icv_error[1],stats.wep_icv_error[2],stats.wep_icv_error[3],stats.bcn_rcv_cnt,stats.bcn_miss_cnt);
  
#line 253 
  p += tmp_1;
  
#line 256 
  ret = simple_read_from_buffer((void *)ubuf,count,ppos,(void const *)page,(unsigned long)p - page);
  free_and_exit: 
#line 259 
  ;
  
#line 260 
  free_pages(page,0U);
  
#line 261 
  __retres = ret;
  return_label: 
#line 261 
                return __retres;
}


#line 275  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/debugfs.c"
static ssize_t mwifiex_histogram_read(struct file *file, char *ubuf, size_t count, loff_t *ppos)
{
  ssize_t __retres;
  ssize_t ret;
  struct mwifiex_histogram_data *phist_data;
  int i;
  int value;
  int tmp_1;
  int tmp_0;
  int tmp_2;
  int tmp_3;
  int tmp_4;
  int tmp_5;
  
#line 278 
  struct mwifiex_private *priv = (struct mwifiex_private *)file->private_data;
  
#line 283 
  unsigned long page = get_zeroed_page(208U);
  
#line 284 
  char *p = (char *)page;
  
#line 286 
  if (p == (char *)0) {
    
#line 287 
    __retres = -12L;
    
#line 287 
    goto return_label;
  }
  else ;
  
#line 289 
  if (priv == (struct mwifiex_private *)0 || priv->hist_data == (struct mwifiex_histogram_data *)0) {
    
#line 290 
    __retres = -14L;
    
#line 290 
    goto return_label;
  }
  else ;
  
#line 291 
  phist_data = priv->hist_data;
  
#line 293 
  tmp_0 = atomic_read((atomic_t const *)(& phist_data->num_samples));
  
#line 293 
  tmp_1 = sprintf(p,"\n",tmp_0);
  
#line 295 
  p += tmp_1;
  
#line 297 
  tmp_2 = sprintf(p,"rx rates (in Mbps): 0=1M   1=2M");
  
#line 297 
  p += tmp_2;
  
#line 298 
  tmp_3 = sprintf(p,"2=5.5M  3=11M   4=6M   5=9M  6=12M\n");
  
#line 298 
  p += tmp_3;
  
#line 299 
  tmp_4 = sprintf(p,"7=18M  8=24M  9=36M  10=48M  11=54M");
  
#line 299 
  p += tmp_4;
  
#line 300 
  tmp_5 = sprintf(p,"12-27=MCS0-15(BW20) 28-43=MCS0-15(BW40)\n");
  
#line 300 
  p += tmp_5;
  
#line 302 
  if (((unsigned long)(priv->adapter)->fw_cap_info & 8192UL) != 0UL) {
    int tmp_6;
    int tmp_7;
    int tmp_8;
    
#line 303 
    tmp_6 = sprintf(p,"44-53=MCS0-9(VHT:BW20)");
    
#line 303 
    p += tmp_6;
    
#line 304 
    tmp_7 = sprintf(p,"54-63=MCS0-9(VHT:BW40)");
    
#line 304 
    p += tmp_7;
    
#line 305 
    tmp_8 = sprintf(p,"64-73=MCS0-9(VHT:BW80)\n\n");
    
#line 305 
    p += tmp_8;
  }
  else {
    int tmp_9;
    
#line 307 
    tmp_9 = sprintf(p,"\n");
    
#line 307 
    p += tmp_9;
  }
  
#line 310 
  i = 0;
  
#line 310 
  goto ldv_61643;
  ldv_61642: 
#line 311 
  ;
  
#line 311 
  value = atomic_read((atomic_t const *)(& phist_data->rx_rate[i]));
  
#line 312 
  if (value != 0) {
    int tmp_10;
    
#line 313 
    tmp_10 = sprintf(p,"rx_rate[%02d] = %d\n",i,value);
    
#line 313 
    p += tmp_10;
  }
  else ;
  
#line 310 
  i += 1;
  ldv_61643: 
#line 311 
  ;
  
#line 310 
  if (i <= 43) 
#line 312 
               goto ldv_61642; else 
#line 315 
                                    goto ldv_61644;
  ldv_61644: 
#line 316 
  ;
  
#line 316 
  if (((unsigned long)(priv->adapter)->fw_cap_info & 8192UL) != 0UL) {
    
#line 317 
    i = 44;
    
#line 317 
    goto ldv_61646;
    ldv_61645: 
#line 318 
    ;
    
#line 319 
    value = atomic_read((atomic_t const *)(& phist_data->rx_rate[i]));
    
#line 320 
    if (value != 0) {
      int tmp_11;
      
#line 321 
      tmp_11 = sprintf(p,"rx_rate[%02d] = %d\n",i,value);
      
#line 322 
      p += tmp_11;
    }
    else ;
    
#line 318 
    i += 1;
    ldv_61646: 
#line 319 
    ;
    
#line 317 
    if (i <= 73) 
#line 319 
                 goto ldv_61645; else 
#line 322 
                                      goto ldv_61647;
    ldv_61647: 
#line 323 
    ;
  }
  else ;
  
#line 326 
  i = 0;
  
#line 326 
  goto ldv_61649;
  ldv_61648: 
#line 327 
  ;
  
#line 327 
  value = atomic_read((atomic_t const *)(& phist_data->snr[i]));
  
#line 328 
  if (value != 0) {
    int tmp_12;
    
#line 329 
    tmp_12 = sprintf(p,"snr[%02ddB] = %d\n",i,value);
    
#line 329 
    p += tmp_12;
  }
  else ;
  
#line 326 
  i += 1;
  ldv_61649: 
#line 327 
  ;
  
#line 326 
  if (i <= 255) 
#line 328 
                goto ldv_61648; else 
#line 331 
                                     goto ldv_61650;
  ldv_61650: 
#line 332 
  ;
  
#line 331 
  i = 0;
  
#line 331 
  goto ldv_61652;
  ldv_61651: 
#line 332 
  ;
  
#line 332 
  value = atomic_read((atomic_t const *)(& phist_data->noise_flr[i]));
  
#line 333 
  if (value != 0) {
    int tmp_13;
    
#line 334 
    tmp_13 = sprintf(p,"noise_flr[-%02ddBm] = %d\n",i + -128,value);
    
#line 335 
    p += tmp_13;
  }
  else ;
  
#line 331 
  i += 1;
  ldv_61652: 
#line 332 
  ;
  
#line 331 
  if (i <= 255) 
#line 333 
                goto ldv_61651; else 
#line 336 
                                     goto ldv_61653;
  ldv_61653: 
#line 337 
  ;
  
#line 337 
  i = 0;
  
#line 337 
  goto ldv_61655;
  ldv_61654: 
#line 338 
  ;
  
#line 338 
  value = atomic_read((atomic_t const *)(& phist_data->sig_str[i]));
  
#line 339 
  if (value != 0) {
    int tmp_14;
    
#line 340 
    tmp_14 = sprintf(p,"sig_strength[-%02ddBm] = %d\n",i,value);
    
#line 341 
    p += tmp_14;
  }
  else ;
  
#line 337 
  i += 1;
  ldv_61655: 
#line 338 
  ;
  
#line 337 
  if (i <= 255) 
#line 339 
                goto ldv_61654; else 
#line 342 
                                     goto ldv_61656;
  ldv_61656: 
#line 343 
  ;
  
#line 344 
  ret = simple_read_from_buffer((void *)ubuf,count,ppos,(void const *)page,(unsigned long)p - page);
  
#line 347 
  __retres = ret;
  return_label: 
#line 347 
                return __retres;
}


#line 351  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/debugfs.c"
static ssize_t mwifiex_histogram_write(struct file *file, char const *ubuf, size_t count, loff_t *ppos)
{
  ssize_t __retres;
  
#line 354 
  struct mwifiex_private *priv = (struct mwifiex_private *)file->private_data;
  
#line 356 
  if (priv != (struct mwifiex_private *)0 && priv->hist_data != (struct mwifiex_histogram_data *)0) 
    
#line 357 
    mwifiex_hist_data_reset(priv); else ;
  
#line 358 
  __retres = 0L;
  
#line 358 
  return __retres;
}


#line 361  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/debugfs.c"
static struct mwifiex_debug_info info;

#line 411  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/debugfs.c"
static ssize_t mwifiex_debug_read(struct file *file, char *ubuf, size_t count, loff_t *ppos)
{
  ssize_t __retres;
  ssize_t ret;
  int tmp_0;
  int tmp_1;
  
#line 414 
  struct mwifiex_private *priv = (struct mwifiex_private *)file->private_data;
  
#line 416 
  unsigned long page = get_zeroed_page(208U);
  
#line 417 
  char *p = (char *)page;
  
#line 420 
  if (p == (char *)0) {
    
#line 421 
    __retres = -12L;
    
#line 421 
    goto return_label;
  }
  else ;
  
#line 423 
  tmp_0 = mwifiex_get_debug_info(priv,& info);
  
#line 423 
  ret = (long)tmp_0;
  
#line 424 
  if (ret != 0L) 
#line 425 
                 goto free_and_exit; else ;
  
#line 427 
  tmp_1 = mwifiex_debug_info_to_buffer(priv,p,& info);
  
#line 427 
  p += tmp_1;
  
#line 429 
  ret = simple_read_from_buffer((void *)ubuf,count,ppos,(void const *)page,(unsigned long)p - page);
  free_and_exit: 
#line 432 
  ;
  
#line 433 
  free_pages(page,0U);
  
#line 434 
  __retres = ret;
  return_label: 
#line 434 
                return __retres;
}


#line 437  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/debugfs.c"
static u32 saved_reg_type;

#line 437  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/debugfs.c"
static u32 saved_reg_offset;

#line 437  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/debugfs.c"
static u32 saved_reg_value;

#line 447  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/debugfs.c"
static ssize_t mwifiex_regrdwr_write(struct file *file, char const *ubuf, size_t count, loff_t *ppos)
{
  ssize_t __retres;
  size_t tmp_1;
  int ret;
  unsigned long tmp_2;
  
#line 450 
  unsigned long addr = get_zeroed_page(208U);
  
#line 451 
  char *buf = (char *)addr;
  {
    size_t tmp_0;
    
#line 452 
    size_t __min1 = count;
    
#line 452 
    size_t __min2 = 4095UL;
    
#line 452 
    if (__min1 < __min2) 
#line 452 
                         tmp_0 = __min1; else 
#line 452 
                                              tmp_0 = __min2;
    
#line 452 
    tmp_1 = tmp_0;
  }
  
#line 452 
  size_t buf_size = tmp_1;
  
#line 454 
  u32 reg_type = 0U;
  
#line 454 
  u32 reg_offset = 0U;
  
#line 454 
  u32 reg_value = 4294967295U;
  
#line 456 
  if (buf == (char *)0) {
    
#line 457 
    __retres = -12L;
    
#line 457 
    goto return_label;
  }
  else ;
  
#line 460 
  tmp_2 = copy_from_user((void *)buf,(void const *)ubuf,buf_size);
  
#line 460 
  if (tmp_2 != 0UL) {
    
#line 461 
    ret = -14;
    
#line 462 
    goto done;
  }
  else ;
  
#line 465 
  sscanf((char const *)buf,"%u %x %x",& reg_type,& reg_offset,& reg_value);
  
#line 467 
  if (reg_type == 0U || reg_offset == 0U) {
    
#line 468 
    ret = -22;
    
#line 469 
    goto done;
  }
  else {
    
#line 471 
    saved_reg_type = reg_type;
    
#line 472 
    saved_reg_offset = reg_offset;
    
#line 473 
    saved_reg_value = reg_value;
    
#line 474 
    ret = (int)count;
  }
  done: 
#line 476 
  ;
  
#line 477 
  free_pages(addr,0U);
  
#line 478 
  __retres = (long)ret;
  return_label: 
#line 478 
                return __retres;
}


#line 489  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/debugfs.c"
static ssize_t mwifiex_regrdwr_read(struct file *file, char *ubuf, size_t count, loff_t *ppos)
{
  ssize_t __retres;
  u32 reg_value;
  int tmp_3;
  ssize_t tmp_4;
  
#line 492 
  struct mwifiex_private *priv = (struct mwifiex_private *)file->private_data;
  
#line 494 
  unsigned long addr = get_zeroed_page(208U);
  
#line 495 
  char *buf = (char *)addr;
  
#line 496 
  int pos = 0;
  
#line 496 
  int ret = 0;
  
#line 499 
  if (buf == (char *)0) {
    
#line 500 
    __retres = -12L;
    
#line 500 
    goto return_label;
  }
  else ;
  
#line 502 
  if (saved_reg_type == 0U) {
    int tmp_0;
    
#line 504 
    tmp_0 = snprintf(buf,4096UL,"0");
    
#line 504 
    pos = tmp_0 + pos;
    
#line 505 
    goto done;
  }
  else ;
  
#line 508 
  if (saved_reg_value != 4294967295U) {
    int tmp_1;
    ssize_t tmp_2;
    
#line 509 
    ret = mwifiex_reg_write(priv,saved_reg_type,saved_reg_offset,saved_reg_value);
    
#line 512 
    tmp_1 = snprintf(buf,4096UL,"%u 0x%x 0x%x\n",saved_reg_type,saved_reg_offset,saved_reg_value);
    
#line 514 
    pos = tmp_1 + pos;
    
#line 516 
    tmp_2 = simple_read_from_buffer((void *)ubuf,count,ppos,(void const *)buf,(unsigned long)pos);
    
#line 516 
    ret = (int)tmp_2;
    
#line 518 
    goto done;
  }
  else ;
  
#line 521 
  ret = mwifiex_reg_read(priv,saved_reg_type,saved_reg_offset,& reg_value);
  
#line 523 
  if (ret != 0) {
    
#line 524 
    ret = -22;
    
#line 525 
    goto done;
  }
  else ;
  
#line 528 
  tmp_3 = snprintf(buf,4096UL,"%u 0x%x 0x%x\n",saved_reg_type,saved_reg_offset,reg_value);
  
#line 529 
  pos = tmp_3 + pos;
  
#line 531 
  tmp_4 = simple_read_from_buffer((void *)ubuf,count,ppos,(void const *)buf,(unsigned long)pos);
  
#line 531 
  ret = (int)tmp_4;
  done: 
#line 533 
  ;
  
#line 534 
  free_pages(addr,0U);
  
#line 535 
  __retres = (long)ret;
  return_label: 
#line 535 
                return __retres;
}


#line 543  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/debugfs.c"
static ssize_t mwifiex_debug_mask_read(struct file *file, char *ubuf, size_t count, loff_t *ppos)
{
  ssize_t __retres;
  int tmp_0;
  ssize_t tmp_1;
  
#line 546 
  struct mwifiex_private *priv = (struct mwifiex_private *)file->private_data;
  
#line 548 
  unsigned long page = get_zeroed_page(208U);
  
#line 549 
  char *buf = (char *)page;
  
#line 550 
  size_t ret = 0UL;
  
#line 551 
  int pos = 0;
  
#line 553 
  if (buf == (char *)0) {
    
#line 554 
    __retres = -12L;
    
#line 554 
    goto return_label;
  }
  else ;
  
#line 556 
  tmp_0 = snprintf(buf,4096UL,"debug mask=0x%08x\n",(priv->adapter)->debug_mask);
  
#line 557 
  pos = tmp_0 + pos;
  
#line 558 
  tmp_1 = simple_read_from_buffer((void *)ubuf,count,ppos,(void const *)buf,(unsigned long)pos);
  
#line 558 
  ret = (unsigned long)tmp_1;
  
#line 560 
  free_pages(page,0U);
  
#line 561 
  __retres = (long)ret;
  return_label: 
#line 561 
                return __retres;
}


#line 569  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/debugfs.c"
static ssize_t mwifiex_debug_mask_write(struct file *file, char const *ubuf, size_t count, loff_t *ppos)
{
  ssize_t __retres;
  int ret;
  unsigned long debug_mask_0;
  unsigned long tmp_1;
  unsigned long tmp_2;
  int tmp_3;
  
#line 574 
  struct mwifiex_private *priv = (struct mwifiex_private *)file->private_data;
  
#line 575 
  unsigned long addr = get_zeroed_page(208U);
  
#line 576 
  char *buf = (char *)addr;
  {
    unsigned long tmp_0;
    
#line 577 
    size_t _min1 = count;
    
#line 577 
    unsigned long _min2 = 4095UL;
    
#line 577 
    if (_min1 < _min2) 
#line 577 
                       tmp_0 = _min1; else 
#line 577 
                                           tmp_0 = _min2;
    
#line 577 
    tmp_1 = tmp_0;
  }
  
#line 577 
  size_t buf_size = tmp_1;
  
#line 579 
  if (buf == (char *)0) {
    
#line 580 
    __retres = -12L;
    
#line 580 
    goto return_label;
  }
  else ;
  
#line 582 
  tmp_2 = copy_from_user((void *)buf,(void const *)ubuf,buf_size);
  
#line 582 
  if (tmp_2 != 0UL) {
    
#line 583 
    ret = -14;
    
#line 584 
    goto done;
  }
  else ;
  
#line 587 
  tmp_3 = kstrtoul((char const *)buf,0U,& debug_mask_0);
  
#line 587 
  if (tmp_3 != 0) {
    
#line 588 
    ret = -22;
    
#line 589 
    goto done;
  }
  else ;
  
#line 592 
  (priv->adapter)->debug_mask = (unsigned int)debug_mask_0;
  
#line 593 
  ret = (int)count;
  done: 
#line 594 
  ;
  
#line 595 
  free_pages(addr,0U);
  
#line 596 
  __retres = (long)ret;
  return_label: 
#line 596 
                return __retres;
}


#line 604  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/debugfs.c"
static ssize_t mwifiex_memrw_write(struct file *file, char const *ubuf, size_t count, loff_t *ppos)
{
  ssize_t __retres;
  int ret;
  char cmd;
  struct mwifiex_ds_mem_rw mem_rw;
  u16 cmd_action;
  unsigned long tmp_1;
  unsigned long tmp_2;
  int tmp_3;
  
#line 611 
  struct mwifiex_private *priv = (struct mwifiex_private *)file->private_data;
  
#line 612 
  unsigned long addr = get_zeroed_page(208U);
  
#line 613 
  char *buf = (char *)addr;
  {
    unsigned long tmp_0;
    
#line 614 
    size_t _min1 = count;
    
#line 614 
    unsigned long _min2 = 4095UL;
    
#line 614 
    if (_min1 < _min2) 
#line 614 
                       tmp_0 = _min1; else 
#line 614 
                                           tmp_0 = _min2;
    
#line 614 
    tmp_1 = tmp_0;
  }
  
#line 614 
  size_t buf_size = tmp_1;
  
#line 616 
  if (buf == (char *)0) {
    
#line 617 
    __retres = -12L;
    
#line 617 
    goto return_label;
  }
  else ;
  
#line 619 
  tmp_2 = copy_from_user((void *)buf,(void const *)ubuf,buf_size);
  
#line 619 
  if (tmp_2 != 0UL) {
    
#line 620 
    ret = -14;
    
#line 621 
    goto done;
  }
  else ;
  
#line 624 
  ret = sscanf((char const *)buf,"%c %x %x",& cmd,& mem_rw.addr,& mem_rw.value);
  
#line 625 
  if (ret != 3) {
    
#line 626 
    ret = -22;
    
#line 627 
    goto done;
  }
  else ;
  
#line 630 
  if ((int)cmd == 114 || (int)cmd == 82) {
    
#line 631 
    cmd_action = (unsigned short)0U;
    
#line 632 
    mem_rw.value = 0U;
  }
  else 
    
#line 633 
    if ((int)cmd == 119 || (int)cmd == 87) 
#line 634 
                                           cmd_action = (unsigned short)1U;
    else {
      
#line 636 
      ret = -22;
      
#line 637 
      goto done;
    }
  
#line 640 
  memcpy((void *)(& priv->mem_rw),(void const *)(& mem_rw),8UL);
  
#line 641 
  tmp_3 = mwifiex_send_cmd(priv,(unsigned short)134,(unsigned short)((int)cmd_action),0U,(void *)(& mem_rw),(_Bool)1);
  
#line 641 
  if (tmp_3 != 0) 
#line 643 
                  ret = -1; else 
#line 645 
                                 ret = (int)count;
  done: 
#line 647 
  ;
  
#line 648 
  free_pages(addr,0U);
  
#line 649 
  __retres = (long)ret;
  return_label: 
#line 649 
                return __retres;
}


#line 657  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/debugfs.c"
static ssize_t mwifiex_memrw_read(struct file *file, char *ubuf, size_t count, loff_t *ppos)
{
  ssize_t __retres;
  int ret;
  int tmp_0;
  ssize_t tmp_1;
  
#line 660 
  struct mwifiex_private *priv = (struct mwifiex_private *)file->private_data;
  
#line 661 
  unsigned long addr = get_zeroed_page(208U);
  
#line 662 
  char *buf = (char *)addr;
  
#line 663 
  int pos = 0;
  
#line 665 
  if (buf == (char *)0) {
    
#line 666 
    __retres = -12L;
    
#line 666 
    goto return_label;
  }
  else ;
  
#line 668 
  tmp_0 = snprintf(buf,4096UL,"0x%x 0x%x\n",priv->mem_rw.addr,priv->mem_rw.value);
  
#line 669 
  pos = tmp_0 + pos;
  
#line 670 
  tmp_1 = simple_read_from_buffer((void *)ubuf,count,ppos,(void const *)buf,(unsigned long)pos);
  
#line 670 
  ret = (int)tmp_1;
  
#line 672 
  free_pages(addr,0U);
  
#line 673 
  __retres = (long)ret;
  return_label: 
#line 673 
                return __retres;
}


#line 676  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/debugfs.c"
static u32 saved_offset = 4294967295U;

#line 676  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/debugfs.c"
static u32 saved_bytes = 4294967295U;

#line 686  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/debugfs.c"
static ssize_t mwifiex_rdeeprom_write(struct file *file, char const *ubuf, size_t count, loff_t *ppos)
{
  ssize_t __retres;
  size_t tmp_1;
  unsigned long tmp_2;
  
#line 689 
  unsigned long addr = get_zeroed_page(208U);
  
#line 690 
  char *buf = (char *)addr;
  {
    size_t tmp_0;
    
#line 691 
    size_t __min1 = count;
    
#line 691 
    size_t __min2 = 4095UL;
    
#line 691 
    if (__min1 < __min2) 
#line 691 
                         tmp_0 = __min1; else 
#line 691 
                                              tmp_0 = __min2;
    
#line 691 
    tmp_1 = tmp_0;
  }
  
#line 691 
  size_t buf_size = tmp_1;
  
#line 692 
  int ret = 0;
  
#line 693 
  int offset = -1;
  
#line 693 
  int bytes = -1;
  
#line 695 
  if (buf == (char *)0) {
    
#line 696 
    __retres = -12L;
    
#line 696 
    goto return_label;
  }
  else ;
  
#line 699 
  tmp_2 = copy_from_user((void *)buf,(void const *)ubuf,buf_size);
  
#line 699 
  if (tmp_2 != 0UL) {
    
#line 700 
    ret = -14;
    
#line 701 
    goto done;
  }
  else ;
  
#line 704 
  sscanf((char const *)buf,"%d %d",& offset,& bytes);
  
#line 706 
  if (offset == -1 || bytes == -1) {
    
#line 707 
    ret = -22;
    
#line 708 
    goto done;
  }
  else {
    
#line 710 
    saved_offset = (unsigned int)offset;
    
#line 711 
    saved_bytes = (unsigned int)bytes;
    
#line 712 
    ret = (int)count;
  }
  done: 
#line 714 
  ;
  
#line 715 
  free_pages(addr,0U);
  
#line 716 
  __retres = (long)ret;
  return_label: 
#line 716 
                return __retres;
}


#line 727  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/debugfs.c"
static ssize_t mwifiex_rdeeprom_read(struct file *file, char *ubuf, size_t count, loff_t *ppos)
{
  ssize_t __retres;
  int i;
  u8 value[256U];
  int tmp_1;
  int tmp_3;
  size_t tmp_2;
  ssize_t tmp_4;
  
#line 730 
  struct mwifiex_private *priv = (struct mwifiex_private *)file->private_data;
  
#line 732 
  unsigned long addr = get_zeroed_page(208U);
  
#line 733 
  char *buf = (char *)addr;
  
#line 734 
  int pos = 0;
  
#line 734 
  int ret = 0;
  
#line 737 
  if (buf == (char *)0) {
    
#line 738 
    __retres = -12L;
    
#line 738 
    goto return_label;
  }
  else ;
  
#line 740 
  if (saved_offset == 4294967295U) {
    int tmp_0;
    
#line 742 
    tmp_0 = snprintf(buf,4096UL,"0");
    
#line 742 
    pos = tmp_0 + pos;
    
#line 743 
    goto done;
  }
  else ;
  
#line 747 
  ret = mwifiex_eeprom_read(priv,(unsigned short)((int)((unsigned short)saved_offset)),(unsigned short)((int)((unsigned short)saved_bytes)),(u8 *)(& value));
  
#line 749 
  if (ret != 0) {
    
#line 750 
    ret = -22;
    
#line 751 
    goto done;
  }
  else ;
  
#line 754 
  tmp_1 = snprintf(buf,4096UL,"%d %d ",saved_offset,saved_bytes);
  
#line 754 
  pos = tmp_1 + pos;
  
#line 756 
  i = 0;
  
#line 756 
  goto ldv_61798;
  ldv_61797: 
#line 757 
  ;
  
#line 757 
  ;
  
#line 757 
  tmp_2 = strlen((char const *)buf);
  
#line 757 
  ;
  
#line 757 
  tmp_3 = snprintf(buf + tmp_2,4096UL,"%d ",(int)value[i]);
  
#line 757 
  pos = tmp_3 + pos;
  
#line 756 
  i += 1;
  ldv_61798: 
#line 757 
  ;
  
#line 756 
  if ((unsigned int)i < saved_bytes) 
#line 758 
                                     goto ldv_61797; else 
#line 761 
                                                          goto ldv_61799;
  ldv_61799: 
#line 762 
  ;
  
#line 759 
  tmp_4 = simple_read_from_buffer((void *)ubuf,count,ppos,(void const *)buf,(unsigned long)pos);
  
#line 759 
  ret = (int)tmp_4;
  done: 
#line 761 
  ;
  
#line 762 
  free_pages(addr,0U);
  
#line 763 
  __retres = (long)ret;
  return_label: 
#line 763 
                return __retres;
}


#line 770  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/debugfs.c"
static ssize_t mwifiex_hscfg_write(struct file *file, char const *ubuf, size_t count, loff_t *ppos)
{
  ssize_t __retres;
  size_t tmp_1;
  int ret;
  int arg_num;
  struct mwifiex_ds_hs_cfg hscfg;
  unsigned long tmp_2;
  
#line 773 
  struct mwifiex_private *priv = (struct mwifiex_private *)file->private_data;
  
#line 774 
  unsigned long addr = get_zeroed_page(208U);
  
#line 775 
  char *buf = (char *)addr;
  {
    size_t tmp_0;
    
#line 776 
    size_t __min1 = count;
    
#line 776 
    size_t __min2 = 4095UL;
    
#line 776 
    if (__min1 < __min2) 
#line 776 
                         tmp_0 = __min1; else 
#line 776 
                                              tmp_0 = __min2;
    
#line 776 
    tmp_1 = tmp_0;
  }
  
#line 776 
  size_t buf_size = tmp_1;
  
#line 779 
  int conditions = 0;
  
#line 780 
  u32 gpio = 255U;
  
#line 780 
  u32 gap = 255U;
  
#line 782 
  if (buf == (char *)0) {
    
#line 783 
    __retres = -12L;
    
#line 783 
    goto return_label;
  }
  else ;
  
#line 785 
  tmp_2 = copy_from_user((void *)buf,(void const *)ubuf,buf_size);
  
#line 785 
  if (tmp_2 != 0UL) {
    
#line 786 
    ret = -14;
    
#line 787 
    goto done;
  }
  else ;
  
#line 790 
  arg_num = sscanf((char const *)buf,"%d %x %x",& conditions,& gpio,& gap);
  
#line 792 
  memset((void *)(& hscfg),0,16UL);
  
#line 794 
  if (arg_num > 3) {
    
#line 795 
    if (((priv->adapter)->debug_mask & 4U) != 0U) {
      
#line 795 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 795 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"Too many arguments\n"); else ;
    }
    else ;
    
#line 797 
    ret = -22;
    
#line 798 
    goto done;
  }
  else ;
  
#line 801 
  if ((unsigned int)arg_num + 4294967295U <= 1U) 
#line 802 
                                                 mwifiex_set_hs_params(priv,(unsigned short)0,1,& hscfg); else ;
  
#line 805 
  if (arg_num != 0) {
    
#line 806 
    if (conditions == -1) {
      
#line 807 
      mwifiex_cancel_hs(priv,0);
      
#line 808 
      ret = (int)count;
      
#line 809 
      goto done;
    }
    else ;
    
#line 811 
    hscfg.conditions = (unsigned int)conditions;
  }
  else ;
  
#line 813 
  if (arg_num > 1) 
#line 814 
                   hscfg.gpio = gpio; else ;
  
#line 815 
  if (arg_num == 3) 
#line 816 
                    hscfg.gap = gap; else ;
  
#line 818 
  hscfg.is_invoke_hostcmd = 0U;
  
#line 819 
  mwifiex_set_hs_params(priv,(unsigned short)1,1,& hscfg);
  
#line 822 
  mwifiex_enable_hs(priv->adapter);
  
#line 823 
  (priv->adapter)->hs_enabling = (_Bool)0;
  
#line 824 
  ret = (int)count;
  done: 
#line 825 
  ;
  
#line 826 
  free_pages(addr,0U);
  
#line 827 
  __retres = (long)ret;
  return_label: 
#line 827 
                return __retres;
}


#line 835  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/debugfs.c"
static ssize_t mwifiex_hscfg_read(struct file *file, char *ubuf, size_t count, loff_t *ppos)
{
  ssize_t __retres;
  int pos;
  int ret;
  struct mwifiex_ds_hs_cfg hscfg;
  ssize_t tmp_0;
  
#line 838 
  struct mwifiex_private *priv = (struct mwifiex_private *)file->private_data;
  
#line 839 
  unsigned long addr = get_zeroed_page(208U);
  
#line 840 
  char *buf = (char *)addr;
  
#line 844 
  if (buf == (char *)0) {
    
#line 845 
    __retres = -12L;
    
#line 845 
    goto return_label;
  }
  else ;
  
#line 847 
  mwifiex_set_hs_params(priv,(unsigned short)0,1,& hscfg);
  
#line 850 
  pos = snprintf(buf,4096UL,"%u 0x%x 0x%x\n",hscfg.conditions,hscfg.gpio,hscfg.gap);
  
#line 853 
  tmp_0 = simple_read_from_buffer((void *)ubuf,count,ppos,(void const *)buf,(unsigned long)pos);
  
#line 853 
  ret = (int)tmp_0;
  
#line 855 
  free_pages(addr,0U);
  
#line 856 
  __retres = (long)ret;
  return_label: 
#line 856 
                return __retres;
}


#line 885  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/debugfs.c"
static struct file_operations const mwifiex_dfs_info_fops = {.owner = (struct module *)0, .llseek = (loff_t (*)(struct file *, loff_t , int ))0, .read = & mwifiex_info_read, .write = (ssize_t (*)(struct file *, char const *, size_t , loff_t *))0, .read_iter = (ssize_t (*)(struct kiocb *, struct iov_iter *))0, .write_iter = (ssize_t (*)(struct kiocb *, struct iov_iter *))0, .iterate = (int (*)(struct file *, struct dir_context *))0, .poll = (unsigned int (*)(struct file *, struct poll_table_struct *))0, .unlocked_ioctl = (long (*)(struct file *, unsigned int , unsigned long ))0, .compat_ioctl = (long (*)(struct file *, unsigned int , unsigned long ))0, .mmap = (int (*)(struct file *, struct vm_area_struct *))0, .mremap = (int (*)(struct file *, struct vm_area_struct *))0, .open = & simple_open, .flush = (int (*)(struct file *, fl_owner_t ))0, .release = (int (*)(struct inode *, struct file *))0, .fsync = (int (*)(struct file *, loff_t , loff_t , int ))0, .aio_fsync = (int (*)(struct kiocb *, int ))0, .fasync = (int (*)(int , struct file *, int ))0, .lock = (int (*)(struct file *, int , struct file_lock *))0, .sendpage = (ssize_t (*)(struct file *, struct page *, int , size_t , loff_t *, int ))0, .get_unmapped_area = (unsigned long (*)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ))0, .check_flags = (int (*)(int ))0, .flock = (int (*)(struct file *, int , struct file_lock *))0, .splice_write = (ssize_t (*)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ))0, .splice_read = (ssize_t (*)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ))0, .setlease = (int (*)(struct file *, long , struct file_lock **, void **))0, .fallocate = (long (*)(struct file *, int , loff_t , loff_t ))0, .show_fdinfo = (void (*)(struct seq_file *, struct file *))0};

#line 886  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/debugfs.c"
static struct file_operations const mwifiex_dfs_debug_fops = {.owner = (struct module *)0, .llseek = (loff_t (*)(struct file *, loff_t , int ))0, .read = & mwifiex_debug_read, .write = (ssize_t (*)(struct file *, char const *, size_t , loff_t *))0, .read_iter = (ssize_t (*)(struct kiocb *, struct iov_iter *))0, .write_iter = (ssize_t (*)(struct kiocb *, struct iov_iter *))0, .iterate = (int (*)(struct file *, struct dir_context *))0, .poll = (unsigned int (*)(struct file *, struct poll_table_struct *))0, .unlocked_ioctl = (long (*)(struct file *, unsigned int , unsigned long ))0, .compat_ioctl = (long (*)(struct file *, unsigned int , unsigned long ))0, .mmap = (int (*)(struct file *, struct vm_area_struct *))0, .mremap = (int (*)(struct file *, struct vm_area_struct *))0, .open = & simple_open, .flush = (int (*)(struct file *, fl_owner_t ))0, .release = (int (*)(struct inode *, struct file *))0, .fsync = (int (*)(struct file *, loff_t , loff_t , int ))0, .aio_fsync = (int (*)(struct kiocb *, int ))0, .fasync = (int (*)(int , struct file *, int ))0, .lock = (int (*)(struct file *, int , struct file_lock *))0, .sendpage = (ssize_t (*)(struct file *, struct page *, int , size_t , loff_t *, int ))0, .get_unmapped_area = (unsigned long (*)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ))0, .check_flags = (int (*)(int ))0, .flock = (int (*)(struct file *, int , struct file_lock *))0, .splice_write = (ssize_t (*)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ))0, .splice_read = (ssize_t (*)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ))0, .setlease = (int (*)(struct file *, long , struct file_lock **, void **))0, .fallocate = (long (*)(struct file *, int , loff_t , loff_t ))0, .show_fdinfo = (void (*)(struct seq_file *, struct file *))0};

#line 887  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/debugfs.c"
static struct file_operations const mwifiex_dfs_getlog_fops = {.owner = (struct module *)0, .llseek = (loff_t (*)(struct file *, loff_t , int ))0, .read = & mwifiex_getlog_read, .write = (ssize_t (*)(struct file *, char const *, size_t , loff_t *))0, .read_iter = (ssize_t (*)(struct kiocb *, struct iov_iter *))0, .write_iter = (ssize_t (*)(struct kiocb *, struct iov_iter *))0, .iterate = (int (*)(struct file *, struct dir_context *))0, .poll = (unsigned int (*)(struct file *, struct poll_table_struct *))0, .unlocked_ioctl = (long (*)(struct file *, unsigned int , unsigned long ))0, .compat_ioctl = (long (*)(struct file *, unsigned int , unsigned long ))0, .mmap = (int (*)(struct file *, struct vm_area_struct *))0, .mremap = (int (*)(struct file *, struct vm_area_struct *))0, .open = & simple_open, .flush = (int (*)(struct file *, fl_owner_t ))0, .release = (int (*)(struct inode *, struct file *))0, .fsync = (int (*)(struct file *, loff_t , loff_t , int ))0, .aio_fsync = (int (*)(struct kiocb *, int ))0, .fasync = (int (*)(int , struct file *, int ))0, .lock = (int (*)(struct file *, int , struct file_lock *))0, .sendpage = (ssize_t (*)(struct file *, struct page *, int , size_t , loff_t *, int ))0, .get_unmapped_area = (unsigned long (*)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ))0, .check_flags = (int (*)(int ))0, .flock = (int (*)(struct file *, int , struct file_lock *))0, .splice_write = (ssize_t (*)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ))0, .splice_read = (ssize_t (*)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ))0, .setlease = (int (*)(struct file *, long , struct file_lock **, void **))0, .fallocate = (long (*)(struct file *, int , loff_t , loff_t ))0, .show_fdinfo = (void (*)(struct seq_file *, struct file *))0};

#line 888  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/debugfs.c"
static struct file_operations const mwifiex_dfs_device_dump_fops = {.owner = (struct module *)0, .llseek = (loff_t (*)(struct file *, loff_t , int ))0, .read = & mwifiex_device_dump_read, .write = (ssize_t (*)(struct file *, char const *, size_t , loff_t *))0, .read_iter = (ssize_t (*)(struct kiocb *, struct iov_iter *))0, .write_iter = (ssize_t (*)(struct kiocb *, struct iov_iter *))0, .iterate = (int (*)(struct file *, struct dir_context *))0, .poll = (unsigned int (*)(struct file *, struct poll_table_struct *))0, .unlocked_ioctl = (long (*)(struct file *, unsigned int , unsigned long ))0, .compat_ioctl = (long (*)(struct file *, unsigned int , unsigned long ))0, .mmap = (int (*)(struct file *, struct vm_area_struct *))0, .mremap = (int (*)(struct file *, struct vm_area_struct *))0, .open = & simple_open, .flush = (int (*)(struct file *, fl_owner_t ))0, .release = (int (*)(struct inode *, struct file *))0, .fsync = (int (*)(struct file *, loff_t , loff_t , int ))0, .aio_fsync = (int (*)(struct kiocb *, int ))0, .fasync = (int (*)(int , struct file *, int ))0, .lock = (int (*)(struct file *, int , struct file_lock *))0, .sendpage = (ssize_t (*)(struct file *, struct page *, int , size_t , loff_t *, int ))0, .get_unmapped_area = (unsigned long (*)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ))0, .check_flags = (int (*)(int ))0, .flock = (int (*)(struct file *, int , struct file_lock *))0, .splice_write = (ssize_t (*)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ))0, .splice_read = (ssize_t (*)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ))0, .setlease = (int (*)(struct file *, long , struct file_lock **, void **))0, .fallocate = (long (*)(struct file *, int , loff_t , loff_t ))0, .show_fdinfo = (void (*)(struct seq_file *, struct file *))0};

#line 889  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/debugfs.c"
static struct file_operations const mwifiex_dfs_regrdwr_fops = {.owner = (struct module *)0, .llseek = (loff_t (*)(struct file *, loff_t , int ))0, .read = & mwifiex_regrdwr_read, .write = & mwifiex_regrdwr_write, .read_iter = (ssize_t (*)(struct kiocb *, struct iov_iter *))0, .write_iter = (ssize_t (*)(struct kiocb *, struct iov_iter *))0, .iterate = (int (*)(struct file *, struct dir_context *))0, .poll = (unsigned int (*)(struct file *, struct poll_table_struct *))0, .unlocked_ioctl = (long (*)(struct file *, unsigned int , unsigned long ))0, .compat_ioctl = (long (*)(struct file *, unsigned int , unsigned long ))0, .mmap = (int (*)(struct file *, struct vm_area_struct *))0, .mremap = (int (*)(struct file *, struct vm_area_struct *))0, .open = & simple_open, .flush = (int (*)(struct file *, fl_owner_t ))0, .release = (int (*)(struct inode *, struct file *))0, .fsync = (int (*)(struct file *, loff_t , loff_t , int ))0, .aio_fsync = (int (*)(struct kiocb *, int ))0, .fasync = (int (*)(int , struct file *, int ))0, .lock = (int (*)(struct file *, int , struct file_lock *))0, .sendpage = (ssize_t (*)(struct file *, struct page *, int , size_t , loff_t *, int ))0, .get_unmapped_area = (unsigned long (*)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ))0, .check_flags = (int (*)(int ))0, .flock = (int (*)(struct file *, int , struct file_lock *))0, .splice_write = (ssize_t (*)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ))0, .splice_read = (ssize_t (*)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ))0, .setlease = (int (*)(struct file *, long , struct file_lock **, void **))0, .fallocate = (long (*)(struct file *, int , loff_t , loff_t ))0, .show_fdinfo = (void (*)(struct seq_file *, struct file *))0};

#line 890  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/debugfs.c"
static struct file_operations const mwifiex_dfs_rdeeprom_fops = {.owner = (struct module *)0, .llseek = (loff_t (*)(struct file *, loff_t , int ))0, .read = & mwifiex_rdeeprom_read, .write = & mwifiex_rdeeprom_write, .read_iter = (ssize_t (*)(struct kiocb *, struct iov_iter *))0, .write_iter = (ssize_t (*)(struct kiocb *, struct iov_iter *))0, .iterate = (int (*)(struct file *, struct dir_context *))0, .poll = (unsigned int (*)(struct file *, struct poll_table_struct *))0, .unlocked_ioctl = (long (*)(struct file *, unsigned int , unsigned long ))0, .compat_ioctl = (long (*)(struct file *, unsigned int , unsigned long ))0, .mmap = (int (*)(struct file *, struct vm_area_struct *))0, .mremap = (int (*)(struct file *, struct vm_area_struct *))0, .open = & simple_open, .flush = (int (*)(struct file *, fl_owner_t ))0, .release = (int (*)(struct inode *, struct file *))0, .fsync = (int (*)(struct file *, loff_t , loff_t , int ))0, .aio_fsync = (int (*)(struct kiocb *, int ))0, .fasync = (int (*)(int , struct file *, int ))0, .lock = (int (*)(struct file *, int , struct file_lock *))0, .sendpage = (ssize_t (*)(struct file *, struct page *, int , size_t , loff_t *, int ))0, .get_unmapped_area = (unsigned long (*)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ))0, .check_flags = (int (*)(int ))0, .flock = (int (*)(struct file *, int , struct file_lock *))0, .splice_write = (ssize_t (*)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ))0, .splice_read = (ssize_t (*)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ))0, .setlease = (int (*)(struct file *, long , struct file_lock **, void **))0, .fallocate = (long (*)(struct file *, int , loff_t , loff_t ))0, .show_fdinfo = (void (*)(struct seq_file *, struct file *))0};

#line 891  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/debugfs.c"
static struct file_operations const mwifiex_dfs_memrw_fops = {.owner = (struct module *)0, .llseek = (loff_t (*)(struct file *, loff_t , int ))0, .read = & mwifiex_memrw_read, .write = & mwifiex_memrw_write, .read_iter = (ssize_t (*)(struct kiocb *, struct iov_iter *))0, .write_iter = (ssize_t (*)(struct kiocb *, struct iov_iter *))0, .iterate = (int (*)(struct file *, struct dir_context *))0, .poll = (unsigned int (*)(struct file *, struct poll_table_struct *))0, .unlocked_ioctl = (long (*)(struct file *, unsigned int , unsigned long ))0, .compat_ioctl = (long (*)(struct file *, unsigned int , unsigned long ))0, .mmap = (int (*)(struct file *, struct vm_area_struct *))0, .mremap = (int (*)(struct file *, struct vm_area_struct *))0, .open = & simple_open, .flush = (int (*)(struct file *, fl_owner_t ))0, .release = (int (*)(struct inode *, struct file *))0, .fsync = (int (*)(struct file *, loff_t , loff_t , int ))0, .aio_fsync = (int (*)(struct kiocb *, int ))0, .fasync = (int (*)(int , struct file *, int ))0, .lock = (int (*)(struct file *, int , struct file_lock *))0, .sendpage = (ssize_t (*)(struct file *, struct page *, int , size_t , loff_t *, int ))0, .get_unmapped_area = (unsigned long (*)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ))0, .check_flags = (int (*)(int ))0, .flock = (int (*)(struct file *, int , struct file_lock *))0, .splice_write = (ssize_t (*)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ))0, .splice_read = (ssize_t (*)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ))0, .setlease = (int (*)(struct file *, long , struct file_lock **, void **))0, .fallocate = (long (*)(struct file *, int , loff_t , loff_t ))0, .show_fdinfo = (void (*)(struct seq_file *, struct file *))0};

#line 892  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/debugfs.c"
static struct file_operations const mwifiex_dfs_hscfg_fops = {.owner = (struct module *)0, .llseek = (loff_t (*)(struct file *, loff_t , int ))0, .read = & mwifiex_hscfg_read, .write = & mwifiex_hscfg_write, .read_iter = (ssize_t (*)(struct kiocb *, struct iov_iter *))0, .write_iter = (ssize_t (*)(struct kiocb *, struct iov_iter *))0, .iterate = (int (*)(struct file *, struct dir_context *))0, .poll = (unsigned int (*)(struct file *, struct poll_table_struct *))0, .unlocked_ioctl = (long (*)(struct file *, unsigned int , unsigned long ))0, .compat_ioctl = (long (*)(struct file *, unsigned int , unsigned long ))0, .mmap = (int (*)(struct file *, struct vm_area_struct *))0, .mremap = (int (*)(struct file *, struct vm_area_struct *))0, .open = & simple_open, .flush = (int (*)(struct file *, fl_owner_t ))0, .release = (int (*)(struct inode *, struct file *))0, .fsync = (int (*)(struct file *, loff_t , loff_t , int ))0, .aio_fsync = (int (*)(struct kiocb *, int ))0, .fasync = (int (*)(int , struct file *, int ))0, .lock = (int (*)(struct file *, int , struct file_lock *))0, .sendpage = (ssize_t (*)(struct file *, struct page *, int , size_t , loff_t *, int ))0, .get_unmapped_area = (unsigned long (*)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ))0, .check_flags = (int (*)(int ))0, .flock = (int (*)(struct file *, int , struct file_lock *))0, .splice_write = (ssize_t (*)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ))0, .splice_read = (ssize_t (*)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ))0, .setlease = (int (*)(struct file *, long , struct file_lock **, void **))0, .fallocate = (long (*)(struct file *, int , loff_t , loff_t ))0, .show_fdinfo = (void (*)(struct seq_file *, struct file *))0};

#line 893  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/debugfs.c"
static struct file_operations const mwifiex_dfs_histogram_fops = {.owner = (struct module *)0, .llseek = (loff_t (*)(struct file *, loff_t , int ))0, .read = & mwifiex_histogram_read, .write = & mwifiex_histogram_write, .read_iter = (ssize_t (*)(struct kiocb *, struct iov_iter *))0, .write_iter = (ssize_t (*)(struct kiocb *, struct iov_iter *))0, .iterate = (int (*)(struct file *, struct dir_context *))0, .poll = (unsigned int (*)(struct file *, struct poll_table_struct *))0, .unlocked_ioctl = (long (*)(struct file *, unsigned int , unsigned long ))0, .compat_ioctl = (long (*)(struct file *, unsigned int , unsigned long ))0, .mmap = (int (*)(struct file *, struct vm_area_struct *))0, .mremap = (int (*)(struct file *, struct vm_area_struct *))0, .open = & simple_open, .flush = (int (*)(struct file *, fl_owner_t ))0, .release = (int (*)(struct inode *, struct file *))0, .fsync = (int (*)(struct file *, loff_t , loff_t , int ))0, .aio_fsync = (int (*)(struct kiocb *, int ))0, .fasync = (int (*)(int , struct file *, int ))0, .lock = (int (*)(struct file *, int , struct file_lock *))0, .sendpage = (ssize_t (*)(struct file *, struct page *, int , size_t , loff_t *, int ))0, .get_unmapped_area = (unsigned long (*)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ))0, .check_flags = (int (*)(int ))0, .flock = (int (*)(struct file *, int , struct file_lock *))0, .splice_write = (ssize_t (*)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ))0, .splice_read = (ssize_t (*)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ))0, .setlease = (int (*)(struct file *, long , struct file_lock **, void **))0, .fallocate = (long (*)(struct file *, int , loff_t , loff_t ))0, .show_fdinfo = (void (*)(struct seq_file *, struct file *))0};

#line 894  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/debugfs.c"
static struct file_operations const mwifiex_dfs_debug_mask_fops = {.owner = (struct module *)0, .llseek = (loff_t (*)(struct file *, loff_t , int ))0, .read = & mwifiex_debug_mask_read, .write = & mwifiex_debug_mask_write, .read_iter = (ssize_t (*)(struct kiocb *, struct iov_iter *))0, .write_iter = (ssize_t (*)(struct kiocb *, struct iov_iter *))0, .iterate = (int (*)(struct file *, struct dir_context *))0, .poll = (unsigned int (*)(struct file *, struct poll_table_struct *))0, .unlocked_ioctl = (long (*)(struct file *, unsigned int , unsigned long ))0, .compat_ioctl = (long (*)(struct file *, unsigned int , unsigned long ))0, .mmap = (int (*)(struct file *, struct vm_area_struct *))0, .mremap = (int (*)(struct file *, struct vm_area_struct *))0, .open = & simple_open, .flush = (int (*)(struct file *, fl_owner_t ))0, .release = (int (*)(struct inode *, struct file *))0, .fsync = (int (*)(struct file *, loff_t , loff_t , int ))0, .aio_fsync = (int (*)(struct kiocb *, int ))0, .fasync = (int (*)(int , struct file *, int ))0, .lock = (int (*)(struct file *, int , struct file_lock *))0, .sendpage = (ssize_t (*)(struct file *, struct page *, int , size_t , loff_t *, int ))0, .get_unmapped_area = (unsigned long (*)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ))0, .check_flags = (int (*)(int ))0, .flock = (int (*)(struct file *, int , struct file_lock *))0, .splice_write = (ssize_t (*)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ))0, .splice_read = (ssize_t (*)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ))0, .setlease = (int (*)(struct file *, long , struct file_lock **, void **))0, .fallocate = (long (*)(struct file *, int , loff_t , loff_t ))0, .show_fdinfo = (void (*)(struct seq_file *, struct file *))0};

#line 900  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/debugfs.c"
void mwifiex_dev_debugfs_init(struct mwifiex_private *priv)
{
  struct dentry *tmp;
  struct dentry *tmp_0;
  struct dentry *tmp_1;
  struct dentry *tmp_2;
  struct dentry *tmp_3;
  struct dentry *tmp_4;
  struct dentry *tmp_5;
  struct dentry *tmp_6;
  struct dentry *tmp_7;
  struct dentry *tmp_8;
  
#line 902 
  if (mwifiex_dfs_dir == (struct dentry *)0 || priv == (struct mwifiex_private *)0) 
    
#line 903 
    goto return_label; else ;
  
#line 905 
  priv->dfs_dev_dir = debugfs_create_dir((char const *)(& (priv->netdev)->name),mwifiex_dfs_dir);
  
#line 908 
  if (priv->dfs_dev_dir == (struct dentry *)0) 
#line 909 
                                               goto return_label; else ;
  
#line 911 
  tmp = ldv_debugfs_create_file_78("info",(unsigned short)420,priv->dfs_dev_dir,(void *)priv,& mwifiex_dfs_info_fops);
  
#line 911 
  if (tmp == (struct dentry *)0) 
#line 911 
                                 goto return_label; else ;
  
#line 912 
  tmp_0 = ldv_debugfs_create_file_79("debug",(unsigned short)420,priv->dfs_dev_dir,(void *)priv,& mwifiex_dfs_debug_fops);
  
#line 912 
  if (tmp_0 == (struct dentry *)0) 
#line 912 
                                   goto return_label; else ;
  
#line 913 
  tmp_1 = ldv_debugfs_create_file_80("getlog",(unsigned short)420,priv->dfs_dev_dir,(void *)priv,& mwifiex_dfs_getlog_fops);
  
#line 913 
  if (tmp_1 == (struct dentry *)0) 
#line 913 
                                   goto return_label; else ;
  
#line 914 
  tmp_2 = ldv_debugfs_create_file_81("regrdwr",(unsigned short)420,priv->dfs_dev_dir,(void *)priv,& mwifiex_dfs_regrdwr_fops);
  
#line 914 
  if (tmp_2 == (struct dentry *)0) 
#line 914 
                                   goto return_label; else ;
  
#line 915 
  tmp_3 = ldv_debugfs_create_file_82("rdeeprom",(unsigned short)420,priv->dfs_dev_dir,(void *)priv,& mwifiex_dfs_rdeeprom_fops);
  
#line 915 
  if (tmp_3 == (struct dentry *)0) 
#line 915 
                                   goto return_label; else ;
  
#line 916 
  tmp_4 = ldv_debugfs_create_file_83("device_dump",(unsigned short)420,priv->dfs_dev_dir,(void *)priv,& mwifiex_dfs_device_dump_fops);
  
#line 916 
  if (tmp_4 == (struct dentry *)0) 
#line 916 
                                   goto return_label; else ;
  
#line 917 
  tmp_5 = ldv_debugfs_create_file_84("memrw",(unsigned short)420,priv->dfs_dev_dir,(void *)priv,& mwifiex_dfs_memrw_fops);
  
#line 917 
  if (tmp_5 == (struct dentry *)0) 
#line 917 
                                   goto return_label; else ;
  
#line 918 
  tmp_6 = ldv_debugfs_create_file_85("hscfg",(unsigned short)420,priv->dfs_dev_dir,(void *)priv,& mwifiex_dfs_hscfg_fops);
  
#line 918 
  if (tmp_6 == (struct dentry *)0) 
#line 918 
                                   goto return_label; else ;
  
#line 919 
  tmp_7 = ldv_debugfs_create_file_86("histogram",(unsigned short)420,priv->dfs_dev_dir,(void *)priv,& mwifiex_dfs_histogram_fops);
  
#line 919 
  if (tmp_7 == (struct dentry *)0) 
#line 919 
                                   goto return_label; else ;
  
#line 920 
  tmp_8 = ldv_debugfs_create_file_87("debug_mask",(unsigned short)420,priv->dfs_dev_dir,(void *)priv,& mwifiex_dfs_debug_mask_fops);
  
#line 920 
  if (tmp_8 == (struct dentry *)0) 
#line 920 
                                   goto return_label; else ;
  return_label: 
#line 921 
                return;
}


#line 927  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/debugfs.c"
void mwifiex_dev_debugfs_remove(struct mwifiex_private *priv)
{
  
#line 929 
  if (priv == (struct mwifiex_private *)0) 
#line 930 
                                           goto return_label; else ;
  
#line 932 
  debugfs_remove_recursive(priv->dfs_dev_dir);
  return_label: 
#line 933 
                return;
}


#line 939  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/debugfs.c"
void mwifiex_debugfs_init(void)
{
  
#line 941 
  if (mwifiex_dfs_dir == (struct dentry *)0) 
#line 942 
                                             mwifiex_dfs_dir = debugfs_create_dir("mwifiex",(struct dentry *)0); else ;
  
#line 943 
  return;
}


#line 949  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/debugfs.c"
void mwifiex_debugfs_remove(void)
{
  
#line 951 
  if (mwifiex_dfs_dir != (struct dentry *)0) 
#line 952 
                                             ldv_debugfs_remove_88(mwifiex_dfs_dir); else ;
  
#line 953 
  return;
}


#line 56  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_debugfs.c.aux"
struct file_operations *ldv_emg_alias_mwifiex_dfs_hscfg_fops_2 = (struct file_operations *)(& mwifiex_dfs_hscfg_fops);

#line 57  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_debugfs.c.aux"
struct file_operations *ldv_emg_alias_mwifiex_dfs_regrdwr_fops_2 = (struct file_operations *)(& mwifiex_dfs_regrdwr_fops);

#line 58  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_debugfs.c.aux"
struct file_operations *ldv_emg_alias_mwifiex_dfs_memrw_fops_2 = (struct file_operations *)(& mwifiex_dfs_memrw_fops);

#line 59  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_debugfs.c.aux"
struct file_operations *ldv_emg_alias_mwifiex_dfs_debug_mask_fops_2 = (struct file_operations *)(& mwifiex_dfs_debug_mask_fops);

#line 60  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_debugfs.c.aux"
struct file_operations *ldv_emg_alias_mwifiex_dfs_info_fops_2 = (struct file_operations *)(& mwifiex_dfs_info_fops);

#line 61  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_debugfs.c.aux"
struct file_operations *ldv_emg_alias_mwifiex_dfs_device_dump_fops_2 = (struct file_operations *)(& mwifiex_dfs_device_dump_fops);

#line 62  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_debugfs.c.aux"
struct file_operations *ldv_emg_alias_mwifiex_dfs_debug_fops_2 = (struct file_operations *)(& mwifiex_dfs_debug_fops);

#line 63  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_debugfs.c.aux"
int (*ldv_emg_alias_simple_open_4)(struct inode *, struct file *) = & simple_open;

#line 64  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_debugfs.c.aux"
struct file_operations *ldv_emg_alias_mwifiex_dfs_rdeeprom_fops_2 = (struct file_operations *)(& mwifiex_dfs_rdeeprom_fops);

#line 65  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_debugfs.c.aux"
struct file_operations *ldv_emg_alias_mwifiex_dfs_getlog_fops_2 = (struct file_operations *)(& mwifiex_dfs_getlog_fops);

#line 66  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_debugfs.c.aux"
struct file_operations *ldv_emg_alias_mwifiex_dfs_histogram_fops_2 = (struct file_operations *)(& mwifiex_dfs_histogram_fops);

#line 73 
void ldv_emg_debugfs_remove(struct dentry *arg0);


#line 74 
struct dentry *ldv_emg_debugfs_create_file(char *arg0, unsigned short arg1, struct dentry *arg2, void *arg3, struct file_operations *arg4);


#line 81  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_debugfs.c.aux"
long ldv_emg_wrapper_mwifiex_hscfg_write_4(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  long tmp;
  
#line 82 
  tmp = mwifiex_hscfg_write(arg0,(char const *)arg1,arg2,arg3);
  
#line 82 
  return tmp;
}


#line 86  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_debugfs.c.aux"
long ldv_emg_wrapper_mwifiex_histogram_write_4(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  long tmp;
  
#line 87 
  tmp = mwifiex_histogram_write(arg0,(char const *)arg1,arg2,arg3);
  
#line 87 
  return tmp;
}


#line 91  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_debugfs.c.aux"
long ldv_emg_wrapper_mwifiex_memrw_write_4(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  long tmp;
  
#line 92 
  tmp = mwifiex_memrw_write(arg0,(char const *)arg1,arg2,arg3);
  
#line 92 
  return tmp;
}


#line 96  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_debugfs.c.aux"
long ldv_emg_wrapper_mwifiex_info_read_3(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  long tmp;
  
#line 97 
  tmp = mwifiex_info_read(arg0,arg1,arg2,arg3);
  
#line 97 
  return tmp;
}


#line 101  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_debugfs.c.aux"
long ldv_emg_wrapper_mwifiex_hscfg_read_3(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  long tmp;
  
#line 102 
  tmp = mwifiex_hscfg_read(arg0,arg1,arg2,arg3);
  
#line 102 
  return tmp;
}


#line 106  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_debugfs.c.aux"
long ldv_emg_wrapper_mwifiex_memrw_read_3(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  long tmp;
  
#line 107 
  tmp = mwifiex_memrw_read(arg0,arg1,arg2,arg3);
  
#line 107 
  return tmp;
}


#line 111  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_debugfs.c.aux"
long ldv_emg_wrapper_mwifiex_regrdwr_read_3(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  long tmp;
  
#line 112 
  tmp = mwifiex_regrdwr_read(arg0,arg1,arg2,arg3);
  
#line 112 
  return tmp;
}


#line 116  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_debugfs.c.aux"
long ldv_emg_wrapper_mwifiex_device_dump_read_3(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  long tmp;
  
#line 117 
  tmp = mwifiex_device_dump_read(arg0,arg1,arg2,arg3);
  
#line 117 
  return tmp;
}


#line 121  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_debugfs.c.aux"
long ldv_emg_wrapper_mwifiex_rdeeprom_write_4(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  long tmp;
  
#line 122 
  tmp = mwifiex_rdeeprom_write(arg0,(char const *)arg1,arg2,arg3);
  
#line 122 
  return tmp;
}


#line 126  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_debugfs.c.aux"
long ldv_emg_wrapper_mwifiex_debug_read_3(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  long tmp;
  
#line 127 
  tmp = mwifiex_debug_read(arg0,arg1,arg2,arg3);
  
#line 127 
  return tmp;
}


#line 131  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_debugfs.c.aux"
long ldv_emg_wrapper_mwifiex_rdeeprom_read_3(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  long tmp;
  
#line 132 
  tmp = mwifiex_rdeeprom_read(arg0,arg1,arg2,arg3);
  
#line 132 
  return tmp;
}


#line 136  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_debugfs.c.aux"
long ldv_emg_wrapper_mwifiex_histogram_read_3(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  long tmp;
  
#line 137 
  tmp = mwifiex_histogram_read(arg0,arg1,arg2,arg3);
  
#line 137 
  return tmp;
}


#line 141  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_debugfs.c.aux"
long ldv_emg_wrapper_mwifiex_regrdwr_write_4(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  long tmp;
  
#line 142 
  tmp = mwifiex_regrdwr_write(arg0,(char const *)arg1,arg2,arg3);
  
#line 142 
  return tmp;
}


#line 146  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_debugfs.c.aux"
long ldv_emg_wrapper_mwifiex_getlog_read_3(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  long tmp;
  
#line 147 
  tmp = mwifiex_getlog_read(arg0,arg1,arg2,arg3);
  
#line 147 
  return tmp;
}


#line 151  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_debugfs.c.aux"
long ldv_emg_wrapper_mwifiex_debug_mask_write_4(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  long tmp;
  
#line 152 
  tmp = mwifiex_debug_mask_write(arg0,(char const *)arg1,arg2,arg3);
  
#line 152 
  return tmp;
}


#line 156  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_debugfs.c.aux"
long ldv_emg_wrapper_mwifiex_debug_mask_read_3(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  long tmp;
  
#line 157 
  tmp = mwifiex_debug_mask_read(arg0,arg1,arg2,arg3);
  
#line 157 
  return tmp;
}


#line 886  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_debugfs.c.aux"
static struct dentry *ldv_debugfs_create_file_78(char const *ldv_func_arg1, umode_t ldv_func_arg2, struct dentry *ldv_func_arg3, void *ldv_func_arg4, struct file_operations const *ldv_func_arg5)
{
  struct dentry *tmp;
  
#line 890 
  tmp = ldv_emg_debugfs_create_file((char *)ldv_func_arg1,(unsigned short)((int)ldv_func_arg2),ldv_func_arg3,ldv_func_arg4,(struct file_operations *)ldv_func_arg5);
  
#line 890 
  return tmp;
}


#line 894  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_debugfs.c.aux"
static struct dentry *ldv_debugfs_create_file_79(char const *ldv_func_arg1, umode_t ldv_func_arg2, struct dentry *ldv_func_arg3, void *ldv_func_arg4, struct file_operations const *ldv_func_arg5)
{
  struct dentry *tmp;
  
#line 898 
  tmp = ldv_emg_debugfs_create_file((char *)ldv_func_arg1,(unsigned short)((int)ldv_func_arg2),ldv_func_arg3,ldv_func_arg4,(struct file_operations *)ldv_func_arg5);
  
#line 898 
  return tmp;
}


#line 902  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_debugfs.c.aux"
static struct dentry *ldv_debugfs_create_file_80(char const *ldv_func_arg1, umode_t ldv_func_arg2, struct dentry *ldv_func_arg3, void *ldv_func_arg4, struct file_operations const *ldv_func_arg5)
{
  struct dentry *tmp;
  
#line 906 
  tmp = ldv_emg_debugfs_create_file((char *)ldv_func_arg1,(unsigned short)((int)ldv_func_arg2),ldv_func_arg3,ldv_func_arg4,(struct file_operations *)ldv_func_arg5);
  
#line 906 
  return tmp;
}


#line 910  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_debugfs.c.aux"
static struct dentry *ldv_debugfs_create_file_81(char const *ldv_func_arg1, umode_t ldv_func_arg2, struct dentry *ldv_func_arg3, void *ldv_func_arg4, struct file_operations const *ldv_func_arg5)
{
  struct dentry *tmp;
  
#line 914 
  tmp = ldv_emg_debugfs_create_file((char *)ldv_func_arg1,(unsigned short)((int)ldv_func_arg2),ldv_func_arg3,ldv_func_arg4,(struct file_operations *)ldv_func_arg5);
  
#line 914 
  return tmp;
}


#line 918  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_debugfs.c.aux"
static struct dentry *ldv_debugfs_create_file_82(char const *ldv_func_arg1, umode_t ldv_func_arg2, struct dentry *ldv_func_arg3, void *ldv_func_arg4, struct file_operations const *ldv_func_arg5)
{
  struct dentry *tmp;
  
#line 922 
  tmp = ldv_emg_debugfs_create_file((char *)ldv_func_arg1,(unsigned short)((int)ldv_func_arg2),ldv_func_arg3,ldv_func_arg4,(struct file_operations *)ldv_func_arg5);
  
#line 922 
  return tmp;
}


#line 926  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_debugfs.c.aux"
static struct dentry *ldv_debugfs_create_file_83(char const *ldv_func_arg1, umode_t ldv_func_arg2, struct dentry *ldv_func_arg3, void *ldv_func_arg4, struct file_operations const *ldv_func_arg5)
{
  struct dentry *tmp;
  
#line 930 
  tmp = ldv_emg_debugfs_create_file((char *)ldv_func_arg1,(unsigned short)((int)ldv_func_arg2),ldv_func_arg3,ldv_func_arg4,(struct file_operations *)ldv_func_arg5);
  
#line 930 
  return tmp;
}


#line 934  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_debugfs.c.aux"
static struct dentry *ldv_debugfs_create_file_84(char const *ldv_func_arg1, umode_t ldv_func_arg2, struct dentry *ldv_func_arg3, void *ldv_func_arg4, struct file_operations const *ldv_func_arg5)
{
  struct dentry *tmp;
  
#line 938 
  tmp = ldv_emg_debugfs_create_file((char *)ldv_func_arg1,(unsigned short)((int)ldv_func_arg2),ldv_func_arg3,ldv_func_arg4,(struct file_operations *)ldv_func_arg5);
  
#line 938 
  return tmp;
}


#line 942  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_debugfs.c.aux"
static struct dentry *ldv_debugfs_create_file_85(char const *ldv_func_arg1, umode_t ldv_func_arg2, struct dentry *ldv_func_arg3, void *ldv_func_arg4, struct file_operations const *ldv_func_arg5)
{
  struct dentry *tmp;
  
#line 946 
  tmp = ldv_emg_debugfs_create_file((char *)ldv_func_arg1,(unsigned short)((int)ldv_func_arg2),ldv_func_arg3,ldv_func_arg4,(struct file_operations *)ldv_func_arg5);
  
#line 946 
  return tmp;
}


#line 950  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_debugfs.c.aux"
static struct dentry *ldv_debugfs_create_file_86(char const *ldv_func_arg1, umode_t ldv_func_arg2, struct dentry *ldv_func_arg3, void *ldv_func_arg4, struct file_operations const *ldv_func_arg5)
{
  struct dentry *tmp;
  
#line 954 
  tmp = ldv_emg_debugfs_create_file((char *)ldv_func_arg1,(unsigned short)((int)ldv_func_arg2),ldv_func_arg3,ldv_func_arg4,(struct file_operations *)ldv_func_arg5);
  
#line 954 
  return tmp;
}


#line 958  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_debugfs.c.aux"
static struct dentry *ldv_debugfs_create_file_87(char const *ldv_func_arg1, umode_t ldv_func_arg2, struct dentry *ldv_func_arg3, void *ldv_func_arg4, struct file_operations const *ldv_func_arg5)
{
  struct dentry *tmp;
  
#line 962 
  tmp = ldv_emg_debugfs_create_file((char *)ldv_func_arg1,(unsigned short)((int)ldv_func_arg2),ldv_func_arg3,ldv_func_arg4,(struct file_operations *)ldv_func_arg5);
  
#line 962 
  return tmp;
}


#line 966  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_debugfs.c.aux"
static void ldv_debugfs_remove_88(struct dentry *ldv_func_arg1)
{
  
#line 970 
  ldv_emg_debugfs_remove(ldv_func_arg1);
  
#line 971 
  return;
}


#line 446  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_unlock_irqrestore_10(spinlock_t *lock, unsigned long flags)
{
  {
    unsigned long __dummy;
    unsigned long __dummy2;
    
  }
  
#line 448 
  _raw_spin_unlock_irqrestore(& lock->__anonCompField_spinlock_18.rlock,flags);
  
#line 449 
  return;
}


#line 482 
static void ldv_spin_unlock_irqrestore_79_8(spinlock_t *lock, unsigned long flags);


#line 486 
static void ldv_spin_unlock_irqrestore_81_6(spinlock_t *lock, unsigned long flags);


#line 490 
static void ldv_spin_unlock_irqrestore_83_7(spinlock_t *lock, unsigned long flags);


#line 494 
static void ldv_spin_unlock_irqrestore_85_5(spinlock_t *lock, unsigned long flags);


#line 74  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_sta_cmdresp.c.aux"
static void ldv___ldv_spin_lock_78_7(spinlock_t *ldv_func_arg1);


#line 78 
static void ldv___ldv_spin_lock_80_5(spinlock_t *ldv_func_arg1);


#line 82 
static void ldv___ldv_spin_lock_82_6(spinlock_t *ldv_func_arg1);


#line 86 
static void ldv___ldv_spin_lock_84_3(spinlock_t *ldv_func_arg1);


#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11n.h"
int mwifiex_ret_11n_delba(struct mwifiex_private *priv, struct host_cmd_ds_command *resp);


#line 29 
int mwifiex_ret_11n_addba_req(struct mwifiex_private *priv, struct host_cmd_ds_command *resp);


#line 44  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11ac.h"
static void mwifiex_process_cmdresp_error(struct mwifiex_private *priv, struct host_cmd_ds_command *resp)
{
  struct cmd_ctrl_node *tmp_node;
  struct host_cmd_ds_802_11_ps_mode_enh *pm;
  unsigned long flags;
  
#line 47  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_cmdresp.c"
  struct cmd_ctrl_node *cmd_node = (struct cmd_ctrl_node *)0;
  
#line 48 
  struct mwifiex_adapter *adapter = priv->adapter;
  
#line 52 
  if ((adapter->debug_mask & 4U) != 0U) {
    
#line 52 
    if (adapter->dev != (struct device *)0) 
#line 52 
                                            _dev_info((struct device const *)adapter->dev,"CMD_RESP: cmd %#x error, result=%#x\n",(int)resp->command,(int)resp->result); else ;
  }
  else ;
  
#line 56 
  if ((adapter->curr_cmd)->wait_q_enabled != 0U) 
#line 57 
                                                 adapter->cmd_wait_q.status = -1; else ;
  
#line 59 
  switch ((int)resp->command) {
    struct cmd_ctrl_node *tmp;
    struct cmd_ctrl_node *tmp_0;
    struct cmd_ctrl_node *tmp_1;
    case 228: 
#line 60 
    ;
    
#line 61 
    pm = & resp->params.psmode_enh;
    
#line 62 
    if ((adapter->debug_mask & 4U) != 0U) {
      
#line 62 
      if (adapter->dev != (struct device *)0) 
#line 62 
                                              _dev_info((struct device const *)adapter->dev,"PS_MODE_ENH cmd failed: result=0x%x action=0x%X\n",(int)resp->result,(int)pm->action); else ;
    }
    else ;
    
#line 66 
    if (((unsigned int)pm->action == 255U && ((int)pm->params.ps_bitmap & 16) != 0) && priv->bss_mode == 1U) 
      
#line 69 
      adapter->ps_mode = (unsigned short)0U; else ;
    
#line 71 
    goto ldv_61529;
    case 6: 
#line 72 
    ;
    case 263: 
#line 73 
    ;
    
#line 75 
    ldv___ldv_spin_lock_78_7(& adapter->scan_pending_q_lock);
    {
      
#line 76 
      struct list_head const *__mptr = (struct list_head const *)adapter->scan_pending_q.next;
      
#line 76 
      tmp = (struct cmd_ctrl_node *)__mptr;
    }
    
#line 76 
    cmd_node = tmp;
    {
      
#line 76 
      struct list_head const *__mptr_0 = (struct list_head const *)cmd_node->list.next;
      
#line 76 
      tmp_0 = (struct cmd_ctrl_node *)__mptr_0;
    }
    
#line 77 
    tmp_node = tmp_0;
    
#line 76 
    goto ldv_61539;
    ldv_61538: 
#line 77 
    ;
    
#line 78 
    list_del(& cmd_node->list);
    
#line 79 
    ldv_spin_unlock_irqrestore_79_8(& adapter->scan_pending_q_lock,flags);
    
#line 81 
    mwifiex_insert_cmd_to_free_q(adapter,cmd_node);
    
#line 82 
    ldv___ldv_spin_lock_80_5(& adapter->scan_pending_q_lock);
    
#line 76 
    cmd_node = tmp_node;
    {
      
#line 76 
      struct list_head const *__mptr_1 = (struct list_head const *)tmp_node->list.next;
      
#line 76 
      tmp_1 = (struct cmd_ctrl_node *)__mptr_1;
    }
    
#line 76 
    tmp_node = tmp_1;
    ldv_61539: 
#line 78 
    ;
    
#line 76 
    if (& cmd_node->list != & adapter->scan_pending_q) 
#line 78 
                                                       goto ldv_61538; else 
                                                                    
#line 81 
                                                                    goto ldv_61540;
    ldv_61540: 
#line 82 
    ;
    
#line 84 
    ldv_spin_unlock_irqrestore_81_6(& adapter->scan_pending_q_lock,flags);
    
#line 86 
    ldv___ldv_spin_lock_82_6(& adapter->mwifiex_cmd_lock);
    
#line 87 
    adapter->scan_processing = 0U;
    
#line 88 
    ldv_spin_unlock_irqrestore_83_7(& adapter->mwifiex_cmd_lock,flags);
    
#line 89 
    goto ldv_61529;
    case 40: 
#line 91 
    ;
    
#line 92 
    goto ldv_61529;
    case 547: 
#line 94 
    ;
    
#line 95 
    if ((adapter->debug_mask & 1U) != 0U) {
      
#line 95 
      if (adapter->dev != (struct device *)0) 
#line 95 
                                              _dev_info((struct device const *)adapter->dev,"SDIO RX single-port aggregation Not support\n"); else ;
    }
    else ;
    
#line 97 
    goto ldv_61529;
    default: 
#line 99 
    ;
    
#line 100 
    goto ldv_61529;
  }
  ldv_61529: 
#line 103 
  ;
  
#line 103 
  mwifiex_recycle_cmd_node(adapter,adapter->curr_cmd);
  
#line 105 
  ldv___ldv_spin_lock_84_3(& adapter->mwifiex_cmd_lock);
  
#line 106 
  adapter->curr_cmd = (struct cmd_ctrl_node *)0;
  
#line 107 
  ldv_spin_unlock_irqrestore_85_5(& adapter->mwifiex_cmd_lock,flags);
  
#line 108 
  return;
}


#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_cmdresp.c"
static int mwifiex_ret_802_11_rssi_info(struct mwifiex_private *priv, struct host_cmd_ds_command *resp)
{
  int __retres;
  
#line 126 
  struct host_cmd_ds_802_11_rssi_info_rsp *rssi_info_rsp = & resp->params.rssi_info_rsp;
  
#line 128 
  struct mwifiex_ds_misc_subsc_evt *subsc_evt = & priv->async_subsc_evt_storage;
  
#line 131 
  priv->data_rssi_last = (short)rssi_info_rsp->data_rssi_last;
  
#line 132 
  priv->data_nf_last = (short)rssi_info_rsp->data_nf_last;
  
#line 134 
  priv->data_rssi_avg = (short)rssi_info_rsp->data_rssi_avg;
  
#line 135 
  priv->data_nf_avg = (short)rssi_info_rsp->data_nf_avg;
  
#line 137 
  priv->bcn_rssi_last = (short)rssi_info_rsp->bcn_rssi_last;
  
#line 138 
  priv->bcn_nf_last = (short)rssi_info_rsp->bcn_nf_last;
  
#line 140 
  priv->bcn_rssi_avg = (short)rssi_info_rsp->bcn_rssi_avg;
  
#line 141 
  priv->bcn_nf_avg = (short)rssi_info_rsp->bcn_nf_avg;
  
#line 143 
  if ((unsigned int)priv->subsc_evt_rssi_state == 0U) {
    
#line 144 
    __retres = 0;
    
#line 144 
    goto return_label;
  }
  else ;
  
#line 146 
  memset((void *)subsc_evt,0,8UL);
  
#line 149 
  subsc_evt->events = (unsigned short)17U;
  
#line 150 
  subsc_evt->action = (unsigned short)2U;
  
#line 151 
  if ((unsigned int)priv->subsc_evt_rssi_state == 1U) {
    long tmp_0;
    long tmp_2;
    {
      long ret;
      {
        int tmp;
        
#line 152 
        int __x_0 = (int)((unsigned int)priv->bcn_rssi_avg - priv->cqm_rssi_hyst);
        
#line 152 
        if (__x_0 < 0) 
#line 152 
                       tmp = - __x_0; else 
#line 152 
                                           tmp = __x_0;
        
#line 152 
        ret = (long)tmp;
      }
      
#line 152 
      tmp_0 = ret;
    }
    
#line 152 
    subsc_evt->bcn_l_rssi_cfg.abs_value = (unsigned char)tmp_0;
    {
      long ret_0;
      {
        int tmp_1;
        
#line 154 
        int __x_2 = priv->cqm_rssi_thold;
        
#line 154 
        if (__x_2 < 0) 
#line 154 
                       tmp_1 = - __x_2; else 
#line 154 
                                             tmp_1 = __x_2;
        
#line 154 
        ret_0 = (long)tmp_1;
      }
      
#line 154 
      tmp_2 = ret_0;
    }
    
#line 154 
    subsc_evt->bcn_h_rssi_cfg.abs_value = (unsigned char)tmp_2;
  }
  else 
    
#line 155 
    if ((unsigned int)priv->subsc_evt_rssi_state == 2U) {
      long tmp_4;
      long tmp_6;
      {
        long ret_1;
        {
          int tmp_3;
          
#line 156 
          int __x_4 = priv->cqm_rssi_thold;
          
#line 156 
          if (__x_4 < 0) 
#line 156 
                         tmp_3 = - __x_4; else 
#line 156 
                                               tmp_3 = __x_4;
          
#line 156 
          ret_1 = (long)tmp_3;
        }
        
#line 156 
        tmp_4 = ret_1;
      }
      
#line 156 
      subsc_evt->bcn_l_rssi_cfg.abs_value = (unsigned char)tmp_4;
      {
        long ret_2;
        {
          int tmp_5;
          
#line 157 
          int __x_6 = (int)((unsigned int)priv->bcn_rssi_avg + priv->cqm_rssi_hyst);
          
#line 157 
          if (__x_6 < 0) 
#line 157 
                         tmp_5 = - __x_6; else 
#line 157 
                                               tmp_5 = __x_6;
          
#line 157 
          ret_2 = (long)tmp_5;
        }
        
#line 157 
        tmp_6 = ret_2;
      }
      
#line 157 
      subsc_evt->bcn_h_rssi_cfg.abs_value = (unsigned char)tmp_6;
    }
    else ;
  
#line 160 
  subsc_evt->bcn_l_rssi_cfg.evt_freq = (unsigned char)1U;
  
#line 161 
  subsc_evt->bcn_h_rssi_cfg.evt_freq = (unsigned char)1U;
  
#line 163 
  priv->subsc_evt_rssi_state = (unsigned char)0U;
  
#line 165 
  mwifiex_send_cmd(priv,(unsigned short)117,(unsigned short)0,0U,(void *)subsc_evt,(_Bool)0);
  
#line 168 
  __retres = 0;
  return_label: 
#line 168 
                return __retres;
}


#line 183  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_cmdresp.c"
static int mwifiex_ret_802_11_snmp_mib(struct mwifiex_private *priv, struct host_cmd_ds_command *resp, u32 *data_buf)
{
  int __retres;
  u32 ul_temp;
  
#line 187 
  struct host_cmd_ds_802_11_snmp_mib *smib = & resp->params.smib;
  
#line 188 
  u16 oid = smib->oid;
  
#line 189 
  u16 query_type = smib->query_type;
  
#line 192 
  if (((priv->adapter)->debug_mask & 1073741824U) != 0U) {
    
#line 192 
    if ((priv->adapter)->dev != (struct device *)0) 
#line 192 
                                                    _dev_info((struct device const *)(priv->adapter)->dev,"info: SNMP_RESP: oid value = %#x,\t",(int)oid,(int)query_type,(int)smib->buf_size); else ;
  }
  else ;
  
#line 196 
  if ((unsigned int)query_type == 0U) {
    
#line 197 
    ul_temp = (unsigned int)*((__le16 *)(& smib->value));
    
#line 198 
    if (data_buf != (u32 *)0U) 
#line 199 
                               *data_buf = ul_temp; else ;
    
#line 200 
    switch ((int)oid) {
      case 8: 
#line 201 
      ;
      
#line 202 
      if (((priv->adapter)->debug_mask & 1073741824U) != 0U) {
        
#line 202 
        if ((priv->adapter)->dev != (struct device *)0) 
#line 202 
                                                        _dev_info((struct device const *)(priv->adapter)->dev,"info: SNMP_RESP: FragThsd =%u\n",ul_temp); else ;
      }
      else ;
      
#line 205 
      goto ldv_61576;
      case 5: 
#line 206 
      ;
      
#line 207 
      if (((priv->adapter)->debug_mask & 1073741824U) != 0U) {
        
#line 207 
        if ((priv->adapter)->dev != (struct device *)0) 
#line 207 
                                                        _dev_info((struct device const *)(priv->adapter)->dev,"info: SNMP_RESP: RTSThsd =%u\n",ul_temp); else ;
      }
      else ;
      
#line 210 
      goto ldv_61576;
      case 6: 
#line 211 
      ;
      
#line 212 
      if (((priv->adapter)->debug_mask & 1073741824U) != 0U) {
        
#line 212 
        if ((priv->adapter)->dev != (struct device *)0) 
#line 212 
                                                        _dev_info((struct device const *)(priv->adapter)->dev,"info: SNMP_RESP: TxRetryCount=%u\n",ul_temp); else ;
      }
      else ;
      
#line 215 
      goto ldv_61576;
      case 3: 
#line 216 
      ;
      
#line 217 
      if (((priv->adapter)->debug_mask & 1073741824U) != 0U) {
        
#line 217 
        if ((priv->adapter)->dev != (struct device *)0) 
#line 217 
                                                        _dev_info((struct device const *)(priv->adapter)->dev,"info: SNMP_RESP: DTIM period=%u\n",ul_temp); else ;
      }
      else ;
      default: 
#line 220 
      ;
      
#line 221 
      goto ldv_61576;
    }
    ldv_61576: 
#line 223 
    ;
  }
  else ;
  
#line 225 
  __retres = 0;
  
#line 225 
  return __retres;
}


#line 234  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_cmdresp.c"
static int mwifiex_ret_get_log(struct mwifiex_private *priv, struct host_cmd_ds_command *resp, struct mwifiex_ds_get_stats *stats)
{
  int __retres;
  
#line 238 
  struct host_cmd_ds_802_11_get_log *get_log = & resp->params.get_log;
  
#line 241 
  if (stats != (struct mwifiex_ds_get_stats *)0) {
    
#line 242 
    stats->mcast_tx_frame = get_log->mcast_tx_frame;
    
#line 243 
    stats->failed = get_log->failed;
    
#line 244 
    stats->retry = get_log->retry;
    
#line 245 
    stats->multi_retry = get_log->multi_retry;
    
#line 246 
    stats->frame_dup = get_log->frame_dup;
    
#line 247 
    stats->rts_success = get_log->rts_success;
    
#line 248 
    stats->rts_failure = get_log->rts_failure;
    
#line 249 
    stats->ack_failure = get_log->ack_failure;
    
#line 250 
    stats->rx_frag = get_log->rx_frag;
    
#line 251 
    stats->mcast_rx_frame = get_log->mcast_rx_frame;
    
#line 252 
    stats->fcs_error = get_log->fcs_error;
    
#line 253 
    stats->tx_frame = get_log->tx_frame;
    
#line 254 
    stats->wep_icv_error[0] = get_log->wep_icv_err_cnt[0];
    
#line 256 
    stats->wep_icv_error[1] = get_log->wep_icv_err_cnt[1];
    
#line 258 
    stats->wep_icv_error[2] = get_log->wep_icv_err_cnt[2];
    
#line 260 
    stats->wep_icv_error[3] = get_log->wep_icv_err_cnt[3];
    
#line 262 
    stats->bcn_rcv_cnt = get_log->bcn_rcv_cnt;
    
#line 263 
    stats->bcn_miss_cnt = get_log->bcn_miss_cnt;
  }
  else ;
  
#line 266 
  __retres = 0;
  
#line 266 
  return __retres;
}


#line 283  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_cmdresp.c"
static int mwifiex_ret_tx_rate_cfg(struct mwifiex_private *priv, struct host_cmd_ds_command *resp)
{
  int __retres;
  struct mwifiex_rate_scope *rate_scope;
  struct mwifiex_ie_types_header *head;
  u16 tlv;
  u16 tlv_buf_len;
  u16 tlv_buf_left;
  u8 *tlv_buf;
  u32 i;
  
#line 286 
  struct host_cmd_ds_tx_rate_cfg *rate_cfg = & resp->params.tx_rate_cfg;
  
#line 293 
  tlv_buf = (u8 *)rate_cfg + 4U;
  
#line 294 
  tlv_buf_left = (unsigned short)((unsigned int)resp->size + 65524U);
  
#line 296 
  goto ldv_61612;
  ldv_61611: 
#line 297 
  ;
  
#line 297 
  head = (struct mwifiex_ie_types_header *)tlv_buf;
  
#line 298 
  tlv = head->type;
  
#line 299 
  tlv_buf_len = head->len;
  
#line 301 
  if ((unsigned long)tlv_buf_left < (unsigned long)tlv_buf_len + 4UL) 
    
#line 302 
    goto ldv_61599; else ;
  
#line 304 
  switch ((int)tlv) {
    case 339: 
#line 305 
    ;
    
#line 306 
    rate_scope = (struct mwifiex_rate_scope *)tlv_buf;
    
#line 307 
    priv->bitmap_rates[0] = rate_scope->hr_dsss_rate_bitmap;
    
#line 309 
    priv->bitmap_rates[1] = rate_scope->ofdm_rate_bitmap;
    
#line 311 
    i = 0U;
    
#line 311 
    goto ldv_61602;
    ldv_61601: 
#line 312 
    ;
    
#line 315 
    priv->bitmap_rates[i + 2U] = rate_scope->ht_mcs_rate_bitmap[i];
    
#line 314 
    i += 1U;
    ldv_61602: 
#line 315 
    ;
    
#line 311 
    if (i <= 7U) 
#line 314 
                 goto ldv_61601; else 
#line 317 
                                      goto ldv_61603;
    ldv_61603: 
#line 318 
    ;
    
#line 319 
    if ((unsigned int)(priv->adapter)->fw_api_ver == 15U) {
      
#line 320 
      i = 0U;
      
#line 320 
      goto ldv_61608;
      ldv_61607: 
#line 321 
      ;
      
#line 323 
      priv->bitmap_rates[i + 10U] = rate_scope->vht_mcs_rate_bitmap[i];
      
#line 322 
      i += 1U;
      ldv_61608: 
#line 323 
      ;
      
#line 320 
      if (i <= 7U) 
#line 322 
                   goto ldv_61607; else 
#line 325 
                                        goto ldv_61609;
      ldv_61609: 
#line 326 
      ;
    }
    else ;
    
#line 327 
    goto ldv_61610;
  }
  ldv_61610: 
#line 331 
  ;
  
#line 331 
  tlv_buf += (unsigned long)tlv_buf_len + 4UL;
  
#line 332 
  tlv_buf_left = (unsigned short)((unsigned int)((int)tlv_buf_left - (int)tlv_buf_len) + 65532U);
  ldv_61612: 
#line 333 
  ;
  
#line 296 
  if ((unsigned int)tlv_buf_left > 3U) 
#line 298 
                                       goto ldv_61611; else 
#line 301 
                                                            goto ldv_61599;
  ldv_61599: 
#line 302 
  ;
  
#line 335 
  priv->is_data_rate_auto = mwifiex_is_rate_auto(priv);
  
#line 337 
  if ((unsigned int)priv->is_data_rate_auto != 0U) 
#line 338 
                                                   priv->data_rate = 0U;
  else {
    int tmp;
    
#line 340 
    tmp = mwifiex_send_cmd(priv,(unsigned short)127,(unsigned short)0,0U,(void *)0,(_Bool)0);
    
#line 340 
    __retres = tmp;
    
#line 340 
    goto return_label;
  }
  
#line 343 
  __retres = 0;
  return_label: 
#line 343 
                return __retres;
}


#line 352  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_cmdresp.c"
static int mwifiex_get_power_level(struct mwifiex_private *priv, void *data_buf)
{
  int __retres;
  int length;
  struct mwifiex_types_power_group *pg_tlv_hdr;
  struct mwifiex_power_group *pg;
  
#line 354 
  int max_power = -1;
  
#line 354 
  int min_power = -1;
  
#line 358 
  if (data_buf == (void *)0) {
    
#line 359 
    __retres = -1;
    
#line 359 
    goto return_label;
  }
  else ;
  
#line 361 
  pg_tlv_hdr = (struct mwifiex_types_power_group *)data_buf;
  
#line 362 
  pg = (struct mwifiex_power_group *)pg_tlv_hdr + 4U;
  
#line 364 
  length = (int)pg_tlv_hdr->length;
  
#line 367 
  if ((unsigned int)length <= 7U) {
    
#line 368 
    __retres = 0;
    
#line 368 
    goto return_label;
  }
  else ;
  
#line 370 
  max_power = (int)pg->power_max;
  
#line 371 
  min_power = (int)pg->power_min;
  
#line 372 
  length = (int)((unsigned int)length + 4294967288U);
  
#line 374 
  goto ldv_61623;
  ldv_61622: 
#line 375 
  ;
  
#line 375 
  pg += 1;
  
#line 376 
  if ((int)pg->power_max > max_power) 
#line 377 
                                      max_power = (int)pg->power_max; else ;
  
#line 379 
  if ((int)pg->power_min < min_power) 
#line 380 
                                      min_power = (int)pg->power_min; else ;
  
#line 382 
  length = (int)((unsigned int)length + 4294967288U);
  ldv_61623: 
#line 383 
  ;
  
#line 374 
  if ((unsigned int)length > 7U) 
#line 376 
                                 goto ldv_61622; else 
#line 379 
                                                      goto ldv_61624;
  ldv_61624: 
#line 380 
  ;
  
#line 384 
  priv->min_tx_power_level = (unsigned char)min_power;
  
#line 385 
  priv->max_tx_power_level = (unsigned char)max_power;
  
#line 387 
  __retres = 0;
  return_label: 
#line 387 
                return __retres;
}


#line 397  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_cmdresp.c"
static int mwifiex_ret_tx_power_cfg(struct mwifiex_private *priv, struct host_cmd_ds_command *resp)
{
  int __retres;
  struct mwifiex_types_power_group *pg_tlv_hdr;
  struct mwifiex_power_group *pg;
  u16 tlv_buf_left;
  
#line 400 
  struct mwifiex_adapter *adapter = priv->adapter;
  
#line 401 
  struct host_cmd_ds_txpwr_cfg *txp_cfg = & resp->params.txp_cfg;
  
#line 404 
  u16 action = txp_cfg->action;
  
#line 407 
  pg_tlv_hdr = (struct mwifiex_types_power_group *)txp_cfg + 8U;
  
#line 411 
  pg = (struct mwifiex_power_group *)pg_tlv_hdr + 4U;
  
#line 415 
  tlv_buf_left = (unsigned short)((unsigned int)resp->size + 65520U);
  
#line 416 
  if ((unsigned long)tlv_buf_left < (unsigned long)pg_tlv_hdr->length + 4UL) {
    
#line 418 
    __retres = 0;
    
#line 418 
    goto return_label;
  }
  else ;
  
#line 420 
  switch ((int)action) {
    case 0: 
#line 421 
    ;
    
#line 422 
    if (adapter->hw_status == (unsigned int)MWIFIEX_HW_STATUS_INITIALIZING) 
      
#line 423 
      mwifiex_get_power_level(priv,(void *)pg_tlv_hdr); else ;
    
#line 425 
    priv->tx_power_level = (unsigned short)pg->power_min;
    
#line 426 
    goto ldv_61636;
    case 1: 
#line 428 
    ;
    
#line 429 
    if (txp_cfg->mode == 0U) 
#line 430 
                             goto ldv_61636; else ;
    
#line 432 
    if ((int)pg->power_max == (int)pg->power_min) 
#line 433 
                                                  priv->tx_power_level = (unsigned short)pg->power_min; else ;
    
#line 434 
    goto ldv_61636;
    default: 
#line 435 
    ;
    
#line 436 
    if ((adapter->debug_mask & 4U) != 0U) {
      
#line 436 
      if (adapter->dev != (struct device *)0) 
#line 436 
                                              _dev_info((struct device const *)adapter->dev,"CMD_RESP: unknown cmd action %d\n",(int)action); else ;
    }
    else ;
    
#line 439 
    __retres = 0;
    
#line 439 
    goto return_label;
  }
  ldv_61636: 
#line 441 
  ;
  
#line 441 
  if ((adapter->debug_mask & 1073741824U) != 0U) {
    
#line 441 
    if (adapter->dev != (struct device *)0) 
#line 441 
                                            _dev_info((struct device const *)adapter->dev,"info: Current TxPower Level = %d, Max Power=%d, Min Power=%d\n",(int)priv->tx_power_level,(int)priv->max_tx_power_level,(int)priv->min_tx_power_level); else ;
  }
  else ;
  
#line 446 
  __retres = 0;
  return_label: 
#line 446 
                return __retres;
}


#line 452  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_cmdresp.c"
static int mwifiex_ret_rf_tx_power(struct mwifiex_private *priv, struct host_cmd_ds_command *resp)
{
  int __retres;
  
#line 455 
  struct host_cmd_ds_rf_tx_pwr *txp = & resp->params.txp;
  
#line 456 
  u16 action = txp->action;
  
#line 458 
  priv->tx_power_level = txp->cur_level;
  
#line 460 
  if ((unsigned int)action == 0U) {
    
#line 461 
    priv->max_tx_power_level = txp->max_power;
    
#line 462 
    priv->min_tx_power_level = txp->min_power;
  }
  else ;
  
#line 465 
  if (((priv->adapter)->debug_mask & 1073741824U) != 0U) {
    
#line 465 
    if ((priv->adapter)->dev != (struct device *)0) 
#line 465 
                                                    _dev_info((struct device const *)(priv->adapter)->dev,"Current TxPower Level=%d, Max Power=%d, Min Power=%d\n",(int)priv->tx_power_level,(int)priv->max_tx_power_level,(int)priv->min_tx_power_level); else ;
  }
  else ;
  
#line 470 
  __retres = 0;
  
#line 470 
  return __retres;
}


#line 476  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_cmdresp.c"
static int mwifiex_ret_rf_antenna(struct mwifiex_private *priv, struct host_cmd_ds_command *resp)
{
  int __retres;
  
#line 479 
  struct host_cmd_ds_rf_ant_mimo *ant_mimo = & resp->params.ant_mimo;
  
#line 480 
  struct host_cmd_ds_rf_ant_siso *ant_siso = & resp->params.ant_siso;
  
#line 481 
  struct mwifiex_adapter *adapter = priv->adapter;
  
#line 483 
  if ((unsigned int)adapter->hw_dev_mcs_support == 34U) {
    
#line 484 
    if ((adapter->debug_mask & 1073741824U) != 0U) {
      
#line 484 
      if (adapter->dev != (struct device *)0) 
#line 484 
                                              _dev_info((struct device const *)adapter->dev,"RF_ANT_RESP: Tx action = 0x%x, Tx Mode = 0x%04x\t",(int)ant_mimo->action_tx,(int)ant_mimo->tx_ant_mode,(int)ant_mimo->action_rx,(int)ant_mimo->rx_ant_mode); else ;
    }
    else ;
  }
  else 
    
#line 492 
    if ((adapter->debug_mask & 1073741824U) != 0U) {
      
#line 492 
      if (adapter->dev != (struct device *)0) 
#line 492 
                                              _dev_info((struct device const *)adapter->dev,"RF_ANT_RESP: action = 0x%x, Mode = 0x%04x\n",(int)ant_siso->action,(int)ant_siso->ant_mode); else ;
    }
    else ;
  
#line 497 
  __retres = 0;
  
#line 497 
  return __retres;
}


#line 505  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_cmdresp.c"
static int mwifiex_ret_802_11_mac_address(struct mwifiex_private *priv, struct host_cmd_ds_command *resp)
{
  int __retres;
  
#line 508 
  struct host_cmd_ds_802_11_mac_address *cmd_mac_addr = & resp->params.mac_addr;
  
#line 511 
  memcpy((void *)(& priv->curr_addr),(void const *)(& cmd_mac_addr->mac_addr),6UL);
  
#line 513 
  if (((priv->adapter)->debug_mask & 1073741824U) != 0U) {
    
#line 513 
    if ((priv->adapter)->dev != (struct device *)0) 
#line 513 
                                                    _dev_info((struct device const *)(priv->adapter)->dev,"info: set mac address: %pM\n",(u8 *)(& priv->curr_addr)); else ;
  }
  else ;
  
#line 516 
  __retres = 0;
  
#line 516 
  return __retres;
}


#line 523  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_cmdresp.c"
static int mwifiex_ret_mac_multicast_adr(struct mwifiex_private *priv, struct host_cmd_ds_command *resp)
{
  int __retres;
  
#line 526 
  __retres = 0;
  
#line 526 
  return __retres;
}


#line 538  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_cmdresp.c"
static int mwifiex_ret_802_11_tx_rate_query(struct mwifiex_private *priv, struct host_cmd_ds_command *resp)
{
  int __retres;
  
#line 541 
  priv->tx_rate = resp->params.tx_rate.tx_rate;
  
#line 542 
  priv->tx_htinfo = resp->params.tx_rate.ht_info;
  
#line 543 
  if ((unsigned int)priv->is_data_rate_auto == 0U) 
#line 544 
                                                   priv->data_rate = mwifiex_index_to_data_rate(priv,(unsigned char)((int)priv->tx_rate),(unsigned char)((int)priv->tx_htinfo)); else ;
  
#line 548 
  __retres = 0;
  
#line 548 
  return __retres;
}


#line 558  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_cmdresp.c"
static int mwifiex_ret_802_11_deauthenticate(struct mwifiex_private *priv, struct host_cmd_ds_command *resp)
{
  int __retres;
  int tmp;
  
#line 561 
  struct mwifiex_adapter *adapter = priv->adapter;
  
#line 563 
  adapter->dbg.num_cmd_deauth += 1U;
  
#line 564 
  tmp = memcmp((void const *)(& resp->params.deauth.mac_addr),(void const *)(& priv->curr_bss_params.bss_descriptor.mac_address),6UL);
  
#line 564 
  if (tmp == 0) 
#line 567 
                mwifiex_reset_connect_state(priv,(unsigned short)3); else ;
  
#line 569 
  __retres = 0;
  
#line 569 
  return __retres;
}


#line 577  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_cmdresp.c"
static int mwifiex_ret_802_11_ad_hoc_stop(struct mwifiex_private *priv, struct host_cmd_ds_command *resp)
{
  int __retres;
  
#line 580 
  mwifiex_reset_connect_state(priv,(unsigned short)3);
  
#line 581 
  __retres = 0;
  
#line 581 
  return __retres;
}


#line 590  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_cmdresp.c"
static int mwifiex_ret_802_11_key_material_v1(struct mwifiex_private *priv, struct host_cmd_ds_command *resp)
{
  int __retres;
  
#line 593 
  struct host_cmd_ds_802_11_key_material *key = & resp->params.key_material;
  
#line 596 
  if ((unsigned int)key->action == 1U) {
    
#line 597 
    if (((unsigned long)key->key_param_set.key_info & 1UL) != 0UL) {
      
#line 598 
      if (((priv->adapter)->debug_mask & 1073741824U) != 0U) {
        
#line 598 
        if ((priv->adapter)->dev != (struct device *)0) 
#line 598 
                                                        _dev_info((struct device const *)(priv->adapter)->dev,"info: key: GTK is set\n"); else ;
      }
      else ;
      
#line 600 
      priv->wpa_is_gtk_set = (unsigned char)1U;
      
#line 601 
      priv->scan_block = (unsigned char)0U;
    }
    else ;
  }
  else ;
  
#line 605 
  memset((void *)(& priv->aes_key.key_param_set.key),0,50UL);
  
#line 607 
  priv->aes_key.key_param_set.key_len = key->key_param_set.key_len;
  
#line 608 
  memcpy((void *)(& priv->aes_key.key_param_set.key),(void const *)(& key->key_param_set.key),(unsigned long)priv->aes_key.key_param_set.key_len);
  
#line 611 
  __retres = 0;
  
#line 611 
  return __retres;
}


#line 620  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_cmdresp.c"
static int mwifiex_ret_802_11_key_material_v2(struct mwifiex_private *priv, struct host_cmd_ds_command *resp)
{
  int __retres;
  struct host_cmd_ds_802_11_key_material_v2 *key_v2;
  __le16 len;
  
#line 626 
  key_v2 = & resp->params.key_material_v2;
  
#line 627 
  if ((unsigned int)key_v2->action == 1U) {
    
#line 628 
    if (((unsigned long)key_v2->key_param_set.key_info & 1UL) != 0UL) {
      
#line 629 
      if (((priv->adapter)->debug_mask & 1073741824U) != 0U) {
        
#line 629 
        if ((priv->adapter)->dev != (struct device *)0) 
#line 629 
                                                        _dev_info((struct device const *)(priv->adapter)->dev,"info: key: GTK is set\n"); else ;
      }
      else ;
      
#line 630 
      priv->wpa_is_gtk_set = (unsigned char)1U;
      
#line 631 
      priv->scan_block = (unsigned char)0U;
    }
    else ;
  }
  else ;
  
#line 635 
  if ((unsigned int)key_v2->key_param_set.key_type != 2U) {
    
#line 636 
    __retres = 0;
    
#line 636 
    goto return_label;
  }
  else ;
  
#line 638 
  memset((void *)(& priv->aes_key_v2.key_param_set.key_params.aes.key),0,16UL);
  
#line 640 
  priv->aes_key_v2.key_param_set.key_params.aes.key_len = key_v2->key_param_set.key_params.aes.key_len;
  
#line 642 
  len = priv->aes_key_v2.key_param_set.key_params.aes.key_len;
  
#line 643 
  memcpy((void *)(& priv->aes_key_v2.key_param_set.key_params.aes.key),(void const *)(& key_v2->key_param_set.key_params.aes.key),(unsigned long)len);
  
#line 646 
  __retres = 0;
  return_label: 
#line 646 
                return __retres;
}


#line 650  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_cmdresp.c"
static int mwifiex_ret_802_11_key_material(struct mwifiex_private *priv, struct host_cmd_ds_command *resp)
{
  int __retres;
  
#line 653 
  if ((unsigned int)(priv->adapter)->key_api_major_ver == 2U) {
    int tmp;
    
#line 654 
    tmp = mwifiex_ret_802_11_key_material_v2(priv,resp);
    
#line 654 
    __retres = tmp;
    
#line 654 
    goto return_label;
  }
  else {
    int tmp_0;
    
#line 656 
    tmp_0 = mwifiex_ret_802_11_key_material_v1(priv,resp);
    
#line 656 
    __retres = tmp_0;
    
#line 656 
    goto return_label;
  }
  return_label: 
#line 653 
                return __retres;
}


#line 662  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_cmdresp.c"
static int mwifiex_ret_802_11d_domain_info(struct mwifiex_private *priv, struct host_cmd_ds_command *resp)
{
  int __retres;
  u8 no_of_triplet;
  
#line 665 
  struct host_cmd_ds_802_11d_domain_info_rsp *domain_info = & resp->params.domain_info_resp;
  
#line 667 
  struct mwifiex_ietypes_domain_param_set *domain = & domain_info->domain;
  
#line 668 
  u16 action = domain_info->action;
  
#line 671 
  no_of_triplet = (unsigned char)((unsigned long)((int)domain->header.len + -3) / 3UL);
  
#line 675 
  if (((priv->adapter)->debug_mask & 1073741824U) != 0U) {
    
#line 675 
    if ((priv->adapter)->dev != (struct device *)0) 
#line 675 
                                                    _dev_info((struct device const *)(priv->adapter)->dev,"info: 11D Domain Info Resp: no_of_triplet=%d\n",(int)no_of_triplet); else ;
  }
  else ;
  
#line 679 
  if ((unsigned int)no_of_triplet > 83U) {
    
#line 680 
    if (((priv->adapter)->debug_mask & 2U) != 0U) {
      
#line 680 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 680 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"11D: invalid number of triplets %d returned\n",(int)no_of_triplet); else ;
    }
    else ;
    
#line 683 
    __retres = -1;
    
#line 683 
    goto return_label;
  }
  else ;
  
#line 686 
  switch ((int)action) {
    case 1: 
#line 687 
    ;
    
#line 688 
    goto ldv_61698;
    case 0: 
#line 689 
    ;
    
#line 690 
    goto ldv_61698;
    default: 
#line 691 
    ;
    
#line 692 
    if (((priv->adapter)->debug_mask & 4U) != 0U) {
      
#line 692 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 692 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"11D: invalid action:%d\n",(int)domain_info->action); else ;
    }
    else ;
    
#line 694 
    __retres = -1;
    
#line 694 
    goto return_label;
  }
  ldv_61698: 
#line 697 
  ;
  
#line 697 
  __retres = 0;
  return_label: 
#line 697 
                return __retres;
}


#line 706  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_cmdresp.c"
static int mwifiex_ret_ver_ext(struct mwifiex_private *priv, struct host_cmd_ds_command *resp, struct host_cmd_ds_version_ext *version_ext)
{
  int __retres;
  
#line 710 
  struct host_cmd_ds_version_ext *ver_ext = & resp->params.verext;
  
#line 712 
  if (version_ext != (struct host_cmd_ds_version_ext *)0) {
    
#line 713 
    version_ext->version_str_sel = ver_ext->version_str_sel;
    
#line 714 
    memcpy((void *)(& version_ext->version_str),(void const *)(& ver_ext->version_str),128UL);
    
#line 716 
    memcpy((void *)(& priv->version_str),(void const *)(& ver_ext->version_str),128UL);
  }
  else ;
  
#line 718 
  __retres = 0;
  
#line 718 
  return __retres;
}


#line 725  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_cmdresp.c"
static int mwifiex_ret_remain_on_chan(struct mwifiex_private *priv, struct host_cmd_ds_command *resp, struct host_cmd_ds_remain_on_chan *roc_cfg)
{
  int __retres;
  
#line 729 
  struct host_cmd_ds_remain_on_chan *resp_cfg = & resp->params.roc_cfg;
  
#line 731 
  if (roc_cfg != (struct host_cmd_ds_remain_on_chan *)0) 
#line 732 
                                                         memcpy((void *)roc_cfg,(void const *)resp_cfg,10UL); else ;
  
#line 734 
  __retres = 0;
  
#line 734 
  return __retres;
}


#line 741  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_cmdresp.c"
static int mwifiex_ret_p2p_mode_cfg(struct mwifiex_private *priv, struct host_cmd_ds_command *resp, void *data_buf)
{
  int __retres;
  
#line 745 
  struct host_cmd_ds_p2p_mode_cfg *mode_cfg = & resp->params.mode_cfg;
  
#line 747 
  if (data_buf != (void *)0) 
#line 748 
                             *((u16 *)data_buf) = mode_cfg->mode; else ;
  
#line 750 
  __retres = 0;
  
#line 750 
  return __retres;
}


#line 756  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_cmdresp.c"
static int mwifiex_ret_mem_access(struct mwifiex_private *priv, struct host_cmd_ds_command *resp, void *pioctl_buf)
{
  int __retres;
  
#line 759 
  struct host_cmd_ds_mem_access *mem = & resp->params.mem;
  
#line 761 
  priv->mem_rw.addr = mem->addr;
  
#line 762 
  priv->mem_rw.value = mem->value;
  
#line 764 
  __retres = 0;
  
#line 764 
  return __retres;
}


#line 772  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_cmdresp.c"
static int mwifiex_ret_reg_access(u16 type, struct host_cmd_ds_command *resp, void *data_buf)
{
  int __retres;
  struct mwifiex_ds_reg_rw *reg_rw;
  struct mwifiex_ds_read_eeprom *eeprom;
  union reg r;
  
#line 785 
  if (data_buf == (void *)0) {
    
#line 786 
    __retres = 0;
    
#line 786 
    goto return_label;
  }
  else ;
  
#line 788 
  reg_rw = (struct mwifiex_ds_reg_rw *)data_buf;
  
#line 789 
  eeprom = (struct mwifiex_ds_read_eeprom *)data_buf;
  
#line 790 
  switch ((int)type) {
    case 25: 
#line 791 
    ;
    
#line 792 
    r.mac = & resp->params.mac_reg;
    
#line 793 
    reg_rw->offset = (unsigned int)(r.mac)->offset;
    
#line 794 
    reg_rw->value = (r.mac)->value;
    
#line 795 
    goto ldv_61740;
    case 26: 
#line 796 
    ;
    
#line 797 
    r.bbp = & resp->params.bbp_reg;
    
#line 798 
    reg_rw->offset = (unsigned int)(r.bbp)->offset;
    
#line 799 
    reg_rw->value = (unsigned int)(r.bbp)->value;
    
#line 800 
    goto ldv_61740;
    case 27: 
#line 802 
    ;
    
#line 803 
    r.rf = & resp->params.rf_reg;
    
#line 804 
    reg_rw->offset = (unsigned int)(r.rf)->offset;
    
#line 805 
    reg_rw->value = (unsigned int)(r.bbp)->value;
    
#line 806 
    goto ldv_61740;
    case 173: 
#line 807 
    ;
    
#line 808 
    r.pmic = & resp->params.pmic_reg;
    
#line 809 
    reg_rw->offset = (unsigned int)(r.pmic)->offset;
    
#line 810 
    reg_rw->value = (unsigned int)(r.pmic)->value;
    
#line 811 
    goto ldv_61740;
    case 237: 
#line 812 
    ;
    
#line 813 
    r.rf = & resp->params.rf_reg;
    
#line 814 
    reg_rw->offset = (unsigned int)(r.rf)->offset;
    
#line 815 
    reg_rw->value = (unsigned int)(r.rf)->value;
    
#line 816 
    goto ldv_61740;
    case 89: 
#line 817 
    ;
    
#line 818 
    r.eeprom = & resp->params.eeprom;
    {
      
#line 819 
      struct _ddebug descriptor = {.modname = "mwifiex", .function = "mwifiex_ret_reg_access", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_cmdresp.c", .format = "info: EEPROM read len=%x\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))819U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 819 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 819 
                                                          __dynamic_pr_debug(& descriptor,"mwifiex",(int)(r.eeprom)->byte_count); else ;
    }
    
#line 820 
    if ((int)eeprom->byte_count < (int)(r.eeprom)->byte_count) {
      
#line 822 
      eeprom->byte_count = (unsigned short)0U;
      {
        
#line 823 
        struct _ddebug descriptor_0 = {.modname = "mwifiex", .function = "mwifiex_ret_reg_access", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_cmdresp.c", .format = "info: EEPROM read length is too big\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))823U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
        
#line 823 
        if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 823 
                                                              __dynamic_pr_debug(& descriptor_0,"mwifiex"); else ;
      }
      
#line 824 
      __retres = -1;
      
#line 824 
      goto return_label;
    }
    else ;
    
#line 826 
    eeprom->offset = (r.eeprom)->offset;
    
#line 827 
    eeprom->byte_count = (r.eeprom)->byte_count;
    
#line 828 
    if ((unsigned int)eeprom->byte_count != 0U) 
#line 829 
                                                memcpy((void *)(& eeprom->value),(void const *)(& (r.eeprom)->value),(unsigned long)(r.eeprom)->byte_count); else ;
    
#line 832 
    goto ldv_61740;
    default: 
#line 833 
    ;
    
#line 834 
    __retres = -1;
    
#line 834 
    goto return_label;
  }
  ldv_61740: 
#line 836 
  ;
  
#line 836 
  __retres = 0;
  return_label: 
#line 836 
                return __retres;
}


#line 846  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_cmdresp.c"
static int mwifiex_ret_ibss_coalescing_status(struct mwifiex_private *priv, struct host_cmd_ds_command *resp)
{
  int __retres;
  bool tmp;
  int tmp_1;
  bool tmp_0;
  
#line 849 
  struct host_cmd_ds_802_11_ibss_status *ibss_coal_resp = & resp->params.ibss_coalescing;
  
#line 852 
  if ((unsigned int)ibss_coal_resp->action == 1U) {
    
#line 853 
    __retres = 0;
    
#line 853 
    goto return_label;
  }
  else ;
  
#line 855 
  if (((priv->adapter)->debug_mask & 1073741824U) != 0U) {
    
#line 855 
    if ((priv->adapter)->dev != (struct device *)0) 
#line 855 
                                                    _dev_info((struct device const *)(priv->adapter)->dev,"info: new BSSID %pM\n",(u8 *)(& ibss_coal_resp->bssid)); else ;
  }
  else ;
  
#line 859 
  tmp = is_zero_ether_addr((u8 const *)(& ibss_coal_resp->bssid));
  
#line 859 
  if ((int)tmp != 0) {
    
#line 860 
    if (((priv->adapter)->debug_mask & 2U) != 0U) {
      
#line 860 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 860 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"new BSSID is NULL\n"); else ;
    }
    else ;
    
#line 861 
    __retres = 0;
    
#line 861 
    goto return_label;
  }
  else ;
  
#line 865 
  tmp_0 = ether_addr_equal((u8 const *)(& priv->curr_bss_params.bss_descriptor.mac_address),(u8 const *)(& ibss_coal_resp->bssid));
  
#line 865 
  if (tmp_0) 
#line 865 
             tmp_1 = 0; else 
#line 865 
                             tmp_1 = 1;
  
#line 865 
  if (tmp_1) {
    
#line 867 
    memcpy((void *)(& priv->curr_bss_params.bss_descriptor.mac_address),(void const *)(& ibss_coal_resp->bssid),6UL);
    
#line 872 
    priv->curr_bss_params.bss_descriptor.beacon_period = ibss_coal_resp->beacon_interval;
    
#line 875 
    priv->curr_bss_params.bss_descriptor.erp_flags = (unsigned char)ibss_coal_resp->use_g_rate_protect;
    
#line 878 
    priv->adhoc_state = (unsigned char)3U;
  }
  else ;
  
#line 881 
  __retres = 0;
  return_label: 
#line 881 
                return __retres;
}


#line 883  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_cmdresp.c"
static int mwifiex_ret_tdls_oper(struct mwifiex_private *priv, struct host_cmd_ds_command *resp)
{
  int __retres;
  
#line 886 
  struct host_cmd_ds_tdls_oper *cmd_tdls_oper = & resp->params.tdls_oper;
  
#line 887 
  u16 reason = cmd_tdls_oper->reason;
  
#line 888 
  u16 action = cmd_tdls_oper->tdls_action;
  
#line 889 
  struct mwifiex_sta_node *node = mwifiex_get_sta_entry(priv,(u8 const *)(& cmd_tdls_oper->peer_mac));
  
#line 892 
  switch ((int)action) {
    case 0: 
#line 893 
    ;
    
#line 894 
    if ((unsigned int)reason != 0U) {
      
#line 895 
      if (node == (struct mwifiex_sta_node *)0 || (unsigned int)reason == 4U) {
        
#line 896 
        if (((priv->adapter)->debug_mask & 4U) != 0U) {
          
#line 896 
          if ((priv->adapter)->dev != (struct device *)0) 
#line 896 
                                                          _dev_info((struct device const *)(priv->adapter)->dev,"TDLS link delete for %pM failed: reason %d\n",(u8 *)(& cmd_tdls_oper->peer_mac),(int)reason); else ;
        }
        else ;
      }
      else 
        
#line 900 
        if (((priv->adapter)->debug_mask & 4U) != 0U) {
          
#line 900 
          if ((priv->adapter)->dev != (struct device *)0) 
#line 900 
                                                          _dev_info((struct device const *)(priv->adapter)->dev,"TDLS link delete for %pM failed: reason %d\n",(u8 *)(& cmd_tdls_oper->peer_mac),(int)reason); else ;
        }
        else ;
    }
    else 
      
#line 904 
      if (((priv->adapter)->debug_mask & 1U) != 0U) {
        
#line 904 
        if ((priv->adapter)->dev != (struct device *)0) 
#line 904 
                                                        _dev_info((struct device const *)(priv->adapter)->dev,"TDLS link delete for %pM successful\n",(u8 *)(& cmd_tdls_oper->peer_mac)); else ;
      }
      else ;
    
#line 908 
    goto ldv_61764;
    case 1: 
#line 909 
    ;
    
#line 910 
    if ((unsigned int)reason != 0U) {
      
#line 911 
      if (((priv->adapter)->debug_mask & 4U) != 0U) {
        
#line 911 
        if ((priv->adapter)->dev != (struct device *)0) 
#line 911 
                                                        _dev_info((struct device const *)(priv->adapter)->dev,"TDLS link creation for %pM failed: reason %d",(u8 *)(& cmd_tdls_oper->peer_mac),(int)reason); else ;
      }
      else ;
      
#line 914 
      if (node != (struct mwifiex_sta_node *)0 && (unsigned int)reason != 3U) 
        
#line 915 
        node->tdls_status = (unsigned char)3U; else ;
    }
    else 
      
#line 917 
      if (((priv->adapter)->debug_mask & 1U) != 0U) {
        
#line 917 
        if ((priv->adapter)->dev != (struct device *)0) 
#line 917 
                                                        _dev_info((struct device const *)(priv->adapter)->dev,"TDLS link creation for %pM successful",(u8 *)(& cmd_tdls_oper->peer_mac)); else ;
      }
      else ;
    
#line 921 
    goto ldv_61764;
    case 2: 
#line 922 
    ;
    
#line 923 
    if ((unsigned int)reason != 0U) {
      
#line 924 
      if (((priv->adapter)->debug_mask & 4U) != 0U) {
        
#line 924 
        if ((priv->adapter)->dev != (struct device *)0) 
#line 924 
                                                        _dev_info((struct device const *)(priv->adapter)->dev,"TDLS link config for %pM failed, reason %d\n",(u8 *)(& cmd_tdls_oper->peer_mac),(int)reason); else ;
      }
      else ;
      
#line 927 
      if (node != (struct mwifiex_sta_node *)0) 
#line 928 
                                                node->tdls_status = (unsigned char)3U; else ;
    }
    else 
      
#line 930 
      if (((priv->adapter)->debug_mask & 1U) != 0U) {
        
#line 930 
        if ((priv->adapter)->dev != (struct device *)0) 
#line 930 
                                                        _dev_info((struct device const *)(priv->adapter)->dev,"TDLS link config for %pM successful\n",(u8 *)(& cmd_tdls_oper->peer_mac)); else ;
      }
      else ;
    
#line 934 
    goto ldv_61764;
    default: 
#line 935 
    ;
    
#line 936 
    if (((priv->adapter)->debug_mask & 4U) != 0U) {
      
#line 936 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 936 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"Unknown TDLS command action response %d",(int)action); else ;
    }
    else ;
    
#line 938 
    __retres = -1;
    
#line 938 
    goto return_label;
  }
  ldv_61764: 
#line 941 
  ;
  
#line 941 
  __retres = 0;
  return_label: 
#line 941 
                return __retres;
}


#line 946  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_cmdresp.c"
static int mwifiex_ret_subsc_evt(struct mwifiex_private *priv, struct host_cmd_ds_command *resp)
{
  int __retres;
  
#line 949 
  struct host_cmd_ds_802_11_subsc_evt *cmd_sub_event = & resp->params.subsc_evt;
  
#line 954 
  if (((priv->adapter)->debug_mask & 32U) != 0U) {
    
#line 954 
    if ((priv->adapter)->dev != (struct device *)0) 
#line 954 
                                                    _dev_info((struct device const *)(priv->adapter)->dev,"Bitmap of currently subscribed events: %16x\n",(int)cmd_sub_event->events); else ;
  }
  else ;
  
#line 958 
  __retres = 0;
  
#line 958 
  return __retres;
}


#line 961  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_cmdresp.c"
static int mwifiex_ret_uap_sta_list(struct mwifiex_private *priv, struct host_cmd_ds_command *resp)
{
  int __retres;
  int i;
  struct mwifiex_sta_node *sta_node;
  
#line 964 
  struct host_cmd_ds_sta_list *sta_list = & resp->params.sta_list;
  
#line 966 
  struct mwifiex_ie_types_sta_info *sta_info = (struct mwifiex_ie_types_sta_info *)(& sta_list->tlv);
  
#line 970 
  i = 0;
  
#line 970 
  goto ldv_61783;
  ldv_61782: 
#line 971 
  ;
  
#line 971 
  sta_node = mwifiex_get_sta_entry(priv,(u8 const *)(& sta_info->mac));
  
#line 972 
  if ((long)(sta_node == (struct mwifiex_sta_node *)0) != 0L) 
#line 973 
                                                              goto ldv_61781; else ;
  
#line 975 
  sta_node->stats.rssi = sta_info->rssi;
  
#line 976 
  sta_info += 1;
  ldv_61781: 
#line 977 
  ;
  
#line 970 
  i += 1;
  ldv_61783: 
#line 971 
  ;
  
#line 970 
  if ((int)sta_list->sta_count > i) 
#line 972 
                                    goto ldv_61782; else 
#line 975 
                                                         goto ldv_61784;
  ldv_61784: 
#line 976 
  ;
  
#line 979 
  __retres = 0;
  
#line 979 
  return __retres;
}


#line 983  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_cmdresp.c"
static int mwifiex_ret_cfg_data(struct mwifiex_private *priv, struct host_cmd_ds_command *resp)
{
  int __retres;
  
#line 986 
  if ((unsigned int)resp->result != 0U) {
    
#line 987 
    if (((priv->adapter)->debug_mask & 4U) != 0U) {
      
#line 987 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 987 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"Cal data cmd resp failed\n"); else ;
    }
    else ;
    
#line 988 
    __retres = -1;
    
#line 988 
    goto return_label;
  }
  else ;
  
#line 991 
  __retres = 0;
  return_label: 
#line 991 
                return __retres;
}


#line 995  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_cmdresp.c"
static int mwifiex_ret_sdio_rx_aggr_cfg(struct mwifiex_private *priv, struct host_cmd_ds_command *resp)
{
  int __retres;
  
#line 998 
  struct mwifiex_adapter *adapter = priv->adapter;
  
#line 999 
  struct host_cmd_sdio_sp_rx_aggr_cfg *cfg = & resp->params.sdio_rx_aggr_cfg;
  
#line 1002 
  adapter->sdio_rx_aggr_enable = (_Bool)((unsigned int)cfg->enable != 0U);
  
#line 1003 
  adapter->sdio_rx_block_size = cfg->block_size;
  
#line 1005 
  __retres = 0;
  
#line 1005 
  return __retres;
}


#line 1014  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_cmdresp.c"
int mwifiex_process_sta_cmdresp(struct mwifiex_private *priv, u16 cmdresp_no, struct host_cmd_ds_command *resp)
{
  int __retres;
  
#line 1017 
  int ret = 0;
  
#line 1018 
  struct mwifiex_adapter *adapter = priv->adapter;
  
#line 1019 
  void *data_buf = (adapter->curr_cmd)->data_buf;
  
#line 1022 
  if ((unsigned int)resp->result != 0U) {
    
#line 1023 
    mwifiex_process_cmdresp_error(priv,resp);
    
#line 1024 
    __retres = -1;
    
#line 1024 
    goto return_label;
  }
  else ;
  
#line 1027 
  switch ((int)cmdresp_no) {
    case 3: 
#line 1028 
    ;
    
#line 1029 
    ret = mwifiex_ret_get_hw_spec(priv,resp);
    
#line 1030 
    goto ldv_61804;
    case 143: 
#line 1031 
    ;
    
#line 1032 
    ret = mwifiex_ret_cfg_data(priv,resp);
    
#line 1033 
    goto ldv_61804;
    case 40: 
#line 1034 
    ;
    
#line 1035 
    goto ldv_61804;
    case 77: 
#line 1036 
    ;
    
#line 1037 
    ret = mwifiex_ret_802_11_mac_address(priv,resp);
    
#line 1038 
    goto ldv_61804;
    case 16: 
#line 1039 
    ;
    
#line 1040 
    ret = mwifiex_ret_mac_multicast_adr(priv,resp);
    
#line 1041 
    goto ldv_61804;
    case 214: 
#line 1042 
    ;
    
#line 1043 
    ret = mwifiex_ret_tx_rate_cfg(priv,resp);
    
#line 1044 
    goto ldv_61804;
    case 6: 
#line 1045 
    ;
    
#line 1046 
    ret = mwifiex_ret_802_11_scan(priv,resp);
    
#line 1047 
    (adapter->curr_cmd)->wait_q_enabled = 0U;
    
#line 1048 
    goto ldv_61804;
    case 263: 
#line 1049 
    ;
    
#line 1050 
    ret = mwifiex_ret_802_11_scan_ext(priv,resp);
    
#line 1051 
    (adapter->curr_cmd)->wait_q_enabled = 0U;
    
#line 1052 
    goto ldv_61804;
    case 108: 
#line 1053 
    ;
    
#line 1054 
    ret = mwifiex_ret_802_11_scan(priv,resp);
    
#line 1055 
    if ((adapter->debug_mask & 16U) != 0U) {
      
#line 1055 
      if (adapter->dev != (struct device *)0) 
#line 1055 
                                              _dev_info((struct device const *)adapter->dev,"info: CMD_RESP: BG_SCAN result is ready!\n"); else ;
    }
    else ;
    
#line 1057 
    goto ldv_61804;
    case 209: 
#line 1058 
    ;
    
#line 1059 
    ret = mwifiex_ret_tx_power_cfg(priv,resp);
    
#line 1060 
    goto ldv_61804;
    case 30: 
#line 1061 
    ;
    
#line 1062 
    ret = mwifiex_ret_rf_tx_power(priv,resp);
    
#line 1063 
    goto ldv_61804;
    case 32: 
#line 1064 
    ;
    
#line 1065 
    ret = mwifiex_ret_rf_antenna(priv,resp);
    
#line 1066 
    goto ldv_61804;
    case 228: 
#line 1067 
    ;
    
#line 1068 
    ret = mwifiex_ret_enh_power_mode(priv,resp,(struct mwifiex_ds_pm_cfg *)data_buf);
    
#line 1069 
    goto ldv_61804;
    case 229: 
#line 1070 
    ;
    
#line 1071 
    ret = mwifiex_ret_802_11_hs_cfg(priv,resp);
    
#line 1072 
    goto ldv_61804;
    case 18: 
#line 1073 
    ;
    
#line 1074 
    ret = mwifiex_ret_802_11_associate(priv,resp);
    
#line 1075 
    goto ldv_61804;
    case 36: 
#line 1076 
    ;
    
#line 1077 
    ret = mwifiex_ret_802_11_deauthenticate(priv,resp);
    
#line 1078 
    goto ldv_61804;
    case 43: 
#line 1079 
    ;
    case 44: 
#line 1080 
    ;
    
#line 1081 
    ret = mwifiex_ret_802_11_ad_hoc(priv,resp);
    
#line 1082 
    goto ldv_61804;
    case 64: 
#line 1083 
    ;
    
#line 1084 
    ret = mwifiex_ret_802_11_ad_hoc_stop(priv,resp);
    
#line 1085 
    goto ldv_61804;
    case 11: 
#line 1086 
    ;
    
#line 1087 
    ret = mwifiex_ret_get_log(priv,resp,(struct mwifiex_ds_get_stats *)data_buf);
    
#line 1088 
    goto ldv_61804;
    case 164: 
#line 1089 
    ;
    
#line 1090 
    ret = mwifiex_ret_802_11_rssi_info(priv,resp);
    
#line 1091 
    goto ldv_61804;
    case 22: 
#line 1092 
    ;
    
#line 1093 
    ret = mwifiex_ret_802_11_snmp_mib(priv,resp,(u32 *)data_buf);
    
#line 1094 
    goto ldv_61804;
    case 127: 
#line 1095 
    ;
    
#line 1096 
    ret = mwifiex_ret_802_11_tx_rate_query(priv,resp);
    
#line 1097 
    goto ldv_61804;
    case 151: 
#line 1098 
    ;
    
#line 1099 
    ret = mwifiex_ret_ver_ext(priv,resp,(struct host_cmd_ds_version_ext *)data_buf);
    
#line 1100 
    goto ldv_61804;
    case 269: 
#line 1101 
    ;
    
#line 1102 
    ret = mwifiex_ret_remain_on_chan(priv,resp,(struct host_cmd_ds_remain_on_chan *)data_buf);
    
#line 1103 
    goto ldv_61804;
    case 274: 
#line 1104 
    ;
    
#line 1105 
    goto ldv_61804;
    case 235: 
#line 1106 
    ;
    
#line 1107 
    ret = mwifiex_ret_p2p_mode_cfg(priv,resp,data_buf);
    
#line 1108 
    goto ldv_61804;
    case 268: 
#line 1109 
    ;
    case 169: 
#line 1110 
    ;
    case 170: 
#line 1111 
    ;
    
#line 1112 
    goto ldv_61804;
    case 94: 
#line 1113 
    ;
    
#line 1114 
    ret = mwifiex_ret_802_11_key_material(priv,resp);
    
#line 1115 
    goto ldv_61804;
    case 91: 
#line 1116 
    ;
    
#line 1117 
    ret = mwifiex_ret_802_11d_domain_info(priv,resp);
    
#line 1118 
    goto ldv_61804;
    case 206: 
#line 1119 
    ;
    
#line 1120 
    ret = mwifiex_ret_11n_addba_req(priv,resp);
    
#line 1121 
    goto ldv_61804;
    case 208: 
#line 1122 
    ;
    
#line 1123 
    ret = mwifiex_ret_11n_delba(priv,resp);
    
#line 1124 
    goto ldv_61804;
    case 207: 
#line 1125 
    ;
    
#line 1126 
    ret = mwifiex_ret_11n_addba_resp(priv,resp);
    
#line 1127 
    goto ldv_61804;
    case 217: 
#line 1128 
    ;
    
#line 1129 
    adapter->tx_buf_size = resp->params.tx_buf.buff_size;
    
#line 1131 
    adapter->tx_buf_size = (unsigned short)((unsigned int)((unsigned short)((unsigned int)adapter->tx_buf_size / 256U)) * 256U);
    
#line 1134 
    adapter->curr_tx_buf_size = adapter->tx_buf_size;
    
#line 1135 
    if ((adapter->debug_mask & 16U) != 0U) {
      
#line 1135 
      if (adapter->dev != (struct device *)0) 
#line 1135 
                                              _dev_info((struct device const *)adapter->dev,"cmd: curr_tx_buf_size=%d\n",(int)adapter->curr_tx_buf_size); else ;
    }
    else ;
    
#line 1138 
    if (adapter->if_ops.update_mp_end_port != (void (*)(struct mwifiex_adapter *, u16 ))0) 
      
#line 1139 
      (*(adapter->if_ops.update_mp_end_port))(adapter,(unsigned short)((int)resp->params.tx_buf.mp_end_port)); else ;
    
#line 1141 
    goto ldv_61804;
    case 223: 
#line 1142 
    ;
    
#line 1143 
    goto ldv_61804;
    case 113: 
#line 1144 
    ;
    
#line 1145 
    ret = mwifiex_ret_wmm_get_status(priv,(struct host_cmd_ds_command const *)resp);
    
#line 1146 
    goto ldv_61804;
    case 131: 
#line 1147 
    ;
    
#line 1148 
    ret = mwifiex_ret_ibss_coalescing_status(priv,resp);
    
#line 1149 
    goto ldv_61804;
    case 134: 
#line 1150 
    ;
    
#line 1151 
    ret = mwifiex_ret_mem_access(priv,resp,data_buf);
    
#line 1152 
    goto ldv_61804;
    case 25: 
#line 1153 
    ;
    case 26: 
#line 1154 
    ;
    case 27: 
#line 1155 
    ;
    case 173: 
#line 1156 
    ;
    case 237: 
#line 1157 
    ;
    case 89: 
#line 1158 
    ;
    
#line 1159 
    ret = mwifiex_ret_reg_access((unsigned short)((int)cmdresp_no),resp,data_buf);
    
#line 1160 
    goto ldv_61804;
    case 247: 
#line 1161 
    ;
    
#line 1162 
    goto ldv_61804;
    case 205: 
#line 1163 
    ;
    
#line 1164 
    goto ldv_61804;
    case 250: 
#line 1165 
    ;
    
#line 1166 
    goto ldv_61804;
    case 117: 
#line 1167 
    ;
    
#line 1168 
    ret = mwifiex_ret_subsc_evt(priv,resp);
    
#line 1169 
    goto ldv_61804;
    case 176: 
#line 1170 
    ;
    
#line 1171 
    goto ldv_61804;
    case 179: 
#line 1172 
    ;
    
#line 1173 
    ret = mwifiex_ret_uap_sta_list(priv,resp);
    
#line 1174 
    goto ldv_61804;
    case 177: 
#line 1175 
    ;
    
#line 1176 
    adapter->tx_lock_flag = (unsigned char)0U;
    
#line 1177 
    adapter->pps_uapsd_mode = (unsigned short)0U;
    
#line 1178 
    adapter->delay_null_pkt = (unsigned char)0U;
    
#line 1179 
    priv->bss_started = (unsigned char)1U;
    
#line 1180 
    goto ldv_61804;
    case 178: 
#line 1181 
    ;
    
#line 1182 
    priv->bss_started = (unsigned char)0U;
    
#line 1183 
    goto ldv_61804;
    case 181: 
#line 1184 
    ;
    
#line 1185 
    goto ldv_61804;
    case 175: 
#line 1186 
    ;
    
#line 1187 
    goto ldv_61804;
    case 154: 
#line 1188 
    ;
    
#line 1189 
    goto ldv_61804;
    case 266: 
#line 1190 
    ;
    
#line 1191 
    goto ldv_61804;
    case 290: 
#line 1192 
    ;
    
#line 1193 
    ret = mwifiex_ret_tdls_oper(priv,resp);
    
#line 1194 
    goto ldv_61804;
    case 221: 
#line 1195 
    ;
    
#line 1196 
    goto ldv_61804;
    case 547: 
#line 1197 
    ;
    
#line 1198 
    ret = mwifiex_ret_sdio_rx_aggr_cfg(priv,resp);
    
#line 1199 
    goto ldv_61804;
    default: 
#line 1200 
    ;
    
#line 1201 
    if ((adapter->debug_mask & 4U) != 0U) {
      
#line 1201 
      if (adapter->dev != (struct device *)0) 
#line 1201 
                                              _dev_info((struct device const *)adapter->dev,"CMD_RESP: unknown cmd response %#x\n",(int)resp->command); else ;
    }
    else ;
    
#line 1204 
    goto ldv_61804;
  }
  ldv_61804: 
#line 1207 
  ;
  
#line 1207 
  __retres = ret;
  return_label: 
#line 1207 
                return __retres;
}


#line 791  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_sta_cmdresp.c.aux"
static void ldv___ldv_spin_lock_78_7(spinlock_t *ldv_func_arg1)
{
  
#line 795 
  ldv_spin_model_lock((char *)"scan_pending_q_lock_of_mwifiex_adapter");
  
#line 797 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 798 
  return;
}


#line 801  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_sta_cmdresp.c.aux"
static void ldv_spin_unlock_irqrestore_79_8(spinlock_t *lock, unsigned long flags)
{
  
#line 805 
  ldv_spin_model_unlock((char *)"scan_pending_q_lock_of_mwifiex_adapter");
  
#line 807 
  spin_unlock_irqrestore_10(lock,flags);
  
#line 808 
  return;
}


#line 811  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_sta_cmdresp.c.aux"
static void ldv___ldv_spin_lock_80_5(spinlock_t *ldv_func_arg1)
{
  
#line 815 
  ldv_spin_model_lock((char *)"scan_pending_q_lock_of_mwifiex_adapter");
  
#line 817 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 818 
  return;
}


#line 821  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_sta_cmdresp.c.aux"
static void ldv_spin_unlock_irqrestore_81_6(spinlock_t *lock, unsigned long flags)
{
  
#line 825 
  ldv_spin_model_unlock((char *)"scan_pending_q_lock_of_mwifiex_adapter");
  
#line 827 
  spin_unlock_irqrestore_10(lock,flags);
  
#line 828 
  return;
}


#line 831  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_sta_cmdresp.c.aux"
static void ldv___ldv_spin_lock_82_6(spinlock_t *ldv_func_arg1)
{
  
#line 835 
  ldv_spin_model_lock((char *)"mwifiex_cmd_lock_of_mwifiex_adapter");
  
#line 837 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 838 
  return;
}


#line 841  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_sta_cmdresp.c.aux"
static void ldv_spin_unlock_irqrestore_83_7(spinlock_t *lock, unsigned long flags)
{
  
#line 845 
  ldv_spin_model_unlock((char *)"mwifiex_cmd_lock_of_mwifiex_adapter");
  
#line 847 
  spin_unlock_irqrestore_10(lock,flags);
  
#line 848 
  return;
}


#line 851  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_sta_cmdresp.c.aux"
static void ldv___ldv_spin_lock_84_3(spinlock_t *ldv_func_arg1)
{
  
#line 855 
  ldv_spin_model_lock((char *)"mwifiex_cmd_lock_of_mwifiex_adapter");
  
#line 857 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 858 
  return;
}


#line 861  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_sta_cmdresp.c.aux"
static void ldv_spin_unlock_irqrestore_85_5(spinlock_t *lock, unsigned long flags)
{
  
#line 865 
  ldv_spin_model_unlock((char *)"mwifiex_cmd_lock_of_mwifiex_adapter");
  
#line 867 
  spin_unlock_irqrestore_10(lock,flags);
  
#line 868 
  return;
}


#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/err.h"
static void *ERR_PTR(long error);


#line 446  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_unlock_irqrestore_11(spinlock_t *lock, unsigned long flags)
{
  {
    unsigned long __dummy;
    unsigned long __dummy2;
    
  }
  
#line 448 
  _raw_spin_unlock_irqrestore(& lock->__anonCompField_spinlock_18.rlock,flags);
  
#line 449 
  return;
}


#line 478 
static void ldv_spin_unlock_irqrestore_77_2(spinlock_t *lock, unsigned long flags);


#line 482 
static void ldv_spin_unlock_irqrestore_78_0(spinlock_t *lock, unsigned long flags);


#line 486 
static void ldv_spin_unlock_irqrestore_80_2(spinlock_t *lock, unsigned long flags);


#line 490 
static void ldv_spin_unlock_irqrestore_81_7(spinlock_t *lock, unsigned long flags);


#line 494 
static void ldv_spin_unlock_irqrestore_83_8(spinlock_t *lock, unsigned long flags);


#line 498 
static void ldv_spin_unlock_irqrestore_85_6(spinlock_t *lock, unsigned long flags);


#line 502 
static void ldv_spin_unlock_irqrestore_87_2(spinlock_t *lock, unsigned long flags);


#line 70  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_cfg80211.c.aux"
static void ldv___ldv_spin_lock_76_2(spinlock_t *ldv_func_arg1);


#line 74 
static void ldv___ldv_spin_lock_79_0(spinlock_t *ldv_func_arg1);


#line 78 
static void ldv___ldv_spin_lock_82_7(spinlock_t *ldv_func_arg1);


#line 82 
static void ldv___ldv_spin_lock_84_4(spinlock_t *ldv_func_arg1);


#line 86 
static void ldv___ldv_spin_lock_86_1(spinlock_t *ldv_func_arg1);


#line 29  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/err.h"
void *ldv_err_ptr(long error);


#line 284  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/jiffies.h"
unsigned int jiffies_to_msecs(unsigned long const);


#line 20  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/workqueue.h"
void delayed_work_timer_fn(unsigned long);


#line 505 
static bool ldv_queue_delayed_work_92(struct workqueue_struct *wq, struct delayed_work *dwork, unsigned long delay);


#line 509 
static bool ldv_queue_delayed_work_93(struct workqueue_struct *wq, struct delayed_work *dwork, unsigned long delay);


#line 104  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm_wakeup.h"
int device_set_wakeup_enable(struct device *, bool);


#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/semaphore.h"
__inline static void sema_init(struct semaphore *sem, int val)
{
  struct lock_class_key __key;
  
#line 35 
  struct semaphore __constr_expr_20 = {.lock = {.raw_lock = {.val = {.counter = 0}}, .magic = 3735899821U, .owner_cpu = 4294967295U, .owner = (void *)(-1), .dep_map = {.key = (struct lock_class_key *)0, .class_cache = {(struct lock_class *)0, (struct lock_class *)0}, .name = "(*sem).lock", .cpu = 0, .ip = 0UL}}, .count = (unsigned int)val, .wait_list = {.next = & sem->wait_list, .prev = & sem->wait_list}};
  
#line 35 
  *sem = __constr_expr_20;
  
#line 36 
  lockdep_init_map(& sem->lock.dep_map,"semaphore->lock",& __key,0);
  
#line 37 
  return;
}


#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/random.h"
u32 prandom_u32(void);


#line 542  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/slab.h"
static void *kcalloc_1(size_t n, size_t size, gfp_t flags);


#line 581 
static void *kzalloc_7(size_t size, gfp_t flags);


#line 243  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/net_namespace.h"
__inline static void write_pnet(possible_net_t *pnet, struct net *net)
{
  
#line 246 
  pnet->net = net;
  
#line 247 
  return;
}


#line 250  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/net_namespace.h"
__inline static struct net *read_pnet(possible_net_t const *pnet)
{
  struct net *__retres;
  
#line 253 
  __retres = pnet->net;
  
#line 253 
  return __retres;
}


#line 1860  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void dev_net_set(struct net_device *dev, struct net *net)
{
  
#line 1862 
  write_pnet(& dev->nd_net,net);
  
#line 1863 
  return;
}


#line 2193 
int register_netdevice(struct net_device *);


#line 2194 
void unregister_netdevice_queue(struct net_device *, struct list_head *);


#line 2196  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void unregister_netdevice(struct net_device *dev)
{
  
#line 2198 
  unregister_netdevice_queue(dev,(struct list_head *)0);
  
#line 2199 
  return;
}


#line 2205 
static void ldv_free_netdev_89(struct net_device *ldv_func_arg1);


#line 2209 
static void ldv_free_netdev_90(struct net_device *ldv_func_arg1);


#line 2213 
static void ldv_free_netdev_91(struct net_device *ldv_func_arg1);


#line 3338 
void ether_setup(struct net_device *);


#line 3347 
static struct net_device *ldv_alloc_netdev_mqs_88(int ldv_func_arg1, char const *ldv_func_arg2, unsigned char ldv_func_arg3, void (*ldv_func_arg4)(struct net_device *), unsigned int ldv_func_arg5, unsigned int ldv_func_arg6);


#line 443  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ieee80211.h"
__inline static int ieee80211_is_probe_resp(__le16 fc)
{
  int __retres;
  
#line 445 
  __retres = ((int)fc & 252) == 80;
  
#line 445 
  return __retres;
}


#line 503  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ieee80211.h"
__inline static int ieee80211_is_action(__le16 fc)
{
  int __retres;
  
#line 505 
  __retres = ((int)fc & 252) == 208;
  
#line 505 
  return __retres;
}


#line 411  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/cfg80211.h"
__inline static enum nl80211_channel_type cfg80211_get_chandef_type(struct cfg80211_chan_def const *chandef)
{
  enum nl80211_channel_type __retres;
  
#line 413 
  switch ((unsigned int)chandef->width) {
    case (unsigned int)0: 
#line 414 
    ;
    
#line 415 
    __retres = NL80211_CHAN_NO_HT;
    
#line 415 
    goto return_label;
    case (unsigned int)1: 
#line 416 
    ;
    
#line 417 
    __retres = NL80211_CHAN_HT20;
    
#line 417 
    goto return_label;
    case (unsigned int)2: 
#line 418 
    ;
    
#line 419 
    if (chandef->center_freq1 > (unsigned int)(chandef->chan)->center_freq) {
      
#line 420 
      __retres = NL80211_CHAN_HT40PLUS;
      
#line 420 
      goto return_label;
    }
    else ;
    
#line 421 
    __retres = NL80211_CHAN_HT40MINUS;
    
#line 421 
    goto return_label;
    default: 
#line 422 
    ;
    {
      
#line 423 
      int __ret_warn_on = 1;
      
#line 423 
      if ((long)(__ret_warn_on != 0) != 0L) 
#line 423 
                                            warn_slowpath_null("include/net/cfg80211.h",423); else ;
      
#line 423 
      long tmp = (long)(__ret_warn_on != 0);
    }
    
#line 424 
    __retres = NL80211_CHAN_NO_HT;
    
#line 424 
    goto return_label;
  }
  return_label: 
#line 413 
                return __retres;
}


#line 436 
void cfg80211_chandef_create(struct cfg80211_chan_def *, struct ieee80211_channel *, enum nl80211_channel_type);


#line 449  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/cfg80211.h"
__inline static bool cfg80211_chandef_identical(struct cfg80211_chan_def const *chandef1, struct cfg80211_chan_def const *chandef2)
{
  bool __retres;
  
#line 454 
  __retres = (_Bool)((((chandef1->chan == chandef2->chan && chandef1->width == chandef2->width) && chandef1->center_freq1 == chandef2->center_freq1) && chandef1->center_freq2 == chandef2->center_freq2) != 0);
  
#line 454 
  return __retres;
}


#line 475 
bool cfg80211_chandef_valid(struct cfg80211_chan_def const *);


#line 496 
int cfg80211_chandef_dfs_required(struct wiphy *, struct cfg80211_chan_def const *, enum nl80211_iftype);


#line 3241  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/cfg80211.h"
__inline static struct net *wiphy_net(struct wiphy *wiphy)
{
  struct net *tmp;
  
#line 3243 
  tmp = read_pnet((possible_net_t const *)(& wiphy->_net));
  
#line 3243 
  return tmp;
}


#line 3257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/cfg80211.h"
__inline static void *wiphy_priv(struct wiphy *wiphy)
{
  void *__retres;
  
#line 3259 
  if ((long)(wiphy == (struct wiphy *)0) != 0L) {
    
#line 3261 
    ldv_inline_asm();
    
#line 3259 
    ;
  }
  else ;
  
#line 3260 
  __retres = (void *)(& wiphy->priv);
  
#line 3260 
  return __retres;
}


#line 3281  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/cfg80211.h"
__inline static void set_wiphy_dev(struct wiphy *wiphy, struct device *dev)
{
  
#line 3283 
  wiphy->dev.parent = dev;
  
#line 3284 
  return;
}


#line 3292  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/cfg80211.h"
__inline static struct device *wiphy_dev(struct wiphy *wiphy)
{
  struct device *__retres;
  
#line 3294 
  __retres = wiphy->dev.parent;
  
#line 3294 
  return __retres;
}


#line 3322 
struct wiphy *wiphy_new_nm(struct cfg80211_ops const *, int, char const *);


#line 3337  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/cfg80211.h"
__inline static struct wiphy *wiphy_new(struct cfg80211_ops const *ops, int sizeof_priv)
{
  struct wiphy *tmp;
  
#line 3340 
  tmp = wiphy_new_nm(ops,sizeof_priv,(char const *)0);
  
#line 3340 
  return tmp;
}


#line 3350 
int wiphy_register(struct wiphy *);


#line 3528 
int ieee80211_channel_to_frequency(int, enum ieee80211_band);


#line 3827 
int regulatory_hint(struct wiphy *, char const *);


#line 4043 
struct cfg80211_bss *cfg80211_get_bss(struct wiphy *, struct ieee80211_channel *, u8 const *, u8 const *, size_t, enum ieee80211_bss_type, enum ieee80211_privacy);


#line 4219 
void cfg80211_ibss_joined(struct net_device *, u8 const *, struct ieee80211_channel *, gfp_t);


#line 4519 
void cfg80211_connect_result(struct net_device *, u8 const *, u8 const *, size_t, u8 const *, size_t, u16, gfp_t);


#line 4597 
void cfg80211_ready_on_channel(struct wireless_dev *, u64, struct ieee80211_channel *, unsigned int, gfp_t);


#line 4608 
void cfg80211_remain_on_channel_expired(struct wireless_dev *, u64, struct ieee80211_channel *, gfp_t);


#line 186  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/etherdevice.h"
__inline static bool is_valid_ether_addr(u8 const *addr)
{
  bool __retres;
  int tmp_3;
  int tmp_0;
  bool tmp;
  
#line 190 
  tmp = is_multicast_ether_addr(addr);
  
#line 190 
  if (tmp) 
#line 190 
           tmp_0 = 0; else 
#line 190 
                           tmp_0 = 1;
  
#line 190 
  if (tmp_0) {
    int tmp_2;
    bool tmp_1;
    
#line 190 
    tmp_1 = is_zero_ether_addr(addr);
    
#line 190 
    if (tmp_1) 
#line 190 
               tmp_2 = 0; else 
#line 190 
                               tmp_2 = 1;
    
#line 190 
    if (tmp_2) 
#line 190 
               tmp_3 = 1; else 
#line 190 
                               tmp_3 = 0;
  }
  else 
#line 190 
       tmp_3 = 0;
  
#line 190 
  __retres = (_Bool)(tmp_3 != 0);
  
#line 190 
  return __retres;
}


#line 244  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/etherdevice.h"
__inline static void eth_zero_addr(u8 *addr)
{
  
#line 246 
  memset((void *)addr,0,6UL);
  
#line 247 
  return;
}


#line 36  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rtnetlink.h"
int lockdep_rtnl_is_held(void);


#line 69  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/vmalloc.h"
void *vmalloc(unsigned long);


#line 220  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/inetdevice.h"
__inline static struct in_device *__in_dev_get_rtnl(struct net_device const *dev)
{
  struct in_device *__retres;
  {
    bool __warned;
    int tmp;
    
#line 222 
    tmp = debug_lockdep_rcu_enabled();
    
#line 222 
    if (tmp != 0) {
      
#line 222 
      if (! __warned) {
        int tmp_0;
        
#line 222 
        tmp_0 = lockdep_rtnl_is_held();
        
#line 222 
        if (tmp_0 == 0) {
          
#line 222 
          __warned = (_Bool)1;
          
#line 222 
          lockdep_rcu_suspicious("include/linux/inetdevice.h",222,"suspicious rcu_dereference_protected() usage");
        }
        else ;
      }
      else ;
    }
    else ;
  }
  
#line 222 
  __retres = dev->ip_ptr;
  
#line 222 
  return __retres;
}


#line 1244  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.h"
__inline static struct mwifiex_private *mwifiex_get_priv_3(struct mwifiex_adapter *adapter, enum mwifiex_bss_role bss_role)
{
  int i;
  struct mwifiex_private *tmp;
  
#line 1249 
  i = 0;
  
#line 1249 
  goto ldv_60954;
  ldv_60953: 
#line 1250 
  ;
  
#line 1250 
  if (adapter->priv[i] != (struct mwifiex_private *)0) {
    
#line 1251 
    if (bss_role == (unsigned int)MWIFIEX_BSS_ROLE_ANY || ((unsigned long)(adapter->priv[i])->bss_role & 1UL) == (unsigned long)bss_role) 
      
#line 1253 
      goto ldv_60952; else ;
  }
  else ;
  
#line 1249 
  i += 1;
  ldv_60954: 
#line 1250 
  ;
  
#line 1249 
  if ((int)adapter->priv_num > i) 
#line 1251 
                                  goto ldv_60953; else 
#line 1254 
                                                       goto ldv_60952;
  ldv_60952: 
#line 1255 
  ;
  
#line 1257 
  if ((int)adapter->priv_num > i) 
#line 1257 
                                  tmp = adapter->priv[i]; else 
#line 1257 
                                                               tmp = (struct mwifiex_private *)0;
  
#line 1257 
  return tmp;
}


#line 1264  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.h"
__inline static struct mwifiex_private *mwifiex_get_unused_priv(struct mwifiex_adapter *adapter)
{
  int i;
  struct mwifiex_private *tmp;
  
#line 1268 
  i = 0;
  
#line 1268 
  goto ldv_60961;
  ldv_60960: 
#line 1269 
  ;
  
#line 1269 
  if (adapter->priv[i] != (struct mwifiex_private *)0) {
    
#line 1270 
    if ((adapter->priv[i])->bss_mode == 0U) 
#line 1272 
                                            goto ldv_60959; else ;
  }
  else ;
  
#line 1268 
  i += 1;
  ldv_60961: 
#line 1269 
  ;
  
#line 1268 
  if ((int)adapter->priv_num > i) 
#line 1270 
                                  goto ldv_60960; else 
#line 1273 
                                                       goto ldv_60959;
  ldv_60959: 
#line 1274 
  ;
  
#line 1276 
  if ((int)adapter->priv_num > i) 
#line 1276 
                                  tmp = adapter->priv[i]; else 
#line 1276 
                                                               tmp = (struct mwifiex_private *)0;
  
#line 1276 
  return tmp;
}


#line 1314  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.h"
__inline static u8 mwifiex_is_any_intf_active(struct mwifiex_private *priv)
{
  u8 __retres;
  struct mwifiex_private *priv_num;
  int i;
  
#line 1319 
  i = 0;
  
#line 1319 
  goto ldv_60983;
  ldv_60982: 
#line 1320 
  ;
  
#line 1320 
  priv_num = (priv->adapter)->priv[i];
  
#line 1321 
  if (priv_num != (struct mwifiex_private *)0) {
    
#line 1322 
    if ((((unsigned long)priv_num->bss_role & 1UL) != 0UL && (unsigned int)priv_num->bss_started != 0U) || (((unsigned long)priv_num->bss_role & 1UL) == 0UL && (unsigned int)priv_num->media_connected != 0U)) {
      
#line 1326 
      __retres = (unsigned char)1U;
      
#line 1326 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 1319 
  i += 1;
  ldv_60983: 
#line 1320 
  ;
  
#line 1319 
  if ((int)(priv->adapter)->priv_num > i) 
#line 1321 
                                          goto ldv_60982; else 
#line 1324 
                                                               goto ldv_60984;
  ldv_60984: 
#line 1325 
  ;
  
#line 1330 
  __retres = (unsigned char)0U;
  return_label: 
#line 1330 
                return __retres;
}


#line 1413 
u8 mwifiex_sec_chan_offset_to_chan_type(u8 second_chan_offset);


#line 1427 
int mwifiex_set_mgmt_ies(struct mwifiex_private *priv, struct cfg80211_beacon_data *info_0);


#line 1440 
int mwifiex_is_11h_active(struct mwifiex_private *priv);


#line 1441 
int mwifiex_11h_activate(struct mwifiex_private *priv, bool flag);


#line 1503 
void mwifiex_dfs_cac_work_queue(struct work_struct *work);


#line 1504 
void mwifiex_dfs_chan_sw_work_queue(struct work_struct *work);


#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfg80211.c"
static char *reg_alpha2;

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfg80211.c"
static struct ieee80211_iface_limit const mwifiex_ap_sta_limits[2U] = {{.max = (unsigned short)2U, .types = (unsigned short)772U}, {.max = (unsigned short)1U, .types = (unsigned short)8U}};

#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfg80211.c"
static struct ieee80211_iface_combination const mwifiex_iface_comb_ap_sta = {.limits = (struct ieee80211_iface_limit const *)(& mwifiex_ap_sta_limits), .num_different_channels = 1U, .max_interfaces = (unsigned short)3U, .n_limits = (unsigned char)2U, .beacon_int_infra_match = (_Bool)1, .radar_detect_widths = (unsigned char)0, .radar_detect_regions = (unsigned char)0};

#line 55  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfg80211.c"
u8 mwifiex_chan_type_to_sec_chan_offset(enum nl80211_channel_type chan_type)
{
  u8 __retres;
  
#line 57 
  switch ((unsigned int)chan_type) {
    case (unsigned int)0: 
#line 58 
    ;
    case (unsigned int)1: 
#line 59 
    ;
    
#line 60 
    __retres = (unsigned char)0U;
    
#line 60 
    goto return_label;
    case (unsigned int)3: 
#line 61 
    ;
    
#line 62 
    __retres = (unsigned char)1U;
    
#line 62 
    goto return_label;
    case (unsigned int)2: 
#line 63 
    ;
    
#line 64 
    __retres = (unsigned char)3U;
    
#line 64 
    goto return_label;
    default: 
#line 65 
    ;
    
#line 66 
    __retres = (unsigned char)0U;
    
#line 66 
    goto return_label;
  }
  return_label: 
#line 57 
                return __retres;
}


#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfg80211.c"
u8 mwifiex_sec_chan_offset_to_chan_type(u8 second_chan_offset)
{
  u8 __retres;
  
#line 74 
  switch ((int)second_chan_offset) {
    case 0: 
#line 75 
    ;
    
#line 76 
    __retres = (unsigned char)1U;
    
#line 76 
    goto return_label;
    case 1: 
#line 77 
    ;
    
#line 78 
    __retres = (unsigned char)3U;
    
#line 78 
    goto return_label;
    case 3: 
#line 79 
    ;
    
#line 80 
    __retres = (unsigned char)2U;
    
#line 80 
    goto return_label;
    default: 
#line 81 
    ;
    
#line 82 
    __retres = (unsigned char)1U;
    
#line 82 
    goto return_label;
  }
  return_label: 
#line 74 
                return __retres;
}


#line 90  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfg80211.c"
static int mwifiex_is_alg_wep(u32 cipher)
{
  int __retres;
  
#line 92 
  switch (cipher) {
    case (u32)1027073: 
#line 93 
    ;
    case (u32)1027077: 
#line 94 
    ;
    
#line 95 
    __retres = 1;
    
#line 95 
    goto return_label;
    default: 
#line 96 
    ;
    
#line 97 
    goto ldv_61362;
  }
  ldv_61362: 
#line 100 
  ;
  
#line 100 
  __retres = 0;
  return_label: 
#line 100 
                return __retres;
}


#line 106  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfg80211.c"
static void *mwifiex_cfg80211_get_adapter(struct wiphy *wiphy)
{
  void *__retres;
  void *tmp;
  
#line 108 
  tmp = wiphy_priv(wiphy);
  
#line 108 
  __retres = (void *)*((unsigned long *)tmp);
  
#line 108 
  return __retres;
}


#line 115  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfg80211.c"
static int mwifiex_cfg80211_del_key(struct wiphy *wiphy, struct net_device *netdev, u8 key_index, bool pairwise, u8 const *mac_addr)
{
  int __retres;
  u8 const *tmp_0;
  int tmp_1;
  
#line 118 
  struct mwifiex_private *priv = mwifiex_netdev_get_priv(netdev);
  
#line 119 
  u8 const bc_mac[6U] = {(unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U};
  
#line 120 
  if (pairwise) 
#line 120 
                tmp_0 = mac_addr; else 
#line 120 
                                       tmp_0 = (u8 const *)(& bc_mac);
  
#line 120 
  u8 const *peer_mac = tmp_0;
  
#line 122 
  tmp_1 = mwifiex_set_encode(priv,(struct key_params *)0,(u8 const *)0U,0,(unsigned char)((int)key_index),peer_mac,1);
  
#line 122 
  if (tmp_1 != 0) {
    
#line 123 
    if (((priv->adapter)->debug_mask & 4U) != 0U) {
      
#line 123 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 123 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"deleting the crypto keys\n"); else ;
    }
    else ;
    
#line 124 
    __retres = -14;
    
#line 124 
    goto return_label;
  }
  else ;
  
#line 127 
  if (((priv->adapter)->debug_mask & 1073741824U) != 0U) {
    
#line 127 
    if ((priv->adapter)->dev != (struct device *)0) 
#line 127 
                                                    _dev_info((struct device const *)(priv->adapter)->dev,"info: crypto keys deleted\n"); else ;
  }
  else ;
  
#line 128 
  __retres = 0;
  return_label: 
#line 128 
                return __retres;
}


#line 135  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfg80211.c"
static int mwifiex_form_mgmt_frame(struct sk_buff *skb, u8 const *buf, size_t len)
{
  int __retres;
  u16 pkt_len;
  unsigned char *tmp;
  unsigned char *tmp_0;
  unsigned char *tmp_1;
  unsigned char *tmp_2;
  unsigned char *tmp_3;
  unsigned char *tmp_4;
  
#line 137 
  u8 addr[6U] = {(unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U};
  
#line 139 
  u32 tx_control = 0U;
  
#line 139 
  u32 pkt_type = 229U;
  
#line 141 
  pkt_len = (unsigned short)((unsigned int)((unsigned short)len) + 6U);
  
#line 143 
  skb_reserve(skb,110);
  
#line 145 
  tmp = skb_push(skb,2U);
  
#line 145 
  memcpy((void *)tmp,(void const *)(& pkt_len),2UL);
  
#line 147 
  tmp_0 = skb_push(skb,4U);
  
#line 147 
  memcpy((void *)tmp_0,(void const *)(& tx_control),4UL);
  
#line 150 
  tmp_1 = skb_push(skb,4U);
  
#line 150 
  memcpy((void *)tmp_1,(void const *)(& pkt_type),4UL);
  
#line 153 
  ;
  
#line 153 
  tmp_2 = skb_put(skb,24U);
  
#line 153 
  memcpy((void *)tmp_2,(void const *)buf,24UL);
  
#line 155 
  tmp_3 = skb_put(skb,6U);
  
#line 155 
  memcpy((void *)tmp_3,(void const *)(& addr),6UL);
  
#line 156 
  ;
  
#line 156 
  ;
  
#line 156 
  tmp_4 = skb_put(skb,(unsigned int)len + 4294967272U);
  
#line 156 
  memcpy((void *)tmp_4,(void const *)(buf + 24U),len + 18446744073709551592UL);
  
#line 160 
  skb->priority = 0U;
  
#line 161 
  __net_timestamp(skb);
  
#line 163 
  __retres = 0;
  
#line 163 
  return __retres;
}


#line 170  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfg80211.c"
static int mwifiex_cfg80211_mgmt_tx(struct wiphy *wiphy, struct wireless_dev *wdev, struct cfg80211_mgmt_tx_params *params, u64 *cookie)
{
  int __retres;
  struct sk_buff *skb;
  u16 pkt_len;
  struct ieee80211_mgmt const *mgmt;
  struct mwifiex_txinfo *tx_info;
  u32 tmp_1;
  int tmp_2;
  
#line 173 
  u8 const *buf = params->buf;
  
#line 174 
  size_t len = params->len;
  
#line 179 
  struct mwifiex_private *priv = mwifiex_netdev_get_priv(wdev->netdev);
  
#line 181 
  if (buf == (u8 const *)0U || len == 0UL) {
    
#line 182 
    if (((priv->adapter)->debug_mask & 4U) != 0U) {
      
#line 182 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 182 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"invalid buffer and length\n"); else ;
    }
    else ;
    
#line 183 
    __retres = -14;
    
#line 183 
    goto return_label;
  }
  else ;
  
#line 186 
  mgmt = (struct ieee80211_mgmt const *)buf;
  
#line 187 
  if (((unsigned long)priv->bss_role & 1UL) != 0UL) {
    int tmp_0;
    
#line 187 
    tmp_0 = ieee80211_is_probe_resp((unsigned short)((int)mgmt->frame_control));
    
#line 187 
    if (tmp_0 != 0) {
      
#line 191 
      if (((priv->adapter)->debug_mask & 1073741824U) != 0U) {
        
#line 191 
        if ((priv->adapter)->dev != (struct device *)0) 
#line 191 
                                                        _dev_info((struct device const *)(priv->adapter)->dev,"info: skip to send probe resp in AP or GO mode\n"); else ;
      }
      else ;
      
#line 193 
      __retres = 0;
      
#line 193 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 196 
  pkt_len = (unsigned short)((unsigned int)((unsigned short)len) + 6U);
  
#line 197 
  skb = dev_alloc_skb((unsigned int)pkt_len + 110U);
  
#line 201 
  if (skb == (struct sk_buff *)0) {
    
#line 202 
    if (((priv->adapter)->debug_mask & 4U) != 0U) {
      
#line 202 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 202 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"allocate skb failed for management frame\n"); else ;
    }
    else ;
    
#line 204 
    __retres = -12;
    
#line 204 
    goto return_label;
  }
  else ;
  
#line 207 
  tx_info = MWIFIEX_SKB_TXCB(skb);
  
#line 208 
  memset((void *)tx_info,0,24UL);
  
#line 209 
  tx_info->bss_num = priv->bss_num;
  
#line 210 
  tx_info->bss_type = priv->bss_type;
  
#line 211 
  tx_info->pkt_len = (unsigned int)pkt_len;
  
#line 213 
  mwifiex_form_mgmt_frame(skb,buf,len);
  
#line 214 
  tmp_1 = prandom_u32();
  
#line 214 
  *cookie = (unsigned long long)(tmp_1 | 1U);
  
#line 216 
  tmp_2 = ieee80211_is_action((unsigned short)((int)mgmt->frame_control));
  
#line 216 
  if (tmp_2 != 0) 
#line 217 
                  skb = mwifiex_clone_skb_for_tx_status(priv,skb,(unsigned char)16,cookie); else 
                                                                    
#line 221 
                                                                    cfg80211_mgmt_tx_status(wdev,*cookie,buf,len,(_Bool)1,32U);
  
#line 224 
  mwifiex_queue_tx_pkt(priv,skb);
  
#line 226 
  if (((priv->adapter)->debug_mask & 1073741824U) != 0U) {
    
#line 226 
    if ((priv->adapter)->dev != (struct device *)0) 
#line 226 
                                                    _dev_info((struct device const *)(priv->adapter)->dev,"info: management frame transmitted\n"); else ;
  }
  else ;
  
#line 227 
  __retres = 0;
  return_label: 
#line 227 
                return __retres;
}


#line 234  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfg80211.c"
static void mwifiex_cfg80211_mgmt_frame_register(struct wiphy *wiphy, struct wireless_dev *wdev, u16 frame_type, bool reg)
{
  u32 mask;
  
#line 238 
  struct mwifiex_private *priv = mwifiex_netdev_get_priv(wdev->netdev);
  
#line 241 
  if ((int)reg != 0) 
#line 242 
                     mask = priv->mgmt_frame_mask | (unsigned int)(1UL << ((int)frame_type >> 4)); else 
                                                                    
#line 244 
                                                                    mask = priv->mgmt_frame_mask & ~ ((unsigned int)(1UL << ((int)frame_type >> 4)));
  
#line 246 
  if (priv->mgmt_frame_mask != mask) {
    
#line 247 
    priv->mgmt_frame_mask = mask;
    
#line 248 
    mwifiex_send_cmd(priv,(unsigned short)268,(unsigned short)1,0U,(void *)(& priv->mgmt_frame_mask),(_Bool)0);
    
#line 251 
    if (((priv->adapter)->debug_mask & 1073741824U) != 0U) {
      
#line 251 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 251 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"info: mgmt frame registered\n"); else ;
    }
    else ;
  }
  else ;
  
#line 253 
  return;
}


#line 259  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfg80211.c"
static int mwifiex_cfg80211_remain_on_channel(struct wiphy *wiphy, struct wireless_dev *wdev, struct ieee80211_channel *chan, unsigned int duration, u64 *cookie)
{
  int __retres;
  int ret;
  
#line 264 
  struct mwifiex_private *priv = mwifiex_netdev_get_priv(wdev->netdev);
  
#line 267 
  if (chan == (struct ieee80211_channel *)0 || cookie == (u64 *)0ULL) {
    
#line 268 
    if (((priv->adapter)->debug_mask & 4U) != 0U) {
      
#line 268 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 268 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"Invalid parameter for ROC\n"); else ;
    }
    else ;
    
#line 269 
    __retres = -22;
    
#line 269 
    goto return_label;
  }
  else ;
  
#line 272 
  if (priv->roc_cfg.cookie != 0ULL) {
    
#line 273 
    if (((priv->adapter)->debug_mask & 1073741824U) != 0U) {
      
#line 273 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 273 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"info: ongoing ROC, cookie = 0x%llx\n",priv->roc_cfg.cookie); else ;
    }
    else ;
    
#line 276 
    __retres = -16;
    
#line 276 
    goto return_label;
  }
  else ;
  
#line 279 
  ret = mwifiex_remain_on_chan_cfg(priv,(unsigned short)1,chan,duration);
  
#line 282 
  if (ret == 0) {
    u32 tmp_0;
    
#line 283 
    tmp_0 = prandom_u32();
    
#line 283 
    *cookie = (unsigned long long)(tmp_0 | 1U);
    
#line 284 
    priv->roc_cfg.cookie = *cookie;
    
#line 285 
    priv->roc_cfg.chan = *chan;
    
#line 287 
    cfg80211_ready_on_channel(wdev,*cookie,chan,duration,32U);
    
#line 290 
    if (((priv->adapter)->debug_mask & 1073741824U) != 0U) {
      
#line 290 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 290 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"info: ROC, cookie = 0x%llx\n",*cookie); else ;
    }
    else ;
  }
  else ;
  
#line 294 
  __retres = ret;
  return_label: 
#line 294 
                return __retres;
}


#line 301  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfg80211.c"
static int mwifiex_cfg80211_cancel_remain_on_channel(struct wiphy *wiphy, struct wireless_dev *wdev, u64 cookie)
{
  int __retres;
  int ret;
  
#line 304 
  struct mwifiex_private *priv = mwifiex_netdev_get_priv(wdev->netdev);
  
#line 307 
  if (priv->roc_cfg.cookie != cookie) {
    
#line 308 
    __retres = -2;
    
#line 308 
    goto return_label;
  }
  else ;
  
#line 310 
  ret = mwifiex_remain_on_chan_cfg(priv,(unsigned short)4,& priv->roc_cfg.chan,0U);
  
#line 313 
  if (ret == 0) {
    
#line 314 
    cfg80211_remain_on_channel_expired(wdev,cookie,& priv->roc_cfg.chan,32U);
    
#line 318 
    memset((void *)(& priv->roc_cfg),0,72UL);
    
#line 320 
    if (((priv->adapter)->debug_mask & 1073741824U) != 0U) {
      
#line 320 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 320 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"info: cancel ROC, cookie = 0x%llx\n",cookie); else ;
    }
    else ;
  }
  else ;
  
#line 324 
  __retres = ret;
  return_label: 
#line 324 
                return __retres;
}


#line 331  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfg80211.c"
static int mwifiex_cfg80211_set_tx_power(struct wiphy *wiphy, struct wireless_dev *wdev, enum nl80211_tx_power_setting type, int mbm)
{
  struct mwifiex_private *priv;
  struct mwifiex_power_cfg power_cfg;
  int tmp_0;
  
#line 336 
  struct mwifiex_adapter *adapter = mwifiex_cfg80211_get_adapter(wiphy);
  
#line 339 
  int dbm = mbm / 100;
  
#line 341 
  if (type == (unsigned int)NL80211_TX_POWER_FIXED) {
    
#line 342 
    power_cfg.is_power_auto = 0U;
    
#line 343 
    power_cfg.power_level = (unsigned int)dbm;
  }
  else 
#line 345 
       power_cfg.is_power_auto = 1U;
  
#line 348 
  priv = mwifiex_get_priv_3(adapter,(enum mwifiex_bss_role)MWIFIEX_BSS_ROLE_ANY);
  
#line 350 
  tmp_0 = mwifiex_set_tx_power(priv,& power_cfg);
  
#line 350 
  return tmp_0;
}


#line 359  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfg80211.c"
static int mwifiex_cfg80211_set_power_mgmt(struct wiphy *wiphy, struct net_device *dev, bool enabled, int timeout)
{
  u32 ps_mode;
  int tmp_0;
  
#line 363 
  struct mwifiex_private *priv = mwifiex_netdev_get_priv(dev);
  
#line 366 
  if (timeout != 0) {
    
#line 367 
    if (((priv->adapter)->debug_mask & 1073741824U) != 0U) {
      
#line 367 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 367 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"info: ignore timeout value for IEEE Power Save\n"); else ;
    }
    else ;
  }
  else ;
  
#line 370 
  ps_mode = (unsigned int)enabled;
  
#line 372 
  tmp_0 = mwifiex_drv_set_power(priv,& ps_mode);
  
#line 372 
  return tmp_0;
}


#line 379  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfg80211.c"
static int mwifiex_cfg80211_set_default_key(struct wiphy *wiphy, struct net_device *netdev, u8 key_index, bool unicast, bool multicast)
{
  int __retres;
  
#line 383 
  struct mwifiex_private *priv = mwifiex_netdev_get_priv(netdev);
  
#line 386 
  if ((unsigned int)priv->sec_info.wep_enabled == 0U) {
    
#line 387 
    __retres = 0;
    
#line 387 
    goto return_label;
  }
  else ;
  
#line 389 
  if ((unsigned int)priv->bss_type == 1U) 
#line 390 
                                          priv->wep_key_curr_index = (unsigned short)key_index;
  else {
    int tmp_0;
    
#line 391 
    tmp_0 = mwifiex_set_encode(priv,(struct key_params *)0,(u8 const *)0U,0,(unsigned char)((int)key_index),(u8 const *)0U,0);
    
#line 391 
    if (tmp_0 != 0) {
      
#line 393 
      if (((priv->adapter)->debug_mask & 4U) != 0U) {
        
#line 393 
        if ((priv->adapter)->dev != (struct device *)0) 
#line 393 
                                                        _dev_info((struct device const *)(priv->adapter)->dev,"set default Tx key index\n"); else ;
      }
      else ;
      
#line 394 
      __retres = -14;
      
#line 394 
      goto return_label;
    }
    else ;
  }
  
#line 397 
  __retres = 0;
  return_label: 
#line 397 
                return __retres;
}


#line 404  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfg80211.c"
static int mwifiex_cfg80211_add_key(struct wiphy *wiphy, struct net_device *netdev, u8 key_index, bool pairwise, u8 const *mac_addr, struct key_params *params)
{
  int __retres;
  struct mwifiex_wep_key *wep_key;
  u8 const *tmp_0;
  int tmp_1;
  
#line 408 
  struct mwifiex_private *priv = mwifiex_netdev_get_priv(netdev);
  
#line 410 
  u8 const bc_mac[6U] = {(unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U};
  
#line 411 
  if (pairwise) 
#line 411 
                tmp_0 = mac_addr; else 
#line 411 
                                       tmp_0 = (u8 const *)(& bc_mac);
  
#line 411 
  u8 const *peer_mac = tmp_0;
  
#line 413 
  if (((unsigned long)priv->bss_role & 1UL) != 0UL && (params->cipher == 1027073U || params->cipher == 1027077U)) {
    
#line 416 
    if (params->key != (u8 const *)0U && params->key_len != 0) {
      
#line 417 
      wep_key = & priv->wep_key[(int)key_index];
      
#line 418 
      memset((void *)wep_key,0,28UL);
      
#line 419 
      memcpy((void *)(& wep_key->key_material),(void const *)params->key,(unsigned long)params->key_len);
      
#line 421 
      wep_key->key_index = (unsigned int)key_index;
      
#line 422 
      wep_key->key_length = (unsigned int)params->key_len;
      
#line 423 
      priv->sec_info.wep_enabled = (unsigned char)1U;
    }
    else ;
    
#line 425 
    __retres = 0;
    
#line 425 
    goto return_label;
  }
  else ;
  
#line 428 
  tmp_1 = mwifiex_set_encode(priv,params,params->key,params->key_len,(unsigned char)((int)key_index),peer_mac,0);
  
#line 428 
  if (tmp_1 != 0) {
    
#line 430 
    if (((priv->adapter)->debug_mask & 4U) != 0U) {
      
#line 430 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 430 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"crypto keys added\n"); else ;
    }
    else ;
    
#line 431 
    __retres = -14;
    
#line 431 
    goto return_label;
  }
  else ;
  
#line 434 
  __retres = 0;
  return_label: 
#line 434 
                return __retres;
}


#line 444  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfg80211.c"
static int mwifiex_send_domain_info_cmd_fw(struct wiphy *wiphy)
{
  int __retres;
  struct ieee80211_country_ie_triplet *t;
  u8 i;
  enum ieee80211_band band;
  struct ieee80211_supported_band *sband;
  struct ieee80211_channel *ch;
  struct mwifiex_private *priv;
  u8 tmp_0;
  int tmp_1;
  
#line 446 
  u8 no_of_triplet = (unsigned char)0U;
  
#line 448 
  u8 no_of_parsed_chan = (unsigned char)0U;
  
#line 449 
  u8 first_chan = (unsigned char)0U;
  
#line 449 
  u8 next_chan = (unsigned char)0U;
  
#line 449 
  u8 max_pwr = (unsigned char)0U;
  
#line 450 
  u8 flag = (unsigned char)0U;
  
#line 454 
  struct mwifiex_adapter *adapter = mwifiex_cfg80211_get_adapter(wiphy);
  
#line 456 
  struct mwifiex_802_11d_domain_reg *domain_info = & adapter->domain_reg;
  
#line 459 
  domain_info->country_code[0] = adapter->country_code[0];
  
#line 460 
  domain_info->country_code[1] = adapter->country_code[1];
  
#line 461 
  domain_info->country_code[2] = (unsigned char)32U;
  
#line 463 
  tmp_0 = mwifiex_band_to_radio_type((unsigned char)((int)adapter->config_bands));
  
#line 463 
  band = (enum ieee80211_band)tmp_0;
  
#line 464 
  if (wiphy->bands[(unsigned int)band] == (struct ieee80211_supported_band *)0) {
    
#line 465 
    if ((adapter->debug_mask & 4U) != 0U) {
      
#line 465 
      if (adapter->dev != (struct device *)0) 
#line 465 
                                              _dev_info((struct device const *)adapter->dev,"11D: setting domain info in FW\n"); else ;
    }
    else ;
    
#line 467 
    __retres = -1;
    
#line 467 
    goto return_label;
  }
  else ;
  
#line 470 
  sband = wiphy->bands[(unsigned int)band];
  
#line 472 
  i = (unsigned char)0U;
  
#line 472 
  goto ldv_61479;
  ldv_61478: 
#line 473 
  ;
  
#line 473 
  ch = sband->channels + (int)i;
  
#line 474 
  if ((ch->flags & 1U) != 0U) 
#line 475 
                              goto ldv_61477; else ;
  
#line 477 
  if ((unsigned int)flag == 0U) {
    
#line 478 
    flag = (unsigned char)1U;
    
#line 479 
    first_chan = (unsigned char)ch->hw_value;
    
#line 480 
    next_chan = first_chan;
    
#line 481 
    max_pwr = (unsigned char)ch->max_power;
    
#line 482 
    no_of_parsed_chan = (unsigned char)1U;
    
#line 483 
    goto ldv_61477;
  }
  else ;
  
#line 486 
  if ((int)ch->hw_value == (int)next_chan + 1 && ch->max_power == (int)max_pwr) {
    
#line 488 
    next_chan = (u8)((int)next_chan + 1);
    
#line 489 
    no_of_parsed_chan = (u8)((int)no_of_parsed_chan + 1);
  }
  else {
    
#line 491 
    t = & domain_info->triplet[(int)no_of_triplet];
    
#line 492 
    t->__anonCompField_ieee80211_country_ie_triplet_108.chans.first_channel = first_chan;
    
#line 493 
    t->__anonCompField_ieee80211_country_ie_triplet_108.chans.num_channels = no_of_parsed_chan;
    
#line 494 
    t->__anonCompField_ieee80211_country_ie_triplet_108.chans.max_power = (signed char)max_pwr;
    
#line 495 
    no_of_triplet = (u8)((int)no_of_triplet + 1);
    
#line 496 
    first_chan = (unsigned char)ch->hw_value;
    
#line 497 
    next_chan = first_chan;
    
#line 498 
    max_pwr = (unsigned char)ch->max_power;
    
#line 499 
    no_of_parsed_chan = (unsigned char)1U;
  }
  ldv_61477: 
#line 501 
  ;
  
#line 472 
  i = (u8)((int)i + 1);
  ldv_61479: 
#line 473 
  ;
  
#line 472 
  if ((int)i < sband->n_channels) 
#line 474 
                                  goto ldv_61478; else 
#line 477 
                                                       goto ldv_61480;
  ldv_61480: 
#line 478 
  ;
  
#line 503 
  if ((unsigned int)flag != 0U) {
    
#line 504 
    t = & domain_info->triplet[(int)no_of_triplet];
    
#line 505 
    t->__anonCompField_ieee80211_country_ie_triplet_108.chans.first_channel = first_chan;
    
#line 506 
    t->__anonCompField_ieee80211_country_ie_triplet_108.chans.num_channels = no_of_parsed_chan;
    
#line 507 
    t->__anonCompField_ieee80211_country_ie_triplet_108.chans.max_power = (signed char)max_pwr;
    
#line 508 
    no_of_triplet = (u8)((int)no_of_triplet + 1);
  }
  else ;
  
#line 511 
  domain_info->no_of_triplet = no_of_triplet;
  
#line 513 
  priv = mwifiex_get_priv_3(adapter,(enum mwifiex_bss_role)MWIFIEX_BSS_ROLE_ANY);
  
#line 515 
  tmp_1 = mwifiex_send_cmd(priv,(unsigned short)91,(unsigned short)1,0U,(void *)0,(_Bool)0);
  
#line 515 
  if (tmp_1 != 0) {
    
#line 517 
    if ((adapter->debug_mask & 1073741824U) != 0U) {
      
#line 517 
      if (adapter->dev != (struct device *)0) 
#line 517 
                                              _dev_info((struct device const *)adapter->dev,"11D: setting domain info in FW\n"); else ;
    }
    else ;
    
#line 519 
    __retres = -1;
    
#line 519 
    goto return_label;
  }
  else ;
  
#line 522 
  __retres = 0;
  return_label: 
#line 522 
                return __retres;
}


#line 535  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfg80211.c"
static void mwifiex_reg_notifier(struct wiphy *wiphy, struct regulatory_request *request)
{
  int tmp_1;
  
#line 538 
  struct mwifiex_adapter *adapter = mwifiex_cfg80211_get_adapter(wiphy);
  
#line 539 
  struct mwifiex_private *priv = mwifiex_get_priv_3(adapter,(enum mwifiex_bss_role)MWIFIEX_BSS_ROLE_ANY);
  
#line 541 
  if ((adapter->debug_mask & 1073741824U) != 0U) {
    
#line 541 
    if (adapter->dev != (struct device *)0) 
#line 541 
                                            _dev_info((struct device const *)adapter->dev,"info: cfg80211 regulatory domain callback for %c%c\n",(int)request->alpha2[0],(int)request->alpha2[1]); else ;
  }
  else ;
  
#line 545 
  switch ((unsigned int)request->initiator) {
    case (unsigned int)2: 
#line 546 
    ;
    case (unsigned int)0: 
#line 547 
    ;
    case (unsigned int)1: 
#line 548 
    ;
    case (unsigned int)3: 
#line 549 
    ;
    
#line 550 
    goto ldv_61491;
    default: 
#line 551 
    ;
    
#line 552 
    if ((adapter->debug_mask & 4U) != 0U) {
      
#line 552 
      if (adapter->dev != (struct device *)0) 
#line 552 
                                              _dev_info((struct device const *)adapter->dev,"unknown regdom initiator: %d\n",(unsigned int)request->initiator); else ;
    }
    else ;
    
#line 555 
    goto return_label;
  }
  ldv_61491: 
#line 559 
  ;
  
#line 559 
  tmp_1 = strncmp((char const *)(& request->alpha2),"00",2UL);
  
#line 559 
  if (tmp_1 != 0) {
    int tmp_2;
    
#line 559 
    tmp_2 = strncmp((char const *)(& request->alpha2),(char const *)(& adapter->country_code),2UL);
    
#line 559 
    if (tmp_2 != 0) {
      
#line 562 
      memcpy((void *)(& adapter->country_code),(void const *)(& request->alpha2),2UL);
      
#line 564 
      mwifiex_send_domain_info_cmd_fw(wiphy);
      
#line 565 
      mwifiex_dnld_txpwr_table(priv);
    }
    else ;
  }
  else ;
  return_label: 
#line 567 
                return;
}


#line 576  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfg80211.c"
static int mwifiex_set_frag(struct mwifiex_private *priv, u32 frag_thr)
{
  int tmp;
  
#line 578 
  if (frag_thr + 4294967040U > 2090U) 
#line 580 
                                      frag_thr = 2346U; else ;
  
#line 582 
  tmp = mwifiex_send_cmd(priv,(unsigned short)22,(unsigned short)1,8U,(void *)(& frag_thr),(_Bool)1);
  
#line 582 
  return tmp;
}


#line 594  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfg80211.c"
static int mwifiex_set_rts(struct mwifiex_private *priv, u32 rts_thr)
{
  int tmp;
  
#line 596 
  if (rts_thr > 2347U) 
#line 597 
                       rts_thr = 2347U; else ;
  
#line 599 
  tmp = mwifiex_send_cmd(priv,(unsigned short)22,(unsigned short)1,5U,(void *)(& rts_thr),(_Bool)1);
  
#line 599 
  return tmp;
}


#line 611  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfg80211.c"
static int mwifiex_cfg80211_set_wiphy_params(struct wiphy *wiphy, u32 changed)
{
  int __retres;
  struct mwifiex_private *priv;
  struct mwifiex_uap_bss_param *bss_cfg;
  int ret;
  
#line 613 
  struct mwifiex_adapter *adapter = mwifiex_cfg80211_get_adapter(wiphy);
  
#line 618 
  priv = mwifiex_get_priv_3(adapter,(enum mwifiex_bss_role)MWIFIEX_BSS_ROLE_ANY);
  
#line 620 
  switch ((int)priv->bss_role) {
    case 1: 
#line 621 
    ;
    
#line 622 
    if ((unsigned int)priv->bss_started != 0U) {
      
#line 623 
      if ((adapter->debug_mask & 4U) != 0U) {
        
#line 623 
        if (adapter->dev != (struct device *)0) 
#line 623 
                                                _dev_info((struct device const *)adapter->dev,"cannot change wiphy params when bss started"); else ;
      }
      else ;
      
#line 625 
      __retres = -22;
      
#line 625 
      goto return_label;
    }
    else ;
    
#line 628 
    bss_cfg = (struct mwifiex_uap_bss_param *)kzalloc_7(292UL,208U);
    
#line 629 
    if (bss_cfg == (struct mwifiex_uap_bss_param *)0) {
      
#line 630 
      __retres = -12;
      
#line 630 
      goto return_label;
    }
    else ;
    
#line 632 
    mwifiex_set_sys_config_invalid_data(bss_cfg);
    
#line 634 
    if ((changed & 8U) != 0U) 
#line 635 
                              bss_cfg->rts_threshold = (unsigned short)wiphy->rts_threshold; else ;
    
#line 636 
    if ((changed & 4U) != 0U) 
#line 637 
                              bss_cfg->frag_threshold = (unsigned short)wiphy->frag_threshold; else ;
    
#line 638 
    if ((changed & 2U) != 0U) 
#line 639 
                              bss_cfg->retry_limit = wiphy->retry_long; else ;
    
#line 641 
    ret = mwifiex_send_cmd(priv,(unsigned short)176,(unsigned short)1,0U,(void *)bss_cfg,(_Bool)0);
    
#line 646 
    kfree((void const *)bss_cfg);
    
#line 647 
    if (ret != 0) {
      
#line 648 
      if ((adapter->debug_mask & 4U) != 0U) {
        
#line 648 
        if (adapter->dev != (struct device *)0) 
#line 648 
                                                _dev_info((struct device const *)adapter->dev,"Failed to set wiphy phy params\n"); else ;
      }
      else ;
      
#line 650 
      __retres = ret;
      
#line 650 
      goto return_label;
    }
    else ;
    
#line 652 
    goto ldv_61510;
    case 0: 
#line 654 
    ;
    
#line 655 
    if ((unsigned int)priv->media_connected != 0U) {
      
#line 656 
      if ((adapter->debug_mask & 4U) != 0U) {
        
#line 656 
        if (adapter->dev != (struct device *)0) 
#line 656 
                                                _dev_info((struct device const *)adapter->dev,"cannot change wiphy params when connected"); else ;
      }
      else ;
      
#line 658 
      __retres = -22;
      
#line 658 
      goto return_label;
    }
    else ;
    
#line 660 
    if ((changed & 8U) != 0U) {
      
#line 661 
      ret = mwifiex_set_rts(priv,wiphy->rts_threshold);
      
#line 663 
      if (ret != 0) {
        
#line 664 
        __retres = ret;
        
#line 664 
        goto return_label;
      }
      else ;
    }
    else ;
    
#line 666 
    if ((changed & 4U) != 0U) {
      
#line 667 
      ret = mwifiex_set_frag(priv,wiphy->frag_threshold);
      
#line 669 
      if (ret != 0) {
        
#line 670 
        __retres = ret;
        
#line 670 
        goto return_label;
      }
      else ;
    }
    else ;
    
#line 672 
    goto ldv_61510;
  }
  ldv_61510: 
#line 675 
  ;
  
#line 675 
  __retres = 0;
  return_label: 
#line 675 
                return __retres;
}


#line 679  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfg80211.c"
static int mwifiex_cfg80211_deinit_p2p(struct mwifiex_private *priv)
{
  int __retres;
  int tmp;
  
#line 681 
  u16 mode = (unsigned short)0U;
  
#line 683 
  tmp = mwifiex_send_cmd(priv,(unsigned short)235,(unsigned short)1,0U,(void *)(& mode),(_Bool)1);
  
#line 683 
  if (tmp != 0) {
    
#line 685 
    __retres = -1;
    
#line 685 
    goto return_label;
  }
  else ;
  
#line 687 
  __retres = 0;
  return_label: 
#line 687 
                return __retres;
}


#line 696  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfg80211.c"
static int mwifiex_cfg80211_init_p2p_client(struct mwifiex_private *priv)
{
  int __retres;
  u16 mode;
  int tmp;
  int tmp_0;
  int tmp_1;
  
#line 700 
  tmp = mwifiex_cfg80211_deinit_p2p(priv);
  
#line 700 
  if (tmp != 0) {
    
#line 701 
    __retres = -1;
    
#line 701 
    goto return_label;
  }
  else ;
  
#line 703 
  mode = (unsigned short)1U;
  
#line 704 
  tmp_0 = mwifiex_send_cmd(priv,(unsigned short)235,(unsigned short)1,0U,(void *)(& mode),(_Bool)1);
  
#line 704 
  if (tmp_0 != 0) {
    
#line 706 
    __retres = -1;
    
#line 706 
    goto return_label;
  }
  else ;
  
#line 708 
  mode = (unsigned short)3U;
  
#line 709 
  tmp_1 = mwifiex_send_cmd(priv,(unsigned short)235,(unsigned short)1,0U,(void *)(& mode),(_Bool)1);
  
#line 709 
  if (tmp_1 != 0) {
    
#line 711 
    __retres = -1;
    
#line 711 
    goto return_label;
  }
  else ;
  
#line 713 
  __retres = 0;
  return_label: 
#line 713 
                return __retres;
}


#line 722  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfg80211.c"
static int mwifiex_cfg80211_init_p2p_go(struct mwifiex_private *priv)
{
  int __retres;
  u16 mode;
  int tmp;
  int tmp_0;
  int tmp_1;
  
#line 726 
  tmp = mwifiex_cfg80211_deinit_p2p(priv);
  
#line 726 
  if (tmp != 0) {
    
#line 727 
    __retres = -1;
    
#line 727 
    goto return_label;
  }
  else ;
  
#line 729 
  mode = (unsigned short)1U;
  
#line 730 
  tmp_0 = mwifiex_send_cmd(priv,(unsigned short)235,(unsigned short)1,0U,(void *)(& mode),(_Bool)1);
  
#line 730 
  if (tmp_0 != 0) {
    
#line 732 
    __retres = -1;
    
#line 732 
    goto return_label;
  }
  else ;
  
#line 734 
  mode = (unsigned short)2U;
  
#line 735 
  tmp_1 = mwifiex_send_cmd(priv,(unsigned short)235,(unsigned short)1,0U,(void *)(& mode),(_Bool)1);
  
#line 735 
  if (tmp_1 != 0) {
    
#line 737 
    __retres = -1;
    
#line 737 
    goto return_label;
  }
  else ;
  
#line 739 
  __retres = 0;
  return_label: 
#line 739 
                return __retres;
}


#line 742  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfg80211.c"
static int mwifiex_deinit_priv_params(struct mwifiex_private *priv)
{
  int __retres;
  unsigned long flags;
  int tmp;
  
#line 744 
  struct mwifiex_adapter *adapter = priv->adapter;
  
#line 747 
  priv->mgmt_frame_mask = 0U;
  
#line 748 
  tmp = mwifiex_send_cmd(priv,(unsigned short)268,(unsigned short)1,0U,(void *)(& priv->mgmt_frame_mask),(_Bool)0);
  
#line 748 
  if (tmp != 0) {
    
#line 751 
    if ((adapter->debug_mask & 4U) != 0U) {
      
#line 751 
      if (adapter->dev != (struct device *)0) 
#line 751 
                                              _dev_info((struct device const *)adapter->dev,"could not unregister mgmt frame rx\n"); else ;
    }
    else ;
    
#line 753 
    __retres = -1;
    
#line 753 
    goto return_label;
  }
  else ;
  
#line 756 
  mwifiex_deauthenticate(priv,(u8 *)0U);
  
#line 758 
  ldv___ldv_spin_lock_76_2(& adapter->main_proc_lock);
  
#line 759 
  adapter->main_locked = (_Bool)1;
  
#line 760 
  if (adapter->mwifiex_processing != 0U) {
    
#line 761 
    ldv_spin_unlock_irqrestore_77_2(& adapter->main_proc_lock,flags);
    
#line 762 
    flush_workqueue(adapter->workqueue);
  }
  else 
#line 764 
       ldv_spin_unlock_irqrestore_78_0(& adapter->main_proc_lock,flags);
  
#line 767 
  ldv___ldv_spin_lock_79_0(& adapter->rx_proc_lock);
  
#line 768 
  adapter->rx_locked = (_Bool)1;
  
#line 769 
  if ((int)adapter->rx_processing != 0) {
    
#line 770 
    ldv_spin_unlock_irqrestore_80_2(& adapter->rx_proc_lock,flags);
    
#line 771 
    flush_workqueue(adapter->rx_workqueue);
  }
  else 
#line 773 
       ldv_spin_unlock_irqrestore_81_7(& adapter->rx_proc_lock,flags);
  
#line 776 
  mwifiex_free_priv(priv);
  
#line 777 
  priv->wdev.iftype = NL80211_IFTYPE_UNSPECIFIED;
  
#line 778 
  priv->bss_mode = 0U;
  
#line 779 
  priv->sec_info.authentication_mode = 0U;
  
#line 781 
  __retres = 0;
  return_label: 
#line 781 
                return __retres;
}


#line 785  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfg80211.c"
static int mwifiex_init_new_priv_params(struct mwifiex_private *priv, struct net_device *dev, enum nl80211_iftype type)
{
  int __retres;
  unsigned long flags;
  
#line 789 
  struct mwifiex_adapter *adapter = priv->adapter;
  
#line 792 
  mwifiex_init_priv(priv);
  
#line 794 
  priv->bss_mode = (unsigned int)type;
  
#line 795 
  priv->wdev.iftype = type;
  
#line 797 
  mwifiex_init_priv_params(priv,priv->netdev);
  
#line 798 
  priv->bss_started = (unsigned char)0U;
  
#line 800 
  switch ((unsigned int)type) {
    case (unsigned int)2: 
#line 801 
    ;
    case (unsigned int)1: 
#line 802 
    ;
    
#line 803 
    priv->bss_role = (unsigned char)0U;
    
#line 804 
    priv->bss_type = (unsigned char)0U;
    
#line 805 
    goto ldv_61538;
    case (unsigned int)8: 
#line 806 
    ;
    case (unsigned int)9: 
#line 807 
    ;
    
#line 808 
    priv->bss_role = (unsigned char)0U;
    
#line 809 
    priv->bss_type = (unsigned char)2U;
    
#line 810 
    goto ldv_61538;
    case (unsigned int)3: 
#line 811 
    ;
    
#line 812 
    priv->bss_type = (unsigned char)1U;
    
#line 813 
    priv->bss_role = (unsigned char)1U;
    
#line 814 
    goto ldv_61538;
    default: 
#line 815 
    ;
    
#line 816 
    if ((adapter->debug_mask & 4U) != 0U) {
      
#line 816 
      if (adapter->dev != (struct device *)0) 
#line 816 
                                              _dev_info((struct device const *)adapter->dev,"%s: changing to %d not supported\n",(char *)(& dev->name),(unsigned int)type); else ;
    }
    else ;
    
#line 819 
    __retres = -95;
    
#line 819 
    goto return_label;
  }
  ldv_61538: 
#line 822 
  ;
  
#line 822 
  ldv___ldv_spin_lock_82_7(& adapter->main_proc_lock);
  
#line 823 
  adapter->main_locked = (_Bool)0;
  
#line 824 
  ldv_spin_unlock_irqrestore_83_8(& adapter->main_proc_lock,flags);
  
#line 826 
  ldv___ldv_spin_lock_84_4(& adapter->rx_proc_lock);
  
#line 827 
  adapter->rx_locked = (_Bool)0;
  
#line 828 
  ldv_spin_unlock_irqrestore_85_6(& adapter->rx_proc_lock,flags);
  
#line 830 
  __retres = 0;
  return_label: 
#line 830 
                return __retres;
}


#line 834  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfg80211.c"
static int mwifiex_change_vif_to_p2p(struct net_device *dev, enum nl80211_iftype curr_iftype, enum nl80211_iftype type, u32 *flags, struct vif_params *params)
{
  int __retres;
  struct mwifiex_private *priv;
  struct mwifiex_adapter *adapter;
  int tmp;
  int tmp_0;
  int tmp_3;
  int tmp_4;
  
#line 842 
  priv = mwifiex_netdev_get_priv(dev);
  
#line 844 
  if (priv == (struct mwifiex_private *)0) {
    
#line 845 
    __retres = -1;
    
#line 845 
    goto return_label;
  }
  else ;
  
#line 847 
  adapter = priv->adapter;
  
#line 849 
  if ((int)adapter->curr_iface_comb.p2p_intf == (int)adapter->iface_limit.p2p_intf) {
    
#line 851 
    if ((adapter->debug_mask & 4U) != 0U) {
      
#line 851 
      if (adapter->dev != (struct device *)0) 
#line 851 
                                              _dev_info((struct device const *)adapter->dev,"cannot create multiple P2P ifaces\n"); else ;
    }
    else ;
    
#line 853 
    __retres = -1;
    
#line 853 
    goto return_label;
  }
  else ;
  
#line 856 
  if ((adapter->debug_mask & 1073741824U) != 0U) {
    
#line 856 
    if (adapter->dev != (struct device *)0) 
#line 856 
                                            _dev_info((struct device const *)adapter->dev,"%s: changing role to p2p\n",(char *)(& dev->name)); else ;
  }
  else ;
  
#line 859 
  tmp = mwifiex_deinit_priv_params(priv);
  
#line 859 
  if (tmp != 0) {
    
#line 860 
    __retres = -1;
    
#line 860 
    goto return_label;
  }
  else ;
  
#line 861 
  tmp_0 = mwifiex_init_new_priv_params(priv,dev,type);
  
#line 861 
  if (tmp_0 != 0) {
    
#line 862 
    __retres = -1;
    
#line 862 
    goto return_label;
  }
  else ;
  
#line 864 
  switch ((unsigned int)type) {
    int tmp_1;
    int tmp_2;
    case (unsigned int)8: 
#line 865 
    ;
    
#line 866 
    tmp_1 = mwifiex_cfg80211_init_p2p_client(priv);
    
#line 866 
    if (tmp_1 != 0) {
      
#line 867 
      __retres = -14;
      
#line 867 
      goto return_label;
    }
    else ;
    
#line 868 
    goto ldv_61553;
    case (unsigned int)9: 
#line 869 
    ;
    
#line 870 
    tmp_2 = mwifiex_cfg80211_init_p2p_go(priv);
    
#line 870 
    if (tmp_2 != 0) {
      
#line 871 
      __retres = -14;
      
#line 871 
      goto return_label;
    }
    else ;
    
#line 872 
    goto ldv_61553;
    default: 
#line 873 
    ;
    
#line 874 
    if ((adapter->debug_mask & 4U) != 0U) {
      
#line 874 
      if (adapter->dev != (struct device *)0) 
#line 874 
                                              _dev_info((struct device const *)adapter->dev,"%s: changing to %d not supported\n",(char *)(& dev->name),(unsigned int)type); else ;
    }
    else ;
    
#line 877 
    __retres = -95;
    
#line 877 
    goto return_label;
  }
  ldv_61553: 
#line 880 
  ;
  
#line 880 
  tmp_3 = mwifiex_send_cmd(priv,(unsigned short)247,(unsigned short)1,0U,(void *)0,(_Bool)1);
  
#line 880 
  if (tmp_3 != 0) {
    
#line 882 
    __retres = -1;
    
#line 882 
    goto return_label;
  }
  else ;
  
#line 884 
  tmp_4 = mwifiex_sta_init_cmd(priv,(unsigned char)0,(_Bool)0);
  
#line 884 
  if (tmp_4 != 0) {
    
#line 885 
    __retres = -1;
    
#line 885 
    goto return_label;
  }
  else ;
  
#line 887 
  switch ((unsigned int)curr_iftype) {
    case (unsigned int)2: 
#line 888 
    ;
    case (unsigned int)1: 
#line 889 
    ;
    
#line 890 
    adapter->curr_iface_comb.sta_intf = (u8)((int)adapter->curr_iface_comb.sta_intf - 1);
    
#line 891 
    goto ldv_61558;
    case (unsigned int)3: 
#line 892 
    ;
    
#line 893 
    adapter->curr_iface_comb.uap_intf = (u8)((int)adapter->curr_iface_comb.uap_intf - 1);
    
#line 894 
    goto ldv_61558;
    default: 
#line 895 
    ;
    
#line 896 
    goto ldv_61558;
  }
  ldv_61558: 
#line 899 
  ;
  
#line 899 
  adapter->curr_iface_comb.p2p_intf = (u8)((int)adapter->curr_iface_comb.p2p_intf + 1);
  
#line 900 
  (dev->ieee80211_ptr)->iftype = type;
  
#line 902 
  __retres = 0;
  return_label: 
#line 902 
                return __retres;
}


#line 906  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfg80211.c"
static int mwifiex_change_vif_to_sta_adhoc(struct net_device *dev, enum nl80211_iftype curr_iftype, enum nl80211_iftype type, u32 *flags, struct vif_params *params)
{
  int __retres;
  struct mwifiex_private *priv;
  struct mwifiex_adapter *adapter;
  int tmp;
  int tmp_0;
  int tmp_1;
  int tmp_2;
  
#line 914 
  priv = mwifiex_netdev_get_priv(dev);
  
#line 916 
  if (priv == (struct mwifiex_private *)0) {
    
#line 917 
    __retres = -1;
    
#line 917 
    goto return_label;
  }
  else ;
  
#line 919 
  adapter = priv->adapter;
  
#line 921 
  if ((unsigned int)curr_iftype + 4294967288U > 1U && (int)adapter->curr_iface_comb.sta_intf == (int)adapter->iface_limit.sta_intf) {
    
#line 925 
    if ((adapter->debug_mask & 4U) != 0U) {
      
#line 925 
      if (adapter->dev != (struct device *)0) 
#line 925 
                                              _dev_info((struct device const *)adapter->dev,"cannot create multiple station/adhoc ifaces\n"); else ;
    }
    else ;
    
#line 927 
    __retres = -1;
    
#line 927 
    goto return_label;
  }
  else ;
  
#line 930 
  if (type == (unsigned int)NL80211_IFTYPE_STATION) {
    
#line 931 
    if ((adapter->debug_mask & 1073741824U) != 0U) {
      
#line 931 
      if (adapter->dev != (struct device *)0) 
#line 931 
                                              _dev_info((struct device const *)adapter->dev,"%s: changing role to station\n",(char *)(& dev->name)); else ;
    }
    else ;
  }
  else 
    
#line 934 
    if ((adapter->debug_mask & 1073741824U) != 0U) {
      
#line 934 
      if (adapter->dev != (struct device *)0) 
#line 934 
                                              _dev_info((struct device const *)adapter->dev,"%s: changing role to adhoc\n",(char *)(& dev->name)); else ;
    }
    else ;
  
#line 937 
  tmp = mwifiex_deinit_priv_params(priv);
  
#line 937 
  if (tmp != 0) {
    
#line 938 
    __retres = -1;
    
#line 938 
    goto return_label;
  }
  else ;
  
#line 939 
  tmp_0 = mwifiex_init_new_priv_params(priv,dev,type);
  
#line 939 
  if (tmp_0 != 0) {
    
#line 940 
    __retres = -1;
    
#line 940 
    goto return_label;
  }
  else ;
  
#line 941 
  tmp_1 = mwifiex_send_cmd(priv,(unsigned short)247,(unsigned short)1,0U,(void *)0,(_Bool)1);
  
#line 941 
  if (tmp_1 != 0) {
    
#line 943 
    __retres = -1;
    
#line 943 
    goto return_label;
  }
  else ;
  
#line 944 
  tmp_2 = mwifiex_sta_init_cmd(priv,(unsigned char)0,(_Bool)0);
  
#line 944 
  if (tmp_2 != 0) {
    
#line 945 
    __retres = -1;
    
#line 945 
    goto return_label;
  }
  else ;
  
#line 947 
  switch ((unsigned int)curr_iftype) {
    case (unsigned int)8: 
#line 948 
    ;
    case (unsigned int)9: 
#line 949 
    ;
    
#line 950 
    adapter->curr_iface_comb.p2p_intf = (u8)((int)adapter->curr_iface_comb.p2p_intf - 1);
    
#line 951 
    goto ldv_61572;
    case (unsigned int)3: 
#line 952 
    ;
    
#line 953 
    adapter->curr_iface_comb.uap_intf = (u8)((int)adapter->curr_iface_comb.uap_intf - 1);
    
#line 954 
    goto ldv_61572;
    default: 
#line 955 
    ;
    
#line 956 
    goto ldv_61572;
  }
  ldv_61572: 
#line 959 
  ;
  
#line 959 
  adapter->curr_iface_comb.sta_intf = (u8)((int)adapter->curr_iface_comb.sta_intf + 1);
  
#line 960 
  (dev->ieee80211_ptr)->iftype = type;
  
#line 961 
  __retres = 0;
  return_label: 
#line 961 
                return __retres;
}


#line 965  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfg80211.c"
static int mwifiex_change_vif_to_ap(struct net_device *dev, enum nl80211_iftype curr_iftype, enum nl80211_iftype type, u32 *flags, struct vif_params *params)
{
  int __retres;
  struct mwifiex_private *priv;
  struct mwifiex_adapter *adapter;
  int tmp;
  int tmp_0;
  int tmp_1;
  int tmp_2;
  
#line 973 
  priv = mwifiex_netdev_get_priv(dev);
  
#line 975 
  if (priv == (struct mwifiex_private *)0) {
    
#line 976 
    __retres = -1;
    
#line 976 
    goto return_label;
  }
  else ;
  
#line 978 
  adapter = priv->adapter;
  
#line 980 
  if ((int)adapter->curr_iface_comb.uap_intf == (int)adapter->iface_limit.uap_intf) {
    
#line 982 
    if ((adapter->debug_mask & 4U) != 0U) {
      
#line 982 
      if (adapter->dev != (struct device *)0) 
#line 982 
                                              _dev_info((struct device const *)adapter->dev,"cannot create multiple AP ifaces\n"); else ;
    }
    else ;
    
#line 984 
    __retres = -1;
    
#line 984 
    goto return_label;
  }
  else ;
  
#line 987 
  if ((adapter->debug_mask & 1073741824U) != 0U) {
    
#line 987 
    if (adapter->dev != (struct device *)0) 
#line 987 
                                            _dev_info((struct device const *)adapter->dev,"%s: changing role to AP\n",(char *)(& dev->name)); else ;
  }
  else ;
  
#line 990 
  tmp = mwifiex_deinit_priv_params(priv);
  
#line 990 
  if (tmp != 0) {
    
#line 991 
    __retres = -1;
    
#line 991 
    goto return_label;
  }
  else ;
  
#line 992 
  tmp_0 = mwifiex_init_new_priv_params(priv,dev,type);
  
#line 992 
  if (tmp_0 != 0) {
    
#line 993 
    __retres = -1;
    
#line 993 
    goto return_label;
  }
  else ;
  
#line 994 
  tmp_1 = mwifiex_send_cmd(priv,(unsigned short)247,(unsigned short)1,0U,(void *)0,(_Bool)1);
  
#line 994 
  if (tmp_1 != 0) {
    
#line 996 
    __retres = -1;
    
#line 996 
    goto return_label;
  }
  else ;
  
#line 997 
  tmp_2 = mwifiex_sta_init_cmd(priv,(unsigned char)0,(_Bool)0);
  
#line 997 
  if (tmp_2 != 0) {
    
#line 998 
    __retres = -1;
    
#line 998 
    goto return_label;
  }
  else ;
  
#line 1000 
  switch ((unsigned int)curr_iftype) {
    case (unsigned int)8: 
#line 1001 
    ;
    case (unsigned int)9: 
#line 1002 
    ;
    
#line 1003 
    adapter->curr_iface_comb.p2p_intf = (u8)((int)adapter->curr_iface_comb.p2p_intf - 1);
    
#line 1004 
    goto ldv_61586;
    case (unsigned int)2: 
#line 1005 
    ;
    case (unsigned int)1: 
#line 1006 
    ;
    
#line 1007 
    adapter->curr_iface_comb.sta_intf = (u8)((int)adapter->curr_iface_comb.sta_intf - 1);
    
#line 1008 
    goto ldv_61586;
    default: 
#line 1009 
    ;
    
#line 1010 
    goto ldv_61586;
  }
  ldv_61586: 
#line 1013 
  ;
  
#line 1013 
  adapter->curr_iface_comb.uap_intf = (u8)((int)adapter->curr_iface_comb.uap_intf + 1);
  
#line 1014 
  (dev->ieee80211_ptr)->iftype = type;
  
#line 1015 
  __retres = 0;
  return_label: 
#line 1015 
                return __retres;
}


#line 1021  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfg80211.c"
static int mwifiex_cfg80211_change_virtual_intf(struct wiphy *wiphy, struct net_device *dev, enum nl80211_iftype type, u32 *flags, struct vif_params *params)
{
  int __retres;
  
#line 1026 
  struct mwifiex_private *priv = mwifiex_netdev_get_priv(dev);
  
#line 1027 
  enum nl80211_iftype curr_iftype = (dev->ieee80211_ptr)->iftype;
  
#line 1029 
  switch ((unsigned int)curr_iftype) {
    case (unsigned int)1: 
#line 1030 
    ;
    
#line 1031 
    switch ((unsigned int)type) {
      int tmp_0;
      int tmp_1;
      int tmp_2;
      case (unsigned int)2: 
#line 1032 
      ;
      
#line 1033 
      priv->bss_mode = (unsigned int)type;
      
#line 1034 
      priv->sec_info.authentication_mode = 0U;
      
#line 1036 
      (dev->ieee80211_ptr)->iftype = type;
      
#line 1037 
      mwifiex_deauthenticate(priv,(u8 *)0U);
      
#line 1038 
      tmp_0 = mwifiex_send_cmd(priv,(unsigned short)247,(unsigned short)1,0U,(void *)0,(_Bool)1);
      
#line 1038 
      __retres = tmp_0;
      
#line 1038 
      goto return_label;
      case (unsigned int)8: 
#line 1041 
      ;
      case (unsigned int)9: 
#line 1042 
      ;
      
#line 1043 
      tmp_1 = mwifiex_change_vif_to_p2p(dev,curr_iftype,type,flags,params);
      
#line 1043 
      __retres = tmp_1;
      
#line 1043 
      goto return_label;
      case (unsigned int)3: 
#line 1045 
      ;
      
#line 1046 
      tmp_2 = mwifiex_change_vif_to_ap(dev,curr_iftype,type,flags,params);
      
#line 1046 
      __retres = tmp_2;
      
#line 1046 
      goto return_label;
      case (unsigned int)0: 
#line 1048 
      ;
      
#line 1049 
      if (((priv->adapter)->debug_mask & 1073741824U) != 0U) {
        
#line 1049 
        if ((priv->adapter)->dev != (struct device *)0) 
#line 1049 
                                                        _dev_info((struct device const *)(priv->adapter)->dev,"%s: kept type as IBSS\n",(char *)(& dev->name)); else ;
      }
      else ;
      case (unsigned int)1: 
#line 1051 
      ;
      
#line 1052 
      __retres = 0;
      
#line 1052 
      goto return_label;
      default: 
#line 1053 
      ;
      
#line 1054 
      if (((priv->adapter)->debug_mask & 4U) != 0U) {
        
#line 1054 
        if ((priv->adapter)->dev != (struct device *)0) 
#line 1054 
                                                        _dev_info((struct device const *)(priv->adapter)->dev,"%s: changing to %d not supported\n",(char *)(& dev->name),(unsigned int)type); else ;
      }
      else ;
      
#line 1057 
      __retres = -95;
      
#line 1057 
      goto return_label;
    }
    
#line 1059 
    goto ldv_61607;
    case (unsigned int)2: 
#line 1060 
    ;
    
#line 1061 
    switch ((unsigned int)type) {
      int tmp_3;
      int tmp_4;
      int tmp_5;
      case (unsigned int)1: 
#line 1062 
      ;
      
#line 1063 
      priv->bss_mode = (unsigned int)type;
      
#line 1064 
      priv->sec_info.authentication_mode = 0U;
      
#line 1066 
      (dev->ieee80211_ptr)->iftype = type;
      
#line 1067 
      mwifiex_deauthenticate(priv,(u8 *)0U);
      
#line 1068 
      tmp_3 = mwifiex_send_cmd(priv,(unsigned short)247,(unsigned short)1,0U,(void *)0,(_Bool)1);
      
#line 1068 
      __retres = tmp_3;
      
#line 1068 
      goto return_label;
      case (unsigned int)8: 
#line 1071 
      ;
      case (unsigned int)9: 
#line 1072 
      ;
      
#line 1073 
      tmp_4 = mwifiex_change_vif_to_p2p(dev,curr_iftype,type,flags,params);
      
#line 1073 
      __retres = tmp_4;
      
#line 1073 
      goto return_label;
      case (unsigned int)3: 
#line 1075 
      ;
      
#line 1076 
      tmp_5 = mwifiex_change_vif_to_ap(dev,curr_iftype,type,flags,params);
      
#line 1076 
      __retres = tmp_5;
      
#line 1076 
      goto return_label;
      case (unsigned int)0: 
#line 1078 
      ;
      
#line 1079 
      if (((priv->adapter)->debug_mask & 1073741824U) != 0U) {
        
#line 1079 
        if ((priv->adapter)->dev != (struct device *)0) 
#line 1079 
                                                        _dev_info((struct device const *)(priv->adapter)->dev,"%s: kept type as STA\n",(char *)(& dev->name)); else ;
      }
      else ;
      case (unsigned int)2: 
#line 1081 
      ;
      
#line 1082 
      __retres = 0;
      
#line 1082 
      goto return_label;
      default: 
#line 1083 
      ;
      
#line 1084 
      if (((priv->adapter)->debug_mask & 4U) != 0U) {
        
#line 1084 
        if ((priv->adapter)->dev != (struct device *)0) 
#line 1084 
                                                        _dev_info((struct device const *)(priv->adapter)->dev,"%s: changing to %d not supported\n",(char *)(& dev->name),(unsigned int)type); else ;
      }
      else ;
      
#line 1087 
      __retres = -95;
      
#line 1087 
      goto return_label;
    }
    
#line 1089 
    goto ldv_61607;
    case (unsigned int)3: 
#line 1090 
    ;
    
#line 1091 
    switch ((unsigned int)type) {
      int tmp_6;
      int tmp_7;
      case (unsigned int)1: 
#line 1092 
      ;
      case (unsigned int)2: 
#line 1093 
      ;
      
#line 1094 
      tmp_6 = mwifiex_change_vif_to_sta_adhoc(dev,curr_iftype,type,flags,params);
      
#line 1094 
      __retres = tmp_6;
      
#line 1094 
      goto return_label;
      case (unsigned int)8: 
#line 1098 
      ;
      case (unsigned int)9: 
#line 1099 
      ;
      
#line 1100 
      tmp_7 = mwifiex_change_vif_to_p2p(dev,curr_iftype,type,flags,params);
      
#line 1100 
      __retres = tmp_7;
      
#line 1100 
      goto return_label;
      case (unsigned int)0: 
#line 1102 
      ;
      
#line 1103 
      if (((priv->adapter)->debug_mask & 1073741824U) != 0U) {
        
#line 1103 
        if ((priv->adapter)->dev != (struct device *)0) 
#line 1103 
                                                        _dev_info((struct device const *)(priv->adapter)->dev,"%s: kept type as AP\n",(char *)(& dev->name)); else ;
      }
      else ;
      case (unsigned int)3: 
#line 1105 
      ;
      
#line 1106 
      __retres = 0;
      
#line 1106 
      goto return_label;
      default: 
#line 1107 
      ;
      
#line 1108 
      if (((priv->adapter)->debug_mask & 4U) != 0U) {
        
#line 1108 
        if ((priv->adapter)->dev != (struct device *)0) 
#line 1108 
                                                        _dev_info((struct device const *)(priv->adapter)->dev,"%s: changing to %d not supported\n",(char *)(& dev->name),(unsigned int)type); else ;
      }
      else ;
      
#line 1111 
      __retres = -95;
      
#line 1111 
      goto return_label;
    }
    
#line 1113 
    goto ldv_61607;
    case (unsigned int)8: 
#line 1114 
    ;
    case (unsigned int)9: 
#line 1115 
    ;
    
#line 1116 
    switch ((unsigned int)type) {
      int tmp_8;
      int tmp_9;
      int tmp_10;
      int tmp_11;
      int tmp_12;
      case (unsigned int)2: 
#line 1117 
      ;
      
#line 1118 
      tmp_8 = mwifiex_cfg80211_init_p2p_client(priv);
      
#line 1118 
      if (tmp_8 != 0) {
        
#line 1119 
        __retres = -14;
        
#line 1119 
        goto return_label;
      }
      else ;
      
#line 1120 
      (dev->ieee80211_ptr)->iftype = type;
      
#line 1121 
      goto ldv_61627;
      case (unsigned int)1: 
#line 1122 
      ;
      
#line 1123 
      tmp_9 = mwifiex_cfg80211_deinit_p2p(priv);
      
#line 1123 
      if (tmp_9 != 0) {
        
#line 1124 
        __retres = -14;
        
#line 1124 
        goto return_label;
      }
      else ;
      
#line 1125 
      tmp_10 = mwifiex_change_vif_to_sta_adhoc(dev,curr_iftype,type,flags,params);
      
#line 1125 
      __retres = tmp_10;
      
#line 1125 
      goto return_label;
      case (unsigned int)3: 
#line 1129 
      ;
      
#line 1130 
      tmp_11 = mwifiex_cfg80211_deinit_p2p(priv);
      
#line 1130 
      if (tmp_11 != 0) {
        
#line 1131 
        __retres = -14;
        
#line 1131 
        goto return_label;
      }
      else ;
      
#line 1132 
      tmp_12 = mwifiex_change_vif_to_ap(dev,curr_iftype,type,flags,params);
      
#line 1132 
      __retres = tmp_12;
      
#line 1132 
      goto return_label;
      case (unsigned int)0: 
#line 1134 
      ;
      
#line 1135 
      if (((priv->adapter)->debug_mask & 1073741824U) != 0U) {
        
#line 1135 
        if ((priv->adapter)->dev != (struct device *)0) 
#line 1135 
                                                        _dev_info((struct device const *)(priv->adapter)->dev,"%s: kept type as P2P\n",(char *)(& dev->name)); else ;
      }
      else ;
      case (unsigned int)8: 
#line 1137 
      ;
      case (unsigned int)9: 
#line 1138 
      ;
      
#line 1139 
      __retres = 0;
      
#line 1139 
      goto return_label;
      default: 
#line 1140 
      ;
      
#line 1141 
      if (((priv->adapter)->debug_mask & 4U) != 0U) {
        
#line 1141 
        if ((priv->adapter)->dev != (struct device *)0) 
#line 1141 
                                                        _dev_info((struct device const *)(priv->adapter)->dev,"%s: changing to %d not supported\n",(char *)(& dev->name),(unsigned int)type); else ;
      }
      else ;
      
#line 1144 
      __retres = -95;
      
#line 1144 
      goto return_label;
    }
    ldv_61627: 
#line 1146 
    ;
    
#line 1146 
    goto ldv_61607;
    default: 
#line 1147 
    ;
    
#line 1148 
    if (((priv->adapter)->debug_mask & 4U) != 0U) {
      
#line 1148 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 1148 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"%s: unknown iftype: %d\n",(char *)(& dev->name),(unsigned int)(dev->ieee80211_ptr)->iftype); else ;
    }
    else ;
    
#line 1151 
    __retres = -95;
    
#line 1151 
    goto return_label;
  }
  ldv_61607: 
#line 1155 
  ;
  
#line 1155 
  __retres = 0;
  return_label: 
#line 1155 
                return __retres;
}


#line 1159  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfg80211.c"
static void mwifiex_parse_htinfo(struct mwifiex_private *priv, u8 tx_htinfo, struct rate_info *rate)
{
  
#line 1162 
  struct mwifiex_adapter *adapter = priv->adapter;
  
#line 1164 
  if (adapter->is_hw_11ac_capable != 0U) {
    
#line 1166 
    if (((unsigned long)tx_htinfo & 1UL) != 0UL) {
      
#line 1168 
      rate->mcs = priv->tx_rate;
      
#line 1169 
      rate->flags = (unsigned char)((unsigned int)rate->flags | 1U);
    }
    else ;
    
#line 1171 
    if (((unsigned long)tx_htinfo & 2UL) != 0UL) {
      
#line 1173 
      rate->mcs = (unsigned char)((unsigned int)priv->tx_rate & 15U);
      
#line 1174 
      rate->flags = (unsigned char)((unsigned int)rate->flags | 2U);
    }
    else ;
    
#line 1177 
    if (((unsigned long)tx_htinfo & 3UL) != 0UL) {
      
#line 1179 
      switch ((unsigned long)tx_htinfo & 12UL) {
        case (unsigned long)0: 
#line 1180 
        ;
        
#line 1181 
        rate->bw = (unsigned char)2U;
        
#line 1182 
        goto ldv_61642;
        case (unsigned long)4: 
#line 1183 
        ;
        
#line 1184 
        rate->bw = (unsigned char)3U;
        
#line 1185 
        goto ldv_61642;
        case (unsigned long)8: 
#line 1186 
        ;
        
#line 1187 
        rate->bw = (unsigned char)4U;
        
#line 1188 
        goto ldv_61642;
        case (unsigned long)12: 
#line 1189 
        ;
        
#line 1190 
        rate->bw = (unsigned char)5U;
        
#line 1191 
        goto ldv_61642;
      }
      ldv_61642: 
#line 1194 
      ;
      
#line 1194 
      if (((unsigned long)tx_htinfo & 16UL) != 0UL) 
#line 1195 
                                                    rate->flags = (unsigned char)((unsigned int)rate->flags | 4U); else ;
      
#line 1197 
      if ((unsigned int)((int)priv->tx_rate >> 4) == 1U) 
#line 1198 
                                                         rate->nss = (unsigned char)2U; else 
                                                                    
#line 1200 
                                                                    rate->nss = (unsigned char)1U;
    }
    else ;
  }
  else 
    
#line 1207 
    if (((unsigned long)tx_htinfo & 1UL) != 0UL && (unsigned int)priv->tx_rate <= 15U) {
      
#line 1208 
      rate->mcs = priv->tx_rate;
      
#line 1209 
      rate->flags = (unsigned char)((unsigned int)rate->flags | 1U);
      
#line 1210 
      rate->bw = (unsigned char)2U;
      
#line 1211 
      if (((unsigned long)tx_htinfo & 2UL) != 0UL) 
#line 1212 
                                                   rate->bw = (unsigned char)3U; else ;
      
#line 1213 
      if (((unsigned long)tx_htinfo & 4UL) != 0UL) 
#line 1214 
                                                   rate->flags = (unsigned char)((unsigned int)rate->flags | 4U); else ;
    }
    else ;
  
#line 1216 
  return;
}


#line 1231  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfg80211.c"
static int mwifiex_dump_station_info(struct mwifiex_private *priv, struct mwifiex_sta_node *node, struct station_info *sinfo)
{
  int __retres;
  u32 rate;
  int tmp;
  int tmp_0;
  
#line 1237 
  sinfo->filled = 10124U;
  
#line 1242 
  if (((unsigned long)priv->bss_role & 1UL) != 0UL) {
    
#line 1243 
    if (node == (struct mwifiex_sta_node *)0) {
      
#line 1244 
      __retres = -2;
      
#line 1244 
      goto return_label;
    }
    else ;
    
#line 1246 
    sinfo->filled |= 4098U;
    
#line 1248 
    sinfo->inactive_time = jiffies_to_msecs((unsigned long)((unsigned long long)jiffies - node->stats.last_rx));
    
#line 1251 
    sinfo->signal = node->stats.rssi;
    
#line 1252 
    sinfo->signal_avg = node->stats.rssi;
    
#line 1253 
    sinfo->rx_bytes = node->stats.rx_bytes;
    
#line 1254 
    sinfo->tx_bytes = node->stats.tx_bytes;
    
#line 1255 
    sinfo->rx_packets = node->stats.rx_packets;
    
#line 1256 
    sinfo->tx_packets = node->stats.tx_packets;
    
#line 1257 
    sinfo->tx_failed = node->stats.tx_failed;
    
#line 1259 
    mwifiex_parse_htinfo(priv,(unsigned char)((int)node->stats.last_tx_htinfo),& sinfo->txrate);
    
#line 1261 
    sinfo->txrate.legacy = (unsigned short)((unsigned int)((unsigned short)node->stats.last_tx_rate) * 5U);
    
#line 1263 
    __retres = 0;
    
#line 1263 
    goto return_label;
  }
  else ;
  
#line 1267 
  tmp = mwifiex_send_cmd(priv,(unsigned short)164,(unsigned short)0,0U,(void *)0,(_Bool)1);
  
#line 1267 
  if (tmp != 0) {
    
#line 1269 
    if (((priv->adapter)->debug_mask & 4U) != 0U) {
      
#line 1269 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 1269 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"failed to get signal information\n"); else ;
    }
    else ;
    
#line 1271 
    __retres = -14;
    
#line 1271 
    goto return_label;
  }
  else ;
  
#line 1274 
  tmp_0 = mwifiex_drv_get_data_rate(priv,& rate);
  
#line 1274 
  if (tmp_0 != 0) {
    
#line 1275 
    if (((priv->adapter)->debug_mask & 4U) != 0U) {
      
#line 1275 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 1275 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"getting data rate error\n"); else ;
    }
    else ;
    
#line 1277 
    __retres = -14;
    
#line 1277 
    goto return_label;
  }
  else ;
  
#line 1281 
  mwifiex_send_cmd(priv,(unsigned short)22,(unsigned short)0,3U,(void *)(& priv->dtim_period),(_Bool)1);
  
#line 1285 
  mwifiex_parse_htinfo(priv,(unsigned char)((int)priv->tx_htinfo),& sinfo->txrate);
  
#line 1287 
  sinfo->signal_avg = (signed char)priv->bcn_rssi_avg;
  
#line 1288 
  sinfo->rx_bytes = (unsigned long long)priv->stats.rx_bytes;
  
#line 1289 
  sinfo->tx_bytes = (unsigned long long)priv->stats.tx_bytes;
  
#line 1290 
  sinfo->rx_packets = (unsigned int)priv->stats.rx_packets;
  
#line 1291 
  sinfo->tx_packets = (unsigned int)priv->stats.tx_packets;
  
#line 1292 
  sinfo->signal = (signed char)priv->bcn_rssi_avg;
  
#line 1294 
  sinfo->txrate.legacy = (unsigned short)((unsigned int)((unsigned short)rate) * 5U);
  
#line 1296 
  if (priv->bss_mode == 2U) {
    
#line 1297 
    sinfo->filled |= 32768U;
    
#line 1298 
    sinfo->bss_param.flags = (unsigned char)0U;
    
#line 1299 
    if (((int)priv->curr_bss_params.bss_descriptor.cap_info_bitmap & 32) != 0) 
      
#line 1301 
      sinfo->bss_param.flags = (unsigned char)((unsigned int)sinfo->bss_param.flags | 2U); else ;
    
#line 1303 
    if (((int)priv->curr_bss_params.bss_descriptor.cap_info_bitmap & 1024) != 0) 
      
#line 1305 
      sinfo->bss_param.flags = (unsigned char)((unsigned int)sinfo->bss_param.flags | 4U); else ;
    
#line 1307 
    sinfo->bss_param.dtim_period = priv->dtim_period;
    
#line 1308 
    sinfo->bss_param.beacon_interval = priv->curr_bss_params.bss_descriptor.beacon_period;
  }
  else ;
  
#line 1312 
  __retres = 0;
  return_label: 
#line 1312 
                return __retres;
}


#line 1322  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfg80211.c"
static int mwifiex_cfg80211_get_station(struct wiphy *wiphy, struct net_device *dev, u8 const *mac, struct station_info *sinfo)
{
  int __retres;
  int tmp_0;
  int tmp_1;
  
#line 1325 
  struct mwifiex_private *priv = mwifiex_netdev_get_priv(dev);
  
#line 1327 
  if ((unsigned int)priv->media_connected == 0U) {
    
#line 1328 
    __retres = -2;
    
#line 1328 
    goto return_label;
  }
  else ;
  
#line 1329 
  tmp_0 = memcmp((void const *)mac,(void const *)(& priv->cfg_bssid),6UL);
  
#line 1329 
  if (tmp_0 != 0) {
    
#line 1330 
    __retres = -2;
    
#line 1330 
    goto return_label;
  }
  else ;
  
#line 1332 
  tmp_1 = mwifiex_dump_station_info(priv,(struct mwifiex_sta_node *)0,sinfo);
  
#line 1332 
  __retres = tmp_1;
  return_label: 
#line 1332 
                return __retres;
}


#line 1339  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfg80211.c"
static int mwifiex_cfg80211_dump_station(struct wiphy *wiphy, struct net_device *dev, int idx, u8 *mac, struct station_info *sinfo)
{
  int __retres;
  struct mwifiex_sta_node *node;
  
#line 1342 
  struct mwifiex_private *priv = mwifiex_netdev_get_priv(dev);
  
#line 1345 
  if ((((unsigned long)priv->bss_role & 1UL) == 0UL && (unsigned int)priv->media_connected != 0U) && idx == 0) {
    int tmp_0;
    
#line 1347 
    ether_addr_copy(mac,(u8 const *)(& priv->cfg_bssid));
    
#line 1348 
    tmp_0 = mwifiex_dump_station_info(priv,(struct mwifiex_sta_node *)0,sinfo);
    
#line 1348 
    __retres = tmp_0;
    
#line 1348 
    goto return_label;
  }
  else 
    
#line 1349 
    if (((unsigned long)priv->bss_role & 1UL) != 0UL) {
      struct mwifiex_sta_node *tmp_2;
      struct mwifiex_sta_node *tmp_3;
      int tmp_4;
      struct mwifiex_sta_node *tmp_5;
      
#line 1350 
      mwifiex_send_cmd(priv,(unsigned short)179,(unsigned short)0,0U,(void *)0,(_Bool)1);
      
#line 1353 
      if (node != (struct mwifiex_sta_node *)0 && & node->list == & priv->sta_list) {
        
#line 1354 
        node = (struct mwifiex_sta_node *)0;
        
#line 1355 
        __retres = -2;
        
#line 1355 
        goto return_label;
      }
      else ;
      
#line 1358 
      tmp_2 = (struct mwifiex_sta_node *)(node != (struct mwifiex_sta_node *)0);
      
#line 1358 
      if (tmp_2) ;
      else {
        struct mwifiex_sta_node *tmp_1;
        {
          
#line 1358 
          struct list_head const *__mptr = (struct list_head const *)(& priv->sta_list);
          
#line 1358 
          tmp_1 = (struct mwifiex_sta_node *)__mptr;
        }
        
#line 1358 
        tmp_2 = tmp_1;
      }
      
#line 1358 
      node = tmp_2;
      {
        
#line 1359 
        struct list_head const *__mptr_0 = (struct list_head const *)node->list.next;
        
#line 1359 
        tmp_3 = (struct mwifiex_sta_node *)__mptr_0;
      }
      
#line 1359 
      node = tmp_3;
      
#line 1359 
      goto ldv_61675;
      ldv_61674: 
#line 1360 
      ;
      
#line 1360 
      ether_addr_copy(mac,(u8 const *)(& node->mac_addr));
      
#line 1361 
      tmp_4 = mwifiex_dump_station_info(priv,node,sinfo);
      
#line 1361 
      __retres = tmp_4;
      
#line 1361 
      goto return_label;
      {
        
#line 1359 
        struct list_head const *__mptr_1 = (struct list_head const *)node->list.next;
        
#line 1359 
        tmp_5 = (struct mwifiex_sta_node *)__mptr_1;
      }
      
#line 1359 
      node = tmp_5;
      ldv_61675: 
#line 1361 
      ;
      
#line 1359 
      if (& node->list != & priv->sta_list) 
#line 1361 
                                            goto ldv_61674; else 
#line 1364 
                                                                 goto ldv_61676;
      ldv_61676: 
#line 1365 
      ;
    }
    else ;
  
#line 1365 
  __retres = -2;
  return_label: 
#line 1365 
                return __retres;
}


#line 1369  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfg80211.c"
static int mwifiex_cfg80211_dump_survey(struct wiphy *wiphy, struct net_device *dev, int idx, struct survey_info *survey)
{
  int __retres;
  enum ieee80211_band band;
  int tmp_2;
  
#line 1372 
  struct mwifiex_private *priv = mwifiex_netdev_get_priv(dev);
  
#line 1373 
  struct mwifiex_chan_stats *pchan_stats = (priv->adapter)->chan_stats;
  
#line 1376 
  if ((priv->adapter)->debug_mask < (unsigned int)0) {
    
#line 1376 
    if ((priv->adapter)->dev != (struct device *)0) 
#line 1376 
                                                    _dev_info((struct device const *)(priv->adapter)->dev,"dump_survey idx=%d\n",idx); else ;
  }
  else ;
  
#line 1378 
  memset((void *)survey,0,64UL);
  
#line 1380 
  if ((((unsigned long)priv->bss_role & 1UL) == 0UL && (unsigned int)priv->media_connected != 0U) && idx == 0) {
    u8 tmp_0;
    int tmp_1;
    
#line 1382 
    u8 curr_bss_band = priv->curr_bss_params.band;
    
#line 1383 
    u32 chan = priv->curr_bss_params.bss_descriptor.channel;
    
#line 1385 
    tmp_0 = mwifiex_band_to_radio_type((unsigned char)((int)curr_bss_band));
    
#line 1385 
    band = (enum ieee80211_band)tmp_0;
    
#line 1386 
    tmp_1 = ieee80211_channel_to_frequency((int)chan,band);
    
#line 1386 
    ;
    
#line 1386 
    survey->channel = ieee80211_get_channel(wiphy,tmp_1);
    
#line 1389 
    if ((int)priv->bcn_nf_last != 0) {
      
#line 1390 
      survey->filled = 1U;
      
#line 1391 
      survey->noise = (signed char)priv->bcn_nf_last;
    }
    else ;
    
#line 1393 
    __retres = 0;
    
#line 1393 
    goto return_label;
  }
  else ;
  
#line 1396 
  if ((priv->adapter)->num_in_chan_stats <= (unsigned int)idx) {
    
#line 1397 
    __retres = -2;
    
#line 1397 
    goto return_label;
  }
  else ;
  
#line 1399 
  if ((unsigned int)(pchan_stats + idx)->cca_scan_dur == 0U) {
    
#line 1400 
    __retres = 0;
    
#line 1400 
    goto return_label;
  }
  else ;
  
#line 1402 
  band = (enum ieee80211_band)(pchan_stats + idx)->bandcfg;
  
#line 1403 
  tmp_2 = ieee80211_channel_to_frequency((int)(pchan_stats + idx)->chan_num,band);
  
#line 1403 
  ;
  
#line 1403 
  survey->channel = ieee80211_get_channel(wiphy,tmp_2);
  
#line 1405 
  survey->filled = 13U;
  
#line 1408 
  survey->noise = (pchan_stats + idx)->noise;
  
#line 1409 
  survey->time = (unsigned long long)(pchan_stats + idx)->cca_scan_dur;
  
#line 1410 
  survey->time_busy = (unsigned long long)(pchan_stats + idx)->cca_busy_dur;
  
#line 1412 
  __retres = 0;
  return_label: 
#line 1412 
                return __retres;
}


#line 1416  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfg80211.c"
static struct ieee80211_rate mwifiex_rates[12U] = {{.flags = 0U, .bitrate = (unsigned short)10U, .hw_value = (unsigned short)2U, .hw_value_short = (unsigned short)0}, {.flags = 0U, .bitrate = (unsigned short)20U, .hw_value = (unsigned short)4U, .hw_value_short = (unsigned short)0}, {.flags = 0U, .bitrate = (unsigned short)55U, .hw_value = (unsigned short)11U, .hw_value_short = (unsigned short)0}, {.flags = 0U, .bitrate = (unsigned short)110U, .hw_value = (unsigned short)22U, .hw_value_short = (unsigned short)0}, {.flags = 0U, .bitrate = (unsigned short)60U, .hw_value = (unsigned short)12U, .hw_value_short = (unsigned short)0}, {.flags = 0U, .bitrate = (unsigned short)90U, .hw_value = (unsigned short)18U, .hw_value_short = (unsigned short)0}, {.flags = 0U, .bitrate = (unsigned short)120U, .hw_value = (unsigned short)24U, .hw_value_short = (unsigned short)0}, {.flags = 0U, .bitrate = (unsigned short)180U, .hw_value = (unsigned short)36U, .hw_value_short = (unsigned short)0}, {.flags = 0U, .bitrate = (unsigned short)240U, .hw_value = (unsigned short)48U, .hw_value_short = (unsigned short)0}, {.flags = 0U, .bitrate = (unsigned short)360U, .hw_value = (unsigned short)72U, .hw_value_short = (unsigned short)0}, {.flags = 0U, .bitrate = (unsigned short)480U, .hw_value = (unsigned short)96U, .hw_value_short = (unsigned short)0}, {.flags = 0U, .bitrate = (unsigned short)540U, .hw_value = (unsigned short)108U, .hw_value_short = (unsigned short)0}};

#line 1432  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfg80211.c"
static struct ieee80211_channel mwifiex_channels_2ghz[14U] = {{.band = 0, .center_freq = (unsigned short)2412U, .hw_value = (unsigned short)1U, .flags = 0U, .max_antenna_gain = 0, .max_power = 0, .max_reg_power = 0, .beacon_found = (_Bool)0, .orig_flags = 0U, .orig_mag = 0, .orig_mpwr = 0, .dfs_state = 0, .dfs_state_entered = 0UL, .dfs_cac_ms = 0U}, {.band = 0, .center_freq = (unsigned short)2417U, .hw_value = (unsigned short)2U, .flags = 0U, .max_antenna_gain = 0, .max_power = 0, .max_reg_power = 0, .beacon_found = (_Bool)0, .orig_flags = 0U, .orig_mag = 0, .orig_mpwr = 0, .dfs_state = 0, .dfs_state_entered = 0UL, .dfs_cac_ms = 0U}, {.band = 0, .center_freq = (unsigned short)2422U, .hw_value = (unsigned short)3U, .flags = 0U, .max_antenna_gain = 0, .max_power = 0, .max_reg_power = 0, .beacon_found = (_Bool)0, .orig_flags = 0U, .orig_mag = 0, .orig_mpwr = 0, .dfs_state = 0, .dfs_state_entered = 0UL, .dfs_cac_ms = 0U}, {.band = 0, .center_freq = (unsigned short)2427U, .hw_value = (unsigned short)4U, .flags = 0U, .max_antenna_gain = 0, .max_power = 0, .max_reg_power = 0, .beacon_found = (_Bool)0, .orig_flags = 0U, .orig_mag = 0, .orig_mpwr = 0, .dfs_state = 0, .dfs_state_entered = 0UL, .dfs_cac_ms = 0U}, {.band = 0, .center_freq = (unsigned short)2432U, .hw_value = (unsigned short)5U, .flags = 0U, .max_antenna_gain = 0, .max_power = 0, .max_reg_power = 0, .beacon_found = (_Bool)0, .orig_flags = 0U, .orig_mag = 0, .orig_mpwr = 0, .dfs_state = 0, .dfs_state_entered = 0UL, .dfs_cac_ms = 0U}, {.band = 0, .center_freq = (unsigned short)2437U, .hw_value = (unsigned short)6U, .flags = 0U, .max_antenna_gain = 0, .max_power = 0, .max_reg_power = 0, .beacon_found = (_Bool)0, .orig_flags = 0U, .orig_mag = 0, .orig_mpwr = 0, .dfs_state = 0, .dfs_state_entered = 0UL, .dfs_cac_ms = 0U}, {.band = 0, .center_freq = (unsigned short)2442U, .hw_value = (unsigned short)7U, .flags = 0U, .max_antenna_gain = 0, .max_power = 0, .max_reg_power = 0, .beacon_found = (_Bool)0, .orig_flags = 0U, .orig_mag = 0, .orig_mpwr = 0, .dfs_state = 0, .dfs_state_entered = 0UL, .dfs_cac_ms = 0U}, {.band = 0, .center_freq = (unsigned short)2447U, .hw_value = (unsigned short)8U, .flags = 0U, .max_antenna_gain = 0, .max_power = 0, .max_reg_power = 0, .beacon_found = (_Bool)0, .orig_flags = 0U, .orig_mag = 0, .orig_mpwr = 0, .dfs_state = 0, .dfs_state_entered = 0UL, .dfs_cac_ms = 0U}, {.band = 0, .center_freq = (unsigned short)2452U, .hw_value = (unsigned short)9U, .flags = 0U, .max_antenna_gain = 0, .max_power = 0, .max_reg_power = 0, .beacon_found = (_Bool)0, .orig_flags = 0U, .orig_mag = 0, .orig_mpwr = 0, .dfs_state = 0, .dfs_state_entered = 0UL, .dfs_cac_ms = 0U}, {.band = 0, .center_freq = (unsigned short)2457U, .hw_value = (unsigned short)10U, .flags = 0U, .max_antenna_gain = 0, .max_power = 0, .max_reg_power = 0, .beacon_found = (_Bool)0, .orig_flags = 0U, .orig_mag = 0, .orig_mpwr = 0, .dfs_state = 0, .dfs_state_entered = 0UL, .dfs_cac_ms = 0U}, {.band = 0, .center_freq = (unsigned short)2462U, .hw_value = (unsigned short)11U, .flags = 0U, .max_antenna_gain = 0, .max_power = 0, .max_reg_power = 0, .beacon_found = (_Bool)0, .orig_flags = 0U, .orig_mag = 0, .orig_mpwr = 0, .dfs_state = 0, .dfs_state_entered = 0UL, .dfs_cac_ms = 0U}, {.band = 0, .center_freq = (unsigned short)2467U, .hw_value = (unsigned short)12U, .flags = 0U, .max_antenna_gain = 0, .max_power = 0, .max_reg_power = 0, .beacon_found = (_Bool)0, .orig_flags = 0U, .orig_mag = 0, .orig_mpwr = 0, .dfs_state = 0, .dfs_state_entered = 0UL, .dfs_cac_ms = 0U}, {.band = 0, .center_freq = (unsigned short)2472U, .hw_value = (unsigned short)13U, .flags = 0U, .max_antenna_gain = 0, .max_power = 0, .max_reg_power = 0, .beacon_found = (_Bool)0, .orig_flags = 0U, .orig_mag = 0, .orig_mpwr = 0, .dfs_state = 0, .dfs_state_entered = 0UL, .dfs_cac_ms = 0U}, {.band = 0, .center_freq = (unsigned short)2484U, .hw_value = (unsigned short)14U, .flags = 0U, .max_antenna_gain = 0, .max_power = 0, .max_reg_power = 0, .beacon_found = (_Bool)0, .orig_flags = 0U, .orig_mag = 0, .orig_mpwr = 0, .dfs_state = 0, .dfs_state_entered = 0UL, .dfs_cac_ms = 0U}};

#line 1449  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfg80211.c"
static struct ieee80211_supported_band mwifiex_band_2ghz = {.channels = (struct ieee80211_channel *)(& mwifiex_channels_2ghz), .bitrates = (struct ieee80211_rate *)(& mwifiex_rates), .band = 0, .n_channels = 14, .n_bitrates = 12, .ht_cap = {.cap = (unsigned short)0, .ht_supported = (_Bool)0, .ampdu_factor = (unsigned char)0, .ampdu_density = (unsigned char)0, .mcs = {.rx_mask = {(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0}, .rx_highest = (unsigned short)0, .tx_params = (unsigned char)0, .reserved = {(unsigned char)0, (unsigned char)0, (unsigned char)0}}}, .vht_cap = {.vht_supported = (_Bool)0, .cap = 0U, .vht_mcs = {.rx_mcs_map = (unsigned short)0, .rx_highest = (unsigned short)0, .tx_mcs_map = (unsigned short)0, .tx_highest = (unsigned short)0}}};

#line 1456  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfg80211.c"
static struct ieee80211_channel mwifiex_channels_5ghz[31U] = {{.band = 0, .center_freq = (unsigned short)5040U, .hw_value = (unsigned short)8U, .flags = 0U, .max_antenna_gain = 0, .max_power = 0, .max_reg_power = 0, .beacon_found = (_Bool)0, .orig_flags = 0U, .orig_mag = 0, .orig_mpwr = 0, .dfs_state = 0, .dfs_state_entered = 0UL, .dfs_cac_ms = 0U}, {.band = 0, .center_freq = (unsigned short)5060U, .hw_value = (unsigned short)12U, .flags = 0U, .max_antenna_gain = 0, .max_power = 0, .max_reg_power = 0, .beacon_found = (_Bool)0, .orig_flags = 0U, .orig_mag = 0, .orig_mpwr = 0, .dfs_state = 0, .dfs_state_entered = 0UL, .dfs_cac_ms = 0U}, {.band = 0, .center_freq = (unsigned short)5080U, .hw_value = (unsigned short)16U, .flags = 0U, .max_antenna_gain = 0, .max_power = 0, .max_reg_power = 0, .beacon_found = (_Bool)0, .orig_flags = 0U, .orig_mag = 0, .orig_mpwr = 0, .dfs_state = 0, .dfs_state_entered = 0UL, .dfs_cac_ms = 0U}, {.band = 0, .center_freq = (unsigned short)5170U, .hw_value = (unsigned short)34U, .flags = 0U, .max_antenna_gain = 0, .max_power = 0, .max_reg_power = 0, .beacon_found = (_Bool)0, .orig_flags = 0U, .orig_mag = 0, .orig_mpwr = 0, .dfs_state = 0, .dfs_state_entered = 0UL, .dfs_cac_ms = 0U}, {.band = 0, .center_freq = (unsigned short)5190U, .hw_value = (unsigned short)38U, .flags = 0U, .max_antenna_gain = 0, .max_power = 0, .max_reg_power = 0, .beacon_found = (_Bool)0, .orig_flags = 0U, .orig_mag = 0, .orig_mpwr = 0, .dfs_state = 0, .dfs_state_entered = 0UL, .dfs_cac_ms = 0U}, {.band = 0, .center_freq = (unsigned short)5210U, .hw_value = (unsigned short)42U, .flags = 0U, .max_antenna_gain = 0, .max_power = 0, .max_reg_power = 0, .beacon_found = (_Bool)0, .orig_flags = 0U, .orig_mag = 0, .orig_mpwr = 0, .dfs_state = 0, .dfs_state_entered = 0UL, .dfs_cac_ms = 0U}, {.band = 0, .center_freq = (unsigned short)5230U, .hw_value = (unsigned short)46U, .flags = 0U, .max_antenna_gain = 0, .max_power = 0, .max_reg_power = 0, .beacon_found = (_Bool)0, .orig_flags = 0U, .orig_mag = 0, .orig_mpwr = 0, .dfs_state = 0, .dfs_state_entered = 0UL, .dfs_cac_ms = 0U}, {.band = 0, .center_freq = (unsigned short)5180U, .hw_value = (unsigned short)36U, .flags = 0U, .max_antenna_gain = 0, .max_power = 0, .max_reg_power = 0, .beacon_found = (_Bool)0, .orig_flags = 0U, .orig_mag = 0, .orig_mpwr = 0, .dfs_state = 0, .dfs_state_entered = 0UL, .dfs_cac_ms = 0U}, {.band = 0, .center_freq = (unsigned short)5200U, .hw_value = (unsigned short)40U, .flags = 0U, .max_antenna_gain = 0, .max_power = 0, .max_reg_power = 0, .beacon_found = (_Bool)0, .orig_flags = 0U, .orig_mag = 0, .orig_mpwr = 0, .dfs_state = 0, .dfs_state_entered = 0UL, .dfs_cac_ms = 0U}, {.band = 0, .center_freq = (unsigned short)5220U, .hw_value = (unsigned short)44U, .flags = 0U, .max_antenna_gain = 0, .max_power = 0, .max_reg_power = 0, .beacon_found = (_Bool)0, .orig_flags = 0U, .orig_mag = 0, .orig_mpwr = 0, .dfs_state = 0, .dfs_state_entered = 0UL, .dfs_cac_ms = 0U}, {.band = 0, .center_freq = (unsigned short)5240U, .hw_value = (unsigned short)48U, .flags = 0U, .max_antenna_gain = 0, .max_power = 0, .max_reg_power = 0, .beacon_found = (_Bool)0, .orig_flags = 0U, .orig_mag = 0, .orig_mpwr = 0, .dfs_state = 0, .dfs_state_entered = 0UL, .dfs_cac_ms = 0U}, {.band = 0, .center_freq = (unsigned short)5260U, .hw_value = (unsigned short)52U, .flags = 0U, .max_antenna_gain = 0, .max_power = 0, .max_reg_power = 0, .beacon_found = (_Bool)0, .orig_flags = 0U, .orig_mag = 0, .orig_mpwr = 0, .dfs_state = 0, .dfs_state_entered = 0UL, .dfs_cac_ms = 0U}, {.band = 0, .center_freq = (unsigned short)5280U, .hw_value = (unsigned short)56U, .flags = 0U, .max_antenna_gain = 0, .max_power = 0, .max_reg_power = 0, .beacon_found = (_Bool)0, .orig_flags = 0U, .orig_mag = 0, .orig_mpwr = 0, .dfs_state = 0, .dfs_state_entered = 0UL, .dfs_cac_ms = 0U}, {.band = 0, .center_freq = (unsigned short)5300U, .hw_value = (unsigned short)60U, .flags = 0U, .max_antenna_gain = 0, .max_power = 0, .max_reg_power = 0, .beacon_found = (_Bool)0, .orig_flags = 0U, .orig_mag = 0, .orig_mpwr = 0, .dfs_state = 0, .dfs_state_entered = 0UL, .dfs_cac_ms = 0U}, {.band = 0, .center_freq = (unsigned short)5320U, .hw_value = (unsigned short)64U, .flags = 0U, .max_antenna_gain = 0, .max_power = 0, .max_reg_power = 0, .beacon_found = (_Bool)0, .orig_flags = 0U, .orig_mag = 0, .orig_mpwr = 0, .dfs_state = 0, .dfs_state_entered = 0UL, .dfs_cac_ms = 0U}, {.band = 0, .center_freq = (unsigned short)5500U, .hw_value = (unsigned short)100U, .flags = 0U, .max_antenna_gain = 0, .max_power = 0, .max_reg_power = 0, .beacon_found = (_Bool)0, .orig_flags = 0U, .orig_mag = 0, .orig_mpwr = 0, .dfs_state = 0, .dfs_state_entered = 0UL, .dfs_cac_ms = 0U}, {.band = 0, .center_freq = (unsigned short)5520U, .hw_value = (unsigned short)104U, .flags = 0U, .max_antenna_gain = 0, .max_power = 0, .max_reg_power = 0, .beacon_found = (_Bool)0, .orig_flags = 0U, .orig_mag = 0, .orig_mpwr = 0, .dfs_state = 0, .dfs_state_entered = 0UL, .dfs_cac_ms = 0U}, {.band = 0, .center_freq = (unsigned short)5540U, .hw_value = (unsigned short)108U, .flags = 0U, .max_antenna_gain = 0, .max_power = 0, .max_reg_power = 0, .beacon_found = (_Bool)0, .orig_flags = 0U, .orig_mag = 0, .orig_mpwr = 0, .dfs_state = 0, .dfs_state_entered = 0UL, .dfs_cac_ms = 0U}, {.band = 0, .center_freq = (unsigned short)5560U, .hw_value = (unsigned short)112U, .flags = 0U, .max_antenna_gain = 0, .max_power = 0, .max_reg_power = 0, .beacon_found = (_Bool)0, .orig_flags = 0U, .orig_mag = 0, .orig_mpwr = 0, .dfs_state = 0, .dfs_state_entered = 0UL, .dfs_cac_ms = 0U}, {.band = 0, .center_freq = (unsigned short)5580U, .hw_value = (unsigned short)116U, .flags = 0U, .max_antenna_gain = 0, .max_power = 0, .max_reg_power = 0, .beacon_found = (_Bool)0, .orig_flags = 0U, .orig_mag = 0, .orig_mpwr = 0, .dfs_state = 0, .dfs_state_entered = 0UL, .dfs_cac_ms = 0U}, {.band = 0, .center_freq = (unsigned short)5600U, .hw_value = (unsigned short)120U, .flags = 0U, .max_antenna_gain = 0, .max_power = 0, .max_reg_power = 0, .beacon_found = (_Bool)0, .orig_flags = 0U, .orig_mag = 0, .orig_mpwr = 0, .dfs_state = 0, .dfs_state_entered = 0UL, .dfs_cac_ms = 0U}, {.band = 0, .center_freq = (unsigned short)5620U, .hw_value = (unsigned short)124U, .flags = 0U, .max_antenna_gain = 0, .max_power = 0, .max_reg_power = 0, .beacon_found = (_Bool)0, .orig_flags = 0U, .orig_mag = 0, .orig_mpwr = 0, .dfs_state = 0, .dfs_state_entered = 0UL, .dfs_cac_ms = 0U}, {.band = 0, .center_freq = (unsigned short)5640U, .hw_value = (unsigned short)128U, .flags = 0U, .max_antenna_gain = 0, .max_power = 0, .max_reg_power = 0, .beacon_found = (_Bool)0, .orig_flags = 0U, .orig_mag = 0, .orig_mpwr = 0, .dfs_state = 0, .dfs_state_entered = 0UL, .dfs_cac_ms = 0U}, {.band = 0, .center_freq = (unsigned short)5660U, .hw_value = (unsigned short)132U, .flags = 0U, .max_antenna_gain = 0, .max_power = 0, .max_reg_power = 0, .beacon_found = (_Bool)0, .orig_flags = 0U, .orig_mag = 0, .orig_mpwr = 0, .dfs_state = 0, .dfs_state_entered = 0UL, .dfs_cac_ms = 0U}, {.band = 0, .center_freq = (unsigned short)5680U, .hw_value = (unsigned short)136U, .flags = 0U, .max_antenna_gain = 0, .max_power = 0, .max_reg_power = 0, .beacon_found = (_Bool)0, .orig_flags = 0U, .orig_mag = 0, .orig_mpwr = 0, .dfs_state = 0, .dfs_state_entered = 0UL, .dfs_cac_ms = 0U}, {.band = 0, .center_freq = (unsigned short)5700U, .hw_value = (unsigned short)140U, .flags = 0U, .max_antenna_gain = 0, .max_power = 0, .max_reg_power = 0, .beacon_found = (_Bool)0, .orig_flags = 0U, .orig_mag = 0, .orig_mpwr = 0, .dfs_state = 0, .dfs_state_entered = 0UL, .dfs_cac_ms = 0U}, {.band = 0, .center_freq = (unsigned short)5745U, .hw_value = (unsigned short)149U, .flags = 0U, .max_antenna_gain = 0, .max_power = 0, .max_reg_power = 0, .beacon_found = (_Bool)0, .orig_flags = 0U, .orig_mag = 0, .orig_mpwr = 0, .dfs_state = 0, .dfs_state_entered = 0UL, .dfs_cac_ms = 0U}, {.band = 0, .center_freq = (unsigned short)5765U, .hw_value = (unsigned short)153U, .flags = 0U, .max_antenna_gain = 0, .max_power = 0, .max_reg_power = 0, .beacon_found = (_Bool)0, .orig_flags = 0U, .orig_mag = 0, .orig_mpwr = 0, .dfs_state = 0, .dfs_state_entered = 0UL, .dfs_cac_ms = 0U}, {.band = 0, .center_freq = (unsigned short)5785U, .hw_value = (unsigned short)157U, .flags = 0U, .max_antenna_gain = 0, .max_power = 0, .max_reg_power = 0, .beacon_found = (_Bool)0, .orig_flags = 0U, .orig_mag = 0, .orig_mpwr = 0, .dfs_state = 0, .dfs_state_entered = 0UL, .dfs_cac_ms = 0U}, {.band = 0, .center_freq = (unsigned short)5805U, .hw_value = (unsigned short)161U, .flags = 0U, .max_antenna_gain = 0, .max_power = 0, .max_reg_power = 0, .beacon_found = (_Bool)0, .orig_flags = 0U, .orig_mag = 0, .orig_mpwr = 0, .dfs_state = 0, .dfs_state_entered = 0UL, .dfs_cac_ms = 0U}, {.band = 0, .center_freq = (unsigned short)5825U, .hw_value = (unsigned short)165U, .flags = 0U, .max_antenna_gain = 0, .max_power = 0, .max_reg_power = 0, .beacon_found = (_Bool)0, .orig_flags = 0U, .orig_mag = 0, .orig_mpwr = 0, .dfs_state = 0, .dfs_state_entered = 0UL, .dfs_cac_ms = 0U}};

#line 1490  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfg80211.c"
static struct ieee80211_supported_band mwifiex_band_5ghz = {.channels = (struct ieee80211_channel *)(& mwifiex_channels_5ghz), .bitrates = (struct ieee80211_rate *)(& mwifiex_rates) + 4U, .band = 0, .n_channels = 31, .n_bitrates = 8, .ht_cap = {.cap = (unsigned short)0, .ht_supported = (_Bool)0, .ampdu_factor = (unsigned char)0, .ampdu_density = (unsigned char)0, .mcs = {.rx_mask = {(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0}, .rx_highest = (unsigned short)0, .tx_params = (unsigned char)0, .reserved = {(unsigned char)0, (unsigned char)0, (unsigned char)0}}}, .vht_cap = {.vht_supported = (_Bool)0, .cap = 0U, .vht_mcs = {.rx_mcs_map = (unsigned short)0, .rx_highest = (unsigned short)0, .tx_mcs_map = (unsigned short)0, .tx_highest = (unsigned short)0}}};

#line 1499  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfg80211.c"
static u32 const mwifiex_cipher_suites[5U] = {1027073U, 1027077U, 1027074U, 1027076U, 1027078U};

#line 1509  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfg80211.c"
static struct ieee80211_txrx_stypes const mwifiex_mgmt_stypes[12U] = {[2] = {.tx = (unsigned short)8224U, .rx = (unsigned short)8208U}, {.tx = (unsigned short)8224U, .rx = (unsigned short)8208U}, [8] = {.tx = (unsigned short)8224U, .rx = (unsigned short)8208U}, {.tx = (unsigned short)8224U, .rx = (unsigned short)8208U}};

#line 1542  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfg80211.c"
static int mwifiex_cfg80211_set_bitrate_mask(struct wiphy *wiphy, struct net_device *dev, u8 const *peer, struct cfg80211_bitrate_mask const *mask)
{
  int __retres;
  u16 bitmap_rates[18U];
  enum ieee80211_band band;
  u8 tmp_0;
  int tmp_1;
  
#line 1547 
  struct mwifiex_private *priv = mwifiex_netdev_get_priv(dev);
  
#line 1550 
  struct mwifiex_adapter *adapter = priv->adapter;
  
#line 1552 
  if ((unsigned int)priv->media_connected == 0U) {
    
#line 1553 
    if ((adapter->debug_mask & 4U) != 0U) {
      
#line 1553 
      if (adapter->dev != (struct device *)0) 
#line 1553 
                                              _dev_info((struct device const *)adapter->dev,"Can not set Tx data rate in disconnected state\n"); else ;
    }
    else ;
    
#line 1555 
    __retres = -22;
    
#line 1555 
    goto return_label;
  }
  else ;
  
#line 1558 
  tmp_0 = mwifiex_band_to_radio_type((unsigned char)((int)priv->curr_bss_params.band));
  
#line 1558 
  band = (enum ieee80211_band)tmp_0;
  
#line 1560 
  memset((void *)(& bitmap_rates),0,36UL);
  
#line 1563 
  if (band == (unsigned int)IEEE80211_BAND_2GHZ) 
#line 1564 
                                                 bitmap_rates[0] = (unsigned short)((unsigned int)((unsigned short)mask->control[(unsigned int)band].legacy) & 15U); else ;
  
#line 1567 
  if (band == (unsigned int)IEEE80211_BAND_2GHZ) 
#line 1568 
                                                 bitmap_rates[1] = (unsigned short)((unsigned int)((unsigned short)(mask->control[(unsigned int)band].legacy >> 4)) & 255U); else 
                                                                    
#line 1570 
                                                                    bitmap_rates[1] = (unsigned short)mask->control[(unsigned int)band].legacy;
  
#line 1573 
  bitmap_rates[2] = (unsigned short)mask->control[(unsigned int)band].ht_mcs[0];
  
#line 1574 
  if ((unsigned int)adapter->hw_dev_mcs_support == 34U) 
#line 1575 
                                                        bitmap_rates[2] = (unsigned short)((int)bitmap_rates[2] | ((int)mask->control[(unsigned int)band].ht_mcs[1] << 8)); else ;
  
#line 1578 
  if ((unsigned int)adapter->fw_api_ver == 15U) {
    
#line 1579 
    bitmap_rates[10] = mask->control[(unsigned int)band].vht_mcs[0];
    
#line 1580 
    if ((unsigned int)adapter->hw_dev_mcs_support == 34U) 
#line 1581 
                                                          bitmap_rates[11] = mask->control[(unsigned int)band].vht_mcs[1]; else ;
  }
  else ;
  
#line 1584 
  tmp_1 = mwifiex_send_cmd(priv,(unsigned short)214,(unsigned short)1,0U,(void *)(& bitmap_rates),(_Bool)1);
  
#line 1584 
  __retres = tmp_1;
  return_label: 
#line 1584 
                return __retres;
}


#line 1594  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfg80211.c"
static int mwifiex_cfg80211_set_cqm_rssi_config(struct wiphy *wiphy, struct net_device *dev, s32 rssi_thold, u32 rssi_hyst)
{
  int __retres;
  struct mwifiex_ds_misc_subsc_evt subsc_evt;
  
#line 1598 
  struct mwifiex_private *priv = mwifiex_netdev_get_priv(dev);
  
#line 1601 
  priv->cqm_rssi_thold = rssi_thold;
  
#line 1602 
  priv->cqm_rssi_hyst = rssi_hyst;
  
#line 1604 
  memset((void *)(& subsc_evt),0,8UL);
  
#line 1605 
  subsc_evt.events = (unsigned short)17U;
  
#line 1608 
  if (rssi_thold != 0 && rssi_hyst != 0U) {
    long tmp_1;
    long tmp_3;
    int tmp_4;
    
#line 1609 
    subsc_evt.action = (unsigned short)2U;
    {
      long ret;
      {
        int tmp_0;
        
#line 1610 
        int __x_0 = rssi_thold;
        
#line 1610 
        if (__x_0 < 0) 
#line 1610 
                       tmp_0 = - __x_0; else 
#line 1610 
                                             tmp_0 = __x_0;
        
#line 1610 
        ret = (long)tmp_0;
      }
      
#line 1610 
      tmp_1 = ret;
    }
    
#line 1610 
    subsc_evt.bcn_l_rssi_cfg.abs_value = (unsigned char)tmp_1;
    {
      long ret_0;
      {
        int tmp_2;
        
#line 1611 
        int __x_2 = rssi_thold;
        
#line 1611 
        if (__x_2 < 0) 
#line 1611 
                       tmp_2 = - __x_2; else 
#line 1611 
                                             tmp_2 = __x_2;
        
#line 1611 
        ret_0 = (long)tmp_2;
      }
      
#line 1611 
      tmp_3 = ret_0;
    }
    
#line 1611 
    subsc_evt.bcn_h_rssi_cfg.abs_value = (unsigned char)tmp_3;
    
#line 1612 
    subsc_evt.bcn_l_rssi_cfg.evt_freq = (unsigned char)1U;
    
#line 1613 
    subsc_evt.bcn_h_rssi_cfg.evt_freq = (unsigned char)1U;
    
#line 1614 
    tmp_4 = mwifiex_send_cmd(priv,(unsigned short)117,(unsigned short)0,0U,(void *)(& subsc_evt),(_Bool)1);
    
#line 1614 
    __retres = tmp_4;
    
#line 1614 
    goto return_label;
  }
  else {
    int tmp_5;
    
#line 1618 
    subsc_evt.action = (unsigned short)3U;
    
#line 1619 
    tmp_5 = mwifiex_send_cmd(priv,(unsigned short)117,(unsigned short)0,0U,(void *)(& subsc_evt),(_Bool)1);
    
#line 1619 
    __retres = tmp_5;
    
#line 1619 
    goto return_label;
  }
  
#line 1624 
  __retres = 0;
  return_label: 
#line 1624 
                return __retres;
}


#line 1630  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfg80211.c"
static int mwifiex_cfg80211_change_beacon(struct wiphy *wiphy, struct net_device *dev, struct cfg80211_beacon_data *data)
{
  int __retres;
  int tmp_0;
  
#line 1634 
  struct mwifiex_private *priv = mwifiex_netdev_get_priv(dev);
  
#line 1636 
  if (((unsigned long)priv->bss_role & 1UL) == 0UL) {
    
#line 1637 
    if (((priv->adapter)->debug_mask & 4U) != 0U) {
      
#line 1637 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 1637 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"%s: bss_type mismatched\n","mwifiex_cfg80211_change_beacon"); else ;
    }
    else ;
    
#line 1639 
    __retres = -22;
    
#line 1639 
    goto return_label;
  }
  else ;
  
#line 1642 
  if ((unsigned int)priv->bss_started == 0U) {
    
#line 1643 
    if (((priv->adapter)->debug_mask & 4U) != 0U) {
      
#line 1643 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 1643 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"%s: bss not started\n","mwifiex_cfg80211_change_beacon"); else ;
    }
    else ;
    
#line 1645 
    __retres = -22;
    
#line 1645 
    goto return_label;
  }
  else ;
  
#line 1648 
  tmp_0 = mwifiex_set_mgmt_ies(priv,data);
  
#line 1648 
  if (tmp_0 != 0) {
    
#line 1649 
    if (((priv->adapter)->debug_mask & 4U) != 0U) {
      
#line 1649 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 1649 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"%s: setting mgmt ies failed\n","mwifiex_cfg80211_change_beacon"); else ;
    }
    else ;
    
#line 1651 
    __retres = -14;
    
#line 1651 
    goto return_label;
  }
  else ;
  
#line 1654 
  __retres = 0;
  return_label: 
#line 1654 
                return __retres;
}


#line 1664  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfg80211.c"
static int mwifiex_cfg80211_del_station(struct wiphy *wiphy, struct net_device *dev, struct station_del_parameters *params)
{
  int __retres;
  struct mwifiex_sta_node *sta_node;
  u8 deauth_mac[6U];
  unsigned long flags;
  int tmp_0;
  bool tmp_3;
  
#line 1667 
  struct mwifiex_private *priv = mwifiex_netdev_get_priv(dev);
  
#line 1672 
  tmp_0 = list_empty((struct list_head const *)(& priv->sta_list));
  
#line 1672 
  if (tmp_0 != 0) {
    
#line 1673 
    __retres = 0;
    
#line 1673 
    goto return_label;
  }
  else 
    
#line 1672 
    if ((unsigned int)priv->bss_started == 0U) {
      
#line 1673 
      __retres = 0;
      
#line 1673 
      goto return_label;
    }
    else ;
  
#line 1675 
  if (params->mac == (u8 const *)0U) {
    
#line 1676 
    __retres = 0;
    
#line 1676 
    goto return_label;
  }
  else {
    bool tmp_1;
    
#line 1675 
    tmp_1 = is_broadcast_ether_addr(params->mac);
    
#line 1675 
    if ((int)tmp_1 != 0) {
      
#line 1676 
      __retres = 0;
      
#line 1676 
      goto return_label;
    }
    else ;
  }
  
#line 1678 
  if (((priv->adapter)->debug_mask & 1073741824U) != 0U) {
    
#line 1678 
    if ((priv->adapter)->dev != (struct device *)0) 
#line 1678 
                                                    _dev_info((struct device const *)(priv->adapter)->dev,"%s: mac address %pM\n","mwifiex_cfg80211_del_station",params->mac); else ;
  }
  else ;
  
#line 1681 
  eth_zero_addr((u8 *)(& deauth_mac));
  
#line 1683 
  ldv___ldv_spin_lock_86_1(& priv->sta_list_spinlock);
  
#line 1684 
  sta_node = mwifiex_get_sta_entry(priv,params->mac);
  
#line 1685 
  if (sta_node != (struct mwifiex_sta_node *)0) 
#line 1686 
                                                ether_addr_copy((u8 *)(& deauth_mac),params->mac); else ;
  
#line 1687 
  ldv_spin_unlock_irqrestore_87_2(& priv->sta_list_spinlock,flags);
  
#line 1689 
  tmp_3 = is_valid_ether_addr((u8 const *)(& deauth_mac));
  
#line 1689 
  if ((int)tmp_3 != 0) {
    int tmp_2;
    
#line 1690 
    tmp_2 = mwifiex_send_cmd(priv,(unsigned short)181,(unsigned short)1,0U,(void *)(& deauth_mac),(_Bool)1);
    
#line 1690 
    if (tmp_2 != 0) {
      
#line 1693 
      __retres = -1;
      
#line 1693 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 1696 
  __retres = 0;
  return_label: 
#line 1696 
                return __retres;
}


#line 1700  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfg80211.c"
static int mwifiex_cfg80211_set_antenna(struct wiphy *wiphy, u32 tx_ant, u32 rx_ant)
{
  int __retres;
  struct mwifiex_ds_ant_cfg ant_cfg;
  int tmp_1;
  
#line 1702 
  struct mwifiex_adapter *adapter = mwifiex_cfg80211_get_adapter(wiphy);
  
#line 1703 
  struct mwifiex_private *priv = mwifiex_get_priv_3(adapter,(enum mwifiex_bss_role)MWIFIEX_BSS_ROLE_ANY);
  
#line 1707 
  if (tx_ant == 0U || rx_ant == 0U) {
    
#line 1708 
    __retres = -95;
    
#line 1708 
    goto return_label;
  }
  else ;
  
#line 1710 
  if ((unsigned int)adapter->hw_dev_mcs_support != 34U) {
    
#line 1714 
    if (tx_ant != rx_ant) {
      
#line 1715 
      __retres = -95;
      
#line 1715 
      goto return_label;
    }
    else ;
    
#line 1717 
    if (((tx_ant + 4294967295U) & tx_ant) != 0U && (unsigned long)tx_ant != (1UL << (int)adapter->number_of_antenna) + 18446744073709551615UL) {
      
#line 1719 
      __retres = -95;
      
#line 1719 
      goto return_label;
    }
    else ;
    
#line 1721 
    if ((unsigned long)tx_ant == (1UL << (int)adapter->number_of_antenna) + 18446744073709551615UL && (unsigned int)(priv->adapter)->number_of_antenna > 1U) {
      
#line 1723 
      tx_ant = 65535U;
      
#line 1724 
      rx_ant = 65535U;
    }
    else ;
  }
  else {
    struct ieee80211_sta_ht_cap *ht_info;
    int rx_mcs_supp;
    enum ieee80211_band band;
    
#line 1731 
    if (tx_ant == 1U && rx_ant == 1U) {
      
#line 1732 
      adapter->user_dev_mcs_support = (unsigned char)17U;
      
#line 1733 
      if (adapter->is_hw_11ac_capable != 0U) 
#line 1734 
                                             adapter->usr_dot_11ac_mcs_support = 4294901758U; else ;
    }
    else {
      
#line 1737 
      adapter->user_dev_mcs_support = (unsigned char)34U;
      
#line 1738 
      if (adapter->is_hw_11ac_capable != 0U) 
#line 1739 
                                             adapter->usr_dot_11ac_mcs_support = 4294639610U; else ;
    }
    
#line 1743 
    band = IEEE80211_BAND_2GHZ;
    
#line 1743 
    goto ldv_61763;
    ldv_61762: 
#line 1744 
    ;
    
#line 1744 
    if ((adapter->wiphy)->bands[(unsigned int)band] == (struct ieee80211_supported_band *)0) 
      
#line 1745 
      goto ldv_61761; else ;
    
#line 1747 
    ht_info = & ((adapter->wiphy)->bands[(unsigned int)band])->ht_cap;
    
#line 1748 
    rx_mcs_supp = (int)adapter->user_dev_mcs_support & 15;
    
#line 1750 
    memset((void *)(& ht_info->mcs),0,(unsigned long)adapter->number_of_antenna);
    
#line 1751 
    memset((void *)(& ht_info->mcs),255,(unsigned long)rx_mcs_supp);
    ldv_61761: 
#line 1752 
    ;
    
#line 1743 
    band += 1U;
    ldv_61763: 
#line 1744 
    ;
    
#line 1743 
    if (band <= (unsigned int)IEEE80211_BAND_60GHZ) 
#line 1745 
                                                    goto ldv_61762; else 
                                                                    
#line 1748 
                                                                    goto ldv_61764;
    ldv_61764: 
#line 1749 
    ;
  }
  
#line 1755 
  ant_cfg.tx_ant = tx_ant;
  
#line 1756 
  ant_cfg.rx_ant = rx_ant;
  
#line 1758 
  tmp_1 = mwifiex_send_cmd(priv,(unsigned short)32,(unsigned short)1,0U,(void *)(& ant_cfg),(_Bool)1);
  
#line 1758 
  __retres = tmp_1;
  return_label: 
#line 1758 
                return __retres;
}


#line 1765  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfg80211.c"
static int mwifiex_cfg80211_stop_ap(struct wiphy *wiphy, struct net_device *dev)
{
  int __retres;
  int tmp_0;
  int tmp_1;
  int tmp_2;
  
#line 1767 
  struct mwifiex_private *priv = mwifiex_netdev_get_priv(dev);
  
#line 1769 
  mwifiex_abort_cac(priv);
  
#line 1771 
  tmp_0 = mwifiex_del_mgmt_ies(priv);
  
#line 1771 
  if (tmp_0 != 0) {
    
#line 1772 
    if (((priv->adapter)->debug_mask & 4U) != 0U) {
      
#line 1772 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 1772 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"Failed to delete mgmt IEs!\n"); else ;
    }
    else ;
  }
  else ;
  
#line 1775 
  priv->ap_11n_enabled = (unsigned char)0U;
  
#line 1776 
  memset((void *)(& priv->bss_cfg),0,292UL);
  
#line 1778 
  tmp_1 = mwifiex_send_cmd(priv,(unsigned short)178,(unsigned short)1,0U,(void *)0,(_Bool)1);
  
#line 1778 
  if (tmp_1 != 0) {
    
#line 1780 
    if (((priv->adapter)->debug_mask & 4U) != 0U) {
      
#line 1780 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 1780 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"Failed to stop the BSS\n"); else ;
    }
    else ;
    
#line 1782 
    __retres = -1;
    
#line 1782 
    goto return_label;
  }
  else ;
  
#line 1785 
  tmp_2 = mwifiex_send_cmd(priv,(unsigned short)175,(unsigned short)1,0U,(void *)0,(_Bool)1);
  
#line 1785 
  if (tmp_2 != 0) {
    
#line 1787 
    if (((priv->adapter)->debug_mask & 4U) != 0U) {
      
#line 1787 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 1787 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"Failed to reset BSS\n"); else ;
    }
    else ;
    
#line 1789 
    __retres = -1;
    
#line 1789 
    goto return_label;
  }
  else ;
  
#line 1792 
  __retres = 0;
  return_label: 
#line 1792 
                return __retres;
}


#line 1800  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfg80211.c"
static int mwifiex_cfg80211_start_ap(struct wiphy *wiphy, struct net_device *dev, struct cfg80211_ap_settings *params)
{
  int __retres;
  struct mwifiex_uap_bss_param *bss_cfg;
  int tmp_1;
  int tmp_2;
  int tmp_4;
  int tmp_6;
  int tmp_7;
  
#line 1805 
  struct mwifiex_private *priv = mwifiex_netdev_get_priv(dev);
  
#line 1807 
  if (((unsigned long)priv->bss_role & 1UL) == 0UL) {
    
#line 1808 
    __retres = -1;
    
#line 1808 
    goto return_label;
  }
  else ;
  
#line 1810 
  bss_cfg = (struct mwifiex_uap_bss_param *)kzalloc_7(292UL,208U);
  
#line 1811 
  if (bss_cfg == (struct mwifiex_uap_bss_param *)0) {
    
#line 1812 
    __retres = -12;
    
#line 1812 
    goto return_label;
  }
  else ;
  
#line 1814 
  mwifiex_set_sys_config_invalid_data(bss_cfg);
  
#line 1816 
  if (params->beacon_interval != 0) 
#line 1817 
                                    bss_cfg->beacon_period = (unsigned short)params->beacon_interval; else ;
  
#line 1818 
  if (params->dtim_period != 0) 
#line 1819 
                                bss_cfg->dtim_period = (unsigned char)params->dtim_period; else ;
  
#line 1821 
  if (params->ssid != (u8 const *)0U && params->ssid_len != 0UL) {
    
#line 1822 
    memcpy((void *)(& bss_cfg->ssid.ssid),(void const *)params->ssid,params->ssid_len);
    
#line 1823 
    bss_cfg->ssid.ssid_len = (unsigned int)params->ssid_len;
  }
  else ;
  
#line 1825 
  if (params->inactivity_timeout > 0) {
    
#line 1827 
    bss_cfg->sta_ao_timer = (unsigned int)(params->inactivity_timeout * 10);
    
#line 1828 
    bss_cfg->ps_sta_ao_timer = (unsigned int)(params->inactivity_timeout * 10);
  }
  else ;
  
#line 1831 
  switch ((unsigned int)params->hidden_ssid) {
    case (unsigned int)0: 
#line 1832 
    ;
    
#line 1833 
    bss_cfg->bcast_ssid_ctl = (unsigned char)1U;
    
#line 1834 
    goto ldv_61778;
    case (unsigned int)1: 
#line 1835 
    ;
    
#line 1836 
    bss_cfg->bcast_ssid_ctl = (unsigned char)0U;
    
#line 1837 
    goto ldv_61778;
    case (unsigned int)2: 
#line 1838 
    ;
    default: 
#line 1840 
    ;
    
#line 1841 
    kfree((void const *)bss_cfg);
    
#line 1842 
    __retres = -22;
    
#line 1842 
    goto return_label;
  }
  ldv_61778: 
#line 1845 
  ;
  
#line 1845 
  mwifiex_uap_set_channel(priv,bss_cfg,params->chandef);
  
#line 1846 
  mwifiex_set_uap_rates(bss_cfg,params);
  
#line 1848 
  tmp_1 = mwifiex_set_secure_params(priv,bss_cfg,params);
  
#line 1848 
  if (tmp_1 != 0) {
    
#line 1849 
    kfree((void const *)bss_cfg);
    
#line 1850 
    if (((priv->adapter)->debug_mask & 4U) != 0U) {
      
#line 1850 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 1850 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"Failed to parse secuirty parameters!\n"); else ;
    }
    else ;
    
#line 1852 
    __retres = -1;
    
#line 1852 
    goto return_label;
  }
  else ;
  
#line 1855 
  mwifiex_set_ht_params(priv,bss_cfg,params);
  
#line 1857 
  if ((priv->adapter)->is_hw_11ac_capable != 0U) {
    
#line 1858 
    mwifiex_set_vht_params(priv,bss_cfg,params);
    
#line 1859 
    mwifiex_set_vht_width(priv,params->chandef.width,(_Bool)((unsigned int)priv->ap_11ac_enabled != 0U));
  }
  else ;
  
#line 1863 
  if ((unsigned int)priv->ap_11ac_enabled != 0U) 
#line 1864 
                                                 mwifiex_set_11ac_ba_params(priv); else 
                                                                    
#line 1866 
                                                                    mwifiex_set_ba_params(priv);
  
#line 1868 
  mwifiex_set_wmm_params(priv,bss_cfg,params);
  
#line 1870 
  tmp_2 = mwifiex_is_11h_active(priv);
  
#line 1870 
  if (tmp_2 != 0) 
#line 1871 
                  mwifiex_set_tpc_params(priv,bss_cfg,params); else ;
  
#line 1873 
  tmp_4 = mwifiex_is_11h_active(priv);
  
#line 1873 
  if (tmp_4 != 0) {
    int tmp_5;
    
#line 1873 
    tmp_5 = cfg80211_chandef_dfs_required(wiphy,(struct cfg80211_chan_def const *)(& params->chandef),(enum nl80211_iftype)priv->bss_mode);
    
#line 1873 
    if (tmp_5 == 0) {
      int tmp_3;
      
#line 1876 
      if (((priv->adapter)->debug_mask & 1073741824U) != 0U) {
        
#line 1876 
        if ((priv->adapter)->dev != (struct device *)0) 
#line 1876 
                                                        _dev_info((struct device const *)(priv->adapter)->dev,"Disable 11h extensions in FW\n"); else ;
      }
      else ;
      
#line 1878 
      tmp_3 = mwifiex_11h_activate(priv,(_Bool)0);
      
#line 1878 
      if (tmp_3 != 0) {
        
#line 1879 
        if (((priv->adapter)->debug_mask & 4U) != 0U) {
          
#line 1879 
          if ((priv->adapter)->dev != (struct device *)0) 
#line 1879 
                                                          _dev_info((struct device const *)(priv->adapter)->dev,"Failed to disable 11h extensions!!"); else ;
        }
        else ;
        
#line 1881 
        __retres = -1;
        
#line 1881 
        goto return_label;
      }
      else ;
      
#line 1883 
      priv->state_11h.is_11h_active = (_Bool)0;
    }
    else ;
  }
  else ;
  
#line 1886 
  tmp_6 = mwifiex_config_start_uap(priv,bss_cfg);
  
#line 1886 
  if (tmp_6 != 0) {
    
#line 1887 
    if (((priv->adapter)->debug_mask & 4U) != 0U) {
      
#line 1887 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 1887 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"Failed to start AP\n"); else ;
    }
    else ;
    
#line 1889 
    kfree((void const *)bss_cfg);
    
#line 1890 
    __retres = -1;
    
#line 1890 
    goto return_label;
  }
  else ;
  
#line 1893 
  tmp_7 = mwifiex_set_mgmt_ies(priv,& params->beacon);
  
#line 1893 
  if (tmp_7 != 0) {
    
#line 1894 
    __retres = -1;
    
#line 1894 
    goto return_label;
  }
  else ;
  
#line 1896 
  memcpy((void *)(& priv->bss_cfg),(void const *)bss_cfg,292UL);
  
#line 1897 
  kfree((void const *)bss_cfg);
  
#line 1898 
  __retres = 0;
  return_label: 
#line 1898 
                return __retres;
}


#line 1908  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfg80211.c"
static int mwifiex_cfg80211_disconnect(struct wiphy *wiphy, struct net_device *dev, u16 reason_code)
{
  int __retres;
  int tmp_0;
  
#line 1911 
  struct mwifiex_private *priv = mwifiex_netdev_get_priv(dev);
  
#line 1913 
  tmp_0 = mwifiex_deauthenticate(priv,(u8 *)0U);
  
#line 1913 
  if (tmp_0 != 0) {
    
#line 1914 
    __retres = -14;
    
#line 1914 
    goto return_label;
  }
  else ;
  
#line 1916 
  if (((priv->adapter)->debug_mask & 1U) != 0U) {
    
#line 1916 
    if ((priv->adapter)->dev != (struct device *)0) 
#line 1916 
                                                    _dev_info((struct device const *)(priv->adapter)->dev,"info: successfully disconnected from %pM:\t",(u8 *)(& priv->cfg_bssid),(int)reason_code); else ;
  }
  else ;
  
#line 1920 
  eth_zero_addr((u8 *)(& priv->cfg_bssid));
  
#line 1921 
  priv->hs2_enabled = (_Bool)0;
  
#line 1923 
  __retres = 0;
  return_label: 
#line 1923 
                return __retres;
}


#line 1937  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfg80211.c"
static int mwifiex_cfg80211_inform_ibss_bss(struct mwifiex_private *priv)
{
  int __retres;
  struct ieee80211_channel *chan;
  struct mwifiex_bss_info bss_info;
  struct cfg80211_bss *bss;
  int ie_len;
  u8 ie_buf[34U];
  enum ieee80211_band band;
  int tmp;
  u8 tmp_0;
  int tmp_1;
  
#line 1946 
  tmp = mwifiex_get_bss_info(priv,& bss_info);
  
#line 1946 
  if (tmp != 0) {
    
#line 1947 
    __retres = -1;
    
#line 1947 
    goto return_label;
  }
  else ;
  
#line 1949 
  ie_buf[0] = (unsigned char)0U;
  
#line 1950 
  ie_buf[1] = bss_info.ssid.ssid_len;
  
#line 1952 
  memcpy((void *)(& ie_buf[2UL]),(void const *)(& bss_info.ssid.ssid),(unsigned long)bss_info.ssid.ssid_len);
  
#line 1954 
  ie_len = (int)((unsigned int)ie_buf[1] + 2U);
  
#line 1956 
  tmp_0 = mwifiex_band_to_radio_type((unsigned char)((int)priv->curr_bss_params.band));
  
#line 1956 
  band = (enum ieee80211_band)tmp_0;
  
#line 1957 
  tmp_1 = ieee80211_channel_to_frequency((int)bss_info.bss_chan,band);
  
#line 1957 
  ;
  
#line 1957 
  chan = __ieee80211_get_channel(priv->wdev.wiphy,tmp_1);
  
#line 1961 
  bss = cfg80211_inform_bss(priv->wdev.wiphy,chan,(enum cfg80211_bss_frame_type)CFG80211_BSS_FTYPE_UNKNOWN,(u8 const *)(& bss_info.bssid),0ULL,(unsigned short)2,(unsigned short)0,(u8 const *)(& ie_buf),(unsigned long)ie_len,0,208U);
  
#line 1965 
  cfg80211_put_bss(priv->wdev.wiphy,bss);
  
#line 1966 
  memcpy((void *)(& priv->cfg_bssid),(void const *)(& bss_info.bssid),6UL);
  
#line 1968 
  __retres = 0;
  return_label: 
#line 1968 
                return __retres;
}


#line 1986  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfg80211.c"
static int mwifiex_cfg80211_assoc(struct mwifiex_private *priv, size_t ssid_len, u8 const *ssid, u8 const *bssid, int mode, struct ieee80211_channel *channel, struct cfg80211_connect_params *sme, bool privacy)
{
  int __retres;
  struct cfg80211_ssid req_ssid;
  int ret;
  
#line 1992 
  int auth_type = 0;
  
#line 1993 
  struct cfg80211_bss *bss = (struct cfg80211_bss *)0;
  
#line 1994 
  u8 is_scanning_required = (unsigned char)0U;
  
#line 1996 
  memset((void *)(& req_ssid),0,33UL);
  
#line 1998 
  req_ssid.ssid_len = (unsigned char)ssid_len;
  
#line 1999 
  if (ssid_len > 32UL) {
    
#line 2000 
    if (((priv->adapter)->debug_mask & 4U) != 0U) {
      
#line 2000 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 2000 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"invalid SSID - aborting\n"); else ;
    }
    else ;
    
#line 2001 
    __retres = -22;
    
#line 2001 
    goto return_label;
  }
  else ;
  
#line 2004 
  memcpy((void *)(& req_ssid.ssid),(void const *)ssid,ssid_len);
  
#line 2005 
  if ((unsigned int)req_ssid.ssid_len == 0U || (unsigned int)req_ssid.ssid[0] <= 31U) {
    
#line 2006 
    if (((priv->adapter)->debug_mask & 4U) != 0U) {
      
#line 2006 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 2006 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"invalid SSID - aborting\n"); else ;
    }
    else ;
    
#line 2007 
    __retres = -22;
    
#line 2007 
    goto return_label;
  }
  else ;
  
#line 2012 
  priv->sec_info.wpa_enabled = (unsigned char)0U;
  
#line 2013 
  priv->sec_info.wpa2_enabled = (unsigned char)0U;
  
#line 2014 
  priv->wep_key_curr_index = (unsigned short)0U;
  
#line 2015 
  priv->sec_info.encryption_mode = 0U;
  
#line 2016 
  priv->sec_info.is_authtype_auto = (unsigned char)0U;
  
#line 2017 
  ret = mwifiex_set_encode(priv,(struct key_params *)0,(u8 const *)0U,0,(unsigned char)0,(u8 const *)0U,1);
  
#line 2019 
  if (mode == 1) {
    
#line 2021 
    if ((int)privacy != 0) {
      
#line 2028 
      priv->sec_info.encryption_mode = 1027077U;
      
#line 2030 
      priv->sec_info.authentication_mode = 0U;
    }
    else ;
    
#line 2034 
    goto done;
  }
  else ;
  
#line 2038 
  if (sme->auth_type == (unsigned int)__NL80211_AUTHTYPE_NUM) {
    
#line 2039 
    auth_type = 0;
    
#line 2040 
    priv->sec_info.is_authtype_auto = (unsigned char)1U;
  }
  else 
#line 2042 
       auth_type = (int)sme->auth_type;
  
#line 2045 
  if (sme->crypto.n_ciphers_pairwise != 0) {
    
#line 2046 
    priv->sec_info.encryption_mode = sme->crypto.ciphers_pairwise[0];
    
#line 2048 
    priv->sec_info.authentication_mode = (unsigned int)auth_type;
  }
  else ;
  
#line 2051 
  if (sme->crypto.cipher_group != 0U) {
    
#line 2052 
    priv->sec_info.encryption_mode = sme->crypto.cipher_group;
    
#line 2053 
    priv->sec_info.authentication_mode = (unsigned int)auth_type;
  }
  else ;
  
#line 2055 
  if (sme->ie != (u8 const *)0U) 
#line 2056 
                                 ret = mwifiex_set_gen_ie(priv,sme->ie,(int)sme->ie_len); else ;
  
#line 2058 
  if (sme->key != (u8 const *)0U) {
    int tmp;
    
#line 2059 
    tmp = mwifiex_is_alg_wep(priv->sec_info.encryption_mode);
    
#line 2059 
    if (tmp != 0) {
      
#line 2060 
      if (((priv->adapter)->debug_mask & 1073741824U) != 0U) {
        
#line 2060 
        if ((priv->adapter)->dev != (struct device *)0) 
#line 2060 
                                                        _dev_info((struct device const *)(priv->adapter)->dev,"info: setting wep encryption\t",(int)sme->key_len); else ;
      }
      else ;
      
#line 2063 
      priv->wep_key_curr_index = (unsigned short)sme->key_idx;
      
#line 2064 
      ret = mwifiex_set_encode(priv,(struct key_params *)0,sme->key,(int)sme->key_len,(unsigned char)((int)sme->key_idx),(u8 const *)0U,0);
    }
    else ;
  }
  else ;
  done: 
#line 2069 
  ;
  ldv_61814: 
#line 2070 
  ;
  
#line 2076 
  if ((unsigned int)is_scanning_required != 0U) {
    int tmp_0;
    
#line 2078 
    tmp_0 = mwifiex_request_scan(priv,& req_ssid);
    
#line 2078 
    if (tmp_0 != 0) {
      
#line 2079 
      if (((priv->adapter)->debug_mask & 4U) != 0U) {
        
#line 2079 
        if ((priv->adapter)->dev != (struct device *)0) 
#line 2079 
                                                        _dev_info((struct device const *)(priv->adapter)->dev,"scan error\n"); else ;
      }
      else ;
      
#line 2080 
      __retres = -14;
      
#line 2080 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 2085 
  if (mode == 1) 
#line 2086 
                 bss = cfg80211_get_bss(priv->wdev.wiphy,channel,bssid,ssid,ssid_len,(enum ieee80211_bss_type)IEEE80211_BSS_TYPE_IBSS,(enum ieee80211_privacy)IEEE80211_PRIVACY_ANY); else 
                                                                    
#line 2091 
                                                                    bss = cfg80211_get_bss(priv->wdev.wiphy,channel,bssid,ssid,ssid_len,(enum ieee80211_bss_type)IEEE80211_BSS_TYPE_ESS,(enum ieee80211_privacy)IEEE80211_PRIVACY_ANY);
  
#line 2096 
  if (bss == (struct cfg80211_bss *)0) {
    
#line 2097 
    if ((unsigned int)is_scanning_required != 0U) {
      
#line 2098 
      if (((priv->adapter)->debug_mask & 536870912U) != 0U) {
        
#line 2098 
        if ((priv->adapter)->dev != (struct device *)0) 
#line 2098 
                                                        _dev_info((struct device const *)(priv->adapter)->dev,"assoc: requested bss not found in scan results\n"); else ;
      }
      else ;
      
#line 2100 
      goto ldv_61813;
    }
    else ;
    
#line 2102 
    is_scanning_required = (unsigned char)1U;
  }
  else {
    
#line 2104 
    if (((priv->adapter)->debug_mask & 1U) != 0U) {
      
#line 2104 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 2104 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"info: trying to associate to \'%s\' bssid %pM\n",(char *)(& req_ssid.ssid),(u8 *)(& bss->bssid)); else ;
    }
    else ;
    
#line 2107 
    memcpy((void *)(& priv->cfg_bssid),(void const *)(& bss->bssid),6UL);
    
#line 2108 
    goto ldv_61813;
  }
  
#line 2076 
  goto ldv_61814;
  ldv_61813: 
#line 2077 
  ;
  
#line 2112 
  ret = mwifiex_bss_start(priv,bss,& req_ssid);
  
#line 2113 
  if (ret != 0) {
    
#line 2114 
    __retres = ret;
    
#line 2114 
    goto return_label;
  }
  else ;
  
#line 2116 
  if (mode == 1) {
    int tmp_1;
    
#line 2119 
    tmp_1 = mwifiex_cfg80211_inform_ibss_bss(priv);
    
#line 2119 
    if (tmp_1 != 0) {
      
#line 2120 
      __retres = -14;
      
#line 2120 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 2123 
  __retres = ret;
  return_label: 
#line 2123 
                return __retres;
}


#line 2134  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfg80211.c"
static int mwifiex_cfg80211_connect(struct wiphy *wiphy, struct net_device *dev, struct cfg80211_connect_params *sme)
{
  int __retres;
  int ret;
  
#line 2137 
  struct mwifiex_private *priv = mwifiex_netdev_get_priv(dev);
  
#line 2138 
  struct mwifiex_adapter *adapter = priv->adapter;
  
#line 2141 
  if (((unsigned long)priv->bss_role & 1UL) != 0UL) {
    
#line 2142 
    if ((adapter->debug_mask & 4U) != 0U) {
      
#line 2142 
      if (adapter->dev != (struct device *)0) 
#line 2142 
                                              _dev_info((struct device const *)adapter->dev,"%s: reject infra assoc request in non-STA role\n",(char *)(& dev->name)); else ;
    }
    else ;
    
#line 2145 
    __retres = -22;
    
#line 2145 
    goto return_label;
  }
  else ;
  
#line 2148 
  if (priv->wdev.current_bss != (struct cfg80211_internal_bss *)0) {
    
#line 2149 
    if ((adapter->debug_mask & 4U) != 0U) {
      
#line 2149 
      if (adapter->dev != (struct device *)0) 
#line 2149 
                                              _dev_info((struct device const *)adapter->dev,"%s: already connected\n",(char *)(& dev->name)); else ;
    }
    else ;
    
#line 2151 
    __retres = -114;
    
#line 2151 
    goto return_label;
  }
  else ;
  
#line 2154 
  if ((int)adapter->surprise_removed != 0 || (unsigned int)adapter->is_cmd_timedout != 0U) {
    
#line 2155 
    if ((adapter->debug_mask & 4U) != 0U) {
      
#line 2155 
      if (adapter->dev != (struct device *)0) 
#line 2155 
                                              _dev_info((struct device const *)adapter->dev,"%s: Ignore connection.\t",(char *)(& dev->name)); else ;
    }
    else ;
    
#line 2159 
    __retres = -14;
    
#line 2159 
    goto return_label;
  }
  else ;
  
#line 2162 
  if ((adapter->debug_mask & 1073741824U) != 0U) {
    
#line 2162 
    if (adapter->dev != (struct device *)0) 
#line 2162 
                                            _dev_info((struct device const *)adapter->dev,"info: Trying to associate to %s and bssid %pM\n",(char *)sme->ssid,sme->bssid); else ;
  }
  else ;
  
#line 2166 
  ret = mwifiex_cfg80211_assoc(priv,sme->ssid_len,sme->ssid,sme->bssid,(int)priv->bss_mode,sme->channel,sme,(_Bool)0);
  
#line 2168 
  if (ret == 0) {
    
#line 2169 
    cfg80211_connect_result(priv->netdev,(u8 const *)(& priv->cfg_bssid),(u8 const *)0U,0UL,(u8 const *)0U,0UL,(unsigned short)0,208U);
    
#line 2172 
    if (((priv->adapter)->debug_mask & 1U) != 0U) {
      
#line 2172 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 2172 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"info: associated to bssid %pM successfully\n",(u8 *)(& priv->cfg_bssid)); else ;
    }
    else ;
    
#line 2175 
    if ((((unsigned long)(priv->adapter)->fw_cap_info & 16384UL) != 0UL && (int)(priv->adapter)->auto_tdls != 0) && (unsigned int)priv->bss_type == 0U) 
      
#line 2178 
      mwifiex_setup_auto_tdls_timer(priv); else ;
  }
  else {
    
#line 2180 
    if (((priv->adapter)->debug_mask & 4U) != 0U) {
      
#line 2180 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 2180 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"info: association to bssid %pM failed\n",(u8 *)(& priv->cfg_bssid)); else ;
    }
    else ;
    
#line 2183 
    eth_zero_addr((u8 *)(& priv->cfg_bssid));
    
#line 2185 
    if (ret > 0) 
#line 2186 
                 cfg80211_connect_result(priv->netdev,(u8 const *)(& priv->cfg_bssid),(u8 const *)0U,0UL,(u8 const *)0U,0UL,(unsigned short)((int)((unsigned short)ret)),208U); else 
                                                                    
#line 2190 
                                                                    cfg80211_connect_result(priv->netdev,(u8 const *)(& priv->cfg_bssid),(u8 const *)0U,0UL,(u8 const *)0U,0UL,(unsigned short)1,208U);
  }
  
#line 2196 
  __retres = 0;
  return_label: 
#line 2196 
                return __retres;
}


#line 2206  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfg80211.c"
static int mwifiex_set_ibss_params(struct mwifiex_private *priv, struct cfg80211_ibss_params *params)
{
  int __retres;
  int i;
  enum nl80211_channel_type tmp_1;
  int tmp_2;
  
#line 2209 
  struct mwifiex_adapter *adapter = priv->adapter;
  
#line 2210 
  int index = 0;
  
#line 2211 
  u8 config_bands = (unsigned char)0U;
  
#line 2213 
  if ((params->chandef.chan)->band == (unsigned int)IEEE80211_BAND_2GHZ) {
    enum nl80211_channel_type tmp;
    
#line 2214 
    if (params->basic_rates == 0U) 
#line 2215 
                                   config_bands = (unsigned char)3U;
    else {
      
#line 2217 
      i = 0;
      
#line 2217 
      goto ldv_61833;
      ldv_61832: 
#line 2218 
      ;
      
#line 2223 
      if ((unsigned int)mwifiex_rates[i].bitrate == 60U) {
        
#line 2224 
        index = 1 << i;
        
#line 2225 
        goto ldv_61831;
      }
      else ;
      
#line 2217 
      i += 1;
      ldv_61833: 
#line 2218 
      ;
      
#line 2217 
      if (mwifiex_band_2ghz.n_bitrates > i) 
#line 2219 
                                            goto ldv_61832; else 
#line 2222 
                                                                 goto ldv_61831;
      ldv_61831: 
#line 2223 
      ;
      
#line 2229 
      if (params->basic_rates < (unsigned int)index) 
#line 2230 
                                                     config_bands = (unsigned char)1U;
      else {
        
#line 2232 
        config_bands = (unsigned char)2U;
        
#line 2233 
        if (params->basic_rates % (unsigned int)index != 0U) 
#line 2234 
                                                             config_bands = (unsigned char)((unsigned int)config_bands | 1U); else ;
      }
    }
    
#line 2238 
    tmp = cfg80211_get_chandef_type((struct cfg80211_chan_def const *)(& params->chandef));
    
#line 2238 
    if (tmp != (unsigned int)NL80211_CHAN_NO_HT) 
#line 2240 
                                                 config_bands = (unsigned char)((unsigned int)config_bands | 10U); else ;
  }
  else {
    enum nl80211_channel_type tmp_0;
    
#line 2242 
    tmp_0 = cfg80211_get_chandef_type((struct cfg80211_chan_def const *)(& params->chandef));
    
#line 2242 
    if (tmp_0 == (unsigned int)NL80211_CHAN_NO_HT) 
#line 2244 
                                                   config_bands = (unsigned char)4U; else 
                                                                    
#line 2246 
                                                                    config_bands = (unsigned char)20U;
  }
  
#line 2249 
  if ((((int)adapter->fw_bands | (int)config_bands) & ~ ((int)adapter->fw_bands)) == 0) {
    
#line 2250 
    adapter->config_bands = config_bands;
    
#line 2251 
    adapter->adhoc_start_band = config_bands;
    
#line 2253 
    if (((int)config_bands & 8) != 0 || ((int)config_bands & 16) != 0) 
      
#line 2254 
      adapter->adhoc_11n_enabled = (unsigned char)1U; else 
#line 2256 
                                                           adapter->adhoc_11n_enabled = (unsigned char)0U;
  }
  else ;
  
#line 2260 
  tmp_1 = cfg80211_get_chandef_type((struct cfg80211_chan_def const *)(& params->chandef));
  
#line 2259 
  adapter->sec_chan_offset = mwifiex_chan_type_to_sec_chan_offset(tmp_1);
  
#line 2262 
  tmp_2 = ieee80211_frequency_to_channel((int)(params->chandef.chan)->center_freq);
  
#line 2262 
  priv->adhoc_channel = (unsigned char)tmp_2;
  
#line 2265 
  if ((adapter->debug_mask & 1073741824U) != 0U) {
    
#line 2265 
    if (adapter->dev != (struct device *)0) 
#line 2265 
                                            _dev_info((struct device const *)adapter->dev,"info: set ibss band %d, chan %d, chan offset %d\n",(int)config_bands,(int)priv->adhoc_channel,(int)adapter->sec_chan_offset); else ;
  }
  else ;
  
#line 2270 
  __retres = 0;
  
#line 2270 
  return __retres;
}


#line 2280  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfg80211.c"
static int mwifiex_cfg80211_join_ibss(struct wiphy *wiphy, struct net_device *dev, struct cfg80211_ibss_params *params)
{
  
#line 2283 
  struct mwifiex_private *priv = mwifiex_netdev_get_priv(dev);
  
#line 2284 
  int ret = 0;
  
#line 2286 
  if (priv->bss_mode != 1U) {
    
#line 2287 
    if (((priv->adapter)->debug_mask & 4U) != 0U) {
      
#line 2287 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 2287 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"request to join ibss received\t"); else ;
    }
    else ;
    
#line 2290 
    goto done;
  }
  else ;
  
#line 2293 
  if (((priv->adapter)->debug_mask & 1U) != 0U) {
    
#line 2293 
    if ((priv->adapter)->dev != (struct device *)0) 
#line 2293 
                                                    _dev_info((struct device const *)(priv->adapter)->dev,"info: trying to join to %s and bssid %pM\n",(char *)params->ssid,params->bssid); else ;
  }
  else ;
  
#line 2297 
  mwifiex_set_ibss_params(priv,params);
  
#line 2299 
  ret = mwifiex_cfg80211_assoc(priv,(unsigned long)params->ssid_len,params->ssid,params->bssid,(int)priv->bss_mode,params->chandef.chan,(struct cfg80211_connect_params *)0,(_Bool)((bool)((int)params->privacy) != 0));
  done: 
#line 2303 
  ;
  
#line 2304 
  if (ret == 0) {
    
#line 2305 
    cfg80211_ibss_joined(priv->netdev,(u8 const *)(& priv->cfg_bssid),params->chandef.chan,208U);
    
#line 2307 
    if (((priv->adapter)->debug_mask & 1U) != 0U) {
      
#line 2307 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 2307 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"info: joined/created adhoc network with bssid\t",(u8 *)(& priv->cfg_bssid)); else ;
    }
    else ;
  }
  else 
    
#line 2311 
    if (((priv->adapter)->debug_mask & 4U) != 0U) {
      
#line 2311 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 2311 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"info: failed creating/joining adhoc network\n"); else ;
    }
    else ;
  
#line 2315 
  return ret;
}


#line 2325  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfg80211.c"
static int mwifiex_cfg80211_leave_ibss(struct wiphy *wiphy, struct net_device *dev)
{
  int __retres;
  int tmp_0;
  
#line 2327 
  struct mwifiex_private *priv = mwifiex_netdev_get_priv(dev);
  
#line 2329 
  if (((priv->adapter)->debug_mask & 1U) != 0U) {
    
#line 2329 
    if ((priv->adapter)->dev != (struct device *)0) 
#line 2329 
                                                    _dev_info((struct device const *)(priv->adapter)->dev,"info: disconnecting from essid %pM\n",(u8 *)(& priv->cfg_bssid)); else ;
  }
  else ;
  
#line 2331 
  tmp_0 = mwifiex_deauthenticate(priv,(u8 *)0U);
  
#line 2331 
  if (tmp_0 != 0) {
    
#line 2332 
    __retres = -14;
    
#line 2332 
    goto return_label;
  }
  else ;
  
#line 2334 
  eth_zero_addr((u8 *)(& priv->cfg_bssid));
  
#line 2336 
  __retres = 0;
  return_label: 
#line 2336 
                return __retres;
}


#line 2347  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfg80211.c"
static int mwifiex_cfg80211_scan(struct wiphy *wiphy, struct cfg80211_scan_request *request)
{
  int __retres;
  int i;
  int offset;
  int ret;
  struct ieee80211_channel *chan;
  struct ieee_types_header *ie;
  struct mwifiex_user_scan_cfg *user_scan_cfg;
  u32 tmp_2;
  
#line 2350 
  struct net_device *dev = (request->wdev)->netdev;
  
#line 2351 
  struct mwifiex_private *priv = mwifiex_netdev_get_priv(dev);
  
#line 2357 
  if (((priv->adapter)->debug_mask & 16U) != 0U) {
    
#line 2357 
    if ((priv->adapter)->dev != (struct device *)0) 
#line 2357 
                                                    _dev_info((struct device const *)(priv->adapter)->dev,"info: received scan request on %s\n",(char *)(& dev->name)); else ;
  }
  else ;
  
#line 2363 
  if (priv->scan_request != (struct cfg80211_scan_request *)0 || (int)priv->scan_aborting != 0) {
    
#line 2364 
    if (((priv->adapter)->debug_mask & 536870912U) != 0U) {
      
#line 2364 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 2364 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"cmd: Scan already in process..\n"); else ;
    }
    else ;
    
#line 2366 
    __retres = -16;
    
#line 2366 
    goto return_label;
  }
  else ;
  
#line 2369 
  user_scan_cfg = (struct mwifiex_user_scan_cfg *)kzalloc_7(420UL,208U);
  
#line 2370 
  if (user_scan_cfg == (struct mwifiex_user_scan_cfg *)0) {
    
#line 2371 
    __retres = -12;
    
#line 2371 
    goto return_label;
  }
  else ;
  
#line 2373 
  priv->scan_request = request;
  
#line 2375 
  user_scan_cfg->num_ssids = (unsigned char)request->n_ssids;
  
#line 2376 
  user_scan_cfg->ssid_list = request->ssids;
  
#line 2378 
  if (request->ie != (u8 const *)0U && request->ie_len != 0UL) {
    
#line 2379 
    offset = 0;
    
#line 2380 
    i = 0;
    
#line 2380 
    goto ldv_61862;
    ldv_61861: 
#line 2381 
    ;
    
#line 2381 
    if ((unsigned int)priv->vs_ie[i].mask != 0U) 
#line 2382 
                                                 goto ldv_61859; else ;
    
#line 2383 
    priv->vs_ie[i].mask = (unsigned short)1U;
    
#line 2384 
    ie = (struct ieee_types_header *)(request->ie + offset);
    
#line 2385 
    memcpy((void *)(& priv->vs_ie[i].ie),(void const *)ie,(unsigned long)ie->len + 2UL);
    
#line 2386 
    offset = (int)((unsigned int)((int)ie->len + offset) + 2U);
    
#line 2388 
    if ((unsigned long)offset >= request->ie_len) 
#line 2389 
                                                  goto ldv_61860; else ;
    ldv_61859: 
#line 2390 
    ;
    
#line 2380 
    i += 1;
    ldv_61862: 
#line 2381 
    ;
    
#line 2380 
    if (i <= 7) 
#line 2382 
                goto ldv_61861; else 
#line 2385 
                                     goto ldv_61860;
    ldv_61860: 
#line 2386 
    ;
  }
  else ;
  
#line 2393 
  i = 0;
  
#line 2393 
  goto ldv_61867;
  ldv_61866: 
#line 2394 
  ;
  
#line 2395 
  chan = request->channels[i];
  
#line 2396 
  user_scan_cfg->chan_list[i].chan_number = (unsigned char)chan->hw_value;
  
#line 2397 
  user_scan_cfg->chan_list[i].radio_type = (unsigned char)chan->band;
  
#line 2399 
  if ((chan->flags & 2U) != 0U || request->n_ssids == 0) 
#line 2400 
                                                         user_scan_cfg->chan_list[i].scan_type = (unsigned char)2U; else 
                                                                    
#line 2403 
                                                                    user_scan_cfg->chan_list[i].scan_type = (unsigned char)1U;
  
#line 2406 
  user_scan_cfg->chan_list[i].scan_time = 0U;
  
#line 2394 
  i += 1;
  ldv_61867: 
#line 2395 
  ;
  {
    u32 tmp_1;
    
#line 2393 
    u32 __min1 = request->n_channels;
    
#line 2393 
    u32 __min2 = 50U;
    
#line 2393 
    if (__min1 < __min2) 
#line 2393 
                         tmp_1 = __min1; else 
#line 2393 
                                              tmp_1 = __min2;
    
#line 2393 
    tmp_2 = tmp_1;
  }
  
#line 2393 
  ;
  
#line 2393 
  if (tmp_2 > (unsigned int)i) 
#line 2395 
                               goto ldv_61866; else 
#line 2398 
                                                    goto ldv_61868;
  ldv_61868: 
#line 2399 
  ;
  
#line 2409 
  if ((int)(priv->adapter)->scan_chan_gap_enabled != 0) {
    u8 tmp_3;
    
#line 2409 
    tmp_3 = mwifiex_is_any_intf_active(priv);
    
#line 2409 
    if ((unsigned int)tmp_3 != 0U) 
#line 2411 
                                   user_scan_cfg->scan_chan_gap = (priv->adapter)->scan_chan_gap_time; else ;
  }
  else ;
  
#line 2414 
  ret = mwifiex_scan_networks(priv,(struct mwifiex_user_scan_cfg const *)user_scan_cfg);
  
#line 2415 
  kfree((void const *)user_scan_cfg);
  
#line 2416 
  if (ret != 0) {
    
#line 2417 
    if (((priv->adapter)->debug_mask & 4U) != 0U) {
      
#line 2417 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 2417 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"scan failed: %d\n",ret); else ;
    }
    else ;
    
#line 2419 
    priv->scan_aborting = (_Bool)0;
    
#line 2420 
    priv->scan_request = (struct cfg80211_scan_request *)0;
    
#line 2421 
    __retres = ret;
    
#line 2421 
    goto return_label;
  }
  else ;
  
#line 2424 
  if (request->ie != (u8 const *)0U && request->ie_len != 0UL) {
    
#line 2425 
    i = 0;
    
#line 2425 
    goto ldv_61870;
    ldv_61869: 
#line 2426 
    ;
    
#line 2426 
    if ((unsigned int)priv->vs_ie[i].mask == 1U) {
      
#line 2427 
      priv->vs_ie[i].mask = (unsigned short)0U;
      
#line 2428 
      memset((void *)(& priv->vs_ie[i].ie),0,256UL);
    }
    else ;
    
#line 2425 
    i += 1;
    ldv_61870: 
#line 2426 
    ;
    
#line 2425 
    if (i <= 7) 
#line 2427 
                goto ldv_61869; else 
#line 2430 
                                     goto ldv_61871;
    ldv_61871: 
#line 2431 
    ;
  }
  else ;
  
#line 2433 
  __retres = 0;
  return_label: 
#line 2433 
                return __retres;
}


#line 2436  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfg80211.c"
static void mwifiex_setup_vht_caps(struct ieee80211_sta_vht_cap *vht_info, struct mwifiex_private *priv)
{
  
#line 2439 
  struct mwifiex_adapter *adapter = priv->adapter;
  
#line 2441 
  vht_info->vht_supported = (_Bool)1;
  
#line 2443 
  vht_info->cap = adapter->hw_dot_11ac_dev_cap;
  
#line 2445 
  vht_info->vht_mcs.rx_mcs_map = (unsigned short)adapter->hw_dot_11ac_mcs_support;
  
#line 2447 
  vht_info->vht_mcs.rx_highest = (unsigned short)0U;
  
#line 2448 
  vht_info->vht_mcs.tx_mcs_map = (unsigned short)(adapter->hw_dot_11ac_mcs_support >> 16);
  
#line 2450 
  vht_info->vht_mcs.tx_highest = (unsigned short)0U;
  
#line 2451 
  return;
}


#line 2466  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfg80211.c"
static void mwifiex_setup_ht_caps(struct ieee80211_sta_ht_cap *ht_info, struct mwifiex_private *priv)
{
  int rx_mcs_supp;
  struct ieee80211_mcs_info mcs_set;
  
#line 2471 
  u8 *mcs = (u8 *)(& mcs_set);
  
#line 2472 
  struct mwifiex_adapter *adapter = priv->adapter;
  
#line 2474 
  ht_info->ht_supported = (_Bool)1;
  
#line 2475 
  ht_info->ampdu_factor = (unsigned char)3U;
  
#line 2476 
  ht_info->ampdu_density = (unsigned char)0U;
  
#line 2478 
  memset((void *)(& ht_info->mcs),0,16UL);
  
#line 2481 
  if (((unsigned long)adapter->hw_dot_11n_dev_cap & 131072UL) != 0UL) 
    
#line 2482 
    ht_info->cap = (unsigned short)((unsigned int)ht_info->cap | 2U); else 
                                                                    
#line 2484 
                                                                    ht_info->cap = (unsigned short)((unsigned int)ht_info->cap & 65533U);
  
#line 2486 
  if (((unsigned long)adapter->hw_dot_11n_dev_cap & 8388608UL) != 0UL) 
    
#line 2487 
    ht_info->cap = (unsigned short)((unsigned int)ht_info->cap | 32U); else 
                                                                    
#line 2489 
                                                                    ht_info->cap = (unsigned short)((unsigned int)ht_info->cap & 65503U);
  
#line 2491 
  if (((unsigned long)adapter->hw_dot_11n_dev_cap & 16777216UL) != 0UL) 
    
#line 2492 
    ht_info->cap = (unsigned short)((unsigned int)ht_info->cap | 64U); else 
                                                                    
#line 2494 
                                                                    ht_info->cap = (unsigned short)((unsigned int)ht_info->cap & 65471U);
  
#line 2496 
  if ((unsigned int)adapter->user_dev_mcs_support == 34U) 
#line 2497 
                                                          ht_info->cap = (unsigned short)((unsigned int)ht_info->cap | 768U); else 
                                                                    
#line 2499 
                                                                    ht_info->cap = (unsigned short)((unsigned int)ht_info->cap | 256U);
  
#line 2501 
  if (((unsigned long)adapter->hw_dot_11n_dev_cap & 33554432UL) != 0UL) 
    
#line 2502 
    ht_info->cap = (unsigned short)((unsigned int)ht_info->cap | 128U); else 
                                                                    
#line 2504 
                                                                    ht_info->cap = (unsigned short)((unsigned int)ht_info->cap & 65407U);
  
#line 2506 
  if (((unsigned long)adapter->hw_dot_11n_dev_cap & 536870912UL) != 0UL) 
    
#line 2507 
    ht_info->cap = (unsigned short)((unsigned int)ht_info->cap | 16U); else 
                                                                    
#line 2509 
                                                                    ht_info->cap = (unsigned short)((unsigned int)ht_info->cap & 65519U);
  
#line 2511 
  if (((unsigned long)adapter->hw_dot_11n_dev_cap & 256UL) != 0UL) 
#line 2512 
                                                                   ht_info->cap = (unsigned short)((unsigned int)ht_info->cap | 16384U); else 
                                                                    
#line 2514 
                                                                    ht_info->cap = (unsigned short)((unsigned int)ht_info->cap & 49151U);
  
#line 2516 
  if (((unsigned long)adapter->hw_dot_11n_dev_cap & 4194304UL) != 0UL) 
    
#line 2517 
    ht_info->cap = (unsigned short)((unsigned int)ht_info->cap | 1U); else 
                                                                    
#line 2519 
                                                                    ht_info->cap = (unsigned short)((unsigned int)ht_info->cap & 65534U);
  
#line 2521 
  ht_info->cap = (unsigned short)((unsigned int)ht_info->cap & 63487U);
  
#line 2522 
  ht_info->cap = (unsigned short)((unsigned int)ht_info->cap | 12U);
  
#line 2524 
  rx_mcs_supp = (int)adapter->user_dev_mcs_support & 15;
  
#line 2526 
  memset((void *)mcs,255,(unsigned long)rx_mcs_supp);
  
#line 2528 
  memset((void *)(mcs + rx_mcs_supp),0,16UL - (unsigned long)rx_mcs_supp);
  
#line 2530 
  if (priv->bss_mode == 2U || ((unsigned long)adapter->hw_dot_11n_dev_cap & 131072UL) != 0UL) 
    
#line 2533 
    mcs_set.rx_mask[4] = (unsigned char)((unsigned int)mcs_set.rx_mask[4] | 1U); else ;
  
#line 2535 
  memcpy((void *)(& ht_info->mcs),(void const *)mcs,16UL);
  
#line 2537 
  ht_info->mcs.tx_params = (unsigned char)1U;
  
#line 2538 
  return;
}


#line 2543  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfg80211.c"
struct wireless_dev *mwifiex_add_virtual_intf(struct wiphy *wiphy, char const *name, unsigned char name_assign_type, enum nl80211_iftype type, u32 *flags, struct vif_params *params)
{
  struct wireless_dev *__retres;
  struct mwifiex_private *priv;
  struct net_device *dev;
  void *mdev_priv;
  struct net *tmp_11;
  int tmp_13;
  struct workqueue_struct *tmp_15;
  struct workqueue_struct *tmp_18;
  
#line 2550 
  struct mwifiex_adapter *adapter = mwifiex_cfg80211_get_adapter(wiphy);
  
#line 2555 
  if (adapter == (struct mwifiex_adapter *)0) {
    struct wireless_dev *tmp_0;
    
#line 2556 
    tmp_0 = (struct wireless_dev *)ERR_PTR(-14L);
    
#line 2556 
    __retres = tmp_0;
    
#line 2556 
    goto return_label;
  }
  else ;
  
#line 2558 
  switch ((unsigned int)type) {
    int tmp_8;
    struct wireless_dev *tmp_9;
    case (unsigned int)0: 
#line 2559 
    ;
    case (unsigned int)2: 
#line 2560 
    ;
    case (unsigned int)1: 
#line 2561 
    ;
    
#line 2562 
    if ((int)adapter->curr_iface_comb.sta_intf == (int)adapter->iface_limit.sta_intf) {
      struct wireless_dev *tmp_1;
      
#line 2564 
      if ((adapter->debug_mask & 4U) != 0U) {
        
#line 2564 
        if (adapter->dev != (struct device *)0) 
#line 2564 
                                                _dev_info((struct device const *)adapter->dev,"cannot create multiple sta/adhoc ifaces\n"); else ;
      }
      else ;
      
#line 2566 
      tmp_1 = (struct wireless_dev *)ERR_PTR(-22L);
      
#line 2566 
      __retres = tmp_1;
      
#line 2566 
      goto return_label;
    }
    else ;
    
#line 2569 
    priv = mwifiex_get_unused_priv(adapter);
    
#line 2570 
    if (priv == (struct mwifiex_private *)0) {
      struct wireless_dev *tmp_2;
      
#line 2571 
      if ((adapter->debug_mask & 4U) != 0U) {
        
#line 2571 
        if (adapter->dev != (struct device *)0) 
#line 2571 
                                                _dev_info((struct device const *)adapter->dev,"could not get free private struct\n"); else ;
      }
      else ;
      
#line 2573 
      tmp_2 = (struct wireless_dev *)ERR_PTR(-14L);
      
#line 2573 
      __retres = tmp_2;
      
#line 2573 
      goto return_label;
    }
    else ;
    
#line 2576 
    priv->wdev.wiphy = wiphy;
    
#line 2577 
    priv->wdev.iftype = NL80211_IFTYPE_STATION;
    
#line 2579 
    if (type == (unsigned int)NL80211_IFTYPE_UNSPECIFIED) 
#line 2580 
                                                          priv->bss_mode = 2U; else 
                                                                    
#line 2582 
                                                                    priv->bss_mode = (unsigned int)type;
    
#line 2584 
    priv->bss_type = (unsigned char)0U;
    
#line 2585 
    priv->frame_type = (unsigned char)0U;
    
#line 2586 
    priv->bss_priority = (unsigned char)0U;
    
#line 2587 
    priv->bss_role = (unsigned char)0U;
    
#line 2588 
    priv->bss_num = adapter->curr_iface_comb.sta_intf;
    
#line 2590 
    goto ldv_61900;
    case (unsigned int)3: 
#line 2591 
    ;
    
#line 2592 
    if ((int)adapter->curr_iface_comb.uap_intf == (int)adapter->iface_limit.uap_intf) {
      struct wireless_dev *tmp_3;
      
#line 2594 
      if ((adapter->debug_mask & 4U) != 0U) {
        
#line 2594 
        if (adapter->dev != (struct device *)0) 
#line 2594 
                                                _dev_info((struct device const *)adapter->dev,"cannot create multiple AP ifaces\n"); else ;
      }
      else ;
      
#line 2596 
      tmp_3 = (struct wireless_dev *)ERR_PTR(-22L);
      
#line 2596 
      __retres = tmp_3;
      
#line 2596 
      goto return_label;
    }
    else ;
    
#line 2599 
    priv = mwifiex_get_unused_priv(adapter);
    
#line 2600 
    if (priv == (struct mwifiex_private *)0) {
      struct wireless_dev *tmp_4;
      
#line 2601 
      if ((adapter->debug_mask & 4U) != 0U) {
        
#line 2601 
        if (adapter->dev != (struct device *)0) 
#line 2601 
                                                _dev_info((struct device const *)adapter->dev,"could not get free private struct\n"); else ;
      }
      else ;
      
#line 2603 
      tmp_4 = (struct wireless_dev *)ERR_PTR(-14L);
      
#line 2603 
      __retres = tmp_4;
      
#line 2603 
      goto return_label;
    }
    else ;
    
#line 2606 
    priv->wdev.wiphy = wiphy;
    
#line 2607 
    priv->wdev.iftype = NL80211_IFTYPE_AP;
    
#line 2609 
    priv->bss_type = (unsigned char)1U;
    
#line 2610 
    priv->frame_type = (unsigned char)0U;
    
#line 2611 
    priv->bss_priority = (unsigned char)0U;
    
#line 2612 
    priv->bss_role = (unsigned char)1U;
    
#line 2613 
    priv->bss_started = (unsigned char)0U;
    
#line 2614 
    priv->bss_num = adapter->curr_iface_comb.uap_intf;
    
#line 2615 
    priv->bss_mode = (unsigned int)type;
    
#line 2617 
    goto ldv_61900;
    case (unsigned int)8: 
#line 2618 
    ;
    
#line 2619 
    if ((int)adapter->curr_iface_comb.p2p_intf == (int)adapter->iface_limit.p2p_intf) {
      struct wireless_dev *tmp_5;
      
#line 2621 
      if ((adapter->debug_mask & 4U) != 0U) {
        
#line 2621 
        if (adapter->dev != (struct device *)0) 
#line 2621 
                                                _dev_info((struct device const *)adapter->dev,"cannot create multiple P2P ifaces\n"); else ;
      }
      else ;
      
#line 2623 
      tmp_5 = (struct wireless_dev *)ERR_PTR(-22L);
      
#line 2623 
      __retres = tmp_5;
      
#line 2623 
      goto return_label;
    }
    else ;
    
#line 2626 
    priv = mwifiex_get_unused_priv(adapter);
    
#line 2627 
    if (priv == (struct mwifiex_private *)0) {
      struct wireless_dev *tmp_6;
      
#line 2628 
      if ((adapter->debug_mask & 4U) != 0U) {
        
#line 2628 
        if (adapter->dev != (struct device *)0) 
#line 2628 
                                                _dev_info((struct device const *)adapter->dev,"could not get free private struct\n"); else ;
      }
      else ;
      
#line 2630 
      tmp_6 = (struct wireless_dev *)ERR_PTR(-14L);
      
#line 2630 
      __retres = tmp_6;
      
#line 2630 
      goto return_label;
    }
    else ;
    
#line 2633 
    priv->wdev.wiphy = wiphy;
    
#line 2637 
    priv->wdev.iftype = NL80211_IFTYPE_P2P_CLIENT;
    
#line 2638 
    priv->bss_mode = 8U;
    
#line 2644 
    priv->bss_type = (unsigned char)2U;
    
#line 2646 
    priv->frame_type = (unsigned char)0U;
    
#line 2647 
    priv->bss_priority = (unsigned char)0U;
    
#line 2648 
    priv->bss_role = (unsigned char)0U;
    
#line 2649 
    priv->bss_started = (unsigned char)0U;
    
#line 2650 
    priv->bss_num = adapter->curr_iface_comb.p2p_intf;
    
#line 2652 
    tmp_8 = mwifiex_cfg80211_init_p2p_client(priv);
    
#line 2652 
    if (tmp_8 != 0) {
      struct wireless_dev *tmp_7;
      
#line 2653 
      memset((void *)(& priv->wdev),0,976UL);
      
#line 2654 
      priv->wdev.iftype = NL80211_IFTYPE_UNSPECIFIED;
      
#line 2655 
      tmp_7 = (struct wireless_dev *)ERR_PTR(-14L);
      
#line 2655 
      __retres = tmp_7;
      
#line 2655 
      goto return_label;
    }
    else ;
    
#line 2658 
    goto ldv_61900;
    default: 
#line 2659 
    ;
    
#line 2660 
    if ((adapter->debug_mask & 4U) != 0U) {
      
#line 2660 
      if (adapter->dev != (struct device *)0) 
#line 2660 
                                              _dev_info((struct device const *)adapter->dev,"type not supported\n"); else ;
    }
    else ;
    
#line 2661 
    tmp_9 = (struct wireless_dev *)ERR_PTR(-22L);
    
#line 2661 
    __retres = tmp_9;
    
#line 2661 
    goto return_label;
  }
  ldv_61900: 
#line 2664 
  ;
  
#line 2664 
  dev = ldv_alloc_netdev_mqs_88(8,name,(unsigned char)((int)name_assign_type),& ether_setup,4U,1U);
  
#line 2667 
  if (dev == (struct net_device *)0) {
    struct wireless_dev *tmp_10;
    
#line 2668 
    if ((adapter->debug_mask & 4U) != 0U) {
      
#line 2668 
      if (adapter->dev != (struct device *)0) 
#line 2668 
                                              _dev_info((struct device const *)adapter->dev,"no memory available for netdevice\n"); else ;
    }
    else ;
    
#line 2670 
    memset((void *)(& priv->wdev),0,976UL);
    
#line 2671 
    priv->wdev.iftype = NL80211_IFTYPE_UNSPECIFIED;
    
#line 2672 
    priv->bss_mode = 0U;
    
#line 2673 
    tmp_10 = (struct wireless_dev *)ERR_PTR(-12L);
    
#line 2673 
    __retres = tmp_10;
    
#line 2673 
    goto return_label;
  }
  else ;
  
#line 2676 
  mwifiex_init_priv_params(priv,dev);
  
#line 2677 
  priv->netdev = dev;
  
#line 2679 
  mwifiex_setup_ht_caps(& (wiphy->bands[0])->ht_cap,priv);
  
#line 2680 
  if (adapter->is_hw_11ac_capable != 0U) 
#line 2681 
                                         mwifiex_setup_vht_caps(& (wiphy->bands[0])->vht_cap,priv); else ;
  
#line 2684 
  if (((int)adapter->config_bands & 4) != 0) 
#line 2685 
                                             mwifiex_setup_ht_caps(& (wiphy->bands[1])->ht_cap,priv); else ;
  
#line 2688 
  if (((int)adapter->config_bands & 4) != 0 && adapter->is_hw_11ac_capable != 0U) 
    
#line 2689 
    mwifiex_setup_vht_caps(& (wiphy->bands[1])->vht_cap,priv); else ;
  
#line 2692 
  tmp_11 = wiphy_net(wiphy);
  
#line 2692 
  ;
  
#line 2692 
  dev_net_set(dev,tmp_11);
  
#line 2693 
  dev->ieee80211_ptr = & priv->wdev;
  
#line 2694 
  (dev->ieee80211_ptr)->iftype = (enum nl80211_iftype)priv->bss_mode;
  
#line 2695 
  memcpy((void *)dev->dev_addr,(void const *)(& wiphy->perm_addr),6UL);
  
#line 2696 
  dev->dev.parent = wiphy_dev(wiphy);
  
#line 2698 
  dev->flags |= 4098U;
  
#line 2699 
  dev->watchdog_timeo = 1250;
  
#line 2700 
  dev->hard_header_len = (unsigned short)((unsigned int)dev->hard_header_len + 100U);
  
#line 2701 
  dev->ethtool_ops = & mwifiex_ethtool_ops;
  
#line 2703 
  mdev_priv = netdev_priv((struct net_device const *)dev);
  
#line 2704 
  *((unsigned long *)mdev_priv) = (unsigned long)priv;
  
#line 2706 
  dev->dev.parent = adapter->dev;
  
#line 2709 
  tmp_13 = register_netdevice(dev);
  
#line 2709 
  if (tmp_13 != 0) {
    struct wireless_dev *tmp_12;
    
#line 2710 
    if ((adapter->debug_mask & 4U) != 0U) {
      
#line 2710 
      if (adapter->dev != (struct device *)0) 
#line 2710 
                                              _dev_info((struct device const *)adapter->dev,"cannot register virtual network device\n"); else ;
    }
    else ;
    
#line 2712 
    ldv_free_netdev_89(dev);
    
#line 2713 
    priv->bss_mode = 0U;
    
#line 2714 
    priv->netdev = (struct net_device *)0;
    
#line 2715 
    memset((void *)(& priv->wdev),0,976UL);
    
#line 2716 
    priv->wdev.iftype = NL80211_IFTYPE_UNSPECIFIED;
    
#line 2717 
    tmp_12 = (struct wireless_dev *)ERR_PTR(-14L);
    
#line 2717 
    __retres = tmp_12;
    
#line 2717 
    goto return_label;
  }
  else ;
  {
    struct lock_class_key __key;
    char const *__lock_name;
    
#line 2720 
    __lock_name = "\"MWIFIEX_DFS_CAC%s\"";
    
#line 2720 
    tmp_15 = __alloc_workqueue_key("MWIFIEX_DFS_CAC%s",26U,1,& __key,__lock_name,name);
  }
  
#line 2720 
  priv->dfs_cac_workqueue = tmp_15;
  
#line 2724 
  if (priv->dfs_cac_workqueue == (struct workqueue_struct *)0) {
    struct wireless_dev *tmp_16;
    
#line 2725 
    if ((adapter->debug_mask & 4U) != 0U) {
      
#line 2725 
      if (adapter->dev != (struct device *)0) 
#line 2725 
                                              _dev_info((struct device const *)adapter->dev,"cannot register virtual network device\n"); else ;
    }
    else ;
    
#line 2727 
    ldv_free_netdev_90(dev);
    
#line 2728 
    priv->bss_mode = 0U;
    
#line 2729 
    priv->netdev = (struct net_device *)0;
    
#line 2730 
    memset((void *)(& priv->wdev),0,976UL);
    
#line 2731 
    priv->wdev.iftype = NL80211_IFTYPE_UNSPECIFIED;
    
#line 2732 
    tmp_16 = (struct wireless_dev *)ERR_PTR(-12L);
    
#line 2732 
    __retres = tmp_16;
    
#line 2732 
    goto return_label;
  }
  else ;
  {
    struct lock_class_key __key_0;
    
#line 2735 
    __init_work(& priv->dfs_cac_work.work,0);
    
#line 2735 
    atomic_long_t __constr_expr_37 = {.counter = WORK_STRUCT_NO_POOL_0};
    
#line 2735 
    priv->dfs_cac_work.work.data = __constr_expr_37;
    
#line 2735 
    lockdep_init_map(& priv->dfs_cac_work.work.lockdep_map,"(&(&priv->dfs_cac_work)->work)",& __key_0,0);
    
#line 2735 
    INIT_LIST_HEAD(& priv->dfs_cac_work.work.entry);
    
#line 2735 
    priv->dfs_cac_work.work.func = & mwifiex_dfs_cac_work_queue;
  }
  {
    struct lock_class_key __key_1;
    
#line 2735 
    init_timer_key(& priv->dfs_cac_work.timer,2097152U,"(&(&priv->dfs_cac_work)->timer)",& __key_1);
  }
  
#line 2735 
  priv->dfs_cac_work.timer.function = & delayed_work_timer_fn;
  
#line 2735 
  priv->dfs_cac_work.timer.data = (unsigned long)(& priv->dfs_cac_work);
  {
    struct lock_class_key __key_2;
    char const *__lock_name_0;
    
#line 2737 
    __lock_name_0 = "\"MWIFIEX_DFS_CHSW%s\"";
    
#line 2737 
    tmp_18 = __alloc_workqueue_key("MWIFIEX_DFS_CHSW%s",26U,1,& __key_2,__lock_name_0,name);
  }
  
#line 2737 
  priv->dfs_chan_sw_workqueue = tmp_18;
  
#line 2740 
  if (priv->dfs_chan_sw_workqueue == (struct workqueue_struct *)0) {
    struct wireless_dev *tmp_19;
    
#line 2741 
    if ((adapter->debug_mask & 4U) != 0U) {
      
#line 2741 
      if (adapter->dev != (struct device *)0) 
#line 2741 
                                              _dev_info((struct device const *)adapter->dev,"cannot register virtual network device\n"); else ;
    }
    else ;
    
#line 2743 
    ldv_free_netdev_91(dev);
    
#line 2744 
    priv->bss_mode = 0U;
    
#line 2745 
    priv->netdev = (struct net_device *)0;
    
#line 2746 
    memset((void *)(& priv->wdev),0,976UL);
    
#line 2747 
    priv->wdev.iftype = NL80211_IFTYPE_UNSPECIFIED;
    
#line 2748 
    tmp_19 = (struct wireless_dev *)ERR_PTR(-12L);
    
#line 2748 
    __retres = tmp_19;
    
#line 2748 
    goto return_label;
  }
  else ;
  {
    struct lock_class_key __key_3;
    
#line 2751 
    __init_work(& priv->dfs_chan_sw_work.work,0);
    
#line 2751 
    atomic_long_t __constr_expr_38 = {.counter = WORK_STRUCT_NO_POOL_0};
    
#line 2751 
    priv->dfs_chan_sw_work.work.data = __constr_expr_38;
    
#line 2751 
    lockdep_init_map(& priv->dfs_chan_sw_work.work.lockdep_map,"(&(&priv->dfs_chan_sw_work)->work)",& __key_3,0);
    
#line 2751 
    INIT_LIST_HEAD(& priv->dfs_chan_sw_work.work.entry);
    
#line 2751 
    priv->dfs_chan_sw_work.work.func = & mwifiex_dfs_chan_sw_work_queue;
  }
  {
    struct lock_class_key __key_4;
    
#line 2751 
    init_timer_key(& priv->dfs_chan_sw_work.timer,2097152U,"(&(&priv->dfs_chan_sw_work)->timer)",& __key_4);
  }
  
#line 2751 
  priv->dfs_chan_sw_work.timer.function = & delayed_work_timer_fn;
  
#line 2751 
  priv->dfs_chan_sw_work.timer.data = (unsigned long)(& priv->dfs_chan_sw_work);
  
#line 2754 
  sema_init(& priv->async_sem,1);
  
#line 2756 
  if ((adapter->debug_mask & 1073741824U) != 0U) {
    
#line 2756 
    if (adapter->dev != (struct device *)0) 
#line 2756 
                                            _dev_info((struct device const *)adapter->dev,"info: %s: Marvell 802.11 Adapter\n",(char *)(& dev->name)); else ;
  }
  else ;
  
#line 2760 
  mwifiex_dev_debugfs_init(priv);
  
#line 2763 
  switch ((unsigned int)type) {
    struct wireless_dev *tmp_20;
    case (unsigned int)0: 
#line 2764 
    ;
    case (unsigned int)2: 
#line 2765 
    ;
    case (unsigned int)1: 
#line 2766 
    ;
    
#line 2767 
    adapter->curr_iface_comb.sta_intf = (u8)((int)adapter->curr_iface_comb.sta_intf + 1);
    
#line 2768 
    goto ldv_61919;
    case (unsigned int)3: 
#line 2769 
    ;
    
#line 2770 
    adapter->curr_iface_comb.uap_intf = (u8)((int)adapter->curr_iface_comb.uap_intf + 1);
    
#line 2771 
    goto ldv_61919;
    case (unsigned int)8: 
#line 2772 
    ;
    
#line 2773 
    adapter->curr_iface_comb.p2p_intf = (u8)((int)adapter->curr_iface_comb.p2p_intf + 1);
    
#line 2774 
    goto ldv_61919;
    default: 
#line 2775 
    ;
    
#line 2776 
    if ((adapter->debug_mask & 4U) != 0U) {
      
#line 2776 
      if (adapter->dev != (struct device *)0) 
#line 2776 
                                              _dev_info((struct device const *)adapter->dev,"type not supported\n"); else ;
    }
    else ;
    
#line 2777 
    tmp_20 = (struct wireless_dev *)ERR_PTR(-22L);
    
#line 2777 
    __retres = tmp_20;
    
#line 2777 
    goto return_label;
  }
  ldv_61919: 
#line 2780 
  ;
  
#line 2780 
  __retres = & priv->wdev;
  return_label: 
#line 2780 
                return __retres;
}


#line 2782  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfg80211.c"
static char const __kstrtab_mwifiex_add_virtual_intf[25U] = {(char)'m', (char)'w', (char)'i', (char)'f', (char)'i', (char)'e', (char)'x', (char)'_', (char)'a', (char)'d', (char)'d', (char)'_', (char)'v', (char)'i', (char)'r', (char)'t', (char)'u', (char)'a', (char)'l', (char)'_', (char)'i', (char)'n', (char)'t', (char)'f', (char)'\000'};

#line 2782 
struct kernel_symbol const __ksymtab_mwifiex_add_virtual_intf;


#line 2782  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfg80211.c"
struct kernel_symbol const __ksymtab_mwifiex_add_virtual_intf = {.value = (unsigned long)(& mwifiex_add_virtual_intf), .name = (char const *)(& __kstrtab_mwifiex_add_virtual_intf)};

#line 2787  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfg80211.c"
int mwifiex_del_virtual_intf(struct wiphy *wiphy, struct wireless_dev *wdev)
{
  int __retres;
  bool tmp_0;
  
#line 2789 
  struct mwifiex_private *priv = mwifiex_netdev_get_priv(wdev->netdev);
  
#line 2790 
  struct mwifiex_adapter *adapter = priv->adapter;
  
#line 2793 
  mwifiex_dev_debugfs_remove(priv);
  
#line 2796 
  mwifiex_stop_net_dev_queue(priv->netdev,adapter);
  
#line 2798 
  tmp_0 = netif_carrier_ok((struct net_device const *)priv->netdev);
  
#line 2798 
  if ((int)tmp_0 != 0) 
#line 2799 
                       netif_carrier_off(priv->netdev); else ;
  
#line 2801 
  if ((unsigned int)(wdev->netdev)->reg_state == 1U) 
#line 2802 
                                                     unregister_netdevice(wdev->netdev); else ;
  
#line 2804 
  if (priv->dfs_cac_workqueue != (struct workqueue_struct *)0) {
    
#line 2805 
    flush_workqueue(priv->dfs_cac_workqueue);
    
#line 2806 
    destroy_workqueue(priv->dfs_cac_workqueue);
    
#line 2807 
    priv->dfs_cac_workqueue = (struct workqueue_struct *)0;
  }
  else ;
  
#line 2810 
  if (priv->dfs_chan_sw_workqueue != (struct workqueue_struct *)0) {
    
#line 2811 
    flush_workqueue(priv->dfs_chan_sw_workqueue);
    
#line 2812 
    destroy_workqueue(priv->dfs_chan_sw_workqueue);
    
#line 2813 
    priv->dfs_chan_sw_workqueue = (struct workqueue_struct *)0;
  }
  else ;
  
#line 2816 
  (priv->netdev)->ieee80211_ptr = (struct wireless_dev *)0;
  
#line 2817 
  priv->netdev = (struct net_device *)0;
  
#line 2818 
  priv->wdev.iftype = NL80211_IFTYPE_UNSPECIFIED;
  
#line 2820 
  priv->media_connected = (unsigned char)0U;
  
#line 2822 
  switch (priv->bss_mode) {
    case (u32)0: 
#line 2823 
    ;
    case (u32)2: 
#line 2824 
    ;
    case (u32)1: 
#line 2825 
    ;
    
#line 2826 
    adapter->curr_iface_comb.sta_intf = (u8)((int)adapter->curr_iface_comb.sta_intf + 1);
    
#line 2827 
    goto ldv_61944;
    case (u32)3: 
#line 2828 
    ;
    
#line 2829 
    adapter->curr_iface_comb.uap_intf = (u8)((int)adapter->curr_iface_comb.uap_intf + 1);
    
#line 2830 
    goto ldv_61944;
    case (u32)8: 
#line 2831 
    ;
    case (u32)9: 
#line 2832 
    ;
    
#line 2833 
    adapter->curr_iface_comb.p2p_intf = (u8)((int)adapter->curr_iface_comb.p2p_intf + 1);
    
#line 2834 
    goto ldv_61944;
    default: 
#line 2835 
    ;
    
#line 2836 
    if ((adapter->debug_mask & 4U) != 0U) {
      
#line 2836 
      if (adapter->dev != (struct device *)0) 
#line 2836 
                                              _dev_info((struct device const *)adapter->dev,"del_virtual_intf: type not supported\n"); else ;
    }
    else ;
    
#line 2838 
    goto ldv_61944;
  }
  ldv_61944: 
#line 2841 
  ;
  
#line 2841 
  priv->bss_mode = 0U;
  
#line 2845 
  kfree((void const *)priv->hist_data);
  
#line 2847 
  __retres = 0;
  
#line 2847 
  return __retres;
}


#line 2849  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfg80211.c"
static char const __kstrtab_mwifiex_del_virtual_intf[25U] = {(char)'m', (char)'w', (char)'i', (char)'f', (char)'i', (char)'e', (char)'x', (char)'_', (char)'d', (char)'e', (char)'l', (char)'_', (char)'v', (char)'i', (char)'r', (char)'t', (char)'u', (char)'a', (char)'l', (char)'_', (char)'i', (char)'n', (char)'t', (char)'f', (char)'\000'};

#line 2849 
struct kernel_symbol const __ksymtab_mwifiex_del_virtual_intf;


#line 2849  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfg80211.c"
struct kernel_symbol const __ksymtab_mwifiex_del_virtual_intf = {.value = (unsigned long)(& mwifiex_del_virtual_intf), .name = (char const *)(& __kstrtab_mwifiex_del_virtual_intf)};

#line 2852  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfg80211.c"
static bool mwifiex_is_pattern_supported(struct cfg80211_pkt_pattern *pat, s8 *byte_seq, u8 max_byte_seq)
{
  bool __retres;
  int j;
  int k;
  
#line 2855 
  int valid_byte_cnt = 0;
  
#line 2856 
  bool dont_care_byte = (_Bool)0;
  
#line 2858 
  j = 0;
  
#line 2858 
  goto ldv_61970;
  ldv_61969: 
#line 2859 
  ;
  
#line 2859 
  k = 0;
  
#line 2859 
  goto ldv_61967;
  ldv_61966: 
#line 2860 
  ;
  
#line 2860 
  if ((((int)*(pat->mask + j) >> k) & 1) != 0) {
    
#line 2861 
    memcpy((void *)(byte_seq + valid_byte_cnt),(void const *)(pat->pattern + (j * 8 + k)),1UL);
    
#line 2863 
    valid_byte_cnt += 1;
    
#line 2864 
    if ((int)dont_care_byte != 0) {
      
#line 2865 
      __retres = (_Bool)0;
      
#line 2865 
      goto return_label;
    }
    else ;
  }
  else 
    
#line 2867 
    if (valid_byte_cnt != 0) 
#line 2868 
                             dont_care_byte = (_Bool)1; else ;
  
#line 2871 
  if ((int)max_byte_seq < valid_byte_cnt) {
    
#line 2872 
    __retres = (_Bool)0;
    
#line 2872 
    goto return_label;
  }
  else ;
  
#line 2859 
  k += 1;
  ldv_61967: 
#line 2860 
  ;
  
#line 2859 
  if (k <= 7) 
#line 2861 
              goto ldv_61966; else 
#line 2864 
                                   goto ldv_61968;
  ldv_61968: 
#line 2865 
  ;
  
#line 2858 
  j += 1;
  ldv_61970: 
#line 2859 
  ;
  
#line 2858 
  if ((pat->pattern_len + 7) / 8 > j) 
#line 2860 
                                      goto ldv_61969; else 
#line 2863 
                                                           goto ldv_61971;
  ldv_61971: 
#line 2864 
  ;
  
#line 2876 
  *(byte_seq + (int)max_byte_seq) = (signed char)valid_byte_cnt;
  
#line 2878 
  __retres = (_Bool)1;
  return_label: 
#line 2878 
                return __retres;
}


#line 2882  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfg80211.c"
static void mwifiex_set_auto_arp_mef_entry(struct mwifiex_private *priv, struct mwifiex_mef_entry *mef_entry)
{
  int i;
  struct in_device *in_dev;
  struct in_ifaddr *ifa;
  __be32 ips[4U];
  
#line 2885 
  int filt_num = 0;
  
#line 2885 
  int num_ipv4 = 0;
  
#line 2889 
  struct mwifiex_adapter *adapter = priv->adapter;
  
#line 2891 
  mef_entry->mode = (unsigned char)1U;
  
#line 2892 
  mef_entry->action = (unsigned char)16U;
  
#line 2895 
  memset((void *)(& ips),0,16UL);
  
#line 2896 
  i = 0;
  
#line 2896 
  goto ldv_61985;
  ldv_61984: 
#line 2897 
  ;
  
#line 2897 
  if ((adapter->priv[i])->netdev != (struct net_device *)0) {
    
#line 2898 
    in_dev = __in_dev_get_rtnl((struct net_device const *)(adapter->priv[i])->netdev);
    
#line 2899 
    if (in_dev == (struct in_device *)0) 
#line 2900 
                                         goto ldv_61983; else ;
    
#line 2901 
    ifa = in_dev->ifa_list;
    
#line 2902 
    if (ifa == (struct in_ifaddr *)0 || ifa->ifa_local == 0U) 
#line 2903 
                                                              goto ldv_61983; else ;
    
#line 2904 
    ips[i] = ifa->ifa_local;
    
#line 2905 
    num_ipv4 += 1;
  }
  else ;
  ldv_61983: 
#line 2907 
  ;
  
#line 2896 
  i += 1;
  ldv_61985: 
#line 2897 
  ;
  
#line 2896 
  if (i <= 2) 
#line 2898 
              goto ldv_61984; else 
#line 2901 
                                   goto ldv_61986;
  ldv_61986: 
#line 2902 
  ;
  
#line 2909 
  i = 0;
  
#line 2909 
  goto ldv_61989;
  ldv_61988: 
#line 2910 
  ;
  
#line 2910 
  if (ips[i] == 0U) 
#line 2911 
                    goto ldv_61987; else ;
  
#line 2912 
  mef_entry->filter[filt_num].repeat = (unsigned short)1U;
  
#line 2913 
  memcpy((void *)(& mef_entry->filter[filt_num].byte_seq),(void const *)(& ips[i]),4UL);
  
#line 2916 
  mef_entry->filter[filt_num].byte_seq[6] = (signed char)4;
  
#line 2918 
  mef_entry->filter[filt_num].offset = (unsigned short)46U;
  
#line 2919 
  mef_entry->filter[filt_num].filt_type = (unsigned char)65U;
  
#line 2920 
  if (filt_num != 0) 
#line 2921 
                     mef_entry->filter[filt_num].filt_action = (unsigned char)69U; else ;
  
#line 2924 
  filt_num += 1;
  ldv_61987: 
#line 2925 
  ;
  
#line 2909 
  i += 1;
  ldv_61989: 
#line 2910 
  ;
  
#line 2909 
  if (i < num_ipv4) 
#line 2911 
                    goto ldv_61988; else 
#line 2914 
                                         goto ldv_61990;
  ldv_61990: 
#line 2915 
  ;
  
#line 2927 
  mef_entry->filter[filt_num].repeat = (unsigned short)1U;
  
#line 2928 
  mef_entry->filter[filt_num].byte_seq[0] = (signed char)8;
  
#line 2929 
  mef_entry->filter[filt_num].byte_seq[1] = (signed char)6;
  
#line 2930 
  mef_entry->filter[filt_num].byte_seq[6] = (signed char)2;
  
#line 2931 
  mef_entry->filter[filt_num].offset = (unsigned short)20U;
  
#line 2932 
  mef_entry->filter[filt_num].filt_type = (unsigned char)65U;
  
#line 2933 
  mef_entry->filter[filt_num].filt_action = (unsigned char)68U;
  
#line 2934 
  return;
}


#line 2936  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfg80211.c"
static int mwifiex_set_wowlan_mef_entry(struct mwifiex_private *priv, struct mwifiex_ds_mef_cfg *mef_cfg, struct mwifiex_mef_entry *mef_entry, struct cfg80211_wowlan *wowlan)
{
  int __retres;
  int i;
  u8 byte_seq[7U];
  int tmp_0;
  bool tmp;
  
#line 2941 
  int filt_num = 0;
  
#line 2941 
  int ret = 0;
  
#line 2942 
  bool first_pat = (_Bool)1;
  
#line 2944 
  u8 const ipv4_mc_mac[2U] = {(unsigned char)51U, (unsigned char)51U};
  
#line 2945 
  u8 const ipv6_mc_mac[3U] = {(unsigned char)1U, (unsigned char)0U, (unsigned char)94U};
  
#line 2947 
  mef_entry->mode = (unsigned char)1U;
  
#line 2948 
  mef_entry->action = (unsigned char)3U;
  
#line 2950 
  i = 0;
  
#line 2950 
  goto ldv_62006;
  ldv_62005: 
#line 2951 
  ;
  
#line 2951 
  memset((void *)(& byte_seq),0,7UL);
  
#line 2952 
  tmp = mwifiex_is_pattern_supported(wowlan->patterns + i,(s8 *)(& byte_seq),(unsigned char)6);
  
#line 2952 
  if (tmp) 
#line 2952 
           tmp_0 = 0; else 
#line 2952 
                           tmp_0 = 1;
  
#line 2952 
  if (tmp_0) {
    
#line 2955 
    if (((priv->adapter)->debug_mask & 4U) != 0U) {
      
#line 2955 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 2955 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"Pattern not supported\n"); else ;
    }
    else ;
    
#line 2957 
    kfree((void const *)mef_entry);
    
#line 2958 
    __retres = -95;
    
#line 2958 
    goto return_label;
  }
  else ;
  
#line 2961 
  if ((wowlan->patterns + i)->pkt_offset == 0) 
    
#line 2962 
    if (((int)byte_seq[0] & 1) == 0 && (unsigned int)byte_seq[6] == 1U) {
      
#line 2964 
      mef_cfg->criteria |= 2U;
      
#line 2965 
      goto ldv_62004;
    }
    else {
      bool tmp_3;
      
#line 2966 
      tmp_3 = is_broadcast_ether_addr((u8 const *)(& byte_seq));
      
#line 2966 
      if ((int)tmp_3 != 0) {
        
#line 2967 
        mef_cfg->criteria |= 1U;
        
#line 2968 
        goto ldv_62004;
      }
      else {
        int tmp_1;
        
#line 2969 
        tmp_1 = memcmp((void const *)(& byte_seq),(void const *)(& ipv4_mc_mac),2UL);
        
#line 2969 
        if (tmp_1 == 0) {
          
#line 2969 
          if ((unsigned int)byte_seq[6] == 2U) 
#line 2969 
                                               goto _LOR; else 
#line 2969 
                                                               goto _LAND;
        }
        else {
          int tmp_2;
          _LAND: 
#line 2970 
          tmp_2 = memcmp((void const *)(& byte_seq),(void const *)(& ipv6_mc_mac),3UL);
          
#line 2970 
          if (tmp_2 == 0) {
            
#line 2971 
            if ((unsigned int)byte_seq[6] == 3U) {
              _LOR: {
                      
#line 2973 
                      mef_cfg->criteria |= 8U;
                      
#line 2974 
                      goto ldv_62004;
                    }
            }
            else ;
          }
          else ;
        }
      }
    }
  else ;
  
#line 2977 
  mef_entry->filter[filt_num].repeat = (unsigned short)1U;
  
#line 2978 
  mef_entry->filter[filt_num].offset = (unsigned short)(wowlan->patterns + i)->pkt_offset;
  
#line 2980 
  memcpy((void *)(& mef_entry->filter[filt_num].byte_seq),(void const *)(& byte_seq),7UL);
  
#line 2982 
  mef_entry->filter[filt_num].filt_type = (unsigned char)65U;
  
#line 2984 
  if ((int)first_pat != 0) 
#line 2985 
                           first_pat = (_Bool)0; else 
#line 2987 
                                                      mef_entry->filter[filt_num].filt_action = (unsigned char)68U;
  
#line 2989 
  filt_num += 1;
  ldv_62004: 
#line 2990 
  ;
  
#line 2950 
  i += 1;
  ldv_62006: 
#line 2951 
  ;
  
#line 2950 
  if (wowlan->n_patterns > i) 
#line 2952 
                              goto ldv_62005; else 
#line 2955 
                                                   goto ldv_62007;
  ldv_62007: 
#line 2956 
  ;
  
#line 2992 
  if ((int)wowlan->magic_pkt != 0) {
    
#line 2993 
    mef_cfg->criteria |= 2U;
    
#line 2994 
    mef_entry->filter[filt_num].repeat = (unsigned short)16U;
    
#line 2995 
    memcpy((void *)(& mef_entry->filter[filt_num].byte_seq),(void const *)(& priv->curr_addr),6UL);
    
#line 2997 
    mef_entry->filter[filt_num].byte_seq[6] = (signed char)6;
    
#line 2999 
    mef_entry->filter[filt_num].offset = (unsigned short)28U;
    
#line 3000 
    mef_entry->filter[filt_num].filt_type = (unsigned char)65U;
    
#line 3001 
    if (filt_num != 0) 
#line 3002 
                       mef_entry->filter[filt_num].filt_action = (unsigned char)69U; else ;
    
#line 3004 
    filt_num += 1;
    
#line 3005 
    mef_entry->filter[filt_num].repeat = (unsigned short)16U;
    
#line 3006 
    memcpy((void *)(& mef_entry->filter[filt_num].byte_seq),(void const *)(& priv->curr_addr),6UL);
    
#line 3008 
    mef_entry->filter[filt_num].byte_seq[6] = (signed char)6;
    
#line 3010 
    mef_entry->filter[filt_num].offset = (unsigned short)56U;
    
#line 3011 
    mef_entry->filter[filt_num].filt_type = (unsigned char)65U;
    
#line 3012 
    mef_entry->filter[filt_num].filt_action = (unsigned char)69U;
  }
  else ;
  
#line 3014 
  __retres = ret;
  return_label: 
#line 3014 
                return __retres;
}


#line 3017  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfg80211.c"
static int mwifiex_set_mef_filter(struct mwifiex_private *priv, struct cfg80211_wowlan *wowlan)
{
  int __retres;
  struct mwifiex_ds_mef_cfg mef_cfg;
  struct mwifiex_mef_entry *mef_entry;
  
#line 3020 
  int ret = 0;
  
#line 3020 
  int num_entries = 1;
  
#line 3024 
  if (wowlan->n_patterns != 0 || (int)wowlan->magic_pkt != 0) 
#line 3025 
                                                              num_entries += 1; else ;
  
#line 3027 
  mef_entry = (struct mwifiex_mef_entry *)kcalloc_1((unsigned long)num_entries,142UL,208U);
  
#line 3028 
  if (mef_entry == (struct mwifiex_mef_entry *)0) {
    
#line 3029 
    __retres = -12;
    
#line 3029 
    goto return_label;
  }
  else ;
  
#line 3031 
  memset((void *)(& mef_cfg),0,16UL);
  
#line 3032 
  mef_cfg.criteria |= 3U;
  
#line 3034 
  mef_cfg.num_entries = (unsigned short)num_entries;
  
#line 3035 
  mef_cfg.mef_entry = mef_entry;
  
#line 3037 
  mwifiex_set_auto_arp_mef_entry(priv,mef_entry);
  
#line 3039 
  if (wowlan->n_patterns != 0 || (int)wowlan->magic_pkt != 0) 
#line 3040 
                                                              ret = mwifiex_set_wowlan_mef_entry(priv,& mef_cfg,mef_entry + 1U,wowlan); else ;
  
#line 3043 
  if (mef_cfg.criteria == 0U) 
#line 3044 
                              mef_cfg.criteria = 11U; else ;
  
#line 3048 
  ret = mwifiex_send_cmd(priv,(unsigned short)154,(unsigned short)1,0U,(void *)(& mef_cfg),(_Bool)1);
  
#line 3051 
  kfree((void const *)mef_entry);
  
#line 3052 
  __retres = ret;
  return_label: 
#line 3052 
                return __retres;
}


#line 3055  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfg80211.c"
static int mwifiex_cfg80211_suspend(struct wiphy *wiphy, struct cfg80211_wowlan *wowlan)
{
  int __retres;
  struct mwifiex_ds_hs_cfg hs_cfg;
  int i;
  struct mwifiex_private *priv;
  
#line 3058 
  struct mwifiex_adapter *adapter = mwifiex_cfg80211_get_adapter(wiphy);
  
#line 3060 
  int ret = 0;
  
#line 3063 
  i = 0;
  
#line 3063 
  goto ldv_62026;
  ldv_62025: 
#line 3064 
  ;
  
#line 3064 
  priv = adapter->priv[i];
  
#line 3065 
  mwifiex_abort_cac(priv);
  
#line 3063 
  i += 1;
  ldv_62026: 
#line 3064 
  ;
  
#line 3063 
  if ((int)adapter->priv_num > i) 
#line 3065 
                                  goto ldv_62025; else 
#line 3068 
                                                       goto ldv_62027;
  ldv_62027: 
#line 3069 
  ;
  
#line 3068 
  mwifiex_cancel_all_pending_cmd(adapter);
  
#line 3070 
  if (wowlan == (struct cfg80211_wowlan *)0) {
    
#line 3071 
    if ((adapter->debug_mask & 4U) != 0U) {
      
#line 3071 
      if (adapter->dev != (struct device *)0) 
#line 3071 
                                              _dev_info((struct device const *)adapter->dev,"None of the WOWLAN triggers enabled\n"); else ;
    }
    else ;
    
#line 3073 
    __retres = 0;
    
#line 3073 
    goto return_label;
  }
  else ;
  
#line 3076 
  priv = mwifiex_get_priv_3(adapter,(enum mwifiex_bss_role)MWIFIEX_BSS_ROLE_STA);
  
#line 3078 
  if ((unsigned int)priv->media_connected == 0U) {
    
#line 3079 
    if ((adapter->debug_mask & 4U) != 0U) {
      
#line 3079 
      if (adapter->dev != (struct device *)0) 
#line 3079 
                                              _dev_info((struct device const *)adapter->dev,"Can not configure WOWLAN in disconnected state\n"); else ;
    }
    else ;
    
#line 3081 
    __retres = 0;
    
#line 3081 
    goto return_label;
  }
  else ;
  
#line 3084 
  ret = mwifiex_set_mef_filter(priv,wowlan);
  
#line 3085 
  if (ret != 0) {
    
#line 3086 
    if ((adapter->debug_mask & 4U) != 0U) {
      
#line 3086 
      if (adapter->dev != (struct device *)0) 
#line 3086 
                                              _dev_info((struct device const *)adapter->dev,"Failed to set MEF filter\n"); else ;
    }
    else ;
    
#line 3087 
    __retres = ret;
    
#line 3087 
    goto return_label;
  }
  else ;
  
#line 3090 
  if ((int)wowlan->disconnect != 0) {
    
#line 3091 
    memset((void *)(& hs_cfg),0,16UL);
    
#line 3092 
    hs_cfg.is_invoke_hostcmd = 0U;
    
#line 3093 
    hs_cfg.conditions = 4U;
    
#line 3094 
    hs_cfg.gpio = 255U;
    
#line 3095 
    hs_cfg.gap = 255U;
    
#line 3096 
    ret = mwifiex_set_hs_params(priv,(unsigned short)1,1,& hs_cfg);
    
#line 3098 
    if (ret != 0) {
      
#line 3099 
      if ((adapter->debug_mask & 4U) != 0U) {
        
#line 3099 
        if (adapter->dev != (struct device *)0) 
#line 3099 
                                                _dev_info((struct device const *)adapter->dev,"Failed to set HS params\n"); else ;
      }
      else ;
      
#line 3101 
      __retres = ret;
      
#line 3101 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 3105 
  __retres = ret;
  return_label: 
#line 3105 
                return __retres;
}


#line 3108  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfg80211.c"
static int mwifiex_cfg80211_resume(struct wiphy *wiphy)
{
  int __retres;
  
#line 3110 
  __retres = 0;
  
#line 3110 
  return __retres;
}


#line 3113  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfg80211.c"
static void mwifiex_cfg80211_set_wakeup(struct wiphy *wiphy, bool enabled)
{
  
#line 3116 
  struct mwifiex_adapter *adapter = mwifiex_cfg80211_get_adapter(wiphy);
  
#line 3118 
  device_set_wakeup_enable(adapter->dev,(_Bool)((bool)((int)enabled) != 0));
  
#line 3119 
  return;
}


#line 3122  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfg80211.c"
static int mwifiex_get_coalesce_pkt_type(u8 *byte_seq)
{
  int __retres;
  
#line 3124 
  u8 const ipv4_mc_mac[2U] = {(unsigned char)51U, (unsigned char)51U};
  
#line 3125 
  u8 const ipv6_mc_mac[3U] = {(unsigned char)1U, (unsigned char)0U, (unsigned char)94U};
  
#line 3126 
  u8 const bc_mac[4U] = {(unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U};
  
#line 3128 
  if (((int)*byte_seq & 1) != 0 && (unsigned int)*(byte_seq + 4U) == 1U) {
    
#line 3130 
    __retres = 1;
    
#line 3130 
    goto return_label;
  }
  else {
    int tmp_1;
    
#line 3131 
    tmp_1 = memcmp((void const *)byte_seq,(void const *)(& bc_mac),4UL);
    
#line 3131 
    if (tmp_1 == 0) {
      
#line 3132 
      __retres = 3;
      
#line 3132 
      goto return_label;
    }
    else {
      int tmp;
      
#line 3133 
      tmp = memcmp((void const *)byte_seq,(void const *)(& ipv4_mc_mac),2UL);
      
#line 3133 
      if (tmp == 0) {
        
#line 3134 
        if ((unsigned int)*(byte_seq + 4U) == 2U) {
          
#line 3137 
          __retres = 2;
          
#line 3137 
          goto return_label;
        }
        else 
#line 3133 
             goto _LAND;
      }
      else {
        int tmp_0;
        _LAND: 
#line 3134 
        tmp_0 = memcmp((void const *)byte_seq,(void const *)(& ipv6_mc_mac),3UL);
        
#line 3134 
        if (tmp_0 == 0) {
          
#line 3136 
          if ((unsigned int)*(byte_seq + 4U) == 3U) {
            
#line 3137 
            __retres = 2;
            
#line 3137 
            goto return_label;
          }
          else ;
        }
        else ;
      }
    }
  }
  
#line 3139 
  __retres = 0;
  return_label: 
#line 3139 
                return __retres;
}


#line 3143  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfg80211.c"
static int mwifiex_fill_coalesce_rule_info(struct mwifiex_private *priv, struct cfg80211_coalesce_rules *crule, struct mwifiex_coalesce_rule *mrule)
{
  int __retres;
  u8 byte_seq[5U];
  struct filt_field_param *param;
  int i;
  int tmp_0;
  bool tmp;
  
#line 3151 
  mrule->max_coalescing_delay = (unsigned short)crule->delay;
  
#line 3153 
  param = (struct filt_field_param *)(& mrule->params);
  
#line 3155 
  i = 0;
  
#line 3155 
  goto ldv_62053;
  ldv_62052: 
#line 3156 
  ;
  
#line 3156 
  memset((void *)(& byte_seq),0,5UL);
  
#line 3157 
  tmp = mwifiex_is_pattern_supported(crule->patterns + i,(s8 *)(& byte_seq),(unsigned char)4);
  
#line 3157 
  if (tmp) 
#line 3157 
           tmp_0 = 0; else 
#line 3157 
                           tmp_0 = 1;
  
#line 3157 
  if (tmp_0) {
    
#line 3160 
    if (((priv->adapter)->debug_mask & 4U) != 0U) {
      
#line 3160 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 3160 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"Pattern not supported\n"); else ;
    }
    else ;
    
#line 3162 
    __retres = -95;
    
#line 3162 
    goto return_label;
  }
  else ;
  
#line 3165 
  if ((crule->patterns + i)->pkt_offset == 0) {
    u8 pkt_type;
    int tmp_1;
    
#line 3168 
    tmp_1 = mwifiex_get_coalesce_pkt_type((u8 *)(& byte_seq));
    
#line 3168 
    pkt_type = (unsigned char)tmp_1;
    
#line 3169 
    if ((unsigned int)pkt_type != 0U && (unsigned int)mrule->pkt_type != 0U) {
      
#line 3170 
      if (((priv->adapter)->debug_mask & 4U) != 0U) {
        
#line 3170 
        if ((priv->adapter)->dev != (struct device *)0) 
#line 3170 
                                                        _dev_info((struct device const *)(priv->adapter)->dev,"Multiple packet types not allowed\n"); else ;
      }
      else ;
      
#line 3172 
      __retres = -95;
      
#line 3172 
      goto return_label;
    }
    else 
      
#line 3173 
      if ((unsigned int)pkt_type != 0U) {
        
#line 3174 
        mrule->pkt_type = pkt_type;
        
#line 3175 
        goto ldv_62051;
      }
      else ;
  }
  else ;
  
#line 3179 
  if (crule->condition == (unsigned int)NL80211_COALESCE_CONDITION_MATCH) 
    
#line 3180 
    param->operation = (unsigned char)128U; else 
#line 3182 
                                                 param->operation = (unsigned char)129U;
  
#line 3184 
  param->operand_len = byte_seq[4];
  
#line 3185 
  memcpy((void *)(& param->operand_byte_stream),(void const *)(& byte_seq),(unsigned long)param->operand_len);
  
#line 3187 
  param->offset = (unsigned short)(crule->patterns + i)->pkt_offset;
  
#line 3188 
  param += 1;
  
#line 3190 
  mrule->num_of_fields = (u8)((int)mrule->num_of_fields + 1);
  ldv_62051: 
#line 3191 
  ;
  
#line 3155 
  i += 1;
  ldv_62053: 
#line 3156 
  ;
  
#line 3155 
  if (crule->n_patterns > i) 
#line 3157 
                             goto ldv_62052; else 
#line 3160 
                                                  goto ldv_62054;
  ldv_62054: 
#line 3161 
  ;
  
#line 3193 
  if ((unsigned int)mrule->pkt_type == 0U) {
    
#line 3194 
    if (((priv->adapter)->debug_mask & 4U) != 0U) {
      
#line 3194 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 3194 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"Packet type can not be determined\n"); else ;
    }
    else ;
    
#line 3196 
    __retres = -95;
    
#line 3196 
    goto return_label;
  }
  else ;
  
#line 3199 
  __retres = 0;
  return_label: 
#line 3199 
                return __retres;
}


#line 3202  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfg80211.c"
static int mwifiex_cfg80211_set_coalesce(struct wiphy *wiphy, struct cfg80211_coalesce *coalesce)
{
  int __retres;
  int i;
  int ret;
  struct mwifiex_ds_coalesce_cfg coalesce_cfg;
  int tmp_2;
  
#line 3205 
  struct mwifiex_adapter *adapter = mwifiex_cfg80211_get_adapter(wiphy);
  
#line 3208 
  struct mwifiex_private *priv = mwifiex_get_priv_3(adapter,(enum mwifiex_bss_role)MWIFIEX_BSS_ROLE_STA);
  
#line 3211 
  memset((void *)(& coalesce_cfg),0,290UL);
  
#line 3212 
  if (coalesce == (struct cfg80211_coalesce *)0) {
    int tmp_1;
    
#line 3213 
    if ((adapter->debug_mask & 536870912U) != 0U) {
      
#line 3213 
      if (adapter->dev != (struct device *)0) 
#line 3213 
                                              _dev_info((struct device const *)adapter->dev,"Disable coalesce and reset all previous rules\n"); else ;
    }
    else ;
    
#line 3215 
    tmp_1 = mwifiex_send_cmd(priv,(unsigned short)266,(unsigned short)1,0U,(void *)(& coalesce_cfg),(_Bool)1);
    
#line 3215 
    __retres = tmp_1;
    
#line 3215 
    goto return_label;
  }
  else ;
  
#line 3220 
  coalesce_cfg.num_of_rules = (unsigned short)coalesce->n_rules;
  
#line 3221 
  i = 0;
  
#line 3221 
  goto ldv_62065;
  ldv_62064: 
#line 3222 
  ;
  
#line 3222 
  ret = mwifiex_fill_coalesce_rule_info(priv,coalesce->rules + i,& coalesce_cfg.rule[i]);
  
#line 3224 
  if (ret != 0) {
    
#line 3225 
    if ((adapter->debug_mask & 4U) != 0U) {
      
#line 3225 
      if (adapter->dev != (struct device *)0) 
#line 3225 
                                              _dev_info((struct device const *)adapter->dev,"Recheck the patterns provided for rule %d\n",i + 1); else ;
    }
    else ;
    
#line 3228 
    __retres = ret;
    
#line 3228 
    goto return_label;
  }
  else ;
  
#line 3221 
  i += 1;
  ldv_62065: 
#line 3222 
  ;
  
#line 3221 
  if (coalesce->n_rules > i) 
#line 3223 
                             goto ldv_62064; else 
#line 3226 
                                                  goto ldv_62066;
  ldv_62066: 
#line 3227 
  ;
  
#line 3232 
  tmp_2 = mwifiex_send_cmd(priv,(unsigned short)266,(unsigned short)1,0U,(void *)(& coalesce_cfg),(_Bool)1);
  
#line 3232 
  __retres = tmp_2;
  return_label: 
#line 3232 
                return __retres;
}


#line 3240  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfg80211.c"
static int mwifiex_cfg80211_tdls_mgmt(struct wiphy *wiphy, struct net_device *dev, u8 const *peer, u8 action_code, u8 dialog_token, u16 status_code, u32 peer_capability, bool initiator, u8 const *extra_ies, size_t extra_ies_len)
{
  int __retres;
  int ret;
  
#line 3246 
  struct mwifiex_private *priv = mwifiex_netdev_get_priv(dev);
  
#line 3249 
  if ((wiphy->flags & 32768U) == 0U) {
    
#line 3250 
    __retres = -524;
    
#line 3250 
    goto return_label;
  }
  else ;
  
#line 3253 
  if ((unsigned int)priv->bss_type != 0U || (unsigned int)priv->media_connected == 0U) {
    
#line 3254 
    __retres = -524;
    
#line 3254 
    goto return_label;
  }
  else ;
  
#line 3256 
  switch ((int)action_code) {
    case 0: 
#line 3257 
    ;
    
#line 3258 
    if (((priv->adapter)->debug_mask & 1U) != 0U) {
      
#line 3258 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 3258 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"Send TDLS Setup Request to %pM status_code=%d\n",peer,(int)status_code); else ;
    }
    else ;
    
#line 3261 
    mwifiex_add_auto_tdls_peer(priv,peer);
    
#line 3262 
    ret = mwifiex_send_tdls_data_frame(priv,peer,(unsigned char)((int)action_code),(unsigned char)((int)dialog_token),(unsigned short)((int)status_code),extra_ies,extra_ies_len);
    
#line 3265 
    goto ldv_62082;
    case 1: 
#line 3266 
    ;
    
#line 3267 
    mwifiex_add_auto_tdls_peer(priv,peer);
    
#line 3268 
    if (((priv->adapter)->debug_mask & 1U) != 0U) {
      
#line 3268 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 3268 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"Send TDLS Setup Response to %pM status_code=%d\n",peer,(int)status_code); else ;
    }
    else ;
    
#line 3271 
    ret = mwifiex_send_tdls_data_frame(priv,peer,(unsigned char)((int)action_code),(unsigned char)((int)dialog_token),(unsigned short)((int)status_code),extra_ies,extra_ies_len);
    
#line 3274 
    goto ldv_62082;
    case 2: 
#line 3275 
    ;
    
#line 3276 
    if (((priv->adapter)->debug_mask & 1U) != 0U) {
      
#line 3276 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 3276 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"Send TDLS Confirm to %pM status_code=%d\n",peer,(int)status_code); else ;
    }
    else ;
    
#line 3279 
    ret = mwifiex_send_tdls_data_frame(priv,peer,(unsigned char)((int)action_code),(unsigned char)((int)dialog_token),(unsigned short)((int)status_code),extra_ies,extra_ies_len);
    
#line 3282 
    goto ldv_62082;
    case 3: 
#line 3283 
    ;
    
#line 3284 
    if (((priv->adapter)->debug_mask & 1U) != 0U) {
      
#line 3284 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 3284 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"Send TDLS Tear down to %pM\n",peer); else ;
    }
    else ;
    
#line 3286 
    ret = mwifiex_send_tdls_data_frame(priv,peer,(unsigned char)((int)action_code),(unsigned char)((int)dialog_token),(unsigned short)((int)status_code),extra_ies,extra_ies_len);
    
#line 3289 
    goto ldv_62082;
    case 10: 
#line 3290 
    ;
    
#line 3291 
    if (((priv->adapter)->debug_mask & 1U) != 0U) {
      
#line 3291 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 3291 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"Send TDLS Discovery Request to %pM\n",peer); else ;
    }
    else ;
    
#line 3293 
    ret = mwifiex_send_tdls_data_frame(priv,peer,(unsigned char)((int)action_code),(unsigned char)((int)dialog_token),(unsigned short)((int)status_code),extra_ies,extra_ies_len);
    
#line 3296 
    goto ldv_62082;
    case 14: 
#line 3297 
    ;
    
#line 3298 
    if (((priv->adapter)->debug_mask & 1U) != 0U) {
      
#line 3298 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 3298 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"Send TDLS Discovery Response to %pM\n",peer); else ;
    }
    else ;
    
#line 3300 
    ret = mwifiex_send_tdls_action_frame(priv,peer,(unsigned char)((int)action_code),(unsigned char)((int)dialog_token),(unsigned short)((int)status_code),extra_ies,extra_ies_len);
    
#line 3303 
    goto ldv_62082;
    default: 
#line 3304 
    ;
    
#line 3305 
    if (((priv->adapter)->debug_mask & 4U) != 0U) {
      
#line 3305 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 3305 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"Unknown TDLS mgmt/action frame %pM\n",peer); else ;
    }
    else ;
    
#line 3307 
    ret = -22;
    
#line 3308 
    goto ldv_62082;
  }
  ldv_62082: 
#line 3311 
  ;
  
#line 3311 
  __retres = ret;
  return_label: 
#line 3311 
                return __retres;
}


#line 3315  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfg80211.c"
static int mwifiex_cfg80211_tdls_oper(struct wiphy *wiphy, struct net_device *dev, u8 const *peer, enum nl80211_tdls_operation action)
{
  int __retres;
  int tmp_0;
  
#line 3318 
  struct mwifiex_private *priv = mwifiex_netdev_get_priv(dev);
  
#line 3320 
  if ((wiphy->flags & 32768U) == 0U || (wiphy->flags & 65536U) == 0U) {
    
#line 3322 
    __retres = -524;
    
#line 3322 
    goto return_label;
  }
  else ;
  
#line 3325 
  if ((unsigned int)priv->bss_type != 0U || (unsigned int)priv->media_connected == 0U) {
    
#line 3326 
    __retres = -524;
    
#line 3326 
    goto return_label;
  }
  else ;
  
#line 3328 
  if (((priv->adapter)->debug_mask & 1U) != 0U) {
    
#line 3328 
    if ((priv->adapter)->dev != (struct device *)0) 
#line 3328 
                                                    _dev_info((struct device const *)(priv->adapter)->dev,"TDLS peer=%pM, oper=%d\n",peer,(unsigned int)action); else ;
  }
  else ;
  
#line 3331 
  switch ((unsigned int)action) {
    case (unsigned int)3: 
#line 3332 
    ;
    
#line 3333 
    action = NL80211_TDLS_SETUP;
    
#line 3334 
    goto ldv_62097;
    case (unsigned int)4: 
#line 3335 
    ;
    
#line 3336 
    action = NL80211_TDLS_DISCOVERY_REQ;
    
#line 3337 
    goto ldv_62097;
    case (unsigned int)2: 
#line 3338 
    ;
    
#line 3340 
    if (((priv->adapter)->debug_mask & 4U) != 0U) {
      
#line 3340 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 3340 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"tdls_oper: teardown from driver not supported\n"); else ;
    }
    else ;
    
#line 3342 
    __retres = -22;
    
#line 3342 
    goto return_label;
    case (unsigned int)1: 
#line 3343 
    ;
    
#line 3345 
    if (((priv->adapter)->debug_mask & 4U) != 0U) {
      
#line 3345 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 3345 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"tdls_oper: setup from driver not supported\n"); else ;
    }
    else ;
    
#line 3347 
    __retres = -22;
    
#line 3347 
    goto return_label;
    case (unsigned int)0: 
#line 3348 
    ;
    
#line 3350 
    if (((priv->adapter)->debug_mask & 4U) != 0U) {
      
#line 3350 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 3350 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"tdls_oper: discovery from driver not supported\n"); else ;
    }
    else ;
    
#line 3352 
    __retres = -22;
    
#line 3352 
    goto return_label;
    default: 
#line 3353 
    ;
    
#line 3354 
    if (((priv->adapter)->debug_mask & 4U) != 0U) {
      
#line 3354 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 3354 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"tdls_oper: operation not supported\n"); else ;
    }
    else ;
    
#line 3356 
    __retres = -524;
    
#line 3356 
    goto return_label;
  }
  ldv_62097: 
#line 3359 
  ;
  
#line 3359 
  tmp_0 = mwifiex_tdls_oper(priv,peer,(unsigned char)((int)((unsigned char)action)));
  
#line 3359 
  __retres = tmp_0;
  return_label: 
#line 3359 
                return __retres;
}


#line 3363  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfg80211.c"
static int mwifiex_cfg80211_add_station(struct wiphy *wiphy, struct net_device *dev, u8 const *mac, struct station_parameters *params)
{
  int __retres;
  int tmp_0;
  
#line 3366 
  struct mwifiex_private *priv = mwifiex_netdev_get_priv(dev);
  
#line 3368 
  if (((unsigned long)params->sta_flags_set & 64UL) == 0UL) {
    
#line 3369 
    __retres = -524;
    
#line 3369 
    goto return_label;
  }
  else ;
  
#line 3372 
  if ((unsigned int)priv->bss_type != 0U || (unsigned int)priv->media_connected == 0U) {
    
#line 3373 
    __retres = -524;
    
#line 3373 
    goto return_label;
  }
  else ;
  
#line 3375 
  tmp_0 = mwifiex_tdls_oper(priv,mac,(unsigned char)2);
  
#line 3375 
  __retres = tmp_0;
  return_label: 
#line 3375 
                return __retres;
}


#line 3379  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfg80211.c"
static int mwifiex_cfg80211_channel_switch(struct wiphy *wiphy, struct net_device *dev, struct cfg80211_csa_settings *params)
{
  int __retres;
  struct ieee_types_header *chsw_ie;
  struct ieee80211_channel_sw_ie *channel_sw;
  int chsw_msec;
  bool tmp_0;
  int tmp_3;
  int tmp_4;
  int tmp_6;
  unsigned long tmp_7;
  
#line 3385 
  struct mwifiex_private *priv = mwifiex_netdev_get_priv(dev);
  
#line 3387 
  if ((priv->adapter)->scan_processing != 0U) {
    
#line 3388 
    if (((priv->adapter)->debug_mask & 4U) != 0U) {
      
#line 3388 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 3388 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"radar detection: scan in process...\n"); else ;
    }
    else ;
    
#line 3390 
    __retres = -16;
    
#line 3390 
    goto return_label;
  }
  else ;
  
#line 3393 
  if ((int)priv->wdev.cac_started != 0) {
    
#line 3394 
    __retres = -16;
    
#line 3394 
    goto return_label;
  }
  else ;
  
#line 3396 
  tmp_0 = cfg80211_chandef_identical((struct cfg80211_chan_def const *)(& params->chandef),(struct cfg80211_chan_def const *)(& priv->dfs_chandef));
  
#line 3396 
  if ((int)tmp_0 != 0) {
    
#line 3398 
    __retres = -22;
    
#line 3398 
    goto return_label;
  }
  else ;
  
#line 3400 
  chsw_ie = (struct ieee_types_header *)cfg80211_find_ie((unsigned char)37,params->beacon_csa.tail,(int)params->beacon_csa.tail_len);
  
#line 3403 
  if (chsw_ie == (struct ieee_types_header *)0) {
    
#line 3404 
    if (((priv->adapter)->debug_mask & 4U) != 0U) {
      
#line 3404 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 3404 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"Could not parse channel switch announcement IE\n"); else ;
    }
    else ;
    
#line 3406 
    __retres = -22;
    
#line 3406 
    goto return_label;
  }
  else ;
  
#line 3409 
  channel_sw = (struct ieee80211_channel_sw_ie *)(chsw_ie + 1U);
  
#line 3410 
  if ((unsigned int)channel_sw->mode != 0U) {
    bool tmp_2;
    
#line 3411 
    tmp_2 = netif_carrier_ok((struct net_device const *)priv->netdev);
    
#line 3411 
    if ((int)tmp_2 != 0) 
#line 3412 
                         netif_carrier_off(priv->netdev); else ;
    
#line 3413 
    mwifiex_stop_net_dev_queue(priv->netdev,priv->adapter);
  }
  else ;
  
#line 3416 
  tmp_3 = mwifiex_del_mgmt_ies(priv);
  
#line 3416 
  if (tmp_3 != 0) {
    
#line 3417 
    if (((priv->adapter)->debug_mask & 4U) != 0U) {
      
#line 3417 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 3417 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"Failed to delete mgmt IEs!\n"); else ;
    }
    else ;
  }
  else ;
  
#line 3420 
  tmp_4 = mwifiex_set_mgmt_ies(priv,& params->beacon_csa);
  
#line 3420 
  if (tmp_4 != 0) {
    
#line 3421 
    if (((priv->adapter)->debug_mask & 4U) != 0U) {
      
#line 3421 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 3421 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"%s: setting mgmt ies failed\n","mwifiex_cfg80211_channel_switch"); else ;
    }
    else ;
    
#line 3423 
    __retres = -14;
    
#line 3423 
    goto return_label;
  }
  else ;
  
#line 3426 
  memcpy((void *)(& priv->dfs_chandef),(void const *)(& params->chandef),24UL);
  
#line 3427 
  memcpy((void *)(& priv->beacon_after),(void const *)(& params->beacon_after),96UL);
  {
    int tmp_5;
    
#line 3430 
    int _max1 = (int)channel_sw->count * (int)priv->bss_cfg.beacon_period;
    
#line 3430 
    int _max2 = 100;
    
#line 3430 
    if (_max1 > _max2) 
#line 3430 
                       tmp_5 = _max1; else 
#line 3430 
                                           tmp_5 = _max2;
    
#line 3430 
    tmp_6 = tmp_5;
  }
  
#line 3430 
  chsw_msec = tmp_6;
  
#line 3431 
  tmp_7 = msecs_to_jiffies((unsigned int)chsw_msec);
  
#line 3431 
  ;
  
#line 3431 
  ;
  
#line 3431 
  ldv_queue_delayed_work_92(priv->dfs_chan_sw_workqueue,& priv->dfs_chan_sw_work,tmp_7);
  
#line 3433 
  __retres = 0;
  return_label: 
#line 3433 
                return __retres;
}


#line 3436  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfg80211.c"
static int mwifiex_cfg80211_get_channel(struct wiphy *wiphy, struct wireless_dev *wdev, struct cfg80211_chan_def *chandef)
{
  struct mwifiex_bssdescriptor *curr_bss;
  struct ieee80211_channel *chan;
  u8 second_chan_offset;
  enum nl80211_channel_type chan_type;
  enum ieee80211_band band;
  int freq;
  
#line 3440 
  struct mwifiex_private *priv = mwifiex_netdev_get_priv(wdev->netdev);
  
#line 3447 
  int ret = -61;
  
#line 3449 
  if (((unsigned long)priv->bss_role & 1UL) != 0UL) {
    bool tmp_2;
    
#line 3449 
    tmp_2 = cfg80211_chandef_valid((struct cfg80211_chan_def const *)(& priv->bss_chandef));
    
#line 3449 
    if ((int)tmp_2 != 0) {
      
#line 3451 
      *chandef = priv->bss_chandef;
      
#line 3452 
      ret = 0;
    }
    else 
#line 3449 
         goto _LAND;
  }
  else {
    _LAND: 
#line 3453 
    ;
    
#line 3453 
    if ((unsigned int)priv->media_connected != 0U) {
      u8 tmp_0;
      
#line 3454 
      curr_bss = & priv->curr_bss_params.bss_descriptor;
      
#line 3455 
      tmp_0 = mwifiex_band_to_radio_type((unsigned char)((int)priv->curr_bss_params.band));
      
#line 3455 
      band = (enum ieee80211_band)tmp_0;
      
#line 3456 
      freq = ieee80211_channel_to_frequency((int)curr_bss->channel,band);
      
#line 3457 
      chan = ieee80211_get_channel(wiphy,freq);
      
#line 3459 
      if (curr_bss->bcn_ht_oper != (struct ieee80211_ht_operation *)0) {
        u8 tmp_1;
        
#line 3460 
        second_chan_offset = (unsigned char)((unsigned int)(curr_bss->bcn_ht_oper)->ht_param & 3U);
        
#line 3462 
        tmp_1 = mwifiex_sec_chan_offset_to_chan_type((unsigned char)((int)second_chan_offset));
        
#line 3462 
        chan_type = (enum nl80211_channel_type)tmp_1;
        
#line 3464 
        cfg80211_chandef_create(chandef,chan,chan_type);
      }
      else 
#line 3466 
           cfg80211_chandef_create(chandef,chan,(enum nl80211_channel_type)NL80211_CHAN_NO_HT);
      
#line 3469 
      ret = 0;
    }
    else ;
  }
  
#line 3472 
  return ret;
}


#line 3476  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfg80211.c"
static int mwifiex_cfg80211_start_radar_detection(struct wiphy *wiphy, struct net_device *dev, struct cfg80211_chan_def *chandef, u32 cac_time_ms)
{
  int __retres;
  struct mwifiex_radar_params radar_params;
  int tmp_1;
  int tmp_2;
  unsigned long tmp_3;
  
#line 3481 
  struct mwifiex_private *priv = mwifiex_netdev_get_priv(dev);
  
#line 3484 
  if ((priv->adapter)->scan_processing != 0U) {
    
#line 3485 
    if (((priv->adapter)->debug_mask & 4U) != 0U) {
      
#line 3485 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 3485 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"radar detection: scan already in process...\n"); else ;
    }
    else ;
    
#line 3487 
    __retres = -16;
    
#line 3487 
    goto return_label;
  }
  else ;
  
#line 3490 
  tmp_1 = mwifiex_is_11h_active(priv);
  
#line 3490 
  if (tmp_1 == 0) {
    int tmp_0;
    
#line 3491 
    if (((priv->adapter)->debug_mask & 1073741824U) != 0U) {
      
#line 3491 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 3491 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"Enable 11h extensions in FW\n"); else ;
    }
    else ;
    
#line 3493 
    tmp_0 = mwifiex_11h_activate(priv,(_Bool)1);
    
#line 3493 
    if (tmp_0 != 0) {
      
#line 3494 
      if (((priv->adapter)->debug_mask & 4U) != 0U) {
        
#line 3494 
        if ((priv->adapter)->dev != (struct device *)0) 
#line 3494 
                                                        _dev_info((struct device const *)(priv->adapter)->dev,"Failed to activate 11h extensions!!"); else ;
      }
      else ;
      
#line 3496 
      __retres = -1;
      
#line 3496 
      goto return_label;
    }
    else ;
    
#line 3498 
    priv->state_11h.is_11h_active = (_Bool)1;
  }
  else ;
  
#line 3501 
  memset((void *)(& radar_params),0,12UL);
  
#line 3502 
  radar_params.chandef = chandef;
  
#line 3503 
  radar_params.cac_time_ms = cac_time_ms;
  
#line 3505 
  memcpy((void *)(& priv->dfs_chandef),(void const *)chandef,24UL);
  
#line 3507 
  tmp_2 = mwifiex_send_cmd(priv,(unsigned short)221,(unsigned short)1,0U,(void *)(& radar_params),(_Bool)1);
  
#line 3507 
  if (tmp_2 != 0) {
    
#line 3509 
    __retres = -1;
    
#line 3509 
    goto return_label;
  }
  else ;
  
#line 3511 
  tmp_3 = msecs_to_jiffies(cac_time_ms);
  
#line 3511 
  ;
  
#line 3511 
  ;
  
#line 3511 
  ldv_queue_delayed_work_93(priv->dfs_cac_workqueue,& priv->dfs_cac_work,tmp_3);
  
#line 3513 
  __retres = 0;
  return_label: 
#line 3513 
                return __retres;
}


#line 3517  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfg80211.c"
static int mwifiex_cfg80211_change_station(struct wiphy *wiphy, struct net_device *dev, u8 const *mac, struct station_parameters *params)
{
  int __retres;
  int ret;
  
#line 3522 
  struct mwifiex_private *priv = mwifiex_netdev_get_priv(dev);
  
#line 3525 
  if (((unsigned long)params->sta_flags_set & 64UL) == 0UL) {
    
#line 3526 
    __retres = -524;
    
#line 3526 
    goto return_label;
  }
  else ;
  
#line 3529 
  if ((unsigned int)priv->bss_type != 0U || (unsigned int)priv->media_connected == 0U) {
    
#line 3530 
    __retres = -524;
    
#line 3530 
    goto return_label;
  }
  else ;
  
#line 3532 
  priv->sta_params = params;
  
#line 3534 
  ret = mwifiex_tdls_oper(priv,mac,(unsigned char)3);
  
#line 3535 
  priv->sta_params = (struct station_parameters *)0;
  
#line 3537 
  __retres = ret;
  return_label: 
#line 3537 
                return __retres;
}


#line 3541  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfg80211.c"
static struct cfg80211_ops mwifiex_cfg80211_ops = {.suspend = & mwifiex_cfg80211_suspend, .resume = & mwifiex_cfg80211_resume, .set_wakeup = & mwifiex_cfg80211_set_wakeup, .add_virtual_intf = & mwifiex_add_virtual_intf, .del_virtual_intf = & mwifiex_del_virtual_intf, .change_virtual_intf = & mwifiex_cfg80211_change_virtual_intf, .add_key = & mwifiex_cfg80211_add_key, .get_key = (int (*)(struct wiphy *, struct net_device *, u8 , bool , u8 const *, void *, void (*)(void *, struct key_params *)))0, .del_key = & mwifiex_cfg80211_del_key, .set_default_key = & mwifiex_cfg80211_set_default_key, .set_default_mgmt_key = (int (*)(struct wiphy *, struct net_device *, u8 ))0, .start_ap = & mwifiex_cfg80211_start_ap, .change_beacon = & mwifiex_cfg80211_change_beacon, .stop_ap = & mwifiex_cfg80211_stop_ap, .add_station = & mwifiex_cfg80211_add_station, .del_station = & mwifiex_cfg80211_del_station, .change_station = & mwifiex_cfg80211_change_station, .get_station = & mwifiex_cfg80211_get_station, .dump_station = & mwifiex_cfg80211_dump_station, .add_mpath = (int (*)(struct wiphy *, struct net_device *, u8 const *, u8 const *))0, .del_mpath = (int (*)(struct wiphy *, struct net_device *, u8 const *))0, .change_mpath = (int (*)(struct wiphy *, struct net_device *, u8 const *, u8 const *))0, .get_mpath = (int (*)(struct wiphy *, struct net_device *, u8 *, u8 *, struct mpath_info *))0, .dump_mpath = (int (*)(struct wiphy *, struct net_device *, int , u8 *, u8 *, struct mpath_info *))0, .get_mpp = (int (*)(struct wiphy *, struct net_device *, u8 *, u8 *, struct mpath_info *))0, .dump_mpp = (int (*)(struct wiphy *, struct net_device *, int , u8 *, u8 *, struct mpath_info *))0, .get_mesh_config = (int (*)(struct wiphy *, struct net_device *, struct mesh_config *))0, .update_mesh_config = (int (*)(struct wiphy *, struct net_device *, u32 , struct mesh_config const *))0, .join_mesh = (int (*)(struct wiphy *, struct net_device *, struct mesh_config const *, struct mesh_setup const *))0, .leave_mesh = (int (*)(struct wiphy *, struct net_device *))0, .join_ocb = (int (*)(struct wiphy *, struct net_device *, struct ocb_setup *))0, .leave_ocb = (int (*)(struct wiphy *, struct net_device *))0, .change_bss = (int (*)(struct wiphy *, struct net_device *, struct bss_parameters *))0, .set_txq_params = (int (*)(struct wiphy *, struct net_device *, struct ieee80211_txq_params *))0, .libertas_set_mesh_channel = (int (*)(struct wiphy *, struct net_device *, struct ieee80211_channel *))0, .set_monitor_channel = (int (*)(struct wiphy *, struct cfg80211_chan_def *))0, .scan = & mwifiex_cfg80211_scan, .auth = (int (*)(struct wiphy *, struct net_device *, struct cfg80211_auth_request *))0, .assoc = (int (*)(struct wiphy *, struct net_device *, struct cfg80211_assoc_request *))0, .deauth = (int (*)(struct wiphy *, struct net_device *, struct cfg80211_deauth_request *))0, .disassoc = (int (*)(struct wiphy *, struct net_device *, struct cfg80211_disassoc_request *))0, .connect = & mwifiex_cfg80211_connect, .disconnect = & mwifiex_cfg80211_disconnect, .join_ibss = & mwifiex_cfg80211_join_ibss, .leave_ibss = & mwifiex_cfg80211_leave_ibss, .set_mcast_rate = (int (*)(struct wiphy *, struct net_device *, int *))0, .set_wiphy_params = & mwifiex_cfg80211_set_wiphy_params, .set_tx_power = & mwifiex_cfg80211_set_tx_power, .get_tx_power = (int (*)(struct wiphy *, struct wireless_dev *, int *))0, .set_wds_peer = (int (*)(struct wiphy *, struct net_device *, u8 const *))0, .rfkill_poll = (void (*)(struct wiphy *))0, .testmode_cmd = (int (*)(struct wiphy *, struct wireless_dev *, void *, int ))0, .testmode_dump = (int (*)(struct wiphy *, struct sk_buff *, struct netlink_callback *, void *, int ))0, .set_bitrate_mask = & mwifiex_cfg80211_set_bitrate_mask, .dump_survey = & mwifiex_cfg80211_dump_survey, .set_pmksa = (int (*)(struct wiphy *, struct net_device *, struct cfg80211_pmksa *))0, .del_pmksa = (int (*)(struct wiphy *, struct net_device *, struct cfg80211_pmksa *))0, .flush_pmksa = (int (*)(struct wiphy *, struct net_device *))0, .remain_on_channel = & mwifiex_cfg80211_remain_on_channel, .cancel_remain_on_channel = & mwifiex_cfg80211_cancel_remain_on_channel, .mgmt_tx = & mwifiex_cfg80211_mgmt_tx, .mgmt_tx_cancel_wait = (int (*)(struct wiphy *, struct wireless_dev *, u64 ))0, .set_power_mgmt = & mwifiex_cfg80211_set_power_mgmt, .set_cqm_rssi_config = & mwifiex_cfg80211_set_cqm_rssi_config, .set_cqm_txe_config = (int (*)(struct wiphy *, struct net_device *, u32 , u32 , u32 ))0, .mgmt_frame_register = & mwifiex_cfg80211_mgmt_frame_register, .set_antenna = & mwifiex_cfg80211_set_antenna, .get_antenna = (int (*)(struct wiphy *, u32 *, u32 *))0, .sched_scan_start = (int (*)(struct wiphy *, struct net_device *, struct cfg80211_sched_scan_request *))0, .sched_scan_stop = (int (*)(struct wiphy *, struct net_device *))0, .set_rekey_data = (int (*)(struct wiphy *, struct net_device *, struct cfg80211_gtk_rekey_data *))0, .tdls_mgmt = & mwifiex_cfg80211_tdls_mgmt, .tdls_oper = & mwifiex_cfg80211_tdls_oper, .probe_client = (int (*)(struct wiphy *, struct net_device *, u8 const *, u64 *))0, .set_noack_map = (int (*)(struct wiphy *, struct net_device *, u16 ))0, .get_channel = & mwifiex_cfg80211_get_channel, .start_p2p_device = (int (*)(struct wiphy *, struct wireless_dev *))0, .stop_p2p_device = (void (*)(struct wiphy *, struct wireless_dev *))0, .set_mac_acl = (int (*)(struct wiphy *, struct net_device *, struct cfg80211_acl_data const *))0, .start_radar_detection = & mwifiex_cfg80211_start_radar_detection, .update_ft_ies = (int (*)(struct wiphy *, struct net_device *, struct cfg80211_update_ft_ies_params *))0, .crit_proto_start = (int (*)(struct wiphy *, struct wireless_dev *, enum nl80211_crit_proto_id , u16 ))0, .crit_proto_stop = (void (*)(struct wiphy *, struct wireless_dev *))0, .set_coalesce = & mwifiex_cfg80211_set_coalesce, .channel_switch = & mwifiex_cfg80211_channel_switch, .set_qos_map = (int (*)(struct wiphy *, struct net_device *, struct cfg80211_qos_map *))0, .set_ap_chanwidth = (int (*)(struct wiphy *, struct net_device *, struct cfg80211_chan_def *))0, .add_tx_ts = (int (*)(struct wiphy *, struct net_device *, u8 , u8 const *, u8 , u16 ))0, .del_tx_ts = (int (*)(struct wiphy *, struct net_device *, u8 , u8 const *))0, .tdls_channel_switch = (int (*)(struct wiphy *, struct net_device *, u8 const *, u8 , struct cfg80211_chan_def *))0, .tdls_cancel_channel_switch = (void (*)(struct wiphy *, struct net_device *, u8 const *))0};

#line 3586  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfg80211.c"
static struct wiphy_wowlan_support const mwifiex_wowlan_support = {.flags = 6U, .n_patterns = 10, .pattern_max_len = 20, .pattern_min_len = 1, .max_pkt_offset = 100, .max_nd_match_sets = 0, .tcp = (struct wiphy_wowlan_tcp_support const *)0};

#line 3595  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfg80211.c"
static bool mwifiex_is_valid_alpha2(char const *alpha2)
{
  bool __retres;
  
#line 3597 
  if (alpha2 == (char const *)0) {
    
#line 3598 
    __retres = (_Bool)0;
    
#line 3598 
    goto return_label;
  }
  else {
    size_t tmp;
    
#line 3597 
    tmp = strlen(alpha2);
    
#line 3597 
    if (tmp != 2UL) {
      
#line 3598 
      __retres = (_Bool)0;
      
#line 3598 
      goto return_label;
    }
    else ;
  }
  
#line 3600 
  if (((int)_ctype[(int)((unsigned char)*alpha2)] & 3) != 0 && ((int)_ctype[(int)((unsigned char)*(alpha2 + 1U))] & 3) != 0) {
    
#line 3601 
    __retres = (_Bool)1;
    
#line 3601 
    goto return_label;
  }
  else ;
  
#line 3603 
  __retres = (_Bool)0;
  return_label: 
#line 3603 
                return __retres;
}


#line 3606  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfg80211.c"
static struct wiphy_coalesce_support const mwifiex_coalesce_support = {.n_rules = 8, .max_delay = 100, .n_patterns = 4, .pattern_max_len = 20, .pattern_min_len = 1, .max_pkt_offset = 100};

#line 3615  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfg80211.c"
int mwifiex_init_channel_scan_gap(struct mwifiex_adapter *adapter)
{
  int __retres;
  u32 n_channels_bg;
  u32 tmp_0;
  
#line 3617 
  u32 n_channels_a = 0U;
  
#line 3619 
  n_channels_bg = (unsigned int)mwifiex_band_2ghz.n_channels;
  
#line 3621 
  if (((int)adapter->config_bands & 4) != 0) 
#line 3622 
                                             n_channels_a = (unsigned int)mwifiex_band_5ghz.n_channels; else ;
  {
    u32 tmp;
    
#line 3624 
    u32 __max1 = n_channels_bg;
    
#line 3624 
    u32 __max2 = n_channels_a;
    
#line 3624 
    if (__max1 > __max2) 
#line 3624 
                         tmp = __max1; else 
#line 3624 
                                            tmp = __max2;
    
#line 3624 
    tmp_0 = tmp;
  }
  
#line 3624 
  adapter->num_in_chan_stats = tmp_0;
  
#line 3625 
  adapter->chan_stats = (struct mwifiex_chan_stats *)vmalloc((unsigned long)adapter->num_in_chan_stats * 10UL);
  
#line 3628 
  if (adapter->chan_stats == (struct mwifiex_chan_stats *)0) {
    
#line 3629 
    __retres = -12;
    
#line 3629 
    goto return_label;
  }
  else ;
  
#line 3631 
  __retres = 0;
  return_label: 
#line 3631 
                return __retres;
}


#line 3642  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/cfg80211.c"
int mwifiex_register_cfg80211(struct mwifiex_adapter *adapter)
{
  int __retres;
  int ret;
  void *wdev_priv_0;
  struct wiphy *wiphy;
  u8 *country_code;
  u32 thr;
  u32 retry;
  
#line 3647 
  struct mwifiex_private *priv = adapter->priv[0];
  
#line 3652 
  wiphy = wiphy_new((struct cfg80211_ops const *)(& mwifiex_cfg80211_ops),8);
  
#line 3654 
  if (wiphy == (struct wiphy *)0) {
    
#line 3655 
    if ((adapter->debug_mask & 4U) != 0U) {
      
#line 3655 
      if (adapter->dev != (struct device *)0) 
#line 3655 
                                              _dev_info((struct device const *)adapter->dev,"%s: creating new wiphy\n","mwifiex_register_cfg80211"); else ;
    }
    else ;
    
#line 3657 
    __retres = -12;
    
#line 3657 
    goto return_label;
  }
  else ;
  
#line 3659 
  wiphy->max_scan_ssids = (unsigned char)10U;
  
#line 3660 
  wiphy->max_scan_ie_len = (unsigned short)256U;
  
#line 3661 
  wiphy->mgmt_stypes = (struct ieee80211_txrx_stypes const *)(& mwifiex_mgmt_stypes);
  
#line 3662 
  wiphy->max_remain_on_channel_duration = (unsigned short)5000U;
  
#line 3663 
  wiphy->interface_modes = (unsigned short)782U;
  
#line 3669 
  wiphy->bands[0] = & mwifiex_band_2ghz;
  
#line 3670 
  if (((int)adapter->config_bands & 4) != 0) 
#line 3671 
                                             wiphy->bands[1] = & mwifiex_band_5ghz; else 
                                                                    
#line 3673 
                                                                    wiphy->bands[1] = (struct ieee80211_supported_band *)0;
  
#line 3675 
  wiphy->iface_combinations = & mwifiex_iface_comb_ap_sta;
  
#line 3676 
  wiphy->n_iface_combinations = 1;
  
#line 3679 
  wiphy->cipher_suites = (u32 const *)(& mwifiex_cipher_suites);
  
#line 3680 
  wiphy->n_cipher_suites = 5;
  
#line 3682 
  ether_addr_copy((u8 *)(& wiphy->perm_addr),(u8 const *)(& adapter->perm_addr));
  
#line 3683 
  wiphy->signal_type = CFG80211_SIGNAL_TYPE_MBM;
  
#line 3684 
  wiphy->flags |= 11157520U;
  
#line 3691 
  if (((unsigned long)adapter->fw_cap_info & 16384UL) != 0UL) 
#line 3692 
                                                              wiphy->flags |= 98304U; else ;
  
#line 3696 
  wiphy->wowlan = & mwifiex_wowlan_support;
  
#line 3699 
  wiphy->coalesce = & mwifiex_coalesce_support;
  
#line 3701 
  wiphy->probe_resp_offload = 7U;
  
#line 3705 
  wiphy->available_antennas_tx = (unsigned int)(1UL << (int)adapter->number_of_antenna) + 4294967295U;
  
#line 3706 
  wiphy->available_antennas_rx = (unsigned int)(1UL << (int)adapter->number_of_antenna) + 4294967295U;
  
#line 3708 
  wiphy->features |= 1030U;
  
#line 3712 
  if ((unsigned int)adapter->fw_api_ver == 15U) 
#line 3713 
                                                wiphy->features |= 1U; else ;
  
#line 3716 
  wiphy->bss_priv_size = 16;
  
#line 3718 
  wiphy->reg_notifier = & mwifiex_reg_notifier;
  
#line 3721 
  wdev_priv_0 = wiphy_priv(wiphy);
  
#line 3722 
  *((unsigned long *)wdev_priv_0) = (unsigned long)adapter;
  
#line 3724 
  set_wiphy_dev(wiphy,(priv->adapter)->dev);
  
#line 3726 
  ret = wiphy_register(wiphy);
  
#line 3727 
  if (ret < 0) {
    
#line 3728 
    if ((adapter->debug_mask & 4U) != 0U) {
      
#line 3728 
      if (adapter->dev != (struct device *)0) 
#line 3728 
                                              _dev_info((struct device const *)adapter->dev,"%s: wiphy_register failed: %d\n","mwifiex_register_cfg80211",ret); else ;
    }
    else ;
    
#line 3730 
    wiphy_free(wiphy);
    
#line 3731 
    __retres = ret;
    
#line 3731 
    goto return_label;
  }
  else ;
  
#line 3734 
  if (reg_alpha2 != (char *)0) {
    bool tmp;
    
#line 3734 
    tmp = mwifiex_is_valid_alpha2((char const *)reg_alpha2);
    
#line 3734 
    if ((int)tmp != 0) {
      
#line 3735 
      if ((adapter->debug_mask & 1073741824U) != 0U) {
        
#line 3735 
        if (adapter->dev != (struct device *)0) 
#line 3735 
                                                _dev_info((struct device const *)adapter->dev,"driver hint alpha2: %2.2s\n",reg_alpha2); else ;
      }
      else ;
      
#line 3737 
      regulatory_hint(wiphy,(char const *)reg_alpha2);
    }
    else 
#line 3734 
         goto _LAND;
  }
  else {
    _LAND: {
             
#line 3739 
             country_code = mwifiex_11d_code_2_region((unsigned char)((int)((unsigned char)adapter->region_code)));
             
#line 3740 
             if (country_code != (u8 *)0U) {
               
#line 3741 
               if ((adapter->debug_mask & 536870912U) != 0U) {
                 
#line 3741 
                 if (adapter->dev != (struct device *)0) 
#line 3741 
                                                         _dev_info((struct device const *)adapter->dev,"ignoring F/W country code %2.2s\n",country_code); else ;
               }
               else ;
             }
             else ;
           }
  }
  
#line 3746 
  mwifiex_send_cmd(priv,(unsigned short)22,(unsigned short)0,8U,(void *)(& thr),(_Bool)1);
  
#line 3748 
  wiphy->frag_threshold = thr;
  
#line 3749 
  mwifiex_send_cmd(priv,(unsigned short)22,(unsigned short)0,5U,(void *)(& thr),(_Bool)1);
  
#line 3751 
  wiphy->rts_threshold = thr;
  
#line 3752 
  mwifiex_send_cmd(priv,(unsigned short)22,(unsigned short)0,6U,(void *)(& retry),(_Bool)1);
  
#line 3754 
  wiphy->retry_short = (unsigned char)retry;
  
#line 3755 
  mwifiex_send_cmd(priv,(unsigned short)22,(unsigned short)0,7U,(void *)(& retry),(_Bool)1);
  
#line 3757 
  wiphy->retry_long = (unsigned char)retry;
  
#line 3759 
  adapter->wiphy = wiphy;
  
#line 3760 
  __retres = ret;
  return_label: 
#line 3760 
                return __retres;
}


#line 58  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_cfg80211.c.aux"
_Bool ldv_emg_queue_delayed_work(struct workqueue_struct *arg0, struct delayed_work *arg1, unsigned long arg2);


#line 59 
struct net_device *ldv_emg_alloc_netdev_mqs(int arg0, char *arg1, unsigned char arg2, void (*arg3)(struct net_device *), unsigned int arg4, unsigned int arg5);


#line 62 
void ldv_emg_free_netdev(struct net_device *arg0);


#line 67  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_cfg80211.c.aux"
static void *ERR_PTR(long error)
{
  void *tmp;
  
#line 70 
  tmp = ldv_err_ptr(error);
  
#line 70 
  return tmp;
}


#line 606  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_cfg80211.c.aux"
static void *kcalloc_1(size_t n, size_t size, gfp_t flags)
{
  void *tmp;
  
#line 609 
  tmp = ldv_kcalloc(n,size,flags);
  
#line 609 
  return tmp;
}


#line 613  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_cfg80211.c.aux"
static void *kzalloc_7(size_t size, gfp_t flags)
{
  void *tmp;
  
#line 616 
  tmp = ldv_kzalloc(size,flags);
  
#line 616 
  return tmp;
}


#line 771  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_cfg80211.c.aux"
static void ldv___ldv_spin_lock_76_2(spinlock_t *ldv_func_arg1)
{
  
#line 775 
  ldv_spin_model_lock((char *)"main_proc_lock_of_mwifiex_adapter");
  
#line 777 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 778 
  return;
}


#line 781  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_cfg80211.c.aux"
static void ldv_spin_unlock_irqrestore_77_2(spinlock_t *lock, unsigned long flags)
{
  
#line 785 
  ldv_spin_model_unlock((char *)"main_proc_lock_of_mwifiex_adapter");
  
#line 787 
  spin_unlock_irqrestore_11(lock,flags);
  
#line 788 
  return;
}


#line 791  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_cfg80211.c.aux"
static void ldv_spin_unlock_irqrestore_78_0(spinlock_t *lock, unsigned long flags)
{
  
#line 795 
  ldv_spin_model_unlock((char *)"main_proc_lock_of_mwifiex_adapter");
  
#line 797 
  spin_unlock_irqrestore_11(lock,flags);
  
#line 798 
  return;
}


#line 801  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_cfg80211.c.aux"
static void ldv___ldv_spin_lock_79_0(spinlock_t *ldv_func_arg1)
{
  
#line 805 
  ldv_spin_model_lock((char *)"rx_proc_lock_of_mwifiex_adapter");
  
#line 807 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 808 
  return;
}


#line 811  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_cfg80211.c.aux"
static void ldv_spin_unlock_irqrestore_80_2(spinlock_t *lock, unsigned long flags)
{
  
#line 815 
  ldv_spin_model_unlock((char *)"rx_proc_lock_of_mwifiex_adapter");
  
#line 817 
  spin_unlock_irqrestore_11(lock,flags);
  
#line 818 
  return;
}


#line 821  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_cfg80211.c.aux"
static void ldv_spin_unlock_irqrestore_81_7(spinlock_t *lock, unsigned long flags)
{
  
#line 825 
  ldv_spin_model_unlock((char *)"rx_proc_lock_of_mwifiex_adapter");
  
#line 827 
  spin_unlock_irqrestore_11(lock,flags);
  
#line 828 
  return;
}


#line 831  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_cfg80211.c.aux"
static void ldv___ldv_spin_lock_82_7(spinlock_t *ldv_func_arg1)
{
  
#line 835 
  ldv_spin_model_lock((char *)"main_proc_lock_of_mwifiex_adapter");
  
#line 837 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 838 
  return;
}


#line 841  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_cfg80211.c.aux"
static void ldv_spin_unlock_irqrestore_83_8(spinlock_t *lock, unsigned long flags)
{
  
#line 845 
  ldv_spin_model_unlock((char *)"main_proc_lock_of_mwifiex_adapter");
  
#line 847 
  spin_unlock_irqrestore_11(lock,flags);
  
#line 848 
  return;
}


#line 851  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_cfg80211.c.aux"
static void ldv___ldv_spin_lock_84_4(spinlock_t *ldv_func_arg1)
{
  
#line 855 
  ldv_spin_model_lock((char *)"rx_proc_lock_of_mwifiex_adapter");
  
#line 857 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 858 
  return;
}


#line 861  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_cfg80211.c.aux"
static void ldv_spin_unlock_irqrestore_85_6(spinlock_t *lock, unsigned long flags)
{
  
#line 865 
  ldv_spin_model_unlock((char *)"rx_proc_lock_of_mwifiex_adapter");
  
#line 867 
  spin_unlock_irqrestore_11(lock,flags);
  
#line 868 
  return;
}


#line 871  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_cfg80211.c.aux"
static void ldv___ldv_spin_lock_86_1(spinlock_t *ldv_func_arg1)
{
  
#line 875 
  ldv_spin_model_lock((char *)"sta_list_spinlock_of_mwifiex_private");
  
#line 877 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 878 
  return;
}


#line 881  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_cfg80211.c.aux"
static void ldv_spin_unlock_irqrestore_87_2(spinlock_t *lock, unsigned long flags)
{
  
#line 885 
  ldv_spin_model_unlock((char *)"sta_list_spinlock_of_mwifiex_private");
  
#line 887 
  spin_unlock_irqrestore_11(lock,flags);
  
#line 888 
  return;
}


#line 891  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_cfg80211.c.aux"
static struct net_device *ldv_alloc_netdev_mqs_88(int ldv_func_arg1, char const *ldv_func_arg2, unsigned char ldv_func_arg3, void (*ldv_func_arg4)(struct net_device *), unsigned int ldv_func_arg5, unsigned int ldv_func_arg6)
{
  struct net_device *tmp;
  
#line 895 
  tmp = ldv_emg_alloc_netdev_mqs(ldv_func_arg1,(char *)ldv_func_arg2,(unsigned char)((int)ldv_func_arg3),ldv_func_arg4,ldv_func_arg5,ldv_func_arg6);
  
#line 895 
  return tmp;
}


#line 899  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_cfg80211.c.aux"
static void ldv_free_netdev_89(struct net_device *ldv_func_arg1)
{
  
#line 903 
  ldv_emg_free_netdev(ldv_func_arg1);
  
#line 904 
  return;
}


#line 907  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_cfg80211.c.aux"
static void ldv_free_netdev_90(struct net_device *ldv_func_arg1)
{
  
#line 911 
  ldv_emg_free_netdev(ldv_func_arg1);
  
#line 912 
  return;
}


#line 915  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_cfg80211.c.aux"
static void ldv_free_netdev_91(struct net_device *ldv_func_arg1)
{
  
#line 919 
  ldv_emg_free_netdev(ldv_func_arg1);
  
#line 920 
  return;
}


#line 923  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_cfg80211.c.aux"
static bool ldv_queue_delayed_work_92(struct workqueue_struct *wq, struct delayed_work *dwork, unsigned long delay)
{
  bool __retres;
  bool tmp;
  
#line 927 
  tmp = ldv_emg_queue_delayed_work(wq,dwork,delay);
  
#line 927 
  __retres = tmp != 0;
  
#line 927 
  return __retres;
}


#line 931  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_cfg80211.c.aux"
static bool ldv_queue_delayed_work_93(struct workqueue_struct *wq, struct delayed_work *dwork, unsigned long delay)
{
  bool __retres;
  bool tmp;
  
#line 935 
  tmp = ldv_emg_queue_delayed_work(wq,dwork,delay);
  
#line 935 
  __retres = tmp != 0;
  
#line 935 
  return __retres;
}


#line 418  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/slab.h"
static void *kmalloc_1(size_t size, gfp_t flags);


#line 581 
static void *kzalloc_8(size_t size, gfp_t flags);


#line 28  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/ie.c"
static int mwifiex_ie_index_used_by_other_intf(struct mwifiex_private *priv, u16 idx)
{
  int __retres;
  int i;
  struct mwifiex_ie *ie;
  
#line 31 
  struct mwifiex_adapter *adapter = priv->adapter;
  
#line 34 
  i = 0;
  
#line 34 
  goto ldv_61191;
  ldv_61190: 
#line 35 
  ;
  
#line 35 
  if (adapter->priv[i] != priv) {
    
#line 36 
    ie = & (adapter->priv[i])->mgmt_ie[(int)idx];
    
#line 37 
    if ((unsigned int)ie->mgmt_subtype_mask != 0U && (unsigned int)ie->ie_length != 0U) {
      
#line 38 
      __retres = -1;
      
#line 38 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 34 
  i += 1;
  ldv_61191: 
#line 35 
  ;
  
#line 34 
  if ((int)adapter->priv_num > i) 
#line 36 
                                  goto ldv_61190; else 
#line 39 
                                                       goto ldv_61192;
  ldv_61192: 
#line 40 
  ;
  
#line 42 
  __retres = 0;
  return_label: 
#line 42 
                return __retres;
}


#line 47  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/ie.c"
static int mwifiex_ie_get_autoidx(struct mwifiex_private *priv, u16 subtype_mask, struct mwifiex_ie *ie, u16 *index)
{
  int __retres;
  u16 mask;
  u16 len;
  u16 i;
  
#line 52 
  i = (unsigned short)0U;
  
#line 52 
  goto ldv_61204;
  ldv_61203: 
#line 53 
  ;
  
#line 53 
  mask = priv->mgmt_ie[(int)i].mgmt_subtype_mask;
  
#line 54 
  len = ie->ie_length;
  
#line 56 
  if ((unsigned int)mask == 65535U) 
#line 57 
                                    goto ldv_61202; else ;
  
#line 59 
  if ((int)mask == (int)subtype_mask) {
    
#line 60 
    if ((unsigned int)len > 256U) 
#line 61 
                                  goto ldv_61202; else ;
    
#line 63 
    *index = i;
    
#line 64 
    __retres = 0;
    
#line 64 
    goto return_label;
  }
  else ;
  
#line 67 
  if ((unsigned int)priv->mgmt_ie[(int)i].ie_length == 0U) {
    int tmp;
    
#line 68 
    tmp = mwifiex_ie_index_used_by_other_intf(priv,(unsigned short)((int)i));
    
#line 68 
    if (tmp != 0) 
#line 69 
                  goto ldv_61202; else ;
    
#line 71 
    *index = i;
    
#line 72 
    __retres = 0;
    
#line 72 
    goto return_label;
  }
  else ;
  ldv_61202: 
#line 74 
  ;
  
#line 52 
  i = (u16)((int)i + 1);
  ldv_61204: 
#line 53 
  ;
  
#line 52 
  if ((int)(priv->adapter)->max_mgmt_ie_index > (int)i) 
#line 54 
                                                        goto ldv_61203; else 
                                                                    
#line 57 
                                                                    goto ldv_61205;
  ldv_61205: 
#line 58 
  ;
  
#line 76 
  __retres = -1;
  return_label: 
#line 76 
                return __retres;
}


#line 81  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/ie.c"
static int mwifiex_update_autoindex_ies(struct mwifiex_private *priv, struct mwifiex_ie_list *ie_list)
{
  int __retres;
  u16 travel_len;
  u16 index;
  u16 mask;
  s16 input_len;
  s16 tlv_len;
  struct mwifiex_ie *ie;
  u8 *tmp;
  
#line 89 
  input_len = (short)ie_list->len;
  
#line 90 
  travel_len = (unsigned short)4U;
  
#line 92 
  ie_list->len = (unsigned short)0U;
  
#line 94 
  goto ldv_61218;
  ldv_61217: 
#line 95 
  ;
  
#line 95 
  ie = (struct mwifiex_ie *)ie_list + (int)travel_len;
  
#line 96 
  tlv_len = (short)ie->ie_length;
  
#line 97 
  travel_len = (unsigned short)((unsigned int)((int)travel_len + (int)((unsigned short)tlv_len)) + 6U);
  
#line 99 
  if ((unsigned long)input_len < (unsigned long)tlv_len + 6UL) {
    
#line 100 
    __retres = -1;
    
#line 100 
    goto return_label;
  }
  else ;
  
#line 101 
  index = ie->ie_index;
  
#line 102 
  mask = ie->mgmt_subtype_mask;
  
#line 104 
  if ((unsigned int)index == 65535U) {
    int tmp_0;
    
#line 106 
    tmp_0 = mwifiex_ie_get_autoidx(priv,(unsigned short)((int)mask),ie,& index);
    
#line 106 
    if (tmp_0 != 0) {
      
#line 107 
      __retres = -1;
      
#line 107 
      goto return_label;
    }
    else ;
    
#line 108 
    if ((unsigned int)index == 65535U) {
      
#line 109 
      __retres = -1;
      
#line 109 
      goto return_label;
    }
    else ;
    
#line 111 
    tmp = (u8 *)(& priv->mgmt_ie[(int)index].ie_buffer);
    
#line 112 
    memcpy((void *)tmp,(void const *)(& ie->ie_buffer),(unsigned long)ie->ie_length);
    
#line 113 
    priv->mgmt_ie[(int)index].ie_length = ie->ie_length;
    
#line 114 
    priv->mgmt_ie[(int)index].ie_index = index;
    
#line 115 
    priv->mgmt_ie[(int)index].mgmt_subtype_mask = mask;
    
#line 118 
    ie->ie_index = index;
  }
  else {
    int tmp_1;
    
#line 120 
    if ((unsigned int)mask != 0U) {
      
#line 121 
      __retres = -1;
      
#line 121 
      goto return_label;
    }
    else ;
    
#line 126 
    tmp_1 = mwifiex_ie_index_used_by_other_intf(priv,(unsigned short)((int)index));
    
#line 126 
    if (tmp_1 != 0) {
      
#line 127 
      __retres = -1;
      
#line 127 
      goto return_label;
    }
    else ;
    
#line 129 
    ie->ie_length = (unsigned short)0U;
    
#line 130 
    memcpy((void *)(& priv->mgmt_ie[(int)index]),(void const *)ie,262UL);
  }
  
#line 134 
  le16_add_cpu(& ie_list->len,(unsigned short)((int)((unsigned int)priv->mgmt_ie[(int)index].ie_length + 6U)));
  
#line 137 
  input_len = (short)((unsigned int)((int)input_len - (int)tlv_len) + 65530U);
  ldv_61218: 
#line 138 
  ;
  
#line 94 
  if ((unsigned int)((unsigned short)input_len) > 3U) 
#line 96 
                                                      goto ldv_61217; else 
                                                                    
#line 99 
                                                                    goto ldv_61219;
  ldv_61219: 
#line 100 
  ;
  
#line 140 
  if (((unsigned long)priv->bss_role & 1UL) != 0UL) {
    int tmp_2;
    
#line 141 
    tmp_2 = mwifiex_send_cmd(priv,(unsigned short)176,(unsigned short)1,1U,(void *)ie_list,(_Bool)0);
    
#line 141 
    __retres = tmp_2;
    
#line 141 
    goto return_label;
  }
  else ;
  
#line 145 
  __retres = 0;
  return_label: 
#line 145 
                return __retres;
}


#line 153  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/ie.c"
static int mwifiex_update_uap_custom_ie(struct mwifiex_private *priv, struct mwifiex_ie *beacon_ie, u16 *beacon_idx, struct mwifiex_ie *pr_ie, u16 *probe_idx, struct mwifiex_ie *ar_ie, u16 *assoc_idx)
{
  int __retres;
  struct mwifiex_ie_list *ap_custom_ie;
  u8 *pos;
  u16 len;
  int ret;
  
#line 163 
  ap_custom_ie = (struct mwifiex_ie_list *)kzalloc_8(4196UL,208U);
  
#line 164 
  if (ap_custom_ie == (struct mwifiex_ie_list *)0) {
    
#line 165 
    __retres = -12;
    
#line 165 
    goto return_label;
  }
  else ;
  
#line 167 
  ap_custom_ie->type = (unsigned short)361U;
  
#line 168 
  pos = (u8 *)(& ap_custom_ie->ie_list);
  
#line 170 
  if (beacon_ie != (struct mwifiex_ie *)0) {
    
#line 171 
    len = (unsigned short)((unsigned int)beacon_ie->ie_length + 6U);
    
#line 173 
    memcpy((void *)pos,(void const *)beacon_ie,(unsigned long)len);
    
#line 174 
    pos += (int)len;
    
#line 175 
    le16_add_cpu(& ap_custom_ie->len,(unsigned short)((int)len));
  }
  else ;
  
#line 177 
  if (pr_ie != (struct mwifiex_ie *)0) {
    
#line 178 
    len = (unsigned short)((unsigned int)pr_ie->ie_length + 6U);
    
#line 180 
    memcpy((void *)pos,(void const *)pr_ie,(unsigned long)len);
    
#line 181 
    pos += (int)len;
    
#line 182 
    le16_add_cpu(& ap_custom_ie->len,(unsigned short)((int)len));
  }
  else ;
  
#line 184 
  if (ar_ie != (struct mwifiex_ie *)0) {
    
#line 185 
    len = (unsigned short)((unsigned int)ar_ie->ie_length + 6U);
    
#line 187 
    memcpy((void *)pos,(void const *)ar_ie,(unsigned long)len);
    
#line 188 
    pos += (int)len;
    
#line 189 
    le16_add_cpu(& ap_custom_ie->len,(unsigned short)((int)len));
  }
  else ;
  
#line 192 
  ret = mwifiex_update_autoindex_ies(priv,ap_custom_ie);
  
#line 194 
  pos = (u8 *)(& ap_custom_ie->ie_list[0].ie_index);
  
#line 195 
  if (beacon_ie != (struct mwifiex_ie *)0 && (unsigned int)*beacon_idx == 65535U) {
    
#line 197 
    *beacon_idx = ap_custom_ie->ie_list[0].ie_index;
    
#line 198 
    len = (unsigned short)((unsigned int)beacon_ie->ie_length + 6U);
    
#line 200 
    pos += (int)len;
  }
  else ;
  
#line 202 
  if (pr_ie != (struct mwifiex_ie *)0 && (unsigned int)pr_ie->ie_index == 65535U) {
    
#line 204 
    *probe_idx = *((u16 *)pos);
    
#line 205 
    len = (unsigned short)((unsigned int)pr_ie->ie_length + 6U);
    
#line 207 
    pos += (int)len;
  }
  else ;
  
#line 209 
  if (ar_ie != (struct mwifiex_ie *)0 && (unsigned int)ar_ie->ie_index == 65535U) 
    
#line 211 
    *assoc_idx = *((u16 *)pos); else ;
  
#line 213 
  kfree((void const *)ap_custom_ie);
  
#line 214 
  __retres = ret;
  return_label: 
#line 214 
                return __retres;
}


#line 224  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/ie.c"
static int mwifiex_update_vs_ie(u8 const *ies, int ies_len, struct mwifiex_ie **ie_ptr, u16 mask, unsigned int oui, u8 oui_type)
{
  int __retres;
  struct ieee_types_header *vs_ie;
  u8 const *vendor_ie;
  
#line 229 
  struct mwifiex_ie *ie = *ie_ptr;
  
#line 232 
  vendor_ie = cfg80211_find_vendor_ie(oui,(unsigned char)((int)oui_type),ies,ies_len);
  
#line 233 
  if (vendor_ie != (u8 const *)0U) {
    
#line 234 
    if (*ie_ptr == (struct mwifiex_ie *)0) {
      
#line 235 
      *ie_ptr = (struct mwifiex_ie *)kzalloc_8(262UL,208U);
      
#line 237 
      if (*ie_ptr == (struct mwifiex_ie *)0) {
        
#line 238 
        __retres = -12;
        
#line 238 
        goto return_label;
      }
      else ;
      
#line 239 
      ie = *ie_ptr;
    }
    else ;
    
#line 242 
    vs_ie = (struct ieee_types_header *)vendor_ie;
    
#line 243 
    memcpy((void *)(& ie->ie_buffer) + (int)ie->ie_length,(void const *)vs_ie,(unsigned long)((int)vs_ie->len + 2));
    
#line 245 
    le16_add_cpu(& ie->ie_length,(unsigned short)((int)((unsigned int)((unsigned short)vs_ie->len) + 2U)));
    
#line 246 
    ie->mgmt_subtype_mask = mask;
    
#line 247 
    ie->ie_index = (unsigned short)65535U;
  }
  else ;
  
#line 250 
  *ie_ptr = ie;
  
#line 251 
  __retres = 0;
  return_label: 
#line 251 
                return __retres;
}


#line 257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/ie.c"
static int mwifiex_set_mgmt_beacon_data_ies(struct mwifiex_private *priv, struct cfg80211_beacon_data *data)
{
  
#line 260 
  struct mwifiex_ie *beacon_ie = (struct mwifiex_ie *)0;
  
#line 260 
  struct mwifiex_ie *pr_ie = (struct mwifiex_ie *)0;
  
#line 260 
  struct mwifiex_ie *ar_ie = (struct mwifiex_ie *)0;
  
#line 261 
  u16 beacon_idx = (unsigned short)65535U;
  
#line 261 
  u16 pr_idx = (unsigned short)65535U;
  
#line 262 
  u16 ar_idx = (unsigned short)65535U;
  
#line 263 
  int ret = 0;
  
#line 265 
  if (data->beacon_ies != (u8 const *)0U && data->beacon_ies_len != 0UL) {
    
#line 266 
    mwifiex_update_vs_ie(data->beacon_ies,(int)data->beacon_ies_len,& beacon_ie,(unsigned short)256,20722U,(unsigned char)4);
    
#line 270 
    mwifiex_update_vs_ie(data->beacon_ies,(int)data->beacon_ies_len,& beacon_ie,(unsigned short)256,5271450U,(unsigned char)9);
  }
  else ;
  
#line 275 
  if (data->proberesp_ies != (u8 const *)0U && data->proberesp_ies_len != 0UL) {
    
#line 276 
    mwifiex_update_vs_ie(data->proberesp_ies,(int)data->proberesp_ies_len,& pr_ie,(unsigned short)32,20722U,(unsigned char)4);
    
#line 280 
    mwifiex_update_vs_ie(data->proberesp_ies,(int)data->proberesp_ies_len,& pr_ie,(unsigned short)32,5271450U,(unsigned char)9);
  }
  else ;
  
#line 286 
  if (data->assocresp_ies != (u8 const *)0U && data->assocresp_ies_len != 0UL) {
    
#line 287 
    mwifiex_update_vs_ie(data->assocresp_ies,(int)data->assocresp_ies_len,& ar_ie,(unsigned short)10,20722U,(unsigned char)4);
    
#line 293 
    mwifiex_update_vs_ie(data->assocresp_ies,(int)data->assocresp_ies_len,& ar_ie,(unsigned short)10,5271450U,(unsigned char)9);
  }
  else ;
  
#line 300 
  if ((beacon_ie != (struct mwifiex_ie *)0 || pr_ie != (struct mwifiex_ie *)0) || ar_ie != (struct mwifiex_ie *)0) {
    
#line 301 
    ret = mwifiex_update_uap_custom_ie(priv,beacon_ie,& beacon_idx,pr_ie,& pr_idx,ar_ie,& ar_idx);
    
#line 304 
    if (ret != 0) 
#line 305 
                  goto done; else ;
  }
  else ;
  
#line 308 
  priv->beacon_idx = beacon_idx;
  
#line 309 
  priv->proberesp_idx = pr_idx;
  
#line 310 
  priv->assocresp_idx = ar_idx;
  done: 
#line 312 
  ;
  
#line 313 
  kfree((void const *)beacon_ie);
  
#line 314 
  kfree((void const *)pr_ie);
  
#line 315 
  kfree((void const *)ar_ie);
  
#line 317 
  return ret;
}


#line 323  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/ie.c"
static int mwifiex_uap_parse_tail_ies(struct mwifiex_private *priv, struct cfg80211_beacon_data *info_0)
{
  int __retres;
  struct mwifiex_ie *gen_ie;
  struct ieee_types_header *hdr;
  struct ieee80211_vendor_ie *vendorhdr;
  int left_len;
  int tmp_1;
  
#line 329 
  u16 gen_idx = (unsigned short)65535U;
  
#line 329 
  u16 ie_len = (unsigned short)0U;
  
#line 330 
  int parsed_len = 0;
  
#line 332 
  if (info_0->tail == (u8 const *)0U || info_0->tail_len == 0UL) {
    
#line 333 
    __retres = 0;
    
#line 333 
    goto return_label;
  }
  else ;
  
#line 335 
  gen_ie = (struct mwifiex_ie *)kzalloc_8(262UL,208U);
  
#line 336 
  if (gen_ie == (struct mwifiex_ie *)0) {
    
#line 337 
    __retres = -12;
    
#line 337 
    goto return_label;
  }
  else ;
  
#line 339 
  left_len = (int)info_0->tail_len;
  
#line 344 
  goto ldv_61280;
  ldv_61279: 
#line 345 
  ;
  
#line 345 
  hdr = (struct ieee_types_header *)(info_0->tail + parsed_len);
  
#line 346 
  switch ((int)hdr->element_id) {
    case 0: 
#line 347 
    ;
    case 1: 
#line 348 
    ;
    case 7: 
#line 349 
    ;
    case 32: 
#line 350 
    ;
    case 50: 
#line 351 
    ;
    case 45: 
#line 352 
    ;
    case 61: 
#line 353 
    ;
    case 191: 
#line 354 
    ;
    case 192: 
#line 355 
    ;
    case 221: 
#line 356 
    ;
    
#line 357 
    goto ldv_61277;
    default: 
#line 358 
    ;
    
#line 359 
    memcpy((void *)(& gen_ie->ie_buffer) + (int)ie_len,(void const *)hdr,(unsigned long)hdr->len + 2UL);
    
#line 361 
    ie_len = (unsigned short)((unsigned int)((int)((unsigned short)hdr->len) + (int)ie_len) + 2U);
    
#line 362 
    goto ldv_61277;
  }
  ldv_61277: 
#line 364 
  ;
  
#line 364 
  left_len = (int)((unsigned int)(left_len - (int)hdr->len) + 4294967294U);
  
#line 365 
  parsed_len = (int)((unsigned int)((int)hdr->len + parsed_len) + 2U);
  ldv_61280: 
#line 366 
  ;
  
#line 344 
  if ((unsigned int)left_len > 2U) 
#line 346 
                                   goto ldv_61279; else 
#line 349 
                                                        goto ldv_61281;
  ldv_61281: 
#line 350 
  ;
  
#line 371 
  vendorhdr = (struct ieee80211_vendor_ie *)cfg80211_find_vendor_ie(20722U,(unsigned char)1,info_0->tail,(int)info_0->tail_len);
  
#line 374 
  if (vendorhdr != (struct ieee80211_vendor_ie *)0) {
    
#line 375 
    memcpy((void *)(& gen_ie->ie_buffer) + (int)ie_len,(void const *)vendorhdr,(unsigned long)vendorhdr->len + 2UL);
    
#line 377 
    ie_len = (unsigned short)((unsigned int)((int)((unsigned short)vendorhdr->len) + (int)ie_len) + 2U);
  }
  else ;
  
#line 380 
  if ((unsigned int)ie_len == 0U) {
    
#line 381 
    kfree((void const *)gen_ie);
    
#line 382 
    __retres = 0;
    
#line 382 
    goto return_label;
  }
  else ;
  
#line 385 
  gen_ie->ie_index = gen_idx;
  
#line 386 
  gen_ie->mgmt_subtype_mask = (unsigned short)290U;
  
#line 389 
  gen_ie->ie_length = ie_len;
  
#line 391 
  tmp_1 = mwifiex_update_uap_custom_ie(priv,gen_ie,& gen_idx,(struct mwifiex_ie *)0,(u16 *)0U,(struct mwifiex_ie *)0,(u16 *)0U);
  
#line 391 
  if (tmp_1 != 0) {
    
#line 393 
    kfree((void const *)gen_ie);
    
#line 394 
    __retres = -1;
    
#line 394 
    goto return_label;
  }
  else ;
  
#line 397 
  priv->gen_idx = gen_idx;
  
#line 398 
  kfree((void const *)gen_ie);
  
#line 399 
  __retres = 0;
  return_label: 
#line 399 
                return __retres;
}


#line 406  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/ie.c"
int mwifiex_set_mgmt_ies(struct mwifiex_private *priv, struct cfg80211_beacon_data *info_0)
{
  int __retres;
  int ret;
  int tmp;
  
#line 411 
  ret = mwifiex_uap_parse_tail_ies(priv,info_0);
  
#line 412 
  __retres = ret;
  
#line 412 
  goto return_label;
  
#line 414 
  tmp = mwifiex_set_mgmt_beacon_data_ies(priv,info_0);
  
#line 414 
  __retres = tmp;
  return_label: 
#line 414 
                return __retres;
}


#line 418  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/ie.c"
int mwifiex_del_mgmt_ies(struct mwifiex_private *priv)
{
  int __retres;
  
#line 420 
  struct mwifiex_ie *beacon_ie = (struct mwifiex_ie *)0;
  
#line 420 
  struct mwifiex_ie *pr_ie = (struct mwifiex_ie *)0;
  
#line 421 
  struct mwifiex_ie *ar_ie = (struct mwifiex_ie *)0;
  
#line 421 
  struct mwifiex_ie *gen_ie = (struct mwifiex_ie *)0;
  
#line 422 
  int ret = 0;
  
#line 424 
  if ((unsigned int)priv->gen_idx != 65535U) {
    int tmp_0;
    
#line 425 
    gen_ie = (struct mwifiex_ie *)kmalloc_1(262UL,208U);
    
#line 426 
    if (gen_ie == (struct mwifiex_ie *)0) {
      
#line 427 
      __retres = -12;
      
#line 427 
      goto return_label;
    }
    else ;
    
#line 429 
    gen_ie->ie_index = priv->gen_idx;
    
#line 430 
    gen_ie->mgmt_subtype_mask = (unsigned short)0U;
    
#line 431 
    gen_ie->ie_length = (unsigned short)0U;
    
#line 432 
    tmp_0 = mwifiex_update_uap_custom_ie(priv,gen_ie,& priv->gen_idx,(struct mwifiex_ie *)0,& priv->proberesp_idx,(struct mwifiex_ie *)0,& priv->assocresp_idx);
    
#line 432 
    if (tmp_0 != 0) {
      
#line 435 
      ret = -1;
      
#line 436 
      goto done;
    }
    else ;
    
#line 439 
    priv->gen_idx = (unsigned short)65535U;
  }
  else ;
  
#line 442 
  if ((unsigned int)priv->beacon_idx != 65535U) {
    
#line 443 
    beacon_ie = (struct mwifiex_ie *)kmalloc_1(262UL,208U);
    
#line 444 
    if (beacon_ie == (struct mwifiex_ie *)0) {
      
#line 445 
      ret = -12;
      
#line 446 
      goto done;
    }
    else ;
    
#line 448 
    beacon_ie->ie_index = priv->beacon_idx;
    
#line 449 
    beacon_ie->mgmt_subtype_mask = (unsigned short)0U;
    
#line 450 
    beacon_ie->ie_length = (unsigned short)0U;
  }
  else ;
  
#line 452 
  if ((unsigned int)priv->proberesp_idx != 65535U) {
    
#line 453 
    pr_ie = (struct mwifiex_ie *)kmalloc_1(262UL,208U);
    
#line 454 
    if (pr_ie == (struct mwifiex_ie *)0) {
      
#line 455 
      ret = -12;
      
#line 456 
      goto done;
    }
    else ;
    
#line 458 
    pr_ie->ie_index = priv->proberesp_idx;
    
#line 459 
    pr_ie->mgmt_subtype_mask = (unsigned short)0U;
    
#line 460 
    pr_ie->ie_length = (unsigned short)0U;
  }
  else ;
  
#line 462 
  if ((unsigned int)priv->assocresp_idx != 65535U) {
    
#line 463 
    ar_ie = (struct mwifiex_ie *)kmalloc_1(262UL,208U);
    
#line 464 
    if (ar_ie == (struct mwifiex_ie *)0) {
      
#line 465 
      ret = -12;
      
#line 466 
      goto done;
    }
    else ;
    
#line 468 
    ar_ie->ie_index = priv->assocresp_idx;
    
#line 469 
    ar_ie->mgmt_subtype_mask = (unsigned short)0U;
    
#line 470 
    ar_ie->ie_length = (unsigned short)0U;
  }
  else ;
  
#line 473 
  if ((beacon_ie != (struct mwifiex_ie *)0 || pr_ie != (struct mwifiex_ie *)0) || ar_ie != (struct mwifiex_ie *)0) 
    
#line 474 
    ret = mwifiex_update_uap_custom_ie(priv,beacon_ie,& priv->beacon_idx,pr_ie,& priv->proberesp_idx,ar_ie,& priv->assocresp_idx); else ;
  done: 
#line 479 
  ;
  
#line 480 
  kfree((void const *)beacon_ie);
  
#line 481 
  kfree((void const *)pr_ie);
  
#line 482 
  kfree((void const *)ar_ie);
  
#line 484 
  __retres = ret;
  return_label: 
#line 484 
                return __retres;
}


#line 451  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_ie.c.aux"
static void *kmalloc_1(size_t size, gfp_t flags)
{
  void *tmp;
  
#line 454 
  tmp = ldv_kmalloc(size,flags);
  
#line 454 
  return tmp;
}


#line 472  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_ie.c.aux"
static void *kzalloc_8(size_t size, gfp_t flags)
{
  void *tmp;
  
#line 475 
  tmp = ldv_kzalloc(size,flags);
  
#line 475 
  return tmp;
}


#line 446  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_unlock_irqrestore_12(spinlock_t *lock, unsigned long flags)
{
  {
    unsigned long __dummy;
    unsigned long __dummy2;
    
  }
  
#line 448 
  _raw_spin_unlock_irqrestore(& lock->__anonCompField_spinlock_18.rlock,flags);
  
#line 449 
  return;
}


#line 482 
static void ldv_spin_unlock_irqrestore_79_9(spinlock_t *lock, unsigned long flags);


#line 486 
static void ldv_spin_unlock_irqrestore_80_3(spinlock_t *lock, unsigned long flags);


#line 490 
static void ldv_spin_unlock_irqrestore_82_0(spinlock_t *lock, unsigned long flags);


#line 494 
static void ldv_spin_unlock_irqrestore_84_1(spinlock_t *lock, unsigned long flags);


#line 498 
static void ldv_spin_unlock_irqrestore_85_7(spinlock_t *lock, unsigned long flags);


#line 502 
static void ldv_spin_unlock_irqrestore_87_3(spinlock_t *lock, unsigned long flags);


#line 506 
static void ldv_spin_unlock_irqrestore_89_6(spinlock_t *lock, unsigned long flags);


#line 510 
static void ldv_spin_unlock_irqrestore_90_0(spinlock_t *lock, unsigned long flags);


#line 514 
static void ldv_spin_unlock_irqrestore_92_2(spinlock_t *lock, unsigned long flags);


#line 518 
static void ldv_spin_unlock_irqrestore_94_4(spinlock_t *lock, unsigned long flags);


#line 522 
static void ldv_spin_unlock_irqrestore_96_4(spinlock_t *lock, unsigned long flags);


#line 526 
static void ldv_spin_unlock_irqrestore_98_2(spinlock_t *lock, unsigned long flags);


#line 74  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_11n.c.aux"
static void ldv___ldv_spin_lock_78_8(spinlock_t *ldv_func_arg1);


#line 78 
static void ldv___ldv_spin_lock_81_0(spinlock_t *ldv_func_arg1);


#line 82 
static void ldv___ldv_spin_lock_83_0(spinlock_t *ldv_func_arg1);


#line 86 
static void ldv___ldv_spin_lock_86_2(spinlock_t *ldv_func_arg1);


#line 90 
static void ldv___ldv_spin_lock_88_3(spinlock_t *ldv_func_arg1);


#line 94 
static void ldv___ldv_spin_lock_91_2(spinlock_t *ldv_func_arg1);


#line 98 
static void ldv___ldv_spin_lock_93_2(spinlock_t *ldv_func_arg1);


#line 102 
static void ldv___ldv_spin_lock_95_1(spinlock_t *ldv_func_arg1);


#line 106 
static void ldv___ldv_spin_lock_97_2(spinlock_t *ldv_func_arg1);


#line 581  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/slab.h"
static void *kzalloc_9(size_t size, gfp_t flags);


#line 1172  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.h"
void mwifiex_update_ampdu_txwinsize(struct mwifiex_adapter *adapter);


#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11n.c"
int mwifiex_fill_cap_info(struct mwifiex_private *priv, u8 radio_type, struct ieee80211_ht_cap *ht_cap)
{
  int __retres;
  int tmp_0;
  
#line 40 
  uint16_t ht_ext_cap = ht_cap->extended_ht_cap_info;
  
#line 41 
  struct ieee80211_supported_band *sband = (priv->wdev.wiphy)->bands[(int)radio_type];
  {
    bool __warned;
    
#line 44 
    int __ret_warn_once = sband == (struct ieee80211_supported_band *)0;
    
#line 44 
    if ((long)(__ret_warn_once != 0) != 0L) {
      int tmp;
      {
        
#line 44 
        int __ret_warn_on = ! __warned;
        
#line 44 
        if ((long)(__ret_warn_on != 0) != 0L) 
#line 44 
                                              warn_slowpath_null("/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11n.c",44); else ;
        
#line 44 
        tmp = (long)(__ret_warn_on != 0);
      }
      
#line 44 
      if ((long)tmp != 0L) 
#line 44 
                           __warned = (_Bool)1; else ;
    }
    else ;
    
#line 44 
    tmp_0 = (long)(__ret_warn_once != 0);
  }
  
#line 44 
  if ((long)tmp_0 != 0L) {
    
#line 45 
    if (((priv->adapter)->debug_mask & 4U) != 0U) {
      
#line 45 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 45 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"Invalid radio type!\n"); else ;
    }
    else ;
    
#line 46 
    __retres = -22;
    
#line 46 
    goto return_label;
  }
  else ;
  
#line 49 
  ht_cap->ampdu_params_info = (unsigned char)(((int)sband->ht_cap.ampdu_factor & 3) | (((int)sband->ht_cap.ampdu_density << 2) & 28));
  
#line 56 
  memcpy((void *)(& ht_cap->mcs),(void const *)(& sband->ht_cap.mcs),16UL);
  
#line 59 
  if (priv->bss_mode == 2U || (((int)sband->ht_cap.cap & 2) != 0 && (unsigned int)(priv->adapter)->sec_chan_offset != 0U)) 
    
#line 64 
    ht_cap->mcs.rx_mask[4] = (unsigned char)((unsigned int)ht_cap->mcs.rx_mask[4] | 1U); else ;
  
#line 67 
  ht_ext_cap = (unsigned short)((unsigned int)ht_ext_cap & 63487U);
  
#line 69 
  ht_cap->cap_info = sband->ht_cap.cap;
  
#line 70 
  ht_cap->extended_ht_cap_info = ht_ext_cap;
  
#line 72 
  if (((unsigned long)(priv->adapter)->hw_dot_11n_dev_cap & 1073741824UL) != 0UL) 
    
#line 73 
    ht_cap->tx_BF_cap_info = 165797896U; else ;
  
#line 75 
  __retres = 0;
  return_label: 
#line 75 
                return __retres;
}


#line 83  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11n.c"
static struct mwifiex_tx_ba_stream_tbl *mwifiex_get_ba_status(struct mwifiex_private *priv, enum mwifiex_ba_status ba_status)
{
  struct mwifiex_tx_ba_stream_tbl *__retres;
  struct mwifiex_tx_ba_stream_tbl *tx_ba_tsr_tbl;
  unsigned long flags;
  struct mwifiex_tx_ba_stream_tbl *tmp;
  struct mwifiex_tx_ba_stream_tbl *tmp_0;
  
#line 89 
  ldv___ldv_spin_lock_78_8(& priv->tx_ba_stream_tbl_lock);
  {
    
#line 90 
    struct list_head const *__mptr = (struct list_head const *)priv->tx_ba_stream_tbl_ptr.next;
    
#line 90 
    tmp = (struct mwifiex_tx_ba_stream_tbl *)__mptr;
  }
  
#line 90 
  tx_ba_tsr_tbl = tmp;
  
#line 90 
  goto ldv_61609;
  ldv_61608: 
#line 91 
  ;
  
#line 91 
  if (tx_ba_tsr_tbl->ba_status == ba_status) {
    
#line 92 
    ldv_spin_unlock_irqrestore_79_9(& priv->tx_ba_stream_tbl_lock,flags);
    
#line 94 
    __retres = tx_ba_tsr_tbl;
    
#line 94 
    goto return_label;
  }
  else ;
  {
    
#line 90 
    struct list_head const *__mptr_0 = (struct list_head const *)tx_ba_tsr_tbl->list.next;
    
#line 90 
    tmp_0 = (struct mwifiex_tx_ba_stream_tbl *)__mptr_0;
  }
  
#line 90 
  tx_ba_tsr_tbl = tmp_0;
  ldv_61609: 
#line 92 
  ;
  
#line 90 
  if (& tx_ba_tsr_tbl->list != & priv->tx_ba_stream_tbl_ptr) 
#line 92 
                                                             goto ldv_61608; else 
                                                                    
#line 95 
                                                                    goto ldv_61610;
  ldv_61610: 
#line 96 
  ;
  
#line 97 
  ldv_spin_unlock_irqrestore_80_3(& priv->tx_ba_stream_tbl_lock,flags);
  
#line 98 
  __retres = (struct mwifiex_tx_ba_stream_tbl *)0;
  return_label: 
#line 98 
                return __retres;
}


#line 110  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11n.c"
int mwifiex_ret_11n_delba(struct mwifiex_private *priv, struct host_cmd_ds_command *resp)
{
  int __retres;
  int tid;
  struct mwifiex_tx_ba_stream_tbl *tx_ba_tbl;
  
#line 115 
  struct host_cmd_ds_11n_delba *del_ba = & resp->params.del_ba;
  
#line 116 
  uint16_t del_ba_param_set = del_ba->del_ba_param_set;
  
#line 118 
  tid = (int)del_ba_param_set >> 12;
  
#line 119 
  if ((unsigned int)del_ba->del_result == 0U) {
    
#line 120 
    mwifiex_del_ba_tbl(priv,tid,(u8 *)(& del_ba->peer_mac_addr),(unsigned char)1,(int)((unsigned long)del_ba_param_set >> 11) & 1);
    
#line 124 
    tx_ba_tbl = mwifiex_get_ba_status(priv,(enum mwifiex_ba_status)BA_SETUP_INPROGRESS);
    
#line 125 
    if (tx_ba_tbl != (struct mwifiex_tx_ba_stream_tbl *)0) 
#line 126 
                                                           mwifiex_send_addba(priv,tx_ba_tbl->tid,(u8 *)(& tx_ba_tbl->ra)); else ;
  }
  else {
    
#line 132 
    if (((unsigned long)del_ba_param_set & 2048UL) == 0UL) {
      
#line 133 
      __retres = 0;
      
#line 133 
      goto return_label;
    }
    else ;
    
#line 135 
    mwifiex_create_ba_tbl(priv,(u8 *)(& del_ba->peer_mac_addr),tid,(enum mwifiex_ba_status)BA_SETUP_INPROGRESS);
    
#line 138 
    tx_ba_tbl = mwifiex_get_ba_status(priv,(enum mwifiex_ba_status)BA_SETUP_INPROGRESS);
    
#line 140 
    if (tx_ba_tbl != (struct mwifiex_tx_ba_stream_tbl *)0) 
#line 141 
                                                           mwifiex_del_ba_tbl(priv,tx_ba_tbl->tid,(u8 *)(& tx_ba_tbl->ra),(unsigned char)1,1); else ;
  }
  
#line 145 
  __retres = 0;
  return_label: 
#line 145 
                return __retres;
}


#line 156  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11n.c"
int mwifiex_ret_11n_addba_req(struct mwifiex_private *priv, struct host_cmd_ds_command *resp)
{
  int __retres;
  int tid;
  int tid_down;
  struct mwifiex_tx_ba_stream_tbl *tx_ba_tbl;
  struct mwifiex_ra_list_tbl *ra_list;
  u8 tmp;
  
#line 160 
  struct host_cmd_ds_11n_addba_rsp *add_ba_rsp = & resp->params.add_ba_rsp;
  
#line 163 
  u16 block_ack_param_set = add_ba_rsp->block_ack_param_set;
  
#line 165 
  add_ba_rsp->ssn = (unsigned short)((unsigned int)add_ba_rsp->ssn & 65520U);
  
#line 168 
  tid = ((int)block_ack_param_set >> 2) & 15;
  
#line 171 
  tmp = mwifiex_wmm_downgrade_tid(priv,(unsigned int)tid);
  
#line 171 
  tid_down = (int)tmp;
  
#line 172 
  ra_list = mwifiex_wmm_get_ralist_node(priv,(unsigned char)((int)((unsigned char)tid_down)),(u8 const *)(& add_ba_rsp->peer_mac_addr));
  
#line 174 
  if ((unsigned int)add_ba_rsp->status_code != 0U) {
    
#line 175 
    if (ra_list != (struct mwifiex_ra_list_tbl *)0) {
      
#line 176 
      ra_list->ba_status = BA_SETUP_NONE;
      
#line 177 
      ra_list->amsdu_in_ampdu = (unsigned char)0U;
    }
    else ;
    
#line 179 
    mwifiex_del_ba_tbl(priv,tid,(u8 *)(& add_ba_rsp->peer_mac_addr),(unsigned char)1,1);
    
#line 181 
    if ((unsigned int)add_ba_rsp->add_rsp_result != 2U) 
#line 182 
                                                        priv->aggr_prio_tbl[tid].ampdu_ap = (unsigned char)255U; else ;
    
#line 184 
    __retres = 0;
    
#line 184 
    goto return_label;
  }
  else ;
  
#line 187 
  tx_ba_tbl = mwifiex_get_ba_tbl(priv,tid,(u8 *)(& add_ba_rsp->peer_mac_addr));
  
#line 188 
  if (tx_ba_tbl != (struct mwifiex_tx_ba_stream_tbl *)0) {
    
#line 189 
    if (((priv->adapter)->debug_mask & 32U) != 0U) {
      
#line 189 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 189 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"info: BA stream complete\n"); else ;
    }
    else ;
    
#line 190 
    tx_ba_tbl->ba_status = BA_SETUP_COMPLETE;
    
#line 191 
    if ((((int)block_ack_param_set & 1) != 0 && (unsigned int)priv->add_ba_param.tx_amsdu != 0U) && (unsigned int)priv->aggr_prio_tbl[tid].amsdu != 255U) 
      
#line 194 
      tx_ba_tbl->amsdu = (unsigned char)1U; else 
#line 196 
                                                 tx_ba_tbl->amsdu = (unsigned char)0U;
    
#line 197 
    if (ra_list != (struct mwifiex_ra_list_tbl *)0) {
      
#line 198 
      ra_list->amsdu_in_ampdu = tx_ba_tbl->amsdu;
      
#line 199 
      ra_list->ba_status = BA_SETUP_COMPLETE;
    }
    else ;
  }
  else 
    
#line 202 
    if (((priv->adapter)->debug_mask & 4U) != 0U) {
      
#line 202 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 202 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"BA stream not created\n"); else ;
    }
    else ;
  
#line 205 
  __retres = 0;
  return_label: 
#line 205 
                return __retres;
}


#line 216  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11n.c"
int mwifiex_cmd_recfg_tx_buf(struct mwifiex_private *priv, struct host_cmd_ds_command *cmd, int cmd_action, u16 *buf_size)
{
  int __retres;
  
#line 220 
  struct host_cmd_ds_txbuf_cfg *tx_buf = & cmd->params.tx_buf;
  
#line 221 
  u16 action = (unsigned short)cmd_action;
  
#line 223 
  cmd->command = (unsigned short)217U;
  
#line 224 
  cmd->size = (unsigned short)16U;
  
#line 226 
  tx_buf->action = action;
  
#line 227 
  switch ((int)action) {
    case 1: 
#line 228 
    ;
    
#line 229 
    if (((priv->adapter)->debug_mask & 16U) != 0U) {
      
#line 229 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 229 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"cmd: set tx_buf=%d\n",(int)*buf_size); else ;
    }
    else ;
    
#line 231 
    tx_buf->buff_size = *buf_size;
    
#line 232 
    goto ldv_61638;
    case 0: 
#line 233 
    ;
    default: 
#line 234 
    ;
    
#line 235 
    tx_buf->buff_size = (unsigned short)0U;
    
#line 236 
    goto ldv_61638;
  }
  ldv_61638: 
#line 238 
  ;
  
#line 238 
  __retres = 0;
  
#line 238 
  return __retres;
}


#line 249  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11n.c"
int mwifiex_cmd_amsdu_aggr_ctrl(struct host_cmd_ds_command *cmd, int cmd_action, struct mwifiex_ds_11n_amsdu_aggr_ctrl *aa_ctrl)
{
  int __retres;
  
#line 253 
  struct host_cmd_ds_amsdu_aggr_ctrl *amsdu_ctrl = & cmd->params.amsdu_aggr_ctrl;
  
#line 255 
  u16 action = (unsigned short)cmd_action;
  
#line 257 
  cmd->command = (unsigned short)223U;
  
#line 258 
  cmd->size = (unsigned short)14U;
  
#line 260 
  amsdu_ctrl->action = action;
  
#line 261 
  switch ((int)action) {
    case 1: 
#line 262 
    ;
    
#line 263 
    amsdu_ctrl->enable = aa_ctrl->enable;
    
#line 264 
    amsdu_ctrl->curr_buf_size = (unsigned short)0U;
    
#line 265 
    goto ldv_61649;
    case 0: 
#line 266 
    ;
    default: 
#line 267 
    ;
    
#line 268 
    amsdu_ctrl->curr_buf_size = (unsigned short)0U;
    
#line 269 
    goto ldv_61649;
  }
  ldv_61649: 
#line 271 
  ;
  
#line 271 
  __retres = 0;
  
#line 271 
  return __retres;
}


#line 282  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11n.c"
int mwifiex_cmd_11n_cfg(struct mwifiex_private *priv, struct host_cmd_ds_command *cmd, u16 cmd_action, struct mwifiex_ds_11n_tx_cfg *txcfg)
{
  int __retres;
  
#line 286 
  struct host_cmd_ds_11n_cfg *htcfg = & cmd->params.htcfg;
  
#line 288 
  cmd->command = (unsigned short)205U;
  
#line 289 
  cmd->size = (unsigned short)16U;
  
#line 290 
  htcfg->action = cmd_action;
  
#line 291 
  htcfg->ht_tx_cap = txcfg->tx_htcap;
  
#line 292 
  htcfg->ht_tx_info = txcfg->tx_htinfo;
  
#line 294 
  if ((priv->adapter)->is_hw_11ac_capable != 0U) 
#line 295 
                                                 htcfg->misc_config = txcfg->misc_config; else ;
  
#line 297 
  __retres = 0;
  
#line 297 
  return __retres;
}


#line 313  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11n.c"
int mwifiex_cmd_append_11n_tlv(struct mwifiex_private *priv, struct mwifiex_bssdescriptor *bss_desc, u8 **buffer)
{
  int __retres;
  struct mwifiex_ie_types_htcap *ht_cap;
  struct mwifiex_ie_types_htinfo *ht_info;
  struct mwifiex_ie_types_chan_list_param_set *chan_list;
  struct mwifiex_ie_types_2040bssco *bss_co_2040;
  struct mwifiex_ie_types_extcap *ext_cap;
  struct ieee80211_supported_band *sband;
  struct ieee_types_header *hdr;
  u8 radio_type;
  
#line 322 
  int ret_len = 0;
  
#line 327 
  if (buffer == (u8 **)0U || *buffer == (u8 *)0U) {
    
#line 328 
    __retres = ret_len;
    
#line 328 
    goto return_label;
  }
  else ;
  
#line 330 
  radio_type = mwifiex_band_to_radio_type((unsigned char)((int)((unsigned char)bss_desc->bss_band)));
  
#line 331 
  sband = (priv->wdev.wiphy)->bands[(int)radio_type];
  
#line 333 
  if (bss_desc->bcn_ht_cap != (struct ieee80211_ht_cap *)0) {
    
#line 334 
    ht_cap = (struct mwifiex_ie_types_htcap *)*buffer;
    
#line 335 
    memset((void *)ht_cap,0,30UL);
    
#line 336 
    ht_cap->header.type = (unsigned short)45U;
    
#line 337 
    ht_cap->header.len = (unsigned short)26U;
    
#line 339 
    memcpy((void *)ht_cap + 4U,(void const *)bss_desc->bcn_ht_cap,(unsigned long)ht_cap->header.len);
    
#line 343 
    mwifiex_fill_cap_info(priv,(unsigned char)((int)radio_type),& ht_cap->ht_cap);
    
#line 345 
    *buffer += 30U;
    
#line 346 
    ret_len = (int)((unsigned int)ret_len + 30U);
  }
  else ;
  
#line 349 
  if (bss_desc->bcn_ht_oper != (struct ieee80211_ht_operation *)0) {
    
#line 350 
    if (priv->bss_mode == 1U) {
      
#line 351 
      ht_info = (struct mwifiex_ie_types_htinfo *)*buffer;
      
#line 352 
      memset((void *)ht_info,0,26UL);
      
#line 354 
      ht_info->header.type = (unsigned short)61U;
      
#line 356 
      ht_info->header.len = (unsigned short)22U;
      
#line 360 
      memcpy((void *)ht_info + 4U,(void const *)bss_desc->bcn_ht_oper,(unsigned long)ht_info->header.len);
      
#line 365 
      if (((int)sband->ht_cap.cap & 2) == 0) 
#line 367 
                                             ht_info->ht_oper.ht_param = (unsigned char)((unsigned int)ht_info->ht_oper.ht_param & 248U); else ;
      
#line 371 
      *buffer += 26U;
      
#line 372 
      ret_len = (int)((unsigned int)ret_len + 26U);
    }
    else ;
    
#line 375 
    chan_list = (struct mwifiex_ie_types_chan_list_param_set *)*buffer;
    
#line 377 
    memset((void *)chan_list,0,11UL);
    
#line 379 
    chan_list->header.type = (unsigned short)257U;
    
#line 380 
    chan_list->header.len = (unsigned short)7U;
    
#line 383 
    chan_list->chan_scan_param[0].chan_number = (bss_desc->bcn_ht_oper)->primary_chan;
    
#line 385 
    chan_list->chan_scan_param[0].radio_type = mwifiex_band_to_radio_type((unsigned char)((int)((unsigned char)bss_desc->bss_band)));
    
#line 388 
    if (((int)sband->ht_cap.cap & 2) != 0 && ((int)(bss_desc->bcn_ht_oper)->ht_param & 4) != 0) 
      
#line 391 
      chan_list->chan_scan_param[0].radio_type = (unsigned char)((int)chan_list->chan_scan_param[0].radio_type | (((int)(bss_desc->bcn_ht_oper)->ht_param << 4) & 48)); else ;
    
#line 396 
    *buffer += 11U;
    
#line 397 
    ret_len = (int)((unsigned int)ret_len + 11U);
  }
  else ;
  
#line 400 
  if (bss_desc->bcn_bss_co_2040 != (u8 *)0U) {
    
#line 401 
    bss_co_2040 = (struct mwifiex_ie_types_2040bssco *)*buffer;
    
#line 402 
    memset((void *)bss_co_2040,0,5UL);
    
#line 404 
    bss_co_2040->header.type = (unsigned short)72U;
    
#line 405 
    bss_co_2040->header.len = (unsigned short)1U;
    
#line 408 
    memcpy((void *)bss_co_2040 + 4U,(void const *)(bss_desc->bcn_bss_co_2040 + 2U),(unsigned long)bss_co_2040->header.len);
    
#line 414 
    *buffer += 5U;
    
#line 415 
    ret_len = (int)((unsigned int)ret_len + 5U);
  }
  else ;
  
#line 418 
  if (bss_desc->bcn_ext_cap != (u8 *)0U) {
    
#line 419 
    hdr = (struct ieee_types_header *)bss_desc->bcn_ext_cap;
    
#line 420 
    ext_cap = (struct mwifiex_ie_types_extcap *)*buffer;
    
#line 421 
    memset((void *)ext_cap,0,4UL);
    
#line 422 
    ext_cap->header.type = (unsigned short)127U;
    
#line 423 
    ext_cap->header.len = (unsigned short)hdr->len;
    
#line 425 
    memcpy((void *)(& ext_cap->ext_capab),(void const *)(bss_desc->bcn_ext_cap + 2U),(unsigned long)ext_cap->header.len);
    
#line 429 
    if ((unsigned int)hdr->len > 3U && (int)ext_cap->ext_capab[3] < 0) 
      
#line 431 
      priv->hs2_enabled = (_Bool)1; else 
#line 433 
                                         priv->hs2_enabled = (_Bool)0;
    
#line 435 
    *buffer += (unsigned long)hdr->len + 4UL;
    
#line 436 
    ret_len = (int)((unsigned int)((int)hdr->len + ret_len) + 4U);
  }
  else ;
  
#line 439 
  __retres = ret_len;
  return_label: 
#line 439 
                return __retres;
}


#line 446  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11n.c"
static int mwifiex_is_tx_ba_stream_ptr_valid(struct mwifiex_private *priv, struct mwifiex_tx_ba_stream_tbl *tx_tbl_ptr)
{
  int __retres;
  struct mwifiex_tx_ba_stream_tbl *tx_ba_tsr_tbl;
  struct mwifiex_tx_ba_stream_tbl *tmp;
  struct mwifiex_tx_ba_stream_tbl *tmp_0;
  {
    
#line 451 
    struct list_head const *__mptr = (struct list_head const *)priv->tx_ba_stream_tbl_ptr.next;
    
#line 451 
    tmp = (struct mwifiex_tx_ba_stream_tbl *)__mptr;
  }
  
#line 451 
  tx_ba_tsr_tbl = tmp;
  
#line 451 
  goto ldv_61683;
  ldv_61682: 
#line 452 
  ;
  
#line 452 
  if (tx_ba_tsr_tbl == tx_tbl_ptr) {
    
#line 453 
    __retres = 1;
    
#line 453 
    goto return_label;
  }
  else ;
  {
    
#line 451 
    struct list_head const *__mptr_0 = (struct list_head const *)tx_ba_tsr_tbl->list.next;
    
#line 451 
    tmp_0 = (struct mwifiex_tx_ba_stream_tbl *)__mptr_0;
  }
  
#line 451 
  tx_ba_tsr_tbl = tmp_0;
  ldv_61683: 
#line 453 
  ;
  
#line 451 
  if (& tx_ba_tsr_tbl->list != & priv->tx_ba_stream_tbl_ptr) 
#line 453 
                                                             goto ldv_61682; else 
                                                                    
#line 456 
                                                                    goto ldv_61684;
  ldv_61684: 
#line 457 
  ;
  
#line 456 
  __retres = 0;
  return_label: 
#line 456 
                return __retres;
}


#line 465  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11n.c"
void mwifiex_11n_delete_tx_ba_stream_tbl_entry(struct mwifiex_private *priv, struct mwifiex_tx_ba_stream_tbl *tx_ba_tsr_tbl)
{
  
#line 468 
  if (tx_ba_tsr_tbl == (struct mwifiex_tx_ba_stream_tbl *)0) {
    int tmp;
    
#line 468 
    tmp = mwifiex_is_tx_ba_stream_ptr_valid(priv,tx_ba_tsr_tbl);
    
#line 468 
    if (tmp != 0) 
#line 470 
                  goto return_label; else ;
  }
  else ;
  
#line 472 
  if (((priv->adapter)->debug_mask & 1073741824U) != 0U) {
    
#line 472 
    if ((priv->adapter)->dev != (struct device *)0) 
#line 472 
                                                    _dev_info((struct device const *)(priv->adapter)->dev,"info: tx_ba_tsr_tbl %p\n",tx_ba_tsr_tbl); else ;
  }
  else ;
  
#line 475 
  list_del(& tx_ba_tsr_tbl->list);
  
#line 477 
  kfree((void const *)tx_ba_tsr_tbl);
  return_label: 
#line 478 
                return;
}


#line 483  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11n.c"
void mwifiex_11n_delete_all_tx_ba_stream_tbl(struct mwifiex_private *priv)
{
  int i;
  struct mwifiex_tx_ba_stream_tbl *del_tbl_ptr;
  struct mwifiex_tx_ba_stream_tbl *tmp_node;
  unsigned long flags;
  struct mwifiex_tx_ba_stream_tbl *tmp;
  struct mwifiex_tx_ba_stream_tbl *tmp_0;
  struct mwifiex_tx_ba_stream_tbl *tmp_1;
  
#line 489 
  ldv___ldv_spin_lock_81_0(& priv->tx_ba_stream_tbl_lock);
  {
    
#line 490 
    struct list_head const *__mptr = (struct list_head const *)priv->tx_ba_stream_tbl_ptr.next;
    
#line 490 
    tmp = (struct mwifiex_tx_ba_stream_tbl *)__mptr;
  }
  
#line 490 
  del_tbl_ptr = tmp;
  {
    
#line 490 
    struct list_head const *__mptr_0 = (struct list_head const *)del_tbl_ptr->list.next;
    
#line 490 
    tmp_0 = (struct mwifiex_tx_ba_stream_tbl *)__mptr_0;
  }
  
#line 491 
  tmp_node = tmp_0;
  
#line 490 
  goto ldv_61703;
  ldv_61702: 
#line 491 
  ;
  
#line 492 
  mwifiex_11n_delete_tx_ba_stream_tbl_entry(priv,del_tbl_ptr);
  
#line 490 
  del_tbl_ptr = tmp_node;
  {
    
#line 490 
    struct list_head const *__mptr_1 = (struct list_head const *)tmp_node->list.next;
    
#line 490 
    tmp_1 = (struct mwifiex_tx_ba_stream_tbl *)__mptr_1;
  }
  
#line 490 
  tmp_node = tmp_1;
  ldv_61703: 
#line 492 
  ;
  
#line 490 
  if (& del_tbl_ptr->list != & priv->tx_ba_stream_tbl_ptr) 
#line 492 
                                                           goto ldv_61702; else 
                                                                    
#line 495 
                                                                    goto ldv_61704;
  ldv_61704: 
#line 496 
  ;
  
#line 493 
  ldv_spin_unlock_irqrestore_82_0(& priv->tx_ba_stream_tbl_lock,flags);
  
#line 495 
  INIT_LIST_HEAD(& priv->tx_ba_stream_tbl_ptr);
  
#line 497 
  i = 0;
  
#line 497 
  goto ldv_61706;
  ldv_61705: 
#line 498 
  ;
  
#line 498 
  priv->aggr_prio_tbl[i].ampdu_ap = priv->aggr_prio_tbl[i].ampdu_user;
  
#line 497 
  i += 1;
  ldv_61706: 
#line 498 
  ;
  
#line 497 
  if (i <= 7) 
#line 499 
              goto ldv_61705; else 
#line 502 
                                   goto ldv_61707;
  ldv_61707: 
#line 503 
  ;
  
#line 504 
  return;
}


#line 507  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11n.c"
struct mwifiex_tx_ba_stream_tbl *mwifiex_get_ba_tbl(struct mwifiex_private *priv, int tid, u8 *ra)
{
  struct mwifiex_tx_ba_stream_tbl *__retres;
  struct mwifiex_tx_ba_stream_tbl *tx_ba_tsr_tbl;
  unsigned long flags;
  struct mwifiex_tx_ba_stream_tbl *tmp;
  bool tmp_0;
  struct mwifiex_tx_ba_stream_tbl *tmp_1;
  
#line 512 
  ldv___ldv_spin_lock_83_0(& priv->tx_ba_stream_tbl_lock);
  {
    
#line 513 
    struct list_head const *__mptr = (struct list_head const *)priv->tx_ba_stream_tbl_ptr.next;
    
#line 513 
    tmp = (struct mwifiex_tx_ba_stream_tbl *)__mptr;
  }
  
#line 513 
  tx_ba_tsr_tbl = tmp;
  
#line 513 
  goto ldv_61720;
  ldv_61719: 
#line 514 
  ;
  
#line 514 
  tmp_0 = ether_addr_equal_unaligned((u8 const *)(& tx_ba_tsr_tbl->ra),(u8 const *)ra);
  
#line 514 
  if ((int)tmp_0 != 0) {
    
#line 514 
    if (tx_ba_tsr_tbl->tid == tid) {
      
#line 516 
      ldv_spin_unlock_irqrestore_84_1(& priv->tx_ba_stream_tbl_lock,flags);
      
#line 518 
      __retres = tx_ba_tsr_tbl;
      
#line 518 
      goto return_label;
    }
    else ;
  }
  else ;
  {
    
#line 513 
    struct list_head const *__mptr_0 = (struct list_head const *)tx_ba_tsr_tbl->list.next;
    
#line 513 
    tmp_1 = (struct mwifiex_tx_ba_stream_tbl *)__mptr_0;
  }
  
#line 513 
  tx_ba_tsr_tbl = tmp_1;
  ldv_61720: 
#line 515 
  ;
  
#line 513 
  if (& tx_ba_tsr_tbl->list != & priv->tx_ba_stream_tbl_ptr) 
#line 515 
                                                             goto ldv_61719; else 
                                                                    
#line 518 
                                                                    goto ldv_61721;
  ldv_61721: 
#line 519 
  ;
  
#line 521 
  ldv_spin_unlock_irqrestore_85_7(& priv->tx_ba_stream_tbl_lock,flags);
  
#line 522 
  __retres = (struct mwifiex_tx_ba_stream_tbl *)0;
  return_label: 
#line 522 
                return __retres;
}


#line 529  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11n.c"
void mwifiex_create_ba_tbl(struct mwifiex_private *priv, u8 *ra, int tid, enum mwifiex_ba_status ba_status)
{
  struct mwifiex_tx_ba_stream_tbl *new_node;
  struct mwifiex_ra_list_tbl *ra_list;
  unsigned long flags;
  int tid_down;
  struct mwifiex_tx_ba_stream_tbl *tmp_1;
  
#line 537 
  tmp_1 = mwifiex_get_ba_tbl(priv,tid,ra);
  
#line 537 
  if (tmp_1 == (struct mwifiex_tx_ba_stream_tbl *)0) {
    u8 tmp_0;
    
#line 538 
    new_node = (struct mwifiex_tx_ba_stream_tbl *)kzalloc_9(40UL,32U);
    
#line 540 
    if (new_node == (struct mwifiex_tx_ba_stream_tbl *)0) 
#line 541 
                                                          goto return_label; else ;
    
#line 543 
    tmp_0 = mwifiex_wmm_downgrade_tid(priv,(unsigned int)tid);
    
#line 543 
    tid_down = (int)tmp_0;
    
#line 544 
    ra_list = mwifiex_wmm_get_ralist_node(priv,(unsigned char)((int)((unsigned char)tid_down)),(u8 const *)ra);
    
#line 545 
    if (ra_list != (struct mwifiex_ra_list_tbl *)0) {
      
#line 546 
      ra_list->ba_status = ba_status;
      
#line 547 
      ra_list->amsdu_in_ampdu = (unsigned char)0U;
    }
    else ;
    
#line 549 
    INIT_LIST_HEAD(& new_node->list);
    
#line 551 
    new_node->tid = tid;
    
#line 552 
    new_node->ba_status = ba_status;
    
#line 553 
    memcpy((void *)(& new_node->ra),(void const *)ra,6UL);
    
#line 555 
    ldv___ldv_spin_lock_86_2(& priv->tx_ba_stream_tbl_lock);
    
#line 556 
    list_add_tail(& new_node->list,& priv->tx_ba_stream_tbl_ptr);
    
#line 557 
    ldv_spin_unlock_irqrestore_87_3(& priv->tx_ba_stream_tbl_lock,flags);
  }
  else ;
  return_label: 
#line 559 
                return;
}


#line 564  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11n.c"
int mwifiex_send_addba(struct mwifiex_private *priv, int tid, u8 *peer_mac)
{
  int __retres;
  struct host_cmd_ds_11n_addba_req add_ba_req;
  u8 dialog_tok;
  int ret;
  unsigned long flags;
  u16 block_ack_param_set;
  
#line 567 
  u32 tx_win_size = priv->add_ba_param.tx_win_size;
  
#line 573 
  if (((priv->adapter)->debug_mask & 16U) != 0U) {
    
#line 573 
    if ((priv->adapter)->dev != (struct device *)0) 
#line 573 
                                                    _dev_info((struct device const *)(priv->adapter)->dev,"cmd: %s: tid %d\n","mwifiex_send_addba",tid); else ;
  }
  else ;
  
#line 575 
  if ((((unsigned long)priv->bss_role & 1UL) == 0UL && ((unsigned long)(priv->adapter)->fw_cap_info & 16384UL) != 0UL) && (priv->adapter)->is_hw_11ac_capable != 0U) {
    int tmp;
    
#line 577 
    tmp = memcmp((void const *)(& priv->cfg_bssid),(void const *)peer_mac,6UL);
    
#line 577 
    if (tmp != 0) {
      struct mwifiex_sta_node *sta_ptr;
      
#line 581 
      ldv___ldv_spin_lock_88_3(& priv->sta_list_spinlock);
      
#line 582 
      sta_ptr = mwifiex_get_sta_entry(priv,(u8 const *)peer_mac);
      
#line 583 
      if (sta_ptr == (struct mwifiex_sta_node *)0) {
        
#line 584 
        ldv_spin_unlock_irqrestore_89_6(& priv->sta_list_spinlock,flags);
        
#line 585 
        if (((priv->adapter)->debug_mask & 4U) != 0U) {
          
#line 585 
          if ((priv->adapter)->dev != (struct device *)0) 
#line 585 
                                                          _dev_info((struct device const *)(priv->adapter)->dev,"BA setup with unknown TDLS peer %pM!\n",peer_mac); else ;
        }
        else ;
        
#line 588 
        __retres = -1;
        
#line 588 
        goto return_label;
      }
      else ;
      
#line 590 
      if ((unsigned int)sta_ptr->is_11ac_enabled != 0U) 
#line 591 
                                                        tx_win_size = 64U; else ;
      
#line 592 
      ldv_spin_unlock_irqrestore_90_0(& priv->sta_list_spinlock,flags);
    }
    else ;
  }
  else ;
  
#line 595 
  block_ack_param_set = (unsigned short)((unsigned int)(((int)((unsigned short)tid) << 2U) | ((int)((unsigned short)tx_win_size) << 6U)) | 2U);
  
#line 600 
  if ((unsigned int)priv->add_ba_param.tx_amsdu != 0U && (unsigned int)priv->aggr_prio_tbl[tid].amsdu != 255U) 
    
#line 602 
    block_ack_param_set = (unsigned short)((unsigned int)block_ack_param_set | 1U); else ;
  
#line 604 
  add_ba_req.block_ack_param_set = block_ack_param_set;
  
#line 605 
  add_ba_req.block_ack_tmo = (unsigned short)priv->add_ba_param.timeout;
  
#line 607 
  dialog_tok = (u8)((int)dialog_tok + 1);
  
#line 609 
  if ((unsigned int)dialog_tok == 0U) 
#line 610 
                                      dialog_tok = (unsigned char)1U; else ;
  
#line 612 
  add_ba_req.dialog_token = dialog_tok;
  
#line 613 
  memcpy((void *)(& add_ba_req.peer_mac_addr),(void const *)peer_mac,6UL);
  
#line 616 
  ret = mwifiex_send_cmd(priv,(unsigned short)206,(unsigned short)0,0U,(void *)(& add_ba_req),(_Bool)0);
  
#line 619 
  __retres = ret;
  return_label: 
#line 619 
                return __retres;
}


#line 625  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11n.c"
int mwifiex_send_delba(struct mwifiex_private *priv, int tid, u8 *peer_mac, int initiator)
{
  struct host_cmd_ds_11n_delba delba;
  int ret;
  uint16_t del_ba_param_set;
  
#line 632 
  memset((void *)(& delba),0,12UL);
  
#line 633 
  delba.del_ba_param_set = (unsigned short)((int)((unsigned short)tid) << 12U);
  
#line 635 
  del_ba_param_set = delba.del_ba_param_set;
  
#line 636 
  if (initiator != 0) 
#line 637 
                      del_ba_param_set = (unsigned short)((unsigned int)del_ba_param_set | 2048U); else 
                                                                    
#line 639 
                                                                    del_ba_param_set = (unsigned short)((unsigned int)del_ba_param_set & 63487U);
  
#line 641 
  memcpy((void *)(& delba.peer_mac_addr),(void const *)peer_mac,6UL);
  
#line 644 
  ret = mwifiex_send_cmd(priv,(unsigned short)208,(unsigned short)1,0U,(void *)(& delba),(_Bool)0);
  
#line 647 
  return ret;
}


#line 653  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11n.c"
void mwifiex_11n_delba(struct mwifiex_private *priv, int tid)
{
  struct mwifiex_rx_reorder_tbl *rx_reor_tbl_ptr;
  int tmp;
  struct mwifiex_rx_reorder_tbl *tmp_0;
  struct mwifiex_rx_reorder_tbl *tmp_1;
  
#line 657 
  tmp = list_empty((struct list_head const *)(& priv->rx_reorder_tbl_ptr));
  
#line 657 
  if (tmp != 0) {
    {
      
#line 658 
      struct _ddebug descriptor = {.modname = "mwifiex", .function = "mwifiex_11n_delba", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11n.c", .format = "mwifiex_11n_delba: rx_reorder_tbl_ptr empty\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))659U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 658 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 658 
                                                          __dynamic_dev_dbg(& descriptor,(struct device const *)(priv->adapter)->dev,"mwifiex_11n_delba: rx_reorder_tbl_ptr empty\n"); else ;
    }
    
#line 660 
    goto return_label;
  }
  else ;
  {
    
#line 663 
    struct list_head const *__mptr = (struct list_head const *)priv->rx_reorder_tbl_ptr.next;
    
#line 663 
    tmp_0 = (struct mwifiex_rx_reorder_tbl *)__mptr;
  }
  
#line 663 
  rx_reor_tbl_ptr = tmp_0;
  
#line 663 
  goto ldv_61767;
  ldv_61766: 
#line 664 
  ;
  
#line 664 
  if (rx_reor_tbl_ptr->tid == tid) {
    {
      
#line 665 
      struct _ddebug descriptor_0 = {.modname = "mwifiex", .function = "mwifiex_11n_delba", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11n.c", .format = "Send delba to tid=%d, %pM\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))667U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 665 
      if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 665 
                                                            __dynamic_dev_dbg(& descriptor_0,(struct device const *)(priv->adapter)->dev,"Send delba to tid=%d, %pM\n",tid,(u8 *)(& rx_reor_tbl_ptr->ta)); else ;
    }
    
#line 668 
    mwifiex_send_delba(priv,tid,(u8 *)(& rx_reor_tbl_ptr->ta),0);
    
#line 669 
    goto return_label;
  }
  else ;
  {
    
#line 663 
    struct list_head const *__mptr_0 = (struct list_head const *)rx_reor_tbl_ptr->list.next;
    
#line 663 
    tmp_1 = (struct mwifiex_rx_reorder_tbl *)__mptr_0;
  }
  
#line 663 
  rx_reor_tbl_ptr = tmp_1;
  ldv_61767: 
#line 665 
  ;
  
#line 663 
  if (& rx_reor_tbl_ptr->list != & priv->rx_reorder_tbl_ptr) 
#line 665 
                                                             goto ldv_61766; else 
                                                                    
#line 668 
                                                                    goto ldv_61768;
  ldv_61768: 
#line 669 
  ;
  return_label: 
#line 670 
                return;
}


#line 677  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11n.c"
void mwifiex_11n_delete_ba_stream(struct mwifiex_private *priv, u8 *del_ba)
{
  int tid;
  
#line 679 
  struct host_cmd_ds_11n_delba *cmd_del_ba = (struct host_cmd_ds_11n_delba *)del_ba;
  
#line 681 
  uint16_t del_ba_param_set = cmd_del_ba->del_ba_param_set;
  
#line 684 
  tid = (int)del_ba_param_set >> 12;
  
#line 686 
  mwifiex_del_ba_tbl(priv,tid,(u8 *)(& cmd_del_ba->peer_mac_addr),(unsigned char)2,(int)((unsigned long)del_ba_param_set >> 11) & 1);
  
#line 688 
  return;
}


#line 693  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11n.c"
int mwifiex_get_rx_reorder_tbl(struct mwifiex_private *priv, struct mwifiex_ds_rx_reorder_tbl *buf)
{
  int i;
  struct mwifiex_rx_reorder_tbl *rx_reorder_tbl_ptr;
  unsigned long flags;
  struct mwifiex_rx_reorder_tbl *tmp;
  struct mwifiex_rx_reorder_tbl *tmp_0;
  
#line 697 
  struct mwifiex_ds_rx_reorder_tbl *rx_reo_tbl = buf;
  
#line 699 
  int count = 0;
  
#line 702 
  ldv___ldv_spin_lock_91_2(& priv->rx_reorder_tbl_lock);
  {
    
#line 703 
    struct list_head const *__mptr = (struct list_head const *)priv->rx_reorder_tbl_ptr.next;
    
#line 703 
    tmp = (struct mwifiex_rx_reorder_tbl *)__mptr;
  }
  
#line 703 
  rx_reorder_tbl_ptr = tmp;
  
#line 703 
  goto ldv_61794;
  ldv_61793: 
#line 704 
  ;
  
#line 705 
  rx_reo_tbl->tid = (unsigned short)rx_reorder_tbl_ptr->tid;
  
#line 706 
  memcpy((void *)(& rx_reo_tbl->ta),(void const *)(& rx_reorder_tbl_ptr->ta),6UL);
  
#line 707 
  rx_reo_tbl->start_win = (unsigned int)rx_reorder_tbl_ptr->start_win;
  
#line 708 
  rx_reo_tbl->win_size = (unsigned int)rx_reorder_tbl_ptr->win_size;
  
#line 709 
  i = 0;
  
#line 709 
  goto ldv_61790;
  ldv_61789: 
#line 710 
  ;
  
#line 710 
  if (*(rx_reorder_tbl_ptr->rx_reorder_ptr + i) != (void *)0) 
#line 711 
                                                              rx_reo_tbl->buffer[i] = 1U; else 
                                                                    
#line 713 
                                                                    rx_reo_tbl->buffer[i] = 0U;
  
#line 709 
  i += 1;
  ldv_61790: 
#line 710 
  ;
  
#line 709 
  if (rx_reorder_tbl_ptr->win_size > i) 
#line 711 
                                        goto ldv_61789; else 
#line 714 
                                                             goto ldv_61791;
  ldv_61791: 
#line 715 
  ;
  
#line 715 
  rx_reo_tbl += 1;
  
#line 716 
  count += 1;
  
#line 718 
  if (count > 15) 
#line 719 
                  goto ldv_61792; else ;
  {
    
#line 703 
    struct list_head const *__mptr_0 = (struct list_head const *)rx_reorder_tbl_ptr->list.next;
    
#line 703 
    tmp_0 = (struct mwifiex_rx_reorder_tbl *)__mptr_0;
  }
  
#line 703 
  rx_reorder_tbl_ptr = tmp_0;
  ldv_61794: 
#line 705 
  ;
  
#line 703 
  if (& rx_reorder_tbl_ptr->list != & priv->rx_reorder_tbl_ptr) 
#line 705 
                                                                goto ldv_61793; else 
                                                                    
#line 708 
                                                                    goto ldv_61792;
  ldv_61792: 
#line 709 
  ;
  
#line 721 
  ldv_spin_unlock_irqrestore_92_2(& priv->rx_reorder_tbl_lock,flags);
  
#line 723 
  return count;
}


#line 729  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11n.c"
int mwifiex_get_tx_ba_stream_tbl(struct mwifiex_private *priv, struct mwifiex_ds_tx_ba_stream_tbl *buf)
{
  struct mwifiex_tx_ba_stream_tbl *tx_ba_tsr_tbl;
  unsigned long flags;
  struct mwifiex_tx_ba_stream_tbl *tmp;
  struct mwifiex_tx_ba_stream_tbl *tmp_0;
  
#line 733 
  struct mwifiex_ds_tx_ba_stream_tbl *rx_reo_tbl = buf;
  
#line 734 
  int count = 0;
  
#line 737 
  ldv___ldv_spin_lock_93_2(& priv->tx_ba_stream_tbl_lock);
  {
    
#line 738 
    struct list_head const *__mptr = (struct list_head const *)priv->tx_ba_stream_tbl_ptr.next;
    
#line 738 
    tmp = (struct mwifiex_tx_ba_stream_tbl *)__mptr;
  }
  
#line 738 
  tx_ba_tsr_tbl = tmp;
  
#line 738 
  goto ldv_61810;
  ldv_61809: 
#line 739 
  ;
  
#line 739 
  rx_reo_tbl->tid = (unsigned short)tx_ba_tsr_tbl->tid;
  
#line 740 
  if (((priv->adapter)->debug_mask & 8U) != 0U) {
    
#line 740 
    if ((priv->adapter)->dev != (struct device *)0) 
#line 740 
                                                    _dev_info((struct device const *)(priv->adapter)->dev,"data: %s tid=%d\n","mwifiex_get_tx_ba_stream_tbl",(int)rx_reo_tbl->tid); else ;
  }
  else ;
  
#line 742 
  memcpy((void *)(& rx_reo_tbl->ra),(void const *)(& tx_ba_tsr_tbl->ra),6UL);
  
#line 743 
  rx_reo_tbl->amsdu = tx_ba_tsr_tbl->amsdu;
  
#line 744 
  rx_reo_tbl += 1;
  
#line 745 
  count += 1;
  
#line 746 
  if (count > 1) 
#line 747 
                 goto ldv_61808; else ;
  {
    
#line 738 
    struct list_head const *__mptr_0 = (struct list_head const *)tx_ba_tsr_tbl->list.next;
    
#line 738 
    tmp_0 = (struct mwifiex_tx_ba_stream_tbl *)__mptr_0;
  }
  
#line 738 
  tx_ba_tsr_tbl = tmp_0;
  ldv_61810: 
#line 740 
  ;
  
#line 738 
  if (& tx_ba_tsr_tbl->list != & priv->tx_ba_stream_tbl_ptr) 
#line 740 
                                                             goto ldv_61809; else 
                                                                    
#line 743 
                                                                    goto ldv_61808;
  ldv_61808: 
#line 744 
  ;
  
#line 749 
  ldv_spin_unlock_irqrestore_94_4(& priv->tx_ba_stream_tbl_lock,flags);
  
#line 751 
  return count;
}


#line 758  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11n.c"
void mwifiex_del_tx_ba_stream_tbl_by_ra(struct mwifiex_private *priv, u8 *ra)
{
  struct mwifiex_tx_ba_stream_tbl *tbl;
  struct mwifiex_tx_ba_stream_tbl *tmp;
  unsigned long flags;
  struct mwifiex_tx_ba_stream_tbl *tmp_0;
  struct mwifiex_tx_ba_stream_tbl *tmp_1;
  int tmp_2;
  struct mwifiex_tx_ba_stream_tbl *tmp_3;
  
#line 763 
  if (ra == (u8 *)0U) 
#line 764 
                      goto return_label; else ;
  
#line 766 
  ldv___ldv_spin_lock_95_1(& priv->tx_ba_stream_tbl_lock);
  {
    
#line 767 
    struct list_head const *__mptr = (struct list_head const *)priv->tx_ba_stream_tbl_ptr.next;
    
#line 767 
    tmp_0 = (struct mwifiex_tx_ba_stream_tbl *)__mptr;
  }
  
#line 767 
  tbl = tmp_0;
  {
    
#line 767 
    struct list_head const *__mptr_0 = (struct list_head const *)tbl->list.next;
    
#line 767 
    tmp_1 = (struct mwifiex_tx_ba_stream_tbl *)__mptr_0;
  }
  
#line 768 
  tmp = tmp_1;
  
#line 767 
  goto ldv_61825;
  ldv_61824: 
#line 768 
  ;
  
#line 768 
  tmp_2 = memcmp((void const *)(& tbl->ra),(void const *)ra,6UL);
  
#line 768 
  if (tmp_2 == 0) {
    
#line 769 
    ldv_spin_unlock_irqrestore_96_4(& priv->tx_ba_stream_tbl_lock,flags);
    
#line 771 
    mwifiex_11n_delete_tx_ba_stream_tbl_entry(priv,tbl);
    
#line 772 
    ldv___ldv_spin_lock_97_2(& priv->tx_ba_stream_tbl_lock);
  }
  else ;
  
#line 767 
  tbl = tmp;
  {
    
#line 767 
    struct list_head const *__mptr_1 = (struct list_head const *)tmp->list.next;
    
#line 767 
    tmp_3 = (struct mwifiex_tx_ba_stream_tbl *)__mptr_1;
  }
  
#line 767 
  tmp = tmp_3;
  ldv_61825: 
#line 769 
  ;
  
#line 767 
  if (& tbl->list != & priv->tx_ba_stream_tbl_ptr) 
#line 769 
                                                   goto ldv_61824; else 
                                                                    
#line 772 
                                                                    goto ldv_61826;
  ldv_61826: 
#line 773 
  ;
  
#line 775 
  ldv_spin_unlock_irqrestore_98_2(& priv->tx_ba_stream_tbl_lock,flags);
  return_label: 
#line 777 
                return;
}


#line 783  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11n.c"
void mwifiex_set_ba_params(struct mwifiex_private *priv)
{
  
#line 785 
  priv->add_ba_param.timeout = 65535U;
  
#line 787 
  if (((unsigned long)priv->bss_role & 1UL) != 0UL) {
    
#line 788 
    priv->add_ba_param.tx_win_size = 32U;
    
#line 790 
    priv->add_ba_param.rx_win_size = 16U;
  }
  else {
    
#line 793 
    priv->add_ba_param.tx_win_size = 64U;
    
#line 795 
    priv->add_ba_param.rx_win_size = 64U;
  }
  
#line 799 
  priv->add_ba_param.tx_amsdu = (unsigned char)1U;
  
#line 800 
  priv->add_ba_param.rx_amsdu = (unsigned char)1U;
  
#line 802 
  return;
}


#line 805  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11n.c"
u8 mwifiex_get_sec_chan_offset(int chan)
{
  u8 sec_offset;
  
#line 809 
  switch (chan) {
    case 36: 
#line 810 
    ;
    case 44: 
#line 811 
    ;
    case 52: 
#line 812 
    ;
    case 60: 
#line 813 
    ;
    case 100: 
#line 814 
    ;
    case 108: 
#line 815 
    ;
    case 116: 
#line 816 
    ;
    case 124: 
#line 817 
    ;
    case 132: 
#line 818 
    ;
    case 140: 
#line 819 
    ;
    case 149: 
#line 820 
    ;
    case 157: 
#line 821 
    ;
    
#line 822 
    sec_offset = (unsigned char)1U;
    
#line 823 
    goto ldv_61846;
    case 40: 
#line 824 
    ;
    case 48: 
#line 825 
    ;
    case 56: 
#line 826 
    ;
    case 64: 
#line 827 
    ;
    case 104: 
#line 828 
    ;
    case 112: 
#line 829 
    ;
    case 120: 
#line 830 
    ;
    case 128: 
#line 831 
    ;
    case 136: 
#line 832 
    ;
    case 144: 
#line 833 
    ;
    case 153: 
#line 834 
    ;
    case 161: 
#line 835 
    ;
    
#line 836 
    sec_offset = (unsigned char)3U;
    
#line 837 
    goto ldv_61846;
    case 165: 
#line 838 
    ;
    default: 
#line 839 
    ;
    
#line 840 
    sec_offset = (unsigned char)0U;
    
#line 841 
    goto ldv_61846;
  }
  ldv_61846: 
#line 844 
  ;
  
#line 844 
  return sec_offset;
}


#line 851  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11n.c"
static void mwifiex_send_delba_txbastream_tbl(struct mwifiex_private *priv, u8 tid)
{
  struct mwifiex_tx_ba_stream_tbl *tx_ba_stream_tbl_ptr;
  int tmp;
  struct mwifiex_tx_ba_stream_tbl *tmp_0;
  struct mwifiex_tx_ba_stream_tbl *tmp_1;
  
#line 853 
  struct mwifiex_adapter *adapter = priv->adapter;
  
#line 856 
  tmp = list_empty((struct list_head const *)(& priv->tx_ba_stream_tbl_ptr));
  
#line 856 
  if (tmp != 0) 
#line 857 
                goto return_label; else ;
  {
    
#line 859 
    struct list_head const *__mptr = (struct list_head const *)priv->tx_ba_stream_tbl_ptr.next;
    
#line 859 
    tmp_0 = (struct mwifiex_tx_ba_stream_tbl *)__mptr;
  }
  
#line 859 
  tx_ba_stream_tbl_ptr = tmp_0;
  
#line 859 
  goto ldv_61874;
  ldv_61873: 
#line 860 
  ;
  
#line 861 
  if (tx_ba_stream_tbl_ptr->ba_status == (unsigned int)BA_SETUP_COMPLETE) {
    
#line 862 
    if ((int)tid == tx_ba_stream_tbl_ptr->tid) {
      {
        
#line 863 
        struct _ddebug descriptor = {.modname = "mwifiex", .function = "mwifiex_send_delba_txbastream_tbl", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11n.c", .format = "Tx:Send delba to tid=%d, %pM\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))865U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
        
#line 863 
        if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 863 
                                                            __dynamic_dev_dbg(& descriptor,(struct device const *)adapter->dev,"Tx:Send delba to tid=%d, %pM\n",(int)tid,(u8 *)(& tx_ba_stream_tbl_ptr->ra)); else ;
      }
      
#line 866 
      mwifiex_send_delba(priv,tx_ba_stream_tbl_ptr->tid,(u8 *)(& tx_ba_stream_tbl_ptr->ra),1);
      
#line 869 
      goto return_label;
    }
    else ;
  }
  else ;
  {
    
#line 859 
    struct list_head const *__mptr_0 = (struct list_head const *)tx_ba_stream_tbl_ptr->list.next;
    
#line 859 
    tmp_1 = (struct mwifiex_tx_ba_stream_tbl *)__mptr_0;
  }
  
#line 859 
  tx_ba_stream_tbl_ptr = tmp_1;
  ldv_61874: 
#line 861 
  ;
  
#line 859 
  if (& tx_ba_stream_tbl_ptr->list != & priv->tx_ba_stream_tbl_ptr) 
#line 861 
                                                                    goto ldv_61873; else 
                                                                    
#line 864 
                                                                    goto ldv_61875;
  ldv_61875: 
#line 865 
  ;
  return_label: 
#line 866 
                return;
}


#line 877  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11n.c"
void mwifiex_update_ampdu_txwinsize(struct mwifiex_adapter *adapter)
{
  u8 i;
  u32 tx_win_size;
  struct mwifiex_private *priv;
  
#line 883 
  i = (unsigned char)0U;
  
#line 883 
  goto ldv_61887;
  ldv_61886: 
#line 884 
  ;
  
#line 884 
  if (adapter->priv[(int)i] == (struct mwifiex_private *)0) 
#line 885 
                                                            goto ldv_61882; else ;
  
#line 886 
  priv = adapter->priv[(int)i];
  
#line 887 
  tx_win_size = priv->add_ba_param.tx_win_size;
  
#line 889 
  if ((unsigned int)priv->bss_type == 0U) 
#line 890 
                                          priv->add_ba_param.tx_win_size = 64U; else ;
  
#line 893 
  if ((unsigned int)priv->bss_type == 2U) 
#line 894 
                                          priv->add_ba_param.tx_win_size = 64U; else ;
  
#line 897 
  if ((unsigned int)priv->bss_type == 1U) 
#line 898 
                                          priv->add_ba_param.tx_win_size = 32U; else ;
  
#line 901 
  if ((unsigned int)adapter->coex_win_size != 0U) {
    
#line 902 
    if ((unsigned int)adapter->coex_tx_win_size != 0U) 
#line 903 
                                                       priv->add_ba_param.tx_win_size = (unsigned int)adapter->coex_tx_win_size; else ;
  }
  else ;
  
#line 907 
  if (priv->add_ba_param.tx_win_size != tx_win_size) {
    
#line 908 
    if ((unsigned int)priv->media_connected == 0U) 
#line 909 
                                                   goto ldv_61882; else ;
    
#line 910 
    i = (unsigned char)0U;
    
#line 910 
    goto ldv_61884;
    ldv_61883: 
#line 911 
    ;
    
#line 911 
    mwifiex_send_delba_txbastream_tbl(priv,(unsigned char)((int)i));
    
#line 910 
    i = (u8)((int)i + 1);
    ldv_61884: 
#line 911 
    ;
    
#line 910 
    if ((unsigned int)i <= 7U) 
#line 912 
                               goto ldv_61883; else 
#line 915 
                                                    goto ldv_61885;
    ldv_61885: 
#line 916 
    ;
  }
  else ;
  ldv_61882: 
#line 918 
  ;
  
#line 883 
  i = (u8)((int)i + 1);
  ldv_61887: 
#line 884 
  ;
  
#line 883 
  if ((int)adapter->priv_num > (int)i) 
#line 885 
                                       goto ldv_61886; else 
#line 888 
                                                            goto ldv_61888;
  ldv_61888: 
#line 889 
  ;
  
#line 890 
  return;
}


#line 436  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_11n.c.aux"
static void *kzalloc_9(size_t size, gfp_t flags)
{
  void *tmp;
  
#line 439 
  tmp = ldv_kzalloc(size,flags);
  
#line 439 
  return tmp;
}


#line 791  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_11n.c.aux"
static void ldv___ldv_spin_lock_78_8(spinlock_t *ldv_func_arg1)
{
  
#line 795 
  ldv_spin_model_lock((char *)"tx_ba_stream_tbl_lock_of_mwifiex_private");
  
#line 797 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 798 
  return;
}


#line 801  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_11n.c.aux"
static void ldv_spin_unlock_irqrestore_79_9(spinlock_t *lock, unsigned long flags)
{
  
#line 805 
  ldv_spin_model_unlock((char *)"tx_ba_stream_tbl_lock_of_mwifiex_private");
  
#line 807 
  spin_unlock_irqrestore_12(lock,flags);
  
#line 808 
  return;
}


#line 811  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_11n.c.aux"
static void ldv_spin_unlock_irqrestore_80_3(spinlock_t *lock, unsigned long flags)
{
  
#line 815 
  ldv_spin_model_unlock((char *)"tx_ba_stream_tbl_lock_of_mwifiex_private");
  
#line 817 
  spin_unlock_irqrestore_12(lock,flags);
  
#line 818 
  return;
}


#line 821  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_11n.c.aux"
static void ldv___ldv_spin_lock_81_0(spinlock_t *ldv_func_arg1)
{
  
#line 825 
  ldv_spin_model_lock((char *)"tx_ba_stream_tbl_lock_of_mwifiex_private");
  
#line 827 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 828 
  return;
}


#line 831  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_11n.c.aux"
static void ldv_spin_unlock_irqrestore_82_0(spinlock_t *lock, unsigned long flags)
{
  
#line 835 
  ldv_spin_model_unlock((char *)"tx_ba_stream_tbl_lock_of_mwifiex_private");
  
#line 837 
  spin_unlock_irqrestore_12(lock,flags);
  
#line 838 
  return;
}


#line 841  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_11n.c.aux"
static void ldv___ldv_spin_lock_83_0(spinlock_t *ldv_func_arg1)
{
  
#line 845 
  ldv_spin_model_lock((char *)"tx_ba_stream_tbl_lock_of_mwifiex_private");
  
#line 847 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 848 
  return;
}


#line 851  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_11n.c.aux"
static void ldv_spin_unlock_irqrestore_84_1(spinlock_t *lock, unsigned long flags)
{
  
#line 855 
  ldv_spin_model_unlock((char *)"tx_ba_stream_tbl_lock_of_mwifiex_private");
  
#line 857 
  spin_unlock_irqrestore_12(lock,flags);
  
#line 858 
  return;
}


#line 861  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_11n.c.aux"
static void ldv_spin_unlock_irqrestore_85_7(spinlock_t *lock, unsigned long flags)
{
  
#line 865 
  ldv_spin_model_unlock((char *)"tx_ba_stream_tbl_lock_of_mwifiex_private");
  
#line 867 
  spin_unlock_irqrestore_12(lock,flags);
  
#line 868 
  return;
}


#line 871  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_11n.c.aux"
static void ldv___ldv_spin_lock_86_2(spinlock_t *ldv_func_arg1)
{
  
#line 875 
  ldv_spin_model_lock((char *)"tx_ba_stream_tbl_lock_of_mwifiex_private");
  
#line 877 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 878 
  return;
}


#line 881  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_11n.c.aux"
static void ldv_spin_unlock_irqrestore_87_3(spinlock_t *lock, unsigned long flags)
{
  
#line 885 
  ldv_spin_model_unlock((char *)"tx_ba_stream_tbl_lock_of_mwifiex_private");
  
#line 887 
  spin_unlock_irqrestore_12(lock,flags);
  
#line 888 
  return;
}


#line 891  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_11n.c.aux"
static void ldv___ldv_spin_lock_88_3(spinlock_t *ldv_func_arg1)
{
  
#line 895 
  ldv_spin_model_lock((char *)"sta_list_spinlock_of_mwifiex_private");
  
#line 897 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 898 
  return;
}


#line 901  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_11n.c.aux"
static void ldv_spin_unlock_irqrestore_89_6(spinlock_t *lock, unsigned long flags)
{
  
#line 905 
  ldv_spin_model_unlock((char *)"sta_list_spinlock_of_mwifiex_private");
  
#line 907 
  spin_unlock_irqrestore_12(lock,flags);
  
#line 908 
  return;
}


#line 911  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_11n.c.aux"
static void ldv_spin_unlock_irqrestore_90_0(spinlock_t *lock, unsigned long flags)
{
  
#line 915 
  ldv_spin_model_unlock((char *)"sta_list_spinlock_of_mwifiex_private");
  
#line 917 
  spin_unlock_irqrestore_12(lock,flags);
  
#line 918 
  return;
}


#line 921  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_11n.c.aux"
static void ldv___ldv_spin_lock_91_2(spinlock_t *ldv_func_arg1)
{
  
#line 925 
  ldv_spin_model_lock((char *)"rx_reorder_tbl_lock_of_mwifiex_private");
  
#line 927 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 928 
  return;
}


#line 931  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_11n.c.aux"
static void ldv_spin_unlock_irqrestore_92_2(spinlock_t *lock, unsigned long flags)
{
  
#line 935 
  ldv_spin_model_unlock((char *)"rx_reorder_tbl_lock_of_mwifiex_private");
  
#line 937 
  spin_unlock_irqrestore_12(lock,flags);
  
#line 938 
  return;
}


#line 941  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_11n.c.aux"
static void ldv___ldv_spin_lock_93_2(spinlock_t *ldv_func_arg1)
{
  
#line 945 
  ldv_spin_model_lock((char *)"tx_ba_stream_tbl_lock_of_mwifiex_private");
  
#line 947 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 948 
  return;
}


#line 951  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_11n.c.aux"
static void ldv_spin_unlock_irqrestore_94_4(spinlock_t *lock, unsigned long flags)
{
  
#line 955 
  ldv_spin_model_unlock((char *)"tx_ba_stream_tbl_lock_of_mwifiex_private");
  
#line 957 
  spin_unlock_irqrestore_12(lock,flags);
  
#line 958 
  return;
}


#line 961  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_11n.c.aux"
static void ldv___ldv_spin_lock_95_1(spinlock_t *ldv_func_arg1)
{
  
#line 965 
  ldv_spin_model_lock((char *)"tx_ba_stream_tbl_lock_of_mwifiex_private");
  
#line 967 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 968 
  return;
}


#line 971  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_11n.c.aux"
static void ldv_spin_unlock_irqrestore_96_4(spinlock_t *lock, unsigned long flags)
{
  
#line 975 
  ldv_spin_model_unlock((char *)"tx_ba_stream_tbl_lock_of_mwifiex_private");
  
#line 977 
  spin_unlock_irqrestore_12(lock,flags);
  
#line 978 
  return;
}


#line 981  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_11n.c.aux"
static void ldv___ldv_spin_lock_97_2(spinlock_t *ldv_func_arg1)
{
  
#line 985 
  ldv_spin_model_lock((char *)"tx_ba_stream_tbl_lock_of_mwifiex_private");
  
#line 987 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 988 
  return;
}


#line 991  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_11n.c.aux"
static void ldv_spin_unlock_irqrestore_98_2(spinlock_t *lock, unsigned long flags)
{
  
#line 995 
  ldv_spin_model_unlock((char *)"tx_ba_stream_tbl_lock_of_mwifiex_private");
  
#line 997 
  spin_unlock_irqrestore_12(lock,flags);
  
#line 998 
  return;
}


#line 172  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timer.h"
static int ldv_del_timer_78(struct timer_list *ldv_func_arg1);


#line 176 
static int ldv_del_timer_79(struct timer_list *ldv_func_arg1);


#line 4200  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/cfg80211.h"
void cfg80211_michael_mic_failure(struct net_device *, u8 const *, enum nl80211_key_type, int, u8 const *, gfp_t);


#line 4712 
void cfg80211_cqm_rssi_notify(struct net_device *, enum nl80211_cqm_rssi_threshold_event, gfp_t);


#line 44  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_event.c"
void mwifiex_reset_connect_state(struct mwifiex_private *priv, u16 reason_code)
{
  bool tmp;
  
#line 46 
  struct mwifiex_adapter *adapter = priv->adapter;
  
#line 48 
  if ((unsigned int)priv->media_connected == 0U) 
#line 49 
                                                 goto return_label; else ;
  
#line 51 
  if ((adapter->debug_mask & 1073741824U) != 0U) {
    
#line 51 
    if (adapter->dev != (struct device *)0) 
#line 51 
                                            _dev_info((struct device const *)adapter->dev,"info: handles disconnect event\n"); else ;
  }
  else ;
  
#line 54 
  priv->media_connected = (unsigned char)0U;
  
#line 56 
  priv->scan_block = (unsigned char)0U;
  
#line 58 
  if (((unsigned long)priv->bss_role & 1UL) == 0UL && ((unsigned long)(priv->adapter)->fw_cap_info & 16384UL) != 0UL) {
    
#line 60 
    mwifiex_disable_all_tdls_links(priv);
    
#line 62 
    if ((int)(priv->adapter)->auto_tdls != 0) 
#line 63 
                                              mwifiex_clean_auto_tdls(priv); else ;
  }
  else ;
  
#line 67 
  mwifiex_clean_txrx(priv);
  
#line 70 
  priv->data_rssi_last = (short)0;
  
#line 71 
  priv->data_nf_last = (short)0;
  
#line 72 
  priv->data_rssi_avg = (short)0;
  
#line 73 
  priv->data_nf_avg = (short)0;
  
#line 74 
  priv->bcn_rssi_last = (short)0;
  
#line 75 
  priv->bcn_nf_last = (short)0;
  
#line 76 
  priv->bcn_rssi_avg = (short)0;
  
#line 77 
  priv->bcn_nf_avg = (short)0;
  
#line 78 
  priv->rxpd_rate = (unsigned char)0U;
  
#line 79 
  priv->rxpd_htinfo = (unsigned char)0U;
  
#line 80 
  priv->sec_info.wpa_enabled = (unsigned char)0U;
  
#line 81 
  priv->sec_info.wpa2_enabled = (unsigned char)0U;
  
#line 82 
  priv->wpa_ie_len = (unsigned char)0U;
  
#line 84 
  priv->sec_info.wapi_enabled = (unsigned char)0U;
  
#line 85 
  priv->wapi_ie_len = (unsigned char)0U;
  
#line 86 
  priv->sec_info.wapi_key_on = (unsigned char)0U;
  
#line 88 
  priv->sec_info.encryption_mode = 0U;
  
#line 91 
  priv->is_data_rate_auto = (unsigned char)1U;
  
#line 92 
  priv->data_rate = 0U;
  
#line 94 
  if (priv->hist_data != (struct mwifiex_histogram_data *)0) 
#line 96 
                                                             mwifiex_hist_data_reset(priv); else ;
  
#line 98 
  if (priv->bss_mode == 1U) {
    
#line 99 
    priv->adhoc_state = (unsigned char)0U;
    
#line 100 
    priv->adhoc_is_link_sensed = (unsigned char)0U;
  }
  else ;
  
#line 108 
  if ((adapter->debug_mask & 1073741824U) != 0U) {
    
#line 108 
    if (adapter->dev != (struct device *)0) 
#line 108 
                                            _dev_info((struct device const *)adapter->dev,"info: previous SSID=%s, SSID len=%u\n",(u8 *)(& priv->prev_ssid.ssid),(int)priv->prev_ssid.ssid_len); else ;
  }
  else ;
  
#line 112 
  if ((adapter->debug_mask & 1073741824U) != 0U) {
    
#line 112 
    if (adapter->dev != (struct device *)0) 
#line 112 
                                            _dev_info((struct device const *)adapter->dev,"info: current SSID=%s, SSID len=%u\n",(u8 *)(& priv->curr_bss_params.bss_descriptor.ssid.ssid),(int)priv->curr_bss_params.bss_descriptor.ssid.ssid_len); else ;
  }
  else ;
  
#line 117 
  memcpy((void *)(& priv->prev_ssid),(void const *)(& priv->curr_bss_params.bss_descriptor.ssid),33UL);
  
#line 121 
  memcpy((void *)(& priv->prev_bssid),(void const *)(& priv->curr_bss_params.bss_descriptor.mac_address),6UL);
  
#line 125 
  memset((void *)(& priv->curr_bss_params),0,360UL);
  
#line 127 
  adapter->tx_lock_flag = (unsigned char)0U;
  
#line 128 
  adapter->pps_uapsd_mode = (unsigned short)0U;
  
#line 130 
  if ((unsigned int)adapter->is_cmd_timedout != 0U && adapter->curr_cmd != (struct cmd_ctrl_node *)0) 
    
#line 131 
    goto return_label; else ;
  
#line 132 
  priv->media_connected = (unsigned char)0U;
  
#line 133 
  if ((adapter->debug_mask & 1U) != 0U) {
    
#line 133 
    if (adapter->dev != (struct device *)0) 
#line 133 
                                            _dev_info((struct device const *)adapter->dev,"info: successfully disconnected from %pM: reason code %d\n",(u8 *)(& priv->cfg_bssid),(int)reason_code); else ;
  }
  else ;
  
#line 136 
  if (priv->bss_mode == 2U || priv->bss_mode == 8U) 
#line 138 
                                                    cfg80211_disconnected(priv->netdev,(unsigned short)((int)reason_code),(u8 const *)0U,0UL,(_Bool)0,208U); else ;
  
#line 141 
  eth_zero_addr((u8 *)(& priv->cfg_bssid));
  
#line 143 
  mwifiex_stop_net_dev_queue(priv->netdev,adapter);
  
#line 144 
  tmp = netif_carrier_ok((struct net_device const *)priv->netdev);
  
#line 144 
  if ((int)tmp != 0) 
#line 145 
                     netif_carrier_off(priv->netdev); else ;
  return_label: 
#line 146 
                return;
}


#line 148  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_event.c"
static int mwifiex_parse_tdls_event(struct mwifiex_private *priv, struct sk_buff *event_skb)
{
  int __retres;
  struct mwifiex_sta_node *sta_ptr;
  
#line 151 
  int ret = 0;
  
#line 152 
  struct mwifiex_adapter *adapter = priv->adapter;
  
#line 154 
  struct mwifiex_tdls_generic_event *tdls_evt = (struct mwifiex_tdls_generic_event *)event_skb->data + 4U;
  
#line 158 
  if (event_skb->len <= 3U) {
    
#line 160 
    if ((adapter->debug_mask & 4U) != 0U) {
      
#line 160 
      if (adapter->dev != (struct device *)0) 
#line 160 
                                              _dev_info((struct device const *)adapter->dev,"Invalid event length!\n"); else ;
    }
    else ;
    
#line 161 
    __retres = -1;
    
#line 161 
    goto return_label;
  }
  else ;
  
#line 164 
  sta_ptr = mwifiex_get_sta_entry(priv,(u8 const *)(& tdls_evt->peer_mac));
  
#line 165 
  if (sta_ptr == (struct mwifiex_sta_node *)0) {
    
#line 166 
    if ((adapter->debug_mask & 4U) != 0U) {
      
#line 166 
      if (adapter->dev != (struct device *)0) 
#line 166 
                                              _dev_info((struct device const *)adapter->dev,"cannot get sta entry!\n"); else ;
    }
    else ;
    
#line 167 
    __retres = -1;
    
#line 167 
    goto return_label;
  }
  else ;
  
#line 170 
  switch ((int)tdls_evt->type) {
    case 3: 
#line 171 
    ;
    
#line 172 
    cfg80211_tdls_oper_request(priv->netdev,(u8 const *)(& tdls_evt->peer_mac),(enum nl80211_tdls_operation)NL80211_TDLS_TEARDOWN,(unsigned short)((int)tdls_evt->u.reason_code),208U);
    
#line 177 
    goto ldv_61476;
    default: 
#line 178 
    ;
    
#line 179 
    goto ldv_61476;
  }
  ldv_61476: 
#line 182 
  ;
  
#line 182 
  __retres = ret;
  return_label: 
#line 182 
                return __retres;
}


#line 188  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_event.c"
void mwifiex_bt_coex_wlan_param_update_event(struct mwifiex_private *priv, struct sk_buff *event_skb)
{
  struct mwifiex_ie_types_header *tlv;
  struct mwifiex_ie_types_btcoex_aggr_win_size *winsizetlv;
  struct mwifiex_ie_types_btcoex_scan_time *scantlv;
  u16 tlv_type;
  u16 tlv_len;
  
#line 191 
  struct mwifiex_adapter *adapter = priv->adapter;
  
#line 195 
  s32 len = (int)(event_skb->len + 4294967292U);
  
#line 196 
  u8 *cur_ptr = event_skb->data + 4U;
  
#line 199 
  goto ldv_61496;
  ldv_61495: 
#line 200 
  ;
  
#line 200 
  tlv = (struct mwifiex_ie_types_header *)cur_ptr;
  
#line 201 
  tlv_len = tlv->len;
  
#line 202 
  tlv_type = tlv->type;
  
#line 204 
  if ((unsigned long)tlv_len + 4UL > (unsigned long)len) 
#line 205 
                                                         goto ldv_61490; else ;
  
#line 206 
  switch ((int)tlv_type) {
    case 458: 
#line 207 
    ;
    
#line 208 
    winsizetlv = (struct mwifiex_ie_types_btcoex_aggr_win_size *)tlv;
    
#line 210 
    adapter->coex_win_size = winsizetlv->coex_win_size;
    
#line 211 
    adapter->coex_tx_win_size = winsizetlv->tx_win_size;
    
#line 213 
    adapter->coex_rx_win_size = winsizetlv->rx_win_size;
    
#line 215 
    mwifiex_coex_ampdu_rxwinsize(adapter);
    
#line 216 
    mwifiex_update_ampdu_txwinsize(adapter);
    
#line 217 
    goto ldv_61492;
    case 459: 
#line 219 
    ;
    
#line 220 
    scantlv = (struct mwifiex_ie_types_btcoex_scan_time *)tlv;
    
#line 222 
    adapter->coex_scan = scantlv->coex_scan;
    
#line 223 
    adapter->coex_min_scan_time = (unsigned char)scantlv->min_scan_time;
    
#line 224 
    adapter->coex_max_scan_time = (unsigned char)scantlv->max_scan_time;
    
#line 225 
    goto ldv_61492;
    default: 
#line 227 
    ;
    
#line 228 
    goto ldv_61492;
  }
  ldv_61492: 
#line 231 
  ;
  
#line 231 
  len = (int)((unsigned int)(len - (s32)tlv_len) + 4294967292U);
  
#line 232 
  cur_ptr += (unsigned int)tlv_len + 4U;
  ldv_61496: 
#line 233 
  ;
  
#line 199 
  if ((unsigned int)len > 3U) 
#line 201 
                              goto ldv_61495; else 
#line 204 
                                                   goto ldv_61490;
  ldv_61490: 
#line 205 
  ;
  {
    
#line 236 
    struct _ddebug descriptor = {.modname = "mwifiex", .function = "mwifiex_bt_coex_wlan_param_update_event", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_event.c", .format = "coex_scan=%d min_scan=%d coex_win=%d, tx_win=%d rx_win=%d\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))239U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 236 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 236 
                                                        __dynamic_dev_dbg(& descriptor,(struct device const *)adapter->dev,"coex_scan=%d min_scan=%d coex_win=%d, tx_win=%d rx_win=%d\n",(int)adapter->coex_scan,(int)adapter->coex_min_scan_time,(int)adapter->coex_win_size,(int)adapter->coex_tx_win_size,(int)adapter->coex_rx_win_size); else ;
  }
  
#line 238 
  return;
}


#line 293  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_event.c"
int mwifiex_process_sta_event(struct mwifiex_private *priv)
{
  int __retres;
  u16 ctrl;
  u16 reason_code;
  
#line 295 
  struct mwifiex_adapter *adapter = priv->adapter;
  
#line 296 
  int ret = 0;
  
#line 297 
  u32 eventcause = adapter->event_cause;
  
#line 300 
  switch (eventcause) {
    int tmp_0;
    bool tmp;
    bool tmp_3;
    int tmp_5;
    unsigned long tmp_6;
    case (u32)1: 
#line 301 
    ;
    
#line 302 
    if ((adapter->debug_mask & 4U) != 0U) {
      
#line 302 
      if (adapter->dev != (struct device *)0) 
#line 302 
                                              _dev_info((struct device const *)adapter->dev,"invalid EVENT: DUMMY_HOST_WAKEUP_SIGNAL, ignore it\n"); else ;
    }
    else ;
    
#line 304 
    goto ldv_61508;
    case (u32)4: 
#line 305 
    ;
    
#line 306 
    if ((adapter->debug_mask & 32U) != 0U) {
      
#line 306 
      if (adapter->dev != (struct device *)0) 
#line 306 
                                              _dev_info((struct device const *)adapter->dev,"event: LINK_SENSED\n"); else ;
    }
    else ;
    
#line 307 
    tmp = netif_carrier_ok((struct net_device const *)priv->netdev);
    
#line 307 
    if (tmp) 
#line 307 
             tmp_0 = 0; else 
#line 307 
                             tmp_0 = 1;
    
#line 307 
    if (tmp_0) 
#line 308 
               netif_carrier_on(priv->netdev); else ;
    
#line 309 
    mwifiex_wake_up_net_dev_queue(priv->netdev,adapter);
    
#line 310 
    goto ldv_61508;
    case (u32)8: 
#line 312 
    ;
    
#line 313 
    if ((adapter->debug_mask & 32U) != 0U) {
      
#line 313 
      if (adapter->dev != (struct device *)0) 
#line 313 
                                              _dev_info((struct device const *)adapter->dev,"event: Deauthenticated\n"); else ;
    }
    else ;
    
#line 314 
    if ((unsigned int)priv->wps.session_enable != 0U) {
      
#line 315 
      if ((adapter->debug_mask & 1073741824U) != 0U) {
        
#line 315 
        if (adapter->dev != (struct device *)0) 
#line 315 
                                                _dev_info((struct device const *)adapter->dev,"info: receive deauth event in wps session\n"); else ;
      }
      else ;
      
#line 317 
      goto ldv_61508;
    }
    else ;
    
#line 319 
    adapter->dbg.num_event_deauth += 1U;
    
#line 320 
    if ((unsigned int)priv->media_connected != 0U) {
      
#line 321 
      reason_code = *((__le16 *)(& adapter->event_body));
      
#line 323 
      mwifiex_reset_connect_state(priv,(unsigned short)((int)reason_code));
    }
    else ;
    
#line 325 
    goto ldv_61508;
    case (u32)9: 
#line 327 
    ;
    
#line 328 
    if ((adapter->debug_mask & 32U) != 0U) {
      
#line 328 
      if (adapter->dev != (struct device *)0) 
#line 328 
                                              _dev_info((struct device const *)adapter->dev,"event: Disassociated\n"); else ;
    }
    else ;
    
#line 329 
    if ((unsigned int)priv->wps.session_enable != 0U) {
      
#line 330 
      if ((adapter->debug_mask & 1073741824U) != 0U) {
        
#line 330 
        if (adapter->dev != (struct device *)0) 
#line 330 
                                                _dev_info((struct device const *)adapter->dev,"info: receive disassoc event in wps session\n"); else ;
      }
      else ;
      
#line 332 
      goto ldv_61508;
    }
    else ;
    
#line 334 
    adapter->dbg.num_event_disassoc += 1U;
    
#line 335 
    if ((unsigned int)priv->media_connected != 0U) {
      
#line 336 
      reason_code = *((__le16 *)(& adapter->event_body));
      
#line 338 
      mwifiex_reset_connect_state(priv,(unsigned short)((int)reason_code));
    }
    else ;
    
#line 340 
    goto ldv_61508;
    case (u32)3: 
#line 342 
    ;
    
#line 343 
    if ((adapter->debug_mask & 32U) != 0U) {
      
#line 343 
      if (adapter->dev != (struct device *)0) 
#line 343 
                                              _dev_info((struct device const *)adapter->dev,"event: Link lost\n"); else ;
    }
    else ;
    
#line 344 
    adapter->dbg.num_event_link_lost += 1U;
    
#line 345 
    if ((unsigned int)priv->media_connected != 0U) {
      
#line 346 
      reason_code = *((__le16 *)(& adapter->event_body));
      
#line 348 
      mwifiex_reset_connect_state(priv,(unsigned short)((int)reason_code));
    }
    else ;
    
#line 350 
    goto ldv_61508;
    case (u32)11: 
#line 352 
    ;
    
#line 353 
    if ((adapter->debug_mask & 32U) != 0U) {
      
#line 353 
      if (adapter->dev != (struct device *)0) 
#line 353 
                                              _dev_info((struct device const *)adapter->dev,"info: EVENT: SLEEP\n"); else ;
    }
    else ;
    
#line 355 
    adapter->ps_state = 1U;
    
#line 357 
    mwifiex_check_ps_cond(adapter);
    
#line 358 
    goto ldv_61508;
    case (u32)10: 
#line 360 
    ;
    
#line 361 
    if ((adapter->debug_mask & 32U) != 0U) {
      
#line 361 
      if (adapter->dev != (struct device *)0) 
#line 361 
                                              _dev_info((struct device const *)adapter->dev,"info: EVENT: AWAKE\n"); else ;
    }
    else ;
    
#line 362 
    if (((unsigned int)adapter->pps_uapsd_mode == 0U && (unsigned int)priv->media_connected != 0U) && (unsigned int)adapter->sleep_period.period != 0U) {
      
#line 364 
      adapter->pps_uapsd_mode = (unsigned short)1U;
      
#line 365 
      if ((adapter->debug_mask & 32U) != 0U) {
        
#line 365 
        if (adapter->dev != (struct device *)0) 
#line 365 
                                                _dev_info((struct device const *)adapter->dev,"event: PPS/UAPSD mode activated\n"); else ;
      }
      else ;
    }
    else ;
    
#line 368 
    adapter->tx_lock_flag = (unsigned char)0U;
    
#line 369 
    if ((unsigned int)adapter->pps_uapsd_mode != 0U && (unsigned int)adapter->gen_null_pkt != 0U) {
      u8 tmp_2;
      
#line 370 
      tmp_2 = mwifiex_check_last_packet_indication(priv);
      
#line 370 
      if ((unsigned int)tmp_2 != 0U) {
        int tmp_1;
        
#line 371 
        if ((unsigned int)adapter->data_sent != 0U) {
          
#line 372 
          adapter->ps_state = 0U;
          
#line 373 
          adapter->pm_wakeup_card_req = (unsigned char)0U;
          
#line 374 
          adapter->pm_wakeup_fw_try = 0U;
          
#line 375 
          ldv_del_timer_78(& adapter->wakeup_timer);
          
#line 376 
          goto ldv_61508;
        }
        else ;
        
#line 378 
        tmp_1 = mwifiex_send_null_packet(priv,(unsigned char)9);
        
#line 378 
        if (tmp_1 == 0) 
#line 382 
                        adapter->ps_state = 3U; else ;
        
#line 384 
        __retres = 0;
        
#line 384 
        goto return_label;
      }
      else ;
    }
    else ;
    
#line 387 
    adapter->ps_state = 0U;
    
#line 388 
    adapter->pm_wakeup_card_req = (unsigned char)0U;
    
#line 389 
    adapter->pm_wakeup_fw_try = 0U;
    
#line 390 
    ldv_del_timer_79(& adapter->wakeup_timer);
    
#line 392 
    goto ldv_61508;
    case (u32)16: 
#line 394 
    ;
    
#line 395 
    (*(adapter->if_ops.wakeup_complete))(adapter);
    
#line 396 
    if ((adapter->debug_mask & 32U) != 0U) {
      
#line 396 
      if (adapter->dev != (struct device *)0) 
#line 396 
                                              _dev_info((struct device const *)adapter->dev,"event: DS_AWAKE\n"); else ;
    }
    else ;
    
#line 397 
    if ((unsigned int)adapter->is_deep_sleep != 0U) 
#line 398 
                                                    adapter->is_deep_sleep = (unsigned char)0U; else ;
    
#line 399 
    goto ldv_61508;
    case (u32)71: 
#line 401 
    ;
    
#line 402 
    if ((adapter->debug_mask & 32U) != 0U) {
      
#line 402 
      if (adapter->dev != (struct device *)0) 
#line 402 
                                              _dev_info((struct device const *)adapter->dev,"event: HS_ACT_REQ\n"); else ;
    }
    else ;
    
#line 403 
    ret = mwifiex_send_cmd(priv,(unsigned short)229,(unsigned short)0,0U,(void *)0,(_Bool)0);
    
#line 405 
    goto ldv_61508;
    case (u32)14: 
#line 407 
    ;
    
#line 408 
    if ((adapter->debug_mask & 32U) != 0U) {
      
#line 408 
      if (adapter->dev != (struct device *)0) 
#line 408 
                                              _dev_info((struct device const *)adapter->dev,"event: UNICAST MIC ERROR\n"); else ;
    }
    else ;
    
#line 409 
    cfg80211_michael_mic_failure(priv->netdev,(u8 const *)(& priv->cfg_bssid),(enum nl80211_key_type)NL80211_KEYTYPE_PAIRWISE,-1,(u8 const *)0U,208U);
    
#line 412 
    goto ldv_61508;
    case (u32)13: 
#line 414 
    ;
    
#line 415 
    if ((adapter->debug_mask & 32U) != 0U) {
      
#line 415 
      if (adapter->dev != (struct device *)0) 
#line 415 
                                              _dev_info((struct device const *)adapter->dev,"event: MULTICAST MIC ERROR\n"); else ;
    }
    else ;
    
#line 416 
    cfg80211_michael_mic_failure(priv->netdev,(u8 const *)(& priv->cfg_bssid),(enum nl80211_key_type)NL80211_KEYTYPE_GROUP,-1,(u8 const *)0U,208U);
    
#line 419 
    goto ldv_61508;
    case (u32)6: 
#line 420 
    ;
    case (u32)7: 
#line 421 
    ;
    
#line 422 
    goto ldv_61508;
    case (u32)17: 
#line 424 
    ;
    
#line 425 
    if ((adapter->debug_mask & 32U) != 0U) {
      
#line 425 
      if (adapter->dev != (struct device *)0) 
#line 425 
                                              _dev_info((struct device const *)adapter->dev,"event: ADHOC_BCN_LOST\n"); else ;
    }
    else ;
    
#line 426 
    priv->adhoc_is_link_sensed = (unsigned char)0U;
    
#line 427 
    mwifiex_clean_txrx(priv);
    
#line 428 
    mwifiex_stop_net_dev_queue(priv->netdev,adapter);
    
#line 429 
    tmp_3 = netif_carrier_ok((struct net_device const *)priv->netdev);
    
#line 429 
    if ((int)tmp_3 != 0) 
#line 430 
                         netif_carrier_off(priv->netdev); else ;
    
#line 431 
    goto ldv_61508;
    case (u32)24: 
#line 433 
    ;
    
#line 434 
    if ((adapter->debug_mask & 32U) != 0U) {
      
#line 434 
      if (adapter->dev != (struct device *)0) 
#line 434 
                                              _dev_info((struct device const *)adapter->dev,"event: BGS_REPORT\n"); else ;
    }
    else ;
    
#line 435 
    ret = mwifiex_send_cmd(priv,(unsigned short)108,(unsigned short)0,0U,(void *)0,(_Bool)0);
    
#line 437 
    goto ldv_61508;
    case (u32)43: 
#line 439 
    ;
    
#line 440 
    if ((adapter->debug_mask & 32U) != 0U) {
      
#line 440 
      if (adapter->dev != (struct device *)0) 
#line 440 
                                              _dev_info((struct device const *)adapter->dev,"event: PORT RELEASE\n"); else ;
    }
    else ;
    
#line 441 
    goto ldv_61508;
    case (u32)88: 
#line 443 
    ;
    
#line 444 
    if ((adapter->debug_mask & 32U) != 0U) {
      
#line 444 
      if (adapter->dev != (struct device *)0) 
#line 444 
                                              _dev_info((struct device const *)adapter->dev,"event: EXT_SCAN Report\n"); else ;
    }
    else ;
    
#line 445 
    if ((int)adapter->ext_scan != 0) 
#line 446 
                                     ret = mwifiex_handle_event_ext_scan_report(priv,(void *)(adapter->event_skb)->data); else ;
    
#line 449 
    goto ldv_61508;
    case (u32)23: 
#line 451 
    ;
    
#line 452 
    if ((adapter->debug_mask & 32U) != 0U) {
      
#line 452 
      if (adapter->dev != (struct device *)0) 
#line 452 
                                              _dev_info((struct device const *)adapter->dev,"event: WMM status changed\n"); else ;
    }
    else ;
    
#line 453 
    ret = mwifiex_send_cmd(priv,(unsigned short)113,(unsigned short)0,0U,(void *)0,(_Bool)0);
    
#line 455 
    goto ldv_61508;
    case (u32)25: 
#line 457 
    ;
    
#line 458 
    cfg80211_cqm_rssi_notify(priv->netdev,(enum nl80211_cqm_rssi_threshold_event)NL80211_CQM_RSSI_THRESHOLD_EVENT_LOW,208U);
    
#line 461 
    mwifiex_send_cmd(priv,(unsigned short)164,(unsigned short)0,0U,(void *)0,(_Bool)0);
    
#line 463 
    priv->subsc_evt_rssi_state = (unsigned char)1U;
    
#line 464 
    if ((adapter->debug_mask & 32U) != 0U) {
      
#line 464 
      if (adapter->dev != (struct device *)0) 
#line 464 
                                              _dev_info((struct device const *)adapter->dev,"event: Beacon RSSI_LOW\n"); else ;
    }
    else ;
    
#line 465 
    goto ldv_61508;
    case (u32)26: 
#line 466 
    ;
    
#line 467 
    if ((adapter->debug_mask & 32U) != 0U) {
      
#line 467 
      if (adapter->dev != (struct device *)0) 
#line 467 
                                              _dev_info((struct device const *)adapter->dev,"event: Beacon SNR_LOW\n"); else ;
    }
    else ;
    
#line 468 
    goto ldv_61508;
    case (u32)27: 
#line 469 
    ;
    
#line 470 
    if ((adapter->debug_mask & 32U) != 0U) {
      
#line 470 
      if (adapter->dev != (struct device *)0) 
#line 470 
                                              _dev_info((struct device const *)adapter->dev,"event: MAX_FAIL\n"); else ;
    }
    else ;
    
#line 471 
    goto ldv_61508;
    case (u32)28: 
#line 472 
    ;
    
#line 473 
    cfg80211_cqm_rssi_notify(priv->netdev,(enum nl80211_cqm_rssi_threshold_event)NL80211_CQM_RSSI_THRESHOLD_EVENT_HIGH,208U);
    
#line 476 
    mwifiex_send_cmd(priv,(unsigned short)164,(unsigned short)0,0U,(void *)0,(_Bool)0);
    
#line 478 
    priv->subsc_evt_rssi_state = (unsigned char)2U;
    
#line 479 
    if ((adapter->debug_mask & 32U) != 0U) {
      
#line 479 
      if (adapter->dev != (struct device *)0) 
#line 479 
                                              _dev_info((struct device const *)adapter->dev,"event: Beacon RSSI_HIGH\n"); else ;
    }
    else ;
    
#line 480 
    goto ldv_61508;
    case (u32)29: 
#line 481 
    ;
    
#line 482 
    if ((adapter->debug_mask & 32U) != 0U) {
      
#line 482 
      if (adapter->dev != (struct device *)0) 
#line 482 
                                              _dev_info((struct device const *)adapter->dev,"event: Beacon SNR_HIGH\n"); else ;
    }
    else ;
    
#line 483 
    goto ldv_61508;
    case (u32)36: 
#line 484 
    ;
    
#line 485 
    if ((adapter->debug_mask & 32U) != 0U) {
      
#line 485 
      if (adapter->dev != (struct device *)0) 
#line 485 
                                              _dev_info((struct device const *)adapter->dev,"event: Data RSSI_LOW\n"); else ;
    }
    else ;
    
#line 486 
    goto ldv_61508;
    case (u32)37: 
#line 487 
    ;
    
#line 488 
    if ((adapter->debug_mask & 32U) != 0U) {
      
#line 488 
      if (adapter->dev != (struct device *)0) 
#line 488 
                                              _dev_info((struct device const *)adapter->dev,"event: Data SNR_LOW\n"); else ;
    }
    else ;
    
#line 489 
    goto ldv_61508;
    case (u32)38: 
#line 490 
    ;
    
#line 491 
    if ((adapter->debug_mask & 32U) != 0U) {
      
#line 491 
      if (adapter->dev != (struct device *)0) 
#line 491 
                                              _dev_info((struct device const *)adapter->dev,"event: Data RSSI_HIGH\n"); else ;
    }
    else ;
    
#line 492 
    goto ldv_61508;
    case (u32)39: 
#line 493 
    ;
    
#line 494 
    if ((adapter->debug_mask & 32U) != 0U) {
      
#line 494 
      if (adapter->dev != (struct device *)0) 
#line 494 
                                              _dev_info((struct device const *)adapter->dev,"event: Data SNR_HIGH\n"); else ;
    }
    else ;
    
#line 495 
    goto ldv_61508;
    case (u32)40: 
#line 496 
    ;
    
#line 497 
    if ((adapter->debug_mask & 32U) != 0U) {
      
#line 497 
      if (adapter->dev != (struct device *)0) 
#line 497 
                                              _dev_info((struct device const *)adapter->dev,"event: Link Quality\n"); else ;
    }
    else ;
    
#line 498 
    goto ldv_61508;
    case (u32)49: 
#line 499 
    ;
    
#line 500 
    if ((adapter->debug_mask & 32U) != 0U) {
      
#line 500 
      if (adapter->dev != (struct device *)0) 
#line 500 
                                              _dev_info((struct device const *)adapter->dev,"event: Pre-Beacon Lost\n"); else ;
    }
    else ;
    
#line 501 
    goto ldv_61508;
    case (u32)30: 
#line 502 
    ;
    
#line 503 
    if ((adapter->debug_mask & 32U) != 0U) {
      
#line 503 
      if (adapter->dev != (struct device *)0) 
#line 503 
                                              _dev_info((struct device const *)adapter->dev,"event: IBSS_COALESCED\n"); else ;
    }
    else ;
    
#line 504 
    ret = mwifiex_send_cmd(priv,(unsigned short)131,(unsigned short)0,0U,(void *)0,(_Bool)0);
    
#line 507 
    goto ldv_61508;
    case (u32)51: 
#line 508 
    ;
    
#line 509 
    if ((adapter->debug_mask & 32U) != 0U) {
      
#line 509 
      if (adapter->dev != (struct device *)0) 
#line 509 
                                              _dev_info((struct device const *)adapter->dev,"event: ADDBA Request\n"); else ;
    }
    else ;
    
#line 510 
    mwifiex_send_cmd(priv,(unsigned short)207,(unsigned short)1,0U,(void *)(& adapter->event_body),(_Bool)0);
    
#line 513 
    goto ldv_61508;
    case (u32)52: 
#line 514 
    ;
    
#line 515 
    if ((adapter->debug_mask & 32U) != 0U) {
      
#line 515 
      if (adapter->dev != (struct device *)0) 
#line 515 
                                              _dev_info((struct device const *)adapter->dev,"event: DELBA Request\n"); else ;
    }
    else ;
    
#line 516 
    mwifiex_11n_delete_ba_stream(priv,(u8 *)(& adapter->event_body));
    
#line 517 
    goto ldv_61508;
    case (u32)55: 
#line 518 
    ;
    
#line 519 
    if ((adapter->debug_mask & 32U) != 0U) {
      
#line 519 
      if (adapter->dev != (struct device *)0) 
#line 519 
                                              _dev_info((struct device const *)adapter->dev,"event:  BA Stream timeout\n"); else ;
    }
    else ;
    
#line 520 
    mwifiex_11n_ba_stream_timeout(priv,(struct host_cmd_ds_11n_batimeout *)(& adapter->event_body));
    
#line 524 
    goto ldv_61508;
    case (u32)66: 
#line 525 
    ;
    
#line 526 
    ctrl = *((__le16 *)(& adapter->event_body));
    
#line 527 
    if ((adapter->debug_mask & 32U) != 0U) {
      
#line 527 
      if (adapter->dev != (struct device *)0) 
#line 527 
                                              _dev_info((struct device const *)adapter->dev,"event: AMSDU_AGGR_CTRL %d\n",(int)ctrl); else ;
    }
    else ;
    {
      int tmp_4;
      
#line 531 
      u16 __min1 = adapter->curr_tx_buf_size;
      
#line 531 
      u16 __min2 = ctrl;
      
#line 531 
      if ((int)__min1 < (int)__min2) 
#line 531 
                                     tmp_4 = (int)__min1; else 
#line 531 
                                                               tmp_4 = (int)__min2;
      
#line 531 
      tmp_5 = tmp_4;
    }
    
#line 530 
    adapter->tx_buf_size = (unsigned short)tmp_5;
    
#line 532 
    if ((adapter->debug_mask & 32U) != 0U) {
      
#line 532 
      if (adapter->dev != (struct device *)0) 
#line 532 
                                              _dev_info((struct device const *)adapter->dev,"event: tx_buf_size %d\n",(int)adapter->tx_buf_size); else ;
    }
    else ;
    
#line 534 
    goto ldv_61508;
    case (u32)70: 
#line 536 
    ;
    
#line 537 
    if ((adapter->debug_mask & 32U) != 0U) {
      
#line 537 
      if (adapter->dev != (struct device *)0) 
#line 537 
                                              _dev_info((struct device const *)adapter->dev,"event: WEP ICV error\n"); else ;
    }
    else ;
    
#line 538 
    goto ldv_61508;
    case (u32)72: 
#line 540 
    ;
    
#line 541 
    if ((adapter->debug_mask & 32U) != 0U) {
      
#line 541 
      if (adapter->dev != (struct device *)0) 
#line 541 
                                              _dev_info((struct device const *)adapter->dev,"event: BW Change\n"); else ;
    }
    else ;
    
#line 542 
    goto ldv_61508;
    case (u32)77: 
#line 544 
    ;
    
#line 545 
    if ((adapter->debug_mask & 32U) != 0U) {
      
#line 545 
      if (adapter->dev != (struct device *)0) 
#line 545 
                                              _dev_info((struct device const *)adapter->dev,"event: HOSTWAKE_STAIE %d\n",eventcause); else ;
    }
    else ;
    
#line 547 
    goto ldv_61508;
    case (u32)95: 
#line 549 
    ;
    
#line 550 
    if ((adapter->debug_mask & 32U) != 0U) {
      
#line 550 
      if (adapter->dev != (struct device *)0) 
#line 550 
                                              _dev_info((struct device const *)adapter->dev,"event: Remain on channel expired\n"); else ;
    }
    else ;
    
#line 552 
    cfg80211_remain_on_channel_expired(& priv->wdev,priv->roc_cfg.cookie,& priv->roc_cfg.chan,32U);
    
#line 557 
    memset((void *)(& priv->roc_cfg),0,72UL);
    
#line 559 
    goto ldv_61508;
    case (u32)80: 
#line 561 
    ;
    
#line 562 
    if ((adapter->debug_mask & 32U) != 0U) {
      
#line 562 
      if (adapter->dev != (struct device *)0) 
#line 562 
                                              _dev_info((struct device const *)adapter->dev,"event: Channel Switch Announcement\n"); else ;
    }
    else ;
    
#line 563 
    tmp_6 = msecs_to_jiffies(10000U);
    
#line 563 
    priv->csa_expire_time = tmp_6 + jiffies;
    
#line 565 
    priv->csa_chan = (unsigned char)priv->curr_bss_params.bss_descriptor.channel;
    
#line 566 
    ret = mwifiex_send_cmd(priv,(unsigned short)36,(unsigned short)1,0U,(void *)(& priv->curr_bss_params.bss_descriptor.mac_address),(_Bool)0);
    
#line 570 
    goto ldv_61508;
    case (u32)82: 
#line 572 
    ;
    
#line 573 
    ret = mwifiex_parse_tdls_event(priv,adapter->event_skb);
    
#line 574 
    goto ldv_61508;
    case (u32)116: 
#line 576 
    ;
    
#line 577 
    if ((adapter->debug_mask & 32U) != 0U) {
      
#line 577 
      if (adapter->dev != (struct device *)0) 
#line 577 
                                              _dev_info((struct device const *)adapter->dev,"event: TX_STATUS Report\n"); else ;
    }
    else ;
    
#line 578 
    mwifiex_parse_tx_status_event(priv,(void *)(& adapter->event_body));
    
#line 579 
    goto ldv_61508;
    case (u32)84: 
#line 581 
    ;
    
#line 582 
    if ((adapter->debug_mask & 32U) != 0U) {
      
#line 582 
      if (adapter->dev != (struct device *)0) 
#line 582 
                                              _dev_info((struct device const *)adapter->dev,"event: Channel Report\n"); else ;
    }
    else ;
    
#line 583 
    ret = mwifiex_11h_handle_chanrpt_ready(priv,adapter->event_skb);
    
#line 585 
    goto ldv_61508;
    case (u32)83: 
#line 586 
    ;
    
#line 587 
    if ((adapter->debug_mask & 32U) != 0U) {
      
#line 587 
      if (adapter->dev != (struct device *)0) 
#line 587 
                                              _dev_info((struct device const *)adapter->dev,"event: Radar detected\n"); else ;
    }
    else ;
    
#line 588 
    ret = mwifiex_11h_handle_radar_detected(priv,adapter->event_skb);
    
#line 590 
    goto ldv_61508;
    case (u32)118: 
#line 591 
    ;
    {
      
#line 592 
      struct _ddebug descriptor = {.modname = "mwifiex", .function = "mwifiex_process_sta_event", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/sta_event.c", .format = "EVENT: BT coex wlan param update\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))592U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 592 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 592 
                                                          __dynamic_dev_dbg(& descriptor,(struct device const *)adapter->dev,"EVENT: BT coex wlan param update\n"); else ;
    }
    
#line 593 
    mwifiex_bt_coex_wlan_param_update_event(priv,adapter->event_skb);
    
#line 595 
    goto ldv_61508;
    default: 
#line 596 
    ;
    
#line 597 
    if ((adapter->debug_mask & 4U) != 0U) {
      
#line 597 
      if (adapter->dev != (struct device *)0) 
#line 597 
                                              _dev_info((struct device const *)adapter->dev,"event: unknown event id: %#x\n",eventcause); else ;
    }
    else ;
    
#line 599 
    goto ldv_61508;
  }
  ldv_61508: 
#line 602 
  ;
  
#line 602 
  __retres = ret;
  return_label: 
#line 602 
                return __retres;
}


#line 791  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_sta_event.c.aux"
static int ldv_del_timer_78(struct timer_list *ldv_func_arg1)
{
  int tmp;
  
#line 795 
  tmp = ldv_emg_del_timer(ldv_func_arg1);
  
#line 795 
  return tmp;
}


#line 799  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/weaver/.tmp_sta_event.c.aux"
static int ldv_del_timer_79(struct timer_list *ldv_func_arg1)
{
  int tmp;
  
#line 803 
  tmp = ldv_emg_del_timer(ldv_func_arg1);
  
#line 803 
  return tmp;
}


#line 448  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/workqueue.h"
bool cancel_delayed_work_sync(struct delayed_work *);


#line 4760  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/cfg80211.h"
void cfg80211_radar_event(struct wiphy *, struct cfg80211_chan_def *, gfp_t);


#line 4774 
void cfg80211_cac_event(struct net_device *, struct cfg80211_chan_def const *, enum nl80211_radar_event, gfp_t);


#line 4896 
void cfg80211_ch_switch_notify(struct net_device *, struct cfg80211_chan_def *);


#line 1506  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/main.h"
int mwifiex_stop_radar_detection(struct mwifiex_private *priv, struct cfg80211_chan_def *chandef);


#line 24  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11h.c"
void mwifiex_init_11h_params(struct mwifiex_private *priv)
{
  
#line 26 
  priv->state_11h.is_11h_enabled = (_Bool)1;
  
#line 27 
  priv->state_11h.is_11h_active = (_Bool)0;
  
#line 28 
  return;
}


#line 30  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11h.c"
int mwifiex_is_11h_active(struct mwifiex_private *priv)
{
  int __retres;
  
#line 32 
  __retres = (int)priv->state_11h.is_11h_active;
  
#line 32 
  return __retres;
}


#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11h.c"
static void mwifiex_11h_process_infra_join(struct mwifiex_private *priv, u8 **buffer, struct mwifiex_bssdescriptor *bss_desc)
{
  struct mwifiex_ie_types_header *ie_header;
  struct mwifiex_ie_types_pwr_capability *cap;
  struct mwifiex_ie_types_local_pwr_constraint *constraint;
  struct ieee80211_supported_band *sband;
  u8 radio_type;
  int i;
  u8 *tmp;
  u8 *tmp_0;
  u8 *tmp_1;
  int tmp_2;
  u8 *tmp_3;
  
#line 48 
  if (buffer == (u8 **)0U || *buffer == (u8 *)0U) 
#line 49 
                                                  goto return_label; else ;
  
#line 51 
  radio_type = mwifiex_band_to_radio_type((unsigned char)((int)((unsigned char)bss_desc->bss_band)));
  
#line 52 
  sband = (priv->wdev.wiphy)->bands[(int)radio_type];
  
#line 54 
  cap = (struct mwifiex_ie_types_pwr_capability *)*buffer;
  
#line 55 
  cap->header.type = (unsigned short)33U;
  
#line 56 
  cap->header.len = (unsigned short)2U;
  
#line 57 
  cap->min_pwr = (signed char)0;
  
#line 58 
  cap->max_pwr = (signed char)0;
  
#line 59 
  *buffer += 6U;
  
#line 61 
  constraint = (struct mwifiex_ie_types_local_pwr_constraint *)*buffer;
  
#line 62 
  constraint->header.type = (unsigned short)32U;
  
#line 63 
  constraint->header.len = (unsigned short)2U;
  
#line 64 
  constraint->chan = (unsigned char)bss_desc->channel;
  
#line 65 
  constraint->constraint = bss_desc->local_constraint;
  
#line 66 
  *buffer += 6U;
  
#line 68 
  ie_header = (struct mwifiex_ie_types_header *)*buffer;
  
#line 69 
  ie_header->type = (unsigned short)266U;
  
#line 70 
  ie_header->len = (unsigned short)(((unsigned int)((unsigned short)sband->n_channels) + 1U) * 2U);
  
#line 71 
  *buffer += 4U;
  
#line 72 
  tmp = *buffer;
  
#line 72 
  *buffer += 1;
  
#line 72 
  *tmp = (unsigned char)36U;
  
#line 73 
  tmp_0 = *buffer;
  
#line 73 
  *buffer += 1;
  
#line 73 
  *tmp_0 = (unsigned char)((unsigned int)((unsigned char)sband->n_channels) * 2U);
  
#line 74 
  i = 0;
  
#line 74 
  goto ldv_61201;
  ldv_61200: 
#line 75 
  ;
  
#line 75 
  tmp_1 = *buffer;
  
#line 75 
  *buffer += 1;
  
#line 75 
  tmp_2 = ieee80211_frequency_to_channel((int)(sband->channels + i)->center_freq);
  
#line 75 
  *tmp_1 = (unsigned char)tmp_2;
  
#line 77 
  tmp_3 = *buffer;
  
#line 77 
  *buffer += 1;
  
#line 77 
  *tmp_3 = (unsigned char)1U;
  
#line 74 
  i += 1;
  ldv_61201: 
#line 75 
  ;
  
#line 74 
  if (sband->n_channels > i) 
#line 76 
                             goto ldv_61200; else 
#line 79 
                                                  goto ldv_61202;
  ldv_61202: 
#line 80 
  ;
  return_label: 
#line 81 
                return;
}


#line 82  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11h.c"
int mwifiex_11h_activate(struct mwifiex_private *priv, bool flag)
{
  int tmp;
  
#line 84 
  u32 enable = (unsigned int)flag;
  
#line 87 
  if (((unsigned long)priv->bss_role & 1UL) != 0UL && enable != 0U) 
#line 88 
                                                                    enable |= 2U; else ;
  
#line 90 
  tmp = mwifiex_send_cmd(priv,(unsigned short)22,(unsigned short)1,10U,(void *)(& enable),(_Bool)1);
  
#line 90 
  return tmp;
}


#line 100  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11h.c"
void mwifiex_11h_process_join(struct mwifiex_private *priv, u8 **buffer, struct mwifiex_bssdescriptor *bss_desc)
{
  
#line 103 
  if ((unsigned int)bss_desc->sensed_11h != 0U) {
    
#line 107 
    mwifiex_11h_activate(priv,(_Bool)1);
    
#line 108 
    priv->state_11h.is_11h_active = (_Bool)1;
    
#line 109 
    bss_desc->cap_info_bitmap = (unsigned short)((unsigned int)bss_desc->cap_info_bitmap | 256U);
    
#line 110 
    mwifiex_11h_process_infra_join(priv,buffer,bss_desc);
  }
  else {
    
#line 113 
    mwifiex_11h_activate(priv,(_Bool)0);
    
#line 114 
    priv->state_11h.is_11h_active = (_Bool)0;
    
#line 115 
    bss_desc->cap_info_bitmap = (unsigned short)((unsigned int)bss_desc->cap_info_bitmap & 65279U);
  }
  
#line 117 
  return;
}


#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11h.c"
void mwifiex_dfs_cac_work_queue(struct work_struct *work)
{
  struct cfg80211_chan_def chandef;
  struct delayed_work *tmp;
  struct mwifiex_private *tmp_0;
  int tmp_1;
  {
    
#line 127 
    struct work_struct const *__mptr = (struct work_struct const *)work;
    
#line 127 
    tmp = (struct delayed_work *)__mptr;
  }
  
#line 126 
  struct delayed_work *delayed_work = tmp;
  {
    
#line 129 
    struct delayed_work const *__mptr_0 = (struct delayed_work const *)delayed_work;
    
#line 129 
    tmp_0 = (struct mwifiex_private *)__mptr_0 + 18446744073709539744U;
  }
  
#line 128 
  struct mwifiex_private *priv = tmp_0;
  {
    
#line 132 
    int __ret_warn_on = priv == (struct mwifiex_private *)0;
    
#line 132 
    if ((long)(__ret_warn_on != 0) != 0L) 
#line 132 
                                          warn_slowpath_null("/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11h.c",132); else ;
    
#line 132 
    tmp_1 = (long)(__ret_warn_on != 0);
  }
  
#line 132 
  if ((long)tmp_1 != 0L) 
#line 133 
                         goto return_label; else ;
  
#line 135 
  chandef = priv->dfs_chandef;
  
#line 136 
  if ((int)priv->wdev.cac_started != 0) {
    
#line 137 
    if (((priv->adapter)->debug_mask & 1U) != 0U) {
      
#line 137 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 137 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"CAC timer finished; No radar detected\n"); else ;
    }
    else ;
    
#line 139 
    cfg80211_cac_event(priv->netdev,(struct cfg80211_chan_def const *)(& chandef),(enum nl80211_radar_event)NL80211_RADAR_CAC_FINISHED,208U);
  }
  else ;
  return_label: 
#line 141 
                return;
}


#line 148  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11h.c"
int mwifiex_cmd_issue_chan_report_request(struct mwifiex_private *priv, struct host_cmd_ds_command *cmd, void *data_buf)
{
  int __retres;
  
#line 152 
  struct host_cmd_ds_chan_rpt_req *cr_req = & cmd->params.chan_rpt_req;
  
#line 153 
  struct mwifiex_radar_params *radar_params = (struct mwifiex_radar_params *)data_buf;
  
#line 155 
  cmd->command = (unsigned short)221U;
  
#line 156 
  cmd->size = (unsigned short)8U;
  
#line 157 
  le16_add_cpu(& cmd->size,(unsigned short)8);
  
#line 159 
  cr_req->chan_desc.start_freq = (unsigned short)5000U;
  
#line 160 
  cr_req->chan_desc.chan_num = (unsigned char)((radar_params->chandef)->chan)->hw_value;
  
#line 161 
  cr_req->chan_desc.chan_width = (unsigned char)(radar_params->chandef)->width;
  
#line 162 
  cr_req->msec_dwell_time = radar_params->cac_time_ms;
  
#line 164 
  if (radar_params->cac_time_ms != 0U) {
    
#line 165 
    if (((priv->adapter)->debug_mask & 1U) != 0U) {
      
#line 165 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 165 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"11h: issuing DFS Radar check for channel=%d\n",(int)((radar_params->chandef)->chan)->hw_value); else ;
    }
    else ;
  }
  else 
    
#line 169 
    if (((priv->adapter)->debug_mask & 1U) != 0U) {
      
#line 169 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 169 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"cancelling CAC\n"); else ;
    }
    else ;
  
#line 171 
  __retres = 0;
  
#line 171 
  return __retres;
}


#line 174  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11h.c"
int mwifiex_stop_radar_detection(struct mwifiex_private *priv, struct cfg80211_chan_def *chandef)
{
  struct mwifiex_radar_params radar_params;
  int tmp;
  
#line 179 
  memset((void *)(& radar_params),0,12UL);
  
#line 180 
  radar_params.chandef = chandef;
  
#line 181 
  radar_params.cac_time_ms = 0U;
  
#line 183 
  tmp = mwifiex_send_cmd(priv,(unsigned short)221,(unsigned short)1,0U,(void *)(& radar_params),(_Bool)1);
  
#line 183 
  return tmp;
}


#line 190  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11h.c"
void mwifiex_abort_cac(struct mwifiex_private *priv)
{
  
#line 192 
  if ((int)priv->wdev.cac_started != 0) {
    int tmp;
    
#line 193 
    tmp = mwifiex_stop_radar_detection(priv,& priv->dfs_chandef);
    
#line 193 
    if (tmp != 0) {
      
#line 194 
      if (((priv->adapter)->debug_mask & 4U) != 0U) {
        
#line 194 
        if ((priv->adapter)->dev != (struct device *)0) 
#line 194 
                                                        _dev_info((struct device const *)(priv->adapter)->dev,"failed to stop CAC in FW\n"); else ;
      }
      else ;
    }
    else ;
    
#line 196 
    if (((priv->adapter)->debug_mask & 1U) != 0U) {
      
#line 196 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 196 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"Aborting delayed work for CAC.\n"); else ;
    }
    else ;
    
#line 198 
    cancel_delayed_work_sync(& priv->dfs_cac_work);
    
#line 199 
    cfg80211_cac_event(priv->netdev,(struct cfg80211_chan_def const *)(& priv->dfs_chandef),(enum nl80211_radar_event)NL80211_RADAR_CAC_ABORTED,208U);
  }
  else ;
  
#line 201 
  return;
}


#line 208  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11h.c"
int mwifiex_11h_handle_chanrpt_ready(struct mwifiex_private *priv, struct sk_buff *skb)
{
  int __retres;
  struct host_cmd_ds_chan_rpt_event *rpt_event;
  struct mwifiex_ie_types_chan_rpt_data *rpt;
  u8 *evt_buf;
  u16 event_len;
  u16 tlv_len;
  
#line 216 
  rpt_event = (struct host_cmd_ds_chan_rpt_event *)(skb->data + 4U);
  
#line 217 
  event_len = (unsigned short)((unsigned int)((unsigned short)skb->len) + 65516U);
  
#line 220 
  if (rpt_event->result != 0U) {
    
#line 221 
    if (((priv->adapter)->debug_mask & 4U) != 0U) {
      
#line 221 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 221 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"Error in channel report event\n"); else ;
    }
    else ;
    
#line 223 
    __retres = -1;
    
#line 223 
    goto return_label;
  }
  else ;
  
#line 226 
  evt_buf = (u8 *)(& rpt_event->tlvbuf);
  
#line 228 
  goto ldv_61253;
  ldv_61252: 
#line 229 
  ;
  
#line 229 
  rpt = (struct mwifiex_ie_types_chan_rpt_data *)(& rpt_event->tlvbuf);
  
#line 230 
  tlv_len = rpt->header.len;
  
#line 232 
  switch ((int)rpt->header.type) {
    case 347: 
#line 233 
    ;
    
#line 234 
    if ((unsigned int)*((unsigned char *)(& rpt->map) + 0UL) != 0U) {
      
#line 235 
      if (((priv->adapter)->debug_mask & 1U) != 0U) {
        
#line 235 
        if ((priv->adapter)->dev != (struct device *)0) 
#line 235 
                                                        _dev_info((struct device const *)(priv->adapter)->dev,"RADAR Detected on channel %d!\n",(int)(priv->dfs_chandef.chan)->hw_value); else ;
      }
      else ;
      
#line 238 
      cancel_delayed_work_sync(& priv->dfs_cac_work);
      
#line 239 
      cfg80211_cac_event(priv->netdev,(struct cfg80211_chan_def const *)(& priv->dfs_chandef),(enum nl80211_radar_event)NL80211_RADAR_DETECTED,208U);
    }
    else ;
    
#line 244 
    goto ldv_61250;
    default: 
#line 245 
    ;
    
#line 246 
    goto ldv_61250;
  }
  ldv_61250: 
#line 249 
  ;
  
#line 249 
  evt_buf += (unsigned int)tlv_len + 4U;
  
#line 250 
  event_len = (unsigned short)((unsigned int)((int)event_len - (int)tlv_len) + 65532U);
  ldv_61253: 
#line 251 
  ;
  
#line 228 
  if ((unsigned int)event_len > 3U) 
#line 230 
                                    goto ldv_61252; else 
#line 233 
                                                         goto ldv_61254;
  ldv_61254: 
#line 234 
  ;
  
#line 253 
  __retres = 0;
  return_label: 
#line 253 
                return __retres;
}


#line 257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11h.c"
int mwifiex_11h_handle_radar_detected(struct mwifiex_private *priv, struct sk_buff *skb)
{
  int __retres;
  struct mwifiex_radar_det_event *rdr_event;
  
#line 262 
  rdr_event = (struct mwifiex_radar_det_event *)(skb->data + 4U);
  
#line 264 
  if (rdr_event->passed != 0U) {
    int tmp;
    
#line 265 
    if (((priv->adapter)->debug_mask & 1U) != 0U) {
      
#line 265 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 265 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"radar detected; indicating kernel\n"); else ;
    }
    else ;
    
#line 267 
    tmp = mwifiex_stop_radar_detection(priv,& priv->dfs_chandef);
    
#line 267 
    if (tmp != 0) {
      
#line 268 
      if (((priv->adapter)->debug_mask & 4U) != 0U) {
        
#line 268 
        if ((priv->adapter)->dev != (struct device *)0) 
#line 268 
                                                        _dev_info((struct device const *)(priv->adapter)->dev,"Failed to stop CAC in FW\n"); else ;
      }
      else ;
    }
    else ;
    
#line 270 
    cfg80211_radar_event((priv->adapter)->wiphy,& priv->dfs_chandef,208U);
    
#line 272 
    if (((priv->adapter)->debug_mask & 1U) != 0U) {
      
#line 272 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 272 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"regdomain: %d\n",(int)rdr_event->reg_domain); else ;
    }
    else ;
    
#line 274 
    if (((priv->adapter)->debug_mask & 1U) != 0U) {
      
#line 274 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 274 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"radar detection type: %d\n",(int)rdr_event->det_type); else ;
    }
    else ;
  }
  else 
    
#line 277 
    if (((priv->adapter)->debug_mask & 1U) != 0U) {
      
#line 277 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 277 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"false radar detection event!\n"); else ;
    }
    else ;
  
#line 281 
  __retres = 0;
  
#line 281 
  return __retres;
}


#line 289  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11h.c"
void mwifiex_dfs_chan_sw_work_queue(struct work_struct *work)
{
  struct mwifiex_uap_bss_param *bss_cfg;
  struct delayed_work *tmp;
  struct mwifiex_private *tmp_0;
  int tmp_1;
  int tmp_2;
  {
    
#line 293 
    struct work_struct const *__mptr = (struct work_struct const *)work;
    
#line 293 
    tmp = (struct delayed_work *)__mptr;
  }
  
#line 292 
  struct delayed_work *delayed_work = tmp;
  {
    
#line 295 
    struct delayed_work const *__mptr_0 = (struct delayed_work const *)delayed_work;
    
#line 295 
    tmp_0 = (struct mwifiex_private *)__mptr_0 + 18446744073709539384U;
  }
  
#line 294 
  struct mwifiex_private *priv = tmp_0;
  {
    
#line 298 
    int __ret_warn_on = priv == (struct mwifiex_private *)0;
    
#line 298 
    if ((long)(__ret_warn_on != 0) != 0L) 
#line 298 
                                          warn_slowpath_null("/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/wireless/mwifiex/11h.c",298); else ;
    
#line 298 
    tmp_1 = (long)(__ret_warn_on != 0);
  }
  
#line 298 
  if ((long)tmp_1 != 0L) 
#line 299 
                         goto return_label; else ;
  
#line 301 
  bss_cfg = & priv->bss_cfg;
  
#line 302 
  if ((unsigned int)bss_cfg->beacon_period == 0U) {
    
#line 303 
    if (((priv->adapter)->debug_mask & 4U) != 0U) {
      
#line 303 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 303 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"channel switch: AP already stopped\n"); else ;
    }
    else ;
    
#line 305 
    goto return_label;
  }
  else ;
  
#line 308 
  mwifiex_uap_set_channel(priv,bss_cfg,priv->dfs_chandef);
  
#line 310 
  tmp_2 = mwifiex_config_start_uap(priv,bss_cfg);
  
#line 310 
  if (tmp_2 != 0) {
    
#line 311 
    if (((priv->adapter)->debug_mask & 4U) != 0U) {
      
#line 311 
      if ((priv->adapter)->dev != (struct device *)0) 
#line 311 
                                                      _dev_info((struct device const *)(priv->adapter)->dev,"Failed to start AP after channel switch\n"); else ;
    }
    else ;
    
#line 313 
    goto return_label;
  }
  else ;
  
#line 316 
  if (((priv->adapter)->debug_mask & 1U) != 0U) {
    
#line 316 
    if ((priv->adapter)->dev != (struct device *)0) 
#line 316 
                                                    _dev_info((struct device const *)(priv->adapter)->dev,"indicating channel switch completion to kernel\n"); else ;
  }
  else ;
  
#line 318 
  cfg80211_ch_switch_notify(priv->netdev,& priv->dfs_chandef);
  return_label: 
#line 319 
                return;
}


#line 21  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
void ldv_atomic_add(int i, atomic_t *v)
{
  
#line 23 
  v->counter += i;
  
#line 24 
  return;
}


#line 27  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
void ldv_atomic_sub(int i, atomic_t *v)
{
  
#line 29 
  v->counter -= i;
  
#line 30 
  return;
}


#line 33  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
int ldv_atomic_sub_and_test(int i, atomic_t *v)
{
  int __retres;
  
#line 35 
  v->counter -= i;
  
#line 36 
  if (v->counter != 0) {
    
#line 37 
    __retres = 0;
    
#line 37 
    goto return_label;
  }
  else ;
  
#line 39 
  __retres = 1;
  return_label: 
#line 39 
                return __retres;
}


#line 43  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
void ldv_atomic_inc(atomic_t *v)
{
  
#line 45 
  v->counter += 1;
  
#line 46 
  return;
}


#line 49  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
void ldv_atomic_dec(atomic_t *v)
{
  
#line 51 
  v->counter -= 1;
  
#line 52 
  return;
}


#line 55  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
int ldv_atomic_dec_and_test(atomic_t *v)
{
  int __retres;
  
#line 57 
  v->counter -= 1;
  
#line 58 
  if (v->counter != 0) {
    
#line 59 
    __retres = 0;
    
#line 59 
    goto return_label;
  }
  else ;
  
#line 61 
  __retres = 1;
  return_label: 
#line 61 
                return __retres;
}


#line 65  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
int ldv_atomic_inc_and_test(atomic_t *v)
{
  int __retres;
  
#line 67 
  v->counter += 1;
  
#line 68 
  if (v->counter != 0) {
    
#line 69 
    __retres = 0;
    
#line 69 
    goto return_label;
  }
  else ;
  
#line 71 
  __retres = 1;
  return_label: 
#line 71 
                return __retres;
}


#line 75  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
int ldv_atomic_add_return(int i, atomic_t *v)
{
  int __retres;
  
#line 77 
  v->counter += i;
  
#line 78 
  __retres = v->counter;
  
#line 78 
  return __retres;
}


#line 82  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
int ldv_atomic_add_negative(int i, atomic_t *v)
{
  int __retres;
  
#line 84 
  v->counter += i;
  
#line 85 
  __retres = v->counter < 0;
  
#line 85 
  return __retres;
}


#line 89  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
int ldv_atomic_inc_short(short *v)
{
  int __retres;
  
#line 91 
  *v = (short)((unsigned int)*v + 1U);
  
#line 92 
  __retres = (int)*v;
  
#line 92 
  return __retres;
}


#line 23  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/device.h"
void *ldv_dev_get_drvdata(struct device const *dev);


#line 24 
int ldv_dev_set_drvdata(struct device *dev, void *data);


#line 30  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memory.h"
void *ldv_xmalloc(size_t size);


#line 31 
void *ldv_xzalloc(size_t size);


#line 28  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memlist.h"
struct ldv_list_element global_list = {.data = (void *)0, .next = (struct ldv_list_element *)0};

#line 33  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memlist.h"
__inline static ldv_list_ptr ldv_list_create(void *data)
{
  
#line 35 
  ldv_list_ptr list = (struct ldv_list_element *)0;
  
#line 37 
  list = (ldv_list_ptr)ldv_xmalloc(16UL);
  
#line 39 
  list->data = data;
  
#line 40 
  list->next = (struct ldv_list_element *)0;
  
#line 42 
  return list;
}


#line 45  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memlist.h"
__inline static void ldv_save_pointer(void *data)
{
  ldv_list_ptr element;
  ldv_list_ptr cached;
  
#line 50 
  if (global_list.data == (void *)0) {
    
#line 51 
    element = & global_list;
    
#line 52 
    element->data = data;
  }
  else {
    
#line 54 
    element = ldv_list_create(data);
    
#line 55 
    cached = global_list.next;
    
#line 56 
    global_list.next = element;
    
#line 57 
    element->next = cached;
  }
  
#line 60 
  return;
}


#line 28  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device const *dev)
{
  void *__retres;
  
#line 30 
  if (dev != (struct device const *)0 && dev->p != (struct device_private *)0) {
    
#line 31 
    __retres = (dev->p)->driver_data;
    
#line 31 
    goto return_label;
  }
  else ;
  
#line 33 
  __retres = (void *)0;
  return_label: 
#line 33 
                return __retres;
}


#line 42  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data)
{
  int __retres;
  
#line 44 
  dev->p = (struct device_private *)ldv_xzalloc(8UL);
  
#line 45 
  ldv_save_pointer((void *)dev->p);
  
#line 46 
  (dev->p)->driver_data = data;
  
#line 48 
  __retres = 0;
  
#line 48 
  return __retres;
}


#line 25  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memory.h"
void *ldv_zalloc(size_t size);


#line 23  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/drivers/spi.c"
struct spi_master *ldv_spi_alloc_master(struct device *host, unsigned int size)
{
  struct spi_master *__retres;
  struct spi_master *master;
  
#line 27 
  master = (struct spi_master *)ldv_zalloc((unsigned long)size + 2192UL);
  
#line 29 
  if (master == (struct spi_master *)0) {
    
#line 30 
    __retres = (struct spi_master *)0;
    
#line 30 
    goto return_label;
  }
  else ;
  
#line 32 
  ldv_dev_set_drvdata(& master->dev,(void *)(master + 1U));
  
#line 34 
  __retres = master;
  return_label: 
#line 34 
                return __retres;
}


#line 28  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/err.h"
long ldv_is_err_or_null(void const *ptr);


#line 30 
long ldv_ptr_err(void const *ptr);


#line 23  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/common.h"
void __VERIFIER_assume(int);


#line 21  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_is_err(void const *ptr)
{
  long __retres;
  
#line 23 
  __retres = (long)((unsigned long)ptr > 4294967295UL);
  
#line 23 
  return __retres;
}


#line 26  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error)
{
  void *__retres;
  
#line 28 
  __VERIFIER_assume(error < 0L);
  
#line 29 
  __retres = (void *)(4294967295L - error);
  
#line 29 
  return __retres;
}


#line 32  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_ptr_err(void const *ptr)
{
  long __retres;
  
#line 34 
  __VERIFIER_assume((unsigned long)ptr > 4294967295UL);
  
#line 35 
  __retres = (long)(4294967295UL - (unsigned long)ptr);
  
#line 35 
  return __retres;
}


#line 38  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_is_err_or_null(void const *ptr)
{
  long __retres;
  int tmp_0;
  
#line 40 
  if (ptr == (void const *)0) 
#line 40 
                              tmp_0 = 1;
  else {
    long tmp;
    
#line 40 
    tmp = ldv_is_err(ptr);
    
#line 40 
    if (tmp != 0L) 
#line 40 
                   tmp_0 = 1; else 
#line 40 
                                   tmp_0 = 0;
  }
  
#line 40 
  __retres = (long)tmp_0;
  
#line 40 
  return __retres;
}


#line 21  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/panic.h"
void ldv_panic(void);


#line 21  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void)
{
  
#line 23 
  __VERIFIER_assume(0);
  
#line 24 
  return;
}


#line 32  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.h"
void ldv_switch_to_interrupt_context(void);


#line 42 
void ldv_switch_to_process_context(void);


#line 50 
bool ldv_in_interrupt_context(void);


#line 112 
int ldv_post_init(int init_ret_val);


#line 132 
int ldv_post_probe(int probe_ret_val);


#line 133 
void ldv_check_return_value_probe(int);


#line 141 
int ldv_filter_err_code(int ret_val);


#line 25  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
static bool __ldv_in_interrupt_context = (_Bool)0;

#line 28  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
void ldv_switch_to_interrupt_context(void)
{
  
#line 30 
  __ldv_in_interrupt_context = (_Bool)1;
  
#line 31 
  return;
}


#line 34  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
void ldv_switch_to_process_context(void)
{
  
#line 36 
  __ldv_in_interrupt_context = (_Bool)0;
  
#line 37 
  return;
}


#line 39  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
bool ldv_in_interrupt_context(void)
{
  
#line 41 
  return __ldv_in_interrupt_context;
}


#line 44  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
static int ldv_filter_positive_int(int val)
{
  
#line 46 
  __VERIFIER_assume(val <= 0);
  
#line 47 
  return val;
}


#line 54  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
int ldv_post_init(int init_ret_val)
{
  int tmp;
  
#line 56 
  tmp = ldv_filter_positive_int(init_ret_val);
  
#line 56 
  return tmp;
}


#line 60  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
int ldv_post_probe(int probe_ret_val)
{
  int tmp;
  
#line 62 
  ldv_check_return_value_probe(probe_ret_val);
  
#line 63 
  tmp = ldv_filter_positive_int(probe_ret_val);
  
#line 63 
  return tmp;
}


#line 67  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
int ldv_filter_err_code(int ret_val)
{
  int tmp;
  
#line 69 
  tmp = ldv_filter_positive_int(ret_val);
  
#line 69 
  return tmp;
}


#line 26  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/slab.h"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags);


#line 28 
void ldv_check_alloc_flags(gfp_t);


#line 29 
void ldv_after_alloc(void *);


#line 23  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memory.h"
void *ldv_malloc(size_t size);


#line 24 
void *ldv_calloc(size_t nmemb, size_t size);


#line 21  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc(size_t size, gfp_t flags)
{
  void *res;
  
#line 25 
  ldv_check_alloc_flags(flags);
  
#line 26 
  res = ldv_malloc(size);
  
#line 27 
  ldv_after_alloc(res);
  
#line 29 
  return res;
}


#line 32  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags)
{
  void *res;
  
#line 36 
  ldv_check_alloc_flags(flags);
  
#line 37 
  res = ldv_calloc(n,size);
  
#line 38 
  ldv_after_alloc(res);
  
#line 40 
  return res;
}


#line 43  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kzalloc(size_t size, gfp_t flags)
{
  void *res;
  
#line 47 
  ldv_check_alloc_flags(flags);
  
#line 48 
  res = ldv_zalloc(size);
  
#line 49 
  ldv_after_alloc(res);
  
#line 51 
  return res;
}


#line 54  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  void *res;
  
#line 58 
  ldv_check_alloc_flags(flags);
  
#line 59 
  res = ldv_malloc(n * size);
  
#line 60 
  ldv_after_alloc(res);
  
#line 62 
  return res;
}


#line 26  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memory.h"
void ldv_free(void *s);


#line 35 
void *ldv_malloc_unknown_size(void);


#line 36 
void *ldv_calloc_unknown_size(void);


#line 37 
void *ldv_zalloc_unknown_size(void);


#line 40 
void *ldv_reference_malloc(size_t size);


#line 41 
void *ldv_reference_calloc(size_t nmemb, size_t size);


#line 42 
void *ldv_reference_zalloc(size_t size);


#line 43 
void ldv_reference_free(void *s);


#line 47 
void *ldv_reference_xmalloc(size_t size);


#line 48 
void *ldv_reference_xzalloc(size_t size);


#line 52 
void *ldv_reference_malloc_unknown_size(void);


#line 53 
void *ldv_reference_calloc_unknown_size(void);


#line 54 
void *ldv_reference_zalloc_unknown_size(void);


#line 61 
void *ldv_xmalloc_unknown_size(size_t size);


#line 32  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size);


#line 34  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc(size_t size)
{
  void *res;
  
#line 37 
  res = ldv_reference_malloc(size);
  
#line 38 
  if (res != (void *)0) {
    long tmp;
    
#line 39 
    tmp = ldv_is_err((void const *)res);
    
#line 39 
    __VERIFIER_assume(tmp == 0L);
  }
  else ;
  
#line 40 
  return res;
}


#line 43  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc(size_t nmemb, size_t size)
{
  void *res;
  
#line 46 
  res = ldv_reference_calloc(nmemb,size);
  
#line 47 
  if (res != (void *)0) {
    long tmp;
    
#line 48 
    tmp = ldv_is_err((void const *)res);
    
#line 48 
    __VERIFIER_assume(tmp == 0L);
  }
  else ;
  
#line 49 
  return res;
}


#line 52  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc(size_t size)
{
  void *res;
  
#line 55 
  res = ldv_reference_zalloc(size);
  
#line 56 
  if (res != (void *)0) {
    long tmp;
    
#line 57 
    tmp = ldv_is_err((void const *)res);
    
#line 57 
    __VERIFIER_assume(tmp == 0L);
  }
  else ;
  
#line 58 
  return res;
}


#line 61  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void ldv_free(void *s)
{
  
#line 63 
  ldv_reference_free(s);
  
#line 64 
  return;
}


#line 66  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc(size_t size)
{
  void *res;
  long tmp;
  
#line 69 
  res = ldv_reference_xmalloc(size);
  
#line 70 
  tmp = ldv_is_err((void const *)res);
  
#line 70 
  __VERIFIER_assume(tmp == 0L);
  
#line 71 
  return res;
}


#line 74  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xzalloc(size_t size)
{
  void *res;
  long tmp;
  
#line 77 
  res = ldv_reference_xzalloc(size);
  
#line 78 
  tmp = ldv_is_err((void const *)res);
  
#line 78 
  __VERIFIER_assume(tmp == 0L);
  
#line 79 
  return res;
}


#line 82  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc_unknown_size(void)
{
  void *res;
  
#line 85 
  res = ldv_reference_malloc_unknown_size();
  
#line 86 
  if (res != (void *)0) {
    long tmp;
    
#line 87 
    tmp = ldv_is_err((void const *)res);
    
#line 87 
    __VERIFIER_assume(tmp == 0L);
  }
  else ;
  
#line 88 
  return res;
}


#line 91  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void)
{
  void *res;
  
#line 94 
  res = ldv_reference_calloc_unknown_size();
  
#line 95 
  if (res != (void *)0) {
    long tmp;
    
#line 96 
    tmp = ldv_is_err((void const *)res);
    
#line 96 
    __VERIFIER_assume(tmp == 0L);
  }
  else ;
  
#line 97 
  return res;
}


#line 100  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void)
{
  void *res;
  
#line 103 
  res = ldv_reference_zalloc_unknown_size();
  
#line 104 
  if (res != (void *)0) {
    long tmp;
    
#line 105 
    tmp = ldv_is_err((void const *)res);
    
#line 105 
    __VERIFIER_assume(tmp == 0L);
  }
  else ;
  
#line 106 
  return res;
}


#line 109  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size)
{
  void *res;
  long tmp;
  
#line 112 
  res = ldv_reference_xmalloc_unknown_size(size);
  
#line 113 
  tmp = ldv_is_err((void const *)res);
  
#line 113 
  __VERIFIER_assume(tmp == 0L);
  
#line 114 
  return res;
}

long __builtin_expect(long exp, long c);


#line 22  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/common.h"
void __VERIFIER_error(void);


#line 24  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/gcc.c"
long __builtin_expect(long exp, long c)
{
  
#line 26 
  return exp;
}


#line 35  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/gcc.c"
void __builtin_trap(void)
{
  
#line 37 
  __VERIFIER_error();
  
#line 38 
  return;
}


#line 23  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.h"
int ldv_undef_int(void);


#line 24 
int ldv_undef_long(void);


#line 25 
unsigned int ldv_undef_uint(void);


#line 26 
unsigned long ldv_undef_ulong(void);


#line 27 
unsigned long long ldv_undef_ulonglong(void);


#line 28 
void *ldv_undef_ptr(void);


#line 31 
int ldv_undef_int_positive(void);


#line 34 
int ldv_undef_int_negative(void);


#line 37 
int ldv_undef_int_nonpositive(void);


#line 40 
void *ldv_undef_ptr_non_null(void);


#line 29  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __VERIFIER_nondet_int(void);


#line 31 
long __VERIFIER_nondet_long(void);


#line 38 
unsigned int __VERIFIER_nondet_uint(void);


#line 41 
unsigned long __VERIFIER_nondet_ulong(void);


#line 42 
unsigned long long __VERIFIER_nondet_ulonglong(void);


#line 43 
void *__VERIFIER_nondet_pointer(void);


#line 46  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int(void)
{
  int tmp;
  
#line 48 
  tmp = __VERIFIER_nondet_int();
  
#line 48 
  return tmp;
}


#line 51  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_long(void)
{
  int __retres;
  long tmp;
  
#line 53 
  tmp = __VERIFIER_nondet_long();
  
#line 53 
  __retres = (int)tmp;
  
#line 53 
  return __retres;
}


#line 56  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void)
{
  unsigned int tmp;
  
#line 58 
  tmp = __VERIFIER_nondet_uint();
  
#line 58 
  return tmp;
}


#line 61  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void)
{
  void *tmp;
  
#line 63 
  tmp = __VERIFIER_nondet_pointer();
  
#line 63 
  return tmp;
}


#line 66  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void)
{
  unsigned long tmp;
  
#line 68 
  tmp = __VERIFIER_nondet_ulong();
  
#line 68 
  return tmp;
}


#line 71  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void)
{
  unsigned long long tmp;
  
#line 73 
  tmp = __VERIFIER_nondet_ulonglong();
  
#line 73 
  return tmp;
}


#line 76  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_positive(void)
{
  
#line 78 
  int ret = ldv_undef_int();
  
#line 80 
  __VERIFIER_assume(ret > 0);
  
#line 82 
  return ret;
}


#line 85  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_negative(void)
{
  
#line 87 
  int ret = ldv_undef_int();
  
#line 89 
  __VERIFIER_assume(ret < 0);
  
#line 91 
  return ret;
}


#line 94  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonpositive(void)
{
  
#line 96 
  int ret = ldv_undef_int();
  
#line 98 
  __VERIFIER_assume(ret <= 0);
  
#line 100 
  return ret;
}


#line 103  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void)
{
  
#line 105 
  void *ret = ldv_undef_ptr();
  
#line 107 
  __VERIFIER_assume(ret != (void *)0);
  
#line 109 
  return ret;
}


#line 33  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memory.h"
void *external_allocated_data(void);


#line 45 
void *ldv_reference_realloc(void *ptr, size_t size);


#line 23  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *malloc(size_t);


#line 24 
void *calloc(size_t, size_t);


#line 25 
void free(void *);


#line 33  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size)
{
  void *__retres;
  void *res;
  int tmp;
  
#line 37 
  tmp = ldv_undef_int();
  
#line 37 
  if (tmp != 0) {
    
#line 39 
    res = malloc(size);
    
#line 40 
    __VERIFIER_assume(res != (void *)0);
    
#line 41 
    __retres = res;
    
#line 41 
    goto return_label;
  }
  else {
    
#line 44 
    __retres = (void *)0;
    
#line 44 
    goto return_label;
  }
  return_label: 
#line 37 
                return __retres;
}


#line 47  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size)
{
  void *tmp;
  
#line 49 
  tmp = calloc(nmemb,size);
  
#line 49 
  return tmp;
}


#line 52  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size)
{
  void *tmp;
  
#line 54 
  tmp = calloc(1UL,size);
  
#line 54 
  return tmp;
}


#line 57  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s)
{
  
#line 59 
  free(s);
  
#line 60 
  return;
}


#line 62  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size)
{
  void *__retres;
  void *res;
  int tmp;
  
#line 66 
  if (ptr != (void *)0 && size == 0UL) {
    
#line 67 
    free(ptr);
    
#line 68 
    __retres = (void *)0;
    
#line 68 
    goto return_label;
  }
  else ;
  
#line 71 
  if (ptr == (void *)0) {
    
#line 72 
    res = malloc(size);
    
#line 73 
    __retres = res;
    
#line 73 
    goto return_label;
  }
  else ;
  
#line 76 
  tmp = ldv_undef_int();
  
#line 76 
  if (tmp != 0) {
    
#line 78 
    res = malloc(size);
    
#line 79 
    __VERIFIER_assume(res != (void *)0);
    
#line 81 
    memcpy(res,(void const *)ptr,size);
    
#line 82 
    free(ptr);
    
#line 84 
    __retres = res;
    
#line 84 
    goto return_label;
  }
  else {
    
#line 87 
    __retres = (void *)0;
    
#line 87 
    goto return_label;
  }
  return_label: 
#line 76 
                return __retres;
}


#line 90  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size)
{
  void *res;
  
#line 94 
  res = malloc(size);
  
#line 95 
  __VERIFIER_assume(res != (void *)0);
  
#line 97 
  return res;
}


#line 100  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size)
{
  void *res;
  
#line 104 
  res = calloc(1UL,size);
  
#line 105 
  __VERIFIER_assume(res != (void *)0);
  
#line 107 
  return res;
}


#line 110  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void)
{
  void *__retres;
  void *res;
  int tmp;
  
#line 114 
  tmp = ldv_undef_int();
  
#line 114 
  if (tmp != 0) {
    
#line 115 
    res = external_allocated_data();
    
#line 116 
    __VERIFIER_assume(res != (void *)0);
    
#line 117 
    __retres = res;
    
#line 117 
    goto return_label;
  }
  else {
    
#line 120 
    __retres = (void *)0;
    
#line 120 
    goto return_label;
  }
  return_label: 
#line 114 
                return __retres;
}


#line 123  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void)
{
  void *__retres;
  void *res;
  int tmp;
  
#line 127 
  tmp = ldv_undef_int();
  
#line 127 
  if (tmp != 0) {
    
#line 128 
    res = external_allocated_data();
    
#line 129 
    memset(res,0,8UL);
    
#line 130 
    __VERIFIER_assume(res != (void *)0);
    
#line 131 
    __retres = res;
    
#line 131 
    goto return_label;
  }
  else {
    
#line 134 
    __retres = (void *)0;
    
#line 134 
    goto return_label;
  }
  return_label: 
#line 127 
                return __retres;
}


#line 137  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void)
{
  void *tmp;
  
#line 139 
  tmp = ldv_reference_calloc_unknown_size();
  
#line 139 
  return tmp;
}


#line 142  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size)
{
  void *res;
  
#line 146 
  res = external_allocated_data();
  
#line 147 
  __VERIFIER_assume(res != (void *)0);
  
#line 149 
  return res;
}


#line 62  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.h"
void ldv_initialize(void);


#line 33  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/thread.h"
int pthread_create(pthread_t *, pthread_attr_t const *, void *(*)(void *), void *);


#line 37 
int pthread_join(pthread_t, void **);


#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/err.h"
__inline static void *ERR_PTR_0(long error)
{
  void *__retres;
  
#line 25 
  __retres = (void *)error;
  
#line 25 
  return __retres;
}


#line 61  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_character_driver_scenario_15(void *arg0);


#line 62 
void *ldv_character_driver_scenario_11(void *arg0);


#line 63 
void *ldv_character_driver_scenario_21(void *arg0);


#line 65 
void *ldv_character_driver_scenario_19(void *arg0);


#line 67 
void *ldv_character_driver_scenario_17(void *arg0);


#line 68 
void *ldv_character_driver_scenario_20(void *arg0);


#line 69 
void ldv_dispatch_deregister_7_1(struct file_operations *arg0);


#line 70 
void *ldv_character_driver_scenario_18(void *arg0);


#line 71 
void ldv_dispatch_register_9_3(struct file_operations *arg0);


#line 72 
void *ldv_character_driver_scenario_13(void *arg0);


#line 73 
void *ldv_character_driver_scenario_16(void *arg0);


#line 74 
int main(void);


#line 75 
void *ldv_timer_scenario_12(void *arg0);


#line 77 
void ldv_dispatch_instance_deregister_8_1(struct timer_list *arg0);


#line 78 
void *ldv_initialization_1(void *arg0);


#line 79 
void *ldv_character_driver_scenario_14(void *arg0);


#line 81 
void ldv_dispatch_instance_register_4_3(struct timer_list *arg0);


#line 83 
void ldv_dispatch_instance_deregister_3_1(struct timer_list *arg0);


#line 88  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_17;

#line 89  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_12;

#line 90  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_13;

#line 91  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_21;

#line 92  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_16;

#line 93  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_19;

#line 94  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_11;

#line 95  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_15;

#line 96  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_14;

#line 97  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_18;

#line 98  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_20;

#line 102  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/emg/environment_model.c"
int ldv_emg_del_timer_sync(struct timer_list *arg0)
{
  int __retres;
  struct timer_list *ldv_8_timer_list;
  
#line 108 
  ldv_8_timer_list = arg0;
  
#line 112 
  ldv_dispatch_instance_deregister_8_1(ldv_8_timer_list);
  
#line 113 
  ;
  
#line 113 
  __retres = 0;
  
#line 113 
  return __retres;
}


#line 121  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/emg/environment_model.c"
int ldv_emg_del_timer(struct timer_list *arg0)
{
  int __retres;
  struct timer_list *ldv_3_timer_list;
  
#line 127 
  ldv_3_timer_list = arg0;
  
#line 131 
  ldv_dispatch_instance_deregister_3_1(ldv_3_timer_list);
  
#line 132 
  ;
  
#line 132 
  __retres = 0;
  
#line 132 
  return __retres;
}


#line 140  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_character_driver_scenario_15(void *arg0)
{
  void *__retres;
  struct file *ldv_15_resource_1;
  char *ldv_15_ldv_param_1_2;
  unsigned long ldv_15_size_cnt;
  char *ldv_15_ldv_param_1_4;
  long long *ldv_15_ldv_param_3_3;
  long long *ldv_15_ldv_param_3_5;
  struct inode *ldv_15_resource_0;
  int tmp_1;
  int tmp_3;
  int tmp_4;
  
#line 148 
  struct file_operations *ldv_15_container = ldv_emg_alias_mwifiex_dfs_memrw_fops_2;
  
#line 150 
  int ldv_15_ret = ldv_undef_int();
  
#line 153 
  struct ldv_struct_character_driver_scenario_11 *data = (struct ldv_struct_character_driver_scenario_11 *)arg0;
  
#line 157 
  ldv_15_ret = ldv_undef_int();
  
#line 160 
  if (data != (struct ldv_struct_character_driver_scenario_11 *)0) {
    
#line 161 
    ldv_15_container = data->arg0;
    
#line 162 
    ldv_free((void *)data);
  }
  else ;
  
#line 167 
  ldv_15_resource_0 = (struct inode *)ldv_xmalloc_unknown_size(0UL);
  
#line 168 
  tmp_1 = ldv_undef_int();
  
#line 168 
  ldv_15_size_cnt = (unsigned long)tmp_1;
  
#line 175 
  goto ldv_main_15;
  
#line 177 
  __retres = (void *)0;
  
#line 177 
  goto return_label;
  ldv_main_15: 
#line 180 
  ;
  
#line 183 
  tmp_3 = ldv_undef_int();
  
#line 183 
  if (tmp_3 != 0) {
    int tmp_2;
    
#line 186 
    ldv_15_ret = (*ldv_emg_alias_simple_open_4)(ldv_15_resource_0,ldv_15_resource_1);
    
#line 188 
    ldv_15_ret = ldv_filter_err_code(ldv_15_ret);
    
#line 191 
    tmp_2 = ldv_undef_int();
    
#line 191 
    if (tmp_2 != 0) {
      
#line 193 
      __VERIFIER_assume(ldv_15_ret == 0);
      
#line 200 
      goto ldv_call_15;
    }
    else {
      
#line 204 
      __VERIFIER_assume(ldv_15_ret != 0);
      
#line 211 
      goto ldv_main_15;
    }
  }
  else {
    
#line 216 
    ldv_free((void *)ldv_15_resource_0);
    
#line 224 
    __retres = (void *)0;
    
#line 224 
    goto return_label;
  }
  
#line 227 
  __retres = (void *)0;
  
#line 227 
  goto return_label;
  ldv_call_15: 
#line 230 
  ;
  
#line 233 
  tmp_4 = ldv_undef_int();
  
#line 233 
  switch (tmp_4) {
    case 1: 
#line 234 
    ;
    
#line 236 
    ldv_15_ldv_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
    
#line 237 
    ldv_15_ldv_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
    
#line 242 
    ldv_emg_wrapper_mwifiex_memrw_read_3(ldv_15_resource_1,ldv_15_ldv_param_1_2,ldv_15_size_cnt,ldv_15_ldv_param_3_3);
    
#line 246 
    ldv_free((void *)ldv_15_ldv_param_1_2);
    
#line 247 
    ldv_free((void *)ldv_15_ldv_param_3_3);
    
#line 254 
    goto ldv_call_15;
    case 2: 
#line 257 
    ;
    
#line 259 
    ldv_15_ldv_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
    
#line 260 
    ldv_15_ldv_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
    
#line 269 
    __VERIFIER_assume(ldv_15_size_cnt <= 2147479552UL);
    
#line 271 
    ldv_emg_wrapper_mwifiex_memrw_write_4(ldv_15_resource_1,ldv_15_ldv_param_1_4,ldv_15_size_cnt,ldv_15_ldv_param_3_5);
    
#line 275 
    ldv_free((void *)ldv_15_ldv_param_3_5);
    
#line 276 
    ldv_free((void *)ldv_15_ldv_param_1_4);
    
#line 283 
    goto ldv_call_15;
    case 3: 
#line 286 
    ;
    
#line 288 
    if (ldv_15_container->release != (int (*)(struct inode *, struct file *))0) 
      
#line 290 
      (*(ldv_15_container->release))(ldv_15_resource_0,ldv_15_resource_1); else ;
    
#line 298 
    goto ldv_main_15;
    default: 
#line 301 
    ;
    
#line 301 
    __VERIFIER_assume(0);
  }
  
#line 304 
  __retres = (void *)0;
  return_label: 
#line 304 
                return __retres;
}


#line 309  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_character_driver_scenario_11(void *arg0)
{
  void *__retres;
  struct file *ldv_11_resource_1;
  char *ldv_11_ldv_param_1_2;
  unsigned long ldv_11_size_cnt;
  char *ldv_11_ldv_param_1_4;
  long long *ldv_11_ldv_param_3_3;
  long long *ldv_11_ldv_param_3_5;
  struct inode *ldv_11_resource_0;
  int tmp_1;
  int tmp_3;
  int tmp_4;
  
#line 317 
  struct file_operations *ldv_11_container = ldv_emg_alias_mwifiex_dfs_regrdwr_fops_2;
  
#line 319 
  int ldv_11_ret = ldv_undef_int();
  
#line 322 
  struct ldv_struct_character_driver_scenario_11 *data = (struct ldv_struct_character_driver_scenario_11 *)arg0;
  
#line 326 
  ldv_11_ret = ldv_undef_int();
  
#line 329 
  if (data != (struct ldv_struct_character_driver_scenario_11 *)0) {
    
#line 330 
    ldv_11_container = data->arg0;
    
#line 331 
    ldv_free((void *)data);
  }
  else ;
  
#line 336 
  ldv_11_resource_0 = (struct inode *)ldv_xmalloc_unknown_size(0UL);
  
#line 337 
  tmp_1 = ldv_undef_int();
  
#line 337 
  ldv_11_size_cnt = (unsigned long)tmp_1;
  
#line 344 
  goto ldv_main_11;
  
#line 346 
  __retres = (void *)0;
  
#line 346 
  goto return_label;
  ldv_main_11: 
#line 349 
  ;
  
#line 352 
  tmp_3 = ldv_undef_int();
  
#line 352 
  if (tmp_3 != 0) {
    int tmp_2;
    
#line 355 
    ldv_11_ret = (*ldv_emg_alias_simple_open_4)(ldv_11_resource_0,ldv_11_resource_1);
    
#line 357 
    ldv_11_ret = ldv_filter_err_code(ldv_11_ret);
    
#line 360 
    tmp_2 = ldv_undef_int();
    
#line 360 
    if (tmp_2 != 0) {
      
#line 362 
      __VERIFIER_assume(ldv_11_ret == 0);
      
#line 369 
      goto ldv_call_11;
    }
    else {
      
#line 373 
      __VERIFIER_assume(ldv_11_ret != 0);
      
#line 380 
      goto ldv_main_11;
    }
  }
  else {
    
#line 385 
    ldv_free((void *)ldv_11_resource_0);
    
#line 393 
    __retres = (void *)0;
    
#line 393 
    goto return_label;
  }
  
#line 396 
  __retres = (void *)0;
  
#line 396 
  goto return_label;
  ldv_call_11: 
#line 399 
  ;
  
#line 402 
  tmp_4 = ldv_undef_int();
  
#line 402 
  switch (tmp_4) {
    case 1: 
#line 403 
    ;
    
#line 405 
    ldv_11_ldv_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
    
#line 406 
    ldv_11_ldv_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
    
#line 411 
    ldv_emg_wrapper_mwifiex_regrdwr_read_3(ldv_11_resource_1,ldv_11_ldv_param_1_2,ldv_11_size_cnt,ldv_11_ldv_param_3_3);
    
#line 415 
    ldv_free((void *)ldv_11_ldv_param_3_3);
    
#line 416 
    ldv_free((void *)ldv_11_ldv_param_1_2);
    
#line 423 
    goto ldv_call_11;
    case 2: 
#line 426 
    ;
    
#line 428 
    ldv_11_ldv_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
    
#line 429 
    ldv_11_ldv_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
    
#line 438 
    __VERIFIER_assume(ldv_11_size_cnt <= 2147479552UL);
    
#line 440 
    ldv_emg_wrapper_mwifiex_regrdwr_write_4(ldv_11_resource_1,ldv_11_ldv_param_1_4,ldv_11_size_cnt,ldv_11_ldv_param_3_5);
    
#line 444 
    ldv_free((void *)ldv_11_ldv_param_3_5);
    
#line 445 
    ldv_free((void *)ldv_11_ldv_param_1_4);
    
#line 452 
    goto ldv_call_11;
    case 3: 
#line 455 
    ;
    
#line 457 
    if (ldv_11_container->release != (int (*)(struct inode *, struct file *))0) 
      
#line 459 
      (*(ldv_11_container->release))(ldv_11_resource_0,ldv_11_resource_1); else ;
    
#line 467 
    goto ldv_main_11;
    default: 
#line 470 
    ;
    
#line 470 
    __VERIFIER_assume(0);
  }
  
#line 473 
  __retres = (void *)0;
  return_label: 
#line 473 
                return __retres;
}


#line 478  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_register_9_3(struct file_operations *arg0)
{
  int ret;
  struct ldv_struct_character_driver_scenario_11 *cf_arg_16;
  struct ldv_struct_character_driver_scenario_11 *cf_arg_17;
  struct ldv_struct_character_driver_scenario_11 *cf_arg_18;
  struct ldv_struct_character_driver_scenario_11 *cf_arg_19;
  struct ldv_struct_character_driver_scenario_11 *cf_arg_20;
  struct ldv_struct_character_driver_scenario_11 *cf_arg_21;
  struct ldv_struct_character_driver_scenario_11 *cf_arg_11;
  struct ldv_struct_character_driver_scenario_11 *cf_arg_13;
  struct ldv_struct_character_driver_scenario_11 *cf_arg_14;
  struct ldv_struct_character_driver_scenario_11 *cf_arg_15;
  int tmp;
  
#line 490 
  tmp = ldv_undef_int();
  
#line 490 
  switch (tmp) {
    case 0: 
#line 491 
    ;
    
#line 492 
    cf_arg_16 = (struct ldv_struct_character_driver_scenario_11 *)ldv_xmalloc(16UL);
    
#line 493 
    cf_arg_16->arg0 = arg0;
    
#line 494 
    ret = pthread_create(& ldv_thread_16,(pthread_attr_t const *)0,& ldv_character_driver_scenario_16,(void *)cf_arg_16);
    
#line 495 
    __VERIFIER_assume(ret == 0);
    
#line 496 
    goto ldv_43867;
    case 1: 
#line 498 
    ;
    
#line 499 
    cf_arg_17 = (struct ldv_struct_character_driver_scenario_11 *)ldv_xmalloc(16UL);
    
#line 500 
    cf_arg_17->arg0 = arg0;
    
#line 501 
    ret = pthread_create(& ldv_thread_17,(pthread_attr_t const *)0,& ldv_character_driver_scenario_17,(void *)cf_arg_17);
    
#line 502 
    __VERIFIER_assume(ret == 0);
    
#line 503 
    goto ldv_43867;
    case 2: 
#line 505 
    ;
    
#line 506 
    cf_arg_18 = (struct ldv_struct_character_driver_scenario_11 *)ldv_xmalloc(16UL);
    
#line 507 
    cf_arg_18->arg0 = arg0;
    
#line 508 
    ret = pthread_create(& ldv_thread_18,(pthread_attr_t const *)0,& ldv_character_driver_scenario_18,(void *)cf_arg_18);
    
#line 509 
    __VERIFIER_assume(ret == 0);
    
#line 510 
    goto ldv_43867;
    case 3: 
#line 512 
    ;
    
#line 513 
    cf_arg_19 = (struct ldv_struct_character_driver_scenario_11 *)ldv_xmalloc(16UL);
    
#line 514 
    cf_arg_19->arg0 = arg0;
    
#line 515 
    ret = pthread_create(& ldv_thread_19,(pthread_attr_t const *)0,& ldv_character_driver_scenario_19,(void *)cf_arg_19);
    
#line 516 
    __VERIFIER_assume(ret == 0);
    
#line 517 
    goto ldv_43867;
    case 4: 
#line 519 
    ;
    
#line 520 
    cf_arg_20 = (struct ldv_struct_character_driver_scenario_11 *)ldv_xmalloc(16UL);
    
#line 521 
    cf_arg_20->arg0 = arg0;
    
#line 522 
    ret = pthread_create(& ldv_thread_20,(pthread_attr_t const *)0,& ldv_character_driver_scenario_20,(void *)cf_arg_20);
    
#line 523 
    __VERIFIER_assume(ret == 0);
    
#line 524 
    goto ldv_43867;
    case 5: 
#line 526 
    ;
    
#line 527 
    cf_arg_21 = (struct ldv_struct_character_driver_scenario_11 *)ldv_xmalloc(16UL);
    
#line 528 
    cf_arg_21->arg0 = arg0;
    
#line 529 
    ret = pthread_create(& ldv_thread_21,(pthread_attr_t const *)0,& ldv_character_driver_scenario_21,(void *)cf_arg_21);
    
#line 530 
    __VERIFIER_assume(ret == 0);
    
#line 531 
    goto ldv_43867;
    case 6: 
#line 533 
    ;
    
#line 534 
    cf_arg_11 = (struct ldv_struct_character_driver_scenario_11 *)ldv_xmalloc(16UL);
    
#line 535 
    cf_arg_11->arg0 = arg0;
    
#line 536 
    ret = pthread_create(& ldv_thread_11,(pthread_attr_t const *)0,& ldv_character_driver_scenario_11,(void *)cf_arg_11);
    
#line 537 
    __VERIFIER_assume(ret == 0);
    
#line 538 
    goto ldv_43867;
    case 7: 
#line 540 
    ;
    
#line 541 
    cf_arg_13 = (struct ldv_struct_character_driver_scenario_11 *)ldv_xmalloc(16UL);
    
#line 542 
    cf_arg_13->arg0 = arg0;
    
#line 543 
    ret = pthread_create(& ldv_thread_13,(pthread_attr_t const *)0,& ldv_character_driver_scenario_13,(void *)cf_arg_13);
    
#line 544 
    __VERIFIER_assume(ret == 0);
    
#line 545 
    goto ldv_43867;
    case 8: 
#line 547 
    ;
    
#line 548 
    cf_arg_14 = (struct ldv_struct_character_driver_scenario_11 *)ldv_xmalloc(16UL);
    
#line 549 
    cf_arg_14->arg0 = arg0;
    
#line 550 
    ret = pthread_create(& ldv_thread_14,(pthread_attr_t const *)0,& ldv_character_driver_scenario_14,(void *)cf_arg_14);
    
#line 551 
    __VERIFIER_assume(ret == 0);
    
#line 552 
    goto ldv_43867;
    case 9: 
#line 554 
    ;
    
#line 555 
    cf_arg_15 = (struct ldv_struct_character_driver_scenario_11 *)ldv_xmalloc(16UL);
    
#line 556 
    cf_arg_15->arg0 = arg0;
    
#line 557 
    ret = pthread_create(& ldv_thread_15,(pthread_attr_t const *)0,& ldv_character_driver_scenario_15,(void *)cf_arg_15);
    
#line 558 
    __VERIFIER_assume(ret == 0);
    
#line 559 
    goto ldv_43867;
    default: 
#line 561 
    ;
    
#line 561 
    __VERIFIER_assume(0);
  }
  ldv_43867: 
#line 562 
  ;
  
#line 563 
  return;
}


#line 567  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/emg/environment_model.c"
struct dentry *ldv_emg_debugfs_create_file(char *arg0, unsigned short arg1, struct dentry *arg2, void *arg3, struct file_operations *arg4)
{
  struct dentry *__retres;
  struct dentry *ldv_9_dentry;
  struct file_operations *ldv_9_file_operations;
  int tmp_1;
  
#line 575 
  tmp_1 = ldv_undef_int();
  
#line 575 
  if (tmp_1 != 0) {
    
#line 577 
    ldv_9_dentry = (struct dentry *)ldv_xmalloc_unknown_size(0UL);
    
#line 578 
    ldv_9_file_operations = arg4;
    
#line 582 
    ldv_dispatch_register_9_3(ldv_9_file_operations);
    
#line 586 
    __retres = ldv_9_dentry;
    
#line 586 
    goto return_label;
  }
  else {
    struct dentry *tmp_0;
    
#line 593 
    tmp_0 = (struct dentry *)ERR_PTR_0(-19L);
    
#line 593 
    __retres = tmp_0;
    
#line 593 
    goto return_label;
  }
  return_label: 
#line 575 
                return __retres;
}


#line 603  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_character_driver_scenario_19(void *arg0)
{
  void *__retres;
  struct file *ldv_19_resource_1;
  char *ldv_19_ldv_param_1_2;
  unsigned long ldv_19_size_cnt;
  char *ldv_19_ldv_param_1_4;
  long long *ldv_19_ldv_param_3_3;
  long long *ldv_19_ldv_param_3_5;
  struct inode *ldv_19_resource_0;
  int tmp_1;
  int tmp_3;
  int tmp_4;
  
#line 611 
  struct file_operations *ldv_19_container = ldv_emg_alias_mwifiex_dfs_hscfg_fops_2;
  
#line 613 
  int ldv_19_ret = ldv_undef_int();
  
#line 616 
  struct ldv_struct_character_driver_scenario_11 *data = (struct ldv_struct_character_driver_scenario_11 *)arg0;
  
#line 620 
  ldv_19_ret = ldv_undef_int();
  
#line 623 
  if (data != (struct ldv_struct_character_driver_scenario_11 *)0) {
    
#line 624 
    ldv_19_container = data->arg0;
    
#line 625 
    ldv_free((void *)data);
  }
  else ;
  
#line 630 
  ldv_19_resource_0 = (struct inode *)ldv_xmalloc_unknown_size(0UL);
  
#line 631 
  tmp_1 = ldv_undef_int();
  
#line 631 
  ldv_19_size_cnt = (unsigned long)tmp_1;
  
#line 638 
  goto ldv_main_19;
  
#line 640 
  __retres = (void *)0;
  
#line 640 
  goto return_label;
  ldv_main_19: 
#line 643 
  ;
  
#line 646 
  tmp_3 = ldv_undef_int();
  
#line 646 
  if (tmp_3 != 0) {
    int tmp_2;
    
#line 649 
    ldv_19_ret = (*ldv_emg_alias_simple_open_4)(ldv_19_resource_0,ldv_19_resource_1);
    
#line 651 
    ldv_19_ret = ldv_filter_err_code(ldv_19_ret);
    
#line 654 
    tmp_2 = ldv_undef_int();
    
#line 654 
    if (tmp_2 != 0) {
      
#line 656 
      __VERIFIER_assume(ldv_19_ret == 0);
      
#line 663 
      goto ldv_call_19;
    }
    else {
      
#line 667 
      __VERIFIER_assume(ldv_19_ret != 0);
      
#line 674 
      goto ldv_main_19;
    }
  }
  else {
    
#line 679 
    ldv_free((void *)ldv_19_resource_0);
    
#line 687 
    __retres = (void *)0;
    
#line 687 
    goto return_label;
  }
  
#line 690 
  __retres = (void *)0;
  
#line 690 
  goto return_label;
  ldv_call_19: 
#line 693 
  ;
  
#line 696 
  tmp_4 = ldv_undef_int();
  
#line 696 
  switch (tmp_4) {
    case 1: 
#line 697 
    ;
    
#line 699 
    ldv_19_ldv_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
    
#line 700 
    ldv_19_ldv_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
    
#line 705 
    ldv_emg_wrapper_mwifiex_hscfg_read_3(ldv_19_resource_1,ldv_19_ldv_param_1_2,ldv_19_size_cnt,ldv_19_ldv_param_3_3);
    
#line 709 
    ldv_free((void *)ldv_19_ldv_param_3_3);
    
#line 710 
    ldv_free((void *)ldv_19_ldv_param_1_2);
    
#line 717 
    goto ldv_call_19;
    case 2: 
#line 720 
    ;
    
#line 722 
    ldv_19_ldv_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
    
#line 723 
    ldv_19_ldv_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
    
#line 732 
    __VERIFIER_assume(ldv_19_size_cnt <= 2147479552UL);
    
#line 734 
    ldv_emg_wrapper_mwifiex_hscfg_write_4(ldv_19_resource_1,ldv_19_ldv_param_1_4,ldv_19_size_cnt,ldv_19_ldv_param_3_5);
    
#line 738 
    ldv_free((void *)ldv_19_ldv_param_3_5);
    
#line 739 
    ldv_free((void *)ldv_19_ldv_param_1_4);
    
#line 746 
    goto ldv_call_19;
    case 3: 
#line 749 
    ;
    
#line 751 
    if (ldv_19_container->release != (int (*)(struct inode *, struct file *))0) 
      
#line 753 
      (*(ldv_19_container->release))(ldv_19_resource_0,ldv_19_resource_1); else ;
    
#line 761 
    goto ldv_main_19;
    default: 
#line 764 
    ;
    
#line 764 
    __VERIFIER_assume(0);
  }
  
#line 767 
  __retres = (void *)0;
  return_label: 
#line 767 
                return __retres;
}


#line 772  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/emg/environment_model.c"
_Bool ldv_emg_queue_work(struct workqueue_struct *arg0, struct work_struct *arg1)
{
  _Bool __retres;
  struct work_struct *ldv_10_work_struct;
  int tmp;
  
#line 779 
  tmp = ldv_undef_int();
  
#line 779 
  if (tmp != 0) {
    
#line 781 
    ldv_10_work_struct = arg1;
    
#line 785 
    if (ldv_10_work_struct->func != (void (*)(struct work_struct *))0) 
      
#line 787 
      (*(ldv_10_work_struct->func))(ldv_10_work_struct); else ;
    
#line 792 
    __retres = (_Bool)1;
    
#line 792 
    goto return_label;
  }
  else {
    
#line 799 
    __retres = (_Bool)0;
    
#line 799 
    goto return_label;
  }
  return_label: 
#line 779 
                return __retres;
}


#line 809  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_character_driver_scenario_17(void *arg0)
{
  void *__retres;
  struct file *ldv_17_resource_1;
  char *ldv_17_ldv_param_1_2;
  unsigned long ldv_17_size_cnt;
  char *ldv_17_ldv_param_1_4;
  long long *ldv_17_ldv_param_3_3;
  long long *ldv_17_ldv_param_3_5;
  struct inode *ldv_17_resource_0;
  int tmp_1;
  int tmp_3;
  int tmp_4;
  
#line 817 
  struct file_operations *ldv_17_container = ldv_emg_alias_mwifiex_dfs_device_dump_fops_2;
  
#line 819 
  int ldv_17_ret = ldv_undef_int();
  
#line 822 
  struct ldv_struct_character_driver_scenario_11 *data = (struct ldv_struct_character_driver_scenario_11 *)arg0;
  
#line 826 
  ldv_17_ret = ldv_undef_int();
  
#line 829 
  if (data != (struct ldv_struct_character_driver_scenario_11 *)0) {
    
#line 830 
    ldv_17_container = data->arg0;
    
#line 831 
    ldv_free((void *)data);
  }
  else ;
  
#line 836 
  ldv_17_resource_0 = (struct inode *)ldv_xmalloc_unknown_size(0UL);
  
#line 837 
  tmp_1 = ldv_undef_int();
  
#line 837 
  ldv_17_size_cnt = (unsigned long)tmp_1;
  
#line 844 
  goto ldv_main_17;
  
#line 846 
  __retres = (void *)0;
  
#line 846 
  goto return_label;
  ldv_main_17: 
#line 849 
  ;
  
#line 852 
  tmp_3 = ldv_undef_int();
  
#line 852 
  if (tmp_3 != 0) {
    int tmp_2;
    
#line 855 
    ldv_17_ret = (*ldv_emg_alias_simple_open_4)(ldv_17_resource_0,ldv_17_resource_1);
    
#line 857 
    ldv_17_ret = ldv_filter_err_code(ldv_17_ret);
    
#line 860 
    tmp_2 = ldv_undef_int();
    
#line 860 
    if (tmp_2 != 0) {
      
#line 862 
      __VERIFIER_assume(ldv_17_ret == 0);
      
#line 869 
      goto ldv_call_17;
    }
    else {
      
#line 873 
      __VERIFIER_assume(ldv_17_ret != 0);
      
#line 880 
      goto ldv_main_17;
    }
  }
  else {
    
#line 885 
    ldv_free((void *)ldv_17_resource_0);
    
#line 893 
    __retres = (void *)0;
    
#line 893 
    goto return_label;
  }
  
#line 896 
  __retres = (void *)0;
  
#line 896 
  goto return_label;
  ldv_call_17: 
#line 899 
  ;
  
#line 902 
  tmp_4 = ldv_undef_int();
  
#line 902 
  switch (tmp_4) {
    case 1: 
#line 903 
    ;
    
#line 905 
    ldv_17_ldv_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
    
#line 906 
    ldv_17_ldv_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
    
#line 911 
    ldv_emg_wrapper_mwifiex_device_dump_read_3(ldv_17_resource_1,ldv_17_ldv_param_1_2,ldv_17_size_cnt,ldv_17_ldv_param_3_3);
    
#line 915 
    ldv_free((void *)ldv_17_ldv_param_1_2);
    
#line 916 
    ldv_free((void *)ldv_17_ldv_param_3_3);
    
#line 923 
    goto ldv_call_17;
    case 2: 
#line 926 
    ;
    
#line 928 
    ldv_17_ldv_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
    
#line 929 
    ldv_17_ldv_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
    
#line 933 
    if (ldv_17_container->write != (ssize_t (*)(struct file *, char const *, size_t , loff_t *))0) {
      
#line 939 
      __VERIFIER_assume(ldv_17_size_cnt <= 2147479552UL);
      
#line 941 
      (*(ldv_17_container->write))(ldv_17_resource_1,(char const *)ldv_17_ldv_param_1_4,ldv_17_size_cnt,ldv_17_ldv_param_3_5);
    }
    else ;
    
#line 946 
    ldv_free((void *)ldv_17_ldv_param_3_5);
    
#line 947 
    ldv_free((void *)ldv_17_ldv_param_1_4);
    
#line 954 
    goto ldv_call_17;
    case 3: 
#line 957 
    ;
    
#line 959 
    if (ldv_17_container->release != (int (*)(struct inode *, struct file *))0) 
      
#line 961 
      (*(ldv_17_container->release))(ldv_17_resource_0,ldv_17_resource_1); else ;
    
#line 969 
    goto ldv_main_17;
    default: 
#line 972 
    ;
    
#line 972 
    __VERIFIER_assume(0);
  }
  
#line 975 
  __retres = (void *)0;
  return_label: 
#line 975 
                return __retres;
}


#line 980  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_character_driver_scenario_20(void *arg0)
{
  void *__retres;
  struct file *ldv_20_resource_1;
  char *ldv_20_ldv_param_1_2;
  unsigned long ldv_20_size_cnt;
  char *ldv_20_ldv_param_1_4;
  long long *ldv_20_ldv_param_3_3;
  long long *ldv_20_ldv_param_3_5;
  struct inode *ldv_20_resource_0;
  int tmp_1;
  int tmp_3;
  int tmp_4;
  
#line 988 
  struct file_operations *ldv_20_container = ldv_emg_alias_mwifiex_dfs_debug_mask_fops_2;
  
#line 990 
  int ldv_20_ret = ldv_undef_int();
  
#line 993 
  struct ldv_struct_character_driver_scenario_11 *data = (struct ldv_struct_character_driver_scenario_11 *)arg0;
  
#line 997 
  ldv_20_ret = ldv_undef_int();
  
#line 1000 
  if (data != (struct ldv_struct_character_driver_scenario_11 *)0) {
    
#line 1001 
    ldv_20_container = data->arg0;
    
#line 1002 
    ldv_free((void *)data);
  }
  else ;
  
#line 1007 
  ldv_20_resource_0 = (struct inode *)ldv_xmalloc_unknown_size(0UL);
  
#line 1008 
  tmp_1 = ldv_undef_int();
  
#line 1008 
  ldv_20_size_cnt = (unsigned long)tmp_1;
  
#line 1015 
  goto ldv_main_20;
  
#line 1017 
  __retres = (void *)0;
  
#line 1017 
  goto return_label;
  ldv_main_20: 
#line 1020 
  ;
  
#line 1023 
  tmp_3 = ldv_undef_int();
  
#line 1023 
  if (tmp_3 != 0) {
    int tmp_2;
    
#line 1026 
    ldv_20_ret = (*ldv_emg_alias_simple_open_4)(ldv_20_resource_0,ldv_20_resource_1);
    
#line 1028 
    ldv_20_ret = ldv_filter_err_code(ldv_20_ret);
    
#line 1031 
    tmp_2 = ldv_undef_int();
    
#line 1031 
    if (tmp_2 != 0) {
      
#line 1033 
      __VERIFIER_assume(ldv_20_ret == 0);
      
#line 1040 
      goto ldv_call_20;
    }
    else {
      
#line 1044 
      __VERIFIER_assume(ldv_20_ret != 0);
      
#line 1051 
      goto ldv_main_20;
    }
  }
  else {
    
#line 1056 
    ldv_free((void *)ldv_20_resource_0);
    
#line 1064 
    __retres = (void *)0;
    
#line 1064 
    goto return_label;
  }
  
#line 1067 
  __retres = (void *)0;
  
#line 1067 
  goto return_label;
  ldv_call_20: 
#line 1070 
  ;
  
#line 1073 
  tmp_4 = ldv_undef_int();
  
#line 1073 
  switch (tmp_4) {
    case 1: 
#line 1074 
    ;
    
#line 1076 
    ldv_20_ldv_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
    
#line 1077 
    ldv_20_ldv_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
    
#line 1082 
    ldv_emg_wrapper_mwifiex_debug_mask_read_3(ldv_20_resource_1,ldv_20_ldv_param_1_2,ldv_20_size_cnt,ldv_20_ldv_param_3_3);
    
#line 1086 
    ldv_free((void *)ldv_20_ldv_param_3_3);
    
#line 1087 
    ldv_free((void *)ldv_20_ldv_param_1_2);
    
#line 1094 
    goto ldv_call_20;
    case 2: 
#line 1097 
    ;
    
#line 1099 
    ldv_20_ldv_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
    
#line 1100 
    ldv_20_ldv_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
    
#line 1109 
    __VERIFIER_assume(ldv_20_size_cnt <= 2147479552UL);
    
#line 1111 
    ldv_emg_wrapper_mwifiex_debug_mask_write_4(ldv_20_resource_1,ldv_20_ldv_param_1_4,ldv_20_size_cnt,ldv_20_ldv_param_3_5);
    
#line 1115 
    ldv_free((void *)ldv_20_ldv_param_3_5);
    
#line 1116 
    ldv_free((void *)ldv_20_ldv_param_1_4);
    
#line 1123 
    goto ldv_call_20;
    case 3: 
#line 1126 
    ;
    
#line 1128 
    if (ldv_20_container->release != (int (*)(struct inode *, struct file *))0) 
      
#line 1130 
      (*(ldv_20_container->release))(ldv_20_resource_0,ldv_20_resource_1); else ;
    
#line 1138 
    goto ldv_main_20;
    default: 
#line 1141 
    ;
    
#line 1141 
    __VERIFIER_assume(0);
  }
  
#line 1144 
  __retres = (void *)0;
  return_label: 
#line 1144 
                return __retres;
}


#line 1149  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_deregister_7_1(struct file_operations *arg0)
{
  int ret;
  struct ldv_struct_character_driver_scenario_11 *cf_arg_16;
  struct ldv_struct_character_driver_scenario_11 *cf_arg_17;
  struct ldv_struct_character_driver_scenario_11 *cf_arg_18;
  struct ldv_struct_character_driver_scenario_11 *cf_arg_19;
  struct ldv_struct_character_driver_scenario_11 *cf_arg_20;
  struct ldv_struct_character_driver_scenario_11 *cf_arg_21;
  struct ldv_struct_character_driver_scenario_11 *cf_arg_11;
  struct ldv_struct_character_driver_scenario_11 *cf_arg_13;
  struct ldv_struct_character_driver_scenario_11 *cf_arg_14;
  struct ldv_struct_character_driver_scenario_11 *cf_arg_15;
  int tmp;
  
#line 1161 
  tmp = ldv_undef_int();
  
#line 1161 
  switch (tmp) {
    case 0: 
#line 1162 
    ;
    
#line 1163 
    ret = pthread_join(ldv_thread_16,(void **)0);
    
#line 1164 
    __VERIFIER_assume(ret == 0);
    
#line 1165 
    goto ldv_43964;
    case 1: 
#line 1167 
    ;
    
#line 1168 
    ret = pthread_join(ldv_thread_17,(void **)0);
    
#line 1169 
    __VERIFIER_assume(ret == 0);
    
#line 1170 
    goto ldv_43964;
    case 2: 
#line 1172 
    ;
    
#line 1173 
    ret = pthread_join(ldv_thread_18,(void **)0);
    
#line 1174 
    __VERIFIER_assume(ret == 0);
    
#line 1175 
    goto ldv_43964;
    case 3: 
#line 1177 
    ;
    
#line 1178 
    ret = pthread_join(ldv_thread_19,(void **)0);
    
#line 1179 
    __VERIFIER_assume(ret == 0);
    
#line 1180 
    goto ldv_43964;
    case 4: 
#line 1182 
    ;
    
#line 1183 
    ret = pthread_join(ldv_thread_20,(void **)0);
    
#line 1184 
    __VERIFIER_assume(ret == 0);
    
#line 1185 
    goto ldv_43964;
    case 5: 
#line 1187 
    ;
    
#line 1188 
    ret = pthread_join(ldv_thread_21,(void **)0);
    
#line 1189 
    __VERIFIER_assume(ret == 0);
    
#line 1190 
    goto ldv_43964;
    case 6: 
#line 1192 
    ;
    
#line 1193 
    ret = pthread_join(ldv_thread_11,(void **)0);
    
#line 1194 
    __VERIFIER_assume(ret == 0);
    
#line 1195 
    goto ldv_43964;
    case 7: 
#line 1197 
    ;
    
#line 1198 
    ret = pthread_join(ldv_thread_13,(void **)0);
    
#line 1199 
    __VERIFIER_assume(ret == 0);
    
#line 1200 
    goto ldv_43964;
    case 8: 
#line 1202 
    ;
    
#line 1203 
    ret = pthread_join(ldv_thread_14,(void **)0);
    
#line 1204 
    __VERIFIER_assume(ret == 0);
    
#line 1205 
    goto ldv_43964;
    case 9: 
#line 1207 
    ;
    
#line 1208 
    ret = pthread_join(ldv_thread_15,(void **)0);
    
#line 1209 
    __VERIFIER_assume(ret == 0);
    
#line 1210 
    goto ldv_43964;
    default: 
#line 1212 
    ;
    
#line 1212 
    __VERIFIER_assume(0);
  }
  ldv_43964: 
#line 1213 
  ;
  
#line 1214 
  return;
}


#line 1218  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_character_driver_scenario_18(void *arg0)
{
  void *__retres;
  struct file *ldv_18_resource_1;
  char *ldv_18_ldv_param_1_2;
  unsigned long ldv_18_size_cnt;
  char *ldv_18_ldv_param_1_4;
  long long *ldv_18_ldv_param_3_3;
  long long *ldv_18_ldv_param_3_5;
  struct inode *ldv_18_resource_0;
  int tmp_1;
  int tmp_3;
  int tmp_4;
  
#line 1226 
  struct file_operations *ldv_18_container = ldv_emg_alias_mwifiex_dfs_histogram_fops_2;
  
#line 1228 
  int ldv_18_ret = ldv_undef_int();
  
#line 1231 
  struct ldv_struct_character_driver_scenario_11 *data = (struct ldv_struct_character_driver_scenario_11 *)arg0;
  
#line 1235 
  ldv_18_ret = ldv_undef_int();
  
#line 1238 
  if (data != (struct ldv_struct_character_driver_scenario_11 *)0) {
    
#line 1239 
    ldv_18_container = data->arg0;
    
#line 1240 
    ldv_free((void *)data);
  }
  else ;
  
#line 1245 
  ldv_18_resource_0 = (struct inode *)ldv_xmalloc_unknown_size(0UL);
  
#line 1246 
  tmp_1 = ldv_undef_int();
  
#line 1246 
  ldv_18_size_cnt = (unsigned long)tmp_1;
  
#line 1253 
  goto ldv_main_18;
  
#line 1255 
  __retres = (void *)0;
  
#line 1255 
  goto return_label;
  ldv_main_18: 
#line 1258 
  ;
  
#line 1261 
  tmp_3 = ldv_undef_int();
  
#line 1261 
  if (tmp_3 != 0) {
    int tmp_2;
    
#line 1264 
    ldv_18_ret = (*ldv_emg_alias_simple_open_4)(ldv_18_resource_0,ldv_18_resource_1);
    
#line 1266 
    ldv_18_ret = ldv_filter_err_code(ldv_18_ret);
    
#line 1269 
    tmp_2 = ldv_undef_int();
    
#line 1269 
    if (tmp_2 != 0) {
      
#line 1271 
      __VERIFIER_assume(ldv_18_ret == 0);
      
#line 1278 
      goto ldv_call_18;
    }
    else {
      
#line 1282 
      __VERIFIER_assume(ldv_18_ret != 0);
      
#line 1289 
      goto ldv_main_18;
    }
  }
  else {
    
#line 1294 
    ldv_free((void *)ldv_18_resource_0);
    
#line 1302 
    __retres = (void *)0;
    
#line 1302 
    goto return_label;
  }
  
#line 1305 
  __retres = (void *)0;
  
#line 1305 
  goto return_label;
  ldv_call_18: 
#line 1308 
  ;
  
#line 1311 
  tmp_4 = ldv_undef_int();
  
#line 1311 
  switch (tmp_4) {
    case 1: 
#line 1312 
    ;
    
#line 1314 
    ldv_18_ldv_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
    
#line 1315 
    ldv_18_ldv_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
    
#line 1320 
    ldv_emg_wrapper_mwifiex_histogram_read_3(ldv_18_resource_1,ldv_18_ldv_param_1_2,ldv_18_size_cnt,ldv_18_ldv_param_3_3);
    
#line 1324 
    ldv_free((void *)ldv_18_ldv_param_3_3);
    
#line 1325 
    ldv_free((void *)ldv_18_ldv_param_1_2);
    
#line 1332 
    goto ldv_call_18;
    case 2: 
#line 1335 
    ;
    
#line 1337 
    ldv_18_ldv_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
    
#line 1338 
    ldv_18_ldv_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
    
#line 1347 
    __VERIFIER_assume(ldv_18_size_cnt <= 2147479552UL);
    
#line 1349 
    ldv_emg_wrapper_mwifiex_histogram_write_4(ldv_18_resource_1,ldv_18_ldv_param_1_4,ldv_18_size_cnt,ldv_18_ldv_param_3_5);
    
#line 1353 
    ldv_free((void *)ldv_18_ldv_param_1_4);
    
#line 1354 
    ldv_free((void *)ldv_18_ldv_param_3_5);
    
#line 1361 
    goto ldv_call_18;
    case 3: 
#line 1364 
    ;
    
#line 1366 
    if (ldv_18_container->release != (int (*)(struct inode *, struct file *))0) 
      
#line 1368 
      (*(ldv_18_container->release))(ldv_18_resource_0,ldv_18_resource_1); else ;
    
#line 1376 
    goto ldv_main_18;
    default: 
#line 1379 
    ;
    
#line 1379 
    __VERIFIER_assume(0);
  }
  
#line 1382 
  __retres = (void *)0;
  return_label: 
#line 1382 
                return __retres;
}


#line 1387  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_character_driver_scenario_21(void *arg0)
{
  void *__retres;
  struct file *ldv_21_resource_1;
  char *ldv_21_ldv_param_1_2;
  unsigned long ldv_21_size_cnt;
  char *ldv_21_ldv_param_1_4;
  long long *ldv_21_ldv_param_3_3;
  long long *ldv_21_ldv_param_3_5;
  struct inode *ldv_21_resource_0;
  int tmp_1;
  int tmp_3;
  int tmp_4;
  
#line 1395 
  struct file_operations *ldv_21_container = ldv_emg_alias_mwifiex_dfs_debug_fops_2;
  
#line 1397 
  int ldv_21_ret = ldv_undef_int();
  
#line 1400 
  struct ldv_struct_character_driver_scenario_11 *data = (struct ldv_struct_character_driver_scenario_11 *)arg0;
  
#line 1404 
  ldv_21_ret = ldv_undef_int();
  
#line 1407 
  if (data != (struct ldv_struct_character_driver_scenario_11 *)0) {
    
#line 1408 
    ldv_21_container = data->arg0;
    
#line 1409 
    ldv_free((void *)data);
  }
  else ;
  
#line 1414 
  ldv_21_resource_0 = (struct inode *)ldv_xmalloc_unknown_size(0UL);
  
#line 1415 
  tmp_1 = ldv_undef_int();
  
#line 1415 
  ldv_21_size_cnt = (unsigned long)tmp_1;
  
#line 1422 
  goto ldv_main_21;
  
#line 1424 
  __retres = (void *)0;
  
#line 1424 
  goto return_label;
  ldv_main_21: 
#line 1427 
  ;
  
#line 1430 
  tmp_3 = ldv_undef_int();
  
#line 1430 
  if (tmp_3 != 0) {
    int tmp_2;
    
#line 1433 
    ldv_21_ret = (*ldv_emg_alias_simple_open_4)(ldv_21_resource_0,ldv_21_resource_1);
    
#line 1435 
    ldv_21_ret = ldv_filter_err_code(ldv_21_ret);
    
#line 1438 
    tmp_2 = ldv_undef_int();
    
#line 1438 
    if (tmp_2 != 0) {
      
#line 1440 
      __VERIFIER_assume(ldv_21_ret == 0);
      
#line 1447 
      goto ldv_call_21;
    }
    else {
      
#line 1451 
      __VERIFIER_assume(ldv_21_ret != 0);
      
#line 1458 
      goto ldv_main_21;
    }
  }
  else {
    
#line 1463 
    ldv_free((void *)ldv_21_resource_0);
    
#line 1471 
    __retres = (void *)0;
    
#line 1471 
    goto return_label;
  }
  
#line 1474 
  __retres = (void *)0;
  
#line 1474 
  goto return_label;
  ldv_call_21: 
#line 1477 
  ;
  
#line 1480 
  tmp_4 = ldv_undef_int();
  
#line 1480 
  switch (tmp_4) {
    case 1: 
#line 1481 
    ;
    
#line 1483 
    ldv_21_ldv_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
    
#line 1484 
    ldv_21_ldv_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
    
#line 1489 
    ldv_emg_wrapper_mwifiex_debug_read_3(ldv_21_resource_1,ldv_21_ldv_param_1_2,ldv_21_size_cnt,ldv_21_ldv_param_3_3);
    
#line 1493 
    ldv_free((void *)ldv_21_ldv_param_1_2);
    
#line 1494 
    ldv_free((void *)ldv_21_ldv_param_3_3);
    
#line 1501 
    goto ldv_call_21;
    case 2: 
#line 1504 
    ;
    
#line 1506 
    ldv_21_ldv_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
    
#line 1507 
    ldv_21_ldv_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
    
#line 1511 
    if (ldv_21_container->write != (ssize_t (*)(struct file *, char const *, size_t , loff_t *))0) {
      
#line 1517 
      __VERIFIER_assume(ldv_21_size_cnt <= 2147479552UL);
      
#line 1519 
      (*(ldv_21_container->write))(ldv_21_resource_1,(char const *)ldv_21_ldv_param_1_4,ldv_21_size_cnt,ldv_21_ldv_param_3_5);
    }
    else ;
    
#line 1524 
    ldv_free((void *)ldv_21_ldv_param_1_4);
    
#line 1525 
    ldv_free((void *)ldv_21_ldv_param_3_5);
    
#line 1532 
    goto ldv_call_21;
    case 3: 
#line 1535 
    ;
    
#line 1537 
    if (ldv_21_container->release != (int (*)(struct inode *, struct file *))0) 
      
#line 1539 
      (*(ldv_21_container->release))(ldv_21_resource_0,ldv_21_resource_1); else ;
    
#line 1547 
    goto ldv_main_21;
    default: 
#line 1550 
    ;
    
#line 1550 
    __VERIFIER_assume(0);
  }
  
#line 1553 
  __retres = (void *)0;
  return_label: 
#line 1553 
                return __retres;
}


#line 1558  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_character_driver_scenario_13(void *arg0)
{
  void *__retres;
  struct file *ldv_13_resource_1;
  char *ldv_13_ldv_param_1_2;
  unsigned long ldv_13_size_cnt;
  char *ldv_13_ldv_param_1_4;
  long long *ldv_13_ldv_param_3_3;
  long long *ldv_13_ldv_param_3_5;
  struct inode *ldv_13_resource_0;
  int tmp_1;
  int tmp_3;
  int tmp_4;
  
#line 1566 
  struct file_operations *ldv_13_container = ldv_emg_alias_mwifiex_dfs_info_fops_2;
  
#line 1568 
  int ldv_13_ret = ldv_undef_int();
  
#line 1571 
  struct ldv_struct_character_driver_scenario_11 *data = (struct ldv_struct_character_driver_scenario_11 *)arg0;
  
#line 1575 
  ldv_13_ret = ldv_undef_int();
  
#line 1578 
  if (data != (struct ldv_struct_character_driver_scenario_11 *)0) {
    
#line 1579 
    ldv_13_container = data->arg0;
    
#line 1580 
    ldv_free((void *)data);
  }
  else ;
  
#line 1585 
  ldv_13_resource_0 = (struct inode *)ldv_xmalloc_unknown_size(0UL);
  
#line 1586 
  tmp_1 = ldv_undef_int();
  
#line 1586 
  ldv_13_size_cnt = (unsigned long)tmp_1;
  
#line 1593 
  goto ldv_main_13;
  
#line 1595 
  __retres = (void *)0;
  
#line 1595 
  goto return_label;
  ldv_main_13: 
#line 1598 
  ;
  
#line 1601 
  tmp_3 = ldv_undef_int();
  
#line 1601 
  if (tmp_3 != 0) {
    int tmp_2;
    
#line 1604 
    ldv_13_ret = (*ldv_emg_alias_simple_open_4)(ldv_13_resource_0,ldv_13_resource_1);
    
#line 1606 
    ldv_13_ret = ldv_filter_err_code(ldv_13_ret);
    
#line 1609 
    tmp_2 = ldv_undef_int();
    
#line 1609 
    if (tmp_2 != 0) {
      
#line 1611 
      __VERIFIER_assume(ldv_13_ret == 0);
      
#line 1618 
      goto ldv_call_13;
    }
    else {
      
#line 1622 
      __VERIFIER_assume(ldv_13_ret != 0);
      
#line 1629 
      goto ldv_main_13;
    }
  }
  else {
    
#line 1634 
    ldv_free((void *)ldv_13_resource_0);
    
#line 1642 
    __retres = (void *)0;
    
#line 1642 
    goto return_label;
  }
  
#line 1645 
  __retres = (void *)0;
  
#line 1645 
  goto return_label;
  ldv_call_13: 
#line 1648 
  ;
  
#line 1651 
  tmp_4 = ldv_undef_int();
  
#line 1651 
  switch (tmp_4) {
    case 1: 
#line 1652 
    ;
    
#line 1654 
    ldv_13_ldv_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
    
#line 1655 
    ldv_13_ldv_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
    
#line 1660 
    ldv_emg_wrapper_mwifiex_info_read_3(ldv_13_resource_1,ldv_13_ldv_param_1_2,ldv_13_size_cnt,ldv_13_ldv_param_3_3);
    
#line 1664 
    ldv_free((void *)ldv_13_ldv_param_1_2);
    
#line 1665 
    ldv_free((void *)ldv_13_ldv_param_3_3);
    
#line 1672 
    goto ldv_call_13;
    case 2: 
#line 1675 
    ;
    
#line 1677 
    ldv_13_ldv_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
    
#line 1678 
    ldv_13_ldv_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
    
#line 1682 
    if (ldv_13_container->write != (ssize_t (*)(struct file *, char const *, size_t , loff_t *))0) {
      
#line 1688 
      __VERIFIER_assume(ldv_13_size_cnt <= 2147479552UL);
      
#line 1690 
      (*(ldv_13_container->write))(ldv_13_resource_1,(char const *)ldv_13_ldv_param_1_4,ldv_13_size_cnt,ldv_13_ldv_param_3_5);
    }
    else ;
    
#line 1695 
    ldv_free((void *)ldv_13_ldv_param_3_5);
    
#line 1696 
    ldv_free((void *)ldv_13_ldv_param_1_4);
    
#line 1703 
    goto ldv_call_13;
    case 3: 
#line 1706 
    ;
    
#line 1708 
    if (ldv_13_container->release != (int (*)(struct inode *, struct file *))0) 
      
#line 1710 
      (*(ldv_13_container->release))(ldv_13_resource_0,ldv_13_resource_1); else ;
    
#line 1718 
    goto ldv_main_13;
    default: 
#line 1721 
    ;
    
#line 1721 
    __VERIFIER_assume(0);
  }
  
#line 1724 
  __retres = (void *)0;
  return_label: 
#line 1724 
                return __retres;
}


#line 1729  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_character_driver_scenario_16(void *arg0)
{
  void *__retres;
  struct file *ldv_16_resource_1;
  char *ldv_16_ldv_param_1_2;
  unsigned long ldv_16_size_cnt;
  char *ldv_16_ldv_param_1_4;
  long long *ldv_16_ldv_param_3_3;
  long long *ldv_16_ldv_param_3_5;
  struct inode *ldv_16_resource_0;
  int tmp_1;
  int tmp_3;
  int tmp_4;
  
#line 1737 
  struct file_operations *ldv_16_container = ldv_emg_alias_mwifiex_dfs_getlog_fops_2;
  
#line 1739 
  int ldv_16_ret = ldv_undef_int();
  
#line 1742 
  struct ldv_struct_character_driver_scenario_11 *data = (struct ldv_struct_character_driver_scenario_11 *)arg0;
  
#line 1746 
  ldv_16_ret = ldv_undef_int();
  
#line 1749 
  if (data != (struct ldv_struct_character_driver_scenario_11 *)0) {
    
#line 1750 
    ldv_16_container = data->arg0;
    
#line 1751 
    ldv_free((void *)data);
  }
  else ;
  
#line 1756 
  ldv_16_resource_0 = (struct inode *)ldv_xmalloc_unknown_size(0UL);
  
#line 1757 
  tmp_1 = ldv_undef_int();
  
#line 1757 
  ldv_16_size_cnt = (unsigned long)tmp_1;
  
#line 1764 
  goto ldv_main_16;
  
#line 1766 
  __retres = (void *)0;
  
#line 1766 
  goto return_label;
  ldv_main_16: 
#line 1769 
  ;
  
#line 1772 
  tmp_3 = ldv_undef_int();
  
#line 1772 
  if (tmp_3 != 0) {
    int tmp_2;
    
#line 1775 
    ldv_16_ret = (*ldv_emg_alias_simple_open_4)(ldv_16_resource_0,ldv_16_resource_1);
    
#line 1777 
    ldv_16_ret = ldv_filter_err_code(ldv_16_ret);
    
#line 1780 
    tmp_2 = ldv_undef_int();
    
#line 1780 
    if (tmp_2 != 0) {
      
#line 1782 
      __VERIFIER_assume(ldv_16_ret == 0);
      
#line 1789 
      goto ldv_call_16;
    }
    else {
      
#line 1793 
      __VERIFIER_assume(ldv_16_ret != 0);
      
#line 1800 
      goto ldv_main_16;
    }
  }
  else {
    
#line 1805 
    ldv_free((void *)ldv_16_resource_0);
    
#line 1813 
    __retres = (void *)0;
    
#line 1813 
    goto return_label;
  }
  
#line 1816 
  __retres = (void *)0;
  
#line 1816 
  goto return_label;
  ldv_call_16: 
#line 1819 
  ;
  
#line 1822 
  tmp_4 = ldv_undef_int();
  
#line 1822 
  switch (tmp_4) {
    case 1: 
#line 1823 
    ;
    
#line 1825 
    ldv_16_ldv_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
    
#line 1826 
    ldv_16_ldv_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
    
#line 1831 
    ldv_emg_wrapper_mwifiex_getlog_read_3(ldv_16_resource_1,ldv_16_ldv_param_1_2,ldv_16_size_cnt,ldv_16_ldv_param_3_3);
    
#line 1835 
    ldv_free((void *)ldv_16_ldv_param_1_2);
    
#line 1836 
    ldv_free((void *)ldv_16_ldv_param_3_3);
    
#line 1843 
    goto ldv_call_16;
    case 2: 
#line 1846 
    ;
    
#line 1848 
    ldv_16_ldv_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
    
#line 1849 
    ldv_16_ldv_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
    
#line 1853 
    if (ldv_16_container->write != (ssize_t (*)(struct file *, char const *, size_t , loff_t *))0) {
      
#line 1859 
      __VERIFIER_assume(ldv_16_size_cnt <= 2147479552UL);
      
#line 1861 
      (*(ldv_16_container->write))(ldv_16_resource_1,(char const *)ldv_16_ldv_param_1_4,ldv_16_size_cnt,ldv_16_ldv_param_3_5);
    }
    else ;
    
#line 1866 
    ldv_free((void *)ldv_16_ldv_param_3_5);
    
#line 1867 
    ldv_free((void *)ldv_16_ldv_param_1_4);
    
#line 1874 
    goto ldv_call_16;
    case 3: 
#line 1877 
    ;
    
#line 1879 
    if (ldv_16_container->release != (int (*)(struct inode *, struct file *))0) 
      
#line 1881 
      (*(ldv_16_container->release))(ldv_16_resource_0,ldv_16_resource_1); else ;
    
#line 1889 
    goto ldv_main_16;
    default: 
#line 1892 
    ;
    
#line 1892 
    __VERIFIER_assume(0);
  }
  
#line 1895 
  __retres = (void *)0;
  return_label: 
#line 1895 
                return __retres;
}


#line 1900  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/emg/environment_model.c"
int main(void)
{
  int __retres;
  
#line 1903 
  ldv_initialize();
  
#line 1906 
  ldv_initialization_1((void *)0);
  
#line 1908 
  __retres = 0;
  
#line 1908 
  return __retres;
}


#line 1913  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_character_driver_scenario_14(void *arg0)
{
  void *__retres;
  struct file *ldv_14_resource_1;
  char *ldv_14_ldv_param_1_2;
  unsigned long ldv_14_size_cnt;
  char *ldv_14_ldv_param_1_4;
  long long *ldv_14_ldv_param_3_3;
  long long *ldv_14_ldv_param_3_5;
  struct inode *ldv_14_resource_0;
  int tmp_1;
  int tmp_3;
  int tmp_4;
  
#line 1921 
  struct file_operations *ldv_14_container = ldv_emg_alias_mwifiex_dfs_rdeeprom_fops_2;
  
#line 1923 
  int ldv_14_ret = ldv_undef_int();
  
#line 1926 
  struct ldv_struct_character_driver_scenario_11 *data = (struct ldv_struct_character_driver_scenario_11 *)arg0;
  
#line 1930 
  ldv_14_ret = ldv_undef_int();
  
#line 1933 
  if (data != (struct ldv_struct_character_driver_scenario_11 *)0) {
    
#line 1934 
    ldv_14_container = data->arg0;
    
#line 1935 
    ldv_free((void *)data);
  }
  else ;
  
#line 1940 
  ldv_14_resource_0 = (struct inode *)ldv_xmalloc_unknown_size(0UL);
  
#line 1941 
  tmp_1 = ldv_undef_int();
  
#line 1941 
  ldv_14_size_cnt = (unsigned long)tmp_1;
  
#line 1948 
  goto ldv_main_14;
  
#line 1950 
  __retres = (void *)0;
  
#line 1950 
  goto return_label;
  ldv_main_14: 
#line 1953 
  ;
  
#line 1956 
  tmp_3 = ldv_undef_int();
  
#line 1956 
  if (tmp_3 != 0) {
    int tmp_2;
    
#line 1959 
    ldv_14_ret = (*ldv_emg_alias_simple_open_4)(ldv_14_resource_0,ldv_14_resource_1);
    
#line 1961 
    ldv_14_ret = ldv_filter_err_code(ldv_14_ret);
    
#line 1964 
    tmp_2 = ldv_undef_int();
    
#line 1964 
    if (tmp_2 != 0) {
      
#line 1966 
      __VERIFIER_assume(ldv_14_ret == 0);
      
#line 1973 
      goto ldv_call_14;
    }
    else {
      
#line 1977 
      __VERIFIER_assume(ldv_14_ret != 0);
      
#line 1984 
      goto ldv_main_14;
    }
  }
  else {
    
#line 1989 
    ldv_free((void *)ldv_14_resource_0);
    
#line 1997 
    __retres = (void *)0;
    
#line 1997 
    goto return_label;
  }
  
#line 2000 
  __retres = (void *)0;
  
#line 2000 
  goto return_label;
  ldv_call_14: 
#line 2003 
  ;
  
#line 2006 
  tmp_4 = ldv_undef_int();
  
#line 2006 
  switch (tmp_4) {
    case 1: 
#line 2007 
    ;
    
#line 2009 
    ldv_14_ldv_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
    
#line 2010 
    ldv_14_ldv_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
    
#line 2015 
    ldv_emg_wrapper_mwifiex_rdeeprom_read_3(ldv_14_resource_1,ldv_14_ldv_param_1_2,ldv_14_size_cnt,ldv_14_ldv_param_3_3);
    
#line 2019 
    ldv_free((void *)ldv_14_ldv_param_3_3);
    
#line 2020 
    ldv_free((void *)ldv_14_ldv_param_1_2);
    
#line 2027 
    goto ldv_call_14;
    case 2: 
#line 2030 
    ;
    
#line 2032 
    ldv_14_ldv_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
    
#line 2033 
    ldv_14_ldv_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
    
#line 2042 
    __VERIFIER_assume(ldv_14_size_cnt <= 2147479552UL);
    
#line 2044 
    ldv_emg_wrapper_mwifiex_rdeeprom_write_4(ldv_14_resource_1,ldv_14_ldv_param_1_4,ldv_14_size_cnt,ldv_14_ldv_param_3_5);
    
#line 2048 
    ldv_free((void *)ldv_14_ldv_param_1_4);
    
#line 2049 
    ldv_free((void *)ldv_14_ldv_param_3_5);
    
#line 2056 
    goto ldv_call_14;
    case 3: 
#line 2059 
    ;
    
#line 2061 
    if (ldv_14_container->release != (int (*)(struct inode *, struct file *))0) 
      
#line 2063 
      (*(ldv_14_container->release))(ldv_14_resource_0,ldv_14_resource_1); else ;
    
#line 2071 
    goto ldv_main_14;
    default: 
#line 2074 
    ;
    
#line 2074 
    __VERIFIER_assume(0);
  }
  
#line 2077 
  __retres = (void *)0;
  return_label: 
#line 2077 
                return __retres;
}


#line 2082  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_emg_debugfs_remove(struct dentry *arg0)
{
  struct dentry *ldv_7_dentry;
  struct file_operations *ldv_7_file_operations;
  
#line 2089 
  ldv_7_dentry = arg0;
  
#line 2090 
  ldv_free((void *)ldv_7_dentry);
  
#line 2094 
  ldv_dispatch_deregister_7_1(ldv_7_file_operations);
  
#line 2098 
  goto return_label;
  return_label: 
#line 2100 
                return;
}


#line 2105  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_instance_deregister_8_1(struct timer_list *arg0)
{
  int ret;
  struct ldv_struct_timer_scenario_12 *cf_arg_12;
  int tmp;
  
#line 2108 
  tmp = ldv_undef_int();
  
#line 2108 
  switch (tmp) {
    case 0: 
#line 2109 
    ;
    
#line 2110 
    ret = pthread_join(ldv_thread_12,(void **)0);
    
#line 2111 
    __VERIFIER_assume(ret == 0);
    
#line 2112 
    goto ldv_44084;
    default: 
#line 2114 
    ;
    
#line 2114 
    __VERIFIER_assume(0);
  }
  ldv_44084: 
#line 2115 
  ;
  
#line 2116 
  return;
}


#line 2120  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_initialization_1(void *arg0)
{
  void *__retres;
  int ldv_1_ret;
  int tmp;
  
#line 2127 
  ldv_1_ret = ldv_emg_mwifiex_init_module();
  
#line 2128 
  ldv_1_ret = ldv_post_init(ldv_1_ret);
  
#line 2131 
  tmp = ldv_undef_int();
  
#line 2131 
  if (tmp != 0) {
    
#line 2133 
    __VERIFIER_assume(ldv_1_ret != 0);
    
#line 2137 
    __retres = (void *)0;
    
#line 2137 
    goto return_label;
  }
  else {
    
#line 2141 
    __VERIFIER_assume(ldv_1_ret == 0);
    
#line 2146 
    ldv_emg_mwifiex_cleanup_module();
    
#line 2150 
    __retres = (void *)0;
    
#line 2150 
    goto return_label;
  }
  
#line 2153 
  __retres = (void *)0;
  return_label: 
#line 2153 
                return __retres;
}


#line 2158  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_timer_scenario_12(void *arg0)
{
  void *__retres;
  struct timer_list *ldv_12_container;
  
#line 2163 
  struct ldv_struct_timer_scenario_12 *data = (struct ldv_struct_timer_scenario_12 *)arg0;
  
#line 2168 
  if (data != (struct ldv_struct_timer_scenario_12 *)0) {
    
#line 2169 
    ldv_12_container = data->arg0;
    
#line 2170 
    ldv_free((void *)data);
  }
  else ;
  
#line 2175 
  if (ldv_12_container->function != (void (*)(unsigned long ))0) {
    
#line 2177 
    ldv_switch_to_interrupt_context();
    
#line 2179 
    (*(ldv_12_container->function))(ldv_12_container->data);
    
#line 2181 
    ldv_switch_to_process_context();
  }
  else ;
  
#line 2190 
  __retres = (void *)0;
  
#line 2190 
  goto return_label;
  
#line 2192 
  __retres = (void *)0;
  return_label: 
#line 2192 
                return __retres;
}


#line 2197  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/emg/environment_model.c"
_Bool ldv_emg_queue_delayed_work(struct workqueue_struct *arg0, struct delayed_work *arg1, unsigned long arg2)
{
  _Bool __retres;
  struct work_struct *ldv_6_ldv_param_0_2;
  struct delayed_work *ldv_6_delayed_work;
  int tmp_0;
  
#line 2205 
  tmp_0 = ldv_undef_int();
  
#line 2205 
  if (tmp_0 != 0) {
    
#line 2207 
    ldv_6_delayed_work = arg1;
    
#line 2211 
    ldv_6_ldv_param_0_2 = (struct work_struct *)ldv_xmalloc_unknown_size(0UL);
    
#line 2215 
    if (ldv_6_delayed_work->work.func != (void (*)(struct work_struct *))0) 
      
#line 2217 
      (*(ldv_6_delayed_work->work.func))(ldv_6_ldv_param_0_2); else ;
    
#line 2222 
    ldv_free((void *)ldv_6_ldv_param_0_2);
    
#line 2226 
    __retres = (_Bool)1;
    
#line 2226 
    goto return_label;
  }
  else {
    
#line 2233 
    __retres = (_Bool)0;
    
#line 2233 
    goto return_label;
  }
  return_label: 
#line 2205 
                return __retres;
}


#line 2243  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_instance_register_4_3(struct timer_list *arg0)
{
  int ret;
  struct ldv_struct_timer_scenario_12 *cf_arg_12;
  int tmp;
  
#line 2246 
  tmp = ldv_undef_int();
  
#line 2246 
  switch (tmp) {
    case 0: 
#line 2247 
    ;
    
#line 2248 
    cf_arg_12 = (struct ldv_struct_timer_scenario_12 *)ldv_xmalloc(16UL);
    
#line 2249 
    cf_arg_12->arg0 = arg0;
    
#line 2250 
    ret = pthread_create(& ldv_thread_12,(pthread_attr_t const *)0,& ldv_timer_scenario_12,(void *)cf_arg_12);
    
#line 2251 
    __VERIFIER_assume(ret == 0);
    
#line 2252 
    goto ldv_44108;
    default: 
#line 2254 
    ;
    
#line 2254 
    __VERIFIER_assume(0);
  }
  ldv_44108: 
#line 2255 
  ;
  
#line 2256 
  return;
}


#line 2260  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/emg/environment_model.c"
struct net_device *ldv_emg_alloc_netdev_mqs(int arg0, char *arg1, unsigned char arg2, void (*arg3)(struct net_device *), unsigned int arg4, unsigned int arg5)
{
  struct net_device *__retres;
  struct net_device *ldv_5_netdev;
  int tmp_0;
  
#line 2264 
  void (*ldv_5_setup)(struct net_device *) = & ether_setup;
  
#line 2268 
  tmp_0 = ldv_undef_int();
  
#line 2268 
  if (tmp_0 != 0) {
    
#line 2270 
    ldv_5_netdev = (struct net_device *)ldv_xmalloc_unknown_size(0UL);
    
#line 2271 
    ldv_5_setup = arg3;
    
#line 2276 
    ether_setup(ldv_5_netdev);
    
#line 2280 
    __retres = ldv_5_netdev;
    
#line 2280 
    goto return_label;
  }
  else {
    
#line 2287 
    __retres = (struct net_device *)0;
    
#line 2287 
    goto return_label;
  }
  return_label: 
#line 2268 
                return __retres;
}


#line 2297  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_instance_deregister_3_1(struct timer_list *arg0)
{
  int ret;
  struct ldv_struct_timer_scenario_12 *cf_arg_12;
  int tmp;
  
#line 2300 
  tmp = ldv_undef_int();
  
#line 2300 
  switch (tmp) {
    case 0: 
#line 2301 
    ;
    
#line 2302 
    ret = pthread_join(ldv_thread_12,(void **)0);
    
#line 2303 
    __VERIFIER_assume(ret == 0);
    
#line 2304 
    goto ldv_44128;
    default: 
#line 2306 
    ;
    
#line 2306 
    __VERIFIER_assume(0);
  }
  ldv_44128: 
#line 2307 
  ;
  
#line 2308 
  return;
}


#line 2312  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_emg_free_netdev(struct net_device *arg0)
{
  struct net_device *ldv_2_netdev;
  
#line 2318 
  ldv_2_netdev = arg0;
  
#line 2319 
  ldv_free((void *)ldv_2_netdev);
  
#line 2323 
  goto return_label;
  return_label: 
#line 2325 
                return;
}


#line 2330  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/wireless/mwifiex/mwifiex.ko/linux:concurrency safety/emg/environment_model.c"
int ldv_emg_mod_timer(struct timer_list *arg0, unsigned long arg1)
{
  int __retres;
  struct timer_list *ldv_4_timer_list;
  int tmp_0;
  
#line 2337 
  tmp_0 = ldv_undef_int();
  
#line 2337 
  if (tmp_0 != 0) {
    
#line 2339 
    ldv_4_timer_list = arg0;
    
#line 2343 
    ldv_dispatch_instance_register_4_3(ldv_4_timer_list);
    
#line 2347 
    __retres = 0;
    
#line 2347 
    goto return_label;
  }
  else {
    int tmp;
    
#line 2354 
    tmp = ldv_undef_int_negative();
    
#line 2354 
    __retres = tmp;
    
#line 2354 
    goto return_label;
  }
  return_label: 
#line 2337 
                return __retres;
}


