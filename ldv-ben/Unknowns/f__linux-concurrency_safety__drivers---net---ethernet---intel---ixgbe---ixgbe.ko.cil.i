/* Generated by Frama-C */

#line 20  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/int-ll64.h"
typedef unsigned char __u8;

#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/int-ll64.h"
typedef short __s16;

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/int-ll64.h"
typedef unsigned short __u16;

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/int-ll64.h"
typedef int __s32;

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/int-ll64.h"
typedef unsigned int __u32;

#line 30  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/int-ll64.h"
typedef unsigned long long __u64;

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef signed char s8;

#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef unsigned char u8;

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef unsigned short u16;

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef int s32;

#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef unsigned int u32;

#line 24  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef long long s64;

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef unsigned long long u64;

#line 14  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef long __kernel_long_t;

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef unsigned long __kernel_ulong_t;

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_pid_t;

#line 48  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_uid32_t;

#line 49  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_gid32_t;

#line 71  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef __kernel_ulong_t __kernel_size_t;

#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_ssize_t;

#line 87  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_loff_t;

#line 88  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_time_t;

#line 89  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_clock_t;

#line 90  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_timer_t;

#line 91  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_clockid_t;

#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/types.h"
typedef __u16 __be16;

#line 35  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/types.h"
typedef __u32 __be32;

#line 40  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/types.h"
typedef __u32 __wsum;

#line 12  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __u32 __kernel_dev_t;

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_dev_t dev_t;

#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef unsigned short umode_t;

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_pid_t pid_t;

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_clockid_t clockid_t;

#line 29  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef _Bool bool;

#line 31  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_uid32_t uid_t;

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_gid32_t gid_t;

#line 45  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_loff_t loff_t;

#line 54  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_size_t size_t;

#line 59  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_ssize_t ssize_t;

#line 69  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_time_t time_t;

#line 102  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __s32 int32_t;

#line 106  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __u8 uint8_t;

#line 108  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __u32 uint32_t;

#line 111  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __u64 uint64_t;

#line 133  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef unsigned long sector_t;

#line 134  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef unsigned long blkcnt_t;

#line 152  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef u64 dma_addr_t;

#line 157  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef unsigned int gfp_t;

#line 158  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef unsigned int fmode_t;

#line 159  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef unsigned int oom_flags_t;

#line 177  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int counter ;
};

#line 177  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;

#line 182  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   long counter ;
};

#line 182  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;

#line 183  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};

#line 188 
struct hlist_node;

#line 188  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
struct hlist_head {
   struct hlist_node *first ;
};

#line 192  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};

#line 203  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
struct callback_head {
   struct callback_head *next ;
   void (*func)(struct callback_head *) ;
};

#line 67  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/page_types.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/ptrace.h"
struct __anonstruct_9 {
   unsigned int a ;
   unsigned int b ;
};

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/ptrace.h"
struct __anonstruct_10 {
   u16 limit0 ;
   u16 base0 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))) base1 : 8 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) type : 4 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) s : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) dpl : 2 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) p : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) limit : 4 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) avl : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) l : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) d : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) g : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))) base2 : 8 ;
};

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/ptrace.h"
union __anonunion_8 {
   struct __anonstruct_9 __anonCompField___anonunion_8_4 ;
   struct __anonstruct_10 __anonCompField___anonunion_8_5 ;
};

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/ptrace.h"
struct desc_struct {
   union __anonunion_8 __anonCompField_desc_struct_6 ;
};

#line 12  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pteval_t;

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;

#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;

#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_64_types.h"
struct __anonstruct_pte_t_11 {
   pteval_t pte ;
};

#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_64_types.h"
typedef struct __anonstruct_pte_t_11 pte_t;

#line 20  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_64_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};

#line 218  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;

#line 220  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_12 {
   pgdval_t pgd ;
};

#line 220  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_12 pgd_t;

#line 361 
struct page;

#line 361  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_types.h"
typedef struct page *pgtable_t;

#line 372 
struct file;

#line 385 
struct seq_file;

#line 423 
struct thread_struct;

#line 425 
struct mm_struct;

#line 426 
struct task_struct;

#line 427 
struct cpumask;

#line 20  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/spinlock_types.h"
struct qspinlock {
   atomic_t val ;
};

#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/qspinlock_types.h"
typedef struct qspinlock arch_spinlock_t;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/qspinlock_types.h"
struct qrwlock {
   atomic_t cnts ;
   arch_spinlock_t lock ;
};

#line 14  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/qrwlock_types.h"
typedef struct qrwlock arch_rwlock_t;

#line 48  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dynamic_debug.h"
struct device;

#line 54 
struct net_device;

#line 420  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/printk.h"
struct file_operations;

#line 432 
struct completion;

#line 102  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bug.h"
struct timespec;

#line 103 
struct compat_timespec;

#line 104  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bug.h"
struct __anonstruct_futex_16 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};

#line 104  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bug.h"
struct __anonstruct_nanosleep_17 {
   clockid_t clockid ;
   struct timespec *rmtp ;
   struct compat_timespec *compat_rmtp ;
   u64 expires ;
};

#line 104 
struct pollfd;

#line 104  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bug.h"
struct __anonstruct_poll_18 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};

#line 104  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bug.h"
union __anonunion_15 {
   struct __anonstruct_futex_16 futex ;
   struct __anonstruct_nanosleep_17 nanosleep ;
   struct __anonstruct_poll_18 poll ;
};

#line 104  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bug.h"
struct restart_block {
   long (*fn)(struct restart_block *) ;
   union __anonunion_15 __anonCompField_restart_block_7 ;
};

#line 127  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/uapi/asm/vm86.h"
struct kernel_vm86_regs {
   struct pt_regs pt ;
   unsigned short es ;
   unsigned short __esh ;
   unsigned short ds ;
   unsigned short __dsh ;
   unsigned short fs ;
   unsigned short __fsh ;
   unsigned short gs ;
   unsigned short __gsh ;
};

#line 79  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/vm86.h"
union __anonunion_19 {
   struct pt_regs *regs ;
   struct kernel_vm86_regs *vm86 ;
};

#line 79  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/vm86.h"
struct math_emu_info {
   long ___orig_eip ;
   union __anonunion_19 __anonCompField_math_emu_info_8 ;
};

#line 328  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bitmap.h"
struct cpumask {
   unsigned long bits[128U] ;
};

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cpumask.h"
typedef struct cpumask cpumask_t;

#line 652  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cpumask.h"
typedef struct cpumask *cpumask_var_t;

#line 260  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/special_insns.h"
struct fregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_29 {
   u64 rip ;
   u64 rdp ;
};

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_30 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
union __anonunion_28 {
   struct __anonstruct_29 __anonCompField___anonunion_28_12 ;
   struct __anonstruct_30 __anonCompField___anonunion_28_13 ;
};

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
union __anonunion_31 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
struct fxregs_state {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_28 __anonCompField_fxregs_state_14 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_31 __anonCompField_fxregs_state_15 ;
};

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
struct swregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};

#line 155  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
struct xstate_header {
   u64 xfeatures ;
   u64 xcomp_bv ;
   u64 reserved[6U] ;
};

#line 161  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
struct xregs_state {
   struct fxregs_state i387 ;
   struct xstate_header header ;
   u8 __reserved[464U] ;
};

#line 179  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
union fpregs_state {
   struct fregs_state fsave ;
   struct fxregs_state fxsave ;
   struct swregs_state soft ;
   struct xregs_state xsave ;
   u8 __padding[4096U] ;
};

#line 194  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
struct fpu {
   unsigned int last_cpu ;
   unsigned char fpstate_active ;
   unsigned char fpregs_active ;
   unsigned char counter ;
   union fpregs_state state ;
};

#line 170  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/processor.h"
struct seq_operations;

#line 369 
struct perf_event;

#line 370  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp0 ;
   unsigned long sp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fs ;
   unsigned long gs ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_nr ;
   unsigned long error_code ;
   unsigned long *io_bitmap_ptr ;
   unsigned long iopl ;
   unsigned int io_bitmap_max ;
   struct fpu fpu ;
};

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/atomic-long.h"
typedef atomic64_t atomic_long_t;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bottom_half.h"
struct lockdep_map;

#line 55  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/debug_locks.h"
struct stack_trace {
   unsigned int nr_entries ;
   unsigned int max_entries ;
   unsigned long *entries ;
   int skip ;
};

#line 28  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/stacktrace.h"
struct lockdep_subclass_key {
   char __one_byte ;
};

#line 53  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockdep.h"
struct lock_class_key {
   struct lockdep_subclass_key subkeys[8U] ;
};

#line 59  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockdep.h"
struct lock_class {
   struct list_head hash_entry ;
   struct list_head lock_entry ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct stack_trace usage_traces[13U] ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   unsigned int version ;
   unsigned long ops ;
   char const *name ;
   int name_version ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};

#line 144  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache[2U] ;
   char const *name ;
   int cpu ;
   unsigned long ip ;
};

#line 205  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(13))) class_idx : 13 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) irq_context : 2 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) trylock : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) read : 2 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) check : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) hardirqs_off : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(12))) references : 12 ;
   unsigned int pin_count ;
};

#line 546  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockdep.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;

#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock_types.h"
struct __anonstruct_35 {
   u8 __padding[24U] ;
   struct lockdep_map dep_map ;
};

#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock_types.h"
union __anonunion_34 {
   struct raw_spinlock rlock ;
   struct __anonstruct_35 __anonCompField___anonunion_34_17 ;
};

#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion_34 __anonCompField_spinlock_18 ;
};

#line 76  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rwlock_types.h"
struct __anonstruct_rwlock_t_36 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rwlock_types.h"
typedef struct __anonstruct_rwlock_t_36 rwlock_t;

#line 41  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.h"
struct mutex;

#line 13  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mod_devicetable.h"
typedef unsigned long kernel_ulong_t;

#line 186  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mod_devicetable.h"
struct acpi_device_id {
   __u8 id[9U] ;
   kernel_ulong_t driver_data ;
   __u32 cls ;
   __u32 cls_msk ;
};

#line 221  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mod_devicetable.h"
struct of_device_id {
   char name[32U] ;
   char type[32U] ;
   char compatible[128U] ;
   void const *data ;
};

#line 13  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/osq_lock.h"
struct optimistic_spin_queue {
   atomic_t tail ;
};

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/osq_lock.h"
struct mutex {
   atomic_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct task_struct *owner ;
   void *magic ;
   struct lockdep_map dep_map ;
};

#line 67  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   void *magic ;
};

#line 193  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mutex.h"
struct seqcount {
   unsigned int sequence ;
   struct lockdep_map dep_map ;
};

#line 52  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/seqlock.h"
typedef struct seqcount seqcount_t;

#line 404  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/seqlock.h"
struct __anonstruct_seqlock_t_48 {
   struct seqcount seqcount ;
   spinlock_t lock ;
};

#line 404  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/seqlock.h"
typedef struct __anonstruct_seqlock_t_48 seqlock_t;

#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/wait.h"
struct __wait_queue_head {
   spinlock_t lock ;
   struct list_head task_list ;
};

#line 43  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/wait.h"
typedef struct __wait_queue_head wait_queue_head_t;

#line 1170  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/wait.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};

#line 105  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/debugobjects.h"
struct timespec {
   __kernel_time_t tv_sec ;
   long tv_nsec ;
};

#line 437  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/jiffies.h"
union ktime {
   s64 tv64 ;
};

#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ktime.h"
typedef union ktime ktime_t;

#line 296  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rcupdate.h"
struct notifier_block;

#line 1120  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rcupdate.h"
union __anonunion_49 {
   unsigned long bitmap[4U] ;
   struct callback_head callback_head ;
};

#line 1120  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rcupdate.h"
struct idr_layer {
   int prefix ;
   int layer ;
   struct idr_layer *ary[256U] ;
   int count ;
   union __anonunion_49 __anonCompField_idr_layer_19 ;
};

#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/idr.h"
struct idr {
   struct idr_layer *hint ;
   struct idr_layer *top ;
   int layers ;
   int cur ;
   spinlock_t lock ;
   int id_free_cnt ;
   struct idr_layer *id_free ;
};

#line 124  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/idr.h"
struct ida_bitmap {
   long nr_busy ;
   unsigned long bitmap[15U] ;
};

#line 153  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/idr.h"
struct ida {
   struct idr idr ;
   struct ida_bitmap *free_bitmap ;
};

#line 185  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/idr.h"
struct rb_node {
   unsigned long __rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
};

#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};

#line 97 
struct dentry;

#line 98 
struct iattr;

#line 99 
struct vm_area_struct;

#line 100 
struct super_block;

#line 101 
struct file_system_type;

#line 102 
struct kernfs_open_node;

#line 103 
struct kernfs_iattrs;

#line 126 
struct kernfs_root;

#line 126  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rbtree.h"
struct kernfs_elem_dir {
   unsigned long subdirs ;
   struct rb_root children ;
   struct kernfs_root *root ;
};

#line 85  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_node;

#line 85  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_elem_symlink {
   struct kernfs_node *target_kn ;
};

#line 89 
struct kernfs_ops;

#line 89  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_elem_attr {
   struct kernfs_ops const *ops ;
   struct kernfs_open_node *open ;
   loff_t size ;
   struct kernfs_node *notify_next ;
};

#line 96  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
union __anonunion_54 {
   struct kernfs_elem_dir dir ;
   struct kernfs_elem_symlink symlink ;
   struct kernfs_elem_attr attr ;
};

#line 96  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_node {
   atomic_t count ;
   atomic_t active ;
   struct lockdep_map dep_map ;
   struct kernfs_node *parent ;
   char const *name ;
   struct rb_node rb ;
   void const *ns ;
   unsigned int hash ;
   union __anonunion_54 __anonCompField_kernfs_node_20 ;
   void *priv ;
   unsigned short flags ;
   umode_t mode ;
   unsigned int ino ;
   struct kernfs_iattrs *iattr ;
};

#line 138  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_syscall_ops {
   int (*remount_fs)(struct kernfs_root *, int *, char *) ;
   int (*show_options)(struct seq_file *, struct kernfs_root *) ;
   int (*mkdir)(struct kernfs_node *, char const *, umode_t ) ;
   int (*rmdir)(struct kernfs_node *) ;
   int (*rename)(struct kernfs_node *, struct kernfs_node *, char const *) ;
};

#line 155  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_root {
   struct kernfs_node *kn ;
   unsigned int flags ;
   struct ida ino_ida ;
   struct kernfs_syscall_ops *syscall_ops ;
   struct list_head supers ;
   wait_queue_head_t deactivate_waitq ;
};

#line 171 
struct vm_operations_struct;

#line 171  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_open_file {
   struct kernfs_node *kn ;
   struct file *file ;
   void *priv ;
   struct mutex mutex ;
   int event ;
   struct list_head list ;
   char *prealloc_buf ;
   size_t atomic_write_len ;
   bool mmapped ;
   struct vm_operations_struct const *vm_ops ;
};

#line 188  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_ops {
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   ssize_t (*read)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   size_t atomic_write_len ;
   bool prealloc ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   int (*mmap)(struct kernfs_open_file *, struct vm_area_struct *) ;
   struct lock_class_key lockdep_key ;
};

#line 281 
struct inode;

#line 477 
struct sock;

#line 478 
struct kobject;

#line 479 
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
};

#line 485  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   bool (*current_may_mount)(void) ;
   void *(*grab_current_ns)(void) ;
   void const *(*netlink_ns)(struct sock *) ;
   void const *(*initial_ns)(void) ;
   void (*drop_ns)(void *) ;
};

#line 83  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/highuid.h"
struct user_namespace;

#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uidgid.h"
struct __anonstruct_kuid_t_55 {
   uid_t val ;
};

#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uidgid.h"
typedef struct __anonstruct_kuid_t_55 kuid_t;

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uidgid.h"
struct __anonstruct_kgid_t_56 {
   gid_t val ;
};

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uidgid.h"
typedef struct __anonstruct_kgid_t_56 kgid_t;

#line 139  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uidgid.h"
struct kstat {
   u64 ino ;
   dev_t dev ;
   umode_t mode ;
   unsigned int nlink ;
   kuid_t uid ;
   kgid_t gid ;
   dev_t rdev ;
   loff_t size ;
   struct timespec atime ;
   struct timespec mtime ;
   struct timespec ctime ;
   unsigned long blksize ;
   unsigned long long blocks ;
};

#line 36  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/stat.h"
struct bin_attribute;

#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/stat.h"
struct attribute {
   char const *name ;
   umode_t mode ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ignore_lockdep : 1 ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};

#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysfs.h"
struct attribute_group {
   char const *name ;
   umode_t (*is_visible)(struct kobject *, struct attribute *, int ) ;
   struct attribute **attrs ;
   struct bin_attribute **bin_attrs ;
};

#line 82  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysfs.h"
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   ssize_t (*write)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   int (*mmap)(struct file *, struct kobject *, struct bin_attribute *, struct vm_area_struct *) ;
};

#line 155  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject *, struct attribute *, char *) ;
   ssize_t (*store)(struct kobject *, struct attribute *, char const *, size_t ) ;
};

#line 509  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysfs.h"
struct kref {
   atomic_t refcount ;
};

#line 172  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kref.h"
struct timer_list {
   struct hlist_node entry ;
   unsigned long expires ;
   void (*function)(unsigned long ) ;
   unsigned long data ;
   u32 flags ;
   int slack ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
   struct lockdep_map lockdep_map ;
};

#line 238  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timer.h"
struct hrtimer;

#line 239 
enum hrtimer_restart;

#line 837  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/sysctl.h"
struct ctl_table;

#line 838 
struct nsproxy;

#line 839 
struct ctl_table_root;

#line 840 
struct ctl_table_header;

#line 841 
struct ctl_dir;

#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
typedef int proc_handler(struct ctl_table *, int , void *, size_t *, loff_t *);

#line 57  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct ctl_table_poll {
   atomic_t event ;
   wait_queue_head_t wait ;
};

#line 96  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct ctl_table {
   char const *procname ;
   void *data ;
   int maxlen ;
   umode_t mode ;
   struct ctl_table *child ;
   proc_handler *proc_handler ;
   struct ctl_table_poll *poll ;
   void *extra1 ;
   void *extra2 ;
};

#line 117  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct ctl_node {
   struct rb_node node ;
   struct ctl_table_header *header ;
};

#line 122  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct __anonstruct_58 {
   struct ctl_table *ctl_table ;
   int used ;
   int count ;
   int nreg ;
};

#line 122  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
union __anonunion_57 {
   struct __anonstruct_58 __anonCompField___anonunion_57_21 ;
   struct callback_head rcu ;
};

#line 122 
struct ctl_table_set;

#line 122  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct ctl_table_header {
   union __anonunion_57 __anonCompField_ctl_table_header_22 ;
   struct completion *unregistering ;
   struct ctl_table *ctl_table_arg ;
   struct ctl_table_root *root ;
   struct ctl_table_set *set ;
   struct ctl_dir *parent ;
   struct ctl_node *node ;
};

#line 143  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct ctl_dir {
   struct ctl_table_header header ;
   struct rb_root root ;
};

#line 149  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct ctl_table_set {
   int (*is_seen)(struct ctl_table_set *) ;
   struct ctl_dir dir ;
};

#line 154  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct ctl_table_root {
   struct ctl_table_set default_set ;
   struct ctl_table_set *(*lookup)(struct ctl_table_root *, struct nsproxy *) ;
   int (*permissions)(struct ctl_table_header *, struct ctl_table *) ;
};

#line 259  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timer.h"
struct workqueue_struct;

#line 260 
struct work_struct;

#line 54  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct *) ;
   struct lockdep_map lockdep_map ;
};

#line 107  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
   struct workqueue_struct *wq ;
   int cpu ;
};

#line 52  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
struct kset;

#line 52 
struct kobj_type;

#line 52  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
struct kobject {
   char const *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct kernfs_node *sd ;
   struct kref kref ;
   struct delayed_work release ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) state_initialized : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) state_in_sysfs : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) state_add_uevent_sent : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) state_remove_uevent_sent : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) uevent_suppress : 1 ;
};

#line 115  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject *) ;
   struct sysfs_ops const *sysfs_ops ;
   struct attribute **default_attrs ;
   struct kobj_ns_type_operations const *(*child_ns_type)(struct kobject *) ;
   void const *(*namespace)(struct kobject *) ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
struct kobj_uevent_env {
   char *argv[3U] ;
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};

#line 131  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
struct kset_uevent_ops {
   int (* const filter)(struct kset *, struct kobject *) ;
   char const *(* const name)(struct kset *, struct kobject *) ;
   int (* const uevent)(struct kset *, struct kobject *, struct kobj_uevent_env *) ;
};

#line 148  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops const *uevent_ops ;
};

#line 223 
struct klist_node;

#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/klist.h"
struct klist_node {
   void *n_klist ;
   struct list_head n_node ;
   struct kref n_ref ;
};

#line 95  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/nodemask.h"
struct __anonstruct_nodemask_t_59 {
   unsigned long bits[16U] ;
};

#line 95  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/nodemask.h"
typedef struct __anonstruct_nodemask_t_59 nodemask_t;

#line 520 
struct path;

#line 521  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/nodemask.h"
struct seq_file {
   char *buf ;
   size_t size ;
   size_t from ;
   size_t count ;
   size_t pad_until ;
   loff_t index ;
   loff_t read_pos ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations const *op ;
   int poll_event ;
   struct user_namespace *user_ns ;
   void *private ;
};

#line 35  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/seq_file.h"
struct seq_operations {
   void *(*start)(struct seq_file *, loff_t *) ;
   void (*stop)(struct seq_file *, void *) ;
   void *(*next)(struct seq_file *, void *, loff_t *) ;
   int (*show)(struct seq_file *, void *) ;
};

#line 222 
struct pinctrl;

#line 223 
struct pinctrl_state;

#line 194  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pinctrl/consumer.h"
struct dev_pin_info {
   struct pinctrl *p ;
   struct pinctrl_state *default_state ;
   struct pinctrl_state *sleep_state ;
   struct pinctrl_state *idle_state ;
};

#line 58  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm.h"
struct pm_message {
   int event ;
};

#line 64  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm.h"
typedef struct pm_message pm_message_t;

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device *) ;
   void (*complete)(struct device *) ;
   int (*suspend)(struct device *) ;
   int (*resume)(struct device *) ;
   int (*freeze)(struct device *) ;
   int (*thaw)(struct device *) ;
   int (*poweroff)(struct device *) ;
   int (*restore)(struct device *) ;
   int (*suspend_late)(struct device *) ;
   int (*resume_early)(struct device *) ;
   int (*freeze_late)(struct device *) ;
   int (*thaw_early)(struct device *) ;
   int (*poweroff_late)(struct device *) ;
   int (*restore_early)(struct device *) ;
   int (*suspend_noirq)(struct device *) ;
   int (*resume_noirq)(struct device *) ;
   int (*freeze_noirq)(struct device *) ;
   int (*thaw_noirq)(struct device *) ;
   int (*poweroff_noirq)(struct device *) ;
   int (*restore_noirq)(struct device *) ;
   int (*runtime_suspend)(struct device *) ;
   int (*runtime_resume)(struct device *) ;
   int (*runtime_idle)(struct device *) ;
};

#line 320 
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
};

#line 327 
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_AUTOSUSPEND = 3,
    RPM_REQ_RESUME = 4
};

#line 335 
struct wakeup_source;

#line 336 
struct wake_irq;

#line 338  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm.h"
struct pm_subsys_data {
   spinlock_t lock ;
   unsigned int refcount ;
   struct list_head clock_list ;
};

#line 553 
struct dev_pm_qos;

#line 553  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) can_wakeup : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) async_suspend : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_prepared : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_suspended : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_noirq_suspended : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_late_suspended : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ignore_children : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) early_init : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) direct_complete : 1 ;
   spinlock_t lock ;
   struct list_head entry ;
   struct completion completion ;
   struct wakeup_source *wakeup ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) wakeup_path : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) syscore : 1 ;
   struct timer_list suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   struct wake_irq *wakeirq ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))) disable_depth : 3 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) idle_notification : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) request_pending : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) deferred_resume : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) run_wake : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) runtime_auto : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) no_callbacks : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) irq_safe : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) use_autosuspend : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) timer_autosuspends : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) memalloc_noio : 1 ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   int autosuspend_delay ;
   unsigned long last_busy ;
   unsigned long active_jiffies ;
   unsigned long suspended_jiffies ;
   unsigned long accounting_timestamp ;
   struct pm_subsys_data *subsys_data ;
   void (*set_latency_tolerance)(struct device *, s32 ) ;
   struct dev_pm_qos *qos ;
};

#line 615  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm.h"
struct dev_pm_domain {
   struct dev_pm_ops ops ;
   void (*detach)(struct device *, bool ) ;
   int (*activate)(struct device *) ;
   void (*sync)(struct device *) ;
   void (*dismiss)(struct device *) ;
};

#line 796  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mmzone.h"
struct rw_semaphore;

#line 797  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mmzone.h"
struct rw_semaphore {
   long count ;
   struct list_head wait_list ;
   raw_spinlock_t wait_lock ;
   struct optimistic_spin_queue osq ;
   struct task_struct *owner ;
   struct lockdep_map dep_map ;
};

#line 51  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/notifier.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block *, unsigned long , void *) ;
   struct notifier_block *next ;
   int priority ;
};

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/mmu.h"
struct ldt_struct;

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/mmu.h"
struct __anonstruct_mm_context_t_124 {
   struct ldt_struct *ldt ;
   unsigned short ia32_compat ;
   struct mutex lock ;
   void *vdso ;
   atomic_t perf_rdpmc_allowed ;
};

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/mmu.h"
typedef struct __anonstruct_mm_context_t_124 mm_context_t;

#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/xen/features.h"
struct bio_vec;

#line 1281  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mmzone.h"
struct llist_node;

#line 64  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/llist.h"
struct llist_node {
   struct llist_node *next ;
};

#line 428  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/gfp.h"
struct dma_map_ops;

#line 428  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/gfp.h"
struct dev_archdata {
   struct dma_map_ops *dma_ops ;
   void *iommu ;
};

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/device.h"
struct device_driver;

#line 16 
struct driver_private;

#line 17 
struct class;

#line 18 
struct subsys_private;

#line 19 
struct bus_type;

#line 20 
struct device_node;

#line 21 
struct fwnode_handle;

#line 22 
struct iommu_ops;

#line 23 
struct iommu_group;

#line 61  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct device_attribute;

#line 61  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct bus_type {
   char const *name ;
   char const *dev_name ;
   struct device *dev_root ;
   struct device_attribute *dev_attrs ;
   struct attribute_group const **bus_groups ;
   struct attribute_group const **dev_groups ;
   struct attribute_group const **drv_groups ;
   int (*match)(struct device *, struct device_driver *) ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   int (*probe)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*online)(struct device *) ;
   int (*offline)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   struct dev_pm_ops const *pm ;
   struct iommu_ops const *iommu_ops ;
   struct subsys_private *p ;
   struct lock_class_key lock_key ;
};

#line 139 
struct device_type;

#line 197 
enum probe_type {
    PROBE_DEFAULT_STRATEGY = 0,
    PROBE_PREFER_ASYNCHRONOUS = 1,
    PROBE_FORCE_SYNCHRONOUS = 2
};

#line 203  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct device_driver {
   char const *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char const *mod_name ;
   bool suppress_bind_attrs ;
   enum probe_type probe_type ;
   struct of_device_id const *of_match_table ;
   struct acpi_device_id const *acpi_match_table ;
   int (*probe)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   struct attribute_group const **groups ;
   struct dev_pm_ops const *pm ;
   struct driver_private *p ;
};

#line 353 
struct class_attribute;

#line 353  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct class {
   char const *name ;
   struct module *owner ;
   struct class_attribute *class_attrs ;
   struct attribute_group const **dev_groups ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *) ;
   void (*class_release)(struct class *) ;
   void (*dev_release)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   struct kobj_ns_type_operations const *ns_type ;
   void const *(*namespace)(struct device *) ;
   struct dev_pm_ops const *pm ;
   struct subsys_private *p ;
};

#line 446  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct class_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct class *, struct class_attribute *, char *) ;
   ssize_t (*store)(struct class *, struct class_attribute *, char const *, size_t ) ;
};

#line 514  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct device_type {
   char const *name ;
   struct attribute_group const **groups ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *, kuid_t *, kgid_t *) ;
   void (*release)(struct device *) ;
   struct dev_pm_ops const *pm ;
};

#line 542  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device *, struct device_attribute *, char *) ;
   ssize_t (*store)(struct device *, struct device_attribute *, char const *, size_t ) ;
};

#line 675  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};

#line 684 
struct dma_coherent_mem;

#line 684 
struct cma;

#line 684  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct device {
   struct device *parent ;
   struct device_private *p ;
   struct kobject kobj ;
   char const *init_name ;
   struct device_type const *type ;
   struct mutex mutex ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   void *driver_data ;
   struct dev_pm_info power ;
   struct dev_pm_domain *pm_domain ;
   struct dev_pin_info *pins ;
   int numa_node ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   unsigned long dma_pfn_offset ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct cma *cma_area ;
   struct dev_archdata archdata ;
   struct device_node *of_node ;
   struct fwnode_handle *fwnode ;
   dev_t devt ;
   u32 id ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct klist_node knode_class ;
   struct class *class ;
   struct attribute_group const **groups ;
   void (*release)(struct device *) ;
   struct iommu_group *iommu_group ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) offline_disabled : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) offline : 1 ;
};

#line 830  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct wakeup_source {
   char const *name ;
   struct list_head entry ;
   spinlock_t lock ;
   struct wake_irq *wakeirq ;
   struct timer_list timer ;
   unsigned long timer_expires ;
   ktime_t total_time ;
   ktime_t max_time ;
   ktime_t last_time ;
   ktime_t start_prevent_time ;
   ktime_t prevent_sleep_time ;
   unsigned long event_count ;
   unsigned long active_count ;
   unsigned long relax_count ;
   unsigned long expire_count ;
   unsigned long wakeup_count ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) active : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) autosleep_enabled : 1 ;
};

#line 60  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kmemleak.h"
struct kmem_cache;

#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;

#line 84  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/plist.h"
struct plist_node {
   int prio ;
   struct list_head prio_list ;
   struct list_head node_list ;
};

#line 58  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/uprobes.h"
struct arch_uprobe_task {
   unsigned long saved_scratch_register ;
   unsigned int saved_trap_nr ;
   unsigned int saved_tf ;
};

#line 66 
enum uprobe_task_state {
    UTASK_RUNNING = 0,
    UTASK_SSTEP = 1,
    UTASK_SSTEP_ACK = 2,
    UTASK_SSTEP_TRAPPED = 3
};

#line 73  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/uprobes.h"
struct __anonstruct_157 {
   struct arch_uprobe_task autask ;
   unsigned long vaddr ;
};

#line 73  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/uprobes.h"
struct __anonstruct_158 {
   struct callback_head dup_xol_work ;
   unsigned long dup_xol_addr ;
};

#line 73  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/uprobes.h"
union __anonunion_156 {
   struct __anonstruct_157 __anonCompField___anonunion_156_35 ;
   struct __anonstruct_158 __anonCompField___anonunion_156_36 ;
};

#line 73 
struct uprobe;

#line 73 
struct return_instance;

#line 73  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/uprobes.h"
struct uprobe_task {
   enum uprobe_task_state state ;
   union __anonunion_156 __anonCompField_uprobe_task_37 ;
   struct uprobe *active_uprobe ;
   unsigned long xol_vaddr ;
   struct return_instance *return_instances ;
   unsigned int depth ;
};

#line 94  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uprobes.h"
struct xol_area;

#line 95  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uprobes.h"
struct uprobes_state {
   struct xol_area *xol_area ;
};

#line 133 
struct address_space;

#line 134 
struct mem_cgroup;

#line 31  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
typedef void compound_page_dtor(struct page *);

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
union __anonunion_159 {
   struct address_space *mapping ;
   void *s_mem ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
union __anonunion_161 {
   unsigned long index ;
   void *freelist ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct __anonstruct_165 {
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(16))) inuse : 16 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(15))) objects : 15 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) frozen : 1 ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
union __anonunion_164 {
   atomic_t _mapcount ;
   struct __anonstruct_165 __anonCompField___anonunion_164_40 ;
   int units ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct __anonstruct_163 {
   union __anonunion_164 __anonCompField___anonstruct_163_41 ;
   atomic_t _count ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
union __anonunion_162 {
   unsigned long counters ;
   struct __anonstruct_163 __anonCompField___anonunion_162_42 ;
   unsigned int active ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct __anonstruct_160 {
   union __anonunion_161 __anonCompField___anonstruct_160_39 ;
   union __anonunion_162 __anonCompField___anonstruct_160_43 ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct __anonstruct_167 {
   struct page *next ;
   int pages ;
   int pobjects ;
};

#line 32 
struct slab;

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct __anonstruct_168 {
   compound_page_dtor *compound_dtor ;
   unsigned long compound_order ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
union __anonunion_166 {
   struct list_head lru ;
   struct __anonstruct_167 __anonCompField___anonunion_166_45 ;
   struct slab *slab_page ;
   struct callback_head callback_head ;
   struct __anonstruct_168 __anonCompField___anonunion_166_46 ;
   pgtable_t pmd_huge_pte ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
union __anonunion_169 {
   unsigned long private ;
   spinlock_t *ptl ;
   struct kmem_cache *slab_cache ;
   struct page *first_page ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct page {
   unsigned long flags ;
   union __anonunion_159 __anonCompField_page_38 ;
   struct __anonstruct_160 __anonCompField_page_44 ;
   union __anonunion_166 __anonCompField_page_47 ;
   union __anonunion_169 __anonCompField_page_48 ;
   struct mem_cgroup *mem_cgroup ;
};

#line 172  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct page_frag {
   struct page *page ;
   __u32 offset ;
   __u32 size ;
};

#line 257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct __anonstruct_shared_170 {
   struct rb_node rb ;
   unsigned long rb_subtree_last ;
};

#line 257 
struct anon_vma;

#line 257 
struct mempolicy;

#line 257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct vm_area_struct {
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   struct vm_area_struct *vm_prev ;
   struct rb_node vm_rb ;
   unsigned long rb_subtree_gap ;
   struct mm_struct *vm_mm ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct __anonstruct_shared_170 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct const *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   struct mempolicy *vm_policy ;
};

#line 325  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};

#line 331  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};

#line 344  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct task_rss_stat {
   int events ;
   int count[3U] ;
};

#line 352  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct mm_rss_stat {
   atomic_long_t count[3U] ;
};

#line 357 
struct kioctx_table;

#line 358 
struct linux_binfmt;

#line 358 
struct mmu_notifier_mm;

#line 358  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct mm_struct {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   u32 vmacache_seqnum ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   unsigned long mmap_base ;
   unsigned long mmap_legacy_base ;
   unsigned long task_size ;
   unsigned long highest_vm_end ;
   pgd_t *pgd ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   atomic_long_t nr_ptes ;
   atomic_long_t nr_pmds ;
   int map_count ;
   spinlock_t page_table_lock ;
   struct rw_semaphore mmap_sem ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   unsigned long pinned_vm ;
   unsigned long shared_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long def_flags ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[46U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   cpumask_var_t cpu_vm_mask_var ;
   mm_context_t context ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct kioctx_table *ioctx_table ;
   struct task_struct *owner ;
   struct file *exe_file ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
   struct cpumask cpumask_allocation ;
   unsigned long numa_next_scan ;
   unsigned long numa_scan_offset ;
   int numa_scan_seq ;
   bool tlb_flush_pending ;
   struct uprobes_state uprobes_state ;
   void *bd_addr ;
};

#line 4  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/cputime_jiffies.h"
typedef unsigned long cputime_t;

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sem.h"
struct sem_undo_list;

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};

#line 78  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/shm.h"
struct user_struct;

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/shm.h"
struct sysv_shm {
   struct list_head shm_clist ;
};

#line 24  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_172 {
   unsigned long sig[1U] ;
};

#line 24  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_172 sigset_t;

#line 25 
struct siginfo;

#line 17  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/signal-defs.h"
typedef void __signalfn_t(int );

#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;

#line 20  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/signal.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};

#line 10  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
typedef union sigval sigval_t;

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__kill_174 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__timer_175 {
   __kernel_timer_t _tid ;
   int _overrun ;
   char _pad[0U] ;
   sigval_t _sigval ;
   int _sys_private ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__rt_176 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigchld_177 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_bnd_179 {
   void *_lower ;
   void *_upper ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigfault_178 {
   void *_addr ;
   short _addr_lsb ;
   struct __anonstruct__addr_bnd_179 _addr_bnd ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_180 {
   long _band ;
   int _fd ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigsys_181 {
   void *_call_addr ;
   int _syscall ;
   unsigned int _arch ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
union __anonunion__sifields_173 {
   int _pad[28U] ;
   struct __anonstruct__kill_174 _kill ;
   struct __anonstruct__timer_175 _timer ;
   struct __anonstruct__rt_176 _rt ;
   struct __anonstruct__sigchld_177 _sigchld ;
   struct __anonstruct__sigfault_178 _sigfault ;
   struct __anonstruct__sigpoll_180 _sigpoll ;
   struct __anonstruct__sigsys_181 _sigsys ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct siginfo {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __anonunion__sifields_173 _sifields ;
};

#line 113  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
typedef struct siginfo siginfo_t;

#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/signal.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};

#line 243  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/signal.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};

#line 257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/signal.h"
struct k_sigaction {
   struct sigaction sa ;
};

#line 443 
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_PGID = 1,
    PIDTYPE_SID = 2,
    PIDTYPE_MAX = 3
};

#line 450 
struct pid_namespace;

#line 450  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/signal.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
   struct hlist_node pid_chain ;
};

#line 56  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pid.h"
struct pid {
   atomic_t count ;
   unsigned int level ;
   struct hlist_head tasks[3U] ;
   struct callback_head rcu ;
   struct upid numbers[1U] ;
};

#line 68  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pid.h"
struct pid_link {
   struct hlist_node node ;
   struct pid *pid ;
};

#line 174  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pid.h"
struct percpu_counter {
   raw_spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};

#line 53  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/seccomp.h"
struct seccomp_filter;

#line 54  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/seccomp.h"
struct seccomp {
   int mode ;
   struct seccomp_filter *filter ;
};

#line 40  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rtmutex.h"
struct rt_mutex_waiter;

#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/resource.h"
struct rlimit {
   __kernel_ulong_t rlim_cur ;
   __kernel_ulong_t rlim_max ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/resource.h"
struct timerqueue_node {
   struct rb_node node ;
   ktime_t expires ;
};

#line 12  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timerqueue.h"
struct timerqueue_head {
   struct rb_root head ;
   struct timerqueue_node *next ;
};

#line 50 
struct hrtimer_clock_base;

#line 51 
struct hrtimer_cpu_base;

#line 60 
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
};

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timerqueue.h"
struct hrtimer {
   struct timerqueue_node node ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer *) ;
   struct hrtimer_clock_base *base ;
   unsigned long state ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   int index ;
   clockid_t clockid ;
   struct timerqueue_head active ;
   ktime_t (*get_time)(void) ;
   ktime_t offset ;
};

#line 156  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   seqcount_t seq ;
   struct hrtimer *running ;
   unsigned int cpu ;
   unsigned int active_bases ;
   unsigned int clock_was_set_seq ;
   bool migration_enabled ;
   bool nohz_active ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) in_hrtirq : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) hres_active : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) hang_detected : 1 ;
   ktime_t expires_next ;
   struct hrtimer *next_timer ;
   unsigned int nr_events ;
   unsigned int nr_retries ;
   unsigned int nr_hangs ;
   unsigned int max_hang_time ;
   struct hrtimer_clock_base clock_base[4U] ;
};

#line 466  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/hrtimer.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};

#line 45  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/task_io_accounting.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/latencytop.h"
struct assoc_array_ptr;

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/latencytop.h"
struct assoc_array {
   struct assoc_array_ptr *root ;
   unsigned long nr_leaves_on_tree ;
};

#line 31  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
typedef int32_t key_serial_t;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
typedef uint32_t key_perm_t;

#line 35 
struct key;

#line 36 
struct signal_struct;

#line 37 
struct cred;

#line 38 
struct key_type;

#line 42  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
struct keyring_index_key {
   struct key_type *type ;
   char const *description ;
   size_t desc_len ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
union __anonunion_188 {
   struct list_head graveyard_link ;
   struct rb_node serial_node ;
};

#line 123 
struct key_user;

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
union __anonunion_189 {
   time_t expiry ;
   time_t revoked_at ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
struct __anonstruct_191 {
   struct key_type *type ;
   char *description ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
union __anonunion_190 {
   struct keyring_index_key index_key ;
   struct __anonstruct_191 __anonCompField___anonunion_190_51 ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
union __anonunion_type_data_192 {
   struct list_head link ;
   unsigned long x[2U] ;
   void *p[2U] ;
   int reject_error ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
union __anonunion_payload_194 {
   unsigned long value ;
   void *rcudata ;
   void *data ;
   void *data2[2U] ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
union __anonunion_193 {
   union __anonunion_payload_194 payload ;
   struct assoc_array keys ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
struct key {
   atomic_t usage ;
   key_serial_t serial ;
   union __anonunion_188 __anonCompField_key_49 ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_189 __anonCompField_key_50 ;
   time_t last_used_at ;
   kuid_t uid ;
   kgid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   unsigned long flags ;
   union __anonunion_190 __anonCompField_key_52 ;
   union __anonunion_type_data_192 type_data ;
   union __anonunion_193 __anonCompField_key_53 ;
};

#line 358 
struct audit_context;

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/selinux.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   int nblocks ;
   kgid_t small_block[32U] ;
   kgid_t *blocks[0U] ;
};

#line 90  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   kuid_t uid ;
   kgid_t gid ;
   kuid_t suid ;
   kgid_t sgid ;
   kuid_t euid ;
   kgid_t egid ;
   kuid_t fsuid ;
   kgid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   unsigned char jit_keyring ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   void *security ;
   struct user_struct *user ;
   struct user_namespace *user_ns ;
   struct group_info *group_info ;
   struct callback_head rcu ;
};

#line 369 
struct percpu_ref;

#line 55  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/percpu-refcount.h"
typedef void percpu_ref_func_t(struct percpu_ref *);

#line 68  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/percpu-refcount.h"
struct percpu_ref {
   atomic_long_t count ;
   unsigned long percpu_count_ptr ;
   percpu_ref_func_t *release ;
   percpu_ref_func_t *confirm_switch ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) force_atomic : 1 ;
   struct callback_head rcu ;
};

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/percpu-rwsem.h"
struct cgroup;

#line 28 
struct cgroup_root;

#line 29 
struct cgroup_subsys;

#line 30 
struct cgroup_taskset;

#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/percpu-rwsem.h"
struct cgroup_subsys_state {
   struct cgroup *cgroup ;
   struct cgroup_subsys *ss ;
   struct percpu_ref refcnt ;
   struct cgroup_subsys_state *parent ;
   struct list_head sibling ;
   struct list_head children ;
   int id ;
   unsigned int flags ;
   u64 serial_nr ;
   struct callback_head callback_head ;
   struct work_struct destroy_work ;
};

#line 124  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cgroup-defs.h"
struct css_set {
   atomic_t refcount ;
   struct hlist_node hlist ;
   struct list_head tasks ;
   struct list_head mg_tasks ;
   struct list_head cgrp_links ;
   struct cgroup *dfl_cgrp ;
   struct cgroup_subsys_state *subsys[12U] ;
   struct list_head mg_preload_node ;
   struct list_head mg_node ;
   struct cgroup *mg_src_cgrp ;
   struct css_set *mg_dst_cset ;
   struct list_head e_cset_node[12U] ;
   struct callback_head callback_head ;
};

#line 197  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cgroup-defs.h"
struct cgroup {
   struct cgroup_subsys_state self ;
   unsigned long flags ;
   int id ;
   int populated_cnt ;
   struct kernfs_node *kn ;
   struct kernfs_node *procs_kn ;
   struct kernfs_node *populated_kn ;
   unsigned int subtree_control ;
   unsigned int child_subsys_mask ;
   struct cgroup_subsys_state *subsys[12U] ;
   struct cgroup_root *root ;
   struct list_head cset_links ;
   struct list_head e_csets[12U] ;
   struct list_head pidlists ;
   struct mutex pidlist_mutex ;
   wait_queue_head_t offline_waitq ;
   struct work_struct release_agent_work ;
};

#line 270  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cgroup-defs.h"
struct cgroup_root {
   struct kernfs_root *kf_root ;
   unsigned int subsys_mask ;
   int hierarchy_id ;
   struct cgroup cgrp ;
   atomic_t nr_cgrps ;
   struct list_head root_list ;
   unsigned int flags ;
   struct idr cgroup_idr ;
   char release_agent_path[4096U] ;
   char name[64U] ;
};

#line 306  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cgroup-defs.h"
struct cftype {
   char name[64U] ;
   int private ;
   umode_t mode ;
   size_t max_write_len ;
   unsigned int flags ;
   struct cgroup_subsys *ss ;
   struct list_head node ;
   struct kernfs_ops *kf_ops ;
   u64 (*read_u64)(struct cgroup_subsys_state *, struct cftype *) ;
   s64 (*read_s64)(struct cgroup_subsys_state *, struct cftype *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   int (*write_u64)(struct cgroup_subsys_state *, struct cftype *, u64 ) ;
   int (*write_s64)(struct cgroup_subsys_state *, struct cftype *, s64 ) ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   struct lock_class_key lockdep_key ;
};

#line 388  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cgroup-defs.h"
struct cgroup_subsys {
   struct cgroup_subsys_state *(*css_alloc)(struct cgroup_subsys_state *) ;
   int (*css_online)(struct cgroup_subsys_state *) ;
   void (*css_offline)(struct cgroup_subsys_state *) ;
   void (*css_released)(struct cgroup_subsys_state *) ;
   void (*css_free)(struct cgroup_subsys_state *) ;
   void (*css_reset)(struct cgroup_subsys_state *) ;
   void (*css_e_css_changed)(struct cgroup_subsys_state *) ;
   int (*can_attach)(struct cgroup_subsys_state *, struct cgroup_taskset *) ;
   void (*cancel_attach)(struct cgroup_subsys_state *, struct cgroup_taskset *) ;
   void (*attach)(struct cgroup_subsys_state *, struct cgroup_taskset *) ;
   void (*fork)(struct task_struct *) ;
   void (*exit)(struct cgroup_subsys_state *, struct cgroup_subsys_state *, struct task_struct *) ;
   void (*bind)(struct cgroup_subsys_state *) ;
   int disabled ;
   int early_init ;
   bool broken_hierarchy ;
   bool warned_broken_hierarchy ;
   int id ;
   char const *name ;
   struct cgroup_root *root ;
   struct idr css_idr ;
   struct list_head cfts ;
   struct cftype *dfl_cftypes ;
   struct cftype *legacy_cftypes ;
   unsigned int depends_on ;
};

#line 128  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct futex_pi_state;

#line 129 
struct robust_list_head;

#line 131 
struct fs_struct;

#line 132 
struct perf_event_context;

#line 135 
struct nameidata;

#line 188 
struct cfs_rq;

#line 189 
struct task_group;

#line 477  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct sighand_struct {
   atomic_t count ;
   struct k_sigaction action[64U] ;
   spinlock_t siglock ;
   wait_queue_head_t signalfd_wqh ;
};

#line 516  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   cputime_t ac_utime ;
   cputime_t ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};

#line 524  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct cpu_itimer {
   cputime_t expires ;
   cputime_t incr ;
   u32 error ;
   u32 incr_error ;
};

#line 531  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct cputime {
   cputime_t utime ;
   cputime_t stime ;
};

#line 543  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct task_cputime {
   cputime_t utime ;
   cputime_t stime ;
   unsigned long long sum_exec_runtime ;
};

#line 563  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct task_cputime_atomic {
   atomic64_t utime ;
   atomic64_t stime ;
   atomic64_t sum_exec_runtime ;
};

#line 584  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct thread_group_cputimer {
   struct task_cputime_atomic cputime_atomic ;
   int running ;
};

#line 620 
struct autogroup;

#line 621 
struct tty_struct;

#line 621 
struct taskstats;

#line 621 
struct tty_audit_buf;

#line 621  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct signal_struct {
   atomic_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   struct list_head thread_head ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_child_subreaper : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) has_child_subreaper : 1 ;
   int posix_timer_id ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   struct pid *leader_pid ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   struct autogroup *autogroup ;
   seqlock_t stats_lock ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t cutime ;
   cputime_t cstime ;
   cputime_t gtime ;
   cputime_t cgtime ;
   struct cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   unsigned int audit_tty_log_passwd ;
   struct tty_audit_buf *tty_audit_buf ;
   struct rw_semaphore group_rwsem ;
   oom_flags_t oom_flags ;
   short oom_score_adj ;
   short oom_score_adj_min ;
   struct mutex cred_guard_mutex ;
};

#line 802  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct user_struct {
   atomic_t __count ;
   atomic_t processes ;
   atomic_t sigpending ;
   atomic_t inotify_watches ;
   atomic_t inotify_devs ;
   atomic_t fanotify_listeners ;
   atomic_long_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   struct key *uid_keyring ;
   struct key *session_keyring ;
   struct hlist_node uidhash_node ;
   kuid_t uid ;
   atomic_long_t locked_vm ;
};

#line 846 
struct reclaim_state;

#line 847  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
};

#line 861  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct task_delay_info {
   spinlock_t lock ;
   unsigned int flags ;
   u64 blkio_start ;
   u64 blkio_delay ;
   u64 swapin_delay ;
   u32 blkio_count ;
   u32 swapin_count ;
   u64 freepages_start ;
   u64 freepages_delay ;
   u32 freepages_count ;
};

#line 909  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct wake_q_node {
   struct wake_q_node *next ;
};

#line 1172 
struct pipe_inode_info;

#line 1173 
struct uts_namespace;

#line 1174  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   u32 inv_weight ;
};

#line 1181  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct sched_avg {
   u64 last_runnable_update ;
   s64 decay_count ;
   unsigned long load_avg_contrib ;
   unsigned long utilization_avg_contrib ;
   u32 runnable_avg_sum ;
   u32 avg_period ;
   u32 running_avg_sum ;
};

#line 1206  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};

#line 1241  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   int depth ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
   struct sched_avg avg ;
};

#line 1273 
struct rt_rq;

#line 1273  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned long watchdog_stamp ;
   unsigned int time_slice ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
};

#line 1289  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct sched_dl_entity {
   struct rb_node rb_node ;
   u64 dl_runtime ;
   u64 dl_deadline ;
   u64 dl_period ;
   u64 dl_bw ;
   s64 runtime ;
   u64 deadline ;
   unsigned int flags ;
   int dl_throttled ;
   int dl_new ;
   int dl_boosted ;
   int dl_yielded ;
   struct hrtimer dl_timer ;
};

#line 1355  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct memcg_oom_info {
   struct mem_cgroup *memcg ;
   gfp_t gfp_mask ;
   int order ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) may_oom : 1 ;
};

#line 1779 
struct sched_class;

#line 1779 
struct files_struct;

#line 1779 
struct compat_robust_list_head;

#line 1779 
struct numa_group;

#line 1779 
struct ftrace_ret_stack;

#line 1779  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct task_struct {
   long volatile state ;
   void *stack ;
   atomic_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   struct llist_node wake_entry ;
   int on_cpu ;
   struct task_struct *last_wakee ;
   unsigned long wakee_flips ;
   unsigned long wakee_flip_decay_ts ;
   int wake_cpu ;
   int on_rq ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class const *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct task_group *sched_task_group ;
   struct sched_dl_entity dl ;
   struct hlist_head preempt_notifiers ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   int nr_cpus_allowed ;
   cpumask_t cpus_allowed ;
   unsigned long rcu_tasks_nvcsw ;
   bool rcu_tasks_holdout ;
   struct list_head rcu_tasks_holdout_list ;
   int rcu_tasks_idle_cpu ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct rb_node pushable_dl_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   u32 vmacache_seqnum ;
   struct vm_area_struct *vmacache[4U] ;
   struct task_rss_stat rss_stat ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned long jobctl ;
   unsigned int personality ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) in_execve : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) in_iowait : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) sched_reset_on_fork : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) sched_contributes_to_load : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) sched_migrated : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) memcg_kmem_skip_account : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) brk_randomized : 1 ;
   unsigned long atomic_flags ;
   struct restart_block restart_block ;
   pid_t pid ;
   pid_t tgid ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid_link pids[3U] ;
   struct list_head thread_group ;
   struct list_head thread_node ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t utimescaled ;
   cputime_t stimescaled ;
   cputime_t gtime ;
   struct cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   u64 start_time ;
   u64 real_start_time ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct cred const *real_cred ;
   struct cred const *cred ;
   char comm[16U] ;
   struct nameidata *nameidata ;
   struct sysv_sem sysvsem ;
   struct sysv_shm sysvshm ;
   unsigned long last_switch_count ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   int (*notifier)(void *) ;
   void *notifier_data ;
   sigset_t *notifier_mask ;
   struct callback_head *task_works ;
   struct audit_context *audit_context ;
   kuid_t loginuid ;
   unsigned int sessionid ;
   struct seccomp seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   raw_spinlock_t pi_lock ;
   struct wake_q_node wake_q ;
   struct rb_root pi_waiters ;
   struct rb_node *pi_waiters_leftmost ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   gfp_t lockdep_reclaim_gfp ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct blk_plug *plug ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   unsigned long ptrace_message ;
   siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   cputime_t acct_timexpd ;
   nodemask_t mems_allowed ;
   seqcount_t mems_allowed_seq ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct perf_event_context *perf_event_ctxp[2U] ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_next ;
   short pref_node_fork ;
   int numa_scan_seq ;
   unsigned int numa_scan_period ;
   unsigned int numa_scan_period_max ;
   int numa_preferred_nid ;
   unsigned long numa_migrate_retry ;
   u64 node_stamp ;
   u64 last_task_numa_placement ;
   u64 last_sum_exec_runtime ;
   struct callback_head numa_work ;
   struct list_head numa_entry ;
   struct numa_group *numa_group ;
   unsigned long *numa_faults ;
   unsigned long total_numa_faults ;
   unsigned long numa_faults_locality[3U] ;
   unsigned long numa_pages_migrated ;
   struct callback_head rcu ;
   struct pipe_inode_info *splice_pipe ;
   struct page_frag task_frag ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   int nr_dirtied ;
   int nr_dirtied_pause ;
   unsigned long dirty_paused_when ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   unsigned long timer_slack_ns ;
   unsigned long default_timer_slack_ns ;
   unsigned int kasan_depth ;
   int curr_ret_stack ;
   struct ftrace_ret_stack *ret_stack ;
   unsigned long long ftrace_timestamp ;
   atomic_t trace_overrun ;
   atomic_t tracing_graph_pause ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   struct memcg_oom_info memcg_oom ;
   struct uprobe_task *utask ;
   unsigned int sequential_io ;
   unsigned int sequential_io_avg ;
   unsigned long task_state_change ;
   int pagefault_disabled ;
   struct thread_struct thread ;
};

#line 253  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
struct proc_dir_entry;

#line 93  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bit_spinlock.h"
struct shrink_control {
   gfp_t gfp_mask ;
   unsigned long nr_to_scan ;
   int nid ;
   struct mem_cgroup *memcg ;
};

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/shrinker.h"
struct shrinker {
   unsigned long (*count_objects)(struct shrinker *, struct shrink_control *) ;
   unsigned long (*scan_objects)(struct shrinker *, struct shrink_control *) ;
   int seeks ;
   long batch ;
   unsigned long flags ;
   struct list_head list ;
   atomic_long_t *nr_deferred ;
};

#line 64  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/page_ext.h"
struct file_ra_state;

#line 65 
struct writeback_control;

#line 207  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm.h"
struct vm_fault {
   unsigned int flags ;
   unsigned long pgoff ;
   void *virtual_address ;
   struct page *cow_page ;
   struct page *page ;
   unsigned long max_pgoff ;
   pte_t *pte ;
};

#line 239  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct *) ;
   void (*close)(struct vm_area_struct *) ;
   int (*fault)(struct vm_area_struct *, struct vm_fault *) ;
   void (*map_pages)(struct vm_area_struct *, struct vm_fault *) ;
   int (*page_mkwrite)(struct vm_area_struct *, struct vm_fault *) ;
   int (*pfn_mkwrite)(struct vm_area_struct *, struct vm_fault *) ;
   int (*access)(struct vm_area_struct *, unsigned long , void *, int , int ) ;
   char const *(*name)(struct vm_area_struct *) ;
   int (*set_policy)(struct vm_area_struct *, struct mempolicy *) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct *, unsigned long ) ;
   struct page *(*find_special_page)(struct vm_area_struct *, unsigned long ) ;
};

#line 1249 
struct kvec;

#line 2291  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm.h"
struct scatterlist {
   unsigned long sg_magic ;
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/scatterlist.h"
struct sg_table {
   struct scatterlist *sgl ;
   unsigned int nents ;
   unsigned int orig_nents ;
};

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pci_64.h"
struct dma_attrs {
   unsigned long flags[1U] ;
};

#line 70  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dma-attrs.h"
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
};

#line 77  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dma-attrs.h"
struct dma_map_ops {
   void *(*alloc)(struct device *, size_t , dma_addr_t *, gfp_t , struct dma_attrs *) ;
   void (*free)(struct device *, size_t , void *, dma_addr_t , struct dma_attrs *) ;
   int (*mmap)(struct device *, struct vm_area_struct *, void *, dma_addr_t , size_t , struct dma_attrs *) ;
   int (*get_sgtable)(struct device *, struct sg_table *, void *, dma_addr_t , size_t , struct dma_attrs *) ;
   dma_addr_t (*map_page)(struct device *, struct page *, unsigned long , size_t , enum dma_data_direction , struct dma_attrs *) ;
   void (*unmap_page)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *) ;
   int (*map_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , struct dma_attrs *) ;
   void (*unmap_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , struct dma_attrs *) ;
   void (*sync_single_for_cpu)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_single_for_device)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_sg_for_cpu)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*sync_sg_for_device)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   int (*mapping_error)(struct device *, dma_addr_t ) ;
   int (*dma_supported)(struct device *, u64 ) ;
   int (*set_dma_mask)(struct device *, u64 ) ;
   int is_phys ;
};

#line 56  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/prefetch.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/uio.h"
struct kvec {
   void *iov_base ;
   size_t iov_len ;
};

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uio.h"
union __anonunion_210 {
   struct iovec const *iov ;
   struct kvec const *kvec ;
   struct bio_vec const *bvec ;
};

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uio.h"
struct iov_iter {
   int type ;
   size_t iov_offset ;
   size_t count ;
   union __anonunion_210 __anonCompField_iov_iter_58 ;
   unsigned long nr_segs ;
};

#line 1182  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dmaengine.h"
struct dql {
   unsigned int num_queued ;
   unsigned int adj_limit ;
   unsigned int last_obj_cnt ;
   unsigned int limit ;
   unsigned int num_completed ;
   unsigned int prev_ovlimit ;
   unsigned int prev_num_queued ;
   unsigned int prev_last_obj_cnt ;
   unsigned int lowest_slack ;
   unsigned long slack_start_time ;
   unsigned int max_limit ;
   unsigned int min_limit ;
   unsigned int slack_hold_time ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/socket.h"
typedef unsigned short __kernel_sa_family_t;

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/socket.h"
typedef __kernel_sa_family_t sa_family_t;

#line 24  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/socket.h"
struct sockaddr {
   sa_family_t sa_family ;
   char sa_data[14U] ;
};

#line 38 
struct kiocb;

#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/socket.h"
struct msghdr {
   void *msg_name ;
   int msg_namelen ;
   struct iov_iter msg_iter ;
   void *msg_control ;
   __kernel_size_t msg_controllen ;
   unsigned int msg_flags ;
   struct kiocb *msg_iocb ;
};

#line 43  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_sync_serial_settings_212 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
};

#line 43  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_sync_serial_settings_212 sync_serial_settings;

#line 50  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_te1_settings_213 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
   unsigned int slot_map ;
};

#line 50  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_te1_settings_213 te1_settings;

#line 55  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_raw_hdlc_proto_214 {
   unsigned short encoding ;
   unsigned short parity ;
};

#line 55  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_raw_hdlc_proto_214 raw_hdlc_proto;

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_215 {
   unsigned int t391 ;
   unsigned int t392 ;
   unsigned int n391 ;
   unsigned int n392 ;
   unsigned int n393 ;
   unsigned short lmi ;
   unsigned short dce ;
};

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_215 fr_proto;

#line 69  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_216 {
   unsigned int dlci ;
};

#line 69  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_216 fr_proto_pvc;

#line 74  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_info_217 {
   unsigned int dlci ;
   char master[16U] ;
};

#line 74  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_info_217 fr_proto_pvc_info;

#line 79  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_cisco_proto_218 {
   unsigned int interval ;
   unsigned int timeout ;
};

#line 79  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_cisco_proto_218 cisco_proto;

#line 117  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct ifmap {
   unsigned long mem_start ;
   unsigned long mem_end ;
   unsigned short base_addr ;
   unsigned char irq ;
   unsigned char dma ;
   unsigned char port ;
};

#line 177  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if.h"
union __anonunion_ifs_ifsu_219 {
   raw_hdlc_proto *raw_hdlc ;
   cisco_proto *cisco ;
   fr_proto *fr ;
   fr_proto_pvc *fr_pvc ;
   fr_proto_pvc_info *fr_pvc_info ;
   sync_serial_settings *sync ;
   te1_settings *te1 ;
};

#line 177  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if.h"
struct if_settings {
   unsigned int type ;
   unsigned int size ;
   union __anonunion_ifs_ifsu_219 ifs_ifsu ;
};

#line 195  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if.h"
union __anonunion_ifr_ifrn_220 {
   char ifrn_name[16U] ;
};

#line 195  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if.h"
union __anonunion_ifr_ifru_221 {
   struct sockaddr ifru_addr ;
   struct sockaddr ifru_dstaddr ;
   struct sockaddr ifru_broadaddr ;
   struct sockaddr ifru_netmask ;
   struct sockaddr ifru_hwaddr ;
   short ifru_flags ;
   int ifru_ivalue ;
   int ifru_mtu ;
   struct ifmap ifru_map ;
   char ifru_slave[16U] ;
   char ifru_newname[16U] ;
   void *ifru_data ;
   struct if_settings ifru_settings ;
};

#line 195  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if.h"
struct ifreq {
   union __anonunion_ifr_ifrn_220 ifr_ifrn ;
   union __anonunion_ifr_ifru_221 ifr_ifru ;
};

#line 91  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kdev_t.h"
struct hlist_bl_node;

#line 91  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kdev_t.h"
struct hlist_bl_head {
   struct hlist_bl_node *first ;
};

#line 36  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list_bl.h"
struct hlist_bl_node {
   struct hlist_bl_node *next ;
   struct hlist_bl_node **pprev ;
};

#line 114  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rculist_bl.h"
struct __anonstruct_226 {
   spinlock_t lock ;
   int count ;
};

#line 114  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rculist_bl.h"
union __anonunion_225 {
   struct __anonstruct_226 __anonCompField___anonunion_225_59 ;
};

#line 114  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rculist_bl.h"
struct lockref {
   union __anonunion_225 __anonCompField_lockref_60 ;
};

#line 50  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockref.h"
struct vfsmount;

#line 51  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockref.h"
struct __anonstruct_228 {
   u32 hash ;
   u32 len ;
};

#line 51  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockref.h"
union __anonunion_227 {
   struct __anonstruct_228 __anonCompField___anonunion_227_61 ;
   u64 hash_len ;
};

#line 51  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockref.h"
struct qstr {
   union __anonunion_227 __anonCompField_qstr_62 ;
   unsigned char const *name ;
};

#line 90  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dcache.h"
struct dentry_operations;

#line 90  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dcache.h"
union __anonunion_d_u_229 {
   struct hlist_node d_alias ;
   struct callback_head d_rcu ;
};

#line 90  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dcache.h"
struct dentry {
   unsigned int d_flags ;
   seqcount_t d_seq ;
   struct hlist_bl_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct inode *d_inode ;
   unsigned char d_iname[32U] ;
   struct lockref d_lockref ;
   struct dentry_operations const *d_op ;
   struct super_block *d_sb ;
   unsigned long d_time ;
   void *d_fsdata ;
   struct list_head d_lru ;
   struct list_head d_child ;
   struct list_head d_subdirs ;
   union __anonunion_d_u_229 d_u ;
};

#line 142  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_weak_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_hash)(struct dentry const *, struct qstr *) ;
   int (*d_compare)(struct dentry const *, struct dentry const *, unsigned int , char const *, struct qstr const *) ;
   int (*d_delete)(struct dentry const *) ;
   void (*d_release)(struct dentry *) ;
   void (*d_prune)(struct dentry *) ;
   void (*d_iput)(struct dentry *, struct inode *) ;
   char *(*d_dname)(struct dentry *, char *, int ) ;
   struct vfsmount *(*d_automount)(struct path *) ;
   int (*d_manage)(struct dentry *, bool ) ;
   struct inode *(*d_select_inode)(struct dentry *, unsigned int ) ;
};

#line 586  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dcache.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
};

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/path.h"
struct list_lru_one {
   struct list_head list ;
   long nr_items ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list_lru.h"
struct list_lru_memcg {
   struct list_lru_one *lru[0U] ;
};

#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list_lru.h"
struct list_lru_node {
   spinlock_t lock ;
   struct list_lru_one lru ;
   struct list_lru_memcg *memcg_lrus ;
};

#line 47  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list_lru.h"
struct list_lru {
   struct list_lru_node *node ;
   struct list_head list ;
};

#line 58  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/radix-tree.h"
struct __anonstruct_233 {
   struct radix_tree_node *parent ;
   void *private_data ;
};

#line 58  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/radix-tree.h"
union __anonunion_232 {
   struct __anonstruct_233 __anonCompField___anonunion_232_63 ;
   struct callback_head callback_head ;
};

#line 58  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/radix-tree.h"
struct radix_tree_node {
   unsigned int path ;
   unsigned int count ;
   union __anonunion_232 __anonCompField_radix_tree_node_64 ;
   struct list_head private_list ;
   void *slots[64U] ;
   unsigned long tags[3U][1U] ;
};

#line 105  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/radix-tree.h"
struct radix_tree_root {
   unsigned int height ;
   gfp_t gfp_mask ;
   struct radix_tree_node *rnode ;
};

#line 45  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/semaphore.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};

#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/fiemap.h"
enum migrate_mode {
    MIGRATE_ASYNC = 0,
    MIGRATE_SYNC_LIGHT = 1,
    MIGRATE_SYNC = 2
};

#line 47 
struct block_device;

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blk_types.h"
struct bio_vec {
   struct page *bv_page ;
   unsigned int bv_len ;
   unsigned int bv_offset ;
};

#line 60  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/fs.h"
struct export_operations;

#line 62 
struct poll_table_struct;

#line 63 
struct kstatfs;

#line 64 
struct swap_info_struct;

#line 75  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   kuid_t ia_uid ;
   kgid_t ia_gid ;
   loff_t ia_size ;
   struct timespec ia_atime ;
   struct timespec ia_mtime ;
   struct timespec ia_ctime ;
   struct file *ia_file ;
};

#line 212  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dqblk_xfs.h"
struct dquot;

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/projid.h"
typedef __kernel_uid32_t projid_t;

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/projid.h"
struct __anonstruct_kprojid_t_237 {
   projid_t val ;
};

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/projid.h"
typedef struct __anonstruct_kprojid_t_237 kprojid_t;

#line 166  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/quota.h"
enum quota_type {
    USRQUOTA = 0,
    GRPQUOTA = 1,
    PRJQUOTA = 2
};

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
typedef long long qsize_t;

#line 67  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
union __anonunion_238 {
   kuid_t uid ;
   kgid_t gid ;
   kprojid_t projid ;
};

#line 67  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct kqid {
   union __anonunion_238 __anonCompField_kqid_66 ;
   enum quota_type type ;
};

#line 184  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time_t dqb_btime ;
   time_t dqb_itime ;
};

#line 206 
struct quota_format_type;

#line 207  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_max_spc_limit ;
   qsize_t dqi_max_ino_limit ;
   void *dqi_priv ;
};

#line 272  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   atomic_t dq_count ;
   wait_queue_head_t dq_wait_unused ;
   struct super_block *dq_sb ;
   struct kqid dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   struct mem_dqblk dq_dqb ;
};

#line 299  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block *, int ) ;
   int (*read_file_info)(struct super_block *, int ) ;
   int (*write_file_info)(struct super_block *, int ) ;
   int (*free_file_info)(struct super_block *, int ) ;
   int (*read_dqblk)(struct dquot *) ;
   int (*commit_dqblk)(struct dquot *) ;
   int (*release_dqblk)(struct dquot *) ;
};

#line 310  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct dquot_operations {
   int (*write_dquot)(struct dquot *) ;
   struct dquot *(*alloc_dquot)(struct super_block *, int ) ;
   void (*destroy_dquot)(struct dquot *) ;
   int (*acquire_dquot)(struct dquot *) ;
   int (*release_dquot)(struct dquot *) ;
   int (*mark_dirty)(struct dquot *) ;
   int (*write_info)(struct super_block *, int ) ;
   qsize_t *(*get_reserved_space)(struct inode *) ;
   int (*get_projid)(struct inode *, kprojid_t *) ;
};

#line 325  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct qc_dqblk {
   int d_fieldmask ;
   u64 d_spc_hardlimit ;
   u64 d_spc_softlimit ;
   u64 d_ino_hardlimit ;
   u64 d_ino_softlimit ;
   u64 d_space ;
   u64 d_ino_count ;
   s64 d_ino_timer ;
   s64 d_spc_timer ;
   int d_ino_warns ;
   int d_spc_warns ;
   u64 d_rt_spc_hardlimit ;
   u64 d_rt_spc_softlimit ;
   u64 d_rt_space ;
   s64 d_rt_spc_timer ;
   int d_rt_spc_warns ;
};

#line 348  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct qc_type_state {
   unsigned int flags ;
   unsigned int spc_timelimit ;
   unsigned int ino_timelimit ;
   unsigned int rt_spc_timelimit ;
   unsigned int spc_warnlimit ;
   unsigned int ino_warnlimit ;
   unsigned int rt_spc_warnlimit ;
   unsigned long long ino ;
   blkcnt_t blocks ;
   blkcnt_t nextents ;
};

#line 394  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct qc_state {
   unsigned int s_incoredqs ;
   struct qc_type_state s_state[3U] ;
};

#line 405  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct qc_info {
   int i_fieldmask ;
   unsigned int i_flags ;
   unsigned int i_spc_timelimit ;
   unsigned int i_ino_timelimit ;
   unsigned int i_rt_spc_timelimit ;
   unsigned int i_spc_warnlimit ;
   unsigned int i_ino_warnlimit ;
   unsigned int i_rt_spc_warnlimit ;
};

#line 418  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block *, int , int , struct path *) ;
   int (*quota_off)(struct super_block *, int ) ;
   int (*quota_enable)(struct super_block *, unsigned int ) ;
   int (*quota_disable)(struct super_block *, unsigned int ) ;
   int (*quota_sync)(struct super_block *, int ) ;
   int (*set_info)(struct super_block *, int , struct qc_info *) ;
   int (*get_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*set_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_state)(struct super_block *, struct qc_state *) ;
   int (*rm_xquota)(struct super_block *, unsigned int ) ;
};

#line 432  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops const *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};

#line 496  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct mutex dqio_mutex ;
   struct mutex dqonoff_mutex ;
   struct inode *files[3U] ;
   struct mem_dqinfo info[3U] ;
   struct quota_format_ops const *ops[3U] ;
};

#line 526  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct kiocb {
   struct file *ki_filp ;
   loff_t ki_pos ;
   void (*ki_complete)(struct kiocb *, long , long ) ;
   void *private ;
   int ki_flags ;
};

#line 366  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page *, struct writeback_control *) ;
   int (*readpage)(struct file *, struct page *) ;
   int (*writepages)(struct address_space *, struct writeback_control *) ;
   int (*set_page_dirty)(struct page *) ;
   int (*readpages)(struct file *, struct address_space *, struct list_head *, unsigned int ) ;
   int (*write_begin)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page **, void **) ;
   int (*write_end)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page *, void *) ;
   sector_t (*bmap)(struct address_space *, sector_t ) ;
   void (*invalidatepage)(struct page *, unsigned int , unsigned int ) ;
   int (*releasepage)(struct page *, gfp_t ) ;
   void (*freepage)(struct page *) ;
   ssize_t (*direct_IO)(struct kiocb *, struct iov_iter *, loff_t ) ;
   int (*migratepage)(struct address_space *, struct page *, struct page *, enum migrate_mode ) ;
   int (*launder_page)(struct page *) ;
   int (*is_partially_uptodate)(struct page *, unsigned long , unsigned long ) ;
   void (*is_dirty_writeback)(struct page *, bool *, bool *) ;
   int (*error_remove_page)(struct address_space *, struct page *) ;
   int (*swap_activate)(struct swap_info_struct *, struct file *, sector_t *) ;
   void (*swap_deactivate)(struct file *) ;
};

#line 423  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct radix_tree_root page_tree ;
   spinlock_t tree_lock ;
   atomic_t i_mmap_writable ;
   struct rb_root i_mmap ;
   struct rw_semaphore i_mmap_rwsem ;
   unsigned long nrpages ;
   unsigned long nrshadows ;
   unsigned long writeback_index ;
   struct address_space_operations const *a_ops ;
   unsigned long flags ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   void *private_data ;
};

#line 444  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   int bd_openers ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   struct mutex bd_mutex ;
   struct list_head bd_inodes ;
   void *bd_claiming ;
   void *bd_holder ;
   int bd_holders ;
   bool bd_write_holder ;
   struct list_head bd_holder_disks ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct request_queue *bd_queue ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
};

#line 560 
struct posix_acl;

#line 561 
struct inode_operations;

#line 561  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
union __anonunion_241 {
   unsigned int const i_nlink ;
   unsigned int __i_nlink ;
};

#line 561  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
union __anonunion_242 {
   struct hlist_head i_dentry ;
   struct callback_head i_rcu ;
};

#line 561 
struct file_lock_context;

#line 561 
struct cdev;

#line 561  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
union __anonunion_243 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
   char *i_link ;
};

#line 561  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct inode {
   umode_t i_mode ;
   unsigned short i_opflags ;
   kuid_t i_uid ;
   kgid_t i_gid ;
   unsigned int i_flags ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   struct inode_operations const *i_op ;
   struct super_block *i_sb ;
   struct address_space *i_mapping ;
   void *i_security ;
   unsigned long i_ino ;
   union __anonunion_241 __anonCompField_inode_67 ;
   dev_t i_rdev ;
   loff_t i_size ;
   struct timespec i_atime ;
   struct timespec i_mtime ;
   struct timespec i_ctime ;
   spinlock_t i_lock ;
   unsigned short i_bytes ;
   unsigned int i_blkbits ;
   blkcnt_t i_blocks ;
   unsigned long i_state ;
   struct mutex i_mutex ;
   unsigned long dirtied_when ;
   unsigned long dirtied_time_when ;
   struct hlist_node i_hash ;
   struct list_head i_wb_list ;
   struct bdi_writeback *i_wb ;
   int i_wb_frn_winner ;
   u16 i_wb_frn_avg_time ;
   u16 i_wb_frn_history ;
   struct list_head i_lru ;
   struct list_head i_sb_list ;
   union __anonunion_242 __anonCompField_inode_68 ;
   u64 i_version ;
   atomic_t i_count ;
   atomic_t i_dio_count ;
   atomic_t i_writecount ;
   atomic_t i_readcount ;
   struct file_operations const *i_fop ;
   struct file_lock_context *i_flctx ;
   struct address_space i_data ;
   struct list_head i_devices ;
   union __anonunion_243 __anonCompField_inode_69 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct hlist_head i_fsnotify_marks ;
   void *i_private ;
};

#line 807  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   kuid_t uid ;
   kuid_t euid ;
   int signum ;
};

#line 815  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};

#line 838  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
union __anonunion_f_u_244 {
   struct llist_node fu_llist ;
   struct callback_head fu_rcuhead ;
};

#line 838  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct file {
   union __anonunion_f_u_244 f_u ;
   struct path f_path ;
   struct inode *f_inode ;
   struct file_operations const *f_op ;
   spinlock_t f_lock ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   struct mutex f_pos_lock ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred const *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct list_head f_tfile_llink ;
   struct address_space *f_mapping ;
};

#line 923  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
typedef void *fl_owner_t;

#line 924 
struct file_lock;

#line 925  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock *, struct file_lock *) ;
   void (*fl_release_private)(struct file_lock *) ;
};

#line 931  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct lock_manager_operations {
   int (*lm_compare_owner)(struct file_lock *, struct file_lock *) ;
   unsigned long (*lm_owner_key)(struct file_lock *) ;
   fl_owner_t (*lm_get_owner)(fl_owner_t ) ;
   void (*lm_put_owner)(fl_owner_t ) ;
   void (*lm_notify)(struct file_lock *) ;
   int (*lm_grant)(struct file_lock *, int ) ;
   bool (*lm_break)(struct file_lock *) ;
   int (*lm_change)(struct file_lock *, int , struct list_head *) ;
   void (*lm_setup)(struct file_lock *, void **) ;
};

#line 947 
struct net;

#line 952 
struct nlm_lockowner;

#line 953  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};

#line 14  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/nfs_fs_i.h"
struct nfs4_lock_state;

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};

#line 19 
struct fasync_struct;

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/nfs_fs_i.h"
struct __anonstruct_afs_246 {
   struct list_head link ;
   int state ;
};

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/nfs_fs_i.h"
union __anonunion_fl_u_245 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_246 afs ;
};

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/nfs_fs_i.h"
struct file_lock {
   struct file_lock *fl_next ;
   struct list_head fl_list ;
   struct hlist_node fl_link ;
   struct list_head fl_block ;
   fl_owner_t fl_owner ;
   unsigned int fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   int fl_link_cpu ;
   struct pid *fl_nspid ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   unsigned long fl_downgrade_time ;
   struct file_lock_operations const *fl_ops ;
   struct lock_manager_operations const *fl_lmops ;
   union __anonunion_fl_u_245 fl_u ;
};

#line 1005  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct file_lock_context {
   spinlock_t flc_lock ;
   struct list_head flc_flock ;
   struct list_head flc_posix ;
   struct list_head flc_lease ;
};

#line 1221  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct fasync_struct {
   spinlock_t fa_lock ;
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
   struct callback_head fa_rcu ;
};

#line 1256  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct sb_writers {
   struct percpu_counter counter[3U] ;
   wait_queue_head_t wait ;
   int frozen ;
   wait_queue_head_t wait_unfrozen ;
   struct lockdep_map lock_map[3U] ;
};

#line 1287 
struct super_operations;

#line 1287 
struct xattr_handler;

#line 1287 
struct mtd_info;

#line 1287  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations const *s_op ;
   struct dquot_operations const *dq_op ;
   struct quotactl_ops const *s_qcop ;
   struct export_operations const *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_iflags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   int s_count ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler const **s_xattr ;
   struct list_head s_inodes ;
   struct hlist_bl_head s_anon ;
   struct list_head s_mounts ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct hlist_node s_instances ;
   unsigned int s_quota_types ;
   struct quota_info s_dquot ;
   struct sb_writers s_writers ;
   char s_id[32U] ;
   u8 s_uuid[16U] ;
   void *s_fs_info ;
   unsigned int s_max_links ;
   fmode_t s_mode ;
   u32 s_time_gran ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   char *s_options ;
   struct dentry_operations const *s_d_op ;
   int cleancache_poolid ;
   struct shrinker s_shrink ;
   atomic_long_t s_remove_count ;
   int s_readonly_remount ;
   struct workqueue_struct *s_dio_done_wq ;
   struct hlist_head s_pins ;
   struct list_lru s_dentry_lru ;
   struct list_lru s_inode_lru ;
   struct callback_head rcu ;
   int s_stack_depth ;
};

#line 1526  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};

#line 1540 
struct dir_context;

#line 1565  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct dir_context {
   int (*actor)(struct dir_context *, char const *, int , loff_t , u64 , unsigned int ) ;
   loff_t pos ;
};

#line 1572  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file *, loff_t , int ) ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char const *, size_t , loff_t *) ;
   ssize_t (*read_iter)(struct kiocb *, struct iov_iter *) ;
   ssize_t (*write_iter)(struct kiocb *, struct iov_iter *) ;
   int (*iterate)(struct file *, struct dir_context *) ;
   unsigned int (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   int (*mremap)(struct file *, struct vm_area_struct *) ;
   int (*open)(struct inode *, struct file *) ;
   int (*flush)(struct file *, fl_owner_t ) ;
   int (*release)(struct inode *, struct file *) ;
   int (*fsync)(struct file *, loff_t , loff_t , int ) ;
   int (*aio_fsync)(struct kiocb *, int ) ;
   int (*fasync)(int , struct file *, int ) ;
   int (*lock)(struct file *, int , struct file_lock *) ;
   ssize_t (*sendpage)(struct file *, struct page *, int , size_t , loff_t *, int ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*check_flags)(int ) ;
   int (*flock)(struct file *, int , struct file_lock *) ;
   ssize_t (*splice_write)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ) ;
   ssize_t (*splice_read)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*setlease)(struct file *, long , struct file_lock **, void **) ;
   long (*fallocate)(struct file *, int , loff_t , loff_t ) ;
   void (*show_fdinfo)(struct seq_file *, struct file *) ;
};

#line 1633  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct inode_operations {
   struct dentry *(*lookup)(struct inode *, struct dentry *, unsigned int ) ;
   char const *(*follow_link)(struct dentry *, void **) ;
   int (*permission)(struct inode *, int ) ;
   struct posix_acl *(*get_acl)(struct inode *, int ) ;
   int (*readlink)(struct dentry *, char *, int ) ;
   void (*put_link)(struct inode *, void *) ;
   int (*create)(struct inode *, struct dentry *, umode_t , bool ) ;
   int (*link)(struct dentry *, struct inode *, struct dentry *) ;
   int (*unlink)(struct inode *, struct dentry *) ;
   int (*symlink)(struct inode *, struct dentry *, char const *) ;
   int (*mkdir)(struct inode *, struct dentry *, umode_t ) ;
   int (*rmdir)(struct inode *, struct dentry *) ;
   int (*mknod)(struct inode *, struct dentry *, umode_t , dev_t ) ;
   int (*rename)(struct inode *, struct dentry *, struct inode *, struct dentry *) ;
   int (*rename2)(struct inode *, struct dentry *, struct inode *, struct dentry *, unsigned int ) ;
   int (*setattr)(struct dentry *, struct iattr *) ;
   int (*getattr)(struct vfsmount *, struct dentry *, struct kstat *) ;
   int (*setxattr)(struct dentry *, char const *, void const *, size_t , int ) ;
   ssize_t (*getxattr)(struct dentry *, char const *, void *, size_t ) ;
   ssize_t (*listxattr)(struct dentry *, char *, size_t ) ;
   int (*removexattr)(struct dentry *, char const *) ;
   int (*fiemap)(struct inode *, struct fiemap_extent_info *, u64 , u64 ) ;
   int (*update_time)(struct inode *, struct timespec *, int ) ;
   int (*atomic_open)(struct inode *, struct dentry *, struct file *, unsigned int , umode_t , int *) ;
   int (*tmpfile)(struct inode *, struct dentry *, umode_t ) ;
   int (*set_acl)(struct inode *, struct posix_acl *, int ) ;
};

#line 1687  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block *) ;
   void (*destroy_inode)(struct inode *) ;
   void (*dirty_inode)(struct inode *, int ) ;
   int (*write_inode)(struct inode *, struct writeback_control *) ;
   int (*drop_inode)(struct inode *) ;
   void (*evict_inode)(struct inode *) ;
   void (*put_super)(struct super_block *) ;
   int (*sync_fs)(struct super_block *, int ) ;
   int (*freeze_super)(struct super_block *) ;
   int (*freeze_fs)(struct super_block *) ;
   int (*thaw_super)(struct super_block *) ;
   int (*unfreeze_fs)(struct super_block *) ;
   int (*statfs)(struct dentry *, struct kstatfs *) ;
   int (*remount_fs)(struct super_block *, int *, char *) ;
   void (*umount_begin)(struct super_block *) ;
   int (*show_options)(struct seq_file *, struct dentry *) ;
   int (*show_devname)(struct seq_file *, struct dentry *) ;
   int (*show_path)(struct seq_file *, struct dentry *) ;
   int (*show_stats)(struct seq_file *, struct dentry *) ;
   ssize_t (*quota_read)(struct super_block *, int , char *, size_t , loff_t ) ;
   ssize_t (*quota_write)(struct super_block *, int , char const *, size_t , loff_t ) ;
   struct dquot **(*get_dquots)(struct inode *) ;
   int (*bdev_try_to_free_page)(struct super_block *, struct page *, gfp_t ) ;
   long (*nr_cached_objects)(struct super_block *, struct shrink_control *) ;
   long (*free_cached_objects)(struct super_block *, struct shrink_control *) ;
};

#line 1926  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct file_system_type {
   char const *name ;
   int fs_flags ;
   struct dentry *(*mount)(struct file_system_type *, int , char const *, void *) ;
   void (*kill_sb)(struct super_block *) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct hlist_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key s_vfs_rename_key ;
   struct lock_class_key s_writers_key[3U] ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
};

#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/compat.h"
typedef s32 compat_time_t;

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/compat.h"
typedef s32 compat_long_t;

#line 44  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/compat.h"
typedef u32 compat_uptr_t;

#line 45  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/compat.h"
struct compat_timespec {
   compat_time_t tv_sec ;
   s32 tv_nsec ;
};

#line 276  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/compat.h"
struct compat_robust_list {
   compat_uptr_t next ;
};

#line 280  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/compat.h"
struct compat_robust_list_head {
   struct compat_robust_list list ;
   compat_long_t futex_offset ;
   compat_uptr_t list_op_pending ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/random.h"
enum ldv_25054 {
    SS_FREE = 0,
    SS_UNCONNECTED = 1,
    SS_CONNECTING = 2,
    SS_CONNECTED = 3,
    SS_DISCONNECTING = 4
};

#line 53  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/net.h"
typedef enum ldv_25054 socket_state;

#line 70  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/net.h"
struct socket_wq {
   wait_queue_head_t wait ;
   struct fasync_struct *fasync_list ;
   struct callback_head rcu ;
};

#line 93  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/net.h"
struct proto_ops;

#line 93  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/net.h"
struct socket {
   socket_state state ;
   short type ;
   unsigned long flags ;
   struct socket_wq *wq ;
   struct file *file ;
   struct sock *sk ;
   struct proto_ops const *ops ;
};

#line 119  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/net.h"
struct proto_ops {
   int family ;
   struct module *owner ;
   int (*release)(struct socket *) ;
   int (*bind)(struct socket *, struct sockaddr *, int ) ;
   int (*connect)(struct socket *, struct sockaddr *, int , int ) ;
   int (*socketpair)(struct socket *, struct socket *) ;
   int (*accept)(struct socket *, struct socket *, int ) ;
   int (*getname)(struct socket *, struct sockaddr *, int *, int ) ;
   unsigned int (*poll)(struct file *, struct socket *, struct poll_table_struct *) ;
   int (*ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*compat_ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*listen)(struct socket *, int ) ;
   int (*shutdown)(struct socket *, int ) ;
   int (*setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*compat_setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*sendmsg)(struct socket *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct socket *, struct msghdr *, size_t , int ) ;
   int (*mmap)(struct file *, struct socket *, struct vm_area_struct *) ;
   ssize_t (*sendpage)(struct socket *, struct page *, int , size_t , int ) ;
   ssize_t (*splice_read)(struct socket *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*set_peek_off)(struct sock *, int ) ;
};

#line 161  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/checksum_64.h"
struct in6_addr;

#line 140  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/checksum.h"
struct sk_buff;

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdev_features.h"
typedef u64 netdev_features_t;

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdev_features.h"
union __anonunion_in6_u_261 {
   __u8 u6_addr8[16U] ;
   __be16 u6_addr16[8U] ;
   __be32 u6_addr32[4U] ;
};

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdev_features.h"
struct in6_addr {
   union __anonunion_in6_u_261 in6_u ;
};

#line 46  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/in6.h"
struct ethhdr {
   unsigned char h_dest[6U] ;
   unsigned char h_source[6U] ;
   __be16 h_proto ;
};

#line 218  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/flow_dissector.h"
struct pipe_buf_operations;

#line 218  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/flow_dissector.h"
struct pipe_buffer {
   struct page *page ;
   unsigned int offset ;
   unsigned int len ;
   struct pipe_buf_operations const *ops ;
   unsigned int flags ;
   unsigned long private ;
};

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pipe_fs_i.h"
struct pipe_inode_info {
   struct mutex mutex ;
   wait_queue_head_t wait ;
   unsigned int nrbufs ;
   unsigned int curbuf ;
   unsigned int buffers ;
   unsigned int readers ;
   unsigned int writers ;
   unsigned int files ;
   unsigned int waiting_writers ;
   unsigned int r_counter ;
   unsigned int w_counter ;
   struct page *tmp_page ;
   struct fasync_struct *fasync_readers ;
   struct fasync_struct *fasync_writers ;
   struct pipe_buffer *bufs ;
};

#line 61  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pipe_fs_i.h"
struct pipe_buf_operations {
   int can_merge ;
   int (*confirm)(struct pipe_inode_info *, struct pipe_buffer *) ;
   void (*release)(struct pipe_inode_info *, struct pipe_buffer *) ;
   int (*steal)(struct pipe_inode_info *, struct pipe_buffer *) ;
   void (*get)(struct pipe_inode_info *, struct pipe_buffer *) ;
};

#line 86  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/splice.h"
struct napi_struct;

#line 87  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/splice.h"
struct nf_conntrack {
   atomic_t use ;
};

#line 166  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
enum ldv_25901 {
    BRNF_PROTO_UNCHANGED = 0,
    BRNF_PROTO_8021Q = 1,
    BRNF_PROTO_PPPOE = 2
};

#line 172  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_266 {
   struct net_device *physoutdev ;
   char neigh_header[8U] ;
};

#line 172  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_267 {
   __be32 ipv4_daddr ;
   struct in6_addr ipv6_daddr ;
};

#line 172  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct nf_bridge_info {
   atomic_t use ;
   enum ldv_25901 __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))) orig_proto : 8 ;
   bool pkt_otherhost ;
   __u16 frag_max_size ;
   unsigned int mask ;
   struct net_device *physindev ;
   union __anonunion_266 __anonCompField_nf_bridge_info_73 ;
   union __anonunion_267 __anonCompField_nf_bridge_info_74 ;
};

#line 189  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct sk_buff_head {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   __u32 qlen ;
   spinlock_t lock ;
};

#line 403  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
typedef unsigned int sk_buff_data_t;

#line 404  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct __anonstruct_270 {
   u32 stamp_us ;
   u32 stamp_jiffies ;
};

#line 404  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_269 {
   u64 v64 ;
   struct __anonstruct_270 __anonCompField___anonunion_269_75 ;
};

#line 404  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct skb_mstamp {
   union __anonunion_269 __anonCompField_skb_mstamp_76 ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_273 {
   ktime_t tstamp ;
   struct skb_mstamp skb_mstamp ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct __anonstruct_272 {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   union __anonunion_273 __anonCompField___anonstruct_272_77 ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_271 {
   struct __anonstruct_272 __anonCompField___anonunion_271_78 ;
   struct rb_node rbnode ;
};

#line 457 
struct sec_path;

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct __anonstruct_275 {
   __u16 csum_start ;
   __u16 csum_offset ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_274 {
   __wsum csum ;
   struct __anonstruct_275 __anonCompField___anonunion_274_80 ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_276 {
   unsigned int napi_id ;
   unsigned int sender_cpu ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_277 {
   __u32 mark ;
   __u32 reserved_tailroom ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_278 {
   __be16 inner_protocol ;
   __u8 inner_ipproto ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct sk_buff {
   union __anonunion_271 __anonCompField_sk_buff_79 ;
   struct sock *sk ;
   struct net_device *dev ;
   char cb[48U] ;
   unsigned long _skb_refdst ;
   void (*destructor)(struct sk_buff *) ;
   struct sec_path *sp ;
   struct nf_conntrack *nfct ;
   struct nf_bridge_info *nf_bridge ;
   unsigned int len ;
   unsigned int data_len ;
   __u16 mac_len ;
   __u16 hdr_len ;
   __u16 queue_mapping ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) cloned : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) nohdr : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) fclone : 2 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) peeked : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) head_frag : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) xmit_more : 1 ;
   __u32 headers_start[0U] ;
   __u8 __pkt_type_offset[0U] ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))) pkt_type : 3 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) pfmemalloc : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ignore_df : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))) nfctinfo : 3 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) nf_trace : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) ip_summed : 2 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ooo_okay : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) l4_hash : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) sw_hash : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) wifi_acked_valid : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) wifi_acked : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) no_fcs : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) encapsulation : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) encap_hdr_csum : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) csum_valid : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) csum_complete_sw : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) csum_level : 2 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) csum_bad : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) ndisc_nodetype : 2 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ipvs_property : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) inner_protocol_type : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) remcsum_offload : 1 ;
   __u16 tc_index ;
   __u16 tc_verd ;
   union __anonunion_274 __anonCompField_sk_buff_81 ;
   __u32 priority ;
   int skb_iif ;
   __u32 hash ;
   __be16 vlan_proto ;
   __u16 vlan_tci ;
   union __anonunion_276 __anonCompField_sk_buff_82 ;
   __u32 secmark ;
   union __anonunion_277 __anonCompField_sk_buff_83 ;
   union __anonunion_278 __anonCompField_sk_buff_84 ;
   __u16 inner_transport_header ;
   __u16 inner_network_header ;
   __u16 inner_mac_header ;
   __be16 protocol ;
   __u16 transport_header ;
   __u16 network_header ;
   __u16 mac_header ;
   __u32 headers_end[0U] ;
   sk_buff_data_t tail ;
   sk_buff_data_t end ;
   unsigned char *head ;
   unsigned char *data ;
   unsigned int truesize ;
   atomic_t users ;
};

#line 718 
struct dst_entry;

#line 767 
struct rtable;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/if_ether.h"
struct ethtool_cmd {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertising ;
   __u16 speed ;
   __u8 duplex ;
   __u8 port ;
   __u8 phy_address ;
   __u8 transceiver ;
   __u8 autoneg ;
   __u8 mdio_support ;
   __u32 maxtxpkt ;
   __u32 maxrxpkt ;
   __u16 speed_hi ;
   __u8 eth_tp_mdix ;
   __u8 eth_tp_mdix_ctrl ;
   __u32 lp_advertising ;
   __u32 reserved[2U] ;
};

#line 125  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_drvinfo {
   __u32 cmd ;
   char driver[32U] ;
   char version[32U] ;
   char fw_version[32U] ;
   char bus_info[32U] ;
   char erom_version[32U] ;
   char reserved2[12U] ;
   __u32 n_priv_flags ;
   __u32 n_stats ;
   __u32 testinfo_len ;
   __u32 eedump_len ;
   __u32 regdump_len ;
};

#line 189  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_wolinfo {
   __u32 cmd ;
   __u32 supported ;
   __u32 wolopts ;
   __u8 sopass[6U] ;
};

#line 233  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_tunable {
   __u32 cmd ;
   __u32 id ;
   __u32 type_id ;
   __u32 len ;
   void *data[0U] ;
};

#line 245  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_regs {
   __u32 cmd ;
   __u32 version ;
   __u32 len ;
   __u8 data[0U] ;
};

#line 267  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_eeprom {
   __u32 cmd ;
   __u32 magic ;
   __u32 offset ;
   __u32 len ;
   __u8 data[0U] ;
};

#line 293  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_eee {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertised ;
   __u32 lp_advertised ;
   __u32 eee_active ;
   __u32 eee_enabled ;
   __u32 tx_lpi_enabled ;
   __u32 tx_lpi_timer ;
   __u32 reserved[2U] ;
};

#line 322  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_modinfo {
   __u32 cmd ;
   __u32 type ;
   __u32 eeprom_len ;
   __u32 reserved[8U] ;
};

#line 339  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_coalesce {
   __u32 cmd ;
   __u32 rx_coalesce_usecs ;
   __u32 rx_max_coalesced_frames ;
   __u32 rx_coalesce_usecs_irq ;
   __u32 rx_max_coalesced_frames_irq ;
   __u32 tx_coalesce_usecs ;
   __u32 tx_max_coalesced_frames ;
   __u32 tx_coalesce_usecs_irq ;
   __u32 tx_max_coalesced_frames_irq ;
   __u32 stats_block_coalesce_usecs ;
   __u32 use_adaptive_rx_coalesce ;
   __u32 use_adaptive_tx_coalesce ;
   __u32 pkt_rate_low ;
   __u32 rx_coalesce_usecs_low ;
   __u32 rx_max_coalesced_frames_low ;
   __u32 tx_coalesce_usecs_low ;
   __u32 tx_max_coalesced_frames_low ;
   __u32 pkt_rate_high ;
   __u32 rx_coalesce_usecs_high ;
   __u32 rx_max_coalesced_frames_high ;
   __u32 tx_coalesce_usecs_high ;
   __u32 tx_max_coalesced_frames_high ;
   __u32 rate_sample_interval ;
};

#line 438  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_ringparam {
   __u32 cmd ;
   __u32 rx_max_pending ;
   __u32 rx_mini_max_pending ;
   __u32 rx_jumbo_max_pending ;
   __u32 tx_max_pending ;
   __u32 rx_pending ;
   __u32 rx_mini_pending ;
   __u32 rx_jumbo_pending ;
   __u32 tx_pending ;
};

#line 475  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_channels {
   __u32 cmd ;
   __u32 max_rx ;
   __u32 max_tx ;
   __u32 max_other ;
   __u32 max_combined ;
   __u32 rx_count ;
   __u32 tx_count ;
   __u32 other_count ;
   __u32 combined_count ;
};

#line 503  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_pauseparam {
   __u32 cmd ;
   __u32 autoneg ;
   __u32 rx_pause ;
   __u32 tx_pause ;
};

#line 605  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_test {
   __u32 cmd ;
   __u32 flags ;
   __u32 reserved ;
   __u32 len ;
   __u64 data[0U] ;
};

#line 637  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_stats {
   __u32 cmd ;
   __u32 n_stats ;
   __u64 data[0U] ;
};

#line 679  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_tcpip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tos ;
};

#line 712  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 spi ;
   __u8 tos ;
};

#line 728  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_usrip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 l4_4_bytes ;
   __u8 tos ;
   __u8 ip_ver ;
   __u8 proto ;
};

#line 748  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
union ethtool_flow_union {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   struct ethhdr ether_spec ;
   __u8 hdata[52U] ;
};

#line 759  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_flow_ext {
   __u8 padding[2U] ;
   unsigned char h_dest[6U] ;
   __be16 vlan_etype ;
   __be16 vlan_tci ;
   __be32 data[2U] ;
};

#line 778  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_rx_flow_spec {
   __u32 flow_type ;
   union ethtool_flow_union h_u ;
   struct ethtool_flow_ext h_ext ;
   union ethtool_flow_union m_u ;
   struct ethtool_flow_ext m_ext ;
   __u64 ring_cookie ;
   __u32 location ;
};

#line 828  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_rxnfc {
   __u32 cmd ;
   __u32 flow_type ;
   __u64 data ;
   struct ethtool_rx_flow_spec fs ;
   __u32 rule_cnt ;
   __u32 rule_locs[0U] ;
};

#line 999  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_flash {
   __u32 cmd ;
   __u32 region ;
   char data[128U] ;
};

#line 1007  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_dump {
   __u32 cmd ;
   __u32 version ;
   __u32 flag ;
   __u32 len ;
   __u8 data[0U] ;
};

#line 1083  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_ts_info {
   __u32 cmd ;
   __u32 so_timestamping ;
   __s32 phc_index ;
   __u32 tx_types ;
   __u32 tx_reserved[3U] ;
   __u32 rx_filters ;
   __u32 rx_reserved[3U] ;
};

#line 44  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ethtool.h"
enum ethtool_phys_id_state {
    ETHTOOL_ID_INACTIVE = 0,
    ETHTOOL_ID_ACTIVE = 1,
    ETHTOOL_ID_ON = 2,
    ETHTOOL_ID_OFF = 3
};

#line 99  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ethtool.h"
struct ethtool_ops {
   int (*get_settings)(struct net_device *, struct ethtool_cmd *) ;
   int (*set_settings)(struct net_device *, struct ethtool_cmd *) ;
   void (*get_drvinfo)(struct net_device *, struct ethtool_drvinfo *) ;
   int (*get_regs_len)(struct net_device *) ;
   void (*get_regs)(struct net_device *, struct ethtool_regs *, void *) ;
   void (*get_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   int (*set_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   u32 (*get_msglevel)(struct net_device *) ;
   void (*set_msglevel)(struct net_device *, u32 ) ;
   int (*nway_reset)(struct net_device *) ;
   u32 (*get_link)(struct net_device *) ;
   int (*get_eeprom_len)(struct net_device *) ;
   int (*get_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*set_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   int (*set_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   void (*get_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   int (*set_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   void (*get_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   int (*set_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   void (*self_test)(struct net_device *, struct ethtool_test *, u64 *) ;
   void (*get_strings)(struct net_device *, u32 , u8 *) ;
   int (*set_phys_id)(struct net_device *, enum ethtool_phys_id_state ) ;
   void (*get_ethtool_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
   int (*begin)(struct net_device *) ;
   void (*complete)(struct net_device *) ;
   u32 (*get_priv_flags)(struct net_device *) ;
   int (*set_priv_flags)(struct net_device *, u32 ) ;
   int (*get_sset_count)(struct net_device *, int ) ;
   int (*get_rxnfc)(struct net_device *, struct ethtool_rxnfc *, u32 *) ;
   int (*set_rxnfc)(struct net_device *, struct ethtool_rxnfc *) ;
   int (*flash_device)(struct net_device *, struct ethtool_flash *) ;
   int (*reset)(struct net_device *, u32 *) ;
   u32 (*get_rxfh_key_size)(struct net_device *) ;
   u32 (*get_rxfh_indir_size)(struct net_device *) ;
   int (*get_rxfh)(struct net_device *, u32 *, u8 *, u8 *) ;
   int (*set_rxfh)(struct net_device *, u32 const *, u8 const *, u8 const ) ;
   void (*get_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*set_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*get_dump_flag)(struct net_device *, struct ethtool_dump *) ;
   int (*get_dump_data)(struct net_device *, struct ethtool_dump *, void *) ;
   int (*set_dump)(struct net_device *, struct ethtool_dump *) ;
   int (*get_ts_info)(struct net_device *, struct ethtool_ts_info *) ;
   int (*get_module_info)(struct net_device *, struct ethtool_modinfo *) ;
   int (*get_module_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*set_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*get_tunable)(struct net_device *, struct ethtool_tunable const *, void *) ;
   int (*set_tunable)(struct net_device *, struct ethtool_tunable const *, void const *) ;
};

#line 235  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/flow.h"
struct prot_inuse;

#line 236  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/flow.h"
struct netns_core {
   struct ctl_table_header *sysctl_hdr ;
   int sysctl_somaxconn ;
   struct prot_inuse *inuse ;
};

#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct u64_stats_sync {
   
};

#line 146  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/u64_stats_sync.h"
struct ipstats_mib {
   u64 mibs[36U] ;
   struct u64_stats_sync syncp ;
};

#line 61  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct icmp_mib {
   unsigned long mibs[28U] ;
};

#line 67  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct icmpmsg_mib {
   atomic_long_t mibs[512U] ;
};

#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct icmpv6_mib {
   unsigned long mibs[6U] ;
};

#line 79  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct icmpv6_mib_device {
   atomic_long_t mibs[6U] ;
};

#line 83  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct icmpv6msg_mib {
   atomic_long_t mibs[512U] ;
};

#line 89  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct icmpv6msg_mib_device {
   atomic_long_t mibs[512U] ;
};

#line 93  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct tcp_mib {
   unsigned long mibs[16U] ;
};

#line 100  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct udp_mib {
   unsigned long mibs[9U] ;
};

#line 106  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct linux_mib {
   unsigned long mibs[115U] ;
};

#line 112  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct linux_xfrm_mib {
   unsigned long mibs[29U] ;
};

#line 118  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct netns_mib {
   struct tcp_mib *tcp_statistics ;
   struct ipstats_mib *ip_statistics ;
   struct linux_mib *net_statistics ;
   struct udp_mib *udp_statistics ;
   struct udp_mib *udplite_statistics ;
   struct icmp_mib *icmp_statistics ;
   struct icmpmsg_mib *icmpmsg_statistics ;
   struct proc_dir_entry *proc_net_devsnmp6 ;
   struct udp_mib *udp_stats_in6 ;
   struct udp_mib *udplite_stats_in6 ;
   struct ipstats_mib *ipv6_statistics ;
   struct icmpv6_mib *icmpv6_statistics ;
   struct icmpv6msg_mib *icmpv6msg_statistics ;
   struct linux_xfrm_mib *xfrm_statistics ;
};

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/mib.h"
struct netns_unix {
   int sysctl_max_dgram_qlen ;
   struct ctl_table_header *ctl ;
};

#line 12  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/unix.h"
struct netns_packet {
   struct mutex sklist_lock ;
   struct hlist_head sklist ;
};

#line 14  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/packet.h"
struct netns_frags {
   struct percpu_counter mem ;
   int timeout ;
   int high_thresh ;
   int low_thresh ;
};

#line 184  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/inet_frag.h"
struct ipv4_devconf;

#line 185 
struct fib_rules_ops;

#line 186 
struct fib_table;

#line 187  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/inet_frag.h"
struct local_ports {
   seqlock_t lock ;
   int range[2U] ;
   bool warned ;
};

#line 24  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ipv4.h"
struct ping_group_range {
   seqlock_t lock ;
   kgid_t range[2U] ;
};

#line 29 
struct inet_peer_base;

#line 29 
struct xt_table;

#line 29  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ipv4.h"
struct netns_ipv4 {
   struct ctl_table_header *forw_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *ipv4_hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *xfrm4_hdr ;
   struct ipv4_devconf *devconf_all ;
   struct ipv4_devconf *devconf_dflt ;
   struct fib_rules_ops *rules_ops ;
   bool fib_has_custom_rules ;
   struct fib_table *fib_local ;
   struct fib_table *fib_main ;
   struct fib_table *fib_default ;
   int fib_num_tclassid_users ;
   struct hlist_head *fib_table_hash ;
   bool fib_offload_disabled ;
   struct sock *fibnl ;
   struct sock **icmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct inet_peer_base *peers ;
   struct sock **tcp_sk ;
   struct netns_frags frags ;
   struct xt_table *iptable_filter ;
   struct xt_table *iptable_mangle ;
   struct xt_table *iptable_raw ;
   struct xt_table *arptable_filter ;
   struct xt_table *iptable_security ;
   struct xt_table *nat_table ;
   int sysctl_icmp_echo_ignore_all ;
   int sysctl_icmp_echo_ignore_broadcasts ;
   int sysctl_icmp_ignore_bogus_error_responses ;
   int sysctl_icmp_ratelimit ;
   int sysctl_icmp_ratemask ;
   int sysctl_icmp_errors_use_inbound_ifaddr ;
   struct local_ports ip_local_ports ;
   int sysctl_tcp_ecn ;
   int sysctl_tcp_ecn_fallback ;
   int sysctl_ip_no_pmtu_disc ;
   int sysctl_ip_fwd_use_pmtu ;
   int sysctl_ip_nonlocal_bind ;
   int sysctl_fwmark_reflect ;
   int sysctl_tcp_fwmark_accept ;
   int sysctl_tcp_mtu_probing ;
   int sysctl_tcp_base_mss ;
   int sysctl_tcp_probe_threshold ;
   u32 sysctl_tcp_probe_interval ;
   struct ping_group_range ping_group_range ;
   atomic_t dev_addr_genid ;
   unsigned long *sysctl_local_reserved_ports ;
   struct list_head mr_tables ;
   struct fib_rules_ops *mr_rules_ops ;
   atomic_t rt_genid ;
};

#line 113 
struct neighbour;

#line 113  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ipv4.h"
struct dst_ops {
   unsigned short family ;
   unsigned int gc_thresh ;
   int (*gc)(struct dst_ops *) ;
   struct dst_entry *(*check)(struct dst_entry *, __u32 ) ;
   unsigned int (*default_advmss)(struct dst_entry const *) ;
   unsigned int (*mtu)(struct dst_entry const *) ;
   u32 *(*cow_metrics)(struct dst_entry *, unsigned long ) ;
   void (*destroy)(struct dst_entry *) ;
   void (*ifdown)(struct dst_entry *, struct net_device *, int ) ;
   struct dst_entry *(*negative_advice)(struct dst_entry *) ;
   void (*link_failure)(struct sk_buff *) ;
   void (*update_pmtu)(struct dst_entry *, struct sock *, struct sk_buff *, u32 ) ;
   void (*redirect)(struct dst_entry *, struct sock *, struct sk_buff *) ;
   int (*local_out)(struct sk_buff *) ;
   struct neighbour *(*neigh_lookup)(struct dst_entry const *, struct sk_buff *, void const *) ;
   struct kmem_cache *kmem_cachep ;
   struct percpu_counter pcpuc_entries ;
};

#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dst_ops.h"
struct netns_sysctl_ipv6 {
   struct ctl_table_header *hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *icmp_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *xfrm6_hdr ;
   int bindv6only ;
   int flush_delay ;
   int ip6_rt_max_size ;
   int ip6_rt_gc_min_interval ;
   int ip6_rt_gc_timeout ;
   int ip6_rt_gc_interval ;
   int ip6_rt_gc_elasticity ;
   int ip6_rt_mtu_expires ;
   int ip6_rt_min_advmss ;
   int flowlabel_consistency ;
   int auto_flowlabels ;
   int icmpv6_time ;
   int anycast_src_echo_reply ;
   int fwmark_reflect ;
   int idgen_retries ;
   int idgen_delay ;
   int flowlabel_state_ranges ;
};

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ipv6.h"
struct ipv6_devconf;

#line 39 
struct rt6_info;

#line 39 
struct rt6_statistics;

#line 39 
struct fib6_table;

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ipv6.h"
struct netns_ipv6 {
   struct netns_sysctl_ipv6 sysctl ;
   struct ipv6_devconf *devconf_all ;
   struct ipv6_devconf *devconf_dflt ;
   struct inet_peer_base *peers ;
   struct netns_frags frags ;
   struct xt_table *ip6table_filter ;
   struct xt_table *ip6table_mangle ;
   struct xt_table *ip6table_raw ;
   struct xt_table *ip6table_security ;
   struct xt_table *ip6table_nat ;
   struct rt6_info *ip6_null_entry ;
   struct rt6_statistics *rt6_stats ;
   struct timer_list ip6_fib_timer ;
   struct hlist_head *fib_table_hash ;
   struct fib6_table *fib6_main_tbl ;
   struct dst_ops ip6_dst_ops ;
   unsigned int ip6_rt_gc_expire ;
   unsigned long ip6_rt_last_gc ;
   struct rt6_info *ip6_prohibit_entry ;
   struct rt6_info *ip6_blk_hole_entry ;
   struct fib6_table *fib6_local_tbl ;
   struct fib_rules_ops *fib6_rules_ops ;
   struct sock **icmp_sk ;
   struct sock *ndisc_sk ;
   struct sock *tcp_sk ;
   struct sock *igmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct list_head mr6_tables ;
   struct fib_rules_ops *mr6_rules_ops ;
   atomic_t dev_addr_genid ;
   atomic_t fib6_sernum ;
};

#line 85  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ipv6.h"
struct netns_nf_frag {
   struct netns_sysctl_ipv6 sysctl ;
   struct netns_frags frags ;
};

#line 91  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ipv6.h"
struct netns_sysctl_lowpan {
   struct ctl_table_header *frags_hdr ;
};

#line 14  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ieee802154_6lowpan.h"
struct netns_ieee802154_lowpan {
   struct netns_sysctl_lowpan sysctl ;
   struct netns_frags frags ;
};

#line 20 
struct sctp_mib;

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ieee802154_6lowpan.h"
struct netns_sctp {
   struct sctp_mib *sctp_statistics ;
   struct proc_dir_entry *proc_net_sctp ;
   struct ctl_table_header *sysctl_header ;
   struct sock *ctl_sock ;
   struct list_head local_addr_list ;
   struct list_head addr_waitq ;
   struct timer_list addr_wq_timer ;
   struct list_head auto_asconf_splist ;
   spinlock_t addr_wq_lock ;
   spinlock_t local_addr_lock ;
   unsigned int rto_initial ;
   unsigned int rto_min ;
   unsigned int rto_max ;
   int rto_alpha ;
   int rto_beta ;
   int max_burst ;
   int cookie_preserve_enable ;
   char *sctp_hmac_alg ;
   unsigned int valid_cookie_life ;
   unsigned int sack_timeout ;
   unsigned int hb_interval ;
   int max_retrans_association ;
   int max_retrans_path ;
   int max_retrans_init ;
   int pf_retrans ;
   int sndbuf_policy ;
   int rcvbuf_policy ;
   int default_auto_asconf ;
   int addip_enable ;
   int addip_noauth ;
   int prsctp_enable ;
   int auth_enable ;
   int scope_policy ;
   int rwnd_upd_shift ;
   unsigned long max_autoclose ;
};

#line 134  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/sctp.h"
struct netns_dccp {
   struct sock *v4_ctl_sk ;
   struct sock *v6_ctl_sk ;
};

#line 79  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/netfilter.h"
struct nf_logger;

#line 80  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/netfilter.h"
struct netns_nf {
   struct proc_dir_entry *proc_netfilter ;
   struct nf_logger const *nf_loggers[13U] ;
   struct ctl_table_header *nf_log_dir_header ;
};

#line 17  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/netfilter.h"
struct ebt_table;

#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/netfilter.h"
struct netns_xt {
   struct list_head tables[13U] ;
   bool notrack_deprecated_warning ;
   bool clusterip_deprecated_warning ;
   struct ebt_table *broute_table ;
   struct ebt_table *frame_filter ;
   struct ebt_table *frame_nat ;
};

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/x_tables.h"
struct hlist_nulls_node;

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/x_tables.h"
struct hlist_nulls_head {
   struct hlist_nulls_node *first ;
};

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/x_tables.h"
struct hlist_nulls_node {
   struct hlist_nulls_node *next ;
   struct hlist_nulls_node **pprev ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netfilter/nf_conntrack_tcp.h"
struct nf_proto_net {
   struct ctl_table_header *ctl_table_header ;
   struct ctl_table *ctl_table ;
   struct ctl_table_header *ctl_compat_header ;
   struct ctl_table *ctl_compat_table ;
   unsigned int users ;
};

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct nf_generic_net {
   struct nf_proto_net pn ;
   unsigned int timeout ;
};

#line 30  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct nf_tcp_net {
   struct nf_proto_net pn ;
   unsigned int timeouts[14U] ;
   unsigned int tcp_loose ;
   unsigned int tcp_be_liberal ;
   unsigned int tcp_max_retrans ;
};

#line 44  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct nf_udp_net {
   struct nf_proto_net pn ;
   unsigned int timeouts[2U] ;
};

#line 49  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct nf_icmp_net {
   struct nf_proto_net pn ;
   unsigned int timeout ;
};

#line 54  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct nf_ip_net {
   struct nf_generic_net generic ;
   struct nf_tcp_net tcp ;
   struct nf_udp_net udp ;
   struct nf_icmp_net icmp ;
   struct nf_icmp_net icmpv6 ;
   struct ctl_table_header *ctl_table_header ;
   struct ctl_table *ctl_table ;
};

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct ct_pcpu {
   spinlock_t lock ;
   struct hlist_nulls_head unconfirmed ;
   struct hlist_nulls_head dying ;
};

#line 72 
struct ip_conntrack_stat;

#line 72 
struct nf_ct_event_notifier;

#line 72 
struct nf_exp_event_notifier;

#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct netns_ct {
   atomic_t count ;
   unsigned int expect_count ;
   struct delayed_work ecache_dwork ;
   bool ecache_dwork_pending ;
   struct ctl_table_header *sysctl_header ;
   struct ctl_table_header *acct_sysctl_header ;
   struct ctl_table_header *tstamp_sysctl_header ;
   struct ctl_table_header *event_sysctl_header ;
   struct ctl_table_header *helper_sysctl_header ;
   char *slabname ;
   unsigned int sysctl_log_invalid ;
   int sysctl_events ;
   int sysctl_acct ;
   int sysctl_auto_assign_helper ;
   bool auto_assign_helper_warned ;
   int sysctl_tstamp ;
   int sysctl_checksum ;
   unsigned int htable_size ;
   seqcount_t generation ;
   struct kmem_cache *nf_conntrack_cachep ;
   struct hlist_nulls_head *hash ;
   struct hlist_head *expect_hash ;
   struct ct_pcpu *pcpu_lists ;
   struct ip_conntrack_stat *stat ;
   struct nf_ct_event_notifier *nf_conntrack_event_cb ;
   struct nf_exp_event_notifier *nf_expect_event_cb ;
   struct nf_ip_net nf_ct_proto ;
   unsigned int labels_used ;
   u8 label_words ;
   struct hlist_head *nat_bysource ;
   unsigned int nat_htable_size ;
};

#line 114 
struct nft_af_info;

#line 115  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct netns_nftables {
   struct list_head af_info ;
   struct list_head commit_list ;
   struct nft_af_info *ipv4 ;
   struct nft_af_info *ipv6 ;
   struct nft_af_info *inet ;
   struct nft_af_info *arp ;
   struct nft_af_info *bridge ;
   struct nft_af_info *netdev ;
   unsigned int base_seq ;
   u8 gencursor ;
};

#line 465  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/interrupt.h"
struct tasklet_struct {
   struct tasklet_struct *next ;
   unsigned long state ;
   atomic_t count ;
   void (*func)(unsigned long ) ;
   unsigned long data ;
};

#line 672  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/interrupt.h"
struct flow_cache_percpu {
   struct hlist_head *hash_table ;
   int hash_count ;
   u32 hash_rnd ;
   int hash_rnd_recalc ;
   struct tasklet_struct flush_tasklet ;
};

#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/flowcache.h"
struct flow_cache {
   u32 hash_shift ;
   struct flow_cache_percpu *percpu ;
   struct notifier_block hotcpu_notifier ;
   int low_watermark ;
   int high_watermark ;
   struct timer_list rnd_timer ;
};

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/flowcache.h"
struct xfrm_policy_hash {
   struct hlist_head *table ;
   unsigned int hmask ;
   u8 dbits4 ;
   u8 sbits4 ;
   u8 dbits6 ;
   u8 sbits6 ;
};

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/xfrm.h"
struct xfrm_policy_hthresh {
   struct work_struct work ;
   seqlock_t lock ;
   u8 lbits4 ;
   u8 rbits4 ;
   u8 lbits6 ;
   u8 rbits6 ;
};

#line 30  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/xfrm.h"
struct netns_xfrm {
   struct list_head state_all ;
   struct hlist_head *state_bydst ;
   struct hlist_head *state_bysrc ;
   struct hlist_head *state_byspi ;
   unsigned int state_hmask ;
   unsigned int state_num ;
   struct work_struct state_hash_work ;
   struct hlist_head state_gc_list ;
   struct work_struct state_gc_work ;
   struct list_head policy_all ;
   struct hlist_head *policy_byidx ;
   unsigned int policy_idx_hmask ;
   struct hlist_head policy_inexact[3U] ;
   struct xfrm_policy_hash policy_bydst[3U] ;
   unsigned int policy_count[6U] ;
   struct work_struct policy_hash_work ;
   struct xfrm_policy_hthresh policy_hthresh ;
   struct sock *nlsk ;
   struct sock *nlsk_stash ;
   u32 sysctl_aevent_etime ;
   u32 sysctl_aevent_rseqth ;
   int sysctl_larval_drop ;
   u32 sysctl_acq_expires ;
   struct ctl_table_header *sysctl_hdr ;
   struct dst_ops xfrm4_dst_ops ;
   struct dst_ops xfrm6_dst_ops ;
   spinlock_t xfrm_state_lock ;
   rwlock_t xfrm_policy_lock ;
   struct mutex xfrm_cfg_mutex ;
   struct flow_cache flow_cache_global ;
   atomic_t flow_cache_genid ;
   struct list_head flow_cache_gc_list ;
   spinlock_t flow_cache_gc_lock ;
   struct work_struct flow_cache_gc_work ;
   struct work_struct flow_cache_flush_work ;
   struct mutex flow_flush_sem ;
};

#line 88 
struct mpls_route;

#line 89  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/xfrm.h"
struct netns_mpls {
   size_t platform_labels ;
   struct mpls_route **platform_label ;
   struct ctl_table_header *ctl ;
};

#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/mpls.h"
struct proc_ns_operations;

#line 17  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/mpls.h"
struct ns_common {
   atomic_long_t stashed ;
   struct proc_ns_operations const *ops ;
   unsigned int inum ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ns_common.h"
struct net_generic;

#line 12 
struct netns_ipvs;

#line 13  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ns_common.h"
struct net {
   atomic_t passive ;
   atomic_t count ;
   spinlock_t rules_mod_lock ;
   atomic64_t cookie_gen ;
   struct list_head list ;
   struct list_head cleanup_list ;
   struct list_head exit_list ;
   struct user_namespace *user_ns ;
   spinlock_t nsid_lock ;
   struct idr netns_ids ;
   struct ns_common ns ;
   struct proc_dir_entry *proc_net ;
   struct proc_dir_entry *proc_net_stat ;
   struct ctl_table_set sysctls ;
   struct sock *rtnl ;
   struct sock *genl_sock ;
   struct list_head dev_base_head ;
   struct hlist_head *dev_name_head ;
   struct hlist_head *dev_index_head ;
   unsigned int dev_base_seq ;
   int ifindex ;
   unsigned int dev_unreg_count ;
   struct list_head rules_ops ;
   struct net_device *loopback_dev ;
   struct netns_core core ;
   struct netns_mib mib ;
   struct netns_packet packet ;
   struct netns_unix unx ;
   struct netns_ipv4 ipv4 ;
   struct netns_ipv6 ipv6 ;
   struct netns_ieee802154_lowpan ieee802154_lowpan ;
   struct netns_sctp sctp ;
   struct netns_dccp dccp ;
   struct netns_nf nf ;
   struct netns_xt xt ;
   struct netns_ct ct ;
   struct netns_nftables nft ;
   struct netns_nf_frag nf_frag ;
   struct sock *nfnl ;
   struct sock *nfnl_stash ;
   struct sk_buff_head wext_nlevents ;
   struct net_generic *gen ;
   struct netns_xfrm xfrm ;
   struct netns_ipvs *ipvs ;
   struct netns_mpls mpls ;
   struct sock *diag_nlsk ;
   atomic_t fnhe_genid ;
};

#line 241  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/net_namespace.h"
struct __anonstruct_possible_net_t_295 {
   struct net *net ;
};

#line 241  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/net_namespace.h"
typedef struct __anonstruct_possible_net_t_295 possible_net_t;

#line 376 
enum fwnode_type {
    FWNODE_INVALID = 0,
    FWNODE_OF = 1,
    FWNODE_ACPI = 2,
    FWNODE_PDATA = 3
};

#line 383  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/net_namespace.h"
struct fwnode_handle {
   enum fwnode_type type ;
   struct fwnode_handle *secondary ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/of.h"
typedef u32 phandle;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/of.h"
struct property {
   char *name ;
   int length ;
   void *value ;
   struct property *next ;
   unsigned long _flags ;
   unsigned int unique_id ;
   struct bin_attribute attr ;
};

#line 44  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/of.h"
struct device_node {
   char const *name ;
   char const *type ;
   phandle phandle ;
   char const *full_name ;
   struct fwnode_handle fwnode ;
   struct property *properties ;
   struct property *deadprops ;
   struct device_node *parent ;
   struct device_node *child ;
   struct device_node *sibling ;
   struct kobject kobj ;
   unsigned long _flags ;
   void *data ;
};

#line 338  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mii.h"
enum ldv_28662 {
    PHY_INTERFACE_MODE_NA = 0,
    PHY_INTERFACE_MODE_MII = 1,
    PHY_INTERFACE_MODE_GMII = 2,
    PHY_INTERFACE_MODE_SGMII = 3,
    PHY_INTERFACE_MODE_TBI = 4,
    PHY_INTERFACE_MODE_REVMII = 5,
    PHY_INTERFACE_MODE_RMII = 6,
    PHY_INTERFACE_MODE_RGMII = 7,
    PHY_INTERFACE_MODE_RGMII_ID = 8,
    PHY_INTERFACE_MODE_RGMII_RXID = 9,
    PHY_INTERFACE_MODE_RGMII_TXID = 10,
    PHY_INTERFACE_MODE_RTBI = 11,
    PHY_INTERFACE_MODE_SMII = 12,
    PHY_INTERFACE_MODE_XGMII = 13,
    PHY_INTERFACE_MODE_MOCA = 14,
    PHY_INTERFACE_MODE_QSGMII = 15,
    PHY_INTERFACE_MODE_MAX = 16
};

#line 80  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy.h"
typedef enum ldv_28662 phy_interface_t;

#line 126 
enum ldv_28715 {
    MDIOBUS_ALLOCATED = 1,
    MDIOBUS_REGISTERED = 2,
    MDIOBUS_UNREGISTERED = 3,
    MDIOBUS_RELEASED = 4
};

#line 133 
struct phy_device;

#line 133  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy.h"
struct mii_bus {
   char const *name ;
   char id[17U] ;
   void *priv ;
   int (*read)(struct mii_bus *, int , int ) ;
   int (*write)(struct mii_bus *, int , int , u16 ) ;
   int (*reset)(struct mii_bus *) ;
   struct mutex mdio_lock ;
   struct device *parent ;
   enum ldv_28715 state ;
   struct device dev ;
   struct phy_device *phy_map[32U] ;
   u32 phy_mask ;
   u32 phy_ignore_ta_mask ;
   int *irq ;
};

#line 214 
enum phy_state {
    PHY_DOWN = 0,
    PHY_STARTING = 1,
    PHY_READY = 2,
    PHY_PENDING = 3,
    PHY_UP = 4,
    PHY_AN = 5,
    PHY_RUNNING = 6,
    PHY_NOLINK = 7,
    PHY_FORCING = 8,
    PHY_CHANGELINK = 9,
    PHY_HALTED = 10,
    PHY_RESUMING = 11
};

#line 229  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy.h"
struct phy_c45_device_ids {
   u32 devices_in_package ;
   u32 device_ids[8U] ;
};

#line 323 
struct phy_driver;

#line 323  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy.h"
struct phy_device {
   struct phy_driver *drv ;
   struct mii_bus *bus ;
   struct device dev ;
   u32 phy_id ;
   struct phy_c45_device_ids c45_ids ;
   bool is_c45 ;
   bool is_internal ;
   bool has_fixups ;
   bool suspended ;
   enum phy_state state ;
   u32 dev_flags ;
   phy_interface_t interface ;
   int addr ;
   int speed ;
   int duplex ;
   int pause ;
   int asym_pause ;
   int link ;
   u32 interrupts ;
   u32 supported ;
   u32 advertising ;
   u32 lp_advertising ;
   int autoneg ;
   int link_timeout ;
   int irq ;
   void *priv ;
   struct work_struct phy_queue ;
   struct delayed_work state_queue ;
   atomic_t irq_disable ;
   struct mutex lock ;
   struct net_device *attached_dev ;
   void (*adjust_link)(struct net_device *) ;
};

#line 429  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy.h"
struct phy_driver {
   u32 phy_id ;
   char *name ;
   unsigned int phy_id_mask ;
   u32 features ;
   u32 flags ;
   void const *driver_data ;
   int (*soft_reset)(struct phy_device *) ;
   int (*config_init)(struct phy_device *) ;
   int (*probe)(struct phy_device *) ;
   int (*suspend)(struct phy_device *) ;
   int (*resume)(struct phy_device *) ;
   int (*config_aneg)(struct phy_device *) ;
   int (*aneg_done)(struct phy_device *) ;
   int (*read_status)(struct phy_device *) ;
   int (*ack_interrupt)(struct phy_device *) ;
   int (*config_intr)(struct phy_device *) ;
   int (*did_interrupt)(struct phy_device *) ;
   void (*remove)(struct phy_device *) ;
   int (*match_phy_device)(struct phy_device *) ;
   int (*ts_info)(struct phy_device *, struct ethtool_ts_info *) ;
   int (*hwtstamp)(struct phy_device *, struct ifreq *) ;
   bool (*rxtstamp)(struct phy_device *, struct sk_buff *, int ) ;
   void (*txtstamp)(struct phy_device *, struct sk_buff *, int ) ;
   int (*set_wol)(struct phy_device *, struct ethtool_wolinfo *) ;
   void (*get_wol)(struct phy_device *, struct ethtool_wolinfo *) ;
   void (*link_change_notify)(struct phy_device *) ;
   int (*read_mmd_indirect)(struct phy_device *, int , int , int ) ;
   void (*write_mmd_indirect)(struct phy_device *, int , int , int , u32 ) ;
   int (*module_info)(struct phy_device *, struct ethtool_modinfo *) ;
   int (*module_eeprom)(struct phy_device *, struct ethtool_eeprom *, u8 *) ;
   struct device_driver driver ;
};

#line 803  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy.h"
struct fixed_phy_status {
   int link ;
   int speed ;
   int duplex ;
   int pause ;
   int asym_pause ;
};

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy_fixed.h"
enum dsa_tag_protocol {
    DSA_TAG_PROTO_NONE = 0,
    DSA_TAG_PROTO_DSA = 1,
    DSA_TAG_PROTO_TRAILER = 2,
    DSA_TAG_PROTO_EDSA = 3,
    DSA_TAG_PROTO_BRCM = 4
};

#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy_fixed.h"
struct dsa_chip_data {
   struct device *host_dev ;
   int sw_addr ;
   int eeprom_len ;
   struct device_node *of_node ;
   char *port_names[12U] ;
   struct device_node *port_dn[12U] ;
   s8 *rtable ;
};

#line 68  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dsa.h"
struct dsa_platform_data {
   struct device *netdev ;
   struct net_device *of_netdev ;
   int nr_chips ;
   struct dsa_chip_data *chip ;
};

#line 84 
struct packet_type;

#line 85 
struct dsa_switch;

#line 85  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dsa.h"
struct dsa_switch_tree {
   struct dsa_platform_data *pd ;
   struct net_device *master_netdev ;
   int (*rcv)(struct sk_buff *, struct net_device *, struct packet_type *, struct net_device *) ;
   enum dsa_tag_protocol tag_protocol ;
   s8 cpu_switch ;
   s8 cpu_port ;
   int link_poll_needed ;
   struct work_struct link_poll_work ;
   struct timer_list link_poll_timer ;
   struct dsa_switch *ds[4U] ;
};

#line 123 
struct dsa_switch_driver;

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dsa.h"
struct dsa_switch {
   struct dsa_switch_tree *dst ;
   int index ;
   enum dsa_tag_protocol tag_protocol ;
   struct dsa_chip_data *pd ;
   struct dsa_switch_driver *drv ;
   struct device *master_dev ;
   char hwmon_name[24U] ;
   struct device *hwmon_dev ;
   u32 dsa_port_mask ;
   u32 phys_port_mask ;
   u32 phys_mii_mask ;
   struct mii_bus *slave_mii_bus ;
   struct net_device *ports[12U] ;
};

#line 194  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dsa.h"
struct dsa_switch_driver {
   struct list_head list ;
   enum dsa_tag_protocol tag_protocol ;
   int priv_size ;
   char *(*probe)(struct device *, int ) ;
   int (*setup)(struct dsa_switch *) ;
   int (*set_addr)(struct dsa_switch *, u8 *) ;
   u32 (*get_phy_flags)(struct dsa_switch *, int ) ;
   int (*phy_read)(struct dsa_switch *, int , int ) ;
   int (*phy_write)(struct dsa_switch *, int , int , u16 ) ;
   void (*poll_link)(struct dsa_switch *) ;
   void (*adjust_link)(struct dsa_switch *, int , struct phy_device *) ;
   void (*fixed_link_update)(struct dsa_switch *, int , struct fixed_phy_status *) ;
   void (*get_strings)(struct dsa_switch *, int , uint8_t *) ;
   void (*get_ethtool_stats)(struct dsa_switch *, int , uint64_t *) ;
   int (*get_sset_count)(struct dsa_switch *) ;
   void (*get_wol)(struct dsa_switch *, int , struct ethtool_wolinfo *) ;
   int (*set_wol)(struct dsa_switch *, int , struct ethtool_wolinfo *) ;
   int (*suspend)(struct dsa_switch *) ;
   int (*resume)(struct dsa_switch *) ;
   int (*port_enable)(struct dsa_switch *, int , struct phy_device *) ;
   void (*port_disable)(struct dsa_switch *, int , struct phy_device *) ;
   int (*set_eee)(struct dsa_switch *, int , struct phy_device *, struct ethtool_eee *) ;
   int (*get_eee)(struct dsa_switch *, int , struct ethtool_eee *) ;
   int (*get_temp)(struct dsa_switch *, int *) ;
   int (*get_temp_limit)(struct dsa_switch *, int *) ;
   int (*set_temp_limit)(struct dsa_switch *, int ) ;
   int (*get_temp_alarm)(struct dsa_switch *, bool *) ;
   int (*get_eeprom_len)(struct dsa_switch *) ;
   int (*get_eeprom)(struct dsa_switch *, struct ethtool_eeprom *, u8 *) ;
   int (*set_eeprom)(struct dsa_switch *, struct ethtool_eeprom *, u8 *) ;
   int (*get_regs_len)(struct dsa_switch *, int ) ;
   void (*get_regs)(struct dsa_switch *, int , struct ethtool_regs *, void *) ;
   int (*port_join_bridge)(struct dsa_switch *, int , u32 ) ;
   int (*port_leave_bridge)(struct dsa_switch *, int , u32 ) ;
   int (*port_stp_update)(struct dsa_switch *, int , u8 ) ;
   int (*fdb_add)(struct dsa_switch *, int , unsigned char const *, u16 ) ;
   int (*fdb_del)(struct dsa_switch *, int , unsigned char const *, u16 ) ;
   int (*fdb_getnext)(struct dsa_switch *, int , unsigned char *, bool *) ;
};

#line 320  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dsa.h"
struct ieee_ets {
   __u8 willing ;
   __u8 ets_cap ;
   __u8 cbs ;
   __u8 tc_tx_bw[8U] ;
   __u8 tc_rx_bw[8U] ;
   __u8 tc_tsa[8U] ;
   __u8 prio_tc[8U] ;
   __u8 tc_reco_bw[8U] ;
   __u8 tc_reco_tsa[8U] ;
   __u8 reco_prio_tc[8U] ;
};

#line 69  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct ieee_maxrate {
   __u64 tc_maxrate[8U] ;
};

#line 87  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct ieee_qcn {
   __u8 rpg_enable[8U] ;
   __u32 rppp_max_rps[8U] ;
   __u32 rpg_time_reset[8U] ;
   __u32 rpg_byte_reset[8U] ;
   __u32 rpg_threshold[8U] ;
   __u32 rpg_max_rate[8U] ;
   __u32 rpg_ai_rate[8U] ;
   __u32 rpg_hai_rate[8U] ;
   __u32 rpg_gd[8U] ;
   __u32 rpg_min_dec_fac[8U] ;
   __u32 rpg_min_rate[8U] ;
   __u32 cndd_state_machine[8U] ;
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct ieee_qcn_stats {
   __u64 rppp_rp_centiseconds[8U] ;
   __u32 rppp_created_rps[8U] ;
};

#line 144  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct ieee_pfc {
   __u8 pfc_cap ;
   __u8 pfc_en ;
   __u8 mbc ;
   __u16 delay ;
   __u64 requests[8U] ;
   __u64 indications[8U] ;
};

#line 164  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct cee_pg {
   __u8 willing ;
   __u8 error ;
   __u8 pg_en ;
   __u8 tcs_supported ;
   __u8 pg_bw[8U] ;
   __u8 prio_pg[8U] ;
};

#line 187  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct cee_pfc {
   __u8 willing ;
   __u8 error ;
   __u8 pfc_en ;
   __u8 tcs_supported ;
};

#line 202  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct dcb_app {
   __u8 selector ;
   __u8 priority ;
   __u16 protocol ;
};

#line 236  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct dcb_peer_app_info {
   __u8 willing ;
   __u8 error ;
};

#line 40  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dcbnl.h"
struct dcbnl_rtnl_ops {
   int (*ieee_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_setets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_getmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_setmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_getqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_setqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_getqcnstats)(struct net_device *, struct ieee_qcn_stats *) ;
   int (*ieee_getpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_setpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_getapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_setapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_delapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_peer_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_peer_getpfc)(struct net_device *, struct ieee_pfc *) ;
   u8 (*getstate)(struct net_device *) ;
   u8 (*setstate)(struct net_device *, u8 ) ;
   void (*getpermhwaddr)(struct net_device *, u8 *) ;
   void (*setpgtccfgtx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgtx)(struct net_device *, int , u8 ) ;
   void (*setpgtccfgrx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgrx)(struct net_device *, int , u8 ) ;
   void (*getpgtccfgtx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgtx)(struct net_device *, int , u8 *) ;
   void (*getpgtccfgrx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgrx)(struct net_device *, int , u8 *) ;
   void (*setpfccfg)(struct net_device *, int , u8 ) ;
   void (*getpfccfg)(struct net_device *, int , u8 *) ;
   u8 (*setall)(struct net_device *) ;
   u8 (*getcap)(struct net_device *, int , u8 *) ;
   int (*getnumtcs)(struct net_device *, int , u8 *) ;
   int (*setnumtcs)(struct net_device *, int , u8 ) ;
   u8 (*getpfcstate)(struct net_device *) ;
   void (*setpfcstate)(struct net_device *, u8 ) ;
   void (*getbcncfg)(struct net_device *, int , u32 *) ;
   void (*setbcncfg)(struct net_device *, int , u32 ) ;
   void (*getbcnrp)(struct net_device *, int , u8 *) ;
   void (*setbcnrp)(struct net_device *, int , u8 ) ;
   int (*setapp)(struct net_device *, u8 , u16 , u8 ) ;
   int (*getapp)(struct net_device *, u8 , u16 ) ;
   u8 (*getfeatcfg)(struct net_device *, int , u8 *) ;
   u8 (*setfeatcfg)(struct net_device *, int , u8 ) ;
   u8 (*getdcbx)(struct net_device *) ;
   u8 (*setdcbx)(struct net_device *, u8 ) ;
   int (*peer_getappinfo)(struct net_device *, struct dcb_peer_app_info *, u16 *) ;
   int (*peer_getapptable)(struct net_device *, struct dcb_app *) ;
   int (*cee_peer_getpg)(struct net_device *, struct cee_pg *) ;
   int (*cee_peer_getpfc)(struct net_device *, struct cee_pfc *) ;
};

#line 105  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dcbnl.h"
struct taskstats {
   __u16 version ;
   __u32 ac_exitcode ;
   __u8 ac_flag ;
   __u8 ac_nice ;
   __u64 cpu_count ;
   __u64 cpu_delay_total ;
   __u64 blkio_count ;
   __u64 blkio_delay_total ;
   __u64 swapin_count ;
   __u64 swapin_delay_total ;
   __u64 cpu_run_real_total ;
   __u64 cpu_run_virtual_total ;
   char ac_comm[32U] ;
   __u8 ac_sched ;
   __u8 ac_pad[3U] ;
   __u32 ac_uid ;
   __u32 ac_gid ;
   __u32 ac_pid ;
   __u32 ac_ppid ;
   __u32 ac_btime ;
   __u64 ac_etime ;
   __u64 ac_utime ;
   __u64 ac_stime ;
   __u64 ac_minflt ;
   __u64 ac_majflt ;
   __u64 coremem ;
   __u64 virtmem ;
   __u64 hiwater_rss ;
   __u64 hiwater_vm ;
   __u64 read_char ;
   __u64 write_char ;
   __u64 read_syscalls ;
   __u64 write_syscalls ;
   __u64 read_bytes ;
   __u64 write_bytes ;
   __u64 cancelled_write_bytes ;
   __u64 nvcsw ;
   __u64 nivcsw ;
   __u64 ac_utimescaled ;
   __u64 ac_stimescaled ;
   __u64 cpu_scaled_run_real_total ;
   __u64 freepages_count ;
   __u64 freepages_delay_total ;
};

#line 515  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cgroup.h"
struct netprio_map {
   struct callback_head rcu ;
   u32 priomap_len ;
   u32 priomap[] ;
};

#line 97  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/security.h"
struct xfrm_policy;

#line 98 
struct xfrm_state;

#line 114 
struct request_sock;

#line 1628 
struct mnt_namespace;

#line 1629 
struct ipc_namespace;

#line 1630  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/security.h"
struct nsproxy {
   atomic_t count ;
   struct uts_namespace *uts_ns ;
   struct ipc_namespace *ipc_ns ;
   struct mnt_namespace *mnt_ns ;
   struct pid_namespace *pid_ns_for_children ;
   struct net *net_ns ;
};

#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/netlink.h"
struct nlmsghdr {
   __u32 nlmsg_len ;
   __u16 nlmsg_type ;
   __u16 nlmsg_flags ;
   __u32 nlmsg_seq ;
   __u32 nlmsg_pid ;
};

#line 147  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/netlink.h"
struct nlattr {
   __u16 nla_len ;
   __u16 nla_type ;
};

#line 106  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netlink.h"
struct netlink_callback {
   struct sk_buff *skb ;
   struct nlmsghdr const *nlh ;
   int (*dump)(struct sk_buff *, struct netlink_callback *) ;
   int (*done)(struct netlink_callback *) ;
   void *data ;
   struct module *module ;
   u16 family ;
   u16 min_dump_alloc ;
   unsigned int prev_seq ;
   unsigned int seq ;
   long args[6U] ;
};

#line 182  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netlink.h"
struct ndmsg {
   __u8 ndm_family ;
   __u8 ndm_pad1 ;
   __u16 ndm_pad2 ;
   __s32 ndm_ifindex ;
   __u16 ndm_state ;
   __u8 ndm_flags ;
   __u8 ndm_type ;
};

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if_link.h"
struct rtnl_link_stats64 {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 rx_errors ;
   __u64 tx_errors ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
   __u64 multicast ;
   __u64 collisions ;
   __u64 rx_length_errors ;
   __u64 rx_over_errors ;
   __u64 rx_crc_errors ;
   __u64 rx_frame_errors ;
   __u64 rx_fifo_errors ;
   __u64 rx_missed_errors ;
   __u64 tx_aborted_errors ;
   __u64 tx_carrier_errors ;
   __u64 tx_fifo_errors ;
   __u64 tx_heartbeat_errors ;
   __u64 tx_window_errors ;
   __u64 rx_compressed ;
   __u64 tx_compressed ;
};

#line 643  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if_link.h"
struct ifla_vf_stats {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 broadcast ;
   __u64 multicast ;
};

#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/if_link.h"
struct ifla_vf_info {
   __u32 vf ;
   __u8 mac[32U] ;
   __u32 vlan ;
   __u32 qos ;
   __u32 spoofchk ;
   __u32 linkstate ;
   __u32 min_tx_rate ;
   __u32 max_tx_rate ;
   __u32 rss_query_en ;
};

#line 118  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if_bonding.h"
struct netpoll_info;

#line 119 
struct wireless_dev;

#line 120 
struct wpan_dev;

#line 121 
struct mpls_dev;

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
enum netdev_tx {
    __NETDEV_TX_MIN = -2147483648,
    NETDEV_TX_OK = 0,
    NETDEV_TX_BUSY = 16,
    NETDEV_TX_LOCKED = 32
};

#line 110  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
typedef enum netdev_tx netdev_tx_t;

#line 129  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct net_device_stats {
   unsigned long rx_packets ;
   unsigned long tx_packets ;
   unsigned long rx_bytes ;
   unsigned long tx_bytes ;
   unsigned long rx_errors ;
   unsigned long tx_errors ;
   unsigned long rx_dropped ;
   unsigned long tx_dropped ;
   unsigned long multicast ;
   unsigned long collisions ;
   unsigned long rx_length_errors ;
   unsigned long rx_over_errors ;
   unsigned long rx_crc_errors ;
   unsigned long rx_frame_errors ;
   unsigned long rx_fifo_errors ;
   unsigned long rx_missed_errors ;
   unsigned long tx_aborted_errors ;
   unsigned long tx_carrier_errors ;
   unsigned long tx_fifo_errors ;
   unsigned long tx_heartbeat_errors ;
   unsigned long tx_window_errors ;
   unsigned long rx_compressed ;
   unsigned long tx_compressed ;
};

#line 190 
struct neigh_parms;

#line 211  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct netdev_hw_addr_list {
   struct list_head list ;
   int count ;
};

#line 216  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct hh_cache {
   u16 hh_len ;
   u16 __pad ;
   seqlock_t hh_lock ;
   unsigned long hh_data[16U] ;
};

#line 245  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct header_ops {
   int (*create)(struct sk_buff *, struct net_device *, unsigned short , void const *, void const *, unsigned int ) ;
   int (*parse)(struct sk_buff const *, unsigned char *) ;
   int (*cache)(struct neighbour const *, struct hh_cache *, __be16 ) ;
   void (*cache_update)(struct hh_cache *, struct net_device const *, unsigned char const *) ;
};

#line 295  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct napi_struct {
   struct list_head poll_list ;
   unsigned long state ;
   int weight ;
   unsigned int gro_count ;
   int (*poll)(struct napi_struct *, int ) ;
   spinlock_t poll_lock ;
   int poll_owner ;
   struct net_device *dev ;
   struct sk_buff *gro_list ;
   struct sk_buff *skb ;
   struct hrtimer timer ;
   struct list_head dev_list ;
   struct hlist_node napi_hash_node ;
   unsigned int napi_id ;
};

#line 340 
enum rx_handler_result {
    RX_HANDLER_CONSUMED = 0,
    RX_HANDLER_ANOTHER = 1,
    RX_HANDLER_EXACT = 2,
    RX_HANDLER_PASS = 3
};

#line 388  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
typedef enum rx_handler_result rx_handler_result_t;

#line 389  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
typedef rx_handler_result_t rx_handler_func_t(struct sk_buff **);

#line 537 
struct Qdisc;

#line 537  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct netdev_queue {
   struct net_device *dev ;
   struct Qdisc *qdisc ;
   struct Qdisc *qdisc_sleeping ;
   struct kobject kobj ;
   int numa_node ;
   spinlock_t _xmit_lock ;
   int xmit_lock_owner ;
   unsigned long trans_start ;
   unsigned long trans_timeout ;
   unsigned long state ;
   struct dql dql ;
   unsigned long tx_maxrate ;
};

#line 607  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct rps_map {
   unsigned int len ;
   struct callback_head rcu ;
   u16 cpus[0U] ;
};

#line 619  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct rps_dev_flow {
   u16 cpu ;
   u16 filter ;
   unsigned int last_qtail ;
};

#line 631  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct rps_dev_flow_table {
   unsigned int mask ;
   struct callback_head rcu ;
   struct rps_dev_flow flows[0U] ;
};

#line 683  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct netdev_rx_queue {
   struct rps_map *rps_map ;
   struct rps_dev_flow_table *rps_flow_table ;
   struct kobject kobj ;
   struct net_device *dev ;
};

#line 706  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct xps_map {
   unsigned int len ;
   unsigned int alloc_len ;
   struct callback_head rcu ;
   u16 queues[0U] ;
};

#line 719  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct xps_dev_maps {
   struct callback_head rcu ;
   struct xps_map *cpu_map[0U] ;
};

#line 730  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct netdev_tc_txq {
   u16 count ;
   u16 offset ;
};

#line 741  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct netdev_fcoe_hbainfo {
   char manufacturer[64U] ;
   char serial_number[64U] ;
   char hardware_version[64U] ;
   char driver_version[64U] ;
   char optionrom_version[64U] ;
   char firmware_version[64U] ;
   char model[256U] ;
   char model_description[256U] ;
};

#line 757  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct netdev_phys_item_id {
   unsigned char id[32U] ;
   unsigned char id_len ;
};

#line 770  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct net_device_ops {
   int (*ndo_init)(struct net_device *) ;
   void (*ndo_uninit)(struct net_device *) ;
   int (*ndo_open)(struct net_device *) ;
   int (*ndo_stop)(struct net_device *) ;
   netdev_tx_t (*ndo_start_xmit)(struct sk_buff *, struct net_device *) ;
   u16 (*ndo_select_queue)(struct net_device *, struct sk_buff *, void *, u16 (*)(struct net_device *, struct sk_buff *)) ;
   void (*ndo_change_rx_flags)(struct net_device *, int ) ;
   void (*ndo_set_rx_mode)(struct net_device *) ;
   int (*ndo_set_mac_address)(struct net_device *, void *) ;
   int (*ndo_validate_addr)(struct net_device *) ;
   int (*ndo_do_ioctl)(struct net_device *, struct ifreq *, int ) ;
   int (*ndo_set_config)(struct net_device *, struct ifmap *) ;
   int (*ndo_change_mtu)(struct net_device *, int ) ;
   int (*ndo_neigh_setup)(struct net_device *, struct neigh_parms *) ;
   void (*ndo_tx_timeout)(struct net_device *) ;
   struct rtnl_link_stats64 *(*ndo_get_stats64)(struct net_device *, struct rtnl_link_stats64 *) ;
   struct net_device_stats *(*ndo_get_stats)(struct net_device *) ;
   int (*ndo_vlan_rx_add_vid)(struct net_device *, __be16 , u16 ) ;
   int (*ndo_vlan_rx_kill_vid)(struct net_device *, __be16 , u16 ) ;
   void (*ndo_poll_controller)(struct net_device *) ;
   int (*ndo_netpoll_setup)(struct net_device *, struct netpoll_info *) ;
   void (*ndo_netpoll_cleanup)(struct net_device *) ;
   int (*ndo_busy_poll)(struct napi_struct *) ;
   int (*ndo_set_vf_mac)(struct net_device *, int , u8 *) ;
   int (*ndo_set_vf_vlan)(struct net_device *, int , u16 , u8 ) ;
   int (*ndo_set_vf_rate)(struct net_device *, int , int , int ) ;
   int (*ndo_set_vf_spoofchk)(struct net_device *, int , bool ) ;
   int (*ndo_get_vf_config)(struct net_device *, int , struct ifla_vf_info *) ;
   int (*ndo_set_vf_link_state)(struct net_device *, int , int ) ;
   int (*ndo_get_vf_stats)(struct net_device *, int , struct ifla_vf_stats *) ;
   int (*ndo_set_vf_port)(struct net_device *, int , struct nlattr **) ;
   int (*ndo_get_vf_port)(struct net_device *, int , struct sk_buff *) ;
   int (*ndo_set_vf_rss_query_en)(struct net_device *, int , bool ) ;
   int (*ndo_setup_tc)(struct net_device *, u8 ) ;
   int (*ndo_fcoe_enable)(struct net_device *) ;
   int (*ndo_fcoe_disable)(struct net_device *) ;
   int (*ndo_fcoe_ddp_setup)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_ddp_done)(struct net_device *, u16 ) ;
   int (*ndo_fcoe_ddp_target)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_get_hbainfo)(struct net_device *, struct netdev_fcoe_hbainfo *) ;
   int (*ndo_fcoe_get_wwn)(struct net_device *, u64 *, int ) ;
   int (*ndo_rx_flow_steer)(struct net_device *, struct sk_buff const *, u16 , u32 ) ;
   int (*ndo_add_slave)(struct net_device *, struct net_device *) ;
   int (*ndo_del_slave)(struct net_device *, struct net_device *) ;
   netdev_features_t (*ndo_fix_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_set_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_neigh_construct)(struct neighbour *) ;
   void (*ndo_neigh_destroy)(struct neighbour *) ;
   int (*ndo_fdb_add)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char const *, u16 , u16 ) ;
   int (*ndo_fdb_del)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char const *, u16 ) ;
   int (*ndo_fdb_dump)(struct sk_buff *, struct netlink_callback *, struct net_device *, struct net_device *, int ) ;
   int (*ndo_bridge_setlink)(struct net_device *, struct nlmsghdr *, u16 ) ;
   int (*ndo_bridge_getlink)(struct sk_buff *, u32 , u32 , struct net_device *, u32 , int ) ;
   int (*ndo_bridge_dellink)(struct net_device *, struct nlmsghdr *, u16 ) ;
   int (*ndo_change_carrier)(struct net_device *, bool ) ;
   int (*ndo_get_phys_port_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_phys_port_name)(struct net_device *, char *, size_t ) ;
   void (*ndo_add_vxlan_port)(struct net_device *, sa_family_t , __be16 ) ;
   void (*ndo_del_vxlan_port)(struct net_device *, sa_family_t , __be16 ) ;
   void *(*ndo_dfwd_add_station)(struct net_device *, struct net_device *) ;
   void (*ndo_dfwd_del_station)(struct net_device *, void *) ;
   netdev_tx_t (*ndo_dfwd_start_xmit)(struct sk_buff *, struct net_device *, void *) ;
   int (*ndo_get_lock_subclass)(struct net_device *) ;
   netdev_features_t (*ndo_features_check)(struct sk_buff *, struct net_device *, netdev_features_t ) ;
   int (*ndo_set_tx_maxrate)(struct net_device *, int , u32 ) ;
   int (*ndo_get_iflink)(struct net_device const *) ;
};

#line 1243 
enum ldv_30427 {
    NETREG_UNINITIALIZED = 0,
    NETREG_REGISTERED = 1,
    NETREG_UNREGISTERING = 2,
    NETREG_UNREGISTERED = 3,
    NETREG_RELEASED = 4,
    NETREG_DUMMY = 5
};

#line 1252 
enum ldv_30428 {
    RTNL_LINK_INITIALIZED = 0,
    RTNL_LINK_INITIALIZING = 1
};

#line 1257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct __anonstruct_adj_list_305 {
   struct list_head upper ;
   struct list_head lower ;
};

#line 1257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct __anonstruct_all_adj_list_306 {
   struct list_head upper ;
   struct list_head lower ;
};

#line 1257 
struct iw_handler_def;

#line 1257 
struct iw_public_data;

#line 1257 
struct switchdev_ops;

#line 1257 
struct vlan_info;

#line 1257 
struct tipc_bearer;

#line 1257 
struct in_device;

#line 1257 
struct dn_dev;

#line 1257 
struct inet6_dev;

#line 1257 
struct tcf_proto;

#line 1257 
struct cpu_rmap;

#line 1257 
struct pcpu_lstats;

#line 1257 
struct pcpu_sw_netstats;

#line 1257 
struct pcpu_dstats;

#line 1257 
struct pcpu_vstats;

#line 1257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
union __anonunion_307 {
   void *ml_priv ;
   struct pcpu_lstats *lstats ;
   struct pcpu_sw_netstats *tstats ;
   struct pcpu_dstats *dstats ;
   struct pcpu_vstats *vstats ;
};

#line 1257 
struct garp_port;

#line 1257 
struct mrp_port;

#line 1257 
struct rtnl_link_ops;

#line 1257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct net_device {
   char name[16U] ;
   struct hlist_node name_hlist ;
   char *ifalias ;
   unsigned long mem_end ;
   unsigned long mem_start ;
   unsigned long base_addr ;
   int irq ;
   atomic_t carrier_changes ;
   unsigned long state ;
   struct list_head dev_list ;
   struct list_head napi_list ;
   struct list_head unreg_list ;
   struct list_head close_list ;
   struct list_head ptype_all ;
   struct list_head ptype_specific ;
   struct __anonstruct_adj_list_305 adj_list ;
   struct __anonstruct_all_adj_list_306 all_adj_list ;
   netdev_features_t features ;
   netdev_features_t hw_features ;
   netdev_features_t wanted_features ;
   netdev_features_t vlan_features ;
   netdev_features_t hw_enc_features ;
   netdev_features_t mpls_features ;
   int ifindex ;
   int group ;
   struct net_device_stats stats ;
   atomic_long_t rx_dropped ;
   atomic_long_t tx_dropped ;
   struct iw_handler_def const *wireless_handlers ;
   struct iw_public_data *wireless_data ;
   struct net_device_ops const *netdev_ops ;
   struct ethtool_ops const *ethtool_ops ;
   struct switchdev_ops const *switchdev_ops ;
   struct header_ops const *header_ops ;
   unsigned int flags ;
   unsigned int priv_flags ;
   unsigned short gflags ;
   unsigned short padded ;
   unsigned char operstate ;
   unsigned char link_mode ;
   unsigned char if_port ;
   unsigned char dma ;
   unsigned int mtu ;
   unsigned short type ;
   unsigned short hard_header_len ;
   unsigned short needed_headroom ;
   unsigned short needed_tailroom ;
   unsigned char perm_addr[32U] ;
   unsigned char addr_assign_type ;
   unsigned char addr_len ;
   unsigned short neigh_priv_len ;
   unsigned short dev_id ;
   unsigned short dev_port ;
   spinlock_t addr_list_lock ;
   unsigned char name_assign_type ;
   bool uc_promisc ;
   struct netdev_hw_addr_list uc ;
   struct netdev_hw_addr_list mc ;
   struct netdev_hw_addr_list dev_addrs ;
   struct kset *queues_kset ;
   unsigned int promiscuity ;
   unsigned int allmulti ;
   struct vlan_info *vlan_info ;
   struct dsa_switch_tree *dsa_ptr ;
   struct tipc_bearer *tipc_ptr ;
   void *atalk_ptr ;
   struct in_device *ip_ptr ;
   struct dn_dev *dn_ptr ;
   struct inet6_dev *ip6_ptr ;
   void *ax25_ptr ;
   struct wireless_dev *ieee80211_ptr ;
   struct wpan_dev *ieee802154_ptr ;
   struct mpls_dev *mpls_ptr ;
   unsigned long last_rx ;
   unsigned char *dev_addr ;
   struct netdev_rx_queue *_rx ;
   unsigned int num_rx_queues ;
   unsigned int real_num_rx_queues ;
   unsigned long gro_flush_timeout ;
   rx_handler_func_t *rx_handler ;
   void *rx_handler_data ;
   struct tcf_proto *ingress_cl_list ;
   struct netdev_queue *ingress_queue ;
   struct list_head nf_hooks_ingress ;
   unsigned char broadcast[32U] ;
   struct cpu_rmap *rx_cpu_rmap ;
   struct hlist_node index_hlist ;
   struct netdev_queue *_tx ;
   unsigned int num_tx_queues ;
   unsigned int real_num_tx_queues ;
   struct Qdisc *qdisc ;
   unsigned long tx_queue_len ;
   spinlock_t tx_global_lock ;
   int watchdog_timeo ;
   struct xps_dev_maps *xps_maps ;
   unsigned long trans_start ;
   struct timer_list watchdog_timer ;
   int *pcpu_refcnt ;
   struct list_head todo_list ;
   struct list_head link_watch_list ;
   enum ldv_30427 __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))) reg_state : 8 ;
   bool dismantle ;
   enum ldv_30428 __attribute__((__FRAMA_C_BITFIELD_SIZE__(16))) rtnl_link_state : 16 ;
   void (*destructor)(struct net_device *) ;
   struct netpoll_info *npinfo ;
   possible_net_t nd_net ;
   union __anonunion_307 __anonCompField_net_device_94 ;
   struct garp_port *garp_port ;
   struct mrp_port *mrp_port ;
   struct device dev ;
   struct attribute_group const *sysfs_groups[4U] ;
   struct attribute_group const *sysfs_rx_queue_group ;
   struct rtnl_link_ops const *rtnl_link_ops ;
   unsigned int gso_max_size ;
   u16 gso_max_segs ;
   u16 gso_min_segs ;
   struct dcbnl_rtnl_ops const *dcbnl_ops ;
   u8 num_tc ;
   struct netdev_tc_txq tc_to_txq[16U] ;
   u8 prio_tc_map[16U] ;
   unsigned int fcoe_ddp_xid ;
   struct netprio_map *priomap ;
   struct phy_device *phydev ;
   struct lock_class_key *qdisc_tx_busylock ;
};

#line 1978  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct packet_type {
   __be16 type ;
   struct net_device *dev ;
   int (*func)(struct sk_buff *, struct net_device *, struct packet_type *, struct net_device *) ;
   bool (*id_match)(struct packet_type *, struct sock *) ;
   void *af_packet_priv ;
   struct list_head list ;
};

#line 2025  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct pcpu_sw_netstats {
   u64 rx_packets ;
   u64 rx_bytes ;
   u64 tx_packets ;
   u64 tx_bytes ;
   struct u64_stats_sync syncp ;
};

#line 122  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/pps.h"
struct cdev {
   struct kobject kobj ;
   struct module *owner ;
   struct file_operations const *ops ;
   struct list_head list ;
   dev_t dev ;
   unsigned int count ;
};

#line 29  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mdio.h"
struct mdio_if_info {
   int prtad ;
   u32 mmds ;
   unsigned int mode_support ;
   struct net_device *dev ;
   int (*mdio_read)(struct net_device *, int , int , u16 ) ;
   int (*mdio_write)(struct net_device *, int , int , u16 , u16 ) ;
};

#line 175  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mdio.h"
struct ixgbe_thermal_diode_data {
   u8 location ;
   u8 temp ;
   u8 caution_thresh ;
   u8 max_op_thresh ;
};

#line 228  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_type.h"
struct ixgbe_thermal_sensor_data {
   struct ixgbe_thermal_diode_data sensor[3U] ;
};

#line 2754  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_type.h"
typedef u32 ixgbe_autoneg_advertised;

#line 2756  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_type.h"
typedef u32 ixgbe_link_speed;

#line 2925 
enum ixgbe_eeprom_type {
    ixgbe_eeprom_uninitialized = 0,
    ixgbe_eeprom_spi = 1,
    ixgbe_flash = 2,
    ixgbe_eeprom_none = 3
};

#line 2932 
enum ixgbe_mac_type {
    ixgbe_mac_unknown = 0,
    ixgbe_mac_82598EB = 1,
    ixgbe_mac_82599EB = 2,
    ixgbe_mac_X540 = 3,
    ixgbe_mac_X550 = 4,
    ixgbe_mac_X550EM_x = 5,
    ixgbe_num_macs = 6
};

#line 2942 
enum ixgbe_phy_type {
    ixgbe_phy_unknown = 0,
    ixgbe_phy_none = 1,
    ixgbe_phy_tn = 2,
    ixgbe_phy_aq = 3,
    ixgbe_phy_x550em_kr = 4,
    ixgbe_phy_x550em_kx4 = 5,
    ixgbe_phy_x550em_ext_t = 6,
    ixgbe_phy_cu_unknown = 7,
    ixgbe_phy_qt = 8,
    ixgbe_phy_xaui = 9,
    ixgbe_phy_nl = 10,
    ixgbe_phy_sfp_passive_tyco = 11,
    ixgbe_phy_sfp_passive_unknown = 12,
    ixgbe_phy_sfp_active_unknown = 13,
    ixgbe_phy_sfp_avago = 14,
    ixgbe_phy_sfp_ftl = 15,
    ixgbe_phy_sfp_ftl_active = 16,
    ixgbe_phy_sfp_unknown = 17,
    ixgbe_phy_sfp_intel = 18,
    ixgbe_phy_qsfp_passive_unknown = 19,
    ixgbe_phy_qsfp_active_unknown = 20,
    ixgbe_phy_qsfp_intel = 21,
    ixgbe_phy_qsfp_unknown = 22,
    ixgbe_phy_sfp_unsupported = 23,
    ixgbe_phy_generic = 24
};

#line 2970 
enum ixgbe_sfp_type {
    ixgbe_sfp_type_da_cu = 0,
    ixgbe_sfp_type_sr = 1,
    ixgbe_sfp_type_lr = 2,
    ixgbe_sfp_type_da_cu_core0 = 3,
    ixgbe_sfp_type_da_cu_core1 = 4,
    ixgbe_sfp_type_srlr_core0 = 5,
    ixgbe_sfp_type_srlr_core1 = 6,
    ixgbe_sfp_type_da_act_lmt_core0 = 7,
    ixgbe_sfp_type_da_act_lmt_core1 = 8,
    ixgbe_sfp_type_1g_cu_core0 = 9,
    ixgbe_sfp_type_1g_cu_core1 = 10,
    ixgbe_sfp_type_1g_sx_core0 = 11,
    ixgbe_sfp_type_1g_sx_core1 = 12,
    ixgbe_sfp_type_1g_lx_core0 = 13,
    ixgbe_sfp_type_1g_lx_core1 = 14,
    ixgbe_sfp_type_not_present = 65534,
    ixgbe_sfp_type_unknown = 65535
};

#line 2990 
enum ixgbe_media_type {
    ixgbe_media_type_unknown = 0,
    ixgbe_media_type_fiber = 1,
    ixgbe_media_type_fiber_qsfp = 2,
    ixgbe_media_type_fiber_lco = 3,
    ixgbe_media_type_copper = 4,
    ixgbe_media_type_backplane = 5,
    ixgbe_media_type_cx4 = 6,
    ixgbe_media_type_virtual = 7
};

#line 3001 
enum ixgbe_fc_mode {
    ixgbe_fc_none = 0,
    ixgbe_fc_rx_pause = 1,
    ixgbe_fc_tx_pause = 2,
    ixgbe_fc_full = 3,
    ixgbe_fc_default = 4
};

#line 3009 
enum ixgbe_smart_speed {
    ixgbe_smart_speed_auto = 0,
    ixgbe_smart_speed_on = 1,
    ixgbe_smart_speed_off = 2
};

#line 3015 
enum ixgbe_bus_type {
    ixgbe_bus_type_unknown = 0,
    ixgbe_bus_type_pci = 1,
    ixgbe_bus_type_pcix = 2,
    ixgbe_bus_type_pci_express = 3,
    ixgbe_bus_type_reserved = 4
};

#line 3023 
enum ixgbe_bus_speed {
    ixgbe_bus_speed_unknown = 0,
    ixgbe_bus_speed_33 = 33,
    ixgbe_bus_speed_66 = 66,
    ixgbe_bus_speed_100 = 100,
    ixgbe_bus_speed_120 = 120,
    ixgbe_bus_speed_133 = 133,
    ixgbe_bus_speed_2500 = 2500,
    ixgbe_bus_speed_5000 = 5000,
    ixgbe_bus_speed_8000 = 8000,
    ixgbe_bus_speed_reserved = 8001
};

#line 3036 
enum ixgbe_bus_width {
    ixgbe_bus_width_unknown = 0,
    ixgbe_bus_width_pcie_x1 = 1,
    ixgbe_bus_width_pcie_x2 = 2,
    ixgbe_bus_width_pcie_x4 = 4,
    ixgbe_bus_width_pcie_x8 = 8,
    ixgbe_bus_width_32 = 32,
    ixgbe_bus_width_64 = 64,
    ixgbe_bus_width_reserved = 65
};

#line 3047  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_type.h"
struct ixgbe_addr_filter_info {
   u32 num_mc_addrs ;
   u32 rar_used_count ;
   u32 mta_in_use ;
   u32 overflow_promisc ;
   bool uc_set_promisc ;
   bool user_set_promisc ;
};

#line 3078  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_type.h"
struct ixgbe_bus_info {
   enum ixgbe_bus_speed speed ;
   enum ixgbe_bus_width width ;
   enum ixgbe_bus_type type ;
   u16 func ;
   u16 lan_id ;
};

#line 3088  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_type.h"
struct ixgbe_fc_info {
   u32 high_water[8U] ;
   u32 low_water[8U] ;
   u16 pause_time ;
   bool send_xon ;
   bool strict_ieee ;
   bool disable_fc_autoneg ;
   bool fc_was_autonegged ;
   enum ixgbe_fc_mode current_mode ;
   enum ixgbe_fc_mode requested_mode ;
};

#line 3180 
struct ixgbe_hw;

#line 3186  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_type.h"
struct ixgbe_eeprom_operations {
   s32 (*init_params)(struct ixgbe_hw *) ;
   s32 (*read)(struct ixgbe_hw *, u16 , u16 *) ;
   s32 (*read_buffer)(struct ixgbe_hw *, u16 , u16 , u16 *) ;
   s32 (*write)(struct ixgbe_hw *, u16 , u16 ) ;
   s32 (*write_buffer)(struct ixgbe_hw *, u16 , u16 , u16 *) ;
   s32 (*validate_checksum)(struct ixgbe_hw *, u16 *) ;
   s32 (*update_checksum)(struct ixgbe_hw *) ;
   s32 (*calc_checksum)(struct ixgbe_hw *) ;
};

#line 3199  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_type.h"
struct ixgbe_mac_operations {
   s32 (*init_hw)(struct ixgbe_hw *) ;
   s32 (*reset_hw)(struct ixgbe_hw *) ;
   s32 (*start_hw)(struct ixgbe_hw *) ;
   s32 (*clear_hw_cntrs)(struct ixgbe_hw *) ;
   enum ixgbe_media_type (*get_media_type)(struct ixgbe_hw *) ;
   s32 (*get_mac_addr)(struct ixgbe_hw *, u8 *) ;
   s32 (*get_san_mac_addr)(struct ixgbe_hw *, u8 *) ;
   s32 (*get_device_caps)(struct ixgbe_hw *, u16 *) ;
   s32 (*get_wwn_prefix)(struct ixgbe_hw *, u16 *, u16 *) ;
   s32 (*stop_adapter)(struct ixgbe_hw *) ;
   s32 (*get_bus_info)(struct ixgbe_hw *) ;
   void (*set_lan_id)(struct ixgbe_hw *) ;
   s32 (*read_analog_reg8)(struct ixgbe_hw *, u32 , u8 *) ;
   s32 (*write_analog_reg8)(struct ixgbe_hw *, u32 , u8 ) ;
   s32 (*setup_sfp)(struct ixgbe_hw *) ;
   s32 (*disable_rx_buff)(struct ixgbe_hw *) ;
   s32 (*enable_rx_buff)(struct ixgbe_hw *) ;
   s32 (*enable_rx_dma)(struct ixgbe_hw *, u32 ) ;
   s32 (*acquire_swfw_sync)(struct ixgbe_hw *, u32 ) ;
   void (*release_swfw_sync)(struct ixgbe_hw *, u32 ) ;
   s32 (*prot_autoc_read)(struct ixgbe_hw *, bool *, u32 *) ;
   s32 (*prot_autoc_write)(struct ixgbe_hw *, u32 , bool ) ;
   void (*disable_tx_laser)(struct ixgbe_hw *) ;
   void (*enable_tx_laser)(struct ixgbe_hw *) ;
   void (*flap_tx_laser)(struct ixgbe_hw *) ;
   void (*stop_link_on_d3)(struct ixgbe_hw *) ;
   s32 (*setup_link)(struct ixgbe_hw *, ixgbe_link_speed , bool ) ;
   s32 (*check_link)(struct ixgbe_hw *, ixgbe_link_speed *, bool *, bool ) ;
   s32 (*get_link_capabilities)(struct ixgbe_hw *, ixgbe_link_speed *, bool *) ;
   void (*set_rxpba)(struct ixgbe_hw *, int , u32 , int ) ;
   s32 (*led_on)(struct ixgbe_hw *, u32 ) ;
   s32 (*led_off)(struct ixgbe_hw *, u32 ) ;
   s32 (*blink_led_start)(struct ixgbe_hw *, u32 ) ;
   s32 (*blink_led_stop)(struct ixgbe_hw *, u32 ) ;
   s32 (*set_rar)(struct ixgbe_hw *, u32 , u8 *, u32 , u32 ) ;
   s32 (*clear_rar)(struct ixgbe_hw *, u32 ) ;
   s32 (*set_vmdq)(struct ixgbe_hw *, u32 , u32 ) ;
   s32 (*set_vmdq_san_mac)(struct ixgbe_hw *, u32 ) ;
   s32 (*clear_vmdq)(struct ixgbe_hw *, u32 , u32 ) ;
   s32 (*init_rx_addrs)(struct ixgbe_hw *) ;
   s32 (*update_mc_addr_list)(struct ixgbe_hw *, struct net_device *) ;
   s32 (*enable_mc)(struct ixgbe_hw *) ;
   s32 (*disable_mc)(struct ixgbe_hw *) ;
   s32 (*clear_vfta)(struct ixgbe_hw *) ;
   s32 (*set_vfta)(struct ixgbe_hw *, u32 , u32 , bool ) ;
   s32 (*init_uta_tables)(struct ixgbe_hw *) ;
   void (*set_mac_anti_spoofing)(struct ixgbe_hw *, bool , int ) ;
   void (*set_vlan_anti_spoofing)(struct ixgbe_hw *, bool , int ) ;
   s32 (*fc_enable)(struct ixgbe_hw *) ;
   s32 (*set_fw_drv_ver)(struct ixgbe_hw *, u8 , u8 , u8 , u8 ) ;
   s32 (*get_thermal_sensor_data)(struct ixgbe_hw *) ;
   s32 (*init_thermal_sensor_thresh)(struct ixgbe_hw *) ;
   void (*disable_rx)(struct ixgbe_hw *) ;
   void (*enable_rx)(struct ixgbe_hw *) ;
   void (*set_source_address_pruning)(struct ixgbe_hw *, bool , unsigned int ) ;
   void (*set_ethertype_anti_spoofing)(struct ixgbe_hw *, bool , int ) ;
   s32 (*dmac_config)(struct ixgbe_hw *) ;
   s32 (*dmac_update_tcs)(struct ixgbe_hw *) ;
   s32 (*dmac_config_tcs)(struct ixgbe_hw *) ;
};

#line 3277  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_type.h"
struct ixgbe_phy_operations {
   s32 (*identify)(struct ixgbe_hw *) ;
   s32 (*identify_sfp)(struct ixgbe_hw *) ;
   s32 (*init)(struct ixgbe_hw *) ;
   s32 (*reset)(struct ixgbe_hw *) ;
   s32 (*read_reg)(struct ixgbe_hw *, u32 , u32 , u16 *) ;
   s32 (*write_reg)(struct ixgbe_hw *, u32 , u32 , u16 ) ;
   s32 (*read_reg_mdi)(struct ixgbe_hw *, u32 , u32 , u16 *) ;
   s32 (*write_reg_mdi)(struct ixgbe_hw *, u32 , u32 , u16 ) ;
   s32 (*setup_link)(struct ixgbe_hw *) ;
   s32 (*setup_internal_link)(struct ixgbe_hw *) ;
   s32 (*setup_link_speed)(struct ixgbe_hw *, ixgbe_link_speed , bool ) ;
   s32 (*check_link)(struct ixgbe_hw *, ixgbe_link_speed *, bool *) ;
   s32 (*get_firmware_version)(struct ixgbe_hw *, u16 *) ;
   s32 (*read_i2c_byte)(struct ixgbe_hw *, u8 , u8 , u8 *) ;
   s32 (*write_i2c_byte)(struct ixgbe_hw *, u8 , u8 , u8 ) ;
   s32 (*read_i2c_sff8472)(struct ixgbe_hw *, u8 , u8 *) ;
   s32 (*read_i2c_eeprom)(struct ixgbe_hw *, u8 , u8 *) ;
   s32 (*write_i2c_eeprom)(struct ixgbe_hw *, u8 , u8 ) ;
   s32 (*read_i2c_combined)(struct ixgbe_hw *, u8 , u16 , u16 *) ;
   s32 (*write_i2c_combined)(struct ixgbe_hw *, u8 , u16 , u16 ) ;
   s32 (*check_overtemp)(struct ixgbe_hw *) ;
   s32 (*set_phy_power)(struct ixgbe_hw *, bool ) ;
   s32 (*handle_lasi)(struct ixgbe_hw *) ;
};

#line 3303  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_type.h"
struct ixgbe_eeprom_info {
   struct ixgbe_eeprom_operations ops ;
   enum ixgbe_eeprom_type type ;
   u32 semaphore_delay ;
   u16 word_size ;
   u16 address_bits ;
   u16 word_page_size ;
};

#line 3312  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_type.h"
struct ixgbe_mac_info {
   struct ixgbe_mac_operations ops ;
   enum ixgbe_mac_type type ;
   u8 addr[6U] ;
   u8 perm_addr[6U] ;
   u8 san_addr[6U] ;
   u16 wwnn_prefix ;
   u16 wwpn_prefix ;
   u16 max_msix_vectors ;
   u32 mta_shadow[128U] ;
   s32 mc_filter_type ;
   u32 mcft_size ;
   u32 vft_size ;
   u32 num_rar_entries ;
   u32 rar_highwater ;
   u32 rx_pb_size ;
   u32 max_tx_queues ;
   u32 max_rx_queues ;
   u32 orig_autoc ;
   u32 orig_autoc2 ;
   bool orig_link_settings_stored ;
   bool autotry_restart ;
   u8 flags ;
   u8 san_mac_rar_index ;
   struct ixgbe_thermal_sensor_data thermal_sensor_data ;
   bool set_lben ;
};

#line 3344  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_type.h"
struct ixgbe_phy_info {
   struct ixgbe_phy_operations ops ;
   struct mdio_if_info mdio ;
   enum ixgbe_phy_type type ;
   u32 id ;
   enum ixgbe_sfp_type sfp_type ;
   bool sfp_setup_needed ;
   u32 revision ;
   enum ixgbe_media_type media_type ;
   u8 lan_id ;
   u32 phy_semaphore_mask ;
   bool reset_disable ;
   ixgbe_autoneg_advertised autoneg_advertised ;
   enum ixgbe_smart_speed smart_speed ;
   bool smart_speed_active ;
   bool multispeed_fiber ;
   bool reset_if_overtemp ;
   bool qsfp_shared_i2c_bus ;
   u32 nw_mng_if_sel ;
};

#line 124  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_mbx.h"
struct ixgbe_mbx_operations;

#line 125  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_mbx.h"
struct ixgbe_mbx_operations {
   s32 (*init_params)(struct ixgbe_hw *) ;
   s32 (*read)(struct ixgbe_hw *, u32 *, u16 , u16 ) ;
   s32 (*write)(struct ixgbe_hw *, u32 *, u16 , u16 ) ;
   s32 (*read_posted)(struct ixgbe_hw *, u32 *, u16 , u16 ) ;
   s32 (*write_posted)(struct ixgbe_hw *, u32 *, u16 , u16 ) ;
   s32 (*check_for_msg)(struct ixgbe_hw *, u16 ) ;
   s32 (*check_for_ack)(struct ixgbe_hw *, u16 ) ;
   s32 (*check_for_rst)(struct ixgbe_hw *, u16 ) ;
};

#line 3378  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_type.h"
struct ixgbe_mbx_stats {
   u32 msgs_tx ;
   u32 msgs_rx ;
   u32 acks ;
   u32 reqs ;
   u32 rsts ;
};

#line 3387  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_type.h"
struct ixgbe_mbx_info {
   struct ixgbe_mbx_operations ops ;
   struct ixgbe_mbx_stats stats ;
   u32 timeout ;
   u32 usec_delay ;
   u32 v2p_mailbox ;
   u16 size ;
};

#line 3396  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_type.h"
struct ixgbe_hw {
   u8 *hw_addr ;
   void *back ;
   struct ixgbe_mac_info mac ;
   struct ixgbe_addr_filter_info addr_ctrl ;
   struct ixgbe_fc_info fc ;
   struct ixgbe_phy_info phy ;
   struct ixgbe_eeprom_info eeprom ;
   struct ixgbe_bus_info bus ;
   struct ixgbe_mbx_info mbx ;
   u32 const *mvals ;
   u16 device_id ;
   u16 vendor_id ;
   u16 subsystem_device_id ;
   u16 subsystem_vendor_id ;
   u8 revision_id ;
   bool adapter_stopped ;
   bool force_full_reset ;
   bool allow_unsupported_sfp ;
   bool wol_enabled ;
};

#line 131  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uaccess.h"
struct page_counter {
   atomic_long_t count ;
   unsigned long limit ;
   struct page_counter *parent ;
   unsigned long watermark ;
   unsigned long failcnt ;
};

#line 170  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/cacheflush.h"
struct sock_filter {
   __u16 code ;
   __u8 jt ;
   __u8 jf ;
   __u32 k ;
};

#line 49  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/filter.h"
struct bpf_insn {
   __u8 code ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) dst_reg : 4 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) src_reg : 4 ;
   __s16 off ;
   __s32 imm ;
};

#line 81  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/bpf.h"
enum bpf_prog_type {
    BPF_PROG_TYPE_UNSPEC = 0,
    BPF_PROG_TYPE_SOCKET_FILTER = 1,
    BPF_PROG_TYPE_KPROBE = 2,
    BPF_PROG_TYPE_SCHED_CLS = 3,
    BPF_PROG_TYPE_SCHED_ACT = 4
};

#line 273 
struct bpf_prog_aux;

#line 314  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/filter.h"
struct sock_fprog_kern {
   u16 len ;
   struct sock_filter *filter ;
};

#line 325  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/filter.h"
union __anonunion_342 {
   struct sock_filter insns[0U] ;
   struct bpf_insn insnsi[0U] ;
};

#line 325  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/filter.h"
struct bpf_prog {
   u16 pages ;
   bool jited ;
   bool gpl_compatible ;
   u32 len ;
   enum bpf_prog_type type ;
   struct bpf_prog_aux *aux ;
   struct sock_fprog_kern *orig_prog ;
   unsigned int (*bpf_func)(struct sk_buff const *, struct bpf_insn const *) ;
   union __anonunion_342 __anonCompField_bpf_prog_101 ;
};

#line 342  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/filter.h"
struct sk_filter {
   atomic_t refcnt ;
   struct callback_head rcu ;
   struct bpf_prog *prog ;
};

#line 101  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rculist_nulls.h"
struct pollfd {
   int fd ;
   short events ;
   short revents ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/poll.h"
struct poll_table_struct {
   void (*_qproc)(struct file *, wait_queue_head_t *, struct poll_table_struct *) ;
   unsigned long _key ;
};

#line 183  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/poll.h"
struct nla_policy {
   u16 type ;
   u16 len ;
};

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/rtnetlink.h"
struct rtnl_link_ops {
   struct list_head list ;
   char const *kind ;
   size_t priv_size ;
   void (*setup)(struct net_device *) ;
   int maxtype ;
   struct nla_policy const *policy ;
   int (*validate)(struct nlattr **, struct nlattr **) ;
   int (*newlink)(struct net *, struct net_device *, struct nlattr **, struct nlattr **) ;
   int (*changelink)(struct net_device *, struct nlattr **, struct nlattr **) ;
   void (*dellink)(struct net_device *, struct list_head *) ;
   size_t (*get_size)(struct net_device const *) ;
   int (*fill_info)(struct sk_buff *, struct net_device const *) ;
   size_t (*get_xstats_size)(struct net_device const *) ;
   int (*fill_xstats)(struct sk_buff *, struct net_device const *) ;
   unsigned int (*get_num_tx_queues)(void) ;
   unsigned int (*get_num_rx_queues)(void) ;
   int slave_maxtype ;
   struct nla_policy const *slave_policy ;
   int (*slave_validate)(struct nlattr **, struct nlattr **) ;
   int (*slave_changelink)(struct net_device *, struct net_device *, struct nlattr **, struct nlattr **) ;
   size_t (*get_slave_size)(struct net_device const *, struct net_device const *) ;
   int (*fill_slave_info)(struct sk_buff *, struct net_device const *, struct net_device const *) ;
   struct net *(*get_link_net)(struct net_device const *) ;
};

#line 171 
struct neigh_table;

#line 171  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/rtnetlink.h"
struct neigh_parms {
   possible_net_t net ;
   struct net_device *dev ;
   struct list_head list ;
   int (*neigh_setup)(struct neighbour *) ;
   void (*neigh_cleanup)(struct neighbour *) ;
   struct neigh_table *tbl ;
   void *sysctl_table ;
   int dead ;
   atomic_t refcnt ;
   struct callback_head callback_head ;
   int reachable_time ;
   int data[13U] ;
   unsigned long data_state[1U] ;
};

#line 110  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/neighbour.h"
struct neigh_statistics {
   unsigned long allocs ;
   unsigned long destroys ;
   unsigned long hash_grows ;
   unsigned long res_failed ;
   unsigned long lookups ;
   unsigned long hits ;
   unsigned long rcv_probes_mcast ;
   unsigned long rcv_probes_ucast ;
   unsigned long periodic_gc_runs ;
   unsigned long forced_gc_runs ;
   unsigned long unres_discards ;
};

#line 129 
struct neigh_ops;

#line 129  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/neighbour.h"
struct neighbour {
   struct neighbour *next ;
   struct neigh_table *tbl ;
   struct neigh_parms *parms ;
   unsigned long confirmed ;
   unsigned long updated ;
   rwlock_t lock ;
   atomic_t refcnt ;
   struct sk_buff_head arp_queue ;
   unsigned int arp_queue_len_bytes ;
   struct timer_list timer ;
   unsigned long used ;
   atomic_t probes ;
   __u8 flags ;
   __u8 nud_state ;
   __u8 type ;
   __u8 dead ;
   seqlock_t ha_lock ;
   unsigned char ha[32U] ;
   struct hh_cache hh ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   struct neigh_ops const *ops ;
   struct callback_head rcu ;
   struct net_device *dev ;
   u8 primary_key[0U] ;
};

#line 158  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/neighbour.h"
struct neigh_ops {
   int family ;
   void (*solicit)(struct neighbour *, struct sk_buff *) ;
   void (*error_report)(struct neighbour *, struct sk_buff *) ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   int (*connected_output)(struct neighbour *, struct sk_buff *) ;
};

#line 166  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/neighbour.h"
struct pneigh_entry {
   struct pneigh_entry *next ;
   possible_net_t net ;
   struct net_device *dev ;
   u8 flags ;
   u8 key[0U] ;
};

#line 174  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/neighbour.h"
struct neigh_hash_table {
   struct neighbour **hash_buckets ;
   unsigned int hash_shift ;
   __u32 hash_rnd[4U] ;
   struct callback_head rcu ;
};

#line 187  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/neighbour.h"
struct neigh_table {
   int family ;
   int entry_size ;
   int key_len ;
   __be16 protocol ;
   __u32 (*hash)(void const *, struct net_device const *, __u32 *) ;
   bool (*key_eq)(struct neighbour const *, void const *) ;
   int (*constructor)(struct neighbour *) ;
   int (*pconstructor)(struct pneigh_entry *) ;
   void (*pdestructor)(struct pneigh_entry *) ;
   void (*proxy_redo)(struct sk_buff *) ;
   char *id ;
   struct neigh_parms parms ;
   struct list_head parms_list ;
   int gc_interval ;
   int gc_thresh1 ;
   int gc_thresh2 ;
   int gc_thresh3 ;
   unsigned long last_flush ;
   struct delayed_work gc_work ;
   struct timer_list proxy_timer ;
   struct sk_buff_head proxy_queue ;
   atomic_t entries ;
   rwlock_t lock ;
   unsigned long last_rand ;
   struct neigh_statistics *stats ;
   struct neigh_hash_table *nht ;
   struct pneigh_entry **phash_buckets ;
};

#line 519 
struct dn_route;

#line 519  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/neighbour.h"
union __anonunion_350 {
   struct dst_entry *next ;
   struct rtable *rt_next ;
   struct rt6_info *rt6_next ;
   struct dn_route *dn_next ;
};

#line 519  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/neighbour.h"
struct dst_entry {
   struct callback_head callback_head ;
   struct dst_entry *child ;
   struct net_device *dev ;
   struct dst_ops *ops ;
   unsigned long _metrics ;
   unsigned long expires ;
   struct dst_entry *path ;
   struct dst_entry *from ;
   struct xfrm_state *xfrm ;
   int (*input)(struct sk_buff *) ;
   int (*output)(struct sock *, struct sk_buff *) ;
   unsigned short flags ;
   unsigned short pending_confirm ;
   short error ;
   short obsolete ;
   unsigned short header_len ;
   unsigned short trailer_len ;
   __u32 tclassid ;
   long __pad_to_align_refcnt[2U] ;
   atomic_t __refcnt ;
   int __use ;
   unsigned long lastuse ;
   union __anonunion_350 __anonCompField_dst_entry_102 ;
};

#line 124  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
struct __anonstruct_socket_lock_t_351 {
   spinlock_t slock ;
   int owned ;
   wait_queue_head_t wq ;
   struct lockdep_map dep_map ;
};

#line 124  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
typedef struct __anonstruct_socket_lock_t_351 socket_lock_t;

#line 124 
struct proto;

#line 130  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
typedef __u32 __portpair;

#line 131  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
typedef __u64 __addrpair;

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
struct __anonstruct_353 {
   __be32 skc_daddr ;
   __be32 skc_rcv_saddr ;
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
union __anonunion_352 {
   __addrpair skc_addrpair ;
   struct __anonstruct_353 __anonCompField___anonunion_352_103 ;
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
union __anonunion_354 {
   unsigned int skc_hash ;
   __u16 skc_u16hashes[2U] ;
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
struct __anonstruct_356 {
   __be16 skc_dport ;
   __u16 skc_num ;
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
union __anonunion_355 {
   __portpair skc_portpair ;
   struct __anonstruct_356 __anonCompField___anonunion_355_106 ;
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
union __anonunion_357 {
   struct hlist_node skc_bind_node ;
   struct hlist_nulls_node skc_portaddr_node ;
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
union __anonunion_358 {
   struct hlist_node skc_node ;
   struct hlist_nulls_node skc_nulls_node ;
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
struct sock_common {
   union __anonunion_352 __anonCompField_sock_common_104 ;
   union __anonunion_354 __anonCompField_sock_common_105 ;
   union __anonunion_355 __anonCompField_sock_common_107 ;
   unsigned short skc_family ;
   unsigned char volatile skc_state ;
   unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) skc_reuse : 4 ;
   unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) skc_reuseport : 1 ;
   unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) skc_ipv6only : 1 ;
   unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) skc_net_refcnt : 1 ;
   int skc_bound_dev_if ;
   union __anonunion_357 __anonCompField_sock_common_108 ;
   struct proto *skc_prot ;
   possible_net_t skc_net ;
   struct in6_addr skc_v6_daddr ;
   struct in6_addr skc_v6_rcv_saddr ;
   atomic64_t skc_cookie ;
   int skc_dontcopy_begin[0U] ;
   union __anonunion_358 __anonCompField_sock_common_109 ;
   int skc_tx_queue_mapping ;
   atomic_t skc_refcnt ;
   int skc_dontcopy_end[0U] ;
};

#line 219 
struct cg_proto;

#line 220  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
struct __anonstruct_sk_backlog_359 {
   atomic_t rmem_alloc ;
   int len ;
   struct sk_buff *head ;
   struct sk_buff *tail ;
};

#line 220  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
struct sock {
   struct sock_common __sk_common ;
   socket_lock_t sk_lock ;
   struct sk_buff_head sk_receive_queue ;
   struct __anonstruct_sk_backlog_359 sk_backlog ;
   int sk_forward_alloc ;
   __u32 sk_rxhash ;
   u16 sk_incoming_cpu ;
   __u32 sk_txhash ;
   unsigned int sk_napi_id ;
   unsigned int sk_ll_usec ;
   atomic_t sk_drops ;
   int sk_rcvbuf ;
   struct sk_filter *sk_filter ;
   struct socket_wq *sk_wq ;
   struct xfrm_policy *sk_policy[2U] ;
   unsigned long sk_flags ;
   struct dst_entry *sk_rx_dst ;
   struct dst_entry *sk_dst_cache ;
   spinlock_t sk_dst_lock ;
   atomic_t sk_wmem_alloc ;
   atomic_t sk_omem_alloc ;
   int sk_sndbuf ;
   struct sk_buff_head sk_write_queue ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) sk_shutdown : 2 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) sk_no_check_tx : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) sk_no_check_rx : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) sk_userlocks : 4 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))) sk_protocol : 8 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(16))) sk_type : 16 ;
   int sk_wmem_queued ;
   gfp_t sk_allocation ;
   u32 sk_pacing_rate ;
   u32 sk_max_pacing_rate ;
   netdev_features_t sk_route_caps ;
   netdev_features_t sk_route_nocaps ;
   int sk_gso_type ;
   unsigned int sk_gso_max_size ;
   u16 sk_gso_max_segs ;
   int sk_rcvlowat ;
   unsigned long sk_lingertime ;
   struct sk_buff_head sk_error_queue ;
   struct proto *sk_prot_creator ;
   rwlock_t sk_callback_lock ;
   int sk_err ;
   int sk_err_soft ;
   u32 sk_ack_backlog ;
   u32 sk_max_ack_backlog ;
   __u32 sk_priority ;
   __u32 sk_cgrp_prioidx ;
   struct pid *sk_peer_pid ;
   struct cred const *sk_peer_cred ;
   long sk_rcvtimeo ;
   long sk_sndtimeo ;
   struct timer_list sk_timer ;
   ktime_t sk_stamp ;
   u16 sk_tsflags ;
   u32 sk_tskey ;
   struct socket *sk_socket ;
   void *sk_user_data ;
   struct page_frag sk_frag ;
   struct sk_buff *sk_send_head ;
   __s32 sk_peek_off ;
   int sk_write_pending ;
   void *sk_security ;
   __u32 sk_mark ;
   u32 sk_classid ;
   struct cg_proto *sk_cgrp ;
   void (*sk_state_change)(struct sock *) ;
   void (*sk_data_ready)(struct sock *) ;
   void (*sk_write_space)(struct sock *) ;
   void (*sk_error_report)(struct sock *) ;
   int (*sk_backlog_rcv)(struct sock *, struct sk_buff *) ;
   void (*sk_destruct)(struct sock *) ;
};

#line 914 
struct request_sock_ops;

#line 915 
struct timewait_sock_ops;

#line 916 
struct inet_hashinfo;

#line 917 
struct raw_hashinfo;

#line 932 
struct udp_table;

#line 932  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
union __anonunion_h_362 {
   struct inet_hashinfo *hashinfo ;
   struct udp_table *udp_table ;
   struct raw_hashinfo *raw_hash ;
};

#line 932  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
struct proto {
   void (*close)(struct sock *, long ) ;
   int (*connect)(struct sock *, struct sockaddr *, int ) ;
   int (*disconnect)(struct sock *, int ) ;
   struct sock *(*accept)(struct sock *, int , int *) ;
   int (*ioctl)(struct sock *, int , unsigned long ) ;
   int (*init)(struct sock *) ;
   void (*destroy)(struct sock *) ;
   void (*shutdown)(struct sock *, int ) ;
   int (*setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct sock *, int , int , char *, int *) ;
   int (*compat_setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct sock *, int , int , char *, int *) ;
   int (*compat_ioctl)(struct sock *, unsigned int , unsigned long ) ;
   int (*sendmsg)(struct sock *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct sock *, struct msghdr *, size_t , int , int , int *) ;
   int (*sendpage)(struct sock *, struct page *, int , size_t , int ) ;
   int (*bind)(struct sock *, struct sockaddr *, int ) ;
   int (*backlog_rcv)(struct sock *, struct sk_buff *) ;
   void (*release_cb)(struct sock *) ;
   void (*hash)(struct sock *) ;
   void (*unhash)(struct sock *) ;
   void (*rehash)(struct sock *) ;
   int (*get_port)(struct sock *, unsigned short ) ;
   void (*clear_sk)(struct sock *, int ) ;
   unsigned int inuse_idx ;
   bool (*stream_memory_free)(struct sock const *) ;
   void (*enter_memory_pressure)(struct sock *) ;
   atomic_long_t *memory_allocated ;
   struct percpu_counter *sockets_allocated ;
   int *memory_pressure ;
   long *sysctl_mem ;
   int *sysctl_wmem ;
   int *sysctl_rmem ;
   int max_header ;
   bool no_autobind ;
   struct kmem_cache *slab ;
   unsigned int obj_size ;
   int slab_flags ;
   struct percpu_counter *orphan_count ;
   struct request_sock_ops *rsk_prot ;
   struct timewait_sock_ops *twsk_prot ;
   union __anonunion_h_362 h ;
   struct module *owner ;
   char name[32U] ;
   struct list_head node ;
   int (*init_cgroup)(struct mem_cgroup *, struct cgroup_subsys *) ;
   void (*destroy_cgroup)(struct mem_cgroup *) ;
   struct cg_proto *(*proto_cgroup)(struct mem_cgroup *) ;
};

#line 1054  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
struct cg_proto {
   struct page_counter memory_allocated ;
   struct percpu_counter sockets_allocated ;
   int memory_pressure ;
   long sysctl_mem[3U] ;
   unsigned long flags ;
   struct mem_cgroup *memcg ;
};

#line 2242  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
struct request_sock_ops {
   int family ;
   int obj_size ;
   struct kmem_cache *slab ;
   char *slab_name ;
   int (*rtx_syn_ack)(struct sock *, struct request_sock *) ;
   void (*send_ack)(struct sock *, struct sk_buff *, struct request_sock *) ;
   void (*send_reset)(struct sock *, struct sk_buff *) ;
   void (*destructor)(struct request_sock *) ;
   void (*syn_ack_timeout)(struct request_sock const *) ;
};

#line 46  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/request_sock.h"
struct request_sock {
   struct sock_common __req_common ;
   struct request_sock *dl_next ;
   struct sock *rsk_listener ;
   u16 mss ;
   u8 num_retrans ;
   u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) cookie_ts : 1 ;
   u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(7))) num_timeout : 7 ;
   u32 window_clamp ;
   u32 rcv_wnd ;
   u32 ts_recent ;
   struct timer_list rsk_timer ;
   struct request_sock_ops const *rsk_ops ;
   struct sock *sk ;
   u32 *saved_syn ;
   u32 secid ;
   u32 peer_secid ;
};

#line 174  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ipv6.h"
struct ipv6_stable_secret {
   bool initialized ;
   struct in6_addr secret ;
};

#line 60  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ipv6.h"
struct ipv6_devconf {
   __s32 forwarding ;
   __s32 hop_limit ;
   __s32 mtu6 ;
   __s32 accept_ra ;
   __s32 accept_redirects ;
   __s32 autoconf ;
   __s32 dad_transmits ;
   __s32 rtr_solicits ;
   __s32 rtr_solicit_interval ;
   __s32 rtr_solicit_delay ;
   __s32 force_mld_version ;
   __s32 mldv1_unsolicited_report_interval ;
   __s32 mldv2_unsolicited_report_interval ;
   __s32 use_tempaddr ;
   __s32 temp_valid_lft ;
   __s32 temp_prefered_lft ;
   __s32 regen_max_retry ;
   __s32 max_desync_factor ;
   __s32 max_addresses ;
   __s32 accept_ra_defrtr ;
   __s32 accept_ra_pinfo ;
   __s32 accept_ra_rtr_pref ;
   __s32 rtr_probe_interval ;
   __s32 accept_ra_rt_info_max_plen ;
   __s32 proxy_ndp ;
   __s32 accept_source_route ;
   __s32 accept_ra_from_local ;
   __s32 optimistic_dad ;
   __s32 use_optimistic ;
   __s32 mc_forwarding ;
   __s32 disable_ipv6 ;
   __s32 accept_dad ;
   __s32 force_tllao ;
   __s32 ndisc_notify ;
   __s32 suppress_frag_ndisc ;
   __s32 accept_ra_mtu ;
   struct ipv6_stable_secret stable_secret ;
   void *sysctl ;
};

#line 330  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/inet_connection_sock.h"
struct timewait_sock_ops {
   struct kmem_cache *twsk_slab ;
   char *twsk_slab_name ;
   unsigned int twsk_obj_size ;
   int (*twsk_unique)(struct sock *, struct sock *, void *) ;
   void (*twsk_destructor)(struct sock *) ;
};

#line 100  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/if_inet6.h"
struct ip6_sf_list {
   struct ip6_sf_list *sf_next ;
   struct in6_addr sf_addr ;
   unsigned long sf_count[2U] ;
   unsigned char sf_gsresp ;
   unsigned char sf_oldin ;
   unsigned char sf_crcount ;
};

#line 109  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/if_inet6.h"
struct ifmcaddr6 {
   struct in6_addr mca_addr ;
   struct inet6_dev *idev ;
   struct ifmcaddr6 *next ;
   struct ip6_sf_list *mca_sources ;
   struct ip6_sf_list *mca_tomb ;
   unsigned int mca_sfmode ;
   unsigned char mca_crcount ;
   unsigned long mca_sfcount[2U] ;
   struct timer_list mca_timer ;
   unsigned int mca_flags ;
   int mca_users ;
   atomic_t mca_refcnt ;
   spinlock_t mca_lock ;
   unsigned long mca_cstamp ;
   unsigned long mca_tstamp ;
};

#line 141  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/if_inet6.h"
struct ifacaddr6 {
   struct in6_addr aca_addr ;
   struct inet6_dev *aca_idev ;
   struct rt6_info *aca_rt ;
   struct ifacaddr6 *aca_next ;
   int aca_users ;
   atomic_t aca_refcnt ;
   unsigned long aca_cstamp ;
   unsigned long aca_tstamp ;
};

#line 152  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/if_inet6.h"
struct ipv6_devstat {
   struct proc_dir_entry *proc_dir_entry ;
   struct ipstats_mib *ipv6 ;
   struct icmpv6_mib_device *icmpv6dev ;
   struct icmpv6msg_mib_device *icmpv6msgdev ;
};

#line 163  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/if_inet6.h"
struct inet6_dev {
   struct net_device *dev ;
   struct list_head addr_list ;
   struct ifmcaddr6 *mc_list ;
   struct ifmcaddr6 *mc_tomb ;
   spinlock_t mc_lock ;
   unsigned char mc_qrv ;
   unsigned char mc_gq_running ;
   unsigned char mc_ifc_count ;
   unsigned char mc_dad_count ;
   unsigned long mc_v1_seen ;
   unsigned long mc_qi ;
   unsigned long mc_qri ;
   unsigned long mc_maxdelay ;
   struct timer_list mc_gq_timer ;
   struct timer_list mc_ifc_timer ;
   struct timer_list mc_dad_timer ;
   struct ifacaddr6 *ac_list ;
   rwlock_t lock ;
   atomic_t refcnt ;
   __u32 if_flags ;
   int dead ;
   u8 rndid[8U] ;
   struct timer_list regen_timer ;
   struct list_head tempaddr_list ;
   struct in6_addr token ;
   struct neigh_parms *nd_parms ;
   struct ipv6_devconf cnf ;
   struct ipv6_devstat stats ;
   struct timer_list rs_timer ;
   __u8 rs_probes ;
   __u8 addr_gen_mode ;
   unsigned long tstamp ;
   struct callback_head rcu ;
};

#line 971  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/ipv6.h"
union __anonunion_382 {
   __be32 a4 ;
   __be32 a6[4U] ;
   struct in6_addr in6 ;
};

#line 971  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/ipv6.h"
struct inetpeer_addr_base {
   union __anonunion_382 __anonCompField_inetpeer_addr_base_111 ;
};

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/inetpeer.h"
struct inetpeer_addr {
   struct inetpeer_addr_base addr ;
   __u16 family ;
};

#line 30  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/inetpeer.h"
union __anonunion_383 {
   struct list_head gc_list ;
   struct callback_head gc_rcu ;
};

#line 30  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/inetpeer.h"
struct __anonstruct_385 {
   atomic_t rid ;
};

#line 30  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/inetpeer.h"
union __anonunion_384 {
   struct __anonstruct_385 __anonCompField___anonunion_384_113 ;
   struct callback_head rcu ;
   struct inet_peer *gc_next ;
};

#line 30  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/inetpeer.h"
struct inet_peer {
   struct inet_peer *avl_left ;
   struct inet_peer *avl_right ;
   struct inetpeer_addr daddr ;
   __u32 avl_height ;
   u32 metrics[16U] ;
   u32 rate_tokens ;
   unsigned long rate_last ;
   union __anonunion_383 __anonCompField_inet_peer_112 ;
   union __anonunion_384 __anonCompField_inet_peer_114 ;
   __u32 dtime ;
   atomic_t refcnt ;
};

#line 61  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/inetpeer.h"
struct inet_peer_base {
   struct inet_peer *root ;
   seqlock_t lock ;
   int total ;
};

#line 50  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/route.h"
struct uncached_list;

#line 51  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/route.h"
struct rtable {
   struct dst_entry dst ;
   int rt_genid ;
   unsigned int rt_flags ;
   __u16 rt_type ;
   __u8 rt_is_input ;
   __u8 rt_uses_gateway ;
   int rt_iif ;
   __be32 rt_gateway ;
   u32 rt_pmtu ;
   struct list_head rt_uncached ;
   struct uncached_list *rt_uncached_list ;
};

#line 29  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/int-ll64.h"
typedef long long __s64;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/types.h"
typedef __u32 __le32;

#line 36  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/types.h"
typedef __u64 __le64;

#line 162  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef u64 phys_addr_t;

#line 167  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef phys_addr_t resource_size_t;

#line 216  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef u64 cycle_t;

#line 14  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_debugfs.c.aux"
struct kernel_symbol {
   unsigned long value ;
   char const *name ;
};

#line 131  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/init.h"
typedef void (*ctor_fn_t)(void);

#line 555  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/percpu.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};

#line 59  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/jump_label.h"
struct jump_entry;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/jump_label.h"
typedef u64 jump_label_t;

#line 35  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/jump_label.h"
struct jump_entry {
   jump_label_t code ;
   jump_label_t target ;
   jump_label_t key ;
};

#line 64  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/e820.h"
struct resource {
   resource_size_t start ;
   resource_size_t end ;
   char const *name ;
   unsigned long flags ;
   struct resource *parent ;
   struct resource *sibling ;
   struct resource *child ;
};

#line 172  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/x86_init.h"
struct pci_dev;

#line 133  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/topology.h"
struct pci_bus;

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/elf.h"
typedef __u64 Elf64_Addr;

#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/elf.h"
typedef __u16 Elf64_Half;

#line 20  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/elf.h"
typedef __u32 Elf64_Word;

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/elf.h"
typedef __u64 Elf64_Xword;

#line 190  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};

#line 198  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;

#line 223  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
struct kernel_param;

#line 228  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
struct kernel_param_ops {
   unsigned int flags ;
   int (*set)(char const *, struct kernel_param const *) ;
   int (*get)(char *, struct kernel_param const *) ;
   void (*free)(void *) ;
};

#line 62  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/moduleparam.h"
struct kparam_string;

#line 62 
struct kparam_array;

#line 62  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/moduleparam.h"
union __anonunion_983 {
   void *arg ;
   struct kparam_string const *str ;
   struct kparam_array const *arr ;
};

#line 62  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/moduleparam.h"
struct kernel_param {
   char const *name ;
   struct module *mod ;
   struct kernel_param_ops const *ops ;
   u16 const perm ;
   s8 level ;
   u8 flags ;
   union __anonunion_983 __anonCompField_kernel_param_60 ;
};

#line 83  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};

#line 89  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int elemsize ;
   unsigned int *num ;
   struct kernel_param_ops const *ops ;
   void *elem ;
};

#line 469  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/moduleparam.h"
struct latch_tree_node {
   struct rb_node node[2U] ;
};

#line 211  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rbtree_latch.h"
struct mod_arch_specific {
   
};

#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/module.h"
struct module_param_attrs;

#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
   struct completion *kobj_completion ;
};

#line 48  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute *, struct module_kobject *, char *) ;
   ssize_t (*store)(struct module_attribute *, struct module_kobject *, char const *, size_t ) ;
   void (*setup)(struct module *, char const *) ;
   int (*test)(struct module *) ;
   void (*free)(struct module *) ;
};

#line 74 
struct exception_table_entry;

#line 290 
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2,
    MODULE_STATE_UNFORMED = 3
};

#line 297  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/module.h"
struct mod_tree_node {
   struct module *mod ;
   struct latch_tree_node node ;
};

#line 304 
struct module_sect_attrs;

#line 304 
struct module_notes_attrs;

#line 304 
struct tracepoint;

#line 304 
struct trace_event_call;

#line 304 
struct trace_enum_map;

#line 304  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char const *version ;
   char const *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol const *syms ;
   unsigned long const *crcs ;
   unsigned int num_syms ;
   struct mutex param_lock ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol const *gpl_syms ;
   unsigned long const *gpl_crcs ;
   struct kernel_symbol const *unused_syms ;
   unsigned long const *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol const *unused_gpl_syms ;
   unsigned long const *unused_gpl_crcs ;
   bool sig_ok ;
   bool async_probe_requested ;
   struct kernel_symbol const *gpl_future_syms ;
   unsigned long const *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   void *module_init ;
   void *module_core ;
   unsigned int init_size ;
   unsigned int core_size ;
   unsigned int init_text_size ;
   unsigned int core_text_size ;
   struct mod_tree_node mtn_core ;
   struct mod_tree_node mtn_init ;
   unsigned int init_ro_size ;
   unsigned int core_ro_size ;
   struct mod_arch_specific arch ;
   unsigned int taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   Elf64_Sym *symtab ;
   Elf64_Sym *core_symtab ;
   unsigned int num_symtab ;
   unsigned int core_num_syms ;
   char *strtab ;
   char *core_strtab ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   char *args ;
   void *percpu ;
   unsigned int percpu_size ;
   unsigned int num_tracepoints ;
   struct tracepoint * const *tracepoints_ptrs ;
   struct jump_entry *jump_entries ;
   unsigned int num_jump_entries ;
   unsigned int num_trace_bprintk_fmt ;
   char const **trace_bprintk_fmt_start ;
   struct trace_event_call **trace_events ;
   unsigned int num_trace_events ;
   struct trace_enum_map **trace_enums ;
   unsigned int num_trace_enums ;
   unsigned int num_ftrace_callsites ;
   unsigned long *ftrace_callsites ;
   bool klp_alive ;
   struct list_head source_list ;
   struct list_head target_list ;
   void (*exit)(void) ;
   atomic_t refcnt ;
   ctor_fn_t (**ctors)(void) ;
   unsigned int num_ctors ;
};

#line 14  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mod_devicetable.h"
struct pci_device_id {
   __u32 vendor ;
   __u32 device ;
   __u32 subvendor ;
   __u32 subdevice ;
   __u32 class ;
   __u32 class_mask ;
   kernel_ulong_t driver_data ;
};

#line 70  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/resource_ext.h"
struct hotplug_slot;

#line 70  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/resource_ext.h"
struct pci_slot {
   struct pci_bus *bus ;
   struct list_head list ;
   struct hotplug_slot *hotplug ;
   unsigned char number ;
   struct kobject kobj ;
};

#line 110  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
typedef int pci_power_t;

#line 137  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
typedef unsigned int pci_channel_state_t;

#line 138 
enum pci_channel_state {
    pci_channel_io_normal = 1,
    pci_channel_io_frozen = 2,
    pci_channel_io_perm_failure = 3
};

#line 163  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
typedef unsigned short pci_dev_flags_t;

#line 192  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
typedef unsigned short pci_bus_flags_t;

#line 249 
struct pcie_link_state;

#line 250 
struct pci_vpd;

#line 251 
struct pci_sriov;

#line 252 
struct pci_ats;

#line 253 
struct pci_driver;

#line 253  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
union __anonunion_1026 {
   struct pci_sriov *sriov ;
   struct pci_dev *physfn ;
};

#line 253  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
struct pci_dev {
   struct list_head bus_list ;
   struct pci_bus *bus ;
   struct pci_bus *subordinate ;
   void *sysdata ;
   struct proc_dir_entry *procent ;
   struct pci_slot *slot ;
   unsigned int devfn ;
   unsigned short vendor ;
   unsigned short device ;
   unsigned short subsystem_vendor ;
   unsigned short subsystem_device ;
   unsigned int class ;
   u8 revision ;
   u8 hdr_type ;
   u8 pcie_cap ;
   u8 msi_cap ;
   u8 msix_cap ;
   u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))) pcie_mpss : 3 ;
   u8 rom_base_reg ;
   u8 pin ;
   u16 pcie_flags_reg ;
   u8 dma_alias_devfn ;
   struct pci_driver *driver ;
   u64 dma_mask ;
   struct device_dma_parameters dma_parms ;
   pci_power_t current_state ;
   u8 pm_cap ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(5))) pme_support : 5 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) pme_interrupt : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) pme_poll : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) d1_support : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) d2_support : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) no_d1d2 : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) no_d3cold : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) d3cold_allowed : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) mmio_always_on : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) wakeup_prepared : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) runtime_d3cold : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ignore_hotplug : 1 ;
   unsigned int d3_delay ;
   unsigned int d3cold_delay ;
   struct pcie_link_state *link_state ;
   pci_channel_state_t error_state ;
   struct device dev ;
   int cfg_size ;
   unsigned int irq ;
   struct resource resource[17U] ;
   bool match_driver ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) transparent : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) multifunction : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_added : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_busmaster : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) no_msi : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) no_64bit_msi : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) block_cfg_access : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) broken_parity_status : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) irq_reroute_variant : 2 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) msi_enabled : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) msix_enabled : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ari_enabled : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_managed : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) needs_freset : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) state_saved : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_physfn : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_virtfn : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) reset_fn : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_hotplug_bridge : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) __aer_firmware_first_valid : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) __aer_firmware_first : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) broken_intx_masking : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) io_window_1k : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) irq_managed : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) has_secondary_link : 1 ;
   pci_dev_flags_t dev_flags ;
   atomic_t enable_cnt ;
   u32 saved_config_space[16U] ;
   struct hlist_head saved_cap_space ;
   struct bin_attribute *rom_attr ;
   int rom_attr_enabled ;
   struct bin_attribute *res_attr[17U] ;
   struct bin_attribute *res_attr_wc[17U] ;
   struct list_head msi_list ;
   struct attribute_group const **msi_irq_groups ;
   struct pci_vpd *vpd ;
   union __anonunion_1026 __anonCompField_pci_dev_69 ;
   struct pci_ats *ats ;
   phys_addr_t rom ;
   size_t romlen ;
   char *driver_override ;
};

#line 442 
struct pci_ops;

#line 442 
struct msi_controller;

#line 442  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
struct pci_bus {
   struct list_head node ;
   struct pci_bus *parent ;
   struct list_head children ;
   struct list_head devices ;
   struct pci_dev *self ;
   struct list_head slots ;
   struct resource *resource[4U] ;
   struct list_head resources ;
   struct resource busn_res ;
   struct pci_ops *ops ;
   struct msi_controller *msi ;
   void *sysdata ;
   struct proc_dir_entry *procdir ;
   unsigned char number ;
   unsigned char primary ;
   unsigned char max_bus_speed ;
   unsigned char cur_bus_speed ;
   char name[48U] ;
   unsigned short bridge_ctl ;
   pci_bus_flags_t bus_flags ;
   struct device *bridge ;
   struct device dev ;
   struct bin_attribute *legacy_io ;
   struct bin_attribute *legacy_mem ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_added : 1 ;
};

#line 565  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
struct pci_ops {
   void *(*map_bus)(struct pci_bus *, unsigned int , int ) ;
   int (*read)(struct pci_bus *, unsigned int , int , int , u32 *) ;
   int (*write)(struct pci_bus *, unsigned int , int , int , u32 ) ;
};

#line 593  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
struct pci_dynids {
   spinlock_t lock ;
   struct list_head list ;
};

#line 607  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
typedef unsigned int pci_ers_result_t;

#line 617  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
struct pci_error_handlers {
   pci_ers_result_t (*error_detected)(struct pci_dev *, enum pci_channel_state ) ;
   pci_ers_result_t (*mmio_enabled)(struct pci_dev *) ;
   pci_ers_result_t (*link_reset)(struct pci_dev *) ;
   pci_ers_result_t (*slot_reset)(struct pci_dev *) ;
   void (*reset_notify)(struct pci_dev *, bool ) ;
   void (*resume)(struct pci_dev *) ;
};

#line 650  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
struct pci_driver {
   struct list_head node ;
   char const *name ;
   struct pci_device_id const *id_table ;
   int (*probe)(struct pci_dev *, struct pci_device_id const *) ;
   void (*remove)(struct pci_dev *) ;
   int (*suspend)(struct pci_dev *, pm_message_t ) ;
   int (*suspend_late)(struct pci_dev *, pm_message_t ) ;
   int (*resume_early)(struct pci_dev *) ;
   int (*resume)(struct pci_dev *) ;
   void (*shutdown)(struct pci_dev *) ;
   int (*sriov_configure)(struct pci_dev *, int ) ;
   struct pci_error_handlers const *err_handler ;
   struct device_driver driver ;
   struct pci_dynids dynids ;
};

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dmapool.h"
struct dma_pool;

#line 35  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dmapool.h"
struct msix_entry {
   u32 vector ;
   u16 entry ;
};

#line 62  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/uaccess.h"
struct exception_table_entry {
   int insn ;
   int fixup ;
};

#line 646  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/if_vlan.h"
struct cyclecounter {
   cycle_t (*read)(struct cyclecounter const *) ;
   cycle_t mask ;
   u32 mult ;
   u32 shift ;
};

#line 45  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timecounter.h"
struct timecounter {
   struct cyclecounter const *cc ;
   cycle_t cycle_last ;
   u64 nsec ;
   u64 mask ;
   u64 frac ;
};

#line 154  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timecounter.h"
struct hwtstamp_config {
   int flags ;
   int tx_type ;
   int rx_filter ;
};

#line 135  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pps_kernel.h"
struct ptp_clock_time {
   __s64 sec ;
   __u32 nsec ;
   __u32 reserved ;
};

#line 56  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ptp_clock.h"
struct ptp_extts_request {
   unsigned int index ;
   unsigned int flags ;
   unsigned int rsv[2U] ;
};

#line 62  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ptp_clock.h"
struct ptp_perout_request {
   struct ptp_clock_time start ;
   struct ptp_clock_time period ;
   unsigned int index ;
   unsigned int flags ;
   unsigned int rsv[4U] ;
};

#line 83 
enum ptp_pin_function {
    PTP_PF_NONE = 0,
    PTP_PF_EXTTS = 1,
    PTP_PF_PEROUT = 2,
    PTP_PF_PHYSYNC = 3
};

#line 90  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ptp_clock.h"
struct ptp_pin_desc {
   char name[64U] ;
   unsigned int index ;
   unsigned int func ;
   unsigned int chan ;
   unsigned int rsv[5U] ;
};

#line 134 
enum ldv_32950 {
    PTP_CLK_REQ_EXTTS = 0,
    PTP_CLK_REQ_PEROUT = 1,
    PTP_CLK_REQ_PPS = 2
};

#line 140  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ptp_clock.h"
union __anonunion_1113 {
   struct ptp_extts_request extts ;
   struct ptp_perout_request perout ;
};

#line 140  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ptp_clock.h"
struct ptp_clock_request {
   enum ldv_32950 type ;
   union __anonunion_1113 __anonCompField_ptp_clock_request_96 ;
};

#line 40  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ptp_clock_kernel.h"
struct ptp_clock_info {
   struct module *owner ;
   char name[16U] ;
   s32 max_adj ;
   int n_alarm ;
   int n_ext_ts ;
   int n_per_out ;
   int n_pins ;
   int pps ;
   struct ptp_pin_desc *pin_config ;
   int (*adjfreq)(struct ptp_clock_info *, s32 ) ;
   int (*adjtime)(struct ptp_clock_info *, s64 ) ;
   int (*gettime64)(struct ptp_clock_info *, struct timespec *) ;
   int (*settime64)(struct ptp_clock_info *, struct timespec const *) ;
   int (*enable)(struct ptp_clock_info *, struct ptp_clock_request *, int ) ;
   int (*verify)(struct ptp_clock_info *, unsigned int , enum ptp_pin_function , unsigned int ) ;
};

#line 113 
struct ptp_clock;

#line 2643  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_type.h"
struct __anonstruct_read_1116 {
   __le64 buffer_addr ;
   __le32 cmd_type_len ;
   __le32 olinfo_status ;
};

#line 2643  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_type.h"
struct __anonstruct_wb_1117 {
   __le64 rsvd ;
   __le32 nxtseq_seed ;
   __le32 status ;
};

#line 2643  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_type.h"
union ixgbe_adv_tx_desc {
   struct __anonstruct_read_1116 read ;
   struct __anonstruct_wb_1117 wb ;
};

#line 2768  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_type.h"
struct __anonstruct_formatted_1126 {
   u8 vm_pool ;
   u8 flow_type ;
   __be16 vlan_id ;
   __be32 dst_ip[4U] ;
   __be32 src_ip[4U] ;
   __be16 src_port ;
   __be16 dst_port ;
   __be16 flex_bytes ;
   __be16 bkt_hash ;
};

#line 2768  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_type.h"
union ixgbe_atr_input {
   struct __anonstruct_formatted_1126 formatted ;
   __be32 dword_stream[11U] ;
};

#line 3101  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_type.h"
struct ixgbe_hw_stats {
   u64 crcerrs ;
   u64 illerrc ;
   u64 errbc ;
   u64 mspdc ;
   u64 mpctotal ;
   u64 mpc[8U] ;
   u64 mlfc ;
   u64 mrfc ;
   u64 rlec ;
   u64 lxontxc ;
   u64 lxonrxc ;
   u64 lxofftxc ;
   u64 lxoffrxc ;
   u64 pxontxc[8U] ;
   u64 pxonrxc[8U] ;
   u64 pxofftxc[8U] ;
   u64 pxoffrxc[8U] ;
   u64 prc64 ;
   u64 prc127 ;
   u64 prc255 ;
   u64 prc511 ;
   u64 prc1023 ;
   u64 prc1522 ;
   u64 gprc ;
   u64 bprc ;
   u64 mprc ;
   u64 gptc ;
   u64 gorc ;
   u64 gotc ;
   u64 rnbc[8U] ;
   u64 ruc ;
   u64 rfc ;
   u64 roc ;
   u64 rjc ;
   u64 mngprc ;
   u64 mngpdc ;
   u64 mngptc ;
   u64 tor ;
   u64 tpr ;
   u64 tpt ;
   u64 ptc64 ;
   u64 ptc127 ;
   u64 ptc255 ;
   u64 ptc511 ;
   u64 ptc1023 ;
   u64 ptc1522 ;
   u64 mptc ;
   u64 bptc ;
   u64 xec ;
   u64 rqsmr[16U] ;
   u64 tqsmr[8U] ;
   u64 qprc[16U] ;
   u64 qptc[16U] ;
   u64 qbrc[16U] ;
   u64 qbtc[16U] ;
   u64 qprdc[16U] ;
   u64 pxon2offc[8U] ;
   u64 fdirustat_add ;
   u64 fdirustat_remove ;
   u64 fdirfstat_fadd ;
   u64 fdirfstat_fremove ;
   u64 fdirmatch ;
   u64 fdirmiss ;
   u64 fccrc ;
   u64 fcoerpdc ;
   u64 fcoeprc ;
   u64 fcoeptc ;
   u64 fcoedwrc ;
   u64 fcoedwtc ;
   u64 fcoe_noddp ;
   u64 fcoe_noddp_ext_buff ;
   u64 b2ospc ;
   u64 b2ogprc ;
   u64 o2bgptc ;
   u64 o2bspc ;
};

#line 71  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_dcb.h"
enum strict_prio_type {
    prio_none = 0,
    prio_group = 1,
    prio_link = 2
};

#line 77  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_dcb.h"
struct dcb_support {
   u32 capabilities ;
   u8 traffic_classes ;
   u8 pfc_traffic_classes ;
};

#line 97  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_dcb.h"
struct tc_bw_alloc {
   u8 bwg_id ;
   u8 bwg_percent ;
   u8 link_percent ;
   u8 up_to_tc_bitmap ;
   u16 data_credits_refill ;
   u16 data_credits_max ;
   enum strict_prio_type prio_type ;
};

#line 109 
enum dcb_pfc_type {
    pfc_disabled = 0,
    pfc_enabled_full = 1,
    pfc_enabled_tx = 2,
    pfc_enabled_rx = 3
};

#line 116  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_dcb.h"
struct tc_configuration {
   struct tc_bw_alloc path[2U] ;
   enum dcb_pfc_type dcb_pfc ;
   u16 desc_credits_max ;
   u8 tc ;
};

#line 125  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_dcb.h"
struct dcb_num_tcs {
   u8 pg_tcs ;
   u8 pfc_tcs ;
};

#line 130  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_dcb.h"
struct ixgbe_dcb_config {
   struct dcb_support support ;
   struct dcb_num_tcs num_tcs ;
   struct tc_configuration tc_config[8U] ;
   u8 bw_percentage[2U][8U] ;
   bool pfc_mode_enable ;
   u32 dcb_cfg_version ;
   u32 link_speed ;
};

#line 107  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/scsi/fc/fc_fcoe.h"
struct ixgbe_fcoe_ddp {
   int len ;
   u32 err ;
   unsigned int sgc ;
   struct scatterlist *sgl ;
   dma_addr_t udp ;
   u64 *udl ;
   struct dma_pool *pool ;
};

#line 69  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_fcoe.h"
struct ixgbe_fcoe_ddp_pool {
   struct dma_pool *pool ;
   u64 noddp ;
   u64 noddp_ext_buff ;
};

#line 76  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_fcoe.h"
struct ixgbe_fcoe {
   struct ixgbe_fcoe_ddp_pool *ddp_pool ;
   atomic_t refcnt ;
   spinlock_t lock ;
   struct ixgbe_fcoe_ddp ddp[2048U] ;
   void *extra_ddp_buffer ;
   dma_addr_t extra_ddp_buffer_dma ;
   unsigned long mode ;
   u8 up ;
};

#line 143  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/busy_poll.h"
struct vf_data_storage {
   unsigned char vf_mac_addresses[6U] ;
   u16 vf_mc_hashes[30U] ;
   u16 num_vf_mc_hashes ;
   u16 default_vf_vlan_id ;
   u16 vlans_enabled ;
   bool clear_to_send ;
   bool pf_set_mac ;
   u16 pf_vlan ;
   u16 pf_qos ;
   u16 tx_rate ;
   u16 vlan_count ;
   u8 spoofchk_enabled ;
   bool rss_query_enabled ;
   unsigned int vf_api ;
};

#line 157  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe.h"
struct vf_macvlans {
   struct list_head l ;
   int vf ;
   bool free ;
   bool is_macvlan ;
   u8 vf_macvlan[6U] ;
};

#line 165  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe.h"
struct ixgbe_tx_buffer {
   union ixgbe_adv_tx_desc *next_to_watch ;
   unsigned long time_stamp ;
   struct sk_buff *skb ;
   unsigned int bytecount ;
   unsigned short gso_segs ;
   __be16 protocol ;
   dma_addr_t dma ;
   __u32 len ;
   u32 tx_flags ;
};

#line 186  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe.h"
struct ixgbe_rx_buffer {
   struct sk_buff *skb ;
   dma_addr_t dma ;
   struct page *page ;
   unsigned int page_offset ;
};

#line 193  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe.h"
struct ixgbe_queue_stats {
   u64 packets ;
   u64 bytes ;
   u64 yields ;
   u64 misses ;
   u64 cleaned ;
};

#line 202  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe.h"
struct ixgbe_tx_queue_stats {
   u64 restart_queue ;
   u64 tx_busy ;
   u64 tx_done_old ;
};

#line 209  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe.h"
struct ixgbe_rx_queue_stats {
   u64 rsc_count ;
   u64 rsc_flush ;
   u64 non_eop_descs ;
   u64 alloc_rx_page_failed ;
   u64 alloc_rx_buff_failed ;
   u64 csum_err ;
};

#line 228 
struct ixgbe_adapter;

#line 228  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe.h"
struct ixgbe_fwd_adapter {
   unsigned long active_vlans[64U] ;
   struct net_device *netdev ;
   struct ixgbe_adapter *real_adapter ;
   unsigned int tx_base_queue ;
   unsigned int rx_base_queue ;
   int pool ;
};

#line 237 
struct ixgbe_q_vector;

#line 237  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe.h"
union __anonunion_1180 {
   struct ixgbe_tx_buffer *tx_buffer_info ;
   struct ixgbe_rx_buffer *rx_buffer_info ;
};

#line 237  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe.h"
struct __anonstruct_1182 {
   u8 atr_sample_rate ;
   u8 atr_count ;
};

#line 237  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe.h"
union __anonunion_1181 {
   u16 next_to_alloc ;
   struct __anonstruct_1182 __anonCompField___anonunion_1181_118 ;
};

#line 237  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe.h"
union __anonunion_1183 {
   struct ixgbe_tx_queue_stats tx_stats ;
   struct ixgbe_rx_queue_stats rx_stats ;
};

#line 237  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe.h"
struct ixgbe_ring {
   struct ixgbe_ring *next ;
   struct ixgbe_q_vector *q_vector ;
   struct net_device *netdev ;
   struct device *dev ;
   struct ixgbe_fwd_adapter *l2_accel_priv ;
   void *desc ;
   union __anonunion_1180 __anonCompField_ixgbe_ring_117 ;
   unsigned long state ;
   u8 *tail ;
   dma_addr_t dma ;
   unsigned int size ;
   u16 count ;
   u8 queue_index ;
   u8 reg_idx ;
   u16 next_to_use ;
   u16 next_to_clean ;
   union __anonunion_1181 __anonCompField_ixgbe_ring_119 ;
   u8 dcb_tc ;
   struct ixgbe_queue_stats stats ;
   struct u64_stats_sync syncp ;
   union __anonunion_1183 __anonCompField_ixgbe_ring_120 ;
};

#line 302  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe.h"
struct ixgbe_ring_feature {
   u16 limit ;
   u16 indices ;
   u16 mask ;
   u16 offset ;
};

#line 352  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe.h"
struct ixgbe_ring_container {
   struct ixgbe_ring *ring ;
   unsigned int total_bytes ;
   unsigned int total_packets ;
   u16 work_limit ;
   u8 count ;
   u8 itr ;
};

#line 362  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe.h"
struct ixgbe_q_vector {
   struct ixgbe_adapter *adapter ;
   int cpu ;
   u16 v_idx ;
   u16 itr ;
   struct ixgbe_ring_container rx ;
   struct ixgbe_ring_container tx ;
   struct napi_struct napi ;
   cpumask_t affinity_mask ;
   int numa_node ;
   struct callback_head rcu ;
   char name[25U] ;
   atomic_t state ;
   struct ixgbe_ring ring[0U] ;
};

#line 474  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe.h"
struct hwmon_attr {
   struct device_attribute dev_attr ;
   struct ixgbe_hw *hw ;
   struct ixgbe_thermal_diode_data *sensor ;
   char name[12U] ;
};

#line 525  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe.h"
struct hwmon_buff {
   struct attribute_group group ;
   struct attribute_group const *groups[2U] ;
   struct attribute *attrs[13U] ;
   struct hwmon_attr hwmon_list[12U] ;
   unsigned int n_hwmon ;
};

#line 559  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe.h"
struct ixgbe_mac_addr {
   u8 addr[6U] ;
   u16 queue ;
   u16 state ;
};

#line 586  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe.h"
struct ixgbe_adapter {
   unsigned long active_vlans[64U] ;
   struct net_device *netdev ;
   struct pci_dev *pdev ;
   unsigned long state ;
   u32 flags ;
   u32 flags2 ;
   int num_tx_queues ;
   u16 tx_itr_setting ;
   u16 tx_work_limit ;
   int num_rx_queues ;
   u16 rx_itr_setting ;
   struct ixgbe_ring *tx_ring[64U] ;
   u64 restart_queue ;
   u64 lsc_int ;
   u32 tx_timeout_count ;
   struct ixgbe_ring *rx_ring[64U] ;
   int num_rx_pools ;
   int num_rx_queues_per_pool ;
   u64 hw_csum_rx_error ;
   u64 hw_rx_no_dma_resources ;
   u64 rsc_total_count ;
   u64 rsc_total_flush ;
   u64 non_eop_descs ;
   u32 alloc_rx_page_failed ;
   u32 alloc_rx_buff_failed ;
   struct ixgbe_q_vector *q_vector[64U] ;
   struct ieee_pfc *ixgbe_ieee_pfc ;
   struct ieee_ets *ixgbe_ieee_ets ;
   struct ixgbe_dcb_config dcb_cfg ;
   struct ixgbe_dcb_config temp_dcb_cfg ;
   u8 dcb_set_bitmap ;
   u8 dcbx_cap ;
   enum ixgbe_fc_mode last_lfc_mode ;
   int num_q_vectors ;
   int max_q_vectors ;
   struct ixgbe_ring_feature ring_feature[5U] ;
   struct msix_entry *msix_entries ;
   u32 test_icr ;
   struct ixgbe_ring test_tx_ring ;
   struct ixgbe_ring test_rx_ring ;
   struct ixgbe_hw hw ;
   u16 msg_enable ;
   struct ixgbe_hw_stats stats ;
   u64 tx_busy ;
   unsigned int tx_ring_count ;
   unsigned int rx_ring_count ;
   u32 link_speed ;
   bool link_up ;
   unsigned long link_check_timeout ;
   struct timer_list service_timer ;
   struct work_struct service_task ;
   struct hlist_head fdir_filter_list ;
   unsigned long fdir_overflow ;
   union ixgbe_atr_input fdir_mask ;
   int fdir_filter_count ;
   u32 fdir_pballoc ;
   u32 atr_sample_rate ;
   spinlock_t fdir_perfect_lock ;
   struct ixgbe_fcoe fcoe ;
   u8 *io_addr ;
   u32 wol ;
   u16 bridge_mode ;
   u16 eeprom_verh ;
   u16 eeprom_verl ;
   u16 eeprom_cap ;
   u32 interrupt_event ;
   u32 led_reg ;
   struct ptp_clock *ptp_clock ;
   struct ptp_clock_info ptp_caps ;
   struct work_struct ptp_tx_work ;
   struct sk_buff *ptp_tx_skb ;
   struct hwtstamp_config tstamp_config ;
   unsigned long ptp_tx_start ;
   unsigned long last_overflow_check ;
   unsigned long last_rx_ptp_check ;
   unsigned long last_rx_timestamp ;
   spinlock_t tmreg_lock ;
   struct cyclecounter cc ;
   struct timecounter tc ;
   u32 base_incval ;
   unsigned long active_vfs[1U] ;
   unsigned int num_vfs ;
   struct vf_data_storage *vfinfo ;
   int vf_rate_link_speed ;
   struct vf_macvlans vf_mvs ;
   struct vf_macvlans *mv_list ;
   u32 timer_event_accumulator ;
   u32 vferr_refcount ;
   struct ixgbe_mac_addr *mac_table ;
   u16 vxlan_port ;
   struct kobject *info_kobj ;
   struct hwmon_buff *ixgbe_hwmon_buff ;
   struct dentry *ixgbe_dbg_adapter ;
   u8 default_up ;
   unsigned long fwd_bitmask ;
   u8 rss_indir_tbl[512U] ;
   u32 rss_key[10U] ;
};

#line 234  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/printk.h"
struct _ddebug {
   char const *modname ;
   char const *function ;
   char const *filename ;
   char const *format ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))) lineno : 18 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))) flags : 8 ;
};

#line 3418  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_type.h"
struct ixgbe_info {
   enum ixgbe_mac_type mac ;
   s32 (*get_invariants)(struct ixgbe_hw *) ;
   struct ixgbe_mac_operations *mac_ops ;
   struct ixgbe_eeprom_operations *eeprom_ops ;
   struct ixgbe_phy_operations *phy_ops ;
   struct ixgbe_mbx_operations *mbx_ops ;
   u32 const *mvals ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/types.h"
typedef __u16 __le16;

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/types.h"
typedef __u16 __sum16;

#line 466  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernel.h"
enum system_states {
    SYSTEM_BOOTING = 0,
    SYSTEM_RUNNING = 1,
    SYSTEM_HALT = 2,
    SYSTEM_POWER_OFF = 3,
    SYSTEM_RESTART = 4
};

#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/preempt.h"
typedef int pao_T__;

#line 90  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mmzone.h"
struct free_area {
   struct list_head free_list[6U] ;
   unsigned long nr_free ;
};

#line 96 
struct pglist_data;

#line 97  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mmzone.h"
struct zone_padding {
   char x[0U] ;
};

#line 202  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mmzone.h"
struct zone_reclaim_stat {
   unsigned long recent_rotated[2U] ;
   unsigned long recent_scanned[2U] ;
};

#line 215 
struct zone;

#line 215  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mmzone.h"
struct lruvec {
   struct list_head lists[5U] ;
   struct zone_reclaim_stat reclaim_stat ;
   struct zone *zone ;
};

#line 247  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mmzone.h"
struct per_cpu_pages {
   int count ;
   int high ;
   int batch ;
   struct list_head lists[3U] ;
};

#line 260  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mmzone.h"
struct per_cpu_pageset {
   struct per_cpu_pages pcp ;
   s8 expire ;
   s8 stat_threshold ;
   s8 vm_stat_diff[39U] ;
};

#line 270 
enum zone_type {
    ZONE_DMA = 0,
    ZONE_DMA32 = 1,
    ZONE_NORMAL = 2,
    ZONE_MOVABLE = 3,
    __MAX_NR_ZONES = 4
};

#line 278  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mmzone.h"
struct zone {
   unsigned long watermark[3U] ;
   long lowmem_reserve[4U] ;
   int node ;
   unsigned int inactive_ratio ;
   struct pglist_data *zone_pgdat ;
   struct per_cpu_pageset *pageset ;
   unsigned long dirty_balance_reserve ;
   unsigned long min_unmapped_pages ;
   unsigned long min_slab_pages ;
   unsigned long zone_start_pfn ;
   unsigned long managed_pages ;
   unsigned long spanned_pages ;
   unsigned long present_pages ;
   char const *name ;
   int nr_migrate_reserve_block ;
   unsigned long nr_isolate_pageblock ;
   seqlock_t span_seqlock ;
   wait_queue_head_t *wait_table ;
   unsigned long wait_table_hash_nr_entries ;
   unsigned long wait_table_bits ;
   struct zone_padding _pad1_ ;
   struct free_area free_area[11U] ;
   unsigned long flags ;
   spinlock_t lock ;
   struct zone_padding _pad2_ ;
   spinlock_t lru_lock ;
   struct lruvec lruvec ;
   atomic_long_t inactive_age ;
   unsigned long percpu_drift_mark ;
   unsigned long compact_cached_free_pfn ;
   unsigned long compact_cached_migrate_pfn[2U] ;
   unsigned int compact_considered ;
   unsigned int compact_defer_shift ;
   int compact_order_failed ;
   bool compact_blockskip_flush ;
   struct zone_padding _pad3_ ;
   atomic_long_t vm_stat[39U] ;
};

#line 567  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mmzone.h"
struct zonelist_cache {
   unsigned short z_to_n[4096U] ;
   unsigned long fullzones[64U] ;
   unsigned long last_full_zap ;
};

#line 654  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mmzone.h"
struct zoneref {
   struct zone *zone ;
   int zone_idx ;
};

#line 667  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mmzone.h"
struct zonelist {
   struct zonelist_cache *zlcache_ptr ;
   struct zoneref _zonerefs[4097U] ;
   struct zonelist_cache zlcache ;
};

#line 705  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mmzone.h"
struct pglist_data {
   struct zone node_zones[4U] ;
   struct zonelist node_zonelists[2U] ;
   int nr_zones ;
   spinlock_t node_size_lock ;
   unsigned long node_start_pfn ;
   unsigned long node_present_pages ;
   unsigned long node_spanned_pages ;
   int node_id ;
   wait_queue_head_t kswapd_wait ;
   wait_queue_head_t pfmemalloc_wait ;
   struct task_struct *kswapd ;
   int kswapd_max_order ;
   enum zone_type classzone_idx ;
   spinlock_t numabalancing_migrate_lock ;
   unsigned long numabalancing_migrate_next_window ;
   unsigned long numabalancing_migrate_nr_pages ;
   unsigned long first_deferred_pfn ;
};

#line 773  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mmzone.h"
typedef struct pglist_data pg_data_t;

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/workqueue.h"
enum ldv_11740 {
    WORK_STRUCT_PENDING_BIT = 0,
    WORK_STRUCT_DELAYED_BIT = 1,
    WORK_STRUCT_PWQ_BIT = 2,
    WORK_STRUCT_LINKED_BIT = 3,
    WORK_STRUCT_STATIC_BIT = 4,
    WORK_STRUCT_COLOR_SHIFT = 5,
    WORK_STRUCT_COLOR_BITS = 4,
    WORK_STRUCT_PENDING = 1,
    WORK_STRUCT_DELAYED = 2,
    WORK_STRUCT_PWQ = 4,
    WORK_STRUCT_LINKED = 8,
    WORK_STRUCT_STATIC = 16,
    WORK_NR_COLORS = 15,
    WORK_NO_COLOR = 15,
    WORK_CPU_UNBOUND = 8192,
    WORK_STRUCT_FLAG_BITS = 9,
    WORK_OFFQ_FLAG_BASE = 5,
    __WORK_OFFQ_CANCELING = 5,
    WORK_OFFQ_CANCELING = 32,
    WORK_OFFQ_FLAG_BITS = 1,
    WORK_OFFQ_POOL_SHIFT = 6,
    WORK_OFFQ_LEFT = 58,
    WORK_OFFQ_POOL_BITS = 31,
    WORK_OFFQ_POOL_NONE = 2147483647,
    WORK_STRUCT_FLAG_MASK = 511,
    WORK_STRUCT_WQ_DATA_MASK = -512,
    WORK_STRUCT_NO_POOL = 137438953408,
    WORK_BUSY_PENDING = 1,
    WORK_BUSY_RUNNING = 2,
    WORKER_DESC_LEN = 24
};

#line 198  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
enum pcie_link_width {
    PCIE_LNK_WIDTH_RESRV = 0,
    PCIE_LNK_X1 = 1,
    PCIE_LNK_X2 = 2,
    PCIE_LNK_X4 = 4,
    PCIE_LNK_X8 = 8,
    PCIE_LNK_X12 = 12,
    PCIE_LNK_X16 = 16,
    PCIE_LNK_X32 = 32,
    PCIE_LNK_WIDTH_UNKNOWN = 255
};

#line 210 
enum pci_bus_speed {
    PCI_SPEED_33MHz = 0,
    PCI_SPEED_66MHz = 1,
    PCI_SPEED_66MHz_PCIX = 2,
    PCI_SPEED_100MHz_PCIX = 3,
    PCI_SPEED_133MHz_PCIX = 4,
    PCI_SPEED_66MHz_PCIX_ECC = 5,
    PCI_SPEED_100MHz_PCIX_ECC = 6,
    PCI_SPEED_133MHz_PCIX_ECC = 7,
    PCI_SPEED_66MHz_PCIX_266 = 9,
    PCI_SPEED_100MHz_PCIX_266 = 10,
    PCI_SPEED_133MHz_PCIX_266 = 11,
    AGP_UNKNOWN = 12,
    AGP_1X = 13,
    AGP_2X = 14,
    AGP_4X = 15,
    AGP_8X = 16,
    PCI_SPEED_66MHz_PCIX_533 = 17,
    PCI_SPEED_100MHz_PCIX_533 = 18,
    PCI_SPEED_133MHz_PCIX_533 = 19,
    PCIE_SPEED_2_5GT = 20,
    PCIE_SPEED_5_0GT = 21,
    PCIE_SPEED_8_0GT = 22,
    PCI_SPEED_UNKNOWN = 255
};

#line 215  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct skb_frag_struct;

#line 215  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
typedef struct skb_frag_struct skb_frag_t;

#line 216  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct __anonstruct_page_2245 {
   struct page *p ;
};

#line 216  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct skb_frag_struct {
   struct __anonstruct_page_2245 page ;
   __u32 page_offset ;
   __u32 size ;
};

#line 249  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct skb_shared_hwtstamps {
   ktime_t hwtstamp ;
};

#line 319  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct skb_shared_info {
   unsigned char nr_frags ;
   __u8 tx_flags ;
   unsigned short gso_size ;
   unsigned short gso_segs ;
   unsigned short gso_type ;
   struct sk_buff *frag_list ;
   struct skb_shared_hwtstamps hwtstamps ;
   u32 tskey ;
   __be32 ip6_frag_id ;
   atomic_t dataref ;
   void *destructor_arg ;
   skb_frag_t frags[17U] ;
};

#line 890 
enum pkt_hash_types {
    PKT_HASH_TYPE_NONE = 0,
    PKT_HASH_TYPE_L2 = 1,
    PKT_HASH_TYPE_L3 = 2,
    PKT_HASH_TYPE_L4 = 3
};

#line 508  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/xfrm.h"
enum irqreturn {
    IRQ_NONE = 0,
    IRQ_HANDLED = 1,
    IRQ_WAKE_THREAD = 2
};

#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/irqreturn.h"
typedef enum irqreturn irqreturn_t;

#line 1084  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/of.h"
struct mii_ioctl_data {
   __u16 phy_id ;
   __u16 reg_num ;
   __u16 val_in ;
   __u16 val_out ;
};

#line 321  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if_link.h"
enum macvlan_mode {
    MACVLAN_MODE_PRIVATE = 1,
    MACVLAN_MODE_VEPA = 2,
    MACVLAN_MODE_BRIDGE = 4,
    MACVLAN_MODE_PASSTHRU = 8,
    MACVLAN_MODE_SOURCE = 16
};

#line 191  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct netdev_hw_addr {
   struct list_head list ;
   unsigned char addr[32U] ;
   unsigned char type ;
   bool global_use ;
   int sync_cnt ;
   int refcount ;
   int synced ;
   struct callback_head callback_head ;
};

#line 331 
enum gro_result {
    GRO_MERGED = 0,
    GRO_MERGED_FREE = 1,
    GRO_HELD = 2,
    GRO_NORMAL = 3,
    GRO_DROP = 4
};

#line 339  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
typedef enum gro_result gro_result_t;

#line 2893 
enum skb_free_reason {
    SKB_REASON_CONSUMED = 0,
    SKB_REASON_DROPPED = 1
};

#line 193  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/vmalloc.h"
struct iphdr {
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) ihl : 4 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) version : 4 ;
   __u8 tos ;
   __be16 tot_len ;
   __be16 id ;
   __be16 frag_off ;
   __u8 ttl ;
   __u8 protocol ;
   __sum16 check ;
   __be32 saddr ;
   __be32 daddr ;
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/inet_timewait_sock.h"
struct tcphdr {
   __be16 source ;
   __be16 dest ;
   __be32 seq ;
   __be32 ack_seq ;
   __u16 __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) res1 : 4 ;
   __u16 __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) doff : 4 ;
   __u16 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) fin : 1 ;
   __u16 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) syn : 1 ;
   __u16 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) rst : 1 ;
   __u16 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) psh : 1 ;
   __u16 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ack : 1 ;
   __u16 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) urg : 1 ;
   __u16 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ece : 1 ;
   __u16 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) cwr : 1 ;
   __be16 window ;
   __sum16 check ;
   __be16 urg_ptr ;
};

#line 106  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ipv6.h"
struct ipv6hdr {
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) priority : 4 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) version : 4 ;
   __u8 flow_lbl[3U] ;
   __be16 payload_len ;
   __u8 nexthdr ;
   __u8 hop_limit ;
   struct in6_addr saddr ;
   struct in6_addr daddr ;
};

#line 63  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if_vlan.h"
struct vlan_hdr {
   __be16 h_vlan_TCI ;
   __be16 h_vlan_encapsulated_proto ;
};

#line 42  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/if_vlan.h"
struct vlan_ethhdr {
   unsigned char h_dest[6U] ;
   unsigned char h_source[6U] ;
   __be16 h_vlan_proto ;
   __be16 h_vlan_TCI ;
   __be16 h_vlan_encapsulated_proto ;
};

#line 80  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/if_vlan.h"
struct vlan_pcpu_stats {
   u64 rx_packets ;
   u64 rx_bytes ;
   u64 rx_multicast ;
   u64 tx_packets ;
   u64 tx_bytes ;
   struct u64_stats_sync syncp ;
   u32 rx_errors ;
   u32 tx_dropped ;
};

#line 126 
struct netpoll;

#line 14  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/if_macvlan.h"
struct macvlan_port;

#line 15 
struct macvtap_queue;

#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/if_macvlan.h"
struct macvlan_dev {
   struct net_device *dev ;
   struct list_head list ;
   struct hlist_node hlist ;
   struct macvlan_port *port ;
   struct net_device *lowerdev ;
   void *fwd_priv ;
   struct vlan_pcpu_stats *pcpu_stats ;
   unsigned long mc_filter[4U] ;
   netdev_features_t set_features ;
   enum macvlan_mode mode ;
   u16 flags ;
   struct macvtap_queue *taps[256U] ;
   struct list_head queue_list ;
   int numvtaps ;
   int numqueues ;
   netdev_features_t tap_features ;
   int minor ;
   int nest_level ;
   struct netpoll *netpoll ;
   unsigned int macaddr_count ;
};

#line 2657  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_type.h"
struct __anonstruct_read_2361 {
   __le64 pkt_addr ;
   __le64 hdr_addr ;
};

#line 2657  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_type.h"
struct __anonstruct_hs_rss_2365 {
   __le16 pkt_info ;
   __le16 hdr_info ;
};

#line 2657  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_type.h"
union __anonunion_lo_dword_2364 {
   __le32 data ;
   struct __anonstruct_hs_rss_2365 hs_rss ;
};

#line 2657  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_type.h"
struct __anonstruct_csum_ip_2367 {
   __le16 ip_id ;
   __le16 csum ;
};

#line 2657  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_type.h"
union __anonunion_hi_dword_2366 {
   __le32 rss ;
   struct __anonstruct_csum_ip_2367 csum_ip ;
};

#line 2657  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_type.h"
struct __anonstruct_lower_2363 {
   union __anonunion_lo_dword_2364 lo_dword ;
   union __anonunion_hi_dword_2366 hi_dword ;
};

#line 2657  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_type.h"
struct __anonstruct_upper_2368 {
   __le32 status_error ;
   __le16 length ;
   __le16 vlan ;
};

#line 2657  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_type.h"
struct __anonstruct_wb_2362 {
   struct __anonstruct_lower_2363 lower ;
   struct __anonstruct_upper_2368 upper ;
};

#line 2657  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_type.h"
union ixgbe_adv_rx_desc {
   struct __anonstruct_read_2361 read ;
   struct __anonstruct_wb_2362 wb ;
};

#line 2881  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_type.h"
struct __anonstruct_formatted_2370 {
   u8 vm_pool ;
   u8 flow_type ;
   __be16 vlan_id ;
};

#line 2881  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_type.h"
struct __anonstruct_port_2371 {
   __be16 src ;
   __be16 dst ;
};

#line 2881  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_type.h"
union ixgbe_atr_hash_dword {
   struct __anonstruct_formatted_2370 formatted ;
   __be32 ip ;
   struct __anonstruct_port_2371 port ;
   __be16 flex_bytes ;
   __be32 dword ;
};

#line 796  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe.h"
struct ixgbe_fdir_filter {
   struct hlist_node fdir_node ;
   union ixgbe_atr_input filter ;
   u16 sw_idx ;
   u16 action ;
};

#line 816  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe.h"
union __anonunion_2376 {
   struct sk_buff *head ;
   struct sk_buff *tail ;
};

#line 816  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe.h"
struct ixgbe_cb {
   union __anonunion_2376 __anonCompField_ixgbe_cb_122 ;
   dma_addr_t dma ;
   u16 append_cnt ;
   bool page_released ;
};

#line 427  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
struct ixgbe_reg_info {
   u32 ofs ;
   char *name ;
};

#line 560  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
struct my_u0 {
   u64 a ;
   u64 b ;
};

#line 7202  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
union __anonunion_hdr_2378 {
   unsigned char *network ;
   struct iphdr *ipv4 ;
   struct ipv6hdr *ipv6 ;
};

#line 2688  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_type.h"
struct ixgbe_adv_tx_context_desc {
   __le32 vlan_macip_lens ;
   __le32 seqnum_seed ;
   __le32 type_tucmd_mlhl ;
   __le32 mss_l4len_idx ;
};

#line 81  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timekeeping.h"
enum tk_offsets {
    TK_OFFS_REAL = 0,
    TK_OFFS_BOOT = 1,
    TK_OFFS_TAI = 2,
    TK_OFFS_MAX = 3
};

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/workqueue.h"
enum ldv_11988 {
    WORK_STRUCT_PENDING_BIT_0 = 0,
    WORK_STRUCT_DELAYED_BIT_0 = 1,
    WORK_STRUCT_PWQ_BIT_0 = 2,
    WORK_STRUCT_LINKED_BIT_0 = 3,
    WORK_STRUCT_STATIC_BIT_0 = 4,
    WORK_STRUCT_COLOR_SHIFT_0 = 5,
    WORK_STRUCT_COLOR_BITS_0 = 4,
    WORK_STRUCT_PENDING_0 = 1,
    WORK_STRUCT_DELAYED_0 = 2,
    WORK_STRUCT_PWQ_0 = 4,
    WORK_STRUCT_LINKED_0 = 8,
    WORK_STRUCT_STATIC_0 = 16,
    WORK_NR_COLORS_0 = 15,
    WORK_NO_COLOR_0 = 15,
    WORK_CPU_UNBOUND_0 = 8192,
    WORK_STRUCT_FLAG_BITS_0 = 9,
    WORK_OFFQ_FLAG_BASE_0 = 5,
    __WORK_OFFQ_CANCELING_0 = 5,
    WORK_OFFQ_CANCELING_0 = 32,
    WORK_OFFQ_FLAG_BITS_0 = 1,
    WORK_OFFQ_POOL_SHIFT_0 = 6,
    WORK_OFFQ_LEFT_0 = 58,
    WORK_OFFQ_POOL_BITS_0 = 31,
    WORK_OFFQ_POOL_NONE_0 = 2147483647,
    WORK_STRUCT_FLAG_MASK_0 = 511,
    WORK_STRUCT_WQ_DATA_MASK_0 = -512,
    WORK_STRUCT_NO_POOL_0 = 137438953408,
    WORK_BUSY_PENDING_0 = 1,
    WORK_BUSY_RUNNING_0 = 2,
    WORKER_DESC_LEN_0 = 24
};

#line 48  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pps_kernel.h"
struct pps_event_time {
   struct timespec ts_real ;
};

#line 141  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ptp_clock_kernel.h"
union __anonunion_3481 {
   u64 timestamp ;
   struct pps_event_time pps_times ;
};

#line 141  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ptp_clock_kernel.h"
struct ptp_clock_event {
   int type ;
   int index ;
   union __anonunion_3481 __anonCompField_ptp_clock_event_96 ;
};

#line 244  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_type.h"
union __anonunion_cmd_or_resp_3862 {
   u8 cmd_resv ;
   u8 ret_status ;
};

#line 244  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_type.h"
struct ixgbe_hic_hdr {
   u8 cmd ;
   u8 buf_len ;
   union __anonunion_cmd_or_resp_3862 cmd_or_resp ;
   u8 checksum ;
};

#line 2587  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_type.h"
struct ixgbe_hic_hdr2_req {
   u8 cmd ;
   u8 buf_lenh ;
   u8 buf_lenl ;
   u8 checksum ;
};

#line 2594  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_type.h"
struct ixgbe_hic_hdr2_rsp {
   u8 cmd ;
   u8 buf_lenl ;
   u8 buf_lenh_status ;
   u8 checksum ;
};

#line 2601  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_type.h"
union ixgbe_hic_hdr2 {
   struct ixgbe_hic_hdr2_req req ;
   struct ixgbe_hic_hdr2_rsp rsp ;
};

#line 2617  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_type.h"
struct ixgbe_hic_read_shadow_ram {
   union ixgbe_hic_hdr2 hdr ;
   u32 address ;
   u16 length ;
   u16 pad2 ;
   u16 data ;
   u16 pad3 ;
};

#line 2627  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_type.h"
struct ixgbe_hic_write_shadow_ram {
   union ixgbe_hic_hdr2 hdr ;
   __be32 address ;
   __be16 length ;
   u16 pad2 ;
   u16 data ;
   u16 pad3 ;
};

#line 2636  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_type.h"
struct ixgbe_hic_disable_rxen {
   struct ixgbe_hic_hdr hdr ;
   u8 port_number ;
   u8 pad2 ;
   u16 pad3 ;
};

#line 173  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_phy.h"
struct ixgbe_stats {
   char stat_string[32U] ;
   int type ;
   int sizeof_stat ;
   int stat_offset ;
};

#line 1267  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_ethtool.c"
struct ixgbe_reg_test {
   u16 reg ;
   u8 array_len ;
   u8 test_type ;
   u32 mask ;
   u32 write ;
};

#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef short s16;

#line 2606  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_type.h"
struct ixgbe_hic_drv_info {
   struct ixgbe_hic_hdr hdr ;
   u8 port_num ;
   u8 ver_sub ;
   u8 ver_build ;
   u8 ver_min ;
   u8 ver_maj ;
   u8 pad ;
   u16 pad2 ;
};

#line 17  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/smp.h"
struct call_single_data {
   struct llist_node llist ;
   void (*func)(void *) ;
   void *info ;
   unsigned int flags ;
};

#line 44  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/fiemap.h"
struct bio_set;

#line 45 
struct bio;

#line 46 
struct bio_integrity_payload;

#line 17  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blk_types.h"
typedef void bio_end_io_t(struct bio *, int );

#line 28  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blk_types.h"
struct bvec_iter {
   sector_t bi_sector ;
   unsigned int bi_size ;
   unsigned int bi_idx ;
   unsigned int bi_bvec_done ;
};

#line 40  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blk_types.h"
union __anonunion_7347 {
   struct bio_integrity_payload *bi_integrity ;
};

#line 40  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blk_types.h"
struct bio {
   struct bio *bi_next ;
   struct block_device *bi_bdev ;
   unsigned long bi_flags ;
   unsigned long bi_rw ;
   struct bvec_iter bi_iter ;
   unsigned int bi_phys_segments ;
   unsigned int bi_seg_front_size ;
   unsigned int bi_seg_back_size ;
   atomic_t __bi_remaining ;
   bio_end_io_t *bi_end_io ;
   void *bi_private ;
   struct io_context *bi_ioc ;
   struct cgroup_subsys_state *bi_css ;
   union __anonunion_7347 __anonCompField_bio_65 ;
   unsigned short bi_vcnt ;
   unsigned short bi_max_vecs ;
   atomic_t __bi_cnt ;
   struct bio_vec *bi_io_vec ;
   struct bio_set *bi_pool ;
   struct bio_vec bi_inline_vecs[0U] ;
};

#line 61  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/fs.h"
struct hd_geometry;

#line 1571  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct block_device_operations;

#line 163  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_dcb.h"
struct fc_frame_header {
   __u8 fh_r_ctl ;
   __u8 fh_d_id[3U] ;
   __u8 fh_cs_ctl ;
   __u8 fh_s_id[3U] ;
   __u8 fh_type ;
   __u8 fh_f_ctl[3U] ;
   __u8 fh_seq_id ;
   __u8 fh_df_ctl ;
   __be16 fh_seq_cnt ;
   __be16 fh_ox_id ;
   __be16 fh_rx_id ;
   __be32 fh_parm_offset ;
};

#line 339  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/scsi/fc/fc_fs.h"
struct fcoe_hdr {
   __u8 fcoe_ver ;
   __u8 fcoe_resvd[12U] ;
   __u8 fcoe_sof ;
};

#line 56  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/scsi/fc/fc_fcoe.h"
struct fcoe_crc_eof {
   __le32 fcoe_crc32 ;
   __u8 fcoe_eof ;
   __u8 fcoe_resvd[3U] ;
};

#line 80  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/genhd.h"
struct disk_stats {
   unsigned long sectors[2U] ;
   unsigned long ios[2U] ;
   unsigned long merges[2U] ;
   unsigned long ticks[2U] ;
   unsigned long io_ticks ;
   unsigned long time_in_queue ;
};

#line 89  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/genhd.h"
struct partition_meta_info {
   char uuid[37U] ;
   u8 volname[64U] ;
};

#line 101  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/genhd.h"
struct hd_struct {
   sector_t start_sect ;
   sector_t nr_sects ;
   seqcount_t nr_sects_seq ;
   sector_t alignment_offset ;
   unsigned int discard_alignment ;
   struct device __dev ;
   struct kobject *holder_dir ;
   int policy ;
   int partno ;
   struct partition_meta_info *info ;
   int make_it_fail ;
   unsigned long stamp ;
   atomic_t in_flight[2U] ;
   struct disk_stats *dkstats ;
   atomic_t ref ;
   struct callback_head callback_head ;
};

#line 155  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/genhd.h"
struct disk_part_tbl {
   struct callback_head callback_head ;
   int len ;
   struct hd_struct *last_lookup ;
   struct hd_struct *part[] ;
};

#line 162 
struct disk_events;

#line 163 
struct timer_rand_state;

#line 163 
struct blk_integrity;

#line 163  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/genhd.h"
struct gendisk {
   int major ;
   int first_minor ;
   int minors ;
   char disk_name[32U] ;
   char *(*devnode)(struct gendisk *, umode_t *) ;
   unsigned int events ;
   unsigned int async_events ;
   struct disk_part_tbl *part_tbl ;
   struct hd_struct part0 ;
   struct block_device_operations const *fops ;
   struct request_queue *queue ;
   void *private_data ;
   int flags ;
   struct device *driverfs_dev ;
   struct kobject *slave_dir ;
   struct timer_rand_state *random ;
   atomic_t sync_io ;
   struct disk_events *ev ;
   struct blk_integrity *integrity ;
   int node_id ;
};

#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/flex_proportions.h"
struct fprop_local_percpu {
   struct percpu_counter events ;
   unsigned int period ;
   raw_spinlock_t lock ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/backing-dev-defs.h"
typedef int congested_fn(void *, int );

#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/backing-dev-defs.h"
struct bdi_writeback_congested {
   unsigned long state ;
   atomic_t refcnt ;
   struct backing_dev_info *bdi ;
   int blkcg_id ;
   struct rb_node rb_node ;
};

#line 60  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/backing-dev-defs.h"
union __anonunion_7503 {
   struct work_struct release_work ;
   struct callback_head rcu ;
};

#line 60  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/backing-dev-defs.h"
struct bdi_writeback {
   struct backing_dev_info *bdi ;
   unsigned long state ;
   unsigned long last_old_flush ;
   struct list_head b_dirty ;
   struct list_head b_io ;
   struct list_head b_more_io ;
   struct list_head b_dirty_time ;
   spinlock_t list_lock ;
   struct percpu_counter stat[4U] ;
   struct bdi_writeback_congested *congested ;
   unsigned long bw_time_stamp ;
   unsigned long dirtied_stamp ;
   unsigned long written_stamp ;
   unsigned long write_bandwidth ;
   unsigned long avg_write_bandwidth ;
   unsigned long dirty_ratelimit ;
   unsigned long balanced_dirty_ratelimit ;
   struct fprop_local_percpu completions ;
   int dirty_exceeded ;
   spinlock_t work_lock ;
   struct list_head work_list ;
   struct delayed_work dwork ;
   struct percpu_ref refcnt ;
   struct fprop_local_percpu memcg_completions ;
   struct cgroup_subsys_state *memcg_css ;
   struct cgroup_subsys_state *blkcg_css ;
   struct list_head memcg_node ;
   struct list_head blkcg_node ;
   union __anonunion_7503 __anonCompField_bdi_writeback_121 ;
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/backing-dev-defs.h"
struct backing_dev_info {
   struct list_head bdi_list ;
   unsigned long ra_pages ;
   unsigned int capabilities ;
   congested_fn *congested_fn ;
   void *congested_data ;
   char *name ;
   unsigned int min_ratio ;
   unsigned int max_ratio ;
   unsigned int max_prop_frac ;
   atomic_long_t tot_write_bandwidth ;
   struct bdi_writeback wb ;
   struct radix_tree_root cgwb_tree ;
   struct rb_root cgwb_congested_tree ;
   atomic_t usage_cnt ;
   wait_queue_head_t wb_waitq ;
   struct device *dev ;
   struct timer_list laptop_mode_wb_timer ;
   struct dentry *debug_dir ;
   struct dentry *debug_stats ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mempool.h"
typedef void *mempool_alloc_t(gfp_t , void *);

#line 12  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mempool.h"
typedef void mempool_free_t(void *, void *);

#line 13  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mempool.h"
struct mempool_s {
   spinlock_t lock ;
   int min_nr ;
   int curr_nr ;
   void **elements ;
   void *pool_data ;
   mempool_alloc_t *alloc ;
   mempool_free_t *free ;
   wait_queue_head_t wait ;
};

#line 24  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mempool.h"
typedef struct mempool_s mempool_t;

#line 78  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mempool.h"
union __anonunion_7504 {
   struct list_head q_node ;
   struct kmem_cache *__rcu_icq_cache ;
};

#line 78  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mempool.h"
union __anonunion_7505 {
   struct hlist_node ioc_node ;
   struct callback_head __rcu_head ;
};

#line 78  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mempool.h"
struct io_cq {
   struct request_queue *q ;
   struct io_context *ioc ;
   union __anonunion_7504 __anonCompField_io_cq_122 ;
   union __anonunion_7505 __anonCompField_io_cq_123 ;
   unsigned int flags ;
};

#line 92  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/iocontext.h"
struct io_context {
   atomic_long_t refcount ;
   atomic_t active_ref ;
   atomic_t nr_tasks ;
   spinlock_t lock ;
   unsigned short ioprio ;
   int nr_batch_requests ;
   unsigned long last_waited ;
   struct radix_tree_root icq_tree ;
   struct io_cq *icq_hint ;
   struct hlist_head icq_list ;
   struct work_struct release_work ;
};

#line 326  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bio.h"
struct bio_integrity_payload {
   struct bio *bip_bio ;
   struct bvec_iter bip_iter ;
   bio_end_io_t *bip_end_io ;
   unsigned short bip_slab ;
   unsigned short bip_vcnt ;
   unsigned short bip_max_vcnt ;
   unsigned short bip_flags ;
   struct work_struct bip_work ;
   struct bio_vec *bip_vec ;
   struct bio_vec bip_inline_vecs[0U] ;
};

#line 541  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bio.h"
struct bio_list {
   struct bio *head ;
   struct bio *tail ;
};

#line 662  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bio.h"
struct bio_set {
   struct kmem_cache *bio_slab ;
   unsigned int front_pad ;
   mempool_t *bio_pool ;
   mempool_t *bvec_pool ;
   mempool_t *bio_integrity_pool ;
   mempool_t *bvec_integrity_pool ;
   spinlock_t rescue_lock ;
   struct bio_list rescue_list ;
   struct work_struct rescue_work ;
   struct workqueue_struct *rescue_workqueue ;
};

#line 64  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/bsg.h"
struct bsg_class_device {
   struct device *class_dev ;
   struct device *parent ;
   int minor ;
   struct request_queue *queue ;
   struct kref ref ;
   void (*release)(struct device *) ;
};

#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bsg.h"
struct elevator_queue;

#line 23 
struct blk_trace;

#line 24 
struct request;

#line 26 
struct bsg_job;

#line 27 
struct blkcg_gq;

#line 28 
struct blk_flush_queue;

#line 49  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blkdev.h"
typedef void rq_end_io_fn(struct request *, int );

#line 50  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blkdev.h"
struct request_list {
   struct request_queue *q ;
   struct blkcg_gq *blkg ;
   int count[2U] ;
   int starved[2U] ;
   mempool_t *rq_pool ;
   wait_queue_head_t wait[2U] ;
   unsigned int flags ;
};

#line 75  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blkdev.h"
union __anonunion_7506 {
   struct call_single_data csd ;
   unsigned long fifo_time ;
};

#line 75 
struct blk_mq_ctx;

#line 75  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blkdev.h"
union __anonunion_7507 {
   struct hlist_node hash ;
   struct list_head ipi_list ;
};

#line 75  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blkdev.h"
union __anonunion_7508 {
   struct rb_node rb_node ;
   void *completion_data ;
};

#line 75  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blkdev.h"
struct __anonstruct_elv_7510 {
   struct io_cq *icq ;
   void *priv[2U] ;
};

#line 75  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blkdev.h"
struct __anonstruct_flush_7511 {
   unsigned int seq ;
   struct list_head list ;
   rq_end_io_fn *saved_end_io ;
};

#line 75  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blkdev.h"
union __anonunion_7509 {
   struct __anonstruct_elv_7510 elv ;
   struct __anonstruct_flush_7511 flush ;
};

#line 75  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blkdev.h"
struct request {
   struct list_head queuelist ;
   union __anonunion_7506 __anonCompField_request_124 ;
   struct request_queue *q ;
   struct blk_mq_ctx *mq_ctx ;
   u64 cmd_flags ;
   unsigned int cmd_type ;
   unsigned long atomic_flags ;
   int cpu ;
   unsigned int __data_len ;
   sector_t __sector ;
   struct bio *bio ;
   struct bio *biotail ;
   union __anonunion_7507 __anonCompField_request_125 ;
   union __anonunion_7508 __anonCompField_request_126 ;
   union __anonunion_7509 __anonCompField_request_127 ;
   struct gendisk *rq_disk ;
   struct hd_struct *part ;
   unsigned long start_time ;
   struct request_list *rl ;
   unsigned long long start_time_ns ;
   unsigned long long io_start_time_ns ;
   unsigned short nr_phys_segments ;
   unsigned short nr_integrity_segments ;
   unsigned short ioprio ;
   void *special ;
   int tag ;
   int errors ;
   unsigned char __cmd[16U] ;
   unsigned char *cmd ;
   unsigned short cmd_len ;
   unsigned int extra_len ;
   unsigned int sense_len ;
   unsigned int resid_len ;
   void *sense ;
   unsigned long deadline ;
   struct list_head timeout_list ;
   unsigned int timeout ;
   int retries ;
   rq_end_io_fn *end_io ;
   void *end_io_data ;
   struct request *next_rq ;
};

#line 113  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/hashtable.h"
struct elevator_type;

#line 12  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/elevator.h"
typedef int elevator_merge_fn(struct request_queue *, struct request **, struct bio *);

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/elevator.h"
typedef void elevator_merge_req_fn(struct request_queue *, struct request *, struct request *);

#line 17  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/elevator.h"
typedef void elevator_merged_fn(struct request_queue *, struct request *, int );

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/elevator.h"
typedef int elevator_allow_merge_fn(struct request_queue *, struct request *, struct bio *);

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/elevator.h"
typedef void elevator_bio_merged_fn(struct request_queue *, struct request *, struct bio *);

#line 24  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/elevator.h"
typedef int elevator_dispatch_fn(struct request_queue *, int );

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/elevator.h"
typedef void elevator_add_req_fn(struct request_queue *, struct request *);

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/elevator.h"
typedef struct request *elevator_request_list_fn(struct request_queue *, struct request *);

#line 28  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/elevator.h"
typedef void elevator_completed_req_fn(struct request_queue *, struct request *);

#line 29  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/elevator.h"
typedef int elevator_may_queue_fn(struct request_queue *, int );

#line 31  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/elevator.h"
typedef void elevator_init_icq_fn(struct io_cq *);

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/elevator.h"
typedef void elevator_exit_icq_fn(struct io_cq *);

#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/elevator.h"
typedef int elevator_set_req_fn(struct request_queue *, struct request *, struct bio *, gfp_t );

#line 35  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/elevator.h"
typedef void elevator_put_req_fn(struct request *);

#line 36  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/elevator.h"
typedef void elevator_activate_req_fn(struct request_queue *, struct request *);

#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/elevator.h"
typedef void elevator_deactivate_req_fn(struct request_queue *, struct request *);

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/elevator.h"
typedef int elevator_init_fn(struct request_queue *, struct elevator_type *);

#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/elevator.h"
typedef void elevator_exit_fn(struct elevator_queue *);

#line 42  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/elevator.h"
typedef void elevator_registered_fn(struct request_queue *);

#line 43  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/elevator.h"
struct elevator_ops {
   elevator_merge_fn *elevator_merge_fn ;
   elevator_merged_fn *elevator_merged_fn ;
   elevator_merge_req_fn *elevator_merge_req_fn ;
   elevator_allow_merge_fn *elevator_allow_merge_fn ;
   elevator_bio_merged_fn *elevator_bio_merged_fn ;
   elevator_dispatch_fn *elevator_dispatch_fn ;
   elevator_add_req_fn *elevator_add_req_fn ;
   elevator_activate_req_fn *elevator_activate_req_fn ;
   elevator_deactivate_req_fn *elevator_deactivate_req_fn ;
   elevator_completed_req_fn *elevator_completed_req_fn ;
   elevator_request_list_fn *elevator_former_req_fn ;
   elevator_request_list_fn *elevator_latter_req_fn ;
   elevator_init_icq_fn *elevator_init_icq_fn ;
   elevator_exit_icq_fn *elevator_exit_icq_fn ;
   elevator_set_req_fn *elevator_set_req_fn ;
   elevator_put_req_fn *elevator_put_req_fn ;
   elevator_may_queue_fn *elevator_may_queue_fn ;
   elevator_init_fn *elevator_init_fn ;
   elevator_exit_fn *elevator_exit_fn ;
   elevator_registered_fn *elevator_registered_fn ;
};

#line 74  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/elevator.h"
struct elv_fs_entry {
   struct attribute attr ;
   ssize_t (*show)(struct elevator_queue *, char *) ;
   ssize_t (*store)(struct elevator_queue *, char const *, size_t ) ;
};

#line 82  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/elevator.h"
struct elevator_type {
   struct kmem_cache *icq_cache ;
   struct elevator_ops ops ;
   size_t icq_size ;
   size_t icq_align ;
   struct elv_fs_entry *elevator_attrs ;
   char elevator_name[16U] ;
   struct module *elevator_owner ;
   char icq_cache_name[21U] ;
   struct list_head list ;
};

#line 103  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/elevator.h"
struct elevator_queue {
   struct elevator_type *type ;
   void *elevator_data ;
   struct kobject kobj ;
   struct mutex sysfs_lock ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) registered : 1 ;
   struct hlist_head hash[64U] ;
};

#line 210  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blkdev.h"
typedef void request_fn_proc(struct request_queue *);

#line 211  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blkdev.h"
typedef void make_request_fn(struct request_queue *, struct bio *);

#line 212  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blkdev.h"
typedef int prep_rq_fn(struct request_queue *, struct request *);

#line 213  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blkdev.h"
typedef void unprep_rq_fn(struct request_queue *, struct request *);

#line 214  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blkdev.h"
struct bvec_merge_data {
   struct block_device *bi_bdev ;
   sector_t bi_sector ;
   unsigned int bi_size ;
   unsigned long bi_rw ;
};

#line 222  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blkdev.h"
typedef int merge_bvec_fn(struct request_queue *, struct bvec_merge_data *, struct bio_vec *);

#line 224  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blkdev.h"
typedef void softirq_done_fn(struct request *);

#line 225  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blkdev.h"
typedef int dma_drain_needed_fn(struct request *);

#line 226  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blkdev.h"
typedef int lld_busy_fn(struct request_queue *);

#line 227  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blkdev.h"
typedef int bsg_job_fn(struct bsg_job *);

#line 228 
enum blk_eh_timer_return {
    BLK_EH_NOT_HANDLED = 0,
    BLK_EH_HANDLED = 1,
    BLK_EH_RESET_TIMER = 2
};

#line 235  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blkdev.h"
typedef enum blk_eh_timer_return rq_timed_out_fn(struct request *);

#line 241  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blkdev.h"
struct blk_queue_tag {
   struct request **tag_index ;
   unsigned long *tag_map ;
   int busy ;
   int max_depth ;
   int real_max_depth ;
   atomic_t refcnt ;
   int alloc_policy ;
   int next_tag ;
};

#line 252  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blkdev.h"
struct queue_limits {
   unsigned long bounce_pfn ;
   unsigned long seg_boundary_mask ;
   unsigned int max_hw_sectors ;
   unsigned int chunk_sectors ;
   unsigned int max_sectors ;
   unsigned int max_segment_size ;
   unsigned int physical_block_size ;
   unsigned int alignment_offset ;
   unsigned int io_min ;
   unsigned int io_opt ;
   unsigned int max_discard_sectors ;
   unsigned int max_write_same_sectors ;
   unsigned int discard_granularity ;
   unsigned int discard_alignment ;
   unsigned short logical_block_size ;
   unsigned short max_segments ;
   unsigned short max_integrity_segments ;
   unsigned char misaligned ;
   unsigned char discard_misaligned ;
   unsigned char cluster ;
   unsigned char discard_zeroes_data ;
   unsigned char raid_partial_stripes_expensive ;
};

#line 285 
struct blk_mq_ops;

#line 285 
struct blk_mq_hw_ctx;

#line 285 
struct throtl_data;

#line 285 
struct blk_mq_tag_set;

#line 285  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blkdev.h"
struct request_queue {
   struct list_head queue_head ;
   struct request *last_merge ;
   struct elevator_queue *elevator ;
   int nr_rqs[2U] ;
   int nr_rqs_elvpriv ;
   struct request_list root_rl ;
   request_fn_proc *request_fn ;
   make_request_fn *make_request_fn ;
   prep_rq_fn *prep_rq_fn ;
   unprep_rq_fn *unprep_rq_fn ;
   merge_bvec_fn *merge_bvec_fn ;
   softirq_done_fn *softirq_done_fn ;
   rq_timed_out_fn *rq_timed_out_fn ;
   dma_drain_needed_fn *dma_drain_needed ;
   lld_busy_fn *lld_busy_fn ;
   struct blk_mq_ops *mq_ops ;
   unsigned int *mq_map ;
   struct blk_mq_ctx *queue_ctx ;
   unsigned int nr_queues ;
   struct blk_mq_hw_ctx **queue_hw_ctx ;
   unsigned int nr_hw_queues ;
   sector_t end_sector ;
   struct request *boundary_rq ;
   struct delayed_work delay_work ;
   struct backing_dev_info backing_dev_info ;
   void *queuedata ;
   unsigned long queue_flags ;
   int id ;
   gfp_t bounce_gfp ;
   spinlock_t __queue_lock ;
   spinlock_t *queue_lock ;
   struct kobject kobj ;
   struct kobject mq_kobj ;
   struct device *dev ;
   int rpm_status ;
   unsigned int nr_pending ;
   unsigned long nr_requests ;
   unsigned int nr_congestion_on ;
   unsigned int nr_congestion_off ;
   unsigned int nr_batching ;
   unsigned int dma_drain_size ;
   void *dma_drain_buffer ;
   unsigned int dma_pad_mask ;
   unsigned int dma_alignment ;
   struct blk_queue_tag *queue_tags ;
   struct list_head tag_busy_list ;
   unsigned int nr_sorted ;
   unsigned int in_flight[2U] ;
   unsigned int request_fn_active ;
   unsigned int rq_timeout ;
   struct timer_list timeout ;
   struct list_head timeout_list ;
   struct list_head icq_list ;
   unsigned long blkcg_pols[1U] ;
   struct blkcg_gq *root_blkg ;
   struct list_head blkg_list ;
   struct queue_limits limits ;
   unsigned int sg_timeout ;
   unsigned int sg_reserved_size ;
   int node ;
   struct blk_trace *blk_trace ;
   unsigned int flush_flags ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) flush_not_queueable : 1 ;
   struct blk_flush_queue *fq ;
   struct list_head requeue_list ;
   spinlock_t requeue_lock ;
   struct work_struct requeue_work ;
   struct mutex sysfs_lock ;
   int bypass_depth ;
   atomic_t mq_freeze_depth ;
   bsg_job_fn *bsg_job_fn ;
   int bsg_job_size ;
   struct bsg_class_device bsg_dev ;
   struct throtl_data *td ;
   struct callback_head callback_head ;
   wait_queue_head_t mq_freeze_wq ;
   struct percpu_ref mq_usage_counter ;
   struct list_head all_q_node ;
   struct blk_mq_tag_set *tag_set ;
   struct list_head tag_set_list ;
};

#line 1020  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blkdev.h"
struct blk_plug {
   struct list_head list ;
   struct list_head mq_list ;
   struct list_head cb_list ;
};

#line 1398  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blkdev.h"
struct blk_integrity_iter {
   void *prot_buf ;
   void *data_buf ;
   sector_t seed ;
   unsigned int data_size ;
   unsigned short interval ;
   char const *disk_name ;
};

#line 1427  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blkdev.h"
typedef int integrity_processing_fn(struct blk_integrity_iter *);

#line 1428  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blkdev.h"
struct blk_integrity {
   integrity_processing_fn *generate_fn ;
   integrity_processing_fn *verify_fn ;
   unsigned short flags ;
   unsigned short tuple_size ;
   unsigned short interval ;
   unsigned short tag_size ;
   char const *name ;
   struct kobject kobj ;
};

#line 1482  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blkdev.h"
struct block_device_operations {
   int (*open)(struct block_device *, fmode_t ) ;
   void (*release)(struct gendisk *, fmode_t ) ;
   int (*rw_page)(struct block_device *, sector_t , struct page *, int ) ;
   int (*ioctl)(struct block_device *, fmode_t , unsigned int , unsigned long ) ;
   int (*compat_ioctl)(struct block_device *, fmode_t , unsigned int , unsigned long ) ;
   long (*direct_access)(struct block_device *, sector_t , void **, unsigned long *, long ) ;
   unsigned int (*check_events)(struct gendisk *, unsigned int ) ;
   int (*media_changed)(struct gendisk *) ;
   void (*unlock_native_capacity)(struct gendisk *) ;
   int (*revalidate_disk)(struct gendisk *) ;
   int (*getgeo)(struct block_device *, struct hd_geometry *) ;
   void (*swap_slot_free_notify)(struct block_device *, unsigned long ) ;
   struct module *owner ;
};

#line 100  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/transport_class.h"
struct blk_mq_tags;

#line 101  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/transport_class.h"
struct blk_mq_cpu_notifier {
   struct list_head list ;
   void *data ;
   int (*notify)(void *, unsigned long , unsigned int ) ;
};

#line 14  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blk-mq.h"
struct blk_align_bitmap;

#line 14  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blk-mq.h"
struct blk_mq_ctxmap {
   unsigned int size ;
   unsigned int bits_per_word ;
   struct blk_align_bitmap *map ;
};

#line 20  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blk-mq.h"
struct __anonstruct_7513 {
   spinlock_t lock ;
   struct list_head dispatch ;
};

#line 20  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blk-mq.h"
struct blk_mq_hw_ctx {
   struct __anonstruct_7513 __anonCompField_blk_mq_hw_ctx_128 ;
   unsigned long state ;
   struct delayed_work run_work ;
   struct delayed_work delay_work ;
   cpumask_var_t cpumask ;
   int next_cpu ;
   int next_cpu_batch ;
   unsigned long flags ;
   struct request_queue *queue ;
   struct blk_flush_queue *fq ;
   void *driver_data ;
   struct blk_mq_ctxmap ctx_map ;
   unsigned int nr_ctx ;
   struct blk_mq_ctx **ctxs ;
   atomic_t wait_index ;
   struct blk_mq_tags *tags ;
   unsigned long queued ;
   unsigned long run ;
   unsigned long dispatched[10U] ;
   unsigned int numa_node ;
   unsigned int queue_num ;
   atomic_t nr_active ;
   struct blk_mq_cpu_notifier cpu_notifier ;
   struct kobject kobj ;
};

#line 63  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blk-mq.h"
struct blk_mq_tag_set {
   struct blk_mq_ops *ops ;
   unsigned int nr_hw_queues ;
   unsigned int queue_depth ;
   unsigned int reserved_tags ;
   unsigned int cmd_size ;
   int numa_node ;
   unsigned int timeout ;
   unsigned int flags ;
   void *driver_data ;
   struct blk_mq_tags **tags ;
   struct mutex tag_list_lock ;
   struct list_head tag_list ;
};

#line 80  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blk-mq.h"
struct blk_mq_queue_data {
   struct request *rq ;
   struct list_head *list ;
   bool last ;
};

#line 87  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blk-mq.h"
typedef int queue_rq_fn(struct blk_mq_hw_ctx *, struct blk_mq_queue_data const *);

#line 88  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blk-mq.h"
typedef struct blk_mq_hw_ctx *map_queue_fn(struct request_queue *, int const );

#line 89  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blk-mq.h"
typedef enum blk_eh_timer_return timeout_fn(struct request *, bool );

#line 90  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blk-mq.h"
typedef int init_hctx_fn(struct blk_mq_hw_ctx *, void *, unsigned int );

#line 91  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blk-mq.h"
typedef void exit_hctx_fn(struct blk_mq_hw_ctx *, unsigned int );

#line 92  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blk-mq.h"
typedef int init_request_fn(void *, struct request *, unsigned int , unsigned int , unsigned int );

#line 94  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blk-mq.h"
typedef void exit_request_fn(void *, struct request *, unsigned int , unsigned int );

#line 100  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blk-mq.h"
struct blk_mq_ops {
   queue_rq_fn *queue_rq ;
   map_queue_fn *map_queue ;
   timeout_fn *timeout ;
   softirq_done_fn *complete ;
   init_hctx_fn *init_hctx ;
   exit_hctx_fn *exit_hctx ;
   init_request_fn *init_request ;
   exit_request_fn *exit_request ;
};

#line 62  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memory.h"
struct ldv_list_element {
   void *data ;
   struct ldv_list_element *next ;
};

#line 26  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memlist.h"
typedef struct ldv_list_element *ldv_list_ptr;

#line 41  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.h"
struct device_private {
   void *driver_data ;
};

#line 54  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kthread.h"
struct kthread_work;

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kthread.h"
struct kthread_worker {
   spinlock_t lock ;
   struct list_head work_list ;
   struct task_struct *task ;
   struct kthread_work *current_work ;
};

#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kthread.h"
struct kthread_work {
   struct list_head node ;
   void (*func)(struct kthread_work *) ;
   struct kthread_worker *worker ;
};

#line 380  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/scatterlist.h"
struct dma_chan;

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spi/spi.h"
struct spi_master;

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spi/spi.h"
struct spi_device {
   struct device dev ;
   struct spi_master *master ;
   u32 max_speed_hz ;
   u8 chip_select ;
   u8 bits_per_word ;
   u16 mode ;
   int irq ;
   void *controller_state ;
   void *controller_data ;
   char modalias[32U] ;
   int cs_gpio ;
};

#line 151 
struct spi_message;

#line 152 
struct spi_transfer;

#line 205  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spi/spi.h"
struct spi_master {
   struct device dev ;
   struct list_head list ;
   s16 bus_num ;
   u16 num_chipselect ;
   u16 dma_alignment ;
   u16 mode_bits ;
   u32 bits_per_word_mask ;
   u32 min_speed_hz ;
   u32 max_speed_hz ;
   u16 flags ;
   spinlock_t bus_lock_spinlock ;
   struct mutex bus_lock_mutex ;
   bool bus_lock_flag ;
   int (*setup)(struct spi_device *) ;
   int (*transfer)(struct spi_device *, struct spi_message *) ;
   void (*cleanup)(struct spi_device *) ;
   bool (*can_dma)(struct spi_master *, struct spi_device *, struct spi_transfer *) ;
   bool queued ;
   struct kthread_worker kworker ;
   struct task_struct *kworker_task ;
   struct kthread_work pump_messages ;
   spinlock_t queue_lock ;
   struct list_head queue ;
   struct spi_message *cur_msg ;
   bool idling ;
   bool busy ;
   bool running ;
   bool rt ;
   bool auto_runtime_pm ;
   bool cur_msg_prepared ;
   bool cur_msg_mapped ;
   struct completion xfer_completion ;
   size_t max_dma_len ;
   int (*prepare_transfer_hardware)(struct spi_master *) ;
   int (*transfer_one_message)(struct spi_master *, struct spi_message *) ;
   int (*unprepare_transfer_hardware)(struct spi_master *) ;
   int (*prepare_message)(struct spi_master *, struct spi_message *) ;
   int (*unprepare_message)(struct spi_master *, struct spi_message *) ;
   void (*set_cs)(struct spi_device *, bool ) ;
   int (*transfer_one)(struct spi_master *, struct spi_device *, struct spi_transfer *) ;
   void (*handle_err)(struct spi_master *, struct spi_message *) ;
   int *cs_gpios ;
   struct dma_chan *dma_tx ;
   struct dma_chan *dma_rx ;
   void *dummy_rx ;
   void *dummy_tx ;
};

#line 506  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spi/spi.h"
struct spi_transfer {
   void const *tx_buf ;
   void *rx_buf ;
   unsigned int len ;
   dma_addr_t tx_dma ;
   dma_addr_t rx_dma ;
   struct sg_table tx_sg ;
   struct sg_table rx_sg ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) cs_change : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))) tx_nbits : 3 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))) rx_nbits : 3 ;
   u8 bits_per_word ;
   u16 delay_usecs ;
   u32 speed_hz ;
   struct list_head transfer_list ;
};

#line 630  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spi/spi.h"
struct spi_message {
   struct list_head transfers ;
   struct spi_device *spi ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_dma_mapped : 1 ;
   void (*complete)(void *) ;
   void *context ;
   unsigned int frame_length ;
   unsigned int actual_length ;
   int status ;
   struct list_head queue ;
   void *state ;
};

#line 21  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/thread.h"
typedef unsigned long pthread_t;

#line 22  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/thread.h"
union pthread_attr_t {
   char __size[56U] ;
   long __align ;
};

#line 29  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/thread.h"
typedef union pthread_attr_t pthread_attr_t;

#line 3835  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct ldv_struct_character_driver_scenario_15 {
   struct file_operations *arg0 ;
   int signal_pending ;
};

#line 22  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/emg/environment_model.c"
struct ldv_struct_free_irq_6 {
   int arg0 ;
   int signal_pending ;
};

#line 27  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/emg/environment_model.c"
struct ldv_struct_interrupt_scenario_14 {
   enum irqreturn (*arg2)(int , void *) ;
   enum irqreturn (*arg1)(int , void *) ;
   void *arg3 ;
   int arg0 ;
   int signal_pending ;
};

#line 35  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/emg/environment_model.c"
struct ldv_struct_pci_scenario_17 {
   struct pci_driver *arg0 ;
   int signal_pending ;
};

#line 40  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/emg/environment_model.c"
struct ldv_struct_random_allocationless_scenario_19 {
   struct net_device *arg0 ;
   int signal_pending ;
};

#line 45  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/emg/environment_model.c"
struct ldv_struct_timer_scenario_21 {
   struct timer_list *arg0 ;
   int signal_pending ;
};

#line 7  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/fvtp/.tmp_ixgbe_dcb_82599.c"
void ldv_inline_asm(void);


#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/io.h"
__inline static void writel(unsigned int val, void volatile *addr)
{
  
#line 68 
  ldv_inline_asm();
  
#line 69 
  return;
}


#line 145  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.h"
__inline static bool ixgbe_removed(void *addr)
{
  bool __retres;
  
#line 147 
  __retres = (_Bool)((long)(addr == (void *)0) != 0L);
  
#line 147 
  return __retres;
}


#line 150  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.h"
__inline static void ixgbe_write_reg(struct ixgbe_hw *hw, u32 reg, u32 value)
{
  u8 * volatile *tmp;
  bool tmp_0;
  {
    
#line 152 
    u8 *__var = (u8 *)0U;
    
#line 152 
    tmp = (u8 * volatile *)(& hw->hw_addr);
  }
  
#line 152 
  u8 *reg_addr = *tmp;
  
#line 154 
  tmp_0 = ixgbe_removed((void *)reg_addr);
  
#line 154 
  if ((int)tmp_0 != 0) 
#line 155 
                       goto return_label; else ;
  
#line 156 
  writel(value,(void volatile *)(reg_addr + reg));
  return_label: 
#line 157 
                return;
}


#line 179 
u32 ixgbe_read_reg(struct ixgbe_hw *hw, u32 reg);


#line 98  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_dcb_82599.h"
s32 ixgbe_dcb_config_pfc_82599(struct ixgbe_hw *hw, u8 pfc_en, u8 *prio_tc);


#line 101 
s32 ixgbe_dcb_config_rx_arbiter_82599(struct ixgbe_hw *hw, u16 *refill, u16 *max, u8 *bwg_id, u8 *prio_type, u8 *prio_tc);


#line 108 
s32 ixgbe_dcb_config_tx_desc_arbiter_82599(struct ixgbe_hw *hw, u16 *refill, u16 *max, u8 *bwg_id, u8 *prio_type);


#line 114 
s32 ixgbe_dcb_config_tx_data_arbiter_82599(struct ixgbe_hw *hw, u16 *refill, u16 *max, u8 *bwg_id, u8 *prio_type, u8 *prio_tc);


#line 121 
s32 ixgbe_dcb_hw_config_82599(struct ixgbe_hw *hw, u8 pfc_en, u16 *refill, u16 *max, u8 *bwg_id, u8 *prio_type, u8 *prio_tc);


#line 44  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_dcb_82599.c"
s32 ixgbe_dcb_config_rx_arbiter_82599(struct ixgbe_hw *hw, u16 *refill, u16 *max, u8 *bwg_id, u8 *prio_type, u8 *prio_tc)
{
  s32 __retres;
  
#line 51 
  u32 reg = 0U;
  
#line 52 
  u32 credit_refill = 0U;
  
#line 53 
  u32 credit_max = 0U;
  
#line 54 
  u8 i = (unsigned char)0U;
  
#line 60 
  reg = 70U;
  
#line 61 
  ixgbe_write_reg(hw,9264U,reg);
  
#line 64 
  reg = 0U;
  
#line 65 
  i = (unsigned char)0U;
  
#line 65 
  goto ldv_54615;
  ldv_54614: 
#line 66 
  ;
  
#line 66 
  reg = (unsigned int)((int)*(prio_tc + (int)i) << (int)i * 3) | reg;
  
#line 65 
  i = (u8)((int)i + 1);
  ldv_54615: 
#line 66 
  ;
  
#line 65 
  if ((unsigned int)i <= 7U) 
#line 67 
                             goto ldv_54614; else 
#line 70 
                                                  goto ldv_54616;
  ldv_54616: 
#line 71 
  ;
  
#line 67 
  ixgbe_write_reg(hw,12320U,reg);
  
#line 70 
  i = (unsigned char)0U;
  
#line 70 
  goto ldv_54618;
  ldv_54617: 
#line 71 
  ;
  
#line 71 
  credit_refill = (unsigned int)*(refill + (int)i);
  
#line 72 
  credit_max = (unsigned int)*(max + (int)i);
  
#line 73 
  reg = (credit_max << 12) | credit_refill;
  
#line 75 
  reg = ((unsigned int)*(bwg_id + (int)i) << 9) | reg;
  
#line 77 
  if ((unsigned int)*(prio_type + (int)i) == 2U) 
#line 78 
                                                 reg |= 2147483648U; else ;
  
#line 80 
  ixgbe_write_reg(hw,(unsigned int)(((int)i + 2128) * 4),reg);
  
#line 70 
  i = (u8)((int)i + 1);
  ldv_54618: 
#line 71 
  ;
  
#line 70 
  if ((unsigned int)i <= 7U) 
#line 72 
                             goto ldv_54617; else 
#line 75 
                                                  goto ldv_54619;
  ldv_54619: 
#line 76 
  ;
  
#line 87 
  reg = 6U;
  
#line 88 
  ixgbe_write_reg(hw,9264U,reg);
  
#line 90 
  __retres = 0;
  
#line 90 
  return __retres;
}


#line 103  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_dcb_82599.c"
s32 ixgbe_dcb_config_tx_desc_arbiter_82599(struct ixgbe_hw *hw, u16 *refill, u16 *max, u8 *bwg_id, u8 *prio_type)
{
  s32 __retres;
  u32 reg;
  u32 max_credits;
  u8 i;
  
#line 113 
  i = (unsigned char)0U;
  
#line 113 
  goto ldv_54631;
  ldv_54630: 
#line 114 
  ;
  
#line 114 
  ixgbe_write_reg(hw,18692U,(unsigned int)i);
  
#line 115 
  ixgbe_write_reg(hw,18696U,0U);
  
#line 113 
  i = (u8)((int)i + 1);
  ldv_54631: 
#line 114 
  ;
  
#line 113 
  if ((int)i >= 0) 
#line 115 
                   goto ldv_54630; else 
#line 118 
                                        goto ldv_54632;
  ldv_54632: 
#line 119 
  ;
  
#line 119 
  i = (unsigned char)0U;
  
#line 119 
  goto ldv_54634;
  ldv_54633: 
#line 120 
  ;
  
#line 120 
  max_credits = (unsigned int)*(max + (int)i);
  
#line 121 
  reg = max_credits << 12;
  
#line 122 
  reg = (unsigned int)*(refill + (int)i) | reg;
  
#line 123 
  reg = ((unsigned int)*(bwg_id + (int)i) << 9) | reg;
  
#line 125 
  if ((unsigned int)*(prio_type + (int)i) == 1U) 
#line 126 
                                                 reg |= 1073741824U; else ;
  
#line 128 
  if ((unsigned int)*(prio_type + (int)i) == 2U) 
#line 129 
                                                 reg |= 2147483648U; else ;
  
#line 131 
  ixgbe_write_reg(hw,(unsigned int)(((int)i + 4676) * 4),reg);
  
#line 119 
  i = (u8)((int)i + 1);
  ldv_54634: 
#line 120 
  ;
  
#line 119 
  if ((unsigned int)i <= 7U) 
#line 121 
                             goto ldv_54633; else 
#line 124 
                                                  goto ldv_54635;
  ldv_54635: 
#line 125 
  ;
  
#line 138 
  reg = 17U;
  
#line 139 
  ixgbe_write_reg(hw,18688U,reg);
  
#line 141 
  __retres = 0;
  
#line 141 
  return __retres;
}


#line 154  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_dcb_82599.c"
s32 ixgbe_dcb_config_tx_data_arbiter_82599(struct ixgbe_hw *hw, u16 *refill, u16 *max, u8 *bwg_id, u8 *prio_type, u8 *prio_tc)
{
  s32 __retres;
  u32 reg;
  u8 i;
  
#line 168 
  reg = 16777568U;
  
#line 171 
  ixgbe_write_reg(hw,52480U,reg);
  
#line 174 
  reg = 0U;
  
#line 175 
  i = (unsigned char)0U;
  
#line 175 
  goto ldv_54647;
  ldv_54646: 
#line 176 
  ;
  
#line 176 
  reg = (unsigned int)((int)*(prio_tc + (int)i) << (int)i * 3) | reg;
  
#line 175 
  i = (u8)((int)i + 1);
  ldv_54647: 
#line 176 
  ;
  
#line 175 
  if ((unsigned int)i <= 7U) 
#line 177 
                             goto ldv_54646; else 
#line 180 
                                                  goto ldv_54648;
  ldv_54648: 
#line 181 
  ;
  
#line 177 
  ixgbe_write_reg(hw,51200U,reg);
  
#line 180 
  i = (unsigned char)0U;
  
#line 180 
  goto ldv_54650;
  ldv_54649: 
#line 181 
  ;
  
#line 181 
  reg = (unsigned int)*(refill + (int)i);
  
#line 182 
  reg = ((unsigned int)*(max + (int)i) << 12) | reg;
  
#line 183 
  reg = ((unsigned int)*(bwg_id + (int)i) << 9) | reg;
  
#line 185 
  if ((unsigned int)*(prio_type + (int)i) == 1U) 
#line 186 
                                                 reg |= 1073741824U; else ;
  
#line 188 
  if ((unsigned int)*(prio_type + (int)i) == 2U) 
#line 189 
                                                 reg |= 2147483648U; else ;
  
#line 191 
  ixgbe_write_reg(hw,(unsigned int)(((int)i + 13128) * 4),reg);
  
#line 180 
  i = (u8)((int)i + 1);
  ldv_54650: 
#line 181 
  ;
  
#line 180 
  if ((unsigned int)i <= 7U) 
#line 182 
                             goto ldv_54649; else 
#line 185 
                                                  goto ldv_54651;
  ldv_54651: 
#line 186 
  ;
  
#line 198 
  reg = 16777504U;
  
#line 200 
  ixgbe_write_reg(hw,52480U,reg);
  
#line 202 
  __retres = 0;
  
#line 202 
  return __retres;
}


#line 213  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_dcb_82599.c"
s32 ixgbe_dcb_config_pfc_82599(struct ixgbe_hw *hw, u8 pfc_en, u8 *prio_tc)
{
  s32 __retres;
  u32 i;
  u32 j;
  u32 fcrtl;
  u32 reg;
  
#line 216 
  u8 max_tc = (unsigned char)0U;
  
#line 219 
  ixgbe_write_reg(hw,15616U,16U);
  
#line 222 
  reg = ixgbe_read_reg(hw,17044U);
  
#line 223 
  reg |= 2U;
  
#line 230 
  reg &= 4294963203U;
  
#line 232 
  if (hw->mac.type == (unsigned int)ixgbe_mac_X540) 
#line 233 
                                                    reg = (unsigned int)((int)pfc_en << 4) | reg; else ;
  
#line 235 
  if ((unsigned int)pfc_en != 0U) 
#line 236 
                                  reg |= 4U; else ;
  
#line 238 
  ixgbe_write_reg(hw,17044U,reg);
  
#line 240 
  i = 0U;
  
#line 240 
  goto ldv_54663;
  ldv_54662: 
#line 241 
  ;
  
#line 241 
  if ((int)*(prio_tc + i) > (int)max_tc) 
#line 242 
                                         max_tc = *(prio_tc + i); else ;
  
#line 240 
  i += 1U;
  ldv_54663: 
#line 241 
  ;
  
#line 240 
  if (i <= 7U) 
#line 242 
               goto ldv_54662; else 
#line 245 
                                    goto ldv_54664;
  ldv_54664: 
#line 246 
  ;
  
#line 247 
  i = 0U;
  
#line 247 
  goto ldv_54670;
  ldv_54669: 
#line 248 
  ;
  {
    
#line 248 
    int enabled = 0;
    
#line 250 
    j = 0U;
    
#line 250 
    goto ldv_54668;
    ldv_54667: 
#line 251 
    ;
    
#line 251 
    if ((unsigned int)*(prio_tc + j) == i && (((int)pfc_en >> j) & 1) != 0) {
      
#line 252 
      enabled = 1;
      
#line 253 
      goto ldv_54666;
    }
    else ;
    
#line 250 
    j += 1U;
    ldv_54668: 
#line 251 
    ;
    
#line 250 
    if (j <= 7U) 
#line 252 
                 goto ldv_54667; else 
#line 255 
                                      goto ldv_54666;
    ldv_54666: 
#line 256 
    ;
    
#line 257 
    if (enabled != 0) {
      
#line 258 
      reg = (hw->fc.high_water[i] << 10) | 2147483648U;
      
#line 259 
      fcrtl = (hw->fc.low_water[i] << 10) | 2147483648U;
      
#line 260 
      ixgbe_write_reg(hw,(i + 3208U) * 4U,fcrtl);
    }
    else {
      u32 tmp;
      
#line 262 
      tmp = ixgbe_read_reg(hw,(i + 3840U) * 4U);
      
#line 262 
      reg = tmp + 4294967264U;
      
#line 263 
      ixgbe_write_reg(hw,(i + 3208U) * 4U,0U);
    }
    
#line 266 
    ixgbe_write_reg(hw,(i + 3224U) * 4U,reg);
  }
  
#line 247 
  i += 1U;
  ldv_54670: 
#line 248 
  ;
  
#line 247 
  if ((unsigned int)max_tc >= i) 
#line 249 
                                 goto ldv_54669; else 
#line 252 
                                                      goto ldv_54671;
  ldv_54671: 
#line 253 
  ;
  
#line 269 
  goto ldv_54673;
  ldv_54672: 
#line 270 
  ;
  
#line 270 
  ixgbe_write_reg(hw,(i + 3208U) * 4U,0U);
  
#line 271 
  ixgbe_write_reg(hw,(i + 3224U) * 4U,0U);
  
#line 269 
  i += 1U;
  ldv_54673: 
#line 270 
  ;
  
#line 269 
  if (i <= 7U) 
#line 271 
               goto ldv_54672; else 
#line 274 
                                    goto ldv_54674;
  ldv_54674: 
#line 275 
  ;
  
#line 275 
  reg = (unsigned int)((int)hw->fc.pause_time * 65537);
  
#line 276 
  i = 0U;
  
#line 276 
  goto ldv_54676;
  ldv_54675: 
#line 277 
  ;
  
#line 277 
  ixgbe_write_reg(hw,(i + 3200U) * 4U,reg);
  
#line 276 
  i += 1U;
  ldv_54676: 
#line 277 
  ;
  
#line 276 
  if (i <= 3U) 
#line 278 
               goto ldv_54675; else 
#line 281 
                                    goto ldv_54677;
  ldv_54677: 
#line 282 
  ;
  
#line 280 
  ixgbe_write_reg(hw,12960U,(unsigned int)hw->fc.pause_time / 2U);
  
#line 282 
  __retres = 0;
  
#line 282 
  return __retres;
}


#line 292  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_dcb_82599.c"
static s32 ixgbe_dcb_config_tc_stats_82599(struct ixgbe_hw *hw)
{
  s32 __retres;
  
#line 294 
  u32 reg = 0U;
  
#line 295 
  u8 i = (unsigned char)0U;
  
#line 303 
  i = (unsigned char)0U;
  
#line 303 
  goto ldv_54684;
  ldv_54683: 
#line 304 
  ;
  
#line 304 
  reg = (unsigned int)((int)((unsigned int)i / 4U) * 16843009);
  
#line 305 
  ixgbe_write_reg(hw,(unsigned int)(((int)i + 2240) * 4),reg);
  
#line 303 
  i = (u8)((int)i + 1);
  ldv_54684: 
#line 304 
  ;
  
#line 303 
  if ((unsigned int)i <= 31U) 
#line 305 
                              goto ldv_54683; else 
#line 308 
                                                   goto ldv_54685;
  ldv_54685: 
#line 309 
  ;
  
#line 315 
  i = (unsigned char)0U;
  
#line 315 
  goto ldv_54687;
  ldv_54686: 
#line 316 
  ;
  
#line 316 
  if ((unsigned int)i <= 7U) 
#line 317 
                             reg = 0U;
  else 
    
#line 318 
    if ((unsigned int)i <= 15U) 
#line 319 
                                reg = 16843009U;
    else 
      
#line 320 
      if ((unsigned int)i <= 19U) 
#line 321 
                                  reg = 33686018U;
      else 
        
#line 322 
        if ((unsigned int)i <= 23U) 
#line 323 
                                    reg = 50529027U;
        else 
          
#line 324 
          if ((unsigned int)i <= 25U) 
#line 325 
                                      reg = 67372036U;
          else 
            
#line 326 
            if ((unsigned int)i <= 27U) 
#line 327 
                                        reg = 84215045U;
            else 
              
#line 328 
              if ((unsigned int)i <= 29U) 
#line 329 
                                          reg = 101058054U; else 
#line 331 
                                                                 reg = 117901063U;
  
#line 332 
  ixgbe_write_reg(hw,(unsigned int)(((int)i + 8576) * 4),reg);
  
#line 315 
  i = (u8)((int)i + 1);
  ldv_54687: 
#line 316 
  ;
  
#line 315 
  if ((unsigned int)i <= 31U) 
#line 317 
                              goto ldv_54686; else 
#line 320 
                                                   goto ldv_54688;
  ldv_54688: 
#line 321 
  ;
  
#line 335 
  __retres = 0;
  
#line 335 
  return __retres;
}


#line 349  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_dcb_82599.c"
s32 ixgbe_dcb_hw_config_82599(struct ixgbe_hw *hw, u8 pfc_en, u16 *refill, u16 *max, u8 *bwg_id, u8 *prio_type, u8 *prio_tc)
{
  s32 __retres;
  
#line 352 
  ixgbe_dcb_config_rx_arbiter_82599(hw,refill,max,bwg_id,prio_type,prio_tc);
  
#line 354 
  ixgbe_dcb_config_tx_desc_arbiter_82599(hw,refill,max,bwg_id,prio_type);
  
#line 356 
  ixgbe_dcb_config_tx_data_arbiter_82599(hw,refill,max,bwg_id,prio_type,prio_tc);
  
#line 358 
  ixgbe_dcb_config_pfc_82599(hw,(unsigned char)((int)pfc_en),prio_tc);
  
#line 359 
  ixgbe_dcb_config_tc_stats_82599(hw);
  
#line 361 
  __retres = 0;
  
#line 361 
  return __retres;
}


#line 5  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/delay.h"
void __bad_udelay(void);


#line 8 
void __udelay(unsigned long);


#line 10 
void __const_udelay(unsigned long);


#line 115  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_mbx.h"
s32 ixgbe_read_mbx(struct ixgbe_hw *hw, u32 *msg, u16 size, u16 mbx_id);


#line 116 
s32 ixgbe_write_mbx(struct ixgbe_hw *hw, u32 *msg, u16 size, u16 mbx_id);


#line 117 
s32 ixgbe_check_for_msg(struct ixgbe_hw *hw, u16 mbx_id);


#line 118 
s32 ixgbe_check_for_ack(struct ixgbe_hw *hw, u16 mbx_id);


#line 119 
s32 ixgbe_check_for_rst(struct ixgbe_hw *hw, u16 mbx_id);


#line 121 
void ixgbe_init_mbx_params_pf(struct ixgbe_hw *hw);


#line 124 
struct ixgbe_mbx_operations mbx_ops_generic;


#line 43  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_mbx.c"
s32 ixgbe_read_mbx(struct ixgbe_hw *hw, u32 *msg, u16 size, u16 mbx_id)
{
  s32 __retres;
  s32 tmp;
  
#line 45 
  struct ixgbe_mbx_info *mbx = & hw->mbx;
  
#line 48 
  if ((int)mbx->size < (int)size) 
#line 49 
                                  size = mbx->size; else ;
  
#line 51 
  if (mbx->ops.read == (s32 (*)(struct ixgbe_hw *, u32 *, u16 , u16 ))0) {
    
#line 52 
    __retres = -100;
    
#line 52 
    goto return_label;
  }
  else ;
  
#line 54 
  tmp = (*(mbx->ops.read))(hw,msg,(unsigned short)((int)size),(unsigned short)((int)mbx_id));
  
#line 54 
  __retres = tmp;
  return_label: 
#line 54 
                return __retres;
}


#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_mbx.c"
s32 ixgbe_write_mbx(struct ixgbe_hw *hw, u32 *msg, u16 size, u16 mbx_id)
{
  s32 __retres;
  s32 tmp;
  
#line 68 
  struct ixgbe_mbx_info *mbx = & hw->mbx;
  
#line 70 
  if ((int)mbx->size < (int)size) {
    
#line 71 
    __retres = -100;
    
#line 71 
    goto return_label;
  }
  else ;
  
#line 73 
  if (mbx->ops.write == (s32 (*)(struct ixgbe_hw *, u32 *, u16 , u16 ))0) {
    
#line 74 
    __retres = -100;
    
#line 74 
    goto return_label;
  }
  else ;
  
#line 76 
  tmp = (*(mbx->ops.write))(hw,msg,(unsigned short)((int)size),(unsigned short)((int)mbx_id));
  
#line 76 
  __retres = tmp;
  return_label: 
#line 76 
                return __retres;
}


#line 86  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_mbx.c"
s32 ixgbe_check_for_msg(struct ixgbe_hw *hw, u16 mbx_id)
{
  s32 __retres;
  s32 tmp;
  
#line 88 
  struct ixgbe_mbx_info *mbx = & hw->mbx;
  
#line 90 
  if (mbx->ops.check_for_msg == (s32 (*)(struct ixgbe_hw *, u16 ))0) {
    
#line 91 
    __retres = -100;
    
#line 91 
    goto return_label;
  }
  else ;
  
#line 93 
  tmp = (*(mbx->ops.check_for_msg))(hw,(unsigned short)((int)mbx_id));
  
#line 93 
  __retres = tmp;
  return_label: 
#line 93 
                return __retres;
}


#line 103  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_mbx.c"
s32 ixgbe_check_for_ack(struct ixgbe_hw *hw, u16 mbx_id)
{
  s32 __retres;
  s32 tmp;
  
#line 105 
  struct ixgbe_mbx_info *mbx = & hw->mbx;
  
#line 107 
  if (mbx->ops.check_for_ack == (s32 (*)(struct ixgbe_hw *, u16 ))0) {
    
#line 108 
    __retres = -100;
    
#line 108 
    goto return_label;
  }
  else ;
  
#line 110 
  tmp = (*(mbx->ops.check_for_ack))(hw,(unsigned short)((int)mbx_id));
  
#line 110 
  __retres = tmp;
  return_label: 
#line 110 
                return __retres;
}


#line 120  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_mbx.c"
s32 ixgbe_check_for_rst(struct ixgbe_hw *hw, u16 mbx_id)
{
  s32 __retres;
  s32 tmp;
  
#line 122 
  struct ixgbe_mbx_info *mbx = & hw->mbx;
  
#line 124 
  if (mbx->ops.check_for_rst == (s32 (*)(struct ixgbe_hw *, u16 ))0) {
    
#line 125 
    __retres = -100;
    
#line 125 
    goto return_label;
  }
  else ;
  
#line 127 
  tmp = (*(mbx->ops.check_for_rst))(hw,(unsigned short)((int)mbx_id));
  
#line 127 
  __retres = tmp;
  return_label: 
#line 127 
                return __retres;
}


#line 137  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_mbx.c"
static s32 ixgbe_poll_for_msg(struct ixgbe_hw *hw, u16 mbx_id)
{
  s32 __retres;
  s32 tmp;
  
#line 139 
  struct ixgbe_mbx_info *mbx = & hw->mbx;
  
#line 140 
  int countdown = (int)mbx->timeout;
  
#line 142 
  if (countdown == 0 || mbx->ops.check_for_msg == (s32 (*)(struct ixgbe_hw *, u16 ))0) {
    
#line 143 
    __retres = -100;
    
#line 143 
    goto return_label;
  }
  else ;
  
#line 145 
  goto ldv_54606;
  ldv_54605: 
#line 146 
  ;
  
#line 146 
  countdown -= 1;
  
#line 147 
  if (countdown == 0) {
    
#line 148 
    __retres = -100;
    
#line 148 
    goto return_label;
  }
  else ;
  
#line 149 
  if (0 != 0) 
    
#line 149 
    if (mbx->usec_delay > 19999U) 
#line 149 
                                  __bad_udelay(); else 
#line 149 
                                                       __const_udelay((unsigned long)mbx->usec_delay * 4295UL);
  else 
#line 149 
       __udelay((unsigned long)mbx->usec_delay);
  ldv_54606: 
#line 151 
  ;
  
#line 145 
  tmp = (*(mbx->ops.check_for_msg))(hw,(unsigned short)((int)mbx_id));
  
#line 145 
  if (tmp != 0) 
#line 147 
                goto ldv_54605; else 
#line 150 
                                     goto ldv_54607;
  ldv_54607: 
#line 151 
  ;
  
#line 152 
  __retres = 0;
  return_label: 
#line 152 
                return __retres;
}


#line 162  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_mbx.c"
static s32 ixgbe_poll_for_ack(struct ixgbe_hw *hw, u16 mbx_id)
{
  s32 __retres;
  s32 tmp;
  
#line 164 
  struct ixgbe_mbx_info *mbx = & hw->mbx;
  
#line 165 
  int countdown = (int)mbx->timeout;
  
#line 167 
  if (countdown == 0 || mbx->ops.check_for_ack == (s32 (*)(struct ixgbe_hw *, u16 ))0) {
    
#line 168 
    __retres = -100;
    
#line 168 
    goto return_label;
  }
  else ;
  
#line 170 
  goto ldv_54615;
  ldv_54614: 
#line 171 
  ;
  
#line 171 
  countdown -= 1;
  
#line 172 
  if (countdown == 0) {
    
#line 173 
    __retres = -100;
    
#line 173 
    goto return_label;
  }
  else ;
  
#line 174 
  if (0 != 0) 
    
#line 174 
    if (mbx->usec_delay > 19999U) 
#line 174 
                                  __bad_udelay(); else 
#line 174 
                                                       __const_udelay((unsigned long)mbx->usec_delay * 4295UL);
  else 
#line 174 
       __udelay((unsigned long)mbx->usec_delay);
  ldv_54615: 
#line 176 
  ;
  
#line 170 
  tmp = (*(mbx->ops.check_for_ack))(hw,(unsigned short)((int)mbx_id));
  
#line 170 
  if (tmp != 0) 
#line 172 
                goto ldv_54614; else 
#line 175 
                                     goto ldv_54616;
  ldv_54616: 
#line 176 
  ;
  
#line 177 
  __retres = 0;
  return_label: 
#line 177 
                return __retres;
}


#line 190  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_mbx.c"
static s32 ixgbe_read_posted_mbx(struct ixgbe_hw *hw, u32 *msg, u16 size, u16 mbx_id)
{
  s32 __retres;
  s32 ret_val;
  s32 tmp;
  
#line 193 
  struct ixgbe_mbx_info *mbx = & hw->mbx;
  
#line 196 
  if (mbx->ops.read == (s32 (*)(struct ixgbe_hw *, u32 *, u16 , u16 ))0) {
    
#line 197 
    __retres = -100;
    
#line 197 
    goto return_label;
  }
  else ;
  
#line 199 
  ret_val = ixgbe_poll_for_msg(hw,(unsigned short)((int)mbx_id));
  
#line 200 
  if (ret_val != 0) {
    
#line 201 
    __retres = ret_val;
    
#line 201 
    goto return_label;
  }
  else ;
  
#line 204 
  tmp = (*(mbx->ops.read))(hw,msg,(unsigned short)((int)size),(unsigned short)((int)mbx_id));
  
#line 204 
  __retres = tmp;
  return_label: 
#line 204 
                return __retres;
}


#line 217  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_mbx.c"
static s32 ixgbe_write_posted_mbx(struct ixgbe_hw *hw, u32 *msg, u16 size, u16 mbx_id)
{
  s32 __retres;
  s32 ret_val;
  s32 tmp;
  
#line 220 
  struct ixgbe_mbx_info *mbx = & hw->mbx;
  
#line 224 
  if (mbx->ops.write == (s32 (*)(struct ixgbe_hw *, u32 *, u16 , u16 ))0 || mbx->timeout == 0U) {
    
#line 225 
    __retres = -100;
    
#line 225 
    goto return_label;
  }
  else ;
  
#line 228 
  ret_val = (*(mbx->ops.write))(hw,msg,(unsigned short)((int)size),(unsigned short)((int)mbx_id));
  
#line 229 
  if (ret_val != 0) {
    
#line 230 
    __retres = ret_val;
    
#line 230 
    goto return_label;
  }
  else ;
  
#line 233 
  tmp = ixgbe_poll_for_ack(hw,(unsigned short)((int)mbx_id));
  
#line 233 
  __retres = tmp;
  return_label: 
#line 233 
                return __retres;
}


#line 236  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_mbx.c"
static s32 ixgbe_check_for_bit_pf(struct ixgbe_hw *hw, u32 mask, s32 index)
{
  s32 __retres;
  
#line 238 
  u32 mbvficr = ixgbe_read_reg(hw,(unsigned int)((index + 452) * 4));
  
#line 240 
  if ((mbvficr & mask) != 0U) {
    
#line 241 
    ixgbe_write_reg(hw,(unsigned int)((index + 452) * 4),mask);
    
#line 242 
    __retres = 0;
    
#line 242 
    goto return_label;
  }
  else ;
  
#line 245 
  __retres = -100;
  return_label: 
#line 245 
                return __retres;
}


#line 255  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_mbx.c"
static s32 ixgbe_check_for_msg_pf(struct ixgbe_hw *hw, u16 vf_number)
{
  s32 __retres;
  s32 tmp;
  
#line 257 
  s32 index = (int)vf_number >> 4;
  
#line 258 
  u32 vf_bit = (unsigned int)vf_number & 15U;
  
#line 260 
  tmp = ixgbe_check_for_bit_pf(hw,(unsigned int)(1 << vf_bit),index);
  
#line 260 
  if (tmp == 0) {
    
#line 262 
    hw->mbx.stats.reqs += 1U;
    
#line 263 
    __retres = 0;
    
#line 263 
    goto return_label;
  }
  else ;
  
#line 266 
  __retres = -100;
  return_label: 
#line 266 
                return __retres;
}


#line 276  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_mbx.c"
static s32 ixgbe_check_for_ack_pf(struct ixgbe_hw *hw, u16 vf_number)
{
  s32 __retres;
  s32 tmp;
  
#line 278 
  s32 index = (int)vf_number >> 4;
  
#line 279 
  u32 vf_bit = (unsigned int)vf_number & 15U;
  
#line 281 
  tmp = ixgbe_check_for_bit_pf(hw,(unsigned int)(65536 << vf_bit),index);
  
#line 281 
  if (tmp == 0) {
    
#line 283 
    hw->mbx.stats.acks += 1U;
    
#line 284 
    __retres = 0;
    
#line 284 
    goto return_label;
  }
  else ;
  
#line 287 
  __retres = -100;
  return_label: 
#line 287 
                return __retres;
}


#line 297  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_mbx.c"
static s32 ixgbe_check_for_rst_pf(struct ixgbe_hw *hw, u16 vf_number)
{
  s32 __retres;
  
#line 299 
  u32 reg_offset = (unsigned int)((unsigned int)vf_number > 31U);
  
#line 300 
  u32 vf_shift = (unsigned int)vf_number & 31U;
  
#line 301 
  u32 vflre = 0U;
  
#line 303 
  switch ((unsigned int)hw->mac.type) {
    int tmp;
    case (unsigned int)2: 
#line 304 
    ;
    
#line 305 
    if ((reg_offset & 1U) != 0U) 
#line 305 
                                 tmp = 448; else 
#line 305 
                                                 tmp = 1536;
    
#line 305 
    ;
    
#line 305 
    vflre = ixgbe_read_reg(hw,(unsigned int)tmp);
    
#line 306 
    goto ldv_54659;
    case (unsigned int)3: 
#line 307 
    ;
    case (unsigned int)4: 
#line 308 
    ;
    case (unsigned int)5: 
#line 309 
    ;
    
#line 310 
    vflre = ixgbe_read_reg(hw,(reg_offset + 448U) * 4U);
    
#line 311 
    goto ldv_54659;
    default: 
#line 312 
    ;
    
#line 313 
    goto ldv_54659;
  }
  ldv_54659: 
#line 316 
  ;
  
#line 316 
  if (((unsigned int)(1 << vf_shift) & vflre) != 0U) {
    
#line 317 
    ixgbe_write_reg(hw,(reg_offset + 448U) * 4U,(unsigned int)(1 << vf_shift));
    
#line 318 
    hw->mbx.stats.rsts += 1U;
    
#line 319 
    __retres = 0;
    
#line 319 
    goto return_label;
  }
  else ;
  
#line 322 
  __retres = -100;
  return_label: 
#line 322 
                return __retres;
}


#line 332  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_mbx.c"
static s32 ixgbe_obtain_mbx_lock_pf(struct ixgbe_hw *hw, u16 vf_number)
{
  s32 __retres;
  u32 p2v_mailbox;
  
#line 337 
  ixgbe_write_reg(hw,(unsigned int)(((int)vf_number + 4800) * 4),8U);
  
#line 340 
  p2v_mailbox = ixgbe_read_reg(hw,(unsigned int)(((int)vf_number + 4800) * 4));
  
#line 341 
  if ((p2v_mailbox & 8U) != 0U) {
    
#line 342 
    __retres = 0;
    
#line 342 
    goto return_label;
  }
  else ;
  
#line 344 
  __retres = -100;
  return_label: 
#line 344 
                return __retres;
}


#line 356  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_mbx.c"
static s32 ixgbe_write_mbx_pf(struct ixgbe_hw *hw, u32 *msg, u16 size, u16 vf_number)
{
  s32 __retres;
  s32 ret_val;
  u16 i;
  
#line 363 
  ret_val = ixgbe_obtain_mbx_lock_pf(hw,(unsigned short)((int)vf_number));
  
#line 364 
  if (ret_val != 0) {
    
#line 365 
    __retres = ret_val;
    
#line 365 
    goto return_label;
  }
  else ;
  
#line 368 
  ixgbe_check_for_msg_pf(hw,(unsigned short)((int)vf_number));
  
#line 369 
  ixgbe_check_for_ack_pf(hw,(unsigned short)((int)vf_number));
  
#line 372 
  i = (unsigned short)0U;
  
#line 372 
  goto ldv_54678;
  ldv_54677: 
#line 373 
  ;
  
#line 373 
  ixgbe_write_reg(hw,(unsigned int)(((int)vf_number + 1216) * 64 + ((int)i << 2)),*(msg + (int)i));
  
#line 372 
  i = (u16)((int)i + 1);
  ldv_54678: 
#line 373 
  ;
  
#line 372 
  if ((int)i < (int)size) 
#line 374 
                          goto ldv_54677; else 
#line 377 
                                               goto ldv_54679;
  ldv_54679: 
#line 378 
  ;
  
#line 376 
  ixgbe_write_reg(hw,(unsigned int)(((int)vf_number + 4800) * 4),1U);
  
#line 379 
  hw->mbx.stats.msgs_tx += 1U;
  
#line 381 
  __retres = 0;
  return_label: 
#line 381 
                return __retres;
}


#line 395  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_mbx.c"
static s32 ixgbe_read_mbx_pf(struct ixgbe_hw *hw, u32 *msg, u16 size, u16 vf_number)
{
  s32 __retres;
  s32 ret_val;
  u16 i;
  
#line 402 
  ret_val = ixgbe_obtain_mbx_lock_pf(hw,(unsigned short)((int)vf_number));
  
#line 403 
  if (ret_val != 0) {
    
#line 404 
    __retres = ret_val;
    
#line 404 
    goto return_label;
  }
  else ;
  
#line 407 
  i = (unsigned short)0U;
  
#line 407 
  goto ldv_54689;
  ldv_54688: 
#line 408 
  ;
  
#line 408 
  *(msg + (int)i) = ixgbe_read_reg(hw,(unsigned int)(((int)vf_number + 1216) * 64 + ((int)i << 2)));
  
#line 407 
  i = (u16)((int)i + 1);
  ldv_54689: 
#line 408 
  ;
  
#line 407 
  if ((int)i < (int)size) 
#line 409 
                          goto ldv_54688; else 
#line 412 
                                               goto ldv_54690;
  ldv_54690: 
#line 413 
  ;
  
#line 411 
  ixgbe_write_reg(hw,(unsigned int)(((int)vf_number + 4800) * 4),2U);
  
#line 414 
  hw->mbx.stats.msgs_rx += 1U;
  
#line 416 
  __retres = 0;
  return_label: 
#line 416 
                return __retres;
}


#line 426  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_mbx.c"
void ixgbe_init_mbx_params_pf(struct ixgbe_hw *hw)
{
  
#line 428 
  struct ixgbe_mbx_info *mbx = & hw->mbx;
  
#line 430 
  if (((hw->mac.type != (unsigned int)ixgbe_mac_82599EB && hw->mac.type != (unsigned int)ixgbe_mac_X550) && hw->mac.type != (unsigned int)ixgbe_mac_X550EM_x) && hw->mac.type != (unsigned int)ixgbe_mac_X540) 
    
#line 434 
    goto return_label; else ;
  
#line 436 
  mbx->timeout = 0U;
  
#line 437 
  mbx->usec_delay = 0U;
  
#line 439 
  mbx->stats.msgs_tx = 0U;
  
#line 440 
  mbx->stats.msgs_rx = 0U;
  
#line 441 
  mbx->stats.reqs = 0U;
  
#line 442 
  mbx->stats.acks = 0U;
  
#line 443 
  mbx->stats.rsts = 0U;
  
#line 445 
  mbx->size = (unsigned short)16U;
  return_label: 
#line 446 
                return;
}


#line 449  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_mbx.c"
struct ixgbe_mbx_operations mbx_ops_generic = {.init_params = (s32 (*)(struct ixgbe_hw *))0, .read = & ixgbe_read_mbx_pf, .write = & ixgbe_write_mbx_pf, .read_posted = & ixgbe_read_posted_mbx, .write_posted = & ixgbe_write_posted_mbx, .check_for_msg = & ixgbe_check_for_msg_pf, .check_for_ack = & ixgbe_check_for_ack_pf, .check_for_rst = & ixgbe_check_for_rst_pf};

#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/export.h"
extern struct module __this_module;


#line 142  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/printk.h"
int printk(char const * , ...);


#line 413  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernel.h"
char *kasprintf(gfp_t, char const * , ...);


#line 418 
int sscanf(char const *, char const * , ...);


#line 64  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/string_64.h"
size_t strlen(char const *);


#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/string.h"
int strncmp(char const *, char const *, __kernel_size_t);


#line 2812  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
int simple_open(struct inode *, struct file *);


#line 2843 
ssize_t simple_read_from_buffer(void *, size_t, loff_t *, void const *, size_t);


#line 2845 
ssize_t simple_write_to_buffer(void *, size_t, loff_t *, void const *, size_t);


#line 54  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/debugfs.h"
static struct dentry *ldv_debugfs_create_file_73(char const *ldv_func_arg1, umode_t ldv_func_arg2, struct dentry *ldv_func_arg3, void *ldv_func_arg4, struct file_operations const *ldv_func_arg5);


#line 58 
static struct dentry *ldv_debugfs_create_file_74(char const *ldv_func_arg1, umode_t ldv_func_arg2, struct dentry *ldv_func_arg3, void *ldv_func_arg4, struct file_operations const *ldv_func_arg5);


#line 66 
struct dentry *debugfs_create_dir(char const *, struct dentry *);


#line 77 
void debugfs_remove_recursive(struct dentry *);


#line 87  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
__inline static char const *kobject_name(struct kobject const *kobj)
{
  char const *__retres;
  
#line 89 
  __retres = kobj->name;
  
#line 89 
  return __retres;
}


#line 833  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
__inline static char const *dev_name(struct device const *dev)
{
  char const *__retres;
  char const *tmp;
  
#line 836 
  if (dev->init_name != (char const *)0) {
    
#line 837 
    __retres = dev->init_name;
    
#line 837 
    goto return_label;
  }
  else ;
  
#line 839 
  tmp = kobject_name(& dev->kobj);
  
#line 839 
  __retres = tmp;
  return_label: 
#line 839 
                return __retres;
}


#line 1083 
void dev_err(struct device const *, char const * , ...);


#line 1089 
void _dev_info(struct device const *, char const * , ...);


#line 143  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/slab.h"
void kfree(void const *);


#line 1484  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
__inline static char const *pci_name(struct pci_dev const *pdev)
{
  char const *tmp;
  
#line 1486 
  tmp = dev_name(& pdev->dev);
  
#line 1486 
  return tmp;
}


#line 845  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe.h"
char ixgbe_driver_name[6U];


#line 936 
void ixgbe_dbg_adapter_init(struct ixgbe_adapter *adapter);


#line 937 
void ixgbe_dbg_adapter_exit(struct ixgbe_adapter *adapter);


#line 938 
void ixgbe_dbg_init(void);


#line 939 
void ixgbe_dbg_exit(void);


#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_debugfs.c"
static struct dentry *ixgbe_dbg_root;

#line 35  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_debugfs.c"
static char ixgbe_dbg_reg_ops_buf[256U] = {(char)'\000'};

#line 44  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_debugfs.c"
static ssize_t ixgbe_dbg_reg_ops_read(struct file *filp, char *buffer, size_t count, loff_t *ppos)
{
  ssize_t __retres;
  char *buf;
  int len;
  size_t tmp;
  ssize_t tmp_1;
  size_t tmp_0;
  
#line 47 
  struct ixgbe_adapter *adapter = (struct ixgbe_adapter *)filp->private_data;
  
#line 52 
  if (*ppos != 0LL) {
    
#line 53 
    __retres = 0L;
    
#line 53 
    goto return_label;
  }
  else ;
  
#line 55 
  buf = kasprintf(208U,"%s: %s\n",(char *)(& (adapter->netdev)->name),(char *)(& ixgbe_dbg_reg_ops_buf));
  
#line 58 
  if (buf == (char *)0) {
    
#line 59 
    __retres = -12L;
    
#line 59 
    goto return_label;
  }
  else ;
  
#line 61 
  tmp = strlen((char const *)buf);
  
#line 61 
  ;
  
#line 61 
  if (tmp > count) {
    
#line 62 
    kfree((void const *)buf);
    
#line 63 
    __retres = -28L;
    
#line 63 
    goto return_label;
  }
  else ;
  
#line 66 
  tmp_0 = strlen((char const *)buf);
  
#line 66 
  ;
  
#line 66 
  ;
  
#line 66 
  ;
  
#line 66 
  ;
  
#line 66 
  tmp_1 = simple_read_from_buffer((void *)buffer,count,ppos,(void const *)buf,tmp_0);
  
#line 66 
  len = (int)tmp_1;
  
#line 68 
  kfree((void const *)buf);
  
#line 69 
  __retres = (long)len;
  return_label: 
#line 69 
                return __retres;
}


#line 79  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_debugfs.c"
static ssize_t ixgbe_dbg_reg_ops_write(struct file *filp, char const *buffer, size_t count, loff_t *ppos)
{
  ssize_t __retres;
  int len;
  ssize_t tmp;
  int tmp_1;
  
#line 83 
  struct ixgbe_adapter *adapter = (struct ixgbe_adapter *)filp->private_data;
  
#line 87 
  if (*ppos != 0LL) {
    
#line 88 
    __retres = 0L;
    
#line 88 
    goto return_label;
  }
  else ;
  
#line 89 
  if (count > 255UL) {
    
#line 90 
    __retres = -28L;
    
#line 90 
    goto return_label;
  }
  else ;
  
#line 92 
  tmp = simple_write_to_buffer((void *)(& ixgbe_dbg_reg_ops_buf),255UL,ppos,(void const *)buffer,count);
  
#line 92 
  len = (int)tmp;
  
#line 97 
  if (len < 0) {
    
#line 98 
    __retres = (long)len;
    
#line 98 
    goto return_label;
  }
  else ;
  
#line 100 
  ixgbe_dbg_reg_ops_buf[len] = (char)0;
  
#line 102 
  tmp_1 = strncmp((char const *)(& ixgbe_dbg_reg_ops_buf),"write",5UL);
  
#line 102 
  if (tmp_1 == 0) {
    u32 reg;
    u32 value;
    int cnt;
    
#line 105 
    cnt = sscanf((char const *)(& ixgbe_dbg_reg_ops_buf[5]),"%x %x",& reg,& value);
    
#line 106 
    if (cnt == 2) {
      
#line 107 
      ixgbe_write_reg(& adapter->hw,reg,value);
      
#line 108 
      value = ixgbe_read_reg(& adapter->hw,reg);
      
#line 109 
      _dev_info((struct device const *)(& (adapter->pdev)->dev),"write: 0x%08x = 0x%08x\n",reg,value);
    }
    else 
#line 111 
         _dev_info((struct device const *)(& (adapter->pdev)->dev),"write <reg> <value>\n");
  }
  else {
    int tmp_0;
    
#line 113 
    tmp_0 = strncmp((char const *)(& ixgbe_dbg_reg_ops_buf),"read",4UL);
    
#line 113 
    if (tmp_0 == 0) {
      u32 reg_0;
      u32 value_0;
      int cnt_0;
      
#line 116 
      cnt_0 = sscanf((char const *)(& ixgbe_dbg_reg_ops_buf[4]),"%x",& reg_0);
      
#line 117 
      if (cnt_0 == 1) {
        
#line 118 
        value_0 = ixgbe_read_reg(& adapter->hw,reg_0);
        
#line 119 
        _dev_info((struct device const *)(& (adapter->pdev)->dev),"read 0x%08x = 0x%08x\n",reg_0,value_0);
      }
      else 
#line 121 
           _dev_info((struct device const *)(& (adapter->pdev)->dev),"read <reg>\n");
    }
    else {
      
#line 124 
      _dev_info((struct device const *)(& (adapter->pdev)->dev),"Unknown command %s\n",(char *)(& ixgbe_dbg_reg_ops_buf));
      
#line 125 
      _dev_info((struct device const *)(& (adapter->pdev)->dev),"Available commands:\n");
      
#line 126 
      _dev_info((struct device const *)(& (adapter->pdev)->dev),"   read <reg>\n");
      
#line 127 
      _dev_info((struct device const *)(& (adapter->pdev)->dev),"   write <reg> <value>\n");
    }
  }
  
#line 129 
  __retres = (long)count;
  return_label: 
#line 129 
                return __retres;
}


#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_debugfs.c"
static struct file_operations const ixgbe_dbg_reg_ops_fops = {.owner = & __this_module, .llseek = (loff_t (*)(struct file *, loff_t , int ))0, .read = & ixgbe_dbg_reg_ops_read, .write = & ixgbe_dbg_reg_ops_write, .read_iter = (ssize_t (*)(struct kiocb *, struct iov_iter *))0, .write_iter = (ssize_t (*)(struct kiocb *, struct iov_iter *))0, .iterate = (int (*)(struct file *, struct dir_context *))0, .poll = (unsigned int (*)(struct file *, struct poll_table_struct *))0, .unlocked_ioctl = (long (*)(struct file *, unsigned int , unsigned long ))0, .compat_ioctl = (long (*)(struct file *, unsigned int , unsigned long ))0, .mmap = (int (*)(struct file *, struct vm_area_struct *))0, .mremap = (int (*)(struct file *, struct vm_area_struct *))0, .open = & simple_open, .flush = (int (*)(struct file *, fl_owner_t ))0, .release = (int (*)(struct inode *, struct file *))0, .fsync = (int (*)(struct file *, loff_t , loff_t , int ))0, .aio_fsync = (int (*)(struct kiocb *, int ))0, .fasync = (int (*)(int , struct file *, int ))0, .lock = (int (*)(struct file *, int , struct file_lock *))0, .sendpage = (ssize_t (*)(struct file *, struct page *, int , size_t , loff_t *, int ))0, .get_unmapped_area = (unsigned long (*)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ))0, .check_flags = (int (*)(int ))0, .flock = (int (*)(struct file *, int , struct file_lock *))0, .splice_write = (ssize_t (*)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ))0, .splice_read = (ssize_t (*)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ))0, .setlease = (int (*)(struct file *, long , struct file_lock **, void **))0, .fallocate = (long (*)(struct file *, int , loff_t , loff_t ))0, .show_fdinfo = (void (*)(struct seq_file *, struct file *))0};

#line 139  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_debugfs.c"
static char ixgbe_dbg_netdev_ops_buf[256U] = {(char)'\000'};

#line 148  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_debugfs.c"
static ssize_t ixgbe_dbg_netdev_ops_read(struct file *filp, char *buffer, size_t count, loff_t *ppos)
{
  ssize_t __retres;
  char *buf;
  int len;
  size_t tmp;
  ssize_t tmp_1;
  size_t tmp_0;
  
#line 152 
  struct ixgbe_adapter *adapter = (struct ixgbe_adapter *)filp->private_data;
  
#line 157 
  if (*ppos != 0LL) {
    
#line 158 
    __retres = 0L;
    
#line 158 
    goto return_label;
  }
  else ;
  
#line 160 
  buf = kasprintf(208U,"%s: %s\n",(char *)(& (adapter->netdev)->name),(char *)(& ixgbe_dbg_netdev_ops_buf));
  
#line 163 
  if (buf == (char *)0) {
    
#line 164 
    __retres = -12L;
    
#line 164 
    goto return_label;
  }
  else ;
  
#line 166 
  tmp = strlen((char const *)buf);
  
#line 166 
  ;
  
#line 166 
  if (tmp > count) {
    
#line 167 
    kfree((void const *)buf);
    
#line 168 
    __retres = -28L;
    
#line 168 
    goto return_label;
  }
  else ;
  
#line 171 
  tmp_0 = strlen((char const *)buf);
  
#line 171 
  ;
  
#line 171 
  ;
  
#line 171 
  ;
  
#line 171 
  ;
  
#line 171 
  tmp_1 = simple_read_from_buffer((void *)buffer,count,ppos,(void const *)buf,tmp_0);
  
#line 171 
  len = (int)tmp_1;
  
#line 173 
  kfree((void const *)buf);
  
#line 174 
  __retres = (long)len;
  return_label: 
#line 174 
                return __retres;
}


#line 184  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_debugfs.c"
static ssize_t ixgbe_dbg_netdev_ops_write(struct file *filp, char const *buffer, size_t count, loff_t *ppos)
{
  ssize_t __retres;
  int len;
  ssize_t tmp;
  int tmp_0;
  
#line 188 
  struct ixgbe_adapter *adapter = (struct ixgbe_adapter *)filp->private_data;
  
#line 192 
  if (*ppos != 0LL) {
    
#line 193 
    __retres = 0L;
    
#line 193 
    goto return_label;
  }
  else ;
  
#line 194 
  if (count > 255UL) {
    
#line 195 
    __retres = -28L;
    
#line 195 
    goto return_label;
  }
  else ;
  
#line 197 
  tmp = simple_write_to_buffer((void *)(& ixgbe_dbg_netdev_ops_buf),255UL,ppos,(void const *)buffer,count);
  
#line 197 
  len = (int)tmp;
  
#line 202 
  if (len < 0) {
    
#line 203 
    __retres = (long)len;
    
#line 203 
    goto return_label;
  }
  else ;
  
#line 205 
  ixgbe_dbg_netdev_ops_buf[len] = (char)0;
  
#line 207 
  tmp_0 = strncmp((char const *)(& ixgbe_dbg_netdev_ops_buf),"tx_timeout",10UL);
  
#line 207 
  if (tmp_0 == 0) {
    
#line 208 
    (*(((adapter->netdev)->netdev_ops)->ndo_tx_timeout))(adapter->netdev);
    
#line 209 
    _dev_info((struct device const *)(& (adapter->pdev)->dev),"tx_timeout called\n");
  }
  else {
    
#line 211 
    _dev_info((struct device const *)(& (adapter->pdev)->dev),"Unknown command: %s\n",(char *)(& ixgbe_dbg_netdev_ops_buf));
    
#line 212 
    _dev_info((struct device const *)(& (adapter->pdev)->dev),"Available commands:\n");
    
#line 213 
    _dev_info((struct device const *)(& (adapter->pdev)->dev),"    tx_timeout\n");
  }
  
#line 215 
  __retres = (long)count;
  return_label: 
#line 215 
                return __retres;
}


#line 218  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_debugfs.c"
static struct file_operations const ixgbe_dbg_netdev_ops_fops = {.owner = & __this_module, .llseek = (loff_t (*)(struct file *, loff_t , int ))0, .read = & ixgbe_dbg_netdev_ops_read, .write = & ixgbe_dbg_netdev_ops_write, .read_iter = (ssize_t (*)(struct kiocb *, struct iov_iter *))0, .write_iter = (ssize_t (*)(struct kiocb *, struct iov_iter *))0, .iterate = (int (*)(struct file *, struct dir_context *))0, .poll = (unsigned int (*)(struct file *, struct poll_table_struct *))0, .unlocked_ioctl = (long (*)(struct file *, unsigned int , unsigned long ))0, .compat_ioctl = (long (*)(struct file *, unsigned int , unsigned long ))0, .mmap = (int (*)(struct file *, struct vm_area_struct *))0, .mremap = (int (*)(struct file *, struct vm_area_struct *))0, .open = & simple_open, .flush = (int (*)(struct file *, fl_owner_t ))0, .release = (int (*)(struct inode *, struct file *))0, .fsync = (int (*)(struct file *, loff_t , loff_t , int ))0, .aio_fsync = (int (*)(struct kiocb *, int ))0, .fasync = (int (*)(int , struct file *, int ))0, .lock = (int (*)(struct file *, int , struct file_lock *))0, .sendpage = (ssize_t (*)(struct file *, struct page *, int , size_t , loff_t *, int ))0, .get_unmapped_area = (unsigned long (*)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ))0, .check_flags = (int (*)(int ))0, .flock = (int (*)(struct file *, int , struct file_lock *))0, .splice_write = (ssize_t (*)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ))0, .splice_read = (ssize_t (*)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ))0, .setlease = (int (*)(struct file *, long , struct file_lock **, void **))0, .fallocate = (long (*)(struct file *, int , loff_t , loff_t ))0, .show_fdinfo = (void (*)(struct seq_file *, struct file *))0};

#line 229  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_debugfs.c"
void ixgbe_dbg_adapter_init(struct ixgbe_adapter *adapter)
{
  struct dentry *pfile;
  
#line 231 
  char const *name = pci_name((struct pci_dev const *)adapter->pdev);
  
#line 233 
  adapter->ixgbe_dbg_adapter = debugfs_create_dir(name,ixgbe_dbg_root);
  
#line 234 
  if (adapter->ixgbe_dbg_adapter != (struct dentry *)0) {
    
#line 235 
    pfile = ldv_debugfs_create_file_73("reg_ops",(unsigned short)384,adapter->ixgbe_dbg_adapter,(void *)adapter,& ixgbe_dbg_reg_ops_fops);
    
#line 238 
    if (pfile == (struct dentry *)0) 
#line 239 
                                     dev_err((struct device const *)(& (adapter->pdev)->dev),"debugfs reg_ops for %s failed\n",name); else ;
    
#line 240 
    pfile = ldv_debugfs_create_file_74("netdev_ops",(unsigned short)384,adapter->ixgbe_dbg_adapter,(void *)adapter,& ixgbe_dbg_netdev_ops_fops);
    
#line 243 
    if (pfile == (struct dentry *)0) 
#line 244 
                                     dev_err((struct device const *)(& (adapter->pdev)->dev),"debugfs netdev_ops for %s failed\n",name); else ;
  }
  else 
#line 246 
       dev_err((struct device const *)(& (adapter->pdev)->dev),"debugfs entry for %s failed\n",name);
  
#line 247 
  return;
}


#line 254  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_debugfs.c"
void ixgbe_dbg_adapter_exit(struct ixgbe_adapter *adapter)
{
  
#line 256 
  debugfs_remove_recursive(adapter->ixgbe_dbg_adapter);
  
#line 257 
  adapter->ixgbe_dbg_adapter = (struct dentry *)0;
  
#line 258 
  return;
}


#line 263  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_debugfs.c"
void ixgbe_dbg_init(void)
{
  
#line 265 
  ixgbe_dbg_root = debugfs_create_dir((char const *)(& ixgbe_driver_name),(struct dentry *)0);
  
#line 266 
  if (ixgbe_dbg_root == (struct dentry *)0) 
#line 267 
                                            printk("\001"); else ;
  
#line 268 
  return;
}


#line 273  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_debugfs.c"
void ixgbe_dbg_exit(void)
{
  
#line 275 
  debugfs_remove_recursive(ixgbe_dbg_root);
  
#line 276 
  return;
}


#line 56  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_debugfs.c.aux"
struct file_operations *ldv_emg_alias_ixgbe_dbg_netdev_ops_fops_2 = (struct file_operations *)(& ixgbe_dbg_netdev_ops_fops);

#line 57  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_debugfs.c.aux"
int (*ldv_emg_alias_simple_open_5)(struct inode *, struct file *) = & simple_open;

#line 58  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_debugfs.c.aux"
struct file_operations *ldv_emg_alias_ixgbe_dbg_reg_ops_fops_2 = (struct file_operations *)(& ixgbe_dbg_reg_ops_fops);

#line 64 
struct dentry *ldv_emg_debugfs_create_file(char *arg0, unsigned short arg1, struct dentry *arg2, void *arg3, struct file_operations *arg4);


#line 76  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_debugfs.c.aux"
long ldv_emg_wrapper_ixgbe_dbg_reg_ops_write_4(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  long tmp;
  
#line 77 
  tmp = ixgbe_dbg_reg_ops_write(arg0,(char const *)arg1,arg2,arg3);
  
#line 77 
  return tmp;
}


#line 81  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_debugfs.c.aux"
long ldv_emg_wrapper_ixgbe_dbg_reg_ops_read_3(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  long tmp;
  
#line 82 
  tmp = ixgbe_dbg_reg_ops_read(arg0,arg1,arg2,arg3);
  
#line 82 
  return tmp;
}


#line 86  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_debugfs.c.aux"
long ldv_emg_wrapper_ixgbe_dbg_netdev_ops_write_4(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  long tmp;
  
#line 87 
  tmp = ixgbe_dbg_netdev_ops_write(arg0,(char const *)arg1,arg2,arg3);
  
#line 87 
  return tmp;
}


#line 91  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_debugfs.c.aux"
long ldv_emg_wrapper_ixgbe_dbg_netdev_ops_read_3(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  long tmp;
  
#line 92 
  tmp = ixgbe_dbg_netdev_ops_read(arg0,arg1,arg2,arg3);
  
#line 92 
  return tmp;
}


#line 777  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_debugfs.c.aux"
static struct dentry *ldv_debugfs_create_file_73(char const *ldv_func_arg1, umode_t ldv_func_arg2, struct dentry *ldv_func_arg3, void *ldv_func_arg4, struct file_operations const *ldv_func_arg5)
{
  struct dentry *tmp;
  
#line 781 
  tmp = ldv_emg_debugfs_create_file((char *)ldv_func_arg1,(unsigned short)((int)ldv_func_arg2),ldv_func_arg3,ldv_func_arg4,(struct file_operations *)ldv_func_arg5);
  
#line 781 
  return tmp;
}


#line 785  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_debugfs.c.aux"
static struct dentry *ldv_debugfs_create_file_74(char const *ldv_func_arg1, umode_t ldv_func_arg2, struct dentry *ldv_func_arg3, void *ldv_func_arg4, struct file_operations const *ldv_func_arg5)
{
  struct dentry *tmp;
  
#line 789 
  tmp = ldv_emg_debugfs_create_file((char *)ldv_func_arg1,(unsigned short)((int)ldv_func_arg2),ldv_func_arg3,ldv_func_arg4,(struct file_operations *)ldv_func_arg5);
  
#line 789 
  return tmp;
}


#line 143  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_dcb.h"
void ixgbe_dcb_unpack_pfc(struct ixgbe_dcb_config *cfg, u8 *pfc_en);


#line 144 
void ixgbe_dcb_unpack_refill(struct ixgbe_dcb_config *cfg, int direction, u16 *refill);


#line 145 
void ixgbe_dcb_unpack_max(struct ixgbe_dcb_config *cfg, u16 *max);


#line 146 
void ixgbe_dcb_unpack_bwgid(struct ixgbe_dcb_config *cfg, int direction, u8 *bwgid);


#line 147 
void ixgbe_dcb_unpack_prio(struct ixgbe_dcb_config *cfg, int direction, u8 *ptype);


#line 148 
void ixgbe_dcb_unpack_map(struct ixgbe_dcb_config *cfg, int direction, u8 *map);


#line 149 
u8 ixgbe_dcb_get_tc_from_up(struct ixgbe_dcb_config *cfg, int direction, u8 up_0);


#line 152 
s32 ixgbe_dcb_calculate_tc_credits(struct ixgbe_hw *hw, struct ixgbe_dcb_config *dcb_config, int max_frame, u8 direction);


#line 156 
s32 ixgbe_dcb_hw_ets(struct ixgbe_hw *hw, struct ieee_ets *ets, int max_frame);


#line 157 
s32 ixgbe_dcb_hw_ets_config(struct ixgbe_hw *hw, u16 *refill, u16 *max, u8 *bwg_id, u8 *prio_type, u8 *prio_tc);


#line 159 
s32 ixgbe_dcb_hw_pfc_config(struct ixgbe_hw *hw, u8 pfc_en, u8 *prio_tc);


#line 160 
s32 ixgbe_dcb_hw_config(struct ixgbe_hw *hw, struct ixgbe_dcb_config *dcb_config);


#line 162 
void ixgbe_dcb_read_rtrup2tc(struct ixgbe_hw *hw, u8 *map);


#line 74  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_dcb_82598.h"
s32 ixgbe_dcb_config_pfc_82598(struct ixgbe_hw *hw, u8 pfc_en);


#line 77 
s32 ixgbe_dcb_config_rx_arbiter_82598(struct ixgbe_hw *hw, u16 *refill, u16 *max, u8 *prio_type);


#line 82 
s32 ixgbe_dcb_config_tx_desc_arbiter_82598(struct ixgbe_hw *hw, u16 *refill, u16 *max, u8 *bwg_id, u8 *prio_type);


#line 88 
s32 ixgbe_dcb_config_tx_data_arbiter_82598(struct ixgbe_hw *hw, u16 *refill, u16 *max, u8 *bwg_id, u8 *prio_type);


#line 94 
s32 ixgbe_dcb_hw_config_82598(struct ixgbe_hw *hw, u8 pfc_en, u16 *refill, u16 *max, u8 *bwg_id, u8 *prio_type);


#line 43  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_dcb.c"
static s32 ixgbe_ieee_credits(__u8 *bw, __u16 *refill, __u16 *max, int max_frame)
{
  s32 __retres;
  int min_credit;
  int multiplier;
  int i;
  
#line 46 
  int min_percent = 100;
  
#line 50 
  min_credit = (max_frame / 2 + 63) / 64;
  
#line 53 
  i = 0;
  
#line 53 
  goto ldv_54640;
  ldv_54639: 
#line 54 
  ;
  
#line 54 
  if ((int)*(bw + i) < min_percent && (unsigned int)*(bw + i) != 0U) 
    
#line 55 
    min_percent = (int)*(bw + i); else ;
  
#line 53 
  i += 1;
  ldv_54640: 
#line 54 
  ;
  
#line 53 
  if (i <= 7) 
#line 55 
              goto ldv_54639; else 
#line 58 
                                   goto ldv_54641;
  ldv_54641: 
#line 59 
  ;
  
#line 58 
  multiplier = min_credit / min_percent + 1;
  
#line 61 
  i = 0;
  
#line 61 
  goto ldv_54647;
  ldv_54646: 
#line 62 
  ;
  {
    int tmp_0;
    {
      int tmp;
      
#line 62 
      int _min1 = (int)*(bw + i) * multiplier;
      
#line 62 
      int _min2 = 511;
      
#line 62 
      if (_min1 < _min2) 
#line 62 
                         tmp = _min1; else 
#line 62 
                                           tmp = _min2;
      
#line 62 
      tmp_0 = tmp;
    }
    
#line 62 
    int val = tmp_0;
    
#line 64 
    if (val < min_credit) 
#line 65 
                          val = min_credit; else ;
    
#line 66 
    *(refill + i) = (unsigned short)val;
    
#line 68 
    if ((unsigned int)*(bw + i) != 0U) 
#line 68 
                                       *(max + i) = (unsigned short)(((int)*(bw + i) * 4095) / 100); else 
                                                                    
#line 68 
                                                                    *(max + i) = (unsigned short)min_credit;
  }
  
#line 61 
  i += 1;
  ldv_54647: 
#line 62 
  ;
  
#line 61 
  if (i <= 7) 
#line 63 
              goto ldv_54646; else 
#line 66 
                                   goto ldv_54648;
  ldv_54648: 
#line 67 
  ;
  
#line 70 
  __retres = 0;
  
#line 70 
  return __retres;
}


#line 82  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_dcb.c"
s32 ixgbe_dcb_calculate_tc_credits(struct ixgbe_hw *hw, struct ixgbe_dcb_config *dcb_config, int max_frame, u8 direction)
{
  s32 __retres;
  struct tc_bw_alloc *p;
  int min_credit;
  int min_multiplier;
  u8 i;
  int tmp_0;
  
#line 89 
  int min_percent = 100;
  
#line 91 
  u32 credit_refill = 0U;
  
#line 92 
  u32 credit_max = 0U;
  
#line 93 
  u16 link_percentage = (unsigned short)0U;
  
#line 94 
  u8 bw_percent = (unsigned char)0U;
  
#line 97 
  if (dcb_config == (struct ixgbe_dcb_config *)0) {
    
#line 98 
    __retres = -1;
    
#line 98 
    goto return_label;
  }
  else ;
  
#line 100 
  min_credit = (max_frame / 2 + 63) / 64;
  
#line 104 
  i = (unsigned char)0U;
  
#line 104 
  goto ldv_54665;
  ldv_54664: 
#line 105 
  ;
  
#line 105 
  p = & dcb_config->tc_config[(int)i].path[(int)direction];
  
#line 106 
  bw_percent = dcb_config->bw_percentage[(int)direction][(int)p->bwg_id];
  
#line 107 
  link_percentage = (unsigned short)p->bwg_percent;
  
#line 109 
  link_percentage = (unsigned short)(((int)link_percentage * (int)bw_percent) / 100);
  
#line 111 
  if ((unsigned int)link_percentage != 0U && (int)link_percentage < min_percent) 
    
#line 112 
    min_percent = (int)link_percentage; else ;
  
#line 104 
  i = (u8)((int)i + 1);
  ldv_54665: 
#line 105 
  ;
  
#line 104 
  if ((unsigned int)i <= 7U) 
#line 106 
                             goto ldv_54664; else 
#line 109 
                                                  goto ldv_54666;
  ldv_54666: 
#line 110 
  ;
  
#line 123 
  min_multiplier = min_credit / min_percent + 1;
  
#line 126 
  i = (unsigned char)0U;
  
#line 126 
  goto ldv_54671;
  ldv_54670: 
#line 127 
  ;
  
#line 127 
  p = & dcb_config->tc_config[(int)i].path[(int)direction];
  
#line 128 
  bw_percent = dcb_config->bw_percentage[(int)direction][(int)p->bwg_id];
  
#line 130 
  link_percentage = (unsigned short)p->bwg_percent;
  
#line 132 
  link_percentage = (unsigned short)(((int)link_percentage * (int)bw_percent) / 100);
  
#line 133 
  if ((unsigned int)p->bwg_percent != 0U && (unsigned int)link_percentage == 0U) 
    
#line 134 
    link_percentage = (unsigned short)1U; else ;
  
#line 137 
  p->link_percent = (unsigned char)link_percentage;
  {
    int tmp;
    
#line 140 
    int _min1 = (int)link_percentage * min_multiplier;
    
#line 140 
    int _min2 = 511;
    
#line 140 
    if (_min1 < _min2) 
#line 140 
                       tmp = _min1; else 
#line 140 
                                         tmp = _min2;
    
#line 140 
    tmp_0 = tmp;
  }
  
#line 140 
  credit_refill = (unsigned int)tmp_0;
  
#line 142 
  p->data_credits_refill = (unsigned short)credit_refill;
  
#line 145 
  credit_max = (unsigned int)(((int)link_percentage * 4095) / 100);
  
#line 152 
  if (credit_max != 0U && credit_max < (unsigned int)min_credit) 
#line 153 
                                                                 credit_max = (unsigned int)min_credit; else ;
  
#line 155 
  if ((unsigned int)direction == 0U) {
    
#line 162 
    if (hw->mac.type == (unsigned int)ixgbe_mac_82598EB && credit_max + 4294967295U <= 511U) 
      
#line 165 
      credit_max = 513U; else ;
    
#line 167 
    dcb_config->tc_config[(int)i].desc_credits_max = (unsigned short)credit_max;
  }
  else ;
  
#line 171 
  p->data_credits_max = (unsigned short)credit_max;
  
#line 126 
  i = (u8)((int)i + 1);
  ldv_54671: 
#line 127 
  ;
  
#line 126 
  if ((unsigned int)i <= 7U) 
#line 128 
                             goto ldv_54670; else 
#line 131 
                                                  goto ldv_54672;
  ldv_54672: 
#line 132 
  ;
  
#line 174 
  __retres = 0;
  return_label: 
#line 174 
                return __retres;
}


#line 177  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_dcb.c"
void ixgbe_dcb_unpack_pfc(struct ixgbe_dcb_config *cfg, u8 *pfc_en)
{
  int tc;
  
#line 179 
  struct tc_configuration *tc_config = & cfg->tc_config[0];
  
#line 182 
  *pfc_en = (unsigned char)0U;
  
#line 182 
  tc = 0;
  
#line 182 
  goto ldv_54680;
  ldv_54679: 
#line 183 
  ;
  
#line 183 
  if ((tc_config + tc)->dcb_pfc != (unsigned int)pfc_disabled) 
#line 184 
                                                               *pfc_en = (unsigned char)((int)*pfc_en | (1 << tc)); else ;
  
#line 182 
  tc += 1;
  ldv_54680: 
#line 183 
  ;
  
#line 182 
  if (tc <= 7) 
#line 184 
               goto ldv_54679; else 
#line 187 
                                    goto ldv_54681;
  ldv_54681: 
#line 188 
  ;
  
#line 189 
  return;
}


#line 188  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_dcb.c"
void ixgbe_dcb_unpack_refill(struct ixgbe_dcb_config *cfg, int direction, u16 *refill)
{
  int tc;
  
#line 191 
  struct tc_configuration *tc_config = & cfg->tc_config[0];
  
#line 194 
  tc = 0;
  
#line 194 
  goto ldv_54690;
  ldv_54689: 
#line 195 
  ;
  
#line 195 
  *(refill + tc) = (tc_config + tc)->path[direction].data_credits_refill;
  
#line 194 
  tc += 1;
  ldv_54690: 
#line 195 
  ;
  
#line 194 
  if (tc <= 7) 
#line 196 
               goto ldv_54689; else 
#line 199 
                                    goto ldv_54691;
  ldv_54691: 
#line 200 
  ;
  
#line 201 
  return;
}


#line 198  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_dcb.c"
void ixgbe_dcb_unpack_max(struct ixgbe_dcb_config *cfg, u16 *max)
{
  int tc;
  
#line 200 
  struct tc_configuration *tc_config = & cfg->tc_config[0];
  
#line 203 
  tc = 0;
  
#line 203 
  goto ldv_54699;
  ldv_54698: 
#line 204 
  ;
  
#line 204 
  *(max + tc) = (tc_config + tc)->desc_credits_max;
  
#line 203 
  tc += 1;
  ldv_54699: 
#line 204 
  ;
  
#line 203 
  if (tc <= 7) 
#line 205 
               goto ldv_54698; else 
#line 208 
                                    goto ldv_54700;
  ldv_54700: 
#line 209 
  ;
  
#line 210 
  return;
}


#line 207  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_dcb.c"
void ixgbe_dcb_unpack_bwgid(struct ixgbe_dcb_config *cfg, int direction, u8 *bwgid)
{
  int tc;
  
#line 210 
  struct tc_configuration *tc_config = & cfg->tc_config[0];
  
#line 213 
  tc = 0;
  
#line 213 
  goto ldv_54709;
  ldv_54708: 
#line 214 
  ;
  
#line 214 
  *(bwgid + tc) = (tc_config + tc)->path[direction].bwg_id;
  
#line 213 
  tc += 1;
  ldv_54709: 
#line 214 
  ;
  
#line 213 
  if (tc <= 7) 
#line 215 
               goto ldv_54708; else 
#line 218 
                                    goto ldv_54710;
  ldv_54710: 
#line 219 
  ;
  
#line 220 
  return;
}


#line 217  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_dcb.c"
void ixgbe_dcb_unpack_prio(struct ixgbe_dcb_config *cfg, int direction, u8 *ptype)
{
  int tc;
  
#line 220 
  struct tc_configuration *tc_config = & cfg->tc_config[0];
  
#line 223 
  tc = 0;
  
#line 223 
  goto ldv_54719;
  ldv_54718: 
#line 224 
  ;
  
#line 224 
  *(ptype + tc) = (unsigned char)(tc_config + tc)->path[direction].prio_type;
  
#line 223 
  tc += 1;
  ldv_54719: 
#line 224 
  ;
  
#line 223 
  if (tc <= 7) 
#line 225 
               goto ldv_54718; else 
#line 228 
                                    goto ldv_54720;
  ldv_54720: 
#line 229 
  ;
  
#line 230 
  return;
}


#line 227  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_dcb.c"
u8 ixgbe_dcb_get_tc_from_up(struct ixgbe_dcb_config *cfg, int direction, u8 up_0)
{
  u8 __retres;
  
#line 229 
  struct tc_configuration *tc_config = & cfg->tc_config[0];
  
#line 230 
  u8 prio_mask = (unsigned char)(1 << (int)up_0);
  
#line 231 
  u8 tc = cfg->num_tcs.pg_tcs;
  
#line 234 
  if ((unsigned int)tc == 0U) {
    
#line 235 
    __retres = (unsigned char)0U;
    
#line 235 
    goto return_label;
  }
  else ;
  
#line 242 
  tc = (u8)((int)tc - 1);
  
#line 242 
  goto ldv_54731;
  ldv_54730: 
#line 243 
  ;
  
#line 243 
  if ((unsigned int)((int)(tc_config + (int)tc)->path[direction].up_to_tc_bitmap & (int)prio_mask) != 0U) 
    
#line 244 
    goto ldv_54729; else ;
  
#line 242 
  tc = (u8)((int)tc - 1);
  ldv_54731: 
#line 243 
  ;
  
#line 242 
  if ((unsigned int)tc != 0U) 
#line 244 
                              goto ldv_54730; else 
#line 247 
                                                   goto ldv_54729;
  ldv_54729: 
#line 248 
  ;
  
#line 247 
  __retres = tc;
  return_label: 
#line 247 
                return __retres;
}


#line 250  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_dcb.c"
void ixgbe_dcb_unpack_map(struct ixgbe_dcb_config *cfg, int direction, u8 *map)
{
  u8 up_0;
  
#line 254 
  up_0 = (unsigned char)0U;
  
#line 254 
  goto ldv_54739;
  ldv_54738: 
#line 255 
  ;
  
#line 255 
  *(map + (int)up_0) = ixgbe_dcb_get_tc_from_up(cfg,direction,(unsigned char)((int)up_0));
  
#line 254 
  up_0 = (u8)((int)up_0 + 1);
  ldv_54739: 
#line 255 
  ;
  
#line 254 
  if ((unsigned int)up_0 <= 7U) 
#line 256 
                                goto ldv_54738; else 
#line 259 
                                                     goto ldv_54740;
  ldv_54740: 
#line 260 
  ;
  
#line 261 
  return;
}


#line 265  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_dcb.c"
s32 ixgbe_dcb_hw_config(struct ixgbe_hw *hw, struct ixgbe_dcb_config *dcb_config)
{
  s32 __retres;
  u8 pfc_en;
  u8 ptype[8U];
  u8 bwgid[8U];
  u8 prio_tc[8U];
  u16 refill[8U];
  u16 max[8U];
  
#line 276 
  ixgbe_dcb_unpack_pfc(dcb_config,& pfc_en);
  
#line 277 
  ixgbe_dcb_unpack_refill(dcb_config,0,(u16 *)(& refill));
  
#line 278 
  ixgbe_dcb_unpack_max(dcb_config,(u16 *)(& max));
  
#line 279 
  ixgbe_dcb_unpack_bwgid(dcb_config,0,(u8 *)(& bwgid));
  
#line 280 
  ixgbe_dcb_unpack_prio(dcb_config,0,(u8 *)(& ptype));
  
#line 281 
  ixgbe_dcb_unpack_map(dcb_config,0,(u8 *)(& prio_tc));
  
#line 283 
  switch ((unsigned int)hw->mac.type) {
    s32 tmp;
    s32 tmp_0;
    case (unsigned int)1: 
#line 284 
    ;
    
#line 285 
    tmp = ixgbe_dcb_hw_config_82598(hw,(unsigned char)((int)pfc_en),(u16 *)(& refill),(u16 *)(& max),(u8 *)(& bwgid),(u8 *)(& ptype));
    
#line 285 
    __retres = tmp;
    
#line 285 
    goto return_label;
    case (unsigned int)2: 
#line 287 
    ;
    case (unsigned int)3: 
#line 288 
    ;
    case (unsigned int)4: 
#line 289 
    ;
    case (unsigned int)5: 
#line 290 
    ;
    
#line 291 
    tmp_0 = ixgbe_dcb_hw_config_82599(hw,(unsigned char)((int)pfc_en),(u16 *)(& refill),(u16 *)(& max),(u8 *)(& bwgid),(u8 *)(& ptype),(u8 *)(& prio_tc));
    
#line 291 
    __retres = tmp_0;
    
#line 291 
    goto return_label;
    default: 
#line 293 
    ;
    
#line 294 
    goto ldv_54757;
  }
  ldv_54757: 
#line 296 
  ;
  
#line 296 
  __retres = 0;
  return_label: 
#line 296 
                return __retres;
}


#line 300  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_dcb.c"
s32 ixgbe_dcb_hw_pfc_config(struct ixgbe_hw *hw, u8 pfc_en, u8 *prio_tc)
{
  s32 __retres;
  
#line 302 
  switch ((unsigned int)hw->mac.type) {
    s32 tmp;
    s32 tmp_0;
    case (unsigned int)1: 
#line 303 
    ;
    
#line 304 
    tmp = ixgbe_dcb_config_pfc_82598(hw,(unsigned char)((int)pfc_en));
    
#line 304 
    __retres = tmp;
    
#line 304 
    goto return_label;
    case (unsigned int)2: 
#line 305 
    ;
    case (unsigned int)3: 
#line 306 
    ;
    case (unsigned int)4: 
#line 307 
    ;
    case (unsigned int)5: 
#line 308 
    ;
    
#line 309 
    tmp_0 = ixgbe_dcb_config_pfc_82599(hw,(unsigned char)((int)pfc_en),prio_tc);
    
#line 309 
    __retres = tmp_0;
    
#line 309 
    goto return_label;
    default: 
#line 310 
    ;
    
#line 311 
    goto ldv_54769;
  }
  ldv_54769: 
#line 313 
  ;
  
#line 313 
  __retres = -22;
  return_label: 
#line 313 
                return __retres;
}


#line 316  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_dcb.c"
s32 ixgbe_dcb_hw_ets(struct ixgbe_hw *hw, struct ieee_ets *ets, int max_frame)
{
  s32 __retres;
  __u16 refill[8U];
  __u16 max[8U];
  __u8 prio_type[8U];
  int i;
  s32 tmp;
  
#line 323 
  __u8 bwg_id[8U] = {(unsigned char)0U, (unsigned char)1U, (unsigned char)2U, (unsigned char)3U, (unsigned char)4U, (unsigned char)5U, (unsigned char)6U, (unsigned char)7U};
  
#line 326 
  i = 0;
  
#line 326 
  goto ldv_54785;
  ldv_54784: 
#line 327 
  ;
  
#line 327 
  switch ((int)ets->tc_tsa[i]) {
    case 0: 
#line 328 
    ;
    
#line 329 
    prio_type[i] = (unsigned char)2U;
    
#line 330 
    goto ldv_54781;
    case 2: 
#line 331 
    ;
    
#line 332 
    prio_type[i] = (unsigned char)0U;
    
#line 333 
    goto ldv_54781;
    default: 
#line 334 
    ;
    
#line 340 
    __retres = -22;
    
#line 340 
    goto return_label;
  }
  ldv_54781: 
#line 342 
  ;
  
#line 326 
  i += 1;
  ldv_54785: 
#line 327 
  ;
  
#line 326 
  if (i <= 7) 
#line 328 
              goto ldv_54784; else 
#line 331 
                                   goto ldv_54786;
  ldv_54786: 
#line 332 
  ;
  
#line 344 
  ixgbe_ieee_credits((__u8 *)(& ets->tc_tx_bw),(__u16 *)(& refill),(__u16 *)(& max),max_frame);
  
#line 345 
  tmp = ixgbe_dcb_hw_ets_config(hw,(u16 *)(& refill),(u16 *)(& max),(u8 *)(& bwg_id),(u8 *)(& prio_type),(u8 *)(& ets->prio_tc));
  
#line 345 
  __retres = tmp;
  return_label: 
#line 345 
                return __retres;
}


#line 349  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_dcb.c"
s32 ixgbe_dcb_hw_ets_config(struct ixgbe_hw *hw, u16 *refill, u16 *max, u8 *bwg_id, u8 *prio_type, u8 *prio_tc)
{
  s32 __retres;
  
#line 353 
  switch ((unsigned int)hw->mac.type) {
    case (unsigned int)1: 
#line 354 
    ;
    
#line 355 
    ixgbe_dcb_config_rx_arbiter_82598(hw,refill,max,prio_type);
    
#line 357 
    ixgbe_dcb_config_tx_desc_arbiter_82598(hw,refill,max,bwg_id,prio_type);
    
#line 359 
    ixgbe_dcb_config_tx_data_arbiter_82598(hw,refill,max,bwg_id,prio_type);
    
#line 361 
    goto ldv_54796;
    case (unsigned int)2: 
#line 362 
    ;
    case (unsigned int)3: 
#line 363 
    ;
    case (unsigned int)4: 
#line 364 
    ;
    case (unsigned int)5: 
#line 365 
    ;
    
#line 366 
    ixgbe_dcb_config_rx_arbiter_82599(hw,refill,max,bwg_id,prio_type,prio_tc);
    
#line 368 
    ixgbe_dcb_config_tx_desc_arbiter_82599(hw,refill,max,bwg_id,prio_type);
    
#line 370 
    ixgbe_dcb_config_tx_data_arbiter_82599(hw,refill,max,bwg_id,prio_type,prio_tc);
    
#line 372 
    goto ldv_54796;
    default: 
#line 373 
    ;
    
#line 374 
    goto ldv_54796;
  }
  ldv_54796: 
#line 376 
  ;
  
#line 376 
  __retres = 0;
  
#line 376 
  return __retres;
}


#line 379  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_dcb.c"
static void ixgbe_dcb_read_rtrup2tc_82599(struct ixgbe_hw *hw, u8 *map)
{
  u32 reg;
  u32 i;
  
#line 383 
  reg = ixgbe_read_reg(hw,12320U);
  
#line 384 
  i = 0U;
  
#line 384 
  goto ldv_54809;
  ldv_54808: 
#line 385 
  ;
  
#line 385 
  *(map + i) = (unsigned char)((unsigned int)((unsigned char)(reg >> i * 3U)) & 7U);
  
#line 384 
  i += 1U;
  ldv_54809: 
#line 385 
  ;
  
#line 384 
  if (i <= 7U) 
#line 386 
               goto ldv_54808; else 
#line 389 
                                    goto ldv_54810;
  ldv_54810: 
#line 390 
  ;
  
#line 391 
  return;
}


#line 389  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_dcb.c"
void ixgbe_dcb_read_rtrup2tc(struct ixgbe_hw *hw, u8 *map)
{
  
#line 391 
  switch ((unsigned int)hw->mac.type) {
    case (unsigned int)2: 
#line 392 
    ;
    case (unsigned int)3: 
#line 393 
    ;
    case (unsigned int)4: 
#line 394 
    ;
    case (unsigned int)5: 
#line 395 
    ;
    
#line 396 
    ixgbe_dcb_read_rtrup2tc_82599(hw,map);
    
#line 397 
    goto ldv_54819;
    default: 
#line 398 
    ;
    
#line 399 
    goto ldv_54819;
  }
  ldv_54819: 
#line 401 
  ;
  
#line 402 
  return;
}


#line 59  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dynamic_debug.h"
void __dynamic_netdev_dbg(struct _ddebug *, struct net_device const *, char const * , ...);


#line 46  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/delay.h"
void msleep(unsigned int);


#line 48 
void usleep_range(unsigned long, unsigned long);


#line 35  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.h"
u16 ixgbe_get_pcie_msix_count_generic(struct ixgbe_hw *hw);


#line 37 
s32 ixgbe_init_hw_generic(struct ixgbe_hw *hw);


#line 38 
s32 ixgbe_start_hw_generic(struct ixgbe_hw *hw);


#line 40 
s32 ixgbe_clear_hw_cntrs_generic(struct ixgbe_hw *hw);


#line 43 
s32 ixgbe_get_mac_addr_generic(struct ixgbe_hw *hw, u8 *mac_addr);


#line 46 
s32 ixgbe_get_bus_info_generic(struct ixgbe_hw *hw);


#line 47 
void ixgbe_set_lan_id_multi_port_pcie(struct ixgbe_hw *hw);


#line 48 
s32 ixgbe_stop_adapter_generic(struct ixgbe_hw *hw);


#line 50 
s32 ixgbe_led_on_generic(struct ixgbe_hw *hw, u32 index);


#line 51 
s32 ixgbe_led_off_generic(struct ixgbe_hw *hw, u32 index);


#line 53 
s32 ixgbe_init_eeprom_params_generic(struct ixgbe_hw *hw);


#line 54 
s32 ixgbe_write_eeprom_generic(struct ixgbe_hw *hw, u16 offset, u16 data);


#line 55 
s32 ixgbe_write_eeprom_buffer_bit_bang_generic(struct ixgbe_hw *hw, u16 offset, u16 words, u16 *data);


#line 57 
s32 ixgbe_read_eerd_generic(struct ixgbe_hw *hw, u16 offset, u16 *data);


#line 58 
s32 ixgbe_read_eerd_buffer_generic(struct ixgbe_hw *hw, u16 offset, u16 words, u16 *data);


#line 67 
s32 ixgbe_calc_eeprom_checksum_generic(struct ixgbe_hw *hw);


#line 68 
s32 ixgbe_validate_eeprom_checksum_generic(struct ixgbe_hw *hw, u16 *checksum_val);


#line 70 
s32 ixgbe_update_eeprom_checksum_generic(struct ixgbe_hw *hw);


#line 72 
s32 ixgbe_set_rar_generic(struct ixgbe_hw *hw, u32 index, u8 *addr, u32 vmdq, u32 enable_addr);


#line 74 
s32 ixgbe_clear_rar_generic(struct ixgbe_hw *hw, u32 index);


#line 75 
s32 ixgbe_init_rx_addrs_generic(struct ixgbe_hw *hw);


#line 76 
s32 ixgbe_update_mc_addr_list_generic(struct ixgbe_hw *hw, struct net_device *netdev);


#line 78 
s32 ixgbe_enable_mc_generic(struct ixgbe_hw *hw);


#line 79 
s32 ixgbe_disable_mc_generic(struct ixgbe_hw *hw);


#line 82 
s32 ixgbe_enable_rx_dma_generic(struct ixgbe_hw *hw, u32 regval);


#line 85 
void ixgbe_fc_autoneg(struct ixgbe_hw *hw);


#line 87 
s32 ixgbe_acquire_swfw_sync(struct ixgbe_hw *hw, u32 mask);


#line 88 
void ixgbe_release_swfw_sync(struct ixgbe_hw *hw, u32 mask);


#line 103 
s32 prot_autoc_read_generic(struct ixgbe_hw *hw, bool *locked, u32 *reg_val);


#line 104 
s32 prot_autoc_write_generic(struct ixgbe_hw *hw, u32 reg_val, bool locked);


#line 106 
s32 ixgbe_blink_led_start_generic(struct ixgbe_hw *hw, u32 index);


#line 107 
s32 ixgbe_blink_led_stop_generic(struct ixgbe_hw *hw, u32 index);


#line 121 
u32 const ixgbe_mvals_8259X[24U];


#line 135 
void ixgbe_disable_rx_generic(struct ixgbe_hw *hw);


#line 136 
void ixgbe_enable_rx_generic(struct ixgbe_hw *hw);


#line 142 
u16 ixgbe_read_pci_cfg_word(struct ixgbe_hw *hw, u32 reg);


#line 143 
void ixgbe_write_pci_cfg_word(struct ixgbe_hw *hw, u32 reg, u16 value);


#line 836  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe.h"
struct ixgbe_info ixgbe_82598_info;


#line 118  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_phy.h"
s32 ixgbe_identify_phy_generic(struct ixgbe_hw *hw);


#line 119 
s32 ixgbe_reset_phy_generic(struct ixgbe_hw *hw);


#line 120 
s32 ixgbe_read_phy_reg_generic(struct ixgbe_hw *hw, u32 reg_addr, u32 device_type, u16 *phy_data);


#line 122 
s32 ixgbe_write_phy_reg_generic(struct ixgbe_hw *hw, u32 reg_addr, u32 device_type, u16 phy_data);


#line 124 
s32 ixgbe_read_phy_reg_mdi(struct ixgbe_hw *hw, u32 reg_addr, u32 device_type, u16 *phy_data);


#line 126 
s32 ixgbe_write_phy_reg_mdi(struct ixgbe_hw *hw, u32 reg_addr, u32 device_type, u16 phy_data);


#line 128 
s32 ixgbe_setup_phy_link_generic(struct ixgbe_hw *hw);


#line 129 
s32 ixgbe_setup_phy_link_speed_generic(struct ixgbe_hw *hw, ixgbe_link_speed speed, bool autoneg_wait_to_complete);


#line 132 
s32 ixgbe_get_copper_link_capabilities_generic(struct ixgbe_hw *hw, ixgbe_link_speed *speed, bool *autoneg);


#line 138 
s32 ixgbe_check_phy_link_tnx(struct ixgbe_hw *hw, ixgbe_link_speed *speed, bool *link_up);


#line 141 
s32 ixgbe_setup_phy_link_tnx(struct ixgbe_hw *hw);


#line 142 
s32 ixgbe_get_phy_firmware_version_tnx(struct ixgbe_hw *hw, u16 *firmware_version);


#line 147 
s32 ixgbe_reset_phy_nl(struct ixgbe_hw *hw);


#line 149 
s32 ixgbe_identify_module_generic(struct ixgbe_hw *hw);


#line 151 
s32 ixgbe_get_sfp_init_sequence_offsets(struct ixgbe_hw *hw, u16 *list_offset, u16 *data_offset);


#line 154 
s32 ixgbe_tn_check_overtemp(struct ixgbe_hw *hw);


#line 43  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82598.c"
static s32 ixgbe_setup_copper_link_82598(struct ixgbe_hw *hw, ixgbe_link_speed speed, bool autoneg_wait_to_complete);


#line 46 
static s32 ixgbe_read_i2c_eeprom_82598(struct ixgbe_hw *hw, u8 byte_offset, u8 *eeprom_data);


#line 59  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82598.c"
static void ixgbe_set_pcie_completion_timeout(struct ixgbe_hw *hw)
{
  u16 pcie_devctl2;
  bool tmp_0;
  
#line 61 
  u32 gcr = ixgbe_read_reg(hw,69632U);
  
#line 64 
  tmp_0 = ixgbe_removed((void *)hw->hw_addr);
  
#line 64 
  if ((int)tmp_0 != 0) 
#line 65 
                       goto return_label; else ;
  
#line 68 
  if ((gcr & 61440U) != 0U) 
#line 69 
                            goto out; else ;
  
#line 75 
  if ((gcr & 262144U) == 0U) {
    
#line 76 
    gcr |= 4096U;
    
#line 77 
    goto out;
  }
  else ;
  
#line 85 
  pcie_devctl2 = ixgbe_read_pci_cfg_word(hw,200U);
  
#line 86 
  pcie_devctl2 = (unsigned short)((unsigned int)pcie_devctl2 | 5U);
  
#line 87 
  ixgbe_write_pci_cfg_word(hw,200U,(unsigned short)((int)pcie_devctl2));
  out: 
#line 88 
  ;
  
#line 90 
  gcr &= 4294901759U;
  
#line 91 
  ixgbe_write_reg(hw,69632U,gcr);
  return_label: 
#line 92 
                return;
}


#line 94  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82598.c"
static s32 ixgbe_get_invariants_82598(struct ixgbe_hw *hw)
{
  s32 __retres;
  
#line 96 
  struct ixgbe_mac_info *mac = & hw->mac;
  
#line 99 
  ixgbe_identify_phy_generic(hw);
  
#line 101 
  mac->mcft_size = 128U;
  
#line 102 
  mac->vft_size = 128U;
  
#line 103 
  mac->num_rar_entries = 16U;
  
#line 104 
  mac->rx_pb_size = 512U;
  
#line 105 
  mac->max_rx_queues = 64U;
  
#line 106 
  mac->max_tx_queues = 32U;
  
#line 107 
  mac->max_msix_vectors = ixgbe_get_pcie_msix_count_generic(hw);
  
#line 109 
  __retres = 0;
  
#line 109 
  return __retres;
}


#line 121  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82598.c"
static s32 ixgbe_init_phy_ops_82598(struct ixgbe_hw *hw)
{
  s32 __retres;
  s32 ret_val;
  u16 list_offset;
  u16 data_offset;
  enum ixgbe_media_type tmp;
  
#line 123 
  struct ixgbe_mac_info *mac = & hw->mac;
  
#line 124 
  struct ixgbe_phy_info *phy = & hw->phy;
  
#line 129 
  (*(phy->ops.identify))(hw);
  
#line 132 
  tmp = (*(mac->ops.get_media_type))(hw);
  
#line 132 
  if (tmp == (unsigned int)ixgbe_media_type_copper) {
    
#line 133 
    mac->ops.setup_link = & ixgbe_setup_copper_link_82598;
    
#line 134 
    mac->ops.get_link_capabilities = & ixgbe_get_copper_link_capabilities_generic;
  }
  else ;
  
#line 138 
  switch ((unsigned int)hw->phy.type) {
    case (unsigned int)2: 
#line 139 
    ;
    
#line 140 
    phy->ops.setup_link = & ixgbe_setup_phy_link_tnx;
    
#line 141 
    phy->ops.check_link = & ixgbe_check_phy_link_tnx;
    
#line 142 
    phy->ops.get_firmware_version = & ixgbe_get_phy_firmware_version_tnx;
    
#line 144 
    goto ldv_54692;
    case (unsigned int)10: 
#line 145 
    ;
    
#line 146 
    phy->ops.reset = & ixgbe_reset_phy_nl;
    
#line 149 
    ret_val = (*(phy->ops.identify_sfp))(hw);
    
#line 150 
    if (ret_val != 0) {
      
#line 151 
      __retres = ret_val;
      
#line 151 
      goto return_label;
    }
    else ;
    
#line 152 
    if (hw->phy.sfp_type == (unsigned int)ixgbe_sfp_type_unknown) {
      
#line 153 
      __retres = -19;
      
#line 153 
      goto return_label;
    }
    else ;
    
#line 156 
    ret_val = ixgbe_get_sfp_init_sequence_offsets(hw,& list_offset,& data_offset);
    
#line 159 
    if (ret_val != 0) {
      
#line 160 
      __retres = -19;
      
#line 160 
      goto return_label;
    }
    else ;
    
#line 161 
    goto ldv_54692;
    default: 
#line 162 
    ;
    
#line 163 
    goto ldv_54692;
  }
  ldv_54692: 
#line 166 
  ;
  
#line 166 
  __retres = 0;
  return_label: 
#line 166 
                return __retres;
}


#line 178  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82598.c"
static s32 ixgbe_start_hw_82598(struct ixgbe_hw *hw)
{
  s32 __retres;
  u32 regval;
  u32 i;
  s32 ret_val;
  u32 tmp_0;
  u32 tmp_2;
  
#line 186 
  ret_val = ixgbe_start_hw_generic(hw);
  
#line 190 
  i = 0U;
  
#line 190 
  goto ldv_54702;
  ldv_54701: 
#line 191 
  ;
  
#line 192 
  regval = ixgbe_read_reg(hw,(i + 7296U) * 4U);
  
#line 193 
  regval &= 4294965247U;
  
#line 194 
  ixgbe_write_reg(hw,(i + 7296U) * 4U,regval);
  
#line 191 
  i += 1U;
  ldv_54702: 
#line 192 
  ;
  
#line 190 
  if (hw->mac.max_tx_queues > i && i <= 15U) 
#line 193 
                                             goto ldv_54701; else 
#line 196 
                                                                  goto ldv_54703;
  ldv_54703: 
#line 197 
  ;
  
#line 197 
  i = 0U;
  
#line 197 
  goto ldv_54705;
  ldv_54704: 
#line 198 
  ;
  
#line 199 
  if (i <= 15U) 
#line 199 
                tmp_0 = (i + 2176U) * 4U;
  else {
    u32 tmp;
    
#line 199 
    if (i <= 63U) 
#line 199 
                  tmp = i * 64U + 4108U; else 
#line 199 
                                              tmp = (i + 67108800U) * 64U + 53260U;
    
#line 199 
    tmp_0 = tmp;
  }
  
#line 199 
  ;
  
#line 199 
  regval = ixgbe_read_reg(hw,tmp_0);
  
#line 200 
  regval &= 4294926335U;
  
#line 202 
  ;
  
#line 202 
  if (i <= 15U) 
#line 202 
                tmp_2 = (i + 2176U) * 4U;
  else {
    u32 tmp_1;
    
#line 202 
    if (i <= 63U) 
#line 202 
                  tmp_1 = i * 64U + 4108U; else 
#line 202 
                                                tmp_1 = (i + 67108800U) * 64U + 53260U;
    
#line 202 
    tmp_2 = tmp_1;
  }
  
#line 202 
  ;
  
#line 202 
  ixgbe_write_reg(hw,tmp_2,regval);
  
#line 198 
  i += 1U;
  ldv_54705: 
#line 199 
  ;
  
#line 197 
  if (hw->mac.max_rx_queues > i && i <= 15U) 
#line 200 
                                             goto ldv_54704; else 
#line 203 
                                                                  goto ldv_54706;
  ldv_54706: 
#line 204 
  ;
  
#line 205 
  if (ret_val != 0) {
    
#line 206 
    __retres = ret_val;
    
#line 206 
    goto return_label;
  }
  else ;
  
#line 209 
  ixgbe_set_pcie_completion_timeout(hw);
  
#line 211 
  __retres = 0;
  return_label: 
#line 211 
                return __retres;
}


#line 222  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82598.c"
static s32 ixgbe_get_link_capabilities_82598(struct ixgbe_hw *hw, ixgbe_link_speed *speed, bool *autoneg)
{
  s32 __retres;
  
#line 226 
  u32 autoc = 0U;
  
#line 233 
  if ((int)hw->mac.orig_link_settings_stored != 0) 
#line 234 
                                                   autoc = hw->mac.orig_autoc; else 
                                                                    
#line 236 
                                                                    autoc = ixgbe_read_reg(hw,17056U);
  
#line 238 
  switch (autoc & 57344U) {
    case (unsigned int)0: 
#line 239 
    ;
    
#line 240 
    *speed = 32U;
    
#line 241 
    *autoneg = (_Bool)0;
    
#line 242 
    goto ldv_54714;
    case (unsigned int)8192: 
#line 244 
    ;
    
#line 245 
    *speed = 128U;
    
#line 246 
    *autoneg = (_Bool)0;
    
#line 247 
    goto ldv_54714;
    case (unsigned int)16384: 
#line 249 
    ;
    
#line 250 
    *speed = 32U;
    
#line 251 
    *autoneg = (_Bool)1;
    
#line 252 
    goto ldv_54714;
    case (unsigned int)32768: 
#line 254 
    ;
    case (unsigned int)49152: 
#line 255 
    ;
    
#line 256 
    *speed = 0U;
    
#line 257 
    if (autoc < (u32)0) 
#line 258 
                        *speed |= 128U; else ;
    
#line 259 
    if ((autoc & 1073741824U) != 0U) 
#line 260 
                                     *speed |= 32U; else ;
    
#line 261 
    *autoneg = (_Bool)1;
    
#line 262 
    goto ldv_54714;
    default: 
#line 264 
    ;
    
#line 265 
    __retres = -8;
    
#line 265 
    goto return_label;
  }
  ldv_54714: 
#line 268 
  ;
  
#line 268 
  __retres = 0;
  return_label: 
#line 268 
                return __retres;
}


#line 277  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82598.c"
static enum ixgbe_media_type ixgbe_get_media_type_82598(struct ixgbe_hw *hw)
{
  enum ixgbe_media_type __retres;
  
#line 280 
  switch ((unsigned int)hw->phy.type) {
    case (unsigned int)7: 
#line 281 
    ;
    case (unsigned int)2: 
#line 282 
    ;
    
#line 283 
    __retres = ixgbe_media_type_copper;
    
#line 283 
    goto return_label;
    default: 
#line 285 
    ;
    
#line 286 
    goto ldv_54726;
  }
  ldv_54726: 
#line 290 
  ;
  
#line 290 
  switch ((int)hw->device_id) {
    case 4278: 
#line 291 
    ;
    case 5384: 
#line 292 
    ;
    
#line 294 
    __retres = ixgbe_media_type_backplane;
    
#line 294 
    goto return_label;
    case 4294: 
#line 296 
    ;
    case 4295: 
#line 297 
    ;
    case 4337: 
#line 298 
    ;
    case 4321: 
#line 299 
    ;
    case 4340: 
#line 300 
    ;
    case 4315: 
#line 301 
    ;
    
#line 302 
    __retres = ixgbe_media_type_fiber;
    
#line 302 
    goto return_label;
    case 4317: 
#line 304 
    ;
    case 4332: 
#line 305 
    ;
    
#line 306 
    __retres = ixgbe_media_type_cx4;
    
#line 306 
    goto return_label;
    case 4296: 
#line 308 
    ;
    case 5387: 
#line 309 
    ;
    
#line 310 
    __retres = ixgbe_media_type_copper;
    
#line 310 
    goto return_label;
    default: 
#line 312 
    ;
    
#line 313 
    __retres = ixgbe_media_type_unknown;
    
#line 313 
    goto return_label;
  }
  return_label: 
#line 290 
                return __retres;
}


#line 323  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82598.c"
static s32 ixgbe_fc_enable_82598(struct ixgbe_hw *hw)
{
  s32 __retres;
  u32 fctrl_reg;
  u32 rmcs_reg;
  u32 reg;
  u32 fcrtl;
  u32 fcrth;
  int i;
  bool link_up;
  
#line 329 
  u32 link_speed = 0U;
  
#line 334 
  if ((unsigned int)hw->fc.pause_time == 0U) {
    
#line 335 
    __retres = -13;
    
#line 335 
    goto return_label;
  }
  else ;
  
#line 338 
  i = 0;
  
#line 338 
  goto ldv_54754;
  ldv_54753: 
#line 339 
  ;
  
#line 339 
  if (((unsigned int)hw->fc.current_mode & 2U) != 0U && hw->fc.high_water[i] != 0U) {
    
#line 341 
    if (hw->fc.low_water[i] == 0U || hw->fc.low_water[i] >= hw->fc.high_water[i]) {
      {
        
#line 343 
        struct _ddebug descriptor = {.modname = "ixgbe", .function = "ixgbe_fc_enable_82598", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82598.c", .format = "Invalid water mark configuration\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))343U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
        
#line 343 
        if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 343 
                                                            __dynamic_netdev_dbg(& descriptor,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"Invalid water mark configuration\n"); else ;
      }
      
#line 344 
      __retres = -13;
      
#line 344 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 338 
  i += 1;
  ldv_54754: 
#line 339 
  ;
  
#line 338 
  if (i <= 7) 
#line 340 
              goto ldv_54753; else 
#line 343 
                                   goto ldv_54755;
  ldv_54755: 
#line 344 
  ;
  
#line 354 
  (*(hw->mac.ops.check_link))(hw,& link_speed,& link_up,(_Bool)0);
  
#line 355 
  if ((int)link_up != 0 && link_speed == 32U) {
    
#line 356 
    switch ((unsigned int)hw->fc.requested_mode) {
      case (unsigned int)3: 
#line 357 
      ;
      
#line 358 
      hw->fc.requested_mode = ixgbe_fc_tx_pause;
      
#line 359 
      goto ldv_54757;
      case (unsigned int)1: 
#line 360 
      ;
      
#line 361 
      hw->fc.requested_mode = ixgbe_fc_none;
      
#line 362 
      goto ldv_54757;
      default: 
#line 363 
      ;
      
#line 365 
      goto ldv_54757;
    }
    ldv_54757: 
#line 367 
    ;
  }
  else ;
  
#line 370 
  ixgbe_fc_autoneg(hw);
  
#line 373 
  fctrl_reg = ixgbe_read_reg(hw,20608U);
  
#line 374 
  fctrl_reg &= 4294918143U;
  
#line 376 
  rmcs_reg = ixgbe_read_reg(hw,15616U);
  
#line 377 
  rmcs_reg &= 4294967271U;
  
#line 389 
  switch ((unsigned int)hw->fc.current_mode) {
    case (unsigned int)0: 
#line 390 
    ;
    
#line 395 
    goto ldv_54761;
    case (unsigned int)1: 
#line 396 
    ;
    
#line 405 
    fctrl_reg |= 32768U;
    
#line 406 
    goto ldv_54761;
    case (unsigned int)2: 
#line 407 
    ;
    
#line 412 
    rmcs_reg |= 8U;
    
#line 413 
    goto ldv_54761;
    case (unsigned int)3: 
#line 414 
    ;
    
#line 416 
    fctrl_reg |= 32768U;
    
#line 417 
    rmcs_reg |= 8U;
    
#line 418 
    goto ldv_54761;
    default: 
#line 419 
    ;
    {
      
#line 420 
      struct _ddebug descriptor_0 = {.modname = "ixgbe", .function = "ixgbe_fc_enable_82598", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82598.c", .format = "Flow control param set incorrectly\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))420U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 420 
      if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 420 
                                                            __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"Flow control param set incorrectly\n"); else ;
    }
    
#line 421 
    __retres = -4;
    
#line 421 
    goto return_label;
  }
  ldv_54761: 
#line 425 
  ;
  
#line 425 
  fctrl_reg |= 8192U;
  
#line 426 
  ixgbe_write_reg(hw,20608U,fctrl_reg);
  
#line 427 
  ixgbe_write_reg(hw,15616U,rmcs_reg);
  
#line 430 
  i = 0;
  
#line 430 
  goto ldv_54768;
  ldv_54767: 
#line 431 
  ;
  
#line 431 
  if (((unsigned int)hw->fc.current_mode & 2U) != 0U && hw->fc.high_water[i] != 0U) {
    
#line 433 
    fcrtl = (hw->fc.low_water[i] << 10) | 2147483648U;
    
#line 434 
    fcrth = (hw->fc.high_water[i] << 10) | 2147483648U;
    
#line 435 
    ixgbe_write_reg(hw,(unsigned int)((i + 1604) * 8),fcrtl);
    
#line 436 
    ixgbe_write_reg(hw,(unsigned int)((i + 1612) * 8),fcrth);
  }
  else {
    
#line 438 
    ixgbe_write_reg(hw,(unsigned int)((i + 1604) * 8),0U);
    
#line 439 
    ixgbe_write_reg(hw,(unsigned int)((i + 1612) * 8),0U);
  }
  
#line 430 
  i += 1;
  ldv_54768: 
#line 431 
  ;
  
#line 430 
  if (i <= 7) 
#line 432 
              goto ldv_54767; else 
#line 435 
                                   goto ldv_54769;
  ldv_54769: 
#line 436 
  ;
  
#line 445 
  reg = (unsigned int)((int)hw->fc.pause_time * 65537);
  
#line 446 
  i = 0;
  
#line 446 
  goto ldv_54771;
  ldv_54770: 
#line 447 
  ;
  
#line 447 
  ixgbe_write_reg(hw,(unsigned int)((i + 3200) * 4),reg);
  
#line 446 
  i += 1;
  ldv_54771: 
#line 447 
  ;
  
#line 446 
  if (i <= 3) 
#line 448 
              goto ldv_54770; else 
#line 451 
                                   goto ldv_54772;
  ldv_54772: 
#line 452 
  ;
  
#line 450 
  ixgbe_write_reg(hw,12960U,(unsigned int)hw->fc.pause_time / 2U);
  
#line 452 
  __retres = 0;
  return_label: 
#line 452 
                return __retres;
}


#line 462  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82598.c"
static s32 ixgbe_start_mac_link_82598(struct ixgbe_hw *hw, bool autoneg_wait_to_complete)
{
  u32 autoc_reg;
  u32 links_reg;
  u32 i;
  
#line 468 
  s32 status = 0;
  
#line 471 
  autoc_reg = ixgbe_read_reg(hw,17056U);
  
#line 472 
  autoc_reg |= 4096U;
  
#line 473 
  ixgbe_write_reg(hw,17056U,autoc_reg);
  
#line 476 
  if ((int)autoneg_wait_to_complete != 0) {
    
#line 477 
    if ((autoc_reg & 57344U) == 32768U || (autoc_reg & 57344U) == 49152U) {
      
#line 481 
      links_reg = 0U;
      
#line 482 
      i = 0U;
      
#line 482 
      goto ldv_54783;
      ldv_54782: 
#line 483 
      ;
      
#line 483 
      links_reg = ixgbe_read_reg(hw,17060U);
      
#line 484 
      if (links_reg < (u32)0) 
#line 485 
                              goto ldv_54781; else ;
      
#line 486 
      msleep(100U);
      
#line 482 
      i += 1U;
      ldv_54783: 
#line 483 
      ;
      
#line 482 
      if (i <= 44U) 
#line 484 
                    goto ldv_54782; else 
#line 487 
                                         goto ldv_54781;
      ldv_54781: 
#line 488 
      ;
      
#line 488 
      if (links_reg >= (u32)0) {
        
#line 489 
        status = -14;
        {
          
#line 490 
          struct _ddebug descriptor = {.modname = "ixgbe", .function = "ixgbe_start_mac_link_82598", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82598.c", .format = "Autonegotiation did not complete.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))490U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
          
#line 490 
          if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 490 
                                                              __dynamic_netdev_dbg(& descriptor,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"Autonegotiation did not complete.\n"); else ;
        }
      }
      else ;
    }
    else ;
  }
  else ;
  
#line 496 
  msleep(50U);
  
#line 498 
  return status;
}


#line 508  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82598.c"
static s32 ixgbe_validate_link_ready(struct ixgbe_hw *hw)
{
  s32 __retres;
  u32 timeout;
  u16 an_reg;
  
#line 513 
  if ((unsigned int)hw->device_id != 5387U) {
    
#line 514 
    __retres = 0;
    
#line 514 
    goto return_label;
  }
  else ;
  
#line 516 
  timeout = 0U;
  
#line 516 
  goto ldv_54793;
  ldv_54792: 
#line 517 
  ;
  
#line 518 
  (*(hw->phy.ops.read_reg))(hw,1U,7U,& an_reg);
  
#line 520 
  if (((int)an_reg & 32) != 0 && ((int)an_reg & 4) != 0) 
#line 522 
                                                         goto ldv_54791; else ;
  
#line 524 
  msleep(100U);
  
#line 517 
  timeout += 1U;
  ldv_54793: 
#line 518 
  ;
  
#line 516 
  if (timeout <= 49U) 
#line 519 
                      goto ldv_54792; else 
#line 522 
                                           goto ldv_54791;
  ldv_54791: 
#line 523 
  ;
  
#line 527 
  if (timeout == 50U) {
    {
      
#line 528 
      struct _ddebug descriptor = {.modname = "ixgbe", .function = "ixgbe_validate_link_ready", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82598.c", .format = "Link was indicated but link is down\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))528U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 528 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 528 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"Link was indicated but link is down\n"); else ;
    }
    
#line 529 
    __retres = -8;
    
#line 529 
    goto return_label;
  }
  else ;
  
#line 532 
  __retres = 0;
  return_label: 
#line 532 
                return __retres;
}


#line 544  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82598.c"
static s32 ixgbe_check_mac_link_82598(struct ixgbe_hw *hw, ixgbe_link_speed *speed, bool *link_up, bool link_up_wait_to_complete)
{
  s32 __retres;
  u32 links_reg;
  u32 i;
  u16 link_reg;
  u16 adapt_comp_reg;
  
#line 558 
  if (hw->phy.type == (unsigned int)ixgbe_phy_nl) {
    
#line 559 
    (*(hw->phy.ops.read_reg))(hw,51103U,1U,& link_reg);
    
#line 560 
    (*(hw->phy.ops.read_reg))(hw,51103U,1U,& link_reg);
    
#line 561 
    (*(hw->phy.ops.read_reg))(hw,49164U,1U,& adapt_comp_reg);
    
#line 563 
    if ((int)link_up_wait_to_complete != 0) {
      
#line 564 
      i = 0U;
      
#line 564 
      goto ldv_54808;
      ldv_54807: 
#line 565 
      ;
      
#line 565 
      if (((int)link_reg & 1) != 0 && ((int)adapt_comp_reg & 1) == 0) {
        
#line 567 
        *link_up = (_Bool)1;
        
#line 568 
        goto ldv_54806;
      }
      else 
#line 570 
           *link_up = (_Bool)0;
      
#line 572 
      msleep(100U);
      
#line 573 
      (*(hw->phy.ops.read_reg))(hw,51103U,1U,& link_reg);
      
#line 576 
      (*(hw->phy.ops.read_reg))(hw,49164U,1U,& adapt_comp_reg);
      
#line 564 
      i += 1U;
      ldv_54808: 
#line 565 
      ;
      
#line 564 
      if (i <= 89U) 
#line 566 
                    goto ldv_54807; else 
#line 569 
                                         goto ldv_54806;
      ldv_54806: 
#line 570 
      ;
    }
    else 
      
#line 581 
      if (((int)link_reg & 1) != 0 && ((int)adapt_comp_reg & 1) == 0) 
        
#line 582 
        *link_up = (_Bool)1; else 
#line 584 
                                  *link_up = (_Bool)0;
    
#line 587 
    if (! *link_up) {
      
#line 588 
      __retres = 0;
      
#line 588 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 591 
  links_reg = ixgbe_read_reg(hw,17060U);
  
#line 592 
  if ((int)link_up_wait_to_complete != 0) {
    
#line 593 
    i = 0U;
    
#line 593 
    goto ldv_54811;
    ldv_54810: 
#line 594 
    ;
    
#line 594 
    if ((links_reg & 1073741824U) != 0U) {
      
#line 595 
      *link_up = (_Bool)1;
      
#line 596 
      goto ldv_54809;
    }
    else 
#line 598 
         *link_up = (_Bool)0;
    
#line 600 
    msleep(100U);
    
#line 601 
    links_reg = ixgbe_read_reg(hw,17060U);
    
#line 593 
    i += 1U;
    ldv_54811: 
#line 594 
    ;
    
#line 593 
    if (i <= 89U) 
#line 595 
                  goto ldv_54810; else 
#line 598 
                                       goto ldv_54809;
    ldv_54809: 
#line 599 
    ;
  }
  else 
    
#line 604 
    if ((links_reg & 1073741824U) != 0U) 
#line 605 
                                         *link_up = (_Bool)1; else 
#line 607 
                                                                   *link_up = (_Bool)0;
  
#line 610 
  if ((links_reg & 536870912U) != 0U) 
#line 611 
                                      *speed = 128U; else 
#line 613 
                                                          *speed = 32U;
  
#line 615 
  if ((unsigned int)hw->device_id == 5387U && (int)*link_up != 0) {
    s32 tmp;
    
#line 615 
    tmp = ixgbe_validate_link_ready(hw);
    
#line 615 
    if (tmp != 0) 
#line 617 
                  *link_up = (_Bool)0; else ;
  }
  else ;
  
#line 619 
  __retres = 0;
  return_label: 
#line 619 
                return __retres;
}


#line 630  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82598.c"
static s32 ixgbe_setup_mac_link_82598(struct ixgbe_hw *hw, ixgbe_link_speed speed, bool autoneg_wait_to_complete)
{
  s32 __retres;
  s32 tmp_0;
  
#line 634 
  bool autoneg = (_Bool)0;
  
#line 635 
  ixgbe_link_speed link_capabilities = 0U;
  
#line 636 
  u32 curr_autoc = ixgbe_read_reg(hw,17056U);
  
#line 637 
  u32 autoc = curr_autoc;
  
#line 638 
  u32 link_mode = autoc & 57344U;
  
#line 641 
  ixgbe_get_link_capabilities_82598(hw,& link_capabilities,& autoneg);
  
#line 642 
  speed &= link_capabilities;
  
#line 644 
  if (speed == 0U) {
    
#line 645 
    __retres = -8;
    
#line 645 
    goto return_label;
  }
  else 
    
#line 648 
    if (link_mode == 32768U || link_mode == 49152U) {
      
#line 650 
      autoc &= 1073741823U;
      
#line 651 
      if ((speed & 128U) != 0U) 
#line 652 
                                autoc |= 2147483648U; else ;
      
#line 653 
      if ((speed & 32U) != 0U) 
#line 654 
                               autoc |= 1073741824U; else ;
      
#line 655 
      if (autoc != curr_autoc) 
#line 656 
                               ixgbe_write_reg(hw,17056U,autoc); else ;
    }
    else ;
  
#line 663 
  tmp_0 = ixgbe_start_mac_link_82598(hw,(_Bool)((bool)((int)autoneg_wait_to_complete) != 0));
  
#line 663 
  __retres = tmp_0;
  return_label: 
#line 663 
                return __retres;
}


#line 675  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82598.c"
static s32 ixgbe_setup_copper_link_82598(struct ixgbe_hw *hw, ixgbe_link_speed speed, bool autoneg_wait_to_complete)
{
  s32 status;
  
#line 682 
  status = (*(hw->phy.ops.setup_link_speed))(hw,speed,(_Bool)((bool)((int)autoneg_wait_to_complete) != 0));
  
#line 685 
  ixgbe_start_mac_link_82598(hw,(_Bool)((bool)((int)autoneg_wait_to_complete) != 0));
  
#line 687 
  return status;
}


#line 698  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82598.c"
static s32 ixgbe_reset_hw_82598(struct ixgbe_hw *hw)
{
  s32 __retres;
  s32 status;
  u32 ctrl;
  u32 gheccr;
  u32 i;
  u32 autoc;
  u8 analog_val;
  u32 tmp;
  
#line 701 
  s32 phy_status = 0;
  
#line 709 
  status = (*(hw->mac.ops.stop_adapter))(hw);
  
#line 710 
  if (status != 0) {
    
#line 711 
    __retres = status;
    
#line 711 
    goto return_label;
  }
  else ;
  
#line 718 
  (*(hw->mac.ops.read_analog_reg8))(hw,36U,& analog_val);
  
#line 719 
  if (((int)analog_val & 16) != 0) {
    
#line 721 
    (*(hw->mac.ops.read_analog_reg8))(hw,36U,& analog_val);
    
#line 723 
    analog_val = (unsigned char)((unsigned int)analog_val & 239U);
    
#line 724 
    (*(hw->mac.ops.write_analog_reg8))(hw,36U,(unsigned char)((int)analog_val));
    
#line 727 
    (*(hw->mac.ops.read_analog_reg8))(hw,11U,& analog_val);
    
#line 729 
    analog_val = (unsigned char)((unsigned int)analog_val & 15U);
    
#line 730 
    (*(hw->mac.ops.write_analog_reg8))(hw,11U,(unsigned char)((int)analog_val));
    
#line 733 
    (*(hw->mac.ops.read_analog_reg8))(hw,12U,& analog_val);
    
#line 735 
    analog_val = (unsigned char)((unsigned int)analog_val & 15U);
    
#line 736 
    (*(hw->mac.ops.write_analog_reg8))(hw,12U,(unsigned char)((int)analog_val));
    
#line 739 
    (*(hw->mac.ops.read_analog_reg8))(hw,13U,& analog_val);
    
#line 741 
    analog_val = (unsigned char)((unsigned int)analog_val & 15U);
    
#line 742 
    (*(hw->mac.ops.write_analog_reg8))(hw,13U,(unsigned char)((int)analog_val));
  }
  else ;
  
#line 747 
  if (! hw->phy.reset_disable) {
    
#line 751 
    phy_status = (*(hw->phy.ops.init))(hw);
    
#line 752 
    if (phy_status == -19) {
      
#line 753 
      __retres = phy_status;
      
#line 753 
      goto return_label;
    }
    else ;
    
#line 754 
    if (phy_status == -20) 
#line 755 
                           goto mac_reset_top; else ;
    
#line 757 
    (*(hw->phy.ops.reset))(hw);
  }
  else ;
  mac_reset_top: 
#line 760 
  ;
  
#line 765 
  tmp = ixgbe_read_reg(hw,0U);
  
#line 765 
  ctrl = tmp | 67108864U;
  
#line 766 
  ixgbe_write_reg(hw,0U,ctrl);
  
#line 767 
  ixgbe_read_reg(hw,8U);
  
#line 770 
  i = 0U;
  
#line 770 
  goto ldv_54841;
  ldv_54840: 
#line 771 
  ;
  
#line 771 
  __const_udelay(4295UL);
  
#line 772 
  ctrl = ixgbe_read_reg(hw,0U);
  
#line 773 
  if ((ctrl & 67108864U) == 0U) 
#line 774 
                                goto ldv_54839; else ;
  
#line 770 
  i += 1U;
  ldv_54841: 
#line 771 
  ;
  
#line 770 
  if (i <= 9U) 
#line 772 
               goto ldv_54840; else 
#line 775 
                                    goto ldv_54839;
  ldv_54839: 
#line 776 
  ;
  
#line 776 
  if ((ctrl & 67108864U) != 0U) {
    
#line 777 
    status = -15;
    {
      
#line 778 
      struct _ddebug descriptor = {.modname = "ixgbe", .function = "ixgbe_reset_hw_82598", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82598.c", .format = "Reset polling failed to complete.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))778U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 778 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 778 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"Reset polling failed to complete.\n"); else ;
    }
  }
  else ;
  
#line 781 
  msleep(50U);
  
#line 788 
  if (((int)hw->mac.flags & 1) != 0) {
    
#line 789 
    hw->mac.flags = (unsigned char)((unsigned int)hw->mac.flags & 254U);
    
#line 790 
    goto mac_reset_top;
  }
  else ;
  
#line 793 
  gheccr = ixgbe_read_reg(hw,69808U);
  
#line 794 
  gheccr &= 4292607423U;
  
#line 795 
  ixgbe_write_reg(hw,69808U,gheccr);
  
#line 802 
  autoc = ixgbe_read_reg(hw,17056U);
  
#line 803 
  if (! hw->mac.orig_link_settings_stored) {
    
#line 804 
    hw->mac.orig_autoc = autoc;
    
#line 805 
    hw->mac.orig_link_settings_stored = (_Bool)1;
  }
  else 
    
#line 806 
    if (hw->mac.orig_autoc != autoc) 
#line 807 
                                     ixgbe_write_reg(hw,17056U,hw->mac.orig_autoc); else ;
  
#line 811 
  (*(hw->mac.ops.get_mac_addr))(hw,(u8 *)(& hw->mac.perm_addr));
  
#line 817 
  (*(hw->mac.ops.init_rx_addrs))(hw);
  
#line 819 
  if (phy_status != 0) 
#line 820 
                       status = phy_status; else ;
  
#line 822 
  __retres = status;
  return_label: 
#line 822 
                return __retres;
}


#line 831  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82598.c"
static s32 ixgbe_set_vmdq_82598(struct ixgbe_hw *hw, u32 rar, u32 vmdq)
{
  s32 __retres;
  u32 rar_high;
  u32 tmp;
  u32 tmp_0;
  
#line 834 
  u32 rar_entries = hw->mac.num_rar_entries;
  
#line 837 
  if (rar >= rar_entries) {
    {
      
#line 838 
      struct _ddebug descriptor = {.modname = "ixgbe", .function = "ixgbe_set_vmdq_82598", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82598.c", .format = "RAR index %d is out of range.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))838U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 838 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 838 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"RAR index %d is out of range.\n",rar); else ;
    }
    
#line 839 
    __retres = -32;
    
#line 839 
    goto return_label;
  }
  else ;
  
#line 842 
  if (rar <= 15U) 
#line 842 
                  tmp = rar * 8U + 21508U; else 
#line 842 
                                                tmp = rar * 8U + 41476U;
  
#line 842 
  ;
  
#line 842 
  rar_high = ixgbe_read_reg(hw,tmp);
  
#line 843 
  rar_high &= 4291035135U;
  
#line 844 
  rar_high = ((vmdq << 18) & 3932160U) | rar_high;
  
#line 845 
  ;
  
#line 845 
  if (rar <= 15U) 
#line 845 
                  tmp_0 = rar * 8U + 21508U; else 
#line 845 
                                                  tmp_0 = rar * 8U + 41476U;
  
#line 845 
  ;
  
#line 845 
  ixgbe_write_reg(hw,tmp_0,rar_high);
  
#line 846 
  __retres = 0;
  return_label: 
#line 846 
                return __retres;
}


#line 855  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82598.c"
static s32 ixgbe_clear_vmdq_82598(struct ixgbe_hw *hw, u32 rar, u32 vmdq)
{
  s32 __retres;
  u32 rar_high;
  u32 tmp;
  
#line 858 
  u32 rar_entries = hw->mac.num_rar_entries;
  
#line 862 
  if (rar >= rar_entries) {
    {
      
#line 863 
      struct _ddebug descriptor = {.modname = "ixgbe", .function = "ixgbe_clear_vmdq_82598", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82598.c", .format = "RAR index %d is out of range.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))863U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 863 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 863 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"RAR index %d is out of range.\n",rar); else ;
    }
    
#line 864 
    __retres = -32;
    
#line 864 
    goto return_label;
  }
  else ;
  
#line 867 
  if (rar <= 15U) 
#line 867 
                  tmp = rar * 8U + 21508U; else 
#line 867 
                                                tmp = rar * 8U + 41476U;
  
#line 867 
  ;
  
#line 867 
  rar_high = ixgbe_read_reg(hw,tmp);
  
#line 868 
  if ((rar_high & 3932160U) != 0U) {
    u32 tmp_0;
    
#line 869 
    rar_high &= 4291035135U;
    
#line 870 
    ;
    
#line 870 
    if (rar <= 15U) 
#line 870 
                    tmp_0 = rar * 8U + 21508U; else 
#line 870 
                                                    tmp_0 = rar * 8U + 41476U;
    
#line 870 
    ;
    
#line 870 
    ixgbe_write_reg(hw,tmp_0,rar_high);
  }
  else ;
  
#line 873 
  __retres = 0;
  return_label: 
#line 873 
                return __retres;
}


#line 885  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82598.c"
static s32 ixgbe_set_vfta_82598(struct ixgbe_hw *hw, u32 vlan, u32 vind, bool vlan_on)
{
  s32 __retres;
  u32 regindex;
  u32 bitindex;
  u32 bits;
  u32 vftabyte;
  
#line 893 
  if (vlan > 4095U) {
    
#line 894 
    __retres = -5;
    
#line 894 
    goto return_label;
  }
  else ;
  
#line 897 
  regindex = (vlan >> 5) & 127U;
  
#line 900 
  vftabyte = (vlan >> 3) & 3U;
  
#line 901 
  bitindex = (vlan << 2) & 28U;
  
#line 904 
  bits = ixgbe_read_reg(hw,((vftabyte + 81U) * 128U + regindex) * 4U);
  
#line 905 
  bits = (unsigned int)(~ (15 << bitindex)) & bits;
  
#line 906 
  bits = (vind << bitindex) | bits;
  
#line 907 
  ixgbe_write_reg(hw,((vftabyte + 81U) * 128U + regindex) * 4U,bits);
  
#line 910 
  bitindex = vlan & 31U;
  
#line 912 
  bits = ixgbe_read_reg(hw,(regindex + 10240U) * 4U);
  
#line 913 
  if ((int)vlan_on != 0) 
#line 915 
                         bits = (unsigned int)(1 << bitindex) | bits; else 
                                                                    
#line 918 
                                                                    bits = (unsigned int)(~ (1 << bitindex)) & bits;
  
#line 919 
  ixgbe_write_reg(hw,(regindex + 10240U) * 4U,bits);
  
#line 921 
  __retres = 0;
  return_label: 
#line 921 
                return __retres;
}


#line 930  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82598.c"
static s32 ixgbe_clear_vfta_82598(struct ixgbe_hw *hw)
{
  s32 __retres;
  u32 offset;
  u32 vlanbyte;
  
#line 935 
  offset = 0U;
  
#line 935 
  goto ldv_54878;
  ldv_54877: 
#line 936 
  ;
  
#line 936 
  ixgbe_write_reg(hw,(offset + 10240U) * 4U,0U);
  
#line 935 
  offset += 1U;
  ldv_54878: 
#line 936 
  ;
  
#line 935 
  if (hw->mac.vft_size > offset) 
#line 937 
                                 goto ldv_54877; else 
#line 940 
                                                      goto ldv_54879;
  ldv_54879: 
#line 941 
  ;
  
#line 938 
  vlanbyte = 0U;
  
#line 938 
  goto ldv_54884;
  ldv_54883: 
#line 939 
  ;
  
#line 939 
  offset = 0U;
  
#line 939 
  goto ldv_54881;
  ldv_54880: 
#line 940 
  ;
  
#line 940 
  ixgbe_write_reg(hw,((vlanbyte + 81U) * 128U + offset) * 4U,0U);
  
#line 939 
  offset += 1U;
  ldv_54881: 
#line 940 
  ;
  
#line 939 
  if (hw->mac.vft_size > offset) 
#line 941 
                                 goto ldv_54880; else 
#line 944 
                                                      goto ldv_54882;
  ldv_54882: 
#line 945 
  ;
  
#line 938 
  vlanbyte += 1U;
  ldv_54884: 
#line 939 
  ;
  
#line 938 
  if (vlanbyte <= 3U) 
#line 940 
                      goto ldv_54883; else 
#line 943 
                                           goto ldv_54885;
  ldv_54885: 
#line 944 
  ;
  
#line 943 
  __retres = 0;
  
#line 943 
  return __retres;
}


#line 954  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82598.c"
static s32 ixgbe_read_analog_reg8_82598(struct ixgbe_hw *hw, u32 reg, u8 *val)
{
  s32 __retres;
  u32 atlas_ctl;
  
#line 958 
  ixgbe_write_reg(hw,18432U,(reg << 8) | 65536U);
  
#line 960 
  ixgbe_read_reg(hw,8U);
  
#line 961 
  __const_udelay(42950UL);
  
#line 962 
  atlas_ctl = ixgbe_read_reg(hw,18432U);
  
#line 963 
  *val = (unsigned char)atlas_ctl;
  
#line 965 
  __retres = 0;
  
#line 965 
  return __retres;
}


#line 976  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82598.c"
static s32 ixgbe_write_analog_reg8_82598(struct ixgbe_hw *hw, u32 reg, u8 val)
{
  s32 __retres;
  u32 atlas_ctl;
  
#line 980 
  atlas_ctl = (reg << 8) | (unsigned int)val;
  
#line 981 
  ixgbe_write_reg(hw,18432U,atlas_ctl);
  
#line 982 
  ixgbe_read_reg(hw,8U);
  
#line 983 
  __const_udelay(42950UL);
  
#line 985 
  __retres = 0;
  
#line 985 
  return __retres;
}


#line 997  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82598.c"
static s32 ixgbe_read_i2c_phy_82598(struct ixgbe_hw *hw, u8 dev_addr, u8 byte_offset, u8 *eeprom_data)
{
  s32 __retres;
  u16 gssr;
  u32 i;
  u32 tmp;
  s32 tmp_0;
  
#line 1000 
  s32 status = 0;
  
#line 1001 
  u16 sfp_addr = (unsigned short)0U;
  
#line 1002 
  u16 sfp_data = (unsigned short)0U;
  
#line 1003 
  u16 sfp_stat = (unsigned short)0U;
  
#line 1007 
  tmp = ixgbe_read_reg(hw,8U);
  
#line 1007 
  if ((tmp & 4U) != 0U) 
#line 1008 
                        gssr = (unsigned short)4U; else 
#line 1010 
                                                        gssr = (unsigned short)2U;
  
#line 1012 
  tmp_0 = (*(hw->mac.ops.acquire_swfw_sync))(hw,(unsigned int)gssr);
  
#line 1012 
  if (tmp_0 != 0) {
    
#line 1013 
    __retres = -16;
    
#line 1013 
    goto return_label;
  }
  else ;
  
#line 1015 
  if (hw->phy.type == (unsigned int)ixgbe_phy_nl) {
    
#line 1021 
    sfp_addr = (unsigned short)(((int)((unsigned short)dev_addr) << 8U) + (int)((unsigned short)byte_offset));
    
#line 1022 
    sfp_addr = (unsigned short)((unsigned int)sfp_addr | 256U);
    
#line 1023 
    (*(hw->phy.ops.write_reg_mdi))(hw,49930U,1U,(unsigned short)((int)sfp_addr));
    
#line 1029 
    i = 0U;
    
#line 1029 
    goto ldv_54912;
    ldv_54911: 
#line 1030 
    ;
    
#line 1030 
    (*(hw->phy.ops.read_reg_mdi))(hw,49932U,1U,& sfp_stat);
    
#line 1034 
    sfp_stat = (unsigned short)((unsigned int)sfp_stat & 3U);
    
#line 1035 
    if ((unsigned int)sfp_stat != 3U) 
#line 1036 
                                      goto ldv_54910; else ;
    
#line 1037 
    usleep_range(10000UL,20000UL);
    
#line 1029 
    i += 1U;
    ldv_54912: 
#line 1030 
    ;
    
#line 1029 
    if (i <= 99U) 
#line 1031 
                  goto ldv_54911; else 
#line 1034 
                                       goto ldv_54910;
    ldv_54910: 
#line 1035 
    ;
    
#line 1040 
    if ((unsigned int)sfp_stat != 1U) {
      {
        
#line 1041 
        struct _ddebug descriptor = {.modname = "ixgbe", .function = "ixgbe_read_i2c_phy_82598", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82598.c", .format = "EEPROM read did not pass.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1041U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
        
#line 1041 
        if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 1041 
                                                            __dynamic_netdev_dbg(& descriptor,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"EEPROM read did not pass.\n"); else ;
      }
      
#line 1042 
      status = -20;
      
#line 1043 
      goto out;
    }
    else ;
    
#line 1047 
    (*(hw->phy.ops.read_reg_mdi))(hw,49931U,1U,& sfp_data);
    
#line 1050 
    *eeprom_data = (unsigned char)((int)sfp_data >> 8);
  }
  else 
#line 1052 
       status = -3;
  out: 
#line 1055 
  ;
  
#line 1056 
  (*(hw->mac.ops.release_swfw_sync))(hw,(unsigned int)gssr);
  
#line 1057 
  __retres = status;
  return_label: 
#line 1057 
                return __retres;
}


#line 1068  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82598.c"
static s32 ixgbe_read_i2c_eeprom_82598(struct ixgbe_hw *hw, u8 byte_offset, u8 *eeprom_data)
{
  s32 tmp;
  
#line 1071 
  tmp = ixgbe_read_i2c_phy_82598(hw,(unsigned char)160,(unsigned char)((int)byte_offset),eeprom_data);
  
#line 1071 
  return tmp;
}


#line 1083  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82598.c"
static s32 ixgbe_read_i2c_sff8472_82598(struct ixgbe_hw *hw, u8 byte_offset, u8 *sff8472_data)
{
  s32 tmp;
  
#line 1086 
  tmp = ixgbe_read_i2c_phy_82598(hw,(unsigned char)162,(unsigned char)((int)byte_offset),sff8472_data);
  
#line 1086 
  return tmp;
}


#line 1098  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82598.c"
static void ixgbe_set_lan_id_multi_port_pcie_82598(struct ixgbe_hw *hw)
{
  
#line 1100 
  struct ixgbe_bus_info *bus = & hw->bus;
  
#line 1101 
  u16 pci_gen = (unsigned short)0U;
  
#line 1102 
  u16 pci_ctrl2 = (unsigned short)0U;
  
#line 1104 
  ixgbe_set_lan_id_multi_port_pcie(hw);
  
#line 1107 
  (*(hw->eeprom.ops.read))(hw,(unsigned short)6,& pci_gen);
  
#line 1108 
  if ((unsigned int)pci_gen + 65535U <= 65533U) {
    
#line 1110 
    (*(hw->eeprom.ops.read))(hw,(unsigned short)((int)((unsigned int)pci_gen + 5U)),& pci_ctrl2);
    
#line 1113 
    if ((((int)pci_ctrl2 & 2) != 0 && ((int)pci_ctrl2 & 1) == 0) && ((int)pci_ctrl2 & 8) == 0) 
      
#line 1117 
      bus->func = (unsigned short)0U; else ;
  }
  else ;
  
#line 1119 
  return;
}


#line 1129  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82598.c"
static void ixgbe_set_rxpba_82598(struct ixgbe_hw *hw, int num_pb, u32 headroom, int strategy)
{
  
#line 1132 
  u32 rxpktsize = 65536U;
  
#line 1133 
  u8 i = (unsigned char)0U;
  
#line 1135 
  if (num_pb == 0) 
#line 1136 
                   goto return_label; else ;
  
#line 1139 
  switch (strategy) {
    case 1: 
#line 1140 
    ;
    
#line 1142 
    rxpktsize = 81920U;
    
#line 1143 
    goto ldv_54942;
    ldv_54941: 
#line 1144 
    ;
    
#line 1144 
    ixgbe_write_reg(hw,(unsigned int)(((int)i + 3840) * 4),rxpktsize);
    
#line 1143 
    i = (u8)((int)i + 1);
    ldv_54942: 
#line 1144 
    ;
    
#line 1143 
    if ((unsigned int)i <= 3U) 
#line 1145 
                               goto ldv_54941; else 
#line 1148 
                                                    goto ldv_54943;
    ldv_54943: 
#line 1149 
    ;
    
#line 1146 
    rxpktsize = 49152U;
    case 0: 
#line 1148 
    ;
    default: 
#line 1149 
    ;
    
#line 1151 
    goto ldv_54947;
    ldv_54946: 
#line 1152 
    ;
    
#line 1152 
    ixgbe_write_reg(hw,(unsigned int)(((int)i + 3840) * 4),rxpktsize);
    
#line 1151 
    i = (u8)((int)i + 1);
    ldv_54947: 
#line 1152 
    ;
    
#line 1151 
    if ((unsigned int)i <= 7U) 
#line 1153 
                               goto ldv_54946; else 
#line 1156 
                                                    goto ldv_54948;
    ldv_54948: 
#line 1157 
    ;
    
#line 1153 
    goto ldv_54949;
  }
  ldv_54949: 
#line 1157 
  ;
  
#line 1157 
  i = (unsigned char)0U;
  
#line 1157 
  goto ldv_54951;
  ldv_54950: 
#line 1158 
  ;
  
#line 1158 
  ixgbe_write_reg(hw,(unsigned int)(((int)i + 13056) * 4),40960U);
  
#line 1157 
  i = (u8)((int)i + 1);
  ldv_54951: 
#line 1158 
  ;
  
#line 1157 
  if ((unsigned int)i <= 7U) 
#line 1159 
                             goto ldv_54950; else 
#line 1162 
                                                  goto ldv_54952;
  ldv_54952: 
#line 1163 
  ;
  return_label: 
#line 1164 
                return;
}


#line 1161  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82598.c"
static struct ixgbe_mac_operations mac_ops_82598 = {.init_hw = & ixgbe_init_hw_generic, .reset_hw = & ixgbe_reset_hw_82598, .start_hw = & ixgbe_start_hw_82598, .clear_hw_cntrs = & ixgbe_clear_hw_cntrs_generic, .get_media_type = & ixgbe_get_media_type_82598, .get_mac_addr = & ixgbe_get_mac_addr_generic, .get_san_mac_addr = (s32 (*)(struct ixgbe_hw *, u8 *))0, .get_device_caps = (s32 (*)(struct ixgbe_hw *, u16 *))0, .get_wwn_prefix = (s32 (*)(struct ixgbe_hw *, u16 *, u16 *))0, .stop_adapter = & ixgbe_stop_adapter_generic, .get_bus_info = & ixgbe_get_bus_info_generic, .set_lan_id = & ixgbe_set_lan_id_multi_port_pcie_82598, .read_analog_reg8 = & ixgbe_read_analog_reg8_82598, .write_analog_reg8 = & ixgbe_write_analog_reg8_82598, .setup_sfp = (s32 (*)(struct ixgbe_hw *))0, .disable_rx_buff = (s32 (*)(struct ixgbe_hw *))0, .enable_rx_buff = (s32 (*)(struct ixgbe_hw *))0, .enable_rx_dma = & ixgbe_enable_rx_dma_generic, .acquire_swfw_sync = & ixgbe_acquire_swfw_sync, .release_swfw_sync = & ixgbe_release_swfw_sync, .prot_autoc_read = & prot_autoc_read_generic, .prot_autoc_write = & prot_autoc_write_generic, .disable_tx_laser = (void (*)(struct ixgbe_hw *))0, .enable_tx_laser = (void (*)(struct ixgbe_hw *))0, .flap_tx_laser = (void (*)(struct ixgbe_hw *))0, .stop_link_on_d3 = (void (*)(struct ixgbe_hw *))0, .setup_link = & ixgbe_setup_mac_link_82598, .check_link = & ixgbe_check_mac_link_82598, .get_link_capabilities = & ixgbe_get_link_capabilities_82598, .set_rxpba = & ixgbe_set_rxpba_82598, .led_on = & ixgbe_led_on_generic, .led_off = & ixgbe_led_off_generic, .blink_led_start = & ixgbe_blink_led_start_generic, .blink_led_stop = & ixgbe_blink_led_stop_generic, .set_rar = & ixgbe_set_rar_generic, .clear_rar = & ixgbe_clear_rar_generic, .set_vmdq = & ixgbe_set_vmdq_82598, .set_vmdq_san_mac = (s32 (*)(struct ixgbe_hw *, u32 ))0, .clear_vmdq = & ixgbe_clear_vmdq_82598, .init_rx_addrs = & ixgbe_init_rx_addrs_generic, .update_mc_addr_list = & ixgbe_update_mc_addr_list_generic, .enable_mc = & ixgbe_enable_mc_generic, .disable_mc = & ixgbe_disable_mc_generic, .clear_vfta = & ixgbe_clear_vfta_82598, .set_vfta = & ixgbe_set_vfta_82598, .init_uta_tables = (s32 (*)(struct ixgbe_hw *))0, .set_mac_anti_spoofing = (void (*)(struct ixgbe_hw *, bool , int ))0, .set_vlan_anti_spoofing = (void (*)(struct ixgbe_hw *, bool , int ))0, .fc_enable = & ixgbe_fc_enable_82598, .set_fw_drv_ver = (s32 (*)(struct ixgbe_hw *, u8 , u8 , u8 , u8 ))0, .get_thermal_sensor_data = (s32 (*)(struct ixgbe_hw *))0, .init_thermal_sensor_thresh = (s32 (*)(struct ixgbe_hw *))0, .disable_rx = & ixgbe_disable_rx_generic, .enable_rx = & ixgbe_enable_rx_generic, .set_source_address_pruning = (void (*)(struct ixgbe_hw *, bool , unsigned int ))0, .set_ethertype_anti_spoofing = (void (*)(struct ixgbe_hw *, bool , int ))0, .dmac_config = (s32 (*)(struct ixgbe_hw *))0, .dmac_update_tcs = (s32 (*)(struct ixgbe_hw *))0, .dmac_config_tcs = (s32 (*)(struct ixgbe_hw *))0};

#line 1204  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82598.c"
static struct ixgbe_eeprom_operations eeprom_ops_82598 = {.init_params = & ixgbe_init_eeprom_params_generic, .read = & ixgbe_read_eerd_generic, .read_buffer = & ixgbe_read_eerd_buffer_generic, .write = & ixgbe_write_eeprom_generic, .write_buffer = & ixgbe_write_eeprom_buffer_bit_bang_generic, .validate_checksum = & ixgbe_validate_eeprom_checksum_generic, .update_checksum = & ixgbe_update_eeprom_checksum_generic, .calc_checksum = & ixgbe_calc_eeprom_checksum_generic};

#line 1215  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82598.c"
static struct ixgbe_phy_operations phy_ops_82598 = {.identify = & ixgbe_identify_phy_generic, .identify_sfp = & ixgbe_identify_module_generic, .init = & ixgbe_init_phy_ops_82598, .reset = & ixgbe_reset_phy_generic, .read_reg = & ixgbe_read_phy_reg_generic, .write_reg = & ixgbe_write_phy_reg_generic, .read_reg_mdi = & ixgbe_read_phy_reg_mdi, .write_reg_mdi = & ixgbe_write_phy_reg_mdi, .setup_link = & ixgbe_setup_phy_link_generic, .setup_internal_link = (s32 (*)(struct ixgbe_hw *))0, .setup_link_speed = & ixgbe_setup_phy_link_speed_generic, .check_link = (s32 (*)(struct ixgbe_hw *, ixgbe_link_speed *, bool *))0, .get_firmware_version = (s32 (*)(struct ixgbe_hw *, u16 *))0, .read_i2c_byte = (s32 (*)(struct ixgbe_hw *, u8 , u8 , u8 *))0, .write_i2c_byte = (s32 (*)(struct ixgbe_hw *, u8 , u8 , u8 ))0, .read_i2c_sff8472 = & ixgbe_read_i2c_sff8472_82598, .read_i2c_eeprom = & ixgbe_read_i2c_eeprom_82598, .write_i2c_eeprom = (s32 (*)(struct ixgbe_hw *, u8 , u8 ))0, .read_i2c_combined = (s32 (*)(struct ixgbe_hw *, u8 , u16 , u16 *))0, .write_i2c_combined = (s32 (*)(struct ixgbe_hw *, u8 , u16 , u16 ))0, .check_overtemp = & ixgbe_tn_check_overtemp, .set_phy_power = (s32 (*)(struct ixgbe_hw *, bool ))0, .handle_lasi = (s32 (*)(struct ixgbe_hw *))0};

#line 1231  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82598.c"
struct ixgbe_info ixgbe_82598_info = {.mac = ixgbe_mac_82598EB, .get_invariants = & ixgbe_get_invariants_82598, .mac_ops = & mac_ops_82598, .eeprom_ops = & eeprom_ops_82598, .phy_ops = & phy_ops_82598, .mbx_ops = (struct ixgbe_mbx_operations *)0, .mvals = (u32 const *)(& ixgbe_mvals_8259X)};
unsigned short __builtin_bswap16(unsigned short);

void __builtin_prefetch(void const * , ...);

void __builtin_unreachable(void);


#line 7  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_main.c.aux"
void ldv_atomic_inc(atomic_t *v);


#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/bitops.h"
__inline static void set_bit(long nr, unsigned long volatile *addr)
{
  
#line 74 
  if (0 != 0) 
#line 76 
              ldv_inline_asm(); else 
#line 79 
                                     ldv_inline_asm();
  
#line 80 
  return;
}


#line 204  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/bitops.h"
__inline static int test_and_set_bit(long nr, unsigned long volatile *addr)
{
  int __retres;
  
#line 206 
  ldv_inline_asm();
  
#line 207 
  ldv_inline_asm();
  
#line 206 
  __retres = 0;
  
#line 206 
  goto return_label;
  cc_label: 
#line 206 
  ;
  
#line 206 
  __retres = 1;
  return_label: 
#line 206 
                return __retres;
}


#line 217  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/bitops.h"
__inline static int test_and_set_bit_lock(long nr, unsigned long volatile *addr)
{
  int tmp;
  
#line 219 
  tmp = test_and_set_bit(nr,addr);
  
#line 219 
  return tmp;
}


#line 308  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/bitops.h"
__inline static int constant_test_bit(long nr, unsigned long const volatile *addr)
{
  int __retres;
  
#line 311 
  __retres = ((*(addr + (nr >> 6)) >> (nr & 63L)) & 1UL) != 0UL;
  
#line 311 
  return __retres;
}


#line 314  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/bitops.h"
__inline static int variable_test_bit(long nr, unsigned long const volatile *addr)
{
  int oldbit;
  
#line 317 
  ldv_inline_asm();
  
#line 323 
  return oldbit;
}


#line 396  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/bitops.h"
__inline static int ffs(int x)
{
  int __retres;
  int r;
  
#line 399 
  ldv_inline_asm();
  
#line 423 
  __retres = r + 1;
  
#line 423 
  return __retres;
}


#line 14  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/bitops/find.h"
unsigned long find_next_bit(unsigned long const *, unsigned long, unsigned long);


#line 42 
unsigned long find_first_bit(unsigned long const *, unsigned long);


#line 53 
unsigned long find_first_zero_bit(unsigned long const *, unsigned long);


#line 45  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/arch_hweight.h"
__inline static unsigned long __arch_hweight64(__u64 w)
{
  
#line 47 
  unsigned long res = 0UL;
  
#line 48 
  ldv_inline_asm();
  
#line 58 
  return res;
}


#line 46  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/swab.h"
__inline static __u16 __fswab16(__u16 val)
{
  __u16 tmp;
  
#line 49 
  tmp = __builtin_bswap16((unsigned short)((int)val));
  
#line 49 
  return tmp;
}


#line 78  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bitops.h"
__inline static unsigned long hweight_long(unsigned long w)
{
  unsigned long tmp_0;
  
#line 80 
  if (0 != 0) 
#line 80 
              tmp_0 = (unsigned long)((((unsigned int)((((((((((unsigned long long)w & 1ULL) != 0ULL) + (((unsigned long long)w & 2ULL) != 0ULL)) + (((unsigned long long)w & 4ULL) != 0ULL)) + (((unsigned long long)w & 8ULL) != 0ULL)) + (((unsigned long long)w & 16ULL) != 0ULL)) + (((unsigned long long)w & 32ULL) != 0ULL)) + (((unsigned long long)w & 64ULL) != 0ULL)) + (((unsigned long long)w & 128ULL) != 0ULL)) + (unsigned int)((((((((((unsigned long long)(w >> 8) & 1ULL) != 0ULL) + (((unsigned long long)(w >> 8) & 2ULL) != 0ULL)) + (((unsigned long long)(w >> 8) & 4ULL) != 0ULL)) + (((unsigned long long)(w >> 8) & 8ULL) != 0ULL)) + (((unsigned long long)(w >> 8) & 16ULL) != 0ULL)) + (((unsigned long long)(w >> 8) & 32ULL) != 0ULL)) + (((unsigned long long)(w >> 8) & 64ULL) != 0ULL)) + (((unsigned long long)(w >> 8) & 128ULL) != 0ULL))) + ((unsigned int)((((((((((unsigned long long)(w >> 16) & 1ULL) != 0ULL) + (((unsigned long long)(w >> 16) & 2ULL) != 0ULL)) + (((unsigned long long)(w >> 16) & 4ULL) != 0ULL)) + (((unsigned long long)(w >> 16) & 8ULL) != 0ULL)) + (((unsigned long long)(w >> 16) & 16ULL) != 0ULL)) + (((unsigned long long)(w >> 16) & 32ULL) != 0ULL)) + (((unsigned long long)(w >> 16) & 64ULL) != 0ULL)) + (((unsigned long long)(w >> 16) & 128ULL) != 0ULL)) + (unsigned int)((((((((((unsigned long long)(w >> 24) & 1ULL) != 0ULL) + (((unsigned long long)(w >> 24) & 2ULL) != 0ULL)) + (((unsigned long long)(w >> 24) & 4ULL) != 0ULL)) + (((unsigned long long)(w >> 24) & 8ULL) != 0ULL)) + (((unsigned long long)(w >> 24) & 16ULL) != 0ULL)) + (((unsigned long long)(w >> 24) & 32ULL) != 0ULL)) + (((unsigned long long)(w >> 24) & 64ULL) != 0ULL)) + (((unsigned long long)(w >> 24) & 128ULL) != 0ULL)))) + (((unsigned int)((((((((((unsigned long long)(w >> 32) & 1ULL) != 0ULL) + (((unsigned long long)(w >> 32) & 2ULL) != 0ULL)) + (((unsigned long long)(w >> 32) & 4ULL) != 0ULL)) + (((unsigned long long)(w >> 32) & 8ULL) != 0ULL)) + (((unsigned long long)(w >> 32) & 16ULL) != 0ULL)) + (((unsigned long long)(w >> 32) & 32ULL) != 0ULL)) + (((unsigned long long)(w >> 32) & 64ULL) != 0ULL)) + (((unsigned long long)(w >> 32) & 128ULL) != 0ULL)) + (unsigned int)((((((((((unsigned long long)(w >> 40) & 1ULL) != 0ULL) + (((unsigned long long)(w >> 40) & 2ULL) != 0ULL)) + (((unsigned long long)(w >> 40) & 4ULL) != 0ULL)) + (((unsigned long long)(w >> 40) & 8ULL) != 0ULL)) + (((unsigned long long)(w >> 40) & 16ULL) != 0ULL)) + (((unsigned long long)(w >> 40) & 32ULL) != 0ULL)) + (((unsigned long long)(w >> 40) & 64ULL) != 0ULL)) + (((unsigned long long)(w >> 40) & 128ULL) != 0ULL))) + ((unsigned int)((((((((((unsigned long long)(w >> 48) & 1ULL) != 0ULL) + (((unsigned long long)(w >> 48) & 2ULL) != 0ULL)) + (((unsigned long long)(w >> 48) & 4ULL) != 0ULL)) + (((unsigned long long)(w >> 48) & 8ULL) != 0ULL)) + (((unsigned long long)(w >> 48) & 16ULL) != 0ULL)) + (((unsigned long long)(w >> 48) & 32ULL) != 0ULL)) + (((unsigned long long)(w >> 48) & 64ULL) != 0ULL)) + (((unsigned long long)(w >> 48) & 128ULL) != 0ULL)) + (unsigned int)((((((((((unsigned long long)(w >> 56) & 1ULL) != 0ULL) + (((unsigned long long)(w >> 56) & 2ULL) != 0ULL)) + (((unsigned long long)(w >> 56) & 4ULL) != 0ULL)) + (((unsigned long long)(w >> 56) & 8ULL) != 0ULL)) + (((unsigned long long)(w >> 56) & 16ULL) != 0ULL)) + (((unsigned long long)(w >> 56) & 32ULL) != 0ULL)) + (((unsigned long long)(w >> 56) & 64ULL) != 0ULL)) + (((unsigned long long)(w >> 56) & 128ULL) != 0ULL))))); else 
                                                                    
#line 80 
                                                                    tmp_0 = __arch_hweight64((unsigned long long)w);
  
#line 80 
  return tmp_0;
}


#line 225 
unsigned long find_last_bit(unsigned long const *, unsigned long);


#line 431  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/printk.h"
void print_hex_dump(char const *, char const *, int, int, int, void const *, size_t, bool);


#line 405  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernel.h"
int snprintf(char *, size_t, char const * , ...);


#line 474 
extern enum system_states system_state;


#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list.h"
__inline static void INIT_LIST_HEAD(struct list_head *list)
{
  
#line 27 
  list->next = list;
  
#line 28 
  list->prev = list;
  
#line 29 
  return;
}


#line 609  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list.h"
__inline static int hlist_empty(struct hlist_head const *h)
{
  int __retres;
  
#line 611 
  __retres = h->first == (struct hlist_node *)0;
  
#line 611 
  return __retres;
}


#line 614  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list.h"
__inline static void __hlist_del(struct hlist_node *n)
{
  
#line 616 
  struct hlist_node *next = n->next;
  
#line 617 
  struct hlist_node **pprev = n->pprev;
  
#line 618 
  *pprev = next;
  
#line 619 
  if (next != (struct hlist_node *)0) 
#line 620 
                                      next->pprev = pprev; else ;
  
#line 621 
  return;
}


#line 623  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list.h"
__inline static void hlist_del(struct hlist_node *n)
{
  
#line 625 
  __hlist_del(n);
  
#line 626 
  n->next = (struct hlist_node *)(-2401263026317557504);
  
#line 627 
  n->pprev = (struct hlist_node **)(-2401263026316508672);
  
#line 628 
  return;
}


#line 87  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/percpu.h"
void __bad_percpu_size(void);


#line 295  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/percpu-defs.h"
void __bad_size_call_parameter(void);


#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/percpu.h"
extern unsigned long __per_cpu_offset[8192U];


#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/bug.h"
void warn_slowpath_fmt(char const *, int const, char const * , ...);


#line 71 
void warn_slowpath_null(char const *, int const);


#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/page_64.h"
unsigned long __phys_addr(unsigned long);


#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/string_64.h"
void *memcpy(void *, void const *, size_t);


#line 56 
void *memset(void *, int, size_t);


#line 65 
char *strcpy(char *, char const *);


#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/string.h"
size_t strlcpy(char *, char const *, size_t);


#line 112  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bitmap.h"
int __bitmap_weight(unsigned long const *, unsigned int);


#line 298  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bitmap.h"
__inline static int bitmap_weight(unsigned long const *src, unsigned int nbits)
{
  int __retres;
  int tmp_0;
  
#line 300 
  if (0 != 0 && nbits <= 64U) {
    unsigned long tmp;
    
#line 301 
    tmp = hweight_long(*src & (18446744073709551615UL >> (- nbits & 63U)));
    
#line 301 
    __retres = (int)tmp;
    
#line 301 
    goto return_label;
  }
  else ;
  
#line 302 
  tmp_0 = __bitmap_weight(src,nbits);
  
#line 302 
  __retres = tmp_0;
  return_label: 
#line 302 
                return __retres;
}


#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cpumask.h"
extern int nr_cpu_ids;


#line 88 
extern struct cpumask const * const cpu_possible_mask;


#line 89 
extern struct cpumask const * const cpu_online_mask;


#line 114  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cpumask.h"
__inline static unsigned int cpumask_check(unsigned int cpu)
{
  {
    bool __warned;
    
#line 117 
    int __ret_warn_once = cpu >= (unsigned int)nr_cpu_ids;
    
#line 117 
    if ((long)(__ret_warn_once != 0) != 0L) {
      int tmp;
      {
        
#line 117 
        int __ret_warn_on = ! __warned;
        
#line 117 
        if ((long)(__ret_warn_on != 0) != 0L) 
#line 117 
                                              warn_slowpath_null("include/linux/cpumask.h",117); else ;
        
#line 117 
        tmp = (long)(__ret_warn_on != 0);
      }
      
#line 117 
      if ((long)tmp != 0L) 
#line 117 
                           __warned = (_Bool)1; else ;
    }
    else ;
    
#line 117 
    long tmp_2 = (long)(__ret_warn_once != 0);
  }
  
#line 119 
  return cpu;
}


#line 184  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cpumask.h"
__inline static unsigned int cpumask_next(int n, struct cpumask const *srcp)
{
  unsigned int __retres;
  unsigned long tmp;
  
#line 187 
  if (n != -1) 
#line 188 
               cpumask_check((unsigned int)n); else ;
  
#line 189 
  tmp = find_next_bit((unsigned long const *)(& srcp->bits),(unsigned long)nr_cpu_ids,(unsigned long)(n + 1));
  
#line 189 
  __retres = (unsigned int)tmp;
  
#line 189 
  return __retres;
}


#line 474  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cpumask.h"
__inline static unsigned int cpumask_weight(struct cpumask const *srcp)
{
  unsigned int __retres;
  int tmp;
  
#line 476 
  tmp = bitmap_weight((unsigned long const *)(& srcp->bits),(unsigned int)nr_cpu_ids);
  
#line 476 
  __retres = (unsigned int)tmp;
  
#line 476 
  return __retres;
}


#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/err.h"
static void *ERR_PTR(long error);


#line 697  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/processor.h"
__inline static void prefetchw(void const *x)
{
  
#line 699 
  ldv_inline_asm();
  
#line 700 
  return;
}


#line 13  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/cmpxchg.h"
void __cmpxchg_wrong_size(void);


#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/atomic.h"
__inline static int atomic_read(atomic_t const *v)
{
  int __retres;
  int const volatile *tmp;
  {
    
#line 27 
    int const __var = 0;
    
#line 27 
    tmp = (int const volatile *)(& v->counter);
  }
  
#line 27 
  __retres = *tmp;
  
#line 27 
  return __retres;
}


#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/atomic.h"
__inline static void atomic_set(atomic_t *v, int i)
{
  
#line 39 
  v->counter = i;
  
#line 40 
  return;
}


#line 98 
static void atomic_inc(atomic_t *v);


#line 179  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/atomic.h"
__inline static int atomic_cmpxchg(atomic_t *v, int old, int new)
{
  int tmp;
  {
    int __ret;
    
#line 181 
    int __old = old;
    
#line 181 
    int __new = new;
    
#line 181 
    switch (4UL) {
      case (unsigned long)1: 
#line 181 
      ;
      {
        
#line 181 
        u8 volatile *__ptr = (u8 volatile *)(& v->counter);
        
#line 182 
        ldv_inline_asm();
        
#line 181 
        goto ldv_5991;
      }
      case (unsigned long)2: 
#line 181 
      ;
      {
        
#line 181 
        u16 volatile *__ptr_0 = (u16 volatile *)(& v->counter);
        
#line 182 
        ldv_inline_asm();
        
#line 181 
        goto ldv_5991;
      }
      case (unsigned long)4: 
#line 181 
      ;
      {
        
#line 181 
        u32 volatile *__ptr_1 = (u32 volatile *)(& v->counter);
        
#line 182 
        ldv_inline_asm();
        
#line 181 
        goto ldv_5991;
      }
      case (unsigned long)8: 
#line 181 
      ;
      {
        
#line 181 
        u64 volatile *__ptr_2 = (u64 volatile *)(& v->counter);
        
#line 182 
        ldv_inline_asm();
        
#line 181 
        goto ldv_5991;
      }
      default: 
#line 181 
      ;
      
#line 181 
      __cmpxchg_wrong_size();
    }
    ldv_5991: 
#line 181 
    ;
    
#line 181 
    tmp = __ret;
  }
  
#line 181 
  return tmp;
}


#line 20  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/preempt.h"
__inline static int preempt_count(void)
{
  int __retres;
  int tmp;
  {
    int pfo_ret__;
    
#line 22 
    switch (4UL) {
      case (unsigned long)1: 
#line 22 
      ;
      
#line 23 
      ldv_inline_asm();
      
#line 22 
      goto ldv_6320;
      case (unsigned long)2: 
#line 22 
      ;
      
#line 23 
      ldv_inline_asm();
      
#line 22 
      goto ldv_6320;
      case (unsigned long)4: 
#line 22 
      ;
      
#line 23 
      ldv_inline_asm();
      
#line 22 
      goto ldv_6320;
      case (unsigned long)8: 
#line 22 
      ;
      
#line 23 
      ldv_inline_asm();
      
#line 22 
      goto ldv_6320;
      default: 
#line 22 
      ;
      
#line 22 
      __bad_percpu_size();
    }
    ldv_6320: 
#line 22 
    ;
    
#line 22 
    tmp = pfo_ret__;
  }
  
#line 22 
  __retres = tmp & 2147483647;
  
#line 22 
  return __retres;
}


#line 70  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/preempt.h"
__inline static void __preempt_count_add(int val)
{
  int tmp;
  
#line 72 
  if (0 != 0 && (val == 1 || val == -1)) 
#line 72 
                                         tmp = val; else 
#line 72 
                                                         tmp = 0;
  
#line 72 
  int const pao_ID__ = tmp;
  
#line 72 
  switch (4UL) {
    case (unsigned long)1: 
#line 72 
    ;
    
#line 72 
    if (pao_ID__ == 1) 
#line 74 
                       ldv_inline_asm();
    else 
      
#line 72 
      if (pao_ID__ == -1) 
#line 74 
                          ldv_inline_asm(); else 
#line 77 
                                                 ldv_inline_asm();
    
#line 72 
    goto ldv_6377;
    case (unsigned long)2: 
#line 72 
    ;
    
#line 72 
    if (pao_ID__ == 1) 
#line 74 
                       ldv_inline_asm();
    else 
      
#line 72 
      if (pao_ID__ == -1) 
#line 74 
                          ldv_inline_asm(); else 
#line 77 
                                                 ldv_inline_asm();
    
#line 72 
    goto ldv_6377;
    case (unsigned long)4: 
#line 72 
    ;
    
#line 72 
    if (pao_ID__ == 1) 
#line 74 
                       ldv_inline_asm();
    else 
      
#line 72 
      if (pao_ID__ == -1) 
#line 74 
                          ldv_inline_asm(); else 
#line 77 
                                                 ldv_inline_asm();
    
#line 72 
    goto ldv_6377;
    case (unsigned long)8: 
#line 72 
    ;
    
#line 72 
    if (pao_ID__ == 1) 
#line 74 
                       ldv_inline_asm();
    else 
      
#line 72 
      if (pao_ID__ == -1) 
#line 74 
                          ldv_inline_asm(); else 
#line 77 
                                                 ldv_inline_asm();
    
#line 72 
    goto ldv_6377;
    default: 
#line 72 
    ;
    
#line 72 
    __bad_percpu_size();
  }
  ldv_6377: 
#line 72 
  ;
  
#line 74 
  return;
}


#line 75  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/preempt.h"
__inline static void __preempt_count_sub(int val)
{
  int tmp;
  
#line 77 
  if (0 != 0 && (- val == 1 || - val == -1)) 
#line 77 
                                             tmp = - val; else 
#line 77 
                                                               tmp = 0;
  
#line 77 
  int const pao_ID__ = tmp;
  
#line 77 
  switch (4UL) {
    case (unsigned long)1: 
#line 77 
    ;
    
#line 77 
    if (pao_ID__ == 1) 
#line 79 
                       ldv_inline_asm();
    else 
      
#line 77 
      if (pao_ID__ == -1) 
#line 79 
                          ldv_inline_asm(); else 
#line 82 
                                                 ldv_inline_asm();
    
#line 77 
    goto ldv_6389;
    case (unsigned long)2: 
#line 77 
    ;
    
#line 77 
    if (pao_ID__ == 1) 
#line 79 
                       ldv_inline_asm();
    else 
      
#line 77 
      if (pao_ID__ == -1) 
#line 79 
                          ldv_inline_asm(); else 
#line 82 
                                                 ldv_inline_asm();
    
#line 77 
    goto ldv_6389;
    case (unsigned long)4: 
#line 77 
    ;
    
#line 77 
    if (pao_ID__ == 1) 
#line 79 
                       ldv_inline_asm();
    else 
      
#line 77 
      if (pao_ID__ == -1) 
#line 79 
                          ldv_inline_asm(); else 
#line 82 
                                                 ldv_inline_asm();
    
#line 77 
    goto ldv_6389;
    case (unsigned long)8: 
#line 77 
    ;
    
#line 77 
    if (pao_ID__ == 1) 
#line 79 
                       ldv_inline_asm();
    else 
      
#line 77 
      if (pao_ID__ == -1) 
#line 79 
                          ldv_inline_asm(); else 
#line 82 
                                                 ldv_inline_asm();
    
#line 77 
    goto ldv_6389;
    default: 
#line 77 
    ;
    
#line 77 
    __bad_percpu_size();
  }
  ldv_6389: 
#line 77 
  ;
  
#line 79 
  return;
}


#line 7  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bottom_half.h"
void __local_bh_disable_ip(unsigned long, unsigned int);


#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bottom_half.h"
__inline static void local_bh_disable(void)
{
  __here_0: 
#line 18 
  ;
  
#line 18 
  __local_bh_disable_ip((unsigned long)((void *)0),512U);
  
#line 20 
  return;
}


#line 22 
void __local_bh_enable_ip(unsigned long, unsigned int);


#line 29  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bottom_half.h"
__inline static void local_bh_enable(void)
{
  __here_0: 
#line 31 
  ;
  
#line 31 
  __local_bh_enable_ip((unsigned long)((void *)0),512U);
  
#line 33 
  return;
}


#line 280  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockdep.h"
void lockdep_init_map(struct lockdep_map *, char const *, struct lock_class_key *, int);


#line 333 
void lock_acquire(struct lockdep_map *, unsigned int, int, int, int, struct lockdep_map *, unsigned long);


#line 337 
void lock_release(struct lockdep_map *, int, unsigned long);


#line 545 
void lockdep_rcu_suspicious(char const *, int const, char const *);


#line 93  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
void __raw_spin_lock_init(raw_spinlock_t *, char const *, struct lock_class_key *);


#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock_api_smp.h"
void _raw_spin_lock(raw_spinlock_t *);


#line 41 
void _raw_spin_unlock(raw_spinlock_t *);


#line 299  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
__inline static raw_spinlock_t *spinlock_check(spinlock_t *lock)
{
  raw_spinlock_t *__retres;
  
#line 301 
  __retres = & lock->__anonCompField_spinlock_18.rlock;
  
#line 301 
  return __retres;
}


#line 310  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_lock(spinlock_t *lock)
{
  
#line 312 
  _raw_spin_lock(& lock->__anonCompField_spinlock_18.rlock);
  
#line 313 
  return;
}


#line 346 
static void ldv_spin_lock_60(spinlock_t *lock);


#line 358 
static void ldv_spin_lock_82(spinlock_t *lock);


#line 362 
static void ldv_spin_lock_85(spinlock_t *lock);


#line 363  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_unlock(spinlock_t *lock)
{
  
#line 365 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_18.rlock);
  
#line 366 
  return;
}


#line 395 
static void ldv_spin_unlock_63(spinlock_t *lock);


#line 407 
static void ldv_spin_unlock_83(spinlock_t *lock);


#line 411 
static void ldv_spin_unlock_86(spinlock_t *lock);


#line 74  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_main.c.aux"
void ldv_spin_model_lock(char *);


#line 75 
void ldv_spin_model_unlock(char *);


#line 29  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/err.h"
void *ldv_err_ptr(long error);


#line 23  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/slab.h"
void *ldv_kzalloc(size_t size, gfp_t flags);


#line 25 
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags);


#line 78  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/jiffies.h"
extern unsigned long volatile jiffies;


#line 268  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rcupdate.h"
__inline static void __rcu_read_lock(void)
{
  
#line 270 
  __preempt_count_add(1);
  
#line 271 
  ldv_inline_asm();
  
#line 272 
  return;
}


#line 273  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rcupdate.h"
__inline static void __rcu_read_unlock(void)
{
  
#line 275 
  ldv_inline_asm();
  
#line 275 
  __preempt_count_sub(1);
  
#line 276 
  return;
}


#line 104  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rcutree.h"
bool rcu_is_watching(void);


#line 447  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rcupdate.h"
__inline static void rcu_lock_acquire(struct lockdep_map *map)
{
  __here_0: 
#line 449 
  ;
  
#line 449 
  ;
  
#line 449 
  lock_acquire(map,0U,0,2,0,(struct lockdep_map *)0,(unsigned long)((void *)0));
  
#line 451 
  return;
}


#line 452  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rcupdate.h"
__inline static void rcu_lock_release(struct lockdep_map *map)
{
  __here_0: 
#line 454 
  ;
  
#line 454 
  ;
  
#line 454 
  lock_release(map,1,(unsigned long)((void *)0));
  
#line 456 
  return;
}


#line 457 
extern struct lockdep_map rcu_lock_map;


#line 461 
int debug_lockdep_rcu_enabled(void);


#line 843  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rcupdate.h"
__inline static void rcu_read_lock(void)
{
  
#line 845 
  __rcu_read_lock();
  
#line 847 
  rcu_lock_acquire(& rcu_lock_map);
  {
    bool __warned;
    int tmp;
    
#line 848 
    tmp = debug_lockdep_rcu_enabled();
    
#line 848 
    if (tmp != 0) {
      
#line 848 
      if (! __warned) {
        int tmp_1;
        bool tmp_0;
        
#line 848 
        tmp_0 = rcu_is_watching();
        
#line 848 
        if (tmp_0) 
#line 848 
                   tmp_1 = 0; else 
#line 848 
                                   tmp_1 = 1;
        
#line 848 
        if (tmp_1) {
          
#line 848 
          __warned = (_Bool)1;
          
#line 848 
          lockdep_rcu_suspicious("include/linux/rcupdate.h",849,"rcu_read_lock() used illegally while idle");
        }
        else ;
      }
      else ;
    }
    else ;
  }
  
#line 851 
  return;
}


#line 897  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rcupdate.h"
__inline static void rcu_read_unlock(void)
{
  {
    bool __warned;
    int tmp;
    
#line 899 
    tmp = debug_lockdep_rcu_enabled();
    
#line 899 
    if (tmp != 0) {
      
#line 899 
      if (! __warned) {
        int tmp_1;
        bool tmp_0;
        
#line 899 
        tmp_0 = rcu_is_watching();
        
#line 899 
        if (tmp_0) 
#line 899 
                   tmp_1 = 0; else 
#line 899 
                                   tmp_1 = 1;
        
#line 899 
        if (tmp_1) {
          
#line 899 
          __warned = (_Bool)1;
          
#line 899 
          lockdep_rcu_suspicious("include/linux/rcupdate.h",900,"rcu_read_unlock() used illegally while idle");
        }
        else ;
      }
      else ;
    }
    else ;
  }
  
#line 902 
  __rcu_read_unlock();
  
#line 903 
  rcu_lock_release(& rcu_lock_map);
  
#line 904 
  return;
}


#line 88  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timer.h"
void init_timer_key(struct timer_list *, unsigned int, char const *, struct lock_class_key *);


#line 173 
static int ldv_mod_timer_84(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2);


#line 177 
static int ldv_mod_timer_89(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2);


#line 232 
static int ldv_del_timer_sync_87(struct timer_list *ldv_func_arg1);


#line 181  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/workqueue.h"
void __init_work(struct work_struct *, int);


#line 444 
bool cancel_work_sync(struct work_struct *);


#line 560 
static bool ldv_schedule_work_73(struct work_struct *work);


#line 564 
static bool ldv_schedule_work_90(struct work_struct *work);


#line 158  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/memory_hotplug.h"
extern pg_data_t *node_data[];


#line 58  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/io.h"
__inline static unsigned int readl(void const volatile *addr)
{
  unsigned int ret;
  
#line 59 
  ldv_inline_asm();
  
#line 58 
  return ret;
}


#line 181 
void *ioremap_nocache(resource_size_t, unsigned long);


#line 190  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/io.h"
__inline static void *ioremap(resource_size_t offset, unsigned long size)
{
  void *tmp;
  
#line 192 
  tmp = ioremap_nocache(offset,size);
  
#line 192 
  return tmp;
}


#line 195 
void iounmap(void volatile *);


#line 75  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/topology.h"
__inline static int numa_node_id(void)
{
  int tmp_3;
  {
    int pscr_ret__;
    {
      
#line 77 
      void const *__vpp_verify = (void const *)0;
      
#line 77 
      void const *tmp = __vpp_verify;
    }
    
#line 77 
    switch (4UL) {
      int tmp_0;
      int tmp_0_0;
      int tmp_1;
      int tmp_2;
      case (unsigned long)1: 
#line 77 
      ;
      {
        int pfo_ret__;
        
#line 77 
        switch (4UL) {
          case (unsigned long)1: 
#line 77 
          ;
          
#line 78 
          ldv_inline_asm();
          
#line 77 
          goto ldv_14288;
          case (unsigned long)2: 
#line 77 
          ;
          
#line 78 
          ldv_inline_asm();
          
#line 77 
          goto ldv_14288;
          case (unsigned long)4: 
#line 77 
          ;
          
#line 78 
          ldv_inline_asm();
          
#line 77 
          goto ldv_14288;
          case (unsigned long)8: 
#line 77 
          ;
          
#line 78 
          ldv_inline_asm();
          
#line 77 
          goto ldv_14288;
          default: 
#line 77 
          ;
          
#line 77 
          __bad_percpu_size();
        }
        ldv_14288: 
#line 77 
        ;
        
#line 77 
        tmp_0 = pfo_ret__;
      }
      
#line 77 
      pscr_ret__ = tmp_0;
      
#line 77 
      goto ldv_14294;
      case (unsigned long)2: 
#line 77 
      ;
      {
        int pfo_ret___0;
        
#line 77 
        switch (4UL) {
          case (unsigned long)1: 
#line 77 
          ;
          
#line 78 
          ldv_inline_asm();
          
#line 77 
          goto ldv_14298;
          case (unsigned long)2: 
#line 77 
          ;
          
#line 78 
          ldv_inline_asm();
          
#line 77 
          goto ldv_14298;
          case (unsigned long)4: 
#line 77 
          ;
          
#line 78 
          ldv_inline_asm();
          
#line 77 
          goto ldv_14298;
          case (unsigned long)8: 
#line 77 
          ;
          
#line 78 
          ldv_inline_asm();
          
#line 77 
          goto ldv_14298;
          default: 
#line 77 
          ;
          
#line 77 
          __bad_percpu_size();
        }
        ldv_14298: 
#line 77 
        ;
        
#line 77 
        tmp_0_0 = pfo_ret___0;
      }
      
#line 77 
      pscr_ret__ = tmp_0_0;
      
#line 77 
      goto ldv_14294;
      case (unsigned long)4: 
#line 77 
      ;
      {
        int pfo_ret___1;
        
#line 77 
        switch (4UL) {
          case (unsigned long)1: 
#line 77 
          ;
          
#line 78 
          ldv_inline_asm();
          
#line 77 
          goto ldv_14307;
          case (unsigned long)2: 
#line 77 
          ;
          
#line 78 
          ldv_inline_asm();
          
#line 77 
          goto ldv_14307;
          case (unsigned long)4: 
#line 77 
          ;
          
#line 78 
          ldv_inline_asm();
          
#line 77 
          goto ldv_14307;
          case (unsigned long)8: 
#line 77 
          ;
          
#line 78 
          ldv_inline_asm();
          
#line 77 
          goto ldv_14307;
          default: 
#line 77 
          ;
          
#line 77 
          __bad_percpu_size();
        }
        ldv_14307: 
#line 77 
        ;
        
#line 77 
        tmp_1 = pfo_ret___1;
      }
      
#line 77 
      pscr_ret__ = tmp_1;
      
#line 77 
      goto ldv_14294;
      case (unsigned long)8: 
#line 77 
      ;
      {
        int pfo_ret___2;
        
#line 77 
        switch (4UL) {
          case (unsigned long)1: 
#line 77 
          ;
          
#line 78 
          ldv_inline_asm();
          
#line 77 
          goto ldv_14316;
          case (unsigned long)2: 
#line 77 
          ;
          
#line 78 
          ldv_inline_asm();
          
#line 77 
          goto ldv_14316;
          case (unsigned long)4: 
#line 77 
          ;
          
#line 78 
          ldv_inline_asm();
          
#line 77 
          goto ldv_14316;
          case (unsigned long)8: 
#line 77 
          ;
          
#line 78 
          ldv_inline_asm();
          
#line 77 
          goto ldv_14316;
          default: 
#line 77 
          ;
          
#line 77 
          __bad_percpu_size();
        }
        ldv_14316: 
#line 77 
        ;
        
#line 77 
        tmp_2 = pfo_ret___2;
      }
      
#line 77 
      pscr_ret__ = tmp_2;
      
#line 77 
      goto ldv_14294;
      default: 
#line 77 
      ;
      
#line 77 
      __bad_size_call_parameter();
      
#line 77 
      goto ldv_14294;
    }
    ldv_14294: 
#line 77 
    ;
    
#line 77 
    tmp_3 = pscr_ret__;
  }
  
#line 77 
  return tmp_3;
}


#line 166  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/topology.h"
__inline static int numa_mem_id(void)
{
  int tmp;
  
#line 168 
  tmp = numa_node_id();
  
#line 168 
  return tmp;
}


#line 263  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/gfp.h"
__inline static int gfp_zonelist(gfp_t flags)
{
  int __retres;
  
#line 265 
  if ((long)((flags & 262144U) != 0U) != 0L) {
    
#line 266 
    __retres = 1;
    
#line 266 
    goto return_label;
  }
  else ;
  
#line 268 
  __retres = 0;
  return_label: 
#line 268 
                return __retres;
}


#line 280  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/gfp.h"
__inline static struct zonelist *node_zonelist(int nid, gfp_t flags)
{
  struct zonelist *__retres;
  int tmp;
  
#line 282 
  tmp = gfp_zonelist(flags);
  
#line 282 
  ;
  
#line 282 
  __retres = (struct zonelist *)(& (node_data[nid])->node_zonelists) + tmp;
  
#line 282 
  return __retres;
}


#line 293 
struct page *__alloc_pages_nodemask(gfp_t, unsigned int, struct zonelist *, nodemask_t *);


#line 297  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/gfp.h"
__inline static struct page *__alloc_pages(gfp_t gfp_mask, unsigned int order, struct zonelist *zonelist)
{
  struct page *tmp;
  
#line 300 
  tmp = __alloc_pages_nodemask(gfp_mask,order,zonelist,(nodemask_t *)0);
  
#line 300 
  return tmp;
}


#line 303  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/gfp.h"
__inline static struct page *alloc_pages_node(int nid, gfp_t gfp_mask, unsigned int order)
{
  struct page *tmp_0;
  struct zonelist *tmp;
  
#line 307 
  if (nid < 0) 
#line 308 
               nid = numa_node_id(); else ;
  
#line 310 
  tmp = node_zonelist(nid,gfp_mask);
  
#line 310 
  ;
  
#line 310 
  ;
  
#line 310 
  tmp_0 = __alloc_pages(gfp_mask,order,tmp);
  
#line 310 
  return tmp_0;
}


#line 366 
void __free_pages(struct page *, unsigned int);


#line 317  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
int driver_for_each_device(struct device_driver *, struct device *, void *, int (*)(struct device *, void *));


#line 104  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm_wakeup.h"
int device_set_wakeup_enable(struct device *, bool);


#line 846  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
__inline static int dev_to_node(struct device *dev)
{
  int __retres;
  
#line 848 
  __retres = dev->numa_node;
  
#line 848 
  return __retres;
}


#line 850  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
__inline static void set_dev_node(struct device *dev, int node)
{
  
#line 852 
  dev->numa_node = node;
  
#line 853 
  return;
}


#line 864  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
__inline static void *dev_get_drvdata(struct device const *dev)
{
  void *__retres;
  
#line 866 
  __retres = dev->driver_data;
  
#line 866 
  return __retres;
}


#line 869  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
__inline static void dev_set_drvdata(struct device *dev, void *data)
{
  
#line 871 
  dev->driver_data = data;
  
#line 872 
  return;
}


#line 1085 
void dev_warn(struct device const *, char const * , ...);


#line 542  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/slab.h"
static void *kcalloc(size_t n, size_t size, gfp_t flags);


#line 581 
static void *kzalloc(size_t size, gfp_t flags);


#line 401  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
__inline static int pci_channel_offline(struct pci_dev *pdev)
{
  int __retres;
  
#line 403 
  __retres = pdev->error_state != 1U;
  
#line 403 
  return __retres;
}


#line 814 
void pci_dev_put(struct pci_dev *);


#line 837 
int pci_find_ext_capability(struct pci_dev *, int);


#line 843 
struct pci_dev *pci_get_device(unsigned int, unsigned int, struct pci_dev *);


#line 861 
int pci_bus_read_config_word(struct pci_bus *, unsigned int, int, u16 *);


#line 863 
int pci_bus_read_config_dword(struct pci_bus *, unsigned int, int, u32 *);


#line 867 
int pci_bus_write_config_word(struct pci_bus *, unsigned int, int, u16);


#line 887  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
__inline static int pci_read_config_word(struct pci_dev const *dev, int where, u16 *val)
{
  int tmp;
  
#line 889 
  tmp = pci_bus_read_config_word(dev->bus,dev->devfn,where,val);
  
#line 889 
  return tmp;
}


#line 891  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
__inline static int pci_read_config_dword(struct pci_dev const *dev, int where, u32 *val)
{
  int tmp;
  
#line 894 
  tmp = pci_bus_read_config_dword(dev->bus,dev->devfn,where,val);
  
#line 894 
  return tmp;
}


#line 900  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
__inline static int pci_write_config_word(struct pci_dev const *dev, int where, u16 val)
{
  int tmp;
  
#line 902 
  tmp = pci_bus_write_config_word(dev->bus,dev->devfn,where,(unsigned short)((int)val));
  
#line 902 
  return tmp;
}


#line 910 
int pcie_capability_read_word(struct pci_dev *, int, u16 *);


#line 914 
int pcie_capability_clear_and_set_word(struct pci_dev *, int, u16, u16);


#line 919  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
__inline static int pcie_capability_set_word(struct pci_dev *dev, int pos, u16 set)
{
  int tmp;
  
#line 922 
  tmp = pcie_capability_clear_and_set_word(dev,pos,(unsigned short)0,(unsigned short)((int)set));
  
#line 922 
  return tmp;
}


#line 953 
int pci_enable_device_mem(struct pci_dev *);


#line 968 
void pci_disable_device(struct pci_dev *);


#line 971 
void pci_set_master(struct pci_dev *);


#line 987 
int pci_wait_for_pending_transaction(struct pci_dev *);


#line 995 
int pcie_get_minimum_link(struct pci_dev *, enum pci_bus_speed *, enum pcie_link_width *);


#line 1013 
int pci_select_bars(struct pci_dev *, unsigned long);


#line 1026 
int pci_save_state(struct pci_dev *);


#line 1027 
void pci_restore_state(struct pci_dev *);


#line 1040 
int pci_set_power_state(struct pci_dev *, pci_power_t);


#line 1046 
int pci_wake_from_d3(struct pci_dev *, bool);


#line 1047 
int pci_prepare_to_sleep(struct pci_dev *);


#line 1100 
int pci_request_selected_regions(struct pci_dev *, int, char const *);


#line 1102 
void pci_release_selected_regions(struct pci_dev *, int);


#line 1146 
static int ldv___pci_register_driver_96(struct pci_driver *ldv_func_arg1, struct module *ldv_func_arg2, char const *ldv_func_arg3);


#line 1158 
static void ldv_pci_unregister_driver_97(struct pci_driver *ldv_func_arg1);


#line 400  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/page-flags.h"
__inline static int PageTail(struct page const *page)
{
  int tmp;
  
#line 400 
  tmp = constant_test_bit(15L,(unsigned long const volatile *)(& page->flags));
  
#line 400 
  return tmp;
}


#line 440  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm.h"
__inline static struct page *compound_head_by_tail(struct page *tail)
{
  struct page *__retres;
  int tmp;
  
#line 442 
  struct page *head = tail->__anonCompField_page_48.first_page;
  
#line 443 
  ldv_inline_asm();
  
#line 450 
  tmp = PageTail((struct page const *)tail);
  
#line 450 
  if ((long)(tmp != 0) != 0L) {
    
#line 451 
    __retres = head;
    
#line 451 
    goto return_label;
  }
  else ;
  
#line 452 
  __retres = tail;
  return_label: 
#line 452 
                return __retres;
}


#line 461  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm.h"
__inline static struct page *compound_head(struct page *page)
{
  struct page *__retres;
  int tmp_0;
  
#line 463 
  tmp_0 = PageTail((struct page const *)page);
  
#line 463 
  if ((long)(tmp_0 != 0) != 0L) {
    struct page *tmp;
    
#line 464 
    tmp = compound_head_by_tail(page);
    
#line 464 
    __retres = tmp;
    
#line 464 
    goto return_label;
  }
  else ;
  
#line 465 
  __retres = page;
  return_label: 
#line 465 
                return __retres;
}


#line 496  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm.h"
__inline static int page_count(struct page *page)
{
  int tmp_0;
  struct page *tmp;
  
#line 498 
  tmp = compound_head(page);
  
#line 498 
  tmp_0 = atomic_read((atomic_t const *)(& tmp->__anonCompField_page_44.__anonCompField___anonstruct_160_43.__anonCompField___anonunion_162_42._count));
  
#line 498 
  return tmp_0;
}


#line 760  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm.h"
__inline static int page_to_nid(struct page const *page)
{
  int __retres;
  
#line 762 
  __retres = (int)(page->flags >> 54UL);
  
#line 762 
  return __retres;
}


#line 945  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm.h"
__inline static void *lowmem_page_address(struct page const *page)
{
  void *__retres;
  
#line 947 
  __retres = (void *)((unsigned long)((unsigned long long)(((long)page + 24189255811072L) / 64L) << 12) + 18446612132314218496UL);
  
#line 947 
  return __retres;
}


#line 1031  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm.h"
__inline static bool page_is_pfmemalloc(struct page *page)
{
  bool __retres;
  
#line 1037 
  __retres = (_Bool)(page->__anonCompField_page_44.__anonCompField___anonstruct_160_39.index == 18446744073709551615UL);
  
#line 1037 
  return __retres;
}


#line 1216  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
void pci_disable_msix(struct pci_dev *);


#line 73  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dma-mapping.h"
__inline static int valid_dma_direction(int dma_direction)
{
  int __retres;
  
#line 76 
  __retres = (unsigned int)dma_direction <= 2U;
  
#line 76 
  return __retres;
}


#line 131  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kmemcheck.h"
__inline static void kmemcheck_mark_initialized(void *address, unsigned int n)
{
  
#line 133 
  return;
}


#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dma-debug.h"
void debug_dma_map_page(struct device *, struct page *, size_t, size_t, int, dma_addr_t, bool);


#line 42 
void debug_dma_mapping_error(struct device *, dma_addr_t);


#line 44 
void debug_dma_unmap_page(struct device *, dma_addr_t, size_t, int, bool);


#line 67 
void debug_dma_sync_single_range_for_cpu(struct device *, dma_addr_t, unsigned long, size_t, int);


#line 73 
void debug_dma_sync_single_range_for_device(struct device *, dma_addr_t, unsigned long, size_t, int);


#line 30  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/dma-mapping.h"
extern struct dma_map_ops *dma_ops;


#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/dma-mapping.h"
__inline static struct dma_map_ops *get_dma_ops(struct device *dev)
{
  struct dma_map_ops *__retres;
  
#line 37 
  if ((long)(dev == (struct device *)0) != 0L || dev->archdata.dma_ops == (struct dma_map_ops *)0) {
    
#line 38 
    __retres = dma_ops;
    
#line 38 
    goto return_label;
  }
  else {
    
#line 40 
    __retres = dev->archdata.dma_ops;
    
#line 40 
    goto return_label;
  }
  return_label: 
#line 37 
                return __retres;
}


#line 10  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/dma-mapping-common.h"
__inline static dma_addr_t dma_map_single_attrs(struct device *dev, void *ptr, size_t size, enum dma_data_direction dir, struct dma_attrs *attrs)
{
  dma_addr_t addr;
  int tmp_0;
  unsigned long tmp_1;
  unsigned long tmp_2;
  
#line 15 
  struct dma_map_ops *ops = get_dma_ops(dev);
  
#line 18 
  kmemcheck_mark_initialized(ptr,(unsigned int)size);
  
#line 19 
  tmp_0 = valid_dma_direction((int)dir);
  
#line 19 
  if ((long)(tmp_0 == 0) != 0L) {
    
#line 21 
    ldv_inline_asm();
    
#line 19 
    ;
  }
  else ;
  
#line 20 
  ;
  
#line 20 
  ;
  
#line 20 
  ;
  
#line 20 
  ;
  
#line 20 
  tmp_1 = __phys_addr((unsigned long)ptr);
  
#line 20 
  ;
  
#line 20 
  addr = (*(ops->map_page))(dev,(struct page *)(-24189255811072) + (tmp_1 >> 12),(unsigned long)ptr & 4095UL,size,dir,attrs);
  
#line 23 
  ;
  
#line 23 
  ;
  
#line 23 
  ;
  
#line 23 
  ;
  
#line 23 
  tmp_2 = __phys_addr((unsigned long)ptr);
  
#line 23 
  ;
  
#line 23 
  debug_dma_map_page(dev,(struct page *)(-24189255811072) + (tmp_2 >> 12),(unsigned long)ptr & 4095UL,size,(int)dir,addr,(_Bool)1);
  
#line 26 
  return addr;
}


#line 29  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/dma-mapping-common.h"
__inline static void dma_unmap_single_attrs(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir, struct dma_attrs *attrs)
{
  int tmp_0;
  
#line 34 
  struct dma_map_ops *ops = get_dma_ops(dev);
  
#line 36 
  tmp_0 = valid_dma_direction((int)dir);
  
#line 36 
  if ((long)(tmp_0 == 0) != 0L) {
    
#line 38 
    ldv_inline_asm();
    
#line 36 
    ;
  }
  else ;
  
#line 37 
  if (ops->unmap_page != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *))0) 
    
#line 38 
    (*(ops->unmap_page))(dev,addr,size,dir,attrs); else ;
  
#line 39 
  debug_dma_unmap_page(dev,addr,size,(int)dir,(_Bool)1);
  
#line 40 
  return;
}


#line 76  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/dma-mapping-common.h"
__inline static dma_addr_t dma_map_page(struct device *dev, struct page *page, size_t offset, size_t size, enum dma_data_direction dir)
{
  dma_addr_t addr;
  void *tmp_0;
  int tmp_1;
  
#line 80 
  struct dma_map_ops *ops = get_dma_ops(dev);
  
#line 83 
  ;
  
#line 83 
  tmp_0 = lowmem_page_address((struct page const *)page);
  
#line 83 
  ;
  
#line 83 
  kmemcheck_mark_initialized(tmp_0 + offset,(unsigned int)size);
  
#line 84 
  tmp_1 = valid_dma_direction((int)dir);
  
#line 84 
  if ((long)(tmp_1 == 0) != 0L) {
    
#line 86 
    ldv_inline_asm();
    
#line 84 
    ;
  }
  else ;
  
#line 85 
  addr = (*(ops->map_page))(dev,page,offset,size,dir,(struct dma_attrs *)0);
  
#line 86 
  debug_dma_map_page(dev,page,offset,size,(int)dir,addr,(_Bool)0);
  
#line 88 
  return addr;
}


#line 91  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/dma-mapping-common.h"
__inline static void dma_unmap_page(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir)
{
  int tmp_0;
  
#line 94 
  struct dma_map_ops *ops = get_dma_ops(dev);
  
#line 96 
  tmp_0 = valid_dma_direction((int)dir);
  
#line 96 
  if ((long)(tmp_0 == 0) != 0L) {
    
#line 98 
    ldv_inline_asm();
    
#line 96 
    ;
  }
  else ;
  
#line 97 
  if (ops->unmap_page != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *))0) 
    
#line 98 
    (*(ops->unmap_page))(dev,addr,size,dir,(struct dma_attrs *)0); else ;
  
#line 99 
  debug_dma_unmap_page(dev,addr,size,(int)dir,(_Bool)0);
  
#line 100 
  return;
}


#line 126  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/dma-mapping-common.h"
__inline static void dma_sync_single_range_for_cpu(struct device *dev, dma_addr_t addr, unsigned long offset, size_t size, enum dma_data_direction dir)
{
  int tmp_0;
  
#line 132 
  struct dma_map_ops const *ops = get_dma_ops(dev);
  
#line 134 
  tmp_0 = valid_dma_direction((int)dir);
  
#line 134 
  if ((long)(tmp_0 == 0) != 0L) {
    
#line 136 
    ldv_inline_asm();
    
#line 134 
    ;
  }
  else ;
  
#line 135 
  if (ops->sync_single_for_cpu != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ))0) 
    
#line 136 
    (*(ops->sync_single_for_cpu))(dev,addr + (unsigned long long)offset,size,dir); else ;
  
#line 137 
  debug_dma_sync_single_range_for_cpu(dev,addr,offset,size,(int)dir);
  
#line 138 
  return;
}


#line 140  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/dma-mapping-common.h"
__inline static void dma_sync_single_range_for_device(struct device *dev, dma_addr_t addr, unsigned long offset, size_t size, enum dma_data_direction dir)
{
  int tmp_0;
  
#line 146 
  struct dma_map_ops const *ops = get_dma_ops(dev);
  
#line 148 
  tmp_0 = valid_dma_direction((int)dir);
  
#line 148 
  if ((long)(tmp_0 == 0) != 0L) {
    
#line 150 
    ldv_inline_asm();
    
#line 148 
    ;
  }
  else ;
  
#line 149 
  if (ops->sync_single_for_device != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ))0) 
    
#line 150 
    (*(ops->sync_single_for_device))(dev,addr + (unsigned long long)offset,size,dir); else ;
  
#line 151 
  debug_dma_sync_single_range_for_device(dev,addr,offset,size,(int)dir);
  
#line 152 
  return;
}


#line 47  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/dma-mapping.h"
__inline static int dma_mapping_error(struct device *dev, dma_addr_t dma_addr)
{
  int __retres;
  
#line 49 
  struct dma_map_ops *ops = get_dma_ops(dev);
  
#line 50 
  debug_dma_mapping_error(dev,dma_addr);
  
#line 51 
  if (ops->mapping_error != (int (*)(struct device *, dma_addr_t ))0) {
    int tmp_0;
    
#line 52 
    tmp_0 = (*(ops->mapping_error))(dev,dma_addr);
    
#line 52 
    __retres = tmp_0;
    
#line 52 
    goto return_label;
  }
  else ;
  
#line 54 
  __retres = dma_addr == 0ULL;
  return_label: 
#line 54 
                return __retres;
}


#line 60 
int dma_supported(struct device *, u64);


#line 61 
int dma_set_mask(struct device *, u64);


#line 131 
void *dma_alloc_attrs(struct device *, size_t, dma_addr_t *, gfp_t, struct dma_attrs *);


#line 136 
void dma_free_attrs(struct device *, size_t, void *, dma_addr_t, struct dma_attrs *);


#line 101  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dma-mapping.h"
__inline static int dma_set_coherent_mask(struct device *dev, u64 mask)
{
  int __retres;
  int tmp;
  
#line 103 
  tmp = dma_supported(dev,mask);
  
#line 103 
  if (tmp == 0) {
    
#line 104 
    __retres = -5;
    
#line 104 
    goto return_label;
  }
  else ;
  
#line 105 
  dev->coherent_dma_mask = mask;
  
#line 106 
  __retres = 0;
  return_label: 
#line 106 
                return __retres;
}


#line 116  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dma-mapping.h"
__inline static int dma_set_mask_and_coherent(struct device *dev, u64 mask)
{
  
#line 118 
  int rc = dma_set_mask(dev,mask);
  
#line 119 
  if (rc == 0) 
#line 120 
               dma_set_coherent_mask(dev,mask); else ;
  
#line 121 
  return rc;
}


#line 1471  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
__inline static void *pci_get_drvdata(struct pci_dev *pdev)
{
  void *tmp;
  
#line 1473 
  tmp = dev_get_drvdata((struct device const *)(& pdev->dev));
  
#line 1473 
  return tmp;
}


#line 1476  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
__inline static void pci_set_drvdata(struct pci_dev *pdev, void *data)
{
  
#line 1478 
  dev_set_drvdata(& pdev->dev,data);
  
#line 1479 
  return;
}


#line 1676 
int pci_sriov_set_totalvfs(struct pci_dev *, u16);


#line 1718  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
__inline static int pci_pcie_cap(struct pci_dev *dev)
{
  int __retres;
  
#line 1720 
  __retres = (int)dev->pcie_cap;
  
#line 1720 
  return __retres;
}


#line 1729  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
__inline static bool pci_is_pcie(struct pci_dev *dev)
{
  bool __retres;
  int tmp;
  
#line 1731 
  tmp = pci_pcie_cap(dev);
  
#line 1731 
  __retres = (_Bool)(tmp != 0);
  
#line 1731 
  return __retres;
}


#line 1738  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
__inline static u16 pcie_caps_reg(struct pci_dev const *dev)
{
  u16 __retres;
  
#line 1740 
  __retres = dev->pcie_flags_reg;
  
#line 1740 
  return __retres;
}


#line 1747  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
__inline static int pci_pcie_type(struct pci_dev const *dev)
{
  int __retres;
  u16 tmp;
  
#line 1749 
  tmp = pcie_caps_reg(dev);
  
#line 1749 
  __retres = ((int)tmp >> 4) & 15;
  
#line 1749 
  return __retres;
}


#line 1857  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
__inline static struct device_node *pci_device_to_OF_node(struct pci_dev const *pdev)
{
  struct device_node *tmp;
  
#line 1859 
  if (pdev != (struct pci_dev const *)0) 
#line 1859 
                                         tmp = pdev->dev.of_node; else 
                                                                    
#line 1859 
                                                                    tmp = (struct device_node *)0;
  
#line 1859 
  return tmp;
}


#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dynamic_queue_limits.h"
__inline static void dql_queued(struct dql *dql, unsigned int count)
{
  
#line 74 
  if ((long)(count > 268435455U) != 0L) {
    
#line 76 
    ldv_inline_asm();
    
#line 74 
    ;
  }
  else ;
  
#line 76 
  dql->last_obj_cnt = count;
  
#line 77 
  ldv_inline_asm();
  
#line 85 
  dql->num_queued += count;
  
#line 86 
  return;
}


#line 89  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dynamic_queue_limits.h"
__inline static int dql_avail(struct dql const *dql)
{
  int __retres;
  unsigned int const volatile *tmp;
  unsigned int const volatile *tmp_0;
  {
    
#line 91 
    unsigned int const __var = 0U;
    
#line 91 
    tmp = (unsigned int const volatile *)(& dql->adj_limit);
  }
  {
    
#line 91 
    unsigned int const __var_0 = 0U;
    
#line 91 
    tmp_0 = (unsigned int const volatile *)(& dql->num_queued);
  }
  
#line 91 
  ;
  
#line 91 
  __retres = (int)(*tmp - *tmp_0);
  
#line 91 
  return __retres;
}


#line 95 
void dql_completed(struct dql *, unsigned int);


#line 98 
void dql_reset(struct dql *);


#line 220  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/net.h"
int net_ratelimit(void);


#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/checksum_64.h"
__inline static __sum16 csum_fold(__wsum sum)
{
  __sum16 __retres;
  
#line 24 
  ldv_inline_asm();
  
#line 29 
  __retres = (unsigned short)(~ sum >> 16);
  
#line 29 
  return __retres;
}


#line 87  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/checksum_64.h"
__inline static __wsum csum_tcpudp_nofold(__be32 saddr, __be32 daddr, unsigned short len, unsigned short proto, __wsum sum)
{
  
#line 89 
  ldv_inline_asm();
  
#line 97 
  return sum;
}


#line 112  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/checksum_64.h"
__inline static __sum16 csum_tcpudp_magic(__be32 saddr, __be32 daddr, unsigned short len, unsigned short proto, __wsum sum)
{
  __sum16 tmp_0;
  __wsum tmp;
  
#line 116 
  tmp = csum_tcpudp_nofold(saddr,daddr,(unsigned short)((int)len),(unsigned short)((int)proto),sum);
  
#line 116 
  tmp_0 = csum_fold(tmp);
  
#line 116 
  return tmp_0;
}


#line 179 
__sum16 csum_ipv6_magic(struct in6_addr const *, struct in6_addr const *, __u32, unsigned short, __wsum);


#line 230  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static unsigned int skb_frag_size(skb_frag_t const *frag)
{
  unsigned int __retres;
  
#line 232 
  __retres = frag->size;
  
#line 232 
  return __retres;
}


#line 245  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void skb_frag_size_sub(skb_frag_t *frag, int delta)
{
  
#line 247 
  frag->size -= (unsigned int)delta;
  
#line 248 
  return;
}


#line 775 
void consume_skb(struct sk_buff *);


#line 852 
int pskb_expand_head(struct sk_buff *, int, int, gfp_t);


#line 862 
int skb_pad(struct sk_buff *, int);


#line 926  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void skb_set_hash(struct sk_buff *skb, __u32 hash, enum pkt_hash_types type)
{
  
#line 928 
  skb->l4_hash = (unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))(type == (unsigned int)PKT_HASH_TYPE_L4);
  
#line 929 
  skb->sw_hash = (unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U;
  
#line 930 
  skb->hash = hash;
  
#line 931 
  return;
}


#line 976  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static unsigned char *skb_end_pointer(struct sk_buff const *skb)
{
  unsigned char *__retres;
  
#line 978 
  __retres = skb->head + skb->end;
  
#line 978 
  return __retres;
}


#line 1085  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static struct sk_buff *skb_get(struct sk_buff *skb)
{
  
#line 1087 
  atomic_inc(& skb->users);
  
#line 1088 
  return skb;
}


#line 1127  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static int skb_header_cloned(struct sk_buff const *skb)
{
  int __retres;
  int dataref;
  unsigned char *tmp;
  
#line 1131 
  if ((unsigned int)*((unsigned char *)skb + 142UL) == 0U) {
    
#line 1132 
    __retres = 0;
    
#line 1132 
    goto return_label;
  }
  else ;
  
#line 1134 
  tmp = skb_end_pointer(skb);
  
#line 1134 
  dataref = atomic_read((atomic_t const *)(& ((struct skb_shared_info *)tmp)->dataref));
  
#line 1135 
  dataref = (dataref & 65535) - (dataref >> 16);
  
#line 1136 
  __retres = dataref != 1;
  return_label: 
#line 1136 
                return __retres;
}


#line 1567  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static bool skb_is_nonlinear(struct sk_buff const *skb)
{
  bool __retres;
  
#line 1569 
  __retres = (_Bool)(skb->data_len != 0U);
  
#line 1569 
  return __retres;
}


#line 1572  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static unsigned int skb_headlen(struct sk_buff const *skb)
{
  unsigned int __retres;
  
#line 1574 
  __retres = skb->len - skb->data_len;
  
#line 1574 
  return __retres;
}


#line 1639 
void skb_add_rx_frag(struct sk_buff *, int, struct page *, int, int, unsigned int);


#line 1650  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static unsigned char *skb_tail_pointer(struct sk_buff const *skb)
{
  unsigned char *__retres;
  
#line 1652 
  __retres = skb->head + skb->tail;
  
#line 1652 
  return __retres;
}


#line 1689  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static unsigned char *__skb_put(struct sk_buff *skb, unsigned int len)
{
  bool tmp_1;
  
#line 1691 
  unsigned char *tmp = skb_tail_pointer((struct sk_buff const *)skb);
  
#line 1692 
  tmp_1 = skb_is_nonlinear((struct sk_buff const *)skb);
  
#line 1692 
  if ((long)((int)tmp_1 != 0) != 0L) {
    
#line 1694 
    ldv_inline_asm();
    
#line 1692 
    ;
  }
  else ;
  
#line 1693 
  skb->tail += len;
  
#line 1694 
  skb->len += len;
  
#line 1695 
  return tmp;
}


#line 1719 
unsigned char *__pskb_pull_tail(struct sk_buff *, int);


#line 1735  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static int pskb_may_pull(struct sk_buff *skb, unsigned int len)
{
  int __retres;
  unsigned int tmp;
  unsigned char *tmp_1;
  unsigned int tmp_0;
  
#line 1737 
  tmp = skb_headlen((struct sk_buff const *)skb);
  
#line 1737 
  ;
  
#line 1737 
  if ((long)(tmp >= len) != 0L) {
    
#line 1738 
    __retres = 1;
    
#line 1738 
    goto return_label;
  }
  else ;
  
#line 1739 
  if ((long)(skb->len < len) != 0L) {
    
#line 1740 
    __retres = 0;
    
#line 1740 
    goto return_label;
  }
  else ;
  
#line 1741 
  tmp_0 = skb_headlen((struct sk_buff const *)skb);
  
#line 1741 
  ;
  
#line 1741 
  ;
  
#line 1741 
  tmp_1 = __pskb_pull_tail(skb,(int)(len - tmp_0));
  
#line 1741 
  __retres = tmp_1 != (unsigned char *)0U;
  return_label: 
#line 1741 
                return __retres;
}


#line 1750  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static unsigned int skb_headroom(struct sk_buff const *skb)
{
  unsigned int __retres;
  
#line 1752 
  __retres = (unsigned int)((long)skb->data - (long)skb->head);
  
#line 1752 
  return __retres;
}


#line 1880  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static unsigned char *skb_transport_header(struct sk_buff const *skb)
{
  unsigned char *__retres;
  
#line 1882 
  __retres = skb->head + (int)skb->transport_header;
  
#line 1882 
  return __retres;
}


#line 1897  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static unsigned char *skb_network_header(struct sk_buff const *skb)
{
  unsigned char *__retres;
  
#line 1899 
  __retres = skb->head + (int)skb->network_header;
  
#line 1899 
  return __retres;
}


#line 1967  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static int skb_transport_offset(struct sk_buff const *skb)
{
  int __retres;
  unsigned char *tmp;
  
#line 1969 
  tmp = skb_transport_header(skb);
  
#line 1969 
  ;
  
#line 1969 
  __retres = (int)((long)tmp - (long)skb->data);
  
#line 1969 
  return __retres;
}


#line 1972  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static u32 skb_network_header_len(struct sk_buff const *skb)
{
  u32 __retres;
  
#line 1974 
  __retres = (unsigned int)((int)skb->transport_header - (int)skb->network_header);
  
#line 1974 
  return __retres;
}


#line 1982  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static int skb_network_offset(struct sk_buff const *skb)
{
  int __retres;
  unsigned char *tmp;
  
#line 1984 
  tmp = skb_network_header(skb);
  
#line 1984 
  ;
  
#line 1984 
  __retres = (int)((long)tmp - (long)skb->data);
  
#line 1984 
  return __retres;
}


#line 2198 
struct sk_buff *__napi_alloc_skb(struct napi_struct *, unsigned int, gfp_t);


#line 2200  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static struct sk_buff *napi_alloc_skb(struct napi_struct *napi, unsigned int length)
{
  struct sk_buff *tmp;
  
#line 2203 
  tmp = __napi_alloc_skb(napi,length,32U);
  
#line 2203 
  return tmp;
}


#line 2215  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static struct page *__dev_alloc_pages(gfp_t gfp_mask, unsigned int order)
{
  struct page *tmp;
  
#line 2226 
  gfp_mask |= 24832U;
  
#line 2228 
  tmp = alloc_pages_node(-1,gfp_mask,order);
  
#line 2228 
  return tmp;
}


#line 2231  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static struct page *dev_alloc_pages(unsigned int order)
{
  struct page *tmp;
  
#line 2233 
  tmp = __dev_alloc_pages(32U,order);
  
#line 2233 
  return tmp;
}


#line 2272  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static struct page *skb_frag_page(skb_frag_t const *frag)
{
  struct page *__retres;
  
#line 2274 
  __retres = frag->page.p;
  
#line 2274 
  return __retres;
}


#line 2330  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void *skb_frag_address(skb_frag_t const *frag)
{
  void *__retres;
  void *tmp_0;
  struct page *tmp;
  
#line 2332 
  tmp = skb_frag_page(frag);
  
#line 2332 
  tmp_0 = lowmem_page_address((struct page const *)tmp);
  
#line 2332 
  ;
  
#line 2332 
  __retres = tmp_0 + frag->page_offset;
  
#line 2332 
  return __retres;
}


#line 2390  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static dma_addr_t skb_frag_dma_map(struct device *dev, skb_frag_t const *frag, size_t offset, size_t size, enum dma_data_direction dir)
{
  dma_addr_t tmp_0;
  struct page *tmp;
  
#line 2395 
  ;
  
#line 2395 
  ;
  
#line 2395 
  ;
  
#line 2395 
  tmp = skb_frag_page(frag);
  
#line 2395 
  ;
  
#line 2395 
  tmp_0 = dma_map_page(dev,tmp,(unsigned long)frag->page_offset + offset,size,dir);
  
#line 2395 
  return tmp_0;
}


#line 2427  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static int __skb_cow(struct sk_buff *skb, unsigned int headroom, int cloned)
{
  int __retres;
  unsigned int tmp_0;
  
#line 2430 
  int delta = 0;
  
#line 2432 
  tmp_0 = skb_headroom((struct sk_buff const *)skb);
  
#line 2432 
  ;
  
#line 2432 
  if (tmp_0 < headroom) {
    unsigned int tmp;
    
#line 2433 
    tmp = skb_headroom((struct sk_buff const *)skb);
    
#line 2433 
    delta = (int)(headroom - tmp);
  }
  else ;
  
#line 2435 
  if (delta != 0 || cloned != 0) {
    int tmp_5;
    int tmp_2;
    int tmp_4;
    {
      int tmp_1;
      
#line 2436 
      int _max1 = 32;
      
#line 2436 
      int _max2 = 64;
      
#line 2436 
      if (_max1 > _max2) 
#line 2436 
                         tmp_1 = _max1; else 
#line 2436 
                                             tmp_1 = _max2;
      
#line 2436 
      tmp_2 = tmp_1;
    }
    {
      int tmp_3;
      
#line 2436 
      int _max1_0 = 32;
      
#line 2436 
      int _max2_0 = 64;
      
#line 2436 
      if (_max1_0 > _max2_0) 
#line 2436 
                             tmp_3 = _max1_0; else 
#line 2436 
                                                   tmp_3 = _max2_0;
      
#line 2436 
      tmp_4 = tmp_3;
    }
    
#line 2436 
    ;
    
#line 2436 
    ;
    
#line 2436 
    tmp_5 = pskb_expand_head(skb,((tmp_2 + -1) + delta) & ~ (tmp_4 + -1),0,32U);
    
#line 2436 
    __retres = tmp_5;
    
#line 2436 
    goto return_label;
  }
  else ;
  
#line 2438 
  __retres = 0;
  return_label: 
#line 2438 
                return __retres;
}


#line 2468  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static int skb_cow_head(struct sk_buff *skb, unsigned int headroom)
{
  int tmp_0;
  int tmp;
  
#line 2470 
  tmp = skb_header_cloned((struct sk_buff const *)skb);
  
#line 2470 
  ;
  
#line 2470 
  ;
  
#line 2470 
  tmp_0 = __skb_cow(skb,headroom,tmp);
  
#line 2470 
  return tmp_0;
}


#line 2501  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static int skb_put_padto(struct sk_buff *skb, unsigned int len)
{
  int __retres;
  
#line 2503 
  unsigned int size = skb->len;
  
#line 2505 
  if ((long)(size < len) != 0L) {
    int tmp;
    
#line 2506 
    len -= size;
    
#line 2507 
    tmp = skb_pad(skb,(int)len);
    
#line 2507 
    if (tmp != 0) {
      
#line 2508 
      __retres = -12;
      
#line 2508 
      goto return_label;
    }
    else ;
    
#line 2509 
    __skb_put(skb,len);
  }
  else ;
  
#line 2511 
  __retres = 0;
  return_label: 
#line 2511 
                return __retres;
}


#line 2703 
int skb_copy_bits(struct sk_buff const *, int, void *, int);


#line 2751  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void *__skb_header_pointer(struct sk_buff const *skb, int offset, int len, void *data, int hlen, void *buffer)
{
  void *__retres;
  
#line 2754 
  if (hlen - offset >= len) {
    
#line 2755 
    __retres = data + offset;
    
#line 2755 
    goto return_label;
  }
  else ;
  
#line 2757 
  if (skb == (struct sk_buff const *)0) {
    
#line 2759 
    __retres = (void *)0;
    
#line 2759 
    goto return_label;
  }
  else {
    int tmp;
    
#line 2757 
    tmp = skb_copy_bits(skb,offset,buffer,len);
    
#line 2757 
    if (tmp < 0) {
      
#line 2759 
      __retres = (void *)0;
      
#line 2759 
      goto return_label;
    }
    else ;
  }
  
#line 2761 
  __retres = buffer;
  return_label: 
#line 2761 
                return __retres;
}


#line 2765  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void *skb_header_pointer(struct sk_buff const *skb, int offset, int len, void *buffer)
{
  void *tmp_0;
  unsigned int tmp;
  
#line 2767 
  ;
  
#line 2768 
  tmp = skb_headlen(skb);
  
#line 2767 
  ;
  
#line 2767 
  ;
  
#line 2767 
  ;
  
#line 2767 
  ;
  
#line 2767 
  tmp_0 = __skb_header_pointer(skb,offset,len,(void *)skb->data,(int)tmp,buffer);
  
#line 2767 
  return tmp_0;
}


#line 2803  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void skb_copy_to_linear_data(struct sk_buff *skb, void const *from, unsigned int const len)
{
  
#line 2807 
  memcpy((void *)skb->data,from,(unsigned long)len);
  
#line 2808 
  return;
}


#line 2865 
void skb_clone_tx_timestamp(struct sk_buff *);


#line 2911 
void skb_tstamp_tx(struct sk_buff *, struct skb_shared_hwtstamps *);


#line 2914  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void sw_tx_timestamp(struct sk_buff *skb)
{
  unsigned char *tmp;
  
#line 2916 
  tmp = skb_end_pointer((struct sk_buff const *)skb);
  
#line 2916 
  ;
  
#line 2916 
  if (((int)((struct skb_shared_info *)tmp)->tx_flags & 2) != 0) {
    unsigned char *tmp_0;
    
#line 2917 
    tmp_0 = skb_end_pointer((struct sk_buff const *)skb);
    
#line 2916 
    ;
    
#line 2916 
    if (((int)((struct skb_shared_info *)tmp_0)->tx_flags & 4) == 0) 
      
#line 2918 
      skb_tstamp_tx(skb,(struct skb_shared_hwtstamps *)0); else ;
  }
  else ;
  
#line 2919 
  return;
}


#line 2933  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void skb_tx_timestamp(struct sk_buff *skb)
{
  
#line 2935 
  skb_clone_tx_timestamp(skb);
  
#line 2936 
  sw_tx_timestamp(skb);
  
#line 2937 
  return;
}


#line 3305  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void skb_record_rx_queue(struct sk_buff *skb, u16 rx_queue)
{
  
#line 3307 
  skb->queue_mapping = (unsigned short)((unsigned int)rx_queue + 1U);
  
#line 3308 
  return;
}


#line 3310  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static u16 skb_get_rx_queue(struct sk_buff const *skb)
{
  u16 __retres;
  
#line 3312 
  __retres = (unsigned short)((unsigned int)skb->queue_mapping + 65535U);
  
#line 3312 
  return __retres;
}


#line 3315  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static bool skb_rx_queue_recorded(struct sk_buff const *skb)
{
  bool __retres;
  
#line 3317 
  __retres = (_Bool)((unsigned int)skb->queue_mapping != 0U);
  
#line 3317 
  return __retres;
}


#line 3384  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static bool skb_is_gso(struct sk_buff const *skb)
{
  bool __retres;
  unsigned char *tmp;
  
#line 3386 
  tmp = skb_end_pointer(skb);
  
#line 3386 
  ;
  
#line 3386 
  __retres = (_Bool)((unsigned int)((struct skb_shared_info *)tmp)->gso_size != 0U);
  
#line 3386 
  return __retres;
}


#line 3390  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static bool skb_is_gso_v6(struct sk_buff const *skb)
{
  bool __retres;
  unsigned char *tmp;
  
#line 3392 
  tmp = skb_end_pointer(skb);
  
#line 3392 
  ;
  
#line 3392 
  __retres = (_Bool)(((int)((struct skb_shared_info *)tmp)->gso_type & 16) != 0);
  
#line 3392 
  return __retres;
}


#line 3426  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void skb_checksum_none_assert(struct sk_buff const *skb)
{
  
#line 3428 
  return;
}


#line 71  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/u64_stats_sync.h"
__inline static void u64_stats_init(struct u64_stats_sync *syncp)
{
  
#line 73 
  return;
}


#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/u64_stats_sync.h"
__inline static unsigned int u64_stats_fetch_begin_irq(struct u64_stats_sync const *syncp)
{
  unsigned int __retres;
  
#line 131 
  __retres = 0U;
  
#line 131 
  return __retres;
}


#line 135  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/u64_stats_sync.h"
__inline static bool u64_stats_fetch_retry_irq(struct u64_stats_sync const *syncp, unsigned int start)
{
  bool __retres;
  
#line 144 
  __retres = (_Bool)0;
  
#line 144 
  return __retres;
}


#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/hardirq.h"
void synchronize_irq(unsigned int);


#line 141  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/interrupt.h"
static int ldv_request_irq_74(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev);


#line 145 
static int ldv_request_irq_75(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev);


#line 149 
static int ldv_request_irq_77(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev);


#line 153 
static int ldv_request_irq_78(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev);


#line 165 
static void ldv_free_irq_76(unsigned int ldv_func_arg1, void *ldv_func_arg2);


#line 169 
static void ldv_free_irq_79(unsigned int ldv_func_arg1, void *ldv_func_arg2);


#line 173 
static void ldv_free_irq_80(unsigned int ldv_func_arg1, void *ldv_func_arg2);


#line 177 
static void ldv_free_irq_81(unsigned int ldv_func_arg1, void *ldv_func_arg2);


#line 263 
int irq_set_affinity_hint(unsigned int, struct cpumask const *);


#line 45  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mii.h"
__inline static struct mii_ioctl_data *if_mii(struct ifreq *rq)
{
  struct mii_ioctl_data *__retres;
  
#line 47 
  __retres = (struct mii_ioctl_data *)(& rq->ifr_ifru);
  
#line 47 
  return __retres;
}


#line 35  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dcbnl.h"
u8 dcb_ieee_getapp_mask(struct net_device *, struct dcb_app *);


#line 391  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
void __napi_schedule(struct napi_struct *);


#line 394  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static bool napi_disable_pending(struct napi_struct *n)
{
  bool __retres;
  int tmp;
  
#line 396 
  tmp = constant_test_bit(1L,(unsigned long const volatile *)(& n->state));
  
#line 396 
  __retres = (_Bool)(tmp != 0);
  
#line 396 
  return __retres;
}


#line 408  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static bool napi_schedule_prep(struct napi_struct *n)
{
  bool __retres;
  int tmp_2;
  int tmp_0;
  bool tmp;
  
#line 410 
  tmp = napi_disable_pending(n);
  
#line 410 
  if (tmp) 
#line 410 
           tmp_0 = 0; else 
#line 410 
                           tmp_0 = 1;
  
#line 410 
  if (tmp_0) {
    int tmp_1;
    
#line 410 
    tmp_1 = test_and_set_bit(0L,(unsigned long volatile *)(& n->state));
    
#line 410 
    if (tmp_1 == 0) 
#line 410 
                    tmp_2 = 1; else 
#line 410 
                                    tmp_2 = 0;
  }
  else 
#line 410 
       tmp_2 = 0;
  
#line 410 
  __retres = (_Bool)(tmp_2 != 0);
  
#line 410 
  return __retres;
}


#line 421  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void napi_schedule(struct napi_struct *n)
{
  bool tmp;
  
#line 423 
  tmp = napi_schedule_prep(n);
  
#line 423 
  if ((int)tmp != 0) 
#line 424 
                     __napi_schedule(n); else ;
  
#line 425 
  return;
}


#line 450 
void napi_complete_done(struct napi_struct *, int);


#line 458  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void napi_complete(struct napi_struct *n)
{
  
#line 460 
  napi_complete_done(n,0);
  
#line 461 
  return;
}


#line 496 
void napi_disable(struct napi_struct *);


#line 505  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void napi_enable(struct napi_struct *n)
{
  int tmp;
  
#line 507 
  tmp = constant_test_bit(0L,(unsigned long const volatile *)(& n->state));
  
#line 507 
  if ((long)(tmp == 0) != 0L) {
    
#line 509 
    ldv_inline_asm();
    
#line 507 
    ;
  }
  else ;
  
#line 509 
  ldv_inline_asm();
  
#line 509 
  set_bit(0L,(unsigned long volatile *)(& n->state));
  
#line 510 
  return;
}


#line 1771  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static int netdev_get_prio_tc_map(struct net_device const *dev, u32 prio)
{
  int __retres;
  
#line 1773 
  __retres = (int)dev->prio_tc_map[prio & 15U];
  
#line 1773 
  return __retres;
}


#line 1777  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static int netdev_set_prio_tc_map(struct net_device *dev, u8 prio, u8 tc)
{
  int __retres;
  
#line 1779 
  if ((int)dev->num_tc <= (int)tc) {
    
#line 1780 
    __retres = -22;
    
#line 1780 
    goto return_label;
  }
  else ;
  
#line 1782 
  dev->prio_tc_map[(int)prio & 15] = (unsigned char)((unsigned int)tc & 15U);
  
#line 1783 
  __retres = 0;
  return_label: 
#line 1783 
                return __retres;
}


#line 1787  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void netdev_reset_tc(struct net_device *dev)
{
  
#line 1789 
  dev->num_tc = (unsigned char)0U;
  
#line 1790 
  memset((void *)(& dev->tc_to_txq),0,64UL);
  
#line 1791 
  memset((void *)(& dev->prio_tc_map),0,16UL);
  
#line 1792 
  return;
}


#line 1806  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static int netdev_set_num_tc(struct net_device *dev, u8 num_tc)
{
  int __retres;
  
#line 1808 
  if ((unsigned int)num_tc > 16U) {
    
#line 1809 
    __retres = -22;
    
#line 1809 
    goto return_label;
  }
  else ;
  
#line 1811 
  dev->num_tc = num_tc;
  
#line 1812 
  __retres = 0;
  return_label: 
#line 1812 
                return __retres;
}


#line 1816  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static int netdev_get_num_tc(struct net_device *dev)
{
  int __retres;
  
#line 1818 
  __retres = (int)dev->num_tc;
  
#line 1818 
  return __retres;
}


#line 1822  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static struct netdev_queue *netdev_get_tx_queue(struct net_device const *dev, unsigned int index)
{
  struct netdev_queue *__retres;
  
#line 1825 
  __retres = dev->_tx + index;
  
#line 1825 
  return __retres;
}


#line 1880  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void *netdev_priv(struct net_device const *dev)
{
  void *__retres;
  
#line 1882 
  __retres = (void *)dev + 3008U;
  
#line 1882 
  return __retres;
}


#line 2205 
static void ldv_free_netdev_93(struct net_device *ldv_func_arg1);


#line 2209 
static void ldv_free_netdev_95(struct net_device *ldv_func_arg1);


#line 2505 
void netif_schedule_queue(struct netdev_queue *);


#line 2515  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void netif_tx_start_queue(struct netdev_queue *dev_queue)
{
  
#line 2517 
  set_bit(0L,(unsigned long volatile *)(& dev_queue->state));
  
#line 2518 
  return;
}


#line 2531  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void netif_tx_start_all_queues(struct net_device *dev)
{
  unsigned int i;
  
#line 2535 
  i = 0U;
  
#line 2535 
  goto ldv_44874;
  ldv_44873: 
#line 2536 
  ;
  {
    
#line 2536 
    struct netdev_queue *txq = netdev_get_tx_queue((struct net_device const *)dev,i);
    
#line 2537 
    netif_tx_start_queue(txq);
  }
  
#line 2535 
  i += 1U;
  ldv_44874: 
#line 2536 
  ;
  
#line 2535 
  if (dev->num_tx_queues > i) 
#line 2537 
                              goto ldv_44873; else 
#line 2540 
                                                   goto ldv_44875;
  ldv_44875: 
#line 2541 
  ;
  
#line 2542 
  return;
}


#line 2541 
void netif_tx_wake_queue(struct netdev_queue *);


#line 2555  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void netif_tx_wake_all_queues(struct net_device *dev)
{
  unsigned int i;
  
#line 2559 
  i = 0U;
  
#line 2559 
  goto ldv_44887;
  ldv_44886: 
#line 2560 
  ;
  {
    
#line 2560 
    struct netdev_queue *txq = netdev_get_tx_queue((struct net_device const *)dev,i);
    
#line 2561 
    netif_tx_wake_queue(txq);
  }
  
#line 2559 
  i += 1U;
  ldv_44887: 
#line 2560 
  ;
  
#line 2559 
  if (dev->num_tx_queues > i) 
#line 2561 
                              goto ldv_44886; else 
#line 2564 
                                                   goto ldv_44888;
  ldv_44888: 
#line 2565 
  ;
  
#line 2566 
  return;
}


#line 2582 
void netif_tx_stop_all_queues(struct net_device *);


#line 2584  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static bool netif_tx_queue_stopped(struct netdev_queue const *dev_queue)
{
  bool __retres;
  int tmp;
  
#line 2586 
  tmp = constant_test_bit(0L,(unsigned long const volatile *)(& dev_queue->state));
  
#line 2586 
  __retres = (_Bool)(tmp != 0);
  
#line 2586 
  return __retres;
}


#line 2600  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static bool netif_xmit_stopped(struct netdev_queue const *dev_queue)
{
  bool __retres;
  
#line 2602 
  __retres = (_Bool)((dev_queue->state & 3UL) != 0UL);
  
#line 2602 
  return __retres;
}


#line 2645  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void netdev_tx_sent_queue(struct netdev_queue *dev_queue, unsigned int bytes)
{
  int tmp;
  int tmp_0;
  
#line 2649 
  dql_queued(& dev_queue->dql,bytes);
  
#line 2651 
  tmp = dql_avail((struct dql const *)(& dev_queue->dql));
  
#line 2651 
  if ((long)(tmp >= 0) != 0L) 
#line 2652 
                              goto return_label; else ;
  
#line 2654 
  set_bit(1L,(unsigned long volatile *)(& dev_queue->state));
  
#line 2655 
  ldv_inline_asm();
  
#line 2664 
  tmp_0 = dql_avail((struct dql const *)(& dev_queue->dql));
  
#line 2664 
  if ((long)(tmp_0 >= 0) != 0L) 
#line 2665 
                                set_bit(1L,(unsigned long volatile *)(& dev_queue->state)); else ;
  return_label: 
#line 2666 
                return;
}


#line 2683  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void netdev_tx_completed_queue(struct netdev_queue *dev_queue, unsigned int pkts, unsigned int bytes)
{
  int tmp;
  int tmp_0;
  
#line 2687 
  if ((long)(bytes == 0U) != 0L) 
#line 2688 
                                 goto return_label; else ;
  
#line 2690 
  dql_completed(& dev_queue->dql,bytes);
  
#line 2691 
  ldv_inline_asm();
  
#line 2699 
  tmp = dql_avail((struct dql const *)(& dev_queue->dql));
  
#line 2699 
  if (tmp < 0) 
#line 2700 
               goto return_label; else ;
  
#line 2702 
  tmp_0 = test_and_set_bit(1L,(unsigned long volatile *)(& dev_queue->state));
  
#line 2702 
  if (tmp_0 != 0) 
#line 2703 
                  netif_schedule_queue(dev_queue); else ;
  return_label: 
#line 2704 
                return;
}


#line 2723  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void netdev_tx_reset_queue(struct netdev_queue *q)
{
  
#line 2726 
  set_bit(1L,(unsigned long volatile *)(& q->state));
  
#line 2727 
  dql_reset(& q->dql);
  
#line 2728 
  return;
}


#line 2769  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static bool netif_running(struct net_device const *dev)
{
  bool __retres;
  int tmp;
  
#line 2771 
  tmp = constant_test_bit(0L,(unsigned long const volatile *)(& dev->state));
  
#line 2771 
  __retres = (_Bool)(tmp != 0);
  
#line 2771 
  return __retres;
}


#line 2788  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void netif_start_subqueue(struct net_device *dev, u16 queue_index)
{
  
#line 2790 
  struct netdev_queue *txq = netdev_get_tx_queue((struct net_device const *)dev,(unsigned int)queue_index);
  
#line 2792 
  netif_tx_start_queue(txq);
  
#line 2793 
  return;
}


#line 2815  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static bool __netif_subqueue_stopped(struct net_device const *dev, u16 queue_index)
{
  bool tmp_0;
  
#line 2818 
  struct netdev_queue *txq = netdev_get_tx_queue(dev,(unsigned int)queue_index);
  
#line 2820 
  tmp_0 = netif_tx_queue_stopped((struct netdev_queue const *)txq);
  
#line 2820 
  return tmp_0;
}


#line 2829 
void netif_wake_subqueue(struct net_device *, u16);


#line 2832 
int netif_set_xps_queue(struct net_device *, struct cpumask const *, u16);


#line 2867 
int netif_set_real_num_tx_queues(struct net_device *, unsigned int);


#line 2870 
int netif_set_real_num_rx_queues(struct net_device *, unsigned int);


#line 2900 
void __dev_kfree_skb_any(struct sk_buff *, enum skb_free_reason);


#line 2931  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void dev_kfree_skb_any(struct sk_buff *skb)
{
  
#line 2933 
  __dev_kfree_skb_any(skb,(enum skb_free_reason)SKB_REASON_DROPPED);
  
#line 2934 
  return;
}


#line 2936  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void dev_consume_skb_any(struct sk_buff *skb)
{
  
#line 2938 
  __dev_kfree_skb_any(skb,(enum skb_free_reason)SKB_REASON_CONSUMED);
  
#line 2939 
  return;
}


#line 2943 
int netif_receive_skb_sk(struct sock *, struct sk_buff *);


#line 2944  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static int netif_receive_skb(struct sk_buff *skb)
{
  int tmp;
  
#line 2946 
  tmp = netif_receive_skb_sk(skb->sk,skb);
  
#line 2946 
  return tmp;
}


#line 2948 
gro_result_t napi_gro_receive(struct napi_struct *, struct sk_buff *);


#line 2949 
void napi_gro_flush(struct napi_struct *, bool);


#line 3038  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static bool netif_carrier_ok(struct net_device const *dev)
{
  bool __retres;
  int tmp;
  
#line 3040 
  tmp = constant_test_bit(2L,(unsigned long const volatile *)(& dev->state));
  
#line 3040 
  __retres = (_Bool)(tmp == 0);
  
#line 3040 
  return __retres;
}


#line 3047 
void netif_carrier_on(struct net_device *);


#line 3049 
void netif_carrier_off(struct net_device *);


#line 3117 
void netif_device_detach(struct net_device *);


#line 3119 
void netif_device_attach(struct net_device *);


#line 3159  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static u32 netif_msg_init(int debug_value, int default_msg_enable_bits)
{
  u32 __retres;
  
#line 3162 
  if ((unsigned int)debug_value > 31U) {
    
#line 3163 
    __retres = (unsigned int)default_msg_enable_bits;
    
#line 3163 
    goto return_label;
  }
  else ;
  
#line 3164 
  if (debug_value == 0) {
    
#line 3165 
    __retres = 0U;
    
#line 3165 
    goto return_label;
  }
  else ;
  
#line 3167 
  __retres = (unsigned int)((1 << debug_value) + -1);
  return_label: 
#line 3167 
                return __retres;
}


#line 3170  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void __netif_tx_lock(struct netdev_queue *txq, int cpu)
{
  
#line 3172 
  ldv_spin_lock_60(& txq->_xmit_lock);
  
#line 3173 
  txq->xmit_lock_owner = cpu;
  
#line 3174 
  return;
}


#line 3190  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void __netif_tx_unlock(struct netdev_queue *txq)
{
  
#line 3192 
  txq->xmit_lock_owner = -1;
  
#line 3193 
  ldv_spin_unlock_63(& txq->_xmit_lock);
  
#line 3194 
  return;
}


#line 3282  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void netif_tx_disable(struct net_device *dev)
{
  unsigned int i;
  int cpu;
  int tmp_3;
  
#line 3287 
  local_bh_disable();
  {
    int pscr_ret__;
    {
      
#line 3288 
      void const *__vpp_verify = (void const *)0;
      
#line 3288 
      void const *tmp = __vpp_verify;
    }
    
#line 3288 
    switch (4UL) {
      int tmp_0;
      int tmp_0_0;
      int tmp_1;
      int tmp_2;
      case (unsigned long)1: 
#line 3288 
      ;
      {
        int pfo_ret__;
        
#line 3288 
        switch (4UL) {
          case (unsigned long)1: 
#line 3288 
          ;
          
#line 3289 
          ldv_inline_asm();
          
#line 3288 
          goto ldv_45448;
          case (unsigned long)2: 
#line 3288 
          ;
          
#line 3289 
          ldv_inline_asm();
          
#line 3288 
          goto ldv_45448;
          case (unsigned long)4: 
#line 3288 
          ;
          
#line 3289 
          ldv_inline_asm();
          
#line 3288 
          goto ldv_45448;
          case (unsigned long)8: 
#line 3288 
          ;
          
#line 3289 
          ldv_inline_asm();
          
#line 3288 
          goto ldv_45448;
          default: 
#line 3288 
          ;
          
#line 3288 
          __bad_percpu_size();
        }
        ldv_45448: 
#line 3288 
        ;
        
#line 3288 
        tmp_0 = pfo_ret__;
      }
      
#line 3288 
      pscr_ret__ = tmp_0;
      
#line 3288 
      goto ldv_45454;
      case (unsigned long)2: 
#line 3288 
      ;
      {
        int pfo_ret___0;
        
#line 3288 
        switch (4UL) {
          case (unsigned long)1: 
#line 3288 
          ;
          
#line 3289 
          ldv_inline_asm();
          
#line 3288 
          goto ldv_45458;
          case (unsigned long)2: 
#line 3288 
          ;
          
#line 3289 
          ldv_inline_asm();
          
#line 3288 
          goto ldv_45458;
          case (unsigned long)4: 
#line 3288 
          ;
          
#line 3289 
          ldv_inline_asm();
          
#line 3288 
          goto ldv_45458;
          case (unsigned long)8: 
#line 3288 
          ;
          
#line 3289 
          ldv_inline_asm();
          
#line 3288 
          goto ldv_45458;
          default: 
#line 3288 
          ;
          
#line 3288 
          __bad_percpu_size();
        }
        ldv_45458: 
#line 3288 
        ;
        
#line 3288 
        tmp_0_0 = pfo_ret___0;
      }
      
#line 3288 
      pscr_ret__ = tmp_0_0;
      
#line 3288 
      goto ldv_45454;
      case (unsigned long)4: 
#line 3288 
      ;
      {
        int pfo_ret___1;
        
#line 3288 
        switch (4UL) {
          case (unsigned long)1: 
#line 3288 
          ;
          
#line 3289 
          ldv_inline_asm();
          
#line 3288 
          goto ldv_45467;
          case (unsigned long)2: 
#line 3288 
          ;
          
#line 3289 
          ldv_inline_asm();
          
#line 3288 
          goto ldv_45467;
          case (unsigned long)4: 
#line 3288 
          ;
          
#line 3289 
          ldv_inline_asm();
          
#line 3288 
          goto ldv_45467;
          case (unsigned long)8: 
#line 3288 
          ;
          
#line 3289 
          ldv_inline_asm();
          
#line 3288 
          goto ldv_45467;
          default: 
#line 3288 
          ;
          
#line 3288 
          __bad_percpu_size();
        }
        ldv_45467: 
#line 3288 
        ;
        
#line 3288 
        tmp_1 = pfo_ret___1;
      }
      
#line 3288 
      pscr_ret__ = tmp_1;
      
#line 3288 
      goto ldv_45454;
      case (unsigned long)8: 
#line 3288 
      ;
      {
        int pfo_ret___2;
        
#line 3288 
        switch (4UL) {
          case (unsigned long)1: 
#line 3288 
          ;
          
#line 3289 
          ldv_inline_asm();
          
#line 3288 
          goto ldv_45476;
          case (unsigned long)2: 
#line 3288 
          ;
          
#line 3289 
          ldv_inline_asm();
          
#line 3288 
          goto ldv_45476;
          case (unsigned long)4: 
#line 3288 
          ;
          
#line 3289 
          ldv_inline_asm();
          
#line 3288 
          goto ldv_45476;
          case (unsigned long)8: 
#line 3288 
          ;
          
#line 3289 
          ldv_inline_asm();
          
#line 3288 
          goto ldv_45476;
          default: 
#line 3288 
          ;
          
#line 3288 
          __bad_percpu_size();
        }
        ldv_45476: 
#line 3288 
        ;
        
#line 3288 
        tmp_2 = pfo_ret___2;
      }
      
#line 3288 
      pscr_ret__ = tmp_2;
      
#line 3288 
      goto ldv_45454;
      default: 
#line 3288 
      ;
      
#line 3288 
      __bad_size_call_parameter();
      
#line 3288 
      goto ldv_45454;
    }
    ldv_45454: 
#line 3288 
    ;
    
#line 3288 
    tmp_3 = pscr_ret__;
  }
  
#line 3288 
  cpu = tmp_3;
  
#line 3289 
  i = 0U;
  
#line 3289 
  goto ldv_45486;
  ldv_45485: 
#line 3290 
  ;
  {
    
#line 3290 
    struct netdev_queue *txq = netdev_get_tx_queue((struct net_device const *)dev,i);
    
#line 3292 
    __netif_tx_lock(txq,cpu);
    
#line 3293 
    netif_tx_start_queue(txq);
    
#line 3294 
    __netif_tx_unlock(txq);
  }
  
#line 3289 
  i += 1U;
  ldv_45486: 
#line 3290 
  ;
  
#line 3289 
  if (dev->num_tx_queues > i) 
#line 3291 
                              goto ldv_45485; else 
#line 3294 
                                                   goto ldv_45487;
  ldv_45487: 
#line 3295 
  ;
  
#line 3296 
  local_bh_enable();
  
#line 3297 
  return;
}


#line 3355 
static int ldv_register_netdev_92(struct net_device *ldv_func_arg1);


#line 3360 
static void ldv_unregister_netdev_88(struct net_device *ldv_func_arg1);


#line 3364 
static void ldv_unregister_netdev_94(struct net_device *ldv_func_arg1);


#line 3384 
int dev_addr_add(struct net_device *, unsigned char const *, unsigned char);


#line 3386 
int dev_addr_del(struct net_device *, unsigned char const *, unsigned char);


#line 3488 
struct net_device *netdev_all_upper_get_next_dev_rcu(struct net_device *, struct list_head **);


#line 3549 
void netdev_rss_key_fill(void *, size_t);


#line 3730  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void netif_set_gso_max_size(struct net_device *dev, unsigned int size)
{
  
#line 3733 
  dev->gso_max_size = size;
  
#line 3734 
  return;
}


#line 3749  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static bool netif_is_macvlan(struct net_device *dev)
{
  bool __retres;
  
#line 3751 
  __retres = (_Bool)((dev->priv_flags & 2097152U) != 0U);
  
#line 3751 
  return __retres;
}


#line 3826 
void netdev_crit(struct net_device const *, char const * , ...);


#line 3828 
void netdev_err(struct net_device const *, char const * , ...);


#line 3830 
void netdev_warn(struct net_device const *, char const * , ...);


#line 3834 
void netdev_info(struct net_device const *, char const * , ...);


#line 70  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/vmalloc.h"
void *vzalloc(unsigned long);


#line 73 
void *vzalloc_node(unsigned long, int);


#line 83 
void vfree(void const *);


#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ip.h"
__inline static struct iphdr *ip_hdr(struct sk_buff const *skb)
{
  struct iphdr *tmp;
  
#line 25 
  tmp = (struct iphdr *)skb_network_header(skb);
  
#line 25 
  return tmp;
}


#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rtnetlink.h"
void rtnl_lock(void);


#line 28 
void rtnl_unlock(void);


#line 103 
int ndo_dflt_fdb_add(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char const *, u16, u16);


#line 115 
int ndo_dflt_bridge_getlink(struct sk_buff *, u32, u32, struct net_device *, u16, u32, u32, int, u32, int (*)(struct sk_buff *, struct net_device *, u32 ));


#line 241  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netlink.h"
struct nlattr *nla_find(struct nlattr const *, int, int);


#line 292  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netlink.h"
__inline static void *nlmsg_data(struct nlmsghdr const *nlh)
{
  void *__retres;
  
#line 294 
  __retres = (void *)nlh + 16U;
  
#line 294 
  return __retres;
}


#line 301  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netlink.h"
__inline static int nlmsg_len(struct nlmsghdr const *nlh)
{
  int __retres;
  
#line 303 
  __retres = (int)(nlh->nlmsg_len + 4294967280U);
  
#line 303 
  return __retres;
}


#line 311  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netlink.h"
__inline static struct nlattr *nlmsg_attrdata(struct nlmsghdr const *nlh, int hdrlen)
{
  struct nlattr *__retres;
  
#line 314 
  unsigned char *data = nlmsg_data(nlh);
  
#line 315 
  __retres = (struct nlattr *)(data + (((unsigned int)hdrlen + 3U) & 4294967292U));
  
#line 315 
  return __retres;
}


#line 323  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netlink.h"
__inline static int nlmsg_attrlen(struct nlmsghdr const *nlh, int hdrlen)
{
  int __retres;
  int tmp;
  
#line 325 
  tmp = nlmsg_len(nlh);
  
#line 325 
  ;
  
#line 325 
  __retres = (int)((unsigned int)tmp - (((unsigned int)hdrlen + 3U) & 4294967292U));
  
#line 325 
  return __retres;
}


#line 387  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netlink.h"
__inline static struct nlattr *nlmsg_find_attr(struct nlmsghdr const *nlh, int hdrlen, int attrtype)
{
  struct nlattr *tmp_1;
  int tmp;
  struct nlattr *tmp_0;
  
#line 390 
  ;
  
#line 390 
  tmp = nlmsg_attrlen(nlh,hdrlen);
  
#line 390 
  tmp_0 = nlmsg_attrdata(nlh,hdrlen);
  
#line 390 
  tmp_1 = nla_find((struct nlattr const *)tmp_0,tmp,attrtype);
  
#line 390 
  return tmp_1;
}


#line 660  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netlink.h"
__inline static int nla_type(struct nlattr const *nla)
{
  int __retres;
  
#line 662 
  __retres = (int)nla->nla_type & -49153;
  
#line 662 
  return __retres;
}


#line 669  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netlink.h"
__inline static void *nla_data(struct nlattr const *nla)
{
  void *__retres;
  
#line 671 
  __retres = (void *)nla + 4U;
  
#line 671 
  return __retres;
}


#line 678  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netlink.h"
__inline static int nla_len(struct nlattr const *nla)
{
  int __retres;
  
#line 680 
  __retres = (int)nla->nla_len + -4;
  
#line 680 
  return __retres;
}


#line 688  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netlink.h"
__inline static int nla_ok(struct nlattr const *nla, int remaining)
{
  int __retres;
  
#line 691 
  __retres = ((remaining > 3 && (unsigned int)nla->nla_len > 3U) && (int)nla->nla_len <= remaining) != 0;
  
#line 691 
  return __retres;
}


#line 703  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netlink.h"
__inline static struct nlattr *nla_next(struct nlattr const *nla, int *remaining)
{
  struct nlattr *__retres;
  
#line 705 
  int totlen = ((int)nla->nla_len + 3) & -4;
  
#line 707 
  *remaining -= totlen;
  
#line 708 
  __retres = (struct nlattr *)nla + totlen;
  
#line 708 
  return __retres;
}


#line 1010  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netlink.h"
__inline static u16 nla_get_u16(struct nlattr const *nla)
{
  u16 __retres;
  void *tmp;
  
#line 1012 
  tmp = nla_data(nla);
  
#line 1012 
  __retres = *((u16 *)tmp);
  
#line 1012 
  return __retres;
}


#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/tcp.h"
__inline static struct tcphdr *tcp_hdr(struct sk_buff const *skb)
{
  struct tcphdr *tmp;
  
#line 29 
  tmp = (struct tcphdr *)skb_transport_header(skb);
  
#line 29 
  return tmp;
}


#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/tcp.h"
__inline static unsigned int tcp_hdrlen(struct sk_buff const *skb)
{
  unsigned int __retres;
  struct tcphdr *tmp;
  
#line 34 
  tmp = tcp_hdr(skb);
  
#line 34 
  ;
  
#line 34 
  __retres = (unsigned int)((int)tmp->doff * 4);
  
#line 34 
  return __retres;
}


#line 74  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ipv6.h"
__inline static struct ipv6hdr *ipv6_hdr(struct sk_buff const *skb)
{
  struct ipv6hdr *tmp;
  
#line 76 
  tmp = (struct ipv6hdr *)skb_network_header(skb);
  
#line 76 
  return tmp;
}


#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/etherdevice.h"
u32 eth_get_headlen(void *, unsigned int);


#line 33 
__be16 eth_type_trans(struct sk_buff *, struct net_device *);


#line 47 
int eth_validate_addr(struct net_device *);


#line 53 
static struct net_device *ldv_alloc_etherdev_mqs_91(int ldv_func_arg1, unsigned int ldv_func_arg2, unsigned int ldv_func_arg3);


#line 63  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/etherdevice.h"
static u8 const eth_reserved_addr_base[6U] = {(unsigned char)1U, (unsigned char)128U, (unsigned char)194U, (unsigned char)0U, (unsigned char)0U, (unsigned char)0U};

#line 71  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/etherdevice.h"
__inline static bool is_link_local_ether_addr(u8 const *addr)
{
  bool __retres;
  
#line 73 
  __be16 *a = (__be16 *)addr;
  
#line 74 
  __be16 const *b = (__be16 const *)(& eth_reserved_addr_base);
  
#line 75 
  __be16 const m = (unsigned short)61695U;
  
#line 79 
  __retres = (_Bool)(((*((u32 const *)addr) ^ *((u32 const *)b)) | ((unsigned int)((int)*(a + 2U) ^ (int)*(b + 2U)) & 61695U)) == 0U);
  
#line 79 
  return __retres;
}


#line 93  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/etherdevice.h"
__inline static bool is_zero_ether_addr(u8 const *addr)
{
  bool __retres;
  
#line 96 
  __retres = (_Bool)((*((u32 const *)addr) | (unsigned int)*((u16 const *)(addr + 4U))) == 0U);
  
#line 96 
  return __retres;
}


#line 111  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/etherdevice.h"
__inline static bool is_multicast_ether_addr(u8 const *addr)
{
  bool __retres;
  
#line 114 
  u32 a = *((u32 const *)addr);
  
#line 121 
  __retres = (_Bool)((a & 1U) != 0U);
  
#line 121 
  return __retres;
}


#line 170  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/etherdevice.h"
__inline static bool is_unicast_ether_addr(u8 const *addr)
{
  bool __retres;
  int tmp_0;
  bool tmp;
  
#line 172 
  tmp = is_multicast_ether_addr(addr);
  
#line 172 
  if ((int)tmp != 0) 
#line 172 
                     tmp_0 = 0; else 
#line 172 
                                     tmp_0 = 1;
  
#line 172 
  __retres = (_Bool)(tmp_0 != 0);
  
#line 172 
  return __retres;
}


#line 186  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/etherdevice.h"
__inline static bool is_valid_ether_addr(u8 const *addr)
{
  bool __retres;
  int tmp_3;
  int tmp_0;
  bool tmp;
  
#line 190 
  tmp = is_multicast_ether_addr(addr);
  
#line 190 
  if (tmp) 
#line 190 
           tmp_0 = 0; else 
#line 190 
                           tmp_0 = 1;
  
#line 190 
  if (tmp_0) {
    int tmp_2;
    bool tmp_1;
    
#line 190 
    tmp_1 = is_zero_ether_addr(addr);
    
#line 190 
    if (tmp_1) 
#line 190 
               tmp_2 = 0; else 
#line 190 
                               tmp_2 = 1;
    
#line 190 
    if (tmp_2) 
#line 190 
               tmp_3 = 1; else 
#line 190 
                               tmp_3 = 0;
  }
  else 
#line 190 
       tmp_3 = 0;
  
#line 190 
  __retres = (_Bool)(tmp_3 != 0);
  
#line 190 
  return __retres;
}


#line 244  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/etherdevice.h"
__inline static void eth_zero_addr(u8 *addr)
{
  
#line 246 
  memset((void *)addr,0,6UL);
  
#line 247 
  return;
}


#line 271  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/etherdevice.h"
__inline static void ether_addr_copy(u8 *dst, u8 const *src)
{
  
#line 274 
  *((u32 *)dst) = *((u32 const *)src);
  
#line 275 
  *((u16 *)(dst + 4U)) = *((u16 const *)(src + 4U));
  
#line 276 
  return;
}


#line 310  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/etherdevice.h"
__inline static bool ether_addr_equal(u8 const *addr1, u8 const *addr2)
{
  bool __retres;
  
#line 313 
  u32 fold = (*((u32 const *)addr1) ^ *((u32 const *)addr2)) | (unsigned int)((int)*((u16 const *)(addr1 + 4U)) ^ (int)*((u16 const *)(addr2 + 4U)));
  
#line 316 
  __retres = (_Bool)(fold == 0U);
  
#line 316 
  return __retres;
}


#line 445  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/etherdevice.h"
__inline static int eth_skb_pad(struct sk_buff *skb)
{
  int tmp;
  
#line 447 
  tmp = skb_put_padto(skb,60U);
  
#line 447 
  return tmp;
}


#line 409  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/if_vlan.h"
__inline static void __vlan_hwaccel_put_tag(struct sk_buff *skb, __be16 vlan_proto, u16 vlan_tci)
{
  
#line 412 
  skb->vlan_proto = vlan_proto;
  
#line 413 
  skb->vlan_tci = (unsigned short)((unsigned int)vlan_tci | 4096U);
  
#line 414 
  return;
}


#line 481  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/if_vlan.h"
__inline static __be16 __vlan_get_protocol(struct sk_buff *skb, __be16 type, int *depth)
{
  __be16 __retres;
  
#line 484 
  unsigned int vlan_depth = (unsigned int)skb->mac_len;
  
#line 490 
  if ((unsigned int)type == 129U || (unsigned int)type == 43144U) {
    
#line 491 
    if (vlan_depth != 0U) {
      int tmp;
      {
        
#line 492 
        int __ret_warn_on = vlan_depth <= 3U;
        
#line 492 
        if ((long)(__ret_warn_on != 0) != 0L) 
#line 492 
                                              warn_slowpath_null("include/linux/if_vlan.h",492); else ;
        
#line 492 
        tmp = (long)(__ret_warn_on != 0);
      }
      
#line 492 
      if ((long)tmp != 0L) {
        
#line 493 
        __retres = (unsigned short)0U;
        
#line 493 
        goto return_label;
      }
      else ;
      
#line 494 
      vlan_depth += 4294967292U;
    }
    else 
#line 496 
         vlan_depth = 14U;
    ldv_54530: 
#line 497 
    ;
    {
      struct vlan_hdr *vh;
      int tmp_0;
      
#line 501 
      tmp_0 = pskb_may_pull(skb,vlan_depth + 4U);
      
#line 501 
      if ((long)(tmp_0 == 0) != 0L) {
        
#line 503 
        __retres = (unsigned short)0U;
        
#line 503 
        goto return_label;
      }
      else ;
      
#line 505 
      vh = (struct vlan_hdr *)(skb->data + vlan_depth);
      
#line 506 
      type = vh->h_vlan_encapsulated_proto;
      
#line 507 
      vlan_depth += 4U;
    }
    
#line 509 
    if ((unsigned int)type == 129U || (unsigned int)type == 43144U) 
#line 511 
                                                                    goto ldv_54530; else 
                                                                    
#line 514 
                                                                    goto ldv_54531;
    ldv_54531: 
#line 515 
    ;
  }
  else ;
  
#line 512 
  if (depth != (int *)0) 
#line 513 
                         *depth = (int)vlan_depth; else ;
  
#line 515 
  __retres = type;
  return_label: 
#line 515 
                return __retres;
}


#line 525  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/if_vlan.h"
__inline static __be16 vlan_get_protocol(struct sk_buff *skb)
{
  __be16 tmp;
  
#line 527 
  tmp = __vlan_get_protocol(skb,(unsigned short)((int)skb->protocol),(int *)0);
  
#line 527 
  return tmp;
}


#line 188  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/vxlan.h"
void vxlan_get_rx_port(struct net_device *);


#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/of_net.h"
void const *of_get_mac_address(struct device_node *);


#line 42  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/aer.h"
int pci_enable_pcie_error_reporting(struct pci_dev *);


#line 43 
int pci_disable_pcie_error_reporting(struct pci_dev *);


#line 44 
int pci_cleanup_aer_uncorrect_error_status(struct pci_dev *);


#line 90  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mdio.h"
int mdio_mii_ioctl(struct mdio_if_info const *, struct mii_ioctl_data *, int);


#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.h"
s32 ixgbe_read_pba_string_generic(struct ixgbe_hw *hw, u8 *pba_num, u32 pba_num_size);


#line 44 
enum ixgbe_bus_width ixgbe_convert_bus_width(u16 link_status);


#line 45 
enum ixgbe_bus_speed ixgbe_convert_bus_speed(u16 link_status);


#line 63 
s32 ixgbe_read_eeprom_bit_bang_generic(struct ixgbe_hw *hw, u16 offset, u16 *data);


#line 84 
bool ixgbe_device_supports_autoneg_fc(struct ixgbe_hw *hw);


#line 116 
bool ixgbe_mng_enabled(struct ixgbe_hw *hw);


#line 29  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dca.h"
void dca_register_notify(struct notifier_block *);


#line 30 
void dca_unregister_notify(struct notifier_block *);


#line 68 
int dca_add_requester(struct device *);


#line 69 
int dca_remove_requester(struct device *);


#line 71 
u8 dca3_get_tag(struct device *, int);


#line 121  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/busy_poll.h"
__inline static void skb_mark_napi_id(struct sk_buff *skb, struct napi_struct *napi)
{
  
#line 124 
  skb->__anonCompField_sk_buff_82.napi_id = napi->napi_id;
  
#line 125 
  return;
}


#line 334  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe.h"
__inline static unsigned int ixgbe_rx_bufsz(struct ixgbe_ring *ring)
{
  unsigned int __retres;
  int tmp;
  
#line 337 
  tmp = constant_test_bit(6L,(unsigned long const volatile *)(& ring->state));
  
#line 337 
  if (tmp != 0) {
    
#line 338 
    __retres = 4096U;
    
#line 338 
    goto return_label;
  }
  else ;
  
#line 341 
  __retres = 2048U;
  return_label: 
#line 341 
                return __retres;
}


#line 344  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe.h"
__inline static unsigned int ixgbe_rx_pg_order(struct ixgbe_ring *ring)
{
  unsigned int __retres;
  int tmp;
  
#line 347 
  tmp = constant_test_bit(6L,(unsigned long const volatile *)(& ring->state));
  
#line 347 
  if (tmp != 0) {
    
#line 348 
    __retres = 1U;
    
#line 348 
    goto return_label;
  }
  else ;
  
#line 350 
  __retres = 0U;
  return_label: 
#line 350 
                return __retres;
}


#line 407  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe.h"
__inline static void ixgbe_qv_init_lock(struct ixgbe_q_vector *q_vector)
{
  
#line 410 
  atomic_set(& q_vector->state,0);
  
#line 411 
  return;
}


#line 414  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe.h"
__inline static bool ixgbe_qv_lock_napi(struct ixgbe_q_vector *q_vector)
{
  bool __retres;
  
#line 416 
  int rc = atomic_cmpxchg(& q_vector->state,0,1);
  
#line 419 
  if (rc != 0) 
#line 420 
               (q_vector->tx.ring)->stats.yields += 1ULL; else ;
  
#line 423 
  __retres = (_Bool)(rc == 0);
  
#line 423 
  return __retres;
}


#line 427  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe.h"
__inline static void ixgbe_qv_unlock_napi(struct ixgbe_q_vector *q_vector)
{
  {
    int tmp;
    
#line 429 
    tmp = atomic_read((atomic_t const *)(& q_vector->state));
    
#line 429 
    int __ret_warn_on = tmp != 1;
    
#line 429 
    if ((long)(__ret_warn_on != 0) != 0L) 
#line 429 
                                          warn_slowpath_null("/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe.h",429); else ;
    
#line 429 
    long tmp_2 = (long)(__ret_warn_on != 0);
  }
  
#line 432 
  if (q_vector->napi.gro_list != (struct sk_buff *)0) 
#line 433 
                                                      napi_gro_flush(& q_vector->napi,(_Bool)0); else ;
  
#line 436 
  atomic_set(& q_vector->state,0);
  
#line 437 
  return;
}


#line 440  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe.h"
__inline static bool ixgbe_qv_lock_poll(struct ixgbe_q_vector *q_vector)
{
  bool __retres;
  
#line 442 
  int rc = atomic_cmpxchg(& q_vector->state,0,2);
  
#line 445 
  if (rc != 0) 
#line 446 
               (q_vector->tx.ring)->stats.yields += 1ULL; else ;
  
#line 448 
  __retres = (_Bool)(rc == 0);
  
#line 448 
  return __retres;
}


#line 452  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe.h"
__inline static void ixgbe_qv_unlock_poll(struct ixgbe_q_vector *q_vector)
{
  {
    int tmp;
    
#line 454 
    tmp = atomic_read((atomic_t const *)(& q_vector->state));
    
#line 454 
    int __ret_warn_on = tmp != 2;
    
#line 454 
    if ((long)(__ret_warn_on != 0) != 0L) 
#line 454 
                                          warn_slowpath_null("/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe.h",454); else ;
    
#line 454 
    long tmp_2 = (long)(__ret_warn_on != 0);
  }
  
#line 457 
  atomic_set(& q_vector->state,0);
  
#line 458 
  return;
}


#line 461  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe.h"
__inline static bool ixgbe_qv_busy_polling(struct ixgbe_q_vector *q_vector)
{
  bool __retres;
  int tmp;
  
#line 463 
  tmp = atomic_read((atomic_t const *)(& q_vector->state));
  
#line 463 
  __retres = (_Bool)(tmp == 2);
  
#line 463 
  return __retres;
}


#line 467  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe.h"
__inline static bool ixgbe_qv_disable(struct ixgbe_q_vector *q_vector)
{
  bool __retres;
  
#line 469 
  int rc = atomic_cmpxchg(& q_vector->state,0,3);
  
#line 472 
  __retres = (_Bool)(rc == 0);
  
#line 472 
  return __retres;
}


#line 546  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe.h"
__inline static __le32 ixgbe_test_staterr(union ixgbe_adv_rx_desc *rx_desc, u32 const stat_err_bits)
{
  __le32 __retres;
  
#line 549 
  __retres = rx_desc->wb.upper.status_error & stat_err_bits;
  
#line 549 
  return __retres;
}


#line 552  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe.h"
__inline static u16 ixgbe_desc_unused(struct ixgbe_ring *ring)
{
  u16 __retres;
  unsigned int tmp;
  
#line 554 
  u16 ntc = ring->next_to_clean;
  
#line 555 
  u16 ntu = ring->next_to_use;
  
#line 557 
  if ((int)ntc <= (int)ntu) 
#line 557 
                            tmp = (unsigned int)ring->count; else 
#line 557 
                                                                  tmp = 0U;
  
#line 557 
  ;
  
#line 557 
  __retres = (unsigned short)(((tmp + (unsigned int)ntc) - (unsigned int)ntu) + 65535U);
  
#line 557 
  return __retres;
}


#line 782  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe.h"
__inline static u8 ixgbe_max_rss_indices(struct ixgbe_adapter *adapter)
{
  u8 __retres;
  
#line 784 
  switch ((unsigned int)adapter->hw.mac.type) {
    case (unsigned int)1: 
#line 785 
    ;
    case (unsigned int)2: 
#line 786 
    ;
    case (unsigned int)3: 
#line 787 
    ;
    
#line 788 
    __retres = (unsigned char)16U;
    
#line 788 
    goto return_label;
    case (unsigned int)4: 
#line 789 
    ;
    case (unsigned int)5: 
#line 790 
    ;
    
#line 791 
    __retres = (unsigned char)64U;
    
#line 791 
    goto return_label;
    default: 
#line 792 
    ;
    
#line 793 
    __retres = (unsigned char)0U;
    
#line 793 
    goto return_label;
  }
  return_label: 
#line 784 
                return __retres;
}


#line 837 
struct ixgbe_info ixgbe_82599_info;


#line 838 
struct ixgbe_info ixgbe_X540_info;


#line 839 
struct ixgbe_info ixgbe_X550_info;


#line 840 
struct ixgbe_info ixgbe_X550EM_x_info;


#line 842 
struct dcbnl_rtnl_ops const dcbnl_ops;


#line 846 
char const ixgbe_driver_version[8U];


#line 848 
char ixgbe_default_device_descr[39U];


#line 851 
void ixgbe_up(struct ixgbe_adapter *adapter);


#line 852 
void ixgbe_down(struct ixgbe_adapter *adapter);


#line 853 
void ixgbe_reinit_locked(struct ixgbe_adapter *adapter);


#line 854 
void ixgbe_reset(struct ixgbe_adapter *adapter);


#line 855 
void ixgbe_set_ethtool_ops(struct net_device *netdev);


#line 856 
int ixgbe_setup_rx_resources(struct ixgbe_ring *rx_ring);


#line 857 
int ixgbe_setup_tx_resources(struct ixgbe_ring *tx_ring);


#line 858 
void ixgbe_free_rx_resources(struct ixgbe_ring *rx_ring);


#line 859 
void ixgbe_free_tx_resources(struct ixgbe_ring *tx_ring);


#line 860 
void ixgbe_configure_rx_ring(struct ixgbe_adapter *adapter, struct ixgbe_ring *ring);


#line 861 
void ixgbe_configure_tx_ring(struct ixgbe_adapter *adapter, struct ixgbe_ring *ring);


#line 862 
void ixgbe_disable_rx_queue(struct ixgbe_adapter *adapter, struct ixgbe_ring *ring);


#line 863 
void ixgbe_update_stats(struct ixgbe_adapter *adapter);


#line 864 
int ixgbe_init_interrupt_scheme(struct ixgbe_adapter *adapter);


#line 865 
int ixgbe_wol_supported(struct ixgbe_adapter *adapter, u16 device_id, u16 subdevice_id);


#line 868 
void ixgbe_full_sync_mac_table(struct ixgbe_adapter *adapter);


#line 870 
int ixgbe_add_mac_filter(struct ixgbe_adapter *adapter, u8 *addr, u16 queue);


#line 872 
int ixgbe_del_mac_filter(struct ixgbe_adapter *adapter, u8 *addr, u16 queue);


#line 874 
void ixgbe_clear_interrupt_scheme(struct ixgbe_adapter *adapter);


#line 875 
netdev_tx_t ixgbe_xmit_frame_ring(struct sk_buff *skb, struct ixgbe_adapter *adapter, struct ixgbe_ring *tx_ring);


#line 877 
void ixgbe_unmap_and_free_tx_resource(struct ixgbe_ring *ring, struct ixgbe_tx_buffer *tx_buffer);


#line 879 
void ixgbe_alloc_rx_buffers(struct ixgbe_ring *rx_ring, u16 cleaned_count);


#line 880 
void ixgbe_write_eitr(struct ixgbe_q_vector *q_vector);


#line 881 
int ixgbe_poll(struct napi_struct *napi, int budget);


#line 883 
s32 ixgbe_reinit_fdir_tables_82599(struct ixgbe_hw *hw);


#line 884 
s32 ixgbe_init_fdir_signature_82599(struct ixgbe_hw *hw, u32 fdirctrl);


#line 885 
s32 ixgbe_init_fdir_perfect_82599(struct ixgbe_hw *hw, u32 fdirctrl);


#line 886 
s32 ixgbe_fdir_add_signature_filter_82599(struct ixgbe_hw *hw, union ixgbe_atr_hash_dword input, union ixgbe_atr_hash_dword common, u8 queue);


#line 890 
s32 ixgbe_fdir_set_input_mask_82599(struct ixgbe_hw *hw, union ixgbe_atr_input *input_mask);


#line 892 
s32 ixgbe_fdir_write_perfect_filter_82599(struct ixgbe_hw *hw, union ixgbe_atr_input *input, u16 soft_id, u8 queue);


#line 900 
void ixgbe_set_rx_mode(struct net_device *netdev);


#line 902 
void ixgbe_set_rx_drop_en(struct ixgbe_adapter *adapter);


#line 904 
int ixgbe_setup_tc(struct net_device *dev, u8 tc);


#line 905 
void ixgbe_tx_ctxtdesc(struct ixgbe_ring *tx_ring, u32 vlan_macip_lens, u32 fcoe_sof_eof, u32 type_tucmd, u32 mss_l4len_idx);


#line 906 
void ixgbe_do_reset(struct net_device *netdev);


#line 908 
void ixgbe_sysfs_exit(struct ixgbe_adapter *adapter);


#line 909 
int ixgbe_sysfs_init(struct ixgbe_adapter *adapter);


#line 912 
void ixgbe_configure_fcoe(struct ixgbe_adapter *adapter);


#line 913 
int ixgbe_fso(struct ixgbe_ring *tx_ring, struct ixgbe_tx_buffer *first, u8 *hdr_len);


#line 915 
int ixgbe_fcoe_ddp(struct ixgbe_adapter *adapter, union ixgbe_adv_rx_desc *rx_desc, struct sk_buff *skb);


#line 917 
int ixgbe_fcoe_ddp_get(struct net_device *netdev, u16 xid, struct scatterlist *sgl, unsigned int sgc);


#line 919 
int ixgbe_fcoe_ddp_target(struct net_device *netdev, u16 xid, struct scatterlist *sgl, unsigned int sgc);


#line 921 
int ixgbe_fcoe_ddp_put(struct net_device *netdev, u16 xid);


#line 922 
int ixgbe_setup_fcoe_ddp_resources(struct ixgbe_adapter *adapter);


#line 923 
void ixgbe_free_fcoe_ddp_resources(struct ixgbe_adapter *adapter);


#line 924 
int ixgbe_fcoe_enable(struct net_device *netdev);


#line 925 
int ixgbe_fcoe_disable(struct net_device *netdev);


#line 930 
int ixgbe_fcoe_get_wwn(struct net_device *netdev, u64 *wwn, int type);


#line 931 
int ixgbe_fcoe_get_hbainfo(struct net_device *netdev, struct netdev_fcoe_hbainfo *info);


#line 933 
u8 ixgbe_fcoe_get_tc(struct ixgbe_adapter *adapter);


#line 946  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe.h"
__inline static struct netdev_queue *txring_txq(struct ixgbe_ring const *ring)
{
  struct netdev_queue *tmp;
  
#line 948 
  tmp = netdev_get_tx_queue((struct net_device const *)ring->netdev,(unsigned int)ring->queue_index);
  
#line 948 
  return tmp;
}


#line 951 
void ixgbe_ptp_init(struct ixgbe_adapter *adapter);


#line 952 
void ixgbe_ptp_suspend(struct ixgbe_adapter *adapter);


#line 953 
void ixgbe_ptp_stop(struct ixgbe_adapter *adapter);


#line 954 
void ixgbe_ptp_overflow_check(struct ixgbe_adapter *adapter);


#line 955 
void ixgbe_ptp_rx_hang(struct ixgbe_adapter *adapter);


#line 956 
void ixgbe_ptp_rx_hwtstamp(struct ixgbe_adapter *adapter, struct sk_buff *skb);


#line 957 
int ixgbe_ptp_set_ts_config(struct ixgbe_adapter *adapter, struct ifreq *ifr);


#line 958 
int ixgbe_ptp_get_ts_config(struct ixgbe_adapter *adapter, struct ifreq *ifr);


#line 959 
void ixgbe_ptp_start_cyclecounter(struct ixgbe_adapter *adapter);


#line 960 
void ixgbe_ptp_reset(struct ixgbe_adapter *adapter);


#line 961 
void ixgbe_ptp_check_pps_event(struct ixgbe_adapter *adapter, u32 eicr);


#line 963 
void ixgbe_sriov_reinit(struct ixgbe_adapter *adapter);


#line 969 
u32 ixgbe_rss_indir_tbl_entries(struct ixgbe_adapter *adapter);


#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_sriov.h"
void ixgbe_restore_vf_multicasts(struct ixgbe_adapter *adapter);


#line 40 
void ixgbe_msg_task(struct ixgbe_adapter *adapter);


#line 41 
int ixgbe_vf_configuration(struct pci_dev *pdev, unsigned int event_mask);


#line 42 
void ixgbe_disable_tx_rx(struct ixgbe_adapter *adapter);


#line 43 
void ixgbe_ping_all_vfs(struct ixgbe_adapter *adapter);


#line 44 
int ixgbe_ndo_set_vf_mac(struct net_device *netdev, int vf, u8 *mac);


#line 45 
int ixgbe_ndo_set_vf_vlan(struct net_device *netdev, int vf, u16 vlan, u8 qos);


#line 47 
int ixgbe_ndo_set_vf_bw(struct net_device *netdev, int vf, int min_tx_rate, int max_tx_rate);


#line 49 
int ixgbe_ndo_set_vf_spoofchk(struct net_device *netdev, int vf, bool setting);


#line 50 
int ixgbe_ndo_set_vf_rss_query_en(struct net_device *netdev, int vf, bool setting);


#line 52 
int ixgbe_ndo_get_vf_config(struct net_device *netdev, int vf, struct ifla_vf_info *ivi);


#line 54 
void ixgbe_check_vf_rate_limit(struct ixgbe_adapter *adapter);


#line 55 
int ixgbe_disable_sriov(struct ixgbe_adapter *adapter);


#line 57 
void ixgbe_enable_sriov(struct ixgbe_adapter *adapter);


#line 59 
int ixgbe_pci_sriov_configure(struct pci_dev *dev, int num_vfs);


#line 69  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_sriov.h"
char ixgbe_driver_name[6U] = {(char)'i', (char)'x', (char)'g', (char)'b', (char)'e', (char)'\000'};

#line 70  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_sriov.h"
static char const ixgbe_driver_string[47U] = {(char)'I', (char)'n', (char)'t', (char)'e', (char)'l', (char)'(', (char)'R', (char)')', (char)' ', (char)'1', (char)'0', (char)' ', (char)'G', (char)'i', (char)'g', (char)'a', (char)'b', (char)'i', (char)'t', (char)' ', (char)'P', (char)'C', (char)'I', (char)' ', (char)'E', (char)'x', (char)'p', (char)'r', (char)'e', (char)'s', (char)'s', (char)' ', (char)'N', (char)'e', (char)'t', (char)'w', (char)'o', (char)'r', (char)'k', (char)' ', (char)'D', (char)'r', (char)'i', (char)'v', (char)'e', (char)'r', (char)'\000'};

#line 73  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
char ixgbe_default_device_descr[39U] = {(char)'I', (char)'n', (char)'t', (char)'e', (char)'l', (char)'(', (char)'R', (char)')', (char)' ', (char)'1', (char)'0', (char)' ', (char)'G', (char)'i', (char)'g', (char)'a', (char)'b', (char)'i', (char)'t', (char)' ', (char)'N', (char)'e', (char)'t', (char)'w', (char)'o', (char)'r', (char)'k', (char)' ', (char)'C', (char)'o', (char)'n', (char)'n', (char)'e', (char)'c', (char)'t', (char)'i', (char)'o', (char)'n', (char)'\000'};

#line 80  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
char const ixgbe_driver_version[8U] = {(char)'4', (char)'.', (char)'0', (char)'.', (char)'1', (char)'-', (char)'k', (char)'\000'};

#line 81  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static char const ixgbe_copyright[43U] = {(char)'C', (char)'o', (char)'p', (char)'y', (char)'r', (char)'i', (char)'g', (char)'h', (char)'t', (char)' ', (char)'(', (char)'c', (char)')', (char)' ', (char)'1', (char)'9', (char)'9', (char)'9', (char)'-', (char)'2', (char)'0', (char)'1', (char)'4', (char)' ', (char)'I', (char)'n', (char)'t', (char)'e', (char)'l', (char)' ', (char)'C', (char)'o', (char)'r', (char)'p', (char)'o', (char)'r', (char)'a', (char)'t', (char)'i', (char)'o', (char)'n', (char)'.', (char)'\000'};

#line 84  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static char const ixgbe_overheat_msg[153U] = {(char)'N', (char)'e', (char)'t', (char)'w', (char)'o', (char)'r', (char)'k', (char)' ', (char)'a', (char)'d', (char)'a', (char)'p', (char)'t', (char)'e', (char)'r', (char)' ', (char)'h', (char)'a', (char)'s', (char)' ', (char)'b', (char)'e', (char)'e', (char)'n', (char)' ', (char)'s', (char)'t', (char)'o', (char)'p', (char)'p', (char)'e', (char)'d', (char)' ', (char)'b', (char)'e', (char)'c', (char)'a', (char)'u', (char)'s', (char)'e', (char)' ', (char)'i', (char)'t', (char)' ', (char)'h', (char)'a', (char)'s', (char)' ', (char)'o', (char)'v', (char)'e', (char)'r', (char)' ', (char)'h', (char)'e', (char)'a', (char)'t', (char)'e', (char)'d', (char)'.', (char)' ', (char)'R', (char)'e', (char)'s', (char)'t', (char)'a', (char)'r', (char)'t', (char)' ', (char)'t', (char)'h', (char)'e', (char)' ', (char)'c', (char)'o', (char)'m', (char)'p', (char)'u', (char)'t', (char)'e', (char)'r', (char)'.', (char)' ', (char)'I', (char)'f', (char)' ', (char)'t', (char)'h', (char)'e', (char)' ', (char)'p', (char)'r', (char)'o', (char)'b', (char)'l', (char)'e', (char)'m', (char)' ', (char)'p', (char)'e', (char)'r', (char)'s', (char)'i', (char)'s', (char)'t', (char)'s', (char)',', (char)' ', (char)'p', (char)'o', (char)'w', (char)'e', (char)'r', (char)' ', (char)'o', (char)'f', (char)'f', (char)' ', (char)'t', (char)'h', (char)'e', (char)' ', (char)'s', (char)'y', (char)'s', (char)'t', (char)'e', (char)'m', (char)' ', (char)'a', (char)'n', (char)'d', (char)' ', (char)'r', (char)'e', (char)'p', (char)'l', (char)'a', (char)'c', (char)'e', (char)' ', (char)'t', (char)'h', (char)'e', (char)' ', (char)'a', (char)'d', (char)'a', (char)'p', (char)'t', (char)'e', (char)'r', (char)'\000'};

#line 86  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static struct ixgbe_info const *ixgbe_info_tbl[5U] = {(struct ixgbe_info const *)(& ixgbe_82598_info), (struct ixgbe_info const *)(& ixgbe_82599_info), (struct ixgbe_info const *)(& ixgbe_X540_info), (struct ixgbe_info const *)(& ixgbe_X550_info), (struct ixgbe_info const *)(& ixgbe_X550EM_x_info)};

#line 102  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static struct pci_device_id const ixgbe_pci_tbl[35U] = {{.vendor = 32902U, .device = 4278U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}, {.vendor = 32902U, .device = 4294U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}, {.vendor = 32902U, .device = 4295U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}, {.vendor = 32902U, .device = 4296U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}, {.vendor = 32902U, .device = 5387U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}, {.vendor = 32902U, .device = 4317U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}, {.vendor = 32902U, .device = 4332U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}, {.vendor = 32902U, .device = 4337U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}, {.vendor = 32902U, .device = 4321U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}, {.vendor = 32902U, .device = 4340U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}, {.vendor = 32902U, .device = 4315U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}, {.vendor = 32902U, .device = 5384U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}, {.vendor = 32902U, .device = 4343U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 1UL}, {.vendor = 32902U, .device = 4348U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 1UL}, {.vendor = 32902U, .device = 5399U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 1UL}, {.vendor = 32902U, .device = 4347U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 1UL}, {.vendor = 32902U, .device = 5383U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 1UL}, {.vendor = 32902U, .device = 5396U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 1UL}, {.vendor = 32902U, .device = 4345U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 1UL}, {.vendor = 32902U, .device = 5418U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 1UL}, {.vendor = 32902U, .device = 5417U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 1UL}, {.vendor = 32902U, .device = 5404U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 1UL}, {.vendor = 32902U, .device = 4344U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 1UL}, {.vendor = 32902U, .device = 5416U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 2UL}, {.vendor = 32902U, .device = 5453U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 1UL}, {.vendor = 32902U, .device = 5455U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 1UL}, {.vendor = 32902U, .device = 5464U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 1UL}, {.vendor = 32902U, .device = 5463U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 1UL}, {.vendor = 32902U, .device = 5450U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 1UL}, {.vendor = 32902U, .device = 5472U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 2UL}, {.vendor = 32902U, .device = 5475U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 3UL}, {.vendor = 32902U, .device = 5546U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 32902U, .device = 5547U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 32902U, .device = 5549U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 0U, .device = 0U, .subvendor = 0U, .subdevice = 0U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}};

#line 140  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
struct pci_device_id const __mod_pci__ixgbe_pci_tbl_device_table[35U];

#line 143 
static int ixgbe_notify_dca(struct notifier_block *nb, unsigned long event, void *p);


#line 145  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static struct notifier_block dca_notifier = {.notifier_call = & ixgbe_notify_dca, .next = (struct notifier_block *)0, .priority = 0};

#line 153  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static unsigned int max_vfs;

#line 159  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static unsigned int allow_unsupported_sfp;

#line 165  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static int debug = -1;

#line 174 
static bool ixgbe_check_cfg_remove(struct ixgbe_hw *hw, struct pci_dev *pdev);


#line 176  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static int ixgbe_read_pci_cfg_word_parent(struct ixgbe_adapter *adapter, u32 reg, u16 *value)
{
  int __retres;
  struct pci_dev *parent_dev;
  struct pci_bus *parent_bus;
  int tmp_0;
  bool tmp;
  
#line 182 
  parent_bus = ((adapter->pdev)->bus)->parent;
  
#line 183 
  if (parent_bus == (struct pci_bus *)0) {
    
#line 184 
    __retres = -1;
    
#line 184 
    goto return_label;
  }
  else ;
  
#line 186 
  parent_dev = parent_bus->self;
  
#line 187 
  if (parent_dev == (struct pci_dev *)0) {
    
#line 188 
    __retres = -1;
    
#line 188 
    goto return_label;
  }
  else ;
  
#line 190 
  tmp = pci_is_pcie(parent_dev);
  
#line 190 
  if (tmp) 
#line 190 
           tmp_0 = 0; else 
#line 190 
                           tmp_0 = 1;
  
#line 190 
  if (tmp_0) {
    
#line 191 
    __retres = -1;
    
#line 191 
    goto return_label;
  }
  else ;
  
#line 193 
  pcie_capability_read_word(parent_dev,(int)reg,value);
  
#line 194 
  if ((unsigned int)*value == 65535U) {
    bool tmp_1;
    
#line 194 
    tmp_1 = ixgbe_check_cfg_remove(& adapter->hw,parent_dev);
    
#line 194 
    if ((int)tmp_1 != 0) {
      
#line 196 
      __retres = -1;
      
#line 196 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 197 
  __retres = 0;
  return_label: 
#line 197 
                return __retres;
}


#line 200  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static s32 ixgbe_get_parent_bus_info(struct ixgbe_adapter *adapter)
{
  s32 __retres;
  int err;
  
#line 202 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 203 
  u16 link_status = (unsigned short)0U;
  
#line 206 
  hw->bus.type = ixgbe_bus_type_pci_express;
  
#line 211 
  err = ixgbe_read_pci_cfg_word_parent(adapter,18U,& link_status);
  
#line 214 
  if (err != 0) {
    
#line 215 
    __retres = err;
    
#line 215 
    goto return_label;
  }
  else ;
  
#line 217 
  hw->bus.width = ixgbe_convert_bus_width((unsigned short)((int)link_status));
  
#line 218 
  hw->bus.speed = ixgbe_convert_bus_speed((unsigned short)((int)link_status));
  
#line 220 
  __retres = 0;
  return_label: 
#line 220 
                return __retres;
}


#line 232  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
__inline static bool ixgbe_pcie_from_parent(struct ixgbe_hw *hw)
{
  bool __retres;
  
#line 234 
  switch ((int)hw->device_id) {
    case 5450: 
#line 235 
    ;
    case 5464: 
#line 236 
    ;
    
#line 237 
    __retres = (_Bool)1;
    
#line 237 
    goto return_label;
    default: 
#line 238 
    ;
    
#line 239 
    __retres = (_Bool)0;
    
#line 239 
    goto return_label;
  }
  return_label: 
#line 234 
                return __retres;
}


#line 243  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_check_minimum_link(struct ixgbe_adapter *adapter, int expected_gts)
{
  struct pci_dev *pdev;
  bool tmp;
  int tmp_0;
  char *tmp_3;
  char *tmp_6;
  
#line 246 
  int max_gts = 0;
  
#line 247 
  enum pci_bus_speed speed = PCI_SPEED_UNKNOWN;
  
#line 248 
  enum pcie_link_width width = PCIE_LNK_WIDTH_UNKNOWN;
  
#line 253 
  tmp = ixgbe_pcie_from_parent(& adapter->hw);
  
#line 253 
  if ((int)tmp != 0) 
#line 254 
                     pdev = (((adapter->pdev)->bus)->parent)->self; else 
                                                                    
#line 256 
                                                                    pdev = adapter->pdev;
  
#line 258 
  tmp_0 = pcie_get_minimum_link(pdev,& speed,& width);
  
#line 258 
  if (tmp_0 != 0) 
#line 258 
                  goto _LOR;
  else 
    
#line 258 
    if (speed == (unsigned int)PCI_SPEED_UNKNOWN) 
#line 258 
                                                  goto _LOR;
    else 
      
#line 259 
      if (width == (unsigned int)PCIE_LNK_WIDTH_UNKNOWN) {
        _LOR: {
                
#line 260 
                dev_warn((struct device const *)(& (adapter->pdev)->dev),"Unable to determine PCI Express bandwidth.\n");
                
#line 261 
                goto return_label;
              }
      }
      else ;
  
#line 264 
  switch ((unsigned int)speed) {
    case (unsigned int)20: 
#line 265 
    ;
    
#line 267 
    max_gts = (int)((unsigned int)width * 2U);
    
#line 268 
    goto ldv_57429;
    case (unsigned int)21: 
#line 269 
    ;
    
#line 271 
    max_gts = (int)((unsigned int)width * 4U);
    
#line 272 
    goto ldv_57429;
    case (unsigned int)22: 
#line 273 
    ;
    
#line 275 
    max_gts = (int)((unsigned int)width * 8U);
    
#line 276 
    goto ldv_57429;
    default: 
#line 277 
    ;
    
#line 278 
    dev_warn((struct device const *)(& (adapter->pdev)->dev),"Unable to determine PCI Express bandwidth.\n");
    
#line 279 
    goto return_label;
  }
  ldv_57429: 
#line 282 
  ;
  
#line 282 
  _dev_info((struct device const *)(& (adapter->pdev)->dev),"PCI Express bandwidth of %dGT/s available\n",max_gts);
  
#line 284 
  if (speed != (unsigned int)PCIE_SPEED_2_5GT) {
    char *tmp_2;
    
#line 284 
    if (speed != (unsigned int)PCIE_SPEED_5_0GT) {
      char *tmp_1;
      
#line 284 
      if (speed == (unsigned int)PCIE_SPEED_8_0GT) 
#line 284 
                                                   tmp_1 = (char *)"<2%"; else 
                                                                    
#line 284 
                                                                    tmp_1 = (char *)"Unknown";
      
#line 284 
      tmp_2 = tmp_1;
    }
    else 
#line 284 
         tmp_2 = (char *)"20%";
    
#line 284 
    tmp_3 = tmp_2;
  }
  else 
#line 284 
       tmp_3 = (char *)"20%";
  
#line 284 
  ;
  
#line 284 
  if (speed != (unsigned int)PCIE_SPEED_8_0GT) {
    char *tmp_5;
    
#line 284 
    if (speed != (unsigned int)PCIE_SPEED_5_0GT) {
      char *tmp_4;
      
#line 284 
      if (speed == (unsigned int)PCIE_SPEED_2_5GT) 
#line 284 
                                                   tmp_4 = (char *)"2.5GT/s"; else 
                                                                    
#line 284 
                                                                    tmp_4 = (char *)"Unknown";
      
#line 284 
      tmp_5 = tmp_4;
    }
    else 
#line 284 
         tmp_5 = (char *)"5.0GT/s";
    
#line 284 
    tmp_6 = tmp_5;
  }
  else 
#line 284 
       tmp_6 = (char *)"8.0GT/s";
  
#line 284 
  ;
  
#line 284 
  _dev_info((struct device const *)(& (adapter->pdev)->dev),"(Speed:%s, Width: x%d, Encoding Loss:%s)\n",tmp_6,(unsigned int)width,tmp_3);
  
#line 295 
  if (max_gts < expected_gts) {
    
#line 296 
    dev_warn((struct device const *)(& (adapter->pdev)->dev),"This is not sufficient for optimal performance of this card.\n");
    
#line 297 
    dev_warn((struct device const *)(& (adapter->pdev)->dev),"For optimal performance, at least %dGT/s of bandwidth is required.\n",expected_gts);
    
#line 299 
    dev_warn((struct device const *)(& (adapter->pdev)->dev),"A slot with more lanes and/or higher speed is suggested.\n");
  }
  else ;
  return_label: 
#line 301 
                return;
}


#line 303  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_service_event_schedule(struct ixgbe_adapter *adapter)
{
  int tmp;
  
#line 305 
  tmp = constant_test_bit(2L,(unsigned long const volatile *)(& adapter->state));
  
#line 305 
  if (tmp == 0) {
    int tmp_0;
    
#line 305 
    tmp_0 = constant_test_bit(4L,(unsigned long const volatile *)(& adapter->state));
    
#line 305 
    if (tmp_0 == 0) {
      int tmp_1;
      
#line 306 
      tmp_1 = test_and_set_bit(5L,(unsigned long volatile *)(& adapter->state));
      
#line 306 
      if (tmp_1 == 0) 
#line 308 
                      ldv_schedule_work_73(& adapter->service_task); else ;
    }
    else ;
  }
  else ;
  
#line 309 
  return;
}


#line 311  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_remove_adapter(struct ixgbe_hw *hw)
{
  int tmp;
  
#line 313 
  struct ixgbe_adapter *adapter = (struct ixgbe_adapter *)hw->back;
  
#line 315 
  if (hw->hw_addr == (u8 *)0U) 
#line 316 
                               goto return_label; else ;
  
#line 317 
  hw->hw_addr = (u8 *)0U;
  
#line 318 
  dev_err((struct device const *)(& (adapter->pdev)->dev),"Adapter removed\n");
  
#line 319 
  tmp = constant_test_bit(6L,(unsigned long const volatile *)(& adapter->state));
  
#line 319 
  if (tmp != 0) 
#line 320 
                ixgbe_service_event_schedule(adapter); else ;
  return_label: 
#line 321 
                return;
}


#line 323  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_check_remove(struct ixgbe_hw *hw, u32 reg)
{
  u32 value;
  
#line 333 
  if (reg == 8U) {
    
#line 334 
    ixgbe_remove_adapter(hw);
    
#line 335 
    goto return_label;
  }
  else ;
  
#line 337 
  value = ixgbe_read_reg(hw,8U);
  
#line 338 
  if (value == 4294967295U) 
#line 339 
                            ixgbe_remove_adapter(hw); else ;
  return_label: 
#line 340 
                return;
}


#line 355  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
u32 ixgbe_read_reg(struct ixgbe_hw *hw, u32 reg)
{
  u32 __retres;
  u8 * volatile *tmp;
  u32 value;
  bool tmp_0;
  {
    
#line 357 
    u8 *__var = (u8 *)0U;
    
#line 357 
    tmp = (u8 * volatile *)(& hw->hw_addr);
  }
  
#line 357 
  u8 *reg_addr = *tmp;
  
#line 360 
  tmp_0 = ixgbe_removed((void *)reg_addr);
  
#line 360 
  if ((int)tmp_0 != 0) {
    
#line 361 
    __retres = 4294967295U;
    
#line 361 
    goto return_label;
  }
  else ;
  
#line 362 
  value = readl((void const volatile *)(reg_addr + reg));
  
#line 363 
  if ((long)(value == 4294967295U) != 0L) 
#line 364 
                                          ixgbe_check_remove(hw,reg); else ;
  
#line 365 
  __retres = value;
  return_label: 
#line 365 
                return __retres;
}


#line 368  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static bool ixgbe_check_cfg_remove(struct ixgbe_hw *hw, struct pci_dev *pdev)
{
  bool __retres;
  u16 value;
  
#line 372 
  pci_read_config_word((struct pci_dev const *)pdev,0,& value);
  
#line 373 
  if ((unsigned int)value == 65535U) {
    
#line 374 
    ixgbe_remove_adapter(hw);
    
#line 375 
    __retres = (_Bool)1;
    
#line 375 
    goto return_label;
  }
  else ;
  
#line 377 
  __retres = (_Bool)0;
  return_label: 
#line 377 
                return __retres;
}


#line 380  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
u16 ixgbe_read_pci_cfg_word(struct ixgbe_hw *hw, u32 reg)
{
  u16 __retres;
  u16 value;
  bool tmp;
  
#line 382 
  struct ixgbe_adapter *adapter = (struct ixgbe_adapter *)hw->back;
  
#line 385 
  tmp = ixgbe_removed((void *)hw->hw_addr);
  
#line 385 
  if ((int)tmp != 0) {
    
#line 386 
    __retres = (unsigned short)65535U;
    
#line 386 
    goto return_label;
  }
  else ;
  
#line 387 
  pci_read_config_word((struct pci_dev const *)adapter->pdev,(int)reg,& value);
  
#line 388 
  if ((unsigned int)value == 65535U) {
    bool tmp_0;
    
#line 388 
    tmp_0 = ixgbe_check_cfg_remove(hw,adapter->pdev);
    
#line 388 
    if ((int)tmp_0 != 0) {
      
#line 390 
      __retres = (unsigned short)65535U;
      
#line 390 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 391 
  __retres = value;
  return_label: 
#line 391 
                return __retres;
}


#line 395  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static u32 ixgbe_read_pci_cfg_dword(struct ixgbe_hw *hw, u32 reg)
{
  u32 __retres;
  u32 value;
  bool tmp;
  
#line 397 
  struct ixgbe_adapter *adapter = (struct ixgbe_adapter *)hw->back;
  
#line 400 
  tmp = ixgbe_removed((void *)hw->hw_addr);
  
#line 400 
  if ((int)tmp != 0) {
    
#line 401 
    __retres = 4294967295U;
    
#line 401 
    goto return_label;
  }
  else ;
  
#line 402 
  pci_read_config_dword((struct pci_dev const *)adapter->pdev,(int)reg,& value);
  
#line 403 
  if (value == 4294967295U) {
    bool tmp_0;
    
#line 403 
    tmp_0 = ixgbe_check_cfg_remove(hw,adapter->pdev);
    
#line 403 
    if ((int)tmp_0 != 0) {
      
#line 405 
      __retres = 4294967295U;
      
#line 405 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 406 
  __retres = value;
  return_label: 
#line 406 
                return __retres;
}


#line 410  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
void ixgbe_write_pci_cfg_word(struct ixgbe_hw *hw, u32 reg, u16 value)
{
  bool tmp;
  
#line 412 
  struct ixgbe_adapter *adapter = (struct ixgbe_adapter *)hw->back;
  
#line 414 
  tmp = ixgbe_removed((void *)hw->hw_addr);
  
#line 414 
  if ((int)tmp != 0) 
#line 415 
                     goto return_label; else ;
  
#line 416 
  pci_write_config_word((struct pci_dev const *)adapter->pdev,(int)reg,(unsigned short)((int)value));
  return_label: 
#line 417 
                return;
}


#line 419  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_service_event_complete(struct ixgbe_adapter *adapter)
{
  int tmp;
  
#line 421 
  tmp = constant_test_bit(5L,(unsigned long const volatile *)(& adapter->state));
  
#line 421 
  if ((long)(tmp == 0) != 0L) {
    
#line 423 
    ldv_inline_asm();
    
#line 421 
    ;
  }
  else ;
  
#line 423 
  ldv_inline_asm();
  
#line 425 
  set_bit(5L,(unsigned long volatile *)(& adapter->state));
  
#line 426 
  return;
}


#line 433  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static struct ixgbe_reg_info const ixgbe_reg_info_tbl[19U] = {{.ofs = 0U, .name = (char *)"CTRL"}, {.ofs = 8U, .name = (char *)"STATUS"}, {.ofs = 24U, .name = (char *)"CTRL_EXT"}, {.ofs = 2048U, .name = (char *)"EICR"}, {.ofs = 8448U, .name = (char *)"SRRCTL"}, {.ofs = 8704U, .name = (char *)"DRXCTL"}, {.ofs = 4104U, .name = (char *)"RDLEN"}, {.ofs = 4112U, .name = (char *)"RDH"}, {.ofs = 4120U, .name = (char *)"RDT"}, {.ofs = 4136U, .name = (char *)"RXDCTL"}, {.ofs = 4096U, .name = (char *)"RDBAL"}, {.ofs = 4100U, .name = (char *)"RDBAH"}, {.ofs = 24576U, .name = (char *)"TDBAL"}, {.ofs = 24580U, .name = (char *)"TDBAH"}, {.ofs = 24584U, .name = (char *)"TDLEN"}, {.ofs = 24592U, .name = (char *)"TDH"}, {.ofs = 24600U, .name = (char *)"TDT"}, {.ofs = 24616U, .name = (char *)"TXDCTL"}, {.ofs = 0U, .name = (char *)0}};

#line 469  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_regdump(struct ixgbe_hw *hw, struct ixgbe_reg_info *reginfo)
{
  char rname[16U];
  u32 regs[64U];
  
#line 471 
  int i = 0;
  
#line 471 
  int j = 0;
  
#line 475 
  switch (reginfo->ofs) {
    int tmp_0;
    int tmp_2;
    int tmp_3;
    int tmp_4;
    int tmp_5;
    int tmp_6;
    int tmp_7;
    int tmp_8;
    u32 tmp_9;
    case (u32)8448: 
#line 476 
    ;
    
#line 477 
    i = 0;
    
#line 477 
    goto ldv_57493;
    ldv_57492: 
#line 478 
    ;
    
#line 478 
    if (i <= 15) 
#line 478 
                 tmp_0 = (i + 2112) * 4;
    else {
      int tmp;
      
#line 478 
      if (i <= 63) 
#line 478 
                   tmp = i * 64 + 4116; else 
#line 478 
                                             tmp = (i + -64) * 64 + 53268;
      
#line 478 
      tmp_0 = tmp;
    }
    
#line 478 
    ;
    
#line 478 
    regs[i] = ixgbe_read_reg(hw,(unsigned int)tmp_0);
    
#line 477 
    i += 1;
    ldv_57493: 
#line 478 
    ;
    
#line 477 
    if (i <= 63) 
#line 479 
                 goto ldv_57492; else 
#line 482 
                                      goto ldv_57494;
    ldv_57494: 
#line 483 
    ;
    
#line 479 
    goto ldv_57495;
    case (u32)8704: 
#line 480 
    ;
    
#line 481 
    i = 0;
    
#line 481 
    goto ldv_57498;
    ldv_57497: 
#line 482 
    ;
    
#line 482 
    if (i <= 15) 
#line 482 
                 tmp_2 = (i + 2176) * 4;
    else {
      int tmp_1;
      
#line 482 
      if (i <= 63) 
#line 482 
                   tmp_1 = i * 64 + 4108; else 
#line 482 
                                               tmp_1 = (i + -64) * 64 + 53260;
      
#line 482 
      tmp_2 = tmp_1;
    }
    
#line 482 
    ;
    
#line 482 
    regs[i] = ixgbe_read_reg(hw,(unsigned int)tmp_2);
    
#line 481 
    i += 1;
    ldv_57498: 
#line 482 
    ;
    
#line 481 
    if (i <= 63) 
#line 483 
                 goto ldv_57497; else 
#line 486 
                                      goto ldv_57499;
    ldv_57499: 
#line 487 
    ;
    
#line 483 
    goto ldv_57495;
    case (u32)4104: 
#line 484 
    ;
    
#line 485 
    i = 0;
    
#line 485 
    goto ldv_57502;
    ldv_57501: 
#line 486 
    ;
    
#line 486 
    if (i <= 63) 
#line 486 
                 tmp_3 = i * 64 + 4104; else 
#line 486 
                                             tmp_3 = (i + -64) * 64 + 53256;
    
#line 486 
    ;
    
#line 486 
    regs[i] = ixgbe_read_reg(hw,(unsigned int)tmp_3);
    
#line 485 
    i += 1;
    ldv_57502: 
#line 486 
    ;
    
#line 485 
    if (i <= 63) 
#line 487 
                 goto ldv_57501; else 
#line 490 
                                      goto ldv_57503;
    ldv_57503: 
#line 491 
    ;
    
#line 487 
    goto ldv_57495;
    case (u32)4112: 
#line 488 
    ;
    
#line 489 
    i = 0;
    
#line 489 
    goto ldv_57506;
    ldv_57505: 
#line 490 
    ;
    
#line 490 
    if (i <= 63) 
#line 490 
                 tmp_4 = i * 64 + 4112; else 
#line 490 
                                             tmp_4 = (i + -64) * 64 + 53264;
    
#line 490 
    ;
    
#line 490 
    regs[i] = ixgbe_read_reg(hw,(unsigned int)tmp_4);
    
#line 489 
    i += 1;
    ldv_57506: 
#line 490 
    ;
    
#line 489 
    if (i <= 63) 
#line 491 
                 goto ldv_57505; else 
#line 494 
                                      goto ldv_57507;
    ldv_57507: 
#line 495 
    ;
    
#line 491 
    goto ldv_57495;
    case (u32)4120: 
#line 492 
    ;
    
#line 493 
    i = 0;
    
#line 493 
    goto ldv_57510;
    ldv_57509: 
#line 494 
    ;
    
#line 494 
    if (i <= 63) 
#line 494 
                 tmp_5 = i * 64 + 4120; else 
#line 494 
                                             tmp_5 = (i + -64) * 64 + 53272;
    
#line 494 
    ;
    
#line 494 
    regs[i] = ixgbe_read_reg(hw,(unsigned int)tmp_5);
    
#line 493 
    i += 1;
    ldv_57510: 
#line 494 
    ;
    
#line 493 
    if (i <= 63) 
#line 495 
                 goto ldv_57509; else 
#line 498 
                                      goto ldv_57511;
    ldv_57511: 
#line 499 
    ;
    
#line 495 
    goto ldv_57495;
    case (u32)4136: 
#line 496 
    ;
    
#line 497 
    i = 0;
    
#line 497 
    goto ldv_57514;
    ldv_57513: 
#line 498 
    ;
    
#line 498 
    if (i <= 63) 
#line 498 
                 tmp_6 = i * 64 + 4136; else 
#line 498 
                                             tmp_6 = (i + -64) * 64 + 53288;
    
#line 498 
    ;
    
#line 498 
    regs[i] = ixgbe_read_reg(hw,(unsigned int)tmp_6);
    
#line 497 
    i += 1;
    ldv_57514: 
#line 498 
    ;
    
#line 497 
    if (i <= 63) 
#line 499 
                 goto ldv_57513; else 
#line 502 
                                      goto ldv_57515;
    ldv_57515: 
#line 503 
    ;
    
#line 499 
    goto ldv_57495;
    case (u32)4096: 
#line 500 
    ;
    
#line 501 
    i = 0;
    
#line 501 
    goto ldv_57518;
    ldv_57517: 
#line 502 
    ;
    
#line 502 
    if (i <= 63) 
#line 502 
                 tmp_7 = (i + 64) * 64; else 
#line 502 
                                             tmp_7 = (i + 768) * 64;
    
#line 502 
    ;
    
#line 502 
    regs[i] = ixgbe_read_reg(hw,(unsigned int)tmp_7);
    
#line 501 
    i += 1;
    ldv_57518: 
#line 502 
    ;
    
#line 501 
    if (i <= 63) 
#line 503 
                 goto ldv_57517; else 
#line 506 
                                      goto ldv_57519;
    ldv_57519: 
#line 507 
    ;
    
#line 503 
    goto ldv_57495;
    case (u32)4100: 
#line 504 
    ;
    
#line 505 
    i = 0;
    
#line 505 
    goto ldv_57522;
    ldv_57521: 
#line 506 
    ;
    
#line 506 
    if (i <= 63) 
#line 506 
                 tmp_8 = i * 64 + 4100; else 
#line 506 
                                             tmp_8 = (i + -64) * 64 + 53252;
    
#line 506 
    ;
    
#line 506 
    regs[i] = ixgbe_read_reg(hw,(unsigned int)tmp_8);
    
#line 505 
    i += 1;
    ldv_57522: 
#line 506 
    ;
    
#line 505 
    if (i <= 63) 
#line 507 
                 goto ldv_57521; else 
#line 510 
                                      goto ldv_57523;
    ldv_57523: 
#line 511 
    ;
    
#line 507 
    goto ldv_57495;
    case (u32)24576: 
#line 508 
    ;
    
#line 509 
    i = 0;
    
#line 509 
    goto ldv_57526;
    ldv_57525: 
#line 510 
    ;
    
#line 510 
    regs[i] = ixgbe_read_reg(hw,(unsigned int)((i + 384) * 64));
    
#line 509 
    i += 1;
    ldv_57526: 
#line 510 
    ;
    
#line 509 
    if (i <= 63) 
#line 511 
                 goto ldv_57525; else 
#line 514 
                                      goto ldv_57527;
    ldv_57527: 
#line 515 
    ;
    
#line 511 
    goto ldv_57495;
    case (u32)24580: 
#line 512 
    ;
    
#line 513 
    i = 0;
    
#line 513 
    goto ldv_57530;
    ldv_57529: 
#line 514 
    ;
    
#line 514 
    regs[i] = ixgbe_read_reg(hw,(unsigned int)(i * 64 + 24580));
    
#line 513 
    i += 1;
    ldv_57530: 
#line 514 
    ;
    
#line 513 
    if (i <= 63) 
#line 515 
                 goto ldv_57529; else 
#line 518 
                                      goto ldv_57531;
    ldv_57531: 
#line 519 
    ;
    
#line 515 
    goto ldv_57495;
    case (u32)24584: 
#line 516 
    ;
    
#line 517 
    i = 0;
    
#line 517 
    goto ldv_57534;
    ldv_57533: 
#line 518 
    ;
    
#line 518 
    regs[i] = ixgbe_read_reg(hw,(unsigned int)(i * 64 + 24584));
    
#line 517 
    i += 1;
    ldv_57534: 
#line 518 
    ;
    
#line 517 
    if (i <= 63) 
#line 519 
                 goto ldv_57533; else 
#line 522 
                                      goto ldv_57535;
    ldv_57535: 
#line 523 
    ;
    
#line 519 
    goto ldv_57495;
    case (u32)24592: 
#line 520 
    ;
    
#line 521 
    i = 0;
    
#line 521 
    goto ldv_57538;
    ldv_57537: 
#line 522 
    ;
    
#line 522 
    regs[i] = ixgbe_read_reg(hw,(unsigned int)(i * 64 + 24592));
    
#line 521 
    i += 1;
    ldv_57538: 
#line 522 
    ;
    
#line 521 
    if (i <= 63) 
#line 523 
                 goto ldv_57537; else 
#line 526 
                                      goto ldv_57539;
    ldv_57539: 
#line 527 
    ;
    
#line 523 
    goto ldv_57495;
    case (u32)24600: 
#line 524 
    ;
    
#line 525 
    i = 0;
    
#line 525 
    goto ldv_57542;
    ldv_57541: 
#line 526 
    ;
    
#line 526 
    regs[i] = ixgbe_read_reg(hw,(unsigned int)(i * 64 + 24600));
    
#line 525 
    i += 1;
    ldv_57542: 
#line 526 
    ;
    
#line 525 
    if (i <= 63) 
#line 527 
                 goto ldv_57541; else 
#line 530 
                                      goto ldv_57543;
    ldv_57543: 
#line 531 
    ;
    
#line 527 
    goto ldv_57495;
    case (u32)24616: 
#line 528 
    ;
    
#line 529 
    i = 0;
    
#line 529 
    goto ldv_57546;
    ldv_57545: 
#line 530 
    ;
    
#line 530 
    regs[i] = ixgbe_read_reg(hw,(unsigned int)(i * 64 + 24616));
    
#line 529 
    i += 1;
    ldv_57546: 
#line 530 
    ;
    
#line 529 
    if (i <= 63) 
#line 531 
                 goto ldv_57545; else 
#line 534 
                                      goto ldv_57547;
    ldv_57547: 
#line 535 
    ;
    
#line 531 
    goto ldv_57495;
    default: 
#line 532 
    ;
    
#line 533 
    tmp_9 = ixgbe_read_reg(hw,reginfo->ofs);
    
#line 533 
    ;
    
#line 533 
    printk("\001",reginfo->name,tmp_9);
    
#line 535 
    goto return_label;
  }
  ldv_57495: 
#line 538 
  ;
  
#line 538 
  i = 0;
  
#line 538 
  goto ldv_57553;
  ldv_57552: 
#line 539 
  ;
  
#line 539 
  snprintf((char *)(& rname),16UL,"%s[%d-%d]",reginfo->name,i * 8,i * 8 + 7);
  
#line 540 
  printk("\001",(char *)(& rname));
  
#line 541 
  j = 0;
  
#line 541 
  goto ldv_57550;
  ldv_57549: 
#line 542 
  ;
  
#line 542 
  printk("",regs[i * 8 + j]);
  
#line 541 
  j += 1;
  ldv_57550: 
#line 542 
  ;
  
#line 541 
  if (j <= 7) 
#line 543 
              goto ldv_57549; else 
#line 546 
                                   goto ldv_57551;
  ldv_57551: 
#line 547 
  ;
  
#line 543 
  printk("");
  
#line 538 
  i += 1;
  ldv_57553: 
#line 539 
  ;
  
#line 538 
  if (i <= 7) 
#line 540 
              goto ldv_57552; else 
#line 543 
                                   goto ldv_57554;
  ldv_57554: 
#line 544 
  ;
  return_label: 
#line 545 
                return;
}


#line 551  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_dump(struct ixgbe_adapter *adapter)
{
  struct ixgbe_reg_info *reginfo;
  struct ixgbe_ring *tx_ring;
  struct ixgbe_tx_buffer *tx_buffer;
  union ixgbe_adv_tx_desc *tx_desc;
  struct my_u0 *u0;
  struct ixgbe_ring *rx_ring;
  union ixgbe_adv_rx_desc *rx_desc;
  struct ixgbe_rx_buffer *rx_buffer_info;
  u32 staterr;
  
#line 553 
  struct net_device *netdev = adapter->netdev;
  
#line 554 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 556 
  int n = 0;
  
#line 565 
  int i = 0;
  
#line 567 
  if (((int)adapter->msg_enable & 8192) == 0) 
#line 568 
                                              goto return_label; else ;
  
#line 571 
  if (netdev != (struct net_device *)0) {
    
#line 572 
    _dev_info((struct device const *)(& (adapter->pdev)->dev),"Net device Info\n");
    
#line 573 
    printk("\001");
    
#line 575 
    printk("\001",(char *)(& netdev->name),netdev->state,netdev->trans_start,netdev->last_rx);
  }
  else ;
  
#line 583 
  _dev_info((struct device const *)(& (adapter->pdev)->dev),"Register Dump\n");
  
#line 584 
  printk("\001");
  
#line 585 
  reginfo = (struct ixgbe_reg_info *)(& ixgbe_reg_info_tbl);
  
#line 585 
  goto ldv_57575;
  ldv_57574: 
#line 586 
  ;
  
#line 587 
  ixgbe_regdump(hw,reginfo);
  
#line 586 
  reginfo += 1;
  ldv_57575: 
#line 587 
  ;
  
#line 585 
  if (reginfo->name != (char *)0) 
#line 588 
                                  goto ldv_57574; else 
#line 591 
                                                       goto ldv_57576;
  ldv_57576: 
#line 592 
  ;
  
#line 591 
  if (netdev == (struct net_device *)0) 
#line 592 
                                        goto return_label;
  else {
    int tmp_0;
    bool tmp;
    
#line 591 
    tmp = netif_running((struct net_device const *)netdev);
    
#line 591 
    if (tmp) 
#line 591 
             tmp_0 = 0; else 
#line 591 
                             tmp_0 = 1;
    
#line 591 
    if (tmp_0) 
#line 592 
               goto return_label; else ;
  }
  
#line 594 
  _dev_info((struct device const *)(& (adapter->pdev)->dev),"TX Rings Summary\n");
  
#line 595 
  printk("\001",(char *)"Queue [NTU] [NTC] [bi(ntc)->dma  ]",(char *)"leng",(char *)"ntw",(char *)"timestamp");
  
#line 598 
  n = 0;
  
#line 598 
  goto ldv_57578;
  ldv_57577: 
#line 599 
  ;
  
#line 599 
  tx_ring = adapter->tx_ring[n];
  
#line 600 
  tx_buffer = tx_ring->__anonCompField_ixgbe_ring_117.tx_buffer_info + (int)tx_ring->next_to_clean;
  
#line 601 
  printk("\001",n,(int)tx_ring->next_to_use,(int)tx_ring->next_to_clean,tx_buffer->dma,tx_buffer->len,tx_buffer->next_to_watch,(unsigned long long)tx_buffer->time_stamp);
  
#line 598 
  n += 1;
  ldv_57578: 
#line 599 
  ;
  
#line 598 
  if (adapter->num_tx_queues > n) 
#line 600 
                                  goto ldv_57577; else 
#line 603 
                                                       goto ldv_57579;
  ldv_57579: 
#line 604 
  ;
  
#line 610 
  if (((int)adapter->msg_enable & 1024) == 0) 
#line 611 
                                              goto rx_ring_summary; else ;
  
#line 613 
  _dev_info((struct device const *)(& (adapter->pdev)->dev),"TX Rings Dump\n");
  
#line 650 
  n = 0;
  
#line 650 
  goto ldv_57585;
  ldv_57584: 
#line 651 
  ;
  
#line 651 
  tx_ring = adapter->tx_ring[n];
  
#line 652 
  printk("\001");
  
#line 653 
  printk("\001",(int)tx_ring->queue_index);
  
#line 654 
  printk("\001");
  
#line 655 
  printk("\001",(char *)"T [desc]     [address 63:0  ] ",(char *)"[PlPOIdStDDt Ln] [bi->dma       ] ",(char *)"leng",(char *)"ntw",(char *)"timestamp",(char *)"bi->skb");
  
#line 660 
  i = 0;
  
#line 660 
  goto ldv_57582;
  ldv_57581: 
#line 661 
  ;
  
#line 661 
  tx_desc = (union ixgbe_adv_tx_desc *)tx_ring->desc + i;
  
#line 662 
  tx_buffer = tx_ring->__anonCompField_ixgbe_ring_117.tx_buffer_info + i;
  
#line 663 
  u0 = (struct my_u0 *)tx_desc;
  
#line 664 
  if (tx_buffer->len != 0U) {
    
#line 665 
    printk("\001",i,u0->a,u0->b,tx_buffer->dma,tx_buffer->len,tx_buffer->next_to_watch,(unsigned long long)tx_buffer->time_stamp,tx_buffer->skb);
    
#line 674 
    if ((int)tx_ring->next_to_use == i && (int)tx_ring->next_to_clean == i) 
      
#line 676 
      printk("");
    else 
      
#line 677 
      if ((int)tx_ring->next_to_use == i) 
#line 678 
                                          printk("");
      else 
        
#line 679 
        if ((int)tx_ring->next_to_clean == i) 
#line 680 
                                              printk(""); else 
#line 682 
                                                               printk("");
    
#line 684 
    if (((int)adapter->msg_enable & 4096) != 0 && tx_buffer->skb != (struct sk_buff *)0) 
      
#line 686 
      print_hex_dump("\001","",1,16,1,(void const *)(tx_buffer->skb)->data,(unsigned long)tx_buffer->len,(_Bool)1); else ;
  }
  else ;
  
#line 660 
  i += 1;
  ldv_57582: 
#line 661 
  ;
  
#line 660 
  if (tx_ring->desc != (void *)0 && (int)tx_ring->count > i) 
#line 662 
                                                             goto ldv_57581; else 
                                                                    
#line 665 
                                                                    goto ldv_57583;
  ldv_57583: 
#line 666 
  ;
  
#line 650 
  n += 1;
  ldv_57585: 
#line 651 
  ;
  
#line 650 
  if (adapter->num_tx_queues > n) 
#line 652 
                                  goto ldv_57584; else 
#line 655 
                                                       goto ldv_57586;
  ldv_57586: 
#line 656 
  ;
  rx_ring_summary: 
#line 696 
  ;
  
#line 697 
  _dev_info((struct device const *)(& (adapter->pdev)->dev),"RX Rings Summary\n");
  
#line 698 
  printk("\001");
  
#line 699 
  n = 0;
  
#line 699 
  goto ldv_57588;
  ldv_57587: 
#line 700 
  ;
  
#line 700 
  rx_ring = adapter->rx_ring[n];
  
#line 701 
  printk("\001",n,(int)rx_ring->next_to_use,(int)rx_ring->next_to_clean);
  
#line 699 
  n += 1;
  ldv_57588: 
#line 700 
  ;
  
#line 699 
  if (adapter->num_rx_queues > n) 
#line 701 
                                  goto ldv_57587; else 
#line 704 
                                                       goto ldv_57589;
  ldv_57589: 
#line 705 
  ;
  
#line 706 
  if (((int)adapter->msg_enable & 2048) == 0) 
#line 707 
                                              goto return_label; else ;
  
#line 709 
  _dev_info((struct device const *)(& (adapter->pdev)->dev),"RX Rings Dump\n");
  
#line 756 
  n = 0;
  
#line 756 
  goto ldv_57594;
  ldv_57593: 
#line 757 
  ;
  
#line 757 
  rx_ring = adapter->rx_ring[n];
  
#line 758 
  printk("\001");
  
#line 759 
  printk("\001",(int)rx_ring->queue_index);
  
#line 760 
  printk("\001");
  
#line 761 
  printk("\001",(char *)"R  [desc]      [ PktBuf     A0] ",(char *)"[  HeadBuf   DD] [bi->dma       ] [bi->skb       ] ",(char *)"<-- Adv Rx Read format\n");
  
#line 765 
  printk("\001",(char *)"RWB[desc]      [PcsmIpSHl PtRs] ",(char *)"[vl er S cks ln] ---------------- [bi->skb       ] ",(char *)"<-- Adv Rx Write-Back format\n");
  
#line 770 
  i = 0;
  
#line 770 
  goto ldv_57591;
  ldv_57590: 
#line 771 
  ;
  
#line 771 
  rx_buffer_info = rx_ring->__anonCompField_ixgbe_ring_117.rx_buffer_info + i;
  
#line 772 
  rx_desc = (union ixgbe_adv_rx_desc *)rx_ring->desc + i;
  
#line 773 
  u0 = (struct my_u0 *)rx_desc;
  
#line 774 
  staterr = rx_desc->wb.upper.status_error;
  
#line 775 
  if ((staterr & 1U) != 0U) 
#line 777 
                            printk("\001",i,u0->a,u0->b,rx_buffer_info->skb);
  else {
    
#line 783 
    printk("\001",i,u0->a,u0->b,rx_buffer_info->dma,rx_buffer_info->skb);
    
#line 790 
    if (((int)adapter->msg_enable & 4096) != 0 && rx_buffer_info->dma != 0ULL) {
      unsigned int tmp_1;
      void *tmp_2;
      
#line 796 
      tmp_1 = ixgbe_rx_bufsz(rx_ring);
      
#line 794 
      tmp_2 = lowmem_page_address((struct page const *)rx_buffer_info->page);
      
#line 792 
      ;
      
#line 792 
      print_hex_dump("\001","",1,16,1,(void const *)(tmp_2 + rx_buffer_info->page_offset),(unsigned long)tmp_1,(_Bool)1);
    }
    else ;
  }
  
#line 800 
  if ((int)rx_ring->next_to_use == i) 
#line 801 
                                      printk("");
  else 
    
#line 802 
    if ((int)rx_ring->next_to_clean == i) 
#line 803 
                                          printk(""); else 
#line 805 
                                                           printk("");
  
#line 770 
  i += 1;
  ldv_57591: 
#line 771 
  ;
  
#line 770 
  if ((int)rx_ring->count > i) 
#line 772 
                               goto ldv_57590; else 
#line 775 
                                                    goto ldv_57592;
  ldv_57592: 
#line 776 
  ;
  
#line 756 
  n += 1;
  ldv_57594: 
#line 757 
  ;
  
#line 756 
  if (adapter->num_rx_queues > n) 
#line 758 
                                  goto ldv_57593; else 
#line 761 
                                                       goto ldv_57595;
  ldv_57595: 
#line 762 
  ;
  return_label: 
#line 763 
                return;
}


#line 811  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_release_hw_control(struct ixgbe_adapter *adapter)
{
  u32 ctrl_ext;
  
#line 816 
  ctrl_ext = ixgbe_read_reg(& adapter->hw,24U);
  
#line 817 
  ixgbe_write_reg(& adapter->hw,24U,ctrl_ext & 4026531839U);
  
#line 818 
  return;
}


#line 821  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_get_hw_control(struct ixgbe_adapter *adapter)
{
  u32 ctrl_ext;
  
#line 826 
  ctrl_ext = ixgbe_read_reg(& adapter->hw,24U);
  
#line 827 
  ixgbe_write_reg(& adapter->hw,24U,ctrl_ext | 268435456U);
  
#line 828 
  return;
}


#line 839  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_set_ivar(struct ixgbe_adapter *adapter, s8 direction, u8 queue, u8 msix_vector)
{
  u32 ivar;
  u32 index;
  
#line 843 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 844 
  switch ((unsigned int)hw->mac.type) {
    case (unsigned int)1: 
#line 845 
    ;
    
#line 846 
    msix_vector = (unsigned char)((unsigned int)msix_vector | 128U);
    
#line 847 
    if ((int)direction == -1) 
#line 848 
                              direction = (signed char)0; else ;
    
#line 849 
    index = (unsigned int)(((int)direction * 64 + (int)queue) >> 2) & 31U;
    
#line 850 
    ivar = ixgbe_read_reg(hw,(index + 576U) * 4U);
    
#line 851 
    ivar = (unsigned int)(~ (255 << ((int)queue & 3) * 8)) & ivar;
    
#line 852 
    ivar = (unsigned int)((int)msix_vector << ((int)queue & 3) * 8) | ivar;
    
#line 853 
    ixgbe_write_reg(hw,(index + 576U) * 4U,ivar);
    
#line 854 
    goto ldv_57614;
    case (unsigned int)2: 
#line 855 
    ;
    case (unsigned int)3: 
#line 856 
    ;
    case (unsigned int)4: 
#line 857 
    ;
    case (unsigned int)5: 
#line 858 
    ;
    
#line 859 
    if ((int)direction == -1) {
      
#line 861 
      msix_vector = (unsigned char)((unsigned int)msix_vector | 128U);
      
#line 862 
      index = (unsigned int)(((int)queue & 1) * 8);
      
#line 863 
      ivar = ixgbe_read_reg(& adapter->hw,2560U);
      
#line 864 
      ivar = (unsigned int)(~ (255 << index)) & ivar;
      
#line 865 
      ivar = (unsigned int)((int)msix_vector << index) | ivar;
      
#line 866 
      ixgbe_write_reg(& adapter->hw,2560U,ivar);
      
#line 867 
      goto ldv_57614;
    }
    else {
      
#line 870 
      msix_vector = (unsigned char)((unsigned int)msix_vector | 128U);
      
#line 871 
      index = (unsigned int)((((int)queue & 1) * 2 + (int)direction) * 8);
      
#line 872 
      ivar = ixgbe_read_reg(hw,(unsigned int)((((int)queue >> 1) + 576) * 4));
      
#line 873 
      ivar = (unsigned int)(~ (255 << index)) & ivar;
      
#line 874 
      ivar = (unsigned int)((int)msix_vector << index) | ivar;
      
#line 875 
      ixgbe_write_reg(hw,(unsigned int)((((int)queue >> 1) + 576) * 4),ivar);
      
#line 876 
      goto ldv_57614;
    }
    default: 
#line 878 
    ;
    
#line 879 
    goto ldv_57614;
  }
  ldv_57614: 
#line 881 
  ;
  
#line 882 
  return;
}


#line 883  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
__inline static void ixgbe_irq_rearm_queues(struct ixgbe_adapter *adapter, u64 qmask)
{
  u32 mask;
  
#line 888 
  switch ((unsigned int)adapter->hw.mac.type) {
    case (unsigned int)1: 
#line 889 
    ;
    
#line 890 
    mask = (unsigned int)qmask & 65535U;
    
#line 891 
    ixgbe_write_reg(& adapter->hw,2056U,mask);
    
#line 892 
    goto ldv_57626;
    case (unsigned int)2: 
#line 893 
    ;
    case (unsigned int)3: 
#line 894 
    ;
    case (unsigned int)4: 
#line 895 
    ;
    case (unsigned int)5: 
#line 896 
    ;
    
#line 897 
    mask = (unsigned int)qmask;
    
#line 898 
    ixgbe_write_reg(& adapter->hw,2704U,mask);
    
#line 899 
    mask = (unsigned int)(qmask >> 32);
    
#line 900 
    ixgbe_write_reg(& adapter->hw,2708U,mask);
    
#line 901 
    goto ldv_57626;
    default: 
#line 902 
    ;
    
#line 903 
    goto ldv_57626;
  }
  ldv_57626: 
#line 905 
  ;
  
#line 906 
  return;
}


#line 907  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
void ixgbe_unmap_and_free_tx_resource(struct ixgbe_ring *ring, struct ixgbe_tx_buffer *tx_buffer)
{
  
#line 910 
  if (tx_buffer->skb != (struct sk_buff *)0) {
    
#line 911 
    dev_kfree_skb_any(tx_buffer->skb);
    
#line 912 
    if (tx_buffer->len != 0U) 
#line 913 
                              dma_unmap_single_attrs(ring->dev,tx_buffer->dma,(unsigned long)tx_buffer->len,(enum dma_data_direction)DMA_TO_DEVICE,(struct dma_attrs *)0); else ;
  }
  else 
    
#line 917 
    if (tx_buffer->len != 0U) 
#line 918 
                              dma_unmap_page(ring->dev,tx_buffer->dma,(unsigned long)tx_buffer->len,(enum dma_data_direction)DMA_TO_DEVICE); else ;
  
#line 923 
  tx_buffer->next_to_watch = (union ixgbe_adv_tx_desc *)0;
  
#line 924 
  tx_buffer->skb = (struct sk_buff *)0;
  
#line 925 
  tx_buffer->len = 0U;
  
#line 926 
  return;
}


#line 929  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_update_xoff_rx_lfc(struct ixgbe_adapter *adapter)
{
  int i;
  u32 data;
  
#line 931 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 932 
  struct ixgbe_hw_stats *hwstats = & adapter->stats;
  
#line 936 
  if (hw->fc.current_mode != (unsigned int)ixgbe_fc_full && hw->fc.current_mode != (unsigned int)ixgbe_fc_rx_pause) 
    
#line 938 
    goto return_label; else ;
  
#line 940 
  switch ((unsigned int)hw->mac.type) {
    case (unsigned int)1: 
#line 941 
    ;
    
#line 942 
    data = ixgbe_read_reg(hw,53096U);
    
#line 943 
    goto ldv_57644;
    default: 
#line 944 
    ;
    
#line 945 
    data = ixgbe_read_reg(hw,16808U);
  }
  ldv_57644: 
#line 947 
  ;
  
#line 947 
  hwstats->lxoffrxc += (unsigned long long)data;
  
#line 950 
  if (data == 0U) 
#line 951 
                  goto return_label; else ;
  
#line 953 
  i = 0;
  
#line 953 
  goto ldv_57647;
  ldv_57646: 
#line 954 
  ;
  
#line 954 
  set_bit(3L,(unsigned long volatile *)(& (adapter->tx_ring[i])->state));
  
#line 953 
  i += 1;
  ldv_57647: 
#line 954 
  ;
  
#line 953 
  if (adapter->num_tx_queues > i) 
#line 955 
                                  goto ldv_57646; else 
#line 958 
                                                       goto ldv_57648;
  ldv_57648: 
#line 959 
  ;
  return_label: 
#line 960 
                return;
}


#line 958  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_update_xoff_received(struct ixgbe_adapter *adapter)
{
  u8 tc;
  int i;
  int tmp_0;
  
#line 960 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 961 
  struct ixgbe_hw_stats *hwstats = & adapter->stats;
  
#line 962 
  u32 xoff[8U] = {0U};
  
#line 965 
  bool pfc_en = adapter->dcb_cfg.pfc_mode_enable;
  
#line 967 
  if (adapter->ixgbe_ieee_pfc != (struct ieee_pfc *)0) 
#line 968 
                                                       pfc_en = (_Bool)(((int)pfc_en | ((unsigned int)(adapter->ixgbe_ieee_pfc)->pfc_en != 0U)) != 0); else ;
  
#line 970 
  if ((adapter->flags & 4096U) == 0U || ! pfc_en) {
    
#line 971 
    ixgbe_update_xoff_rx_lfc(adapter);
    
#line 972 
    goto return_label;
  }
  else ;
  
#line 976 
  i = 0;
  
#line 976 
  goto ldv_57663;
  ldv_57662: 
#line 977 
  ;
  {
    u32 pxoffrxc;
    int tmp;
    
#line 979 
    switch ((unsigned int)hw->mac.type) {
      case (unsigned int)1: 
#line 980 
      ;
      
#line 981 
      pxoffrxc = ixgbe_read_reg(hw,(unsigned int)((i + 13256) * 4));
      
#line 982 
      goto ldv_57660;
      default: 
#line 983 
      ;
      
#line 984 
      pxoffrxc = ixgbe_read_reg(hw,(unsigned int)((i + 4184) * 4));
    }
    ldv_57660: 
#line 986 
    ;
    
#line 986 
    hwstats->pxoffrxc[i] += (unsigned long long)pxoffrxc;
    
#line 988 
    tmp = netdev_get_prio_tc_map((struct net_device const *)adapter->netdev,(unsigned int)i);
    
#line 988 
    tc = (unsigned char)tmp;
    
#line 989 
    xoff[(int)tc] += pxoffrxc;
  }
  
#line 976 
  i += 1;
  ldv_57663: 
#line 977 
  ;
  
#line 976 
  if ((adapter->flags & 4096U) != 0U) 
#line 976 
                                      tmp_0 = 8; else 
#line 976 
                                                      tmp_0 = 1;
  
#line 976 
  ;
  
#line 976 
  if (tmp_0 > i) 
#line 978 
                 goto ldv_57662; else 
#line 981 
                                      goto ldv_57664;
  ldv_57664: 
#line 982 
  ;
  
#line 993 
  i = 0;
  
#line 993 
  goto ldv_57667;
  ldv_57666: 
#line 994 
  ;
  {
    
#line 994 
    struct ixgbe_ring *tx_ring = adapter->tx_ring[i];
    
#line 996 
    tc = tx_ring->dcb_tc;
    
#line 997 
    if (xoff[(int)tc] != 0U) 
#line 998 
                             set_bit(3L,(unsigned long volatile *)(& tx_ring->state)); else ;
  }
  
#line 993 
  i += 1;
  ldv_57667: 
#line 994 
  ;
  
#line 993 
  if (adapter->num_tx_queues > i) 
#line 995 
                                  goto ldv_57666; else 
#line 998 
                                                       goto ldv_57668;
  ldv_57668: 
#line 999 
  ;
  return_label: 
#line 1000 
                return;
}


#line 1002  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static u64 ixgbe_get_tx_completed(struct ixgbe_ring *ring)
{
  u64 __retres;
  
#line 1004 
  __retres = ring->stats.packets;
  
#line 1004 
  return __retres;
}


#line 1007  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static u64 ixgbe_get_tx_pending(struct ixgbe_ring *ring)
{
  u64 __retres;
  struct ixgbe_adapter *adapter;
  struct ixgbe_hw *hw;
  u32 head;
  u32 tail;
  
#line 1013 
  if (ring->l2_accel_priv != (struct ixgbe_fwd_adapter *)0) 
#line 1014 
                                                            adapter = (ring->l2_accel_priv)->real_adapter; else 
                                                                    
#line 1016 
                                                                    adapter = (struct ixgbe_adapter *)netdev_priv((struct net_device const *)ring->netdev);
  
#line 1018 
  hw = & adapter->hw;
  
#line 1019 
  head = ixgbe_read_reg(hw,(unsigned int)((int)ring->reg_idx * 64 + 24592));
  
#line 1020 
  tail = ixgbe_read_reg(hw,(unsigned int)((int)ring->reg_idx * 64 + 24600));
  
#line 1022 
  if (head != tail) {
    u32 tmp_0;
    
#line 1024 
    if (head < tail) 
#line 1024 
                     tmp_0 = tail - head; else 
#line 1024 
                                               tmp_0 = ((unsigned int)ring->count + tail) - head;
    
#line 1024 
    __retres = (unsigned long long)tmp_0;
    
#line 1024 
    goto return_label;
  }
  else ;
  
#line 1026 
  __retres = 0ULL;
  return_label: 
#line 1026 
                return __retres;
}


#line 1029  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
__inline static bool ixgbe_check_tx_hang(struct ixgbe_ring *tx_ring)
{
  bool __retres;
  u64 tmp;
  u64 tmp_0;
  
#line 1031 
  tmp = ixgbe_get_tx_completed(tx_ring);
  
#line 1031 
  u32 tx_done = (unsigned int)tmp;
  
#line 1032 
  u32 tx_done_old = (unsigned int)tx_ring->__anonCompField_ixgbe_ring_120.tx_stats.tx_done_old;
  
#line 1033 
  tmp_0 = ixgbe_get_tx_pending(tx_ring);
  
#line 1033 
  u32 tx_pending = (unsigned int)tmp_0;
  
#line 1035 
  set_bit(2L,(unsigned long volatile *)(& tx_ring->state));
  
#line 1049 
  if (tx_done_old == tx_done && tx_pending != 0U) {
    int tmp_1;
    
#line 1051 
    tmp_1 = test_and_set_bit(3L,(unsigned long volatile *)(& tx_ring->state));
    
#line 1051 
    __retres = (_Bool)(tmp_1 != 0);
    
#line 1051 
    goto return_label;
  }
  else ;
  
#line 1054 
  tx_ring->__anonCompField_ixgbe_ring_120.tx_stats.tx_done_old = (unsigned long long)tx_done;
  
#line 1056 
  set_bit(3L,(unsigned long volatile *)(& tx_ring->state));
  
#line 1058 
  __retres = (_Bool)0;
  return_label: 
#line 1058 
                return __retres;
}


#line 1065  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_tx_timeout_reset(struct ixgbe_adapter *adapter)
{
  int tmp;
  
#line 1069 
  tmp = constant_test_bit(2L,(unsigned long const volatile *)(& adapter->state));
  
#line 1069 
  if (tmp == 0) {
    
#line 1070 
    adapter->flags2 |= 64U;
    
#line 1071 
    if (((int)adapter->msg_enable & 1) != 0) 
#line 1071 
                                             netdev_warn((struct net_device const *)adapter->netdev,"initiating reset due to tx timeout\n"); else ;
    
#line 1072 
    ixgbe_service_event_schedule(adapter);
  }
  else ;
  
#line 1074 
  return;
}


#line 1081  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static bool ixgbe_clean_tx_irq(struct ixgbe_q_vector *q_vector, struct ixgbe_ring *tx_ring)
{
  bool __retres;
  struct ixgbe_tx_buffer *tx_buffer;
  union ixgbe_adv_tx_desc *tx_desc;
  int tmp;
  int tmp_2;
  struct netdev_queue *tmp_4;
  int tmp_8;
  
#line 1084 
  struct ixgbe_adapter *adapter = q_vector->adapter;
  
#line 1087 
  unsigned int total_bytes = 0U;
  
#line 1087 
  unsigned int total_packets = 0U;
  
#line 1088 
  unsigned int budget = (unsigned int)q_vector->tx.work_limit;
  
#line 1089 
  unsigned int i = (unsigned int)tx_ring->next_to_clean;
  
#line 1091 
  tmp = constant_test_bit(2L,(unsigned long const volatile *)(& adapter->state));
  
#line 1091 
  if (tmp != 0) {
    
#line 1092 
    __retres = (_Bool)1;
    
#line 1092 
    goto return_label;
  }
  else ;
  
#line 1094 
  tx_buffer = tx_ring->__anonCompField_ixgbe_ring_117.tx_buffer_info + i;
  
#line 1095 
  tx_desc = (union ixgbe_adv_tx_desc *)tx_ring->desc + i;
  
#line 1096 
  i -= (unsigned int)tx_ring->count;
  ldv_57704: 
#line 1097 
  ;
  {
    
#line 1099 
    union ixgbe_adv_tx_desc *eop_desc = tx_buffer->next_to_watch;
    
#line 1102 
    if (eop_desc == (union ixgbe_adv_tx_desc *)0) 
#line 1103 
                                                  goto ldv_57700; else ;
    
#line 1109 
    if ((eop_desc->wb.status & 1U) == 0U) 
#line 1110 
                                          goto ldv_57700; else ;
    
#line 1113 
    tx_buffer->next_to_watch = (union ixgbe_adv_tx_desc *)0;
    
#line 1116 
    total_bytes = tx_buffer->bytecount + total_bytes;
    
#line 1117 
    total_packets = (unsigned int)tx_buffer->gso_segs + total_packets;
    
#line 1120 
    dev_consume_skb_any(tx_buffer->skb);
    
#line 1123 
    dma_unmap_single_attrs(tx_ring->dev,tx_buffer->dma,(unsigned long)tx_buffer->len,(enum dma_data_direction)DMA_TO_DEVICE,(struct dma_attrs *)0);
    
#line 1129 
    tx_buffer->skb = (struct sk_buff *)0;
    
#line 1130 
    tx_buffer->len = 0U;
    
#line 1133 
    goto ldv_57702;
    ldv_57701: 
#line 1134 
    ;
    
#line 1134 
    tx_buffer += 1;
    
#line 1135 
    tx_desc += 1;
    
#line 1136 
    i += 1U;
    
#line 1137 
    if ((long)(i == 0U) != 0L) {
      
#line 1138 
      i -= (unsigned int)tx_ring->count;
      
#line 1139 
      tx_buffer = tx_ring->__anonCompField_ixgbe_ring_117.tx_buffer_info;
      
#line 1140 
      tx_desc = (union ixgbe_adv_tx_desc *)tx_ring->desc;
    }
    else ;
    
#line 1144 
    if (tx_buffer->len != 0U) {
      
#line 1145 
      dma_unmap_page(tx_ring->dev,tx_buffer->dma,(unsigned long)tx_buffer->len,(enum dma_data_direction)DMA_TO_DEVICE);
      
#line 1149 
      tx_buffer->len = 0U;
    }
    else ;
    ldv_57702: 
#line 1151 
    ;
    
#line 1133 
    if (tx_desc != eop_desc) 
#line 1135 
                             goto ldv_57701; else 
#line 1138 
                                                  goto ldv_57703;
    ldv_57703: 
#line 1139 
    ;
    
#line 1154 
    tx_buffer += 1;
    
#line 1155 
    tx_desc += 1;
    
#line 1156 
    i += 1U;
    
#line 1157 
    if ((long)(i == 0U) != 0L) {
      
#line 1158 
      i -= (unsigned int)tx_ring->count;
      
#line 1159 
      tx_buffer = tx_ring->__anonCompField_ixgbe_ring_117.tx_buffer_info;
      
#line 1160 
      tx_desc = (union ixgbe_adv_tx_desc *)tx_ring->desc;
    }
    else ;
    
#line 1164 
    __builtin_prefetch((void const *)tx_desc);
    
#line 1167 
    budget -= 1U;
  }
  
#line 1168 
  if ((long)(budget != 0U) != 0L) 
#line 1170 
                                  goto ldv_57704; else 
#line 1173 
                                                       goto ldv_57700;
  ldv_57700: 
#line 1174 
  ;
  
#line 1170 
  i = (unsigned int)tx_ring->count + i;
  
#line 1171 
  tx_ring->next_to_clean = (unsigned short)i;
  
#line 1172 
  u64_stats_init(& tx_ring->syncp);
  
#line 1173 
  tx_ring->stats.bytes += (unsigned long long)total_bytes;
  
#line 1174 
  tx_ring->stats.packets += (unsigned long long)total_packets;
  
#line 1175 
  u64_stats_init(& tx_ring->syncp);
  
#line 1176 
  q_vector->tx.total_bytes += total_bytes;
  
#line 1177 
  q_vector->tx.total_packets += total_packets;
  
#line 1179 
  tmp_2 = constant_test_bit(2L,(unsigned long const volatile *)(& tx_ring->state));
  
#line 1179 
  if (tmp_2 != 0) {
    bool tmp_3;
    
#line 1179 
    tmp_3 = ixgbe_check_tx_hang(tx_ring);
    
#line 1179 
    if ((int)tmp_3 != 0) {
      
#line 1181 
      struct ixgbe_hw *hw = & adapter->hw;
      
#line 1182 
      if (((int)adapter->msg_enable & 1) != 0) {
        u32 tmp_0;
        u32 tmp_1;
        
#line 1182 
        ;
        
#line 1182 
        ;
        
#line 1182 
        ;
        
#line 1182 
        ;
        
#line 1182 
        tmp_0 = ixgbe_read_reg(hw,(unsigned int)((int)tx_ring->reg_idx * 64 + 24600));
        
#line 1182 
        tmp_1 = ixgbe_read_reg(hw,(unsigned int)((int)tx_ring->reg_idx * 64 + 24592));
        
#line 1182 
        ;
        
#line 1182 
        ;
        
#line 1182 
        netdev_err((struct net_device const *)adapter->netdev,"Detected Tx Unit Hang\n",(int)tx_ring->queue_index,tmp_1,tmp_0,(int)tx_ring->next_to_use,i,(tx_ring->__anonCompField_ixgbe_ring_117.tx_buffer_info + i)->time_stamp,jiffies);
      }
      else ;
      
#line 1196 
      netif_start_subqueue(tx_ring->netdev,(unsigned short)((int)tx_ring->queue_index));
      
#line 1198 
      if (((int)adapter->msg_enable & 2) != 0) 
#line 1198 
                                               netdev_info((struct net_device const *)adapter->netdev,"tx hang %d detected on queue %d, resetting adapter\n",adapter->tx_timeout_count + 1U,(int)tx_ring->queue_index); else ;
      
#line 1203 
      ixgbe_tx_timeout_reset(adapter);
      
#line 1206 
      __retres = (_Bool)1;
      
#line 1206 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 1209 
  ;
  
#line 1209 
  ;
  
#line 1209 
  tmp_4 = txring_txq((struct ixgbe_ring const *)tx_ring);
  
#line 1209 
  netdev_tx_completed_queue(tmp_4,total_packets,total_bytes);
  
#line 1213 
  if ((long)(total_packets != 0U) != 0L) {
    bool tmp_7;
    
#line 1213 
    tmp_7 = netif_carrier_ok((struct net_device const *)tx_ring->netdev);
    
#line 1213 
    if ((long)((int)tmp_7 != 0) != 0L) 
#line 1213 
                                       tmp_8 = 1; else 
#line 1213 
                                                       tmp_8 = 0;
  }
  else 
#line 1213 
       tmp_8 = 0;
  
#line 1213 
  if (tmp_8 != 0) {
    u16 tmp_9;
    
#line 1213 
    tmp_9 = ixgbe_desc_unused(tx_ring);
    
#line 1213 
    if ((long)((unsigned int)tmp_9 > 41U) != 0L) {
      bool tmp_5;
      
#line 1215 
      ldv_inline_asm();
      
#line 1219 
      tmp_5 = __netif_subqueue_stopped((struct net_device const *)tx_ring->netdev,(unsigned short)((int)tx_ring->queue_index));
      
#line 1219 
      if ((int)tmp_5 != 0) {
        int tmp_6;
        
#line 1221 
        tmp_6 = constant_test_bit(2L,(unsigned long const volatile *)(& adapter->state));
        
#line 1221 
        if (tmp_6 == 0) {
          
#line 1222 
          netif_wake_subqueue(tx_ring->netdev,(unsigned short)((int)tx_ring->queue_index));
          
#line 1224 
          tx_ring->__anonCompField_ixgbe_ring_120.tx_stats.restart_queue += 1ULL;
        }
        else ;
      }
      else ;
    }
    else ;
  }
  else ;
  
#line 1228 
  __retres = (_Bool)(budget != 0U);
  return_label: 
#line 1228 
                return __retres;
}


#line 1232  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_update_tx_dca(struct ixgbe_adapter *adapter, struct ixgbe_ring *tx_ring, int cpu)
{
  u8 tmp;
  u16 reg_offset;
  
#line 1236 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 1237 
  tmp = dca3_get_tag(tx_ring->dev,cpu);
  
#line 1237 
  u32 txctrl = (unsigned int)tmp;
  
#line 1240 
  switch ((unsigned int)hw->mac.type) {
    case (unsigned int)1: 
#line 1241 
    ;
    
#line 1242 
    reg_offset = (unsigned short)((unsigned int)((unsigned short)((int)tx_ring->reg_idx + 7296)) * 4U);
    
#line 1243 
    goto ldv_57715;
    case (unsigned int)2: 
#line 1244 
    ;
    case (unsigned int)3: 
#line 1245 
    ;
    
#line 1246 
    reg_offset = (unsigned short)((unsigned int)((unsigned short)tx_ring->reg_idx) * 64U + 24588U);
    
#line 1247 
    txctrl <<= 24;
    
#line 1248 
    goto ldv_57715;
    default: 
#line 1249 
    ;
    
#line 1251 
    goto return_label;
  }
  ldv_57715: 
#line 1259 
  ;
  
#line 1259 
  txctrl |= 8736U;
  
#line 1263 
  ixgbe_write_reg(hw,(unsigned int)reg_offset,txctrl);
  return_label: 
#line 1264 
                return;
}


#line 1266  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_update_rx_dca(struct ixgbe_adapter *adapter, struct ixgbe_ring *rx_ring, int cpu)
{
  u8 tmp;
  int tmp_1;
  
#line 1270 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 1271 
  tmp = dca3_get_tag(rx_ring->dev,cpu);
  
#line 1271 
  u32 rxctrl = (unsigned int)tmp;
  
#line 1272 
  u8 reg_idx = rx_ring->reg_idx;
  
#line 1275 
  switch ((unsigned int)hw->mac.type) {
    case (unsigned int)2: 
#line 1276 
    ;
    case (unsigned int)3: 
#line 1277 
    ;
    
#line 1278 
    rxctrl <<= 24;
    
#line 1279 
    goto ldv_57729;
    default: 
#line 1280 
    ;
    
#line 1281 
    goto ldv_57729;
  }
  ldv_57729: 
#line 1289 
  ;
  
#line 1289 
  rxctrl |= 544U;
  
#line 1292 
  ;
  
#line 1292 
  if ((unsigned int)reg_idx <= 15U) 
#line 1292 
                                    tmp_1 = ((int)reg_idx + 2176) * 4;
  else {
    int tmp_0;
    
#line 1292 
    if ((unsigned int)reg_idx <= 63U) 
#line 1292 
                                      tmp_0 = (int)reg_idx * 64 + 4108; else 
                                                                    
#line 1292 
                                                                    tmp_0 = ((int)reg_idx + -64) * 64 + 53260;
    
#line 1292 
    tmp_1 = tmp_0;
  }
  
#line 1292 
  ;
  
#line 1292 
  ixgbe_write_reg(hw,(unsigned int)tmp_1,rxctrl);
  
#line 1293 
  return;
}


#line 1295  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_update_dca(struct ixgbe_q_vector *q_vector)
{
  struct ixgbe_ring *ring;
  int tmp_4;
  
#line 1297 
  struct ixgbe_adapter *adapter = q_vector->adapter;
  {
    int tmp_3;
    
#line 1299 
    __preempt_count_add(1);
    
#line 1300 
    ldv_inline_asm();
    {
      int pscr_ret__;
      {
        
#line 1299 
        void const *__vpp_verify = (void const *)0;
        
#line 1299 
        void const *tmp = __vpp_verify;
      }
      
#line 1299 
      switch (4UL) {
        int tmp_0;
        int tmp_0_0;
        int tmp_1;
        int tmp_2;
        case (unsigned long)1: 
#line 1299 
        ;
        {
          int pfo_ret__;
          
#line 1299 
          switch (4UL) {
            case (unsigned long)1: 
#line 1299 
            ;
            
#line 1300 
            ldv_inline_asm();
            
#line 1299 
            goto ldv_57742;
            case (unsigned long)2: 
#line 1299 
            ;
            
#line 1300 
            ldv_inline_asm();
            
#line 1299 
            goto ldv_57742;
            case (unsigned long)4: 
#line 1299 
            ;
            
#line 1300 
            ldv_inline_asm();
            
#line 1299 
            goto ldv_57742;
            case (unsigned long)8: 
#line 1299 
            ;
            
#line 1300 
            ldv_inline_asm();
            
#line 1299 
            goto ldv_57742;
            default: 
#line 1299 
            ;
            
#line 1299 
            __bad_percpu_size();
          }
          ldv_57742: 
#line 1299 
          ;
          
#line 1299 
          tmp_0 = pfo_ret__;
        }
        
#line 1299 
        pscr_ret__ = tmp_0;
        
#line 1299 
        goto ldv_57748;
        case (unsigned long)2: 
#line 1299 
        ;
        {
          int pfo_ret___0;
          
#line 1299 
          switch (4UL) {
            case (unsigned long)1: 
#line 1299 
            ;
            
#line 1300 
            ldv_inline_asm();
            
#line 1299 
            goto ldv_57752;
            case (unsigned long)2: 
#line 1299 
            ;
            
#line 1300 
            ldv_inline_asm();
            
#line 1299 
            goto ldv_57752;
            case (unsigned long)4: 
#line 1299 
            ;
            
#line 1300 
            ldv_inline_asm();
            
#line 1299 
            goto ldv_57752;
            case (unsigned long)8: 
#line 1299 
            ;
            
#line 1300 
            ldv_inline_asm();
            
#line 1299 
            goto ldv_57752;
            default: 
#line 1299 
            ;
            
#line 1299 
            __bad_percpu_size();
          }
          ldv_57752: 
#line 1299 
          ;
          
#line 1299 
          tmp_0_0 = pfo_ret___0;
        }
        
#line 1299 
        pscr_ret__ = tmp_0_0;
        
#line 1299 
        goto ldv_57748;
        case (unsigned long)4: 
#line 1299 
        ;
        {
          int pfo_ret___1;
          
#line 1299 
          switch (4UL) {
            case (unsigned long)1: 
#line 1299 
            ;
            
#line 1300 
            ldv_inline_asm();
            
#line 1299 
            goto ldv_57761;
            case (unsigned long)2: 
#line 1299 
            ;
            
#line 1300 
            ldv_inline_asm();
            
#line 1299 
            goto ldv_57761;
            case (unsigned long)4: 
#line 1299 
            ;
            
#line 1300 
            ldv_inline_asm();
            
#line 1299 
            goto ldv_57761;
            case (unsigned long)8: 
#line 1299 
            ;
            
#line 1300 
            ldv_inline_asm();
            
#line 1299 
            goto ldv_57761;
            default: 
#line 1299 
            ;
            
#line 1299 
            __bad_percpu_size();
          }
          ldv_57761: 
#line 1299 
          ;
          
#line 1299 
          tmp_1 = pfo_ret___1;
        }
        
#line 1299 
        pscr_ret__ = tmp_1;
        
#line 1299 
        goto ldv_57748;
        case (unsigned long)8: 
#line 1299 
        ;
        {
          int pfo_ret___2;
          
#line 1299 
          switch (4UL) {
            case (unsigned long)1: 
#line 1299 
            ;
            
#line 1300 
            ldv_inline_asm();
            
#line 1299 
            goto ldv_57770;
            case (unsigned long)2: 
#line 1299 
            ;
            
#line 1300 
            ldv_inline_asm();
            
#line 1299 
            goto ldv_57770;
            case (unsigned long)4: 
#line 1299 
            ;
            
#line 1300 
            ldv_inline_asm();
            
#line 1299 
            goto ldv_57770;
            case (unsigned long)8: 
#line 1299 
            ;
            
#line 1300 
            ldv_inline_asm();
            
#line 1299 
            goto ldv_57770;
            default: 
#line 1299 
            ;
            
#line 1299 
            __bad_percpu_size();
          }
          ldv_57770: 
#line 1299 
          ;
          
#line 1299 
          tmp_2 = pfo_ret___2;
        }
        
#line 1299 
        pscr_ret__ = tmp_2;
        
#line 1299 
        goto ldv_57748;
        default: 
#line 1299 
        ;
        
#line 1299 
        __bad_size_call_parameter();
        
#line 1299 
        goto ldv_57748;
      }
      ldv_57748: 
#line 1299 
      ;
      
#line 1299 
      tmp_3 = pscr_ret__;
    }
    
#line 1299 
    tmp_4 = tmp_3;
  }
  
#line 1299 
  int cpu = tmp_4;
  
#line 1301 
  if (q_vector->cpu == cpu) 
#line 1302 
                            goto out_no_update; else ;
  
#line 1304 
  ring = q_vector->tx.ring;
  
#line 1304 
  goto ldv_57781;
  ldv_57780: 
#line 1305 
  ;
  
#line 1305 
  ixgbe_update_tx_dca(adapter,ring,cpu);
  
#line 1304 
  ring = ring->next;
  ldv_57781: 
#line 1305 
  ;
  
#line 1304 
  if (ring != (struct ixgbe_ring *)0) 
#line 1306 
                                      goto ldv_57780; else 
#line 1309 
                                                           goto ldv_57782;
  ldv_57782: 
#line 1310 
  ;
  
#line 1307 
  ring = q_vector->rx.ring;
  
#line 1307 
  goto ldv_57784;
  ldv_57783: 
#line 1308 
  ;
  
#line 1308 
  ixgbe_update_rx_dca(adapter,ring,cpu);
  
#line 1307 
  ring = ring->next;
  ldv_57784: 
#line 1308 
  ;
  
#line 1307 
  if (ring != (struct ixgbe_ring *)0) 
#line 1309 
                                      goto ldv_57783; else 
#line 1312 
                                                           goto ldv_57785;
  ldv_57785: 
#line 1313 
  ;
  
#line 1310 
  q_vector->cpu = cpu;
  out_no_update: 
#line 1311 
  ;
  
#line 1312 
  ldv_inline_asm();
  
#line 1312 
  __preempt_count_sub(1);
  
#line 1313 
  return;
}


#line 1315  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_setup_dca(struct ixgbe_adapter *adapter)
{
  int i;
  
#line 1319 
  if ((adapter->flags & 256U) == 0U) 
#line 1320 
                                     goto return_label; else ;
  
#line 1323 
  ixgbe_write_reg(& adapter->hw,69748U,2U);
  
#line 1325 
  i = 0;
  
#line 1325 
  goto ldv_57791;
  ldv_57790: 
#line 1326 
  ;
  
#line 1326 
  (adapter->q_vector[i])->cpu = -1;
  
#line 1327 
  ixgbe_update_dca(adapter->q_vector[i]);
  
#line 1325 
  i += 1;
  ldv_57791: 
#line 1326 
  ;
  
#line 1325 
  if (adapter->num_q_vectors > i) 
#line 1327 
                                  goto ldv_57790; else 
#line 1330 
                                                       goto ldv_57792;
  ldv_57792: 
#line 1331 
  ;
  return_label: 
#line 1332 
                return;
}


#line 1331  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static int __ixgbe_notify_dca(struct device *dev, void *data)
{
  int __retres;
  
#line 1333 
  struct ixgbe_adapter *adapter = dev_get_drvdata((struct device const *)dev);
  
#line 1334 
  unsigned long event = *((unsigned long *)data);
  
#line 1336 
  if ((adapter->flags & 512U) == 0U) {
    
#line 1337 
    __retres = 0;
    
#line 1337 
    goto return_label;
  }
  else ;
  
#line 1339 
  switch (event) {
    int tmp_0;
    case (unsigned long)1: 
#line 1340 
    ;
    
#line 1342 
    if ((adapter->flags & 256U) != 0U) 
#line 1343 
                                       goto ldv_57800; else ;
    
#line 1344 
    tmp_0 = dca_add_requester(dev);
    
#line 1344 
    if (tmp_0 == 0) {
      
#line 1345 
      adapter->flags |= 256U;
      
#line 1346 
      ixgbe_setup_dca(adapter);
      
#line 1347 
      goto ldv_57800;
    }
    else ;
    case (unsigned long)2: 
#line 1350 
    ;
    
#line 1351 
    if ((adapter->flags & 256U) != 0U) {
      
#line 1352 
      dca_remove_requester(dev);
      
#line 1353 
      adapter->flags &= 4294967039U;
      
#line 1354 
      ixgbe_write_reg(& adapter->hw,69748U,1U);
    }
    else ;
    
#line 1356 
    goto ldv_57800;
  }
  ldv_57800: 
#line 1359 
  ;
  
#line 1359 
  __retres = 0;
  return_label: 
#line 1359 
                return __retres;
}


#line 1363  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
__inline static void ixgbe_rx_hash(struct ixgbe_ring *ring, union ixgbe_adv_rx_desc *rx_desc, struct sk_buff *skb)
{
  
#line 1367 
  if (((ring->netdev)->features & 8589934592ULL) != 0ULL) 
#line 1368 
                                                          skb_set_hash(skb,rx_desc->wb.lower.hi_dword.rss,(enum pkt_hash_types)PKT_HASH_TYPE_L3); else ;
  
#line 1370 
  return;
}


#line 1381  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
__inline static bool ixgbe_rx_is_fcoe(struct ixgbe_ring *ring, union ixgbe_adv_rx_desc *rx_desc)
{
  bool __retres;
  int tmp_0;
  int tmp;
  
#line 1384 
  __le16 pkt_info = rx_desc->wb.lower.lo_dword.hs_rss.pkt_info;
  
#line 1386 
  tmp = constant_test_bit(6L,(unsigned long const volatile *)(& ring->state));
  
#line 1386 
  if (tmp != 0) 
    
#line 1386 
    if (((int)pkt_info & 112) == 32) 
#line 1386 
                                     tmp_0 = 1; else 
#line 1386 
                                                     tmp_0 = 0;
  else 
#line 1386 
       tmp_0 = 0;
  
#line 1386 
  __retres = (_Bool)(tmp_0 != 0);
  
#line 1386 
  return __retres;
}


#line 1399  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
__inline static void ixgbe_rx_checksum(struct ixgbe_ring *ring, union ixgbe_adv_rx_desc *rx_desc, struct sk_buff *skb)
{
  __le32 tmp;
  __le32 tmp_1;
  __le32 tmp_3;
  
#line 1403 
  __le16 pkt_info = rx_desc->wb.lower.lo_dword.hs_rss.pkt_info;
  
#line 1404 
  __le16 hdr_info = rx_desc->wb.lower.lo_dword.hs_rss.hdr_info;
  
#line 1405 
  bool encap_pkt = (_Bool)0;
  
#line 1407 
  skb_checksum_none_assert((struct sk_buff const *)skb);
  
#line 1410 
  if (((ring->netdev)->features & 17179869184ULL) == 0ULL) 
#line 1411 
                                                           goto return_label; else ;
  
#line 1413 
  if (((int)pkt_info & 2048) != 0 && ((int)hdr_info & 1) != 0) {
    
#line 1415 
    encap_pkt = (_Bool)1;
    
#line 1416 
    skb->encapsulation = (unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U;
    
#line 1417 
    skb->ip_summed = (unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U;
  }
  else ;
  
#line 1421 
  tmp = ixgbe_test_staterr(rx_desc,64U);
  
#line 1421 
  if (tmp != 0U) {
    __le32 tmp_0;
    
#line 1421 
    tmp_0 = ixgbe_test_staterr(rx_desc,2147483648U);
    
#line 1421 
    if (tmp_0 != 0U) {
      
#line 1423 
      ring->__anonCompField_ixgbe_ring_120.rx_stats.csum_err += 1ULL;
      
#line 1424 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 1427 
  tmp_1 = ixgbe_test_staterr(rx_desc,32U);
  
#line 1427 
  if (tmp_1 == 0U) 
#line 1428 
                   goto return_label; else ;
  
#line 1430 
  tmp_3 = ixgbe_test_staterr(rx_desc,1073741824U);
  
#line 1430 
  if (tmp_3 != 0U) {
    
#line 1435 
    if (((int)pkt_info & 512) != 0) {
      int tmp_2;
      
#line 1435 
      tmp_2 = constant_test_bit(5L,(unsigned long const volatile *)(& ring->state));
      
#line 1435 
      if (tmp_2 != 0) 
#line 1437 
                      goto return_label; else ;
    }
    else ;
    
#line 1439 
    ring->__anonCompField_ixgbe_ring_120.rx_stats.csum_err += 1ULL;
    
#line 1440 
    goto return_label;
  }
  else ;
  
#line 1444 
  skb->ip_summed = (unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))1U;
  
#line 1445 
  if ((int)encap_pkt != 0) {
    __le32 tmp_4;
    __le32 tmp_5;
    
#line 1446 
    tmp_4 = ixgbe_test_staterr(rx_desc,256U);
    
#line 1446 
    if (tmp_4 == 0U) 
#line 1447 
                     goto return_label; else ;
    
#line 1449 
    tmp_5 = ixgbe_test_staterr(rx_desc,67108864U);
    
#line 1449 
    if (tmp_5 != 0U) {
      
#line 1450 
      ring->__anonCompField_ixgbe_ring_120.rx_stats.csum_err += 1ULL;
      
#line 1451 
      goto return_label;
    }
    else ;
    
#line 1454 
    skb->csum_level = (unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))1U;
  }
  else ;
  return_label: 
#line 1456 
                return;
}


#line 1458  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static bool ixgbe_alloc_mapped_page(struct ixgbe_ring *rx_ring, struct ixgbe_rx_buffer *bi)
{
  bool __retres;
  dma_addr_t dma;
  unsigned int tmp;
  unsigned int tmp_0;
  int tmp_2;
  
#line 1461 
  struct page *page = bi->page;
  
#line 1465 
  if ((long)(page != (struct page *)0) != 0L) {
    
#line 1466 
    __retres = (_Bool)1;
    
#line 1466 
    goto return_label;
  }
  else ;
  
#line 1469 
  tmp = ixgbe_rx_pg_order(rx_ring);
  
#line 1469 
  page = dev_alloc_pages(tmp);
  
#line 1470 
  if ((long)(page == (struct page *)0) != 0L) {
    
#line 1471 
    rx_ring->__anonCompField_ixgbe_ring_120.rx_stats.alloc_rx_page_failed += 1ULL;
    
#line 1472 
    __retres = (_Bool)0;
    
#line 1472 
    goto return_label;
  }
  else ;
  
#line 1477 
  tmp_0 = ixgbe_rx_pg_order(rx_ring);
  
#line 1476 
  ;
  
#line 1476 
  ;
  
#line 1476 
  dma = dma_map_page(rx_ring->dev,page,0UL,4096UL << tmp_0,(enum dma_data_direction)DMA_FROM_DEVICE);
  
#line 1483 
  tmp_2 = dma_mapping_error(rx_ring->dev,dma);
  
#line 1483 
  if (tmp_2 != 0) {
    unsigned int tmp_1;
    
#line 1484 
    tmp_1 = ixgbe_rx_pg_order(rx_ring);
    
#line 1484 
    ;
    
#line 1484 
    __free_pages(page,tmp_1);
    
#line 1486 
    rx_ring->__anonCompField_ixgbe_ring_120.rx_stats.alloc_rx_page_failed += 1ULL;
    
#line 1487 
    __retres = (_Bool)0;
    
#line 1487 
    goto return_label;
  }
  else ;
  
#line 1490 
  bi->dma = dma;
  
#line 1491 
  bi->page = page;
  
#line 1492 
  bi->page_offset = 0U;
  
#line 1494 
  __retres = (_Bool)1;
  return_label: 
#line 1494 
                return __retres;
}


#line 1502  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
void ixgbe_alloc_rx_buffers(struct ixgbe_ring *rx_ring, u16 cleaned_count)
{
  union ixgbe_adv_rx_desc *rx_desc;
  struct ixgbe_rx_buffer *bi;
  int tmp_0;
  bool tmp;
  
#line 1506 
  u16 i = rx_ring->next_to_use;
  
#line 1509 
  if ((unsigned int)cleaned_count == 0U) 
#line 1510 
                                         goto return_label; else ;
  
#line 1512 
  rx_desc = (union ixgbe_adv_rx_desc *)rx_ring->desc + (int)i;
  
#line 1513 
  bi = rx_ring->__anonCompField_ixgbe_ring_117.rx_buffer_info + (int)i;
  
#line 1514 
  i = (unsigned short)((int)i - (int)rx_ring->count);
  ldv_57834: 
#line 1515 
  ;
  
#line 1517 
  tmp = ixgbe_alloc_mapped_page(rx_ring,bi);
  
#line 1517 
  if (tmp) 
#line 1517 
           tmp_0 = 0; else 
#line 1517 
                           tmp_0 = 1;
  
#line 1517 
  if (tmp_0) 
#line 1518 
             goto ldv_57833; else ;
  
#line 1524 
  rx_desc->read.pkt_addr = bi->dma + (unsigned long long)bi->page_offset;
  
#line 1526 
  rx_desc += 1;
  
#line 1527 
  bi += 1;
  
#line 1528 
  i = (u16)((int)i + 1);
  
#line 1529 
  if ((long)((unsigned int)i == 0U) != 0L) {
    
#line 1530 
    rx_desc = (union ixgbe_adv_rx_desc *)rx_ring->desc;
    
#line 1531 
    bi = rx_ring->__anonCompField_ixgbe_ring_117.rx_buffer_info;
    
#line 1532 
    i = (unsigned short)((int)i - (int)rx_ring->count);
  }
  else ;
  
#line 1536 
  rx_desc->wb.upper.status_error = 0U;
  
#line 1538 
  cleaned_count = (u16)((int)cleaned_count - 1);
  
#line 1539 
  if ((unsigned int)cleaned_count != 0U) 
#line 1541 
                                         goto ldv_57834; else 
#line 1544 
                                                              goto ldv_57833;
  ldv_57833: 
#line 1545 
  ;
  
#line 1541 
  i = (unsigned short)((int)rx_ring->count + (int)i);
  
#line 1543 
  if ((int)rx_ring->next_to_use != (int)i) {
    
#line 1544 
    rx_ring->next_to_use = i;
    
#line 1547 
    rx_ring->__anonCompField_ixgbe_ring_119.next_to_alloc = i;
    
#line 1548 
    ldv_inline_asm();
    
#line 1555 
    writel((unsigned int)i,(void volatile *)rx_ring->tail);
  }
  else ;
  return_label: 
#line 1557 
                return;
}


#line 1559  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_set_rsc_gso_size(struct ixgbe_ring *ring, struct sk_buff *skb)
{
  unsigned int tmp;
  unsigned char *tmp_0;
  unsigned char *tmp_1;
  
#line 1562 
  tmp = skb_headlen((struct sk_buff const *)skb);
  
#line 1562 
  u16 hdr_len = (unsigned short)tmp;
  
#line 1565 
  tmp_0 = skb_end_pointer((struct sk_buff const *)skb);
  
#line 1565 
  ((struct skb_shared_info *)tmp_0)->gso_size = (unsigned short)((((skb->len - (unsigned int)hdr_len) + (unsigned int)((struct ixgbe_cb *)(& skb->cb))->append_cnt) + 4294967295U) / (unsigned int)((struct ixgbe_cb *)(& skb->cb))->append_cnt);
  
#line 1567 
  tmp_1 = skb_end_pointer((struct sk_buff const *)skb);
  
#line 1567 
  ((struct skb_shared_info *)tmp_1)->gso_type = (unsigned short)1U;
  
#line 1568 
  return;
}


#line 1570  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_update_rsc_stats(struct ixgbe_ring *rx_ring, struct sk_buff *skb)
{
  
#line 1574 
  if ((unsigned int)((struct ixgbe_cb *)(& skb->cb))->append_cnt == 0U) 
    
#line 1575 
    goto return_label; else ;
  
#line 1577 
  rx_ring->__anonCompField_ixgbe_ring_120.rx_stats.rsc_count += (unsigned long long)((struct ixgbe_cb *)(& skb->cb))->append_cnt;
  
#line 1578 
  rx_ring->__anonCompField_ixgbe_ring_120.rx_stats.rsc_flush += 1ULL;
  
#line 1580 
  ixgbe_set_rsc_gso_size(rx_ring,skb);
  
#line 1583 
  ((struct ixgbe_cb *)(& skb->cb))->append_cnt = (unsigned short)0U;
  return_label: 
#line 1584 
                return;
}


#line 1596  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_process_skb_fields(struct ixgbe_ring *rx_ring, union ixgbe_adv_rx_desc *rx_desc, struct sk_buff *skb)
{
  __le32 tmp;
  
#line 1600 
  struct net_device *dev = rx_ring->netdev;
  
#line 1602 
  ixgbe_update_rsc_stats(rx_ring,skb);
  
#line 1604 
  ixgbe_rx_hash(rx_ring,rx_desc,skb);
  
#line 1606 
  ixgbe_rx_checksum(rx_ring,rx_desc,skb);
  
#line 1608 
  tmp = ixgbe_test_staterr(rx_desc,65536U);
  
#line 1608 
  if ((long)(tmp != 0U) != 0L) 
#line 1609 
                               ixgbe_ptp_rx_hwtstamp((rx_ring->q_vector)->adapter,skb); else ;
  
#line 1611 
  if ((dev->features & 256ULL) != 0ULL) {
    __le32 tmp_0;
    
#line 1611 
    tmp_0 = ixgbe_test_staterr(rx_desc,8U);
    
#line 1611 
    if (tmp_0 != 0U) {
      
#line 1613 
      u16 vid = rx_desc->wb.upper.vlan;
      
#line 1614 
      __vlan_hwaccel_put_tag(skb,(unsigned short)129,(unsigned short)((int)vid));
    }
    else ;
  }
  else ;
  
#line 1617 
  skb_record_rx_queue(skb,(unsigned short)((int)rx_ring->queue_index));
  
#line 1619 
  skb->protocol = eth_type_trans(skb,dev);
  
#line 1620 
  return;
}


#line 1622  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_rx_skb(struct ixgbe_q_vector *q_vector, struct sk_buff *skb)
{
  bool tmp;
  
#line 1625 
  tmp = ixgbe_qv_busy_polling(q_vector);
  
#line 1625 
  if ((int)tmp != 0) 
#line 1626 
                     netif_receive_skb(skb); else 
#line 1628 
                                                  napi_gro_receive(& q_vector->napi,skb);
  
#line 1629 
  return;
}


#line 1642  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static bool ixgbe_is_non_eop(struct ixgbe_ring *rx_ring, union ixgbe_adv_rx_desc *rx_desc, struct sk_buff *skb)
{
  bool __retres;
  int tmp;
  __le32 tmp_0;
  
#line 1646 
  u32 ntc = (unsigned int)((int)rx_ring->next_to_clean + 1);
  
#line 1649 
  if ((unsigned int)rx_ring->count > ntc) 
#line 1649 
                                          ntc = ntc; else 
#line 1649 
                                                          ntc = 0U;
  
#line 1650 
  rx_ring->next_to_clean = (unsigned short)ntc;
  
#line 1652 
  __builtin_prefetch((void const *)rx_ring->desc + ntc);
  
#line 1655 
  tmp = constant_test_bit(4L,(unsigned long const volatile *)(& rx_ring->state));
  
#line 1655 
  if (tmp != 0) {
    
#line 1656 
    __le32 rsc_enabled = rx_desc->wb.lower.lo_dword.data & 1966080U;
    
#line 1659 
    if ((long)(rsc_enabled != 0U) != 0L) {
      
#line 1660 
      u32 rsc_cnt = rsc_enabled;
      
#line 1662 
      rsc_cnt >>= 17;
      
#line 1663 
      ((struct ixgbe_cb *)(& skb->cb))->append_cnt = (unsigned short)((unsigned int)((int)((struct ixgbe_cb *)(& skb->cb))->append_cnt + (int)((unsigned short)rsc_cnt)) + 65535U);
      
#line 1666 
      ntc = rx_desc->wb.upper.status_error;
      
#line 1667 
      ntc &= 1048560U;
      
#line 1668 
      ntc >>= 4;
    }
    else ;
  }
  else ;
  
#line 1673 
  tmp_0 = ixgbe_test_staterr(rx_desc,2U);
  
#line 1673 
  if ((long)(tmp_0 != 0U) != 0L) {
    
#line 1674 
    __retres = (_Bool)0;
    
#line 1674 
    goto return_label;
  }
  else ;
  
#line 1677 
  (rx_ring->__anonCompField_ixgbe_ring_117.rx_buffer_info + ntc)->skb = skb;
  
#line 1678 
  rx_ring->__anonCompField_ixgbe_ring_120.rx_stats.non_eop_descs += 1ULL;
  
#line 1680 
  __retres = (_Bool)1;
  return_label: 
#line 1680 
                return __retres;
}


#line 1695  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_pull_tail(struct ixgbe_ring *rx_ring, struct sk_buff *skb)
{
  unsigned char *tmp;
  unsigned char *va;
  unsigned int pull_len;
  
#line 1698 
  tmp = skb_end_pointer((struct sk_buff const *)skb);
  
#line 1698 
  struct skb_frag_struct *frag = & ((struct skb_shared_info *)tmp)->frags[0];
  
#line 1707 
  va = (unsigned char *)skb_frag_address((skb_frag_t const *)frag);
  
#line 1713 
  pull_len = eth_get_headlen((void *)va,256U);
  
#line 1716 
  skb_copy_to_linear_data(skb,(void const *)va,(pull_len + 7U) & 4294967288U);
  
#line 1719 
  skb_frag_size_sub(frag,(int)pull_len);
  
#line 1720 
  frag->page_offset += pull_len;
  
#line 1721 
  skb->data_len -= pull_len;
  
#line 1722 
  skb->tail += pull_len;
  
#line 1723 
  return;
}


#line 1735  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_dma_sync_frag(struct ixgbe_ring *rx_ring, struct sk_buff *skb)
{
  
#line 1739 
  if ((long)((int)((struct ixgbe_cb *)(& skb->cb))->page_released != 0) != 0L) {
    unsigned int tmp;
    
#line 1741 
    tmp = ixgbe_rx_pg_order(rx_ring);
    
#line 1740 
    ;
    
#line 1740 
    ;
    
#line 1740 
    dma_unmap_page(rx_ring->dev,((struct ixgbe_cb *)(& skb->cb))->dma,4096UL << tmp,(enum dma_data_direction)DMA_FROM_DEVICE);
    
#line 1742 
    ((struct ixgbe_cb *)(& skb->cb))->page_released = (_Bool)0;
  }
  else {
    unsigned char *tmp_0;
    unsigned int tmp_1;
    
#line 1744 
    tmp_0 = skb_end_pointer((struct sk_buff const *)skb);
    
#line 1744 
    struct skb_frag_struct *frag = & ((struct skb_shared_info *)tmp_0)->frags[0];
    
#line 1749 
    tmp_1 = ixgbe_rx_bufsz(rx_ring);
    
#line 1746 
    ;
    
#line 1746 
    ;
    
#line 1746 
    ;
    
#line 1746 
    dma_sync_single_range_for_cpu(rx_ring->dev,((struct ixgbe_cb *)(& skb->cb))->dma,(unsigned long)frag->page_offset,(unsigned long)tmp_1,(enum dma_data_direction)DMA_FROM_DEVICE);
  }
  
#line 1752 
  ((struct ixgbe_cb *)(& skb->cb))->dma = 0ULL;
  
#line 1753 
  return;
}


#line 1773  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static bool ixgbe_cleanup_headers(struct ixgbe_ring *rx_ring, union ixgbe_adv_rx_desc *rx_desc, struct sk_buff *skb)
{
  bool __retres;
  __le32 tmp;
  bool tmp_0;
  bool tmp_1;
  int tmp_2;
  
#line 1777 
  struct net_device *netdev = rx_ring->netdev;
  
#line 1780 
  tmp = ixgbe_test_staterr(rx_desc,989855744U);
  
#line 1780 
  if ((long)(tmp != 0U) != 0L) {
    
#line 1780 
    if ((long)((netdev->features & 274877906944ULL) == 0ULL) != 0L) {
      
#line 1783 
      dev_kfree_skb_any(skb);
      
#line 1784 
      __retres = (_Bool)1;
      
#line 1784 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 1788 
  tmp_0 = skb_is_nonlinear((struct sk_buff const *)skb);
  
#line 1788 
  if ((int)tmp_0 != 0) 
#line 1789 
                       ixgbe_pull_tail(rx_ring,skb); else ;
  
#line 1793 
  tmp_1 = ixgbe_rx_is_fcoe(rx_ring,rx_desc);
  
#line 1793 
  if ((int)tmp_1 != 0) {
    
#line 1794 
    __retres = (_Bool)0;
    
#line 1794 
    goto return_label;
  }
  else ;
  
#line 1798 
  tmp_2 = eth_skb_pad(skb);
  
#line 1798 
  if (tmp_2 != 0) {
    
#line 1799 
    __retres = (_Bool)1;
    
#line 1799 
    goto return_label;
  }
  else ;
  
#line 1801 
  __retres = (_Bool)0;
  return_label: 
#line 1801 
                return __retres;
}


#line 1811  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_reuse_rx_page(struct ixgbe_ring *rx_ring, struct ixgbe_rx_buffer *old_buff)
{
  struct ixgbe_rx_buffer *new_buff;
  unsigned int tmp;
  
#line 1815 
  u16 nta = rx_ring->__anonCompField_ixgbe_ring_119.next_to_alloc;
  
#line 1817 
  new_buff = rx_ring->__anonCompField_ixgbe_ring_117.rx_buffer_info + (int)nta;
  
#line 1820 
  nta = (u16)((int)nta + 1);
  
#line 1821 
  if ((int)rx_ring->count > (int)nta) 
#line 1821 
                                      rx_ring->__anonCompField_ixgbe_ring_119.next_to_alloc = nta; else 
                                                                    
#line 1821 
                                                                    rx_ring->__anonCompField_ixgbe_ring_119.next_to_alloc = (unsigned short)0U;
  
#line 1824 
  *new_buff = *old_buff;
  
#line 1829 
  tmp = ixgbe_rx_bufsz(rx_ring);
  
#line 1827 
  ;
  
#line 1827 
  ;
  
#line 1827 
  ;
  
#line 1827 
  dma_sync_single_range_for_device(rx_ring->dev,new_buff->dma,(unsigned long)new_buff->page_offset,(unsigned long)tmp,(enum dma_data_direction)DMA_FROM_DEVICE);
  
#line 1830 
  return;
}


#line 1833  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
__inline static bool ixgbe_page_is_reserved(struct page *page)
{
  bool __retres;
  int tmp_2;
  int tmp;
  int tmp_0;
  
#line 1835 
  tmp = page_to_nid((struct page const *)page);
  
#line 1835 
  tmp_0 = numa_mem_id();
  
#line 1835 
  if (tmp != tmp_0) 
#line 1835 
                    tmp_2 = 1;
  else {
    bool tmp_1;
    
#line 1835 
    tmp_1 = page_is_pfmemalloc(page);
    
#line 1835 
    if ((int)tmp_1 != 0) 
#line 1835 
                         tmp_2 = 1; else 
#line 1835 
                                         tmp_2 = 0;
  }
  
#line 1835 
  __retres = (_Bool)(tmp_2 != 0);
  
#line 1835 
  return __retres;
}


#line 1853  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static bool ixgbe_add_rx_frag(struct ixgbe_ring *rx_ring, struct ixgbe_rx_buffer *rx_buffer, union ixgbe_adv_rx_desc *rx_desc, struct sk_buff *skb)
{
  bool __retres;
  unsigned char *tmp_7;
  bool tmp_8;
  int tmp_9;
  
#line 1858 
  struct page *page = rx_buffer->page;
  
#line 1859 
  unsigned int size = (unsigned int)rx_desc->wb.upper.length;
  
#line 1861 
  unsigned int truesize = ixgbe_rx_bufsz(rx_ring);
  
#line 1868 
  if (size <= 256U) {
    int tmp_6;
    bool tmp_5;
    
#line 1868 
    tmp_5 = skb_is_nonlinear((struct sk_buff const *)skb);
    
#line 1868 
    if (tmp_5) 
#line 1868 
               tmp_6 = 0; else 
#line 1868 
                               tmp_6 = 1;
    
#line 1868 
    if (tmp_6) {
      void *tmp_0;
      unsigned char *tmp_1;
      int tmp_3;
      bool tmp_2;
      unsigned int tmp_4;
      
#line 1869 
      tmp_0 = lowmem_page_address((struct page const *)page);
      
#line 1869 
      unsigned char *va = (unsigned char *)(tmp_0 + rx_buffer->page_offset);
      
#line 1871 
      ;
      
#line 1871 
      ;
      
#line 1871 
      tmp_1 = __skb_put(skb,size);
      
#line 1871 
      memcpy((void *)tmp_1,(void const *)va,(unsigned long)(size + 7U) & 4294967288UL);
      
#line 1874 
      tmp_2 = ixgbe_page_is_reserved(page);
      
#line 1874 
      if (tmp_2) 
#line 1874 
                 tmp_3 = 0; else 
#line 1874 
                                 tmp_3 = 1;
      
#line 1874 
      if ((long)tmp_3 != 0L) {
        
#line 1875 
        __retres = (_Bool)1;
        
#line 1875 
        goto return_label;
      }
      else ;
      
#line 1878 
      tmp_4 = ixgbe_rx_pg_order(rx_ring);
      
#line 1878 
      ;
      
#line 1878 
      __free_pages(page,tmp_4);
      
#line 1879 
      __retres = (_Bool)0;
      
#line 1879 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 1882 
  ;
  
#line 1882 
  ;
  
#line 1882 
  ;
  
#line 1882 
  ;
  
#line 1882 
  tmp_7 = skb_end_pointer((struct sk_buff const *)skb);
  
#line 1882 
  ;
  
#line 1882 
  skb_add_rx_frag(skb,(int)((struct skb_shared_info *)tmp_7)->nr_frags,page,(int)rx_buffer->page_offset,(int)size,truesize);
  
#line 1886 
  tmp_8 = ixgbe_page_is_reserved(page);
  
#line 1886 
  if ((long)((int)tmp_8 != 0) != 0L) {
    
#line 1887 
    __retres = (_Bool)0;
    
#line 1887 
    goto return_label;
  }
  else ;
  
#line 1891 
  tmp_9 = page_count(page);
  
#line 1891 
  if ((long)(tmp_9 != 1) != 0L) {
    
#line 1892 
    __retres = (_Bool)0;
    
#line 1892 
    goto return_label;
  }
  else ;
  
#line 1895 
  rx_buffer->page_offset ^= truesize;
  
#line 1907 
  atomic_inc(& page->__anonCompField_page_44.__anonCompField___anonstruct_160_43.__anonCompField___anonunion_162_42._count);
  
#line 1909 
  __retres = (_Bool)1;
  return_label: 
#line 1909 
                return __retres;
}


#line 1912  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static struct sk_buff *ixgbe_fetch_rx_buffer(struct ixgbe_ring *rx_ring, union ixgbe_adv_rx_desc *rx_desc)
{
  struct sk_buff *__retres;
  struct ixgbe_rx_buffer *rx_buffer;
  struct sk_buff *skb;
  struct page *page;
  bool tmp_4;
  
#line 1919 
  rx_buffer = rx_ring->__anonCompField_ixgbe_ring_117.rx_buffer_info + (int)rx_ring->next_to_clean;
  
#line 1920 
  page = rx_buffer->page;
  
#line 1921 
  prefetchw((void const *)page);
  
#line 1923 
  skb = rx_buffer->skb;
  
#line 1925 
  if ((long)(skb == (struct sk_buff *)0) != 0L) {
    void *tmp;
    __le32 tmp_0;
    
#line 1926 
    tmp = lowmem_page_address((struct page const *)page);
    
#line 1926 
    void *page_addr = tmp + rx_buffer->page_offset;
    
#line 1930 
    __builtin_prefetch((void const *)page_addr);
    
#line 1932 
    __builtin_prefetch((void const *)(page_addr + 64U));
    
#line 1936 
    skb = napi_alloc_skb(& (rx_ring->q_vector)->napi,256U);
    
#line 1938 
    if ((long)(skb == (struct sk_buff *)0) != 0L) {
      
#line 1939 
      rx_ring->__anonCompField_ixgbe_ring_120.rx_stats.alloc_rx_buff_failed += 1ULL;
      
#line 1940 
      __retres = (struct sk_buff *)0;
      
#line 1940 
      goto return_label;
    }
    else ;
    
#line 1948 
    prefetchw((void const *)skb->data);
    
#line 1956 
    tmp_0 = ixgbe_test_staterr(rx_desc,2U);
    
#line 1956 
    if ((long)(tmp_0 != 0U) != 0L) 
#line 1957 
                                   goto dma_sync; else ;
    
#line 1959 
    ((struct ixgbe_cb *)(& skb->cb))->dma = rx_buffer->dma;
  }
  else {
    __le32 tmp_1;
    unsigned int tmp_2;
    
#line 1961 
    tmp_1 = ixgbe_test_staterr(rx_desc,2U);
    
#line 1961 
    if (tmp_1 != 0U) 
#line 1962 
                     ixgbe_dma_sync_frag(rx_ring,skb); else ;
    dma_sync: 
#line 1964 
    ;
    
#line 1969 
    tmp_2 = ixgbe_rx_bufsz(rx_ring);
    
#line 1966 
    ;
    
#line 1966 
    ;
    
#line 1966 
    ;
    
#line 1966 
    dma_sync_single_range_for_cpu(rx_ring->dev,rx_buffer->dma,(unsigned long)rx_buffer->page_offset,(unsigned long)tmp_2,(enum dma_data_direction)DMA_FROM_DEVICE);
    
#line 1972 
    rx_buffer->skb = (struct sk_buff *)0;
  }
  
#line 1976 
  tmp_4 = ixgbe_add_rx_frag(rx_ring,rx_buffer,rx_desc,skb);
  
#line 1976 
  if ((int)tmp_4 != 0) 
#line 1978 
                       ixgbe_reuse_rx_page(rx_ring,rx_buffer);
  else 
    
#line 1979 
    if (((struct ixgbe_cb *)(& skb->cb))->dma == rx_buffer->dma) 
#line 1981 
                                                                 ((struct ixgbe_cb *)(& skb->cb))->page_released = (_Bool)1;
    else {
      unsigned int tmp_3;
      
#line 1985 
      tmp_3 = ixgbe_rx_pg_order(rx_ring);
      
#line 1984 
      ;
      
#line 1984 
      ;
      
#line 1984 
      dma_unmap_page(rx_ring->dev,rx_buffer->dma,4096UL << tmp_3,(enum dma_data_direction)DMA_FROM_DEVICE);
    }
  
#line 1990 
  rx_buffer->page = (struct page *)0;
  
#line 1992 
  __retres = skb;
  return_label: 
#line 1992 
                return __retres;
}


#line 2008  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static int ixgbe_clean_rx_irq(struct ixgbe_q_vector *q_vector, struct ixgbe_ring *rx_ring, int const budget)
{
  int __retres;
  int ddp_bytes;
  
#line 2012 
  unsigned int total_rx_bytes = 0U;
  
#line 2012 
  unsigned int total_rx_packets = 0U;
  
#line 2014 
  struct ixgbe_adapter *adapter = q_vector->adapter;
  
#line 2016 
  unsigned int mss = 0U;
  
#line 2018 
  u16 cleaned_count = ixgbe_desc_unused(rx_ring);
  
#line 2020 
  goto ldv_57923;
  ldv_57924: 
#line 2021 
  ;
  {
    union ixgbe_adv_rx_desc *rx_desc;
    struct sk_buff *skb;
    bool tmp_0;
    bool tmp_1;
    bool tmp_2;
    
#line 2025 
    if ((unsigned int)cleaned_count > 15U) {
      
#line 2026 
      ixgbe_alloc_rx_buffers(rx_ring,(unsigned short)((int)cleaned_count));
      
#line 2027 
      cleaned_count = (unsigned short)0U;
    }
    else ;
    
#line 2030 
    rx_desc = (union ixgbe_adv_rx_desc *)rx_ring->desc + (int)rx_ring->next_to_clean;
    
#line 2032 
    if (rx_desc->wb.upper.status_error == 0U) 
#line 2033 
                                              goto ldv_57922; else ;
    
#line 2034 
    ldv_inline_asm();
    
#line 2042 
    skb = ixgbe_fetch_rx_buffer(rx_ring,rx_desc);
    
#line 2045 
    if (skb == (struct sk_buff *)0) 
#line 2046 
                                    goto ldv_57922; else ;
    
#line 2048 
    cleaned_count = (u16)((int)cleaned_count + 1);
    
#line 2051 
    tmp_0 = ixgbe_is_non_eop(rx_ring,rx_desc,skb);
    
#line 2051 
    if ((int)tmp_0 != 0) 
#line 2052 
                         goto ldv_57923; else ;
    
#line 2055 
    tmp_1 = ixgbe_cleanup_headers(rx_ring,rx_desc,skb);
    
#line 2055 
    if ((int)tmp_1 != 0) 
#line 2056 
                         goto ldv_57923; else ;
    
#line 2059 
    total_rx_bytes = skb->len + total_rx_bytes;
    
#line 2062 
    ixgbe_process_skb_fields(rx_ring,rx_desc,skb);
    
#line 2066 
    tmp_2 = ixgbe_rx_is_fcoe(rx_ring,rx_desc);
    
#line 2066 
    if ((int)tmp_2 != 0) {
      
#line 2067 
      ddp_bytes = ixgbe_fcoe_ddp(adapter,rx_desc,skb);
      
#line 2069 
      if (ddp_bytes > 0) {
        
#line 2070 
        if (mss == 0U) {
          
#line 2071 
          mss = (rx_ring->netdev)->mtu + 4294967250U;
          
#line 2075 
          if (mss > 512U) 
#line 2076 
                          mss &= 4294966784U; else ;
        }
        else ;
        
#line 2078 
        total_rx_bytes += (unsigned int)ddp_bytes;
        
#line 2079 
        total_rx_packets = (((unsigned int)ddp_bytes + mss) + 4294967295U) / mss + total_rx_packets;
      }
      else ;
      
#line 2082 
      if (ddp_bytes == 0) {
        
#line 2083 
        dev_kfree_skb_any(skb);
        
#line 2084 
        goto ldv_57923;
      }
      else ;
    }
    else ;
    
#line 2089 
    skb_mark_napi_id(skb,& q_vector->napi);
    
#line 2090 
    ixgbe_rx_skb(q_vector,skb);
    
#line 2093 
    total_rx_packets += 1U;
  }
  ldv_57923: 
#line 2095 
  ;
  
#line 2020 
  if ((long)(total_rx_packets < (unsigned int)budget) != 0L) 
#line 2022 
                                                             goto ldv_57924; else 
                                                                    
#line 2025 
                                                                    goto ldv_57922;
  ldv_57922: 
#line 2026 
  ;
  
#line 2096 
  u64_stats_init(& rx_ring->syncp);
  
#line 2097 
  rx_ring->stats.packets += (unsigned long long)total_rx_packets;
  
#line 2098 
  rx_ring->stats.bytes += (unsigned long long)total_rx_bytes;
  
#line 2099 
  u64_stats_init(& rx_ring->syncp);
  
#line 2100 
  q_vector->rx.total_packets += total_rx_packets;
  
#line 2101 
  q_vector->rx.total_bytes += total_rx_bytes;
  
#line 2103 
  __retres = (int)total_rx_packets;
  
#line 2103 
  return __retres;
}


#line 2108  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static int ixgbe_low_latency_recv(struct napi_struct *napi)
{
  int __retres;
  struct ixgbe_q_vector *tmp;
  struct ixgbe_ring *ring;
  int tmp_0;
  int tmp_2;
  bool tmp_1;
  {
    
#line 2111 
    struct napi_struct const *__mptr = (struct napi_struct const *)napi;
    
#line 2111 
    tmp = (struct ixgbe_q_vector *)__mptr + 18446744073709551552U;
  }
  
#line 2110 
  struct ixgbe_q_vector *q_vector = tmp;
  
#line 2112 
  struct ixgbe_adapter *adapter = q_vector->adapter;
  
#line 2114 
  int found = 0;
  
#line 2116 
  tmp_0 = constant_test_bit(2L,(unsigned long const volatile *)(& adapter->state));
  
#line 2116 
  if (tmp_0 != 0) {
    
#line 2117 
    __retres = -1;
    
#line 2117 
    goto return_label;
  }
  else ;
  
#line 2119 
  tmp_1 = ixgbe_qv_lock_poll(q_vector);
  
#line 2119 
  if (tmp_1) 
#line 2119 
             tmp_2 = 0; else 
#line 2119 
                             tmp_2 = 1;
  
#line 2119 
  if (tmp_2) {
    
#line 2120 
    __retres = -2;
    
#line 2120 
    goto return_label;
  }
  else ;
  
#line 2122 
  ring = q_vector->rx.ring;
  
#line 2122 
  goto ldv_57936;
  ldv_57935: 
#line 2123 
  ;
  
#line 2123 
  found = ixgbe_clean_rx_irq(q_vector,ring,4);
  
#line 2125 
  if (found != 0) 
#line 2126 
                  ring->stats.cleaned += (unsigned long long)found; else 
                                                                    
#line 2128 
                                                                    ring->stats.misses += 1ULL;
  
#line 2130 
  if (found != 0) 
#line 2131 
                  goto ldv_57934; else ;
  
#line 2122 
  ring = ring->next;
  ldv_57936: 
#line 2123 
  ;
  
#line 2122 
  if (ring != (struct ixgbe_ring *)0) 
#line 2124 
                                      goto ldv_57935; else 
#line 2127 
                                                           goto ldv_57934;
  ldv_57934: 
#line 2128 
  ;
  
#line 2134 
  ixgbe_qv_unlock_poll(q_vector);
  
#line 2136 
  __retres = found;
  return_label: 
#line 2136 
                return __retres;
}


#line 2147  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_configure_msix(struct ixgbe_adapter *adapter)
{
  struct ixgbe_q_vector *q_vector;
  int v_idx;
  u32 mask;
  int tmp;
  
#line 2154 
  if (adapter->num_vfs > 32U) {
    
#line 2155 
    u32 eitrsel = (unsigned int)((1 << (adapter->num_vfs + 4294967264U)) + -1);
    
#line 2156 
    ixgbe_write_reg(& adapter->hw,2196U,eitrsel);
  }
  else ;
  
#line 2163 
  v_idx = 0;
  
#line 2163 
  goto ldv_57952;
  ldv_57951: 
#line 2164 
  ;
  {
    struct ixgbe_ring *ring;
    
#line 2165 
    q_vector = adapter->q_vector[v_idx];
    
#line 2167 
    ring = q_vector->rx.ring;
    
#line 2167 
    goto ldv_57946;
    ldv_57945: 
#line 2168 
    ;
    
#line 2168 
    ixgbe_set_ivar(adapter,(signed char)0,(unsigned char)((int)ring->reg_idx),(unsigned char)((int)((unsigned char)v_idx)));
    
#line 2167 
    ring = ring->next;
    ldv_57946: 
#line 2168 
    ;
    
#line 2167 
    if (ring != (struct ixgbe_ring *)0) 
#line 2169 
                                        goto ldv_57945; else 
#line 2172 
                                                             goto ldv_57947;
    ldv_57947: 
#line 2173 
    ;
    
#line 2170 
    ring = q_vector->tx.ring;
    
#line 2170 
    goto ldv_57949;
    ldv_57948: 
#line 2171 
    ;
    
#line 2171 
    ixgbe_set_ivar(adapter,(signed char)1,(unsigned char)((int)ring->reg_idx),(unsigned char)((int)((unsigned char)v_idx)));
    
#line 2170 
    ring = ring->next;
    ldv_57949: 
#line 2171 
    ;
    
#line 2170 
    if (ring != (struct ixgbe_ring *)0) 
#line 2172 
                                        goto ldv_57948; else 
#line 2175 
                                                             goto ldv_57950;
    ldv_57950: 
#line 2176 
    ;
    
#line 2173 
    ixgbe_write_eitr(q_vector);
  }
  
#line 2163 
  v_idx += 1;
  ldv_57952: 
#line 2164 
  ;
  
#line 2163 
  if (adapter->num_q_vectors > v_idx) 
#line 2165 
                                      goto ldv_57951; else 
#line 2168 
                                                           goto ldv_57953;
  ldv_57953: 
#line 2169 
  ;
  
#line 2176 
  switch ((unsigned int)adapter->hw.mac.type) {
    case (unsigned int)1: 
#line 2177 
    ;
    
#line 2178 
    ixgbe_set_ivar(adapter,(signed char)(-1),(unsigned char)97,(unsigned char)((int)((unsigned char)v_idx)));
    
#line 2180 
    goto ldv_57955;
    case (unsigned int)2: 
#line 2181 
    ;
    case (unsigned int)3: 
#line 2182 
    ;
    case (unsigned int)4: 
#line 2183 
    ;
    case (unsigned int)5: 
#line 2184 
    ;
    
#line 2185 
    ixgbe_set_ivar(adapter,(signed char)(-1),(unsigned char)1,(unsigned char)((int)((unsigned char)v_idx)));
    
#line 2186 
    goto ldv_57955;
    default: 
#line 2187 
    ;
    
#line 2188 
    goto ldv_57955;
  }
  ldv_57955: 
#line 2190 
  ;
  
#line 2190 
  if (v_idx <= 23) 
#line 2190 
                   tmp = (v_idx + 520) * 4; else 
#line 2190 
                                                 tmp = (v_idx + 18600) * 4;
  
#line 2190 
  ;
  
#line 2190 
  ixgbe_write_reg(& adapter->hw,(unsigned int)tmp,1950U);
  
#line 2193 
  mask = 3222339583U;
  
#line 2194 
  mask &= 2145910783U;
  
#line 2198 
  ixgbe_write_reg(& adapter->hw,2064U,mask);
  
#line 2199 
  return;
}


#line 2223  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_update_itr(struct ixgbe_q_vector *q_vector, struct ixgbe_ring_container *ring_container)
{
  u32 timepassed_us;
  u64 bytes_perint;
  
#line 2226 
  int bytes = (int)ring_container->total_bytes;
  
#line 2227 
  int packets = (int)ring_container->total_packets;
  
#line 2230 
  u8 itr_setting = ring_container->itr;
  
#line 2232 
  if (packets == 0) 
#line 2233 
                    goto return_label; else ;
  
#line 2241 
  timepassed_us = (unsigned int)((int)q_vector->itr >> 2);
  
#line 2242 
  if (timepassed_us == 0U) 
#line 2243 
                           goto return_label; else ;
  
#line 2245 
  bytes_perint = (unsigned long long)((unsigned int)bytes / timepassed_us);
  
#line 2247 
  switch ((int)itr_setting) {
    case 0: 
#line 2248 
    ;
    
#line 2249 
    if (bytes_perint > 10ULL) 
#line 2250 
                              itr_setting = (unsigned char)1U; else ;
    
#line 2251 
    goto ldv_57976;
    case 1: 
#line 2252 
    ;
    
#line 2253 
    if (bytes_perint > 20ULL) 
#line 2254 
                              itr_setting = (unsigned char)2U;
    else 
      
#line 2255 
      if (bytes_perint <= 10ULL) 
#line 2256 
                                 itr_setting = (unsigned char)0U; else ;
    
#line 2257 
    goto ldv_57976;
    case 2: 
#line 2258 
    ;
    
#line 2259 
    if (bytes_perint <= 20ULL) 
#line 2260 
                               itr_setting = (unsigned char)1U; else ;
    
#line 2261 
    goto ldv_57976;
  }
  ldv_57976: 
#line 2265 
  ;
  
#line 2265 
  ring_container->total_bytes = 0U;
  
#line 2266 
  ring_container->total_packets = 0U;
  
#line 2269 
  ring_container->itr = itr_setting;
  return_label: 
#line 2270 
                return;
}


#line 2280  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
void ixgbe_write_eitr(struct ixgbe_q_vector *q_vector)
{
  int tmp;
  
#line 2282 
  struct ixgbe_adapter *adapter = q_vector->adapter;
  
#line 2283 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 2284 
  int v_idx = (int)q_vector->v_idx;
  
#line 2285 
  u32 itr_reg = (unsigned int)q_vector->itr & 4088U;
  
#line 2287 
  switch ((unsigned int)adapter->hw.mac.type) {
    case (unsigned int)1: 
#line 2288 
    ;
    
#line 2290 
    itr_reg = (itr_reg << 16) | itr_reg;
    
#line 2291 
    goto ldv_57987;
    case (unsigned int)2: 
#line 2292 
    ;
    case (unsigned int)3: 
#line 2293 
    ;
    case (unsigned int)4: 
#line 2294 
    ;
    case (unsigned int)5: 
#line 2295 
    ;
    
#line 2300 
    itr_reg |= 2147483648U;
    
#line 2301 
    goto ldv_57987;
    default: 
#line 2302 
    ;
    
#line 2303 
    goto ldv_57987;
  }
  ldv_57987: 
#line 2305 
  ;
  
#line 2305 
  ;
  
#line 2305 
  if (v_idx <= 23) 
#line 2305 
                   tmp = (v_idx + 520) * 4; else 
#line 2305 
                                                 tmp = (v_idx + 18600) * 4;
  
#line 2305 
  ;
  
#line 2305 
  ixgbe_write_reg(hw,(unsigned int)tmp,itr_reg);
  
#line 2306 
  return;
}


#line 2308  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_set_itr(struct ixgbe_q_vector *q_vector)
{
  u8 current_itr;
  int tmp_0;
  
#line 2310 
  u32 new_itr = (unsigned int)q_vector->itr;
  
#line 2313 
  ixgbe_update_itr(q_vector,& q_vector->tx);
  
#line 2314 
  ixgbe_update_itr(q_vector,& q_vector->rx);
  {
    int tmp;
    
#line 2316 
    u8 _max1 = q_vector->rx.itr;
    
#line 2316 
    u8 _max2 = q_vector->tx.itr;
    
#line 2316 
    if ((int)_max1 > (int)_max2) 
#line 2316 
                                 tmp = (int)_max1; else 
#line 2316 
                                                        tmp = (int)_max2;
    
#line 2316 
    tmp_0 = tmp;
  }
  
#line 2316 
  current_itr = (unsigned char)tmp_0;
  
#line 2318 
  switch ((int)current_itr) {
    case 0: 
#line 2320 
    ;
    
#line 2321 
    new_itr = 40U;
    
#line 2322 
    goto ldv_58002;
    case 1: 
#line 2323 
    ;
    
#line 2324 
    new_itr = 200U;
    
#line 2325 
    goto ldv_58002;
    case 2: 
#line 2326 
    ;
    
#line 2327 
    new_itr = 500U;
    
#line 2328 
    goto ldv_58002;
    default: 
#line 2329 
    ;
    
#line 2330 
    goto ldv_58002;
  }
  ldv_58002: 
#line 2333 
  ;
  
#line 2333 
  if ((unsigned int)q_vector->itr != new_itr) {
    
#line 2335 
    new_itr = (((unsigned int)q_vector->itr * new_itr) * 10U) / (new_itr * 9U + (unsigned int)q_vector->itr);
    
#line 2339 
    q_vector->itr = (unsigned short)new_itr;
    
#line 2341 
    ixgbe_write_eitr(q_vector);
  }
  else ;
  
#line 2343 
  return;
}


#line 2349  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_check_overtemp_subtask(struct ixgbe_adapter *adapter)
{
  int tmp;
  
#line 2351 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 2352 
  u32 eicr = adapter->interrupt_event;
  
#line 2354 
  tmp = constant_test_bit(2L,(unsigned long const volatile *)(& adapter->state));
  
#line 2354 
  if (tmp != 0) 
#line 2355 
                goto return_label; else ;
  
#line 2357 
  if ((adapter->flags2 & 4U) == 0U && (adapter->flags2 & 8U) == 0U) 
#line 2359 
                                                                    goto return_label; else ;
  
#line 2361 
  adapter->flags2 &= 4294967287U;
  
#line 2363 
  switch ((int)hw->device_id) {
    s32 tmp_0;
    case 5404: 
#line 2364 
    ;
    
#line 2372 
    if ((eicr & 16777216U) == 0U && (eicr & 1048576U) == 0U) 
#line 2374 
                                                             goto return_label; else ;
    
#line 2376 
    if ((eicr & 1048576U) == 0U && hw->mac.ops.check_link != (s32 (*)(struct ixgbe_hw *, ixgbe_link_speed *, bool *, bool ))0) {
      u32 speed;
      
#line 2378 
      bool link_up = (_Bool)0;
      
#line 2380 
      (*(hw->mac.ops.check_link))(hw,& speed,& link_up,(_Bool)0);
      
#line 2382 
      if ((int)link_up != 0) 
#line 2383 
                             goto return_label; else ;
    }
    else ;
    
#line 2387 
    tmp_0 = (*(hw->phy.ops.check_overtemp))(hw);
    
#line 2387 
    if (tmp_0 != -26) 
#line 2388 
                      goto return_label; else ;
    
#line 2390 
    goto ldv_58014;
    default: 
#line 2391 
    ;
    
#line 2392 
    if (adapter->hw.mac.type > (unsigned int)ixgbe_mac_82599EB) 
#line 2393 
                                                                goto return_label; else ;
    
#line 2394 
    if ((*(hw->mvals + 11U) & eicr) == 0U) 
#line 2395 
                                           goto return_label; else ;
    
#line 2396 
    goto ldv_58014;
  }
  ldv_58014: 
#line 2398 
  ;
  
#line 2398 
  if (((int)adapter->msg_enable & 1) != 0) 
#line 2398 
                                           netdev_crit((struct net_device const *)adapter->netdev,"%s\n",(char const *)(& ixgbe_overheat_msg)); else ;
  
#line 2400 
  adapter->interrupt_event = 0U;
  return_label: 
#line 2401 
                return;
}


#line 2403  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_check_fan_failure(struct ixgbe_adapter *adapter, u32 eicr)
{
  
#line 2405 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 2407 
  if ((adapter->flags & 32768U) != 0U && (*(hw->mvals + 12U) & eicr) != 0U) {
    
#line 2409 
    if (((int)adapter->msg_enable & 2) != 0) 
#line 2409 
                                             netdev_crit((struct net_device const *)adapter->netdev,"Fan has stopped, replace the adapter\n"); else ;
    
#line 2411 
    ixgbe_write_reg(hw,2048U,*(hw->mvals + 12U));
  }
  else ;
  
#line 2413 
  return;
}


#line 2415  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_check_overtemp_event(struct ixgbe_adapter *adapter, u32 eicr)
{
  
#line 2417 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 2419 
  if ((adapter->flags2 & 4U) == 0U) 
#line 2420 
                                    goto return_label; else ;
  
#line 2422 
  switch ((unsigned int)adapter->hw.mac.type) {
    case (unsigned int)2: 
#line 2423 
    ;
    
#line 2428 
    if ((*(hw->mvals + 11U) & eicr) != 0U || (eicr & 1048576U) != 0U) {
      int tmp;
      
#line 2429 
      tmp = constant_test_bit(2L,(unsigned long const volatile *)(& adapter->state));
      
#line 2429 
      if (tmp == 0) {
        
#line 2431 
        adapter->interrupt_event = eicr;
        
#line 2432 
        adapter->flags2 |= 8U;
        
#line 2433 
        ixgbe_service_event_schedule(adapter);
        
#line 2434 
        goto return_label;
      }
      else ;
    }
    else ;
    
#line 2436 
    goto return_label;
    case (unsigned int)3: 
#line 2437 
    ;
    
#line 2438 
    if ((eicr & 8388608U) == 0U) 
#line 2439 
                                 goto return_label; else ;
    
#line 2440 
    goto ldv_58028;
    default: 
#line 2441 
    ;
    
#line 2442 
    goto return_label;
  }
  ldv_58028: 
#line 2445 
  ;
  
#line 2445 
  if (((int)adapter->msg_enable & 1) != 0) 
#line 2445 
                                           netdev_crit((struct net_device const *)adapter->netdev,"%s\n",(char const *)(& ixgbe_overheat_msg)); else ;
  return_label: 
#line 2446 
                return;
}


#line 2448  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
__inline static bool ixgbe_is_sfp(struct ixgbe_hw *hw)
{
  bool __retres;
  
#line 2450 
  switch ((unsigned int)hw->mac.type) {
    enum ixgbe_media_type tmp;
    case (unsigned int)1: 
#line 2451 
    ;
    
#line 2452 
    if (hw->phy.type == (unsigned int)ixgbe_phy_nl) {
      
#line 2453 
      __retres = (_Bool)1;
      
#line 2453 
      goto return_label;
    }
    else ;
    
#line 2454 
    __retres = (_Bool)0;
    
#line 2454 
    goto return_label;
    case (unsigned int)2: 
#line 2455 
    ;
    case (unsigned int)5: 
#line 2456 
    ;
    
#line 2457 
    tmp = (*(hw->mac.ops.get_media_type))(hw);
    
#line 2457 
    switch ((unsigned int)tmp) {
      case (unsigned int)1: 
#line 2458 
      ;
      case (unsigned int)2: 
#line 2459 
      ;
      
#line 2460 
      __retres = (_Bool)1;
      
#line 2460 
      goto return_label;
      default: 
#line 2461 
      ;
      
#line 2462 
      __retres = (_Bool)0;
      
#line 2462 
      goto return_label;
    }
    default: 
#line 2464 
    ;
    
#line 2465 
    __retres = (_Bool)0;
    
#line 2465 
    goto return_label;
  }
  return_label: 
#line 2450 
                return __retres;
}


#line 2469  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_check_sfp_event(struct ixgbe_adapter *adapter, u32 eicr)
{
  
#line 2471 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 2473 
  if ((*(hw->mvals + 13U) & eicr) != 0U) {
    int tmp;
    
#line 2475 
    ixgbe_write_reg(hw,2048U,*(hw->mvals + 13U));
    
#line 2476 
    tmp = constant_test_bit(2L,(unsigned long const volatile *)(& adapter->state));
    
#line 2476 
    if (tmp == 0) {
      
#line 2477 
      adapter->flags2 |= 32U;
      
#line 2478 
      ixgbe_service_event_schedule(adapter);
    }
    else ;
  }
  else ;
  
#line 2482 
  if ((*(hw->mvals + 12U) & eicr) != 0U) {
    int tmp_0;
    
#line 2484 
    ixgbe_write_reg(hw,2048U,*(hw->mvals + 12U));
    
#line 2485 
    tmp_0 = constant_test_bit(2L,(unsigned long const volatile *)(& adapter->state));
    
#line 2485 
    if (tmp_0 == 0) {
      
#line 2486 
      adapter->flags |= 131072U;
      
#line 2487 
      ixgbe_service_event_schedule(adapter);
    }
    else ;
  }
  else ;
  
#line 2490 
  return;
}


#line 2492  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_check_lsc(struct ixgbe_adapter *adapter)
{
  int tmp;
  
#line 2494 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 2496 
  adapter->lsc_int += 1ULL;
  
#line 2497 
  adapter->flags |= 65536U;
  
#line 2498 
  adapter->link_check_timeout = jiffies;
  
#line 2499 
  tmp = constant_test_bit(2L,(unsigned long const volatile *)(& adapter->state));
  
#line 2499 
  if (tmp == 0) {
    
#line 2500 
    ixgbe_write_reg(hw,2184U,1048576U);
    
#line 2501 
    ixgbe_read_reg(hw,8U);
    
#line 2502 
    ixgbe_service_event_schedule(adapter);
  }
  else ;
  
#line 2504 
  return;
}


#line 2506  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
__inline static void ixgbe_irq_enable_queues(struct ixgbe_adapter *adapter, u64 qmask)
{
  u32 mask;
  
#line 2510 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 2512 
  switch ((unsigned int)hw->mac.type) {
    case (unsigned int)1: 
#line 2513 
    ;
    
#line 2514 
    mask = (unsigned int)qmask & 65535U;
    
#line 2515 
    ixgbe_write_reg(hw,2176U,mask);
    
#line 2516 
    goto ldv_58056;
    case (unsigned int)2: 
#line 2517 
    ;
    case (unsigned int)3: 
#line 2518 
    ;
    case (unsigned int)4: 
#line 2519 
    ;
    case (unsigned int)5: 
#line 2520 
    ;
    
#line 2521 
    mask = (unsigned int)qmask;
    
#line 2522 
    if (mask != 0U) 
#line 2523 
                    ixgbe_write_reg(hw,2720U,mask); else ;
    
#line 2524 
    mask = (unsigned int)(qmask >> 32);
    
#line 2525 
    if (mask != 0U) 
#line 2526 
                    ixgbe_write_reg(hw,2724U,mask); else ;
    
#line 2527 
    goto ldv_58056;
    default: 
#line 2528 
    ;
    
#line 2529 
    goto ldv_58056;
  }
  ldv_58056: 
#line 2532 
  ;
  
#line 2533 
  return;
}


#line 2534  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
__inline static void ixgbe_irq_disable_queues(struct ixgbe_adapter *adapter, u64 qmask)
{
  u32 mask;
  
#line 2538 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 2540 
  switch ((unsigned int)hw->mac.type) {
    case (unsigned int)1: 
#line 2541 
    ;
    
#line 2542 
    mask = (unsigned int)qmask & 65535U;
    
#line 2543 
    ixgbe_write_reg(hw,2184U,mask);
    
#line 2544 
    goto ldv_58069;
    case (unsigned int)2: 
#line 2545 
    ;
    case (unsigned int)3: 
#line 2546 
    ;
    case (unsigned int)4: 
#line 2547 
    ;
    case (unsigned int)5: 
#line 2548 
    ;
    
#line 2549 
    mask = (unsigned int)qmask;
    
#line 2550 
    if (mask != 0U) 
#line 2551 
                    ixgbe_write_reg(hw,2736U,mask); else ;
    
#line 2552 
    mask = (unsigned int)(qmask >> 32);
    
#line 2553 
    if (mask != 0U) 
#line 2554 
                    ixgbe_write_reg(hw,2740U,mask); else ;
    
#line 2555 
    goto ldv_58069;
    default: 
#line 2556 
    ;
    
#line 2557 
    goto ldv_58069;
  }
  ldv_58069: 
#line 2560 
  ;
  
#line 2561 
  return;
}


#line 2566  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
__inline static void ixgbe_irq_enable(struct ixgbe_adapter *adapter, bool queues, bool flush)
{
  
#line 2569 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 2570 
  u32 mask = 3222274048U;
  
#line 2573 
  if ((adapter->flags & 65536U) != 0U) 
#line 2574 
                                       mask &= 4293918719U; else ;
  
#line 2576 
  if ((adapter->flags2 & 4U) != 0U) {
    
#line 2577 
    switch ((unsigned int)adapter->hw.mac.type) {
      case (unsigned int)2: 
#line 2578 
      ;
      
#line 2579 
      mask = *(hw->mvals + 11U) | mask;
      
#line 2580 
      goto ldv_58083;
      case (unsigned int)3: 
#line 2581 
      ;
      case (unsigned int)4: 
#line 2582 
      ;
      case (unsigned int)5: 
#line 2583 
      ;
      
#line 2584 
      mask |= 8388608U;
      
#line 2585 
      goto ldv_58083;
      default: 
#line 2586 
      ;
      
#line 2587 
      goto ldv_58083;
    }
    ldv_58083: 
#line 2589 
    ;
  }
  else ;
  
#line 2589 
  if ((adapter->flags & 32768U) != 0U) 
#line 2590 
                                       mask = *(hw->mvals + 12U) | mask; else ;
  
#line 2591 
  switch ((unsigned int)adapter->hw.mac.type) {
    case (unsigned int)2: 
#line 2592 
    ;
    
#line 2593 
    mask = *(hw->mvals + 12U) | mask;
    
#line 2594 
    mask = *(hw->mvals + 13U) | mask;
    case (unsigned int)3: 
#line 2596 
    ;
    case (unsigned int)4: 
#line 2597 
    ;
    case (unsigned int)5: 
#line 2598 
    ;
    
#line 2599 
    if (adapter->hw.phy.type == (unsigned int)ixgbe_phy_x550em_ext_t) 
      
#line 2600 
      mask |= 33554432U; else ;
    
#line 2601 
    mask |= 268435456U;
    
#line 2602 
    mask |= 524288U;
    
#line 2603 
    goto ldv_58092;
    default: 
#line 2604 
    ;
    
#line 2605 
    goto ldv_58092;
  }
  ldv_58092: 
#line 2608 
  ;
  
#line 2608 
  if ((adapter->flags & 262144U) != 0U && (adapter->flags2 & 128U) == 0U) 
    
#line 2610 
    mask |= 65536U; else ;
  
#line 2612 
  ixgbe_write_reg(& adapter->hw,2176U,mask);
  
#line 2613 
  if ((int)queues != 0) 
#line 2614 
                        ixgbe_irq_enable_queues(adapter,18446744073709551615ULL); else ;
  
#line 2615 
  if ((int)flush != 0) 
#line 2616 
                       ixgbe_read_reg(& adapter->hw,8U); else ;
  
#line 2617 
  return;
}


#line 2619  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static irqreturn_t ixgbe_msix_other(int irq, void *data)
{
  irqreturn_t __retres;
  u32 eicr;
  int tmp_0;
  
#line 2621 
  struct ixgbe_adapter *adapter = (struct ixgbe_adapter *)data;
  
#line 2622 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 2631 
  eicr = ixgbe_read_reg(hw,2056U);
  
#line 2640 
  eicr &= 4294901760U;
  
#line 2642 
  ixgbe_write_reg(hw,2048U,eicr);
  
#line 2644 
  if ((eicr & 1048576U) != 0U) 
#line 2645 
                               ixgbe_check_lsc(adapter); else ;
  
#line 2647 
  if ((eicr & 524288U) != 0U) 
#line 2648 
                              ixgbe_msg_task(adapter); else ;
  
#line 2650 
  switch ((unsigned int)hw->mac.type) {
    case (unsigned int)2: 
#line 2651 
    ;
    case (unsigned int)3: 
#line 2652 
    ;
    case (unsigned int)4: 
#line 2653 
    ;
    case (unsigned int)5: 
#line 2654 
    ;
    
#line 2655 
    if (hw->phy.type == (unsigned int)ixgbe_phy_x550em_ext_t && (eicr & 33554432U) != 0U) {
      
#line 2657 
      adapter->flags2 |= 2048U;
      
#line 2658 
      ixgbe_service_event_schedule(adapter);
      
#line 2659 
      ixgbe_write_reg(hw,2048U,33554432U);
    }
    else ;
    
#line 2662 
    if ((eicr & 268435456U) != 0U) {
      
#line 2663 
      if (((int)adapter->msg_enable & 4) != 0) 
#line 2663 
                                               netdev_info((struct net_device const *)adapter->netdev,"Received ECC Err, initiating reset\n"); else ;
      
#line 2664 
      adapter->flags2 |= 64U;
      
#line 2665 
      ixgbe_service_event_schedule(adapter);
      
#line 2666 
      ixgbe_write_reg(hw,2048U,268435456U);
    }
    else ;
    
#line 2669 
    if ((eicr & 65536U) != 0U) {
      int i;
      
#line 2670 
      int reinit_count = 0;
      
#line 2672 
      i = 0;
      
#line 2672 
      goto ldv_58109;
      ldv_58108: 
#line 2673 
      ;
      {
        int tmp;
        
#line 2673 
        struct ixgbe_ring *ring = adapter->tx_ring[i];
        
#line 2674 
        tmp = test_and_set_bit(0L,(unsigned long volatile *)(& ring->state));
        
#line 2674 
        if (tmp != 0) 
#line 2676 
                      reinit_count += 1; else ;
      }
      
#line 2672 
      i += 1;
      ldv_58109: 
#line 2673 
      ;
      
#line 2672 
      if (adapter->num_tx_queues > i) 
#line 2674 
                                      goto ldv_58108; else 
#line 2677 
                                                           goto ldv_58110;
      ldv_58110: 
#line 2678 
      ;
      
#line 2678 
      if (reinit_count != 0) {
        
#line 2680 
        ixgbe_write_reg(hw,2184U,65536U);
        
#line 2681 
        adapter->flags2 |= 128U;
        
#line 2682 
        ixgbe_service_event_schedule(adapter);
      }
      else ;
    }
    else ;
    
#line 2685 
    ixgbe_check_sfp_event(adapter,eicr);
    
#line 2686 
    ixgbe_check_overtemp_event(adapter,eicr);
    
#line 2687 
    goto ldv_58111;
    default: 
#line 2688 
    ;
    
#line 2689 
    goto ldv_58111;
  }
  ldv_58111: 
#line 2692 
  ;
  
#line 2692 
  ixgbe_check_fan_failure(adapter,eicr);
  
#line 2694 
  if ((long)((eicr & 16777216U) != 0U) != 0L) 
#line 2695 
                                              ixgbe_ptp_check_pps_event(adapter,eicr); else ;
  
#line 2698 
  tmp_0 = constant_test_bit(2L,(unsigned long const volatile *)(& adapter->state));
  
#line 2698 
  if (tmp_0 == 0) 
#line 2699 
                  ixgbe_irq_enable(adapter,(_Bool)0,(_Bool)0); else ;
  
#line 2701 
  __retres = IRQ_HANDLED;
  
#line 2701 
  return __retres;
}


#line 2704  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static irqreturn_t ixgbe_msix_clean_rings(int irq, void *data)
{
  irqreturn_t __retres;
  
#line 2706 
  struct ixgbe_q_vector *q_vector = (struct ixgbe_q_vector *)data;
  
#line 2710 
  if (q_vector->rx.ring != (struct ixgbe_ring *)0 || q_vector->tx.ring != (struct ixgbe_ring *)0) 
    
#line 2711 
    napi_schedule(& q_vector->napi); else ;
  
#line 2713 
  __retres = IRQ_HANDLED;
  
#line 2713 
  return __retres;
}


#line 2723  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
int ixgbe_poll(struct napi_struct *napi, int budget)
{
  int __retres;
  struct ixgbe_q_vector *tmp;
  struct ixgbe_ring *ring;
  int per_ring_budget;
  bool tmp_0;
  int tmp_2;
  bool tmp_1;
  int tmp_5;
  int tmp_6;
  {
    
#line 2726 
    struct napi_struct const *__mptr = (struct napi_struct const *)napi;
    
#line 2726 
    tmp = (struct ixgbe_q_vector *)__mptr + 18446744073709551552U;
  }
  
#line 2725 
  struct ixgbe_q_vector *q_vector = tmp;
  
#line 2727 
  struct ixgbe_adapter *adapter = q_vector->adapter;
  
#line 2730 
  bool clean_complete = (_Bool)1;
  
#line 2733 
  if ((adapter->flags & 256U) != 0U) 
#line 2734 
                                     ixgbe_update_dca(q_vector); else ;
  
#line 2737 
  ring = q_vector->tx.ring;
  
#line 2737 
  goto ldv_58130;
  ldv_58129: 
#line 2738 
  ;
  
#line 2738 
  tmp_0 = ixgbe_clean_tx_irq(q_vector,ring);
  
#line 2738 
  clean_complete = (_Bool)(((int)clean_complete & ((int)tmp_0 != 0)) != 0);
  
#line 2737 
  ring = ring->next;
  ldv_58130: 
#line 2738 
  ;
  
#line 2737 
  if (ring != (struct ixgbe_ring *)0) 
#line 2739 
                                      goto ldv_58129; else 
#line 2742 
                                                           goto ldv_58131;
  ldv_58131: 
#line 2743 
  ;
  
#line 2740 
  tmp_1 = ixgbe_qv_lock_napi(q_vector);
  
#line 2740 
  if (tmp_1) 
#line 2740 
             tmp_2 = 0; else 
#line 2740 
                             tmp_2 = 1;
  
#line 2740 
  if (tmp_2) {
    
#line 2741 
    __retres = budget;
    
#line 2741 
    goto return_label;
  }
  else ;
  
#line 2745 
  if ((unsigned int)q_vector->rx.count > 1U) {
    int tmp_4;
    {
      int tmp_3;
      
#line 2746 
      int _max1 = budget / (int)q_vector->rx.count;
      
#line 2746 
      int _max2 = 1;
      
#line 2746 
      if (_max1 > _max2) 
#line 2746 
                         tmp_3 = _max1; else 
#line 2746 
                                             tmp_3 = _max2;
      
#line 2746 
      tmp_4 = tmp_3;
    }
    
#line 2746 
    per_ring_budget = tmp_4;
  }
  else 
#line 2748 
       per_ring_budget = budget;
  
#line 2750 
  ring = q_vector->rx.ring;
  
#line 2750 
  goto ldv_58136;
  ldv_58135: 
#line 2751 
  ;
  
#line 2751 
  tmp_5 = ixgbe_clean_rx_irq(q_vector,ring,per_ring_budget);
  
#line 2752 
  clean_complete = (_Bool)(((int)clean_complete & (tmp_5 < per_ring_budget)) != 0);
  
#line 2750 
  ring = ring->next;
  ldv_58136: 
#line 2751 
  ;
  
#line 2750 
  if (ring != (struct ixgbe_ring *)0) 
#line 2752 
                                      goto ldv_58135; else 
#line 2755 
                                                           goto ldv_58137;
  ldv_58137: 
#line 2756 
  ;
  
#line 2754 
  ixgbe_qv_unlock_napi(q_vector);
  
#line 2756 
  if (! clean_complete) {
    
#line 2757 
    __retres = budget;
    
#line 2757 
    goto return_label;
  }
  else ;
  
#line 2760 
  napi_complete(napi);
  
#line 2761 
  if (((int)adapter->rx_itr_setting & 1) != 0) 
#line 2762 
                                               ixgbe_set_itr(q_vector); else ;
  
#line 2763 
  tmp_6 = constant_test_bit(2L,(unsigned long const volatile *)(& adapter->state));
  
#line 2763 
  if (tmp_6 == 0) 
#line 2764 
                  ixgbe_irq_enable_queues(adapter,1ULL << (int)q_vector->v_idx); else ;
  
#line 2766 
  __retres = 0;
  return_label: 
#line 2766 
                return __retres;
}


#line 2776  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static int ixgbe_request_msix_irqs(struct ixgbe_adapter *adapter)
{
  int __retres;
  int vector;
  int err;
  
#line 2778 
  struct net_device *netdev = adapter->netdev;
  
#line 2780 
  int ri = 0;
  
#line 2780 
  int ti = 0;
  
#line 2782 
  vector = 0;
  
#line 2782 
  goto ldv_58151;
  ldv_58150: 
#line 2783 
  ;
  {
    
#line 2783 
    struct ixgbe_q_vector *q_vector = adapter->q_vector[vector];
    
#line 2784 
    struct msix_entry *entry = adapter->msix_entries + vector;
    
#line 2786 
    if (q_vector->tx.ring != (struct ixgbe_ring *)0 && q_vector->rx.ring != (struct ixgbe_ring *)0) {
      int tmp;
      
#line 2788 
      tmp = ri;
      
#line 2788 
      ri += 1;
      
#line 2787 
      ;
      
#line 2787 
      ;
      
#line 2787 
      ;
      
#line 2787 
      snprintf((char *)(& q_vector->name),24UL,"%s-%s-%d",(char *)(& netdev->name),(char *)"TxRx",tmp);
      
#line 2789 
      ti += 1;
    }
    else 
      
#line 2790 
      if (q_vector->rx.ring != (struct ixgbe_ring *)0) {
        int tmp_0;
        
#line 2792 
        tmp_0 = ri;
        
#line 2792 
        ri += 1;
        
#line 2791 
        ;
        
#line 2791 
        ;
        
#line 2791 
        ;
        
#line 2791 
        snprintf((char *)(& q_vector->name),24UL,"%s-%s-%d",(char *)(& netdev->name),(char *)"rx",tmp_0);
      }
      else 
        
#line 2793 
        if (q_vector->tx.ring != (struct ixgbe_ring *)0) {
          int tmp_1;
          
#line 2795 
          tmp_1 = ti;
          
#line 2795 
          ti += 1;
          
#line 2794 
          ;
          
#line 2794 
          ;
          
#line 2794 
          ;
          
#line 2794 
          snprintf((char *)(& q_vector->name),24UL,"%s-%s-%d",(char *)(& netdev->name),(char *)"tx",tmp_1);
        }
        else 
#line 2798 
             goto ldv_58148;
    
#line 2800 
    err = ldv_request_irq_74(entry->vector,& ixgbe_msix_clean_rings,0UL,(char const *)(& q_vector->name),(void *)q_vector);
    
#line 2802 
    if (err != 0) {
      
#line 2803 
      if (((int)adapter->msg_enable & 2) != 0) 
#line 2803 
                                               netdev_err((struct net_device const *)adapter->netdev,"request_irq failed for MSIX interrupt ",err); else ;
      
#line 2805 
      goto free_queue_irqs;
    }
    else ;
    
#line 2808 
    if ((adapter->flags & 262144U) != 0U) 
#line 2810 
                                          irq_set_affinity_hint(entry->vector,(struct cpumask const *)(& q_vector->affinity_mask)); else ;
  }
  ldv_58148: 
#line 2813 
  ;
  
#line 2782 
  vector += 1;
  ldv_58151: 
#line 2783 
  ;
  
#line 2782 
  if (adapter->num_q_vectors > vector) 
#line 2784 
                                       goto ldv_58150; else 
#line 2787 
                                                            goto ldv_58152;
  ldv_58152: 
#line 2788 
  ;
  
#line 2815 
  err = ldv_request_irq_75((adapter->msix_entries + vector)->vector,& ixgbe_msix_other,0UL,(char const *)(& netdev->name),(void *)adapter);
  
#line 2817 
  if (err != 0) {
    
#line 2818 
    if (((int)adapter->msg_enable & 2) != 0) 
#line 2818 
                                             netdev_err((struct net_device const *)adapter->netdev,"request_irq for msix_other failed: %d\n",err); else ;
    
#line 2819 
    goto free_queue_irqs;
  }
  else ;
  
#line 2822 
  __retres = 0;
  
#line 2822 
  goto return_label;
  free_queue_irqs: 
#line 2824 
  ;
  
#line 2825 
  goto ldv_58154;
  ldv_58153: 
#line 2826 
  ;
  
#line 2826 
  vector -= 1;
  
#line 2827 
  irq_set_affinity_hint((adapter->msix_entries + vector)->vector,(struct cpumask const *)0);
  
#line 2829 
  ldv_free_irq_76((adapter->msix_entries + vector)->vector,(void *)adapter->q_vector[vector]);
  ldv_58154: 
#line 2831 
  ;
  
#line 2825 
  if (vector != 0) 
#line 2827 
                   goto ldv_58153; else 
#line 2830 
                                        goto ldv_58155;
  ldv_58155: 
#line 2831 
  ;
  
#line 2832 
  adapter->flags &= 4294967287U;
  
#line 2833 
  pci_disable_msix(adapter->pdev);
  
#line 2834 
  kfree((void const *)adapter->msix_entries);
  
#line 2835 
  adapter->msix_entries = (struct msix_entry *)0;
  
#line 2836 
  __retres = err;
  return_label: 
#line 2836 
                return __retres;
}


#line 2844  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static irqreturn_t ixgbe_intr(int irq, void *data)
{
  irqreturn_t __retres;
  u32 eicr;
  int tmp_0;
  
#line 2846 
  struct ixgbe_adapter *adapter = (struct ixgbe_adapter *)data;
  
#line 2847 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 2848 
  struct ixgbe_q_vector *q_vector = adapter->q_vector[0];
  
#line 2855 
  ixgbe_write_reg(hw,2184U,4294967295U);
  
#line 2859 
  eicr = ixgbe_read_reg(hw,2048U);
  
#line 2860 
  if (eicr == 0U) {
    int tmp;
    
#line 2868 
    tmp = constant_test_bit(2L,(unsigned long const volatile *)(& adapter->state));
    
#line 2868 
    if (tmp == 0) 
#line 2869 
                  ixgbe_irq_enable(adapter,(_Bool)1,(_Bool)1); else ;
    
#line 2870 
    __retres = IRQ_NONE;
    
#line 2870 
    goto return_label;
  }
  else ;
  
#line 2873 
  if ((eicr & 1048576U) != 0U) 
#line 2874 
                               ixgbe_check_lsc(adapter); else ;
  
#line 2876 
  switch ((unsigned int)hw->mac.type) {
    case (unsigned int)2: 
#line 2877 
    ;
    
#line 2878 
    ixgbe_check_sfp_event(adapter,eicr);
    case (unsigned int)3: 
#line 2880 
    ;
    case (unsigned int)4: 
#line 2881 
    ;
    case (unsigned int)5: 
#line 2882 
    ;
    
#line 2883 
    if ((eicr & 268435456U) != 0U) {
      
#line 2884 
      if (((int)adapter->msg_enable & 4) != 0) 
#line 2884 
                                               netdev_info((struct net_device const *)adapter->netdev,"Received ECC Err, initiating reset\n"); else ;
      
#line 2885 
      adapter->flags2 |= 64U;
      
#line 2886 
      ixgbe_service_event_schedule(adapter);
      
#line 2887 
      ixgbe_write_reg(hw,2048U,268435456U);
    }
    else ;
    
#line 2889 
    ixgbe_check_overtemp_event(adapter,eicr);
    
#line 2890 
    goto ldv_58168;
    default: 
#line 2891 
    ;
    
#line 2892 
    goto ldv_58168;
  }
  ldv_58168: 
#line 2895 
  ;
  
#line 2895 
  ixgbe_check_fan_failure(adapter,eicr);
  
#line 2896 
  if ((long)((eicr & 16777216U) != 0U) != 0L) 
#line 2897 
                                              ixgbe_ptp_check_pps_event(adapter,eicr); else ;
  
#line 2900 
  napi_schedule(& q_vector->napi);
  
#line 2906 
  tmp_0 = constant_test_bit(2L,(unsigned long const volatile *)(& adapter->state));
  
#line 2906 
  if (tmp_0 == 0) 
#line 2907 
                  ixgbe_irq_enable(adapter,(_Bool)0,(_Bool)0); else ;
  
#line 2909 
  __retres = IRQ_HANDLED;
  return_label: 
#line 2909 
                return __retres;
}


#line 2919  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static int ixgbe_request_irq(struct ixgbe_adapter *adapter)
{
  int err;
  
#line 2921 
  struct net_device *netdev = adapter->netdev;
  
#line 2924 
  if ((adapter->flags & 8U) != 0U) 
#line 2925 
                                   err = ixgbe_request_msix_irqs(adapter);
  else 
    
#line 2926 
    if ((adapter->flags & 2U) != 0U) 
#line 2927 
                                     err = ldv_request_irq_77((adapter->pdev)->irq,& ixgbe_intr,0UL,(char const *)(& netdev->name),(void *)adapter); else 
                                                                    
#line 2930 
                                                                    err = ldv_request_irq_78((adapter->pdev)->irq,& ixgbe_intr,128UL,(char const *)(& netdev->name),(void *)adapter);
  
#line 2933 
  if (err != 0) {
    
#line 2934 
    if (((int)adapter->msg_enable & 2) != 0) 
#line 2934 
                                             netdev_err((struct net_device const *)adapter->netdev,"request_irq failed, Error %d\n",err); else ;
  }
  else ;
  
#line 2936 
  return err;
}


#line 2939  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_free_irq(struct ixgbe_adapter *adapter)
{
  int vector;
  int tmp;
  
#line 2943 
  if ((adapter->flags & 8U) == 0U) {
    
#line 2944 
    ldv_free_irq_79((adapter->pdev)->irq,(void *)adapter);
    
#line 2945 
    goto return_label;
  }
  else ;
  
#line 2948 
  vector = 0;
  
#line 2948 
  goto ldv_58183;
  ldv_58182: 
#line 2949 
  ;
  {
    
#line 2949 
    struct ixgbe_q_vector *q_vector = adapter->q_vector[vector];
    
#line 2950 
    struct msix_entry *entry = adapter->msix_entries + vector;
    
#line 2953 
    if (q_vector->rx.ring == (struct ixgbe_ring *)0 && q_vector->tx.ring == (struct ixgbe_ring *)0) 
      
#line 2954 
      goto ldv_58181; else ;
    
#line 2957 
    irq_set_affinity_hint(entry->vector,(struct cpumask const *)0);
    
#line 2959 
    ldv_free_irq_80(entry->vector,(void *)q_vector);
  }
  ldv_58181: 
#line 2961 
  ;
  
#line 2948 
  vector += 1;
  ldv_58183: 
#line 2949 
  ;
  
#line 2948 
  if (adapter->num_q_vectors > vector) 
#line 2950 
                                       goto ldv_58182; else 
#line 2953 
                                                            goto ldv_58184;
  ldv_58184: 
#line 2954 
  ;
  
#line 2962 
  ;
  
#line 2962 
  tmp = vector;
  
#line 2962 
  vector += 1;
  
#line 2962 
  ;
  
#line 2962 
  ldv_free_irq_81((adapter->msix_entries + tmp)->vector,(void *)adapter);
  return_label: 
#line 2963 
                return;
}


#line 2969  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
__inline static void ixgbe_irq_disable(struct ixgbe_adapter *adapter)
{
  
#line 2971 
  switch ((unsigned int)adapter->hw.mac.type) {
    case (unsigned int)1: 
#line 2972 
    ;
    
#line 2973 
    ixgbe_write_reg(& adapter->hw,2184U,4294967295U);
    
#line 2974 
    goto ldv_58189;
    case (unsigned int)2: 
#line 2975 
    ;
    case (unsigned int)3: 
#line 2976 
    ;
    case (unsigned int)4: 
#line 2977 
    ;
    case (unsigned int)5: 
#line 2978 
    ;
    
#line 2979 
    ixgbe_write_reg(& adapter->hw,2184U,4294901760U);
    
#line 2980 
    ixgbe_write_reg(& adapter->hw,2736U,4294967295U);
    
#line 2981 
    ixgbe_write_reg(& adapter->hw,2740U,4294967295U);
    
#line 2982 
    goto ldv_58189;
    default: 
#line 2983 
    ;
    
#line 2984 
    goto ldv_58189;
  }
  ldv_58189: 
#line 2986 
  ;
  
#line 2986 
  ixgbe_read_reg(& adapter->hw,8U);
  
#line 2987 
  if ((adapter->flags & 8U) != 0U) {
    int vector;
    int tmp;
    
#line 2990 
    vector = 0;
    
#line 2990 
    goto ldv_58197;
    ldv_58196: 
#line 2991 
    ;
    
#line 2991 
    synchronize_irq((adapter->msix_entries + vector)->vector);
    
#line 2990 
    vector += 1;
    ldv_58197: 
#line 2991 
    ;
    
#line 2990 
    if (adapter->num_q_vectors > vector) 
#line 2992 
                                         goto ldv_58196; else 
#line 2995 
                                                              goto ldv_58198;
    ldv_58198: 
#line 2996 
    ;
    
#line 2993 
    tmp = vector;
    
#line 2993 
    vector += 1;
    
#line 2993 
    ;
    
#line 2993 
    synchronize_irq((adapter->msix_entries + tmp)->vector);
  }
  else 
#line 2995 
       synchronize_irq((adapter->pdev)->irq);
  
#line 2996 
  return;
}


#line 3003  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_configure_msi_and_legacy(struct ixgbe_adapter *adapter)
{
  
#line 3005 
  struct ixgbe_q_vector *q_vector = adapter->q_vector[0];
  
#line 3007 
  ixgbe_write_eitr(q_vector);
  
#line 3009 
  ixgbe_set_ivar(adapter,(signed char)0,(unsigned char)0,(unsigned char)0);
  
#line 3010 
  ixgbe_set_ivar(adapter,(signed char)1,(unsigned char)0,(unsigned char)0);
  
#line 3012 
  if (((int)adapter->msg_enable & 8192) != 0) 
#line 3012 
                                              netdev_info((struct net_device const *)adapter->netdev,"Legacy interrupt IVAR setup done\n"); else ;
  
#line 3013 
  return;
}


#line 3022  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
void ixgbe_configure_tx_ring(struct ixgbe_adapter *adapter, struct ixgbe_ring *ring)
{
  int tmp;
  
#line 3025 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 3026 
  u64 tdba = ring->dma;
  
#line 3027 
  int wait_loop = 10;
  
#line 3028 
  u32 txdctl = 33554432U;
  
#line 3029 
  u8 reg_idx = ring->reg_idx;
  
#line 3032 
  ixgbe_write_reg(hw,(unsigned int)((int)reg_idx * 64 + 24616),0U);
  
#line 3033 
  ixgbe_read_reg(hw,8U);
  
#line 3035 
  ixgbe_write_reg(hw,(unsigned int)(((int)reg_idx + 384) * 64),(unsigned int)tdba);
  
#line 3037 
  ixgbe_write_reg(hw,(unsigned int)((int)reg_idx * 64 + 24580),(unsigned int)(tdba >> 32));
  
#line 3038 
  ixgbe_write_reg(hw,(unsigned int)((int)reg_idx * 64 + 24584),(unsigned int)ring->count * 16U);
  
#line 3040 
  ixgbe_write_reg(hw,(unsigned int)((int)reg_idx * 64 + 24592),0U);
  
#line 3041 
  ixgbe_write_reg(hw,(unsigned int)((int)reg_idx * 64 + 24600),0U);
  
#line 3042 
  ring->tail = adapter->io_addr + ((int)reg_idx * 64 + 24600);
  
#line 3054 
  if (ring->q_vector == (struct ixgbe_q_vector *)0 || (unsigned int)(ring->q_vector)->itr <= 39U) 
    
#line 3055 
    txdctl |= 65536U; else 
#line 3057 
                           txdctl |= 524288U;
  
#line 3063 
  txdctl |= 288U;
  
#line 3067 
  if ((adapter->flags & 262144U) != 0U) {
    
#line 3068 
    ring->__anonCompField_ixgbe_ring_119.__anonCompField___anonunion_1181_118.atr_sample_rate = (unsigned char)adapter->atr_sample_rate;
    
#line 3069 
    ring->__anonCompField_ixgbe_ring_119.__anonCompField___anonunion_1181_118.atr_count = (unsigned char)0U;
    
#line 3070 
    set_bit(0L,(unsigned long volatile *)(& ring->state));
  }
  else 
#line 3072 
       ring->__anonCompField_ixgbe_ring_119.__anonCompField___anonunion_1181_118.atr_sample_rate = (unsigned char)0U;
  
#line 3076 
  tmp = test_and_set_bit(1L,(unsigned long volatile *)(& ring->state));
  
#line 3076 
  if (tmp == 0) {
    
#line 3077 
    struct ixgbe_q_vector *q_vector = ring->q_vector;
    
#line 3079 
    if (q_vector != (struct ixgbe_q_vector *)0) 
#line 3080 
                                                netif_set_xps_queue(ring->netdev,(struct cpumask const *)(& q_vector->affinity_mask),(unsigned short)((int)ring->queue_index)); else ;
  }
  else ;
  
#line 3085 
  set_bit(3L,(unsigned long volatile *)(& ring->state));
  
#line 3088 
  ixgbe_write_reg(hw,(unsigned int)((int)reg_idx * 64 + 24616),txdctl);
  
#line 3091 
  if (hw->mac.type == (unsigned int)ixgbe_mac_82598EB) {
    u32 tmp_0;
    
#line 3091 
    tmp_0 = ixgbe_read_reg(hw,17060U);
    
#line 3091 
    if ((tmp_0 & 1073741824U) == 0U) 
#line 3093 
                                     goto return_label; else ;
  }
  else ;
  ldv_58213: 
#line 3094 
  ;
  
#line 3097 
  usleep_range(1000UL,2000UL);
  
#line 3098 
  txdctl = ixgbe_read_reg(hw,(unsigned int)((int)reg_idx * 64 + 24616));
  
#line 3099 
  wait_loop -= 1;
  
#line 3099 
  if (wait_loop != 0) {
    
#line 3099 
    if ((txdctl & 33554432U) == 0U) 
#line 3101 
                                    goto ldv_58213; else 
#line 3104 
                                                         goto ldv_58214;
  }
  else 
#line 3104 
       goto ldv_58214;
  ldv_58214: 
#line 3105 
  ;
  
#line 3100 
  if (wait_loop == 0) {
    
#line 3101 
    if (((int)adapter->msg_enable & 1) != 0) 
#line 3101 
                                             netdev_err((struct net_device const *)adapter->netdev,"Could not enable Tx Queue %d\n",(int)reg_idx); else ;
  }
  else ;
  return_label: 
#line 3102 
                return;
}


#line 3104  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_setup_mtqc(struct ixgbe_adapter *adapter)
{
  u32 rttdcs;
  u32 mtqc;
  int tmp;
  
#line 3106 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 3108 
  tmp = netdev_get_num_tc(adapter->netdev);
  
#line 3108 
  u8 tcs = (unsigned char)tmp;
  
#line 3110 
  if (hw->mac.type == (unsigned int)ixgbe_mac_82598EB) 
#line 3111 
                                                       goto return_label; else ;
  
#line 3114 
  rttdcs = ixgbe_read_reg(hw,18688U);
  
#line 3115 
  rttdcs |= 64U;
  
#line 3116 
  ixgbe_write_reg(hw,18688U,rttdcs);
  
#line 3119 
  if ((adapter->flags & 8388608U) != 0U) {
    
#line 3120 
    mtqc = 2U;
    
#line 3121 
    if ((unsigned int)tcs > 4U) 
#line 3122 
                                mtqc |= 13U;
    else 
      
#line 3123 
      if ((unsigned int)tcs > 1U) 
#line 3124 
                                  mtqc |= 9U;
      else 
        
#line 3125 
        if ((unsigned int)adapter->ring_feature[2].indices == 4U) 
#line 3126 
                                                                  mtqc |= 8U; else 
                                                                    
#line 3128 
                                                                    mtqc |= 4U;
  }
  else 
    
#line 3130 
    if ((unsigned int)tcs > 4U) 
#line 3131 
                                mtqc = 13U;
    else 
      
#line 3132 
      if ((unsigned int)tcs > 1U) 
#line 3133 
                                  mtqc = 9U; else 
#line 3135 
                                                  mtqc = 0U;
  
#line 3138 
  ixgbe_write_reg(hw,33056U,mtqc);
  
#line 3141 
  if ((unsigned int)tcs != 0U) {
    
#line 3142 
    u32 sectx = ixgbe_read_reg(hw,34832U);
    
#line 3143 
    sectx |= 7936U;
    
#line 3144 
    ixgbe_write_reg(hw,34832U,sectx);
  }
  else ;
  
#line 3148 
  rttdcs &= 4294967231U;
  
#line 3149 
  ixgbe_write_reg(hw,18688U,rttdcs);
  return_label: 
#line 3150 
                return;
}


#line 3158  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_configure_tx(struct ixgbe_adapter *adapter)
{
  u32 dmatxctl;
  u32 i;
  
#line 3160 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 3164 
  ixgbe_setup_mtqc(adapter);
  
#line 3166 
  if (hw->mac.type != (unsigned int)ixgbe_mac_82598EB) {
    
#line 3168 
    dmatxctl = ixgbe_read_reg(hw,19072U);
    
#line 3169 
    dmatxctl |= 1U;
    
#line 3170 
    ixgbe_write_reg(hw,19072U,dmatxctl);
  }
  else ;
  
#line 3174 
  i = 0U;
  
#line 3174 
  goto ldv_58230;
  ldv_58229: 
#line 3175 
  ;
  
#line 3175 
  ixgbe_configure_tx_ring(adapter,adapter->tx_ring[i]);
  
#line 3174 
  i += 1U;
  ldv_58230: 
#line 3175 
  ;
  
#line 3174 
  if ((unsigned int)adapter->num_tx_queues > i) 
#line 3176 
                                                goto ldv_58229; else 
                                                                  
#line 3179 
                                                                  goto ldv_58231;
  ldv_58231: 
#line 3180 
  ;
  
#line 3181 
  return;
}


#line 3178  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_enable_rx_drop(struct ixgbe_adapter *adapter, struct ixgbe_ring *ring)
{
  u32 tmp_1;
  int tmp_0;
  int tmp_3;
  
#line 3181 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 3182 
  u8 reg_idx = ring->reg_idx;
  
#line 3183 
  if ((unsigned int)reg_idx <= 15U) 
#line 3183 
                                    tmp_0 = ((int)reg_idx + 2112) * 4;
  else {
    int tmp;
    
#line 3183 
    if ((unsigned int)reg_idx <= 63U) 
#line 3183 
                                      tmp = (int)reg_idx * 64 + 4116; else 
                                                                    
#line 3183 
                                                                    tmp = ((int)reg_idx + -64) * 64 + 53268;
    
#line 3183 
    tmp_0 = tmp;
  }
  
#line 3183 
  ;
  
#line 3183 
  tmp_1 = ixgbe_read_reg(hw,(unsigned int)tmp_0);
  
#line 3183 
  u32 srrctl = tmp_1;
  
#line 3185 
  srrctl |= 268435456U;
  
#line 3187 
  ;
  
#line 3187 
  if ((unsigned int)reg_idx <= 15U) 
#line 3187 
                                    tmp_3 = ((int)reg_idx + 2112) * 4;
  else {
    int tmp_2;
    
#line 3187 
    if ((unsigned int)reg_idx <= 63U) 
#line 3187 
                                      tmp_2 = (int)reg_idx * 64 + 4116; else 
                                                                    
#line 3187 
                                                                    tmp_2 = ((int)reg_idx + -64) * 64 + 53268;
    
#line 3187 
    tmp_3 = tmp_2;
  }
  
#line 3187 
  ;
  
#line 3187 
  ixgbe_write_reg(hw,(unsigned int)tmp_3,srrctl);
  
#line 3188 
  return;
}


#line 3190  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_disable_rx_drop(struct ixgbe_adapter *adapter, struct ixgbe_ring *ring)
{
  u32 tmp_1;
  int tmp_0;
  int tmp_3;
  
#line 3193 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 3194 
  u8 reg_idx = ring->reg_idx;
  
#line 3195 
  if ((unsigned int)reg_idx <= 15U) 
#line 3195 
                                    tmp_0 = ((int)reg_idx + 2112) * 4;
  else {
    int tmp;
    
#line 3195 
    if ((unsigned int)reg_idx <= 63U) 
#line 3195 
                                      tmp = (int)reg_idx * 64 + 4116; else 
                                                                    
#line 3195 
                                                                    tmp = ((int)reg_idx + -64) * 64 + 53268;
    
#line 3195 
    tmp_0 = tmp;
  }
  
#line 3195 
  ;
  
#line 3195 
  tmp_1 = ixgbe_read_reg(hw,(unsigned int)tmp_0);
  
#line 3195 
  u32 srrctl = tmp_1;
  
#line 3197 
  srrctl &= 4026531839U;
  
#line 3199 
  ;
  
#line 3199 
  if ((unsigned int)reg_idx <= 15U) 
#line 3199 
                                    tmp_3 = ((int)reg_idx + 2112) * 4;
  else {
    int tmp_2;
    
#line 3199 
    if ((unsigned int)reg_idx <= 63U) 
#line 3199 
                                      tmp_2 = (int)reg_idx * 64 + 4116; else 
                                                                    
#line 3199 
                                                                    tmp_2 = ((int)reg_idx + -64) * 64 + 53268;
    
#line 3199 
    tmp_3 = tmp_2;
  }
  
#line 3199 
  ;
  
#line 3199 
  ixgbe_write_reg(hw,(unsigned int)tmp_3,srrctl);
  
#line 3200 
  return;
}


#line 3203  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
void ixgbe_set_rx_drop_en(struct ixgbe_adapter *adapter)
{
  int i;
  
#line 3209 
  bool pfc_en = adapter->dcb_cfg.pfc_mode_enable;
  
#line 3211 
  if (adapter->ixgbe_ieee_pfc != (struct ieee_pfc *)0) 
#line 3212 
                                                       pfc_en = (_Bool)(((int)pfc_en | ((unsigned int)(adapter->ixgbe_ieee_pfc)->pfc_en != 0U)) != 0); else ;
  
#line 3223 
  if (adapter->num_vfs != 0U || ((adapter->num_rx_queues > 1 && ((unsigned int)adapter->hw.fc.current_mode & 2U) == 0U) && ! pfc_en)) {
    
#line 3225 
    i = 0;
    
#line 3225 
    goto ldv_58252;
    ldv_58251: 
#line 3226 
    ;
    
#line 3226 
    ixgbe_enable_rx_drop(adapter,adapter->rx_ring[i]);
    
#line 3225 
    i += 1;
    ldv_58252: 
#line 3226 
    ;
    
#line 3225 
    if (adapter->num_rx_queues > i) 
#line 3227 
                                    goto ldv_58251; else 
#line 3230 
                                                         goto ldv_58253;
    ldv_58253: 
#line 3231 
    ;
  }
  else {
    
#line 3228 
    i = 0;
    
#line 3228 
    goto ldv_58255;
    ldv_58254: 
#line 3229 
    ;
    
#line 3229 
    ixgbe_disable_rx_drop(adapter,adapter->rx_ring[i]);
    
#line 3228 
    i += 1;
    ldv_58255: 
#line 3229 
    ;
    
#line 3228 
    if (adapter->num_rx_queues > i) 
#line 3230 
                                    goto ldv_58254; else 
#line 3233 
                                                         goto ldv_58256;
    ldv_58256: 
#line 3234 
    ;
  }
  
#line 3236 
  return;
}


#line 3235  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_configure_srrctl(struct ixgbe_adapter *adapter, struct ixgbe_ring *rx_ring)
{
  u32 srrctl;
  unsigned int tmp;
  int tmp_1;
  
#line 3238 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 3240 
  u8 reg_idx = rx_ring->reg_idx;
  
#line 3242 
  if (hw->mac.type == (unsigned int)ixgbe_mac_82598EB) {
    
#line 3243 
    u16 mask = adapter->ring_feature[2].mask;
    
#line 3249 
    reg_idx = (unsigned char)((int)((unsigned char)mask) & (int)reg_idx);
  }
  else ;
  
#line 3253 
  srrctl = 1024U;
  
#line 3256 
  tmp = ixgbe_rx_bufsz(rx_ring);
  
#line 3256 
  srrctl = (tmp >> 10) | srrctl;
  
#line 3259 
  srrctl |= 33554432U;
  
#line 3261 
  ;
  
#line 3261 
  if ((unsigned int)reg_idx <= 15U) 
#line 3261 
                                    tmp_1 = ((int)reg_idx + 2112) * 4;
  else {
    int tmp_0;
    
#line 3261 
    if ((unsigned int)reg_idx <= 63U) 
#line 3261 
                                      tmp_0 = (int)reg_idx * 64 + 4116; else 
                                                                    
#line 3261 
                                                                    tmp_0 = ((int)reg_idx + -64) * 64 + 53268;
    
#line 3261 
    tmp_1 = tmp_0;
  }
  
#line 3261 
  ;
  
#line 3261 
  ixgbe_write_reg(hw,(unsigned int)tmp_1,srrctl);
  
#line 3262 
  return;
}


#line 3273  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
u32 ixgbe_rss_indir_tbl_entries(struct ixgbe_adapter *adapter)
{
  u32 __retres;
  
#line 3275 
  if (adapter->hw.mac.type <= (unsigned int)ixgbe_mac_X540) {
    
#line 3276 
    __retres = 128U;
    
#line 3276 
    goto return_label;
  }
  else 
    
#line 3277 
    if ((adapter->flags & 8388608U) != 0U) {
      
#line 3278 
      __retres = 64U;
      
#line 3278 
      goto return_label;
    }
    else {
      
#line 3280 
      __retres = 512U;
      
#line 3280 
      goto return_label;
    }
  return_label: 
#line 3275 
                return __retres;
}


#line 3290  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_store_reta(struct ixgbe_adapter *adapter)
{
  u32 i;
  u32 indices_multi;
  
#line 3292 
  u32 reta_entries = ixgbe_rss_indir_tbl_entries(adapter);
  
#line 3293 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 3294 
  u32 reta = 0U;
  
#line 3296 
  u8 *indir_tbl = (u8 *)(& adapter->rss_indir_tbl);
  
#line 3304 
  if (adapter->hw.mac.type == (unsigned int)ixgbe_mac_82598EB) 
#line 3305 
                                                               indices_multi = 17U; else 
                                                                    
#line 3307 
                                                                    indices_multi = 1U;
  
#line 3310 
  i = 0U;
  
#line 3310 
  goto ldv_58278;
  ldv_58277: 
#line 3311 
  ;
  
#line 3311 
  reta = ((unsigned int)*(indir_tbl + i) * indices_multi << (i & 3U) * 8U) | reta;
  
#line 3312 
  if ((i & 3U) == 3U) {
    
#line 3313 
    if (i <= 127U) 
#line 3314 
                   ixgbe_write_reg(hw,((i >> 2) + 5888U) * 4U,reta); else 
                                                                    
#line 3316 
                                                                    ixgbe_write_reg(hw,((i >> 2) + 15232U) * 4U,reta);
    
#line 3318 
    reta = 0U;
  }
  else ;
  
#line 3310 
  i += 1U;
  ldv_58278: 
#line 3311 
  ;
  
#line 3310 
  if (i < reta_entries) 
#line 3312 
                        goto ldv_58277; else 
#line 3315 
                                             goto ldv_58279;
  ldv_58279: 
#line 3316 
  ;
  
#line 3317 
  return;
}


#line 3330  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_store_vfreta(struct ixgbe_adapter *adapter)
{
  u32 i;
  
#line 3332 
  u32 reta_entries = ixgbe_rss_indir_tbl_entries(adapter);
  
#line 3333 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 3334 
  u32 vfreta = 0U;
  
#line 3335 
  unsigned int pf_pool = adapter->num_vfs;
  
#line 3338 
  i = 0U;
  
#line 3338 
  goto ldv_58289;
  ldv_58288: 
#line 3339 
  ;
  
#line 3339 
  vfreta = ((unsigned int)adapter->rss_indir_tbl[i] << (i & 3U) * 8U) | vfreta;
  
#line 3340 
  if ((i & 3U) == 3U) {
    
#line 3341 
    ixgbe_write_reg(hw,(((i >> 2) + pf_pool * 16U) + 25600U) * 4U,vfreta);
    
#line 3343 
    vfreta = 0U;
  }
  else ;
  
#line 3338 
  i += 1U;
  ldv_58289: 
#line 3339 
  ;
  
#line 3338 
  if (i < reta_entries) 
#line 3340 
                        goto ldv_58288; else 
#line 3343 
                                             goto ldv_58290;
  ldv_58290: 
#line 3344 
  ;
  
#line 3345 
  return;
}


#line 3348  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_setup_reta(struct ixgbe_adapter *adapter)
{
  u32 i;
  u32 j;
  
#line 3350 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 3352 
  u32 reta_entries = ixgbe_rss_indir_tbl_entries(adapter);
  
#line 3353 
  u16 rss_i = adapter->ring_feature[2].indices;
  
#line 3359 
  if ((adapter->flags & 8388608U) != 0U && (unsigned int)rss_i <= 1U) 
    
#line 3360 
    rss_i = (unsigned short)2U; else ;
  
#line 3363 
  i = 0U;
  
#line 3363 
  goto ldv_58300;
  ldv_58299: 
#line 3364 
  ;
  
#line 3364 
  ixgbe_write_reg(hw,(i + 5920U) * 4U,adapter->rss_key[i]);
  
#line 3363 
  i += 1U;
  ldv_58300: 
#line 3364 
  ;
  
#line 3363 
  if (i <= 9U) 
#line 3365 
               goto ldv_58299; else 
#line 3368 
                                    goto ldv_58301;
  ldv_58301: 
#line 3369 
  ;
  
#line 3367 
  memset((void *)(& adapter->rss_indir_tbl),0,512UL);
  
#line 3369 
  i = 0U;
  
#line 3369 
  j = 0U;
  
#line 3369 
  goto ldv_58303;
  ldv_58302: 
#line 3370 
  ;
  
#line 3370 
  if ((unsigned int)rss_i == j) 
#line 3371 
                                j = 0U; else ;
  
#line 3373 
  adapter->rss_indir_tbl[i] = (unsigned char)j;
  
#line 3369 
  i += 1U;
  
#line 3369 
  j += 1U;
  ldv_58303: 
#line 3370 
  ;
  
#line 3369 
  if (i < reta_entries) 
#line 3371 
                        goto ldv_58302; else 
#line 3374 
                                             goto ldv_58304;
  ldv_58304: 
#line 3375 
  ;
  
#line 3376 
  ixgbe_store_reta(adapter);
  
#line 3377 
  return;
}


#line 3379  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_setup_vfreta(struct ixgbe_adapter *adapter)
{
  int i;
  int j;
  
#line 3381 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 3382 
  u16 rss_i = adapter->ring_feature[2].indices;
  
#line 3383 
  unsigned int pf_pool = adapter->num_vfs;
  
#line 3387 
  i = 0;
  
#line 3387 
  goto ldv_58314;
  ldv_58313: 
#line 3388 
  ;
  
#line 3388 
  ixgbe_write_reg(hw,(unsigned int)((i + 24576) * 4) + pf_pool * 64U,adapter->rss_key[i]);
  
#line 3387 
  i += 1;
  ldv_58314: 
#line 3388 
  ;
  
#line 3387 
  if (i <= 9) 
#line 3389 
              goto ldv_58313; else 
#line 3392 
                                   goto ldv_58315;
  ldv_58315: 
#line 3393 
  ;
  
#line 3392 
  i = 0;
  
#line 3392 
  j = 0;
  
#line 3392 
  goto ldv_58317;
  ldv_58316: 
#line 3393 
  ;
  
#line 3393 
  if ((int)rss_i == j) 
#line 3394 
                       j = 0; else ;
  
#line 3396 
  adapter->rss_indir_tbl[i] = (unsigned char)j;
  
#line 3392 
  i += 1;
  
#line 3392 
  j += 1;
  ldv_58317: 
#line 3393 
  ;
  
#line 3392 
  if (i <= 63) 
#line 3394 
               goto ldv_58316; else 
#line 3397 
                                    goto ldv_58318;
  ldv_58318: 
#line 3398 
  ;
  
#line 3399 
  ixgbe_store_vfreta(adapter);
  
#line 3400 
  return;
}


#line 3402  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_setup_mrqc(struct ixgbe_adapter *adapter)
{
  u32 rxcsum;
  
#line 3404 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 3405 
  u32 mrqc = 0U;
  
#line 3405 
  u32 rss_field = 0U;
  
#line 3405 
  u32 vfmrqc = 0U;
  
#line 3409 
  rxcsum = ixgbe_read_reg(hw,20480U);
  
#line 3410 
  rxcsum |= 8192U;
  
#line 3411 
  ixgbe_write_reg(hw,20480U,rxcsum);
  
#line 3413 
  if (adapter->hw.mac.type == (unsigned int)ixgbe_mac_82598EB) {
    
#line 3414 
    if ((unsigned int)adapter->ring_feature[2].mask != 0U) 
#line 3415 
                                                           mrqc = 1U; else ;
  }
  else {
    int tmp;
    
#line 3417 
    tmp = netdev_get_num_tc(adapter->netdev);
    
#line 3417 
    u8 tcs = (unsigned char)tmp;
    
#line 3419 
    if ((adapter->flags & 8388608U) != 0U) 
      
#line 3420 
      if ((unsigned int)tcs > 4U) 
#line 3421 
                                  mrqc = 12U;
      else 
        
#line 3422 
        if ((unsigned int)tcs > 1U) 
#line 3423 
                                    mrqc = 13U;
        else 
          
#line 3424 
          if ((unsigned int)adapter->ring_feature[2].indices == 4U) 
#line 3425 
                                                                    mrqc = 10U; else 
                                                                    
#line 3427 
                                                                    mrqc = 11U;
    else 
      
#line 3429 
      if ((unsigned int)tcs > 4U) 
#line 3430 
                                  mrqc = 4U;
      else 
        
#line 3431 
        if ((unsigned int)tcs > 1U) 
#line 3432 
                                    mrqc = 5U; else 
#line 3434 
                                                    mrqc = 1U;
  }
  
#line 3439 
  rss_field |= 3342336U;
  
#line 3444 
  if ((adapter->flags2 & 256U) != 0U) 
#line 3445 
                                      rss_field |= 4194304U; else ;
  
#line 3446 
  if ((adapter->flags2 & 512U) != 0U) 
#line 3447 
                                      rss_field |= 8388608U; else ;
  
#line 3449 
  netdev_rss_key_fill((void *)(& adapter->rss_key),40UL);
  
#line 3450 
  if (hw->mac.type > (unsigned int)ixgbe_mac_X540 && (adapter->flags & 8388608U) != 0U) {
    
#line 3452 
    unsigned int pf_pool = adapter->num_vfs;
    
#line 3455 
    mrqc |= 8192U;
    
#line 3456 
    ixgbe_write_reg(hw,22552U,mrqc);
    
#line 3459 
    ixgbe_setup_vfreta(adapter);
    
#line 3460 
    vfmrqc = 1U;
    
#line 3461 
    vfmrqc |= rss_field;
    
#line 3462 
    ixgbe_write_reg(hw,(pf_pool + 3328U) * 4U,vfmrqc);
  }
  else {
    
#line 3464 
    ixgbe_setup_reta(adapter);
    
#line 3465 
    mrqc |= rss_field;
    
#line 3466 
    ixgbe_write_reg(hw,22552U,mrqc);
  }
  
#line 3468 
  return;
}


#line 3475  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_configure_rscctl(struct ixgbe_adapter *adapter, struct ixgbe_ring *ring)
{
  u32 rscctrl;
  int tmp;
  int tmp_0;
  int tmp_1;
  
#line 3478 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 3480 
  u8 reg_idx = ring->reg_idx;
  
#line 3482 
  tmp = constant_test_bit(4L,(unsigned long const volatile *)(& ring->state));
  
#line 3482 
  if (tmp == 0) 
#line 3483 
                goto return_label; else ;
  
#line 3485 
  if ((unsigned int)reg_idx <= 63U) 
#line 3485 
                                    tmp_0 = (int)reg_idx * 64 + 4140; else 
                                                                    
#line 3485 
                                                                    tmp_0 = ((int)reg_idx + -64) * 64 + 53292;
  
#line 3485 
  ;
  
#line 3485 
  rscctrl = ixgbe_read_reg(hw,(unsigned int)tmp_0);
  
#line 3486 
  rscctrl |= 1U;
  
#line 3492 
  rscctrl |= 12U;
  
#line 3493 
  ;
  
#line 3493 
  if ((unsigned int)reg_idx <= 63U) 
#line 3493 
                                    tmp_1 = (int)reg_idx * 64 + 4140; else 
                                                                    
#line 3493 
                                                                    tmp_1 = ((int)reg_idx + -64) * 64 + 53292;
  
#line 3493 
  ;
  
#line 3493 
  ixgbe_write_reg(hw,(unsigned int)tmp_1,rscctrl);
  return_label: 
#line 3494 
                return;
}


#line 3497  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_rx_desc_queue_enable(struct ixgbe_adapter *adapter, struct ixgbe_ring *ring)
{
  u32 rxdctl;
  bool tmp;
  int tmp_1;
  
#line 3500 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 3501 
  int wait_loop = 10;
  
#line 3503 
  u8 reg_idx = ring->reg_idx;
  
#line 3505 
  tmp = ixgbe_removed((void *)hw->hw_addr);
  
#line 3505 
  if ((int)tmp != 0) 
#line 3506 
                     goto return_label; else ;
  
#line 3508 
  if (hw->mac.type == (unsigned int)ixgbe_mac_82598EB) {
    u32 tmp_0;
    
#line 3508 
    tmp_0 = ixgbe_read_reg(hw,17060U);
    
#line 3508 
    if ((tmp_0 & 1073741824U) == 0U) 
#line 3510 
                                     goto return_label; else ;
  }
  else ;
  ldv_58344: 
#line 3511 
  ;
  
#line 3513 
  usleep_range(1000UL,2000UL);
  
#line 3514 
  if ((unsigned int)reg_idx <= 63U) 
#line 3514 
                                    tmp_1 = (int)reg_idx * 64 + 4136; else 
                                                                    
#line 3514 
                                                                    tmp_1 = ((int)reg_idx + -64) * 64 + 53288;
  
#line 3514 
  ;
  
#line 3514 
  rxdctl = ixgbe_read_reg(hw,(unsigned int)tmp_1);
  
#line 3515 
  wait_loop -= 1;
  
#line 3515 
  if (wait_loop != 0) {
    
#line 3515 
    if ((rxdctl & 33554432U) == 0U) 
#line 3517 
                                    goto ldv_58344; else 
#line 3520 
                                                         goto ldv_58345;
  }
  else 
#line 3520 
       goto ldv_58345;
  ldv_58345: 
#line 3521 
  ;
  
#line 3517 
  if (wait_loop == 0) {
    
#line 3518 
    if (((int)adapter->msg_enable & 1) != 0) 
#line 3518 
                                             netdev_err((struct net_device const *)adapter->netdev,"RXDCTL.ENABLE on Rx queue %d not set within ",(int)reg_idx); else ;
  }
  else ;
  return_label: 
#line 3519 
                return;
}


#line 3523  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
void ixgbe_disable_rx_queue(struct ixgbe_adapter *adapter, struct ixgbe_ring *ring)
{
  u32 rxdctl;
  bool tmp;
  int tmp_0;
  int tmp_1;
  int tmp_3;
  
#line 3526 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 3527 
  int wait_loop = 10;
  
#line 3529 
  u8 reg_idx = ring->reg_idx;
  
#line 3531 
  tmp = ixgbe_removed((void *)hw->hw_addr);
  
#line 3531 
  if ((int)tmp != 0) 
#line 3532 
                     goto return_label; else ;
  
#line 3533 
  if ((unsigned int)reg_idx <= 63U) 
#line 3533 
                                    tmp_0 = (int)reg_idx * 64 + 4136; else 
                                                                    
#line 3533 
                                                                    tmp_0 = ((int)reg_idx + -64) * 64 + 53288;
  
#line 3533 
  ;
  
#line 3533 
  rxdctl = ixgbe_read_reg(hw,(unsigned int)tmp_0);
  
#line 3534 
  rxdctl &= 4261412863U;
  
#line 3537 
  ;
  
#line 3537 
  if ((unsigned int)reg_idx <= 63U) 
#line 3537 
                                    tmp_1 = (int)reg_idx * 64 + 4136; else 
                                                                    
#line 3537 
                                                                    tmp_1 = ((int)reg_idx + -64) * 64 + 53288;
  
#line 3537 
  ;
  
#line 3537 
  ixgbe_write_reg(hw,(unsigned int)tmp_1,rxdctl);
  
#line 3539 
  if (hw->mac.type == (unsigned int)ixgbe_mac_82598EB) {
    u32 tmp_2;
    
#line 3539 
    tmp_2 = ixgbe_read_reg(hw,17060U);
    
#line 3539 
    if ((tmp_2 & 1073741824U) == 0U) 
#line 3541 
                                     goto return_label; else ;
  }
  else ;
  ldv_58354: 
#line 3542 
  ;
  
#line 3545 
  __const_udelay(42950UL);
  
#line 3546 
  if ((unsigned int)reg_idx <= 63U) 
#line 3546 
                                    tmp_3 = (int)reg_idx * 64 + 4136; else 
                                                                    
#line 3546 
                                                                    tmp_3 = ((int)reg_idx + -64) * 64 + 53288;
  
#line 3546 
  ;
  
#line 3546 
  rxdctl = ixgbe_read_reg(hw,(unsigned int)tmp_3);
  
#line 3547 
  wait_loop -= 1;
  
#line 3547 
  if (wait_loop != 0) {
    
#line 3547 
    if ((rxdctl & 33554432U) != 0U) 
#line 3549 
                                    goto ldv_58354; else 
#line 3552 
                                                         goto ldv_58355;
  }
  else 
#line 3552 
       goto ldv_58355;
  ldv_58355: 
#line 3553 
  ;
  
#line 3549 
  if (wait_loop == 0) {
    
#line 3550 
    if (((int)adapter->msg_enable & 1) != 0) 
#line 3550 
                                             netdev_err((struct net_device const *)adapter->netdev,"RXDCTL.ENABLE on Rx queue %d not cleared within ",(int)reg_idx); else ;
  }
  else ;
  return_label: 
#line 3551 
                return;
}


#line 3555  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
void ixgbe_configure_rx_ring(struct ixgbe_adapter *adapter, struct ixgbe_ring *ring)
{
  u32 rxdctl;
  int tmp;
  int tmp_0;
  int tmp_1;
  int tmp_2;
  int tmp_3;
  int tmp_4;
  int tmp_5;
  int tmp_6;
  u16 tmp_7;
  
#line 3558 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 3559 
  u64 rdba = ring->dma;
  
#line 3561 
  u8 reg_idx = ring->reg_idx;
  
#line 3564 
  if ((unsigned int)reg_idx <= 63U) 
#line 3564 
                                    tmp = (int)reg_idx * 64 + 4136; else 
                                                                    
#line 3564 
                                                                    tmp = ((int)reg_idx + -64) * 64 + 53288;
  
#line 3564 
  ;
  
#line 3564 
  rxdctl = ixgbe_read_reg(hw,(unsigned int)tmp);
  
#line 3565 
  ixgbe_disable_rx_queue(adapter,ring);
  
#line 3567 
  ;
  
#line 3567 
  if ((unsigned int)reg_idx <= 63U) 
#line 3567 
                                    tmp_0 = ((int)reg_idx + 64) * 64; else 
                                                                    
#line 3567 
                                                                    tmp_0 = ((int)reg_idx + 768) * 64;
  
#line 3567 
  ;
  
#line 3567 
  ixgbe_write_reg(hw,(unsigned int)tmp_0,(unsigned int)rdba);
  
#line 3568 
  ;
  
#line 3568 
  if ((unsigned int)reg_idx <= 63U) 
#line 3568 
                                    tmp_1 = (int)reg_idx * 64 + 4100; else 
                                                                    
#line 3568 
                                                                    tmp_1 = ((int)reg_idx + -64) * 64 + 53252;
  
#line 3568 
  ;
  
#line 3568 
  ixgbe_write_reg(hw,(unsigned int)tmp_1,(unsigned int)(rdba >> 32));
  
#line 3569 
  ;
  
#line 3569 
  if ((unsigned int)reg_idx <= 63U) 
#line 3569 
                                    tmp_2 = (int)reg_idx * 64 + 4104; else 
                                                                    
#line 3569 
                                                                    tmp_2 = ((int)reg_idx + -64) * 64 + 53256;
  
#line 3569 
  ;
  
#line 3569 
  ixgbe_write_reg(hw,(unsigned int)tmp_2,(unsigned int)ring->count * 16U);
  
#line 3571 
  if ((unsigned int)reg_idx <= 63U) 
#line 3571 
                                    tmp_3 = (int)reg_idx * 64 + 4112; else 
                                                                    
#line 3571 
                                                                    tmp_3 = ((int)reg_idx + -64) * 64 + 53264;
  
#line 3571 
  ;
  
#line 3571 
  ixgbe_write_reg(hw,(unsigned int)tmp_3,0U);
  
#line 3572 
  if ((unsigned int)reg_idx <= 63U) 
#line 3572 
                                    tmp_4 = (int)reg_idx * 64 + 4120; else 
                                                                    
#line 3572 
                                                                    tmp_4 = ((int)reg_idx + -64) * 64 + 53272;
  
#line 3572 
  ;
  
#line 3572 
  ixgbe_write_reg(hw,(unsigned int)tmp_4,0U);
  
#line 3573 
  if ((unsigned int)reg_idx <= 63U) 
#line 3573 
                                    tmp_5 = (int)reg_idx * 64 + 4120; else 
                                                                    
#line 3573 
                                                                    tmp_5 = ((int)reg_idx + -64) * 64 + 53272;
  
#line 3573 
  ring->tail = adapter->io_addr + tmp_5;
  
#line 3575 
  ixgbe_configure_srrctl(adapter,ring);
  
#line 3576 
  ixgbe_configure_rscctl(adapter,ring);
  
#line 3578 
  if (hw->mac.type == (unsigned int)ixgbe_mac_82598EB) {
    
#line 3586 
    rxdctl &= 4290772992U;
    
#line 3587 
    rxdctl |= 525344U;
  }
  else ;
  
#line 3591 
  rxdctl |= 33554432U;
  
#line 3592 
  ;
  
#line 3592 
  if ((unsigned int)reg_idx <= 63U) 
#line 3592 
                                    tmp_6 = (int)reg_idx * 64 + 4136; else 
                                                                    
#line 3592 
                                                                    tmp_6 = ((int)reg_idx + -64) * 64 + 53288;
  
#line 3592 
  ;
  
#line 3592 
  ixgbe_write_reg(hw,(unsigned int)tmp_6,rxdctl);
  
#line 3594 
  ixgbe_rx_desc_queue_enable(adapter,ring);
  
#line 3595 
  tmp_7 = ixgbe_desc_unused(ring);
  
#line 3595 
  ;
  
#line 3595 
  ixgbe_alloc_rx_buffers(ring,(unsigned short)((int)tmp_7));
  
#line 3596 
  return;
}


#line 3598  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_setup_psrtype(struct ixgbe_adapter *adapter)
{
  u16 pool;
  unsigned long tmp;
  int tmp_0;
  unsigned long tmp_1;
  
#line 3600 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 3601 
  int rss_i = (int)adapter->ring_feature[2].indices;
  
#line 3605 
  u32 psrtype = 4912U;
  
#line 3611 
  if (hw->mac.type == (unsigned int)ixgbe_mac_82598EB) 
#line 3612 
                                                       goto return_label; else ;
  
#line 3614 
  if (rss_i > 3) 
#line 3615 
                 psrtype |= 1073741824U;
  else 
    
#line 3616 
    if (rss_i > 1) 
#line 3617 
                   psrtype |= 536870912U; else ;
  
#line 3619 
  tmp = find_first_bit((unsigned long const *)(& adapter->fwd_bitmask),32UL);
  
#line 3619 
  pool = (unsigned short)tmp;
  
#line 3619 
  goto ldv_58372;
  ldv_58371: 
#line 3620 
  ;
  
#line 3620 
  ;
  
#line 3620 
  if ((int)pool + (int)adapter->ring_feature[1].offset <= 15) 
#line 3620 
                                                              tmp_0 = (((int)pool + (int)adapter->ring_feature[1].offset) + 5408) * 4; else 
                                                                    
#line 3620 
                                                                    tmp_0 = (((int)pool + (int)adapter->ring_feature[1].offset) + 14976) * 4;
  
#line 3620 
  ;
  
#line 3620 
  ixgbe_write_reg(hw,(unsigned int)tmp_0,psrtype);
  
#line 3619 
  tmp_1 = find_next_bit((unsigned long const *)(& adapter->fwd_bitmask),32UL,(unsigned long)((int)pool + 1));
  
#line 3619 
  pool = (unsigned short)tmp_1;
  ldv_58372: 
#line 3620 
  ;
  
#line 3619 
  if ((unsigned int)pool <= 31U) 
#line 3621 
                                 goto ldv_58371; else 
#line 3624 
                                                      goto ldv_58373;
  ldv_58373: 
#line 3625 
  ;
  return_label: 
#line 3626 
                return;
}


#line 3623  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_configure_virtualization(struct ixgbe_adapter *adapter)
{
  u32 reg_offset;
  u32 vf_shift;
  u32 gcr_ext;
  u32 vmdctl;
  int i;
  
#line 3625 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 3630 
  if ((adapter->flags & 8388608U) == 0U) 
#line 3631 
                                         goto return_label; else ;
  
#line 3633 
  vmdctl = ixgbe_read_reg(hw,20912U);
  
#line 3634 
  vmdctl |= 1U;
  
#line 3635 
  vmdctl &= 4294959231U;
  
#line 3636 
  vmdctl = (unsigned int)((int)adapter->ring_feature[1].offset << 7) | vmdctl;
  
#line 3637 
  vmdctl |= 1073741824U;
  
#line 3638 
  ixgbe_write_reg(hw,20912U,vmdctl);
  
#line 3640 
  vf_shift = (unsigned int)adapter->ring_feature[1].offset & 31U;
  
#line 3641 
  reg_offset = (unsigned int)((unsigned int)adapter->ring_feature[1].offset > 31U);
  
#line 3644 
  ixgbe_write_reg(hw,(reg_offset + 5240U) * 4U,(unsigned int)(-1 << vf_shift));
  
#line 3645 
  ixgbe_write_reg(hw,((reg_offset ^ 1U) + 5240U) * 4U,reg_offset + 4294967295U);
  
#line 3646 
  ixgbe_write_reg(hw,(reg_offset + 8260U) * 4U,(unsigned int)(-1 << vf_shift));
  
#line 3647 
  ixgbe_write_reg(hw,((reg_offset ^ 1U) + 8260U) * 4U,reg_offset + 4294967295U);
  
#line 3648 
  if ((unsigned int)adapter->bridge_mode == 0U) 
#line 3649 
                                                ixgbe_write_reg(hw,33312U,1U); else ;
  
#line 3652 
  (*(hw->mac.ops.set_vmdq))(hw,0U,(unsigned int)adapter->ring_feature[1].offset);
  
#line 3658 
  switch ((int)adapter->ring_feature[1].mask) {
    case 120: 
#line 3659 
    ;
    
#line 3660 
    gcr_ext = 1U;
    
#line 3661 
    goto ldv_58384;
    case 124: 
#line 3662 
    ;
    
#line 3663 
    gcr_ext = 2U;
    
#line 3664 
    goto ldv_58384;
    default: 
#line 3665 
    ;
    
#line 3666 
    gcr_ext = 3U;
    
#line 3667 
    goto ldv_58384;
  }
  ldv_58384: 
#line 3670 
  ;
  
#line 3670 
  ixgbe_write_reg(hw,69712U,gcr_ext);
  
#line 3674 
  (*(hw->mac.ops.set_mac_anti_spoofing))(hw,(_Bool)(adapter->num_vfs != 0U),(int)adapter->num_vfs);
  
#line 3680 
  if (hw->mac.ops.set_ethertype_anti_spoofing != (void (*)(struct ixgbe_hw *, bool , int ))0) 
    
#line 3681 
    ixgbe_write_reg(hw,20796U,2684389580U); else ;
  
#line 3687 
  i = 0;
  
#line 3687 
  goto ldv_58388;
  ldv_58387: 
#line 3688 
  ;
  
#line 3688 
  if ((unsigned int)(adapter->vfinfo + i)->spoofchk_enabled == 0U) 
#line 3689 
                                                                   ixgbe_ndo_set_vf_spoofchk(adapter->netdev,i,(_Bool)0); else ;
  
#line 3692 
  if (hw->mac.ops.set_ethertype_anti_spoofing != (void (*)(struct ixgbe_hw *, bool , int ))0) 
    
#line 3693 
    (*(hw->mac.ops.set_ethertype_anti_spoofing))(hw,(_Bool)1,i); else ;
  
#line 3696 
  ixgbe_ndo_set_vf_rss_query_en(adapter->netdev,i,(_Bool)((bool)((int)(adapter->vfinfo + i)->rss_query_enabled) != 0));
  
#line 3687 
  i += 1;
  ldv_58388: 
#line 3688 
  ;
  
#line 3687 
  if (adapter->num_vfs > (unsigned int)i) 
#line 3689 
                                          goto ldv_58387; else 
#line 3692 
                                                               goto ldv_58389;
  ldv_58389: 
#line 3693 
  ;
  return_label: 
#line 3694 
                return;
}


#line 3701  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_set_rx_buffer_len(struct ixgbe_adapter *adapter)
{
  struct ixgbe_ring *rx_ring;
  int i;
  u32 mhadd;
  u32 hlreg0;
  
#line 3703 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 3704 
  struct net_device *netdev = adapter->netdev;
  
#line 3705 
  int max_frame = (int)(netdev->mtu + 18U);
  
#line 3712 
  if ((adapter->flags & 2097152U) != 0U && max_frame <= 3071) 
#line 3714 
                                                              max_frame = 3072; else ;
  
#line 3719 
  if (max_frame <= 1517) 
#line 3720 
                         max_frame = 1518; else ;
  
#line 3722 
  mhadd = ixgbe_read_reg(hw,17000U);
  
#line 3723 
  if (mhadd >> 16 != (unsigned int)max_frame) {
    
#line 3724 
    mhadd &= 65535U;
    
#line 3725 
    mhadd = (unsigned int)(max_frame << 16) | mhadd;
    
#line 3727 
    ixgbe_write_reg(hw,17000U,mhadd);
  }
  else ;
  
#line 3730 
  hlreg0 = ixgbe_read_reg(hw,16960U);
  
#line 3732 
  hlreg0 |= 4U;
  
#line 3733 
  ixgbe_write_reg(hw,16960U,hlreg0);
  
#line 3739 
  i = 0;
  
#line 3739 
  goto ldv_58401;
  ldv_58400: 
#line 3740 
  ;
  
#line 3740 
  rx_ring = adapter->rx_ring[i];
  
#line 3741 
  if ((adapter->flags2 & 2U) != 0U) 
#line 3742 
                                    set_bit(4L,(unsigned long volatile *)(& rx_ring->state)); else 
                                                                    
#line 3744 
                                                                    set_bit(4L,(unsigned long volatile *)(& rx_ring->state));
  
#line 3739 
  i += 1;
  ldv_58401: 
#line 3740 
  ;
  
#line 3739 
  if (adapter->num_rx_queues > i) 
#line 3741 
                                  goto ldv_58400; else 
#line 3744 
                                                       goto ldv_58402;
  ldv_58402: 
#line 3745 
  ;
  
#line 3746 
  return;
}


#line 3748  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_setup_rdrxctl(struct ixgbe_adapter *adapter)
{
  
#line 3750 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 3751 
  u32 rdrxctl = ixgbe_read_reg(hw,12032U);
  
#line 3753 
  switch ((unsigned int)hw->mac.type) {
    u32 tmp_0;
    case (unsigned int)4: 
#line 3754 
    ;
    case (unsigned int)5: 
#line 3755 
    ;
    case (unsigned int)1: 
#line 3756 
    ;
    
#line 3767 
    rdrxctl |= 32U;
    
#line 3768 
    goto ldv_58411;
    case (unsigned int)2: 
#line 3769 
    ;
    case (unsigned int)3: 
#line 3770 
    ;
    
#line 3772 
    tmp_0 = ixgbe_read_reg(hw,12328U);
    
#line 3772 
    ;
    
#line 3772 
    ixgbe_write_reg(hw,12328U,tmp_0 | 128U);
    
#line 3774 
    rdrxctl &= 4290904063U;
    
#line 3776 
    rdrxctl |= 100663296U;
    
#line 3777 
    rdrxctl |= 2U;
    
#line 3778 
    goto ldv_58411;
    default: 
#line 3779 
    ;
    
#line 3781 
    goto return_label;
  }
  ldv_58411: 
#line 3784 
  ;
  
#line 3784 
  ixgbe_write_reg(hw,12032U,rdrxctl);
  return_label: 
#line 3785 
                return;
}


#line 3793  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_configure_rx(struct ixgbe_adapter *adapter)
{
  int i;
  u32 rxctrl;
  u32 rfctl;
  
#line 3795 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 3800 
  (*(hw->mac.ops.disable_rx))(hw);
  
#line 3802 
  ixgbe_setup_psrtype(adapter);
  
#line 3803 
  ixgbe_setup_rdrxctl(adapter);
  
#line 3806 
  rfctl = ixgbe_read_reg(hw,20488U);
  
#line 3807 
  rfctl &= 4294967263U;
  
#line 3808 
  if ((adapter->flags2 & 2U) == 0U) 
#line 3809 
                                    rfctl |= 32U; else ;
  
#line 3810 
  ixgbe_write_reg(hw,20488U,rfctl);
  
#line 3813 
  ixgbe_setup_mrqc(adapter);
  
#line 3816 
  ixgbe_set_rx_buffer_len(adapter);
  
#line 3822 
  i = 0;
  
#line 3822 
  goto ldv_58423;
  ldv_58422: 
#line 3823 
  ;
  
#line 3823 
  ixgbe_configure_rx_ring(adapter,adapter->rx_ring[i]);
  
#line 3822 
  i += 1;
  ldv_58423: 
#line 3823 
  ;
  
#line 3822 
  if (adapter->num_rx_queues > i) 
#line 3824 
                                  goto ldv_58422; else 
#line 3827 
                                                       goto ldv_58424;
  ldv_58424: 
#line 3828 
  ;
  
#line 3825 
  rxctrl = ixgbe_read_reg(hw,12288U);
  
#line 3827 
  if (hw->mac.type == (unsigned int)ixgbe_mac_82598EB) 
#line 3828 
                                                       rxctrl |= 2U; else ;
  
#line 3831 
  rxctrl |= 1U;
  
#line 3832 
  (*(hw->mac.ops.enable_rx_dma))(hw,rxctrl);
  
#line 3833 
  return;
}


#line 3835  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static int ixgbe_vlan_rx_add_vid(struct net_device *netdev, __be16 proto, u16 vid)
{
  int __retres;
  
#line 3838 
  struct ixgbe_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 3839 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 3842 
  (*(hw->mac.ops.set_vfta))(& adapter->hw,(unsigned int)vid,(unsigned int)adapter->ring_feature[1].offset,(_Bool)1);
  
#line 3843 
  set_bit((long)vid,(unsigned long volatile *)(& adapter->active_vlans));
  
#line 3845 
  __retres = 0;
  
#line 3845 
  return __retres;
}


#line 3848  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static int ixgbe_vlan_rx_kill_vid(struct net_device *netdev, __be16 proto, u16 vid)
{
  int __retres;
  
#line 3851 
  struct ixgbe_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 3852 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 3855 
  (*(hw->mac.ops.set_vfta))(& adapter->hw,(unsigned int)vid,(unsigned int)adapter->ring_feature[1].offset,(_Bool)0);
  
#line 3856 
  set_bit((long)vid,(unsigned long volatile *)(& adapter->active_vlans));
  
#line 3858 
  __retres = 0;
  
#line 3858 
  return __retres;
}


#line 3865  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_vlan_strip_disable(struct ixgbe_adapter *adapter)
{
  u32 vlnctrl;
  int i;
  int j;
  
#line 3867 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 3871 
  switch ((unsigned int)hw->mac.type) {
    case (unsigned int)1: 
#line 3872 
    ;
    
#line 3873 
    vlnctrl = ixgbe_read_reg(hw,20616U);
    
#line 3874 
    vlnctrl &= 2147483647U;
    
#line 3875 
    ixgbe_write_reg(hw,20616U,vlnctrl);
    
#line 3876 
    goto ldv_58447;
    case (unsigned int)2: 
#line 3877 
    ;
    case (unsigned int)3: 
#line 3878 
    ;
    case (unsigned int)4: 
#line 3879 
    ;
    case (unsigned int)5: 
#line 3880 
    ;
    
#line 3881 
    i = 0;
    
#line 3881 
    goto ldv_58455;
    ldv_58454: 
#line 3882 
    ;
    {
      int tmp;
      int tmp_0;
      
#line 3882 
      struct ixgbe_ring *ring = adapter->rx_ring[i];
      
#line 3884 
      if (ring->l2_accel_priv != (struct ixgbe_fwd_adapter *)0) 
#line 3885 
                                                                goto ldv_58453; else ;
      
#line 3886 
      j = (int)ring->reg_idx;
      
#line 3887 
      if (j <= 63) 
#line 3887 
                   tmp = j * 64 + 4136; else 
#line 3887 
                                             tmp = (j + -64) * 64 + 53288;
      
#line 3887 
      ;
      
#line 3887 
      vlnctrl = ixgbe_read_reg(hw,(unsigned int)tmp);
      
#line 3888 
      vlnctrl &= 3221225471U;
      
#line 3889 
      ;
      
#line 3889 
      if (j <= 63) 
#line 3889 
                   tmp_0 = j * 64 + 4136; else 
#line 3889 
                                               tmp_0 = (j + -64) * 64 + 53288;
      
#line 3889 
      ;
      
#line 3889 
      ixgbe_write_reg(hw,(unsigned int)tmp_0,vlnctrl);
    }
    ldv_58453: 
#line 3891 
    ;
    
#line 3881 
    i += 1;
    ldv_58455: 
#line 3882 
    ;
    
#line 3881 
    if (adapter->num_rx_queues > i) 
#line 3883 
                                    goto ldv_58454; else 
#line 3886 
                                                         goto ldv_58456;
    ldv_58456: 
#line 3887 
    ;
    
#line 3891 
    goto ldv_58447;
    default: 
#line 3892 
    ;
    
#line 3893 
    goto ldv_58447;
  }
  ldv_58447: 
#line 3895 
  ;
  
#line 3896 
  return;
}


#line 3901  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_vlan_strip_enable(struct ixgbe_adapter *adapter)
{
  u32 vlnctrl;
  int i;
  int j;
  
#line 3903 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 3907 
  switch ((unsigned int)hw->mac.type) {
    case (unsigned int)1: 
#line 3908 
    ;
    
#line 3909 
    vlnctrl = ixgbe_read_reg(hw,20616U);
    
#line 3910 
    vlnctrl |= 2147483648U;
    
#line 3911 
    ixgbe_write_reg(hw,20616U,vlnctrl);
    
#line 3912 
    goto ldv_58466;
    case (unsigned int)2: 
#line 3913 
    ;
    case (unsigned int)3: 
#line 3914 
    ;
    case (unsigned int)4: 
#line 3915 
    ;
    case (unsigned int)5: 
#line 3916 
    ;
    
#line 3917 
    i = 0;
    
#line 3917 
    goto ldv_58474;
    ldv_58473: 
#line 3918 
    ;
    {
      int tmp;
      int tmp_0;
      
#line 3918 
      struct ixgbe_ring *ring = adapter->rx_ring[i];
      
#line 3920 
      if (ring->l2_accel_priv != (struct ixgbe_fwd_adapter *)0) 
#line 3921 
                                                                goto ldv_58472; else ;
      
#line 3922 
      j = (int)ring->reg_idx;
      
#line 3923 
      if (j <= 63) 
#line 3923 
                   tmp = j * 64 + 4136; else 
#line 3923 
                                             tmp = (j + -64) * 64 + 53288;
      
#line 3923 
      ;
      
#line 3923 
      vlnctrl = ixgbe_read_reg(hw,(unsigned int)tmp);
      
#line 3924 
      vlnctrl |= 1073741824U;
      
#line 3925 
      ;
      
#line 3925 
      if (j <= 63) 
#line 3925 
                   tmp_0 = j * 64 + 4136; else 
#line 3925 
                                               tmp_0 = (j + -64) * 64 + 53288;
      
#line 3925 
      ;
      
#line 3925 
      ixgbe_write_reg(hw,(unsigned int)tmp_0,vlnctrl);
    }
    ldv_58472: 
#line 3927 
    ;
    
#line 3917 
    i += 1;
    ldv_58474: 
#line 3918 
    ;
    
#line 3917 
    if (adapter->num_rx_queues > i) 
#line 3919 
                                    goto ldv_58473; else 
#line 3922 
                                                         goto ldv_58475;
    ldv_58475: 
#line 3923 
    ;
    
#line 3927 
    goto ldv_58466;
    default: 
#line 3928 
    ;
    
#line 3929 
    goto ldv_58466;
  }
  ldv_58466: 
#line 3931 
  ;
  
#line 3932 
  return;
}


#line 3933  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_restore_vlan(struct ixgbe_adapter *adapter)
{
  u16 vid;
  unsigned long tmp;
  unsigned long tmp_0;
  
#line 3937 
  ixgbe_vlan_rx_add_vid(adapter->netdev,(unsigned short)129,(unsigned short)0);
  
#line 3939 
  tmp = find_first_bit((unsigned long const *)(& adapter->active_vlans),4096UL);
  
#line 3939 
  vid = (unsigned short)tmp;
  
#line 3939 
  goto ldv_58482;
  ldv_58481: 
#line 3940 
  ;
  
#line 3940 
  ixgbe_vlan_rx_add_vid(adapter->netdev,(unsigned short)129,(unsigned short)((int)vid));
  
#line 3939 
  tmp_0 = find_next_bit((unsigned long const *)(& adapter->active_vlans),4096UL,(unsigned long)((int)vid + 1));
  
#line 3939 
  vid = (unsigned short)tmp_0;
  ldv_58482: 
#line 3940 
  ;
  
#line 3939 
  if ((unsigned int)vid <= 4095U) 
#line 3941 
                                  goto ldv_58481; else 
#line 3944 
                                                       goto ldv_58483;
  ldv_58483: 
#line 3945 
  ;
  
#line 3946 
  return;
}


#line 3952  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static int ixgbe_write_mc_addr_list(struct net_device *netdev)
{
  int __retres;
  int tmp_1;
  bool tmp_0;
  
#line 3954 
  struct ixgbe_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 3955 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 3957 
  tmp_0 = netif_running((struct net_device const *)netdev);
  
#line 3957 
  if (tmp_0) 
#line 3957 
             tmp_1 = 0; else 
#line 3957 
                             tmp_1 = 1;
  
#line 3957 
  if (tmp_1) {
    
#line 3958 
    __retres = 0;
    
#line 3958 
    goto return_label;
  }
  else ;
  
#line 3960 
  if (hw->mac.ops.update_mc_addr_list != (s32 (*)(struct ixgbe_hw *, struct net_device *))0) 
    
#line 3961 
    (*(hw->mac.ops.update_mc_addr_list))(hw,netdev);
  else {
    
#line 3963 
    __retres = -12;
    
#line 3963 
    goto return_label;
  }
  
#line 3966 
  ixgbe_restore_vf_multicasts(adapter);
  
#line 3969 
  __retres = netdev->mc.count;
  return_label: 
#line 3969 
                return __retres;
}


#line 3973  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
void ixgbe_full_sync_mac_table(struct ixgbe_adapter *adapter)
{
  int i;
  
#line 3975 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 3977 
  i = 0;
  
#line 3977 
  goto ldv_58495;
  ldv_58494: 
#line 3978 
  ;
  
#line 3978 
  if (((int)(adapter->mac_table + i)->state & 4) != 0) 
#line 3979 
                                                       (*(hw->mac.ops.set_rar))(hw,(unsigned int)i,(u8 *)(& (adapter->mac_table + i)->addr),(unsigned int)(adapter->mac_table + i)->queue,2147483648U); else 
                                                                    
#line 3983 
                                                                    (*(hw->mac.ops.clear_rar))(hw,(unsigned int)i);
  
#line 3985 
  (adapter->mac_table + i)->state = (unsigned short)((unsigned int)(adapter->mac_table + i)->state & 65533U);
  
#line 3977 
  i += 1;
  ldv_58495: 
#line 3978 
  ;
  
#line 3977 
  if (hw->mac.num_rar_entries > (unsigned int)i) 
#line 3979 
                                                 goto ldv_58494; else 
                                                                   
#line 3982 
                                                                   goto ldv_58496;
  ldv_58496: 
#line 3983 
  ;
  
#line 3984 
  return;
}


#line 3990  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_sync_mac_table(struct ixgbe_adapter *adapter)
{
  int i;
  
#line 3992 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 3994 
  i = 0;
  
#line 3994 
  goto ldv_58503;
  ldv_58502: 
#line 3995 
  ;
  
#line 3995 
  if (((int)(adapter->mac_table + i)->state & 2) != 0) {
    
#line 3996 
    if (((int)(adapter->mac_table + i)->state & 4) != 0) 
#line 3998 
                                                         (*(hw->mac.ops.set_rar))(hw,(unsigned int)i,(u8 *)(& (adapter->mac_table + i)->addr),(unsigned int)(adapter->mac_table + i)->queue,2147483648U); else 
                                                                    
#line 4003 
                                                                    (*(hw->mac.ops.clear_rar))(hw,(unsigned int)i);
    
#line 4005 
    (adapter->mac_table + i)->state = (unsigned short)((unsigned int)(adapter->mac_table + i)->state & 65533U);
  }
  else ;
  
#line 3994 
  i += 1;
  ldv_58503: 
#line 3995 
  ;
  
#line 3994 
  if (hw->mac.num_rar_entries > (unsigned int)i) 
#line 3996 
                                                 goto ldv_58502; else 
                                                                   
#line 3999 
                                                                   goto ldv_58504;
  ldv_58504: 
#line 4000 
  ;
  
#line 4001 
  return;
}


#line 4011  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_flush_sw_mac_table(struct ixgbe_adapter *adapter)
{
  int i;
  
#line 4014 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 4016 
  i = 0;
  
#line 4016 
  goto ldv_58511;
  ldv_58510: 
#line 4017 
  ;
  
#line 4017 
  (adapter->mac_table + i)->state = (unsigned short)((unsigned int)(adapter->mac_table + i)->state | 2U);
  
#line 4018 
  (adapter->mac_table + i)->state = (unsigned short)((unsigned int)(adapter->mac_table + i)->state & 65531U);
  
#line 4019 
  eth_zero_addr((u8 *)(& (adapter->mac_table + i)->addr));
  
#line 4020 
  (adapter->mac_table + i)->queue = (unsigned short)0U;
  
#line 4016 
  i += 1;
  ldv_58511: 
#line 4017 
  ;
  
#line 4016 
  if (hw->mac.num_rar_entries > (unsigned int)i) 
#line 4018 
                                                 goto ldv_58510; else 
                                                                   
#line 4021 
                                                                   goto ldv_58512;
  ldv_58512: 
#line 4022 
  ;
  
#line 4022 
  ixgbe_sync_mac_table(adapter);
  
#line 4023 
  return;
}


#line 4025  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static int ixgbe_available_rars(struct ixgbe_adapter *adapter)
{
  int i;
  
#line 4027 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 4028 
  int count = 0;
  
#line 4030 
  i = 0;
  
#line 4030 
  goto ldv_58520;
  ldv_58519: 
#line 4031 
  ;
  
#line 4031 
  if ((unsigned int)(adapter->mac_table + i)->state == 0U) 
#line 4032 
                                                           count += 1; else ;
  
#line 4030 
  i += 1;
  ldv_58520: 
#line 4031 
  ;
  
#line 4030 
  if (hw->mac.num_rar_entries > (unsigned int)i) 
#line 4032 
                                                 goto ldv_58519; else 
                                                                   
#line 4035 
                                                                   goto ldv_58521;
  ldv_58521: 
#line 4036 
  ;
  
#line 4034 
  return count;
}


#line 4038  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_mac_set_default_filter(struct ixgbe_adapter *adapter, u8 *addr)
{
  
#line 4041 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 4043 
  memcpy((void *)(& (adapter->mac_table)->addr),(void const *)addr,6UL);
  
#line 4044 
  (adapter->mac_table)->queue = adapter->ring_feature[1].offset;
  
#line 4045 
  (adapter->mac_table)->state = (unsigned short)5U;
  
#line 4047 
  (*(hw->mac.ops.set_rar))(hw,0U,(u8 *)(& (adapter->mac_table)->addr),(unsigned int)(adapter->mac_table)->queue,2147483648U);
  
#line 4049 
  return;
}


#line 4052  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
int ixgbe_add_mac_filter(struct ixgbe_adapter *adapter, u8 *addr, u16 queue)
{
  int __retres;
  int i;
  bool tmp;
  
#line 4054 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 4057 
  tmp = is_zero_ether_addr((u8 const *)addr);
  
#line 4057 
  if ((int)tmp != 0) {
    
#line 4058 
    __retres = -22;
    
#line 4058 
    goto return_label;
  }
  else ;
  
#line 4060 
  i = 0;
  
#line 4060 
  goto ldv_58536;
  ldv_58535: 
#line 4061 
  ;
  
#line 4061 
  if (((int)(adapter->mac_table + i)->state & 4) != 0) 
#line 4062 
                                                       goto ldv_58534; else ;
  
#line 4063 
  (adapter->mac_table + i)->state = (unsigned short)((unsigned int)(adapter->mac_table + i)->state | 6U);
  
#line 4065 
  ether_addr_copy((u8 *)(& (adapter->mac_table + i)->addr),(u8 const *)addr);
  
#line 4066 
  (adapter->mac_table + i)->queue = queue;
  
#line 4067 
  ixgbe_sync_mac_table(adapter);
  
#line 4068 
  __retres = i;
  
#line 4068 
  goto return_label;
  ldv_58534: 
#line 4069 
  ;
  
#line 4060 
  i += 1;
  ldv_58536: 
#line 4061 
  ;
  
#line 4060 
  if (hw->mac.num_rar_entries > (unsigned int)i) 
#line 4062 
                                                 goto ldv_58535; else 
                                                                   
#line 4065 
                                                                   goto ldv_58537;
  ldv_58537: 
#line 4066 
  ;
  
#line 4070 
  __retres = -12;
  return_label: 
#line 4070 
                return __retres;
}


#line 4073  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
int ixgbe_del_mac_filter(struct ixgbe_adapter *adapter, u8 *addr, u16 queue)
{
  int __retres;
  int i;
  bool tmp;
  bool tmp_0;
  
#line 4077 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 4079 
  tmp = is_zero_ether_addr((u8 const *)addr);
  
#line 4079 
  if ((int)tmp != 0) {
    
#line 4080 
    __retres = -22;
    
#line 4080 
    goto return_label;
  }
  else ;
  
#line 4082 
  i = 0;
  
#line 4082 
  goto ldv_58546;
  ldv_58545: 
#line 4083 
  ;
  
#line 4083 
  tmp_0 = ether_addr_equal((u8 const *)addr,(u8 const *)(& (adapter->mac_table + i)->addr));
  
#line 4083 
  if ((int)tmp_0 != 0) {
    
#line 4083 
    if ((int)(adapter->mac_table + i)->queue == (int)queue) {
      
#line 4085 
      (adapter->mac_table + i)->state = (unsigned short)((unsigned int)(adapter->mac_table + i)->state | 2U);
      
#line 4086 
      (adapter->mac_table + i)->state = (unsigned short)((unsigned int)(adapter->mac_table + i)->state & 65531U);
      
#line 4087 
      eth_zero_addr((u8 *)(& (adapter->mac_table + i)->addr));
      
#line 4088 
      (adapter->mac_table + i)->queue = (unsigned short)0U;
      
#line 4089 
      ixgbe_sync_mac_table(adapter);
      
#line 4090 
      __retres = 0;
      
#line 4090 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 4082 
  i += 1;
  ldv_58546: 
#line 4083 
  ;
  
#line 4082 
  if (hw->mac.num_rar_entries > (unsigned int)i) 
#line 4084 
                                                 goto ldv_58545; else 
                                                                   
#line 4087 
                                                                   goto ldv_58547;
  ldv_58547: 
#line 4088 
  ;
  
#line 4093 
  __retres = -12;
  return_label: 
#line 4093 
                return __retres;
}


#line 4104  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static int ixgbe_write_uc_addr_list(struct net_device *netdev, int vfn)
{
  int __retres;
  int tmp_0;
  
#line 4106 
  struct ixgbe_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 4107 
  int count = 0;
  
#line 4110 
  tmp_0 = ixgbe_available_rars(adapter);
  
#line 4110 
  ;
  
#line 4110 
  if (netdev->uc.count > tmp_0) {
    
#line 4111 
    __retres = -12;
    
#line 4111 
    goto return_label;
  }
  else ;
  
#line 4113 
  if (netdev->uc.count != 0) {
    struct netdev_hw_addr *ha;
    struct netdev_hw_addr *tmp_1;
    struct netdev_hw_addr *tmp_2;
    {
      
#line 4115 
      struct list_head const *__mptr = (struct list_head const *)netdev->uc.list.next;
      
#line 4115 
      tmp_1 = (struct netdev_hw_addr *)__mptr;
    }
    
#line 4115 
    ha = tmp_1;
    
#line 4115 
    goto ldv_58560;
    ldv_58559: 
#line 4116 
    ;
    
#line 4116 
    ixgbe_del_mac_filter(adapter,(u8 *)(& ha->addr),(unsigned short)((int)((unsigned short)vfn)));
    
#line 4117 
    ixgbe_add_mac_filter(adapter,(u8 *)(& ha->addr),(unsigned short)((int)((unsigned short)vfn)));
    
#line 4118 
    count += 1;
    {
      
#line 4115 
      struct list_head const *__mptr_0 = (struct list_head const *)ha->list.next;
      
#line 4115 
      tmp_2 = (struct netdev_hw_addr *)__mptr_0;
    }
    
#line 4115 
    ha = tmp_2;
    ldv_58560: 
#line 4117 
    ;
    
#line 4115 
    if (& ha->list != & netdev->uc.list) 
#line 4117 
                                         goto ldv_58559; else 
#line 4120 
                                                              goto ldv_58561;
    ldv_58561: 
#line 4121 
    ;
  }
  else ;
  
#line 4121 
  __retres = count;
  return_label: 
#line 4121 
                return __retres;
}


#line 4133  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
void ixgbe_set_rx_mode(struct net_device *netdev)
{
  u32 fctrl;
  u32 vlnctrl;
  int count;
  
#line 4135 
  struct ixgbe_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 4136 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 4137 
  u32 vmolr = 150994944U;
  
#line 4142 
  fctrl = ixgbe_read_reg(hw,20608U);
  
#line 4143 
  vlnctrl = ixgbe_read_reg(hw,20616U);
  
#line 4146 
  fctrl &= 4294967293U;
  
#line 4147 
  fctrl |= 1024U;
  
#line 4148 
  fctrl |= 8192U;
  
#line 4149 
  fctrl |= 4096U;
  
#line 4152 
  fctrl &= 4294966527U;
  
#line 4153 
  vlnctrl &= 2684354559U;
  
#line 4154 
  if ((netdev->flags & 256U) != 0U) {
    
#line 4155 
    hw->addr_ctrl.user_set_promisc = (_Bool)1;
    
#line 4156 
    fctrl |= 768U;
    
#line 4157 
    vmolr |= 268435456U;
    
#line 4162 
    if ((adapter->flags & 8404992U) != 0U) 
#line 4164 
                                           vlnctrl |= 1610612736U; else ;
  }
  else {
    
#line 4166 
    if ((netdev->flags & 512U) != 0U) {
      
#line 4167 
      fctrl |= 256U;
      
#line 4168 
      vmolr |= 268435456U;
    }
    else ;
    
#line 4170 
    vlnctrl |= 1073741824U;
    
#line 4171 
    hw->addr_ctrl.user_set_promisc = (_Bool)0;
  }
  
#line 4179 
  count = ixgbe_write_uc_addr_list(netdev,(int)adapter->ring_feature[1].offset);
  
#line 4180 
  if (count < 0) {
    
#line 4181 
    fctrl |= 512U;
    
#line 4182 
    vmolr |= 67108864U;
  }
  else ;
  
#line 4189 
  count = ixgbe_write_mc_addr_list(netdev);
  
#line 4190 
  if (count < 0) {
    
#line 4191 
    fctrl |= 256U;
    
#line 4192 
    vmolr |= 268435456U;
  }
  else 
    
#line 4193 
    if (count != 0) 
#line 4194 
                    vmolr |= 33554432U; else ;
  
#line 4197 
  if (hw->mac.type != (unsigned int)ixgbe_mac_82598EB) {
    u32 tmp_0;
    
#line 4198 
    tmp_0 = ixgbe_read_reg(hw,(unsigned int)(((int)adapter->ring_feature[1].offset + 15360) * 4));
    
#line 4200 
    vmolr = (tmp_0 & 3925868543U) | vmolr;
    
#line 4201 
    ixgbe_write_reg(hw,(unsigned int)(((int)adapter->ring_feature[1].offset + 15360) * 4),vmolr);
  }
  else ;
  
#line 4205 
  if (((adapter->netdev)->features & 274877906944ULL) != 0ULL) {
    
#line 4208 
    fctrl |= 5122U;
    
#line 4212 
    fctrl &= 4294959103U;
  }
  else ;
  
#line 4216 
  ixgbe_write_reg(hw,20616U,vlnctrl);
  
#line 4217 
  ixgbe_write_reg(hw,20608U,fctrl);
  
#line 4219 
  if ((netdev->features & 256ULL) != 0ULL) 
#line 4220 
                                           ixgbe_vlan_strip_enable(adapter); else 
                                                                    
#line 4222 
                                                                    ixgbe_vlan_strip_disable(adapter);
  
#line 4223 
  return;
}


#line 4225  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_napi_enable_all(struct ixgbe_adapter *adapter)
{
  int q_idx;
  
#line 4229 
  q_idx = 0;
  
#line 4229 
  goto ldv_58576;
  ldv_58575: 
#line 4230 
  ;
  
#line 4230 
  ixgbe_qv_init_lock(adapter->q_vector[q_idx]);
  
#line 4231 
  napi_enable(& (adapter->q_vector[q_idx])->napi);
  
#line 4229 
  q_idx += 1;
  ldv_58576: 
#line 4230 
  ;
  
#line 4229 
  if (adapter->num_q_vectors > q_idx) 
#line 4231 
                                      goto ldv_58575; else 
#line 4234 
                                                           goto ldv_58577;
  ldv_58577: 
#line 4235 
  ;
  
#line 4236 
  return;
}


#line 4235  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_napi_disable_all(struct ixgbe_adapter *adapter)
{
  int q_idx;
  int tmp_0;
  bool tmp;
  
#line 4239 
  q_idx = 0;
  
#line 4239 
  goto ldv_58586;
  ldv_58585: 
#line 4240 
  ;
  
#line 4240 
  napi_disable(& (adapter->q_vector[q_idx])->napi);
  
#line 4241 
  goto ldv_58583;
  ldv_58582: 
#line 4242 
  ;
  
#line 4242 
  printk("\001",q_idx);
  
#line 4243 
  usleep_range(1000UL,20000UL);
  ldv_58583: 
#line 4244 
  ;
  
#line 4241 
  tmp = ixgbe_qv_disable(adapter->q_vector[q_idx]);
  
#line 4241 
  if (tmp) 
#line 4241 
           tmp_0 = 0; else 
#line 4241 
                           tmp_0 = 1;
  
#line 4241 
  if (tmp_0) 
#line 4243 
             goto ldv_58582; else 
#line 4246 
                                  goto ldv_58584;
  ldv_58584: 
#line 4247 
  ;
  
#line 4239 
  q_idx += 1;
  ldv_58586: 
#line 4240 
  ;
  
#line 4239 
  if (adapter->num_q_vectors > q_idx) 
#line 4241 
                                      goto ldv_58585; else 
#line 4244 
                                                           goto ldv_58587;
  ldv_58587: 
#line 4245 
  ;
  
#line 4246 
  return;
}


#line 4257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_configure_dcb(struct ixgbe_adapter *adapter)
{
  
#line 4259 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 4260 
  int max_frame = (int)((adapter->netdev)->mtu + 18U);
  
#line 4262 
  if ((adapter->flags & 4096U) == 0U) {
    
#line 4263 
    if (hw->mac.type == (unsigned int)ixgbe_mac_82598EB) 
#line 4264 
                                                         netif_set_gso_max_size(adapter->netdev,65536U); else ;
    
#line 4265 
    goto return_label;
  }
  else ;
  
#line 4268 
  if (hw->mac.type == (unsigned int)ixgbe_mac_82598EB) 
#line 4269 
                                                       netif_set_gso_max_size(adapter->netdev,32768U); else ;
  
#line 4272 
  if (((adapter->netdev)->features & 2147483648ULL) != 0ULL) {
    int tmp_0;
    {
      int tmp;
      
#line 4273 
      int _max1 = max_frame;
      
#line 4273 
      int _max2 = 3072;
      
#line 4273 
      if (_max1 > _max2) 
#line 4273 
                         tmp = _max1; else 
#line 4273 
                                           tmp = _max2;
      
#line 4273 
      tmp_0 = tmp;
    }
    
#line 4273 
    max_frame = tmp_0;
  }
  else ;
  
#line 4277 
  if (((int)adapter->dcbx_cap & 4) != 0) {
    
#line 4278 
    ixgbe_dcb_calculate_tc_credits(hw,& adapter->dcb_cfg,max_frame,(unsigned char)0);
    
#line 4280 
    ixgbe_dcb_calculate_tc_credits(hw,& adapter->dcb_cfg,max_frame,(unsigned char)1);
    
#line 4282 
    ixgbe_dcb_hw_config(hw,& adapter->dcb_cfg);
  }
  else 
    
#line 4283 
    if (adapter->ixgbe_ieee_ets != (struct ieee_ets *)0 && adapter->ixgbe_ieee_pfc != (struct ieee_pfc *)0) {
      
#line 4284 
      ixgbe_dcb_hw_ets(& adapter->hw,adapter->ixgbe_ieee_ets,max_frame);
      
#line 4287 
      ixgbe_dcb_hw_pfc_config(& adapter->hw,(unsigned char)((int)(adapter->ixgbe_ieee_pfc)->pfc_en),(u8 *)(& (adapter->ixgbe_ieee_ets)->prio_tc));
    }
    else ;
  
#line 4293 
  if (hw->mac.type != (unsigned int)ixgbe_mac_82598EB) {
    
#line 4294 
    u32 msb = 0U;
    
#line 4295 
    u16 rss_i = (unsigned short)((unsigned int)adapter->ring_feature[2].indices + 65535U);
    
#line 4297 
    goto ldv_58599;
    ldv_58598: 
#line 4298 
    ;
    
#line 4298 
    msb += 1U;
    
#line 4299 
    rss_i = (unsigned short)((int)rss_i >> 1);
    ldv_58599: 
#line 4300 
    ;
    
#line 4297 
    if ((unsigned int)rss_i != 0U) 
#line 4299 
                                   goto ldv_58598; else 
#line 4302 
                                                        goto ldv_58600;
    ldv_58600: 
#line 4303 
    ;
    
#line 4303 
    ixgbe_write_reg(hw,60528U,msb * 286331153U);
  }
  else ;
  return_label: 
#line 4305 
                return;
}


#line 4317  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static int ixgbe_hpbthresh(struct ixgbe_adapter *adapter, int pb)
{
  int link;
  int tc;
  int kb;
  int marker;
  u32 dv_id;
  u32 rx_pba;
  u32 tmp_0;
  
#line 4319 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 4320 
  struct net_device *dev = adapter->netdev;
  
#line 4325 
  link = (int)(dev->mtu + 38U);
  
#line 4325 
  tc = link;
  
#line 4329 
  if ((dev->features & 2147483648ULL) != 0ULL && tc <= 3071) {
    u8 tmp;
    
#line 4331 
    tmp = ixgbe_fcoe_get_tc(adapter);
    
#line 4331 
    ;
    
#line 4331 
    if ((int)tmp == pb) 
#line 4332 
                        tc = 3072; else ;
  }
  else ;
  
#line 4336 
  switch ((unsigned int)hw->mac.type) {
    case (unsigned int)3: 
#line 4337 
    ;
    case (unsigned int)4: 
#line 4338 
    ;
    case (unsigned int)5: 
#line 4339 
    ;
    
#line 4340 
    dv_id = (unsigned int)((((link + 11713) * 288) / 25 + 1) + tc * 16);
    
#line 4341 
    goto ldv_58616;
    default: 
#line 4342 
    ;
    
#line 4343 
    dv_id = (unsigned int)((((link + 6977) * 288) / 25 + 1) + tc * 16);
    
#line 4344 
    goto ldv_58616;
  }
  ldv_58616: 
#line 4348 
  ;
  
#line 4348 
  if ((adapter->flags & 8388608U) != 0U) 
#line 4349 
                                         dv_id = (unsigned int)(tc * 8) + dv_id; else ;
  
#line 4352 
  kb = (int)((dv_id + 8191U) / 8192U);
  
#line 4353 
  tmp_0 = ixgbe_read_reg(hw,(unsigned int)((pb + 3840) * 4));
  
#line 4353 
  rx_pba = tmp_0 >> 10;
  
#line 4355 
  marker = (int)(rx_pba - (unsigned int)kb);
  
#line 4361 
  if (marker < 0) {
    
#line 4362 
    if (((int)adapter->msg_enable & 1) != 0) 
#line 4362 
                                             netdev_warn((struct net_device const *)adapter->netdev,"Packet Buffer(%i) can not provide enough",pb); else ;
    
#line 4365 
    marker = tc + 1;
  }
  else ;
  
#line 4368 
  return marker;
}


#line 4377  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static int ixgbe_lpbthresh(struct ixgbe_adapter *adapter, int pb)
{
  int __retres;
  int tc;
  u32 dv_id;
  
#line 4379 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 4380 
  struct net_device *dev = adapter->netdev;
  
#line 4385 
  tc = (int)(dev->mtu + 18U);
  
#line 4389 
  if ((dev->features & 2147483648ULL) != 0ULL && tc <= 3071) {
    int tmp;
    
#line 4390 
    tmp = netdev_get_prio_tc_map((struct net_device const *)dev,(unsigned int)adapter->fcoe.up);
    
#line 4390 
    ;
    
#line 4390 
    if (tmp == pb) 
#line 4392 
                   tc = 3072; else ;
  }
  else ;
  
#line 4396 
  switch ((unsigned int)hw->mac.type) {
    case (unsigned int)3: 
#line 4397 
    ;
    case (unsigned int)4: 
#line 4398 
    ;
    case (unsigned int)5: 
#line 4399 
    ;
    
#line 4400 
    dv_id = (unsigned int)((tc + 900) * 16 + 1);
    
#line 4401 
    goto ldv_58629;
    default: 
#line 4402 
    ;
    
#line 4403 
    dv_id = (unsigned int)(((tc + 900) * 16 + 1) * 2);
    
#line 4404 
    goto ldv_58629;
  }
  ldv_58629: 
#line 4408 
  ;
  
#line 4408 
  __retres = (int)((dv_id + 8191U) / 8192U);
  
#line 4408 
  return __retres;
}


#line 4414  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_pbthresh_setup(struct ixgbe_adapter *adapter)
{
  int i;
  int tmp_0;
  int tmp_1;
  
#line 4416 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 4417 
  int num_tc = netdev_get_num_tc(adapter->netdev);
  
#line 4420 
  if (num_tc == 0) 
#line 4421 
                   num_tc = 1; else ;
  
#line 4423 
  i = 0;
  
#line 4423 
  goto ldv_58638;
  ldv_58637: 
#line 4424 
  ;
  
#line 4424 
  tmp_0 = ixgbe_hpbthresh(adapter,i);
  
#line 4424 
  hw->fc.high_water[i] = (unsigned int)tmp_0;
  
#line 4425 
  tmp_1 = ixgbe_lpbthresh(adapter,i);
  
#line 4425 
  hw->fc.low_water[i] = (unsigned int)tmp_1;
  
#line 4428 
  if (hw->fc.low_water[i] > hw->fc.high_water[i]) 
#line 4429 
                                                  hw->fc.low_water[i] = 0U; else ;
  
#line 4423 
  i += 1;
  ldv_58638: 
#line 4424 
  ;
  
#line 4423 
  if (i < num_tc) 
#line 4425 
                  goto ldv_58637; else 
#line 4428 
                                       goto ldv_58639;
  ldv_58639: 
#line 4429 
  ;
  
#line 4432 
  goto ldv_58641;
  ldv_58640: 
#line 4433 
  ;
  
#line 4433 
  hw->fc.high_water[i] = 0U;
  
#line 4432 
  i += 1;
  ldv_58641: 
#line 4433 
  ;
  
#line 4432 
  if (i <= 7) 
#line 4434 
              goto ldv_58640; else 
#line 4437 
                                   goto ldv_58642;
  ldv_58642: 
#line 4438 
  ;
  
#line 4439 
  return;
}


#line 4436  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_configure_pb(struct ixgbe_adapter *adapter)
{
  int hdrm;
  int tmp;
  
#line 4438 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 4440 
  tmp = netdev_get_num_tc(adapter->netdev);
  
#line 4440 
  u8 tc = (unsigned char)tmp;
  
#line 4442 
  if ((adapter->flags & 262144U) != 0U || (adapter->flags & 524288U) != 0U) 
    
#line 4444 
    hdrm = 32 << adapter->fdir_pballoc; else 
#line 4446 
                                             hdrm = 0;
  
#line 4448 
  (*(hw->mac.ops.set_rxpba))(hw,(int)tc,(unsigned int)hdrm,0);
  
#line 4449 
  ixgbe_pbthresh_setup(adapter);
  
#line 4450 
  return;
}


#line 4452  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_fdir_filter_restore(struct ixgbe_adapter *adapter)
{
  struct hlist_node *node2;
  struct ixgbe_fdir_filter *filter;
  int tmp;
  struct ixgbe_fdir_filter *tmp_2;
  unsigned int tmp_3;
  struct ixgbe_fdir_filter *tmp_6;
  
#line 4454 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 4458 
  ldv_spin_lock_82(& adapter->fdir_perfect_lock);
  
#line 4460 
  tmp = hlist_empty((struct hlist_head const *)(& adapter->fdir_filter_list));
  
#line 4460 
  if (tmp == 0) 
#line 4461 
                ixgbe_fdir_set_input_mask_82599(hw,& adapter->fdir_mask); else ;
  {
    struct ixgbe_fdir_filter *tmp_1;
    
#line 4463 
    struct hlist_node *____ptr = adapter->fdir_filter_list.first;
    
#line 4463 
    if (____ptr != (struct hlist_node *)0) {
      struct ixgbe_fdir_filter *tmp_0;
      {
        
#line 4463 
        struct hlist_node const *__mptr = (struct hlist_node const *)____ptr;
        
#line 4463 
        tmp_0 = (struct ixgbe_fdir_filter *)__mptr;
      }
      
#line 4463 
      tmp_1 = tmp_0;
    }
    else 
#line 4463 
         tmp_1 = (struct ixgbe_fdir_filter *)0;
    
#line 4463 
    tmp_2 = tmp_1;
  }
  
#line 4463 
  filter = tmp_2;
  
#line 4463 
  goto ldv_58665;
  ldv_58664: 
#line 4464 
  ;
  
#line 4467 
  if ((unsigned int)filter->action != 127U) 
#line 4467 
                                            tmp_3 = (unsigned int)(adapter->rx_ring[(int)filter->action])->reg_idx; else 
                                                                    
#line 4467 
                                                                    tmp_3 = 127U;
  
#line 4465 
  ;
  
#line 4465 
  ;
  
#line 4465 
  ;
  
#line 4465 
  ixgbe_fdir_write_perfect_filter_82599(hw,& filter->filter,(unsigned short)((int)filter->sw_idx),(unsigned char)((int)tmp_3));
  {
    struct ixgbe_fdir_filter *tmp_5;
    
#line 4463 
    struct hlist_node *____ptr_0 = node2;
    
#line 4463 
    if (____ptr_0 != (struct hlist_node *)0) {
      struct ixgbe_fdir_filter *tmp_4;
      {
        
#line 4463 
        struct hlist_node const *__mptr_0 = (struct hlist_node const *)____ptr_0;
        
#line 4463 
        tmp_4 = (struct ixgbe_fdir_filter *)__mptr_0;
      }
      
#line 4463 
      tmp_5 = tmp_4;
    }
    else 
#line 4463 
         tmp_5 = (struct ixgbe_fdir_filter *)0;
    
#line 4463 
    tmp_6 = tmp_5;
  }
  
#line 4463 
  filter = tmp_6;
  ldv_58665: 
#line 4465 
  ;
  
#line 4463 
  if (filter != (struct ixgbe_fdir_filter *)0) {
    
#line 4463 
    node2 = filter->fdir_node.next;
    
#line 4463 
    if (1 != 0) 
#line 4465 
                goto ldv_58664; else 
#line 4468 
                                     goto ldv_58666;
  }
  else 
#line 4468 
       goto ldv_58666;
  ldv_58666: 
#line 4469 
  ;
  
#line 4473 
  ldv_spin_unlock_83(& adapter->fdir_perfect_lock);
  
#line 4474 
  return;
}


#line 4476  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_macvlan_set_rx_mode(struct net_device *dev, unsigned int pool, struct ixgbe_adapter *adapter)
{
  u32 vmolr;
  
#line 4479 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 4483 
  vmolr = ixgbe_read_reg(hw,(pool + 15360U) * 4U);
  
#line 4484 
  vmolr |= 184549376U;
  
#line 4487 
  vmolr &= 4026531839U;
  
#line 4489 
  if ((dev->flags & 512U) != 0U) 
#line 4490 
                                 vmolr |= 268435456U;
  else {
    
#line 4492 
    vmolr |= 33554432U;
    
#line 4493 
    (*(hw->mac.ops.update_mc_addr_list))(hw,dev);
  }
  
#line 4495 
  ixgbe_write_uc_addr_list(adapter->netdev,(int)pool);
  
#line 4496 
  ixgbe_write_reg(hw,(pool + 15360U) * 4U,vmolr);
  
#line 4497 
  return;
}


#line 4499  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_fwd_psrtype(struct ixgbe_fwd_adapter *vadapter)
{
  int tmp;
  
#line 4501 
  struct ixgbe_adapter *adapter = vadapter->real_adapter;
  
#line 4502 
  int rss_i = adapter->num_rx_queues_per_pool;
  
#line 4503 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 4504 
  u16 pool = (unsigned short)vadapter->pool;
  
#line 4505 
  u32 psrtype = 4912U;
  
#line 4511 
  if (hw->mac.type == (unsigned int)ixgbe_mac_82598EB) 
#line 4512 
                                                       goto return_label; else ;
  
#line 4514 
  if (rss_i > 3) 
#line 4515 
                 psrtype |= 1073741824U;
  else 
    
#line 4516 
    if (rss_i > 1) 
#line 4517 
                   psrtype |= 536870912U; else ;
  
#line 4519 
  ;
  
#line 4519 
  if ((int)pool + (int)adapter->ring_feature[1].offset <= 15) 
#line 4519 
                                                              tmp = (((int)pool + (int)adapter->ring_feature[1].offset) + 5408) * 4; else 
                                                                    
#line 4519 
                                                                    tmp = (((int)pool + (int)adapter->ring_feature[1].offset) + 14976) * 4;
  
#line 4519 
  ;
  
#line 4519 
  ixgbe_write_reg(hw,(unsigned int)tmp,psrtype);
  return_label: 
#line 4520 
                return;
}


#line 4526  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_clean_rx_ring(struct ixgbe_ring *rx_ring)
{
  unsigned long size;
  u16 i;
  
#line 4528 
  struct device *dev = rx_ring->dev;
  
#line 4533 
  if (rx_ring->__anonCompField_ixgbe_ring_117.rx_buffer_info == (struct ixgbe_rx_buffer *)0) 
    
#line 4534 
    goto return_label; else ;
  
#line 4537 
  i = (unsigned short)0U;
  
#line 4537 
  goto ldv_58692;
  ldv_58691: 
#line 4538 
  ;
  {
    unsigned int tmp_0;
    unsigned int tmp_1;
    
#line 4538 
    struct ixgbe_rx_buffer *rx_buffer = rx_ring->__anonCompField_ixgbe_ring_117.rx_buffer_info + (int)i;
    
#line 4540 
    if (rx_buffer->skb != (struct sk_buff *)0) {
      
#line 4541 
      struct sk_buff *skb = rx_buffer->skb;
      
#line 4542 
      if ((int)((struct ixgbe_cb *)(& skb->cb))->page_released != 0) {
        unsigned int tmp;
        
#line 4545 
        tmp = ixgbe_rx_bufsz(rx_ring);
        
#line 4543 
        ;
        
#line 4543 
        ;
        
#line 4543 
        dma_unmap_page(dev,((struct ixgbe_cb *)(& skb->cb))->dma,(unsigned long)tmp,(enum dma_data_direction)DMA_FROM_DEVICE);
      }
      else ;
      
#line 4547 
      consume_skb(skb);
      
#line 4548 
      rx_buffer->skb = (struct sk_buff *)0;
    }
    else ;
    
#line 4551 
    if (rx_buffer->page == (struct page *)0) 
#line 4552 
                                             goto ldv_58690; else ;
    
#line 4555 
    tmp_0 = ixgbe_rx_pg_order(rx_ring);
    
#line 4554 
    ;
    
#line 4554 
    ;
    
#line 4554 
    dma_unmap_page(dev,rx_buffer->dma,4096UL << tmp_0,(enum dma_data_direction)DMA_FROM_DEVICE);
    
#line 4556 
    tmp_1 = ixgbe_rx_pg_order(rx_ring);
    
#line 4556 
    ;
    
#line 4556 
    __free_pages(rx_buffer->page,tmp_1);
    
#line 4558 
    rx_buffer->page = (struct page *)0;
  }
  ldv_58690: 
#line 4560 
  ;
  
#line 4537 
  i = (u16)((int)i + 1);
  ldv_58692: 
#line 4538 
  ;
  
#line 4537 
  if ((int)rx_ring->count > (int)i) 
#line 4539 
                                    goto ldv_58691; else 
#line 4542 
                                                         goto ldv_58693;
  ldv_58693: 
#line 4543 
  ;
  
#line 4561 
  size = (unsigned long)rx_ring->count * 32UL;
  
#line 4562 
  memset((void *)rx_ring->__anonCompField_ixgbe_ring_117.rx_buffer_info,0,size);
  
#line 4565 
  memset(rx_ring->desc,0,(unsigned long)rx_ring->size);
  
#line 4567 
  rx_ring->__anonCompField_ixgbe_ring_119.next_to_alloc = (unsigned short)0U;
  
#line 4568 
  rx_ring->next_to_clean = (unsigned short)0U;
  
#line 4569 
  rx_ring->next_to_use = (unsigned short)0U;
  return_label: 
#line 4570 
                return;
}


#line 4572  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_disable_fwd_ring(struct ixgbe_fwd_adapter *vadapter, struct ixgbe_ring *rx_ring)
{
  
#line 4575 
  struct ixgbe_adapter *adapter = vadapter->real_adapter;
  
#line 4576 
  int index = (int)((unsigned int)rx_ring->queue_index + vadapter->rx_base_queue);
  
#line 4579 
  ixgbe_disable_rx_queue(adapter,rx_ring);
  
#line 4580 
  usleep_range(10000UL,20000UL);
  
#line 4581 
  ixgbe_irq_disable_queues(adapter,1ULL << index);
  
#line 4582 
  ixgbe_clean_rx_ring(rx_ring);
  
#line 4583 
  rx_ring->l2_accel_priv = (struct ixgbe_fwd_adapter *)0;
  
#line 4584 
  return;
}


#line 4586  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static int ixgbe_fwd_ring_down(struct net_device *vdev, struct ixgbe_fwd_adapter *accel)
{
  int __retres;
  int i;
  
#line 4589 
  struct ixgbe_adapter *adapter = accel->real_adapter;
  
#line 4590 
  unsigned int rxbase = accel->rx_base_queue;
  
#line 4591 
  unsigned int txbase = accel->tx_base_queue;
  
#line 4594 
  netif_tx_stop_all_queues(vdev);
  
#line 4596 
  i = 0;
  
#line 4596 
  goto ldv_58709;
  ldv_58708: 
#line 4597 
  ;
  
#line 4597 
  ixgbe_disable_fwd_ring(accel,adapter->rx_ring[rxbase + (unsigned int)i]);
  
#line 4598 
  (adapter->rx_ring[rxbase + (unsigned int)i])->netdev = adapter->netdev;
  
#line 4596 
  i += 1;
  ldv_58709: 
#line 4597 
  ;
  
#line 4596 
  if (adapter->num_rx_queues_per_pool > i) 
#line 4598 
                                           goto ldv_58708; else 
#line 4601 
                                                                goto ldv_58710;
  ldv_58710: 
#line 4602 
  ;
  
#line 4601 
  i = 0;
  
#line 4601 
  goto ldv_58712;
  ldv_58711: 
#line 4602 
  ;
  
#line 4602 
  (adapter->tx_ring[txbase + (unsigned int)i])->l2_accel_priv = (struct ixgbe_fwd_adapter *)0;
  
#line 4603 
  (adapter->tx_ring[txbase + (unsigned int)i])->netdev = adapter->netdev;
  
#line 4601 
  i += 1;
  ldv_58712: 
#line 4602 
  ;
  
#line 4601 
  if (adapter->num_rx_queues_per_pool > i) 
#line 4603 
                                           goto ldv_58711; else 
#line 4606 
                                                                goto ldv_58713;
  ldv_58713: 
#line 4607 
  ;
  
#line 4607 
  __retres = 0;
  
#line 4607 
  return __retres;
}


#line 4610  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static int ixgbe_fwd_ring_up(struct net_device *vdev, struct ixgbe_fwd_adapter *accel)
{
  int __retres;
  unsigned int rxbase;
  unsigned int txbase;
  unsigned int queues;
  int i;
  int baseq;
  int tmp_1;
  unsigned int tmp_3;
  bool tmp_4;
  
#line 4613 
  struct ixgbe_adapter *adapter = accel->real_adapter;
  
#line 4615 
  int err = 0;
  
#line 4617 
  if (0 != 0) {
    int tmp;
    
#line 4617 
    tmp = constant_test_bit((long)accel->pool,(unsigned long const volatile *)(& adapter->fwd_bitmask));
    
#line 4617 
    tmp_1 = tmp == 0;
  }
  else {
    int tmp_0;
    
#line 4617 
    tmp_0 = variable_test_bit((long)accel->pool,(unsigned long const volatile *)(& adapter->fwd_bitmask));
    
#line 4617 
    tmp_1 = tmp_0 == 0;
  }
  
#line 4617 
  if (tmp_1) {
    
#line 4618 
    __retres = 0;
    
#line 4618 
    goto return_label;
  }
  else ;
  
#line 4620 
  baseq = accel->pool * adapter->num_rx_queues_per_pool;
  {
    
#line 4621 
    struct _ddebug descriptor = {.modname = "ixgbe", .function = "ixgbe_fwd_ring_up", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c", .format = "pool %i:%i queues %i:%i VSI bitmask %lx\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))4624U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 4621 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 4621 
                                                        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)vdev,"pool %i:%i queues %i:%i VSI bitmask %lx\n",accel->pool,adapter->num_rx_pools,baseq,adapter->num_rx_queues_per_pool + baseq,adapter->fwd_bitmask); else ;
  }
  
#line 4626 
  accel->netdev = vdev;
  
#line 4627 
  rxbase = (unsigned int)baseq;
  
#line 4627 
  accel->rx_base_queue = rxbase;
  
#line 4628 
  txbase = (unsigned int)baseq;
  
#line 4628 
  accel->tx_base_queue = txbase;
  
#line 4630 
  i = 0;
  
#line 4630 
  goto ldv_58728;
  ldv_58727: 
#line 4631 
  ;
  
#line 4631 
  ixgbe_disable_fwd_ring(accel,adapter->rx_ring[rxbase + (unsigned int)i]);
  
#line 4630 
  i += 1;
  ldv_58728: 
#line 4631 
  ;
  
#line 4630 
  if (adapter->num_rx_queues_per_pool > i) 
#line 4632 
                                           goto ldv_58727; else 
#line 4635 
                                                                goto ldv_58729;
  ldv_58729: 
#line 4636 
  ;
  
#line 4633 
  i = 0;
  
#line 4633 
  goto ldv_58731;
  ldv_58730: 
#line 4634 
  ;
  
#line 4634 
  (adapter->rx_ring[rxbase + (unsigned int)i])->netdev = vdev;
  
#line 4635 
  (adapter->rx_ring[rxbase + (unsigned int)i])->l2_accel_priv = accel;
  
#line 4636 
  ixgbe_configure_rx_ring(adapter,adapter->rx_ring[rxbase + (unsigned int)i]);
  
#line 4633 
  i += 1;
  ldv_58731: 
#line 4634 
  ;
  
#line 4633 
  if (adapter->num_rx_queues_per_pool > i) 
#line 4635 
                                           goto ldv_58730; else 
#line 4638 
                                                                goto ldv_58732;
  ldv_58732: 
#line 4639 
  ;
  
#line 4639 
  i = 0;
  
#line 4639 
  goto ldv_58734;
  ldv_58733: 
#line 4640 
  ;
  
#line 4640 
  (adapter->tx_ring[txbase + (unsigned int)i])->netdev = vdev;
  
#line 4641 
  (adapter->tx_ring[txbase + (unsigned int)i])->l2_accel_priv = accel;
  
#line 4639 
  i += 1;
  ldv_58734: 
#line 4640 
  ;
  
#line 4639 
  if (adapter->num_rx_queues_per_pool > i) 
#line 4641 
                                           goto ldv_58733; else 
#line 4644 
                                                                goto ldv_58735;
  ldv_58735: 
#line 4645 
  ;
  {
    unsigned int tmp_2;
    
#line 4644 
    unsigned int __min1 = (unsigned int)adapter->num_rx_queues_per_pool;
    
#line 4644 
    unsigned int __min2 = vdev->num_tx_queues;
    
#line 4644 
    if (__min1 < __min2) 
#line 4644 
                         tmp_2 = __min1; else 
#line 4644 
                                              tmp_2 = __min2;
    
#line 4644 
    tmp_3 = tmp_2;
  }
  
#line 4644 
  queues = tmp_3;
  
#line 4646 
  err = netif_set_real_num_tx_queues(vdev,queues);
  
#line 4647 
  if (err != 0) 
#line 4648 
                goto fwd_queue_err; else ;
  
#line 4650 
  err = netif_set_real_num_rx_queues(vdev,queues);
  
#line 4651 
  if (err != 0) 
#line 4652 
                goto fwd_queue_err; else ;
  
#line 4654 
  tmp_4 = is_valid_ether_addr((u8 const *)vdev->dev_addr);
  
#line 4654 
  if ((int)tmp_4 != 0) 
#line 4655 
                       ixgbe_add_mac_filter(adapter,vdev->dev_addr,(unsigned short)((int)((unsigned short)accel->pool))); else ;
  
#line 4657 
  ixgbe_fwd_psrtype(accel);
  
#line 4658 
  ixgbe_macvlan_set_rx_mode(vdev,(unsigned int)accel->pool,adapter);
  
#line 4659 
  __retres = err;
  
#line 4659 
  goto return_label;
  fwd_queue_err: 
#line 4660 
  ;
  
#line 4661 
  ixgbe_fwd_ring_down(vdev,accel);
  
#line 4662 
  __retres = err;
  return_label: 
#line 4662 
                return __retres;
}


#line 4665  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_configure_dfwd(struct ixgbe_adapter *adapter)
{
  struct net_device *upper;
  struct list_head *iter;
  int err;
  bool tmp_0;
  
#line 4671 
  iter = & (adapter->netdev)->all_adj_list.upper;
  
#line 4671 
  upper = netdev_all_upper_get_next_dev_rcu(adapter->netdev,& iter);
  
#line 4671 
  goto ldv_58750;
  ldv_58749: 
#line 4672 
  ;
  
#line 4672 
  tmp_0 = netif_is_macvlan(upper);
  
#line 4672 
  if ((int)tmp_0 != 0) {
    
#line 4673 
    struct macvlan_dev *dfwd = netdev_priv((struct net_device const *)upper);
    
#line 4674 
    struct ixgbe_fwd_adapter *vadapter = (struct ixgbe_fwd_adapter *)dfwd->fwd_priv;
    
#line 4676 
    if (dfwd->fwd_priv != (void *)0) {
      
#line 4677 
      err = ixgbe_fwd_ring_up(upper,vadapter);
      
#line 4678 
      if (err != 0) 
#line 4679 
                    goto ldv_58748; else ;
    }
    else ;
  }
  else ;
  ldv_58748: 
#line 4683 
  ;
  
#line 4671 
  upper = netdev_all_upper_get_next_dev_rcu(adapter->netdev,& iter);
  ldv_58750: 
#line 4672 
  ;
  
#line 4671 
  if (upper != (struct net_device *)0) 
#line 4673 
                                       goto ldv_58749; else 
#line 4676 
                                                            goto ldv_58751;
  ldv_58751: 
#line 4677 
  ;
  
#line 4678 
  return;
}


#line 4685  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_configure(struct ixgbe_adapter *adapter)
{
  
#line 4687 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 4689 
  ixgbe_configure_pb(adapter);
  
#line 4691 
  ixgbe_configure_dcb(adapter);
  
#line 4697 
  ixgbe_configure_virtualization(adapter);
  
#line 4699 
  ixgbe_set_rx_mode(adapter->netdev);
  
#line 4700 
  ixgbe_restore_vlan(adapter);
  
#line 4702 
  switch ((unsigned int)hw->mac.type) {
    case (unsigned int)2: 
#line 4703 
    ;
    case (unsigned int)3: 
#line 4704 
    ;
    
#line 4705 
    (*(hw->mac.ops.disable_rx_buff))(hw);
    
#line 4706 
    goto ldv_58758;
    default: 
#line 4707 
    ;
    
#line 4708 
    goto ldv_58758;
  }
  ldv_58758: 
#line 4711 
  ;
  
#line 4711 
  if ((adapter->flags & 262144U) != 0U) 
#line 4712 
                                        ixgbe_init_fdir_signature_82599(& adapter->hw,adapter->fdir_pballoc);
  else 
    
#line 4714 
    if ((adapter->flags & 524288U) != 0U) {
      
#line 4715 
      ixgbe_init_fdir_perfect_82599(& adapter->hw,adapter->fdir_pballoc);
      
#line 4717 
      ixgbe_fdir_filter_restore(adapter);
    }
    else ;
  
#line 4720 
  switch ((unsigned int)hw->mac.type) {
    case (unsigned int)2: 
#line 4721 
    ;
    case (unsigned int)3: 
#line 4722 
    ;
    
#line 4723 
    (*(hw->mac.ops.enable_rx_buff))(hw);
    
#line 4724 
    goto ldv_58762;
    default: 
#line 4725 
    ;
    
#line 4726 
    goto ldv_58762;
  }
  ldv_58762: 
#line 4731 
  ;
  
#line 4731 
  ixgbe_configure_fcoe(adapter);
  
#line 4734 
  ixgbe_configure_tx(adapter);
  
#line 4735 
  ixgbe_configure_rx(adapter);
  
#line 4736 
  ixgbe_configure_dfwd(adapter);
  
#line 4737 
  return;
}


#line 4743  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_sfp_link_config(struct ixgbe_adapter *adapter)
{
  
#line 4751 
  if (adapter->hw.mac.type == (unsigned int)ixgbe_mac_82598EB) 
#line 4752 
                                                               adapter->flags2 |= 16U; else ;
  
#line 4754 
  adapter->flags2 |= 32U;
  
#line 4755 
  return;
}


#line 4763  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static int ixgbe_non_sfp_link_config(struct ixgbe_hw *hw)
{
  int __retres;
  u32 speed;
  bool autoneg;
  
#line 4766 
  bool link_up = (_Bool)0;
  
#line 4767 
  int ret = -8;
  
#line 4769 
  if (hw->mac.ops.check_link != (s32 (*)(struct ixgbe_hw *, ixgbe_link_speed *, bool *, bool ))0) 
    
#line 4770 
    ret = (*(hw->mac.ops.check_link))(hw,& speed,& link_up,(_Bool)0); else ;
  
#line 4772 
  if (ret != 0) {
    
#line 4773 
    __retres = ret;
    
#line 4773 
    goto return_label;
  }
  else ;
  
#line 4775 
  speed = hw->phy.autoneg_advertised;
  
#line 4776 
  if (speed == 0U && hw->mac.ops.get_link_capabilities != (s32 (*)(struct ixgbe_hw *, ixgbe_link_speed *, bool *))0) 
    
#line 4777 
    ret = (*(hw->mac.ops.get_link_capabilities))(hw,& speed,& autoneg); else ;
  
#line 4779 
  if (ret != 0) {
    
#line 4780 
    __retres = ret;
    
#line 4780 
    goto return_label;
  }
  else ;
  
#line 4782 
  if (hw->mac.ops.setup_link != (s32 (*)(struct ixgbe_hw *, ixgbe_link_speed , bool ))0) 
    
#line 4783 
    ret = (*(hw->mac.ops.setup_link))(hw,speed,(_Bool)((bool)((int)link_up) != 0)); else ;
  
#line 4785 
  __retres = ret;
  return_label: 
#line 4785 
                return __retres;
}


#line 4788  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_setup_gpie(struct ixgbe_adapter *adapter)
{
  
#line 4790 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 4791 
  u32 gpie = 0U;
  
#line 4793 
  if ((adapter->flags & 8U) != 0U) {
    
#line 4794 
    gpie = 2147483696U;
    
#line 4796 
    gpie |= 1073741824U;
    
#line 4801 
    switch ((unsigned int)hw->mac.type) {
      case (unsigned int)1: 
#line 4802 
      ;
      
#line 4803 
      ixgbe_write_reg(hw,2192U,65535U);
      
#line 4804 
      goto ldv_58780;
      case (unsigned int)2: 
#line 4805 
      ;
      case (unsigned int)3: 
#line 4806 
      ;
      case (unsigned int)4: 
#line 4807 
      ;
      case (unsigned int)5: 
#line 4808 
      ;
      default: 
#line 4809 
      ;
      
#line 4810 
      ixgbe_write_reg(hw,2768U,4294967295U);
      
#line 4811 
      ixgbe_write_reg(hw,2772U,4294967295U);
      
#line 4812 
      goto ldv_58780;
    }
    ldv_58780: 
#line 4814 
    ;
  }
  else 
#line 4817 
       ixgbe_write_reg(hw,2192U,65535U);
  
#line 4823 
  if ((adapter->flags & 8388608U) != 0U) {
    
#line 4824 
    gpie &= 4294918143U;
    
#line 4826 
    switch ((int)adapter->ring_feature[1].mask) {
      case 120: 
#line 4827 
      ;
      
#line 4828 
      gpie |= 16384U;
      
#line 4829 
      goto ldv_58787;
      case 124: 
#line 4830 
      ;
      
#line 4831 
      gpie |= 32768U;
      
#line 4832 
      goto ldv_58787;
      default: 
#line 4833 
      ;
      
#line 4834 
      gpie |= 49152U;
      
#line 4835 
      goto ldv_58787;
    }
    ldv_58787: 
#line 4837 
    ;
  }
  else ;
  
#line 4840 
  if ((adapter->flags2 & 4U) != 0U) {
    
#line 4841 
    switch ((unsigned int)adapter->hw.mac.type) {
      case (unsigned int)2: 
#line 4842 
      ;
      
#line 4843 
      gpie |= 1U;
      
#line 4844 
      goto ldv_58791;
      case (unsigned int)3: 
#line 4845 
      ;
      
#line 4846 
      gpie |= 8388608U;
      
#line 4847 
      goto ldv_58791;
      default: 
#line 4848 
      ;
      
#line 4849 
      goto ldv_58791;
    }
    ldv_58791: 
#line 4851 
    ;
  }
  else ;
  
#line 4854 
  if ((adapter->flags & 32768U) != 0U) 
#line 4855 
                                       gpie = *(hw->mvals + 9U) | gpie; else ;
  
#line 4857 
  if (hw->mac.type == (unsigned int)ixgbe_mac_82599EB) {
    
#line 4858 
    gpie |= 2U;
    
#line 4859 
    gpie |= 4U;
  }
  else ;
  
#line 4862 
  ixgbe_write_reg(hw,2200U,gpie);
  
#line 4863 
  return;
}


#line 4865  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_up_complete(struct ixgbe_adapter *adapter)
{
  int err;
  u32 ctrl_ext;
  bool tmp;
  
#line 4867 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 4871 
  ixgbe_get_hw_control(adapter);
  
#line 4872 
  ixgbe_setup_gpie(adapter);
  
#line 4874 
  if ((adapter->flags & 8U) != 0U) 
#line 4875 
                                   ixgbe_configure_msix(adapter); else 
                                                                    
#line 4877 
                                                                    ixgbe_configure_msi_and_legacy(adapter);
  
#line 4880 
  if (hw->mac.ops.enable_tx_laser != (void (*)(struct ixgbe_hw *))0) 
    
#line 4881 
    (*(hw->mac.ops.enable_tx_laser))(hw); else ;
  
#line 4883 
  if (hw->phy.ops.set_phy_power != (s32 (*)(struct ixgbe_hw *, bool ))0) 
    
#line 4884 
    (*(hw->phy.ops.set_phy_power))(hw,(_Bool)1); else ;
  
#line 4885 
  ldv_inline_asm();
  
#line 4887 
  set_bit(2L,(unsigned long volatile *)(& adapter->state));
  
#line 4888 
  ixgbe_napi_enable_all(adapter);
  
#line 4890 
  tmp = ixgbe_is_sfp(hw);
  
#line 4890 
  if ((int)tmp != 0) 
#line 4891 
                     ixgbe_sfp_link_config(adapter);
  else {
    
#line 4893 
    err = ixgbe_non_sfp_link_config(hw);
    
#line 4894 
    if (err != 0) {
      
#line 4895 
      if (((int)adapter->msg_enable & 2) != 0) 
#line 4895 
                                               netdev_err((struct net_device const *)adapter->netdev,"link_config FAILED %d\n",err); else ;
    }
    else ;
  }
  
#line 4899 
  ixgbe_read_reg(hw,2048U);
  
#line 4900 
  ixgbe_irq_enable(adapter,(_Bool)1,(_Bool)1);
  
#line 4906 
  if ((adapter->flags & 32768U) != 0U) {
    
#line 4907 
    u32 esdp = ixgbe_read_reg(hw,32U);
    
#line 4908 
    if ((esdp & 2U) != 0U) {
      
#line 4909 
      if (((int)adapter->msg_enable & 1) != 0) 
#line 4909 
                                               netdev_crit((struct net_device const *)adapter->netdev,"Fan has stopped, replace the adapter\n"); else ;
    }
    else ;
  }
  else ;
  
#line 4914 
  adapter->flags |= 65536U;
  
#line 4915 
  adapter->link_check_timeout = jiffies;
  
#line 4916 
  ldv_mod_timer_84(& adapter->service_timer,jiffies);
  
#line 4919 
  ctrl_ext = ixgbe_read_reg(hw,24U);
  
#line 4920 
  ctrl_ext |= 16384U;
  
#line 4921 
  ixgbe_write_reg(hw,24U,ctrl_ext);
  
#line 4922 
  return;
}


#line 4924  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
void ixgbe_reinit_locked(struct ixgbe_adapter *adapter)
{
  int tmp_0;
  {
    int tmp;
    
#line 4926 
    tmp = preempt_count();
    
#line 4926 
    int __ret_warn_on = ((unsigned long)tmp & 2096896UL) != 0UL;
    
#line 4926 
    if ((long)(__ret_warn_on != 0) != 0L) 
#line 4926 
                                          warn_slowpath_null("/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c",4926); else ;
    
#line 4926 
    long tmp_2 = (long)(__ret_warn_on != 0);
  }
  
#line 4928 
  (adapter->netdev)->trans_start = jiffies;
  
#line 4930 
  goto ldv_58807;
  ldv_58806: 
#line 4931 
  ;
  
#line 4931 
  usleep_range(1000UL,2000UL);
  ldv_58807: 
#line 4932 
  ;
  
#line 4930 
  tmp_0 = test_and_set_bit(1L,(unsigned long volatile *)(& adapter->state));
  
#line 4930 
  if (tmp_0 != 0) 
#line 4932 
                  goto ldv_58806; else 
#line 4935 
                                       goto ldv_58808;
  ldv_58808: 
#line 4936 
  ;
  
#line 4932 
  ixgbe_down(adapter);
  
#line 4939 
  if ((adapter->flags & 8388608U) != 0U) 
#line 4940 
                                         msleep(2000U); else ;
  
#line 4941 
  ixgbe_up(adapter);
  
#line 4942 
  set_bit(1L,(unsigned long volatile *)(& adapter->state));
  
#line 4943 
  return;
}


#line 4945  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
void ixgbe_up(struct ixgbe_adapter *adapter)
{
  
#line 4948 
  ixgbe_configure(adapter);
  
#line 4950 
  ixgbe_up_complete(adapter);
  
#line 4951 
  return;
}


#line 4953  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
void ixgbe_reset(struct ixgbe_adapter *adapter)
{
  int err;
  u8 old_addr[6U];
  bool tmp;
  int tmp_0;
  int tmp_1;
  
#line 4955 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 4956 
  struct net_device *netdev = adapter->netdev;
  
#line 4960 
  tmp = ixgbe_removed((void *)hw->hw_addr);
  
#line 4960 
  if ((int)tmp != 0) 
#line 4961 
                     goto return_label; else ;
  
#line 4963 
  goto ldv_58820;
  ldv_58819: 
#line 4964 
  ;
  
#line 4964 
  usleep_range(1000UL,2000UL);
  ldv_58820: 
#line 4965 
  ;
  
#line 4963 
  tmp_0 = test_and_set_bit(7L,(unsigned long volatile *)(& adapter->state));
  
#line 4963 
  if (tmp_0 != 0) 
#line 4965 
                  goto ldv_58819; else 
#line 4968 
                                       goto ldv_58821;
  ldv_58821: 
#line 4969 
  ;
  
#line 4967 
  adapter->flags2 &= 4294967247U;
  
#line 4969 
  adapter->flags &= 4294836223U;
  
#line 4971 
  err = (*(hw->mac.ops.init_hw))(hw);
  
#line 4972 
  switch (err) {
    case 0: 
#line 4973 
    ;
    case -20: 
#line 4974 
    ;
    case -19: 
#line 4975 
    ;
    
#line 4976 
    goto ldv_58825;
    case -12: 
#line 4977 
    ;
    
#line 4978 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"master disable timed out\n");
    
#line 4979 
    goto ldv_58825;
    case -24: 
#line 4980 
    ;
    
#line 4982 
    dev_warn((struct device const *)(& (adapter->pdev)->dev),"This device is a pre-production adapter/LOM. ");
    
#line 4988 
    goto ldv_58825;
    default: 
#line 4989 
    ;
    
#line 4990 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"Hardware Error: %d\n",err);
  }
  ldv_58825: 
#line 4993 
  ;
  
#line 4993 
  set_bit(7L,(unsigned long volatile *)(& adapter->state));
  
#line 4995 
  memcpy((void *)(& old_addr),(void const *)(& (adapter->mac_table)->addr),(unsigned long)netdev->addr_len);
  
#line 4996 
  ixgbe_flush_sw_mac_table(adapter);
  
#line 4997 
  ixgbe_mac_set_default_filter(adapter,(u8 *)(& old_addr));
  
#line 5000 
  if ((unsigned int)hw->mac.san_mac_rar_index != 0U) 
#line 5001 
                                                     (*(hw->mac.ops.set_vmdq_san_mac))(hw,(unsigned int)adapter->ring_feature[1].offset); else ;
  
#line 5003 
  tmp_1 = constant_test_bit(8L,(unsigned long const volatile *)(& adapter->state));
  
#line 5003 
  if (tmp_1 != 0) 
#line 5004 
                  ixgbe_ptp_reset(adapter); else ;
  
#line 5006 
  if (hw->phy.ops.set_phy_power != (s32 (*)(struct ixgbe_hw *, bool ))0) {
    int tmp_3;
    bool tmp_2;
    
#line 5007 
    tmp_2 = netif_running((struct net_device const *)adapter->netdev);
    
#line 5007 
    if (tmp_2) 
#line 5007 
               tmp_3 = 0; else 
#line 5007 
                               tmp_3 = 1;
    
#line 5007 
    if (tmp_3) 
      
#line 5007 
      if (adapter->wol == 0U) 
#line 5008 
                              (*(hw->phy.ops.set_phy_power))(hw,(_Bool)0); else 
                                                                    
#line 5010 
                                                                    (*(hw->phy.ops.set_phy_power))(hw,(_Bool)1);
    else 
#line 5010 
         (*(hw->phy.ops.set_phy_power))(hw,(_Bool)1);
  }
  else ;
  return_label: 
#line 5011 
                return;
}


#line 5018  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_clean_tx_ring(struct ixgbe_ring *tx_ring)
{
  struct ixgbe_tx_buffer *tx_buffer_info;
  unsigned long size;
  u16 i;
  struct netdev_queue *tmp;
  
#line 5025 
  if (tx_ring->__anonCompField_ixgbe_ring_117.tx_buffer_info == (struct ixgbe_tx_buffer *)0) 
    
#line 5026 
    goto return_label; else ;
  
#line 5029 
  i = (unsigned short)0U;
  
#line 5029 
  goto ldv_58836;
  ldv_58835: 
#line 5030 
  ;
  
#line 5030 
  tx_buffer_info = tx_ring->__anonCompField_ixgbe_ring_117.tx_buffer_info + (int)i;
  
#line 5031 
  ixgbe_unmap_and_free_tx_resource(tx_ring,tx_buffer_info);
  
#line 5029 
  i = (u16)((int)i + 1);
  ldv_58836: 
#line 5030 
  ;
  
#line 5029 
  if ((int)tx_ring->count > (int)i) 
#line 5031 
                                    goto ldv_58835; else 
#line 5034 
                                                         goto ldv_58837;
  ldv_58837: 
#line 5035 
  ;
  
#line 5034 
  tmp = txring_txq((struct ixgbe_ring const *)tx_ring);
  
#line 5034 
  netdev_tx_reset_queue(tmp);
  
#line 5036 
  size = (unsigned long)tx_ring->count * 48UL;
  
#line 5037 
  memset((void *)tx_ring->__anonCompField_ixgbe_ring_117.tx_buffer_info,0,size);
  
#line 5040 
  memset(tx_ring->desc,0,(unsigned long)tx_ring->size);
  
#line 5042 
  tx_ring->next_to_use = (unsigned short)0U;
  
#line 5043 
  tx_ring->next_to_clean = (unsigned short)0U;
  return_label: 
#line 5044 
                return;
}


#line 5050  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_clean_all_rx_rings(struct ixgbe_adapter *adapter)
{
  int i;
  
#line 5054 
  i = 0;
  
#line 5054 
  goto ldv_58843;
  ldv_58842: 
#line 5055 
  ;
  
#line 5055 
  ixgbe_clean_rx_ring(adapter->rx_ring[i]);
  
#line 5054 
  i += 1;
  ldv_58843: 
#line 5055 
  ;
  
#line 5054 
  if (adapter->num_rx_queues > i) 
#line 5056 
                                  goto ldv_58842; else 
#line 5059 
                                                       goto ldv_58844;
  ldv_58844: 
#line 5060 
  ;
  
#line 5061 
  return;
}


#line 5062  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_clean_all_tx_rings(struct ixgbe_adapter *adapter)
{
  int i;
  
#line 5066 
  i = 0;
  
#line 5066 
  goto ldv_58850;
  ldv_58849: 
#line 5067 
  ;
  
#line 5067 
  ixgbe_clean_tx_ring(adapter->tx_ring[i]);
  
#line 5066 
  i += 1;
  ldv_58850: 
#line 5067 
  ;
  
#line 5066 
  if (adapter->num_tx_queues > i) 
#line 5068 
                                  goto ldv_58849; else 
#line 5071 
                                                       goto ldv_58851;
  ldv_58851: 
#line 5072 
  ;
  
#line 5073 
  return;
}


#line 5070  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_fdir_filter_exit(struct ixgbe_adapter *adapter)
{
  struct hlist_node *node2;
  struct ixgbe_fdir_filter *filter;
  struct ixgbe_fdir_filter *tmp_1;
  struct ixgbe_fdir_filter *tmp_4;
  
#line 5075 
  ldv_spin_lock_85(& adapter->fdir_perfect_lock);
  {
    struct ixgbe_fdir_filter *tmp_0;
    
#line 5077 
    struct hlist_node *____ptr = adapter->fdir_filter_list.first;
    
#line 5077 
    if (____ptr != (struct hlist_node *)0) {
      struct ixgbe_fdir_filter *tmp;
      {
        
#line 5077 
        struct hlist_node const *__mptr = (struct hlist_node const *)____ptr;
        
#line 5077 
        tmp = (struct ixgbe_fdir_filter *)__mptr;
      }
      
#line 5077 
      tmp_0 = tmp;
    }
    else 
#line 5077 
         tmp_0 = (struct ixgbe_fdir_filter *)0;
    
#line 5077 
    tmp_1 = tmp_0;
  }
  
#line 5077 
  filter = tmp_1;
  
#line 5077 
  goto ldv_58867;
  ldv_58866: 
#line 5078 
  ;
  
#line 5079 
  hlist_del(& filter->fdir_node);
  
#line 5080 
  kfree((void const *)filter);
  {
    struct ixgbe_fdir_filter *tmp_3;
    
#line 5077 
    struct hlist_node *____ptr_0 = node2;
    
#line 5077 
    if (____ptr_0 != (struct hlist_node *)0) {
      struct ixgbe_fdir_filter *tmp_2;
      {
        
#line 5077 
        struct hlist_node const *__mptr_0 = (struct hlist_node const *)____ptr_0;
        
#line 5077 
        tmp_2 = (struct ixgbe_fdir_filter *)__mptr_0;
      }
      
#line 5077 
      tmp_3 = tmp_2;
    }
    else 
#line 5077 
         tmp_3 = (struct ixgbe_fdir_filter *)0;
    
#line 5077 
    tmp_4 = tmp_3;
  }
  
#line 5077 
  filter = tmp_4;
  ldv_58867: 
#line 5079 
  ;
  
#line 5077 
  if (filter != (struct ixgbe_fdir_filter *)0) {
    
#line 5077 
    node2 = filter->fdir_node.next;
    
#line 5077 
    if (1 != 0) 
#line 5079 
                goto ldv_58866; else 
#line 5082 
                                     goto ldv_58868;
  }
  else 
#line 5082 
       goto ldv_58868;
  ldv_58868: 
#line 5083 
  ;
  
#line 5082 
  adapter->fdir_filter_count = 0;
  
#line 5084 
  ldv_spin_unlock_86(& adapter->fdir_perfect_lock);
  
#line 5085 
  return;
}


#line 5087  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
void ixgbe_down(struct ixgbe_adapter *adapter)
{
  struct net_device *upper;
  struct list_head *iter;
  int i;
  int tmp;
  bool tmp_1;
  int tmp_3;
  
#line 5089 
  struct net_device *netdev = adapter->netdev;
  
#line 5090 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 5096 
  tmp = test_and_set_bit(2L,(unsigned long volatile *)(& adapter->state));
  
#line 5096 
  if (tmp != 0) 
#line 5097 
                goto return_label; else ;
  
#line 5100 
  (*(hw->mac.ops.disable_rx))(hw);
  
#line 5103 
  i = 0;
  
#line 5103 
  goto ldv_58878;
  ldv_58877: 
#line 5104 
  ;
  
#line 5105 
  ixgbe_disable_rx_queue(adapter,adapter->rx_ring[i]);
  
#line 5103 
  i += 1;
  ldv_58878: 
#line 5104 
  ;
  
#line 5103 
  if (adapter->num_rx_queues > i) 
#line 5105 
                                  goto ldv_58877; else 
#line 5108 
                                                       goto ldv_58879;
  ldv_58879: 
#line 5109 
  ;
  
#line 5107 
  usleep_range(10000UL,20000UL);
  
#line 5109 
  netif_tx_stop_all_queues(netdev);
  
#line 5112 
  netif_carrier_off(netdev);
  
#line 5113 
  netif_tx_disable(netdev);
  
#line 5116 
  iter = & (adapter->netdev)->all_adj_list.upper;
  
#line 5116 
  upper = netdev_all_upper_get_next_dev_rcu(adapter->netdev,& iter);
  
#line 5116 
  goto ldv_58882;
  ldv_58881: 
#line 5117 
  ;
  
#line 5117 
  tmp_1 = netif_is_macvlan(upper);
  
#line 5117 
  if ((int)tmp_1 != 0) {
    
#line 5118 
    struct macvlan_dev *vlan = netdev_priv((struct net_device const *)upper);
    
#line 5120 
    if (vlan->fwd_priv != (void *)0) {
      
#line 5121 
      netif_tx_stop_all_queues(upper);
      
#line 5122 
      netif_carrier_off(upper);
      
#line 5123 
      netif_tx_disable(upper);
    }
    else ;
  }
  else ;
  
#line 5116 
  upper = netdev_all_upper_get_next_dev_rcu(adapter->netdev,& iter);
  ldv_58882: 
#line 5117 
  ;
  
#line 5116 
  if (upper != (struct net_device *)0) 
#line 5118 
                                       goto ldv_58881; else 
#line 5121 
                                                            goto ldv_58883;
  ldv_58883: 
#line 5122 
  ;
  
#line 5128 
  ixgbe_irq_disable(adapter);
  
#line 5130 
  ixgbe_napi_disable_all(adapter);
  
#line 5132 
  adapter->flags2 &= 4294967103U;
  
#line 5134 
  adapter->flags &= 4294901759U;
  
#line 5136 
  ldv_del_timer_sync_87(& adapter->service_timer);
  
#line 5138 
  if (adapter->num_vfs != 0U) {
    
#line 5140 
    ixgbe_write_reg(& adapter->hw,2196U,0U);
    
#line 5143 
    i = 0;
    
#line 5143 
    goto ldv_58885;
    ldv_58884: 
#line 5144 
    ;
    
#line 5144 
    (adapter->vfinfo + i)->clear_to_send = (_Bool)0;
    
#line 5143 
    i += 1;
    ldv_58885: 
#line 5144 
    ;
    
#line 5143 
    if (adapter->num_vfs > (unsigned int)i) 
#line 5145 
                                            goto ldv_58884; else 
#line 5148 
                                                                 goto ldv_58886;
    ldv_58886: 
#line 5149 
    ;
    
#line 5147 
    ixgbe_ping_all_vfs(adapter);
    
#line 5150 
    ixgbe_disable_tx_rx(adapter);
  }
  else ;
  
#line 5154 
  i = 0;
  
#line 5154 
  goto ldv_58889;
  ldv_58888: 
#line 5155 
  ;
  {
    
#line 5155 
    u8 reg_idx = (adapter->tx_ring[i])->reg_idx;
    
#line 5156 
    ixgbe_write_reg(hw,(unsigned int)((int)reg_idx * 64 + 24616),67108864U);
  }
  
#line 5154 
  i += 1;
  ldv_58889: 
#line 5155 
  ;
  
#line 5154 
  if (adapter->num_tx_queues > i) 
#line 5156 
                                  goto ldv_58888; else 
#line 5159 
                                                       goto ldv_58890;
  ldv_58890: 
#line 5160 
  ;
  
#line 5160 
  switch ((unsigned int)hw->mac.type) {
    u32 tmp_2;
    case (unsigned int)2: 
#line 5161 
    ;
    case (unsigned int)3: 
#line 5162 
    ;
    case (unsigned int)4: 
#line 5163 
    ;
    case (unsigned int)5: 
#line 5164 
    ;
    
#line 5165 
    tmp_2 = ixgbe_read_reg(hw,19072U);
    
#line 5165 
    ;
    
#line 5165 
    ixgbe_write_reg(hw,19072U,tmp_2 & 4294967294U);
    
#line 5168 
    goto ldv_58895;
    default: 
#line 5169 
    ;
    
#line 5170 
    goto ldv_58895;
  }
  ldv_58895: 
#line 5173 
  ;
  
#line 5173 
  tmp_3 = pci_channel_offline(adapter->pdev);
  
#line 5173 
  if (tmp_3 == 0) 
#line 5174 
                  ixgbe_reset(adapter); else ;
  
#line 5177 
  if (hw->mac.ops.disable_tx_laser != (void (*)(struct ixgbe_hw *))0) 
    
#line 5178 
    (*(hw->mac.ops.disable_tx_laser))(hw); else ;
  
#line 5180 
  ixgbe_clean_all_tx_rings(adapter);
  
#line 5181 
  ixgbe_clean_all_rx_rings(adapter);
  
#line 5185 
  ixgbe_setup_dca(adapter);
  return_label: 
#line 5186 
                return;
}


#line 5193  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_tx_timeout(struct net_device *netdev)
{
  
#line 5195 
  struct ixgbe_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 5198 
  ixgbe_tx_timeout_reset(adapter);
  
#line 5199 
  return;
}


#line 5209  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static int ixgbe_sw_init(struct ixgbe_adapter *adapter)
{
  int __retres;
  unsigned int rss;
  unsigned int fdir;
  u32 fwsm;
  int j;
  struct tc_configuration *tc;
  int tmp_2;
  int tmp_5;
  s32 tmp_7;
  
#line 5211 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 5212 
  struct pci_dev *pdev = adapter->pdev;
  
#line 5222 
  hw->vendor_id = pdev->vendor;
  
#line 5223 
  hw->device_id = pdev->device;
  
#line 5224 
  hw->revision_id = pdev->revision;
  
#line 5225 
  hw->subsystem_vendor_id = pdev->subsystem_vendor;
  
#line 5226 
  hw->subsystem_device_id = pdev->subsystem_device;
  {
    u8 tmp;
    unsigned int tmp_0;
    int tmp_1;
    
#line 5229 
    tmp = ixgbe_max_rss_indices(adapter);
    
#line 5229 
    int __min1 = (int)tmp;
    
#line 5229 
    tmp_0 = cpumask_weight(cpu_online_mask);
    
#line 5229 
    int __min2 = (int)tmp_0;
    
#line 5229 
    if (__min1 < __min2) 
#line 5229 
                         tmp_1 = __min1; else 
#line 5229 
                                              tmp_1 = __min2;
    
#line 5229 
    tmp_2 = tmp_1;
  }
  
#line 5229 
  rss = (unsigned int)tmp_2;
  
#line 5230 
  adapter->ring_feature[2].limit = (unsigned short)rss;
  
#line 5231 
  adapter->flags2 |= 1U;
  
#line 5232 
  adapter->flags2 |= 2U;
  
#line 5233 
  adapter->max_q_vectors = 64;
  
#line 5234 
  adapter->atr_sample_rate = 20U;
  {
    unsigned int tmp_3;
    int tmp_4;
    
#line 5235 
    int __min1_0 = 63;
    
#line 5235 
    tmp_3 = cpumask_weight(cpu_online_mask);
    
#line 5235 
    int __min2_0 = (int)tmp_3;
    
#line 5235 
    if (__min1_0 < __min2_0) 
#line 5235 
                             tmp_4 = __min1_0; else 
#line 5235 
                                                    tmp_4 = __min2_0;
    
#line 5235 
    tmp_5 = tmp_4;
  }
  
#line 5235 
  fdir = (unsigned int)tmp_5;
  
#line 5236 
  adapter->ring_feature[3].limit = (unsigned short)fdir;
  
#line 5237 
  adapter->fdir_pballoc = 1U;
  
#line 5239 
  adapter->flags |= 512U;
  
#line 5242 
  adapter->flags |= 1048576U;
  
#line 5243 
  adapter->flags &= 4292870143U;
  
#line 5246 
  adapter->fcoe.up = (unsigned char)3U;
  
#line 5250 
  adapter->mac_table = (struct ixgbe_mac_addr *)kzalloc((unsigned long)hw->mac.num_rar_entries * 10UL,32U);
  
#line 5255 
  switch ((unsigned int)hw->mac.type) {
    case (unsigned int)1: 
#line 5256 
    ;
    
#line 5257 
    adapter->flags2 &= 4294967294U;
    
#line 5258 
    adapter->flags2 &= 4294967293U;
    
#line 5260 
    if ((unsigned int)hw->device_id == 4296U) 
#line 5261 
                                              adapter->flags |= 32768U; else ;
    
#line 5263 
    adapter->max_q_vectors = 16;
    
#line 5264 
    adapter->ring_feature[3].limit = (unsigned short)0U;
    
#line 5265 
    adapter->atr_sample_rate = 0U;
    
#line 5266 
    adapter->fdir_pballoc = 0U;
    
#line 5268 
    adapter->flags &= 4293918719U;
    
#line 5269 
    adapter->flags &= 4292870143U;
    
#line 5271 
    adapter->fcoe.up = (unsigned char)0U;
    
#line 5274 
    goto ldv_58918;
    case (unsigned int)2: 
#line 5275 
    ;
    
#line 5276 
    if ((unsigned int)hw->device_id == 5404U) 
#line 5277 
                                              adapter->flags2 |= 4U; else ;
    
#line 5278 
    goto ldv_58918;
    case (unsigned int)3: 
#line 5279 
    ;
    
#line 5280 
    fwsm = ixgbe_read_reg(hw,*(hw->mvals + 7U));
    
#line 5281 
    if ((fwsm & 1U) != 0U) 
#line 5282 
                           adapter->flags2 |= 4U; else ;
    
#line 5283 
    goto ldv_58918;
    case (unsigned int)5: 
#line 5284 
    ;
    case (unsigned int)4: 
#line 5285 
    ;
    
#line 5287 
    adapter->flags &= 4294966783U;
    
#line 5289 
    goto ldv_58918;
    default: 
#line 5290 
    ;
    
#line 5291 
    goto ldv_58918;
  }
  ldv_58918: 
#line 5296 
  ;
  
#line 5296 
  spinlock_check(& adapter->fcoe.lock);
  {
    struct lock_class_key __key;
    
#line 5296 
    __raw_spin_lock_init(& adapter->fcoe.lock.__anonCompField_spinlock_18.rlock,"&(&adapter->fcoe.lock)->rlock",& __key);
  }
  
#line 5300 
  spinlock_check(& adapter->fdir_perfect_lock);
  {
    struct lock_class_key __key_0;
    
#line 5300 
    __raw_spin_lock_init(& adapter->fdir_perfect_lock.__anonCompField_spinlock_18.rlock,"&(&adapter->fdir_perfect_lock)->rlock",& __key_0);
  }
  
#line 5303 
  switch ((unsigned int)hw->mac.type) {
    case (unsigned int)3: 
#line 5304 
    ;
    case (unsigned int)4: 
#line 5305 
    ;
    case (unsigned int)5: 
#line 5306 
    ;
    
#line 5307 
    adapter->dcb_cfg.num_tcs.pg_tcs = (unsigned char)4U;
    
#line 5308 
    adapter->dcb_cfg.num_tcs.pfc_tcs = (unsigned char)4U;
    
#line 5309 
    goto ldv_58929;
    default: 
#line 5310 
    ;
    
#line 5311 
    adapter->dcb_cfg.num_tcs.pg_tcs = (unsigned char)8U;
    
#line 5312 
    adapter->dcb_cfg.num_tcs.pfc_tcs = (unsigned char)8U;
    
#line 5313 
    goto ldv_58929;
  }
  ldv_58929: 
#line 5317 
  ;
  
#line 5317 
  j = 0;
  
#line 5317 
  goto ldv_58932;
  ldv_58931: 
#line 5318 
  ;
  
#line 5318 
  tc = & adapter->dcb_cfg.tc_config[j];
  
#line 5319 
  tc->path[0].bwg_id = (unsigned char)0U;
  
#line 5320 
  tc->path[0].bwg_percent = (unsigned char)(((unsigned int)((unsigned char)j) & 1U) + 12U);
  
#line 5321 
  tc->path[1].bwg_id = (unsigned char)0U;
  
#line 5322 
  tc->path[1].bwg_percent = (unsigned char)(((unsigned int)((unsigned char)j) & 1U) + 12U);
  
#line 5323 
  tc->dcb_pfc = pfc_disabled;
  
#line 5317 
  j += 1;
  ldv_58932: 
#line 5318 
  ;
  
#line 5317 
  if (j <= 7) 
#line 5319 
              goto ldv_58931; else 
#line 5322 
                                   goto ldv_58933;
  ldv_58933: 
#line 5323 
  ;
  
#line 5327 
  tc = & adapter->dcb_cfg.tc_config[0];
  
#line 5328 
  tc->path[0].up_to_tc_bitmap = (unsigned char)255U;
  
#line 5329 
  tc->path[1].up_to_tc_bitmap = (unsigned char)255U;
  
#line 5331 
  adapter->dcb_cfg.bw_percentage[0][0] = (unsigned char)100U;
  
#line 5332 
  adapter->dcb_cfg.bw_percentage[1][0] = (unsigned char)100U;
  
#line 5333 
  adapter->dcb_cfg.pfc_mode_enable = (_Bool)0;
  
#line 5334 
  adapter->dcb_set_bitmap = (unsigned char)0U;
  
#line 5335 
  adapter->dcbx_cap = (unsigned char)5U;
  
#line 5336 
  memcpy((void *)(& adapter->temp_dcb_cfg),(void const *)(& adapter->dcb_cfg),296UL);
  
#line 5342 
  hw->fc.requested_mode = ixgbe_fc_full;
  
#line 5343 
  hw->fc.current_mode = ixgbe_fc_full;
  
#line 5344 
  ixgbe_pbthresh_setup(adapter);
  
#line 5345 
  hw->fc.pause_time = (unsigned short)65535U;
  
#line 5346 
  hw->fc.send_xon = (_Bool)1;
  
#line 5347 
  hw->fc.disable_fc_autoneg = ixgbe_device_supports_autoneg_fc(hw);
  
#line 5350 
  if (max_vfs != 0U) 
#line 5351 
                     dev_warn((struct device const *)(& (adapter->pdev)->dev),"Enabling SR-IOV VFs using the max_vfs module parameter is deprecated - please use the pci sysfs interface instead.\n"); else ;
  
#line 5354 
  if (hw->mac.type != (unsigned int)ixgbe_mac_82598EB) 
    
#line 5355 
    if (max_vfs > 63U) {
      
#line 5356 
      adapter->num_vfs = 0U;
      
#line 5357 
      dev_warn((struct device const *)(& (adapter->pdev)->dev),"max_vfs parameter out of range. Not assigning any SR-IOV VFs\n");
    }
    else 
#line 5359 
         adapter->num_vfs = max_vfs;
  else ;
  
#line 5365 
  adapter->rx_itr_setting = (unsigned short)1U;
  
#line 5366 
  adapter->tx_itr_setting = (unsigned short)1U;
  
#line 5369 
  adapter->tx_ring_count = 512U;
  
#line 5370 
  adapter->rx_ring_count = 512U;
  
#line 5373 
  adapter->tx_work_limit = (unsigned short)256U;
  
#line 5376 
  tmp_7 = ixgbe_init_eeprom_params_generic(hw);
  
#line 5376 
  if (tmp_7 != 0) {
    
#line 5377 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"EEPROM initialization failed\n");
    
#line 5378 
    __retres = -5;
    
#line 5378 
    goto return_label;
  }
  else ;
  
#line 5382 
  set_bit(0L,(unsigned long volatile *)(& adapter->fwd_bitmask));
  
#line 5383 
  set_bit(2L,(unsigned long volatile *)(& adapter->state));
  
#line 5385 
  __retres = 0;
  return_label: 
#line 5385 
                return __retres;
}


#line 5394  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
int ixgbe_setup_tx_resources(struct ixgbe_ring *tx_ring)
{
  int __retres;
  int size;
  
#line 5396 
  struct device *dev = tx_ring->dev;
  
#line 5397 
  int orig_node = dev_to_node(dev);
  
#line 5398 
  int ring_node = -1;
  
#line 5401 
  size = (int)((unsigned int)tx_ring->count * 48U);
  
#line 5403 
  if (tx_ring->q_vector != (struct ixgbe_q_vector *)0) 
#line 5404 
                                                       ring_node = (tx_ring->q_vector)->numa_node; else ;
  
#line 5406 
  tx_ring->__anonCompField_ixgbe_ring_117.tx_buffer_info = (struct ixgbe_tx_buffer *)vzalloc_node((unsigned long)size,ring_node);
  
#line 5407 
  if (tx_ring->__anonCompField_ixgbe_ring_117.tx_buffer_info == (struct ixgbe_tx_buffer *)0) 
    
#line 5408 
    tx_ring->__anonCompField_ixgbe_ring_117.tx_buffer_info = (struct ixgbe_tx_buffer *)vzalloc((unsigned long)size); else ;
  
#line 5409 
  if (tx_ring->__anonCompField_ixgbe_ring_117.tx_buffer_info == (struct ixgbe_tx_buffer *)0) 
    
#line 5410 
    goto err; else ;
  
#line 5412 
  u64_stats_init(& tx_ring->syncp);
  
#line 5415 
  tx_ring->size = (unsigned int)tx_ring->count * 16U;
  
#line 5416 
  tx_ring->size = (tx_ring->size + 4095U) & 4294963200U;
  
#line 5418 
  set_dev_node(dev,ring_node);
  
#line 5419 
  tx_ring->desc = dma_alloc_attrs(dev,(unsigned long)tx_ring->size,& tx_ring->dma,208U,(struct dma_attrs *)0);
  
#line 5423 
  set_dev_node(dev,orig_node);
  
#line 5424 
  if (tx_ring->desc == (void *)0) 
#line 5425 
                                  tx_ring->desc = dma_alloc_attrs(dev,(unsigned long)tx_ring->size,& tx_ring->dma,208U,(struct dma_attrs *)0); else ;
  
#line 5427 
  if (tx_ring->desc == (void *)0) 
#line 5428 
                                  goto err; else ;
  
#line 5430 
  tx_ring->next_to_use = (unsigned short)0U;
  
#line 5431 
  tx_ring->next_to_clean = (unsigned short)0U;
  
#line 5432 
  __retres = 0;
  
#line 5432 
  goto return_label;
  err: 
#line 5434 
  ;
  
#line 5435 
  vfree((void const *)tx_ring->__anonCompField_ixgbe_ring_117.tx_buffer_info);
  
#line 5436 
  tx_ring->__anonCompField_ixgbe_ring_117.tx_buffer_info = (struct ixgbe_tx_buffer *)0;
  
#line 5437 
  dev_err((struct device const *)dev,"Unable to allocate memory for the Tx descriptor ring\n");
  
#line 5438 
  __retres = -12;
  return_label: 
#line 5438 
                return __retres;
}


#line 5451  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static int ixgbe_setup_all_tx_resources(struct ixgbe_adapter *adapter)
{
  int __retres;
  int i;
  int tmp;
  
#line 5453 
  int err = 0;
  
#line 5455 
  i = 0;
  
#line 5455 
  goto ldv_58950;
  ldv_58949: 
#line 5456 
  ;
  
#line 5456 
  err = ixgbe_setup_tx_resources(adapter->tx_ring[i]);
  
#line 5457 
  if (err == 0) 
#line 5458 
                goto ldv_58947; else ;
  
#line 5460 
  if (((int)adapter->msg_enable & 2) != 0) 
#line 5460 
                                           netdev_err((struct net_device const *)adapter->netdev,"Allocation for Tx Queue %u failed\n",i); else ;
  
#line 5461 
  goto err_setup_tx;
  ldv_58947: 
#line 5462 
  ;
  
#line 5455 
  i += 1;
  ldv_58950: 
#line 5456 
  ;
  
#line 5455 
  if (adapter->num_tx_queues > i) 
#line 5457 
                                  goto ldv_58949; else 
#line 5460 
                                                       goto ldv_58951;
  ldv_58951: 
#line 5461 
  ;
  
#line 5464 
  __retres = 0;
  
#line 5464 
  goto return_label;
  err_setup_tx: 
#line 5465 
  ;
  
#line 5467 
  goto ldv_58953;
  ldv_58952: 
#line 5468 
  ;
  
#line 5468 
  ixgbe_free_tx_resources(adapter->tx_ring[i]);
  ldv_58953: 
#line 5469 
  ;
  
#line 5467 
  tmp = i;
  
#line 5467 
  i -= 1;
  
#line 5467 
  ;
  
#line 5467 
  if (tmp != 0) 
#line 5469 
                goto ldv_58952; else 
#line 5472 
                                     goto ldv_58954;
  ldv_58954: 
#line 5473 
  ;
  
#line 5469 
  __retres = err;
  return_label: 
#line 5469 
                return __retres;
}


#line 5478  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
int ixgbe_setup_rx_resources(struct ixgbe_ring *rx_ring)
{
  int __retres;
  int size;
  
#line 5480 
  struct device *dev = rx_ring->dev;
  
#line 5481 
  int orig_node = dev_to_node(dev);
  
#line 5482 
  int ring_node = -1;
  
#line 5485 
  size = (int)((unsigned int)rx_ring->count * 32U);
  
#line 5487 
  if (rx_ring->q_vector != (struct ixgbe_q_vector *)0) 
#line 5488 
                                                       ring_node = (rx_ring->q_vector)->numa_node; else ;
  
#line 5490 
  rx_ring->__anonCompField_ixgbe_ring_117.rx_buffer_info = (struct ixgbe_rx_buffer *)vzalloc_node((unsigned long)size,ring_node);
  
#line 5491 
  if (rx_ring->__anonCompField_ixgbe_ring_117.rx_buffer_info == (struct ixgbe_rx_buffer *)0) 
    
#line 5492 
    rx_ring->__anonCompField_ixgbe_ring_117.rx_buffer_info = (struct ixgbe_rx_buffer *)vzalloc((unsigned long)size); else ;
  
#line 5493 
  if (rx_ring->__anonCompField_ixgbe_ring_117.rx_buffer_info == (struct ixgbe_rx_buffer *)0) 
    
#line 5494 
    goto err; else ;
  
#line 5496 
  u64_stats_init(& rx_ring->syncp);
  
#line 5499 
  rx_ring->size = (unsigned int)rx_ring->count * 16U;
  
#line 5500 
  rx_ring->size = (rx_ring->size + 4095U) & 4294963200U;
  
#line 5502 
  set_dev_node(dev,ring_node);
  
#line 5503 
  rx_ring->desc = dma_alloc_attrs(dev,(unsigned long)rx_ring->size,& rx_ring->dma,208U,(struct dma_attrs *)0);
  
#line 5507 
  set_dev_node(dev,orig_node);
  
#line 5508 
  if (rx_ring->desc == (void *)0) 
#line 5509 
                                  rx_ring->desc = dma_alloc_attrs(dev,(unsigned long)rx_ring->size,& rx_ring->dma,208U,(struct dma_attrs *)0); else ;
  
#line 5511 
  if (rx_ring->desc == (void *)0) 
#line 5512 
                                  goto err; else ;
  
#line 5514 
  rx_ring->next_to_clean = (unsigned short)0U;
  
#line 5515 
  rx_ring->next_to_use = (unsigned short)0U;
  
#line 5517 
  __retres = 0;
  
#line 5517 
  goto return_label;
  err: 
#line 5518 
  ;
  
#line 5519 
  vfree((void const *)rx_ring->__anonCompField_ixgbe_ring_117.rx_buffer_info);
  
#line 5520 
  rx_ring->__anonCompField_ixgbe_ring_117.rx_buffer_info = (struct ixgbe_rx_buffer *)0;
  
#line 5521 
  dev_err((struct device const *)dev,"Unable to allocate memory for the Rx descriptor ring\n");
  
#line 5522 
  __retres = -12;
  return_label: 
#line 5522 
                return __retres;
}


#line 5535  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static int ixgbe_setup_all_rx_resources(struct ixgbe_adapter *adapter)
{
  int __retres;
  int i;
  int tmp;
  
#line 5537 
  int err = 0;
  
#line 5539 
  i = 0;
  
#line 5539 
  goto ldv_58971;
  ldv_58970: 
#line 5540 
  ;
  
#line 5540 
  err = ixgbe_setup_rx_resources(adapter->rx_ring[i]);
  
#line 5541 
  if (err == 0) 
#line 5542 
                goto ldv_58968; else ;
  
#line 5544 
  if (((int)adapter->msg_enable & 2) != 0) 
#line 5544 
                                           netdev_err((struct net_device const *)adapter->netdev,"Allocation for Rx Queue %u failed\n",i); else ;
  
#line 5545 
  goto err_setup_rx;
  ldv_58968: 
#line 5546 
  ;
  
#line 5539 
  i += 1;
  ldv_58971: 
#line 5540 
  ;
  
#line 5539 
  if (adapter->num_rx_queues > i) 
#line 5541 
                                  goto ldv_58970; else 
#line 5544 
                                                       goto ldv_58972;
  ldv_58972: 
#line 5545 
  ;
  
#line 5549 
  err = ixgbe_setup_fcoe_ddp_resources(adapter);
  
#line 5550 
  if (err == 0) {
    
#line 5552 
    __retres = 0;
    
#line 5552 
    goto return_label;
  }
  else ;
  err_setup_rx: 
#line 5553 
  ;
  
#line 5555 
  goto ldv_58974;
  ldv_58973: 
#line 5556 
  ;
  
#line 5556 
  ixgbe_free_rx_resources(adapter->rx_ring[i]);
  ldv_58974: 
#line 5557 
  ;
  
#line 5555 
  tmp = i;
  
#line 5555 
  i -= 1;
  
#line 5555 
  ;
  
#line 5555 
  if (tmp != 0) 
#line 5557 
                goto ldv_58973; else 
#line 5560 
                                     goto ldv_58975;
  ldv_58975: 
#line 5561 
  ;
  
#line 5557 
  __retres = err;
  return_label: 
#line 5557 
                return __retres;
}


#line 5566  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
void ixgbe_free_tx_resources(struct ixgbe_ring *tx_ring)
{
  
#line 5568 
  ixgbe_clean_tx_ring(tx_ring);
  
#line 5570 
  vfree((void const *)tx_ring->__anonCompField_ixgbe_ring_117.tx_buffer_info);
  
#line 5571 
  tx_ring->__anonCompField_ixgbe_ring_117.tx_buffer_info = (struct ixgbe_tx_buffer *)0;
  
#line 5574 
  if (tx_ring->desc == (void *)0) 
#line 5575 
                                  goto return_label; else ;
  
#line 5577 
  dma_free_attrs(tx_ring->dev,(unsigned long)tx_ring->size,tx_ring->desc,tx_ring->dma,(struct dma_attrs *)0);
  
#line 5580 
  tx_ring->desc = (void *)0;
  return_label: 
#line 5581 
                return;
}


#line 5589  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_free_all_tx_resources(struct ixgbe_adapter *adapter)
{
  int i;
  
#line 5593 
  i = 0;
  
#line 5593 
  goto ldv_58984;
  ldv_58983: 
#line 5594 
  ;
  
#line 5594 
  if ((adapter->tx_ring[i])->desc != (void *)0) 
#line 5595 
                                                ixgbe_free_tx_resources(adapter->tx_ring[i]); else ;
  
#line 5593 
  i += 1;
  ldv_58984: 
#line 5594 
  ;
  
#line 5593 
  if (adapter->num_tx_queues > i) 
#line 5595 
                                  goto ldv_58983; else 
#line 5598 
                                                       goto ldv_58985;
  ldv_58985: 
#line 5599 
  ;
  
#line 5600 
  return;
}


#line 5604  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
void ixgbe_free_rx_resources(struct ixgbe_ring *rx_ring)
{
  
#line 5606 
  ixgbe_clean_rx_ring(rx_ring);
  
#line 5608 
  vfree((void const *)rx_ring->__anonCompField_ixgbe_ring_117.rx_buffer_info);
  
#line 5609 
  rx_ring->__anonCompField_ixgbe_ring_117.rx_buffer_info = (struct ixgbe_rx_buffer *)0;
  
#line 5612 
  if (rx_ring->desc == (void *)0) 
#line 5613 
                                  goto return_label; else ;
  
#line 5615 
  dma_free_attrs(rx_ring->dev,(unsigned long)rx_ring->size,rx_ring->desc,rx_ring->dma,(struct dma_attrs *)0);
  
#line 5618 
  rx_ring->desc = (void *)0;
  return_label: 
#line 5619 
                return;
}


#line 5627  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_free_all_rx_resources(struct ixgbe_adapter *adapter)
{
  int i;
  
#line 5632 
  ixgbe_free_fcoe_ddp_resources(adapter);
  
#line 5635 
  i = 0;
  
#line 5635 
  goto ldv_58994;
  ldv_58993: 
#line 5636 
  ;
  
#line 5636 
  if ((adapter->rx_ring[i])->desc != (void *)0) 
#line 5637 
                                                ixgbe_free_rx_resources(adapter->rx_ring[i]); else ;
  
#line 5635 
  i += 1;
  ldv_58994: 
#line 5636 
  ;
  
#line 5635 
  if (adapter->num_rx_queues > i) 
#line 5637 
                                  goto ldv_58993; else 
#line 5640 
                                                       goto ldv_58995;
  ldv_58995: 
#line 5641 
  ;
  
#line 5642 
  return;
}


#line 5647  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static int ixgbe_change_mtu(struct net_device *netdev, int new_mtu)
{
  int __retres;
  bool tmp_0;
  
#line 5649 
  struct ixgbe_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 5650 
  int max_frame = new_mtu + 18;
  
#line 5653 
  if (new_mtu <= 67 || max_frame > 9728) {
    
#line 5654 
    __retres = -22;
    
#line 5654 
    goto return_label;
  }
  else ;
  
#line 5661 
  if (((adapter->flags & 8388608U) != 0U && adapter->hw.mac.type == (unsigned int)ixgbe_mac_82599EB) && max_frame > 1518) {
    
#line 5664 
    if (((int)adapter->msg_enable & 2) != 0) 
#line 5664 
                                             netdev_warn((struct net_device const *)adapter->netdev,"Setting MTU > 1500 will disable legacy VFs\n"); else ;
  }
  else ;
  
#line 5666 
  if (((int)adapter->msg_enable & 2) != 0) 
#line 5666 
                                           netdev_info((struct net_device const *)adapter->netdev,"changing MTU from %d to %d\n",netdev->mtu,new_mtu); else ;
  
#line 5669 
  netdev->mtu = (unsigned int)new_mtu;
  
#line 5671 
  tmp_0 = netif_running((struct net_device const *)netdev);
  
#line 5671 
  if ((int)tmp_0 != 0) 
#line 5672 
                       ixgbe_reinit_locked(adapter); else ;
  
#line 5674 
  __retres = 0;
  return_label: 
#line 5674 
                return __retres;
}


#line 5689  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static int ixgbe_open(struct net_device *netdev)
{
  int __retres;
  int err;
  int queues;
  int tmp_0;
  
#line 5691 
  struct ixgbe_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 5692 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 5696 
  tmp_0 = constant_test_bit(0L,(unsigned long const volatile *)(& adapter->state));
  
#line 5696 
  if (tmp_0 != 0) {
    
#line 5697 
    __retres = -16;
    
#line 5697 
    goto return_label;
  }
  else ;
  
#line 5699 
  netif_carrier_off(netdev);
  
#line 5702 
  err = ixgbe_setup_all_tx_resources(adapter);
  
#line 5703 
  if (err != 0) 
#line 5704 
                goto err_setup_tx; else ;
  
#line 5707 
  err = ixgbe_setup_all_rx_resources(adapter);
  
#line 5708 
  if (err != 0) 
#line 5709 
                goto err_setup_rx; else ;
  
#line 5711 
  ixgbe_configure(adapter);
  
#line 5713 
  err = ixgbe_request_irq(adapter);
  
#line 5714 
  if (err != 0) 
#line 5715 
                goto err_req_irq; else ;
  
#line 5718 
  if (adapter->num_rx_pools > 1) 
#line 5719 
                                 queues = adapter->num_rx_queues_per_pool; else 
                                                                    
#line 5721 
                                                                    queues = adapter->num_tx_queues;
  
#line 5723 
  err = netif_set_real_num_tx_queues(netdev,(unsigned int)queues);
  
#line 5724 
  if (err != 0) 
#line 5725 
                goto err_set_queues; else ;
  
#line 5727 
  if (adapter->num_rx_pools > 1 && adapter->num_rx_queues > 4) 
#line 5729 
                                                               queues = 4; else 
                                                                    
#line 5731 
                                                                    queues = adapter->num_rx_queues;
  
#line 5732 
  err = netif_set_real_num_rx_queues(netdev,(unsigned int)queues);
  
#line 5733 
  if (err != 0) 
#line 5734 
                goto err_set_queues; else ;
  
#line 5736 
  ixgbe_ptp_init(adapter);
  
#line 5738 
  ixgbe_up_complete(adapter);
  
#line 5741 
  vxlan_get_rx_port(netdev);
  
#line 5744 
  __retres = 0;
  
#line 5744 
  goto return_label;
  err_set_queues: 
#line 5746 
  ;
  
#line 5747 
  ixgbe_free_irq(adapter);
  err_req_irq: 
#line 5748 
  ;
  
#line 5749 
  ixgbe_free_all_rx_resources(adapter);
  
#line 5750 
  if (hw->phy.ops.set_phy_power != (s32 (*)(struct ixgbe_hw *, bool ))0 && adapter->wol == 0U) 
    
#line 5751 
    (*(hw->phy.ops.set_phy_power))(& adapter->hw,(_Bool)0); else ;
  err_setup_rx: 
#line 5752 
  ;
  
#line 5753 
  ixgbe_free_all_tx_resources(adapter);
  err_setup_tx: 
#line 5754 
  ;
  
#line 5755 
  ixgbe_reset(adapter);
  
#line 5757 
  __retres = err;
  return_label: 
#line 5757 
                return __retres;
}


#line 5760  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_close_suspend(struct ixgbe_adapter *adapter)
{
  
#line 5762 
  ixgbe_ptp_suspend(adapter);
  
#line 5764 
  ixgbe_down(adapter);
  
#line 5765 
  ixgbe_free_irq(adapter);
  
#line 5767 
  ixgbe_free_all_tx_resources(adapter);
  
#line 5768 
  ixgbe_free_all_rx_resources(adapter);
  
#line 5769 
  return;
}


#line 5782  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static int ixgbe_close(struct net_device *netdev)
{
  int __retres;
  
#line 5784 
  struct ixgbe_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 5786 
  ixgbe_ptp_stop(adapter);
  
#line 5788 
  ixgbe_close_suspend(adapter);
  
#line 5790 
  ixgbe_fdir_filter_exit(adapter);
  
#line 5792 
  ixgbe_release_hw_control(adapter);
  
#line 5794 
  __retres = 0;
  
#line 5794 
  return __retres;
}


#line 5798  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static int ixgbe_resume(struct pci_dev *pdev)
{
  int __retres;
  u32 err;
  int tmp_0;
  int tmp_1;
  
#line 5800 
  struct ixgbe_adapter *adapter = pci_get_drvdata(pdev);
  
#line 5801 
  struct net_device *netdev = adapter->netdev;
  
#line 5804 
  adapter->hw.hw_addr = adapter->io_addr;
  
#line 5805 
  pci_set_power_state(pdev,0);
  
#line 5806 
  pci_restore_state(pdev);
  
#line 5811 
  pci_save_state(pdev);
  
#line 5813 
  tmp_0 = pci_enable_device_mem(pdev);
  
#line 5813 
  err = (unsigned int)tmp_0;
  
#line 5814 
  if (err != 0U) {
    
#line 5815 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"Cannot enable PCI device from suspend\n");
    
#line 5816 
    __retres = (int)err;
    
#line 5816 
    goto return_label;
  }
  else ;
  
#line 5818 
  ldv_inline_asm();
  
#line 5819 
  set_bit(3L,(unsigned long volatile *)(& adapter->state));
  
#line 5820 
  pci_set_master(pdev);
  
#line 5822 
  pci_wake_from_d3(pdev,(_Bool)0);
  
#line 5824 
  ixgbe_reset(adapter);
  
#line 5826 
  ixgbe_write_reg(& adapter->hw,22544U,4294967295U);
  
#line 5828 
  rtnl_lock();
  
#line 5829 
  tmp_1 = ixgbe_init_interrupt_scheme(adapter);
  
#line 5829 
  err = (unsigned int)tmp_1;
  
#line 5830 
  if (err == 0U) {
    bool tmp_3;
    
#line 5830 
    tmp_3 = netif_running((struct net_device const *)netdev);
    
#line 5830 
    if ((int)tmp_3 != 0) {
      int tmp_2;
      
#line 5831 
      tmp_2 = ixgbe_open(netdev);
      
#line 5831 
      err = (unsigned int)tmp_2;
    }
    else ;
  }
  else ;
  
#line 5833 
  rtnl_unlock();
  
#line 5835 
  if (err != 0U) {
    
#line 5836 
    __retres = (int)err;
    
#line 5836 
    goto return_label;
  }
  else ;
  
#line 5838 
  netif_device_attach(netdev);
  
#line 5840 
  __retres = 0;
  return_label: 
#line 5840 
                return __retres;
}


#line 5844  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static int __ixgbe_shutdown(struct pci_dev *pdev, bool *enable_wake)
{
  int __retres;
  u32 ctrl;
  u32 fctrl;
  bool tmp_0;
  int tmp_1;
  
#line 5846 
  struct ixgbe_adapter *adapter = pci_get_drvdata(pdev);
  
#line 5847 
  struct net_device *netdev = adapter->netdev;
  
#line 5848 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 5850 
  u32 wufc = adapter->wol;
  
#line 5852 
  int retval = 0;
  
#line 5855 
  netif_device_detach(netdev);
  
#line 5857 
  rtnl_lock();
  
#line 5858 
  tmp_0 = netif_running((struct net_device const *)netdev);
  
#line 5858 
  if ((int)tmp_0 != 0) 
#line 5859 
                       ixgbe_close_suspend(adapter); else ;
  
#line 5860 
  rtnl_unlock();
  
#line 5862 
  ixgbe_clear_interrupt_scheme(adapter);
  
#line 5865 
  retval = pci_save_state(pdev);
  
#line 5866 
  if (retval != 0) {
    
#line 5867 
    __retres = retval;
    
#line 5867 
    goto return_label;
  }
  else ;
  
#line 5870 
  if (hw->mac.ops.stop_link_on_d3 != (void (*)(struct ixgbe_hw *))0) 
    
#line 5871 
    (*(hw->mac.ops.stop_link_on_d3))(hw); else ;
  
#line 5873 
  if (wufc != 0U) {
    
#line 5874 
    ixgbe_set_rx_mode(netdev);
    
#line 5877 
    if (hw->mac.ops.enable_tx_laser != (void (*)(struct ixgbe_hw *))0) 
      
#line 5878 
      (*(hw->mac.ops.enable_tx_laser))(hw); else ;
    
#line 5881 
    if ((wufc & 8U) != 0U) {
      
#line 5882 
      fctrl = ixgbe_read_reg(hw,20608U);
      
#line 5883 
      fctrl |= 256U;
      
#line 5884 
      ixgbe_write_reg(hw,20608U,fctrl);
    }
    else ;
    
#line 5887 
    ctrl = ixgbe_read_reg(hw,0U);
    
#line 5888 
    ctrl |= 4U;
    
#line 5889 
    ixgbe_write_reg(hw,0U,ctrl);
    
#line 5891 
    ixgbe_write_reg(hw,22536U,wufc);
  }
  else {
    
#line 5893 
    ixgbe_write_reg(hw,22528U,0U);
    
#line 5894 
    ixgbe_write_reg(hw,22536U,0U);
  }
  
#line 5897 
  switch ((unsigned int)hw->mac.type) {
    case (unsigned int)1: 
#line 5898 
    ;
    
#line 5899 
    pci_wake_from_d3(pdev,(_Bool)0);
    
#line 5900 
    goto ldv_59038;
    case (unsigned int)2: 
#line 5901 
    ;
    case (unsigned int)3: 
#line 5902 
    ;
    case (unsigned int)4: 
#line 5903 
    ;
    case (unsigned int)5: 
#line 5904 
    ;
    
#line 5905 
    pci_wake_from_d3(pdev,(_Bool)(wufc != 0U));
    
#line 5906 
    goto ldv_59038;
    default: 
#line 5907 
    ;
    
#line 5908 
    goto ldv_59038;
  }
  ldv_59038: 
#line 5911 
  ;
  
#line 5911 
  *enable_wake = (_Bool)(wufc != 0U);
  
#line 5912 
  if (hw->phy.ops.set_phy_power != (s32 (*)(struct ixgbe_hw *, bool ))0 && ! *enable_wake) 
    
#line 5913 
    (*(hw->phy.ops.set_phy_power))(hw,(_Bool)0); else ;
  
#line 5915 
  ixgbe_release_hw_control(adapter);
  
#line 5917 
  tmp_1 = test_and_set_bit(3L,(unsigned long volatile *)(& adapter->state));
  
#line 5917 
  if (tmp_1 == 0) 
#line 5918 
                  pci_disable_device(pdev); else ;
  
#line 5920 
  __retres = 0;
  return_label: 
#line 5920 
                return __retres;
}


#line 5924  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static int ixgbe_suspend(struct pci_dev *pdev, pm_message_t state)
{
  int __retres;
  int retval;
  bool wake;
  
#line 5929 
  retval = __ixgbe_shutdown(pdev,& wake);
  
#line 5930 
  if (retval != 0) {
    
#line 5931 
    __retres = retval;
    
#line 5931 
    goto return_label;
  }
  else ;
  
#line 5933 
  if ((int)wake != 0) 
#line 5934 
                      pci_prepare_to_sleep(pdev);
  else {
    
#line 5936 
    pci_wake_from_d3(pdev,(_Bool)0);
    
#line 5937 
    pci_set_power_state(pdev,3);
  }
  
#line 5940 
  __retres = 0;
  return_label: 
#line 5940 
                return __retres;
}


#line 5944  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_shutdown(struct pci_dev *pdev)
{
  bool wake;
  
#line 5948 
  __ixgbe_shutdown(pdev,& wake);
  
#line 5950 
  if (system_state == (unsigned int)SYSTEM_POWER_OFF) {
    
#line 5951 
    pci_wake_from_d3(pdev,(_Bool)((bool)((int)wake) != 0));
    
#line 5952 
    pci_set_power_state(pdev,3);
  }
  else ;
  
#line 5954 
  return;
}


#line 5960  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
void ixgbe_update_stats(struct ixgbe_adapter *adapter)
{
  u32 i;
  u32 mpc;
  u32 bprc;
  u32 lxon;
  u32 lxoff;
  u32 xon_off_tot;
  int tmp;
  u32 tmp_1;
  u32 tmp_2;
  u32 tmp_3;
  u32 tmp_9;
  u32 tmp_10;
  u32 tmp_13;
  u32 tmp_37;
  u32 tmp_38;
  u32 tmp_39;
  u32 tmp_40;
  u32 tmp_41;
  u32 tmp_42;
  u32 tmp_43;
  u32 tmp_44;
  u32 tmp_45;
  u32 tmp_46;
  u32 tmp_47;
  u32 tmp_48;
  u32 tmp_49;
  u32 tmp_50;
  u32 tmp_51;
  u32 tmp_52;
  u32 tmp_53;
  u32 tmp_54;
  u32 tmp_55;
  u32 tmp_56;
  u32 tmp_57;
  u32 tmp_58;
  
#line 5962 
  struct net_device *netdev = adapter->netdev;
  
#line 5963 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 5964 
  struct ixgbe_hw_stats *hwstats = & adapter->stats;
  
#line 5965 
  u64 total_mpc = 0ULL;
  
#line 5966 
  u32 missed_rx = 0U;
  
#line 5967 
  u64 non_eop_descs = 0ULL;
  
#line 5967 
  u64 restart_queue = 0ULL;
  
#line 5967 
  u64 tx_busy = 0ULL;
  
#line 5968 
  u64 alloc_rx_page_failed = 0ULL;
  
#line 5968 
  u64 alloc_rx_buff_failed = 0ULL;
  
#line 5969 
  u64 bytes = 0ULL;
  
#line 5969 
  u64 packets = 0ULL;
  
#line 5969 
  u64 hw_csum_rx_error = 0ULL;
  
#line 5971 
  tmp = constant_test_bit(2L,(unsigned long const volatile *)(& adapter->state));
  
#line 5971 
  if (tmp != 0) 
#line 5973 
                goto return_label;
  else {
    int tmp_0;
    
#line 5971 
    tmp_0 = constant_test_bit(1L,(unsigned long const volatile *)(& adapter->state));
    
#line 5971 
    if (tmp_0 != 0) 
#line 5973 
                    goto return_label; else ;
  }
  
#line 5975 
  if ((adapter->flags2 & 2U) != 0U) {
    
#line 5976 
    u64 rsc_count = 0ULL;
    
#line 5977 
    u64 rsc_flush = 0ULL;
    
#line 5978 
    i = 0U;
    
#line 5978 
    goto ldv_59079;
    ldv_59078: 
#line 5979 
    ;
    
#line 5979 
    rsc_count = (adapter->rx_ring[i])->__anonCompField_ixgbe_ring_120.rx_stats.rsc_count + rsc_count;
    
#line 5980 
    rsc_flush = (adapter->rx_ring[i])->__anonCompField_ixgbe_ring_120.rx_stats.rsc_flush + rsc_flush;
    
#line 5978 
    i += 1U;
    ldv_59079: 
#line 5979 
    ;
    
#line 5978 
    if ((unsigned int)adapter->num_rx_queues > i) 
#line 5980 
                                                  goto ldv_59078; else 
                                                                    
#line 5983 
                                                                    goto ldv_59080;
    ldv_59080: 
#line 5984 
    ;
    
#line 5982 
    adapter->rsc_total_count = rsc_count;
    
#line 5983 
    adapter->rsc_total_flush = rsc_flush;
  }
  else ;
  
#line 5986 
  i = 0U;
  
#line 5986 
  goto ldv_59083;
  ldv_59082: 
#line 5987 
  ;
  {
    
#line 5987 
    struct ixgbe_ring *rx_ring = adapter->rx_ring[i];
    
#line 5988 
    non_eop_descs = rx_ring->__anonCompField_ixgbe_ring_120.rx_stats.non_eop_descs + non_eop_descs;
    
#line 5989 
    alloc_rx_page_failed = rx_ring->__anonCompField_ixgbe_ring_120.rx_stats.alloc_rx_page_failed + alloc_rx_page_failed;
    
#line 5990 
    alloc_rx_buff_failed = rx_ring->__anonCompField_ixgbe_ring_120.rx_stats.alloc_rx_buff_failed + alloc_rx_buff_failed;
    
#line 5991 
    hw_csum_rx_error = rx_ring->__anonCompField_ixgbe_ring_120.rx_stats.csum_err + hw_csum_rx_error;
    
#line 5992 
    bytes = rx_ring->stats.bytes + bytes;
    
#line 5993 
    packets = rx_ring->stats.packets + packets;
  }
  
#line 5986 
  i += 1U;
  ldv_59083: 
#line 5987 
  ;
  
#line 5986 
  if ((unsigned int)adapter->num_rx_queues > i) 
#line 5988 
                                                goto ldv_59082; else 
                                                                  
#line 5991 
                                                                  goto ldv_59084;
  ldv_59084: 
#line 5992 
  ;
  
#line 5995 
  adapter->non_eop_descs = non_eop_descs;
  
#line 5996 
  adapter->alloc_rx_page_failed = (unsigned int)alloc_rx_page_failed;
  
#line 5997 
  adapter->alloc_rx_buff_failed = (unsigned int)alloc_rx_buff_failed;
  
#line 5998 
  adapter->hw_csum_rx_error = hw_csum_rx_error;
  
#line 5999 
  netdev->stats.rx_bytes = (unsigned long)bytes;
  
#line 6000 
  netdev->stats.rx_packets = (unsigned long)packets;
  
#line 6002 
  bytes = 0ULL;
  
#line 6003 
  packets = 0ULL;
  
#line 6005 
  i = 0U;
  
#line 6005 
  goto ldv_59087;
  ldv_59086: 
#line 6006 
  ;
  {
    
#line 6006 
    struct ixgbe_ring *tx_ring = adapter->tx_ring[i];
    
#line 6007 
    restart_queue = tx_ring->__anonCompField_ixgbe_ring_120.tx_stats.restart_queue + restart_queue;
    
#line 6008 
    tx_busy = tx_ring->__anonCompField_ixgbe_ring_120.tx_stats.tx_busy + tx_busy;
    
#line 6009 
    bytes = tx_ring->stats.bytes + bytes;
    
#line 6010 
    packets = tx_ring->stats.packets + packets;
  }
  
#line 6005 
  i += 1U;
  ldv_59087: 
#line 6006 
  ;
  
#line 6005 
  if ((unsigned int)adapter->num_tx_queues > i) 
#line 6007 
                                                goto ldv_59086; else 
                                                                  
#line 6010 
                                                                  goto ldv_59088;
  ldv_59088: 
#line 6011 
  ;
  
#line 6012 
  adapter->restart_queue = restart_queue;
  
#line 6013 
  adapter->tx_busy = tx_busy;
  
#line 6014 
  netdev->stats.tx_bytes = (unsigned long)bytes;
  
#line 6015 
  netdev->stats.tx_packets = (unsigned long)packets;
  
#line 6017 
  tmp_1 = ixgbe_read_reg(hw,16384U);
  
#line 6017 
  hwstats->crcerrs += (unsigned long long)tmp_1;
  
#line 6020 
  i = 0U;
  
#line 6020 
  goto ldv_59097;
  ldv_59096: 
#line 6021 
  ;
  
#line 6022 
  mpc = ixgbe_read_reg(hw,(i + 4072U) * 4U);
  
#line 6023 
  missed_rx += mpc;
  
#line 6024 
  hwstats->mpc[i] += (unsigned long long)mpc;
  
#line 6025 
  total_mpc = hwstats->mpc[i] + total_mpc;
  
#line 6026 
  tmp_2 = ixgbe_read_reg(hw,(i + 4032U) * 4U);
  
#line 6026 
  hwstats->pxontxc[i] += (unsigned long long)tmp_2;
  
#line 6027 
  tmp_3 = ixgbe_read_reg(hw,(i + 4040U) * 4U);
  
#line 6027 
  hwstats->pxofftxc[i] += (unsigned long long)tmp_3;
  
#line 6028 
  switch ((unsigned int)hw->mac.type) {
    u32 tmp_4;
    u32 tmp_5;
    u32 tmp_6;
    u32 tmp_7;
    u32 tmp_8;
    case (unsigned int)1: 
#line 6029 
    ;
    
#line 6030 
    tmp_4 = ixgbe_read_reg(hw,(i + 4080U) * 4U);
    
#line 6030 
    hwstats->rnbc[i] += (unsigned long long)tmp_4;
    
#line 6031 
    tmp_5 = ixgbe_read_reg(hw,i * 64U + 24628U);
    
#line 6031 
    hwstats->qbtc[i] += (unsigned long long)tmp_5;
    
#line 6032 
    tmp_6 = ixgbe_read_reg(hw,i * 64U + 4148U);
    
#line 6032 
    hwstats->qbrc[i] += (unsigned long long)tmp_6;
    
#line 6034 
    tmp_7 = ixgbe_read_reg(hw,(i + 13248U) * 4U);
    
#line 6034 
    hwstats->pxonrxc[i] += (unsigned long long)tmp_7;
    
#line 6035 
    goto ldv_59090;
    case (unsigned int)2: 
#line 6036 
    ;
    case (unsigned int)3: 
#line 6037 
    ;
    case (unsigned int)4: 
#line 6038 
    ;
    case (unsigned int)5: 
#line 6039 
    ;
    
#line 6041 
    tmp_8 = ixgbe_read_reg(hw,(i + 4176U) * 4U);
    
#line 6041 
    hwstats->pxonrxc[i] += (unsigned long long)tmp_8;
    
#line 6042 
    goto ldv_59090;
    default: 
#line 6043 
    ;
    
#line 6044 
    goto ldv_59090;
  }
  ldv_59090: 
#line 6046 
  ;
  
#line 6020 
  i += 1U;
  ldv_59097: 
#line 6021 
  ;
  
#line 6020 
  if (i <= 7U) 
#line 6022 
               goto ldv_59096; else 
#line 6025 
                                    goto ldv_59098;
  ldv_59098: 
#line 6026 
  ;
  
#line 6049 
  i = 0U;
  
#line 6049 
  goto ldv_59100;
  ldv_59099: 
#line 6050 
  ;
  
#line 6050 
  tmp_9 = ixgbe_read_reg(hw,i * 64U + 24624U);
  
#line 6050 
  hwstats->qptc[i] += (unsigned long long)tmp_9;
  
#line 6051 
  tmp_10 = ixgbe_read_reg(hw,i * 64U + 4144U);
  
#line 6051 
  hwstats->qprc[i] += (unsigned long long)tmp_10;
  
#line 6054 
  if ((unsigned int)hw->mac.type + 4294967294U <= 3U) {
    u32 tmp_11;
    u32 tmp_12;
    
#line 6056 
    tmp_11 = ixgbe_read_reg(hw,(i + 4320U) * 8U);
    
#line 6056 
    hwstats->qbtc[i] += (unsigned long long)tmp_11;
    
#line 6057 
    ixgbe_read_reg(hw,i * 8U + 34564U);
    
#line 6058 
    tmp_12 = ixgbe_read_reg(hw,i * 64U + 4148U);
    
#line 6058 
    hwstats->qbrc[i] += (unsigned long long)tmp_12;
    
#line 6059 
    ixgbe_read_reg(hw,i * 64U + 4152U);
  }
  else ;
  
#line 6049 
  i += 1U;
  ldv_59100: 
#line 6050 
  ;
  
#line 6049 
  if (i <= 15U) 
#line 6051 
                goto ldv_59099; else 
#line 6054 
                                     goto ldv_59101;
  ldv_59101: 
#line 6055 
  ;
  
#line 6063 
  tmp_13 = ixgbe_read_reg(hw,16500U);
  
#line 6063 
  hwstats->gprc += (unsigned long long)tmp_13;
  
#line 6065 
  hwstats->gprc -= (unsigned long long)missed_rx;
  
#line 6067 
  ixgbe_update_xoff_received(adapter);
  
#line 6070 
  switch ((unsigned int)hw->mac.type) {
    u32 tmp_14;
    u32 tmp_15;
    u32 tmp_16;
    u32 tmp_17;
    u32 tmp_18;
    u32 tmp_19;
    u32 tmp_20;
    u32 tmp_21;
    u32 tmp_22;
    u32 tmp_23;
    u32 tmp_24;
    u32 tmp_25;
    u32 tmp_26;
    u32 tmp_27;
    u32 tmp_28;
    u32 tmp_29;
    u32 tmp_30;
    u32 tmp_31;
    u32 tmp_32;
    u32 tmp_33;
    u32 tmp_34;
    case (unsigned int)1: 
#line 6071 
    ;
    
#line 6072 
    tmp_14 = ixgbe_read_reg(hw,53088U);
    
#line 6072 
    hwstats->lxonrxc += (unsigned long long)tmp_14;
    
#line 6073 
    tmp_15 = ixgbe_read_reg(hw,16524U);
    
#line 6073 
    hwstats->gorc += (unsigned long long)tmp_15;
    
#line 6074 
    tmp_16 = ixgbe_read_reg(hw,16532U);
    
#line 6074 
    hwstats->gotc += (unsigned long long)tmp_16;
    
#line 6075 
    tmp_17 = ixgbe_read_reg(hw,16580U);
    
#line 6075 
    hwstats->tor += (unsigned long long)tmp_17;
    
#line 6076 
    goto ldv_59103;
    case (unsigned int)3: 
#line 6077 
    ;
    case (unsigned int)4: 
#line 6078 
    ;
    case (unsigned int)5: 
#line 6079 
    ;
    
#line 6081 
    tmp_18 = ixgbe_read_reg(hw,16836U);
    
#line 6081 
    hwstats->o2bgptc += (unsigned long long)tmp_18;
    
#line 6082 
    tmp_19 = ixgbe_read_reg(hw,34736U);
    
#line 6082 
    hwstats->o2bspc += (unsigned long long)tmp_19;
    
#line 6083 
    tmp_20 = ixgbe_read_reg(hw,16832U);
    
#line 6083 
    hwstats->b2ospc += (unsigned long long)tmp_20;
    
#line 6084 
    tmp_21 = ixgbe_read_reg(hw,12176U);
    
#line 6084 
    hwstats->b2ogprc += (unsigned long long)tmp_21;
    case (unsigned int)2: 
#line 6085 
    ;
    
#line 6086 
    i = 0U;
    
#line 6086 
    goto ldv_59109;
    ldv_59108: 
#line 6087 
    ;
    
#line 6088 
    tmp_22 = ixgbe_read_reg(hw,i * 64U + 5168U);
    
#line 6088 
    adapter->hw_rx_no_dma_resources += (unsigned long long)tmp_22;
    
#line 6086 
    i += 1U;
    ldv_59109: 
#line 6087 
    ;
    
#line 6086 
    if (i <= 15U) 
#line 6088 
                  goto ldv_59108; else 
#line 6091 
                                       goto ldv_59110;
    ldv_59110: 
#line 6092 
    ;
    
#line 6089 
    tmp_23 = ixgbe_read_reg(hw,16520U);
    
#line 6089 
    hwstats->gorc += (unsigned long long)tmp_23;
    
#line 6090 
    ixgbe_read_reg(hw,16524U);
    
#line 6091 
    tmp_24 = ixgbe_read_reg(hw,16528U);
    
#line 6091 
    hwstats->gotc += (unsigned long long)tmp_24;
    
#line 6092 
    ixgbe_read_reg(hw,16532U);
    
#line 6093 
    tmp_25 = ixgbe_read_reg(hw,16576U);
    
#line 6093 
    hwstats->tor += (unsigned long long)tmp_25;
    
#line 6094 
    ixgbe_read_reg(hw,16580U);
    
#line 6095 
    tmp_26 = ixgbe_read_reg(hw,16804U);
    
#line 6095 
    hwstats->lxonrxc += (unsigned long long)tmp_26;
    
#line 6096 
    tmp_27 = ixgbe_read_reg(hw,61016U);
    
#line 6096 
    hwstats->fdirmatch += (unsigned long long)tmp_27;
    
#line 6097 
    tmp_28 = ixgbe_read_reg(hw,61020U);
    
#line 6097 
    hwstats->fdirmiss += (unsigned long long)tmp_28;
    
#line 6099 
    tmp_29 = ixgbe_read_reg(hw,20760U);
    
#line 6099 
    hwstats->fccrc += (unsigned long long)tmp_29;
    
#line 6100 
    tmp_30 = ixgbe_read_reg(hw,9244U);
    
#line 6100 
    hwstats->fcoerpdc += (unsigned long long)tmp_30;
    
#line 6101 
    tmp_31 = ixgbe_read_reg(hw,9256U);
    
#line 6101 
    hwstats->fcoeprc += (unsigned long long)tmp_31;
    
#line 6102 
    tmp_32 = ixgbe_read_reg(hw,34692U);
    
#line 6102 
    hwstats->fcoeptc += (unsigned long long)tmp_32;
    
#line 6103 
    tmp_33 = ixgbe_read_reg(hw,9260U);
    
#line 6103 
    hwstats->fcoedwrc += (unsigned long long)tmp_33;
    
#line 6104 
    tmp_34 = ixgbe_read_reg(hw,34696U);
    
#line 6104 
    hwstats->fcoedwtc += (unsigned long long)tmp_34;
    
#line 6106 
    if (adapter->fcoe.ddp_pool != (struct ixgbe_fcoe_ddp_pool *)0) {
      struct ixgbe_fcoe_ddp_pool *ddp_pool;
      unsigned int cpu;
      struct ixgbe_fcoe_ddp_pool *tmp_36;
      
#line 6107 
      struct ixgbe_fcoe *fcoe = & adapter->fcoe;
      
#line 6110 
      u64 noddp = 0ULL;
      
#line 6110 
      u64 noddp_ext_buff = 0ULL;
      
#line 6111 
      cpu = 4294967295U;
      
#line 6111 
      goto ldv_59121;
      ldv_59120: 
#line 6112 
      ;
      {
        struct ixgbe_fcoe_ddp_pool *tmp_35_0;
        {
          
#line 6112 
          void const *__vpp_verify = (void const *)0;
          
#line 6112 
          void const *tmp_35 = __vpp_verify;
        }
        {
          unsigned long __ptr;
          
#line 6113 
          ldv_inline_asm();
          
#line 6112 
          tmp_35_0 = (struct ixgbe_fcoe_ddp_pool *)(__per_cpu_offset[cpu] + __ptr);
        }
        
#line 6112 
        tmp_36 = tmp_35_0;
      }
      
#line 6112 
      ddp_pool = tmp_36;
      
#line 6113 
      noddp = ddp_pool->noddp + noddp;
      
#line 6114 
      noddp_ext_buff = ddp_pool->noddp_ext_buff + noddp_ext_buff;
      ldv_59121: 
#line 6115 
      ;
      
#line 6111 
      cpu = cpumask_next((int)cpu,cpu_possible_mask);
      
#line 6111 
      if (cpu < (unsigned int)nr_cpu_ids) 
#line 6113 
                                          goto ldv_59120; else 
#line 6116 
                                                               goto ldv_59122;
      ldv_59122: 
#line 6117 
      ;
      
#line 6116 
      hwstats->fcoe_noddp = noddp;
      
#line 6117 
      hwstats->fcoe_noddp_ext_buff = noddp_ext_buff;
    }
    else ;
    
#line 6120 
    goto ldv_59103;
    default: 
#line 6121 
    ;
    
#line 6122 
    goto ldv_59103;
  }
  ldv_59103: 
#line 6124 
  ;
  
#line 6124 
  bprc = ixgbe_read_reg(hw,16504U);
  
#line 6125 
  hwstats->bprc += (unsigned long long)bprc;
  
#line 6126 
  tmp_37 = ixgbe_read_reg(hw,16508U);
  
#line 6126 
  hwstats->mprc += (unsigned long long)tmp_37;
  
#line 6127 
  if (hw->mac.type == (unsigned int)ixgbe_mac_82598EB) 
#line 6128 
                                                       hwstats->mprc -= (unsigned long long)bprc; else ;
  
#line 6129 
  tmp_38 = ixgbe_read_reg(hw,16556U);
  
#line 6129 
  hwstats->roc += (unsigned long long)tmp_38;
  
#line 6130 
  tmp_39 = ixgbe_read_reg(hw,16476U);
  
#line 6130 
  hwstats->prc64 += (unsigned long long)tmp_39;
  
#line 6131 
  tmp_40 = ixgbe_read_reg(hw,16480U);
  
#line 6131 
  hwstats->prc127 += (unsigned long long)tmp_40;
  
#line 6132 
  tmp_41 = ixgbe_read_reg(hw,16484U);
  
#line 6132 
  hwstats->prc255 += (unsigned long long)tmp_41;
  
#line 6133 
  tmp_42 = ixgbe_read_reg(hw,16488U);
  
#line 6133 
  hwstats->prc511 += (unsigned long long)tmp_42;
  
#line 6134 
  tmp_43 = ixgbe_read_reg(hw,16492U);
  
#line 6134 
  hwstats->prc1023 += (unsigned long long)tmp_43;
  
#line 6135 
  tmp_44 = ixgbe_read_reg(hw,16496U);
  
#line 6135 
  hwstats->prc1522 += (unsigned long long)tmp_44;
  
#line 6136 
  tmp_45 = ixgbe_read_reg(hw,16448U);
  
#line 6136 
  hwstats->rlec += (unsigned long long)tmp_45;
  
#line 6137 
  lxon = ixgbe_read_reg(hw,16224U);
  
#line 6138 
  hwstats->lxontxc += (unsigned long long)lxon;
  
#line 6139 
  lxoff = ixgbe_read_reg(hw,16232U);
  
#line 6140 
  hwstats->lxofftxc += (unsigned long long)lxoff;
  
#line 6141 
  tmp_46 = ixgbe_read_reg(hw,16512U);
  
#line 6141 
  hwstats->gptc += (unsigned long long)tmp_46;
  
#line 6142 
  tmp_47 = ixgbe_read_reg(hw,16624U);
  
#line 6142 
  hwstats->mptc += (unsigned long long)tmp_47;
  
#line 6146 
  xon_off_tot = lxon + lxoff;
  
#line 6147 
  hwstats->gptc -= (unsigned long long)xon_off_tot;
  
#line 6148 
  hwstats->mptc -= (unsigned long long)xon_off_tot;
  
#line 6149 
  hwstats->gotc -= (unsigned long long)(xon_off_tot * 64U);
  
#line 6150 
  tmp_48 = ixgbe_read_reg(hw,16548U);
  
#line 6150 
  hwstats->ruc += (unsigned long long)tmp_48;
  
#line 6151 
  tmp_49 = ixgbe_read_reg(hw,16552U);
  
#line 6151 
  hwstats->rfc += (unsigned long long)tmp_49;
  
#line 6152 
  tmp_50 = ixgbe_read_reg(hw,16560U);
  
#line 6152 
  hwstats->rjc += (unsigned long long)tmp_50;
  
#line 6153 
  tmp_51 = ixgbe_read_reg(hw,16592U);
  
#line 6153 
  hwstats->tpr += (unsigned long long)tmp_51;
  
#line 6154 
  tmp_52 = ixgbe_read_reg(hw,16600U);
  
#line 6154 
  hwstats->ptc64 += (unsigned long long)tmp_52;
  
#line 6155 
  hwstats->ptc64 -= (unsigned long long)xon_off_tot;
  
#line 6156 
  tmp_53 = ixgbe_read_reg(hw,16604U);
  
#line 6156 
  hwstats->ptc127 += (unsigned long long)tmp_53;
  
#line 6157 
  tmp_54 = ixgbe_read_reg(hw,16608U);
  
#line 6157 
  hwstats->ptc255 += (unsigned long long)tmp_54;
  
#line 6158 
  tmp_55 = ixgbe_read_reg(hw,16612U);
  
#line 6158 
  hwstats->ptc511 += (unsigned long long)tmp_55;
  
#line 6159 
  tmp_56 = ixgbe_read_reg(hw,16616U);
  
#line 6159 
  hwstats->ptc1023 += (unsigned long long)tmp_56;
  
#line 6160 
  tmp_57 = ixgbe_read_reg(hw,16620U);
  
#line 6160 
  hwstats->ptc1522 += (unsigned long long)tmp_57;
  
#line 6161 
  tmp_58 = ixgbe_read_reg(hw,16628U);
  
#line 6161 
  hwstats->bptc += (unsigned long long)tmp_58;
  
#line 6164 
  netdev->stats.multicast = (unsigned long)hwstats->mprc;
  
#line 6167 
  netdev->stats.rx_errors = (unsigned long)(hwstats->crcerrs + hwstats->rlec);
  
#line 6168 
  netdev->stats.rx_dropped = 0UL;
  
#line 6169 
  netdev->stats.rx_length_errors = (unsigned long)hwstats->rlec;
  
#line 6170 
  netdev->stats.rx_crc_errors = (unsigned long)hwstats->crcerrs;
  
#line 6171 
  netdev->stats.rx_missed_errors = (unsigned long)total_mpc;
  return_label: 
#line 6172 
                return;
}


#line 6178  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_fdir_reinit_subtask(struct ixgbe_adapter *adapter)
{
  int i;
  int tmp;
  s32 tmp_0;
  
#line 6180 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 6183 
  if ((adapter->flags2 & 128U) == 0U) 
#line 6184 
                                      goto return_label; else ;
  
#line 6186 
  adapter->flags2 &= 4294967167U;
  
#line 6189 
  tmp = constant_test_bit(2L,(unsigned long const volatile *)(& adapter->state));
  
#line 6189 
  if (tmp != 0) 
#line 6190 
                goto return_label; else ;
  
#line 6193 
  if ((adapter->flags & 262144U) == 0U) 
#line 6194 
                                        goto return_label; else ;
  
#line 6196 
  adapter->fdir_overflow += 1UL;
  
#line 6198 
  tmp_0 = ixgbe_reinit_fdir_tables_82599(hw);
  
#line 6198 
  if (tmp_0 == 0) {
    
#line 6199 
    i = 0;
    
#line 6199 
    goto ldv_59130;
    ldv_59129: 
#line 6200 
    ;
    
#line 6200 
    set_bit(0L,(unsigned long volatile *)(& (adapter->tx_ring[i])->state));
    
#line 6199 
    i += 1;
    ldv_59130: 
#line 6200 
    ;
    
#line 6199 
    if (adapter->num_tx_queues > i) 
#line 6201 
                                    goto ldv_59129; else 
#line 6204 
                                                         goto ldv_59131;
    ldv_59131: 
#line 6205 
    ;
    
#line 6203 
    ixgbe_write_reg(hw,2176U,65536U);
  }
  else 
    
#line 6205 
    if (((int)adapter->msg_enable & 2) != 0) 
#line 6205 
                                             netdev_err((struct net_device const *)adapter->netdev,"failed to finish FDIR re-initialization, "); else ;
  return_label: 
#line 6206 
                return;
}


#line 6219  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_check_hang_subtask(struct ixgbe_adapter *adapter)
{
  int i;
  int tmp;
  bool tmp_2;
  
#line 6221 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 6222 
  u64 eics = 0ULL;
  
#line 6226 
  tmp = constant_test_bit(2L,(unsigned long const volatile *)(& adapter->state));
  
#line 6226 
  if (tmp != 0) 
#line 6229 
                goto return_label;
  else {
    int tmp_0;
    
#line 6226 
    tmp_0 = constant_test_bit(4L,(unsigned long const volatile *)(& adapter->state));
    
#line 6226 
    if (tmp_0 != 0) 
#line 6229 
                    goto return_label;
    else {
      int tmp_1;
      
#line 6227 
      tmp_1 = constant_test_bit(1L,(unsigned long const volatile *)(& adapter->state));
      
#line 6227 
      if (tmp_1 != 0) 
#line 6229 
                      goto return_label; else ;
    }
  }
  
#line 6232 
  tmp_2 = netif_carrier_ok((struct net_device const *)adapter->netdev);
  
#line 6232 
  if ((int)tmp_2 != 0) {
    
#line 6233 
    i = 0;
    
#line 6233 
    goto ldv_59139;
    ldv_59138: 
#line 6234 
    ;
    
#line 6234 
    set_bit(2L,(unsigned long volatile *)(& (adapter->tx_ring[i])->state));
    
#line 6233 
    i += 1;
    ldv_59139: 
#line 6234 
    ;
    
#line 6233 
    if (adapter->num_tx_queues > i) 
#line 6235 
                                    goto ldv_59138; else 
#line 6238 
                                                         goto ldv_59140;
    ldv_59140: 
#line 6239 
    ;
  }
  else ;
  
#line 6237 
  if ((adapter->flags & 8U) == 0U) 
#line 6243 
                                   ixgbe_write_reg(hw,2056U,3221225472U);
  else {
    
#line 6247 
    i = 0;
    
#line 6247 
    goto ldv_59143;
    ldv_59142: 
#line 6248 
    ;
    {
      
#line 6248 
      struct ixgbe_q_vector *qv = adapter->q_vector[i];
      
#line 6249 
      if (qv->rx.ring != (struct ixgbe_ring *)0 || qv->tx.ring != (struct ixgbe_ring *)0) 
        
#line 6250 
        eics = (1ULL << i) | eics; else ;
    }
    
#line 6247 
    i += 1;
    ldv_59143: 
#line 6248 
    ;
    
#line 6247 
    if (adapter->num_q_vectors > i) 
#line 6249 
                                    goto ldv_59142; else 
#line 6252 
                                                         goto ldv_59144;
    ldv_59144: 
#line 6253 
    ;
  }
  
#line 6255 
  ixgbe_irq_rearm_queues(adapter,eics);
  return_label: 
#line 6256 
                return;
}


#line 6263  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_watchdog_update_link(struct ixgbe_adapter *adapter)
{
  
#line 6265 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 6266 
  u32 link_speed = adapter->link_speed;
  
#line 6267 
  bool link_up = adapter->link_up;
  
#line 6268 
  bool pfc_en = adapter->dcb_cfg.pfc_mode_enable;
  
#line 6270 
  if ((adapter->flags & 65536U) == 0U) 
#line 6271 
                                       goto return_label; else ;
  
#line 6273 
  if (hw->mac.ops.check_link != (s32 (*)(struct ixgbe_hw *, ixgbe_link_speed *, bool *, bool ))0) 
    
#line 6274 
    (*(hw->mac.ops.check_link))(hw,& link_speed,& link_up,(_Bool)0);
  else {
    
#line 6277 
    link_speed = 128U;
    
#line 6278 
    link_up = (_Bool)1;
  }
  
#line 6281 
  if (adapter->ixgbe_ieee_pfc != (struct ieee_pfc *)0) 
#line 6282 
                                                       pfc_en = (_Bool)(((int)pfc_en | ((unsigned int)(adapter->ixgbe_ieee_pfc)->pfc_en != 0U)) != 0); else ;
  
#line 6284 
  if ((int)link_up != 0 && ((adapter->flags & 4096U) == 0U || ! pfc_en)) {
    
#line 6285 
    (*(hw->mac.ops.fc_enable))(hw);
    
#line 6286 
    ixgbe_set_rx_drop_en(adapter);
  }
  else ;
  
#line 6289 
  if ((int)link_up != 0) 
#line 6289 
                         goto _LOR;
  else {
    int tmp;
    {
      unsigned long __dummy;
      unsigned long volatile __dummy2;
      
#line 6290 
      tmp = 1;
    }
    
#line 6289 
    if (tmp != 0) {
      int tmp_0;
      {
        unsigned long __dummy_0;
        unsigned long __dummy2_0;
        
#line 6290 
        tmp_0 = 1;
      }
      
#line 6290 
      if (tmp_0 != 0) {
        
#line 6290 
        if ((long)((adapter->link_check_timeout - jiffies) + 1000UL) < 0L) {
          _LOR: {
                  
#line 6292 
                  adapter->flags &= 4294901759U;
                  
#line 6293 
                  ixgbe_write_reg(hw,2176U,1048576U);
                  
#line 6294 
                  ixgbe_read_reg(hw,8U);
                }
        }
        else ;
      }
      else ;
    }
    else ;
  }
  
#line 6297 
  adapter->link_up = link_up;
  
#line 6298 
  adapter->link_speed = link_speed;
  return_label: 
#line 6299 
                return;
}


#line 6301  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_update_default_up(struct ixgbe_adapter *adapter)
{
  
#line 6304 
  struct net_device *netdev = adapter->netdev;
  
#line 6305 
  struct dcb_app app = {.selector = (unsigned char)1U, .priority = (unsigned char)0, .protocol = (unsigned short)0U};
  
#line 6309 
  u8 up_0 = (unsigned char)0U;
  
#line 6311 
  if (((int)adapter->dcbx_cap & 8) != 0) 
#line 6312 
                                         up_0 = dcb_ieee_getapp_mask(netdev,& app); else ;
  
#line 6314 
  if ((unsigned int)up_0 > 1U) {
    int tmp;
    
#line 6314 
    tmp = ffs((int)up_0);
    
#line 6314 
    adapter->default_up = (unsigned char)((unsigned int)((unsigned char)tmp) + 255U);
  }
  else 
#line 6314 
       adapter->default_up = (unsigned char)0U;
  
#line 6315 
  return;
}


#line 6323  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_watchdog_link_is_up(struct ixgbe_adapter *adapter)
{
  struct net_device *upper;
  struct list_head *iter;
  bool flow_rx;
  bool flow_tx;
  bool tmp;
  int tmp_4;
  bool tmp_12;
  
#line 6325 
  struct net_device *netdev = adapter->netdev;
  
#line 6326 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 6329 
  u32 link_speed = adapter->link_speed;
  
#line 6333 
  tmp = netif_carrier_ok((struct net_device const *)netdev);
  
#line 6333 
  if ((int)tmp != 0) 
#line 6334 
                     goto return_label; else ;
  
#line 6336 
  adapter->flags2 &= 4294967279U;
  
#line 6338 
  switch ((unsigned int)hw->mac.type) {
    case (unsigned int)1: 
#line 6339 
    ;
    {
      
#line 6340 
      u32 frctl = ixgbe_read_reg(hw,20608U);
      
#line 6341 
      u32 rmcs = ixgbe_read_reg(hw,15616U);
      
#line 6342 
      flow_rx = (_Bool)((frctl & 32768U) != 0U);
      
#line 6343 
      flow_tx = (_Bool)((rmcs & 8U) != 0U);
    }
    
#line 6345 
    goto ldv_59177;
    case (unsigned int)3: 
#line 6346 
    ;
    case (unsigned int)4: 
#line 6347 
    ;
    case (unsigned int)5: 
#line 6348 
    ;
    case (unsigned int)2: 
#line 6349 
    ;
    {
      
#line 6350 
      u32 mflcn = ixgbe_read_reg(hw,17044U);
      
#line 6351 
      u32 fccfg = ixgbe_read_reg(hw,15616U);
      
#line 6352 
      flow_rx = (_Bool)((mflcn & 8U) != 0U);
      
#line 6353 
      flow_tx = (_Bool)((fccfg & 8U) != 0U);
    }
    
#line 6355 
    goto ldv_59177;
    default: 
#line 6356 
    ;
    
#line 6357 
    flow_tx = (_Bool)0;
    
#line 6358 
    flow_rx = (_Bool)0;
    
#line 6359 
    goto ldv_59177;
  }
  ldv_59177: 
#line 6362 
  ;
  
#line 6362 
  adapter->last_rx_ptp_check = jiffies;
  
#line 6364 
  tmp_4 = constant_test_bit(8L,(unsigned long const volatile *)(& adapter->state));
  
#line 6364 
  if (tmp_4 != 0) 
#line 6365 
                  ixgbe_ptp_start_cyclecounter(adapter); else ;
  
#line 6367 
  if (((int)adapter->msg_enable & 1) != 0) {
    char *tmp_7;
    char *tmp_10;
    
#line 6367 
    if ((int)flow_rx == 0 || (int)flow_tx == 0) {
      char *tmp_6;
      
#line 6367 
      if (flow_rx) 
#line 6367 
                   tmp_6 = (char *)"RX";
      else {
        char *tmp_5;
        
#line 6367 
        if ((int)flow_tx != 0) 
#line 6367 
                               tmp_5 = (char *)"TX"; else 
#line 6367 
                                                          tmp_5 = (char *)"None";
        
#line 6367 
        tmp_6 = tmp_5;
      }
      
#line 6367 
      tmp_7 = tmp_6;
    }
    else 
#line 6367 
         tmp_7 = (char *)"RX/TX";
    
#line 6367 
    if (link_speed != 128U) {
      char *tmp_9;
      
#line 6367 
      if (link_speed != 32U) {
        char *tmp_8;
        
#line 6367 
        if (link_speed == 8U) 
#line 6367 
                              tmp_8 = (char *)"100 Mbps"; else 
#line 6367 
                                                               tmp_8 = (char *)"unknown speed";
        
#line 6367 
        tmp_9 = tmp_8;
      }
      else 
#line 6367 
           tmp_9 = (char *)"1 Gbps";
      
#line 6367 
      tmp_10 = tmp_9;
    }
    else 
#line 6367 
         tmp_10 = (char *)"10 Gbps";
    
#line 6367 
    ;
    
#line 6367 
    netdev_info((struct net_device const *)adapter->netdev,"NIC Link is Up %s, Flow Control: %s\n",tmp_10,tmp_7);
  }
  else ;
  
#line 6379 
  netif_carrier_on(netdev);
  
#line 6380 
  ixgbe_check_vf_rate_limit(adapter);
  
#line 6383 
  netif_tx_wake_all_queues(adapter->netdev);
  
#line 6386 
  rtnl_lock();
  
#line 6387 
  iter = & (adapter->netdev)->all_adj_list.upper;
  
#line 6387 
  upper = netdev_all_upper_get_next_dev_rcu(adapter->netdev,& iter);
  
#line 6387 
  goto ldv_59187;
  ldv_59186: 
#line 6388 
  ;
  
#line 6388 
  tmp_12 = netif_is_macvlan(upper);
  
#line 6388 
  if ((int)tmp_12 != 0) {
    
#line 6389 
    struct macvlan_dev *vlan = netdev_priv((struct net_device const *)upper);
    
#line 6391 
    if (vlan->fwd_priv != (void *)0) 
#line 6392 
                                     netif_tx_wake_all_queues(upper); else ;
  }
  else ;
  
#line 6387 
  upper = netdev_all_upper_get_next_dev_rcu(adapter->netdev,& iter);
  ldv_59187: 
#line 6388 
  ;
  
#line 6387 
  if (upper != (struct net_device *)0) 
#line 6389 
                                       goto ldv_59186; else 
#line 6392 
                                                            goto ldv_59188;
  ldv_59188: 
#line 6393 
  ;
  
#line 6395 
  rtnl_unlock();
  
#line 6398 
  ixgbe_update_default_up(adapter);
  
#line 6401 
  ixgbe_ping_all_vfs(adapter);
  return_label: 
#line 6402 
                return;
}


#line 6409  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_watchdog_link_is_down(struct ixgbe_adapter *adapter)
{
  int tmp_0;
  bool tmp;
  bool tmp_1;
  int tmp_2;
  
#line 6411 
  struct net_device *netdev = adapter->netdev;
  
#line 6412 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 6414 
  adapter->link_up = (_Bool)0;
  
#line 6415 
  adapter->link_speed = 0U;
  
#line 6418 
  tmp = netif_carrier_ok((struct net_device const *)netdev);
  
#line 6418 
  if (tmp) 
#line 6418 
           tmp_0 = 0; else 
#line 6418 
                           tmp_0 = 1;
  
#line 6418 
  if (tmp_0) 
#line 6419 
             goto return_label; else ;
  
#line 6422 
  tmp_1 = ixgbe_is_sfp(hw);
  
#line 6422 
  if ((int)tmp_1 != 0) {
    
#line 6422 
    if (hw->mac.type == (unsigned int)ixgbe_mac_82598EB) 
#line 6423 
                                                         adapter->flags2 |= 16U; else ;
  }
  else ;
  
#line 6425 
  tmp_2 = constant_test_bit(8L,(unsigned long const volatile *)(& adapter->state));
  
#line 6425 
  if (tmp_2 != 0) 
#line 6426 
                  ixgbe_ptp_start_cyclecounter(adapter); else ;
  
#line 6428 
  if (((int)adapter->msg_enable & 1) != 0) 
#line 6428 
                                           netdev_info((struct net_device const *)adapter->netdev,"NIC Link is Down\n"); else ;
  
#line 6429 
  netif_carrier_off(netdev);
  
#line 6432 
  ixgbe_ping_all_vfs(adapter);
  return_label: 
#line 6433 
                return;
}


#line 6435  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static bool ixgbe_ring_tx_pending(struct ixgbe_adapter *adapter)
{
  bool __retres;
  int i;
  
#line 6439 
  i = 0;
  
#line 6439 
  goto ldv_59200;
  ldv_59199: 
#line 6440 
  ;
  {
    
#line 6440 
    struct ixgbe_ring *tx_ring = adapter->tx_ring[i];
    
#line 6442 
    if ((int)tx_ring->next_to_use != (int)tx_ring->next_to_clean) {
      
#line 6443 
      __retres = (_Bool)1;
      
#line 6443 
      goto return_label;
    }
    else ;
  }
  
#line 6439 
  i += 1;
  ldv_59200: 
#line 6440 
  ;
  
#line 6439 
  if (adapter->num_tx_queues > i) 
#line 6441 
                                  goto ldv_59199; else 
#line 6444 
                                                       goto ldv_59201;
  ldv_59201: 
#line 6445 
  ;
  
#line 6446 
  __retres = (_Bool)0;
  return_label: 
#line 6446 
                return __retres;
}


#line 6449  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static bool ixgbe_vf_tx_pending(struct ixgbe_adapter *adapter)
{
  bool __retres;
  int i;
  int j;
  
#line 6451 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 6452 
  struct ixgbe_ring_feature *vmdq = & adapter->ring_feature[1];
  
#line 6453 
  u32 q_per_pool = (unsigned int)(- ((int)vmdq->mask) & (int)vmdq->mask);
  
#line 6457 
  if (adapter->num_vfs == 0U) {
    
#line 6458 
    __retres = (_Bool)0;
    
#line 6458 
    goto return_label;
  }
  else ;
  
#line 6461 
  if (hw->mac.type > (unsigned int)ixgbe_mac_X540) {
    
#line 6462 
    __retres = (_Bool)0;
    
#line 6462 
    goto return_label;
  }
  else ;
  
#line 6464 
  i = 0;
  
#line 6464 
  goto ldv_59216;
  ldv_59215: 
#line 6465 
  ;
  
#line 6465 
  j = 0;
  
#line 6465 
  goto ldv_59213;
  ldv_59212: 
#line 6466 
  ;
  {
    u32 h;
    u32 t;
    
#line 6468 
    h = ixgbe_read_reg(hw,(q_per_pool * (unsigned int)i + (unsigned int)j) * 64U + 24592U);
    
#line 6469 
    t = ixgbe_read_reg(hw,(q_per_pool * (unsigned int)i + (unsigned int)j) * 64U + 24600U);
    
#line 6471 
    if (h != t) {
      
#line 6472 
      __retres = (_Bool)1;
      
#line 6472 
      goto return_label;
    }
    else ;
  }
  
#line 6465 
  j += 1;
  ldv_59213: 
#line 6466 
  ;
  
#line 6465 
  if ((unsigned int)j < q_per_pool) 
#line 6467 
                                    goto ldv_59212; else 
#line 6470 
                                                         goto ldv_59214;
  ldv_59214: 
#line 6471 
  ;
  
#line 6464 
  i += 1;
  ldv_59216: 
#line 6465 
  ;
  
#line 6464 
  if (adapter->num_vfs > (unsigned int)i) 
#line 6466 
                                          goto ldv_59215; else 
#line 6469 
                                                               goto ldv_59217;
  ldv_59217: 
#line 6470 
  ;
  
#line 6476 
  __retres = (_Bool)0;
  return_label: 
#line 6476 
                return __retres;
}


#line 6483  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_watchdog_flush_tx(struct ixgbe_adapter *adapter)
{
  int tmp_2;
  bool tmp_1;
  
#line 6485 
  tmp_1 = netif_carrier_ok((struct net_device const *)adapter->netdev);
  
#line 6485 
  if (tmp_1) 
#line 6485 
             tmp_2 = 0; else 
#line 6485 
                             tmp_2 = 1;
  
#line 6485 
  if (tmp_2) {
    bool tmp;
    
#line 6486 
    tmp = ixgbe_ring_tx_pending(adapter);
    
#line 6486 
    if ((int)tmp != 0) 
#line 6486 
                       goto _LOR;
    else {
      bool tmp_0;
      
#line 6486 
      tmp_0 = ixgbe_vf_tx_pending(adapter);
      
#line 6486 
      if ((int)tmp_0 != 0) {
        _LOR: {
                
#line 6493 
                if (((int)adapter->msg_enable & 1) != 0) 
#line 6493 
                                                         netdev_warn((struct net_device const *)adapter->netdev,"initiating reset to clear Tx work after link loss\n"); else ;
                
#line 6494 
                adapter->flags2 |= 64U;
              }
      }
      else ;
    }
  }
  else ;
  
#line 6496 
  return;
}


#line 6500  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
__inline static void ixgbe_issue_vf_flr(struct ixgbe_adapter *adapter, struct pci_dev *vfdev)
{
  int tmp;
  char const *tmp_0;
  
#line 6503 
  tmp = pci_wait_for_pending_transaction(vfdev);
  
#line 6503 
  if (tmp == 0) 
#line 6504 
                dev_warn((struct device const *)(& (adapter->pdev)->dev),"Issuing VFLR with pending transactions\n"); else ;
  
#line 6506 
  tmp_0 = pci_name((struct pci_dev const *)vfdev);
  
#line 6506 
  ;
  
#line 6506 
  dev_err((struct device const *)(& (adapter->pdev)->dev),"Issuing VFLR for VF %s\n",tmp_0);
  
#line 6507 
  pcie_capability_set_word(vfdev,8,(unsigned short)32768);
  
#line 6509 
  msleep(100U);
  
#line 6510 
  return;
}


#line 6512  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_check_for_bad_vf(struct ixgbe_adapter *adapter)
{
  struct pci_dev *vfdev;
  u32 gpc;
  int pos;
  unsigned short vf_id;
  int tmp_0;
  bool tmp;
  
#line 6514 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 6515 
  struct pci_dev *pdev = adapter->pdev;
  
#line 6521 
  tmp = netif_carrier_ok((struct net_device const *)adapter->netdev);
  
#line 6521 
  if (tmp) 
#line 6521 
           tmp_0 = 0; else 
#line 6521 
                           tmp_0 = 1;
  
#line 6521 
  if (tmp_0) 
#line 6522 
             goto return_label; else ;
  
#line 6524 
  gpc = ixgbe_read_reg(hw,34720U);
  
#line 6525 
  if (gpc != 0U) 
#line 6526 
                 goto return_label; else ;
  
#line 6533 
  if (pdev == (struct pci_dev *)0) 
#line 6534 
                                   goto return_label; else ;
  
#line 6536 
  pos = pci_find_ext_capability(pdev,16);
  
#line 6537 
  if (pos == 0) 
#line 6538 
                goto return_label; else ;
  
#line 6541 
  pci_read_config_word((struct pci_dev const *)pdev,pos + 26,& vf_id);
  
#line 6544 
  vfdev = pci_get_device((unsigned int)pdev->vendor,(unsigned int)vf_id,(struct pci_dev *)0);
  
#line 6545 
  goto ldv_59236;
  ldv_59235: 
#line 6546 
  ;
  
#line 6546 
  if ((unsigned int)*((unsigned char *)vfdev + 2531UL) != 0U && vfdev->__anonCompField_pci_dev_69.physfn == pdev) {
    u16 status_reg;
    
#line 6549 
    pci_read_config_word((struct pci_dev const *)vfdev,6,& status_reg);
    
#line 6550 
    if (((int)status_reg & 8192) != 0) 
#line 6552 
                                       ixgbe_issue_vf_flr(adapter,vfdev); else ;
  }
  else ;
  
#line 6555 
  vfdev = pci_get_device((unsigned int)pdev->vendor,(unsigned int)vf_id,vfdev);
  ldv_59236: 
#line 6556 
  ;
  
#line 6545 
  if (vfdev != (struct pci_dev *)0) 
#line 6547 
                                    goto ldv_59235; else 
#line 6550 
                                                         goto ldv_59237;
  ldv_59237: 
#line 6551 
  ;
  return_label: 
#line 6552 
                return;
}


#line 6559  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_spoof_check(struct ixgbe_adapter *adapter)
{
  u32 ssvpc;
  
#line 6564 
  if (adapter->hw.mac.type == (unsigned int)ixgbe_mac_82598EB || adapter->num_vfs == 0U) 
    
#line 6566 
    goto return_label; else ;
  
#line 6568 
  ssvpc = ixgbe_read_reg(& adapter->hw,34688U);
  
#line 6574 
  if (ssvpc == 0U) 
#line 6575 
                   goto return_label; else ;
  
#line 6577 
  if (((int)adapter->msg_enable & 1) != 0) 
#line 6577 
                                           netdev_warn((struct net_device const *)adapter->netdev,"%u Spoofed packets detected\n",ssvpc); else ;
  return_label: 
#line 6578 
                return;
}


#line 6595  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_watchdog_subtask(struct ixgbe_adapter *adapter)
{
  int tmp;
  
#line 6598 
  tmp = constant_test_bit(2L,(unsigned long const volatile *)(& adapter->state));
  
#line 6598 
  if (tmp != 0) 
#line 6601 
                goto return_label;
  else {
    int tmp_0;
    
#line 6598 
    tmp_0 = constant_test_bit(4L,(unsigned long const volatile *)(& adapter->state));
    
#line 6598 
    if (tmp_0 != 0) 
#line 6601 
                    goto return_label;
    else {
      int tmp_1;
      
#line 6599 
      tmp_1 = constant_test_bit(1L,(unsigned long const volatile *)(& adapter->state));
      
#line 6599 
      if (tmp_1 != 0) 
#line 6601 
                      goto return_label; else ;
    }
  }
  
#line 6603 
  ixgbe_watchdog_update_link(adapter);
  
#line 6605 
  if ((int)adapter->link_up != 0) 
#line 6606 
                                  ixgbe_watchdog_link_is_up(adapter); else 
                                                                    
#line 6608 
                                                                    ixgbe_watchdog_link_is_down(adapter);
  
#line 6610 
  ixgbe_check_for_bad_vf(adapter);
  
#line 6611 
  ixgbe_spoof_check(adapter);
  
#line 6612 
  ixgbe_update_stats(adapter);
  
#line 6614 
  ixgbe_watchdog_flush_tx(adapter);
  return_label: 
#line 6615 
                return;
}


#line 6621  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_sfp_detection_subtask(struct ixgbe_adapter *adapter)
{
  s32 err;
  int tmp;
  
#line 6623 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 6627 
  if ((adapter->flags2 & 16U) == 0U && (adapter->flags2 & 32U) == 0U) 
    
#line 6629 
    goto return_label; else ;
  
#line 6632 
  tmp = test_and_set_bit(7L,(unsigned long volatile *)(& adapter->state));
  
#line 6632 
  if (tmp != 0) 
#line 6633 
                goto return_label; else ;
  
#line 6635 
  err = (*(hw->phy.ops.identify_sfp))(hw);
  
#line 6636 
  if (err == -19) 
#line 6637 
                  goto sfp_out; else ;
  
#line 6639 
  if (err == -20) 
#line 6642 
                  adapter->flags2 |= 32U; else ;
  
#line 6646 
  if (err != 0) 
#line 6647 
                goto sfp_out; else ;
  
#line 6650 
  if ((adapter->flags2 & 32U) == 0U) 
#line 6651 
                                     goto sfp_out; else ;
  
#line 6653 
  adapter->flags2 &= 4294967263U;
  
#line 6660 
  if (hw->mac.type == (unsigned int)ixgbe_mac_82598EB) 
#line 6661 
                                                       err = (*(hw->phy.ops.reset))(hw); else 
                                                                    
#line 6663 
                                                                    err = (*(hw->mac.ops.setup_sfp))(hw);
  
#line 6665 
  if (err == -19) 
#line 6666 
                  goto sfp_out; else ;
  
#line 6668 
  adapter->flags |= 131072U;
  
#line 6669 
  if (((int)adapter->msg_enable & 2) != 0) 
#line 6669 
                                           netdev_info((struct net_device const *)adapter->netdev,"detected SFP+: %d\n",(unsigned int)hw->phy.sfp_type); else ;
  sfp_out: 
#line 6671 
  ;
  
#line 6672 
  set_bit(7L,(unsigned long volatile *)(& adapter->state));
  
#line 6674 
  if (err == -19 && (unsigned int)(adapter->netdev)->reg_state == 1U) {
    
#line 6676 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"failed to initialize because an unsupported ");
    
#line 6678 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"Reload the driver after installing a ");
    
#line 6680 
    ldv_unregister_netdev_88(adapter->netdev);
  }
  else ;
  return_label: 
#line 6682 
                return;
}


#line 6688  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_sfp_link_config_subtask(struct ixgbe_adapter *adapter)
{
  u32 speed;
  int tmp;
  
#line 6690 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 6692 
  bool autoneg = (_Bool)0;
  
#line 6694 
  if ((adapter->flags & 131072U) == 0U) 
#line 6695 
                                        goto return_label; else ;
  
#line 6698 
  tmp = test_and_set_bit(7L,(unsigned long volatile *)(& adapter->state));
  
#line 6698 
  if (tmp != 0) 
#line 6699 
                goto return_label; else ;
  
#line 6701 
  adapter->flags &= 4294836223U;
  
#line 6703 
  speed = hw->phy.autoneg_advertised;
  
#line 6704 
  if (speed == 0U && hw->mac.ops.get_link_capabilities != (s32 (*)(struct ixgbe_hw *, ixgbe_link_speed *, bool *))0) {
    
#line 6705 
    (*(hw->mac.ops.get_link_capabilities))(hw,& speed,& autoneg);
    
#line 6708 
    if (! autoneg) {
      
#line 6709 
      if ((speed & 128U) != 0U) 
#line 6710 
                                speed = 128U; else ;
    }
    else ;
  }
  else ;
  
#line 6714 
  if (hw->mac.ops.setup_link != (s32 (*)(struct ixgbe_hw *, ixgbe_link_speed , bool ))0) 
    
#line 6715 
    (*(hw->mac.ops.setup_link))(hw,speed,(_Bool)1); else ;
  
#line 6717 
  adapter->flags |= 65536U;
  
#line 6718 
  adapter->link_check_timeout = jiffies;
  
#line 6719 
  set_bit(7L,(unsigned long volatile *)(& adapter->state));
  return_label: 
#line 6720 
                return;
}


#line 6726  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_service_timer(unsigned long data)
{
  unsigned long next_event_offset;
  
#line 6728 
  struct ixgbe_adapter *adapter = (struct ixgbe_adapter *)data;
  
#line 6732 
  if ((adapter->flags & 65536U) != 0U) 
#line 6733 
                                       next_event_offset = 25UL; else 
                                                                   
#line 6735 
                                                                   next_event_offset = 500UL;
  
#line 6738 
  ldv_mod_timer_89(& adapter->service_timer,next_event_offset + jiffies);
  
#line 6740 
  ixgbe_service_event_schedule(adapter);
  
#line 6741 
  return;
}


#line 6743  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_phy_interrupt_subtask(struct ixgbe_adapter *adapter)
{
  u32 status;
  s32 tmp;
  
#line 6745 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 6748 
  if ((adapter->flags2 & 2048U) == 0U) 
#line 6749 
                                       goto return_label; else ;
  
#line 6751 
  adapter->flags2 &= 4294965247U;
  
#line 6753 
  if (hw->phy.ops.handle_lasi == (s32 (*)(struct ixgbe_hw *))0) 
#line 6754 
                                                                goto return_label; else ;
  
#line 6756 
  tmp = (*(hw->phy.ops.handle_lasi))(& adapter->hw);
  
#line 6756 
  status = (unsigned int)tmp;
  
#line 6757 
  if (status != 4294967270U) 
#line 6758 
                             goto return_label; else ;
  
#line 6760 
  if (((int)adapter->msg_enable & 1) != 0) 
#line 6760 
                                           netdev_crit((struct net_device const *)adapter->netdev,"%s\n",(char const *)(& ixgbe_overheat_msg)); else ;
  return_label: 
#line 6761 
                return;
}


#line 6763  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_reset_subtask(struct ixgbe_adapter *adapter)
{
  int tmp;
  
#line 6765 
  if ((adapter->flags2 & 64U) == 0U) 
#line 6766 
                                     goto return_label; else ;
  
#line 6768 
  adapter->flags2 &= 4294967231U;
  
#line 6771 
  tmp = constant_test_bit(2L,(unsigned long const volatile *)(& adapter->state));
  
#line 6771 
  if (tmp != 0) 
#line 6774 
                goto return_label;
  else {
    int tmp_0;
    
#line 6771 
    tmp_0 = constant_test_bit(4L,(unsigned long const volatile *)(& adapter->state));
    
#line 6771 
    if (tmp_0 != 0) 
#line 6774 
                    goto return_label;
    else {
      int tmp_1;
      
#line 6772 
      tmp_1 = constant_test_bit(1L,(unsigned long const volatile *)(& adapter->state));
      
#line 6772 
      if (tmp_1 != 0) 
#line 6774 
                      goto return_label; else ;
    }
  }
  
#line 6776 
  ixgbe_dump(adapter);
  
#line 6777 
  netdev_err((struct net_device const *)adapter->netdev,"Reset adapter\n");
  
#line 6778 
  adapter->tx_timeout_count += 1U;
  
#line 6780 
  rtnl_lock();
  
#line 6781 
  ixgbe_reinit_locked(adapter);
  
#line 6782 
  rtnl_unlock();
  return_label: 
#line 6783 
                return;
}


#line 6789  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_service_task(struct work_struct *work)
{
  struct ixgbe_adapter *tmp;
  bool tmp_1;
  int tmp_2;
  {
    
#line 6791 
    struct work_struct const *__mptr = (struct work_struct const *)work;
    
#line 6791 
    tmp = (struct ixgbe_adapter *)__mptr + 18446744073709511120U;
  }
  
#line 6791 
  struct ixgbe_adapter *adapter = tmp;
  
#line 6794 
  tmp_1 = ixgbe_removed((void *)adapter->hw.hw_addr);
  
#line 6794 
  if ((int)tmp_1 != 0) {
    int tmp_0;
    
#line 6795 
    tmp_0 = constant_test_bit(2L,(unsigned long const volatile *)(& adapter->state));
    
#line 6795 
    if (tmp_0 == 0) {
      
#line 6796 
      rtnl_lock();
      
#line 6797 
      ixgbe_down(adapter);
      
#line 6798 
      rtnl_unlock();
    }
    else ;
    
#line 6800 
    ixgbe_service_event_complete(adapter);
    
#line 6801 
    goto return_label;
  }
  else ;
  
#line 6803 
  ixgbe_reset_subtask(adapter);
  
#line 6804 
  ixgbe_phy_interrupt_subtask(adapter);
  
#line 6805 
  ixgbe_sfp_detection_subtask(adapter);
  
#line 6806 
  ixgbe_sfp_link_config_subtask(adapter);
  
#line 6807 
  ixgbe_check_overtemp_subtask(adapter);
  
#line 6808 
  ixgbe_watchdog_subtask(adapter);
  
#line 6809 
  ixgbe_fdir_reinit_subtask(adapter);
  
#line 6810 
  ixgbe_check_hang_subtask(adapter);
  
#line 6812 
  tmp_2 = constant_test_bit(8L,(unsigned long const volatile *)(& adapter->state));
  
#line 6812 
  if (tmp_2 != 0) {
    
#line 6813 
    ixgbe_ptp_overflow_check(adapter);
    
#line 6814 
    ixgbe_ptp_rx_hang(adapter);
  }
  else ;
  
#line 6817 
  ixgbe_service_event_complete(adapter);
  return_label: 
#line 6818 
                return;
}


#line 6820  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static int ixgbe_tso(struct ixgbe_ring *tx_ring, struct ixgbe_tx_buffer *first, u8 *hdr_len)
{
  int __retres;
  u32 vlan_macip_lens;
  u32 type_tucmd;
  u32 mss_l4len_idx;
  u32 l4len;
  int err;
  int tmp_0;
  bool tmp;
  int tmp_10;
  unsigned char *tmp_11;
  unsigned char *tmp_12;
  int tmp_13;
  
#line 6824 
  struct sk_buff *skb = first->skb;
  
#line 6829 
  if ((unsigned int)*((unsigned char *)skb + 145UL) != 6U) {
    
#line 6830 
    __retres = 0;
    
#line 6830 
    goto return_label;
  }
  else ;
  
#line 6832 
  tmp = skb_is_gso((struct sk_buff const *)skb);
  
#line 6832 
  if (tmp) 
#line 6832 
           tmp_0 = 0; else 
#line 6832 
                           tmp_0 = 1;
  
#line 6832 
  if (tmp_0) {
    
#line 6833 
    __retres = 0;
    
#line 6833 
    goto return_label;
  }
  else ;
  
#line 6835 
  err = skb_cow_head(skb,0U);
  
#line 6836 
  if (err < 0) {
    
#line 6837 
    __retres = err;
    
#line 6837 
    goto return_label;
  }
  else ;
  
#line 6840 
  type_tucmd = 2048U;
  
#line 6842 
  if ((unsigned int)first->protocol == 8U) {
    struct tcphdr *tmp_2;
    __sum16 tmp_3;
    
#line 6843 
    struct iphdr *iph = ip_hdr((struct sk_buff const *)skb);
    
#line 6844 
    iph->tot_len = (unsigned short)0U;
    
#line 6845 
    iph->check = (unsigned short)0U;
    
#line 6846 
    tmp_2 = tcp_hdr((struct sk_buff const *)skb);
    
#line 6846 
    tmp_3 = csum_tcpudp_magic(iph->saddr,iph->daddr,(unsigned short)0,(unsigned short)6,0U);
    
#line 6846 
    tmp_2->check = (unsigned short)(~ ((int)tmp_3));
    
#line 6850 
    type_tucmd |= 1024U;
    
#line 6851 
    first->tx_flags |= 50U;
  }
  else {
    bool tmp_9;
    
#line 6854 
    tmp_9 = skb_is_gso_v6((struct sk_buff const *)skb);
    
#line 6854 
    if ((int)tmp_9 != 0) {
      struct ipv6hdr *tmp_4;
      struct tcphdr *tmp_5;
      __sum16 tmp_8;
      struct ipv6hdr *tmp_6;
      struct ipv6hdr *tmp_7;
      
#line 6855 
      tmp_4 = ipv6_hdr((struct sk_buff const *)skb);
      
#line 6855 
      tmp_4->payload_len = (unsigned short)0U;
      
#line 6856 
      tmp_5 = tcp_hdr((struct sk_buff const *)skb);
      
#line 6858 
      tmp_6 = ipv6_hdr((struct sk_buff const *)skb);
      
#line 6857 
      tmp_7 = ipv6_hdr((struct sk_buff const *)skb);
      
#line 6856 
      tmp_8 = csum_ipv6_magic((struct in6_addr const *)(& tmp_7->saddr),(struct in6_addr const *)(& tmp_6->daddr),0U,(unsigned short)6,0U);
      
#line 6856 
      tmp_5->check = (unsigned short)(~ ((int)tmp_8));
      
#line 6860 
      first->tx_flags |= 34U;
    }
    else ;
  }
  
#line 6865 
  l4len = tcp_hdrlen((struct sk_buff const *)skb);
  
#line 6866 
  tmp_10 = skb_transport_offset((struct sk_buff const *)skb);
  
#line 6866 
  *hdr_len = (unsigned char)((int)((unsigned char)tmp_10) + (int)((unsigned char)l4len));
  
#line 6869 
  tmp_11 = skb_end_pointer((struct sk_buff const *)skb);
  
#line 6869 
  first->gso_segs = ((struct skb_shared_info *)tmp_11)->gso_segs;
  
#line 6870 
  first->bytecount += (unsigned int)(((int)first->gso_segs + -1) * (int)*hdr_len);
  
#line 6873 
  mss_l4len_idx = l4len << 8;
  
#line 6874 
  tmp_12 = skb_end_pointer((struct sk_buff const *)skb);
  
#line 6874 
  mss_l4len_idx = (unsigned int)((int)((struct skb_shared_info *)tmp_12)->gso_size << 16) | mss_l4len_idx;
  
#line 6877 
  vlan_macip_lens = skb_network_header_len((struct sk_buff const *)skb);
  
#line 6878 
  tmp_13 = skb_network_offset((struct sk_buff const *)skb);
  
#line 6878 
  vlan_macip_lens = (unsigned int)(tmp_13 << 9) | vlan_macip_lens;
  
#line 6879 
  vlan_macip_lens = (first->tx_flags & 4294901760U) | vlan_macip_lens;
  
#line 6881 
  ixgbe_tx_ctxtdesc(tx_ring,vlan_macip_lens,0U,type_tucmd,mss_l4len_idx);
  
#line 6884 
  __retres = 1;
  return_label: 
#line 6884 
                return __retres;
}


#line 6887  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_tx_csum(struct ixgbe_ring *tx_ring, struct ixgbe_tx_buffer *first)
{
  int tmp_6;
  
#line 6890 
  struct sk_buff *skb = first->skb;
  
#line 6891 
  u32 vlan_macip_lens = 0U;
  
#line 6892 
  u32 mss_l4len_idx = 0U;
  
#line 6893 
  u32 type_tucmd = 0U;
  
#line 6895 
  if ((unsigned int)*((unsigned char *)skb + 145UL) != 6U) {
    
#line 6896 
    if ((first->tx_flags & 1U) == 0U && (first->tx_flags & 8U) == 0U) 
      
#line 6898 
      goto return_label; else ;
  }
  else {
    
#line 6900 
    u8 l4_hdr = (unsigned char)0U;
    
#line 6901 
    switch ((int)first->protocol) {
      u32 tmp;
      struct iphdr *tmp_0;
      u32 tmp_1;
      struct ipv6hdr *tmp_2;
      int tmp_3;
      case 8: 
#line 6902 
      ;
      
#line 6903 
      tmp = skb_network_header_len((struct sk_buff const *)skb);
      
#line 6903 
      vlan_macip_lens = tmp | vlan_macip_lens;
      
#line 6904 
      type_tucmd |= 1024U;
      
#line 6905 
      tmp_0 = ip_hdr((struct sk_buff const *)skb);
      
#line 6905 
      l4_hdr = tmp_0->protocol;
      
#line 6906 
      goto ldv_59298;
      case 56710: 
#line 6907 
      ;
      
#line 6908 
      tmp_1 = skb_network_header_len((struct sk_buff const *)skb);
      
#line 6908 
      vlan_macip_lens = tmp_1 | vlan_macip_lens;
      
#line 6909 
      tmp_2 = ipv6_hdr((struct sk_buff const *)skb);
      
#line 6909 
      l4_hdr = tmp_2->nexthdr;
      
#line 6910 
      goto ldv_59298;
      default: 
#line 6911 
      ;
      
#line 6912 
      tmp_3 = net_ratelimit();
      
#line 6912 
      if ((long)(tmp_3 != 0) != 0L) 
#line 6913 
                                    dev_warn((struct device const *)tx_ring->dev,"partial checksum but proto=%x!\n",(int)first->protocol); else ;
      
#line 6917 
      goto ldv_59298;
    }
    ldv_59298: 
#line 6920 
    ;
    
#line 6920 
    switch ((int)l4_hdr) {
      unsigned int tmp_4;
      int tmp_5;
      case 6: 
#line 6921 
      ;
      
#line 6922 
      type_tucmd |= 2048U;
      
#line 6923 
      tmp_4 = tcp_hdrlen((struct sk_buff const *)skb);
      
#line 6923 
      mss_l4len_idx = tmp_4 << 8;
      
#line 6925 
      goto ldv_59302;
      case 132: 
#line 6926 
      ;
      
#line 6927 
      type_tucmd |= 4096U;
      
#line 6928 
      mss_l4len_idx = 3072U;
      
#line 6930 
      goto ldv_59302;
      case 17: 
#line 6931 
      ;
      
#line 6932 
      mss_l4len_idx = 2048U;
      
#line 6934 
      goto ldv_59302;
      default: 
#line 6935 
      ;
      
#line 6936 
      tmp_5 = net_ratelimit();
      
#line 6936 
      if ((long)(tmp_5 != 0) != 0L) 
#line 6937 
                                    dev_warn((struct device const *)tx_ring->dev,"partial checksum but l4 proto=%x!\n",(int)l4_hdr); else ;
      
#line 6941 
      goto ldv_59302;
    }
    ldv_59302: 
#line 6945 
    ;
    
#line 6945 
    first->tx_flags |= 32U;
  }
  
#line 6949 
  tmp_6 = skb_network_offset((struct sk_buff const *)skb);
  
#line 6949 
  vlan_macip_lens = (unsigned int)(tmp_6 << 9) | vlan_macip_lens;
  
#line 6950 
  vlan_macip_lens = (first->tx_flags & 4294901760U) | vlan_macip_lens;
  
#line 6952 
  ixgbe_tx_ctxtdesc(tx_ring,vlan_macip_lens,0U,type_tucmd,mss_l4len_idx);
  return_label: 
#line 6953 
                return;
}


#line 6961  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static u32 ixgbe_tx_cmd_type(struct sk_buff *skb, u32 tx_flags)
{
  
#line 6964 
  u32 cmd_type = 573571072U;
  
#line 6969 
  cmd_type = (tx_flags & 1U) * 1073741824U | cmd_type;
  
#line 6973 
  cmd_type = (tx_flags & 2U) * 1073741824U | cmd_type;
  
#line 6977 
  cmd_type = (tx_flags & 4U) * 131072U | cmd_type;
  
#line 6981 
  cmd_type = (unsigned int)skb->no_fcs * 33554432U ^ cmd_type;
  
#line 6983 
  return cmd_type;
}


#line 6986  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_tx_olinfo_status(union ixgbe_adv_tx_desc *tx_desc, u32 tx_flags, unsigned int paylen)
{
  
#line 6989 
  u32 olinfo_status = paylen << 14;
  
#line 6992 
  olinfo_status = (tx_flags & 32U) * 16U | olinfo_status;
  
#line 6997 
  olinfo_status = (tx_flags & 16U) * 16U | olinfo_status;
  
#line 7005 
  olinfo_status = (tx_flags & 8U) * 16U | olinfo_status;
  
#line 7009 
  tx_desc->read.olinfo_status = olinfo_status;
  
#line 7010 
  return;
}


#line 7012  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static int __ixgbe_maybe_stop_tx(struct ixgbe_ring *tx_ring, u16 size)
{
  int __retres;
  u16 tmp;
  
#line 7014 
  netif_start_subqueue(tx_ring->netdev,(unsigned short)((int)tx_ring->queue_index));
  
#line 7015 
  ldv_inline_asm();
  
#line 7025 
  tmp = ixgbe_desc_unused(tx_ring);
  
#line 7025 
  ;
  
#line 7025 
  if ((long)((int)tmp < (int)size) != 0L) {
    
#line 7026 
    __retres = -16;
    
#line 7026 
    goto return_label;
  }
  else ;
  
#line 7029 
  netif_start_subqueue(tx_ring->netdev,(unsigned short)((int)tx_ring->queue_index));
  
#line 7030 
  tx_ring->__anonCompField_ixgbe_ring_120.tx_stats.restart_queue += 1ULL;
  
#line 7031 
  __retres = 0;
  return_label: 
#line 7031 
                return __retres;
}


#line 7034  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
__inline static int ixgbe_maybe_stop_tx(struct ixgbe_ring *tx_ring, u16 size)
{
  int __retres;
  u16 tmp;
  int tmp_0;
  
#line 7036 
  tmp = ixgbe_desc_unused(tx_ring);
  
#line 7036 
  ;
  
#line 7036 
  if ((long)((int)tmp >= (int)size) != 0L) {
    
#line 7037 
    __retres = 0;
    
#line 7037 
    goto return_label;
  }
  else ;
  
#line 7039 
  tmp_0 = __ixgbe_maybe_stop_tx(tx_ring,(unsigned short)((int)size));
  
#line 7039 
  __retres = tmp_0;
  return_label: 
#line 7039 
                return __retres;
}


#line 7045  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_tx_map(struct ixgbe_ring *tx_ring, struct ixgbe_tx_buffer *first, u8 const hdr_len)
{
  struct ixgbe_tx_buffer *tx_buffer;
  union ixgbe_adv_tx_desc *tx_desc;
  struct skb_frag_struct *frag;
  dma_addr_t dma;
  unsigned int data_len;
  unsigned int size;
  unsigned char *tmp_0;
  int tmp_1;
  unsigned int tmp_4;
  struct netdev_queue *tmp_5;
  bool tmp_7;
  struct netdev_queue *tmp_6;
  
#line 7049 
  struct sk_buff *skb = first->skb;
  
#line 7055 
  u32 tx_flags = first->tx_flags;
  
#line 7056 
  u32 cmd_type = ixgbe_tx_cmd_type(skb,tx_flags);
  
#line 7057 
  u16 i = tx_ring->next_to_use;
  
#line 7059 
  tx_desc = (union ixgbe_adv_tx_desc *)tx_ring->desc + (int)i;
  
#line 7061 
  ixgbe_tx_olinfo_status(tx_desc,tx_flags,skb->len - (unsigned int)hdr_len);
  
#line 7063 
  size = skb_headlen((struct sk_buff const *)skb);
  
#line 7064 
  data_len = skb->data_len;
  
#line 7067 
  if ((tx_flags & 128U) != 0U) 
    
#line 7068 
    if (data_len <= 7U) {
      
#line 7069 
      size = (size + data_len) + 4294967288U;
      
#line 7070 
      data_len = 0U;
    }
    else 
#line 7072 
         data_len += 4294967288U;
  else ;
  
#line 7077 
  dma = dma_map_single_attrs(tx_ring->dev,(void *)skb->data,(unsigned long)size,(enum dma_data_direction)DMA_TO_DEVICE,(struct dma_attrs *)0);
  
#line 7079 
  tx_buffer = first;
  
#line 7081 
  tmp_0 = skb_end_pointer((struct sk_buff const *)skb);
  
#line 7081 
  frag = & ((struct skb_shared_info *)tmp_0)->frags[0];
  ldv_59348: 
#line 7082 
  ;
  
#line 7082 
  tmp_1 = dma_mapping_error(tx_ring->dev,dma);
  
#line 7082 
  if (tmp_1 != 0) 
#line 7083 
                  goto dma_error; else ;
  
#line 7086 
  tx_buffer->len = size;
  
#line 7087 
  tx_buffer->dma = dma;
  
#line 7089 
  tx_desc->read.buffer_addr = dma;
  
#line 7091 
  goto ldv_59342;
  ldv_59341: 
#line 7092 
  ;
  
#line 7092 
  tx_desc->read.cmd_type_len = cmd_type ^ 16384U;
  
#line 7095 
  i = (u16)((int)i + 1);
  
#line 7096 
  tx_desc += 1;
  
#line 7097 
  if ((int)tx_ring->count == (int)i) {
    
#line 7098 
    tx_desc = (union ixgbe_adv_tx_desc *)tx_ring->desc;
    
#line 7099 
    i = (unsigned short)0U;
  }
  else ;
  
#line 7101 
  tx_desc->read.olinfo_status = 0U;
  
#line 7103 
  dma += 16384ULL;
  
#line 7104 
  size += 4294950912U;
  
#line 7106 
  tx_desc->read.buffer_addr = dma;
  ldv_59342: 
#line 7107 
  ;
  
#line 7091 
  if ((long)(size > 16384U) != 0L) 
#line 7093 
                                   goto ldv_59341; else 
#line 7096 
                                                        goto ldv_59343;
  ldv_59343: 
#line 7097 
  ;
  
#line 7109 
  if ((long)(data_len == 0U) != 0L) 
#line 7110 
                                    goto ldv_59344; else ;
  
#line 7112 
  tx_desc->read.cmd_type_len = cmd_type ^ size;
  
#line 7114 
  i = (u16)((int)i + 1);
  
#line 7115 
  tx_desc += 1;
  
#line 7116 
  if ((int)tx_ring->count == (int)i) {
    
#line 7117 
    tx_desc = (union ixgbe_adv_tx_desc *)tx_ring->desc;
    
#line 7118 
    i = (unsigned short)0U;
  }
  else ;
  
#line 7120 
  tx_desc->read.olinfo_status = 0U;
  {
    unsigned int tmp_3;
    
#line 7123 
    unsigned int __min1 = data_len;
    
#line 7123 
    unsigned int __min2 = skb_frag_size((skb_frag_t const *)frag);
    
#line 7123 
    if (__min1 < __min2) 
#line 7123 
                         tmp_3 = __min1; else 
#line 7123 
                                              tmp_3 = __min2;
    
#line 7123 
    tmp_4 = tmp_3;
  }
  
#line 7123 
  size = tmp_4;
  
#line 7127 
  data_len -= size;
  
#line 7129 
  dma = skb_frag_dma_map(tx_ring->dev,(skb_frag_t const *)frag,0UL,(unsigned long)size,(enum dma_data_direction)DMA_TO_DEVICE);
  
#line 7132 
  tx_buffer = tx_ring->__anonCompField_ixgbe_ring_117.tx_buffer_info + (int)i;
  
#line 7081 
  frag += 1;
  
#line 7082 
  goto ldv_59348;
  ldv_59344: 
#line 7083 
  ;
  
#line 7136 
  cmd_type = (size | cmd_type) | 150994944U;
  
#line 7137 
  tx_desc->read.cmd_type_len = cmd_type;
  
#line 7139 
  ;
  
#line 7139 
  tmp_5 = txring_txq((struct ixgbe_ring const *)tx_ring);
  
#line 7139 
  netdev_tx_sent_queue(tmp_5,first->bytecount);
  
#line 7142 
  first->time_stamp = jiffies;
  
#line 7143 
  ldv_inline_asm();
  
#line 7155 
  first->next_to_watch = tx_desc;
  
#line 7157 
  i = (u16)((int)i + 1);
  
#line 7158 
  if ((int)tx_ring->count == (int)i) 
#line 7159 
                                     i = (unsigned short)0U; else ;
  
#line 7161 
  tx_ring->next_to_use = i;
  
#line 7163 
  ixgbe_maybe_stop_tx(tx_ring,(unsigned short)21);
  
#line 7165 
  tmp_6 = txring_txq((struct ixgbe_ring const *)tx_ring);
  
#line 7165 
  tmp_7 = netif_xmit_stopped((struct netdev_queue const *)tmp_6);
  
#line 7165 
  if ((int)tmp_7 != 0) 
#line 7165 
                       goto _LOR;
  else 
    
#line 7165 
    if ((unsigned int)*((unsigned char *)skb + 142UL) == 0U) {
      _LOR: {
              
#line 7166 
              writel((unsigned int)i,(void volatile *)tx_ring->tail);
              
#line 7167 
              ldv_inline_asm();
            }
    }
    else ;
  
#line 7174 
  goto return_label;
  dma_error: 
#line 7175 
  ;
  
#line 7176 
  dev_err((struct device const *)tx_ring->dev,"TX DMA map failed\n");
  ldv_59350: 
#line 7177 
  ;
  
#line 7180 
  tx_buffer = tx_ring->__anonCompField_ixgbe_ring_117.tx_buffer_info + (int)i;
  
#line 7181 
  ixgbe_unmap_and_free_tx_resource(tx_ring,tx_buffer);
  
#line 7182 
  if (tx_buffer == first) 
#line 7183 
                          goto ldv_59349; else ;
  
#line 7184 
  if ((unsigned int)i == 0U) 
#line 7185 
                             i = tx_ring->count; else ;
  
#line 7186 
  i = (u16)((int)i - 1);
  
#line 7180 
  goto ldv_59350;
  ldv_59349: 
#line 7181 
  ;
  
#line 7189 
  tx_ring->next_to_use = i;
  return_label: 
#line 7190 
                return;
}


#line 7192  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_atr(struct ixgbe_ring *ring, struct ixgbe_tx_buffer *first)
{
  union __anonunion_hdr_2378 hdr;
  struct tcphdr *th;
  __be16 vlan_id;
  
#line 7195 
  struct ixgbe_q_vector *q_vector = ring->q_vector;
  
#line 7196 
  union ixgbe_atr_hash_dword input = {.dword = 0U};
  
#line 7197 
  union ixgbe_atr_hash_dword common = {.dword = 0U};
  
#line 7207 
  if (q_vector == (struct ixgbe_q_vector *)0) 
#line 7208 
                                              goto return_label; else ;
  
#line 7211 
  if ((unsigned int)ring->__anonCompField_ixgbe_ring_119.__anonCompField___anonunion_1181_118.atr_sample_rate == 0U) 
    
#line 7212 
    goto return_label; else ;
  
#line 7214 
  ring->__anonCompField_ixgbe_ring_119.__anonCompField___anonunion_1181_118.atr_count = (u8)((int)ring->__anonCompField_ixgbe_ring_119.__anonCompField___anonunion_1181_118.atr_count + 1);
  
#line 7217 
  hdr.network = skb_network_header((struct sk_buff const *)first->skb);
  
#line 7220 
  if (((unsigned int)first->protocol != 56710U || (unsigned int)(hdr.ipv6)->nexthdr != 6U) && ((unsigned int)first->protocol != 8U || (unsigned int)(hdr.ipv4)->protocol != 6U)) 
    
#line 7224 
    goto return_label; else ;
  
#line 7226 
  th = tcp_hdr((struct sk_buff const *)first->skb);
  
#line 7229 
  if (th == (struct tcphdr *)0 || (unsigned int)*((unsigned char *)th + 13UL) != 0U) 
    
#line 7230 
    goto return_label; else ;
  
#line 7233 
  if ((unsigned int)*((unsigned char *)th + 13UL) == 0U && (int)ring->__anonCompField_ixgbe_ring_119.__anonCompField___anonunion_1181_118.atr_count < (int)ring->__anonCompField_ixgbe_ring_119.__anonCompField___anonunion_1181_118.atr_sample_rate) 
    
#line 7234 
    goto return_label; else ;
  
#line 7237 
  ring->__anonCompField_ixgbe_ring_119.__anonCompField___anonunion_1181_118.atr_count = (unsigned char)0U;
  
#line 7239 
  if (0 != 0) 
#line 7239 
              vlan_id = (unsigned short)(((int)((unsigned short)(first->tx_flags >> 16)) << 8) | ((int)((unsigned short)(first->tx_flags >> 16)) >> 8)); else 
                                                                    
#line 7239 
                                                                    vlan_id = __fswab16((unsigned short)((int)((unsigned short)(first->tx_flags >> 16))));
  
#line 7248 
  input.formatted.vlan_id = vlan_id;
  
#line 7254 
  if ((first->tx_flags & 65U) != 0U) 
#line 7255 
                                     common.port.src = (unsigned short)((unsigned int)((int)common.port.src ^ (int)th->dest) ^ 129U); else 
                                                                    
#line 7257 
                                                                    common.port.src = (unsigned short)((int)common.port.src ^ ((int)th->dest ^ (int)first->protocol));
  
#line 7258 
  common.port.dst = (unsigned short)((int)common.port.dst ^ (int)th->source);
  
#line 7260 
  if ((unsigned int)first->protocol == 8U) {
    
#line 7261 
    input.formatted.flow_type = (unsigned char)2U;
    
#line 7262 
    common.ip ^= (hdr.ipv4)->saddr ^ (hdr.ipv4)->daddr;
  }
  else {
    
#line 7264 
    input.formatted.flow_type = (unsigned char)6U;
    
#line 7265 
    common.ip ^= (((((((hdr.ipv6)->saddr.in6_u.u6_addr32[0] ^ (hdr.ipv6)->saddr.in6_u.u6_addr32[1]) ^ (hdr.ipv6)->saddr.in6_u.u6_addr32[2]) ^ (hdr.ipv6)->saddr.in6_u.u6_addr32[3]) ^ (hdr.ipv6)->daddr.in6_u.u6_addr32[0]) ^ (hdr.ipv6)->daddr.in6_u.u6_addr32[1]) ^ (hdr.ipv6)->daddr.in6_u.u6_addr32[2]) ^ (hdr.ipv6)->daddr.in6_u.u6_addr32[3];
  }
  
#line 7276 
  ixgbe_fdir_add_signature_filter_82599(& (q_vector->adapter)->hw,input,common,(unsigned char)((int)ring->queue_index));
  return_label: 
#line 7278 
                return;
}


#line 7280  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static u16 ixgbe_select_queue(struct net_device *dev, struct sk_buff *skb, void *accel_priv, u16 (*fallback)(struct net_device *, struct sk_buff *))
{
  u16 __retres;
  struct ixgbe_adapter *adapter;
  struct ixgbe_ring_feature *f;
  int txq;
  __be16 tmp;
  bool tmp_2;
  
#line 7283 
  struct ixgbe_fwd_adapter *fwd_adapter = (struct ixgbe_fwd_adapter *)accel_priv;
  
#line 7290 
  if (fwd_adapter != (struct ixgbe_fwd_adapter *)0) {
    
#line 7291 
    __retres = (unsigned short)((int)skb->queue_mapping + (int)((unsigned short)fwd_adapter->tx_base_queue));
    
#line 7291 
    goto return_label;
  }
  else ;
  
#line 7299 
  tmp = vlan_get_protocol(skb);
  
#line 7299 
  switch ((int)tmp) {
    u16 tmp_1;
    case 1673: 
#line 7300 
    ;
    case 5257: 
#line 7301 
    ;
    
#line 7302 
    adapter = (struct ixgbe_adapter *)netdev_priv((struct net_device const *)dev);
    
#line 7304 
    if ((adapter->flags & 2097152U) != 0U) 
#line 7305 
                                           goto ldv_59377; else ;
    default: 
#line 7306 
    ;
    
#line 7307 
    tmp_1 = (*fallback)(dev,skb);
    
#line 7307 
    __retres = tmp_1;
    
#line 7307 
    goto return_label;
  }
  ldv_59377: 
#line 7310 
  ;
  
#line 7310 
  f = & adapter->ring_feature[4];
  
#line 7312 
  tmp_2 = skb_rx_queue_recorded((struct sk_buff const *)skb);
  
#line 7312 
  if ((int)tmp_2 != 0) {
    u16 tmp_3;
    
#line 7312 
    tmp_3 = skb_get_rx_queue((struct sk_buff const *)skb);
    
#line 7312 
    txq = (int)tmp_3;
  }
  else {
    int tmp_8;
    {
      int pscr_ret__;
      {
        
#line 7313 
        void const *__vpp_verify = (void const *)0;
        
#line 7313 
        void const *tmp_4 = __vpp_verify;
      }
      
#line 7313 
      switch (4UL) {
        int tmp_4_0;
        int tmp_5;
        int tmp_6;
        int tmp_7;
        case (unsigned long)1: 
#line 7313 
        ;
        {
          int pfo_ret__;
          
#line 7313 
          switch (4UL) {
            case (unsigned long)1: 
#line 7313 
            ;
            
#line 7314 
            ldv_inline_asm();
            
#line 7313 
            goto ldv_59384;
            case (unsigned long)2: 
#line 7313 
            ;
            
#line 7314 
            ldv_inline_asm();
            
#line 7313 
            goto ldv_59384;
            case (unsigned long)4: 
#line 7313 
            ;
            
#line 7314 
            ldv_inline_asm();
            
#line 7313 
            goto ldv_59384;
            case (unsigned long)8: 
#line 7313 
            ;
            
#line 7314 
            ldv_inline_asm();
            
#line 7313 
            goto ldv_59384;
            default: 
#line 7313 
            ;
            
#line 7313 
            __bad_percpu_size();
          }
          ldv_59384: 
#line 7313 
          ;
          
#line 7313 
          tmp_4_0 = pfo_ret__;
        }
        
#line 7313 
        pscr_ret__ = tmp_4_0;
        
#line 7313 
        goto ldv_59390;
        case (unsigned long)2: 
#line 7313 
        ;
        {
          int pfo_ret___0;
          
#line 7313 
          switch (4UL) {
            case (unsigned long)1: 
#line 7313 
            ;
            
#line 7314 
            ldv_inline_asm();
            
#line 7313 
            goto ldv_59394;
            case (unsigned long)2: 
#line 7313 
            ;
            
#line 7314 
            ldv_inline_asm();
            
#line 7313 
            goto ldv_59394;
            case (unsigned long)4: 
#line 7313 
            ;
            
#line 7314 
            ldv_inline_asm();
            
#line 7313 
            goto ldv_59394;
            case (unsigned long)8: 
#line 7313 
            ;
            
#line 7314 
            ldv_inline_asm();
            
#line 7313 
            goto ldv_59394;
            default: 
#line 7313 
            ;
            
#line 7313 
            __bad_percpu_size();
          }
          ldv_59394: 
#line 7313 
          ;
          
#line 7313 
          tmp_5 = pfo_ret___0;
        }
        
#line 7313 
        pscr_ret__ = tmp_5;
        
#line 7313 
        goto ldv_59390;
        case (unsigned long)4: 
#line 7313 
        ;
        {
          int pfo_ret___1;
          
#line 7313 
          switch (4UL) {
            case (unsigned long)1: 
#line 7313 
            ;
            
#line 7314 
            ldv_inline_asm();
            
#line 7313 
            goto ldv_59403;
            case (unsigned long)2: 
#line 7313 
            ;
            
#line 7314 
            ldv_inline_asm();
            
#line 7313 
            goto ldv_59403;
            case (unsigned long)4: 
#line 7313 
            ;
            
#line 7314 
            ldv_inline_asm();
            
#line 7313 
            goto ldv_59403;
            case (unsigned long)8: 
#line 7313 
            ;
            
#line 7314 
            ldv_inline_asm();
            
#line 7313 
            goto ldv_59403;
            default: 
#line 7313 
            ;
            
#line 7313 
            __bad_percpu_size();
          }
          ldv_59403: 
#line 7313 
          ;
          
#line 7313 
          tmp_6 = pfo_ret___1;
        }
        
#line 7313 
        pscr_ret__ = tmp_6;
        
#line 7313 
        goto ldv_59390;
        case (unsigned long)8: 
#line 7313 
        ;
        {
          int pfo_ret___2;
          
#line 7313 
          switch (4UL) {
            case (unsigned long)1: 
#line 7313 
            ;
            
#line 7314 
            ldv_inline_asm();
            
#line 7313 
            goto ldv_59412;
            case (unsigned long)2: 
#line 7313 
            ;
            
#line 7314 
            ldv_inline_asm();
            
#line 7313 
            goto ldv_59412;
            case (unsigned long)4: 
#line 7313 
            ;
            
#line 7314 
            ldv_inline_asm();
            
#line 7313 
            goto ldv_59412;
            case (unsigned long)8: 
#line 7313 
            ;
            
#line 7314 
            ldv_inline_asm();
            
#line 7313 
            goto ldv_59412;
            default: 
#line 7313 
            ;
            
#line 7313 
            __bad_percpu_size();
          }
          ldv_59412: 
#line 7313 
          ;
          
#line 7313 
          tmp_7 = pfo_ret___2;
        }
        
#line 7313 
        pscr_ret__ = tmp_7;
        
#line 7313 
        goto ldv_59390;
        default: 
#line 7313 
        ;
        
#line 7313 
        __bad_size_call_parameter();
        
#line 7313 
        goto ldv_59390;
      }
      ldv_59390: 
#line 7313 
      ;
      
#line 7313 
      tmp_8 = pscr_ret__;
    }
    
#line 7312 
    txq = tmp_8;
  }
  
#line 7315 
  goto ldv_59421;
  ldv_59420: 
#line 7316 
  ;
  
#line 7316 
  txq -= (int)f->indices;
  ldv_59421: 
#line 7317 
  ;
  
#line 7315 
  if ((int)f->indices <= txq) 
#line 7317 
                              goto ldv_59420; else 
#line 7320 
                                                   goto ldv_59422;
  ldv_59422: 
#line 7321 
  ;
  
#line 7318 
  __retres = (unsigned short)((int)f->offset + (int)((unsigned short)txq));
  return_label: 
#line 7318 
                return __retres;
}


#line 7324  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
netdev_tx_t ixgbe_xmit_frame_ring(struct sk_buff *skb, struct ixgbe_adapter *adapter, struct ixgbe_ring *tx_ring)
{
  netdev_tx_t __retres;
  struct ixgbe_tx_buffer *first;
  int tso;
  unsigned short f;
  unsigned int tmp;
  unsigned char *tmp_0;
  unsigned char *tmp_1;
  int tmp_2;
  unsigned char *tmp_8;
  int tmp_12;
  
#line 7330 
  u32 tx_flags = 0U;
  
#line 7332 
  tmp = skb_headlen((struct sk_buff const *)skb);
  
#line 7332 
  u16 count = (unsigned short)((tmp + 16383U) / 16384U);
  
#line 7333 
  __be16 protocol = skb->protocol;
  
#line 7334 
  u8 hdr_len = (unsigned char)0U;
  
#line 7343 
  f = (unsigned short)0U;
  
#line 7343 
  goto ldv_59436;
  ldv_59435: 
#line 7344 
  ;
  
#line 7344 
  tmp_0 = skb_end_pointer((struct sk_buff const *)skb);
  
#line 7344 
  count = (unsigned short)((int)((unsigned short)((((struct skb_shared_info *)tmp_0)->frags[(int)f].size + 16383U) / 16384U)) + (int)count);
  
#line 7343 
  f = (unsigned short)((int)f + 1);
  ldv_59436: 
#line 7344 
  ;
  
#line 7343 
  tmp_1 = skb_end_pointer((struct sk_buff const *)skb);
  
#line 7343 
  ;
  
#line 7343 
  if ((int)((unsigned short)((struct skb_shared_info *)tmp_1)->nr_frags) > (int)f) 
    
#line 7345 
    goto ldv_59435; else 
#line 7348 
                         goto ldv_59437;
  ldv_59437: 
#line 7349 
  ;
  
#line 7346 
  tmp_2 = ixgbe_maybe_stop_tx(tx_ring,(unsigned short)((int)((unsigned int)count + 3U)));
  
#line 7346 
  if (tmp_2 != 0) {
    
#line 7347 
    tx_ring->__anonCompField_ixgbe_ring_120.tx_stats.tx_busy += 1ULL;
    
#line 7348 
    __retres = NETDEV_TX_BUSY;
    
#line 7348 
    goto return_label;
  }
  else ;
  
#line 7352 
  first = tx_ring->__anonCompField_ixgbe_ring_117.tx_buffer_info + (int)tx_ring->next_to_use;
  
#line 7353 
  first->skb = skb;
  
#line 7354 
  first->bytecount = skb->len;
  
#line 7355 
  first->gso_segs = (unsigned short)1U;
  
#line 7358 
  if (((int)skb->vlan_tci & 4096) != 0) {
    
#line 7359 
    tx_flags = ((unsigned int)((int)skb->vlan_tci << 16) & 4026466304U) | tx_flags;
    
#line 7360 
    tx_flags |= 1U;
  }
  else 
    
#line 7362 
    if ((unsigned int)protocol == 129U) {
      struct vlan_hdr *vhdr;
      struct vlan_hdr _vhdr;
      int tmp_5;
      
#line 7364 
      vhdr = (struct vlan_hdr *)skb_header_pointer((struct sk_buff const *)skb,14,4,(void *)(& _vhdr));
      
#line 7365 
      if (vhdr == (struct vlan_hdr *)0) 
#line 7366 
                                        goto out_drop; else ;
      
#line 7368 
      if (0 != 0) 
#line 7368 
                  tmp_5 = (int)((unsigned short)(((int)vhdr->h_vlan_TCI << 8) | ((int)vhdr->h_vlan_TCI >> 8))) << 16;
      else {
        __u16 tmp_4;
        
#line 7368 
        tmp_4 = __fswab16((unsigned short)((int)vhdr->h_vlan_TCI));
        
#line 7368 
        tmp_5 = (int)tmp_4 << 16;
      }
      
#line 7368 
      tx_flags = (unsigned int)tmp_5 | tx_flags;
      
#line 7370 
      tx_flags |= 64U;
    }
    else ;
  
#line 7372 
  protocol = vlan_get_protocol(skb);
  
#line 7374 
  tmp_8 = skb_end_pointer((struct sk_buff const *)skb);
  
#line 7374 
  ;
  
#line 7374 
  if ((long)(((int)((struct skb_shared_info *)tmp_8)->tx_flags & 1) != 0) != 0L) {
    
#line 7374 
    if (adapter->ptp_clock != (struct ptp_clock *)0) {
      int tmp_9;
      
#line 7375 
      tmp_9 = test_and_set_bit_lock(9L,(unsigned long volatile *)(& adapter->state));
      
#line 7375 
      if (tmp_9 == 0) {
        unsigned char *tmp_6;
        unsigned char *tmp_7;
        
#line 7378 
        tmp_6 = skb_end_pointer((struct sk_buff const *)skb);
        
#line 7378 
        tmp_7 = skb_end_pointer((struct sk_buff const *)skb);
        
#line 7378 
        ((struct skb_shared_info *)tmp_6)->tx_flags = (unsigned char)((unsigned int)((struct skb_shared_info *)tmp_7)->tx_flags | 4U);
        
#line 7379 
        tx_flags |= 4U;
        
#line 7382 
        adapter->ptp_tx_skb = skb_get(skb);
        
#line 7383 
        adapter->ptp_tx_start = jiffies;
        
#line 7384 
        ldv_schedule_work_90(& adapter->ptp_tx_work);
      }
      else ;
    }
    else ;
  }
  else ;
  
#line 7387 
  skb_tx_timestamp(skb);
  
#line 7394 
  if ((adapter->flags & 8388608U) != 0U) 
#line 7395 
                                         tx_flags |= 8U; else ;
  
#line 7399 
  if ((adapter->flags & 4096U) != 0U && ((tx_flags & 65U) != 0U || skb->priority != 7U)) {
    
#line 7402 
    tx_flags &= 536870911U;
    
#line 7403 
    tx_flags = (skb->priority << 29) | tx_flags;
    
#line 7405 
    if ((tx_flags & 64U) != 0U) {
      struct vlan_ethhdr *vhdr_0;
      int tmp_10;
      
#line 7408 
      tmp_10 = skb_cow_head(skb,0U);
      
#line 7408 
      if (tmp_10 != 0) 
#line 7409 
                       goto out_drop; else ;
      
#line 7410 
      vhdr_0 = (struct vlan_ethhdr *)skb->data;
      
#line 7411 
      if (0 != 0) 
#line 7411 
                  vhdr_0->h_vlan_TCI = (unsigned short)(((int)((unsigned short)(tx_flags >> 16)) << 8) | ((int)((unsigned short)(tx_flags >> 16)) >> 8)); else 
                                                                    
#line 7411 
                                                                    vhdr_0->h_vlan_TCI = __fswab16((unsigned short)((int)((unsigned short)(tx_flags >> 16))));
    }
    else 
#line 7414 
         tx_flags |= 1U;
  }
  else ;
  
#line 7419 
  first->tx_flags = tx_flags;
  
#line 7420 
  first->protocol = protocol;
  
#line 7424 
  if ((unsigned int)protocol == 1673U && ((tx_ring->netdev)->features & 538968064ULL) != 0ULL) {
    
#line 7426 
    tso = ixgbe_fso(tx_ring,first,& hdr_len);
    
#line 7427 
    if (tso < 0) 
#line 7428 
                 goto out_drop; else ;
    
#line 7430 
    goto xmit_fcoe;
  }
  else ;
  
#line 7434 
  tso = ixgbe_tso(tx_ring,first,& hdr_len);
  
#line 7435 
  if (tso < 0) 
#line 7436 
               goto out_drop;
  else 
    
#line 7437 
    if (tso == 0) 
#line 7438 
                  ixgbe_tx_csum(tx_ring,first); else ;
  
#line 7441 
  tmp_12 = constant_test_bit(0L,(unsigned long const volatile *)(& tx_ring->state));
  
#line 7441 
  if (tmp_12 != 0) 
#line 7442 
                   ixgbe_atr(tx_ring,first); else ;
  xmit_fcoe: 
#line 7445 
  ;
  
#line 7447 
  ixgbe_tx_map(tx_ring,first,(unsigned char)((int)hdr_len));
  
#line 7449 
  __retres = NETDEV_TX_OK;
  
#line 7449 
  goto return_label;
  out_drop: 
#line 7451 
  ;
  
#line 7452 
  dev_kfree_skb_any(first->skb);
  
#line 7453 
  first->skb = (struct sk_buff *)0;
  
#line 7455 
  __retres = NETDEV_TX_OK;
  return_label: 
#line 7455 
                return __retres;
}


#line 7458  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static netdev_tx_t __ixgbe_xmit_frame(struct sk_buff *skb, struct net_device *netdev, struct ixgbe_ring *ring)
{
  netdev_tx_t __retres;
  struct ixgbe_ring *tx_ring;
  int tmp_0;
  netdev_tx_t tmp_1;
  
#line 7462 
  struct ixgbe_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 7469 
  tmp_0 = skb_put_padto(skb,17U);
  
#line 7469 
  if (tmp_0 != 0) {
    
#line 7470 
    __retres = NETDEV_TX_OK;
    
#line 7470 
    goto return_label;
  }
  else ;
  
#line 7472 
  if (ring == (struct ixgbe_ring *)0) 
#line 7472 
                                      tx_ring = adapter->tx_ring[(int)skb->queue_mapping]; else 
                                                                    
#line 7472 
                                                                    tx_ring = ring;
  
#line 7474 
  tmp_1 = ixgbe_xmit_frame_ring(skb,adapter,tx_ring);
  
#line 7474 
  __retres = tmp_1;
  return_label: 
#line 7474 
                return __retres;
}


#line 7477  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static netdev_tx_t ixgbe_xmit_frame(struct sk_buff *skb, struct net_device *netdev)
{
  netdev_tx_t tmp;
  
#line 7480 
  tmp = __ixgbe_xmit_frame(skb,netdev,(struct ixgbe_ring *)0);
  
#line 7480 
  return tmp;
}


#line 7490  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static int ixgbe_set_mac(struct net_device *netdev, void *p)
{
  int __retres;
  int ret;
  int tmp_1;
  bool tmp_0;
  int tmp_2;
  
#line 7492 
  struct ixgbe_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 7493 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 7494 
  struct sockaddr *addr = (struct sockaddr *)p;
  
#line 7497 
  tmp_0 = is_valid_ether_addr((u8 const *)(& addr->sa_data));
  
#line 7497 
  if (tmp_0) 
#line 7497 
             tmp_1 = 0; else 
#line 7497 
                             tmp_1 = 1;
  
#line 7497 
  if (tmp_1) {
    
#line 7498 
    __retres = -99;
    
#line 7498 
    goto return_label;
  }
  else ;
  
#line 7500 
  ixgbe_del_mac_filter(adapter,(u8 *)(& hw->mac.addr),(unsigned short)((int)adapter->ring_feature[1].offset));
  
#line 7501 
  memcpy((void *)netdev->dev_addr,(void const *)(& addr->sa_data),(unsigned long)netdev->addr_len);
  
#line 7502 
  memcpy((void *)(& hw->mac.addr),(void const *)(& addr->sa_data),(unsigned long)netdev->addr_len);
  
#line 7504 
  ret = ixgbe_add_mac_filter(adapter,(u8 *)(& hw->mac.addr),(unsigned short)((int)adapter->ring_feature[1].offset));
  
#line 7505 
  if (0 < ret) 
#line 7505 
               tmp_2 = 0; else 
#line 7505 
                               tmp_2 = ret;
  
#line 7505 
  __retres = tmp_2;
  return_label: 
#line 7505 
                return __retres;
}


#line 7509  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static int ixgbe_mdio_read(struct net_device *netdev, int prtad, int devad, u16 addr)
{
  int __retres;
  u16 value;
  int rc;
  
#line 7511 
  struct ixgbe_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 7512 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 7516 
  if (hw->phy.mdio.prtad != prtad) {
    
#line 7517 
    __retres = -22;
    
#line 7517 
    goto return_label;
  }
  else ;
  
#line 7518 
  rc = (*(hw->phy.ops.read_reg))(hw,(unsigned int)addr,(unsigned int)devad,& value);
  
#line 7519 
  if (rc == 0) 
#line 7520 
               rc = (int)value; else ;
  
#line 7521 
  __retres = rc;
  return_label: 
#line 7521 
                return __retres;
}


#line 7524  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static int ixgbe_mdio_write(struct net_device *netdev, int prtad, int devad, u16 addr, u16 value)
{
  int __retres;
  int tmp_0;
  
#line 7527 
  struct ixgbe_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 7528 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 7530 
  if (hw->phy.mdio.prtad != prtad) {
    
#line 7531 
    __retres = -22;
    
#line 7531 
    goto return_label;
  }
  else ;
  
#line 7532 
  tmp_0 = (*(hw->phy.ops.write_reg))(hw,(unsigned int)addr,(unsigned int)devad,(unsigned short)((int)value));
  
#line 7532 
  __retres = tmp_0;
  return_label: 
#line 7532 
                return __retres;
}


#line 7535  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static int ixgbe_ioctl(struct net_device *netdev, struct ifreq *req, int cmd)
{
  int __retres;
  
#line 7537 
  struct ixgbe_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 7539 
  switch (cmd) {
    int tmp_0;
    int tmp_1;
    int tmp_3;
    struct mii_ioctl_data *tmp_2;
    case 35248: 
#line 7540 
    ;
    
#line 7541 
    tmp_0 = ixgbe_ptp_set_ts_config(adapter,req);
    
#line 7541 
    __retres = tmp_0;
    
#line 7541 
    goto return_label;
    case 35249: 
#line 7542 
    ;
    
#line 7543 
    tmp_1 = ixgbe_ptp_get_ts_config(adapter,req);
    
#line 7543 
    __retres = tmp_1;
    
#line 7543 
    goto return_label;
    default: 
#line 7544 
    ;
    
#line 7545 
    ;
    
#line 7545 
    tmp_2 = if_mii(req);
    
#line 7545 
    ;
    
#line 7545 
    tmp_3 = mdio_mii_ioctl((struct mdio_if_info const *)(& adapter->hw.phy.mdio),tmp_2,cmd);
    
#line 7545 
    __retres = tmp_3;
    
#line 7545 
    goto return_label;
  }
  return_label: 
#line 7539 
                return __retres;
}


#line 7556  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static int ixgbe_add_sanmac_netdev(struct net_device *dev)
{
  bool tmp_0;
  
#line 7558 
  int err = 0;
  
#line 7559 
  struct ixgbe_adapter *adapter = netdev_priv((struct net_device const *)dev);
  
#line 7560 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 7562 
  tmp_0 = is_valid_ether_addr((u8 const *)(& hw->mac.san_addr));
  
#line 7562 
  if ((int)tmp_0 != 0) {
    
#line 7563 
    rtnl_lock();
    
#line 7564 
    err = dev_addr_add(dev,(unsigned char const *)(& hw->mac.san_addr),(unsigned char)2);
    
#line 7565 
    rtnl_unlock();
    
#line 7568 
    (*(hw->mac.ops.set_vmdq_san_mac))(hw,(unsigned int)adapter->ring_feature[1].offset);
  }
  else ;
  
#line 7570 
  return err;
}


#line 7580  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static int ixgbe_del_sanmac_netdev(struct net_device *dev)
{
  bool tmp_0;
  
#line 7582 
  int err = 0;
  
#line 7583 
  struct ixgbe_adapter *adapter = netdev_priv((struct net_device const *)dev);
  
#line 7584 
  struct ixgbe_mac_info *mac = & adapter->hw.mac;
  
#line 7586 
  tmp_0 = is_valid_ether_addr((u8 const *)(& mac->san_addr));
  
#line 7586 
  if ((int)tmp_0 != 0) {
    
#line 7587 
    rtnl_lock();
    
#line 7588 
    err = dev_addr_del(dev,(unsigned char const *)(& mac->san_addr),(unsigned char)2);
    
#line 7589 
    rtnl_unlock();
  }
  else ;
  
#line 7591 
  return err;
}


#line 7600  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_netpoll(struct net_device *netdev)
{
  int i;
  int tmp_0;
  
#line 7602 
  struct ixgbe_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 7606 
  tmp_0 = constant_test_bit(2L,(unsigned long const volatile *)(& adapter->state));
  
#line 7606 
  if (tmp_0 != 0) 
#line 7607 
                  goto return_label; else ;
  
#line 7610 
  i = 0;
  
#line 7610 
  goto ldv_59508;
  ldv_59507: 
#line 7611 
  ;
  
#line 7611 
  ixgbe_msix_clean_rings(0,(void *)adapter->q_vector[i]);
  
#line 7610 
  i += 1;
  ldv_59508: 
#line 7611 
  ;
  
#line 7610 
  if (adapter->num_q_vectors > i) 
#line 7612 
                                  goto ldv_59507; else 
#line 7615 
                                                       goto ldv_59509;
  ldv_59509: 
#line 7616 
  ;
  return_label: 
#line 7617 
                return;
}


#line 7615  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static struct rtnl_link_stats64 *ixgbe_get_stats64(struct net_device *netdev, struct rtnl_link_stats64 *stats)
{
  int i;
  
#line 7618 
  struct ixgbe_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 7621 
  rcu_read_lock();
  
#line 7622 
  i = 0;
  
#line 7622 
  goto ldv_59525;
  ldv_59524: 
#line 7623 
  ;
  {
    struct ixgbe_ring * volatile *tmp_0;
    u64 bytes;
    u64 packets;
    unsigned int start;
    {
      
#line 7623 
      struct ixgbe_ring *__var = (struct ixgbe_ring *)0;
      
#line 7623 
      tmp_0 = (struct ixgbe_ring * volatile *)(& adapter->rx_ring[i]);
    }
    
#line 7623 
    struct ixgbe_ring *ring = *tmp_0;
    
#line 7627 
    if (ring != (struct ixgbe_ring *)0) {
      bool tmp_1;
      ldv_59522: 
#line 7629 
      ;
      
#line 7629 
      start = u64_stats_fetch_begin_irq((struct u64_stats_sync const *)(& ring->syncp));
      
#line 7630 
      packets = ring->stats.packets;
      
#line 7631 
      bytes = ring->stats.bytes;
      
#line 7632 
      tmp_1 = u64_stats_fetch_retry_irq((struct u64_stats_sync const *)(& ring->syncp),start);
      
#line 7632 
      if ((int)tmp_1 != 0) 
#line 7634 
                           goto ldv_59522; else 
#line 7637 
                                                goto ldv_59523;
      ldv_59523: 
#line 7638 
      ;
      
#line 7633 
      stats->rx_packets += packets;
      
#line 7634 
      stats->rx_bytes += bytes;
    }
    else ;
  }
  
#line 7622 
  i += 1;
  ldv_59525: 
#line 7623 
  ;
  
#line 7622 
  if (adapter->num_rx_queues > i) 
#line 7624 
                                  goto ldv_59524; else 
#line 7627 
                                                       goto ldv_59526;
  ldv_59526: 
#line 7628 
  ;
  
#line 7638 
  i = 0;
  
#line 7638 
  goto ldv_59536;
  ldv_59535: 
#line 7639 
  ;
  {
    struct ixgbe_ring * volatile *tmp_2;
    u64 bytes_0;
    u64 packets_0;
    unsigned int start_0;
    {
      
#line 7639 
      struct ixgbe_ring *__var_0 = (struct ixgbe_ring *)0;
      
#line 7639 
      tmp_2 = (struct ixgbe_ring * volatile *)(& adapter->tx_ring[i]);
    }
    
#line 7639 
    struct ixgbe_ring *ring_0 = *tmp_2;
    
#line 7643 
    if (ring_0 != (struct ixgbe_ring *)0) {
      bool tmp_3;
      ldv_59533: 
#line 7645 
      ;
      
#line 7645 
      start_0 = u64_stats_fetch_begin_irq((struct u64_stats_sync const *)(& ring_0->syncp));
      
#line 7646 
      packets_0 = ring_0->stats.packets;
      
#line 7647 
      bytes_0 = ring_0->stats.bytes;
      
#line 7648 
      tmp_3 = u64_stats_fetch_retry_irq((struct u64_stats_sync const *)(& ring_0->syncp),start_0);
      
#line 7648 
      if ((int)tmp_3 != 0) 
#line 7650 
                           goto ldv_59533; else 
#line 7653 
                                                goto ldv_59534;
      ldv_59534: 
#line 7654 
      ;
      
#line 7649 
      stats->tx_packets += packets_0;
      
#line 7650 
      stats->tx_bytes += bytes_0;
    }
    else ;
  }
  
#line 7638 
  i += 1;
  ldv_59536: 
#line 7639 
  ;
  
#line 7638 
  if (adapter->num_tx_queues > i) 
#line 7640 
                                  goto ldv_59535; else 
#line 7643 
                                                       goto ldv_59537;
  ldv_59537: 
#line 7644 
  ;
  
#line 7653 
  rcu_read_unlock();
  
#line 7655 
  stats->multicast = (unsigned long long)netdev->stats.multicast;
  
#line 7656 
  stats->rx_errors = (unsigned long long)netdev->stats.rx_errors;
  
#line 7657 
  stats->rx_length_errors = (unsigned long long)netdev->stats.rx_length_errors;
  
#line 7658 
  stats->rx_crc_errors = (unsigned long long)netdev->stats.rx_crc_errors;
  
#line 7659 
  stats->rx_missed_errors = (unsigned long long)netdev->stats.rx_missed_errors;
  
#line 7660 
  return stats;
}


#line 7672  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_validate_rtr(struct ixgbe_adapter *adapter, u8 tc)
{
  u32 reg;
  u32 rsave;
  int i;
  
#line 7674 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 7681 
  if (hw->mac.type == (unsigned int)ixgbe_mac_82598EB) 
#line 7682 
                                                       goto return_label; else ;
  
#line 7684 
  reg = ixgbe_read_reg(hw,12320U);
  
#line 7685 
  rsave = reg;
  
#line 7687 
  i = 0;
  
#line 7687 
  goto ldv_59548;
  ldv_59547: 
#line 7688 
  ;
  {
    
#line 7688 
    u8 up2tc = (unsigned char)(reg >> i * 3);
    
#line 7691 
    if ((int)up2tc > (int)tc) 
#line 7692 
                              reg &= 4294967239U; else ;
  }
  
#line 7687 
  i += 1;
  ldv_59548: 
#line 7688 
  ;
  
#line 7687 
  if (i <= 7) 
#line 7689 
              goto ldv_59547; else 
#line 7692 
                                   goto ldv_59549;
  ldv_59549: 
#line 7693 
  ;
  
#line 7695 
  if (reg != rsave) 
#line 7696 
                    ixgbe_write_reg(hw,12320U,reg); else ;
  return_label: 
#line 7698 
                return;
}


#line 7707  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_set_prio_tc_map(struct ixgbe_adapter *adapter)
{
  u8 prio;
  
#line 7709 
  struct net_device *dev = adapter->netdev;
  
#line 7710 
  struct ixgbe_dcb_config *dcb_cfg = & adapter->dcb_cfg;
  
#line 7711 
  struct ieee_ets *ets = adapter->ixgbe_ieee_ets;
  
#line 7714 
  prio = (unsigned char)0U;
  
#line 7714 
  goto ldv_59559;
  ldv_59558: 
#line 7715 
  ;
  {
    
#line 7715 
    u8 tc = (unsigned char)0U;
    
#line 7717 
    if (((int)adapter->dcbx_cap & 4) != 0) 
#line 7718 
                                           tc = ixgbe_dcb_get_tc_from_up(dcb_cfg,0,(unsigned char)((int)prio));
    else 
      
#line 7719 
      if (ets != (struct ieee_ets *)0) 
#line 7720 
                                       tc = ets->prio_tc[(int)prio]; else ;
    
#line 7722 
    netdev_set_prio_tc_map(dev,(unsigned char)((int)prio),(unsigned char)((int)tc));
  }
  
#line 7714 
  prio = (u8)((int)prio + 1);
  ldv_59559: 
#line 7715 
  ;
  
#line 7714 
  if ((unsigned int)prio <= 7U) 
#line 7716 
                                goto ldv_59558; else 
#line 7719 
                                                     goto ldv_59560;
  ldv_59560: 
#line 7720 
  ;
  
#line 7721 
  return;
}


#line 7733  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
int ixgbe_setup_tc(struct net_device *dev, u8 tc)
{
  int __retres;
  bool pools;
  unsigned long tmp_0;
  bool tmp_1;
  bool tmp_3;
  
#line 7735 
  struct ixgbe_adapter *adapter = netdev_priv((struct net_device const *)dev);
  
#line 7736 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 7740 
  if ((int)adapter->dcb_cfg.num_tcs.pg_tcs < (int)tc || (hw->mac.type == (unsigned int)ixgbe_mac_82598EB && (unsigned int)tc <= 7U)) {
    
#line 7743 
    __retres = -22;
    
#line 7743 
    goto return_label;
  }
  else ;
  
#line 7745 
  tmp_0 = find_first_zero_bit((unsigned long const *)(& adapter->fwd_bitmask),32UL);
  
#line 7745 
  pools = (_Bool)(tmp_0 > 1UL);
  
#line 7746 
  if (((unsigned int)tc != 0U && (int)pools != 0) && adapter->num_rx_pools > 8) {
    
#line 7747 
    __retres = -16;
    
#line 7747 
    goto return_label;
  }
  else ;
  
#line 7753 
  tmp_1 = netif_running((struct net_device const *)dev);
  
#line 7753 
  if ((int)tmp_1 != 0) 
#line 7754 
                       ixgbe_close(dev); else ;
  
#line 7755 
  ixgbe_clear_interrupt_scheme(adapter);
  
#line 7758 
  if ((unsigned int)tc != 0U) {
    
#line 7759 
    netdev_set_num_tc(dev,(unsigned char)((int)tc));
    
#line 7760 
    ixgbe_set_prio_tc_map(adapter);
    
#line 7762 
    adapter->flags |= 4096U;
    
#line 7764 
    if (adapter->hw.mac.type == (unsigned int)ixgbe_mac_82598EB) {
      
#line 7765 
      adapter->last_lfc_mode = adapter->hw.fc.requested_mode;
      
#line 7766 
      adapter->hw.fc.requested_mode = ixgbe_fc_none;
    }
    else ;
  }
  else {
    
#line 7769 
    netdev_reset_tc(dev);
    
#line 7771 
    if (adapter->hw.mac.type == (unsigned int)ixgbe_mac_82598EB) 
#line 7772 
                                                                 adapter->hw.fc.requested_mode = adapter->last_lfc_mode; else ;
    
#line 7774 
    adapter->flags &= 4294963199U;
    
#line 7776 
    adapter->temp_dcb_cfg.pfc_mode_enable = (_Bool)0;
    
#line 7777 
    adapter->dcb_cfg.pfc_mode_enable = (_Bool)0;
  }
  
#line 7780 
  ixgbe_validate_rtr(adapter,(unsigned char)((int)tc));
  
#line 7783 
  ixgbe_init_interrupt_scheme(adapter);
  
#line 7785 
  tmp_3 = netif_running((struct net_device const *)dev);
  
#line 7785 
  if ((int)tmp_3 != 0) {
    int tmp_2;
    
#line 7786 
    tmp_2 = ixgbe_open(dev);
    
#line 7786 
    __retres = tmp_2;
    
#line 7786 
    goto return_label;
  }
  else ;
  
#line 7788 
  __retres = 0;
  return_label: 
#line 7788 
                return __retres;
}


#line 7792  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
void ixgbe_sriov_reinit(struct ixgbe_adapter *adapter)
{
  int tmp;
  
#line 7794 
  struct net_device *netdev = adapter->netdev;
  
#line 7796 
  rtnl_lock();
  
#line 7797 
  tmp = netdev_get_num_tc(netdev);
  
#line 7797 
  ;
  
#line 7797 
  ixgbe_setup_tc(netdev,(unsigned char)((int)((unsigned char)tmp)));
  
#line 7798 
  rtnl_unlock();
  
#line 7799 
  return;
}


#line 7802  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
void ixgbe_do_reset(struct net_device *netdev)
{
  bool tmp_0;
  
#line 7804 
  struct ixgbe_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 7806 
  tmp_0 = netif_running((struct net_device const *)netdev);
  
#line 7806 
  if ((int)tmp_0 != 0) 
#line 7807 
                       ixgbe_reinit_locked(adapter); else 
#line 7809 
                                                          ixgbe_reset(adapter);
  
#line 7810 
  return;
}


#line 7812  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static netdev_features_t ixgbe_fix_features(struct net_device *netdev, netdev_features_t features)
{
  
#line 7815 
  struct ixgbe_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 7818 
  if ((features & 17179869184ULL) == 0ULL) 
#line 7819 
                                           features &= 18446744073709518847ULL; else ;
  
#line 7822 
  if ((adapter->flags2 & 1U) == 0U) 
#line 7823 
                                    features &= 18446744073709518847ULL; else ;
  
#line 7825 
  return features;
}


#line 7828  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static int ixgbe_set_features(struct net_device *netdev, netdev_features_t features)
{
  int __retres;
  
#line 7831 
  struct ixgbe_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 7832 
  netdev_features_t changed = netdev->features ^ features;
  
#line 7833 
  bool need_reset = (_Bool)0;
  
#line 7836 
  if ((features & 32768ULL) == 0ULL) {
    
#line 7837 
    if ((adapter->flags2 & 2U) != 0U) 
#line 7838 
                                      need_reset = (_Bool)1; else ;
    
#line 7839 
    adapter->flags2 &= 4294967293U;
  }
  else 
    
#line 7840 
    if ((adapter->flags2 & 1U) != 0U && (adapter->flags2 & 2U) == 0U) {
      
#line 7842 
      if ((unsigned int)adapter->rx_itr_setting == 1U || (unsigned int)adapter->rx_itr_setting > 24U) {
        
#line 7844 
        adapter->flags2 |= 2U;
        
#line 7845 
        need_reset = (_Bool)1;
      }
      else 
        
#line 7846 
        if (((changed ^ features) & 32768ULL) != 0ULL) {
          
#line 7847 
          if (((int)adapter->msg_enable & 2) != 0) 
#line 7847 
                                                   netdev_info((struct net_device const *)adapter->netdev,"rx-usecs set too low, "); else ;
        }
        else ;
    }
    else ;
  
#line 7856 
  switch (features & 4294967296ULL) {
    int tmp_0;
    case (unsigned long long)0: 
#line 7857 
    ;
    
#line 7859 
    if ((adapter->flags & 524288U) == 0U) 
#line 7860 
                                          need_reset = (_Bool)1; else ;
    
#line 7862 
    adapter->flags &= 4294705151U;
    
#line 7863 
    adapter->flags |= 524288U;
    
#line 7864 
    goto ldv_59589;
    default: 
#line 7865 
    ;
    
#line 7867 
    if ((adapter->flags & 524288U) != 0U) 
#line 7868 
                                          need_reset = (_Bool)1; else ;
    
#line 7870 
    adapter->flags &= 4294443007U;
    
#line 7873 
    if ((adapter->flags & 8388608U) != 0U) 
#line 7874 
                                           goto ldv_59589; else ;
    
#line 7877 
    tmp_0 = netdev_get_num_tc(netdev);
    
#line 7877 
    if (tmp_0 > 1) 
#line 7878 
                   goto ldv_59589; else ;
    
#line 7881 
    if ((unsigned int)adapter->ring_feature[2].limit <= 1U) 
#line 7882 
                                                            goto ldv_59589; else ;
    
#line 7885 
    if (adapter->atr_sample_rate == 0U) 
#line 7886 
                                        goto ldv_59589; else ;
    
#line 7888 
    adapter->flags |= 262144U;
    
#line 7889 
    goto ldv_59589;
  }
  ldv_59589: 
#line 7892 
  ;
  
#line 7892 
  if ((features & 256ULL) != 0ULL) 
#line 7893 
                                   ixgbe_vlan_strip_enable(adapter); else 
                                                                    
#line 7895 
                                                                    ixgbe_vlan_strip_disable(adapter);
  
#line 7897 
  if ((changed & 274877906944ULL) != 0ULL) 
#line 7898 
                                           need_reset = (_Bool)1; else ;
  
#line 7900 
  netdev->features = features;
  
#line 7901 
  if ((int)need_reset != 0) 
#line 7902 
                            ixgbe_do_reset(netdev); else ;
  
#line 7904 
  __retres = 0;
  
#line 7904 
  return __retres;
}


#line 7913  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_add_vxlan_port(struct net_device *dev, sa_family_t sa_family, __be16 port)
{
  int tmp_1;
  
#line 7916 
  struct ixgbe_adapter *adapter = netdev_priv((struct net_device const *)dev);
  
#line 7917 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 7918 
  if (0 != 0) 
#line 7918 
              tmp_1 = (int)((unsigned short)(((int)port << 8) | ((int)port >> 8)));
  else {
    __u16 tmp_0;
    
#line 7918 
    tmp_0 = __fswab16((unsigned short)((int)port));
    
#line 7918 
    tmp_1 = (int)tmp_0;
  }
  
#line 7918 
  u16 new_port = (unsigned short)tmp_1;
  
#line 7920 
  if ((unsigned int)sa_family == 10U) 
#line 7921 
                                      goto return_label; else ;
  
#line 7923 
  if ((int)adapter->vxlan_port == (int)new_port) {
    
#line 7924 
    netdev_info((struct net_device const *)dev,"Port %d already offloaded\n",(int)new_port);
    
#line 7925 
    goto return_label;
  }
  else ;
  
#line 7928 
  if ((unsigned int)adapter->vxlan_port != 0U) {
    
#line 7929 
    netdev_info((struct net_device const *)dev,"Hit Max num of UDP ports, not adding port %d\n",(int)new_port);
    
#line 7932 
    goto return_label;
  }
  else ;
  
#line 7935 
  adapter->vxlan_port = new_port;
  
#line 7936 
  ixgbe_write_reg(hw,20604U,(unsigned int)new_port);
  return_label: 
#line 7937 
                return;
}


#line 7945  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_del_vxlan_port(struct net_device *dev, sa_family_t sa_family, __be16 port)
{
  int tmp_1;
  
#line 7948 
  struct ixgbe_adapter *adapter = netdev_priv((struct net_device const *)dev);
  
#line 7949 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 7950 
  if (0 != 0) 
#line 7950 
              tmp_1 = (int)((unsigned short)(((int)port << 8) | ((int)port >> 8)));
  else {
    __u16 tmp_0;
    
#line 7950 
    tmp_0 = __fswab16((unsigned short)((int)port));
    
#line 7950 
    tmp_1 = (int)tmp_0;
  }
  
#line 7950 
  u16 new_port = (unsigned short)tmp_1;
  
#line 7952 
  if ((unsigned int)sa_family == 10U) 
#line 7953 
                                      goto return_label; else ;
  
#line 7955 
  if ((int)adapter->vxlan_port != (int)new_port) {
    
#line 7956 
    netdev_info((struct net_device const *)dev,"Port %d was not found, not deleting\n",(int)new_port);
    
#line 7958 
    goto return_label;
  }
  else ;
  
#line 7961 
  adapter->vxlan_port = (unsigned short)0U;
  
#line 7962 
  ixgbe_write_reg(hw,20604U,0U);
  return_label: 
#line 7963 
                return;
}


#line 7965  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static int ixgbe_ndo_fdb_add(struct ndmsg *ndm, struct nlattr **tb, struct net_device *dev, unsigned char const *addr, u16 vid, u16 flags)
{
  int __retres;
  bool tmp;
  int tmp_1;
  
#line 7971 
  tmp = is_unicast_ether_addr(addr);
  
#line 7971 
  if ((int)tmp != 0) 
#line 7971 
                     goto _LOR;
  else {
    bool tmp_0;
    
#line 7971 
    tmp_0 = is_link_local_ether_addr(addr);
    
#line 7971 
    if ((int)tmp_0 != 0) {
      _LOR: 
#line 7972 
      ;
      
#line 7972 
      if (dev->uc.count > 14) {
        
#line 7973 
        __retres = -12;
        
#line 7973 
        goto return_label;
      }
      else ;
    }
    else ;
  }
  
#line 7976 
  tmp_1 = ndo_dflt_fdb_add(ndm,tb,dev,addr,(unsigned short)((int)vid),(unsigned short)((int)flags));
  
#line 7976 
  __retres = tmp_1;
  return_label: 
#line 7976 
                return __retres;
}


#line 7986  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static int ixgbe_configure_bridge_mode(struct ixgbe_adapter *adapter, __u16 mode)
{
  int __retres;
  unsigned int p;
  unsigned int num_pools;
  u32 vmdctl;
  
#line 7989 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 7993 
  switch ((int)mode) {
    case 1: 
#line 7994 
    ;
    
#line 7996 
    ixgbe_write_reg(& adapter->hw,33312U,0U);
    
#line 8002 
    vmdctl = ixgbe_read_reg(hw,22556U);
    
#line 8003 
    vmdctl |= 1073741824U;
    
#line 8004 
    ixgbe_write_reg(hw,22556U,vmdctl);
    
#line 8009 
    num_pools = adapter->num_vfs + (unsigned int)adapter->num_rx_pools;
    
#line 8010 
    p = 0U;
    
#line 8010 
    goto ldv_59625;
    ldv_59624: 
#line 8011 
    ;
    
#line 8011 
    if (hw->mac.ops.set_source_address_pruning != (void (*)(struct ixgbe_hw *, bool , unsigned int ))0) 
      
#line 8012 
      (*(hw->mac.ops.set_source_address_pruning))(hw,(_Bool)1,p); else ;
    
#line 8010 
    p += 1U;
    ldv_59625: 
#line 8011 
    ;
    
#line 8010 
    if (p < num_pools) 
#line 8012 
                       goto ldv_59624; else 
#line 8015 
                                            goto ldv_59626;
    ldv_59626: 
#line 8016 
    ;
    
#line 8016 
    goto ldv_59627;
    case 0: 
#line 8017 
    ;
    
#line 8019 
    ixgbe_write_reg(& adapter->hw,33312U,1U);
    
#line 8025 
    vmdctl = ixgbe_read_reg(hw,22556U);
    
#line 8026 
    if (adapter->num_vfs == 0U) 
#line 8027 
                                vmdctl &= 3221225471U; else ;
    
#line 8028 
    ixgbe_write_reg(hw,22556U,vmdctl);
    
#line 8033 
    num_pools = adapter->num_vfs + (unsigned int)adapter->num_rx_pools;
    
#line 8034 
    p = 0U;
    
#line 8034 
    goto ldv_59630;
    ldv_59629: 
#line 8035 
    ;
    
#line 8035 
    if (hw->mac.ops.set_source_address_pruning != (void (*)(struct ixgbe_hw *, bool , unsigned int ))0) 
      
#line 8036 
      (*(hw->mac.ops.set_source_address_pruning))(hw,(_Bool)0,p); else ;
    
#line 8034 
    p += 1U;
    ldv_59630: 
#line 8035 
    ;
    
#line 8034 
    if (p < num_pools) 
#line 8036 
                       goto ldv_59629; else 
#line 8039 
                                            goto ldv_59631;
    ldv_59631: 
#line 8040 
    ;
    
#line 8040 
    goto ldv_59627;
    default: 
#line 8041 
    ;
    
#line 8042 
    __retres = -22;
    
#line 8042 
    goto return_label;
  }
  ldv_59627: 
#line 8045 
  ;
  
#line 8045 
  adapter->bridge_mode = mode;
  
#line 8047 
  if (((int)adapter->msg_enable & 1) != 0) {
    char *tmp;
    
#line 8047 
    if ((unsigned int)mode == 1U) 
#line 8047 
                                  tmp = (char *)"VEPA"; else 
#line 8047 
                                                             tmp = (char *)"VEB";
    
#line 8047 
    ;
    
#line 8047 
    netdev_info((struct net_device const *)adapter->netdev,"enabling bridge mode: %s\n",tmp);
  }
  else ;
  
#line 8050 
  __retres = 0;
  return_label: 
#line 8050 
                return __retres;
}


#line 8053  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static int ixgbe_ndo_bridge_setlink(struct net_device *dev, struct nlmsghdr *nlh, u16 flags)
{
  int __retres;
  struct nlattr *attr;
  struct nlattr *br_spec;
  int rem;
  int tmp_3;
  
#line 8056 
  struct ixgbe_adapter *adapter = netdev_priv((struct net_device const *)dev);
  
#line 8060 
  if ((adapter->flags & 8388608U) == 0U) {
    
#line 8061 
    __retres = -95;
    
#line 8061 
    goto return_label;
  }
  else ;
  
#line 8063 
  br_spec = nlmsg_find_attr((struct nlmsghdr const *)nlh,16,26);
  
#line 8064 
  if (br_spec == (struct nlattr *)0) {
    
#line 8065 
    __retres = -22;
    
#line 8065 
    goto return_label;
  }
  else ;
  
#line 8067 
  attr = (struct nlattr *)nla_data((struct nlattr const *)br_spec);
  
#line 8067 
  rem = nla_len((struct nlattr const *)br_spec);
  
#line 8067 
  goto ldv_59647;
  ldv_59646: 
#line 8068 
  ;
  {
    int status;
    __u16 mode;
    int tmp_1;
    int tmp_2;
    
#line 8071 
    tmp_1 = nla_type((struct nlattr const *)attr);
    
#line 8071 
    if (tmp_1 != 1) 
#line 8072 
                    goto ldv_59644; else ;
    
#line 8074 
    tmp_2 = nla_len((struct nlattr const *)attr);
    
#line 8074 
    if ((unsigned int)tmp_2 <= 1U) {
      
#line 8075 
      __retres = -22;
      
#line 8075 
      goto return_label;
    }
    else ;
    
#line 8077 
    mode = nla_get_u16((struct nlattr const *)attr);
    
#line 8078 
    status = ixgbe_configure_bridge_mode(adapter,(unsigned short)((int)mode));
    
#line 8079 
    if (status != 0) {
      
#line 8080 
      __retres = status;
      
#line 8080 
      goto return_label;
    }
    else ;
    
#line 8082 
    goto ldv_59645;
  }
  ldv_59644: 
#line 8084 
  ;
  
#line 8067 
  attr = nla_next((struct nlattr const *)attr,& rem);
  ldv_59647: 
#line 8068 
  ;
  
#line 8067 
  tmp_3 = nla_ok((struct nlattr const *)attr,rem);
  
#line 8067 
  if (tmp_3 != 0) 
#line 8069 
                  goto ldv_59646; else 
#line 8072 
                                       goto ldv_59645;
  ldv_59645: 
#line 8073 
  ;
  
#line 8085 
  __retres = 0;
  return_label: 
#line 8085 
                return __retres;
}


#line 8088  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static int ixgbe_ndo_bridge_getlink(struct sk_buff *skb, u32 pid, u32 seq, struct net_device *dev, u32 filter_mask, int nlflags)
{
  int __retres;
  int tmp_0;
  
#line 8092 
  struct ixgbe_adapter *adapter = netdev_priv((struct net_device const *)dev);
  
#line 8094 
  if ((adapter->flags & 8388608U) == 0U) {
    
#line 8095 
    __retres = 0;
    
#line 8095 
    goto return_label;
  }
  else ;
  
#line 8097 
  tmp_0 = ndo_dflt_bridge_getlink(skb,pid,seq,dev,(unsigned short)((int)adapter->bridge_mode),0U,0U,nlflags,filter_mask,(int (*)(struct sk_buff *, struct net_device *, u32 ))0);
  
#line 8097 
  __retres = tmp_0;
  return_label: 
#line 8097 
                return __retres;
}


#line 8102  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void *ixgbe_fwd_add(struct net_device *pdev, struct net_device *vdev)
{
  void *__retres;
  unsigned int limit;
  int pool;
  int err;
  unsigned long tmp_6;
  unsigned long tmp_7;
  int tmp_8;
  void *tmp_9;
  
#line 8104 
  struct ixgbe_fwd_adapter *fwd_adapter = (struct ixgbe_fwd_adapter *)0;
  
#line 8105 
  struct ixgbe_adapter *adapter = netdev_priv((struct net_device const *)pdev);
  
#line 8106 
  int used_pools = (int)(adapter->num_vfs + (unsigned int)adapter->num_rx_pools);
  
#line 8114 
  if (used_pools > 63) {
    void *tmp_0;
    
#line 8115 
    tmp_0 = ERR_PTR(-22L);
    
#line 8115 
    __retres = tmp_0;
    
#line 8115 
    goto return_label;
  }
  else ;
  
#line 8118 
  if (vdev->num_rx_queues != vdev->num_tx_queues) {
    void *tmp_1;
    
#line 8119 
    netdev_info((struct net_device const *)pdev,"%s: Only supports a single queue count for TX and RX\n",(char *)(& vdev->name));
    
#line 8121 
    tmp_1 = ERR_PTR(-22L);
    
#line 8121 
    __retres = tmp_1;
    
#line 8121 
    goto return_label;
  }
  else ;
  
#line 8125 
  if (vdev->num_tx_queues > 4U || vdev->num_tx_queues == 3U) {
    void *tmp_2;
    
#line 8127 
    netdev_info((struct net_device const *)pdev,"%s: Supports RX/TX Queue counts 1,2, and 4\n",(char *)(& pdev->name));
    
#line 8130 
    tmp_2 = ERR_PTR(-22L);
    
#line 8130 
    __retres = tmp_2;
    
#line 8130 
    goto return_label;
  }
  else ;
  
#line 8133 
  if (((adapter->flags & 4096U) != 0U && adapter->num_rx_pools > 7) || adapter->num_rx_pools > 31) {
    void *tmp_3;
    
#line 8136 
    tmp_3 = ERR_PTR(-16L);
    
#line 8136 
    __retres = tmp_3;
    
#line 8136 
    goto return_label;
  }
  else ;
  
#line 8138 
  fwd_adapter = (struct ixgbe_fwd_adapter *)kcalloc(1UL,544UL,208U);
  
#line 8139 
  if (fwd_adapter == (struct ixgbe_fwd_adapter *)0) {
    void *tmp_5;
    
#line 8140 
    tmp_5 = ERR_PTR(-12L);
    
#line 8140 
    __retres = tmp_5;
    
#line 8140 
    goto return_label;
  }
  else ;
  
#line 8142 
  tmp_6 = find_first_zero_bit((unsigned long const *)(& adapter->fwd_bitmask),32UL);
  
#line 8142 
  pool = (int)tmp_6;
  
#line 8143 
  adapter->num_rx_pools += 1;
  
#line 8144 
  set_bit((long)pool,(unsigned long volatile *)(& adapter->fwd_bitmask));
  
#line 8145 
  tmp_7 = find_last_bit((unsigned long const *)(& adapter->fwd_bitmask),32UL);
  
#line 8145 
  limit = (unsigned int)tmp_7;
  
#line 8148 
  adapter->flags |= 8404992U;
  
#line 8149 
  adapter->ring_feature[1].limit = (unsigned short)((unsigned int)((unsigned short)limit) + 1U);
  
#line 8150 
  adapter->ring_feature[2].limit = (unsigned short)vdev->num_tx_queues;
  
#line 8153 
  tmp_8 = netdev_get_num_tc(pdev);
  
#line 8153 
  ;
  
#line 8153 
  err = ixgbe_setup_tc(pdev,(unsigned char)((int)((unsigned char)tmp_8)));
  
#line 8154 
  if (err != 0) 
#line 8155 
                goto fwd_add_err; else ;
  
#line 8156 
  fwd_adapter->pool = pool;
  
#line 8157 
  fwd_adapter->real_adapter = adapter;
  
#line 8158 
  err = ixgbe_fwd_ring_up(vdev,fwd_adapter);
  
#line 8159 
  if (err != 0) 
#line 8160 
                goto fwd_add_err; else ;
  
#line 8161 
  netif_tx_start_all_queues(vdev);
  
#line 8162 
  __retres = (void *)fwd_adapter;
  
#line 8162 
  goto return_label;
  fwd_add_err: 
#line 8163 
  ;
  
#line 8165 
  netdev_info((struct net_device const *)pdev,"%s: dfwd hardware acceleration failed\n",(char *)(& vdev->name));
  
#line 8167 
  set_bit((long)pool,(unsigned long volatile *)(& adapter->fwd_bitmask));
  
#line 8168 
  adapter->num_rx_pools -= 1;
  
#line 8169 
  kfree((void const *)fwd_adapter);
  
#line 8170 
  tmp_9 = ERR_PTR((long)err);
  
#line 8170 
  __retres = tmp_9;
  return_label: 
#line 8170 
                return __retres;
}


#line 8173  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_fwd_del(struct net_device *pdev, void *priv)
{
  unsigned int limit;
  unsigned long tmp;
  int tmp_0;
  
#line 8175 
  struct ixgbe_fwd_adapter *fwd_adapter = (struct ixgbe_fwd_adapter *)priv;
  
#line 8176 
  struct ixgbe_adapter *adapter = fwd_adapter->real_adapter;
  
#line 8179 
  set_bit((long)fwd_adapter->pool,(unsigned long volatile *)(& adapter->fwd_bitmask));
  
#line 8180 
  adapter->num_rx_pools -= 1;
  
#line 8182 
  tmp = find_last_bit((unsigned long const *)(& adapter->fwd_bitmask),32UL);
  
#line 8182 
  limit = (unsigned int)tmp;
  
#line 8183 
  adapter->ring_feature[1].limit = (unsigned short)((unsigned int)((unsigned short)limit) + 1U);
  
#line 8184 
  ixgbe_fwd_ring_down(fwd_adapter->netdev,fwd_adapter);
  
#line 8185 
  tmp_0 = netdev_get_num_tc(pdev);
  
#line 8185 
  ;
  
#line 8185 
  ixgbe_setup_tc(pdev,(unsigned char)((int)((unsigned char)tmp_0)));
  {
    
#line 8186 
    struct _ddebug descriptor = {.modname = "ixgbe", .function = "ixgbe_fwd_del", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c", .format = "pool %i:%i queues %i:%i VSI bitmask %lx\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))8190U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 8186 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 8186 
                                                        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)pdev,"pool %i:%i queues %i:%i VSI bitmask %lx\n",fwd_adapter->pool,adapter->num_rx_pools,fwd_adapter->rx_base_queue,fwd_adapter->rx_base_queue + (unsigned int)adapter->num_rx_queues_per_pool,adapter->fwd_bitmask); else ;
  }
  
#line 8191 
  kfree((void const *)fwd_adapter);
  
#line 8192 
  return;
}


#line 8194  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static struct net_device_ops const ixgbe_netdev_ops = {.ndo_init = (int (*)(struct net_device *))0, .ndo_uninit = (void (*)(struct net_device *))0, .ndo_open = & ixgbe_open, .ndo_stop = & ixgbe_close, .ndo_start_xmit = & ixgbe_xmit_frame, .ndo_select_queue = & ixgbe_select_queue, .ndo_change_rx_flags = (void (*)(struct net_device *, int ))0, .ndo_set_rx_mode = & ixgbe_set_rx_mode, .ndo_set_mac_address = & ixgbe_set_mac, .ndo_validate_addr = & eth_validate_addr, .ndo_do_ioctl = & ixgbe_ioctl, .ndo_set_config = (int (*)(struct net_device *, struct ifmap *))0, .ndo_change_mtu = & ixgbe_change_mtu, .ndo_neigh_setup = (int (*)(struct net_device *, struct neigh_parms *))0, .ndo_tx_timeout = & ixgbe_tx_timeout, .ndo_get_stats64 = & ixgbe_get_stats64, .ndo_get_stats = (struct net_device_stats *(*)(struct net_device *))0, .ndo_vlan_rx_add_vid = & ixgbe_vlan_rx_add_vid, .ndo_vlan_rx_kill_vid = & ixgbe_vlan_rx_kill_vid, .ndo_poll_controller = & ixgbe_netpoll, .ndo_netpoll_setup = (int (*)(struct net_device *, struct netpoll_info *))0, .ndo_netpoll_cleanup = (void (*)(struct net_device *))0, .ndo_busy_poll = & ixgbe_low_latency_recv, .ndo_set_vf_mac = & ixgbe_ndo_set_vf_mac, .ndo_set_vf_vlan = & ixgbe_ndo_set_vf_vlan, .ndo_set_vf_rate = & ixgbe_ndo_set_vf_bw, .ndo_set_vf_spoofchk = & ixgbe_ndo_set_vf_spoofchk, .ndo_get_vf_config = & ixgbe_ndo_get_vf_config, .ndo_set_vf_link_state = (int (*)(struct net_device *, int , int ))0, .ndo_get_vf_stats = (int (*)(struct net_device *, int , struct ifla_vf_stats *))0, .ndo_set_vf_port = (int (*)(struct net_device *, int , struct nlattr **))0, .ndo_get_vf_port = (int (*)(struct net_device *, int , struct sk_buff *))0, .ndo_set_vf_rss_query_en = & ixgbe_ndo_set_vf_rss_query_en, .ndo_setup_tc = & ixgbe_setup_tc, .ndo_fcoe_enable = & ixgbe_fcoe_enable, .ndo_fcoe_disable = & ixgbe_fcoe_disable, .ndo_fcoe_ddp_setup = & ixgbe_fcoe_ddp_get, .ndo_fcoe_ddp_done = & ixgbe_fcoe_ddp_put, .ndo_fcoe_ddp_target = & ixgbe_fcoe_ddp_target, .ndo_fcoe_get_hbainfo = & ixgbe_fcoe_get_hbainfo, .ndo_fcoe_get_wwn = & ixgbe_fcoe_get_wwn, .ndo_rx_flow_steer = (int (*)(struct net_device *, struct sk_buff const *, u16 , u32 ))0, .ndo_add_slave = (int (*)(struct net_device *, struct net_device *))0, .ndo_del_slave = (int (*)(struct net_device *, struct net_device *))0, .ndo_fix_features = & ixgbe_fix_features, .ndo_set_features = & ixgbe_set_features, .ndo_neigh_construct = (int (*)(struct neighbour *))0, .ndo_neigh_destroy = (void (*)(struct neighbour *))0, .ndo_fdb_add = & ixgbe_ndo_fdb_add, .ndo_fdb_del = (int (*)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char const *, u16 ))0, .ndo_fdb_dump = (int (*)(struct sk_buff *, struct netlink_callback *, struct net_device *, struct net_device *, int ))0, .ndo_bridge_setlink = & ixgbe_ndo_bridge_setlink, .ndo_bridge_getlink = & ixgbe_ndo_bridge_getlink, .ndo_bridge_dellink = (int (*)(struct net_device *, struct nlmsghdr *, u16 ))0, .ndo_change_carrier = (int (*)(struct net_device *, bool ))0, .ndo_get_phys_port_id = (int (*)(struct net_device *, struct netdev_phys_item_id *))0, .ndo_get_phys_port_name = (int (*)(struct net_device *, char *, size_t ))0, .ndo_add_vxlan_port = & ixgbe_add_vxlan_port, .ndo_del_vxlan_port = & ixgbe_del_vxlan_port, .ndo_dfwd_add_station = & ixgbe_fwd_add, .ndo_dfwd_del_station = & ixgbe_fwd_del, .ndo_dfwd_start_xmit = (netdev_tx_t (*)(struct sk_buff *, struct net_device *, void *))0, .ndo_get_lock_subclass = (int (*)(struct net_device *))0, .ndo_features_check = (netdev_features_t (*)(struct sk_buff *, struct net_device *, netdev_features_t ))0, .ndo_set_tx_maxrate = (int (*)(struct net_device *, int , u32 ))0, .ndo_get_iflink = (int (*)(struct net_device const *))0};

#line 8252  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
__inline static int ixgbe_enumerate_functions(struct ixgbe_adapter *adapter)
{
  int __retres;
  struct pci_dev *entry;
  bool tmp;
  struct pci_dev *tmp_0;
  struct pci_dev *tmp_1;
  
#line 8254 
  struct pci_dev *pdev = adapter->pdev;
  
#line 8255 
  int physfns = 0;
  
#line 8261 
  tmp = ixgbe_pcie_from_parent(& adapter->hw);
  
#line 8261 
  if ((int)tmp != 0) 
#line 8262 
                     physfns = 4; else ;
  {
    
#line 8264 
    struct list_head const *__mptr = (struct list_head const *)((adapter->pdev)->bus)->devices.next;
    
#line 8264 
    tmp_0 = (struct pci_dev *)__mptr;
  }
  
#line 8264 
  entry = tmp_0;
  
#line 8264 
  goto ldv_59690;
  ldv_59689: 
#line 8265 
  ;
  
#line 8266 
  if ((unsigned int)*((unsigned char *)entry + 2531UL) != 0U) 
#line 8267 
                                                              goto ldv_59688; else ;
  
#line 8275 
  if ((int)entry->vendor != (int)pdev->vendor || (int)entry->device != (int)pdev->device) {
    
#line 8277 
    __retres = -1;
    
#line 8277 
    goto return_label;
  }
  else ;
  
#line 8279 
  physfns += 1;
  ldv_59688: 
#line 8280 
  ;
  {
    
#line 8264 
    struct list_head const *__mptr_0 = (struct list_head const *)entry->bus_list.next;
    
#line 8264 
    tmp_1 = (struct pci_dev *)__mptr_0;
  }
  
#line 8264 
  entry = tmp_1;
  ldv_59690: 
#line 8266 
  ;
  
#line 8264 
  if (& entry->bus_list != & ((adapter->pdev)->bus)->devices) 
#line 8266 
                                                              goto ldv_59689; else 
                                                                    
#line 8269 
                                                                    goto ldv_59691;
  ldv_59691: 
#line 8270 
  ;
  
#line 8282 
  __retres = physfns;
  return_label: 
#line 8282 
                return __retres;
}


#line 8295  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
int ixgbe_wol_supported(struct ixgbe_adapter *adapter, u16 device_id, u16 subdevice_id)
{
  
#line 8298 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 8299 
  u16 wol_cap = (unsigned short)((unsigned int)adapter->eeprom_cap & 12U);
  
#line 8300 
  int is_wol_supported = 0;
  
#line 8302 
  switch ((int)device_id) {
    case 4347: 
#line 8303 
    ;
    
#line 8305 
    switch ((int)subdevice_id) {
      case 4209: 
#line 8306 
      ;
      case 6096: 
#line 8307 
      ;
      
#line 8309 
      if ((unsigned int)hw->bus.func != 0U) 
#line 8310 
                                            goto ldv_59703; else ;
      case 8475: 
#line 8311 
      ;
      case 4521: 
#line 8312 
      ;
      case 8050: 
#line 8313 
      ;
      case 1136: 
#line 8314 
      ;
      case 35190: 
#line 8315 
      ;
      
#line 8316 
      is_wol_supported = 1;
      
#line 8317 
      goto ldv_59703;
    }
    ldv_59703: 
#line 8319 
    ;
    
#line 8319 
    goto ldv_59709;
    case 5463: 
#line 8320 
    ;
    
#line 8322 
    switch ((int)subdevice_id) {
      case 1: 
#line 8323 
      ;
      
#line 8324 
      is_wol_supported = 1;
      
#line 8325 
      goto ldv_59712;
    }
    ldv_59712: 
#line 8327 
    ;
    
#line 8327 
    goto ldv_59709;
    case 4344: 
#line 8328 
    ;
    
#line 8330 
    if ((unsigned int)subdevice_id != 12U) 
#line 8331 
                                           is_wol_supported = 1; else ;
    
#line 8332 
    goto ldv_59709;
    case 4343: 
#line 8333 
    ;
    
#line 8334 
    is_wol_supported = 1;
    
#line 8335 
    goto ldv_59709;
    case 5416: 
#line 8336 
    ;
    case 5472: 
#line 8337 
    ;
    case 5475: 
#line 8338 
    ;
    case 5546: 
#line 8339 
    ;
    case 5547: 
#line 8340 
    ;
    case 5549: 
#line 8341 
    ;
    
#line 8343 
    if ((unsigned int)wol_cap == 4U || ((unsigned int)wol_cap == 8U && (unsigned int)hw->bus.func == 0U)) 
      
#line 8346 
      is_wol_supported = 1; else ;
    
#line 8348 
    goto ldv_59709;
  }
  ldv_59709: 
#line 8351 
  ;
  
#line 8351 
  return is_wol_supported;
}


#line 8358  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_get_platform_mac_addr(struct ixgbe_adapter *adapter)
{
  unsigned char const *addr;
  
#line 8361 
  struct device_node *dp = pci_device_to_OF_node((struct pci_dev const *)adapter->pdev);
  
#line 8362 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 8365 
  addr = (unsigned char const *)of_get_mac_address(dp);
  
#line 8366 
  if (addr != (unsigned char const *)0U) {
    
#line 8367 
    ether_addr_copy((u8 *)(& hw->mac.perm_addr),addr);
    
#line 8368 
    goto return_label;
  }
  else ;
  return_label: 
#line 8370 
                return;
}


#line 8388  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static int ixgbe_probe(struct pci_dev *pdev, struct pci_device_id const *ent)
{
  int __retres;
  struct net_device *netdev;
  struct ixgbe_hw *hw;
  int i;
  int err;
  int pci_using_dac;
  int expected_gts;
  u8 part_str[11U];
  u16 device_caps;
  u32 eec;
  int tmp_0;
  int tmp_1;
  u32 tmp_3;
  void *tmp_5;
  resource_size_t tmp_4;
  char const *tmp_6;
  bool tmp_7;
  s32 tmp_12;
  int tmp_14;
  bool tmp_13;
  bool tmp_15;
  int tmp_16;
  bool tmp_17;
  bool tmp_22;
  int tmp_23;
  int tmp_24;
  bool tmp_25;
  int tmp_27;
  int tmp_28;
  
#line 8391 
  struct ixgbe_adapter *adapter = (struct ixgbe_adapter *)0;
  
#line 8393 
  struct ixgbe_info const *ii = ixgbe_info_tbl[ent->driver_data];
  
#line 8395 
  unsigned int indices = 64U;
  
#line 8397 
  bool disable_dev = (_Bool)0;
  
#line 8406 
  if ((unsigned int)*((unsigned char *)pdev + 2531UL) != 0U) {
    {
      
#line 8407 
      int __ret_warn_on = 1;
      
#line 8407 
      if ((long)(__ret_warn_on != 0) != 0L) {
        char const *tmp;
        
#line 8407 
        ;
        
#line 8407 
        ;
        
#line 8407 
        tmp = pci_name((struct pci_dev const *)pdev);
        
#line 8407 
        warn_slowpath_fmt("/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c",8408,"\001",tmp,(int)pdev->vendor,(int)pdev->device);
      }
      else ;
      
#line 8407 
      long tmp_2 = (long)(__ret_warn_on != 0);
    }
    
#line 8409 
    __retres = -22;
    
#line 8409 
    goto return_label;
  }
  else ;
  
#line 8412 
  err = pci_enable_device_mem(pdev);
  
#line 8413 
  if (err != 0) {
    
#line 8414 
    __retres = err;
    
#line 8414 
    goto return_label;
  }
  else ;
  
#line 8416 
  tmp_0 = dma_set_mask_and_coherent(& pdev->dev,18446744073709551615ULL);
  
#line 8416 
  if (tmp_0 == 0) 
#line 8417 
                  pci_using_dac = 1;
  else {
    
#line 8419 
    err = dma_set_mask_and_coherent(& pdev->dev,4294967295ULL);
    
#line 8420 
    if (err != 0) {
      
#line 8421 
      dev_err((struct device const *)(& pdev->dev),"No usable DMA configuration, aborting\n");
      
#line 8423 
      goto err_dma;
    }
    else ;
    
#line 8425 
    pci_using_dac = 0;
  }
  
#line 8428 
  tmp_1 = pci_select_bars(pdev,512UL);
  
#line 8428 
  ;
  
#line 8428 
  err = pci_request_selected_regions(pdev,tmp_1,(char const *)(& ixgbe_driver_name));
  
#line 8430 
  if (err != 0) {
    
#line 8431 
    dev_err((struct device const *)(& pdev->dev),"pci_request_selected_regions failed 0x%x\n",err);
    
#line 8433 
    goto err_pci_reg;
  }
  else ;
  
#line 8436 
  pci_enable_pcie_error_reporting(pdev);
  
#line 8438 
  pci_set_master(pdev);
  
#line 8439 
  pci_save_state(pdev);
  
#line 8441 
  if (ii->mac == (unsigned int)ixgbe_mac_82598EB) 
#line 8444 
                                                  indices = 32U; else ;
  
#line 8450 
  netdev = ldv_alloc_etherdev_mqs_91(143360,indices,indices);
  
#line 8451 
  if (netdev == (struct net_device *)0) {
    
#line 8452 
    err = -12;
    
#line 8453 
    goto err_alloc_etherdev;
  }
  else ;
  
#line 8456 
  netdev->dev.parent = & pdev->dev;
  
#line 8458 
  adapter = (struct ixgbe_adapter *)netdev_priv((struct net_device const *)netdev);
  
#line 8460 
  adapter->netdev = netdev;
  
#line 8461 
  adapter->pdev = pdev;
  
#line 8462 
  hw = & adapter->hw;
  
#line 8463 
  hw->back = (void *)adapter;
  
#line 8464 
  tmp_3 = netif_msg_init(debug,7);
  
#line 8464 
  adapter->msg_enable = (unsigned short)tmp_3;
  
#line 8467 
  if (pdev->resource[0].start != 0ULL || pdev->resource[0].end != pdev->resource[0].start) 
    
#line 8467 
    tmp_4 = (pdev->resource[0].end - pdev->resource[0].start) + 1ULL; else 
                                                                    
#line 8467 
                                                                    tmp_4 = 0ULL;
  
#line 8466 
  ;
  
#line 8466 
  tmp_5 = ioremap(pdev->resource[0].start,(unsigned long)tmp_4);
  
#line 8466 
  hw->hw_addr = (u8 *)tmp_5;
  
#line 8468 
  adapter->io_addr = hw->hw_addr;
  
#line 8469 
  if (hw->hw_addr == (u8 *)0U) {
    
#line 8470 
    err = -5;
    
#line 8471 
    goto err_ioremap;
  }
  else ;
  
#line 8474 
  netdev->netdev_ops = & ixgbe_netdev_ops;
  
#line 8475 
  ixgbe_set_ethtool_ops(netdev);
  
#line 8476 
  netdev->watchdog_timeo = 1250;
  
#line 8477 
  tmp_6 = pci_name((struct pci_dev const *)pdev);
  
#line 8477 
  ;
  
#line 8477 
  strlcpy((char *)(& netdev->name),tmp_6,16UL);
  
#line 8480 
  memcpy((void *)(& hw->mac.ops),(void const *)ii->mac_ops,472UL);
  
#line 8481 
  hw->mac.type = ii->mac;
  
#line 8482 
  hw->mvals = ii->mvals;
  
#line 8485 
  memcpy((void *)(& hw->eeprom.ops),(void const *)ii->eeprom_ops,64UL);
  
#line 8486 
  eec = ixgbe_read_reg(hw,*(hw->mvals));
  
#line 8487 
  tmp_7 = ixgbe_removed((void *)hw->hw_addr);
  
#line 8487 
  if ((int)tmp_7 != 0) {
    
#line 8488 
    err = -5;
    
#line 8489 
    goto err_ioremap;
  }
  else ;
  
#line 8492 
  if ((eec & 256U) == 0U) 
#line 8493 
                          hw->eeprom.ops.read = & ixgbe_read_eeprom_bit_bang_generic; else ;
  
#line 8496 
  memcpy((void *)(& hw->phy.ops),(void const *)ii->phy_ops,184UL);
  
#line 8497 
  hw->phy.sfp_type = ixgbe_sfp_type_unknown;
  
#line 8499 
  hw->phy.mdio.prtad = -1;
  
#line 8500 
  hw->phy.mdio.mmds = 0U;
  
#line 8501 
  hw->phy.mdio.mode_support = 6U;
  
#line 8502 
  hw->phy.mdio.dev = netdev;
  
#line 8503 
  hw->phy.mdio.mdio_read = & ixgbe_mdio_read;
  
#line 8504 
  hw->phy.mdio.mdio_write = & ixgbe_mdio_write;
  
#line 8506 
  (*(ii->get_invariants))(hw);
  
#line 8509 
  err = ixgbe_sw_init(adapter);
  
#line 8510 
  if (err != 0) 
#line 8511 
                goto err_sw_init; else ;
  
#line 8514 
  switch ((unsigned int)adapter->hw.mac.type) {
    case (unsigned int)2: 
#line 8515 
    ;
    case (unsigned int)3: 
#line 8516 
    ;
    case (unsigned int)4: 
#line 8517 
    ;
    case (unsigned int)5: 
#line 8518 
    ;
    
#line 8519 
    ixgbe_write_reg(& adapter->hw,22544U,4294967295U);
    
#line 8520 
    goto ldv_59755;
    default: 
#line 8521 
    ;
    
#line 8522 
    goto ldv_59755;
  }
  ldv_59755: 
#line 8529 
  ;
  
#line 8529 
  if ((adapter->flags & 32768U) != 0U) {
    
#line 8530 
    u32 esdp = ixgbe_read_reg(hw,32U);
    
#line 8531 
    if ((esdp & 2U) != 0U) {
      
#line 8532 
      if (((int)adapter->msg_enable & 2) != 0) 
#line 8532 
                                               netdev_crit((struct net_device const *)adapter->netdev,"Fan has stopped, replace the adapter\n"); else ;
    }
    else ;
  }
  else ;
  
#line 8535 
  if (allow_unsupported_sfp != 0U) 
#line 8536 
                                   hw->allow_unsupported_sfp = (_Bool)(allow_unsupported_sfp != 0U); else ;
  
#line 8539 
  hw->phy.reset_if_overtemp = (_Bool)1;
  
#line 8540 
  err = (*(hw->mac.ops.reset_hw))(hw);
  
#line 8541 
  hw->phy.reset_if_overtemp = (_Bool)0;
  
#line 8542 
  if (err == -20 && hw->mac.type == (unsigned int)ixgbe_mac_82598EB) 
    
#line 8544 
    err = 0;
  else 
    
#line 8545 
    if (err == -19) {
      
#line 8546 
      dev_err((struct device const *)(& (adapter->pdev)->dev),"failed to load because an unsupported SFP+ or QSFP module type was detected.\n");
      
#line 8547 
      dev_err((struct device const *)(& (adapter->pdev)->dev),"Reload the driver after installing a supported module.\n");
      
#line 8548 
      goto err_sw_init;
    }
    else 
      
#line 8549 
      if (err != 0) {
        
#line 8550 
        dev_err((struct device const *)(& (adapter->pdev)->dev),"HW Init failed: %d\n",err);
        
#line 8551 
        goto err_sw_init;
      }
      else ;
  
#line 8556 
  if (adapter->hw.mac.type == (unsigned int)ixgbe_mac_82598EB) 
#line 8557 
                                                               goto skip_sriov; else ;
  
#line 8559 
  ixgbe_init_mbx_params_pf(hw);
  
#line 8560 
  memcpy((void *)(& hw->mbx.ops),(void const *)ii->mbx_ops,64UL);
  
#line 8561 
  pci_sriov_set_totalvfs(pdev,(unsigned short)63);
  
#line 8562 
  ixgbe_enable_sriov(adapter);
  skip_sriov: 
#line 8563 
  ;
  
#line 8566 
  netdev->features = 25770918291ULL;
  
#line 8576 
  netdev->hw_features = netdev->features | 4398046511104ULL;
  
#line 8578 
  switch ((unsigned int)adapter->hw.mac.type) {
    case (unsigned int)2: 
#line 8579 
    ;
    case (unsigned int)3: 
#line 8580 
    ;
    case (unsigned int)4: 
#line 8581 
    ;
    case (unsigned int)5: 
#line 8582 
    ;
    
#line 8583 
    netdev->features |= 1073741824ULL;
    
#line 8584 
    netdev->hw_features |= 5368709120ULL;
    
#line 8586 
    goto ldv_59763;
    default: 
#line 8587 
    ;
    
#line 8588 
    goto ldv_59763;
  }
  ldv_59763: 
#line 8591 
  ;
  
#line 8591 
  netdev->hw_features |= 274877906944ULL;
  
#line 8592 
  netdev->features |= 512ULL;
  
#line 8594 
  netdev->vlan_features |= 65536ULL;
  
#line 8595 
  netdev->vlan_features |= 1048576ULL;
  
#line 8596 
  netdev->vlan_features |= 2ULL;
  
#line 8597 
  netdev->vlan_features |= 16ULL;
  
#line 8598 
  netdev->vlan_features |= 1ULL;
  
#line 8600 
  netdev->priv_flags |= 131072U;
  
#line 8601 
  netdev->priv_flags |= 524288U;
  
#line 8603 
  switch ((unsigned int)adapter->hw.mac.type) {
    case (unsigned int)4: 
#line 8604 
    ;
    case (unsigned int)5: 
#line 8605 
    ;
    
#line 8606 
    netdev->hw_enc_features |= 17179869184ULL;
    
#line 8607 
    goto ldv_59767;
    default: 
#line 8608 
    ;
    
#line 8609 
    goto ldv_59767;
  }
  ldv_59767: 
#line 8613 
  ;
  
#line 8613 
  netdev->dcbnl_ops = & dcbnl_ops;
  
#line 8617 
  if ((adapter->flags & 1048576U) != 0U) {
    unsigned int fcoe_l;
    int tmp_11;
    
#line 8620 
    if (hw->mac.ops.get_device_caps != (s32 (*)(struct ixgbe_hw *, u16 *))0) {
      
#line 8621 
      (*(hw->mac.ops.get_device_caps))(hw,& device_caps);
      
#line 8622 
      if (((int)device_caps & 2) != 0) 
#line 8623 
                                       adapter->flags &= 4293918719U; else ;
    }
    else ;
    {
      unsigned int tmp_9;
      int tmp_10;
      
#line 8627 
      int __min1 = 8;
      
#line 8627 
      tmp_9 = cpumask_weight(cpu_online_mask);
      
#line 8627 
      int __min2 = (int)tmp_9;
      
#line 8627 
      if (__min1 < __min2) 
#line 8627 
                           tmp_10 = __min1; else 
#line 8627 
                                                 tmp_10 = __min2;
      
#line 8627 
      tmp_11 = tmp_10;
    }
    
#line 8627 
    fcoe_l = (unsigned int)tmp_11;
    
#line 8628 
    adapter->ring_feature[4].limit = (unsigned short)fcoe_l;
    
#line 8630 
    netdev->features |= 538968064ULL;
    
#line 8633 
    netdev->vlan_features |= 2686451712ULL;
  }
  else ;
  
#line 8638 
  if (pci_using_dac != 0) {
    
#line 8639 
    netdev->features |= 32ULL;
    
#line 8640 
    netdev->vlan_features |= 32ULL;
  }
  else ;
  
#line 8643 
  if ((adapter->flags2 & 1U) != 0U) 
#line 8644 
                                    netdev->hw_features |= 32768ULL; else ;
  
#line 8645 
  if ((adapter->flags2 & 2U) != 0U) 
#line 8646 
                                    netdev->features |= 32768ULL; else ;
  
#line 8649 
  tmp_12 = (*(hw->eeprom.ops.validate_checksum))(hw,(u16 *)0U);
  
#line 8649 
  if (tmp_12 < 0) {
    
#line 8650 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"The EEPROM Checksum Is Not Valid\n");
    
#line 8651 
    err = -5;
    
#line 8652 
    goto err_sw_init;
  }
  else ;
  
#line 8655 
  ixgbe_get_platform_mac_addr(adapter);
  
#line 8657 
  memcpy((void *)netdev->dev_addr,(void const *)(& hw->mac.perm_addr),(unsigned long)netdev->addr_len);
  
#line 8659 
  tmp_13 = is_valid_ether_addr((u8 const *)netdev->dev_addr);
  
#line 8659 
  if (tmp_13) 
#line 8659 
              tmp_14 = 0; else 
#line 8659 
                               tmp_14 = 1;
  
#line 8659 
  if (tmp_14) {
    
#line 8660 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"invalid MAC address\n");
    
#line 8661 
    err = -5;
    
#line 8662 
    goto err_sw_init;
  }
  else ;
  
#line 8665 
  ixgbe_mac_set_default_filter(adapter,(u8 *)(& hw->mac.perm_addr));
  {
    struct lock_class_key __key;
    
#line 8667 
    init_timer_key(& adapter->service_timer,0U,"((&adapter->service_timer))",& __key);
  }
  
#line 8667 
  adapter->service_timer.function = & ixgbe_service_timer;
  
#line 8667 
  adapter->service_timer.data = (unsigned long)adapter;
  
#line 8670 
  tmp_15 = ixgbe_removed((void *)hw->hw_addr);
  
#line 8670 
  if ((int)tmp_15 != 0) {
    
#line 8671 
    err = -5;
    
#line 8672 
    goto err_sw_init;
  }
  else ;
  {
    struct lock_class_key __key_0;
    
#line 8674 
    __init_work(& adapter->service_task,0);
    
#line 8674 
    atomic_long_t __constr_expr_37 = {.counter = WORK_STRUCT_NO_POOL};
    
#line 8674 
    adapter->service_task.data = __constr_expr_37;
    
#line 8674 
    lockdep_init_map(& adapter->service_task.lockdep_map,"(&adapter->service_task)",& __key_0,0);
    
#line 8674 
    INIT_LIST_HEAD(& adapter->service_task.entry);
    
#line 8674 
    adapter->service_task.func = & ixgbe_service_task;
  }
  
#line 8675 
  set_bit(6L,(unsigned long volatile *)(& adapter->state));
  
#line 8676 
  set_bit(5L,(unsigned long volatile *)(& adapter->state));
  
#line 8678 
  err = ixgbe_init_interrupt_scheme(adapter);
  
#line 8679 
  if (err != 0) 
#line 8680 
                goto err_sw_init; else ;
  
#line 8683 
  adapter->wol = 0U;
  
#line 8684 
  (*(hw->eeprom.ops.read))(hw,(unsigned short)44,& adapter->eeprom_cap);
  
#line 8685 
  tmp_16 = ixgbe_wol_supported(adapter,(unsigned short)((int)pdev->device),(unsigned short)((int)pdev->subsystem_device));
  
#line 8685 
  hw->wol_enabled = (_Bool)(tmp_16 != 0);
  
#line 8687 
  if ((int)hw->wol_enabled != 0) 
#line 8688 
                                 adapter->wol = 2U; else ;
  
#line 8690 
  device_set_wakeup_enable(& (adapter->pdev)->dev,(_Bool)(adapter->wol != 0U));
  
#line 8693 
  (*(hw->eeprom.ops.read))(hw,(unsigned short)46,& adapter->eeprom_verh);
  
#line 8694 
  (*(hw->eeprom.ops.read))(hw,(unsigned short)45,& adapter->eeprom_verl);
  
#line 8697 
  (*(hw->mac.ops.get_bus_info))(hw);
  
#line 8698 
  tmp_17 = ixgbe_pcie_from_parent(hw);
  
#line 8698 
  if ((int)tmp_17 != 0) 
#line 8699 
                        ixgbe_get_parent_bus_info(adapter); else ;
  
#line 8706 
  switch ((unsigned int)hw->mac.type) {
    int tmp_20;
    int tmp_21;
    case (unsigned int)1: 
#line 8707 
    ;
    {
      int tmp_18;
      int tmp_19;
      
#line 8708 
      tmp_18 = ixgbe_enumerate_functions(adapter);
      
#line 8708 
      int _min1 = tmp_18 * 10;
      
#line 8708 
      int _min2 = 16;
      
#line 8708 
      if (_min1 < _min2) 
#line 8708 
                         tmp_19 = _min1; else 
#line 8708 
                                              tmp_19 = _min2;
      
#line 8708 
      tmp_20 = tmp_19;
    }
    
#line 8708 
    expected_gts = tmp_20;
    
#line 8709 
    goto ldv_59780;
    default: 
#line 8710 
    ;
    
#line 8711 
    tmp_21 = ixgbe_enumerate_functions(adapter);
    
#line 8711 
    expected_gts = tmp_21 * 10;
    
#line 8712 
    goto ldv_59780;
  }
  ldv_59780: 
#line 8716 
  ;
  
#line 8716 
  if (expected_gts > 0) 
#line 8717 
                        ixgbe_check_minimum_link(adapter,expected_gts); else ;
  
#line 8719 
  err = ixgbe_read_pba_string_generic(hw,(u8 *)(& part_str),11U);
  
#line 8720 
  if (err != 0) 
#line 8721 
                strlcpy((char *)(& part_str),"Unknown",11UL); else ;
  
#line 8722 
  tmp_22 = ixgbe_is_sfp(hw);
  
#line 8722 
  if ((int)tmp_22 != 0) 
    
#line 8722 
    if (hw->phy.sfp_type != (unsigned int)ixgbe_sfp_type_not_present) 
      
#line 8723 
      _dev_info((struct device const *)(& (adapter->pdev)->dev),"MAC: %d, PHY: %d, SFP+: %d, PBA No: %s\n",(unsigned int)hw->mac.type,(unsigned int)hw->phy.type,(unsigned int)hw->phy.sfp_type,(u8 *)(& part_str)); else 
                                                                    
#line 8727 
                                                                    _dev_info((struct device const *)(& (adapter->pdev)->dev),"MAC: %d, PHY: %d, PBA No: %s\n",(unsigned int)hw->mac.type,(unsigned int)hw->phy.type,(u8 *)(& part_str));
  else 
#line 8727 
       _dev_info((struct device const *)(& (adapter->pdev)->dev),"MAC: %d, PHY: %d, PBA No: %s\n",(unsigned int)hw->mac.type,(unsigned int)hw->phy.type,(u8 *)(& part_str));
  
#line 8730 
  _dev_info((struct device const *)(& (adapter->pdev)->dev),"%pM\n",netdev->dev_addr);
  
#line 8733 
  err = (*(hw->mac.ops.start_hw))(hw);
  
#line 8734 
  if (err == -24) 
#line 8736 
                  dev_warn((struct device const *)(& (adapter->pdev)->dev),"This device is a pre-production adapter/LOM. "); else ;
  
#line 8743 
  strcpy((char *)(& netdev->name),"eth%d");
  
#line 8744 
  err = ldv_register_netdev_92(netdev);
  
#line 8745 
  if (err != 0) 
#line 8746 
                goto err_register; else ;
  
#line 8748 
  pci_set_drvdata(pdev,(void *)adapter);
  
#line 8751 
  if (hw->mac.ops.disable_tx_laser != (void (*)(struct ixgbe_hw *))0) 
    
#line 8752 
    (*(hw->mac.ops.disable_tx_laser))(hw); else ;
  
#line 8755 
  netif_carrier_off(netdev);
  
#line 8758 
  tmp_23 = dca_add_requester(& pdev->dev);
  
#line 8758 
  if (tmp_23 == 0) {
    
#line 8759 
    adapter->flags |= 256U;
    
#line 8760 
    ixgbe_setup_dca(adapter);
  }
  else ;
  
#line 8763 
  if ((adapter->flags & 8388608U) != 0U) {
    
#line 8764 
    if (((int)adapter->msg_enable & 2) != 0) 
#line 8764 
                                             netdev_info((struct net_device const *)adapter->netdev,"IOV is enabled with %d VFs\n",adapter->num_vfs); else ;
    
#line 8765 
    i = 0;
    
#line 8765 
    goto ldv_59784;
    ldv_59783: 
#line 8766 
    ;
    
#line 8766 
    ixgbe_vf_configuration(pdev,(unsigned int)(i | 268435456));
    
#line 8765 
    i += 1;
    ldv_59784: 
#line 8766 
    ;
    
#line 8765 
    if (adapter->num_vfs > (unsigned int)i) 
#line 8767 
                                            goto ldv_59783; else 
#line 8770 
                                                                 goto ldv_59785;
    ldv_59785: 
#line 8771 
    ;
  }
  else ;
  
#line 8772 
  if (hw->mac.ops.set_fw_drv_ver != (s32 (*)(struct ixgbe_hw *, u8 , u8 , u8 , u8 ))0) 
    
#line 8773 
    (*(hw->mac.ops.set_fw_drv_ver))(hw,(unsigned char)255,(unsigned char)255,(unsigned char)255,(unsigned char)255); else ;
  
#line 8777 
  ixgbe_add_sanmac_netdev(netdev);
  
#line 8779 
  _dev_info((struct device const *)(& (adapter->pdev)->dev),"%s\n",(char *)(& ixgbe_default_device_descr));
  
#line 8782 
  tmp_24 = ixgbe_sysfs_init(adapter);
  
#line 8782 
  if (tmp_24 != 0) {
    
#line 8783 
    if (((int)adapter->msg_enable & 2) != 0) 
#line 8783 
                                             netdev_err((struct net_device const *)adapter->netdev,"failed to allocate sysfs resources\n"); else ;
  }
  else ;
  
#line 8786 
  ixgbe_dbg_adapter_init(adapter);
  
#line 8789 
  tmp_25 = ixgbe_mng_enabled(hw);
  
#line 8789 
  if ((int)tmp_25 != 0) {
    bool tmp_26;
    
#line 8789 
    tmp_26 = ixgbe_is_sfp(hw);
    
#line 8789 
    if ((int)tmp_26 != 0) {
      
#line 8789 
      if (hw->mac.ops.setup_link != (s32 (*)(struct ixgbe_hw *, ixgbe_link_speed , bool ))0) 
        
#line 8790 
        (*(hw->mac.ops.setup_link))(hw,160U,(_Bool)1); else ;
    }
    else ;
  }
  else ;
  
#line 8794 
  __retres = 0;
  
#line 8794 
  goto return_label;
  err_register: 
#line 8796 
  ;
  
#line 8797 
  ixgbe_release_hw_control(adapter);
  
#line 8798 
  ixgbe_clear_interrupt_scheme(adapter);
  err_sw_init: 
#line 8799 
  ;
  
#line 8800 
  ixgbe_disable_sriov(adapter);
  
#line 8801 
  adapter->flags2 &= 4294967279U;
  
#line 8802 
  iounmap((void volatile *)adapter->io_addr);
  
#line 8803 
  kfree((void const *)adapter->mac_table);
  err_ioremap: 
#line 8804 
  ;
  
#line 8805 
  tmp_27 = test_and_set_bit(3L,(unsigned long volatile *)(& adapter->state));
  
#line 8805 
  disable_dev = (_Bool)(tmp_27 == 0);
  
#line 8806 
  ldv_free_netdev_93(netdev);
  err_alloc_etherdev: 
#line 8807 
  ;
  
#line 8808 
  tmp_28 = pci_select_bars(pdev,512UL);
  
#line 8808 
  ;
  
#line 8808 
  pci_release_selected_regions(pdev,tmp_28);
  err_pci_reg: 
#line 8810 
  ;
  err_dma: 
#line 8811 
  ;
  
#line 8812 
  if (adapter == (struct ixgbe_adapter *)0 || (int)disable_dev != 0) 
    
#line 8813 
    pci_disable_device(pdev); else ;
  
#line 8814 
  __retres = err;
  return_label: 
#line 8814 
                return __retres;
}


#line 8826  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_remove(struct pci_dev *pdev)
{
  struct net_device *netdev;
  bool disable_dev;
  int tmp_0;
  int tmp_1;
  
#line 8828 
  struct ixgbe_adapter *adapter = pci_get_drvdata(pdev);
  
#line 8833 
  if (adapter == (struct ixgbe_adapter *)0) 
#line 8834 
                                            goto return_label; else ;
  
#line 8836 
  netdev = adapter->netdev;
  
#line 8837 
  ixgbe_dbg_adapter_exit(adapter);
  
#line 8839 
  set_bit(4L,(unsigned long volatile *)(& adapter->state));
  
#line 8840 
  cancel_work_sync(& adapter->service_task);
  
#line 8844 
  if ((adapter->flags & 256U) != 0U) {
    
#line 8845 
    adapter->flags &= 4294967039U;
    
#line 8846 
    dca_remove_requester(& pdev->dev);
    
#line 8847 
    ixgbe_write_reg(& adapter->hw,69748U,1U);
  }
  else ;
  
#line 8852 
  ixgbe_sysfs_exit(adapter);
  
#line 8856 
  ixgbe_del_sanmac_netdev(netdev);
  
#line 8858 
  if ((unsigned int)netdev->reg_state == 1U) 
#line 8859 
                                             ldv_unregister_netdev_94(netdev); else ;
  
#line 8866 
  if (max_vfs != 0U) 
#line 8867 
                     ixgbe_disable_sriov(adapter); else ;
  
#line 8869 
  ixgbe_clear_interrupt_scheme(adapter);
  
#line 8871 
  ixgbe_release_hw_control(adapter);
  
#line 8874 
  kfree((void const *)adapter->ixgbe_ieee_pfc);
  
#line 8875 
  kfree((void const *)adapter->ixgbe_ieee_ets);
  
#line 8878 
  iounmap((void volatile *)adapter->io_addr);
  
#line 8879 
  tmp_0 = pci_select_bars(pdev,512UL);
  
#line 8879 
  ;
  
#line 8879 
  pci_release_selected_regions(pdev,tmp_0);
  
#line 8882 
  _dev_info((struct device const *)(& (adapter->pdev)->dev),"complete\n");
  
#line 8884 
  kfree((void const *)adapter->mac_table);
  
#line 8885 
  tmp_1 = test_and_set_bit(3L,(unsigned long volatile *)(& adapter->state));
  
#line 8885 
  disable_dev = (_Bool)(tmp_1 == 0);
  
#line 8886 
  ldv_free_netdev_95(netdev);
  
#line 8888 
  pci_disable_pcie_error_reporting(pdev);
  
#line 8890 
  if ((int)disable_dev != 0) 
#line 8891 
                             pci_disable_device(pdev); else ;
  return_label: 
#line 8892 
                return;
}


#line 8902  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static pci_ers_result_t ixgbe_io_error_detected(struct pci_dev *pdev, pci_channel_state_t state)
{
  pci_ers_result_t __retres;
  struct pci_dev *bdev;
  struct pci_dev *vfdev;
  u32 dw0;
  u32 dw1;
  u32 dw2;
  u32 dw3;
  int vf;
  int pos;
  u16 req_id;
  u16 pf_func;
  bool tmp_1;
  int tmp_2;
  bool tmp_3;
  int tmp_4;
  
#line 8905 
  struct ixgbe_adapter *adapter = pci_get_drvdata(pdev);
  
#line 8906 
  struct net_device *netdev = adapter->netdev;
  
#line 8909 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 8915 
  if (adapter->hw.mac.type == (unsigned int)ixgbe_mac_82598EB || adapter->num_vfs == 0U) 
    
#line 8917 
    goto skip_bad_vf_detection; else ;
  
#line 8919 
  bdev = (pdev->bus)->self;
  
#line 8920 
  goto ldv_59811;
  ldv_59810: 
#line 8921 
  ;
  
#line 8921 
  bdev = (bdev->bus)->self;
  ldv_59811: 
#line 8922 
  ;
  
#line 8920 
  if (bdev != (struct pci_dev *)0) {
    int tmp_0;
    
#line 8920 
    tmp_0 = pci_pcie_type((struct pci_dev const *)bdev);
    
#line 8920 
    if (tmp_0 != 4) 
#line 8922 
                    goto ldv_59810; else 
#line 8925 
                                         goto ldv_59812;
  }
  else 
#line 8925 
       goto ldv_59812;
  ldv_59812: 
#line 8926 
  ;
  
#line 8923 
  if (bdev == (struct pci_dev *)0) 
#line 8924 
                                   goto skip_bad_vf_detection; else ;
  
#line 8926 
  pos = pci_find_ext_capability(bdev,1);
  
#line 8927 
  if (pos == 0) 
#line 8928 
                goto skip_bad_vf_detection; else ;
  
#line 8930 
  dw0 = ixgbe_read_pci_cfg_dword(hw,(unsigned int)(pos + 28));
  
#line 8931 
  dw1 = ixgbe_read_pci_cfg_dword(hw,(unsigned int)(pos + 32));
  
#line 8932 
  dw2 = ixgbe_read_pci_cfg_dword(hw,(unsigned int)(pos + 36));
  
#line 8933 
  dw3 = ixgbe_read_pci_cfg_dword(hw,(unsigned int)(pos + 40));
  
#line 8934 
  tmp_1 = ixgbe_removed((void *)hw->hw_addr);
  
#line 8934 
  if ((int)tmp_1 != 0) 
#line 8935 
                       goto skip_bad_vf_detection; else ;
  
#line 8937 
  req_id = (unsigned short)(dw1 >> 16);
  
#line 8939 
  if (((int)req_id & 128) == 0) 
#line 8940 
                                goto skip_bad_vf_detection; else ;
  
#line 8942 
  pf_func = (unsigned short)((unsigned int)req_id & 1U);
  
#line 8943 
  if ((((unsigned int)pf_func ^ pdev->devfn) & 1U) == 0U) {
    unsigned int device_id;
    
#line 8946 
    vf = ((int)req_id >> 1) & 63;
    
#line 8947 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"VF %d has caused a PCIe error\n",vf);
    
#line 8948 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"TLP: dw0: %8.8x\tdw1: %8.8x\tdw2: ",dw0,dw1,dw2,dw3);
    
#line 8951 
    switch ((unsigned int)adapter->hw.mac.type) {
      case (unsigned int)2: 
#line 8952 
      ;
      
#line 8953 
      device_id = 4333U;
      
#line 8954 
      goto ldv_59815;
      case (unsigned int)3: 
#line 8955 
      ;
      
#line 8956 
      device_id = 5397U;
      
#line 8957 
      goto ldv_59815;
      case (unsigned int)4: 
#line 8958 
      ;
      
#line 8959 
      device_id = 5477U;
      
#line 8960 
      goto ldv_59815;
      case (unsigned int)5: 
#line 8961 
      ;
      
#line 8962 
      device_id = 5544U;
      
#line 8963 
      goto ldv_59815;
      default: 
#line 8964 
      ;
      
#line 8965 
      device_id = 0U;
      
#line 8966 
      goto ldv_59815;
    }
    ldv_59815: 
#line 8970 
    ;
    
#line 8970 
    vfdev = pci_get_device(32902U,device_id,(struct pci_dev *)0);
    
#line 8971 
    goto ldv_59822;
    ldv_59821: 
#line 8972 
    ;
    
#line 8972 
    if (vfdev->devfn == ((unsigned int)req_id & 255U)) 
#line 8973 
                                                       goto ldv_59820; else ;
    
#line 8974 
    vfdev = pci_get_device(32902U,device_id,vfdev);
    ldv_59822: 
#line 8975 
    ;
    
#line 8971 
    if (vfdev != (struct pci_dev *)0) 
#line 8973 
                                      goto ldv_59821; else 
#line 8976 
                                                           goto ldv_59820;
    ldv_59820: 
#line 8977 
    ;
    
#line 8982 
    if (vfdev != (struct pci_dev *)0) {
      
#line 8983 
      ixgbe_issue_vf_flr(adapter,vfdev);
      
#line 8985 
      pci_dev_put(vfdev);
    }
    else ;
    
#line 8988 
    pci_cleanup_aer_uncorrect_error_status(pdev);
  }
  else ;
  
#line 8997 
  adapter->vferr_refcount += 1U;
  
#line 8999 
  __retres = 5U;
  
#line 8999 
  goto return_label;
  skip_bad_vf_detection: 
#line 9001 
  ;
  
#line 9003 
  tmp_2 = constant_test_bit(6L,(unsigned long const volatile *)(& adapter->state));
  
#line 9003 
  if (tmp_2 == 0) {
    
#line 9004 
    __retres = 4U;
    
#line 9004 
    goto return_label;
  }
  else ;
  
#line 9006 
  rtnl_lock();
  
#line 9007 
  netif_device_detach(netdev);
  
#line 9009 
  if (state == 3U) {
    
#line 9010 
    rtnl_unlock();
    
#line 9011 
    __retres = 4U;
    
#line 9011 
    goto return_label;
  }
  else ;
  
#line 9014 
  tmp_3 = netif_running((struct net_device const *)netdev);
  
#line 9014 
  if ((int)tmp_3 != 0) 
#line 9015 
                       ixgbe_down(adapter); else ;
  
#line 9017 
  tmp_4 = test_and_set_bit(3L,(unsigned long volatile *)(& adapter->state));
  
#line 9017 
  if (tmp_4 == 0) 
#line 9018 
                  pci_disable_device(pdev); else ;
  
#line 9019 
  rtnl_unlock();
  
#line 9022 
  __retres = 3U;
  return_label: 
#line 9022 
                return __retres;
}


#line 9031  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static pci_ers_result_t ixgbe_io_slot_reset(struct pci_dev *pdev)
{
  pci_ers_result_t result;
  int err;
  int tmp_0;
  
#line 9033 
  struct ixgbe_adapter *adapter = pci_get_drvdata(pdev);
  
#line 9037 
  tmp_0 = pci_enable_device_mem(pdev);
  
#line 9037 
  if (tmp_0 != 0) {
    
#line 9038 
    if (((int)adapter->msg_enable & 2) != 0) 
#line 9038 
                                             netdev_err((struct net_device const *)adapter->netdev,"Cannot re-enable PCI device after reset.\n"); else ;
    
#line 9039 
    result = 4U;
  }
  else {
    
#line 9043 
    ldv_inline_asm();
    
#line 9042 
    set_bit(3L,(unsigned long volatile *)(& adapter->state));
    
#line 9043 
    adapter->hw.hw_addr = adapter->io_addr;
    
#line 9044 
    pci_set_master(pdev);
    
#line 9045 
    pci_restore_state(pdev);
    
#line 9046 
    pci_save_state(pdev);
    
#line 9048 
    pci_wake_from_d3(pdev,(_Bool)0);
    
#line 9050 
    ixgbe_reset(adapter);
    
#line 9051 
    ixgbe_write_reg(& adapter->hw,22544U,4294967295U);
    
#line 9052 
    result = 5U;
  }
  
#line 9055 
  err = pci_cleanup_aer_uncorrect_error_status(pdev);
  
#line 9056 
  if (err != 0) 
#line 9057 
                dev_err((struct device const *)(& (adapter->pdev)->dev),"pci_cleanup_aer_uncorrect_error_status ",err); else ;
  
#line 9062 
  return result;
}


#line 9072  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_io_resume(struct pci_dev *pdev)
{
  bool tmp_0;
  
#line 9074 
  struct ixgbe_adapter *adapter = pci_get_drvdata(pdev);
  
#line 9075 
  struct net_device *netdev = adapter->netdev;
  
#line 9078 
  if (adapter->vferr_refcount != 0U) {
    
#line 9079 
    if (((int)adapter->msg_enable & 1) != 0) 
#line 9079 
                                             netdev_info((struct net_device const *)adapter->netdev,"Resuming after VF err\n"); else ;
    
#line 9080 
    adapter->vferr_refcount -= 1U;
    
#line 9081 
    goto return_label;
  }
  else ;
  
#line 9085 
  tmp_0 = netif_running((struct net_device const *)netdev);
  
#line 9085 
  if ((int)tmp_0 != 0) 
#line 9086 
                       ixgbe_up(adapter); else ;
  
#line 9088 
  netif_device_attach(netdev);
  return_label: 
#line 9089 
                return;
}


#line 9091  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static struct pci_error_handlers const ixgbe_err_handler = {.error_detected = (pci_ers_result_t (*)(struct pci_dev *, enum pci_channel_state ))(& ixgbe_io_error_detected), .mmio_enabled = (pci_ers_result_t (*)(struct pci_dev *))0, .link_reset = (pci_ers_result_t (*)(struct pci_dev *))0, .slot_reset = & ixgbe_io_slot_reset, .reset_notify = (void (*)(struct pci_dev *, bool ))0, .resume = & ixgbe_io_resume};

#line 9097  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static struct pci_driver ixgbe_driver = {.node = {.next = (struct list_head *)0, .prev = (struct list_head *)0}, .name = (char const *)(& ixgbe_driver_name), .id_table = (struct pci_device_id const *)(& ixgbe_pci_tbl), .probe = & ixgbe_probe, .remove = & ixgbe_remove, .suspend = & ixgbe_suspend, .suspend_late = (int (*)(struct pci_dev *, pm_message_t ))0, .resume_early = (int (*)(struct pci_dev *))0, .resume = & ixgbe_resume, .shutdown = & ixgbe_shutdown, .sriov_configure = & ixgbe_pci_sriov_configure, .err_handler = & ixgbe_err_handler, .driver = {.name = (char const *)0, .bus = (struct bus_type *)0, .owner = (struct module *)0, .mod_name = (char const *)0, .suppress_bind_attrs = (_Bool)0, .probe_type = 0, .of_match_table = (struct of_device_id const *)0, .acpi_match_table = (struct acpi_device_id const *)0, .probe = (int (*)(struct device *))0, .remove = (int (*)(struct device *))0, .shutdown = (void (*)(struct device *))0, .suspend = (int (*)(struct device *, pm_message_t ))0, .resume = (int (*)(struct device *))0, .groups = (struct attribute_group const **)0, .pm = (struct dev_pm_ops const *)0, .p = (struct driver_private *)0}, .dynids = {.lock = {.__anonCompField_spinlock_18 = {.rlock = {.raw_lock = {.val = {.counter = 0}}, .magic = 0U, .owner_cpu = 0U, .owner = (void *)0, .dep_map = {.key = (struct lock_class_key *)0, .class_cache = {(struct lock_class *)0, (struct lock_class *)0}, .name = (char const *)0, .cpu = 0, .ip = 0UL}}}}, .list = {.next = (struct list_head *)0, .prev = (struct list_head *)0}}};

#line 9117  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static int ixgbe_init_module(void)
{
  int __retres;
  int ret;
  
#line 9120 
  printk("\001",(char const *)(& ixgbe_driver_string),(char const *)(& ixgbe_driver_version));
  
#line 9121 
  printk("\001",(char const *)(& ixgbe_copyright));
  
#line 9123 
  ixgbe_dbg_init();
  
#line 9125 
  ret = ldv___pci_register_driver_96(& ixgbe_driver,& __this_module,"ixgbe");
  
#line 9126 
  if (ret != 0) {
    
#line 9127 
    ixgbe_dbg_exit();
    
#line 9128 
    __retres = ret;
    
#line 9128 
    goto return_label;
  }
  else ;
  
#line 9132 
  dca_register_notify(& dca_notifier);
  
#line 9135 
  __retres = 0;
  return_label: 
#line 9135 
                return __retres;
}


#line 9146  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static void ixgbe_exit_module(void)
{
  
#line 9149 
  dca_unregister_notify(& dca_notifier);
  
#line 9151 
  ldv_pci_unregister_driver_97(& ixgbe_driver);
  
#line 9153 
  ixgbe_dbg_exit();
  
#line 9154 
  return;
}


#line 9157  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c"
static int ixgbe_notify_dca(struct notifier_block *nb, unsigned long event, void *p)
{
  int ret_val;
  int tmp;
  
#line 9162 
  ret_val = driver_for_each_device(& ixgbe_driver.driver,(struct device *)0,(void *)(& event),& __ixgbe_notify_dca);
  
#line 9165 
  if (ret_val != 0) 
#line 9165 
                    tmp = 32770; else 
#line 9165 
                                      tmp = 0;
  
#line 9165 
  return tmp;
}


#line 56  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_main.c.aux"
struct pci_driver *ldv_emg_alias_ixgbe_driver_2 = & ixgbe_driver;

#line 57  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_main.c.aux"
int (*ldv_emg_alias_eth_validate_addr_32)(struct net_device *) = & eth_validate_addr;

#line 60 
void ldv_emg_unregister_netdev(struct net_device *arg0);


#line 61 
void ldv_emg_free_irq(unsigned int arg0, void *arg1);


#line 62 
void ldv_emg_pci_unregister_driver(struct pci_driver *arg0);


#line 63 
int ldv_emg___pci_register_driver(struct pci_driver *arg0, struct module *arg1, char *arg2);


#line 64 
int ldv_emg_mod_timer(struct timer_list *arg0, unsigned long arg1);


#line 65 
_Bool ldv_emg_schedule_work(struct work_struct *arg0);


#line 66 
int ldv_emg_del_timer_sync(struct timer_list *arg0);


#line 67 
void ldv_emg_free_netdev(struct net_device *arg0);


#line 68 
int ldv_emg_register_netdev(struct net_device *arg0);


#line 69 
struct net_device *ldv_emg_alloc_etherdev_mqs(int arg0, unsigned int arg1, unsigned int arg2);


#line 70 
int ldv_emg_request_irq(unsigned int arg0, enum irqreturn (*arg1)(int , void *), unsigned long arg2, char *arg3, void *arg4);


#line 74  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_main.c.aux"
int ldv_emg_wrapper_ixgbe_ndo_fdb_add_19(struct ndmsg *arg0, struct nlattr **arg1, struct net_device *arg2, unsigned char *arg3, unsigned short arg4, unsigned short arg5)
{
  int tmp;
  
#line 75 
  tmp = ixgbe_ndo_fdb_add(arg0,arg1,arg2,(unsigned char const *)arg3,(unsigned short)((int)arg4),(unsigned short)((int)arg5));
  
#line 75 
  return tmp;
}


#line 79  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_main.c.aux"
void ldv_emg_wrapper_ixgbe_shutdown_2(struct pci_dev *arg0)
{
  
#line 80 
  ixgbe_shutdown(arg0);
  
#line 81 
  return;
}


#line 84  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_main.c.aux"
int ldv_emg_wrapper_ixgbe_ndo_bridge_getlink_6(struct sk_buff *arg0, unsigned int arg1, unsigned int arg2, struct net_device *arg3, unsigned int arg4, int arg5)
{
  int tmp;
  
#line 85 
  tmp = ixgbe_ndo_bridge_getlink(arg0,arg1,arg2,arg3,arg4,arg5);
  
#line 85 
  return tmp;
}


#line 89  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_main.c.aux"
int ldv_emg_wrapper_ixgbe_change_mtu_7(struct net_device *arg0, int arg1)
{
  int tmp;
  
#line 90 
  tmp = ixgbe_change_mtu(arg0,arg1);
  
#line 90 
  return tmp;
}


#line 94  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_main.c.aux"
void ldv_emg_wrapper_ixgbe_del_vxlan_port_24(struct net_device *arg0, unsigned short arg1, unsigned short arg2)
{
  
#line 95 
  ixgbe_del_vxlan_port(arg0,(unsigned short)((int)arg1),(unsigned short)((int)arg2));
  
#line 96 
  return;
}


#line 99  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_main.c.aux"
int ldv_emg_wrapper_ixgbe_probe_3(struct pci_dev *arg0, struct pci_device_id *arg1)
{
  int tmp;
  
#line 100 
  tmp = ixgbe_probe(arg0,(struct pci_device_id const *)arg1);
  
#line 100 
  return tmp;
}


#line 104  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_main.c.aux"
enum irqreturn ldv_emg_wrapper_ixgbe_msix_clean_rings_2(int arg0, void *arg1)
{
  enum irqreturn tmp;
  
#line 105 
  tmp = ixgbe_msix_clean_rings(arg0,arg1);
  
#line 105 
  return tmp;
}


#line 109  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_main.c.aux"
enum irqreturn ldv_emg_wrapper_ixgbe_msix_other_2(int arg0, void *arg1)
{
  enum irqreturn tmp;
  
#line 110 
  tmp = ixgbe_msix_other(arg0,arg1);
  
#line 110 
  return tmp;
}


#line 114  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_main.c.aux"
int ldv_emg_wrapper_ixgbe_ndo_bridge_setlink_38(struct net_device *arg0, struct nlmsghdr *arg1, unsigned short arg2)
{
  int tmp;
  
#line 115 
  tmp = ixgbe_ndo_bridge_setlink(arg0,arg1,(unsigned short)((int)arg2));
  
#line 115 
  return tmp;
}


#line 119  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_main.c.aux"
void ldv_emg_wrapper_ixgbe_add_vxlan_port_37(struct net_device *arg0, unsigned short arg1, unsigned short arg2)
{
  
#line 120 
  ixgbe_add_vxlan_port(arg0,(unsigned short)((int)arg1),(unsigned short)((int)arg2));
  
#line 121 
  return;
}


#line 124  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_main.c.aux"
unsigned short ldv_emg_wrapper_ixgbe_select_queue_45(struct net_device *arg0, struct sk_buff *arg1, void *arg2, unsigned short (*arg3)(struct net_device *, struct sk_buff *))
{
  unsigned short tmp;
  
#line 125 
  tmp = ixgbe_select_queue(arg0,arg1,arg2,arg3);
  
#line 125 
  return tmp;
}


#line 129  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_main.c.aux"
int ldv_emg_wrapper_ixgbe_resume_6(struct pci_dev *arg0)
{
  int tmp;
  
#line 130 
  tmp = ixgbe_resume(arg0);
  
#line 130 
  return tmp;
}


#line 134  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_main.c.aux"
void ldv_emg_wrapper_ixgbe_tx_timeout_16(struct net_device *arg0)
{
  
#line 135 
  ixgbe_tx_timeout(arg0);
  
#line 136 
  return;
}


#line 139  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_main.c.aux"
int ldv_emg_wrapper_ixgbe_close_2(struct net_device *arg0)
{
  int tmp;
  
#line 140 
  tmp = ixgbe_close(arg0);
  
#line 140 
  return tmp;
}


#line 144  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_main.c.aux"
struct rtnl_link_stats64 *ldv_emg_wrapper_ixgbe_get_stats64_4(struct net_device *arg0, struct rtnl_link_stats64 *arg1)
{
  struct rtnl_link_stats64 *tmp;
  
#line 145 
  tmp = ixgbe_get_stats64(arg0,arg1);
  
#line 145 
  return tmp;
}


#line 149  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_main.c.aux"
int ldv_emg_wrapper_ixgbe_open_2(struct net_device *arg0)
{
  int tmp;
  
#line 150 
  tmp = ixgbe_open(arg0);
  
#line 150 
  return tmp;
}


#line 154  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_main.c.aux"
int ldv_emg_wrapper_ixgbe_suspend_4(struct pci_dev *arg0, struct pm_message arg1)
{
  int tmp;
  
#line 155 
  tmp = ixgbe_suspend(arg0,arg1);
  
#line 155 
  return tmp;
}


#line 159  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_main.c.aux"
void ldv_emg_ixgbe_exit_module(void)
{
  
#line 160 
  ixgbe_exit_module();
  
#line 161 
  return;
}


#line 163  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_main.c.aux"
int ldv_emg_wrapper_ixgbe_ioctl_18(struct net_device *arg0, struct ifreq *arg1, int arg2)
{
  int tmp;
  
#line 164 
  tmp = ixgbe_ioctl(arg0,arg1,arg2);
  
#line 164 
  return tmp;
}


#line 168  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_main.c.aux"
void ldv_emg_wrapper_ixgbe_netpoll_57(struct net_device *arg0)
{
  
#line 169 
  ixgbe_netpoll(arg0);
  
#line 170 
  return;
}


#line 173  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_main.c.aux"
void ldv_emg_wrapper_ixgbe_fwd_del_46(struct net_device *arg0, void *arg1)
{
  
#line 174 
  ixgbe_fwd_del(arg0,arg1);
  
#line 175 
  return;
}


#line 178  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_main.c.aux"
void *ldv_emg_wrapper_ixgbe_fwd_add_51(struct net_device *arg0, struct net_device *arg1)
{
  void *tmp;
  
#line 179 
  tmp = ixgbe_fwd_add(arg0,arg1);
  
#line 179 
  return tmp;
}


#line 183  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_main.c.aux"
int ldv_emg_wrapper_ixgbe_low_latency_recv_56(struct napi_struct *arg0)
{
  int tmp;
  
#line 184 
  tmp = ixgbe_low_latency_recv(arg0);
  
#line 184 
  return tmp;
}


#line 188  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_main.c.aux"
enum irqreturn ldv_emg_wrapper_ixgbe_intr_2(int arg0, void *arg1)
{
  enum irqreturn tmp;
  
#line 189 
  tmp = ixgbe_intr(arg0,arg1);
  
#line 189 
  return tmp;
}


#line 193  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_main.c.aux"
unsigned long long ldv_emg_wrapper_ixgbe_fix_features_50(struct net_device *arg0, unsigned long long arg1)
{
  unsigned long long tmp;
  
#line 194 
  tmp = ixgbe_fix_features(arg0,arg1);
  
#line 194 
  return tmp;
}


#line 198  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_main.c.aux"
enum netdev_tx ldv_emg_wrapper_ixgbe_xmit_frame_13(struct sk_buff *arg0, struct net_device *arg1)
{
  enum netdev_tx tmp;
  
#line 199 
  tmp = ixgbe_xmit_frame(arg0,arg1);
  
#line 199 
  return tmp;
}


#line 203  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_main.c.aux"
int ldv_emg_wrapper_ixgbe_vlan_rx_add_vid_43(struct net_device *arg0, unsigned short arg1, unsigned short arg2)
{
  int tmp;
  
#line 204 
  tmp = ixgbe_vlan_rx_add_vid(arg0,(unsigned short)((int)arg1),(unsigned short)((int)arg2));
  
#line 204 
  return tmp;
}


#line 208  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_main.c.aux"
int ldv_emg_wrapper_ixgbe_vlan_rx_kill_vid_48(struct net_device *arg0, unsigned short arg1, unsigned short arg2)
{
  int tmp;
  
#line 209 
  tmp = ixgbe_vlan_rx_kill_vid(arg0,(unsigned short)((int)arg1),(unsigned short)((int)arg2));
  
#line 209 
  return tmp;
}


#line 213  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_main.c.aux"
int ldv_emg_wrapper_ixgbe_set_mac_14(struct net_device *arg0, void *arg1)
{
  int tmp;
  
#line 214 
  tmp = ixgbe_set_mac(arg0,arg1);
  
#line 214 
  return tmp;
}


#line 218  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_main.c.aux"
int ldv_emg_ixgbe_init_module(void)
{
  int tmp;
  
#line 219 
  tmp = ixgbe_init_module();
  
#line 219 
  return tmp;
}


#line 222  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_main.c.aux"
int ldv_emg_wrapper_ixgbe_set_features_33(struct net_device *arg0, unsigned long long arg1)
{
  int tmp;
  
#line 223 
  tmp = ixgbe_set_features(arg0,arg1);
  
#line 223 
  return tmp;
}


#line 227  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_main.c.aux"
void ldv_emg_wrapper_ixgbe_remove_5(struct pci_dev *arg0)
{
  
#line 228 
  ixgbe_remove(arg0);
  
#line 229 
  return;
}


#line 233  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_main.c.aux"
static void *ERR_PTR(long error)
{
  void *tmp;
  
#line 236 
  tmp = ldv_err_ptr(error);
  
#line 236 
  return tmp;
}


#line 286  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_main.c.aux"
static void atomic_inc(atomic_t *v)
{
  
#line 289 
  ldv_atomic_inc(v);
  
#line 290 
  return;
}


#line 650  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_main.c.aux"
static void *kcalloc(size_t n, size_t size, gfp_t flags)
{
  void *tmp;
  
#line 653 
  tmp = ldv_kcalloc(n,size,flags);
  
#line 653 
  return tmp;
}


#line 657  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_main.c.aux"
static void *kzalloc(size_t size, gfp_t flags)
{
  void *tmp;
  
#line 660 
  tmp = ldv_kzalloc(size,flags);
  
#line 660 
  return tmp;
}


#line 770  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_main.c.aux"
static void ldv_spin_lock_60(spinlock_t *lock)
{
  
#line 774 
  ldv_spin_model_lock((char *)"_xmit_lock_of_netdev_queue");
  
#line 776 
  spin_lock(lock);
  
#line 777 
  return;
}


#line 813  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_main.c.aux"
static void ldv_spin_unlock_63(spinlock_t *lock)
{
  
#line 817 
  ldv_spin_model_unlock((char *)"_xmit_lock_of_netdev_queue");
  
#line 819 
  spin_unlock(lock);
  
#line 820 
  return;
}


#line 913  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_main.c.aux"
static bool ldv_schedule_work_73(struct work_struct *work)
{
  bool __retres;
  bool tmp;
  
#line 917 
  tmp = ldv_emg_schedule_work(work);
  
#line 917 
  __retres = tmp != 0;
  
#line 917 
  return __retres;
}


#line 921  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_main.c.aux"
static int ldv_request_irq_74(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev)
{
  int tmp;
  
#line 925 
  tmp = ldv_emg_request_irq(irq,handler,flags,(char *)name,dev);
  
#line 925 
  return tmp;
}


#line 929  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_main.c.aux"
static int ldv_request_irq_75(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev)
{
  int tmp;
  
#line 933 
  tmp = ldv_emg_request_irq(irq,handler,flags,(char *)name,dev);
  
#line 933 
  return tmp;
}


#line 937  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_main.c.aux"
static void ldv_free_irq_76(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  
#line 941 
  ldv_emg_free_irq(ldv_func_arg1,ldv_func_arg2);
  
#line 942 
  return;
}


#line 945  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_main.c.aux"
static int ldv_request_irq_77(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev)
{
  int tmp;
  
#line 949 
  tmp = ldv_emg_request_irq(irq,handler,flags,(char *)name,dev);
  
#line 949 
  return tmp;
}


#line 953  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_main.c.aux"
static int ldv_request_irq_78(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev)
{
  int tmp;
  
#line 957 
  tmp = ldv_emg_request_irq(irq,handler,flags,(char *)name,dev);
  
#line 957 
  return tmp;
}


#line 961  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_main.c.aux"
static void ldv_free_irq_79(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  
#line 965 
  ldv_emg_free_irq(ldv_func_arg1,ldv_func_arg2);
  
#line 966 
  return;
}


#line 969  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_main.c.aux"
static void ldv_free_irq_80(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  
#line 973 
  ldv_emg_free_irq(ldv_func_arg1,ldv_func_arg2);
  
#line 974 
  return;
}


#line 977  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_main.c.aux"
static void ldv_free_irq_81(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  
#line 981 
  ldv_emg_free_irq(ldv_func_arg1,ldv_func_arg2);
  
#line 982 
  return;
}


#line 985  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_main.c.aux"
static void ldv_spin_lock_82(spinlock_t *lock)
{
  
#line 989 
  ldv_spin_model_lock((char *)"fdir_perfect_lock_of_ixgbe_adapter");
  
#line 991 
  spin_lock(lock);
  
#line 992 
  return;
}


#line 995  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_main.c.aux"
static void ldv_spin_unlock_83(spinlock_t *lock)
{
  
#line 999 
  ldv_spin_model_unlock((char *)"fdir_perfect_lock_of_ixgbe_adapter");
  
#line 1001 
  spin_unlock(lock);
  
#line 1002 
  return;
}


#line 1005  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_main.c.aux"
static int ldv_mod_timer_84(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2)
{
  int tmp;
  
#line 1009 
  tmp = ldv_emg_mod_timer(ldv_func_arg1,ldv_func_arg2);
  
#line 1009 
  return tmp;
}


#line 1013  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_main.c.aux"
static void ldv_spin_lock_85(spinlock_t *lock)
{
  
#line 1017 
  ldv_spin_model_lock((char *)"fdir_perfect_lock_of_ixgbe_adapter");
  
#line 1019 
  spin_lock(lock);
  
#line 1020 
  return;
}


#line 1023  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_main.c.aux"
static void ldv_spin_unlock_86(spinlock_t *lock)
{
  
#line 1027 
  ldv_spin_model_unlock((char *)"fdir_perfect_lock_of_ixgbe_adapter");
  
#line 1029 
  spin_unlock(lock);
  
#line 1030 
  return;
}


#line 1033  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_main.c.aux"
static int ldv_del_timer_sync_87(struct timer_list *ldv_func_arg1)
{
  int tmp;
  
#line 1037 
  tmp = ldv_emg_del_timer_sync(ldv_func_arg1);
  
#line 1037 
  return tmp;
}


#line 1041  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_main.c.aux"
static void ldv_unregister_netdev_88(struct net_device *ldv_func_arg1)
{
  
#line 1045 
  ldv_emg_unregister_netdev(ldv_func_arg1);
  
#line 1046 
  return;
}


#line 1049  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_main.c.aux"
static int ldv_mod_timer_89(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2)
{
  int tmp;
  
#line 1053 
  tmp = ldv_emg_mod_timer(ldv_func_arg1,ldv_func_arg2);
  
#line 1053 
  return tmp;
}


#line 1057  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_main.c.aux"
static bool ldv_schedule_work_90(struct work_struct *work)
{
  bool __retres;
  bool tmp;
  
#line 1061 
  tmp = ldv_emg_schedule_work(work);
  
#line 1061 
  __retres = tmp != 0;
  
#line 1061 
  return __retres;
}


#line 1065  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_main.c.aux"
static struct net_device *ldv_alloc_etherdev_mqs_91(int ldv_func_arg1, unsigned int ldv_func_arg2, unsigned int ldv_func_arg3)
{
  struct net_device *tmp;
  
#line 1069 
  tmp = ldv_emg_alloc_etherdev_mqs(ldv_func_arg1,ldv_func_arg2,ldv_func_arg3);
  
#line 1069 
  return tmp;
}


#line 1073  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_main.c.aux"
static int ldv_register_netdev_92(struct net_device *ldv_func_arg1)
{
  int tmp;
  
#line 1077 
  tmp = ldv_emg_register_netdev(ldv_func_arg1);
  
#line 1077 
  return tmp;
}


#line 1081  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_main.c.aux"
static void ldv_free_netdev_93(struct net_device *ldv_func_arg1)
{
  
#line 1085 
  ldv_emg_free_netdev(ldv_func_arg1);
  
#line 1086 
  return;
}


#line 1089  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_main.c.aux"
static void ldv_unregister_netdev_94(struct net_device *ldv_func_arg1)
{
  
#line 1093 
  ldv_emg_unregister_netdev(ldv_func_arg1);
  
#line 1094 
  return;
}


#line 1097  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_main.c.aux"
static void ldv_free_netdev_95(struct net_device *ldv_func_arg1)
{
  
#line 1101 
  ldv_emg_free_netdev(ldv_func_arg1);
  
#line 1102 
  return;
}


#line 1105  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_main.c.aux"
static int ldv___pci_register_driver_96(struct pci_driver *ldv_func_arg1, struct module *ldv_func_arg2, char const *ldv_func_arg3)
{
  int tmp;
  
#line 1109 
  tmp = ldv_emg___pci_register_driver(ldv_func_arg1,ldv_func_arg2,(char *)ldv_func_arg3);
  
#line 1109 
  return tmp;
}


#line 1113  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_main.c.aux"
static void ldv_pci_unregister_driver_97(struct pci_driver *ldv_func_arg1)
{
  
#line 1117 
  ldv_emg_pci_unregister_driver(ldv_func_arg1);
  
#line 1118 
  return;
}


#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_dcb_82598.c"
s32 ixgbe_dcb_config_rx_arbiter_82598(struct ixgbe_hw *hw, u16 *refill, u16 *max, u8 *prio_type)
{
  s32 __retres;
  u32 tmp;
  
#line 46 
  u32 reg = 0U;
  
#line 47 
  u32 credit_refill = 0U;
  
#line 48 
  u32 credit_max = 0U;
  
#line 49 
  u8 i = (unsigned char)0U;
  
#line 51 
  tmp = ixgbe_read_reg(hw,20640U);
  
#line 51 
  reg = tmp | 2147483648U;
  
#line 52 
  ixgbe_write_reg(hw,20640U,reg);
  
#line 54 
  reg = ixgbe_read_reg(hw,15616U);
  
#line 56 
  reg &= 4294967231U;
  
#line 58 
  reg |= 2U;
  
#line 60 
  reg |= 4U;
  
#line 62 
  ixgbe_write_reg(hw,15616U,reg);
  
#line 65 
  i = (unsigned char)0U;
  
#line 65 
  goto ldv_54608;
  ldv_54607: 
#line 66 
  ;
  
#line 66 
  credit_refill = (unsigned int)*(refill + (int)i);
  
#line 67 
  credit_max = (unsigned int)*(max + (int)i);
  
#line 69 
  reg = (credit_max << 12) | credit_refill;
  
#line 71 
  if ((unsigned int)*(prio_type + (int)i) == 2U) 
#line 72 
                                                 reg |= 2147483648U; else ;
  
#line 74 
  ixgbe_write_reg(hw,(unsigned int)(((int)i + 3848) * 4),reg);
  
#line 65 
  i = (u8)((int)i + 1);
  ldv_54608: 
#line 66 
  ;
  
#line 65 
  if ((unsigned int)i <= 7U) 
#line 67 
                             goto ldv_54607; else 
#line 70 
                                                  goto ldv_54609;
  ldv_54609: 
#line 71 
  ;
  
#line 77 
  reg = ixgbe_read_reg(hw,12032U);
  
#line 78 
  reg = reg;
  
#line 79 
  reg |= 16U;
  
#line 80 
  reg |= 64U;
  
#line 81 
  ixgbe_write_reg(hw,12032U,reg);
  
#line 83 
  reg = ixgbe_read_reg(hw,12288U);
  
#line 85 
  reg &= 4294967293U;
  
#line 86 
  ixgbe_write_reg(hw,12288U,reg);
  
#line 88 
  __retres = 0;
  
#line 88 
  return __retres;
}


#line 98  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_dcb_82598.c"
s32 ixgbe_dcb_config_tx_desc_arbiter_82598(struct ixgbe_hw *hw, u16 *refill, u16 *max, u8 *bwg_id, u8 *prio_type)
{
  s32 __retres;
  u32 reg;
  u32 max_credits;
  u8 i;
  
#line 107 
  reg = ixgbe_read_reg(hw,32576U);
  
#line 110 
  reg &= 4294967231U;
  
#line 111 
  reg |= 524288U;
  
#line 114 
  reg |= 262144U;
  
#line 116 
  ixgbe_write_reg(hw,32576U,reg);
  
#line 119 
  i = (unsigned char)0U;
  
#line 119 
  goto ldv_54621;
  ldv_54620: 
#line 120 
  ;
  
#line 120 
  max_credits = (unsigned int)*(max + (int)i);
  
#line 121 
  reg = max_credits << 12;
  
#line 122 
  reg = (unsigned int)*(refill + (int)i) | reg;
  
#line 123 
  reg = ((unsigned int)*(bwg_id + (int)i) << 9) | reg;
  
#line 125 
  if ((unsigned int)*(prio_type + (int)i) == 1U) 
#line 126 
                                                 reg |= 1073741824U; else ;
  
#line 128 
  if ((unsigned int)*(prio_type + (int)i) == 2U) 
#line 129 
                                                 reg |= 2147483648U; else ;
  
#line 131 
  ixgbe_write_reg(hw,(unsigned int)((int)i * 64 + 24620),reg);
  
#line 119 
  i = (u8)((int)i + 1);
  ldv_54621: 
#line 120 
  ;
  
#line 119 
  if ((unsigned int)i <= 7U) 
#line 121 
                             goto ldv_54620; else 
#line 124 
                                                  goto ldv_54622;
  ldv_54622: 
#line 125 
  ;
  
#line 134 
  __retres = 0;
  
#line 134 
  return __retres;
}


#line 144  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_dcb_82598.c"
s32 ixgbe_dcb_config_tx_data_arbiter_82598(struct ixgbe_hw *hw, u16 *refill, u16 *max, u8 *bwg_id, u8 *prio_type)
{
  s32 __retres;
  u32 reg;
  u8 i;
  
#line 153 
  reg = ixgbe_read_reg(hw,52480U);
  
#line 155 
  reg &= 4294967231U;
  
#line 157 
  reg |= 288U;
  
#line 159 
  ixgbe_write_reg(hw,52480U,reg);
  
#line 162 
  i = (unsigned char)0U;
  
#line 162 
  goto ldv_54633;
  ldv_54632: 
#line 163 
  ;
  
#line 163 
  reg = (unsigned int)*(refill + (int)i);
  
#line 164 
  reg = ((unsigned int)*(max + (int)i) << 12) | reg;
  
#line 165 
  reg = ((unsigned int)*(bwg_id + (int)i) << 9) | reg;
  
#line 167 
  if ((unsigned int)*(prio_type + (int)i) == 1U) 
#line 168 
                                                 reg |= 1073741824U; else ;
  
#line 170 
  if ((unsigned int)*(prio_type + (int)i) == 2U) 
#line 171 
                                                 reg |= 2147483648U; else ;
  
#line 173 
  ixgbe_write_reg(hw,(unsigned int)(((int)i + 13128) * 4),reg);
  
#line 162 
  i = (u8)((int)i + 1);
  ldv_54633: 
#line 163 
  ;
  
#line 162 
  if ((unsigned int)i <= 7U) 
#line 164 
                             goto ldv_54632; else 
#line 167 
                                                  goto ldv_54634;
  ldv_54634: 
#line 168 
  ;
  
#line 177 
  reg = ixgbe_read_reg(hw,32256U);
  
#line 178 
  reg |= 4U;
  
#line 179 
  ixgbe_write_reg(hw,32256U,reg);
  
#line 181 
  __retres = 0;
  
#line 181 
  return __retres;
}


#line 191  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_dcb_82598.c"
s32 ixgbe_dcb_config_pfc_82598(struct ixgbe_hw *hw, u8 pfc_en)
{
  s32 __retres;
  u32 fcrtl;
  u32 reg;
  u8 i;
  
#line 197 
  reg = ixgbe_read_reg(hw,15616U);
  
#line 198 
  reg &= 4294967287U;
  
#line 199 
  reg |= 16U;
  
#line 200 
  ixgbe_write_reg(hw,15616U,reg);
  
#line 203 
  reg = ixgbe_read_reg(hw,20608U);
  
#line 204 
  reg &= 4294918143U;
  
#line 206 
  if ((unsigned int)pfc_en != 0U) 
#line 207 
                                  reg |= 16384U; else ;
  
#line 209 
  ixgbe_write_reg(hw,20608U,reg);
  
#line 212 
  i = (unsigned char)0U;
  
#line 212 
  goto ldv_54644;
  ldv_54643: 
#line 213 
  ;
  
#line 213 
  if ((((int)pfc_en >> (int)i) & 1) == 0) {
    
#line 214 
    ixgbe_write_reg(hw,(unsigned int)(((int)i + 1604) * 8),0U);
    
#line 215 
    ixgbe_write_reg(hw,(unsigned int)(((int)i + 1612) * 8),0U);
    
#line 216 
    goto ldv_54642;
  }
  else ;
  
#line 219 
  fcrtl = (hw->fc.low_water[(int)i] << 10) | 2147483648U;
  
#line 220 
  reg = (hw->fc.high_water[(int)i] << 10) | 2147483648U;
  
#line 221 
  ixgbe_write_reg(hw,(unsigned int)(((int)i + 1604) * 8),fcrtl);
  
#line 222 
  ixgbe_write_reg(hw,(unsigned int)(((int)i + 1612) * 8),reg);
  ldv_54642: 
#line 223 
  ;
  
#line 212 
  i = (u8)((int)i + 1);
  ldv_54644: 
#line 213 
  ;
  
#line 212 
  if ((unsigned int)i <= 7U) 
#line 214 
                             goto ldv_54643; else 
#line 217 
                                                  goto ldv_54645;
  ldv_54645: 
#line 218 
  ;
  
#line 226 
  reg = (unsigned int)((int)hw->fc.pause_time * 65537);
  
#line 227 
  i = (unsigned char)0U;
  
#line 227 
  goto ldv_54647;
  ldv_54646: 
#line 228 
  ;
  
#line 228 
  ixgbe_write_reg(hw,(unsigned int)(((int)i + 3200) * 4),reg);
  
#line 227 
  i = (u8)((int)i + 1);
  ldv_54647: 
#line 228 
  ;
  
#line 227 
  if ((unsigned int)i <= 3U) 
#line 229 
                             goto ldv_54646; else 
#line 232 
                                                  goto ldv_54648;
  ldv_54648: 
#line 233 
  ;
  
#line 231 
  ixgbe_write_reg(hw,12960U,(unsigned int)hw->fc.pause_time / 2U);
  
#line 234 
  __retres = 0;
  
#line 234 
  return __retres;
}


#line 244  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_dcb_82598.c"
static s32 ixgbe_dcb_config_tc_stats_82598(struct ixgbe_hw *hw)
{
  s32 __retres;
  int tmp;
  int tmp_0;
  
#line 246 
  u32 reg = 0U;
  
#line 247 
  u8 i = (unsigned char)0U;
  
#line 248 
  u8 j = (unsigned char)0U;
  
#line 251 
  i = (unsigned char)0U;
  
#line 251 
  j = (unsigned char)0U;
  
#line 251 
  goto ldv_54656;
  ldv_54655: 
#line 252 
  ;
  
#line 252 
  reg = ixgbe_read_reg(hw,(unsigned int)(((int)i + 2240) * 4));
  
#line 253 
  reg = (unsigned int)((int)j * 16843009) | reg;
  
#line 254 
  ixgbe_write_reg(hw,(unsigned int)(((int)i + 2240) * 4),reg);
  
#line 255 
  reg = ixgbe_read_reg(hw,(unsigned int)(((int)i + 2241) * 4));
  
#line 256 
  reg = (unsigned int)((int)j * 16843009) | reg;
  
#line 257 
  ixgbe_write_reg(hw,(unsigned int)(((int)i + 2241) * 4),reg);
  
#line 251 
  i = (unsigned char)((unsigned int)i + 2U);
  
#line 251 
  j = (u8)((int)j + 1);
  ldv_54656: 
#line 252 
  ;
  
#line 251 
  if ((unsigned int)i <= 14U && (unsigned int)j <= 7U) 
#line 253 
                                                       goto ldv_54655; else 
                                                                    
#line 256 
                                                                    goto ldv_54657;
  ldv_54657: 
#line 257 
  ;
  
#line 260 
  i = (unsigned char)0U;
  
#line 260 
  goto ldv_54659;
  ldv_54658: 
#line 261 
  ;
  
#line 261 
  if ((unsigned int)i <= 7U) 
#line 261 
                             tmp = ((int)i + 7360) * 4; else 
#line 261 
                                                             tmp = ((int)i + 8576) * 4;
  
#line 261 
  ;
  
#line 261 
  reg = ixgbe_read_reg(hw,(unsigned int)tmp);
  
#line 262 
  reg = (unsigned int)((int)i * 16843009) | reg;
  
#line 263 
  ;
  
#line 263 
  if ((unsigned int)i <= 7U) 
#line 263 
                             tmp_0 = ((int)i + 7360) * 4; else 
#line 263 
                                                               tmp_0 = ((int)i + 8576) * 4;
  
#line 263 
  ;
  
#line 263 
  ixgbe_write_reg(hw,(unsigned int)tmp_0,reg);
  
#line 260 
  i = (u8)((int)i + 1);
  ldv_54659: 
#line 261 
  ;
  
#line 260 
  if ((unsigned int)i <= 7U) 
#line 262 
                             goto ldv_54658; else 
#line 265 
                                                  goto ldv_54660;
  ldv_54660: 
#line 266 
  ;
  
#line 266 
  __retres = 0;
  
#line 266 
  return __retres;
}


#line 276  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_dcb_82598.c"
s32 ixgbe_dcb_hw_config_82598(struct ixgbe_hw *hw, u8 pfc_en, u16 *refill, u16 *max, u8 *bwg_id, u8 *prio_type)
{
  s32 __retres;
  
#line 279 
  ixgbe_dcb_config_rx_arbiter_82598(hw,refill,max,prio_type);
  
#line 280 
  ixgbe_dcb_config_tx_desc_arbiter_82598(hw,refill,max,bwg_id,prio_type);
  
#line 282 
  ixgbe_dcb_config_tx_data_arbiter_82598(hw,refill,max,bwg_id,prio_type);
  
#line 284 
  ixgbe_dcb_config_pfc_82598(hw,(unsigned char)((int)pfc_en));
  
#line 285 
  ixgbe_dcb_config_tc_stats_82598(hw);
  
#line 287 
  __retres = 0;
  
#line 287 
  return __retres;
}


#line 270  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cpumask.h"
__inline static void cpumask_set_cpu(unsigned int cpu, struct cpumask *dstp)
{
  unsigned int tmp;
  
#line 272 
  ;
  
#line 272 
  tmp = cpumask_check(cpu);
  
#line 272 
  set_bit((long)tmp,(unsigned long volatile *)(& dstp->bits));
  
#line 273 
  return;
}


#line 292  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cpumask.h"
__inline static int cpumask_test_cpu(int cpu, struct cpumask const *cpumask)
{
  int tmp_0;
  unsigned int tmp;
  
#line 294 
  ;
  
#line 294 
  tmp = cpumask_check((unsigned int)cpu);
  
#line 294 
  tmp_0 = variable_test_bit((long)tmp,(unsigned long const volatile *)(& cpumask->bits));
  
#line 294 
  return tmp_0;
}


#line 51  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rcutree.h"
void kfree_call_rcu(struct callback_head *, void (*)(struct callback_head *));


#line 57  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/topology.h"
int __cpu_to_node(int);


#line 233  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/slab.h"
extern struct kmem_cache *kmalloc_caches[14U];


#line 246  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/slab.h"
__inline static int kmalloc_index(size_t size)
{
  int __retres;
  
#line 248 
  if (size == 0UL) {
    
#line 249 
    __retres = 0;
    
#line 249 
    goto return_label;
  }
  else ;
  
#line 251 
  if (size <= 8UL) {
    
#line 252 
    __retres = 3;
    
#line 252 
    goto return_label;
  }
  else ;
  
#line 254 
  if (size + 18446744073709551551UL <= 31UL) {
    
#line 255 
    __retres = 1;
    
#line 255 
    goto return_label;
  }
  else ;
  
#line 256 
  if (size + 18446744073709551487UL <= 63UL) {
    
#line 257 
    __retres = 2;
    
#line 257 
    goto return_label;
  }
  else ;
  
#line 258 
  if (size <= 8UL) {
    
#line 258 
    __retres = 3;
    
#line 258 
    goto return_label;
  }
  else ;
  
#line 259 
  if (size <= 16UL) {
    
#line 259 
    __retres = 4;
    
#line 259 
    goto return_label;
  }
  else ;
  
#line 260 
  if (size <= 32UL) {
    
#line 260 
    __retres = 5;
    
#line 260 
    goto return_label;
  }
  else ;
  
#line 261 
  if (size <= 64UL) {
    
#line 261 
    __retres = 6;
    
#line 261 
    goto return_label;
  }
  else ;
  
#line 262 
  if (size <= 128UL) {
    
#line 262 
    __retres = 7;
    
#line 262 
    goto return_label;
  }
  else ;
  
#line 263 
  if (size <= 256UL) {
    
#line 263 
    __retres = 8;
    
#line 263 
    goto return_label;
  }
  else ;
  
#line 264 
  if (size <= 512UL) {
    
#line 264 
    __retres = 9;
    
#line 264 
    goto return_label;
  }
  else ;
  
#line 265 
  if (size <= 1024UL) {
    
#line 265 
    __retres = 10;
    
#line 265 
    goto return_label;
  }
  else ;
  
#line 266 
  if (size <= 2048UL) {
    
#line 266 
    __retres = 11;
    
#line 266 
    goto return_label;
  }
  else ;
  
#line 267 
  if (size <= 4096UL) {
    
#line 267 
    __retres = 12;
    
#line 267 
    goto return_label;
  }
  else ;
  
#line 268 
  if (size <= 8192UL) {
    
#line 268 
    __retres = 13;
    
#line 268 
    goto return_label;
  }
  else ;
  
#line 269 
  if (size <= 16384UL) {
    
#line 269 
    __retres = 14;
    
#line 269 
    goto return_label;
  }
  else ;
  
#line 270 
  if (size <= 32768UL) {
    
#line 270 
    __retres = 15;
    
#line 270 
    goto return_label;
  }
  else ;
  
#line 271 
  if (size <= 65536UL) {
    
#line 271 
    __retres = 16;
    
#line 271 
    goto return_label;
  }
  else ;
  
#line 272 
  if (size <= 131072UL) {
    
#line 272 
    __retres = 17;
    
#line 272 
    goto return_label;
  }
  else ;
  
#line 273 
  if (size <= 262144UL) {
    
#line 273 
    __retres = 18;
    
#line 273 
    goto return_label;
  }
  else ;
  
#line 274 
  if (size <= 524288UL) {
    
#line 274 
    __retres = 19;
    
#line 274 
    goto return_label;
  }
  else ;
  
#line 275 
  if (size <= 1048576UL) {
    
#line 275 
    __retres = 20;
    
#line 275 
    goto return_label;
  }
  else ;
  
#line 276 
  if (size <= 2097152UL) {
    
#line 276 
    __retres = 21;
    
#line 276 
    goto return_label;
  }
  else ;
  
#line 277 
  if (size <= 4194304UL) {
    
#line 277 
    __retres = 22;
    
#line 277 
    goto return_label;
  }
  else ;
  
#line 278 
  if (size <= 8388608UL) {
    
#line 278 
    __retres = 23;
    
#line 278 
    goto return_label;
  }
  else ;
  
#line 279 
  if (size <= 16777216UL) {
    
#line 279 
    __retres = 24;
    
#line 279 
    goto return_label;
  }
  else ;
  
#line 280 
  if (size <= 33554432UL) {
    
#line 280 
    __retres = 25;
    
#line 280 
    goto return_label;
  }
  else ;
  
#line 281 
  if (size <= 67108864UL) {
    
#line 281 
    __retres = 26;
    
#line 281 
    goto return_label;
  }
  else ;
  
#line 282 
  ldv_inline_asm();
  
#line 282 
  ;
  
#line 285 
  __retres = -1;
  return_label: 
#line 285 
                return __retres;
}


#line 294 
void *__kmalloc_node(size_t, gfp_t, int);


#line 312 
void *kmem_cache_alloc_node_trace(struct kmem_cache *, gfp_t, int, size_t);


#line 462  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/slab.h"
__inline static void *kmalloc_node(size_t size, gfp_t flags, int node)
{
  void *__retres;
  void *tmp_1;
  
#line 465 
  if ((0 != 0 && size <= 8192UL) && (flags & 1U) == 0U) {
    void *tmp_0;
    
#line 467 
    int i = kmalloc_index(size);
    
#line 469 
    if (i == 0) {
      
#line 470 
      __retres = (void *)16;
      
#line 470 
      goto return_label;
    }
    else ;
    
#line 472 
    tmp_0 = kmem_cache_alloc_node_trace(kmalloc_caches[i],flags,node,size);
    
#line 472 
    __retres = tmp_0;
    
#line 472 
    goto return_label;
  }
  else ;
  
#line 476 
  tmp_1 = __kmalloc_node(size,flags,node);
  
#line 476 
  __retres = tmp_1;
  return_label: 
#line 476 
                return __retres;
}


#line 542 
static void *kcalloc_0(size_t n, size_t size, gfp_t flags);


#line 581 
static void *kzalloc_0(size_t size, gfp_t flags);


#line 596  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/slab.h"
__inline static void *kzalloc_node(size_t size, gfp_t flags, int node)
{
  void *tmp;
  
#line 598 
  tmp = kmalloc_node(size,flags | 32768U,node);
  
#line 598 
  return tmp;
}


#line 1212  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
void pci_disable_msi(struct pci_dev *);


#line 1219 
int pci_enable_msi_range(struct pci_dev *, int, int);


#line 1220  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
__inline static int pci_enable_msi_exact(struct pci_dev *dev, int nvec)
{
  int __retres;
  
#line 1222 
  int rc = pci_enable_msi_range(dev,nvec,nvec);
  
#line 1223 
  if (rc < 0) {
    
#line 1224 
    __retres = rc;
    
#line 1224 
    goto return_label;
  }
  else ;
  
#line 1225 
  __retres = 0;
  return_label: 
#line 1225 
                return __retres;
}


#line 1227 
int pci_enable_msix_range(struct pci_dev *, struct msix_entry *, int, int);


#line 478  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
void napi_hash_add(struct napi_struct *);


#line 487 
void napi_hash_del(struct napi_struct *);


#line 1795  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static int netdev_set_tc_queue(struct net_device *dev, u8 tc, u16 count, u16 offset)
{
  int __retres;
  
#line 1797 
  if ((int)dev->num_tc <= (int)tc) {
    
#line 1798 
    __retres = -22;
    
#line 1798 
    goto return_label;
  }
  else ;
  
#line 1800 
  dev->tc_to_txq[(int)tc].count = count;
  
#line 1801 
  dev->tc_to_txq[(int)tc].offset = offset;
  
#line 1802 
  __retres = 0;
  return_label: 
#line 1802 
                return __retres;
}


#line 1911 
void netif_napi_add(struct net_device *, struct napi_struct *, int (*)(struct napi_struct *, int ), int);


#line 1920 
void netif_napi_del(struct napi_struct *);


#line 42  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_lib.c"
static bool ixgbe_cache_ring_dcb_sriov(struct ixgbe_adapter *adapter)
{
  bool __retres;
  int i;
  u16 reg_idx;
  int tmp;
  
#line 45 
  struct ixgbe_ring_feature *fcoe = & adapter->ring_feature[4];
  
#line 47 
  struct ixgbe_ring_feature *vmdq = & adapter->ring_feature[1];
  
#line 50 
  tmp = netdev_get_num_tc(adapter->netdev);
  
#line 50 
  u8 tcs = (unsigned char)tmp;
  
#line 53 
  if ((unsigned int)tcs <= 1U) {
    
#line 54 
    __retres = (_Bool)0;
    
#line 54 
    goto return_label;
  }
  else ;
  
#line 57 
  if ((adapter->flags & 8388608U) == 0U) {
    
#line 58 
    __retres = (_Bool)0;
    
#line 58 
    goto return_label;
  }
  else ;
  
#line 61 
  reg_idx = (unsigned short)((int)vmdq->offset * (int)((unsigned short)(- ((int)vmdq->mask) & (int)vmdq->mask)));
  
#line 62 
  i = 0;
  
#line 62 
  goto ldv_54633;
  ldv_54632: 
#line 63 
  ;
  
#line 64 
  if (((int)reg_idx & ~ ((int)vmdq->mask)) >= (int)tcs) 
#line 65 
                                                        reg_idx = (unsigned short)(((unsigned int)((int)reg_idx - (int)vmdq->mask) - 1U) & (unsigned int)vmdq->mask); else ;
  
#line 66 
  (adapter->rx_ring[i])->reg_idx = (unsigned char)reg_idx;
  
#line 62 
  i += 1;
  
#line 62 
  reg_idx = (u16)((int)reg_idx + 1);
  ldv_54633: 
#line 63 
  ;
  
#line 62 
  if (adapter->num_rx_queues > i) 
#line 64 
                                  goto ldv_54632; else 
#line 67 
                                                       goto ldv_54634;
  ldv_54634: 
#line 68 
  ;
  
#line 69 
  reg_idx = (unsigned short)((int)vmdq->offset * (int)((unsigned short)(- ((int)vmdq->mask) & (int)vmdq->mask)));
  
#line 70 
  i = 0;
  
#line 70 
  goto ldv_54636;
  ldv_54635: 
#line 71 
  ;
  
#line 72 
  if (((int)reg_idx & ~ ((int)vmdq->mask)) >= (int)tcs) 
#line 73 
                                                        reg_idx = (unsigned short)(((unsigned int)((int)reg_idx - (int)vmdq->mask) - 1U) & (unsigned int)vmdq->mask); else ;
  
#line 74 
  (adapter->tx_ring[i])->reg_idx = (unsigned char)reg_idx;
  
#line 70 
  i += 1;
  
#line 70 
  reg_idx = (u16)((int)reg_idx + 1);
  ldv_54636: 
#line 71 
  ;
  
#line 70 
  if (adapter->num_tx_queues > i) 
#line 72 
                                  goto ldv_54635; else 
#line 75 
                                                       goto ldv_54637;
  ldv_54637: 
#line 76 
  ;
  
#line 79 
  if ((adapter->flags & 2097152U) == 0U) {
    
#line 80 
    __retres = (_Bool)1;
    
#line 80 
    goto return_label;
  }
  else ;
  
#line 83 
  if ((int)fcoe->offset < (int)((unsigned short)tcs)) {
    
#line 84 
    __retres = (_Bool)1;
    
#line 84 
    goto return_label;
  }
  else ;
  
#line 87 
  if ((unsigned int)fcoe->indices != 0U) {
    
#line 88 
    u16 queues_per_pool = (unsigned short)(- ((int)vmdq->mask) & (int)vmdq->mask);
    
#line 89 
    u8 fcoe_tc = ixgbe_fcoe_get_tc(adapter);
    
#line 91 
    reg_idx = (unsigned short)(((int)vmdq->offset + (int)vmdq->indices) * (int)queues_per_pool);
    
#line 92 
    i = (int)fcoe->offset;
    
#line 92 
    goto ldv_54641;
    ldv_54640: 
#line 93 
    ;
    
#line 93 
    reg_idx = (unsigned short)((int)((unsigned short)(((unsigned int)((int)reg_idx - (int)vmdq->mask) - 1U) & (unsigned int)vmdq->mask)) + (int)((unsigned short)fcoe_tc));
    
#line 94 
    (adapter->rx_ring[i])->reg_idx = (unsigned char)reg_idx;
    
#line 95 
    reg_idx = (u16)((int)reg_idx + 1);
    
#line 92 
    i += 1;
    ldv_54641: 
#line 93 
    ;
    
#line 92 
    if (adapter->num_rx_queues > i) 
#line 94 
                                    goto ldv_54640; else 
#line 97 
                                                         goto ldv_54642;
    ldv_54642: 
#line 98 
    ;
    
#line 98 
    reg_idx = (unsigned short)(((int)vmdq->offset + (int)vmdq->indices) * (int)queues_per_pool);
    
#line 99 
    i = (int)fcoe->offset;
    
#line 99 
    goto ldv_54644;
    ldv_54643: 
#line 100 
    ;
    
#line 100 
    reg_idx = (unsigned short)((int)((unsigned short)(((unsigned int)((int)reg_idx - (int)vmdq->mask) - 1U) & (unsigned int)vmdq->mask)) + (int)((unsigned short)fcoe_tc));
    
#line 101 
    (adapter->tx_ring[i])->reg_idx = (unsigned char)reg_idx;
    
#line 102 
    reg_idx = (u16)((int)reg_idx + 1);
    
#line 99 
    i += 1;
    ldv_54644: 
#line 100 
    ;
    
#line 99 
    if (adapter->num_tx_queues > i) 
#line 101 
                                    goto ldv_54643; else 
#line 104 
                                                         goto ldv_54645;
    ldv_54645: 
#line 105 
    ;
  }
  else ;
  
#line 107 
  __retres = (_Bool)1;
  return_label: 
#line 107 
                return __retres;
}


#line 111  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_lib.c"
static void ixgbe_get_first_reg_idx(struct ixgbe_adapter *adapter, u8 tc, unsigned int *tx, unsigned int *rx)
{
  int tmp;
  
#line 114 
  struct net_device *dev = adapter->netdev;
  
#line 115 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 116 
  tmp = netdev_get_num_tc(dev);
  
#line 116 
  u8 num_tcs = (unsigned char)tmp;
  
#line 118 
  *tx = 0U;
  
#line 119 
  *rx = 0U;
  
#line 121 
  switch ((unsigned int)hw->mac.type) {
    case (unsigned int)1: 
#line 122 
    ;
    
#line 124 
    *tx = (unsigned int)((int)tc << 2);
    
#line 125 
    *rx = (unsigned int)((int)tc << 3);
    
#line 126 
    goto ldv_54656;
    case (unsigned int)2: 
#line 127 
    ;
    case (unsigned int)3: 
#line 128 
    ;
    case (unsigned int)4: 
#line 129 
    ;
    case (unsigned int)5: 
#line 130 
    ;
    
#line 131 
    if ((unsigned int)num_tcs > 4U) {
      
#line 137 
      *rx = (unsigned int)((int)tc << 4);
      
#line 138 
      if ((unsigned int)tc <= 2U) 
#line 139 
                                  *tx = (unsigned int)((int)tc << 5);
      else 
        
#line 140 
        if ((unsigned int)tc <= 4U) 
#line 141 
                                    *tx = (unsigned int)(((int)tc + 2) << 4); else 
                                                                    
#line 143 
                                                                    *tx = (unsigned int)(((int)tc + 8) << 3);
    }
    else {
      
#line 150 
      *rx = (unsigned int)((int)tc << 5);
      
#line 151 
      if ((unsigned int)tc <= 1U) 
#line 152 
                                  *tx = (unsigned int)((int)tc << 6); else 
                                                                    
#line 154 
                                                                    *tx = (unsigned int)(((int)tc + 4) << 4);
    }
    default: 
#line 156 
    ;
    
#line 157 
    goto ldv_54656;
  }
  ldv_54656: 
#line 159 
  ;
  
#line 160 
  return;
}


#line 168  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_lib.c"
static bool ixgbe_cache_ring_dcb(struct ixgbe_adapter *adapter)
{
  bool __retres;
  unsigned int tx_idx;
  unsigned int rx_idx;
  int tc;
  int offset;
  int rss_i;
  int i;
  int tmp;
  
#line 170 
  struct net_device *dev = adapter->netdev;
  
#line 173 
  tmp = netdev_get_num_tc(dev);
  
#line 173 
  u8 num_tcs = (unsigned char)tmp;
  
#line 176 
  if ((unsigned int)num_tcs <= 1U) {
    
#line 177 
    __retres = (_Bool)0;
    
#line 177 
    goto return_label;
  }
  else ;
  
#line 179 
  rss_i = (int)adapter->ring_feature[2].indices;
  
#line 181 
  tc = 0;
  
#line 181 
  offset = 0;
  
#line 181 
  goto ldv_54677;
  ldv_54676: 
#line 182 
  ;
  
#line 182 
  ixgbe_get_first_reg_idx(adapter,(unsigned char)((int)((unsigned char)tc)),& tx_idx,& rx_idx);
  
#line 183 
  i = 0;
  
#line 183 
  goto ldv_54674;
  ldv_54673: 
#line 184 
  ;
  
#line 184 
  (adapter->tx_ring[offset + i])->reg_idx = (unsigned char)tx_idx;
  
#line 185 
  (adapter->rx_ring[offset + i])->reg_idx = (unsigned char)rx_idx;
  
#line 186 
  (adapter->tx_ring[offset + i])->dcb_tc = (unsigned char)tc;
  
#line 187 
  (adapter->rx_ring[offset + i])->dcb_tc = (unsigned char)tc;
  
#line 183 
  i += 1;
  
#line 183 
  tx_idx += 1U;
  
#line 183 
  rx_idx += 1U;
  ldv_54674: 
#line 184 
  ;
  
#line 183 
  if (i < rss_i) 
#line 185 
                 goto ldv_54673; else 
#line 188 
                                      goto ldv_54675;
  ldv_54675: 
#line 189 
  ;
  
#line 181 
  tc += 1;
  
#line 181 
  offset += rss_i;
  ldv_54677: 
#line 182 
  ;
  
#line 181 
  if ((int)num_tcs > tc) 
#line 183 
                         goto ldv_54676; else 
#line 186 
                                              goto ldv_54678;
  ldv_54678: 
#line 187 
  ;
  
#line 191 
  __retres = (_Bool)1;
  return_label: 
#line 191 
                return __retres;
}


#line 203  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_lib.c"
static bool ixgbe_cache_ring_sriov(struct ixgbe_adapter *adapter)
{
  bool __retres;
  int i;
  u16 reg_idx;
  
#line 206 
  struct ixgbe_ring_feature *fcoe = & adapter->ring_feature[4];
  
#line 208 
  struct ixgbe_ring_feature *vmdq = & adapter->ring_feature[1];
  
#line 209 
  struct ixgbe_ring_feature *rss = & adapter->ring_feature[2];
  
#line 214 
  if ((adapter->flags & 16384U) == 0U) {
    
#line 215 
    __retres = (_Bool)0;
    
#line 215 
    goto return_label;
  }
  else ;
  
#line 218 
  reg_idx = (unsigned short)((int)vmdq->offset * (int)((unsigned short)(- ((int)vmdq->mask) & (int)vmdq->mask)));
  
#line 219 
  i = 0;
  
#line 219 
  goto ldv_54689;
  ldv_54688: 
#line 220 
  ;
  
#line 222 
  if ((unsigned int)fcoe->offset != 0U && (int)fcoe->offset < i) 
#line 223 
                                                                 goto ldv_54687; else ;
  
#line 226 
  if (((int)reg_idx & ~ ((int)vmdq->mask)) >= (int)rss->indices) 
#line 227 
                                                                 reg_idx = (unsigned short)(((unsigned int)((int)reg_idx - (int)vmdq->mask) - 1U) & (unsigned int)vmdq->mask); else ;
  
#line 228 
  (adapter->rx_ring[i])->reg_idx = (unsigned char)reg_idx;
  
#line 219 
  i += 1;
  
#line 219 
  reg_idx = (u16)((int)reg_idx + 1);
  ldv_54689: 
#line 220 
  ;
  
#line 219 
  if (adapter->num_rx_queues > i) 
#line 221 
                                  goto ldv_54688; else 
#line 224 
                                                       goto ldv_54687;
  ldv_54687: 
#line 225 
  ;
  
#line 233 
  goto ldv_54691;
  ldv_54690: 
#line 234 
  ;
  
#line 234 
  (adapter->rx_ring[i])->reg_idx = (unsigned char)reg_idx;
  
#line 233 
  i += 1;
  
#line 233 
  reg_idx = (u16)((int)reg_idx + 1);
  ldv_54691: 
#line 234 
  ;
  
#line 233 
  if (adapter->num_rx_queues > i) 
#line 235 
                                  goto ldv_54690; else 
#line 238 
                                                       goto ldv_54692;
  ldv_54692: 
#line 239 
  ;
  
#line 237 
  reg_idx = (unsigned short)((int)vmdq->offset * (int)((unsigned short)(- ((int)vmdq->mask) & (int)vmdq->mask)));
  
#line 238 
  i = 0;
  
#line 238 
  goto ldv_54695;
  ldv_54694: 
#line 239 
  ;
  
#line 241 
  if ((unsigned int)fcoe->offset != 0U && (int)fcoe->offset < i) 
#line 242 
                                                                 goto ldv_54693; else ;
  
#line 245 
  if (((int)rss->mask & (int)reg_idx) >= (int)rss->indices) 
#line 246 
                                                            reg_idx = (unsigned short)(((unsigned int)((int)reg_idx - (int)vmdq->mask) - 1U) & (unsigned int)vmdq->mask); else ;
  
#line 247 
  (adapter->tx_ring[i])->reg_idx = (unsigned char)reg_idx;
  
#line 238 
  i += 1;
  
#line 238 
  reg_idx = (u16)((int)reg_idx + 1);
  ldv_54695: 
#line 239 
  ;
  
#line 238 
  if (adapter->num_tx_queues > i) 
#line 240 
                                  goto ldv_54694; else 
#line 243 
                                                       goto ldv_54693;
  ldv_54693: 
#line 244 
  ;
  
#line 252 
  goto ldv_54697;
  ldv_54696: 
#line 253 
  ;
  
#line 253 
  (adapter->tx_ring[i])->reg_idx = (unsigned char)reg_idx;
  
#line 252 
  i += 1;
  
#line 252 
  reg_idx = (u16)((int)reg_idx + 1);
  ldv_54697: 
#line 253 
  ;
  
#line 252 
  if (adapter->num_tx_queues > i) 
#line 254 
                                  goto ldv_54696; else 
#line 257 
                                                       goto ldv_54698;
  ldv_54698: 
#line 258 
  ;
  
#line 257 
  __retres = (_Bool)1;
  return_label: 
#line 257 
                return __retres;
}


#line 267  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_lib.c"
static bool ixgbe_cache_ring_rss(struct ixgbe_adapter *adapter)
{
  bool __retres;
  int i;
  
#line 271 
  i = 0;
  
#line 271 
  goto ldv_54704;
  ldv_54703: 
#line 272 
  ;
  
#line 272 
  (adapter->rx_ring[i])->reg_idx = (unsigned char)i;
  
#line 271 
  i += 1;
  ldv_54704: 
#line 272 
  ;
  
#line 271 
  if (adapter->num_rx_queues > i) 
#line 273 
                                  goto ldv_54703; else 
#line 276 
                                                       goto ldv_54705;
  ldv_54705: 
#line 277 
  ;
  
#line 273 
  i = 0;
  
#line 273 
  goto ldv_54707;
  ldv_54706: 
#line 274 
  ;
  
#line 274 
  (adapter->tx_ring[i])->reg_idx = (unsigned char)i;
  
#line 273 
  i += 1;
  ldv_54707: 
#line 274 
  ;
  
#line 273 
  if (adapter->num_tx_queues > i) 
#line 275 
                                  goto ldv_54706; else 
#line 278 
                                                       goto ldv_54708;
  ldv_54708: 
#line 279 
  ;
  
#line 276 
  __retres = (_Bool)1;
  
#line 276 
  return __retres;
}


#line 290  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_lib.c"
static void ixgbe_cache_ring_register(struct ixgbe_adapter *adapter)
{
  bool tmp;
  bool tmp_0;
  bool tmp_1;
  
#line 293 
  (adapter->rx_ring[0])->reg_idx = (unsigned char)0U;
  
#line 294 
  (adapter->tx_ring[0])->reg_idx = (unsigned char)0U;
  
#line 297 
  tmp = ixgbe_cache_ring_dcb_sriov(adapter);
  
#line 297 
  if ((int)tmp != 0) 
#line 298 
                     goto return_label; else ;
  
#line 300 
  tmp_0 = ixgbe_cache_ring_dcb(adapter);
  
#line 300 
  if ((int)tmp_0 != 0) 
#line 301 
                       goto return_label; else ;
  
#line 304 
  tmp_1 = ixgbe_cache_ring_sriov(adapter);
  
#line 304 
  if ((int)tmp_1 != 0) 
#line 305 
                       goto return_label; else ;
  
#line 307 
  ixgbe_cache_ring_rss(adapter);
  return_label: 
#line 308 
                return;
}


#line 326  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_lib.c"
static bool ixgbe_set_dcb_sriov_queues(struct ixgbe_adapter *adapter)
{
  bool __retres;
  int i;
  int tmp;
  
#line 329 
  u16 vmdq_i = adapter->ring_feature[1].limit;
  
#line 330 
  u16 vmdq_m = (unsigned short)0U;
  
#line 332 
  u16 fcoe_i = (unsigned short)0U;
  
#line 334 
  tmp = netdev_get_num_tc(adapter->netdev);
  
#line 334 
  u8 tcs = (unsigned char)tmp;
  
#line 337 
  if ((unsigned int)tcs <= 1U) {
    
#line 338 
    __retres = (_Bool)0;
    
#line 338 
    goto return_label;
  }
  else ;
  
#line 341 
  if ((adapter->flags & 8388608U) == 0U) {
    
#line 342 
    __retres = (_Bool)0;
    
#line 342 
    goto return_label;
  }
  else ;
  
#line 345 
  vmdq_i = (unsigned short)((int)adapter->ring_feature[1].offset + (int)vmdq_i);
  
#line 348 
  if ((unsigned int)tcs > 4U) {
    int tmp_1;
    {
      int tmp_0;
      
#line 349 
      u16 __min1 = vmdq_i;
      
#line 349 
      u16 __min2 = (unsigned short)16U;
      
#line 349 
      if ((int)__min1 < (int)__min2) 
#line 349 
                                     tmp_0 = (int)__min1; else 
#line 349 
                                                               tmp_0 = (int)__min2;
      
#line 349 
      tmp_1 = tmp_0;
    }
    
#line 349 
    vmdq_i = (unsigned short)tmp_1;
    
#line 350 
    vmdq_m = (unsigned short)120U;
  }
  else {
    int tmp_3;
    {
      int tmp_2;
      
#line 353 
      u16 __min1_0 = vmdq_i;
      
#line 353 
      u16 __min2_0 = (unsigned short)32U;
      
#line 353 
      if ((int)__min1_0 < (int)__min2_0) 
#line 353 
                                         tmp_2 = (int)__min1_0; else 
                                                                  
#line 353 
                                                                  tmp_2 = (int)__min2_0;
      
#line 353 
      tmp_3 = tmp_2;
    }
    
#line 353 
    vmdq_i = (unsigned short)tmp_3;
    
#line 354 
    vmdq_m = (unsigned short)124U;
  }
  
#line 359 
  fcoe_i = (unsigned short)((int)((unsigned short)(128 / (- ((int)vmdq_m) & (int)vmdq_m))) - (int)vmdq_i);
  
#line 363 
  vmdq_i = (unsigned short)((int)vmdq_i - (int)adapter->ring_feature[1].offset);
  
#line 366 
  adapter->ring_feature[1].indices = vmdq_i;
  
#line 367 
  adapter->ring_feature[1].mask = vmdq_m;
  
#line 373 
  adapter->ring_feature[2].indices = (unsigned short)1U;
  
#line 374 
  adapter->ring_feature[2].mask = (unsigned short)0U;
  
#line 377 
  adapter->flags &= 4294705151U;
  
#line 379 
  adapter->num_rx_pools = (int)vmdq_i;
  
#line 380 
  adapter->num_rx_queues_per_pool = (int)tcs;
  
#line 382 
  adapter->num_tx_queues = (int)vmdq_i * (int)tcs;
  
#line 383 
  adapter->num_rx_queues = (int)vmdq_i * (int)tcs;
  
#line 386 
  if ((adapter->flags & 2097152U) != 0U) {
    struct ixgbe_ring_feature *fcoe;
    int tmp_5;
    
#line 389 
    fcoe = & adapter->ring_feature[4];
    {
      int tmp_4;
      
#line 392 
      u16 __min1_1 = fcoe_i;
      
#line 392 
      u16 __min2_1 = fcoe->limit;
      
#line 392 
      if ((int)__min1_1 < (int)__min2_1) 
#line 392 
                                         tmp_4 = (int)__min1_1; else 
                                                                  
#line 392 
                                                                  tmp_4 = (int)__min2_1;
      
#line 392 
      tmp_5 = tmp_4;
    }
    
#line 392 
    fcoe_i = (unsigned short)tmp_5;
    
#line 394 
    if ((unsigned int)fcoe_i != 0U) {
      
#line 396 
      fcoe->indices = fcoe_i;
      
#line 397 
      fcoe->offset = (unsigned short)((int)((unsigned short)tcs) * (int)vmdq_i);
      
#line 400 
      adapter->num_tx_queues += (int)fcoe_i;
      
#line 401 
      adapter->num_rx_queues += (int)fcoe_i;
    }
    else 
      
#line 402 
      if ((unsigned int)tcs > 1U) {
        u8 tmp_6;
        
#line 404 
        fcoe->indices = (unsigned short)1U;
        
#line 405 
        tmp_6 = ixgbe_fcoe_get_tc(adapter);
        
#line 405 
        fcoe->offset = (unsigned short)tmp_6;
      }
      else {
        
#line 407 
        adapter->flags &= 4292870143U;
        
#line 409 
        fcoe->indices = (unsigned short)0U;
        
#line 410 
        fcoe->offset = (unsigned short)0U;
      }
  }
  else ;
  
#line 416 
  i = 0;
  
#line 416 
  goto ldv_54731;
  ldv_54730: 
#line 417 
  ;
  
#line 417 
  netdev_set_tc_queue(adapter->netdev,(unsigned char)((int)((unsigned char)i)),(unsigned short)1,(unsigned short)((int)((unsigned short)i)));
  
#line 416 
  i += 1;
  ldv_54731: 
#line 417 
  ;
  
#line 416 
  if ((int)tcs > i) 
#line 418 
                    goto ldv_54730; else 
#line 421 
                                         goto ldv_54732;
  ldv_54732: 
#line 422 
  ;
  
#line 419 
  __retres = (_Bool)1;
  return_label: 
#line 419 
                return __retres;
}


#line 422  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_lib.c"
static bool ixgbe_set_dcb_queues(struct ixgbe_adapter *adapter)
{
  bool __retres;
  struct ixgbe_ring_feature *f;
  int rss_i;
  int rss_m;
  int i;
  int tcs;
  int tmp_6;
  
#line 424 
  struct net_device *dev = adapter->netdev;
  
#line 430 
  tcs = netdev_get_num_tc(dev);
  
#line 433 
  if (tcs <= 1) {
    
#line 434 
    __retres = (_Bool)0;
    
#line 434 
    goto return_label;
  }
  else ;
  
#line 437 
  rss_i = (int)(dev->num_tx_queues / (unsigned int)tcs);
  
#line 438 
  if (adapter->hw.mac.type == (unsigned int)ixgbe_mac_82598EB) {
    int tmp_0;
    {
      int tmp;
      
#line 440 
      u16 __min1 = (unsigned short)rss_i;
      
#line 440 
      u16 __min2 = (unsigned short)4U;
      
#line 440 
      if ((int)__min1 < (int)__min2) 
#line 440 
                                     tmp = (int)__min1; else 
#line 440 
                                                             tmp = (int)__min2;
      
#line 440 
      tmp_0 = tmp;
    }
    
#line 440 
    rss_i = tmp_0;
    
#line 441 
    rss_m = 3;
  }
  else 
    
#line 442 
    if (tcs > 4) {
      int tmp_2;
      {
        int tmp_1;
        
#line 444 
        u16 __min1_0 = (unsigned short)rss_i;
        
#line 444 
        u16 __min2_0 = (unsigned short)8U;
        
#line 444 
        if ((int)__min1_0 < (int)__min2_0) 
#line 444 
                                           tmp_1 = (int)__min1_0; else 
                                                                    
#line 444 
                                                                    tmp_1 = (int)__min2_0;
        
#line 444 
        tmp_2 = tmp_1;
      }
      
#line 444 
      rss_i = tmp_2;
      
#line 445 
      rss_m = 7;
    }
    else {
      int tmp_4;
      {
        int tmp_3;
        
#line 448 
        u16 __min1_1 = (unsigned short)rss_i;
        
#line 448 
        u16 __min2_1 = (unsigned short)16U;
        
#line 448 
        if ((int)__min1_1 < (int)__min2_1) 
#line 448 
                                           tmp_3 = (int)__min1_1; else 
                                                                    
#line 448 
                                                                    tmp_3 = (int)__min2_1;
        
#line 448 
        tmp_4 = tmp_3;
      }
      
#line 448 
      rss_i = tmp_4;
      
#line 449 
      rss_m = 15;
    }
  
#line 453 
  f = & adapter->ring_feature[2];
  {
    int tmp_5;
    
#line 454 
    int __min1_2 = rss_i;
    
#line 454 
    int __min2_2 = (int)f->limit;
    
#line 454 
    if (__min1_2 < __min2_2) 
#line 454 
                             tmp_5 = __min1_2; else 
#line 454 
                                                    tmp_5 = __min2_2;
    
#line 454 
    tmp_6 = tmp_5;
  }
  
#line 454 
  rss_i = tmp_6;
  
#line 455 
  f->indices = (unsigned short)rss_i;
  
#line 456 
  f->mask = (unsigned short)rss_m;
  
#line 459 
  adapter->flags &= 4294705151U;
  
#line 467 
  if ((adapter->flags & 2097152U) != 0U) {
    int tmp_9;
    
#line 468 
    u8 tc = ixgbe_fcoe_get_tc(adapter);
    
#line 470 
    f = & adapter->ring_feature[4];
    {
      int tmp_8;
      
#line 471 
      u16 __min1_3 = (unsigned short)rss_i;
      
#line 471 
      u16 __min2_3 = f->limit;
      
#line 471 
      if ((int)__min1_3 < (int)__min2_3) 
#line 471 
                                         tmp_8 = (int)__min1_3; else 
                                                                  
#line 471 
                                                                  tmp_8 = (int)__min2_3;
      
#line 471 
      tmp_9 = tmp_8;
    }
    
#line 471 
    f->indices = (unsigned short)tmp_9;
    
#line 472 
    f->offset = (unsigned short)((int)((unsigned short)tc) * (int)((unsigned short)rss_i));
  }
  else ;
  
#line 476 
  i = 0;
  
#line 476 
  goto ldv_54759;
  ldv_54758: 
#line 477 
  ;
  
#line 477 
  netdev_set_tc_queue(dev,(unsigned char)((int)((unsigned char)i)),(unsigned short)((int)((unsigned short)rss_i)),(unsigned short)((int)((unsigned short)rss_i) * (int)((unsigned short)i)));
  
#line 476 
  i += 1;
  ldv_54759: 
#line 477 
  ;
  
#line 476 
  if (i < tcs) 
#line 478 
               goto ldv_54758; else 
#line 481 
                                    goto ldv_54760;
  ldv_54760: 
#line 482 
  ;
  
#line 479 
  adapter->num_tx_queues = rss_i * tcs;
  
#line 480 
  adapter->num_rx_queues = rss_i * tcs;
  
#line 482 
  __retres = (_Bool)1;
  return_label: 
#line 482 
                return __retres;
}


#line 495  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_lib.c"
static bool ixgbe_set_sriov_queues(struct ixgbe_adapter *adapter)
{
  bool __retres;
  unsigned long tmp;
  int tmp_1;
  
#line 497 
  u16 vmdq_i = adapter->ring_feature[1].limit;
  
#line 498 
  u16 vmdq_m = (unsigned short)0U;
  
#line 499 
  u16 rss_i = adapter->ring_feature[2].limit;
  
#line 500 
  u16 rss_m = (unsigned short)0U;
  
#line 502 
  u16 fcoe_i = (unsigned short)0U;
  
#line 504 
  tmp = find_first_zero_bit((unsigned long const *)(& adapter->fwd_bitmask),32UL);
  
#line 504 
  bool pools = (_Bool)(tmp > 1UL);
  
#line 507 
  if ((adapter->flags & 8388608U) == 0U) {
    
#line 508 
    __retres = (_Bool)0;
    
#line 508 
    goto return_label;
  }
  else ;
  
#line 511 
  vmdq_i = (unsigned short)((int)adapter->ring_feature[1].offset + (int)vmdq_i);
  {
    int tmp_0;
    
#line 514 
    u16 __min1 = (unsigned short)64U;
    
#line 514 
    u16 __min2 = vmdq_i;
    
#line 514 
    if ((int)__min1 < (int)__min2) 
#line 514 
                                   tmp_0 = (int)__min1; else 
#line 514 
                                                             tmp_0 = (int)__min2;
    
#line 514 
    tmp_1 = tmp_0;
  }
  
#line 514 
  vmdq_i = (unsigned short)tmp_1;
  
#line 517 
  if (((unsigned int)vmdq_i > 32U || (unsigned int)rss_i <= 3U) || ((unsigned int)vmdq_i > 16U && (int)pools != 0)) {
    int tmp_3;
    
#line 518 
    vmdq_m = (unsigned short)126U;
    
#line 519 
    rss_m = (unsigned short)1U;
    {
      int tmp_2;
      
#line 520 
      u16 __min1_0 = rss_i;
      
#line 520 
      u16 __min2_0 = (unsigned short)2U;
      
#line 520 
      if ((int)__min1_0 < (int)__min2_0) 
#line 520 
                                         tmp_2 = (int)__min1_0; else 
                                                                  
#line 520 
                                                                  tmp_2 = (int)__min2_0;
      
#line 520 
      tmp_3 = tmp_2;
    }
    
#line 520 
    rss_i = (unsigned short)tmp_3;
  }
  else {
    
#line 523 
    vmdq_m = (unsigned short)124U;
    
#line 524 
    rss_m = (unsigned short)3U;
    
#line 525 
    rss_i = (unsigned short)4U;
  }
  
#line 530 
  fcoe_i = (unsigned short)(128U - (unsigned int)((int)((unsigned short)(- ((int)vmdq_m) & (int)vmdq_m)) * (int)vmdq_i));
  
#line 534 
  vmdq_i = (unsigned short)((int)vmdq_i - (int)adapter->ring_feature[1].offset);
  
#line 537 
  adapter->ring_feature[1].indices = vmdq_i;
  
#line 538 
  adapter->ring_feature[1].mask = vmdq_m;
  
#line 541 
  adapter->ring_feature[2].indices = rss_i;
  
#line 542 
  adapter->ring_feature[2].mask = rss_m;
  
#line 544 
  adapter->num_rx_pools = (int)vmdq_i;
  
#line 545 
  adapter->num_rx_queues_per_pool = (int)rss_i;
  
#line 547 
  adapter->num_rx_queues = (int)vmdq_i * (int)rss_i;
  
#line 548 
  adapter->num_tx_queues = (int)vmdq_i * (int)rss_i;
  
#line 551 
  adapter->flags &= 4294705151U;
  
#line 559 
  if ((adapter->flags & 2097152U) != 0U) {
    struct ixgbe_ring_feature *fcoe;
    int tmp_5;
    
#line 562 
    fcoe = & adapter->ring_feature[4];
    {
      int tmp_4;
      
#line 565 
      u16 __min1_1 = fcoe_i;
      
#line 565 
      u16 __min2_1 = fcoe->limit;
      
#line 565 
      if ((int)__min1_1 < (int)__min2_1) 
#line 565 
                                         tmp_4 = (int)__min1_1; else 
                                                                  
#line 565 
                                                                  tmp_4 = (int)__min2_1;
      
#line 565 
      tmp_5 = tmp_4;
    }
    
#line 565 
    fcoe_i = (unsigned short)tmp_5;
    
#line 567 
    if ((unsigned int)vmdq_i > 1U && (unsigned int)fcoe_i != 0U) {
      
#line 569 
      fcoe->indices = fcoe_i;
      
#line 570 
      fcoe->offset = (unsigned short)((int)vmdq_i * (int)rss_i);
    }
    else {
      int tmp_8;
      int tmp_10;
      {
        unsigned int tmp_6;
        int tmp_7;
        
#line 573 
        u16 __min1_2 = (unsigned short)((int)fcoe_i + (int)rss_i);
        
#line 573 
        tmp_6 = cpumask_weight(cpu_online_mask);
        
#line 573 
        u16 __min2_2 = (unsigned short)tmp_6;
        
#line 573 
        if ((int)__min1_2 < (int)__min2_2) 
#line 573 
                                           tmp_7 = (int)__min1_2; else 
                                                                    
#line 573 
                                                                    tmp_7 = (int)__min2_2;
        
#line 573 
        tmp_8 = tmp_7;
      }
      
#line 573 
      fcoe_i = (unsigned short)tmp_8;
      
#line 576 
      if ((adapter->flags & 8U) == 0U) 
#line 577 
                                       fcoe_i = rss_i; else ;
      {
        int tmp_9;
        
#line 580 
        u16 __min1_3 = fcoe_i;
        
#line 580 
        u16 __min2_3 = fcoe->limit;
        
#line 580 
        if ((int)__min1_3 < (int)__min2_3) 
#line 580 
                                           tmp_9 = (int)__min1_3; else 
                                                                    
#line 580 
                                                                    tmp_9 = (int)__min2_3;
        
#line 580 
        tmp_10 = tmp_9;
      }
      
#line 580 
      fcoe->indices = (unsigned short)tmp_10;
      
#line 581 
      fcoe->offset = (unsigned short)((int)fcoe_i - (int)fcoe->indices);
      
#line 583 
      fcoe_i = (unsigned short)((int)fcoe_i - (int)rss_i);
    }
    
#line 587 
    adapter->num_tx_queues += (int)fcoe_i;
    
#line 588 
    adapter->num_rx_queues += (int)fcoe_i;
  }
  else ;
  
#line 592 
  __retres = (_Bool)1;
  return_label: 
#line 592 
                return __retres;
}


#line 603  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_lib.c"
static bool ixgbe_set_rss_queues(struct ixgbe_adapter *adapter)
{
  bool __retres;
  struct ixgbe_ring_feature *f;
  u16 rss_i;
  
#line 609 
  f = & adapter->ring_feature[2];
  
#line 610 
  rss_i = f->limit;
  
#line 612 
  f->indices = rss_i;
  
#line 613 
  f->mask = (unsigned short)15U;
  
#line 616 
  adapter->flags &= 4294705151U;
  
#line 623 
  if ((unsigned int)rss_i > 1U && adapter->atr_sample_rate != 0U) {
    u16 tmp;
    
#line 624 
    f = & adapter->ring_feature[3];
    
#line 626 
    tmp = f->limit;
    
#line 626 
    f->indices = tmp;
    
#line 626 
    rss_i = tmp;
    
#line 628 
    if ((adapter->flags & 524288U) == 0U) 
#line 629 
                                          adapter->flags |= 262144U; else ;
  }
  else ;
  
#line 641 
  if ((adapter->flags & 2097152U) != 0U) {
    u16 fcoe_i;
    int tmp_2;
    int tmp_4;
    int tmp_6;
    int tmp_8;
    
#line 642 
    struct net_device *dev = adapter->netdev;
    
#line 645 
    f = & adapter->ring_feature[4];
    {
      unsigned int tmp_0;
      int tmp_1;
      
#line 648 
      u16 __min1 = (unsigned short)((int)f->limit + (int)rss_i);
      
#line 648 
      tmp_0 = cpumask_weight(cpu_online_mask);
      
#line 648 
      u16 __min2 = (unsigned short)tmp_0;
      
#line 648 
      if ((int)__min1 < (int)__min2) 
#line 648 
                                     tmp_1 = (int)__min1; else 
#line 648 
                                                               tmp_1 = (int)__min2;
      
#line 648 
      tmp_2 = tmp_1;
    }
    
#line 648 
    fcoe_i = (unsigned short)tmp_2;
    {
      int tmp_3;
      
#line 649 
      u16 __min1_0 = fcoe_i;
      
#line 649 
      u16 __min2_0 = (unsigned short)dev->num_tx_queues;
      
#line 649 
      if ((int)__min1_0 < (int)__min2_0) 
#line 649 
                                         tmp_3 = (int)__min1_0; else 
                                                                  
#line 649 
                                                                  tmp_3 = (int)__min2_0;
      
#line 649 
      tmp_4 = tmp_3;
    }
    
#line 649 
    fcoe_i = (unsigned short)tmp_4;
    
#line 652 
    if ((adapter->flags & 8U) == 0U) 
#line 653 
                                     fcoe_i = rss_i; else ;
    {
      int tmp_5;
      
#line 656 
      u16 __min1_1 = fcoe_i;
      
#line 656 
      u16 __min2_1 = f->limit;
      
#line 656 
      if ((int)__min1_1 < (int)__min2_1) 
#line 656 
                                         tmp_5 = (int)__min1_1; else 
                                                                  
#line 656 
                                                                  tmp_5 = (int)__min2_1;
      
#line 656 
      tmp_6 = tmp_5;
    }
    
#line 656 
    f->indices = (unsigned short)tmp_6;
    
#line 657 
    f->offset = (unsigned short)((int)fcoe_i - (int)f->indices);
    {
      int tmp_7;
      
#line 658 
      u16 __max1 = fcoe_i;
      
#line 658 
      u16 __max2 = rss_i;
      
#line 658 
      if ((int)__max1 > (int)__max2) 
#line 658 
                                     tmp_7 = (int)__max1; else 
#line 658 
                                                               tmp_7 = (int)__max2;
      
#line 658 
      tmp_8 = tmp_7;
    }
    
#line 658 
    rss_i = (unsigned short)tmp_8;
  }
  else ;
  
#line 662 
  adapter->num_rx_queues = (int)rss_i;
  
#line 663 
  adapter->num_tx_queues = (int)rss_i;
  
#line 665 
  __retres = (_Bool)1;
  
#line 665 
  return __retres;
}


#line 679  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_lib.c"
static void ixgbe_set_num_queues(struct ixgbe_adapter *adapter)
{
  bool tmp;
  bool tmp_0;
  bool tmp_1;
  
#line 682 
  adapter->num_rx_queues = 1;
  
#line 683 
  adapter->num_tx_queues = 1;
  
#line 684 
  adapter->num_rx_pools = adapter->num_rx_queues;
  
#line 685 
  adapter->num_rx_queues_per_pool = 1;
  
#line 688 
  tmp = ixgbe_set_dcb_sriov_queues(adapter);
  
#line 688 
  if ((int)tmp != 0) 
#line 689 
                     goto return_label; else ;
  
#line 691 
  tmp_0 = ixgbe_set_dcb_queues(adapter);
  
#line 691 
  if ((int)tmp_0 != 0) 
#line 692 
                       goto return_label; else ;
  
#line 695 
  tmp_1 = ixgbe_set_sriov_queues(adapter);
  
#line 695 
  if ((int)tmp_1 != 0) 
#line 696 
                       goto return_label; else ;
  
#line 698 
  ixgbe_set_rss_queues(adapter);
  return_label: 
#line 699 
                return;
}


#line 709  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_lib.c"
static int ixgbe_acquire_msix_vectors(struct ixgbe_adapter *adapter)
{
  int __retres;
  int i;
  int vectors;
  int vector_threshold;
  int tmp_0;
  int tmp_3;
  int tmp_5;
  int tmp_8;
  
#line 711 
  struct ixgbe_hw *hw = & adapter->hw;
  {
    int tmp;
    
#line 715 
    int _max1 = adapter->num_rx_queues;
    
#line 715 
    int _max2 = adapter->num_tx_queues;
    
#line 715 
    if (_max1 > _max2) 
#line 715 
                       tmp = _max1; else 
#line 715 
                                         tmp = _max2;
    
#line 715 
    tmp_0 = tmp;
  }
  
#line 715 
  vectors = tmp_0;
  {
    unsigned int tmp_1;
    int tmp_2;
    
#line 722 
    int __min1 = vectors;
    
#line 722 
    tmp_1 = cpumask_weight(cpu_online_mask);
    
#line 722 
    int __min2 = (int)tmp_1;
    
#line 722 
    if (__min1 < __min2) 
#line 722 
                         tmp_2 = __min1; else 
#line 722 
                                              tmp_2 = __min2;
    
#line 722 
    tmp_3 = tmp_2;
  }
  
#line 722 
  vectors = tmp_3;
  
#line 725 
  vectors += 1;
  {
    int tmp_4;
    
#line 733 
    int __min1_0 = vectors;
    
#line 733 
    int __min2_0 = (int)hw->mac.max_msix_vectors;
    
#line 733 
    if (__min1_0 < __min2_0) 
#line 733 
                             tmp_4 = __min1_0; else 
#line 733 
                                                    tmp_4 = __min2_0;
    
#line 733 
    tmp_5 = tmp_4;
  }
  
#line 733 
  vectors = tmp_5;
  
#line 738 
  vector_threshold = 2;
  
#line 740 
  adapter->msix_entries = (struct msix_entry *)kcalloc_0((unsigned long)vectors,8UL,208U);
  
#line 743 
  if (adapter->msix_entries == (struct msix_entry *)0) {
    
#line 744 
    __retres = -12;
    
#line 744 
    goto return_label;
  }
  else ;
  
#line 746 
  i = 0;
  
#line 746 
  goto ldv_54825;
  ldv_54824: 
#line 747 
  ;
  
#line 747 
  (adapter->msix_entries + i)->entry = (unsigned short)i;
  
#line 746 
  i += 1;
  ldv_54825: 
#line 747 
  ;
  
#line 746 
  if (i < vectors) 
#line 748 
                   goto ldv_54824; else 
#line 751 
                                        goto ldv_54826;
  ldv_54826: 
#line 752 
  ;
  
#line 749 
  vectors = pci_enable_msix_range(adapter->pdev,adapter->msix_entries,vector_threshold,vectors);
  
#line 752 
  if (vectors < 0) {
    
#line 756 
    dev_warn((struct device const *)(& (adapter->pdev)->dev),"Failed to allocate MSI-X interrupts. Err: %d\n",vectors);
    
#line 759 
    adapter->flags &= 4294967287U;
    
#line 760 
    kfree((void const *)adapter->msix_entries);
    
#line 761 
    adapter->msix_entries = (struct msix_entry *)0;
    
#line 763 
    __retres = vectors;
    
#line 763 
    goto return_label;
  }
  else ;
  
#line 769 
  adapter->flags |= 8U;
  
#line 774 
  vectors += -1;
  {
    int tmp_7;
    
#line 775 
    int __min1_1 = vectors;
    
#line 775 
    int __min2_1 = adapter->max_q_vectors;
    
#line 775 
    if (__min1_1 < __min2_1) 
#line 775 
                             tmp_7 = __min1_1; else 
#line 775 
                                                    tmp_7 = __min2_1;
    
#line 775 
    tmp_8 = tmp_7;
  }
  
#line 775 
  adapter->num_q_vectors = tmp_8;
  
#line 777 
  __retres = 0;
  return_label: 
#line 777 
                return __retres;
}


#line 780  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_lib.c"
static void ixgbe_add_ring(struct ixgbe_ring *ring, struct ixgbe_ring_container *head)
{
  
#line 783 
  ring->next = head->ring;
  
#line 784 
  head->ring = ring;
  
#line 785 
  head->count = (u8)((int)head->count + 1);
  
#line 786 
  return;
}


#line 800  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_lib.c"
static int ixgbe_alloc_q_vector(struct ixgbe_adapter *adapter, int v_count, int v_idx, int txr_count, int txr_idx, int rxr_count, int rxr_idx)
{
  int __retres;
  struct ixgbe_q_vector *q_vector;
  struct ixgbe_ring *ring;
  int ring_count;
  int size;
  int tmp;
  
#line 807 
  int node = -1;
  
#line 808 
  int cpu = -1;
  
#line 810 
  tmp = netdev_get_num_tc(adapter->netdev);
  
#line 810 
  u8 tcs = (unsigned char)tmp;
  
#line 812 
  ring_count = txr_count + rxr_count;
  
#line 813 
  size = (int)(((unsigned long)ring_count + 1UL) * (unsigned long)4096U);
  
#line 817 
  if ((unsigned int)tcs <= 1U && (adapter->flags & 8388608U) == 0U) {
    
#line 818 
    u16 rss_i = adapter->ring_feature[2].indices;
    
#line 819 
    if ((unsigned int)rss_i > 1U && adapter->atr_sample_rate != 0U) {
      int tmp_0;
      
#line 820 
      tmp_0 = cpumask_test_cpu(v_idx,cpu_online_mask);
      
#line 820 
      if (tmp_0 != 0) {
        
#line 821 
        cpu = v_idx;
        
#line 822 
        node = __cpu_to_node(cpu);
      }
      else ;
    }
    else ;
  }
  else ;
  
#line 828 
  q_vector = (struct ixgbe_q_vector *)kzalloc_node((unsigned long)size,208U,node);
  
#line 829 
  if (q_vector == (struct ixgbe_q_vector *)0) 
#line 830 
                                              q_vector = (struct ixgbe_q_vector *)kzalloc_0((unsigned long)size,208U); else ;
  
#line 831 
  if (q_vector == (struct ixgbe_q_vector *)0) {
    
#line 832 
    __retres = -12;
    
#line 832 
    goto return_label;
  }
  else ;
  
#line 835 
  if (cpu != -1) 
#line 836 
                 cpumask_set_cpu((unsigned int)cpu,& q_vector->affinity_mask); else ;
  
#line 837 
  q_vector->numa_node = node;
  
#line 841 
  q_vector->cpu = -1;
  
#line 845 
  netif_napi_add(adapter->netdev,& q_vector->napi,& ixgbe_poll,64);
  
#line 847 
  napi_hash_add(& q_vector->napi);
  
#line 851 
  atomic_set(& q_vector->state,3);
  
#line 855 
  adapter->q_vector[v_idx] = q_vector;
  
#line 856 
  q_vector->adapter = adapter;
  
#line 857 
  q_vector->v_idx = (unsigned short)v_idx;
  
#line 860 
  q_vector->tx.work_limit = adapter->tx_work_limit;
  
#line 863 
  ring = (struct ixgbe_ring *)(& q_vector->ring);
  
#line 866 
  if (txr_count != 0 && rxr_count == 0) 
    
#line 868 
    if ((unsigned int)adapter->tx_itr_setting == 1U) 
#line 869 
                                                     q_vector->itr = (unsigned short)400U; else 
                                                                    
#line 871 
                                                                    q_vector->itr = adapter->tx_itr_setting;
  else 
    
#line 874 
    if ((unsigned int)adapter->rx_itr_setting == 1U) 
#line 875 
                                                     q_vector->itr = (unsigned short)200U; else 
                                                                    
#line 877 
                                                                    q_vector->itr = adapter->rx_itr_setting;
  
#line 880 
  goto ldv_54852;
  ldv_54851: 
#line 881 
  ;
  
#line 882 
  ring->dev = & (adapter->pdev)->dev;
  
#line 883 
  ring->netdev = adapter->netdev;
  
#line 886 
  ring->q_vector = q_vector;
  
#line 889 
  ixgbe_add_ring(ring,& q_vector->tx);
  
#line 892 
  ring->count = (unsigned short)adapter->tx_ring_count;
  
#line 893 
  if (adapter->num_rx_pools > 1) 
#line 894 
                                 ring->queue_index = (unsigned char)(txr_idx % adapter->num_rx_queues_per_pool); else 
                                                                    
#line 897 
                                                                    ring->queue_index = (unsigned char)txr_idx;
  
#line 900 
  adapter->tx_ring[txr_idx] = ring;
  
#line 903 
  txr_count -= 1;
  
#line 904 
  txr_idx += v_count;
  
#line 907 
  ring += 1;
  ldv_54852: 
#line 908 
  ;
  
#line 880 
  if (txr_count != 0) 
#line 882 
                      goto ldv_54851; else 
#line 885 
                                           goto ldv_54853;
  ldv_54853: 
#line 886 
  ;
  
#line 910 
  goto ldv_54856;
  ldv_54855: 
#line 911 
  ;
  
#line 912 
  ring->dev = & (adapter->pdev)->dev;
  
#line 913 
  ring->netdev = adapter->netdev;
  
#line 916 
  ring->q_vector = q_vector;
  
#line 919 
  ixgbe_add_ring(ring,& q_vector->rx);
  
#line 925 
  if (adapter->hw.mac.type == (unsigned int)ixgbe_mac_82599EB) 
#line 926 
                                                               set_bit(5L,(unsigned long volatile *)(& ring->state)); else ;
  
#line 929 
  if (((adapter->netdev)->features & 2147483648ULL) != 0ULL) {
    struct ixgbe_ring_feature *f;
    
#line 931 
    f = & adapter->ring_feature[4];
    
#line 932 
    if ((int)f->offset <= rxr_idx && (int)f->offset + (int)f->indices > rxr_idx) 
      
#line 934 
      set_bit(6L,(unsigned long volatile *)(& ring->state)); else ;
  }
  else ;
  
#line 939 
  ring->count = (unsigned short)adapter->rx_ring_count;
  
#line 940 
  if (adapter->num_rx_pools > 1) 
#line 941 
                                 ring->queue_index = (unsigned char)(rxr_idx % adapter->num_rx_queues_per_pool); else 
                                                                    
#line 944 
                                                                    ring->queue_index = (unsigned char)rxr_idx;
  
#line 947 
  adapter->rx_ring[rxr_idx] = ring;
  
#line 950 
  rxr_count -= 1;
  
#line 951 
  rxr_idx += v_count;
  
#line 954 
  ring += 1;
  ldv_54856: 
#line 955 
  ;
  
#line 910 
  if (rxr_count != 0) 
#line 912 
                      goto ldv_54855; else 
#line 915 
                                           goto ldv_54857;
  ldv_54857: 
#line 916 
  ;
  
#line 957 
  __retres = 0;
  return_label: 
#line 957 
                return __retres;
}


#line 988 
void __compiletime_assert_988(void);


#line 969  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_lib.c"
static void ixgbe_free_q_vector(struct ixgbe_adapter *adapter, int v_idx)
{
  struct ixgbe_ring *ring;
  
#line 971 
  struct ixgbe_q_vector *q_vector = adapter->q_vector[v_idx];
  
#line 974 
  ring = q_vector->tx.ring;
  
#line 974 
  goto ldv_54865;
  ldv_54864: 
#line 975 
  ;
  
#line 975 
  adapter->tx_ring[(int)ring->queue_index] = (struct ixgbe_ring *)0;
  
#line 974 
  ring = ring->next;
  ldv_54865: 
#line 975 
  ;
  
#line 974 
  if (ring != (struct ixgbe_ring *)0) 
#line 976 
                                      goto ldv_54864; else 
#line 979 
                                                           goto ldv_54866;
  ldv_54866: 
#line 980 
  ;
  
#line 977 
  ring = q_vector->rx.ring;
  
#line 977 
  goto ldv_54868;
  ldv_54867: 
#line 978 
  ;
  
#line 978 
  adapter->rx_ring[(int)ring->queue_index] = (struct ixgbe_ring *)0;
  
#line 977 
  ring = ring->next;
  ldv_54868: 
#line 978 
  ;
  
#line 977 
  if (ring != (struct ixgbe_ring *)0) 
#line 979 
                                      goto ldv_54867; else 
#line 982 
                                                           goto ldv_54869;
  ldv_54869: 
#line 983 
  ;
  
#line 980 
  adapter->q_vector[v_idx] = (struct ixgbe_q_vector *)0;
  
#line 981 
  napi_hash_del(& q_vector->napi);
  
#line 982 
  netif_napi_del(& q_vector->napi);
  {
    
#line 988 
    bool __cond = (_Bool)0;
    
#line 988 
    if ((int)__cond != 0) 
#line 988 
                          __compiletime_assert_988(); else ;
  }
  
#line 988 
  kfree_call_rcu(& q_vector->rcu,(void (*)(struct callback_head *))1376);
  
#line 989 
  return;
}


#line 998  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_lib.c"
static int ixgbe_alloc_q_vectors(struct ixgbe_adapter *adapter)
{
  int __retres;
  int err;
  int tmp;
  
#line 1000 
  int q_vectors = adapter->num_q_vectors;
  
#line 1001 
  int rxr_remaining = adapter->num_rx_queues;
  
#line 1002 
  int txr_remaining = adapter->num_tx_queues;
  
#line 1003 
  int rxr_idx = 0;
  
#line 1003 
  int txr_idx = 0;
  
#line 1003 
  int v_idx = 0;
  
#line 1007 
  if ((adapter->flags & 8U) == 0U) 
#line 1008 
                                   q_vectors = 1; else ;
  
#line 1010 
  if (rxr_remaining + txr_remaining <= q_vectors) {
    
#line 1011 
    goto ldv_54887;
    ldv_54886: 
#line 1012 
    ;
    
#line 1012 
    err = ixgbe_alloc_q_vector(adapter,q_vectors,v_idx,0,0,1,rxr_idx);
    
#line 1015 
    if (err != 0) 
#line 1016 
                  goto err_out; else ;
    
#line 1019 
    rxr_remaining -= 1;
    
#line 1020 
    rxr_idx += 1;
    
#line 1011 
    v_idx += 1;
    ldv_54887: 
#line 1012 
    ;
    
#line 1011 
    if (rxr_remaining != 0) 
#line 1013 
                            goto ldv_54886; else 
#line 1016 
                                                 goto ldv_54888;
    ldv_54888: 
#line 1017 
    ;
  }
  else ;
  
#line 1024 
  goto ldv_54892;
  ldv_54891: 
#line 1025 
  ;
  {
    
#line 1025 
    int rqpv = (((q_vectors - v_idx) + rxr_remaining) + -1) / (q_vectors - v_idx);
    
#line 1026 
    int tqpv = (((q_vectors - v_idx) + txr_remaining) + -1) / (q_vectors - v_idx);
    
#line 1027 
    err = ixgbe_alloc_q_vector(adapter,q_vectors,v_idx,tqpv,txr_idx,rqpv,rxr_idx);
    
#line 1031 
    if (err != 0) 
#line 1032 
                  goto err_out; else ;
    
#line 1035 
    rxr_remaining -= rqpv;
    
#line 1036 
    txr_remaining -= tqpv;
    
#line 1037 
    rxr_idx += 1;
    
#line 1038 
    txr_idx += 1;
  }
  
#line 1024 
  v_idx += 1;
  ldv_54892: 
#line 1025 
  ;
  
#line 1024 
  if (v_idx < q_vectors) 
#line 1026 
                         goto ldv_54891; else 
#line 1029 
                                              goto ldv_54893;
  ldv_54893: 
#line 1030 
  ;
  
#line 1041 
  __retres = 0;
  
#line 1041 
  goto return_label;
  err_out: 
#line 1043 
  ;
  
#line 1044 
  adapter->num_tx_queues = 0;
  
#line 1045 
  adapter->num_rx_queues = 0;
  
#line 1046 
  adapter->num_q_vectors = 0;
  
#line 1048 
  goto ldv_54895;
  ldv_54894: 
#line 1049 
  ;
  
#line 1049 
  ixgbe_free_q_vector(adapter,v_idx);
  ldv_54895: 
#line 1050 
  ;
  
#line 1048 
  tmp = v_idx;
  
#line 1048 
  v_idx -= 1;
  
#line 1048 
  ;
  
#line 1048 
  if (tmp != 0) 
#line 1050 
                goto ldv_54894; else 
#line 1053 
                                     goto ldv_54896;
  ldv_54896: 
#line 1054 
  ;
  
#line 1051 
  __retres = -12;
  return_label: 
#line 1051 
                return __retres;
}


#line 1062  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_lib.c"
static void ixgbe_free_q_vectors(struct ixgbe_adapter *adapter)
{
  int tmp;
  
#line 1064 
  int v_idx = adapter->num_q_vectors;
  
#line 1066 
  adapter->num_tx_queues = 0;
  
#line 1067 
  adapter->num_rx_queues = 0;
  
#line 1068 
  adapter->num_q_vectors = 0;
  
#line 1070 
  goto ldv_54902;
  ldv_54901: 
#line 1071 
  ;
  
#line 1071 
  ixgbe_free_q_vector(adapter,v_idx);
  ldv_54902: 
#line 1072 
  ;
  
#line 1070 
  tmp = v_idx;
  
#line 1070 
  v_idx -= 1;
  
#line 1070 
  ;
  
#line 1070 
  if (tmp != 0) 
#line 1072 
                goto ldv_54901; else 
#line 1075 
                                     goto ldv_54903;
  ldv_54903: 
#line 1076 
  ;
  
#line 1077 
  return;
}


#line 1074  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_lib.c"
static void ixgbe_reset_interrupt_capability(struct ixgbe_adapter *adapter)
{
  
#line 1076 
  if ((adapter->flags & 8U) != 0U) {
    
#line 1077 
    adapter->flags &= 4294967287U;
    
#line 1078 
    pci_disable_msix(adapter->pdev);
    
#line 1079 
    kfree((void const *)adapter->msix_entries);
    
#line 1080 
    adapter->msix_entries = (struct msix_entry *)0;
  }
  else 
    
#line 1081 
    if ((adapter->flags & 2U) != 0U) {
      
#line 1082 
      adapter->flags &= 4294967293U;
      
#line 1083 
      pci_disable_msi(adapter->pdev);
    }
    else ;
  
#line 1085 
  return;
}


#line 1094  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_lib.c"
static void ixgbe_set_interrupt_capability(struct ixgbe_adapter *adapter)
{
  int err;
  int tmp;
  int tmp_0;
  
#line 1099 
  tmp = ixgbe_acquire_msix_vectors(adapter);
  
#line 1099 
  if (tmp == 0) 
#line 1100 
                goto return_label; else ;
  
#line 1108 
  tmp_0 = netdev_get_num_tc(adapter->netdev);
  
#line 1108 
  if (tmp_0 > 1) {
    
#line 1109 
    dev_warn((struct device const *)(& (adapter->pdev)->dev),"Number of DCB TCs exceeds number of available queues. Disabling DCB support.\n");
    
#line 1110 
    netdev_reset_tc(adapter->netdev);
    
#line 1112 
    if (adapter->hw.mac.type == (unsigned int)ixgbe_mac_82598EB) 
#line 1113 
                                                                 adapter->hw.fc.requested_mode = adapter->last_lfc_mode; else ;
    
#line 1115 
    adapter->flags &= 4294963199U;
    
#line 1116 
    adapter->temp_dcb_cfg.pfc_mode_enable = (_Bool)0;
    
#line 1117 
    adapter->dcb_cfg.pfc_mode_enable = (_Bool)0;
  }
  else ;
  
#line 1120 
  adapter->dcb_cfg.num_tcs.pg_tcs = (unsigned char)1U;
  
#line 1121 
  adapter->dcb_cfg.num_tcs.pfc_tcs = (unsigned char)1U;
  
#line 1124 
  dev_warn((struct device const *)(& (adapter->pdev)->dev),"Disabling SR-IOV support\n");
  
#line 1125 
  ixgbe_disable_sriov(adapter);
  
#line 1128 
  dev_warn((struct device const *)(& (adapter->pdev)->dev),"Disabling RSS support\n");
  
#line 1129 
  adapter->ring_feature[2].limit = (unsigned short)1U;
  
#line 1134 
  ixgbe_set_num_queues(adapter);
  
#line 1135 
  adapter->num_q_vectors = 1;
  
#line 1137 
  err = pci_enable_msi_exact(adapter->pdev,1);
  
#line 1138 
  if (err != 0) 
#line 1139 
                dev_warn((struct device const *)(& (adapter->pdev)->dev),"Failed to allocate MSI interrupt, falling back to legacy. Error: %d\n",err); else 
                                                                    
#line 1142 
                                                                    adapter->flags |= 2U;
  return_label: 
#line 1143 
                return;
}


#line 1155  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_lib.c"
int ixgbe_init_interrupt_scheme(struct ixgbe_adapter *adapter)
{
  int __retres;
  int err;
  char *tmp;
  
#line 1160 
  ixgbe_set_num_queues(adapter);
  
#line 1163 
  ixgbe_set_interrupt_capability(adapter);
  
#line 1165 
  err = ixgbe_alloc_q_vectors(adapter);
  
#line 1166 
  if (err != 0) {
    
#line 1167 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"Unable to allocate memory for queue vectors\n");
    
#line 1168 
    goto err_alloc_q_vectors;
  }
  else ;
  
#line 1171 
  ixgbe_cache_ring_register(adapter);
  
#line 1173 
  ;
  
#line 1173 
  ;
  
#line 1173 
  if (adapter->num_rx_queues > 1) 
#line 1173 
                                  tmp = (char *)"Enabled"; else 
#line 1173 
                                                                tmp = (char *)"Disabled";
  
#line 1173 
  ;
  
#line 1173 
  _dev_info((struct device const *)(& (adapter->pdev)->dev),"Multiqueue %s: Rx Queue count = %u, Tx Queue count = %u\n",tmp,adapter->num_rx_queues,adapter->num_tx_queues);
  
#line 1177 
  set_bit(2L,(unsigned long volatile *)(& adapter->state));
  
#line 1179 
  __retres = 0;
  
#line 1179 
  goto return_label;
  err_alloc_q_vectors: 
#line 1181 
  ;
  
#line 1182 
  ixgbe_reset_interrupt_capability(adapter);
  
#line 1183 
  __retres = err;
  return_label: 
#line 1183 
                return __retres;
}


#line 1193  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_lib.c"
void ixgbe_clear_interrupt_scheme(struct ixgbe_adapter *adapter)
{
  
#line 1195 
  adapter->num_tx_queues = 0;
  
#line 1196 
  adapter->num_rx_queues = 0;
  
#line 1198 
  ixgbe_free_q_vectors(adapter);
  
#line 1199 
  ixgbe_reset_interrupt_capability(adapter);
  
#line 1200 
  return;
}


#line 1202  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_lib.c"
void ixgbe_tx_ctxtdesc(struct ixgbe_ring *tx_ring, u32 vlan_macip_lens, u32 fcoe_sof_eof, u32 type_tucmd, u32 mss_l4len_idx)
{
  struct ixgbe_adv_tx_context_desc *context_desc;
  
#line 1206 
  u16 i = tx_ring->next_to_use;
  
#line 1208 
  context_desc = (struct ixgbe_adv_tx_context_desc *)tx_ring->desc + (int)i;
  
#line 1210 
  i = (u16)((int)i + 1);
  
#line 1211 
  if ((int)tx_ring->count > (int)i) 
#line 1211 
                                    tx_ring->next_to_use = i; else 
#line 1211 
                                                                   tx_ring->next_to_use = (unsigned short)0U;
  
#line 1214 
  type_tucmd |= 538968064U;
  
#line 1216 
  context_desc->vlan_macip_lens = vlan_macip_lens;
  
#line 1217 
  context_desc->seqnum_seed = fcoe_sof_eof;
  
#line 1218 
  context_desc->type_tucmd_mlhl = type_tucmd;
  
#line 1219 
  context_desc->mss_l4len_idx = mss_l4len_idx;
  
#line 1220 
  return;
}


#line 486  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_lib.c.aux"
static void *kcalloc_0(size_t n, size_t size, gfp_t flags)
{
  void *tmp;
  
#line 489 
  tmp = ldv_kcalloc(n,size,flags);
  
#line 489 
  return tmp;
}


#line 493  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_lib.c.aux"
static void *kzalloc_0(size_t size, gfp_t flags)
{
  void *tmp;
  
#line 496 
  tmp = ldv_kzalloc(size,flags);
  
#line 496 
  return tmp;
}


#line 131  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/bitops.h"
__inline static void clear_bit_unlock(long nr, unsigned long volatile *addr)
{
  
#line 133 
  ldv_inline_asm();
  
#line 134 
  set_bit(nr,addr);
  
#line 135 
  return;
}


#line 248  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernel.h"
void __might_fault(char const *, int);


#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/math64.h"
__inline static u64 div_u64_rem(u64 dividend, u32 divisor, u32 *remainder)
{
  u64 __retres;
  
#line 20 
  *remainder = (unsigned int)(dividend % (unsigned long long)divisor);
  
#line 21 
  __retres = dividend / (unsigned long long)divisor;
  
#line 21 
  return __retres;
}


#line 97  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/math64.h"
__inline static u64 div_u64(u64 dividend, u32 divisor)
{
  u32 remainder;
  u64 tmp;
  
#line 100 
  tmp = div_u64_rem(dividend,divisor,& remainder);
  
#line 100 
  return tmp;
}


#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/err.h"
static long PTR_ERR(void const *ptr);


#line 41 
static bool IS_ERR(void const *ptr);


#line 50 
static bool IS_ERR_OR_NULL(void const *ptr);


#line 45  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock_api_smp.h"
void _raw_spin_unlock_irqrestore(raw_spinlock_t *, unsigned long);


#line 446  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_unlock_irqrestore(spinlock_t *lock, unsigned long flags)
{
  {
    unsigned long __dummy;
    unsigned long __dummy2;
    
  }
  
#line 448 
  _raw_spin_unlock_irqrestore(& lock->__anonCompField_spinlock_18.rlock,flags);
  
#line 449 
  return;
}


#line 478 
static void ldv_spin_unlock_irqrestore_74(spinlock_t *lock, unsigned long flags);


#line 482 
static void ldv_spin_unlock_irqrestore_76(spinlock_t *lock, unsigned long flags);


#line 486 
static void ldv_spin_unlock_irqrestore_78(spinlock_t *lock, unsigned long flags);


#line 490 
static void ldv_spin_unlock_irqrestore_80(spinlock_t *lock, unsigned long flags);


#line 494 
static void ldv_spin_unlock_irqrestore_83(spinlock_t *lock, unsigned long flags);


#line 498 
static void ldv_spin_unlock_irqrestore_85(spinlock_t *lock, unsigned long flags);


#line 502 
static void ldv_spin_unlock_irqrestore_87(spinlock_t *lock, unsigned long flags);


#line 43  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_ptp.c.aux"
void __ldv_spin_lock(spinlock_t *);


#line 70 
static void ldv___ldv_spin_lock_73(spinlock_t *ldv_func_arg1);


#line 74 
static void ldv___ldv_spin_lock_75(spinlock_t *ldv_func_arg1);


#line 78 
static void ldv___ldv_spin_lock_77(spinlock_t *ldv_func_arg1);


#line 82 
static void ldv___ldv_spin_lock_79(spinlock_t *ldv_func_arg1);


#line 86 
static void ldv___ldv_spin_lock_82(spinlock_t *ldv_func_arg1);


#line 90 
static void ldv___ldv_spin_lock_84(spinlock_t *ldv_func_arg1);


#line 94 
static void ldv___ldv_spin_lock_86(spinlock_t *ldv_func_arg1);


#line 27  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/err.h"
long ldv_is_err(void const *ptr);


#line 28 
long ldv_is_err_or_null(void const *ptr);


#line 30 
long ldv_ptr_err(void const *ptr);


#line 191  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/time.h"
__inline static s64 timespec_to_ns(struct timespec const *ts)
{
  s64 __retres;
  
#line 193 
  __retres = (long long)ts->tv_sec * 1000000000LL + (long long)ts->tv_nsec;
  
#line 193 
  return __retres;
}


#line 215 
struct timespec ns_to_timespec(s64 const);


#line 283  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ktime.h"
__inline static ktime_t ns_to_ktime(u64 ns)
{
  
#line 285 
  ktime_t const ktime_zero = {.tv64 = 0LL};
  
#line 287 
  ktime_t __constr_expr_17 = {.tv64 = (long long)((unsigned long long)ktime_zero.tv64 + ns)};
  
#line 287 
  return __constr_expr_17;
}


#line 162  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timekeeping.h"
ktime_t ktime_get_with_offset(enum tk_offsets);


#line 170  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timekeeping.h"
__inline static ktime_t ktime_get_real(void)
{
  ktime_t tmp;
  
#line 172 
  tmp = ktime_get_with_offset((enum tk_offsets)TK_OFFS_REAL);
  
#line 172 
  return tmp;
}


#line 560  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/workqueue.h"
static bool ldv_schedule_work_81(struct work_struct *work);


#line 650  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/uaccess.h"
unsigned long _copy_from_user(void *, void const *, unsigned int);


#line 652 
unsigned long _copy_to_user(void *, void const *, unsigned int);


#line 662 
void copy_from_user_overflow(void);


#line 664 
void copy_to_user_overflow(void);


#line 672 
void __copy_from_user_overflow(void);


#line 677 
void __copy_to_user_overflow(void);


#line 693  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/uaccess.h"
__inline static unsigned long copy_from_user(void *to, void const *from, unsigned long n)
{
  
#line 695 
  int sz = -1;
  
#line 697 
  __might_fault("./arch/x86/include/asm/uaccess.h",697);
  
#line 717 
  if ((long)(sz < 0) != 0L || (long)((unsigned long)sz >= n) != 0L) 
#line 718 
                                                                    n = _copy_from_user(to,from,(unsigned int)n);
  else 
    
#line 719 
    if (0 != 0) 
#line 720 
                copy_from_user_overflow(); else 
#line 722 
                                                __copy_from_user_overflow();
  
#line 724 
  return n;
}


#line 728  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/uaccess.h"
__inline static unsigned long copy_to_user(void *to, void const *from, unsigned long n)
{
  
#line 730 
  int sz = -1;
  
#line 732 
  __might_fault("./arch/x86/include/asm/uaccess.h",732);
  
#line 735 
  if ((long)(sz < 0) != 0L || (long)((unsigned long)sz >= n) != 0L) 
#line 736 
                                                                    n = _copy_to_user(to,from,(unsigned int)n);
  else 
    
#line 737 
    if (0 != 0) 
#line 738 
                copy_to_user_overflow(); else 
#line 740 
                                              __copy_to_user_overflow();
  
#line 742 
  return n;
}


#line 1000  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static struct skb_shared_hwtstamps *skb_hwtstamps(struct sk_buff *skb)
{
  struct skb_shared_hwtstamps *__retres;
  unsigned char *tmp;
  
#line 1002 
  tmp = skb_end_pointer((struct sk_buff const *)skb);
  
#line 1002 
  __retres = & ((struct skb_shared_info *)tmp)->hwtstamps;
  
#line 1002 
  return __retres;
}


#line 93  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timecounter.h"
__inline static void timecounter_adjtime(struct timecounter *tc, s64 delta)
{
  
#line 95 
  tc->nsec += (unsigned long long)delta;
  
#line 96 
  return;
}


#line 108 
void timecounter_init(struct timecounter *, struct cyclecounter const *, u64);


#line 120 
u64 timecounter_read(struct timecounter *);


#line 136 
u64 timecounter_cyc2time(struct timecounter *, cycle_t);


#line 124  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ptp_clock_kernel.h"
struct ptp_clock *ptp_clock_register(struct ptp_clock_info *, struct device *);


#line 133 
int ptp_clock_unregister(struct ptp_clock *);


#line 168 
void ptp_clock_event(struct ptp_clock *, struct ptp_clock_event *);


#line 119  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_ptp.c"
static void ixgbe_ptp_setup_sdp(struct ixgbe_adapter *adapter)
{
  u32 esdp;
  u32 tsauxc;
  u32 clktiml;
  u32 clktimh;
  u32 trgttiml;
  u32 trgttimh;
  u32 rem;
  
#line 121 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 122 
  int shift = (int)adapter->cc.shift;
  
#line 124 
  u64 ns = 0ULL;
  
#line 124 
  u64 clock_edge = 0ULL;
  
#line 126 
  if ((adapter->flags2 & 1024U) != 0U && hw->mac.type == (unsigned int)ixgbe_mac_X540) {
    u32 tmp;
    u32 tmp_0;
    
#line 130 
    ixgbe_write_reg(hw,35872U,0U);
    
#line 131 
    ixgbe_read_reg(hw,8U);
    
#line 133 
    esdp = ixgbe_read_reg(hw,32U);
    
#line 139 
    esdp |= 65792U;
    
#line 146 
    tsauxc = 76U;
    
#line 151 
    clktiml = (unsigned int)(500000000ULL << shift);
    
#line 152 
    clktimh = (unsigned int)((500000000ULL << shift) >> 32);
    
#line 159 
    tmp = ixgbe_read_reg(hw,35852U);
    
#line 159 
    clock_edge = (unsigned long long)tmp | clock_edge;
    
#line 160 
    tmp_0 = ixgbe_read_reg(hw,35856U);
    
#line 160 
    clock_edge = ((unsigned long long)tmp_0 << 32) | clock_edge;
    
#line 161 
    ns = timecounter_cyc2time(& adapter->tc,clock_edge);
    
#line 163 
    div_u64_rem(ns,500000000U,& rem);
    
#line 164 
    clock_edge = ((500000000ULL - (unsigned long long)rem) << shift) + clock_edge;
    
#line 167 
    trgttiml = (unsigned int)clock_edge;
    
#line 168 
    trgttimh = (unsigned int)(clock_edge >> 32);
    
#line 170 
    ixgbe_write_reg(hw,35892U,clktiml);
    
#line 171 
    ixgbe_write_reg(hw,35896U,clktimh);
    
#line 172 
    ixgbe_write_reg(hw,35876U,trgttiml);
    
#line 173 
    ixgbe_write_reg(hw,35880U,trgttimh);
    
#line 175 
    ixgbe_write_reg(hw,32U,esdp);
    
#line 176 
    ixgbe_write_reg(hw,35872U,tsauxc);
  }
  else 
#line 178 
       ixgbe_write_reg(hw,35872U,0U);
  
#line 181 
  ixgbe_read_reg(hw,8U);
  
#line 182 
  return;
}


#line 192  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_ptp.c"
static cycle_t ixgbe_ptp_read(struct cyclecounter const *cc)
{
  struct ixgbe_adapter *tmp;
  u32 tmp_0;
  u32 tmp_1;
  {
    
#line 195 
    struct cyclecounter const *__mptr = cc;
    
#line 195 
    tmp = (struct ixgbe_adapter *)__mptr + 18446744073709412120U;
  }
  
#line 194 
  struct ixgbe_adapter *adapter = tmp;
  
#line 196 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 197 
  u64 stamp = 0ULL;
  
#line 199 
  tmp_0 = ixgbe_read_reg(hw,35852U);
  
#line 199 
  stamp = (unsigned long long)tmp_0 | stamp;
  
#line 200 
  tmp_1 = ixgbe_read_reg(hw,35856U);
  
#line 200 
  stamp = ((unsigned long long)tmp_1 << 32) | stamp;
  
#line 202 
  return stamp;
}


#line 213  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_ptp.c"
static int ixgbe_ptp_adjfreq(struct ptp_clock_info *ptp, s32 ppb)
{
  int __retres;
  struct ixgbe_adapter *tmp;
  u64 freq;
  u32 diff;
  u32 incval;
  u32 volatile *tmp_0;
  u64 tmp_1;
  {
    
#line 216 
    struct ptp_clock_info const *__mptr = (struct ptp_clock_info const *)ptp;
    
#line 216 
    tmp = (struct ixgbe_adapter *)__mptr + 18446744073709412432U;
  }
  
#line 215 
  struct ixgbe_adapter *adapter = tmp;
  
#line 217 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 220 
  int neg_adj = 0;
  
#line 222 
  if (ppb < 0) {
    
#line 223 
    neg_adj = 1;
    
#line 224 
    ppb = - ppb;
  }
  else ;
  
#line 226 
  ldv_inline_asm();
  {
    
#line 228 
    u32 __var = 0U;
    
#line 228 
    tmp_0 = (u32 volatile *)(& adapter->base_incval);
  }
  
#line 228 
  incval = *tmp_0;
  
#line 230 
  freq = (unsigned long long)incval;
  
#line 231 
  freq = (unsigned long long)ppb * freq;
  
#line 232 
  tmp_1 = div_u64(freq,1000000000U);
  
#line 232 
  diff = (unsigned int)tmp_1;
  
#line 234 
  if (neg_adj != 0) 
#line 234 
                    incval -= diff; else 
#line 234 
                                         incval += diff;
  
#line 236 
  switch ((unsigned int)hw->mac.type) {
    case (unsigned int)3: 
#line 237 
    ;
    
#line 238 
    ixgbe_write_reg(hw,35860U,incval);
    
#line 239 
    goto ldv_54700;
    case (unsigned int)2: 
#line 240 
    ;
    
#line 241 
    ixgbe_write_reg(hw,35860U,incval | 16777216U);
    
#line 244 
    goto ldv_54700;
    default: 
#line 245 
    ;
    
#line 246 
    goto ldv_54700;
  }
  ldv_54700: 
#line 249 
  ;
  
#line 249 
  __retres = 0;
  
#line 249 
  return __retres;
}


#line 259  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_ptp.c"
static int ixgbe_ptp_adjtime(struct ptp_clock_info *ptp, s64 delta)
{
  int __retres;
  struct ixgbe_adapter *tmp;
  unsigned long flags;
  {
    
#line 262 
    struct ptp_clock_info const *__mptr = (struct ptp_clock_info const *)ptp;
    
#line 262 
    tmp = (struct ixgbe_adapter *)__mptr + 18446744073709412432U;
  }
  
#line 261 
  struct ixgbe_adapter *adapter = tmp;
  
#line 265 
  ldv___ldv_spin_lock_73(& adapter->tmreg_lock);
  
#line 266 
  timecounter_adjtime(& adapter->tc,delta);
  
#line 267 
  ldv_spin_unlock_irqrestore_74(& adapter->tmreg_lock,flags);
  
#line 269 
  ixgbe_ptp_setup_sdp(adapter);
  
#line 271 
  __retres = 0;
  
#line 271 
  return __retres;
}


#line 282  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_ptp.c"
static int ixgbe_ptp_gettime(struct ptp_clock_info *ptp, struct timespec *ts)
{
  int __retres;
  struct ixgbe_adapter *tmp;
  u64 ns;
  unsigned long flags;
  {
    
#line 285 
    struct ptp_clock_info const *__mptr = (struct ptp_clock_info const *)ptp;
    
#line 285 
    tmp = (struct ixgbe_adapter *)__mptr + 18446744073709412432U;
  }
  
#line 284 
  struct ixgbe_adapter *adapter = tmp;
  
#line 289 
  ldv___ldv_spin_lock_75(& adapter->tmreg_lock);
  
#line 290 
  ns = timecounter_read(& adapter->tc);
  
#line 291 
  ldv_spin_unlock_irqrestore_76(& adapter->tmreg_lock,flags);
  
#line 293 
  *ts = ns_to_timespec((long long)ns);
  
#line 295 
  __retres = 0;
  
#line 295 
  return __retres;
}


#line 306  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_ptp.c"
static int ixgbe_ptp_settime(struct ptp_clock_info *ptp, struct timespec const *ts)
{
  int __retres;
  struct ixgbe_adapter *tmp;
  u64 ns;
  unsigned long flags;
  s64 tmp_0;
  {
    
#line 310 
    struct ptp_clock_info const *__mptr = (struct ptp_clock_info const *)ptp;
    
#line 310 
    tmp = (struct ixgbe_adapter *)__mptr + 18446744073709412432U;
  }
  
#line 309 
  struct ixgbe_adapter *adapter = tmp;
  
#line 314 
  tmp_0 = timespec_to_ns(ts);
  
#line 314 
  ns = (unsigned long long)tmp_0;
  
#line 317 
  ldv___ldv_spin_lock_77(& adapter->tmreg_lock);
  
#line 318 
  timecounter_init(& adapter->tc,(struct cyclecounter const *)(& adapter->cc),ns);
  
#line 319 
  ldv_spin_unlock_irqrestore_78(& adapter->tmreg_lock,flags);
  
#line 321 
  ixgbe_ptp_setup_sdp(adapter);
  
#line 322 
  __retres = 0;
  
#line 322 
  return __retres;
}


#line 334  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_ptp.c"
static int ixgbe_ptp_feature_enable(struct ptp_clock_info *ptp, struct ptp_clock_request *rq, int on)
{
  int __retres;
  struct ixgbe_adapter *tmp;
  {
    
#line 338 
    struct ptp_clock_info const *__mptr = (struct ptp_clock_info const *)ptp;
    
#line 338 
    tmp = (struct ixgbe_adapter *)__mptr + 18446744073709412432U;
  }
  
#line 337 
  struct ixgbe_adapter *adapter = tmp;
  
#line 346 
  if (rq->type == (unsigned int)PTP_CLK_REQ_PPS) {
    
#line 347 
    switch ((unsigned int)adapter->hw.mac.type) {
      case (unsigned int)3: 
#line 348 
      ;
      
#line 349 
      if (on != 0) 
#line 350 
                   adapter->flags2 |= 1024U; else 
#line 352 
                                                  adapter->flags2 &= 4294966271U;
      
#line 354 
      ixgbe_ptp_setup_sdp(adapter);
      
#line 355 
      __retres = 0;
      
#line 355 
      goto return_label;
      default: 
#line 356 
      ;
      
#line 357 
      goto ldv_54739;
    }
    ldv_54739: 
#line 359 
    ;
  }
  else ;
  
#line 361 
  __retres = -524;
  return_label: 
#line 361 
                return __retres;
}


#line 372  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_ptp.c"
void ixgbe_ptp_check_pps_event(struct ixgbe_adapter *adapter, u32 eicr)
{
  struct ptp_clock_event event;
  
#line 374 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 377 
  event.type = 2;
  
#line 383 
  if (adapter->ptp_clock == (struct ptp_clock *)0) 
#line 384 
                                                   goto return_label; else ;
  
#line 386 
  switch ((unsigned int)hw->mac.type) {
    case (unsigned int)3: 
#line 387 
    ;
    
#line 388 
    ptp_clock_event(adapter->ptp_clock,& event);
    
#line 389 
    goto ldv_54747;
    default: 
#line 390 
    ;
    
#line 391 
    goto ldv_54747;
  }
  ldv_54747: 
#line 393 
  ;
  return_label: 
#line 394 
                return;
}


#line 403  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_ptp.c"
void ixgbe_ptp_overflow_check(struct ixgbe_adapter *adapter)
{
  int tmp_1;
  int tmp;
  struct timespec ts;
  {
    unsigned long __dummy;
    unsigned long volatile __dummy2;
    
#line 405 
    tmp = 1;
  }
  
#line 405 
  if (tmp != 0) {
    int tmp_0;
    {
      unsigned long __dummy_0;
      unsigned long __dummy2_0;
      
#line 405 
      tmp_0 = 1;
    }
    
#line 405 
    if (tmp_0 != 0) 
      
#line 405 
      if ((long)((adapter->last_overflow_check - jiffies) + 7500UL) < 0L) 
        
#line 405 
        tmp_1 = 1; else 
#line 405 
                        tmp_1 = 0;
    else 
#line 405 
         tmp_1 = 0;
  }
  else 
#line 405 
       tmp_1 = 0;
  
#line 405 
  bool timeout = (_Bool)(tmp_1 != 0);
  
#line 409 
  if ((int)timeout != 0) {
    
#line 410 
    ixgbe_ptp_gettime(& adapter->ptp_caps,& ts);
    
#line 411 
    adapter->last_overflow_check = jiffies;
  }
  else ;
  
#line 413 
  return;
}


#line 424  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_ptp.c"
void ixgbe_ptp_rx_hang(struct ixgbe_adapter *adapter)
{
  unsigned long rx_event;
  int tmp_0;
  int tmp_2;
  
#line 426 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 427 
  u32 tsyncrxctl = ixgbe_read_reg(hw,20872U);
  
#line 433 
  if ((tsyncrxctl & 1U) == 0U) {
    
#line 434 
    adapter->last_rx_ptp_check = jiffies;
    
#line 435 
    goto return_label;
  }
  else ;
  
#line 439 
  rx_event = adapter->last_rx_ptp_check;
  {
    unsigned long __dummy;
    unsigned long __dummy2;
    
#line 440 
    tmp_0 = 1;
  }
  
#line 440 
  if (tmp_0 != 0) {
    int tmp_1;
    {
      unsigned long __dummy_0;
      unsigned long __dummy2_0;
      
#line 440 
      tmp_1 = 1;
    }
    
#line 440 
    if (tmp_1 != 0) {
      
#line 440 
      if ((long)(rx_event - adapter->last_rx_timestamp) < 0L) 
#line 441 
                                                              rx_event = adapter->last_rx_timestamp; else ;
    }
    else ;
  }
  else ;
  {
    unsigned long __dummy_1;
    unsigned long volatile __dummy2_1;
    
#line 444 
    tmp_2 = 1;
  }
  
#line 444 
  if (tmp_2 != 0) {
    int tmp_3;
    {
      unsigned long __dummy_2;
      unsigned long __dummy2_2;
      
#line 444 
      tmp_3 = 1;
    }
    
#line 444 
    if (tmp_3 != 0) {
      
#line 444 
      if ((long)((rx_event - jiffies) + 1250UL) < 0L) {
        
#line 445 
        ixgbe_read_reg(hw,20900U);
        
#line 446 
        adapter->last_rx_ptp_check = jiffies;
        
#line 448 
        if (((int)adapter->msg_enable & 1) != 0) 
#line 448 
                                                 netdev_warn((struct net_device const *)adapter->netdev,"clearing RX Timestamp hang\n"); else ;
      }
      else ;
    }
    else ;
  }
  else ;
  return_label: 
#line 450 
                return;
}


#line 460  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_ptp.c"
static void ixgbe_ptp_tx_hwtstamp(struct ixgbe_adapter *adapter)
{
  struct skb_shared_hwtstamps shhwtstamps;
  u64 ns;
  unsigned long flags;
  u32 tmp;
  u32 tmp_0;
  
#line 462 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 464 
  u64 regval = 0ULL;
  
#line 467 
  tmp = ixgbe_read_reg(hw,35844U);
  
#line 467 
  regval = (unsigned long long)tmp | regval;
  
#line 468 
  tmp_0 = ixgbe_read_reg(hw,35848U);
  
#line 468 
  regval = ((unsigned long long)tmp_0 << 32) | regval;
  
#line 470 
  ldv___ldv_spin_lock_79(& adapter->tmreg_lock);
  
#line 471 
  ns = timecounter_cyc2time(& adapter->tc,regval);
  
#line 472 
  ldv_spin_unlock_irqrestore_80(& adapter->tmreg_lock,flags);
  
#line 474 
  memset((void *)(& shhwtstamps),0,8UL);
  
#line 475 
  shhwtstamps.hwtstamp = ns_to_ktime(ns);
  
#line 476 
  skb_tstamp_tx(adapter->ptp_tx_skb,& shhwtstamps);
  
#line 478 
  dev_kfree_skb_any(adapter->ptp_tx_skb);
  
#line 479 
  adapter->ptp_tx_skb = (struct sk_buff *)0;
  
#line 480 
  clear_bit_unlock(9L,(unsigned long volatile *)(& adapter->state));
  
#line 481 
  return;
}


#line 491  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_ptp.c"
static void ixgbe_ptp_tx_hwtstamp_work(struct work_struct *work)
{
  struct ixgbe_adapter *tmp;
  int tmp_2;
  int tmp_0;
  u32 tsynctxctl;
  {
    
#line 493 
    struct work_struct const *__mptr = (struct work_struct const *)work;
    
#line 493 
    tmp = (struct ixgbe_adapter *)__mptr + 18446744073709412328U;
  }
  
#line 493 
  struct ixgbe_adapter *adapter = tmp;
  
#line 495 
  struct ixgbe_hw *hw = & adapter->hw;
  {
    unsigned long __dummy;
    unsigned long volatile __dummy2;
    
#line 496 
    tmp_0 = 1;
  }
  
#line 496 
  if (tmp_0 != 0) {
    int tmp_1;
    {
      unsigned long __dummy_0;
      unsigned long __dummy2_0;
      
#line 496 
      tmp_1 = 1;
    }
    
#line 496 
    if (tmp_1 != 0) 
      
#line 496 
      if ((long)((adapter->ptp_tx_start - jiffies) + 3750UL) < 0L) 
#line 496 
                                                                   tmp_2 = 1; else 
                                                                    
#line 496 
                                                                    tmp_2 = 0;
    else 
#line 496 
         tmp_2 = 0;
  }
  else 
#line 496 
       tmp_2 = 0;
  
#line 496 
  bool timeout = (_Bool)(tmp_2 != 0);
  
#line 500 
  if ((int)timeout != 0) {
    
#line 501 
    dev_kfree_skb_any(adapter->ptp_tx_skb);
    
#line 502 
    adapter->ptp_tx_skb = (struct sk_buff *)0;
    
#line 503 
    clear_bit_unlock(9L,(unsigned long volatile *)(& adapter->state));
    
#line 504 
    if (((int)adapter->msg_enable & 1) != 0) 
#line 504 
                                             netdev_warn((struct net_device const *)adapter->netdev,"clearing Tx Timestamp hang\n"); else ;
    
#line 505 
    goto return_label;
  }
  else ;
  
#line 508 
  tsynctxctl = ixgbe_read_reg(hw,35840U);
  
#line 509 
  if ((tsynctxctl & 1U) != 0U) 
#line 510 
                               ixgbe_ptp_tx_hwtstamp(adapter); else 
#line 513 
                                                                    ldv_schedule_work_81(& adapter->ptp_tx_work);
  return_label: 
#line 514 
                return;
}


#line 525  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_ptp.c"
void ixgbe_ptp_rx_hwtstamp(struct ixgbe_adapter *adapter, struct sk_buff *skb)
{
  struct skb_shared_hwtstamps *shhwtstamps;
  u64 ns;
  u32 tsyncrxctl;
  unsigned long flags;
  u32 tmp;
  u32 tmp_0;
  
#line 527 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 529 
  u64 regval = 0ULL;
  
#line 533 
  tsyncrxctl = ixgbe_read_reg(hw,20872U);
  
#line 534 
  if ((tsyncrxctl & 1U) == 0U) 
#line 535 
                               goto return_label; else ;
  
#line 537 
  tmp = ixgbe_read_reg(hw,20968U);
  
#line 537 
  regval = (unsigned long long)tmp | regval;
  
#line 538 
  tmp_0 = ixgbe_read_reg(hw,20900U);
  
#line 538 
  regval = ((unsigned long long)tmp_0 << 32) | regval;
  
#line 540 
  ldv___ldv_spin_lock_82(& adapter->tmreg_lock);
  
#line 541 
  ns = timecounter_cyc2time(& adapter->tc,regval);
  
#line 542 
  ldv_spin_unlock_irqrestore_83(& adapter->tmreg_lock,flags);
  
#line 544 
  shhwtstamps = skb_hwtstamps(skb);
  
#line 545 
  shhwtstamps->hwtstamp = ns_to_ktime(ns);
  
#line 550 
  adapter->last_rx_timestamp = jiffies;
  return_label: 
#line 551 
                return;
}


#line 553  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_ptp.c"
int ixgbe_ptp_get_ts_config(struct ixgbe_adapter *adapter, struct ifreq *ifr)
{
  int tmp_0;
  unsigned long tmp;
  
#line 555 
  struct hwtstamp_config *config = & adapter->tstamp_config;
  
#line 558 
  tmp = copy_to_user(ifr->ifr_ifru.ifru_data,(void const *)config,12UL);
  
#line 558 
  if (tmp != 0UL) 
#line 558 
                  tmp_0 = -14; else 
#line 558 
                                    tmp_0 = 0;
  
#line 558 
  return tmp_0;
}


#line 586  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_ptp.c"
static int ixgbe_ptp_set_timestamp_mode(struct ixgbe_adapter *adapter, struct hwtstamp_config *config)
{
  int __retres;
  u32 regval;
  
#line 589 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 590 
  u32 tsync_tx_ctl = 16U;
  
#line 591 
  u32 tsync_rx_ctl = 16U;
  
#line 592 
  u32 tsync_rx_mtrl = 20905984U;
  
#line 593 
  bool is_l2 = (_Bool)0;
  
#line 597 
  if (config->flags != 0) {
    
#line 598 
    __retres = -22;
    
#line 598 
    goto return_label;
  }
  else ;
  
#line 600 
  switch (config->tx_type) {
    case 0: 
#line 601 
    ;
    
#line 602 
    tsync_tx_ctl = 0U;
    case 1: 
#line 603 
    ;
    
#line 604 
    goto ldv_54828;
    default: 
#line 605 
    ;
    
#line 606 
    __retres = -34;
    
#line 606 
    goto return_label;
  }
  ldv_54828: 
#line 609 
  ;
  
#line 609 
  switch (config->rx_filter) {
    case 0: 
#line 610 
    ;
    
#line 611 
    tsync_rx_ctl = 0U;
    
#line 612 
    tsync_rx_mtrl = 0U;
    
#line 613 
    goto ldv_54831;
    case 4: 
#line 614 
    ;
    
#line 615 
    tsync_rx_ctl |= 2U;
    
#line 616 
    tsync_rx_mtrl = tsync_rx_mtrl;
    
#line 617 
    goto ldv_54831;
    case 5: 
#line 618 
    ;
    
#line 619 
    tsync_rx_ctl |= 2U;
    
#line 620 
    tsync_rx_mtrl |= 1U;
    
#line 621 
    goto ldv_54831;
    case 12: 
#line 622 
    ;
    case 9: 
#line 623 
    ;
    case 6: 
#line 624 
    ;
    case 13: 
#line 625 
    ;
    case 10: 
#line 626 
    ;
    case 7: 
#line 627 
    ;
    case 14: 
#line 628 
    ;
    case 11: 
#line 629 
    ;
    case 8: 
#line 630 
    ;
    
#line 631 
    tsync_rx_ctl |= 10U;
    
#line 632 
    is_l2 = (_Bool)1;
    
#line 633 
    config->rx_filter = 12;
    
#line 634 
    goto ldv_54831;
    case 3: 
#line 635 
    ;
    case 1: 
#line 636 
    ;
    default: 
#line 637 
    ;
    
#line 644 
    config->rx_filter = 0;
    
#line 645 
    __retres = -34;
    
#line 645 
    goto return_label;
  }
  ldv_54831: 
#line 648 
  ;
  
#line 648 
  if (hw->mac.type == (unsigned int)ixgbe_mac_82598EB) {
    
#line 649 
    if ((tsync_rx_ctl | tsync_tx_ctl) != 0U) {
      
#line 650 
      __retres = -34;
      
#line 650 
      goto return_label;
    }
    else ;
    
#line 651 
    __retres = 0;
    
#line 651 
    goto return_label;
  }
  else ;
  
#line 655 
  if ((int)is_l2 != 0) 
#line 656 
                       ixgbe_write_reg(hw,20788U,3221260535U); else 
#line 661 
                                                                    ixgbe_write_reg(hw,20788U,0U);
  
#line 664 
  regval = ixgbe_read_reg(hw,35840U);
  
#line 665 
  regval &= 4294967279U;
  
#line 666 
  regval |= tsync_tx_ctl;
  
#line 667 
  ixgbe_write_reg(hw,35840U,regval);
  
#line 670 
  regval = ixgbe_read_reg(hw,20872U);
  
#line 671 
  regval &= 4294967265U;
  
#line 672 
  regval |= tsync_rx_ctl;
  
#line 673 
  ixgbe_write_reg(hw,20872U,regval);
  
#line 676 
  ixgbe_write_reg(hw,20768U,tsync_rx_mtrl);
  
#line 678 
  ixgbe_read_reg(hw,8U);
  
#line 681 
  regval = ixgbe_read_reg(hw,35848U);
  
#line 682 
  regval = ixgbe_read_reg(hw,20900U);
  
#line 684 
  __retres = 0;
  return_label: 
#line 684 
                return __retres;
}


#line 695  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_ptp.c"
int ixgbe_ptp_set_ts_config(struct ixgbe_adapter *adapter, struct ifreq *ifr)
{
  int __retres;
  struct hwtstamp_config config;
  int err;
  unsigned long tmp;
  int tmp_1;
  unsigned long tmp_0;
  
#line 700 
  tmp = copy_from_user((void *)(& config),(void const *)ifr->ifr_ifru.ifru_data,12UL);
  
#line 700 
  if (tmp != 0UL) {
    
#line 701 
    __retres = -14;
    
#line 701 
    goto return_label;
  }
  else ;
  
#line 703 
  err = ixgbe_ptp_set_timestamp_mode(adapter,& config);
  
#line 704 
  if (err != 0) {
    
#line 705 
    __retres = err;
    
#line 705 
    goto return_label;
  }
  else ;
  
#line 708 
  memcpy((void *)(& adapter->tstamp_config),(void const *)(& config),12UL);
  
#line 712 
  tmp_0 = copy_to_user(ifr->ifr_ifru.ifru_data,(void const *)(& config),12UL);
  
#line 712 
  if (tmp_0 != 0UL) 
#line 712 
                    tmp_1 = -14; else 
#line 712 
                                      tmp_1 = 0;
  
#line 712 
  __retres = tmp_1;
  return_label: 
#line 712 
                return __retres;
}


#line 725  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_ptp.c"
void ixgbe_ptp_start_cyclecounter(struct ixgbe_adapter *adapter)
{
  unsigned long flags;
  u32 volatile *tmp;
  
#line 727 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 728 
  u32 incval = 0U;
  
#line 729 
  u32 shift = 0U;
  
#line 746 
  switch (adapter->link_speed) {
    case (u32)8: 
#line 747 
    ;
    
#line 748 
    incval = 1342177280U;
    
#line 749 
    shift = 21U;
    
#line 750 
    goto ldv_54860;
    case (u32)32: 
#line 751 
    ;
    
#line 752 
    incval = 1073741824U;
    
#line 753 
    shift = 24U;
    
#line 754 
    goto ldv_54860;
    case (u32)128: 
#line 755 
    ;
    default: 
#line 756 
    ;
    
#line 757 
    incval = 1717986918U;
    
#line 758 
    shift = 28U;
    
#line 759 
    goto ldv_54860;
  }
  ldv_54860: 
#line 768 
  ;
  
#line 768 
  switch ((unsigned int)hw->mac.type) {
    case (unsigned int)3: 
#line 769 
    ;
    
#line 770 
    ixgbe_write_reg(hw,35860U,incval);
    
#line 771 
    goto ldv_54865;
    case (unsigned int)2: 
#line 772 
    ;
    
#line 773 
    incval >>= 7;
    
#line 774 
    shift += 4294967289U;
    
#line 775 
    ixgbe_write_reg(hw,35860U,incval | 16777216U);
    
#line 778 
    goto ldv_54865;
    default: 
#line 779 
    ;
    
#line 781 
    goto return_label;
  }
  ldv_54865: 
#line 785 
  ;
  {
    
#line 785 
    u32 __var = 0U;
    
#line 785 
    tmp = (u32 volatile *)(& adapter->base_incval);
  }
  
#line 785 
  *tmp = incval;
  
#line 786 
  ldv_inline_asm();
  
#line 789 
  ldv___ldv_spin_lock_84(& adapter->tmreg_lock);
  
#line 791 
  memset((void *)(& adapter->cc),0,24UL);
  
#line 792 
  adapter->cc.read = & ixgbe_ptp_read;
  
#line 793 
  adapter->cc.mask = 18446744073709551615ULL;
  
#line 794 
  adapter->cc.shift = shift;
  
#line 795 
  adapter->cc.mult = 1U;
  
#line 797 
  ldv_spin_unlock_irqrestore_85(& adapter->tmreg_lock,flags);
  return_label: 
#line 798 
                return;
}


#line 812  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_ptp.c"
void ixgbe_ptp_reset(struct ixgbe_adapter *adapter)
{
  unsigned long flags;
  ktime_t tmp;
  
#line 814 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 818 
  ixgbe_write_reg(hw,35852U,0U);
  
#line 819 
  ixgbe_write_reg(hw,35856U,0U);
  
#line 820 
  ixgbe_read_reg(hw,8U);
  
#line 823 
  ixgbe_ptp_set_timestamp_mode(adapter,& adapter->tstamp_config);
  
#line 825 
  ixgbe_ptp_start_cyclecounter(adapter);
  
#line 827 
  ldv___ldv_spin_lock_86(& adapter->tmreg_lock);
  
#line 831 
  tmp = ktime_get_real();
  
#line 830 
  ;
  
#line 830 
  ;
  
#line 830 
  timecounter_init(& adapter->tc,(struct cyclecounter const *)(& adapter->cc),(unsigned long long)tmp.tv64);
  
#line 833 
  ldv_spin_unlock_irqrestore_87(& adapter->tmreg_lock,flags);
  
#line 839 
  ixgbe_ptp_setup_sdp(adapter);
  
#line 840 
  return;
}


#line 852  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_ptp.c"
static int ixgbe_ptp_create_clock(struct ixgbe_adapter *adapter)
{
  int __retres;
  long err;
  int tmp_0;
  bool tmp;
  bool tmp_1;
  
#line 854 
  struct net_device *netdev = adapter->netdev;
  
#line 858 
  tmp = IS_ERR_OR_NULL((void const *)adapter->ptp_clock);
  
#line 858 
  if (tmp) 
#line 858 
           tmp_0 = 0; else 
#line 858 
                           tmp_0 = 1;
  
#line 858 
  if (tmp_0) {
    
#line 859 
    __retres = 0;
    
#line 859 
    goto return_label;
  }
  else ;
  
#line 861 
  switch ((unsigned int)adapter->hw.mac.type) {
    case (unsigned int)3: 
#line 862 
    ;
    
#line 863 
    snprintf((char *)(& adapter->ptp_caps.name),16UL,"%s",(char *)(& netdev->name));
    
#line 866 
    adapter->ptp_caps.owner = & __this_module;
    
#line 867 
    adapter->ptp_caps.max_adj = 250000000;
    
#line 868 
    adapter->ptp_caps.n_alarm = 0;
    
#line 869 
    adapter->ptp_caps.n_ext_ts = 0;
    
#line 870 
    adapter->ptp_caps.n_per_out = 0;
    
#line 871 
    adapter->ptp_caps.pps = 1;
    
#line 872 
    adapter->ptp_caps.adjfreq = & ixgbe_ptp_adjfreq;
    
#line 873 
    adapter->ptp_caps.adjtime = & ixgbe_ptp_adjtime;
    
#line 874 
    adapter->ptp_caps.gettime64 = & ixgbe_ptp_gettime;
    
#line 875 
    adapter->ptp_caps.settime64 = & ixgbe_ptp_settime;
    
#line 876 
    adapter->ptp_caps.enable = & ixgbe_ptp_feature_enable;
    
#line 877 
    goto ldv_54881;
    case (unsigned int)2: 
#line 878 
    ;
    
#line 879 
    snprintf((char *)(& adapter->ptp_caps.name),16UL,"%s",(char *)(& netdev->name));
    
#line 882 
    adapter->ptp_caps.owner = & __this_module;
    
#line 883 
    adapter->ptp_caps.max_adj = 250000000;
    
#line 884 
    adapter->ptp_caps.n_alarm = 0;
    
#line 885 
    adapter->ptp_caps.n_ext_ts = 0;
    
#line 886 
    adapter->ptp_caps.n_per_out = 0;
    
#line 887 
    adapter->ptp_caps.pps = 0;
    
#line 888 
    adapter->ptp_caps.adjfreq = & ixgbe_ptp_adjfreq;
    
#line 889 
    adapter->ptp_caps.adjtime = & ixgbe_ptp_adjtime;
    
#line 890 
    adapter->ptp_caps.gettime64 = & ixgbe_ptp_gettime;
    
#line 891 
    adapter->ptp_caps.settime64 = & ixgbe_ptp_settime;
    
#line 892 
    adapter->ptp_caps.enable = & ixgbe_ptp_feature_enable;
    
#line 893 
    goto ldv_54881;
    default: 
#line 894 
    ;
    
#line 895 
    adapter->ptp_clock = (struct ptp_clock *)0;
    
#line 896 
    __retres = -95;
    
#line 896 
    goto return_label;
  }
  ldv_54881: 
#line 899 
  ;
  
#line 899 
  adapter->ptp_clock = ptp_clock_register(& adapter->ptp_caps,& (adapter->pdev)->dev);
  
#line 901 
  tmp_1 = IS_ERR((void const *)adapter->ptp_clock);
  
#line 901 
  if ((int)tmp_1 != 0) {
    
#line 902 
    err = PTR_ERR((void const *)adapter->ptp_clock);
    
#line 903 
    adapter->ptp_clock = (struct ptp_clock *)0;
    
#line 904 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"ptp_clock_register failed\n");
    
#line 905 
    __retres = (int)err;
    
#line 905 
    goto return_label;
  }
  else 
#line 907 
       _dev_info((struct device const *)(& (adapter->pdev)->dev),"registered PHC device on %s\n",(char *)(& netdev->name));
  
#line 913 
  adapter->tstamp_config.rx_filter = 0;
  
#line 914 
  adapter->tstamp_config.tx_type = 0;
  
#line 916 
  __retres = 0;
  return_label: 
#line 916 
                return __retres;
}


#line 927  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_ptp.c"
void ixgbe_ptp_init(struct ixgbe_adapter *adapter)
{
  int tmp;
  
#line 933 
  spinlock_check(& adapter->tmreg_lock);
  {
    struct lock_class_key __key;
    
#line 933 
    __raw_spin_lock_init(& adapter->tmreg_lock.__anonCompField_spinlock_18.rlock,"&(&adapter->tmreg_lock)->rlock",& __key);
  }
  
#line 936 
  tmp = ixgbe_ptp_create_clock(adapter);
  
#line 936 
  if (tmp != 0) 
#line 937 
                goto return_label; else ;
  {
    struct lock_class_key __key_0;
    
#line 940 
    __init_work(& adapter->ptp_tx_work,0);
    
#line 940 
    atomic_long_t __constr_expr_37 = {.counter = WORK_STRUCT_NO_POOL_0};
    
#line 940 
    adapter->ptp_tx_work.data = __constr_expr_37;
    
#line 940 
    lockdep_init_map(& adapter->ptp_tx_work.lockdep_map,"(&adapter->ptp_tx_work)",& __key_0,0);
    
#line 940 
    INIT_LIST_HEAD(& adapter->ptp_tx_work.entry);
    
#line 940 
    adapter->ptp_tx_work.func = & ixgbe_ptp_tx_hwtstamp_work;
  }
  
#line 943 
  ixgbe_ptp_reset(adapter);
  
#line 946 
  set_bit(8L,(unsigned long volatile *)(& adapter->state));
  return_label: 
#line 948 
                return;
}


#line 958  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_ptp.c"
void ixgbe_ptp_suspend(struct ixgbe_adapter *adapter)
{
  int tmp;
  
#line 961 
  tmp = test_and_set_bit(8L,(unsigned long volatile *)(& adapter->state));
  
#line 961 
  if (tmp == 0) 
#line 962 
                goto return_label; else ;
  
#line 967 
  ixgbe_write_reg(& adapter->hw,35872U,0U);
  
#line 970 
  cancel_work_sync(& adapter->ptp_tx_work);
  
#line 971 
  if (adapter->ptp_tx_skb != (struct sk_buff *)0) {
    
#line 972 
    dev_kfree_skb_any(adapter->ptp_tx_skb);
    
#line 973 
    adapter->ptp_tx_skb = (struct sk_buff *)0;
    
#line 974 
    clear_bit_unlock(9L,(unsigned long volatile *)(& adapter->state));
  }
  else ;
  return_label: 
#line 976 
                return;
}


#line 985  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_ptp.c"
void ixgbe_ptp_stop(struct ixgbe_adapter *adapter)
{
  
#line 988 
  ixgbe_ptp_suspend(adapter);
  
#line 991 
  if (adapter->ptp_clock != (struct ptp_clock *)0) {
    
#line 992 
    ptp_clock_unregister(adapter->ptp_clock);
    
#line 993 
    adapter->ptp_clock = (struct ptp_clock *)0;
    
#line 994 
    _dev_info((struct device const *)(& (adapter->pdev)->dev),"removed PHC on %s\n",(char *)(& (adapter->netdev)->name));
  }
  else ;
  
#line 996 
  return;
}


#line 76  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_ptp.c.aux"
static long PTR_ERR(void const *ptr)
{
  long tmp;
  
#line 79 
  tmp = ldv_ptr_err(ptr);
  
#line 79 
  return tmp;
}


#line 83  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_ptp.c.aux"
static bool IS_ERR(void const *ptr)
{
  bool __retres;
  long ret;
  
#line 87 
  ret = ldv_is_err(ptr);
  
#line 88 
  __retres = (_Bool)(ret != 0L);
  
#line 88 
  return __retres;
}


#line 92  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_ptp.c.aux"
static bool IS_ERR_OR_NULL(void const *ptr)
{
  bool __retres;
  long ret;
  
#line 96 
  ret = ldv_is_err_or_null(ptr);
  
#line 97 
  __retres = (_Bool)(ret != 0L);
  
#line 97 
  return __retres;
}


#line 749  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_ptp.c.aux"
static void ldv___ldv_spin_lock_73(spinlock_t *ldv_func_arg1)
{
  
#line 753 
  ldv_spin_model_lock((char *)"tmreg_lock_of_ixgbe_adapter");
  
#line 755 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 756 
  return;
}


#line 759  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_ptp.c.aux"
static void ldv_spin_unlock_irqrestore_74(spinlock_t *lock, unsigned long flags)
{
  
#line 763 
  ldv_spin_model_unlock((char *)"tmreg_lock_of_ixgbe_adapter");
  
#line 765 
  spin_unlock_irqrestore(lock,flags);
  
#line 766 
  return;
}


#line 769  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_ptp.c.aux"
static void ldv___ldv_spin_lock_75(spinlock_t *ldv_func_arg1)
{
  
#line 773 
  ldv_spin_model_lock((char *)"tmreg_lock_of_ixgbe_adapter");
  
#line 775 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 776 
  return;
}


#line 779  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_ptp.c.aux"
static void ldv_spin_unlock_irqrestore_76(spinlock_t *lock, unsigned long flags)
{
  
#line 783 
  ldv_spin_model_unlock((char *)"tmreg_lock_of_ixgbe_adapter");
  
#line 785 
  spin_unlock_irqrestore(lock,flags);
  
#line 786 
  return;
}


#line 789  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_ptp.c.aux"
static void ldv___ldv_spin_lock_77(spinlock_t *ldv_func_arg1)
{
  
#line 793 
  ldv_spin_model_lock((char *)"tmreg_lock_of_ixgbe_adapter");
  
#line 795 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 796 
  return;
}


#line 799  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_ptp.c.aux"
static void ldv_spin_unlock_irqrestore_78(spinlock_t *lock, unsigned long flags)
{
  
#line 803 
  ldv_spin_model_unlock((char *)"tmreg_lock_of_ixgbe_adapter");
  
#line 805 
  spin_unlock_irqrestore(lock,flags);
  
#line 806 
  return;
}


#line 809  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_ptp.c.aux"
static void ldv___ldv_spin_lock_79(spinlock_t *ldv_func_arg1)
{
  
#line 813 
  ldv_spin_model_lock((char *)"tmreg_lock_of_ixgbe_adapter");
  
#line 815 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 816 
  return;
}


#line 819  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_ptp.c.aux"
static void ldv_spin_unlock_irqrestore_80(spinlock_t *lock, unsigned long flags)
{
  
#line 823 
  ldv_spin_model_unlock((char *)"tmreg_lock_of_ixgbe_adapter");
  
#line 825 
  spin_unlock_irqrestore(lock,flags);
  
#line 826 
  return;
}


#line 829  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_ptp.c.aux"
static bool ldv_schedule_work_81(struct work_struct *work)
{
  bool __retres;
  bool tmp;
  
#line 833 
  tmp = ldv_emg_schedule_work(work);
  
#line 833 
  __retres = tmp != 0;
  
#line 833 
  return __retres;
}


#line 837  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_ptp.c.aux"
static void ldv___ldv_spin_lock_82(spinlock_t *ldv_func_arg1)
{
  
#line 841 
  ldv_spin_model_lock((char *)"tmreg_lock_of_ixgbe_adapter");
  
#line 843 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 844 
  return;
}


#line 847  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_ptp.c.aux"
static void ldv_spin_unlock_irqrestore_83(spinlock_t *lock, unsigned long flags)
{
  
#line 851 
  ldv_spin_model_unlock((char *)"tmreg_lock_of_ixgbe_adapter");
  
#line 853 
  spin_unlock_irqrestore(lock,flags);
  
#line 854 
  return;
}


#line 857  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_ptp.c.aux"
static void ldv___ldv_spin_lock_84(spinlock_t *ldv_func_arg1)
{
  
#line 861 
  ldv_spin_model_lock((char *)"tmreg_lock_of_ixgbe_adapter");
  
#line 863 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 864 
  return;
}


#line 867  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_ptp.c.aux"
static void ldv_spin_unlock_irqrestore_85(spinlock_t *lock, unsigned long flags)
{
  
#line 871 
  ldv_spin_model_unlock((char *)"tmreg_lock_of_ixgbe_adapter");
  
#line 873 
  spin_unlock_irqrestore(lock,flags);
  
#line 874 
  return;
}


#line 877  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_ptp.c.aux"
static void ldv___ldv_spin_lock_86(spinlock_t *ldv_func_arg1)
{
  
#line 881 
  ldv_spin_model_lock((char *)"tmreg_lock_of_ixgbe_adapter");
  
#line 883 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 884 
  return;
}


#line 887  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_ptp.c.aux"
static void ldv_spin_unlock_irqrestore_87(spinlock_t *lock, unsigned long flags)
{
  
#line 891 
  ldv_spin_model_unlock((char *)"tmreg_lock_of_ixgbe_adapter");
  
#line 893 
  spin_unlock_irqrestore(lock,flags);
  
#line 894 
  return;
}

unsigned int __builtin_bswap32(unsigned int);


#line 57  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/swab.h"
__inline static __u32 __fswab32(__u32 val)
{
  __u32 tmp;
  
#line 60 
  tmp = __builtin_bswap32(val);
  
#line 60 
  return tmp;
}


#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x540.h"
s32 ixgbe_get_invariants_X540(struct ixgbe_hw *hw);


#line 28 
s32 ixgbe_setup_mac_link_X540(struct ixgbe_hw *hw, ixgbe_link_speed speed, bool autoneg_wait_to_complete);


#line 30 
s32 ixgbe_reset_hw_X540(struct ixgbe_hw *hw);


#line 31 
s32 ixgbe_start_hw_X540(struct ixgbe_hw *hw);


#line 32 
enum ixgbe_media_type ixgbe_get_media_type_X540(struct ixgbe_hw *hw);


#line 35 
s32 ixgbe_blink_led_start_X540(struct ixgbe_hw *hw, u32 index);


#line 36 
s32 ixgbe_blink_led_stop_X540(struct ixgbe_hw *hw, u32 index);


#line 37 
s32 ixgbe_acquire_swfw_sync_X540(struct ixgbe_hw *hw, u32 mask);


#line 38 
void ixgbe_release_swfw_sync_X540(struct ixgbe_hw *hw, u32 mask);


#line 39 
s32 ixgbe_init_eeprom_params_X540(struct ixgbe_hw *hw);


#line 80  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.h"
s32 ixgbe_disable_rx_buff_generic(struct ixgbe_hw *hw);


#line 81 
s32 ixgbe_enable_rx_buff_generic(struct ixgbe_hw *hw);


#line 83 
s32 ixgbe_fc_enable_generic(struct ixgbe_hw *hw);


#line 89 
s32 ixgbe_get_san_mac_addr_generic(struct ixgbe_hw *hw, u8 *san_mac_addr);


#line 90 
s32 ixgbe_set_vmdq_generic(struct ixgbe_hw *hw, u32 rar, u32 vmdq);


#line 91 
s32 ixgbe_set_vmdq_san_mac_generic(struct ixgbe_hw *hw, u32 vmdq);


#line 92 
s32 ixgbe_clear_vmdq_generic(struct ixgbe_hw *hw, u32 rar, u32 vmdq);


#line 93 
s32 ixgbe_init_uta_tables_generic(struct ixgbe_hw *hw);


#line 94 
s32 ixgbe_set_vfta_generic(struct ixgbe_hw *hw, u32 vlan, u32 vind, bool vlan_on);


#line 96 
s32 ixgbe_clear_vfta_generic(struct ixgbe_hw *hw);


#line 97 
s32 ixgbe_check_mac_link_generic(struct ixgbe_hw *hw, ixgbe_link_speed *speed, bool *link_up, bool link_up_wait_to_complete);


#line 100 
s32 ixgbe_get_wwn_prefix_generic(struct ixgbe_hw *hw, u16 *wwnn_prefix, u16 *wwpn_prefix);


#line 108 
void ixgbe_set_mac_anti_spoofing(struct ixgbe_hw *hw, bool enable, int pf);


#line 109 
void ixgbe_set_vlan_anti_spoofing(struct ixgbe_hw *hw, bool enable, int vf);


#line 110 
s32 ixgbe_get_device_caps_generic(struct ixgbe_hw *hw, u16 *device_caps);


#line 111 
s32 ixgbe_set_fw_drv_ver_generic(struct ixgbe_hw *hw, u8 maj, u8 min, u8 build, u8 sub);


#line 113 
s32 ixgbe_host_interface_command(struct ixgbe_hw *hw, u32 *buffer, u32 length, u32 timeout, bool return_data);


#line 115 
void ixgbe_clear_tx_pending(struct ixgbe_hw *hw);


#line 118 
void ixgbe_set_rxpba_generic(struct ixgbe_hw *hw, int num_pb, u32 headroom, int strategy);


#line 144  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_phy.h"
s32 ixgbe_get_phy_firmware_version_generic(struct ixgbe_hw *hw, u16 *firmware_version);


#line 148 
s32 ixgbe_set_copper_phy_power(struct ixgbe_hw *hw, bool on);


#line 155 
s32 ixgbe_read_i2c_byte_generic(struct ixgbe_hw *hw, u8 byte_offset, u8 dev_addr, u8 *data);


#line 157 
s32 ixgbe_write_i2c_byte_generic(struct ixgbe_hw *hw, u8 byte_offset, u8 dev_addr, u8 data);


#line 159 
s32 ixgbe_read_i2c_eeprom_generic(struct ixgbe_hw *hw, u8 byte_offset, u8 *eeprom_data);


#line 161 
s32 ixgbe_read_i2c_sff8472_generic(struct ixgbe_hw *hw, u8 byte_offset, u8 *sff8472_data);


#line 163 
s32 ixgbe_write_i2c_eeprom_generic(struct ixgbe_hw *hw, u8 byte_offset, u8 eeprom_data);


#line 165 
s32 ixgbe_read_i2c_combined_generic(struct ixgbe_hw *hw, u8 addr, u16 reg, u16 *val);


#line 167 
s32 ixgbe_write_i2c_combined_generic(struct ixgbe_hw *hw, u8 addr, u16 reg, u16 val);


#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x550.c"
static void ixgbe_setup_mux_ctl(struct ixgbe_hw *hw)
{
  
#line 34 
  u32 esdp = ixgbe_read_reg(hw,32U);
  
#line 36 
  if ((unsigned int)hw->bus.lan_id != 0U) {
    
#line 37 
    esdp &= 4294836221U;
    
#line 38 
    esdp |= 512U;
  }
  else ;
  
#line 40 
  esdp &= 4294901503U;
  
#line 41 
  ixgbe_write_reg(hw,32U,esdp);
  
#line 42 
  ixgbe_read_reg(hw,8U);
  
#line 43 
  return;
}


#line 50  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x550.c"
static s32 ixgbe_identify_phy_x550em(struct ixgbe_hw *hw)
{
  s32 __retres;
  
#line 52 
  switch ((int)hw->device_id) {
    s32 tmp;
    s32 tmp_0;
    case 5548: 
#line 53 
    ;
    
#line 55 
    hw->phy.phy_semaphore_mask = 6150U;
    
#line 56 
    ixgbe_setup_mux_ctl(hw);
    
#line 58 
    tmp = ixgbe_identify_module_generic(hw);
    
#line 58 
    __retres = tmp;
    
#line 58 
    goto return_label;
    case 5546: 
#line 59 
    ;
    
#line 60 
    hw->phy.type = ixgbe_phy_x550em_kx4;
    
#line 61 
    goto ldv_54704;
    case 5547: 
#line 62 
    ;
    
#line 63 
    hw->phy.type = ixgbe_phy_x550em_kr;
    
#line 64 
    goto ldv_54704;
    case 5550: 
#line 65 
    ;
    case 5549: 
#line 66 
    ;
    
#line 67 
    tmp_0 = ixgbe_identify_phy_generic(hw);
    
#line 67 
    __retres = tmp_0;
    
#line 67 
    goto return_label;
    default: 
#line 68 
    ;
    
#line 69 
    goto ldv_54704;
  }
  ldv_54704: 
#line 71 
  ;
  
#line 71 
  __retres = 0;
  return_label: 
#line 71 
                return __retres;
}


#line 74  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x550.c"
static s32 ixgbe_read_phy_reg_x550em(struct ixgbe_hw *hw, u32 reg_addr, u32 device_type, u16 *phy_data)
{
  s32 __retres;
  
#line 77 
  __retres = 2147483647;
  
#line 77 
  return __retres;
}


#line 80  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x550.c"
static s32 ixgbe_write_phy_reg_x550em(struct ixgbe_hw *hw, u32 reg_addr, u32 device_type, u16 phy_data)
{
  s32 __retres;
  
#line 83 
  __retres = 2147483647;
  
#line 83 
  return __retres;
}


#line 92  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x550.c"
static s32 ixgbe_init_eeprom_params_X550(struct ixgbe_hw *hw)
{
  s32 __retres;
  u32 eec;
  u16 eeprom_size;
  
#line 94 
  struct ixgbe_eeprom_info *eeprom = & hw->eeprom;
  
#line 98 
  if (eeprom->type == (unsigned int)ixgbe_eeprom_uninitialized) {
    
#line 99 
    eeprom->semaphore_delay = 10U;
    
#line 100 
    eeprom->type = ixgbe_flash;
    
#line 102 
    eec = ixgbe_read_reg(hw,*(hw->mvals));
    
#line 103 
    eeprom_size = (unsigned short)((unsigned int)((unsigned short)(eec >> 11)) & 15U);
    
#line 105 
    eeprom->word_size = (unsigned short)(1 << ((int)eeprom_size + 6));
    {
      
#line 108 
      struct _ddebug descriptor = {.modname = "ixgbe", .function = "ixgbe_init_eeprom_params_X550", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x550.c", .format = "Eeprom params: type = %d, size = %d\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))109U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 108 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 108 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"Eeprom params: type = %d, size = %d\n",(unsigned int)eeprom->type,(int)eeprom->word_size); else ;
    }
  }
  else ;
  
#line 112 
  __retres = 0;
  
#line 112 
  return __retres;
}


#line 124  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x550.c"
static s32 ixgbe_iosf_wait(struct ixgbe_hw *hw, u32 *ctrl)
{
  s32 __retres;
  u32 i;
  u32 command;
  
#line 132 
  i = 0U;
  
#line 132 
  goto ldv_54737;
  ldv_54736: 
#line 133 
  ;
  
#line 133 
  command = ixgbe_read_reg(hw,69956U);
  
#line 134 
  if (command >= (u32)0) 
#line 135 
                         goto ldv_54735; else ;
  
#line 136 
  usleep_range(10UL,20UL);
  
#line 132 
  i += 1U;
  ldv_54737: 
#line 133 
  ;
  
#line 132 
  if (i <= 99U) 
#line 134 
                goto ldv_54736; else 
#line 137 
                                     goto ldv_54735;
  ldv_54735: 
#line 138 
  ;
  
#line 138 
  if (ctrl != (u32 *)0U) 
#line 139 
                         *ctrl = command; else ;
  
#line 140 
  if (i == 100U) {
    {
      
#line 141 
      struct _ddebug descriptor = {.modname = "ixgbe", .function = "ixgbe_iosf_wait", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x550.c", .format = "IOSF wait timed out\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))141U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 141 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 141 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"IOSF wait timed out\n"); else ;
    }
    
#line 142 
    __retres = -3;
    
#line 142 
    goto return_label;
  }
  else ;
  
#line 145 
  __retres = 0;
  return_label: 
#line 145 
                return __retres;
}


#line 155  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x550.c"
static s32 ixgbe_read_iosf_sb_reg_x550(struct ixgbe_hw *hw, u32 reg_addr, u32 device_type, u32 *data)
{
  s32 __retres;
  u32 command;
  u32 error;
  s32 ret;
  
#line 158 
  u32 gssr = 6U;
  
#line 162 
  ret = (*(hw->mac.ops.acquire_swfw_sync))(hw,gssr);
  
#line 163 
  if (ret != 0) {
    
#line 164 
    __retres = ret;
    
#line 164 
    goto return_label;
  }
  else ;
  
#line 166 
  ret = ixgbe_iosf_wait(hw,(u32 *)0U);
  
#line 167 
  if (ret != 0) 
#line 168 
                goto out; else ;
  
#line 170 
  command = (device_type << 28) | reg_addr;
  
#line 174 
  ixgbe_write_reg(hw,69956U,command);
  
#line 176 
  ret = ixgbe_iosf_wait(hw,& command);
  
#line 178 
  if ((command & 786432U) != 0U) {
    
#line 179 
    error = (command >> 20) & 255U;
    {
      
#line 181 
      struct _ddebug descriptor = {.modname = "ixgbe", .function = "ixgbe_read_iosf_sb_reg_x550", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x550.c", .format = "Failed to read, error %x\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))181U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 181 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 181 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"Failed to read, error %x\n",error); else ;
    }
    
#line 182 
    __retres = -3;
    
#line 182 
    goto return_label;
  }
  else ;
  
#line 185 
  if (ret == 0) 
#line 186 
                *data = ixgbe_read_reg(hw,69960U); else ;
  out: 
#line 188 
  ;
  
#line 189 
  (*(hw->mac.ops.release_swfw_sync))(hw,gssr);
  
#line 190 
  __retres = ret;
  return_label: 
#line 190 
                return __retres;
}


#line 201  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x550.c"
static s32 ixgbe_read_ee_hostif_data_X550(struct ixgbe_hw *hw, u16 offset, u16 *data)
{
  s32 __retres;
  s32 status;
  struct ixgbe_hic_read_shadow_ram buffer;
  u32 tmp_0;
  
#line 207 
  buffer.hdr.req.cmd = (unsigned char)49U;
  
#line 208 
  buffer.hdr.req.buf_lenh = (unsigned char)0U;
  
#line 209 
  buffer.hdr.req.buf_lenl = (unsigned char)6U;
  
#line 210 
  buffer.hdr.req.checksum = (unsigned char)255U;
  
#line 213 
  if (0 != 0) 
#line 213 
              buffer.address = ((((unsigned int)((int)offset * 2) << 24) | (((unsigned int)((int)offset * 2) << 8) & 16711680U)) | (((unsigned int)((int)offset * 2) >> 8) & 65280U)) | ((unsigned int)((int)offset * 2) >> 24); else 
                                                                    
#line 213 
                                                                    buffer.address = __fswab32((unsigned int)((int)offset * 2));
  
#line 215 
  buffer.length = (unsigned short)512U;
  
#line 217 
  status = ixgbe_host_interface_command(hw,(u32 *)(& buffer),16U,500U,(_Bool)0);
  
#line 220 
  if (status != 0) {
    
#line 221 
    __retres = status;
    
#line 221 
    goto return_label;
  }
  else ;
  
#line 223 
  tmp_0 = ixgbe_read_reg(hw,88076U);
  
#line 223 
  *data = (unsigned short)tmp_0;
  
#line 226 
  __retres = 0;
  return_label: 
#line 226 
                return __retres;
}


#line 237  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x550.c"
static s32 ixgbe_read_ee_hostif_buffer_X550(struct ixgbe_hw *hw, u16 offset, u16 words, u16 *data)
{
  s32 __retres;
  struct ixgbe_hic_read_shadow_ram buffer;
  u16 words_to_read;
  s32 status;
  u32 i;
  
#line 241 
  u32 current_word = 0U;
  
#line 247 
  status = (*(hw->mac.ops.acquire_swfw_sync))(hw,1U);
  
#line 248 
  if (status != 0) {
    {
      
#line 249 
      struct _ddebug descriptor = {.modname = "ixgbe", .function = "ixgbe_read_ee_hostif_buffer_X550", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x550.c", .format = "EEPROM read buffer - semaphore failed\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))249U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 249 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 249 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"EEPROM read buffer - semaphore failed\n"); else ;
    }
    
#line 250 
    __retres = status;
    
#line 250 
    goto return_label;
  }
  else ;
  
#line 253 
  goto ldv_54781;
  ldv_54780: 
#line 254 
  ;
  
#line 254 
  if ((unsigned int)words > 512U) 
#line 255 
                                  words_to_read = (unsigned short)512U; else 
                                                                    
#line 257 
                                                                    words_to_read = words;
  
#line 259 
  buffer.hdr.req.cmd = (unsigned char)49U;
  
#line 260 
  buffer.hdr.req.buf_lenh = (unsigned char)0U;
  
#line 261 
  buffer.hdr.req.buf_lenl = (unsigned char)6U;
  
#line 262 
  buffer.hdr.req.checksum = (unsigned char)255U;
  
#line 265 
  if (0 != 0) 
#line 265 
              buffer.address = (((((unsigned int)offset + current_word) * 2U << 24) | ((((unsigned int)offset + current_word) * 2U << 8) & 16711680U)) | ((((unsigned int)offset + current_word) * 2U >> 8) & 65280U)) | (((unsigned int)offset + current_word) * 2U >> 24); else 
                                                                    
#line 265 
                                                                    buffer.address = __fswab32(((unsigned int)offset + current_word) * 2U);
  
#line 266 
  if (0 != 0) 
#line 266 
              buffer.length = (unsigned short)((unsigned int)((int)((unsigned int)words_to_read * 2U) << 8) | ((unsigned int)words_to_read * 2U >> 8)); else 
                                                                    
#line 266 
                                                                    buffer.length = __fswab16((unsigned short)((int)((unsigned int)words_to_read * 2U)));
  
#line 268 
  status = ixgbe_host_interface_command(hw,(u32 *)(& buffer),16U,500U,(_Bool)0);
  
#line 272 
  if (status != 0) {
    {
      
#line 273 
      struct _ddebug descriptor_0 = {.modname = "ixgbe", .function = "ixgbe_read_ee_hostif_buffer_X550", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x550.c", .format = "Host interface command failed\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))273U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 273 
      if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 273 
                                                            __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"Host interface command failed\n"); else ;
    }
    
#line 274 
    goto out;
  }
  else ;
  
#line 277 
  i = 0U;
  
#line 277 
  goto ldv_54778;
  ldv_54777: 
#line 278 
  ;
  {
    
#line 278 
    u32 reg = (i + 44038U) * 2U;
    
#line 280 
    u32 value = ixgbe_read_reg(hw,reg);
    
#line 282 
    *(data + current_word) = (unsigned short)value;
    
#line 283 
    current_word += 1U;
    
#line 284 
    i += 1U;
    
#line 285 
    if ((unsigned int)words_to_read > i) {
      
#line 286 
      value >>= 16;
      
#line 287 
      *(data + current_word) = (unsigned short)value;
      
#line 288 
      current_word += 1U;
    }
    else ;
  }
  
#line 277 
  i += 1U;
  ldv_54778: 
#line 278 
  ;
  
#line 277 
  if ((unsigned int)words_to_read > i) 
#line 279 
                                       goto ldv_54777; else 
#line 282 
                                                            goto ldv_54779;
  ldv_54779: 
#line 283 
  ;
  
#line 291 
  words = (unsigned short)((int)words - (int)words_to_read);
  ldv_54781: 
#line 292 
  ;
  
#line 253 
  if ((unsigned int)words != 0U) 
#line 255 
                                 goto ldv_54780; else 
#line 258 
                                                      goto ldv_54782;
  ldv_54782: 
#line 259 
  ;
  out: 
#line 294 
  ;
  
#line 295 
  (*(hw->mac.ops.release_swfw_sync))(hw,1U);
  
#line 296 
  __retres = status;
  return_label: 
#line 296 
                return __retres;
}


#line 307  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x550.c"
static s32 ixgbe_checksum_ptr_x550(struct ixgbe_hw *hw, u16 ptr, u16 size, u16 *csum, u16 *buffer, u32 buffer_size)
{
  s32 __retres;
  u16 buf[256U];
  s32 status;
  u16 length;
  u16 bufsz;
  u16 i;
  u16 start;
  u16 *local_buffer;
  
#line 316 
  bufsz = (unsigned short)256U;
  
#line 319 
  if (buffer == (u16 *)0U) {
    
#line 320 
    status = ixgbe_read_ee_hostif_buffer_X550(hw,(unsigned short)((int)ptr),(unsigned short)((int)bufsz),(u16 *)(& buf));
    
#line 321 
    if (status != 0) {
      {
        
#line 322 
        struct _ddebug descriptor = {.modname = "ixgbe", .function = "ixgbe_checksum_ptr_x550", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x550.c", .format = "Failed to read EEPROM image\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))322U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
        
#line 322 
        if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 322 
                                                            __dynamic_netdev_dbg(& descriptor,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"Failed to read EEPROM image\n"); else ;
      }
      
#line 323 
      __retres = status;
      
#line 323 
      goto return_label;
    }
    else ;
    
#line 325 
    local_buffer = (u16 *)(& buf);
  }
  else {
    
#line 327 
    if ((unsigned int)ptr > buffer_size) {
      
#line 328 
      __retres = -5;
      
#line 328 
      goto return_label;
    }
    else ;
    
#line 329 
    local_buffer = buffer + (int)ptr;
  }
  
#line 332 
  if ((unsigned int)size != 0U) {
    
#line 333 
    start = (unsigned short)0U;
    
#line 334 
    length = size;
  }
  else {
    
#line 336 
    start = (unsigned short)1U;
    
#line 337 
    length = *local_buffer;
    
#line 340 
    if ((unsigned int)length + 65535U > 65533U || (int)ptr + (int)length >= (int)hw->eeprom.word_size) {
      
#line 342 
      __retres = 0;
      
#line 342 
      goto return_label;
    }
    else ;
  }
  
#line 345 
  if (buffer != (u16 *)0U && (unsigned int)start + (unsigned int)length > buffer_size) {
    
#line 346 
    __retres = -5;
    
#line 346 
    goto return_label;
  }
  else ;
  
#line 348 
  i = start;
  
#line 348 
  goto ldv_54802;
  ldv_54801: 
#line 349 
  ;
  
#line 349 
  if ((int)i == (int)bufsz && buffer == (u16 *)0U) {
    
#line 350 
    ptr = (unsigned short)((int)ptr + (int)bufsz);
    
#line 351 
    i = (unsigned short)0U;
    
#line 352 
    if ((int)length < (int)bufsz) 
#line 353 
                                  bufsz = length; else ;
    
#line 356 
    status = ixgbe_read_ee_hostif_buffer_X550(hw,(unsigned short)((int)ptr),(unsigned short)((int)bufsz),(u16 *)(& buf));
    
#line 358 
    if (status != 0) {
      {
        
#line 359 
        struct _ddebug descriptor_0 = {.modname = "ixgbe", .function = "ixgbe_checksum_ptr_x550", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x550.c", .format = "Failed to read EEPROM image\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))359U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
        
#line 359 
        if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 359 
                                                              __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"Failed to read EEPROM image\n"); else ;
      }
      
#line 360 
      __retres = status;
      
#line 360 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 363 
  *csum = (unsigned short)((int)*csum + (int)*(local_buffer + (int)i));
  
#line 348 
  i = (u16)((int)i + 1);
  
#line 348 
  length = (u16)((int)length - 1);
  ldv_54802: 
#line 349 
  ;
  
#line 348 
  if ((unsigned int)length != 0U) 
#line 350 
                                  goto ldv_54801; else 
#line 353 
                                                       goto ldv_54803;
  ldv_54803: 
#line 354 
  ;
  
#line 365 
  __retres = 0;
  return_label: 
#line 365 
                return __retres;
}


#line 375  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x550.c"
static s32 ixgbe_calc_checksum_X550(struct ixgbe_hw *hw, u16 *buffer, u32 buffer_size)
{
  s32 __retres;
  u16 eeprom_ptrs[66U];
  u16 *local_buffer;
  s32 status;
  u16 pointer;
  u16 i;
  u16 size;
  
#line 381 
  u16 checksum = (unsigned short)0U;
  
#line 384 
  (*(hw->eeprom.ops.init_params))(hw);
  
#line 386 
  if (buffer == (u16 *)0U) {
    
#line 388 
    status = ixgbe_read_ee_hostif_buffer_X550(hw,(unsigned short)0,(unsigned short)66,(u16 *)(& eeprom_ptrs));
    
#line 391 
    if (status != 0) {
      {
        
#line 392 
        struct _ddebug descriptor = {.modname = "ixgbe", .function = "ixgbe_calc_checksum_X550", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x550.c", .format = "Failed to read EEPROM image\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))392U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
        
#line 392 
        if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 392 
                                                            __dynamic_netdev_dbg(& descriptor,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"Failed to read EEPROM image\n"); else ;
      }
      
#line 393 
      __retres = status;
      
#line 393 
      goto return_label;
    }
    else ;
    
#line 395 
    local_buffer = (u16 *)(& eeprom_ptrs);
  }
  else {
    
#line 397 
    if (buffer_size <= 64U) {
      
#line 398 
      __retres = -5;
      
#line 398 
      goto return_label;
    }
    else ;
    
#line 399 
    local_buffer = buffer;
  }
  
#line 405 
  i = (unsigned short)0U;
  
#line 405 
  goto ldv_54819;
  ldv_54818: 
#line 406 
  ;
  
#line 406 
  if ((unsigned int)i != 63U) 
#line 407 
                              checksum = (unsigned short)((int)*(local_buffer + (int)i) + (int)checksum); else ;
  
#line 405 
  i = (u16)((int)i + 1);
  ldv_54819: 
#line 406 
  ;
  
#line 405 
  if ((unsigned int)i <= 65U) 
#line 407 
                              goto ldv_54818; else 
#line 410 
                                                   goto ldv_54820;
  ldv_54820: 
#line 411 
  ;
  
#line 412 
  i = (unsigned short)2U;
  
#line 412 
  goto ldv_54828;
  ldv_54827: 
#line 413 
  ;
  
#line 413 
  if ((unsigned int)i + 65532U <= 1U) 
#line 414 
                                      goto ldv_54821; else ;
  
#line 416 
  pointer = *(local_buffer + (int)i);
  
#line 419 
  if ((unsigned int)pointer + 65535U > 65533U || (int)hw->eeprom.word_size <= (int)pointer) 
    
#line 421 
    goto ldv_54821; else ;
  
#line 423 
  switch ((int)i) {
    case 6: 
#line 424 
    ;
    
#line 425 
    size = (unsigned short)36U;
    
#line 426 
    goto ldv_54823;
    case 7: 
#line 427 
    ;
    case 8: 
#line 428 
    ;
    
#line 429 
    size = (unsigned short)8U;
    
#line 430 
    goto ldv_54823;
    default: 
#line 431 
    ;
    
#line 432 
    size = (unsigned short)0U;
    
#line 433 
    goto ldv_54823;
  }
  ldv_54823: 
#line 436 
  ;
  
#line 436 
  status = ixgbe_checksum_ptr_x550(hw,(unsigned short)((int)pointer),(unsigned short)((int)size),& checksum,buffer,buffer_size);
  
#line 438 
  if (status != 0) {
    
#line 439 
    __retres = status;
    
#line 439 
    goto return_label;
  }
  else ;
  ldv_54821: 
#line 440 
  ;
  
#line 412 
  i = (u16)((int)i + 1);
  ldv_54828: 
#line 413 
  ;
  
#line 412 
  if ((unsigned int)i <= 14U) 
#line 414 
                              goto ldv_54827; else 
#line 417 
                                                   goto ldv_54829;
  ldv_54829: 
#line 418 
  ;
  
#line 442 
  checksum = (unsigned short)(47802U - (unsigned int)checksum);
  
#line 444 
  __retres = (int)checksum;
  return_label: 
#line 444 
                return __retres;
}


#line 452  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x550.c"
static s32 ixgbe_calc_eeprom_checksum_X550(struct ixgbe_hw *hw)
{
  s32 tmp;
  
#line 454 
  tmp = ixgbe_calc_checksum_X550(hw,(u16 *)0U,0U);
  
#line 454 
  return tmp;
}


#line 464  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x550.c"
static s32 ixgbe_read_ee_hostif_X550(struct ixgbe_hw *hw, u16 offset, u16 *data)
{
  s32 tmp;
  
#line 466 
  s32 status = 0;
  
#line 468 
  tmp = (*(hw->mac.ops.acquire_swfw_sync))(hw,1U);
  
#line 468 
  if (tmp == 0) {
    
#line 469 
    status = ixgbe_read_ee_hostif_data_X550(hw,(unsigned short)((int)offset),data);
    
#line 470 
    (*(hw->mac.ops.release_swfw_sync))(hw,1U);
  }
  else 
#line 472 
       status = -16;
  
#line 475 
  return status;
}


#line 485  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x550.c"
static s32 ixgbe_validate_eeprom_checksum_X550(struct ixgbe_hw *hw, u16 *checksum_val)
{
  s32 __retres;
  s32 status;
  u16 checksum;
  
#line 490 
  u16 read_checksum = (unsigned short)0U;
  
#line 496 
  status = (*(hw->eeprom.ops.read))(hw,(unsigned short)0,& checksum);
  
#line 497 
  if (status != 0) {
    {
      
#line 498 
      struct _ddebug descriptor = {.modname = "ixgbe", .function = "ixgbe_validate_eeprom_checksum_X550", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x550.c", .format = "EEPROM read failed\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))498U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 498 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 498 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"EEPROM read failed\n"); else ;
    }
    
#line 499 
    __retres = status;
    
#line 499 
    goto return_label;
  }
  else ;
  
#line 502 
  status = (*(hw->eeprom.ops.calc_checksum))(hw);
  
#line 503 
  if (status < 0) {
    
#line 504 
    __retres = status;
    
#line 504 
    goto return_label;
  }
  else ;
  
#line 506 
  checksum = (unsigned short)status;
  
#line 508 
  status = ixgbe_read_ee_hostif_X550(hw,(unsigned short)63,& read_checksum);
  
#line 510 
  if (status != 0) {
    
#line 511 
    __retres = status;
    
#line 511 
    goto return_label;
  }
  else ;
  
#line 516 
  if ((int)read_checksum != (int)checksum) {
    
#line 517 
    status = -2;
    {
      
#line 518 
      struct _ddebug descriptor_0 = {.modname = "ixgbe", .function = "ixgbe_validate_eeprom_checksum_X550", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x550.c", .format = "Invalid EEPROM checksum", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))518U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 518 
      if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 518 
                                                            __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"Invalid EEPROM checksum"); else ;
    }
  }
  else ;
  
#line 522 
  if (checksum_val != (u16 *)0U) 
#line 523 
                                 *checksum_val = checksum; else ;
  
#line 525 
  __retres = status;
  return_label: 
#line 525 
                return __retres;
}


#line 535  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x550.c"
static s32 ixgbe_write_ee_hostif_data_X550(struct ixgbe_hw *hw, u16 offset, u16 data)
{
  s32 status;
  struct ixgbe_hic_write_shadow_ram buffer;
  
#line 541 
  buffer.hdr.req.cmd = (unsigned char)51U;
  
#line 542 
  buffer.hdr.req.buf_lenh = (unsigned char)0U;
  
#line 543 
  buffer.hdr.req.buf_lenl = (unsigned char)10U;
  
#line 544 
  buffer.hdr.req.checksum = (unsigned char)255U;
  
#line 547 
  buffer.length = (unsigned short)512U;
  
#line 548 
  buffer.data = data;
  
#line 549 
  if (0 != 0) 
#line 549 
              buffer.address = ((((unsigned int)((int)offset * 2) << 24) | (((unsigned int)((int)offset * 2) << 8) & 16711680U)) | (((unsigned int)((int)offset * 2) >> 8) & 65280U)) | ((unsigned int)((int)offset * 2) >> 24); else 
                                                                    
#line 549 
                                                                    buffer.address = __fswab32((unsigned int)((int)offset * 2));
  
#line 551 
  status = ixgbe_host_interface_command(hw,(u32 *)(& buffer),16U,500U,(_Bool)0);
  
#line 554 
  return status;
}


#line 564  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x550.c"
static s32 ixgbe_write_ee_hostif_X550(struct ixgbe_hw *hw, u16 offset, u16 data)
{
  s32 tmp;
  
#line 566 
  s32 status = 0;
  
#line 568 
  tmp = (*(hw->mac.ops.acquire_swfw_sync))(hw,1U);
  
#line 568 
  if (tmp == 0) {
    
#line 569 
    status = ixgbe_write_ee_hostif_data_X550(hw,(unsigned short)((int)offset),(unsigned short)((int)data));
    
#line 570 
    (*(hw->mac.ops.release_swfw_sync))(hw,1U);
  }
  else {
    {
      
#line 572 
      struct _ddebug descriptor = {.modname = "ixgbe", .function = "ixgbe_write_ee_hostif_X550", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x550.c", .format = "write ee hostif failed to get semaphore", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))572U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 572 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 572 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"write ee hostif failed to get semaphore"); else ;
    }
    
#line 573 
    status = -16;
  }
  
#line 576 
  return status;
}


#line 584  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x550.c"
static s32 ixgbe_update_flash_X550(struct ixgbe_hw *hw)
{
  union ixgbe_hic_hdr2 buffer;
  
#line 586 
  s32 status = 0;
  
#line 589 
  buffer.req.cmd = (unsigned char)54U;
  
#line 590 
  buffer.req.buf_lenh = (unsigned char)0U;
  
#line 591 
  buffer.req.buf_lenl = (unsigned char)0U;
  
#line 592 
  buffer.req.checksum = (unsigned char)255U;
  
#line 594 
  status = ixgbe_host_interface_command(hw,(u32 *)(& buffer),4U,500U,(_Bool)0);
  
#line 597 
  return status;
}


#line 604  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x550.c"
static void ixgbe_disable_rx_x550(struct ixgbe_hw *hw)
{
  u32 rxctrl;
  u32 pfdtxgswc;
  s32 status;
  struct ixgbe_hic_disable_rxen fw_cmd;
  
#line 610 
  rxctrl = ixgbe_read_reg(hw,12288U);
  
#line 611 
  if ((rxctrl & 1U) != 0U) {
    
#line 612 
    pfdtxgswc = ixgbe_read_reg(hw,33312U);
    
#line 613 
    if ((pfdtxgswc & 1U) != 0U) {
      
#line 614 
      pfdtxgswc &= 4294967294U;
      
#line 615 
      ixgbe_write_reg(hw,33312U,pfdtxgswc);
      
#line 616 
      hw->mac.set_lben = (_Bool)1;
    }
    else 
#line 618 
         hw->mac.set_lben = (_Bool)0;
    
#line 621 
    fw_cmd.hdr.cmd = (unsigned char)222U;
    
#line 622 
    fw_cmd.hdr.buf_len = (unsigned char)1U;
    
#line 623 
    fw_cmd.hdr.checksum = (unsigned char)255U;
    
#line 624 
    fw_cmd.port_number = (unsigned char)hw->bus.lan_id;
    
#line 626 
    status = ixgbe_host_interface_command(hw,(u32 *)(& fw_cmd),8U,500U,(_Bool)1);
    
#line 631 
    if (status != 0) {
      
#line 632 
      rxctrl = ixgbe_read_reg(hw,12288U);
      
#line 633 
      if ((rxctrl & 1U) != 0U) {
        
#line 634 
        rxctrl &= 4294967294U;
        
#line 635 
        ixgbe_write_reg(hw,12288U,rxctrl);
      }
      else ;
    }
    else ;
  }
  else ;
  
#line 639 
  return;
}


#line 648  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x550.c"
static s32 ixgbe_update_eeprom_checksum_X550(struct ixgbe_hw *hw)
{
  s32 __retres;
  s32 status;
  
#line 651 
  u16 checksum = (unsigned short)0U;
  
#line 657 
  status = ixgbe_read_ee_hostif_X550(hw,(unsigned short)0,& checksum);
  
#line 658 
  if (status != 0) {
    {
      
#line 659 
      struct _ddebug descriptor = {.modname = "ixgbe", .function = "ixgbe_update_eeprom_checksum_X550", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x550.c", .format = "EEPROM read failed\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))659U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 659 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 659 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"EEPROM read failed\n"); else ;
    }
    
#line 660 
    __retres = status;
    
#line 660 
    goto return_label;
  }
  else ;
  
#line 663 
  status = ixgbe_calc_eeprom_checksum_X550(hw);
  
#line 664 
  if (status < 0) {
    
#line 665 
    __retres = status;
    
#line 665 
    goto return_label;
  }
  else ;
  
#line 667 
  checksum = (unsigned short)status;
  
#line 669 
  status = ixgbe_write_ee_hostif_X550(hw,(unsigned short)63,(unsigned short)((int)checksum));
  
#line 671 
  if (status != 0) {
    
#line 672 
    __retres = status;
    
#line 672 
    goto return_label;
  }
  else ;
  
#line 674 
  status = ixgbe_update_flash_X550(hw);
  
#line 676 
  __retres = status;
  return_label: 
#line 676 
                return __retres;
}


#line 688  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x550.c"
static s32 ixgbe_write_ee_hostif_buffer_X550(struct ixgbe_hw *hw, u16 offset, u16 words, u16 *data)
{
  s32 __retres;
  
#line 692 
  s32 status = 0;
  
#line 693 
  u32 i = 0U;
  
#line 696 
  status = (*(hw->mac.ops.acquire_swfw_sync))(hw,1U);
  
#line 697 
  if (status != 0) {
    {
      
#line 698 
      struct _ddebug descriptor = {.modname = "ixgbe", .function = "ixgbe_write_ee_hostif_buffer_X550", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x550.c", .format = "EEPROM write buffer - semaphore failed\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))698U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 698 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 698 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"EEPROM write buffer - semaphore failed\n"); else ;
    }
    
#line 699 
    __retres = status;
    
#line 699 
    goto return_label;
  }
  else ;
  
#line 702 
  i = 0U;
  
#line 702 
  goto ldv_54896;
  ldv_54895: 
#line 703 
  ;
  
#line 703 
  status = ixgbe_write_ee_hostif_data_X550(hw,(unsigned short)((int)((unsigned short)i) + (int)offset),(unsigned short)((int)*(data + i)));
  
#line 705 
  if (status != 0) {
    {
      
#line 706 
      struct _ddebug descriptor_0 = {.modname = "ixgbe", .function = "ixgbe_write_ee_hostif_buffer_X550", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x550.c", .format = "Eeprom buffered write failed\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))706U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 706 
      if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 706 
                                                            __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"Eeprom buffered write failed\n"); else ;
    }
    
#line 707 
    goto ldv_54894;
  }
  else ;
  
#line 702 
  i += 1U;
  ldv_54896: 
#line 703 
  ;
  
#line 702 
  if ((unsigned int)words > i) 
#line 704 
                               goto ldv_54895; else 
#line 707 
                                                    goto ldv_54894;
  ldv_54894: 
#line 708 
  ;
  
#line 711 
  (*(hw->mac.ops.release_swfw_sync))(hw,1U);
  
#line 713 
  __retres = status;
  return_label: 
#line 713 
                return __retres;
}


#line 724  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x550.c"
static s32 ixgbe_write_iosf_sb_reg_x550(struct ixgbe_hw *hw, u32 reg_addr, u32 device_type, u32 data)
{
  s32 __retres;
  u32 command;
  u32 error;
  s32 ret;
  
#line 727 
  u32 gssr = 6U;
  
#line 731 
  ret = (*(hw->mac.ops.acquire_swfw_sync))(hw,gssr);
  
#line 732 
  if (ret != 0) {
    
#line 733 
    __retres = ret;
    
#line 733 
    goto return_label;
  }
  else ;
  
#line 735 
  ret = ixgbe_iosf_wait(hw,(u32 *)0U);
  
#line 736 
  if (ret != 0) 
#line 737 
                goto out; else ;
  
#line 739 
  command = (device_type << 28) | reg_addr;
  
#line 743 
  ixgbe_write_reg(hw,69956U,command);
  
#line 746 
  ixgbe_write_reg(hw,69960U,data);
  
#line 748 
  ret = ixgbe_iosf_wait(hw,& command);
  
#line 750 
  if ((command & 786432U) != 0U) {
    
#line 751 
    error = (command >> 20) & 255U;
    {
      
#line 753 
      struct _ddebug descriptor = {.modname = "ixgbe", .function = "ixgbe_write_iosf_sb_reg_x550", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x550.c", .format = "Failed to write, error %x\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))753U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 753 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 753 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"Failed to write, error %x\n",error); else ;
    }
    
#line 754 
    __retres = -3;
    
#line 754 
    goto return_label;
  }
  else ;
  out: 
#line 757 
  ;
  
#line 758 
  (*(hw->mac.ops.release_swfw_sync))(hw,gssr);
  
#line 759 
  __retres = ret;
  return_label: 
#line 759 
                return __retres;
}


#line 769  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x550.c"
static s32 ixgbe_setup_ixfi_x550em(struct ixgbe_hw *hw, ixgbe_link_speed *speed)
{
  s32 __retres;
  s32 status;
  u32 reg_val;
  int tmp;
  int tmp_0;
  int tmp_1;
  int tmp_2;
  int tmp_3;
  int tmp_4;
  int tmp_5;
  int tmp_6;
  int tmp_7;
  int tmp_8;
  int tmp_9;
  int tmp_10;
  
#line 776 
  if ((unsigned int)hw->bus.lan_id == 0U) 
#line 776 
                                          tmp = 16908; else 
#line 776 
                                                            tmp = 33292;
  
#line 775 
  ;
  
#line 775 
  status = ixgbe_read_iosf_sb_reg_x550(hw,(unsigned int)tmp,0U,& reg_val);
  
#line 778 
  if (status != 0) {
    
#line 779 
    __retres = status;
    
#line 779 
    goto return_label;
  }
  else ;
  
#line 781 
  reg_val &= 3758096383U;
  
#line 782 
  reg_val &= 4294965503U;
  
#line 785 
  switch (*speed) {
    case (ixgbe_link_speed)128: 
#line 786 
    ;
    
#line 787 
    reg_val |= 1024U;
    
#line 788 
    goto ldv_54917;
    case (ixgbe_link_speed)32: 
#line 789 
    ;
    
#line 790 
    reg_val |= 512U;
    
#line 791 
    goto ldv_54917;
    default: 
#line 792 
    ;
    
#line 794 
    __retres = -8;
    
#line 794 
    goto return_label;
  }
  ldv_54917: 
#line 797 
  ;
  
#line 797 
  ;
  
#line 798 
  if ((unsigned int)hw->bus.lan_id == 0U) 
#line 798 
                                          tmp_0 = 16908; else 
#line 798 
                                                              tmp_0 = 33292;
  
#line 797 
  ;
  
#line 797 
  status = ixgbe_write_iosf_sb_reg_x550(hw,(unsigned int)tmp_0,0U,reg_val);
  
#line 800 
  if (status != 0) {
    
#line 801 
    __retres = status;
    
#line 801 
    goto return_label;
  }
  else ;
  
#line 805 
  if ((unsigned int)hw->bus.lan_id == 0U) 
#line 805 
                                          tmp_1 = 19200; else 
#line 805 
                                                              tmp_1 = 35584;
  
#line 804 
  ;
  
#line 804 
  status = ixgbe_read_iosf_sb_reg_x550(hw,(unsigned int)tmp_1,0U,& reg_val);
  
#line 807 
  if (status != 0) {
    
#line 808 
    __retres = status;
    
#line 808 
    goto return_label;
  }
  else ;
  
#line 810 
  reg_val |= 16U;
  
#line 811 
  ;
  
#line 812 
  if ((unsigned int)hw->bus.lan_id == 0U) 
#line 812 
                                          tmp_2 = 19200; else 
#line 812 
                                                              tmp_2 = 35584;
  
#line 811 
  ;
  
#line 811 
  status = ixgbe_write_iosf_sb_reg_x550(hw,(unsigned int)tmp_2,0U,reg_val);
  
#line 814 
  if (status != 0) {
    
#line 815 
    __retres = status;
    
#line 815 
    goto return_label;
  }
  else ;
  
#line 819 
  if ((unsigned int)hw->bus.lan_id == 0U) 
#line 819 
                                          tmp_3 = 17972; else 
#line 819 
                                                              tmp_3 = 34356;
  
#line 818 
  ;
  
#line 818 
  status = ixgbe_read_iosf_sb_reg_x550(hw,(unsigned int)tmp_3,0U,& reg_val);
  
#line 821 
  if (status != 0) {
    
#line 822 
    __retres = status;
    
#line 822 
    goto return_label;
  }
  else ;
  
#line 824 
  reg_val &= 4294967231U;
  
#line 825 
  reg_val &= 4294934527U;
  
#line 826 
  reg_val &= 4294901759U;
  
#line 827 
  ;
  
#line 828 
  if ((unsigned int)hw->bus.lan_id == 0U) 
#line 828 
                                          tmp_4 = 17972; else 
#line 828 
                                                              tmp_4 = 34356;
  
#line 827 
  ;
  
#line 827 
  status = ixgbe_write_iosf_sb_reg_x550(hw,(unsigned int)tmp_4,0U,reg_val);
  
#line 830 
  if (status != 0) {
    
#line 831 
    __retres = status;
    
#line 831 
    goto return_label;
  }
  else ;
  
#line 834 
  if ((unsigned int)hw->bus.lan_id == 0U) 
#line 834 
                                          tmp_5 = 17976; else 
#line 834 
                                                              tmp_5 = 34360;
  
#line 833 
  ;
  
#line 833 
  status = ixgbe_read_iosf_sb_reg_x550(hw,(unsigned int)tmp_5,0U,& reg_val);
  
#line 836 
  if (status != 0) {
    
#line 837 
    __retres = status;
    
#line 837 
    goto return_label;
  }
  else ;
  
#line 839 
  reg_val &= 4294967231U;
  
#line 840 
  reg_val &= 4294934527U;
  
#line 841 
  reg_val &= 4294901759U;
  
#line 842 
  ;
  
#line 843 
  if ((unsigned int)hw->bus.lan_id == 0U) 
#line 843 
                                          tmp_6 = 17976; else 
#line 843 
                                                              tmp_6 = 34360;
  
#line 842 
  ;
  
#line 842 
  status = ixgbe_write_iosf_sb_reg_x550(hw,(unsigned int)tmp_6,0U,reg_val);
  
#line 845 
  if (status != 0) {
    
#line 846 
    __retres = status;
    
#line 846 
    goto return_label;
  }
  else ;
  
#line 850 
  if ((unsigned int)hw->bus.lan_id == 0U) 
#line 850 
                                          tmp_7 = 21792; else 
#line 850 
                                                              tmp_7 = 38176;
  
#line 849 
  ;
  
#line 849 
  status = ixgbe_read_iosf_sb_reg_x550(hw,(unsigned int)tmp_7,0U,& reg_val);
  
#line 852 
  if (status != 0) {
    
#line 853 
    __retres = status;
    
#line 853 
    goto return_label;
  }
  else ;
  
#line 855 
  reg_val |= 2147483648U;
  
#line 856 
  reg_val |= 8U;
  
#line 857 
  reg_val |= 4U;
  
#line 858 
  reg_val |= 2U;
  
#line 859 
  ;
  
#line 860 
  if ((unsigned int)hw->bus.lan_id == 0U) 
#line 860 
                                          tmp_8 = 21792; else 
#line 860 
                                                              tmp_8 = 38176;
  
#line 859 
  ;
  
#line 859 
  status = ixgbe_write_iosf_sb_reg_x550(hw,(unsigned int)tmp_8,0U,reg_val);
  
#line 862 
  if (status != 0) {
    
#line 863 
    __retres = status;
    
#line 863 
    goto return_label;
  }
  else ;
  
#line 867 
  if ((unsigned int)hw->bus.lan_id == 0U) 
#line 867 
                                          tmp_9 = 16908; else 
#line 867 
                                                              tmp_9 = 33292;
  
#line 866 
  ;
  
#line 866 
  status = ixgbe_read_iosf_sb_reg_x550(hw,(unsigned int)tmp_9,0U,& reg_val);
  
#line 869 
  if (status != 0) {
    
#line 870 
    __retres = status;
    
#line 870 
    goto return_label;
  }
  else ;
  
#line 872 
  reg_val |= 2147483648U;
  
#line 873 
  ;
  
#line 874 
  if ((unsigned int)hw->bus.lan_id == 0U) 
#line 874 
                                          tmp_10 = 16908; else 
#line 874 
                                                               tmp_10 = 33292;
  
#line 873 
  ;
  
#line 873 
  status = ixgbe_write_iosf_sb_reg_x550(hw,(unsigned int)tmp_10,0U,reg_val);
  
#line 877 
  __retres = status;
  return_label: 
#line 877 
                return __retres;
}


#line 891  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x550.c"
static s32 ixgbe_setup_mac_link_t_X550em(struct ixgbe_hw *hw, ixgbe_link_speed speed, bool autoneg_wait)
{
  s32 __retres;
  s32 status;
  ixgbe_link_speed force_speed;
  s32 tmp;
  
#line 901 
  if ((speed & 128U) != 0U) 
#line 902 
                            force_speed = 128U; else 
#line 904 
                                                     force_speed = 32U;
  
#line 907 
  if (((unsigned long)hw->phy.nw_mng_if_sel & 16777216UL) == 0UL) {
    
#line 908 
    status = ixgbe_setup_ixfi_x550em(hw,& force_speed);
    
#line 910 
    if (status != 0) {
      
#line 911 
      __retres = status;
      
#line 911 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 914 
  tmp = (*(hw->phy.ops.setup_link_speed))(hw,speed,(_Bool)((bool)((int)autoneg_wait) != 0));
  
#line 914 
  __retres = tmp;
  return_label: 
#line 914 
                return __retres;
}


#line 925  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x550.c"
static s32 ixgbe_check_link_t_X550em(struct ixgbe_hw *hw, ixgbe_link_speed *speed, bool *link_up, bool link_up_wait_to_complete)
{
  s32 __retres;
  u32 status;
  u16 autoneg_status;
  enum ixgbe_media_type tmp;
  s32 tmp_0;
  s32 tmp_1;
  
#line 933 
  tmp = (*(hw->mac.ops.get_media_type))(hw);
  
#line 933 
  if (tmp != (unsigned int)ixgbe_media_type_copper) {
    
#line 934 
    __retres = -4;
    
#line 934 
    goto return_label;
  }
  else ;
  
#line 936 
  tmp_0 = ixgbe_check_mac_link_generic(hw,speed,link_up,(_Bool)((bool)((int)link_up_wait_to_complete) != 0));
  
#line 936 
  status = (unsigned int)tmp_0;
  
#line 940 
  if (status != 0U || ! *link_up) {
    
#line 941 
    __retres = (int)status;
    
#line 941 
    goto return_label;
  }
  else ;
  
#line 946 
  tmp_1 = (*(hw->phy.ops.read_reg))(hw,1U,7U,& autoneg_status);
  
#line 946 
  status = (unsigned int)tmp_1;
  
#line 949 
  if (status != 0U) {
    
#line 950 
    __retres = (int)status;
    
#line 950 
    goto return_label;
  }
  else ;
  
#line 953 
  if (((int)autoneg_status & 4) == 0) 
#line 954 
                                      *link_up = (_Bool)0; else ;
  
#line 956 
  __retres = 0;
  return_label: 
#line 956 
                return __retres;
}


#line 962  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x550.c"
static void ixgbe_init_mac_link_ops_X550em(struct ixgbe_hw *hw)
{
  enum ixgbe_media_type tmp;
  
#line 964 
  struct ixgbe_mac_info *mac = & hw->mac;
  
#line 966 
  tmp = (*(mac->ops.get_media_type))(hw);
  
#line 966 
  switch ((unsigned int)tmp) {
    case (unsigned int)1: 
#line 967 
    ;
    
#line 971 
    mac->ops.disable_tx_laser = (void (*)(struct ixgbe_hw *))0;
    
#line 972 
    mac->ops.enable_tx_laser = (void (*)(struct ixgbe_hw *))0;
    
#line 973 
    mac->ops.flap_tx_laser = (void (*)(struct ixgbe_hw *))0;
    
#line 974 
    goto ldv_54940;
    case (unsigned int)4: 
#line 975 
    ;
    
#line 976 
    mac->ops.setup_link = & ixgbe_setup_mac_link_t_X550em;
    
#line 977 
    mac->ops.check_link = & ixgbe_check_link_t_X550em;
    
#line 978 
    goto ldv_54940;
    default: 
#line 979 
    ;
    
#line 980 
    goto ldv_54940;
  }
  ldv_54940: 
#line 982 
  ;
  
#line 983 
  return;
}


#line 987  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x550.c"
static s32 ixgbe_setup_sfp_modules_X550em(struct ixgbe_hw *hw)
{
  s32 __retres;
  bool setup_linear;
  u16 reg_slice;
  u16 edc_mode;
  s32 ret_val;
  
#line 993 
  switch ((unsigned int)hw->phy.sfp_type) {
    case (unsigned int)65535: 
#line 994 
    ;
    
#line 995 
    __retres = 0;
    
#line 995 
    goto return_label;
    case (unsigned int)65534: 
#line 996 
    ;
    
#line 997 
    __retres = -20;
    
#line 997 
    goto return_label;
    case (unsigned int)3: 
#line 998 
    ;
    case (unsigned int)4: 
#line 999 
    ;
    
#line 1000 
    setup_linear = (_Bool)1;
    
#line 1001 
    goto ldv_54954;
    case (unsigned int)5: 
#line 1002 
    ;
    case (unsigned int)6: 
#line 1003 
    ;
    case (unsigned int)7: 
#line 1004 
    ;
    case (unsigned int)8: 
#line 1005 
    ;
    case (unsigned int)11: 
#line 1006 
    ;
    case (unsigned int)12: 
#line 1007 
    ;
    
#line 1008 
    setup_linear = (_Bool)0;
    
#line 1009 
    goto ldv_54954;
    default: 
#line 1010 
    ;
    
#line 1011 
    __retres = -19;
    
#line 1011 
    goto return_label;
  }
  ldv_54954: 
#line 1014 
  ;
  
#line 1014 
  ixgbe_init_mac_link_ops_X550em(hw);
  
#line 1015 
  hw->phy.ops.reset = (s32 (*)(struct ixgbe_hw *))0;
  
#line 1020 
  reg_slice = (unsigned short)((unsigned int)((int)hw->bus.lan_id << 12U) + 4784U);
  
#line 1022 
  if ((int)setup_linear != 0) 
#line 1023 
                              edc_mode = (unsigned short)5U; else 
#line 1025 
                                                                  edc_mode = (unsigned short)9U;
  
#line 1028 
  ret_val = (*(hw->phy.ops.write_i2c_combined))(hw,(unsigned char)190,(unsigned short)((int)reg_slice),(unsigned short)((int)edc_mode));
  
#line 1031 
  if (ret_val != 0) 
#line 1032 
                    ret_val = (*(hw->phy.ops.write_i2c_combined))(hw,(unsigned char)128,(unsigned short)((int)reg_slice),(unsigned short)((int)edc_mode)); else ;
  
#line 1035 
  __retres = ret_val;
  return_label: 
#line 1035 
                return __retres;
}


#line 1043  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x550.c"
static s32 ixgbe_get_link_capabilities_X550em(struct ixgbe_hw *hw, ixgbe_link_speed *speed, bool *autoneg)
{
  s32 __retres;
  
#line 1048 
  if (hw->phy.media_type == (unsigned int)ixgbe_media_type_fiber) {
    
#line 1050 
    *autoneg = (_Bool)0;
    
#line 1052 
    if ((unsigned int)hw->phy.sfp_type + 4294967285U <= 1U) {
      
#line 1054 
      *speed = 32U;
      
#line 1055 
      __retres = 0;
      
#line 1055 
      goto return_label;
    }
    else ;
    
#line 1059 
    if ((int)hw->phy.multispeed_fiber != 0) 
#line 1060 
                                            *speed = 160U; else 
#line 1063 
                                                                *speed = 128U;
  }
  else {
    
#line 1065 
    *speed = 160U;
    
#line 1067 
    *autoneg = (_Bool)1;
  }
  
#line 1069 
  __retres = 0;
  return_label: 
#line 1069 
                return __retres;
}


#line 1084  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x550.c"
static s32 ixgbe_get_lasi_ext_t_x550em(struct ixgbe_hw *hw, bool *lsc)
{
  s32 __retres;
  u32 status;
  u16 reg;
  s32 tmp;
  s32 tmp_0;
  s32 tmp_1;
  s32 tmp_2;
  s32 tmp_3;
  
#line 1089 
  *lsc = (_Bool)0;
  
#line 1092 
  tmp = (*(hw->phy.ops.read_reg))(hw,64512U,30U,& reg);
  
#line 1092 
  status = (unsigned int)tmp;
  
#line 1096 
  if (status != 0U || ((int)reg & 1) == 0) {
    
#line 1097 
    __retres = (int)status;
    
#line 1097 
    goto return_label;
  }
  else ;
  
#line 1100 
  tmp_0 = (*(hw->phy.ops.read_reg))(hw,64513U,30U,& reg);
  
#line 1100 
  status = (unsigned int)tmp_0;
  
#line 1104 
  if (status != 0U || ((int)reg & 4100) == 0) {
    
#line 1106 
    __retres = (int)status;
    
#line 1106 
    goto return_label;
  }
  else ;
  
#line 1109 
  tmp_1 = (*(hw->phy.ops.read_reg))(hw,52224U,30U,& reg);
  
#line 1109 
  status = (unsigned int)tmp_1;
  
#line 1113 
  if (status != 0U) {
    
#line 1114 
    __retres = (int)status;
    
#line 1114 
    goto return_label;
  }
  else ;
  
#line 1117 
  if (((int)reg & 16384) != 0) {
    
#line 1119 
    ixgbe_set_copper_phy_power(hw,(_Bool)0);
    
#line 1120 
    __retres = -26;
    
#line 1120 
    goto return_label;
  }
  else ;
  
#line 1124 
  tmp_2 = (*(hw->phy.ops.read_reg))(hw,64512U,7U,& reg);
  
#line 1124 
  status = (unsigned int)tmp_2;
  
#line 1127 
  if (status != 0U || ((int)reg & 512) == 0) {
    
#line 1128 
    __retres = (int)status;
    
#line 1128 
    goto return_label;
  }
  else ;
  
#line 1131 
  tmp_3 = (*(hw->phy.ops.read_reg))(hw,52225U,7U,& reg);
  
#line 1131 
  status = (unsigned int)tmp_3;
  
#line 1134 
  if (status != 0U) {
    
#line 1135 
    __retres = (int)status;
    
#line 1135 
    goto return_label;
  }
  else ;
  
#line 1138 
  if (((int)reg & 1) != 0) 
#line 1139 
                           *lsc = (_Bool)1; else ;
  
#line 1141 
  __retres = 0;
  return_label: 
#line 1141 
                return __retres;
}


#line 1153  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x550.c"
static s32 ixgbe_enable_lasi_ext_t_x550em(struct ixgbe_hw *hw)
{
  s32 __retres;
  u32 status;
  u16 reg;
  bool lsc;
  s32 tmp;
  s32 tmp_0;
  s32 tmp_1;
  s32 tmp_2;
  s32 tmp_3;
  s32 tmp_4;
  s32 tmp_5;
  s32 tmp_6;
  s32 tmp_7;
  
#line 1160 
  tmp = ixgbe_get_lasi_ext_t_x550em(hw,& lsc);
  
#line 1160 
  status = (unsigned int)tmp;
  
#line 1163 
  tmp_0 = (*(hw->phy.ops.read_reg))(hw,54273U,7U,& reg);
  
#line 1163 
  status = (unsigned int)tmp_0;
  
#line 1165 
  if (status != 0U) {
    
#line 1166 
    __retres = (int)status;
    
#line 1166 
    goto return_label;
  }
  else ;
  
#line 1168 
  reg = (unsigned short)((unsigned int)reg | 1U);
  
#line 1170 
  tmp_1 = (*(hw->phy.ops.write_reg))(hw,54273U,7U,(unsigned short)((int)reg));
  
#line 1170 
  status = (unsigned int)tmp_1;
  
#line 1172 
  if (status != 0U) {
    
#line 1173 
    __retres = (int)status;
    
#line 1173 
    goto return_label;
  }
  else ;
  
#line 1176 
  tmp_2 = (*(hw->phy.ops.read_reg))(hw,54272U,30U,& reg);
  
#line 1176 
  status = (unsigned int)tmp_2;
  
#line 1179 
  if (status != 0U) {
    
#line 1180 
    __retres = (int)status;
    
#line 1180 
    goto return_label;
  }
  else ;
  
#line 1182 
  reg = (unsigned short)((unsigned int)reg | 16384U);
  
#line 1184 
  tmp_3 = (*(hw->phy.ops.write_reg))(hw,54272U,30U,(unsigned short)((int)reg));
  
#line 1184 
  status = (unsigned int)tmp_3;
  
#line 1187 
  if (status != 0U) {
    
#line 1188 
    __retres = (int)status;
    
#line 1188 
    goto return_label;
  }
  else ;
  
#line 1191 
  tmp_4 = (*(hw->phy.ops.read_reg))(hw,65281U,30U,& reg);
  
#line 1191 
  status = (unsigned int)tmp_4;
  
#line 1194 
  if (status != 0U) {
    
#line 1195 
    __retres = (int)status;
    
#line 1195 
    goto return_label;
  }
  else ;
  
#line 1197 
  reg = (unsigned short)((unsigned int)reg | 4100U);
  
#line 1200 
  tmp_5 = (*(hw->phy.ops.write_reg))(hw,65281U,30U,(unsigned short)((int)reg));
  
#line 1200 
  status = (unsigned int)tmp_5;
  
#line 1203 
  if (status != 0U) {
    
#line 1204 
    __retres = (int)status;
    
#line 1204 
    goto return_label;
  }
  else ;
  
#line 1207 
  tmp_6 = (*(hw->phy.ops.read_reg))(hw,65280U,30U,& reg);
  
#line 1207 
  status = (unsigned int)tmp_6;
  
#line 1210 
  if (status != 0U) {
    
#line 1211 
    __retres = (int)status;
    
#line 1211 
    goto return_label;
  }
  else ;
  
#line 1213 
  reg = (unsigned short)((unsigned int)reg | 1U);
  
#line 1215 
  tmp_7 = (*(hw->phy.ops.write_reg))(hw,65280U,30U,(unsigned short)((int)reg));
  
#line 1215 
  status = (unsigned int)tmp_7;
  
#line 1219 
  __retres = (int)status;
  return_label: 
#line 1219 
                return __retres;
}


#line 1233  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x550.c"
static s32 ixgbe_handle_lasi_ext_t_x550em(struct ixgbe_hw *hw)
{
  s32 __retres;
  bool lsc;
  u32 status;
  s32 tmp;
  
#line 1235 
  struct ixgbe_phy_info *phy = & hw->phy;
  
#line 1239 
  tmp = ixgbe_get_lasi_ext_t_x550em(hw,& lsc);
  
#line 1239 
  status = (unsigned int)tmp;
  
#line 1240 
  if (status != 0U) {
    
#line 1241 
    __retres = (int)status;
    
#line 1241 
    goto return_label;
  }
  else ;
  
#line 1243 
  if ((int)lsc != 0) {
    s32 tmp_0;
    
#line 1244 
    tmp_0 = (*(phy->ops.setup_internal_link))(hw);
    
#line 1244 
    __retres = tmp_0;
    
#line 1244 
    goto return_label;
  }
  else ;
  
#line 1246 
  __retres = 0;
  return_label: 
#line 1246 
                return __retres;
}


#line 1256  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x550.c"
static s32 ixgbe_setup_kr_speed_x550em(struct ixgbe_hw *hw, ixgbe_link_speed speed)
{
  s32 __retres;
  s32 status;
  u32 reg_val;
  int tmp;
  int tmp_0;
  
#line 1263 
  if ((unsigned int)hw->bus.lan_id == 0U) 
#line 1263 
                                          tmp = 16908; else 
#line 1263 
                                                            tmp = 33292;
  
#line 1262 
  ;
  
#line 1262 
  status = ixgbe_read_iosf_sb_reg_x550(hw,(unsigned int)tmp,0U,& reg_val);
  
#line 1265 
  if (status != 0) {
    
#line 1266 
    __retres = status;
    
#line 1266 
    goto return_label;
  }
  else ;
  
#line 1268 
  reg_val |= 536870912U;
  
#line 1269 
  reg_val &= 4294918143U;
  
#line 1271 
  reg_val &= 4294639615U;
  
#line 1275 
  if ((speed & 128U) != 0U) 
#line 1276 
                            reg_val |= 262144U; else ;
  
#line 1279 
  if ((speed & 32U) != 0U) 
#line 1280 
                           reg_val |= 65536U; else ;
  
#line 1283 
  reg_val |= 2147483648U;
  
#line 1284 
  ;
  
#line 1285 
  if ((unsigned int)hw->bus.lan_id == 0U) 
#line 1285 
                                          tmp_0 = 16908; else 
#line 1285 
                                                              tmp_0 = 33292;
  
#line 1284 
  ;
  
#line 1284 
  status = ixgbe_write_iosf_sb_reg_x550(hw,(unsigned int)tmp_0,0U,reg_val);
  
#line 1288 
  __retres = status;
  return_label: 
#line 1288 
                return __retres;
}


#line 1296  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x550.c"
static s32 ixgbe_setup_kx4_x550em(struct ixgbe_hw *hw)
{
  s32 __retres;
  s32 status;
  u32 reg_val;
  
#line 1301 
  status = ixgbe_read_iosf_sb_reg_x550(hw,76U,(unsigned int)((int)hw->bus.lan_id + 2),& reg_val);
  
#line 1304 
  if (status != 0) {
    
#line 1305 
    __retres = status;
    
#line 1305 
    goto return_label;
  }
  else ;
  
#line 1307 
  reg_val &= 4294770687U;
  
#line 1310 
  reg_val |= 536870912U;
  
#line 1313 
  if ((hw->phy.autoneg_advertised & 128U) != 0U) 
#line 1314 
                                                 reg_val |= 131072U; else ;
  
#line 1317 
  if ((hw->phy.autoneg_advertised & 32U) != 0U) 
#line 1318 
                                                reg_val |= 65536U; else ;
  
#line 1321 
  reg_val |= 2147483648U;
  
#line 1322 
  status = ixgbe_write_iosf_sb_reg_x550(hw,76U,(unsigned int)((int)hw->bus.lan_id + 2),reg_val);
  
#line 1326 
  __retres = status;
  return_label: 
#line 1326 
                return __retres;
}


#line 1334  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x550.c"
static s32 ixgbe_setup_kr_x550em(struct ixgbe_hw *hw)
{
  s32 tmp;
  
#line 1336 
  tmp = ixgbe_setup_kr_speed_x550em(hw,hw->phy.autoneg_advertised);
  
#line 1336 
  return tmp;
}


#line 1345  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x550.c"
static s32 ixgbe_ext_phy_t_x550em_get_link(struct ixgbe_hw *hw, bool *link_up)
{
  s32 __retres;
  u32 ret;
  u16 autoneg_status;
  s32 tmp;
  s32 tmp_0;
  
#line 1350 
  *link_up = (_Bool)0;
  
#line 1353 
  tmp = (*(hw->phy.ops.read_reg))(hw,1U,7U,& autoneg_status);
  
#line 1353 
  ret = (unsigned int)tmp;
  
#line 1356 
  if (ret != 0U) {
    
#line 1357 
    __retres = (int)ret;
    
#line 1357 
    goto return_label;
  }
  else ;
  
#line 1359 
  tmp_0 = (*(hw->phy.ops.read_reg))(hw,1U,7U,& autoneg_status);
  
#line 1359 
  ret = (unsigned int)tmp_0;
  
#line 1362 
  if (ret != 0U) {
    
#line 1363 
    __retres = (int)ret;
    
#line 1363 
    goto return_label;
  }
  else ;
  
#line 1365 
  *link_up = (_Bool)(((int)autoneg_status & 4) != 0);
  
#line 1367 
  __retres = 0;
  return_label: 
#line 1367 
                return __retres;
}


#line 1381  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x550.c"
static s32 ixgbe_setup_internal_phy_t_x550em(struct ixgbe_hw *hw)
{
  s32 __retres;
  ixgbe_link_speed force_speed;
  bool link_up;
  u32 status;
  u16 speed;
  enum ixgbe_media_type tmp;
  s32 tmp_0;
  s32 tmp_1;
  s32 tmp_2;
  s32 tmp_3;
  
#line 1388 
  tmp = (*(hw->mac.ops.get_media_type))(hw);
  
#line 1388 
  if (tmp != (unsigned int)ixgbe_media_type_copper) {
    
#line 1389 
    __retres = -4;
    
#line 1389 
    goto return_label;
  }
  else ;
  
#line 1392 
  tmp_0 = ixgbe_ext_phy_t_x550em_get_link(hw,& link_up);
  
#line 1392 
  status = (unsigned int)tmp_0;
  
#line 1393 
  if (status != 0U) {
    
#line 1394 
    __retres = (int)status;
    
#line 1394 
    goto return_label;
  }
  else ;
  
#line 1396 
  if (! link_up) {
    
#line 1397 
    __retres = 0;
    
#line 1397 
    goto return_label;
  }
  else ;
  
#line 1399 
  tmp_1 = (*(hw->phy.ops.read_reg))(hw,51200U,7U,& speed);
  
#line 1399 
  status = (unsigned int)tmp_1;
  
#line 1402 
  if (status != 0U) {
    
#line 1403 
    __retres = (int)status;
    
#line 1403 
    goto return_label;
  }
  else ;
  
#line 1406 
  tmp_2 = ixgbe_ext_phy_t_x550em_get_link(hw,& link_up);
  
#line 1406 
  status = (unsigned int)tmp_2;
  
#line 1407 
  if (status != 0U) {
    
#line 1408 
    __retres = (int)status;
    
#line 1408 
    goto return_label;
  }
  else ;
  
#line 1410 
  if (! link_up) {
    
#line 1411 
    __retres = 0;
    
#line 1411 
    goto return_label;
  }
  else ;
  
#line 1414 
  speed = (unsigned short)((unsigned int)speed & 7U);
  
#line 1416 
  switch ((int)speed) {
    case 7: 
#line 1417 
    ;
    
#line 1418 
    force_speed = 128U;
    
#line 1419 
    goto ldv_55013;
    case 5: 
#line 1420 
    ;
    
#line 1421 
    force_speed = 32U;
    
#line 1422 
    goto ldv_55013;
    default: 
#line 1423 
    ;
    
#line 1425 
    __retres = -13;
    
#line 1425 
    goto return_label;
  }
  ldv_55013: 
#line 1428 
  ;
  
#line 1428 
  tmp_3 = ixgbe_setup_ixfi_x550em(hw,& force_speed);
  
#line 1428 
  __retres = tmp_3;
  return_label: 
#line 1428 
                return __retres;
}


#line 1434  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x550.c"
static s32 ixgbe_reset_phy_t_X550em(struct ixgbe_hw *hw)
{
  s32 __retres;
  s32 status;
  s32 tmp;
  
#line 1438 
  status = ixgbe_reset_phy_generic(hw);
  
#line 1440 
  if (status != 0) {
    
#line 1441 
    __retres = status;
    
#line 1441 
    goto return_label;
  }
  else ;
  
#line 1444 
  tmp = ixgbe_enable_lasi_ext_t_x550em(hw);
  
#line 1444 
  __retres = tmp;
  return_label: 
#line 1444 
                return __retres;
}


#line 1454  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x550.c"
static s32 ixgbe_init_phy_ops_X550em(struct ixgbe_hw *hw)
{
  ixgbe_link_speed speed;
  s32 ret_val;
  enum ixgbe_media_type tmp;
  
#line 1456 
  struct ixgbe_phy_info *phy = & hw->phy;
  
#line 1460 
  (*(hw->mac.ops.set_lan_id))(hw);
  
#line 1462 
  tmp = (*(hw->mac.ops.get_media_type))(hw);
  
#line 1462 
  if (tmp == (unsigned int)ixgbe_media_type_fiber) {
    
#line 1463 
    phy->phy_semaphore_mask = 6150U;
    
#line 1464 
    ixgbe_setup_mux_ctl(hw);
    
#line 1469 
    phy->nw_mng_if_sel = ixgbe_read_reg(hw,70008U);
    
#line 1472 
    if (((unsigned long)phy->nw_mng_if_sel & 16777216UL) != 0UL) {
      
#line 1473 
      speed = 160U;
      
#line 1475 
      ret_val = ixgbe_setup_kr_speed_x550em(hw,speed);
    }
    else ;
  }
  else ;
  
#line 1480 
  ret_val = (*(phy->ops.identify))(hw);
  
#line 1483 
  ixgbe_init_mac_link_ops_X550em(hw);
  
#line 1484 
  if (phy->sfp_type != (unsigned int)ixgbe_sfp_type_unknown) 
#line 1485 
                                                             phy->ops.reset = (s32 (*)(struct ixgbe_hw *))0; else ;
  
#line 1488 
  switch ((unsigned int)hw->phy.type) {
    case (unsigned int)5: 
#line 1489 
    ;
    
#line 1490 
    phy->ops.setup_link = & ixgbe_setup_kx4_x550em;
    
#line 1491 
    phy->ops.read_reg = & ixgbe_read_phy_reg_x550em;
    
#line 1492 
    phy->ops.write_reg = & ixgbe_write_phy_reg_x550em;
    
#line 1493 
    goto ldv_55027;
    case (unsigned int)4: 
#line 1494 
    ;
    
#line 1495 
    phy->ops.setup_link = & ixgbe_setup_kr_x550em;
    
#line 1496 
    phy->ops.read_reg = & ixgbe_read_phy_reg_x550em;
    
#line 1497 
    phy->ops.write_reg = & ixgbe_write_phy_reg_x550em;
    
#line 1498 
    goto ldv_55027;
    case (unsigned int)6: 
#line 1499 
    ;
    
#line 1503 
    phy->nw_mng_if_sel = ixgbe_read_reg(hw,70008U);
    
#line 1508 
    if (((unsigned long)phy->nw_mng_if_sel & 16777216UL) == 0UL) 
#line 1509 
                                                                 phy->ops.setup_internal_link = & ixgbe_setup_internal_phy_t_x550em;
    else {
      
#line 1512 
      speed = 160U;
      
#line 1514 
      ret_val = ixgbe_setup_kr_speed_x550em(hw,speed);
    }
    
#line 1517 
    phy->ops.handle_lasi = & ixgbe_handle_lasi_ext_t_x550em;
    
#line 1518 
    phy->ops.reset = & ixgbe_reset_phy_t_X550em;
    
#line 1519 
    goto ldv_55027;
    default: 
#line 1520 
    ;
    
#line 1521 
    goto ldv_55027;
  }
  ldv_55027: 
#line 1524 
  ;
  
#line 1524 
  return ret_val;
}


#line 1533  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x550.c"
static enum ixgbe_media_type ixgbe_get_media_type_X550em(struct ixgbe_hw *hw)
{
  enum ixgbe_media_type media_type;
  
#line 1538 
  switch ((int)hw->device_id) {
    case 5547: 
#line 1539 
    ;
    case 5546: 
#line 1540 
    ;
    
#line 1541 
    media_type = ixgbe_media_type_backplane;
    
#line 1542 
    goto ldv_55037;
    case 5548: 
#line 1543 
    ;
    
#line 1544 
    media_type = ixgbe_media_type_fiber;
    
#line 1545 
    goto ldv_55037;
    case 5550: 
#line 1546 
    ;
    case 5549: 
#line 1547 
    ;
    
#line 1548 
    media_type = ixgbe_media_type_copper;
    
#line 1549 
    goto ldv_55037;
    default: 
#line 1550 
    ;
    
#line 1551 
    media_type = ixgbe_media_type_unknown;
    
#line 1552 
    goto ldv_55037;
  }
  ldv_55037: 
#line 1554 
  ;
  
#line 1554 
  return media_type;
}


#line 1560  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x550.c"
static s32 ixgbe_init_ext_t_x550em(struct ixgbe_hw *hw)
{
  s32 __retres;
  s32 status;
  u16 reg;
  
#line 1565 
  status = (*(hw->phy.ops.read_reg))(hw,52226U,1U,& reg);
  
#line 1569 
  if (status != 0) {
    
#line 1570 
    __retres = status;
    
#line 1570 
    goto return_label;
  }
  else ;
  
#line 1575 
  if (((int)reg & 3) != 0) {
    
#line 1576 
    status = (*(hw->phy.ops.read_reg))(hw,50297U,30U,& reg);
    
#line 1580 
    if (status != 0) {
      
#line 1581 
      __retres = status;
      
#line 1581 
      goto return_label;
    }
    else ;
    
#line 1583 
    reg = (unsigned short)((unsigned int)reg & 32767U);
    
#line 1585 
    status = (*(hw->phy.ops.write_reg))(hw,50297U,30U,(unsigned short)((int)reg));
    
#line 1589 
    if (status != 0) {
      
#line 1590 
      __retres = status;
      
#line 1590 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 1593 
  __retres = status;
  return_label: 
#line 1593 
                return __retres;
}


#line 1603  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x550.c"
static s32 ixgbe_reset_hw_X550em(struct ixgbe_hw *hw)
{
  s32 __retres;
  ixgbe_link_speed link_speed;
  s32 status;
  u32 i;
  u32 hlreg0;
  u32 tmp;
  
#line 1607 
  u32 ctrl = 0U;
  
#line 1610 
  bool link_up = (_Bool)0;
  
#line 1613 
  status = (*(hw->mac.ops.stop_adapter))(hw);
  
#line 1614 
  if (status != 0) {
    
#line 1615 
    __retres = status;
    
#line 1615 
    goto return_label;
  }
  else ;
  
#line 1618 
  ixgbe_clear_tx_pending(hw);
  
#line 1623 
  status = (*(hw->phy.ops.init))(hw);
  
#line 1626 
  if (hw->phy.type == (unsigned int)ixgbe_phy_x550em_ext_t) {
    
#line 1627 
    status = ixgbe_init_ext_t_x550em(hw);
    
#line 1628 
    if (status != 0) {
      
#line 1629 
      __retres = status;
      
#line 1629 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 1633 
  if ((int)hw->phy.sfp_setup_needed != 0) {
    
#line 1634 
    status = (*(hw->mac.ops.setup_sfp))(hw);
    
#line 1635 
    hw->phy.sfp_setup_needed = (_Bool)0;
  }
  else ;
  
#line 1639 
  if (! hw->phy.reset_disable && hw->phy.ops.reset != (s32 (*)(struct ixgbe_hw *))0) 
    
#line 1640 
    (*(hw->phy.ops.reset))(hw); else ;
  mac_reset_top: 
#line 1642 
  ;
  
#line 1648 
  ctrl = 8U;
  
#line 1650 
  if (! hw->force_full_reset) {
    
#line 1651 
    (*(hw->mac.ops.check_link))(hw,& link_speed,& link_up,(_Bool)0);
    
#line 1652 
    if ((int)link_up != 0) 
#line 1653 
                           ctrl = 67108864U; else ;
  }
  else ;
  
#line 1656 
  tmp = ixgbe_read_reg(hw,0U);
  
#line 1656 
  ctrl = tmp | ctrl;
  
#line 1657 
  ixgbe_write_reg(hw,0U,ctrl);
  
#line 1658 
  ixgbe_read_reg(hw,8U);
  
#line 1661 
  i = 0U;
  
#line 1661 
  goto ldv_55059;
  ldv_55058: 
#line 1662 
  ;
  
#line 1662 
  __const_udelay(4295UL);
  
#line 1663 
  ctrl = ixgbe_read_reg(hw,0U);
  
#line 1664 
  if ((ctrl & 67108872U) == 0U) 
#line 1665 
                                goto ldv_55057; else ;
  
#line 1661 
  i += 1U;
  ldv_55059: 
#line 1662 
  ;
  
#line 1661 
  if (i <= 9U) 
#line 1663 
               goto ldv_55058; else 
#line 1666 
                                    goto ldv_55057;
  ldv_55057: 
#line 1667 
  ;
  
#line 1668 
  if ((ctrl & 67108872U) != 0U) {
    
#line 1669 
    status = -15;
    {
      
#line 1670 
      struct _ddebug descriptor = {.modname = "ixgbe", .function = "ixgbe_reset_hw_X550em", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x550.c", .format = "Reset polling failed to complete.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1670U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1670 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 1670 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"Reset polling failed to complete.\n"); else ;
    }
  }
  else ;
  
#line 1673 
  msleep(50U);
  
#line 1679 
  if (((int)hw->mac.flags & 1) != 0) {
    
#line 1680 
    hw->mac.flags = (unsigned char)((unsigned int)hw->mac.flags & 254U);
    
#line 1681 
    goto mac_reset_top;
  }
  else ;
  
#line 1685 
  (*(hw->mac.ops.get_mac_addr))(hw,(u8 *)(& hw->mac.perm_addr));
  
#line 1691 
  hw->mac.num_rar_entries = 128U;
  
#line 1692 
  (*(hw->mac.ops.init_rx_addrs))(hw);
  
#line 1694 
  if ((unsigned int)hw->device_id == 5549U) {
    
#line 1695 
    hlreg0 = ixgbe_read_reg(hw,16960U);
    
#line 1696 
    hlreg0 &= 4294901759U;
    
#line 1697 
    ixgbe_write_reg(hw,16960U,hlreg0);
  }
  else ;
  
#line 1700 
  if ((unsigned int)hw->device_id == 5548U) 
#line 1701 
                                            ixgbe_setup_mux_ctl(hw); else ;
  
#line 1703 
  __retres = status;
  return_label: 
#line 1703 
                return __retres;
}


#line 1712  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x550.c"
static void ixgbe_set_ethertype_anti_spoofing_X550(struct ixgbe_hw *hw, bool enable, int vf)
{
  u32 pfvfspoof;
  
#line 1715 
  int vf_target_reg = vf >> 3;
  
#line 1716 
  int vf_target_shift = vf % 8 + 16;
  
#line 1719 
  pfvfspoof = ixgbe_read_reg(hw,(unsigned int)((vf_target_reg + 8320) * 4));
  
#line 1720 
  if ((int)enable != 0) 
#line 1721 
                        pfvfspoof = (unsigned int)(1 << vf_target_shift) | pfvfspoof; else 
                                                                    
#line 1723 
                                                                    pfvfspoof = (unsigned int)(~ (1 << vf_target_shift)) & pfvfspoof;
  
#line 1725 
  ixgbe_write_reg(hw,(unsigned int)((vf_target_reg + 8320) * 4),pfvfspoof);
  
#line 1726 
  return;
}


#line 1733  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x550.c"
static void ixgbe_set_source_address_pruning_X550(struct ixgbe_hw *hw, bool enable, unsigned int pool)
{
  u64 pfflp;
  u32 tmp;
  u32 tmp_0;
  
#line 1740 
  if (pool > 63U) 
#line 1741 
                  goto return_label; else ;
  
#line 1743 
  tmp = ixgbe_read_reg(hw,20656U);
  
#line 1743 
  pfflp = (unsigned long long)tmp;
  
#line 1744 
  tmp_0 = ixgbe_read_reg(hw,20660U);
  
#line 1744 
  pfflp = ((unsigned long long)tmp_0 << 32) | pfflp;
  
#line 1746 
  if ((int)enable != 0) 
#line 1747 
                        pfflp = (1ULL << pool) | pfflp; else 
#line 1749 
                                                             pfflp = ~ (1ULL << pool) & pfflp;
  
#line 1751 
  ixgbe_write_reg(hw,20656U,(unsigned int)pfflp);
  
#line 1752 
  ixgbe_write_reg(hw,20660U,(unsigned int)(pfflp >> 32));
  return_label: 
#line 1753 
                return;
}


#line 1804  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x550.c"
static struct ixgbe_mac_operations mac_ops_X550 = {.init_hw = & ixgbe_init_hw_generic, .reset_hw = & ixgbe_reset_hw_X540, .start_hw = & ixgbe_start_hw_X540, .clear_hw_cntrs = & ixgbe_clear_hw_cntrs_generic, .get_media_type = & ixgbe_get_media_type_X540, .get_mac_addr = & ixgbe_get_mac_addr_generic, .get_san_mac_addr = & ixgbe_get_san_mac_addr_generic, .get_device_caps = & ixgbe_get_device_caps_generic, .get_wwn_prefix = & ixgbe_get_wwn_prefix_generic, .stop_adapter = & ixgbe_stop_adapter_generic, .get_bus_info = & ixgbe_get_bus_info_generic, .set_lan_id = & ixgbe_set_lan_id_multi_port_pcie, .read_analog_reg8 = (s32 (*)(struct ixgbe_hw *, u32 , u8 *))0, .write_analog_reg8 = (s32 (*)(struct ixgbe_hw *, u32 , u8 ))0, .setup_sfp = (s32 (*)(struct ixgbe_hw *))0, .disable_rx_buff = & ixgbe_disable_rx_buff_generic, .enable_rx_buff = & ixgbe_enable_rx_buff_generic, .enable_rx_dma = & ixgbe_enable_rx_dma_generic, .acquire_swfw_sync = & ixgbe_acquire_swfw_sync_X540, .release_swfw_sync = & ixgbe_release_swfw_sync_X540, .prot_autoc_read = & prot_autoc_read_generic, .prot_autoc_write = & prot_autoc_write_generic, .disable_tx_laser = (void (*)(struct ixgbe_hw *))0, .enable_tx_laser = (void (*)(struct ixgbe_hw *))0, .flap_tx_laser = (void (*)(struct ixgbe_hw *))0, .stop_link_on_d3 = (void (*)(struct ixgbe_hw *))0, .setup_link = & ixgbe_setup_mac_link_X540, .check_link = & ixgbe_check_mac_link_generic, .get_link_capabilities = & ixgbe_get_copper_link_capabilities_generic, .set_rxpba = & ixgbe_set_rxpba_generic, .led_on = & ixgbe_led_on_generic, .led_off = & ixgbe_led_off_generic, .blink_led_start = & ixgbe_blink_led_start_X540, .blink_led_stop = & ixgbe_blink_led_stop_X540, .set_rar = & ixgbe_set_rar_generic, .clear_rar = & ixgbe_clear_rar_generic, .set_vmdq = & ixgbe_set_vmdq_generic, .set_vmdq_san_mac = & ixgbe_set_vmdq_san_mac_generic, .clear_vmdq = & ixgbe_clear_vmdq_generic, .init_rx_addrs = & ixgbe_init_rx_addrs_generic, .update_mc_addr_list = & ixgbe_update_mc_addr_list_generic, .enable_mc = & ixgbe_enable_mc_generic, .disable_mc = & ixgbe_disable_mc_generic, .clear_vfta = & ixgbe_clear_vfta_generic, .set_vfta = & ixgbe_set_vfta_generic, .init_uta_tables = & ixgbe_init_uta_tables_generic, .set_mac_anti_spoofing = & ixgbe_set_mac_anti_spoofing, .set_vlan_anti_spoofing = & ixgbe_set_vlan_anti_spoofing, .fc_enable = & ixgbe_fc_enable_generic, .set_fw_drv_ver = & ixgbe_set_fw_drv_ver_generic, .get_thermal_sensor_data = (s32 (*)(struct ixgbe_hw *))0, .init_thermal_sensor_thresh = (s32 (*)(struct ixgbe_hw *))0, .disable_rx = & ixgbe_disable_rx_x550, .enable_rx = & ixgbe_enable_rx_generic, .set_source_address_pruning = & ixgbe_set_source_address_pruning_X550, .set_ethertype_anti_spoofing = & ixgbe_set_ethertype_anti_spoofing_X550, .dmac_config = (s32 (*)(struct ixgbe_hw *))0, .dmac_update_tcs = (s32 (*)(struct ixgbe_hw *))0, .dmac_config_tcs = (s32 (*)(struct ixgbe_hw *))0};

#line 1815  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x550.c"
static struct ixgbe_mac_operations mac_ops_X550EM_x = {.init_hw = & ixgbe_init_hw_generic, .reset_hw = & ixgbe_reset_hw_X550em, .start_hw = & ixgbe_start_hw_X540, .clear_hw_cntrs = & ixgbe_clear_hw_cntrs_generic, .get_media_type = & ixgbe_get_media_type_X550em, .get_mac_addr = & ixgbe_get_mac_addr_generic, .get_san_mac_addr = (s32 (*)(struct ixgbe_hw *, u8 *))0, .get_device_caps = & ixgbe_get_device_caps_generic, .get_wwn_prefix = (s32 (*)(struct ixgbe_hw *, u16 *, u16 *))0, .stop_adapter = & ixgbe_stop_adapter_generic, .get_bus_info = & ixgbe_get_bus_info_generic, .set_lan_id = & ixgbe_set_lan_id_multi_port_pcie, .read_analog_reg8 = (s32 (*)(struct ixgbe_hw *, u32 , u8 *))0, .write_analog_reg8 = (s32 (*)(struct ixgbe_hw *, u32 , u8 ))0, .setup_sfp = & ixgbe_setup_sfp_modules_X550em, .disable_rx_buff = & ixgbe_disable_rx_buff_generic, .enable_rx_buff = & ixgbe_enable_rx_buff_generic, .enable_rx_dma = & ixgbe_enable_rx_dma_generic, .acquire_swfw_sync = & ixgbe_acquire_swfw_sync_X540, .release_swfw_sync = & ixgbe_release_swfw_sync_X540, .prot_autoc_read = & prot_autoc_read_generic, .prot_autoc_write = & prot_autoc_write_generic, .disable_tx_laser = (void (*)(struct ixgbe_hw *))0, .enable_tx_laser = (void (*)(struct ixgbe_hw *))0, .flap_tx_laser = (void (*)(struct ixgbe_hw *))0, .stop_link_on_d3 = (void (*)(struct ixgbe_hw *))0, .setup_link = (s32 (*)(struct ixgbe_hw *, ixgbe_link_speed , bool ))0, .check_link = & ixgbe_check_mac_link_generic, .get_link_capabilities = & ixgbe_get_link_capabilities_X550em, .set_rxpba = & ixgbe_set_rxpba_generic, .led_on = & ixgbe_led_on_generic, .led_off = & ixgbe_led_off_generic, .blink_led_start = & ixgbe_blink_led_start_X540, .blink_led_stop = & ixgbe_blink_led_stop_X540, .set_rar = & ixgbe_set_rar_generic, .clear_rar = & ixgbe_clear_rar_generic, .set_vmdq = & ixgbe_set_vmdq_generic, .set_vmdq_san_mac = & ixgbe_set_vmdq_san_mac_generic, .clear_vmdq = & ixgbe_clear_vmdq_generic, .init_rx_addrs = & ixgbe_init_rx_addrs_generic, .update_mc_addr_list = & ixgbe_update_mc_addr_list_generic, .enable_mc = & ixgbe_enable_mc_generic, .disable_mc = & ixgbe_disable_mc_generic, .clear_vfta = & ixgbe_clear_vfta_generic, .set_vfta = & ixgbe_set_vfta_generic, .init_uta_tables = & ixgbe_init_uta_tables_generic, .set_mac_anti_spoofing = & ixgbe_set_mac_anti_spoofing, .set_vlan_anti_spoofing = & ixgbe_set_vlan_anti_spoofing, .fc_enable = & ixgbe_fc_enable_generic, .set_fw_drv_ver = & ixgbe_set_fw_drv_ver_generic, .get_thermal_sensor_data = (s32 (*)(struct ixgbe_hw *))0, .init_thermal_sensor_thresh = (s32 (*)(struct ixgbe_hw *))0, .disable_rx = & ixgbe_disable_rx_x550, .enable_rx = & ixgbe_enable_rx_generic, .set_source_address_pruning = & ixgbe_set_source_address_pruning_X550, .set_ethertype_anti_spoofing = & ixgbe_set_ethertype_anti_spoofing_X550, .dmac_config = (s32 (*)(struct ixgbe_hw *))0, .dmac_update_tcs = (s32 (*)(struct ixgbe_hw *))0, .dmac_config_tcs = (s32 (*)(struct ixgbe_hw *))0};

#line 1836  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x550.c"
static struct ixgbe_eeprom_operations eeprom_ops_X550 = {.init_params = & ixgbe_init_eeprom_params_X550, .read = & ixgbe_read_ee_hostif_X550, .read_buffer = & ixgbe_read_ee_hostif_buffer_X550, .write = & ixgbe_write_ee_hostif_X550, .write_buffer = & ixgbe_write_ee_hostif_buffer_X550, .validate_checksum = & ixgbe_validate_eeprom_checksum_X550, .update_checksum = & ixgbe_update_eeprom_checksum_X550, .calc_checksum = & ixgbe_calc_eeprom_checksum_X550};

#line 1841  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x550.c"
static struct ixgbe_eeprom_operations eeprom_ops_X550EM_x = {.init_params = & ixgbe_init_eeprom_params_X540, .read = & ixgbe_read_ee_hostif_X550, .read_buffer = & ixgbe_read_ee_hostif_buffer_X550, .write = & ixgbe_write_ee_hostif_X550, .write_buffer = & ixgbe_write_ee_hostif_buffer_X550, .validate_checksum = & ixgbe_validate_eeprom_checksum_X550, .update_checksum = & ixgbe_update_eeprom_checksum_X550, .calc_checksum = & ixgbe_calc_eeprom_checksum_X550};

#line 1862  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x550.c"
static struct ixgbe_phy_operations phy_ops_X550 = {.identify = & ixgbe_identify_phy_generic, .identify_sfp = & ixgbe_identify_module_generic, .init = (s32 (*)(struct ixgbe_hw *))0, .reset = (s32 (*)(struct ixgbe_hw *))0, .read_reg = & ixgbe_read_phy_reg_generic, .write_reg = & ixgbe_write_phy_reg_generic, .read_reg_mdi = (s32 (*)(struct ixgbe_hw *, u32 , u32 , u16 *))0, .write_reg_mdi = (s32 (*)(struct ixgbe_hw *, u32 , u32 , u16 ))0, .setup_link = & ixgbe_setup_phy_link_generic, .setup_internal_link = (s32 (*)(struct ixgbe_hw *))0, .setup_link_speed = & ixgbe_setup_phy_link_speed_generic, .check_link = (s32 (*)(struct ixgbe_hw *, ixgbe_link_speed *, bool *))0, .get_firmware_version = & ixgbe_get_phy_firmware_version_generic, .read_i2c_byte = & ixgbe_read_i2c_byte_generic, .write_i2c_byte = & ixgbe_write_i2c_byte_generic, .read_i2c_sff8472 = & ixgbe_read_i2c_sff8472_generic, .read_i2c_eeprom = & ixgbe_read_i2c_eeprom_generic, .write_i2c_eeprom = & ixgbe_write_i2c_eeprom_generic, .read_i2c_combined = & ixgbe_read_i2c_combined_generic, .write_i2c_combined = & ixgbe_write_i2c_combined_generic, .check_overtemp = & ixgbe_tn_check_overtemp, .set_phy_power = & ixgbe_set_copper_phy_power, .handle_lasi = (s32 (*)(struct ixgbe_hw *))0};

#line 1870  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x550.c"
static struct ixgbe_phy_operations phy_ops_X550EM_x = {.identify = & ixgbe_identify_phy_x550em, .identify_sfp = & ixgbe_identify_module_generic, .init = & ixgbe_init_phy_ops_X550em, .reset = (s32 (*)(struct ixgbe_hw *))0, .read_reg = & ixgbe_read_phy_reg_generic, .write_reg = & ixgbe_write_phy_reg_generic, .read_reg_mdi = (s32 (*)(struct ixgbe_hw *, u32 , u32 , u16 *))0, .write_reg_mdi = (s32 (*)(struct ixgbe_hw *, u32 , u32 , u16 ))0, .setup_link = & ixgbe_setup_phy_link_generic, .setup_internal_link = (s32 (*)(struct ixgbe_hw *))0, .setup_link_speed = & ixgbe_setup_phy_link_speed_generic, .check_link = (s32 (*)(struct ixgbe_hw *, ixgbe_link_speed *, bool *))0, .get_firmware_version = & ixgbe_get_phy_firmware_version_generic, .read_i2c_byte = & ixgbe_read_i2c_byte_generic, .write_i2c_byte = & ixgbe_write_i2c_byte_generic, .read_i2c_sff8472 = & ixgbe_read_i2c_sff8472_generic, .read_i2c_eeprom = & ixgbe_read_i2c_eeprom_generic, .write_i2c_eeprom = & ixgbe_write_i2c_eeprom_generic, .read_i2c_combined = (s32 (*)(struct ixgbe_hw *, u8 , u16 , u16 *))0, .write_i2c_combined = (s32 (*)(struct ixgbe_hw *, u8 , u16 , u16 ))0, .check_overtemp = & ixgbe_tn_check_overtemp, .set_phy_power = & ixgbe_set_copper_phy_power, .handle_lasi = (s32 (*)(struct ixgbe_hw *))0};

#line 1876  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x550.c"
static u32 const ixgbe_mvals_X550[24U] = {65552U, 65564U, 66048U, 66064U, 65872U, 65856U, 65888U, 65864U, 2U, 4U, 8U, 33554432U, 67108864U, 134217728U, 70920U, 70928U, 16384U, 512U, 4096U, 1024U, 2048U, 256U, 8192U, 89948U};

#line 1880  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x550.c"
static u32 const ixgbe_mvals_X550EM_x[24U] = {65552U, 65564U, 66048U, 66064U, 65872U, 65856U, 65888U, 65864U, 2U, 4U, 8U, 33554432U, 67108864U, 134217728U, 70920U, 70928U, 16384U, 512U, 4096U, 1024U, 2048U, 256U, 8192U, 89948U};

#line 1884  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x550.c"
struct ixgbe_info ixgbe_X550_info = {.mac = ixgbe_mac_X550, .get_invariants = & ixgbe_get_invariants_X540, .mac_ops = & mac_ops_X550, .eeprom_ops = & eeprom_ops_X550, .phy_ops = & phy_ops_X550, .mbx_ops = & mbx_ops_generic, .mvals = (u32 const *)(& ixgbe_mvals_X550)};

#line 1894  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x550.c"
struct ixgbe_info ixgbe_X550EM_x_info = {.mac = ixgbe_mac_X550EM_x, .get_invariants = & ixgbe_get_invariants_X540, .mac_ops = & mac_ops_X550EM_x, .eeprom_ops = & eeprom_ops_X550EM_x, .phy_ops = & phy_ops_X550EM_x, .mbx_ops = & mbx_ops_generic, .mvals = (u32 const *)(& ixgbe_mvals_X550EM_x)};

#line 178  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernel.h"
void __might_sleep(char const *, int, int);


#line 402 
int sprintf(char *, char const * , ...);


#line 598  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list.h"
__inline static void INIT_HLIST_NODE(struct hlist_node *h)
{
  
#line 600 
  h->next = (struct hlist_node *)0;
  
#line 601 
  h->pprev = (struct hlist_node **)0;
  
#line 602 
  return;
}


#line 638  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list.h"
__inline static void hlist_add_head(struct hlist_node *n, struct hlist_head *h)
{
  
#line 640 
  struct hlist_node *first = h->first;
  
#line 641 
  n->next = first;
  
#line 642 
  if (first != (struct hlist_node *)0) 
#line 643 
                                       first->pprev = & n->next; else ;
  
#line 644 
  h->first = n;
  
#line 645 
  n->pprev = & h->first;
  
#line 646 
  return;
}


#line 658  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list.h"
__inline static void hlist_add_behind(struct hlist_node *n, struct hlist_node *prev)
{
  
#line 661 
  n->next = prev->next;
  
#line 662 
  prev->next = n;
  
#line 663 
  n->pprev = & prev->next;
  
#line 665 
  if (n->next != (struct hlist_node *)0) 
#line 666 
                                         (n->next)->pprev = & n->next; else ;
  
#line 667 
  return;
}


#line 63  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/string_64.h"
int memcmp(void const *, void const *, size_t);


#line 98  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/atomic.h"
static void atomic_inc_0(atomic_t *v);


#line 310  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_lock_0(spinlock_t *lock)
{
  
#line 312 
  _raw_spin_lock(& lock->__anonCompField_spinlock_18.rlock);
  
#line 313 
  return;
}


#line 358 
static void ldv_spin_lock_77(spinlock_t *lock);


#line 362 
static void ldv_spin_lock_80(spinlock_t *lock);


#line 363  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_unlock_0(spinlock_t *lock)
{
  
#line 365 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_18.rlock);
  
#line 366 
  return;
}


#line 407 
static void ldv_spin_unlock_78(spinlock_t *lock);


#line 411 
static void ldv_spin_unlock_79(spinlock_t *lock);


#line 415 
static void ldv_spin_unlock_81(spinlock_t *lock);


#line 24  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/slab.h"
void *ldv_kmalloc(size_t size, gfp_t flags);


#line 141  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/interrupt.h"
static int ldv_request_irq_73(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev);


#line 145 
static int ldv_request_irq_74_0(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev);


#line 149 
static int ldv_request_irq_75_0(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev);


#line 161 
static void ldv_free_irq_76_0(unsigned int ldv_func_arg1, void *ldv_func_arg2);


#line 418  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/slab.h"
static void *kmalloc(size_t size, gfp_t flags);


#line 581 
static void *kzalloc_1(size_t size, gfp_t flags);


#line 81  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm_wakeup.h"
__inline static bool device_can_wakeup(struct device *dev)
{
  bool __retres;
  
#line 83 
  __retres = (_Bool)((int)dev->power.can_wakeup != 0);
  
#line 83 
  return __retres;
}


#line 59  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dma-debug.h"
void debug_dma_sync_single_for_cpu(struct device *, dma_addr_t, size_t, int);


#line 63 
void debug_dma_sync_single_for_device(struct device *, dma_addr_t, size_t, int);


#line 102  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/dma-mapping-common.h"
__inline static void dma_sync_single_for_cpu(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir)
{
  int tmp_0;
  
#line 106 
  struct dma_map_ops *ops = get_dma_ops(dev);
  
#line 108 
  tmp_0 = valid_dma_direction((int)dir);
  
#line 108 
  if ((long)(tmp_0 == 0) != 0L) {
    
#line 110 
    ldv_inline_asm();
    
#line 108 
    ;
  }
  else ;
  
#line 109 
  if (ops->sync_single_for_cpu != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ))0) 
    
#line 110 
    (*(ops->sync_single_for_cpu))(dev,addr,size,dir); else ;
  
#line 111 
  debug_dma_sync_single_for_cpu(dev,addr,size,(int)dir);
  
#line 112 
  return;
}


#line 114  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/dma-mapping-common.h"
__inline static void dma_sync_single_for_device(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir)
{
  int tmp_0;
  
#line 118 
  struct dma_map_ops *ops = get_dma_ops(dev);
  
#line 120 
  tmp_0 = valid_dma_direction((int)dir);
  
#line 120 
  if ((long)(tmp_0 == 0) != 0L) {
    
#line 122 
    ldv_inline_asm();
    
#line 120 
    ;
  }
  else ;
  
#line 121 
  if (ops->sync_single_for_device != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ))0) 
    
#line 122 
    (*(ops->sync_single_for_device))(dev,addr,size,dir); else ;
  
#line 123 
  debug_dma_sync_single_for_device(dev,addr,size,(int)dir);
  
#line 124 
  return;
}


#line 47  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/delay.h"
unsigned long msleep_interruptible(unsigned int);


#line 772  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
void kfree_skb(struct sk_buff *);


#line 783 
struct sk_buff *__alloc_skb(unsigned int, gfp_t, int, int);


#line 787  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static struct sk_buff *alloc_skb(unsigned int size, gfp_t priority)
{
  struct sk_buff *tmp;
  
#line 790 
  tmp = __alloc_skb(size,priority,0,-1);
  
#line 790 
  return tmp;
}


#line 1085  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static struct sk_buff *skb_get_0(struct sk_buff *skb)
{
  
#line 1087 
  atomic_inc_0(& skb->users);
  
#line 1088 
  return skb;
}


#line 1688 
unsigned char *skb_put(struct sk_buff *, unsigned int);


#line 113  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
__inline static void ethtool_cmd_speed_set(struct ethtool_cmd *ep, __u32 speed)
{
  
#line 117 
  ep->speed = (unsigned short)speed;
  
#line 118 
  ep->speed_hi = (unsigned short)(speed >> 16);
  
#line 119 
  return;
}


#line 121  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
__inline static __u32 ethtool_cmd_speed(struct ethtool_cmd const *ep)
{
  __u32 __retres;
  
#line 123 
  __retres = (unsigned int)(((int)ep->speed_hi << 16) | (int)ep->speed);
  
#line 123 
  return __retres;
}


#line 819  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
__inline static __u64 ethtool_get_flow_spec_ring(__u64 ring_cookie)
{
  __u64 __retres;
  
#line 821 
  __retres = ring_cookie & 4294967295ULL;
  
#line 821 
  return __retres;
}


#line 824  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
__inline static __u64 ethtool_get_flow_spec_ring_vf(__u64 ring_cookie)
{
  __u64 __retres;
  
#line 826 
  __retres = (ring_cookie >> 32) & 255ULL;
  
#line 826 
  return __retres;
}


#line 85  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ethtool.h"
u32 ethtool_op_get_link(struct net_device *);


#line 86 
int ethtool_op_get_ts_info(struct net_device *, struct ethtool_ts_info *);


#line 2182  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
int dev_open(struct net_device *);


#line 2183 
int dev_close(struct net_device *);


#line 3475 
struct rtnl_link_stats64 *dev_get_stats(struct net_device *, struct rtnl_link_stats64 *);


#line 69  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/vmalloc.h"
void *vmalloc(unsigned long);


#line 56  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/highmem.h"
__inline static void *kmap(struct page *page)
{
  void *tmp;
  
#line 58 
  __might_sleep("include/linux/highmem.h",58,0);
  
#line 59 
  tmp = lowmem_page_address((struct page const *)page);
  
#line 59 
  return tmp;
}


#line 62  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/highmem.h"
__inline static void kunmap(struct page *page)
{
  
#line 64 
  return;
}


#line 177  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ptp_clock_kernel.h"
int ptp_clock_index(struct ptp_clock *);


#line 895  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe.h"
s32 ixgbe_fdir_erase_perfect_filter_82599(struct ixgbe_hw *hw, union ixgbe_atr_input *input, u16 soft_id);


#line 898 
void ixgbe_atr_compute_perfect_hash_82599(union ixgbe_atr_input *input, union ixgbe_atr_input *input_mask);


#line 64  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_ethtool.c"
static struct ixgbe_stats const ixgbe_gstrings_stats[57U] = {{.stat_string = {(char)'r', (char)'x', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s', (char)'\000'}, .type = 0, .sizeof_stat = 8, .stat_offset = 0}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s', (char)'\000'}, .type = 0, .sizeof_stat = 8, .stat_offset = 8}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s', (char)'\000'}, .type = 0, .sizeof_stat = 8, .stat_offset = 16}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s', (char)'\000'}, .type = 0, .sizeof_stat = 8, .stat_offset = 24}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'_', (char)'n', (char)'i', (char)'c', (char)'\000'}, .type = 1, .sizeof_stat = 8, .stat_offset = 39032}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'_', (char)'n', (char)'i', (char)'c', (char)'\000'}, .type = 1, .sizeof_stat = 8, .stat_offset = 39056}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s', (char)'_', (char)'n', (char)'i', (char)'c', (char)'\000'}, .type = 1, .sizeof_stat = 8, .stat_offset = 39064}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s', (char)'_', (char)'n', (char)'i', (char)'c', (char)'\000'}, .type = 1, .sizeof_stat = 8, .stat_offset = 39072}, {.stat_string = {(char)'l', (char)'s', (char)'c', (char)'_', (char)'i', (char)'n', (char)'t', (char)'\000'}, .type = 1, .sizeof_stat = 8, .stat_offset = 1096}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'b', (char)'u', (char)'s', (char)'y', (char)'\000'}, .type = 1, .sizeof_stat = 8, .stat_offset = 40336}, {.stat_string = {(char)'n', (char)'o', (char)'n', (char)'_', (char)'e', (char)'o', (char)'p', (char)'_', (char)'d', (char)'e', (char)'s', (char)'c', (char)'s', (char)'\000'}, .type = 1, .sizeof_stat = 8, .stat_offset = 1664}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s', (char)'\000'}, .type = 0, .sizeof_stat = 8, .stat_offset = 32}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s', (char)'\000'}, .type = 0, .sizeof_stat = 8, .stat_offset = 40}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'p', (char)'e', (char)'d', (char)'\000'}, .type = 0, .sizeof_stat = 8, .stat_offset = 48}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'p', (char)'e', (char)'d', (char)'\000'}, .type = 0, .sizeof_stat = 8, .stat_offset = 56}, {.stat_string = {(char)'m', (char)'u', (char)'l', (char)'t', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t', (char)'\000'}, .type = 0, .sizeof_stat = 8, .stat_offset = 64}, {.stat_string = {(char)'b', (char)'r', (char)'o', (char)'a', (char)'d', (char)'c', (char)'a', (char)'s', (char)'t', (char)'\000'}, .type = 1, .sizeof_stat = 8, .stat_offset = 39040}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'n', (char)'o', (char)'_', (char)'b', (char)'u', (char)'f', (char)'f', (char)'e', (char)'r', (char)'_', (char)'c', (char)'o', (char)'u', (char)'n', (char)'t', (char)'\000'}, .type = 1, .sizeof_stat = 8, .stat_offset = 39080}, {.stat_string = {(char)'c', (char)'o', (char)'l', (char)'l', (char)'i', (char)'s', (char)'i', (char)'o', (char)'n', (char)'s', (char)'\000'}, .type = 0, .sizeof_stat = 8, .stat_offset = 72}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'o', (char)'v', (char)'e', (char)'r', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s', (char)'\000'}, .type = 0, .sizeof_stat = 8, .stat_offset = 88}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'c', (char)'r', (char)'c', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s', (char)'\000'}, .type = 0, .sizeof_stat = 8, .stat_offset = 96}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s', (char)'\000'}, .type = 0, .sizeof_stat = 8, .stat_offset = 104}, {.stat_string = {(char)'h', (char)'w', (char)'_', (char)'r', (char)'s', (char)'c', (char)'_', (char)'a', (char)'g', (char)'g', (char)'r', (char)'e', (char)'g', (char)'a', (char)'t', (char)'e', (char)'d', (char)'\000'}, .type = 1, .sizeof_stat = 8, .stat_offset = 1648}, {.stat_string = {(char)'h', (char)'w', (char)'_', (char)'r', (char)'s', (char)'c', (char)'_', (char)'f', (char)'l', (char)'u', (char)'s', (char)'h', (char)'e', (char)'d', (char)'\000'}, .type = 1, .sizeof_stat = 8, .stat_offset = 1656}, {.stat_string = {(char)'f', (char)'d', (char)'i', (char)'r', (char)'_', (char)'m', (char)'a', (char)'t', (char)'c', (char)'h', (char)'\000'}, .type = 1, .sizeof_stat = 8, .stat_offset = 40224}, {.stat_string = {(char)'f', (char)'d', (char)'i', (char)'r', (char)'_', (char)'m', (char)'i', (char)'s', (char)'s', (char)'\000'}, .type = 1, .sizeof_stat = 8, .stat_offset = 40232}, {.stat_string = {(char)'f', (char)'d', (char)'i', (char)'r', (char)'_', (char)'o', (char)'v', (char)'e', (char)'r', (char)'f', (char)'l', (char)'o', (char)'w', (char)'\000'}, .type = 1, .sizeof_stat = 8, .stat_offset = 40584}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'f', (char)'i', (char)'f', (char)'o', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s', (char)'\000'}, .type = 0, .sizeof_stat = 8, .stat_offset = 112}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'m', (char)'i', (char)'s', (char)'s', (char)'e', (char)'d', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s', (char)'\000'}, .type = 0, .sizeof_stat = 8, .stat_offset = 120}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'a', (char)'b', (char)'o', (char)'r', (char)'t', (char)'e', (char)'d', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s', (char)'\000'}, .type = 0, .sizeof_stat = 8, .stat_offset = 128}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'c', (char)'a', (char)'r', (char)'r', (char)'i', (char)'e', (char)'r', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s', (char)'\000'}, .type = 0, .sizeof_stat = 8, .stat_offset = 136}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'f', (char)'i', (char)'f', (char)'o', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s', (char)'\000'}, .type = 0, .sizeof_stat = 8, .stat_offset = 144}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'h', (char)'e', (char)'a', (char)'r', (char)'t', (char)'b', (char)'e', (char)'a', (char)'t', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s', (char)'\000'}, .type = 0, .sizeof_stat = 8, .stat_offset = 152}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'t', (char)'i', (char)'m', (char)'e', (char)'o', (char)'u', (char)'t', (char)'_', (char)'c', (char)'o', (char)'u', (char)'n', (char)'t', (char)'\000'}, .type = 1, .sizeof_stat = 4, .stat_offset = 1104}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'r', (char)'e', (char)'s', (char)'t', (char)'a', (char)'r', (char)'t', (char)'_', (char)'q', (char)'u', (char)'e', (char)'u', (char)'e', (char)'\000'}, .type = 1, .sizeof_stat = 8, .stat_offset = 1088}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'l', (char)'o', (char)'n', (char)'g', (char)'_', (char)'l', (char)'e', (char)'n', (char)'g', (char)'t', (char)'h', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s', (char)'\000'}, .type = 1, .sizeof_stat = 8, .stat_offset = 39160}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'s', (char)'h', (char)'o', (char)'r', (char)'t', (char)'_', (char)'l', (char)'e', (char)'n', (char)'g', (char)'t', (char)'h', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s', (char)'\000'}, .type = 1, .sizeof_stat = 8, .stat_offset = 39144}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'f', (char)'l', (char)'o', (char)'w', (char)'_', (char)'c', (char)'o', (char)'n', (char)'t', (char)'r', (char)'o', (char)'l', (char)'_', (char)'x', (char)'o', (char)'n', (char)'\000'}, .type = 1, .sizeof_stat = 8, .stat_offset = 38696}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'f', (char)'l', (char)'o', (char)'w', (char)'_', (char)'c', (char)'o', (char)'n', (char)'t', (char)'r', (char)'o', (char)'l', (char)'_', (char)'x', (char)'o', (char)'n', (char)'\000'}, .type = 1, .sizeof_stat = 8, .stat_offset = 38704}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'f', (char)'l', (char)'o', (char)'w', (char)'_', (char)'c', (char)'o', (char)'n', (char)'t', (char)'r', (char)'o', (char)'l', (char)'_', (char)'x', (char)'o', (char)'f', (char)'f', (char)'\000'}, .type = 1, .sizeof_stat = 8, .stat_offset = 38712}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'f', (char)'l', (char)'o', (char)'w', (char)'_', (char)'c', (char)'o', (char)'n', (char)'t', (char)'r', (char)'o', (char)'l', (char)'_', (char)'x', (char)'o', (char)'f', (char)'f', (char)'\000'}, .type = 1, .sizeof_stat = 8, .stat_offset = 38720}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'c', (char)'s', (char)'u', (char)'m', (char)'_', (char)'o', (char)'f', (char)'f', (char)'l', (char)'o', (char)'a', (char)'d', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s', (char)'\000'}, .type = 1, .sizeof_stat = 8, .stat_offset = 1632}, {.stat_string = {(char)'a', (char)'l', (char)'l', (char)'o', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'p', (char)'a', (char)'g', (char)'e', (char)'_', (char)'f', (char)'a', (char)'i', (char)'l', (char)'e', (char)'d', (char)'\000'}, .type = 1, .sizeof_stat = 4, .stat_offset = 1672}, {.stat_string = {(char)'a', (char)'l', (char)'l', (char)'o', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'b', (char)'u', (char)'f', (char)'f', (char)'_', (char)'f', (char)'a', (char)'i', (char)'l', (char)'e', (char)'d', (char)'\000'}, .type = 1, .sizeof_stat = 4, .stat_offset = 1676}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'n', (char)'o', (char)'_', (char)'d', (char)'m', (char)'a', (char)'_', (char)'r', (char)'e', (char)'s', (char)'o', (char)'u', (char)'r', (char)'c', (char)'e', (char)'s', (char)'\000'}, .type = 1, .sizeof_stat = 8, .stat_offset = 1640}, {.stat_string = {(char)'o', (char)'s', (char)'2', (char)'b', (char)'m', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'b', (char)'y', (char)'_', (char)'b', (char)'m', (char)'c', (char)'\000'}, .type = 1, .sizeof_stat = 8, .stat_offset = 40320}, {.stat_string = {(char)'o', (char)'s', (char)'2', (char)'b', (char)'m', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'b', (char)'y', (char)'_', (char)'b', (char)'m', (char)'c', (char)'\000'}, .type = 1, .sizeof_stat = 8, .stat_offset = 40304}, {.stat_string = {(char)'o', (char)'s', (char)'2', (char)'b', (char)'m', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'b', (char)'y', (char)'_', (char)'h', (char)'o', (char)'s', (char)'t', (char)'\000'}, .type = 1, .sizeof_stat = 8, .stat_offset = 40328}, {.stat_string = {(char)'o', (char)'s', (char)'2', (char)'b', (char)'m', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'b', (char)'y', (char)'_', (char)'h', (char)'o', (char)'s', (char)'t', (char)'\000'}, .type = 1, .sizeof_stat = 8, .stat_offset = 40312}, {.stat_string = {(char)'f', (char)'c', (char)'o', (char)'e', (char)'_', (char)'b', (char)'a', (char)'d', (char)'_', (char)'f', (char)'c', (char)'c', (char)'r', (char)'c', (char)'\000'}, .type = 1, .sizeof_stat = 8, .stat_offset = 40240}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'f', (char)'c', (char)'o', (char)'e', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'p', (char)'e', (char)'d', (char)'\000'}, .type = 1, .sizeof_stat = 8, .stat_offset = 40248}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'f', (char)'c', (char)'o', (char)'e', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s', (char)'\000'}, .type = 1, .sizeof_stat = 8, .stat_offset = 40256}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'f', (char)'c', (char)'o', (char)'e', (char)'_', (char)'d', (char)'w', (char)'o', (char)'r', (char)'d', (char)'s', (char)'\000'}, .type = 1, .sizeof_stat = 8, .stat_offset = 40272}, {.stat_string = {(char)'f', (char)'c', (char)'o', (char)'e', (char)'_', (char)'n', (char)'o', (char)'d', (char)'d', (char)'p', (char)'\000'}, .type = 1, .sizeof_stat = 8, .stat_offset = 40288}, {.stat_string = {(char)'f', (char)'c', (char)'o', (char)'e', (char)'_', (char)'n', (char)'o', (char)'d', (char)'d', (char)'p', (char)'_', (char)'e', (char)'x', (char)'t', (char)'_', (char)'b', (char)'u', (char)'f', (char)'f', (char)'\000'}, .type = 1, .sizeof_stat = 8, .stat_offset = 40296}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'f', (char)'c', (char)'o', (char)'e', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s', (char)'\000'}, .type = 1, .sizeof_stat = 8, .stat_offset = 40264}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'f', (char)'c', (char)'o', (char)'e', (char)'_', (char)'d', (char)'w', (char)'o', (char)'r', (char)'d', (char)'s', (char)'\000'}, .type = 1, .sizeof_stat = 8, .stat_offset = 40280}};

#line 147  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_ethtool.c"
static char const ixgbe_gstrings_test[5U][32U] = {{(char)'R', (char)'e', (char)'g', (char)'i', (char)'s', (char)'t', (char)'e', (char)'r', (char)' ', (char)'t', (char)'e', (char)'s', (char)'t', (char)' ', (char)' ', (char)'(', (char)'o', (char)'f', (char)'f', (char)'l', (char)'i', (char)'n', (char)'e', (char)')', (char)'\000'}, {(char)'E', (char)'e', (char)'p', (char)'r', (char)'o', (char)'m', (char)' ', (char)'t', (char)'e', (char)'s', (char)'t', (char)' ', (char)' ', (char)' ', (char)' ', (char)'(', (char)'o', (char)'f', (char)'f', (char)'l', (char)'i', (char)'n', (char)'e', (char)')', (char)'\000'}, {(char)'I', (char)'n', (char)'t', (char)'e', (char)'r', (char)'r', (char)'u', (char)'p', (char)'t', (char)' ', (char)'t', (char)'e', (char)'s', (char)'t', (char)' ', (char)'(', (char)'o', (char)'f', (char)'f', (char)'l', (char)'i', (char)'n', (char)'e', (char)')', (char)'\000'}, {(char)'L', (char)'o', (char)'o', (char)'p', (char)'b', (char)'a', (char)'c', (char)'k', (char)' ', (char)'t', (char)'e', (char)'s', (char)'t', (char)' ', (char)' ', (char)'(', (char)'o', (char)'f', (char)'f', (char)'l', (char)'i', (char)'n', (char)'e', (char)')', (char)'\000'}, {(char)'L', (char)'i', (char)'n', (char)'k', (char)' ', (char)'t', (char)'e', (char)'s', (char)'t', (char)' ', (char)' ', (char)' ', (char)'(', (char)'o', (char)'n', (char)'/', (char)'o', (char)'f', (char)'f', (char)'l', (char)'i', (char)'n', (char)'e', (char)')', (char)'\000'}};

#line 154  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_ethtool.c"
static int ixgbe_get_settings(struct net_device *netdev, struct ethtool_cmd *ecmd)
{
  int __retres;
  ixgbe_link_speed supported_link;
  bool link_up;
  
#line 157 
  struct ixgbe_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 158 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 160 
  u32 link_speed = 0U;
  
#line 161 
  bool autoneg = (_Bool)0;
  
#line 164 
  (*(hw->mac.ops.get_link_capabilities))(hw,& supported_link,& autoneg);
  
#line 167 
  if ((supported_link & 128U) != 0U) 
#line 168 
                                     ecmd->supported |= 4096U; else ;
  
#line 169 
  if ((supported_link & 32U) != 0U) 
#line 170 
                                    ecmd->supported |= 32U; else ;
  
#line 171 
  if ((supported_link & 8U) != 0U) 
#line 172 
                                   ecmd->supported |= 8U; else ;
  
#line 175 
  if (hw->phy.autoneg_advertised != 0U) {
    
#line 176 
    if ((hw->phy.autoneg_advertised & 8U) != 0U) 
#line 177 
                                                 ecmd->advertising |= 8U; else ;
    
#line 178 
    if ((hw->phy.autoneg_advertised & 128U) != 0U) 
#line 179 
                                                   ecmd->advertising |= 4096U; else ;
    
#line 180 
    if ((hw->phy.autoneg_advertised & 32U) != 0U) 
#line 181 
                                                  ecmd->advertising |= 32U; else ;
  }
  else {
    
#line 184 
    if ((supported_link & 128U) != 0U) 
#line 185 
                                       ecmd->advertising |= 4096U; else ;
    
#line 186 
    if ((supported_link & 32U) != 0U) 
#line 187 
                                      ecmd->advertising |= 32U; else ;
    
#line 188 
    if ((supported_link & 8U) != 0U) 
#line 189 
                                     ecmd->advertising |= 8U; else ;
    
#line 191 
    if ((int)hw->phy.multispeed_fiber != 0 && ! autoneg) {
      
#line 192 
      if ((supported_link & 128U) != 0U) 
#line 193 
                                         ecmd->advertising = 4096U; else ;
    }
    else ;
  }
  
#line 197 
  if ((int)autoneg != 0) {
    
#line 198 
    ecmd->supported |= 64U;
    
#line 199 
    ecmd->advertising |= 64U;
    
#line 200 
    ecmd->autoneg = (unsigned char)1U;
  }
  else 
#line 202 
       ecmd->autoneg = (unsigned char)0U;
  
#line 204 
  ecmd->transceiver = (unsigned char)1U;
  
#line 207 
  switch ((unsigned int)adapter->hw.phy.type) {
    case (unsigned int)2: 
#line 208 
    ;
    case (unsigned int)3: 
#line 209 
    ;
    case (unsigned int)6: 
#line 210 
    ;
    case (unsigned int)7: 
#line 211 
    ;
    
#line 212 
    ecmd->supported |= 128U;
    
#line 213 
    ecmd->advertising |= 128U;
    
#line 214 
    ecmd->port = (unsigned char)0U;
    
#line 215 
    goto ldv_55942;
    case (unsigned int)8: 
#line 216 
    ;
    
#line 217 
    ecmd->supported |= 1024U;
    
#line 218 
    ecmd->advertising |= 1024U;
    
#line 219 
    ecmd->port = (unsigned char)3U;
    
#line 220 
    goto ldv_55942;
    case (unsigned int)10: 
#line 221 
    ;
    case (unsigned int)11: 
#line 222 
    ;
    case (unsigned int)12: 
#line 223 
    ;
    case (unsigned int)15: 
#line 224 
    ;
    case (unsigned int)14: 
#line 225 
    ;
    case (unsigned int)18: 
#line 226 
    ;
    case (unsigned int)17: 
#line 227 
    ;
    
#line 229 
    switch ((unsigned int)adapter->hw.phy.sfp_type) {
      case (unsigned int)0: 
#line 230 
      ;
      case (unsigned int)3: 
#line 231 
      ;
      case (unsigned int)4: 
#line 232 
      ;
      
#line 233 
      ecmd->supported |= 1024U;
      
#line 234 
      ecmd->advertising |= 1024U;
      
#line 235 
      ecmd->port = (unsigned char)5U;
      
#line 236 
      goto ldv_55954;
      case (unsigned int)1: 
#line 237 
      ;
      case (unsigned int)2: 
#line 238 
      ;
      case (unsigned int)5: 
#line 239 
      ;
      case (unsigned int)6: 
#line 240 
      ;
      case (unsigned int)11: 
#line 241 
      ;
      case (unsigned int)12: 
#line 242 
      ;
      case (unsigned int)13: 
#line 243 
      ;
      case (unsigned int)14: 
#line 244 
      ;
      
#line 245 
      ecmd->supported |= 1024U;
      
#line 246 
      ecmd->advertising |= 1024U;
      
#line 247 
      ecmd->port = (unsigned char)3U;
      
#line 248 
      goto ldv_55954;
      case (unsigned int)65534: 
#line 249 
      ;
      
#line 250 
      ecmd->supported |= 1024U;
      
#line 251 
      ecmd->advertising |= 1024U;
      
#line 252 
      ecmd->port = (unsigned char)239U;
      
#line 253 
      goto ldv_55954;
      case (unsigned int)9: 
#line 254 
      ;
      case (unsigned int)10: 
#line 255 
      ;
      
#line 256 
      ecmd->supported |= 128U;
      
#line 257 
      ecmd->advertising |= 128U;
      
#line 258 
      ecmd->port = (unsigned char)0U;
      
#line 259 
      goto ldv_55954;
      case (unsigned int)65535: 
#line 260 
      ;
      default: 
#line 261 
      ;
      
#line 262 
      ecmd->supported |= 1024U;
      
#line 263 
      ecmd->advertising |= 1024U;
      
#line 264 
      ecmd->port = (unsigned char)255U;
      
#line 265 
      goto ldv_55954;
    }
    ldv_55954: 
#line 267 
    ;
    
#line 267 
    goto ldv_55942;
    case (unsigned int)9: 
#line 268 
    ;
    
#line 269 
    ecmd->supported |= 1024U;
    
#line 270 
    ecmd->advertising |= 1024U;
    
#line 271 
    ecmd->port = (unsigned char)239U;
    
#line 272 
    goto ldv_55942;
    case (unsigned int)0: 
#line 273 
    ;
    case (unsigned int)24: 
#line 274 
    ;
    case (unsigned int)23: 
#line 275 
    ;
    default: 
#line 276 
    ;
    
#line 277 
    ecmd->supported |= 1024U;
    
#line 278 
    ecmd->advertising |= 1024U;
    
#line 279 
    ecmd->port = (unsigned char)255U;
    
#line 280 
    goto ldv_55942;
  }
  ldv_55942: 
#line 283 
  ;
  
#line 283 
  (*(hw->mac.ops.check_link))(hw,& link_speed,& link_up,(_Bool)0);
  
#line 284 
  if ((int)link_up != 0) {
    
#line 285 
    switch (link_speed) {
      case (u32)128: 
#line 286 
      ;
      
#line 287 
      ethtool_cmd_speed_set(ecmd,10000U);
      
#line 288 
      goto ldv_55974;
      case (u32)32: 
#line 289 
      ;
      
#line 290 
      ethtool_cmd_speed_set(ecmd,1000U);
      
#line 291 
      goto ldv_55974;
      case (u32)8: 
#line 292 
      ;
      
#line 293 
      ethtool_cmd_speed_set(ecmd,100U);
      
#line 294 
      goto ldv_55974;
      default: 
#line 295 
      ;
      
#line 296 
      goto ldv_55974;
    }
    ldv_55974: 
#line 298 
    ;
    
#line 298 
    ecmd->duplex = (unsigned char)1U;
  }
  else {
    
#line 300 
    ethtool_cmd_speed_set(ecmd,4294967295U);
    
#line 301 
    ecmd->duplex = (unsigned char)255U;
  }
  
#line 304 
  __retres = 0;
  
#line 304 
  return __retres;
}


#line 307  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_ethtool.c"
static int ixgbe_set_settings(struct net_device *netdev, struct ethtool_cmd *ecmd)
{
  int __retres;
  u32 advertised;
  u32 old;
  
#line 310 
  struct ixgbe_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 311 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 313 
  s32 err = 0;
  
#line 315 
  if (hw->phy.media_type == (unsigned int)ixgbe_media_type_copper || (int)hw->phy.multispeed_fiber != 0) {
    int tmp_0;
    
#line 321 
    if ((ecmd->advertising & ~ ecmd->supported) != 0U) {
      
#line 322 
      __retres = -22;
      
#line 322 
      goto return_label;
    }
    else ;
    
#line 325 
    if ((unsigned int)ecmd->autoneg == 0U && (int)hw->phy.multispeed_fiber != 0) {
      
#line 326 
      if (ecmd->advertising == 4128U) {
        
#line 329 
        __retres = -22;
        
#line 329 
        goto return_label;
      }
      else ;
    }
    else ;
    
#line 332 
    old = hw->phy.autoneg_advertised;
    
#line 333 
    advertised = 0U;
    
#line 334 
    if ((ecmd->advertising & 4096U) != 0U) 
#line 335 
                                           advertised |= 128U; else ;
    
#line 337 
    if ((ecmd->advertising & 32U) != 0U) 
#line 338 
                                         advertised |= 32U; else ;
    
#line 340 
    if ((ecmd->advertising & 8U) != 0U) 
#line 341 
                                        advertised |= 8U; else ;
    
#line 343 
    if (old == advertised) {
      
#line 344 
      __retres = err;
      
#line 344 
      goto return_label;
    }
    else ;
    
#line 346 
    goto ldv_55988;
    ldv_55987: 
#line 347 
    ;
    
#line 347 
    usleep_range(1000UL,2000UL);
    ldv_55988: 
#line 348 
    ;
    
#line 346 
    tmp_0 = test_and_set_bit(7L,(unsigned long volatile *)(& adapter->state));
    
#line 346 
    if (tmp_0 != 0) 
#line 348 
                    goto ldv_55987; else 
#line 351 
                                         goto ldv_55989;
    ldv_55989: 
#line 352 
    ;
    
#line 349 
    hw->mac.autotry_restart = (_Bool)1;
    
#line 350 
    err = (*(hw->mac.ops.setup_link))(hw,advertised,(_Bool)1);
    
#line 351 
    if (err != 0) {
      
#line 352 
      if (((int)adapter->msg_enable & 2) != 0) 
#line 352 
                                               netdev_info((struct net_device const *)adapter->netdev,"setup link failed with code %d\n",err); else ;
      
#line 353 
      (*(hw->mac.ops.setup_link))(hw,old,(_Bool)1);
    }
    else ;
    
#line 355 
    set_bit(7L,(unsigned long volatile *)(& adapter->state));
  }
  else {
    
#line 358 
    u32 speed = ethtool_cmd_speed((struct ethtool_cmd const *)ecmd);
    
#line 359 
    if (((unsigned int)ecmd->autoneg == 1U || ecmd->advertising != 4096U) || (unsigned int)ecmd->duplex + speed != 10001U) {
      
#line 362 
      __retres = -22;
      
#line 362 
      goto return_label;
    }
    else ;
  }
  
#line 365 
  __retres = err;
  return_label: 
#line 365 
                return __retres;
}


#line 368  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_ethtool.c"
static void ixgbe_get_pauseparam(struct net_device *netdev, struct ethtool_pauseparam *pause)
{
  bool tmp_0;
  
#line 371 
  struct ixgbe_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 372 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 374 
  tmp_0 = ixgbe_device_supports_autoneg_fc(hw);
  
#line 374 
  if ((int)tmp_0 != 0) 
    
#line 375 
    if (! hw->fc.disable_fc_autoneg) 
#line 376 
                                     pause->autoneg = 1U; else 
#line 378 
                                                               pause->autoneg = 0U;
  else 
#line 378 
       pause->autoneg = 0U;
  
#line 380 
  if (hw->fc.current_mode == (unsigned int)ixgbe_fc_rx_pause) 
#line 381 
                                                              pause->rx_pause = 1U;
  else 
    
#line 382 
    if (hw->fc.current_mode == (unsigned int)ixgbe_fc_tx_pause) 
#line 383 
                                                                pause->tx_pause = 1U;
    else 
      
#line 384 
      if (hw->fc.current_mode == (unsigned int)ixgbe_fc_full) {
        
#line 385 
        pause->rx_pause = 1U;
        
#line 386 
        pause->tx_pause = 1U;
      }
      else ;
  
#line 388 
  return;
}


#line 390  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_ethtool.c"
static int ixgbe_set_pauseparam(struct net_device *netdev, struct ethtool_pauseparam *pause)
{
  int __retres;
  int tmp_3;
  
#line 393 
  struct ixgbe_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 394 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 395 
  struct ixgbe_fc_info fc = hw->fc;
  
#line 398 
  if (hw->mac.type == (unsigned int)ixgbe_mac_82598EB && (adapter->flags & 4096U) != 0U) {
    
#line 400 
    __retres = -22;
    
#line 400 
    goto return_label;
  }
  else ;
  
#line 403 
  if (pause->autoneg == 1U) {
    int tmp_1;
    bool tmp_0;
    
#line 404 
    tmp_0 = ixgbe_device_supports_autoneg_fc(hw);
    
#line 404 
    if (tmp_0) 
#line 404 
               tmp_1 = 0; else 
#line 404 
                               tmp_1 = 1;
    
#line 404 
    if (tmp_1) {
      
#line 405 
      __retres = -22;
      
#line 405 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 407 
  fc.disable_fc_autoneg = (_Bool)(pause->autoneg != 1U);
  
#line 409 
  if ((pause->rx_pause != 0U && pause->tx_pause != 0U) || pause->autoneg != 0U) 
    
#line 410 
    fc.requested_mode = ixgbe_fc_full;
  else 
    
#line 411 
    if (pause->rx_pause != 0U && pause->tx_pause == 0U) 
#line 412 
                                                        fc.requested_mode = ixgbe_fc_rx_pause;
    else 
      
#line 413 
      if (pause->rx_pause == 0U && pause->tx_pause != 0U) 
#line 414 
                                                          fc.requested_mode = ixgbe_fc_tx_pause; else 
                                                                    
#line 416 
                                                                    fc.requested_mode = ixgbe_fc_none;
  
#line 419 
  tmp_3 = memcmp((void const *)(& fc),(void const *)(& hw->fc),80UL);
  
#line 419 
  if (tmp_3 != 0) {
    bool tmp_2;
    
#line 420 
    hw->fc = fc;
    
#line 421 
    tmp_2 = netif_running((struct net_device const *)netdev);
    
#line 421 
    if ((int)tmp_2 != 0) 
#line 422 
                         ixgbe_reinit_locked(adapter); else 
#line 424 
                                                            ixgbe_reset(adapter);
  }
  else ;
  
#line 427 
  __retres = 0;
  return_label: 
#line 427 
                return __retres;
}


#line 430  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_ethtool.c"
static u32 ixgbe_get_msglevel(struct net_device *netdev)
{
  u32 __retres;
  
#line 432 
  struct ixgbe_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 433 
  __retres = (unsigned int)adapter->msg_enable;
  
#line 433 
  return __retres;
}


#line 436  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_ethtool.c"
static void ixgbe_set_msglevel(struct net_device *netdev, u32 data)
{
  
#line 438 
  struct ixgbe_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 439 
  adapter->msg_enable = (unsigned short)data;
  
#line 440 
  return;
}


#line 442  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_ethtool.c"
static int ixgbe_get_regs_len(struct net_device *netdev)
{
  int __retres;
  
#line 445 
  __retres = 4556;
  
#line 445 
  return __retres;
}


#line 450  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_ethtool.c"
static void ixgbe_get_regs(struct net_device *netdev, struct ethtool_regs *regs, void *p)
{
  u8 i;
  int tmp_0;
  int tmp_1;
  int tmp_2;
  int tmp_3;
  int tmp_4;
  int tmp_5;
  int tmp_7;
  int tmp_9;
  int tmp_10;
  int tmp_11;
  
#line 453 
  struct ixgbe_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 454 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 455 
  u32 *regs_buff = (u32 *)p;
  
#line 458 
  memset(p,0,4556UL);
  
#line 460 
  regs->version = (((unsigned int)hw->mac.type << 24) | (unsigned int)((int)hw->revision_id << 16)) | (unsigned int)hw->device_id;
  
#line 464 
  *regs_buff = ixgbe_read_reg(hw,0U);
  
#line 465 
  *(regs_buff + 1U) = ixgbe_read_reg(hw,8U);
  
#line 466 
  *(regs_buff + 2U) = ixgbe_read_reg(hw,24U);
  
#line 467 
  *(regs_buff + 3U) = ixgbe_read_reg(hw,32U);
  
#line 468 
  *(regs_buff + 4U) = ixgbe_read_reg(hw,40U);
  
#line 469 
  *(regs_buff + 5U) = ixgbe_read_reg(hw,512U);
  
#line 470 
  *(regs_buff + 6U) = ixgbe_read_reg(hw,72U);
  
#line 471 
  *(regs_buff + 7U) = ixgbe_read_reg(hw,76U);
  
#line 474 
  *(regs_buff + 8U) = ixgbe_read_reg(hw,*(hw->mvals));
  
#line 475 
  *(regs_buff + 9U) = ixgbe_read_reg(hw,65556U);
  
#line 476 
  *(regs_buff + 10U) = ixgbe_read_reg(hw,*(hw->mvals + 1U));
  
#line 477 
  *(regs_buff + 11U) = ixgbe_read_reg(hw,65808U);
  
#line 478 
  *(regs_buff + 12U) = ixgbe_read_reg(hw,65812U);
  
#line 479 
  *(regs_buff + 13U) = ixgbe_read_reg(hw,65816U);
  
#line 480 
  *(regs_buff + 14U) = ixgbe_read_reg(hw,65820U);
  
#line 481 
  *(regs_buff + 15U) = ixgbe_read_reg(hw,65824U);
  
#line 482 
  *(regs_buff + 16U) = ixgbe_read_reg(hw,65852U);
  
#line 483 
  *(regs_buff + 17U) = ixgbe_read_reg(hw,*(hw->mvals + 2U));
  
#line 488 
  *(regs_buff + 18U) = ixgbe_read_reg(hw,2056U);
  
#line 489 
  *(regs_buff + 19U) = ixgbe_read_reg(hw,2056U);
  
#line 490 
  *(regs_buff + 20U) = ixgbe_read_reg(hw,2176U);
  
#line 491 
  *(regs_buff + 21U) = ixgbe_read_reg(hw,2184U);
  
#line 492 
  *(regs_buff + 22U) = ixgbe_read_reg(hw,2064U);
  
#line 493 
  *(regs_buff + 23U) = ixgbe_read_reg(hw,2192U);
  
#line 494 
  *(regs_buff + 24U) = ixgbe_read_reg(hw,2080U);
  
#line 495 
  *(regs_buff + 25U) = ixgbe_read_reg(hw,2304U);
  
#line 496 
  *(regs_buff + 26U) = ixgbe_read_reg(hw,0U);
  
#line 497 
  *(regs_buff + 27U) = ixgbe_read_reg(hw,8192U);
  
#line 498 
  *(regs_buff + 28U) = ixgbe_read_reg(hw,69736U);
  
#line 499 
  *(regs_buff + 29U) = ixgbe_read_reg(hw,2200U);
  
#line 502 
  *(regs_buff + 30U) = ixgbe_read_reg(hw,12296U);
  
#line 503 
  *(regs_buff + 31U) = ixgbe_read_reg(hw,12800U);
  
#line 504 
  *(regs_buff + 32U) = ixgbe_read_reg(hw,12804U);
  
#line 505 
  *(regs_buff + 33U) = ixgbe_read_reg(hw,12808U);
  
#line 506 
  *(regs_buff + 34U) = ixgbe_read_reg(hw,12812U);
  
#line 507 
  i = (unsigned char)0U;
  
#line 507 
  goto ldv_56033;
  ldv_56032: 
#line 508 
  ;
  
#line 508 
  switch ((unsigned int)hw->mac.type) {
    case (unsigned int)1: 
#line 509 
    ;
    
#line 510 
    *(regs_buff + ((int)i + 35)) = ixgbe_read_reg(hw,(unsigned int)(((int)i + 1604) * 8));
    
#line 511 
    *(regs_buff + ((int)i + 43)) = ixgbe_read_reg(hw,(unsigned int)(((int)i + 1612) * 8));
    
#line 512 
    goto ldv_56026;
    case (unsigned int)2: 
#line 513 
    ;
    case (unsigned int)3: 
#line 514 
    ;
    case (unsigned int)4: 
#line 515 
    ;
    case (unsigned int)5: 
#line 516 
    ;
    
#line 517 
    *(regs_buff + ((int)i + 35)) = ixgbe_read_reg(hw,(unsigned int)(((int)i + 3208) * 4));
    
#line 518 
    *(regs_buff + ((int)i + 43)) = ixgbe_read_reg(hw,(unsigned int)(((int)i + 3224) * 4));
    
#line 519 
    goto ldv_56026;
    default: 
#line 520 
    ;
    
#line 521 
    goto ldv_56026;
  }
  ldv_56026: 
#line 523 
  ;
  
#line 507 
  i = (u8)((int)i + 1);
  ldv_56033: 
#line 508 
  ;
  
#line 507 
  if ((unsigned int)i <= 7U) 
#line 509 
                             goto ldv_56032; else 
#line 512 
                                                  goto ldv_56034;
  ldv_56034: 
#line 513 
  ;
  
#line 524 
  *(regs_buff + 51U) = ixgbe_read_reg(hw,12960U);
  
#line 525 
  *(regs_buff + 52U) = ixgbe_read_reg(hw,52736U);
  
#line 528 
  i = (unsigned char)0U;
  
#line 528 
  goto ldv_56036;
  ldv_56035: 
#line 529 
  ;
  
#line 529 
  if ((unsigned int)i <= 63U) 
#line 529 
                              tmp_0 = ((int)i + 64) * 64; else 
#line 529 
                                                               tmp_0 = ((int)i + 768) * 64;
  
#line 529 
  ;
  
#line 529 
  *(regs_buff + ((int)i + 53)) = ixgbe_read_reg(hw,(unsigned int)tmp_0);
  
#line 528 
  i = (u8)((int)i + 1);
  ldv_56036: 
#line 529 
  ;
  
#line 528 
  if ((unsigned int)i <= 63U) 
#line 530 
                              goto ldv_56035; else 
#line 533 
                                                   goto ldv_56037;
  ldv_56037: 
#line 534 
  ;
  
#line 530 
  i = (unsigned char)0U;
  
#line 530 
  goto ldv_56039;
  ldv_56038: 
#line 531 
  ;
  
#line 531 
  if ((unsigned int)i <= 63U) 
#line 531 
                              tmp_1 = (int)i * 64 + 4100; else 
#line 531 
                                                               tmp_1 = ((int)i + -64) * 64 + 53252;
  
#line 531 
  ;
  
#line 531 
  *(regs_buff + ((int)i + 117)) = ixgbe_read_reg(hw,(unsigned int)tmp_1);
  
#line 530 
  i = (u8)((int)i + 1);
  ldv_56039: 
#line 531 
  ;
  
#line 530 
  if ((unsigned int)i <= 63U) 
#line 532 
                              goto ldv_56038; else 
#line 535 
                                                   goto ldv_56040;
  ldv_56040: 
#line 536 
  ;
  
#line 532 
  i = (unsigned char)0U;
  
#line 532 
  goto ldv_56042;
  ldv_56041: 
#line 533 
  ;
  
#line 533 
  if ((unsigned int)i <= 63U) 
#line 533 
                              tmp_2 = (int)i * 64 + 4104; else 
#line 533 
                                                               tmp_2 = ((int)i + -64) * 64 + 53256;
  
#line 533 
  ;
  
#line 533 
  *(regs_buff + ((int)i + 181)) = ixgbe_read_reg(hw,(unsigned int)tmp_2);
  
#line 532 
  i = (u8)((int)i + 1);
  ldv_56042: 
#line 533 
  ;
  
#line 532 
  if ((unsigned int)i <= 63U) 
#line 534 
                              goto ldv_56041; else 
#line 537 
                                                   goto ldv_56043;
  ldv_56043: 
#line 538 
  ;
  
#line 534 
  i = (unsigned char)0U;
  
#line 534 
  goto ldv_56045;
  ldv_56044: 
#line 535 
  ;
  
#line 535 
  if ((unsigned int)i <= 63U) 
#line 535 
                              tmp_3 = (int)i * 64 + 4112; else 
#line 535 
                                                               tmp_3 = ((int)i + -64) * 64 + 53264;
  
#line 535 
  ;
  
#line 535 
  *(regs_buff + ((int)i + 245)) = ixgbe_read_reg(hw,(unsigned int)tmp_3);
  
#line 534 
  i = (u8)((int)i + 1);
  ldv_56045: 
#line 535 
  ;
  
#line 534 
  if ((unsigned int)i <= 63U) 
#line 536 
                              goto ldv_56044; else 
#line 539 
                                                   goto ldv_56046;
  ldv_56046: 
#line 540 
  ;
  
#line 536 
  i = (unsigned char)0U;
  
#line 536 
  goto ldv_56048;
  ldv_56047: 
#line 537 
  ;
  
#line 537 
  if ((unsigned int)i <= 63U) 
#line 537 
                              tmp_4 = (int)i * 64 + 4120; else 
#line 537 
                                                               tmp_4 = ((int)i + -64) * 64 + 53272;
  
#line 537 
  ;
  
#line 537 
  *(regs_buff + ((int)i + 309)) = ixgbe_read_reg(hw,(unsigned int)tmp_4);
  
#line 536 
  i = (u8)((int)i + 1);
  ldv_56048: 
#line 537 
  ;
  
#line 536 
  if ((unsigned int)i <= 63U) 
#line 538 
                              goto ldv_56047; else 
#line 541 
                                                   goto ldv_56049;
  ldv_56049: 
#line 542 
  ;
  
#line 538 
  i = (unsigned char)0U;
  
#line 538 
  goto ldv_56051;
  ldv_56050: 
#line 539 
  ;
  
#line 539 
  if ((unsigned int)i <= 63U) 
#line 539 
                              tmp_5 = (int)i * 64 + 4136; else 
#line 539 
                                                               tmp_5 = ((int)i + -64) * 64 + 53288;
  
#line 539 
  ;
  
#line 539 
  *(regs_buff + ((int)i + 373)) = ixgbe_read_reg(hw,(unsigned int)tmp_5);
  
#line 538 
  i = (u8)((int)i + 1);
  ldv_56051: 
#line 539 
  ;
  
#line 538 
  if ((unsigned int)i <= 63U) 
#line 540 
                              goto ldv_56050; else 
#line 543 
                                                   goto ldv_56052;
  ldv_56052: 
#line 544 
  ;
  
#line 540 
  i = (unsigned char)0U;
  
#line 540 
  goto ldv_56054;
  ldv_56053: 
#line 541 
  ;
  
#line 541 
  if ((unsigned int)i <= 15U) 
#line 541 
                              tmp_7 = ((int)i + 2112) * 4;
  else {
    int tmp_6;
    
#line 541 
    if ((unsigned int)i <= 63U) 
#line 541 
                                tmp_6 = (int)i * 64 + 4116; else 
#line 541 
                                                                 tmp_6 = ((int)i + -64) * 64 + 53268;
    
#line 541 
    tmp_7 = tmp_6;
  }
  
#line 541 
  ;
  
#line 541 
  *(regs_buff + ((int)i + 437)) = ixgbe_read_reg(hw,(unsigned int)tmp_7);
  
#line 540 
  i = (u8)((int)i + 1);
  ldv_56054: 
#line 541 
  ;
  
#line 540 
  if ((unsigned int)i <= 15U) 
#line 542 
                              goto ldv_56053; else 
#line 545 
                                                   goto ldv_56055;
  ldv_56055: 
#line 546 
  ;
  
#line 542 
  i = (unsigned char)0U;
  
#line 542 
  goto ldv_56057;
  ldv_56056: 
#line 543 
  ;
  
#line 543 
  if ((unsigned int)i <= 15U) 
#line 543 
                              tmp_9 = ((int)i + 2176) * 4;
  else {
    int tmp_8;
    
#line 543 
    if ((unsigned int)i <= 63U) 
#line 543 
                                tmp_8 = (int)i * 64 + 4108; else 
#line 543 
                                                                 tmp_8 = ((int)i + -64) * 64 + 53260;
    
#line 543 
    tmp_9 = tmp_8;
  }
  
#line 543 
  ;
  
#line 543 
  *(regs_buff + ((int)i + 453)) = ixgbe_read_reg(hw,(unsigned int)tmp_9);
  
#line 542 
  i = (u8)((int)i + 1);
  ldv_56057: 
#line 543 
  ;
  
#line 542 
  if ((unsigned int)i <= 15U) 
#line 544 
                              goto ldv_56056; else 
#line 547 
                                                   goto ldv_56058;
  ldv_56058: 
#line 548 
  ;
  
#line 544 
  *(regs_buff + 469U) = ixgbe_read_reg(hw,12032U);
  
#line 545 
  i = (unsigned char)0U;
  
#line 545 
  goto ldv_56060;
  ldv_56059: 
#line 546 
  ;
  
#line 546 
  *(regs_buff + ((int)i + 470)) = ixgbe_read_reg(hw,(unsigned int)(((int)i + 3840) * 4));
  
#line 545 
  i = (u8)((int)i + 1);
  ldv_56060: 
#line 546 
  ;
  
#line 545 
  if ((unsigned int)i <= 7U) 
#line 547 
                             goto ldv_56059; else 
#line 550 
                                                  goto ldv_56061;
  ldv_56061: 
#line 551 
  ;
  
#line 547 
  *(regs_buff + 478U) = ixgbe_read_reg(hw,12288U);
  
#line 548 
  *(regs_buff + 479U) = ixgbe_read_reg(hw,15620U);
  
#line 551 
  *(regs_buff + 480U) = ixgbe_read_reg(hw,20480U);
  
#line 552 
  *(regs_buff + 481U) = ixgbe_read_reg(hw,20488U);
  
#line 553 
  i = (unsigned char)0U;
  
#line 553 
  goto ldv_56063;
  ldv_56062: 
#line 554 
  ;
  
#line 554 
  if ((unsigned int)i <= 15U) 
#line 554 
                              tmp_10 = ((int)i + 2688) * 8; else 
#line 554 
                                                                 tmp_10 = ((int)i + 5184) * 8;
  
#line 554 
  ;
  
#line 554 
  *(regs_buff + ((int)i + 482)) = ixgbe_read_reg(hw,(unsigned int)tmp_10);
  
#line 553 
  i = (u8)((int)i + 1);
  ldv_56063: 
#line 554 
  ;
  
#line 553 
  if ((unsigned int)i <= 15U) 
#line 555 
                              goto ldv_56062; else 
#line 558 
                                                   goto ldv_56064;
  ldv_56064: 
#line 559 
  ;
  
#line 555 
  i = (unsigned char)0U;
  
#line 555 
  goto ldv_56066;
  ldv_56065: 
#line 556 
  ;
  
#line 556 
  if ((unsigned int)i <= 15U) 
#line 556 
                              tmp_11 = (int)i * 8 + 21508; else 
#line 556 
                                                                tmp_11 = (int)i * 8 + 41476;
  
#line 556 
  ;
  
#line 556 
  *(regs_buff + ((int)i + 498)) = ixgbe_read_reg(hw,(unsigned int)tmp_11);
  
#line 555 
  i = (u8)((int)i + 1);
  ldv_56066: 
#line 556 
  ;
  
#line 555 
  if ((unsigned int)i <= 15U) 
#line 557 
                              goto ldv_56065; else 
#line 560 
                                                   goto ldv_56067;
  ldv_56067: 
#line 561 
  ;
  
#line 557 
  *(regs_buff + 514U) = ixgbe_read_reg(hw,21632U);
  
#line 558 
  *(regs_buff + 515U) = ixgbe_read_reg(hw,20608U);
  
#line 559 
  *(regs_buff + 516U) = ixgbe_read_reg(hw,20616U);
  
#line 560 
  *(regs_buff + 517U) = ixgbe_read_reg(hw,20624U);
  
#line 561 
  *(regs_buff + 518U) = ixgbe_read_reg(hw,22552U);
  
#line 562 
  *(regs_buff + 519U) = ixgbe_read_reg(hw,22556U);
  
#line 563 
  i = (unsigned char)0U;
  
#line 563 
  goto ldv_56069;
  ldv_56068: 
#line 564 
  ;
  
#line 564 
  *(regs_buff + ((int)i + 520)) = ixgbe_read_reg(hw,(unsigned int)(((int)i + 5792) * 4));
  
#line 563 
  i = (u8)((int)i + 1);
  ldv_56069: 
#line 564 
  ;
  
#line 563 
  if ((unsigned int)i <= 7U) 
#line 565 
                             goto ldv_56068; else 
#line 568 
                                                  goto ldv_56070;
  ldv_56070: 
#line 569 
  ;
  
#line 565 
  i = (unsigned char)0U;
  
#line 565 
  goto ldv_56072;
  ldv_56071: 
#line 566 
  ;
  
#line 566 
  *(regs_buff + ((int)i + 528)) = ixgbe_read_reg(hw,(unsigned int)(((int)i + 5800) * 4));
  
#line 565 
  i = (u8)((int)i + 1);
  ldv_56072: 
#line 566 
  ;
  
#line 565 
  if ((unsigned int)i <= 7U) 
#line 567 
                             goto ldv_56071; else 
#line 570 
                                                  goto ldv_56073;
  ldv_56073: 
#line 571 
  ;
  
#line 567 
  *(regs_buff + 536U) = ixgbe_read_reg(hw,23232U);
  
#line 570 
  i = (unsigned char)0U;
  
#line 570 
  goto ldv_56075;
  ldv_56074: 
#line 571 
  ;
  
#line 571 
  *(regs_buff + ((int)i + 537)) = ixgbe_read_reg(hw,(unsigned int)(((int)i + 384) * 64));
  
#line 570 
  i = (u8)((int)i + 1);
  ldv_56075: 
#line 571 
  ;
  
#line 570 
  if ((unsigned int)i <= 31U) 
#line 572 
                              goto ldv_56074; else 
#line 575 
                                                   goto ldv_56076;
  ldv_56076: 
#line 576 
  ;
  
#line 572 
  i = (unsigned char)0U;
  
#line 572 
  goto ldv_56078;
  ldv_56077: 
#line 573 
  ;
  
#line 573 
  *(regs_buff + ((int)i + 569)) = ixgbe_read_reg(hw,(unsigned int)((int)i * 64 + 24580));
  
#line 572 
  i = (u8)((int)i + 1);
  ldv_56078: 
#line 573 
  ;
  
#line 572 
  if ((unsigned int)i <= 31U) 
#line 574 
                              goto ldv_56077; else 
#line 577 
                                                   goto ldv_56079;
  ldv_56079: 
#line 578 
  ;
  
#line 574 
  i = (unsigned char)0U;
  
#line 574 
  goto ldv_56081;
  ldv_56080: 
#line 575 
  ;
  
#line 575 
  *(regs_buff + ((int)i + 601)) = ixgbe_read_reg(hw,(unsigned int)((int)i * 64 + 24584));
  
#line 574 
  i = (u8)((int)i + 1);
  ldv_56081: 
#line 575 
  ;
  
#line 574 
  if ((unsigned int)i <= 31U) 
#line 576 
                              goto ldv_56080; else 
#line 579 
                                                   goto ldv_56082;
  ldv_56082: 
#line 580 
  ;
  
#line 576 
  i = (unsigned char)0U;
  
#line 576 
  goto ldv_56084;
  ldv_56083: 
#line 577 
  ;
  
#line 577 
  *(regs_buff + ((int)i + 633)) = ixgbe_read_reg(hw,(unsigned int)((int)i * 64 + 24592));
  
#line 576 
  i = (u8)((int)i + 1);
  ldv_56084: 
#line 577 
  ;
  
#line 576 
  if ((unsigned int)i <= 31U) 
#line 578 
                              goto ldv_56083; else 
#line 581 
                                                   goto ldv_56085;
  ldv_56085: 
#line 582 
  ;
  
#line 578 
  i = (unsigned char)0U;
  
#line 578 
  goto ldv_56087;
  ldv_56086: 
#line 579 
  ;
  
#line 579 
  *(regs_buff + ((int)i + 665)) = ixgbe_read_reg(hw,(unsigned int)((int)i * 64 + 24600));
  
#line 578 
  i = (u8)((int)i + 1);
  ldv_56087: 
#line 579 
  ;
  
#line 578 
  if ((unsigned int)i <= 31U) 
#line 580 
                              goto ldv_56086; else 
#line 583 
                                                   goto ldv_56088;
  ldv_56088: 
#line 584 
  ;
  
#line 580 
  i = (unsigned char)0U;
  
#line 580 
  goto ldv_56090;
  ldv_56089: 
#line 581 
  ;
  
#line 581 
  *(regs_buff + ((int)i + 697)) = ixgbe_read_reg(hw,(unsigned int)((int)i * 64 + 24616));
  
#line 580 
  i = (u8)((int)i + 1);
  ldv_56090: 
#line 581 
  ;
  
#line 580 
  if ((unsigned int)i <= 31U) 
#line 582 
                              goto ldv_56089; else 
#line 585 
                                                   goto ldv_56091;
  ldv_56091: 
#line 586 
  ;
  
#line 582 
  i = (unsigned char)0U;
  
#line 582 
  goto ldv_56093;
  ldv_56092: 
#line 583 
  ;
  
#line 583 
  *(regs_buff + ((int)i + 729)) = ixgbe_read_reg(hw,(unsigned int)((int)i * 64 + 24632));
  
#line 582 
  i = (u8)((int)i + 1);
  ldv_56093: 
#line 583 
  ;
  
#line 582 
  if ((unsigned int)i <= 31U) 
#line 584 
                              goto ldv_56092; else 
#line 587 
                                                   goto ldv_56094;
  ldv_56094: 
#line 588 
  ;
  
#line 584 
  i = (unsigned char)0U;
  
#line 584 
  goto ldv_56096;
  ldv_56095: 
#line 585 
  ;
  
#line 585 
  *(regs_buff + ((int)i + 761)) = ixgbe_read_reg(hw,(unsigned int)((int)i * 64 + 24636));
  
#line 584 
  i = (u8)((int)i + 1);
  ldv_56096: 
#line 585 
  ;
  
#line 584 
  if ((unsigned int)i <= 31U) 
#line 586 
                              goto ldv_56095; else 
#line 589 
                                                   goto ldv_56097;
  ldv_56097: 
#line 590 
  ;
  
#line 586 
  *(regs_buff + 793U) = ixgbe_read_reg(hw,32256U);
  
#line 587 
  i = (unsigned char)0U;
  
#line 587 
  goto ldv_56099;
  ldv_56098: 
#line 588 
  ;
  
#line 588 
  *(regs_buff + ((int)i + 794)) = ixgbe_read_reg(hw,(unsigned int)(((int)i + 7296) * 4));
  
#line 587 
  i = (u8)((int)i + 1);
  ldv_56099: 
#line 588 
  ;
  
#line 587 
  if ((unsigned int)i <= 15U) 
#line 589 
                              goto ldv_56098; else 
#line 592 
                                                   goto ldv_56100;
  ldv_56100: 
#line 593 
  ;
  
#line 589 
  *(regs_buff + 810U) = ixgbe_read_reg(hw,51968U);
  
#line 590 
  i = (unsigned char)0U;
  
#line 590 
  goto ldv_56102;
  ldv_56101: 
#line 591 
  ;
  
#line 591 
  *(regs_buff + ((int)i + 811)) = ixgbe_read_reg(hw,(unsigned int)(((int)i + 13056) * 4));
  
#line 590 
  i = (u8)((int)i + 1);
  ldv_56102: 
#line 591 
  ;
  
#line 590 
  if ((unsigned int)i <= 7U) 
#line 592 
                             goto ldv_56101; else 
#line 595 
                                                  goto ldv_56103;
  ldv_56103: 
#line 596 
  ;
  
#line 592 
  *(regs_buff + 819U) = ixgbe_read_reg(hw,52496U);
  
#line 595 
  *(regs_buff + 820U) = ixgbe_read_reg(hw,22528U);
  
#line 596 
  *(regs_buff + 821U) = ixgbe_read_reg(hw,22536U);
  
#line 597 
  *(regs_buff + 822U) = ixgbe_read_reg(hw,22544U);
  
#line 598 
  *(regs_buff + 823U) = ixgbe_read_reg(hw,22584U);
  
#line 599 
  *(regs_buff + 824U) = ixgbe_read_reg(hw,22592U);
  
#line 600 
  *(regs_buff + 825U) = ixgbe_read_reg(hw,22656U);
  
#line 601 
  *(regs_buff + 826U) = ixgbe_read_reg(hw,22784U);
  
#line 602 
  *(regs_buff + 827U) = ixgbe_read_reg(hw,23040U);
  
#line 603 
  *(regs_buff + 828U) = ixgbe_read_reg(hw,36864U);
  
#line 606 
  *(regs_buff + 829U) = ixgbe_read_reg(hw,15616U);
  
#line 607 
  *(regs_buff + 831U) = ixgbe_read_reg(hw,52480U);
  
#line 609 
  switch ((unsigned int)hw->mac.type) {
    case (unsigned int)1: 
#line 610 
    ;
    
#line 611 
    *(regs_buff + 830U) = ixgbe_read_reg(hw,32576U);
    
#line 612 
    *(regs_buff + 832U) = ixgbe_read_reg(hw,20640U);
    
#line 613 
    i = (unsigned char)0U;
    
#line 613 
    goto ldv_56106;
    ldv_56105: 
#line 614 
    ;
    
#line 614 
    *(regs_buff + ((int)i + 833)) = ixgbe_read_reg(hw,(unsigned int)(((int)i + 3848) * 4));
    
#line 613 
    i = (u8)((int)i + 1);
    ldv_56106: 
#line 614 
    ;
    
#line 613 
    if ((unsigned int)i <= 7U) 
#line 615 
                               goto ldv_56105; else 
#line 618 
                                                    goto ldv_56107;
    ldv_56107: 
#line 619 
    ;
    
#line 616 
    i = (unsigned char)0U;
    
#line 616 
    goto ldv_56109;
    ldv_56108: 
#line 617 
    ;
    
#line 617 
    *(regs_buff + ((int)i + 841)) = ixgbe_read_reg(hw,(unsigned int)(((int)i + 3856) * 4));
    
#line 616 
    i = (u8)((int)i + 1);
    ldv_56109: 
#line 617 
    ;
    
#line 616 
    if ((unsigned int)i <= 7U) 
#line 618 
                               goto ldv_56108; else 
#line 621 
                                                    goto ldv_56110;
    ldv_56110: 
#line 622 
    ;
    
#line 619 
    i = (unsigned char)0U;
    
#line 619 
    goto ldv_56112;
    ldv_56111: 
#line 620 
    ;
    
#line 620 
    *(regs_buff + ((int)i + 849)) = ixgbe_read_reg(hw,(unsigned int)((int)i * 64 + 24620));
    
#line 619 
    i = (u8)((int)i + 1);
    ldv_56112: 
#line 620 
    ;
    
#line 619 
    if ((unsigned int)i <= 7U) 
#line 621 
                               goto ldv_56111; else 
#line 624 
                                                    goto ldv_56113;
    ldv_56113: 
#line 625 
    ;
    
#line 622 
    i = (unsigned char)0U;
    
#line 622 
    goto ldv_56115;
    ldv_56114: 
#line 623 
    ;
    
#line 623 
    *(regs_buff + ((int)i + 857)) = ixgbe_read_reg(hw,(unsigned int)((int)i * 64 + 25132));
    
#line 622 
    i = (u8)((int)i + 1);
    ldv_56115: 
#line 623 
    ;
    
#line 622 
    if ((unsigned int)i <= 7U) 
#line 624 
                               goto ldv_56114; else 
#line 627 
                                                    goto ldv_56116;
    ldv_56116: 
#line 628 
    ;
    
#line 625 
    goto ldv_56117;
    case (unsigned int)2: 
#line 626 
    ;
    case (unsigned int)3: 
#line 627 
    ;
    case (unsigned int)4: 
#line 628 
    ;
    case (unsigned int)5: 
#line 629 
    ;
    
#line 630 
    *(regs_buff + 830U) = ixgbe_read_reg(hw,18688U);
    
#line 631 
    *(regs_buff + 832U) = ixgbe_read_reg(hw,9264U);
    
#line 632 
    i = (unsigned char)0U;
    
#line 632 
    goto ldv_56123;
    ldv_56122: 
#line 633 
    ;
    
#line 633 
    *(regs_buff + ((int)i + 833)) = ixgbe_read_reg(hw,(unsigned int)(((int)i + 2128) * 4));
    
#line 632 
    i = (u8)((int)i + 1);
    ldv_56123: 
#line 633 
    ;
    
#line 632 
    if ((unsigned int)i <= 7U) 
#line 634 
                               goto ldv_56122; else 
#line 637 
                                                    goto ldv_56124;
    ldv_56124: 
#line 638 
    ;
    
#line 635 
    i = (unsigned char)0U;
    
#line 635 
    goto ldv_56126;
    ldv_56125: 
#line 636 
    ;
    
#line 636 
    *(regs_buff + ((int)i + 841)) = ixgbe_read_reg(hw,(unsigned int)(((int)i + 2136) * 4));
    
#line 635 
    i = (u8)((int)i + 1);
    ldv_56126: 
#line 636 
    ;
    
#line 635 
    if ((unsigned int)i <= 7U) 
#line 637 
                               goto ldv_56125; else 
#line 640 
                                                    goto ldv_56127;
    ldv_56127: 
#line 641 
    ;
    
#line 638 
    i = (unsigned char)0U;
    
#line 638 
    goto ldv_56129;
    ldv_56128: 
#line 639 
    ;
    
#line 639 
    *(regs_buff + ((int)i + 849)) = ixgbe_read_reg(hw,(unsigned int)(((int)i + 4676) * 4));
    
#line 638 
    i = (u8)((int)i + 1);
    ldv_56129: 
#line 639 
    ;
    
#line 638 
    if ((unsigned int)i <= 7U) 
#line 640 
                               goto ldv_56128; else 
#line 643 
                                                    goto ldv_56130;
    ldv_56130: 
#line 644 
    ;
    
#line 641 
    i = (unsigned char)0U;
    
#line 641 
    goto ldv_56132;
    ldv_56131: 
#line 642 
    ;
    
#line 642 
    *(regs_buff + ((int)i + 857)) = ixgbe_read_reg(hw,(unsigned int)(((int)i + 4684) * 4));
    
#line 641 
    i = (u8)((int)i + 1);
    ldv_56132: 
#line 642 
    ;
    
#line 641 
    if ((unsigned int)i <= 7U) 
#line 643 
                               goto ldv_56131; else 
#line 646 
                                                    goto ldv_56133;
    ldv_56133: 
#line 647 
    ;
    
#line 644 
    goto ldv_56117;
    default: 
#line 645 
    ;
    
#line 646 
    goto ldv_56117;
  }
  ldv_56117: 
#line 649 
  ;
  
#line 649 
  i = (unsigned char)0U;
  
#line 649 
  goto ldv_56136;
  ldv_56135: 
#line 650 
  ;
  
#line 650 
  *(regs_buff + ((int)i + 865)) = ixgbe_read_reg(hw,(unsigned int)(((int)i + 13128) * 4));
  
#line 649 
  i = (u8)((int)i + 1);
  ldv_56136: 
#line 650 
  ;
  
#line 649 
  if ((unsigned int)i <= 7U) 
#line 651 
                             goto ldv_56135; else 
#line 654 
                                                  goto ldv_56137;
  ldv_56137: 
#line 655 
  ;
  
#line 652 
  i = (unsigned char)0U;
  
#line 652 
  goto ldv_56139;
  ldv_56138: 
#line 653 
  ;
  
#line 653 
  *(regs_buff + ((int)i + 873)) = ixgbe_read_reg(hw,(unsigned int)(((int)i + 13136) * 4));
  
#line 652 
  i = (u8)((int)i + 1);
  ldv_56139: 
#line 653 
  ;
  
#line 652 
  if ((unsigned int)i <= 7U) 
#line 654 
                             goto ldv_56138; else 
#line 657 
                                                  goto ldv_56140;
  ldv_56140: 
#line 658 
  ;
  
#line 657 
  *(regs_buff + 881U) = (unsigned int)adapter->stats.crcerrs;
  
#line 658 
  *(regs_buff + 882U) = (unsigned int)adapter->stats.illerrc;
  
#line 659 
  *(regs_buff + 883U) = (unsigned int)adapter->stats.errbc;
  
#line 660 
  *(regs_buff + 884U) = (unsigned int)adapter->stats.mspdc;
  
#line 661 
  i = (unsigned char)0U;
  
#line 661 
  goto ldv_56142;
  ldv_56141: 
#line 662 
  ;
  
#line 662 
  *(regs_buff + ((int)i + 885)) = (unsigned int)adapter->stats.mpc[(int)i];
  
#line 661 
  i = (u8)((int)i + 1);
  ldv_56142: 
#line 662 
  ;
  
#line 661 
  if ((unsigned int)i <= 7U) 
#line 663 
                             goto ldv_56141; else 
#line 666 
                                                  goto ldv_56143;
  ldv_56143: 
#line 667 
  ;
  
#line 663 
  *(regs_buff + 893U) = (unsigned int)adapter->stats.mlfc;
  
#line 664 
  *(regs_buff + 894U) = (unsigned int)adapter->stats.mrfc;
  
#line 665 
  *(regs_buff + 895U) = (unsigned int)adapter->stats.rlec;
  
#line 666 
  *(regs_buff + 896U) = (unsigned int)adapter->stats.lxontxc;
  
#line 667 
  *(regs_buff + 897U) = (unsigned int)adapter->stats.lxonrxc;
  
#line 668 
  *(regs_buff + 898U) = (unsigned int)adapter->stats.lxofftxc;
  
#line 669 
  *(regs_buff + 899U) = (unsigned int)adapter->stats.lxoffrxc;
  
#line 670 
  i = (unsigned char)0U;
  
#line 670 
  goto ldv_56145;
  ldv_56144: 
#line 671 
  ;
  
#line 671 
  *(regs_buff + ((int)i + 900)) = (unsigned int)adapter->stats.pxontxc[(int)i];
  
#line 670 
  i = (u8)((int)i + 1);
  ldv_56145: 
#line 671 
  ;
  
#line 670 
  if ((unsigned int)i <= 7U) 
#line 672 
                             goto ldv_56144; else 
#line 675 
                                                  goto ldv_56146;
  ldv_56146: 
#line 676 
  ;
  
#line 672 
  i = (unsigned char)0U;
  
#line 672 
  goto ldv_56148;
  ldv_56147: 
#line 673 
  ;
  
#line 673 
  *(regs_buff + ((int)i + 908)) = (unsigned int)adapter->stats.pxonrxc[(int)i];
  
#line 672 
  i = (u8)((int)i + 1);
  ldv_56148: 
#line 673 
  ;
  
#line 672 
  if ((unsigned int)i <= 7U) 
#line 674 
                             goto ldv_56147; else 
#line 677 
                                                  goto ldv_56149;
  ldv_56149: 
#line 678 
  ;
  
#line 674 
  i = (unsigned char)0U;
  
#line 674 
  goto ldv_56151;
  ldv_56150: 
#line 675 
  ;
  
#line 675 
  *(regs_buff + ((int)i + 916)) = (unsigned int)adapter->stats.pxofftxc[(int)i];
  
#line 674 
  i = (u8)((int)i + 1);
  ldv_56151: 
#line 675 
  ;
  
#line 674 
  if ((unsigned int)i <= 7U) 
#line 676 
                             goto ldv_56150; else 
#line 679 
                                                  goto ldv_56152;
  ldv_56152: 
#line 680 
  ;
  
#line 676 
  i = (unsigned char)0U;
  
#line 676 
  goto ldv_56154;
  ldv_56153: 
#line 677 
  ;
  
#line 677 
  *(regs_buff + ((int)i + 924)) = (unsigned int)adapter->stats.pxoffrxc[(int)i];
  
#line 676 
  i = (u8)((int)i + 1);
  ldv_56154: 
#line 677 
  ;
  
#line 676 
  if ((unsigned int)i <= 7U) 
#line 678 
                             goto ldv_56153; else 
#line 681 
                                                  goto ldv_56155;
  ldv_56155: 
#line 682 
  ;
  
#line 678 
  *(regs_buff + 932U) = (unsigned int)adapter->stats.prc64;
  
#line 679 
  *(regs_buff + 933U) = (unsigned int)adapter->stats.prc127;
  
#line 680 
  *(regs_buff + 934U) = (unsigned int)adapter->stats.prc255;
  
#line 681 
  *(regs_buff + 935U) = (unsigned int)adapter->stats.prc511;
  
#line 682 
  *(regs_buff + 936U) = (unsigned int)adapter->stats.prc1023;
  
#line 683 
  *(regs_buff + 937U) = (unsigned int)adapter->stats.prc1522;
  
#line 684 
  *(regs_buff + 938U) = (unsigned int)adapter->stats.gprc;
  
#line 685 
  *(regs_buff + 939U) = (unsigned int)adapter->stats.bprc;
  
#line 686 
  *(regs_buff + 940U) = (unsigned int)adapter->stats.mprc;
  
#line 687 
  *(regs_buff + 941U) = (unsigned int)adapter->stats.gptc;
  
#line 688 
  *(regs_buff + 942U) = (unsigned int)adapter->stats.gorc;
  
#line 689 
  *(regs_buff + 944U) = (unsigned int)adapter->stats.gotc;
  
#line 690 
  i = (unsigned char)0U;
  
#line 690 
  goto ldv_56157;
  ldv_56156: 
#line 691 
  ;
  
#line 691 
  *(regs_buff + ((int)i + 946)) = (unsigned int)adapter->stats.rnbc[(int)i];
  
#line 690 
  i = (u8)((int)i + 1);
  ldv_56157: 
#line 691 
  ;
  
#line 690 
  if ((unsigned int)i <= 7U) 
#line 692 
                             goto ldv_56156; else 
#line 695 
                                                  goto ldv_56158;
  ldv_56158: 
#line 696 
  ;
  
#line 692 
  *(regs_buff + 954U) = (unsigned int)adapter->stats.ruc;
  
#line 693 
  *(regs_buff + 955U) = (unsigned int)adapter->stats.rfc;
  
#line 694 
  *(regs_buff + 956U) = (unsigned int)adapter->stats.roc;
  
#line 695 
  *(regs_buff + 957U) = (unsigned int)adapter->stats.rjc;
  
#line 696 
  *(regs_buff + 958U) = (unsigned int)adapter->stats.mngprc;
  
#line 697 
  *(regs_buff + 959U) = (unsigned int)adapter->stats.mngpdc;
  
#line 698 
  *(regs_buff + 960U) = (unsigned int)adapter->stats.mngptc;
  
#line 699 
  *(regs_buff + 961U) = (unsigned int)adapter->stats.tor;
  
#line 700 
  *(regs_buff + 963U) = (unsigned int)adapter->stats.tpr;
  
#line 701 
  *(regs_buff + 964U) = (unsigned int)adapter->stats.tpt;
  
#line 702 
  *(regs_buff + 965U) = (unsigned int)adapter->stats.ptc64;
  
#line 703 
  *(regs_buff + 966U) = (unsigned int)adapter->stats.ptc127;
  
#line 704 
  *(regs_buff + 967U) = (unsigned int)adapter->stats.ptc255;
  
#line 705 
  *(regs_buff + 968U) = (unsigned int)adapter->stats.ptc511;
  
#line 706 
  *(regs_buff + 969U) = (unsigned int)adapter->stats.ptc1023;
  
#line 707 
  *(regs_buff + 970U) = (unsigned int)adapter->stats.ptc1522;
  
#line 708 
  *(regs_buff + 971U) = (unsigned int)adapter->stats.mptc;
  
#line 709 
  *(regs_buff + 972U) = (unsigned int)adapter->stats.bptc;
  
#line 710 
  *(regs_buff + 973U) = (unsigned int)adapter->stats.xec;
  
#line 711 
  i = (unsigned char)0U;
  
#line 711 
  goto ldv_56160;
  ldv_56159: 
#line 712 
  ;
  
#line 712 
  *(regs_buff + ((int)i + 974)) = (unsigned int)adapter->stats.qprc[(int)i];
  
#line 711 
  i = (u8)((int)i + 1);
  ldv_56160: 
#line 712 
  ;
  
#line 711 
  if ((unsigned int)i <= 15U) 
#line 713 
                              goto ldv_56159; else 
#line 716 
                                                   goto ldv_56161;
  ldv_56161: 
#line 717 
  ;
  
#line 713 
  i = (unsigned char)0U;
  
#line 713 
  goto ldv_56163;
  ldv_56162: 
#line 714 
  ;
  
#line 714 
  *(regs_buff + ((int)i + 990)) = (unsigned int)adapter->stats.qptc[(int)i];
  
#line 713 
  i = (u8)((int)i + 1);
  ldv_56163: 
#line 714 
  ;
  
#line 713 
  if ((unsigned int)i <= 15U) 
#line 715 
                              goto ldv_56162; else 
#line 718 
                                                   goto ldv_56164;
  ldv_56164: 
#line 719 
  ;
  
#line 715 
  i = (unsigned char)0U;
  
#line 715 
  goto ldv_56166;
  ldv_56165: 
#line 716 
  ;
  
#line 716 
  *(regs_buff + ((int)i + 1006)) = (unsigned int)adapter->stats.qbrc[(int)i];
  
#line 715 
  i = (u8)((int)i + 1);
  ldv_56166: 
#line 716 
  ;
  
#line 715 
  if ((unsigned int)i <= 15U) 
#line 717 
                              goto ldv_56165; else 
#line 720 
                                                   goto ldv_56167;
  ldv_56167: 
#line 721 
  ;
  
#line 717 
  i = (unsigned char)0U;
  
#line 717 
  goto ldv_56169;
  ldv_56168: 
#line 718 
  ;
  
#line 718 
  *(regs_buff + ((int)i + 1022)) = (unsigned int)adapter->stats.qbtc[(int)i];
  
#line 717 
  i = (u8)((int)i + 1);
  ldv_56169: 
#line 718 
  ;
  
#line 717 
  if ((unsigned int)i <= 15U) 
#line 719 
                              goto ldv_56168; else 
#line 722 
                                                   goto ldv_56170;
  ldv_56170: 
#line 723 
  ;
  
#line 721 
  *(regs_buff + 1038U) = ixgbe_read_reg(hw,16896U);
  
#line 722 
  *(regs_buff + 1039U) = ixgbe_read_reg(hw,16904U);
  
#line 723 
  *(regs_buff + 1040U) = ixgbe_read_reg(hw,16908U);
  
#line 724 
  *(regs_buff + 1041U) = ixgbe_read_reg(hw,16912U);
  
#line 725 
  *(regs_buff + 1042U) = ixgbe_read_reg(hw,16916U);
  
#line 726 
  *(regs_buff + 1043U) = ixgbe_read_reg(hw,16920U);
  
#line 727 
  *(regs_buff + 1044U) = ixgbe_read_reg(hw,16924U);
  
#line 728 
  *(regs_buff + 1045U) = ixgbe_read_reg(hw,16928U);
  
#line 729 
  *(regs_buff + 1046U) = ixgbe_read_reg(hw,16932U);
  
#line 730 
  *(regs_buff + 1047U) = ixgbe_read_reg(hw,16960U);
  
#line 731 
  *(regs_buff + 1048U) = ixgbe_read_reg(hw,16964U);
  
#line 732 
  *(regs_buff + 1049U) = ixgbe_read_reg(hw,16968U);
  
#line 733 
  *(regs_buff + 1050U) = ixgbe_read_reg(hw,16972U);
  
#line 734 
  *(regs_buff + 1051U) = ixgbe_read_reg(hw,16976U);
  
#line 735 
  *(regs_buff + 1052U) = ixgbe_read_reg(hw,16980U);
  
#line 736 
  *(regs_buff + 1053U) = ixgbe_read_reg(hw,16984U);
  
#line 737 
  *(regs_buff + 1054U) = ixgbe_read_reg(hw,16988U);
  
#line 738 
  *(regs_buff + 1055U) = ixgbe_read_reg(hw,16992U);
  
#line 739 
  *(regs_buff + 1056U) = ixgbe_read_reg(hw,16996U);
  
#line 740 
  *(regs_buff + 1057U) = ixgbe_read_reg(hw,17000U);
  
#line 741 
  *(regs_buff + 1058U) = ixgbe_read_reg(hw,17004U);
  
#line 742 
  *(regs_buff + 1059U) = ixgbe_read_reg(hw,17032U);
  
#line 743 
  *(regs_buff + 1060U) = ixgbe_read_reg(hw,17036U);
  
#line 744 
  *(regs_buff + 1061U) = ixgbe_read_reg(hw,17040U);
  
#line 745 
  *(regs_buff + 1062U) = ixgbe_read_reg(hw,17048U);
  
#line 746 
  *(regs_buff + 1063U) = ixgbe_read_reg(hw,17052U);
  
#line 747 
  *(regs_buff + 1064U) = ixgbe_read_reg(hw,17056U);
  
#line 748 
  *(regs_buff + 1065U) = ixgbe_read_reg(hw,17060U);
  
#line 749 
  *(regs_buff + 1066U) = ixgbe_read_reg(hw,17064U);
  
#line 750 
  *(regs_buff + 1067U) = ixgbe_read_reg(hw,17068U);
  
#line 751 
  *(regs_buff + 1068U) = ixgbe_read_reg(hw,17072U);
  
#line 752 
  *(regs_buff + 1069U) = ixgbe_read_reg(hw,17076U);
  
#line 753 
  *(regs_buff + 1070U) = ixgbe_read_reg(hw,18432U);
  
#line 756 
  *(regs_buff + 1071U) = ixgbe_read_reg(hw,11296U);
  
#line 757 
  i = (unsigned char)0U;
  
#line 757 
  goto ldv_56172;
  ldv_56171: 
#line 758 
  ;
  
#line 758 
  *(regs_buff + ((int)i + 1072)) = ixgbe_read_reg(hw,(unsigned int)(((int)i + 2816) * 4));
  
#line 757 
  i = (u8)((int)i + 1);
  ldv_56172: 
#line 758 
  ;
  
#line 757 
  if ((unsigned int)i <= 7U) 
#line 759 
                             goto ldv_56171; else 
#line 762 
                                                  goto ldv_56173;
  ldv_56173: 
#line 763 
  ;
  
#line 759 
  *(regs_buff + 1080U) = ixgbe_read_reg(hw,12040U);
  
#line 760 
  i = (unsigned char)0U;
  
#line 760 
  goto ldv_56175;
  ldv_56174: 
#line 761 
  ;
  
#line 761 
  *(regs_buff + ((int)i + 1081)) = ixgbe_read_reg(hw,(unsigned int)(((int)i + 3012) * 4));
  
#line 760 
  i = (u8)((int)i + 1);
  ldv_56175: 
#line 761 
  ;
  
#line 760 
  if ((unsigned int)i <= 3U) 
#line 762 
                             goto ldv_56174; else 
#line 765 
                                                  goto ldv_56176;
  ldv_56176: 
#line 766 
  ;
  
#line 762 
  *(regs_buff + 1085U) = ixgbe_read_reg(hw,12064U);
  
#line 763 
  *(regs_buff + 1086U) = ixgbe_read_reg(hw,31776U);
  
#line 764 
  i = (unsigned char)0U;
  
#line 764 
  goto ldv_56178;
  ldv_56177: 
#line 765 
  ;
  
#line 765 
  *(regs_buff + ((int)i + 1087)) = ixgbe_read_reg(hw,(unsigned int)(((int)i + 7936) * 4));
  
#line 764 
  i = (u8)((int)i + 1);
  ldv_56178: 
#line 765 
  ;
  
#line 764 
  if ((unsigned int)i <= 7U) 
#line 766 
                             goto ldv_56177; else 
#line 769 
                                                  goto ldv_56179;
  ldv_56179: 
#line 770 
  ;
  
#line 766 
  *(regs_buff + 1095U) = ixgbe_read_reg(hw,32520U);
  
#line 767 
  i = (unsigned char)0U;
  
#line 767 
  goto ldv_56181;
  ldv_56180: 
#line 768 
  ;
  
#line 768 
  *(regs_buff + ((int)i + 1096)) = ixgbe_read_reg(hw,(unsigned int)(((int)i + 8132) * 4));
  
#line 767 
  i = (u8)((int)i + 1);
  ldv_56181: 
#line 768 
  ;
  
#line 767 
  if ((unsigned int)i <= 3U) 
#line 769 
                             goto ldv_56180; else 
#line 772 
                                                  goto ldv_56182;
  ldv_56182: 
#line 773 
  ;
  
#line 769 
  *(regs_buff + 1100U) = ixgbe_read_reg(hw,32544U);
  
#line 770 
  *(regs_buff + 1101U) = ixgbe_read_reg(hw,50688U);
  
#line 771 
  *(regs_buff + 1102U) = ixgbe_read_reg(hw,50704U);
  
#line 772 
  *(regs_buff + 1103U) = ixgbe_read_reg(hw,50708U);
  
#line 773 
  *(regs_buff + 1104U) = ixgbe_read_reg(hw,50712U);
  
#line 774 
  *(regs_buff + 1105U) = ixgbe_read_reg(hw,50716U);
  
#line 775 
  *(regs_buff + 1106U) = ixgbe_read_reg(hw,13824U);
  
#line 776 
  *(regs_buff + 1107U) = ixgbe_read_reg(hw,13840U);
  
#line 777 
  *(regs_buff + 1108U) = ixgbe_read_reg(hw,13844U);
  
#line 778 
  *(regs_buff + 1109U) = ixgbe_read_reg(hw,13848U);
  
#line 779 
  *(regs_buff + 1110U) = ixgbe_read_reg(hw,13852U);
  
#line 780 
  i = (unsigned char)0U;
  
#line 780 
  goto ldv_56184;
  ldv_56183: 
#line 781 
  ;
  
#line 781 
  *(regs_buff + ((int)i + 1111)) = ixgbe_read_reg(hw,(unsigned int)(((int)i + 17444) * 4));
  
#line 780 
  i = (u8)((int)i + 1);
  ldv_56184: 
#line 781 
  ;
  
#line 780 
  if ((unsigned int)i <= 7U) 
#line 782 
                             goto ldv_56183; else 
#line 785 
                                                  goto ldv_56185;
  ldv_56185: 
#line 786 
  ;
  
#line 782 
  *(regs_buff + 1119U) = ixgbe_read_reg(hw,20644U);
  
#line 783 
  *(regs_buff + 1120U) = ixgbe_read_reg(hw,17080U);
  
#line 784 
  *(regs_buff + 1121U) = ixgbe_read_reg(hw,17088U);
  
#line 785 
  *(regs_buff + 1122U) = ixgbe_read_reg(hw,17092U);
  
#line 786 
  *(regs_buff + 1123U) = ixgbe_read_reg(hw,17096U);
  
#line 787 
  *(regs_buff + 1124U) = ixgbe_read_reg(hw,17100U);
  
#line 788 
  *(regs_buff + 1125U) = ixgbe_read_reg(hw,69740U);
  
#line 789 
  *(regs_buff + 1126U) = ixgbe_read_reg(hw,49920U);
  
#line 790 
  *(regs_buff + 1127U) = ixgbe_read_reg(hw,13056U);
  
#line 793 
  *(regs_buff + 1128U) = ixgbe_read_reg(hw,17044U);
  
#line 796 
  *(regs_buff + 1129U) = ixgbe_read_reg(hw,12320U);
  
#line 797 
  *(regs_buff + 1130U) = ixgbe_read_reg(hw,51200U);
  
#line 798 
  i = (unsigned char)0U;
  
#line 798 
  goto ldv_56187;
  ldv_56186: 
#line 799 
  ;
  
#line 799 
  *(regs_buff + ((int)i + 1131)) = ixgbe_read_reg(hw,(unsigned int)(((int)i + 8376) * 4));
  
#line 798 
  i = (u8)((int)i + 1);
  ldv_56187: 
#line 799 
  ;
  
#line 798 
  if ((unsigned int)i <= 3U) 
#line 800 
                             goto ldv_56186; else 
#line 803 
                                                  goto ldv_56188;
  ldv_56188: 
#line 804 
  ;
  
#line 800 
  *(regs_buff + 1135U) = ixgbe_read_reg(hw,18816U);
  
#line 802 
  *(regs_buff + 1136U) = ixgbe_read_reg(hw,18828U);
  
#line 806 
  *(regs_buff + 1137U) = ixgbe_read_reg(hw,35584U);
  
#line 807 
  *(regs_buff + 1138U) = ixgbe_read_reg(hw,19088U);
  
#line 808 
  return;
}


#line 810  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_ethtool.c"
static int ixgbe_get_eeprom_len(struct net_device *netdev)
{
  int __retres;
  
#line 812 
  struct ixgbe_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 813 
  __retres = (int)adapter->hw.eeprom.word_size * 2;
  
#line 813 
  return __retres;
}


#line 816  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_ethtool.c"
static int ixgbe_get_eeprom(struct net_device *netdev, struct ethtool_eeprom *eeprom, u8 *bytes)
{
  int __retres;
  u16 *eeprom_buff;
  int first_word;
  int last_word;
  int eeprom_len;
  u16 i;
  
#line 819 
  struct ixgbe_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 820 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 823 
  int ret_val = 0;
  
#line 826 
  if (eeprom->len == 0U) {
    
#line 827 
    __retres = -22;
    
#line 827 
    goto return_label;
  }
  else ;
  
#line 829 
  eeprom->magic = (unsigned int)((int)hw->vendor_id | ((int)hw->device_id << 16));
  
#line 831 
  first_word = (int)(eeprom->offset >> 1);
  
#line 832 
  last_word = (int)(((eeprom->offset + eeprom->len) + 4294967295U) >> 1);
  
#line 833 
  eeprom_len = (last_word - first_word) + 1;
  
#line 835 
  eeprom_buff = (u16 *)kmalloc((unsigned long)eeprom_len * 2UL,208U);
  
#line 836 
  if (eeprom_buff == (u16 *)0U) {
    
#line 837 
    __retres = -12;
    
#line 837 
    goto return_label;
  }
  else ;
  
#line 839 
  ret_val = (*(hw->eeprom.ops.read_buffer))(hw,(unsigned short)((int)((unsigned short)first_word)),(unsigned short)((int)((unsigned short)eeprom_len)),eeprom_buff);
  
#line 843 
  i = (unsigned short)0U;
  
#line 843 
  goto ldv_56207;
  ldv_56206: 
#line 844 
  ;
  
#line 844 
  u16 *tmp_2 = eeprom_buff + (int)i;
  
#line 843 
  i = (u16)((int)i + 1);
  ldv_56207: 
#line 844 
  ;
  
#line 843 
  if ((int)i < eeprom_len) 
#line 845 
                           goto ldv_56206; else 
#line 848 
                                                goto ldv_56208;
  ldv_56208: 
#line 849 
  ;
  
#line 846 
  memcpy((void *)bytes,(void const *)eeprom_buff + (eeprom->offset & 1U),(unsigned long)eeprom->len);
  
#line 847 
  kfree((void const *)eeprom_buff);
  
#line 849 
  __retres = ret_val;
  return_label: 
#line 849 
                return __retres;
}


#line 852  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_ethtool.c"
static int ixgbe_set_eeprom(struct net_device *netdev, struct ethtool_eeprom *eeprom, u8 *bytes)
{
  int __retres;
  u16 *eeprom_buff;
  void *ptr;
  int max_len;
  int first_word;
  int last_word;
  u16 i;
  
#line 855 
  struct ixgbe_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 856 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 859 
  int ret_val = 0;
  
#line 862 
  if (eeprom->len == 0U) {
    
#line 863 
    __retres = -22;
    
#line 863 
    goto return_label;
  }
  else ;
  
#line 865 
  if (eeprom->magic != (unsigned int)((int)hw->vendor_id | ((int)hw->device_id << 16))) {
    
#line 866 
    __retres = -22;
    
#line 866 
    goto return_label;
  }
  else ;
  
#line 868 
  max_len = (int)hw->eeprom.word_size * 2;
  
#line 870 
  first_word = (int)(eeprom->offset >> 1);
  
#line 871 
  last_word = (int)(((eeprom->offset + eeprom->len) + 4294967295U) >> 1);
  
#line 872 
  eeprom_buff = (u16 *)kmalloc((unsigned long)max_len,208U);
  
#line 873 
  if (eeprom_buff == (u16 *)0U) {
    
#line 874 
    __retres = -12;
    
#line 874 
    goto return_label;
  }
  else ;
  
#line 876 
  ptr = (void *)eeprom_buff;
  
#line 878 
  if ((eeprom->offset & 1U) != 0U) {
    
#line 883 
    ret_val = (*(hw->eeprom.ops.read))(hw,(unsigned short)((int)((unsigned short)first_word)),eeprom_buff);
    
#line 884 
    if (ret_val != 0) 
#line 885 
                      goto err; else ;
    
#line 887 
    ptr += 1;
  }
  else ;
  
#line 889 
  if (((eeprom->offset + eeprom->len) & 1U) != 0U) {
    
#line 894 
    ret_val = (*(hw->eeprom.ops.read))(hw,(unsigned short)((int)((unsigned short)last_word)),eeprom_buff + (last_word - first_word));
    
#line 896 
    if (ret_val != 0) 
#line 897 
                      goto err; else ;
  }
  else ;
  
#line 901 
  i = (unsigned short)0U;
  
#line 901 
  goto ldv_56225;
  ldv_56224: 
#line 902 
  ;
  
#line 902 
  u16 *tmp_2 = eeprom_buff + (int)i;
  
#line 901 
  i = (u16)((int)i + 1);
  ldv_56225: 
#line 902 
  ;
  
#line 901 
  if ((int)i < (last_word - first_word) + 1) 
#line 903 
                                             goto ldv_56224; else 
#line 906 
                                                                  goto ldv_56226;
  ldv_56226: 
#line 907 
  ;
  
#line 904 
  memcpy(ptr,(void const *)bytes,(unsigned long)eeprom->len);
  
#line 906 
  i = (unsigned short)0U;
  
#line 906 
  goto ldv_56228;
  ldv_56227: 
#line 907 
  ;
  
#line 907 
  u16 *tmp_4 = eeprom_buff + (int)i;
  
#line 906 
  i = (u16)((int)i + 1);
  ldv_56228: 
#line 907 
  ;
  
#line 906 
  if ((int)i < (last_word - first_word) + 1) 
#line 908 
                                             goto ldv_56227; else 
#line 911 
                                                                  goto ldv_56229;
  ldv_56229: 
#line 912 
  ;
  
#line 909 
  ret_val = (*(hw->eeprom.ops.write_buffer))(hw,(unsigned short)((int)((unsigned short)first_word)),(unsigned short)((int)((unsigned int)((int)((unsigned short)last_word) - (int)((unsigned short)first_word)) + 1U)),eeprom_buff);
  
#line 914 
  if (ret_val == 0) 
#line 915 
                    (*(hw->eeprom.ops.update_checksum))(hw); else ;
  err: 
#line 917 
  ;
  
#line 918 
  kfree((void const *)eeprom_buff);
  
#line 919 
  __retres = ret_val;
  return_label: 
#line 919 
                return __retres;
}


#line 922  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_ethtool.c"
static void ixgbe_get_drvinfo(struct net_device *netdev, struct ethtool_drvinfo *drvinfo)
{
  u32 nvm_track_id;
  char const *tmp_0;
  int tmp_1;
  
#line 925 
  struct ixgbe_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 928 
  strlcpy((char *)(& drvinfo->driver),(char const *)(& ixgbe_driver_name),32UL);
  
#line 929 
  strlcpy((char *)(& drvinfo->version),(char const *)(& ixgbe_driver_version),32UL);
  
#line 932 
  nvm_track_id = (unsigned int)(((int)adapter->eeprom_verh << 16) | (int)adapter->eeprom_verl);
  
#line 934 
  snprintf((char *)(& drvinfo->fw_version),32UL,"0x%08x",nvm_track_id);
  
#line 937 
  tmp_0 = pci_name((struct pci_dev const *)adapter->pdev);
  
#line 937 
  ;
  
#line 937 
  strlcpy((char *)(& drvinfo->bus_info),tmp_0,32UL);
  
#line 939 
  drvinfo->n_stats = netdev->num_tx_queues * 10U + 89U;
  
#line 940 
  drvinfo->testinfo_len = 5U;
  
#line 941 
  tmp_1 = ixgbe_get_regs_len(netdev);
  
#line 941 
  drvinfo->regdump_len = (unsigned int)tmp_1;
  
#line 942 
  return;
}


#line 944  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_ethtool.c"
static void ixgbe_get_ringparam(struct net_device *netdev, struct ethtool_ringparam *ring)
{
  
#line 947 
  struct ixgbe_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 948 
  struct ixgbe_ring *tx_ring = adapter->tx_ring[0];
  
#line 949 
  struct ixgbe_ring *rx_ring = adapter->rx_ring[0];
  
#line 951 
  ring->rx_max_pending = 4096U;
  
#line 952 
  ring->tx_max_pending = 4096U;
  
#line 953 
  ring->rx_pending = (unsigned int)rx_ring->count;
  
#line 954 
  ring->tx_pending = (unsigned int)tx_ring->count;
  
#line 955 
  return;
}


#line 957  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_ethtool.c"
static int ixgbe_set_ringparam(struct net_device *netdev, struct ethtool_ringparam *ring)
{
  int __retres;
  struct ixgbe_ring *temp_ring;
  int i;
  u32 new_rx_count;
  u32 new_tx_count;
  u32 tmp_3;
  u32 tmp_7;
  int tmp_8;
  int tmp_10;
  bool tmp_9;
  int tmp_12;
  
#line 960 
  struct ixgbe_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 962 
  int err = 0;
  
#line 965 
  if (ring->rx_mini_pending != 0U || ring->rx_jumbo_pending != 0U) {
    
#line 966 
    __retres = -22;
    
#line 966 
    goto return_label;
  }
  else ;
  {
    u32 tmp_1;
    u32 tmp_2;
    {
      u32 tmp_0;
      
#line 968 
      u32 __max1 = ring->tx_pending;
      
#line 968 
      u32 __max2 = 64U;
      
#line 968 
      if (__max1 > __max2) 
#line 968 
                           tmp_0 = __max1; else 
#line 968 
                                                tmp_0 = __max2;
      
#line 968 
      tmp_1 = tmp_0;
    }
    
#line 968 
    u32 __min1 = tmp_1;
    
#line 968 
    u32 __min2 = 4096U;
    
#line 968 
    if (__min1 < __min2) 
#line 968 
                         tmp_2 = __min1; else 
#line 968 
                                              tmp_2 = __min2;
    
#line 968 
    tmp_3 = tmp_2;
  }
  
#line 968 
  new_tx_count = tmp_3;
  
#line 970 
  new_tx_count = (new_tx_count + 7U) & 4294967288U;
  {
    u32 tmp_5;
    u32 tmp_6;
    {
      u32 tmp_4;
      
#line 972 
      u32 __max1_0 = ring->rx_pending;
      
#line 972 
      u32 __max2_0 = 64U;
      
#line 972 
      if (__max1_0 > __max2_0) 
#line 972 
                               tmp_4 = __max1_0; else 
#line 972 
                                                      tmp_4 = __max2_0;
      
#line 972 
      tmp_5 = tmp_4;
    }
    
#line 972 
    u32 __min1_0 = tmp_5;
    
#line 972 
    u32 __min2_0 = 4096U;
    
#line 972 
    if (__min1_0 < __min2_0) 
#line 972 
                             tmp_6 = __min1_0; else 
#line 972 
                                                    tmp_6 = __min2_0;
    
#line 972 
    tmp_7 = tmp_6;
  }
  
#line 972 
  new_rx_count = tmp_7;
  
#line 974 
  new_rx_count = (new_rx_count + 7U) & 4294967288U;
  
#line 976 
  if (adapter->tx_ring_count == new_tx_count && adapter->rx_ring_count == new_rx_count) {
    
#line 979 
    __retres = 0;
    
#line 979 
    goto return_label;
  }
  else ;
  
#line 982 
  goto ldv_56269;
  ldv_56268: 
#line 983 
  ;
  
#line 983 
  usleep_range(1000UL,2000UL);
  ldv_56269: 
#line 984 
  ;
  
#line 982 
  tmp_8 = test_and_set_bit(1L,(unsigned long volatile *)(& adapter->state));
  
#line 982 
  if (tmp_8 != 0) 
#line 984 
                  goto ldv_56268; else 
#line 987 
                                       goto ldv_56270;
  ldv_56270: 
#line 988 
  ;
  
#line 985 
  tmp_9 = netif_running((struct net_device const *)adapter->netdev);
  
#line 985 
  if (tmp_9) 
#line 985 
             tmp_10 = 0; else 
#line 985 
                              tmp_10 = 1;
  
#line 985 
  if (tmp_10) {
    
#line 986 
    i = 0;
    
#line 986 
    goto ldv_56272;
    ldv_56271: 
#line 987 
    ;
    
#line 987 
    (adapter->tx_ring[i])->count = (unsigned short)new_tx_count;
    
#line 986 
    i += 1;
    ldv_56272: 
#line 987 
    ;
    
#line 986 
    if (adapter->num_tx_queues > i) 
#line 988 
                                    goto ldv_56271; else 
#line 991 
                                                         goto ldv_56273;
    ldv_56273: 
#line 992 
    ;
    
#line 988 
    i = 0;
    
#line 988 
    goto ldv_56275;
    ldv_56274: 
#line 989 
    ;
    
#line 989 
    (adapter->rx_ring[i])->count = (unsigned short)new_rx_count;
    
#line 988 
    i += 1;
    ldv_56275: 
#line 989 
    ;
    
#line 988 
    if (adapter->num_rx_queues > i) 
#line 990 
                                    goto ldv_56274; else 
#line 993 
                                                         goto ldv_56276;
    ldv_56276: 
#line 994 
    ;
    
#line 990 
    adapter->tx_ring_count = new_tx_count;
    
#line 991 
    adapter->rx_ring_count = new_rx_count;
    
#line 992 
    goto clear_reset;
  }
  else ;
  {
    int tmp_11;
    
#line 996 
    int __max1_1 = adapter->num_tx_queues;
    
#line 996 
    int __max2_1 = adapter->num_rx_queues;
    
#line 996 
    if (__max1_1 > __max2_1) 
#line 996 
                             tmp_11 = __max1_1; else 
#line 996 
                                                     tmp_11 = __max2_1;
    
#line 996 
    tmp_12 = tmp_11;
  }
  
#line 996 
  i = tmp_12;
  
#line 997 
  temp_ring = (struct ixgbe_ring *)vmalloc((unsigned long)i * 4096UL);
  
#line 999 
  if (temp_ring == (struct ixgbe_ring *)0) {
    
#line 1000 
    err = -12;
    
#line 1001 
    goto clear_reset;
  }
  else ;
  
#line 1004 
  ixgbe_down(adapter);
  
#line 1012 
  if (adapter->tx_ring_count != new_tx_count) {
    
#line 1013 
    i = 0;
    
#line 1013 
    goto ldv_56286;
    ldv_56285: 
#line 1014 
    ;
    
#line 1014 
    memcpy((void *)(temp_ring + i),(void const *)adapter->tx_ring[i],4096UL);
    
#line 1017 
    (temp_ring + i)->count = (unsigned short)new_tx_count;
    
#line 1018 
    err = ixgbe_setup_tx_resources(temp_ring + i);
    
#line 1019 
    if (err != 0) {
      
#line 1020 
      goto ldv_56282;
      ldv_56281: 
#line 1021 
      ;
      
#line 1021 
      i -= 1;
      
#line 1022 
      ixgbe_free_tx_resources(temp_ring + i);
      ldv_56282: 
#line 1023 
      ;
      
#line 1020 
      if (i != 0) 
#line 1022 
                  goto ldv_56281; else 
#line 1025 
                                       goto ldv_56283;
      ldv_56283: 
#line 1026 
      ;
      
#line 1024 
      goto err_setup;
    }
    else ;
    
#line 1013 
    i += 1;
    ldv_56286: 
#line 1014 
    ;
    
#line 1013 
    if (adapter->num_tx_queues > i) 
#line 1015 
                                    goto ldv_56285; else 
#line 1018 
                                                         goto ldv_56287;
    ldv_56287: 
#line 1019 
    ;
    
#line 1028 
    i = 0;
    
#line 1028 
    goto ldv_56289;
    ldv_56288: 
#line 1029 
    ;
    
#line 1029 
    ixgbe_free_tx_resources(adapter->tx_ring[i]);
    
#line 1031 
    memcpy((void *)adapter->tx_ring[i],(void const *)(temp_ring + i),4096UL);
    
#line 1028 
    i += 1;
    ldv_56289: 
#line 1029 
    ;
    
#line 1028 
    if (adapter->num_tx_queues > i) 
#line 1030 
                                    goto ldv_56288; else 
#line 1033 
                                                         goto ldv_56290;
    ldv_56290: 
#line 1034 
    ;
    
#line 1035 
    adapter->tx_ring_count = new_tx_count;
  }
  else ;
  
#line 1039 
  if (adapter->rx_ring_count != new_rx_count) {
    
#line 1040 
    i = 0;
    
#line 1040 
    goto ldv_56295;
    ldv_56294: 
#line 1041 
    ;
    
#line 1041 
    memcpy((void *)(temp_ring + i),(void const *)adapter->rx_ring[i],4096UL);
    
#line 1044 
    (temp_ring + i)->count = (unsigned short)new_rx_count;
    
#line 1045 
    err = ixgbe_setup_rx_resources(temp_ring + i);
    
#line 1046 
    if (err != 0) {
      
#line 1047 
      goto ldv_56292;
      ldv_56291: 
#line 1048 
      ;
      
#line 1048 
      i -= 1;
      
#line 1049 
      ixgbe_free_rx_resources(temp_ring + i);
      ldv_56292: 
#line 1050 
      ;
      
#line 1047 
      if (i != 0) 
#line 1049 
                  goto ldv_56291; else 
#line 1052 
                                       goto ldv_56293;
      ldv_56293: 
#line 1053 
      ;
      
#line 1051 
      goto err_setup;
    }
    else ;
    
#line 1040 
    i += 1;
    ldv_56295: 
#line 1041 
    ;
    
#line 1040 
    if (adapter->num_rx_queues > i) 
#line 1042 
                                    goto ldv_56294; else 
#line 1045 
                                                         goto ldv_56296;
    ldv_56296: 
#line 1046 
    ;
    
#line 1056 
    i = 0;
    
#line 1056 
    goto ldv_56298;
    ldv_56297: 
#line 1057 
    ;
    
#line 1057 
    ixgbe_free_rx_resources(adapter->rx_ring[i]);
    
#line 1059 
    memcpy((void *)adapter->rx_ring[i],(void const *)(temp_ring + i),4096UL);
    
#line 1056 
    i += 1;
    ldv_56298: 
#line 1057 
    ;
    
#line 1056 
    if (adapter->num_rx_queues > i) 
#line 1058 
                                    goto ldv_56297; else 
#line 1061 
                                                         goto ldv_56299;
    ldv_56299: 
#line 1062 
    ;
    
#line 1063 
    adapter->rx_ring_count = new_rx_count;
  }
  else ;
  err_setup: 
#line 1066 
  ;
  
#line 1067 
  ixgbe_up(adapter);
  
#line 1068 
  vfree((void const *)temp_ring);
  clear_reset: 
#line 1069 
  ;
  
#line 1070 
  set_bit(1L,(unsigned long volatile *)(& adapter->state));
  
#line 1071 
  __retres = err;
  return_label: 
#line 1071 
                return __retres;
}


#line 1074  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_ethtool.c"
static int ixgbe_get_sset_count(struct net_device *netdev, int sset)
{
  int __retres;
  
#line 1076 
  switch (sset) {
    case 0: 
#line 1077 
    ;
    
#line 1078 
    __retres = 5;
    
#line 1078 
    goto return_label;
    case 1: 
#line 1079 
    ;
    
#line 1080 
    __retres = (int)(netdev->num_tx_queues * 10U + 89U);
    
#line 1080 
    goto return_label;
    default: 
#line 1081 
    ;
    
#line 1082 
    __retres = -95;
    
#line 1082 
    goto return_label;
  }
  return_label: 
#line 1076 
                return __retres;
}


#line 1086  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_ethtool.c"
static void ixgbe_get_ethtool_stats(struct net_device *netdev, struct ethtool_stats *stats, u64 *data)
{
  struct rtnl_link_stats64 temp;
  struct rtnl_link_stats64 const *net_stats;
  unsigned int start;
  struct ixgbe_ring *ring;
  int i;
  int j;
  bool tmp_1;
  bool tmp_2;
  int tmp_3;
  int tmp_4;
  int tmp_5;
  int tmp_6;
  
#line 1089 
  struct ixgbe_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 1095 
  char *p = (char *)0;
  
#line 1097 
  ixgbe_update_stats(adapter);
  
#line 1098 
  net_stats = (struct rtnl_link_stats64 const *)dev_get_stats(netdev,& temp);
  
#line 1099 
  i = 0;
  
#line 1099 
  goto ldv_56332;
  ldv_56331: 
#line 1100 
  ;
  
#line 1100 
  switch (ixgbe_gstrings_stats[i].type) {
    case 0: 
#line 1101 
    ;
    
#line 1102 
    p = (char *)net_stats + ixgbe_gstrings_stats[i].stat_offset;
    
#line 1104 
    goto ldv_56327;
    case 1: 
#line 1105 
    ;
    
#line 1106 
    p = (char *)adapter + ixgbe_gstrings_stats[i].stat_offset;
    
#line 1108 
    goto ldv_56327;
    default: 
#line 1109 
    ;
    
#line 1110 
    *(data + i) = 0ULL;
    
#line 1111 
    goto ldv_56330;
  }
  ldv_56327: 
#line 1114 
  ;
  
#line 1114 
  if (ixgbe_gstrings_stats[i].sizeof_stat == 8) 
#line 1114 
                                                *(data + i) = *((u64 *)p); else 
                                                                    
#line 1114 
                                                                    *(data + i) = (unsigned long long)*((u32 *)p);
  ldv_56330: 
#line 1116 
  ;
  
#line 1099 
  i += 1;
  ldv_56332: 
#line 1100 
  ;
  
#line 1099 
  if ((unsigned int)i <= 56U) 
#line 1101 
                              goto ldv_56331; else 
#line 1104 
                                                   goto ldv_56333;
  ldv_56333: 
#line 1105 
  ;
  
#line 1117 
  j = 0;
  
#line 1117 
  goto ldv_56338;
  ldv_56337: 
#line 1118 
  ;
  
#line 1118 
  ring = adapter->tx_ring[j];
  
#line 1119 
  if (ring == (struct ixgbe_ring *)0) {
    
#line 1120 
    *(data + i) = 0ULL;
    
#line 1121 
    *(data + ((unsigned int)i + 1U)) = 0ULL;
    
#line 1122 
    i += 2;
    
#line 1124 
    *(data + i) = 0ULL;
    
#line 1125 
    *(data + ((unsigned int)i + 1U)) = 0ULL;
    
#line 1126 
    *(data + ((unsigned int)i + 2U)) = 0ULL;
    
#line 1127 
    i += 3;
    
#line 1129 
    goto ldv_56334;
  }
  else ;
  ldv_56335: 
#line 1131 
  ;
  
#line 1133 
  start = u64_stats_fetch_begin_irq((struct u64_stats_sync const *)(& ring->syncp));
  
#line 1134 
  *(data + i) = ring->stats.packets;
  
#line 1135 
  *(data + ((unsigned int)i + 1U)) = ring->stats.bytes;
  
#line 1136 
  tmp_1 = u64_stats_fetch_retry_irq((struct u64_stats_sync const *)(& ring->syncp),start);
  
#line 1136 
  if ((int)tmp_1 != 0) 
#line 1138 
                       goto ldv_56335; else 
#line 1141 
                                            goto ldv_56336;
  ldv_56336: 
#line 1142 
  ;
  
#line 1137 
  i += 2;
  
#line 1139 
  *(data + i) = ring->stats.yields;
  
#line 1140 
  *(data + ((unsigned int)i + 1U)) = ring->stats.misses;
  
#line 1141 
  *(data + ((unsigned int)i + 2U)) = ring->stats.cleaned;
  
#line 1142 
  i += 3;
  ldv_56334: 
#line 1143 
  ;
  
#line 1117 
  j += 1;
  ldv_56338: 
#line 1118 
  ;
  
#line 1117 
  if (netdev->num_tx_queues > (unsigned int)j) 
#line 1119 
                                               goto ldv_56337; else 
#line 1122 
                                                                    goto ldv_56339;
  ldv_56339: 
#line 1123 
  ;
  
#line 1145 
  j = 0;
  
#line 1145 
  goto ldv_56344;
  ldv_56343: 
#line 1146 
  ;
  
#line 1146 
  ring = adapter->rx_ring[j];
  
#line 1147 
  if (ring == (struct ixgbe_ring *)0) {
    
#line 1148 
    *(data + i) = 0ULL;
    
#line 1149 
    *(data + ((unsigned int)i + 1U)) = 0ULL;
    
#line 1150 
    i += 2;
    
#line 1152 
    *(data + i) = 0ULL;
    
#line 1153 
    *(data + ((unsigned int)i + 1U)) = 0ULL;
    
#line 1154 
    *(data + ((unsigned int)i + 2U)) = 0ULL;
    
#line 1155 
    i += 3;
    
#line 1157 
    goto ldv_56340;
  }
  else ;
  ldv_56341: 
#line 1159 
  ;
  
#line 1161 
  start = u64_stats_fetch_begin_irq((struct u64_stats_sync const *)(& ring->syncp));
  
#line 1162 
  *(data + i) = ring->stats.packets;
  
#line 1163 
  *(data + ((unsigned int)i + 1U)) = ring->stats.bytes;
  
#line 1164 
  tmp_2 = u64_stats_fetch_retry_irq((struct u64_stats_sync const *)(& ring->syncp),start);
  
#line 1164 
  if ((int)tmp_2 != 0) 
#line 1166 
                       goto ldv_56341; else 
#line 1169 
                                            goto ldv_56342;
  ldv_56342: 
#line 1170 
  ;
  
#line 1165 
  i += 2;
  
#line 1167 
  *(data + i) = ring->stats.yields;
  
#line 1168 
  *(data + ((unsigned int)i + 1U)) = ring->stats.misses;
  
#line 1169 
  *(data + ((unsigned int)i + 2U)) = ring->stats.cleaned;
  
#line 1170 
  i += 3;
  ldv_56340: 
#line 1171 
  ;
  
#line 1145 
  j += 1;
  ldv_56344: 
#line 1146 
  ;
  
#line 1145 
  if (netdev->num_tx_queues > (unsigned int)j) 
#line 1147 
                                               goto ldv_56343; else 
#line 1150 
                                                                    goto ldv_56345;
  ldv_56345: 
#line 1151 
  ;
  
#line 1174 
  j = 0;
  
#line 1174 
  goto ldv_56347;
  ldv_56346: 
#line 1175 
  ;
  
#line 1175 
  tmp_3 = i;
  
#line 1175 
  i += 1;
  
#line 1175 
  *(data + tmp_3) = adapter->stats.pxontxc[j];
  
#line 1176 
  tmp_4 = i;
  
#line 1176 
  i += 1;
  
#line 1176 
  *(data + tmp_4) = adapter->stats.pxofftxc[j];
  
#line 1174 
  j += 1;
  ldv_56347: 
#line 1175 
  ;
  
#line 1174 
  if (j <= 7) 
#line 1176 
              goto ldv_56346; else 
#line 1179 
                                   goto ldv_56348;
  ldv_56348: 
#line 1180 
  ;
  
#line 1178 
  j = 0;
  
#line 1178 
  goto ldv_56350;
  ldv_56349: 
#line 1179 
  ;
  
#line 1179 
  tmp_5 = i;
  
#line 1179 
  i += 1;
  
#line 1179 
  *(data + tmp_5) = adapter->stats.pxonrxc[j];
  
#line 1180 
  tmp_6 = i;
  
#line 1180 
  i += 1;
  
#line 1180 
  *(data + tmp_6) = adapter->stats.pxoffrxc[j];
  
#line 1178 
  j += 1;
  ldv_56350: 
#line 1179 
  ;
  
#line 1178 
  if (j <= 7) 
#line 1180 
              goto ldv_56349; else 
#line 1183 
                                   goto ldv_56351;
  ldv_56351: 
#line 1184 
  ;
  
#line 1185 
  return;
}


#line 1184  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_ethtool.c"
static void ixgbe_get_strings(struct net_device *netdev, u32 stringset, u8 *data)
{
  int i;
  
#line 1187 
  char *p = (char *)data;
  
#line 1190 
  switch (stringset) {
    case (u32)0: 
#line 1191 
    ;
    
#line 1192 
    i = 0;
    
#line 1192 
    goto ldv_56361;
    ldv_56360: 
#line 1193 
    ;
    
#line 1193 
    memcpy((void *)data,(void const *)(& ixgbe_gstrings_test[i]),32UL);
    
#line 1194 
    data += 32U;
    
#line 1192 
    i += 1;
    ldv_56361: 
#line 1193 
    ;
    
#line 1192 
    if ((unsigned int)i <= 4U) 
#line 1194 
                               goto ldv_56360; else 
#line 1197 
                                                    goto ldv_56362;
    ldv_56362: 
#line 1198 
    ;
    
#line 1196 
    goto ldv_56363;
    case (u32)1: 
#line 1197 
    ;
    
#line 1198 
    i = 0;
    
#line 1198 
    goto ldv_56369;
    ldv_56368: 
#line 1199 
    ;
    
#line 1199 
    memcpy((void *)p,(void const *)(& ixgbe_gstrings_stats[i].stat_string),32UL);
    
#line 1201 
    p += 32U;
    
#line 1198 
    i += 1;
    ldv_56369: 
#line 1199 
    ;
    
#line 1198 
    if ((unsigned int)i <= 56U) 
#line 1200 
                                goto ldv_56368; else 
#line 1203 
                                                     goto ldv_56370;
    ldv_56370: 
#line 1204 
    ;
    
#line 1203 
    i = 0;
    
#line 1203 
    goto ldv_56372;
    ldv_56371: 
#line 1204 
    ;
    
#line 1204 
    sprintf(p,"tx_queue_%u_packets",i);
    
#line 1205 
    p += 32U;
    
#line 1206 
    sprintf(p,"tx_queue_%u_bytes",i);
    
#line 1207 
    p += 32U;
    
#line 1209 
    sprintf(p,"tx_queue_%u_bp_napi_yield",i);
    
#line 1210 
    p += 32U;
    
#line 1211 
    sprintf(p,"tx_queue_%u_bp_misses",i);
    
#line 1212 
    p += 32U;
    
#line 1213 
    sprintf(p,"tx_queue_%u_bp_cleaned",i);
    
#line 1214 
    p += 32U;
    
#line 1203 
    i += 1;
    ldv_56372: 
#line 1204 
    ;
    
#line 1203 
    if (netdev->num_tx_queues > (unsigned int)i) 
#line 1205 
                                                 goto ldv_56371; else 
                                                                   
#line 1208 
                                                                   goto ldv_56373;
    ldv_56373: 
#line 1209 
    ;
    
#line 1217 
    i = 0;
    
#line 1217 
    goto ldv_56375;
    ldv_56374: 
#line 1218 
    ;
    
#line 1218 
    sprintf(p,"rx_queue_%u_packets",i);
    
#line 1219 
    p += 32U;
    
#line 1220 
    sprintf(p,"rx_queue_%u_bytes",i);
    
#line 1221 
    p += 32U;
    
#line 1223 
    sprintf(p,"rx_queue_%u_bp_poll_yield",i);
    
#line 1224 
    p += 32U;
    
#line 1225 
    sprintf(p,"rx_queue_%u_bp_misses",i);
    
#line 1226 
    p += 32U;
    
#line 1227 
    sprintf(p,"rx_queue_%u_bp_cleaned",i);
    
#line 1228 
    p += 32U;
    
#line 1217 
    i += 1;
    ldv_56375: 
#line 1218 
    ;
    
#line 1217 
    if (netdev->num_tx_queues > (unsigned int)i) 
#line 1219 
                                                 goto ldv_56374; else 
                                                                   
#line 1222 
                                                                   goto ldv_56376;
    ldv_56376: 
#line 1223 
    ;
    
#line 1231 
    i = 0;
    
#line 1231 
    goto ldv_56378;
    ldv_56377: 
#line 1232 
    ;
    
#line 1232 
    sprintf(p,"tx_pb_%u_pxon",i);
    
#line 1233 
    p += 32U;
    
#line 1234 
    sprintf(p,"tx_pb_%u_pxoff",i);
    
#line 1235 
    p += 32U;
    
#line 1231 
    i += 1;
    ldv_56378: 
#line 1232 
    ;
    
#line 1231 
    if (i <= 7) 
#line 1233 
                goto ldv_56377; else 
#line 1236 
                                     goto ldv_56379;
    ldv_56379: 
#line 1237 
    ;
    
#line 1237 
    i = 0;
    
#line 1237 
    goto ldv_56381;
    ldv_56380: 
#line 1238 
    ;
    
#line 1238 
    sprintf(p,"rx_pb_%u_pxon",i);
    
#line 1239 
    p += 32U;
    
#line 1240 
    sprintf(p,"rx_pb_%u_pxoff",i);
    
#line 1241 
    p += 32U;
    
#line 1237 
    i += 1;
    ldv_56381: 
#line 1238 
    ;
    
#line 1237 
    if (i <= 7) 
#line 1239 
                goto ldv_56380; else 
#line 1242 
                                     goto ldv_56382;
    ldv_56382: 
#line 1243 
    ;
    
#line 1244 
    goto ldv_56363;
  }
  ldv_56363: 
#line 1246 
  ;
  
#line 1247 
  return;
}


#line 1248  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_ethtool.c"
static int ixgbe_link_test(struct ixgbe_adapter *adapter, u64 *data)
{
  int __retres;
  bool link_up;
  bool tmp;
  
#line 1250 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 1252 
  u32 link_speed = 0U;
  
#line 1254 
  tmp = ixgbe_removed((void *)hw->hw_addr);
  
#line 1254 
  if ((int)tmp != 0) {
    
#line 1255 
    *data = 1ULL;
    
#line 1256 
    __retres = 1;
    
#line 1256 
    goto return_label;
  }
  else ;
  
#line 1258 
  *data = 0ULL;
  
#line 1260 
  (*(hw->mac.ops.check_link))(hw,& link_speed,& link_up,(_Bool)1);
  
#line 1261 
  if ((int)link_up != 0) {
    
#line 1262 
    __retres = (int)*data;
    
#line 1262 
    goto return_label;
  }
  else 
#line 1264 
       *data = 1ULL;
  
#line 1265 
  __retres = (int)*data;
  return_label: 
#line 1265 
                return __retres;
}


#line 1295  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_ethtool.c"
static struct ixgbe_reg_test const reg_test_82599[20U] = {{.reg = (unsigned short)12832U, .array_len = (unsigned char)1U, .test_type = (unsigned char)1U, .mask = 2148007920U, .write = 2148007920U}, {.reg = (unsigned short)12896U, .array_len = (unsigned char)1U, .test_type = (unsigned char)1U, .mask = 2148007920U, .write = 2148007920U}, {.reg = (unsigned short)12296U, .array_len = (unsigned char)1U, .test_type = (unsigned char)1U, .mask = 4294967295U, .write = 4294967295U}, {.reg = (unsigned short)20616U, .array_len = (unsigned char)1U, .test_type = (unsigned char)1U, .mask = 0U, .write = 0U}, {.reg = (unsigned short)4096U, .array_len = (unsigned char)4U, .test_type = (unsigned char)1U, .mask = 4294967168U, .write = 4294967168U}, {.reg = (unsigned short)4100U, .array_len = (unsigned char)4U, .test_type = (unsigned char)1U, .mask = 4294967295U, .write = 4294967295U}, {.reg = (unsigned short)4104U, .array_len = (unsigned char)4U, .test_type = (unsigned char)1U, .mask = 1048448U, .write = 1048575U}, {.reg = (unsigned short)4136U, .array_len = (unsigned char)4U, .test_type = (unsigned char)3U, .mask = 0U, .write = 33554432U}, {.reg = (unsigned short)4120U, .array_len = (unsigned char)4U, .test_type = (unsigned char)1U, .mask = 65535U, .write = 65535U}, {.reg = (unsigned short)4136U, .array_len = (unsigned char)4U, .test_type = (unsigned char)3U, .mask = 0U, .write = 0U}, {.reg = (unsigned short)12896U, .array_len = (unsigned char)1U, .test_type = (unsigned char)1U, .mask = 2148007920U, .write = 2148007920U}, {.reg = (unsigned short)12800U, .array_len = (unsigned char)1U, .test_type = (unsigned char)1U, .mask = 4294967295U, .write = 4294967295U}, {.reg = (unsigned short)24576U, .array_len = (unsigned char)4U, .test_type = (unsigned char)1U, .mask = 4294967168U, .write = 4294967295U}, {.reg = (unsigned short)24580U, .array_len = (unsigned char)4U, .test_type = (unsigned char)1U, .mask = 4294967295U, .write = 4294967295U}, {.reg = (unsigned short)24584U, .array_len = (unsigned char)4U, .test_type = (unsigned char)1U, .mask = 1048448U, .write = 1048448U}, {.reg = (unsigned short)12288U, .array_len = (unsigned char)1U, .test_type = (unsigned char)2U, .mask = 1U, .write = 1U}, {.reg = (unsigned short)21504U, .array_len = (unsigned char)16U, .test_type = (unsigned char)5U, .mask = 4294967295U, .write = 4294967295U}, {.reg = (unsigned short)21504U, .array_len = (unsigned char)16U, .test_type = (unsigned char)6U, .mask = 2147614719U, .write = 2148335615U}, {.reg = (unsigned short)20992U, .array_len = (unsigned char)128U, .test_type = (unsigned char)4U, .mask = 4294967295U, .write = 4294967295U}, {.reg = (unsigned short)0U, .array_len = (unsigned char)0, .test_type = (unsigned char)0, .mask = 0U, .write = 0U}};

#line 1319  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_ethtool.c"
static struct ixgbe_reg_test const reg_test_82598[22U] = {{.reg = (unsigned short)12832U, .array_len = (unsigned char)1U, .test_type = (unsigned char)1U, .mask = 2148007920U, .write = 2148007920U}, {.reg = (unsigned short)12896U, .array_len = (unsigned char)1U, .test_type = (unsigned char)1U, .mask = 2148007920U, .write = 2148007920U}, {.reg = (unsigned short)12296U, .array_len = (unsigned char)1U, .test_type = (unsigned char)1U, .mask = 4294967295U, .write = 4294967295U}, {.reg = (unsigned short)20616U, .array_len = (unsigned char)1U, .test_type = (unsigned char)1U, .mask = 0U, .write = 0U}, {.reg = (unsigned short)4096U, .array_len = (unsigned char)4U, .test_type = (unsigned char)1U, .mask = 4294967168U, .write = 4294967295U}, {.reg = (unsigned short)4100U, .array_len = (unsigned char)4U, .test_type = (unsigned char)1U, .mask = 4294967295U, .write = 4294967295U}, {.reg = (unsigned short)4104U, .array_len = (unsigned char)4U, .test_type = (unsigned char)1U, .mask = 1048448U, .write = 1048575U}, {.reg = (unsigned short)4136U, .array_len = (unsigned char)4U, .test_type = (unsigned char)3U, .mask = 0U, .write = 33554432U}, {.reg = (unsigned short)4120U, .array_len = (unsigned char)4U, .test_type = (unsigned char)1U, .mask = 65535U, .write = 65535U}, {.reg = (unsigned short)4136U, .array_len = (unsigned char)4U, .test_type = (unsigned char)3U, .mask = 0U, .write = 0U}, {.reg = (unsigned short)12896U, .array_len = (unsigned char)1U, .test_type = (unsigned char)1U, .mask = 2148007920U, .write = 2148007920U}, {.reg = (unsigned short)12800U, .array_len = (unsigned char)1U, .test_type = (unsigned char)1U, .mask = 4294967295U, .write = 4294967295U}, {.reg = (unsigned short)51968U, .array_len = (unsigned char)1U, .test_type = (unsigned char)1U, .mask = 255U, .write = 255U}, {.reg = (unsigned short)24576U, .array_len = (unsigned char)4U, .test_type = (unsigned char)1U, .mask = 4294967168U, .write = 4294967295U}, {.reg = (unsigned short)24580U, .array_len = (unsigned char)4U, .test_type = (unsigned char)1U, .mask = 4294967295U, .write = 4294967295U}, {.reg = (unsigned short)24584U, .array_len = (unsigned char)4U, .test_type = (unsigned char)1U, .mask = 1048448U, .write = 1048575U}, {.reg = (unsigned short)12288U, .array_len = (unsigned char)1U, .test_type = (unsigned char)2U, .mask = 3U, .write = 3U}, {.reg = (unsigned short)32256U, .array_len = (unsigned char)1U, .test_type = (unsigned char)2U, .mask = 5U, .write = 5U}, {.reg = (unsigned short)21504U, .array_len = (unsigned char)16U, .test_type = (unsigned char)5U, .mask = 4294967295U, .write = 4294967295U}, {.reg = (unsigned short)21504U, .array_len = (unsigned char)16U, .test_type = (unsigned char)6U, .mask = 2148335615U, .write = 2148335615U}, {.reg = (unsigned short)20992U, .array_len = (unsigned char)128U, .test_type = (unsigned char)4U, .mask = 4294967295U, .write = 4294967295U}, {.reg = (unsigned short)0U, .array_len = (unsigned char)0, .test_type = (unsigned char)0, .mask = 0U, .write = 0U}};

#line 1346  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_ethtool.c"
static bool reg_pattern_test(struct ixgbe_adapter *adapter, u64 *data, int reg, u32 mask, u32 write)
{
  bool __retres;
  u32 pat;
  u32 val;
  u32 before;
  bool tmp;
  
#line 1350 
  u32 const test_pattern[4U] = {1515870810U, 2779096485U, 0U, 4294967295U};
  
#line 1353 
  tmp = ixgbe_removed((void *)adapter->hw.hw_addr);
  
#line 1353 
  if ((int)tmp != 0) {
    
#line 1354 
    *data = 1ULL;
    
#line 1355 
    __retres = (_Bool)1;
    
#line 1355 
    goto return_label;
  }
  else ;
  
#line 1357 
  pat = 0U;
  
#line 1357 
  goto ldv_56413;
  ldv_56412: 
#line 1358 
  ;
  
#line 1358 
  before = ixgbe_read_reg(& adapter->hw,(unsigned int)reg);
  
#line 1359 
  ixgbe_write_reg(& adapter->hw,(unsigned int)reg,test_pattern[pat] & write);
  
#line 1360 
  val = ixgbe_read_reg(& adapter->hw,(unsigned int)reg);
  
#line 1361 
  if (((test_pattern[pat] & write) & mask) != val) {
    
#line 1362 
    if (((int)adapter->msg_enable & 1) != 0) 
#line 1362 
                                             netdev_err((struct net_device const *)adapter->netdev,"pattern test reg %04X failed: got 0x%08X expected 0x%08X\n",reg,val,(test_pattern[pat] & write) & mask); else ;
    
#line 1364 
    *data = (unsigned long long)reg;
    
#line 1365 
    ixgbe_write_reg(& adapter->hw,(unsigned int)reg,before);
    
#line 1366 
    __retres = (_Bool)1;
    
#line 1366 
    goto return_label;
  }
  else ;
  
#line 1368 
  ixgbe_write_reg(& adapter->hw,(unsigned int)reg,before);
  
#line 1357 
  pat += 1U;
  ldv_56413: 
#line 1358 
  ;
  
#line 1357 
  if (pat <= 3U) 
#line 1359 
                 goto ldv_56412; else 
#line 1362 
                                      goto ldv_56414;
  ldv_56414: 
#line 1363 
  ;
  
#line 1370 
  __retres = (_Bool)0;
  return_label: 
#line 1370 
                return __retres;
}


#line 1373  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_ethtool.c"
static bool reg_set_and_check(struct ixgbe_adapter *adapter, u64 *data, int reg, u32 mask, u32 write)
{
  bool __retres;
  u32 val;
  u32 before;
  bool tmp;
  
#line 1378 
  tmp = ixgbe_removed((void *)adapter->hw.hw_addr);
  
#line 1378 
  if ((int)tmp != 0) {
    
#line 1379 
    *data = 1ULL;
    
#line 1380 
    __retres = (_Bool)1;
    
#line 1380 
    goto return_label;
  }
  else ;
  
#line 1382 
  before = ixgbe_read_reg(& adapter->hw,(unsigned int)reg);
  
#line 1383 
  ixgbe_write_reg(& adapter->hw,(unsigned int)reg,write & mask);
  
#line 1384 
  val = ixgbe_read_reg(& adapter->hw,(unsigned int)reg);
  
#line 1385 
  if (((write ^ val) & mask) != 0U) {
    
#line 1386 
    if (((int)adapter->msg_enable & 1) != 0) 
#line 1386 
                                             netdev_err((struct net_device const *)adapter->netdev,"set/check reg %04X test failed: got 0x%08X expected 0x%08X\n",reg,val & mask,write & mask); else ;
    
#line 1388 
    *data = (unsigned long long)reg;
    
#line 1389 
    ixgbe_write_reg(& adapter->hw,(unsigned int)reg,before);
    
#line 1390 
    __retres = (_Bool)1;
    
#line 1390 
    goto return_label;
  }
  else ;
  
#line 1392 
  ixgbe_write_reg(& adapter->hw,(unsigned int)reg,before);
  
#line 1393 
  __retres = (_Bool)0;
  return_label: 
#line 1393 
                return __retres;
}


#line 1396  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_ethtool.c"
static int ixgbe_reg_test(struct ixgbe_adapter *adapter, u64 *data)
{
  int __retres;
  struct ixgbe_reg_test const *test;
  u32 value;
  u32 before;
  u32 after;
  u32 i;
  u32 toggle;
  bool tmp;
  u32 tmp_0;
  u32 tmp_1;
  
#line 1402 
  tmp = ixgbe_removed((void *)adapter->hw.hw_addr);
  
#line 1402 
  if ((int)tmp != 0) {
    
#line 1403 
    if (((int)adapter->msg_enable & 1) != 0) 
#line 1403 
                                             netdev_err((struct net_device const *)adapter->netdev,"Adapter removed - register test blocked\n"); else ;
    
#line 1404 
    *data = 1ULL;
    
#line 1405 
    __retres = 1;
    
#line 1405 
    goto return_label;
  }
  else ;
  
#line 1407 
  switch ((unsigned int)adapter->hw.mac.type) {
    case (unsigned int)1: 
#line 1408 
    ;
    
#line 1409 
    toggle = 2147480575U;
    
#line 1410 
    test = (struct ixgbe_reg_test const *)(& reg_test_82598);
    
#line 1411 
    goto ldv_56435;
    case (unsigned int)2: 
#line 1412 
    ;
    case (unsigned int)3: 
#line 1413 
    ;
    case (unsigned int)4: 
#line 1414 
    ;
    case (unsigned int)5: 
#line 1415 
    ;
    
#line 1416 
    toggle = 2147480335U;
    
#line 1417 
    test = (struct ixgbe_reg_test const *)(& reg_test_82599);
    
#line 1418 
    goto ldv_56435;
    default: 
#line 1419 
    ;
    
#line 1420 
    *data = 1ULL;
    
#line 1421 
    __retres = 1;
    
#line 1421 
    goto return_label;
  }
  ldv_56435: 
#line 1430 
  ;
  
#line 1430 
  before = ixgbe_read_reg(& adapter->hw,8U);
  
#line 1431 
  tmp_0 = ixgbe_read_reg(& adapter->hw,8U);
  
#line 1431 
  value = tmp_0 & toggle;
  
#line 1432 
  ixgbe_write_reg(& adapter->hw,8U,toggle);
  
#line 1433 
  tmp_1 = ixgbe_read_reg(& adapter->hw,8U);
  
#line 1433 
  after = tmp_1 & toggle;
  
#line 1434 
  if (value != after) {
    
#line 1435 
    if (((int)adapter->msg_enable & 1) != 0) 
#line 1435 
                                             netdev_err((struct net_device const *)adapter->netdev,"failed STATUS register test got: 0x%08X expected: 0x%08X\n",after,value); else ;
    
#line 1437 
    *data = 1ULL;
    
#line 1438 
    __retres = 1;
    
#line 1438 
    goto return_label;
  }
  else ;
  
#line 1441 
  ixgbe_write_reg(& adapter->hw,8U,before);
  
#line 1447 
  goto ldv_56453;
  ldv_56452: 
#line 1448 
  ;
  
#line 1448 
  i = 0U;
  
#line 1448 
  goto ldv_56450;
  ldv_56449: 
#line 1449 
  ;
  {
    
#line 1449 
    bool b = (_Bool)0;
    
#line 1451 
    switch ((int)test->test_type) {
      case 1: 
#line 1452 
      ;
      
#line 1453 
      b = reg_pattern_test(adapter,data,(int)((unsigned int)test->reg + i * 64U),test->mask,test->write);
      
#line 1457 
      goto ldv_56443;
      case 2: 
#line 1458 
      ;
      
#line 1459 
      b = reg_set_and_check(adapter,data,(int)((unsigned int)test->reg + i * 64U),test->mask,test->write);
      
#line 1463 
      goto ldv_56443;
      case 3: 
#line 1464 
      ;
      
#line 1465 
      ixgbe_write_reg(& adapter->hw,(unsigned int)test->reg + i * 64U,test->write);
      
#line 1468 
      goto ldv_56443;
      case 4: 
#line 1469 
      ;
      
#line 1470 
      b = reg_pattern_test(adapter,data,(int)((unsigned int)test->reg + i * 4U),test->mask,test->write);
      
#line 1474 
      goto ldv_56443;
      case 5: 
#line 1475 
      ;
      
#line 1476 
      b = reg_pattern_test(adapter,data,(int)((unsigned int)test->reg + i * 8U),test->mask,test->write);
      
#line 1480 
      goto ldv_56443;
      case 6: 
#line 1481 
      ;
      
#line 1482 
      b = reg_pattern_test(adapter,data,(int)(((unsigned int)test->reg + i * 8U) + 4U),test->mask,test->write);
      
#line 1486 
      goto ldv_56443;
    }
    ldv_56443: 
#line 1488 
    ;
    
#line 1488 
    if ((int)b != 0) {
      
#line 1489 
      __retres = 1;
      
#line 1489 
      goto return_label;
    }
    else ;
  }
  
#line 1448 
  i += 1U;
  ldv_56450: 
#line 1449 
  ;
  
#line 1448 
  if ((unsigned int)test->array_len > i) 
#line 1450 
                                         goto ldv_56449; else 
#line 1453 
                                                              goto ldv_56451;
  ldv_56451: 
#line 1454 
  ;
  
#line 1491 
  test += 1;
  ldv_56453: 
#line 1492 
  ;
  
#line 1447 
  if ((unsigned int)test->reg != 0U) 
#line 1449 
                                     goto ldv_56452; else 
#line 1452 
                                                          goto ldv_56454;
  ldv_56454: 
#line 1453 
  ;
  
#line 1494 
  *data = 0ULL;
  
#line 1495 
  __retres = 0;
  return_label: 
#line 1495 
                return __retres;
}


#line 1498  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_ethtool.c"
static int ixgbe_eeprom_test(struct ixgbe_adapter *adapter, u64 *data)
{
  int __retres;
  s32 tmp;
  
#line 1500 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 1501 
  tmp = (*(hw->eeprom.ops.validate_checksum))(hw,(u16 *)0U);
  
#line 1501 
  if (tmp != 0) 
#line 1502 
                *data = 1ULL; else 
#line 1504 
                                   *data = 0ULL;
  
#line 1505 
  __retres = (int)*data;
  
#line 1505 
  return __retres;
}


#line 1508  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_ethtool.c"
static irqreturn_t ixgbe_test_intr(int irq, void *data)
{
  irqreturn_t __retres;
  u32 tmp_0;
  
#line 1510 
  struct net_device *netdev = (struct net_device *)data;
  
#line 1511 
  struct ixgbe_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 1513 
  tmp_0 = ixgbe_read_reg(& adapter->hw,2048U);
  
#line 1513 
  adapter->test_icr |= tmp_0;
  
#line 1515 
  __retres = IRQ_HANDLED;
  
#line 1515 
  return __retres;
}


#line 1518  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_ethtool.c"
static int ixgbe_intr_test(struct ixgbe_adapter *adapter, u64 *data)
{
  int __retres;
  u32 mask;
  
#line 1520 
  struct net_device *netdev = adapter->netdev;
  
#line 1521 
  u32 i = 0U;
  
#line 1521 
  u32 shared_int = 1U;
  
#line 1522 
  u32 irq = (adapter->pdev)->irq;
  
#line 1524 
  *data = 0ULL;
  
#line 1527 
  if (adapter->msix_entries != (struct msix_entry *)0) {
    
#line 1529 
    __retres = 0;
    
#line 1529 
    goto return_label;
  }
  else 
    
#line 1530 
    if ((adapter->flags & 2U) != 0U) {
      int tmp;
      
#line 1531 
      shared_int = 0U;
      
#line 1532 
      tmp = ldv_request_irq_73(irq,& ixgbe_test_intr,0UL,(char const *)(& netdev->name),(void *)netdev);
      
#line 1532 
      if (tmp != 0) {
        
#line 1534 
        *data = 1ULL;
        
#line 1535 
        __retres = -1;
        
#line 1535 
        goto return_label;
      }
      else ;
    }
    else {
      int tmp_1;
      
#line 1537 
      tmp_1 = ldv_request_irq_74_0(irq,& ixgbe_test_intr,256UL,(char const *)(& netdev->name),(void *)netdev);
      
#line 1537 
      if (tmp_1 == 0) 
#line 1539 
                      shared_int = 0U;
      else {
        int tmp_0;
        
#line 1540 
        tmp_0 = ldv_request_irq_75_0(irq,& ixgbe_test_intr,128UL,(char const *)(& netdev->name),(void *)netdev);
        
#line 1540 
        if (tmp_0 != 0) {
          
#line 1542 
          *data = 1ULL;
          
#line 1543 
          __retres = -1;
          
#line 1543 
          goto return_label;
        }
        else ;
      }
    }
  
#line 1545 
  if (((int)adapter->msg_enable & 8192) != 0) {
    char *tmp_2;
    
#line 1545 
    if (shared_int != 0U) 
#line 1545 
                          tmp_2 = (char *)"shared"; else 
#line 1545 
                                                         tmp_2 = (char *)"unshared";
    
#line 1545 
    ;
    
#line 1545 
    netdev_info((struct net_device const *)adapter->netdev,"testing %s interrupt\n",tmp_2);
  }
  else ;
  
#line 1549 
  ixgbe_write_reg(& adapter->hw,2184U,4294967295U);
  
#line 1550 
  ixgbe_read_reg(& adapter->hw,8U);
  
#line 1551 
  usleep_range(10000UL,20000UL);
  
#line 1554 
  goto ldv_56477;
  ldv_56476: 
#line 1555 
  ;
  
#line 1556 
  mask = (unsigned int)(1 << i);
  
#line 1558 
  if (shared_int == 0U) {
    
#line 1566 
    adapter->test_icr = 0U;
    
#line 1567 
    ixgbe_write_reg(& adapter->hw,2184U,~ mask & 32767U);
    
#line 1569 
    ixgbe_write_reg(& adapter->hw,2056U,~ mask & 32767U);
    
#line 1571 
    ixgbe_read_reg(& adapter->hw,8U);
    
#line 1572 
    usleep_range(10000UL,20000UL);
    
#line 1574 
    if ((adapter->test_icr & mask) != 0U) {
      
#line 1575 
      *data = 3ULL;
      
#line 1576 
      goto ldv_56475;
    }
    else ;
  }
  else ;
  
#line 1586 
  adapter->test_icr = 0U;
  
#line 1587 
  ixgbe_write_reg(& adapter->hw,2176U,mask);
  
#line 1588 
  ixgbe_write_reg(& adapter->hw,2056U,mask);
  
#line 1589 
  ixgbe_read_reg(& adapter->hw,8U);
  
#line 1590 
  usleep_range(10000UL,20000UL);
  
#line 1592 
  if ((adapter->test_icr & mask) == 0U) {
    
#line 1593 
    *data = 4ULL;
    
#line 1594 
    goto ldv_56475;
  }
  else ;
  
#line 1597 
  if (shared_int == 0U) {
    
#line 1605 
    adapter->test_icr = 0U;
    
#line 1606 
    ixgbe_write_reg(& adapter->hw,2184U,~ mask & 32767U);
    
#line 1608 
    ixgbe_write_reg(& adapter->hw,2056U,~ mask & 32767U);
    
#line 1610 
    ixgbe_read_reg(& adapter->hw,8U);
    
#line 1611 
    usleep_range(10000UL,20000UL);
    
#line 1613 
    if (adapter->test_icr != 0U) {
      
#line 1614 
      *data = 5ULL;
      
#line 1615 
      goto ldv_56475;
    }
    else ;
  }
  else ;
  
#line 1554 
  i += 1U;
  ldv_56477: 
#line 1555 
  ;
  
#line 1554 
  if (i <= 9U) 
#line 1556 
               goto ldv_56476; else 
#line 1559 
                                    goto ldv_56475;
  ldv_56475: 
#line 1560 
  ;
  
#line 1621 
  ixgbe_write_reg(& adapter->hw,2184U,4294967295U);
  
#line 1622 
  ixgbe_read_reg(& adapter->hw,8U);
  
#line 1623 
  usleep_range(10000UL,20000UL);
  
#line 1626 
  ldv_free_irq_76_0(irq,(void *)netdev);
  
#line 1628 
  __retres = (int)*data;
  return_label: 
#line 1628 
                return __retres;
}


#line 1631  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_ethtool.c"
static void ixgbe_free_desc_rings(struct ixgbe_adapter *adapter)
{
  u32 reg_ctl;
  
#line 1633 
  struct ixgbe_ring *tx_ring = & adapter->test_tx_ring;
  
#line 1634 
  struct ixgbe_ring *rx_ring = & adapter->test_rx_ring;
  
#line 1635 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 1641 
  (*(hw->mac.ops.disable_rx))(hw);
  
#line 1642 
  ixgbe_disable_rx_queue(adapter,rx_ring);
  
#line 1645 
  reg_ctl = ixgbe_read_reg(hw,(unsigned int)((int)tx_ring->reg_idx * 64 + 24616));
  
#line 1646 
  reg_ctl &= 4261412863U;
  
#line 1647 
  ixgbe_write_reg(hw,(unsigned int)((int)tx_ring->reg_idx * 64 + 24616),reg_ctl);
  
#line 1649 
  switch ((unsigned int)hw->mac.type) {
    case (unsigned int)2: 
#line 1650 
    ;
    case (unsigned int)3: 
#line 1651 
    ;
    case (unsigned int)4: 
#line 1652 
    ;
    case (unsigned int)5: 
#line 1653 
    ;
    
#line 1654 
    reg_ctl = ixgbe_read_reg(hw,19072U);
    
#line 1655 
    reg_ctl &= 4294967294U;
    
#line 1656 
    ixgbe_write_reg(hw,19072U,reg_ctl);
    
#line 1657 
    goto ldv_56489;
    default: 
#line 1658 
    ;
    
#line 1659 
    goto ldv_56489;
  }
  ldv_56489: 
#line 1662 
  ;
  
#line 1662 
  ixgbe_reset(adapter);
  
#line 1664 
  ixgbe_free_tx_resources(& adapter->test_tx_ring);
  
#line 1665 
  ixgbe_free_rx_resources(& adapter->test_rx_ring);
  
#line 1666 
  return;
}


#line 1668  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_ethtool.c"
static int ixgbe_setup_desc_rings(struct ixgbe_adapter *adapter)
{
  int __retres;
  u32 rctl;
  u32 reg_data;
  int ret_val;
  int err;
  
#line 1670 
  struct ixgbe_ring *tx_ring = & adapter->test_tx_ring;
  
#line 1671 
  struct ixgbe_ring *rx_ring = & adapter->test_rx_ring;
  
#line 1672 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 1678 
  tx_ring->count = (unsigned short)512U;
  
#line 1679 
  tx_ring->queue_index = (unsigned char)0U;
  
#line 1680 
  tx_ring->dev = & (adapter->pdev)->dev;
  
#line 1681 
  tx_ring->netdev = adapter->netdev;
  
#line 1682 
  tx_ring->reg_idx = (adapter->tx_ring[0])->reg_idx;
  
#line 1684 
  err = ixgbe_setup_tx_resources(tx_ring);
  
#line 1685 
  if (err != 0) {
    
#line 1686 
    __retres = 1;
    
#line 1686 
    goto return_label;
  }
  else ;
  
#line 1688 
  switch ((unsigned int)adapter->hw.mac.type) {
    case (unsigned int)2: 
#line 1689 
    ;
    case (unsigned int)3: 
#line 1690 
    ;
    case (unsigned int)4: 
#line 1691 
    ;
    case (unsigned int)5: 
#line 1692 
    ;
    
#line 1693 
    reg_data = ixgbe_read_reg(& adapter->hw,19072U);
    
#line 1694 
    reg_data |= 1U;
    
#line 1695 
    ixgbe_write_reg(& adapter->hw,19072U,reg_data);
    
#line 1696 
    goto ldv_56505;
    default: 
#line 1697 
    ;
    
#line 1698 
    goto ldv_56505;
  }
  ldv_56505: 
#line 1701 
  ;
  
#line 1701 
  ixgbe_configure_tx_ring(adapter,tx_ring);
  
#line 1704 
  rx_ring->count = (unsigned short)512U;
  
#line 1705 
  rx_ring->queue_index = (unsigned char)0U;
  
#line 1706 
  rx_ring->dev = & (adapter->pdev)->dev;
  
#line 1707 
  rx_ring->netdev = adapter->netdev;
  
#line 1708 
  rx_ring->reg_idx = (adapter->rx_ring[0])->reg_idx;
  
#line 1710 
  err = ixgbe_setup_rx_resources(rx_ring);
  
#line 1711 
  if (err != 0) {
    
#line 1712 
    ret_val = 4;
    
#line 1713 
    goto err_nomem;
  }
  else ;
  
#line 1716 
  (*(hw->mac.ops.disable_rx))(hw);
  
#line 1718 
  ixgbe_configure_rx_ring(adapter,rx_ring);
  
#line 1720 
  rctl = ixgbe_read_reg(& adapter->hw,12288U);
  
#line 1721 
  rctl |= 2U;
  
#line 1722 
  ixgbe_write_reg(& adapter->hw,12288U,rctl);
  
#line 1724 
  (*(hw->mac.ops.enable_rx))(hw);
  
#line 1726 
  __retres = 0;
  
#line 1726 
  goto return_label;
  err_nomem: 
#line 1728 
  ;
  
#line 1729 
  ixgbe_free_desc_rings(adapter);
  
#line 1730 
  __retres = ret_val;
  return_label: 
#line 1730 
                return __retres;
}


#line 1733  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_ethtool.c"
static int ixgbe_setup_loopback_test(struct ixgbe_adapter *adapter)
{
  int __retres;
  u32 reg_data;
  
#line 1735 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 1740 
  reg_data = ixgbe_read_reg(hw,16960U);
  
#line 1741 
  reg_data |= 32768U;
  
#line 1742 
  ixgbe_write_reg(hw,16960U,reg_data);
  
#line 1744 
  reg_data = ixgbe_read_reg(hw,20608U);
  
#line 1745 
  reg_data |= 1282U;
  
#line 1746 
  ixgbe_write_reg(hw,20608U,reg_data);
  
#line 1749 
  switch ((unsigned int)adapter->hw.mac.type) {
    case (unsigned int)3: 
#line 1750 
    ;
    case (unsigned int)4: 
#line 1751 
    ;
    case (unsigned int)5: 
#line 1752 
    ;
    
#line 1753 
    reg_data = ixgbe_read_reg(hw,17200U);
    
#line 1754 
    reg_data |= 1U;
    
#line 1755 
    ixgbe_write_reg(hw,17200U,reg_data);
    
#line 1756 
    goto ldv_56516;
    default: 
#line 1757 
    ;
    
#line 1758 
    if (hw->mac.orig_autoc != 0U) {
      
#line 1759 
      reg_data = hw->mac.orig_autoc | 1U;
      
#line 1760 
      ixgbe_write_reg(hw,17056U,reg_data);
    }
    else {
      
#line 1762 
      __retres = 10;
      
#line 1762 
      goto return_label;
    }
  }
  ldv_56516: 
#line 1765 
  ;
  
#line 1765 
  ixgbe_read_reg(hw,8U);
  
#line 1766 
  usleep_range(10000UL,20000UL);
  
#line 1769 
  if (hw->mac.type == (unsigned int)ixgbe_mac_82598EB) {
    u8 atlas;
    
#line 1772 
    (*(hw->mac.ops.read_analog_reg8))(hw,36U,& atlas);
    
#line 1773 
    atlas = (unsigned char)((unsigned int)atlas | 16U);
    
#line 1774 
    (*(hw->mac.ops.write_analog_reg8))(hw,36U,(unsigned char)((int)atlas));
    
#line 1776 
    (*(hw->mac.ops.read_analog_reg8))(hw,11U,& atlas);
    
#line 1777 
    atlas = (unsigned char)((unsigned int)atlas | 240U);
    
#line 1778 
    (*(hw->mac.ops.write_analog_reg8))(hw,11U,(unsigned char)((int)atlas));
    
#line 1780 
    (*(hw->mac.ops.read_analog_reg8))(hw,12U,& atlas);
    
#line 1781 
    atlas = (unsigned char)((unsigned int)atlas | 240U);
    
#line 1782 
    (*(hw->mac.ops.write_analog_reg8))(hw,12U,(unsigned char)((int)atlas));
    
#line 1784 
    (*(hw->mac.ops.read_analog_reg8))(hw,13U,& atlas);
    
#line 1785 
    atlas = (unsigned char)((unsigned int)atlas | 240U);
    
#line 1786 
    (*(hw->mac.ops.write_analog_reg8))(hw,13U,(unsigned char)((int)atlas));
  }
  else ;
  
#line 1789 
  __retres = 0;
  return_label: 
#line 1789 
                return __retres;
}


#line 1792  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_ethtool.c"
static void ixgbe_loopback_cleanup(struct ixgbe_adapter *adapter)
{
  u32 reg_data;
  
#line 1796 
  reg_data = ixgbe_read_reg(& adapter->hw,16960U);
  
#line 1797 
  reg_data &= 4294934527U;
  
#line 1798 
  ixgbe_write_reg(& adapter->hw,16960U,reg_data);
  
#line 1799 
  return;
}


#line 1801  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_ethtool.c"
static void ixgbe_create_lbtest_frame(struct sk_buff *skb, unsigned int frame_size)
{
  
#line 1804 
  memset((void *)skb->data,255,(unsigned long)frame_size);
  
#line 1805 
  frame_size >>= 1;
  
#line 1806 
  memset((void *)(skb->data + frame_size),170,(unsigned long)(frame_size / 2U + 4294967295U));
  
#line 1807 
  memset((void *)(skb->data + (frame_size + 10U)),190,1UL);
  
#line 1808 
  memset((void *)(skb->data + (frame_size + 12U)),175,1UL);
  
#line 1809 
  return;
}


#line 1811  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_ethtool.c"
static bool ixgbe_check_lbtest_frame(struct ixgbe_rx_buffer *rx_buffer, unsigned int frame_size)
{
  unsigned char *data;
  void *tmp;
  
#line 1815 
  bool match = (_Bool)1;
  
#line 1817 
  frame_size >>= 1;
  
#line 1819 
  tmp = kmap(rx_buffer->page);
  
#line 1819 
  data = (unsigned char *)(tmp + rx_buffer->page_offset);
  
#line 1821 
  if (((unsigned int)*(data + 3U) != 255U || (unsigned int)*(data + (frame_size + 10U)) != 190U) || (unsigned int)*(data + (frame_size + 12U)) != 175U) 
    
#line 1824 
    match = (_Bool)0; else ;
  
#line 1826 
  kunmap(rx_buffer->page);
  
#line 1828 
  return match;
}


#line 1831  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_ethtool.c"
static u16 ixgbe_clean_test_rings(struct ixgbe_ring *rx_ring, struct ixgbe_ring *tx_ring, unsigned int size)
{
  union ixgbe_adv_rx_desc *rx_desc;
  struct ixgbe_rx_buffer *rx_buffer;
  struct ixgbe_tx_buffer *tx_buffer;
  u16 rx_ntc;
  u16 tx_ntc;
  unsigned int tmp;
  bool tmp_0;
  unsigned int tmp_1;
  __le32 tmp_2;
  struct netdev_queue *tmp_3;
  
#line 1838 
  u16 count = (unsigned short)0U;
  
#line 1841 
  rx_ntc = rx_ring->next_to_clean;
  
#line 1842 
  tx_ntc = tx_ring->next_to_clean;
  
#line 1843 
  rx_desc = (union ixgbe_adv_rx_desc *)rx_ring->desc + (int)rx_ntc;
  
#line 1845 
  goto ldv_56545;
  ldv_56544: 
#line 1846 
  ;
  
#line 1847 
  rx_buffer = rx_ring->__anonCompField_ixgbe_ring_117.rx_buffer_info + (int)rx_ntc;
  
#line 1852 
  tmp = ixgbe_rx_bufsz(rx_ring);
  
#line 1850 
  ;
  
#line 1850 
  ;
  
#line 1850 
  dma_sync_single_for_cpu(rx_ring->dev,rx_buffer->dma,(unsigned long)tmp,(enum dma_data_direction)DMA_FROM_DEVICE);
  
#line 1856 
  tmp_0 = ixgbe_check_lbtest_frame(rx_buffer,size);
  
#line 1856 
  if ((int)tmp_0 != 0) 
#line 1857 
                       count = (u16)((int)count + 1); else ;
  
#line 1862 
  tmp_1 = ixgbe_rx_bufsz(rx_ring);
  
#line 1860 
  ;
  
#line 1860 
  ;
  
#line 1860 
  dma_sync_single_for_device(rx_ring->dev,rx_buffer->dma,(unsigned long)tmp_1,(enum dma_data_direction)DMA_FROM_DEVICE);
  
#line 1866 
  tx_buffer = tx_ring->__anonCompField_ixgbe_ring_117.tx_buffer_info + (int)tx_ntc;
  
#line 1867 
  ixgbe_unmap_and_free_tx_resource(tx_ring,tx_buffer);
  
#line 1870 
  rx_ntc = (u16)((int)rx_ntc + 1);
  
#line 1871 
  if ((int)rx_ring->count == (int)rx_ntc) 
#line 1872 
                                          rx_ntc = (unsigned short)0U; else ;
  
#line 1873 
  tx_ntc = (u16)((int)tx_ntc + 1);
  
#line 1874 
  if ((int)tx_ring->count == (int)tx_ntc) 
#line 1875 
                                          tx_ntc = (unsigned short)0U; else ;
  
#line 1878 
  rx_desc = (union ixgbe_adv_rx_desc *)rx_ring->desc + (int)rx_ntc;
  ldv_56545: 
#line 1879 
  ;
  
#line 1845 
  tmp_2 = ixgbe_test_staterr(rx_desc,1U);
  
#line 1845 
  if (tmp_2 != 0U) 
#line 1847 
                   goto ldv_56544; else 
#line 1850 
                                        goto ldv_56546;
  ldv_56546: 
#line 1851 
  ;
  
#line 1881 
  tmp_3 = txring_txq((struct ixgbe_ring const *)tx_ring);
  
#line 1881 
  netdev_tx_reset_queue(tmp_3);
  
#line 1884 
  ixgbe_alloc_rx_buffers(rx_ring,(unsigned short)((int)count));
  
#line 1885 
  rx_ring->next_to_clean = rx_ntc;
  
#line 1886 
  tx_ring->next_to_clean = tx_ntc;
  
#line 1888 
  return count;
}


#line 1891  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_ethtool.c"
static int ixgbe_run_loopback_test(struct ixgbe_adapter *adapter)
{
  int __retres;
  int i;
  int j;
  int lc;
  int good_cnt;
  netdev_tx_t tx_ret_val;
  struct sk_buff *skb;
  u16 tmp;
  
#line 1893 
  struct ixgbe_ring *tx_ring = & adapter->test_tx_ring;
  
#line 1894 
  struct ixgbe_ring *rx_ring = & adapter->test_rx_ring;
  
#line 1895 
  int ret_val = 0;
  
#line 1896 
  unsigned int size = 1024U;
  
#line 1899 
  u32 flags_orig = adapter->flags;
  
#line 1902 
  adapter->flags &= 4294963199U;
  
#line 1905 
  skb = alloc_skb(size,208U);
  
#line 1906 
  if (skb == (struct sk_buff *)0) {
    
#line 1907 
    __retres = 11;
    
#line 1907 
    goto return_label;
  }
  else ;
  
#line 1910 
  ixgbe_create_lbtest_frame(skb,size);
  
#line 1911 
  skb_put(skb,size);
  
#line 1919 
  if ((int)rx_ring->count <= (int)tx_ring->count) 
#line 1920 
                                                  lc = (int)((unsigned int)tx_ring->count / 64U) * 2 + 1; else 
                                                                    
#line 1922 
                                                                    lc = (int)((unsigned int)rx_ring->count / 64U) * 2 + 1;
  
#line 1924 
  j = 0;
  
#line 1924 
  goto ldv_56566;
  ldv_56565: 
#line 1925 
  ;
  
#line 1926 
  good_cnt = 0;
  
#line 1929 
  i = 0;
  
#line 1929 
  goto ldv_56562;
  ldv_56561: 
#line 1930 
  ;
  
#line 1930 
  skb_get_0(skb);
  
#line 1931 
  tx_ret_val = ixgbe_xmit_frame_ring(skb,adapter,tx_ring);
  
#line 1934 
  if (tx_ret_val == (unsigned int)NETDEV_TX_OK) 
#line 1935 
                                                good_cnt += 1; else ;
  
#line 1929 
  i += 1;
  ldv_56562: 
#line 1930 
  ;
  
#line 1929 
  if (i <= 63) 
#line 1931 
               goto ldv_56561; else 
#line 1934 
                                    goto ldv_56563;
  ldv_56563: 
#line 1935 
  ;
  
#line 1938 
  if (good_cnt != 64) {
    
#line 1939 
    ret_val = 12;
    
#line 1940 
    goto ldv_56564;
  }
  else ;
  
#line 1944 
  msleep(200U);
  
#line 1946 
  tmp = ixgbe_clean_test_rings(rx_ring,tx_ring,size);
  
#line 1946 
  good_cnt = (int)tmp;
  
#line 1947 
  if (good_cnt != 64) {
    
#line 1948 
    ret_val = 13;
    
#line 1949 
    goto ldv_56564;
  }
  else ;
  
#line 1924 
  j += 1;
  ldv_56566: 
#line 1925 
  ;
  
#line 1924 
  if (j <= lc) 
#line 1926 
               goto ldv_56565; else 
#line 1929 
                                    goto ldv_56564;
  ldv_56564: 
#line 1930 
  ;
  
#line 1954 
  kfree_skb(skb);
  
#line 1955 
  adapter->flags = flags_orig;
  
#line 1957 
  __retres = ret_val;
  return_label: 
#line 1957 
                return __retres;
}


#line 1960  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_ethtool.c"
static int ixgbe_loopback_test(struct ixgbe_adapter *adapter, u64 *data)
{
  int __retres;
  int tmp;
  int tmp_0;
  int tmp_1;
  
#line 1962 
  tmp = ixgbe_setup_desc_rings(adapter);
  
#line 1962 
  *data = (unsigned long long)tmp;
  
#line 1963 
  if (*data != 0ULL) 
#line 1964 
                     goto out; else ;
  
#line 1965 
  tmp_0 = ixgbe_setup_loopback_test(adapter);
  
#line 1965 
  *data = (unsigned long long)tmp_0;
  
#line 1966 
  if (*data != 0ULL) 
#line 1967 
                     goto err_loopback; else ;
  
#line 1968 
  tmp_1 = ixgbe_run_loopback_test(adapter);
  
#line 1968 
  *data = (unsigned long long)tmp_1;
  
#line 1969 
  ixgbe_loopback_cleanup(adapter);
  err_loopback: 
#line 1971 
  ;
  
#line 1972 
  ixgbe_free_desc_rings(adapter);
  out: 
#line 1973 
  ;
  
#line 1974 
  __retres = (int)*data;
  
#line 1974 
  return __retres;
}


#line 1977  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_ethtool.c"
static void ixgbe_diag_test(struct net_device *netdev, struct ethtool_test *eth_test, u64 *data)
{
  bool tmp_1;
  
#line 1980 
  struct ixgbe_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 1981 
  bool if_running = netif_running((struct net_device const *)netdev);
  
#line 1983 
  tmp_1 = ixgbe_removed((void *)adapter->hw.hw_addr);
  
#line 1983 
  if ((int)tmp_1 != 0) {
    
#line 1984 
    if (((int)adapter->msg_enable & 8192) != 0) 
#line 1984 
                                                netdev_err((struct net_device const *)adapter->netdev,"Adapter removed - test blocked\n"); else ;
    
#line 1985 
    *data = 1ULL;
    
#line 1986 
    *(data + 1U) = 1ULL;
    
#line 1987 
    *(data + 2U) = 1ULL;
    
#line 1988 
    *(data + 3U) = 1ULL;
    
#line 1989 
    *(data + 4U) = 1ULL;
    
#line 1990 
    eth_test->flags |= 2U;
    
#line 1991 
    goto return_label;
  }
  else ;
  
#line 1993 
  set_bit(0L,(unsigned long volatile *)(& adapter->state));
  
#line 1994 
  if (eth_test->flags == 1U) {
    int tmp_2;
    int tmp_3;
    int tmp_4;
    int tmp_5;
    int tmp_6;
    
#line 1995 
    struct ixgbe_hw *hw = & adapter->hw;
    
#line 1997 
    if ((adapter->flags & 8388608U) != 0U) {
      int i;
      
#line 1999 
      i = 0;
      
#line 1999 
      goto ldv_56584;
      ldv_56583: 
#line 2000 
      ;
      
#line 2000 
      if ((int)(adapter->vfinfo + i)->clear_to_send != 0) {
        
#line 2001 
        netdev_warn((struct net_device const *)netdev,"offline diagnostic is not supported when VFs are present\n");
        
#line 2002 
        *data = 1ULL;
        
#line 2003 
        *(data + 1U) = 1ULL;
        
#line 2004 
        *(data + 2U) = 1ULL;
        
#line 2005 
        *(data + 3U) = 1ULL;
        
#line 2006 
        *(data + 4U) = 1ULL;
        
#line 2007 
        eth_test->flags |= 2U;
        
#line 2008 
        set_bit(0L,(unsigned long volatile *)(& adapter->state));
        
#line 2010 
        goto skip_ol_tests;
      }
      else ;
      
#line 1999 
      i += 1;
      ldv_56584: 
#line 2000 
      ;
      
#line 1999 
      if (adapter->num_vfs > (unsigned int)i) 
#line 2001 
                                              goto ldv_56583; else 
#line 2004 
                                                                   goto ldv_56585;
      ldv_56585: 
#line 2005 
      ;
    }
    else ;
    
#line 2016 
    if (((int)adapter->msg_enable & 8192) != 0) 
#line 2016 
                                                netdev_info((struct net_device const *)adapter->netdev,"offline testing starting\n"); else ;
    
#line 2021 
    tmp_2 = ixgbe_link_test(adapter,data + 4U);
    
#line 2021 
    if (tmp_2 != 0) 
#line 2022 
                    eth_test->flags |= 2U; else ;
    
#line 2024 
    if ((int)if_running != 0) 
#line 2026 
                              dev_close(netdev); else 
#line 2028 
                                                      ixgbe_reset(adapter);
    
#line 2030 
    if (((int)adapter->msg_enable & 8192) != 0) 
#line 2030 
                                                netdev_info((struct net_device const *)adapter->netdev,"register testing starting\n"); else ;
    
#line 2031 
    tmp_3 = ixgbe_reg_test(adapter,data);
    
#line 2031 
    if (tmp_3 != 0) 
#line 2032 
                    eth_test->flags |= 2U; else ;
    
#line 2034 
    ixgbe_reset(adapter);
    
#line 2035 
    if (((int)adapter->msg_enable & 8192) != 0) 
#line 2035 
                                                netdev_info((struct net_device const *)adapter->netdev,"eeprom testing starting\n"); else ;
    
#line 2036 
    tmp_4 = ixgbe_eeprom_test(adapter,data + 1U);
    
#line 2036 
    if (tmp_4 != 0) 
#line 2037 
                    eth_test->flags |= 2U; else ;
    
#line 2039 
    ixgbe_reset(adapter);
    
#line 2040 
    if (((int)adapter->msg_enable & 8192) != 0) 
#line 2040 
                                                netdev_info((struct net_device const *)adapter->netdev,"interrupt testing starting\n"); else ;
    
#line 2041 
    tmp_5 = ixgbe_intr_test(adapter,data + 2U);
    
#line 2041 
    if (tmp_5 != 0) 
#line 2042 
                    eth_test->flags |= 2U; else ;
    
#line 2046 
    if ((adapter->flags & 8404992U) != 0U) {
      
#line 2048 
      if (((int)adapter->msg_enable & 8192) != 0) 
#line 2048 
                                                  netdev_info((struct net_device const *)adapter->netdev,"Skip MAC loopback diagnostic in VT mode\n"); else ;
      
#line 2049 
      *(data + 3U) = 0ULL;
      
#line 2050 
      goto skip_loopback;
    }
    else ;
    
#line 2053 
    ixgbe_reset(adapter);
    
#line 2054 
    if (((int)adapter->msg_enable & 8192) != 0) 
#line 2054 
                                                netdev_info((struct net_device const *)adapter->netdev,"loopback testing starting\n"); else ;
    
#line 2055 
    tmp_6 = ixgbe_loopback_test(adapter,data + 3U);
    
#line 2055 
    if (tmp_6 != 0) 
#line 2056 
                    eth_test->flags |= 2U; else ;
    skip_loopback: 
#line 2058 
    ;
    
#line 2059 
    ixgbe_reset(adapter);
    
#line 2062 
    set_bit(0L,(unsigned long volatile *)(& adapter->state));
    
#line 2063 
    if ((int)if_running != 0) 
#line 2064 
                              dev_open(netdev);
    else 
      
#line 2065 
      if (hw->mac.ops.disable_tx_laser != (void (*)(struct ixgbe_hw *))0) 
        
#line 2066 
        (*(hw->mac.ops.disable_tx_laser))(hw); else ;
  }
  else {
    int tmp_7;
    
#line 2068 
    if (((int)adapter->msg_enable & 8192) != 0) 
#line 2068 
                                                netdev_info((struct net_device const *)adapter->netdev,"online testing starting\n"); else ;
    
#line 2071 
    tmp_7 = ixgbe_link_test(adapter,data + 4U);
    
#line 2071 
    if (tmp_7 != 0) 
#line 2072 
                    eth_test->flags |= 2U; else ;
    
#line 2075 
    *data = 0ULL;
    
#line 2076 
    *(data + 1U) = 0ULL;
    
#line 2077 
    *(data + 2U) = 0ULL;
    
#line 2078 
    *(data + 3U) = 0ULL;
    
#line 2080 
    set_bit(0L,(unsigned long volatile *)(& adapter->state));
  }
  skip_ol_tests: 
#line 2083 
  ;
  
#line 2084 
  msleep_interruptible(4000U);
  return_label: 
#line 2085 
                return;
}


#line 2087  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_ethtool.c"
static int ixgbe_wol_exclusion(struct ixgbe_adapter *adapter, struct ethtool_wolinfo *wol)
{
  int tmp;
  
#line 2090 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 2091 
  int retval = 0;
  
#line 2094 
  tmp = ixgbe_wol_supported(adapter,(unsigned short)((int)hw->device_id),(unsigned short)((int)hw->subsystem_device_id));
  
#line 2094 
  if (tmp == 0) {
    
#line 2096 
    retval = 1;
    
#line 2097 
    wol->supported = 0U;
  }
  else ;
  
#line 2100 
  return retval;
}


#line 2103  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_ethtool.c"
static void ixgbe_get_wol(struct net_device *netdev, struct ethtool_wolinfo *wol)
{
  int tmp_0;
  
#line 2106 
  struct ixgbe_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 2108 
  wol->supported = 46U;
  
#line 2110 
  wol->wolopts = 0U;
  
#line 2112 
  tmp_0 = ixgbe_wol_exclusion(adapter,wol);
  
#line 2112 
  if (tmp_0 != 0) 
#line 2114 
                  goto return_label;
  else {
    int tmp_2;
    bool tmp_1;
    
#line 2113 
    tmp_1 = device_can_wakeup(& (adapter->pdev)->dev);
    
#line 2113 
    if (tmp_1) 
#line 2113 
               tmp_2 = 0; else 
#line 2113 
                               tmp_2 = 1;
    
#line 2113 
    if (tmp_2) 
#line 2114 
               goto return_label; else ;
  }
  
#line 2116 
  if ((adapter->wol & 4U) != 0U) 
#line 2117 
                                 wol->wolopts |= 2U; else ;
  
#line 2118 
  if ((adapter->wol & 8U) != 0U) 
#line 2119 
                                 wol->wolopts |= 4U; else ;
  
#line 2120 
  if ((adapter->wol & 16U) != 0U) 
#line 2121 
                                  wol->wolopts |= 8U; else ;
  
#line 2122 
  if ((adapter->wol & 2U) != 0U) 
#line 2123 
                                 wol->wolopts |= 32U; else ;
  return_label: 
#line 2124 
                return;
}


#line 2126  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_ethtool.c"
static int ixgbe_set_wol(struct net_device *netdev, struct ethtool_wolinfo *wol)
{
  int __retres;
  int tmp_1;
  
#line 2128 
  struct ixgbe_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 2130 
  if ((wol->wolopts & 81U) != 0U) {
    
#line 2131 
    __retres = -95;
    
#line 2131 
    goto return_label;
  }
  else ;
  
#line 2133 
  tmp_1 = ixgbe_wol_exclusion(adapter,wol);
  
#line 2133 
  if (tmp_1 != 0) {
    int tmp_0;
    
#line 2134 
    if (wol->wolopts != 0U) 
#line 2134 
                            tmp_0 = -95; else 
#line 2134 
                                              tmp_0 = 0;
    
#line 2134 
    __retres = tmp_0;
    
#line 2134 
    goto return_label;
  }
  else ;
  
#line 2136 
  adapter->wol = 0U;
  
#line 2138 
  if ((wol->wolopts & 2U) != 0U) 
#line 2139 
                                 adapter->wol |= 4U; else ;
  
#line 2140 
  if ((wol->wolopts & 4U) != 0U) 
#line 2141 
                                 adapter->wol |= 8U; else ;
  
#line 2142 
  if ((wol->wolopts & 8U) != 0U) 
#line 2143 
                                 adapter->wol |= 16U; else ;
  
#line 2144 
  if ((wol->wolopts & 32U) != 0U) 
#line 2145 
                                  adapter->wol |= 2U; else ;
  
#line 2147 
  device_set_wakeup_enable(& (adapter->pdev)->dev,(_Bool)(adapter->wol != 0U));
  
#line 2149 
  __retres = 0;
  return_label: 
#line 2149 
                return __retres;
}


#line 2152  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_ethtool.c"
static int ixgbe_nway_reset(struct net_device *netdev)
{
  int __retres;
  bool tmp_0;
  
#line 2154 
  struct ixgbe_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 2156 
  tmp_0 = netif_running((struct net_device const *)netdev);
  
#line 2156 
  if ((int)tmp_0 != 0) 
#line 2157 
                       ixgbe_reinit_locked(adapter); else ;
  
#line 2159 
  __retres = 0;
  
#line 2159 
  return __retres;
}


#line 2162  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_ethtool.c"
static int ixgbe_set_phys_id(struct net_device *netdev, enum ethtool_phys_id_state state)
{
  int __retres;
  
#line 2165 
  struct ixgbe_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 2166 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 2168 
  switch ((unsigned int)state) {
    case (unsigned int)1: 
#line 2169 
    ;
    
#line 2170 
    adapter->led_reg = ixgbe_read_reg(hw,512U);
    
#line 2171 
    __retres = 2;
    
#line 2171 
    goto return_label;
    case (unsigned int)2: 
#line 2173 
    ;
    
#line 2174 
    (*(hw->mac.ops.led_on))(hw,14U);
    
#line 2175 
    goto ldv_56615;
    case (unsigned int)3: 
#line 2177 
    ;
    
#line 2178 
    (*(hw->mac.ops.led_off))(hw,14U);
    
#line 2179 
    goto ldv_56615;
    case (unsigned int)0: 
#line 2181 
    ;
    
#line 2183 
    ixgbe_write_reg(& adapter->hw,512U,adapter->led_reg);
    
#line 2184 
    goto ldv_56615;
  }
  ldv_56615: 
#line 2187 
  ;
  
#line 2187 
  __retres = 0;
  return_label: 
#line 2187 
                return __retres;
}


#line 2190  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_ethtool.c"
static int ixgbe_get_coalesce(struct net_device *netdev, struct ethtool_coalesce *ec)
{
  int __retres;
  
#line 2193 
  struct ixgbe_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 2196 
  if ((unsigned int)adapter->rx_itr_setting <= 1U) 
#line 2197 
                                                   ec->rx_coalesce_usecs = (unsigned int)adapter->rx_itr_setting; else 
                                                                    
#line 2199 
                                                                    ec->rx_coalesce_usecs = (unsigned int)((int)adapter->rx_itr_setting >> 2);
  
#line 2202 
  if ((unsigned int)(adapter->q_vector[0])->tx.count != 0U && (unsigned int)(adapter->q_vector[0])->rx.count != 0U) {
    
#line 2203 
    __retres = 0;
    
#line 2203 
    goto return_label;
  }
  else ;
  
#line 2206 
  if ((unsigned int)adapter->tx_itr_setting <= 1U) 
#line 2207 
                                                   ec->tx_coalesce_usecs = (unsigned int)adapter->tx_itr_setting; else 
                                                                    
#line 2209 
                                                                    ec->tx_coalesce_usecs = (unsigned int)((int)adapter->tx_itr_setting >> 2);
  
#line 2211 
  __retres = 0;
  return_label: 
#line 2211 
                return __retres;
}


#line 2218  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_ethtool.c"
static bool ixgbe_update_rsc(struct ixgbe_adapter *adapter)
{
  bool __retres;
  
#line 2220 
  struct net_device *netdev = adapter->netdev;
  
#line 2223 
  if ((adapter->flags2 & 1U) == 0U || (netdev->features & 32768ULL) == 0ULL) {
    
#line 2225 
    __retres = (_Bool)0;
    
#line 2225 
    goto return_label;
  }
  else ;
  
#line 2228 
  if ((unsigned int)adapter->rx_itr_setting == 1U || (unsigned int)adapter->rx_itr_setting > 24U) {
    
#line 2230 
    if ((adapter->flags2 & 2U) == 0U) {
      
#line 2231 
      adapter->flags2 |= 2U;
      
#line 2232 
      if (((int)adapter->msg_enable & 2) != 0) 
#line 2232 
                                               netdev_info((struct net_device const *)adapter->netdev,"rx-usecs value high enough to re-enable RSC\n"); else ;
      
#line 2233 
      __retres = (_Bool)1;
      
#line 2233 
      goto return_label;
    }
    else ;
  }
  else 
    
#line 2236 
    if ((adapter->flags2 & 2U) != 0U) {
      
#line 2237 
      adapter->flags2 &= 4294967293U;
      
#line 2238 
      if (((int)adapter->msg_enable & 2) != 0) 
#line 2238 
                                               netdev_info((struct net_device const *)adapter->netdev,"rx-usecs set too low, disabling RSC\n"); else ;
      
#line 2239 
      __retres = (_Bool)1;
      
#line 2239 
      goto return_label;
    }
    else ;
  
#line 2241 
  __retres = (_Bool)0;
  return_label: 
#line 2241 
                return __retres;
}


#line 2244  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_ethtool.c"
static int ixgbe_set_coalesce(struct net_device *netdev, struct ethtool_coalesce *ec)
{
  int __retres;
  struct ixgbe_q_vector *q_vector;
  int i;
  u16 tx_itr_param;
  u16 rx_itr_param;
  u16 tx_itr_prev;
  bool tmp_0;
  
#line 2247 
  struct ixgbe_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 2251 
  bool need_reset = (_Bool)0;
  
#line 2253 
  if ((unsigned int)(adapter->q_vector[0])->tx.count != 0U && (unsigned int)(adapter->q_vector[0])->rx.count != 0U) {
    
#line 2255 
    if (ec->tx_coalesce_usecs != 0U) {
      
#line 2256 
      __retres = -22;
      
#line 2256 
      goto return_label;
    }
    else ;
    
#line 2257 
    tx_itr_prev = adapter->rx_itr_setting;
  }
  else 
#line 2259 
       tx_itr_prev = adapter->tx_itr_setting;
  
#line 2262 
  if (ec->rx_coalesce_usecs > 1022U || ec->tx_coalesce_usecs > 1022U) {
    
#line 2264 
    __retres = -22;
    
#line 2264 
    goto return_label;
  }
  else ;
  
#line 2266 
  if (ec->rx_coalesce_usecs > 1U) 
#line 2267 
                                  adapter->rx_itr_setting = (unsigned short)((int)((unsigned short)ec->rx_coalesce_usecs) << 2U); else 
                                                                    
#line 2269 
                                                                    adapter->rx_itr_setting = (unsigned short)ec->rx_coalesce_usecs;
  
#line 2271 
  if ((unsigned int)adapter->rx_itr_setting == 1U) 
#line 2272 
                                                   rx_itr_param = (unsigned short)200U; else 
                                                                    
#line 2274 
                                                                    rx_itr_param = adapter->rx_itr_setting;
  
#line 2276 
  if (ec->tx_coalesce_usecs > 1U) 
#line 2277 
                                  adapter->tx_itr_setting = (unsigned short)((int)((unsigned short)ec->tx_coalesce_usecs) << 2U); else 
                                                                    
#line 2279 
                                                                    adapter->tx_itr_setting = (unsigned short)ec->tx_coalesce_usecs;
  
#line 2281 
  if ((unsigned int)adapter->tx_itr_setting == 1U) 
#line 2282 
                                                   tx_itr_param = (unsigned short)400U; else 
                                                                    
#line 2284 
                                                                    tx_itr_param = adapter->tx_itr_setting;
  
#line 2287 
  if ((unsigned int)(adapter->q_vector[0])->tx.count != 0U && (unsigned int)(adapter->q_vector[0])->rx.count != 0U) 
    
#line 2288 
    adapter->tx_itr_setting = adapter->rx_itr_setting; else ;
  
#line 2291 
  if ((unsigned int)adapter->tx_itr_setting != 1U && (unsigned int)adapter->tx_itr_setting <= 39U) {
    
#line 2293 
    if ((unsigned int)tx_itr_prev == 1U || (unsigned int)tx_itr_prev > 39U) 
      
#line 2295 
      need_reset = (_Bool)1; else ;
  }
  else 
    
#line 2297 
    if ((unsigned int)tx_itr_prev != 1U && (unsigned int)tx_itr_prev <= 39U) 
      
#line 2299 
      need_reset = (_Bool)1; else ;
  
#line 2303 
  tmp_0 = ixgbe_update_rsc(adapter);
  
#line 2303 
  need_reset = (_Bool)(((int)tmp_0 | (int)need_reset) != 0);
  
#line 2305 
  i = 0;
  
#line 2305 
  goto ldv_56639;
  ldv_56638: 
#line 2306 
  ;
  
#line 2306 
  q_vector = adapter->q_vector[i];
  
#line 2307 
  if ((unsigned int)q_vector->tx.count != 0U && (unsigned int)q_vector->rx.count == 0U) 
    
#line 2309 
    q_vector->itr = tx_itr_param; else 
#line 2312 
                                       q_vector->itr = rx_itr_param;
  
#line 2313 
  ixgbe_write_eitr(q_vector);
  
#line 2305 
  i += 1;
  ldv_56639: 
#line 2306 
  ;
  
#line 2305 
  if (adapter->num_q_vectors > i) 
#line 2307 
                                  goto ldv_56638; else 
#line 2310 
                                                       goto ldv_56640;
  ldv_56640: 
#line 2311 
  ;
  
#line 2321 
  if ((int)need_reset != 0) 
#line 2322 
                            ixgbe_do_reset(netdev); else ;
  
#line 2324 
  __retres = 0;
  return_label: 
#line 2324 
                return __retres;
}


#line 2327  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_ethtool.c"
static int ixgbe_get_ethtool_fdir_entry(struct ixgbe_adapter *adapter, struct ethtool_rxnfc *cmd)
{
  int __retres;
  struct hlist_node *node2;
  struct ixgbe_fdir_filter *tmp_1;
  struct ixgbe_fdir_filter *tmp_4;
  
#line 2330 
  union ixgbe_atr_input *mask = & adapter->fdir_mask;
  
#line 2331 
  struct ethtool_rx_flow_spec *fsp = & cmd->fs;
  
#line 2334 
  struct ixgbe_fdir_filter *rule = (struct ixgbe_fdir_filter *)0;
  
#line 2337 
  cmd->data = (unsigned long long)((1024 << adapter->fdir_pballoc) + -2);
  {
    struct ixgbe_fdir_filter *tmp_0;
    
#line 2339 
    struct hlist_node *____ptr = adapter->fdir_filter_list.first;
    
#line 2339 
    if (____ptr != (struct hlist_node *)0) {
      struct ixgbe_fdir_filter *tmp;
      {
        
#line 2339 
        struct hlist_node const *__mptr = (struct hlist_node const *)____ptr;
        
#line 2339 
        tmp = (struct ixgbe_fdir_filter *)__mptr;
      }
      
#line 2339 
      tmp_0 = tmp;
    }
    else 
#line 2339 
         tmp_0 = (struct ixgbe_fdir_filter *)0;
    
#line 2339 
    tmp_1 = tmp_0;
  }
  
#line 2339 
  rule = tmp_1;
  
#line 2339 
  goto ldv_56660;
  ldv_56659: 
#line 2340 
  ;
  
#line 2341 
  if (fsp->location <= (unsigned int)rule->sw_idx) 
#line 2342 
                                                   goto ldv_56658; else ;
  {
    struct ixgbe_fdir_filter *tmp_3;
    
#line 2339 
    struct hlist_node *____ptr_0 = node2;
    
#line 2339 
    if (____ptr_0 != (struct hlist_node *)0) {
      struct ixgbe_fdir_filter *tmp_2;
      {
        
#line 2339 
        struct hlist_node const *__mptr_0 = (struct hlist_node const *)____ptr_0;
        
#line 2339 
        tmp_2 = (struct ixgbe_fdir_filter *)__mptr_0;
      }
      
#line 2339 
      tmp_3 = tmp_2;
    }
    else 
#line 2339 
         tmp_3 = (struct ixgbe_fdir_filter *)0;
    
#line 2339 
    tmp_4 = tmp_3;
  }
  
#line 2339 
  rule = tmp_4;
  ldv_56660: 
#line 2341 
  ;
  
#line 2339 
  if (rule != (struct ixgbe_fdir_filter *)0) {
    
#line 2339 
    node2 = rule->fdir_node.next;
    
#line 2339 
    if (1 != 0) 
#line 2341 
                goto ldv_56659; else 
#line 2344 
                                     goto ldv_56658;
  }
  else 
#line 2344 
       goto ldv_56658;
  ldv_56658: 
#line 2345 
  ;
  
#line 2345 
  if (rule == (struct ixgbe_fdir_filter *)0 || fsp->location != (unsigned int)rule->sw_idx) {
    
#line 2346 
    __retres = -22;
    
#line 2346 
    goto return_label;
  }
  else ;
  
#line 2351 
  switch ((int)rule->filter.formatted.flow_type) {
    case 2: 
#line 2352 
    ;
    
#line 2353 
    fsp->flow_type = 1U;
    
#line 2354 
    goto ldv_56662;
    case 1: 
#line 2355 
    ;
    
#line 2356 
    fsp->flow_type = 2U;
    
#line 2357 
    goto ldv_56662;
    case 3: 
#line 2358 
    ;
    
#line 2359 
    fsp->flow_type = 3U;
    
#line 2360 
    goto ldv_56662;
    case 0: 
#line 2361 
    ;
    
#line 2362 
    fsp->flow_type = 13U;
    
#line 2363 
    fsp->h_u.usr_ip4_spec.ip_ver = (unsigned char)1U;
    
#line 2364 
    fsp->h_u.usr_ip4_spec.proto = (unsigned char)0U;
    
#line 2365 
    fsp->m_u.usr_ip4_spec.proto = (unsigned char)0U;
    
#line 2366 
    goto ldv_56662;
    default: 
#line 2367 
    ;
    
#line 2368 
    __retres = -22;
    
#line 2368 
    goto return_label;
  }
  ldv_56662: 
#line 2371 
  ;
  
#line 2371 
  fsp->h_u.tcp_ip4_spec.psrc = rule->filter.formatted.src_port;
  
#line 2372 
  fsp->m_u.tcp_ip4_spec.psrc = mask->formatted.src_port;
  
#line 2373 
  fsp->h_u.tcp_ip4_spec.pdst = rule->filter.formatted.dst_port;
  
#line 2374 
  fsp->m_u.tcp_ip4_spec.pdst = mask->formatted.dst_port;
  
#line 2375 
  fsp->h_u.tcp_ip4_spec.ip4src = rule->filter.formatted.src_ip[0];
  
#line 2376 
  fsp->m_u.tcp_ip4_spec.ip4src = mask->formatted.src_ip[0];
  
#line 2377 
  fsp->h_u.tcp_ip4_spec.ip4dst = rule->filter.formatted.dst_ip[0];
  
#line 2378 
  fsp->m_u.tcp_ip4_spec.ip4dst = mask->formatted.dst_ip[0];
  
#line 2379 
  fsp->h_ext.vlan_tci = rule->filter.formatted.vlan_id;
  
#line 2380 
  fsp->m_ext.vlan_tci = mask->formatted.vlan_id;
  
#line 2381 
  fsp->h_ext.vlan_etype = rule->filter.formatted.flex_bytes;
  
#line 2382 
  fsp->m_ext.vlan_etype = mask->formatted.flex_bytes;
  
#line 2383 
  if (0 != 0) 
#line 2383 
              fsp->h_ext.data[1] = ((unsigned int)rule->filter.formatted.vm_pool << 24) | (((unsigned int)rule->filter.formatted.vm_pool << 8) & 16711680U); else 
                                                                    
#line 2383 
                                                                    fsp->h_ext.data[1] = __fswab32((unsigned int)rule->filter.formatted.vm_pool);
  
#line 2384 
  if (0 != 0) 
#line 2384 
              fsp->m_ext.data[1] = ((unsigned int)mask->formatted.vm_pool << 24) | (((unsigned int)mask->formatted.vm_pool << 8) & 16711680U); else 
                                                                    
#line 2384 
                                                                    fsp->m_ext.data[1] = __fswab32((unsigned int)mask->formatted.vm_pool);
  
#line 2385 
  fsp->flow_type |= 2147483648U;
  
#line 2388 
  if ((unsigned int)rule->action == 127U) 
#line 2389 
                                          fsp->ring_cookie = 18446744073709551615ULL; else 
                                                                    
#line 2391 
                                                                    fsp->ring_cookie = (unsigned long long)rule->action;
  
#line 2393 
  __retres = 0;
  return_label: 
#line 2393 
                return __retres;
}


#line 2396  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_ethtool.c"
static int ixgbe_get_ethtool_fdir_all(struct ixgbe_adapter *adapter, struct ethtool_rxnfc *cmd, u32 *rule_locs)
{
  int __retres;
  struct hlist_node *node2;
  struct ixgbe_fdir_filter *rule;
  struct ixgbe_fdir_filter *tmp_1;
  struct ixgbe_fdir_filter *tmp_4;
  
#line 2402 
  int cnt = 0;
  
#line 2405 
  cmd->data = (unsigned long long)((1024 << adapter->fdir_pballoc) + -2);
  {
    struct ixgbe_fdir_filter *tmp_0;
    
#line 2407 
    struct hlist_node *____ptr = adapter->fdir_filter_list.first;
    
#line 2407 
    if (____ptr != (struct hlist_node *)0) {
      struct ixgbe_fdir_filter *tmp;
      {
        
#line 2407 
        struct hlist_node const *__mptr = (struct hlist_node const *)____ptr;
        
#line 2407 
        tmp = (struct ixgbe_fdir_filter *)__mptr;
      }
      
#line 2407 
      tmp_0 = tmp;
    }
    else 
#line 2407 
         tmp_0 = (struct ixgbe_fdir_filter *)0;
    
#line 2407 
    tmp_1 = tmp_0;
  }
  
#line 2407 
  rule = tmp_1;
  
#line 2407 
  goto ldv_56685;
  ldv_56684: 
#line 2408 
  ;
  
#line 2409 
  if (cmd->rule_cnt == (unsigned int)cnt) {
    
#line 2410 
    __retres = -90;
    
#line 2410 
    goto return_label;
  }
  else ;
  
#line 2411 
  *(rule_locs + cnt) = (unsigned int)rule->sw_idx;
  
#line 2412 
  cnt += 1;
  {
    struct ixgbe_fdir_filter *tmp_3;
    
#line 2407 
    struct hlist_node *____ptr_0 = node2;
    
#line 2407 
    if (____ptr_0 != (struct hlist_node *)0) {
      struct ixgbe_fdir_filter *tmp_2;
      {
        
#line 2407 
        struct hlist_node const *__mptr_0 = (struct hlist_node const *)____ptr_0;
        
#line 2407 
        tmp_2 = (struct ixgbe_fdir_filter *)__mptr_0;
      }
      
#line 2407 
      tmp_3 = tmp_2;
    }
    else 
#line 2407 
         tmp_3 = (struct ixgbe_fdir_filter *)0;
    
#line 2407 
    tmp_4 = tmp_3;
  }
  
#line 2407 
  rule = tmp_4;
  ldv_56685: 
#line 2409 
  ;
  
#line 2407 
  if (rule != (struct ixgbe_fdir_filter *)0) {
    
#line 2407 
    node2 = rule->fdir_node.next;
    
#line 2407 
    if (1 != 0) 
#line 2409 
                goto ldv_56684; else 
#line 2412 
                                     goto ldv_56686;
  }
  else 
#line 2412 
       goto ldv_56686;
  ldv_56686: 
#line 2413 
  ;
  
#line 2415 
  cmd->rule_cnt = (unsigned int)cnt;
  
#line 2417 
  __retres = 0;
  return_label: 
#line 2417 
                return __retres;
}


#line 2420  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_ethtool.c"
static int ixgbe_get_rss_hash_opts(struct ixgbe_adapter *adapter, struct ethtool_rxnfc *cmd)
{
  int __retres;
  
#line 2423 
  cmd->data = 0ULL;
  
#line 2426 
  switch (cmd->flow_type) {
    case (__u32)1: 
#line 2427 
    ;
    
#line 2428 
    cmd->data |= 192ULL;
    case (__u32)2: 
#line 2430 
    ;
    
#line 2431 
    if ((adapter->flags2 & 256U) != 0U) 
#line 2432 
                                        cmd->data |= 192ULL; else ;
    case (__u32)3: 
#line 2434 
    ;
    case (__u32)4: 
#line 2435 
    ;
    case (__u32)9: 
#line 2436 
    ;
    case (__u32)10: 
#line 2437 
    ;
    case (__u32)16: 
#line 2438 
    ;
    
#line 2439 
    cmd->data |= 48ULL;
    
#line 2440 
    goto ldv_56698;
    case (__u32)5: 
#line 2441 
    ;
    
#line 2442 
    cmd->data |= 192ULL;
    case (__u32)6: 
#line 2444 
    ;
    
#line 2445 
    if ((adapter->flags2 & 512U) != 0U) 
#line 2446 
                                        cmd->data |= 192ULL; else ;
    case (__u32)7: 
#line 2448 
    ;
    case (__u32)8: 
#line 2449 
    ;
    case (__u32)11: 
#line 2450 
    ;
    case (__u32)12: 
#line 2451 
    ;
    case (__u32)17: 
#line 2452 
    ;
    
#line 2453 
    cmd->data |= 48ULL;
    
#line 2454 
    goto ldv_56698;
    default: 
#line 2455 
    ;
    
#line 2456 
    __retres = -22;
    
#line 2456 
    goto return_label;
  }
  ldv_56698: 
#line 2459 
  ;
  
#line 2459 
  __retres = 0;
  return_label: 
#line 2459 
                return __retres;
}


#line 2462  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_ethtool.c"
static int ixgbe_get_rxnfc(struct net_device *dev, struct ethtool_rxnfc *cmd, u32 *rule_locs)
{
  
#line 2465 
  struct ixgbe_adapter *adapter = netdev_priv((struct net_device const *)dev);
  
#line 2466 
  int ret = -95;
  
#line 2468 
  switch (cmd->cmd) {
    case (__u32)45: 
#line 2469 
    ;
    
#line 2470 
    cmd->data = (unsigned long long)adapter->num_rx_queues;
    
#line 2471 
    ret = 0;
    
#line 2472 
    goto ldv_56715;
    case (__u32)46: 
#line 2473 
    ;
    
#line 2474 
    cmd->rule_cnt = (unsigned int)adapter->fdir_filter_count;
    
#line 2475 
    ret = 0;
    
#line 2476 
    goto ldv_56715;
    case (__u32)47: 
#line 2477 
    ;
    
#line 2478 
    ret = ixgbe_get_ethtool_fdir_entry(adapter,cmd);
    
#line 2479 
    goto ldv_56715;
    case (__u32)48: 
#line 2480 
    ;
    
#line 2481 
    ret = ixgbe_get_ethtool_fdir_all(adapter,cmd,rule_locs);
    
#line 2482 
    goto ldv_56715;
    case (__u32)41: 
#line 2483 
    ;
    
#line 2484 
    ret = ixgbe_get_rss_hash_opts(adapter,cmd);
    
#line 2485 
    goto ldv_56715;
    default: 
#line 2486 
    ;
    
#line 2487 
    goto ldv_56715;
  }
  ldv_56715: 
#line 2490 
  ;
  
#line 2490 
  return ret;
}


#line 2493  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_ethtool.c"
static int ixgbe_update_ethtool_fdir_entry(struct ixgbe_adapter *adapter, struct ixgbe_fdir_filter *input, u16 sw_idx)
{
  int __retres;
  struct hlist_node *node2;
  struct ixgbe_fdir_filter *rule;
  struct ixgbe_fdir_filter *parent;
  struct ixgbe_fdir_filter *tmp_1;
  struct ixgbe_fdir_filter *tmp_4;
  
#line 2497 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 2500 
  int err = -22;
  
#line 2502 
  parent = (struct ixgbe_fdir_filter *)0;
  
#line 2503 
  rule = (struct ixgbe_fdir_filter *)0;
  {
    struct ixgbe_fdir_filter *tmp_0;
    
#line 2505 
    struct hlist_node *____ptr = adapter->fdir_filter_list.first;
    
#line 2505 
    if (____ptr != (struct hlist_node *)0) {
      struct ixgbe_fdir_filter *tmp;
      {
        
#line 2505 
        struct hlist_node const *__mptr = (struct hlist_node const *)____ptr;
        
#line 2505 
        tmp = (struct ixgbe_fdir_filter *)__mptr;
      }
      
#line 2505 
      tmp_0 = tmp;
    }
    else 
#line 2505 
         tmp_0 = (struct ixgbe_fdir_filter *)0;
    
#line 2505 
    tmp_1 = tmp_0;
  }
  
#line 2505 
  rule = tmp_1;
  
#line 2505 
  goto ldv_56742;
  ldv_56741: 
#line 2506 
  ;
  
#line 2508 
  if ((int)rule->sw_idx >= (int)sw_idx) 
#line 2509 
                                        goto ldv_56740; else ;
  
#line 2510 
  parent = rule;
  {
    struct ixgbe_fdir_filter *tmp_3;
    
#line 2505 
    struct hlist_node *____ptr_0 = node2;
    
#line 2505 
    if (____ptr_0 != (struct hlist_node *)0) {
      struct ixgbe_fdir_filter *tmp_2;
      {
        
#line 2505 
        struct hlist_node const *__mptr_0 = (struct hlist_node const *)____ptr_0;
        
#line 2505 
        tmp_2 = (struct ixgbe_fdir_filter *)__mptr_0;
      }
      
#line 2505 
      tmp_3 = tmp_2;
    }
    else 
#line 2505 
         tmp_3 = (struct ixgbe_fdir_filter *)0;
    
#line 2505 
    tmp_4 = tmp_3;
  }
  
#line 2505 
  rule = tmp_4;
  ldv_56742: 
#line 2507 
  ;
  
#line 2505 
  if (rule != (struct ixgbe_fdir_filter *)0) {
    
#line 2505 
    node2 = rule->fdir_node.next;
    
#line 2505 
    if (1 != 0) 
#line 2507 
                goto ldv_56741; else 
#line 2510 
                                     goto ldv_56740;
  }
  else 
#line 2510 
       goto ldv_56740;
  ldv_56740: 
#line 2511 
  ;
  
#line 2514 
  if (rule != (struct ixgbe_fdir_filter *)0 && (int)rule->sw_idx == (int)sw_idx) {
    
#line 2515 
    if (input == (struct ixgbe_fdir_filter *)0 || (int)rule->filter.formatted.bkt_hash != (int)input->filter.formatted.bkt_hash) 
      
#line 2517 
      err = ixgbe_fdir_erase_perfect_filter_82599(hw,& rule->filter,(unsigned short)((int)sw_idx)); else ;
    
#line 2522 
    hlist_del(& rule->fdir_node);
    
#line 2523 
    kfree((void const *)rule);
    
#line 2524 
    adapter->fdir_filter_count -= 1;
  }
  else ;
  
#line 2531 
  if (input == (struct ixgbe_fdir_filter *)0) {
    
#line 2532 
    __retres = err;
    
#line 2532 
    goto return_label;
  }
  else ;
  
#line 2535 
  INIT_HLIST_NODE(& input->fdir_node);
  
#line 2538 
  if (parent != (struct ixgbe_fdir_filter *)0) 
#line 2539 
                                               hlist_add_behind(& input->fdir_node,& parent->fdir_node); else 
                                                                    
#line 2541 
                                                                    hlist_add_head(& input->fdir_node,& adapter->fdir_filter_list);
  
#line 2545 
  adapter->fdir_filter_count += 1;
  
#line 2547 
  __retres = 0;
  return_label: 
#line 2547 
                return __retres;
}


#line 2550  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_ethtool.c"
static int ixgbe_flowspec_to_flow_type(struct ethtool_rx_flow_spec *fsp, u8 *flow_type)
{
  int __retres;
  
#line 2553 
  switch (fsp->flow_type & 2147483647U) {
    case (unsigned int)1: 
#line 2554 
    ;
    
#line 2555 
    *flow_type = (unsigned char)2U;
    
#line 2556 
    goto ldv_56748;
    case (unsigned int)2: 
#line 2557 
    ;
    
#line 2558 
    *flow_type = (unsigned char)1U;
    
#line 2559 
    goto ldv_56748;
    case (unsigned int)3: 
#line 2560 
    ;
    
#line 2561 
    *flow_type = (unsigned char)3U;
    
#line 2562 
    goto ldv_56748;
    case (unsigned int)13: 
#line 2563 
    ;
    
#line 2564 
    switch ((int)fsp->h_u.usr_ip4_spec.proto) {
      case 6: 
#line 2565 
      ;
      
#line 2566 
      *flow_type = (unsigned char)2U;
      
#line 2567 
      goto ldv_56753;
      case 17: 
#line 2568 
      ;
      
#line 2569 
      *flow_type = (unsigned char)1U;
      
#line 2570 
      goto ldv_56753;
      case 132: 
#line 2571 
      ;
      
#line 2572 
      *flow_type = (unsigned char)3U;
      
#line 2573 
      goto ldv_56753;
      case 0: 
#line 2574 
      ;
      
#line 2575 
      if ((unsigned int)fsp->m_u.usr_ip4_spec.proto == 0U) {
        
#line 2576 
        *flow_type = (unsigned char)0U;
        
#line 2577 
        goto ldv_56753;
      }
      else ;
      default: 
#line 2579 
      ;
      
#line 2580 
      __retres = 0;
      
#line 2580 
      goto return_label;
    }
    ldv_56753: 
#line 2582 
    ;
    
#line 2582 
    goto ldv_56748;
    default: 
#line 2583 
    ;
    
#line 2584 
    __retres = 0;
    
#line 2584 
    goto return_label;
  }
  ldv_56748: 
#line 2587 
  ;
  
#line 2587 
  __retres = 1;
  return_label: 
#line 2587 
                return __retres;
}


#line 2590  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_ethtool.c"
static int ixgbe_add_ethtool_fdir_entry(struct ixgbe_adapter *adapter, struct ethtool_rxnfc *cmd)
{
  int __retres;
  struct ixgbe_fdir_filter *input;
  union ixgbe_atr_input mask;
  u8 queue;
  int err;
  int tmp_2;
  int tmp_6;
  
#line 2593 
  struct ethtool_rx_flow_spec *fsp = & cmd->fs;
  
#line 2595 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 2601 
  if ((adapter->flags & 524288U) == 0U) {
    
#line 2602 
    __retres = -95;
    
#line 2602 
    goto return_label;
  }
  else ;
  
#line 2607 
  if (fsp->ring_cookie == 18446744073709551615ULL) 
#line 2608 
                                                   queue = (unsigned char)127U;
  else {
    __u64 tmp;
    __u64 tmp_0;
    
#line 2610 
    tmp = ethtool_get_flow_spec_ring(fsp->ring_cookie);
    
#line 2610 
    u32 ring = (unsigned int)tmp;
    
#line 2611 
    tmp_0 = ethtool_get_flow_spec_ring_vf(fsp->ring_cookie);
    
#line 2611 
    u8 vf = (unsigned char)tmp_0;
    
#line 2613 
    if ((unsigned int)vf == 0U && (unsigned int)adapter->num_rx_queues <= ring) {
      
#line 2614 
      __retres = -22;
      
#line 2614 
      goto return_label;
    }
    else 
      
#line 2615 
      if ((unsigned int)vf != 0U && ((unsigned int)vf > adapter->num_vfs || (unsigned int)adapter->num_rx_queues_per_pool <= ring)) {
        
#line 2618 
        __retres = -22;
        
#line 2618 
        goto return_label;
      }
      else ;
    
#line 2621 
    if ((unsigned int)vf == 0U) 
#line 2622 
                                queue = (adapter->rx_ring[ring])->reg_idx; else 
                                                                    
#line 2624 
                                                                    queue = (unsigned char)(((unsigned int)vf + 255U) * (unsigned int)((unsigned char)adapter->num_rx_queues_per_pool) + (unsigned int)((unsigned char)ring));
  }
  
#line 2629 
  if (fsp->location >= (unsigned int)((1024 << adapter->fdir_pballoc) + -2)) {
    
#line 2630 
    if (((int)adapter->msg_enable & 1) != 0) 
#line 2630 
                                             netdev_err((struct net_device const *)adapter->netdev,"Location out of range\n"); else ;
    
#line 2631 
    __retres = -22;
    
#line 2631 
    goto return_label;
  }
  else ;
  
#line 2634 
  input = (struct ixgbe_fdir_filter *)kzalloc_1(64UL,32U);
  
#line 2635 
  if (input == (struct ixgbe_fdir_filter *)0) {
    
#line 2636 
    __retres = -12;
    
#line 2636 
    goto return_label;
  }
  else ;
  
#line 2638 
  memset((void *)(& mask),0,44UL);
  
#line 2641 
  input->sw_idx = (unsigned short)fsp->location;
  
#line 2644 
  tmp_2 = ixgbe_flowspec_to_flow_type(fsp,& input->filter.formatted.flow_type);
  
#line 2644 
  if (tmp_2 == 0) {
    
#line 2646 
    if (((int)adapter->msg_enable & 1) != 0) 
#line 2646 
                                             netdev_err((struct net_device const *)adapter->netdev,"Unrecognized flow type\n"); else ;
    
#line 2647 
    goto err_out;
  }
  else ;
  
#line 2650 
  mask.formatted.flow_type = (unsigned char)7U;
  
#line 2653 
  if ((unsigned int)input->filter.formatted.flow_type == 0U) 
#line 2654 
                                                             mask.formatted.flow_type = (unsigned char)((unsigned int)mask.formatted.flow_type & 4U); else ;
  
#line 2657 
  input->filter.formatted.src_ip[0] = fsp->h_u.tcp_ip4_spec.ip4src;
  
#line 2658 
  mask.formatted.src_ip[0] = fsp->m_u.tcp_ip4_spec.ip4src;
  
#line 2659 
  input->filter.formatted.dst_ip[0] = fsp->h_u.tcp_ip4_spec.ip4dst;
  
#line 2660 
  mask.formatted.dst_ip[0] = fsp->m_u.tcp_ip4_spec.ip4dst;
  
#line 2661 
  input->filter.formatted.src_port = fsp->h_u.tcp_ip4_spec.psrc;
  
#line 2662 
  mask.formatted.src_port = fsp->m_u.tcp_ip4_spec.psrc;
  
#line 2663 
  input->filter.formatted.dst_port = fsp->h_u.tcp_ip4_spec.pdst;
  
#line 2664 
  mask.formatted.dst_port = fsp->m_u.tcp_ip4_spec.pdst;
  
#line 2666 
  if (fsp->flow_type < (__u32)0) {
    
#line 2667 
    if (0 != 0) 
#line 2667 
                input->filter.formatted.vm_pool = (unsigned char)(fsp->h_ext.data[1] >> 24);
    else {
      __u32 tmp_3;
      
#line 2668 
      tmp_3 = __fswab32(fsp->h_ext.data[1]);
      
#line 2667 
      input->filter.formatted.vm_pool = (unsigned char)tmp_3;
    }
    
#line 2669 
    if (0 != 0) 
#line 2669 
                mask.formatted.vm_pool = (unsigned char)(fsp->m_ext.data[1] >> 24);
    else {
      __u32 tmp_4;
      
#line 2670 
      tmp_4 = __fswab32(fsp->m_ext.data[1]);
      
#line 2669 
      mask.formatted.vm_pool = (unsigned char)tmp_4;
    }
    
#line 2671 
    input->filter.formatted.vlan_id = fsp->h_ext.vlan_tci;
    
#line 2672 
    mask.formatted.vlan_id = fsp->m_ext.vlan_tci;
    
#line 2673 
    input->filter.formatted.flex_bytes = fsp->h_ext.vlan_etype;
    
#line 2675 
    mask.formatted.flex_bytes = fsp->m_ext.vlan_etype;
  }
  else ;
  
#line 2679 
  if (fsp->ring_cookie == 18446744073709551615ULL) 
#line 2680 
                                                   input->action = (unsigned short)127U; else 
                                                                    
#line 2682 
                                                                    input->action = (unsigned short)fsp->ring_cookie;
  
#line 2684 
  ldv_spin_lock_77(& adapter->fdir_perfect_lock);
  
#line 2686 
  tmp_6 = hlist_empty((struct hlist_head const *)(& adapter->fdir_filter_list));
  
#line 2686 
  if (tmp_6 != 0) {
    
#line 2688 
    memcpy((void *)(& adapter->fdir_mask),(void const *)(& mask),44UL);
    
#line 2689 
    err = ixgbe_fdir_set_input_mask_82599(hw,& mask);
    
#line 2690 
    if (err != 0) {
      
#line 2691 
      if (((int)adapter->msg_enable & 1) != 0) 
#line 2691 
                                               netdev_err((struct net_device const *)adapter->netdev,"Error writing mask\n"); else ;
      
#line 2692 
      goto err_out_w_lock;
    }
    else ;
  }
  else {
    int tmp_5;
    
#line 2694 
    tmp_5 = memcmp((void const *)(& adapter->fdir_mask),(void const *)(& mask),44UL);
    
#line 2694 
    if (tmp_5 != 0) {
      
#line 2695 
      if (((int)adapter->msg_enable & 1) != 0) 
#line 2695 
                                               netdev_err((struct net_device const *)adapter->netdev,"Only one mask supported per port\n"); else ;
      
#line 2696 
      goto err_out_w_lock;
    }
    else ;
  }
  
#line 2700 
  ixgbe_atr_compute_perfect_hash_82599(& input->filter,& mask);
  
#line 2703 
  err = ixgbe_fdir_write_perfect_filter_82599(hw,& input->filter,(unsigned short)((int)input->sw_idx),(unsigned char)((int)queue));
  
#line 2705 
  if (err != 0) 
#line 2706 
                goto err_out_w_lock; else ;
  
#line 2708 
  ixgbe_update_ethtool_fdir_entry(adapter,input,(unsigned short)((int)input->sw_idx));
  
#line 2710 
  ldv_spin_unlock_78(& adapter->fdir_perfect_lock);
  
#line 2712 
  __retres = err;
  
#line 2712 
  goto return_label;
  err_out_w_lock: 
#line 2713 
  ;
  
#line 2714 
  ldv_spin_unlock_79(& adapter->fdir_perfect_lock);
  err_out: 
#line 2715 
  ;
  
#line 2716 
  kfree((void const *)input);
  
#line 2717 
  __retres = -22;
  return_label: 
#line 2717 
                return __retres;
}


#line 2720  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_ethtool.c"
static int ixgbe_del_ethtool_fdir_entry(struct ixgbe_adapter *adapter, struct ethtool_rxnfc *cmd)
{
  int err;
  
#line 2723 
  struct ethtool_rx_flow_spec *fsp = & cmd->fs;
  
#line 2727 
  ldv_spin_lock_80(& adapter->fdir_perfect_lock);
  
#line 2728 
  err = ixgbe_update_ethtool_fdir_entry(adapter,(struct ixgbe_fdir_filter *)0,(unsigned short)((int)((unsigned short)fsp->location)));
  
#line 2729 
  ldv_spin_unlock_81(& adapter->fdir_perfect_lock);
  
#line 2731 
  return err;
}


#line 2736  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_ethtool.c"
static int ixgbe_set_rss_hash_opt(struct ixgbe_adapter *adapter, struct ethtool_rxnfc *nfc)
{
  int __retres;
  
#line 2739 
  u32 flags2 = adapter->flags2;
  
#line 2745 
  if ((nfc->data & 18446744073709551375ULL) != 0ULL) {
    
#line 2747 
    __retres = -22;
    
#line 2747 
    goto return_label;
  }
  else ;
  
#line 2749 
  switch (nfc->flow_type) {
    case (__u32)1: 
#line 2750 
    ;
    case (__u32)5: 
#line 2751 
    ;
    
#line 2752 
    if ((((nfc->data & 16ULL) == 0ULL || (nfc->data & 32ULL) == 0ULL) || (nfc->data & 64ULL) == 0ULL) || (nfc->data & 128ULL) == 0ULL) {
      
#line 2756 
      __retres = -22;
      
#line 2756 
      goto return_label;
    }
    else ;
    
#line 2757 
    goto ldv_56786;
    case (__u32)2: 
#line 2758 
    ;
    
#line 2759 
    if ((nfc->data & 16ULL) == 0ULL || (nfc->data & 32ULL) == 0ULL) {
      
#line 2761 
      __retres = -22;
      
#line 2761 
      goto return_label;
    }
    else ;
    
#line 2762 
    switch (nfc->data & 192ULL) {
      case (unsigned long long)0: 
#line 2763 
      ;
      
#line 2764 
      flags2 &= 4294967039U;
      
#line 2765 
      goto ldv_56789;
      case (unsigned long long)192: 
#line 2766 
      ;
      
#line 2767 
      flags2 |= 256U;
      
#line 2768 
      goto ldv_56789;
      default: 
#line 2769 
      ;
      
#line 2770 
      __retres = -22;
      
#line 2770 
      goto return_label;
    }
    ldv_56789: 
#line 2772 
    ;
    
#line 2772 
    goto ldv_56786;
    case (__u32)6: 
#line 2773 
    ;
    
#line 2774 
    if ((nfc->data & 16ULL) == 0ULL || (nfc->data & 32ULL) == 0ULL) {
      
#line 2776 
      __retres = -22;
      
#line 2776 
      goto return_label;
    }
    else ;
    
#line 2777 
    switch (nfc->data & 192ULL) {
      case (unsigned long long)0: 
#line 2778 
      ;
      
#line 2779 
      flags2 &= 4294966783U;
      
#line 2780 
      goto ldv_56794;
      case (unsigned long long)192: 
#line 2781 
      ;
      
#line 2782 
      flags2 |= 512U;
      
#line 2783 
      goto ldv_56794;
      default: 
#line 2784 
      ;
      
#line 2785 
      __retres = -22;
      
#line 2785 
      goto return_label;
    }
    ldv_56794: 
#line 2787 
    ;
    
#line 2787 
    goto ldv_56786;
    case (__u32)4: 
#line 2788 
    ;
    case (__u32)9: 
#line 2789 
    ;
    case (__u32)10: 
#line 2790 
    ;
    case (__u32)3: 
#line 2791 
    ;
    case (__u32)8: 
#line 2792 
    ;
    case (__u32)11: 
#line 2793 
    ;
    case (__u32)12: 
#line 2794 
    ;
    case (__u32)7: 
#line 2795 
    ;
    
#line 2796 
    if ((((nfc->data & 16ULL) == 0ULL || (nfc->data & 32ULL) == 0ULL) || (nfc->data & 64ULL) != 0ULL) || (nfc->data & 128ULL) != 0ULL) {
      
#line 2800 
      __retres = -22;
      
#line 2800 
      goto return_label;
    }
    else ;
    
#line 2801 
    goto ldv_56786;
    default: 
#line 2802 
    ;
    
#line 2803 
    __retres = -22;
    
#line 2803 
    goto return_label;
  }
  ldv_56786: 
#line 2807 
  ;
  
#line 2807 
  if (adapter->flags2 != flags2) {
    u32 mrqc;
    
#line 2808 
    struct ixgbe_hw *hw = & adapter->hw;
    
#line 2810 
    unsigned int pf_pool = adapter->num_vfs;
    
#line 2812 
    if (hw->mac.type > (unsigned int)ixgbe_mac_X540 && (adapter->flags & 8388608U) != 0U) 
      
#line 2814 
      mrqc = ixgbe_read_reg(hw,(pf_pool + 3328U) * 4U); else 
#line 2816 
                                                             mrqc = ixgbe_read_reg(hw,22552U);
    
#line 2818 
    if ((flags2 & 768U) != 0U && (adapter->flags2 & 768U) == 0U) {
      
#line 2820 
      if (((int)adapter->msg_enable & 1) != 0) 
#line 2820 
                                               netdev_warn((struct net_device const *)adapter->netdev,"enabling UDP RSS: fragmented packets may arrive out of order to the stack above\n"); else ;
    }
    else ;
    
#line 2822 
    adapter->flags2 = flags2;
    
#line 2825 
    mrqc |= 3342336U;
    
#line 2830 
    mrqc &= 4282384383U;
    
#line 2833 
    if ((flags2 & 256U) != 0U) 
#line 2834 
                               mrqc |= 4194304U; else ;
    
#line 2836 
    if ((flags2 & 512U) != 0U) 
#line 2837 
                               mrqc |= 8388608U; else ;
    
#line 2839 
    if (hw->mac.type > (unsigned int)ixgbe_mac_X540 && (adapter->flags & 8388608U) != 0U) 
      
#line 2841 
      ixgbe_write_reg(hw,(pf_pool + 3328U) * 4U,mrqc); else 
#line 2843 
                                                            ixgbe_write_reg(hw,22552U,mrqc);
  }
  else ;
  
#line 2846 
  __retres = 0;
  return_label: 
#line 2846 
                return __retres;
}


#line 2849  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_ethtool.c"
static int ixgbe_set_rxnfc(struct net_device *dev, struct ethtool_rxnfc *cmd)
{
  
#line 2851 
  struct ixgbe_adapter *adapter = netdev_priv((struct net_device const *)dev);
  
#line 2852 
  int ret = -95;
  
#line 2854 
  switch (cmd->cmd) {
    case (__u32)50: 
#line 2855 
    ;
    
#line 2856 
    ret = ixgbe_add_ethtool_fdir_entry(adapter,cmd);
    
#line 2857 
    goto ldv_56816;
    case (__u32)49: 
#line 2858 
    ;
    
#line 2859 
    ret = ixgbe_del_ethtool_fdir_entry(adapter,cmd);
    
#line 2860 
    goto ldv_56816;
    case (__u32)42: 
#line 2861 
    ;
    
#line 2862 
    ret = ixgbe_set_rss_hash_opt(adapter,cmd);
    
#line 2863 
    goto ldv_56816;
    default: 
#line 2864 
    ;
    
#line 2865 
    goto ldv_56816;
  }
  ldv_56816: 
#line 2868 
  ;
  
#line 2868 
  return ret;
}


#line 2871  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_ethtool.c"
static u32 ixgbe_get_rxfh_key_size(struct net_device *netdev)
{
  u32 __retres;
  
#line 2873 
  struct ixgbe_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 2875 
  __retres = 40U;
  
#line 2875 
  return __retres;
}


#line 2878  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_ethtool.c"
static u32 ixgbe_rss_indir_size(struct net_device *netdev)
{
  u32 tmp_0;
  
#line 2880 
  struct ixgbe_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 2882 
  tmp_0 = ixgbe_rss_indir_tbl_entries(adapter);
  
#line 2882 
  return tmp_0;
}


#line 2885  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_ethtool.c"
static void ixgbe_get_reta(struct ixgbe_adapter *adapter, u32 *indir)
{
  int i;
  u32 tmp;
  
#line 2887 
  tmp = ixgbe_rss_indir_tbl_entries(adapter);
  
#line 2887 
  int reta_size = (int)tmp;
  
#line 2889 
  i = 0;
  
#line 2889 
  goto ldv_56835;
  ldv_56834: 
#line 2890 
  ;
  
#line 2890 
  *(indir + i) = (unsigned int)adapter->rss_indir_tbl[i];
  
#line 2889 
  i += 1;
  ldv_56835: 
#line 2890 
  ;
  
#line 2889 
  if (i < reta_size) 
#line 2891 
                     goto ldv_56834; else 
#line 2894 
                                          goto ldv_56836;
  ldv_56836: 
#line 2895 
  ;
  
#line 2896 
  return;
}


#line 2893  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_ethtool.c"
static int ixgbe_get_rxfh(struct net_device *netdev, u32 *indir, u8 *key, u8 *hfunc)
{
  int __retres;
  
#line 2896 
  struct ixgbe_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 2898 
  if (hfunc != (u8 *)0U) 
#line 2899 
                         *hfunc = (unsigned char)1U; else ;
  
#line 2901 
  if (indir != (u32 *)0U) 
#line 2902 
                          ixgbe_get_reta(adapter,indir); else ;
  
#line 2904 
  if (key != (u8 *)0U) {
    u32 tmp_0;
    
#line 2905 
    tmp_0 = ixgbe_get_rxfh_key_size(netdev);
    
#line 2905 
    ;
    
#line 2905 
    ;
    
#line 2905 
    memcpy((void *)key,(void const *)(& adapter->rss_key),(unsigned long)tmp_0);
  }
  else ;
  
#line 2907 
  __retres = 0;
  
#line 2907 
  return __retres;
}


#line 2910  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_ethtool.c"
static int ixgbe_get_ts_info(struct net_device *dev, struct ethtool_ts_info *info)
{
  int __retres;
  
#line 2913 
  struct ixgbe_adapter *adapter = netdev_priv((struct net_device const *)dev);
  
#line 2915 
  switch ((unsigned int)adapter->hw.mac.type) {
    int tmp_0;
    case (unsigned int)4: 
#line 2916 
    ;
    case (unsigned int)5: 
#line 2917 
    ;
    case (unsigned int)3: 
#line 2918 
    ;
    case (unsigned int)2: 
#line 2919 
    ;
    
#line 2920 
    info->so_timestamping = 95U;
    
#line 2928 
    if (adapter->ptp_clock != (struct ptp_clock *)0) 
#line 2929 
                                                     info->phc_index = ptp_clock_index(adapter->ptp_clock); else 
                                                                    
#line 2931 
                                                                    info->phc_index = -1;
    
#line 2933 
    info->tx_types = 3U;
    
#line 2937 
    info->rx_filters = 32753U;
    
#line 2950 
    goto ldv_56853;
    default: 
#line 2951 
    ;
    
#line 2952 
    tmp_0 = ethtool_op_get_ts_info(dev,info);
    
#line 2952 
    __retres = tmp_0;
    
#line 2952 
    goto return_label;
  }
  ldv_56853: 
#line 2954 
  ;
  
#line 2954 
  __retres = 0;
  return_label: 
#line 2954 
                return __retres;
}


#line 2957  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_ethtool.c"
static unsigned int ixgbe_max_channels(struct ixgbe_adapter *adapter)
{
  unsigned int max_combined;
  int tmp;
  
#line 2960 
  tmp = netdev_get_num_tc(adapter->netdev);
  
#line 2960 
  u8 tcs = (unsigned char)tmp;
  
#line 2962 
  if ((adapter->flags & 8U) == 0U) 
#line 2964 
                                   max_combined = 1U;
  else 
    
#line 2965 
    if ((adapter->flags & 8388608U) != 0U) 
#line 2967 
                                           max_combined = 1U;
    else 
      
#line 2968 
      if ((unsigned int)tcs > 1U) 
        
#line 2970 
        if (adapter->hw.mac.type == (unsigned int)ixgbe_mac_82598EB) 
          
#line 2972 
          max_combined = 4U;
        else 
          
#line 2973 
          if ((unsigned int)tcs > 4U) 
#line 2975 
                                      max_combined = 8U; else 
#line 2978 
                                                              max_combined = 16U;
      else 
        
#line 2980 
        if (adapter->atr_sample_rate != 0U) 
#line 2982 
                                            max_combined = 63U;
        else {
          u8 tmp_0;
          
#line 2985 
          tmp_0 = ixgbe_max_rss_indices(adapter);
          
#line 2985 
          max_combined = (unsigned int)tmp_0;
        }
  
#line 2988 
  return max_combined;
}


#line 2991  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_ethtool.c"
static void ixgbe_get_channels(struct net_device *dev, struct ethtool_channels *ch)
{
  int tmp_0;
  
#line 2994 
  struct ixgbe_adapter *adapter = netdev_priv((struct net_device const *)dev);
  
#line 2997 
  ch->max_combined = ixgbe_max_channels(adapter);
  
#line 3000 
  if ((adapter->flags & 8U) != 0U) {
    
#line 3001 
    ch->max_other = 1U;
    
#line 3002 
    ch->other_count = 1U;
  }
  else ;
  
#line 3006 
  ch->combined_count = (unsigned int)adapter->ring_feature[2].indices;
  
#line 3009 
  if (ch->combined_count == 1U) 
#line 3010 
                                goto return_label; else ;
  
#line 3013 
  if ((adapter->flags & 8388608U) != 0U) 
#line 3014 
                                         goto return_label; else ;
  
#line 3017 
  tmp_0 = netdev_get_num_tc(dev);
  
#line 3017 
  if (tmp_0 > 1) 
#line 3018 
                 goto return_label; else ;
  
#line 3021 
  if (adapter->atr_sample_rate == 0U) 
#line 3022 
                                      goto return_label; else ;
  
#line 3025 
  ch->combined_count = (unsigned int)adapter->ring_feature[3].indices;
  return_label: 
#line 3026 
                return;
}


#line 3028  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_ethtool.c"
static int ixgbe_set_channels(struct net_device *dev, struct ethtool_channels *ch)
{
  int __retres;
  unsigned int tmp_1;
  int tmp_3;
  int tmp_2;
  
#line 3031 
  struct ixgbe_adapter *adapter = netdev_priv((struct net_device const *)dev);
  
#line 3032 
  unsigned int count = ch->combined_count;
  
#line 3033 
  u8 max_rss_indices = ixgbe_max_rss_indices(adapter);
  
#line 3036 
  if ((count == 0U || ch->rx_count != 0U) || ch->tx_count != 0U) {
    
#line 3037 
    __retres = -22;
    
#line 3037 
    goto return_label;
  }
  else ;
  
#line 3040 
  if (ch->other_count != 1U) {
    
#line 3041 
    __retres = -22;
    
#line 3041 
    goto return_label;
  }
  else ;
  
#line 3044 
  tmp_1 = ixgbe_max_channels(adapter);
  
#line 3044 
  ;
  
#line 3044 
  if (tmp_1 < count) {
    
#line 3045 
    __retres = -22;
    
#line 3045 
    goto return_label;
  }
  else ;
  
#line 3048 
  adapter->ring_feature[3].limit = (unsigned short)count;
  
#line 3051 
  if ((unsigned int)max_rss_indices < count) 
#line 3052 
                                             count = (unsigned int)max_rss_indices; else ;
  
#line 3053 
  adapter->ring_feature[2].limit = (unsigned short)count;
  
#line 3057 
  if (count > 8U) 
#line 3058 
                  count = 8U; else ;
  
#line 3059 
  adapter->ring_feature[4].limit = (unsigned short)count;
  
#line 3063 
  tmp_2 = netdev_get_num_tc(dev);
  
#line 3063 
  ;
  
#line 3063 
  tmp_3 = ixgbe_setup_tc(dev,(unsigned char)((int)((unsigned char)tmp_2)));
  
#line 3063 
  __retres = tmp_3;
  return_label: 
#line 3063 
                return __retres;
}


#line 3066  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_ethtool.c"
static int ixgbe_get_module_info(struct net_device *dev, struct ethtool_modinfo *modinfo)
{
  int __retres;
  s32 status;
  u8 sff8472_rev;
  u8 addr_mode;
  
#line 3069 
  struct ixgbe_adapter *adapter = netdev_priv((struct net_device const *)dev);
  
#line 3070 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 3073 
  bool page_swap = (_Bool)0;
  
#line 3076 
  status = (*(hw->phy.ops.read_i2c_eeprom))(hw,(unsigned char)94,& sff8472_rev);
  
#line 3079 
  if (status != 0) {
    
#line 3080 
    __retres = -5;
    
#line 3080 
    goto return_label;
  }
  else ;
  
#line 3083 
  status = (*(hw->phy.ops.read_i2c_eeprom))(hw,(unsigned char)92,& addr_mode);
  
#line 3086 
  if (status != 0) {
    
#line 3087 
    __retres = -5;
    
#line 3087 
    goto return_label;
  }
  else ;
  
#line 3089 
  if (((int)addr_mode & 4) != 0) {
    
#line 3090 
    if (((int)adapter->msg_enable & 1) != 0) 
#line 3090 
                                             netdev_err((struct net_device const *)adapter->netdev,"Address change required to access page 0xA2, but not supported. Please report the module type to the driver maintainers.\n"); else ;
    
#line 3091 
    page_swap = (_Bool)1;
  }
  else ;
  
#line 3094 
  if ((unsigned int)sff8472_rev == 0U || (int)page_swap != 0) {
    
#line 3096 
    modinfo->type = 1U;
    
#line 3097 
    modinfo->eeprom_len = 256U;
  }
  else {
    
#line 3100 
    modinfo->type = 2U;
    
#line 3101 
    modinfo->eeprom_len = 512U;
  }
  
#line 3104 
  __retres = 0;
  return_label: 
#line 3104 
                return __retres;
}


#line 3107  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_ethtool.c"
static int ixgbe_get_module_eeprom(struct net_device *dev, struct ethtool_eeprom *ee, u8 *data)
{
  int __retres;
  int tmp_0;
  
#line 3111 
  struct ixgbe_adapter *adapter = netdev_priv((struct net_device const *)dev);
  
#line 3112 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 3113 
  s32 status = -17;
  
#line 3114 
  u8 databyte = (unsigned char)255U;
  
#line 3115 
  int i = 0;
  
#line 3117 
  if (ee->len == 0U) {
    
#line 3118 
    __retres = -22;
    
#line 3118 
    goto return_label;
  }
  else ;
  
#line 3120 
  i = (int)ee->offset;
  
#line 3120 
  goto ldv_56893;
  ldv_56892: 
#line 3121 
  ;
  
#line 3122 
  tmp_0 = constant_test_bit(7L,(unsigned long const volatile *)(& adapter->state));
  
#line 3122 
  if (tmp_0 != 0) {
    
#line 3123 
    __retres = -16;
    
#line 3123 
    goto return_label;
  }
  else ;
  
#line 3125 
  if (i <= 255) 
#line 3126 
                status = (*(hw->phy.ops.read_i2c_eeprom))(hw,(unsigned char)((int)((unsigned char)i)),& databyte); else 
                                                                    
#line 3128 
                                                                    status = (*(hw->phy.ops.read_i2c_sff8472))(hw,(unsigned char)((int)((unsigned char)i)),& databyte);
  
#line 3130 
  if (status != 0) {
    
#line 3131 
    __retres = -5;
    
#line 3131 
    goto return_label;
  }
  else ;
  
#line 3133 
  *(data + ((unsigned int)i - ee->offset)) = databyte;
  
#line 3120 
  i += 1;
  ldv_56893: 
#line 3121 
  ;
  
#line 3120 
  if (ee->offset + ee->len > (unsigned int)i) 
#line 3122 
                                              goto ldv_56892; else 
#line 3125 
                                                                   goto ldv_56894;
  ldv_56894: 
#line 3126 
  ;
  
#line 3136 
  __retres = 0;
  return_label: 
#line 3136 
                return __retres;
}


#line 3139  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_ethtool.c"
static struct ethtool_ops const ixgbe_ethtool_ops = {.get_settings = & ixgbe_get_settings, .set_settings = & ixgbe_set_settings, .get_drvinfo = & ixgbe_get_drvinfo, .get_regs_len = & ixgbe_get_regs_len, .get_regs = & ixgbe_get_regs, .get_wol = & ixgbe_get_wol, .set_wol = & ixgbe_set_wol, .get_msglevel = & ixgbe_get_msglevel, .set_msglevel = & ixgbe_set_msglevel, .nway_reset = & ixgbe_nway_reset, .get_link = & ethtool_op_get_link, .get_eeprom_len = & ixgbe_get_eeprom_len, .get_eeprom = & ixgbe_get_eeprom, .set_eeprom = & ixgbe_set_eeprom, .get_coalesce = & ixgbe_get_coalesce, .set_coalesce = & ixgbe_set_coalesce, .get_ringparam = & ixgbe_get_ringparam, .set_ringparam = & ixgbe_set_ringparam, .get_pauseparam = & ixgbe_get_pauseparam, .set_pauseparam = & ixgbe_set_pauseparam, .self_test = & ixgbe_diag_test, .get_strings = & ixgbe_get_strings, .set_phys_id = & ixgbe_set_phys_id, .get_ethtool_stats = & ixgbe_get_ethtool_stats, .begin = (int (*)(struct net_device *))0, .complete = (void (*)(struct net_device *))0, .get_priv_flags = (u32 (*)(struct net_device *))0, .set_priv_flags = (int (*)(struct net_device *, u32 ))0, .get_sset_count = & ixgbe_get_sset_count, .get_rxnfc = & ixgbe_get_rxnfc, .set_rxnfc = & ixgbe_set_rxnfc, .flash_device = (int (*)(struct net_device *, struct ethtool_flash *))0, .reset = (int (*)(struct net_device *, u32 *))0, .get_rxfh_key_size = & ixgbe_get_rxfh_key_size, .get_rxfh_indir_size = & ixgbe_rss_indir_size, .get_rxfh = & ixgbe_get_rxfh, .set_rxfh = (int (*)(struct net_device *, u32 const *, u8 const *, u8 const ))0, .get_channels = & ixgbe_get_channels, .set_channels = & ixgbe_set_channels, .get_dump_flag = (int (*)(struct net_device *, struct ethtool_dump *))0, .get_dump_data = (int (*)(struct net_device *, struct ethtool_dump *, void *))0, .set_dump = (int (*)(struct net_device *, struct ethtool_dump *))0, .get_ts_info = & ixgbe_get_ts_info, .get_module_info = & ixgbe_get_module_info, .get_module_eeprom = & ixgbe_get_module_eeprom, .get_eee = (int (*)(struct net_device *, struct ethtool_eee *))0, .set_eee = (int (*)(struct net_device *, struct ethtool_eee *))0, .get_tunable = (int (*)(struct net_device *, struct ethtool_tunable const *, void *))0, .set_tunable = (int (*)(struct net_device *, struct ethtool_tunable const *, void const *))0};

#line 3177  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_ethtool.c"
void ixgbe_set_ethtool_ops(struct net_device *netdev)
{
  
#line 3179 
  netdev->ethtool_ops = & ixgbe_ethtool_ops;
  
#line 3180 
  return;
}


#line 56  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_ethtool.c.aux"
unsigned int (*ldv_emg_alias_ethtool_op_get_link_28)(struct net_device *) = & ethtool_op_get_link;

#line 73  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_ethtool.c.aux"
enum irqreturn ldv_emg_wrapper_ixgbe_test_intr_2(int arg0, void *arg1)
{
  enum irqreturn tmp;
  
#line 74 
  tmp = ixgbe_test_intr(arg0,arg1);
  
#line 74 
  return tmp;
}


#line 78  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_ethtool.c.aux"
void ldv_emg_wrapper_ixgbe_get_regs_47(struct net_device *arg0, struct ethtool_regs *arg1, void *arg2)
{
  
#line 79 
  ixgbe_get_regs(arg0,arg1,arg2);
  
#line 80 
  return;
}


#line 83  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_ethtool.c.aux"
int ldv_emg_wrapper_ixgbe_set_channels_35(struct net_device *arg0, struct ethtool_channels *arg1)
{
  int tmp;
  
#line 84 
  tmp = ixgbe_set_channels(arg0,arg1);
  
#line 84 
  return tmp;
}


#line 88  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_ethtool.c.aux"
int ldv_emg_wrapper_ixgbe_set_phys_id_3(struct net_device *arg0, enum ethtool_phys_id_state arg1)
{
  int tmp;
  
#line 89 
  tmp = ixgbe_set_phys_id(arg0,arg1);
  
#line 89 
  return tmp;
}


#line 93  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_ethtool.c.aux"
int ldv_emg_wrapper_ixgbe_get_eeprom_15(struct net_device *arg0, struct ethtool_eeprom *arg1, unsigned char *arg2)
{
  int tmp;
  
#line 94 
  tmp = ixgbe_get_eeprom(arg0,arg1,arg2);
  
#line 94 
  return tmp;
}


#line 98  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_ethtool.c.aux"
void ldv_emg_wrapper_ixgbe_get_wol_42(struct net_device *arg0, struct ethtool_wolinfo *arg1)
{
  
#line 99 
  ixgbe_get_wol(arg0,arg1);
  
#line 100 
  return;
}


#line 103  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_ethtool.c.aux"
int ldv_emg_wrapper_ixgbe_set_ringparam_17(struct net_device *arg0, struct ethtool_ringparam *arg1)
{
  int tmp;
  
#line 104 
  tmp = ixgbe_set_ringparam(arg0,arg1);
  
#line 104 
  return tmp;
}


#line 108  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_ethtool.c.aux"
unsigned int ldv_emg_wrapper_ixgbe_rss_indir_size_29(struct net_device *arg0)
{
  unsigned int tmp;
  
#line 109 
  tmp = ixgbe_rss_indir_size(arg0);
  
#line 109 
  return tmp;
}


#line 113  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_ethtool.c.aux"
int ldv_emg_wrapper_ixgbe_get_sset_count_49(struct net_device *arg0, int arg1)
{
  int tmp;
  
#line 114 
  tmp = ixgbe_get_sset_count(arg0,arg1);
  
#line 114 
  return tmp;
}


#line 118  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_ethtool.c.aux"
int ldv_emg_wrapper_ixgbe_get_settings_39(struct net_device *arg0, struct ethtool_cmd *arg1)
{
  int tmp;
  
#line 119 
  tmp = ixgbe_get_settings(arg0,arg1);
  
#line 119 
  return tmp;
}


#line 123  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_ethtool.c.aux"
int ldv_emg_wrapper_ixgbe_get_regs_len_53(struct net_device *arg0)
{
  int tmp;
  
#line 124 
  tmp = ixgbe_get_regs_len(arg0);
  
#line 124 
  return tmp;
}


#line 128  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_ethtool.c.aux"
void ldv_emg_wrapper_ixgbe_get_strings_41(struct net_device *arg0, unsigned int arg1, unsigned char *arg2)
{
  
#line 129 
  ixgbe_get_strings(arg0,arg1,arg2);
  
#line 130 
  return;
}


#line 133  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_ethtool.c.aux"
int ldv_emg_wrapper_ixgbe_set_wol_20(struct net_device *arg0, struct ethtool_wolinfo *arg1)
{
  int tmp;
  
#line 134 
  tmp = ixgbe_set_wol(arg0,arg1);
  
#line 134 
  return tmp;
}


#line 138  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_ethtool.c.aux"
void ldv_emg_wrapper_ixgbe_set_msglevel_30(struct net_device *arg0, unsigned int arg1)
{
  
#line 139 
  ixgbe_set_msglevel(arg0,arg1);
  
#line 140 
  return;
}


#line 143  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_ethtool.c.aux"
void ldv_emg_wrapper_ixgbe_get_drvinfo_9(struct net_device *arg0, struct ethtool_drvinfo *arg1)
{
  
#line 144 
  ixgbe_get_drvinfo(arg0,arg1);
  
#line 145 
  return;
}


#line 148  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_ethtool.c.aux"
int ldv_emg_wrapper_ixgbe_get_module_eeprom_25(struct net_device *arg0, struct ethtool_eeprom *arg1, unsigned char *arg2)
{
  int tmp;
  
#line 149 
  tmp = ixgbe_get_module_eeprom(arg0,arg1,arg2);
  
#line 149 
  return tmp;
}


#line 153  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_ethtool.c.aux"
int ldv_emg_wrapper_ixgbe_get_rxnfc_21(struct net_device *arg0, struct ethtool_rxnfc *arg1, unsigned int *arg2)
{
  int tmp;
  
#line 154 
  tmp = ixgbe_get_rxnfc(arg0,arg1,arg2);
  
#line 154 
  return tmp;
}


#line 158  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_ethtool.c.aux"
void ldv_emg_wrapper_ixgbe_get_channels_31(struct net_device *arg0, struct ethtool_channels *arg1)
{
  
#line 159 
  ixgbe_get_channels(arg0,arg1);
  
#line 160 
  return;
}


#line 163  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_ethtool.c.aux"
void ldv_emg_wrapper_ixgbe_diag_test_34(struct net_device *arg0, struct ethtool_test *arg1, unsigned long long *arg2)
{
  
#line 164 
  ixgbe_diag_test(arg0,arg1,arg2);
  
#line 165 
  return;
}


#line 168  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_ethtool.c.aux"
int ldv_emg_wrapper_ixgbe_set_coalesce_54(struct net_device *arg0, struct ethtool_coalesce *arg1)
{
  int tmp;
  
#line 169 
  tmp = ixgbe_set_coalesce(arg0,arg1);
  
#line 169 
  return tmp;
}


#line 173  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_ethtool.c.aux"
int ldv_emg_wrapper_ixgbe_set_eeprom_10(struct net_device *arg0, struct ethtool_eeprom *arg1, unsigned char *arg2)
{
  int tmp;
  
#line 174 
  tmp = ixgbe_set_eeprom(arg0,arg1,arg2);
  
#line 174 
  return tmp;
}


#line 178  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_ethtool.c.aux"
unsigned int ldv_emg_wrapper_ixgbe_get_msglevel_12(struct net_device *arg0)
{
  unsigned int tmp;
  
#line 179 
  tmp = ixgbe_get_msglevel(arg0);
  
#line 179 
  return tmp;
}


#line 183  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_ethtool.c.aux"
int ldv_emg_wrapper_ixgbe_set_rxnfc_8(struct net_device *arg0, struct ethtool_rxnfc *arg1)
{
  int tmp;
  
#line 184 
  tmp = ixgbe_set_rxnfc(arg0,arg1);
  
#line 184 
  return tmp;
}


#line 188  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_ethtool.c.aux"
int ldv_emg_wrapper_ixgbe_set_pauseparam_55(struct net_device *arg0, struct ethtool_pauseparam *arg1)
{
  int tmp;
  
#line 189 
  tmp = ixgbe_set_pauseparam(arg0,arg1);
  
#line 189 
  return tmp;
}


#line 193  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_ethtool.c.aux"
int ldv_emg_wrapper_ixgbe_get_module_info_40(struct net_device *arg0, struct ethtool_modinfo *arg1)
{
  int tmp;
  
#line 194 
  tmp = ixgbe_get_module_info(arg0,arg1);
  
#line 194 
  return tmp;
}


#line 198  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_ethtool.c.aux"
unsigned int ldv_emg_wrapper_ixgbe_get_rxfh_key_size_11(struct net_device *arg0)
{
  unsigned int tmp;
  
#line 199 
  tmp = ixgbe_get_rxfh_key_size(arg0);
  
#line 199 
  return tmp;
}


#line 203  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_ethtool.c.aux"
int ldv_emg_wrapper_ixgbe_get_rxfh_23(struct net_device *arg0, unsigned int *arg1, unsigned char *arg2, unsigned char *arg3)
{
  int tmp;
  
#line 204 
  tmp = ixgbe_get_rxfh(arg0,arg1,arg2,arg3);
  
#line 204 
  return tmp;
}


#line 208  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_ethtool.c.aux"
void ldv_emg_wrapper_ixgbe_get_ringparam_22(struct net_device *arg0, struct ethtool_ringparam *arg1)
{
  
#line 209 
  ixgbe_get_ringparam(arg0,arg1);
  
#line 210 
  return;
}


#line 213  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_ethtool.c.aux"
void ldv_emg_wrapper_ixgbe_get_ethtool_stats_5(struct net_device *arg0, struct ethtool_stats *arg1, unsigned long long *arg2)
{
  
#line 214 
  ixgbe_get_ethtool_stats(arg0,arg1,arg2);
  
#line 215 
  return;
}


#line 218  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_ethtool.c.aux"
int ldv_emg_wrapper_ixgbe_nway_reset_26(struct net_device *arg0)
{
  int tmp;
  
#line 219 
  tmp = ixgbe_nway_reset(arg0);
  
#line 219 
  return tmp;
}


#line 223  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_ethtool.c.aux"
void ldv_emg_wrapper_ixgbe_get_pauseparam_27(struct net_device *arg0, struct ethtool_pauseparam *arg1)
{
  
#line 224 
  ixgbe_get_pauseparam(arg0,arg1);
  
#line 225 
  return;
}


#line 228  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_ethtool.c.aux"
int ldv_emg_wrapper_ixgbe_set_settings_2(struct net_device *arg0, struct ethtool_cmd *arg1)
{
  int tmp;
  
#line 229 
  tmp = ixgbe_set_settings(arg0,arg1);
  
#line 229 
  return tmp;
}


#line 233  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_ethtool.c.aux"
int ldv_emg_wrapper_ixgbe_get_ts_info_52(struct net_device *arg0, struct ethtool_ts_info *arg1)
{
  int tmp;
  
#line 234 
  tmp = ixgbe_get_ts_info(arg0,arg1);
  
#line 234 
  return tmp;
}


#line 238  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_ethtool.c.aux"
int ldv_emg_wrapper_ixgbe_get_coalesce_44(struct net_device *arg0, struct ethtool_coalesce *arg1)
{
  int tmp;
  
#line 239 
  tmp = ixgbe_get_coalesce(arg0,arg1);
  
#line 239 
  return tmp;
}


#line 243  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_ethtool.c.aux"
int ldv_emg_wrapper_ixgbe_get_eeprom_len_36(struct net_device *arg0)
{
  int tmp;
  
#line 244 
  tmp = ixgbe_get_eeprom_len(arg0);
  
#line 244 
  return tmp;
}


#line 302  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_ethtool.c.aux"
static void atomic_inc_0(atomic_t *v)
{
  
#line 305 
  ldv_atomic_inc(v);
  
#line 306 
  return;
}


#line 617  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_ethtool.c.aux"
static void *kmalloc(size_t size, gfp_t flags)
{
  void *tmp;
  
#line 620 
  tmp = ldv_kmalloc(size,flags);
  
#line 620 
  return tmp;
}


#line 638  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_ethtool.c.aux"
static void *kzalloc_1(size_t size, gfp_t flags)
{
  void *tmp;
  
#line 641 
  tmp = ldv_kzalloc(size,flags);
  
#line 641 
  return tmp;
}


#line 929  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_ethtool.c.aux"
static int ldv_request_irq_73(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev)
{
  int tmp;
  
#line 933 
  tmp = ldv_emg_request_irq(irq,handler,flags,(char *)name,dev);
  
#line 933 
  return tmp;
}


#line 937  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_ethtool.c.aux"
static int ldv_request_irq_74_0(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev)
{
  int tmp;
  
#line 941 
  tmp = ldv_emg_request_irq(irq,handler,flags,(char *)name,dev);
  
#line 941 
  return tmp;
}


#line 945  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_ethtool.c.aux"
static int ldv_request_irq_75_0(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev)
{
  int tmp;
  
#line 949 
  tmp = ldv_emg_request_irq(irq,handler,flags,(char *)name,dev);
  
#line 949 
  return tmp;
}


#line 953  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_ethtool.c.aux"
static void ldv_free_irq_76_0(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  
#line 957 
  ldv_emg_free_irq(ldv_func_arg1,ldv_func_arg2);
  
#line 958 
  return;
}


#line 961  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_ethtool.c.aux"
static void ldv_spin_lock_77(spinlock_t *lock)
{
  
#line 965 
  ldv_spin_model_lock((char *)"fdir_perfect_lock_of_ixgbe_adapter");
  
#line 967 
  spin_lock_0(lock);
  
#line 968 
  return;
}


#line 971  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_ethtool.c.aux"
static void ldv_spin_unlock_78(spinlock_t *lock)
{
  
#line 975 
  ldv_spin_model_unlock((char *)"fdir_perfect_lock_of_ixgbe_adapter");
  
#line 977 
  spin_unlock_0(lock);
  
#line 978 
  return;
}


#line 981  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_ethtool.c.aux"
static void ldv_spin_unlock_79(spinlock_t *lock)
{
  
#line 985 
  ldv_spin_model_unlock((char *)"fdir_perfect_lock_of_ixgbe_adapter");
  
#line 987 
  spin_unlock_0(lock);
  
#line 988 
  return;
}


#line 991  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_ethtool.c.aux"
static void ldv_spin_lock_80(spinlock_t *lock)
{
  
#line 995 
  ldv_spin_model_lock((char *)"fdir_perfect_lock_of_ixgbe_adapter");
  
#line 997 
  spin_lock_0(lock);
  
#line 998 
  return;
}


#line 1001  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_ethtool.c.aux"
static void ldv_spin_unlock_81(spinlock_t *lock)
{
  
#line 1005 
  ldv_spin_model_unlock((char *)"fdir_perfect_lock_of_ixgbe_adapter");
  
#line 1007 
  spin_unlock_0(lock);
  
#line 1008 
  return;
}


#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/err.h"
static long PTR_ERR_0(void const *ptr);


#line 41 
static bool IS_ERR_0(void const *ptr);


#line 639  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
void *devm_kmalloc(struct device *, size_t, gfp_t);


#line 645  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
__inline static void *devm_kzalloc(struct device *dev, size_t size, gfp_t gfp)
{
  void *tmp;
  
#line 647 
  tmp = devm_kmalloc(dev,size,gfp | 32768U);
  
#line 647 
  return tmp;
}


#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/hwmon.h"
struct device *devm_hwmon_device_register_with_groups(struct device *, char const *, void *, struct attribute_group const **);


#line 42  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_sysfs.c"
static ssize_t ixgbe_hwmon_show_location(struct device *dev, struct device_attribute *attr, char *buf)
{
  ssize_t __retres;
  struct hwmon_attr *tmp;
  int tmp_0;
  {
    
#line 46 
    struct device_attribute const *__mptr = (struct device_attribute const *)attr;
    
#line 46 
    tmp = (struct hwmon_attr *)__mptr;
  }
  
#line 46 
  struct hwmon_attr *ixgbe_attr = tmp;
  
#line 48 
  tmp_0 = sprintf(buf,"loc%u\n",(int)(ixgbe_attr->sensor)->location);
  
#line 48 
  __retres = (long)tmp_0;
  
#line 48 
  return __retres;
}


#line 52  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_sysfs.c"
static ssize_t ixgbe_hwmon_show_temp(struct device *dev, struct device_attribute *attr, char *buf)
{
  ssize_t __retres;
  struct hwmon_attr *tmp;
  unsigned int value;
  int tmp_0;
  {
    
#line 56 
    struct device_attribute const *__mptr = (struct device_attribute const *)attr;
    
#line 56 
    tmp = (struct hwmon_attr *)__mptr;
  }
  
#line 56 
  struct hwmon_attr *ixgbe_attr = tmp;
  
#line 61 
  (*((ixgbe_attr->hw)->mac.ops.get_thermal_sensor_data))(ixgbe_attr->hw);
  
#line 63 
  value = (unsigned int)(ixgbe_attr->sensor)->temp;
  
#line 66 
  value *= 1000U;
  
#line 68 
  tmp_0 = sprintf(buf,"%u\n",value);
  
#line 68 
  __retres = (long)tmp_0;
  
#line 68 
  return __retres;
}


#line 71  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_sysfs.c"
static ssize_t ixgbe_hwmon_show_cautionthresh(struct device *dev, struct device_attribute *attr, char *buf)
{
  ssize_t __retres;
  struct hwmon_attr *tmp;
  int tmp_0;
  {
    
#line 75 
    struct device_attribute const *__mptr = (struct device_attribute const *)attr;
    
#line 75 
    tmp = (struct hwmon_attr *)__mptr;
  }
  
#line 75 
  struct hwmon_attr *ixgbe_attr = tmp;
  
#line 77 
  unsigned int value = (unsigned int)(ixgbe_attr->sensor)->caution_thresh;
  
#line 80 
  value *= 1000U;
  
#line 82 
  tmp_0 = sprintf(buf,"%u\n",value);
  
#line 82 
  __retres = (long)tmp_0;
  
#line 82 
  return __retres;
}


#line 85  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_sysfs.c"
static ssize_t ixgbe_hwmon_show_maxopthresh(struct device *dev, struct device_attribute *attr, char *buf)
{
  ssize_t __retres;
  struct hwmon_attr *tmp;
  int tmp_0;
  {
    
#line 89 
    struct device_attribute const *__mptr = (struct device_attribute const *)attr;
    
#line 89 
    tmp = (struct hwmon_attr *)__mptr;
  }
  
#line 89 
  struct hwmon_attr *ixgbe_attr = tmp;
  
#line 91 
  unsigned int value = (unsigned int)(ixgbe_attr->sensor)->max_op_thresh;
  
#line 94 
  value *= 1000U;
  
#line 96 
  tmp_0 = sprintf(buf,"%u\n",value);
  
#line 96 
  __retres = (long)tmp_0;
  
#line 96 
  return __retres;
}


#line 109  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_sysfs.c"
static int ixgbe_add_hwmon_attr(struct ixgbe_adapter *adapter, unsigned int offset, int type)
{
  int __retres;
  int rc;
  unsigned int n_attr;
  struct hwmon_attr *ixgbe_attr;
  
#line 115 
  n_attr = (adapter->ixgbe_hwmon_buff)->n_hwmon;
  
#line 116 
  ixgbe_attr = & (adapter->ixgbe_hwmon_buff)->hwmon_list[n_attr];
  
#line 118 
  switch (type) {
    case 0: 
#line 119 
    ;
    
#line 120 
    ixgbe_attr->dev_attr.show = & ixgbe_hwmon_show_location;
    
#line 121 
    snprintf((char *)(& ixgbe_attr->name),12UL,"temp%u_label",offset + 1U);
    
#line 123 
    goto ldv_55529;
    case 1: 
#line 124 
    ;
    
#line 125 
    ixgbe_attr->dev_attr.show = & ixgbe_hwmon_show_temp;
    
#line 126 
    snprintf((char *)(& ixgbe_attr->name),12UL,"temp%u_input",offset + 1U);
    
#line 128 
    goto ldv_55529;
    case 2: 
#line 129 
    ;
    
#line 130 
    ixgbe_attr->dev_attr.show = & ixgbe_hwmon_show_cautionthresh;
    
#line 131 
    snprintf((char *)(& ixgbe_attr->name),12UL,"temp%u_max",offset + 1U);
    
#line 133 
    goto ldv_55529;
    case 3: 
#line 134 
    ;
    
#line 135 
    ixgbe_attr->dev_attr.show = & ixgbe_hwmon_show_maxopthresh;
    
#line 136 
    snprintf((char *)(& ixgbe_attr->name),12UL,"temp%u_crit",offset + 1U);
    
#line 138 
    goto ldv_55529;
    default: 
#line 139 
    ;
    
#line 140 
    rc = -1;
    
#line 141 
    __retres = rc;
    
#line 141 
    goto return_label;
  }
  ldv_55529: 
#line 145 
  ;
  
#line 145 
  ixgbe_attr->sensor = & adapter->hw.mac.thermal_sensor_data.sensor[offset];
  
#line 147 
  ixgbe_attr->hw = & adapter->hw;
  
#line 148 
  ixgbe_attr->dev_attr.store = (ssize_t (*)(struct device *, struct device_attribute *, char const *, size_t ))0;
  
#line 149 
  ixgbe_attr->dev_attr.attr.mode = (unsigned short)292U;
  
#line 150 
  ixgbe_attr->dev_attr.attr.name = (char const *)(& ixgbe_attr->name);
  {
    struct lock_class_key __key;
    
#line 151 
    ixgbe_attr->dev_attr.attr.key = & __key;
  }
  
#line 153 
  (adapter->ixgbe_hwmon_buff)->attrs[n_attr] = & ixgbe_attr->dev_attr.attr;
  
#line 155 
  (adapter->ixgbe_hwmon_buff)->n_hwmon += 1U;
  
#line 157 
  __retres = 0;
  return_label: 
#line 157 
                return __retres;
}


#line 160  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_sysfs.c"
static void ixgbe_sysfs_del_adapter(struct ixgbe_adapter *adapter)
{
  
#line 162 
  return;
}


#line 165  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_sysfs.c"
void ixgbe_sysfs_exit(struct ixgbe_adapter *adapter)
{
  
#line 167 
  ixgbe_sysfs_del_adapter(adapter);
  
#line 168 
  return;
}


#line 171  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_sysfs.c"
int ixgbe_sysfs_init(struct ixgbe_adapter *adapter)
{
  struct hwmon_buff *ixgbe_hwmon;
  struct device *hwmon_dev;
  unsigned int i;
  s32 tmp;
  bool tmp_2;
  
#line 176 
  int rc = 0;
  
#line 179 
  if (adapter->hw.mac.ops.init_thermal_sensor_thresh == (s32 (*)(struct ixgbe_hw *))0) 
    
#line 180 
    goto exit; else ;
  
#line 184 
  tmp = (*(adapter->hw.mac.ops.init_thermal_sensor_thresh))(& adapter->hw);
  
#line 184 
  if (tmp != 0) 
#line 185 
                goto exit; else ;
  
#line 187 
  ixgbe_hwmon = (struct hwmon_buff *)devm_kzalloc(& (adapter->pdev)->dev,1120UL,208U);
  
#line 189 
  if (ixgbe_hwmon == (struct hwmon_buff *)0) {
    
#line 190 
    rc = -12;
    
#line 191 
    goto exit;
  }
  else ;
  
#line 193 
  adapter->ixgbe_hwmon_buff = ixgbe_hwmon;
  
#line 195 
  i = 0U;
  
#line 195 
  goto ldv_55551;
  ldv_55550: 
#line 196 
  ;
  
#line 200 
  if ((unsigned int)adapter->hw.mac.thermal_sensor_data.sensor[i].location == 0U) 
    
#line 201 
    goto ldv_55549; else ;
  
#line 204 
  rc = ixgbe_add_hwmon_attr(adapter,i,2);
  
#line 205 
  if (rc != 0) 
#line 206 
               goto exit; else ;
  
#line 207 
  rc = ixgbe_add_hwmon_attr(adapter,i,0);
  
#line 208 
  if (rc != 0) 
#line 209 
               goto exit; else ;
  
#line 210 
  rc = ixgbe_add_hwmon_attr(adapter,i,1);
  
#line 211 
  if (rc != 0) 
#line 212 
               goto exit; else ;
  
#line 213 
  rc = ixgbe_add_hwmon_attr(adapter,i,3);
  
#line 214 
  if (rc != 0) 
#line 215 
               goto exit; else ;
  ldv_55549: 
#line 216 
  ;
  
#line 195 
  i += 1U;
  ldv_55551: 
#line 196 
  ;
  
#line 195 
  if (i <= 2U) 
#line 197 
               goto ldv_55550; else 
#line 200 
                                    goto ldv_55552;
  ldv_55552: 
#line 201 
  ;
  
#line 218 
  ixgbe_hwmon->groups[0] = (struct attribute_group const *)(& ixgbe_hwmon->group);
  
#line 219 
  ixgbe_hwmon->group.attrs = (struct attribute **)(& ixgbe_hwmon->attrs);
  
#line 221 
  hwmon_dev = devm_hwmon_device_register_with_groups(& (adapter->pdev)->dev,"ixgbe",(void *)ixgbe_hwmon,(struct attribute_group const **)(& ixgbe_hwmon->groups));
  
#line 225 
  tmp_2 = IS_ERR_0((void const *)hwmon_dev);
  
#line 225 
  if ((int)tmp_2 != 0) {
    long tmp_1;
    
#line 226 
    tmp_1 = PTR_ERR_0((void const *)hwmon_dev);
    
#line 226 
    rc = (int)tmp_1;
  }
  else ;
  exit: 
#line 227 
  ;
  
#line 228 
  return rc;
}


#line 76  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_sysfs.c.aux"
static long PTR_ERR_0(void const *ptr)
{
  long tmp;
  
#line 79 
  tmp = ldv_ptr_err(ptr);
  
#line 79 
  return tmp;
}


#line 83  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_sysfs.c.aux"
static bool IS_ERR_0(void const *ptr)
{
  bool __retres;
  long ret;
  
#line 87 
  ret = ldv_is_err(ptr);
  
#line 88 
  __retres = (_Bool)(ret != 0L);
  
#line 88 
  return __retres;
}


#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.h"
s32 ixgbe_start_hw_gen2(struct ixgbe_hw *hw);


#line 60 
s32 ixgbe_write_eewr_generic(struct ixgbe_hw *hw, u16 offset, u16 data);


#line 61 
s32 ixgbe_write_eewr_buffer_generic(struct ixgbe_hw *hw, u16 offset, u16 words, u16 *data);


#line 65 
s32 ixgbe_read_eeprom_buffer_bit_bang_generic(struct ixgbe_hw *hw, u16 offset, u16 words, u16 *data);


#line 133 
s32 ixgbe_get_thermal_sensor_data_generic(struct ixgbe_hw *hw);


#line 134 
s32 ixgbe_init_thermal_sensor_thresh_generic(struct ixgbe_hw *hw);


#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c"
static s32 ixgbe_acquire_eeprom(struct ixgbe_hw *hw);


#line 39 
static s32 ixgbe_get_eeprom_semaphore(struct ixgbe_hw *hw);


#line 40 
static void ixgbe_release_eeprom_semaphore(struct ixgbe_hw *hw);


#line 41 
static s32 ixgbe_ready_eeprom(struct ixgbe_hw *hw);


#line 42 
static void ixgbe_standby_eeprom(struct ixgbe_hw *hw);


#line 43 
static void ixgbe_shift_out_eeprom_bits(struct ixgbe_hw *hw, u16 data, u16 count);


#line 45 
static u16 ixgbe_shift_in_eeprom_bits(struct ixgbe_hw *hw, u16 count);


#line 46 
static void ixgbe_raise_eeprom_clk(struct ixgbe_hw *hw, u32 *eec);


#line 47 
static void ixgbe_lower_eeprom_clk(struct ixgbe_hw *hw, u32 *eec);


#line 48 
static void ixgbe_release_eeprom(struct ixgbe_hw *hw);


#line 50 
static s32 ixgbe_mta_vector(struct ixgbe_hw *hw, u8 *mc_addr);


#line 51 
static s32 ixgbe_poll_eerd_eewr_done(struct ixgbe_hw *hw, u32 ee_reg);


#line 52 
static s32 ixgbe_read_eeprom_buffer_bit_bang(struct ixgbe_hw *hw, u16 offset, u16 words, u16 *data);


#line 54 
static s32 ixgbe_write_eeprom_buffer_bit_bang(struct ixgbe_hw *hw, u16 offset, u16 words, u16 *data);


#line 56 
static s32 ixgbe_detect_eeprom_page_size_generic(struct ixgbe_hw *hw, u16 offset);


#line 58 
static s32 ixgbe_disable_pcie_master(struct ixgbe_hw *hw);


#line 61  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c"
u32 const ixgbe_mvals_8259X[24U] = {65552U, 65564U, 66048U, 66064U, 65872U, 65856U, 65888U, 65864U, 1U, 2U, 4U, 16777216U, 33554432U, 67108864U, 69768U, 69772U, 1U, 2U, 4U, 8U, 0U, 0U, 0U, 40U};

#line 74  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c"
bool ixgbe_device_supports_autoneg_fc(struct ixgbe_hw *hw)
{
  ixgbe_link_speed speed;
  bool link_up;
  
#line 76 
  bool supported = (_Bool)0;
  
#line 80 
  switch ((unsigned int)hw->phy.media_type) {
    case (unsigned int)1: 
#line 81 
    ;
    
#line 82 
    (*(hw->mac.ops.check_link))(hw,& speed,& link_up,(_Bool)0);
    
#line 84 
    if ((int)link_up != 0) 
#line 85 
                           supported = (_Bool)(speed == 32U); else 
#line 88 
                                                                   supported = (_Bool)1;
    
#line 89 
    goto ldv_54719;
    case (unsigned int)5: 
#line 90 
    ;
    
#line 91 
    supported = (_Bool)1;
    
#line 92 
    goto ldv_54719;
    case (unsigned int)4: 
#line 93 
    ;
    
#line 95 
    switch ((int)hw->device_id) {
      case 5404: 
#line 96 
      ;
      case 5416: 
#line 97 
      ;
      case 5472: 
#line 98 
      ;
      case 5475: 
#line 99 
      ;
      case 5549: 
#line 100 
      ;
      
#line 101 
      supported = (_Bool)1;
      
#line 102 
      goto ldv_54727;
      default: 
#line 103 
      ;
      
#line 104 
      goto ldv_54727;
    }
    ldv_54727: 
#line 106 
    ;
    default: 
#line 106 
    ;
    
#line 107 
    goto ldv_54719;
  }
  ldv_54719: 
#line 110 
  ;
  
#line 110 
  return supported;
}


#line 119  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c"
static s32 ixgbe_setup_fc(struct ixgbe_hw *hw)
{
  s32 __retres;
  
#line 121 
  s32 ret_val = 0;
  
#line 122 
  u32 reg = 0U;
  
#line 122 
  u32 reg_bp = 0U;
  
#line 123 
  u16 reg_cu = (unsigned short)0U;
  
#line 124 
  bool locked = (_Bool)0;
  
#line 130 
  if ((int)hw->fc.strict_ieee != 0 && hw->fc.requested_mode == (unsigned int)ixgbe_fc_rx_pause) {
    {
      
#line 131 
      struct _ddebug descriptor = {.modname = "ixgbe", .function = "ixgbe_setup_fc", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c", .format = "ixgbe_fc_rx_pause not valid in strict IEEE mode\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))131U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 131 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 131 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"ixgbe_fc_rx_pause not valid in strict IEEE mode\n"); else ;
    }
    
#line 132 
    __retres = -13;
    
#line 132 
    goto return_label;
  }
  else ;
  
#line 139 
  if (hw->fc.requested_mode == (unsigned int)ixgbe_fc_default) 
#line 140 
                                                               hw->fc.requested_mode = ixgbe_fc_full; else ;
  
#line 147 
  switch ((unsigned int)hw->phy.media_type) {
    case (unsigned int)5: 
#line 148 
    ;
    
#line 150 
    ret_val = (*(hw->mac.ops.prot_autoc_read))(hw,& locked,& reg_bp);
    
#line 151 
    if (ret_val != 0) {
      
#line 152 
      __retres = ret_val;
      
#line 152 
      goto return_label;
    }
    else ;
    case (unsigned int)1: 
#line 155 
    ;
    
#line 156 
    reg = ixgbe_read_reg(hw,16920U);
    
#line 158 
    goto ldv_54742;
    case (unsigned int)4: 
#line 159 
    ;
    
#line 160 
    (*(hw->phy.ops.read_reg))(hw,16U,7U,& reg_cu);
    
#line 162 
    goto ldv_54742;
    default: 
#line 163 
    ;
    
#line 164 
    goto ldv_54742;
  }
  ldv_54742: 
#line 177 
  ;
  
#line 177 
  switch ((unsigned int)hw->fc.requested_mode) {
    case (unsigned int)0: 
#line 178 
    ;
    
#line 180 
    reg &= 4294966911U;
    
#line 181 
    if (hw->phy.media_type == (unsigned int)ixgbe_media_type_backplane) 
      
#line 182 
      reg_bp &= 3489660927U;
    else 
      
#line 184 
      if (hw->phy.media_type == (unsigned int)ixgbe_media_type_copper) 
        
#line 185 
        reg_cu = (unsigned short)((unsigned int)reg_cu & 62463U); else ;
    
#line 186 
    goto ldv_54746;
    case (unsigned int)2: 
#line 187 
    ;
    
#line 192 
    reg |= 256U;
    
#line 193 
    reg &= 4294967167U;
    
#line 194 
    if (hw->phy.media_type == (unsigned int)ixgbe_media_type_backplane) {
      
#line 195 
      reg_bp |= 536870912U;
      
#line 196 
      reg_bp &= 4026531839U;
    }
    else 
      
#line 197 
      if (hw->phy.media_type == (unsigned int)ixgbe_media_type_copper) {
        
#line 198 
        reg_cu = (unsigned short)((unsigned int)reg_cu | 2048U);
        
#line 199 
        reg_cu = (unsigned short)((unsigned int)reg_cu & 64511U);
      }
      else ;
    
#line 201 
    goto ldv_54746;
    case (unsigned int)1: 
#line 202 
    ;
    case (unsigned int)3: 
#line 212 
    ;
    
#line 214 
    reg |= 384U;
    
#line 215 
    if (hw->phy.media_type == (unsigned int)ixgbe_media_type_backplane) 
      
#line 216 
      reg_bp |= 805306368U;
    else 
      
#line 218 
      if (hw->phy.media_type == (unsigned int)ixgbe_media_type_copper) 
        
#line 219 
        reg_cu = (unsigned short)((unsigned int)reg_cu | 3072U); else ;
    
#line 220 
    goto ldv_54746;
    default: 
#line 221 
    ;
    {
      
#line 222 
      struct _ddebug descriptor_0 = {.modname = "ixgbe", .function = "ixgbe_setup_fc", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c", .format = "Flow control param set incorrectly\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))222U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 222 
      if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 222 
                                                            __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"Flow control param set incorrectly\n"); else ;
    }
    
#line 223 
    __retres = -4;
    
#line 223 
    goto return_label;
  }
  ldv_54746: 
#line 226 
  ;
  
#line 226 
  if (hw->mac.type != (unsigned int)ixgbe_mac_X540) {
    
#line 231 
    ixgbe_write_reg(hw,16920U,reg);
    
#line 232 
    reg = ixgbe_read_reg(hw,16904U);
    
#line 235 
    if ((int)hw->fc.strict_ieee != 0) 
#line 236 
                                      reg &= 4294705151U; else ;
    
#line 238 
    ixgbe_write_reg(hw,16904U,reg);
    {
      
#line 239 
      struct _ddebug descriptor_1 = {.modname = "ixgbe", .function = "ixgbe_setup_fc", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c", .format = "Set up FC; PCS1GLCTL = 0x%08X\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))239U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 239 
      if ((long)(((int)descriptor_1.flags & 1) != 0) != 0L) 
#line 239 
                                                            __dynamic_netdev_dbg(& descriptor_1,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"Set up FC; PCS1GLCTL = 0x%08X\n",reg); else ;
    }
  }
  else ;
  
#line 247 
  if (hw->phy.media_type == (unsigned int)ixgbe_media_type_backplane) {
    
#line 252 
    ret_val = (*(hw->mac.ops.prot_autoc_write))(hw,reg_bp,(_Bool)((bool)((int)locked) != 0));
    
#line 253 
    if (ret_val != 0) {
      
#line 254 
      __retres = ret_val;
      
#line 254 
      goto return_label;
    }
    else ;
  }
  else 
    
#line 256 
    if (hw->phy.media_type == (unsigned int)ixgbe_media_type_copper) {
      bool tmp;
      
#line 256 
      tmp = ixgbe_device_supports_autoneg_fc(hw);
      
#line 256 
      if ((int)tmp != 0) 
#line 258 
                         (*(hw->phy.ops.write_reg))(hw,16U,7U,(unsigned short)((int)reg_cu)); else ;
    }
    else ;
  {
    
#line 262 
    struct _ddebug descriptor_2 = {.modname = "ixgbe", .function = "ixgbe_setup_fc", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c", .format = "Set up FC; IXGBE_AUTOC = 0x%08X\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))262U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 262 
    if ((long)(((int)descriptor_2.flags & 1) != 0) != 0L) 
#line 262 
                                                          __dynamic_netdev_dbg(& descriptor_2,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"Set up FC; IXGBE_AUTOC = 0x%08X\n",reg); else ;
  }
  
#line 263 
  __retres = ret_val;
  return_label: 
#line 263 
                return __retres;
}


#line 275  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c"
s32 ixgbe_start_hw_generic(struct ixgbe_hw *hw)
{
  s32 __retres;
  s32 ret_val;
  u32 ctrl_ext;
  
#line 281 
  hw->phy.media_type = (*(hw->mac.ops.get_media_type))(hw);
  
#line 284 
  (*(hw->phy.ops.identify))(hw);
  
#line 287 
  (*(hw->mac.ops.clear_vfta))(hw);
  
#line 290 
  (*(hw->mac.ops.clear_hw_cntrs))(hw);
  
#line 293 
  ctrl_ext = ixgbe_read_reg(hw,24U);
  
#line 294 
  ctrl_ext |= 65536U;
  
#line 295 
  ixgbe_write_reg(hw,24U,ctrl_ext);
  
#line 296 
  ixgbe_read_reg(hw,8U);
  
#line 299 
  ret_val = ixgbe_setup_fc(hw);
  
#line 300 
  if (ret_val == 0) {
    
#line 301 
    __retres = 0;
    
#line 301 
    goto return_label;
  }
  else ;
  
#line 304 
  hw->adapter_stopped = (_Bool)0;
  
#line 306 
  __retres = ret_val;
  return_label: 
#line 306 
                return __retres;
}


#line 319  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c"
s32 ixgbe_start_hw_gen2(struct ixgbe_hw *hw)
{
  s32 __retres;
  u32 i;
  
#line 324 
  i = 0U;
  
#line 324 
  goto ldv_54764;
  ldv_54763: 
#line 325 
  ;
  
#line 325 
  ixgbe_write_reg(hw,18692U,i);
  
#line 326 
  ixgbe_write_reg(hw,18820U,0U);
  
#line 324 
  i += 1U;
  ldv_54764: 
#line 325 
  ;
  
#line 324 
  if (hw->mac.max_tx_queues > i) 
#line 326 
                                 goto ldv_54763; else 
#line 329 
                                                      goto ldv_54765;
  ldv_54765: 
#line 330 
  ;
  
#line 328 
  ixgbe_read_reg(hw,8U);
  
#line 332 
  i = 0U;
  
#line 332 
  goto ldv_54768;
  ldv_54767: 
#line 333 
  ;
  {
    u32 regval;
    
#line 335 
    regval = ixgbe_read_reg(hw,i * 64U + 24588U);
    
#line 336 
    regval &= 4294965247U;
    
#line 337 
    ixgbe_write_reg(hw,i * 64U + 24588U,regval);
  }
  
#line 332 
  i += 1U;
  ldv_54768: 
#line 333 
  ;
  
#line 332 
  if (hw->mac.max_tx_queues > i) 
#line 334 
                                 goto ldv_54767; else 
#line 337 
                                                      goto ldv_54769;
  ldv_54769: 
#line 338 
  ;
  
#line 340 
  i = 0U;
  
#line 340 
  goto ldv_54772;
  ldv_54771: 
#line 341 
  ;
  {
    u32 regval_0;
    u32 tmp_0;
    u32 tmp_2;
    
#line 343 
    if (i <= 15U) 
#line 343 
                  tmp_0 = (i + 2176U) * 4U;
    else {
      u32 tmp;
      
#line 343 
      if (i <= 63U) 
#line 343 
                    tmp = i * 64U + 4108U; else 
#line 343 
                                                tmp = (i + 67108800U) * 64U + 53260U;
      
#line 343 
      tmp_0 = tmp;
    }
    
#line 343 
    ;
    
#line 343 
    regval_0 = ixgbe_read_reg(hw,tmp_0);
    
#line 344 
    regval_0 &= 4294926335U;
    
#line 346 
    ;
    
#line 346 
    if (i <= 15U) 
#line 346 
                  tmp_2 = (i + 2176U) * 4U;
    else {
      u32 tmp_1;
      
#line 346 
      if (i <= 63U) 
#line 346 
                    tmp_1 = i * 64U + 4108U; else 
#line 346 
                                                  tmp_1 = (i + 67108800U) * 64U + 53260U;
      
#line 346 
      tmp_2 = tmp_1;
    }
    
#line 346 
    ;
    
#line 346 
    ixgbe_write_reg(hw,tmp_2,regval_0);
  }
  
#line 340 
  i += 1U;
  ldv_54772: 
#line 341 
  ;
  
#line 340 
  if (hw->mac.max_rx_queues > i) 
#line 342 
                                 goto ldv_54771; else 
#line 345 
                                                      goto ldv_54773;
  ldv_54773: 
#line 346 
  ;
  
#line 349 
  __retres = 0;
  
#line 349 
  return __retres;
}


#line 362  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c"
s32 ixgbe_init_hw_generic(struct ixgbe_hw *hw)
{
  s32 status;
  
#line 367 
  status = (*(hw->mac.ops.reset_hw))(hw);
  
#line 369 
  if (status == 0) 
#line 371 
                   status = (*(hw->mac.ops.start_hw))(hw); else ;
  
#line 374 
  return status;
}


#line 384  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c"
s32 ixgbe_clear_hw_cntrs_generic(struct ixgbe_hw *hw)
{
  s32 __retres;
  
#line 386 
  u16 i = (unsigned short)0U;
  
#line 388 
  ixgbe_read_reg(hw,16384U);
  
#line 389 
  ixgbe_read_reg(hw,16388U);
  
#line 390 
  ixgbe_read_reg(hw,16392U);
  
#line 391 
  ixgbe_read_reg(hw,16400U);
  
#line 392 
  i = (unsigned short)0U;
  
#line 392 
  goto ldv_54783;
  ldv_54782: 
#line 393 
  ;
  
#line 393 
  ixgbe_read_reg(hw,(unsigned int)(((int)i + 4072) * 4));
  
#line 392 
  i = (u16)((int)i + 1);
  ldv_54783: 
#line 393 
  ;
  
#line 392 
  if ((unsigned int)i <= 7U) 
#line 394 
                             goto ldv_54782; else 
#line 397 
                                                  goto ldv_54784;
  ldv_54784: 
#line 398 
  ;
  
#line 395 
  ixgbe_read_reg(hw,16436U);
  
#line 396 
  ixgbe_read_reg(hw,16440U);
  
#line 397 
  ixgbe_read_reg(hw,16448U);
  
#line 398 
  ixgbe_read_reg(hw,16224U);
  
#line 399 
  ixgbe_read_reg(hw,16232U);
  
#line 400 
  if (hw->mac.type > (unsigned int)ixgbe_mac_82598EB) {
    
#line 401 
    ixgbe_read_reg(hw,16804U);
    
#line 402 
    ixgbe_read_reg(hw,16808U);
  }
  else {
    
#line 404 
    ixgbe_read_reg(hw,53088U);
    
#line 405 
    ixgbe_read_reg(hw,53096U);
  }
  
#line 408 
  i = (unsigned short)0U;
  
#line 408 
  goto ldv_54786;
  ldv_54785: 
#line 409 
  ;
  
#line 409 
  ixgbe_read_reg(hw,(unsigned int)(((int)i + 4032) * 4));
  
#line 410 
  ixgbe_read_reg(hw,(unsigned int)(((int)i + 4040) * 4));
  
#line 411 
  if (hw->mac.type > (unsigned int)ixgbe_mac_82598EB) {
    
#line 412 
    ixgbe_read_reg(hw,(unsigned int)(((int)i + 4176) * 4));
    
#line 413 
    ixgbe_read_reg(hw,(unsigned int)(((int)i + 4184) * 4));
  }
  else {
    
#line 415 
    ixgbe_read_reg(hw,(unsigned int)(((int)i + 13248) * 4));
    
#line 416 
    ixgbe_read_reg(hw,(unsigned int)(((int)i + 13256) * 4));
  }
  
#line 408 
  i = (u16)((int)i + 1);
  ldv_54786: 
#line 409 
  ;
  
#line 408 
  if ((unsigned int)i <= 7U) 
#line 410 
                             goto ldv_54785; else 
#line 413 
                                                  goto ldv_54787;
  ldv_54787: 
#line 414 
  ;
  
#line 419 
  if (hw->mac.type > (unsigned int)ixgbe_mac_82598EB) {
    
#line 420 
    i = (unsigned short)0U;
    
#line 420 
    goto ldv_54789;
    ldv_54788: 
#line 421 
    ;
    
#line 421 
    ixgbe_read_reg(hw,(unsigned int)(((int)i + 3216) * 4));
    
#line 420 
    i = (u16)((int)i + 1);
    ldv_54789: 
#line 421 
    ;
    
#line 420 
    if ((unsigned int)i <= 7U) 
#line 422 
                               goto ldv_54788; else 
#line 425 
                                                    goto ldv_54790;
    ldv_54790: 
#line 426 
    ;
  }
  else ;
  
#line 422 
  ixgbe_read_reg(hw,16476U);
  
#line 423 
  ixgbe_read_reg(hw,16480U);
  
#line 424 
  ixgbe_read_reg(hw,16484U);
  
#line 425 
  ixgbe_read_reg(hw,16488U);
  
#line 426 
  ixgbe_read_reg(hw,16492U);
  
#line 427 
  ixgbe_read_reg(hw,16496U);
  
#line 428 
  ixgbe_read_reg(hw,16500U);
  
#line 429 
  ixgbe_read_reg(hw,16504U);
  
#line 430 
  ixgbe_read_reg(hw,16508U);
  
#line 431 
  ixgbe_read_reg(hw,16512U);
  
#line 432 
  ixgbe_read_reg(hw,16520U);
  
#line 433 
  ixgbe_read_reg(hw,16524U);
  
#line 434 
  ixgbe_read_reg(hw,16528U);
  
#line 435 
  ixgbe_read_reg(hw,16532U);
  
#line 436 
  if (hw->mac.type == (unsigned int)ixgbe_mac_82598EB) {
    
#line 437 
    i = (unsigned short)0U;
    
#line 437 
    goto ldv_54792;
    ldv_54791: 
#line 438 
    ;
    
#line 438 
    ixgbe_read_reg(hw,(unsigned int)(((int)i + 4080) * 4));
    
#line 437 
    i = (u16)((int)i + 1);
    ldv_54792: 
#line 438 
    ;
    
#line 437 
    if ((unsigned int)i <= 7U) 
#line 439 
                               goto ldv_54791; else 
#line 442 
                                                    goto ldv_54793;
    ldv_54793: 
#line 443 
    ;
  }
  else ;
  
#line 439 
  ixgbe_read_reg(hw,16548U);
  
#line 440 
  ixgbe_read_reg(hw,16552U);
  
#line 441 
  ixgbe_read_reg(hw,16556U);
  
#line 442 
  ixgbe_read_reg(hw,16560U);
  
#line 443 
  ixgbe_read_reg(hw,16564U);
  
#line 444 
  ixgbe_read_reg(hw,16568U);
  
#line 445 
  ixgbe_read_reg(hw,53136U);
  
#line 446 
  ixgbe_read_reg(hw,16576U);
  
#line 447 
  ixgbe_read_reg(hw,16580U);
  
#line 448 
  ixgbe_read_reg(hw,16592U);
  
#line 449 
  ixgbe_read_reg(hw,16596U);
  
#line 450 
  ixgbe_read_reg(hw,16600U);
  
#line 451 
  ixgbe_read_reg(hw,16604U);
  
#line 452 
  ixgbe_read_reg(hw,16608U);
  
#line 453 
  ixgbe_read_reg(hw,16612U);
  
#line 454 
  ixgbe_read_reg(hw,16616U);
  
#line 455 
  ixgbe_read_reg(hw,16620U);
  
#line 456 
  ixgbe_read_reg(hw,16624U);
  
#line 457 
  ixgbe_read_reg(hw,16628U);
  
#line 458 
  i = (unsigned short)0U;
  
#line 458 
  goto ldv_54795;
  ldv_54794: 
#line 459 
  ;
  
#line 459 
  ixgbe_read_reg(hw,(unsigned int)((int)i * 64 + 4144));
  
#line 460 
  ixgbe_read_reg(hw,(unsigned int)((int)i * 64 + 24624));
  
#line 461 
  if (hw->mac.type > (unsigned int)ixgbe_mac_82598EB) {
    
#line 462 
    ixgbe_read_reg(hw,(unsigned int)((int)i * 64 + 4148));
    
#line 463 
    ixgbe_read_reg(hw,(unsigned int)((int)i * 64 + 4152));
    
#line 464 
    ixgbe_read_reg(hw,(unsigned int)(((int)i + 4320) * 8));
    
#line 465 
    ixgbe_read_reg(hw,(unsigned int)((int)i * 8 + 34564));
    
#line 466 
    ixgbe_read_reg(hw,(unsigned int)((int)i * 64 + 5168));
  }
  else {
    
#line 468 
    ixgbe_read_reg(hw,(unsigned int)((int)i * 64 + 4148));
    
#line 469 
    ixgbe_read_reg(hw,(unsigned int)((int)i * 64 + 24628));
  }
  
#line 458 
  i = (u16)((int)i + 1);
  ldv_54795: 
#line 459 
  ;
  
#line 458 
  if ((unsigned int)i <= 15U) 
#line 460 
                              goto ldv_54794; else 
#line 463 
                                                   goto ldv_54796;
  ldv_54796: 
#line 464 
  ;
  
#line 473 
  if ((unsigned int)hw->mac.type + 4294967293U <= 1U) {
    
#line 474 
    if (hw->phy.id == 0U) 
#line 475 
                          (*(hw->phy.ops.identify))(hw); else ;
    
#line 476 
    (*(hw->phy.ops.read_reg))(hw,59408U,3U,& i);
    
#line 477 
    (*(hw->phy.ops.read_reg))(hw,59409U,3U,& i);
    
#line 478 
    (*(hw->phy.ops.read_reg))(hw,59424U,3U,& i);
    
#line 479 
    (*(hw->phy.ops.read_reg))(hw,59425U,3U,& i);
  }
  else ;
  
#line 482 
  __retres = 0;
  
#line 482 
  return __retres;
}


#line 493  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c"
s32 ixgbe_read_pba_string_generic(struct ixgbe_hw *hw, u8 *pba_num, u32 pba_num_size)
{
  s32 __retres;
  s32 ret_val;
  u16 data;
  u16 pba_ptr;
  u16 offset;
  u16 length;
  
#line 502 
  if (pba_num == (u8 *)0U) {
    {
      
#line 503 
      struct _ddebug descriptor = {.modname = "ixgbe", .function = "ixgbe_read_pba_string_generic", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c", .format = "PBA string buffer was null\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))503U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 503 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 503 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"PBA string buffer was null\n"); else ;
    }
    
#line 504 
    __retres = -32;
    
#line 504 
    goto return_label;
  }
  else ;
  
#line 507 
  ret_val = (*(hw->eeprom.ops.read))(hw,(unsigned short)21,& data);
  
#line 508 
  if (ret_val != 0) {
    {
      
#line 509 
      struct _ddebug descriptor_0 = {.modname = "ixgbe", .function = "ixgbe_read_pba_string_generic", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c", .format = "NVM Read Error\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))509U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 509 
      if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 509 
                                                            __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"NVM Read Error\n"); else ;
    }
    
#line 510 
    __retres = ret_val;
    
#line 510 
    goto return_label;
  }
  else ;
  
#line 513 
  ret_val = (*(hw->eeprom.ops.read))(hw,(unsigned short)22,& pba_ptr);
  
#line 514 
  if (ret_val != 0) {
    {
      
#line 515 
      struct _ddebug descriptor_1 = {.modname = "ixgbe", .function = "ixgbe_read_pba_string_generic", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c", .format = "NVM Read Error\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))515U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 515 
      if ((long)(((int)descriptor_1.flags & 1) != 0) != 0L) 
#line 515 
                                                            __dynamic_netdev_dbg(& descriptor_1,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"NVM Read Error\n"); else ;
    }
    
#line 516 
    __retres = ret_val;
    
#line 516 
    goto return_label;
  }
  else ;
  
#line 524 
  if ((unsigned int)data != 64250U) {
    {
      
#line 525 
      struct _ddebug descriptor_2 = {.modname = "ixgbe", .function = "ixgbe_read_pba_string_generic", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c", .format = "NVM PBA number is not stored as string\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))525U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 525 
      if ((long)(((int)descriptor_2.flags & 1) != 0) != 0L) 
#line 525 
                                                            __dynamic_netdev_dbg(& descriptor_2,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"NVM PBA number is not stored as string\n"); else ;
    }
    
#line 528 
    if (pba_num_size <= 10U) {
      {
        
#line 529 
        struct _ddebug descriptor_3 = {.modname = "ixgbe", .function = "ixgbe_read_pba_string_generic", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c", .format = "PBA string buffer too small\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))529U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
        
#line 529 
        if ((long)(((int)descriptor_3.flags & 1) != 0) != 0L) 
#line 529 
                                                              __dynamic_netdev_dbg(& descriptor_3,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"PBA string buffer too small\n"); else ;
      }
      
#line 530 
      __retres = -25;
      
#line 530 
      goto return_label;
    }
    else ;
    
#line 534 
    *pba_num = (unsigned char)((unsigned int)((unsigned char)((int)data >> 12)) & 15U);
    
#line 535 
    *(pba_num + 1U) = (unsigned char)((unsigned int)((unsigned char)((int)data >> 8)) & 15U);
    
#line 536 
    *(pba_num + 2U) = (unsigned char)((unsigned int)((unsigned char)((int)data >> 4)) & 15U);
    
#line 537 
    *(pba_num + 3U) = (unsigned char)((unsigned int)((unsigned char)data) & 15U);
    
#line 538 
    *(pba_num + 4U) = (unsigned char)((unsigned int)((unsigned char)((int)pba_ptr >> 12)) & 15U);
    
#line 539 
    *(pba_num + 5U) = (unsigned char)((unsigned int)((unsigned char)((int)pba_ptr >> 8)) & 15U);
    
#line 540 
    *(pba_num + 6U) = (unsigned char)45U;
    
#line 541 
    *(pba_num + 7U) = (unsigned char)0U;
    
#line 542 
    *(pba_num + 8U) = (unsigned char)((unsigned int)((unsigned char)((int)pba_ptr >> 4)) & 15U);
    
#line 543 
    *(pba_num + 9U) = (unsigned char)((unsigned int)((unsigned char)pba_ptr) & 15U);
    
#line 546 
    *(pba_num + 10U) = (unsigned char)0U;
    
#line 549 
    offset = (unsigned short)0U;
    
#line 549 
    goto ldv_54814;
    ldv_54813: 
#line 550 
    ;
    
#line 550 
    if ((unsigned int)*(pba_num + (int)offset) <= 9U) 
#line 551 
                                                      *(pba_num + (int)offset) = (unsigned char)((unsigned int)*(pba_num + (int)offset) + 48U);
    else 
      
#line 552 
      if ((unsigned int)*(pba_num + (int)offset) <= 15U) 
#line 553 
                                                         *(pba_num + (int)offset) = (unsigned char)((unsigned int)*(pba_num + (int)offset) + 55U); else ;
    
#line 549 
    offset = (u16)((int)offset + 1);
    ldv_54814: 
#line 550 
    ;
    
#line 549 
    if ((unsigned int)offset <= 9U) 
#line 551 
                                    goto ldv_54813; else 
#line 554 
                                                         goto ldv_54815;
    ldv_54815: 
#line 555 
    ;
    
#line 556 
    __retres = 0;
    
#line 556 
    goto return_label;
  }
  else ;
  
#line 559 
  ret_val = (*(hw->eeprom.ops.read))(hw,(unsigned short)((int)pba_ptr),& length);
  
#line 560 
  if (ret_val != 0) {
    {
      
#line 561 
      struct _ddebug descriptor_4 = {.modname = "ixgbe", .function = "ixgbe_read_pba_string_generic", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c", .format = "NVM Read Error\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))561U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 561 
      if ((long)(((int)descriptor_4.flags & 1) != 0) != 0L) 
#line 561 
                                                            __dynamic_netdev_dbg(& descriptor_4,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"NVM Read Error\n"); else ;
    }
    
#line 562 
    __retres = ret_val;
    
#line 562 
    goto return_label;
  }
  else ;
  
#line 565 
  if ((unsigned int)length + 65535U > 65533U) {
    {
      
#line 566 
      struct _ddebug descriptor_5 = {.modname = "ixgbe", .function = "ixgbe_read_pba_string_generic", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c", .format = "NVM PBA number section invalid length\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))566U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 566 
      if ((long)(((int)descriptor_5.flags & 1) != 0) != 0L) 
#line 566 
                                                            __dynamic_netdev_dbg(& descriptor_5,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"NVM PBA number section invalid length\n"); else ;
    }
    
#line 567 
    __retres = -31;
    
#line 567 
    goto return_label;
  }
  else ;
  
#line 571 
  if ((unsigned int)length * 2U + 4294967295U > pba_num_size) {
    {
      
#line 572 
      struct _ddebug descriptor_6 = {.modname = "ixgbe", .function = "ixgbe_read_pba_string_generic", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c", .format = "PBA string buffer too small\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))572U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 572 
      if ((long)(((int)descriptor_6.flags & 1) != 0) != 0L) 
#line 572 
                                                            __dynamic_netdev_dbg(& descriptor_6,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"PBA string buffer too small\n"); else ;
    }
    
#line 573 
    __retres = -25;
    
#line 573 
    goto return_label;
  }
  else ;
  
#line 577 
  pba_ptr = (u16)((int)pba_ptr + 1);
  
#line 578 
  length = (u16)((int)length - 1);
  
#line 580 
  offset = (unsigned short)0U;
  
#line 580 
  goto ldv_54821;
  ldv_54820: 
#line 581 
  ;
  
#line 581 
  ret_val = (*(hw->eeprom.ops.read))(hw,(unsigned short)((int)pba_ptr + (int)offset),& data);
  
#line 582 
  if (ret_val != 0) {
    {
      
#line 583 
      struct _ddebug descriptor_7 = {.modname = "ixgbe", .function = "ixgbe_read_pba_string_generic", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c", .format = "NVM Read Error\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))583U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 583 
      if ((long)(((int)descriptor_7.flags & 1) != 0) != 0L) 
#line 583 
                                                            __dynamic_netdev_dbg(& descriptor_7,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"NVM Read Error\n"); else ;
    }
    
#line 584 
    __retres = ret_val;
    
#line 584 
    goto return_label;
  }
  else ;
  
#line 586 
  *(pba_num + (int)offset * 2) = (unsigned char)((int)data >> 8);
  
#line 587 
  *(pba_num + ((unsigned int)((int)offset * 2) + 1U)) = (unsigned char)data;
  
#line 580 
  offset = (u16)((int)offset + 1);
  ldv_54821: 
#line 581 
  ;
  
#line 580 
  if ((int)offset < (int)length) 
#line 582 
                                 goto ldv_54820; else 
#line 585 
                                                      goto ldv_54822;
  ldv_54822: 
#line 586 
  ;
  
#line 589 
  *(pba_num + (int)offset * 2) = (unsigned char)0U;
  
#line 591 
  __retres = 0;
  return_label: 
#line 591 
                return __retres;
}


#line 603  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c"
s32 ixgbe_get_mac_addr_generic(struct ixgbe_hw *hw, u8 *mac_addr)
{
  s32 __retres;
  u32 rar_high;
  u32 rar_low;
  u16 i;
  
#line 609 
  rar_high = ixgbe_read_reg(hw,21508U);
  
#line 610 
  rar_low = ixgbe_read_reg(hw,21504U);
  
#line 612 
  i = (unsigned short)0U;
  
#line 612 
  goto ldv_54831;
  ldv_54830: 
#line 613 
  ;
  
#line 613 
  *(mac_addr + (int)i) = (unsigned char)(rar_low >> (int)i * 8);
  
#line 612 
  i = (u16)((int)i + 1);
  ldv_54831: 
#line 613 
  ;
  
#line 612 
  if ((unsigned int)i <= 3U) 
#line 614 
                             goto ldv_54830; else 
#line 617 
                                                  goto ldv_54832;
  ldv_54832: 
#line 618 
  ;
  
#line 615 
  i = (unsigned short)0U;
  
#line 615 
  goto ldv_54834;
  ldv_54833: 
#line 616 
  ;
  
#line 616 
  *(mac_addr + ((unsigned int)i + 4U)) = (unsigned char)(rar_high >> (int)i * 8);
  
#line 615 
  i = (u16)((int)i + 1);
  ldv_54834: 
#line 616 
  ;
  
#line 615 
  if ((unsigned int)i <= 1U) 
#line 617 
                             goto ldv_54833; else 
#line 620 
                                                  goto ldv_54835;
  ldv_54835: 
#line 621 
  ;
  
#line 618 
  __retres = 0;
  
#line 618 
  return __retres;
}


#line 621  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c"
enum ixgbe_bus_width ixgbe_convert_bus_width(u16 link_status)
{
  enum ixgbe_bus_width __retres;
  
#line 623 
  switch ((int)link_status & 1008) {
    case 16: 
#line 624 
    ;
    
#line 625 
    __retres = ixgbe_bus_width_pcie_x1;
    
#line 625 
    goto return_label;
    case 32: 
#line 626 
    ;
    
#line 627 
    __retres = ixgbe_bus_width_pcie_x2;
    
#line 627 
    goto return_label;
    case 64: 
#line 628 
    ;
    
#line 629 
    __retres = ixgbe_bus_width_pcie_x4;
    
#line 629 
    goto return_label;
    case 128: 
#line 630 
    ;
    
#line 631 
    __retres = ixgbe_bus_width_pcie_x8;
    
#line 631 
    goto return_label;
    default: 
#line 632 
    ;
    
#line 633 
    __retres = ixgbe_bus_width_unknown;
    
#line 633 
    goto return_label;
  }
  return_label: 
#line 623 
                return __retres;
}


#line 637  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c"
enum ixgbe_bus_speed ixgbe_convert_bus_speed(u16 link_status)
{
  enum ixgbe_bus_speed __retres;
  
#line 639 
  switch ((int)link_status & 15) {
    case 1: 
#line 640 
    ;
    
#line 641 
    __retres = ixgbe_bus_speed_2500;
    
#line 641 
    goto return_label;
    case 2: 
#line 642 
    ;
    
#line 643 
    __retres = ixgbe_bus_speed_5000;
    
#line 643 
    goto return_label;
    case 3: 
#line 644 
    ;
    
#line 645 
    __retres = ixgbe_bus_speed_8000;
    
#line 645 
    goto return_label;
    default: 
#line 646 
    ;
    
#line 647 
    __retres = ixgbe_bus_speed_unknown;
    
#line 647 
    goto return_label;
  }
  return_label: 
#line 639 
                return __retres;
}


#line 657  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c"
s32 ixgbe_get_bus_info_generic(struct ixgbe_hw *hw)
{
  s32 __retres;
  u16 link_status;
  
#line 661 
  hw->bus.type = ixgbe_bus_type_pci_express;
  
#line 664 
  link_status = ixgbe_read_pci_cfg_word(hw,178U);
  
#line 666 
  hw->bus.width = ixgbe_convert_bus_width((unsigned short)((int)link_status));
  
#line 667 
  hw->bus.speed = ixgbe_convert_bus_speed((unsigned short)((int)link_status));
  
#line 669 
  (*(hw->mac.ops.set_lan_id))(hw);
  
#line 671 
  __retres = 0;
  
#line 671 
  return __retres;
}


#line 681  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c"
void ixgbe_set_lan_id_multi_port_pcie(struct ixgbe_hw *hw)
{
  u32 reg;
  
#line 683 
  struct ixgbe_bus_info *bus = & hw->bus;
  
#line 686 
  reg = ixgbe_read_reg(hw,8U);
  
#line 687 
  bus->func = (unsigned short)((unsigned int)((unsigned short)(reg >> 2)) & 3U);
  
#line 688 
  bus->lan_id = bus->func;
  
#line 691 
  reg = ixgbe_read_reg(hw,*(hw->mvals + 4U));
  
#line 692 
  if ((reg & 1073741824U) != 0U) 
#line 693 
                                 bus->func = (unsigned short)((unsigned int)bus->func ^ 1U); else ;
  
#line 694 
  return;
}


#line 705  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c"
s32 ixgbe_stop_adapter_generic(struct ixgbe_hw *hw)
{
  u32 reg_val;
  u16 i;
  int tmp;
  int tmp_0;
  s32 tmp_1;
  
#line 714 
  hw->adapter_stopped = (_Bool)1;
  
#line 717 
  (*(hw->mac.ops.disable_rx))(hw);
  
#line 720 
  ixgbe_write_reg(hw,2184U,4294967295U);
  
#line 723 
  ixgbe_read_reg(hw,2048U);
  
#line 726 
  i = (unsigned short)0U;
  
#line 726 
  goto ldv_54866;
  ldv_54865: 
#line 727 
  ;
  
#line 727 
  ixgbe_write_reg(hw,(unsigned int)((int)i * 64 + 24616),67108864U);
  
#line 726 
  i = (u16)((int)i + 1);
  ldv_54866: 
#line 727 
  ;
  
#line 726 
  if ((unsigned int)i < hw->mac.max_tx_queues) 
#line 728 
                                               goto ldv_54865; else 
#line 731 
                                                                    goto ldv_54867;
  ldv_54867: 
#line 732 
  ;
  
#line 730 
  i = (unsigned short)0U;
  
#line 730 
  goto ldv_54869;
  ldv_54868: 
#line 731 
  ;
  
#line 731 
  if ((unsigned int)i <= 63U) 
#line 731 
                              tmp = (int)i * 64 + 4136; else 
#line 731 
                                                             tmp = ((int)i + -64) * 64 + 53288;
  
#line 731 
  ;
  
#line 731 
  reg_val = ixgbe_read_reg(hw,(unsigned int)tmp);
  
#line 732 
  reg_val &= 4261412863U;
  
#line 733 
  reg_val |= 67108864U;
  
#line 734 
  ;
  
#line 734 
  if ((unsigned int)i <= 63U) 
#line 734 
                              tmp_0 = (int)i * 64 + 4136; else 
#line 734 
                                                               tmp_0 = ((int)i + -64) * 64 + 53288;
  
#line 734 
  ;
  
#line 734 
  ixgbe_write_reg(hw,(unsigned int)tmp_0,reg_val);
  
#line 730 
  i = (u16)((int)i + 1);
  ldv_54869: 
#line 731 
  ;
  
#line 730 
  if ((unsigned int)i < hw->mac.max_rx_queues) 
#line 732 
                                               goto ldv_54868; else 
#line 735 
                                                                    goto ldv_54870;
  ldv_54870: 
#line 736 
  ;
  
#line 738 
  ixgbe_read_reg(hw,8U);
  
#line 739 
  usleep_range(1000UL,2000UL);
  
#line 745 
  tmp_1 = ixgbe_disable_pcie_master(hw);
  
#line 745 
  return tmp_1;
}


#line 753  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c"
s32 ixgbe_led_on_generic(struct ixgbe_hw *hw, u32 index)
{
  s32 __retres;
  
#line 755 
  u32 led_reg = ixgbe_read_reg(hw,512U);
  
#line 758 
  led_reg = (unsigned int)(~ (15 << index * 8U)) & led_reg;
  
#line 759 
  led_reg = (unsigned int)(14 << index * 8U) | led_reg;
  
#line 760 
  ixgbe_write_reg(hw,512U,led_reg);
  
#line 761 
  ixgbe_read_reg(hw,8U);
  
#line 763 
  __retres = 0;
  
#line 763 
  return __retres;
}


#line 771  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c"
s32 ixgbe_led_off_generic(struct ixgbe_hw *hw, u32 index)
{
  s32 __retres;
  
#line 773 
  u32 led_reg = ixgbe_read_reg(hw,512U);
  
#line 776 
  led_reg = (unsigned int)(~ (15 << index * 8U)) & led_reg;
  
#line 777 
  led_reg = (unsigned int)(15 << index * 8U) | led_reg;
  
#line 778 
  ixgbe_write_reg(hw,512U,led_reg);
  
#line 779 
  ixgbe_read_reg(hw,8U);
  
#line 781 
  __retres = 0;
  
#line 781 
  return __retres;
}


#line 791  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c"
s32 ixgbe_init_eeprom_params_generic(struct ixgbe_hw *hw)
{
  s32 __retres;
  u32 eec;
  u16 eeprom_size;
  
#line 793 
  struct ixgbe_eeprom_info *eeprom = & hw->eeprom;
  
#line 797 
  if (eeprom->type == (unsigned int)ixgbe_eeprom_uninitialized) {
    
#line 798 
    eeprom->type = ixgbe_eeprom_none;
    
#line 801 
    eeprom->semaphore_delay = 10U;
    
#line 803 
    eeprom->word_page_size = (unsigned short)0U;
    
#line 809 
    eec = ixgbe_read_reg(hw,*(hw->mvals));
    
#line 810 
    if ((eec & 256U) != 0U) {
      
#line 811 
      eeprom->type = ixgbe_eeprom_spi;
      
#line 817 
      eeprom_size = (unsigned short)((unsigned int)((unsigned short)(eec >> 11)) & 15U);
      
#line 819 
      eeprom->word_size = (unsigned short)(1 << ((int)eeprom_size + 6));
    }
    else ;
    
#line 823 
    if ((eec & 1024U) != 0U) 
#line 824 
                             eeprom->address_bits = (unsigned short)16U; else 
                                                                    
#line 826 
                                                                    eeprom->address_bits = (unsigned short)8U;
    {
      
#line 827 
      struct _ddebug descriptor = {.modname = "ixgbe", .function = "ixgbe_init_eeprom_params_generic", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c", .format = "Eeprom params: type = %d, size = %d, address bits: %d\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))828U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 827 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 827 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"Eeprom params: type = %d, size = %d, address bits: %d\n",(unsigned int)eeprom->type,(int)eeprom->word_size,(int)eeprom->address_bits); else ;
    }
  }
  else ;
  
#line 831 
  __retres = 0;
  
#line 831 
  return __retres;
}


#line 843  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c"
s32 ixgbe_write_eeprom_buffer_bit_bang_generic(struct ixgbe_hw *hw, u16 offset, u16 words, u16 *data)
{
  s32 __retres;
  s32 status;
  u16 i;
  u16 count;
  int tmp;
  
#line 849 
  (*(hw->eeprom.ops.init_params))(hw);
  
#line 851 
  if ((unsigned int)words == 0U) {
    
#line 852 
    __retres = -32;
    
#line 852 
    goto return_label;
  }
  else ;
  
#line 854 
  if ((int)offset + (int)words > (int)hw->eeprom.word_size) {
    
#line 855 
    __retres = -1;
    
#line 855 
    goto return_label;
  }
  else ;
  
#line 861 
  if ((unsigned int)hw->eeprom.word_page_size == 0U && (unsigned int)words > 128U) 
    
#line 863 
    ixgbe_detect_eeprom_page_size_generic(hw,(unsigned short)((int)offset)); else ;
  
#line 870 
  i = (unsigned short)0U;
  
#line 870 
  goto ldv_54900;
  ldv_54899: 
#line 871 
  ;
  
#line 871 
  if (512 < (int)words - (int)i) 
#line 871 
                                 tmp = 512; else 
#line 871 
                                                 tmp = (int)words - (int)i;
  
#line 871 
  count = (unsigned short)tmp;
  
#line 873 
  status = ixgbe_write_eeprom_buffer_bit_bang(hw,(unsigned short)((int)offset + (int)i),(unsigned short)((int)count),data + (int)i);
  
#line 876 
  if (status != 0) 
#line 877 
                   goto ldv_54898; else ;
  
#line 870 
  i = (unsigned short)((unsigned int)i + 512U);
  ldv_54900: 
#line 871 
  ;
  
#line 870 
  if ((int)i < (int)words) 
#line 872 
                           goto ldv_54899; else 
#line 875 
                                                goto ldv_54898;
  ldv_54898: 
#line 876 
  ;
  
#line 880 
  __retres = status;
  return_label: 
#line 880 
                return __retres;
}


#line 893  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c"
static s32 ixgbe_write_eeprom_buffer_bit_bang(struct ixgbe_hw *hw, u16 offset, u16 words, u16 *data)
{
  s32 __retres;
  s32 status;
  u16 word;
  u16 page_size;
  u16 i;
  s32 tmp;
  
#line 900 
  u8 write_opcode = (unsigned char)2U;
  
#line 903 
  status = ixgbe_acquire_eeprom(hw);
  
#line 904 
  if (status != 0) {
    
#line 905 
    __retres = status;
    
#line 905 
    goto return_label;
  }
  else ;
  
#line 907 
  tmp = ixgbe_ready_eeprom(hw);
  
#line 907 
  if (tmp != 0) {
    
#line 908 
    ixgbe_release_eeprom(hw);
    
#line 909 
    __retres = -1;
    
#line 909 
    goto return_label;
  }
  else ;
  
#line 912 
  i = (unsigned short)0U;
  
#line 912 
  goto ldv_54915;
  ldv_54914: 
#line 913 
  ;
  
#line 913 
  ixgbe_standby_eeprom(hw);
  
#line 916 
  ixgbe_shift_out_eeprom_bits(hw,(unsigned short)6,(unsigned short)8);
  
#line 920 
  ixgbe_standby_eeprom(hw);
  
#line 925 
  if ((unsigned int)hw->eeprom.address_bits == 8U && (int)offset + (int)i > 127) 
    
#line 927 
    write_opcode = (unsigned char)((unsigned int)write_opcode | 8U); else ;
  
#line 930 
  ixgbe_shift_out_eeprom_bits(hw,(unsigned short)((int)write_opcode),(unsigned short)8);
  
#line 932 
  ixgbe_shift_out_eeprom_bits(hw,(unsigned short)((int)((unsigned int)((int)offset + (int)i) * 2U)),(unsigned short)((int)hw->eeprom.address_bits));
  
#line 935 
  page_size = hw->eeprom.word_page_size;
  ldv_54913: 
#line 936 
  ;
  
#line 939 
  word = *(data + (int)i);
  
#line 940 
  word = (unsigned short)(((int)word >> 8) | ((int)word << 8));
  
#line 941 
  ixgbe_shift_out_eeprom_bits(hw,(unsigned short)((int)word),(unsigned short)16);
  
#line 943 
  if ((unsigned int)page_size == 0U) 
#line 944 
                                     goto ldv_54912; else ;
  
#line 947 
  if ((((int)offset + (int)i) & ((int)page_size + -1)) == (int)page_size + -1) 
    
#line 949 
    goto ldv_54912; else ;
  
#line 950 
  i = (u16)((int)i + 1);
  
#line 950 
  ;
  
#line 950 
  if ((int)i < (int)words) 
#line 952 
                           goto ldv_54913; else 
#line 955 
                                                goto ldv_54912;
  ldv_54912: 
#line 956 
  ;
  
#line 952 
  ixgbe_standby_eeprom(hw);
  
#line 953 
  usleep_range(10000UL,20000UL);
  
#line 912 
  i = (u16)((int)i + 1);
  ldv_54915: 
#line 913 
  ;
  
#line 912 
  if ((int)i < (int)words) 
#line 914 
                           goto ldv_54914; else 
#line 917 
                                                goto ldv_54916;
  ldv_54916: 
#line 918 
  ;
  
#line 956 
  ixgbe_release_eeprom(hw);
  
#line 958 
  __retres = 0;
  return_label: 
#line 958 
                return __retres;
}


#line 970  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c"
s32 ixgbe_write_eeprom_generic(struct ixgbe_hw *hw, u16 offset, u16 data)
{
  s32 __retres;
  s32 tmp;
  
#line 972 
  (*(hw->eeprom.ops.init_params))(hw);
  
#line 974 
  if ((int)hw->eeprom.word_size <= (int)offset) {
    
#line 975 
    __retres = -1;
    
#line 975 
    goto return_label;
  }
  else ;
  
#line 977 
  tmp = ixgbe_write_eeprom_buffer_bit_bang(hw,(unsigned short)((int)offset),(unsigned short)1,& data);
  
#line 977 
  __retres = tmp;
  return_label: 
#line 977 
                return __retres;
}


#line 989  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c"
s32 ixgbe_read_eeprom_buffer_bit_bang_generic(struct ixgbe_hw *hw, u16 offset, u16 words, u16 *data)
{
  s32 __retres;
  s32 status;
  u16 i;
  u16 count;
  int tmp;
  
#line 995 
  (*(hw->eeprom.ops.init_params))(hw);
  
#line 997 
  if ((unsigned int)words == 0U) {
    
#line 998 
    __retres = -32;
    
#line 998 
    goto return_label;
  }
  else ;
  
#line 1000 
  if ((int)offset + (int)words > (int)hw->eeprom.word_size) {
    
#line 1001 
    __retres = -1;
    
#line 1001 
    goto return_label;
  }
  else ;
  
#line 1008 
  i = (unsigned short)0U;
  
#line 1008 
  goto ldv_54932;
  ldv_54931: 
#line 1009 
  ;
  
#line 1009 
  if (512 < (int)words - (int)i) 
#line 1009 
                                 tmp = 512; else 
#line 1009 
                                                 tmp = (int)words - (int)i;
  
#line 1009 
  count = (unsigned short)tmp;
  
#line 1012 
  status = ixgbe_read_eeprom_buffer_bit_bang(hw,(unsigned short)((int)offset + (int)i),(unsigned short)((int)count),data + (int)i);
  
#line 1015 
  if (status != 0) {
    
#line 1016 
    __retres = status;
    
#line 1016 
    goto return_label;
  }
  else ;
  
#line 1008 
  i = (unsigned short)((unsigned int)i + 512U);
  ldv_54932: 
#line 1009 
  ;
  
#line 1008 
  if ((int)i < (int)words) 
#line 1010 
                           goto ldv_54931; else 
#line 1013 
                                                goto ldv_54933;
  ldv_54933: 
#line 1014 
  ;
  
#line 1019 
  __retres = 0;
  return_label: 
#line 1019 
                return __retres;
}


#line 1031  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c"
static s32 ixgbe_read_eeprom_buffer_bit_bang(struct ixgbe_hw *hw, u16 offset, u16 words, u16 *data)
{
  s32 __retres;
  s32 status;
  u16 word_in;
  u16 i;
  s32 tmp;
  
#line 1036 
  u8 read_opcode = (unsigned char)3U;
  
#line 1040 
  status = ixgbe_acquire_eeprom(hw);
  
#line 1041 
  if (status != 0) {
    
#line 1042 
    __retres = status;
    
#line 1042 
    goto return_label;
  }
  else ;
  
#line 1044 
  tmp = ixgbe_ready_eeprom(hw);
  
#line 1044 
  if (tmp != 0) {
    
#line 1045 
    ixgbe_release_eeprom(hw);
    
#line 1046 
    __retres = -1;
    
#line 1046 
    goto return_label;
  }
  else ;
  
#line 1049 
  i = (unsigned short)0U;
  
#line 1049 
  goto ldv_54945;
  ldv_54944: 
#line 1050 
  ;
  
#line 1050 
  ixgbe_standby_eeprom(hw);
  
#line 1054 
  if ((unsigned int)hw->eeprom.address_bits == 8U && (int)offset + (int)i > 127) 
    
#line 1056 
    read_opcode = (unsigned char)((unsigned int)read_opcode | 8U); else ;
  
#line 1059 
  ixgbe_shift_out_eeprom_bits(hw,(unsigned short)((int)read_opcode),(unsigned short)8);
  
#line 1061 
  ixgbe_shift_out_eeprom_bits(hw,(unsigned short)((int)((unsigned int)((int)offset + (int)i) * 2U)),(unsigned short)((int)hw->eeprom.address_bits));
  
#line 1065 
  word_in = ixgbe_shift_in_eeprom_bits(hw,(unsigned short)16);
  
#line 1066 
  *(data + (int)i) = (unsigned short)(((int)word_in >> 8) | ((int)word_in << 8));
  
#line 1049 
  i = (u16)((int)i + 1);
  ldv_54945: 
#line 1050 
  ;
  
#line 1049 
  if ((int)i < (int)words) 
#line 1051 
                           goto ldv_54944; else 
#line 1054 
                                                goto ldv_54946;
  ldv_54946: 
#line 1055 
  ;
  
#line 1070 
  ixgbe_release_eeprom(hw);
  
#line 1072 
  __retres = 0;
  return_label: 
#line 1072 
                return __retres;
}


#line 1083  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c"
s32 ixgbe_read_eeprom_bit_bang_generic(struct ixgbe_hw *hw, u16 offset, u16 *data)
{
  s32 __retres;
  s32 tmp;
  
#line 1086 
  (*(hw->eeprom.ops.init_params))(hw);
  
#line 1088 
  if ((int)hw->eeprom.word_size <= (int)offset) {
    
#line 1089 
    __retres = -1;
    
#line 1089 
    goto return_label;
  }
  else ;
  
#line 1091 
  tmp = ixgbe_read_eeprom_buffer_bit_bang(hw,(unsigned short)((int)offset),(unsigned short)1,data);
  
#line 1091 
  __retres = tmp;
  return_label: 
#line 1091 
                return __retres;
}


#line 1103  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c"
s32 ixgbe_read_eerd_buffer_generic(struct ixgbe_hw *hw, u16 offset, u16 words, u16 *data)
{
  s32 __retres;
  u32 eerd;
  s32 status;
  u32 i;
  
#line 1110 
  (*(hw->eeprom.ops.init_params))(hw);
  
#line 1112 
  if ((unsigned int)words == 0U) {
    
#line 1113 
    __retres = -32;
    
#line 1113 
    goto return_label;
  }
  else ;
  
#line 1115 
  if ((int)hw->eeprom.word_size <= (int)offset) {
    
#line 1116 
    __retres = -1;
    
#line 1116 
    goto return_label;
  }
  else ;
  
#line 1118 
  i = 0U;
  
#line 1118 
  goto ldv_54964;
  ldv_54963: 
#line 1119 
  ;
  
#line 1119 
  eerd = (((unsigned int)offset + i) << 2) | 1U;
  
#line 1122 
  ixgbe_write_reg(hw,65556U,eerd);
  
#line 1123 
  status = ixgbe_poll_eerd_eewr_done(hw,0U);
  
#line 1125 
  if (status == 0) {
    u32 tmp;
    
#line 1126 
    tmp = ixgbe_read_reg(hw,65556U);
    
#line 1126 
    *(data + i) = (unsigned short)(tmp >> 16);
  }
  else {
    {
      
#line 1129 
      struct _ddebug descriptor = {.modname = "ixgbe", .function = "ixgbe_read_eerd_buffer_generic", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c", .format = "Eeprom read timed out\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1129U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1129 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 1129 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"Eeprom read timed out\n"); else ;
    }
    
#line 1130 
    __retres = status;
    
#line 1130 
    goto return_label;
  }
  
#line 1118 
  i += 1U;
  ldv_54964: 
#line 1119 
  ;
  
#line 1118 
  if ((unsigned int)words > i) 
#line 1120 
                               goto ldv_54963; else 
#line 1123 
                                                    goto ldv_54965;
  ldv_54965: 
#line 1124 
  ;
  
#line 1134 
  __retres = 0;
  return_label: 
#line 1134 
                return __retres;
}


#line 1146  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c"
static s32 ixgbe_detect_eeprom_page_size_generic(struct ixgbe_hw *hw, u16 offset)
{
  s32 __retres;
  u16 data[128U];
  s32 status;
  u16 i;
  
#line 1153 
  i = (unsigned short)0U;
  
#line 1153 
  goto ldv_54974;
  ldv_54973: 
#line 1154 
  ;
  
#line 1154 
  data[(int)i] = i;
  
#line 1153 
  i = (u16)((int)i + 1);
  ldv_54974: 
#line 1154 
  ;
  
#line 1153 
  if ((unsigned int)i <= 127U) 
#line 1155 
                               goto ldv_54973; else 
#line 1158 
                                                    goto ldv_54975;
  ldv_54975: 
#line 1159 
  ;
  
#line 1156 
  hw->eeprom.word_page_size = (unsigned short)128U;
  
#line 1157 
  status = ixgbe_write_eeprom_buffer_bit_bang(hw,(unsigned short)((int)offset),(unsigned short)128,(u16 *)(& data));
  
#line 1159 
  hw->eeprom.word_page_size = (unsigned short)0U;
  
#line 1160 
  if (status != 0) {
    
#line 1161 
    __retres = status;
    
#line 1161 
    goto return_label;
  }
  else ;
  
#line 1163 
  status = ixgbe_read_eeprom_buffer_bit_bang(hw,(unsigned short)((int)offset),(unsigned short)1,(u16 *)(& data));
  
#line 1164 
  if (status != 0) {
    
#line 1165 
    __retres = status;
    
#line 1165 
    goto return_label;
  }
  else ;
  
#line 1171 
  hw->eeprom.word_page_size = (unsigned short)(128U - (unsigned int)data[0]);
  {
    
#line 1173 
    struct _ddebug descriptor = {.modname = "ixgbe", .function = "ixgbe_detect_eeprom_page_size_generic", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c", .format = "Detected EEPROM page size = %d words.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1174U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 1173 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 1173 
                                                        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"Detected EEPROM page size = %d words.\n",(int)hw->eeprom.word_page_size); else ;
  }
  
#line 1175 
  __retres = 0;
  return_label: 
#line 1175 
                return __retres;
}


#line 1186  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c"
s32 ixgbe_read_eerd_generic(struct ixgbe_hw *hw, u16 offset, u16 *data)
{
  s32 tmp;
  
#line 1188 
  tmp = ixgbe_read_eerd_buffer_generic(hw,(unsigned short)((int)offset),(unsigned short)1,data);
  
#line 1188 
  return tmp;
}


#line 1200  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c"
s32 ixgbe_write_eewr_buffer_generic(struct ixgbe_hw *hw, u16 offset, u16 words, u16 *data)
{
  s32 __retres;
  u32 eewr;
  s32 status;
  u16 i;
  
#line 1207 
  (*(hw->eeprom.ops.init_params))(hw);
  
#line 1209 
  if ((unsigned int)words == 0U) {
    
#line 1210 
    __retres = -32;
    
#line 1210 
    goto return_label;
  }
  else ;
  
#line 1212 
  if ((int)hw->eeprom.word_size <= (int)offset) {
    
#line 1213 
    __retres = -1;
    
#line 1213 
    goto return_label;
  }
  else ;
  
#line 1215 
  i = (unsigned short)0U;
  
#line 1215 
  goto ldv_54996;
  ldv_54995: 
#line 1216 
  ;
  
#line 1216 
  eewr = (unsigned int)(((((int)offset + (int)i) << 2) | ((int)*(data + (int)i) << 16)) | 1);
  
#line 1220 
  status = ixgbe_poll_eerd_eewr_done(hw,1U);
  
#line 1221 
  if (status != 0) {
    {
      
#line 1222 
      struct _ddebug descriptor = {.modname = "ixgbe", .function = "ixgbe_write_eewr_buffer_generic", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c", .format = "Eeprom write EEWR timed out\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1222U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1222 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 1222 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"Eeprom write EEWR timed out\n"); else ;
    }
    
#line 1223 
    __retres = status;
    
#line 1223 
    goto return_label;
  }
  else ;
  
#line 1226 
  ixgbe_write_reg(hw,65560U,eewr);
  
#line 1228 
  status = ixgbe_poll_eerd_eewr_done(hw,1U);
  
#line 1229 
  if (status != 0) {
    {
      
#line 1230 
      struct _ddebug descriptor_0 = {.modname = "ixgbe", .function = "ixgbe_write_eewr_buffer_generic", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c", .format = "Eeprom write EEWR timed out\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1230U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1230 
      if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 1230 
                                                            __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"Eeprom write EEWR timed out\n"); else ;
    }
    
#line 1231 
    __retres = status;
    
#line 1231 
    goto return_label;
  }
  else ;
  
#line 1215 
  i = (u16)((int)i + 1);
  ldv_54996: 
#line 1216 
  ;
  
#line 1215 
  if ((int)i < (int)words) 
#line 1217 
                           goto ldv_54995; else 
#line 1220 
                                                goto ldv_54997;
  ldv_54997: 
#line 1221 
  ;
  
#line 1235 
  __retres = 0;
  return_label: 
#line 1235 
                return __retres;
}


#line 1246  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c"
s32 ixgbe_write_eewr_generic(struct ixgbe_hw *hw, u16 offset, u16 data)
{
  s32 tmp;
  
#line 1248 
  tmp = ixgbe_write_eewr_buffer_generic(hw,(unsigned short)((int)offset),(unsigned short)1,& data);
  
#line 1248 
  return tmp;
}


#line 1259  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c"
static s32 ixgbe_poll_eerd_eewr_done(struct ixgbe_hw *hw, u32 ee_reg)
{
  s32 __retres;
  u32 i;
  u32 reg;
  
#line 1264 
  i = 0U;
  
#line 1264 
  goto ldv_55010;
  ldv_55009: 
#line 1265 
  ;
  
#line 1265 
  if (ee_reg == 0U) 
#line 1266 
                    reg = ixgbe_read_reg(hw,65556U); else 
#line 1268 
                                                          reg = ixgbe_read_reg(hw,65560U);
  
#line 1270 
  if ((reg & 2U) != 0U) {
    
#line 1271 
    __retres = 0;
    
#line 1271 
    goto return_label;
  }
  else ;
  
#line 1273 
  __const_udelay(21475UL);
  
#line 1264 
  i += 1U;
  ldv_55010: 
#line 1265 
  ;
  
#line 1264 
  if (i <= 99999U) 
#line 1266 
                   goto ldv_55009; else 
#line 1269 
                                        goto ldv_55011;
  ldv_55011: 
#line 1270 
  ;
  
#line 1275 
  __retres = -1;
  return_label: 
#line 1275 
                return __retres;
}


#line 1285  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c"
static s32 ixgbe_acquire_eeprom(struct ixgbe_hw *hw)
{
  s32 __retres;
  u32 eec;
  u32 i;
  s32 tmp;
  
#line 1290 
  tmp = (*(hw->mac.ops.acquire_swfw_sync))(hw,1U);
  
#line 1290 
  if (tmp != 0) {
    
#line 1291 
    __retres = -16;
    
#line 1291 
    goto return_label;
  }
  else ;
  
#line 1293 
  eec = ixgbe_read_reg(hw,*(hw->mvals));
  
#line 1296 
  eec |= 64U;
  
#line 1297 
  ixgbe_write_reg(hw,*(hw->mvals),eec);
  
#line 1299 
  i = 0U;
  
#line 1299 
  goto ldv_55019;
  ldv_55018: 
#line 1300 
  ;
  
#line 1300 
  eec = ixgbe_read_reg(hw,*(hw->mvals));
  
#line 1301 
  if ((eec & 128U) != 0U) 
#line 1302 
                          goto ldv_55017; else ;
  
#line 1303 
  __const_udelay(21475UL);
  
#line 1299 
  i += 1U;
  ldv_55019: 
#line 1300 
  ;
  
#line 1299 
  if (i <= 999U) 
#line 1301 
                 goto ldv_55018; else 
#line 1304 
                                      goto ldv_55017;
  ldv_55017: 
#line 1305 
  ;
  
#line 1307 
  if ((eec & 128U) == 0U) {
    
#line 1308 
    eec &= 4294967231U;
    
#line 1309 
    ixgbe_write_reg(hw,*(hw->mvals),eec);
    {
      
#line 1310 
      struct _ddebug descriptor = {.modname = "ixgbe", .function = "ixgbe_acquire_eeprom", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c", .format = "Could not acquire EEPROM grant\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1310U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1310 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 1310 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"Could not acquire EEPROM grant\n"); else ;
    }
    
#line 1312 
    (*(hw->mac.ops.release_swfw_sync))(hw,1U);
    
#line 1313 
    __retres = -1;
    
#line 1313 
    goto return_label;
  }
  else ;
  
#line 1318 
  eec &= 4294967292U;
  
#line 1319 
  ixgbe_write_reg(hw,*(hw->mvals),eec);
  
#line 1320 
  ixgbe_read_reg(hw,8U);
  
#line 1321 
  __const_udelay(4295UL);
  
#line 1322 
  __retres = 0;
  return_label: 
#line 1322 
                return __retres;
}


#line 1331  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c"
static s32 ixgbe_get_eeprom_semaphore(struct ixgbe_hw *hw)
{
  s32 __retres;
  u32 i;
  u32 swsm;
  
#line 1333 
  u32 timeout = 2000U;
  
#line 1338 
  i = 0U;
  
#line 1338 
  goto ldv_55030;
  ldv_55029: 
#line 1339 
  ;
  
#line 1343 
  swsm = ixgbe_read_reg(hw,*(hw->mvals + 5U));
  
#line 1344 
  if ((swsm & 1U) == 0U) 
#line 1345 
                         goto ldv_55028; else ;
  
#line 1346 
  usleep_range(50UL,100UL);
  
#line 1338 
  i += 1U;
  ldv_55030: 
#line 1339 
  ;
  
#line 1338 
  if (i < timeout) 
#line 1340 
                   goto ldv_55029; else 
#line 1343 
                                        goto ldv_55028;
  ldv_55028: 
#line 1344 
  ;
  
#line 1349 
  if (i == timeout) {
    {
      
#line 1350 
      struct _ddebug descriptor = {.modname = "ixgbe", .function = "ixgbe_get_eeprom_semaphore", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c", .format = "Driver can\'t access the Eeprom - SMBI Semaphore not granted.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1350U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1350 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 1350 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"Driver can\'t access the Eeprom - SMBI Semaphore not granted.\n"); else ;
    }
    
#line 1356 
    ixgbe_release_eeprom_semaphore(hw);
    
#line 1358 
    usleep_range(50UL,100UL);
    
#line 1363 
    swsm = ixgbe_read_reg(hw,*(hw->mvals + 5U));
    
#line 1364 
    if ((swsm & 1U) != 0U) {
      {
        
#line 1365 
        struct _ddebug descriptor_0 = {.modname = "ixgbe", .function = "ixgbe_get_eeprom_semaphore", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c", .format = "Software semaphore SMBI between device drivers not granted.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1365U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
        
#line 1365 
        if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 1365 
                                                              __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"Software semaphore SMBI between device drivers not granted.\n"); else ;
      }
      
#line 1366 
      __retres = -1;
      
#line 1366 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 1371 
  i = 0U;
  
#line 1371 
  goto ldv_55036;
  ldv_55035: 
#line 1372 
  ;
  
#line 1372 
  swsm = ixgbe_read_reg(hw,*(hw->mvals + 5U));
  
#line 1375 
  swsm |= 2U;
  
#line 1376 
  ixgbe_write_reg(hw,*(hw->mvals + 5U),swsm);
  
#line 1381 
  swsm = ixgbe_read_reg(hw,*(hw->mvals + 5U));
  
#line 1382 
  if ((swsm & 2U) != 0U) 
#line 1383 
                         goto ldv_55034; else ;
  
#line 1385 
  usleep_range(50UL,100UL);
  
#line 1371 
  i += 1U;
  ldv_55036: 
#line 1372 
  ;
  
#line 1371 
  if (i < timeout) 
#line 1373 
                   goto ldv_55035; else 
#line 1376 
                                        goto ldv_55034;
  ldv_55034: 
#line 1377 
  ;
  
#line 1391 
  if (i >= timeout) {
    {
      
#line 1392 
      struct _ddebug descriptor_1 = {.modname = "ixgbe", .function = "ixgbe_get_eeprom_semaphore", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c", .format = "SWESMBI Software EEPROM semaphore not granted.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1392U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1392 
      if ((long)(((int)descriptor_1.flags & 1) != 0) != 0L) 
#line 1392 
                                                            __dynamic_netdev_dbg(& descriptor_1,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"SWESMBI Software EEPROM semaphore not granted.\n"); else ;
    }
    
#line 1393 
    ixgbe_release_eeprom_semaphore(hw);
    
#line 1394 
    __retres = -1;
    
#line 1394 
    goto return_label;
  }
  else ;
  
#line 1397 
  __retres = 0;
  return_label: 
#line 1397 
                return __retres;
}


#line 1406  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c"
static void ixgbe_release_eeprom_semaphore(struct ixgbe_hw *hw)
{
  u32 swsm;
  
#line 1410 
  swsm = ixgbe_read_reg(hw,*(hw->mvals + 5U));
  
#line 1413 
  swsm &= 4294967292U;
  
#line 1414 
  ixgbe_write_reg(hw,*(hw->mvals + 5U),swsm);
  
#line 1415 
  ixgbe_read_reg(hw,8U);
  
#line 1416 
  return;
}


#line 1422  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c"
static s32 ixgbe_ready_eeprom(struct ixgbe_hw *hw)
{
  s32 __retres;
  u16 i;
  u8 spi_stat_reg;
  u16 tmp;
  
#line 1433 
  i = (unsigned short)0U;
  
#line 1433 
  goto ldv_55049;
  ldv_55048: 
#line 1434 
  ;
  
#line 1434 
  ixgbe_shift_out_eeprom_bits(hw,(unsigned short)5,(unsigned short)8);
  
#line 1436 
  tmp = ixgbe_shift_in_eeprom_bits(hw,(unsigned short)8);
  
#line 1436 
  spi_stat_reg = (unsigned char)tmp;
  
#line 1437 
  if (((int)spi_stat_reg & 1) == 0) 
#line 1438 
                                    goto ldv_55047; else ;
  
#line 1440 
  __const_udelay(21475UL);
  
#line 1441 
  ixgbe_standby_eeprom(hw);
  
#line 1433 
  i = (unsigned short)((unsigned int)i + 5U);
  ldv_55049: 
#line 1434 
  ;
  
#line 1433 
  if ((unsigned int)i <= 4999U) 
#line 1435 
                                goto ldv_55048; else 
#line 1438 
                                                     goto ldv_55047;
  ldv_55047: 
#line 1439 
  ;
  
#line 1448 
  if ((unsigned int)i > 4999U) {
    {
      
#line 1449 
      struct _ddebug descriptor = {.modname = "ixgbe", .function = "ixgbe_ready_eeprom", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c", .format = "SPI EEPROM Status error\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1449U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1449 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 1449 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"SPI EEPROM Status error\n"); else ;
    }
    
#line 1450 
    __retres = -1;
    
#line 1450 
    goto return_label;
  }
  else ;
  
#line 1453 
  __retres = 0;
  return_label: 
#line 1453 
                return __retres;
}


#line 1460  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c"
static void ixgbe_standby_eeprom(struct ixgbe_hw *hw)
{
  u32 eec;
  
#line 1464 
  eec = ixgbe_read_reg(hw,*(hw->mvals));
  
#line 1467 
  eec |= 2U;
  
#line 1468 
  ixgbe_write_reg(hw,*(hw->mvals),eec);
  
#line 1469 
  ixgbe_read_reg(hw,8U);
  
#line 1470 
  __const_udelay(4295UL);
  
#line 1471 
  eec &= 4294967293U;
  
#line 1472 
  ixgbe_write_reg(hw,*(hw->mvals),eec);
  
#line 1473 
  ixgbe_read_reg(hw,8U);
  
#line 1474 
  __const_udelay(4295UL);
  
#line 1476 
  return;
}


#line 1483  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c"
static void ixgbe_shift_out_eeprom_bits(struct ixgbe_hw *hw, u16 data, u16 count)
{
  u32 eec;
  u32 mask;
  u32 i;
  
#line 1490 
  eec = ixgbe_read_reg(hw,*(hw->mvals));
  
#line 1496 
  mask = (unsigned int)(1 << ((int)count + -1));
  
#line 1498 
  i = 0U;
  
#line 1498 
  goto ldv_55065;
  ldv_55064: 
#line 1499 
  ;
  
#line 1506 
  if (((unsigned int)data & mask) != 0U) 
#line 1507 
                                         eec |= 4U; else 
#line 1509 
                                                         eec &= 4294967291U;
  
#line 1511 
  ixgbe_write_reg(hw,*(hw->mvals),eec);
  
#line 1512 
  ixgbe_read_reg(hw,8U);
  
#line 1514 
  __const_udelay(4295UL);
  
#line 1516 
  ixgbe_raise_eeprom_clk(hw,& eec);
  
#line 1517 
  ixgbe_lower_eeprom_clk(hw,& eec);
  
#line 1523 
  mask >>= 1;
  
#line 1498 
  i += 1U;
  ldv_55065: 
#line 1499 
  ;
  
#line 1498 
  if ((unsigned int)count > i) 
#line 1500 
                               goto ldv_55064; else 
#line 1503 
                                                    goto ldv_55066;
  ldv_55066: 
#line 1504 
  ;
  
#line 1527 
  eec &= 4294967291U;
  
#line 1528 
  ixgbe_write_reg(hw,*(hw->mvals),eec);
  
#line 1529 
  ixgbe_read_reg(hw,8U);
  
#line 1530 
  return;
}


#line 1536  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c"
static u16 ixgbe_shift_in_eeprom_bits(struct ixgbe_hw *hw, u16 count)
{
  u32 eec;
  u32 i;
  
#line 1540 
  u16 data = (unsigned short)0U;
  
#line 1549 
  eec = ixgbe_read_reg(hw,*(hw->mvals));
  
#line 1551 
  eec &= 4294967283U;
  
#line 1553 
  i = 0U;
  
#line 1553 
  goto ldv_55075;
  ldv_55074: 
#line 1554 
  ;
  
#line 1554 
  data = (unsigned short)((int)data << 1U);
  
#line 1555 
  ixgbe_raise_eeprom_clk(hw,& eec);
  
#line 1557 
  eec = ixgbe_read_reg(hw,*(hw->mvals));
  
#line 1559 
  eec &= 4294967291U;
  
#line 1560 
  if ((eec & 8U) != 0U) 
#line 1561 
                        data = (unsigned short)((unsigned int)data | 1U); else ;
  
#line 1563 
  ixgbe_lower_eeprom_clk(hw,& eec);
  
#line 1553 
  i += 1U;
  ldv_55075: 
#line 1554 
  ;
  
#line 1553 
  if ((unsigned int)count > i) 
#line 1555 
                               goto ldv_55074; else 
#line 1558 
                                                    goto ldv_55076;
  ldv_55076: 
#line 1559 
  ;
  
#line 1566 
  return data;
}


#line 1574  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c"
static void ixgbe_raise_eeprom_clk(struct ixgbe_hw *hw, u32 *eec)
{
  
#line 1580 
  *eec |= 1U;
  
#line 1581 
  ixgbe_write_reg(hw,*(hw->mvals),*eec);
  
#line 1582 
  ixgbe_read_reg(hw,8U);
  
#line 1583 
  __const_udelay(4295UL);
  
#line 1585 
  return;
}


#line 1591  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c"
static void ixgbe_lower_eeprom_clk(struct ixgbe_hw *hw, u32 *eec)
{
  
#line 1597 
  *eec &= 4294967294U;
  
#line 1598 
  ixgbe_write_reg(hw,*(hw->mvals),*eec);
  
#line 1599 
  ixgbe_read_reg(hw,8U);
  
#line 1600 
  __const_udelay(4295UL);
  
#line 1602 
  return;
}


#line 1607  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c"
static void ixgbe_release_eeprom(struct ixgbe_hw *hw)
{
  u32 eec;
  
#line 1611 
  eec = ixgbe_read_reg(hw,*(hw->mvals));
  
#line 1613 
  eec |= 2U;
  
#line 1614 
  eec &= 4294967294U;
  
#line 1616 
  ixgbe_write_reg(hw,*(hw->mvals),eec);
  
#line 1617 
  ixgbe_read_reg(hw,8U);
  
#line 1619 
  __const_udelay(4295UL);
  
#line 1622 
  eec &= 4294967231U;
  
#line 1623 
  ixgbe_write_reg(hw,*(hw->mvals),eec);
  
#line 1625 
  (*(hw->mac.ops.release_swfw_sync))(hw,1U);
  
#line 1631 
  usleep_range((unsigned long)(hw->eeprom.semaphore_delay * 1000U),(unsigned long)(hw->eeprom.semaphore_delay * 2000U));
  
#line 1633 
  return;
}


#line 1639  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c"
s32 ixgbe_calc_eeprom_checksum_generic(struct ixgbe_hw *hw)
{
  s32 __retres;
  u16 i;
  u16 j;
  s32 tmp;
  s32 tmp_0;
  s32 tmp_1;
  s32 tmp_2;
  
#line 1643 
  u16 checksum = (unsigned short)0U;
  
#line 1644 
  u16 length = (unsigned short)0U;
  
#line 1645 
  u16 pointer = (unsigned short)0U;
  
#line 1646 
  u16 word = (unsigned short)0U;
  
#line 1649 
  i = (unsigned short)0U;
  
#line 1649 
  goto ldv_55102;
  ldv_55101: 
#line 1650 
  ;
  
#line 1650 
  tmp = (*(hw->eeprom.ops.read))(hw,(unsigned short)((int)i),& word);
  
#line 1650 
  if (tmp != 0) {
    {
      
#line 1651 
      struct _ddebug descriptor = {.modname = "ixgbe", .function = "ixgbe_calc_eeprom_checksum_generic", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c", .format = "EEPROM read failed\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1651U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1651 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 1651 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"EEPROM read failed\n"); else ;
    }
    
#line 1652 
    goto ldv_55100;
  }
  else ;
  
#line 1654 
  checksum = (unsigned short)((int)checksum + (int)word);
  
#line 1649 
  i = (u16)((int)i + 1);
  ldv_55102: 
#line 1650 
  ;
  
#line 1649 
  if ((unsigned int)i <= 62U) 
#line 1651 
                              goto ldv_55101; else 
#line 1654 
                                                   goto ldv_55100;
  ldv_55100: 
#line 1655 
  ;
  
#line 1658 
  i = (unsigned short)3U;
  
#line 1658 
  goto ldv_55111;
  ldv_55110: 
#line 1659 
  ;
  
#line 1659 
  tmp_0 = (*(hw->eeprom.ops.read))(hw,(unsigned short)((int)i),& pointer);
  
#line 1659 
  if (tmp_0 != 0) {
    {
      
#line 1660 
      struct _ddebug descriptor_0 = {.modname = "ixgbe", .function = "ixgbe_calc_eeprom_checksum_generic", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c", .format = "EEPROM read failed\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1660U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1660 
      if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 1660 
                                                            __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"EEPROM read failed\n"); else ;
    }
    
#line 1661 
    __retres = -1;
    
#line 1661 
    goto return_label;
  }
  else ;
  
#line 1665 
  if ((unsigned int)pointer + 65535U > 65533U) 
#line 1666 
                                               goto ldv_55104; else ;
  
#line 1668 
  tmp_1 = (*(hw->eeprom.ops.read))(hw,(unsigned short)((int)pointer),& length);
  
#line 1668 
  if (tmp_1 != 0) {
    {
      
#line 1669 
      struct _ddebug descriptor_1 = {.modname = "ixgbe", .function = "ixgbe_calc_eeprom_checksum_generic", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c", .format = "EEPROM read failed\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1669U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1669 
      if ((long)(((int)descriptor_1.flags & 1) != 0) != 0L) 
#line 1669 
                                                            __dynamic_netdev_dbg(& descriptor_1,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"EEPROM read failed\n"); else ;
    }
    
#line 1670 
    __retres = -1;
    
#line 1670 
    goto return_label;
  }
  else ;
  
#line 1673 
  if ((unsigned int)length + 65535U > 65533U) 
#line 1674 
                                              goto ldv_55104; else ;
  
#line 1676 
  j = (unsigned short)((unsigned int)pointer + 1U);
  
#line 1676 
  goto ldv_55108;
  ldv_55107: 
#line 1677 
  ;
  
#line 1677 
  tmp_2 = (*(hw->eeprom.ops.read))(hw,(unsigned short)((int)j),& word);
  
#line 1677 
  if (tmp_2 != 0) {
    {
      
#line 1678 
      struct _ddebug descriptor_2 = {.modname = "ixgbe", .function = "ixgbe_calc_eeprom_checksum_generic", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c", .format = "EEPROM read failed\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1678U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1678 
      if ((long)(((int)descriptor_2.flags & 1) != 0) != 0L) 
#line 1678 
                                                            __dynamic_netdev_dbg(& descriptor_2,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"EEPROM read failed\n"); else ;
    }
    
#line 1679 
    __retres = -1;
    
#line 1679 
    goto return_label;
  }
  else ;
  
#line 1681 
  checksum = (unsigned short)((int)checksum + (int)word);
  
#line 1676 
  j = (u16)((int)j + 1);
  ldv_55108: 
#line 1677 
  ;
  
#line 1676 
  if ((int)j <= (int)pointer + (int)length) 
#line 1678 
                                            goto ldv_55107; else 
#line 1681 
                                                                 goto ldv_55109;
  ldv_55109: 
#line 1682 
  ;
  ldv_55104: 
#line 1683 
  ;
  
#line 1658 
  i = (u16)((int)i + 1);
  ldv_55111: 
#line 1659 
  ;
  
#line 1658 
  if ((unsigned int)i <= 14U) 
#line 1660 
                              goto ldv_55110; else 
#line 1663 
                                                   goto ldv_55112;
  ldv_55112: 
#line 1664 
  ;
  
#line 1685 
  checksum = (unsigned short)(47802U - (unsigned int)checksum);
  
#line 1687 
  __retres = (int)checksum;
  return_label: 
#line 1687 
                return __retres;
}


#line 1698  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c"
s32 ixgbe_validate_eeprom_checksum_generic(struct ixgbe_hw *hw, u16 *checksum_val)
{
  s32 __retres;
  s32 status;
  u16 checksum;
  
#line 1703 
  u16 read_checksum = (unsigned short)0U;
  
#line 1710 
  status = (*(hw->eeprom.ops.read))(hw,(unsigned short)0,& checksum);
  
#line 1711 
  if (status != 0) {
    {
      
#line 1712 
      struct _ddebug descriptor = {.modname = "ixgbe", .function = "ixgbe_validate_eeprom_checksum_generic", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c", .format = "EEPROM read failed\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1712U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1712 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 1712 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"EEPROM read failed\n"); else ;
    }
    
#line 1713 
    __retres = status;
    
#line 1713 
    goto return_label;
  }
  else ;
  
#line 1716 
  status = (*(hw->eeprom.ops.calc_checksum))(hw);
  
#line 1717 
  if (status < 0) {
    
#line 1718 
    __retres = status;
    
#line 1718 
    goto return_label;
  }
  else ;
  
#line 1720 
  checksum = (unsigned short)status;
  
#line 1722 
  status = (*(hw->eeprom.ops.read))(hw,(unsigned short)63,& read_checksum);
  
#line 1723 
  if (status != 0) {
    {
      
#line 1724 
      struct _ddebug descriptor_0 = {.modname = "ixgbe", .function = "ixgbe_validate_eeprom_checksum_generic", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c", .format = "EEPROM read failed\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1724U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1724 
      if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 1724 
                                                            __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"EEPROM read failed\n"); else ;
    }
    
#line 1725 
    __retres = status;
    
#line 1725 
    goto return_label;
  }
  else ;
  
#line 1731 
  if ((int)read_checksum != (int)checksum) 
#line 1732 
                                           status = -2; else ;
  
#line 1735 
  if (checksum_val != (u16 *)0U) 
#line 1736 
                                 *checksum_val = checksum; else ;
  
#line 1738 
  __retres = status;
  return_label: 
#line 1738 
                return __retres;
}


#line 1745  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c"
s32 ixgbe_update_eeprom_checksum_generic(struct ixgbe_hw *hw)
{
  s32 __retres;
  s32 status;
  u16 checksum;
  
#line 1755 
  status = (*(hw->eeprom.ops.read))(hw,(unsigned short)0,& checksum);
  
#line 1756 
  if (status != 0) {
    {
      
#line 1757 
      struct _ddebug descriptor = {.modname = "ixgbe", .function = "ixgbe_update_eeprom_checksum_generic", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c", .format = "EEPROM read failed\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1757U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1757 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 1757 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"EEPROM read failed\n"); else ;
    }
    
#line 1758 
    __retres = status;
    
#line 1758 
    goto return_label;
  }
  else ;
  
#line 1761 
  status = (*(hw->eeprom.ops.calc_checksum))(hw);
  
#line 1762 
  if (status < 0) {
    
#line 1763 
    __retres = status;
    
#line 1763 
    goto return_label;
  }
  else ;
  
#line 1765 
  checksum = (unsigned short)status;
  
#line 1767 
  status = (*(hw->eeprom.ops.write))(hw,(unsigned short)63,(unsigned short)((int)checksum));
  
#line 1769 
  __retres = status;
  return_label: 
#line 1769 
                return __retres;
}


#line 1782  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c"
s32 ixgbe_set_rar_generic(struct ixgbe_hw *hw, u32 index, u8 *addr, u32 vmdq, u32 enable_addr)
{
  s32 __retres;
  u32 rar_low;
  u32 rar_high;
  u32 tmp;
  u32 tmp_0;
  u32 tmp_1;
  
#line 1786 
  u32 rar_entries = hw->mac.num_rar_entries;
  
#line 1789 
  if (index >= rar_entries) {
    {
      
#line 1790 
      struct _ddebug descriptor = {.modname = "ixgbe", .function = "ixgbe_set_rar_generic", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c", .format = "RAR index %d is out of range.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1790U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1790 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 1790 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"RAR index %d is out of range.\n",index); else ;
    }
    
#line 1791 
    __retres = -32;
    
#line 1791 
    goto return_label;
  }
  else ;
  
#line 1795 
  (*(hw->mac.ops.set_vmdq))(hw,index,vmdq);
  
#line 1801 
  rar_low = (((unsigned int)*addr | ((unsigned int)*(addr + 1U) << 8)) | ((unsigned int)*(addr + 2U) << 16)) | ((unsigned int)*(addr + 3U) << 24);
  
#line 1810 
  if (index <= 15U) 
#line 1810 
                    tmp = index * 8U + 21508U; else 
#line 1810 
                                                    tmp = index * 8U + 41476U;
  
#line 1810 
  ;
  
#line 1810 
  rar_high = ixgbe_read_reg(hw,tmp);
  
#line 1811 
  rar_high &= 2147418112U;
  
#line 1812 
  rar_high = ((unsigned int)*(addr + 4U) | ((unsigned int)*(addr + 5U) << 8)) | rar_high;
  
#line 1814 
  if (enable_addr != 0U) 
#line 1815 
                         rar_high |= 2147483648U; else ;
  
#line 1817 
  ;
  
#line 1817 
  if (index <= 15U) 
#line 1817 
                    tmp_0 = (index + 2688U) * 8U; else 
#line 1817 
                                                       tmp_0 = (index + 5184U) * 8U;
  
#line 1817 
  ;
  
#line 1817 
  ixgbe_write_reg(hw,tmp_0,rar_low);
  
#line 1818 
  ;
  
#line 1818 
  if (index <= 15U) 
#line 1818 
                    tmp_1 = index * 8U + 21508U; else 
#line 1818 
                                                      tmp_1 = index * 8U + 41476U;
  
#line 1818 
  ;
  
#line 1818 
  ixgbe_write_reg(hw,tmp_1,rar_high);
  
#line 1820 
  __retres = 0;
  return_label: 
#line 1820 
                return __retres;
}


#line 1830  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c"
s32 ixgbe_clear_rar_generic(struct ixgbe_hw *hw, u32 index)
{
  s32 __retres;
  u32 rar_high;
  u32 tmp;
  u32 tmp_0;
  u32 tmp_1;
  
#line 1833 
  u32 rar_entries = hw->mac.num_rar_entries;
  
#line 1836 
  if (index >= rar_entries) {
    {
      
#line 1837 
      struct _ddebug descriptor = {.modname = "ixgbe", .function = "ixgbe_clear_rar_generic", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c", .format = "RAR index %d is out of range.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1837U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1837 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 1837 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"RAR index %d is out of range.\n",index); else ;
    }
    
#line 1838 
    __retres = -32;
    
#line 1838 
    goto return_label;
  }
  else ;
  
#line 1846 
  if (index <= 15U) 
#line 1846 
                    tmp = index * 8U + 21508U; else 
#line 1846 
                                                    tmp = index * 8U + 41476U;
  
#line 1846 
  ;
  
#line 1846 
  rar_high = ixgbe_read_reg(hw,tmp);
  
#line 1847 
  rar_high &= 2147418112U;
  
#line 1849 
  if (index <= 15U) 
#line 1849 
                    tmp_0 = (index + 2688U) * 8U; else 
#line 1849 
                                                       tmp_0 = (index + 5184U) * 8U;
  
#line 1849 
  ;
  
#line 1849 
  ixgbe_write_reg(hw,tmp_0,0U);
  
#line 1850 
  ;
  
#line 1850 
  if (index <= 15U) 
#line 1850 
                    tmp_1 = index * 8U + 21508U; else 
#line 1850 
                                                      tmp_1 = index * 8U + 41476U;
  
#line 1850 
  ;
  
#line 1850 
  ixgbe_write_reg(hw,tmp_1,rar_high);
  
#line 1853 
  (*(hw->mac.ops.clear_vmdq))(hw,index,4294967295U);
  
#line 1855 
  __retres = 0;
  return_label: 
#line 1855 
                return __retres;
}


#line 1866  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c"
s32 ixgbe_init_rx_addrs_generic(struct ixgbe_hw *hw)
{
  s32 __retres;
  u32 i;
  int tmp_0;
  bool tmp;
  u32 tmp_1;
  u32 tmp_2;
  
#line 1869 
  u32 rar_entries = hw->mac.num_rar_entries;
  
#line 1876 
  tmp = is_valid_ether_addr((u8 const *)(& hw->mac.addr));
  
#line 1876 
  if (tmp) 
#line 1876 
           tmp_0 = 0; else 
#line 1876 
                           tmp_0 = 1;
  
#line 1876 
  if (tmp_0) {
    
#line 1878 
    (*(hw->mac.ops.get_mac_addr))(hw,(u8 *)(& hw->mac.addr));
    {
      
#line 1880 
      struct _ddebug descriptor = {.modname = "ixgbe", .function = "ixgbe_init_rx_addrs_generic", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c", .format = " Keeping Current RAR0 Addr =%pM\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1880U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1880 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 1880 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev," Keeping Current RAR0 Addr =%pM\n",(u8 *)(& hw->mac.addr)); else ;
    }
  }
  else {
    {
      
#line 1883 
      struct _ddebug descriptor_0 = {.modname = "ixgbe", .function = "ixgbe_init_rx_addrs_generic", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c", .format = "Overriding MAC Address in RAR[0]\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1883U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1883 
      if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 1883 
                                                            __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"Overriding MAC Address in RAR[0]\n"); else ;
    }
    {
      
#line 1884 
      struct _ddebug descriptor_1 = {.modname = "ixgbe", .function = "ixgbe_init_rx_addrs_generic", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c", .format = " New MAC Addr =%pM\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1884U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1884 
      if ((long)(((int)descriptor_1.flags & 1) != 0) != 0L) 
#line 1884 
                                                            __dynamic_netdev_dbg(& descriptor_1,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev," New MAC Addr =%pM\n",(u8 *)(& hw->mac.addr)); else ;
    }
    
#line 1886 
    (*(hw->mac.ops.set_rar))(hw,0U,(u8 *)(& hw->mac.addr),0U,2147483648U);
    
#line 1889 
    (*(hw->mac.ops.clear_vmdq))(hw,0U,4294967295U);
  }
  
#line 1891 
  hw->addr_ctrl.overflow_promisc = 0U;
  
#line 1893 
  hw->addr_ctrl.rar_used_count = 1U;
  {
    
#line 1896 
    struct _ddebug descriptor_2 = {.modname = "ixgbe", .function = "ixgbe_init_rx_addrs_generic", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c", .format = "Clearing RAR[1-%d]\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1896U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 1896 
    if ((long)(((int)descriptor_2.flags & 1) != 0) != 0L) 
#line 1896 
                                                          __dynamic_netdev_dbg(& descriptor_2,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"Clearing RAR[1-%d]\n",rar_entries + 4294967295U); else ;
  }
  
#line 1897 
  i = 1U;
  
#line 1897 
  goto ldv_55161;
  ldv_55160: 
#line 1898 
  ;
  
#line 1898 
  if (i <= 15U) 
#line 1898 
                tmp_1 = (i + 2688U) * 8U; else 
#line 1898 
                                               tmp_1 = (i + 5184U) * 8U;
  
#line 1898 
  ;
  
#line 1898 
  ixgbe_write_reg(hw,tmp_1,0U);
  
#line 1899 
  if (i <= 15U) 
#line 1899 
                tmp_2 = i * 8U + 21508U; else 
#line 1899 
                                              tmp_2 = i * 8U + 41476U;
  
#line 1899 
  ;
  
#line 1899 
  ixgbe_write_reg(hw,tmp_2,0U);
  
#line 1897 
  i += 1U;
  ldv_55161: 
#line 1898 
  ;
  
#line 1897 
  if (i < rar_entries) 
#line 1899 
                       goto ldv_55160; else 
#line 1902 
                                            goto ldv_55162;
  ldv_55162: 
#line 1903 
  ;
  
#line 1903 
  hw->addr_ctrl.mta_in_use = 0U;
  
#line 1904 
  ixgbe_write_reg(hw,20624U,(unsigned int)hw->mac.mc_filter_type);
  {
    
#line 1906 
    struct _ddebug descriptor_3 = {.modname = "ixgbe", .function = "ixgbe_init_rx_addrs_generic", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c", .format = " Clearing MTA\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1906U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 1906 
    if ((long)(((int)descriptor_3.flags & 1) != 0) != 0L) 
#line 1906 
                                                          __dynamic_netdev_dbg(& descriptor_3,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev," Clearing MTA\n"); else ;
  }
  
#line 1907 
  i = 0U;
  
#line 1907 
  goto ldv_55165;
  ldv_55164: 
#line 1908 
  ;
  
#line 1908 
  ixgbe_write_reg(hw,(i + 5248U) * 4U,0U);
  
#line 1907 
  i += 1U;
  ldv_55165: 
#line 1908 
  ;
  
#line 1907 
  if (hw->mac.mcft_size > i) 
#line 1909 
                             goto ldv_55164; else 
#line 1912 
                                                  goto ldv_55166;
  ldv_55166: 
#line 1913 
  ;
  
#line 1910 
  if (hw->mac.ops.init_uta_tables != (s32 (*)(struct ixgbe_hw *))0) 
#line 1911 
                                                                    (*(hw->mac.ops.init_uta_tables))(hw); else ;
  
#line 1913 
  __retres = 0;
  
#line 1913 
  return __retres;
}


#line 1928  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c"
static s32 ixgbe_mta_vector(struct ixgbe_hw *hw, u8 *mc_addr)
{
  s32 __retres;
  
#line 1930 
  u32 vector = 0U;
  
#line 1932 
  switch (hw->mac.mc_filter_type) {
    case 0: 
#line 1933 
    ;
    
#line 1934 
    vector = (unsigned int)(((int)*(mc_addr + 4U) >> 4) | ((int)*(mc_addr + 5U) << 4));
    
#line 1935 
    goto ldv_55173;
    case 1: 
#line 1936 
    ;
    
#line 1937 
    vector = (unsigned int)(((int)*(mc_addr + 4U) >> 3) | ((int)*(mc_addr + 5U) << 5));
    
#line 1938 
    goto ldv_55173;
    case 2: 
#line 1939 
    ;
    
#line 1940 
    vector = (unsigned int)(((int)*(mc_addr + 4U) >> 2) | ((int)*(mc_addr + 5U) << 6));
    
#line 1941 
    goto ldv_55173;
    case 3: 
#line 1942 
    ;
    
#line 1943 
    vector = (unsigned int)((int)*(mc_addr + 4U) | ((int)*(mc_addr + 5U) << 8));
    
#line 1944 
    goto ldv_55173;
    default: 
#line 1945 
    ;
    {
      
#line 1946 
      struct _ddebug descriptor = {.modname = "ixgbe", .function = "ixgbe_mta_vector", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c", .format = "MC filter type param set incorrectly\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1946U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1946 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 1946 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"MC filter type param set incorrectly\n"); else ;
    }
    
#line 1947 
    goto ldv_55173;
  }
  ldv_55173: 
#line 1951 
  ;
  
#line 1951 
  vector &= 4095U;
  
#line 1952 
  __retres = (int)vector;
  
#line 1952 
  return __retres;
}


#line 1962  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c"
static void ixgbe_set_mta(struct ixgbe_hw *hw, u8 *mc_addr)
{
  u32 vector;
  u32 vector_bit;
  u32 vector_reg;
  s32 tmp;
  
#line 1968 
  hw->addr_ctrl.mta_in_use += 1U;
  
#line 1970 
  tmp = ixgbe_mta_vector(hw,mc_addr);
  
#line 1970 
  vector = (unsigned int)tmp;
  {
    
#line 1971 
    struct _ddebug descriptor = {.modname = "ixgbe", .function = "ixgbe_set_mta", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c", .format = " bit-vector = 0x%03X\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1971U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 1971 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 1971 
                                                        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev," bit-vector = 0x%03X\n",vector); else ;
  }
  
#line 1982 
  vector_reg = (vector >> 5) & 127U;
  
#line 1983 
  vector_bit = vector & 31U;
  
#line 1984 
  hw->mac.mta_shadow[vector_reg] |= (unsigned int)(1 << vector_bit);
  
#line 1985 
  return;
}


#line 1997  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c"
s32 ixgbe_update_mc_addr_list_generic(struct ixgbe_hw *hw, struct net_device *netdev)
{
  s32 __retres;
  struct netdev_hw_addr *ha;
  u32 i;
  struct netdev_hw_addr *tmp;
  struct netdev_hw_addr *tmp_0;
  
#line 2007 
  hw->addr_ctrl.num_mc_addrs = (unsigned int)netdev->mc.count;
  
#line 2008 
  hw->addr_ctrl.mta_in_use = 0U;
  {
    
#line 2011 
    struct _ddebug descriptor = {.modname = "ixgbe", .function = "ixgbe_update_mc_addr_list_generic", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c", .format = " Clearing MTA\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))2011U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 2011 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 2011 
                                                        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev," Clearing MTA\n"); else ;
  }
  
#line 2012 
  memset((void *)(& hw->mac.mta_shadow),0,512UL);
  {
    
#line 2015 
    struct list_head const *__mptr = (struct list_head const *)netdev->mc.list.next;
    
#line 2015 
    tmp = (struct netdev_hw_addr *)__mptr;
  }
  
#line 2015 
  ha = tmp;
  
#line 2015 
  goto ldv_55203;
  ldv_55202: 
#line 2016 
  ;
  {
    
#line 2016 
    struct _ddebug descriptor_0 = {.modname = "ixgbe", .function = "ixgbe_update_mc_addr_list_generic", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c", .format = " Adding the multicast addresses:\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))2016U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 2016 
    if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 2016 
                                                          __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev," Adding the multicast addresses:\n"); else ;
  }
  
#line 2017 
  ixgbe_set_mta(hw,(u8 *)(& ha->addr));
  {
    
#line 2015 
    struct list_head const *__mptr_0 = (struct list_head const *)ha->list.next;
    
#line 2015 
    tmp_0 = (struct netdev_hw_addr *)__mptr_0;
  }
  
#line 2015 
  ha = tmp_0;
  ldv_55203: 
#line 2017 
  ;
  
#line 2015 
  if (& ha->list != & netdev->mc.list) 
#line 2017 
                                       goto ldv_55202; else 
#line 2020 
                                                            goto ldv_55204;
  ldv_55204: 
#line 2021 
  ;
  
#line 2021 
  i = 0U;
  
#line 2021 
  goto ldv_55206;
  ldv_55205: 
#line 2022 
  ;
  
#line 2022 
  ixgbe_write_reg(hw,(i << 2) + 20992U,hw->mac.mta_shadow[i]);
  
#line 2021 
  i += 1U;
  ldv_55206: 
#line 2022 
  ;
  
#line 2021 
  if (hw->mac.mcft_size > i) 
#line 2023 
                             goto ldv_55205; else 
#line 2026 
                                                  goto ldv_55207;
  ldv_55207: 
#line 2027 
  ;
  
#line 2025 
  if (hw->addr_ctrl.mta_in_use != 0U) 
#line 2026 
                                      ixgbe_write_reg(hw,20624U,(unsigned int)(hw->mac.mc_filter_type | 4)); else ;
  {
    
#line 2029 
    struct _ddebug descriptor_1 = {.modname = "ixgbe", .function = "ixgbe_update_mc_addr_list_generic", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c", .format = "ixgbe_update_mc_addr_list_generic Complete\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))2029U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 2029 
    if ((long)(((int)descriptor_1.flags & 1) != 0) != 0L) 
#line 2029 
                                                          __dynamic_netdev_dbg(& descriptor_1,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"ixgbe_update_mc_addr_list_generic Complete\n"); else ;
  }
  
#line 2030 
  __retres = 0;
  
#line 2030 
  return __retres;
}


#line 2039  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c"
s32 ixgbe_enable_mc_generic(struct ixgbe_hw *hw)
{
  s32 __retres;
  
#line 2041 
  struct ixgbe_addr_filter_info *a = & hw->addr_ctrl;
  
#line 2043 
  if (a->mta_in_use != 0U) 
#line 2044 
                           ixgbe_write_reg(hw,20624U,(unsigned int)(hw->mac.mc_filter_type | 4)); else ;
  
#line 2047 
  __retres = 0;
  
#line 2047 
  return __retres;
}


#line 2056  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c"
s32 ixgbe_disable_mc_generic(struct ixgbe_hw *hw)
{
  s32 __retres;
  
#line 2058 
  struct ixgbe_addr_filter_info *a = & hw->addr_ctrl;
  
#line 2060 
  if (a->mta_in_use != 0U) 
#line 2061 
                           ixgbe_write_reg(hw,20624U,(unsigned int)hw->mac.mc_filter_type); else ;
  
#line 2063 
  __retres = 0;
  
#line 2063 
  return __retres;
}


#line 2072  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c"
s32 ixgbe_fc_enable_generic(struct ixgbe_hw *hw)
{
  s32 __retres;
  u32 mflcn_reg;
  u32 fccfg_reg;
  u32 reg;
  u32 fcrtl;
  u32 fcrth;
  int i;
  
#line 2080 
  if ((unsigned int)hw->fc.pause_time == 0U) {
    
#line 2081 
    __retres = -13;
    
#line 2081 
    goto return_label;
  }
  else ;
  
#line 2084 
  i = 0;
  
#line 2084 
  goto ldv_55229;
  ldv_55228: 
#line 2085 
  ;
  
#line 2085 
  if (((unsigned int)hw->fc.current_mode & 2U) != 0U && hw->fc.high_water[i] != 0U) {
    
#line 2087 
    if (hw->fc.low_water[i] == 0U || hw->fc.low_water[i] >= hw->fc.high_water[i]) {
      {
        
#line 2089 
        struct _ddebug descriptor = {.modname = "ixgbe", .function = "ixgbe_fc_enable_generic", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c", .format = "Invalid water mark configuration\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))2089U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
        
#line 2089 
        if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 2089 
                                                            __dynamic_netdev_dbg(& descriptor,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"Invalid water mark configuration\n"); else ;
      }
      
#line 2090 
      __retres = -13;
      
#line 2090 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 2084 
  i += 1;
  ldv_55229: 
#line 2085 
  ;
  
#line 2084 
  if (i <= 7) 
#line 2086 
              goto ldv_55228; else 
#line 2089 
                                   goto ldv_55230;
  ldv_55230: 
#line 2090 
  ;
  
#line 2096 
  ixgbe_fc_autoneg(hw);
  
#line 2099 
  mflcn_reg = ixgbe_read_reg(hw,17044U);
  
#line 2100 
  mflcn_reg &= 4294963203U;
  
#line 2102 
  fccfg_reg = ixgbe_read_reg(hw,15616U);
  
#line 2103 
  fccfg_reg &= 4294967271U;
  
#line 2115 
  switch ((unsigned int)hw->fc.current_mode) {
    case (unsigned int)0: 
#line 2116 
    ;
    
#line 2121 
    goto ldv_55232;
    case (unsigned int)1: 
#line 2122 
    ;
    
#line 2131 
    mflcn_reg |= 8U;
    
#line 2132 
    goto ldv_55232;
    case (unsigned int)2: 
#line 2133 
    ;
    
#line 2138 
    fccfg_reg |= 8U;
    
#line 2139 
    goto ldv_55232;
    case (unsigned int)3: 
#line 2140 
    ;
    
#line 2142 
    mflcn_reg |= 8U;
    
#line 2143 
    fccfg_reg |= 8U;
    
#line 2144 
    goto ldv_55232;
    default: 
#line 2145 
    ;
    {
      
#line 2146 
      struct _ddebug descriptor_0 = {.modname = "ixgbe", .function = "ixgbe_fc_enable_generic", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c", .format = "Flow control param set incorrectly\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))2146U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 2146 
      if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 2146 
                                                            __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"Flow control param set incorrectly\n"); else ;
    }
    
#line 2147 
    __retres = -4;
    
#line 2147 
    goto return_label;
  }
  ldv_55232: 
#line 2151 
  ;
  
#line 2151 
  mflcn_reg |= 2U;
  
#line 2152 
  ixgbe_write_reg(hw,17044U,mflcn_reg);
  
#line 2153 
  ixgbe_write_reg(hw,15616U,fccfg_reg);
  
#line 2156 
  i = 0;
  
#line 2156 
  goto ldv_55239;
  ldv_55238: 
#line 2157 
  ;
  
#line 2157 
  if (((unsigned int)hw->fc.current_mode & 2U) != 0U && hw->fc.high_water[i] != 0U) {
    
#line 2159 
    fcrtl = (hw->fc.low_water[i] << 10) | 2147483648U;
    
#line 2160 
    ixgbe_write_reg(hw,(unsigned int)((i + 3208) * 4),fcrtl);
    
#line 2161 
    fcrth = (hw->fc.high_water[i] << 10) | 2147483648U;
  }
  else {
    u32 tmp;
    
#line 2163 
    ixgbe_write_reg(hw,(unsigned int)((i + 3208) * 4),0U);
    
#line 2170 
    tmp = ixgbe_read_reg(hw,(unsigned int)((i + 3840) * 4));
    
#line 2170 
    fcrth = tmp + 4294967264U;
  }
  
#line 2173 
  ixgbe_write_reg(hw,(unsigned int)((i + 3224) * 4),fcrth);
  
#line 2156 
  i += 1;
  ldv_55239: 
#line 2157 
  ;
  
#line 2156 
  if (i <= 7) 
#line 2158 
              goto ldv_55238; else 
#line 2161 
                                   goto ldv_55240;
  ldv_55240: 
#line 2162 
  ;
  
#line 2177 
  reg = (unsigned int)((int)hw->fc.pause_time * 65537);
  
#line 2178 
  i = 0;
  
#line 2178 
  goto ldv_55242;
  ldv_55241: 
#line 2179 
  ;
  
#line 2179 
  ixgbe_write_reg(hw,(unsigned int)((i + 3200) * 4),reg);
  
#line 2178 
  i += 1;
  ldv_55242: 
#line 2179 
  ;
  
#line 2178 
  if (i <= 3) 
#line 2180 
              goto ldv_55241; else 
#line 2183 
                                   goto ldv_55243;
  ldv_55243: 
#line 2184 
  ;
  
#line 2181 
  ixgbe_write_reg(hw,12960U,(unsigned int)hw->fc.pause_time / 2U);
  
#line 2183 
  __retres = 0;
  return_label: 
#line 2183 
                return __retres;
}


#line 2199  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c"
static s32 ixgbe_negotiate_fc(struct ixgbe_hw *hw, u32 adv_reg, u32 lp_reg, u32 adv_sym, u32 adv_asm, u32 lp_sym, u32 lp_asm)
{
  s32 __retres;
  
#line 2202 
  if (adv_reg == 0U || lp_reg == 0U) {
    
#line 2203 
    __retres = -27;
    
#line 2203 
    goto return_label;
  }
  else ;
  
#line 2205 
  if ((adv_reg & adv_sym) != 0U && (lp_reg & lp_sym) != 0U) 
    
#line 2213 
    if (hw->fc.requested_mode == (unsigned int)ixgbe_fc_full) {
      
#line 2214 
      hw->fc.current_mode = ixgbe_fc_full;
      {
        
#line 2215 
        struct _ddebug descriptor = {.modname = "ixgbe", .function = "ixgbe_negotiate_fc", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c", .format = "Flow Control = FULL.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))2215U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
        
#line 2215 
        if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 2215 
                                                            __dynamic_netdev_dbg(& descriptor,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"Flow Control = FULL.\n"); else ;
      }
    }
    else {
      
#line 2217 
      hw->fc.current_mode = ixgbe_fc_rx_pause;
      {
        
#line 2218 
        struct _ddebug descriptor_0 = {.modname = "ixgbe", .function = "ixgbe_negotiate_fc", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c", .format = "Flow Control=RX PAUSE frames only\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))2218U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
        
#line 2218 
        if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 2218 
                                                              __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"Flow Control=RX PAUSE frames only\n"); else ;
      }
    }
  else 
    
#line 2220 
    if ((((adv_reg & adv_sym) == 0U && (adv_reg & adv_asm) != 0U) && (lp_reg & lp_sym) != 0U) && (lp_reg & lp_asm) != 0U) {
      
#line 2222 
      hw->fc.current_mode = ixgbe_fc_tx_pause;
      {
        
#line 2223 
        struct _ddebug descriptor_1 = {.modname = "ixgbe", .function = "ixgbe_negotiate_fc", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c", .format = "Flow Control = TX PAUSE frames only.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))2223U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
        
#line 2223 
        if ((long)(((int)descriptor_1.flags & 1) != 0) != 0L) 
#line 2223 
                                                              __dynamic_netdev_dbg(& descriptor_1,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"Flow Control = TX PAUSE frames only.\n"); else ;
      }
    }
    else 
      
#line 2224 
      if ((((adv_reg & adv_sym) != 0U && (adv_reg & adv_asm) != 0U) && (lp_reg & lp_sym) == 0U) && (lp_reg & lp_asm) != 0U) {
        
#line 2226 
        hw->fc.current_mode = ixgbe_fc_rx_pause;
        {
          
#line 2227 
          struct _ddebug descriptor_2 = {.modname = "ixgbe", .function = "ixgbe_negotiate_fc", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c", .format = "Flow Control = RX PAUSE frames only.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))2227U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
          
#line 2227 
          if ((long)(((int)descriptor_2.flags & 1) != 0) != 0L) 
#line 2227 
                                                                __dynamic_netdev_dbg(& descriptor_2,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"Flow Control = RX PAUSE frames only.\n"); else ;
        }
      }
      else {
        
#line 2229 
        hw->fc.current_mode = ixgbe_fc_none;
        {
          
#line 2230 
          struct _ddebug descriptor_3 = {.modname = "ixgbe", .function = "ixgbe_negotiate_fc", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c", .format = "Flow Control = NONE.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))2230U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
          
#line 2230 
          if ((long)(((int)descriptor_3.flags & 1) != 0) != 0L) 
#line 2230 
                                                                __dynamic_netdev_dbg(& descriptor_3,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"Flow Control = NONE.\n"); else ;
        }
      }
  
#line 2232 
  __retres = 0;
  return_label: 
#line 2232 
                return __retres;
}


#line 2241  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c"
static s32 ixgbe_fc_autoneg_fiber(struct ixgbe_hw *hw)
{
  s32 __retres;
  u32 pcs_anadv_reg;
  u32 pcs_lpab_reg;
  u32 linkstat;
  s32 ret_val;
  
#line 2252 
  linkstat = ixgbe_read_reg(hw,16908U);
  
#line 2253 
  if ((linkstat & 65536U) == 0U || (int)(linkstat >> 18) & 1) {
    
#line 2255 
    __retres = -27;
    
#line 2255 
    goto return_label;
  }
  else ;
  
#line 2257 
  pcs_anadv_reg = ixgbe_read_reg(hw,16920U);
  
#line 2258 
  pcs_lpab_reg = ixgbe_read_reg(hw,16924U);
  
#line 2260 
  ret_val = ixgbe_negotiate_fc(hw,pcs_anadv_reg,pcs_lpab_reg,128U,256U,128U,256U);
  
#line 2266 
  __retres = ret_val;
  return_label: 
#line 2266 
                return __retres;
}


#line 2275  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c"
static s32 ixgbe_fc_autoneg_backplane(struct ixgbe_hw *hw)
{
  s32 __retres;
  u32 links2;
  u32 anlp1_reg;
  u32 autoc_reg;
  u32 links;
  s32 ret_val;
  
#line 2285 
  links = ixgbe_read_reg(hw,17060U);
  
#line 2286 
  if (links >= (u32)0) {
    
#line 2287 
    __retres = -27;
    
#line 2287 
    goto return_label;
  }
  else ;
  
#line 2289 
  if (hw->mac.type == (unsigned int)ixgbe_mac_82599EB) {
    
#line 2290 
    links2 = ixgbe_read_reg(hw,17188U);
    
#line 2291 
    if ((links2 & 64U) == 0U) {
      
#line 2292 
      __retres = -27;
      
#line 2292 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 2298 
  autoc_reg = ixgbe_read_reg(hw,17056U);
  
#line 2299 
  anlp1_reg = ixgbe_read_reg(hw,17072U);
  
#line 2301 
  ret_val = ixgbe_negotiate_fc(hw,autoc_reg,anlp1_reg,268435456U,536870912U,1024U,2048U);
  
#line 2305 
  __retres = ret_val;
  return_label: 
#line 2305 
                return __retres;
}


#line 2314  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c"
static s32 ixgbe_fc_autoneg_copper(struct ixgbe_hw *hw)
{
  s32 tmp;
  
#line 2316 
  u16 technology_ability_reg = (unsigned short)0U;
  
#line 2317 
  u16 lp_technology_ability_reg = (unsigned short)0U;
  
#line 2319 
  (*(hw->phy.ops.read_reg))(hw,16U,7U,& technology_ability_reg);
  
#line 2322 
  (*(hw->phy.ops.read_reg))(hw,19U,7U,& lp_technology_ability_reg);
  
#line 2326 
  tmp = ixgbe_negotiate_fc(hw,(unsigned int)technology_ability_reg,(unsigned int)lp_technology_ability_reg,1024U,2048U,1024U,2048U);
  
#line 2326 
  return tmp;
}


#line 2339  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c"
void ixgbe_fc_autoneg(struct ixgbe_hw *hw)
{
  ixgbe_link_speed speed;
  bool link_up;
  
#line 2341 
  s32 ret_val = -27;
  
#line 2354 
  if ((int)hw->fc.disable_fc_autoneg != 0) 
#line 2355 
                                           goto out; else ;
  
#line 2357 
  (*(hw->mac.ops.check_link))(hw,& speed,& link_up,(_Bool)0);
  
#line 2358 
  if (! link_up) 
#line 2359 
                 goto out; else ;
  
#line 2361 
  switch ((unsigned int)hw->phy.media_type) {
    bool tmp;
    case (unsigned int)1: 
#line 2363 
    ;
    
#line 2364 
    if (speed == 32U) 
#line 2365 
                      ret_val = ixgbe_fc_autoneg_fiber(hw); else ;
    
#line 2366 
    goto ldv_55287;
    case (unsigned int)5: 
#line 2369 
    ;
    
#line 2370 
    ret_val = ixgbe_fc_autoneg_backplane(hw);
    
#line 2371 
    goto ldv_55287;
    case (unsigned int)4: 
#line 2374 
    ;
    
#line 2375 
    tmp = ixgbe_device_supports_autoneg_fc(hw);
    
#line 2375 
    if ((int)tmp != 0) 
#line 2376 
                       ret_val = ixgbe_fc_autoneg_copper(hw); else ;
    
#line 2377 
    goto ldv_55287;
    default: 
#line 2379 
    ;
    
#line 2380 
    goto ldv_55287;
  }
  ldv_55287: 
#line 2383 
  ;
  out: 
#line 2383 
  ;
  
#line 2384 
  if (ret_val == 0) 
#line 2385 
                    hw->fc.fc_was_autonegged = (_Bool)1;
  else {
    
#line 2387 
    hw->fc.fc_was_autonegged = (_Bool)0;
    
#line 2388 
    hw->fc.current_mode = hw->fc.requested_mode;
  }
  
#line 2390 
  return;
}


#line 2402  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c"
static u32 ixgbe_pcie_timeout_poll(struct ixgbe_hw *hw)
{
  u32 __retres;
  s16 devctl2;
  u32 pollcnt;
  u16 tmp;
  
#line 2407 
  tmp = ixgbe_read_pci_cfg_word(hw,200U);
  
#line 2407 
  devctl2 = (short)tmp;
  
#line 2408 
  devctl2 = (short)((int)devctl2 & 15);
  
#line 2410 
  switch ((int)devctl2) {
    case 6: 
#line 2411 
    ;
    
#line 2412 
    pollcnt = 1300U;
    
#line 2413 
    goto ldv_55297;
    case 9: 
#line 2414 
    ;
    
#line 2415 
    pollcnt = 5200U;
    
#line 2416 
    goto ldv_55297;
    case 10: 
#line 2417 
    ;
    
#line 2418 
    pollcnt = 20000U;
    
#line 2419 
    goto ldv_55297;
    case 13: 
#line 2420 
    ;
    
#line 2421 
    pollcnt = 80000U;
    
#line 2422 
    goto ldv_55297;
    case 14: 
#line 2423 
    ;
    
#line 2424 
    pollcnt = 34000U;
    
#line 2425 
    goto ldv_55297;
    case 1: 
#line 2426 
    ;
    case 2: 
#line 2427 
    ;
    case 5: 
#line 2428 
    ;
    case 0: 
#line 2429 
    ;
    default: 
#line 2430 
    ;
    
#line 2431 
    pollcnt = 800U;
    
#line 2432 
    goto ldv_55297;
  }
  ldv_55297: 
#line 2436 
  ;
  
#line 2436 
  __retres = (pollcnt * 11U) / 10U;
  
#line 2436 
  return __retres;
}


#line 2448  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c"
static s32 ixgbe_disable_pcie_master(struct ixgbe_hw *hw)
{
  s32 __retres;
  u32 i;
  u32 poll;
  u16 value;
  u32 tmp;
  u32 tmp_1;
  bool tmp_2;
  
#line 2454 
  ixgbe_write_reg(hw,0U,4U);
  
#line 2457 
  tmp = ixgbe_read_reg(hw,8U);
  
#line 2457 
  if ((tmp & 524288U) == 0U) {
    
#line 2459 
    __retres = 0;
    
#line 2459 
    goto return_label;
  }
  else {
    bool tmp_0;
    
#line 2457 
    tmp_0 = ixgbe_removed((void *)hw->hw_addr);
    
#line 2457 
    if ((int)tmp_0 != 0) {
      
#line 2459 
      __retres = 0;
      
#line 2459 
      goto return_label;
    }
    else ;
  }
  
#line 2462 
  i = 0U;
  
#line 2462 
  goto ldv_55314;
  ldv_55313: 
#line 2463 
  ;
  
#line 2463 
  __const_udelay(429500UL);
  
#line 2464 
  tmp_1 = ixgbe_read_reg(hw,8U);
  
#line 2464 
  if ((tmp_1 & 524288U) == 0U) {
    
#line 2465 
    __retres = 0;
    
#line 2465 
    goto return_label;
  }
  else ;
  
#line 2462 
  i += 1U;
  ldv_55314: 
#line 2463 
  ;
  
#line 2462 
  if (i <= 799U) 
#line 2464 
                 goto ldv_55313; else 
#line 2467 
                                      goto ldv_55315;
  ldv_55315: 
#line 2468 
  ;
  {
    
#line 2476 
    struct _ddebug descriptor = {.modname = "ixgbe", .function = "ixgbe_disable_pcie_master", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c", .format = "GIO Master Disable bit didn\'t clear - requesting resets\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))2476U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 2476 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 2476 
                                                        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"GIO Master Disable bit didn\'t clear - requesting resets\n"); else ;
  }
  
#line 2477 
  hw->mac.flags = (unsigned char)((unsigned int)hw->mac.flags | 1U);
  
#line 2483 
  poll = ixgbe_pcie_timeout_poll(hw);
  
#line 2484 
  i = 0U;
  
#line 2484 
  goto ldv_55319;
  ldv_55318: 
#line 2485 
  ;
  
#line 2485 
  __const_udelay(429500UL);
  
#line 2486 
  value = ixgbe_read_pci_cfg_word(hw,170U);
  
#line 2487 
  tmp_2 = ixgbe_removed((void *)hw->hw_addr);
  
#line 2487 
  if ((int)tmp_2 != 0) {
    
#line 2488 
    __retres = 0;
    
#line 2488 
    goto return_label;
  }
  else ;
  
#line 2489 
  if (((int)value & 32) == 0) {
    
#line 2490 
    __retres = 0;
    
#line 2490 
    goto return_label;
  }
  else ;
  
#line 2484 
  i += 1U;
  ldv_55319: 
#line 2485 
  ;
  
#line 2484 
  if (i < poll) 
#line 2486 
                goto ldv_55318; else 
#line 2489 
                                     goto ldv_55320;
  ldv_55320: 
#line 2490 
  ;
  {
    
#line 2493 
    struct _ddebug descriptor_0 = {.modname = "ixgbe", .function = "ixgbe_disable_pcie_master", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c", .format = "PCIe transaction pending bit also did not clear.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))2493U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 2493 
    if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 2493 
                                                          __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"PCIe transaction pending bit also did not clear.\n"); else ;
  }
  
#line 2494 
  __retres = -12;
  return_label: 
#line 2494 
                return __retres;
}


#line 2505  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c"
s32 ixgbe_acquire_swfw_sync(struct ixgbe_hw *hw, u32 mask)
{
  s32 __retres;
  u32 i;
  s32 tmp;
  
#line 2507 
  u32 gssr = 0U;
  
#line 2508 
  u32 swmask = mask;
  
#line 2509 
  u32 fwmask = mask << 5;
  
#line 2510 
  u32 timeout = 200U;
  
#line 2513 
  i = 0U;
  
#line 2513 
  goto ldv_55332;
  ldv_55331: 
#line 2514 
  ;
  
#line 2518 
  tmp = ixgbe_get_eeprom_semaphore(hw);
  
#line 2518 
  if (tmp != 0) {
    
#line 2519 
    __retres = -16;
    
#line 2519 
    goto return_label;
  }
  else ;
  
#line 2521 
  gssr = ixgbe_read_reg(hw,65888U);
  
#line 2522 
  if (((fwmask | swmask) & gssr) == 0U) {
    
#line 2523 
    gssr |= swmask;
    
#line 2524 
    ixgbe_write_reg(hw,65888U,gssr);
    
#line 2525 
    ixgbe_release_eeprom_semaphore(hw);
    
#line 2526 
    __retres = 0;
    
#line 2526 
    goto return_label;
  }
  else {
    
#line 2529 
    ixgbe_release_eeprom_semaphore(hw);
    
#line 2530 
    usleep_range(5000UL,10000UL);
  }
  
#line 2513 
  i += 1U;
  ldv_55332: 
#line 2514 
  ;
  
#line 2513 
  if (i < timeout) 
#line 2515 
                   goto ldv_55331; else 
#line 2518 
                                        goto ldv_55333;
  ldv_55333: 
#line 2519 
  ;
  
#line 2535 
  if (((fwmask | swmask) & gssr) != 0U) 
#line 2536 
                                        ixgbe_release_swfw_sync(hw,(fwmask | swmask) & gssr); else ;
  
#line 2538 
  usleep_range(5000UL,10000UL);
  
#line 2539 
  __retres = -16;
  return_label: 
#line 2539 
                return __retres;
}


#line 2550  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c"
void ixgbe_release_swfw_sync(struct ixgbe_hw *hw, u32 mask)
{
  u32 gssr;
  
#line 2553 
  u32 swmask = mask;
  
#line 2555 
  ixgbe_get_eeprom_semaphore(hw);
  
#line 2557 
  gssr = ixgbe_read_reg(hw,65888U);
  
#line 2558 
  gssr = ~ swmask & gssr;
  
#line 2559 
  ixgbe_write_reg(hw,65888U,gssr);
  
#line 2561 
  ixgbe_release_eeprom_semaphore(hw);
  
#line 2562 
  return;
}


#line 2573  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c"
s32 prot_autoc_read_generic(struct ixgbe_hw *hw, bool *locked, u32 *reg_val)
{
  s32 __retres;
  
#line 2575 
  *locked = (_Bool)0;
  
#line 2576 
  *reg_val = ixgbe_read_reg(hw,17056U);
  
#line 2577 
  __retres = 0;
  
#line 2577 
  return __retres;
}


#line 2587  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c"
s32 prot_autoc_write_generic(struct ixgbe_hw *hw, u32 reg_val, bool locked)
{
  s32 __retres;
  
#line 2589 
  ixgbe_write_reg(hw,17056U,reg_val);
  
#line 2590 
  __retres = 0;
  
#line 2590 
  return __retres;
}


#line 2600  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c"
s32 ixgbe_disable_rx_buff_generic(struct ixgbe_hw *hw)
{
  s32 __retres;
  int i;
  int secrxreg;
  u32 tmp;
  u32 tmp_0;
  
#line 2606 
  tmp = ixgbe_read_reg(hw,36096U);
  
#line 2606 
  secrxreg = (int)tmp;
  
#line 2607 
  secrxreg |= 2;
  
#line 2608 
  ixgbe_write_reg(hw,36096U,(unsigned int)secrxreg);
  
#line 2609 
  i = 0;
  
#line 2609 
  goto ldv_55357;
  ldv_55356: 
#line 2610 
  ;
  
#line 2610 
  tmp_0 = ixgbe_read_reg(hw,36100U);
  
#line 2610 
  secrxreg = (int)tmp_0;
  
#line 2611 
  if ((secrxreg & 1) != 0) 
#line 2612 
                           goto ldv_55355; else 
#line 2615 
                                                __const_udelay(4295000UL);
  
#line 2609 
  i += 1;
  ldv_55357: 
#line 2610 
  ;
  
#line 2609 
  if (i <= 39) 
#line 2611 
               goto ldv_55356; else 
#line 2614 
                                    goto ldv_55355;
  ldv_55355: 
#line 2615 
  ;
  
#line 2619 
  if (i > 39) {
    
#line 2620 
    struct _ddebug descriptor = {.modname = "ixgbe", .function = "ixgbe_disable_rx_buff_generic", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c", .format = "Rx unit being enabled before security path fully disabled. Continuing with init.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))2620U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 2620 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 2620 
                                                        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"Rx unit being enabled before security path fully disabled. Continuing with init.\n"); else ;
  }
  else ;
  
#line 2622 
  __retres = 0;
  
#line 2622 
  return __retres;
}


#line 2632  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c"
s32 ixgbe_enable_rx_buff_generic(struct ixgbe_hw *hw)
{
  s32 __retres;
  int secrxreg;
  u32 tmp;
  
#line 2636 
  tmp = ixgbe_read_reg(hw,36096U);
  
#line 2636 
  secrxreg = (int)tmp;
  
#line 2637 
  secrxreg &= -3;
  
#line 2638 
  ixgbe_write_reg(hw,36096U,(unsigned int)secrxreg);
  
#line 2639 
  ixgbe_read_reg(hw,8U);
  
#line 2641 
  __retres = 0;
  
#line 2641 
  return __retres;
}


#line 2651  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c"
s32 ixgbe_enable_rx_dma_generic(struct ixgbe_hw *hw, u32 regval)
{
  s32 __retres;
  
#line 2653 
  if ((regval & 1U) != 0U) 
#line 2654 
                           (*(hw->mac.ops.enable_rx))(hw); else 
#line 2656 
                                                                (*(hw->mac.ops.disable_rx))(hw);
  
#line 2658 
  __retres = 0;
  
#line 2658 
  return __retres;
}


#line 2666  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c"
s32 ixgbe_blink_led_start_generic(struct ixgbe_hw *hw, u32 index)
{
  s32 __retres;
  s32 ret_val;
  
#line 2668 
  ixgbe_link_speed speed = 0U;
  
#line 2669 
  bool link_up = (_Bool)0;
  
#line 2670 
  u32 autoc_reg = ixgbe_read_reg(hw,17056U);
  
#line 2671 
  u32 led_reg = ixgbe_read_reg(hw,512U);
  
#line 2672 
  bool locked = (_Bool)0;
  
#line 2679 
  (*(hw->mac.ops.check_link))(hw,& speed,& link_up,(_Bool)0);
  
#line 2681 
  if (! link_up) {
    
#line 2682 
    ret_val = (*(hw->mac.ops.prot_autoc_read))(hw,& locked,& autoc_reg);
    
#line 2683 
    if (ret_val != 0) {
      
#line 2684 
      __retres = ret_val;
      
#line 2684 
      goto return_label;
    }
    else ;
    
#line 2686 
    autoc_reg |= 4096U;
    
#line 2687 
    autoc_reg |= 1U;
    
#line 2689 
    ret_val = (*(hw->mac.ops.prot_autoc_write))(hw,autoc_reg,(_Bool)((bool)((int)locked) != 0));
    
#line 2690 
    if (ret_val != 0) {
      
#line 2691 
      __retres = ret_val;
      
#line 2691 
      goto return_label;
    }
    else ;
    
#line 2693 
    ixgbe_read_reg(hw,8U);
    
#line 2695 
    usleep_range(10000UL,20000UL);
  }
  else ;
  
#line 2698 
  led_reg = (unsigned int)(~ (15 << index * 8U)) & led_reg;
  
#line 2699 
  led_reg = (unsigned int)(128 << index * 8U) | led_reg;
  
#line 2700 
  ixgbe_write_reg(hw,512U,led_reg);
  
#line 2701 
  ixgbe_read_reg(hw,8U);
  
#line 2703 
  __retres = 0;
  return_label: 
#line 2703 
                return __retres;
}


#line 2711  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c"
s32 ixgbe_blink_led_stop_generic(struct ixgbe_hw *hw, u32 index)
{
  s32 __retres;
  s32 ret_val;
  
#line 2713 
  u32 autoc_reg = 0U;
  
#line 2714 
  u32 led_reg = ixgbe_read_reg(hw,512U);
  
#line 2715 
  bool locked = (_Bool)0;
  
#line 2718 
  ret_val = (*(hw->mac.ops.prot_autoc_read))(hw,& locked,& autoc_reg);
  
#line 2719 
  if (ret_val != 0) {
    
#line 2720 
    __retres = ret_val;
    
#line 2720 
    goto return_label;
  }
  else ;
  
#line 2722 
  autoc_reg &= 4294967294U;
  
#line 2723 
  autoc_reg |= 4096U;
  
#line 2725 
  ret_val = (*(hw->mac.ops.prot_autoc_write))(hw,autoc_reg,(_Bool)((bool)((int)locked) != 0));
  
#line 2726 
  if (ret_val != 0) {
    
#line 2727 
    __retres = ret_val;
    
#line 2727 
    goto return_label;
  }
  else ;
  
#line 2729 
  led_reg = (unsigned int)(~ (15 << index * 8U)) & led_reg;
  
#line 2730 
  led_reg = (unsigned int)(~ (128 << index * 8U)) & led_reg;
  
#line 2731 
  led_reg = (unsigned int)(4 << index * 8U) | led_reg;
  
#line 2732 
  ixgbe_write_reg(hw,512U,led_reg);
  
#line 2733 
  ixgbe_read_reg(hw,8U);
  
#line 2735 
  __retres = 0;
  return_label: 
#line 2735 
                return __retres;
}


#line 2747  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c"
static s32 ixgbe_get_san_mac_addr_offset(struct ixgbe_hw *hw, u16 *san_mac_offset)
{
  s32 ret_val;
  
#line 2756 
  ret_val = (*(hw->eeprom.ops.read))(hw,(unsigned short)40,san_mac_offset);
  
#line 2758 
  if (ret_val != 0) 
#line 2759 
                    netdev_err((struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"eeprom read at offset %d failed\n",40); else ;
  
#line 2762 
  return ret_val;
}


#line 2775  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c"
s32 ixgbe_get_san_mac_addr_generic(struct ixgbe_hw *hw, u8 *san_mac_addr)
{
  s32 __retres;
  u16 san_mac_data;
  u16 san_mac_offset;
  u8 i;
  s32 ret_val;
  
#line 2785 
  ret_val = ixgbe_get_san_mac_addr_offset(hw,& san_mac_offset);
  
#line 2786 
  if ((ret_val != 0 || (unsigned int)san_mac_offset == 0U) || (unsigned int)san_mac_offset == 65535U) 
    
#line 2788 
    goto san_mac_addr_clr; else ;
  
#line 2791 
  (*(hw->mac.ops.set_lan_id))(hw);
  
#line 2793 
  if ((unsigned int)hw->bus.func != 0U) {
    
#line 2793 
    san_mac_offset = (unsigned short)((unsigned int)san_mac_offset + 3U);
    
#line 2793 
    int tmp = (int)san_mac_offset;
  }
  else {
    
#line 2794 
    san_mac_offset = san_mac_offset;
    
#line 2793 
    int tmp_3 = (int)san_mac_offset;
  }
  
#line 2795 
  i = (unsigned char)0U;
  
#line 2795 
  goto ldv_55401;
  ldv_55400: 
#line 2796 
  ;
  
#line 2796 
  ret_val = (*(hw->eeprom.ops.read))(hw,(unsigned short)((int)san_mac_offset),& san_mac_data);
  
#line 2798 
  if (ret_val != 0) {
    
#line 2799 
    netdev_err((struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"eeprom read at offset %d failed\n",(int)san_mac_offset);
    
#line 2801 
    goto san_mac_addr_clr;
  }
  else ;
  
#line 2803 
  *(san_mac_addr + (int)i * 2) = (unsigned char)san_mac_data;
  
#line 2804 
  *(san_mac_addr + ((unsigned int)((int)i * 2) + 1U)) = (unsigned char)((int)san_mac_data >> 8);
  
#line 2805 
  san_mac_offset = (u16)((int)san_mac_offset + 1);
  
#line 2795 
  i = (u8)((int)i + 1);
  ldv_55401: 
#line 2796 
  ;
  
#line 2795 
  if ((unsigned int)i <= 2U) 
#line 2797 
                             goto ldv_55400; else 
#line 2800 
                                                  goto ldv_55402;
  ldv_55402: 
#line 2801 
  ;
  
#line 2807 
  __retres = 0;
  
#line 2807 
  goto return_label;
  san_mac_addr_clr: 
#line 2809 
  ;
  
#line 2813 
  i = (unsigned char)0U;
  
#line 2813 
  goto ldv_55404;
  ldv_55403: 
#line 2814 
  ;
  
#line 2814 
  *(san_mac_addr + (int)i) = (unsigned char)255U;
  
#line 2813 
  i = (u8)((int)i + 1);
  ldv_55404: 
#line 2814 
  ;
  
#line 2813 
  if ((unsigned int)i <= 5U) 
#line 2815 
                             goto ldv_55403; else 
#line 2818 
                                                  goto ldv_55405;
  ldv_55405: 
#line 2819 
  ;
  
#line 2815 
  __retres = ret_val;
  return_label: 
#line 2815 
                return __retres;
}


#line 2825  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c"
u16 ixgbe_get_pcie_msix_count_generic(struct ixgbe_hw *hw)
{
  u16 __retres;
  u16 msix_count;
  u16 max_msix_count;
  u16 pcie_offset;
  bool tmp;
  
#line 2831 
  switch ((unsigned int)hw->mac.type) {
    case (unsigned int)1: 
#line 2832 
    ;
    
#line 2833 
    pcie_offset = (unsigned short)98U;
    
#line 2834 
    max_msix_count = (unsigned short)19U;
    
#line 2835 
    goto ldv_55413;
    case (unsigned int)2: 
#line 2836 
    ;
    case (unsigned int)3: 
#line 2837 
    ;
    case (unsigned int)4: 
#line 2838 
    ;
    case (unsigned int)5: 
#line 2839 
    ;
    
#line 2840 
    pcie_offset = (unsigned short)114U;
    
#line 2841 
    max_msix_count = (unsigned short)64U;
    
#line 2842 
    goto ldv_55413;
    default: 
#line 2843 
    ;
    
#line 2844 
    __retres = (unsigned short)1U;
    
#line 2844 
    goto return_label;
  }
  ldv_55413: 
#line 2847 
  ;
  
#line 2847 
  msix_count = ixgbe_read_pci_cfg_word(hw,(unsigned int)pcie_offset);
  
#line 2848 
  tmp = ixgbe_removed((void *)hw->hw_addr);
  
#line 2848 
  if ((int)tmp != 0) 
#line 2849 
                     msix_count = (unsigned short)0U; else ;
  
#line 2850 
  msix_count = (unsigned short)((unsigned int)msix_count & 2047U);
  
#line 2853 
  msix_count = (u16)((int)msix_count + 1);
  
#line 2855 
  if ((int)msix_count > (int)max_msix_count) 
#line 2856 
                                             msix_count = max_msix_count; else ;
  
#line 2858 
  __retres = msix_count;
  return_label: 
#line 2858 
                return __retres;
}


#line 2867  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c"
s32 ixgbe_clear_vmdq_generic(struct ixgbe_hw *hw, u32 rar, u32 vmdq)
{
  s32 __retres;
  u32 mpsar_lo;
  u32 mpsar_hi;
  bool tmp;
  
#line 2870 
  u32 rar_entries = hw->mac.num_rar_entries;
  
#line 2873 
  if (rar >= rar_entries) {
    {
      
#line 2874 
      struct _ddebug descriptor = {.modname = "ixgbe", .function = "ixgbe_clear_vmdq_generic", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c", .format = "RAR index %d is out of range.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))2874U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 2874 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 2874 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"RAR index %d is out of range.\n",rar); else ;
    }
    
#line 2875 
    __retres = -32;
    
#line 2875 
    goto return_label;
  }
  else ;
  
#line 2878 
  mpsar_lo = ixgbe_read_reg(hw,(rar + 5312U) * 8U);
  
#line 2879 
  mpsar_hi = ixgbe_read_reg(hw,rar * 8U + 42500U);
  
#line 2881 
  tmp = ixgbe_removed((void *)hw->hw_addr);
  
#line 2881 
  if ((int)tmp != 0) {
    
#line 2882 
    __retres = 0;
    
#line 2882 
    goto return_label;
  }
  else ;
  
#line 2884 
  if (mpsar_lo == 0U && mpsar_hi == 0U) {
    
#line 2885 
    __retres = 0;
    
#line 2885 
    goto return_label;
  }
  else ;
  
#line 2887 
  if (vmdq == 4294967295U) {
    
#line 2888 
    if (mpsar_lo != 0U) {
      
#line 2889 
      ixgbe_write_reg(hw,(rar + 5312U) * 8U,0U);
      
#line 2890 
      mpsar_lo = 0U;
    }
    else ;
    
#line 2892 
    if (mpsar_hi != 0U) {
      
#line 2893 
      ixgbe_write_reg(hw,rar * 8U + 42500U,0U);
      
#line 2894 
      mpsar_hi = 0U;
    }
    else ;
  }
  else 
    
#line 2896 
    if (vmdq <= 31U) {
      
#line 2897 
      mpsar_lo = (unsigned int)(~ (1 << vmdq)) & mpsar_lo;
      
#line 2898 
      ixgbe_write_reg(hw,(rar + 5312U) * 8U,mpsar_lo);
    }
    else {
      
#line 2900 
      mpsar_hi = (unsigned int)(~ (1 << (vmdq + 4294967264U))) & mpsar_hi;
      
#line 2901 
      ixgbe_write_reg(hw,rar * 8U + 42500U,mpsar_hi);
    }
  
#line 2905 
  if ((mpsar_lo == 0U && mpsar_hi == 0U) && rar != 0U) 
#line 2906 
                                                       (*(hw->mac.ops.clear_rar))(hw,rar); else ;
  
#line 2907 
  __retres = 0;
  return_label: 
#line 2907 
                return __retres;
}


#line 2916  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c"
s32 ixgbe_set_vmdq_generic(struct ixgbe_hw *hw, u32 rar, u32 vmdq)
{
  s32 __retres;
  u32 mpsar;
  
#line 2919 
  u32 rar_entries = hw->mac.num_rar_entries;
  
#line 2922 
  if (rar >= rar_entries) {
    {
      
#line 2923 
      struct _ddebug descriptor = {.modname = "ixgbe", .function = "ixgbe_set_vmdq_generic", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c", .format = "RAR index %d is out of range.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))2923U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 2923 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 2923 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"RAR index %d is out of range.\n",rar); else ;
    }
    
#line 2924 
    __retres = -32;
    
#line 2924 
    goto return_label;
  }
  else ;
  
#line 2927 
  if (vmdq <= 31U) {
    
#line 2928 
    mpsar = ixgbe_read_reg(hw,(rar + 5312U) * 8U);
    
#line 2929 
    mpsar = (unsigned int)(1 << vmdq) | mpsar;
    
#line 2930 
    ixgbe_write_reg(hw,(rar + 5312U) * 8U,mpsar);
  }
  else {
    
#line 2932 
    mpsar = ixgbe_read_reg(hw,rar * 8U + 42500U);
    
#line 2933 
    mpsar = (unsigned int)(1 << (vmdq + 4294967264U)) | mpsar;
    
#line 2934 
    ixgbe_write_reg(hw,rar * 8U + 42500U,mpsar);
  }
  
#line 2936 
  __retres = 0;
  return_label: 
#line 2936 
                return __retres;
}


#line 2949  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c"
s32 ixgbe_set_vmdq_san_mac_generic(struct ixgbe_hw *hw, u32 vmdq)
{
  s32 __retres;
  
#line 2951 
  u32 rar = (unsigned int)hw->mac.san_mac_rar_index;
  
#line 2953 
  if (vmdq <= 31U) {
    
#line 2954 
    ixgbe_write_reg(hw,(rar + 5312U) * 8U,(unsigned int)(1 << vmdq));
    
#line 2955 
    ixgbe_write_reg(hw,rar * 8U + 42500U,0U);
  }
  else {
    
#line 2957 
    ixgbe_write_reg(hw,(rar + 5312U) * 8U,0U);
    
#line 2958 
    ixgbe_write_reg(hw,rar * 8U + 42500U,(unsigned int)(1 << (vmdq + 4294967264U)));
  }
  
#line 2961 
  __retres = 0;
  
#line 2961 
  return __retres;
}


#line 2968  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c"
s32 ixgbe_init_uta_tables_generic(struct ixgbe_hw *hw)
{
  s32 __retres;
  int i;
  
#line 2972 
  i = 0;
  
#line 2972 
  goto ldv_55448;
  ldv_55447: 
#line 2973 
  ;
  
#line 2973 
  ixgbe_write_reg(hw,(unsigned int)((i + 15616) * 4),0U);
  
#line 2972 
  i += 1;
  ldv_55448: 
#line 2973 
  ;
  
#line 2972 
  if (i <= 127) 
#line 2974 
                goto ldv_55447; else 
#line 2977 
                                     goto ldv_55449;
  ldv_55449: 
#line 2978 
  ;
  
#line 2975 
  __retres = 0;
  
#line 2975 
  return __retres;
}


#line 2986  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c"
static s32 ixgbe_find_vlvf_slot(struct ixgbe_hw *hw, u32 vlan)
{
  s32 __retres;
  s32 regindex;
  
#line 2988 
  u32 bits = 0U;
  
#line 2989 
  u32 first_empty_slot = 0U;
  
#line 2993 
  if (vlan == 0U) {
    
#line 2994 
    __retres = 0;
    
#line 2994 
    goto return_label;
  }
  else ;
  
#line 3000 
  regindex = 1;
  
#line 3000 
  goto ldv_55459;
  ldv_55458: 
#line 3001 
  ;
  
#line 3001 
  bits = ixgbe_read_reg(hw,(unsigned int)((regindex + 15424) * 4));
  
#line 3002 
  if (bits == 0U && first_empty_slot == 0U) 
#line 3003 
                                            first_empty_slot = (unsigned int)regindex;
  else 
    
#line 3004 
    if ((bits & 4095U) == vlan) 
#line 3005 
                                goto ldv_55457; else ;
  
#line 3000 
  regindex += 1;
  ldv_55459: 
#line 3001 
  ;
  
#line 3000 
  if (regindex <= 63) 
#line 3002 
                      goto ldv_55458; else 
#line 3005 
                                           goto ldv_55457;
  ldv_55457: 
#line 3006 
  ;
  
#line 3013 
  if (regindex > 63) 
    
#line 3014 
    if (first_empty_slot != 0U) 
#line 3015 
                                regindex = (int)first_empty_slot;
    else {
      {
        
#line 3017 
        struct _ddebug descriptor = {.modname = "ixgbe", .function = "ixgbe_find_vlvf_slot", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c", .format = "No space in VLVF.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))3017U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
        
#line 3017 
        if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 3017 
                                                            __dynamic_netdev_dbg(& descriptor,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"No space in VLVF.\n"); else ;
      }
      
#line 3018 
      regindex = -25;
    }
  else ;
  
#line 3022 
  __retres = regindex;
  return_label: 
#line 3022 
                return __retres;
}


#line 3034  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c"
s32 ixgbe_set_vfta_generic(struct ixgbe_hw *hw, u32 vlan, u32 vind, bool vlan_on)
{
  s32 __retres;
  s32 regindex;
  u32 bitindex;
  u32 vfta;
  u32 bits;
  u32 vt;
  u32 targetbit;
  
#line 3043 
  bool vfta_changed = (_Bool)0;
  
#line 3045 
  if (vlan > 4095U) {
    
#line 3046 
    __retres = -5;
    
#line 3046 
    goto return_label;
  }
  else ;
  
#line 3060 
  regindex = (int)(vlan >> 5) & 127;
  
#line 3061 
  bitindex = vlan & 31U;
  
#line 3062 
  targetbit = (unsigned int)(1 << bitindex);
  
#line 3063 
  vfta = ixgbe_read_reg(hw,(unsigned int)((regindex + 10240) * 4));
  
#line 3065 
  if ((int)vlan_on != 0) {
    
#line 3066 
    if ((vfta & targetbit) == 0U) {
      
#line 3067 
      vfta |= targetbit;
      
#line 3068 
      vfta_changed = (_Bool)1;
    }
    else ;
  }
  else 
    
#line 3071 
    if ((vfta & targetbit) != 0U) {
      
#line 3072 
      vfta = ~ targetbit & vfta;
      
#line 3073 
      vfta_changed = (_Bool)1;
    }
    else ;
  
#line 3085 
  vt = ixgbe_read_reg(hw,20912U);
  
#line 3086 
  if ((vt & 1U) != 0U) {
    s32 vlvf_index;
    
#line 3089 
    vlvf_index = ixgbe_find_vlvf_slot(hw,vlan);
    
#line 3090 
    if (vlvf_index < 0) {
      
#line 3091 
      __retres = vlvf_index;
      
#line 3091 
      goto return_label;
    }
    else ;
    
#line 3093 
    if ((int)vlan_on != 0) 
      
#line 3095 
      if (vind <= 31U) {
        
#line 3096 
        bits = ixgbe_read_reg(hw,(unsigned int)((vlvf_index + 7744) * 8));
        
#line 3098 
        bits = (unsigned int)(1 << vind) | bits;
        
#line 3099 
        ixgbe_write_reg(hw,(unsigned int)((vlvf_index + 7744) * 8),bits);
      }
      else {
        
#line 3103 
        bits = ixgbe_read_reg(hw,(unsigned int)((vlvf_index * 2 + 15489) * 4));
        
#line 3105 
        bits = (unsigned int)(1 << (vind + 4294967264U)) | bits;
        
#line 3106 
        ixgbe_write_reg(hw,(unsigned int)((vlvf_index * 2 + 15489) * 4),bits);
      }
    else 
      
#line 3112 
      if (vind <= 31U) {
        u32 tmp;
        
#line 3113 
        bits = ixgbe_read_reg(hw,(unsigned int)((vlvf_index + 7744) * 8));
        
#line 3115 
        bits = (unsigned int)(~ (1 << vind)) & bits;
        
#line 3116 
        ixgbe_write_reg(hw,(unsigned int)((vlvf_index + 7744) * 8),bits);
        
#line 3119 
        tmp = ixgbe_read_reg(hw,(unsigned int)((vlvf_index * 2 + 15489) * 4));
        
#line 3120 
        bits = tmp | bits;
      }
      else {
        u32 tmp_0;
        
#line 3122 
        bits = ixgbe_read_reg(hw,(unsigned int)((vlvf_index * 2 + 15489) * 4));
        
#line 3124 
        bits = (unsigned int)(~ (1 << (vind + 4294967264U))) & bits;
        
#line 3125 
        ixgbe_write_reg(hw,(unsigned int)((vlvf_index * 2 + 15489) * 4),bits);
        
#line 3128 
        tmp_0 = ixgbe_read_reg(hw,(unsigned int)((vlvf_index + 7744) * 8));
        
#line 3129 
        bits = tmp_0 | bits;
      }
    
#line 3148 
    if (bits != 0U) {
      
#line 3149 
      ixgbe_write_reg(hw,(unsigned int)((vlvf_index + 15424) * 4),vlan | 2147483648U);
      
#line 3151 
      if (! vlan_on) 
#line 3155 
                     vfta_changed = (_Bool)0; else ;
    }
    else 
#line 3158 
         ixgbe_write_reg(hw,(unsigned int)((vlvf_index + 15424) * 4),0U);
  }
  else ;
  
#line 3162 
  if ((int)vfta_changed != 0) 
#line 3163 
                              ixgbe_write_reg(hw,(unsigned int)((regindex + 10240) * 4),vfta); else ;
  
#line 3165 
  __retres = 0;
  return_label: 
#line 3165 
                return __retres;
}


#line 3174  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c"
s32 ixgbe_clear_vfta_generic(struct ixgbe_hw *hw)
{
  s32 __retres;
  u32 offset;
  
#line 3178 
  offset = 0U;
  
#line 3178 
  goto ldv_55481;
  ldv_55480: 
#line 3179 
  ;
  
#line 3179 
  ixgbe_write_reg(hw,(offset + 10240U) * 4U,0U);
  
#line 3178 
  offset += 1U;
  ldv_55481: 
#line 3179 
  ;
  
#line 3178 
  if (hw->mac.vft_size > offset) 
#line 3180 
                                 goto ldv_55480; else 
#line 3183 
                                                      goto ldv_55482;
  ldv_55482: 
#line 3184 
  ;
  
#line 3181 
  offset = 0U;
  
#line 3181 
  goto ldv_55484;
  ldv_55483: 
#line 3182 
  ;
  
#line 3182 
  ixgbe_write_reg(hw,(offset + 15424U) * 4U,0U);
  
#line 3183 
  ixgbe_write_reg(hw,(offset + 7744U) * 8U,0U);
  
#line 3184 
  ixgbe_write_reg(hw,offset * 8U + 61956U,0U);
  
#line 3181 
  offset += 1U;
  ldv_55484: 
#line 3182 
  ;
  
#line 3181 
  if (offset <= 63U) 
#line 3183 
                     goto ldv_55483; else 
#line 3186 
                                          goto ldv_55485;
  ldv_55485: 
#line 3187 
  ;
  
#line 3187 
  __retres = 0;
  
#line 3187 
  return __retres;
}


#line 3199  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c"
s32 ixgbe_check_mac_link_generic(struct ixgbe_hw *hw, ixgbe_link_speed *speed, bool *link_up, bool link_up_wait_to_complete)
{
  s32 __retres;
  u32 links_reg;
  u32 links_orig;
  u32 i;
  
#line 3206 
  links_orig = ixgbe_read_reg(hw,17060U);
  
#line 3208 
  links_reg = ixgbe_read_reg(hw,17060U);
  
#line 3210 
  if (links_orig != links_reg) {
    
#line 3211 
    struct _ddebug descriptor = {.modname = "ixgbe", .function = "ixgbe_check_mac_link_generic", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c", .format = "LINKS changed from %08X to %08X\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))3212U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 3211 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 3211 
                                                        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"LINKS changed from %08X to %08X\n",links_orig,links_reg); else ;
  }
  else ;
  
#line 3215 
  if ((int)link_up_wait_to_complete != 0) {
    
#line 3216 
    i = 0U;
    
#line 3216 
    goto ldv_55499;
    ldv_55498: 
#line 3217 
    ;
    
#line 3217 
    if ((links_reg & 1073741824U) != 0U) {
      
#line 3218 
      *link_up = (_Bool)1;
      
#line 3219 
      goto ldv_55497;
    }
    else 
#line 3221 
         *link_up = (_Bool)0;
    
#line 3223 
    msleep(100U);
    
#line 3224 
    links_reg = ixgbe_read_reg(hw,17060U);
    
#line 3216 
    i += 1U;
    ldv_55499: 
#line 3217 
    ;
    
#line 3216 
    if (i <= 89U) 
#line 3218 
                  goto ldv_55498; else 
#line 3221 
                                       goto ldv_55497;
    ldv_55497: 
#line 3222 
    ;
  }
  else 
    
#line 3227 
    if ((links_reg & 1073741824U) != 0U) 
#line 3228 
                                         *link_up = (_Bool)1; else 
#line 3230 
                                                                   *link_up = (_Bool)0;
  
#line 3233 
  switch (links_reg & 805306368U) {
    case (unsigned int)805306368: 
#line 3234 
    ;
    
#line 3235 
    if (hw->mac.type > (unsigned int)ixgbe_mac_X540 && (links_reg & 134217728U) != 0U) 
      
#line 3237 
      *speed = 1024U; else 
#line 3239 
                           *speed = 128U;
    
#line 3240 
    goto ldv_55501;
    case (unsigned int)536870912: 
#line 3241 
    ;
    
#line 3242 
    *speed = 32U;
    
#line 3243 
    goto ldv_55501;
    case (unsigned int)268435456: 
#line 3244 
    ;
    
#line 3245 
    if (hw->mac.type > (unsigned int)ixgbe_mac_X540 && (links_reg & 134217728U) != 0U) 
      
#line 3247 
      *speed = 2048U; else 
#line 3249 
                           *speed = 8U;
    
#line 3250 
    goto ldv_55501;
    default: 
#line 3251 
    ;
    
#line 3252 
    *speed = 0U;
  }
  ldv_55501: 
#line 3255 
  ;
  
#line 3255 
  __retres = 0;
  
#line 3255 
  return __retres;
}


#line 3268  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c"
s32 ixgbe_get_wwn_prefix_generic(struct ixgbe_hw *hw, u16 *wwnn_prefix, u16 *wwpn_prefix)
{
  s32 __retres;
  u16 offset;
  u16 caps;
  u16 alt_san_mac_blk_offset;
  s32 tmp;
  s32 tmp_0;
  s32 tmp_1;
  s32 tmp_2;
  
#line 3275 
  *wwnn_prefix = (unsigned short)65535U;
  
#line 3276 
  *wwpn_prefix = (unsigned short)65535U;
  
#line 3279 
  offset = (unsigned short)39U;
  
#line 3280 
  tmp = (*(hw->eeprom.ops.read))(hw,(unsigned short)((int)offset),& alt_san_mac_blk_offset);
  
#line 3280 
  if (tmp != 0) 
#line 3281 
                goto wwn_prefix_err; else ;
  
#line 3283 
  if ((unsigned int)alt_san_mac_blk_offset + 65535U > 65533U) {
    
#line 3285 
    __retres = 0;
    
#line 3285 
    goto return_label;
  }
  else ;
  
#line 3288 
  offset = alt_san_mac_blk_offset;
  
#line 3289 
  tmp_0 = (*(hw->eeprom.ops.read))(hw,(unsigned short)((int)offset),& caps);
  
#line 3289 
  if (tmp_0 != 0) 
#line 3290 
                  goto wwn_prefix_err; else ;
  
#line 3291 
  if (((int)caps & 1) == 0) {
    
#line 3292 
    __retres = 0;
    
#line 3292 
    goto return_label;
  }
  else ;
  
#line 3295 
  offset = (unsigned short)((unsigned int)alt_san_mac_blk_offset + 7U);
  
#line 3296 
  tmp_1 = (*(hw->eeprom.ops.read))(hw,(unsigned short)((int)offset),wwnn_prefix);
  
#line 3296 
  if (tmp_1 != 0) 
#line 3297 
                  netdev_err((struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"eeprom read at offset %d failed\n",(int)offset); else ;
  
#line 3299 
  offset = (unsigned short)((unsigned int)alt_san_mac_blk_offset + 8U);
  
#line 3300 
  tmp_2 = (*(hw->eeprom.ops.read))(hw,(unsigned short)((int)offset),wwpn_prefix);
  
#line 3300 
  if (tmp_2 != 0) 
#line 3301 
                  goto wwn_prefix_err; else ;
  
#line 3303 
  __retres = 0;
  
#line 3303 
  goto return_label;
  wwn_prefix_err: 
#line 3305 
  ;
  
#line 3306 
  netdev_err((struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"eeprom read at offset %d failed\n",(int)offset);
  
#line 3307 
  __retres = 0;
  return_label: 
#line 3307 
                return __retres;
}


#line 3317  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c"
void ixgbe_set_mac_anti_spoofing(struct ixgbe_hw *hw, bool enable, int pf)
{
  int j;
  
#line 3320 
  int pf_target_reg = pf >> 3;
  
#line 3321 
  int pf_target_shift = pf % 8;
  
#line 3322 
  u32 pfvfspoof = 0U;
  
#line 3324 
  if (hw->mac.type == (unsigned int)ixgbe_mac_82598EB) 
#line 3325 
                                                       goto return_label; else ;
  
#line 3327 
  if ((int)enable != 0) 
#line 3328 
                        pfvfspoof = 255U; else ;
  
#line 3334 
  j = 0;
  
#line 3334 
  goto ldv_55524;
  ldv_55523: 
#line 3335 
  ;
  
#line 3335 
  ixgbe_write_reg(hw,(unsigned int)((j + 8320) * 4),pfvfspoof);
  
#line 3334 
  j += 1;
  ldv_55524: 
#line 3335 
  ;
  
#line 3334 
  if (j < pf_target_reg) 
#line 3336 
                         goto ldv_55523; else 
#line 3339 
                                              goto ldv_55525;
  ldv_55525: 
#line 3340 
  ;
  
#line 3341 
  pfvfspoof = (unsigned int)((1 << pf_target_shift) + -1) & pfvfspoof;
  
#line 3342 
  ixgbe_write_reg(hw,(unsigned int)((j + 8320) * 4),pfvfspoof);
  
#line 3348 
  j += 1;
  
#line 3348 
  goto ldv_55527;
  ldv_55526: 
#line 3349 
  ;
  
#line 3349 
  ixgbe_write_reg(hw,(unsigned int)((j + 8320) * 4),0U);
  
#line 3348 
  j += 1;
  ldv_55527: 
#line 3349 
  ;
  
#line 3348 
  if (j <= 7) 
#line 3350 
              goto ldv_55526; else 
#line 3353 
                                   goto ldv_55528;
  ldv_55528: 
#line 3354 
  ;
  return_label: 
#line 3355 
                return;
}


#line 3359  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c"
void ixgbe_set_vlan_anti_spoofing(struct ixgbe_hw *hw, bool enable, int vf)
{
  u32 pfvfspoof;
  
#line 3361 
  int vf_target_reg = vf >> 3;
  
#line 3362 
  int vf_target_shift = vf % 8 + 8;
  
#line 3365 
  if (hw->mac.type == (unsigned int)ixgbe_mac_82598EB) 
#line 3366 
                                                       goto return_label; else ;
  
#line 3368 
  pfvfspoof = ixgbe_read_reg(hw,(unsigned int)((vf_target_reg + 8320) * 4));
  
#line 3369 
  if ((int)enable != 0) 
#line 3370 
                        pfvfspoof = (unsigned int)(1 << vf_target_shift) | pfvfspoof; else 
                                                                    
#line 3372 
                                                                    pfvfspoof = (unsigned int)(~ (1 << vf_target_shift)) & pfvfspoof;
  
#line 3373 
  ixgbe_write_reg(hw,(unsigned int)((vf_target_reg + 8320) * 4),pfvfspoof);
  return_label: 
#line 3374 
                return;
}


#line 3384  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c"
s32 ixgbe_get_device_caps_generic(struct ixgbe_hw *hw, u16 *device_caps)
{
  s32 __retres;
  
#line 3386 
  (*(hw->eeprom.ops.read))(hw,(unsigned short)44,device_caps);
  
#line 3388 
  __retres = 0;
  
#line 3388 
  return __retres;
}


#line 3398  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c"
void ixgbe_set_rxpba_generic(struct ixgbe_hw *hw, int num_pb, u32 headroom, int strategy)
{
  u32 rxpktsize;
  u32 txpktsize;
  u32 txpbthresh;
  
#line 3403 
  u32 pbsize = hw->mac.rx_pb_size;
  
#line 3404 
  int i = 0;
  
#line 3408 
  pbsize -= headroom;
  
#line 3410 
  if (num_pb == 0) 
#line 3411 
                   num_pb = 1; else ;
  
#line 3416 
  switch (strategy) {
    case 1: 
#line 3417 
    ;
    
#line 3421 
    rxpktsize = (pbsize * 10U) / (unsigned int)(num_pb * 8);
    
#line 3422 
    pbsize -= (unsigned int)(num_pb / 2) * rxpktsize;
    
#line 3423 
    rxpktsize <<= 10;
    
#line 3424 
    goto ldv_55554;
    ldv_55553: 
#line 3425 
    ;
    
#line 3425 
    ixgbe_write_reg(hw,(unsigned int)((i + 3840) * 4),rxpktsize);
    
#line 3424 
    i += 1;
    ldv_55554: 
#line 3425 
    ;
    
#line 3424 
    if (num_pb / 2 > i) 
#line 3426 
                        goto ldv_55553; else 
#line 3429 
                                             goto ldv_55555;
    ldv_55555: 
#line 3430 
    ;
    case 0: 
#line 3427 
    ;
    
#line 3429 
    rxpktsize = pbsize / (unsigned int)(num_pb - i) << 10;
    
#line 3430 
    goto ldv_55558;
    ldv_55557: 
#line 3431 
    ;
    
#line 3431 
    ixgbe_write_reg(hw,(unsigned int)((i + 3840) * 4),rxpktsize);
    
#line 3430 
    i += 1;
    ldv_55558: 
#line 3431 
    ;
    
#line 3430 
    if (i < num_pb) 
#line 3432 
                    goto ldv_55557; else 
#line 3435 
                                         goto ldv_55559;
    ldv_55559: 
#line 3436 
    ;
    
#line 3432 
    goto ldv_55560;
    default: 
#line 3433 
    ;
    
#line 3434 
    goto ldv_55560;
  }
  ldv_55560: 
#line 3442 
  ;
  
#line 3442 
  txpktsize = (unsigned int)(163840 / num_pb);
  
#line 3443 
  txpbthresh = txpktsize / 1024U + 4294967286U;
  
#line 3444 
  i = 0;
  
#line 3444 
  goto ldv_55563;
  ldv_55562: 
#line 3445 
  ;
  
#line 3445 
  ixgbe_write_reg(hw,(unsigned int)((i + 13056) * 4),txpktsize);
  
#line 3446 
  ixgbe_write_reg(hw,(unsigned int)((i + 4692) * 4),txpbthresh);
  
#line 3444 
  i += 1;
  ldv_55563: 
#line 3445 
  ;
  
#line 3444 
  if (i < num_pb) 
#line 3446 
                  goto ldv_55562; else 
#line 3449 
                                       goto ldv_55564;
  ldv_55564: 
#line 3450 
  ;
  
#line 3450 
  goto ldv_55566;
  ldv_55565: 
#line 3451 
  ;
  
#line 3451 
  ixgbe_write_reg(hw,(unsigned int)((i + 3840) * 4),0U);
  
#line 3452 
  ixgbe_write_reg(hw,(unsigned int)((i + 13056) * 4),0U);
  
#line 3453 
  ixgbe_write_reg(hw,(unsigned int)((i + 4692) * 4),0U);
  
#line 3450 
  i += 1;
  ldv_55566: 
#line 3451 
  ;
  
#line 3450 
  if (i <= 7) 
#line 3452 
              goto ldv_55565; else 
#line 3455 
                                   goto ldv_55567;
  ldv_55567: 
#line 3456 
  ;
  
#line 3457 
  return;
}


#line 3465  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c"
static u8 ixgbe_calculate_checksum(u8 *buffer, u32 length)
{
  u8 __retres;
  u32 i;
  
#line 3468 
  u8 sum = (unsigned char)0U;
  
#line 3470 
  if (buffer == (u8 *)0U) {
    
#line 3471 
    __retres = (unsigned char)0U;
    
#line 3471 
    goto return_label;
  }
  else ;
  
#line 3473 
  i = 0U;
  
#line 3473 
  goto ldv_55575;
  ldv_55574: 
#line 3474 
  ;
  
#line 3474 
  sum = (unsigned char)((int)*(buffer + i) + (int)sum);
  
#line 3473 
  i += 1U;
  ldv_55575: 
#line 3474 
  ;
  
#line 3473 
  if (i < length) 
#line 3475 
                  goto ldv_55574; else 
#line 3478 
                                       goto ldv_55576;
  ldv_55576: 
#line 3479 
  ;
  
#line 3476 
  __retres = (unsigned char)(- ((int)sum));
  return_label: 
#line 3476 
                return __retres;
}


#line 3496  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c"
s32 ixgbe_host_interface_command(struct ixgbe_hw *hw, u32 *buffer, u32 length, u32 timeout, bool return_data)
{
  s32 __retres;
  u32 hicr;
  u32 i;
  u32 bi;
  u32 fwsts;
  u16 buf_len;
  u16 dword_len;
  
#line 3501 
  u32 hdr_size = 4U;
  
#line 3504 
  if (length + 4294967295U > 1791U) {
    {
      
#line 3505 
      struct _ddebug descriptor = {.modname = "ixgbe", .function = "ixgbe_host_interface_command", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c", .format = "Buffer length failure buffersize-%d.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))3505U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 3505 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 3505 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"Buffer length failure buffersize-%d.\n",length); else ;
    }
    
#line 3506 
    __retres = -33;
    
#line 3506 
    goto return_label;
  }
  else ;
  
#line 3510 
  fwsts = ixgbe_read_reg(hw,89868U);
  
#line 3511 
  ixgbe_write_reg(hw,89868U,fwsts | 512U);
  
#line 3514 
  hicr = ixgbe_read_reg(hw,89856U);
  
#line 3515 
  if ((hicr & 1U) == 0U) {
    {
      
#line 3516 
      struct _ddebug descriptor_0 = {.modname = "ixgbe", .function = "ixgbe_host_interface_command", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c", .format = "IXGBE_HOST_EN bit disabled.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))3516U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 3516 
      if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 3516 
                                                            __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"IXGBE_HOST_EN bit disabled.\n"); else ;
    }
    
#line 3517 
    __retres = -33;
    
#line 3517 
    goto return_label;
  }
  else ;
  
#line 3521 
  if ((length & 3U) != 0U) {
    {
      
#line 3522 
      struct _ddebug descriptor_1 = {.modname = "ixgbe", .function = "ixgbe_host_interface_command", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c", .format = "Buffer length failure, not aligned to dword", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))3522U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 3522 
      if ((long)(((int)descriptor_1.flags & 1) != 0) != 0L) 
#line 3522 
                                                            __dynamic_netdev_dbg(& descriptor_1,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"Buffer length failure, not aligned to dword"); else ;
    }
    
#line 3523 
    __retres = -32;
    
#line 3523 
    goto return_label;
  }
  else ;
  
#line 3526 
  dword_len = (unsigned short)(length >> 2);
  
#line 3532 
  i = 0U;
  
#line 3532 
  goto ldv_55596;
  ldv_55595: 
#line 3533 
  ;
  
#line 3533 
  ixgbe_write_reg(hw,(i << 2) + 88064U,*(buffer + i));
  
#line 3532 
  i += 1U;
  ldv_55596: 
#line 3533 
  ;
  
#line 3532 
  if ((unsigned int)dword_len > i) 
#line 3534 
                                   goto ldv_55595; else 
#line 3537 
                                                        goto ldv_55597;
  ldv_55597: 
#line 3538 
  ;
  
#line 3537 
  ixgbe_write_reg(hw,89856U,hicr | 2U);
  
#line 3539 
  i = 0U;
  
#line 3539 
  goto ldv_55600;
  ldv_55599: 
#line 3540 
  ;
  
#line 3540 
  hicr = ixgbe_read_reg(hw,89856U);
  
#line 3541 
  if ((hicr & 2U) == 0U) 
#line 3542 
                         goto ldv_55598; else ;
  
#line 3543 
  usleep_range(1000UL,2000UL);
  
#line 3539 
  i += 1U;
  ldv_55600: 
#line 3540 
  ;
  
#line 3539 
  if (i < timeout) 
#line 3541 
                   goto ldv_55599; else 
#line 3544 
                                        goto ldv_55598;
  ldv_55598: 
#line 3545 
  ;
  
#line 3547 
  if (timeout != 0U && i == timeout) 
#line 3547 
                                     goto _LOR;
  else {
    u32 tmp;
    
#line 3547 
    tmp = ixgbe_read_reg(hw,89856U);
    
#line 3547 
    if ((tmp & 4U) == 0U) {
      _LOR: {
              {
                
#line 3549 
                struct _ddebug descriptor_2 = {.modname = "ixgbe", .function = "ixgbe_host_interface_command", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c", .format = "Command has failed with no status valid.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))3549U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
                
#line 3549 
                if ((long)(((int)descriptor_2.flags & 1) != 0) != 0L) 
                  
#line 3549 
                  __dynamic_netdev_dbg(& descriptor_2,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"Command has failed with no status valid.\n"); else ;
              }
              
#line 3550 
              __retres = -33;
              
#line 3550 
              goto return_label;
            }
    }
    else ;
  }
  
#line 3553 
  if (! return_data) {
    
#line 3554 
    __retres = 0;
    
#line 3554 
    goto return_label;
  }
  else ;
  
#line 3557 
  dword_len = (unsigned short)(hdr_size >> 2);
  
#line 3560 
  bi = 0U;
  
#line 3560 
  goto ldv_55603;
  ldv_55602: 
#line 3561 
  ;
  
#line 3561 
  *(buffer + bi) = ixgbe_read_reg(hw,(bi << 2) + 88064U);
  
#line 3562 
  u32 *tmp_2 = buffer + bi;
  
#line 3560 
  bi += 1U;
  ldv_55603: 
#line 3561 
  ;
  
#line 3560 
  if ((unsigned int)dword_len > bi) 
#line 3562 
                                    goto ldv_55602; else 
#line 3565 
                                                         goto ldv_55604;
  ldv_55604: 
#line 3566 
  ;
  
#line 3566 
  buf_len = (unsigned short)((struct ixgbe_hic_hdr *)buffer)->buf_len;
  
#line 3567 
  if ((unsigned int)buf_len == 0U) {
    
#line 3568 
    __retres = 0;
    
#line 3568 
    goto return_label;
  }
  else ;
  
#line 3570 
  if ((unsigned int)buf_len + hdr_size > length) {
    {
      
#line 3571 
      struct _ddebug descriptor_3 = {.modname = "ixgbe", .function = "ixgbe_host_interface_command", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c", .format = "Buffer not large enough for reply message.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))3571U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 3571 
      if ((long)(((int)descriptor_3.flags & 1) != 0) != 0L) 
#line 3571 
                                                            __dynamic_netdev_dbg(& descriptor_3,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"Buffer not large enough for reply message.\n"); else ;
    }
    
#line 3572 
    __retres = -33;
    
#line 3572 
    goto return_label;
  }
  else ;
  
#line 3576 
  dword_len = (unsigned short)(((int)buf_len + 3) >> 2);
  
#line 3579 
  goto ldv_55607;
  ldv_55606: 
#line 3580 
  ;
  
#line 3580 
  *(buffer + bi) = ixgbe_read_reg(hw,(bi << 2) + 88064U);
  
#line 3581 
  u32 *tmp_4 = buffer + bi;
  
#line 3579 
  bi += 1U;
  ldv_55607: 
#line 3580 
  ;
  
#line 3579 
  if ((unsigned int)dword_len >= bi) 
#line 3581 
                                     goto ldv_55606; else 
#line 3584 
                                                          goto ldv_55608;
  ldv_55608: 
#line 3585 
  ;
  
#line 3584 
  __retres = 0;
  return_label: 
#line 3584 
                return __retres;
}


#line 3600  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c"
s32 ixgbe_set_fw_drv_ver_generic(struct ixgbe_hw *hw, u8 maj, u8 min, u8 build, u8 sub)
{
  s32 __retres;
  struct ixgbe_hic_drv_info fw_cmd;
  int i;
  s32 ret_val;
  s32 tmp;
  
#line 3607 
  tmp = (*(hw->mac.ops.acquire_swfw_sync))(hw,1024U);
  
#line 3607 
  if (tmp != 0) {
    
#line 3608 
    __retres = -16;
    
#line 3608 
    goto return_label;
  }
  else ;
  
#line 3610 
  fw_cmd.hdr.cmd = (unsigned char)221U;
  
#line 3611 
  fw_cmd.hdr.buf_len = (unsigned char)5U;
  
#line 3612 
  fw_cmd.hdr.cmd_or_resp.cmd_resv = (unsigned char)0U;
  
#line 3613 
  fw_cmd.port_num = (unsigned char)hw->bus.func;
  
#line 3614 
  fw_cmd.ver_maj = maj;
  
#line 3615 
  fw_cmd.ver_min = min;
  
#line 3616 
  fw_cmd.ver_build = build;
  
#line 3617 
  fw_cmd.ver_sub = sub;
  
#line 3618 
  fw_cmd.hdr.checksum = (unsigned char)0U;
  
#line 3619 
  fw_cmd.hdr.checksum = ixgbe_calculate_checksum((u8 *)(& fw_cmd),(unsigned int)((int)fw_cmd.hdr.buf_len + 4));
  
#line 3621 
  fw_cmd.pad = (unsigned char)0U;
  
#line 3622 
  fw_cmd.pad2 = (unsigned short)0U;
  
#line 3624 
  i = 0;
  
#line 3624 
  goto ldv_55622;
  ldv_55621: 
#line 3625 
  ;
  
#line 3625 
  ret_val = ixgbe_host_interface_command(hw,(u32 *)(& fw_cmd),12U,500U,(_Bool)1);
  
#line 3629 
  if (ret_val != 0) 
#line 3630 
                    goto ldv_55619; else ;
  
#line 3632 
  if ((unsigned int)fw_cmd.hdr.cmd_or_resp.ret_status == 1U) 
#line 3634 
                                                             ret_val = 0; else 
                                                                    
#line 3636 
                                                                    ret_val = -33;
  
#line 3638 
  goto ldv_55620;
  ldv_55619: 
#line 3639 
  ;
  
#line 3624 
  i += 1;
  ldv_55622: 
#line 3625 
  ;
  
#line 3624 
  if (i <= 3) 
#line 3626 
              goto ldv_55621; else 
#line 3629 
                                   goto ldv_55620;
  ldv_55620: 
#line 3630 
  ;
  
#line 3641 
  (*(hw->mac.ops.release_swfw_sync))(hw,1024U);
  
#line 3642 
  __retres = ret_val;
  return_label: 
#line 3642 
                return __retres;
}


#line 3653  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c"
void ixgbe_clear_tx_pending(struct ixgbe_hw *hw)
{
  u32 gcr_ext;
  u32 hlreg0;
  u32 i;
  u32 poll;
  u16 value;
  bool tmp;
  
#line 3662 
  if (((int)hw->mac.flags & 1) == 0) 
#line 3663 
                                     goto return_label; else ;
  
#line 3670 
  hlreg0 = ixgbe_read_reg(hw,16960U);
  
#line 3671 
  ixgbe_write_reg(hw,16960U,hlreg0 | 32768U);
  
#line 3674 
  ixgbe_read_reg(hw,8U);
  
#line 3675 
  usleep_range(3000UL,6000UL);
  
#line 3680 
  poll = ixgbe_pcie_timeout_poll(hw);
  
#line 3681 
  i = 0U;
  
#line 3681 
  goto ldv_55633;
  ldv_55632: 
#line 3682 
  ;
  
#line 3682 
  usleep_range(100UL,200UL);
  
#line 3683 
  value = ixgbe_read_pci_cfg_word(hw,170U);
  
#line 3684 
  tmp = ixgbe_removed((void *)hw->hw_addr);
  
#line 3684 
  if ((int)tmp != 0) 
#line 3685 
                     goto ldv_55631; else ;
  
#line 3686 
  if (((int)value & 32) == 0) 
#line 3687 
                              goto ldv_55631; else ;
  
#line 3681 
  i += 1U;
  ldv_55633: 
#line 3682 
  ;
  
#line 3681 
  if (i < poll) 
#line 3683 
                goto ldv_55632; else 
#line 3686 
                                     goto ldv_55631;
  ldv_55631: 
#line 3687 
  ;
  
#line 3691 
  gcr_ext = ixgbe_read_reg(hw,69712U);
  
#line 3692 
  ixgbe_write_reg(hw,69712U,gcr_ext | 1073741824U);
  
#line 3696 
  ixgbe_read_reg(hw,8U);
  
#line 3697 
  __const_udelay(85900UL);
  
#line 3700 
  ixgbe_write_reg(hw,69712U,gcr_ext);
  
#line 3701 
  ixgbe_write_reg(hw,16960U,hlreg0);
  return_label: 
#line 3702 
                return;
}


#line 3704  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c"
static u8 const ixgbe_emc_temp_data[4U] = {(unsigned char)0U, (unsigned char)1U, (unsigned char)35U, (unsigned char)42U};

#line 3710  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c"
static u8 const ixgbe_emc_therm_limit[4U] = {(unsigned char)32U, (unsigned char)25U, (unsigned char)26U, (unsigned char)48U};

#line 3725  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c"
static s32 ixgbe_get_ets_data(struct ixgbe_hw *hw, u16 *ets_cfg, u16 *ets_offset)
{
  s32 __retres;
  s32 status;
  
#line 3730 
  status = (*(hw->eeprom.ops.read))(hw,(unsigned short)38,ets_offset);
  
#line 3731 
  if (status != 0) {
    
#line 3732 
    __retres = status;
    
#line 3732 
    goto return_label;
  }
  else ;
  
#line 3734 
  if ((unsigned int)*ets_offset + 65535U > 65533U) {
    
#line 3735 
    __retres = 2147483647;
    
#line 3735 
    goto return_label;
  }
  else ;
  
#line 3737 
  status = (*(hw->eeprom.ops.read))(hw,(unsigned short)((int)*ets_offset),ets_cfg);
  
#line 3738 
  if (status != 0) {
    
#line 3739 
    __retres = status;
    
#line 3739 
    goto return_label;
  }
  else ;
  
#line 3741 
  if (((int)*ets_cfg & 56) != 0) {
    
#line 3742 
    __retres = 2147483647;
    
#line 3742 
    goto return_label;
  }
  else ;
  
#line 3744 
  __retres = 0;
  return_label: 
#line 3744 
                return __retres;
}


#line 3753  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c"
s32 ixgbe_get_thermal_sensor_data_generic(struct ixgbe_hw *hw)
{
  s32 __retres;
  s32 status;
  u16 ets_offset;
  u16 ets_cfg;
  u16 ets_sensor;
  u8 num_sensors;
  u8 i;
  u32 tmp;
  
#line 3761 
  struct ixgbe_thermal_sensor_data *data = & hw->mac.thermal_sensor_data;
  
#line 3764 
  tmp = ixgbe_read_reg(hw,8U);
  
#line 3764 
  if ((tmp & 4U) != 0U) {
    
#line 3765 
    __retres = 2147483647;
    
#line 3765 
    goto return_label;
  }
  else ;
  
#line 3767 
  status = ixgbe_get_ets_data(hw,& ets_cfg,& ets_offset);
  
#line 3768 
  if (status != 0) {
    
#line 3769 
    __retres = status;
    
#line 3769 
    goto return_label;
  }
  else ;
  
#line 3771 
  num_sensors = (unsigned char)((unsigned int)((unsigned char)ets_cfg) & 7U);
  
#line 3772 
  if ((unsigned int)num_sensors > 3U) 
#line 3773 
                                      num_sensors = (unsigned char)3U; else ;
  
#line 3775 
  i = (unsigned char)0U;
  
#line 3775 
  goto ldv_55655;
  ldv_55654: 
#line 3776 
  ;
  {
    u8 sensor_index;
    u8 sensor_location;
    
#line 3779 
    status = (*(hw->eeprom.ops.read))(hw,(unsigned short)((int)((unsigned int)((int)((unsigned short)i) + (int)ets_offset) + 1U)),& ets_sensor);
    
#line 3781 
    if (status != 0) {
      
#line 3782 
      __retres = status;
      
#line 3782 
      goto return_label;
    }
    else ;
    
#line 3784 
    sensor_index = (unsigned char)((unsigned int)((unsigned char)((int)ets_sensor >> 8)) & 3U);
    
#line 3786 
    sensor_location = (unsigned char)((unsigned int)((unsigned char)((int)ets_sensor >> 10)) & 15U);
    
#line 3789 
    if ((unsigned int)sensor_location != 0U) {
      
#line 3790 
      status = (*(hw->phy.ops.read_i2c_byte))(hw,(unsigned char)((int)ixgbe_emc_temp_data[(int)sensor_index]),(unsigned char)248,& data->sensor[(int)i].temp);
      
#line 3794 
      if (status != 0) {
        
#line 3795 
        __retres = status;
        
#line 3795 
        goto return_label;
      }
      else ;
    }
    else ;
  }
  
#line 3775 
  i = (u8)((int)i + 1);
  ldv_55655: 
#line 3776 
  ;
  
#line 3775 
  if ((int)i < (int)num_sensors) 
#line 3777 
                                 goto ldv_55654; else 
#line 3780 
                                                      goto ldv_55656;
  ldv_55656: 
#line 3781 
  ;
  
#line 3799 
  __retres = 0;
  return_label: 
#line 3799 
                return __retres;
}


#line 3809  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c"
s32 ixgbe_init_thermal_sensor_thresh_generic(struct ixgbe_hw *hw)
{
  s32 __retres;
  s32 status;
  u16 ets_offset;
  u16 ets_cfg;
  u16 ets_sensor;
  u8 low_thresh_delta;
  u8 num_sensors;
  u8 therm_limit;
  u8 i;
  u32 tmp;
  
#line 3819 
  struct ixgbe_thermal_sensor_data *data = & hw->mac.thermal_sensor_data;
  
#line 3821 
  memset((void *)data,0,12UL);
  
#line 3824 
  tmp = ixgbe_read_reg(hw,8U);
  
#line 3824 
  if ((tmp & 4U) != 0U) {
    
#line 3825 
    __retres = 2147483647;
    
#line 3825 
    goto return_label;
  }
  else ;
  
#line 3827 
  status = ixgbe_get_ets_data(hw,& ets_cfg,& ets_offset);
  
#line 3828 
  if (status != 0) {
    
#line 3829 
    __retres = status;
    
#line 3829 
    goto return_label;
  }
  else ;
  
#line 3831 
  low_thresh_delta = (unsigned char)((unsigned int)((unsigned char)((int)ets_cfg >> 6)) & 31U);
  
#line 3833 
  num_sensors = (unsigned char)((unsigned int)((unsigned char)ets_cfg) & 7U);
  
#line 3834 
  if ((unsigned int)num_sensors > 3U) 
#line 3835 
                                      num_sensors = (unsigned char)3U; else ;
  
#line 3837 
  i = (unsigned char)0U;
  
#line 3837 
  goto ldv_55673;
  ldv_55672: 
#line 3838 
  ;
  {
    u8 sensor_index;
    u8 sensor_location;
    s32 tmp_0;
    
#line 3841 
    tmp_0 = (*(hw->eeprom.ops.read))(hw,(unsigned short)((int)((unsigned int)((int)((unsigned short)i) + (int)ets_offset) + 1U)),& ets_sensor);
    
#line 3841 
    if (tmp_0 != 0) {
      
#line 3842 
      netdev_err((struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"eeprom read at offset %d failed\n",((int)ets_offset + 1) + (int)i);
      
#line 3844 
      goto ldv_55671;
    }
    else ;
    
#line 3846 
    sensor_index = (unsigned char)((unsigned int)((unsigned char)((int)ets_sensor >> 8)) & 3U);
    
#line 3848 
    sensor_location = (unsigned char)((unsigned int)((unsigned char)((int)ets_sensor >> 10)) & 15U);
    
#line 3850 
    therm_limit = (unsigned char)ets_sensor;
    
#line 3852 
    (*(hw->phy.ops.write_i2c_byte))(hw,(unsigned char)((int)ixgbe_emc_therm_limit[(int)sensor_index]),(unsigned char)248,(unsigned char)((int)therm_limit));
    
#line 3856 
    if ((unsigned int)sensor_location == 0U) 
#line 3857 
                                             goto ldv_55671; else ;
    
#line 3859 
    data->sensor[(int)i].location = sensor_location;
    
#line 3860 
    data->sensor[(int)i].caution_thresh = therm_limit;
    
#line 3861 
    data->sensor[(int)i].max_op_thresh = (unsigned char)((int)therm_limit - (int)low_thresh_delta);
  }
  ldv_55671: 
#line 3863 
  ;
  
#line 3837 
  i = (u8)((int)i + 1);
  ldv_55673: 
#line 3838 
  ;
  
#line 3837 
  if ((int)i < (int)num_sensors) 
#line 3839 
                                 goto ldv_55672; else 
#line 3842 
                                                      goto ldv_55674;
  ldv_55674: 
#line 3843 
  ;
  
#line 3864 
  __retres = 0;
  return_label: 
#line 3864 
                return __retres;
}


#line 3867  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c"
void ixgbe_disable_rx_generic(struct ixgbe_hw *hw)
{
  u32 rxctrl;
  
#line 3871 
  rxctrl = ixgbe_read_reg(hw,12288U);
  
#line 3872 
  if ((rxctrl & 1U) != 0U) {
    
#line 3873 
    if (hw->mac.type != (unsigned int)ixgbe_mac_82598EB) {
      u32 pfdtxgswc;
      
#line 3876 
      pfdtxgswc = ixgbe_read_reg(hw,33312U);
      
#line 3877 
      if ((pfdtxgswc & 1U) != 0U) {
        
#line 3878 
        pfdtxgswc &= 4294967294U;
        
#line 3879 
        ixgbe_write_reg(hw,33312U,pfdtxgswc);
        
#line 3880 
        hw->mac.set_lben = (_Bool)1;
      }
      else 
#line 3882 
           hw->mac.set_lben = (_Bool)0;
    }
    else ;
    
#line 3885 
    rxctrl &= 4294967294U;
    
#line 3886 
    ixgbe_write_reg(hw,12288U,rxctrl);
  }
  else ;
  
#line 3888 
  return;
}


#line 3890  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c"
void ixgbe_enable_rx_generic(struct ixgbe_hw *hw)
{
  u32 rxctrl;
  
#line 3894 
  rxctrl = ixgbe_read_reg(hw,12288U);
  
#line 3895 
  ixgbe_write_reg(hw,12288U,rxctrl | 1U);
  
#line 3897 
  if (hw->mac.type != (unsigned int)ixgbe_mac_82598EB) {
    
#line 3898 
    if ((int)hw->mac.set_lben != 0) {
      u32 pfdtxgswc;
      
#line 3901 
      pfdtxgswc = ixgbe_read_reg(hw,33312U);
      
#line 3902 
      pfdtxgswc |= 1U;
      
#line 3903 
      ixgbe_write_reg(hw,33312U,pfdtxgswc);
      
#line 3904 
      hw->mac.set_lben = (_Bool)0;
    }
    else ;
  }
  else ;
  
#line 3906 
  return;
}


#line 150  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_phy.h"
s32 ixgbe_identify_sfp_module_generic(struct ixgbe_hw *hw);


#line 44  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x540.c"
static s32 ixgbe_update_flash_X540(struct ixgbe_hw *hw);


#line 45 
static s32 ixgbe_poll_flash_update_done_X540(struct ixgbe_hw *hw);


#line 46 
static s32 ixgbe_get_swfw_sync_semaphore(struct ixgbe_hw *hw);


#line 47 
static void ixgbe_release_swfw_sync_semaphore(struct ixgbe_hw *hw);


#line 49  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x540.c"
enum ixgbe_media_type ixgbe_get_media_type_X540(struct ixgbe_hw *hw)
{
  enum ixgbe_media_type __retres;
  
#line 51 
  __retres = ixgbe_media_type_copper;
  
#line 51 
  return __retres;
}


#line 54  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x540.c"
s32 ixgbe_get_invariants_X540(struct ixgbe_hw *hw)
{
  s32 __retres;
  
#line 56 
  struct ixgbe_mac_info *mac = & hw->mac;
  
#line 58 
  mac->mcft_size = 128U;
  
#line 59 
  mac->vft_size = 128U;
  
#line 60 
  mac->num_rar_entries = 128U;
  
#line 61 
  mac->rx_pb_size = 384U;
  
#line 62 
  mac->max_rx_queues = 128U;
  
#line 63 
  mac->max_tx_queues = 128U;
  
#line 64 
  mac->max_msix_vectors = ixgbe_get_pcie_msix_count_generic(hw);
  
#line 66 
  __retres = 0;
  
#line 66 
  return __retres;
}


#line 75  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x540.c"
s32 ixgbe_setup_mac_link_X540(struct ixgbe_hw *hw, ixgbe_link_speed speed, bool autoneg_wait_to_complete)
{
  s32 tmp;
  
#line 78 
  tmp = (*(hw->phy.ops.setup_link_speed))(hw,speed,(_Bool)((bool)((int)autoneg_wait_to_complete) != 0));
  
#line 78 
  return tmp;
}


#line 90  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x540.c"
s32 ixgbe_reset_hw_X540(struct ixgbe_hw *hw)
{
  s32 __retres;
  s32 status;
  u32 ctrl;
  u32 i;
  u32 tmp;
  bool tmp_0;
  
#line 96 
  status = (*(hw->mac.ops.stop_adapter))(hw);
  
#line 97 
  if (status != 0) {
    
#line 98 
    __retres = status;
    
#line 98 
    goto return_label;
  }
  else ;
  
#line 101 
  ixgbe_clear_tx_pending(hw);
  mac_reset_top: 
#line 103 
  ;
  
#line 104 
  ctrl = 67108864U;
  
#line 105 
  tmp = ixgbe_read_reg(hw,0U);
  
#line 105 
  ctrl = tmp | ctrl;
  
#line 106 
  ixgbe_write_reg(hw,0U,ctrl);
  
#line 107 
  ixgbe_read_reg(hw,8U);
  
#line 110 
  i = 0U;
  
#line 110 
  goto ldv_54724;
  ldv_54723: 
#line 111 
  ;
  
#line 111 
  __const_udelay(4295UL);
  
#line 112 
  ctrl = ixgbe_read_reg(hw,0U);
  
#line 113 
  if ((ctrl & 67108872U) == 0U) 
#line 114 
                                goto ldv_54722; else ;
  
#line 110 
  i += 1U;
  ldv_54724: 
#line 111 
  ;
  
#line 110 
  if (i <= 9U) 
#line 112 
               goto ldv_54723; else 
#line 115 
                                    goto ldv_54722;
  ldv_54722: 
#line 116 
  ;
  
#line 117 
  if ((ctrl & 67108872U) != 0U) {
    
#line 118 
    status = -15;
    {
      
#line 119 
      struct _ddebug descriptor = {.modname = "ixgbe", .function = "ixgbe_reset_hw_X540", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x540.c", .format = "Reset polling failed to complete.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))119U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 119 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 119 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"Reset polling failed to complete.\n"); else ;
    }
  }
  else ;
  
#line 121 
  msleep(100U);
  
#line 128 
  if (((int)hw->mac.flags & 1) != 0) {
    
#line 129 
    hw->mac.flags = (unsigned char)((unsigned int)hw->mac.flags & 254U);
    
#line 130 
    goto mac_reset_top;
  }
  else ;
  
#line 134 
  ixgbe_write_reg(hw,15360U,393216U);
  
#line 137 
  (*(hw->mac.ops.get_mac_addr))(hw,(u8 *)(& hw->mac.perm_addr));
  
#line 144 
  hw->mac.num_rar_entries = 128U;
  
#line 145 
  (*(hw->mac.ops.init_rx_addrs))(hw);
  
#line 148 
  (*(hw->mac.ops.get_san_mac_addr))(hw,(u8 *)(& hw->mac.san_addr));
  
#line 151 
  tmp_0 = is_valid_ether_addr((u8 const *)(& hw->mac.san_addr));
  
#line 151 
  if ((int)tmp_0 != 0) {
    
#line 152 
    (*(hw->mac.ops.set_rar))(hw,hw->mac.num_rar_entries + 4294967295U,(u8 *)(& hw->mac.san_addr),0U,2147483648U);
    
#line 156 
    hw->mac.san_mac_rar_index = (unsigned char)((unsigned int)((unsigned char)hw->mac.num_rar_entries) + 255U);
    
#line 159 
    hw->mac.num_rar_entries -= 1U;
  }
  else ;
  
#line 163 
  (*(hw->mac.ops.get_wwn_prefix))(hw,& hw->mac.wwnn_prefix,& hw->mac.wwpn_prefix);
  
#line 166 
  __retres = status;
  return_label: 
#line 166 
                return __retres;
}


#line 177  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x540.c"
s32 ixgbe_start_hw_X540(struct ixgbe_hw *hw)
{
  s32 __retres;
  s32 ret_val;
  s32 tmp;
  
#line 181 
  ret_val = ixgbe_start_hw_generic(hw);
  
#line 182 
  if (ret_val != 0) {
    
#line 183 
    __retres = ret_val;
    
#line 183 
    goto return_label;
  }
  else ;
  
#line 185 
  tmp = ixgbe_start_hw_gen2(hw);
  
#line 185 
  __retres = tmp;
  return_label: 
#line 185 
                return __retres;
}


#line 195  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x540.c"
s32 ixgbe_init_eeprom_params_X540(struct ixgbe_hw *hw)
{
  s32 __retres;
  u32 eec;
  u16 eeprom_size;
  
#line 197 
  struct ixgbe_eeprom_info *eeprom = & hw->eeprom;
  
#line 201 
  if (eeprom->type == (unsigned int)ixgbe_eeprom_uninitialized) {
    
#line 202 
    eeprom->semaphore_delay = 10U;
    
#line 203 
    eeprom->type = ixgbe_flash;
    
#line 205 
    eec = ixgbe_read_reg(hw,*(hw->mvals));
    
#line 206 
    eeprom_size = (unsigned short)((unsigned int)((unsigned short)(eec >> 11)) & 15U);
    
#line 208 
    eeprom->word_size = (unsigned short)(1 << ((int)eeprom_size + 6));
    {
      
#line 211 
      struct _ddebug descriptor = {.modname = "ixgbe", .function = "ixgbe_init_eeprom_params_X540", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x540.c", .format = "Eeprom params: type = %d, size = %d\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))212U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 211 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 211 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"Eeprom params: type = %d, size = %d\n",(unsigned int)eeprom->type,(int)eeprom->word_size); else ;
    }
  }
  else ;
  
#line 215 
  __retres = 0;
  
#line 215 
  return __retres;
}


#line 226  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x540.c"
static s32 ixgbe_read_eerd_X540(struct ixgbe_hw *hw, u16 offset, u16 *data)
{
  s32 __retres;
  s32 status;
  s32 tmp;
  
#line 230 
  tmp = (*(hw->mac.ops.acquire_swfw_sync))(hw,1U);
  
#line 230 
  if (tmp != 0) {
    
#line 231 
    __retres = -16;
    
#line 231 
    goto return_label;
  }
  else ;
  
#line 233 
  status = ixgbe_read_eerd_generic(hw,(unsigned short)((int)offset),data);
  
#line 235 
  (*(hw->mac.ops.release_swfw_sync))(hw,1U);
  
#line 236 
  __retres = status;
  return_label: 
#line 236 
                return __retres;
}


#line 248  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x540.c"
static s32 ixgbe_read_eerd_buffer_X540(struct ixgbe_hw *hw, u16 offset, u16 words, u16 *data)
{
  s32 __retres;
  s32 status;
  s32 tmp;
  
#line 253 
  tmp = (*(hw->mac.ops.acquire_swfw_sync))(hw,1U);
  
#line 253 
  if (tmp != 0) {
    
#line 254 
    __retres = -16;
    
#line 254 
    goto return_label;
  }
  else ;
  
#line 256 
  status = ixgbe_read_eerd_buffer_generic(hw,(unsigned short)((int)offset),(unsigned short)((int)words),data);
  
#line 258 
  (*(hw->mac.ops.release_swfw_sync))(hw,1U);
  
#line 259 
  __retres = status;
  return_label: 
#line 259 
                return __retres;
}


#line 270  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x540.c"
static s32 ixgbe_write_eewr_X540(struct ixgbe_hw *hw, u16 offset, u16 data)
{
  s32 __retres;
  s32 status;
  s32 tmp;
  
#line 274 
  tmp = (*(hw->mac.ops.acquire_swfw_sync))(hw,1U);
  
#line 274 
  if (tmp != 0) {
    
#line 275 
    __retres = -16;
    
#line 275 
    goto return_label;
  }
  else ;
  
#line 277 
  status = ixgbe_write_eewr_generic(hw,(unsigned short)((int)offset),(unsigned short)((int)data));
  
#line 279 
  (*(hw->mac.ops.release_swfw_sync))(hw,1U);
  
#line 280 
  __retres = status;
  return_label: 
#line 280 
                return __retres;
}


#line 292  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x540.c"
static s32 ixgbe_write_eewr_buffer_X540(struct ixgbe_hw *hw, u16 offset, u16 words, u16 *data)
{
  s32 __retres;
  s32 status;
  s32 tmp;
  
#line 297 
  tmp = (*(hw->mac.ops.acquire_swfw_sync))(hw,1U);
  
#line 297 
  if (tmp != 0) {
    
#line 298 
    __retres = -16;
    
#line 298 
    goto return_label;
  }
  else ;
  
#line 300 
  status = ixgbe_write_eewr_buffer_generic(hw,(unsigned short)((int)offset),(unsigned short)((int)words),data);
  
#line 302 
  (*(hw->mac.ops.release_swfw_sync))(hw,1U);
  
#line 303 
  __retres = status;
  return_label: 
#line 303 
                return __retres;
}


#line 314  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x540.c"
static s32 ixgbe_calc_eeprom_checksum_X540(struct ixgbe_hw *hw)
{
  s32 __retres;
  u16 i;
  u16 j;
  s32 tmp;
  s32 tmp_0;
  s32 tmp_1;
  s32 tmp_2;
  
#line 318 
  u16 checksum = (unsigned short)0U;
  
#line 319 
  u16 length = (unsigned short)0U;
  
#line 320 
  u16 pointer = (unsigned short)0U;
  
#line 321 
  u16 word = (unsigned short)0U;
  
#line 322 
  u16 checksum_last_word = (unsigned short)63U;
  
#line 323 
  u16 ptr_start = (unsigned short)3U;
  
#line 332 
  i = (unsigned short)0U;
  
#line 332 
  goto ldv_54779;
  ldv_54778: 
#line 333 
  ;
  
#line 333 
  tmp = ixgbe_read_eerd_generic(hw,(unsigned short)((int)i),& word);
  
#line 333 
  if (tmp != 0) {
    {
      
#line 334 
      struct _ddebug descriptor = {.modname = "ixgbe", .function = "ixgbe_calc_eeprom_checksum_X540", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x540.c", .format = "EEPROM read failed\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))334U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 334 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 334 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"EEPROM read failed\n"); else ;
    }
    
#line 335 
    __retres = -1;
    
#line 335 
    goto return_label;
  }
  else ;
  
#line 337 
  checksum = (unsigned short)((int)checksum + (int)word);
  
#line 332 
  i = (u16)((int)i + 1);
  ldv_54779: 
#line 333 
  ;
  
#line 332 
  if ((int)i < (int)checksum_last_word) 
#line 334 
                                        goto ldv_54778; else 
#line 337 
                                                             goto ldv_54780;
  ldv_54780: 
#line 338 
  ;
  
#line 344 
  i = ptr_start;
  
#line 344 
  goto ldv_54790;
  ldv_54789: 
#line 345 
  ;
  
#line 345 
  if ((unsigned int)i + 65532U <= 1U) 
#line 346 
                                      goto ldv_54781; else ;
  
#line 348 
  tmp_0 = ixgbe_read_eerd_generic(hw,(unsigned short)((int)i),& pointer);
  
#line 348 
  if (tmp_0 != 0) {
    {
      
#line 349 
      struct _ddebug descriptor_0 = {.modname = "ixgbe", .function = "ixgbe_calc_eeprom_checksum_X540", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x540.c", .format = "EEPROM read failed\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))349U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 349 
      if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 349 
                                                            __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"EEPROM read failed\n"); else ;
    }
    
#line 350 
    goto ldv_54783;
  }
  else ;
  
#line 354 
  if ((unsigned int)pointer + 65535U > 65533U || (int)hw->eeprom.word_size <= (int)pointer) 
    
#line 356 
    goto ldv_54781; else ;
  
#line 358 
  tmp_1 = ixgbe_read_eerd_generic(hw,(unsigned short)((int)pointer),& length);
  
#line 358 
  if (tmp_1 != 0) {
    {
      
#line 359 
      struct _ddebug descriptor_1 = {.modname = "ixgbe", .function = "ixgbe_calc_eeprom_checksum_X540", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x540.c", .format = "EEPROM read failed\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))359U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 359 
      if ((long)(((int)descriptor_1.flags & 1) != 0) != 0L) 
#line 359 
                                                            __dynamic_netdev_dbg(& descriptor_1,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"EEPROM read failed\n"); else ;
    }
    
#line 360 
    __retres = -1;
    
#line 360 
    goto return_label;
  }
  else ;
  
#line 365 
  if ((unsigned int)length + 65535U > 65533U || (int)pointer + (int)length >= (int)hw->eeprom.word_size) 
    
#line 367 
    goto ldv_54781; else ;
  
#line 369 
  j = (unsigned short)((unsigned int)pointer + 1U);
  
#line 369 
  goto ldv_54787;
  ldv_54786: 
#line 370 
  ;
  
#line 370 
  tmp_2 = ixgbe_read_eerd_generic(hw,(unsigned short)((int)j),& word);
  
#line 370 
  if (tmp_2 != 0) {
    {
      
#line 371 
      struct _ddebug descriptor_2 = {.modname = "ixgbe", .function = "ixgbe_calc_eeprom_checksum_X540", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x540.c", .format = "EEPROM read failed\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))371U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 371 
      if ((long)(((int)descriptor_2.flags & 1) != 0) != 0L) 
#line 371 
                                                            __dynamic_netdev_dbg(& descriptor_2,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"EEPROM read failed\n"); else ;
    }
    
#line 372 
    __retres = -1;
    
#line 372 
    goto return_label;
  }
  else ;
  
#line 374 
  checksum = (unsigned short)((int)checksum + (int)word);
  
#line 369 
  j = (u16)((int)j + 1);
  ldv_54787: 
#line 370 
  ;
  
#line 369 
  if ((int)j <= (int)pointer + (int)length) 
#line 371 
                                            goto ldv_54786; else 
#line 374 
                                                                 goto ldv_54788;
  ldv_54788: 
#line 375 
  ;
  ldv_54781: 
#line 376 
  ;
  
#line 344 
  i = (u16)((int)i + 1);
  ldv_54790: 
#line 345 
  ;
  
#line 344 
  if ((unsigned int)i <= 14U) 
#line 346 
                              goto ldv_54789; else 
#line 349 
                                                   goto ldv_54783;
  ldv_54783: 
#line 350 
  ;
  
#line 378 
  checksum = (unsigned short)(47802U - (unsigned int)checksum);
  
#line 380 
  __retres = (int)checksum;
  return_label: 
#line 380 
                return __retres;
}


#line 391  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x540.c"
static s32 ixgbe_validate_eeprom_checksum_X540(struct ixgbe_hw *hw, u16 *checksum_val)
{
  s32 __retres;
  s32 status;
  u16 checksum;
  s32 tmp;
  
#line 396 
  u16 read_checksum = (unsigned short)0U;
  
#line 402 
  status = (*(hw->eeprom.ops.read))(hw,(unsigned short)0,& checksum);
  
#line 403 
  if (status != 0) {
    {
      
#line 404 
      struct _ddebug descriptor = {.modname = "ixgbe", .function = "ixgbe_validate_eeprom_checksum_X540", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x540.c", .format = "EEPROM read failed\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))404U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 404 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 404 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"EEPROM read failed\n"); else ;
    }
    
#line 405 
    __retres = status;
    
#line 405 
    goto return_label;
  }
  else ;
  
#line 408 
  tmp = (*(hw->mac.ops.acquire_swfw_sync))(hw,1U);
  
#line 408 
  if (tmp != 0) {
    
#line 409 
    __retres = -16;
    
#line 409 
    goto return_label;
  }
  else ;
  
#line 411 
  status = (*(hw->eeprom.ops.calc_checksum))(hw);
  
#line 412 
  if (status < 0) 
#line 413 
                  goto out; else ;
  
#line 415 
  checksum = (unsigned short)status;
  
#line 420 
  status = ixgbe_read_eerd_generic(hw,(unsigned short)63,& read_checksum);
  
#line 422 
  if (status != 0) 
#line 423 
                   goto out; else ;
  
#line 428 
  if ((int)read_checksum != (int)checksum) {
    {
      
#line 429 
      struct _ddebug descriptor_0 = {.modname = "ixgbe", .function = "ixgbe_validate_eeprom_checksum_X540", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x540.c", .format = "Invalid EEPROM checksum", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))429U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 429 
      if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 429 
                                                            __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"Invalid EEPROM checksum"); else ;
    }
    
#line 430 
    status = -2;
  }
  else ;
  
#line 434 
  if (checksum_val != (u16 *)0U) 
#line 435 
                                 *checksum_val = checksum; else ;
  out: 
#line 437 
  ;
  
#line 438 
  (*(hw->mac.ops.release_swfw_sync))(hw,1U);
  
#line 440 
  __retres = status;
  return_label: 
#line 440 
                return __retres;
}


#line 451  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x540.c"
static s32 ixgbe_update_eeprom_checksum_X540(struct ixgbe_hw *hw)
{
  s32 __retres;
  s32 status;
  u16 checksum;
  s32 tmp;
  
#line 460 
  status = (*(hw->eeprom.ops.read))(hw,(unsigned short)0,& checksum);
  
#line 461 
  if (status != 0) {
    {
      
#line 462 
      struct _ddebug descriptor = {.modname = "ixgbe", .function = "ixgbe_update_eeprom_checksum_X540", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x540.c", .format = "EEPROM read failed\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))462U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 462 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 462 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"EEPROM read failed\n"); else ;
    }
    
#line 463 
    __retres = status;
    
#line 463 
    goto return_label;
  }
  else ;
  
#line 466 
  tmp = (*(hw->mac.ops.acquire_swfw_sync))(hw,1U);
  
#line 466 
  if (tmp != 0) {
    
#line 467 
    __retres = -16;
    
#line 467 
    goto return_label;
  }
  else ;
  
#line 469 
  status = (*(hw->eeprom.ops.calc_checksum))(hw);
  
#line 470 
  if (status < 0) 
#line 471 
                  goto out; else ;
  
#line 473 
  checksum = (unsigned short)status;
  
#line 478 
  status = ixgbe_write_eewr_generic(hw,(unsigned short)63,(unsigned short)((int)checksum));
  
#line 479 
  if (status != 0) 
#line 480 
                   goto out; else ;
  
#line 482 
  status = ixgbe_update_flash_X540(hw);
  out: 
#line 484 
  ;
  
#line 485 
  (*(hw->mac.ops.release_swfw_sync))(hw,1U);
  
#line 486 
  __retres = status;
  return_label: 
#line 486 
                return __retres;
}


#line 496  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x540.c"
static s32 ixgbe_update_flash_X540(struct ixgbe_hw *hw)
{
  s32 __retres;
  u32 flup;
  s32 status;
  u32 tmp;
  
#line 501 
  status = ixgbe_poll_flash_update_done_X540(hw);
  
#line 502 
  if (status == -1) {
    {
      
#line 503 
      struct _ddebug descriptor = {.modname = "ixgbe", .function = "ixgbe_update_flash_X540", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x540.c", .format = "Flash update time out\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))503U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 503 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 503 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"Flash update time out\n"); else ;
    }
    
#line 504 
    __retres = status;
    
#line 504 
    goto return_label;
  }
  else ;
  
#line 507 
  tmp = ixgbe_read_reg(hw,*(hw->mvals));
  
#line 507 
  flup = tmp | 8388608U;
  
#line 508 
  ixgbe_write_reg(hw,*(hw->mvals),flup);
  
#line 510 
  status = ixgbe_poll_flash_update_done_X540(hw);
  
#line 511 
  if (status == 0) {
    
#line 512 
    struct _ddebug descriptor_0 = {.modname = "ixgbe", .function = "ixgbe_update_flash_X540", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x540.c", .format = "Flash update complete\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))512U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 512 
    if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 512 
                                                          __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"Flash update complete\n"); else ;
  }
  else {
    
#line 514 
    struct _ddebug descriptor_1 = {.modname = "ixgbe", .function = "ixgbe_update_flash_X540", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x540.c", .format = "Flash update time out\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))514U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 514 
    if ((long)(((int)descriptor_1.flags & 1) != 0) != 0L) 
#line 514 
                                                          __dynamic_netdev_dbg(& descriptor_1,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"Flash update time out\n"); else ;
  }
  
#line 516 
  if ((unsigned int)hw->revision_id == 0U) {
    
#line 517 
    flup = ixgbe_read_reg(hw,*(hw->mvals));
    
#line 519 
    if ((flup & 33554432U) != 0U) {
      
#line 520 
      flup |= 8388608U;
      
#line 521 
      ixgbe_write_reg(hw,*(hw->mvals),flup);
    }
    else ;
    
#line 524 
    status = ixgbe_poll_flash_update_done_X540(hw);
    
#line 525 
    if (status == 0) {
      
#line 526 
      struct _ddebug descriptor_2 = {.modname = "ixgbe", .function = "ixgbe_update_flash_X540", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x540.c", .format = "Flash update complete\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))526U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 526 
      if ((long)(((int)descriptor_2.flags & 1) != 0) != 0L) 
#line 526 
                                                            __dynamic_netdev_dbg(& descriptor_2,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"Flash update complete\n"); else ;
    }
    else {
      
#line 528 
      struct _ddebug descriptor_3 = {.modname = "ixgbe", .function = "ixgbe_update_flash_X540", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x540.c", .format = "Flash update time out\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))528U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 528 
      if ((long)(((int)descriptor_3.flags & 1) != 0) != 0L) 
#line 528 
                                                            __dynamic_netdev_dbg(& descriptor_3,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"Flash update time out\n"); else ;
    }
  }
  else ;
  
#line 531 
  __retres = status;
  return_label: 
#line 531 
                return __retres;
}


#line 541  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x540.c"
static s32 ixgbe_poll_flash_update_done_X540(struct ixgbe_hw *hw)
{
  s32 __retres;
  u32 i;
  u32 reg;
  
#line 546 
  i = 0U;
  
#line 546 
  goto ldv_54827;
  ldv_54826: 
#line 547 
  ;
  
#line 547 
  reg = ixgbe_read_reg(hw,*(hw->mvals));
  
#line 548 
  if ((reg & 67108864U) != 0U) {
    
#line 549 
    __retres = 0;
    
#line 549 
    goto return_label;
  }
  else ;
  
#line 550 
  __const_udelay(21475UL);
  
#line 546 
  i += 1U;
  ldv_54827: 
#line 547 
  ;
  
#line 546 
  if (i <= 19999U) 
#line 548 
                   goto ldv_54826; else 
#line 551 
                                        goto ldv_54828;
  ldv_54828: 
#line 552 
  ;
  
#line 552 
  __retres = -1;
  return_label: 
#line 552 
                return __retres;
}


#line 563  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x540.c"
s32 ixgbe_acquire_swfw_sync_X540(struct ixgbe_hw *hw, u32 mask)
{
  s32 __retres;
  u32 swfw_sync;
  u32 i;
  s32 tmp;
  
#line 566 
  u32 swmask = mask;
  
#line 567 
  u32 fwmask = mask << 5;
  
#line 568 
  u32 hwmask = 0U;
  
#line 569 
  u32 timeout = 200U;
  
#line 572 
  if (swmask == 1U) 
#line 573 
                    hwmask = 16U; else ;
  
#line 575 
  i = 0U;
  
#line 575 
  goto ldv_54841;
  ldv_54840: 
#line 576 
  ;
  
#line 580 
  tmp = ixgbe_get_swfw_sync_semaphore(hw);
  
#line 580 
  if (tmp != 0) {
    
#line 581 
    __retres = -16;
    
#line 581 
    goto return_label;
  }
  else ;
  
#line 583 
  swfw_sync = ixgbe_read_reg(hw,*(hw->mvals + 6U));
  
#line 584 
  if ((((fwmask | swmask) | hwmask) & swfw_sync) == 0U) {
    
#line 585 
    swfw_sync |= swmask;
    
#line 586 
    ixgbe_write_reg(hw,*(hw->mvals + 6U),swfw_sync);
    
#line 587 
    ixgbe_release_swfw_sync_semaphore(hw);
    
#line 588 
    goto ldv_54839;
  }
  else {
    
#line 596 
    ixgbe_release_swfw_sync_semaphore(hw);
    
#line 597 
    usleep_range(5000UL,10000UL);
  }
  
#line 575 
  i += 1U;
  ldv_54841: 
#line 576 
  ;
  
#line 575 
  if (i < timeout) 
#line 577 
                   goto ldv_54840; else 
#line 580 
                                        goto ldv_54839;
  ldv_54839: 
#line 581 
  ;
  
#line 607 
  if (i >= timeout) {
    
#line 608 
    swfw_sync = ixgbe_read_reg(hw,*(hw->mvals + 6U));
    
#line 609 
    if (((fwmask | hwmask) & swfw_sync) != 0U) {
      s32 tmp_0;
      
#line 610 
      tmp_0 = ixgbe_get_swfw_sync_semaphore(hw);
      
#line 610 
      if (tmp_0 != 0) {
        
#line 611 
        __retres = -16;
        
#line 611 
        goto return_label;
      }
      else ;
      
#line 613 
      swfw_sync |= swmask;
      
#line 614 
      ixgbe_write_reg(hw,*(hw->mvals + 6U),swfw_sync);
      
#line 615 
      ixgbe_release_swfw_sync_semaphore(hw);
    }
    else ;
  }
  else ;
  
#line 619 
  usleep_range(5000UL,10000UL);
  
#line 620 
  __retres = 0;
  return_label: 
#line 620 
                return __retres;
}


#line 631  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x540.c"
void ixgbe_release_swfw_sync_X540(struct ixgbe_hw *hw, u32 mask)
{
  u32 swfw_sync;
  
#line 634 
  u32 swmask = mask;
  
#line 636 
  ixgbe_get_swfw_sync_semaphore(hw);
  
#line 638 
  swfw_sync = ixgbe_read_reg(hw,*(hw->mvals + 6U));
  
#line 639 
  swfw_sync = ~ swmask & swfw_sync;
  
#line 640 
  ixgbe_write_reg(hw,*(hw->mvals + 6U),swfw_sync);
  
#line 642 
  ixgbe_release_swfw_sync_semaphore(hw);
  
#line 643 
  usleep_range(5000UL,10000UL);
  
#line 644 
  return;
}


#line 652  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x540.c"
static s32 ixgbe_get_swfw_sync_semaphore(struct ixgbe_hw *hw)
{
  s32 __retres;
  u32 i;
  u32 swsm;
  
#line 654 
  u32 timeout = 2000U;
  
#line 659 
  i = 0U;
  
#line 659 
  goto ldv_54856;
  ldv_54855: 
#line 660 
  ;
  
#line 663 
  swsm = ixgbe_read_reg(hw,*(hw->mvals + 5U));
  
#line 664 
  if ((swsm & 1U) == 0U) 
#line 665 
                         goto ldv_54854; else ;
  
#line 666 
  usleep_range(50UL,100UL);
  
#line 659 
  i += 1U;
  ldv_54856: 
#line 660 
  ;
  
#line 659 
  if (i < timeout) 
#line 661 
                   goto ldv_54855; else 
#line 664 
                                        goto ldv_54854;
  ldv_54854: 
#line 665 
  ;
  
#line 669 
  if (i == timeout) {
    {
      
#line 670 
      struct _ddebug descriptor = {.modname = "ixgbe", .function = "ixgbe_get_swfw_sync_semaphore", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x540.c", .format = "Software semaphore SMBI between device drivers not granted.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))671U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 670 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 670 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"Software semaphore SMBI between device drivers not granted.\n"); else ;
    }
    
#line 672 
    __retres = -1;
    
#line 672 
    goto return_label;
  }
  else ;
  
#line 676 
  i = 0U;
  
#line 676 
  goto ldv_54860;
  ldv_54859: 
#line 677 
  ;
  
#line 677 
  swsm = ixgbe_read_reg(hw,*(hw->mvals + 6U));
  
#line 678 
  if (swsm >= (u32)0) {
    
#line 679 
    __retres = 0;
    
#line 679 
    goto return_label;
  }
  else ;
  
#line 681 
  usleep_range(50UL,100UL);
  
#line 676 
  i += 1U;
  ldv_54860: 
#line 677 
  ;
  
#line 676 
  if (i < timeout) 
#line 678 
                   goto ldv_54859; else 
#line 681 
                                        goto ldv_54861;
  ldv_54861: 
#line 682 
  ;
  
#line 684 
  __retres = -1;
  return_label: 
#line 684 
                return __retres;
}


#line 693  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x540.c"
static void ixgbe_release_swfw_sync_semaphore(struct ixgbe_hw *hw)
{
  u32 swsm;
  
#line 699 
  swsm = ixgbe_read_reg(hw,*(hw->mvals + 6U));
  
#line 700 
  swsm &= 2147483647U;
  
#line 701 
  ixgbe_write_reg(hw,*(hw->mvals + 6U),swsm);
  
#line 703 
  swsm = ixgbe_read_reg(hw,*(hw->mvals + 5U));
  
#line 704 
  swsm &= 4294967294U;
  
#line 705 
  ixgbe_write_reg(hw,*(hw->mvals + 5U),swsm);
  
#line 707 
  ixgbe_read_reg(hw,8U);
  
#line 708 
  return;
}


#line 718  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x540.c"
s32 ixgbe_blink_led_start_X540(struct ixgbe_hw *hw, u32 index)
{
  s32 __retres;
  u32 macc_reg;
  u32 ledctl_reg;
  ixgbe_link_speed speed;
  bool link_up;
  
#line 730 
  (*(hw->mac.ops.check_link))(hw,& speed,& link_up,(_Bool)0);
  
#line 731 
  if (! link_up) {
    
#line 732 
    macc_reg = ixgbe_read_reg(hw,17200U);
    
#line 733 
    macc_reg |= 458753U;
    
#line 734 
    ixgbe_write_reg(hw,17200U,macc_reg);
  }
  else ;
  
#line 737 
  ledctl_reg = ixgbe_read_reg(hw,512U);
  
#line 738 
  ledctl_reg = (unsigned int)(~ (15 << index * 8U)) & ledctl_reg;
  
#line 739 
  ledctl_reg = (unsigned int)(128 << index * 8U) | ledctl_reg;
  
#line 740 
  ixgbe_write_reg(hw,512U,ledctl_reg);
  
#line 741 
  ixgbe_read_reg(hw,8U);
  
#line 743 
  __retres = 0;
  
#line 743 
  return __retres;
}


#line 754  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x540.c"
s32 ixgbe_blink_led_stop_X540(struct ixgbe_hw *hw, u32 index)
{
  s32 __retres;
  u32 macc_reg;
  u32 ledctl_reg;
  
#line 760 
  ledctl_reg = ixgbe_read_reg(hw,512U);
  
#line 761 
  ledctl_reg = (unsigned int)(~ (15 << index * 8U)) & ledctl_reg;
  
#line 762 
  ledctl_reg = (unsigned int)(4 << index * 8U) | ledctl_reg;
  
#line 763 
  ledctl_reg = (unsigned int)(~ (128 << index * 8U)) & ledctl_reg;
  
#line 764 
  ixgbe_write_reg(hw,512U,ledctl_reg);
  
#line 767 
  macc_reg = ixgbe_read_reg(hw,17200U);
  
#line 768 
  macc_reg &= 4294508542U;
  
#line 769 
  ixgbe_write_reg(hw,17200U,macc_reg);
  
#line 770 
  ixgbe_read_reg(hw,8U);
  
#line 772 
  __retres = 0;
  
#line 772 
  return __retres;
}


#line 774  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x540.c"
static struct ixgbe_mac_operations mac_ops_X540 = {.init_hw = & ixgbe_init_hw_generic, .reset_hw = & ixgbe_reset_hw_X540, .start_hw = & ixgbe_start_hw_X540, .clear_hw_cntrs = & ixgbe_clear_hw_cntrs_generic, .get_media_type = & ixgbe_get_media_type_X540, .get_mac_addr = & ixgbe_get_mac_addr_generic, .get_san_mac_addr = & ixgbe_get_san_mac_addr_generic, .get_device_caps = & ixgbe_get_device_caps_generic, .get_wwn_prefix = & ixgbe_get_wwn_prefix_generic, .stop_adapter = & ixgbe_stop_adapter_generic, .get_bus_info = & ixgbe_get_bus_info_generic, .set_lan_id = & ixgbe_set_lan_id_multi_port_pcie, .read_analog_reg8 = (s32 (*)(struct ixgbe_hw *, u32 , u8 *))0, .write_analog_reg8 = (s32 (*)(struct ixgbe_hw *, u32 , u8 ))0, .setup_sfp = (s32 (*)(struct ixgbe_hw *))0, .disable_rx_buff = & ixgbe_disable_rx_buff_generic, .enable_rx_buff = & ixgbe_enable_rx_buff_generic, .enable_rx_dma = & ixgbe_enable_rx_dma_generic, .acquire_swfw_sync = & ixgbe_acquire_swfw_sync_X540, .release_swfw_sync = & ixgbe_release_swfw_sync_X540, .prot_autoc_read = & prot_autoc_read_generic, .prot_autoc_write = & prot_autoc_write_generic, .disable_tx_laser = (void (*)(struct ixgbe_hw *))0, .enable_tx_laser = (void (*)(struct ixgbe_hw *))0, .flap_tx_laser = (void (*)(struct ixgbe_hw *))0, .stop_link_on_d3 = (void (*)(struct ixgbe_hw *))0, .setup_link = & ixgbe_setup_mac_link_X540, .check_link = & ixgbe_check_mac_link_generic, .get_link_capabilities = & ixgbe_get_copper_link_capabilities_generic, .set_rxpba = & ixgbe_set_rxpba_generic, .led_on = & ixgbe_led_on_generic, .led_off = & ixgbe_led_off_generic, .blink_led_start = & ixgbe_blink_led_start_X540, .blink_led_stop = & ixgbe_blink_led_stop_X540, .set_rar = & ixgbe_set_rar_generic, .clear_rar = & ixgbe_clear_rar_generic, .set_vmdq = & ixgbe_set_vmdq_generic, .set_vmdq_san_mac = & ixgbe_set_vmdq_san_mac_generic, .clear_vmdq = & ixgbe_clear_vmdq_generic, .init_rx_addrs = & ixgbe_init_rx_addrs_generic, .update_mc_addr_list = & ixgbe_update_mc_addr_list_generic, .enable_mc = & ixgbe_enable_mc_generic, .disable_mc = & ixgbe_disable_mc_generic, .clear_vfta = & ixgbe_clear_vfta_generic, .set_vfta = & ixgbe_set_vfta_generic, .init_uta_tables = & ixgbe_init_uta_tables_generic, .set_mac_anti_spoofing = & ixgbe_set_mac_anti_spoofing, .set_vlan_anti_spoofing = & ixgbe_set_vlan_anti_spoofing, .fc_enable = & ixgbe_fc_enable_generic, .set_fw_drv_ver = & ixgbe_set_fw_drv_ver_generic, .get_thermal_sensor_data = (s32 (*)(struct ixgbe_hw *))0, .init_thermal_sensor_thresh = (s32 (*)(struct ixgbe_hw *))0, .disable_rx = & ixgbe_disable_rx_generic, .enable_rx = & ixgbe_enable_rx_generic, .set_source_address_pruning = (void (*)(struct ixgbe_hw *, bool , unsigned int ))0, .set_ethertype_anti_spoofing = (void (*)(struct ixgbe_hw *, bool , int ))0, .dmac_config = (s32 (*)(struct ixgbe_hw *))0, .dmac_update_tcs = (s32 (*)(struct ixgbe_hw *))0, .dmac_config_tcs = (s32 (*)(struct ixgbe_hw *))0};

#line 827  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x540.c"
static struct ixgbe_eeprom_operations eeprom_ops_X540 = {.init_params = & ixgbe_init_eeprom_params_X540, .read = & ixgbe_read_eerd_X540, .read_buffer = & ixgbe_read_eerd_buffer_X540, .write = & ixgbe_write_eewr_X540, .write_buffer = & ixgbe_write_eewr_buffer_X540, .validate_checksum = & ixgbe_validate_eeprom_checksum_X540, .update_checksum = & ixgbe_update_eeprom_checksum_X540, .calc_checksum = & ixgbe_calc_eeprom_checksum_X540};

#line 838  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x540.c"
static struct ixgbe_phy_operations phy_ops_X540 = {.identify = & ixgbe_identify_phy_generic, .identify_sfp = & ixgbe_identify_sfp_module_generic, .init = (s32 (*)(struct ixgbe_hw *))0, .reset = (s32 (*)(struct ixgbe_hw *))0, .read_reg = & ixgbe_read_phy_reg_generic, .write_reg = & ixgbe_write_phy_reg_generic, .read_reg_mdi = (s32 (*)(struct ixgbe_hw *, u32 , u32 , u16 *))0, .write_reg_mdi = (s32 (*)(struct ixgbe_hw *, u32 , u32 , u16 ))0, .setup_link = & ixgbe_setup_phy_link_generic, .setup_internal_link = (s32 (*)(struct ixgbe_hw *))0, .setup_link_speed = & ixgbe_setup_phy_link_speed_generic, .check_link = (s32 (*)(struct ixgbe_hw *, ixgbe_link_speed *, bool *))0, .get_firmware_version = & ixgbe_get_phy_firmware_version_generic, .read_i2c_byte = & ixgbe_read_i2c_byte_generic, .write_i2c_byte = & ixgbe_write_i2c_byte_generic, .read_i2c_sff8472 = & ixgbe_read_i2c_sff8472_generic, .read_i2c_eeprom = & ixgbe_read_i2c_eeprom_generic, .write_i2c_eeprom = & ixgbe_write_i2c_eeprom_generic, .read_i2c_combined = (s32 (*)(struct ixgbe_hw *, u8 , u16 , u16 *))0, .write_i2c_combined = (s32 (*)(struct ixgbe_hw *, u8 , u16 , u16 ))0, .check_overtemp = & ixgbe_tn_check_overtemp, .set_phy_power = & ixgbe_set_copper_phy_power, .handle_lasi = (s32 (*)(struct ixgbe_hw *))0};

#line 857  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x540.c"
static u32 const ixgbe_mvals_X540[24U] = {65552U, 65564U, 66048U, 66064U, 65872U, 65856U, 65888U, 65864U, 2U, 4U, 8U, 33554432U, 67108864U, 134217728U, 69768U, 69772U, 1U, 2U, 4U, 8U, 0U, 0U, 0U, 40U};

#line 861  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_x540.c"
struct ixgbe_info ixgbe_X540_info = {.mac = ixgbe_mac_X540, .get_invariants = & ixgbe_get_invariants_X540, .mac_ops = & mac_ops_X540, .eeprom_ops = & eeprom_ops_X540, .phy_ops = & phy_ops_X540, .mbx_ops = & mbx_ops_generic, .mvals = (u32 const *)(& ixgbe_mvals_X540)};

#line 91  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/io.h"
__inline static void writeq(unsigned long val, void volatile *addr)
{
  
#line 93 
  ldv_inline_asm();
  
#line 94 
  return;
}


#line 169  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_common.h"
__inline static void ixgbe_write_reg64(struct ixgbe_hw *hw, u32 reg, u64 value)
{
  u8 * volatile *tmp;
  bool tmp_0;
  {
    
#line 171 
    u8 *__var = (u8 *)0U;
    
#line 171 
    tmp = (u8 * volatile *)(& hw->hw_addr);
  }
  
#line 171 
  u8 *reg_addr = *tmp;
  
#line 173 
  tmp_0 = ixgbe_removed((void *)reg_addr);
  
#line 173 
  if ((int)tmp_0 != 0) 
#line 174 
                       goto return_label; else ;
  
#line 175 
  writeq((unsigned long)value,(void volatile *)(reg_addr + reg));
  return_label: 
#line 176 
                return;
}


#line 135  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_phy.h"
bool ixgbe_check_reset_blocked(struct ixgbe_hw *hw);


#line 44  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82599.c"
static void ixgbe_disable_tx_laser_multispeed_fiber(struct ixgbe_hw *hw);


#line 45 
static void ixgbe_enable_tx_laser_multispeed_fiber(struct ixgbe_hw *hw);


#line 46 
static void ixgbe_flap_tx_laser_multispeed_fiber(struct ixgbe_hw *hw);


#line 47 
static s32 ixgbe_setup_mac_link_multispeed_fiber(struct ixgbe_hw *hw, ixgbe_link_speed speed, bool autoneg_wait_to_complete);


#line 50 
static s32 ixgbe_setup_mac_link_smartspeed(struct ixgbe_hw *hw, ixgbe_link_speed speed, bool autoneg_wait_to_complete);


#line 53 
static void ixgbe_stop_mac_link_on_d3_82599(struct ixgbe_hw *hw);


#line 54 
static s32 ixgbe_start_mac_link_82599(struct ixgbe_hw *hw, bool autoneg_wait_to_complete);


#line 56 
static s32 ixgbe_setup_mac_link_82599(struct ixgbe_hw *hw, ixgbe_link_speed speed, bool autoneg_wait_to_complete);


#line 59 
static s32 ixgbe_setup_copper_link_82599(struct ixgbe_hw *hw, ixgbe_link_speed speed, bool autoneg_wait_to_complete);


#line 62 
static s32 ixgbe_verify_fw_version_82599(struct ixgbe_hw *hw);


#line 63 
static s32 ixgbe_read_i2c_byte_82599(struct ixgbe_hw *hw, u8 byte_offset, u8 dev_addr, u8 *data);


#line 65 
static s32 ixgbe_write_i2c_byte_82599(struct ixgbe_hw *hw, u8 byte_offset, u8 dev_addr, u8 data);


#line 67 
static s32 ixgbe_reset_pipeline_82599(struct ixgbe_hw *hw);


#line 68 
static bool ixgbe_verify_lesm_fw_enabled_82599(struct ixgbe_hw *hw);


#line 70  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82599.c"
bool ixgbe_mng_enabled(struct ixgbe_hw *hw)
{
  bool __retres;
  u32 fwsm;
  u32 manc;
  u32 factps;
  
#line 74 
  fwsm = ixgbe_read_reg(hw,*(hw->mvals + 7U));
  
#line 75 
  if ((fwsm & 14U) != 4U) {
    
#line 76 
    __retres = (_Bool)0;
    
#line 76 
    goto return_label;
  }
  else ;
  
#line 78 
  manc = ixgbe_read_reg(hw,22560U);
  
#line 79 
  if ((manc & 131072U) == 0U) {
    
#line 80 
    __retres = (_Bool)0;
    
#line 80 
    goto return_label;
  }
  else ;
  
#line 82 
  factps = ixgbe_read_reg(hw,*(hw->mvals + 4U));
  
#line 83 
  if ((factps & 536870912U) != 0U) {
    
#line 84 
    __retres = (_Bool)0;
    
#line 84 
    goto return_label;
  }
  else ;
  
#line 86 
  __retres = (_Bool)1;
  return_label: 
#line 86 
                return __retres;
}


#line 89  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82599.c"
static void ixgbe_init_mac_link_ops_82599(struct ixgbe_hw *hw)
{
  enum ixgbe_media_type tmp;
  
#line 91 
  struct ixgbe_mac_info *mac = & hw->mac;
  
#line 96 
  tmp = (*(mac->ops.get_media_type))(hw);
  
#line 96 
  if (tmp == (unsigned int)ixgbe_media_type_fiber) {
    int tmp_1;
    bool tmp_0;
    
#line 97 
    tmp_0 = ixgbe_mng_enabled(hw);
    
#line 97 
    if (tmp_0) 
#line 97 
               tmp_1 = 0; else 
#line 97 
                               tmp_1 = 1;
    
#line 97 
    if (tmp_1) {
      
#line 98 
      mac->ops.disable_tx_laser = & ixgbe_disable_tx_laser_multispeed_fiber;
      
#line 100 
      mac->ops.enable_tx_laser = & ixgbe_enable_tx_laser_multispeed_fiber;
      
#line 102 
      mac->ops.flap_tx_laser = & ixgbe_flap_tx_laser_multispeed_fiber;
    }
    else 
#line 96 
         goto _LAND;
  }
  else {
    _LAND: {
             
#line 104 
             mac->ops.disable_tx_laser = (void (*)(struct ixgbe_hw *))0;
             
#line 105 
             mac->ops.enable_tx_laser = (void (*)(struct ixgbe_hw *))0;
             
#line 106 
             mac->ops.flap_tx_laser = (void (*)(struct ixgbe_hw *))0;
           }
  }
  
#line 109 
  if ((int)hw->phy.multispeed_fiber != 0) 
#line 111 
                                          mac->ops.setup_link = & ixgbe_setup_mac_link_multispeed_fiber;
  else {
    enum ixgbe_media_type tmp_2;
    
#line 113 
    tmp_2 = (*(mac->ops.get_media_type))(hw);
    
#line 113 
    if (tmp_2 == (unsigned int)ixgbe_media_type_backplane) 
      
#line 114 
      if (hw->phy.smart_speed <= (unsigned int)ixgbe_smart_speed_on) {
        int tmp_4;
        bool tmp_3;
        
#line 117 
        tmp_3 = ixgbe_verify_lesm_fw_enabled_82599(hw);
        
#line 117 
        if (tmp_3) 
#line 117 
                   tmp_4 = 0; else 
#line 117 
                                   tmp_4 = 1;
        
#line 117 
        if (tmp_4) 
#line 118 
                   mac->ops.setup_link = & ixgbe_setup_mac_link_smartspeed; else 
                                                                    
#line 120 
                                                                    mac->ops.setup_link = & ixgbe_setup_mac_link_82599;
      }
      else 
#line 120 
           mac->ops.setup_link = & ixgbe_setup_mac_link_82599;
    else 
#line 120 
         mac->ops.setup_link = & ixgbe_setup_mac_link_82599;
  }
  
#line 121 
  return;
}


#line 124  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82599.c"
static s32 ixgbe_setup_sfp_modules_82599(struct ixgbe_hw *hw)
{
  s32 __retres;
  s32 ret_val;
  u16 list_offset;
  u16 data_offset;
  u16 data_value;
  
#line 129 
  if (hw->phy.sfp_type != (unsigned int)ixgbe_sfp_type_unknown) {
    s32 tmp;
    s32 tmp_0;
    
#line 130 
    ixgbe_init_mac_link_ops_82599(hw);
    
#line 132 
    hw->phy.ops.reset = (s32 (*)(struct ixgbe_hw *))0;
    
#line 134 
    ret_val = ixgbe_get_sfp_init_sequence_offsets(hw,& list_offset,& data_offset);
    
#line 136 
    if (ret_val != 0) {
      
#line 137 
      __retres = ret_val;
      
#line 137 
      goto return_label;
    }
    else ;
    
#line 140 
    ret_val = (*(hw->mac.ops.acquire_swfw_sync))(hw,8U);
    
#line 142 
    if (ret_val != 0) {
      
#line 143 
      __retres = -16;
      
#line 143 
      goto return_label;
    }
    else ;
    
#line 145 
    data_offset = (u16)((int)data_offset + 1);
    
#line 145 
    ;
    
#line 145 
    tmp = (*(hw->eeprom.ops.read))(hw,(unsigned short)((int)data_offset),& data_value);
    
#line 145 
    if (tmp != 0) 
#line 146 
                  goto setup_sfp_err; else ;
    
#line 147 
    goto ldv_54727;
    ldv_54726: 
#line 148 
    ;
    
#line 148 
    ixgbe_write_reg(hw,85760U,(unsigned int)data_value);
    
#line 149 
    ixgbe_read_reg(hw,8U);
    
#line 150 
    data_offset = (u16)((int)data_offset + 1);
    
#line 150 
    ;
    
#line 150 
    tmp_0 = (*(hw->eeprom.ops.read))(hw,(unsigned short)((int)data_offset),& data_value);
    
#line 150 
    if (tmp_0 != 0) 
#line 151 
                    goto setup_sfp_err; else ;
    ldv_54727: 
#line 152 
    ;
    
#line 147 
    if ((unsigned int)data_value != 65535U) 
#line 149 
                                            goto ldv_54726; else 
#line 152 
                                                                 goto ldv_54728;
    ldv_54728: 
#line 153 
    ;
    
#line 155 
    (*(hw->mac.ops.release_swfw_sync))(hw,8U);
    
#line 160 
    usleep_range((unsigned long)(hw->eeprom.semaphore_delay * 1000U),(unsigned long)(hw->eeprom.semaphore_delay * 2000U));
    
#line 164 
    ret_val = (*(hw->mac.ops.prot_autoc_write))(hw,hw->mac.orig_autoc | 24576U,(_Bool)0);
    
#line 168 
    if (ret_val != 0) {
      {
        
#line 169 
        struct _ddebug descriptor = {.modname = "ixgbe", .function = "ixgbe_setup_sfp_modules_82599", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82599.c", .format = " sfp module setup not complete\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))169U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
        
#line 169 
        if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 169 
                                                            __dynamic_netdev_dbg(& descriptor,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev," sfp module setup not complete\n"); else ;
      }
      
#line 170 
      __retres = -30;
      
#line 170 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 174 
  __retres = 0;
  
#line 174 
  goto return_label;
  setup_sfp_err: 
#line 176 
  ;
  
#line 178 
  (*(hw->mac.ops.release_swfw_sync))(hw,8U);
  
#line 182 
  usleep_range((unsigned long)(hw->eeprom.semaphore_delay * 1000U),(unsigned long)(hw->eeprom.semaphore_delay * 2000U));
  
#line 184 
  netdev_err((struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"eeprom read at offset %d failed\n",(int)data_offset);
  
#line 185 
  __retres = -30;
  return_label: 
#line 185 
                return __retres;
}


#line 199  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82599.c"
static s32 prot_autoc_read_82599(struct ixgbe_hw *hw, bool *locked, u32 *reg_val)
{
  s32 __retres;
  s32 ret_val;
  bool tmp;
  
#line 204 
  *locked = (_Bool)0;
  
#line 206 
  tmp = ixgbe_verify_lesm_fw_enabled_82599(hw);
  
#line 206 
  if ((int)tmp != 0) {
    
#line 207 
    ret_val = (*(hw->mac.ops.acquire_swfw_sync))(hw,8U);
    
#line 209 
    if (ret_val != 0) {
      
#line 210 
      __retres = -16;
      
#line 210 
      goto return_label;
    }
    else ;
    
#line 212 
    *locked = (_Bool)1;
  }
  else ;
  
#line 215 
  *reg_val = ixgbe_read_reg(hw,17056U);
  
#line 216 
  __retres = 0;
  return_label: 
#line 216 
                return __retres;
}


#line 229  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82599.c"
static s32 prot_autoc_write_82599(struct ixgbe_hw *hw, u32 autoc, bool locked)
{
  s32 __retres;
  bool tmp;
  
#line 231 
  s32 ret_val = 0;
  
#line 234 
  tmp = ixgbe_check_reset_blocked(hw);
  
#line 234 
  if ((int)tmp != 0) 
#line 235 
                     goto out; else ;
  
#line 241 
  if (! locked) {
    bool tmp_0;
    
#line 241 
    tmp_0 = ixgbe_verify_lesm_fw_enabled_82599(hw);
    
#line 241 
    if ((int)tmp_0 != 0) {
      
#line 242 
      ret_val = (*(hw->mac.ops.acquire_swfw_sync))(hw,8U);
      
#line 244 
      if (ret_val != 0) {
        
#line 245 
        __retres = -16;
        
#line 245 
        goto return_label;
      }
      else ;
      
#line 247 
      locked = (_Bool)1;
    }
    else ;
  }
  else ;
  
#line 250 
  ixgbe_write_reg(hw,17056U,autoc);
  
#line 251 
  ret_val = ixgbe_reset_pipeline_82599(hw);
  out: 
#line 253 
  ;
  
#line 257 
  if ((int)locked != 0) 
#line 258 
                        (*(hw->mac.ops.release_swfw_sync))(hw,8U); else ;
  
#line 260 
  __retres = ret_val;
  return_label: 
#line 260 
                return __retres;
}


#line 263  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82599.c"
static s32 ixgbe_get_invariants_82599(struct ixgbe_hw *hw)
{
  s32 __retres;
  
#line 265 
  struct ixgbe_mac_info *mac = & hw->mac;
  
#line 267 
  ixgbe_init_mac_link_ops_82599(hw);
  
#line 269 
  mac->mcft_size = 128U;
  
#line 270 
  mac->vft_size = 128U;
  
#line 271 
  mac->num_rar_entries = 128U;
  
#line 272 
  mac->rx_pb_size = 512U;
  
#line 273 
  mac->max_rx_queues = 128U;
  
#line 274 
  mac->max_tx_queues = 128U;
  
#line 275 
  mac->max_msix_vectors = ixgbe_get_pcie_msix_count_generic(hw);
  
#line 277 
  __retres = 0;
  
#line 277 
  return __retres;
}


#line 289  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82599.c"
static s32 ixgbe_init_phy_ops_82599(struct ixgbe_hw *hw)
{
  s32 ret_val;
  u32 esdp;
  enum ixgbe_media_type tmp;
  
#line 291 
  struct ixgbe_mac_info *mac = & hw->mac;
  
#line 292 
  struct ixgbe_phy_info *phy = & hw->phy;
  
#line 296 
  if ((unsigned int)hw->device_id == 5464U) {
    
#line 298 
    hw->phy.qsfp_shared_i2c_bus = (_Bool)1;
    
#line 301 
    esdp = ixgbe_read_reg(hw,32U);
    
#line 302 
    esdp |= 256U;
    
#line 303 
    esdp &= 4294966783U;
    
#line 304 
    esdp &= 4294967294U;
    
#line 305 
    esdp &= 4294901759U;
    
#line 306 
    esdp &= 4294836223U;
    
#line 307 
    ixgbe_write_reg(hw,32U,esdp);
    
#line 308 
    ixgbe_read_reg(hw,8U);
    
#line 310 
    phy->ops.read_i2c_byte = & ixgbe_read_i2c_byte_82599;
    
#line 311 
    phy->ops.write_i2c_byte = & ixgbe_write_i2c_byte_82599;
  }
  else ;
  
#line 315 
  ret_val = (*(phy->ops.identify))(hw);
  
#line 318 
  ixgbe_init_mac_link_ops_82599(hw);
  
#line 321 
  tmp = (*(mac->ops.get_media_type))(hw);
  
#line 321 
  if (tmp == (unsigned int)ixgbe_media_type_copper) {
    
#line 322 
    mac->ops.setup_link = & ixgbe_setup_copper_link_82599;
    
#line 323 
    mac->ops.get_link_capabilities = & ixgbe_get_copper_link_capabilities_generic;
  }
  else ;
  
#line 328 
  switch ((unsigned int)hw->phy.type) {
    case (unsigned int)2: 
#line 329 
    ;
    
#line 330 
    phy->ops.check_link = & ixgbe_check_phy_link_tnx;
    
#line 331 
    phy->ops.setup_link = & ixgbe_setup_phy_link_tnx;
    
#line 332 
    phy->ops.get_firmware_version = & ixgbe_get_phy_firmware_version_tnx;
    
#line 334 
    goto ldv_54756;
    default: 
#line 335 
    ;
    
#line 336 
    goto ldv_54756;
  }
  ldv_54756: 
#line 339 
  ;
  
#line 339 
  return ret_val;
}


#line 350  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82599.c"
static s32 ixgbe_get_link_capabilities_82599(struct ixgbe_hw *hw, ixgbe_link_speed *speed, bool *autoneg)
{
  s32 __retres;
  
#line 354 
  u32 autoc = 0U;
  
#line 358 
  if (((((unsigned int)hw->phy.sfp_type + 4294967287U <= 1U || hw->phy.sfp_type == (unsigned int)ixgbe_sfp_type_1g_lx_core0) || hw->phy.sfp_type == (unsigned int)ixgbe_sfp_type_1g_lx_core1) || hw->phy.sfp_type == (unsigned int)ixgbe_sfp_type_1g_sx_core0) || hw->phy.sfp_type == (unsigned int)ixgbe_sfp_type_1g_sx_core1) {
    
#line 363 
    *speed = 32U;
    
#line 364 
    *autoneg = (_Bool)1;
    
#line 365 
    __retres = 0;
    
#line 365 
    goto return_label;
  }
  else ;
  
#line 373 
  if ((int)hw->mac.orig_link_settings_stored != 0) 
#line 374 
                                                   autoc = hw->mac.orig_autoc; else 
                                                                    
#line 376 
                                                                    autoc = ixgbe_read_reg(hw,17056U);
  
#line 378 
  switch (autoc & 57344U) {
    case (unsigned int)0: 
#line 379 
    ;
    
#line 380 
    *speed = 32U;
    
#line 381 
    *autoneg = (_Bool)0;
    
#line 382 
    goto ldv_54765;
    case (unsigned int)8192: 
#line 384 
    ;
    
#line 385 
    *speed = 128U;
    
#line 386 
    *autoneg = (_Bool)0;
    
#line 387 
    goto ldv_54765;
    case (unsigned int)16384: 
#line 389 
    ;
    
#line 390 
    *speed = 32U;
    
#line 391 
    *autoneg = (_Bool)1;
    
#line 392 
    goto ldv_54765;
    case (unsigned int)24576: 
#line 394 
    ;
    
#line 395 
    *speed = 128U;
    
#line 396 
    *autoneg = (_Bool)0;
    
#line 397 
    goto ldv_54765;
    case (unsigned int)32768: 
#line 399 
    ;
    case (unsigned int)49152: 
#line 400 
    ;
    
#line 401 
    *speed = 0U;
    
#line 402 
    if ((autoc & 65536U) != 0U) 
#line 403 
                                *speed |= 128U; else ;
    
#line 404 
    if (autoc < (u32)0) 
#line 405 
                        *speed |= 128U; else ;
    
#line 406 
    if ((autoc & 1073741824U) != 0U) 
#line 407 
                                     *speed |= 32U; else ;
    
#line 408 
    *autoneg = (_Bool)1;
    
#line 409 
    goto ldv_54765;
    case (unsigned int)57344: 
#line 411 
    ;
    
#line 412 
    *speed = 8U;
    
#line 413 
    if ((autoc & 65536U) != 0U) 
#line 414 
                                *speed |= 128U; else ;
    
#line 415 
    if (autoc < (u32)0) 
#line 416 
                        *speed |= 128U; else ;
    
#line 417 
    if ((autoc & 1073741824U) != 0U) 
#line 418 
                                     *speed |= 32U; else ;
    
#line 419 
    *autoneg = (_Bool)1;
    
#line 420 
    goto ldv_54765;
    case (unsigned int)40960: 
#line 422 
    ;
    
#line 423 
    *speed = 40U;
    
#line 424 
    *autoneg = (_Bool)0;
    
#line 425 
    goto ldv_54765;
    default: 
#line 427 
    ;
    
#line 428 
    __retres = -8;
    
#line 428 
    goto return_label;
  }
  ldv_54765: 
#line 431 
  ;
  
#line 431 
  if ((int)hw->phy.multispeed_fiber != 0) {
    
#line 432 
    *speed |= 160U;
    
#line 436 
    if (hw->phy.media_type == (unsigned int)ixgbe_media_type_fiber_qsfp) 
      
#line 437 
      *autoneg = (_Bool)0; else 
#line 439 
                                *autoneg = (_Bool)1;
  }
  else ;
  
#line 442 
  __retres = 0;
  return_label: 
#line 442 
                return __retres;
}


#line 451  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82599.c"
static enum ixgbe_media_type ixgbe_get_media_type_82599(struct ixgbe_hw *hw)
{
  enum ixgbe_media_type __retres;
  
#line 454 
  switch ((unsigned int)hw->phy.type) {
    case (unsigned int)7: 
#line 455 
    ;
    case (unsigned int)2: 
#line 456 
    ;
    
#line 457 
    __retres = ixgbe_media_type_copper;
    
#line 457 
    goto return_label;
    default: 
#line 459 
    ;
    
#line 460 
    goto ldv_54780;
  }
  ldv_54780: 
#line 463 
  ;
  
#line 463 
  switch ((int)hw->device_id) {
    case 4343: 
#line 464 
    ;
    case 5396: 
#line 465 
    ;
    case 4344: 
#line 466 
    ;
    case 5399: 
#line 467 
    ;
    case 5418: 
#line 468 
    ;
    case 4348: 
#line 469 
    ;
    
#line 471 
    __retres = ixgbe_media_type_backplane;
    
#line 471 
    goto return_label;
    case 4347: 
#line 473 
    ;
    case 5417: 
#line 474 
    ;
    case 5383: 
#line 475 
    ;
    case 5453: 
#line 476 
    ;
    case 5450: 
#line 477 
    ;
    case 5463: 
#line 478 
    ;
    
#line 479 
    __retres = ixgbe_media_type_fiber;
    
#line 479 
    goto return_label;
    case 4345: 
#line 481 
    ;
    
#line 482 
    __retres = ixgbe_media_type_cx4;
    
#line 482 
    goto return_label;
    case 5404: 
#line 484 
    ;
    
#line 485 
    __retres = ixgbe_media_type_copper;
    
#line 485 
    goto return_label;
    case 5455: 
#line 487 
    ;
    
#line 488 
    __retres = ixgbe_media_type_fiber_lco;
    
#line 488 
    goto return_label;
    case 5464: 
#line 490 
    ;
    
#line 491 
    __retres = ixgbe_media_type_fiber_qsfp;
    
#line 491 
    goto return_label;
    default: 
#line 493 
    ;
    
#line 494 
    __retres = ixgbe_media_type_unknown;
    
#line 494 
    goto return_label;
  }
  return_label: 
#line 463 
                return __retres;
}


#line 505  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82599.c"
static void ixgbe_stop_mac_link_on_d3_82599(struct ixgbe_hw *hw)
{
  u32 autoc2_reg;
  u32 fwsm;
  
#line 508 
  u16 ee_ctrl_2 = (unsigned short)0U;
  
#line 510 
  (*(hw->eeprom.ops.read))(hw,(unsigned short)1,& ee_ctrl_2);
  
#line 513 
  fwsm = ixgbe_read_reg(hw,*(hw->mvals + 7U));
  
#line 515 
  if (((fwsm & 14U) != 4U && ! hw->wol_enabled) && ((int)ee_ctrl_2 & 2) != 0) {
    
#line 518 
    autoc2_reg = ixgbe_read_reg(hw,17064U);
    
#line 519 
    autoc2_reg |= 1342177280U;
    
#line 520 
    ixgbe_write_reg(hw,17064U,autoc2_reg);
  }
  else ;
  
#line 522 
  return;
}


#line 532  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82599.c"
static s32 ixgbe_start_mac_link_82599(struct ixgbe_hw *hw, bool autoneg_wait_to_complete)
{
  s32 __retres;
  u32 autoc_reg;
  u32 links_reg;
  u32 i;
  bool tmp;
  
#line 538 
  s32 status = 0;
  
#line 539 
  bool got_lock = (_Bool)0;
  
#line 541 
  tmp = ixgbe_verify_lesm_fw_enabled_82599(hw);
  
#line 541 
  if ((int)tmp != 0) {
    
#line 542 
    status = (*(hw->mac.ops.acquire_swfw_sync))(hw,8U);
    
#line 544 
    if (status != 0) {
      
#line 545 
      __retres = status;
      
#line 545 
      goto return_label;
    }
    else ;
    
#line 547 
    got_lock = (_Bool)1;
  }
  else ;
  
#line 551 
  ixgbe_reset_pipeline_82599(hw);
  
#line 553 
  if ((int)got_lock != 0) 
#line 554 
                          (*(hw->mac.ops.release_swfw_sync))(hw,8U); else ;
  
#line 557 
  if ((int)autoneg_wait_to_complete != 0) {
    
#line 558 
    autoc_reg = ixgbe_read_reg(hw,17056U);
    
#line 559 
    if (((autoc_reg & 57344U) == 32768U || (autoc_reg & 57344U) == 49152U) || (autoc_reg & 57344U) == 57344U) {
      
#line 565 
      links_reg = 0U;
      
#line 566 
      i = 0U;
      
#line 566 
      goto ldv_54815;
      ldv_54814: 
#line 567 
      ;
      
#line 567 
      links_reg = ixgbe_read_reg(hw,17060U);
      
#line 568 
      if (links_reg < (u32)0) 
#line 569 
                              goto ldv_54813; else ;
      
#line 570 
      msleep(100U);
      
#line 566 
      i += 1U;
      ldv_54815: 
#line 567 
      ;
      
#line 566 
      if (i <= 44U) 
#line 568 
                    goto ldv_54814; else 
#line 571 
                                         goto ldv_54813;
      ldv_54813: 
#line 572 
      ;
      
#line 572 
      if (links_reg >= (u32)0) {
        
#line 573 
        status = -14;
        {
          
#line 574 
          struct _ddebug descriptor = {.modname = "ixgbe", .function = "ixgbe_start_mac_link_82599", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82599.c", .format = "Autoneg did not complete.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))574U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
          
#line 574 
          if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 574 
                                                              __dynamic_netdev_dbg(& descriptor,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"Autoneg did not complete.\n"); else ;
        }
      }
      else ;
    }
    else ;
  }
  else ;
  
#line 580 
  msleep(50U);
  
#line 582 
  __retres = status;
  return_label: 
#line 582 
                return __retres;
}


#line 593  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82599.c"
static void ixgbe_disable_tx_laser_multispeed_fiber(struct ixgbe_hw *hw)
{
  bool tmp_0;
  
#line 595 
  u32 esdp_reg = ixgbe_read_reg(hw,32U);
  
#line 598 
  tmp_0 = ixgbe_check_reset_blocked(hw);
  
#line 598 
  if ((int)tmp_0 != 0) 
#line 599 
                       goto return_label; else ;
  
#line 602 
  esdp_reg |= 8U;
  
#line 603 
  ixgbe_write_reg(hw,32U,esdp_reg);
  
#line 604 
  ixgbe_read_reg(hw,8U);
  
#line 605 
  __const_udelay(429500UL);
  return_label: 
#line 607 
                return;
}


#line 616  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82599.c"
static void ixgbe_enable_tx_laser_multispeed_fiber(struct ixgbe_hw *hw)
{
  
#line 618 
  u32 esdp_reg = ixgbe_read_reg(hw,32U);
  
#line 621 
  esdp_reg &= 4294967287U;
  
#line 622 
  ixgbe_write_reg(hw,32U,esdp_reg);
  
#line 623 
  ixgbe_read_reg(hw,8U);
  
#line 624 
  msleep(100U);
  
#line 625 
  return;
}


#line 639  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82599.c"
static void ixgbe_flap_tx_laser_multispeed_fiber(struct ixgbe_hw *hw)
{
  bool tmp;
  
#line 642 
  tmp = ixgbe_check_reset_blocked(hw);
  
#line 642 
  if ((int)tmp != 0) 
#line 643 
                     goto return_label; else ;
  
#line 645 
  if ((int)hw->mac.autotry_restart != 0) {
    
#line 646 
    ixgbe_disable_tx_laser_multispeed_fiber(hw);
    
#line 647 
    ixgbe_enable_tx_laser_multispeed_fiber(hw);
    
#line 648 
    hw->mac.autotry_restart = (_Bool)0;
  }
  else ;
  return_label: 
#line 650 
                return;
}


#line 660  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82599.c"
static s32 ixgbe_setup_mac_link_multispeed_fiber(struct ixgbe_hw *hw, ixgbe_link_speed speed, bool autoneg_wait_to_complete)
{
  s32 __retres;
  
#line 664 
  s32 status = 0;
  
#line 665 
  ixgbe_link_speed link_speed = 0U;
  
#line 666 
  ixgbe_link_speed highest_link_speed = 0U;
  
#line 667 
  u32 speedcnt = 0U;
  
#line 668 
  u32 esdp_reg = ixgbe_read_reg(hw,32U);
  
#line 669 
  u32 i = 0U;
  
#line 670 
  bool link_up = (_Bool)0;
  
#line 671 
  bool autoneg = (_Bool)0;
  
#line 674 
  status = (*(hw->mac.ops.get_link_capabilities))(hw,& link_speed,& autoneg);
  
#line 676 
  if (status != 0) {
    
#line 677 
    __retres = status;
    
#line 677 
    goto return_label;
  }
  else ;
  
#line 679 
  speed &= link_speed;
  
#line 685 
  if ((speed & 128U) != 0U) {
    
#line 686 
    speedcnt += 1U;
    
#line 687 
    highest_link_speed = 128U;
    
#line 690 
    status = (*(hw->mac.ops.check_link))(hw,& link_speed,& link_up,(_Bool)0);
    
#line 692 
    if (status != 0) {
      
#line 693 
      __retres = status;
      
#line 693 
      goto return_label;
    }
    else ;
    
#line 695 
    if (link_speed == 128U && (int)link_up != 0) 
#line 696 
                                                 goto out; else ;
    
#line 699 
    switch ((unsigned int)hw->phy.media_type) {
      case (unsigned int)1: 
#line 700 
      ;
      
#line 701 
      esdp_reg |= 8224U;
      
#line 702 
      ixgbe_write_reg(hw,32U,esdp_reg);
      
#line 703 
      ixgbe_read_reg(hw,8U);
      
#line 704 
      goto ldv_54844;
      case (unsigned int)2: 
#line 705 
      ;
      
#line 707 
      goto ldv_54844;
      default: 
#line 708 
      ;
      {
        
#line 709 
        struct _ddebug descriptor = {.modname = "ixgbe", .function = "ixgbe_setup_mac_link_multispeed_fiber", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82599.c", .format = "Unexpected media type.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))709U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
        
#line 709 
        if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 709 
                                                            __dynamic_netdev_dbg(& descriptor,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"Unexpected media type.\n"); else ;
      }
      
#line 710 
      goto ldv_54844;
    }
    ldv_54844: 
#line 714 
    ;
    
#line 714 
    msleep(40U);
    
#line 716 
    status = ixgbe_setup_mac_link_82599(hw,128U,(_Bool)((bool)((int)autoneg_wait_to_complete) != 0));
    
#line 719 
    if (status != 0) {
      
#line 720 
      __retres = status;
      
#line 720 
      goto return_label;
    }
    else ;
    
#line 723 
    if (hw->mac.ops.flap_tx_laser != (void (*)(struct ixgbe_hw *))0) 
      
#line 724 
      (*(hw->mac.ops.flap_tx_laser))(hw); else ;
    
#line 731 
    i = 0U;
    
#line 731 
    goto ldv_54850;
    ldv_54849: 
#line 732 
    ;
    
#line 733 
    msleep(100U);
    
#line 736 
    status = (*(hw->mac.ops.check_link))(hw,& link_speed,& link_up,(_Bool)0);
    
#line 738 
    if (status != 0) {
      
#line 739 
      __retres = status;
      
#line 739 
      goto return_label;
    }
    else ;
    
#line 741 
    if ((int)link_up != 0) 
#line 742 
                           goto out; else ;
    
#line 731 
    i += 1U;
    ldv_54850: 
#line 732 
    ;
    
#line 731 
    if (i <= 4U) 
#line 733 
                 goto ldv_54849; else 
#line 736 
                                      goto ldv_54851;
    ldv_54851: 
#line 737 
    ;
  }
  else ;
  
#line 746 
  if ((speed & 32U) != 0U) {
    
#line 747 
    speedcnt += 1U;
    
#line 748 
    if (highest_link_speed == 0U) 
#line 749 
                                  highest_link_speed = 32U; else ;
    
#line 752 
    status = (*(hw->mac.ops.check_link))(hw,& link_speed,& link_up,(_Bool)0);
    
#line 754 
    if (status != 0) {
      
#line 755 
      __retres = status;
      
#line 755 
      goto return_label;
    }
    else ;
    
#line 757 
    if (link_speed == 32U && (int)link_up != 0) 
#line 758 
                                                goto out; else ;
    
#line 761 
    switch ((unsigned int)hw->phy.media_type) {
      case (unsigned int)1: 
#line 762 
      ;
      
#line 763 
      esdp_reg &= 4294967263U;
      
#line 764 
      esdp_reg |= 8192U;
      
#line 765 
      ixgbe_write_reg(hw,32U,esdp_reg);
      
#line 766 
      ixgbe_read_reg(hw,8U);
      
#line 767 
      goto ldv_54853;
      case (unsigned int)2: 
#line 768 
      ;
      
#line 770 
      goto ldv_54853;
      default: 
#line 771 
      ;
      {
        
#line 772 
        struct _ddebug descriptor_0 = {.modname = "ixgbe", .function = "ixgbe_setup_mac_link_multispeed_fiber", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82599.c", .format = "Unexpected media type.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))772U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
        
#line 772 
        if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 772 
                                                              __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"Unexpected media type.\n"); else ;
      }
      
#line 773 
      goto ldv_54853;
    }
    ldv_54853: 
#line 777 
    ;
    
#line 777 
    msleep(40U);
    
#line 779 
    status = ixgbe_setup_mac_link_82599(hw,32U,(_Bool)((bool)((int)autoneg_wait_to_complete) != 0));
    
#line 782 
    if (status != 0) {
      
#line 783 
      __retres = status;
      
#line 783 
      goto return_label;
    }
    else ;
    
#line 786 
    if (hw->mac.ops.flap_tx_laser != (void (*)(struct ixgbe_hw *))0) 
      
#line 787 
      (*(hw->mac.ops.flap_tx_laser))(hw); else ;
    
#line 790 
    msleep(100U);
    
#line 793 
    status = (*(hw->mac.ops.check_link))(hw,& link_speed,& link_up,(_Bool)0);
    
#line 795 
    if (status != 0) {
      
#line 796 
      __retres = status;
      
#line 796 
      goto return_label;
    }
    else ;
    
#line 798 
    if ((int)link_up != 0) 
#line 799 
                           goto out; else ;
  }
  else ;
  
#line 807 
  if (speedcnt > 1U) 
#line 808 
                     status = ixgbe_setup_mac_link_multispeed_fiber(hw,highest_link_speed,(_Bool)((bool)((int)autoneg_wait_to_complete) != 0)); else ;
  out: 
#line 812 
  ;
  
#line 814 
  hw->phy.autoneg_advertised = 0U;
  
#line 816 
  if ((speed & 128U) != 0U) 
#line 817 
                            hw->phy.autoneg_advertised |= 128U; else ;
  
#line 819 
  if ((speed & 32U) != 0U) 
#line 820 
                           hw->phy.autoneg_advertised |= 32U; else ;
  
#line 822 
  __retres = status;
  return_label: 
#line 822 
                return __retres;
}


#line 833  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82599.c"
static s32 ixgbe_setup_mac_link_smartspeed(struct ixgbe_hw *hw, ixgbe_link_speed speed, bool autoneg_wait_to_complete)
{
  s32 i;
  s32 j;
  
#line 837 
  s32 status = 0;
  
#line 838 
  ixgbe_link_speed link_speed = 0U;
  
#line 840 
  bool link_up = (_Bool)0;
  
#line 841 
  u32 autoc_reg = ixgbe_read_reg(hw,17056U);
  
#line 844 
  hw->phy.autoneg_advertised = 0U;
  
#line 846 
  if ((speed & 128U) != 0U) 
#line 847 
                            hw->phy.autoneg_advertised |= 128U; else ;
  
#line 849 
  if ((speed & 32U) != 0U) 
#line 850 
                           hw->phy.autoneg_advertised |= 32U; else ;
  
#line 852 
  if ((speed & 8U) != 0U) 
#line 853 
                          hw->phy.autoneg_advertised |= 8U; else ;
  
#line 863 
  hw->phy.smart_speed_active = (_Bool)0;
  
#line 864 
  j = 0;
  
#line 864 
  goto ldv_54877;
  ldv_54876: 
#line 865 
  ;
  
#line 865 
  status = ixgbe_setup_mac_link_82599(hw,speed,(_Bool)((bool)((int)autoneg_wait_to_complete) != 0));
  
#line 867 
  if (status != 0) 
#line 868 
                   goto out; else ;
  
#line 876 
  i = 0;
  
#line 876 
  goto ldv_54874;
  ldv_54873: 
#line 877 
  ;
  {
    
#line 877 
    unsigned long __ms = 100UL;
    {
      unsigned long tmp_0;
      
#line 877 
      goto ldv_54871;
      ldv_54870: 
#line 878 
      ;
      
#line 877 
      __const_udelay(4295000UL);
      ldv_54871: 
#line 879 
      ;
      
#line 877 
      tmp_0 = __ms;
      
#line 877 
      __ms -= 1UL;
      
#line 877 
      ;
      
#line 877 
      if (tmp_0 != 0UL) 
#line 879 
                        goto ldv_54870; else 
#line 882 
                                             goto ldv_54872;
      ldv_54872: 
#line 883 
      ;
    }
  }
  
#line 880 
  status = (*(hw->mac.ops.check_link))(hw,& link_speed,& link_up,(_Bool)0);
  
#line 882 
  if (status != 0) 
#line 883 
                   goto out; else ;
  
#line 885 
  if ((int)link_up != 0) 
#line 886 
                         goto out; else ;
  
#line 876 
  i += 1;
  ldv_54874: 
#line 877 
  ;
  
#line 876 
  if (i <= 4) 
#line 878 
              goto ldv_54873; else 
#line 881 
                                   goto ldv_54875;
  ldv_54875: 
#line 882 
  ;
  
#line 864 
  j += 1;
  ldv_54877: 
#line 865 
  ;
  
#line 864 
  if (j <= 2) 
#line 866 
              goto ldv_54876; else 
#line 869 
                                   goto ldv_54878;
  ldv_54878: 
#line 870 
  ;
  
#line 894 
  if ((autoc_reg & 65536U) == 0U || (autoc_reg & 3221225472U) == 0U) 
    
#line 896 
    goto out; else ;
  
#line 899 
  hw->phy.smart_speed_active = (_Bool)1;
  
#line 900 
  status = ixgbe_setup_mac_link_82599(hw,speed,(_Bool)((bool)((int)autoneg_wait_to_complete) != 0));
  
#line 902 
  if (status != 0) 
#line 903 
                   goto out; else ;
  
#line 911 
  i = 0;
  
#line 911 
  goto ldv_54884;
  ldv_54883: 
#line 912 
  ;
  {
    
#line 912 
    unsigned long __ms_0 = 100UL;
    {
      unsigned long tmp_1;
      
#line 912 
      goto ldv_54881;
      ldv_54880: 
#line 913 
      ;
      
#line 912 
      __const_udelay(4295000UL);
      ldv_54881: 
#line 914 
      ;
      
#line 912 
      tmp_1 = __ms_0;
      
#line 912 
      __ms_0 -= 1UL;
      
#line 912 
      ;
      
#line 912 
      if (tmp_1 != 0UL) 
#line 914 
                        goto ldv_54880; else 
#line 917 
                                             goto ldv_54882;
      ldv_54882: 
#line 918 
      ;
    }
  }
  
#line 915 
  status = (*(hw->mac.ops.check_link))(hw,& link_speed,& link_up,(_Bool)0);
  
#line 917 
  if (status != 0) 
#line 918 
                   goto out; else ;
  
#line 920 
  if ((int)link_up != 0) 
#line 921 
                         goto out; else ;
  
#line 911 
  i += 1;
  ldv_54884: 
#line 912 
  ;
  
#line 911 
  if (i <= 5) 
#line 913 
              goto ldv_54883; else 
#line 916 
                                   goto ldv_54885;
  ldv_54885: 
#line 917 
  ;
  
#line 925 
  hw->phy.smart_speed_active = (_Bool)0;
  
#line 926 
  status = ixgbe_setup_mac_link_82599(hw,speed,(_Bool)((bool)((int)autoneg_wait_to_complete) != 0));
  out: 
#line 929 
  ;
  
#line 930 
  if ((int)link_up != 0 && link_speed == 32U) {
    
#line 931 
    struct _ddebug descriptor = {.modname = "ixgbe", .function = "ixgbe_setup_mac_link_smartspeed", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82599.c", .format = "Smartspeed has downgraded the link speed from the maximum advertised\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))931U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 931 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 931 
                                                        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"Smartspeed has downgraded the link speed from the maximum advertised\n"); else ;
  }
  else ;
  
#line 932 
  return status;
}


#line 943  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82599.c"
static s32 ixgbe_setup_mac_link_82599(struct ixgbe_hw *hw, ixgbe_link_speed speed, bool autoneg_wait_to_complete)
{
  s32 __retres;
  s32 status;
  u32 pma_pmd_1g;
  u32 link_mode;
  u32 links_reg;
  u32 i;
  
#line 947 
  bool autoneg = (_Bool)0;
  
#line 950 
  u32 autoc2 = ixgbe_read_reg(hw,17064U);
  
#line 951 
  u32 pma_pmd_10g_serial = autoc2 & 196608U;
  
#line 952 
  ixgbe_link_speed link_capabilities = 0U;
  
#line 955 
  u32 current_autoc = ixgbe_read_reg(hw,17056U);
  
#line 957 
  u32 orig_autoc = 0U;
  
#line 959 
  u32 autoc = current_autoc;
  
#line 962 
  status = (*(hw->mac.ops.get_link_capabilities))(hw,& link_capabilities,& autoneg);
  
#line 964 
  if (status != 0) {
    
#line 965 
    __retres = status;
    
#line 965 
    goto return_label;
  }
  else ;
  
#line 967 
  speed &= link_capabilities;
  
#line 969 
  if (speed == 0U) {
    
#line 970 
    __retres = -8;
    
#line 970 
    goto return_label;
  }
  else ;
  
#line 973 
  if ((int)hw->mac.orig_link_settings_stored != 0) 
#line 974 
                                                   orig_autoc = hw->mac.orig_autoc; else 
                                                                    
#line 976 
                                                                    orig_autoc = autoc;
  
#line 978 
  link_mode = autoc & 57344U;
  
#line 979 
  pma_pmd_1g = autoc & 512U;
  
#line 981 
  if ((link_mode == 32768U || link_mode == 49152U) || link_mode == 57344U) {
    
#line 985 
    autoc &= 1073676287U;
    
#line 986 
    if ((speed & 128U) != 0U) {
      
#line 987 
      if (orig_autoc < (u32)0) 
#line 988 
                               autoc |= 2147483648U; else ;
      
#line 989 
      if ((orig_autoc & 65536U) != 0U && ! hw->phy.smart_speed_active) 
        
#line 991 
        autoc |= 65536U; else ;
    }
    else ;
    
#line 993 
    if ((speed & 32U) != 0U) 
#line 994 
                             autoc |= 1073741824U; else ;
  }
  else 
    
#line 995 
    if (pma_pmd_1g == 0U && (link_mode == 0U || link_mode == 16384U)) {
      
#line 999 
      if (speed == 128U && pma_pmd_10g_serial == 131072U) {
        
#line 1001 
        autoc &= 4294909951U;
        
#line 1002 
        autoc |= 24576U;
      }
      else ;
    }
    else 
      
#line 1004 
      if (pma_pmd_10g_serial == 131072U && link_mode == 24576U) {
        
#line 1007 
        if (speed == 32U && pma_pmd_1g == 0U) {
          
#line 1009 
          autoc &= 4294909951U;
          
#line 1010 
          if ((int)autoneg != 0) 
#line 1011 
                                 autoc |= 16384U; else 
#line 1013 
                                                       autoc = autoc;
        }
        else ;
      }
      else ;
  
#line 1017 
  if (autoc != current_autoc) {
    
#line 1019 
    status = (*(hw->mac.ops.prot_autoc_write))(hw,autoc,(_Bool)0);
    
#line 1020 
    if (status != 0) {
      
#line 1021 
      __retres = status;
      
#line 1021 
      goto return_label;
    }
    else ;
    
#line 1024 
    if ((int)autoneg_wait_to_complete != 0) {
      
#line 1025 
      if ((link_mode == 32768U || link_mode == 49152U) || link_mode == 57344U) {
        
#line 1028 
        links_reg = 0U;
        
#line 1029 
        i = 0U;
        
#line 1029 
        goto ldv_54907;
        ldv_54906: 
#line 1030 
        ;
        
#line 1030 
        links_reg = ixgbe_read_reg(hw,17060U);
        
#line 1032 
        if (links_reg < (u32)0) 
#line 1033 
                                goto ldv_54905; else ;
        
#line 1034 
        msleep(100U);
        
#line 1029 
        i += 1U;
        ldv_54907: 
#line 1030 
        ;
        
#line 1029 
        if (i <= 44U) 
#line 1031 
                      goto ldv_54906; else 
#line 1034 
                                           goto ldv_54905;
        ldv_54905: 
#line 1035 
        ;
        
#line 1036 
        if (links_reg >= (u32)0) {
          
#line 1037 
          status = -14;
          {
            
#line 1039 
            struct _ddebug descriptor = {.modname = "ixgbe", .function = "ixgbe_setup_mac_link_82599", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82599.c", .format = "Autoneg did not complete.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1039U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
            
#line 1039 
            if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 1039 
                                                                __dynamic_netdev_dbg(& descriptor,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"Autoneg did not complete.\n"); else ;
          }
        }
        else ;
      }
      else ;
    }
    else ;
    
#line 1045 
    msleep(50U);
  }
  else ;
  
#line 1048 
  __retres = status;
  return_label: 
#line 1048 
                return __retres;
}


#line 1059  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82599.c"
static s32 ixgbe_setup_copper_link_82599(struct ixgbe_hw *hw, ixgbe_link_speed speed, bool autoneg_wait_to_complete)
{
  s32 status;
  
#line 1066 
  status = (*(hw->phy.ops.setup_link_speed))(hw,speed,(_Bool)((bool)((int)autoneg_wait_to_complete) != 0));
  
#line 1069 
  ixgbe_start_mac_link_82599(hw,(_Bool)((bool)((int)autoneg_wait_to_complete) != 0));
  
#line 1071 
  return status;
}


#line 1082  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82599.c"
static s32 ixgbe_reset_hw_82599(struct ixgbe_hw *hw)
{
  s32 __retres;
  ixgbe_link_speed link_speed;
  s32 status;
  u32 ctrl;
  u32 i;
  u32 autoc;
  u32 autoc2;
  u32 curr_lms;
  u32 tmp;
  u32 tmp_0;
  bool tmp_2;
  
#line 1088 
  bool link_up = (_Bool)0;
  
#line 1091 
  status = (*(hw->mac.ops.stop_adapter))(hw);
  
#line 1092 
  if (status != 0) {
    
#line 1093 
    __retres = status;
    
#line 1093 
    goto return_label;
  }
  else ;
  
#line 1096 
  ixgbe_clear_tx_pending(hw);
  
#line 1101 
  status = (*(hw->phy.ops.init))(hw);
  
#line 1103 
  if (status == -19) {
    
#line 1104 
    __retres = status;
    
#line 1104 
    goto return_label;
  }
  else ;
  
#line 1107 
  if ((int)hw->phy.sfp_setup_needed != 0) {
    
#line 1108 
    status = (*(hw->mac.ops.setup_sfp))(hw);
    
#line 1109 
    hw->phy.sfp_setup_needed = (_Bool)0;
  }
  else ;
  
#line 1112 
  if (status == -19) {
    
#line 1113 
    __retres = status;
    
#line 1113 
    goto return_label;
  }
  else ;
  
#line 1116 
  if (! hw->phy.reset_disable && hw->phy.ops.reset != (s32 (*)(struct ixgbe_hw *))0) 
    
#line 1117 
    (*(hw->phy.ops.reset))(hw); else ;
  
#line 1120 
  tmp = ixgbe_read_reg(hw,17056U);
  
#line 1120 
  curr_lms = tmp & 57344U;
  mac_reset_top: 
#line 1122 
  ;
  
#line 1129 
  ctrl = 8U;
  
#line 1130 
  if (! hw->force_full_reset) {
    
#line 1131 
    (*(hw->mac.ops.check_link))(hw,& link_speed,& link_up,(_Bool)0);
    
#line 1132 
    if ((int)link_up != 0) 
#line 1133 
                           ctrl = 67108864U; else ;
  }
  else ;
  
#line 1136 
  tmp_0 = ixgbe_read_reg(hw,0U);
  
#line 1136 
  ctrl = tmp_0 | ctrl;
  
#line 1137 
  ixgbe_write_reg(hw,0U,ctrl);
  
#line 1138 
  ixgbe_read_reg(hw,8U);
  
#line 1141 
  i = 0U;
  
#line 1141 
  goto ldv_54930;
  ldv_54929: 
#line 1142 
  ;
  
#line 1142 
  __const_udelay(4295UL);
  
#line 1143 
  ctrl = ixgbe_read_reg(hw,0U);
  
#line 1144 
  if ((ctrl & 67108872U) == 0U) 
#line 1145 
                                goto ldv_54928; else ;
  
#line 1141 
  i += 1U;
  ldv_54930: 
#line 1142 
  ;
  
#line 1141 
  if (i <= 9U) 
#line 1143 
               goto ldv_54929; else 
#line 1146 
                                    goto ldv_54928;
  ldv_54928: 
#line 1147 
  ;
  
#line 1148 
  if ((ctrl & 67108872U) != 0U) {
    
#line 1149 
    status = -15;
    {
      
#line 1150 
      struct _ddebug descriptor = {.modname = "ixgbe", .function = "ixgbe_reset_hw_82599", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82599.c", .format = "Reset polling failed to complete.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1150U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1150 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 1150 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"Reset polling failed to complete.\n"); else ;
    }
  }
  else ;
  
#line 1153 
  msleep(50U);
  
#line 1160 
  if (((int)hw->mac.flags & 1) != 0) {
    
#line 1161 
    hw->mac.flags = (unsigned char)((unsigned int)hw->mac.flags & 254U);
    
#line 1162 
    goto mac_reset_top;
  }
  else ;
  
#line 1170 
  autoc = ixgbe_read_reg(hw,17056U);
  
#line 1171 
  autoc2 = ixgbe_read_reg(hw,17064U);
  
#line 1174 
  if ((autoc2 & 1879048192U) != 0U) {
    
#line 1175 
    autoc2 &= 2415919103U;
    
#line 1176 
    ixgbe_write_reg(hw,17064U,autoc2);
    
#line 1177 
    ixgbe_read_reg(hw,8U);
  }
  else ;
  
#line 1180 
  if (! hw->mac.orig_link_settings_stored) {
    
#line 1181 
    hw->mac.orig_autoc = autoc;
    
#line 1182 
    hw->mac.orig_autoc2 = autoc2;
    
#line 1183 
    hw->mac.orig_link_settings_stored = (_Bool)1;
  }
  else {
    
#line 1192 
    if ((int)hw->phy.multispeed_fiber != 0) {
      bool tmp_1;
      
#line 1192 
      tmp_1 = ixgbe_mng_enabled(hw);
      
#line 1192 
      if ((int)tmp_1 != 0) 
#line 1194 
                           hw->mac.orig_autoc = (hw->mac.orig_autoc & 4294909951U) | curr_lms; else 
                                                                    
#line 1192 
                                                                    goto _LAND;
    }
    else {
      _LAND: 
#line 1192 
      ;
      
#line 1192 
      if ((int)hw->wol_enabled != 0) 
#line 1194 
                                     hw->mac.orig_autoc = (hw->mac.orig_autoc & 4294909951U) | curr_lms; else ;
    }
    
#line 1198 
    if (hw->mac.orig_autoc != autoc) {
      
#line 1199 
      status = (*(hw->mac.ops.prot_autoc_write))(hw,hw->mac.orig_autoc,(_Bool)0);
      
#line 1202 
      if (status != 0) {
        
#line 1203 
        __retres = status;
        
#line 1203 
        goto return_label;
      }
      else ;
    }
    else ;
    
#line 1206 
    if (((hw->mac.orig_autoc2 ^ autoc2) & 4294901760U) != 0U) {
      
#line 1208 
      autoc2 &= 65535U;
      
#line 1209 
      autoc2 = (hw->mac.orig_autoc2 & 4294901760U) | autoc2;
      
#line 1211 
      ixgbe_write_reg(hw,17064U,autoc2);
    }
    else ;
  }
  
#line 1216 
  (*(hw->mac.ops.get_mac_addr))(hw,(u8 *)(& hw->mac.perm_addr));
  
#line 1223 
  hw->mac.num_rar_entries = 128U;
  
#line 1224 
  (*(hw->mac.ops.init_rx_addrs))(hw);
  
#line 1227 
  (*(hw->mac.ops.get_san_mac_addr))(hw,(u8 *)(& hw->mac.san_addr));
  
#line 1230 
  tmp_2 = is_valid_ether_addr((u8 const *)(& hw->mac.san_addr));
  
#line 1230 
  if ((int)tmp_2 != 0) {
    
#line 1231 
    (*(hw->mac.ops.set_rar))(hw,hw->mac.num_rar_entries + 4294967295U,(u8 *)(& hw->mac.san_addr),0U,2147483648U);
    
#line 1235 
    hw->mac.san_mac_rar_index = (unsigned char)((unsigned int)((unsigned char)hw->mac.num_rar_entries) + 255U);
    
#line 1238 
    hw->mac.num_rar_entries -= 1U;
  }
  else ;
  
#line 1242 
  (*(hw->mac.ops.get_wwn_prefix))(hw,& hw->mac.wwnn_prefix,& hw->mac.wwpn_prefix);
  
#line 1245 
  __retres = status;
  return_label: 
#line 1245 
                return __retres;
}


#line 1252  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82599.c"
s32 ixgbe_reinit_fdir_tables_82599(struct ixgbe_hw *hw)
{
  s32 __retres;
  int i;
  u32 tmp_0;
  u32 tmp_1;
  u32 tmp_2;
  u32 tmp_3;
  
#line 1255 
  u32 fdirctrl = ixgbe_read_reg(hw,60928U);
  
#line 1257 
  fdirctrl &= 4294967287U;
  
#line 1263 
  i = 0;
  
#line 1263 
  goto ldv_54940;
  ldv_54939: 
#line 1264 
  ;
  
#line 1264 
  tmp_0 = ixgbe_read_reg(hw,60972U);
  
#line 1264 
  if ((tmp_0 & 3U) == 0U) 
#line 1266 
                          goto ldv_54938; else ;
  
#line 1267 
  __const_udelay(42950UL);
  
#line 1263 
  i += 1;
  ldv_54940: 
#line 1264 
  ;
  
#line 1263 
  if (i <= 9) 
#line 1265 
              goto ldv_54939; else 
#line 1268 
                                   goto ldv_54938;
  ldv_54938: 
#line 1269 
  ;
  
#line 1269 
  if (i > 9) {
    {
      
#line 1270 
      struct _ddebug descriptor = {.modname = "ixgbe", .function = "ixgbe_reinit_fdir_tables_82599", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82599.c", .format = "Flow Director previous command isn\'t complete, aborting table re-initialization.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1270U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1270 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 1270 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"Flow Director previous command isn\'t complete, aborting table re-initialization.\n"); else ;
    }
    
#line 1271 
    __retres = -23;
    
#line 1271 
    goto return_label;
  }
  else ;
  
#line 1274 
  ixgbe_write_reg(hw,60984U,0U);
  
#line 1275 
  ixgbe_read_reg(hw,8U);
  
#line 1283 
  tmp_1 = ixgbe_read_reg(hw,60972U);
  
#line 1283 
  ;
  
#line 1283 
  ixgbe_write_reg(hw,60972U,tmp_1 | 256U);
  
#line 1286 
  ixgbe_read_reg(hw,8U);
  
#line 1287 
  tmp_2 = ixgbe_read_reg(hw,60972U);
  
#line 1287 
  ;
  
#line 1287 
  ixgbe_write_reg(hw,60972U,tmp_2 & 4294967039U);
  
#line 1290 
  ixgbe_read_reg(hw,8U);
  
#line 1295 
  ixgbe_write_reg(hw,60968U,0U);
  
#line 1296 
  ixgbe_read_reg(hw,8U);
  
#line 1298 
  ixgbe_write_reg(hw,60928U,fdirctrl);
  
#line 1299 
  ixgbe_read_reg(hw,8U);
  
#line 1302 
  i = 0;
  
#line 1302 
  goto ldv_54945;
  ldv_54944: 
#line 1303 
  ;
  
#line 1303 
  tmp_3 = ixgbe_read_reg(hw,60928U);
  
#line 1303 
  if ((tmp_3 & 8U) != 0U) 
#line 1305 
                          goto ldv_54943; else ;
  
#line 1306 
  usleep_range(1000UL,2000UL);
  
#line 1302 
  i += 1;
  ldv_54945: 
#line 1303 
  ;
  
#line 1302 
  if (i <= 9) 
#line 1304 
              goto ldv_54944; else 
#line 1307 
                                   goto ldv_54943;
  ldv_54943: 
#line 1308 
  ;
  
#line 1308 
  if (i > 9) {
    {
      
#line 1309 
      struct _ddebug descriptor_0 = {.modname = "ixgbe", .function = "ixgbe_reinit_fdir_tables_82599", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82599.c", .format = "Flow Director Signature poll time exceeded!\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1309U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1309 
      if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 1309 
                                                            __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"Flow Director Signature poll time exceeded!\n"); else ;
    }
    
#line 1310 
    __retres = -23;
    
#line 1310 
    goto return_label;
  }
  else ;
  
#line 1314 
  ixgbe_read_reg(hw,61008U);
  
#line 1315 
  ixgbe_read_reg(hw,61012U);
  
#line 1316 
  ixgbe_read_reg(hw,61016U);
  
#line 1317 
  ixgbe_read_reg(hw,61020U);
  
#line 1318 
  ixgbe_read_reg(hw,61004U);
  
#line 1320 
  __retres = 0;
  return_label: 
#line 1320 
                return __retres;
}


#line 1328  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82599.c"
static void ixgbe_fdir_enable_82599(struct ixgbe_hw *hw, u32 fdirctrl)
{
  int i;
  u32 tmp;
  
#line 1333 
  ixgbe_write_reg(hw,61032U,1034753250U);
  
#line 1334 
  ixgbe_write_reg(hw,61036U,390936084U);
  
#line 1349 
  ixgbe_write_reg(hw,60928U,fdirctrl);
  
#line 1350 
  ixgbe_read_reg(hw,8U);
  
#line 1351 
  i = 0;
  
#line 1351 
  goto ldv_54954;
  ldv_54953: 
#line 1352 
  ;
  
#line 1352 
  tmp = ixgbe_read_reg(hw,60928U);
  
#line 1352 
  if ((tmp & 8U) != 0U) 
#line 1354 
                        goto ldv_54952; else ;
  
#line 1355 
  usleep_range(1000UL,2000UL);
  
#line 1351 
  i += 1;
  ldv_54954: 
#line 1352 
  ;
  
#line 1351 
  if (i <= 9) 
#line 1353 
              goto ldv_54953; else 
#line 1356 
                                   goto ldv_54952;
  ldv_54952: 
#line 1357 
  ;
  
#line 1358 
  if (i > 9) {
    
#line 1359 
    struct _ddebug descriptor = {.modname = "ixgbe", .function = "ixgbe_fdir_enable_82599", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82599.c", .format = "Flow Director poll time exceeded!\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1359U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 1359 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 1359 
                                                        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"Flow Director poll time exceeded!\n"); else ;
  }
  else ;
  
#line 1361 
  return;
}


#line 1368  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82599.c"
s32 ixgbe_init_fdir_signature_82599(struct ixgbe_hw *hw, u32 fdirctrl)
{
  s32 __retres;
  
#line 1376 
  fdirctrl |= 1241907200U;
  
#line 1381 
  ixgbe_fdir_enable_82599(hw,fdirctrl);
  
#line 1383 
  __retres = 0;
  
#line 1383 
  return __retres;
}


#line 1392  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82599.c"
s32 ixgbe_init_fdir_perfect_82599(struct ixgbe_hw *hw, u32 fdirctrl)
{
  s32 __retres;
  
#line 1403 
  fdirctrl |= 1241939760U;
  
#line 1411 
  ixgbe_fdir_enable_82599(hw,fdirctrl);
  
#line 1413 
  __retres = 0;
  
#line 1413 
  return __retres;
}


#line 1450  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82599.c"
static u32 ixgbe_atr_compute_sig_hash_82599(union ixgbe_atr_hash_dword input, union ixgbe_atr_hash_dword common)
{
  u32 __retres;
  u32 hi_hash_dword;
  u32 lo_hash_dword;
  u32 flow_vm_vlan;
  
#line 1454 
  u32 sig_hash = 0U;
  
#line 1454 
  u32 bucket_hash = 0U;
  
#line 1454 
  u32 common_hash = 0U;
  
#line 1457 
  if (0 != 0) 
#line 1457 
              flow_vm_vlan = (((input.dword << 24) | ((input.dword << 8) & 16711680U)) | ((input.dword >> 8) & 65280U)) | (input.dword >> 24); else 
                                                                    
#line 1457 
                                                                    flow_vm_vlan = __fswab32(input.dword);
  
#line 1460 
  if (0 != 0) 
#line 1460 
              hi_hash_dword = (((common.dword << 24) | ((common.dword << 8) & 16711680U)) | ((common.dword >> 8) & 65280U)) | (common.dword >> 24); else 
                                                                    
#line 1460 
                                                                    hi_hash_dword = __fswab32(common.dword);
  
#line 1463 
  lo_hash_dword = (hi_hash_dword << 16) | (hi_hash_dword >> ((unsigned long)8 * sizeof(hi_hash_dword) - (unsigned long)16));
  
#line 1466 
  hi_hash_dword = ((flow_vm_vlan >> 16) ^ flow_vm_vlan) ^ hi_hash_dword;
  {
    
#line 1469 
    u32 n = 0U;
    
#line 1469 
    if (((353178624 >> n) & 1) != 0) 
#line 1469 
                                     common_hash = (lo_hash_dword >> n) ^ common_hash;
    else 
      
#line 1469 
      if (((1034753250 >> n) & 1) != 0) 
#line 1469 
                                        bucket_hash = (lo_hash_dword >> n) ^ bucket_hash;
      else 
        
#line 1469 
        if (((390936084 >> n) & 1) != 0) 
#line 1469 
                                         sig_hash = (lo_hash_dword << (16U - n)) ^ sig_hash; else ;
    
#line 1469 
    if (((353178624 >> (n + 16U)) & 1) != 0) 
#line 1469 
                                             common_hash = (hi_hash_dword >> n) ^ common_hash;
    else 
      
#line 1469 
      if (((1034753250 >> (n + 16U)) & 1) != 0) 
#line 1469 
                                                bucket_hash = (hi_hash_dword >> n) ^ bucket_hash;
      else 
        
#line 1469 
        if (((390936084 >> (n + 16U)) & 1) != 0) 
#line 1469 
                                                 sig_hash = (hi_hash_dword << (16U - n)) ^ sig_hash; else ;
  }
  
#line 1476 
  lo_hash_dword = ((flow_vm_vlan << 16) ^ flow_vm_vlan) ^ lo_hash_dword;
  {
    
#line 1479 
    u32 n_0 = 1U;
    
#line 1479 
    if (((353178624 >> n_0) & 1) != 0) 
#line 1479 
                                       common_hash = (lo_hash_dword >> n_0) ^ common_hash;
    else 
      
#line 1479 
      if (((1034753250 >> n_0) & 1) != 0) 
#line 1479 
                                          bucket_hash = (lo_hash_dword >> n_0) ^ bucket_hash;
      else 
        
#line 1479 
        if (((390936084 >> n_0) & 1) != 0) 
#line 1479 
                                           sig_hash = (lo_hash_dword << (16U - n_0)) ^ sig_hash; else ;
    
#line 1479 
    if (((353178624 >> (n_0 + 16U)) & 1) != 0) 
#line 1479 
                                               common_hash = (hi_hash_dword >> n_0) ^ common_hash;
    else 
      
#line 1479 
      if (((1034753250 >> (n_0 + 16U)) & 1) != 0) 
#line 1479 
                                                  bucket_hash = (hi_hash_dword >> n_0) ^ bucket_hash;
      else 
        
#line 1479 
        if (((390936084 >> (n_0 + 16U)) & 1) != 0) 
#line 1479 
                                                   sig_hash = (hi_hash_dword << (16U - n_0)) ^ sig_hash; else ;
  }
  {
    
#line 1480 
    u32 n_1 = 2U;
    
#line 1480 
    if (((353178624 >> n_1) & 1) != 0) 
#line 1480 
                                       common_hash = (lo_hash_dword >> n_1) ^ common_hash;
    else 
      
#line 1480 
      if (((1034753250 >> n_1) & 1) != 0) 
#line 1480 
                                          bucket_hash = (lo_hash_dword >> n_1) ^ bucket_hash;
      else 
        
#line 1480 
        if (((390936084 >> n_1) & 1) != 0) 
#line 1480 
                                           sig_hash = (lo_hash_dword << (16U - n_1)) ^ sig_hash; else ;
    
#line 1480 
    if (((353178624 >> (n_1 + 16U)) & 1) != 0) 
#line 1480 
                                               common_hash = (hi_hash_dword >> n_1) ^ common_hash;
    else 
      
#line 1480 
      if (((1034753250 >> (n_1 + 16U)) & 1) != 0) 
#line 1480 
                                                  bucket_hash = (hi_hash_dword >> n_1) ^ bucket_hash;
      else 
        
#line 1480 
        if (((390936084 >> (n_1 + 16U)) & 1) != 0) 
#line 1480 
                                                   sig_hash = (hi_hash_dword << (16U - n_1)) ^ sig_hash; else ;
  }
  {
    
#line 1481 
    u32 n_2 = 3U;
    
#line 1481 
    if (((353178624 >> n_2) & 1) != 0) 
#line 1481 
                                       common_hash = (lo_hash_dword >> n_2) ^ common_hash;
    else 
      
#line 1481 
      if (((1034753250 >> n_2) & 1) != 0) 
#line 1481 
                                          bucket_hash = (lo_hash_dword >> n_2) ^ bucket_hash;
      else 
        
#line 1481 
        if (((390936084 >> n_2) & 1) != 0) 
#line 1481 
                                           sig_hash = (lo_hash_dword << (16U - n_2)) ^ sig_hash; else ;
    
#line 1481 
    if (((353178624 >> (n_2 + 16U)) & 1) != 0) 
#line 1481 
                                               common_hash = (hi_hash_dword >> n_2) ^ common_hash;
    else 
      
#line 1481 
      if (((1034753250 >> (n_2 + 16U)) & 1) != 0) 
#line 1481 
                                                  bucket_hash = (hi_hash_dword >> n_2) ^ bucket_hash;
      else 
        
#line 1481 
        if (((390936084 >> (n_2 + 16U)) & 1) != 0) 
#line 1481 
                                                   sig_hash = (hi_hash_dword << (16U - n_2)) ^ sig_hash; else ;
  }
  {
    
#line 1482 
    u32 n_3 = 4U;
    
#line 1482 
    if (((353178624 >> n_3) & 1) != 0) 
#line 1482 
                                       common_hash = (lo_hash_dword >> n_3) ^ common_hash;
    else 
      
#line 1482 
      if (((1034753250 >> n_3) & 1) != 0) 
#line 1482 
                                          bucket_hash = (lo_hash_dword >> n_3) ^ bucket_hash;
      else 
        
#line 1482 
        if (((390936084 >> n_3) & 1) != 0) 
#line 1482 
                                           sig_hash = (lo_hash_dword << (16U - n_3)) ^ sig_hash; else ;
    
#line 1482 
    if (((353178624 >> (n_3 + 16U)) & 1) != 0) 
#line 1482 
                                               common_hash = (hi_hash_dword >> n_3) ^ common_hash;
    else 
      
#line 1482 
      if (((1034753250 >> (n_3 + 16U)) & 1) != 0) 
#line 1482 
                                                  bucket_hash = (hi_hash_dword >> n_3) ^ bucket_hash;
      else 
        
#line 1482 
        if (((390936084 >> (n_3 + 16U)) & 1) != 0) 
#line 1482 
                                                   sig_hash = (hi_hash_dword << (16U - n_3)) ^ sig_hash; else ;
  }
  {
    
#line 1483 
    u32 n_4 = 5U;
    
#line 1483 
    if (((353178624 >> n_4) & 1) != 0) 
#line 1483 
                                       common_hash = (lo_hash_dword >> n_4) ^ common_hash;
    else 
      
#line 1483 
      if (((1034753250 >> n_4) & 1) != 0) 
#line 1483 
                                          bucket_hash = (lo_hash_dword >> n_4) ^ bucket_hash;
      else 
        
#line 1483 
        if (((390936084 >> n_4) & 1) != 0) 
#line 1483 
                                           sig_hash = (lo_hash_dword << (16U - n_4)) ^ sig_hash; else ;
    
#line 1483 
    if (((353178624 >> (n_4 + 16U)) & 1) != 0) 
#line 1483 
                                               common_hash = (hi_hash_dword >> n_4) ^ common_hash;
    else 
      
#line 1483 
      if (((1034753250 >> (n_4 + 16U)) & 1) != 0) 
#line 1483 
                                                  bucket_hash = (hi_hash_dword >> n_4) ^ bucket_hash;
      else 
        
#line 1483 
        if (((390936084 >> (n_4 + 16U)) & 1) != 0) 
#line 1483 
                                                   sig_hash = (hi_hash_dword << (16U - n_4)) ^ sig_hash; else ;
  }
  {
    
#line 1484 
    u32 n_5 = 6U;
    
#line 1484 
    if (((353178624 >> n_5) & 1) != 0) 
#line 1484 
                                       common_hash = (lo_hash_dword >> n_5) ^ common_hash;
    else 
      
#line 1484 
      if (((1034753250 >> n_5) & 1) != 0) 
#line 1484 
                                          bucket_hash = (lo_hash_dword >> n_5) ^ bucket_hash;
      else 
        
#line 1484 
        if (((390936084 >> n_5) & 1) != 0) 
#line 1484 
                                           sig_hash = (lo_hash_dword << (16U - n_5)) ^ sig_hash; else ;
    
#line 1484 
    if (((353178624 >> (n_5 + 16U)) & 1) != 0) 
#line 1484 
                                               common_hash = (hi_hash_dword >> n_5) ^ common_hash;
    else 
      
#line 1484 
      if (((1034753250 >> (n_5 + 16U)) & 1) != 0) 
#line 1484 
                                                  bucket_hash = (hi_hash_dword >> n_5) ^ bucket_hash;
      else 
        
#line 1484 
        if (((390936084 >> (n_5 + 16U)) & 1) != 0) 
#line 1484 
                                                   sig_hash = (hi_hash_dword << (16U - n_5)) ^ sig_hash; else ;
  }
  {
    
#line 1485 
    u32 n_6 = 7U;
    
#line 1485 
    if (((353178624 >> n_6) & 1) != 0) 
#line 1485 
                                       common_hash = (lo_hash_dword >> n_6) ^ common_hash;
    else 
      
#line 1485 
      if (((1034753250 >> n_6) & 1) != 0) 
#line 1485 
                                          bucket_hash = (lo_hash_dword >> n_6) ^ bucket_hash;
      else 
        
#line 1485 
        if (((390936084 >> n_6) & 1) != 0) 
#line 1485 
                                           sig_hash = (lo_hash_dword << (16U - n_6)) ^ sig_hash; else ;
    
#line 1485 
    if (((353178624 >> (n_6 + 16U)) & 1) != 0) 
#line 1485 
                                               common_hash = (hi_hash_dword >> n_6) ^ common_hash;
    else 
      
#line 1485 
      if (((1034753250 >> (n_6 + 16U)) & 1) != 0) 
#line 1485 
                                                  bucket_hash = (hi_hash_dword >> n_6) ^ bucket_hash;
      else 
        
#line 1485 
        if (((390936084 >> (n_6 + 16U)) & 1) != 0) 
#line 1485 
                                                   sig_hash = (hi_hash_dword << (16U - n_6)) ^ sig_hash; else ;
  }
  {
    
#line 1486 
    u32 n_7 = 8U;
    
#line 1486 
    if (((353178624 >> n_7) & 1) != 0) 
#line 1486 
                                       common_hash = (lo_hash_dword >> n_7) ^ common_hash;
    else 
      
#line 1486 
      if (((1034753250 >> n_7) & 1) != 0) 
#line 1486 
                                          bucket_hash = (lo_hash_dword >> n_7) ^ bucket_hash;
      else 
        
#line 1486 
        if (((390936084 >> n_7) & 1) != 0) 
#line 1486 
                                           sig_hash = (lo_hash_dword << (16U - n_7)) ^ sig_hash; else ;
    
#line 1486 
    if (((353178624 >> (n_7 + 16U)) & 1) != 0) 
#line 1486 
                                               common_hash = (hi_hash_dword >> n_7) ^ common_hash;
    else 
      
#line 1486 
      if (((1034753250 >> (n_7 + 16U)) & 1) != 0) 
#line 1486 
                                                  bucket_hash = (hi_hash_dword >> n_7) ^ bucket_hash;
      else 
        
#line 1486 
        if (((390936084 >> (n_7 + 16U)) & 1) != 0) 
#line 1486 
                                                   sig_hash = (hi_hash_dword << (16U - n_7)) ^ sig_hash; else ;
  }
  {
    
#line 1487 
    u32 n_8 = 9U;
    
#line 1487 
    if (((353178624 >> n_8) & 1) != 0) 
#line 1487 
                                       common_hash = (lo_hash_dword >> n_8) ^ common_hash;
    else 
      
#line 1487 
      if (((1034753250 >> n_8) & 1) != 0) 
#line 1487 
                                          bucket_hash = (lo_hash_dword >> n_8) ^ bucket_hash;
      else 
        
#line 1487 
        if (((390936084 >> n_8) & 1) != 0) 
#line 1487 
                                           sig_hash = (lo_hash_dword << (16U - n_8)) ^ sig_hash; else ;
    
#line 1487 
    if (((353178624 >> (n_8 + 16U)) & 1) != 0) 
#line 1487 
                                               common_hash = (hi_hash_dword >> n_8) ^ common_hash;
    else 
      
#line 1487 
      if (((1034753250 >> (n_8 + 16U)) & 1) != 0) 
#line 1487 
                                                  bucket_hash = (hi_hash_dword >> n_8) ^ bucket_hash;
      else 
        
#line 1487 
        if (((390936084 >> (n_8 + 16U)) & 1) != 0) 
#line 1487 
                                                   sig_hash = (hi_hash_dword << (16U - n_8)) ^ sig_hash; else ;
  }
  {
    
#line 1488 
    u32 n_9 = 10U;
    
#line 1488 
    if (((353178624 >> n_9) & 1) != 0) 
#line 1488 
                                       common_hash = (lo_hash_dword >> n_9) ^ common_hash;
    else 
      
#line 1488 
      if (((1034753250 >> n_9) & 1) != 0) 
#line 1488 
                                          bucket_hash = (lo_hash_dword >> n_9) ^ bucket_hash;
      else 
        
#line 1488 
        if (((390936084 >> n_9) & 1) != 0) 
#line 1488 
                                           sig_hash = (lo_hash_dword << (16U - n_9)) ^ sig_hash; else ;
    
#line 1488 
    if (((353178624 >> (n_9 + 16U)) & 1) != 0) 
#line 1488 
                                               common_hash = (hi_hash_dword >> n_9) ^ common_hash;
    else 
      
#line 1488 
      if (((1034753250 >> (n_9 + 16U)) & 1) != 0) 
#line 1488 
                                                  bucket_hash = (hi_hash_dword >> n_9) ^ bucket_hash;
      else 
        
#line 1488 
        if (((390936084 >> (n_9 + 16U)) & 1) != 0) 
#line 1488 
                                                   sig_hash = (hi_hash_dword << (16U - n_9)) ^ sig_hash; else ;
  }
  {
    
#line 1489 
    u32 n_10 = 11U;
    
#line 1489 
    if (((353178624 >> n_10) & 1) != 0) 
#line 1489 
                                        common_hash = (lo_hash_dword >> n_10) ^ common_hash;
    else 
      
#line 1489 
      if (((1034753250 >> n_10) & 1) != 0) 
#line 1489 
                                           bucket_hash = (lo_hash_dword >> n_10) ^ bucket_hash;
      else 
        
#line 1489 
        if (((390936084 >> n_10) & 1) != 0) 
#line 1489 
                                            sig_hash = (lo_hash_dword << (16U - n_10)) ^ sig_hash; else ;
    
#line 1489 
    if (((353178624 >> (n_10 + 16U)) & 1) != 0) 
#line 1489 
                                                common_hash = (hi_hash_dword >> n_10) ^ common_hash;
    else 
      
#line 1489 
      if (((1034753250 >> (n_10 + 16U)) & 1) != 0) 
#line 1489 
                                                   bucket_hash = (hi_hash_dword >> n_10) ^ bucket_hash;
      else 
        
#line 1489 
        if (((390936084 >> (n_10 + 16U)) & 1) != 0) 
#line 1489 
                                                    sig_hash = (hi_hash_dword << (16U - n_10)) ^ sig_hash; else ;
  }
  {
    
#line 1490 
    u32 n_11 = 12U;
    
#line 1490 
    if (((353178624 >> n_11) & 1) != 0) 
#line 1490 
                                        common_hash = (lo_hash_dword >> n_11) ^ common_hash;
    else 
      
#line 1490 
      if (((1034753250 >> n_11) & 1) != 0) 
#line 1490 
                                           bucket_hash = (lo_hash_dword >> n_11) ^ bucket_hash;
      else 
        
#line 1490 
        if (((390936084 >> n_11) & 1) != 0) 
#line 1490 
                                            sig_hash = (lo_hash_dword << (16U - n_11)) ^ sig_hash; else ;
    
#line 1490 
    if (((353178624 >> (n_11 + 16U)) & 1) != 0) 
#line 1490 
                                                common_hash = (hi_hash_dword >> n_11) ^ common_hash;
    else 
      
#line 1490 
      if (((1034753250 >> (n_11 + 16U)) & 1) != 0) 
#line 1490 
                                                   bucket_hash = (hi_hash_dword >> n_11) ^ bucket_hash;
      else 
        
#line 1490 
        if (((390936084 >> (n_11 + 16U)) & 1) != 0) 
#line 1490 
                                                    sig_hash = (hi_hash_dword << (16U - n_11)) ^ sig_hash; else ;
  }
  {
    
#line 1491 
    u32 n_12 = 13U;
    
#line 1491 
    if (((353178624 >> n_12) & 1) != 0) 
#line 1491 
                                        common_hash = (lo_hash_dword >> n_12) ^ common_hash;
    else 
      
#line 1491 
      if (((1034753250 >> n_12) & 1) != 0) 
#line 1491 
                                           bucket_hash = (lo_hash_dword >> n_12) ^ bucket_hash;
      else 
        
#line 1491 
        if (((390936084 >> n_12) & 1) != 0) 
#line 1491 
                                            sig_hash = (lo_hash_dword << (16U - n_12)) ^ sig_hash; else ;
    
#line 1491 
    if (((353178624 >> (n_12 + 16U)) & 1) != 0) 
#line 1491 
                                                common_hash = (hi_hash_dword >> n_12) ^ common_hash;
    else 
      
#line 1491 
      if (((1034753250 >> (n_12 + 16U)) & 1) != 0) 
#line 1491 
                                                   bucket_hash = (hi_hash_dword >> n_12) ^ bucket_hash;
      else 
        
#line 1491 
        if (((390936084 >> (n_12 + 16U)) & 1) != 0) 
#line 1491 
                                                    sig_hash = (hi_hash_dword << (16U - n_12)) ^ sig_hash; else ;
  }
  {
    
#line 1492 
    u32 n_13 = 14U;
    
#line 1492 
    if (((353178624 >> n_13) & 1) != 0) 
#line 1492 
                                        common_hash = (lo_hash_dword >> n_13) ^ common_hash;
    else 
      
#line 1492 
      if (((1034753250 >> n_13) & 1) != 0) 
#line 1492 
                                           bucket_hash = (lo_hash_dword >> n_13) ^ bucket_hash;
      else 
        
#line 1492 
        if (((390936084 >> n_13) & 1) != 0) 
#line 1492 
                                            sig_hash = (lo_hash_dword << (16U - n_13)) ^ sig_hash; else ;
    
#line 1492 
    if (((353178624 >> (n_13 + 16U)) & 1) != 0) 
#line 1492 
                                                common_hash = (hi_hash_dword >> n_13) ^ common_hash;
    else 
      
#line 1492 
      if (((1034753250 >> (n_13 + 16U)) & 1) != 0) 
#line 1492 
                                                   bucket_hash = (hi_hash_dword >> n_13) ^ bucket_hash;
      else 
        
#line 1492 
        if (((390936084 >> (n_13 + 16U)) & 1) != 0) 
#line 1492 
                                                    sig_hash = (hi_hash_dword << (16U - n_13)) ^ sig_hash; else ;
  }
  {
    
#line 1493 
    u32 n_14 = 15U;
    
#line 1493 
    if (((353178624 >> n_14) & 1) != 0) 
#line 1493 
                                        common_hash = (lo_hash_dword >> n_14) ^ common_hash;
    else 
      
#line 1493 
      if (((1034753250 >> n_14) & 1) != 0) 
#line 1493 
                                           bucket_hash = (lo_hash_dword >> n_14) ^ bucket_hash;
      else 
        
#line 1493 
        if (((390936084 >> n_14) & 1) != 0) 
#line 1493 
                                            sig_hash = (lo_hash_dword << (16U - n_14)) ^ sig_hash; else ;
    
#line 1493 
    if (((353178624 >> (n_14 + 16U)) & 1) != 0) 
#line 1493 
                                                common_hash = (hi_hash_dword >> n_14) ^ common_hash;
    else 
      
#line 1493 
      if (((1034753250 >> (n_14 + 16U)) & 1) != 0) 
#line 1493 
                                                   bucket_hash = (hi_hash_dword >> n_14) ^ bucket_hash;
      else 
        
#line 1493 
        if (((390936084 >> (n_14 + 16U)) & 1) != 0) 
#line 1493 
                                                    sig_hash = (hi_hash_dword << (16U - n_14)) ^ sig_hash; else ;
  }
  
#line 1496 
  bucket_hash ^= common_hash;
  
#line 1497 
  bucket_hash &= 32767U;
  
#line 1499 
  sig_hash = (common_hash << 16) ^ sig_hash;
  
#line 1500 
  sig_hash &= 2147418112U;
  
#line 1503 
  __retres = sig_hash ^ bucket_hash;
  
#line 1503 
  return __retres;
}


#line 1513  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82599.c"
s32 ixgbe_fdir_add_signature_filter_82599(struct ixgbe_hw *hw, union ixgbe_atr_hash_dword input, union ixgbe_atr_hash_dword common, u8 queue)
{
  s32 __retres;
  u64 fdirhashcmd;
  u32 fdircmd;
  u32 tmp;
  
#line 1525 
  switch ((int)input.formatted.flow_type) {
    case 2: 
#line 1526 
    ;
    case 1: 
#line 1527 
    ;
    case 3: 
#line 1528 
    ;
    case 6: 
#line 1529 
    ;
    case 5: 
#line 1530 
    ;
    case 7: 
#line 1531 
    ;
    
#line 1532 
    goto ldv_55005;
    default: 
#line 1533 
    ;
    {
      
#line 1534 
      struct _ddebug descriptor = {.modname = "ixgbe", .function = "ixgbe_fdir_add_signature_filter_82599", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82599.c", .format = " Error on flow type input\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1534U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1534 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 1534 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev," Error on flow type input\n"); else ;
    }
    
#line 1535 
    __retres = -4;
    
#line 1535 
    goto return_label;
  }
  ldv_55005: 
#line 1539 
  ;
  
#line 1539 
  fdircmd = 34825U;
  
#line 1541 
  fdircmd = (unsigned int)((int)input.formatted.flow_type << 5) | fdircmd;
  
#line 1542 
  fdircmd = ((unsigned int)queue << 16) | fdircmd;
  
#line 1548 
  fdirhashcmd = (unsigned long long)fdircmd << 32;
  
#line 1549 
  tmp = ixgbe_atr_compute_sig_hash_82599(input,common);
  
#line 1549 
  fdirhashcmd = (unsigned long long)tmp | fdirhashcmd;
  
#line 1550 
  ixgbe_write_reg64(hw,60968U,fdirhashcmd);
  {
    
#line 1552 
    struct _ddebug descriptor_0 = {.modname = "ixgbe", .function = "ixgbe_fdir_add_signature_filter_82599", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82599.c", .format = "Tx Queue=%x hash=%x\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1552U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 1552 
    if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 1552 
                                                          __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"Tx Queue=%x hash=%x\n",(int)queue,(unsigned int)fdirhashcmd); else ;
  }
  
#line 1554 
  __retres = 0;
  return_label: 
#line 1554 
                return __retres;
}


#line 1577  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82599.c"
void ixgbe_atr_compute_perfect_hash_82599(union ixgbe_atr_input *input, union ixgbe_atr_input *input_mask)
{
  u32 hi_hash_dword;
  u32 lo_hash_dword;
  u32 flow_vm_vlan;
  int i;
  
#line 1582 
  u32 bucket_hash = 0U;
  
#line 1582 
  u32 hi_dword = 0U;
  
#line 1586 
  i = 0;
  
#line 1586 
  goto ldv_55021;
  ldv_55020: 
#line 1587 
  ;
  
#line 1587 
  input->dword_stream[i] &= input_mask->dword_stream[i];
  
#line 1586 
  i += 1;
  ldv_55021: 
#line 1587 
  ;
  
#line 1586 
  if (i <= 10) 
#line 1588 
               goto ldv_55020; else 
#line 1591 
                                    goto ldv_55022;
  ldv_55022: 
#line 1592 
  ;
  
#line 1590 
  if (0 != 0) 
#line 1590 
              flow_vm_vlan = (((input->dword_stream[0] << 24) | ((input->dword_stream[0] << 8) & 16711680U)) | ((input->dword_stream[0] >> 8) & 65280U)) | (input->dword_stream[0] >> 24); else 
                                                                    
#line 1590 
                                                                    flow_vm_vlan = __fswab32(input->dword_stream[0]);
  
#line 1593 
  i = 1;
  
#line 1593 
  goto ldv_55024;
  ldv_55023: 
#line 1594 
  ;
  
#line 1594 
  hi_dword = input->dword_stream[i] ^ hi_dword;
  
#line 1593 
  i += 1;
  ldv_55024: 
#line 1594 
  ;
  
#line 1593 
  if (i <= 10) 
#line 1595 
               goto ldv_55023; else 
#line 1598 
                                    goto ldv_55025;
  ldv_55025: 
#line 1599 
  ;
  
#line 1595 
  if (0 != 0) 
#line 1595 
              hi_hash_dword = (((hi_dword << 24) | ((hi_dword << 8) & 16711680U)) | ((hi_dword >> 8) & 65280U)) | (hi_dword >> 24); else 
                                                                    
#line 1595 
                                                                    hi_hash_dword = __fswab32(hi_dword);
  
#line 1598 
  lo_hash_dword = (hi_hash_dword << 16) | (hi_hash_dword >> ((unsigned long)8 * sizeof(hi_hash_dword) - (unsigned long)16));
  
#line 1601 
  hi_hash_dword = ((flow_vm_vlan >> 16) ^ flow_vm_vlan) ^ hi_hash_dword;
  {
    
#line 1604 
    u32 n = 0U;
    
#line 1604 
    if (((1034753250 >> n) & 1) != 0) 
#line 1604 
                                      bucket_hash = (lo_hash_dword >> n) ^ bucket_hash; else ;
    
#line 1604 
    if (((1034753250 >> (n + 16U)) & 1) != 0) 
#line 1604 
                                              bucket_hash = (hi_hash_dword >> n) ^ bucket_hash; else ;
  }
  
#line 1611 
  lo_hash_dword = ((flow_vm_vlan << 16) ^ flow_vm_vlan) ^ lo_hash_dword;
  
#line 1614 
  i = 1;
  
#line 1614 
  goto ldv_55029;
  ldv_55028: 
#line 1615 
  ;
  {
    
#line 1615 
    u32 n_0 = (unsigned int)i;
    
#line 1615 
    if (((1034753250 >> n_0) & 1) != 0) 
#line 1615 
                                        bucket_hash = (lo_hash_dword >> n_0) ^ bucket_hash; else ;
    
#line 1615 
    if (((1034753250 >> (n_0 + 16U)) & 1) != 0) 
#line 1615 
                                                bucket_hash = (hi_hash_dword >> n_0) ^ bucket_hash; else ;
  }
  
#line 1614 
  i += 1;
  ldv_55029: 
#line 1615 
  ;
  
#line 1614 
  if (i <= 15) 
#line 1616 
               goto ldv_55028; else 
#line 1619 
                                    goto ldv_55030;
  ldv_55030: 
#line 1620 
  ;
  
#line 1621 
  input->formatted.bkt_hash = (unsigned short)((unsigned int)((unsigned short)bucket_hash) & 8191U);
  
#line 1622 
  return;
}


#line 1633  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82599.c"
static u32 ixgbe_get_fdirtcpm_82599(union ixgbe_atr_input *input_mask)
{
  u32 __retres;
  int tmp_0;
  int tmp_2;
  
#line 1635 
  if (0 != 0) 
#line 1635 
              tmp_0 = (int)((unsigned short)(((int)input_mask->formatted.dst_port << 8) | ((int)input_mask->formatted.dst_port >> 8)));
  else {
    __u16 tmp;
    
#line 1635 
    tmp = __fswab16((unsigned short)((int)input_mask->formatted.dst_port));
    
#line 1635 
    tmp_0 = (int)tmp;
  }
  
#line 1635 
  u32 mask = (unsigned int)tmp_0;
  
#line 1637 
  mask <<= 16;
  
#line 1638 
  if (0 != 0) 
#line 1638 
              tmp_2 = (int)((unsigned short)(((int)input_mask->formatted.src_port << 8) | ((int)input_mask->formatted.src_port >> 8)));
  else {
    __u16 tmp_1;
    
#line 1638 
    tmp_1 = __fswab16((unsigned short)((int)input_mask->formatted.src_port));
    
#line 1638 
    tmp_2 = (int)tmp_1;
  }
  
#line 1638 
  mask = (unsigned int)tmp_2 | mask;
  
#line 1639 
  mask = ((mask << 1) & 2863311530U) | ((mask >> 1) & 1431655765U);
  
#line 1640 
  mask = ((mask << 2) & 3435973836U) | ((mask >> 2) & 858993459U);
  
#line 1641 
  mask = ((mask << 4) & 4042322160U) | ((mask >> 4) & 252645135U);
  
#line 1642 
  __retres = ((mask << 8) & 4278255360U) | ((mask >> 8) & 16711935U);
  
#line 1642 
  return __retres;
}


#line 1662  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82599.c"
s32 ixgbe_fdir_set_input_mask_82599(struct ixgbe_hw *hw, union ixgbe_atr_input *input_mask)
{
  s32 __retres;
  u32 fdirtcpm;
  int tmp_0;
  unsigned int tmp_2;
  unsigned int tmp_4;
  unsigned int tmp_6;
  unsigned int tmp_8;
  unsigned int tmp_10;
  unsigned int tmp_12;
  unsigned int tmp_14;
  unsigned int tmp_16;
  
#line 1666 
  u32 fdirm = 32U;
  
#line 1680 
  if ((unsigned int)input_mask->formatted.bkt_hash != 0U) {
    
#line 1681 
    struct _ddebug descriptor = {.modname = "ixgbe", .function = "ixgbe_fdir_set_input_mask_82599", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82599.c", .format = " bucket hash should always be 0 in mask\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1681U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 1681 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 1681 
                                                        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev," bucket hash should always be 0 in mask\n"); else ;
  }
  else ;
  
#line 1684 
  switch ((int)input_mask->formatted.vm_pool & 127) {
    case 0: 
#line 1685 
    ;
    
#line 1686 
    fdirm |= 4U;
    case 127: 
#line 1687 
    ;
    
#line 1688 
    goto ldv_55045;
    default: 
#line 1689 
    ;
    {
      
#line 1690 
      struct _ddebug descriptor_0 = {.modname = "ixgbe", .function = "ixgbe_fdir_set_input_mask_82599", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82599.c", .format = " Error on vm pool mask\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1690U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1690 
      if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 1690 
                                                            __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev," Error on vm pool mask\n"); else ;
    }
    
#line 1691 
    __retres = -4;
    
#line 1691 
    goto return_label;
  }
  ldv_55045: 
#line 1694 
  ;
  
#line 1694 
  switch ((int)input_mask->formatted.flow_type & 3) {
    case 0: 
#line 1695 
    ;
    
#line 1696 
    fdirm |= 8U;
    
#line 1697 
    if ((unsigned int)input_mask->formatted.dst_port != 0U || (unsigned int)input_mask->formatted.src_port != 0U) {
      {
        
#line 1699 
        struct _ddebug descriptor_1 = {.modname = "ixgbe", .function = "ixgbe_fdir_set_input_mask_82599", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82599.c", .format = " Error on src/dst port mask\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1699U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
        
#line 1699 
        if ((long)(((int)descriptor_1.flags & 1) != 0) != 0L) 
#line 1699 
                                                              __dynamic_netdev_dbg(& descriptor_1,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev," Error on src/dst port mask\n"); else ;
      }
      
#line 1700 
      __retres = -4;
      
#line 1700 
      goto return_label;
    }
    else ;
    case 3: 
#line 1702 
    ;
    
#line 1703 
    goto ldv_55051;
    default: 
#line 1704 
    ;
    {
      
#line 1705 
      struct _ddebug descriptor_2 = {.modname = "ixgbe", .function = "ixgbe_fdir_set_input_mask_82599", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82599.c", .format = " Error on flow type mask\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1705U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1705 
      if ((long)(((int)descriptor_2.flags & 1) != 0) != 0L) 
#line 1705 
                                                            __dynamic_netdev_dbg(& descriptor_2,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev," Error on flow type mask\n"); else ;
    }
    
#line 1706 
    __retres = -4;
    
#line 1706 
    goto return_label;
  }
  ldv_55051: 
#line 1709 
  ;
  
#line 1709 
  if (0 != 0) 
#line 1709 
              tmp_0 = (int)((unsigned short)(((int)input_mask->formatted.vlan_id << 8) | ((int)input_mask->formatted.vlan_id >> 8))) & 61439;
  else {
    __u16 tmp;
    
#line 1709 
    tmp = __fswab16((unsigned short)((int)input_mask->formatted.vlan_id));
    
#line 1709 
    tmp_0 = (int)tmp & 61439;
  }
  
#line 1709 
  switch (tmp_0) {
    case 0: 
#line 1710 
    ;
    
#line 1712 
    fdirm |= 1U;
    case 4095: 
#line 1713 
    ;
    
#line 1715 
    fdirm |= 2U;
    
#line 1716 
    goto ldv_55056;
    case 57344: 
#line 1717 
    ;
    
#line 1719 
    fdirm |= 1U;
    case 61439: 
#line 1720 
    ;
    
#line 1722 
    goto ldv_55056;
    default: 
#line 1723 
    ;
    {
      
#line 1724 
      struct _ddebug descriptor_3 = {.modname = "ixgbe", .function = "ixgbe_fdir_set_input_mask_82599", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82599.c", .format = " Error on VLAN mask\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1724U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1724 
      if ((long)(((int)descriptor_3.flags & 1) != 0) != 0L) 
#line 1724 
                                                            __dynamic_netdev_dbg(& descriptor_3,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev," Error on VLAN mask\n"); else ;
    }
    
#line 1725 
    __retres = -4;
    
#line 1725 
    goto return_label;
  }
  ldv_55056: 
#line 1728 
  ;
  
#line 1728 
  switch ((int)input_mask->formatted.flex_bytes) {
    case 0: 
#line 1729 
    ;
    
#line 1731 
    fdirm |= 16U;
    case 65535: 
#line 1732 
    ;
    
#line 1733 
    goto ldv_55063;
    default: 
#line 1734 
    ;
    {
      
#line 1735 
      struct _ddebug descriptor_4 = {.modname = "ixgbe", .function = "ixgbe_fdir_set_input_mask_82599", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82599.c", .format = " Error on flexible byte mask\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1735U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1735 
      if ((long)(((int)descriptor_4.flags & 1) != 0) != 0L) 
#line 1735 
                                                            __dynamic_netdev_dbg(& descriptor_4,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev," Error on flexible byte mask\n"); else ;
    }
    
#line 1736 
    __retres = -4;
    
#line 1736 
    goto return_label;
  }
  ldv_55063: 
#line 1740 
  ;
  
#line 1740 
  ixgbe_write_reg(hw,61040U,fdirm);
  
#line 1743 
  fdirtcpm = ixgbe_get_fdirtcpm_82599(input_mask);
  
#line 1746 
  ixgbe_write_reg(hw,60996U,~ fdirtcpm);
  
#line 1747 
  ixgbe_write_reg(hw,61000U,~ fdirtcpm);
  
#line 1750 
  if (0 != 0) 
#line 1750 
              tmp_2 = ((((~ input_mask->formatted.src_ip[0] << 24) | ((~ input_mask->formatted.src_ip[0] << 8) & 16711680U)) | ((~ input_mask->formatted.src_ip[0] >> 8) & 65280U)) | (~ input_mask->formatted.src_ip[0] >> 24)) >> 24;
  else {
    __u32 tmp_1;
    
#line 1750 
    tmp_1 = __fswab32(~ input_mask->formatted.src_ip[0]);
    
#line 1750 
    tmp_2 = tmp_1 >> 24;
  }
  
#line 1750 
  if (0 != 0) 
#line 1750 
              tmp_4 = (((((~ input_mask->formatted.src_ip[0] << 24) | ((~ input_mask->formatted.src_ip[0] << 8) & 16711680U)) | ((~ input_mask->formatted.src_ip[0] >> 8) & 65280U)) | (~ input_mask->formatted.src_ip[0] >> 24)) >> 8) & 65280U;
  else {
    __u32 tmp_3;
    
#line 1750 
    tmp_3 = __fswab32(~ input_mask->formatted.src_ip[0]);
    
#line 1750 
    tmp_4 = (tmp_3 >> 8) & 65280U;
  }
  
#line 1750 
  if (0 != 0) 
#line 1750 
              tmp_6 = (((((~ input_mask->formatted.src_ip[0] << 24) | ((~ input_mask->formatted.src_ip[0] << 8) & 16711680U)) | ((~ input_mask->formatted.src_ip[0] >> 8) & 65280U)) | (~ input_mask->formatted.src_ip[0] >> 24)) << 8) & 16711680U;
  else {
    __u32 tmp_5;
    
#line 1750 
    tmp_5 = __fswab32(~ input_mask->formatted.src_ip[0]);
    
#line 1750 
    tmp_6 = (tmp_5 << 8) & 16711680U;
  }
  
#line 1750 
  if (0 != 0) 
#line 1750 
              tmp_8 = ((((~ input_mask->formatted.src_ip[0] << 24) | ((~ input_mask->formatted.src_ip[0] << 8) & 16711680U)) | ((~ input_mask->formatted.src_ip[0] >> 8) & 65280U)) | (~ input_mask->formatted.src_ip[0] >> 24)) << 24;
  else {
    __u32 tmp_7;
    
#line 1750 
    tmp_7 = __fswab32(~ input_mask->formatted.src_ip[0]);
    
#line 1750 
    tmp_8 = tmp_7 << 24;
  }
  
#line 1750 
  ;
  
#line 1750 
  ixgbe_write_reg(hw,60992U,((tmp_2 | tmp_4) | tmp_6) | tmp_8);
  
#line 1752 
  if (0 != 0) 
#line 1752 
              tmp_10 = ((((~ input_mask->formatted.dst_ip[0] << 24) | ((~ input_mask->formatted.dst_ip[0] << 8) & 16711680U)) | ((~ input_mask->formatted.dst_ip[0] >> 8) & 65280U)) | (~ input_mask->formatted.dst_ip[0] >> 24)) >> 24;
  else {
    __u32 tmp_9;
    
#line 1752 
    tmp_9 = __fswab32(~ input_mask->formatted.dst_ip[0]);
    
#line 1752 
    tmp_10 = tmp_9 >> 24;
  }
  
#line 1752 
  if (0 != 0) 
#line 1752 
              tmp_12 = (((((~ input_mask->formatted.dst_ip[0] << 24) | ((~ input_mask->formatted.dst_ip[0] << 8) & 16711680U)) | ((~ input_mask->formatted.dst_ip[0] >> 8) & 65280U)) | (~ input_mask->formatted.dst_ip[0] >> 24)) >> 8) & 65280U;
  else {
    __u32 tmp_11;
    
#line 1752 
    tmp_11 = __fswab32(~ input_mask->formatted.dst_ip[0]);
    
#line 1752 
    tmp_12 = (tmp_11 >> 8) & 65280U;
  }
  
#line 1752 
  if (0 != 0) 
#line 1752 
              tmp_14 = (((((~ input_mask->formatted.dst_ip[0] << 24) | ((~ input_mask->formatted.dst_ip[0] << 8) & 16711680U)) | ((~ input_mask->formatted.dst_ip[0] >> 8) & 65280U)) | (~ input_mask->formatted.dst_ip[0] >> 24)) << 8) & 16711680U;
  else {
    __u32 tmp_13;
    
#line 1752 
    tmp_13 = __fswab32(~ input_mask->formatted.dst_ip[0]);
    
#line 1752 
    tmp_14 = (tmp_13 << 8) & 16711680U;
  }
  
#line 1752 
  if (0 != 0) 
#line 1752 
              tmp_16 = ((((~ input_mask->formatted.dst_ip[0] << 24) | ((~ input_mask->formatted.dst_ip[0] << 8) & 16711680U)) | ((~ input_mask->formatted.dst_ip[0] >> 8) & 65280U)) | (~ input_mask->formatted.dst_ip[0] >> 24)) << 24;
  else {
    __u32 tmp_15;
    
#line 1752 
    tmp_15 = __fswab32(~ input_mask->formatted.dst_ip[0]);
    
#line 1752 
    tmp_16 = tmp_15 << 24;
  }
  
#line 1752 
  ;
  
#line 1752 
  ixgbe_write_reg(hw,60988U,((tmp_10 | tmp_12) | tmp_14) | tmp_16);
  
#line 1755 
  __retres = 0;
  return_label: 
#line 1755 
                return __retres;
}


#line 1758  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82599.c"
s32 ixgbe_fdir_write_perfect_filter_82599(struct ixgbe_hw *hw, union ixgbe_atr_input *input, u16 soft_id, u8 queue)
{
  s32 __retres;
  u32 fdirport;
  u32 fdirvlan;
  u32 fdirhash;
  u32 fdircmd;
  unsigned int tmp_0;
  unsigned int tmp_2;
  unsigned int tmp_4;
  unsigned int tmp_6;
  unsigned int tmp_8;
  unsigned int tmp_10;
  unsigned int tmp_12;
  unsigned int tmp_14;
  unsigned int tmp_16;
  unsigned int tmp_18;
  unsigned int tmp_20;
  unsigned int tmp_22;
  unsigned int tmp_24;
  unsigned int tmp_26;
  unsigned int tmp_28;
  unsigned int tmp_30;
  unsigned int tmp_32;
  unsigned int tmp_34;
  unsigned int tmp_36;
  unsigned int tmp_38;
  int tmp_40;
  int tmp_42;
  int tmp_44;
  int tmp_46;
  
#line 1765 
  if (0 != 0) 
#line 1765 
              tmp_0 = ((((input->formatted.src_ip[0] << 24) | ((input->formatted.src_ip[0] << 8) & 16711680U)) | ((input->formatted.src_ip[0] >> 8) & 65280U)) | (input->formatted.src_ip[0] >> 24)) >> 24;
  else {
    __u32 tmp;
    
#line 1765 
    tmp = __fswab32(input->formatted.src_ip[0]);
    
#line 1765 
    tmp_0 = tmp >> 24;
  }
  
#line 1765 
  if (0 != 0) 
#line 1765 
              tmp_2 = (((((input->formatted.src_ip[0] << 24) | ((input->formatted.src_ip[0] << 8) & 16711680U)) | ((input->formatted.src_ip[0] >> 8) & 65280U)) | (input->formatted.src_ip[0] >> 24)) >> 8) & 65280U;
  else {
    __u32 tmp_1;
    
#line 1765 
    tmp_1 = __fswab32(input->formatted.src_ip[0]);
    
#line 1765 
    tmp_2 = (tmp_1 >> 8) & 65280U;
  }
  
#line 1765 
  if (0 != 0) 
#line 1765 
              tmp_4 = (((((input->formatted.src_ip[0] << 24) | ((input->formatted.src_ip[0] << 8) & 16711680U)) | ((input->formatted.src_ip[0] >> 8) & 65280U)) | (input->formatted.src_ip[0] >> 24)) << 8) & 16711680U;
  else {
    __u32 tmp_3;
    
#line 1765 
    tmp_3 = __fswab32(input->formatted.src_ip[0]);
    
#line 1765 
    tmp_4 = (tmp_3 << 8) & 16711680U;
  }
  
#line 1765 
  if (0 != 0) 
#line 1765 
              tmp_6 = ((((input->formatted.src_ip[0] << 24) | ((input->formatted.src_ip[0] << 8) & 16711680U)) | ((input->formatted.src_ip[0] >> 8) & 65280U)) | (input->formatted.src_ip[0] >> 24)) << 24;
  else {
    __u32 tmp_5;
    
#line 1765 
    tmp_5 = __fswab32(input->formatted.src_ip[0]);
    
#line 1765 
    tmp_6 = tmp_5 << 24;
  }
  
#line 1765 
  ;
  
#line 1765 
  ixgbe_write_reg(hw,60940U,((tmp_0 | tmp_2) | tmp_4) | tmp_6);
  
#line 1767 
  if (0 != 0) 
#line 1767 
              tmp_8 = ((((input->formatted.src_ip[1] << 24) | ((input->formatted.src_ip[1] << 8) & 16711680U)) | ((input->formatted.src_ip[1] >> 8) & 65280U)) | (input->formatted.src_ip[1] >> 24)) >> 24;
  else {
    __u32 tmp_7;
    
#line 1767 
    tmp_7 = __fswab32(input->formatted.src_ip[1]);
    
#line 1767 
    tmp_8 = tmp_7 >> 24;
  }
  
#line 1767 
  if (0 != 0) 
#line 1767 
              tmp_10 = (((((input->formatted.src_ip[1] << 24) | ((input->formatted.src_ip[1] << 8) & 16711680U)) | ((input->formatted.src_ip[1] >> 8) & 65280U)) | (input->formatted.src_ip[1] >> 24)) >> 8) & 65280U;
  else {
    __u32 tmp_9;
    
#line 1767 
    tmp_9 = __fswab32(input->formatted.src_ip[1]);
    
#line 1767 
    tmp_10 = (tmp_9 >> 8) & 65280U;
  }
  
#line 1767 
  if (0 != 0) 
#line 1767 
              tmp_12 = (((((input->formatted.src_ip[1] << 24) | ((input->formatted.src_ip[1] << 8) & 16711680U)) | ((input->formatted.src_ip[1] >> 8) & 65280U)) | (input->formatted.src_ip[1] >> 24)) << 8) & 16711680U;
  else {
    __u32 tmp_11;
    
#line 1767 
    tmp_11 = __fswab32(input->formatted.src_ip[1]);
    
#line 1767 
    tmp_12 = (tmp_11 << 8) & 16711680U;
  }
  
#line 1767 
  if (0 != 0) 
#line 1767 
              tmp_14 = ((((input->formatted.src_ip[1] << 24) | ((input->formatted.src_ip[1] << 8) & 16711680U)) | ((input->formatted.src_ip[1] >> 8) & 65280U)) | (input->formatted.src_ip[1] >> 24)) << 24;
  else {
    __u32 tmp_13;
    
#line 1767 
    tmp_13 = __fswab32(input->formatted.src_ip[1]);
    
#line 1767 
    tmp_14 = tmp_13 << 24;
  }
  
#line 1767 
  ;
  
#line 1767 
  ixgbe_write_reg(hw,60944U,((tmp_8 | tmp_10) | tmp_12) | tmp_14);
  
#line 1769 
  if (0 != 0) 
#line 1769 
              tmp_16 = ((((input->formatted.src_ip[2] << 24) | ((input->formatted.src_ip[2] << 8) & 16711680U)) | ((input->formatted.src_ip[2] >> 8) & 65280U)) | (input->formatted.src_ip[2] >> 24)) >> 24;
  else {
    __u32 tmp_15;
    
#line 1769 
    tmp_15 = __fswab32(input->formatted.src_ip[2]);
    
#line 1769 
    tmp_16 = tmp_15 >> 24;
  }
  
#line 1769 
  if (0 != 0) 
#line 1769 
              tmp_18 = (((((input->formatted.src_ip[2] << 24) | ((input->formatted.src_ip[2] << 8) & 16711680U)) | ((input->formatted.src_ip[2] >> 8) & 65280U)) | (input->formatted.src_ip[2] >> 24)) >> 8) & 65280U;
  else {
    __u32 tmp_17;
    
#line 1769 
    tmp_17 = __fswab32(input->formatted.src_ip[2]);
    
#line 1769 
    tmp_18 = (tmp_17 >> 8) & 65280U;
  }
  
#line 1769 
  if (0 != 0) 
#line 1769 
              tmp_20 = (((((input->formatted.src_ip[2] << 24) | ((input->formatted.src_ip[2] << 8) & 16711680U)) | ((input->formatted.src_ip[2] >> 8) & 65280U)) | (input->formatted.src_ip[2] >> 24)) << 8) & 16711680U;
  else {
    __u32 tmp_19;
    
#line 1769 
    tmp_19 = __fswab32(input->formatted.src_ip[2]);
    
#line 1769 
    tmp_20 = (tmp_19 << 8) & 16711680U;
  }
  
#line 1769 
  if (0 != 0) 
#line 1769 
              tmp_22 = ((((input->formatted.src_ip[2] << 24) | ((input->formatted.src_ip[2] << 8) & 16711680U)) | ((input->formatted.src_ip[2] >> 8) & 65280U)) | (input->formatted.src_ip[2] >> 24)) << 24;
  else {
    __u32 tmp_21;
    
#line 1769 
    tmp_21 = __fswab32(input->formatted.src_ip[2]);
    
#line 1769 
    tmp_22 = tmp_21 << 24;
  }
  
#line 1769 
  ;
  
#line 1769 
  ixgbe_write_reg(hw,60948U,((tmp_16 | tmp_18) | tmp_20) | tmp_22);
  
#line 1773 
  if (0 != 0) 
#line 1773 
              tmp_24 = ((((input->formatted.src_ip[0] << 24) | ((input->formatted.src_ip[0] << 8) & 16711680U)) | ((input->formatted.src_ip[0] >> 8) & 65280U)) | (input->formatted.src_ip[0] >> 24)) >> 24;
  else {
    __u32 tmp_23;
    
#line 1773 
    tmp_23 = __fswab32(input->formatted.src_ip[0]);
    
#line 1773 
    tmp_24 = tmp_23 >> 24;
  }
  
#line 1773 
  if (0 != 0) 
#line 1773 
              tmp_26 = (((((input->formatted.src_ip[0] << 24) | ((input->formatted.src_ip[0] << 8) & 16711680U)) | ((input->formatted.src_ip[0] >> 8) & 65280U)) | (input->formatted.src_ip[0] >> 24)) >> 8) & 65280U;
  else {
    __u32 tmp_25;
    
#line 1773 
    tmp_25 = __fswab32(input->formatted.src_ip[0]);
    
#line 1773 
    tmp_26 = (tmp_25 >> 8) & 65280U;
  }
  
#line 1773 
  if (0 != 0) 
#line 1773 
              tmp_28 = (((((input->formatted.src_ip[0] << 24) | ((input->formatted.src_ip[0] << 8) & 16711680U)) | ((input->formatted.src_ip[0] >> 8) & 65280U)) | (input->formatted.src_ip[0] >> 24)) << 8) & 16711680U;
  else {
    __u32 tmp_27;
    
#line 1773 
    tmp_27 = __fswab32(input->formatted.src_ip[0]);
    
#line 1773 
    tmp_28 = (tmp_27 << 8) & 16711680U;
  }
  
#line 1773 
  if (0 != 0) 
#line 1773 
              tmp_30 = ((((input->formatted.src_ip[0] << 24) | ((input->formatted.src_ip[0] << 8) & 16711680U)) | ((input->formatted.src_ip[0] >> 8) & 65280U)) | (input->formatted.src_ip[0] >> 24)) << 24;
  else {
    __u32 tmp_29;
    
#line 1773 
    tmp_29 = __fswab32(input->formatted.src_ip[0]);
    
#line 1773 
    tmp_30 = tmp_29 << 24;
  }
  
#line 1773 
  ;
  
#line 1773 
  ixgbe_write_reg(hw,60952U,((tmp_24 | tmp_26) | tmp_28) | tmp_30);
  
#line 1776 
  if (0 != 0) 
#line 1776 
              tmp_32 = ((((input->formatted.dst_ip[0] << 24) | ((input->formatted.dst_ip[0] << 8) & 16711680U)) | ((input->formatted.dst_ip[0] >> 8) & 65280U)) | (input->formatted.dst_ip[0] >> 24)) >> 24;
  else {
    __u32 tmp_31;
    
#line 1776 
    tmp_31 = __fswab32(input->formatted.dst_ip[0]);
    
#line 1776 
    tmp_32 = tmp_31 >> 24;
  }
  
#line 1776 
  if (0 != 0) 
#line 1776 
              tmp_34 = (((((input->formatted.dst_ip[0] << 24) | ((input->formatted.dst_ip[0] << 8) & 16711680U)) | ((input->formatted.dst_ip[0] >> 8) & 65280U)) | (input->formatted.dst_ip[0] >> 24)) >> 8) & 65280U;
  else {
    __u32 tmp_33;
    
#line 1776 
    tmp_33 = __fswab32(input->formatted.dst_ip[0]);
    
#line 1776 
    tmp_34 = (tmp_33 >> 8) & 65280U;
  }
  
#line 1776 
  if (0 != 0) 
#line 1776 
              tmp_36 = (((((input->formatted.dst_ip[0] << 24) | ((input->formatted.dst_ip[0] << 8) & 16711680U)) | ((input->formatted.dst_ip[0] >> 8) & 65280U)) | (input->formatted.dst_ip[0] >> 24)) << 8) & 16711680U;
  else {
    __u32 tmp_35;
    
#line 1776 
    tmp_35 = __fswab32(input->formatted.dst_ip[0]);
    
#line 1776 
    tmp_36 = (tmp_35 << 8) & 16711680U;
  }
  
#line 1776 
  if (0 != 0) 
#line 1776 
              tmp_38 = ((((input->formatted.dst_ip[0] << 24) | ((input->formatted.dst_ip[0] << 8) & 16711680U)) | ((input->formatted.dst_ip[0] >> 8) & 65280U)) | (input->formatted.dst_ip[0] >> 24)) << 24;
  else {
    __u32 tmp_37;
    
#line 1776 
    tmp_37 = __fswab32(input->formatted.dst_ip[0]);
    
#line 1776 
    tmp_38 = tmp_37 << 24;
  }
  
#line 1776 
  ;
  
#line 1776 
  ixgbe_write_reg(hw,60956U,((tmp_32 | tmp_34) | tmp_36) | tmp_38);
  
#line 1779 
  if (0 != 0) 
#line 1779 
              tmp_40 = (int)((unsigned short)(((int)input->formatted.dst_port << 8) | ((int)input->formatted.dst_port >> 8)));
  else {
    __u16 tmp_39;
    
#line 1779 
    tmp_39 = __fswab16((unsigned short)((int)input->formatted.dst_port));
    
#line 1779 
    tmp_40 = (int)tmp_39;
  }
  
#line 1779 
  fdirport = (unsigned int)tmp_40;
  
#line 1780 
  fdirport <<= 16;
  
#line 1781 
  if (0 != 0) 
#line 1781 
              tmp_42 = (int)((unsigned short)(((int)input->formatted.src_port << 8) | ((int)input->formatted.src_port >> 8)));
  else {
    __u16 tmp_41;
    
#line 1781 
    tmp_41 = __fswab16((unsigned short)((int)input->formatted.src_port));
    
#line 1781 
    tmp_42 = (int)tmp_41;
  }
  
#line 1781 
  fdirport = (unsigned int)tmp_42 | fdirport;
  
#line 1782 
  ixgbe_write_reg(hw,60960U,fdirport);
  
#line 1785 
  if (0 != 0) 
#line 1785 
              tmp_44 = (int)((unsigned short)(((int)((unsigned short)(((int)input->formatted.flex_bytes >> 8) | ((int)input->formatted.flex_bytes << 8))) << 8) | ((int)((unsigned short)(((int)input->formatted.flex_bytes >> 8) | ((int)input->formatted.flex_bytes << 8))) >> 8)));
  else {
    __u16 tmp_43;
    
#line 1785 
    tmp_43 = __fswab16((unsigned short)((int)((unsigned short)(((int)input->formatted.flex_bytes >> 8) | ((int)input->formatted.flex_bytes << 8)))));
    
#line 1785 
    tmp_44 = (int)tmp_43;
  }
  
#line 1785 
  fdirvlan = (unsigned int)tmp_44;
  
#line 1786 
  fdirvlan <<= 16;
  
#line 1787 
  if (0 != 0) 
#line 1787 
              tmp_46 = (int)((unsigned short)(((int)input->formatted.vlan_id << 8) | ((int)input->formatted.vlan_id >> 8)));
  else {
    __u16 tmp_45;
    
#line 1787 
    tmp_45 = __fswab16((unsigned short)((int)input->formatted.vlan_id));
    
#line 1787 
    tmp_46 = (int)tmp_45;
  }
  
#line 1787 
  fdirvlan = (unsigned int)tmp_46 | fdirvlan;
  
#line 1788 
  ixgbe_write_reg(hw,60964U,fdirvlan);
  
#line 1791 
  fdirhash = (unsigned int)input->formatted.bkt_hash;
  
#line 1792 
  fdirhash = (unsigned int)((int)soft_id << 16) | fdirhash;
  
#line 1793 
  ixgbe_write_reg(hw,60968U,fdirhash);
  
#line 1799 
  ixgbe_read_reg(hw,8U);
  
#line 1802 
  fdircmd = 34825U;
  
#line 1804 
  if ((unsigned int)queue == 127U) 
#line 1805 
                                   fdircmd |= 512U; else ;
  
#line 1806 
  fdircmd = (unsigned int)((int)input->formatted.flow_type << 5) | fdircmd;
  
#line 1807 
  fdircmd = ((unsigned int)queue << 16) | fdircmd;
  
#line 1808 
  fdircmd = ((unsigned int)input->formatted.vm_pool << 24) | fdircmd;
  
#line 1810 
  ixgbe_write_reg(hw,60972U,fdircmd);
  
#line 1812 
  __retres = 0;
  
#line 1812 
  return __retres;
}


#line 1815  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82599.c"
s32 ixgbe_fdir_erase_perfect_filter_82599(struct ixgbe_hw *hw, union ixgbe_atr_input *input, u16 soft_id)
{
  u32 fdirhash;
  u32 retry_count;
  
#line 1820 
  u32 fdircmd = 0U;
  
#line 1822 
  s32 err = 0;
  
#line 1825 
  fdirhash = (unsigned int)input->formatted.bkt_hash;
  
#line 1826 
  fdirhash = (unsigned int)((int)soft_id << 16) | fdirhash;
  
#line 1827 
  ixgbe_write_reg(hw,60968U,fdirhash);
  
#line 1830 
  ixgbe_read_reg(hw,8U);
  
#line 1833 
  ixgbe_write_reg(hw,60972U,3U);
  
#line 1835 
  retry_count = 10U;
  
#line 1835 
  goto ldv_55087;
  ldv_55086: 
#line 1836 
  ;
  
#line 1837 
  __const_udelay(42950UL);
  
#line 1839 
  fdircmd = ixgbe_read_reg(hw,60972U);
  
#line 1840 
  if ((fdircmd & 3U) == 0U) 
#line 1841 
                            goto ldv_55085; else ;
  
#line 1835 
  retry_count -= 1U;
  ldv_55087: 
#line 1836 
  ;
  
#line 1835 
  if (retry_count != 0U) 
#line 1837 
                         goto ldv_55086; else 
#line 1840 
                                              goto ldv_55085;
  ldv_55085: 
#line 1841 
  ;
  
#line 1844 
  if (retry_count == 0U) 
#line 1845 
                         err = -23; else ;
  
#line 1848 
  if ((fdircmd & 4U) != 0U) {
    
#line 1849 
    ixgbe_write_reg(hw,60968U,fdirhash);
    
#line 1850 
    ixgbe_read_reg(hw,8U);
    
#line 1851 
    ixgbe_write_reg(hw,60972U,2U);
  }
  else ;
  
#line 1855 
  return err;
}


#line 1866  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82599.c"
static s32 ixgbe_read_analog_reg8_82599(struct ixgbe_hw *hw, u32 reg, u8 *val)
{
  s32 __retres;
  u32 core_ctl;
  
#line 1870 
  ixgbe_write_reg(hw,85760U,(reg << 8) | 65536U);
  
#line 1872 
  ixgbe_read_reg(hw,8U);
  
#line 1873 
  __const_udelay(42950UL);
  
#line 1874 
  core_ctl = ixgbe_read_reg(hw,85760U);
  
#line 1875 
  *val = (unsigned char)core_ctl;
  
#line 1877 
  __retres = 0;
  
#line 1877 
  return __retres;
}


#line 1888  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82599.c"
static s32 ixgbe_write_analog_reg8_82599(struct ixgbe_hw *hw, u32 reg, u8 val)
{
  s32 __retres;
  u32 core_ctl;
  
#line 1892 
  core_ctl = (reg << 8) | (unsigned int)val;
  
#line 1893 
  ixgbe_write_reg(hw,85760U,core_ctl);
  
#line 1894 
  ixgbe_read_reg(hw,8U);
  
#line 1895 
  __const_udelay(42950UL);
  
#line 1897 
  __retres = 0;
  
#line 1897 
  return __retres;
}


#line 1908  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82599.c"
static s32 ixgbe_start_hw_82599(struct ixgbe_hw *hw)
{
  s32 __retres;
  s32 tmp;
  
#line 1910 
  s32 ret_val = 0;
  
#line 1912 
  ret_val = ixgbe_start_hw_generic(hw);
  
#line 1913 
  if (ret_val != 0) {
    
#line 1914 
    __retres = ret_val;
    
#line 1914 
    goto return_label;
  }
  else ;
  
#line 1916 
  ret_val = ixgbe_start_hw_gen2(hw);
  
#line 1917 
  if (ret_val != 0) {
    
#line 1918 
    __retres = ret_val;
    
#line 1918 
    goto return_label;
  }
  else ;
  
#line 1921 
  hw->mac.autotry_restart = (_Bool)1;
  
#line 1923 
  if (ret_val != 0) {
    
#line 1924 
    __retres = ret_val;
    
#line 1924 
    goto return_label;
  }
  else ;
  
#line 1926 
  tmp = ixgbe_verify_fw_version_82599(hw);
  
#line 1926 
  __retres = tmp;
  return_label: 
#line 1926 
                return __retres;
}


#line 1937  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82599.c"
static s32 ixgbe_identify_phy_82599(struct ixgbe_hw *hw)
{
  s32 __retres;
  s32 status;
  
#line 1942 
  status = ixgbe_identify_phy_generic(hw);
  
#line 1943 
  if (status != 0) {
    enum ixgbe_media_type tmp;
    
#line 1945 
    tmp = (*(hw->mac.ops.get_media_type))(hw);
    
#line 1945 
    if (tmp == (unsigned int)ixgbe_media_type_copper) {
      
#line 1946 
      __retres = status;
      
#line 1946 
      goto return_label;
    }
    else ;
    
#line 1947 
    status = ixgbe_identify_module_generic(hw);
  }
  else ;
  
#line 1951 
  if (hw->phy.type == (unsigned int)ixgbe_phy_unknown) {
    
#line 1952 
    hw->phy.type = ixgbe_phy_none;
    
#line 1953 
    status = 0;
  }
  else ;
  
#line 1957 
  if (hw->phy.type == (unsigned int)ixgbe_phy_sfp_unsupported) {
    
#line 1958 
    __retres = -19;
    
#line 1958 
    goto return_label;
  }
  else ;
  
#line 1960 
  __retres = status;
  return_label: 
#line 1960 
                return __retres;
}


#line 1970  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82599.c"
static s32 ixgbe_enable_rx_dma_82599(struct ixgbe_hw *hw, u32 regval)
{
  s32 __retres;
  
#line 1978 
  (*(hw->mac.ops.disable_rx_buff))(hw);
  
#line 1980 
  if ((regval & 1U) != 0U) 
#line 1981 
                           (*(hw->mac.ops.enable_rx))(hw); else 
#line 1983 
                                                                (*(hw->mac.ops.disable_rx))(hw);
  
#line 1985 
  (*(hw->mac.ops.enable_rx_buff))(hw);
  
#line 1987 
  __retres = 0;
  
#line 1987 
  return __retres;
}


#line 2000  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82599.c"
static s32 ixgbe_verify_fw_version_82599(struct ixgbe_hw *hw)
{
  s32 __retres;
  u16 fw_offset;
  u16 fw_ptp_cfg_offset;
  u16 offset;
  s32 tmp;
  s32 tmp_0;
  s32 tmp_1;
  
#line 2002 
  s32 status = -24;
  
#line 2005 
  u16 fw_version = (unsigned short)0U;
  
#line 2008 
  if (hw->phy.media_type != (unsigned int)ixgbe_media_type_fiber) {
    
#line 2009 
    __retres = 0;
    
#line 2009 
    goto return_label;
  }
  else ;
  
#line 2012 
  offset = (unsigned short)15U;
  
#line 2013 
  tmp = (*(hw->eeprom.ops.read))(hw,(unsigned short)((int)offset),& fw_offset);
  
#line 2013 
  if (tmp != 0) 
#line 2014 
                goto fw_version_err; else ;
  
#line 2016 
  if ((unsigned int)fw_offset + 65535U > 65533U) {
    
#line 2017 
    __retres = -24;
    
#line 2017 
    goto return_label;
  }
  else ;
  
#line 2020 
  offset = (unsigned short)((unsigned int)fw_offset + 4U);
  
#line 2021 
  tmp_0 = (*(hw->eeprom.ops.read))(hw,(unsigned short)((int)offset),& fw_ptp_cfg_offset);
  
#line 2021 
  if (tmp_0 != 0) 
#line 2022 
                  goto fw_version_err; else ;
  
#line 2024 
  if ((unsigned int)fw_ptp_cfg_offset + 65535U > 65533U) {
    
#line 2025 
    __retres = -24;
    
#line 2025 
    goto return_label;
  }
  else ;
  
#line 2028 
  offset = (unsigned short)((unsigned int)fw_ptp_cfg_offset + 7U);
  
#line 2029 
  tmp_1 = (*(hw->eeprom.ops.read))(hw,(unsigned short)((int)offset),& fw_version);
  
#line 2029 
  if (tmp_1 != 0) 
#line 2030 
                  goto fw_version_err; else ;
  
#line 2032 
  if ((unsigned int)fw_version > 5U) 
#line 2033 
                                     status = 0; else ;
  
#line 2035 
  __retres = status;
  
#line 2035 
  goto return_label;
  fw_version_err: 
#line 2037 
  ;
  
#line 2038 
  netdev_err((struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"eeprom read at offset %d failed\n",(int)offset);
  
#line 2039 
  __retres = -24;
  return_label: 
#line 2039 
                return __retres;
}


#line 2049  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82599.c"
static bool ixgbe_verify_lesm_fw_enabled_82599(struct ixgbe_hw *hw)
{
  bool __retres;
  u16 fw_offset;
  u16 fw_lesm_param_offset;
  u16 fw_lesm_state;
  s32 status;
  
#line 2055 
  status = (*(hw->eeprom.ops.read))(hw,(unsigned short)15,& fw_offset);
  
#line 2057 
  if ((status != 0 || (unsigned int)fw_offset == 0U) || (unsigned int)fw_offset == 65535U) {
    
#line 2058 
    __retres = (_Bool)0;
    
#line 2058 
    goto return_label;
  }
  else ;
  
#line 2061 
  status = (*(hw->eeprom.ops.read))(hw,(unsigned short)((int)((unsigned int)fw_offset + 2U)),& fw_lesm_param_offset);
  
#line 2065 
  if ((status != 0 || (unsigned int)fw_lesm_param_offset == 0U) || (unsigned int)fw_lesm_param_offset == 65535U) {
    
#line 2067 
    __retres = (_Bool)0;
    
#line 2067 
    goto return_label;
  }
  else ;
  
#line 2070 
  status = (*(hw->eeprom.ops.read))(hw,(unsigned short)((int)((unsigned int)fw_lesm_param_offset + 1U)),& fw_lesm_state);
  
#line 2074 
  if (status == 0 && (int)fw_lesm_state < 0) {
    
#line 2075 
    __retres = (_Bool)1;
    
#line 2075 
    goto return_label;
  }
  else ;
  
#line 2077 
  __retres = (_Bool)0;
  return_label: 
#line 2077 
                return __retres;
}


#line 2091  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82599.c"
static s32 ixgbe_read_eeprom_buffer_82599(struct ixgbe_hw *hw, u16 offset, u16 words, u16 *data)
{
  s32 __retres;
  s32 tmp_0;
  
#line 2094 
  struct ixgbe_eeprom_info *eeprom = & hw->eeprom;
  
#line 2099 
  if (eeprom->type == (unsigned int)ixgbe_eeprom_spi && (int)offset + ((int)words + -1) <= 16383) {
    s32 tmp;
    
#line 2101 
    tmp = ixgbe_read_eerd_buffer_generic(hw,(unsigned short)((int)offset),(unsigned short)((int)words),data);
    
#line 2101 
    __retres = tmp;
    
#line 2101 
    goto return_label;
  }
  else ;
  
#line 2103 
  tmp_0 = ixgbe_read_eeprom_buffer_bit_bang_generic(hw,(unsigned short)((int)offset),(unsigned short)((int)words),data);
  
#line 2103 
  __retres = tmp_0;
  return_label: 
#line 2103 
                return __retres;
}


#line 2117  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82599.c"
static s32 ixgbe_read_eeprom_82599(struct ixgbe_hw *hw, u16 offset, u16 *data)
{
  s32 __retres;
  s32 tmp_0;
  
#line 2120 
  struct ixgbe_eeprom_info *eeprom = & hw->eeprom;
  
#line 2126 
  if (eeprom->type == (unsigned int)ixgbe_eeprom_spi && (unsigned int)offset <= 16383U) {
    s32 tmp;
    
#line 2127 
    tmp = ixgbe_read_eerd_generic(hw,(unsigned short)((int)offset),data);
    
#line 2127 
    __retres = tmp;
    
#line 2127 
    goto return_label;
  }
  else ;
  
#line 2129 
  tmp_0 = ixgbe_read_eeprom_bit_bang_generic(hw,(unsigned short)((int)offset),data);
  
#line 2129 
  __retres = tmp_0;
  return_label: 
#line 2129 
                return __retres;
}


#line 2141  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82599.c"
static s32 ixgbe_reset_pipeline_82599(struct ixgbe_hw *hw)
{
  s32 ret_val;
  u32 i;
  u32 autoc_reg;
  u32 autoc2_reg;
  
#line 2144 
  u32 anlp1_reg = 0U;
  
#line 2148 
  autoc2_reg = ixgbe_read_reg(hw,17064U);
  
#line 2149 
  if ((autoc2_reg & 1879048192U) != 0U) {
    
#line 2150 
    autoc2_reg &= 2415919103U;
    
#line 2151 
    ixgbe_write_reg(hw,17064U,autoc2_reg);
    
#line 2152 
    ixgbe_read_reg(hw,8U);
  }
  else ;
  
#line 2155 
  autoc_reg = ixgbe_read_reg(hw,17056U);
  
#line 2156 
  autoc_reg |= 4096U;
  
#line 2159 
  ixgbe_write_reg(hw,17056U,autoc_reg ^ 32768U);
  
#line 2163 
  i = 0U;
  
#line 2163 
  goto ldv_55151;
  ldv_55150: 
#line 2164 
  ;
  
#line 2164 
  usleep_range(4000UL,8000UL);
  
#line 2165 
  anlp1_reg = ixgbe_read_reg(hw,17072U);
  
#line 2166 
  if ((anlp1_reg & 983040U) != 0U) 
#line 2167 
                                   goto ldv_55149; else ;
  
#line 2163 
  i += 1U;
  ldv_55151: 
#line 2164 
  ;
  
#line 2163 
  if (i <= 9U) 
#line 2165 
               goto ldv_55150; else 
#line 2168 
                                    goto ldv_55149;
  ldv_55149: 
#line 2169 
  ;
  
#line 2170 
  if ((anlp1_reg & 983040U) == 0U) {
    {
      
#line 2171 
      struct _ddebug descriptor = {.modname = "ixgbe", .function = "ixgbe_reset_pipeline_82599", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82599.c", .format = "auto negotiation not completed\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))2171U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 2171 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 2171 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"auto negotiation not completed\n"); else ;
    }
    
#line 2172 
    ret_val = -15;
    
#line 2173 
    goto reset_pipeline_out;
  }
  else ;
  
#line 2176 
  ret_val = 0;
  reset_pipeline_out: 
#line 2178 
  ;
  
#line 2180 
  ixgbe_write_reg(hw,17056U,autoc_reg);
  
#line 2181 
  ixgbe_read_reg(hw,8U);
  
#line 2183 
  return ret_val;
}


#line 2195  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82599.c"
static s32 ixgbe_read_i2c_byte_82599(struct ixgbe_hw *hw, u8 byte_offset, u8 dev_addr, u8 *data)
{
  u32 esdp;
  s32 status;
  
#line 2200 
  s32 timeout = 200;
  
#line 2202 
  if ((int)hw->phy.qsfp_shared_i2c_bus == 1) {
    
#line 2204 
    esdp = ixgbe_read_reg(hw,32U);
    
#line 2205 
    esdp |= 1U;
    
#line 2206 
    ixgbe_write_reg(hw,32U,esdp);
    
#line 2207 
    ixgbe_read_reg(hw,8U);
    
#line 2209 
    goto ldv_55166;
    ldv_55165: 
#line 2210 
    ;
    
#line 2210 
    esdp = ixgbe_read_reg(hw,32U);
    
#line 2211 
    if ((esdp & 2U) != 0U) 
#line 2212 
                           goto ldv_55164; else ;
    
#line 2214 
    usleep_range(5000UL,10000UL);
    
#line 2215 
    timeout -= 1;
    ldv_55166: 
#line 2216 
    ;
    
#line 2209 
    if (timeout != 0) 
#line 2211 
                      goto ldv_55165; else 
#line 2214 
                                           goto ldv_55164;
    ldv_55164: 
#line 2215 
    ;
    
#line 2218 
    if (timeout == 0) {
      {
        
#line 2219 
        struct _ddebug descriptor = {.modname = "ixgbe", .function = "ixgbe_read_i2c_byte_82599", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82599.c", .format = "Driver can\'t access resource, acquiring I2C bus timeout.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))2219U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
        
#line 2219 
        if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 2219 
                                                            __dynamic_netdev_dbg(& descriptor,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"Driver can\'t access resource, acquiring I2C bus timeout.\n"); else ;
      }
      
#line 2220 
      status = -18;
      
#line 2221 
      goto release_i2c_access;
    }
    else ;
  }
  else ;
  
#line 2225 
  status = ixgbe_read_i2c_byte_generic(hw,(unsigned char)((int)byte_offset),(unsigned char)((int)dev_addr),data);
  release_i2c_access: 
#line 2227 
  ;
  
#line 2228 
  if ((int)hw->phy.qsfp_shared_i2c_bus == 1) {
    
#line 2230 
    esdp = ixgbe_read_reg(hw,32U);
    
#line 2231 
    esdp &= 4294967294U;
    
#line 2232 
    ixgbe_write_reg(hw,32U,esdp);
    
#line 2233 
    ixgbe_read_reg(hw,8U);
  }
  else ;
  
#line 2236 
  return status;
}


#line 2248  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82599.c"
static s32 ixgbe_write_i2c_byte_82599(struct ixgbe_hw *hw, u8 byte_offset, u8 dev_addr, u8 data)
{
  u32 esdp;
  s32 status;
  
#line 2253 
  s32 timeout = 200;
  
#line 2255 
  if ((int)hw->phy.qsfp_shared_i2c_bus == 1) {
    
#line 2257 
    esdp = ixgbe_read_reg(hw,32U);
    
#line 2258 
    esdp |= 1U;
    
#line 2259 
    ixgbe_write_reg(hw,32U,esdp);
    
#line 2260 
    ixgbe_read_reg(hw,8U);
    
#line 2262 
    goto ldv_55181;
    ldv_55180: 
#line 2263 
    ;
    
#line 2263 
    esdp = ixgbe_read_reg(hw,32U);
    
#line 2264 
    if ((esdp & 2U) != 0U) 
#line 2265 
                           goto ldv_55179; else ;
    
#line 2267 
    usleep_range(5000UL,10000UL);
    
#line 2268 
    timeout -= 1;
    ldv_55181: 
#line 2269 
    ;
    
#line 2262 
    if (timeout != 0) 
#line 2264 
                      goto ldv_55180; else 
#line 2267 
                                           goto ldv_55179;
    ldv_55179: 
#line 2268 
    ;
    
#line 2271 
    if (timeout == 0) {
      {
        
#line 2272 
        struct _ddebug descriptor = {.modname = "ixgbe", .function = "ixgbe_write_i2c_byte_82599", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82599.c", .format = "Driver can\'t access resource, acquiring I2C bus timeout.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))2272U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
        
#line 2272 
        if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 2272 
                                                            __dynamic_netdev_dbg(& descriptor,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"Driver can\'t access resource, acquiring I2C bus timeout.\n"); else ;
      }
      
#line 2273 
      status = -18;
      
#line 2274 
      goto release_i2c_access;
    }
    else ;
  }
  else ;
  
#line 2278 
  status = ixgbe_write_i2c_byte_generic(hw,(unsigned char)((int)byte_offset),(unsigned char)((int)dev_addr),(unsigned char)((int)data));
  release_i2c_access: 
#line 2280 
  ;
  
#line 2281 
  if ((int)hw->phy.qsfp_shared_i2c_bus == 1) {
    
#line 2283 
    esdp = ixgbe_read_reg(hw,32U);
    
#line 2284 
    esdp &= 4294967294U;
    
#line 2285 
    ixgbe_write_reg(hw,32U,esdp);
    
#line 2286 
    ixgbe_read_reg(hw,8U);
  }
  else ;
  
#line 2289 
  return status;
}


#line 2292  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82599.c"
static struct ixgbe_mac_operations mac_ops_82599 = {.init_hw = & ixgbe_init_hw_generic, .reset_hw = & ixgbe_reset_hw_82599, .start_hw = & ixgbe_start_hw_82599, .clear_hw_cntrs = & ixgbe_clear_hw_cntrs_generic, .get_media_type = & ixgbe_get_media_type_82599, .get_mac_addr = & ixgbe_get_mac_addr_generic, .get_san_mac_addr = & ixgbe_get_san_mac_addr_generic, .get_device_caps = & ixgbe_get_device_caps_generic, .get_wwn_prefix = & ixgbe_get_wwn_prefix_generic, .stop_adapter = & ixgbe_stop_adapter_generic, .get_bus_info = & ixgbe_get_bus_info_generic, .set_lan_id = & ixgbe_set_lan_id_multi_port_pcie, .read_analog_reg8 = & ixgbe_read_analog_reg8_82599, .write_analog_reg8 = & ixgbe_write_analog_reg8_82599, .setup_sfp = & ixgbe_setup_sfp_modules_82599, .disable_rx_buff = & ixgbe_disable_rx_buff_generic, .enable_rx_buff = & ixgbe_enable_rx_buff_generic, .enable_rx_dma = & ixgbe_enable_rx_dma_82599, .acquire_swfw_sync = & ixgbe_acquire_swfw_sync, .release_swfw_sync = & ixgbe_release_swfw_sync, .prot_autoc_read = & prot_autoc_read_82599, .prot_autoc_write = & prot_autoc_write_82599, .disable_tx_laser = (void (*)(struct ixgbe_hw *))0, .enable_tx_laser = (void (*)(struct ixgbe_hw *))0, .flap_tx_laser = (void (*)(struct ixgbe_hw *))0, .stop_link_on_d3 = & ixgbe_stop_mac_link_on_d3_82599, .setup_link = & ixgbe_setup_mac_link_82599, .check_link = & ixgbe_check_mac_link_generic, .get_link_capabilities = & ixgbe_get_link_capabilities_82599, .set_rxpba = & ixgbe_set_rxpba_generic, .led_on = & ixgbe_led_on_generic, .led_off = & ixgbe_led_off_generic, .blink_led_start = & ixgbe_blink_led_start_generic, .blink_led_stop = & ixgbe_blink_led_stop_generic, .set_rar = & ixgbe_set_rar_generic, .clear_rar = & ixgbe_clear_rar_generic, .set_vmdq = & ixgbe_set_vmdq_generic, .set_vmdq_san_mac = & ixgbe_set_vmdq_san_mac_generic, .clear_vmdq = & ixgbe_clear_vmdq_generic, .init_rx_addrs = & ixgbe_init_rx_addrs_generic, .update_mc_addr_list = & ixgbe_update_mc_addr_list_generic, .enable_mc = & ixgbe_enable_mc_generic, .disable_mc = & ixgbe_disable_mc_generic, .clear_vfta = & ixgbe_clear_vfta_generic, .set_vfta = & ixgbe_set_vfta_generic, .init_uta_tables = & ixgbe_init_uta_tables_generic, .set_mac_anti_spoofing = & ixgbe_set_mac_anti_spoofing, .set_vlan_anti_spoofing = & ixgbe_set_vlan_anti_spoofing, .fc_enable = & ixgbe_fc_enable_generic, .set_fw_drv_ver = & ixgbe_set_fw_drv_ver_generic, .get_thermal_sensor_data = & ixgbe_get_thermal_sensor_data_generic, .init_thermal_sensor_thresh = & ixgbe_init_thermal_sensor_thresh_generic, .disable_rx = & ixgbe_disable_rx_generic, .enable_rx = & ixgbe_enable_rx_generic, .set_source_address_pruning = (void (*)(struct ixgbe_hw *, bool , unsigned int ))0, .set_ethertype_anti_spoofing = (void (*)(struct ixgbe_hw *, bool , int ))0, .dmac_config = (s32 (*)(struct ixgbe_hw *))0, .dmac_update_tcs = (s32 (*)(struct ixgbe_hw *))0, .dmac_config_tcs = (s32 (*)(struct ixgbe_hw *))0};

#line 2346  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82599.c"
static struct ixgbe_eeprom_operations eeprom_ops_82599 = {.init_params = & ixgbe_init_eeprom_params_generic, .read = & ixgbe_read_eeprom_82599, .read_buffer = & ixgbe_read_eeprom_buffer_82599, .write = & ixgbe_write_eeprom_generic, .write_buffer = & ixgbe_write_eeprom_buffer_bit_bang_generic, .validate_checksum = & ixgbe_validate_eeprom_checksum_generic, .update_checksum = & ixgbe_update_eeprom_checksum_generic, .calc_checksum = & ixgbe_calc_eeprom_checksum_generic};

#line 2357  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82599.c"
static struct ixgbe_phy_operations phy_ops_82599 = {.identify = & ixgbe_identify_phy_82599, .identify_sfp = & ixgbe_identify_module_generic, .init = & ixgbe_init_phy_ops_82599, .reset = & ixgbe_reset_phy_generic, .read_reg = & ixgbe_read_phy_reg_generic, .write_reg = & ixgbe_write_phy_reg_generic, .read_reg_mdi = (s32 (*)(struct ixgbe_hw *, u32 , u32 , u16 *))0, .write_reg_mdi = (s32 (*)(struct ixgbe_hw *, u32 , u32 , u16 ))0, .setup_link = & ixgbe_setup_phy_link_generic, .setup_internal_link = (s32 (*)(struct ixgbe_hw *))0, .setup_link_speed = & ixgbe_setup_phy_link_speed_generic, .check_link = (s32 (*)(struct ixgbe_hw *, ixgbe_link_speed *, bool *))0, .get_firmware_version = (s32 (*)(struct ixgbe_hw *, u16 *))0, .read_i2c_byte = & ixgbe_read_i2c_byte_generic, .write_i2c_byte = & ixgbe_write_i2c_byte_generic, .read_i2c_sff8472 = & ixgbe_read_i2c_sff8472_generic, .read_i2c_eeprom = & ixgbe_read_i2c_eeprom_generic, .write_i2c_eeprom = & ixgbe_write_i2c_eeprom_generic, .read_i2c_combined = (s32 (*)(struct ixgbe_hw *, u8 , u16 , u16 *))0, .write_i2c_combined = (s32 (*)(struct ixgbe_hw *, u8 , u16 , u16 ))0, .check_overtemp = & ixgbe_tn_check_overtemp, .set_phy_power = (s32 (*)(struct ixgbe_hw *, bool ))0, .handle_lasi = (s32 (*)(struct ixgbe_hw *))0};

#line 2374  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_82599.c"
struct ixgbe_info ixgbe_82599_info = {.mac = ixgbe_mac_82599EB, .get_invariants = & ixgbe_get_invariants_82599, .mac_ops = & mac_ops_82599, .eeprom_ops = & eeprom_ops_82599, .phy_ops = & phy_ops_82599, .mbx_ops = & mbx_ops_generic, .mvals = (u32 const *)(& ixgbe_mvals_8259X)};

#line 48  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list.h"
void __list_add(struct list_head *, struct list_head *, struct list_head *);


#line 61  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list.h"
__inline static void list_add(struct list_head *new, struct list_head *head)
{
  
#line 63 
  __list_add(new,head,head->next);
  
#line 64 
  return;
}


#line 542  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/slab.h"
static void *kcalloc_1(size_t n, size_t size, gfp_t flags);


#line 1672  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
int pci_enable_sriov(struct pci_dev *, int);


#line 1673 
void pci_disable_sriov(struct pci_dev *);


#line 1674 
int pci_num_vf(struct pci_dev *);


#line 1675 
int pci_vfs_assigned(struct pci_dev *);


#line 61  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_sriov.h"
__inline static void ixgbe_set_vmvir(struct ixgbe_adapter *adapter, u16 vid, u16 qos, u32 vf)
{
  
#line 64 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 65 
  u32 vmvir = (unsigned int)(((int)vid | ((int)qos << 13)) | 1073741824);
  
#line 67 
  ixgbe_write_reg(hw,(vf + 8192U) * 4U,vmvir);
  
#line 68 
  return;
}


#line 49  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_sriov.c"
static int __ixgbe_enable_sriov(struct ixgbe_adapter *adapter)
{
  int __retres;
  int num_vf_macvlans;
  int i;
  struct vf_macvlans *mv_list;
  
#line 51 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 55 
  adapter->flags |= 8388608U;
  
#line 56 
  if (((int)adapter->msg_enable & 2) != 0) 
#line 56 
                                           netdev_info((struct net_device const *)adapter->netdev,"SR-IOV enabled with %d VFs\n",adapter->num_vfs); else ;
  
#line 59 
  adapter->flags |= 16384U;
  
#line 60 
  if ((unsigned int)adapter->ring_feature[1].limit == 0U) 
#line 61 
                                                          adapter->ring_feature[1].limit = (unsigned short)1U; else ;
  
#line 62 
  adapter->ring_feature[1].offset = (unsigned short)adapter->num_vfs;
  
#line 64 
  num_vf_macvlans = (int)((hw->mac.num_rar_entries - adapter->num_vfs) + 4294967280U);
  
#line 67 
  mv_list = (struct vf_macvlans *)kcalloc_1((unsigned long)num_vf_macvlans,32UL,208U);
  
#line 67 
  adapter->mv_list = mv_list;
  
#line 70 
  if (mv_list != (struct vf_macvlans *)0) {
    
#line 72 
    INIT_LIST_HEAD(& adapter->vf_mvs.l);
    
#line 73 
    i = 0;
    
#line 73 
    goto ldv_55795;
    ldv_55794: 
#line 74 
    ;
    
#line 74 
    mv_list->vf = -1;
    
#line 75 
    mv_list->free = (_Bool)1;
    
#line 76 
    list_add(& mv_list->l,& adapter->vf_mvs.l);
    
#line 77 
    mv_list += 1;
    
#line 73 
    i += 1;
    ldv_55795: 
#line 74 
    ;
    
#line 73 
    if (i < num_vf_macvlans) 
#line 75 
                             goto ldv_55794; else 
#line 78 
                                                  goto ldv_55796;
    ldv_55796: 
#line 79 
    ;
  }
  else ;
  
#line 82 
  ixgbe_write_reg(hw,33312U,1U);
  
#line 83 
  adapter->bridge_mode = (unsigned short)0U;
  
#line 89 
  adapter->vfinfo = (struct vf_data_storage *)kcalloc_1((unsigned long)adapter->num_vfs,88UL,208U);
  
#line 91 
  if (adapter->vfinfo != (struct vf_data_storage *)0) {
    
#line 93 
    if (adapter->hw.mac.type == (unsigned int)ixgbe_mac_82599EB && adapter->num_vfs <= 15U) {
      
#line 95 
      adapter->dcb_cfg.num_tcs.pg_tcs = (unsigned char)8U;
      
#line 96 
      adapter->dcb_cfg.num_tcs.pfc_tcs = (unsigned char)8U;
    }
    else 
      
#line 97 
      if (adapter->num_vfs <= 31U) {
        
#line 98 
        adapter->dcb_cfg.num_tcs.pg_tcs = (unsigned char)4U;
        
#line 99 
        adapter->dcb_cfg.num_tcs.pfc_tcs = (unsigned char)4U;
      }
      else {
        
#line 101 
        adapter->dcb_cfg.num_tcs.pg_tcs = (unsigned char)1U;
        
#line 102 
        adapter->dcb_cfg.num_tcs.pfc_tcs = (unsigned char)1U;
      }
    
#line 106 
    adapter->flags2 &= 4294967292U;
    
#line 109 
    i = 0;
    
#line 109 
    goto ldv_55798;
    ldv_55797: 
#line 110 
    ;
    
#line 111 
    (adapter->vfinfo + i)->spoofchk_enabled = (unsigned char)1U;
    
#line 118 
    (adapter->vfinfo + i)->rss_query_enabled = (_Bool)0;
    
#line 109 
    i += 1;
    ldv_55798: 
#line 110 
    ;
    
#line 109 
    if (adapter->num_vfs > (unsigned int)i) 
#line 111 
                                            goto ldv_55797; else 
#line 114 
                                                                 goto ldv_55799;
    ldv_55799: 
#line 115 
    ;
    
#line 121 
    __retres = 0;
    
#line 121 
    goto return_label;
  }
  else ;
  
#line 124 
  __retres = -12;
  return_label: 
#line 124 
                return __retres;
}


#line 130  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_sriov.c"
void ixgbe_enable_sriov(struct ixgbe_adapter *adapter)
{
  int tmp_1;
  
#line 132 
  int pre_existing_vfs = 0;
  
#line 134 
  pre_existing_vfs = pci_num_vf(adapter->pdev);
  
#line 135 
  if (pre_existing_vfs == 0 && adapter->num_vfs == 0U) 
#line 136 
                                                       goto return_label; else ;
  
#line 144 
  if (pre_existing_vfs != 0) {
    
#line 145 
    adapter->num_vfs = (unsigned int)pre_existing_vfs;
    
#line 146 
    dev_warn((struct device const *)(& (adapter->pdev)->dev),"Virtual Functions already enabled for this device - Please reload all VF drivers to avoid spoofed packet errors\n");
  }
  else {
    int err;
    unsigned int tmp_0;
    {
      unsigned int tmp;
      
#line 157 
      unsigned int __min1 = adapter->num_vfs;
      
#line 157 
      unsigned int __min2 = 63U;
      
#line 157 
      if (__min1 < __min2) 
#line 157 
                           tmp = __min1; else 
#line 157 
                                              tmp = __min2;
      
#line 157 
      tmp_0 = tmp;
    }
    
#line 157 
    adapter->num_vfs = tmp_0;
    
#line 159 
    err = pci_enable_sriov(adapter->pdev,(int)adapter->num_vfs);
    
#line 160 
    if (err != 0) {
      
#line 161 
      if (((int)adapter->msg_enable & 2) != 0) 
#line 161 
                                               netdev_err((struct net_device const *)adapter->netdev,"Failed to enable PCI sriov: %d\n",err); else ;
      
#line 162 
      adapter->num_vfs = 0U;
      
#line 163 
      goto return_label;
    }
    else ;
  }
  
#line 167 
  tmp_1 = __ixgbe_enable_sriov(adapter);
  
#line 167 
  if (tmp_1 == 0) 
#line 168 
                  goto return_label; else ;
  
#line 173 
  if (((int)adapter->msg_enable & 2) != 0) 
#line 173 
                                           netdev_err((struct net_device const *)adapter->netdev,"Unable to allocate memory for VF Data Storage - "); else ;
  
#line 175 
  ixgbe_disable_sriov(adapter);
  return_label: 
#line 176 
                return;
}


#line 179  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_sriov.c"
int ixgbe_disable_sriov(struct ixgbe_adapter *adapter)
{
  int __retres;
  u32 gpie;
  u32 vmdctl;
  int rss;
  int tmp;
  
#line 181 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 187 
  adapter->num_vfs = 0U;
  
#line 190 
  kfree((void const *)adapter->vfinfo);
  
#line 191 
  adapter->vfinfo = (struct vf_data_storage *)0;
  
#line 194 
  kfree((void const *)adapter->mv_list);
  
#line 195 
  adapter->mv_list = (struct vf_macvlans *)0;
  
#line 198 
  if ((adapter->flags & 8388608U) == 0U) {
    
#line 199 
    __retres = 0;
    
#line 199 
    goto return_label;
  }
  else ;
  
#line 207 
  tmp = pci_vfs_assigned(adapter->pdev);
  
#line 207 
  if (tmp != 0) {
    
#line 208 
    dev_warn((struct device const *)(& (adapter->pdev)->dev),"Unloading driver while VFs are assigned - VFs will not be deallocated\n");
    
#line 209 
    __retres = -1;
    
#line 209 
    goto return_label;
  }
  else ;
  
#line 212 
  pci_disable_sriov(adapter->pdev);
  
#line 216 
  ixgbe_write_reg(hw,69712U,0U);
  
#line 217 
  gpie = ixgbe_read_reg(hw,2200U);
  
#line 218 
  gpie &= 4294918143U;
  
#line 219 
  ixgbe_write_reg(hw,2200U,gpie);
  
#line 222 
  vmdctl = ixgbe_read_reg(hw,20912U);
  
#line 223 
  vmdctl &= 4294959231U;
  
#line 224 
  ixgbe_write_reg(hw,20912U,vmdctl);
  
#line 225 
  ixgbe_read_reg(hw,8U);
  
#line 228 
  if ((unsigned int)adapter->ring_feature[1].limit == 1U) {
    int tmp_3;
    
#line 229 
    adapter->flags &= 4294950911U;
    
#line 230 
    adapter->flags &= 4286578687U;
    {
      u8 tmp_0;
      unsigned int tmp_1;
      int tmp_2;
      
#line 231 
      tmp_0 = ixgbe_max_rss_indices(adapter);
      
#line 231 
      int __min1 = (int)tmp_0;
      
#line 231 
      tmp_1 = cpumask_weight(cpu_online_mask);
      
#line 231 
      int __min2 = (int)tmp_1;
      
#line 231 
      if (__min1 < __min2) 
#line 231 
                           tmp_2 = __min1; else 
#line 231 
                                                tmp_2 = __min2;
      
#line 231 
      tmp_3 = tmp_2;
    }
    
#line 231 
    rss = tmp_3;
  }
  else {
    int tmp_6;
    {
      unsigned int tmp_4;
      int tmp_5;
      
#line 234 
      int __min1_0 = 4;
      
#line 234 
      tmp_4 = cpumask_weight(cpu_online_mask);
      
#line 234 
      int __min2_0 = (int)tmp_4;
      
#line 234 
      if (__min1_0 < __min2_0) 
#line 234 
                               tmp_5 = __min1_0; else 
#line 234 
                                                      tmp_5 = __min2_0;
      
#line 234 
      tmp_6 = tmp_5;
    }
    
#line 234 
    rss = tmp_6;
  }
  
#line 237 
  adapter->ring_feature[1].offset = (unsigned short)0U;
  
#line 238 
  adapter->ring_feature[2].limit = (unsigned short)rss;
  
#line 241 
  msleep(100U);
  
#line 242 
  __retres = 0;
  return_label: 
#line 242 
                return __retres;
}


#line 245  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_sriov.c"
static int ixgbe_pci_sriov_enable(struct pci_dev *dev, int num_vfs)
{
  int __retres;
  int i;
  
#line 248 
  struct ixgbe_adapter *adapter = pci_get_drvdata(dev);
  
#line 249 
  int err = 0;
  
#line 251 
  int pre_existing_vfs = pci_num_vf(dev);
  
#line 253 
  if (pre_existing_vfs != 0 && pre_existing_vfs != num_vfs) 
#line 254 
                                                            err = ixgbe_disable_sriov(adapter);
  else 
    
#line 255 
    if (pre_existing_vfs != 0 && pre_existing_vfs == num_vfs) {
      
#line 256 
      __retres = num_vfs;
      
#line 256 
      goto return_label;
    }
    else ;
  
#line 258 
  if (err != 0) {
    
#line 259 
    __retres = err;
    
#line 259 
    goto return_label;
  }
  else ;
  
#line 269 
  if (adapter->num_rx_pools + num_vfs > 64) {
    
#line 270 
    __retres = -1;
    
#line 270 
    goto return_label;
  }
  else ;
  
#line 272 
  adapter->num_vfs = (unsigned int)num_vfs;
  
#line 274 
  err = __ixgbe_enable_sriov(adapter);
  
#line 275 
  if (err != 0) {
    
#line 276 
    __retres = err;
    
#line 276 
    goto return_label;
  }
  else ;
  
#line 278 
  i = 0;
  
#line 278 
  goto ldv_55830;
  ldv_55829: 
#line 279 
  ;
  
#line 279 
  ixgbe_vf_configuration(dev,(unsigned int)(i | 268435456));
  
#line 278 
  i += 1;
  ldv_55830: 
#line 279 
  ;
  
#line 278 
  if (adapter->num_vfs > (unsigned int)i) 
#line 280 
                                          goto ldv_55829; else 
#line 283 
                                                               goto ldv_55831;
  ldv_55831: 
#line 284 
  ;
  
#line 281 
  err = pci_enable_sriov(dev,num_vfs);
  
#line 282 
  if (err != 0) {
    
#line 283 
    dev_warn((struct device const *)(& (adapter->pdev)->dev),"Failed to enable PCI sriov: %d\n",err);
    
#line 284 
    __retres = err;
    
#line 284 
    goto return_label;
  }
  else ;
  
#line 286 
  ixgbe_sriov_reinit(adapter);
  
#line 288 
  __retres = num_vfs;
  return_label: 
#line 288 
                return __retres;
}


#line 294  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_sriov.c"
static int ixgbe_pci_sriov_disable(struct pci_dev *dev)
{
  int err;
  
#line 296 
  struct ixgbe_adapter *adapter = pci_get_drvdata(dev);
  
#line 299 
  u32 current_flags = adapter->flags;
  
#line 302 
  err = ixgbe_disable_sriov(adapter);
  
#line 306 
  if (err == 0 && adapter->flags != current_flags) 
#line 307 
                                                   ixgbe_sriov_reinit(adapter); else ;
  
#line 310 
  return err;
}


#line 313  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_sriov.c"
int ixgbe_pci_sriov_configure(struct pci_dev *dev, int num_vfs)
{
  int __retres;
  
#line 315 
  if (num_vfs == 0) {
    int tmp;
    
#line 316 
    tmp = ixgbe_pci_sriov_disable(dev);
    
#line 316 
    __retres = tmp;
    
#line 316 
    goto return_label;
  }
  else {
    int tmp_0;
    
#line 318 
    tmp_0 = ixgbe_pci_sriov_enable(dev,num_vfs);
    
#line 318 
    __retres = tmp_0;
    
#line 318 
    goto return_label;
  }
  return_label: 
#line 315 
                return __retres;
}


#line 321  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_sriov.c"
static int ixgbe_set_vf_multicasts(struct ixgbe_adapter *adapter, u32 *msgbuf, u32 vf)
{
  int __retres;
  int i;
  u32 vector_bit;
  u32 vector_reg;
  u32 mta_reg;
  int tmp_1;
  
#line 324 
  int entries = (int)(*msgbuf >> 16) & 255;
  
#line 326 
  u16 *hash_list = (u16 *)(msgbuf + 1U);
  
#line 327 
  struct vf_data_storage *vfinfo = adapter->vfinfo + vf;
  
#line 328 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 333 
  u32 vmolr = ixgbe_read_reg(hw,(vf + 15360U) * 4U);
  {
    int tmp_0;
    
#line 336 
    int _min1 = entries;
    
#line 336 
    int _min2 = 30;
    
#line 336 
    if (_min1 < _min2) 
#line 336 
                       tmp_0 = _min1; else 
#line 336 
                                           tmp_0 = _min2;
    
#line 336 
    tmp_1 = tmp_0;
  }
  
#line 336 
  entries = tmp_1;
  
#line 343 
  vfinfo->num_vf_mc_hashes = (unsigned short)entries;
  
#line 349 
  i = 0;
  
#line 349 
  goto ldv_55860;
  ldv_55859: 
#line 350 
  ;
  
#line 350 
  vfinfo->vf_mc_hashes[i] = *(hash_list + i);
  
#line 349 
  i += 1;
  ldv_55860: 
#line 350 
  ;
  
#line 349 
  if (i < entries) 
#line 351 
                   goto ldv_55859; else 
#line 354 
                                        goto ldv_55861;
  ldv_55861: 
#line 355 
  ;
  
#line 353 
  i = 0;
  
#line 353 
  goto ldv_55863;
  ldv_55862: 
#line 354 
  ;
  
#line 354 
  vector_reg = (unsigned int)((int)vfinfo->vf_mc_hashes[i] >> 5) & 127U;
  
#line 355 
  vector_bit = (unsigned int)vfinfo->vf_mc_hashes[i] & 31U;
  
#line 356 
  mta_reg = ixgbe_read_reg(hw,(vector_reg + 5248U) * 4U);
  
#line 357 
  mta_reg = (unsigned int)(1 << vector_bit) | mta_reg;
  
#line 358 
  ixgbe_write_reg(hw,(vector_reg + 5248U) * 4U,mta_reg);
  
#line 353 
  i += 1;
  ldv_55863: 
#line 354 
  ;
  
#line 353 
  if ((int)vfinfo->num_vf_mc_hashes > i) 
#line 355 
                                         goto ldv_55862; else 
#line 358 
                                                              goto ldv_55864;
  ldv_55864: 
#line 359 
  ;
  
#line 360 
  vmolr |= 33554432U;
  
#line 361 
  ixgbe_write_reg(hw,(vf + 15360U) * 4U,vmolr);
  
#line 363 
  __retres = 0;
  
#line 363 
  return __retres;
}


#line 367  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_sriov.c"
void ixgbe_restore_vf_multicasts(struct ixgbe_adapter *adapter)
{
  struct vf_data_storage *vfinfo;
  int i;
  int j;
  u32 vector_bit;
  u32 vector_reg;
  u32 mta_reg;
  
#line 369 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 376 
  i = 0;
  
#line 376 
  goto ldv_55880;
  ldv_55879: 
#line 377 
  ;
  {
    
#line 377 
    u32 vmolr = ixgbe_read_reg(hw,(unsigned int)((i + 15360) * 4));
    
#line 378 
    vfinfo = adapter->vfinfo + i;
    
#line 379 
    j = 0;
    
#line 379 
    goto ldv_55877;
    ldv_55876: 
#line 380 
    ;
    
#line 380 
    hw->addr_ctrl.mta_in_use += 1U;
    
#line 381 
    vector_reg = (unsigned int)((int)vfinfo->vf_mc_hashes[j] >> 5) & 127U;
    
#line 382 
    vector_bit = (unsigned int)vfinfo->vf_mc_hashes[j] & 31U;
    
#line 383 
    mta_reg = ixgbe_read_reg(hw,(vector_reg + 5248U) * 4U);
    
#line 384 
    mta_reg = (unsigned int)(1 << vector_bit) | mta_reg;
    
#line 385 
    ixgbe_write_reg(hw,(vector_reg + 5248U) * 4U,mta_reg);
    
#line 379 
    j += 1;
    ldv_55877: 
#line 380 
    ;
    
#line 379 
    if ((int)vfinfo->num_vf_mc_hashes > j) 
#line 381 
                                           goto ldv_55876; else 
#line 384 
                                                                goto ldv_55878;
    ldv_55878: 
#line 385 
    ;
    
#line 388 
    if ((unsigned int)vfinfo->num_vf_mc_hashes != 0U) 
#line 389 
                                                      vmolr |= 33554432U; else 
                                                                    
#line 391 
                                                                    vmolr &= 4261412863U;
    
#line 392 
    ixgbe_write_reg(hw,(unsigned int)((i + 15360) * 4),vmolr);
  }
  
#line 376 
  i += 1;
  ldv_55880: 
#line 377 
  ;
  
#line 376 
  if (adapter->num_vfs > (unsigned int)i) 
#line 378 
                                          goto ldv_55879; else 
#line 381 
                                                               goto ldv_55881;
  ldv_55881: 
#line 382 
  ;
  
#line 396 
  ixgbe_full_sync_mac_table(adapter);
  
#line 397 
  return;
}


#line 400  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_sriov.c"
static int ixgbe_set_vf_vlan(struct ixgbe_adapter *adapter, int add, int vid, u32 vf)
{
  int __retres;
  int tmp;
  
#line 404 
  if (vid == 0 && add == 0) {
    
#line 405 
    __retres = 0;
    
#line 405 
    goto return_label;
  }
  else ;
  
#line 407 
  tmp = (*(adapter->hw.mac.ops.set_vfta))(& adapter->hw,(unsigned int)vid,vf,(_Bool)(add != 0));
  
#line 407 
  __retres = tmp;
  return_label: 
#line 407 
                return __retres;
}


#line 410  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_sriov.c"
static s32 ixgbe_set_vf_lpe(struct ixgbe_adapter *adapter, u32 *msgbuf, u32 vf)
{
  s32 __retres;
  u32 max_frs;
  
#line 412 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 413 
  int max_frame = (int)*(msgbuf + 1U);
  
#line 423 
  if (adapter->hw.mac.type == (unsigned int)ixgbe_mac_82599EB) {
    u32 reg_offset;
    u32 vf_shift;
    u32 vfre;
    
#line 424 
    struct net_device *dev = adapter->netdev;
    
#line 425 
    int pf_max_frame = (int)(dev->mtu + 14U);
    
#line 427 
    s32 err = 0;
    
#line 435 
    switch ((adapter->vfinfo + vf)->vf_api) {
      case (unsigned int)2: 
#line 436 
      ;
      case (unsigned int)3: 
#line 437 
      ;
      
#line 443 
      if (pf_max_frame > 1514) 
#line 444 
                               goto ldv_55904; else ;
      default: 
#line 445 
      ;
      
#line 451 
      if (pf_max_frame > 1514 || max_frame > 1518) 
#line 453 
                                                   err = -22; else ;
      
#line 454 
      goto ldv_55904;
    }
    ldv_55904: 
#line 458 
    ;
    
#line 458 
    vf_shift = vf & 31U;
    
#line 459 
    reg_offset = vf / 32U;
    
#line 462 
    vfre = ixgbe_read_reg(hw,(reg_offset + 5240U) * 4U);
    
#line 463 
    if (err != 0) 
#line 464 
                  vfre = (unsigned int)(~ (1 << vf_shift)) & vfre; else 
                                                                    
#line 466 
                                                                    vfre = (unsigned int)(1 << vf_shift) | vfre;
    
#line 467 
    ixgbe_write_reg(hw,(reg_offset + 5240U) * 4U,vfre);
    
#line 469 
    if (err != 0) {
      
#line 470 
      if (((int)adapter->msg_enable & 1) != 0) 
#line 470 
                                               netdev_err((struct net_device const *)adapter->netdev,"VF max_frame %d out of range\n",max_frame); else ;
      
#line 471 
      __retres = err;
      
#line 471 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 476 
  if (max_frame > 9728) {
    
#line 477 
    if (((int)adapter->msg_enable & 1) != 0) 
#line 477 
                                             netdev_err((struct net_device const *)adapter->netdev,"VF max_frame %d out of range\n",max_frame); else ;
    
#line 478 
    __retres = -22;
    
#line 478 
    goto return_label;
  }
  else ;
  
#line 482 
  max_frs = ixgbe_read_reg(hw,17000U);
  
#line 483 
  max_frs &= 4294901760U;
  
#line 484 
  max_frs >>= 16;
  
#line 486 
  if (max_frs < (unsigned int)max_frame) {
    
#line 487 
    max_frs = (unsigned int)(max_frame << 16);
    
#line 488 
    ixgbe_write_reg(hw,17000U,max_frs);
  }
  else ;
  
#line 491 
  if (((int)adapter->msg_enable & 8192) != 0) 
#line 491 
                                              netdev_info((struct net_device const *)adapter->netdev,"VF requests change max MTU to %d\n",max_frame); else ;
  
#line 493 
  __retres = 0;
  return_label: 
#line 493 
                return __retres;
}


#line 496  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_sriov.c"
static void ixgbe_set_vmolr(struct ixgbe_hw *hw, u32 vf, bool aupe)
{
  
#line 498 
  u32 vmolr = ixgbe_read_reg(hw,(vf + 15360U) * 4U);
  
#line 499 
  vmolr |= 134217728U;
  
#line 500 
  if ((int)aupe != 0) 
#line 501 
                      vmolr |= 16777216U; else 
#line 503 
                                               vmolr &= 4278190079U;
  
#line 504 
  ixgbe_write_reg(hw,(vf + 15360U) * 4U,vmolr);
  
#line 505 
  return;
}


#line 507  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_sriov.c"
static void ixgbe_clear_vmvir(struct ixgbe_adapter *adapter, u32 vf)
{
  
#line 509 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 511 
  ixgbe_write_reg(hw,(vf + 8192U) * 4U,0U);
  
#line 512 
  return;
}


#line 513  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_sriov.c"
__inline static void ixgbe_vf_reset_event(struct ixgbe_adapter *adapter, u32 vf)
{
  int tmp;
  
#line 515 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 516 
  struct vf_data_storage *vfinfo = adapter->vfinfo + vf;
  
#line 517 
  tmp = netdev_get_num_tc(adapter->netdev);
  
#line 517 
  u8 num_tcs = (unsigned char)tmp;
  
#line 520 
  ixgbe_set_vf_vlan(adapter,1,(int)vfinfo->pf_vlan,vf);
  
#line 523 
  ixgbe_set_vmolr(hw,vf,(_Bool)((unsigned int)vfinfo->pf_vlan == 0U));
  
#line 526 
  if (((unsigned int)vfinfo->pf_vlan == 0U && (unsigned int)vfinfo->pf_qos == 0U) && (unsigned int)num_tcs == 0U) 
    
#line 527 
    ixgbe_clear_vmvir(adapter,vf);
  else {
    
#line 529 
    if ((unsigned int)vfinfo->pf_qos != 0U || (unsigned int)num_tcs == 0U) 
      
#line 530 
      ixgbe_set_vmvir(adapter,(unsigned short)((int)vfinfo->pf_vlan),(unsigned short)((int)vfinfo->pf_qos),vf); else 
                                                                    
#line 533 
                                                                    ixgbe_set_vmvir(adapter,(unsigned short)((int)vfinfo->pf_vlan),(unsigned short)((int)adapter->default_up),vf);
    
#line 536 
    if ((unsigned int)vfinfo->spoofchk_enabled != 0U) 
#line 537 
                                                      (*(hw->mac.ops.set_vlan_anti_spoofing))(hw,(_Bool)1,(int)vf); else ;
  }
  
#line 541 
  (adapter->vfinfo + vf)->num_vf_mc_hashes = (unsigned short)0U;
  
#line 544 
  ixgbe_set_rx_mode(adapter->netdev);
  
#line 546 
  ixgbe_del_mac_filter(adapter,(u8 *)(& (adapter->vfinfo + vf)->vf_mac_addresses),(unsigned short)((int)((unsigned short)vf)));
  
#line 549 
  (adapter->vfinfo + vf)->vf_api = 0U;
  
#line 550 
  return;
}


#line 552  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_sriov.c"
static int ixgbe_set_vf_mac(struct ixgbe_adapter *adapter, int vf, unsigned char *mac_addr)
{
  int __retres;
  
#line 555 
  ixgbe_del_mac_filter(adapter,(u8 *)(& (adapter->vfinfo + vf)->vf_mac_addresses),(unsigned short)((int)((unsigned short)vf)));
  
#line 556 
  memcpy((void *)(& (adapter->vfinfo + vf)->vf_mac_addresses),(void const *)mac_addr,6UL);
  
#line 557 
  ixgbe_add_mac_filter(adapter,(u8 *)(& (adapter->vfinfo + vf)->vf_mac_addresses),(unsigned short)((int)((unsigned short)vf)));
  
#line 559 
  __retres = 0;
  
#line 559 
  return __retres;
}


#line 562  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_sriov.c"
static int ixgbe_set_vf_macvlan(struct ixgbe_adapter *adapter, int vf, int index, unsigned char *mac_addr)
{
  int __retres;
  struct list_head *pos;
  struct vf_macvlans *entry;
  struct vf_macvlans *tmp_0;
  
#line 568 
  if (index <= 1) {
    struct vf_macvlans *tmp;
    
#line 569 
    pos = adapter->vf_mvs.l.next;
    
#line 569 
    goto ldv_55940;
    ldv_55939: 
#line 570 
    ;
    {
      
#line 570 
      struct list_head const *__mptr = (struct list_head const *)pos;
      
#line 570 
      tmp = (struct vf_macvlans *)__mptr;
    }
    
#line 570 
    entry = tmp;
    
#line 571 
    if (entry->vf == vf) {
      
#line 572 
      entry->vf = -1;
      
#line 573 
      entry->free = (_Bool)1;
      
#line 574 
      entry->is_macvlan = (_Bool)0;
      
#line 575 
      ixgbe_del_mac_filter(adapter,(u8 *)(& entry->vf_macvlan),(unsigned short)((int)((unsigned short)vf)));
    }
    else ;
    
#line 569 
    pos = pos->next;
    ldv_55940: 
#line 570 
    ;
    
#line 569 
    if (& adapter->vf_mvs.l != pos) 
#line 571 
                                    goto ldv_55939; else 
#line 574 
                                                         goto ldv_55941;
    ldv_55941: 
#line 575 
    ;
  }
  else ;
  
#line 585 
  if (index == 0) {
    
#line 586 
    __retres = 0;
    
#line 586 
    goto return_label;
  }
  else ;
  
#line 588 
  entry = (struct vf_macvlans *)0;
  
#line 590 
  pos = adapter->vf_mvs.l.next;
  
#line 590 
  goto ldv_55946;
  ldv_55945: 
#line 591 
  ;
  {
    
#line 591 
    struct list_head const *__mptr_0 = (struct list_head const *)pos;
    
#line 591 
    tmp_0 = (struct vf_macvlans *)__mptr_0;
  }
  
#line 591 
  entry = tmp_0;
  
#line 592 
  if ((int)entry->free != 0) 
#line 593 
                             goto ldv_55944; else ;
  
#line 590 
  pos = pos->next;
  ldv_55946: 
#line 591 
  ;
  
#line 590 
  if (& adapter->vf_mvs.l != pos) 
#line 592 
                                  goto ldv_55945; else 
#line 595 
                                                       goto ldv_55944;
  ldv_55944: 
#line 596 
  ;
  
#line 604 
  if (entry == (struct vf_macvlans *)0 || ! entry->free) {
    
#line 605 
    __retres = -28;
    
#line 605 
    goto return_label;
  }
  else ;
  
#line 607 
  entry->free = (_Bool)0;
  
#line 608 
  entry->is_macvlan = (_Bool)1;
  
#line 609 
  entry->vf = vf;
  
#line 610 
  memcpy((void *)(& entry->vf_macvlan),(void const *)mac_addr,6UL);
  
#line 612 
  ixgbe_add_mac_filter(adapter,mac_addr,(unsigned short)((int)((unsigned short)vf)));
  
#line 614 
  __retres = 0;
  return_label: 
#line 614 
                return __retres;
}


#line 617  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_sriov.c"
int ixgbe_vf_configuration(struct pci_dev *pdev, unsigned int event_mask)
{
  int __retres;
  
#line 619 
  struct ixgbe_adapter *adapter = pci_get_drvdata(pdev);
  
#line 620 
  unsigned int vfn = event_mask & 63U;
  
#line 622 
  bool enable = (_Bool)((event_mask & 268435456U) != 0U);
  
#line 624 
  if ((int)enable != 0) 
#line 625 
                        eth_zero_addr((u8 *)(& (adapter->vfinfo + vfn)->vf_mac_addresses)); else ;
  
#line 627 
  __retres = 0;
  
#line 627 
  return __retres;
}


#line 630  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_sriov.c"
__inline static void ixgbe_write_qde(struct ixgbe_adapter *adapter, u32 vf, u32 qde)
{
  int i;
  
#line 633 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 634 
  struct ixgbe_ring_feature *vmdq = & adapter->ring_feature[1];
  
#line 635 
  u32 q_per_pool = (unsigned int)(- ((int)vmdq->mask) & (int)vmdq->mask);
  
#line 638 
  i = (int)(vf * q_per_pool);
  
#line 638 
  goto ldv_55965;
  ldv_55964: 
#line 639 
  ;
  {
    u32 reg;
    
#line 642 
    ixgbe_read_reg(hw,8U);
    
#line 645 
    reg = 65537U;
    
#line 646 
    reg = (unsigned int)(i << 8) | reg;
    
#line 647 
    ixgbe_write_reg(hw,12036U,reg);
  }
  
#line 638 
  i += 1;
  ldv_55965: 
#line 639 
  ;
  
#line 638 
  if ((vf + 1U) * q_per_pool > (unsigned int)i) 
#line 640 
                                                goto ldv_55964; else 
                                                                  
#line 643 
                                                                  goto ldv_55966;
  ldv_55966: 
#line 644 
  ;
  
#line 645 
  return;
}


#line 651  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_sriov.c"
static int ixgbe_vf_reset_msg(struct ixgbe_adapter *adapter, u32 vf)
{
  int __retres;
  u32 reg;
  u32 reg_offset;
  u32 vf_shift;
  int i;
  int tmp_0;
  bool tmp;
  int tmp_2;
  bool tmp_1;
  
#line 653 
  struct ixgbe_ring_feature *vmdq = & adapter->ring_feature[1];
  
#line 654 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 655 
  unsigned char *vf_mac = (unsigned char *)(& (adapter->vfinfo + vf)->vf_mac_addresses);
  
#line 657 
  u32 msgbuf[4U] = {0U, 0U, 0U, 0U};
  
#line 658 
  u8 *addr = (u8 *)(& msgbuf[1]);
  
#line 659 
  u32 q_per_pool = (unsigned int)(- ((int)vmdq->mask) & (int)vmdq->mask);
  
#line 662 
  if (((int)adapter->msg_enable & 2) != 0) 
#line 662 
                                           netdev_info((struct net_device const *)adapter->netdev,"VF Reset msg received from vf %d\n",vf); else ;
  
#line 665 
  ixgbe_vf_reset_event(adapter,vf);
  
#line 668 
  tmp = is_zero_ether_addr((u8 const *)vf_mac);
  
#line 668 
  if (tmp) 
#line 668 
           tmp_0 = 0; else 
#line 668 
                           tmp_0 = 1;
  
#line 668 
  if (tmp_0) 
#line 669 
             ixgbe_set_vf_mac(adapter,(int)vf,vf_mac); else ;
  
#line 671 
  vf_shift = vf & 31U;
  
#line 672 
  reg_offset = vf / 32U;
  
#line 675 
  reg = ixgbe_read_reg(hw,(reg_offset + 8260U) * 4U);
  
#line 676 
  reg = (unsigned int)(1 << vf_shift) | reg;
  
#line 677 
  ixgbe_write_reg(hw,(reg_offset + 8260U) * 4U,reg);
  
#line 680 
  ixgbe_write_qde(adapter,vf,1U);
  
#line 683 
  reg = ixgbe_read_reg(hw,(reg_offset + 5240U) * 4U);
  
#line 684 
  reg = (unsigned int)(1 << vf_shift) | reg;
  
#line 689 
  if (adapter->hw.mac.type == (unsigned int)ixgbe_mac_82599EB) {
    
#line 690 
    struct net_device *dev = adapter->netdev;
    
#line 691 
    int pf_max_frame = (int)(dev->mtu + 14U);
    
#line 699 
    if (pf_max_frame > 1514) 
#line 700 
                             reg = (unsigned int)(~ (1 << vf_shift)) & reg; else ;
  }
  else ;
  
#line 702 
  ixgbe_write_reg(hw,(reg_offset + 5240U) * 4U,reg);
  
#line 705 
  (adapter->vfinfo + vf)->clear_to_send = (_Bool)1;
  
#line 708 
  reg = ixgbe_read_reg(hw,(reg_offset + 8676U) * 4U);
  
#line 709 
  reg = (unsigned int)(1 << vf_shift) | reg;
  
#line 710 
  ixgbe_write_reg(hw,(reg_offset + 8676U) * 4U,reg);
  
#line 716 
  i = 0;
  
#line 716 
  goto ldv_55984;
  ldv_55983: 
#line 717 
  ;
  
#line 717 
  ixgbe_write_reg(hw,(q_per_pool * vf + (unsigned int)i) * 64U + 24636U,0U);
  
#line 718 
  ixgbe_write_reg(hw,(q_per_pool * vf + (unsigned int)i) * 64U + 24632U,0U);
  
#line 716 
  i += 1;
  ldv_55984: 
#line 717 
  ;
  
#line 716 
  if ((unsigned int)i < q_per_pool) 
#line 718 
                                    goto ldv_55983; else 
#line 721 
                                                         goto ldv_55985;
  ldv_55985: 
#line 722 
  ;
  
#line 722 
  msgbuf[0] = 1U;
  
#line 723 
  tmp_1 = is_zero_ether_addr((u8 const *)vf_mac);
  
#line 723 
  if (tmp_1) 
#line 723 
             tmp_2 = 0; else 
#line 723 
                             tmp_2 = 1;
  
#line 723 
  if (tmp_2) {
    
#line 724 
    msgbuf[0] |= 2147483648U;
    
#line 725 
    memcpy((void *)addr,(void const *)vf_mac,6UL);
  }
  else {
    
#line 727 
    msgbuf[0] |= 1073741824U;
    
#line 728 
    dev_warn((struct device const *)(& (adapter->pdev)->dev),"VF %d has no MAC address assigned, you may have to assign one manually\n",vf);
  }
  
#line 737 
  msgbuf[3] = (unsigned int)hw->mac.mc_filter_type;
  
#line 738 
  ixgbe_write_mbx(hw,(u32 *)(& msgbuf),(unsigned short)4,(unsigned short)((int)((unsigned short)vf)));
  
#line 740 
  __retres = 0;
  
#line 740 
  return __retres;
}


#line 743  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_sriov.c"
static int ixgbe_set_vf_mac_addr(struct ixgbe_adapter *adapter, u32 *msgbuf, u32 vf)
{
  int __retres;
  int tmp_0;
  bool tmp;
  int tmp_3;
  
#line 746 
  u8 *new_mac = (u8 *)(msgbuf + 1U);
  
#line 748 
  tmp = is_valid_ether_addr((u8 const *)new_mac);
  
#line 748 
  if (tmp) 
#line 748 
           tmp_0 = 0; else 
#line 748 
                           tmp_0 = 1;
  
#line 748 
  if (tmp_0) {
    
#line 749 
    if (((int)adapter->msg_enable & 1) != 0) 
#line 749 
                                             netdev_warn((struct net_device const *)adapter->netdev,"VF %d attempted to set invalid mac\n",vf); else ;
    
#line 750 
    __retres = -1;
    
#line 750 
    goto return_label;
  }
  else ;
  
#line 753 
  if ((int)(adapter->vfinfo + vf)->pf_set_mac != 0) {
    int tmp_2;
    bool tmp_1;
    
#line 754 
    tmp_1 = ether_addr_equal((u8 const *)(& (adapter->vfinfo + vf)->vf_mac_addresses),(u8 const *)new_mac);
    
#line 754 
    if (tmp_1) 
#line 754 
               tmp_2 = 0; else 
#line 754 
                               tmp_2 = 1;
    
#line 754 
    if (tmp_2) {
      
#line 755 
      if (((int)adapter->msg_enable & 1) != 0) 
#line 755 
                                               netdev_warn((struct net_device const *)adapter->netdev,"VF %d attempted to override administratively set MAC address\n",vf); else ;
      
#line 759 
      __retres = -1;
      
#line 759 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 762 
  tmp_3 = ixgbe_set_vf_mac(adapter,(int)vf,new_mac);
  
#line 762 
  __retres = tmp_3 < 0;
  return_label: 
#line 762 
                return __retres;
}


#line 765  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_sriov.c"
static int ixgbe_find_vlvf_entry(struct ixgbe_hw *hw, u32 vlan)
{
  int __retres;
  u32 vlvf;
  s32 regindex;
  
#line 771 
  if (vlan == 0U) {
    
#line 772 
    __retres = 0;
    
#line 772 
    goto return_label;
  }
  else ;
  
#line 775 
  regindex = 1;
  
#line 775 
  goto ldv_56000;
  ldv_55999: 
#line 776 
  ;
  
#line 776 
  vlvf = ixgbe_read_reg(hw,(unsigned int)((regindex + 15424) * 4));
  
#line 777 
  if ((vlvf & 4095U) == vlan) 
#line 778 
                              goto ldv_55998; else ;
  
#line 775 
  regindex += 1;
  ldv_56000: 
#line 776 
  ;
  
#line 775 
  if (regindex <= 63) 
#line 777 
                      goto ldv_55999; else 
#line 780 
                                           goto ldv_55998;
  ldv_55998: 
#line 781 
  ;
  
#line 782 
  if (regindex > 63) 
#line 783 
                     regindex = -1; else ;
  
#line 785 
  __retres = regindex;
  return_label: 
#line 785 
                return __retres;
}


#line 788  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_sriov.c"
static int ixgbe_set_vf_vlan_msg(struct ixgbe_adapter *adapter, u32 *msgbuf, u32 vf)
{
  int __retres;
  int err;
  s32 reg_ndx;
  u32 vlvf;
  u32 bits;
  int tmp;
  
#line 791 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 792 
  int add = (int)(*msgbuf >> 16) & 255;
  
#line 793 
  int vid = (int)*(msgbuf + 1U) & 4095;
  
#line 798 
  tmp = netdev_get_num_tc(adapter->netdev);
  
#line 798 
  u8 tcs = (unsigned char)tmp;
  
#line 800 
  if ((unsigned int)(adapter->vfinfo + vf)->pf_vlan != 0U || (unsigned int)tcs != 0U) {
    
#line 801 
    if (((int)adapter->msg_enable & 1) != 0) 
#line 801 
                                             netdev_warn((struct net_device const *)adapter->netdev,"VF %d attempted to override administratively set VLAN configuration\n",vf); else ;
    
#line 805 
    __retres = -1;
    
#line 805 
    goto return_label;
  }
  else ;
  
#line 808 
  if (add != 0) 
#line 809 
                (adapter->vfinfo + vf)->vlan_count = (u16)((int)(adapter->vfinfo + vf)->vlan_count + 1);
  else 
    
#line 810 
    if ((unsigned int)(adapter->vfinfo + vf)->vlan_count != 0U) 
#line 811 
                                                                (adapter->vfinfo + vf)->vlan_count = (u16)((int)(adapter->vfinfo + vf)->vlan_count - 1); else ;
  
#line 816 
  if (add != 0 && ((adapter->netdev)->flags & 256U) != 0U) 
#line 817 
                                                           err = ixgbe_set_vf_vlan(adapter,add,vid,(unsigned int)adapter->ring_feature[1].offset); else ;
  
#line 819 
  err = ixgbe_set_vf_vlan(adapter,add,vid,vf);
  
#line 820 
  if (err == 0 && (unsigned int)(adapter->vfinfo + vf)->spoofchk_enabled != 0U) 
    
#line 821 
    (*(hw->mac.ops.set_vlan_anti_spoofing))(hw,(_Bool)1,(int)vf); else ;
  
#line 826 
  if (add == 0 && ((adapter->netdev)->flags & 256U) != 0U) {
    
#line 827 
    reg_ndx = ixgbe_find_vlvf_entry(hw,(unsigned int)vid);
    
#line 828 
    if (reg_ndx < 0) {
      
#line 829 
      __retres = err;
      
#line 829 
      goto return_label;
    }
    else ;
    
#line 830 
    vlvf = ixgbe_read_reg(hw,(unsigned int)((reg_ndx + 15424) * 4));
    
#line 834 
    if ((unsigned int)adapter->ring_feature[1].offset <= 31U) {
      u32 tmp_0;
      
#line 835 
      bits = ixgbe_read_reg(hw,(unsigned int)((reg_ndx + 7744) * 8));
      
#line 836 
      bits = (unsigned int)(~ (1 << (int)adapter->ring_feature[1].offset)) & bits;
      
#line 837 
      tmp_0 = ixgbe_read_reg(hw,(unsigned int)((reg_ndx + 7744) * 8 + 1));
      
#line 838 
      bits = tmp_0 | bits;
    }
    else {
      u32 tmp_1;
      
#line 840 
      bits = ixgbe_read_reg(hw,(unsigned int)((reg_ndx + 7744) * 8 + 1));
      
#line 842 
      bits = (unsigned int)(~ (1 << ((int)adapter->ring_feature[1].offset + -32))) & bits;
      
#line 843 
      tmp_1 = ixgbe_read_reg(hw,(unsigned int)((reg_ndx + 7744) * 8));
      
#line 843 
      bits = tmp_1 | bits;
    }
    
#line 850 
    if ((vlvf & 4095U) == (unsigned int)vid) {
      int tmp_4;
      
#line 850 
      if (0 != 0) {
        int tmp_2;
        
#line 851 
        tmp_2 = constant_test_bit((long)vid,(unsigned long const volatile *)(& adapter->active_vlans));
        
#line 850 
        tmp_4 = tmp_2 == 0;
      }
      else {
        int tmp_3;
        
#line 850 
        tmp_3 = variable_test_bit((long)vid,(unsigned long const volatile *)(& adapter->active_vlans));
        
#line 850 
        tmp_4 = tmp_3 == 0;
      }
      
#line 850 
      if (tmp_4) {
        
#line 851 
        if (bits == 0U) 
#line 852 
                        ixgbe_set_vf_vlan(adapter,add,vid,(unsigned int)adapter->ring_feature[1].offset); else ;
      }
      else ;
    }
    else ;
  }
  else ;
  
#line 855 
  __retres = err;
  return_label: 
#line 855 
                return __retres;
}


#line 858  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_sriov.c"
static int ixgbe_set_vf_macvlan_msg(struct ixgbe_adapter *adapter, u32 *msgbuf, u32 vf)
{
  int __retres;
  int err;
  
#line 861 
  u8 *new_mac = (u8 *)(msgbuf + 1U);
  
#line 862 
  int index = (int)(*msgbuf >> 16) & 255;
  
#line 866 
  if ((int)(adapter->vfinfo + vf)->pf_set_mac != 0 && index > 0) {
    
#line 867 
    if (((int)adapter->msg_enable & 1) != 0) 
#line 867 
                                             netdev_warn((struct net_device const *)adapter->netdev,"VF %d requested MACVLAN filter but is administratively denied\n",vf); else ;
    
#line 870 
    __retres = -1;
    
#line 870 
    goto return_label;
  }
  else ;
  
#line 874 
  if (index != 0) {
    int tmp_0;
    bool tmp;
    
#line 875 
    tmp = is_valid_ether_addr((u8 const *)new_mac);
    
#line 875 
    if (tmp) 
#line 875 
             tmp_0 = 0; else 
#line 875 
                             tmp_0 = 1;
    
#line 875 
    if (tmp_0) {
      
#line 876 
      if (((int)adapter->msg_enable & 1) != 0) 
#line 876 
                                               netdev_warn((struct net_device const *)adapter->netdev,"VF %d attempted to set invalid mac\n",vf); else ;
      
#line 877 
      __retres = -1;
      
#line 877 
      goto return_label;
    }
    else ;
    
#line 884 
    if ((unsigned int)(adapter->vfinfo + vf)->spoofchk_enabled != 0U) 
      
#line 885 
      ixgbe_ndo_set_vf_spoofchk(adapter->netdev,(int)vf,(_Bool)0); else ;
  }
  else ;
  
#line 888 
  err = ixgbe_set_vf_macvlan(adapter,(int)vf,index,new_mac);
  
#line 889 
  if (err == -28) {
    
#line 890 
    if (((int)adapter->msg_enable & 1) != 0) 
#line 890 
                                             netdev_warn((struct net_device const *)adapter->netdev,"VF %d has requested a MACVLAN filter but there is no space for it\n",vf); else ;
  }
  else ;
  
#line 894 
  __retres = err < 0;
  return_label: 
#line 894 
                return __retres;
}


#line 897  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_sriov.c"
static int ixgbe_negotiate_vf_api(struct ixgbe_adapter *adapter, u32 *msgbuf, u32 vf)
{
  int __retres;
  
#line 900 
  int api = (int)*(msgbuf + 1U);
  
#line 902 
  switch (api) {
    case 0: 
#line 903 
    ;
    case 2: 
#line 904 
    ;
    case 3: 
#line 905 
    ;
    
#line 906 
    (adapter->vfinfo + vf)->vf_api = (unsigned int)api;
    
#line 907 
    __retres = 0;
    
#line 907 
    goto return_label;
    default: 
#line 908 
    ;
    
#line 909 
    goto ldv_56032;
  }
  ldv_56032: 
#line 912 
  ;
  
#line 912 
  if (((int)adapter->msg_enable & 1) != 0) 
#line 912 
                                           netdev_info((struct net_device const *)adapter->netdev,"VF %d requested invalid api version %u\n",vf,api); else ;
  
#line 914 
  __retres = -1;
  return_label: 
#line 914 
                return __retres;
}


#line 917  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_sriov.c"
static int ixgbe_get_vf_queues(struct ixgbe_adapter *adapter, u32 *msgbuf, u32 vf)
{
  int __retres;
  int tmp;
  
#line 920 
  struct net_device *dev = adapter->netdev;
  
#line 921 
  struct ixgbe_ring_feature *vmdq = & adapter->ring_feature[1];
  
#line 922 
  unsigned int default_tc = 0U;
  
#line 923 
  tmp = netdev_get_num_tc(dev);
  
#line 923 
  u8 num_tcs = (unsigned char)tmp;
  
#line 926 
  switch ((adapter->vfinfo + vf)->vf_api) {
    case (unsigned int)1: 
#line 927 
    ;
    case (unsigned int)2: 
#line 928 
    ;
    case (unsigned int)3: 
#line 929 
    ;
    
#line 930 
    goto ldv_56045;
    default: 
#line 931 
    ;
    
#line 932 
    __retres = -1;
    
#line 932 
    goto return_label;
  }
  ldv_56045: 
#line 936 
  ;
  
#line 936 
  *(msgbuf + 1U) = (unsigned int)(- ((int)vmdq->mask) & (int)vmdq->mask);
  
#line 937 
  *(msgbuf + 2U) = (unsigned int)(- ((int)vmdq->mask) & (int)vmdq->mask);
  
#line 940 
  if ((unsigned int)num_tcs > 1U) {
    int tmp_0;
    
#line 941 
    tmp_0 = netdev_get_prio_tc_map((struct net_device const *)dev,(unsigned int)adapter->default_up);
    
#line 941 
    default_tc = (unsigned int)tmp_0;
  }
  else ;
  
#line 944 
  if ((unsigned int)num_tcs != 0U) 
#line 945 
                                   *(msgbuf + 3U) = (unsigned int)num_tcs;
  else 
    
#line 946 
    if ((unsigned int)(adapter->vfinfo + vf)->pf_vlan != 0U || (unsigned int)(adapter->vfinfo + vf)->pf_qos != 0U) 
      
#line 947 
      *(msgbuf + 3U) = 1U; else 
#line 949 
                                *(msgbuf + 3U) = 0U;
  
#line 952 
  *(msgbuf + 4U) = default_tc;
  
#line 954 
  __retres = 0;
  return_label: 
#line 954 
                return __retres;
}


#line 957  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_sriov.c"
static int ixgbe_get_vf_reta(struct ixgbe_adapter *adapter, u32 *msgbuf, u32 vf)
{
  int __retres;
  u32 i;
  u32 j;
  
#line 960 
  u32 *out_buf = msgbuf + 1U;
  
#line 961 
  u8 const *reta = (u8 const *)(& adapter->rss_indir_tbl);
  
#line 962 
  u32 reta_size = ixgbe_rss_indir_tbl_entries(adapter);
  
#line 965 
  if (! (adapter->vfinfo + vf)->rss_query_enabled) {
    
#line 966 
    __retres = -1;
    
#line 966 
    goto return_label;
  }
  else ;
  
#line 969 
  if ((adapter->vfinfo + vf)->vf_api != 3U) {
    
#line 970 
    __retres = -95;
    
#line 970 
    goto return_label;
  }
  else ;
  
#line 977 
  i = 0U;
  
#line 977 
  goto ldv_56061;
  ldv_56060: 
#line 978 
  ;
  
#line 978 
  *(out_buf + i) = 0U;
  
#line 979 
  j = 0U;
  
#line 979 
  goto ldv_56058;
  ldv_56057: 
#line 980 
  ;
  
#line 980 
  *(out_buf + i) |= ((unsigned int)*(reta + (i * 16U + j)) & 3U) << j * 2U;
  
#line 979 
  j += 1U;
  ldv_56058: 
#line 980 
  ;
  
#line 979 
  if (j <= 15U) 
#line 981 
                goto ldv_56057; else 
#line 984 
                                     goto ldv_56059;
  ldv_56059: 
#line 985 
  ;
  
#line 977 
  i += 1U;
  ldv_56061: 
#line 978 
  ;
  
#line 977 
  if (reta_size / 16U > i) 
#line 979 
                           goto ldv_56060; else 
#line 982 
                                                goto ldv_56062;
  ldv_56062: 
#line 983 
  ;
  
#line 983 
  __retres = 0;
  return_label: 
#line 983 
                return __retres;
}


#line 986  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_sriov.c"
static int ixgbe_get_vf_rss_key(struct ixgbe_adapter *adapter, u32 *msgbuf, u32 vf)
{
  int __retres;
  
#line 989 
  u32 *rss_key = msgbuf + 1U;
  
#line 992 
  if (! (adapter->vfinfo + vf)->rss_query_enabled) {
    
#line 993 
    __retres = -1;
    
#line 993 
    goto return_label;
  }
  else ;
  
#line 996 
  if ((adapter->vfinfo + vf)->vf_api != 3U) {
    
#line 997 
    __retres = -95;
    
#line 997 
    goto return_label;
  }
  else ;
  
#line 999 
  memcpy((void *)rss_key,(void const *)(& adapter->rss_key),40UL);
  
#line 1001 
  __retres = 0;
  return_label: 
#line 1001 
                return __retres;
}


#line 1004  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_sriov.c"
static int ixgbe_rcv_msg_from_vf(struct ixgbe_adapter *adapter, u32 vf)
{
  int __retres;
  u32 msgbuf[16U];
  s32 retval;
  
#line 1006 
  u32 mbx_size = 16U;
  
#line 1008 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 1011 
  retval = ixgbe_read_mbx(hw,(u32 *)(& msgbuf),(unsigned short)((int)((unsigned short)mbx_size)),(unsigned short)((int)((unsigned short)vf)));
  
#line 1013 
  if (retval != 0) {
    
#line 1014 
    printk("\001");
    
#line 1015 
    __retres = retval;
    
#line 1015 
    goto return_label;
  }
  else ;
  
#line 1019 
  if ((msgbuf[0] & 3221225472U) != 0U) {
    
#line 1020 
    __retres = 0;
    
#line 1020 
    goto return_label;
  }
  else ;
  
#line 1023 
  ixgbe_read_reg(hw,8U);
  
#line 1025 
  if (msgbuf[0] == 1U) {
    int tmp;
    
#line 1026 
    tmp = ixgbe_vf_reset_msg(adapter,vf);
    
#line 1026 
    __retres = tmp;
    
#line 1026 
    goto return_label;
  }
  else ;
  
#line 1032 
  if (! (adapter->vfinfo + vf)->clear_to_send) {
    
#line 1033 
    msgbuf[0] |= 1073741824U;
    
#line 1034 
    ixgbe_write_mbx(hw,(u32 *)(& msgbuf),(unsigned short)1,(unsigned short)((int)((unsigned short)vf)));
    
#line 1035 
    __retres = 0;
    
#line 1035 
    goto return_label;
  }
  else ;
  
#line 1038 
  switch (msgbuf[0] & 65535U) {
    case (unsigned int)2: 
#line 1039 
    ;
    
#line 1040 
    retval = ixgbe_set_vf_mac_addr(adapter,(u32 *)(& msgbuf),vf);
    
#line 1041 
    goto ldv_56078;
    case (unsigned int)3: 
#line 1042 
    ;
    
#line 1043 
    retval = ixgbe_set_vf_multicasts(adapter,(u32 *)(& msgbuf),vf);
    
#line 1044 
    goto ldv_56078;
    case (unsigned int)4: 
#line 1045 
    ;
    
#line 1046 
    retval = ixgbe_set_vf_vlan_msg(adapter,(u32 *)(& msgbuf),vf);
    
#line 1047 
    goto ldv_56078;
    case (unsigned int)5: 
#line 1048 
    ;
    
#line 1049 
    retval = ixgbe_set_vf_lpe(adapter,(u32 *)(& msgbuf),vf);
    
#line 1050 
    goto ldv_56078;
    case (unsigned int)6: 
#line 1051 
    ;
    
#line 1052 
    retval = ixgbe_set_vf_macvlan_msg(adapter,(u32 *)(& msgbuf),vf);
    
#line 1053 
    goto ldv_56078;
    case (unsigned int)8: 
#line 1054 
    ;
    
#line 1055 
    retval = ixgbe_negotiate_vf_api(adapter,(u32 *)(& msgbuf),vf);
    
#line 1056 
    goto ldv_56078;
    case (unsigned int)9: 
#line 1057 
    ;
    
#line 1058 
    retval = ixgbe_get_vf_queues(adapter,(u32 *)(& msgbuf),vf);
    
#line 1059 
    goto ldv_56078;
    case (unsigned int)10: 
#line 1060 
    ;
    
#line 1061 
    retval = ixgbe_get_vf_reta(adapter,(u32 *)(& msgbuf),vf);
    
#line 1062 
    goto ldv_56078;
    case (unsigned int)11: 
#line 1063 
    ;
    
#line 1064 
    retval = ixgbe_get_vf_rss_key(adapter,(u32 *)(& msgbuf),vf);
    
#line 1065 
    goto ldv_56078;
    default: 
#line 1066 
    ;
    
#line 1067 
    if (((int)adapter->msg_enable & 1) != 0) 
#line 1067 
                                             netdev_err((struct net_device const *)adapter->netdev,"Unhandled Msg %8.8x\n",msgbuf[0]); else ;
    
#line 1068 
    retval = -100;
    
#line 1069 
    goto ldv_56078;
  }
  ldv_56078: 
#line 1073 
  ;
  
#line 1073 
  if (retval != 0) 
#line 1074 
                   msgbuf[0] |= 1073741824U; else 
#line 1076 
                                                  msgbuf[0] |= 2147483648U;
  
#line 1078 
  msgbuf[0] |= 536870912U;
  
#line 1080 
  ixgbe_write_mbx(hw,(u32 *)(& msgbuf),(unsigned short)((int)((unsigned short)mbx_size)),(unsigned short)((int)((unsigned short)vf)));
  
#line 1082 
  __retres = retval;
  return_label: 
#line 1082 
                return __retres;
}


#line 1085  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_sriov.c"
static void ixgbe_rcv_ack_from_vf(struct ixgbe_adapter *adapter, u32 vf)
{
  
#line 1087 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 1088 
  u32 msg = 1073741824U;
  
#line 1091 
  if (! (adapter->vfinfo + vf)->clear_to_send) 
#line 1092 
                                               ixgbe_write_mbx(hw,& msg,(unsigned short)1,(unsigned short)((int)((unsigned short)vf))); else ;
  
#line 1093 
  return;
}


#line 1095  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_sriov.c"
void ixgbe_msg_task(struct ixgbe_adapter *adapter)
{
  u32 vf;
  s32 tmp;
  s32 tmp_0;
  s32 tmp_1;
  
#line 1097 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 1100 
  vf = 0U;
  
#line 1100 
  goto ldv_56100;
  ldv_56099: 
#line 1101 
  ;
  
#line 1102 
  tmp = ixgbe_check_for_rst(hw,(unsigned short)((int)((unsigned short)vf)));
  
#line 1102 
  if (tmp == 0) 
#line 1103 
                ixgbe_vf_reset_event(adapter,vf); else ;
  
#line 1106 
  tmp_0 = ixgbe_check_for_msg(hw,(unsigned short)((int)((unsigned short)vf)));
  
#line 1106 
  if (tmp_0 == 0) 
#line 1107 
                  ixgbe_rcv_msg_from_vf(adapter,vf); else ;
  
#line 1110 
  tmp_1 = ixgbe_check_for_ack(hw,(unsigned short)((int)((unsigned short)vf)));
  
#line 1110 
  if (tmp_1 == 0) 
#line 1111 
                  ixgbe_rcv_ack_from_vf(adapter,vf); else ;
  
#line 1100 
  vf += 1U;
  ldv_56100: 
#line 1101 
  ;
  
#line 1100 
  if (adapter->num_vfs > vf) 
#line 1102 
                             goto ldv_56099; else 
#line 1105 
                                                  goto ldv_56101;
  ldv_56101: 
#line 1106 
  ;
  
#line 1107 
  return;
}


#line 1115  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_sriov.c"
void ixgbe_disable_tx_rx(struct ixgbe_adapter *adapter)
{
  
#line 1117 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 1120 
  ixgbe_write_reg(hw,33040U,0U);
  
#line 1121 
  ixgbe_write_reg(hw,33044U,0U);
  
#line 1123 
  ixgbe_write_reg(hw,20960U,0U);
  
#line 1124 
  ixgbe_write_reg(hw,20964U,0U);
  
#line 1125 
  return;
}


#line 1127  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_sriov.c"
void ixgbe_ping_all_vfs(struct ixgbe_adapter *adapter)
{
  u32 ping;
  int i;
  
#line 1129 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 1133 
  i = 0;
  
#line 1133 
  goto ldv_56113;
  ldv_56112: 
#line 1134 
  ;
  
#line 1134 
  ping = 256U;
  
#line 1135 
  if ((int)(adapter->vfinfo + i)->clear_to_send != 0) 
#line 1136 
                                                      ping |= 536870912U; else ;
  
#line 1137 
  ixgbe_write_mbx(hw,& ping,(unsigned short)1,(unsigned short)((int)((unsigned short)i)));
  
#line 1133 
  i += 1;
  ldv_56113: 
#line 1134 
  ;
  
#line 1133 
  if (adapter->num_vfs > (unsigned int)i) 
#line 1135 
                                          goto ldv_56112; else 
#line 1138 
                                                               goto ldv_56114;
  ldv_56114: 
#line 1139 
  ;
  
#line 1140 
  return;
}


#line 1141  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_sriov.c"
int ixgbe_ndo_set_vf_mac(struct net_device *netdev, int vf, u8 *mac)
{
  int __retres;
  int tmp_1;
  bool tmp_0;
  int tmp_2;
  int tmp_3;
  
#line 1143 
  struct ixgbe_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 1144 
  tmp_0 = is_valid_ether_addr((u8 const *)mac);
  
#line 1144 
  if (tmp_0) 
#line 1144 
             tmp_1 = 0; else 
#line 1144 
                             tmp_1 = 1;
  
#line 1144 
  if (tmp_1) {
    
#line 1145 
    __retres = -22;
    
#line 1145 
    goto return_label;
  }
  else 
    
#line 1144 
    if (adapter->num_vfs <= (unsigned int)vf) {
      
#line 1145 
      __retres = -22;
      
#line 1145 
      goto return_label;
    }
    else ;
  
#line 1146 
  (adapter->vfinfo + vf)->pf_set_mac = (_Bool)1;
  
#line 1147 
  _dev_info((struct device const *)(& (adapter->pdev)->dev),"setting MAC %pM on VF %d\n",mac,vf);
  
#line 1148 
  _dev_info((struct device const *)(& (adapter->pdev)->dev),"Reload the VF driver to make this");
  
#line 1150 
  tmp_2 = constant_test_bit(2L,(unsigned long const volatile *)(& adapter->state));
  
#line 1150 
  if (tmp_2 != 0) {
    
#line 1151 
    dev_warn((struct device const *)(& (adapter->pdev)->dev),"The VF MAC address has been set,");
    
#line 1153 
    dev_warn((struct device const *)(& (adapter->pdev)->dev),"Bring the PF device up before");
  }
  else ;
  
#line 1156 
  tmp_3 = ixgbe_set_vf_mac(adapter,vf,mac);
  
#line 1156 
  __retres = tmp_3;
  return_label: 
#line 1156 
                return __retres;
}


#line 1159  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_sriov.c"
static int ixgbe_enable_port_vlan(struct ixgbe_adapter *adapter, int vf, u16 vlan, u8 qos)
{
  int err;
  int tmp;
  
#line 1162 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 1165 
  err = ixgbe_set_vf_vlan(adapter,1,(int)vlan,(unsigned int)vf);
  
#line 1166 
  if (err != 0) 
#line 1167 
                goto out; else ;
  
#line 1169 
  ixgbe_set_vmvir(adapter,(unsigned short)((int)vlan),(unsigned short)((int)qos),(unsigned int)vf);
  
#line 1170 
  ixgbe_set_vmolr(hw,(unsigned int)vf,(_Bool)0);
  
#line 1171 
  if ((unsigned int)(adapter->vfinfo + vf)->spoofchk_enabled != 0U) 
#line 1172 
                                                                    (*(hw->mac.ops.set_vlan_anti_spoofing))(hw,(_Bool)1,vf); else ;
  
#line 1173 
  (adapter->vfinfo + vf)->vlan_count = (u16)((int)(adapter->vfinfo + vf)->vlan_count + 1);
  
#line 1176 
  if (hw->mac.type > (unsigned int)ixgbe_mac_X540) 
#line 1177 
                                                   ixgbe_write_qde(adapter,(unsigned int)vf,3U); else ;
  
#line 1180 
  (adapter->vfinfo + vf)->pf_vlan = vlan;
  
#line 1181 
  (adapter->vfinfo + vf)->pf_qos = (unsigned short)qos;
  
#line 1182 
  _dev_info((struct device const *)(& (adapter->pdev)->dev),"Setting VLAN %d, QOS 0x%x on VF %d\n",(int)vlan,(int)qos,vf);
  
#line 1184 
  tmp = constant_test_bit(2L,(unsigned long const volatile *)(& adapter->state));
  
#line 1184 
  if (tmp != 0) {
    
#line 1185 
    dev_warn((struct device const *)(& (adapter->pdev)->dev),"The VF VLAN has been set, but the PF device is not up.\n");
    
#line 1187 
    dev_warn((struct device const *)(& (adapter->pdev)->dev),"Bring the PF device up before attempting to use the VF device.\n");
  }
  else ;
  out: 
#line 1191 
  ;
  
#line 1192 
  return err;
}


#line 1195  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_sriov.c"
static int ixgbe_disable_port_vlan(struct ixgbe_adapter *adapter, int vf)
{
  int err;
  
#line 1197 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 1200 
  err = ixgbe_set_vf_vlan(adapter,0,(int)(adapter->vfinfo + vf)->pf_vlan,(unsigned int)vf);
  
#line 1202 
  ixgbe_clear_vmvir(adapter,(unsigned int)vf);
  
#line 1203 
  ixgbe_set_vmolr(hw,(unsigned int)vf,(_Bool)1);
  
#line 1204 
  (*(hw->mac.ops.set_vlan_anti_spoofing))(hw,(_Bool)0,vf);
  
#line 1205 
  if ((unsigned int)(adapter->vfinfo + vf)->vlan_count != 0U) 
#line 1206 
                                                              (adapter->vfinfo + vf)->vlan_count = (u16)((int)(adapter->vfinfo + vf)->vlan_count - 1); else ;
  
#line 1209 
  if (hw->mac.type > (unsigned int)ixgbe_mac_X540) 
#line 1210 
                                                   ixgbe_write_qde(adapter,(unsigned int)vf,1U); else ;
  
#line 1212 
  (adapter->vfinfo + vf)->pf_vlan = (unsigned short)0U;
  
#line 1213 
  (adapter->vfinfo + vf)->pf_qos = (unsigned short)0U;
  
#line 1215 
  return err;
}


#line 1218  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_sriov.c"
int ixgbe_ndo_set_vf_vlan(struct net_device *netdev, int vf, u16 vlan, u8 qos)
{
  int __retres;
  
#line 1220 
  int err = 0;
  
#line 1221 
  struct ixgbe_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 1223 
  if (adapter->num_vfs <= (unsigned int)vf || ((unsigned int)vlan > 4095U || (unsigned int)qos > 7U)) {
    
#line 1224 
    __retres = -22;
    
#line 1224 
    goto return_label;
  }
  else ;
  
#line 1225 
  if ((unsigned int)vlan != 0U || (unsigned int)qos != 0U) {
    
#line 1233 
    if ((unsigned int)(adapter->vfinfo + vf)->pf_vlan != 0U) 
#line 1234 
                                                             err = ixgbe_disable_port_vlan(adapter,vf); else ;
    
#line 1235 
    if (err != 0) 
#line 1236 
                  goto out; else ;
    
#line 1237 
    err = ixgbe_enable_port_vlan(adapter,vf,(unsigned short)((int)vlan),(unsigned char)((int)qos));
  }
  else 
#line 1239 
       err = ixgbe_disable_port_vlan(adapter,vf);
  out: 
#line 1242 
  ;
  
#line 1243 
  __retres = err;
  return_label: 
#line 1243 
                return __retres;
}


#line 1246  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_sriov.c"
static int ixgbe_link_mbps(struct ixgbe_adapter *adapter)
{
  int __retres;
  
#line 1248 
  switch (adapter->link_speed) {
    case (u32)8: 
#line 1249 
    ;
    
#line 1250 
    __retres = 100;
    
#line 1250 
    goto return_label;
    case (u32)32: 
#line 1251 
    ;
    
#line 1252 
    __retres = 1000;
    
#line 1252 
    goto return_label;
    case (u32)128: 
#line 1253 
    ;
    
#line 1254 
    __retres = 10000;
    
#line 1254 
    goto return_label;
    default: 
#line 1255 
    ;
    
#line 1256 
    __retres = 0;
    
#line 1256 
    goto return_label;
  }
  return_label: 
#line 1248 
                return __retres;
}


#line 1260  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_sriov.c"
static void ixgbe_set_vf_rate_limit(struct ixgbe_adapter *adapter, int vf)
{
  u16 queue;
  u16 queues_per_pool;
  
#line 1262 
  struct ixgbe_ring_feature *vmdq = & adapter->ring_feature[1];
  
#line 1263 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 1264 
  u32 bcnrc_val = 0U;
  
#line 1266 
  u16 tx_rate = (adapter->vfinfo + vf)->tx_rate;
  
#line 1268 
  if ((unsigned int)tx_rate != 0U) {
    
#line 1270 
    bcnrc_val = (unsigned int)adapter->vf_rate_link_speed;
    
#line 1273 
    bcnrc_val <<= 14;
    
#line 1274 
    bcnrc_val /= (unsigned int)tx_rate;
    
#line 1277 
    bcnrc_val &= 268435455U;
    
#line 1281 
    bcnrc_val |= 2147483648U;
  }
  else ;
  
#line 1289 
  switch ((unsigned int)hw->mac.type) {
    case (unsigned int)2: 
#line 1290 
    ;
    
#line 1291 
    ixgbe_write_reg(hw,18816U,4U);
    
#line 1292 
    goto ldv_56163;
    case (unsigned int)3: 
#line 1293 
    ;
    
#line 1294 
    ixgbe_write_reg(hw,18816U,20U);
    
#line 1295 
    goto ldv_56163;
    default: 
#line 1296 
    ;
    
#line 1297 
    goto ldv_56163;
  }
  ldv_56163: 
#line 1301 
  ;
  
#line 1301 
  queues_per_pool = (unsigned short)(- ((int)vmdq->mask) & (int)vmdq->mask);
  
#line 1304 
  queue = (unsigned short)0U;
  
#line 1304 
  goto ldv_56168;
  ldv_56167: 
#line 1305 
  ;
  {
    
#line 1305 
    unsigned int reg_idx = (unsigned int)((int)queues_per_pool * vf + (int)queue);
    
#line 1307 
    ixgbe_write_reg(hw,18692U,reg_idx);
    
#line 1308 
    ixgbe_write_reg(hw,18820U,bcnrc_val);
  }
  
#line 1304 
  queue = (u16)((int)queue + 1);
  ldv_56168: 
#line 1305 
  ;
  
#line 1304 
  if ((int)queue < (int)queues_per_pool) 
#line 1306 
                                         goto ldv_56167; else 
#line 1309 
                                                              goto ldv_56169;
  ldv_56169: 
#line 1310 
  ;
  
#line 1311 
  return;
}


#line 1312  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_sriov.c"
void ixgbe_check_vf_rate_limit(struct ixgbe_adapter *adapter)
{
  int i;
  int tmp;
  
#line 1317 
  if (adapter->vf_rate_link_speed == 0) 
#line 1318 
                                        goto return_label; else ;
  
#line 1320 
  tmp = ixgbe_link_mbps(adapter);
  
#line 1320 
  ;
  
#line 1320 
  if (tmp != adapter->vf_rate_link_speed) {
    
#line 1321 
    adapter->vf_rate_link_speed = 0;
    
#line 1322 
    _dev_info((struct device const *)(& (adapter->pdev)->dev),"Link speed has been changed. VF Transmit rate is disabled\n");
  }
  else ;
  
#line 1326 
  i = 0;
  
#line 1326 
  goto ldv_56175;
  ldv_56174: 
#line 1327 
  ;
  
#line 1327 
  if (adapter->vf_rate_link_speed == 0) 
#line 1328 
                                        (adapter->vfinfo + i)->tx_rate = (unsigned short)0U; else ;
  
#line 1330 
  ixgbe_set_vf_rate_limit(adapter,i);
  
#line 1326 
  i += 1;
  ldv_56175: 
#line 1327 
  ;
  
#line 1326 
  if (adapter->num_vfs > (unsigned int)i) 
#line 1328 
                                          goto ldv_56174; else 
#line 1331 
                                                               goto ldv_56176;
  ldv_56176: 
#line 1332 
  ;
  return_label: 
#line 1333 
                return;
}


#line 1334  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_sriov.c"
int ixgbe_ndo_set_vf_bw(struct net_device *netdev, int vf, int min_tx_rate, int max_tx_rate)
{
  int __retres;
  int link_speed;
  
#line 1337 
  struct ixgbe_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 1341 
  if (adapter->num_vfs <= (unsigned int)vf) {
    
#line 1342 
    __retres = -22;
    
#line 1342 
    goto return_label;
  }
  else ;
  
#line 1345 
  if (! adapter->link_up) {
    
#line 1346 
    __retres = -22;
    
#line 1346 
    goto return_label;
  }
  else ;
  
#line 1349 
  link_speed = ixgbe_link_mbps(adapter);
  
#line 1350 
  if (link_speed != 10000) {
    
#line 1351 
    __retres = -22;
    
#line 1351 
    goto return_label;
  }
  else ;
  
#line 1353 
  if (min_tx_rate != 0) {
    
#line 1354 
    __retres = -22;
    
#line 1354 
    goto return_label;
  }
  else ;
  
#line 1357 
  if (max_tx_rate != 0 && (max_tx_rate <= 10 || max_tx_rate > link_speed)) {
    
#line 1358 
    __retres = -22;
    
#line 1358 
    goto return_label;
  }
  else ;
  
#line 1361 
  adapter->vf_rate_link_speed = link_speed;
  
#line 1362 
  (adapter->vfinfo + vf)->tx_rate = (unsigned short)max_tx_rate;
  
#line 1365 
  ixgbe_set_vf_rate_limit(adapter,vf);
  
#line 1367 
  __retres = 0;
  return_label: 
#line 1367 
                return __retres;
}


#line 1370  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_sriov.c"
int ixgbe_ndo_set_vf_spoofchk(struct net_device *netdev, int vf, bool setting)
{
  int __retres;
  u32 regval;
  
#line 1372 
  struct ixgbe_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 1373 
  int vf_target_reg = vf >> 3;
  
#line 1374 
  int vf_target_shift = vf % 8;
  
#line 1375 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 1378 
  if (adapter->num_vfs <= (unsigned int)vf) {
    
#line 1379 
    __retres = -22;
    
#line 1379 
    goto return_label;
  }
  else ;
  
#line 1381 
  (adapter->vfinfo + vf)->spoofchk_enabled = (unsigned char)setting;
  
#line 1383 
  regval = ixgbe_read_reg(hw,(unsigned int)((vf_target_reg + 8320) * 4));
  
#line 1384 
  regval = (unsigned int)(~ (1 << vf_target_shift)) & regval;
  
#line 1385 
  regval = (unsigned int)((int)setting << vf_target_shift) | regval;
  
#line 1386 
  ixgbe_write_reg(hw,(unsigned int)((vf_target_reg + 8320) * 4),regval);
  
#line 1388 
  if ((unsigned int)(adapter->vfinfo + vf)->vlan_count != 0U) {
    
#line 1389 
    vf_target_shift += 8;
    
#line 1390 
    regval = ixgbe_read_reg(hw,(unsigned int)((vf_target_reg + 8320) * 4));
    
#line 1391 
    regval = (unsigned int)(~ (1 << vf_target_shift)) & regval;
    
#line 1392 
    regval = (unsigned int)((int)setting << vf_target_shift) | regval;
    
#line 1393 
    ixgbe_write_reg(hw,(unsigned int)((vf_target_reg + 8320) * 4),regval);
  }
  else ;
  
#line 1396 
  __retres = 0;
  return_label: 
#line 1396 
                return __retres;
}


#line 1399  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_sriov.c"
int ixgbe_ndo_set_vf_rss_query_en(struct net_device *netdev, int vf, bool setting)
{
  int __retres;
  
#line 1402 
  struct ixgbe_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 1407 
  if ((unsigned int)adapter->hw.mac.type + 4294967294U > 1U) {
    
#line 1409 
    __retres = -95;
    
#line 1409 
    goto return_label;
  }
  else ;
  
#line 1411 
  if (adapter->num_vfs <= (unsigned int)vf) {
    
#line 1412 
    __retres = -22;
    
#line 1412 
    goto return_label;
  }
  else ;
  
#line 1414 
  (adapter->vfinfo + vf)->rss_query_enabled = setting;
  
#line 1416 
  __retres = 0;
  return_label: 
#line 1416 
                return __retres;
}


#line 1419  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_sriov.c"
int ixgbe_ndo_get_vf_config(struct net_device *netdev, int vf, struct ifla_vf_info *ivi)
{
  int __retres;
  
#line 1422 
  struct ixgbe_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 1423 
  if (adapter->num_vfs <= (unsigned int)vf) {
    
#line 1424 
    __retres = -22;
    
#line 1424 
    goto return_label;
  }
  else ;
  
#line 1425 
  ivi->vf = (unsigned int)vf;
  
#line 1426 
  memcpy((void *)(& ivi->mac),(void const *)(& (adapter->vfinfo + vf)->vf_mac_addresses),6UL);
  
#line 1427 
  ivi->max_tx_rate = (unsigned int)(adapter->vfinfo + vf)->tx_rate;
  
#line 1428 
  ivi->min_tx_rate = 0U;
  
#line 1429 
  ivi->vlan = (unsigned int)(adapter->vfinfo + vf)->pf_vlan;
  
#line 1430 
  ivi->qos = (unsigned int)(adapter->vfinfo + vf)->pf_qos;
  
#line 1431 
  ivi->spoofchk = (unsigned int)(adapter->vfinfo + vf)->spoofchk_enabled;
  
#line 1432 
  ivi->rss_query_en = (unsigned int)(adapter->vfinfo + vf)->rss_query_enabled;
  
#line 1433 
  __retres = 0;
  return_label: 
#line 1433 
                return __retres;
}


#line 486  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_sriov.c.aux"
static void *kcalloc_1(size_t n, size_t size, gfp_t flags)
{
  void *tmp;
  
#line 489 
  tmp = ldv_kcalloc(n,size,flags);
  
#line 489 
  return tmp;
}


#line 418  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/slab.h"
static void *kmalloc_0(size_t size, gfp_t flags);


#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dcbnl.h"
u8 dcb_getapp(struct net_device *, struct dcb_app *);


#line 33 
int dcb_ieee_setapp(struct net_device *, struct dcb_app *);


#line 34 
int dcb_ieee_delapp(struct net_device *, struct dcb_app *);


#line 48  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_dcb_nl.c"
static int ixgbe_copy_dcb_cfg(struct ixgbe_adapter *adapter, int tc_max)
{
  int i;
  int j;
  
#line 50 
  struct ixgbe_dcb_config *scfg = & adapter->temp_dcb_cfg;
  
#line 51 
  struct ixgbe_dcb_config *dcfg = & adapter->dcb_cfg;
  
#line 52 
  struct tc_configuration *src = (struct tc_configuration *)0;
  
#line 53 
  struct tc_configuration *dst = (struct tc_configuration *)0;
  
#line 55 
  int tx = 0;
  
#line 56 
  int rx = 1;
  
#line 57 
  int changes = 0;
  
#line 59 
  struct dcb_app app = {.selector = (unsigned char)0U, .priority = (unsigned char)0, .protocol = (unsigned short)35078U};
  
#line 63 
  u8 up_0 = dcb_getapp(adapter->netdev,& app);
  
#line 65 
  if ((unsigned int)up_0 != 0U && (((int)up_0 >> (int)adapter->fcoe.up) & 1) == 0) 
    
#line 66 
    changes |= 16; else ;
  
#line 69 
  i = 1;
  
#line 69 
  goto ldv_54699;
  ldv_54698: 
#line 70 
  ;
  
#line 70 
  src = & scfg->tc_config[i + -1];
  
#line 71 
  dst = & dcfg->tc_config[i + -1];
  
#line 73 
  if (dst->path[tx].prio_type != src->path[tx].prio_type) {
    
#line 74 
    dst->path[tx].prio_type = src->path[tx].prio_type;
    
#line 75 
    changes |= 8;
  }
  else ;
  
#line 78 
  if ((int)dst->path[tx].bwg_id != (int)src->path[tx].bwg_id) {
    
#line 79 
    dst->path[tx].bwg_id = src->path[tx].bwg_id;
    
#line 80 
    changes |= 8;
  }
  else ;
  
#line 83 
  if ((int)dst->path[tx].bwg_percent != (int)src->path[tx].bwg_percent) {
    
#line 84 
    dst->path[tx].bwg_percent = src->path[tx].bwg_percent;
    
#line 85 
    changes |= 8;
  }
  else ;
  
#line 88 
  if ((int)dst->path[tx].up_to_tc_bitmap != (int)src->path[tx].up_to_tc_bitmap) {
    
#line 90 
    dst->path[tx].up_to_tc_bitmap = src->path[tx].up_to_tc_bitmap;
    
#line 92 
    changes |= 26;
  }
  else ;
  
#line 95 
  if (dst->path[rx].prio_type != src->path[rx].prio_type) {
    
#line 96 
    dst->path[rx].prio_type = src->path[rx].prio_type;
    
#line 97 
    changes |= 4;
  }
  else ;
  
#line 100 
  if ((int)dst->path[rx].bwg_id != (int)src->path[rx].bwg_id) {
    
#line 101 
    dst->path[rx].bwg_id = src->path[rx].bwg_id;
    
#line 102 
    changes |= 4;
  }
  else ;
  
#line 105 
  if ((int)dst->path[rx].bwg_percent != (int)src->path[rx].bwg_percent) {
    
#line 106 
    dst->path[rx].bwg_percent = src->path[rx].bwg_percent;
    
#line 107 
    changes |= 4;
  }
  else ;
  
#line 110 
  if ((int)dst->path[rx].up_to_tc_bitmap != (int)src->path[rx].up_to_tc_bitmap) {
    
#line 112 
    dst->path[rx].up_to_tc_bitmap = src->path[rx].up_to_tc_bitmap;
    
#line 114 
    changes |= 22;
  }
  else ;
  
#line 69 
  i += 1;
  ldv_54699: 
#line 70 
  ;
  
#line 69 
  if (tc_max + 1 > i) 
#line 71 
                      goto ldv_54698; else 
#line 74 
                                           goto ldv_54700;
  ldv_54700: 
#line 75 
  ;
  
#line 118 
  i = 11;
  
#line 118 
  goto ldv_54702;
  ldv_54701: 
#line 119 
  ;
  
#line 119 
  j = i + -11;
  
#line 120 
  if ((int)dcfg->bw_percentage[tx][j] != (int)scfg->bw_percentage[tx][j]) {
    
#line 121 
    dcfg->bw_percentage[tx][j] = scfg->bw_percentage[tx][j];
    
#line 122 
    changes |= 8;
  }
  else ;
  
#line 124 
  if ((int)dcfg->bw_percentage[rx][j] != (int)scfg->bw_percentage[rx][j]) {
    
#line 125 
    dcfg->bw_percentage[rx][j] = scfg->bw_percentage[rx][j];
    
#line 126 
    changes |= 4;
  }
  else ;
  
#line 118 
  i += 1;
  ldv_54702: 
#line 119 
  ;
  
#line 118 
  if (i <= 18) 
#line 120 
               goto ldv_54701; else 
#line 123 
                                    goto ldv_54703;
  ldv_54703: 
#line 124 
  ;
  
#line 130 
  i = 1;
  
#line 130 
  goto ldv_54705;
  ldv_54704: 
#line 131 
  ;
  
#line 131 
  j = i + -1;
  
#line 132 
  if (dcfg->tc_config[j].dcb_pfc != scfg->tc_config[j].dcb_pfc) {
    
#line 133 
    dcfg->tc_config[j].dcb_pfc = scfg->tc_config[j].dcb_pfc;
    
#line 134 
    changes |= 2;
  }
  else ;
  
#line 130 
  i += 1;
  ldv_54705: 
#line 131 
  ;
  
#line 130 
  if (i <= 8) 
#line 132 
              goto ldv_54704; else 
#line 135 
                                   goto ldv_54706;
  ldv_54706: 
#line 136 
  ;
  
#line 138 
  if ((int)dcfg->pfc_mode_enable != (int)scfg->pfc_mode_enable) {
    
#line 139 
    dcfg->pfc_mode_enable = scfg->pfc_mode_enable;
    
#line 140 
    changes |= 2;
  }
  else ;
  
#line 143 
  return changes;
}


#line 146  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_dcb_nl.c"
static u8 ixgbe_dcbnl_get_state(struct net_device *netdev)
{
  u8 __retres;
  
#line 148 
  struct ixgbe_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 150 
  __retres = (unsigned char)((adapter->flags & 4096U) != 0U);
  
#line 150 
  return __retres;
}


#line 153  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_dcb_nl.c"
static u8 ixgbe_dcbnl_set_state(struct net_device *netdev, u8 state)
{
  u8 __retres;
  int tmp_1;
  unsigned int tmp_0;
  
#line 155 
  struct ixgbe_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 158 
  if (((int)adapter->dcbx_cap & 4) == 0) {
    
#line 159 
    __retres = (unsigned char)1U;
    
#line 159 
    goto return_label;
  }
  else ;
  
#line 162 
  if (((unsigned int)state != 0U) ^ ((adapter->flags & 4096U) == 0U)) {
    
#line 163 
    __retres = (unsigned char)0U;
    
#line 163 
    goto return_label;
  }
  else ;
  
#line 165 
  if ((unsigned int)state != 0U) 
#line 165 
                                 tmp_0 = (unsigned int)adapter->dcb_cfg.num_tcs.pg_tcs; else 
                                                                    
#line 165 
                                                                    tmp_0 = 0U;
  
#line 165 
  ;
  
#line 165 
  tmp_1 = ixgbe_setup_tc(netdev,(unsigned char)((int)tmp_0));
  
#line 165 
  __retres = (unsigned char)(tmp_1 != 0);
  return_label: 
#line 165 
                return __retres;
}


#line 169  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_dcb_nl.c"
static void ixgbe_dcbnl_get_perm_hw_addr(struct net_device *netdev, u8 *perm_addr)
{
  int i;
  int j;
  
#line 172 
  struct ixgbe_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 175 
  memset((void *)perm_addr,255,32UL);
  
#line 177 
  i = 0;
  
#line 177 
  goto ldv_54724;
  ldv_54723: 
#line 178 
  ;
  
#line 178 
  *(perm_addr + i) = adapter->hw.mac.perm_addr[i];
  
#line 177 
  i += 1;
  ldv_54724: 
#line 178 
  ;
  
#line 177 
  if ((int)netdev->addr_len > i) 
#line 179 
                                 goto ldv_54723; else 
#line 182 
                                                      goto ldv_54725;
  ldv_54725: 
#line 183 
  ;
  
#line 180 
  switch ((unsigned int)adapter->hw.mac.type) {
    case (unsigned int)2: 
#line 181 
    ;
    case (unsigned int)3: 
#line 182 
    ;
    case (unsigned int)4: 
#line 183 
    ;
    
#line 184 
    j = 0;
    
#line 184 
    goto ldv_54730;
    ldv_54729: 
#line 185 
    ;
    
#line 185 
    *(perm_addr + i) = adapter->hw.mac.san_addr[j];
    
#line 184 
    j += 1;
    
#line 184 
    i += 1;
    ldv_54730: 
#line 185 
    ;
    
#line 184 
    if ((int)netdev->addr_len > j) 
#line 186 
                                   goto ldv_54729; else 
#line 189 
                                                        goto ldv_54731;
    ldv_54731: 
#line 190 
    ;
    
#line 186 
    goto ldv_54732;
    default: 
#line 187 
    ;
    
#line 188 
    goto ldv_54732;
  }
  ldv_54732: 
#line 190 
  ;
  
#line 191 
  return;
}


#line 192  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_dcb_nl.c"
static void ixgbe_dcbnl_set_pg_tc_cfg_tx(struct net_device *netdev, int tc, u8 prio, u8 bwg_id, u8 bw_pct, u8 up_map)
{
  
#line 196 
  struct ixgbe_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 198 
  if ((unsigned int)prio != 255U) 
#line 199 
                                  adapter->temp_dcb_cfg.tc_config[tc].path[0].prio_type = (enum strict_prio_type)prio; else ;
  
#line 200 
  if ((unsigned int)bwg_id != 255U) 
#line 201 
                                    adapter->temp_dcb_cfg.tc_config[tc].path[0].bwg_id = bwg_id; else ;
  
#line 202 
  if ((unsigned int)bw_pct != 255U) 
#line 203 
                                    adapter->temp_dcb_cfg.tc_config[tc].path[0].bwg_percent = bw_pct; else ;
  
#line 205 
  if ((unsigned int)up_map != 255U) 
#line 206 
                                    adapter->temp_dcb_cfg.tc_config[tc].path[0].up_to_tc_bitmap = up_map; else ;
  
#line 207 
  return;
}


#line 210  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_dcb_nl.c"
static void ixgbe_dcbnl_set_pg_bwg_cfg_tx(struct net_device *netdev, int bwg_id, u8 bw_pct)
{
  
#line 213 
  struct ixgbe_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 215 
  adapter->temp_dcb_cfg.bw_percentage[0][bwg_id] = bw_pct;
  
#line 216 
  return;
}


#line 218  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_dcb_nl.c"
static void ixgbe_dcbnl_set_pg_tc_cfg_rx(struct net_device *netdev, int tc, u8 prio, u8 bwg_id, u8 bw_pct, u8 up_map)
{
  
#line 222 
  struct ixgbe_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 224 
  if ((unsigned int)prio != 255U) 
#line 225 
                                  adapter->temp_dcb_cfg.tc_config[tc].path[1].prio_type = (enum strict_prio_type)prio; else ;
  
#line 226 
  if ((unsigned int)bwg_id != 255U) 
#line 227 
                                    adapter->temp_dcb_cfg.tc_config[tc].path[1].bwg_id = bwg_id; else ;
  
#line 228 
  if ((unsigned int)bw_pct != 255U) 
#line 229 
                                    adapter->temp_dcb_cfg.tc_config[tc].path[1].bwg_percent = bw_pct; else ;
  
#line 231 
  if ((unsigned int)up_map != 255U) 
#line 232 
                                    adapter->temp_dcb_cfg.tc_config[tc].path[1].up_to_tc_bitmap = up_map; else ;
  
#line 233 
  return;
}


#line 236  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_dcb_nl.c"
static void ixgbe_dcbnl_set_pg_bwg_cfg_rx(struct net_device *netdev, int bwg_id, u8 bw_pct)
{
  
#line 239 
  struct ixgbe_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 241 
  adapter->temp_dcb_cfg.bw_percentage[1][bwg_id] = bw_pct;
  
#line 242 
  return;
}


#line 244  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_dcb_nl.c"
static void ixgbe_dcbnl_get_pg_tc_cfg_tx(struct net_device *netdev, int tc, u8 *prio, u8 *bwg_id, u8 *bw_pct, u8 *up_map)
{
  
#line 248 
  struct ixgbe_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 250 
  *prio = (unsigned char)adapter->dcb_cfg.tc_config[tc].path[0].prio_type;
  
#line 251 
  *bwg_id = adapter->dcb_cfg.tc_config[tc].path[0].bwg_id;
  
#line 252 
  *bw_pct = adapter->dcb_cfg.tc_config[tc].path[0].bwg_percent;
  
#line 253 
  *up_map = adapter->dcb_cfg.tc_config[tc].path[0].up_to_tc_bitmap;
  
#line 254 
  return;
}


#line 256  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_dcb_nl.c"
static void ixgbe_dcbnl_get_pg_bwg_cfg_tx(struct net_device *netdev, int bwg_id, u8 *bw_pct)
{
  
#line 259 
  struct ixgbe_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 261 
  *bw_pct = adapter->dcb_cfg.bw_percentage[0][bwg_id];
  
#line 262 
  return;
}


#line 264  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_dcb_nl.c"
static void ixgbe_dcbnl_get_pg_tc_cfg_rx(struct net_device *netdev, int tc, u8 *prio, u8 *bwg_id, u8 *bw_pct, u8 *up_map)
{
  
#line 268 
  struct ixgbe_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 270 
  *prio = (unsigned char)adapter->dcb_cfg.tc_config[tc].path[1].prio_type;
  
#line 271 
  *bwg_id = adapter->dcb_cfg.tc_config[tc].path[1].bwg_id;
  
#line 272 
  *bw_pct = adapter->dcb_cfg.tc_config[tc].path[1].bwg_percent;
  
#line 273 
  *up_map = adapter->dcb_cfg.tc_config[tc].path[1].up_to_tc_bitmap;
  
#line 274 
  return;
}


#line 276  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_dcb_nl.c"
static void ixgbe_dcbnl_get_pg_bwg_cfg_rx(struct net_device *netdev, int bwg_id, u8 *bw_pct)
{
  
#line 279 
  struct ixgbe_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 281 
  *bw_pct = adapter->dcb_cfg.bw_percentage[1][bwg_id];
  
#line 282 
  return;
}


#line 284  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_dcb_nl.c"
static void ixgbe_dcbnl_set_pfc_cfg(struct net_device *netdev, int priority, u8 setting)
{
  
#line 287 
  struct ixgbe_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 289 
  adapter->temp_dcb_cfg.tc_config[priority].dcb_pfc = (enum dcb_pfc_type)setting;
  
#line 290 
  if (adapter->temp_dcb_cfg.tc_config[priority].dcb_pfc != adapter->dcb_cfg.tc_config[priority].dcb_pfc) 
    
#line 292 
    adapter->temp_dcb_cfg.pfc_mode_enable = (_Bool)1; else ;
  
#line 293 
  return;
}


#line 295  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_dcb_nl.c"
static void ixgbe_dcbnl_get_pfc_cfg(struct net_device *netdev, int priority, u8 *setting)
{
  
#line 298 
  struct ixgbe_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 300 
  *setting = (unsigned char)adapter->dcb_cfg.tc_config[priority].dcb_pfc;
  
#line 301 
  return;
}


#line 303  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_dcb_nl.c"
static void ixgbe_dcbnl_devreset(struct net_device *dev)
{
  int tmp_0;
  bool tmp_1;
  bool tmp_2;
  
#line 305 
  struct ixgbe_adapter *adapter = netdev_priv((struct net_device const *)dev);
  
#line 307 
  goto ldv_54811;
  ldv_54810: 
#line 308 
  ;
  
#line 308 
  usleep_range(1000UL,2000UL);
  ldv_54811: 
#line 309 
  ;
  
#line 307 
  tmp_0 = test_and_set_bit(1L,(unsigned long volatile *)(& adapter->state));
  
#line 307 
  if (tmp_0 != 0) 
#line 309 
                  goto ldv_54810; else 
#line 312 
                                       goto ldv_54812;
  ldv_54812: 
#line 313 
  ;
  
#line 310 
  tmp_1 = netif_running((struct net_device const *)dev);
  
#line 310 
  if ((int)tmp_1 != 0) 
#line 311 
                       (*((dev->netdev_ops)->ndo_stop))(dev); else ;
  
#line 313 
  ixgbe_clear_interrupt_scheme(adapter);
  
#line 314 
  ixgbe_init_interrupt_scheme(adapter);
  
#line 316 
  tmp_2 = netif_running((struct net_device const *)dev);
  
#line 316 
  if ((int)tmp_2 != 0) 
#line 317 
                       (*((dev->netdev_ops)->ndo_open))(dev); else ;
  
#line 319 
  set_bit(1L,(unsigned long volatile *)(& adapter->state));
  
#line 320 
  return;
}


#line 322  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_dcb_nl.c"
static u8 ixgbe_dcbnl_set_all(struct net_device *netdev)
{
  u8 __retres;
  int i;
  int tmp_0;
  
#line 324 
  struct ixgbe_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 325 
  struct ixgbe_dcb_config *dcb_cfg = & adapter->dcb_cfg;
  
#line 326 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 327 
  int ret = 1;
  
#line 331 
  if (((int)adapter->dcbx_cap & 4) == 0) {
    
#line 332 
    __retres = (unsigned char)1U;
    
#line 332 
    goto return_label;
  }
  else ;
  
#line 334 
  tmp_0 = ixgbe_copy_dcb_cfg(adapter,8);
  
#line 335 
  adapter->dcb_set_bitmap = (unsigned char)((int)adapter->dcb_set_bitmap | tmp_0);
  
#line 336 
  if ((unsigned int)adapter->dcb_set_bitmap == 0U) {
    
#line 337 
    __retres = (unsigned char)1U;
    
#line 337 
    goto return_label;
  }
  else ;
  
#line 339 
  if (((int)adapter->dcb_set_bitmap & 12) != 0) {
    u16 refill[8U];
    u16 max[8U];
    u8 bwg_id[8U];
    u8 prio_type[8U];
    u8 prio_tc[8U];
    
#line 344 
    int max_frame = (int)((adapter->netdev)->mtu + 18U);
    
#line 347 
    if (((adapter->netdev)->features & 2147483648ULL) != 0ULL) {
      int tmp_2;
      {
        int tmp_1;
        
#line 348 
        int _max1 = max_frame;
        
#line 348 
        int _max2 = 3072;
        
#line 348 
        if (_max1 > _max2) 
#line 348 
                           tmp_1 = _max1; else 
#line 348 
                                               tmp_1 = _max2;
        
#line 348 
        tmp_2 = tmp_1;
      }
      
#line 348 
      max_frame = tmp_2;
    }
    else ;
    
#line 351 
    ixgbe_dcb_calculate_tc_credits(hw,dcb_cfg,max_frame,(unsigned char)0);
    
#line 353 
    ixgbe_dcb_calculate_tc_credits(hw,dcb_cfg,max_frame,(unsigned char)1);
    
#line 356 
    ixgbe_dcb_unpack_refill(dcb_cfg,0,(u16 *)(& refill));
    
#line 357 
    ixgbe_dcb_unpack_max(dcb_cfg,(u16 *)(& max));
    
#line 358 
    ixgbe_dcb_unpack_bwgid(dcb_cfg,0,(u8 *)(& bwg_id));
    
#line 359 
    ixgbe_dcb_unpack_prio(dcb_cfg,0,(u8 *)(& prio_type));
    
#line 360 
    ixgbe_dcb_unpack_map(dcb_cfg,0,(u8 *)(& prio_tc));
    
#line 362 
    ixgbe_dcb_hw_ets_config(hw,(u16 *)(& refill),(u16 *)(& max),(u8 *)(& bwg_id),(u8 *)(& prio_type),(u8 *)(& prio_tc));
    
#line 365 
    i = 0;
    
#line 365 
    goto ldv_54831;
    ldv_54830: 
#line 366 
    ;
    
#line 366 
    netdev_set_prio_tc_map(netdev,(unsigned char)((int)((unsigned char)i)),(unsigned char)((int)prio_tc[i]));
    
#line 365 
    i += 1;
    ldv_54831: 
#line 366 
    ;
    
#line 365 
    if (i <= 7) 
#line 367 
                goto ldv_54830; else 
#line 370 
                                     goto ldv_54832;
    ldv_54832: 
#line 371 
    ;
    
#line 368 
    ret = 0;
  }
  else ;
  
#line 371 
  if (((int)adapter->dcb_set_bitmap & 2) != 0) {
    
#line 372 
    if ((int)dcb_cfg->pfc_mode_enable != 0) {
      u8 pfc_en;
      u8 prio_tc_0[8U];
      
#line 376 
      ixgbe_dcb_unpack_map(dcb_cfg,0,(u8 *)(& prio_tc_0));
      
#line 377 
      ixgbe_dcb_unpack_pfc(dcb_cfg,& pfc_en);
      
#line 378 
      ixgbe_dcb_hw_pfc_config(hw,(unsigned char)((int)pfc_en),(u8 *)(& prio_tc_0));
    }
    else 
#line 380 
         (*(hw->mac.ops.fc_enable))(hw);
    
#line 383 
    ixgbe_set_rx_drop_en(adapter);
    
#line 385 
    ret = 2;
  }
  else ;
  
#line 393 
  if (((int)adapter->dcb_set_bitmap & 16) != 0) {
    int tmp_4;
    
#line 394 
    struct dcb_app app = {.selector = (unsigned char)0U, .priority = (unsigned char)0, .protocol = (unsigned short)35078U};
    
#line 398 
    u8 up_0 = dcb_getapp(netdev,& app);
    
#line 400 
    tmp_4 = ffs((int)up_0);
    
#line 400 
    adapter->fcoe.up = (unsigned char)((unsigned int)((unsigned char)tmp_4) + 255U);
    
#line 401 
    ixgbe_dcbnl_devreset(netdev);
    
#line 402 
    ret = 0;
  }
  else ;
  
#line 406 
  adapter->dcb_set_bitmap = (unsigned char)0U;
  
#line 407 
  __retres = (unsigned char)ret;
  return_label: 
#line 407 
                return __retres;
}


#line 410  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_dcb_nl.c"
static u8 ixgbe_dcbnl_getcap(struct net_device *netdev, int capid, u8 *cap)
{
  u8 __retres;
  
#line 412 
  struct ixgbe_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 414 
  switch (capid) {
    case 2: 
#line 415 
    ;
    
#line 416 
    *cap = (unsigned char)1U;
    
#line 417 
    goto ldv_54844;
    case 3: 
#line 418 
    ;
    
#line 419 
    *cap = (unsigned char)1U;
    
#line 420 
    goto ldv_54844;
    case 4: 
#line 421 
    ;
    
#line 422 
    *cap = (unsigned char)0U;
    
#line 423 
    goto ldv_54844;
    case 5: 
#line 424 
    ;
    
#line 425 
    *cap = (unsigned char)128U;
    
#line 426 
    goto ldv_54844;
    case 6: 
#line 427 
    ;
    
#line 428 
    *cap = (unsigned char)128U;
    
#line 429 
    goto ldv_54844;
    case 7: 
#line 430 
    ;
    
#line 431 
    *cap = (unsigned char)1U;
    
#line 432 
    goto ldv_54844;
    case 8: 
#line 433 
    ;
    
#line 434 
    *cap = (unsigned char)0U;
    
#line 435 
    goto ldv_54844;
    case 9: 
#line 436 
    ;
    
#line 437 
    *cap = adapter->dcbx_cap;
    
#line 438 
    goto ldv_54844;
    default: 
#line 439 
    ;
    
#line 440 
    *cap = (unsigned char)0U;
    
#line 441 
    goto ldv_54844;
  }
  ldv_54844: 
#line 444 
  ;
  
#line 444 
  __retres = (unsigned char)0U;
  
#line 444 
  return __retres;
}


#line 447  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_dcb_nl.c"
static int ixgbe_dcbnl_getnumtcs(struct net_device *netdev, int tcid, u8 *num)
{
  int __retres;
  
#line 449 
  struct ixgbe_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 451 
  if ((adapter->flags & 4096U) != 0U) {
    
#line 452 
    switch (tcid) {
      case 2: 
#line 453 
      ;
      
#line 454 
      *num = adapter->dcb_cfg.num_tcs.pg_tcs;
      
#line 455 
      goto ldv_54860;
      case 3: 
#line 456 
      ;
      
#line 457 
      *num = adapter->dcb_cfg.num_tcs.pfc_tcs;
      
#line 458 
      goto ldv_54860;
      default: 
#line 459 
      ;
      
#line 460 
      __retres = -22;
      
#line 460 
      goto return_label;
    }
    ldv_54860: 
#line 462 
    ;
  }
  else {
    
#line 463 
    __retres = -22;
    
#line 463 
    goto return_label;
  }
  
#line 466 
  __retres = 0;
  return_label: 
#line 466 
                return __retres;
}


#line 469  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_dcb_nl.c"
static int ixgbe_dcbnl_setnumtcs(struct net_device *netdev, int tcid, u8 num)
{
  int __retres;
  
#line 471 
  __retres = -22;
  
#line 471 
  return __retres;
}


#line 474  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_dcb_nl.c"
static u8 ixgbe_dcbnl_getpfcstate(struct net_device *netdev)
{
  u8 __retres;
  
#line 476 
  struct ixgbe_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 478 
  __retres = (unsigned char)adapter->dcb_cfg.pfc_mode_enable;
  
#line 478 
  return __retres;
}


#line 481  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_dcb_nl.c"
static void ixgbe_dcbnl_setpfcstate(struct net_device *netdev, u8 state)
{
  
#line 483 
  struct ixgbe_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 485 
  adapter->temp_dcb_cfg.pfc_mode_enable = (_Bool)((unsigned int)state != 0U);
  
#line 486 
  return;
}


#line 498  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_dcb_nl.c"
static int ixgbe_dcbnl_getapp(struct net_device *netdev, u8 idtype, u16 id)
{
  int __retres;
  u8 tmp_0;
  
#line 500 
  struct ixgbe_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 501 
  struct dcb_app app = {.selector = idtype, .priority = (unsigned char)0, .protocol = id};
  
#line 506 
  if (((int)adapter->dcbx_cap & 4) == 0) {
    
#line 507 
    __retres = -22;
    
#line 507 
    goto return_label;
  }
  else ;
  
#line 509 
  tmp_0 = dcb_getapp(netdev,& app);
  
#line 509 
  __retres = (int)tmp_0;
  return_label: 
#line 509 
                return __retres;
}


#line 512  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_dcb_nl.c"
static int ixgbe_dcbnl_ieee_getets(struct net_device *dev, struct ieee_ets *ets)
{
  int __retres;
  
#line 515 
  struct ixgbe_adapter *adapter = netdev_priv((struct net_device const *)dev);
  
#line 516 
  struct ieee_ets *my_ets = adapter->ixgbe_ieee_ets;
  
#line 518 
  ets->ets_cap = adapter->dcb_cfg.num_tcs.pg_tcs;
  
#line 521 
  if (my_ets == (struct ieee_ets *)0) {
    
#line 522 
    __retres = 0;
    
#line 522 
    goto return_label;
  }
  else ;
  
#line 524 
  ets->cbs = my_ets->cbs;
  
#line 525 
  memcpy((void *)(& ets->tc_tx_bw),(void const *)(& my_ets->tc_tx_bw),8UL);
  
#line 526 
  memcpy((void *)(& ets->tc_rx_bw),(void const *)(& my_ets->tc_rx_bw),8UL);
  
#line 527 
  memcpy((void *)(& ets->tc_tsa),(void const *)(& my_ets->tc_tsa),8UL);
  
#line 528 
  memcpy((void *)(& ets->prio_tc),(void const *)(& my_ets->prio_tc),8UL);
  
#line 529 
  __retres = 0;
  return_label: 
#line 529 
                return __retres;
}


#line 532  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_dcb_nl.c"
static int ixgbe_dcbnl_ieee_setets(struct net_device *dev, struct ieee_ets *ets)
{
  int __retres;
  int i;
  int err;
  int tmp_1;
  int tmp_2;
  
#line 535 
  struct ixgbe_adapter *adapter = netdev_priv((struct net_device const *)dev);
  
#line 536 
  int max_frame = (int)(dev->mtu + 18U);
  
#line 538 
  __u8 max_tc = (unsigned char)0U;
  
#line 539 
  __u8 map_chg = (unsigned char)0U;
  
#line 541 
  if (((int)adapter->dcbx_cap & 8) == 0) {
    
#line 542 
    __retres = -22;
    
#line 542 
    goto return_label;
  }
  else ;
  
#line 544 
  if (adapter->ixgbe_ieee_ets == (struct ieee_ets *)0) {
    
#line 545 
    adapter->ixgbe_ieee_ets = (struct ieee_ets *)kmalloc_0(59UL,208U);
    
#line 547 
    if (adapter->ixgbe_ieee_ets == (struct ieee_ets *)0) {
      
#line 548 
      __retres = -12;
      
#line 548 
      goto return_label;
    }
    else ;
    
#line 551 
    i = 0;
    
#line 551 
    goto ldv_54901;
    ldv_54900: 
#line 552 
    ;
    
#line 552 
    (adapter->ixgbe_ieee_ets)->prio_tc[i] = (unsigned char)8U;
    
#line 551 
    i += 1;
    ldv_54901: 
#line 552 
    ;
    
#line 551 
    if (i <= 7) 
#line 553 
                goto ldv_54900; else 
#line 556 
                                     goto ldv_54902;
    ldv_54902: 
#line 557 
    ;
    
#line 555 
    ixgbe_dcb_read_rtrup2tc(& adapter->hw,(u8 *)(& (adapter->ixgbe_ieee_ets)->prio_tc));
  }
  else ;
  
#line 559 
  i = 0;
  
#line 559 
  goto ldv_54904;
  ldv_54903: 
#line 560 
  ;
  
#line 560 
  if ((int)ets->prio_tc[i] > (int)max_tc) 
#line 561 
                                          max_tc = ets->prio_tc[i]; else ;
  
#line 562 
  if ((int)ets->prio_tc[i] != (int)(adapter->ixgbe_ieee_ets)->prio_tc[i]) 
    
#line 563 
    map_chg = (unsigned char)1U; else ;
  
#line 559 
  i += 1;
  ldv_54904: 
#line 560 
  ;
  
#line 559 
  if (i <= 7) 
#line 561 
              goto ldv_54903; else 
#line 564 
                                   goto ldv_54905;
  ldv_54905: 
#line 565 
  ;
  
#line 566 
  memcpy((void *)adapter->ixgbe_ieee_ets,(void const *)ets,59UL);
  
#line 568 
  if ((unsigned int)max_tc != 0U) 
#line 569 
                                  max_tc = (__u8)((int)max_tc + 1); else ;
  
#line 571 
  if ((int)adapter->dcb_cfg.num_tcs.pg_tcs < (int)max_tc) {
    
#line 572 
    __retres = -22;
    
#line 572 
    goto return_label;
  }
  else ;
  
#line 574 
  tmp_1 = netdev_get_num_tc(dev);
  
#line 574 
  ;
  
#line 574 
  if ((int)max_tc != tmp_1) {
    
#line 575 
    err = ixgbe_setup_tc(dev,(unsigned char)((int)max_tc));
    
#line 576 
    if (err != 0) {
      
#line 577 
      __retres = err;
      
#line 577 
      goto return_label;
    }
    else ;
  }
  else 
    
#line 578 
    if ((unsigned int)map_chg != 0U) 
#line 579 
                                     ixgbe_dcbnl_devreset(dev); else ;
  
#line 582 
  tmp_2 = ixgbe_dcb_hw_ets(& adapter->hw,ets,max_frame);
  
#line 582 
  __retres = tmp_2;
  return_label: 
#line 582 
                return __retres;
}


#line 585  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_dcb_nl.c"
static int ixgbe_dcbnl_ieee_getpfc(struct net_device *dev, struct ieee_pfc *pfc)
{
  int __retres;
  int i;
  
#line 588 
  struct ixgbe_adapter *adapter = netdev_priv((struct net_device const *)dev);
  
#line 589 
  struct ieee_pfc *my_pfc = adapter->ixgbe_ieee_pfc;
  
#line 592 
  pfc->pfc_cap = adapter->dcb_cfg.num_tcs.pfc_tcs;
  
#line 595 
  if (my_pfc == (struct ieee_pfc *)0) {
    
#line 596 
    __retres = 0;
    
#line 596 
    goto return_label;
  }
  else ;
  
#line 598 
  pfc->pfc_en = my_pfc->pfc_en;
  
#line 599 
  pfc->mbc = my_pfc->mbc;
  
#line 600 
  pfc->delay = my_pfc->delay;
  
#line 602 
  i = 0;
  
#line 602 
  goto ldv_54914;
  ldv_54913: 
#line 603 
  ;
  
#line 603 
  pfc->requests[i] = adapter->stats.pxoffrxc[i];
  
#line 604 
  pfc->indications[i] = adapter->stats.pxofftxc[i];
  
#line 602 
  i += 1;
  ldv_54914: 
#line 603 
  ;
  
#line 602 
  if (i <= 7) 
#line 604 
              goto ldv_54913; else 
#line 607 
                                   goto ldv_54915;
  ldv_54915: 
#line 608 
  ;
  
#line 607 
  __retres = 0;
  return_label: 
#line 607 
                return __retres;
}


#line 610  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_dcb_nl.c"
static int ixgbe_dcbnl_ieee_setpfc(struct net_device *dev, struct ieee_pfc *pfc)
{
  int __retres;
  u8 *prio_tc;
  int err;
  
#line 613 
  struct ixgbe_adapter *adapter = netdev_priv((struct net_device const *)dev);
  
#line 614 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 618 
  if (((int)adapter->dcbx_cap & 8) == 0) {
    
#line 619 
    __retres = -22;
    
#line 619 
    goto return_label;
  }
  else ;
  
#line 621 
  if (adapter->ixgbe_ieee_pfc == (struct ieee_pfc *)0) {
    
#line 622 
    adapter->ixgbe_ieee_pfc = (struct ieee_pfc *)kmalloc_0(136UL,208U);
    
#line 624 
    if (adapter->ixgbe_ieee_pfc == (struct ieee_pfc *)0) {
      
#line 625 
      __retres = -12;
      
#line 625 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 628 
  prio_tc = (u8 *)(& (adapter->ixgbe_ieee_ets)->prio_tc);
  
#line 629 
  memcpy((void *)adapter->ixgbe_ieee_pfc,(void const *)pfc,136UL);
  
#line 632 
  if ((unsigned int)pfc->pfc_en != 0U) 
#line 633 
                                       err = ixgbe_dcb_hw_pfc_config(hw,(unsigned char)((int)pfc->pfc_en),prio_tc); else 
                                                                    
#line 635 
                                                                    err = (*(hw->mac.ops.fc_enable))(hw);
  
#line 637 
  ixgbe_set_rx_drop_en(adapter);
  
#line 639 
  __retres = err;
  return_label: 
#line 639 
                return __retres;
}


#line 642  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_dcb_nl.c"
static int ixgbe_dcbnl_ieee_setapp(struct net_device *dev, struct dcb_app *app)
{
  int __retres;
  int err;
  
#line 645 
  struct ixgbe_adapter *adapter = netdev_priv((struct net_device const *)dev);
  
#line 648 
  if (((int)adapter->dcbx_cap & 8) == 0) {
    
#line 649 
    __retres = -22;
    
#line 649 
    goto return_label;
  }
  else ;
  
#line 651 
  err = dcb_ieee_setapp(dev,app);
  
#line 652 
  if (err != 0) {
    
#line 653 
    __retres = err;
    
#line 653 
    goto return_label;
  }
  else ;
  
#line 656 
  if ((unsigned int)app->selector == 1U && (unsigned int)app->protocol == 35078U) {
    
#line 658 
    u8 app_mask = dcb_ieee_getapp_mask(dev,app);
    
#line 660 
    if ((((int)app_mask >> (int)adapter->fcoe.up) & 1) != 0) {
      
#line 661 
      __retres = 0;
      
#line 661 
      goto return_label;
    }
    else ;
    
#line 663 
    adapter->fcoe.up = app->priority;
    
#line 664 
    ixgbe_dcbnl_devreset(dev);
  }
  else ;
  
#line 669 
  if ((unsigned int)app->selector == 1U && (unsigned int)app->protocol == 0U) {
    int vf;
    
#line 673 
    adapter->default_up = app->priority;
    
#line 675 
    vf = 0;
    
#line 675 
    goto ldv_54934;
    ldv_54933: 
#line 676 
    ;
    {
      
#line 676 
      struct vf_data_storage *vfinfo = adapter->vfinfo + vf;
      
#line 678 
      if ((unsigned int)vfinfo->pf_qos == 0U) 
#line 679 
                                              ixgbe_set_vmvir(adapter,(unsigned short)((int)vfinfo->pf_vlan),(unsigned short)((int)app->priority),(unsigned int)vf); else ;
    }
    
#line 675 
    vf += 1;
    ldv_54934: 
#line 676 
    ;
    
#line 675 
    if (adapter->num_vfs > (unsigned int)vf) 
#line 677 
                                             goto ldv_54933; else 
#line 680 
                                                                  goto ldv_54935;
    ldv_54935: 
#line 681 
    ;
  }
  else ;
  
#line 684 
  __retres = 0;
  return_label: 
#line 684 
                return __retres;
}


#line 687  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_dcb_nl.c"
static int ixgbe_dcbnl_ieee_delapp(struct net_device *dev, struct dcb_app *app)
{
  int __retres;
  int err;
  
#line 690 
  struct ixgbe_adapter *adapter = netdev_priv((struct net_device const *)dev);
  
#line 693 
  if (((int)adapter->dcbx_cap & 8) == 0) {
    
#line 694 
    __retres = -22;
    
#line 694 
    goto return_label;
  }
  else ;
  
#line 696 
  err = dcb_ieee_delapp(dev,app);
  
#line 699 
  if ((err == 0 && (unsigned int)app->selector == 1U) && (unsigned int)app->protocol == 35078U) {
    
#line 701 
    u8 app_mask = dcb_ieee_getapp_mask(dev,app);
    
#line 703 
    if ((((int)app_mask >> (int)adapter->fcoe.up) & 1) != 0) {
      
#line 704 
      __retres = 0;
      
#line 704 
      goto return_label;
    }
    else ;
    
#line 706 
    if ((unsigned int)app_mask != 0U) {
      int tmp_1;
      
#line 706 
      tmp_1 = ffs((int)app_mask);
      
#line 706 
      adapter->fcoe.up = (unsigned char)((unsigned int)((unsigned char)tmp_1) + 255U);
    }
    else 
#line 706 
         adapter->fcoe.up = (unsigned char)3U;
    
#line 708 
    ixgbe_dcbnl_devreset(dev);
  }
  else ;
  
#line 712 
  if (((unsigned int)app->selector == 1U && (unsigned int)app->protocol == 0U) && (int)adapter->default_up == (int)app->priority) {
    int vf;
    u8 tmp_2;
    int tmp_4;
    
#line 715 
    tmp_2 = dcb_ieee_getapp_mask(dev,app);
    
#line 715 
    unsigned long app_mask_0 = (unsigned long)tmp_2;
    
#line 716 
    if (app_mask_0 != 0UL) {
      unsigned long tmp_3;
      
#line 716 
      tmp_3 = find_first_bit((unsigned long const *)(& app_mask_0),8UL);
      
#line 716 
      tmp_4 = (int)tmp_3;
    }
    else 
#line 716 
         tmp_4 = 0;
    
#line 716 
    int qos = tmp_4;
    
#line 718 
    adapter->default_up = (unsigned char)qos;
    
#line 720 
    vf = 0;
    
#line 720 
    goto ldv_54948;
    ldv_54947: 
#line 721 
    ;
    {
      
#line 721 
      struct vf_data_storage *vfinfo = adapter->vfinfo + vf;
      
#line 723 
      if ((unsigned int)vfinfo->pf_qos == 0U) 
#line 724 
                                              ixgbe_set_vmvir(adapter,(unsigned short)((int)vfinfo->pf_vlan),(unsigned short)((int)((unsigned short)qos)),(unsigned int)vf); else ;
    }
    
#line 720 
    vf += 1;
    ldv_54948: 
#line 721 
    ;
    
#line 720 
    if (adapter->num_vfs > (unsigned int)vf) 
#line 722 
                                             goto ldv_54947; else 
#line 725 
                                                                  goto ldv_54949;
    ldv_54949: 
#line 726 
    ;
  }
  else ;
  
#line 729 
  __retres = err;
  return_label: 
#line 729 
                return __retres;
}


#line 732  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_dcb_nl.c"
static u8 ixgbe_dcbnl_getdcbx(struct net_device *dev)
{
  u8 __retres;
  
#line 734 
  struct ixgbe_adapter *adapter = netdev_priv((struct net_device const *)dev);
  
#line 735 
  __retres = adapter->dcbx_cap;
  
#line 735 
  return __retres;
}


#line 738  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_dcb_nl.c"
static u8 ixgbe_dcbnl_setdcbx(struct net_device *dev, u8 mode)
{
  u8 __retres;
  
#line 740 
  struct ixgbe_adapter *adapter = netdev_priv((struct net_device const *)dev);
  
#line 741 
  struct ieee_ets ets = {.willing = (unsigned char)0U, .ets_cap = (unsigned char)0, .cbs = (unsigned char)0, .tc_tx_bw = {(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0}, .tc_rx_bw = {(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0}, .tc_tsa = {(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0}, .prio_tc = {(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0}, .tc_reco_bw = {(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0}, .tc_reco_tsa = {(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0}, .reco_prio_tc = {(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0}};
  
#line 742 
  struct ieee_pfc pfc = {.pfc_cap = (unsigned char)0U, .pfc_en = (unsigned char)0, .mbc = (unsigned char)0, .delay = (unsigned short)0, .requests = {0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL}, .indications = {0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL}};
  
#line 743 
  int err = 0;
  
#line 746 
  if ((((int)mode & 2) != 0 || (((int)mode & 8) != 0 && ((int)mode & 4) != 0)) || ((int)mode & 1) == 0) {
    
#line 749 
    __retres = (unsigned char)1U;
    
#line 749 
    goto return_label;
  }
  else ;
  
#line 751 
  if ((int)adapter->dcbx_cap == (int)mode) {
    
#line 752 
    __retres = (unsigned char)0U;
    
#line 752 
    goto return_label;
  }
  else ;
  
#line 754 
  adapter->dcbx_cap = mode;
  
#line 757 
  ets.ets_cap = (unsigned char)8U;
  
#line 758 
  pfc.pfc_cap = (unsigned char)8U;
  
#line 760 
  if (((int)mode & 8) != 0) {
    
#line 761 
    ixgbe_dcbnl_ieee_setets(dev,& ets);
    
#line 762 
    ixgbe_dcbnl_ieee_setpfc(dev,& pfc);
  }
  else 
    
#line 763 
    if (((int)mode & 4) != 0) {
      
#line 764 
      u8 mask = (unsigned char)30U;
      
#line 766 
      adapter->dcb_set_bitmap = (unsigned char)((int)adapter->dcb_set_bitmap | (int)mask);
      
#line 767 
      ixgbe_dcbnl_set_all(dev);
    }
    else {
      
#line 772 
      ixgbe_dcbnl_ieee_setets(dev,& ets);
      
#line 773 
      ixgbe_dcbnl_ieee_setpfc(dev,& pfc);
      
#line 774 
      err = ixgbe_setup_tc(dev,(unsigned char)0);
    }
  
#line 777 
  __retres = (unsigned char)(err != 0);
  return_label: 
#line 777 
                return __retres;
}


#line 780  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_dcb_nl.c"
struct dcbnl_rtnl_ops const dcbnl_ops = {.ieee_getets = & ixgbe_dcbnl_ieee_getets, .ieee_setets = & ixgbe_dcbnl_ieee_setets, .ieee_getmaxrate = (int (*)(struct net_device *, struct ieee_maxrate *))0, .ieee_setmaxrate = (int (*)(struct net_device *, struct ieee_maxrate *))0, .ieee_getqcn = (int (*)(struct net_device *, struct ieee_qcn *))0, .ieee_setqcn = (int (*)(struct net_device *, struct ieee_qcn *))0, .ieee_getqcnstats = (int (*)(struct net_device *, struct ieee_qcn_stats *))0, .ieee_getpfc = & ixgbe_dcbnl_ieee_getpfc, .ieee_setpfc = & ixgbe_dcbnl_ieee_setpfc, .ieee_getapp = (int (*)(struct net_device *, struct dcb_app *))0, .ieee_setapp = & ixgbe_dcbnl_ieee_setapp, .ieee_delapp = & ixgbe_dcbnl_ieee_delapp, .ieee_peer_getets = (int (*)(struct net_device *, struct ieee_ets *))0, .ieee_peer_getpfc = (int (*)(struct net_device *, struct ieee_pfc *))0, .getstate = & ixgbe_dcbnl_get_state, .setstate = & ixgbe_dcbnl_set_state, .getpermhwaddr = & ixgbe_dcbnl_get_perm_hw_addr, .setpgtccfgtx = & ixgbe_dcbnl_set_pg_tc_cfg_tx, .setpgbwgcfgtx = & ixgbe_dcbnl_set_pg_bwg_cfg_tx, .setpgtccfgrx = & ixgbe_dcbnl_set_pg_tc_cfg_rx, .setpgbwgcfgrx = & ixgbe_dcbnl_set_pg_bwg_cfg_rx, .getpgtccfgtx = & ixgbe_dcbnl_get_pg_tc_cfg_tx, .getpgbwgcfgtx = & ixgbe_dcbnl_get_pg_bwg_cfg_tx, .getpgtccfgrx = & ixgbe_dcbnl_get_pg_tc_cfg_rx, .getpgbwgcfgrx = & ixgbe_dcbnl_get_pg_bwg_cfg_rx, .setpfccfg = & ixgbe_dcbnl_set_pfc_cfg, .getpfccfg = & ixgbe_dcbnl_get_pfc_cfg, .setall = & ixgbe_dcbnl_set_all, .getcap = & ixgbe_dcbnl_getcap, .getnumtcs = & ixgbe_dcbnl_getnumtcs, .setnumtcs = & ixgbe_dcbnl_setnumtcs, .getpfcstate = & ixgbe_dcbnl_getpfcstate, .setpfcstate = & ixgbe_dcbnl_setpfcstate, .getbcncfg = (void (*)(struct net_device *, int , u32 *))0, .setbcncfg = (void (*)(struct net_device *, int , u32 ))0, .getbcnrp = (void (*)(struct net_device *, int , u8 *))0, .setbcnrp = (void (*)(struct net_device *, int , u8 ))0, .setapp = (int (*)(struct net_device *, u8 , u16 , u8 ))0, .getapp = & ixgbe_dcbnl_getapp, .getfeatcfg = (u8 (*)(struct net_device *, int , u8 *))0, .setfeatcfg = (u8 (*)(struct net_device *, int , u8 ))0, .getdcbx = & ixgbe_dcbnl_getdcbx, .setdcbx = & ixgbe_dcbnl_setdcbx, .peer_getappinfo = (int (*)(struct net_device *, struct dcb_peer_app_info *, u16 *))0, .peer_getapptable = (int (*)(struct net_device *, struct dcb_app *))0, .cee_peer_getpg = (int (*)(struct net_device *, struct cee_pg *))0, .cee_peer_getpfc = (int (*)(struct net_device *, struct cee_pfc *))0};

#line 472  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_dcb_nl.c.aux"
static void *kmalloc_0(size_t size, gfp_t flags)
{
  void *tmp;
  
#line 475 
  tmp = ldv_kmalloc(size,flags);
  
#line 475 
  return tmp;
}


#line 64  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mdio.h"
int mdio45_probe(struct mdio_if_info *, int);


#line 36  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_phy.c"
static void ixgbe_i2c_start(struct ixgbe_hw *hw);


#line 37 
static void ixgbe_i2c_stop(struct ixgbe_hw *hw);


#line 38 
static s32 ixgbe_clock_in_i2c_byte(struct ixgbe_hw *hw, u8 *data);


#line 39 
static s32 ixgbe_clock_out_i2c_byte(struct ixgbe_hw *hw, u8 data);


#line 40 
static s32 ixgbe_get_i2c_ack(struct ixgbe_hw *hw);


#line 41 
static s32 ixgbe_clock_in_i2c_bit(struct ixgbe_hw *hw, bool *data);


#line 42 
static s32 ixgbe_clock_out_i2c_bit(struct ixgbe_hw *hw, bool data);


#line 43 
static void ixgbe_raise_i2c_clk(struct ixgbe_hw *hw, u32 *i2cctl);


#line 44 
static void ixgbe_lower_i2c_clk(struct ixgbe_hw *hw, u32 *i2cctl);


#line 45 
static s32 ixgbe_set_i2c_data(struct ixgbe_hw *hw, u32 *i2cctl, bool data);


#line 46 
static bool ixgbe_get_i2c_data(struct ixgbe_hw *hw, u32 *i2cctl);


#line 47 
static void ixgbe_i2c_bus_clear(struct ixgbe_hw *hw);


#line 48 
static enum ixgbe_phy_type ixgbe_get_phy_type_from_id(u32 phy_id);


#line 49 
static s32 ixgbe_get_phy_id(struct ixgbe_hw *hw);


#line 50 
static s32 ixgbe_identify_qsfp_module_generic(struct ixgbe_hw *hw);


#line 59  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_phy.c"
static s32 ixgbe_out_i2c_byte_ack(struct ixgbe_hw *hw, u8 byte)
{
  s32 __retres;
  s32 status;
  s32 tmp;
  
#line 63 
  status = ixgbe_clock_out_i2c_byte(hw,(unsigned char)((int)byte));
  
#line 64 
  if (status != 0) {
    
#line 65 
    __retres = status;
    
#line 65 
    goto return_label;
  }
  else ;
  
#line 66 
  tmp = ixgbe_get_i2c_ack(hw);
  
#line 66 
  __retres = tmp;
  return_label: 
#line 66 
                return __retres;
}


#line 76  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_phy.c"
static s32 ixgbe_in_i2c_byte_ack(struct ixgbe_hw *hw, u8 *byte)
{
  s32 __retres;
  s32 status;
  s32 tmp;
  
#line 80 
  status = ixgbe_clock_in_i2c_byte(hw,byte);
  
#line 81 
  if (status != 0) {
    
#line 82 
    __retres = status;
    
#line 82 
    goto return_label;
  }
  else ;
  
#line 84 
  tmp = ixgbe_clock_out_i2c_bit(hw,(_Bool)0);
  
#line 84 
  __retres = tmp;
  return_label: 
#line 84 
                return __retres;
}


#line 94  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_phy.c"
static u8 ixgbe_ones_comp_byte_add(u8 add1, u8 add2)
{
  u8 __retres;
  
#line 96 
  u16 sum = (unsigned short)((int)((unsigned short)add1) + (int)((unsigned short)add2));
  
#line 98 
  sum = (unsigned short)(((unsigned int)sum & 255U) + (unsigned int)((unsigned short)((int)sum >> 8)));
  
#line 99 
  __retres = (unsigned char)sum;
  
#line 99 
  return __retres;
}


#line 111  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_phy.c"
s32 ixgbe_read_i2c_combined_generic(struct ixgbe_hw *hw, u8 addr, u16 reg, u16 *val)
{
  s32 __retres;
  u8 csum_byte;
  u8 high_bits;
  u8 low_bits;
  u8 reg_high;
  u8 csum;
  s32 tmp;
  s32 tmp_0;
  s32 tmp_1;
  s32 tmp_2;
  s32 tmp_3;
  s32 tmp_4;
  s32 tmp_5;
  s32 tmp_6;
  s32 tmp_7;
  s32 tmp_8;
  
#line 114 
  u32 swfw_mask = hw->phy.phy_semaphore_mask;
  
#line 115 
  int max_retry = 10;
  
#line 116 
  int retry = 0;
  
#line 123 
  reg_high = (unsigned char)(((int)reg >> 7) | 1);
  
#line 124 
  csum = ixgbe_ones_comp_byte_add((unsigned char)((int)reg_high),(unsigned char)((int)((unsigned char)reg)));
  
#line 125 
  csum = (unsigned char)(~ ((int)csum));
  ldv_54737: 
#line 126 
  ;
  
#line 127 
  tmp = (*(hw->mac.ops.acquire_swfw_sync))(hw,swfw_mask);
  
#line 127 
  if (tmp != 0) {
    
#line 128 
    __retres = -16;
    
#line 128 
    goto return_label;
  }
  else ;
  
#line 129 
  ixgbe_i2c_start(hw);
  
#line 131 
  tmp_0 = ixgbe_out_i2c_byte_ack(hw,(unsigned char)((int)addr));
  
#line 131 
  if (tmp_0 != 0) 
#line 132 
                  goto fail; else ;
  
#line 134 
  tmp_1 = ixgbe_out_i2c_byte_ack(hw,(unsigned char)((int)reg_high));
  
#line 134 
  if (tmp_1 != 0) 
#line 135 
                  goto fail; else ;
  
#line 137 
  tmp_2 = ixgbe_out_i2c_byte_ack(hw,(unsigned char)((int)((unsigned char)reg)));
  
#line 137 
  if (tmp_2 != 0) 
#line 138 
                  goto fail; else ;
  
#line 140 
  tmp_3 = ixgbe_out_i2c_byte_ack(hw,(unsigned char)((int)csum));
  
#line 140 
  if (tmp_3 != 0) 
#line 141 
                  goto fail; else ;
  
#line 143 
  ixgbe_i2c_start(hw);
  
#line 145 
  tmp_4 = ixgbe_out_i2c_byte_ack(hw,(unsigned char)((int)((unsigned int)addr | 1U)));
  
#line 145 
  if (tmp_4 != 0) 
#line 146 
                  goto fail; else ;
  
#line 148 
  tmp_5 = ixgbe_in_i2c_byte_ack(hw,& high_bits);
  
#line 148 
  if (tmp_5 != 0) 
#line 149 
                  goto fail; else ;
  
#line 151 
  tmp_6 = ixgbe_in_i2c_byte_ack(hw,& low_bits);
  
#line 151 
  if (tmp_6 != 0) 
#line 152 
                  goto fail; else ;
  
#line 154 
  tmp_7 = ixgbe_clock_in_i2c_byte(hw,& csum_byte);
  
#line 154 
  if (tmp_7 != 0) 
#line 155 
                  goto fail; else ;
  
#line 157 
  tmp_8 = ixgbe_clock_out_i2c_bit(hw,(_Bool)0);
  
#line 157 
  if (tmp_8 != 0) 
#line 158 
                  goto fail; else ;
  
#line 159 
  ixgbe_i2c_stop(hw);
  
#line 160 
  (*(hw->mac.ops.release_swfw_sync))(hw,swfw_mask);
  
#line 161 
  *val = (unsigned short)(((int)high_bits << 8) | (int)low_bits);
  
#line 162 
  __retres = 0;
  
#line 162 
  goto return_label;
  fail: 
#line 164 
  ;
  
#line 165 
  ixgbe_i2c_bus_clear(hw);
  
#line 166 
  (*(hw->mac.ops.release_swfw_sync))(hw,swfw_mask);
  
#line 167 
  retry += 1;
  
#line 168 
  if (retry < max_retry) {
    
#line 169 
    struct _ddebug descriptor = {.modname = "ixgbe", .function = "ixgbe_read_i2c_combined_generic", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_phy.c", .format = "I2C byte read combined error - Retry.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))169U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 169 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 169 
                                                        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"I2C byte read combined error - Retry.\n"); else ;
  }
  else {
    
#line 171 
    struct _ddebug descriptor_0 = {.modname = "ixgbe", .function = "ixgbe_read_i2c_combined_generic", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_phy.c", .format = "I2C byte read combined error.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))171U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 171 
    if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 171 
                                                          __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"I2C byte read combined error.\n"); else ;
  }
  
#line 172 
  if (retry < max_retry) 
#line 174 
                         goto ldv_54737; else 
#line 177 
                                              goto ldv_54738;
  ldv_54738: 
#line 178 
  ;
  
#line 174 
  __retres = -18;
  return_label: 
#line 174 
                return __retres;
}


#line 186  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_phy.c"
s32 ixgbe_write_i2c_combined_generic(struct ixgbe_hw *hw, u8 addr, u16 reg, u16 val)
{
  s32 __retres;
  u8 reg_high;
  u8 csum;
  s32 tmp;
  s32 tmp_0;
  s32 tmp_1;
  s32 tmp_2;
  s32 tmp_3;
  s32 tmp_4;
  
#line 189 
  int max_retry = 1;
  
#line 190 
  int retry = 0;
  
#line 194 
  reg_high = (unsigned char)((unsigned int)((unsigned char)((int)reg >> 7)) & 254U);
  
#line 195 
  csum = ixgbe_ones_comp_byte_add((unsigned char)((int)reg_high),(unsigned char)((int)((unsigned char)reg)));
  
#line 196 
  csum = ixgbe_ones_comp_byte_add((unsigned char)((int)csum),(unsigned char)((int)((unsigned char)((int)val >> 8))));
  
#line 197 
  csum = ixgbe_ones_comp_byte_add((unsigned char)((int)csum),(unsigned char)((int)((unsigned char)val)));
  
#line 198 
  csum = (unsigned char)(~ ((int)csum));
  ldv_54753: 
#line 199 
  ;
  
#line 200 
  ixgbe_i2c_start(hw);
  
#line 202 
  tmp = ixgbe_out_i2c_byte_ack(hw,(unsigned char)((int)addr));
  
#line 202 
  if (tmp != 0) 
#line 203 
                goto fail; else ;
  
#line 205 
  tmp_0 = ixgbe_out_i2c_byte_ack(hw,(unsigned char)((int)reg_high));
  
#line 205 
  if (tmp_0 != 0) 
#line 206 
                  goto fail; else ;
  
#line 208 
  tmp_1 = ixgbe_out_i2c_byte_ack(hw,(unsigned char)((int)((unsigned char)reg)));
  
#line 208 
  if (tmp_1 != 0) 
#line 209 
                  goto fail; else ;
  
#line 211 
  tmp_2 = ixgbe_out_i2c_byte_ack(hw,(unsigned char)((int)((unsigned char)((int)val >> 8))));
  
#line 211 
  if (tmp_2 != 0) 
#line 212 
                  goto fail; else ;
  
#line 214 
  tmp_3 = ixgbe_out_i2c_byte_ack(hw,(unsigned char)((int)((unsigned char)val)));
  
#line 214 
  if (tmp_3 != 0) 
#line 215 
                  goto fail; else ;
  
#line 217 
  tmp_4 = ixgbe_out_i2c_byte_ack(hw,(unsigned char)((int)csum));
  
#line 217 
  if (tmp_4 != 0) 
#line 218 
                  goto fail; else ;
  
#line 219 
  ixgbe_i2c_stop(hw);
  
#line 220 
  __retres = 0;
  
#line 220 
  goto return_label;
  fail: 
#line 222 
  ;
  
#line 223 
  ixgbe_i2c_bus_clear(hw);
  
#line 224 
  retry += 1;
  
#line 225 
  if (retry < max_retry) {
    
#line 226 
    struct _ddebug descriptor = {.modname = "ixgbe", .function = "ixgbe_write_i2c_combined_generic", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_phy.c", .format = "I2C byte write combined error - Retry.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))226U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 226 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 226 
                                                        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"I2C byte write combined error - Retry.\n"); else ;
  }
  else {
    
#line 228 
    struct _ddebug descriptor_0 = {.modname = "ixgbe", .function = "ixgbe_write_i2c_combined_generic", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_phy.c", .format = "I2C byte write combined error.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))228U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 228 
    if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 228 
                                                          __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"I2C byte write combined error.\n"); else ;
  }
  
#line 229 
  if (retry < max_retry) 
#line 231 
                         goto ldv_54753; else 
#line 234 
                                              goto ldv_54754;
  ldv_54754: 
#line 235 
  ;
  
#line 231 
  __retres = -18;
  return_label: 
#line 231 
                return __retres;
}


#line 240  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_phy.c"
s32 ixgbe_identify_phy_generic(struct ixgbe_hw *hw)
{
  s32 __retres;
  u32 phy_addr;
  
#line 243 
  u16 ext_ability = (unsigned short)0U;
  
#line 245 
  if (hw->phy.phy_semaphore_mask == 0U) {
    u32 tmp;
    
#line 246 
    tmp = ixgbe_read_reg(hw,8U);
    
#line 246 
    hw->phy.lan_id = (unsigned char)((unsigned int)((unsigned char)tmp) & 4U);
    
#line 248 
    if ((unsigned int)hw->phy.lan_id != 0U) 
#line 249 
                                            hw->phy.phy_semaphore_mask = 4U; else 
                                                                    
#line 251 
                                                                    hw->phy.phy_semaphore_mask = 2U;
  }
  else ;
  
#line 254 
  if (hw->phy.type == (unsigned int)ixgbe_phy_unknown) {
    int tmp_0;
    
#line 255 
    phy_addr = 0U;
    
#line 255 
    goto ldv_54761;
    ldv_54760: 
#line 256 
    ;
    
#line 256 
    hw->phy.mdio.prtad = (int)phy_addr;
    
#line 257 
    tmp_0 = mdio45_probe(& hw->phy.mdio,(int)phy_addr);
    
#line 257 
    if (tmp_0 == 0) {
      
#line 258 
      ixgbe_get_phy_id(hw);
      
#line 259 
      hw->phy.type = ixgbe_get_phy_type_from_id(hw->phy.id);
      
#line 262 
      if (hw->phy.type == (unsigned int)ixgbe_phy_unknown) {
        
#line 263 
        (*(hw->phy.ops.read_reg))(hw,11U,1U,& ext_ability);
        
#line 267 
        if (((int)ext_ability & 36) != 0) 
#line 270 
                                          hw->phy.type = ixgbe_phy_cu_unknown; else 
                                                                    
#line 273 
                                                                    hw->phy.type = ixgbe_phy_generic;
      }
      else ;
      
#line 277 
      __retres = 0;
      
#line 277 
      goto return_label;
    }
    else ;
    
#line 255 
    phy_addr += 1U;
    ldv_54761: 
#line 256 
    ;
    
#line 255 
    if (phy_addr <= 31U) 
#line 257 
                         goto ldv_54760; else 
#line 260 
                                              goto ldv_54762;
    ldv_54762: 
#line 261 
    ;
    
#line 281 
    hw->phy.mdio.prtad = 0;
    
#line 282 
    __retres = -17;
    
#line 282 
    goto return_label;
  }
  else ;
  
#line 284 
  __retres = 0;
  return_label: 
#line 284 
                return __retres;
}


#line 296  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_phy.c"
bool ixgbe_check_reset_blocked(struct ixgbe_hw *hw)
{
  bool __retres;
  u32 mmngc;
  
#line 301 
  if (hw->mac.type == (unsigned int)ixgbe_mac_82598EB) {
    
#line 302 
    __retres = (_Bool)0;
    
#line 302 
    goto return_label;
  }
  else ;
  
#line 304 
  mmngc = ixgbe_read_reg(hw,17104U);
  
#line 305 
  if ((mmngc & 1U) != 0U) {
    {
      
#line 306 
      struct _ddebug descriptor = {.modname = "ixgbe", .function = "ixgbe_check_reset_blocked", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_phy.c", .format = "MNG_VETO bit detected.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))306U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 306 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 306 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"MNG_VETO bit detected.\n"); else ;
    }
    
#line 307 
    __retres = (_Bool)1;
    
#line 307 
    goto return_label;
  }
  else ;
  
#line 310 
  __retres = (_Bool)0;
  return_label: 
#line 310 
                return __retres;
}


#line 318  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_phy.c"
static s32 ixgbe_get_phy_id(struct ixgbe_hw *hw)
{
  s32 status;
  
#line 321 
  u16 phy_id_high = (unsigned short)0U;
  
#line 322 
  u16 phy_id_low = (unsigned short)0U;
  
#line 324 
  status = (*(hw->phy.ops.read_reg))(hw,2U,1U,& phy_id_high);
  
#line 327 
  if (status == 0) {
    
#line 328 
    hw->phy.id = (unsigned int)((int)phy_id_high << 16);
    
#line 329 
    status = (*(hw->phy.ops.read_reg))(hw,3U,1U,& phy_id_low);
    
#line 331 
    hw->phy.id |= (unsigned int)phy_id_low & 4294967280U;
    
#line 332 
    hw->phy.revision = (unsigned int)phy_id_low & 15U;
  }
  else ;
  
#line 334 
  return status;
}


#line 342  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_phy.c"
static enum ixgbe_phy_type ixgbe_get_phy_type_from_id(u32 phy_id)
{
  enum ixgbe_phy_type phy_type;
  
#line 346 
  switch (phy_id) {
    case (u32)10589200: 
#line 347 
    ;
    
#line 348 
    phy_type = ixgbe_phy_tn;
    
#line 349 
    goto ldv_54780;
    case (u32)22282784: 
#line 350 
    ;
    case (u32)22282752: 
#line 351 
    ;
    
#line 352 
    phy_type = ixgbe_phy_aq;
    
#line 353 
    goto ldv_54780;
    case (u32)4432896: 
#line 354 
    ;
    
#line 355 
    phy_type = ixgbe_phy_qt;
    
#line 356 
    goto ldv_54780;
    case (u32)54693968: 
#line 357 
    ;
    
#line 358 
    phy_type = ixgbe_phy_nl;
    
#line 359 
    goto ldv_54780;
    case (u32)22282816: 
#line 360 
    ;
    
#line 361 
    phy_type = ixgbe_phy_x550em_ext_t;
    
#line 362 
    goto ldv_54780;
    default: 
#line 363 
    ;
    
#line 364 
    phy_type = ixgbe_phy_unknown;
    
#line 365 
    goto ldv_54780;
  }
  ldv_54780: 
#line 368 
  ;
  
#line 368 
  return phy_type;
}


#line 375  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_phy.c"
s32 ixgbe_reset_phy_generic(struct ixgbe_hw *hw)
{
  s32 __retres;
  u32 i;
  bool tmp_0;
  
#line 378 
  u16 ctrl = (unsigned short)0U;
  
#line 379 
  s32 status = 0;
  
#line 381 
  if (hw->phy.type == (unsigned int)ixgbe_phy_unknown) 
#line 382 
                                                       status = ixgbe_identify_phy_generic(hw); else ;
  
#line 384 
  if (status != 0 || hw->phy.type == (unsigned int)ixgbe_phy_none) {
    
#line 385 
    __retres = status;
    
#line 385 
    goto return_label;
  }
  else ;
  
#line 388 
  if (! hw->phy.reset_if_overtemp) {
    s32 tmp;
    
#line 388 
    tmp = (*(hw->phy.ops.check_overtemp))(hw);
    
#line 388 
    if (tmp == -26) {
      
#line 390 
      __retres = 0;
      
#line 390 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 393 
  tmp_0 = ixgbe_check_reset_blocked(hw);
  
#line 393 
  if ((int)tmp_0 != 0) {
    
#line 394 
    __retres = 0;
    
#line 394 
    goto return_label;
  }
  else ;
  
#line 400 
  (*(hw->phy.ops.write_reg))(hw,0U,4U,(unsigned short)32768);
  
#line 409 
  i = 0U;
  
#line 409 
  goto ldv_54795;
  ldv_54794: 
#line 410 
  ;
  
#line 410 
  msleep(100U);
  
#line 411 
  (*(hw->phy.ops.read_reg))(hw,0U,4U,& ctrl);
  
#line 413 
  if ((int)ctrl >= 0) {
    
#line 414 
    __const_udelay(8590UL);
    
#line 415 
    goto ldv_54793;
  }
  else ;
  
#line 409 
  i += 1U;
  ldv_54795: 
#line 410 
  ;
  
#line 409 
  if (i <= 29U) 
#line 411 
                goto ldv_54794; else 
#line 414 
                                     goto ldv_54793;
  ldv_54793: 
#line 415 
  ;
  
#line 419 
  if ((int)ctrl < 0) {
    {
      
#line 420 
      struct _ddebug descriptor = {.modname = "ixgbe", .function = "ixgbe_reset_phy_generic", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_phy.c", .format = "PHY reset polling failed to complete.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))420U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 420 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 420 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"PHY reset polling failed to complete.\n"); else ;
    }
    
#line 421 
    __retres = -15;
    
#line 421 
    goto return_label;
  }
  else ;
  
#line 424 
  __retres = 0;
  return_label: 
#line 424 
                return __retres;
}


#line 434  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_phy.c"
s32 ixgbe_read_phy_reg_mdi(struct ixgbe_hw *hw, u32 reg_addr, u32 device_type, u16 *phy_data)
{
  s32 __retres;
  u32 i;
  u32 data;
  u32 command;
  
#line 440 
  command = (((device_type << 16) | reg_addr) | (unsigned int)(hw->phy.mdio.prtad << 21)) | 1073741824U;
  
#line 445 
  ixgbe_write_reg(hw,16988U,command);
  
#line 451 
  i = 0U;
  
#line 451 
  goto ldv_54809;
  ldv_54808: 
#line 452 
  ;
  
#line 452 
  __const_udelay(42950UL);
  
#line 454 
  command = ixgbe_read_reg(hw,16988U);
  
#line 455 
  if ((command & 1073741824U) == 0U) 
#line 456 
                                     goto ldv_54807; else ;
  
#line 451 
  i += 1U;
  ldv_54809: 
#line 452 
  ;
  
#line 451 
  if (i <= 99U) 
#line 453 
                goto ldv_54808; else 
#line 456 
                                     goto ldv_54807;
  ldv_54807: 
#line 457 
  ;
  
#line 460 
  if ((command & 1073741824U) != 0U) {
    {
      
#line 461 
      struct _ddebug descriptor = {.modname = "ixgbe", .function = "ixgbe_read_phy_reg_mdi", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_phy.c", .format = "PHY address command did not complete.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))461U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 461 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 461 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"PHY address command did not complete.\n"); else ;
    }
    
#line 462 
    __retres = -3;
    
#line 462 
    goto return_label;
  }
  else ;
  
#line 468 
  command = (((device_type << 16) | reg_addr) | (unsigned int)(hw->phy.mdio.prtad << 21)) | 1275068416U;
  
#line 473 
  ixgbe_write_reg(hw,16988U,command);
  
#line 479 
  i = 0U;
  
#line 479 
  goto ldv_54814;
  ldv_54813: 
#line 480 
  ;
  
#line 480 
  __const_udelay(42950UL);
  
#line 482 
  command = ixgbe_read_reg(hw,16988U);
  
#line 483 
  if ((command & 1073741824U) == 0U) 
#line 484 
                                     goto ldv_54812; else ;
  
#line 479 
  i += 1U;
  ldv_54814: 
#line 480 
  ;
  
#line 479 
  if (i <= 99U) 
#line 481 
                goto ldv_54813; else 
#line 484 
                                     goto ldv_54812;
  ldv_54812: 
#line 485 
  ;
  
#line 487 
  if ((command & 1073741824U) != 0U) {
    {
      
#line 488 
      struct _ddebug descriptor_0 = {.modname = "ixgbe", .function = "ixgbe_read_phy_reg_mdi", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_phy.c", .format = "PHY read command didn\'t complete\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))488U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 488 
      if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 488 
                                                            __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"PHY read command didn\'t complete\n"); else ;
    }
    
#line 489 
    __retres = -3;
    
#line 489 
    goto return_label;
  }
  else ;
  
#line 495 
  data = ixgbe_read_reg(hw,16992U);
  
#line 496 
  data >>= 16;
  
#line 497 
  *phy_data = (unsigned short)data;
  
#line 499 
  __retres = 0;
  return_label: 
#line 499 
                return __retres;
}


#line 509  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_phy.c"
s32 ixgbe_read_phy_reg_generic(struct ixgbe_hw *hw, u32 reg_addr, u32 device_type, u16 *phy_data)
{
  s32 __retres;
  s32 status;
  s32 tmp;
  
#line 513 
  u32 gssr = hw->phy.phy_semaphore_mask;
  
#line 515 
  tmp = (*(hw->mac.ops.acquire_swfw_sync))(hw,gssr);
  
#line 515 
  if (tmp == 0) {
    
#line 516 
    status = ixgbe_read_phy_reg_mdi(hw,reg_addr,device_type,phy_data);
    
#line 518 
    (*(hw->mac.ops.release_swfw_sync))(hw,gssr);
  }
  else {
    
#line 520 
    __retres = -16;
    
#line 520 
    goto return_label;
  }
  
#line 523 
  __retres = status;
  return_label: 
#line 523 
                return __retres;
}


#line 534  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_phy.c"
s32 ixgbe_write_phy_reg_mdi(struct ixgbe_hw *hw, u32 reg_addr, u32 device_type, u16 phy_data)
{
  s32 __retres;
  u32 i;
  u32 command;
  
#line 540 
  ixgbe_write_reg(hw,16992U,(unsigned int)phy_data);
  
#line 543 
  command = (((device_type << 16) | reg_addr) | (unsigned int)(hw->phy.mdio.prtad << 21)) | 1073741824U;
  
#line 548 
  ixgbe_write_reg(hw,16988U,command);
  
#line 555 
  i = 0U;
  
#line 555 
  goto ldv_54834;
  ldv_54833: 
#line 556 
  ;
  
#line 556 
  __const_udelay(42950UL);
  
#line 558 
  command = ixgbe_read_reg(hw,16988U);
  
#line 559 
  if ((command & 1073741824U) == 0U) 
#line 560 
                                     goto ldv_54832; else ;
  
#line 555 
  i += 1U;
  ldv_54834: 
#line 556 
  ;
  
#line 555 
  if (i <= 99U) 
#line 557 
                goto ldv_54833; else 
#line 560 
                                     goto ldv_54832;
  ldv_54832: 
#line 561 
  ;
  
#line 563 
  if ((command & 1073741824U) != 0U) {
    {
      
#line 564 
      struct _ddebug descriptor = {.modname = "ixgbe", .function = "ixgbe_write_phy_reg_mdi", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_phy.c", .format = "PHY address cmd didn\'t complete\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))564U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 564 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 564 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"PHY address cmd didn\'t complete\n"); else ;
    }
    
#line 565 
    __retres = -3;
    
#line 565 
    goto return_label;
  }
  else ;
  
#line 572 
  command = (((device_type << 16) | reg_addr) | (unsigned int)(hw->phy.mdio.prtad << 21)) | 1140850688U;
  
#line 577 
  ixgbe_write_reg(hw,16988U,command);
  
#line 583 
  i = 0U;
  
#line 583 
  goto ldv_54839;
  ldv_54838: 
#line 584 
  ;
  
#line 584 
  __const_udelay(42950UL);
  
#line 586 
  command = ixgbe_read_reg(hw,16988U);
  
#line 587 
  if ((command & 1073741824U) == 0U) 
#line 588 
                                     goto ldv_54837; else ;
  
#line 583 
  i += 1U;
  ldv_54839: 
#line 584 
  ;
  
#line 583 
  if (i <= 99U) 
#line 585 
                goto ldv_54838; else 
#line 588 
                                     goto ldv_54837;
  ldv_54837: 
#line 589 
  ;
  
#line 591 
  if ((command & 1073741824U) != 0U) {
    {
      
#line 592 
      struct _ddebug descriptor_0 = {.modname = "ixgbe", .function = "ixgbe_write_phy_reg_mdi", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_phy.c", .format = "PHY write cmd didn\'t complete\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))592U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 592 
      if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 592 
                                                            __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"PHY write cmd didn\'t complete\n"); else ;
    }
    
#line 593 
    __retres = -3;
    
#line 593 
    goto return_label;
  }
  else ;
  
#line 596 
  __retres = 0;
  return_label: 
#line 596 
                return __retres;
}


#line 607  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_phy.c"
s32 ixgbe_write_phy_reg_generic(struct ixgbe_hw *hw, u32 reg_addr, u32 device_type, u16 phy_data)
{
  s32 __retres;
  s32 status;
  u32 gssr;
  u32 tmp;
  s32 tmp_0;
  
#line 613 
  tmp = ixgbe_read_reg(hw,8U);
  
#line 613 
  if ((tmp & 4U) != 0U) 
#line 614 
                        gssr = 4U; else 
#line 616 
                                        gssr = 2U;
  
#line 618 
  tmp_0 = (*(hw->mac.ops.acquire_swfw_sync))(hw,gssr);
  
#line 618 
  if (tmp_0 == 0) {
    
#line 619 
    status = ixgbe_write_phy_reg_mdi(hw,reg_addr,device_type,(unsigned short)((int)phy_data));
    
#line 621 
    (*(hw->mac.ops.release_swfw_sync))(hw,gssr);
  }
  else {
    
#line 623 
    __retres = -16;
    
#line 623 
    goto return_label;
  }
  
#line 626 
  __retres = status;
  return_label: 
#line 626 
                return __retres;
}


#line 635  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_phy.c"
s32 ixgbe_setup_phy_link_generic(struct ixgbe_hw *hw)
{
  s32 __retres;
  ixgbe_link_speed speed;
  bool tmp;
  
#line 637 
  s32 status = 0;
  
#line 638 
  u16 autoneg_reg = (unsigned short)0U;
  
#line 639 
  bool autoneg = (_Bool)0;
  
#line 642 
  ixgbe_get_copper_link_capabilities_generic(hw,& speed,& autoneg);
  
#line 644 
  if ((speed & 128U) != 0U) {
    
#line 646 
    (*(hw->phy.ops.read_reg))(hw,32U,7U,& autoneg_reg);
    
#line 650 
    autoneg_reg = (unsigned short)((unsigned int)autoneg_reg & 61439U);
    
#line 651 
    if ((hw->phy.autoneg_advertised & 128U) != 0U) 
#line 652 
                                                   autoneg_reg = (unsigned short)((unsigned int)autoneg_reg | 4096U); else ;
    
#line 654 
    (*(hw->phy.ops.write_reg))(hw,32U,7U,(unsigned short)((int)autoneg_reg));
  }
  else ;
  
#line 659 
  if ((speed & 32U) != 0U) {
    
#line 661 
    (*(hw->phy.ops.read_reg))(hw,50176U,7U,& autoneg_reg);
    
#line 666 
    autoneg_reg = (unsigned short)((unsigned int)autoneg_reg & 32767U);
    
#line 667 
    if ((hw->phy.autoneg_advertised & 32U) != 0U) 
#line 668 
                                                  autoneg_reg = (unsigned short)((unsigned int)autoneg_reg | 32768U); else ;
    
#line 670 
    (*(hw->phy.ops.write_reg))(hw,50176U,7U,(unsigned short)((int)autoneg_reg));
  }
  else ;
  
#line 676 
  if ((speed & 8U) != 0U) {
    
#line 678 
    (*(hw->phy.ops.read_reg))(hw,16U,7U,& autoneg_reg);
    
#line 682 
    autoneg_reg = (unsigned short)((unsigned int)autoneg_reg & 65151U);
    
#line 684 
    if ((hw->phy.autoneg_advertised & 8U) != 0U) 
#line 685 
                                                 autoneg_reg = (unsigned short)((unsigned int)autoneg_reg | 256U); else ;
    
#line 687 
    (*(hw->phy.ops.write_reg))(hw,16U,7U,(unsigned short)((int)autoneg_reg));
  }
  else ;
  
#line 693 
  tmp = ixgbe_check_reset_blocked(hw);
  
#line 693 
  if ((int)tmp != 0) {
    
#line 694 
    __retres = 0;
    
#line 694 
    goto return_label;
  }
  else ;
  
#line 697 
  (*(hw->phy.ops.read_reg))(hw,0U,7U,& autoneg_reg);
  
#line 700 
  autoneg_reg = (unsigned short)((unsigned int)autoneg_reg | 512U);
  
#line 702 
  (*(hw->phy.ops.write_reg))(hw,0U,7U,(unsigned short)((int)autoneg_reg));
  
#line 705 
  __retres = status;
  return_label: 
#line 705 
                return __retres;
}


#line 713  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_phy.c"
s32 ixgbe_setup_phy_link_speed_generic(struct ixgbe_hw *hw, ixgbe_link_speed speed, bool autoneg_wait_to_complete)
{
  s32 __retres;
  
#line 722 
  hw->phy.autoneg_advertised = 0U;
  
#line 724 
  if ((speed & 128U) != 0U) 
#line 725 
                            hw->phy.autoneg_advertised |= 128U; else ;
  
#line 727 
  if ((speed & 32U) != 0U) 
#line 728 
                           hw->phy.autoneg_advertised |= 32U; else ;
  
#line 730 
  if ((speed & 8U) != 0U) 
#line 731 
                          hw->phy.autoneg_advertised |= 8U; else ;
  
#line 734 
  (*(hw->phy.ops.setup_link))(hw);
  
#line 736 
  __retres = 0;
  
#line 736 
  return __retres;
}


#line 747  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_phy.c"
s32 ixgbe_get_copper_link_capabilities_generic(struct ixgbe_hw *hw, ixgbe_link_speed *speed, bool *autoneg)
{
  s32 status;
  u16 speed_ability;
  
#line 754 
  *speed = 0U;
  
#line 755 
  *autoneg = (_Bool)1;
  
#line 757 
  status = (*(hw->phy.ops.read_reg))(hw,4U,1U,& speed_ability);
  
#line 760 
  if (status == 0) {
    
#line 761 
    if (((int)speed_ability & 1) != 0) 
#line 762 
                                       *speed |= 128U; else ;
    
#line 763 
    if (((int)speed_ability & 16) != 0) 
#line 764 
                                        *speed |= 32U; else ;
    
#line 765 
    if (((int)speed_ability & 32) != 0) 
#line 766 
                                        *speed |= 8U; else ;
  }
  else ;
  
#line 770 
  if (hw->mac.type == (unsigned int)ixgbe_mac_X550EM_x) 
#line 771 
                                                        *speed &= 4294967287U; else ;
  
#line 773 
  return status;
}


#line 783  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_phy.c"
s32 ixgbe_check_phy_link_tnx(struct ixgbe_hw *hw, ixgbe_link_speed *speed, bool *link_up)
{
  s32 status;
  u32 time_out;
  
#line 788 
  u32 max_time_out = 10U;
  
#line 789 
  u16 phy_link = (unsigned short)0U;
  
#line 790 
  u16 phy_speed = (unsigned short)0U;
  
#line 791 
  u16 phy_data = (unsigned short)0U;
  
#line 794 
  *link_up = (_Bool)0;
  
#line 795 
  *speed = 128U;
  
#line 802 
  time_out = 0U;
  
#line 802 
  goto ldv_54881;
  ldv_54880: 
#line 803 
  ;
  
#line 803 
  __const_udelay(42950UL);
  
#line 804 
  status = (*(hw->phy.ops.read_reg))(hw,1U,30U,& phy_data);
  
#line 808 
  phy_link = (unsigned short)((unsigned int)phy_data & 8U);
  
#line 810 
  phy_speed = (unsigned short)((unsigned int)phy_data & 16U);
  
#line 812 
  if ((unsigned int)phy_link == 8U) {
    
#line 813 
    *link_up = (_Bool)1;
    
#line 814 
    if ((unsigned int)phy_speed == 16U) 
#line 816 
                                        *speed = 32U; else ;
    
#line 817 
    goto ldv_54879;
  }
  else ;
  
#line 802 
  time_out += 1U;
  ldv_54881: 
#line 803 
  ;
  
#line 802 
  if (time_out < max_time_out) 
#line 804 
                               goto ldv_54880; else 
#line 807 
                                                    goto ldv_54879;
  ldv_54879: 
#line 808 
  ;
  
#line 821 
  return status;
}


#line 833  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_phy.c"
s32 ixgbe_setup_phy_link_tnx(struct ixgbe_hw *hw)
{
  s32 __retres;
  ixgbe_link_speed speed;
  bool tmp;
  
#line 835 
  u16 autoneg_reg = (unsigned short)0U;
  
#line 836 
  bool autoneg = (_Bool)0;
  
#line 839 
  ixgbe_get_copper_link_capabilities_generic(hw,& speed,& autoneg);
  
#line 841 
  if ((speed & 128U) != 0U) {
    
#line 843 
    (*(hw->phy.ops.read_reg))(hw,32U,7U,& autoneg_reg);
    
#line 847 
    autoneg_reg = (unsigned short)((unsigned int)autoneg_reg & 61439U);
    
#line 848 
    if ((hw->phy.autoneg_advertised & 128U) != 0U) 
#line 849 
                                                   autoneg_reg = (unsigned short)((unsigned int)autoneg_reg | 4096U); else ;
    
#line 851 
    (*(hw->phy.ops.write_reg))(hw,32U,7U,(unsigned short)((int)autoneg_reg));
  }
  else ;
  
#line 856 
  if ((speed & 32U) != 0U) {
    
#line 858 
    (*(hw->phy.ops.read_reg))(hw,23U,7U,& autoneg_reg);
    
#line 862 
    autoneg_reg = (unsigned short)((unsigned int)autoneg_reg & 49151U);
    
#line 863 
    if ((hw->phy.autoneg_advertised & 32U) != 0U) 
#line 864 
                                                  autoneg_reg = (unsigned short)((unsigned int)autoneg_reg | 16384U); else ;
    
#line 866 
    (*(hw->phy.ops.write_reg))(hw,23U,7U,(unsigned short)((int)autoneg_reg));
  }
  else ;
  
#line 871 
  if ((speed & 8U) != 0U) {
    
#line 873 
    (*(hw->phy.ops.read_reg))(hw,16U,7U,& autoneg_reg);
    
#line 877 
    autoneg_reg = (unsigned short)((unsigned int)autoneg_reg & 65151U);
    
#line 879 
    if ((hw->phy.autoneg_advertised & 8U) != 0U) 
#line 880 
                                                 autoneg_reg = (unsigned short)((unsigned int)autoneg_reg | 256U); else ;
    
#line 882 
    (*(hw->phy.ops.write_reg))(hw,16U,7U,(unsigned short)((int)autoneg_reg));
  }
  else ;
  
#line 888 
  tmp = ixgbe_check_reset_blocked(hw);
  
#line 888 
  if ((int)tmp != 0) {
    
#line 889 
    __retres = 0;
    
#line 889 
    goto return_label;
  }
  else ;
  
#line 892 
  (*(hw->phy.ops.read_reg))(hw,0U,7U,& autoneg_reg);
  
#line 895 
  autoneg_reg = (unsigned short)((unsigned int)autoneg_reg | 512U);
  
#line 897 
  (*(hw->phy.ops.write_reg))(hw,0U,7U,(unsigned short)((int)autoneg_reg));
  
#line 899 
  __retres = 0;
  return_label: 
#line 899 
                return __retres;
}


#line 907  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_phy.c"
s32 ixgbe_get_phy_firmware_version_tnx(struct ixgbe_hw *hw, u16 *firmware_version)
{
  s32 status;
  
#line 912 
  status = (*(hw->phy.ops.read_reg))(hw,11U,30U,firmware_version);
  
#line 916 
  return status;
}


#line 924  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_phy.c"
s32 ixgbe_get_phy_firmware_version_generic(struct ixgbe_hw *hw, u16 *firmware_version)
{
  s32 status;
  
#line 929 
  status = (*(hw->phy.ops.read_reg))(hw,32U,30U,firmware_version);
  
#line 933 
  return status;
}


#line 940  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_phy.c"
s32 ixgbe_reset_phy_nl(struct ixgbe_hw *hw)
{
  s32 __retres;
  u16 phy_offset;
  u16 control;
  u16 eword;
  u16 edata;
  u16 block_crc;
  u16 list_offset;
  u16 data_offset;
  s32 ret_val;
  u32 i;
  bool tmp;
  
#line 943 
  bool end_data = (_Bool)0;
  
#line 945 
  u16 phy_data = (unsigned short)0U;
  
#line 950 
  tmp = ixgbe_check_reset_blocked(hw);
  
#line 950 
  if ((int)tmp != 0) {
    
#line 951 
    __retres = 0;
    
#line 951 
    goto return_label;
  }
  else ;
  
#line 953 
  (*(hw->phy.ops.read_reg))(hw,0U,4U,& phy_data);
  
#line 956 
  (*(hw->phy.ops.write_reg))(hw,0U,4U,(unsigned short)((int)((unsigned int)phy_data | 32768U)));
  
#line 959 
  i = 0U;
  
#line 959 
  goto ldv_54914;
  ldv_54913: 
#line 960 
  ;
  
#line 960 
  (*(hw->phy.ops.read_reg))(hw,0U,4U,& phy_data);
  
#line 962 
  if ((int)phy_data >= 0) 
#line 963 
                          goto ldv_54912; else ;
  
#line 964 
  usleep_range(10000UL,20000UL);
  
#line 959 
  i += 1U;
  ldv_54914: 
#line 960 
  ;
  
#line 959 
  if (i <= 99U) 
#line 961 
                goto ldv_54913; else 
#line 964 
                                     goto ldv_54912;
  ldv_54912: 
#line 965 
  ;
  
#line 967 
  if ((int)phy_data < 0) {
    {
      
#line 968 
      struct _ddebug descriptor = {.modname = "ixgbe", .function = "ixgbe_reset_phy_nl", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_phy.c", .format = "PHY reset did not complete.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))968U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 968 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 968 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"PHY reset did not complete.\n"); else ;
    }
    
#line 969 
    __retres = -3;
    
#line 969 
    goto return_label;
  }
  else ;
  
#line 973 
  ret_val = ixgbe_get_sfp_init_sequence_offsets(hw,& list_offset,& data_offset);
  
#line 975 
  if (ret_val != 0) {
    
#line 976 
    __retres = ret_val;
    
#line 976 
    goto return_label;
  }
  else ;
  
#line 978 
  ret_val = (*(hw->eeprom.ops.read))(hw,(unsigned short)((int)data_offset),& block_crc);
  
#line 979 
  data_offset = (u16)((int)data_offset + 1);
  
#line 980 
  goto ldv_54935;
  ldv_54934: 
#line 981 
  ;
  
#line 984 
  ret_val = (*(hw->eeprom.ops.read))(hw,(unsigned short)((int)data_offset),& eword);
  
#line 985 
  if (ret_val != 0) 
#line 986 
                    goto err_eeprom; else ;
  
#line 987 
  control = (unsigned short)((int)eword >> 12);
  
#line 989 
  edata = (unsigned short)((unsigned int)eword & 4095U);
  
#line 990 
  switch ((int)control) {
    u16 tmp_0;
    case 0: 
#line 991 
    ;
    
#line 992 
    data_offset = (u16)((int)data_offset + 1);
    {
      
#line 993 
      struct _ddebug descriptor_0 = {.modname = "ixgbe", .function = "ixgbe_reset_phy_nl", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_phy.c", .format = "DELAY: %d MS\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))993U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 993 
      if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 993 
                                                            __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"DELAY: %d MS\n",(int)edata); else ;
    }
    
#line 994 
    usleep_range((unsigned long)((int)edata * 1000),(unsigned long)((int)edata * 2000));
    
#line 995 
    goto ldv_54920;
    case 1: 
#line 996 
    ;
    {
      
#line 997 
      struct _ddebug descriptor_1 = {.modname = "ixgbe", .function = "ixgbe_reset_phy_nl", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_phy.c", .format = "DATA:\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))997U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 997 
      if ((long)(((int)descriptor_1.flags & 1) != 0) != 0L) 
#line 997 
                                                            __dynamic_netdev_dbg(& descriptor_1,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"DATA:\n"); else ;
    }
    
#line 998 
    data_offset = (u16)((int)data_offset + 1);
    
#line 999 
    tmp_0 = data_offset;
    
#line 999 
    data_offset = (u16)((int)data_offset + 1);
    
#line 999 
    ;
    
#line 999 
    ;
    
#line 999 
    ret_val = (*(hw->eeprom.ops.read))(hw,(unsigned short)((int)tmp_0),& phy_offset);
    
#line 1001 
    if (ret_val != 0) 
#line 1002 
                      goto err_eeprom; else ;
    
#line 1003 
    i = 0U;
    
#line 1003 
    goto ldv_54925;
    ldv_54924: 
#line 1004 
    ;
    
#line 1004 
    ret_val = (*(hw->eeprom.ops.read))(hw,(unsigned short)((int)data_offset),& eword);
    
#line 1006 
    if (ret_val != 0) 
#line 1007 
                      goto err_eeprom; else ;
    
#line 1008 
    (*(hw->phy.ops.write_reg))(hw,(unsigned int)phy_offset,1U,(unsigned short)((int)eword));
    {
      
#line 1010 
      struct _ddebug descriptor_2 = {.modname = "ixgbe", .function = "ixgbe_reset_phy_nl", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_phy.c", .format = "Wrote %4.4x to %4.4x\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1011U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1010 
      if ((long)(((int)descriptor_2.flags & 1) != 0) != 0L) 
#line 1010 
                                                            __dynamic_netdev_dbg(& descriptor_2,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"Wrote %4.4x to %4.4x\n",(int)eword,(int)phy_offset); else ;
    }
    
#line 1012 
    data_offset = (u16)((int)data_offset + 1);
    
#line 1013 
    phy_offset = (u16)((int)phy_offset + 1);
    
#line 1003 
    i += 1U;
    ldv_54925: 
#line 1004 
    ;
    
#line 1003 
    if ((unsigned int)edata > i) 
#line 1005 
                                 goto ldv_54924; else 
#line 1008 
                                                      goto ldv_54926;
    ldv_54926: 
#line 1009 
    ;
    
#line 1015 
    goto ldv_54920;
    case 15: 
#line 1016 
    ;
    
#line 1017 
    data_offset = (u16)((int)data_offset + 1);
    {
      
#line 1018 
      struct _ddebug descriptor_3 = {.modname = "ixgbe", .function = "ixgbe_reset_phy_nl", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_phy.c", .format = "CONTROL:\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1018U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1018 
      if ((long)(((int)descriptor_3.flags & 1) != 0) != 0L) 
#line 1018 
                                                            __dynamic_netdev_dbg(& descriptor_3,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"CONTROL:\n"); else ;
    }
    
#line 1019 
    if ((unsigned int)edata == 4095U) {
      {
        
#line 1020 
        struct _ddebug descriptor_4 = {.modname = "ixgbe", .function = "ixgbe_reset_phy_nl", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_phy.c", .format = "EOL\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1020U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
        
#line 1020 
        if ((long)(((int)descriptor_4.flags & 1) != 0) != 0L) 
#line 1020 
                                                              __dynamic_netdev_dbg(& descriptor_4,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"EOL\n"); else ;
      }
      
#line 1021 
      end_data = (_Bool)1;
    }
    else 
      
#line 1022 
      if ((unsigned int)edata == 0U) {
        
#line 1023 
        struct _ddebug descriptor_5 = {.modname = "ixgbe", .function = "ixgbe_reset_phy_nl", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_phy.c", .format = "SOL\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1023U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
        
#line 1023 
        if ((long)(((int)descriptor_5.flags & 1) != 0) != 0L) 
#line 1023 
                                                              __dynamic_netdev_dbg(& descriptor_5,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"SOL\n"); else ;
      }
      else {
        {
          
#line 1025 
          struct _ddebug descriptor_6 = {.modname = "ixgbe", .function = "ixgbe_reset_phy_nl", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_phy.c", .format = "Bad control value\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1025U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
          
#line 1025 
          if ((long)(((int)descriptor_6.flags & 1) != 0) != 0L) 
#line 1025 
                                                                __dynamic_netdev_dbg(& descriptor_6,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"Bad control value\n"); else ;
        }
        
#line 1026 
        __retres = -3;
        
#line 1026 
        goto return_label;
      }
    
#line 1028 
    goto ldv_54920;
    default: 
#line 1029 
    ;
    {
      
#line 1030 
      struct _ddebug descriptor_7 = {.modname = "ixgbe", .function = "ixgbe_reset_phy_nl", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_phy.c", .format = "Bad control type\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1030U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1030 
      if ((long)(((int)descriptor_7.flags & 1) != 0) != 0L) 
#line 1030 
                                                            __dynamic_netdev_dbg(& descriptor_7,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"Bad control type\n"); else ;
    }
    
#line 1031 
    __retres = -3;
    
#line 1031 
    goto return_label;
  }
  ldv_54920: 
#line 1033 
  ;
  ldv_54935: 
#line 1034 
  ;
  
#line 980 
  if (! end_data) 
#line 982 
                  goto ldv_54934; else 
#line 985 
                                       goto ldv_54936;
  ldv_54936: 
#line 986 
  ;
  
#line 1035 
  __retres = ret_val;
  
#line 1035 
  goto return_label;
  err_eeprom: 
#line 1037 
  ;
  
#line 1038 
  netdev_err((struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"eeprom read at offset %d failed\n",(int)data_offset);
  
#line 1039 
  __retres = -3;
  return_label: 
#line 1039 
                return __retres;
}


#line 1048  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_phy.c"
s32 ixgbe_identify_module_generic(struct ixgbe_hw *hw)
{
  s32 __retres;
  enum ixgbe_media_type tmp;
  
#line 1050 
  tmp = (*(hw->mac.ops.get_media_type))(hw);
  
#line 1050 
  switch ((unsigned int)tmp) {
    s32 tmp_0;
    s32 tmp_1;
    case (unsigned int)1: 
#line 1051 
    ;
    
#line 1052 
    tmp_0 = ixgbe_identify_sfp_module_generic(hw);
    
#line 1052 
    __retres = tmp_0;
    
#line 1052 
    goto return_label;
    case (unsigned int)2: 
#line 1053 
    ;
    
#line 1054 
    tmp_1 = ixgbe_identify_qsfp_module_generic(hw);
    
#line 1054 
    __retres = tmp_1;
    
#line 1054 
    goto return_label;
    default: 
#line 1055 
    ;
    
#line 1056 
    hw->phy.sfp_type = ixgbe_sfp_type_not_present;
    
#line 1057 
    __retres = -20;
    
#line 1057 
    goto return_label;
  }
  
#line 1060 
  __retres = -20;
  return_label: 
#line 1060 
                return __retres;
}


#line 1069  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_phy.c"
s32 ixgbe_identify_sfp_module_generic(struct ixgbe_hw *hw)
{
  s32 __retres;
  s32 status;
  enum ixgbe_media_type tmp;
  
#line 1071 
  struct ixgbe_adapter *adapter = (struct ixgbe_adapter *)hw->back;
  
#line 1073 
  u32 vendor_oui = 0U;
  
#line 1074 
  enum ixgbe_sfp_type stored_sfp_type = hw->phy.sfp_type;
  
#line 1075 
  u8 identifier = (unsigned char)0U;
  
#line 1076 
  u8 comp_codes_1g = (unsigned char)0U;
  
#line 1077 
  u8 comp_codes_10g = (unsigned char)0U;
  
#line 1078 
  u8 oui_bytes[3U] = {(unsigned char)0U, (unsigned char)0U, (unsigned char)0U};
  
#line 1079 
  u8 cable_tech = (unsigned char)0U;
  
#line 1080 
  u8 cable_spec = (unsigned char)0U;
  
#line 1081 
  u16 enforce_sfp = (unsigned short)0U;
  
#line 1083 
  tmp = (*(hw->mac.ops.get_media_type))(hw);
  
#line 1083 
  if (tmp != (unsigned int)ixgbe_media_type_fiber) {
    
#line 1084 
    hw->phy.sfp_type = ixgbe_sfp_type_not_present;
    
#line 1085 
    __retres = -20;
    
#line 1085 
    goto return_label;
  }
  else ;
  
#line 1088 
  status = (*(hw->phy.ops.read_i2c_eeprom))(hw,(unsigned char)0,& identifier);
  
#line 1092 
  if (status != 0) 
#line 1093 
                   goto err_read_i2c_eeprom; else ;
  
#line 1096 
  (*(hw->mac.ops.set_lan_id))(hw);
  
#line 1098 
  if ((unsigned int)identifier != 3U) {
    
#line 1099 
    hw->phy.type = ixgbe_phy_sfp_unsupported;
    
#line 1100 
    __retres = -19;
    
#line 1100 
    goto return_label;
  }
  else ;
  
#line 1102 
  status = (*(hw->phy.ops.read_i2c_eeprom))(hw,(unsigned char)6,& comp_codes_1g);
  
#line 1106 
  if (status != 0) 
#line 1107 
                   goto err_read_i2c_eeprom; else ;
  
#line 1109 
  status = (*(hw->phy.ops.read_i2c_eeprom))(hw,(unsigned char)3,& comp_codes_10g);
  
#line 1113 
  if (status != 0) 
#line 1114 
                   goto err_read_i2c_eeprom; else ;
  
#line 1115 
  status = (*(hw->phy.ops.read_i2c_eeprom))(hw,(unsigned char)8,& cable_tech);
  
#line 1119 
  if (status != 0) 
#line 1120 
                   goto err_read_i2c_eeprom; else ;
  
#line 1138 
  if (hw->mac.type == (unsigned int)ixgbe_mac_82598EB) 
    
#line 1139 
    if (((int)cable_tech & 4) != 0) 
#line 1140 
                                    hw->phy.sfp_type = ixgbe_sfp_type_da_cu;
    else 
      
#line 1141 
      if (((int)comp_codes_10g & 16) != 0) 
#line 1142 
                                           hw->phy.sfp_type = ixgbe_sfp_type_sr;
      else 
        
#line 1143 
        if (((int)comp_codes_10g & 32) != 0) 
#line 1144 
                                             hw->phy.sfp_type = ixgbe_sfp_type_lr; else 
                                                                    
#line 1146 
                                                                    hw->phy.sfp_type = ixgbe_sfp_type_unknown;
  else 
    
#line 1147 
    if (hw->mac.type == (unsigned int)ixgbe_mac_82599EB) 
      
#line 1148 
      if (((int)cable_tech & 4) != 0) 
        
#line 1149 
        if ((unsigned int)hw->bus.lan_id == 0U) 
#line 1150 
                                                hw->phy.sfp_type = ixgbe_sfp_type_da_cu_core0; else 
                                                                    
#line 1153 
                                                                    hw->phy.sfp_type = ixgbe_sfp_type_da_cu_core1;
      else 
        
#line 1155 
        if (((int)cable_tech & 8) != 0) {
          
#line 1156 
          (*(hw->phy.ops.read_i2c_eeprom))(hw,(unsigned char)60,& cable_spec);
          
#line 1159 
          if (((int)cable_spec & 4) != 0) 
            
#line 1161 
            if ((unsigned int)hw->bus.lan_id == 0U) 
#line 1162 
                                                    hw->phy.sfp_type = ixgbe_sfp_type_da_act_lmt_core0; else 
                                                                    
#line 1165 
                                                                    hw->phy.sfp_type = ixgbe_sfp_type_da_act_lmt_core1;
          else 
#line 1168 
               hw->phy.sfp_type = ixgbe_sfp_type_unknown;
        }
        else 
          
#line 1171 
          if (((int)comp_codes_10g & 48) != 0) 
            
#line 1174 
            if ((unsigned int)hw->bus.lan_id == 0U) 
#line 1175 
                                                    hw->phy.sfp_type = ixgbe_sfp_type_srlr_core0; else 
                                                                    
#line 1178 
                                                                    hw->phy.sfp_type = ixgbe_sfp_type_srlr_core1;
          else 
            
#line 1180 
            if (((int)comp_codes_1g & 8) != 0) 
              
#line 1181 
              if ((unsigned int)hw->bus.lan_id == 0U) 
#line 1182 
                                                      hw->phy.sfp_type = ixgbe_sfp_type_1g_cu_core0; else 
                                                                    
#line 1185 
                                                                    hw->phy.sfp_type = ixgbe_sfp_type_1g_cu_core1;
            else 
              
#line 1187 
              if (((int)comp_codes_1g & 1) != 0) 
                
#line 1188 
                if ((unsigned int)hw->bus.lan_id == 0U) 
#line 1189 
                                                        hw->phy.sfp_type = ixgbe_sfp_type_1g_sx_core0; else 
                                                                    
#line 1192 
                                                                    hw->phy.sfp_type = ixgbe_sfp_type_1g_sx_core1;
              else 
                
#line 1194 
                if (((int)comp_codes_1g & 2) != 0) 
                  
#line 1195 
                  if ((unsigned int)hw->bus.lan_id == 0U) 
#line 1196 
                                                          hw->phy.sfp_type = ixgbe_sfp_type_1g_lx_core0; else 
                                                                    
#line 1199 
                                                                    hw->phy.sfp_type = ixgbe_sfp_type_1g_lx_core1;
                else 
#line 1202 
                     hw->phy.sfp_type = ixgbe_sfp_type_unknown;
    else ;
  
#line 1206 
  if (hw->phy.sfp_type != stored_sfp_type) 
#line 1207 
                                           hw->phy.sfp_setup_needed = (_Bool)1; else ;
  
#line 1210 
  hw->phy.multispeed_fiber = (_Bool)0;
  
#line 1211 
  if ((((int)comp_codes_1g & 1) != 0 && ((int)comp_codes_10g & 16) != 0) || (((int)comp_codes_1g & 2) != 0 && ((int)comp_codes_10g & 32) != 0)) 
    
#line 1215 
    hw->phy.multispeed_fiber = (_Bool)1; else ;
  
#line 1218 
  if (hw->phy.type != (unsigned int)ixgbe_phy_nl) {
    
#line 1219 
    hw->phy.id = (unsigned int)identifier;
    
#line 1220 
    status = (*(hw->phy.ops.read_i2c_eeprom))(hw,(unsigned char)37,&(oui_bytes[0]));
    
#line 1224 
    if (status != 0) 
#line 1225 
                     goto err_read_i2c_eeprom; else ;
    
#line 1227 
    status = (*(hw->phy.ops.read_i2c_eeprom))(hw,(unsigned char)38,& oui_bytes[1]);
    
#line 1231 
    if (status != 0) 
#line 1232 
                     goto err_read_i2c_eeprom; else ;
    
#line 1234 
    status = (*(hw->phy.ops.read_i2c_eeprom))(hw,(unsigned char)39,& oui_bytes[2]);
    
#line 1238 
    if (status != 0) 
#line 1239 
                     goto err_read_i2c_eeprom; else ;
    
#line 1241 
    vendor_oui = (unsigned int)((((int)oui_bytes[0] << 24) | ((int)oui_bytes[1] << 16)) | ((int)oui_bytes[2] << 8));
    
#line 1246 
    switch (vendor_oui) {
      case (u32)4224512: 
#line 1247 
      ;
      
#line 1248 
      if (((int)cable_tech & 4) != 0) 
#line 1249 
                                      hw->phy.type = ixgbe_phy_sfp_passive_tyco; else ;
      
#line 1251 
      goto ldv_54959;
      case (u32)9463040: 
#line 1252 
      ;
      
#line 1253 
      if (((int)cable_tech & 8) != 0) 
#line 1254 
                                      hw->phy.type = ixgbe_phy_sfp_ftl_active; else 
                                                                    
#line 1256 
                                                                    hw->phy.type = ixgbe_phy_sfp_ftl;
      
#line 1257 
      goto ldv_54959;
      case (u32)1534464: 
#line 1258 
      ;
      
#line 1259 
      hw->phy.type = ixgbe_phy_sfp_avago;
      
#line 1260 
      goto ldv_54959;
      case (u32)1777920: 
#line 1261 
      ;
      
#line 1262 
      hw->phy.type = ixgbe_phy_sfp_intel;
      
#line 1263 
      goto ldv_54959;
      default: 
#line 1264 
      ;
      
#line 1265 
      if (((int)cable_tech & 4) != 0) 
#line 1266 
                                      hw->phy.type = ixgbe_phy_sfp_passive_unknown;
      else 
        
#line 1268 
        if (((int)cable_tech & 8) != 0) 
#line 1269 
                                        hw->phy.type = ixgbe_phy_sfp_active_unknown; else 
                                                                    
#line 1272 
                                                                    hw->phy.type = ixgbe_phy_sfp_unknown;
      
#line 1273 
      goto ldv_54959;
    }
    ldv_54959: 
#line 1275 
    ;
  }
  else ;
  
#line 1278 
  if (((int)cable_tech & 12) != 0) {
    
#line 1280 
    __retres = 0;
    
#line 1280 
    goto return_label;
  }
  else ;
  
#line 1283 
  if ((unsigned int)comp_codes_10g == 0U && (((((unsigned int)hw->phy.sfp_type + 4294967287U > 1U && hw->phy.sfp_type != (unsigned int)ixgbe_sfp_type_1g_lx_core0) && hw->phy.sfp_type != (unsigned int)ixgbe_sfp_type_1g_lx_core1) && hw->phy.sfp_type != (unsigned int)ixgbe_sfp_type_1g_sx_core0) && hw->phy.sfp_type != (unsigned int)ixgbe_sfp_type_1g_sx_core1)) {
    
#line 1290 
    hw->phy.type = ixgbe_phy_sfp_unsupported;
    
#line 1291 
    __retres = -19;
    
#line 1291 
    goto return_label;
  }
  else ;
  
#line 1295 
  if (hw->mac.type == (unsigned int)ixgbe_mac_82598EB) {
    
#line 1296 
    __retres = 0;
    
#line 1296 
    goto return_label;
  }
  else ;
  
#line 1298 
  (*(hw->mac.ops.get_device_caps))(hw,& enforce_sfp);
  
#line 1299 
  if (((int)enforce_sfp & 1) == 0 && (((((unsigned int)hw->phy.sfp_type + 4294967287U > 1U && hw->phy.sfp_type != (unsigned int)ixgbe_sfp_type_1g_lx_core0) && hw->phy.sfp_type != (unsigned int)ixgbe_sfp_type_1g_lx_core1) && hw->phy.sfp_type != (unsigned int)ixgbe_sfp_type_1g_sx_core0) && hw->phy.sfp_type != (unsigned int)ixgbe_sfp_type_1g_sx_core1)) {
    
#line 1307 
    if (hw->phy.type == (unsigned int)ixgbe_phy_sfp_intel) {
      
#line 1308 
      __retres = 0;
      
#line 1308 
      goto return_label;
    }
    else ;
    
#line 1309 
    if ((int)hw->allow_unsupported_sfp != 0) {
      
#line 1310 
      if (((int)adapter->msg_enable & 1) != 0) 
#line 1310 
                                               netdev_warn((struct net_device const *)adapter->netdev,"WARNING: Intel (R) Network Connections are quality tested using Intel (R) Ethernet Optics.  Using untested modules is not supported and may cause unstable operation or damage to the module or the adapter.  Intel Corporation is not responsible for any harm caused by using untested modules.\n"); else ;
      
#line 1311 
      __retres = 0;
      
#line 1311 
      goto return_label;
    }
    else ;
    {
      
#line 1313 
      struct _ddebug descriptor = {.modname = "ixgbe", .function = "ixgbe_identify_sfp_module_generic", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_phy.c", .format = "SFP+ module not supported\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1313U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1313 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 1313 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"SFP+ module not supported\n"); else ;
    }
    
#line 1314 
    hw->phy.type = ixgbe_phy_sfp_unsupported;
    
#line 1315 
    __retres = -19;
    
#line 1315 
    goto return_label;
  }
  else ;
  
#line 1317 
  __retres = 0;
  
#line 1317 
  goto return_label;
  err_read_i2c_eeprom: 
#line 1319 
  ;
  
#line 1320 
  hw->phy.sfp_type = ixgbe_sfp_type_not_present;
  
#line 1321 
  if (hw->phy.type != (unsigned int)ixgbe_phy_nl) {
    
#line 1322 
    hw->phy.id = 0U;
    
#line 1323 
    hw->phy.type = ixgbe_phy_unknown;
  }
  else ;
  
#line 1325 
  __retres = -20;
  return_label: 
#line 1325 
                return __retres;
}


#line 1334  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_phy.c"
static s32 ixgbe_identify_qsfp_module_generic(struct ixgbe_hw *hw)
{
  s32 __retres;
  s32 status;
  enum ixgbe_media_type tmp;
  
#line 1336 
  struct ixgbe_adapter *adapter = (struct ixgbe_adapter *)hw->back;
  
#line 1338 
  u32 vendor_oui = 0U;
  
#line 1339 
  enum ixgbe_sfp_type stored_sfp_type = hw->phy.sfp_type;
  
#line 1340 
  u8 identifier = (unsigned char)0U;
  
#line 1341 
  u8 comp_codes_1g = (unsigned char)0U;
  
#line 1342 
  u8 comp_codes_10g = (unsigned char)0U;
  
#line 1343 
  u8 oui_bytes[3U] = {(unsigned char)0U, (unsigned char)0U, (unsigned char)0U};
  
#line 1344 
  u16 enforce_sfp = (unsigned short)0U;
  
#line 1345 
  u8 connector = (unsigned char)0U;
  
#line 1346 
  u8 cable_length = (unsigned char)0U;
  
#line 1347 
  u8 device_tech = (unsigned char)0U;
  
#line 1348 
  bool active_cable = (_Bool)0;
  
#line 1350 
  tmp = (*(hw->mac.ops.get_media_type))(hw);
  
#line 1350 
  if (tmp != (unsigned int)ixgbe_media_type_fiber_qsfp) {
    
#line 1351 
    hw->phy.sfp_type = ixgbe_sfp_type_not_present;
    
#line 1352 
    __retres = -20;
    
#line 1352 
    goto return_label;
  }
  else ;
  
#line 1356 
  (*(hw->mac.ops.set_lan_id))(hw);
  
#line 1358 
  status = (*(hw->phy.ops.read_i2c_eeprom))(hw,(unsigned char)0,& identifier);
  
#line 1361 
  if (status != 0) 
#line 1362 
                   goto err_read_i2c_eeprom; else ;
  
#line 1364 
  if ((unsigned int)identifier != 13U) {
    
#line 1365 
    hw->phy.type = ixgbe_phy_sfp_unsupported;
    
#line 1366 
    __retres = -19;
    
#line 1366 
    goto return_label;
  }
  else ;
  
#line 1369 
  hw->phy.id = (unsigned int)identifier;
  
#line 1371 
  status = (*(hw->phy.ops.read_i2c_eeprom))(hw,(unsigned char)131,& comp_codes_10g);
  
#line 1374 
  if (status != 0) 
#line 1375 
                   goto err_read_i2c_eeprom; else ;
  
#line 1377 
  status = (*(hw->phy.ops.read_i2c_eeprom))(hw,(unsigned char)134,& comp_codes_1g);
  
#line 1380 
  if (status != 0) 
#line 1381 
                   goto err_read_i2c_eeprom; else ;
  
#line 1383 
  if (((int)comp_codes_10g & 8) != 0) {
    
#line 1384 
    hw->phy.type = ixgbe_phy_qsfp_passive_unknown;
    
#line 1385 
    if ((unsigned int)hw->bus.lan_id == 0U) 
#line 1386 
                                            hw->phy.sfp_type = ixgbe_sfp_type_da_cu_core0; else 
                                                                    
#line 1388 
                                                                    hw->phy.sfp_type = ixgbe_sfp_type_da_cu_core1;
  }
  else 
    
#line 1389 
    if (((int)comp_codes_10g & 48) != 0) 
      
#line 1391 
      if ((unsigned int)hw->bus.lan_id == 0U) 
#line 1392 
                                              hw->phy.sfp_type = ixgbe_sfp_type_srlr_core0; else 
                                                                    
#line 1394 
                                                                    hw->phy.sfp_type = ixgbe_sfp_type_srlr_core1;
    else {
      
#line 1396 
      if (((int)comp_codes_10g & 1) != 0) 
#line 1397 
                                          active_cable = (_Bool)1; else ;
      
#line 1399 
      if (! active_cable) {
        
#line 1403 
        (*(hw->phy.ops.read_i2c_eeprom))(hw,(unsigned char)130,& connector);
        
#line 1407 
        (*(hw->phy.ops.read_i2c_eeprom))(hw,(unsigned char)146,& cable_length);
        
#line 1411 
        (*(hw->phy.ops.read_i2c_eeprom))(hw,(unsigned char)147,& device_tech);
        
#line 1415 
        if (((unsigned int)connector == 35U && (unsigned int)cable_length != 0U) && (unsigned int)((int)device_tech >> 4) == 0U) 
          
#line 1420 
          active_cable = (_Bool)1; else ;
      }
      else ;
      
#line 1423 
      if ((int)active_cable != 0) {
        
#line 1424 
        hw->phy.type = ixgbe_phy_qsfp_active_unknown;
        
#line 1425 
        if ((unsigned int)hw->bus.lan_id == 0U) 
#line 1426 
                                                hw->phy.sfp_type = ixgbe_sfp_type_da_act_lmt_core0; else 
                                                                    
#line 1429 
                                                                    hw->phy.sfp_type = ixgbe_sfp_type_da_act_lmt_core1;
      }
      else {
        
#line 1433 
        hw->phy.type = ixgbe_phy_sfp_unsupported;
        
#line 1434 
        __retres = -19;
        
#line 1434 
        goto return_label;
      }
    }
  
#line 1438 
  if (hw->phy.sfp_type != stored_sfp_type) 
#line 1439 
                                           hw->phy.sfp_setup_needed = (_Bool)1; else ;
  
#line 1442 
  hw->phy.multispeed_fiber = (_Bool)0;
  
#line 1443 
  if ((((int)comp_codes_1g & 1) != 0 && ((int)comp_codes_10g & 16) != 0) || (((int)comp_codes_1g & 2) != 0 && ((int)comp_codes_10g & 32) != 0)) 
    
#line 1447 
    hw->phy.multispeed_fiber = (_Bool)1; else ;
  
#line 1450 
  if (((int)comp_codes_10g & 48) != 0) {
    
#line 1452 
    status = (*(hw->phy.ops.read_i2c_eeprom))(hw,(unsigned char)165,&(oui_bytes[0]));
    
#line 1456 
    if (status != 0) 
#line 1457 
                     goto err_read_i2c_eeprom; else ;
    
#line 1459 
    status = (*(hw->phy.ops.read_i2c_eeprom))(hw,(unsigned char)166,& oui_bytes[1]);
    
#line 1463 
    if (status != 0) 
#line 1464 
                     goto err_read_i2c_eeprom; else ;
    
#line 1466 
    status = (*(hw->phy.ops.read_i2c_eeprom))(hw,(unsigned char)167,& oui_bytes[2]);
    
#line 1470 
    if (status != 0) 
#line 1471 
                     goto err_read_i2c_eeprom; else ;
    
#line 1473 
    vendor_oui = (unsigned int)((((int)oui_bytes[0] << 24) | ((int)oui_bytes[1] << 16)) | ((int)oui_bytes[2] << 8));
    
#line 1478 
    if (vendor_oui == 1777920U) 
#line 1479 
                                hw->phy.type = ixgbe_phy_qsfp_intel; else 
                                                                    
#line 1481 
                                                                    hw->phy.type = ixgbe_phy_qsfp_unknown;
    
#line 1483 
    (*(hw->mac.ops.get_device_caps))(hw,& enforce_sfp);
    
#line 1484 
    if (((int)enforce_sfp & 1) == 0) {
      
#line 1486 
      if (hw->phy.type == (unsigned int)ixgbe_phy_qsfp_intel) {
        
#line 1487 
        __retres = 0;
        
#line 1487 
        goto return_label;
      }
      else ;
      
#line 1488 
      if ((int)hw->allow_unsupported_sfp != 0) {
        
#line 1489 
        if (((int)adapter->msg_enable & 1) != 0) 
#line 1489 
                                                 netdev_warn((struct net_device const *)adapter->netdev,"WARNING: Intel (R) Network Connections are quality tested using Intel (R) Ethernet Optics. Using untested modules is not supported and may cause unstable operation or damage to the module or the adapter. Intel Corporation is not responsible for any harm caused by using untested modules.\n"); else ;
        
#line 1490 
        __retres = 0;
        
#line 1490 
        goto return_label;
      }
      else ;
      {
        
#line 1492 
        struct _ddebug descriptor = {.modname = "ixgbe", .function = "ixgbe_identify_qsfp_module_generic", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_phy.c", .format = "QSFP module not supported\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1492U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
        
#line 1492 
        if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 1492 
                                                            __dynamic_netdev_dbg(& descriptor,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"QSFP module not supported\n"); else ;
      }
      
#line 1493 
      hw->phy.type = ixgbe_phy_sfp_unsupported;
      
#line 1494 
      __retres = -19;
      
#line 1494 
      goto return_label;
    }
    else ;
    
#line 1496 
    __retres = 0;
    
#line 1496 
    goto return_label;
  }
  else ;
  
#line 1498 
  __retres = 0;
  
#line 1498 
  goto return_label;
  err_read_i2c_eeprom: 
#line 1500 
  ;
  
#line 1501 
  hw->phy.sfp_type = ixgbe_sfp_type_not_present;
  
#line 1502 
  hw->phy.id = 0U;
  
#line 1503 
  hw->phy.type = ixgbe_phy_unknown;
  
#line 1505 
  __retres = -20;
  return_label: 
#line 1505 
                return __retres;
}


#line 1517  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_phy.c"
s32 ixgbe_get_sfp_init_sequence_offsets(struct ixgbe_hw *hw, u16 *list_offset, u16 *data_offset)
{
  s32 __retres;
  u16 sfp_id;
  s32 tmp;
  s32 tmp_0;
  
#line 1522 
  u16 sfp_type = (unsigned short)hw->phy.sfp_type;
  
#line 1524 
  if (hw->phy.sfp_type == (unsigned int)ixgbe_sfp_type_unknown) {
    
#line 1525 
    __retres = -19;
    
#line 1525 
    goto return_label;
  }
  else ;
  
#line 1527 
  if (hw->phy.sfp_type == (unsigned int)ixgbe_sfp_type_not_present) {
    
#line 1528 
    __retres = -20;
    
#line 1528 
    goto return_label;
  }
  else ;
  
#line 1530 
  if ((unsigned int)hw->device_id == 4321U && hw->phy.sfp_type == (unsigned int)ixgbe_sfp_type_da_cu) {
    
#line 1532 
    __retres = -19;
    
#line 1532 
    goto return_label;
  }
  else ;
  
#line 1538 
  if (((unsigned int)sfp_type == 7U || (unsigned int)sfp_type == 13U) || ((unsigned int)sfp_type == 9U || (unsigned int)sfp_type == 11U)) 
    
#line 1542 
    sfp_type = (unsigned short)5U;
  else 
    
#line 1543 
    if (((unsigned int)sfp_type == 8U || (unsigned int)sfp_type == 14U) || ((unsigned int)sfp_type == 10U || (unsigned int)sfp_type == 12U)) 
      
#line 1547 
      sfp_type = (unsigned short)6U; else ;
  
#line 1550 
  tmp = (*(hw->eeprom.ops.read))(hw,(unsigned short)43,list_offset);
  
#line 1550 
  if (tmp != 0) {
    
#line 1551 
    netdev_err((struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"eeprom read at %d failed\n",43);
    
#line 1553 
    __retres = -21;
    
#line 1553 
    goto return_label;
  }
  else ;
  
#line 1556 
  if ((unsigned int)*list_offset + 65535U > 65533U) {
    
#line 1557 
    __retres = -21;
    
#line 1557 
    goto return_label;
  }
  else ;
  
#line 1560 
  *list_offset = (u16)((int)*list_offset + 1);
  
#line 1566 
  tmp_0 = (*(hw->eeprom.ops.read))(hw,(unsigned short)((int)*list_offset),& sfp_id);
  
#line 1566 
  if (tmp_0 != 0) 
#line 1567 
                  goto err_phy; else ;
  
#line 1569 
  goto ldv_54997;
  ldv_54996: 
#line 1570 
  ;
  
#line 1570 
  if ((int)sfp_id == (int)sfp_type) {
    s32 tmp_1;
    
#line 1571 
    *list_offset = (u16)((int)*list_offset + 1);
    
#line 1572 
    tmp_1 = (*(hw->eeprom.ops.read))(hw,(unsigned short)((int)*list_offset),data_offset);
    
#line 1572 
    if (tmp_1 != 0) 
#line 1573 
                    goto err_phy; else ;
    
#line 1574 
    if ((unsigned int)*data_offset + 65535U > 65533U) {
      {
        
#line 1575 
        struct _ddebug descriptor = {.modname = "ixgbe", .function = "ixgbe_get_sfp_init_sequence_offsets", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_phy.c", .format = "SFP+ module not supported\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1575U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
        
#line 1575 
        if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 1575 
                                                            __dynamic_netdev_dbg(& descriptor,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"SFP+ module not supported\n"); else ;
      }
      
#line 1576 
      __retres = -19;
      
#line 1576 
      goto return_label;
    }
    else 
#line 1578 
         goto ldv_54995;
  }
  else {
    s32 tmp_2;
    
#line 1581 
    *list_offset = (unsigned short)((unsigned int)*list_offset + 2U);
    
#line 1582 
    tmp_2 = (*(hw->eeprom.ops.read))(hw,(unsigned short)((int)*list_offset),& sfp_id);
    
#line 1582 
    if (tmp_2 != 0) 
#line 1583 
                    goto err_phy; else ;
  }
  ldv_54997: 
#line 1585 
  ;
  
#line 1569 
  if ((unsigned int)sfp_id != 65535U) 
#line 1571 
                                      goto ldv_54996; else 
#line 1574 
                                                           goto ldv_54995;
  ldv_54995: 
#line 1575 
  ;
  
#line 1587 
  if ((unsigned int)sfp_id == 65535U) {
    {
      
#line 1588 
      struct _ddebug descriptor_0 = {.modname = "ixgbe", .function = "ixgbe_get_sfp_init_sequence_offsets", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_phy.c", .format = "No matching SFP+ module found\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1588U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1588 
      if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 1588 
                                                            __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"No matching SFP+ module found\n"); else ;
    }
    
#line 1589 
    __retres = -19;
    
#line 1589 
    goto return_label;
  }
  else ;
  
#line 1592 
  __retres = 0;
  
#line 1592 
  goto return_label;
  err_phy: 
#line 1594 
  ;
  
#line 1595 
  netdev_err((struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"eeprom read at offset %d failed\n",(int)*list_offset);
  
#line 1596 
  __retres = -3;
  return_label: 
#line 1596 
                return __retres;
}


#line 1607  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_phy.c"
s32 ixgbe_read_i2c_eeprom_generic(struct ixgbe_hw *hw, u8 byte_offset, u8 *eeprom_data)
{
  s32 tmp;
  
#line 1610 
  tmp = (*(hw->phy.ops.read_i2c_byte))(hw,(unsigned char)((int)byte_offset),(unsigned char)160,eeprom_data);
  
#line 1610 
  return tmp;
}


#line 1623  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_phy.c"
s32 ixgbe_read_i2c_sff8472_generic(struct ixgbe_hw *hw, u8 byte_offset, u8 *sff8472_data)
{
  s32 tmp;
  
#line 1626 
  tmp = (*(hw->phy.ops.read_i2c_byte))(hw,(unsigned char)((int)byte_offset),(unsigned char)162,sff8472_data);
  
#line 1626 
  return tmp;
}


#line 1639  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_phy.c"
s32 ixgbe_write_i2c_eeprom_generic(struct ixgbe_hw *hw, u8 byte_offset, u8 eeprom_data)
{
  s32 tmp;
  
#line 1642 
  tmp = (*(hw->phy.ops.write_i2c_byte))(hw,(unsigned char)((int)byte_offset),(unsigned char)160,(unsigned char)((int)eeprom_data));
  
#line 1642 
  return tmp;
}


#line 1656  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_phy.c"
s32 ixgbe_read_i2c_byte_generic(struct ixgbe_hw *hw, u8 byte_offset, u8 dev_addr, u8 *data)
{
  s32 __retres;
  s32 status;
  s32 tmp;
  
#line 1660 
  u32 max_retry = 10U;
  
#line 1661 
  u32 retry = 0U;
  
#line 1662 
  u32 swfw_mask = hw->phy.phy_semaphore_mask;
  
#line 1663 
  bool nack = (_Bool)1;
  
#line 1664 
  *data = (unsigned char)0U;
  ldv_55030: 
#line 1665 
  ;
  
#line 1667 
  tmp = (*(hw->mac.ops.acquire_swfw_sync))(hw,swfw_mask);
  
#line 1667 
  if (tmp != 0) {
    
#line 1668 
    __retres = -16;
    
#line 1668 
    goto return_label;
  }
  else ;
  
#line 1670 
  ixgbe_i2c_start(hw);
  
#line 1673 
  status = ixgbe_clock_out_i2c_byte(hw,(unsigned char)((int)dev_addr));
  
#line 1674 
  if (status != 0) 
#line 1675 
                   goto fail; else ;
  
#line 1677 
  status = ixgbe_get_i2c_ack(hw);
  
#line 1678 
  if (status != 0) 
#line 1679 
                   goto fail; else ;
  
#line 1681 
  status = ixgbe_clock_out_i2c_byte(hw,(unsigned char)((int)byte_offset));
  
#line 1682 
  if (status != 0) 
#line 1683 
                   goto fail; else ;
  
#line 1685 
  status = ixgbe_get_i2c_ack(hw);
  
#line 1686 
  if (status != 0) 
#line 1687 
                   goto fail; else ;
  
#line 1689 
  ixgbe_i2c_start(hw);
  
#line 1692 
  status = ixgbe_clock_out_i2c_byte(hw,(unsigned char)((int)((unsigned int)dev_addr | 1U)));
  
#line 1693 
  if (status != 0) 
#line 1694 
                   goto fail; else ;
  
#line 1696 
  status = ixgbe_get_i2c_ack(hw);
  
#line 1697 
  if (status != 0) 
#line 1698 
                   goto fail; else ;
  
#line 1700 
  status = ixgbe_clock_in_i2c_byte(hw,data);
  
#line 1701 
  if (status != 0) 
#line 1702 
                   goto fail; else ;
  
#line 1704 
  status = ixgbe_clock_out_i2c_bit(hw,(_Bool)((bool)((int)nack) != 0));
  
#line 1705 
  if (status != 0) 
#line 1706 
                   goto fail; else ;
  
#line 1708 
  ixgbe_i2c_stop(hw);
  
#line 1709 
  goto ldv_55026;
  fail: 
#line 1711 
  ;
  
#line 1712 
  ixgbe_i2c_bus_clear(hw);
  
#line 1713 
  (*(hw->mac.ops.release_swfw_sync))(hw,swfw_mask);
  
#line 1714 
  msleep(100U);
  
#line 1715 
  retry += 1U;
  
#line 1716 
  if (retry < max_retry) {
    
#line 1717 
    struct _ddebug descriptor = {.modname = "ixgbe", .function = "ixgbe_read_i2c_byte_generic", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_phy.c", .format = "I2C byte read error - Retrying.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1717U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 1717 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 1717 
                                                        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"I2C byte read error - Retrying.\n"); else ;
  }
  else {
    
#line 1719 
    struct _ddebug descriptor_0 = {.modname = "ixgbe", .function = "ixgbe_read_i2c_byte_generic", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_phy.c", .format = "I2C byte read error.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1719U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 1719 
    if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 1719 
                                                          __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"I2C byte read error.\n"); else ;
  }
  
#line 1721 
  if (retry < max_retry) 
#line 1723 
                         goto ldv_55030; else 
#line 1726 
                                              goto ldv_55026;
  ldv_55026: 
#line 1727 
  ;
  
#line 1723 
  (*(hw->mac.ops.release_swfw_sync))(hw,swfw_mask);
  
#line 1725 
  __retres = status;
  return_label: 
#line 1725 
                return __retres;
}


#line 1737  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_phy.c"
s32 ixgbe_write_i2c_byte_generic(struct ixgbe_hw *hw, u8 byte_offset, u8 dev_addr, u8 data)
{
  s32 __retres;
  s32 status;
  s32 tmp;
  
#line 1741 
  u32 max_retry = 1U;
  
#line 1742 
  u32 retry = 0U;
  
#line 1743 
  u32 swfw_mask = hw->phy.phy_semaphore_mask;
  
#line 1745 
  tmp = (*(hw->mac.ops.acquire_swfw_sync))(hw,swfw_mask);
  
#line 1745 
  if (tmp != 0) {
    
#line 1746 
    __retres = -16;
    
#line 1746 
    goto return_label;
  }
  else ;
  ldv_55046: 
#line 1747 
  ;
  
#line 1749 
  ixgbe_i2c_start(hw);
  
#line 1751 
  status = ixgbe_clock_out_i2c_byte(hw,(unsigned char)((int)dev_addr));
  
#line 1752 
  if (status != 0) 
#line 1753 
                   goto fail; else ;
  
#line 1755 
  status = ixgbe_get_i2c_ack(hw);
  
#line 1756 
  if (status != 0) 
#line 1757 
                   goto fail; else ;
  
#line 1759 
  status = ixgbe_clock_out_i2c_byte(hw,(unsigned char)((int)byte_offset));
  
#line 1760 
  if (status != 0) 
#line 1761 
                   goto fail; else ;
  
#line 1763 
  status = ixgbe_get_i2c_ack(hw);
  
#line 1764 
  if (status != 0) 
#line 1765 
                   goto fail; else ;
  
#line 1767 
  status = ixgbe_clock_out_i2c_byte(hw,(unsigned char)((int)data));
  
#line 1768 
  if (status != 0) 
#line 1769 
                   goto fail; else ;
  
#line 1771 
  status = ixgbe_get_i2c_ack(hw);
  
#line 1772 
  if (status != 0) 
#line 1773 
                   goto fail; else ;
  
#line 1775 
  ixgbe_i2c_stop(hw);
  
#line 1776 
  goto ldv_55042;
  fail: 
#line 1778 
  ;
  
#line 1779 
  ixgbe_i2c_bus_clear(hw);
  
#line 1780 
  retry += 1U;
  
#line 1781 
  if (retry < max_retry) {
    
#line 1782 
    struct _ddebug descriptor = {.modname = "ixgbe", .function = "ixgbe_write_i2c_byte_generic", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_phy.c", .format = "I2C byte write error - Retrying.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1782U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 1782 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 1782 
                                                        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"I2C byte write error - Retrying.\n"); else ;
  }
  else {
    
#line 1784 
    struct _ddebug descriptor_0 = {.modname = "ixgbe", .function = "ixgbe_write_i2c_byte_generic", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_phy.c", .format = "I2C byte write error.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1784U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 1784 
    if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 1784 
                                                          __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"I2C byte write error.\n"); else ;
  }
  
#line 1785 
  if (retry < max_retry) 
#line 1787 
                         goto ldv_55046; else 
#line 1790 
                                              goto ldv_55042;
  ldv_55042: 
#line 1791 
  ;
  
#line 1787 
  (*(hw->mac.ops.release_swfw_sync))(hw,swfw_mask);
  
#line 1789 
  __retres = status;
  return_label: 
#line 1789 
                return __retres;
}


#line 1798  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_phy.c"
static void ixgbe_i2c_start(struct ixgbe_hw *hw)
{
  
#line 1800 
  u32 i2cctl = ixgbe_read_reg(hw,*(hw->mvals + 23U));
  
#line 1803 
  ixgbe_set_i2c_data(hw,& i2cctl,(_Bool)1);
  
#line 1804 
  ixgbe_raise_i2c_clk(hw,& i2cctl);
  
#line 1807 
  __const_udelay(21475UL);
  
#line 1809 
  ixgbe_set_i2c_data(hw,& i2cctl,(_Bool)0);
  
#line 1812 
  __const_udelay(17180UL);
  
#line 1814 
  ixgbe_lower_i2c_clk(hw,& i2cctl);
  
#line 1817 
  __const_udelay(21475UL);
  
#line 1819 
  return;
}


#line 1827  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_phy.c"
static void ixgbe_i2c_stop(struct ixgbe_hw *hw)
{
  
#line 1829 
  u32 i2cctl = ixgbe_read_reg(hw,*(hw->mvals + 23U));
  
#line 1832 
  ixgbe_set_i2c_data(hw,& i2cctl,(_Bool)0);
  
#line 1833 
  ixgbe_raise_i2c_clk(hw,& i2cctl);
  
#line 1836 
  __const_udelay(17180UL);
  
#line 1838 
  ixgbe_set_i2c_data(hw,& i2cctl,(_Bool)1);
  
#line 1841 
  __const_udelay(21475UL);
  
#line 1843 
  return;
}


#line 1851  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_phy.c"
static s32 ixgbe_clock_in_i2c_byte(struct ixgbe_hw *hw, u8 *data)
{
  s32 __retres;
  s32 i;
  
#line 1854 
  bool bit = (_Bool)0;
  
#line 1856 
  i = 7;
  
#line 1856 
  goto ldv_55062;
  ldv_55061: 
#line 1857 
  ;
  
#line 1857 
  ixgbe_clock_in_i2c_bit(hw,& bit);
  
#line 1858 
  *data = (unsigned char)((int)*data | ((int)bit << i));
  
#line 1856 
  i -= 1;
  ldv_55062: 
#line 1857 
  ;
  
#line 1856 
  if (i >= 0) 
#line 1858 
              goto ldv_55061; else 
#line 1861 
                                   goto ldv_55063;
  ldv_55063: 
#line 1862 
  ;
  
#line 1861 
  __retres = 0;
  
#line 1861 
  return __retres;
}


#line 1871  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_phy.c"
static s32 ixgbe_clock_out_i2c_byte(struct ixgbe_hw *hw, u8 data)
{
  s32 status;
  s32 i;
  u32 i2cctl;
  
#line 1876 
  bool bit = (_Bool)0;
  
#line 1878 
  i = 7;
  
#line 1878 
  goto ldv_55074;
  ldv_55073: 
#line 1879 
  ;
  
#line 1879 
  bit = (_Bool)((((int)data >> i) & 1) != 0);
  
#line 1880 
  status = ixgbe_clock_out_i2c_bit(hw,(_Bool)((bool)((int)bit) != 0));
  
#line 1882 
  if (status != 0) 
#line 1883 
                   goto ldv_55072; else ;
  
#line 1878 
  i -= 1;
  ldv_55074: 
#line 1879 
  ;
  
#line 1878 
  if (i >= 0) 
#line 1880 
              goto ldv_55073; else 
#line 1883 
                                   goto ldv_55072;
  ldv_55072: 
#line 1884 
  ;
  
#line 1887 
  i2cctl = ixgbe_read_reg(hw,*(hw->mvals + 23U));
  
#line 1888 
  i2cctl = *(hw->mvals + 19U) | i2cctl;
  
#line 1889 
  ixgbe_write_reg(hw,*(hw->mvals + 23U),i2cctl);
  
#line 1890 
  ixgbe_read_reg(hw,8U);
  
#line 1892 
  return status;
}


#line 1901  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_phy.c"
static s32 ixgbe_get_i2c_ack(struct ixgbe_hw *hw)
{
  
#line 1903 
  s32 status = 0;
  
#line 1904 
  u32 i = 0U;
  
#line 1905 
  u32 i2cctl = ixgbe_read_reg(hw,*(hw->mvals + 23U));
  
#line 1906 
  u32 timeout = 10U;
  
#line 1907 
  bool ack = (_Bool)1;
  
#line 1909 
  ixgbe_raise_i2c_clk(hw,& i2cctl);
  
#line 1913 
  __const_udelay(17180UL);
  
#line 1917 
  i = 0U;
  
#line 1917 
  goto ldv_55085;
  ldv_55084: 
#line 1918 
  ;
  
#line 1918 
  i2cctl = ixgbe_read_reg(hw,*(hw->mvals + 23U));
  
#line 1919 
  ack = ixgbe_get_i2c_data(hw,& i2cctl);
  
#line 1921 
  __const_udelay(4295UL);
  
#line 1922 
  if (! ack) 
#line 1923 
             goto ldv_55083; else ;
  
#line 1917 
  i += 1U;
  ldv_55085: 
#line 1918 
  ;
  
#line 1917 
  if (i < timeout) 
#line 1919 
                   goto ldv_55084; else 
#line 1922 
                                        goto ldv_55083;
  ldv_55083: 
#line 1923 
  ;
  
#line 1926 
  if ((int)ack == 1) {
    {
      
#line 1927 
      struct _ddebug descriptor = {.modname = "ixgbe", .function = "ixgbe_get_i2c_ack", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_phy.c", .format = "I2C ack was not received.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1927U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1927 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 1927 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"I2C ack was not received.\n"); else ;
    }
    
#line 1928 
    status = -18;
  }
  else ;
  
#line 1931 
  ixgbe_lower_i2c_clk(hw,& i2cctl);
  
#line 1934 
  __const_udelay(21475UL);
  
#line 1936 
  return status;
}


#line 1946  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_phy.c"
static s32 ixgbe_clock_in_i2c_bit(struct ixgbe_hw *hw, bool *data)
{
  s32 __retres;
  
#line 1948 
  u32 i2cctl = ixgbe_read_reg(hw,*(hw->mvals + 23U));
  
#line 1950 
  ixgbe_raise_i2c_clk(hw,& i2cctl);
  
#line 1953 
  __const_udelay(17180UL);
  
#line 1955 
  i2cctl = ixgbe_read_reg(hw,*(hw->mvals + 23U));
  
#line 1956 
  *data = ixgbe_get_i2c_data(hw,& i2cctl);
  
#line 1958 
  ixgbe_lower_i2c_clk(hw,& i2cctl);
  
#line 1961 
  __const_udelay(21475UL);
  
#line 1963 
  __retres = 0;
  
#line 1963 
  return __retres;
}


#line 1973  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_phy.c"
static s32 ixgbe_clock_out_i2c_bit(struct ixgbe_hw *hw, bool data)
{
  s32 __retres;
  s32 status;
  
#line 1976 
  u32 i2cctl = ixgbe_read_reg(hw,*(hw->mvals + 23U));
  
#line 1978 
  status = ixgbe_set_i2c_data(hw,& i2cctl,(_Bool)((bool)((int)data) != 0));
  
#line 1979 
  if (status == 0) {
    
#line 1980 
    ixgbe_raise_i2c_clk(hw,& i2cctl);
    
#line 1983 
    __const_udelay(17180UL);
    
#line 1985 
    ixgbe_lower_i2c_clk(hw,& i2cctl);
    
#line 1990 
    __const_udelay(21475UL);
  }
  else {
    {
      
#line 1992 
      struct _ddebug descriptor = {.modname = "ixgbe", .function = "ixgbe_clock_out_i2c_bit", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_phy.c", .format = "I2C data was not set to %X\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1992U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1992 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 1992 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"I2C data was not set to %X\n",(int)data); else ;
    }
    
#line 1993 
    __retres = -18;
    
#line 1993 
    goto return_label;
  }
  
#line 1996 
  __retres = 0;
  return_label: 
#line 1996 
                return __retres;
}


#line 2005  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_phy.c"
static void ixgbe_raise_i2c_clk(struct ixgbe_hw *hw, u32 *i2cctl)
{
  
#line 2007 
  u32 i = 0U;
  
#line 2008 
  u32 timeout = 500U;
  
#line 2009 
  u32 i2cctl_r = 0U;
  
#line 2011 
  i = 0U;
  
#line 2011 
  goto ldv_55110;
  ldv_55109: 
#line 2012 
  ;
  
#line 2012 
  *i2cctl |= *(hw->mvals + 17U);
  
#line 2013 
  ixgbe_write_reg(hw,*(hw->mvals + 23U),*i2cctl);
  
#line 2014 
  ixgbe_read_reg(hw,8U);
  
#line 2016 
  __const_udelay(4295UL);
  
#line 2018 
  i2cctl_r = ixgbe_read_reg(hw,*(hw->mvals + 23U));
  
#line 2019 
  if ((*(hw->mvals + 16U) & i2cctl_r) != 0U) 
#line 2020 
                                             goto ldv_55108; else ;
  
#line 2011 
  i += 1U;
  ldv_55110: 
#line 2012 
  ;
  
#line 2011 
  if (i < timeout) 
#line 2013 
                   goto ldv_55109; else 
#line 2016 
                                        goto ldv_55108;
  ldv_55108: 
#line 2017 
  ;
  
#line 2018 
  return;
}


#line 2031  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_phy.c"
static void ixgbe_lower_i2c_clk(struct ixgbe_hw *hw, u32 *i2cctl)
{
  
#line 2034 
  *i2cctl &= ~ *(hw->mvals + 17U);
  
#line 2036 
  ixgbe_write_reg(hw,*(hw->mvals + 23U),*i2cctl);
  
#line 2037 
  ixgbe_read_reg(hw,8U);
  
#line 2040 
  __const_udelay(4295UL);
  
#line 2042 
  return;
}


#line 2051  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_phy.c"
static s32 ixgbe_set_i2c_data(struct ixgbe_hw *hw, u32 *i2cctl, bool data)
{
  s32 __retres;
  bool tmp;
  
#line 2053 
  if ((int)data != 0) 
#line 2054 
                      *i2cctl |= *(hw->mvals + 19U); else 
#line 2056 
                                                          *i2cctl &= ~ *(hw->mvals + 19U);
  
#line 2058 
  ixgbe_write_reg(hw,*(hw->mvals + 23U),*i2cctl);
  
#line 2059 
  ixgbe_read_reg(hw,8U);
  
#line 2062 
  __const_udelay(12885UL);
  
#line 2065 
  *i2cctl = ixgbe_read_reg(hw,*(hw->mvals + 23U));
  
#line 2066 
  tmp = ixgbe_get_i2c_data(hw,i2cctl);
  
#line 2066 
  ;
  
#line 2066 
  if ((int)tmp != (int)data) {
    {
      
#line 2067 
      struct _ddebug descriptor = {.modname = "ixgbe", .function = "ixgbe_set_i2c_data", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_phy.c", .format = "Error - I2C data was not set to %X.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))2067U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 2067 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 2067 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)((struct ixgbe_adapter *)hw->back)->netdev,"Error - I2C data was not set to %X.\n",(int)data); else ;
    }
    
#line 2068 
    __retres = -18;
    
#line 2068 
    goto return_label;
  }
  else ;
  
#line 2071 
  __retres = 0;
  return_label: 
#line 2071 
                return __retres;
}


#line 2081  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_phy.c"
static bool ixgbe_get_i2c_data(struct ixgbe_hw *hw, u32 *i2cctl)
{
  bool __retres;
  
#line 2083 
  if ((*i2cctl & *(hw->mvals + 18U)) != 0U) {
    
#line 2084 
    __retres = (_Bool)1;
    
#line 2084 
    goto return_label;
  }
  else ;
  
#line 2085 
  __retres = (_Bool)0;
  return_label: 
#line 2085 
                return __retres;
}


#line 2095  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_phy.c"
static void ixgbe_i2c_bus_clear(struct ixgbe_hw *hw)
{
  u32 i;
  
#line 2097 
  u32 i2cctl = ixgbe_read_reg(hw,*(hw->mvals + 23U));
  
#line 2100 
  ixgbe_i2c_start(hw);
  
#line 2102 
  ixgbe_set_i2c_data(hw,& i2cctl,(_Bool)1);
  
#line 2104 
  i = 0U;
  
#line 2104 
  goto ldv_55132;
  ldv_55131: 
#line 2105 
  ;
  
#line 2105 
  ixgbe_raise_i2c_clk(hw,& i2cctl);
  
#line 2108 
  __const_udelay(17180UL);
  
#line 2110 
  ixgbe_lower_i2c_clk(hw,& i2cctl);
  
#line 2113 
  __const_udelay(21475UL);
  
#line 2104 
  i += 1U;
  ldv_55132: 
#line 2105 
  ;
  
#line 2104 
  if (i <= 8U) 
#line 2106 
               goto ldv_55131; else 
#line 2109 
                                    goto ldv_55133;
  ldv_55133: 
#line 2110 
  ;
  
#line 2116 
  ixgbe_i2c_start(hw);
  
#line 2119 
  ixgbe_i2c_stop(hw);
  
#line 2120 
  return;
}


#line 2128  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_phy.c"
s32 ixgbe_tn_check_overtemp(struct ixgbe_hw *hw)
{
  s32 __retres;
  
#line 2130 
  u16 phy_data = (unsigned short)0U;
  
#line 2132 
  if ((unsigned int)hw->device_id != 5404U) {
    
#line 2133 
    __retres = 0;
    
#line 2133 
    goto return_label;
  }
  else ;
  
#line 2136 
  (*(hw->phy.ops.read_reg))(hw,36869U,1U,& phy_data);
  
#line 2139 
  if (((int)phy_data & 8) == 0) {
    
#line 2140 
    __retres = 0;
    
#line 2140 
    goto return_label;
  }
  else ;
  
#line 2142 
  __retres = -26;
  return_label: 
#line 2142 
                return __retres;
}


#line 2149  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_phy.c"
s32 ixgbe_set_copper_phy_power(struct ixgbe_hw *hw, bool on)
{
  s32 __retres;
  u32 status;
  u16 reg;
  enum ixgbe_media_type tmp;
  s32 tmp_0;
  s32 tmp_2;
  
#line 2155 
  tmp = (*(hw->mac.ops.get_media_type))(hw);
  
#line 2155 
  if (tmp != (unsigned int)ixgbe_media_type_copper) {
    
#line 2156 
    __retres = 0;
    
#line 2156 
    goto return_label;
  }
  else ;
  
#line 2158 
  tmp_0 = (*(hw->phy.ops.read_reg))(hw,0U,30U,& reg);
  
#line 2158 
  status = (unsigned int)tmp_0;
  
#line 2161 
  if (status != 0U) {
    
#line 2162 
    __retres = (int)status;
    
#line 2162 
    goto return_label;
  }
  else ;
  
#line 2164 
  if ((int)on != 0) 
#line 2165 
                    reg = (unsigned short)((unsigned int)reg & 63487U);
  else {
    bool tmp_1;
    
#line 2167 
    tmp_1 = ixgbe_check_reset_blocked(hw);
    
#line 2167 
    if ((int)tmp_1 != 0) {
      
#line 2168 
      __retres = 0;
      
#line 2168 
      goto return_label;
    }
    else ;
    
#line 2169 
    reg = (unsigned short)((unsigned int)reg | 2048U);
  }
  
#line 2172 
  tmp_2 = (*(hw->phy.ops.write_reg))(hw,0U,30U,(unsigned short)((int)reg));
  
#line 2172 
  status = (unsigned int)tmp_2;
  
#line 2175 
  __retres = (int)status;
  return_label: 
#line 2175 
                return __retres;
}


#line 9  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_fcoe.c.aux"
int ldv_atomic_dec_and_test(atomic_t *v);


#line 98  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/atomic.h"
static void atomic_inc_1(atomic_t *v);


#line 120 
static int atomic_dec_and_test(atomic_t *v);


#line 30  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock_api_smp.h"
void _raw_spin_lock_bh(raw_spinlock_t *);


#line 42 
void _raw_spin_unlock_bh(raw_spinlock_t *);


#line 355  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_lock_bh(spinlock_t *lock)
{
  
#line 357 
  _raw_spin_lock_bh(& lock->__anonCompField_spinlock_18.rlock);
  
#line 358 
  return;
}


#line 383 
static void ldv_spin_lock_bh_73(spinlock_t *lock);


#line 387 
static void ldv_spin_lock_bh_75(spinlock_t *lock);


#line 404  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_unlock_bh(spinlock_t *lock)
{
  
#line 406 
  _raw_spin_unlock_bh(& lock->__anonCompField_spinlock_18.rlock);
  
#line 407 
  return;
}


#line 436 
static void ldv_spin_unlock_bh_74(spinlock_t *lock);


#line 440 
static void ldv_spin_unlock_bh_76(spinlock_t *lock);


#line 127  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/percpu.h"
void *__alloc_percpu(size_t, size_t);


#line 128 
void free_percpu(void *);


#line 418  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/slab.h"
static void *kmalloc_1(size_t size, gfp_t flags);


#line 859  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
int pci_bus_read_config_byte(struct pci_bus *, unsigned int, int, u8 *);


#line 883  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
__inline static int pci_read_config_byte(struct pci_dev const *dev, int where, u8 *val)
{
  int tmp;
  
#line 885 
  tmp = pci_bus_read_config_byte(dev->bus,dev->devfn,where,val);
  
#line 885 
  return tmp;
}


#line 120  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/scatterlist.h"
__inline static struct page *sg_page(struct scatterlist *sg)
{
  struct page *__retres;
  
#line 123 
  if ((long)(sg->sg_magic != 2271560481UL) != 0L) {
    
#line 125 
    ldv_inline_asm();
    
#line 123 
    ;
  }
  else ;
  
#line 124 
  if ((long)((sg->page_link & 1UL) != 0UL) != 0L) {
    
#line 126 
    ldv_inline_asm();
    
#line 124 
    ;
  }
  else ;
  
#line 126 
  __retres = (struct page *)(sg->page_link & 18446744073709551612UL);
  
#line 126 
  return __retres;
}


#line 243  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/scatterlist.h"
__inline static void *sg_virt(struct scatterlist *sg)
{
  void *__retres;
  void *tmp_0;
  struct page *tmp;
  
#line 245 
  tmp = sg_page(sg);
  
#line 245 
  tmp_0 = lowmem_page_address((struct page const *)tmp);
  
#line 245 
  ;
  
#line 245 
  __retres = tmp_0 + sg->offset;
  
#line 245 
  return __retres;
}


#line 250 
struct scatterlist *sg_next(struct scatterlist *);


#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dmapool.h"
struct dma_pool *dma_pool_create(char const *, struct device *, size_t, size_t, size_t);


#line 22 
void dma_pool_destroy(struct dma_pool *);


#line 24 
void *dma_pool_alloc(struct dma_pool *, gfp_t, dma_addr_t *);


#line 27 
void dma_pool_free(struct dma_pool *, void *, dma_addr_t);


#line 47  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dma-debug.h"
void debug_dma_map_sg(struct device *, struct scatterlist *, int, int, int);


#line 50 
void debug_dma_unmap_sg(struct device *, struct scatterlist *, int, int);


#line 46  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/dma-mapping-common.h"
__inline static int dma_map_sg_attrs(struct device *dev, struct scatterlist *sg, int nents, enum dma_data_direction dir, struct dma_attrs *attrs)
{
  int i;
  int ents;
  struct scatterlist *s;
  void *tmp_0;
  int tmp_1;
  
#line 50 
  struct dma_map_ops *ops = get_dma_ops(dev);
  
#line 54 
  i = 0;
  
#line 54 
  s = sg;
  
#line 54 
  goto ldv_26054;
  ldv_26053: 
#line 55 
  ;
  
#line 55 
  ;
  
#line 55 
  tmp_0 = sg_virt(s);
  
#line 55 
  kmemcheck_mark_initialized(tmp_0,s->length);
  
#line 54 
  i += 1;
  
#line 54 
  s = sg_next(s);
  ldv_26054: 
#line 55 
  ;
  
#line 54 
  if (i < nents) 
#line 56 
                 goto ldv_26053; else 
#line 59 
                                      goto ldv_26055;
  ldv_26055: 
#line 60 
  ;
  
#line 56 
  tmp_1 = valid_dma_direction((int)dir);
  
#line 56 
  if ((long)(tmp_1 == 0) != 0L) {
    
#line 58 
    ldv_inline_asm();
    
#line 56 
    ;
  }
  else ;
  
#line 57 
  ents = (*(ops->map_sg))(dev,sg,nents,dir,attrs);
  
#line 58 
  if ((long)(ents < 0) != 0L) {
    
#line 60 
    ldv_inline_asm();
    
#line 58 
    ;
  }
  else ;
  
#line 59 
  debug_dma_map_sg(dev,sg,nents,ents,(int)dir);
  
#line 61 
  return ents;
}


#line 64  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/dma-mapping-common.h"
__inline static void dma_unmap_sg_attrs(struct device *dev, struct scatterlist *sg, int nents, enum dma_data_direction dir, struct dma_attrs *attrs)
{
  int tmp_0;
  
#line 68 
  struct dma_map_ops *ops = get_dma_ops(dev);
  
#line 70 
  tmp_0 = valid_dma_direction((int)dir);
  
#line 70 
  if ((long)(tmp_0 == 0) != 0L) {
    
#line 72 
    ldv_inline_asm();
    
#line 70 
    ;
  }
  else ;
  
#line 71 
  debug_dma_unmap_sg(dev,sg,nents,(int)dir);
  
#line 72 
  if (ops->unmap_sg != (void (*)(struct device *, struct scatterlist *, int , enum dma_data_direction , struct dma_attrs *))0) 
    
#line 73 
    (*(ops->unmap_sg))(dev,sg,nents,dir,attrs); else ;
  
#line 74 
  return;
}


#line 1885  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void skb_reset_transport_header(struct sk_buff *skb)
{
  
#line 1887 
  skb->transport_header = (unsigned short)((long)skb->data - (long)skb->head);
  
#line 1888 
  return;
}


#line 1890  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void skb_set_transport_header(struct sk_buff *skb, int const offset)
{
  
#line 1893 
  skb_reset_transport_header(skb);
  
#line 1894 
  skb->transport_header = (unsigned short)((int)skb->transport_header + (int)((unsigned short)offset));
  
#line 1895 
  return;
}


#line 1902  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void skb_reset_network_header(struct sk_buff *skb)
{
  
#line 1904 
  skb->network_header = (unsigned short)((long)skb->data - (long)skb->head);
  
#line 1905 
  return;
}


#line 1907  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void skb_set_network_header(struct sk_buff *skb, int const offset)
{
  
#line 1909 
  skb_reset_network_header(skb);
  
#line 1910 
  skb->network_header = (unsigned short)((int)skb->network_header + (int)((unsigned short)offset));
  
#line 1911 
  return;
}


#line 1913  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static unsigned char *skb_mac_header(struct sk_buff const *skb)
{
  unsigned char *__retres;
  
#line 1915 
  __retres = skb->head + (int)skb->mac_header;
  
#line 1915 
  return __retres;
}


#line 2545  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static int __skb_linearize(struct sk_buff *skb)
{
  int tmp_0;
  unsigned char *tmp;
  
#line 2547 
  tmp = __pskb_pull_tail(skb,(int)skb->data_len);
  
#line 2547 
  if (tmp != (unsigned char *)0U) 
#line 2547 
                                  tmp_0 = 0; else 
#line 2547 
                                                  tmp_0 = -12;
  
#line 2547 
  return tmp_0;
}


#line 2557  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static int skb_linearize(struct sk_buff *skb)
{
  int tmp_1;
  bool tmp;
  
#line 2559 
  tmp = skb_is_nonlinear((struct sk_buff const *)skb);
  
#line 2559 
  if ((int)tmp != 0) 
#line 2559 
                     tmp_1 = __skb_linearize(skb); else 
#line 2559 
                                                        tmp_1 = 0;
  
#line 2559 
  return tmp_1;
}


#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/if_ether.h"
__inline static struct ethhdr *eth_hdr(struct sk_buff const *skb)
{
  struct ethhdr *tmp;
  
#line 28 
  tmp = (struct ethhdr *)skb_mac_header(skb);
  
#line 28 
  return tmp;
}


#line 3472  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
void netdev_features_change(struct net_device *);


#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/scsi/fc_frame.h"
__inline static u32 ntoh24(u8 const *p)
{
  u32 __retres;
  
#line 40 
  __retres = (unsigned int)((((int)*p << 16) | ((int)*(p + 1U) << 8)) | (int)*(p + 2U));
  
#line 40 
  return __retres;
}


#line 47  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_fcoe.c"
__inline static void ixgbe_fcoe_clear_ddp(struct ixgbe_fcoe_ddp *ddp)
{
  
#line 49 
  ddp->len = 0;
  
#line 50 
  ddp->err = 1U;
  
#line 51 
  ddp->udl = (u64 *)0ULL;
  
#line 52 
  ddp->udp = 0ULL;
  
#line 53 
  ddp->sgl = (struct scatterlist *)0;
  
#line 54 
  ddp->sgc = 0U;
  
#line 55 
  return;
}


#line 68  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_fcoe.c"
int ixgbe_fcoe_ddp_put(struct net_device *netdev, u16 xid)
{
  int __retres;
  int len;
  struct ixgbe_fcoe *fcoe;
  struct ixgbe_adapter *adapter;
  struct ixgbe_fcoe_ddp *ddp;
  struct ixgbe_hw *hw;
  u32 fcbuff;
  
#line 77 
  if (netdev == (struct net_device *)0) {
    
#line 78 
    __retres = 0;
    
#line 78 
    goto return_label;
  }
  else ;
  
#line 80 
  if ((unsigned int)xid > 511U) {
    
#line 81 
    __retres = 0;
    
#line 81 
    goto return_label;
  }
  else ;
  
#line 83 
  adapter = (struct ixgbe_adapter *)netdev_priv((struct net_device const *)netdev);
  
#line 84 
  fcoe = & adapter->fcoe;
  
#line 85 
  ddp = & fcoe->ddp[(int)xid];
  
#line 86 
  if (ddp->udl == (u64 *)0ULL) {
    
#line 87 
    __retres = 0;
    
#line 87 
    goto return_label;
  }
  else ;
  
#line 89 
  hw = & adapter->hw;
  
#line 90 
  len = ddp->len;
  
#line 92 
  if (ddp->err == 0U) 
#line 93 
                      goto skip_ddpinv; else ;
  
#line 95 
  if (hw->mac.type == (unsigned int)ixgbe_mac_X550) {
    
#line 98 
    ixgbe_write_reg(hw,(unsigned int)(((int)xid + 10240) * 16),0U);
    
#line 99 
    ixgbe_write_reg(hw,(unsigned int)((int)xid * 16 + 163852),(unsigned int)xid | 16384U);
    
#line 103 
    ixgbe_write_reg(hw,(unsigned int)((int)xid * 16 + 131080),0U);
    
#line 106 
    ixgbe_write_reg(hw,(unsigned int)((int)xid * 16 + 131084),(unsigned int)xid | 16384U);
    
#line 110 
    ixgbe_write_reg(hw,(unsigned int)((int)xid * 16 + 131084),(unsigned int)xid | 32768U);
    
#line 112 
    fcbuff = ixgbe_read_reg(hw,(unsigned int)((int)xid * 16 + 131080));
  }
  else {
    
#line 115 
    ldv_spin_lock_bh_73(& fcoe->lock);
    
#line 116 
    ixgbe_write_reg(hw,20744U,0U);
    
#line 117 
    ixgbe_write_reg(hw,20752U,(unsigned int)xid | 16384U);
    
#line 119 
    ixgbe_write_reg(hw,9240U,0U);
    
#line 120 
    ixgbe_write_reg(hw,9248U,(unsigned int)xid | 16384U);
    
#line 124 
    ixgbe_write_reg(hw,9248U,(unsigned int)xid | 32768U);
    
#line 126 
    fcbuff = ixgbe_read_reg(hw,9240U);
    
#line 127 
    ldv_spin_unlock_bh_74(& fcoe->lock);
  }
  
#line 130 
  if ((fcbuff & 1U) != 0U) 
#line 131 
                           usleep_range(100UL,150UL); else ;
  skip_ddpinv: 
#line 133 
  ;
  
#line 134 
  if (ddp->sgl != (struct scatterlist *)0) 
#line 135 
                                           dma_unmap_sg_attrs(& (adapter->pdev)->dev,ddp->sgl,(int)ddp->sgc,(enum dma_data_direction)DMA_FROM_DEVICE,(struct dma_attrs *)0); else ;
  
#line 137 
  if (ddp->pool != (struct dma_pool *)0) {
    
#line 138 
    dma_pool_free(ddp->pool,(void *)ddp->udl,ddp->udp);
    
#line 139 
    ddp->pool = (struct dma_pool *)0;
  }
  else ;
  
#line 142 
  ixgbe_fcoe_clear_ddp(ddp);
  
#line 144 
  __retres = len;
  return_label: 
#line 144 
                return __retres;
}


#line 156  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_fcoe.c"
static int ixgbe_fcoe_ddp_setup(struct net_device *netdev, u16 xid, struct scatterlist *sgl, unsigned int sgc, int target_mode)
{
  int __retres;
  struct ixgbe_adapter *adapter;
  struct ixgbe_hw *hw;
  struct ixgbe_fcoe *fcoe;
  struct ixgbe_fcoe_ddp *ddp;
  struct ixgbe_fcoe_ddp_pool *ddp_pool;
  struct scatterlist *sg;
  unsigned int i;
  unsigned int j;
  unsigned int dmacount;
  unsigned int len;
  unsigned int lastsize;
  u32 fcbuff;
  u32 fcdmarw;
  u32 fcfltrw;
  u32 fcrxctl;
  int tmp_0;
  struct ixgbe_fcoe_ddp_pool *tmp_9;
  int tmp_10;
  unsigned int tmp_13;
  
#line 168 
  unsigned int const bufflen = 4096U;
  
#line 169 
  unsigned int firstoff = 0U;
  
#line 171 
  unsigned int thisoff = 0U;
  
#line 172 
  unsigned int thislen = 0U;
  
#line 174 
  dma_addr_t addr = 0ULL;
  
#line 176 
  if (netdev == (struct net_device *)0 || sgl == (struct scatterlist *)0) {
    
#line 177 
    __retres = 0;
    
#line 177 
    goto return_label;
  }
  else ;
  
#line 179 
  adapter = (struct ixgbe_adapter *)netdev_priv((struct net_device const *)netdev);
  
#line 180 
  if ((unsigned int)xid > 511U) {
    
#line 181 
    if (((int)adapter->msg_enable & 1) != 0) 
#line 181 
                                             netdev_warn((struct net_device const *)adapter->netdev,"xid=0x%x out-of-range\n",(int)xid); else ;
    
#line 182 
    __retres = 0;
    
#line 182 
    goto return_label;
  }
  else ;
  
#line 186 
  tmp_0 = constant_test_bit(2L,(unsigned long const volatile *)(& adapter->state));
  
#line 186 
  if (tmp_0 != 0) {
    
#line 188 
    __retres = 0;
    
#line 188 
    goto return_label;
  }
  else {
    int tmp_1;
    
#line 186 
    tmp_1 = constant_test_bit(1L,(unsigned long const volatile *)(& adapter->state));
    
#line 186 
    if (tmp_1 != 0) {
      
#line 188 
      __retres = 0;
      
#line 188 
      goto return_label;
    }
    else ;
  }
  
#line 190 
  fcoe = & adapter->fcoe;
  
#line 191 
  ddp = & fcoe->ddp[(int)xid];
  
#line 192 
  if (ddp->sgl != (struct scatterlist *)0) {
    
#line 193 
    if (((int)adapter->msg_enable & 1) != 0) 
#line 193 
                                             netdev_err((struct net_device const *)adapter->netdev,"xid 0x%x w/ non-null sgl=%p nents=%d\n",(int)xid,ddp->sgl,ddp->sgc); else ;
    
#line 195 
    __retres = 0;
    
#line 195 
    goto return_label;
  }
  else ;
  
#line 197 
  ixgbe_fcoe_clear_ddp(ddp);
  
#line 200 
  if (fcoe->ddp_pool == (struct ixgbe_fcoe_ddp_pool *)0) {
    
#line 201 
    if (((int)adapter->msg_enable & 1) != 0) 
#line 201 
                                             netdev_warn((struct net_device const *)adapter->netdev,"No ddp_pool resources allocated\n"); else ;
    
#line 202 
    __retres = 0;
    
#line 202 
    goto return_label;
  }
  else ;
  {
    struct ixgbe_fcoe_ddp_pool *tmp_8;
    {
      
#line 205 
      void const *__vpp_verify = (void const *)0;
      
#line 205 
      void const *tmp_2 = __vpp_verify;
    }
    {
      unsigned long __ptr;
      int tmp_7;
      
#line 206 
      ldv_inline_asm();
      {
        int tmp_6;
        
#line 205 
        __preempt_count_add(1);
        
#line 206 
        ldv_inline_asm();
        {
          int pscr_ret__;
          {
            
#line 205 
            void const *__vpp_verify_0 = (void const *)0;
            
#line 205 
            void const *tmp_4 = __vpp_verify_0;
          }
          
#line 205 
          switch (4UL) {
            int tmp_2_0;
            int tmp_3;
            int tmp_4_0;
            int tmp_5;
            case (unsigned long)1: 
#line 205 
            ;
            {
              int pfo_ret__;
              
#line 205 
              switch (4UL) {
                case (unsigned long)1: 
#line 205 
                ;
                
#line 206 
                ldv_inline_asm();
                
#line 205 
                goto ldv_61046;
                case (unsigned long)2: 
#line 205 
                ;
                
#line 206 
                ldv_inline_asm();
                
#line 205 
                goto ldv_61046;
                case (unsigned long)4: 
#line 205 
                ;
                
#line 206 
                ldv_inline_asm();
                
#line 205 
                goto ldv_61046;
                case (unsigned long)8: 
#line 205 
                ;
                
#line 206 
                ldv_inline_asm();
                
#line 205 
                goto ldv_61046;
                default: 
#line 205 
                ;
                
#line 205 
                __bad_percpu_size();
              }
              ldv_61046: 
#line 205 
              ;
              
#line 205 
              tmp_2_0 = pfo_ret__;
            }
            
#line 205 
            pscr_ret__ = tmp_2_0;
            
#line 205 
            goto ldv_61052;
            case (unsigned long)2: 
#line 205 
            ;
            {
              int pfo_ret___0;
              
#line 205 
              switch (4UL) {
                case (unsigned long)1: 
#line 205 
                ;
                
#line 206 
                ldv_inline_asm();
                
#line 205 
                goto ldv_61056;
                case (unsigned long)2: 
#line 205 
                ;
                
#line 206 
                ldv_inline_asm();
                
#line 205 
                goto ldv_61056;
                case (unsigned long)4: 
#line 205 
                ;
                
#line 206 
                ldv_inline_asm();
                
#line 205 
                goto ldv_61056;
                case (unsigned long)8: 
#line 205 
                ;
                
#line 206 
                ldv_inline_asm();
                
#line 205 
                goto ldv_61056;
                default: 
#line 205 
                ;
                
#line 205 
                __bad_percpu_size();
              }
              ldv_61056: 
#line 205 
              ;
              
#line 205 
              tmp_3 = pfo_ret___0;
            }
            
#line 205 
            pscr_ret__ = tmp_3;
            
#line 205 
            goto ldv_61052;
            case (unsigned long)4: 
#line 205 
            ;
            {
              int pfo_ret___1;
              
#line 205 
              switch (4UL) {
                case (unsigned long)1: 
#line 205 
                ;
                
#line 206 
                ldv_inline_asm();
                
#line 205 
                goto ldv_61065;
                case (unsigned long)2: 
#line 205 
                ;
                
#line 206 
                ldv_inline_asm();
                
#line 205 
                goto ldv_61065;
                case (unsigned long)4: 
#line 205 
                ;
                
#line 206 
                ldv_inline_asm();
                
#line 205 
                goto ldv_61065;
                case (unsigned long)8: 
#line 205 
                ;
                
#line 206 
                ldv_inline_asm();
                
#line 205 
                goto ldv_61065;
                default: 
#line 205 
                ;
                
#line 205 
                __bad_percpu_size();
              }
              ldv_61065: 
#line 205 
              ;
              
#line 205 
              tmp_4_0 = pfo_ret___1;
            }
            
#line 205 
            pscr_ret__ = tmp_4_0;
            
#line 205 
            goto ldv_61052;
            case (unsigned long)8: 
#line 205 
            ;
            {
              int pfo_ret___2;
              
#line 205 
              switch (4UL) {
                case (unsigned long)1: 
#line 205 
                ;
                
#line 206 
                ldv_inline_asm();
                
#line 205 
                goto ldv_61074;
                case (unsigned long)2: 
#line 205 
                ;
                
#line 206 
                ldv_inline_asm();
                
#line 205 
                goto ldv_61074;
                case (unsigned long)4: 
#line 205 
                ;
                
#line 206 
                ldv_inline_asm();
                
#line 205 
                goto ldv_61074;
                case (unsigned long)8: 
#line 205 
                ;
                
#line 206 
                ldv_inline_asm();
                
#line 205 
                goto ldv_61074;
                default: 
#line 205 
                ;
                
#line 205 
                __bad_percpu_size();
              }
              ldv_61074: 
#line 205 
              ;
              
#line 205 
              tmp_5 = pfo_ret___2;
            }
            
#line 205 
            pscr_ret__ = tmp_5;
            
#line 205 
            goto ldv_61052;
            default: 
#line 205 
            ;
            
#line 205 
            __bad_size_call_parameter();
            
#line 205 
            goto ldv_61052;
          }
          ldv_61052: 
#line 205 
          ;
          
#line 205 
          tmp_6 = pscr_ret__;
        }
        
#line 205 
        tmp_7 = tmp_6;
      }
      
#line 205 
      ;
      
#line 205 
      tmp_8 = (struct ixgbe_fcoe_ddp_pool *)(__per_cpu_offset[tmp_7] + __ptr);
    }
    
#line 205 
    tmp_9 = tmp_8;
  }
  
#line 205 
  ddp_pool = tmp_9;
  
#line 206 
  if (ddp_pool->pool == (struct dma_pool *)0) {
    
#line 207 
    if (((int)adapter->msg_enable & 1) != 0) 
#line 207 
                                             netdev_warn((struct net_device const *)adapter->netdev,"xid=0x%x no ddp pool for fcoe\n",(int)xid); else ;
    
#line 208 
    goto out_noddp;
  }
  else ;
  
#line 212 
  tmp_10 = dma_map_sg_attrs(& (adapter->pdev)->dev,sgl,(int)sgc,(enum dma_data_direction)DMA_FROM_DEVICE,(struct dma_attrs *)0);
  
#line 212 
  dmacount = (unsigned int)tmp_10;
  
#line 213 
  if (dmacount == 0U) {
    
#line 214 
    if (((int)adapter->msg_enable & 1) != 0) 
#line 214 
                                             netdev_err((struct net_device const *)adapter->netdev,"xid 0x%x DMA map error\n",(int)xid); else ;
    
#line 215 
    goto out_noddp;
  }
  else ;
  
#line 219 
  ddp->udl = (u64 *)dma_pool_alloc(ddp_pool->pool,32U,& ddp->udp);
  
#line 220 
  if (ddp->udl == (u64 *)0ULL) {
    
#line 221 
    if (((int)adapter->msg_enable & 1) != 0) 
#line 221 
                                             netdev_err((struct net_device const *)adapter->netdev,"failed allocated ddp context\n"); else ;
    
#line 222 
    goto out_noddp_unmap;
  }
  else ;
  
#line 224 
  ddp->pool = ddp_pool->pool;
  
#line 225 
  ddp->sgl = sgl;
  
#line 226 
  ddp->sgc = sgc;
  
#line 228 
  j = 0U;
  
#line 229 
  i = 0U;
  
#line 229 
  sg = sgl;
  
#line 229 
  goto ldv_61095;
  ldv_61094: 
#line 230 
  ;
  
#line 230 
  addr = sg->dma_address;
  
#line 231 
  len = sg->dma_length;
  
#line 232 
  goto ldv_61092;
  ldv_61091: 
#line 233 
  ;
  
#line 234 
  if (j > 255U) {
    
#line 235 
    ddp_pool->noddp += 1ULL;
    
#line 236 
    goto out_noddp_free;
  }
  else ;
  
#line 240 
  thisoff = (unsigned int)addr & 4095U;
  {
    unsigned int tmp_12;
    
#line 241 
    unsigned int _min1 = 4096U - thisoff;
    
#line 241 
    unsigned int _min2 = len;
    
#line 241 
    if (_min1 < _min2) 
#line 241 
                       tmp_12 = _min1; else 
#line 241 
                                            tmp_12 = _min2;
    
#line 241 
    tmp_13 = tmp_12;
  }
  
#line 241 
  thislen = tmp_13;
  
#line 246 
  if (j != 0U && thisoff != 0U) 
#line 247 
                                goto out_noddp_free; else ;
  
#line 253 
  if ((dmacount + 4294967295U != i || thislen != len) && thislen + thisoff != 4096U) 
    
#line 255 
    goto out_noddp_free; else ;
  
#line 257 
  *(ddp->udl + j) = addr - (unsigned long long)thisoff;
  
#line 259 
  if (j == 0U) 
#line 260 
               firstoff = thisoff; else ;
  
#line 261 
  len -= thislen;
  
#line 262 
  addr = (unsigned long long)thislen + addr;
  
#line 263 
  j += 1U;
  ldv_61092: 
#line 264 
  ;
  
#line 232 
  if (len != 0U) 
#line 234 
                 goto ldv_61091; else 
#line 237 
                                      goto ldv_61093;
  ldv_61093: 
#line 238 
  ;
  
#line 229 
  i += 1U;
  
#line 229 
  sg = sg_next(sg);
  ldv_61095: 
#line 230 
  ;
  
#line 229 
  if (i < dmacount) 
#line 231 
                    goto ldv_61094; else 
#line 234 
                                         goto ldv_61096;
  ldv_61096: 
#line 235 
  ;
  
#line 267 
  lastsize = thisoff + thislen;
  
#line 273 
  if (lastsize == 4096U) {
    
#line 274 
    if (j > 255U) {
      
#line 275 
      ddp_pool->noddp_ext_buff += 1ULL;
      
#line 276 
      goto out_noddp_free;
    }
    else ;
    
#line 279 
    *(ddp->udl + j) = fcoe->extra_ddp_buffer_dma;
    
#line 280 
    j += 1U;
    
#line 281 
    lastsize = 1U;
  }
  else ;
  
#line 283 
  ldv_inline_asm();
  
#line 283 
  __preempt_count_sub(1);
  
#line 285 
  fcbuff = 0U;
  
#line 286 
  fcbuff = ((j << 8) & 65535U) | fcbuff;
  
#line 287 
  fcbuff = (firstoff << 16) | fcbuff;
  
#line 289 
  if (target_mode != 0) 
#line 290 
                        fcbuff |= 128U; else ;
  
#line 291 
  fcbuff |= 1U;
  
#line 293 
  fcdmarw = (unsigned int)xid;
  
#line 294 
  fcdmarw |= 16384U;
  
#line 295 
  fcdmarw = (lastsize << 16) | fcdmarw;
  
#line 297 
  fcfltrw = (unsigned int)xid;
  
#line 298 
  fcfltrw |= 16384U;
  
#line 301 
  hw = & adapter->hw;
  
#line 305 
  if (target_mode != 0) {
    int tmp_14;
    
#line 305 
    tmp_14 = constant_test_bit(1L,(unsigned long const volatile *)(& fcoe->mode));
    
#line 305 
    if (tmp_14 == 0) {
      
#line 306 
      set_bit(1L,(unsigned long volatile *)(& fcoe->mode));
      
#line 307 
      fcrxctl = ixgbe_read_reg(hw,20736U);
      
#line 308 
      fcrxctl |= 8U;
      
#line 309 
      ixgbe_write_reg(hw,20736U,fcrxctl);
    }
    else ;
  }
  else ;
  
#line 312 
  if (hw->mac.type == (unsigned int)ixgbe_mac_X550) {
    
#line 315 
    ixgbe_write_reg(hw,(unsigned int)(((int)xid + 8192) * 16),(unsigned int)ddp->udp);
    
#line 317 
    ixgbe_write_reg(hw,(unsigned int)((int)xid * 16 + 131076),(unsigned int)(ddp->udp >> 32));
    
#line 318 
    ixgbe_write_reg(hw,(unsigned int)((int)xid * 16 + 131080),fcbuff);
    
#line 319 
    ixgbe_write_reg(hw,(unsigned int)((int)xid * 16 + 131084),fcdmarw);
    
#line 321 
    ixgbe_write_reg(hw,(unsigned int)(((int)xid + 10240) * 16),1U);
    
#line 322 
    ixgbe_write_reg(hw,(unsigned int)((int)xid * 16 + 163844),0U);
    
#line 323 
    ixgbe_write_reg(hw,(unsigned int)((int)xid * 16 + 163852),fcfltrw);
  }
  else {
    
#line 326 
    ldv_spin_lock_bh_75(& fcoe->lock);
    
#line 328 
    ixgbe_write_reg(hw,9232U,(unsigned int)ddp->udp);
    
#line 329 
    ixgbe_write_reg(hw,9236U,(unsigned int)(ddp->udp >> 32));
    
#line 330 
    ixgbe_write_reg(hw,9240U,fcbuff);
    
#line 331 
    ixgbe_write_reg(hw,9248U,fcdmarw);
    
#line 333 
    ixgbe_write_reg(hw,20952U,0U);
    
#line 334 
    ixgbe_write_reg(hw,20744U,1U);
    
#line 335 
    ixgbe_write_reg(hw,20752U,fcfltrw);
    
#line 337 
    ldv_spin_unlock_bh_76(& fcoe->lock);
  }
  
#line 340 
  __retres = 1;
  
#line 340 
  goto return_label;
  out_noddp_free: 
#line 342 
  ;
  
#line 343 
  dma_pool_free(ddp->pool,(void *)ddp->udl,ddp->udp);
  
#line 344 
  ixgbe_fcoe_clear_ddp(ddp);
  out_noddp_unmap: 
#line 346 
  ;
  
#line 347 
  dma_unmap_sg_attrs(& (adapter->pdev)->dev,sgl,(int)sgc,(enum dma_data_direction)DMA_FROM_DEVICE,(struct dma_attrs *)0);
  out_noddp: 
#line 348 
  ;
  
#line 349 
  ldv_inline_asm();
  
#line 349 
  __preempt_count_sub(1);
  
#line 350 
  __retres = 0;
  return_label: 
#line 350 
                return __retres;
}


#line 367  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_fcoe.c"
int ixgbe_fcoe_ddp_get(struct net_device *netdev, u16 xid, struct scatterlist *sgl, unsigned int sgc)
{
  int tmp;
  
#line 370 
  tmp = ixgbe_fcoe_ddp_setup(netdev,(unsigned short)((int)xid),sgl,sgc,0);
  
#line 370 
  return tmp;
}


#line 388  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_fcoe.c"
int ixgbe_fcoe_ddp_target(struct net_device *netdev, u16 xid, struct scatterlist *sgl, unsigned int sgc)
{
  int tmp;
  
#line 391 
  tmp = ixgbe_fcoe_ddp_setup(netdev,(unsigned short)((int)xid),sgl,sgc,1);
  
#line 391 
  return tmp;
}


#line 406  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_fcoe.c"
int ixgbe_fcoe_ddp(struct ixgbe_adapter *adapter, union ixgbe_adv_rx_desc *rx_desc, struct sk_buff *skb)
{
  int __retres;
  struct ixgbe_fcoe *fcoe;
  struct ixgbe_fcoe_ddp *ddp;
  struct fc_frame_header *fh;
  struct fcoe_crc_eof *crc;
  __le32 ddp_err;
  int ddp_max;
  u32 fctl;
  u16 xid;
  struct ethhdr *tmp_0;
  __le32 tmp_3;
  
#line 410 
  int rc = -22;
  
#line 415 
  __le32 fcerr = ixgbe_test_staterr(rx_desc,7340032U);
  
#line 421 
  if (fcerr == 1048576U) 
#line 422 
                         skb->ip_summed = (unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U; else 
                                                                    
#line 424 
                                                                    skb->ip_summed = (unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))1U;
  
#line 426 
  tmp_0 = eth_hdr((struct sk_buff const *)skb);
  
#line 426 
  ;
  
#line 426 
  if ((unsigned int)tmp_0->h_proto == 129U) 
#line 427 
                                            fh = (struct fc_frame_header *)(skb->data + 18U); else 
                                                                    
#line 430 
                                                                    fh = (struct fc_frame_header *)(skb->data + 14U);
  
#line 433 
  fctl = ntoh24((u8 const *)(& fh->fh_f_ctl));
  
#line 434 
  if ((fctl & 8388608U) != 0U) 
    
#line 435 
    if (0 != 0) 
#line 435 
                xid = (unsigned short)(((int)fh->fh_ox_id << 8) | ((int)fh->fh_ox_id >> 8)); else 
                                                                    
#line 435 
                                                                    xid = __fswab16((unsigned short)((int)fh->fh_ox_id));
  else 
    
#line 437 
    if (0 != 0) 
#line 437 
                xid = (unsigned short)(((int)fh->fh_rx_id << 8) | ((int)fh->fh_rx_id >> 8)); else 
                                                                    
#line 437 
                                                                    xid = __fswab16((unsigned short)((int)fh->fh_rx_id));
  
#line 439 
  ddp_max = 512;
  
#line 441 
  if (adapter->hw.mac.type == (unsigned int)ixgbe_mac_X550) 
#line 442 
                                                            ddp_max = 2048; else ;
  
#line 443 
  if ((int)xid >= ddp_max) {
    
#line 444 
    __retres = -22;
    
#line 444 
    goto return_label;
  }
  else ;
  
#line 446 
  fcoe = & adapter->fcoe;
  
#line 447 
  ddp = & fcoe->ddp[(int)xid];
  
#line 448 
  if (ddp->udl == (u64 *)0ULL) {
    
#line 449 
    __retres = -22;
    
#line 449 
    goto return_label;
  }
  else ;
  
#line 451 
  ddp_err = ixgbe_test_staterr(rx_desc,2154823680U);
  
#line 453 
  if (ddp_err != 0U) {
    
#line 454 
    __retres = -22;
    
#line 454 
    goto return_label;
  }
  else ;
  
#line 456 
  tmp_3 = ixgbe_test_staterr(rx_desc,48U);
  
#line 456 
  switch (tmp_3) {
    case (__le32)48: 
#line 458 
    ;
    
#line 460 
    ddp->len = (int)rx_desc->wb.lower.hi_dword.rss;
    
#line 461 
    rc = 0;
    
#line 462 
    goto ldv_61125;
    case (__le32)32: 
#line 464 
    ;
    
#line 465 
    dma_unmap_sg_attrs(& (adapter->pdev)->dev,ddp->sgl,(int)ddp->sgc,(enum dma_data_direction)DMA_FROM_DEVICE,(struct dma_attrs *)0);
    
#line 467 
    ddp->err = ddp_err;
    
#line 468 
    ddp->sgl = (struct scatterlist *)0;
    
#line 469 
    ddp->sgc = 0U;
    case (__le32)16: 
#line 472 
    ;
    
#line 474 
    ddp->len = (int)rx_desc->wb.lower.hi_dword.rss;
    
#line 475 
    if (ddp->len != 0) 
#line 476 
                       rc = ddp->len; else ;
    
#line 477 
    goto ldv_61125;
    case (__le32)0: 
#line 479 
    ;
    default: 
#line 480 
    ;
    
#line 481 
    goto ldv_61125;
  }
  ldv_61125: 
#line 491 
  ;
  
#line 491 
  if ((unsigned int)fh->fh_r_ctl == 1U && (fctl & 524288U) != 0U) {
    
#line 493 
    skb_linearize(skb);
    
#line 494 
    crc = (struct fcoe_crc_eof *)skb_put(skb,8U);
    
#line 495 
    crc->fcoe_eof = (unsigned char)66U;
  }
  else ;
  
#line 498 
  __retres = rc;
  return_label: 
#line 498 
                return __retres;
}


#line 511  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_fcoe.c"
int ixgbe_fso(struct ixgbe_ring *tx_ring, struct ixgbe_tx_buffer *first, u8 *hdr_len)
{
  int __retres;
  struct fc_frame_header *fh;
  u32 vlan_macip_lens;
  u32 mss_l4len_idx;
  u8 sof;
  u8 eof;
  bool tmp_0;
  unsigned char *tmp_2;
  bool tmp_8;
  unsigned char *tmp_9;
  int tmp_10;
  int tmp_11;
  
#line 515 
  struct sk_buff *skb = first->skb;
  
#line 518 
  u32 fcoe_sof_eof = 0U;
  
#line 522 
  tmp_0 = skb_is_gso((struct sk_buff const *)skb);
  
#line 522 
  if ((int)tmp_0 != 0) {
    unsigned char *tmp_1;
    
#line 522 
    tmp_1 = skb_end_pointer((struct sk_buff const *)skb);
    
#line 522 
    ;
    
#line 522 
    if ((unsigned int)((struct skb_shared_info *)tmp_1)->gso_type != 32U) {
      unsigned char *tmp;
      
#line 524 
      tmp = skb_end_pointer((struct sk_buff const *)skb);
      
#line 523 
      ;
      
#line 523 
      dev_err((struct device const *)tx_ring->dev,"Wrong gso type %d:expecting SKB_GSO_FCOE\n",(int)((struct skb_shared_info *)tmp)->gso_type);
      
#line 525 
      __retres = -22;
      
#line 525 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 529 
  skb_set_network_header(skb,(int)skb->mac_len);
  
#line 530 
  skb_set_transport_header(skb,(int)((unsigned int)skb->mac_len + 14U));
  
#line 534 
  tmp_2 = skb_network_header((struct sk_buff const *)skb);
  
#line 534 
  sof = ((struct fcoe_hdr *)tmp_2)->fcoe_sof;
  
#line 535 
  switch ((int)sof) {
    case 45: 
#line 536 
    ;
    
#line 537 
    fcoe_sof_eof = 32768U;
    
#line 538 
    goto ldv_61143;
    case 46: 
#line 539 
    ;
    
#line 540 
    fcoe_sof_eof = 36864U;
    
#line 542 
    goto ldv_61143;
    case 53: 
#line 543 
    ;
    
#line 544 
    goto ldv_61143;
    case 54: 
#line 545 
    ;
    
#line 546 
    fcoe_sof_eof = 4096U;
    
#line 547 
    goto ldv_61143;
    default: 
#line 548 
    ;
    
#line 549 
    dev_warn((struct device const *)tx_ring->dev,"unknown sof = 0x%x\n",(int)sof);
    
#line 550 
    __retres = -22;
    
#line 550 
    goto return_label;
  }
  ldv_61143: 
#line 554 
  ;
  
#line 554 
  skb_copy_bits((struct sk_buff const *)skb,(int)(skb->len + 4294967292U),(void *)(& eof),1);
  
#line 556 
  switch ((int)eof) {
    bool tmp_3;
    case 65: 
#line 557 
    ;
    
#line 558 
    fcoe_sof_eof = fcoe_sof_eof;
    
#line 559 
    goto ldv_61149;
    case 66: 
#line 560 
    ;
    
#line 562 
    tmp_3 = skb_is_gso((struct sk_buff const *)skb);
    
#line 562 
    if ((int)tmp_3 != 0) 
#line 563 
                         fcoe_sof_eof |= 16384U; else 
#line 566 
                                                      fcoe_sof_eof |= 1024U;
    
#line 567 
    goto ldv_61149;
    case 73: 
#line 568 
    ;
    
#line 569 
    fcoe_sof_eof |= 2048U;
    
#line 570 
    goto ldv_61149;
    case 80: 
#line 571 
    ;
    
#line 572 
    fcoe_sof_eof |= 3072U;
    
#line 573 
    goto ldv_61149;
    default: 
#line 574 
    ;
    
#line 575 
    dev_warn((struct device const *)tx_ring->dev,"unknown eof = 0x%x\n",(int)eof);
    
#line 576 
    __retres = -22;
    
#line 576 
    goto return_label;
  }
  ldv_61149: 
#line 580 
  ;
  
#line 580 
  fh = (struct fc_frame_header *)skb_transport_header((struct sk_buff const *)skb);
  
#line 581 
  if (((int)fh->fh_f_ctl[2] & 8) != 0) 
#line 582 
                                       fcoe_sof_eof |= 8192U; else ;
  
#line 585 
  *hdr_len = (unsigned char)8U;
  
#line 588 
  tmp_8 = skb_is_gso((struct sk_buff const *)skb);
  
#line 588 
  if ((int)tmp_8 != 0) {
    int tmp_5;
    unsigned char *tmp_6;
    unsigned char *tmp_7;
    
#line 589 
    tmp_5 = skb_transport_offset((struct sk_buff const *)skb);
    
#line 590 
    *hdr_len = (unsigned char)((int)*hdr_len + (int)((unsigned char)((unsigned long)tmp_5 + 24UL)));
    
#line 592 
    tmp_6 = skb_end_pointer((struct sk_buff const *)skb);
    
#line 592 
    tmp_7 = skb_end_pointer((struct sk_buff const *)skb);
    
#line 592 
    first->gso_segs = (unsigned short)((((skb->len - (unsigned int)*hdr_len) + (unsigned int)((struct skb_shared_info *)tmp_6)->gso_size) + 4294967295U) / (unsigned int)((struct skb_shared_info *)tmp_7)->gso_size);
    
#line 594 
    first->bytecount += (unsigned int)(((int)first->gso_segs + -1) * (int)*hdr_len);
    
#line 595 
    first->tx_flags |= 2U;
  }
  else ;
  
#line 599 
  first->tx_flags |= 136U;
  
#line 602 
  tmp_9 = skb_end_pointer((struct sk_buff const *)skb);
  
#line 602 
  mss_l4len_idx = (unsigned int)((int)((struct skb_shared_info *)tmp_9)->gso_size << 16);
  
#line 605 
  tmp_10 = skb_transport_offset((struct sk_buff const *)skb);
  
#line 605 
  vlan_macip_lens = (unsigned int)tmp_10 + 24U;
  
#line 608 
  tmp_11 = skb_transport_offset((struct sk_buff const *)skb);
  
#line 608 
  vlan_macip_lens = (unsigned int)((tmp_11 + -4) << 9) | vlan_macip_lens;
  
#line 609 
  vlan_macip_lens = (first->tx_flags & 4294901760U) | vlan_macip_lens;
  
#line 612 
  ixgbe_tx_ctxtdesc(tx_ring,vlan_macip_lens,fcoe_sof_eof,32768U,mss_l4len_idx);
  
#line 615 
  __retres = 0;
  return_label: 
#line 615 
                return __retres;
}


#line 618  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_fcoe.c"
static void ixgbe_fcoe_dma_pool_free(struct ixgbe_fcoe *fcoe, unsigned int cpu)
{
  struct ixgbe_fcoe_ddp_pool *ddp_pool;
  struct ixgbe_fcoe_ddp_pool *tmp_0_0;
  {
    struct ixgbe_fcoe_ddp_pool *tmp_0;
    {
      
#line 622 
      void const *__vpp_verify = (void const *)0;
      
#line 622 
      void const *tmp = __vpp_verify;
    }
    {
      unsigned long __ptr;
      
#line 623 
      ldv_inline_asm();
      
#line 622 
      tmp_0 = (struct ixgbe_fcoe_ddp_pool *)(__per_cpu_offset[cpu] + __ptr);
    }
    
#line 622 
    tmp_0_0 = tmp_0;
  }
  
#line 622 
  ddp_pool = tmp_0_0;
  
#line 623 
  if (ddp_pool->pool != (struct dma_pool *)0) 
#line 624 
                                              dma_pool_destroy(ddp_pool->pool); else ;
  
#line 625 
  ddp_pool->pool = (struct dma_pool *)0;
  
#line 626 
  return;
}


#line 628  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_fcoe.c"
static int ixgbe_fcoe_dma_pool_alloc(struct ixgbe_fcoe *fcoe, struct device *dev, unsigned int cpu)
{
  int __retres;
  struct ixgbe_fcoe_ddp_pool *ddp_pool;
  struct dma_pool *pool;
  char pool_name[32U];
  struct ixgbe_fcoe_ddp_pool *tmp_0_0;
  
#line 636 
  snprintf((char *)(& pool_name),32UL,"ixgbe_fcoe_ddp_%u",cpu);
  
#line 638 
  pool = dma_pool_create((char const *)(& pool_name),dev,2048UL,16UL,4096UL);
  
#line 640 
  if (pool == (struct dma_pool *)0) {
    
#line 641 
    __retres = -12;
    
#line 641 
    goto return_label;
  }
  else ;
  {
    struct ixgbe_fcoe_ddp_pool *tmp_0;
    {
      
#line 643 
      void const *__vpp_verify = (void const *)0;
      
#line 643 
      void const *tmp = __vpp_verify;
    }
    {
      unsigned long __ptr;
      
#line 644 
      ldv_inline_asm();
      
#line 643 
      tmp_0 = (struct ixgbe_fcoe_ddp_pool *)(__per_cpu_offset[cpu] + __ptr);
    }
    
#line 643 
    tmp_0_0 = tmp_0;
  }
  
#line 643 
  ddp_pool = tmp_0_0;
  
#line 644 
  ddp_pool->pool = pool;
  
#line 645 
  ddp_pool->noddp = 0ULL;
  
#line 646 
  ddp_pool->noddp_ext_buff = 0ULL;
  
#line 648 
  __retres = 0;
  return_label: 
#line 648 
                return __retres;
}


#line 659  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_fcoe.c"
void ixgbe_configure_fcoe(struct ixgbe_adapter *adapter)
{
  int i;
  int fcoe_q;
  int fcoe_i;
  int fcreta_size;
  u32 etqf;
  
#line 661 
  struct ixgbe_ring_feature *fcoe = & adapter->ring_feature[4];
  
#line 662 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 663 
  int fcoe_q_h = 0;
  
#line 668 
  if (((adapter->netdev)->features & 536870912ULL) == 0ULL) 
#line 669 
                                                            goto return_label; else ;
  
#line 672 
  etqf = 2281736454U;
  
#line 673 
  if ((adapter->flags & 8388608U) != 0U) {
    
#line 674 
    etqf |= 67108864U;
    
#line 675 
    etqf = (unsigned int)((int)adapter->ring_feature[1].offset << 20) | etqf;
  }
  else ;
  
#line 677 
  ixgbe_write_reg(hw,20784U,etqf);
  
#line 678 
  ixgbe_write_reg(hw,60424U,0U);
  
#line 681 
  if ((adapter->flags & 2097152U) == 0U) 
#line 682 
                                         goto return_label; else ;
  
#line 685 
  fcreta_size = 8;
  
#line 686 
  if (adapter->hw.mac.type == (unsigned int)ixgbe_mac_X550) 
#line 687 
                                                            fcreta_size = 32; else ;
  
#line 689 
  i = 0;
  
#line 689 
  goto ldv_61188;
  ldv_61187: 
#line 690 
  ;
  
#line 690 
  if (adapter->hw.mac.type == (unsigned int)ixgbe_mac_X550) {
    
#line 691 
    int fcoe_i_h = (int)fcoe->offset + (i + fcreta_size) % (int)fcoe->indices;
    
#line 693 
    fcoe_q_h = (int)(adapter->rx_ring[fcoe_i_h])->reg_idx;
    
#line 694 
    fcoe_q_h = (fcoe_q_h << 16) & 8323072;
  }
  else ;
  
#line 698 
  fcoe_i = (int)fcoe->offset + i % (int)fcoe->indices;
  
#line 699 
  fcoe_i &= 127;
  
#line 700 
  fcoe_q = (int)(adapter->rx_ring[fcoe_i])->reg_idx;
  
#line 701 
  fcoe_q |= fcoe_q_h;
  
#line 702 
  ixgbe_write_reg(hw,(unsigned int)((i + 15172) * 4),(unsigned int)fcoe_q);
  
#line 689 
  i += 1;
  ldv_61188: 
#line 690 
  ;
  
#line 689 
  if (i < fcreta_size) 
#line 691 
                       goto ldv_61187; else 
#line 694 
                                            goto ldv_61189;
  ldv_61189: 
#line 695 
  ;
  
#line 704 
  ixgbe_write_reg(hw,60672U,1U);
  
#line 707 
  etqf = 2147518740U;
  
#line 708 
  if ((adapter->flags & 8388608U) != 0U) {
    
#line 709 
    etqf |= 67108864U;
    
#line 710 
    etqf = (unsigned int)((int)adapter->ring_feature[1].offset << 20) | etqf;
  }
  else ;
  
#line 712 
  ixgbe_write_reg(hw,20792U,etqf);
  
#line 715 
  fcoe_q = (int)(adapter->rx_ring[(int)fcoe->offset])->reg_idx;
  
#line 716 
  ixgbe_write_reg(hw,60432U,(unsigned int)(fcoe_q << 16) | 2147483648U);
  
#line 721 
  ixgbe_write_reg(hw,20736U,128U);
  return_label: 
#line 722 
                return;
}


#line 734  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_fcoe.c"
void ixgbe_free_fcoe_ddp_resources(struct ixgbe_adapter *adapter)
{
  int cpu;
  int i;
  int ddp_max;
  unsigned int tmp;
  
#line 736 
  struct ixgbe_fcoe *fcoe = & adapter->fcoe;
  
#line 740 
  if (fcoe->ddp_pool == (struct ixgbe_fcoe_ddp_pool *)0) 
#line 741 
                                                         goto return_label; else ;
  
#line 743 
  ddp_max = 512;
  
#line 745 
  if (adapter->hw.mac.type == (unsigned int)ixgbe_mac_X550) 
#line 746 
                                                            ddp_max = 2048; else ;
  
#line 748 
  i = 0;
  
#line 748 
  goto ldv_61198;
  ldv_61197: 
#line 749 
  ;
  
#line 749 
  ixgbe_fcoe_ddp_put(adapter->netdev,(unsigned short)((int)((unsigned short)i)));
  
#line 748 
  i += 1;
  ldv_61198: 
#line 749 
  ;
  
#line 748 
  if (i < ddp_max) 
#line 750 
                   goto ldv_61197; else 
#line 753 
                                        goto ldv_61199;
  ldv_61199: 
#line 754 
  ;
  
#line 751 
  cpu = -1;
  
#line 751 
  goto ldv_61201;
  ldv_61200: 
#line 752 
  ;
  
#line 752 
  ixgbe_fcoe_dma_pool_free(fcoe,(unsigned int)cpu);
  ldv_61201: 
#line 753 
  ;
  
#line 751 
  tmp = cpumask_next(cpu,cpu_possible_mask);
  
#line 751 
  cpu = (int)tmp;
  
#line 751 
  if (cpu < nr_cpu_ids) 
#line 753 
                        goto ldv_61200; else 
#line 756 
                                             goto ldv_61202;
  ldv_61202: 
#line 757 
  ;
  
#line 754 
  dma_unmap_single_attrs(& (adapter->pdev)->dev,fcoe->extra_ddp_buffer_dma,4096UL,(enum dma_data_direction)DMA_FROM_DEVICE,(struct dma_attrs *)0);
  
#line 758 
  kfree((void const *)fcoe->extra_ddp_buffer);
  
#line 760 
  fcoe->extra_ddp_buffer = (void *)0;
  
#line 761 
  fcoe->extra_ddp_buffer_dma = 0ULL;
  return_label: 
#line 762 
                return;
}


#line 772  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_fcoe.c"
int ixgbe_setup_fcoe_ddp_resources(struct ixgbe_adapter *adapter)
{
  int __retres;
  void *buffer;
  dma_addr_t dma;
  unsigned int cpu;
  int tmp;
  
#line 774 
  struct ixgbe_fcoe *fcoe = & adapter->fcoe;
  
#line 775 
  struct device *dev = & (adapter->pdev)->dev;
  
#line 781 
  if (fcoe->ddp_pool == (struct ixgbe_fcoe_ddp_pool *)0) {
    
#line 782 
    __retres = 0;
    
#line 782 
    goto return_label;
  }
  else ;
  
#line 785 
  buffer = kmalloc_1(4096UL,32U);
  
#line 786 
  if (buffer == (void *)0) {
    
#line 787 
    __retres = -12;
    
#line 787 
    goto return_label;
  }
  else ;
  
#line 789 
  dma = dma_map_single_attrs(dev,buffer,4096UL,(enum dma_data_direction)DMA_FROM_DEVICE,(struct dma_attrs *)0);
  
#line 790 
  tmp = dma_mapping_error(dev,dma);
  
#line 790 
  if (tmp != 0) {
    
#line 791 
    if (((int)adapter->msg_enable & 1) != 0) 
#line 791 
                                             netdev_err((struct net_device const *)adapter->netdev,"failed to map extra DDP buffer\n"); else ;
    
#line 792 
    kfree((void const *)buffer);
    
#line 793 
    __retres = -12;
    
#line 793 
    goto return_label;
  }
  else ;
  
#line 796 
  fcoe->extra_ddp_buffer = buffer;
  
#line 797 
  fcoe->extra_ddp_buffer_dma = dma;
  
#line 800 
  cpu = 4294967295U;
  
#line 800 
  goto ldv_61212;
  ldv_61213: 
#line 801 
  ;
  {
    
#line 801 
    int err = ixgbe_fcoe_dma_pool_alloc(fcoe,dev,cpu);
    
#line 802 
    if (err == 0) 
#line 803 
                  goto ldv_61212; else ;
    
#line 805 
    if (((int)adapter->msg_enable & 1) != 0) 
#line 805 
                                             netdev_err((struct net_device const *)adapter->netdev,"failed to alloc DDP pool on cpu:%d\n",cpu); else ;
    
#line 806 
    ixgbe_free_fcoe_ddp_resources(adapter);
    
#line 807 
    __retres = -12;
    
#line 807 
    goto return_label;
  }
  ldv_61212: 
#line 809 
  ;
  
#line 800 
  cpu = cpumask_next((int)cpu,cpu_possible_mask);
  
#line 800 
  if (cpu < (unsigned int)nr_cpu_ids) 
#line 802 
                                      goto ldv_61213; else 
#line 805 
                                                           goto ldv_61214;
  ldv_61214: 
#line 806 
  ;
  
#line 810 
  __retres = 0;
  return_label: 
#line 810 
                return __retres;
}


#line 813  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_fcoe.c"
static int ixgbe_fcoe_ddp_enable(struct ixgbe_adapter *adapter)
{
  int __retres;
  
#line 815 
  struct ixgbe_fcoe *fcoe = & adapter->fcoe;
  
#line 817 
  if ((adapter->flags & 1048576U) == 0U) {
    
#line 818 
    __retres = -22;
    
#line 818 
    goto return_label;
  }
  else ;
  
#line 820 
  fcoe->ddp_pool = (struct ixgbe_fcoe_ddp_pool *)__alloc_percpu(24UL,8UL);
  
#line 822 
  if (fcoe->ddp_pool == (struct ixgbe_fcoe_ddp_pool *)0) {
    
#line 823 
    if (((int)adapter->msg_enable & 1) != 0) 
#line 823 
                                             netdev_err((struct net_device const *)adapter->netdev,"failed to allocate percpu DDP resources\n"); else ;
    
#line 824 
    __retres = -12;
    
#line 824 
    goto return_label;
  }
  else ;
  
#line 827 
  (adapter->netdev)->fcoe_ddp_xid = 511U;
  
#line 829 
  if (adapter->hw.mac.type == (unsigned int)ixgbe_mac_X550) 
#line 830 
                                                            (adapter->netdev)->fcoe_ddp_xid = 2047U; else ;
  
#line 832 
  __retres = 0;
  return_label: 
#line 832 
                return __retres;
}


#line 835  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_fcoe.c"
static void ixgbe_fcoe_ddp_disable(struct ixgbe_adapter *adapter)
{
  
#line 837 
  struct ixgbe_fcoe *fcoe = & adapter->fcoe;
  
#line 839 
  (adapter->netdev)->fcoe_ddp_xid = 0U;
  
#line 841 
  if (fcoe->ddp_pool == (struct ixgbe_fcoe_ddp_pool *)0) 
#line 842 
                                                         goto return_label; else ;
  
#line 844 
  free_percpu((void *)fcoe->ddp_pool);
  
#line 845 
  fcoe->ddp_pool = (struct ixgbe_fcoe_ddp_pool *)0;
  return_label: 
#line 846 
                return;
}


#line 856  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_fcoe.c"
int ixgbe_fcoe_enable(struct net_device *netdev)
{
  int __retres;
  bool tmp_0;
  bool tmp_1;
  
#line 858 
  struct ixgbe_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 859 
  struct ixgbe_fcoe *fcoe = & adapter->fcoe;
  
#line 861 
  atomic_inc_1(& fcoe->refcnt);
  
#line 863 
  if ((adapter->flags & 1048576U) == 0U) {
    
#line 864 
    __retres = -22;
    
#line 864 
    goto return_label;
  }
  else ;
  
#line 866 
  if ((adapter->flags & 2097152U) != 0U) {
    
#line 867 
    __retres = -22;
    
#line 867 
    goto return_label;
  }
  else ;
  
#line 869 
  if (((int)adapter->msg_enable & 1) != 0) 
#line 869 
                                           netdev_info((struct net_device const *)adapter->netdev,"Enabling FCoE offload features.\n"); else ;
  
#line 871 
  if ((adapter->flags & 8388608U) != 0U) {
    
#line 872 
    if (((int)adapter->msg_enable & 2) != 0) 
#line 872 
                                             netdev_warn((struct net_device const *)adapter->netdev,"Enabling FCoE on PF will disable legacy VFs\n"); else ;
  }
  else ;
  
#line 874 
  tmp_0 = netif_running((struct net_device const *)netdev);
  
#line 874 
  if ((int)tmp_0 != 0) 
#line 875 
                       (*((netdev->netdev_ops)->ndo_stop))(netdev); else ;
  
#line 878 
  ixgbe_fcoe_ddp_enable(adapter);
  
#line 881 
  adapter->flags |= 2097152U;
  
#line 882 
  netdev->features |= 2147483648ULL;
  
#line 883 
  netdev_features_change(netdev);
  
#line 886 
  ixgbe_clear_interrupt_scheme(adapter);
  
#line 887 
  ixgbe_init_interrupt_scheme(adapter);
  
#line 889 
  tmp_1 = netif_running((struct net_device const *)netdev);
  
#line 889 
  if ((int)tmp_1 != 0) 
#line 890 
                       (*((netdev->netdev_ops)->ndo_open))(netdev); else ;
  
#line 892 
  __retres = 0;
  return_label: 
#line 892 
                return __retres;
}


#line 903  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_fcoe.c"
int ixgbe_fcoe_disable(struct net_device *netdev)
{
  int __retres;
  int tmp_0;
  bool tmp_1;
  bool tmp_2;
  
#line 905 
  struct ixgbe_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 907 
  tmp_0 = atomic_dec_and_test(& adapter->fcoe.refcnt);
  
#line 907 
  if (tmp_0 == 0) {
    
#line 908 
    __retres = -22;
    
#line 908 
    goto return_label;
  }
  else ;
  
#line 910 
  if ((adapter->flags & 2097152U) == 0U) {
    
#line 911 
    __retres = -22;
    
#line 911 
    goto return_label;
  }
  else ;
  
#line 913 
  if (((int)adapter->msg_enable & 1) != 0) 
#line 913 
                                           netdev_info((struct net_device const *)adapter->netdev,"Disabling FCoE offload features.\n"); else ;
  
#line 914 
  tmp_1 = netif_running((struct net_device const *)netdev);
  
#line 914 
  if ((int)tmp_1 != 0) 
#line 915 
                       (*((netdev->netdev_ops)->ndo_stop))(netdev); else ;
  
#line 918 
  ixgbe_fcoe_ddp_disable(adapter);
  
#line 921 
  adapter->flags &= 4292870143U;
  
#line 922 
  netdev->features &= 18446744071562067967ULL;
  
#line 924 
  netdev_features_change(netdev);
  
#line 927 
  ixgbe_clear_interrupt_scheme(adapter);
  
#line 928 
  ixgbe_init_interrupt_scheme(adapter);
  
#line 930 
  tmp_2 = netif_running((struct net_device const *)netdev);
  
#line 930 
  if ((int)tmp_2 != 0) 
#line 931 
                       (*((netdev->netdev_ops)->ndo_open))(netdev); else ;
  
#line 933 
  __retres = 0;
  return_label: 
#line 933 
                return __retres;
}


#line 948  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_fcoe.c"
int ixgbe_fcoe_get_wwn(struct net_device *netdev, u64 *wwn, int type)
{
  int __retres;
  
#line 950 
  u16 prefix = (unsigned short)65535U;
  
#line 951 
  struct ixgbe_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 952 
  struct ixgbe_mac_info *mac = & adapter->hw.mac;
  
#line 954 
  switch (type) {
    case 0: 
#line 955 
    ;
    
#line 956 
    prefix = mac->wwnn_prefix;
    
#line 957 
    goto ldv_61241;
    case 1: 
#line 958 
    ;
    
#line 959 
    prefix = mac->wwpn_prefix;
    
#line 960 
    goto ldv_61241;
    default: 
#line 961 
    ;
    
#line 962 
    goto ldv_61241;
  }
  ldv_61241: 
#line 965 
  ;
  
#line 965 
  if ((unsigned int)prefix != 65535U) {
    bool tmp_0;
    
#line 965 
    tmp_0 = is_valid_ether_addr((u8 const *)(& mac->san_addr));
    
#line 965 
    if ((int)tmp_0 != 0) {
      
#line 967 
      *wwn = (((((((unsigned long long)prefix << 48) | ((unsigned long long)mac->san_addr[0] << 40)) | ((unsigned long long)mac->san_addr[1] << 32)) | ((unsigned long long)mac->san_addr[2] << 24)) | ((unsigned long long)mac->san_addr[3] << 16)) | ((unsigned long long)mac->san_addr[4] << 8)) | (unsigned long long)mac->san_addr[5];
      
#line 974 
      __retres = 0;
      
#line 974 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 976 
  __retres = -22;
  return_label: 
#line 976 
                return __retres;
}


#line 988  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_fcoe.c"
int ixgbe_fcoe_get_hbainfo(struct net_device *netdev, struct netdev_fcoe_hbainfo *info)
{
  int __retres;
  int i;
  int pos;
  u8 buf[8U];
  
#line 991 
  struct ixgbe_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 992 
  struct ixgbe_hw *hw = & adapter->hw;
  
#line 996 
  if (info == (struct netdev_fcoe_hbainfo *)0) {
    
#line 997 
    __retres = -22;
    
#line 997 
    goto return_label;
  }
  else ;
  
#line 1000 
  if ((unsigned int)hw->mac.type + 4294967294U > 1U) {
    
#line 1002 
    __retres = -22;
    
#line 1002 
    goto return_label;
  }
  else ;
  
#line 1005 
  snprintf((char *)(& info->manufacturer),64UL,"Intel Corporation");
  
#line 1011 
  pos = pci_find_ext_capability(adapter->pdev,3);
  
#line 1012 
  if (pos != 0) {
    
#line 1013 
    pos += 4;
    
#line 1014 
    i = 0;
    
#line 1014 
    goto ldv_61254;
    ldv_61253: 
#line 1015 
    ;
    
#line 1015 
    pci_read_config_byte((struct pci_dev const *)adapter->pdev,pos + i,& buf[i]);
    
#line 1014 
    i += 1;
    ldv_61254: 
#line 1015 
    ;
    
#line 1014 
    if (i <= 7) 
#line 1016 
                goto ldv_61253; else 
#line 1019 
                                     goto ldv_61255;
    ldv_61255: 
#line 1020 
    ;
    
#line 1017 
    snprintf((char *)(& info->serial_number),64UL,"%02X%02X%02X%02X%02X%02X%02X%02X",(int)buf[7],(int)buf[6],(int)buf[5],(int)buf[4],(int)buf[3],(int)buf[2],(int)buf[1],(int)buf[0]);
  }
  else 
#line 1022 
       snprintf((char *)(& info->serial_number),64UL,"Unknown");
  
#line 1026 
  snprintf((char *)(& info->hardware_version),64UL,"Rev %d",(int)hw->revision_id);
  
#line 1030 
  snprintf((char *)(& info->driver_version),64UL,"%s v%s",(char *)(& ixgbe_driver_name),(char const *)(& ixgbe_driver_version));
  
#line 1036 
  snprintf((char *)(& info->firmware_version),64UL,"0x%08x",((int)adapter->eeprom_verh << 16) | (int)adapter->eeprom_verl);
  
#line 1043 
  if (hw->mac.type == (unsigned int)ixgbe_mac_82599EB) 
#line 1044 
                                                       snprintf((char *)(& info->model),256UL,"Intel 82599"); else 
                                                                    
#line 1048 
                                                                    snprintf((char *)(& info->model),256UL,"Intel X540");
  
#line 1054 
  snprintf((char *)(& info->model_description),256UL,"%s",(char *)(& ixgbe_default_device_descr));
  
#line 1059 
  __retres = 0;
  return_label: 
#line 1059 
                return __retres;
}


#line 1068  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/ixgbe/ixgbe_fcoe.c"
u8 ixgbe_fcoe_get_tc(struct ixgbe_adapter *adapter)
{
  u8 __retres;
  int tmp;
  
#line 1071 
  tmp = netdev_get_prio_tc_map((struct net_device const *)adapter->netdev,(unsigned int)adapter->fcoe.up);
  
#line 1071 
  __retres = (unsigned char)tmp;
  
#line 1071 
  return __retres;
}


#line 122  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_fcoe.c.aux"
static void atomic_inc_1(atomic_t *v)
{
  
#line 125 
  ldv_atomic_inc(v);
  
#line 126 
  return;
}


#line 136  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_fcoe.c.aux"
static int atomic_dec_and_test(atomic_t *v)
{
  int tmp;
  
#line 139 
  tmp = ldv_atomic_dec_and_test(v);
  
#line 139 
  return tmp;
}


#line 472  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_fcoe.c.aux"
static void *kmalloc_1(size_t size, gfp_t flags)
{
  void *tmp;
  
#line 475 
  tmp = ldv_kmalloc(size,flags);
  
#line 475 
  return tmp;
}


#line 749  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_fcoe.c.aux"
static void ldv_spin_lock_bh_73(spinlock_t *lock)
{
  
#line 753 
  ldv_spin_model_lock((char *)"lock_of_ixgbe_fcoe");
  
#line 755 
  spin_lock_bh(lock);
  
#line 756 
  return;
}


#line 759  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_fcoe.c.aux"
static void ldv_spin_unlock_bh_74(spinlock_t *lock)
{
  
#line 763 
  ldv_spin_model_unlock((char *)"lock_of_ixgbe_fcoe");
  
#line 765 
  spin_unlock_bh(lock);
  
#line 766 
  return;
}


#line 769  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_fcoe.c.aux"
static void ldv_spin_lock_bh_75(spinlock_t *lock)
{
  
#line 773 
  ldv_spin_model_lock((char *)"lock_of_ixgbe_fcoe");
  
#line 775 
  spin_lock_bh(lock);
  
#line 776 
  return;
}


#line 779  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/weaver/.tmp_ixgbe_fcoe.c.aux"
static void ldv_spin_unlock_bh_76(spinlock_t *lock)
{
  
#line 783 
  ldv_spin_model_unlock((char *)"lock_of_ixgbe_fcoe");
  
#line 785 
  spin_unlock_bh(lock);
  
#line 786 
  return;
}


#line 21  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
void ldv_atomic_add(int i, atomic_t *v)
{
  
#line 23 
  v->counter += i;
  
#line 24 
  return;
}


#line 27  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
void ldv_atomic_sub(int i, atomic_t *v)
{
  
#line 29 
  v->counter -= i;
  
#line 30 
  return;
}


#line 33  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
int ldv_atomic_sub_and_test(int i, atomic_t *v)
{
  int __retres;
  
#line 35 
  v->counter -= i;
  
#line 36 
  if (v->counter != 0) {
    
#line 37 
    __retres = 0;
    
#line 37 
    goto return_label;
  }
  else ;
  
#line 39 
  __retres = 1;
  return_label: 
#line 39 
                return __retres;
}


#line 43  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
void ldv_atomic_inc(atomic_t *v)
{
  
#line 45 
  v->counter += 1;
  
#line 46 
  return;
}


#line 49  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
void ldv_atomic_dec(atomic_t *v)
{
  
#line 51 
  v->counter -= 1;
  
#line 52 
  return;
}


#line 55  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
int ldv_atomic_dec_and_test(atomic_t *v)
{
  int __retres;
  
#line 57 
  v->counter -= 1;
  
#line 58 
  if (v->counter != 0) {
    
#line 59 
    __retres = 0;
    
#line 59 
    goto return_label;
  }
  else ;
  
#line 61 
  __retres = 1;
  return_label: 
#line 61 
                return __retres;
}


#line 65  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
int ldv_atomic_inc_and_test(atomic_t *v)
{
  int __retres;
  
#line 67 
  v->counter += 1;
  
#line 68 
  if (v->counter != 0) {
    
#line 69 
    __retres = 0;
    
#line 69 
    goto return_label;
  }
  else ;
  
#line 71 
  __retres = 1;
  return_label: 
#line 71 
                return __retres;
}


#line 75  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
int ldv_atomic_add_return(int i, atomic_t *v)
{
  int __retres;
  
#line 77 
  v->counter += i;
  
#line 78 
  __retres = v->counter;
  
#line 78 
  return __retres;
}


#line 82  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
int ldv_atomic_add_negative(int i, atomic_t *v)
{
  int __retres;
  
#line 84 
  v->counter += i;
  
#line 85 
  __retres = v->counter < 0;
  
#line 85 
  return __retres;
}


#line 89  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
int ldv_atomic_inc_short(short *v)
{
  int __retres;
  
#line 91 
  *v = (short)((unsigned int)*v + 1U);
  
#line 92 
  __retres = (int)*v;
  
#line 92 
  return __retres;
}


#line 23  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/device.h"
void *ldv_dev_get_drvdata(struct device const *dev);


#line 24 
int ldv_dev_set_drvdata(struct device *dev, void *data);


#line 30  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memory.h"
void *ldv_xmalloc(size_t size);


#line 31 
void *ldv_xzalloc(size_t size);


#line 28  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memlist.h"
struct ldv_list_element global_list = {.data = (void *)0, .next = (struct ldv_list_element *)0};

#line 33  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memlist.h"
__inline static ldv_list_ptr ldv_list_create(void *data)
{
  
#line 35 
  ldv_list_ptr list = (struct ldv_list_element *)0;
  
#line 37 
  list = (ldv_list_ptr)ldv_xmalloc(16UL);
  
#line 39 
  list->data = data;
  
#line 40 
  list->next = (struct ldv_list_element *)0;
  
#line 42 
  return list;
}


#line 45  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memlist.h"
__inline static void ldv_save_pointer(void *data)
{
  ldv_list_ptr element;
  ldv_list_ptr cached;
  
#line 50 
  if (global_list.data == (void *)0) {
    
#line 51 
    element = & global_list;
    
#line 52 
    element->data = data;
  }
  else {
    
#line 54 
    element = ldv_list_create(data);
    
#line 55 
    cached = global_list.next;
    
#line 56 
    global_list.next = element;
    
#line 57 
    element->next = cached;
  }
  
#line 60 
  return;
}


#line 28  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device const *dev)
{
  void *__retres;
  
#line 30 
  if (dev != (struct device const *)0 && dev->p != (struct device_private *)0) {
    
#line 31 
    __retres = (dev->p)->driver_data;
    
#line 31 
    goto return_label;
  }
  else ;
  
#line 33 
  __retres = (void *)0;
  return_label: 
#line 33 
                return __retres;
}


#line 42  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data)
{
  int __retres;
  
#line 44 
  dev->p = (struct device_private *)ldv_xzalloc(8UL);
  
#line 45 
  ldv_save_pointer((void *)dev->p);
  
#line 46 
  (dev->p)->driver_data = data;
  
#line 48 
  __retres = 0;
  
#line 48 
  return __retres;
}


#line 25  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memory.h"
void *ldv_zalloc(size_t size);


#line 23  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/drivers/spi.c"
struct spi_master *ldv_spi_alloc_master(struct device *host, unsigned int size)
{
  struct spi_master *__retres;
  struct spi_master *master;
  
#line 27 
  master = (struct spi_master *)ldv_zalloc((unsigned long)size + 2192UL);
  
#line 29 
  if (master == (struct spi_master *)0) {
    
#line 30 
    __retres = (struct spi_master *)0;
    
#line 30 
    goto return_label;
  }
  else ;
  
#line 32 
  ldv_dev_set_drvdata(& master->dev,(void *)(master + 1U));
  
#line 34 
  __retres = master;
  return_label: 
#line 34 
                return __retres;
}


#line 23  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/common.h"
void __VERIFIER_assume(int);


#line 21  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_is_err(void const *ptr)
{
  long __retres;
  
#line 23 
  __retres = (long)((unsigned long)ptr > 4294967295UL);
  
#line 23 
  return __retres;
}


#line 26  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error)
{
  void *__retres;
  
#line 28 
  __VERIFIER_assume(error < 0L);
  
#line 29 
  __retres = (void *)(4294967295L - error);
  
#line 29 
  return __retres;
}


#line 32  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_ptr_err(void const *ptr)
{
  long __retres;
  
#line 34 
  __VERIFIER_assume((unsigned long)ptr > 4294967295UL);
  
#line 35 
  __retres = (long)(4294967295UL - (unsigned long)ptr);
  
#line 35 
  return __retres;
}


#line 38  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_is_err_or_null(void const *ptr)
{
  long __retres;
  int tmp_0;
  
#line 40 
  if (ptr == (void const *)0) 
#line 40 
                              tmp_0 = 1;
  else {
    long tmp;
    
#line 40 
    tmp = ldv_is_err(ptr);
    
#line 40 
    if (tmp != 0L) 
#line 40 
                   tmp_0 = 1; else 
#line 40 
                                   tmp_0 = 0;
  }
  
#line 40 
  __retres = (long)tmp_0;
  
#line 40 
  return __retres;
}


#line 21  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/panic.h"
void ldv_panic(void);


#line 21  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void)
{
  
#line 23 
  __VERIFIER_assume(0);
  
#line 24 
  return;
}


#line 32  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.h"
void ldv_switch_to_interrupt_context(void);


#line 42 
void ldv_switch_to_process_context(void);


#line 50 
bool ldv_in_interrupt_context(void);


#line 112 
int ldv_post_init(int init_ret_val);


#line 132 
int ldv_post_probe(int probe_ret_val);


#line 133 
void ldv_check_return_value_probe(int);


#line 141 
int ldv_filter_err_code(int ret_val);


#line 25  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
static bool __ldv_in_interrupt_context = (_Bool)0;

#line 28  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
void ldv_switch_to_interrupt_context(void)
{
  
#line 30 
  __ldv_in_interrupt_context = (_Bool)1;
  
#line 31 
  return;
}


#line 34  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
void ldv_switch_to_process_context(void)
{
  
#line 36 
  __ldv_in_interrupt_context = (_Bool)0;
  
#line 37 
  return;
}


#line 39  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
bool ldv_in_interrupt_context(void)
{
  
#line 41 
  return __ldv_in_interrupt_context;
}


#line 44  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
static int ldv_filter_positive_int(int val)
{
  
#line 46 
  __VERIFIER_assume(val <= 0);
  
#line 47 
  return val;
}


#line 54  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
int ldv_post_init(int init_ret_val)
{
  int tmp;
  
#line 56 
  tmp = ldv_filter_positive_int(init_ret_val);
  
#line 56 
  return tmp;
}


#line 60  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
int ldv_post_probe(int probe_ret_val)
{
  int tmp;
  
#line 62 
  ldv_check_return_value_probe(probe_ret_val);
  
#line 63 
  tmp = ldv_filter_positive_int(probe_ret_val);
  
#line 63 
  return tmp;
}


#line 67  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
int ldv_filter_err_code(int ret_val)
{
  int tmp;
  
#line 69 
  tmp = ldv_filter_positive_int(ret_val);
  
#line 69 
  return tmp;
}


#line 26  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/slab.h"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags);


#line 28 
void ldv_check_alloc_flags(gfp_t);


#line 29 
void ldv_after_alloc(void *);


#line 23  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memory.h"
void *ldv_malloc(size_t size);


#line 24 
void *ldv_calloc(size_t nmemb, size_t size);


#line 21  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc(size_t size, gfp_t flags)
{
  void *res;
  
#line 25 
  ldv_check_alloc_flags(flags);
  
#line 26 
  res = ldv_malloc(size);
  
#line 27 
  ldv_after_alloc(res);
  
#line 29 
  return res;
}


#line 32  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags)
{
  void *res;
  
#line 36 
  ldv_check_alloc_flags(flags);
  
#line 37 
  res = ldv_calloc(n,size);
  
#line 38 
  ldv_after_alloc(res);
  
#line 40 
  return res;
}


#line 43  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kzalloc(size_t size, gfp_t flags)
{
  void *res;
  
#line 47 
  ldv_check_alloc_flags(flags);
  
#line 48 
  res = ldv_zalloc(size);
  
#line 49 
  ldv_after_alloc(res);
  
#line 51 
  return res;
}


#line 54  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  void *res;
  
#line 58 
  ldv_check_alloc_flags(flags);
  
#line 59 
  res = ldv_malloc(n * size);
  
#line 60 
  ldv_after_alloc(res);
  
#line 62 
  return res;
}


#line 26  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memory.h"
void ldv_free(void *s);


#line 35 
void *ldv_malloc_unknown_size(void);


#line 36 
void *ldv_calloc_unknown_size(void);


#line 37 
void *ldv_zalloc_unknown_size(void);


#line 40 
void *ldv_reference_malloc(size_t size);


#line 41 
void *ldv_reference_calloc(size_t nmemb, size_t size);


#line 42 
void *ldv_reference_zalloc(size_t size);


#line 43 
void ldv_reference_free(void *s);


#line 47 
void *ldv_reference_xmalloc(size_t size);


#line 48 
void *ldv_reference_xzalloc(size_t size);


#line 52 
void *ldv_reference_malloc_unknown_size(void);


#line 53 
void *ldv_reference_calloc_unknown_size(void);


#line 54 
void *ldv_reference_zalloc_unknown_size(void);


#line 61 
void *ldv_xmalloc_unknown_size(size_t size);


#line 32  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size);


#line 34  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc(size_t size)
{
  void *res;
  
#line 37 
  res = ldv_reference_malloc(size);
  
#line 38 
  if (res != (void *)0) {
    long tmp;
    
#line 39 
    tmp = ldv_is_err((void const *)res);
    
#line 39 
    __VERIFIER_assume(tmp == 0L);
  }
  else ;
  
#line 40 
  return res;
}


#line 43  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc(size_t nmemb, size_t size)
{
  void *res;
  
#line 46 
  res = ldv_reference_calloc(nmemb,size);
  
#line 47 
  if (res != (void *)0) {
    long tmp;
    
#line 48 
    tmp = ldv_is_err((void const *)res);
    
#line 48 
    __VERIFIER_assume(tmp == 0L);
  }
  else ;
  
#line 49 
  return res;
}


#line 52  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc(size_t size)
{
  void *res;
  
#line 55 
  res = ldv_reference_zalloc(size);
  
#line 56 
  if (res != (void *)0) {
    long tmp;
    
#line 57 
    tmp = ldv_is_err((void const *)res);
    
#line 57 
    __VERIFIER_assume(tmp == 0L);
  }
  else ;
  
#line 58 
  return res;
}


#line 61  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void ldv_free(void *s)
{
  
#line 63 
  ldv_reference_free(s);
  
#line 64 
  return;
}


#line 66  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc(size_t size)
{
  void *res;
  long tmp;
  
#line 69 
  res = ldv_reference_xmalloc(size);
  
#line 70 
  tmp = ldv_is_err((void const *)res);
  
#line 70 
  __VERIFIER_assume(tmp == 0L);
  
#line 71 
  return res;
}


#line 74  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xzalloc(size_t size)
{
  void *res;
  long tmp;
  
#line 77 
  res = ldv_reference_xzalloc(size);
  
#line 78 
  tmp = ldv_is_err((void const *)res);
  
#line 78 
  __VERIFIER_assume(tmp == 0L);
  
#line 79 
  return res;
}


#line 82  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc_unknown_size(void)
{
  void *res;
  
#line 85 
  res = ldv_reference_malloc_unknown_size();
  
#line 86 
  if (res != (void *)0) {
    long tmp;
    
#line 87 
    tmp = ldv_is_err((void const *)res);
    
#line 87 
    __VERIFIER_assume(tmp == 0L);
  }
  else ;
  
#line 88 
  return res;
}


#line 91  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void)
{
  void *res;
  
#line 94 
  res = ldv_reference_calloc_unknown_size();
  
#line 95 
  if (res != (void *)0) {
    long tmp;
    
#line 96 
    tmp = ldv_is_err((void const *)res);
    
#line 96 
    __VERIFIER_assume(tmp == 0L);
  }
  else ;
  
#line 97 
  return res;
}


#line 100  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void)
{
  void *res;
  
#line 103 
  res = ldv_reference_zalloc_unknown_size();
  
#line 104 
  if (res != (void *)0) {
    long tmp;
    
#line 105 
    tmp = ldv_is_err((void const *)res);
    
#line 105 
    __VERIFIER_assume(tmp == 0L);
  }
  else ;
  
#line 106 
  return res;
}


#line 109  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size)
{
  void *res;
  long tmp;
  
#line 112 
  res = ldv_reference_xmalloc_unknown_size(size);
  
#line 113 
  tmp = ldv_is_err((void const *)res);
  
#line 113 
  __VERIFIER_assume(tmp == 0L);
  
#line 114 
  return res;
}

long __builtin_expect(long exp, long c);


#line 22  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/common.h"
void __VERIFIER_error(void);


#line 24  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/gcc.c"
long __builtin_expect(long exp, long c)
{
  
#line 26 
  return exp;
}


#line 35  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/gcc.c"
void __builtin_trap(void)
{
  
#line 37 
  __VERIFIER_error();
  
#line 38 
  return;
}


#line 23  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.h"
int ldv_undef_int(void);


#line 24 
int ldv_undef_long(void);


#line 25 
unsigned int ldv_undef_uint(void);


#line 26 
unsigned long ldv_undef_ulong(void);


#line 27 
unsigned long long ldv_undef_ulonglong(void);


#line 28 
void *ldv_undef_ptr(void);


#line 31 
int ldv_undef_int_positive(void);


#line 34 
int ldv_undef_int_negative(void);


#line 37 
int ldv_undef_int_nonpositive(void);


#line 40 
void *ldv_undef_ptr_non_null(void);


#line 29  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __VERIFIER_nondet_int(void);


#line 31 
long __VERIFIER_nondet_long(void);


#line 38 
unsigned int __VERIFIER_nondet_uint(void);


#line 41 
unsigned long __VERIFIER_nondet_ulong(void);


#line 42 
unsigned long long __VERIFIER_nondet_ulonglong(void);


#line 43 
void *__VERIFIER_nondet_pointer(void);


#line 46  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int(void)
{
  int tmp;
  
#line 48 
  tmp = __VERIFIER_nondet_int();
  
#line 48 
  return tmp;
}


#line 51  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_long(void)
{
  int __retres;
  long tmp;
  
#line 53 
  tmp = __VERIFIER_nondet_long();
  
#line 53 
  __retres = (int)tmp;
  
#line 53 
  return __retres;
}


#line 56  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void)
{
  unsigned int tmp;
  
#line 58 
  tmp = __VERIFIER_nondet_uint();
  
#line 58 
  return tmp;
}


#line 61  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void)
{
  void *tmp;
  
#line 63 
  tmp = __VERIFIER_nondet_pointer();
  
#line 63 
  return tmp;
}


#line 66  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void)
{
  unsigned long tmp;
  
#line 68 
  tmp = __VERIFIER_nondet_ulong();
  
#line 68 
  return tmp;
}


#line 71  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void)
{
  unsigned long long tmp;
  
#line 73 
  tmp = __VERIFIER_nondet_ulonglong();
  
#line 73 
  return tmp;
}


#line 76  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_positive(void)
{
  
#line 78 
  int ret = ldv_undef_int();
  
#line 80 
  __VERIFIER_assume(ret > 0);
  
#line 82 
  return ret;
}


#line 85  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_negative(void)
{
  
#line 87 
  int ret = ldv_undef_int();
  
#line 89 
  __VERIFIER_assume(ret < 0);
  
#line 91 
  return ret;
}


#line 94  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonpositive(void)
{
  
#line 96 
  int ret = ldv_undef_int();
  
#line 98 
  __VERIFIER_assume(ret <= 0);
  
#line 100 
  return ret;
}


#line 103  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void)
{
  
#line 105 
  void *ret = ldv_undef_ptr();
  
#line 107 
  __VERIFIER_assume(ret != (void *)0);
  
#line 109 
  return ret;
}


#line 33  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memory.h"
void *external_allocated_data(void);


#line 45 
void *ldv_reference_realloc(void *ptr, size_t size);


#line 23  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *malloc(size_t);


#line 24 
void *calloc(size_t, size_t);


#line 25 
void free(void *);


#line 33  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size)
{
  void *__retres;
  void *res;
  int tmp;
  
#line 37 
  tmp = ldv_undef_int();
  
#line 37 
  if (tmp != 0) {
    
#line 39 
    res = malloc(size);
    
#line 40 
    __VERIFIER_assume(res != (void *)0);
    
#line 41 
    __retres = res;
    
#line 41 
    goto return_label;
  }
  else {
    
#line 44 
    __retres = (void *)0;
    
#line 44 
    goto return_label;
  }
  return_label: 
#line 37 
                return __retres;
}


#line 47  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size)
{
  void *tmp;
  
#line 49 
  tmp = calloc(nmemb,size);
  
#line 49 
  return tmp;
}


#line 52  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size)
{
  void *tmp;
  
#line 54 
  tmp = calloc(1UL,size);
  
#line 54 
  return tmp;
}


#line 57  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s)
{
  
#line 59 
  free(s);
  
#line 60 
  return;
}


#line 62  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size)
{
  void *__retres;
  void *res;
  int tmp;
  
#line 66 
  if (ptr != (void *)0 && size == 0UL) {
    
#line 67 
    free(ptr);
    
#line 68 
    __retres = (void *)0;
    
#line 68 
    goto return_label;
  }
  else ;
  
#line 71 
  if (ptr == (void *)0) {
    
#line 72 
    res = malloc(size);
    
#line 73 
    __retres = res;
    
#line 73 
    goto return_label;
  }
  else ;
  
#line 76 
  tmp = ldv_undef_int();
  
#line 76 
  if (tmp != 0) {
    
#line 78 
    res = malloc(size);
    
#line 79 
    __VERIFIER_assume(res != (void *)0);
    
#line 81 
    memcpy(res,(void const *)ptr,size);
    
#line 82 
    free(ptr);
    
#line 84 
    __retres = res;
    
#line 84 
    goto return_label;
  }
  else {
    
#line 87 
    __retres = (void *)0;
    
#line 87 
    goto return_label;
  }
  return_label: 
#line 76 
                return __retres;
}


#line 90  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size)
{
  void *res;
  
#line 94 
  res = malloc(size);
  
#line 95 
  __VERIFIER_assume(res != (void *)0);
  
#line 97 
  return res;
}


#line 100  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size)
{
  void *res;
  
#line 104 
  res = calloc(1UL,size);
  
#line 105 
  __VERIFIER_assume(res != (void *)0);
  
#line 107 
  return res;
}


#line 110  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void)
{
  void *__retres;
  void *res;
  int tmp;
  
#line 114 
  tmp = ldv_undef_int();
  
#line 114 
  if (tmp != 0) {
    
#line 115 
    res = external_allocated_data();
    
#line 116 
    __VERIFIER_assume(res != (void *)0);
    
#line 117 
    __retres = res;
    
#line 117 
    goto return_label;
  }
  else {
    
#line 120 
    __retres = (void *)0;
    
#line 120 
    goto return_label;
  }
  return_label: 
#line 114 
                return __retres;
}


#line 123  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void)
{
  void *__retres;
  void *res;
  int tmp;
  
#line 127 
  tmp = ldv_undef_int();
  
#line 127 
  if (tmp != 0) {
    
#line 128 
    res = external_allocated_data();
    
#line 129 
    memset(res,0,8UL);
    
#line 130 
    __VERIFIER_assume(res != (void *)0);
    
#line 131 
    __retres = res;
    
#line 131 
    goto return_label;
  }
  else {
    
#line 134 
    __retres = (void *)0;
    
#line 134 
    goto return_label;
  }
  return_label: 
#line 127 
                return __retres;
}


#line 137  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void)
{
  void *tmp;
  
#line 139 
  tmp = ldv_reference_calloc_unknown_size();
  
#line 139 
  return tmp;
}


#line 142  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size)
{
  void *res;
  
#line 146 
  res = external_allocated_data();
  
#line 147 
  __VERIFIER_assume(res != (void *)0);
  
#line 149 
  return res;
}


#line 62  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.h"
void ldv_initialize(void);


#line 97 
void ldv_failed_register_netdev(void);


#line 123 
void ldv_pre_probe(void);


#line 33  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/thread.h"
int pthread_create(pthread_t *, pthread_attr_t const *, void *(*)(void *), void *);


#line 37 
int pthread_join(pthread_t, void **);


#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/err.h"
__inline static void *ERR_PTR_0(long error)
{
  void *__retres;
  
#line 25 
  __retres = (void *)error;
  
#line 25 
  return __retres;
}


#line 148  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_deregister_5_1(struct net_device *arg0);


#line 150 
void *ldv_interrupt_scenario_18(void *arg0);


#line 152 
void ldv_dispatch_register_9_3(struct pci_driver *arg0);


#line 154 
void *ldv_interrupt_scenario_16(void *arg0);


#line 155 
void *ldv_interrupt_scenario_22(void *arg0);


#line 157 
void ldv_dispatch_register_8_4(struct net_device *arg0);


#line 158 
void *ldv_character_driver_scenario_20(void *arg0);


#line 160 
void ldv_dispatch_deregister_7_1(struct pci_driver *arg0);


#line 161 
void *ldv_timer_scenario_21(void *arg0);


#line 162 
void *ldv_random_allocationless_scenario_19(void *arg0);


#line 163 
void *ldv_initialization_1(void *arg0);


#line 164 
void ldv_dispatch_irq_register_13_3(int arg0, enum irqreturn (*arg1)(int , void *), enum irqreturn (*arg2)(int , void *), void *arg3);


#line 165 
void ldv_dispatch_register_12_3(struct file_operations *arg0);


#line 167 
int main(void);


#line 169 
void ldv_dispatch_instance_register_3_3(struct timer_list *arg0);


#line 170 
void ldv_dispatch_irq_deregister_6_1(int arg0);


#line 171 
void *ldv_pci_scenario_17(void *arg0);


#line 175 
void *ldv_character_driver_scenario_15(void *arg0);


#line 177 
void ldv_dispatch_instance_deregister_11_1(struct timer_list *arg0);


#line 178 
void *ldv_interrupt_scenario_14(void *arg0);


#line 182  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_14;

#line 183  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_15;

#line 184  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_21;

#line 185  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_16;

#line 186  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_19;

#line 187  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_22;

#line 188  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_18;

#line 189  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_20;

#line 190  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_17;

#line 194  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_deregister_5_1(struct net_device *arg0)
{
  int ret;
  struct ldv_struct_random_allocationless_scenario_19 *cf_arg_19;
  int tmp;
  
#line 197 
  tmp = ldv_undef_int();
  
#line 197 
  switch (tmp) {
    case 0: 
#line 198 
    ;
    
#line 199 
    ret = pthread_join(ldv_thread_19,(void **)0);
    
#line 200 
    __VERIFIER_assume(ret == 0);
    
#line 201 
    goto ldv_45676;
    default: 
#line 203 
    ;
    
#line 203 
    __VERIFIER_assume(0);
  }
  ldv_45676: 
#line 204 
  ;
  
#line 205 
  return;
}


#line 209  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/emg/environment_model.c"
int ldv_emg_del_timer_sync(struct timer_list *arg0)
{
  int __retres;
  struct timer_list *ldv_11_timer_list;
  
#line 215 
  ldv_11_timer_list = arg0;
  
#line 219 
  ldv_dispatch_instance_deregister_11_1(ldv_11_timer_list);
  
#line 220 
  ;
  
#line 220 
  __retres = 0;
  
#line 220 
  return __retres;
}


#line 228  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_character_driver_scenario_15(void *arg0)
{
  void *__retres;
  struct file *ldv_15_resource_1;
  char *ldv_15_ldv_param_1_2;
  unsigned long ldv_15_size_cnt;
  char *ldv_15_ldv_param_1_4;
  long long *ldv_15_ldv_param_3_3;
  long long *ldv_15_ldv_param_3_5;
  struct inode *ldv_15_resource_0;
  int tmp_1;
  int tmp_3;
  int tmp_4;
  
#line 236 
  struct file_operations *ldv_15_container = ldv_emg_alias_ixgbe_dbg_netdev_ops_fops_2;
  
#line 238 
  int ldv_15_ret = ldv_undef_int();
  
#line 241 
  struct ldv_struct_character_driver_scenario_15 *data = (struct ldv_struct_character_driver_scenario_15 *)arg0;
  
#line 245 
  ldv_15_ret = ldv_undef_int();
  
#line 248 
  if (data != (struct ldv_struct_character_driver_scenario_15 *)0) {
    
#line 249 
    ldv_15_container = data->arg0;
    
#line 250 
    ldv_free((void *)data);
  }
  else ;
  
#line 255 
  ldv_15_resource_0 = (struct inode *)ldv_xmalloc_unknown_size(0UL);
  
#line 256 
  tmp_1 = ldv_undef_int();
  
#line 256 
  ldv_15_size_cnt = (unsigned long)tmp_1;
  
#line 263 
  goto ldv_main_15;
  
#line 265 
  __retres = (void *)0;
  
#line 265 
  goto return_label;
  ldv_main_15: 
#line 268 
  ;
  
#line 271 
  tmp_3 = ldv_undef_int();
  
#line 271 
  if (tmp_3 != 0) {
    int tmp_2;
    
#line 274 
    ldv_15_ret = (*ldv_emg_alias_simple_open_5)(ldv_15_resource_0,ldv_15_resource_1);
    
#line 276 
    ldv_15_ret = ldv_filter_err_code(ldv_15_ret);
    
#line 279 
    tmp_2 = ldv_undef_int();
    
#line 279 
    if (tmp_2 != 0) {
      
#line 281 
      __VERIFIER_assume(ldv_15_ret == 0);
      
#line 288 
      goto ldv_call_15;
    }
    else {
      
#line 292 
      __VERIFIER_assume(ldv_15_ret != 0);
      
#line 299 
      goto ldv_main_15;
    }
  }
  else {
    
#line 304 
    ldv_free((void *)ldv_15_resource_0);
    
#line 312 
    __retres = (void *)0;
    
#line 312 
    goto return_label;
  }
  
#line 315 
  __retres = (void *)0;
  
#line 315 
  goto return_label;
  ldv_call_15: 
#line 318 
  ;
  
#line 321 
  tmp_4 = ldv_undef_int();
  
#line 321 
  switch (tmp_4) {
    case 1: 
#line 322 
    ;
    
#line 324 
    ldv_15_ldv_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
    
#line 325 
    ldv_15_ldv_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
    
#line 330 
    ldv_emg_wrapper_ixgbe_dbg_netdev_ops_read_3(ldv_15_resource_1,ldv_15_ldv_param_1_2,ldv_15_size_cnt,ldv_15_ldv_param_3_3);
    
#line 334 
    ldv_free((void *)ldv_15_ldv_param_3_3);
    
#line 335 
    ldv_free((void *)ldv_15_ldv_param_1_2);
    
#line 342 
    goto ldv_call_15;
    case 2: 
#line 345 
    ;
    
#line 347 
    ldv_15_ldv_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
    
#line 348 
    ldv_15_ldv_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
    
#line 357 
    __VERIFIER_assume(ldv_15_size_cnt <= 2147479552UL);
    
#line 359 
    ldv_emg_wrapper_ixgbe_dbg_netdev_ops_write_4(ldv_15_resource_1,ldv_15_ldv_param_1_4,ldv_15_size_cnt,ldv_15_ldv_param_3_5);
    
#line 363 
    ldv_free((void *)ldv_15_ldv_param_1_4);
    
#line 364 
    ldv_free((void *)ldv_15_ldv_param_3_5);
    
#line 371 
    goto ldv_call_15;
    case 3: 
#line 374 
    ;
    
#line 376 
    if (ldv_15_container->release != (int (*)(struct inode *, struct file *))0) 
      
#line 378 
      (*(ldv_15_container->release))(ldv_15_resource_0,ldv_15_resource_1); else ;
    
#line 386 
    goto ldv_main_15;
    default: 
#line 389 
    ;
    
#line 389 
    __VERIFIER_assume(0);
  }
  
#line 392 
  __retres = (void *)0;
  return_label: 
#line 392 
                return __retres;
}


#line 397  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/emg/environment_model.c"
int ldv_emg___pci_register_driver(struct pci_driver *arg0, struct module *arg1, char *arg2)
{
  int __retres;
  int tmp_0;
  
#line 400 
  struct pci_driver *ldv_9_pci_driver = ldv_emg_alias_ixgbe_driver_2;
  
#line 404 
  tmp_0 = ldv_undef_int();
  
#line 404 
  if (tmp_0 != 0) {
    
#line 406 
    ldv_9_pci_driver = arg0;
    
#line 410 
    ldv_dispatch_register_9_3(ldv_9_pci_driver);
    
#line 414 
    __retres = 0;
    
#line 414 
    goto return_label;
  }
  else {
    int tmp;
    
#line 421 
    tmp = ldv_undef_int_negative();
    
#line 421 
    __retres = tmp;
    
#line 421 
    goto return_label;
  }
  return_label: 
#line 404 
                return __retres;
}


#line 431  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_register_9_3(struct pci_driver *arg0)
{
  int ret;
  struct ldv_struct_pci_scenario_17 *cf_arg_17;
  int tmp;
  
#line 434 
  tmp = ldv_undef_int();
  
#line 434 
  switch (tmp) {
    case 0: 
#line 435 
    ;
    
#line 436 
    cf_arg_17 = (struct ldv_struct_pci_scenario_17 *)ldv_xmalloc(16UL);
    
#line 437 
    cf_arg_17->arg0 = arg0;
    
#line 438 
    ret = pthread_create(& ldv_thread_17,(pthread_attr_t const *)0,& ldv_pci_scenario_17,(void *)cf_arg_17);
    
#line 439 
    __VERIFIER_assume(ret == 0);
    
#line 440 
    goto ldv_45713;
    default: 
#line 442 
    ;
    
#line 442 
    __VERIFIER_assume(0);
  }
  ldv_45713: 
#line 443 
  ;
  
#line 444 
  return;
}


#line 448  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/emg/environment_model.c"
struct dentry *ldv_emg_debugfs_create_file(char *arg0, unsigned short arg1, struct dentry *arg2, void *arg3, struct file_operations *arg4)
{
  struct dentry *__retres;
  struct dentry *ldv_12_dentry;
  struct file_operations *ldv_12_file_operations;
  int tmp_1;
  
#line 456 
  tmp_1 = ldv_undef_int();
  
#line 456 
  if (tmp_1 != 0) {
    
#line 458 
    ldv_12_dentry = (struct dentry *)ldv_xmalloc_unknown_size(0UL);
    
#line 459 
    ldv_12_file_operations = arg4;
    
#line 463 
    ldv_dispatch_register_12_3(ldv_12_file_operations);
    
#line 467 
    __retres = ldv_12_dentry;
    
#line 467 
    goto return_label;
  }
  else {
    struct dentry *tmp_0;
    
#line 474 
    tmp_0 = (struct dentry *)ERR_PTR_0(-19L);
    
#line 474 
    __retres = tmp_0;
    
#line 474 
    goto return_label;
  }
  return_label: 
#line 456 
                return __retres;
}


#line 484  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_deregister_7_1(struct pci_driver *arg0)
{
  int ret;
  struct ldv_struct_pci_scenario_17 *cf_arg_17;
  int tmp;
  
#line 487 
  tmp = ldv_undef_int();
  
#line 487 
  switch (tmp) {
    case 0: 
#line 488 
    ;
    
#line 489 
    ret = pthread_join(ldv_thread_17,(void **)0);
    
#line 490 
    __VERIFIER_assume(ret == 0);
    
#line 491 
    goto ldv_45730;
    default: 
#line 493 
    ;
    
#line 493 
    __VERIFIER_assume(0);
  }
  ldv_45730: 
#line 494 
  ;
  
#line 495 
  return;
}


#line 499  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_interrupt_scenario_22(void *arg0)
{
  void *__retres;
  enum irqreturn ldv_22_ret_val;
  int ldv_22_line;
  void *ldv_22_data;
  enum irqreturn (*ldv_22_thread)(int , void *);
  int tmp;
  
#line 505 
  enum irqreturn (*ldv_22_callback)(int , void *) = & ldv_emg_wrapper_ixgbe_msix_other_2;
  
#line 508 
  struct ldv_struct_interrupt_scenario_14 *data = (struct ldv_struct_interrupt_scenario_14 *)arg0;
  
#line 513 
  if (data != (struct ldv_struct_interrupt_scenario_14 *)0) {
    
#line 514 
    ldv_22_line = data->arg0;
    
#line 515 
    ldv_22_callback = data->arg1;
    
#line 516 
    ldv_22_thread = data->arg2;
    
#line 517 
    ldv_22_data = data->arg3;
    
#line 518 
    ldv_free((void *)data);
  }
  else ;
  
#line 524 
  ldv_switch_to_interrupt_context();
  
#line 526 
  ldv_22_ret_val = ldv_emg_wrapper_ixgbe_msix_other_2(ldv_22_line,ldv_22_data);
  
#line 528 
  ldv_switch_to_process_context();
  
#line 531 
  tmp = ldv_undef_int();
  
#line 531 
  if (tmp != 0) {
    
#line 533 
    __VERIFIER_assume(ldv_22_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    
#line 537 
    if (ldv_22_thread != (enum irqreturn (*)(int , void *))0) 
#line 539 
                                                              (*ldv_22_thread)(ldv_22_line,ldv_22_data); else ;
  }
  else 
#line 546 
       __VERIFIER_assume(ldv_22_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  
#line 555 
  __retres = (void *)0;
  
#line 555 
  goto return_label;
  
#line 557 
  __retres = (void *)0;
  return_label: 
#line 557 
                return __retres;
}


#line 562  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/emg/environment_model.c"
struct net_device *ldv_emg_alloc_etherdev_mqs(int arg0, unsigned int arg1, unsigned int arg2)
{
  struct net_device *__retres;
  struct net_device *ldv_4_netdev;
  int tmp_0;
  
#line 569 
  tmp_0 = ldv_undef_int();
  
#line 569 
  if (tmp_0 != 0) {
    
#line 571 
    ldv_4_netdev = (struct net_device *)ldv_xmalloc_unknown_size(0UL);
    
#line 575 
    __retres = ldv_4_netdev;
    
#line 575 
    goto return_label;
  }
  else {
    
#line 582 
    __retres = (struct net_device *)0;
    
#line 582 
    goto return_label;
  }
  return_label: 
#line 569 
                return __retres;
}


#line 592  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_initialization_1(void *arg0)
{
  void *__retres;
  int ldv_1_ret;
  int tmp;
  
#line 599 
  ldv_1_ret = ldv_emg_ixgbe_init_module();
  
#line 600 
  ldv_1_ret = ldv_post_init(ldv_1_ret);
  
#line 603 
  tmp = ldv_undef_int();
  
#line 603 
  if (tmp != 0) {
    
#line 605 
    __VERIFIER_assume(ldv_1_ret != 0);
    
#line 609 
    __retres = (void *)0;
    
#line 609 
    goto return_label;
  }
  else {
    
#line 613 
    __VERIFIER_assume(ldv_1_ret == 0);
    
#line 618 
    ldv_emg_ixgbe_exit_module();
    
#line 622 
    __retres = (void *)0;
    
#line 622 
    goto return_label;
  }
  
#line 625 
  __retres = (void *)0;
  return_label: 
#line 625 
                return __retres;
}


#line 630  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_register_8_4(struct net_device *arg0)
{
  int ret;
  struct ldv_struct_random_allocationless_scenario_19 *cf_arg_19;
  int tmp;
  
#line 633 
  tmp = ldv_undef_int();
  
#line 633 
  switch (tmp) {
    case 0: 
#line 634 
    ;
    
#line 635 
    cf_arg_19 = (struct ldv_struct_random_allocationless_scenario_19 *)ldv_xmalloc(16UL);
    
#line 636 
    cf_arg_19->arg0 = arg0;
    
#line 637 
    ret = pthread_create(& ldv_thread_19,(pthread_attr_t const *)0,& ldv_random_allocationless_scenario_19,(void *)cf_arg_19);
    
#line 638 
    __VERIFIER_assume(ret == 0);
    
#line 639 
    goto ldv_45761;
    default: 
#line 641 
    ;
    
#line 641 
    __VERIFIER_assume(0);
  }
  ldv_45761: 
#line 642 
  ;
  
#line 643 
  return;
}


#line 647  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_character_driver_scenario_20(void *arg0)
{
  void *__retres;
  struct file *ldv_20_resource_1;
  char *ldv_20_ldv_param_1_2;
  unsigned long ldv_20_size_cnt;
  char *ldv_20_ldv_param_1_4;
  long long *ldv_20_ldv_param_3_3;
  long long *ldv_20_ldv_param_3_5;
  struct inode *ldv_20_resource_0;
  int tmp_1;
  int tmp_3;
  int tmp_4;
  
#line 655 
  struct file_operations *ldv_20_container = ldv_emg_alias_ixgbe_dbg_reg_ops_fops_2;
  
#line 657 
  int ldv_20_ret = ldv_undef_int();
  
#line 660 
  struct ldv_struct_character_driver_scenario_15 *data = (struct ldv_struct_character_driver_scenario_15 *)arg0;
  
#line 664 
  ldv_20_ret = ldv_undef_int();
  
#line 667 
  if (data != (struct ldv_struct_character_driver_scenario_15 *)0) {
    
#line 668 
    ldv_20_container = data->arg0;
    
#line 669 
    ldv_free((void *)data);
  }
  else ;
  
#line 674 
  ldv_20_resource_0 = (struct inode *)ldv_xmalloc_unknown_size(0UL);
  
#line 675 
  tmp_1 = ldv_undef_int();
  
#line 675 
  ldv_20_size_cnt = (unsigned long)tmp_1;
  
#line 682 
  goto ldv_main_20;
  
#line 684 
  __retres = (void *)0;
  
#line 684 
  goto return_label;
  ldv_main_20: 
#line 687 
  ;
  
#line 690 
  tmp_3 = ldv_undef_int();
  
#line 690 
  if (tmp_3 != 0) {
    int tmp_2;
    
#line 693 
    ldv_20_ret = (*ldv_emg_alias_simple_open_5)(ldv_20_resource_0,ldv_20_resource_1);
    
#line 695 
    ldv_20_ret = ldv_filter_err_code(ldv_20_ret);
    
#line 698 
    tmp_2 = ldv_undef_int();
    
#line 698 
    if (tmp_2 != 0) {
      
#line 700 
      __VERIFIER_assume(ldv_20_ret == 0);
      
#line 707 
      goto ldv_call_20;
    }
    else {
      
#line 711 
      __VERIFIER_assume(ldv_20_ret != 0);
      
#line 718 
      goto ldv_main_20;
    }
  }
  else {
    
#line 723 
    ldv_free((void *)ldv_20_resource_0);
    
#line 731 
    __retres = (void *)0;
    
#line 731 
    goto return_label;
  }
  
#line 734 
  __retres = (void *)0;
  
#line 734 
  goto return_label;
  ldv_call_20: 
#line 737 
  ;
  
#line 740 
  tmp_4 = ldv_undef_int();
  
#line 740 
  switch (tmp_4) {
    case 1: 
#line 741 
    ;
    
#line 743 
    ldv_20_ldv_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
    
#line 744 
    ldv_20_ldv_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
    
#line 749 
    ldv_emg_wrapper_ixgbe_dbg_reg_ops_read_3(ldv_20_resource_1,ldv_20_ldv_param_1_2,ldv_20_size_cnt,ldv_20_ldv_param_3_3);
    
#line 753 
    ldv_free((void *)ldv_20_ldv_param_3_3);
    
#line 754 
    ldv_free((void *)ldv_20_ldv_param_1_2);
    
#line 761 
    goto ldv_call_20;
    case 2: 
#line 764 
    ;
    
#line 766 
    ldv_20_ldv_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
    
#line 767 
    ldv_20_ldv_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
    
#line 776 
    __VERIFIER_assume(ldv_20_size_cnt <= 2147479552UL);
    
#line 778 
    ldv_emg_wrapper_ixgbe_dbg_reg_ops_write_4(ldv_20_resource_1,ldv_20_ldv_param_1_4,ldv_20_size_cnt,ldv_20_ldv_param_3_5);
    
#line 782 
    ldv_free((void *)ldv_20_ldv_param_3_5);
    
#line 783 
    ldv_free((void *)ldv_20_ldv_param_1_4);
    
#line 790 
    goto ldv_call_20;
    case 3: 
#line 793 
    ;
    
#line 795 
    if (ldv_20_container->release != (int (*)(struct inode *, struct file *))0) 
      
#line 797 
      (*(ldv_20_container->release))(ldv_20_resource_0,ldv_20_resource_1); else ;
    
#line 805 
    goto ldv_main_20;
    default: 
#line 808 
    ;
    
#line 808 
    __VERIFIER_assume(0);
  }
  
#line 811 
  __retres = (void *)0;
  return_label: 
#line 811 
                return __retres;
}


#line 816  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/emg/environment_model.c"
int ldv_emg_request_irq(unsigned int arg0, enum irqreturn (*arg1)(int , void *), unsigned long arg2, char *arg3, void *arg4)
{
  int __retres;
  int ldv_13_line;
  void *ldv_13_data;
  enum irqreturn (*ldv_13_thread)(int , void *);
  int tmp_0;
  
#line 821 
  enum irqreturn (*ldv_13_callback)(int , void *) = & ldv_emg_wrapper_ixgbe_msix_other_2;
  
#line 826 
  tmp_0 = ldv_undef_int();
  
#line 826 
  if (tmp_0 != 0) {
    
#line 828 
    ldv_13_line = (int)arg0;
    
#line 829 
    ldv_13_callback = arg1;
    
#line 830 
    ldv_13_thread = (enum irqreturn (*)(int , void *))0;
    
#line 831 
    ldv_13_data = arg4;
    
#line 835 
    ldv_dispatch_irq_register_13_3(ldv_13_line,ldv_13_callback,ldv_13_thread,ldv_13_data);
    
#line 839 
    __retres = 0;
    
#line 839 
    goto return_label;
  }
  else {
    int tmp;
    
#line 846 
    tmp = ldv_undef_int_negative();
    
#line 846 
    __retres = tmp;
    
#line 846 
    goto return_label;
  }
  return_label: 
#line 826 
                return __retres;
}


#line 856  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_interrupt_scenario_16(void *arg0)
{
  void *__retres;
  enum irqreturn ldv_16_ret_val;
  int ldv_16_line;
  void *ldv_16_data;
  enum irqreturn (*ldv_16_thread)(int , void *);
  int tmp;
  
#line 862 
  enum irqreturn (*ldv_16_callback)(int , void *) = & ldv_emg_wrapper_ixgbe_msix_clean_rings_2;
  
#line 865 
  struct ldv_struct_interrupt_scenario_14 *data = (struct ldv_struct_interrupt_scenario_14 *)arg0;
  
#line 870 
  if (data != (struct ldv_struct_interrupt_scenario_14 *)0) {
    
#line 871 
    ldv_16_line = data->arg0;
    
#line 872 
    ldv_16_callback = data->arg1;
    
#line 873 
    ldv_16_thread = data->arg2;
    
#line 874 
    ldv_16_data = data->arg3;
    
#line 875 
    ldv_free((void *)data);
  }
  else ;
  
#line 881 
  ldv_switch_to_interrupt_context();
  
#line 883 
  ldv_16_ret_val = ldv_emg_wrapper_ixgbe_msix_clean_rings_2(ldv_16_line,ldv_16_data);
  
#line 885 
  ldv_switch_to_process_context();
  
#line 888 
  tmp = ldv_undef_int();
  
#line 888 
  if (tmp != 0) {
    
#line 890 
    __VERIFIER_assume(ldv_16_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    
#line 894 
    if (ldv_16_thread != (enum irqreturn (*)(int , void *))0) 
#line 896 
                                                              (*ldv_16_thread)(ldv_16_line,ldv_16_data); else ;
  }
  else 
#line 903 
       __VERIFIER_assume(ldv_16_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  
#line 912 
  __retres = (void *)0;
  
#line 912 
  goto return_label;
  
#line 914 
  __retres = (void *)0;
  return_label: 
#line 914 
                return __retres;
}


#line 919  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_timer_scenario_21(void *arg0)
{
  void *__retres;
  struct timer_list *ldv_21_container;
  
#line 924 
  struct ldv_struct_timer_scenario_21 *data = (struct ldv_struct_timer_scenario_21 *)arg0;
  
#line 929 
  if (data != (struct ldv_struct_timer_scenario_21 *)0) {
    
#line 930 
    ldv_21_container = data->arg0;
    
#line 931 
    ldv_free((void *)data);
  }
  else ;
  
#line 936 
  if (ldv_21_container->function != (void (*)(unsigned long ))0) {
    
#line 938 
    ldv_switch_to_interrupt_context();
    
#line 940 
    (*(ldv_21_container->function))(ldv_21_container->data);
    
#line 942 
    ldv_switch_to_process_context();
  }
  else ;
  
#line 951 
  __retres = (void *)0;
  
#line 951 
  goto return_label;
  
#line 953 
  __retres = (void *)0;
  return_label: 
#line 953 
                return __retres;
}


#line 958  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_random_allocationless_scenario_19(void *arg0)
{
  void *__retres;
  struct sk_buff *ldv_19_ldv_param_0_9;
  unsigned short ldv_19_ldv_param_1_40;
  unsigned int ldv_19_ldv_param_1_10;
  unsigned short ldv_19_ldv_param_4_37;
  struct ethtool_ts_info *ldv_19_ldv_param_1_60;
  struct ethtool_eeprom *ldv_19_ldv_param_1_55;
  unsigned short ldv_19_ldv_param_5_38;
  int ldv_19_ldv_param_1_14;
  int ldv_19_ldv_param_1_29;
  struct ethtool_regs *ldv_19_ldv_param_1_88;
  unsigned long long *ldv_19_ldv_param_2_8;
  unsigned short ldv_19_ldv_param_2_98;
  struct ethtool_channels *ldv_19_ldv_param_1_61;
  unsigned int ldv_19_ldv_param_1_92;
  unsigned short ldv_19_ldv_param_2_20;
  struct ethtool_drvinfo *ldv_19_ldv_param_1_16;
  unsigned char *ldv_19_ldv_param_2_70;
  unsigned char *ldv_19_ldv_param_2_51;
  int ldv_19_ldv_param_1_17;
  struct ethtool_channels *ldv_19_ldv_param_1_68;
  void *ldv_19_ldv_param_1_87;
  struct nlattr **ldv_19_ldv_param_1_35;
  struct net_device *ldv_19_ldv_param_1_91;
  int ldv_19_ldv_param_1_58;
  unsigned char *ldv_19_ldv_param_3_52;
  struct ethtool_ringparam *ldv_19_ldv_param_1_24;
  unsigned short ldv_19_ldv_param_2_82;
  struct net_device *ldv_19_container;
  struct scatterlist *ldv_19_ldv_param_2_22;
  unsigned char *ldv_19_ldv_param_2_18;
  unsigned int ldv_19_ldv_param_4_12;
  struct sk_buff *ldv_19_ldv_param_1_84;
  struct nlmsghdr *ldv_19_ldv_param_1_71;
  struct ethtool_cmd *ldv_19_ldv_param_1_28;
  unsigned char *ldv_19_ldv_param_2_93;
  int ldv_19_ldv_param_1_62;
  struct ethtool_rxnfc *ldv_19_ldv_param_1_15;
  unsigned long long ldv_19_ldv_param_1_90;
  struct ethtool_pauseparam *ldv_19_ldv_param_1_96;
  unsigned char ldv_19_ldv_param_1_2;
  int ldv_19_ldv_param_2_44;
  struct rtnl_link_stats64 *ldv_19_ldv_param_1_5;
  unsigned short ldv_19_ldv_param_1_97;
  unsigned int ldv_19_ldv_param_2_11;
  struct ethtool_wolinfo *ldv_19_ldv_param_1_39;
  int ldv_19_ldv_param_2_33;
  int ldv_19_ldv_param_1_27;
  struct scatterlist *ldv_19_ldv_param_2_41;
  unsigned short ldv_19_ldv_param_1_19;
  unsigned long long *ldv_19_ldv_param_1_75;
  struct ethtool_stats *ldv_19_ldv_param_1_7;
  struct netdev_fcoe_hbainfo *ldv_19_ldv_param_1_6;
  void *ldv_19_ldv_param_2_85;
  struct ethtool_cmd *ldv_19_ldv_param_1_3;
  struct ethtool_coalesce *ldv_19_ldv_param_1_95;
  enum ethtool_phys_id_state *ldv_19_ldv_param_1_4;
  struct napi_struct *ldv_19_ldv_param_0_46;
  struct ethtool_wolinfo *ldv_19_ldv_param_1_80;
  unsigned int *ldv_19_ldv_param_1_50;
  unsigned short ldv_19_ldv_param_2_72;
  unsigned short ldv_19_ldv_param_1_53;
  unsigned short ldv_19_ldv_param_1_81;
  unsigned int ldv_19_ldv_param_3_42;
  _Bool ldv_19_ldv_param_2_30;
  unsigned int ldv_19_ldv_param_3_23;
  int ldv_19_ldv_param_2_76;
  struct ndmsg *ldv_19_ldv_param_0_34;
  void *ldv_19_ldv_param_2_89;
  struct ethtool_pauseparam *ldv_19_ldv_param_1_57;
  void *ldv_19_ldv_param_1_26;
  unsigned short (*ldv_19_ldv_param_3_86)(struct net_device *, struct sk_buff *);
  struct ifla_vf_info *ldv_19_ldv_param_2_74;
  struct ethtool_eeprom *ldv_19_ldv_param_1_77;
  unsigned short ldv_19_ldv_param_1_21;
  struct ifreq *ldv_19_ldv_param_1_32;
  int ldv_19_ldv_param_3_45;
  struct ethtool_coalesce *ldv_19_ldv_param_1_83;
  unsigned char *ldv_19_ldv_param_2_56;
  struct sk_buff *ldv_19_ldv_param_0_25;
  unsigned short ldv_19_ldv_param_1_94;
  struct ethtool_ringparam *ldv_19_ldv_param_1_49;
  int ldv_19_ldv_param_1_73;
  unsigned short ldv_19_ldv_param_2_63;
  unsigned long long *ldv_19_ldv_param_2_67;
  unsigned char *ldv_19_ldv_param_3_36;
  unsigned char ldv_19_ldv_param_3_64;
  struct ethtool_eeprom *ldv_19_ldv_param_1_69;
  unsigned char *ldv_19_ldv_param_2_78;
  unsigned long long ldv_19_ldv_param_1_65;
  struct ethtool_modinfo *ldv_19_ldv_param_1_79;
  unsigned int *ldv_19_ldv_param_2_48;
  struct ethtool_rxnfc *ldv_19_ldv_param_1_47;
  int ldv_19_ldv_param_5_13;
  int ldv_19_ldv_param_1_43;
  unsigned int ldv_19_ldv_param_1_31;
  struct ethtool_test *ldv_19_ldv_param_1_66;
  unsigned short ldv_19_ldv_param_2_54;
  _Bool ldv_19_ldv_param_2_59;
  int tmp_52;
  
#line 1060 
  struct ldv_struct_random_allocationless_scenario_19 *data = (struct ldv_struct_random_allocationless_scenario_19 *)arg0;
  
#line 1065 
  if (data != (struct ldv_struct_random_allocationless_scenario_19 *)0) {
    
#line 1066 
    ldv_19_container = data->arg0;
    
#line 1067 
    ldv_free((void *)data);
  }
  else ;
  
#line 1075 
  goto ldv_call_19;
  
#line 1077 
  __retres = (void *)0;
  
#line 1077 
  goto return_label;
  ldv_call_19: 
#line 1080 
  ;
  
#line 1083 
  tmp_52 = ldv_undef_int();
  
#line 1083 
  if (tmp_52 != 0) {
    int tmp;
    
#line 1087 
    tmp = ldv_undef_int();
    
#line 1087 
    switch (tmp) {
      case 1: 
#line 1088 
      ;
      
#line 1091 
      ixgbe_setup_tc(ldv_19_container,(unsigned char)((int)ldv_19_ldv_param_1_2));
      
#line 1094 
      goto ldv_45923;
      case 2: 
#line 1096 
      ;
      
#line 1099 
      ldv_emg_wrapper_ixgbe_get_eeprom_len_36(ldv_19_container);
      
#line 1102 
      goto ldv_45923;
      case 3: 
#line 1104 
      ;
      
#line 1107 
      ldv_emg_wrapper_ixgbe_netpoll_57(ldv_19_container);
      
#line 1110 
      goto ldv_45923;
      case 4: 
#line 1112 
      ;
      
#line 1118 
      ldv_emg_wrapper_ixgbe_vlan_rx_kill_vid_48(ldv_19_container,(unsigned short)((int)ldv_19_ldv_param_1_97),(unsigned short)((int)ldv_19_ldv_param_2_98));
      
#line 1124 
      goto ldv_45923;
      case 5: 
#line 1126 
      ;
      
#line 1128 
      ldv_19_ldv_param_1_96 = (struct ethtool_pauseparam *)ldv_xmalloc_unknown_size(0UL);
      
#line 1133 
      ldv_emg_wrapper_ixgbe_set_pauseparam_55(ldv_19_container,ldv_19_ldv_param_1_96);
      
#line 1137 
      ldv_free((void *)ldv_19_ldv_param_1_96);
      
#line 1140 
      goto ldv_45923;
      case 6: 
#line 1142 
      ;
      
#line 1144 
      ldv_19_ldv_param_1_95 = (struct ethtool_coalesce *)ldv_xmalloc_unknown_size(0UL);
      
#line 1149 
      ldv_emg_wrapper_ixgbe_set_coalesce_54(ldv_19_container,ldv_19_ldv_param_1_95);
      
#line 1153 
      ldv_free((void *)ldv_19_ldv_param_1_95);
      
#line 1156 
      goto ldv_45923;
      case 7: 
#line 1158 
      ;
      
#line 1161 
      ldv_emg_wrapper_ixgbe_get_regs_len_53(ldv_19_container);
      
#line 1164 
      goto ldv_45923;
      case 8: 
#line 1166 
      ;
      
#line 1172 
      ixgbe_fcoe_ddp_put(ldv_19_container,(unsigned short)((int)ldv_19_ldv_param_1_94));
      
#line 1178 
      goto ldv_45923;
      case 9: 
#line 1180 
      ;
      
#line 1182 
      ldv_19_ldv_param_2_93 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
      
#line 1187 
      ldv_emg_wrapper_ixgbe_get_strings_41(ldv_19_container,ldv_19_ldv_param_1_92,ldv_19_ldv_param_2_93);
      
#line 1191 
      ldv_free((void *)ldv_19_ldv_param_2_93);
      
#line 1194 
      goto ldv_45923;
      case 10: 
#line 1196 
      ;
      
#line 1198 
      ldv_19_ldv_param_1_91 = (struct net_device *)ldv_xmalloc_unknown_size(0UL);
      
#line 1203 
      ldv_emg_wrapper_ixgbe_fwd_add_51(ldv_19_container,ldv_19_ldv_param_1_91);
      
#line 1207 
      ldv_free((void *)ldv_19_ldv_param_1_91);
      
#line 1210 
      goto ldv_45923;
      case 11: 
#line 1212 
      ;
      
#line 1218 
      ldv_emg_wrapper_ixgbe_fix_features_50(ldv_19_container,ldv_19_ldv_param_1_90);
      
#line 1224 
      goto ldv_45923;
      case 12: 
#line 1226 
      ;
      
#line 1229 
      ldv_emg_wrapper_ixgbe_tx_timeout_16(ldv_19_container);
      
#line 1232 
      goto ldv_45923;
      case 13: 
#line 1234 
      ;
      
#line 1236 
      ldv_19_ldv_param_2_89 = ldv_xmalloc_unknown_size(0UL);
      
#line 1237 
      ldv_19_ldv_param_1_88 = (struct ethtool_regs *)ldv_xmalloc_unknown_size(0UL);
      
#line 1242 
      ldv_emg_wrapper_ixgbe_get_regs_47(ldv_19_container,ldv_19_ldv_param_1_88,ldv_19_ldv_param_2_89);
      
#line 1246 
      ldv_free(ldv_19_ldv_param_2_89);
      
#line 1247 
      ldv_free((void *)ldv_19_ldv_param_1_88);
      
#line 1250 
      goto ldv_45923;
      case 14: 
#line 1252 
      ;
      
#line 1254 
      ldv_19_ldv_param_1_87 = ldv_xmalloc_unknown_size(0UL);
      
#line 1259 
      ldv_emg_wrapper_ixgbe_fwd_del_46(ldv_19_container,ldv_19_ldv_param_1_87);
      
#line 1263 
      ldv_free(ldv_19_ldv_param_1_87);
      
#line 1266 
      goto ldv_45923;
      case 15: 
#line 1268 
      ;
      
#line 1270 
      ldv_19_ldv_param_2_85 = ldv_xmalloc_unknown_size(0UL);
      
#line 1271 
      ldv_19_ldv_param_1_84 = (struct sk_buff *)ldv_xmalloc_unknown_size(0UL);
      
#line 1272 
      ldv_19_ldv_param_3_86 = (unsigned short (*)(struct net_device *, struct sk_buff *))ldv_xmalloc_unknown_size(0UL);
      
#line 1277 
      ldv_emg_wrapper_ixgbe_select_queue_45(ldv_19_container,ldv_19_ldv_param_1_84,ldv_19_ldv_param_2_85,ldv_19_ldv_param_3_86);
      
#line 1281 
      ldv_free(ldv_19_ldv_param_2_85);
      
#line 1282 
      ldv_free((void *)ldv_19_ldv_param_1_84);
      
#line 1283 
      ldv_free((void *)ldv_19_ldv_param_3_86);
      
#line 1286 
      goto ldv_45923;
      case 16: 
#line 1288 
      ;
      
#line 1290 
      ldv_19_ldv_param_1_83 = (struct ethtool_coalesce *)ldv_xmalloc_unknown_size(0UL);
      
#line 1295 
      ldv_emg_wrapper_ixgbe_get_coalesce_44(ldv_19_container,ldv_19_ldv_param_1_83);
      
#line 1299 
      ldv_free((void *)ldv_19_ldv_param_1_83);
      
#line 1302 
      goto ldv_45923;
      case 17: 
#line 1304 
      ;
      
#line 1310 
      ldv_emg_wrapper_ixgbe_vlan_rx_add_vid_43(ldv_19_container,(unsigned short)((int)ldv_19_ldv_param_1_81),(unsigned short)((int)ldv_19_ldv_param_2_82));
      
#line 1316 
      goto ldv_45923;
      case 18: 
#line 1318 
      ;
      
#line 1321 
      ixgbe_fcoe_disable(ldv_19_container);
      
#line 1324 
      goto ldv_45923;
      case 19: 
#line 1326 
      ;
      
#line 1328 
      ldv_19_ldv_param_1_80 = (struct ethtool_wolinfo *)ldv_xmalloc_unknown_size(0UL);
      
#line 1333 
      ldv_emg_wrapper_ixgbe_get_wol_42(ldv_19_container,ldv_19_ldv_param_1_80);
      
#line 1337 
      ldv_free((void *)ldv_19_ldv_param_1_80);
      
#line 1340 
      goto ldv_45923;
      case 20: 
#line 1342 
      ;
      
#line 1344 
      ldv_19_ldv_param_1_79 = (struct ethtool_modinfo *)ldv_xmalloc_unknown_size(0UL);
      
#line 1349 
      ldv_emg_wrapper_ixgbe_get_module_info_40(ldv_19_container,ldv_19_ldv_param_1_79);
      
#line 1353 
      ldv_free((void *)ldv_19_ldv_param_1_79);
      
#line 1356 
      goto ldv_45923;
      case 21: 
#line 1358 
      ;
      
#line 1360 
      ldv_19_ldv_param_1_77 = (struct ethtool_eeprom *)ldv_xmalloc_unknown_size(0UL);
      
#line 1361 
      ldv_19_ldv_param_2_78 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
      
#line 1366 
      ldv_emg_wrapper_ixgbe_get_eeprom_15(ldv_19_container,ldv_19_ldv_param_1_77,ldv_19_ldv_param_2_78);
      
#line 1370 
      ldv_free((void *)ldv_19_ldv_param_1_77);
      
#line 1371 
      ldv_free((void *)ldv_19_ldv_param_2_78);
      
#line 1374 
      goto ldv_45923;
      case 22: 
#line 1376 
      ;
      
#line 1378 
      ldv_19_ldv_param_1_75 = (unsigned long long *)ldv_xmalloc_unknown_size(0UL);
      
#line 1383 
      ixgbe_fcoe_get_wwn(ldv_19_container,ldv_19_ldv_param_1_75,ldv_19_ldv_param_2_76);
      
#line 1387 
      ldv_free((void *)ldv_19_ldv_param_1_75);
      
#line 1390 
      goto ldv_45923;
      case 23: 
#line 1392 
      ;
      
#line 1394 
      ldv_19_ldv_param_2_74 = (struct ifla_vf_info *)ldv_xmalloc_unknown_size(0UL);
      
#line 1399 
      ixgbe_ndo_get_vf_config(ldv_19_container,ldv_19_ldv_param_1_73,ldv_19_ldv_param_2_74);
      
#line 1403 
      ldv_free((void *)ldv_19_ldv_param_2_74);
      
#line 1406 
      goto ldv_45923;
      case 24: 
#line 1408 
      ;
      
#line 1410 
      ldv_19_ldv_param_1_71 = (struct nlmsghdr *)ldv_xmalloc_unknown_size(0UL);
      
#line 1415 
      ldv_emg_wrapper_ixgbe_ndo_bridge_setlink_38(ldv_19_container,ldv_19_ldv_param_1_71,(unsigned short)((int)ldv_19_ldv_param_2_72));
      
#line 1419 
      ldv_free((void *)ldv_19_ldv_param_1_71);
      
#line 1422 
      goto ldv_45923;
      case 25: 
#line 1424 
      ;
      
#line 1426 
      ldv_19_ldv_param_1_69 = (struct ethtool_eeprom *)ldv_xmalloc_unknown_size(0UL);
      
#line 1427 
      ldv_19_ldv_param_2_70 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
      
#line 1432 
      ldv_emg_wrapper_ixgbe_set_eeprom_10(ldv_19_container,ldv_19_ldv_param_1_69,ldv_19_ldv_param_2_70);
      
#line 1436 
      ldv_free((void *)ldv_19_ldv_param_1_69);
      
#line 1437 
      ldv_free((void *)ldv_19_ldv_param_2_70);
      
#line 1440 
      goto ldv_45923;
      case 26: 
#line 1442 
      ;
      
#line 1444 
      ldv_19_ldv_param_1_68 = (struct ethtool_channels *)ldv_xmalloc_unknown_size(0UL);
      
#line 1449 
      ldv_emg_wrapper_ixgbe_set_channels_35(ldv_19_container,ldv_19_ldv_param_1_68);
      
#line 1453 
      ldv_free((void *)ldv_19_ldv_param_1_68);
      
#line 1456 
      goto ldv_45923;
      case 27: 
#line 1458 
      ;
      
#line 1460 
      ldv_19_ldv_param_1_66 = (struct ethtool_test *)ldv_xmalloc_unknown_size(0UL);
      
#line 1461 
      ldv_19_ldv_param_2_67 = (unsigned long long *)ldv_xmalloc_unknown_size(0UL);
      
#line 1466 
      ldv_emg_wrapper_ixgbe_diag_test_34(ldv_19_container,ldv_19_ldv_param_1_66,ldv_19_ldv_param_2_67);
      
#line 1470 
      ldv_free((void *)ldv_19_ldv_param_1_66);
      
#line 1471 
      ldv_free((void *)ldv_19_ldv_param_2_67);
      
#line 1474 
      goto ldv_45923;
      case 28: 
#line 1476 
      ;
      
#line 1482 
      ldv_emg_wrapper_ixgbe_set_features_33(ldv_19_container,ldv_19_ldv_param_1_65);
      
#line 1488 
      goto ldv_45923;
      case 29: 
#line 1490 
      ;
      
#line 1496 
      ixgbe_ndo_set_vf_vlan(ldv_19_container,ldv_19_ldv_param_1_62,(unsigned short)((int)ldv_19_ldv_param_2_63),(unsigned char)((int)ldv_19_ldv_param_3_64));
      
#line 1502 
      goto ldv_45923;
      case 30: 
#line 1504 
      ;
      
#line 1507 
      (*ldv_emg_alias_eth_validate_addr_32)(ldv_19_container);
      
#line 1510 
      goto ldv_45923;
      case 31: 
#line 1512 
      ;
      
#line 1514 
      ldv_19_ldv_param_1_61 = (struct ethtool_channels *)ldv_xmalloc_unknown_size(0UL);
      
#line 1519 
      ldv_emg_wrapper_ixgbe_get_channels_31(ldv_19_container,ldv_19_ldv_param_1_61);
      
#line 1523 
      ldv_free((void *)ldv_19_ldv_param_1_61);
      
#line 1526 
      goto ldv_45923;
      case 32: 
#line 1528 
      ;
      
#line 1530 
      ldv_19_ldv_param_1_60 = (struct ethtool_ts_info *)ldv_xmalloc_unknown_size(0UL);
      
#line 1535 
      ldv_emg_wrapper_ixgbe_get_ts_info_52(ldv_19_container,ldv_19_ldv_param_1_60);
      
#line 1539 
      ldv_free((void *)ldv_19_ldv_param_1_60);
      
#line 1542 
      goto ldv_45923;
      case 33: 
#line 1544 
      ;
      
#line 1547 
      ldv_emg_wrapper_ixgbe_rss_indir_size_29(ldv_19_container);
      
#line 1550 
      goto ldv_45923;
      case 34: 
#line 1552 
      ;
      
#line 1555 
      (*ldv_emg_alias_ethtool_op_get_link_28)(ldv_19_container);
      
#line 1558 
      goto ldv_45923;
      case 35: 
#line 1560 
      ;
      
#line 1566 
      ixgbe_ndo_set_vf_spoofchk(ldv_19_container,ldv_19_ldv_param_1_58,(_Bool)((bool)((int)ldv_19_ldv_param_2_59) != 0));
      
#line 1572 
      goto ldv_45923;
      case 36: 
#line 1574 
      ;
      
#line 1576 
      ldv_19_ldv_param_1_57 = (struct ethtool_pauseparam *)ldv_xmalloc_unknown_size(0UL);
      
#line 1581 
      ldv_emg_wrapper_ixgbe_get_pauseparam_27(ldv_19_container,ldv_19_ldv_param_1_57);
      
#line 1585 
      ldv_free((void *)ldv_19_ldv_param_1_57);
      
#line 1588 
      goto ldv_45923;
      case 37: 
#line 1590 
      ;
      
#line 1593 
      ixgbe_set_rx_mode(ldv_19_container);
      
#line 1596 
      goto ldv_45923;
      case 38: 
#line 1598 
      ;
      
#line 1601 
      ldv_emg_wrapper_ixgbe_nway_reset_26(ldv_19_container);
      
#line 1604 
      goto ldv_45923;
      case 39: 
#line 1606 
      ;
      
#line 1608 
      ldv_19_ldv_param_2_56 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
      
#line 1609 
      ldv_19_ldv_param_1_55 = (struct ethtool_eeprom *)ldv_xmalloc_unknown_size(0UL);
      
#line 1614 
      ldv_emg_wrapper_ixgbe_get_module_eeprom_25(ldv_19_container,ldv_19_ldv_param_1_55,ldv_19_ldv_param_2_56);
      
#line 1618 
      ldv_free((void *)ldv_19_ldv_param_2_56);
      
#line 1619 
      ldv_free((void *)ldv_19_ldv_param_1_55);
      
#line 1622 
      goto ldv_45923;
      case 40: 
#line 1624 
      ;
      
#line 1630 
      ldv_emg_wrapper_ixgbe_del_vxlan_port_24(ldv_19_container,(unsigned short)((int)ldv_19_ldv_param_1_53),(unsigned short)((int)ldv_19_ldv_param_2_54));
      
#line 1636 
      goto ldv_45923;
      case 41: 
#line 1638 
      ;
      
#line 1640 
      ldv_19_ldv_param_3_52 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
      
#line 1641 
      ldv_19_ldv_param_2_51 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
      
#line 1642 
      ldv_19_ldv_param_1_50 = (unsigned int *)ldv_xmalloc_unknown_size(0UL);
      
#line 1647 
      ldv_emg_wrapper_ixgbe_get_rxfh_23(ldv_19_container,ldv_19_ldv_param_1_50,ldv_19_ldv_param_2_51,ldv_19_ldv_param_3_52);
      
#line 1651 
      ldv_free((void *)ldv_19_ldv_param_3_52);
      
#line 1652 
      ldv_free((void *)ldv_19_ldv_param_2_51);
      
#line 1653 
      ldv_free((void *)ldv_19_ldv_param_1_50);
      
#line 1656 
      goto ldv_45923;
      case 42: 
#line 1658 
      ;
      
#line 1660 
      ldv_19_ldv_param_1_49 = (struct ethtool_ringparam *)ldv_xmalloc_unknown_size(0UL);
      
#line 1665 
      ldv_emg_wrapper_ixgbe_get_ringparam_22(ldv_19_container,ldv_19_ldv_param_1_49);
      
#line 1669 
      ldv_free((void *)ldv_19_ldv_param_1_49);
      
#line 1672 
      goto ldv_45923;
      case 43: 
#line 1674 
      ;
      
#line 1676 
      ldv_19_ldv_param_2_48 = (unsigned int *)ldv_xmalloc_unknown_size(0UL);
      
#line 1677 
      ldv_19_ldv_param_1_47 = (struct ethtool_rxnfc *)ldv_xmalloc_unknown_size(0UL);
      
#line 1682 
      ldv_emg_wrapper_ixgbe_get_rxnfc_21(ldv_19_container,ldv_19_ldv_param_1_47,ldv_19_ldv_param_2_48);
      
#line 1686 
      ldv_free((void *)ldv_19_ldv_param_2_48);
      
#line 1687 
      ldv_free((void *)ldv_19_ldv_param_1_47);
      
#line 1690 
      goto ldv_45923;
      case 44: 
#line 1692 
      ;
      
#line 1694 
      ldv_19_ldv_param_0_46 = (struct napi_struct *)ldv_xmalloc_unknown_size(0UL);
      
#line 1699 
      ldv_emg_wrapper_ixgbe_low_latency_recv_56(ldv_19_ldv_param_0_46);
      
#line 1703 
      ldv_free((void *)ldv_19_ldv_param_0_46);
      
#line 1706 
      goto ldv_45923;
      case 45: 
#line 1708 
      ;
      
#line 1714 
      ixgbe_ndo_set_vf_bw(ldv_19_container,ldv_19_ldv_param_1_43,ldv_19_ldv_param_2_44,ldv_19_ldv_param_3_45);
      
#line 1720 
      goto ldv_45923;
      case 46: 
#line 1722 
      ;
      
#line 1724 
      ldv_19_ldv_param_2_41 = (struct scatterlist *)ldv_xmalloc_unknown_size(0UL);
      
#line 1729 
      ixgbe_fcoe_ddp_target(ldv_19_container,(unsigned short)((int)ldv_19_ldv_param_1_40),ldv_19_ldv_param_2_41,ldv_19_ldv_param_3_42);
      
#line 1733 
      ldv_free((void *)ldv_19_ldv_param_2_41);
      
#line 1736 
      goto ldv_45923;
      case 47: 
#line 1738 
      ;
      
#line 1740 
      ldv_19_ldv_param_1_39 = (struct ethtool_wolinfo *)ldv_xmalloc_unknown_size(0UL);
      
#line 1745 
      ldv_emg_wrapper_ixgbe_set_wol_20(ldv_19_container,ldv_19_ldv_param_1_39);
      
#line 1749 
      ldv_free((void *)ldv_19_ldv_param_1_39);
      
#line 1752 
      goto ldv_45923;
      case 48: 
#line 1754 
      ;
      
#line 1756 
      ldv_19_ldv_param_0_34 = (struct ndmsg *)ldv_xmalloc_unknown_size(0UL);
      
#line 1757 
      ldv_19_ldv_param_1_35 = (struct nlattr **)ldv_xmalloc_unknown_size(0UL);
      
#line 1758 
      ldv_19_ldv_param_3_36 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
      
#line 1763 
      ldv_emg_wrapper_ixgbe_ndo_fdb_add_19(ldv_19_ldv_param_0_34,ldv_19_ldv_param_1_35,ldv_19_container,ldv_19_ldv_param_3_36,(unsigned short)((int)ldv_19_ldv_param_4_37),(unsigned short)((int)ldv_19_ldv_param_5_38));
      
#line 1767 
      ldv_free((void *)ldv_19_ldv_param_0_34);
      
#line 1768 
      ldv_free((void *)ldv_19_ldv_param_1_35);
      
#line 1769 
      ldv_free((void *)ldv_19_ldv_param_3_36);
      
#line 1772 
      goto ldv_45923;
      case 49: 
#line 1774 
      ;
      
#line 1776 
      ldv_19_ldv_param_1_32 = (struct ifreq *)ldv_xmalloc_unknown_size(0UL);
      
#line 1781 
      ldv_emg_wrapper_ixgbe_ioctl_18(ldv_19_container,ldv_19_ldv_param_1_32,ldv_19_ldv_param_2_33);
      
#line 1785 
      ldv_free((void *)ldv_19_ldv_param_1_32);
      
#line 1788 
      goto ldv_45923;
      case 50: 
#line 1790 
      ;
      
#line 1796 
      ldv_emg_wrapper_ixgbe_set_msglevel_30(ldv_19_container,ldv_19_ldv_param_1_31);
      
#line 1802 
      goto ldv_45923;
      case 51: 
#line 1804 
      ;
      
#line 1810 
      ixgbe_ndo_set_vf_rss_query_en(ldv_19_container,ldv_19_ldv_param_1_29,(_Bool)((bool)((int)ldv_19_ldv_param_2_30) != 0));
      
#line 1816 
      goto ldv_45923;
      case 52: 
#line 1818 
      ;
      
#line 1821 
      ldv_emg_wrapper_ixgbe_get_rxfh_key_size_11(ldv_19_container);
      
#line 1824 
      goto ldv_45923;
      case 53: 
#line 1826 
      ;
      
#line 1828 
      ldv_19_ldv_param_1_28 = (struct ethtool_cmd *)ldv_xmalloc_unknown_size(0UL);
      
#line 1833 
      ldv_emg_wrapper_ixgbe_get_settings_39(ldv_19_container,ldv_19_ldv_param_1_28);
      
#line 1837 
      ldv_free((void *)ldv_19_ldv_param_1_28);
      
#line 1840 
      goto ldv_45923;
      case 54: 
#line 1842 
      ;
      
#line 1848 
      ldv_emg_wrapper_ixgbe_get_sset_count_49(ldv_19_container,ldv_19_ldv_param_1_27);
      
#line 1854 
      goto ldv_45923;
      case 55: 
#line 1856 
      ;
      
#line 1858 
      ldv_19_ldv_param_1_26 = ldv_xmalloc_unknown_size(0UL);
      
#line 1863 
      ldv_emg_wrapper_ixgbe_set_mac_14(ldv_19_container,ldv_19_ldv_param_1_26);
      
#line 1867 
      ldv_free(ldv_19_ldv_param_1_26);
      
#line 1870 
      goto ldv_45923;
      case 56: 
#line 1872 
      ;
      
#line 1874 
      ldv_19_ldv_param_0_25 = (struct sk_buff *)ldv_xmalloc_unknown_size(0UL);
      
#line 1879 
      ldv_emg_wrapper_ixgbe_xmit_frame_13(ldv_19_ldv_param_0_25,ldv_19_container);
      
#line 1883 
      ldv_free((void *)ldv_19_ldv_param_0_25);
      
#line 1886 
      goto ldv_45923;
      case 57: 
#line 1888 
      ;
      
#line 1891 
      ldv_emg_wrapper_ixgbe_get_msglevel_12(ldv_19_container);
      
#line 1894 
      goto ldv_45923;
      case 58: 
#line 1896 
      ;
      
#line 1898 
      ldv_19_ldv_param_1_24 = (struct ethtool_ringparam *)ldv_xmalloc_unknown_size(0UL);
      
#line 1903 
      ldv_emg_wrapper_ixgbe_set_ringparam_17(ldv_19_container,ldv_19_ldv_param_1_24);
      
#line 1907 
      ldv_free((void *)ldv_19_ldv_param_1_24);
      
#line 1910 
      goto ldv_45923;
      case 59: 
#line 1912 
      ;
      
#line 1914 
      ldv_19_ldv_param_2_22 = (struct scatterlist *)ldv_xmalloc_unknown_size(0UL);
      
#line 1919 
      ixgbe_fcoe_ddp_get(ldv_19_container,(unsigned short)((int)ldv_19_ldv_param_1_21),ldv_19_ldv_param_2_22,ldv_19_ldv_param_3_23);
      
#line 1923 
      ldv_free((void *)ldv_19_ldv_param_2_22);
      
#line 1926 
      goto ldv_45923;
      case 60: 
#line 1928 
      ;
      
#line 1934 
      ldv_emg_wrapper_ixgbe_add_vxlan_port_37(ldv_19_container,(unsigned short)((int)ldv_19_ldv_param_1_19),(unsigned short)((int)ldv_19_ldv_param_2_20));
      
#line 1940 
      goto ldv_45923;
      case 61: 
#line 1942 
      ;
      
#line 1944 
      ldv_19_ldv_param_2_18 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
      
#line 1949 
      ixgbe_ndo_set_vf_mac(ldv_19_container,ldv_19_ldv_param_1_17,ldv_19_ldv_param_2_18);
      
#line 1953 
      ldv_free((void *)ldv_19_ldv_param_2_18);
      
#line 1956 
      goto ldv_45923;
      case 62: 
#line 1958 
      ;
      
#line 1960 
      ldv_19_ldv_param_1_16 = (struct ethtool_drvinfo *)ldv_xmalloc_unknown_size(0UL);
      
#line 1965 
      ldv_emg_wrapper_ixgbe_get_drvinfo_9(ldv_19_container,ldv_19_ldv_param_1_16);
      
#line 1969 
      ldv_free((void *)ldv_19_ldv_param_1_16);
      
#line 1972 
      goto ldv_45923;
      case 63: 
#line 1974 
      ;
      
#line 1976 
      ldv_19_ldv_param_1_15 = (struct ethtool_rxnfc *)ldv_xmalloc_unknown_size(0UL);
      
#line 1981 
      ldv_emg_wrapper_ixgbe_set_rxnfc_8(ldv_19_container,ldv_19_ldv_param_1_15);
      
#line 1985 
      ldv_free((void *)ldv_19_ldv_param_1_15);
      
#line 1988 
      goto ldv_45923;
      case 64: 
#line 1990 
      ;
      
#line 1996 
      ldv_emg_wrapper_ixgbe_change_mtu_7(ldv_19_container,ldv_19_ldv_param_1_14);
      
#line 2002 
      goto ldv_45923;
      case 65: 
#line 2004 
      ;
      
#line 2006 
      ldv_19_ldv_param_0_9 = (struct sk_buff *)ldv_xmalloc_unknown_size(0UL);
      
#line 2011 
      ldv_emg_wrapper_ixgbe_ndo_bridge_getlink_6(ldv_19_ldv_param_0_9,ldv_19_ldv_param_1_10,ldv_19_ldv_param_2_11,ldv_19_container,ldv_19_ldv_param_4_12,ldv_19_ldv_param_5_13);
      
#line 2015 
      ldv_free((void *)ldv_19_ldv_param_0_9);
      
#line 2018 
      goto ldv_45923;
      case 66: 
#line 2020 
      ;
      
#line 2022 
      ldv_19_ldv_param_1_7 = (struct ethtool_stats *)ldv_xmalloc_unknown_size(0UL);
      
#line 2023 
      ldv_19_ldv_param_2_8 = (unsigned long long *)ldv_xmalloc_unknown_size(0UL);
      
#line 2028 
      ldv_emg_wrapper_ixgbe_get_ethtool_stats_5(ldv_19_container,ldv_19_ldv_param_1_7,ldv_19_ldv_param_2_8);
      
#line 2032 
      ldv_free((void *)ldv_19_ldv_param_1_7);
      
#line 2033 
      ldv_free((void *)ldv_19_ldv_param_2_8);
      
#line 2036 
      goto ldv_45923;
      case 67: 
#line 2038 
      ;
      
#line 2040 
      ldv_19_ldv_param_1_6 = (struct netdev_fcoe_hbainfo *)ldv_xmalloc_unknown_size(0UL);
      
#line 2045 
      ixgbe_fcoe_get_hbainfo(ldv_19_container,ldv_19_ldv_param_1_6);
      
#line 2049 
      ldv_free((void *)ldv_19_ldv_param_1_6);
      
#line 2052 
      goto ldv_45923;
      case 68: 
#line 2054 
      ;
      
#line 2056 
      ldv_19_ldv_param_1_5 = (struct rtnl_link_stats64 *)ldv_xmalloc_unknown_size(0UL);
      
#line 2061 
      ldv_emg_wrapper_ixgbe_get_stats64_4(ldv_19_container,ldv_19_ldv_param_1_5);
      
#line 2065 
      ldv_free((void *)ldv_19_ldv_param_1_5);
      
#line 2068 
      goto ldv_45923;
      case 69: 
#line 2070 
      ;
      
#line 2072 
      ldv_19_ldv_param_1_4 = (enum ethtool_phys_id_state *)ldv_xmalloc_unknown_size(0UL);
      
#line 2077 
      ldv_emg_wrapper_ixgbe_set_phys_id_3(ldv_19_container,*ldv_19_ldv_param_1_4);
      
#line 2081 
      ldv_free((void *)ldv_19_ldv_param_1_4);
      
#line 2084 
      goto ldv_45923;
      case 70: 
#line 2086 
      ;
      
#line 2088 
      ldv_19_ldv_param_1_3 = (struct ethtool_cmd *)ldv_xmalloc_unknown_size(0UL);
      
#line 2093 
      ldv_emg_wrapper_ixgbe_set_settings_2(ldv_19_container,ldv_19_ldv_param_1_3);
      
#line 2097 
      ldv_free((void *)ldv_19_ldv_param_1_3);
      
#line 2100 
      goto ldv_45923;
      case 71: 
#line 2102 
      ;
      
#line 2105 
      ixgbe_fcoe_enable(ldv_19_container);
      
#line 2108 
      goto ldv_45923;
      default: 
#line 2110 
      ;
      
#line 2110 
      __VERIFIER_assume(0);
    }
    ldv_45923: 
#line 2119 
    ;
    
#line 2119 
    goto ldv_call_19;
  }
  else {
    
#line 2127 
    __retres = (void *)0;
    
#line 2127 
    goto return_label;
  }
  
#line 2130 
  __retres = (void *)0;
  return_label: 
#line 2130 
                return __retres;
}


#line 2135  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_interrupt_scenario_18(void *arg0)
{
  void *__retres;
  enum irqreturn ldv_18_ret_val;
  int ldv_18_line;
  void *ldv_18_data;
  enum irqreturn (*ldv_18_thread)(int , void *);
  int tmp;
  
#line 2141 
  enum irqreturn (*ldv_18_callback)(int , void *) = & ldv_emg_wrapper_ixgbe_test_intr_2;
  
#line 2144 
  struct ldv_struct_interrupt_scenario_14 *data = (struct ldv_struct_interrupt_scenario_14 *)arg0;
  
#line 2149 
  if (data != (struct ldv_struct_interrupt_scenario_14 *)0) {
    
#line 2150 
    ldv_18_line = data->arg0;
    
#line 2151 
    ldv_18_callback = data->arg1;
    
#line 2152 
    ldv_18_thread = data->arg2;
    
#line 2153 
    ldv_18_data = data->arg3;
    
#line 2154 
    ldv_free((void *)data);
  }
  else ;
  
#line 2160 
  ldv_switch_to_interrupt_context();
  
#line 2162 
  ldv_18_ret_val = ldv_emg_wrapper_ixgbe_test_intr_2(ldv_18_line,ldv_18_data);
  
#line 2164 
  ldv_switch_to_process_context();
  
#line 2167 
  tmp = ldv_undef_int();
  
#line 2167 
  if (tmp != 0) {
    
#line 2169 
    __VERIFIER_assume(ldv_18_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    
#line 2173 
    if (ldv_18_thread != (enum irqreturn (*)(int , void *))0) 
#line 2175 
                                                              (*ldv_18_thread)(ldv_18_line,ldv_18_data); else ;
  }
  else 
#line 2182 
       __VERIFIER_assume(ldv_18_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  
#line 2191 
  __retres = (void *)0;
  
#line 2191 
  goto return_label;
  
#line 2193 
  __retres = (void *)0;
  return_label: 
#line 2193 
                return __retres;
}


#line 2198  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_irq_register_13_3(int arg0, enum irqreturn (*arg1)(int , void *), enum irqreturn (*arg2)(int , void *), void *arg3)
{
  int ret;
  struct ldv_struct_interrupt_scenario_14 *cf_arg_16;
  struct ldv_struct_interrupt_scenario_14 *cf_arg_18;
  struct ldv_struct_interrupt_scenario_14 *cf_arg_22;
  struct ldv_struct_interrupt_scenario_14 *cf_arg_14;
  int tmp;
  
#line 2204 
  tmp = ldv_undef_int();
  
#line 2204 
  switch (tmp) {
    case 0: 
#line 2205 
    ;
    
#line 2206 
    cf_arg_16 = (struct ldv_struct_interrupt_scenario_14 *)ldv_xmalloc(32UL);
    
#line 2207 
    cf_arg_16->arg0 = arg0;
    
#line 2208 
    cf_arg_16->arg1 = arg1;
    
#line 2209 
    cf_arg_16->arg2 = arg2;
    
#line 2210 
    cf_arg_16->arg3 = arg3;
    
#line 2211 
    ret = pthread_create(& ldv_thread_16,(pthread_attr_t const *)0,& ldv_interrupt_scenario_16,(void *)cf_arg_16);
    
#line 2212 
    __VERIFIER_assume(ret == 0);
    
#line 2213 
    goto ldv_46024;
    case 1: 
#line 2215 
    ;
    
#line 2216 
    cf_arg_18 = (struct ldv_struct_interrupt_scenario_14 *)ldv_xmalloc(32UL);
    
#line 2217 
    cf_arg_18->arg0 = arg0;
    
#line 2218 
    cf_arg_18->arg1 = arg1;
    
#line 2219 
    cf_arg_18->arg2 = arg2;
    
#line 2220 
    cf_arg_18->arg3 = arg3;
    
#line 2221 
    ret = pthread_create(& ldv_thread_18,(pthread_attr_t const *)0,& ldv_interrupt_scenario_18,(void *)cf_arg_18);
    
#line 2222 
    __VERIFIER_assume(ret == 0);
    
#line 2223 
    goto ldv_46024;
    case 2: 
#line 2225 
    ;
    
#line 2226 
    cf_arg_22 = (struct ldv_struct_interrupt_scenario_14 *)ldv_xmalloc(32UL);
    
#line 2227 
    cf_arg_22->arg0 = arg0;
    
#line 2228 
    cf_arg_22->arg1 = arg1;
    
#line 2229 
    cf_arg_22->arg2 = arg2;
    
#line 2230 
    cf_arg_22->arg3 = arg3;
    
#line 2231 
    ret = pthread_create(& ldv_thread_22,(pthread_attr_t const *)0,& ldv_interrupt_scenario_22,(void *)cf_arg_22);
    
#line 2232 
    __VERIFIER_assume(ret == 0);
    
#line 2233 
    goto ldv_46024;
    case 3: 
#line 2235 
    ;
    
#line 2236 
    cf_arg_14 = (struct ldv_struct_interrupt_scenario_14 *)ldv_xmalloc(32UL);
    
#line 2237 
    cf_arg_14->arg0 = arg0;
    
#line 2238 
    cf_arg_14->arg1 = arg1;
    
#line 2239 
    cf_arg_14->arg2 = arg2;
    
#line 2240 
    cf_arg_14->arg3 = arg3;
    
#line 2241 
    ret = pthread_create(& ldv_thread_14,(pthread_attr_t const *)0,& ldv_interrupt_scenario_14,(void *)cf_arg_14);
    
#line 2242 
    __VERIFIER_assume(ret == 0);
    
#line 2243 
    goto ldv_46024;
    default: 
#line 2245 
    ;
    
#line 2245 
    __VERIFIER_assume(0);
  }
  ldv_46024: 
#line 2246 
  ;
  
#line 2247 
  return;
}


#line 2251  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_instance_deregister_11_1(struct timer_list *arg0)
{
  int ret;
  struct ldv_struct_timer_scenario_21 *cf_arg_21;
  int tmp;
  
#line 2254 
  tmp = ldv_undef_int();
  
#line 2254 
  switch (tmp) {
    case 0: 
#line 2255 
    ;
    
#line 2256 
    ret = pthread_join(ldv_thread_21,(void **)0);
    
#line 2257 
    __VERIFIER_assume(ret == 0);
    
#line 2258 
    goto ldv_46035;
    default: 
#line 2260 
    ;
    
#line 2260 
    __VERIFIER_assume(0);
  }
  ldv_46035: 
#line 2261 
  ;
  
#line 2262 
  return;
}


#line 2266  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/emg/environment_model.c"
_Bool ldv_emg_schedule_work(struct work_struct *arg0)
{
  _Bool __retres;
  struct work_struct *ldv_10_work_struct;
  int tmp;
  
#line 2273 
  tmp = ldv_undef_int();
  
#line 2273 
  if (tmp != 0) {
    
#line 2275 
    ldv_10_work_struct = arg0;
    
#line 2279 
    if (ldv_10_work_struct->func != (void (*)(struct work_struct *))0) 
      
#line 2281 
      (*(ldv_10_work_struct->func))(ldv_10_work_struct); else ;
    
#line 2286 
    __retres = (_Bool)1;
    
#line 2286 
    goto return_label;
  }
  else {
    
#line 2293 
    __retres = (_Bool)0;
    
#line 2293 
    goto return_label;
  }
  return_label: 
#line 2273 
                return __retres;
}


#line 2303  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/emg/environment_model.c"
int main(void)
{
  int __retres;
  
#line 2306 
  ldv_initialize();
  
#line 2309 
  ldv_initialization_1((void *)0);
  
#line 2311 
  __retres = 0;
  
#line 2311 
  return __retres;
}


#line 2316  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_register_12_3(struct file_operations *arg0)
{
  int ret;
  struct ldv_struct_character_driver_scenario_15 *cf_arg_20;
  struct ldv_struct_character_driver_scenario_15 *cf_arg_15;
  int tmp;
  
#line 2320 
  tmp = ldv_undef_int();
  
#line 2320 
  switch (tmp) {
    case 0: 
#line 2321 
    ;
    
#line 2322 
    cf_arg_20 = (struct ldv_struct_character_driver_scenario_15 *)ldv_xmalloc(16UL);
    
#line 2323 
    cf_arg_20->arg0 = arg0;
    
#line 2324 
    ret = pthread_create(& ldv_thread_20,(pthread_attr_t const *)0,& ldv_character_driver_scenario_20,(void *)cf_arg_20);
    
#line 2325 
    __VERIFIER_assume(ret == 0);
    
#line 2326 
    goto ldv_46051;
    case 1: 
#line 2328 
    ;
    
#line 2329 
    cf_arg_15 = (struct ldv_struct_character_driver_scenario_15 *)ldv_xmalloc(16UL);
    
#line 2330 
    cf_arg_15->arg0 = arg0;
    
#line 2331 
    ret = pthread_create(& ldv_thread_15,(pthread_attr_t const *)0,& ldv_character_driver_scenario_15,(void *)cf_arg_15);
    
#line 2332 
    __VERIFIER_assume(ret == 0);
    
#line 2333 
    goto ldv_46051;
    default: 
#line 2335 
    ;
    
#line 2335 
    __VERIFIER_assume(0);
  }
  ldv_46051: 
#line 2336 
  ;
  
#line 2337 
  return;
}


#line 2341  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_emg_pci_unregister_driver(struct pci_driver *arg0)
{
  
#line 2344 
  struct pci_driver *ldv_7_pci_driver = ldv_emg_alias_ixgbe_driver_2;
  
#line 2347 
  ldv_7_pci_driver = arg0;
  
#line 2351 
  ldv_dispatch_deregister_7_1(ldv_7_pci_driver);
  
#line 2355 
  goto return_label;
  return_label: 
#line 2357 
                return;
}


#line 2362  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_instance_register_3_3(struct timer_list *arg0)
{
  int ret;
  struct ldv_struct_timer_scenario_21 *cf_arg_21;
  int tmp;
  
#line 2365 
  tmp = ldv_undef_int();
  
#line 2365 
  switch (tmp) {
    case 0: 
#line 2366 
    ;
    
#line 2367 
    cf_arg_21 = (struct ldv_struct_timer_scenario_21 *)ldv_xmalloc(16UL);
    
#line 2368 
    cf_arg_21->arg0 = arg0;
    
#line 2369 
    ret = pthread_create(& ldv_thread_21,(pthread_attr_t const *)0,& ldv_timer_scenario_21,(void *)cf_arg_21);
    
#line 2370 
    __VERIFIER_assume(ret == 0);
    
#line 2371 
    goto ldv_46064;
    default: 
#line 2373 
    ;
    
#line 2373 
    __VERIFIER_assume(0);
  }
  ldv_46064: 
#line 2374 
  ;
  
#line 2375 
  return;
}


#line 2379  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_irq_deregister_6_1(int arg0)
{
  int ret;
  struct ldv_struct_free_irq_6 *cf_arg_16;
  struct ldv_struct_free_irq_6 *cf_arg_18;
  struct ldv_struct_free_irq_6 *cf_arg_22;
  struct ldv_struct_free_irq_6 *cf_arg_14;
  int tmp;
  
#line 2385 
  tmp = ldv_undef_int();
  
#line 2385 
  switch (tmp) {
    case 0: 
#line 2386 
    ;
    
#line 2387 
    ret = pthread_join(ldv_thread_16,(void **)0);
    
#line 2388 
    __VERIFIER_assume(ret == 0);
    
#line 2389 
    goto ldv_46075;
    case 1: 
#line 2391 
    ;
    
#line 2392 
    ret = pthread_join(ldv_thread_18,(void **)0);
    
#line 2393 
    __VERIFIER_assume(ret == 0);
    
#line 2394 
    goto ldv_46075;
    case 2: 
#line 2396 
    ;
    
#line 2397 
    ret = pthread_join(ldv_thread_22,(void **)0);
    
#line 2398 
    __VERIFIER_assume(ret == 0);
    
#line 2399 
    goto ldv_46075;
    case 3: 
#line 2401 
    ;
    
#line 2402 
    ret = pthread_join(ldv_thread_14,(void **)0);
    
#line 2403 
    __VERIFIER_assume(ret == 0);
    
#line 2404 
    goto ldv_46075;
    default: 
#line 2406 
    ;
    
#line 2406 
    __VERIFIER_assume(0);
  }
  ldv_46075: 
#line 2407 
  ;
  
#line 2408 
  return;
}


#line 2412  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_pci_scenario_17(void *arg0)
{
  void *__retres;
  struct pci_dev *ldv_17_resource_1;
  struct pci_device_id *ldv_17_ldv_param_1_2;
  int ldv_17_ldv_param_1_3;
  struct pm_message ldv_17_resource_0;
  int tmp_2;
  int tmp_3;
  
#line 2418 
  struct pci_driver *ldv_17_container = ldv_emg_alias_ixgbe_driver_2;
  
#line 2419 
  int ldv_17_ret = ldv_undef_int();
  
#line 2422 
  struct ldv_struct_pci_scenario_17 *data = (struct ldv_struct_pci_scenario_17 *)arg0;
  
#line 2426 
  ldv_17_ret = ldv_undef_int();
  
#line 2429 
  if (data != (struct ldv_struct_pci_scenario_17 *)0) {
    
#line 2430 
    ldv_17_container = data->arg0;
    
#line 2431 
    ldv_free((void *)data);
  }
  else ;
  
#line 2442 
  goto ldv_main_17;
  
#line 2444 
  __retres = (void *)0;
  
#line 2444 
  goto return_label;
  ldv_main_17: 
#line 2447 
  ;
  
#line 2450 
  tmp_2 = ldv_undef_int();
  
#line 2450 
  if (tmp_2 != 0) {
    int tmp_1;
    
#line 2452 
    ldv_17_ldv_param_1_2 = (struct pci_device_id *)ldv_xmalloc_unknown_size(0UL);
    
#line 2457 
    ldv_pre_probe();
    
#line 2459 
    ldv_17_ret = ldv_emg_wrapper_ixgbe_probe_3(ldv_17_resource_1,ldv_17_ldv_param_1_2);
    
#line 2461 
    ldv_17_ret = ldv_post_probe(ldv_17_ret);
    
#line 2465 
    ldv_free((void *)ldv_17_ldv_param_1_2);
    
#line 2468 
    tmp_1 = ldv_undef_int();
    
#line 2468 
    if (tmp_1 != 0) {
      
#line 2470 
      __VERIFIER_assume(ldv_17_ret == 0);
      
#line 2477 
      goto ldv_call_17;
    }
    else {
      
#line 2481 
      __VERIFIER_assume(ldv_17_ret != 0);
      
#line 2488 
      goto ldv_main_17;
    }
  }
  else {
    
#line 2500 
    __retres = (void *)0;
    
#line 2500 
    goto return_label;
  }
  
#line 2503 
  __retres = (void *)0;
  
#line 2503 
  goto return_label;
  ldv_call_17: 
#line 2506 
  ;
  
#line 2509 
  tmp_3 = ldv_undef_int();
  
#line 2509 
  switch (tmp_3) {
    case 1: 
#line 2510 
    ;
    
#line 2516 
    ixgbe_pci_sriov_configure(ldv_17_resource_1,ldv_17_ldv_param_1_3);
    
#line 2526 
    goto ldv_call_17;
    case 2: 
#line 2529 
    ;
    
#line 2532 
    ldv_17_ret = ldv_emg_wrapper_ixgbe_suspend_4(ldv_17_resource_1,ldv_17_resource_0);
    
#line 2534 
    ldv_17_ret = ldv_filter_err_code(ldv_17_ret);
    
#line 2538 
    if (ldv_17_container->suspend_late != (int (*)(struct pci_dev *, pm_message_t ))0) {
      
#line 2540 
      ldv_17_ret = (*(ldv_17_container->suspend_late))(ldv_17_resource_1,ldv_17_resource_0);
      
#line 2542 
      ldv_17_ret = ldv_filter_err_code(ldv_17_ret);
    }
    else 
#line 2544 
         ldv_17_ret = ldv_undef_int();
    
#line 2549 
    if (ldv_17_container->resume_early != (int (*)(struct pci_dev *))0) 
      
#line 2551 
      (*(ldv_17_container->resume_early))(ldv_17_resource_1); else ;
    
#line 2557 
    ldv_emg_wrapper_ixgbe_resume_6(ldv_17_resource_1);
    
#line 2564 
    goto ldv_call_17;
    case 3: 
#line 2567 
    ;
    
#line 2570 
    ldv_emg_wrapper_ixgbe_shutdown_2(ldv_17_resource_1);
    
#line 2575 
    ldv_emg_wrapper_ixgbe_remove_5(ldv_17_resource_1);
    
#line 2582 
    goto ldv_main_17;
    default: 
#line 2585 
    ;
    
#line 2585 
    __VERIFIER_assume(0);
  }
  
#line 2588 
  __retres = (void *)0;
  return_label: 
#line 2588 
                return __retres;
}


#line 2593  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_emg_unregister_netdev(struct net_device *arg0)
{
  struct net_device *ldv_5_netdev;
  
#line 2599 
  ldv_5_netdev = arg0;
  
#line 2604 
  ldv_emg_wrapper_ixgbe_close_2(ldv_5_netdev);
  
#line 2608 
  ldv_dispatch_deregister_5_1(ldv_5_netdev);
  
#line 2612 
  goto return_label;
  return_label: 
#line 2614 
                return;
}


#line 2619  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_emg_free_irq(unsigned int arg0, void *arg1)
{
  int ldv_6_line;
  
#line 2625 
  ldv_6_line = (int)arg0;
  
#line 2629 
  ldv_dispatch_irq_deregister_6_1(ldv_6_line);
  
#line 2633 
  goto return_label;
  return_label: 
#line 2635 
                return;
}


#line 2640  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/emg/environment_model.c"
int ldv_emg_register_netdev(struct net_device *arg0)
{
  int __retres;
  struct net_device *ldv_8_netdev;
  int tmp_3;
  
#line 2644 
  int ldv_8_ret = ldv_undef_int();
  
#line 2647 
  ldv_8_ret = ldv_undef_int();
  
#line 2650 
  tmp_3 = ldv_undef_int();
  
#line 2650 
  if (tmp_3 != 0) {
    int tmp_1;
    
#line 2652 
    ldv_8_netdev = arg0;
    
#line 2657 
    ldv_8_ret = ldv_emg_wrapper_ixgbe_open_2(ldv_8_netdev);
    
#line 2660 
    tmp_1 = ldv_undef_int();
    
#line 2660 
    if (tmp_1 != 0) {
      
#line 2662 
      __VERIFIER_assume(ldv_8_ret == 0);
      
#line 2666 
      ldv_dispatch_register_8_4(ldv_8_netdev);
      
#line 2670 
      __retres = 0;
      
#line 2670 
      goto return_label;
    }
    else {
      int tmp_0;
      
#line 2677 
      __VERIFIER_assume(ldv_8_ret != 0);
      
#line 2678 
      ldv_failed_register_netdev();
      
#line 2679 
      tmp_0 = ldv_undef_int_negative();
      
#line 2679 
      __retres = tmp_0;
      
#line 2679 
      goto return_label;
    }
  }
  else {
    int tmp_2;
    
#line 2687 
    ldv_failed_register_netdev();
    
#line 2688 
    tmp_2 = ldv_undef_int_negative();
    
#line 2688 
    __retres = tmp_2;
    
#line 2688 
    goto return_label;
  }
  return_label: 
#line 2650 
                return __retres;
}


#line 2698  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_emg_free_netdev(struct net_device *arg0)
{
  struct net_device *ldv_2_netdev;
  
#line 2704 
  ldv_2_netdev = arg0;
  
#line 2705 
  ldv_free((void *)ldv_2_netdev);
  
#line 2709 
  goto return_label;
  return_label: 
#line 2711 
                return;
}


#line 2716  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_interrupt_scenario_14(void *arg0)
{
  void *__retres;
  enum irqreturn ldv_14_ret_val;
  int ldv_14_line;
  void *ldv_14_data;
  enum irqreturn (*ldv_14_thread)(int , void *);
  int tmp;
  
#line 2722 
  enum irqreturn (*ldv_14_callback)(int , void *) = & ldv_emg_wrapper_ixgbe_intr_2;
  
#line 2725 
  struct ldv_struct_interrupt_scenario_14 *data = (struct ldv_struct_interrupt_scenario_14 *)arg0;
  
#line 2730 
  if (data != (struct ldv_struct_interrupt_scenario_14 *)0) {
    
#line 2731 
    ldv_14_line = data->arg0;
    
#line 2732 
    ldv_14_callback = data->arg1;
    
#line 2733 
    ldv_14_thread = data->arg2;
    
#line 2734 
    ldv_14_data = data->arg3;
    
#line 2735 
    ldv_free((void *)data);
  }
  else ;
  
#line 2741 
  ldv_switch_to_interrupt_context();
  
#line 2743 
  ldv_14_ret_val = ldv_emg_wrapper_ixgbe_intr_2(ldv_14_line,ldv_14_data);
  
#line 2745 
  ldv_switch_to_process_context();
  
#line 2748 
  tmp = ldv_undef_int();
  
#line 2748 
  if (tmp != 0) {
    
#line 2750 
    __VERIFIER_assume(ldv_14_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    
#line 2754 
    if (ldv_14_thread != (enum irqreturn (*)(int , void *))0) 
#line 2756 
                                                              (*ldv_14_thread)(ldv_14_line,ldv_14_data); else ;
  }
  else 
#line 2763 
       __VERIFIER_assume(ldv_14_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  
#line 2772 
  __retres = (void *)0;
  
#line 2772 
  goto return_label;
  
#line 2774 
  __retres = (void *)0;
  return_label: 
#line 2774 
                return __retres;
}


#line 2779  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/ixgbe/ixgbe.ko/linux:concurrency safety/emg/environment_model.c"
int ldv_emg_mod_timer(struct timer_list *arg0, unsigned long arg1)
{
  int __retres;
  struct timer_list *ldv_3_timer_list;
  int tmp_0;
  
#line 2786 
  tmp_0 = ldv_undef_int();
  
#line 2786 
  if (tmp_0 != 0) {
    
#line 2788 
    ldv_3_timer_list = arg0;
    
#line 2792 
    ldv_dispatch_instance_register_3_3(ldv_3_timer_list);
    
#line 2796 
    __retres = 0;
    
#line 2796 
    goto return_label;
  }
  else {
    int tmp;
    
#line 2803 
    tmp = ldv_undef_int_negative();
    
#line 2803 
    __retres = tmp;
    
#line 2803 
    goto return_label;
  }
  return_label: 
#line 2786 
                return __retres;
}


