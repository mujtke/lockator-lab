/* Generated by Frama-C */

#line 20  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/int-ll64.h"
typedef unsigned char __u8;

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/int-ll64.h"
typedef unsigned short __u16;

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/int-ll64.h"
typedef int __s32;

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/int-ll64.h"
typedef unsigned int __u32;

#line 30  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/int-ll64.h"
typedef unsigned long long __u64;

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef signed char s8;

#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef unsigned char u8;

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef unsigned short u16;

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef int s32;

#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef unsigned int u32;

#line 24  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef long long s64;

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef unsigned long long u64;

#line 14  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef long __kernel_long_t;

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef unsigned long __kernel_ulong_t;

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_pid_t;

#line 48  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_uid32_t;

#line 49  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_gid32_t;

#line 71  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef __kernel_ulong_t __kernel_size_t;

#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_ssize_t;

#line 87  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_loff_t;

#line 88  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_time_t;

#line 89  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_clock_t;

#line 90  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_timer_t;

#line 91  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_clockid_t;

#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/types.h"
typedef __u16 __be16;

#line 35  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/types.h"
typedef __u32 __be32;

#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/types.h"
typedef __u64 __be64;

#line 12  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __u32 __kernel_dev_t;

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_dev_t dev_t;

#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef unsigned short umode_t;

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_pid_t pid_t;

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_clockid_t clockid_t;

#line 29  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef _Bool bool;

#line 31  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_uid32_t uid_t;

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_gid32_t gid_t;

#line 45  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_loff_t loff_t;

#line 54  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_size_t size_t;

#line 59  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_ssize_t ssize_t;

#line 69  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_time_t time_t;

#line 102  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __s32 int32_t;

#line 108  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __u32 uint32_t;

#line 133  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef unsigned long sector_t;

#line 134  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef unsigned long blkcnt_t;

#line 152  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef u64 dma_addr_t;

#line 157  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef unsigned int gfp_t;

#line 158  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef unsigned int fmode_t;

#line 159  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef unsigned int oom_flags_t;

#line 162  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef u64 phys_addr_t;

#line 167  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef phys_addr_t resource_size_t;

#line 177  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int counter ;
};

#line 177  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;

#line 182  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   long counter ;
};

#line 182  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;

#line 183  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};

#line 188 
struct hlist_node;

#line 188  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
struct hlist_head {
   struct hlist_node *first ;
};

#line 192  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};

#line 203  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
struct callback_head {
   struct callback_head *next ;
   void (*func)(struct callback_head *) ;
};

#line 14  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_cmd.c.aux"
struct kernel_symbol {
   unsigned long value ;
   char const *name ;
};

#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/export.h"
struct module;

#line 67  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/page_types.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/ptrace.h"
struct __anonstruct_9 {
   unsigned int a ;
   unsigned int b ;
};

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/ptrace.h"
struct __anonstruct_10 {
   u16 limit0 ;
   u16 base0 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))) base1 : 8 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) type : 4 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) s : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) dpl : 2 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) p : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) limit : 4 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) avl : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) l : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) d : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) g : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))) base2 : 8 ;
};

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/ptrace.h"
union __anonunion_8 {
   struct __anonstruct_9 __anonCompField___anonunion_8_4 ;
   struct __anonstruct_10 __anonCompField___anonunion_8_5 ;
};

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/ptrace.h"
struct desc_struct {
   union __anonunion_8 __anonCompField_desc_struct_6 ;
};

#line 12  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pteval_t;

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;

#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;

#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_64_types.h"
struct __anonstruct_pte_t_11 {
   pteval_t pte ;
};

#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_64_types.h"
typedef struct __anonstruct_pte_t_11 pte_t;

#line 20  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_64_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};

#line 218  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;

#line 220  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_12 {
   pgdval_t pgd ;
};

#line 220  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_12 pgd_t;

#line 361 
struct page;

#line 361  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_types.h"
typedef struct page *pgtable_t;

#line 372 
struct file;

#line 385 
struct seq_file;

#line 423 
struct thread_struct;

#line 425 
struct mm_struct;

#line 426 
struct task_struct;

#line 427 
struct cpumask;

#line 20  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/spinlock_types.h"
struct qspinlock {
   atomic_t val ;
};

#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/qspinlock_types.h"
typedef struct qspinlock arch_spinlock_t;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/qspinlock_types.h"
struct qrwlock {
   atomic_t cnts ;
   arch_spinlock_t lock ;
};

#line 14  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/qrwlock_types.h"
typedef struct qrwlock arch_rwlock_t;

#line 131  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/init.h"
typedef void (*ctor_fn_t)(void);

#line 234  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/printk.h"
struct _ddebug {
   char const *modname ;
   char const *function ;
   char const *filename ;
   char const *format ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))) lineno : 18 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))) flags : 8 ;
};

#line 48  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dynamic_debug.h"
struct device;

#line 420  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/printk.h"
struct file_operations;

#line 432 
struct completion;

#line 555  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/percpu.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};

#line 102  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bug.h"
struct timespec;

#line 104  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bug.h"
struct __anonstruct_futex_16 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};

#line 104  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bug.h"
struct __anonstruct_nanosleep_17 {
   clockid_t clockid ;
   struct timespec *rmtp ;
   struct compat_timespec *compat_rmtp ;
   u64 expires ;
};

#line 104  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bug.h"
struct __anonstruct_poll_18 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};

#line 104  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bug.h"
union __anonunion_15 {
   struct __anonstruct_futex_16 futex ;
   struct __anonstruct_nanosleep_17 nanosleep ;
   struct __anonstruct_poll_18 poll ;
};

#line 104  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bug.h"
struct restart_block {
   long (*fn)(struct restart_block *) ;
   union __anonunion_15 __anonCompField_restart_block_7 ;
};

#line 127  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/uapi/asm/vm86.h"
struct kernel_vm86_regs {
   struct pt_regs pt ;
   unsigned short es ;
   unsigned short __esh ;
   unsigned short ds ;
   unsigned short __dsh ;
   unsigned short fs ;
   unsigned short __fsh ;
   unsigned short gs ;
   unsigned short __gsh ;
};

#line 79  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/vm86.h"
union __anonunion_19 {
   struct pt_regs *regs ;
   struct kernel_vm86_regs *vm86 ;
};

#line 79  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/vm86.h"
struct math_emu_info {
   long ___orig_eip ;
   union __anonunion_19 __anonCompField_math_emu_info_8 ;
};

#line 328  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bitmap.h"
struct cpumask {
   unsigned long bits[128U] ;
};

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cpumask.h"
typedef struct cpumask cpumask_t;

#line 652  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cpumask.h"
typedef struct cpumask *cpumask_var_t;

#line 260  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/special_insns.h"
struct fregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_29 {
   u64 rip ;
   u64 rdp ;
};

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_30 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
union __anonunion_28 {
   struct __anonstruct_29 __anonCompField___anonunion_28_12 ;
   struct __anonstruct_30 __anonCompField___anonunion_28_13 ;
};

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
union __anonunion_31 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
struct fxregs_state {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_28 __anonCompField_fxregs_state_14 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_31 __anonCompField_fxregs_state_15 ;
};

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
struct swregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};

#line 155  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
struct xstate_header {
   u64 xfeatures ;
   u64 xcomp_bv ;
   u64 reserved[6U] ;
};

#line 161  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
struct xregs_state {
   struct fxregs_state i387 ;
   struct xstate_header header ;
   u8 __reserved[464U] ;
};

#line 179  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
union fpregs_state {
   struct fregs_state fsave ;
   struct fxregs_state fxsave ;
   struct swregs_state soft ;
   struct xregs_state xsave ;
   u8 __padding[4096U] ;
};

#line 194  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
struct fpu {
   unsigned int last_cpu ;
   unsigned char fpstate_active ;
   unsigned char fpregs_active ;
   unsigned char counter ;
   union fpregs_state state ;
};

#line 170  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/processor.h"
struct seq_operations;

#line 369 
struct perf_event;

#line 370  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp0 ;
   unsigned long sp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fs ;
   unsigned long gs ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_nr ;
   unsigned long error_code ;
   unsigned long *io_bitmap_ptr ;
   unsigned long iopl ;
   unsigned int io_bitmap_max ;
   struct fpu fpu ;
};

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/atomic-long.h"
typedef atomic64_t atomic_long_t;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bottom_half.h"
struct lockdep_map;

#line 55  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/debug_locks.h"
struct stack_trace {
   unsigned int nr_entries ;
   unsigned int max_entries ;
   unsigned long *entries ;
   int skip ;
};

#line 28  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/stacktrace.h"
struct lockdep_subclass_key {
   char __one_byte ;
};

#line 53  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockdep.h"
struct lock_class_key {
   struct lockdep_subclass_key subkeys[8U] ;
};

#line 59  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockdep.h"
struct lock_class {
   struct list_head hash_entry ;
   struct list_head lock_entry ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct stack_trace usage_traces[13U] ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   unsigned int version ;
   unsigned long ops ;
   char const *name ;
   int name_version ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};

#line 144  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache[2U] ;
   char const *name ;
   int cpu ;
   unsigned long ip ;
};

#line 205  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(13))) class_idx : 13 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) irq_context : 2 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) trylock : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) read : 2 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) check : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) hardirqs_off : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(12))) references : 12 ;
   unsigned int pin_count ;
};

#line 546  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockdep.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;

#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock_types.h"
struct __anonstruct_35 {
   u8 __padding[24U] ;
   struct lockdep_map dep_map ;
};

#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock_types.h"
union __anonunion_34 {
   struct raw_spinlock rlock ;
   struct __anonstruct_35 __anonCompField___anonunion_34_17 ;
};

#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion_34 __anonCompField_spinlock_18 ;
};

#line 76  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rwlock_types.h"
struct __anonstruct_rwlock_t_36 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rwlock_types.h"
typedef struct __anonstruct_rwlock_t_36 rwlock_t;

#line 59  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/jump_label.h"
struct jump_entry;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/jump_label.h"
typedef u64 jump_label_t;

#line 35  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/jump_label.h"
struct jump_entry {
   jump_label_t code ;
   jump_label_t target ;
   jump_label_t key ;
};

#line 41  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.h"
struct mutex;

#line 135  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/uapi/asm/stat.h"
struct seqcount {
   unsigned int sequence ;
   struct lockdep_map dep_map ;
};

#line 52  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/seqlock.h"
typedef struct seqcount seqcount_t;

#line 404  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/seqlock.h"
struct __anonstruct_seqlock_t_45 {
   struct seqcount seqcount ;
   spinlock_t lock ;
};

#line 404  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/seqlock.h"
typedef struct __anonstruct_seqlock_t_45 seqlock_t;

#line 598  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/seqlock.h"
struct timespec {
   __kernel_time_t tv_sec ;
   long tv_nsec ;
};

#line 83  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/highuid.h"
struct user_namespace;

#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uidgid.h"
struct __anonstruct_kuid_t_46 {
   uid_t val ;
};

#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uidgid.h"
typedef struct __anonstruct_kuid_t_46 kuid_t;

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uidgid.h"
struct __anonstruct_kgid_t_47 {
   gid_t val ;
};

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uidgid.h"
typedef struct __anonstruct_kgid_t_47 kgid_t;

#line 139  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uidgid.h"
struct kstat {
   u64 ino ;
   dev_t dev ;
   umode_t mode ;
   unsigned int nlink ;
   kuid_t uid ;
   kgid_t gid ;
   dev_t rdev ;
   loff_t size ;
   struct timespec atime ;
   struct timespec mtime ;
   struct timespec ctime ;
   unsigned long blksize ;
   unsigned long long blocks ;
};

#line 36  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/stat.h"
struct vm_area_struct;

#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/wait.h"
struct __wait_queue_head {
   spinlock_t lock ;
   struct list_head task_list ;
};

#line 43  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/wait.h"
typedef struct __wait_queue_head wait_queue_head_t;

#line 95  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/nodemask.h"
struct __anonstruct_nodemask_t_48 {
   unsigned long bits[16U] ;
};

#line 95  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/nodemask.h"
typedef struct __anonstruct_nodemask_t_48 nodemask_t;

#line 13  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/osq_lock.h"
struct optimistic_spin_queue {
   atomic_t tail ;
};

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/osq_lock.h"
struct mutex {
   atomic_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct task_struct *owner ;
   void *magic ;
   struct lockdep_map dep_map ;
};

#line 67  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   void *magic ;
};

#line 193 
struct rw_semaphore;

#line 194  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mutex.h"
struct rw_semaphore {
   long count ;
   struct list_head wait_list ;
   raw_spinlock_t wait_lock ;
   struct optimistic_spin_queue osq ;
   struct task_struct *owner ;
   struct lockdep_map dep_map ;
};

#line 172  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rwsem.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};

#line 437  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/jiffies.h"
union ktime {
   s64 tv64 ;
};

#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ktime.h"
typedef union ktime ktime_t;

#line 1121  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rcupdate.h"
struct timer_list {
   struct hlist_node entry ;
   unsigned long expires ;
   void (*function)(unsigned long ) ;
   unsigned long data ;
   u32 flags ;
   int slack ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
   struct lockdep_map lockdep_map ;
};

#line 238  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timer.h"
struct hrtimer;

#line 239 
enum hrtimer_restart;

#line 240  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timer.h"
struct rb_node {
   unsigned long __rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
};

#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};

#line 259  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timer.h"
struct workqueue_struct;

#line 260 
struct work_struct;

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/workqueue.h"
enum ldv_11714 {
    WORK_STRUCT_PENDING_BIT = 0,
    WORK_STRUCT_DELAYED_BIT = 1,
    WORK_STRUCT_PWQ_BIT = 2,
    WORK_STRUCT_LINKED_BIT = 3,
    WORK_STRUCT_STATIC_BIT = 4,
    WORK_STRUCT_COLOR_SHIFT = 5,
    WORK_STRUCT_COLOR_BITS = 4,
    WORK_STRUCT_PENDING = 1,
    WORK_STRUCT_DELAYED = 2,
    WORK_STRUCT_PWQ = 4,
    WORK_STRUCT_LINKED = 8,
    WORK_STRUCT_STATIC = 16,
    WORK_NR_COLORS = 15,
    WORK_NO_COLOR = 15,
    WORK_CPU_UNBOUND = 8192,
    WORK_STRUCT_FLAG_BITS = 9,
    WORK_OFFQ_FLAG_BASE = 5,
    __WORK_OFFQ_CANCELING = 5,
    WORK_OFFQ_CANCELING = 32,
    WORK_OFFQ_FLAG_BITS = 1,
    WORK_OFFQ_POOL_SHIFT = 6,
    WORK_OFFQ_LEFT = 58,
    WORK_OFFQ_POOL_BITS = 31,
    WORK_OFFQ_POOL_NONE = 2147483647,
    WORK_STRUCT_FLAG_MASK = 511,
    WORK_STRUCT_WQ_DATA_MASK = -512,
    WORK_STRUCT_NO_POOL = 137438953408,
    WORK_BUSY_PENDING = 1,
    WORK_BUSY_RUNNING = 2,
    WORKER_DESC_LEN = 24
};

#line 54  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct *) ;
   struct lockdep_map lockdep_map ;
};

#line 107  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
   struct workqueue_struct *wq ;
   int cpu ;
};

#line 64  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/e820.h"
struct resource {
   resource_size_t start ;
   resource_size_t end ;
   char const *name ;
   unsigned long flags ;
   struct resource *parent ;
   struct resource *sibling ;
   struct resource *child ;
};

#line 172  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/x86_init.h"
struct pci_dev;

#line 58  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm.h"
struct pm_message {
   int event ;
};

#line 64  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm.h"
typedef struct pm_message pm_message_t;

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device *) ;
   void (*complete)(struct device *) ;
   int (*suspend)(struct device *) ;
   int (*resume)(struct device *) ;
   int (*freeze)(struct device *) ;
   int (*thaw)(struct device *) ;
   int (*poweroff)(struct device *) ;
   int (*restore)(struct device *) ;
   int (*suspend_late)(struct device *) ;
   int (*resume_early)(struct device *) ;
   int (*freeze_late)(struct device *) ;
   int (*thaw_early)(struct device *) ;
   int (*poweroff_late)(struct device *) ;
   int (*restore_early)(struct device *) ;
   int (*suspend_noirq)(struct device *) ;
   int (*resume_noirq)(struct device *) ;
   int (*freeze_noirq)(struct device *) ;
   int (*thaw_noirq)(struct device *) ;
   int (*poweroff_noirq)(struct device *) ;
   int (*restore_noirq)(struct device *) ;
   int (*runtime_suspend)(struct device *) ;
   int (*runtime_resume)(struct device *) ;
   int (*runtime_idle)(struct device *) ;
};

#line 320 
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
};

#line 327 
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_AUTOSUSPEND = 3,
    RPM_REQ_RESUME = 4
};

#line 335 
struct wakeup_source;

#line 336 
struct wake_irq;

#line 338  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm.h"
struct pm_subsys_data {
   spinlock_t lock ;
   unsigned int refcount ;
   struct list_head clock_list ;
};

#line 553 
struct dev_pm_qos;

#line 553  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) can_wakeup : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) async_suspend : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_prepared : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_suspended : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_noirq_suspended : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_late_suspended : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ignore_children : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) early_init : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) direct_complete : 1 ;
   spinlock_t lock ;
   struct list_head entry ;
   struct completion completion ;
   struct wakeup_source *wakeup ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) wakeup_path : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) syscore : 1 ;
   struct timer_list suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   struct wake_irq *wakeirq ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))) disable_depth : 3 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) idle_notification : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) request_pending : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) deferred_resume : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) run_wake : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) runtime_auto : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) no_callbacks : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) irq_safe : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) use_autosuspend : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) timer_autosuspends : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) memalloc_noio : 1 ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   int autosuspend_delay ;
   unsigned long last_busy ;
   unsigned long active_jiffies ;
   unsigned long suspended_jiffies ;
   unsigned long accounting_timestamp ;
   struct pm_subsys_data *subsys_data ;
   void (*set_latency_tolerance)(struct device *, s32 ) ;
   struct dev_pm_qos *qos ;
};

#line 615  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm.h"
struct dev_pm_domain {
   struct dev_pm_ops ops ;
   void (*detach)(struct device *, bool ) ;
   int (*activate)(struct device *) ;
   void (*sync)(struct device *) ;
   void (*dismiss)(struct device *) ;
};

#line 133  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/topology.h"
struct pci_bus;

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/mmu.h"
struct ldt_struct;

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/mmu.h"
struct __anonstruct_mm_context_t_115 {
   struct ldt_struct *ldt ;
   unsigned short ia32_compat ;
   struct mutex lock ;
   void *vdso ;
   atomic_t perf_rdpmc_allowed ;
};

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/mmu.h"
typedef struct __anonstruct_mm_context_t_115 mm_context_t;

#line 1281  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mmzone.h"
struct llist_node;

#line 64  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/llist.h"
struct llist_node {
   struct llist_node *next ;
};

#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kmod.h"
struct cred;

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/elf.h"
struct inode;

#line 58  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/uprobes.h"
struct arch_uprobe_task {
   unsigned long saved_scratch_register ;
   unsigned int saved_trap_nr ;
   unsigned int saved_tf ;
};

#line 66 
enum uprobe_task_state {
    UTASK_RUNNING = 0,
    UTASK_SSTEP = 1,
    UTASK_SSTEP_ACK = 2,
    UTASK_SSTEP_TRAPPED = 3
};

#line 73  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/uprobes.h"
struct __anonstruct_148 {
   struct arch_uprobe_task autask ;
   unsigned long vaddr ;
};

#line 73  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/uprobes.h"
struct __anonstruct_149 {
   struct callback_head dup_xol_work ;
   unsigned long dup_xol_addr ;
};

#line 73  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/uprobes.h"
union __anonunion_147 {
   struct __anonstruct_148 __anonCompField___anonunion_147_33 ;
   struct __anonstruct_149 __anonCompField___anonunion_147_34 ;
};

#line 73 
struct uprobe;

#line 73 
struct return_instance;

#line 73  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/uprobes.h"
struct uprobe_task {
   enum uprobe_task_state state ;
   union __anonunion_147 __anonCompField_uprobe_task_35 ;
   struct uprobe *active_uprobe ;
   unsigned long xol_vaddr ;
   struct return_instance *return_instances ;
   unsigned int depth ;
};

#line 94  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uprobes.h"
struct xol_area;

#line 95  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uprobes.h"
struct uprobes_state {
   struct xol_area *xol_area ;
};

#line 133 
struct address_space;

#line 134 
struct mem_cgroup;

#line 31  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
typedef void compound_page_dtor(struct page *);

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
union __anonunion_150 {
   struct address_space *mapping ;
   void *s_mem ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
union __anonunion_152 {
   unsigned long index ;
   void *freelist ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct __anonstruct_156 {
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(16))) inuse : 16 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(15))) objects : 15 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) frozen : 1 ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
union __anonunion_155 {
   atomic_t _mapcount ;
   struct __anonstruct_156 __anonCompField___anonunion_155_38 ;
   int units ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct __anonstruct_154 {
   union __anonunion_155 __anonCompField___anonstruct_154_39 ;
   atomic_t _count ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
union __anonunion_153 {
   unsigned long counters ;
   struct __anonstruct_154 __anonCompField___anonunion_153_40 ;
   unsigned int active ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct __anonstruct_151 {
   union __anonunion_152 __anonCompField___anonstruct_151_37 ;
   union __anonunion_153 __anonCompField___anonstruct_151_41 ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct __anonstruct_158 {
   struct page *next ;
   int pages ;
   int pobjects ;
};

#line 32 
struct slab;

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct __anonstruct_159 {
   compound_page_dtor *compound_dtor ;
   unsigned long compound_order ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
union __anonunion_157 {
   struct list_head lru ;
   struct __anonstruct_158 __anonCompField___anonunion_157_43 ;
   struct slab *slab_page ;
   struct callback_head callback_head ;
   struct __anonstruct_159 __anonCompField___anonunion_157_44 ;
   pgtable_t pmd_huge_pte ;
};

#line 32 
struct kmem_cache;

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
union __anonunion_160 {
   unsigned long private ;
   spinlock_t *ptl ;
   struct kmem_cache *slab_cache ;
   struct page *first_page ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct page {
   unsigned long flags ;
   union __anonunion_150 __anonCompField_page_36 ;
   struct __anonstruct_151 __anonCompField_page_42 ;
   union __anonunion_157 __anonCompField_page_45 ;
   union __anonunion_160 __anonCompField_page_46 ;
   struct mem_cgroup *mem_cgroup ;
};

#line 172  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct page_frag {
   struct page *page ;
   __u32 offset ;
   __u32 size ;
};

#line 257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct __anonstruct_shared_161 {
   struct rb_node rb ;
   unsigned long rb_subtree_last ;
};

#line 257 
struct anon_vma;

#line 257 
struct vm_operations_struct;

#line 257 
struct mempolicy;

#line 257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct vm_area_struct {
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   struct vm_area_struct *vm_prev ;
   struct rb_node vm_rb ;
   unsigned long rb_subtree_gap ;
   struct mm_struct *vm_mm ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct __anonstruct_shared_161 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct const *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   struct mempolicy *vm_policy ;
};

#line 325  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};

#line 331  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};

#line 344  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct task_rss_stat {
   int events ;
   int count[3U] ;
};

#line 352  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct mm_rss_stat {
   atomic_long_t count[3U] ;
};

#line 357 
struct kioctx_table;

#line 358 
struct linux_binfmt;

#line 358 
struct mmu_notifier_mm;

#line 358  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct mm_struct {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   u32 vmacache_seqnum ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   unsigned long mmap_base ;
   unsigned long mmap_legacy_base ;
   unsigned long task_size ;
   unsigned long highest_vm_end ;
   pgd_t *pgd ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   atomic_long_t nr_ptes ;
   atomic_long_t nr_pmds ;
   int map_count ;
   spinlock_t page_table_lock ;
   struct rw_semaphore mmap_sem ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   unsigned long pinned_vm ;
   unsigned long shared_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long def_flags ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[46U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   cpumask_var_t cpu_vm_mask_var ;
   mm_context_t context ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct kioctx_table *ioctx_table ;
   struct task_struct *owner ;
   struct file *exe_file ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
   struct cpumask cpumask_allocation ;
   unsigned long numa_next_scan ;
   unsigned long numa_scan_offset ;
   int numa_scan_seq ;
   bool tlb_flush_pending ;
   struct uprobes_state uprobes_state ;
   void *bd_addr ;
};

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/elf.h"
typedef __u64 Elf64_Addr;

#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/elf.h"
typedef __u16 Elf64_Half;

#line 20  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/elf.h"
typedef __u32 Elf64_Word;

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/elf.h"
typedef __u64 Elf64_Xword;

#line 190  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};

#line 198  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;

#line 53  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/elf.h"
union __anonunion_166 {
   unsigned long bitmap[4U] ;
   struct callback_head callback_head ;
};

#line 53  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/elf.h"
struct idr_layer {
   int prefix ;
   int layer ;
   struct idr_layer *ary[256U] ;
   int count ;
   union __anonunion_166 __anonCompField_idr_layer_47 ;
};

#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/idr.h"
struct idr {
   struct idr_layer *hint ;
   struct idr_layer *top ;
   int layers ;
   int cur ;
   spinlock_t lock ;
   int id_free_cnt ;
   struct idr_layer *id_free ;
};

#line 124  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/idr.h"
struct ida_bitmap {
   long nr_busy ;
   unsigned long bitmap[15U] ;
};

#line 153  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/idr.h"
struct ida {
   struct idr idr ;
   struct ida_bitmap *free_bitmap ;
};

#line 185 
struct dentry;

#line 186 
struct iattr;

#line 187 
struct super_block;

#line 188 
struct file_system_type;

#line 189 
struct kernfs_open_node;

#line 190 
struct kernfs_iattrs;

#line 213 
struct kernfs_root;

#line 213  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/idr.h"
struct kernfs_elem_dir {
   unsigned long subdirs ;
   struct rb_root children ;
   struct kernfs_root *root ;
};

#line 85  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_node;

#line 85  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_elem_symlink {
   struct kernfs_node *target_kn ;
};

#line 89 
struct kernfs_ops;

#line 89  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_elem_attr {
   struct kernfs_ops const *ops ;
   struct kernfs_open_node *open ;
   loff_t size ;
   struct kernfs_node *notify_next ;
};

#line 96  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
union __anonunion_171 {
   struct kernfs_elem_dir dir ;
   struct kernfs_elem_symlink symlink ;
   struct kernfs_elem_attr attr ;
};

#line 96  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_node {
   atomic_t count ;
   atomic_t active ;
   struct lockdep_map dep_map ;
   struct kernfs_node *parent ;
   char const *name ;
   struct rb_node rb ;
   void const *ns ;
   unsigned int hash ;
   union __anonunion_171 __anonCompField_kernfs_node_48 ;
   void *priv ;
   unsigned short flags ;
   umode_t mode ;
   unsigned int ino ;
   struct kernfs_iattrs *iattr ;
};

#line 138  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_syscall_ops {
   int (*remount_fs)(struct kernfs_root *, int *, char *) ;
   int (*show_options)(struct seq_file *, struct kernfs_root *) ;
   int (*mkdir)(struct kernfs_node *, char const *, umode_t ) ;
   int (*rmdir)(struct kernfs_node *) ;
   int (*rename)(struct kernfs_node *, struct kernfs_node *, char const *) ;
};

#line 155  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_root {
   struct kernfs_node *kn ;
   unsigned int flags ;
   struct ida ino_ida ;
   struct kernfs_syscall_ops *syscall_ops ;
   struct list_head supers ;
   wait_queue_head_t deactivate_waitq ;
};

#line 171  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_open_file {
   struct kernfs_node *kn ;
   struct file *file ;
   void *priv ;
   struct mutex mutex ;
   int event ;
   struct list_head list ;
   char *prealloc_buf ;
   size_t atomic_write_len ;
   bool mmapped ;
   struct vm_operations_struct const *vm_ops ;
};

#line 188  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_ops {
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   ssize_t (*read)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   size_t atomic_write_len ;
   bool prealloc ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   int (*mmap)(struct kernfs_open_file *, struct vm_area_struct *) ;
   struct lock_class_key lockdep_key ;
};

#line 478 
struct kobject;

#line 479 
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
};

#line 485  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   bool (*current_may_mount)(void) ;
   void *(*grab_current_ns)(void) ;
   void const *(*netlink_ns)(struct sock *) ;
   void const *(*initial_ns)(void) ;
   void (*drop_ns)(void *) ;
};

#line 59  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject_ns.h"
struct bin_attribute;

#line 60  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject_ns.h"
struct attribute {
   char const *name ;
   umode_t mode ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ignore_lockdep : 1 ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};

#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysfs.h"
struct attribute_group {
   char const *name ;
   umode_t (*is_visible)(struct kobject *, struct attribute *, int ) ;
   struct attribute **attrs ;
   struct bin_attribute **bin_attrs ;
};

#line 82  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysfs.h"
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   ssize_t (*write)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   int (*mmap)(struct file *, struct kobject *, struct bin_attribute *, struct vm_area_struct *) ;
};

#line 155  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject *, struct attribute *, char *) ;
   ssize_t (*store)(struct kobject *, struct attribute *, char const *, size_t ) ;
};

#line 509  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysfs.h"
struct kref {
   atomic_t refcount ;
};

#line 52  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
struct kset;

#line 52 
struct kobj_type;

#line 52  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
struct kobject {
   char const *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct kernfs_node *sd ;
   struct kref kref ;
   struct delayed_work release ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) state_initialized : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) state_in_sysfs : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) state_add_uevent_sent : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) state_remove_uevent_sent : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) uevent_suppress : 1 ;
};

#line 115  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject *) ;
   struct sysfs_ops const *sysfs_ops ;
   struct attribute **default_attrs ;
   struct kobj_ns_type_operations const *(*child_ns_type)(struct kobject *) ;
   void const *(*namespace)(struct kobject *) ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
struct kobj_uevent_env {
   char *argv[3U] ;
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};

#line 131  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
struct kset_uevent_ops {
   int (* const filter)(struct kset *, struct kobject *) ;
   char const *(* const name)(struct kset *, struct kobject *) ;
   int (* const uevent)(struct kset *, struct kobject *, struct kobj_uevent_env *) ;
};

#line 148  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops const *uevent_ops ;
};

#line 223 
struct kernel_param;

#line 228  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
struct kernel_param_ops {
   unsigned int flags ;
   int (*set)(char const *, struct kernel_param const *) ;
   int (*get)(char *, struct kernel_param const *) ;
   void (*free)(void *) ;
};

#line 62  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/moduleparam.h"
struct kparam_string;

#line 62 
struct kparam_array;

#line 62  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/moduleparam.h"
union __anonunion_172 {
   void *arg ;
   struct kparam_string const *str ;
   struct kparam_array const *arr ;
};

#line 62  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/moduleparam.h"
struct kernel_param {
   char const *name ;
   struct module *mod ;
   struct kernel_param_ops const *ops ;
   u16 const perm ;
   s8 level ;
   u8 flags ;
   union __anonunion_172 __anonCompField_kernel_param_49 ;
};

#line 83  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};

#line 89  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int elemsize ;
   unsigned int *num ;
   struct kernel_param_ops const *ops ;
   void *elem ;
};

#line 469  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/moduleparam.h"
struct latch_tree_node {
   struct rb_node node[2U] ;
};

#line 211  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rbtree_latch.h"
struct mod_arch_specific {
   
};

#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/module.h"
struct module_param_attrs;

#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
   struct completion *kobj_completion ;
};

#line 48  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute *, struct module_kobject *, char *) ;
   ssize_t (*store)(struct module_attribute *, struct module_kobject *, char const *, size_t ) ;
   void (*setup)(struct module *, char const *) ;
   int (*test)(struct module *) ;
   void (*free)(struct module *) ;
};

#line 74 
struct exception_table_entry;

#line 290 
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2,
    MODULE_STATE_UNFORMED = 3
};

#line 297  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/module.h"
struct mod_tree_node {
   struct module *mod ;
   struct latch_tree_node node ;
};

#line 304 
struct module_sect_attrs;

#line 304 
struct module_notes_attrs;

#line 304 
struct tracepoint;

#line 304 
struct trace_event_call;

#line 304 
struct trace_enum_map;

#line 304  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char const *version ;
   char const *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol const *syms ;
   unsigned long const *crcs ;
   unsigned int num_syms ;
   struct mutex param_lock ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol const *gpl_syms ;
   unsigned long const *gpl_crcs ;
   struct kernel_symbol const *unused_syms ;
   unsigned long const *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol const *unused_gpl_syms ;
   unsigned long const *unused_gpl_crcs ;
   bool sig_ok ;
   bool async_probe_requested ;
   struct kernel_symbol const *gpl_future_syms ;
   unsigned long const *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   void *module_init ;
   void *module_core ;
   unsigned int init_size ;
   unsigned int core_size ;
   unsigned int init_text_size ;
   unsigned int core_text_size ;
   struct mod_tree_node mtn_core ;
   struct mod_tree_node mtn_init ;
   unsigned int init_ro_size ;
   unsigned int core_ro_size ;
   struct mod_arch_specific arch ;
   unsigned int taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   Elf64_Sym *symtab ;
   Elf64_Sym *core_symtab ;
   unsigned int num_symtab ;
   unsigned int core_num_syms ;
   char *strtab ;
   char *core_strtab ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   char *args ;
   void *percpu ;
   unsigned int percpu_size ;
   unsigned int num_tracepoints ;
   struct tracepoint * const *tracepoints_ptrs ;
   struct jump_entry *jump_entries ;
   unsigned int num_jump_entries ;
   unsigned int num_trace_bprintk_fmt ;
   char const **trace_bprintk_fmt_start ;
   struct trace_event_call **trace_events ;
   unsigned int num_trace_events ;
   struct trace_enum_map **trace_enums ;
   unsigned int num_trace_enums ;
   unsigned int num_ftrace_callsites ;
   unsigned long *ftrace_callsites ;
   bool klp_alive ;
   struct list_head source_list ;
   struct list_head target_list ;
   void (*exit)(void) ;
   atomic_t refcnt ;
   ctor_fn_t (**ctors)(void) ;
   unsigned int num_ctors ;
};

#line 13  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mod_devicetable.h"
typedef unsigned long kernel_ulong_t;

#line 14  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mod_devicetable.h"
struct pci_device_id {
   __u32 vendor ;
   __u32 device ;
   __u32 subvendor ;
   __u32 subdevice ;
   __u32 class ;
   __u32 class_mask ;
   kernel_ulong_t driver_data ;
};

#line 186  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mod_devicetable.h"
struct acpi_device_id {
   __u8 id[9U] ;
   kernel_ulong_t driver_data ;
   __u32 cls ;
   __u32 cls_msk ;
};

#line 221  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mod_devicetable.h"
struct of_device_id {
   char name[32U] ;
   char type[32U] ;
   char compatible[128U] ;
   void const *data ;
};

#line 652 
struct klist_node;

#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/klist.h"
struct klist_node {
   void *n_klist ;
   struct list_head n_node ;
   struct kref n_ref ;
};

#line 67 
struct path;

#line 68  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/klist.h"
struct seq_file {
   char *buf ;
   size_t size ;
   size_t from ;
   size_t count ;
   size_t pad_until ;
   loff_t index ;
   loff_t read_pos ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations const *op ;
   int poll_event ;
   struct user_namespace *user_ns ;
   void *private ;
};

#line 35  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/seq_file.h"
struct seq_operations {
   void *(*start)(struct seq_file *, loff_t *) ;
   void (*stop)(struct seq_file *, void *) ;
   void *(*next)(struct seq_file *, void *, loff_t *) ;
   int (*show)(struct seq_file *, void *) ;
};

#line 222 
struct pinctrl;

#line 223 
struct pinctrl_state;

#line 194  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pinctrl/consumer.h"
struct dev_pin_info {
   struct pinctrl *p ;
   struct pinctrl_state *default_state ;
   struct pinctrl_state *sleep_state ;
   struct pinctrl_state *idle_state ;
};

#line 48  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ratelimit.h"
struct dma_map_ops;

#line 48  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ratelimit.h"
struct dev_archdata {
   struct dma_map_ops *dma_ops ;
   void *iommu ;
};

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/device.h"
struct device_driver;

#line 16 
struct driver_private;

#line 17 
struct class;

#line 18 
struct subsys_private;

#line 19 
struct bus_type;

#line 22 
struct iommu_ops;

#line 23 
struct iommu_group;

#line 61  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct device_attribute;

#line 61  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct bus_type {
   char const *name ;
   char const *dev_name ;
   struct device *dev_root ;
   struct device_attribute *dev_attrs ;
   struct attribute_group const **bus_groups ;
   struct attribute_group const **dev_groups ;
   struct attribute_group const **drv_groups ;
   int (*match)(struct device *, struct device_driver *) ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   int (*probe)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*online)(struct device *) ;
   int (*offline)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   struct dev_pm_ops const *pm ;
   struct iommu_ops const *iommu_ops ;
   struct subsys_private *p ;
   struct lock_class_key lock_key ;
};

#line 139 
struct device_type;

#line 197 
enum probe_type {
    PROBE_DEFAULT_STRATEGY = 0,
    PROBE_PREFER_ASYNCHRONOUS = 1,
    PROBE_FORCE_SYNCHRONOUS = 2
};

#line 203  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct device_driver {
   char const *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char const *mod_name ;
   bool suppress_bind_attrs ;
   enum probe_type probe_type ;
   struct of_device_id const *of_match_table ;
   struct acpi_device_id const *acpi_match_table ;
   int (*probe)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   struct attribute_group const **groups ;
   struct dev_pm_ops const *pm ;
   struct driver_private *p ;
};

#line 353 
struct class_attribute;

#line 353  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct class {
   char const *name ;
   struct module *owner ;
   struct class_attribute *class_attrs ;
   struct attribute_group const **dev_groups ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *) ;
   void (*class_release)(struct class *) ;
   void (*dev_release)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   struct kobj_ns_type_operations const *ns_type ;
   void const *(*namespace)(struct device *) ;
   struct dev_pm_ops const *pm ;
   struct subsys_private *p ;
};

#line 446  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct class_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct class *, struct class_attribute *, char *) ;
   ssize_t (*store)(struct class *, struct class_attribute *, char const *, size_t ) ;
};

#line 514  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct device_type {
   char const *name ;
   struct attribute_group const **groups ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *, kuid_t *, kgid_t *) ;
   void (*release)(struct device *) ;
   struct dev_pm_ops const *pm ;
};

#line 542  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device *, struct device_attribute *, char *) ;
   ssize_t (*store)(struct device *, struct device_attribute *, char const *, size_t ) ;
};

#line 675  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};

#line 684 
struct dma_coherent_mem;

#line 684 
struct cma;

#line 684  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct device {
   struct device *parent ;
   struct device_private *p ;
   struct kobject kobj ;
   char const *init_name ;
   struct device_type const *type ;
   struct mutex mutex ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   void *driver_data ;
   struct dev_pm_info power ;
   struct dev_pm_domain *pm_domain ;
   struct dev_pin_info *pins ;
   int numa_node ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   unsigned long dma_pfn_offset ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct cma *cma_area ;
   struct dev_archdata archdata ;
   struct device_node *of_node ;
   struct fwnode_handle *fwnode ;
   dev_t devt ;
   u32 id ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct klist_node knode_class ;
   struct class *class ;
   struct attribute_group const **groups ;
   void (*release)(struct device *) ;
   struct iommu_group *iommu_group ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) offline_disabled : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) offline : 1 ;
};

#line 830  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct wakeup_source {
   char const *name ;
   struct list_head entry ;
   spinlock_t lock ;
   struct wake_irq *wakeirq ;
   struct timer_list timer ;
   unsigned long timer_expires ;
   ktime_t total_time ;
   ktime_t max_time ;
   ktime_t last_time ;
   ktime_t start_prevent_time ;
   ktime_t prevent_sleep_time ;
   unsigned long event_count ;
   unsigned long active_count ;
   unsigned long relax_count ;
   unsigned long expire_count ;
   unsigned long wakeup_count ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) active : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) autosleep_enabled : 1 ;
};

#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;

#line 84  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/plist.h"
struct plist_node {
   int prio ;
   struct list_head prio_list ;
   struct list_head node_list ;
};

#line 4  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/cputime_jiffies.h"
typedef unsigned long cputime_t;

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sem.h"
struct sem_undo_list;

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};

#line 78  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/shm.h"
struct user_struct;

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/shm.h"
struct sysv_shm {
   struct list_head shm_clist ;
};

#line 24  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_183 {
   unsigned long sig[1U] ;
};

#line 24  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_183 sigset_t;

#line 25 
struct siginfo;

#line 17  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/signal-defs.h"
typedef void __signalfn_t(int );

#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;

#line 20  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/signal.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};

#line 10  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
typedef union sigval sigval_t;

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__kill_185 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__timer_186 {
   __kernel_timer_t _tid ;
   int _overrun ;
   char _pad[0U] ;
   sigval_t _sigval ;
   int _sys_private ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__rt_187 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigchld_188 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_bnd_190 {
   void *_lower ;
   void *_upper ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigfault_189 {
   void *_addr ;
   short _addr_lsb ;
   struct __anonstruct__addr_bnd_190 _addr_bnd ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_191 {
   long _band ;
   int _fd ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigsys_192 {
   void *_call_addr ;
   int _syscall ;
   unsigned int _arch ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
union __anonunion__sifields_184 {
   int _pad[28U] ;
   struct __anonstruct__kill_185 _kill ;
   struct __anonstruct__timer_186 _timer ;
   struct __anonstruct__rt_187 _rt ;
   struct __anonstruct__sigchld_188 _sigchld ;
   struct __anonstruct__sigfault_189 _sigfault ;
   struct __anonstruct__sigpoll_191 _sigpoll ;
   struct __anonstruct__sigsys_192 _sigsys ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct siginfo {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __anonunion__sifields_184 _sifields ;
};

#line 113  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
typedef struct siginfo siginfo_t;

#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/signal.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};

#line 243  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/signal.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};

#line 257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/signal.h"
struct k_sigaction {
   struct sigaction sa ;
};

#line 443 
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_PGID = 1,
    PIDTYPE_SID = 2,
    PIDTYPE_MAX = 3
};

#line 450 
struct pid_namespace;

#line 450  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/signal.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
   struct hlist_node pid_chain ;
};

#line 56  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pid.h"
struct pid {
   atomic_t count ;
   unsigned int level ;
   struct hlist_head tasks[3U] ;
   struct callback_head rcu ;
   struct upid numbers[1U] ;
};

#line 68  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pid.h"
struct pid_link {
   struct hlist_node node ;
   struct pid *pid ;
};

#line 174  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pid.h"
struct percpu_counter {
   raw_spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};

#line 53  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/seccomp.h"
struct seccomp_filter;

#line 54  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/seccomp.h"
struct seccomp {
   int mode ;
   struct seccomp_filter *filter ;
};

#line 40  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rtmutex.h"
struct rt_mutex_waiter;

#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/resource.h"
struct rlimit {
   __kernel_ulong_t rlim_cur ;
   __kernel_ulong_t rlim_max ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/resource.h"
struct timerqueue_node {
   struct rb_node node ;
   ktime_t expires ;
};

#line 12  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timerqueue.h"
struct timerqueue_head {
   struct rb_root head ;
   struct timerqueue_node *next ;
};

#line 50 
struct hrtimer_clock_base;

#line 51 
struct hrtimer_cpu_base;

#line 60 
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
};

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timerqueue.h"
struct hrtimer {
   struct timerqueue_node node ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer *) ;
   struct hrtimer_clock_base *base ;
   unsigned long state ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   int index ;
   clockid_t clockid ;
   struct timerqueue_head active ;
   ktime_t (*get_time)(void) ;
   ktime_t offset ;
};

#line 156  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   seqcount_t seq ;
   struct hrtimer *running ;
   unsigned int cpu ;
   unsigned int active_bases ;
   unsigned int clock_was_set_seq ;
   bool migration_enabled ;
   bool nohz_active ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) in_hrtirq : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) hres_active : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) hang_detected : 1 ;
   ktime_t expires_next ;
   struct hrtimer *next_timer ;
   unsigned int nr_events ;
   unsigned int nr_retries ;
   unsigned int nr_hangs ;
   unsigned int max_hang_time ;
   struct hrtimer_clock_base clock_base[4U] ;
};

#line 466  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/hrtimer.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};

#line 45  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/task_io_accounting.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/latencytop.h"
struct assoc_array_ptr;

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/latencytop.h"
struct assoc_array {
   struct assoc_array_ptr *root ;
   unsigned long nr_leaves_on_tree ;
};

#line 31  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
typedef int32_t key_serial_t;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
typedef uint32_t key_perm_t;

#line 35 
struct key;

#line 36 
struct signal_struct;

#line 37 
struct key_type;

#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
struct keyring_index_key {
   struct key_type *type ;
   char const *description ;
   size_t desc_len ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
union __anonunion_199 {
   struct list_head graveyard_link ;
   struct rb_node serial_node ;
};

#line 123 
struct key_user;

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
union __anonunion_200 {
   time_t expiry ;
   time_t revoked_at ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
struct __anonstruct_202 {
   struct key_type *type ;
   char *description ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
union __anonunion_201 {
   struct keyring_index_key index_key ;
   struct __anonstruct_202 __anonCompField___anonunion_201_52 ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
union __anonunion_type_data_203 {
   struct list_head link ;
   unsigned long x[2U] ;
   void *p[2U] ;
   int reject_error ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
union __anonunion_payload_205 {
   unsigned long value ;
   void *rcudata ;
   void *data ;
   void *data2[2U] ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
union __anonunion_204 {
   union __anonunion_payload_205 payload ;
   struct assoc_array keys ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
struct key {
   atomic_t usage ;
   key_serial_t serial ;
   union __anonunion_199 __anonCompField_key_50 ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_200 __anonCompField_key_51 ;
   time_t last_used_at ;
   kuid_t uid ;
   kgid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   unsigned long flags ;
   union __anonunion_201 __anonCompField_key_53 ;
   union __anonunion_type_data_203 type_data ;
   union __anonunion_204 __anonCompField_key_54 ;
};

#line 358 
struct audit_context;

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/selinux.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   int nblocks ;
   kgid_t small_block[32U] ;
   kgid_t *blocks[0U] ;
};

#line 90  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   kuid_t uid ;
   kgid_t gid ;
   kuid_t suid ;
   kgid_t sgid ;
   kuid_t euid ;
   kgid_t egid ;
   kuid_t fsuid ;
   kgid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   unsigned char jit_keyring ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   void *security ;
   struct user_struct *user ;
   struct user_namespace *user_ns ;
   struct group_info *group_info ;
   struct callback_head rcu ;
};

#line 369 
struct percpu_ref;

#line 55  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/percpu-refcount.h"
typedef void percpu_ref_func_t(struct percpu_ref *);

#line 68  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/percpu-refcount.h"
struct percpu_ref {
   atomic_long_t count ;
   unsigned long percpu_count_ptr ;
   percpu_ref_func_t *release ;
   percpu_ref_func_t *confirm_switch ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) force_atomic : 1 ;
   struct callback_head rcu ;
};

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/percpu-rwsem.h"
struct cgroup;

#line 28 
struct cgroup_root;

#line 29 
struct cgroup_subsys;

#line 30 
struct cgroup_taskset;

#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/percpu-rwsem.h"
struct cgroup_subsys_state {
   struct cgroup *cgroup ;
   struct cgroup_subsys *ss ;
   struct percpu_ref refcnt ;
   struct cgroup_subsys_state *parent ;
   struct list_head sibling ;
   struct list_head children ;
   int id ;
   unsigned int flags ;
   u64 serial_nr ;
   struct callback_head callback_head ;
   struct work_struct destroy_work ;
};

#line 124  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cgroup-defs.h"
struct css_set {
   atomic_t refcount ;
   struct hlist_node hlist ;
   struct list_head tasks ;
   struct list_head mg_tasks ;
   struct list_head cgrp_links ;
   struct cgroup *dfl_cgrp ;
   struct cgroup_subsys_state *subsys[12U] ;
   struct list_head mg_preload_node ;
   struct list_head mg_node ;
   struct cgroup *mg_src_cgrp ;
   struct css_set *mg_dst_cset ;
   struct list_head e_cset_node[12U] ;
   struct callback_head callback_head ;
};

#line 197  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cgroup-defs.h"
struct cgroup {
   struct cgroup_subsys_state self ;
   unsigned long flags ;
   int id ;
   int populated_cnt ;
   struct kernfs_node *kn ;
   struct kernfs_node *procs_kn ;
   struct kernfs_node *populated_kn ;
   unsigned int subtree_control ;
   unsigned int child_subsys_mask ;
   struct cgroup_subsys_state *subsys[12U] ;
   struct cgroup_root *root ;
   struct list_head cset_links ;
   struct list_head e_csets[12U] ;
   struct list_head pidlists ;
   struct mutex pidlist_mutex ;
   wait_queue_head_t offline_waitq ;
   struct work_struct release_agent_work ;
};

#line 270  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cgroup-defs.h"
struct cgroup_root {
   struct kernfs_root *kf_root ;
   unsigned int subsys_mask ;
   int hierarchy_id ;
   struct cgroup cgrp ;
   atomic_t nr_cgrps ;
   struct list_head root_list ;
   unsigned int flags ;
   struct idr cgroup_idr ;
   char release_agent_path[4096U] ;
   char name[64U] ;
};

#line 306  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cgroup-defs.h"
struct cftype {
   char name[64U] ;
   int private ;
   umode_t mode ;
   size_t max_write_len ;
   unsigned int flags ;
   struct cgroup_subsys *ss ;
   struct list_head node ;
   struct kernfs_ops *kf_ops ;
   u64 (*read_u64)(struct cgroup_subsys_state *, struct cftype *) ;
   s64 (*read_s64)(struct cgroup_subsys_state *, struct cftype *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   int (*write_u64)(struct cgroup_subsys_state *, struct cftype *, u64 ) ;
   int (*write_s64)(struct cgroup_subsys_state *, struct cftype *, s64 ) ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   struct lock_class_key lockdep_key ;
};

#line 388  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cgroup-defs.h"
struct cgroup_subsys {
   struct cgroup_subsys_state *(*css_alloc)(struct cgroup_subsys_state *) ;
   int (*css_online)(struct cgroup_subsys_state *) ;
   void (*css_offline)(struct cgroup_subsys_state *) ;
   void (*css_released)(struct cgroup_subsys_state *) ;
   void (*css_free)(struct cgroup_subsys_state *) ;
   void (*css_reset)(struct cgroup_subsys_state *) ;
   void (*css_e_css_changed)(struct cgroup_subsys_state *) ;
   int (*can_attach)(struct cgroup_subsys_state *, struct cgroup_taskset *) ;
   void (*cancel_attach)(struct cgroup_subsys_state *, struct cgroup_taskset *) ;
   void (*attach)(struct cgroup_subsys_state *, struct cgroup_taskset *) ;
   void (*fork)(struct task_struct *) ;
   void (*exit)(struct cgroup_subsys_state *, struct cgroup_subsys_state *, struct task_struct *) ;
   void (*bind)(struct cgroup_subsys_state *) ;
   int disabled ;
   int early_init ;
   bool broken_hierarchy ;
   bool warned_broken_hierarchy ;
   int id ;
   char const *name ;
   struct cgroup_root *root ;
   struct idr css_idr ;
   struct list_head cfts ;
   struct cftype *dfl_cftypes ;
   struct cftype *legacy_cftypes ;
   unsigned int depends_on ;
};

#line 128  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct futex_pi_state;

#line 129 
struct robust_list_head;

#line 130 
struct bio_list;

#line 131 
struct fs_struct;

#line 132 
struct perf_event_context;

#line 133 
struct blk_plug;

#line 135 
struct nameidata;

#line 188 
struct cfs_rq;

#line 189 
struct task_group;

#line 477  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct sighand_struct {
   atomic_t count ;
   struct k_sigaction action[64U] ;
   spinlock_t siglock ;
   wait_queue_head_t signalfd_wqh ;
};

#line 516  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   cputime_t ac_utime ;
   cputime_t ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};

#line 524  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct cpu_itimer {
   cputime_t expires ;
   cputime_t incr ;
   u32 error ;
   u32 incr_error ;
};

#line 531  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct cputime {
   cputime_t utime ;
   cputime_t stime ;
};

#line 543  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct task_cputime {
   cputime_t utime ;
   cputime_t stime ;
   unsigned long long sum_exec_runtime ;
};

#line 563  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct task_cputime_atomic {
   atomic64_t utime ;
   atomic64_t stime ;
   atomic64_t sum_exec_runtime ;
};

#line 584  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct thread_group_cputimer {
   struct task_cputime_atomic cputime_atomic ;
   int running ;
};

#line 620 
struct autogroup;

#line 621 
struct tty_struct;

#line 621 
struct tty_audit_buf;

#line 621  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct signal_struct {
   atomic_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   struct list_head thread_head ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_child_subreaper : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) has_child_subreaper : 1 ;
   int posix_timer_id ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   struct pid *leader_pid ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   struct autogroup *autogroup ;
   seqlock_t stats_lock ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t cutime ;
   cputime_t cstime ;
   cputime_t gtime ;
   cputime_t cgtime ;
   struct cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   unsigned int audit_tty_log_passwd ;
   struct tty_audit_buf *tty_audit_buf ;
   struct rw_semaphore group_rwsem ;
   oom_flags_t oom_flags ;
   short oom_score_adj ;
   short oom_score_adj_min ;
   struct mutex cred_guard_mutex ;
};

#line 802  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct user_struct {
   atomic_t __count ;
   atomic_t processes ;
   atomic_t sigpending ;
   atomic_t inotify_watches ;
   atomic_t inotify_devs ;
   atomic_t fanotify_listeners ;
   atomic_long_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   struct key *uid_keyring ;
   struct key *session_keyring ;
   struct hlist_node uidhash_node ;
   kuid_t uid ;
   atomic_long_t locked_vm ;
};

#line 845 
struct backing_dev_info;

#line 846 
struct reclaim_state;

#line 847  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
};

#line 861  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct task_delay_info {
   spinlock_t lock ;
   unsigned int flags ;
   u64 blkio_start ;
   u64 blkio_delay ;
   u64 swapin_delay ;
   u32 blkio_count ;
   u32 swapin_count ;
   u64 freepages_start ;
   u64 freepages_delay ;
   u32 freepages_count ;
};

#line 909  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct wake_q_node {
   struct wake_q_node *next ;
};

#line 1138 
struct io_context;

#line 1174  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   u32 inv_weight ;
};

#line 1181  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct sched_avg {
   u64 last_runnable_update ;
   s64 decay_count ;
   unsigned long load_avg_contrib ;
   unsigned long utilization_avg_contrib ;
   u32 runnable_avg_sum ;
   u32 avg_period ;
   u32 running_avg_sum ;
};

#line 1206  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};

#line 1241  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   int depth ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
   struct sched_avg avg ;
};

#line 1273 
struct rt_rq;

#line 1273  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned long watchdog_stamp ;
   unsigned int time_slice ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
};

#line 1289  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct sched_dl_entity {
   struct rb_node rb_node ;
   u64 dl_runtime ;
   u64 dl_deadline ;
   u64 dl_period ;
   u64 dl_bw ;
   s64 runtime ;
   u64 deadline ;
   unsigned int flags ;
   int dl_throttled ;
   int dl_new ;
   int dl_boosted ;
   int dl_yielded ;
   struct hrtimer dl_timer ;
};

#line 1355  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct memcg_oom_info {
   struct mem_cgroup *memcg ;
   gfp_t gfp_mask ;
   int order ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) may_oom : 1 ;
};

#line 1779 
struct sched_class;

#line 1779 
struct files_struct;

#line 1779 
struct numa_group;

#line 1779 
struct ftrace_ret_stack;

#line 1779  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct task_struct {
   long volatile state ;
   void *stack ;
   atomic_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   struct llist_node wake_entry ;
   int on_cpu ;
   struct task_struct *last_wakee ;
   unsigned long wakee_flips ;
   unsigned long wakee_flip_decay_ts ;
   int wake_cpu ;
   int on_rq ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class const *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct task_group *sched_task_group ;
   struct sched_dl_entity dl ;
   struct hlist_head preempt_notifiers ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   int nr_cpus_allowed ;
   cpumask_t cpus_allowed ;
   unsigned long rcu_tasks_nvcsw ;
   bool rcu_tasks_holdout ;
   struct list_head rcu_tasks_holdout_list ;
   int rcu_tasks_idle_cpu ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct rb_node pushable_dl_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   u32 vmacache_seqnum ;
   struct vm_area_struct *vmacache[4U] ;
   struct task_rss_stat rss_stat ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned long jobctl ;
   unsigned int personality ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) in_execve : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) in_iowait : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) sched_reset_on_fork : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) sched_contributes_to_load : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) sched_migrated : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) memcg_kmem_skip_account : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) brk_randomized : 1 ;
   unsigned long atomic_flags ;
   struct restart_block restart_block ;
   pid_t pid ;
   pid_t tgid ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid_link pids[3U] ;
   struct list_head thread_group ;
   struct list_head thread_node ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t utimescaled ;
   cputime_t stimescaled ;
   cputime_t gtime ;
   struct cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   u64 start_time ;
   u64 real_start_time ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct cred const *real_cred ;
   struct cred const *cred ;
   char comm[16U] ;
   struct nameidata *nameidata ;
   struct sysv_sem sysvsem ;
   struct sysv_shm sysvshm ;
   unsigned long last_switch_count ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   int (*notifier)(void *) ;
   void *notifier_data ;
   sigset_t *notifier_mask ;
   struct callback_head *task_works ;
   struct audit_context *audit_context ;
   kuid_t loginuid ;
   unsigned int sessionid ;
   struct seccomp seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   raw_spinlock_t pi_lock ;
   struct wake_q_node wake_q ;
   struct rb_root pi_waiters ;
   struct rb_node *pi_waiters_leftmost ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   gfp_t lockdep_reclaim_gfp ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct blk_plug *plug ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   unsigned long ptrace_message ;
   siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   cputime_t acct_timexpd ;
   nodemask_t mems_allowed ;
   seqcount_t mems_allowed_seq ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct perf_event_context *perf_event_ctxp[2U] ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_next ;
   short pref_node_fork ;
   int numa_scan_seq ;
   unsigned int numa_scan_period ;
   unsigned int numa_scan_period_max ;
   int numa_preferred_nid ;
   unsigned long numa_migrate_retry ;
   u64 node_stamp ;
   u64 last_task_numa_placement ;
   u64 last_sum_exec_runtime ;
   struct callback_head numa_work ;
   struct list_head numa_entry ;
   struct numa_group *numa_group ;
   unsigned long *numa_faults ;
   unsigned long total_numa_faults ;
   unsigned long numa_faults_locality[3U] ;
   unsigned long numa_pages_migrated ;
   struct callback_head rcu ;
   struct pipe_inode_info *splice_pipe ;
   struct page_frag task_frag ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   int nr_dirtied ;
   int nr_dirtied_pause ;
   unsigned long dirty_paused_when ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   unsigned long timer_slack_ns ;
   unsigned long default_timer_slack_ns ;
   unsigned int kasan_depth ;
   int curr_ret_stack ;
   struct ftrace_ret_stack *ret_stack ;
   unsigned long long ftrace_timestamp ;
   atomic_t trace_overrun ;
   atomic_t tracing_graph_pause ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   struct memcg_oom_info memcg_oom ;
   struct uprobe_task *utask ;
   unsigned int sequential_io ;
   unsigned int sequential_io_avg ;
   unsigned long task_state_change ;
   int pagefault_disabled ;
   struct thread_struct thread ;
};

#line 70  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/resource_ext.h"
struct hotplug_slot;

#line 70  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/resource_ext.h"
struct pci_slot {
   struct pci_bus *bus ;
   struct list_head list ;
   struct hotplug_slot *hotplug ;
   unsigned char number ;
   struct kobject kobj ;
};

#line 110  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
typedef int pci_power_t;

#line 137  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
typedef unsigned int pci_channel_state_t;

#line 138 
enum pci_channel_state {
    pci_channel_io_normal = 1,
    pci_channel_io_frozen = 2,
    pci_channel_io_perm_failure = 3
};

#line 163  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
typedef unsigned short pci_dev_flags_t;

#line 192  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
typedef unsigned short pci_bus_flags_t;

#line 249 
struct pcie_link_state;

#line 250 
struct pci_vpd;

#line 251 
struct pci_sriov;

#line 252 
struct pci_ats;

#line 253 
struct proc_dir_entry;

#line 253 
struct pci_driver;

#line 253  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
union __anonunion_220 {
   struct pci_sriov *sriov ;
   struct pci_dev *physfn ;
};

#line 253  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
struct pci_dev {
   struct list_head bus_list ;
   struct pci_bus *bus ;
   struct pci_bus *subordinate ;
   void *sysdata ;
   struct proc_dir_entry *procent ;
   struct pci_slot *slot ;
   unsigned int devfn ;
   unsigned short vendor ;
   unsigned short device ;
   unsigned short subsystem_vendor ;
   unsigned short subsystem_device ;
   unsigned int class ;
   u8 revision ;
   u8 hdr_type ;
   u8 pcie_cap ;
   u8 msi_cap ;
   u8 msix_cap ;
   u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))) pcie_mpss : 3 ;
   u8 rom_base_reg ;
   u8 pin ;
   u16 pcie_flags_reg ;
   u8 dma_alias_devfn ;
   struct pci_driver *driver ;
   u64 dma_mask ;
   struct device_dma_parameters dma_parms ;
   pci_power_t current_state ;
   u8 pm_cap ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(5))) pme_support : 5 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) pme_interrupt : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) pme_poll : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) d1_support : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) d2_support : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) no_d1d2 : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) no_d3cold : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) d3cold_allowed : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) mmio_always_on : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) wakeup_prepared : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) runtime_d3cold : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ignore_hotplug : 1 ;
   unsigned int d3_delay ;
   unsigned int d3cold_delay ;
   struct pcie_link_state *link_state ;
   pci_channel_state_t error_state ;
   struct device dev ;
   int cfg_size ;
   unsigned int irq ;
   struct resource resource[17U] ;
   bool match_driver ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) transparent : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) multifunction : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_added : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_busmaster : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) no_msi : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) no_64bit_msi : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) block_cfg_access : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) broken_parity_status : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) irq_reroute_variant : 2 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) msi_enabled : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) msix_enabled : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ari_enabled : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_managed : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) needs_freset : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) state_saved : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_physfn : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_virtfn : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) reset_fn : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_hotplug_bridge : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) __aer_firmware_first_valid : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) __aer_firmware_first : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) broken_intx_masking : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) io_window_1k : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) irq_managed : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) has_secondary_link : 1 ;
   pci_dev_flags_t dev_flags ;
   atomic_t enable_cnt ;
   u32 saved_config_space[16U] ;
   struct hlist_head saved_cap_space ;
   struct bin_attribute *rom_attr ;
   int rom_attr_enabled ;
   struct bin_attribute *res_attr[17U] ;
   struct bin_attribute *res_attr_wc[17U] ;
   struct list_head msi_list ;
   struct attribute_group const **msi_irq_groups ;
   struct pci_vpd *vpd ;
   union __anonunion_220 __anonCompField_pci_dev_58 ;
   struct pci_ats *ats ;
   phys_addr_t rom ;
   size_t romlen ;
   char *driver_override ;
};

#line 442 
struct pci_ops;

#line 442 
struct msi_controller;

#line 442  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
struct pci_bus {
   struct list_head node ;
   struct pci_bus *parent ;
   struct list_head children ;
   struct list_head devices ;
   struct pci_dev *self ;
   struct list_head slots ;
   struct resource *resource[4U] ;
   struct list_head resources ;
   struct resource busn_res ;
   struct pci_ops *ops ;
   struct msi_controller *msi ;
   void *sysdata ;
   struct proc_dir_entry *procdir ;
   unsigned char number ;
   unsigned char primary ;
   unsigned char max_bus_speed ;
   unsigned char cur_bus_speed ;
   char name[48U] ;
   unsigned short bridge_ctl ;
   pci_bus_flags_t bus_flags ;
   struct device *bridge ;
   struct device dev ;
   struct bin_attribute *legacy_io ;
   struct bin_attribute *legacy_mem ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_added : 1 ;
};

#line 565  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
struct pci_ops {
   void *(*map_bus)(struct pci_bus *, unsigned int , int ) ;
   int (*read)(struct pci_bus *, unsigned int , int , int , u32 *) ;
   int (*write)(struct pci_bus *, unsigned int , int , int , u32 ) ;
};

#line 593  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
struct pci_dynids {
   spinlock_t lock ;
   struct list_head list ;
};

#line 607  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
typedef unsigned int pci_ers_result_t;

#line 617  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
struct pci_error_handlers {
   pci_ers_result_t (*error_detected)(struct pci_dev *, enum pci_channel_state ) ;
   pci_ers_result_t (*mmio_enabled)(struct pci_dev *) ;
   pci_ers_result_t (*link_reset)(struct pci_dev *) ;
   pci_ers_result_t (*slot_reset)(struct pci_dev *) ;
   void (*reset_notify)(struct pci_dev *, bool ) ;
   void (*resume)(struct pci_dev *) ;
};

#line 650  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
struct pci_driver {
   struct list_head node ;
   char const *name ;
   struct pci_device_id const *id_table ;
   int (*probe)(struct pci_dev *, struct pci_device_id const *) ;
   void (*remove)(struct pci_dev *) ;
   int (*suspend)(struct pci_dev *, pm_message_t ) ;
   int (*suspend_late)(struct pci_dev *, pm_message_t ) ;
   int (*resume_early)(struct pci_dev *) ;
   int (*resume)(struct pci_dev *) ;
   void (*shutdown)(struct pci_dev *) ;
   int (*sriov_configure)(struct pci_dev *, int ) ;
   struct pci_error_handlers const *err_handler ;
   struct device_driver driver ;
   struct pci_dynids dynids ;
};

#line 93  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bit_spinlock.h"
struct shrink_control {
   gfp_t gfp_mask ;
   unsigned long nr_to_scan ;
   int nid ;
   struct mem_cgroup *memcg ;
};

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/shrinker.h"
struct shrinker {
   unsigned long (*count_objects)(struct shrinker *, struct shrink_control *) ;
   unsigned long (*scan_objects)(struct shrinker *, struct shrink_control *) ;
   int seeks ;
   long batch ;
   unsigned long flags ;
   struct list_head list ;
   atomic_long_t *nr_deferred ;
};

#line 64  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/page_ext.h"
struct file_ra_state;

#line 65 
struct writeback_control;

#line 66 
struct bdi_writeback;

#line 207  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm.h"
struct vm_fault {
   unsigned int flags ;
   unsigned long pgoff ;
   void *virtual_address ;
   struct page *cow_page ;
   struct page *page ;
   unsigned long max_pgoff ;
   pte_t *pte ;
};

#line 239  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct *) ;
   void (*close)(struct vm_area_struct *) ;
   int (*fault)(struct vm_area_struct *, struct vm_fault *) ;
   void (*map_pages)(struct vm_area_struct *, struct vm_fault *) ;
   int (*page_mkwrite)(struct vm_area_struct *, struct vm_fault *) ;
   int (*pfn_mkwrite)(struct vm_area_struct *, struct vm_fault *) ;
   int (*access)(struct vm_area_struct *, unsigned long , void *, int , int ) ;
   char const *(*name)(struct vm_area_struct *) ;
   int (*set_policy)(struct vm_area_struct *, struct mempolicy *) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct *, unsigned long ) ;
   struct page *(*find_special_page)(struct vm_area_struct *, unsigned long ) ;
};

#line 2291  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm.h"
struct scatterlist {
   unsigned long sg_magic ;
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/scatterlist.h"
struct sg_table {
   struct scatterlist *sgl ;
   unsigned int nents ;
   unsigned int orig_nents ;
};

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dmapool.h"
struct dma_pool;

#line 35  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dmapool.h"
struct msix_entry {
   u32 vector ;
   u16 entry ;
};

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pci_64.h"
struct dma_attrs {
   unsigned long flags[1U] ;
};

#line 70  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dma-attrs.h"
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
};

#line 77  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dma-attrs.h"
struct dma_map_ops {
   void *(*alloc)(struct device *, size_t , dma_addr_t *, gfp_t , struct dma_attrs *) ;
   void (*free)(struct device *, size_t , void *, dma_addr_t , struct dma_attrs *) ;
   int (*mmap)(struct device *, struct vm_area_struct *, void *, dma_addr_t , size_t , struct dma_attrs *) ;
   int (*get_sgtable)(struct device *, struct sg_table *, void *, dma_addr_t , size_t , struct dma_attrs *) ;
   dma_addr_t (*map_page)(struct device *, struct page *, unsigned long , size_t , enum dma_data_direction , struct dma_attrs *) ;
   void (*unmap_page)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *) ;
   int (*map_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , struct dma_attrs *) ;
   void (*unmap_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , struct dma_attrs *) ;
   void (*sync_single_for_cpu)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_single_for_device)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_sg_for_cpu)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*sync_sg_for_device)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   int (*mapping_error)(struct device *, dma_addr_t ) ;
   int (*dma_supported)(struct device *, u64 ) ;
   int (*set_dma_mask)(struct device *, u64 ) ;
   int is_phys ;
};

#line 62  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/uaccess.h"
struct exception_table_entry {
   int insn ;
   int fixup ;
};

#line 167  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/io-mapping.h"
struct semaphore {
   raw_spinlock_t lock ;
   unsigned int count ;
   struct list_head wait_list ;
};

#line 58  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/radix-tree.h"
struct __anonstruct_222 {
   struct radix_tree_node *parent ;
   void *private_data ;
};

#line 58  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/radix-tree.h"
union __anonunion_221 {
   struct __anonstruct_222 __anonCompField___anonunion_221_59 ;
   struct callback_head callback_head ;
};

#line 58  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/radix-tree.h"
struct radix_tree_node {
   unsigned int path ;
   unsigned int count ;
   union __anonunion_221 __anonCompField_radix_tree_node_60 ;
   struct list_head private_list ;
   void *slots[64U] ;
   unsigned long tags[3U][1U] ;
};

#line 105  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/radix-tree.h"
struct radix_tree_root {
   unsigned int height ;
   gfp_t gfp_mask ;
   struct radix_tree_node *rnode ;
};

#line 144  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if_ether.h"
struct mmu_notifier_mm {
   struct hlist_head list ;
   spinlock_t lock ;
};

#line 6994  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/mlx5_ifc.h"
struct mlx5_inbox_hdr {
   __be16 opcode ;
   u8 rsvd[4U] ;
   __be16 opmod ;
};

#line 342  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/device.h"
struct mlx5_outbox_hdr {
   u8 status ;
   u8 rsvd[3U] ;
   __be32 syndrome ;
};

#line 404  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/device.h"
struct mlx5_cmd_layout {
   u8 type ;
   u8 rsvd0[3U] ;
   __be32 inlen ;
   __be64 in_ptr ;
   __be32 in[4U] ;
   __be32 out[4U] ;
   __be64 out_ptr ;
   __be32 outlen ;
   u8 token ;
   u8 sig ;
   u8 rsvd1 ;
   u8 status_own ;
};

#line 419  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/device.h"
struct health_buffer {
   __be32 assert_var[5U] ;
   __be32 rsvd0[3U] ;
   __be32 assert_exit_ptr ;
   __be32 assert_callra ;
   __be32 rsvd1[2U] ;
   __be32 fw_ver ;
   __be32 hw_id ;
   __be32 rsvd2 ;
   u8 irisc_index ;
   u8 synd ;
   __be16 ext_sync ;
};

#line 434  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/device.h"
struct mlx5_init_seg {
   __be32 fw_rev ;
   __be32 cmdif_rev_fw_sub ;
   __be32 rsvd0[2U] ;
   __be32 cmdq_addr_h ;
   __be32 cmdq_addr_l_sz ;
   __be32 cmd_dbell ;
   __be32 rsvd1[121U] ;
   struct health_buffer health ;
   __be32 rsvd2[884U] ;
   __be32 health_counter ;
   __be32 rsvd3[1019U] ;
   __be64 ieee1588_clk ;
   __be32 ieee1588_clk_type ;
   __be32 clr_intx ;
};

#line 547  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/device.h"
struct mlx5_cmd_prot_block {
   u8 data[512U] ;
   u8 rsvd0[48U] ;
   __be64 next ;
   __be32 block_num ;
   u8 rsvd1 ;
   u8 token ;
   u8 ctrl_sig ;
   u8 sig ;
};

#line 126  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/doorbell.h"
enum dbg_rsc_type {
    MLX5_DBG_RSC_QP = 0,
    MLX5_DBG_RSC_EQ = 1,
    MLX5_DBG_RSC_CQ = 2
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/doorbell.h"
struct mlx5_field_desc {
   struct dentry *dent ;
   int i ;
};

#line 133  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/driver.h"
struct mlx5_core_dev;

#line 133  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/driver.h"
struct mlx5_rsc_debug {
   struct mlx5_core_dev *dev ;
   void *object ;
   enum dbg_rsc_type type ;
   struct dentry *root ;
   struct mlx5_field_desc fields[0U] ;
};

#line 141 
enum mlx5_dev_event {
    MLX5_DEV_EVENT_SYS_ERROR = 0,
    MLX5_DEV_EVENT_PORT_UP = 1,
    MLX5_DEV_EVENT_PORT_DOWN = 2,
    MLX5_DEV_EVENT_PORT_INITIALIZED = 3,
    MLX5_DEV_EVENT_LID_CHANGE = 4,
    MLX5_DEV_EVENT_PKEY_CHANGE = 5,
    MLX5_DEV_EVENT_GUID_CHANGE = 6,
    MLX5_DEV_EVENT_CLIENT_REREG = 7
};

#line 157 
struct mlx5_uar;

#line 157 
struct mlx5_bf;

#line 157  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/driver.h"
struct mlx5_uuar_info {
   struct mlx5_uar *uars ;
   int num_uars ;
   int num_low_latency_uuars ;
   unsigned long *bitmap ;
   unsigned int *count ;
   struct mlx5_bf *bfs ;
   struct mutex lock ;
   u32 ver ;
};

#line 172  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/driver.h"
struct mlx5_bf {
   void *reg ;
   void *regreg ;
   int buf_size ;
   struct mlx5_uar *uar ;
   unsigned long offset ;
   int need_lock ;
   spinlock_t lock ;
   spinlock_t lock32 ;
   int uuarn ;
};

#line 189  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/driver.h"
struct mlx5_cmd_first {
   __be32 data[4U] ;
};

#line 193 
struct cache_ent;

#line 193 
struct mlx5_cmd_mailbox;

#line 193  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/driver.h"
struct mlx5_cmd_msg {
   struct list_head list ;
   struct cache_ent *cache ;
   u32 len ;
   struct mlx5_cmd_first first ;
   struct mlx5_cmd_mailbox *next ;
};

#line 201  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/driver.h"
struct mlx5_cmd_debug {
   struct dentry *dbg_root ;
   struct dentry *dbg_in ;
   struct dentry *dbg_out ;
   struct dentry *dbg_outlen ;
   struct dentry *dbg_status ;
   struct dentry *dbg_run ;
   void *in_msg ;
   void *out_msg ;
   u8 status ;
   u16 inlen ;
   u16 outlen ;
};

#line 215  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/driver.h"
struct cache_ent {
   spinlock_t lock ;
   struct list_head head ;
};

#line 222  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/driver.h"
struct cmd_msg_cache {
   struct cache_ent large ;
   struct cache_ent med ;
};

#line 227  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/driver.h"
struct mlx5_cmd_stats {
   u64 sum ;
   u64 n ;
   struct dentry *root ;
   struct dentry *avg ;
   struct dentry *count ;
   spinlock_t lock ;
};

#line 238 
struct mlx5_cmd_work_ent;

#line 238  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/driver.h"
struct mlx5_cmd {
   void *cmd_alloc_buf ;
   dma_addr_t alloc_dma ;
   int alloc_size ;
   void *cmd_buf ;
   dma_addr_t dma ;
   u16 cmdif_rev ;
   u8 log_sz ;
   u8 log_stride ;
   int max_reg_cmds ;
   int events ;
   u32 *vector ;
   spinlock_t alloc_lock ;
   spinlock_t token_lock ;
   u8 token ;
   unsigned long bitmask ;
   char wq_name[32U] ;
   struct workqueue_struct *wq ;
   struct semaphore sem ;
   struct semaphore pages_sem ;
   int mode ;
   struct mlx5_cmd_work_ent *ent_arr[32U] ;
   struct dma_pool *pool ;
   struct mlx5_cmd_debug dbg ;
   struct cmd_msg_cache cache ;
   int checksum_disabled ;
   struct mlx5_cmd_stats stats[2336U] ;
};

#line 273  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/driver.h"
struct mlx5_port_caps {
   int gid_table_len ;
   int pkey_table_len ;
   u8 ext_port_cap ;
};

#line 279  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/driver.h"
struct mlx5_cmd_mailbox {
   void *buf ;
   dma_addr_t dma ;
   struct mlx5_cmd_mailbox *next ;
};

#line 285  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/driver.h"
struct mlx5_buf_list {
   void *buf ;
   dma_addr_t map ;
};

#line 290  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/driver.h"
struct mlx5_buf {
   struct mlx5_buf_list direct ;
   int npages ;
   int size ;
   u8 page_shift ;
};

#line 297  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/driver.h"
struct mlx5_eq {
   struct mlx5_core_dev *dev ;
   __be32 *doorbell ;
   u32 cons_index ;
   struct mlx5_buf buf ;
   int size ;
   u8 irqn ;
   u8 eqn ;
   int nent ;
   u64 mask ;
   struct list_head list ;
   int index ;
   struct mlx5_rsc_debug *dbg ;
};

#line 365  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/driver.h"
struct mlx5_eq_table {
   void *update_ci ;
   void *update_arm_ci ;
   struct list_head comp_eqs_list ;
   struct mlx5_eq pages_eq ;
   struct mlx5_eq async_eq ;
   struct mlx5_eq cmd_eq ;
   int num_comp_vectors ;
   spinlock_t lock ;
};

#line 378  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/driver.h"
struct mlx5_uar {
   u32 index ;
   struct list_head bf_list ;
   unsigned int free_bf_bmap ;
   void *wc_map ;
   void *map ;
};

#line 386  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/driver.h"
struct mlx5_core_health {
   struct health_buffer *health ;
   __be32 *health_counter ;
   struct timer_list timer ;
   struct list_head list ;
   u32 prev ;
   int miss_counter ;
};

#line 396  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/driver.h"
struct mlx5_cq_table {
   spinlock_t lock ;
   struct radix_tree_root tree ;
};

#line 403  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/driver.h"
struct mlx5_qp_table {
   spinlock_t lock ;
   struct radix_tree_root tree ;
};

#line 410  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/driver.h"
struct mlx5_srq_table {
   spinlock_t lock ;
   struct radix_tree_root tree ;
};

#line 417  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/driver.h"
struct mlx5_mr_table {
   rwlock_t lock ;
   struct radix_tree_root tree ;
};

#line 424  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/driver.h"
struct mlx5_irq_info {
   cpumask_var_t mask ;
   char name[32U] ;
};

#line 429  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/driver.h"
struct mlx5_priv {
   char name[16U] ;
   struct mlx5_eq_table eq_table ;
   struct msix_entry *msix_arr ;
   struct mlx5_irq_info *irq_info ;
   struct mlx5_uuar_info uuari ;
   struct workqueue_struct *pg_wq ;
   struct rb_root page_root ;
   int fw_pages ;
   atomic_t reg_pages ;
   struct list_head free_list ;
   struct mlx5_core_health health ;
   struct mlx5_srq_table srq_table ;
   struct mlx5_qp_table qp_table ;
   struct dentry *qp_debugfs ;
   struct dentry *eq_debugfs ;
   struct dentry *cq_debugfs ;
   struct dentry *cmdif_debugfs ;
   struct mlx5_cq_table cq_table ;
   struct mlx5_mr_table mr_table ;
   struct mutex pgdir_mutex ;
   struct list_head pgdir_list ;
   struct dentry *dbg_root ;
   spinlock_t mkey_lock ;
   u8 mkey_key ;
   struct list_head dev_list ;
   struct list_head ctx_list ;
   spinlock_t ctx_lock ;
};

#line 479 
struct mlx5_profile;

#line 479  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/driver.h"
struct mlx5_core_dev {
   struct pci_dev *pdev ;
   u8 rev_id ;
   char board_id[64U] ;
   struct mlx5_cmd cmd ;
   struct mlx5_port_caps port_caps[2U] ;
   u32 hca_caps_cur[8U][1024U] ;
   u32 hca_caps_max[8U][1024U] ;
   phys_addr_t iseg_base ;
   struct mlx5_init_seg *iseg ;
   void (*event)(struct mlx5_core_dev *, enum mlx5_dev_event , unsigned long ) ;
   struct mlx5_priv priv ;
   struct mlx5_profile *profile ;
   atomic_t num_qps ;
   u32 issi ;
};

#line 530  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/driver.h"
struct mlx5_cmd_work_ent {
   struct mlx5_cmd_msg *in ;
   struct mlx5_cmd_msg *out ;
   void *uout ;
   int uout_size ;
   void (*callback)(int , void *) ;
   void *context ;
   int idx ;
   struct completion done ;
   struct mlx5_cmd *cmd ;
   struct work_struct work ;
   struct mlx5_cmd_layout *lay ;
   int ret ;
   int page_queue ;
   u8 status ;
   u8 token ;
   u64 ts1 ;
   u64 ts2 ;
   u16 op ;
};

#line 831  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/driver.h"
struct __anonstruct_mr_cache_248 {
   int size ;
   int limit ;
};

#line 831  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/driver.h"
struct mlx5_profile {
   u64 mask ;
   u8 log_max_qp ;
   struct __anonstruct_mr_cache_248 mr_cache[16U] ;
};

#line 91  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kdev_t.h"
struct hlist_bl_node;

#line 91  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kdev_t.h"
struct hlist_bl_head {
   struct hlist_bl_node *first ;
};

#line 36  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list_bl.h"
struct hlist_bl_node {
   struct hlist_bl_node *next ;
   struct hlist_bl_node **pprev ;
};

#line 114  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rculist_bl.h"
struct __anonstruct_252 {
   spinlock_t lock ;
   int count ;
};

#line 114  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rculist_bl.h"
union __anonunion_251 {
   struct __anonstruct_252 __anonCompField___anonunion_251_63 ;
};

#line 114  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rculist_bl.h"
struct lockref {
   union __anonunion_251 __anonCompField_lockref_64 ;
};

#line 50  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockref.h"
struct vfsmount;

#line 51  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockref.h"
struct __anonstruct_254 {
   u32 hash ;
   u32 len ;
};

#line 51  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockref.h"
union __anonunion_253 {
   struct __anonstruct_254 __anonCompField___anonunion_253_65 ;
   u64 hash_len ;
};

#line 51  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockref.h"
struct qstr {
   union __anonunion_253 __anonCompField_qstr_66 ;
   unsigned char const *name ;
};

#line 90  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dcache.h"
struct dentry_operations;

#line 90  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dcache.h"
union __anonunion_d_u_255 {
   struct hlist_node d_alias ;
   struct callback_head d_rcu ;
};

#line 90  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dcache.h"
struct dentry {
   unsigned int d_flags ;
   seqcount_t d_seq ;
   struct hlist_bl_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct inode *d_inode ;
   unsigned char d_iname[32U] ;
   struct lockref d_lockref ;
   struct dentry_operations const *d_op ;
   struct super_block *d_sb ;
   unsigned long d_time ;
   void *d_fsdata ;
   struct list_head d_lru ;
   struct list_head d_child ;
   struct list_head d_subdirs ;
   union __anonunion_d_u_255 d_u ;
};

#line 142  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_weak_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_hash)(struct dentry const *, struct qstr *) ;
   int (*d_compare)(struct dentry const *, struct dentry const *, unsigned int , char const *, struct qstr const *) ;
   int (*d_delete)(struct dentry const *) ;
   void (*d_release)(struct dentry *) ;
   void (*d_prune)(struct dentry *) ;
   void (*d_iput)(struct dentry *, struct inode *) ;
   char *(*d_dname)(struct dentry *, char *, int ) ;
   struct vfsmount *(*d_automount)(struct path *) ;
   int (*d_manage)(struct dentry *, bool ) ;
   struct inode *(*d_select_inode)(struct dentry *, unsigned int ) ;
};

#line 586  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dcache.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
};

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/path.h"
struct list_lru_one {
   struct list_head list ;
   long nr_items ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list_lru.h"
struct list_lru_memcg {
   struct list_lru_one *lru[0U] ;
};

#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list_lru.h"
struct list_lru_node {
   spinlock_t lock ;
   struct list_lru_one lru ;
   struct list_lru_memcg *memcg_lrus ;
};

#line 47  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list_lru.h"
struct list_lru {
   struct list_lru_node *node ;
   struct list_head list ;
};

#line 189  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list_lru.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};

#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/fiemap.h"
enum migrate_mode {
    MIGRATE_ASYNC = 0,
    MIGRATE_SYNC_LIGHT = 1,
    MIGRATE_SYNC = 2
};

#line 47 
struct block_device;

#line 60  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/fs.h"
struct export_operations;

#line 63 
struct kiocb;

#line 65 
struct kstatfs;

#line 66 
struct swap_info_struct;

#line 75  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   kuid_t ia_uid ;
   kgid_t ia_gid ;
   loff_t ia_size ;
   struct timespec ia_atime ;
   struct timespec ia_mtime ;
   struct timespec ia_ctime ;
   struct file *ia_file ;
};

#line 212  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dqblk_xfs.h"
struct dquot;

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/projid.h"
typedef __kernel_uid32_t projid_t;

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/projid.h"
struct __anonstruct_kprojid_t_259 {
   projid_t val ;
};

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/projid.h"
typedef struct __anonstruct_kprojid_t_259 kprojid_t;

#line 166  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/quota.h"
enum quota_type {
    USRQUOTA = 0,
    GRPQUOTA = 1,
    PRJQUOTA = 2
};

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
typedef long long qsize_t;

#line 67  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
union __anonunion_260 {
   kuid_t uid ;
   kgid_t gid ;
   kprojid_t projid ;
};

#line 67  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct kqid {
   union __anonunion_260 __anonCompField_kqid_68 ;
   enum quota_type type ;
};

#line 184  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time_t dqb_btime ;
   time_t dqb_itime ;
};

#line 206 
struct quota_format_type;

#line 207  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_max_spc_limit ;
   qsize_t dqi_max_ino_limit ;
   void *dqi_priv ;
};

#line 272  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   atomic_t dq_count ;
   wait_queue_head_t dq_wait_unused ;
   struct super_block *dq_sb ;
   struct kqid dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   struct mem_dqblk dq_dqb ;
};

#line 299  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block *, int ) ;
   int (*read_file_info)(struct super_block *, int ) ;
   int (*write_file_info)(struct super_block *, int ) ;
   int (*free_file_info)(struct super_block *, int ) ;
   int (*read_dqblk)(struct dquot *) ;
   int (*commit_dqblk)(struct dquot *) ;
   int (*release_dqblk)(struct dquot *) ;
};

#line 310  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct dquot_operations {
   int (*write_dquot)(struct dquot *) ;
   struct dquot *(*alloc_dquot)(struct super_block *, int ) ;
   void (*destroy_dquot)(struct dquot *) ;
   int (*acquire_dquot)(struct dquot *) ;
   int (*release_dquot)(struct dquot *) ;
   int (*mark_dirty)(struct dquot *) ;
   int (*write_info)(struct super_block *, int ) ;
   qsize_t *(*get_reserved_space)(struct inode *) ;
   int (*get_projid)(struct inode *, kprojid_t *) ;
};

#line 325  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct qc_dqblk {
   int d_fieldmask ;
   u64 d_spc_hardlimit ;
   u64 d_spc_softlimit ;
   u64 d_ino_hardlimit ;
   u64 d_ino_softlimit ;
   u64 d_space ;
   u64 d_ino_count ;
   s64 d_ino_timer ;
   s64 d_spc_timer ;
   int d_ino_warns ;
   int d_spc_warns ;
   u64 d_rt_spc_hardlimit ;
   u64 d_rt_spc_softlimit ;
   u64 d_rt_space ;
   s64 d_rt_spc_timer ;
   int d_rt_spc_warns ;
};

#line 348  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct qc_type_state {
   unsigned int flags ;
   unsigned int spc_timelimit ;
   unsigned int ino_timelimit ;
   unsigned int rt_spc_timelimit ;
   unsigned int spc_warnlimit ;
   unsigned int ino_warnlimit ;
   unsigned int rt_spc_warnlimit ;
   unsigned long long ino ;
   blkcnt_t blocks ;
   blkcnt_t nextents ;
};

#line 394  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct qc_state {
   unsigned int s_incoredqs ;
   struct qc_type_state s_state[3U] ;
};

#line 405  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct qc_info {
   int i_fieldmask ;
   unsigned int i_flags ;
   unsigned int i_spc_timelimit ;
   unsigned int i_ino_timelimit ;
   unsigned int i_rt_spc_timelimit ;
   unsigned int i_spc_warnlimit ;
   unsigned int i_ino_warnlimit ;
   unsigned int i_rt_spc_warnlimit ;
};

#line 418  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block *, int , int , struct path *) ;
   int (*quota_off)(struct super_block *, int ) ;
   int (*quota_enable)(struct super_block *, unsigned int ) ;
   int (*quota_disable)(struct super_block *, unsigned int ) ;
   int (*quota_sync)(struct super_block *, int ) ;
   int (*set_info)(struct super_block *, int , struct qc_info *) ;
   int (*get_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*set_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_state)(struct super_block *, struct qc_state *) ;
   int (*rm_xquota)(struct super_block *, unsigned int ) ;
};

#line 432  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops const *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};

#line 496  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct mutex dqio_mutex ;
   struct mutex dqonoff_mutex ;
   struct inode *files[3U] ;
   struct mem_dqinfo info[3U] ;
   struct quota_format_ops const *ops[3U] ;
};

#line 526  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct kiocb {
   struct file *ki_filp ;
   loff_t ki_pos ;
   void (*ki_complete)(struct kiocb *, long , long ) ;
   void *private ;
   int ki_flags ;
};

#line 366  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page *, struct writeback_control *) ;
   int (*readpage)(struct file *, struct page *) ;
   int (*writepages)(struct address_space *, struct writeback_control *) ;
   int (*set_page_dirty)(struct page *) ;
   int (*readpages)(struct file *, struct address_space *, struct list_head *, unsigned int ) ;
   int (*write_begin)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page **, void **) ;
   int (*write_end)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page *, void *) ;
   sector_t (*bmap)(struct address_space *, sector_t ) ;
   void (*invalidatepage)(struct page *, unsigned int , unsigned int ) ;
   int (*releasepage)(struct page *, gfp_t ) ;
   void (*freepage)(struct page *) ;
   ssize_t (*direct_IO)(struct kiocb *, struct iov_iter *, loff_t ) ;
   int (*migratepage)(struct address_space *, struct page *, struct page *, enum migrate_mode ) ;
   int (*launder_page)(struct page *) ;
   int (*is_partially_uptodate)(struct page *, unsigned long , unsigned long ) ;
   void (*is_dirty_writeback)(struct page *, bool *, bool *) ;
   int (*error_remove_page)(struct address_space *, struct page *) ;
   int (*swap_activate)(struct swap_info_struct *, struct file *, sector_t *) ;
   void (*swap_deactivate)(struct file *) ;
};

#line 423  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct radix_tree_root page_tree ;
   spinlock_t tree_lock ;
   atomic_t i_mmap_writable ;
   struct rb_root i_mmap ;
   struct rw_semaphore i_mmap_rwsem ;
   unsigned long nrpages ;
   unsigned long nrshadows ;
   unsigned long writeback_index ;
   struct address_space_operations const *a_ops ;
   unsigned long flags ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   void *private_data ;
};

#line 443 
struct request_queue;

#line 444 
struct hd_struct;

#line 444 
struct gendisk;

#line 444  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   int bd_openers ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   struct mutex bd_mutex ;
   struct list_head bd_inodes ;
   void *bd_claiming ;
   void *bd_holder ;
   int bd_holders ;
   bool bd_write_holder ;
   struct list_head bd_holder_disks ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct request_queue *bd_queue ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
};

#line 560 
struct posix_acl;

#line 561 
struct inode_operations;

#line 561  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
union __anonunion_263 {
   unsigned int const i_nlink ;
   unsigned int __i_nlink ;
};

#line 561  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
union __anonunion_264 {
   struct hlist_head i_dentry ;
   struct callback_head i_rcu ;
};

#line 561 
struct file_lock_context;

#line 561 
struct cdev;

#line 561  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
union __anonunion_265 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
   char *i_link ;
};

#line 561  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct inode {
   umode_t i_mode ;
   unsigned short i_opflags ;
   kuid_t i_uid ;
   kgid_t i_gid ;
   unsigned int i_flags ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   struct inode_operations const *i_op ;
   struct super_block *i_sb ;
   struct address_space *i_mapping ;
   void *i_security ;
   unsigned long i_ino ;
   union __anonunion_263 __anonCompField_inode_69 ;
   dev_t i_rdev ;
   loff_t i_size ;
   struct timespec i_atime ;
   struct timespec i_mtime ;
   struct timespec i_ctime ;
   spinlock_t i_lock ;
   unsigned short i_bytes ;
   unsigned int i_blkbits ;
   blkcnt_t i_blocks ;
   unsigned long i_state ;
   struct mutex i_mutex ;
   unsigned long dirtied_when ;
   unsigned long dirtied_time_when ;
   struct hlist_node i_hash ;
   struct list_head i_wb_list ;
   struct bdi_writeback *i_wb ;
   int i_wb_frn_winner ;
   u16 i_wb_frn_avg_time ;
   u16 i_wb_frn_history ;
   struct list_head i_lru ;
   struct list_head i_sb_list ;
   union __anonunion_264 __anonCompField_inode_70 ;
   u64 i_version ;
   atomic_t i_count ;
   atomic_t i_dio_count ;
   atomic_t i_writecount ;
   atomic_t i_readcount ;
   struct file_operations const *i_fop ;
   struct file_lock_context *i_flctx ;
   struct address_space i_data ;
   struct list_head i_devices ;
   union __anonunion_265 __anonCompField_inode_71 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct hlist_head i_fsnotify_marks ;
   void *i_private ;
};

#line 807  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   kuid_t uid ;
   kuid_t euid ;
   int signum ;
};

#line 815  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};

#line 838  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
union __anonunion_f_u_266 {
   struct llist_node fu_llist ;
   struct callback_head fu_rcuhead ;
};

#line 838  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct file {
   union __anonunion_f_u_266 f_u ;
   struct path f_path ;
   struct inode *f_inode ;
   struct file_operations const *f_op ;
   spinlock_t f_lock ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   struct mutex f_pos_lock ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred const *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct list_head f_tfile_llink ;
   struct address_space *f_mapping ;
};

#line 923  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
typedef void *fl_owner_t;

#line 924 
struct file_lock;

#line 925  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock *, struct file_lock *) ;
   void (*fl_release_private)(struct file_lock *) ;
};

#line 931  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct lock_manager_operations {
   int (*lm_compare_owner)(struct file_lock *, struct file_lock *) ;
   unsigned long (*lm_owner_key)(struct file_lock *) ;
   fl_owner_t (*lm_get_owner)(fl_owner_t ) ;
   void (*lm_put_owner)(fl_owner_t ) ;
   void (*lm_notify)(struct file_lock *) ;
   int (*lm_grant)(struct file_lock *, int ) ;
   bool (*lm_break)(struct file_lock *) ;
   int (*lm_change)(struct file_lock *, int , struct list_head *) ;
   void (*lm_setup)(struct file_lock *, void **) ;
};

#line 952 
struct nlm_lockowner;

#line 953  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};

#line 14  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/nfs_fs_i.h"
struct nfs4_lock_state;

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};

#line 19 
struct fasync_struct;

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/nfs_fs_i.h"
struct __anonstruct_afs_268 {
   struct list_head link ;
   int state ;
};

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/nfs_fs_i.h"
union __anonunion_fl_u_267 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_268 afs ;
};

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/nfs_fs_i.h"
struct file_lock {
   struct file_lock *fl_next ;
   struct list_head fl_list ;
   struct hlist_node fl_link ;
   struct list_head fl_block ;
   fl_owner_t fl_owner ;
   unsigned int fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   int fl_link_cpu ;
   struct pid *fl_nspid ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   unsigned long fl_downgrade_time ;
   struct file_lock_operations const *fl_ops ;
   struct lock_manager_operations const *fl_lmops ;
   union __anonunion_fl_u_267 fl_u ;
};

#line 1005  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct file_lock_context {
   spinlock_t flc_lock ;
   struct list_head flc_flock ;
   struct list_head flc_posix ;
   struct list_head flc_lease ;
};

#line 1221  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct fasync_struct {
   spinlock_t fa_lock ;
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
   struct callback_head fa_rcu ;
};

#line 1256  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct sb_writers {
   struct percpu_counter counter[3U] ;
   wait_queue_head_t wait ;
   int frozen ;
   wait_queue_head_t wait_unfrozen ;
   struct lockdep_map lock_map[3U] ;
};

#line 1287 
struct super_operations;

#line 1287 
struct xattr_handler;

#line 1287 
struct mtd_info;

#line 1287  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations const *s_op ;
   struct dquot_operations const *dq_op ;
   struct quotactl_ops const *s_qcop ;
   struct export_operations const *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_iflags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   int s_count ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler const **s_xattr ;
   struct list_head s_inodes ;
   struct hlist_bl_head s_anon ;
   struct list_head s_mounts ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct hlist_node s_instances ;
   unsigned int s_quota_types ;
   struct quota_info s_dquot ;
   struct sb_writers s_writers ;
   char s_id[32U] ;
   u8 s_uuid[16U] ;
   void *s_fs_info ;
   unsigned int s_max_links ;
   fmode_t s_mode ;
   u32 s_time_gran ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   char *s_options ;
   struct dentry_operations const *s_d_op ;
   int cleancache_poolid ;
   struct shrinker s_shrink ;
   atomic_long_t s_remove_count ;
   int s_readonly_remount ;
   struct workqueue_struct *s_dio_done_wq ;
   struct hlist_head s_pins ;
   struct list_lru s_dentry_lru ;
   struct list_lru s_inode_lru ;
   struct callback_head rcu ;
   int s_stack_depth ;
};

#line 1526  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};

#line 1540 
struct dir_context;

#line 1565  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct dir_context {
   int (*actor)(struct dir_context *, char const *, int , loff_t , u64 , unsigned int ) ;
   loff_t pos ;
};

#line 1572  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file *, loff_t , int ) ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char const *, size_t , loff_t *) ;
   ssize_t (*read_iter)(struct kiocb *, struct iov_iter *) ;
   ssize_t (*write_iter)(struct kiocb *, struct iov_iter *) ;
   int (*iterate)(struct file *, struct dir_context *) ;
   unsigned int (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   int (*mremap)(struct file *, struct vm_area_struct *) ;
   int (*open)(struct inode *, struct file *) ;
   int (*flush)(struct file *, fl_owner_t ) ;
   int (*release)(struct inode *, struct file *) ;
   int (*fsync)(struct file *, loff_t , loff_t , int ) ;
   int (*aio_fsync)(struct kiocb *, int ) ;
   int (*fasync)(int , struct file *, int ) ;
   int (*lock)(struct file *, int , struct file_lock *) ;
   ssize_t (*sendpage)(struct file *, struct page *, int , size_t , loff_t *, int ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*check_flags)(int ) ;
   int (*flock)(struct file *, int , struct file_lock *) ;
   ssize_t (*splice_write)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ) ;
   ssize_t (*splice_read)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*setlease)(struct file *, long , struct file_lock **, void **) ;
   long (*fallocate)(struct file *, int , loff_t , loff_t ) ;
   void (*show_fdinfo)(struct seq_file *, struct file *) ;
};

#line 1633  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct inode_operations {
   struct dentry *(*lookup)(struct inode *, struct dentry *, unsigned int ) ;
   char const *(*follow_link)(struct dentry *, void **) ;
   int (*permission)(struct inode *, int ) ;
   struct posix_acl *(*get_acl)(struct inode *, int ) ;
   int (*readlink)(struct dentry *, char *, int ) ;
   void (*put_link)(struct inode *, void *) ;
   int (*create)(struct inode *, struct dentry *, umode_t , bool ) ;
   int (*link)(struct dentry *, struct inode *, struct dentry *) ;
   int (*unlink)(struct inode *, struct dentry *) ;
   int (*symlink)(struct inode *, struct dentry *, char const *) ;
   int (*mkdir)(struct inode *, struct dentry *, umode_t ) ;
   int (*rmdir)(struct inode *, struct dentry *) ;
   int (*mknod)(struct inode *, struct dentry *, umode_t , dev_t ) ;
   int (*rename)(struct inode *, struct dentry *, struct inode *, struct dentry *) ;
   int (*rename2)(struct inode *, struct dentry *, struct inode *, struct dentry *, unsigned int ) ;
   int (*setattr)(struct dentry *, struct iattr *) ;
   int (*getattr)(struct vfsmount *, struct dentry *, struct kstat *) ;
   int (*setxattr)(struct dentry *, char const *, void const *, size_t , int ) ;
   ssize_t (*getxattr)(struct dentry *, char const *, void *, size_t ) ;
   ssize_t (*listxattr)(struct dentry *, char *, size_t ) ;
   int (*removexattr)(struct dentry *, char const *) ;
   int (*fiemap)(struct inode *, struct fiemap_extent_info *, u64 , u64 ) ;
   int (*update_time)(struct inode *, struct timespec *, int ) ;
   int (*atomic_open)(struct inode *, struct dentry *, struct file *, unsigned int , umode_t , int *) ;
   int (*tmpfile)(struct inode *, struct dentry *, umode_t ) ;
   int (*set_acl)(struct inode *, struct posix_acl *, int ) ;
};

#line 1687  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block *) ;
   void (*destroy_inode)(struct inode *) ;
   void (*dirty_inode)(struct inode *, int ) ;
   int (*write_inode)(struct inode *, struct writeback_control *) ;
   int (*drop_inode)(struct inode *) ;
   void (*evict_inode)(struct inode *) ;
   void (*put_super)(struct super_block *) ;
   int (*sync_fs)(struct super_block *, int ) ;
   int (*freeze_super)(struct super_block *) ;
   int (*freeze_fs)(struct super_block *) ;
   int (*thaw_super)(struct super_block *) ;
   int (*unfreeze_fs)(struct super_block *) ;
   int (*statfs)(struct dentry *, struct kstatfs *) ;
   int (*remount_fs)(struct super_block *, int *, char *) ;
   void (*umount_begin)(struct super_block *) ;
   int (*show_options)(struct seq_file *, struct dentry *) ;
   int (*show_devname)(struct seq_file *, struct dentry *) ;
   int (*show_path)(struct seq_file *, struct dentry *) ;
   int (*show_stats)(struct seq_file *, struct dentry *) ;
   ssize_t (*quota_read)(struct super_block *, int , char *, size_t , loff_t ) ;
   ssize_t (*quota_write)(struct super_block *, int , char const *, size_t , loff_t ) ;
   struct dquot **(*get_dquots)(struct inode *) ;
   int (*bdev_try_to_free_page)(struct super_block *, struct page *, gfp_t ) ;
   long (*nr_cached_objects)(struct super_block *, struct shrink_control *) ;
   long (*free_cached_objects)(struct super_block *, struct shrink_control *) ;
};

#line 1926  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct file_system_type {
   char const *name ;
   int fs_flags ;
   struct dentry *(*mount)(struct file_system_type *, int , char const *, void *) ;
   void (*kill_sb)(struct super_block *) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct hlist_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key s_vfs_rename_key ;
   struct lock_class_key s_writers_key[3U] ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
};

#line 451  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/device.h"
struct mlx5_eqe_comp {
   __be32 reserved[6U] ;
   __be32 cqn ;
};

#line 456  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/device.h"
struct mlx5_eqe_qp_srq {
   __be32 reserved[6U] ;
   __be32 qp_srq_n ;
};

#line 461  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/device.h"
struct mlx5_eqe_cq_err {
   __be32 cqn ;
   u8 reserved1[7U] ;
   u8 syndrome ;
};

#line 467  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/device.h"
struct mlx5_eqe_port_state {
   u8 reserved0[8U] ;
   u8 port ;
};

#line 472  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/device.h"
struct mlx5_eqe_gpio {
   __be32 reserved0[2U] ;
   __be64 gpio_event ;
};

#line 477  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/device.h"
struct mlx5_eqe_congestion {
   u8 type ;
   u8 rsvd0 ;
   u8 congestion_level ;
};

#line 483  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/device.h"
struct mlx5_eqe_stall_vl {
   u8 rsvd0[3U] ;
   u8 port_vl ;
};

#line 488  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/device.h"
struct mlx5_eqe_cmd {
   __be32 vector ;
   __be32 rsvd[6U] ;
};

#line 493  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/device.h"
struct mlx5_eqe_page_req {
   u8 rsvd0[2U] ;
   __be16 func_id ;
   __be32 num_pages ;
   __be32 rsvd1[5U] ;
};

#line 500  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/device.h"
struct __anonstruct_wqe_459 {
   u16 reserved1 ;
   __be16 wqe_index ;
   u16 reserved2 ;
   __be16 packet_length ;
   u8 reserved3[12U] ;
};

#line 500  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/device.h"
struct __anonstruct_rdma_460 {
   __be32 r_key ;
   u16 reserved1 ;
   __be16 packet_length ;
   __be32 rdma_op_len ;
   __be64 rdma_va ;
};

#line 500  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/device.h"
union __anonunion_458 {
   struct __anonstruct_wqe_459 wqe ;
   struct __anonstruct_rdma_460 rdma ;
};

#line 500  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/device.h"
struct mlx5_eqe_page_fault {
   __be32 bytes_committed ;
   union __anonunion_458 __anonCompField_mlx5_eqe_page_fault_50 ;
   __be32 flags_qpn ;
};

#line 521  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/device.h"
union ev_data {
   __be32 raw[7U] ;
   struct mlx5_eqe_cmd cmd ;
   struct mlx5_eqe_comp comp ;
   struct mlx5_eqe_qp_srq qp_srq ;
   struct mlx5_eqe_cq_err cq_err ;
   struct mlx5_eqe_port_state port ;
   struct mlx5_eqe_gpio gpio ;
   struct mlx5_eqe_congestion cong ;
   struct mlx5_eqe_stall_vl stall_vl ;
   struct mlx5_eqe_page_req req_pages ;
   struct mlx5_eqe_page_fault page_fault ;
};

#line 535  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/device.h"
struct mlx5_eqe {
   u8 rsvd0 ;
   u8 type ;
   u8 rsvd1 ;
   u8 sub_type ;
   __be32 rsvd2[7U] ;
   union ev_data data ;
   __be16 rsvd3 ;
   u8 signature ;
   u8 owner ;
};

#line 340  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/driver.h"
enum mlx5_res_type {
    MLX5_RES_QP = 0,
    MLX5_RES_SRQ = 1,
    MLX5_RES_XSRQ = 2
};

#line 346  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/driver.h"
struct mlx5_core_rsc_common {
   enum mlx5_res_type res ;
   atomic_t refcount ;
   struct completion free ;
};

#line 872 
enum mlx5_qp_state {
    MLX5_QP_STATE_RST = 0,
    MLX5_QP_STATE_INIT = 1,
    MLX5_QP_STATE_RTR = 2,
    MLX5_QP_STATE_RTS = 3,
    MLX5_QP_STATE_SQER = 4,
    MLX5_QP_STATE_SQD = 5,
    MLX5_QP_STATE_ERR = 6,
    MLX5_QP_STATE_SQ_DRAINING = 7,
    MLX5_QP_STATE_SUSPENDED = 9,
    MLX5_QP_NUM_STATE = 10
};

#line 400  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/qp.h"
enum mlx5_pagefault_flags {
    MLX5_PFAULT_REQUESTOR = 1,
    MLX5_PFAULT_WRITE = 2,
    MLX5_PFAULT_RDMA = 4
};

#line 406  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/qp.h"
struct __anonstruct_wqe_514 {
   u32 packet_size ;
   u16 wqe_index ;
};

#line 406  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/qp.h"
struct __anonstruct_rdma_515 {
   u32 r_key ;
   u32 packet_size ;
   u32 rdma_op_len ;
   u64 rdma_va ;
};

#line 406  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/qp.h"
union __anonunion_513 {
   struct __anonstruct_wqe_514 wqe ;
   struct __anonstruct_rdma_515 rdma ;
};

#line 406  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/qp.h"
struct mlx5_pagefault {
   u32 bytes_committed ;
   u8 event_subtype ;
   enum mlx5_pagefault_flags flags ;
   union __anonunion_513 __anonCompField_mlx5_pagefault_62 ;
};

#line 436  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/qp.h"
struct mlx5_core_qp {
   struct mlx5_core_rsc_common common ;
   void (*event)(struct mlx5_core_qp *, int ) ;
   void (*pfault_handler)(struct mlx5_core_qp *, struct mlx5_pagefault *) ;
   int qpn ;
   struct mlx5_rsc_debug *dbg ;
   int pid ;
};

#line 445  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/qp.h"
struct mlx5_qp_path {
   u8 fl ;
   u8 rsvd3 ;
   u8 free_ar ;
   u8 pkey_index ;
   u8 rsvd0 ;
   u8 grh_mlid ;
   __be16 rlid ;
   u8 ackto_lt ;
   u8 mgid_index ;
   u8 static_rate ;
   u8 hop_limit ;
   __be32 tclass_flowlabel ;
   u8 rgid[16U] ;
   u8 rsvd1[4U] ;
   u8 sl ;
   u8 port ;
   u8 rsvd2[6U] ;
};

#line 465  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/qp.h"
struct mlx5_qp_context {
   __be32 flags ;
   __be32 flags_pd ;
   u8 mtu_msgmax ;
   u8 rq_size_stride ;
   __be16 sq_crq_size ;
   __be32 qp_counter_set_usr_page ;
   __be32 wire_qpn ;
   __be32 log_pg_sz_remote_qpn ;
   struct mlx5_qp_path pri_path ;
   struct mlx5_qp_path alt_path ;
   __be32 params1 ;
   u8 reserved2[4U] ;
   __be32 next_send_psn ;
   __be32 cqn_send ;
   u8 reserved3[8U] ;
   __be32 last_acked_psn ;
   __be32 ssn ;
   __be32 params2 ;
   __be32 rnr_nextrecvpsn ;
   __be32 xrcd ;
   __be32 cqn_recv ;
   __be64 db_rec_addr ;
   __be32 qkey ;
   __be32 rq_type_srqn ;
   __be32 rmsn ;
   __be16 hw_sq_wqe_counter ;
   __be16 sw_sq_wqe_counter ;
   __be16 hw_rcyclic_byte_counter ;
   __be16 hw_rq_counter ;
   __be16 sw_rcyclic_byte_counter ;
   __be16 sw_rq_counter ;
   u8 rsvd0[5U] ;
   u8 cgs ;
   u8 cs_req ;
   u8 cs_res ;
   __be64 dc_access_key ;
   u8 rsvd1[24U] ;
};

#line 505  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/qp.h"
struct mlx5_create_qp_mbox_in {
   struct mlx5_inbox_hdr hdr ;
   __be32 input_qpn ;
   u8 rsvd0[4U] ;
   __be32 opt_param_mask ;
   u8 rsvd1[4U] ;
   struct mlx5_qp_context ctx ;
   u8 rsvd3[16U] ;
   __be64 pas[0U] ;
};

#line 516  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/qp.h"
struct mlx5_create_qp_mbox_out {
   struct mlx5_outbox_hdr hdr ;
   __be32 qpn ;
   u8 rsvd0[4U] ;
};

#line 522  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/qp.h"
struct mlx5_destroy_qp_mbox_in {
   struct mlx5_inbox_hdr hdr ;
   __be32 qpn ;
   u8 rsvd0[4U] ;
};

#line 528  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/qp.h"
struct mlx5_destroy_qp_mbox_out {
   struct mlx5_outbox_hdr hdr ;
   u8 rsvd0[8U] ;
};

#line 533  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/qp.h"
struct mlx5_modify_qp_mbox_in {
   struct mlx5_inbox_hdr hdr ;
   __be32 qpn ;
   u8 rsvd1[4U] ;
   __be32 optparam ;
   u8 rsvd0[4U] ;
   struct mlx5_qp_context ctx ;
};

#line 542  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/qp.h"
struct mlx5_modify_qp_mbox_out {
   struct mlx5_outbox_hdr hdr ;
   u8 rsvd0[8U] ;
};

#line 547  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/qp.h"
struct mlx5_query_qp_mbox_in {
   struct mlx5_inbox_hdr hdr ;
   __be32 qpn ;
   u8 rsvd[4U] ;
};

#line 553  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/qp.h"
struct mlx5_query_qp_mbox_out {
   struct mlx5_outbox_hdr hdr ;
   u8 rsvd1[8U] ;
   __be32 optparam ;
   u8 rsvd0[4U] ;
   struct mlx5_qp_context ctx ;
   u8 rsvd2[16U] ;
   __be64 pas[0U] ;
};

#line 575  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/qp.h"
struct mlx5_alloc_xrcd_mbox_in {
   struct mlx5_inbox_hdr hdr ;
   u8 rsvd[8U] ;
};

#line 580  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/qp.h"
struct mlx5_alloc_xrcd_mbox_out {
   struct mlx5_outbox_hdr hdr ;
   __be32 xrcdn ;
   u8 rsvd[4U] ;
};

#line 586  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/qp.h"
struct mlx5_dealloc_xrcd_mbox_in {
   struct mlx5_inbox_hdr hdr ;
   __be32 xrcdn ;
   u8 rsvd[4U] ;
};

#line 592  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/qp.h"
struct mlx5_dealloc_xrcd_mbox_out {
   struct mlx5_outbox_hdr hdr ;
   u8 rsvd[8U] ;
};

#line 607  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/qp.h"
struct mlx5_page_fault_resume_mbox_in {
   struct mlx5_inbox_hdr hdr ;
   __be32 flags_qpn ;
   u8 reserved[4U] ;
};

#line 613  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/qp.h"
struct mlx5_page_fault_resume_mbox_out {
   struct mlx5_outbox_hdr hdr ;
   u8 rsvd[8U] ;
};

#line 850  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/driver.h"
struct mlx5_flow_table_group {
   u8 log_sz ;
   u8 match_criteria_enable ;
   u32 match_criteria[128U] ;
};

#line 87  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.h"
struct mlx5_ftg {
   struct mlx5_flow_table_group g ;
   u32 id ;
   u32 start_ix ;
};

#line 43  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/flow_table.c"
struct mlx5_flow_table {
   struct mlx5_core_dev *dev ;
   u8 level ;
   u8 type ;
   u32 id ;
   struct mutex mutex ;
   u16 num_groups ;
   struct mlx5_ftg *group ;
   unsigned long *bitmap ;
   u32 size ;
};

#line 87  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.h"
struct mlx5_alloc_pd_mbox_in {
   struct mlx5_inbox_hdr hdr ;
   u8 rsvd[8U] ;
};

#line 43  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/pd.c"
struct mlx5_alloc_pd_mbox_out {
   struct mlx5_outbox_hdr hdr ;
   __be32 pdn ;
   u8 rsvd[4U] ;
};

#line 49  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/pd.c"
struct mlx5_dealloc_pd_mbox_in {
   struct mlx5_inbox_hdr hdr ;
   __be32 pdn ;
   u8 rsvd[4U] ;
};

#line 55  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/pd.c"
struct mlx5_dealloc_pd_mbox_out {
   struct mlx5_outbox_hdr hdr ;
   u8 rsvd[8U] ;
};

#line 6894  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/mlx5_ifc.h"
enum mlx5_event {
    MLX5_EVENT_TYPE_COMP = 0,
    MLX5_EVENT_TYPE_PATH_MIG = 1,
    MLX5_EVENT_TYPE_COMM_EST = 2,
    MLX5_EVENT_TYPE_SQ_DRAINED = 3,
    MLX5_EVENT_TYPE_SRQ_LAST_WQE = 19,
    MLX5_EVENT_TYPE_SRQ_RQ_LIMIT = 20,
    MLX5_EVENT_TYPE_CQ_ERROR = 4,
    MLX5_EVENT_TYPE_WQ_CATAS_ERROR = 5,
    MLX5_EVENT_TYPE_PATH_MIG_FAILED = 7,
    MLX5_EVENT_TYPE_WQ_INVAL_REQ_ERROR = 16,
    MLX5_EVENT_TYPE_WQ_ACCESS_ERROR = 17,
    MLX5_EVENT_TYPE_SRQ_CATAS_ERROR = 18,
    MLX5_EVENT_TYPE_INTERNAL_ERROR = 8,
    MLX5_EVENT_TYPE_PORT_CHANGE = 9,
    MLX5_EVENT_TYPE_GPIO_EVENT = 21,
    MLX5_EVENT_TYPE_REMOTE_CONFIG = 25,
    MLX5_EVENT_TYPE_DB_BF_CONGESTION = 26,
    MLX5_EVENT_TYPE_STALL_EVENT = 27,
    MLX5_EVENT_TYPE_CMD = 10,
    MLX5_EVENT_TYPE_PAGE_REQUEST = 11,
    MLX5_EVENT_TYPE_PAGE_FAULT = 12
};

#line 736  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/device.h"
struct mlx5_cq_context {
   u8 status ;
   u8 cqe_sz_flags ;
   u8 st ;
   u8 rsvd3 ;
   u8 rsvd4[6U] ;
   __be16 page_offset ;
   __be32 log_sz_usr_page ;
   __be16 cq_period ;
   __be16 cq_max_count ;
   __be16 rsvd20 ;
   __be16 c_eqn ;
   u8 log_pg_sz ;
   u8 rsvd25[7U] ;
   __be32 last_notified_index ;
   __be32 solicit_producer_index ;
   __be32 consumer_counter ;
   __be32 producer_counter ;
   u8 rsvd48[8U] ;
   __be64 db_record_addr ;
};

#line 790  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/device.h"
struct mlx5_query_cq_mbox_out {
   struct mlx5_outbox_hdr hdr ;
   u8 rsvd0[8U] ;
   struct mlx5_cq_context ctx ;
   u8 rsvd6[16U] ;
   __be64 pas[0U] ;
};

#line 832  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/device.h"
struct mlx5_eq_context {
   u8 status ;
   u8 ec_oi ;
   u8 st ;
   u8 rsvd2[7U] ;
   __be16 page_pffset ;
   __be32 log_sz_usr_page ;
   u8 rsvd3[7U] ;
   u8 intr ;
   u8 log_page_size ;
   u8 rsvd4[15U] ;
   __be32 consumer_counter ;
   __be32 produser_counter ;
   u8 rsvd5[16U] ;
};

#line 900  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/device.h"
struct mlx5_query_eq_mbox_out {
   struct mlx5_outbox_hdr hdr ;
   u8 rsvd[8U] ;
   struct mlx5_eq_context ctx ;
};

#line 687  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/qp.h"
struct mlx5_core_cq {
   u32 cqn ;
   int cqe_sz ;
   __be32 *set_ci_db ;
   __be32 *arm_db ;
   atomic_t refcount ;
   struct completion free ;
   unsigned int vector ;
   int irqn ;
   void (*comp)(struct mlx5_core_cq *) ;
   void (*event)(struct mlx5_core_cq *, enum mlx5_event ) ;
   struct mlx5_uar *uar ;
   u32 cons_index ;
   unsigned int arm_sn ;
   struct mlx5_rsc_debug *dbg ;
   int pid ;
};

#line 669  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/device.h"
struct mlx5_srq_ctx {
   u8 state_log_sz ;
   u8 rsvd0[3U] ;
   __be32 flags_xrcd ;
   __be32 pgoff_cqn ;
   u8 rsvd1[4U] ;
   u8 log_pg_sz ;
   u8 rsvd2[7U] ;
   __be32 pd ;
   __be16 lwm ;
   __be16 wqe_cnt ;
   u8 rsvd3[8U] ;
   __be64 db_record ;
};

#line 684  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/device.h"
struct mlx5_create_srq_mbox_in {
   struct mlx5_inbox_hdr hdr ;
   __be32 input_srqn ;
   u8 rsvd0[4U] ;
   struct mlx5_srq_ctx ctx ;
   u8 rsvd1[208U] ;
   __be64 pas[0U] ;
};

#line 693  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/device.h"
struct mlx5_create_srq_mbox_out {
   struct mlx5_outbox_hdr hdr ;
   __be32 srqn ;
   u8 rsvd[4U] ;
};

#line 699  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/device.h"
struct mlx5_destroy_srq_mbox_in {
   struct mlx5_inbox_hdr hdr ;
   __be32 srqn ;
   u8 rsvd[4U] ;
};

#line 705  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/device.h"
struct mlx5_destroy_srq_mbox_out {
   struct mlx5_outbox_hdr hdr ;
   u8 rsvd[8U] ;
};

#line 710  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/device.h"
struct mlx5_query_srq_mbox_in {
   struct mlx5_inbox_hdr hdr ;
   __be32 srqn ;
   u8 rsvd0[4U] ;
};

#line 716  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/device.h"
struct mlx5_query_srq_mbox_out {
   struct mlx5_outbox_hdr hdr ;
   u8 rsvd0[8U] ;
   struct mlx5_srq_ctx ctx ;
   u8 rsvd1[32U] ;
   __be64 pas[0U] ;
};

#line 724  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/device.h"
struct mlx5_arm_srq_mbox_in {
   struct mlx5_inbox_hdr hdr ;
   __be32 srqn ;
   __be16 rsvd ;
   __be16 lwm ;
};

#line 731  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/device.h"
struct mlx5_arm_srq_mbox_out {
   struct mlx5_outbox_hdr hdr ;
   u8 rsvd[8U] ;
};

#line 352  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/driver.h"
struct mlx5_core_srq {
   struct mlx5_core_rsc_common common ;
   u32 srqn ;
   int max ;
   int max_gs ;
   int max_avail_gather ;
   int wqe_shift ;
   void (*event)(struct mlx5_core_srq *, enum mlx5_event ) ;
   atomic_t refcount ;
   struct completion free ;
};

#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/int-ll64.h"
typedef short __s16;

#line 40  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/types.h"
typedef __u32 __wsum;

#line 106  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __u8 uint8_t;

#line 111  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __u64 uint64_t;

#line 54  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dynamic_debug.h"
struct net_device;

#line 296  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rcupdate.h"
struct notifier_block;

#line 837  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/sysctl.h"
struct ctl_table;

#line 839 
struct ctl_table_root;

#line 840 
struct ctl_table_header;

#line 841 
struct ctl_dir;

#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
typedef int proc_handler(struct ctl_table *, int , void *, size_t *, loff_t *);

#line 57  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct ctl_table_poll {
   atomic_t event ;
   wait_queue_head_t wait ;
};

#line 96  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct ctl_table {
   char const *procname ;
   void *data ;
   int maxlen ;
   umode_t mode ;
   struct ctl_table *child ;
   proc_handler *proc_handler ;
   struct ctl_table_poll *poll ;
   void *extra1 ;
   void *extra2 ;
};

#line 117  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct ctl_node {
   struct rb_node node ;
   struct ctl_table_header *header ;
};

#line 122  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct __anonstruct_1578 {
   struct ctl_table *ctl_table ;
   int used ;
   int count ;
   int nreg ;
};

#line 122  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
union __anonunion_1577 {
   struct __anonstruct_1578 __anonCompField___anonunion_1577_19 ;
   struct callback_head rcu ;
};

#line 122 
struct ctl_table_set;

#line 122  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct ctl_table_header {
   union __anonunion_1577 __anonCompField_ctl_table_header_20 ;
   struct completion *unregistering ;
   struct ctl_table *ctl_table_arg ;
   struct ctl_table_root *root ;
   struct ctl_table_set *set ;
   struct ctl_dir *parent ;
   struct ctl_node *node ;
};

#line 143  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct ctl_dir {
   struct ctl_table_header header ;
   struct rb_root root ;
};

#line 149  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct ctl_table_set {
   int (*is_seen)(struct ctl_table_set *) ;
   struct ctl_dir dir ;
};

#line 154  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct ctl_table_root {
   struct ctl_table_set default_set ;
   struct ctl_table_set *(*lookup)(struct ctl_table_root *, struct nsproxy *) ;
   int (*permissions)(struct ctl_table_header *, struct ctl_table *) ;
};

#line 51  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/notifier.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block *, unsigned long , void *) ;
   struct notifier_block *next ;
   int priority ;
};

#line 158  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kmemcheck.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/uio.h"
struct kvec {
   void *iov_base ;
   size_t iov_len ;
};

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uio.h"
struct bio_vec;

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uio.h"
union __anonunion_1600 {
   struct iovec const *iov ;
   struct kvec const *kvec ;
   struct bio_vec const *bvec ;
};

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uio.h"
struct iov_iter {
   int type ;
   size_t iov_offset ;
   size_t count ;
   union __anonunion_1600 __anonCompField_iov_iter_37 ;
   unsigned long nr_segs ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/socket.h"
typedef unsigned short __kernel_sa_family_t;

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/socket.h"
typedef __kernel_sa_family_t sa_family_t;

#line 24  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/socket.h"
struct sockaddr {
   sa_family_t sa_family ;
   char sa_data[14U] ;
};

#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/socket.h"
struct msghdr {
   void *msg_name ;
   int msg_namelen ;
   struct iov_iter msg_iter ;
   void *msg_control ;
   __kernel_size_t msg_controllen ;
   unsigned int msg_flags ;
   struct kiocb *msg_iocb ;
};

#line 217  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/fcntl.h"
enum ldv_12054 {
    SS_FREE = 0,
    SS_UNCONNECTED = 1,
    SS_CONNECTING = 2,
    SS_CONNECTED = 3,
    SS_DISCONNECTING = 4
};

#line 53  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/net.h"
typedef enum ldv_12054 socket_state;

#line 56 
struct net;

#line 73  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/net.h"
struct socket_wq {
   wait_queue_head_t wait ;
   struct fasync_struct *fasync_list ;
   struct callback_head rcu ;
};

#line 93  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/net.h"
struct proto_ops;

#line 93  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/net.h"
struct socket {
   socket_state state ;
   short type ;
   unsigned long flags ;
   struct socket_wq *wq ;
   struct file *file ;
   struct sock *sk ;
   struct proto_ops const *ops ;
};

#line 119  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/net.h"
struct proto_ops {
   int family ;
   struct module *owner ;
   int (*release)(struct socket *) ;
   int (*bind)(struct socket *, struct sockaddr *, int ) ;
   int (*connect)(struct socket *, struct sockaddr *, int , int ) ;
   int (*socketpair)(struct socket *, struct socket *) ;
   int (*accept)(struct socket *, struct socket *, int ) ;
   int (*getname)(struct socket *, struct sockaddr *, int *, int ) ;
   unsigned int (*poll)(struct file *, struct socket *, struct poll_table_struct *) ;
   int (*ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*compat_ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*listen)(struct socket *, int ) ;
   int (*shutdown)(struct socket *, int ) ;
   int (*setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*compat_setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*sendmsg)(struct socket *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct socket *, struct msghdr *, size_t , int ) ;
   int (*mmap)(struct file *, struct socket *, struct vm_area_struct *) ;
   ssize_t (*sendpage)(struct socket *, struct page *, int , size_t , int ) ;
   ssize_t (*splice_read)(struct socket *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*set_peek_off)(struct sock *, int ) ;
};

#line 1172  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct uts_namespace;

#line 161  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/checksum_64.h"
struct in6_addr;

#line 140  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/checksum.h"
struct sk_buff;

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdev_features.h"
typedef u64 netdev_features_t;

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdev_features.h"
union __anonunion_in6_u_1738 {
   __u8 u6_addr8[16U] ;
   __be16 u6_addr16[8U] ;
   __be32 u6_addr32[4U] ;
};

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdev_features.h"
struct in6_addr {
   union __anonunion_in6_u_1738 in6_u ;
};

#line 46  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/in6.h"
struct ethhdr {
   unsigned char h_dest[6U] ;
   unsigned char h_source[6U] ;
   __be16 h_proto ;
};

#line 218  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/flow_dissector.h"
struct pipe_buf_operations;

#line 218  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/flow_dissector.h"
struct pipe_buffer {
   struct page *page ;
   unsigned int offset ;
   unsigned int len ;
   struct pipe_buf_operations const *ops ;
   unsigned int flags ;
   unsigned long private ;
};

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pipe_fs_i.h"
struct pipe_inode_info {
   struct mutex mutex ;
   wait_queue_head_t wait ;
   unsigned int nrbufs ;
   unsigned int curbuf ;
   unsigned int buffers ;
   unsigned int readers ;
   unsigned int writers ;
   unsigned int files ;
   unsigned int waiting_writers ;
   unsigned int r_counter ;
   unsigned int w_counter ;
   struct page *tmp_page ;
   struct fasync_struct *fasync_readers ;
   struct fasync_struct *fasync_writers ;
   struct pipe_buffer *bufs ;
};

#line 61  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pipe_fs_i.h"
struct pipe_buf_operations {
   int can_merge ;
   int (*confirm)(struct pipe_inode_info *, struct pipe_buffer *) ;
   void (*release)(struct pipe_inode_info *, struct pipe_buffer *) ;
   int (*steal)(struct pipe_inode_info *, struct pipe_buffer *) ;
   void (*get)(struct pipe_inode_info *, struct pipe_buffer *) ;
};

#line 86  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/splice.h"
struct napi_struct;

#line 87  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/splice.h"
struct nf_conntrack {
   atomic_t use ;
};

#line 166  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
enum ldv_22386 {
    BRNF_PROTO_UNCHANGED = 0,
    BRNF_PROTO_8021Q = 1,
    BRNF_PROTO_PPPOE = 2
};

#line 172  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_1743 {
   struct net_device *physoutdev ;
   char neigh_header[8U] ;
};

#line 172  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_1744 {
   __be32 ipv4_daddr ;
   struct in6_addr ipv6_daddr ;
};

#line 172  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct nf_bridge_info {
   atomic_t use ;
   enum ldv_22386 __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))) orig_proto : 8 ;
   bool pkt_otherhost ;
   __u16 frag_max_size ;
   unsigned int mask ;
   struct net_device *physindev ;
   union __anonunion_1743 __anonCompField_nf_bridge_info_61 ;
   union __anonunion_1744 __anonCompField_nf_bridge_info_62 ;
};

#line 189  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct sk_buff_head {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   __u32 qlen ;
   spinlock_t lock ;
};

#line 403  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
typedef unsigned int sk_buff_data_t;

#line 404  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct __anonstruct_1747 {
   u32 stamp_us ;
   u32 stamp_jiffies ;
};

#line 404  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_1746 {
   u64 v64 ;
   struct __anonstruct_1747 __anonCompField___anonunion_1746_63 ;
};

#line 404  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct skb_mstamp {
   union __anonunion_1746 __anonCompField_skb_mstamp_64 ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_1750 {
   ktime_t tstamp ;
   struct skb_mstamp skb_mstamp ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct __anonstruct_1749 {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   union __anonunion_1750 __anonCompField___anonstruct_1749_65 ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_1748 {
   struct __anonstruct_1749 __anonCompField___anonunion_1748_66 ;
   struct rb_node rbnode ;
};

#line 457 
struct sec_path;

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct __anonstruct_1752 {
   __u16 csum_start ;
   __u16 csum_offset ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_1751 {
   __wsum csum ;
   struct __anonstruct_1752 __anonCompField___anonunion_1751_68 ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_1753 {
   unsigned int napi_id ;
   unsigned int sender_cpu ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_1754 {
   __u32 mark ;
   __u32 reserved_tailroom ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_1755 {
   __be16 inner_protocol ;
   __u8 inner_ipproto ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct sk_buff {
   union __anonunion_1748 __anonCompField_sk_buff_67 ;
   struct sock *sk ;
   struct net_device *dev ;
   char cb[48U] ;
   unsigned long _skb_refdst ;
   void (*destructor)(struct sk_buff *) ;
   struct sec_path *sp ;
   struct nf_conntrack *nfct ;
   struct nf_bridge_info *nf_bridge ;
   unsigned int len ;
   unsigned int data_len ;
   __u16 mac_len ;
   __u16 hdr_len ;
   __u16 queue_mapping ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) cloned : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) nohdr : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) fclone : 2 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) peeked : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) head_frag : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) xmit_more : 1 ;
   __u32 headers_start[0U] ;
   __u8 __pkt_type_offset[0U] ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))) pkt_type : 3 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) pfmemalloc : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ignore_df : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))) nfctinfo : 3 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) nf_trace : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) ip_summed : 2 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ooo_okay : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) l4_hash : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) sw_hash : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) wifi_acked_valid : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) wifi_acked : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) no_fcs : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) encapsulation : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) encap_hdr_csum : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) csum_valid : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) csum_complete_sw : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) csum_level : 2 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) csum_bad : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) ndisc_nodetype : 2 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ipvs_property : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) inner_protocol_type : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) remcsum_offload : 1 ;
   __u16 tc_index ;
   __u16 tc_verd ;
   union __anonunion_1751 __anonCompField_sk_buff_69 ;
   __u32 priority ;
   int skb_iif ;
   __u32 hash ;
   __be16 vlan_proto ;
   __u16 vlan_tci ;
   union __anonunion_1753 __anonCompField_sk_buff_70 ;
   __u32 secmark ;
   union __anonunion_1754 __anonCompField_sk_buff_71 ;
   union __anonunion_1755 __anonCompField_sk_buff_72 ;
   __u16 inner_transport_header ;
   __u16 inner_network_header ;
   __u16 inner_mac_header ;
   __be16 protocol ;
   __u16 transport_header ;
   __u16 network_header ;
   __u16 mac_header ;
   __u32 headers_end[0U] ;
   sk_buff_data_t tail ;
   sk_buff_data_t end ;
   unsigned char *head ;
   unsigned char *data ;
   unsigned int truesize ;
   atomic_t users ;
};

#line 718 
struct dst_entry;

#line 767 
struct rtable;

#line 174  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ipv6.h"
struct ipv6_stable_secret {
   bool initialized ;
   struct in6_addr secret ;
};

#line 60  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ipv6.h"
struct ipv6_devconf {
   __s32 forwarding ;
   __s32 hop_limit ;
   __s32 mtu6 ;
   __s32 accept_ra ;
   __s32 accept_redirects ;
   __s32 autoconf ;
   __s32 dad_transmits ;
   __s32 rtr_solicits ;
   __s32 rtr_solicit_interval ;
   __s32 rtr_solicit_delay ;
   __s32 force_mld_version ;
   __s32 mldv1_unsolicited_report_interval ;
   __s32 mldv2_unsolicited_report_interval ;
   __s32 use_tempaddr ;
   __s32 temp_valid_lft ;
   __s32 temp_prefered_lft ;
   __s32 regen_max_retry ;
   __s32 max_desync_factor ;
   __s32 max_addresses ;
   __s32 accept_ra_defrtr ;
   __s32 accept_ra_pinfo ;
   __s32 accept_ra_rtr_pref ;
   __s32 rtr_probe_interval ;
   __s32 accept_ra_rt_info_max_plen ;
   __s32 proxy_ndp ;
   __s32 accept_source_route ;
   __s32 accept_ra_from_local ;
   __s32 optimistic_dad ;
   __s32 use_optimistic ;
   __s32 mc_forwarding ;
   __s32 disable_ipv6 ;
   __s32 accept_dad ;
   __s32 force_tllao ;
   __s32 ndisc_notify ;
   __s32 suppress_frag_ndisc ;
   __s32 accept_ra_mtu ;
   struct ipv6_stable_secret stable_secret ;
   void *sysctl ;
};

#line 1182  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dmaengine.h"
struct dql {
   unsigned int num_queued ;
   unsigned int adj_limit ;
   unsigned int last_obj_cnt ;
   unsigned int limit ;
   unsigned int num_completed ;
   unsigned int prev_ovlimit ;
   unsigned int prev_num_queued ;
   unsigned int prev_last_obj_cnt ;
   unsigned int lowest_slack ;
   unsigned long slack_start_time ;
   unsigned int max_limit ;
   unsigned int min_limit ;
   unsigned int slack_hold_time ;
};

#line 43  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_sync_serial_settings_1758 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
};

#line 43  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_sync_serial_settings_1758 sync_serial_settings;

#line 50  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_te1_settings_1759 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
   unsigned int slot_map ;
};

#line 50  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_te1_settings_1759 te1_settings;

#line 55  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_raw_hdlc_proto_1760 {
   unsigned short encoding ;
   unsigned short parity ;
};

#line 55  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_raw_hdlc_proto_1760 raw_hdlc_proto;

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_1761 {
   unsigned int t391 ;
   unsigned int t392 ;
   unsigned int n391 ;
   unsigned int n392 ;
   unsigned int n393 ;
   unsigned short lmi ;
   unsigned short dce ;
};

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_1761 fr_proto;

#line 69  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_1762 {
   unsigned int dlci ;
};

#line 69  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_1762 fr_proto_pvc;

#line 74  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_info_1763 {
   unsigned int dlci ;
   char master[16U] ;
};

#line 74  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_info_1763 fr_proto_pvc_info;

#line 79  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_cisco_proto_1764 {
   unsigned int interval ;
   unsigned int timeout ;
};

#line 79  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_cisco_proto_1764 cisco_proto;

#line 117  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct ifmap {
   unsigned long mem_start ;
   unsigned long mem_end ;
   unsigned short base_addr ;
   unsigned char irq ;
   unsigned char dma ;
   unsigned char port ;
};

#line 177  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if.h"
union __anonunion_ifs_ifsu_1765 {
   raw_hdlc_proto *raw_hdlc ;
   cisco_proto *cisco ;
   fr_proto *fr ;
   fr_proto_pvc *fr_pvc ;
   fr_proto_pvc_info *fr_pvc_info ;
   sync_serial_settings *sync ;
   te1_settings *te1 ;
};

#line 177  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if.h"
struct if_settings {
   unsigned int type ;
   unsigned int size ;
   union __anonunion_ifs_ifsu_1765 ifs_ifsu ;
};

#line 195  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if.h"
union __anonunion_ifr_ifrn_1766 {
   char ifrn_name[16U] ;
};

#line 195  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if.h"
union __anonunion_ifr_ifru_1767 {
   struct sockaddr ifru_addr ;
   struct sockaddr ifru_dstaddr ;
   struct sockaddr ifru_broadaddr ;
   struct sockaddr ifru_netmask ;
   struct sockaddr ifru_hwaddr ;
   short ifru_flags ;
   int ifru_ivalue ;
   int ifru_mtu ;
   struct ifmap ifru_map ;
   char ifru_slave[16U] ;
   char ifru_newname[16U] ;
   void *ifru_data ;
   struct if_settings ifru_settings ;
};

#line 195  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if.h"
struct ifreq {
   union __anonunion_ifr_ifrn_1766 ifr_ifrn ;
   union __anonunion_ifr_ifru_1767 ifr_ifru ;
};

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blk_types.h"
struct bio_vec {
   struct page *bv_page ;
   unsigned int bv_len ;
   unsigned int bv_offset ;
};

#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/compat.h"
typedef s32 compat_time_t;

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/compat.h"
typedef s32 compat_long_t;

#line 44  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/compat.h"
typedef u32 compat_uptr_t;

#line 45  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/compat.h"
struct compat_timespec {
   compat_time_t tv_sec ;
   s32 tv_nsec ;
};

#line 276  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/compat.h"
struct compat_robust_list {
   compat_uptr_t next ;
};

#line 280  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/compat.h"
struct compat_robust_list_head {
   struct compat_robust_list list ;
   compat_long_t futex_offset ;
   compat_uptr_t list_op_pending ;
};

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/if_ether.h"
struct ethtool_cmd {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertising ;
   __u16 speed ;
   __u8 duplex ;
   __u8 port ;
   __u8 phy_address ;
   __u8 transceiver ;
   __u8 autoneg ;
   __u8 mdio_support ;
   __u32 maxtxpkt ;
   __u32 maxrxpkt ;
   __u16 speed_hi ;
   __u8 eth_tp_mdix ;
   __u8 eth_tp_mdix_ctrl ;
   __u32 lp_advertising ;
   __u32 reserved[2U] ;
};

#line 125  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_drvinfo {
   __u32 cmd ;
   char driver[32U] ;
   char version[32U] ;
   char fw_version[32U] ;
   char bus_info[32U] ;
   char erom_version[32U] ;
   char reserved2[12U] ;
   __u32 n_priv_flags ;
   __u32 n_stats ;
   __u32 testinfo_len ;
   __u32 eedump_len ;
   __u32 regdump_len ;
};

#line 189  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_wolinfo {
   __u32 cmd ;
   __u32 supported ;
   __u32 wolopts ;
   __u8 sopass[6U] ;
};

#line 233  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_tunable {
   __u32 cmd ;
   __u32 id ;
   __u32 type_id ;
   __u32 len ;
   void *data[0U] ;
};

#line 245  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_regs {
   __u32 cmd ;
   __u32 version ;
   __u32 len ;
   __u8 data[0U] ;
};

#line 267  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_eeprom {
   __u32 cmd ;
   __u32 magic ;
   __u32 offset ;
   __u32 len ;
   __u8 data[0U] ;
};

#line 293  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_eee {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertised ;
   __u32 lp_advertised ;
   __u32 eee_active ;
   __u32 eee_enabled ;
   __u32 tx_lpi_enabled ;
   __u32 tx_lpi_timer ;
   __u32 reserved[2U] ;
};

#line 322  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_modinfo {
   __u32 cmd ;
   __u32 type ;
   __u32 eeprom_len ;
   __u32 reserved[8U] ;
};

#line 339  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_coalesce {
   __u32 cmd ;
   __u32 rx_coalesce_usecs ;
   __u32 rx_max_coalesced_frames ;
   __u32 rx_coalesce_usecs_irq ;
   __u32 rx_max_coalesced_frames_irq ;
   __u32 tx_coalesce_usecs ;
   __u32 tx_max_coalesced_frames ;
   __u32 tx_coalesce_usecs_irq ;
   __u32 tx_max_coalesced_frames_irq ;
   __u32 stats_block_coalesce_usecs ;
   __u32 use_adaptive_rx_coalesce ;
   __u32 use_adaptive_tx_coalesce ;
   __u32 pkt_rate_low ;
   __u32 rx_coalesce_usecs_low ;
   __u32 rx_max_coalesced_frames_low ;
   __u32 tx_coalesce_usecs_low ;
   __u32 tx_max_coalesced_frames_low ;
   __u32 pkt_rate_high ;
   __u32 rx_coalesce_usecs_high ;
   __u32 rx_max_coalesced_frames_high ;
   __u32 tx_coalesce_usecs_high ;
   __u32 tx_max_coalesced_frames_high ;
   __u32 rate_sample_interval ;
};

#line 438  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_ringparam {
   __u32 cmd ;
   __u32 rx_max_pending ;
   __u32 rx_mini_max_pending ;
   __u32 rx_jumbo_max_pending ;
   __u32 tx_max_pending ;
   __u32 rx_pending ;
   __u32 rx_mini_pending ;
   __u32 rx_jumbo_pending ;
   __u32 tx_pending ;
};

#line 475  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_channels {
   __u32 cmd ;
   __u32 max_rx ;
   __u32 max_tx ;
   __u32 max_other ;
   __u32 max_combined ;
   __u32 rx_count ;
   __u32 tx_count ;
   __u32 other_count ;
   __u32 combined_count ;
};

#line 503  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_pauseparam {
   __u32 cmd ;
   __u32 autoneg ;
   __u32 rx_pause ;
   __u32 tx_pause ;
};

#line 605  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_test {
   __u32 cmd ;
   __u32 flags ;
   __u32 reserved ;
   __u32 len ;
   __u64 data[0U] ;
};

#line 637  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_stats {
   __u32 cmd ;
   __u32 n_stats ;
   __u64 data[0U] ;
};

#line 679  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_tcpip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tos ;
};

#line 712  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 spi ;
   __u8 tos ;
};

#line 728  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_usrip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 l4_4_bytes ;
   __u8 tos ;
   __u8 ip_ver ;
   __u8 proto ;
};

#line 748  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
union ethtool_flow_union {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   struct ethhdr ether_spec ;
   __u8 hdata[52U] ;
};

#line 759  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_flow_ext {
   __u8 padding[2U] ;
   unsigned char h_dest[6U] ;
   __be16 vlan_etype ;
   __be16 vlan_tci ;
   __be32 data[2U] ;
};

#line 778  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_rx_flow_spec {
   __u32 flow_type ;
   union ethtool_flow_union h_u ;
   struct ethtool_flow_ext h_ext ;
   union ethtool_flow_union m_u ;
   struct ethtool_flow_ext m_ext ;
   __u64 ring_cookie ;
   __u32 location ;
};

#line 828  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_rxnfc {
   __u32 cmd ;
   __u32 flow_type ;
   __u64 data ;
   struct ethtool_rx_flow_spec fs ;
   __u32 rule_cnt ;
   __u32 rule_locs[0U] ;
};

#line 999  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_flash {
   __u32 cmd ;
   __u32 region ;
   char data[128U] ;
};

#line 1007  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_dump {
   __u32 cmd ;
   __u32 version ;
   __u32 flag ;
   __u32 len ;
   __u8 data[0U] ;
};

#line 1083  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_ts_info {
   __u32 cmd ;
   __u32 so_timestamping ;
   __s32 phc_index ;
   __u32 tx_types ;
   __u32 tx_reserved[3U] ;
   __u32 rx_filters ;
   __u32 rx_reserved[3U] ;
};

#line 44  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ethtool.h"
enum ethtool_phys_id_state {
    ETHTOOL_ID_INACTIVE = 0,
    ETHTOOL_ID_ACTIVE = 1,
    ETHTOOL_ID_ON = 2,
    ETHTOOL_ID_OFF = 3
};

#line 99  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ethtool.h"
struct ethtool_ops {
   int (*get_settings)(struct net_device *, struct ethtool_cmd *) ;
   int (*set_settings)(struct net_device *, struct ethtool_cmd *) ;
   void (*get_drvinfo)(struct net_device *, struct ethtool_drvinfo *) ;
   int (*get_regs_len)(struct net_device *) ;
   void (*get_regs)(struct net_device *, struct ethtool_regs *, void *) ;
   void (*get_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   int (*set_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   u32 (*get_msglevel)(struct net_device *) ;
   void (*set_msglevel)(struct net_device *, u32 ) ;
   int (*nway_reset)(struct net_device *) ;
   u32 (*get_link)(struct net_device *) ;
   int (*get_eeprom_len)(struct net_device *) ;
   int (*get_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*set_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   int (*set_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   void (*get_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   int (*set_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   void (*get_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   int (*set_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   void (*self_test)(struct net_device *, struct ethtool_test *, u64 *) ;
   void (*get_strings)(struct net_device *, u32 , u8 *) ;
   int (*set_phys_id)(struct net_device *, enum ethtool_phys_id_state ) ;
   void (*get_ethtool_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
   int (*begin)(struct net_device *) ;
   void (*complete)(struct net_device *) ;
   u32 (*get_priv_flags)(struct net_device *) ;
   int (*set_priv_flags)(struct net_device *, u32 ) ;
   int (*get_sset_count)(struct net_device *, int ) ;
   int (*get_rxnfc)(struct net_device *, struct ethtool_rxnfc *, u32 *) ;
   int (*set_rxnfc)(struct net_device *, struct ethtool_rxnfc *) ;
   int (*flash_device)(struct net_device *, struct ethtool_flash *) ;
   int (*reset)(struct net_device *, u32 *) ;
   u32 (*get_rxfh_key_size)(struct net_device *) ;
   u32 (*get_rxfh_indir_size)(struct net_device *) ;
   int (*get_rxfh)(struct net_device *, u32 *, u8 *, u8 *) ;
   int (*set_rxfh)(struct net_device *, u32 const *, u8 const *, u8 const ) ;
   void (*get_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*set_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*get_dump_flag)(struct net_device *, struct ethtool_dump *) ;
   int (*get_dump_data)(struct net_device *, struct ethtool_dump *, void *) ;
   int (*set_dump)(struct net_device *, struct ethtool_dump *) ;
   int (*get_ts_info)(struct net_device *, struct ethtool_ts_info *) ;
   int (*get_module_info)(struct net_device *, struct ethtool_modinfo *) ;
   int (*get_module_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*set_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*get_tunable)(struct net_device *, struct ethtool_tunable const *, void *) ;
   int (*set_tunable)(struct net_device *, struct ethtool_tunable const *, void const *) ;
};

#line 235  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/flow.h"
struct prot_inuse;

#line 236  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/flow.h"
struct netns_core {
   struct ctl_table_header *sysctl_hdr ;
   int sysctl_somaxconn ;
   struct prot_inuse *inuse ;
};

#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct u64_stats_sync {
   
};

#line 146  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/u64_stats_sync.h"
struct ipstats_mib {
   u64 mibs[36U] ;
   struct u64_stats_sync syncp ;
};

#line 61  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct icmp_mib {
   unsigned long mibs[28U] ;
};

#line 67  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct icmpmsg_mib {
   atomic_long_t mibs[512U] ;
};

#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct icmpv6_mib {
   unsigned long mibs[6U] ;
};

#line 83  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct icmpv6msg_mib {
   atomic_long_t mibs[512U] ;
};

#line 93  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct tcp_mib {
   unsigned long mibs[16U] ;
};

#line 100  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct udp_mib {
   unsigned long mibs[9U] ;
};

#line 106  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct linux_mib {
   unsigned long mibs[115U] ;
};

#line 112  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct linux_xfrm_mib {
   unsigned long mibs[29U] ;
};

#line 118  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct netns_mib {
   struct tcp_mib *tcp_statistics ;
   struct ipstats_mib *ip_statistics ;
   struct linux_mib *net_statistics ;
   struct udp_mib *udp_statistics ;
   struct udp_mib *udplite_statistics ;
   struct icmp_mib *icmp_statistics ;
   struct icmpmsg_mib *icmpmsg_statistics ;
   struct proc_dir_entry *proc_net_devsnmp6 ;
   struct udp_mib *udp_stats_in6 ;
   struct udp_mib *udplite_stats_in6 ;
   struct ipstats_mib *ipv6_statistics ;
   struct icmpv6_mib *icmpv6_statistics ;
   struct icmpv6msg_mib *icmpv6msg_statistics ;
   struct linux_xfrm_mib *xfrm_statistics ;
};

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/mib.h"
struct netns_unix {
   int sysctl_max_dgram_qlen ;
   struct ctl_table_header *ctl ;
};

#line 12  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/unix.h"
struct netns_packet {
   struct mutex sklist_lock ;
   struct hlist_head sklist ;
};

#line 14  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/packet.h"
struct netns_frags {
   struct percpu_counter mem ;
   int timeout ;
   int high_thresh ;
   int low_thresh ;
};

#line 184  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/inet_frag.h"
struct ipv4_devconf;

#line 185 
struct fib_rules_ops;

#line 186 
struct fib_table;

#line 187  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/inet_frag.h"
struct local_ports {
   seqlock_t lock ;
   int range[2U] ;
   bool warned ;
};

#line 24  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ipv4.h"
struct ping_group_range {
   seqlock_t lock ;
   kgid_t range[2U] ;
};

#line 29 
struct inet_peer_base;

#line 29 
struct xt_table;

#line 29  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ipv4.h"
struct netns_ipv4 {
   struct ctl_table_header *forw_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *ipv4_hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *xfrm4_hdr ;
   struct ipv4_devconf *devconf_all ;
   struct ipv4_devconf *devconf_dflt ;
   struct fib_rules_ops *rules_ops ;
   bool fib_has_custom_rules ;
   struct fib_table *fib_local ;
   struct fib_table *fib_main ;
   struct fib_table *fib_default ;
   int fib_num_tclassid_users ;
   struct hlist_head *fib_table_hash ;
   bool fib_offload_disabled ;
   struct sock *fibnl ;
   struct sock **icmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct inet_peer_base *peers ;
   struct sock **tcp_sk ;
   struct netns_frags frags ;
   struct xt_table *iptable_filter ;
   struct xt_table *iptable_mangle ;
   struct xt_table *iptable_raw ;
   struct xt_table *arptable_filter ;
   struct xt_table *iptable_security ;
   struct xt_table *nat_table ;
   int sysctl_icmp_echo_ignore_all ;
   int sysctl_icmp_echo_ignore_broadcasts ;
   int sysctl_icmp_ignore_bogus_error_responses ;
   int sysctl_icmp_ratelimit ;
   int sysctl_icmp_ratemask ;
   int sysctl_icmp_errors_use_inbound_ifaddr ;
   struct local_ports ip_local_ports ;
   int sysctl_tcp_ecn ;
   int sysctl_tcp_ecn_fallback ;
   int sysctl_ip_no_pmtu_disc ;
   int sysctl_ip_fwd_use_pmtu ;
   int sysctl_ip_nonlocal_bind ;
   int sysctl_fwmark_reflect ;
   int sysctl_tcp_fwmark_accept ;
   int sysctl_tcp_mtu_probing ;
   int sysctl_tcp_base_mss ;
   int sysctl_tcp_probe_threshold ;
   u32 sysctl_tcp_probe_interval ;
   struct ping_group_range ping_group_range ;
   atomic_t dev_addr_genid ;
   unsigned long *sysctl_local_reserved_ports ;
   struct list_head mr_tables ;
   struct fib_rules_ops *mr_rules_ops ;
   atomic_t rt_genid ;
};

#line 113 
struct neighbour;

#line 113  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ipv4.h"
struct dst_ops {
   unsigned short family ;
   unsigned int gc_thresh ;
   int (*gc)(struct dst_ops *) ;
   struct dst_entry *(*check)(struct dst_entry *, __u32 ) ;
   unsigned int (*default_advmss)(struct dst_entry const *) ;
   unsigned int (*mtu)(struct dst_entry const *) ;
   u32 *(*cow_metrics)(struct dst_entry *, unsigned long ) ;
   void (*destroy)(struct dst_entry *) ;
   void (*ifdown)(struct dst_entry *, struct net_device *, int ) ;
   struct dst_entry *(*negative_advice)(struct dst_entry *) ;
   void (*link_failure)(struct sk_buff *) ;
   void (*update_pmtu)(struct dst_entry *, struct sock *, struct sk_buff *, u32 ) ;
   void (*redirect)(struct dst_entry *, struct sock *, struct sk_buff *) ;
   int (*local_out)(struct sk_buff *) ;
   struct neighbour *(*neigh_lookup)(struct dst_entry const *, struct sk_buff *, void const *) ;
   struct kmem_cache *kmem_cachep ;
   struct percpu_counter pcpuc_entries ;
};

#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dst_ops.h"
struct netns_sysctl_ipv6 {
   struct ctl_table_header *hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *icmp_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *xfrm6_hdr ;
   int bindv6only ;
   int flush_delay ;
   int ip6_rt_max_size ;
   int ip6_rt_gc_min_interval ;
   int ip6_rt_gc_timeout ;
   int ip6_rt_gc_interval ;
   int ip6_rt_gc_elasticity ;
   int ip6_rt_mtu_expires ;
   int ip6_rt_min_advmss ;
   int flowlabel_consistency ;
   int auto_flowlabels ;
   int icmpv6_time ;
   int anycast_src_echo_reply ;
   int fwmark_reflect ;
   int idgen_retries ;
   int idgen_delay ;
   int flowlabel_state_ranges ;
};

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ipv6.h"
struct rt6_info;

#line 39 
struct rt6_statistics;

#line 39 
struct fib6_table;

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ipv6.h"
struct netns_ipv6 {
   struct netns_sysctl_ipv6 sysctl ;
   struct ipv6_devconf *devconf_all ;
   struct ipv6_devconf *devconf_dflt ;
   struct inet_peer_base *peers ;
   struct netns_frags frags ;
   struct xt_table *ip6table_filter ;
   struct xt_table *ip6table_mangle ;
   struct xt_table *ip6table_raw ;
   struct xt_table *ip6table_security ;
   struct xt_table *ip6table_nat ;
   struct rt6_info *ip6_null_entry ;
   struct rt6_statistics *rt6_stats ;
   struct timer_list ip6_fib_timer ;
   struct hlist_head *fib_table_hash ;
   struct fib6_table *fib6_main_tbl ;
   struct dst_ops ip6_dst_ops ;
   unsigned int ip6_rt_gc_expire ;
   unsigned long ip6_rt_last_gc ;
   struct rt6_info *ip6_prohibit_entry ;
   struct rt6_info *ip6_blk_hole_entry ;
   struct fib6_table *fib6_local_tbl ;
   struct fib_rules_ops *fib6_rules_ops ;
   struct sock **icmp_sk ;
   struct sock *ndisc_sk ;
   struct sock *tcp_sk ;
   struct sock *igmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct list_head mr6_tables ;
   struct fib_rules_ops *mr6_rules_ops ;
   atomic_t dev_addr_genid ;
   atomic_t fib6_sernum ;
};

#line 85  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ipv6.h"
struct netns_nf_frag {
   struct netns_sysctl_ipv6 sysctl ;
   struct netns_frags frags ;
};

#line 91  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ipv6.h"
struct netns_sysctl_lowpan {
   struct ctl_table_header *frags_hdr ;
};

#line 14  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ieee802154_6lowpan.h"
struct netns_ieee802154_lowpan {
   struct netns_sysctl_lowpan sysctl ;
   struct netns_frags frags ;
};

#line 20 
struct sctp_mib;

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ieee802154_6lowpan.h"
struct netns_sctp {
   struct sctp_mib *sctp_statistics ;
   struct proc_dir_entry *proc_net_sctp ;
   struct ctl_table_header *sysctl_header ;
   struct sock *ctl_sock ;
   struct list_head local_addr_list ;
   struct list_head addr_waitq ;
   struct timer_list addr_wq_timer ;
   struct list_head auto_asconf_splist ;
   spinlock_t addr_wq_lock ;
   spinlock_t local_addr_lock ;
   unsigned int rto_initial ;
   unsigned int rto_min ;
   unsigned int rto_max ;
   int rto_alpha ;
   int rto_beta ;
   int max_burst ;
   int cookie_preserve_enable ;
   char *sctp_hmac_alg ;
   unsigned int valid_cookie_life ;
   unsigned int sack_timeout ;
   unsigned int hb_interval ;
   int max_retrans_association ;
   int max_retrans_path ;
   int max_retrans_init ;
   int pf_retrans ;
   int sndbuf_policy ;
   int rcvbuf_policy ;
   int default_auto_asconf ;
   int addip_enable ;
   int addip_noauth ;
   int prsctp_enable ;
   int auth_enable ;
   int scope_policy ;
   int rwnd_upd_shift ;
   unsigned long max_autoclose ;
};

#line 134  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/sctp.h"
struct netns_dccp {
   struct sock *v4_ctl_sk ;
   struct sock *v6_ctl_sk ;
};

#line 79  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/netfilter.h"
struct nf_logger;

#line 80  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/netfilter.h"
struct netns_nf {
   struct proc_dir_entry *proc_netfilter ;
   struct nf_logger const *nf_loggers[13U] ;
   struct ctl_table_header *nf_log_dir_header ;
};

#line 17  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/netfilter.h"
struct ebt_table;

#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/netfilter.h"
struct netns_xt {
   struct list_head tables[13U] ;
   bool notrack_deprecated_warning ;
   bool clusterip_deprecated_warning ;
   struct ebt_table *broute_table ;
   struct ebt_table *frame_filter ;
   struct ebt_table *frame_nat ;
};

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/x_tables.h"
struct hlist_nulls_node;

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/x_tables.h"
struct hlist_nulls_head {
   struct hlist_nulls_node *first ;
};

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/x_tables.h"
struct hlist_nulls_node {
   struct hlist_nulls_node *next ;
   struct hlist_nulls_node **pprev ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netfilter/nf_conntrack_tcp.h"
struct nf_proto_net {
   struct ctl_table_header *ctl_table_header ;
   struct ctl_table *ctl_table ;
   struct ctl_table_header *ctl_compat_header ;
   struct ctl_table *ctl_compat_table ;
   unsigned int users ;
};

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct nf_generic_net {
   struct nf_proto_net pn ;
   unsigned int timeout ;
};

#line 30  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct nf_tcp_net {
   struct nf_proto_net pn ;
   unsigned int timeouts[14U] ;
   unsigned int tcp_loose ;
   unsigned int tcp_be_liberal ;
   unsigned int tcp_max_retrans ;
};

#line 44  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct nf_udp_net {
   struct nf_proto_net pn ;
   unsigned int timeouts[2U] ;
};

#line 49  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct nf_icmp_net {
   struct nf_proto_net pn ;
   unsigned int timeout ;
};

#line 54  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct nf_ip_net {
   struct nf_generic_net generic ;
   struct nf_tcp_net tcp ;
   struct nf_udp_net udp ;
   struct nf_icmp_net icmp ;
   struct nf_icmp_net icmpv6 ;
   struct ctl_table_header *ctl_table_header ;
   struct ctl_table *ctl_table ;
};

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct ct_pcpu {
   spinlock_t lock ;
   struct hlist_nulls_head unconfirmed ;
   struct hlist_nulls_head dying ;
};

#line 72 
struct ip_conntrack_stat;

#line 72 
struct nf_ct_event_notifier;

#line 72 
struct nf_exp_event_notifier;

#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct netns_ct {
   atomic_t count ;
   unsigned int expect_count ;
   struct delayed_work ecache_dwork ;
   bool ecache_dwork_pending ;
   struct ctl_table_header *sysctl_header ;
   struct ctl_table_header *acct_sysctl_header ;
   struct ctl_table_header *tstamp_sysctl_header ;
   struct ctl_table_header *event_sysctl_header ;
   struct ctl_table_header *helper_sysctl_header ;
   char *slabname ;
   unsigned int sysctl_log_invalid ;
   int sysctl_events ;
   int sysctl_acct ;
   int sysctl_auto_assign_helper ;
   bool auto_assign_helper_warned ;
   int sysctl_tstamp ;
   int sysctl_checksum ;
   unsigned int htable_size ;
   seqcount_t generation ;
   struct kmem_cache *nf_conntrack_cachep ;
   struct hlist_nulls_head *hash ;
   struct hlist_head *expect_hash ;
   struct ct_pcpu *pcpu_lists ;
   struct ip_conntrack_stat *stat ;
   struct nf_ct_event_notifier *nf_conntrack_event_cb ;
   struct nf_exp_event_notifier *nf_expect_event_cb ;
   struct nf_ip_net nf_ct_proto ;
   unsigned int labels_used ;
   u8 label_words ;
   struct hlist_head *nat_bysource ;
   unsigned int nat_htable_size ;
};

#line 114 
struct nft_af_info;

#line 115  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct netns_nftables {
   struct list_head af_info ;
   struct list_head commit_list ;
   struct nft_af_info *ipv4 ;
   struct nft_af_info *ipv6 ;
   struct nft_af_info *inet ;
   struct nft_af_info *arp ;
   struct nft_af_info *bridge ;
   struct nft_af_info *netdev ;
   unsigned int base_seq ;
   u8 gencursor ;
};

#line 465  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/interrupt.h"
struct tasklet_struct {
   struct tasklet_struct *next ;
   unsigned long state ;
   atomic_t count ;
   void (*func)(unsigned long ) ;
   unsigned long data ;
};

#line 672  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/interrupt.h"
struct flow_cache_percpu {
   struct hlist_head *hash_table ;
   int hash_count ;
   u32 hash_rnd ;
   int hash_rnd_recalc ;
   struct tasklet_struct flush_tasklet ;
};

#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/flowcache.h"
struct flow_cache {
   u32 hash_shift ;
   struct flow_cache_percpu *percpu ;
   struct notifier_block hotcpu_notifier ;
   int low_watermark ;
   int high_watermark ;
   struct timer_list rnd_timer ;
};

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/flowcache.h"
struct xfrm_policy_hash {
   struct hlist_head *table ;
   unsigned int hmask ;
   u8 dbits4 ;
   u8 sbits4 ;
   u8 dbits6 ;
   u8 sbits6 ;
};

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/xfrm.h"
struct xfrm_policy_hthresh {
   struct work_struct work ;
   seqlock_t lock ;
   u8 lbits4 ;
   u8 rbits4 ;
   u8 lbits6 ;
   u8 rbits6 ;
};

#line 30  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/xfrm.h"
struct netns_xfrm {
   struct list_head state_all ;
   struct hlist_head *state_bydst ;
   struct hlist_head *state_bysrc ;
   struct hlist_head *state_byspi ;
   unsigned int state_hmask ;
   unsigned int state_num ;
   struct work_struct state_hash_work ;
   struct hlist_head state_gc_list ;
   struct work_struct state_gc_work ;
   struct list_head policy_all ;
   struct hlist_head *policy_byidx ;
   unsigned int policy_idx_hmask ;
   struct hlist_head policy_inexact[3U] ;
   struct xfrm_policy_hash policy_bydst[3U] ;
   unsigned int policy_count[6U] ;
   struct work_struct policy_hash_work ;
   struct xfrm_policy_hthresh policy_hthresh ;
   struct sock *nlsk ;
   struct sock *nlsk_stash ;
   u32 sysctl_aevent_etime ;
   u32 sysctl_aevent_rseqth ;
   int sysctl_larval_drop ;
   u32 sysctl_acq_expires ;
   struct ctl_table_header *sysctl_hdr ;
   struct dst_ops xfrm4_dst_ops ;
   struct dst_ops xfrm6_dst_ops ;
   spinlock_t xfrm_state_lock ;
   rwlock_t xfrm_policy_lock ;
   struct mutex xfrm_cfg_mutex ;
   struct flow_cache flow_cache_global ;
   atomic_t flow_cache_genid ;
   struct list_head flow_cache_gc_list ;
   spinlock_t flow_cache_gc_lock ;
   struct work_struct flow_cache_gc_work ;
   struct work_struct flow_cache_flush_work ;
   struct mutex flow_flush_sem ;
};

#line 88 
struct mpls_route;

#line 89  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/xfrm.h"
struct netns_mpls {
   size_t platform_labels ;
   struct mpls_route **platform_label ;
   struct ctl_table_header *ctl ;
};

#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/mpls.h"
struct proc_ns_operations;

#line 17  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/mpls.h"
struct ns_common {
   atomic_long_t stashed ;
   struct proc_ns_operations const *ops ;
   unsigned int inum ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ns_common.h"
struct net_generic;

#line 12 
struct netns_ipvs;

#line 13  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ns_common.h"
struct net {
   atomic_t passive ;
   atomic_t count ;
   spinlock_t rules_mod_lock ;
   atomic64_t cookie_gen ;
   struct list_head list ;
   struct list_head cleanup_list ;
   struct list_head exit_list ;
   struct user_namespace *user_ns ;
   spinlock_t nsid_lock ;
   struct idr netns_ids ;
   struct ns_common ns ;
   struct proc_dir_entry *proc_net ;
   struct proc_dir_entry *proc_net_stat ;
   struct ctl_table_set sysctls ;
   struct sock *rtnl ;
   struct sock *genl_sock ;
   struct list_head dev_base_head ;
   struct hlist_head *dev_name_head ;
   struct hlist_head *dev_index_head ;
   unsigned int dev_base_seq ;
   int ifindex ;
   unsigned int dev_unreg_count ;
   struct list_head rules_ops ;
   struct net_device *loopback_dev ;
   struct netns_core core ;
   struct netns_mib mib ;
   struct netns_packet packet ;
   struct netns_unix unx ;
   struct netns_ipv4 ipv4 ;
   struct netns_ipv6 ipv6 ;
   struct netns_ieee802154_lowpan ieee802154_lowpan ;
   struct netns_sctp sctp ;
   struct netns_dccp dccp ;
   struct netns_nf nf ;
   struct netns_xt xt ;
   struct netns_ct ct ;
   struct netns_nftables nft ;
   struct netns_nf_frag nf_frag ;
   struct sock *nfnl ;
   struct sock *nfnl_stash ;
   struct sk_buff_head wext_nlevents ;
   struct net_generic *gen ;
   struct netns_xfrm xfrm ;
   struct netns_ipvs *ipvs ;
   struct netns_mpls mpls ;
   struct sock *diag_nlsk ;
   atomic_t fnhe_genid ;
};

#line 241  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/net_namespace.h"
struct __anonstruct_possible_net_t_1823 {
   struct net *net ;
};

#line 241  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/net_namespace.h"
typedef struct __anonstruct_possible_net_t_1823 possible_net_t;

#line 652  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mod_devicetable.h"
enum fwnode_type {
    FWNODE_INVALID = 0,
    FWNODE_OF = 1,
    FWNODE_ACPI = 2,
    FWNODE_PDATA = 3
};

#line 659  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mod_devicetable.h"
struct fwnode_handle {
   enum fwnode_type type ;
   struct fwnode_handle *secondary ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/of.h"
typedef u32 phandle;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/of.h"
struct property {
   char *name ;
   int length ;
   void *value ;
   struct property *next ;
   unsigned long _flags ;
   unsigned int unique_id ;
   struct bin_attribute attr ;
};

#line 44  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/of.h"
struct device_node {
   char const *name ;
   char const *type ;
   phandle phandle ;
   char const *full_name ;
   struct fwnode_handle fwnode ;
   struct property *properties ;
   struct property *deadprops ;
   struct device_node *parent ;
   struct device_node *child ;
   struct device_node *sibling ;
   struct kobject kobj ;
   unsigned long _flags ;
   void *data ;
};

#line 338  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mii.h"
enum ldv_28002 {
    PHY_INTERFACE_MODE_NA = 0,
    PHY_INTERFACE_MODE_MII = 1,
    PHY_INTERFACE_MODE_GMII = 2,
    PHY_INTERFACE_MODE_SGMII = 3,
    PHY_INTERFACE_MODE_TBI = 4,
    PHY_INTERFACE_MODE_REVMII = 5,
    PHY_INTERFACE_MODE_RMII = 6,
    PHY_INTERFACE_MODE_RGMII = 7,
    PHY_INTERFACE_MODE_RGMII_ID = 8,
    PHY_INTERFACE_MODE_RGMII_RXID = 9,
    PHY_INTERFACE_MODE_RGMII_TXID = 10,
    PHY_INTERFACE_MODE_RTBI = 11,
    PHY_INTERFACE_MODE_SMII = 12,
    PHY_INTERFACE_MODE_XGMII = 13,
    PHY_INTERFACE_MODE_MOCA = 14,
    PHY_INTERFACE_MODE_QSGMII = 15,
    PHY_INTERFACE_MODE_MAX = 16
};

#line 80  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy.h"
typedef enum ldv_28002 phy_interface_t;

#line 126 
enum ldv_28055 {
    MDIOBUS_ALLOCATED = 1,
    MDIOBUS_REGISTERED = 2,
    MDIOBUS_UNREGISTERED = 3,
    MDIOBUS_RELEASED = 4
};

#line 133 
struct phy_device;

#line 133  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy.h"
struct mii_bus {
   char const *name ;
   char id[17U] ;
   void *priv ;
   int (*read)(struct mii_bus *, int , int ) ;
   int (*write)(struct mii_bus *, int , int , u16 ) ;
   int (*reset)(struct mii_bus *) ;
   struct mutex mdio_lock ;
   struct device *parent ;
   enum ldv_28055 state ;
   struct device dev ;
   struct phy_device *phy_map[32U] ;
   u32 phy_mask ;
   u32 phy_ignore_ta_mask ;
   int *irq ;
};

#line 214 
enum phy_state {
    PHY_DOWN = 0,
    PHY_STARTING = 1,
    PHY_READY = 2,
    PHY_PENDING = 3,
    PHY_UP = 4,
    PHY_AN = 5,
    PHY_RUNNING = 6,
    PHY_NOLINK = 7,
    PHY_FORCING = 8,
    PHY_CHANGELINK = 9,
    PHY_HALTED = 10,
    PHY_RESUMING = 11
};

#line 229  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy.h"
struct phy_c45_device_ids {
   u32 devices_in_package ;
   u32 device_ids[8U] ;
};

#line 323 
struct phy_driver;

#line 323  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy.h"
struct phy_device {
   struct phy_driver *drv ;
   struct mii_bus *bus ;
   struct device dev ;
   u32 phy_id ;
   struct phy_c45_device_ids c45_ids ;
   bool is_c45 ;
   bool is_internal ;
   bool has_fixups ;
   bool suspended ;
   enum phy_state state ;
   u32 dev_flags ;
   phy_interface_t interface ;
   int addr ;
   int speed ;
   int duplex ;
   int pause ;
   int asym_pause ;
   int link ;
   u32 interrupts ;
   u32 supported ;
   u32 advertising ;
   u32 lp_advertising ;
   int autoneg ;
   int link_timeout ;
   int irq ;
   void *priv ;
   struct work_struct phy_queue ;
   struct delayed_work state_queue ;
   atomic_t irq_disable ;
   struct mutex lock ;
   struct net_device *attached_dev ;
   void (*adjust_link)(struct net_device *) ;
};

#line 429  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy.h"
struct phy_driver {
   u32 phy_id ;
   char *name ;
   unsigned int phy_id_mask ;
   u32 features ;
   u32 flags ;
   void const *driver_data ;
   int (*soft_reset)(struct phy_device *) ;
   int (*config_init)(struct phy_device *) ;
   int (*probe)(struct phy_device *) ;
   int (*suspend)(struct phy_device *) ;
   int (*resume)(struct phy_device *) ;
   int (*config_aneg)(struct phy_device *) ;
   int (*aneg_done)(struct phy_device *) ;
   int (*read_status)(struct phy_device *) ;
   int (*ack_interrupt)(struct phy_device *) ;
   int (*config_intr)(struct phy_device *) ;
   int (*did_interrupt)(struct phy_device *) ;
   void (*remove)(struct phy_device *) ;
   int (*match_phy_device)(struct phy_device *) ;
   int (*ts_info)(struct phy_device *, struct ethtool_ts_info *) ;
   int (*hwtstamp)(struct phy_device *, struct ifreq *) ;
   bool (*rxtstamp)(struct phy_device *, struct sk_buff *, int ) ;
   void (*txtstamp)(struct phy_device *, struct sk_buff *, int ) ;
   int (*set_wol)(struct phy_device *, struct ethtool_wolinfo *) ;
   void (*get_wol)(struct phy_device *, struct ethtool_wolinfo *) ;
   void (*link_change_notify)(struct phy_device *) ;
   int (*read_mmd_indirect)(struct phy_device *, int , int , int ) ;
   void (*write_mmd_indirect)(struct phy_device *, int , int , int , u32 ) ;
   int (*module_info)(struct phy_device *, struct ethtool_modinfo *) ;
   int (*module_eeprom)(struct phy_device *, struct ethtool_eeprom *, u8 *) ;
   struct device_driver driver ;
};

#line 803  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy.h"
struct fixed_phy_status {
   int link ;
   int speed ;
   int duplex ;
   int pause ;
   int asym_pause ;
};

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy_fixed.h"
enum dsa_tag_protocol {
    DSA_TAG_PROTO_NONE = 0,
    DSA_TAG_PROTO_DSA = 1,
    DSA_TAG_PROTO_TRAILER = 2,
    DSA_TAG_PROTO_EDSA = 3,
    DSA_TAG_PROTO_BRCM = 4
};

#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy_fixed.h"
struct dsa_chip_data {
   struct device *host_dev ;
   int sw_addr ;
   int eeprom_len ;
   struct device_node *of_node ;
   char *port_names[12U] ;
   struct device_node *port_dn[12U] ;
   s8 *rtable ;
};

#line 68  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dsa.h"
struct dsa_platform_data {
   struct device *netdev ;
   struct net_device *of_netdev ;
   int nr_chips ;
   struct dsa_chip_data *chip ;
};

#line 84 
struct packet_type;

#line 85 
struct dsa_switch;

#line 85  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dsa.h"
struct dsa_switch_tree {
   struct dsa_platform_data *pd ;
   struct net_device *master_netdev ;
   int (*rcv)(struct sk_buff *, struct net_device *, struct packet_type *, struct net_device *) ;
   enum dsa_tag_protocol tag_protocol ;
   s8 cpu_switch ;
   s8 cpu_port ;
   int link_poll_needed ;
   struct work_struct link_poll_work ;
   struct timer_list link_poll_timer ;
   struct dsa_switch *ds[4U] ;
};

#line 123 
struct dsa_switch_driver;

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dsa.h"
struct dsa_switch {
   struct dsa_switch_tree *dst ;
   int index ;
   enum dsa_tag_protocol tag_protocol ;
   struct dsa_chip_data *pd ;
   struct dsa_switch_driver *drv ;
   struct device *master_dev ;
   char hwmon_name[24U] ;
   struct device *hwmon_dev ;
   u32 dsa_port_mask ;
   u32 phys_port_mask ;
   u32 phys_mii_mask ;
   struct mii_bus *slave_mii_bus ;
   struct net_device *ports[12U] ;
};

#line 194  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dsa.h"
struct dsa_switch_driver {
   struct list_head list ;
   enum dsa_tag_protocol tag_protocol ;
   int priv_size ;
   char *(*probe)(struct device *, int ) ;
   int (*setup)(struct dsa_switch *) ;
   int (*set_addr)(struct dsa_switch *, u8 *) ;
   u32 (*get_phy_flags)(struct dsa_switch *, int ) ;
   int (*phy_read)(struct dsa_switch *, int , int ) ;
   int (*phy_write)(struct dsa_switch *, int , int , u16 ) ;
   void (*poll_link)(struct dsa_switch *) ;
   void (*adjust_link)(struct dsa_switch *, int , struct phy_device *) ;
   void (*fixed_link_update)(struct dsa_switch *, int , struct fixed_phy_status *) ;
   void (*get_strings)(struct dsa_switch *, int , uint8_t *) ;
   void (*get_ethtool_stats)(struct dsa_switch *, int , uint64_t *) ;
   int (*get_sset_count)(struct dsa_switch *) ;
   void (*get_wol)(struct dsa_switch *, int , struct ethtool_wolinfo *) ;
   int (*set_wol)(struct dsa_switch *, int , struct ethtool_wolinfo *) ;
   int (*suspend)(struct dsa_switch *) ;
   int (*resume)(struct dsa_switch *) ;
   int (*port_enable)(struct dsa_switch *, int , struct phy_device *) ;
   void (*port_disable)(struct dsa_switch *, int , struct phy_device *) ;
   int (*set_eee)(struct dsa_switch *, int , struct phy_device *, struct ethtool_eee *) ;
   int (*get_eee)(struct dsa_switch *, int , struct ethtool_eee *) ;
   int (*get_temp)(struct dsa_switch *, int *) ;
   int (*get_temp_limit)(struct dsa_switch *, int *) ;
   int (*set_temp_limit)(struct dsa_switch *, int ) ;
   int (*get_temp_alarm)(struct dsa_switch *, bool *) ;
   int (*get_eeprom_len)(struct dsa_switch *) ;
   int (*get_eeprom)(struct dsa_switch *, struct ethtool_eeprom *, u8 *) ;
   int (*set_eeprom)(struct dsa_switch *, struct ethtool_eeprom *, u8 *) ;
   int (*get_regs_len)(struct dsa_switch *, int ) ;
   void (*get_regs)(struct dsa_switch *, int , struct ethtool_regs *, void *) ;
   int (*port_join_bridge)(struct dsa_switch *, int , u32 ) ;
   int (*port_leave_bridge)(struct dsa_switch *, int , u32 ) ;
   int (*port_stp_update)(struct dsa_switch *, int , u8 ) ;
   int (*fdb_add)(struct dsa_switch *, int , unsigned char const *, u16 ) ;
   int (*fdb_del)(struct dsa_switch *, int , unsigned char const *, u16 ) ;
   int (*fdb_getnext)(struct dsa_switch *, int , unsigned char *, bool *) ;
};

#line 320  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dsa.h"
struct ieee_ets {
   __u8 willing ;
   __u8 ets_cap ;
   __u8 cbs ;
   __u8 tc_tx_bw[8U] ;
   __u8 tc_rx_bw[8U] ;
   __u8 tc_tsa[8U] ;
   __u8 prio_tc[8U] ;
   __u8 tc_reco_bw[8U] ;
   __u8 tc_reco_tsa[8U] ;
   __u8 reco_prio_tc[8U] ;
};

#line 69  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct ieee_maxrate {
   __u64 tc_maxrate[8U] ;
};

#line 87  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct ieee_qcn {
   __u8 rpg_enable[8U] ;
   __u32 rppp_max_rps[8U] ;
   __u32 rpg_time_reset[8U] ;
   __u32 rpg_byte_reset[8U] ;
   __u32 rpg_threshold[8U] ;
   __u32 rpg_max_rate[8U] ;
   __u32 rpg_ai_rate[8U] ;
   __u32 rpg_hai_rate[8U] ;
   __u32 rpg_gd[8U] ;
   __u32 rpg_min_dec_fac[8U] ;
   __u32 rpg_min_rate[8U] ;
   __u32 cndd_state_machine[8U] ;
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct ieee_qcn_stats {
   __u64 rppp_rp_centiseconds[8U] ;
   __u32 rppp_created_rps[8U] ;
};

#line 144  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct ieee_pfc {
   __u8 pfc_cap ;
   __u8 pfc_en ;
   __u8 mbc ;
   __u16 delay ;
   __u64 requests[8U] ;
   __u64 indications[8U] ;
};

#line 164  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct cee_pg {
   __u8 willing ;
   __u8 error ;
   __u8 pg_en ;
   __u8 tcs_supported ;
   __u8 pg_bw[8U] ;
   __u8 prio_pg[8U] ;
};

#line 187  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct cee_pfc {
   __u8 willing ;
   __u8 error ;
   __u8 pfc_en ;
   __u8 tcs_supported ;
};

#line 202  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct dcb_app {
   __u8 selector ;
   __u8 priority ;
   __u16 protocol ;
};

#line 236  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct dcb_peer_app_info {
   __u8 willing ;
   __u8 error ;
};

#line 40  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dcbnl.h"
struct dcbnl_rtnl_ops {
   int (*ieee_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_setets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_getmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_setmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_getqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_setqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_getqcnstats)(struct net_device *, struct ieee_qcn_stats *) ;
   int (*ieee_getpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_setpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_getapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_setapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_delapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_peer_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_peer_getpfc)(struct net_device *, struct ieee_pfc *) ;
   u8 (*getstate)(struct net_device *) ;
   u8 (*setstate)(struct net_device *, u8 ) ;
   void (*getpermhwaddr)(struct net_device *, u8 *) ;
   void (*setpgtccfgtx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgtx)(struct net_device *, int , u8 ) ;
   void (*setpgtccfgrx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgrx)(struct net_device *, int , u8 ) ;
   void (*getpgtccfgtx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgtx)(struct net_device *, int , u8 *) ;
   void (*getpgtccfgrx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgrx)(struct net_device *, int , u8 *) ;
   void (*setpfccfg)(struct net_device *, int , u8 ) ;
   void (*getpfccfg)(struct net_device *, int , u8 *) ;
   u8 (*setall)(struct net_device *) ;
   u8 (*getcap)(struct net_device *, int , u8 *) ;
   int (*getnumtcs)(struct net_device *, int , u8 *) ;
   int (*setnumtcs)(struct net_device *, int , u8 ) ;
   u8 (*getpfcstate)(struct net_device *) ;
   void (*setpfcstate)(struct net_device *, u8 ) ;
   void (*getbcncfg)(struct net_device *, int , u32 *) ;
   void (*setbcncfg)(struct net_device *, int , u32 ) ;
   void (*getbcnrp)(struct net_device *, int , u8 *) ;
   void (*setbcnrp)(struct net_device *, int , u8 ) ;
   int (*setapp)(struct net_device *, u8 , u16 , u8 ) ;
   int (*getapp)(struct net_device *, u8 , u16 ) ;
   u8 (*getfeatcfg)(struct net_device *, int , u8 *) ;
   u8 (*setfeatcfg)(struct net_device *, int , u8 ) ;
   u8 (*getdcbx)(struct net_device *) ;
   u8 (*setdcbx)(struct net_device *, u8 ) ;
   int (*peer_getappinfo)(struct net_device *, struct dcb_peer_app_info *, u16 *) ;
   int (*peer_getapptable)(struct net_device *, struct dcb_app *) ;
   int (*cee_peer_getpg)(struct net_device *, struct cee_pg *) ;
   int (*cee_peer_getpfc)(struct net_device *, struct cee_pfc *) ;
};

#line 105  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dcbnl.h"
struct taskstats {
   __u16 version ;
   __u32 ac_exitcode ;
   __u8 ac_flag ;
   __u8 ac_nice ;
   __u64 cpu_count ;
   __u64 cpu_delay_total ;
   __u64 blkio_count ;
   __u64 blkio_delay_total ;
   __u64 swapin_count ;
   __u64 swapin_delay_total ;
   __u64 cpu_run_real_total ;
   __u64 cpu_run_virtual_total ;
   char ac_comm[32U] ;
   __u8 ac_sched ;
   __u8 ac_pad[3U] ;
   __u32 ac_uid ;
   __u32 ac_gid ;
   __u32 ac_pid ;
   __u32 ac_ppid ;
   __u32 ac_btime ;
   __u64 ac_etime ;
   __u64 ac_utime ;
   __u64 ac_stime ;
   __u64 ac_minflt ;
   __u64 ac_majflt ;
   __u64 coremem ;
   __u64 virtmem ;
   __u64 hiwater_rss ;
   __u64 hiwater_vm ;
   __u64 read_char ;
   __u64 write_char ;
   __u64 read_syscalls ;
   __u64 write_syscalls ;
   __u64 read_bytes ;
   __u64 write_bytes ;
   __u64 cancelled_write_bytes ;
   __u64 nvcsw ;
   __u64 nivcsw ;
   __u64 ac_utimescaled ;
   __u64 ac_stimescaled ;
   __u64 cpu_scaled_run_real_total ;
   __u64 freepages_count ;
   __u64 freepages_delay_total ;
};

#line 515  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cgroup.h"
struct netprio_map {
   struct callback_head rcu ;
   u32 priomap_len ;
   u32 priomap[] ;
};

#line 97  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/security.h"
struct xfrm_policy;

#line 98 
struct xfrm_state;

#line 114 
struct request_sock;

#line 1628 
struct mnt_namespace;

#line 1629 
struct ipc_namespace;

#line 1630  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/security.h"
struct nsproxy {
   atomic_t count ;
   struct uts_namespace *uts_ns ;
   struct ipc_namespace *ipc_ns ;
   struct mnt_namespace *mnt_ns ;
   struct pid_namespace *pid_ns_for_children ;
   struct net *net_ns ;
};

#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/netlink.h"
struct nlmsghdr {
   __u32 nlmsg_len ;
   __u16 nlmsg_type ;
   __u16 nlmsg_flags ;
   __u32 nlmsg_seq ;
   __u32 nlmsg_pid ;
};

#line 147  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/netlink.h"
struct nlattr {
   __u16 nla_len ;
   __u16 nla_type ;
};

#line 106  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netlink.h"
struct netlink_callback {
   struct sk_buff *skb ;
   struct nlmsghdr const *nlh ;
   int (*dump)(struct sk_buff *, struct netlink_callback *) ;
   int (*done)(struct netlink_callback *) ;
   void *data ;
   struct module *module ;
   u16 family ;
   u16 min_dump_alloc ;
   unsigned int prev_seq ;
   unsigned int seq ;
   long args[6U] ;
};

#line 182  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netlink.h"
struct ndmsg {
   __u8 ndm_family ;
   __u8 ndm_pad1 ;
   __u16 ndm_pad2 ;
   __s32 ndm_ifindex ;
   __u16 ndm_state ;
   __u8 ndm_flags ;
   __u8 ndm_type ;
};

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if_link.h"
struct rtnl_link_stats64 {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 rx_errors ;
   __u64 tx_errors ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
   __u64 multicast ;
   __u64 collisions ;
   __u64 rx_length_errors ;
   __u64 rx_over_errors ;
   __u64 rx_crc_errors ;
   __u64 rx_frame_errors ;
   __u64 rx_fifo_errors ;
   __u64 rx_missed_errors ;
   __u64 tx_aborted_errors ;
   __u64 tx_carrier_errors ;
   __u64 tx_fifo_errors ;
   __u64 tx_heartbeat_errors ;
   __u64 tx_window_errors ;
   __u64 rx_compressed ;
   __u64 tx_compressed ;
};

#line 643  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if_link.h"
struct ifla_vf_stats {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 broadcast ;
   __u64 multicast ;
};

#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/if_link.h"
struct ifla_vf_info {
   __u32 vf ;
   __u8 mac[32U] ;
   __u32 vlan ;
   __u32 qos ;
   __u32 spoofchk ;
   __u32 linkstate ;
   __u32 min_tx_rate ;
   __u32 max_tx_rate ;
   __u32 rss_query_en ;
};

#line 118  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if_bonding.h"
struct netpoll_info;

#line 119 
struct wireless_dev;

#line 120 
struct wpan_dev;

#line 121 
struct mpls_dev;

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
enum netdev_tx {
    __NETDEV_TX_MIN = -2147483648,
    NETDEV_TX_OK = 0,
    NETDEV_TX_BUSY = 16,
    NETDEV_TX_LOCKED = 32
};

#line 110  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
typedef enum netdev_tx netdev_tx_t;

#line 129  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct net_device_stats {
   unsigned long rx_packets ;
   unsigned long tx_packets ;
   unsigned long rx_bytes ;
   unsigned long tx_bytes ;
   unsigned long rx_errors ;
   unsigned long tx_errors ;
   unsigned long rx_dropped ;
   unsigned long tx_dropped ;
   unsigned long multicast ;
   unsigned long collisions ;
   unsigned long rx_length_errors ;
   unsigned long rx_over_errors ;
   unsigned long rx_crc_errors ;
   unsigned long rx_frame_errors ;
   unsigned long rx_fifo_errors ;
   unsigned long rx_missed_errors ;
   unsigned long tx_aborted_errors ;
   unsigned long tx_carrier_errors ;
   unsigned long tx_fifo_errors ;
   unsigned long tx_heartbeat_errors ;
   unsigned long tx_window_errors ;
   unsigned long rx_compressed ;
   unsigned long tx_compressed ;
};

#line 190 
struct neigh_parms;

#line 191  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct netdev_hw_addr {
   struct list_head list ;
   unsigned char addr[32U] ;
   unsigned char type ;
   bool global_use ;
   int sync_cnt ;
   int refcount ;
   int synced ;
   struct callback_head callback_head ;
};

#line 211  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct netdev_hw_addr_list {
   struct list_head list ;
   int count ;
};

#line 216  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct hh_cache {
   u16 hh_len ;
   u16 __pad ;
   seqlock_t hh_lock ;
   unsigned long hh_data[16U] ;
};

#line 245  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct header_ops {
   int (*create)(struct sk_buff *, struct net_device *, unsigned short , void const *, void const *, unsigned int ) ;
   int (*parse)(struct sk_buff const *, unsigned char *) ;
   int (*cache)(struct neighbour const *, struct hh_cache *, __be16 ) ;
   void (*cache_update)(struct hh_cache *, struct net_device const *, unsigned char const *) ;
};

#line 295  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct napi_struct {
   struct list_head poll_list ;
   unsigned long state ;
   int weight ;
   unsigned int gro_count ;
   int (*poll)(struct napi_struct *, int ) ;
   spinlock_t poll_lock ;
   int poll_owner ;
   struct net_device *dev ;
   struct sk_buff *gro_list ;
   struct sk_buff *skb ;
   struct hrtimer timer ;
   struct list_head dev_list ;
   struct hlist_node napi_hash_node ;
   unsigned int napi_id ;
};

#line 340 
enum rx_handler_result {
    RX_HANDLER_CONSUMED = 0,
    RX_HANDLER_ANOTHER = 1,
    RX_HANDLER_EXACT = 2,
    RX_HANDLER_PASS = 3
};

#line 388  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
typedef enum rx_handler_result rx_handler_result_t;

#line 389  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
typedef rx_handler_result_t rx_handler_func_t(struct sk_buff **);

#line 537 
struct Qdisc;

#line 537  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct netdev_queue {
   struct net_device *dev ;
   struct Qdisc *qdisc ;
   struct Qdisc *qdisc_sleeping ;
   struct kobject kobj ;
   int numa_node ;
   spinlock_t _xmit_lock ;
   int xmit_lock_owner ;
   unsigned long trans_start ;
   unsigned long trans_timeout ;
   unsigned long state ;
   struct dql dql ;
   unsigned long tx_maxrate ;
};

#line 607  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct rps_map {
   unsigned int len ;
   struct callback_head rcu ;
   u16 cpus[0U] ;
};

#line 619  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct rps_dev_flow {
   u16 cpu ;
   u16 filter ;
   unsigned int last_qtail ;
};

#line 631  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct rps_dev_flow_table {
   unsigned int mask ;
   struct callback_head rcu ;
   struct rps_dev_flow flows[0U] ;
};

#line 683  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct netdev_rx_queue {
   struct rps_map *rps_map ;
   struct rps_dev_flow_table *rps_flow_table ;
   struct kobject kobj ;
   struct net_device *dev ;
};

#line 706  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct xps_map {
   unsigned int len ;
   unsigned int alloc_len ;
   struct callback_head rcu ;
   u16 queues[0U] ;
};

#line 719  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct xps_dev_maps {
   struct callback_head rcu ;
   struct xps_map *cpu_map[0U] ;
};

#line 730  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct netdev_tc_txq {
   u16 count ;
   u16 offset ;
};

#line 741  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct netdev_fcoe_hbainfo {
   char manufacturer[64U] ;
   char serial_number[64U] ;
   char hardware_version[64U] ;
   char driver_version[64U] ;
   char optionrom_version[64U] ;
   char firmware_version[64U] ;
   char model[256U] ;
   char model_description[256U] ;
};

#line 757  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct netdev_phys_item_id {
   unsigned char id[32U] ;
   unsigned char id_len ;
};

#line 770  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct net_device_ops {
   int (*ndo_init)(struct net_device *) ;
   void (*ndo_uninit)(struct net_device *) ;
   int (*ndo_open)(struct net_device *) ;
   int (*ndo_stop)(struct net_device *) ;
   netdev_tx_t (*ndo_start_xmit)(struct sk_buff *, struct net_device *) ;
   u16 (*ndo_select_queue)(struct net_device *, struct sk_buff *, void *, u16 (*)(struct net_device *, struct sk_buff *)) ;
   void (*ndo_change_rx_flags)(struct net_device *, int ) ;
   void (*ndo_set_rx_mode)(struct net_device *) ;
   int (*ndo_set_mac_address)(struct net_device *, void *) ;
   int (*ndo_validate_addr)(struct net_device *) ;
   int (*ndo_do_ioctl)(struct net_device *, struct ifreq *, int ) ;
   int (*ndo_set_config)(struct net_device *, struct ifmap *) ;
   int (*ndo_change_mtu)(struct net_device *, int ) ;
   int (*ndo_neigh_setup)(struct net_device *, struct neigh_parms *) ;
   void (*ndo_tx_timeout)(struct net_device *) ;
   struct rtnl_link_stats64 *(*ndo_get_stats64)(struct net_device *, struct rtnl_link_stats64 *) ;
   struct net_device_stats *(*ndo_get_stats)(struct net_device *) ;
   int (*ndo_vlan_rx_add_vid)(struct net_device *, __be16 , u16 ) ;
   int (*ndo_vlan_rx_kill_vid)(struct net_device *, __be16 , u16 ) ;
   void (*ndo_poll_controller)(struct net_device *) ;
   int (*ndo_netpoll_setup)(struct net_device *, struct netpoll_info *) ;
   void (*ndo_netpoll_cleanup)(struct net_device *) ;
   int (*ndo_busy_poll)(struct napi_struct *) ;
   int (*ndo_set_vf_mac)(struct net_device *, int , u8 *) ;
   int (*ndo_set_vf_vlan)(struct net_device *, int , u16 , u8 ) ;
   int (*ndo_set_vf_rate)(struct net_device *, int , int , int ) ;
   int (*ndo_set_vf_spoofchk)(struct net_device *, int , bool ) ;
   int (*ndo_get_vf_config)(struct net_device *, int , struct ifla_vf_info *) ;
   int (*ndo_set_vf_link_state)(struct net_device *, int , int ) ;
   int (*ndo_get_vf_stats)(struct net_device *, int , struct ifla_vf_stats *) ;
   int (*ndo_set_vf_port)(struct net_device *, int , struct nlattr **) ;
   int (*ndo_get_vf_port)(struct net_device *, int , struct sk_buff *) ;
   int (*ndo_set_vf_rss_query_en)(struct net_device *, int , bool ) ;
   int (*ndo_setup_tc)(struct net_device *, u8 ) ;
   int (*ndo_fcoe_enable)(struct net_device *) ;
   int (*ndo_fcoe_disable)(struct net_device *) ;
   int (*ndo_fcoe_ddp_setup)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_ddp_done)(struct net_device *, u16 ) ;
   int (*ndo_fcoe_ddp_target)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_get_hbainfo)(struct net_device *, struct netdev_fcoe_hbainfo *) ;
   int (*ndo_fcoe_get_wwn)(struct net_device *, u64 *, int ) ;
   int (*ndo_rx_flow_steer)(struct net_device *, struct sk_buff const *, u16 , u32 ) ;
   int (*ndo_add_slave)(struct net_device *, struct net_device *) ;
   int (*ndo_del_slave)(struct net_device *, struct net_device *) ;
   netdev_features_t (*ndo_fix_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_set_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_neigh_construct)(struct neighbour *) ;
   void (*ndo_neigh_destroy)(struct neighbour *) ;
   int (*ndo_fdb_add)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char const *, u16 , u16 ) ;
   int (*ndo_fdb_del)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char const *, u16 ) ;
   int (*ndo_fdb_dump)(struct sk_buff *, struct netlink_callback *, struct net_device *, struct net_device *, int ) ;
   int (*ndo_bridge_setlink)(struct net_device *, struct nlmsghdr *, u16 ) ;
   int (*ndo_bridge_getlink)(struct sk_buff *, u32 , u32 , struct net_device *, u32 , int ) ;
   int (*ndo_bridge_dellink)(struct net_device *, struct nlmsghdr *, u16 ) ;
   int (*ndo_change_carrier)(struct net_device *, bool ) ;
   int (*ndo_get_phys_port_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_phys_port_name)(struct net_device *, char *, size_t ) ;
   void (*ndo_add_vxlan_port)(struct net_device *, sa_family_t , __be16 ) ;
   void (*ndo_del_vxlan_port)(struct net_device *, sa_family_t , __be16 ) ;
   void *(*ndo_dfwd_add_station)(struct net_device *, struct net_device *) ;
   void (*ndo_dfwd_del_station)(struct net_device *, void *) ;
   netdev_tx_t (*ndo_dfwd_start_xmit)(struct sk_buff *, struct net_device *, void *) ;
   int (*ndo_get_lock_subclass)(struct net_device *) ;
   netdev_features_t (*ndo_features_check)(struct sk_buff *, struct net_device *, netdev_features_t ) ;
   int (*ndo_set_tx_maxrate)(struct net_device *, int , u32 ) ;
   int (*ndo_get_iflink)(struct net_device const *) ;
};

#line 1243 
enum ldv_29767 {
    NETREG_UNINITIALIZED = 0,
    NETREG_REGISTERED = 1,
    NETREG_UNREGISTERING = 2,
    NETREG_UNREGISTERED = 3,
    NETREG_RELEASED = 4,
    NETREG_DUMMY = 5
};

#line 1252 
enum ldv_29768 {
    RTNL_LINK_INITIALIZED = 0,
    RTNL_LINK_INITIALIZING = 1
};

#line 1257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct __anonstruct_adj_list_1836 {
   struct list_head upper ;
   struct list_head lower ;
};

#line 1257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct __anonstruct_all_adj_list_1837 {
   struct list_head upper ;
   struct list_head lower ;
};

#line 1257 
struct iw_handler_def;

#line 1257 
struct iw_public_data;

#line 1257 
struct switchdev_ops;

#line 1257 
struct vlan_info;

#line 1257 
struct tipc_bearer;

#line 1257 
struct in_device;

#line 1257 
struct dn_dev;

#line 1257 
struct inet6_dev;

#line 1257 
struct tcf_proto;

#line 1257 
struct cpu_rmap;

#line 1257 
struct pcpu_lstats;

#line 1257 
struct pcpu_sw_netstats;

#line 1257 
struct pcpu_dstats;

#line 1257 
struct pcpu_vstats;

#line 1257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
union __anonunion_1838 {
   void *ml_priv ;
   struct pcpu_lstats *lstats ;
   struct pcpu_sw_netstats *tstats ;
   struct pcpu_dstats *dstats ;
   struct pcpu_vstats *vstats ;
};

#line 1257 
struct garp_port;

#line 1257 
struct mrp_port;

#line 1257 
struct rtnl_link_ops;

#line 1257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct net_device {
   char name[16U] ;
   struct hlist_node name_hlist ;
   char *ifalias ;
   unsigned long mem_end ;
   unsigned long mem_start ;
   unsigned long base_addr ;
   int irq ;
   atomic_t carrier_changes ;
   unsigned long state ;
   struct list_head dev_list ;
   struct list_head napi_list ;
   struct list_head unreg_list ;
   struct list_head close_list ;
   struct list_head ptype_all ;
   struct list_head ptype_specific ;
   struct __anonstruct_adj_list_1836 adj_list ;
   struct __anonstruct_all_adj_list_1837 all_adj_list ;
   netdev_features_t features ;
   netdev_features_t hw_features ;
   netdev_features_t wanted_features ;
   netdev_features_t vlan_features ;
   netdev_features_t hw_enc_features ;
   netdev_features_t mpls_features ;
   int ifindex ;
   int group ;
   struct net_device_stats stats ;
   atomic_long_t rx_dropped ;
   atomic_long_t tx_dropped ;
   struct iw_handler_def const *wireless_handlers ;
   struct iw_public_data *wireless_data ;
   struct net_device_ops const *netdev_ops ;
   struct ethtool_ops const *ethtool_ops ;
   struct switchdev_ops const *switchdev_ops ;
   struct header_ops const *header_ops ;
   unsigned int flags ;
   unsigned int priv_flags ;
   unsigned short gflags ;
   unsigned short padded ;
   unsigned char operstate ;
   unsigned char link_mode ;
   unsigned char if_port ;
   unsigned char dma ;
   unsigned int mtu ;
   unsigned short type ;
   unsigned short hard_header_len ;
   unsigned short needed_headroom ;
   unsigned short needed_tailroom ;
   unsigned char perm_addr[32U] ;
   unsigned char addr_assign_type ;
   unsigned char addr_len ;
   unsigned short neigh_priv_len ;
   unsigned short dev_id ;
   unsigned short dev_port ;
   spinlock_t addr_list_lock ;
   unsigned char name_assign_type ;
   bool uc_promisc ;
   struct netdev_hw_addr_list uc ;
   struct netdev_hw_addr_list mc ;
   struct netdev_hw_addr_list dev_addrs ;
   struct kset *queues_kset ;
   unsigned int promiscuity ;
   unsigned int allmulti ;
   struct vlan_info *vlan_info ;
   struct dsa_switch_tree *dsa_ptr ;
   struct tipc_bearer *tipc_ptr ;
   void *atalk_ptr ;
   struct in_device *ip_ptr ;
   struct dn_dev *dn_ptr ;
   struct inet6_dev *ip6_ptr ;
   void *ax25_ptr ;
   struct wireless_dev *ieee80211_ptr ;
   struct wpan_dev *ieee802154_ptr ;
   struct mpls_dev *mpls_ptr ;
   unsigned long last_rx ;
   unsigned char *dev_addr ;
   struct netdev_rx_queue *_rx ;
   unsigned int num_rx_queues ;
   unsigned int real_num_rx_queues ;
   unsigned long gro_flush_timeout ;
   rx_handler_func_t *rx_handler ;
   void *rx_handler_data ;
   struct tcf_proto *ingress_cl_list ;
   struct netdev_queue *ingress_queue ;
   struct list_head nf_hooks_ingress ;
   unsigned char broadcast[32U] ;
   struct cpu_rmap *rx_cpu_rmap ;
   struct hlist_node index_hlist ;
   struct netdev_queue *_tx ;
   unsigned int num_tx_queues ;
   unsigned int real_num_tx_queues ;
   struct Qdisc *qdisc ;
   unsigned long tx_queue_len ;
   spinlock_t tx_global_lock ;
   int watchdog_timeo ;
   struct xps_dev_maps *xps_maps ;
   unsigned long trans_start ;
   struct timer_list watchdog_timer ;
   int *pcpu_refcnt ;
   struct list_head todo_list ;
   struct list_head link_watch_list ;
   enum ldv_29767 __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))) reg_state : 8 ;
   bool dismantle ;
   enum ldv_29768 __attribute__((__FRAMA_C_BITFIELD_SIZE__(16))) rtnl_link_state : 16 ;
   void (*destructor)(struct net_device *) ;
   struct netpoll_info *npinfo ;
   possible_net_t nd_net ;
   union __anonunion_1838 __anonCompField_net_device_93 ;
   struct garp_port *garp_port ;
   struct mrp_port *mrp_port ;
   struct device dev ;
   struct attribute_group const *sysfs_groups[4U] ;
   struct attribute_group const *sysfs_rx_queue_group ;
   struct rtnl_link_ops const *rtnl_link_ops ;
   unsigned int gso_max_size ;
   u16 gso_max_segs ;
   u16 gso_min_segs ;
   struct dcbnl_rtnl_ops const *dcbnl_ops ;
   u8 num_tc ;
   struct netdev_tc_txq tc_to_txq[16U] ;
   u8 prio_tc_map[16U] ;
   unsigned int fcoe_ddp_xid ;
   struct netprio_map *priomap ;
   struct phy_device *phydev ;
   struct lock_class_key *qdisc_tx_busylock ;
};

#line 1978  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct packet_type {
   __be16 type ;
   struct net_device *dev ;
   int (*func)(struct sk_buff *, struct net_device *, struct packet_type *, struct net_device *) ;
   bool (*id_match)(struct packet_type *, struct sock *) ;
   void *af_packet_priv ;
   struct list_head list ;
};

#line 2025  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct pcpu_sw_netstats {
   u64 rx_packets ;
   u64 rx_bytes ;
   u64 tx_packets ;
   u64 tx_bytes ;
   struct u64_stats_sync syncp ;
};

#line 131  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uaccess.h"
struct page_counter {
   atomic_long_t count ;
   unsigned long limit ;
   struct page_counter *parent ;
   unsigned long watermark ;
   unsigned long failcnt ;
};

#line 170  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/cacheflush.h"
struct sock_filter {
   __u16 code ;
   __u8 jt ;
   __u8 jf ;
   __u32 k ;
};

#line 49  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/filter.h"
struct bpf_insn {
   __u8 code ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) dst_reg : 4 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) src_reg : 4 ;
   __s16 off ;
   __s32 imm ;
};

#line 81  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/bpf.h"
enum bpf_prog_type {
    BPF_PROG_TYPE_UNSPEC = 0,
    BPF_PROG_TYPE_SOCKET_FILTER = 1,
    BPF_PROG_TYPE_KPROBE = 2,
    BPF_PROG_TYPE_SCHED_CLS = 3,
    BPF_PROG_TYPE_SCHED_ACT = 4
};

#line 273 
struct bpf_prog_aux;

#line 314  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/filter.h"
struct sock_fprog_kern {
   u16 len ;
   struct sock_filter *filter ;
};

#line 325  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/filter.h"
union __anonunion_1849 {
   struct sock_filter insns[0U] ;
   struct bpf_insn insnsi[0U] ;
};

#line 325  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/filter.h"
struct bpf_prog {
   u16 pages ;
   bool jited ;
   bool gpl_compatible ;
   u32 len ;
   enum bpf_prog_type type ;
   struct bpf_prog_aux *aux ;
   struct sock_fprog_kern *orig_prog ;
   unsigned int (*bpf_func)(struct sk_buff const *, struct bpf_insn const *) ;
   union __anonunion_1849 __anonCompField_bpf_prog_98 ;
};

#line 342  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/filter.h"
struct sk_filter {
   atomic_t refcnt ;
   struct callback_head rcu ;
   struct bpf_prog *prog ;
};

#line 101  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rculist_nulls.h"
struct pollfd {
   int fd ;
   short events ;
   short revents ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/poll.h"
struct poll_table_struct {
   void (*_qproc)(struct file *, wait_queue_head_t *, struct poll_table_struct *) ;
   unsigned long _key ;
};

#line 136  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rtnetlink.h"
struct nla_policy {
   u16 type ;
   u16 len ;
};

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/rtnetlink.h"
struct rtnl_link_ops {
   struct list_head list ;
   char const *kind ;
   size_t priv_size ;
   void (*setup)(struct net_device *) ;
   int maxtype ;
   struct nla_policy const *policy ;
   int (*validate)(struct nlattr **, struct nlattr **) ;
   int (*newlink)(struct net *, struct net_device *, struct nlattr **, struct nlattr **) ;
   int (*changelink)(struct net_device *, struct nlattr **, struct nlattr **) ;
   void (*dellink)(struct net_device *, struct list_head *) ;
   size_t (*get_size)(struct net_device const *) ;
   int (*fill_info)(struct sk_buff *, struct net_device const *) ;
   size_t (*get_xstats_size)(struct net_device const *) ;
   int (*fill_xstats)(struct sk_buff *, struct net_device const *) ;
   unsigned int (*get_num_tx_queues)(void) ;
   unsigned int (*get_num_rx_queues)(void) ;
   int slave_maxtype ;
   struct nla_policy const *slave_policy ;
   int (*slave_validate)(struct nlattr **, struct nlattr **) ;
   int (*slave_changelink)(struct net_device *, struct net_device *, struct nlattr **, struct nlattr **) ;
   size_t (*get_slave_size)(struct net_device const *, struct net_device const *) ;
   int (*fill_slave_info)(struct sk_buff *, struct net_device const *, struct net_device const *) ;
   struct net *(*get_link_net)(struct net_device const *) ;
};

#line 171 
struct neigh_table;

#line 171  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/rtnetlink.h"
struct neigh_parms {
   possible_net_t net ;
   struct net_device *dev ;
   struct list_head list ;
   int (*neigh_setup)(struct neighbour *) ;
   void (*neigh_cleanup)(struct neighbour *) ;
   struct neigh_table *tbl ;
   void *sysctl_table ;
   int dead ;
   atomic_t refcnt ;
   struct callback_head callback_head ;
   int reachable_time ;
   int data[13U] ;
   unsigned long data_state[1U] ;
};

#line 110  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/neighbour.h"
struct neigh_statistics {
   unsigned long allocs ;
   unsigned long destroys ;
   unsigned long hash_grows ;
   unsigned long res_failed ;
   unsigned long lookups ;
   unsigned long hits ;
   unsigned long rcv_probes_mcast ;
   unsigned long rcv_probes_ucast ;
   unsigned long periodic_gc_runs ;
   unsigned long forced_gc_runs ;
   unsigned long unres_discards ;
};

#line 129 
struct neigh_ops;

#line 129  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/neighbour.h"
struct neighbour {
   struct neighbour *next ;
   struct neigh_table *tbl ;
   struct neigh_parms *parms ;
   unsigned long confirmed ;
   unsigned long updated ;
   rwlock_t lock ;
   atomic_t refcnt ;
   struct sk_buff_head arp_queue ;
   unsigned int arp_queue_len_bytes ;
   struct timer_list timer ;
   unsigned long used ;
   atomic_t probes ;
   __u8 flags ;
   __u8 nud_state ;
   __u8 type ;
   __u8 dead ;
   seqlock_t ha_lock ;
   unsigned char ha[32U] ;
   struct hh_cache hh ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   struct neigh_ops const *ops ;
   struct callback_head rcu ;
   struct net_device *dev ;
   u8 primary_key[0U] ;
};

#line 158  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/neighbour.h"
struct neigh_ops {
   int family ;
   void (*solicit)(struct neighbour *, struct sk_buff *) ;
   void (*error_report)(struct neighbour *, struct sk_buff *) ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   int (*connected_output)(struct neighbour *, struct sk_buff *) ;
};

#line 166  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/neighbour.h"
struct pneigh_entry {
   struct pneigh_entry *next ;
   possible_net_t net ;
   struct net_device *dev ;
   u8 flags ;
   u8 key[0U] ;
};

#line 174  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/neighbour.h"
struct neigh_hash_table {
   struct neighbour **hash_buckets ;
   unsigned int hash_shift ;
   __u32 hash_rnd[4U] ;
   struct callback_head rcu ;
};

#line 187  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/neighbour.h"
struct neigh_table {
   int family ;
   int entry_size ;
   int key_len ;
   __be16 protocol ;
   __u32 (*hash)(void const *, struct net_device const *, __u32 *) ;
   bool (*key_eq)(struct neighbour const *, void const *) ;
   int (*constructor)(struct neighbour *) ;
   int (*pconstructor)(struct pneigh_entry *) ;
   void (*pdestructor)(struct pneigh_entry *) ;
   void (*proxy_redo)(struct sk_buff *) ;
   char *id ;
   struct neigh_parms parms ;
   struct list_head parms_list ;
   int gc_interval ;
   int gc_thresh1 ;
   int gc_thresh2 ;
   int gc_thresh3 ;
   unsigned long last_flush ;
   struct delayed_work gc_work ;
   struct timer_list proxy_timer ;
   struct sk_buff_head proxy_queue ;
   atomic_t entries ;
   rwlock_t lock ;
   unsigned long last_rand ;
   struct neigh_statistics *stats ;
   struct neigh_hash_table *nht ;
   struct pneigh_entry **phash_buckets ;
};

#line 519 
struct dn_route;

#line 519  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/neighbour.h"
union __anonunion_1860 {
   struct dst_entry *next ;
   struct rtable *rt_next ;
   struct rt6_info *rt6_next ;
   struct dn_route *dn_next ;
};

#line 519  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/neighbour.h"
struct dst_entry {
   struct callback_head callback_head ;
   struct dst_entry *child ;
   struct net_device *dev ;
   struct dst_ops *ops ;
   unsigned long _metrics ;
   unsigned long expires ;
   struct dst_entry *path ;
   struct dst_entry *from ;
   struct xfrm_state *xfrm ;
   int (*input)(struct sk_buff *) ;
   int (*output)(struct sock *, struct sk_buff *) ;
   unsigned short flags ;
   unsigned short pending_confirm ;
   short error ;
   short obsolete ;
   unsigned short header_len ;
   unsigned short trailer_len ;
   __u32 tclassid ;
   long __pad_to_align_refcnt[2U] ;
   atomic_t __refcnt ;
   int __use ;
   unsigned long lastuse ;
   union __anonunion_1860 __anonCompField_dst_entry_99 ;
};

#line 124  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
struct __anonstruct_socket_lock_t_1861 {
   spinlock_t slock ;
   int owned ;
   wait_queue_head_t wq ;
   struct lockdep_map dep_map ;
};

#line 124  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
typedef struct __anonstruct_socket_lock_t_1861 socket_lock_t;

#line 124 
struct proto;

#line 130  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
typedef __u32 __portpair;

#line 131  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
typedef __u64 __addrpair;

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
struct __anonstruct_1863 {
   __be32 skc_daddr ;
   __be32 skc_rcv_saddr ;
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
union __anonunion_1862 {
   __addrpair skc_addrpair ;
   struct __anonstruct_1863 __anonCompField___anonunion_1862_100 ;
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
union __anonunion_1864 {
   unsigned int skc_hash ;
   __u16 skc_u16hashes[2U] ;
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
struct __anonstruct_1866 {
   __be16 skc_dport ;
   __u16 skc_num ;
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
union __anonunion_1865 {
   __portpair skc_portpair ;
   struct __anonstruct_1866 __anonCompField___anonunion_1865_103 ;
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
union __anonunion_1867 {
   struct hlist_node skc_bind_node ;
   struct hlist_nulls_node skc_portaddr_node ;
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
union __anonunion_1868 {
   struct hlist_node skc_node ;
   struct hlist_nulls_node skc_nulls_node ;
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
struct sock_common {
   union __anonunion_1862 __anonCompField_sock_common_101 ;
   union __anonunion_1864 __anonCompField_sock_common_102 ;
   union __anonunion_1865 __anonCompField_sock_common_104 ;
   unsigned short skc_family ;
   unsigned char volatile skc_state ;
   unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) skc_reuse : 4 ;
   unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) skc_reuseport : 1 ;
   unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) skc_ipv6only : 1 ;
   unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) skc_net_refcnt : 1 ;
   int skc_bound_dev_if ;
   union __anonunion_1867 __anonCompField_sock_common_105 ;
   struct proto *skc_prot ;
   possible_net_t skc_net ;
   struct in6_addr skc_v6_daddr ;
   struct in6_addr skc_v6_rcv_saddr ;
   atomic64_t skc_cookie ;
   int skc_dontcopy_begin[0U] ;
   union __anonunion_1868 __anonCompField_sock_common_106 ;
   int skc_tx_queue_mapping ;
   atomic_t skc_refcnt ;
   int skc_dontcopy_end[0U] ;
};

#line 219 
struct cg_proto;

#line 220  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
struct __anonstruct_sk_backlog_1869 {
   atomic_t rmem_alloc ;
   int len ;
   struct sk_buff *head ;
   struct sk_buff *tail ;
};

#line 220  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
struct sock {
   struct sock_common __sk_common ;
   socket_lock_t sk_lock ;
   struct sk_buff_head sk_receive_queue ;
   struct __anonstruct_sk_backlog_1869 sk_backlog ;
   int sk_forward_alloc ;
   __u32 sk_rxhash ;
   u16 sk_incoming_cpu ;
   __u32 sk_txhash ;
   unsigned int sk_napi_id ;
   unsigned int sk_ll_usec ;
   atomic_t sk_drops ;
   int sk_rcvbuf ;
   struct sk_filter *sk_filter ;
   struct socket_wq *sk_wq ;
   struct xfrm_policy *sk_policy[2U] ;
   unsigned long sk_flags ;
   struct dst_entry *sk_rx_dst ;
   struct dst_entry *sk_dst_cache ;
   spinlock_t sk_dst_lock ;
   atomic_t sk_wmem_alloc ;
   atomic_t sk_omem_alloc ;
   int sk_sndbuf ;
   struct sk_buff_head sk_write_queue ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) sk_shutdown : 2 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) sk_no_check_tx : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) sk_no_check_rx : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) sk_userlocks : 4 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))) sk_protocol : 8 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(16))) sk_type : 16 ;
   int sk_wmem_queued ;
   gfp_t sk_allocation ;
   u32 sk_pacing_rate ;
   u32 sk_max_pacing_rate ;
   netdev_features_t sk_route_caps ;
   netdev_features_t sk_route_nocaps ;
   int sk_gso_type ;
   unsigned int sk_gso_max_size ;
   u16 sk_gso_max_segs ;
   int sk_rcvlowat ;
   unsigned long sk_lingertime ;
   struct sk_buff_head sk_error_queue ;
   struct proto *sk_prot_creator ;
   rwlock_t sk_callback_lock ;
   int sk_err ;
   int sk_err_soft ;
   u32 sk_ack_backlog ;
   u32 sk_max_ack_backlog ;
   __u32 sk_priority ;
   __u32 sk_cgrp_prioidx ;
   struct pid *sk_peer_pid ;
   struct cred const *sk_peer_cred ;
   long sk_rcvtimeo ;
   long sk_sndtimeo ;
   struct timer_list sk_timer ;
   ktime_t sk_stamp ;
   u16 sk_tsflags ;
   u32 sk_tskey ;
   struct socket *sk_socket ;
   void *sk_user_data ;
   struct page_frag sk_frag ;
   struct sk_buff *sk_send_head ;
   __s32 sk_peek_off ;
   int sk_write_pending ;
   void *sk_security ;
   __u32 sk_mark ;
   u32 sk_classid ;
   struct cg_proto *sk_cgrp ;
   void (*sk_state_change)(struct sock *) ;
   void (*sk_data_ready)(struct sock *) ;
   void (*sk_write_space)(struct sock *) ;
   void (*sk_error_report)(struct sock *) ;
   int (*sk_backlog_rcv)(struct sock *, struct sk_buff *) ;
   void (*sk_destruct)(struct sock *) ;
};

#line 914 
struct request_sock_ops;

#line 915 
struct timewait_sock_ops;

#line 916 
struct inet_hashinfo;

#line 917 
struct raw_hashinfo;

#line 932 
struct udp_table;

#line 932  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
union __anonunion_h_1872 {
   struct inet_hashinfo *hashinfo ;
   struct udp_table *udp_table ;
   struct raw_hashinfo *raw_hash ;
};

#line 932  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
struct proto {
   void (*close)(struct sock *, long ) ;
   int (*connect)(struct sock *, struct sockaddr *, int ) ;
   int (*disconnect)(struct sock *, int ) ;
   struct sock *(*accept)(struct sock *, int , int *) ;
   int (*ioctl)(struct sock *, int , unsigned long ) ;
   int (*init)(struct sock *) ;
   void (*destroy)(struct sock *) ;
   void (*shutdown)(struct sock *, int ) ;
   int (*setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct sock *, int , int , char *, int *) ;
   int (*compat_setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct sock *, int , int , char *, int *) ;
   int (*compat_ioctl)(struct sock *, unsigned int , unsigned long ) ;
   int (*sendmsg)(struct sock *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct sock *, struct msghdr *, size_t , int , int , int *) ;
   int (*sendpage)(struct sock *, struct page *, int , size_t , int ) ;
   int (*bind)(struct sock *, struct sockaddr *, int ) ;
   int (*backlog_rcv)(struct sock *, struct sk_buff *) ;
   void (*release_cb)(struct sock *) ;
   void (*hash)(struct sock *) ;
   void (*unhash)(struct sock *) ;
   void (*rehash)(struct sock *) ;
   int (*get_port)(struct sock *, unsigned short ) ;
   void (*clear_sk)(struct sock *, int ) ;
   unsigned int inuse_idx ;
   bool (*stream_memory_free)(struct sock const *) ;
   void (*enter_memory_pressure)(struct sock *) ;
   atomic_long_t *memory_allocated ;
   struct percpu_counter *sockets_allocated ;
   int *memory_pressure ;
   long *sysctl_mem ;
   int *sysctl_wmem ;
   int *sysctl_rmem ;
   int max_header ;
   bool no_autobind ;
   struct kmem_cache *slab ;
   unsigned int obj_size ;
   int slab_flags ;
   struct percpu_counter *orphan_count ;
   struct request_sock_ops *rsk_prot ;
   struct timewait_sock_ops *twsk_prot ;
   union __anonunion_h_1872 h ;
   struct module *owner ;
   char name[32U] ;
   struct list_head node ;
   int (*init_cgroup)(struct mem_cgroup *, struct cgroup_subsys *) ;
   void (*destroy_cgroup)(struct mem_cgroup *) ;
   struct cg_proto *(*proto_cgroup)(struct mem_cgroup *) ;
};

#line 1054  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
struct cg_proto {
   struct page_counter memory_allocated ;
   struct percpu_counter sockets_allocated ;
   int memory_pressure ;
   long sysctl_mem[3U] ;
   unsigned long flags ;
   struct mem_cgroup *memcg ;
};

#line 174  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/jhash.h"
struct request_sock_ops {
   int family ;
   int obj_size ;
   struct kmem_cache *slab ;
   char *slab_name ;
   int (*rtx_syn_ack)(struct sock *, struct request_sock *) ;
   void (*send_ack)(struct sock *, struct sk_buff *, struct request_sock *) ;
   void (*send_reset)(struct sock *, struct sk_buff *) ;
   void (*destructor)(struct request_sock *) ;
   void (*syn_ack_timeout)(struct request_sock const *) ;
};

#line 46  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/request_sock.h"
struct request_sock {
   struct sock_common __req_common ;
   struct request_sock *dl_next ;
   struct sock *rsk_listener ;
   u16 mss ;
   u8 num_retrans ;
   u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) cookie_ts : 1 ;
   u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(7))) num_timeout : 7 ;
   u32 window_clamp ;
   u32 rcv_wnd ;
   u32 ts_recent ;
   struct timer_list rsk_timer ;
   struct request_sock_ops const *rsk_ops ;
   struct sock *sk ;
   u32 *saved_syn ;
   u32 secid ;
   u32 peer_secid ;
};

#line 330  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/inet_connection_sock.h"
struct timewait_sock_ops {
   struct kmem_cache *twsk_slab ;
   char *twsk_slab_name ;
   unsigned int twsk_obj_size ;
   int (*twsk_unique)(struct sock *, struct sock *, void *) ;
   void (*twsk_destructor)(struct sock *) ;
};

#line 333  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/driver.h"
struct mlx5_core_mr {
   u64 iova ;
   u64 size ;
   u32 key ;
   u32 pd ;
};

#line 498 
struct mlx5_db_pgdir;

#line 498 
struct mlx5_ib_user_db_page;

#line 498  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/driver.h"
union __anonunion_u_1913 {
   struct mlx5_db_pgdir *pgdir ;
   struct mlx5_ib_user_db_page *user_page ;
};

#line 498  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/driver.h"
struct mlx5_db {
   __be32 *db ;
   union __anonunion_u_1913 u ;
   dma_addr_t dma ;
   int index ;
};

#line 521  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/driver.h"
struct mlx5_db_pgdir {
   struct list_head list ;
   unsigned long bitmap[1U] ;
   __be32 *db_page ;
   dma_addr_t db_dma ;
};

#line 42  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/wq.h"
struct mlx5_wq_ctrl {
   struct mlx5_core_dev *mdev ;
   struct mlx5_buf buf ;
   struct mlx5_db db ;
};

#line 48  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/wq.h"
struct mlx5_wq_cyc {
   void *buf ;
   __be32 *db ;
   u16 sz_m1 ;
   u8 log_stride ;
};

#line 55  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/wq.h"
struct mlx5_cqwq {
   void *buf ;
   __be32 *db ;
   u32 sz_m1 ;
   u32 cc ;
   u8 log_sz ;
   u8 log_stride ;
};

#line 64  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/wq.h"
struct mlx5_wq_ll {
   void *buf ;
   __be32 *db ;
   __be16 *tail_next ;
   u16 sz_m1 ;
   u16 head ;
   u16 wqe_ctr ;
   u16 cur_sz ;
   u8 log_stride ;
};

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en.h"
struct mlx5e_vport_stats {
   u64 rx_packets ;
   u64 rx_bytes ;
   u64 tx_packets ;
   u64 tx_bytes ;
   u64 rx_error_packets ;
   u64 rx_error_bytes ;
   u64 tx_error_packets ;
   u64 tx_error_bytes ;
   u64 rx_unicast_packets ;
   u64 rx_unicast_bytes ;
   u64 tx_unicast_packets ;
   u64 tx_unicast_bytes ;
   u64 rx_multicast_packets ;
   u64 rx_multicast_bytes ;
   u64 tx_multicast_packets ;
   u64 tx_multicast_bytes ;
   u64 rx_broadcast_packets ;
   u64 rx_broadcast_bytes ;
   u64 tx_broadcast_packets ;
   u64 tx_broadcast_bytes ;
   u64 tso_packets ;
   u64 tso_bytes ;
   u64 lro_packets ;
   u64 lro_bytes ;
   u64 rx_csum_good ;
   u64 rx_csum_none ;
   u64 tx_csum_offload ;
   u64 tx_queue_stopped ;
   u64 tx_queue_wake ;
   u64 tx_queue_dropped ;
   u64 rx_wqe_err ;
};

#line 141  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en.h"
struct mlx5e_rq_stats {
   u64 packets ;
   u64 csum_none ;
   u64 lro_packets ;
   u64 lro_bytes ;
   u64 wqe_err ;
};

#line 158  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en.h"
struct mlx5e_sq_stats {
   u64 packets ;
   u64 tso_packets ;
   u64 tso_bytes ;
   u64 csum_offload_none ;
   u64 stopped ;
   u64 wake ;
   u64 dropped ;
   u64 nop ;
};

#line 178  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en.h"
struct mlx5e_stats {
   struct mlx5e_vport_stats vport ;
};

#line 183  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en.h"
struct mlx5e_params {
   u8 log_sq_size ;
   u8 log_rq_size ;
   u16 num_channels ;
   u8 default_vlan_prio ;
   u8 num_tc ;
   u16 rx_cq_moderation_usec ;
   u16 rx_cq_moderation_pkts ;
   u16 tx_cq_moderation_usec ;
   u16 tx_cq_moderation_pkts ;
   u16 min_rx_wqes ;
   u16 rx_hash_log_tbl_sz ;
   bool lro_en ;
   u32 lro_wqe_sz ;
};

#line 207 
struct mlx5e_channel;

#line 207  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en.h"
struct mlx5e_cq {
   struct mlx5_cqwq wq ;
   unsigned long flags ;
   struct napi_struct *napi ;
   struct mlx5_core_cq mcq ;
   struct mlx5e_channel *channel ;
   struct mlx5_wq_ctrl wq_ctrl ;
};

#line 221  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en.h"
struct mlx5e_rq {
   struct mlx5_wq_ll wq ;
   u32 wqe_sz ;
   struct sk_buff **skb ;
   struct device *pdev ;
   struct net_device *netdev ;
   struct mlx5e_rq_stats stats ;
   struct mlx5e_cq cq ;
   unsigned long state ;
   int ix ;
   struct mlx5_wq_ctrl wq_ctrl ;
   u32 rqn ;
   struct mlx5e_channel *channel ;
};

#line 247  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en.h"
struct mlx5e_sq_dma {
   dma_addr_t addr ;
   u32 size ;
};

#line 258  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en.h"
struct mlx5e_sq {
   u16 cc ;
   u32 dma_fifo_cc ;
   u16 pc ;
   u32 dma_fifo_pc ;
   u32 bf_offset ;
   struct mlx5e_sq_stats stats ;
   struct mlx5e_cq cq ;
   struct sk_buff **skb ;
   struct mlx5e_sq_dma *dma_fifo ;
   struct mlx5_wq_cyc wq ;
   u32 dma_fifo_mask ;
   void *uar_map ;
   struct netdev_queue *txq ;
   u32 sqn ;
   u32 bf_buf_size ;
   u16 max_inline ;
   u16 edge ;
   struct device *pdev ;
   __be32 mkey_be ;
   unsigned long state ;
   struct mlx5_wq_ctrl wq_ctrl ;
   struct mlx5_uar uar ;
   struct mlx5e_channel *channel ;
   int tc ;
};

#line 307 
struct mlx5e_priv;

#line 307  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en.h"
struct mlx5e_channel {
   struct mlx5e_rq rq ;
   struct mlx5e_sq sq[8U] ;
   struct napi_struct napi ;
   struct device *pdev ;
   struct net_device *netdev ;
   __be32 mkey_be ;
   u8 num_tc ;
   unsigned long flags ;
   int tc_to_txq_map[8U] ;
   struct mlx5e_priv *priv ;
   int ix ;
   int cpu ;
};

#line 342  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en.h"
struct mlx5e_eth_addr_info {
   u8 addr[8U] ;
   u32 tt_vec ;
   u32 ft_ix[7U] ;
};

#line 348  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en.h"
struct mlx5e_eth_addr_db {
   struct hlist_head netdev_uc[256U] ;
   struct hlist_head netdev_mc[256U] ;
   struct mlx5e_eth_addr_info broadcast ;
   struct mlx5e_eth_addr_info allmulti ;
   struct mlx5e_eth_addr_info promisc ;
   bool broadcast_enabled ;
   bool allmulti_enabled ;
   bool promisc_enabled ;
};

#line 366  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en.h"
struct mlx5e_vlan_db {
   unsigned long active_vlans[64U] ;
   u32 active_vlans_ft_ix[4096U] ;
   u32 untagged_rule_ft_ix ;
   u32 any_vlan_rule_ft_ix ;
   bool filter_disabled ;
};

#line 374  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en.h"
struct mlx5e_flow_table {
   void *vlan ;
   void *main ;
};

#line 379  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en.h"
struct mlx5e_priv {
   int num_tc ;
   int default_vlan_prio ;
   struct mlx5e_sq **txq_to_sq_map ;
   unsigned long state ;
   struct mutex state_lock ;
   struct mlx5_uar cq_uar ;
   u32 pdn ;
   u32 tdn ;
   struct mlx5_core_mr mr ;
   struct mlx5e_channel **channel ;
   u32 tisn[8U] ;
   u32 rqtn ;
   u32 tirn[7U] ;
   struct mlx5e_flow_table ft ;
   struct mlx5e_eth_addr_db eth_addr ;
   struct mlx5e_vlan_db vlan ;
   struct mlx5e_params params ;
   spinlock_t async_events_spinlock ;
   struct work_struct update_carrier_work ;
   struct work_struct set_rx_mode_work ;
   struct delayed_work update_stats_work ;
   struct mlx5_core_dev *mdev ;
   struct net_device *netdev ;
   struct mlx5e_stats stats ;
};

#line 541  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en.h"
struct mlx5e_eth_addr_hash_node {
   struct hlist_node hlist ;
   u8 action ;
   struct mlx5e_eth_addr_info ai ;
};

#line 408  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_flow_table.c"
enum mlx5e_vlan_rule_type {
    MLX5E_VLAN_RULE_TYPE_UNTAGGED = 0,
    MLX5E_VLAN_RULE_TYPE_ANY_VID = 1,
    MLX5E_VLAN_RULE_TYPE_MATCH_VID = 2
};

#line 812  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/device.h"
struct mlx5_enable_hca_mbox_in {
   struct mlx5_inbox_hdr hdr ;
   u8 rsvd[8U] ;
};

#line 817  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/device.h"
struct mlx5_enable_hca_mbox_out {
   struct mlx5_outbox_hdr hdr ;
   u8 rsvd[8U] ;
};

#line 822  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/device.h"
struct mlx5_disable_hca_mbox_in {
   struct mlx5_inbox_hdr hdr ;
   u8 rsvd[8U] ;
};

#line 827  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/device.h"
struct mlx5_disable_hca_mbox_out {
   struct mlx5_outbox_hdr hdr ;
   u8 rsvd[8U] ;
};

#line 1105 
enum mlx5_cap_mode {
    HCA_CAP_OPMOD_GET_MAX = 0,
    HCA_CAP_OPMOD_GET_CUR = 1
};

#line 1110 
enum mlx5_cap_type {
    MLX5_CAP_GENERAL = 0,
    MLX5_CAP_ETHERNET_OFFLOADS = 1,
    MLX5_CAP_ODP = 2,
    MLX5_CAP_ATOMIC = 3,
    MLX5_CAP_ROCE = 4,
    MLX5_CAP_IPOIB_OFFLOADS = 5,
    MLX5_CAP_EOIB_OFFLOADS = 6,
    MLX5_CAP_FLOW_TABLE = 7,
    MLX5_CAP_NUM = 8
};

#line 816  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/driver.h"
struct mlx5_interface {
   void *(*add)(struct mlx5_core_dev *) ;
   void (*remove)(struct mlx5_core_dev *, void *) ;
   void (*event)(struct mlx5_core_dev *, void *, enum mlx5_dev_event , unsigned long ) ;
   void *(*get_dev)(void *) ;
   int protocol ;
   struct list_head list ;
};

#line 69  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/main.c"
struct mlx5_device_context {
   struct list_head list ;
   struct mlx5_interface *intf ;
   void *context ;
};

#line 252  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/main.c"
struct mlx5_reg_host_endianess {
   u8 he ;
   u8 rsvd[15U] ;
};

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/workqueue.h"
enum ldv_11970 {
    WORK_STRUCT_PENDING_BIT_0 = 0,
    WORK_STRUCT_DELAYED_BIT_0 = 1,
    WORK_STRUCT_PWQ_BIT_0 = 2,
    WORK_STRUCT_LINKED_BIT_0 = 3,
    WORK_STRUCT_STATIC_BIT_0 = 4,
    WORK_STRUCT_COLOR_SHIFT_0 = 5,
    WORK_STRUCT_COLOR_BITS_0 = 4,
    WORK_STRUCT_PENDING_0 = 1,
    WORK_STRUCT_DELAYED_0 = 2,
    WORK_STRUCT_PWQ_0 = 4,
    WORK_STRUCT_LINKED_0 = 8,
    WORK_STRUCT_STATIC_0 = 16,
    WORK_NR_COLORS_0 = 15,
    WORK_NO_COLOR_0 = 15,
    WORK_CPU_UNBOUND_0 = 8192,
    WORK_STRUCT_FLAG_BITS_0 = 9,
    WORK_OFFQ_FLAG_BASE_0 = 5,
    __WORK_OFFQ_CANCELING_0 = 5,
    WORK_OFFQ_CANCELING_0 = 32,
    WORK_OFFQ_FLAG_BITS_0 = 1,
    WORK_OFFQ_POOL_SHIFT_0 = 6,
    WORK_OFFQ_LEFT_0 = 58,
    WORK_OFFQ_POOL_BITS_0 = 31,
    WORK_OFFQ_POOL_NONE_0 = 2147483647,
    WORK_STRUCT_FLAG_MASK_0 = 511,
    WORK_STRUCT_WQ_DATA_MASK_0 = -512,
    WORK_STRUCT_NO_POOL_0 = 137438953408,
    WORK_BUSY_PENDING_0 = 1,
    WORK_BUSY_RUNNING_0 = 2,
    WORKER_DESC_LEN_0 = 24
};

#line 888  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/mlx5_ifc.h"
struct mlx5_ifc_rq_num_bits {
   u8 reserved_0[8U] ;
   u8 rq_num[24U] ;
};

#line 2063  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/mlx5_ifc.h"
struct mlx5_ifc_rqtc_bits {
   u8 reserved_0[160U] ;
   u8 reserved_1[16U] ;
   u8 rqt_max_size[16U] ;
   u8 reserved_2[16U] ;
   u8 rqt_actual_size[16U] ;
   u8 reserved_3[1696U] ;
   struct mlx5_ifc_rq_num_bits rq_num[0U] ;
};

#line 574  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/device.h"
struct mlx5_cqe64 {
   u8 rsvd0[4U] ;
   u8 lro_tcppsh_abort_dupack ;
   u8 lro_min_ttl ;
   __be16 lro_tcp_win ;
   __be32 lro_ack_seq_num ;
   __be32 rss_hash_result ;
   u8 rss_hash_type ;
   u8 ml_path ;
   u8 rsvd20[2U] ;
   __be16 check_sum ;
   __be16 slid ;
   __be32 flags_rqpn ;
   u8 hds_ip_ext ;
   u8 l4_hdr_type_etc ;
   __be16 vlan_info ;
   __be32 srqn ;
   __be32 imm_inval_pkey ;
   u8 rsvd40[4U] ;
   __be32 byte_cnt ;
   __be64 timestamp ;
   __be32 sop_drop_qpn ;
   __be16 wqe_counter ;
   u8 signature ;
   u8 op_own ;
};

#line 652  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/device.h"
struct mlx5_wqe_srq_next_seg {
   u8 rsvd0[2U] ;
   __be16 next_wqe_index ;
   u8 signature ;
   u8 rsvd1[11U] ;
};

#line 758  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/device.h"
struct mlx5_create_cq_mbox_in {
   struct mlx5_inbox_hdr hdr ;
   __be32 input_cqn ;
   u8 rsvdx[4U] ;
   struct mlx5_cq_context ctx ;
   u8 rsvd6[192U] ;
   __be64 pas[0U] ;
};

#line 910  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/device.h"
struct mlx5_mkey_seg {
   u8 status ;
   u8 pcie_control ;
   u8 flags ;
   u8 version ;
   __be32 qpn_mkey7_0 ;
   u8 rsvd1[4U] ;
   __be32 flags_pd ;
   __be64 start_addr ;
   __be64 len ;
   __be32 bsfs_octo_size ;
   u8 rsvd2[16U] ;
   __be32 xlt_oct_size ;
   u8 rsvd3[3U] ;
   u8 log2_page_size ;
   u8 rsvd4[4U] ;
};

#line 943  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/device.h"
struct mlx5_create_mkey_mbox_in {
   struct mlx5_inbox_hdr hdr ;
   __be32 input_mkey_index ;
   __be32 flags ;
   struct mlx5_mkey_seg seg ;
   u8 rsvd1[16U] ;
   __be32 xlat_oct_act_size ;
   __be32 rsvd2 ;
   u8 rsvd3[168U] ;
   __be64 pas[0U] ;
};

#line 955  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/device.h"
struct mlx5_create_mkey_mbox_out {
   struct mlx5_outbox_hdr hdr ;
   __be32 mkey ;
   u8 rsvd[4U] ;
};

#line 273  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/qp.h"
struct mlx5_wqe_data_seg {
   __be32 byte_count ;
   __be32 lkey ;
   __be64 addr ;
};

#line 53  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/vport.h"
struct mlx5_wq_param {
   int linear ;
   int numa ;
};

#line 420  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en.h"
struct mlx5e_rx_wqe {
   struct mlx5_wqe_srq_next_seg next ;
   struct mlx5_wqe_data_seg data ;
};

#line 522  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en.h"
struct mlx5e_rq_param {
   u32 rqc[60U] ;
   struct mlx5_wq_param wq ;
};

#line 40  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_main.c"
struct mlx5e_sq_param {
   u32 sqc[60U] ;
   struct mlx5_wq_param wq ;
};

#line 45  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_main.c"
struct mlx5e_cq_param {
   u32 cqc[16U] ;
   struct mlx5_wq_param wq ;
   u16 eq_ix ;
};

#line 51  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_main.c"
struct mlx5e_channel_param {
   struct mlx5e_rq_param rq ;
   struct mlx5e_sq_param sq ;
   struct mlx5e_cq_param rx_cq ;
   struct mlx5e_cq_param tx_cq ;
};

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/workqueue.h"
enum ldv_11666 {
    WORK_STRUCT_PENDING_BIT_1 = 0,
    WORK_STRUCT_DELAYED_BIT_1 = 1,
    WORK_STRUCT_PWQ_BIT_1 = 2,
    WORK_STRUCT_LINKED_BIT_1 = 3,
    WORK_STRUCT_STATIC_BIT_1 = 4,
    WORK_STRUCT_COLOR_SHIFT_1 = 5,
    WORK_STRUCT_COLOR_BITS_1 = 4,
    WORK_STRUCT_PENDING_1 = 1,
    WORK_STRUCT_DELAYED_1 = 2,
    WORK_STRUCT_PWQ_1 = 4,
    WORK_STRUCT_LINKED_1 = 8,
    WORK_STRUCT_STATIC_1 = 16,
    WORK_NR_COLORS_1 = 15,
    WORK_NO_COLOR_1 = 15,
    WORK_CPU_UNBOUND_1 = 8192,
    WORK_STRUCT_FLAG_BITS_1 = 9,
    WORK_OFFQ_FLAG_BASE_1 = 5,
    __WORK_OFFQ_CANCELING_1 = 5,
    WORK_OFFQ_CANCELING_1 = 32,
    WORK_OFFQ_FLAG_BITS_1 = 1,
    WORK_OFFQ_POOL_SHIFT_1 = 6,
    WORK_OFFQ_LEFT_1 = 58,
    WORK_OFFQ_POOL_BITS_1 = 31,
    WORK_OFFQ_POOL_NONE_1 = 2147483647,
    WORK_STRUCT_FLAG_MASK_1 = 511,
    WORK_STRUCT_WQ_DATA_MASK_1 = -512,
    WORK_STRUCT_NO_POOL_1 = 137438953408,
    WORK_BUSY_PENDING_1 = 1,
    WORK_BUSY_RUNNING_1 = 2,
    WORKER_DESC_LEN_1 = 24
};

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/types.h"
typedef __u16 __sum16;

#line 215  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct skb_frag_struct;

#line 215  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
typedef struct skb_frag_struct skb_frag_t;

#line 216  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct __anonstruct_page_3035 {
   struct page *p ;
};

#line 216  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct skb_frag_struct {
   struct __anonstruct_page_3035 page ;
   __u32 page_offset ;
   __u32 size ;
};

#line 249  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct skb_shared_hwtstamps {
   ktime_t hwtstamp ;
};

#line 319  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct skb_shared_info {
   unsigned char nr_frags ;
   __u8 tx_flags ;
   unsigned short gso_size ;
   unsigned short gso_segs ;
   unsigned short gso_type ;
   struct sk_buff *frag_list ;
   struct skb_shared_hwtstamps hwtstamps ;
   u32 tskey ;
   __be32 ip6_frag_id ;
   atomic_t dataref ;
   void *destructor_arg ;
   skb_frag_t frags[17U] ;
};

#line 2893  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
enum skb_free_reason {
    SKB_REASON_CONSUMED = 0,
    SKB_REASON_DROPPED = 1
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/inet_timewait_sock.h"
struct tcphdr {
   __be16 source ;
   __be16 dest ;
   __be32 seq ;
   __be32 ack_seq ;
   __u16 __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) res1 : 4 ;
   __u16 __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) doff : 4 ;
   __u16 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) fin : 1 ;
   __u16 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) syn : 1 ;
   __u16 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) rst : 1 ;
   __u16 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) psh : 1 ;
   __u16 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ack : 1 ;
   __u16 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) urg : 1 ;
   __u16 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ece : 1 ;
   __u16 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) cwr : 1 ;
   __be16 window ;
   __sum16 check ;
   __be16 urg_ptr ;
};

#line 193  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/qp.h"
struct mlx5_wqe_ctrl_seg {
   __be32 opmod_idx_opcode ;
   __be32 qpn_ds ;
   u8 signature ;
   u8 rsvd[2U] ;
   u8 fm_ce_se ;
   __be32 imm ;
};

#line 209  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/qp.h"
struct mlx5_wqe_eth_seg {
   u8 rsvd0[4U] ;
   u8 cs_flags ;
   u8 rsvd1 ;
   __be16 mss ;
   __be32 rsvd2 ;
   __be16 inline_hdr_sz ;
   u8 inline_hdr_start[2U] ;
};

#line 241  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en.h"
struct mlx5e_tx_skb_cb {
   u32 num_bytes ;
   u8 num_wqebbs ;
   u8 num_dma ;
};

#line 413  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en.h"
struct mlx5e_tx_wqe {
   struct mlx5_wqe_ctrl_seg ctrl ;
   struct mlx5_wqe_eth_seg eth ;
};

#line 90  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mmzone.h"
struct free_area {
   struct list_head free_list[6U] ;
   unsigned long nr_free ;
};

#line 96 
struct pglist_data;

#line 97  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mmzone.h"
struct zone_padding {
   char x[0U] ;
};

#line 202  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mmzone.h"
struct zone_reclaim_stat {
   unsigned long recent_rotated[2U] ;
   unsigned long recent_scanned[2U] ;
};

#line 215 
struct zone;

#line 215  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mmzone.h"
struct lruvec {
   struct list_head lists[5U] ;
   struct zone_reclaim_stat reclaim_stat ;
   struct zone *zone ;
};

#line 247  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mmzone.h"
struct per_cpu_pages {
   int count ;
   int high ;
   int batch ;
   struct list_head lists[3U] ;
};

#line 260  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mmzone.h"
struct per_cpu_pageset {
   struct per_cpu_pages pcp ;
   s8 expire ;
   s8 stat_threshold ;
   s8 vm_stat_diff[39U] ;
};

#line 270 
enum zone_type {
    ZONE_DMA = 0,
    ZONE_DMA32 = 1,
    ZONE_NORMAL = 2,
    ZONE_MOVABLE = 3,
    __MAX_NR_ZONES = 4
};

#line 278  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mmzone.h"
struct zone {
   unsigned long watermark[3U] ;
   long lowmem_reserve[4U] ;
   int node ;
   unsigned int inactive_ratio ;
   struct pglist_data *zone_pgdat ;
   struct per_cpu_pageset *pageset ;
   unsigned long dirty_balance_reserve ;
   unsigned long min_unmapped_pages ;
   unsigned long min_slab_pages ;
   unsigned long zone_start_pfn ;
   unsigned long managed_pages ;
   unsigned long spanned_pages ;
   unsigned long present_pages ;
   char const *name ;
   int nr_migrate_reserve_block ;
   unsigned long nr_isolate_pageblock ;
   seqlock_t span_seqlock ;
   wait_queue_head_t *wait_table ;
   unsigned long wait_table_hash_nr_entries ;
   unsigned long wait_table_bits ;
   struct zone_padding _pad1_ ;
   struct free_area free_area[11U] ;
   unsigned long flags ;
   spinlock_t lock ;
   struct zone_padding _pad2_ ;
   spinlock_t lru_lock ;
   struct lruvec lruvec ;
   atomic_long_t inactive_age ;
   unsigned long percpu_drift_mark ;
   unsigned long compact_cached_free_pfn ;
   unsigned long compact_cached_migrate_pfn[2U] ;
   unsigned int compact_considered ;
   unsigned int compact_defer_shift ;
   int compact_order_failed ;
   bool compact_blockskip_flush ;
   struct zone_padding _pad3_ ;
   atomic_long_t vm_stat[39U] ;
};

#line 567  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mmzone.h"
struct zonelist_cache {
   unsigned short z_to_n[4096U] ;
   unsigned long fullzones[64U] ;
   unsigned long last_full_zap ;
};

#line 654  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mmzone.h"
struct zoneref {
   struct zone *zone ;
   int zone_idx ;
};

#line 667  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mmzone.h"
struct zonelist {
   struct zonelist_cache *zlcache_ptr ;
   struct zoneref _zonerefs[4097U] ;
   struct zonelist_cache zlcache ;
};

#line 705  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mmzone.h"
struct pglist_data {
   struct zone node_zones[4U] ;
   struct zonelist node_zonelists[2U] ;
   int nr_zones ;
   spinlock_t node_size_lock ;
   unsigned long node_start_pfn ;
   unsigned long node_present_pages ;
   unsigned long node_spanned_pages ;
   int node_id ;
   wait_queue_head_t kswapd_wait ;
   wait_queue_head_t pfmemalloc_wait ;
   struct task_struct *kswapd ;
   int kswapd_max_order ;
   enum zone_type classzone_idx ;
   spinlock_t numabalancing_migrate_lock ;
   unsigned long numabalancing_migrate_next_window ;
   unsigned long numabalancing_migrate_nr_pages ;
   unsigned long first_deferred_pfn ;
};

#line 773  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mmzone.h"
typedef struct pglist_data pg_data_t;

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/workqueue.h"
enum ldv_11630 {
    WORK_STRUCT_PENDING_BIT_2 = 0,
    WORK_STRUCT_DELAYED_BIT_2 = 1,
    WORK_STRUCT_PWQ_BIT_2 = 2,
    WORK_STRUCT_LINKED_BIT_2 = 3,
    WORK_STRUCT_STATIC_BIT_2 = 4,
    WORK_STRUCT_COLOR_SHIFT_2 = 5,
    WORK_STRUCT_COLOR_BITS_2 = 4,
    WORK_STRUCT_PENDING_2 = 1,
    WORK_STRUCT_DELAYED_2 = 2,
    WORK_STRUCT_PWQ_2 = 4,
    WORK_STRUCT_LINKED_2 = 8,
    WORK_STRUCT_STATIC_2 = 16,
    WORK_NR_COLORS_2 = 15,
    WORK_NO_COLOR_2 = 15,
    WORK_CPU_UNBOUND_2 = 8192,
    WORK_STRUCT_FLAG_BITS_2 = 9,
    WORK_OFFQ_FLAG_BASE_2 = 5,
    __WORK_OFFQ_CANCELING_2 = 5,
    WORK_OFFQ_CANCELING_2 = 32,
    WORK_OFFQ_FLAG_BITS_2 = 1,
    WORK_OFFQ_POOL_SHIFT_2 = 6,
    WORK_OFFQ_LEFT_2 = 58,
    WORK_OFFQ_POOL_BITS_2 = 31,
    WORK_OFFQ_POOL_NONE_2 = 2147483647,
    WORK_STRUCT_FLAG_MASK_2 = 511,
    WORK_STRUCT_WQ_DATA_MASK_2 = -512,
    WORK_STRUCT_NO_POOL_2 = 137438953408,
    WORK_BUSY_PENDING_2 = 1,
    WORK_BUSY_RUNNING_2 = 2,
    WORKER_DESC_LEN_2 = 24
};

#line 99  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.h"
struct mlx5_pages_req {
   struct mlx5_core_dev *dev ;
   u16 func_id ;
   s32 npages ;
   struct work_struct work ;
};

#line 58  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/pagealloc.c"
struct fw_page {
   struct rb_node rb_node ;
   u64 addr ;
   struct page *page ;
   u16 func_id ;
   unsigned long bitmask ;
   struct list_head list ;
   unsigned int free_count ;
};

#line 68  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/pagealloc.c"
struct mlx5_query_pages_inbox {
   struct mlx5_inbox_hdr hdr ;
   u8 rsvd[8U] ;
};

#line 73  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/pagealloc.c"
struct mlx5_query_pages_outbox {
   struct mlx5_outbox_hdr hdr ;
   __be16 rsvd ;
   __be16 func_id ;
   __be32 num_pages ;
};

#line 80  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/pagealloc.c"
struct mlx5_manage_pages_inbox {
   struct mlx5_inbox_hdr hdr ;
   __be16 rsvd ;
   __be16 func_id ;
   __be32 num_entries ;
   __be64 pas[0U] ;
};

#line 88  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/pagealloc.c"
struct mlx5_manage_pages_outbox {
   struct mlx5_outbox_hdr hdr ;
   __be32 num_entries ;
   u8 rsvd[4U] ;
   __be64 pas[0U] ;
};

#line 30  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/slab.h"
enum irqreturn {
    IRQ_NONE = 0,
    IRQ_HANDLED = 1,
    IRQ_WAKE_THREAD = 2
};

#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/irqreturn.h"
typedef enum irqreturn irqreturn_t;

#line 848  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/device.h"
struct mlx5_create_eq_mbox_in {
   struct mlx5_inbox_hdr hdr ;
   u8 rsvd0[3U] ;
   u8 input_eqn ;
   u8 rsvd1[4U] ;
   struct mlx5_eq_context ctx ;
   u8 rsvd2[8U] ;
   __be64 events_mask ;
   u8 rsvd3[176U] ;
   __be64 pas[0U] ;
};

#line 860  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/device.h"
struct mlx5_create_eq_mbox_out {
   struct mlx5_outbox_hdr hdr ;
   u8 rsvd0[3U] ;
   u8 eq_number ;
   u8 rsvd1[4U] ;
};

#line 867  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/device.h"
struct mlx5_destroy_eq_mbox_in {
   struct mlx5_inbox_hdr hdr ;
   u8 rsvd0[3U] ;
   u8 eqn ;
   u8 rsvd1[4U] ;
};

#line 874  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/device.h"
struct mlx5_destroy_eq_mbox_out {
   struct mlx5_outbox_hdr hdr ;
   u8 rsvd[8U] ;
};

#line 893  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/device.h"
struct mlx5_query_eq_mbox_in {
   struct mlx5_inbox_hdr hdr ;
   u8 rsvd0[3U] ;
   u8 eqn ;
   u8 rsvd1[4U] ;
};

#line 932  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/device.h"
struct mlx5_query_special_ctxs_mbox_in {
   struct mlx5_inbox_hdr hdr ;
   u8 rsvd[8U] ;
};

#line 937  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/device.h"
struct mlx5_query_special_ctxs_mbox_out {
   struct mlx5_outbox_hdr hdr ;
   __be32 dump_fill_mkey ;
   __be32 reserved_lkey ;
};

#line 961  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/device.h"
struct mlx5_destroy_mkey_mbox_in {
   struct mlx5_inbox_hdr hdr ;
   __be32 mkey ;
   u8 rsvd[4U] ;
};

#line 967  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/device.h"
struct mlx5_destroy_mkey_mbox_out {
   struct mlx5_outbox_hdr hdr ;
   u8 rsvd[8U] ;
};

#line 972  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/device.h"
struct mlx5_query_mkey_mbox_in {
   struct mlx5_inbox_hdr hdr ;
   __be32 mkey ;
};

#line 977  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/device.h"
struct mlx5_query_mkey_mbox_out {
   struct mlx5_outbox_hdr hdr ;
   __be64 pas[0U] ;
};

#line 1035  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/device.h"
struct mlx5_allocate_psv_in {
   struct mlx5_inbox_hdr hdr ;
   __be32 npsv_pd ;
   __be32 rsvd_psv0 ;
};

#line 1043  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/device.h"
struct mlx5_allocate_psv_out {
   struct mlx5_outbox_hdr hdr ;
   u8 rsvd[8U] ;
   __be32 psv_idx[4U] ;
};

#line 1049  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/device.h"
struct mlx5_destroy_psv_in {
   struct mlx5_inbox_hdr hdr ;
   __be32 psv_number ;
   u8 rsvd[4U] ;
};

#line 1055  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/device.h"
struct mlx5_destroy_psv_out {
   struct mlx5_outbox_hdr hdr ;
   u8 rsvd[8U] ;
};

#line 380  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/device.h"
struct mlx5_cmd_init_hca_mbox_in {
   struct mlx5_inbox_hdr hdr ;
   u8 rsvd0[2U] ;
   __be16 profile ;
   u8 rsvd1[4U] ;
};

#line 387  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/device.h"
struct mlx5_cmd_init_hca_mbox_out {
   struct mlx5_outbox_hdr hdr ;
   u8 rsvd[8U] ;
};

#line 392  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/device.h"
struct mlx5_cmd_teardown_hca_mbox_in {
   struct mlx5_inbox_hdr hdr ;
   u8 rsvd0[2U] ;
   __be16 profile ;
   u8 rsvd1[4U] ;
};

#line 399  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/device.h"
struct mlx5_cmd_teardown_hca_mbox_out {
   struct mlx5_outbox_hdr hdr ;
   u8 rsvd[8U] ;
};

#line 1002  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/device.h"
struct mlx5_mad_ifc_mbox_in {
   struct mlx5_inbox_hdr hdr ;
   __be16 remote_lid ;
   u8 rsvd0 ;
   u8 port ;
   u8 rsvd1[4U] ;
   u8 data[256U] ;
};

#line 1011  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/device.h"
struct mlx5_mad_ifc_mbox_out {
   struct mlx5_outbox_hdr hdr ;
   u8 rsvd[8U] ;
   u8 data[256U] ;
};

#line 152  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/driver.h"
enum mlx5_port_status {
    MLX5_PORT_UP = 2,
    MLX5_PORT_DOWN = 4
};

#line 55  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_ethtool.c"
struct __anonstruct_ptys2ethtool_table_5411 {
   u32 supported ;
   u32 advertised ;
   u32 speed ;
};

#line 890  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
enum pkt_hash_types {
    PKT_HASH_TYPE_NONE = 0,
    PKT_HASH_TYPE_L2 = 1,
    PKT_HASH_TYPE_L3 = 2,
    PKT_HASH_TYPE_L4 = 3
};

#line 3470  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct iphdr {
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) ihl : 4 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) version : 4 ;
   __u8 tos ;
   __be16 tot_len ;
   __be16 id ;
   __be16 frag_off ;
   __u8 ttl ;
   __u8 protocol ;
   __sum16 check ;
   __be32 saddr ;
   __be32 daddr ;
};

#line 106  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ipv6.h"
struct ipv6hdr {
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) priority : 4 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) version : 4 ;
   __u8 flow_lbl[3U] ;
   __be16 payload_len ;
   __u8 nexthdr ;
   __u8 hop_limit ;
   struct in6_addr saddr ;
   struct in6_addr daddr ;
};

#line 331  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
enum gro_result {
    GRO_MERGED = 0,
    GRO_MERGED_FREE = 1,
    GRO_HELD = 2,
    GRO_NORMAL = 3,
    GRO_DROP = 4
};

#line 339  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
typedef enum gro_result gro_result_t;

#line 58  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/rdma/ib_verbs.h"
struct __anonstruct_global_6272 {
   __be64 subnet_prefix ;
   __be64 interface_id ;
};

#line 58  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/rdma/ib_verbs.h"
union ib_gid {
   u8 raw[16U] ;
   struct __anonstruct_global_6272 global ;
};

#line 87  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.h"
struct mlx5_attach_mcg_mbox_in {
   struct mlx5_inbox_hdr hdr ;
   __be32 qpn ;
   __be32 rsvd ;
   u8 gid[16U] ;
};

#line 46  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/mcg.c"
struct mlx5_attach_mcg_mbox_out {
   struct mlx5_outbox_hdr hdr ;
   u8 rsvf[8U] ;
};

#line 51  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/mcg.c"
struct mlx5_detach_mcg_mbox_in {
   struct mlx5_inbox_hdr hdr ;
   __be32 qpn ;
   __be32 rsvd ;
   u8 gid[16U] ;
};

#line 58  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/mcg.c"
struct mlx5_detach_mcg_mbox_out {
   struct mlx5_outbox_hdr hdr ;
   u8 rsvf[8U] ;
};

#line 92  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.h"
struct mlx5_alloc_uar_mbox_in {
   struct mlx5_inbox_hdr hdr ;
   u8 rsvd[8U] ;
};

#line 49  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/uar.c"
struct mlx5_alloc_uar_mbox_out {
   struct mlx5_outbox_hdr hdr ;
   __be32 uarn ;
   u8 rsvd[4U] ;
};

#line 55  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/uar.c"
struct mlx5_free_uar_mbox_in {
   struct mlx5_inbox_hdr hdr ;
   __be32 uarn ;
   u8 rsvd[4U] ;
};

#line 61  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/uar.c"
struct mlx5_free_uar_mbox_out {
   struct mlx5_outbox_hdr hdr ;
   u8 rsvd[8U] ;
};

#line 1017  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/device.h"
struct mlx5_access_reg_mbox_in {
   struct mlx5_inbox_hdr hdr ;
   u8 rsvd0[2U] ;
   __be16 register_id ;
   __be32 arg ;
   __be32 data[0U] ;
};

#line 1025  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/device.h"
struct mlx5_access_reg_mbox_out {
   struct mlx5_outbox_hdr hdr ;
   u8 rsvd[8U] ;
   __be32 data[0U] ;
};

#line 77  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/port.c"
struct mlx5_reg_pcap {
   u8 rsvd0 ;
   u8 port_num ;
   u8 rsvd1[2U] ;
   __be32 caps_127_96 ;
   __be32 caps_95_64 ;
   __be32 caps_63_32 ;
   __be32 caps_31_0 ;
};

#line 767  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/device.h"
struct mlx5_create_cq_mbox_out {
   struct mlx5_outbox_hdr hdr ;
   __be32 cqn ;
   u8 rsvd0[4U] ;
};

#line 773  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/device.h"
struct mlx5_destroy_cq_mbox_in {
   struct mlx5_inbox_hdr hdr ;
   __be32 cqn ;
   u8 rsvd0[4U] ;
};

#line 779  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/device.h"
struct mlx5_destroy_cq_mbox_out {
   struct mlx5_outbox_hdr hdr ;
   u8 rsvd0[8U] ;
};

#line 784  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/device.h"
struct mlx5_query_cq_mbox_in {
   struct mlx5_inbox_hdr hdr ;
   __be32 cqn ;
   u8 rsvd0[4U] ;
};

#line 798  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/device.h"
struct mlx5_modify_cq_mbox_in {
   struct mlx5_inbox_hdr hdr ;
   __be32 cqn ;
   __be32 field_select ;
   struct mlx5_cq_context ctx ;
   u8 rsvd[192U] ;
   __be64 pas[0U] ;
};

#line 807  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/device.h"
struct mlx5_modify_cq_mbox_out {
   struct mlx5_outbox_hdr hdr ;
   u8 rsvd[8U] ;
};

#line 253  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/rdma/ib_verbs.h"
enum ib_port_state {
    IB_PORT_NOP = 0,
    IB_PORT_DOWN = 1,
    IB_PORT_INIT = 2,
    IB_PORT_ARMED = 3,
    IB_PORT_ACTIVE = 4,
    IB_PORT_ACTIVE_DEFER = 5
};

#line 556  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/driver.h"
enum port_state_policy {
    MLX5_AAA_000 = 0
};

#line 560 
enum phy_port_state {
    MLX5_AAA_111 = 0
};

#line 564  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/driver.h"
struct mlx5_hca_vport_context {
   u32 field_select ;
   bool sm_virt_aware ;
   bool has_smi ;
   bool has_raw ;
   enum port_state_policy policy ;
   enum phy_port_state phys_state ;
   enum ib_port_state vport_state ;
   u8 port_physical_state ;
   u64 sys_image_guid ;
   u64 port_guid ;
   u64 node_guid ;
   u32 cap_mask1 ;
   u32 cap_mask1_perm ;
   u32 cap_mask2 ;
   u32 cap_mask2_perm ;
   u16 lid ;
   u8 init_type_reply ;
   u8 lmc ;
   u8 subnet_timeout ;
   u16 sm_lid ;
   u8 sm_sl ;
   u16 qkey_violation_counter ;
   u16 pkey_violation_counter ;
   bool grh_required ;
};

#line 62  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memory.h"
struct ldv_list_element {
   void *data ;
   struct ldv_list_element *next ;
};

#line 26  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memlist.h"
typedef struct ldv_list_element *ldv_list_ptr;

#line 41  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.h"
struct device_private {
   void *driver_data ;
};

#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef short s16;

#line 54  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kthread.h"
struct kthread_work;

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kthread.h"
struct kthread_worker {
   spinlock_t lock ;
   struct list_head work_list ;
   struct task_struct *task ;
   struct kthread_work *current_work ;
};

#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kthread.h"
struct kthread_work {
   struct list_head node ;
   void (*func)(struct kthread_work *) ;
   struct kthread_worker *worker ;
};

#line 380  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/scatterlist.h"
struct dma_chan;

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spi/spi.h"
struct spi_master;

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spi/spi.h"
struct spi_device {
   struct device dev ;
   struct spi_master *master ;
   u32 max_speed_hz ;
   u8 chip_select ;
   u8 bits_per_word ;
   u16 mode ;
   int irq ;
   void *controller_state ;
   void *controller_data ;
   char modalias[32U] ;
   int cs_gpio ;
};

#line 151 
struct spi_message;

#line 152 
struct spi_transfer;

#line 205  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spi/spi.h"
struct spi_master {
   struct device dev ;
   struct list_head list ;
   s16 bus_num ;
   u16 num_chipselect ;
   u16 dma_alignment ;
   u16 mode_bits ;
   u32 bits_per_word_mask ;
   u32 min_speed_hz ;
   u32 max_speed_hz ;
   u16 flags ;
   spinlock_t bus_lock_spinlock ;
   struct mutex bus_lock_mutex ;
   bool bus_lock_flag ;
   int (*setup)(struct spi_device *) ;
   int (*transfer)(struct spi_device *, struct spi_message *) ;
   void (*cleanup)(struct spi_device *) ;
   bool (*can_dma)(struct spi_master *, struct spi_device *, struct spi_transfer *) ;
   bool queued ;
   struct kthread_worker kworker ;
   struct task_struct *kworker_task ;
   struct kthread_work pump_messages ;
   spinlock_t queue_lock ;
   struct list_head queue ;
   struct spi_message *cur_msg ;
   bool idling ;
   bool busy ;
   bool running ;
   bool rt ;
   bool auto_runtime_pm ;
   bool cur_msg_prepared ;
   bool cur_msg_mapped ;
   struct completion xfer_completion ;
   size_t max_dma_len ;
   int (*prepare_transfer_hardware)(struct spi_master *) ;
   int (*transfer_one_message)(struct spi_master *, struct spi_message *) ;
   int (*unprepare_transfer_hardware)(struct spi_master *) ;
   int (*prepare_message)(struct spi_master *, struct spi_message *) ;
   int (*unprepare_message)(struct spi_master *, struct spi_message *) ;
   void (*set_cs)(struct spi_device *, bool ) ;
   int (*transfer_one)(struct spi_master *, struct spi_device *, struct spi_transfer *) ;
   void (*handle_err)(struct spi_master *, struct spi_message *) ;
   int *cs_gpios ;
   struct dma_chan *dma_tx ;
   struct dma_chan *dma_rx ;
   void *dummy_rx ;
   void *dummy_tx ;
};

#line 506  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spi/spi.h"
struct spi_transfer {
   void const *tx_buf ;
   void *rx_buf ;
   unsigned int len ;
   dma_addr_t tx_dma ;
   dma_addr_t rx_dma ;
   struct sg_table tx_sg ;
   struct sg_table rx_sg ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) cs_change : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))) tx_nbits : 3 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))) rx_nbits : 3 ;
   u8 bits_per_word ;
   u16 delay_usecs ;
   u32 speed_hz ;
   struct list_head transfer_list ;
};

#line 630  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spi/spi.h"
struct spi_message {
   struct list_head transfers ;
   struct spi_device *spi ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_dma_mapped : 1 ;
   void (*complete)(void *) ;
   void *context ;
   unsigned int frame_length ;
   unsigned int actual_length ;
   int status ;
   struct list_head queue ;
   void *state ;
};

#line 21  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/thread.h"
typedef unsigned long pthread_t;

#line 22  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/thread.h"
union pthread_attr_t {
   char __size[56U] ;
   long __align ;
};

#line 29  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/thread.h"
typedef union pthread_attr_t pthread_attr_t;

#line 3835  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct ldv_struct_character_driver_scenario_17 {
   struct file_operations *arg0 ;
   int signal_pending ;
};

#line 22  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/emg/environment_model.c"
struct ldv_struct_free_irq_7 {
   int arg0 ;
   int signal_pending ;
};

#line 27  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/emg/environment_model.c"
struct ldv_struct_interrupt_scenario_22 {
   enum irqreturn (*arg2)(int , void *) ;
   enum irqreturn (*arg1)(int , void *) ;
   void *arg3 ;
   int arg0 ;
   int signal_pending ;
};

#line 35  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/emg/environment_model.c"
struct ldv_struct_pci_scenario_23 {
   struct pci_driver *arg0 ;
   int signal_pending ;
};

#line 40  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/emg/environment_model.c"
struct ldv_struct_random_allocationless_scenario_24 {
   struct net_device *arg0 ;
   int signal_pending ;
};

#line 45  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/emg/environment_model.c"
struct ldv_struct_timer_scenario_18 {
   struct timer_list *arg0 ;
   int signal_pending ;
};
unsigned short __builtin_bswap16(unsigned short);

unsigned int __builtin_bswap32(unsigned int);

unsigned long __builtin_bswap64(unsigned long);


#line 7  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/fvtp/.tmp_cmd.c"
void ldv_inline_asm(void);


#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/export.h"
extern struct module __this_module;


#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/bitops.h"
__inline static void set_bit(long nr, unsigned long volatile *addr)
{
  
#line 74 
  if (0 != 0) 
#line 76 
              ldv_inline_asm(); else 
#line 79 
                                     ldv_inline_asm();
  
#line 80 
  return;
}


#line 308  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/bitops.h"
__inline static int constant_test_bit(long nr, unsigned long const volatile *addr)
{
  int __retres;
  
#line 311 
  __retres = ((*(addr + (nr >> 6)) >> (nr & 63L)) & 1UL) != 0UL;
  
#line 311 
  return __retres;
}


#line 314  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/bitops.h"
__inline static int variable_test_bit(long nr, unsigned long const volatile *addr)
{
  int oldbit;
  
#line 317 
  ldv_inline_asm();
  
#line 323 
  return oldbit;
}


#line 437  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/bitops.h"
__inline static int fls(int x)
{
  int __retres;
  int r;
  
#line 440 
  ldv_inline_asm();
  
#line 464 
  __retres = r + 1;
  
#line 464 
  return __retres;
}


#line 479  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/bitops.h"
__inline static int fls64(__u64 x)
{
  int __retres;
  
#line 481 
  int bitpos = -1;
  
#line 482 
  ldv_inline_asm();
  
#line 490 
  __retres = bitpos + 1;
  
#line 490 
  return __retres;
}


#line 42  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/bitops/find.h"
unsigned long find_first_bit(unsigned long const *, unsigned long);


#line 46  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/swab.h"
__inline static __u16 __fswab16(__u16 val)
{
  __u16 tmp;
  
#line 49 
  tmp = __builtin_bswap16((unsigned short)((int)val));
  
#line 49 
  return tmp;
}


#line 57  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/swab.h"
__inline static __u32 __fswab32(__u32 val)
{
  __u32 tmp;
  
#line 60 
  tmp = __builtin_bswap32(val);
  
#line 60 
  return tmp;
}


#line 68  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/swab.h"
__inline static __u64 __fswab64(__u64 val)
{
  __u64 tmp;
  
#line 71 
  tmp = (__u64)__builtin_bswap64((unsigned long)val);
  
#line 71 
  return tmp;
}


#line 174  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bitops.h"
__inline static unsigned int fls_long(unsigned long l)
{
  unsigned int __retres;
  int tmp_0;
  
#line 178 
  tmp_0 = fls64((unsigned long long)l);
  
#line 178 
  __retres = (unsigned int)tmp_0;
  
#line 178 
  return __retres;
}


#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/log2.h"
int ____ilog2_NaN(void);


#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/log2.h"
__inline static int __ilog2_u32(u32 n)
{
  int __retres;
  int tmp;
  
#line 34 
  tmp = fls((int)n);
  
#line 34 
  __retres = tmp + -1;
  
#line 34 
  return __retres;
}


#line 61  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/log2.h"
__inline static unsigned long __roundup_pow_of_two(unsigned long n)
{
  unsigned long __retres;
  unsigned int tmp;
  
#line 63 
  tmp = fls_long(n + 18446744073709551615UL);
  
#line 63 
  __retres = 1UL << tmp;
  
#line 63 
  return __retres;
}


#line 142  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/printk.h"
int printk(char const * , ...);


#line 45  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dynamic_debug.h"
void __dynamic_pr_debug(struct _ddebug *, char const * , ...);


#line 248  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernel.h"
void __might_fault(char const *, int);


#line 405 
int snprintf(char *, size_t, char const * , ...);


#line 418 
int sscanf(char const *, char const * , ...);


#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list.h"
__inline static void INIT_LIST_HEAD(struct list_head *list)
{
  
#line 27 
  list->next = list;
  
#line 28 
  list->prev = list;
  
#line 29 
  return;
}


#line 48 
void __list_add(struct list_head *, struct list_head *, struct list_head *);


#line 75  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list.h"
__inline static void list_add_tail(struct list_head *new, struct list_head *head)
{
  
#line 77 
  __list_add(new,head->prev,head);
  
#line 78 
  return;
}


#line 113 
void list_del(struct list_head *);


#line 187  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list.h"
__inline static int list_empty(struct list_head const *head)
{
  int __retres;
  
#line 189 
  __retres = (struct list_head const *)head->next == head;
  
#line 189 
  return __retres;
}


#line 87  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/percpu.h"
void __bad_percpu_size(void);


#line 12  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/current.h"
__inline static struct task_struct *get_current(void)
{
  struct task_struct *tmp;
  {
    struct task_struct *pfo_ret__;
    
#line 14 
    switch (8UL) {
      case (unsigned long)1: 
#line 14 
      ;
      
#line 15 
      ldv_inline_asm();
      
#line 14 
      goto ldv_3477;
      case (unsigned long)2: 
#line 14 
      ;
      
#line 15 
      ldv_inline_asm();
      
#line 14 
      goto ldv_3477;
      case (unsigned long)4: 
#line 14 
      ;
      
#line 15 
      ldv_inline_asm();
      
#line 14 
      goto ldv_3477;
      case (unsigned long)8: 
#line 14 
      ;
      
#line 15 
      ldv_inline_asm();
      
#line 14 
      goto ldv_3477;
      default: 
#line 14 
      ;
      
#line 14 
      __bad_percpu_size();
    }
    ldv_3477: 
#line 14 
    ;
    
#line 14 
    tmp = pfo_ret__;
  }
  
#line 14 
  return tmp;
}


#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/string_64.h"
void *memcpy(void *, void const *, size_t);


#line 56 
void *memset(void *, int, size_t);


#line 67 
int strcmp(char const *, char const *);


#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/err.h"
static void *ERR_PTR(long error);


#line 32 
static long PTR_ERR(void const *ptr);


#line 41 
static bool IS_ERR(void const *ptr);


#line 280  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockdep.h"
void lockdep_init_map(struct lockdep_map *, char const *, struct lock_class_key *, int);


#line 93  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
void __raw_spin_lock_init(raw_spinlock_t *, char const *, struct lock_class_key *);


#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock_api_smp.h"
void _raw_spin_lock(raw_spinlock_t *);


#line 31 
void _raw_spin_lock_irq(raw_spinlock_t *);


#line 41 
void _raw_spin_unlock(raw_spinlock_t *);


#line 43 
void _raw_spin_unlock_irq(raw_spinlock_t *);


#line 45 
void _raw_spin_unlock_irqrestore(raw_spinlock_t *, unsigned long);


#line 299  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
__inline static raw_spinlock_t *spinlock_check(spinlock_t *lock)
{
  raw_spinlock_t *__retres;
  
#line 301 
  __retres = & lock->__anonCompField_spinlock_18.rlock;
  
#line 301 
  return __retres;
}


#line 310  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_lock(spinlock_t *lock)
{
  
#line 312 
  _raw_spin_lock(& lock->__anonCompField_spinlock_18.rlock);
  
#line 313 
  return;
}


#line 346 
static void ldv_spin_lock_59(spinlock_t *lock);


#line 340  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_lock_irq(spinlock_t *lock)
{
  
#line 342 
  _raw_spin_lock_irq(& lock->__anonCompField_spinlock_18.rlock);
  
#line 343 
  return;
}


#line 366 
static void ldv_spin_lock_irq_66(spinlock_t *lock);


#line 370 
static void ldv_spin_lock_irq_76(spinlock_t *lock);


#line 371  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_unlock(spinlock_t *lock)
{
  
#line 373 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_18.rlock);
  
#line 374 
  return;
}


#line 403 
static void ldv_spin_unlock_60(spinlock_t *lock);


#line 417  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_unlock_irq(spinlock_t *lock)
{
  
#line 419 
  _raw_spin_unlock_irq(& lock->__anonCompField_spinlock_18.rlock);
  
#line 420 
  return;
}


#line 433 
static void ldv_spin_unlock_irq_67(spinlock_t *lock);


#line 437 
static void ldv_spin_unlock_irq_77(spinlock_t *lock);


#line 438  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_unlock_irqrestore(spinlock_t *lock, unsigned long flags)
{
  {
    unsigned long __dummy;
    unsigned long __dummy2;
    
  }
  
#line 440 
  _raw_spin_unlock_irqrestore(& lock->__anonCompField_spinlock_18.rlock,flags);
  
#line 441 
  return;
}


#line 470 
static void ldv_spin_unlock_irqrestore_62(spinlock_t *lock, unsigned long flags);


#line 474 
static void ldv_spin_unlock_irqrestore_64(spinlock_t *lock, unsigned long flags);


#line 478 
static void ldv_spin_unlock_irqrestore_73(spinlock_t *lock, unsigned long flags);


#line 482 
static void ldv_spin_unlock_irqrestore_75(spinlock_t *lock, unsigned long flags);


#line 43  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_cmd.c.aux"
void __ldv_spin_lock(spinlock_t *);


#line 66 
static void ldv___ldv_spin_lock_61(spinlock_t *ldv_func_arg1);


#line 70 
static void ldv___ldv_spin_lock_63(spinlock_t *ldv_func_arg1);


#line 74 
static void ldv___ldv_spin_lock_72(spinlock_t *ldv_func_arg1);


#line 78 
static void ldv___ldv_spin_lock_74(spinlock_t *ldv_func_arg1);


#line 86 
void ldv_spin_model_lock(char *);


#line 87 
void ldv_spin_model_unlock(char *);


#line 27  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/err.h"
long ldv_is_err(void const *ptr);


#line 29 
void *ldv_err_ptr(long error);


#line 30 
long ldv_ptr_err(void const *ptr);


#line 23  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/slab.h"
void *ldv_kzalloc(size_t size, gfp_t flags);


#line 24 
void *ldv_kmalloc(size_t size, gfp_t flags);


#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/wait.h"
void __init_waitqueue_head(wait_queue_head_t *, char const *, struct lock_class_key *);


#line 73  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/completion.h"
__inline static void init_completion(struct completion *x)
{
  
#line 75 
  x->done = 0U;
  {
    struct lock_class_key __key;
    
#line 76 
    __init_waitqueue_head(& x->wait,"&x->wait",& __key);
  }
  
#line 78 
  return;
}


#line 91 
void wait_for_completion(struct completion *);


#line 95 
unsigned long wait_for_completion_timeout(struct completion *, unsigned long);


#line 106 
void complete(struct completion *);


#line 78  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/jiffies.h"
extern unsigned long volatile jiffies;


#line 292 
unsigned long __msecs_to_jiffies(unsigned int const);


#line 299  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/jiffies.h"
__inline static unsigned long _msecs_to_jiffies(unsigned int const m)
{
  unsigned long __retres;
  
#line 301 
  __retres = (unsigned long)(((long)m + 3L) / 4L);
  
#line 301 
  return __retres;
}


#line 354  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/jiffies.h"
__inline static unsigned long msecs_to_jiffies(unsigned int const m)
{
  unsigned long __retres;
  
#line 356 
  if (0 != 0) {
    unsigned long tmp;
    
#line 357 
    if ((int)m < 0) {
      
#line 358 
      __retres = 4611686018427387902UL;
      
#line 358 
      goto return_label;
    }
    else ;
    
#line 359 
    tmp = _msecs_to_jiffies(m);
    
#line 359 
    __retres = tmp;
    
#line 359 
    goto return_label;
  }
  else {
    unsigned long tmp_0;
    
#line 361 
    tmp_0 = __msecs_to_jiffies(m);
    
#line 361 
    __retres = tmp_0;
    
#line 361 
    goto return_label;
  }
  return_label: 
#line 356 
                return __retres;
}


#line 161  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timekeeping.h"
ktime_t ktime_get(void);


#line 202  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timekeeping.h"
__inline static u64 ktime_get_ns(void)
{
  u64 __retres;
  ktime_t tmp;
  
#line 204 
  tmp = ktime_get();
  
#line 204 
  __retres = (unsigned long long)tmp.tv64;
  
#line 204 
  return __retres;
}


#line 181  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/workqueue.h"
void __init_work(struct work_struct *, int);


#line 361 
struct workqueue_struct *__alloc_workqueue_key(char const *, unsigned int, int, struct lock_class_key *, char const * , ...);


#line 421 
void destroy_workqueue(struct workqueue_struct *);


#line 436 
void flush_workqueue(struct workqueue_struct *);


#line 490 
static bool ldv_queue_work_65(struct workqueue_struct *wq, struct work_struct *work);


#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/iomap.h"
unsigned int ioread32be(void *);


#line 38 
void iowrite32be(u32, void *);


#line 87  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
__inline static char const *kobject_name(struct kobject const *kobj)
{
  char const *__retres;
  
#line 89 
  __retres = kobj->name;
  
#line 89 
  return __retres;
}


#line 833  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
__inline static char const *dev_name(struct device const *dev)
{
  char const *__retres;
  char const *tmp;
  
#line 836 
  if (dev->init_name != (char const *)0) {
    
#line 837 
    __retres = dev->init_name;
    
#line 837 
    goto return_label;
  }
  else ;
  
#line 839 
  tmp = kobject_name(& dev->kobj);
  
#line 839 
  __retres = tmp;
  return_label: 
#line 839 
                return __retres;
}


#line 1083 
void dev_err(struct device const *, char const * , ...);


#line 143  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/slab.h"
void kfree(void const *);


#line 418 
static void *kmalloc(size_t size, gfp_t flags);


#line 581 
static void *kzalloc(size_t size, gfp_t flags);


#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dmapool.h"
struct dma_pool *dma_pool_create(char const *, struct device *, size_t, size_t, size_t);


#line 22 
void dma_pool_destroy(struct dma_pool *);


#line 24 
void *dma_pool_alloc(struct dma_pool *, gfp_t, dma_addr_t *);


#line 27 
void dma_pool_free(struct dma_pool *, void *, dma_addr_t);


#line 131  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/dma-mapping.h"
void *dma_alloc_attrs(struct device *, size_t, dma_addr_t *, gfp_t, struct dma_attrs *);


#line 136 
void dma_free_attrs(struct device *, size_t, void *, dma_addr_t, struct dma_attrs *);


#line 183  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dma-mapping.h"
__inline static void *dma_zalloc_coherent(struct device *dev, size_t size, dma_addr_t *dma_handle, gfp_t flag)
{
  
#line 186 
  void *ret = dma_alloc_attrs(dev,size,dma_handle,flag | 32768U,(struct dma_attrs *)0);
  
#line 188 
  return ret;
}


#line 48  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/delay.h"
void usleep_range(unsigned long, unsigned long);


#line 650  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/uaccess.h"
unsigned long _copy_from_user(void *, void const *, unsigned int);


#line 652 
unsigned long _copy_to_user(void *, void const *, unsigned int);


#line 662 
void copy_from_user_overflow(void);


#line 664 
void copy_to_user_overflow(void);


#line 672 
void __copy_from_user_overflow(void);


#line 677 
void __copy_to_user_overflow(void);


#line 693  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/uaccess.h"
__inline static unsigned long copy_from_user(void *to, void const *from, unsigned long n)
{
  
#line 695 
  int sz = -1;
  
#line 697 
  __might_fault("./arch/x86/include/asm/uaccess.h",697);
  
#line 717 
  if ((long)(sz < 0) != 0L || (long)((unsigned long)sz >= n) != 0L) 
#line 718 
                                                                    n = _copy_from_user(to,from,(unsigned int)n);
  else 
    
#line 719 
    if (0 != 0) 
#line 720 
                copy_from_user_overflow(); else 
#line 722 
                                                __copy_from_user_overflow();
  
#line 724 
  return n;
}


#line 728  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/uaccess.h"
__inline static unsigned long copy_to_user(void *to, void const *from, unsigned long n)
{
  
#line 730 
  int sz = -1;
  
#line 732 
  __might_fault("./arch/x86/include/asm/uaccess.h",732);
  
#line 735 
  if ((long)(sz < 0) != 0L || (long)((unsigned long)sz >= n) != 0L) 
#line 736 
                                                                    n = _copy_to_user(to,from,(unsigned int)n);
  else 
    
#line 737 
    if (0 != 0) 
#line 738 
                copy_to_user_overflow(); else 
#line 740 
                                              __copy_to_user_overflow();
  
#line 742 
  return n;
}


#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/semaphore.h"
__inline static void sema_init(struct semaphore *sem, int val)
{
  struct lock_class_key __key;
  
#line 35 
  struct semaphore __constr_expr_26 = {.lock = {.raw_lock = {.val = {.counter = 0}}, .magic = 3735899821U, .owner_cpu = 4294967295U, .owner = (void *)(-1), .dep_map = {.key = (struct lock_class_key *)0, .class_cache = {(struct lock_class *)0, (struct lock_class *)0}, .name = "(*sem).lock", .cpu = 0, .ip = 0UL}}, .count = (unsigned int)val, .wait_list = {.next = & sem->wait_list, .prev = & sem->wait_list}};
  
#line 35 
  *sem = __constr_expr_26;
  
#line 36 
  lockdep_init_map(& sem->lock.dep_map,"semaphore->lock",& __key,0);
  
#line 37 
  return;
}


#line 39 
void down(struct semaphore *);


#line 44 
void up(struct semaphore *);


#line 615  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/driver.h"
struct dentry *mlx5_debugfs_root;


#line 632  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/driver.h"
__inline static u16 cmdif_rev(struct mlx5_core_dev *dev)
{
  u16 __retres;
  unsigned int tmp;
  
#line 634 
  tmp = ioread32be((void *)(& (dev->iseg)->cmdif_rev_fw_sub));
  
#line 634 
  __retres = (unsigned short)(tmp >> 16);
  
#line 634 
  return __retres;
}


#line 652 
int mlx5_cmd_init(struct mlx5_core_dev *dev);


#line 653 
void mlx5_cmd_cleanup(struct mlx5_core_dev *dev);


#line 654 
void mlx5_cmd_use_events(struct mlx5_core_dev *dev);


#line 655 
void mlx5_cmd_use_polling(struct mlx5_core_dev *dev);


#line 656 
int mlx5_cmd_status_to_err(struct mlx5_outbox_hdr *hdr);


#line 657 
int mlx5_cmd_status_to_err_v2(void *ptr);


#line 660 
int mlx5_cmd_exec(struct mlx5_core_dev *dev, void *in, int in_size, void *out, int out_size);


#line 662 
int mlx5_cmd_exec_cb(struct mlx5_core_dev *dev, void *in, int in_size, void *out, int out_size, void (*callback)(int , void *), void *context);


#line 724 
void mlx5_cmd_comp_handler(struct mlx5_core_dev *dev, unsigned long vector);


#line 778 
char const *mlx5_command_str(int command);


#line 779 
int mlx5_cmdif_debugfs_init(struct mlx5_core_dev *dev);


#line 780 
void mlx5_cmdif_debugfs_cleanup(struct mlx5_core_dev *dev);


#line 2812  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
int simple_open(struct inode *, struct file *);


#line 54  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/debugfs.h"
static struct dentry *ldv_debugfs_create_file_68(char const *ldv_func_arg1, umode_t ldv_func_arg2, struct dentry *ldv_func_arg3, void *ldv_func_arg4, struct file_operations const *ldv_func_arg5);


#line 58 
static struct dentry *ldv_debugfs_create_file_69(char const *ldv_func_arg1, umode_t ldv_func_arg2, struct dentry *ldv_func_arg3, void *ldv_func_arg4, struct file_operations const *ldv_func_arg5);


#line 62 
static struct dentry *ldv_debugfs_create_file_70(char const *ldv_func_arg1, umode_t ldv_func_arg2, struct dentry *ldv_func_arg3, void *ldv_func_arg4, struct file_operations const *ldv_func_arg5);


#line 66 
static struct dentry *ldv_debugfs_create_file_71(char const *ldv_func_arg1, umode_t ldv_func_arg2, struct dentry *ldv_func_arg3, void *ldv_func_arg4, struct file_operations const *ldv_func_arg5);


#line 74 
struct dentry *debugfs_create_dir(char const *, struct dentry *);


#line 85 
void debugfs_remove_recursive(struct dentry *);


#line 90 
struct dentry *debugfs_create_u8(char const *, umode_t, struct dentry *, u8 *);


#line 44  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.h"
int mlx5_core_debug_mask;


#line 78  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/cmd.c"
static struct mlx5_cmd_work_ent *alloc_cmd(struct mlx5_cmd *cmd, struct mlx5_cmd_msg *in, struct mlx5_cmd_msg *out, void *uout, int uout_size, void (*cbk)(int , void *), void *context, int page_queue)
{
  struct mlx5_cmd_work_ent *__retres;
  unsigned int tmp;
  struct mlx5_cmd_work_ent *ent;
  
#line 85 
  if (cbk != (void (*)(int , void *))0) 
#line 85 
                                        tmp = 32U; else 
#line 85 
                                                        tmp = 208U;
  
#line 85 
  gfp_t alloc_flags = tmp;
  
#line 88 
  ent = (struct mlx5_cmd_work_ent *)kzalloc(288UL,alloc_flags);
  
#line 89 
  if (ent == (struct mlx5_cmd_work_ent *)0) {
    struct mlx5_cmd_work_ent *tmp_1;
    
#line 90 
    tmp_1 = (struct mlx5_cmd_work_ent *)ERR_PTR(-12L);
    
#line 90 
    __retres = tmp_1;
    
#line 90 
    goto return_label;
  }
  else ;
  
#line 92 
  ent->in = in;
  
#line 93 
  ent->out = out;
  
#line 94 
  ent->uout = uout;
  
#line 95 
  ent->uout_size = uout_size;
  
#line 96 
  ent->callback = cbk;
  
#line 97 
  ent->context = context;
  
#line 98 
  ent->cmd = cmd;
  
#line 99 
  ent->page_queue = page_queue;
  
#line 101 
  __retres = ent;
  return_label: 
#line 101 
                return __retres;
}


#line 104  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/cmd.c"
static u8 alloc_token(struct mlx5_cmd *cmd)
{
  u8 token;
  
#line 108 
  ldv_spin_lock_59(& cmd->token_lock);
  
#line 109 
  cmd->token = (u8)((int)cmd->token + 1);
  
#line 110 
  if ((unsigned int)cmd->token == 0U) 
#line 111 
                                      cmd->token = (u8)((int)cmd->token + 1); else ;
  
#line 112 
  token = cmd->token;
  
#line 113 
  ldv_spin_unlock_60(& cmd->token_lock);
  
#line 115 
  return token;
}


#line 118  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/cmd.c"
static int alloc_ent(struct mlx5_cmd *cmd)
{
  unsigned long flags;
  int ret;
  unsigned long tmp;
  int tmp_0;
  
#line 123 
  ldv___ldv_spin_lock_61(& cmd->alloc_lock);
  
#line 124 
  tmp = find_first_bit((unsigned long const *)(& cmd->bitmask),(unsigned long)cmd->max_reg_cmds);
  
#line 124 
  ret = (int)tmp;
  
#line 125 
  if (cmd->max_reg_cmds > ret) 
#line 126 
                               set_bit((long)ret,(unsigned long volatile *)(& cmd->bitmask)); else ;
  
#line 127 
  ldv_spin_unlock_irqrestore_62(& cmd->alloc_lock,flags);
  
#line 129 
  if (cmd->max_reg_cmds > ret) 
#line 129 
                               tmp_0 = ret; else 
#line 129 
                                                 tmp_0 = -12;
  
#line 129 
  return tmp_0;
}


#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/cmd.c"
static void free_ent(struct mlx5_cmd *cmd, int idx)
{
  unsigned long flags;
  
#line 136 
  ldv___ldv_spin_lock_63(& cmd->alloc_lock);
  
#line 137 
  set_bit((long)idx,(unsigned long volatile *)(& cmd->bitmask));
  
#line 138 
  ldv_spin_unlock_irqrestore_64(& cmd->alloc_lock,flags);
  
#line 139 
  return;
}


#line 141  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/cmd.c"
static struct mlx5_cmd_layout *get_inst(struct mlx5_cmd *cmd, int idx)
{
  struct mlx5_cmd_layout *__retres;
  
#line 143 
  __retres = (struct mlx5_cmd_layout *)(cmd->cmd_buf + (idx << (int)cmd->log_stride));
  
#line 143 
  return __retres;
}


#line 146  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/cmd.c"
static u8 xor8_buf(void *buf, int len)
{
  int i;
  
#line 148 
  u8 *ptr = (u8 *)buf;
  
#line 149 
  u8 sum = (unsigned char)0U;
  
#line 152 
  i = 0;
  
#line 152 
  goto ldv_39919;
  ldv_39918: 
#line 153 
  ;
  
#line 153 
  sum = (unsigned char)((int)*(ptr + i) ^ (int)sum);
  
#line 152 
  i += 1;
  ldv_39919: 
#line 153 
  ;
  
#line 152 
  if (i < len) 
#line 154 
               goto ldv_39918; else 
#line 157 
                                    goto ldv_39920;
  ldv_39920: 
#line 158 
  ;
  
#line 155 
  return sum;
}


#line 158  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/cmd.c"
static int verify_block_sig(struct mlx5_cmd_prot_block *block)
{
  int __retres;
  u8 tmp;
  u8 tmp_0;
  
#line 160 
  tmp = xor8_buf((void *)(& block->rsvd0),63);
  
#line 160 
  if ((unsigned int)tmp != 255U) {
    
#line 161 
    __retres = -22;
    
#line 161 
    goto return_label;
  }
  else ;
  
#line 163 
  tmp_0 = xor8_buf((void *)block,576);
  
#line 163 
  if ((unsigned int)tmp_0 != 255U) {
    
#line 164 
    __retres = -22;
    
#line 164 
    goto return_label;
  }
  else ;
  
#line 166 
  __retres = 0;
  return_label: 
#line 166 
                return __retres;
}


#line 169  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/cmd.c"
static void calc_block_sig(struct mlx5_cmd_prot_block *block, u8 token, int csum)
{
  
#line 172 
  block->token = token;
  
#line 173 
  if (csum != 0) {
    u8 tmp;
    u8 tmp_0;
    
#line 174 
    tmp = xor8_buf((void *)(& block->rsvd0),62);
    
#line 174 
    block->ctrl_sig = (unsigned char)(~ ((int)tmp));
    
#line 176 
    tmp_0 = xor8_buf((void *)block,575);
    
#line 176 
    block->sig = (unsigned char)(~ ((int)tmp_0));
  }
  else ;
  
#line 178 
  return;
}


#line 180  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/cmd.c"
static void calc_chain_sig(struct mlx5_cmd_msg *msg, u8 token, int csum)
{
  
#line 182 
  struct mlx5_cmd_mailbox *next = msg->next;
  
#line 184 
  goto ldv_39936;
  ldv_39935: 
#line 185 
  ;
  
#line 185 
  calc_block_sig((struct mlx5_cmd_prot_block *)next->buf,(unsigned char)((int)token),csum);
  
#line 186 
  next = next->next;
  ldv_39936: 
#line 187 
  ;
  
#line 184 
  if (next != (struct mlx5_cmd_mailbox *)0) 
#line 186 
                                            goto ldv_39935; else 
#line 189 
                                                                 goto ldv_39937;
  ldv_39937: 
#line 190 
  ;
  
#line 191 
  return;
}


#line 190  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/cmd.c"
static void set_signature(struct mlx5_cmd_work_ent *ent, int csum)
{
  u8 tmp;
  
#line 192 
  tmp = xor8_buf((void *)ent->lay,64);
  
#line 192 
  (ent->lay)->sig = (unsigned char)(~ ((int)tmp));
  
#line 193 
  calc_chain_sig(ent->in,(unsigned char)((int)ent->token),csum);
  
#line 194 
  calc_chain_sig(ent->out,(unsigned char)((int)ent->token),csum);
  
#line 195 
  return;
}


#line 197  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/cmd.c"
static void poll_timeout(struct mlx5_cmd_work_ent *ent)
{
  unsigned long tmp;
  u8 own;
  int tmp_0;
  
#line 199 
  tmp = msecs_to_jiffies(7201000U);
  
#line 199 
  unsigned long poll_end = tmp + jiffies;
  ldv_39953: 
#line 201 
  ;
  
#line 203 
  own = (ent->lay)->status_own;
  
#line 204 
  if (((int)own & 1) == 0) {
    
#line 205 
    ent->ret = 0;
    
#line 206 
    goto return_label;
  }
  else ;
  
#line 208 
  usleep_range(5000UL,10000UL);
  {
    unsigned long __dummy;
    unsigned long __dummy2;
    
#line 209 
    tmp_0 = 1;
  }
  
#line 209 
  if (tmp_0 != 0) {
    int tmp_1;
    {
      unsigned long __dummy_0;
      unsigned long volatile __dummy2_0;
      
#line 209 
      tmp_1 = 1;
    }
    
#line 209 
    if (tmp_1 != 0) {
      
#line 209 
      if ((long)(jiffies - poll_end) < 0L) 
#line 211 
                                           goto ldv_39953; else 
#line 214 
                                                                goto ldv_39954;
    }
    else 
#line 214 
         goto ldv_39954;
  }
  else 
#line 214 
       goto ldv_39954;
  ldv_39954: 
#line 215 
  ;
  
#line 211 
  ent->ret = -110;
  return_label: 
#line 212 
                return;
}


#line 214  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/cmd.c"
static void free_cmd(struct mlx5_cmd_work_ent *ent)
{
  
#line 216 
  kfree((void const *)ent);
  
#line 217 
  return;
}


#line 220  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/cmd.c"
static int verify_signature(struct mlx5_cmd_work_ent *ent)
{
  int __retres;
  int err;
  u8 sig;
  
#line 222 
  struct mlx5_cmd_mailbox *next = (ent->out)->next;
  
#line 226 
  sig = xor8_buf((void *)ent->lay,64);
  
#line 227 
  if ((unsigned int)sig != 255U) {
    
#line 228 
    __retres = -22;
    
#line 228 
    goto return_label;
  }
  else ;
  
#line 230 
  goto ldv_39965;
  ldv_39964: 
#line 231 
  ;
  
#line 231 
  err = verify_block_sig((struct mlx5_cmd_prot_block *)next->buf);
  
#line 232 
  if (err != 0) {
    
#line 233 
    __retres = err;
    
#line 233 
    goto return_label;
  }
  else ;
  
#line 235 
  next = next->next;
  ldv_39965: 
#line 236 
  ;
  
#line 230 
  if (next != (struct mlx5_cmd_mailbox *)0) 
#line 232 
                                            goto ldv_39964; else 
#line 235 
                                                                 goto ldv_39966;
  ldv_39966: 
#line 236 
  ;
  
#line 238 
  __retres = 0;
  return_label: 
#line 238 
                return __retres;
}


#line 241  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/cmd.c"
static void dump_buf(void *buf, int size, int data_only, int offset)
{
  int i;
  
#line 243 
  __be32 *p = (__be32 *)buf;
  
#line 246 
  i = 0;
  
#line 246 
  goto ldv_39978;
  ldv_39977: 
#line 247 
  ;
  {
    
#line 247 
    struct _ddebug descriptor = {.modname = "mlx5_core", .function = "dump_buf", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/cmd.c", .format = "%03x: %08x %08x %08x %08x\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))249U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 247 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
      unsigned int tmp_0;
      unsigned int tmp_2;
      unsigned int tmp_4;
      unsigned int tmp_6;
      
#line 247 
      if (0 != 0) 
#line 247 
                  tmp_0 = (((*(p + 3U) << 24) | ((*(p + 3U) << 8) & 16711680U)) | ((*(p + 3U) >> 8) & 65280U)) | (*(p + 3U) >> 24); else 
                                                                    
#line 247 
                                                                    tmp_0 = __fswab32(*(p + 3U));
      
#line 247 
      if (0 != 0) 
#line 247 
                  tmp_2 = (((*(p + 2U) << 24) | ((*(p + 2U) << 8) & 16711680U)) | ((*(p + 2U) >> 8) & 65280U)) | (*(p + 2U) >> 24); else 
                                                                    
#line 247 
                                                                    tmp_2 = __fswab32(*(p + 2U));
      
#line 247 
      if (0 != 0) 
#line 247 
                  tmp_4 = (((*(p + 1U) << 24) | ((*(p + 1U) << 8) & 16711680U)) | ((*(p + 1U) >> 8) & 65280U)) | (*(p + 1U) >> 24); else 
                                                                    
#line 247 
                                                                    tmp_4 = __fswab32(*(p + 1U));
      
#line 247 
      if (0 != 0) 
#line 247 
                  tmp_6 = (((*p << 24) | ((*p << 8) & 16711680U)) | ((*p >> 8) & 65280U)) | (*p >> 24); else 
                                                                    
#line 247 
                                                                    tmp_6 = __fswab32(*p);
      
#line 247 
      ;
      
#line 247 
      __dynamic_pr_debug(& descriptor,"%03x: %08x %08x %08x %08x\n",offset,tmp_6,tmp_4,tmp_2,tmp_0);
    }
    else ;
  }
  
#line 250 
  p += 4U;
  
#line 251 
  offset += 16;
  
#line 246 
  i += 16;
  ldv_39978: 
#line 247 
  ;
  
#line 246 
  if (i < size) 
#line 248 
                goto ldv_39977; else 
#line 251 
                                     goto ldv_39979;
  ldv_39979: 
#line 252 
  ;
  
#line 253 
  if (data_only == 0) {
    
#line 254 
    struct _ddebug descriptor_0 = {.modname = "mlx5_core", .function = "dump_buf", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/cmd.c", .format = "\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))254U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 254 
    if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 254 
                                                          __dynamic_pr_debug(& descriptor_0,"\n"); else ;
  }
  else ;
  
#line 256 
  return;
}


#line 257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/cmd.c"
char const *mlx5_command_str(int command)
{
  char const *__retres;
  
#line 259 
  switch (command) {
    case 256: 
#line 260 
    ;
    
#line 261 
    __retres = "QUERY_HCA_CAP";
    
#line 261 
    goto return_label;
    case 265: 
#line 263 
    ;
    
#line 264 
    __retres = "SET_HCA_CAP";
    
#line 264 
    goto return_label;
    case 257: 
#line 266 
    ;
    
#line 267 
    __retres = "QUERY_ADAPTER";
    
#line 267 
    goto return_label;
    case 258: 
#line 269 
    ;
    
#line 270 
    __retres = "INIT_HCA";
    
#line 270 
    goto return_label;
    case 259: 
#line 272 
    ;
    
#line 273 
    __retres = "TEARDOWN_HCA";
    
#line 273 
    goto return_label;
    case 260: 
#line 275 
    ;
    
#line 276 
    __retres = "MLX5_CMD_OP_ENABLE_HCA";
    
#line 276 
    goto return_label;
    case 261: 
#line 278 
    ;
    
#line 279 
    __retres = "MLX5_CMD_OP_DISABLE_HCA";
    
#line 279 
    goto return_label;
    case 263: 
#line 281 
    ;
    
#line 282 
    __retres = "QUERY_PAGES";
    
#line 282 
    goto return_label;
    case 264: 
#line 284 
    ;
    
#line 285 
    __retres = "MANAGE_PAGES";
    
#line 285 
    goto return_label;
    case 512: 
#line 287 
    ;
    
#line 288 
    __retres = "CREATE_MKEY";
    
#line 288 
    goto return_label;
    case 513: 
#line 290 
    ;
    
#line 291 
    __retres = "QUERY_MKEY";
    
#line 291 
    goto return_label;
    case 514: 
#line 293 
    ;
    
#line 294 
    __retres = "DESTROY_MKEY";
    
#line 294 
    goto return_label;
    case 515: 
#line 296 
    ;
    
#line 297 
    __retres = "QUERY_SPECIAL_CONTEXTS";
    
#line 297 
    goto return_label;
    case 769: 
#line 299 
    ;
    
#line 300 
    __retres = "CREATE_EQ";
    
#line 300 
    goto return_label;
    case 770: 
#line 302 
    ;
    
#line 303 
    __retres = "DESTROY_EQ";
    
#line 303 
    goto return_label;
    case 771: 
#line 305 
    ;
    
#line 306 
    __retres = "QUERY_EQ";
    
#line 306 
    goto return_label;
    case 1024: 
#line 308 
    ;
    
#line 309 
    __retres = "CREATE_CQ";
    
#line 309 
    goto return_label;
    case 1025: 
#line 311 
    ;
    
#line 312 
    __retres = "DESTROY_CQ";
    
#line 312 
    goto return_label;
    case 1026: 
#line 314 
    ;
    
#line 315 
    __retres = "QUERY_CQ";
    
#line 315 
    goto return_label;
    case 1027: 
#line 317 
    ;
    
#line 318 
    __retres = "MODIFY_CQ";
    
#line 318 
    goto return_label;
    case 1280: 
#line 320 
    ;
    
#line 321 
    __retres = "CREATE_QP";
    
#line 321 
    goto return_label;
    case 1281: 
#line 323 
    ;
    
#line 324 
    __retres = "DESTROY_QP";
    
#line 324 
    goto return_label;
    case 1282: 
#line 326 
    ;
    
#line 327 
    __retres = "RST2INIT_QP";
    
#line 327 
    goto return_label;
    case 1283: 
#line 329 
    ;
    
#line 330 
    __retres = "INIT2RTR_QP";
    
#line 330 
    goto return_label;
    case 1284: 
#line 332 
    ;
    
#line 333 
    __retres = "RTR2RTS_QP";
    
#line 333 
    goto return_label;
    case 1285: 
#line 335 
    ;
    
#line 336 
    __retres = "RTS2RTS_QP";
    
#line 336 
    goto return_label;
    case 1286: 
#line 338 
    ;
    
#line 339 
    __retres = "SQERR2RTS_QP";
    
#line 339 
    goto return_label;
    case 1287: 
#line 341 
    ;
    
#line 342 
    __retres = "2ERR_QP";
    
#line 342 
    goto return_label;
    case 1290: 
#line 344 
    ;
    
#line 345 
    __retres = "2RST_QP";
    
#line 345 
    goto return_label;
    case 1291: 
#line 347 
    ;
    
#line 348 
    __retres = "QUERY_QP";
    
#line 348 
    goto return_label;
    case 1293: 
#line 350 
    ;
    
#line 351 
    __retres = "MAD_IFC";
    
#line 351 
    goto return_label;
    case 1294: 
#line 353 
    ;
    
#line 354 
    __retres = "INIT2INIT_QP";
    
#line 354 
    goto return_label;
    case 1536: 
#line 356 
    ;
    
#line 357 
    __retres = "CREATE_PSV";
    
#line 357 
    goto return_label;
    case 1537: 
#line 359 
    ;
    
#line 360 
    __retres = "DESTROY_PSV";
    
#line 360 
    goto return_label;
    case 1792: 
#line 362 
    ;
    
#line 363 
    __retres = "CREATE_SRQ";
    
#line 363 
    goto return_label;
    case 1793: 
#line 365 
    ;
    
#line 366 
    __retres = "DESTROY_SRQ";
    
#line 366 
    goto return_label;
    case 1794: 
#line 368 
    ;
    
#line 369 
    __retres = "QUERY_SRQ";
    
#line 369 
    goto return_label;
    case 1795: 
#line 371 
    ;
    
#line 372 
    __retres = "ARM_RQ";
    
#line 372 
    goto return_label;
    case 1797: 
#line 374 
    ;
    
#line 375 
    __retres = "CREATE_XRC_SRQ";
    
#line 375 
    goto return_label;
    case 1798: 
#line 377 
    ;
    
#line 378 
    __retres = "DESTROY_XRC_SRQ";
    
#line 378 
    goto return_label;
    case 1799: 
#line 380 
    ;
    
#line 381 
    __retres = "QUERY_XRC_SRQ";
    
#line 381 
    goto return_label;
    case 1800: 
#line 383 
    ;
    
#line 384 
    __retres = "ARM_XRC_SRQ";
    
#line 384 
    goto return_label;
    case 2048: 
#line 386 
    ;
    
#line 387 
    __retres = "ALLOC_PD";
    
#line 387 
    goto return_label;
    case 2049: 
#line 389 
    ;
    
#line 390 
    __retres = "DEALLOC_PD";
    
#line 390 
    goto return_label;
    case 2050: 
#line 392 
    ;
    
#line 393 
    __retres = "ALLOC_UAR";
    
#line 393 
    goto return_label;
    case 2051: 
#line 395 
    ;
    
#line 396 
    __retres = "DEALLOC_UAR";
    
#line 396 
    goto return_label;
    case 2054: 
#line 398 
    ;
    
#line 399 
    __retres = "ATTACH_TO_MCG";
    
#line 399 
    goto return_label;
    case 2055: 
#line 401 
    ;
    
#line 402 
    __retres = "DETTACH_FROM_MCG";
    
#line 402 
    goto return_label;
    case 2062: 
#line 404 
    ;
    
#line 405 
    __retres = "ALLOC_XRCD";
    
#line 405 
    goto return_label;
    case 2063: 
#line 407 
    ;
    
#line 408 
    __retres = "DEALLOC_XRCD";
    
#line 408 
    goto return_label;
    case 2053: 
#line 410 
    ;
    
#line 411 
    __retres = "MLX5_CMD_OP_ACCESS_REG";
    
#line 411 
    goto return_label;
    default: 
#line 413 
    ;
    
#line 413 
    __retres = "unknown command opcode";
    
#line 413 
    goto return_label;
  }
  return_label: 
#line 259 
                return __retres;
}


#line 417  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/cmd.c"
static void dump_command(struct mlx5_core_dev *dev, struct mlx5_cmd_work_ent *ent, int input)
{
  int tmp_0;
  struct mlx5_cmd_msg *tmp_1;
  int data_only;
  int dump_len;
  
#line 420 
  if (0 != 0) 
#line 420 
              tmp_0 = (int)((unsigned short)(((int)((struct mlx5_inbox_hdr *)(& (ent->lay)->in))->opcode << 8) | ((int)((struct mlx5_inbox_hdr *)(& (ent->lay)->in))->opcode >> 8)));
  else {
    __u16 tmp;
    
#line 420 
    tmp = __fswab16((unsigned short)((int)((struct mlx5_inbox_hdr *)(& (ent->lay)->in))->opcode));
    
#line 420 
    tmp_0 = (int)tmp;
  }
  
#line 420 
  u16 op = (unsigned short)tmp_0;
  
#line 421 
  if (input != 0) 
#line 421 
                  tmp_1 = ent->in; else 
#line 421 
                                        tmp_1 = ent->out;
  
#line 421 
  struct mlx5_cmd_msg *msg = tmp_1;
  
#line 422 
  struct mlx5_cmd_mailbox *next = msg->next;
  
#line 424 
  u32 offset = 0U;
  
#line 427 
  data_only = (mlx5_core_debug_mask & 1) != 0;
  
#line 429 
  if (data_only != 0) {
    
#line 430 
    if ((mlx5_core_debug_mask & 1) != 0) {
      
#line 430 
      struct _ddebug descriptor = {.modname = "mlx5_core", .function = "dump_command", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/cmd.c", .format = "%s:%s:%d:(pid %d): ", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))433U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 430 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
        char *tmp_2;
        char const *tmp_3;
        struct task_struct *tmp_4;
        
#line 430 
        if (input != 0) 
#line 430 
                        tmp_2 = (char *)"INPUT"; else 
#line 430 
                                                      tmp_2 = (char *)"OUTPUT";
        
#line 430 
        ;
        
#line 430 
        tmp_3 = mlx5_command_str((int)op);
        
#line 430 
        tmp_4 = get_current();
        
#line 430 
        ;
        
#line 430 
        __dynamic_pr_debug(& descriptor,"%s:%s:%d:(pid %d): ",(char *)(& dev->priv.name),"dump_command",433,tmp_4->pid,tmp_3,(int)op,tmp_2);
      }
      else ;
    }
    else ;
  }
  else {
    
#line 435 
    struct _ddebug descriptor_0 = {.modname = "mlx5_core", .function = "dump_command", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/cmd.c", .format = "%s:%s:%d:(pid %d): ", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))437U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 435 
    if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) {
      char *tmp_5;
      char const *tmp_6;
      struct task_struct *tmp_7;
      
#line 435 
      if (input != 0) 
#line 435 
                      tmp_5 = (char *)"INPUT"; else 
#line 435 
                                                    tmp_5 = (char *)"OUTPUT";
      
#line 435 
      ;
      
#line 435 
      tmp_6 = mlx5_command_str((int)op);
      
#line 435 
      tmp_7 = get_current();
      
#line 435 
      ;
      
#line 435 
      __dynamic_pr_debug(& descriptor_0,"%s:%s:%d:(pid %d): ",(char *)(& dev->priv.name),"dump_command",437,tmp_7->pid,tmp_6,(int)op,tmp_5);
    }
    else ;
  }
  
#line 439 
  if (data_only != 0) 
    
#line 440 
    if (input != 0) {
      
#line 441 
      dump_buf((void *)(& (ent->lay)->in),16,1,(int)offset);
      
#line 442 
      offset += 16U;
    }
    else {
      
#line 444 
      dump_buf((void *)(& (ent->lay)->out),16,1,(int)offset);
      
#line 445 
      offset += 16U;
    }
  else {
    
#line 448 
    dump_buf((void *)ent->lay,64,0,(int)offset);
    
#line 449 
    offset += 64U;
  }
  
#line 452 
  goto ldv_40055;
  ldv_40054: 
#line 453 
  ;
  
#line 453 
  if (data_only != 0) {
    int tmp_9;
    {
      int tmp_8;
      
#line 454 
      int __min1 = 512;
      
#line 454 
      int __min2 = (int)(msg->len - offset);
      
#line 454 
      if (__min1 < __min2) 
#line 454 
                           tmp_8 = __min1; else 
#line 454 
                                                tmp_8 = __min2;
      
#line 454 
      tmp_9 = tmp_8;
    }
    
#line 454 
    dump_len = tmp_9;
    
#line 455 
    dump_buf(next->buf,dump_len,1,(int)offset);
    
#line 456 
    offset += 512U;
  }
  else {
    {
      
#line 458 
      struct _ddebug descriptor_1 = {.modname = "mlx5_core", .function = "dump_command", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/cmd.c", .format = "%s:%s:%d:(pid %d): ", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))458U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 458 
      if ((long)(((int)descriptor_1.flags & 1) != 0) != 0L) {
        struct task_struct *tmp_10;
        
#line 458 
        tmp_10 = get_current();
        
#line 458 
        ;
        
#line 458 
        __dynamic_pr_debug(& descriptor_1,"%s:%s:%d:(pid %d): ",(char *)(& dev->priv.name),"dump_command",458,tmp_10->pid);
      }
      else ;
    }
    
#line 459 
    dump_buf(next->buf,576,0,(int)offset);
    
#line 460 
    offset += 576U;
  }
  
#line 462 
  next = next->next;
  ldv_40055: 
#line 463 
  ;
  
#line 452 
  if (next != (struct mlx5_cmd_mailbox *)0 && msg->len > offset) 
#line 454 
                                                                 goto ldv_40054; else 
                                                                    
#line 457 
                                                                    goto ldv_40056;
  ldv_40056: 
#line 458 
  ;
  
#line 465 
  if (data_only != 0) {
    
#line 466 
    struct _ddebug descriptor_2 = {.modname = "mlx5_core", .function = "dump_command", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/cmd.c", .format = "\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))466U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 466 
    if ((long)(((int)descriptor_2.flags & 1) != 0) != 0L) 
#line 466 
                                                          __dynamic_pr_debug(& descriptor_2,"\n"); else ;
  }
  else ;
  
#line 468 
  return;
}


#line 469  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/cmd.c"
static void cmd_work_handler(struct work_struct *work)
{
  struct mlx5_cmd_work_ent *tmp;
  struct mlx5_core_dev *tmp_0;
  struct mlx5_cmd_layout *lay;
  struct semaphore *sem;
  {
    
#line 471 
    struct work_struct const *__mptr = (struct work_struct const *)work;
    
#line 471 
    tmp = (struct mlx5_cmd_work_ent *)__mptr + 18446744073709551456U;
  }
  
#line 471 
  struct mlx5_cmd_work_ent *ent = tmp;
  
#line 472 
  struct mlx5_cmd *cmd = ent->cmd;
  {
    
#line 473 
    struct mlx5_cmd const *__mptr_0 = (struct mlx5_cmd const *)cmd;
    
#line 473 
    tmp_0 = (struct mlx5_core_dev *)__mptr_0 + 18446744073709551536U;
  }
  
#line 473 
  struct mlx5_core_dev *dev = tmp_0;
  
#line 477 
  if (ent->page_queue != 0) 
#line 477 
                            sem = & cmd->pages_sem; else 
#line 477 
                                                         sem = & cmd->sem;
  
#line 478 
  down(sem);
  
#line 479 
  if (ent->page_queue == 0) {
    
#line 480 
    ent->idx = alloc_ent(cmd);
    
#line 481 
    if (ent->idx < 0) {
      struct task_struct *tmp_1;
      
#line 482 
      tmp_1 = get_current();
      
#line 482 
      ;
      
#line 482 
      printk("\001",(char *)(& dev->priv.name),"cmd_work_handler",482,tmp_1->pid);
      
#line 483 
      up(sem);
      
#line 484 
      goto return_label;
    }
    else ;
  }
  else 
#line 487 
       ent->idx = cmd->max_reg_cmds;
  
#line 490 
  ent->token = alloc_token(cmd);
  
#line 491 
  cmd->ent_arr[ent->idx] = ent;
  
#line 492 
  lay = get_inst(cmd,ent->idx);
  
#line 493 
  ent->lay = lay;
  
#line 494 
  memset((void *)lay,0,64UL);
  
#line 495 
  memcpy((void *)(& lay->in),(void const *)(& (ent->in)->first.data),16UL);
  
#line 496 
  if (0 != 0) 
#line 496 
              ent->op = (unsigned short)(((((lay->in[0] << 24) | ((lay->in[0] << 8) & 16711680U)) | ((lay->in[0] >> 8) & 65280U)) | (lay->in[0] >> 24)) >> 16);
  else {
    __u32 tmp_2;
    
#line 496 
    tmp_2 = __fswab32(lay->in[0]);
    
#line 496 
    ent->op = (unsigned short)(tmp_2 >> 16);
  }
  
#line 497 
  if ((ent->in)->next != (struct mlx5_cmd_mailbox *)0) 
    
#line 498 
    if (0 != 0) 
#line 498 
                lay->in_ptr = (((((((((ent->in)->next)->dma << 56) | ((((ent->in)->next)->dma << 40) & 71776119061217280ULL)) | ((((ent->in)->next)->dma << 24) & 280375465082880ULL)) | ((((ent->in)->next)->dma << 8) & 1095216660480ULL)) | ((((ent->in)->next)->dma >> 8) & 4278190080ULL)) | ((((ent->in)->next)->dma >> 24) & 16711680ULL)) | ((((ent->in)->next)->dma >> 40) & 65280ULL)) | (((ent->in)->next)->dma >> 56); else 
                                                                    
#line 498 
                                                                    lay->in_ptr = __fswab64(((ent->in)->next)->dma);
  else ;
  
#line 499 
  if (0 != 0) 
#line 499 
              lay->inlen = ((((ent->in)->len << 24) | (((ent->in)->len << 8) & 16711680U)) | (((ent->in)->len >> 8) & 65280U)) | ((ent->in)->len >> 24); else 
                                                                    
#line 499 
                                                                    lay->inlen = __fswab32((ent->in)->len);
  
#line 500 
  if ((ent->out)->next != (struct mlx5_cmd_mailbox *)0) 
    
#line 501 
    if (0 != 0) 
#line 501 
                lay->out_ptr = (((((((((ent->out)->next)->dma << 56) | ((((ent->out)->next)->dma << 40) & 71776119061217280ULL)) | ((((ent->out)->next)->dma << 24) & 280375465082880ULL)) | ((((ent->out)->next)->dma << 8) & 1095216660480ULL)) | ((((ent->out)->next)->dma >> 8) & 4278190080ULL)) | ((((ent->out)->next)->dma >> 24) & 16711680ULL)) | ((((ent->out)->next)->dma >> 40) & 65280ULL)) | (((ent->out)->next)->dma >> 56); else 
                                                                    
#line 501 
                                                                    lay->out_ptr = __fswab64(((ent->out)->next)->dma);
  else ;
  
#line 502 
  if (0 != 0) 
#line 502 
              lay->outlen = ((((ent->out)->len << 24) | (((ent->out)->len << 8) & 16711680U)) | (((ent->out)->len >> 8) & 65280U)) | ((ent->out)->len >> 24); else 
                                                                    
#line 502 
                                                                    lay->outlen = __fswab32((ent->out)->len);
  
#line 503 
  lay->type = (unsigned char)7U;
  
#line 504 
  lay->token = ent->token;
  
#line 505 
  lay->status_own = (unsigned char)1U;
  
#line 506 
  set_signature(ent,cmd->checksum_disabled == 0);
  
#line 507 
  dump_command(dev,ent,1);
  
#line 508 
  ent->ts1 = ktime_get_ns();
  {
    
#line 511 
    struct _ddebug descriptor = {.modname = "mlx5_core", .function = "cmd_work_handler", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/cmd.c", .format = "%s:%s:%d:(pid %d): ", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))511U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 511 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
      struct task_struct *tmp_7;
      
#line 511 
      ;
      
#line 511 
      tmp_7 = get_current();
      
#line 511 
      ;
      
#line 511 
      __dynamic_pr_debug(& descriptor,"%s:%s:%d:(pid %d): ",(char *)(& dev->priv.name),"cmd_work_handler",511,tmp_7->pid,1 << ent->idx);
    }
    else ;
  }
  
#line 513 
  ldv_inline_asm();
  
#line 513 
  iowrite32be((unsigned int)(1 << ent->idx),(void *)(& (dev->iseg)->cmd_dbell));
  
#line 514 
  ldv_inline_asm();
  
#line 516 
  if (cmd->mode == 0) {
    
#line 517 
    poll_timeout(ent);
    
#line 518 
    ldv_inline_asm();
    
#line 520 
    mlx5_cmd_comp_handler(dev,1UL << ent->idx);
  }
  else ;
  return_label: 
#line 522 
                return;
}


#line 524  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/cmd.c"
static char const *deliv_status_to_str(u8 status)
{
  char const *__retres;
  
#line 526 
  switch ((int)status) {
    case 0: 
#line 527 
    ;
    
#line 528 
    __retres = "no errors";
    
#line 528 
    goto return_label;
    case 1: 
#line 529 
    ;
    
#line 530 
    __retres = "signature error";
    
#line 530 
    goto return_label;
    case 2: 
#line 531 
    ;
    
#line 532 
    __retres = "token error";
    
#line 532 
    goto return_label;
    case 3: 
#line 533 
    ;
    
#line 534 
    __retres = "bad block number";
    
#line 534 
    goto return_label;
    case 4: 
#line 535 
    ;
    
#line 536 
    __retres = "output pointer not aligned to block size";
    
#line 536 
    goto return_label;
    case 5: 
#line 537 
    ;
    
#line 538 
    __retres = "input pointer not aligned to block size";
    
#line 538 
    goto return_label;
    case 6: 
#line 539 
    ;
    
#line 540 
    __retres = "firmware internal error";
    
#line 540 
    goto return_label;
    case 7: 
#line 541 
    ;
    
#line 542 
    __retres = "command input length error";
    
#line 542 
    goto return_label;
    case 8: 
#line 543 
    ;
    
#line 544 
    __retres = "command ouput length error";
    
#line 544 
    goto return_label;
    case 9: 
#line 545 
    ;
    
#line 546 
    __retres = "reserved fields not cleared";
    
#line 546 
    goto return_label;
    case 16: 
#line 547 
    ;
    
#line 548 
    __retres = "bad command descriptor type";
    
#line 548 
    goto return_label;
    default: 
#line 549 
    ;
    
#line 550 
    __retres = "unknown status code";
    
#line 550 
    goto return_label;
  }
  return_label: 
#line 526 
                return __retres;
}


#line 554  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/cmd.c"
static u16 msg_to_opcode(struct mlx5_cmd_msg *in)
{
  u16 __retres;
  int tmp_0;
  
#line 556 
  struct mlx5_inbox_hdr *hdr = (struct mlx5_inbox_hdr *)(& in->first.data);
  
#line 558 
  if (0 != 0) 
#line 558 
              tmp_0 = (int)((unsigned short)(((int)hdr->opcode << 8) | ((int)hdr->opcode >> 8)));
  else {
    __u16 tmp;
    
#line 558 
    tmp = __fswab16((unsigned short)((int)hdr->opcode));
    
#line 558 
    tmp_0 = (int)tmp;
  }
  
#line 558 
  __retres = (unsigned short)tmp_0;
  
#line 558 
  return __retres;
}


#line 561  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/cmd.c"
static int wait_func(struct mlx5_core_dev *dev, struct mlx5_cmd_work_ent *ent)
{
  int err;
  
#line 563 
  unsigned long timeout = msecs_to_jiffies(7200000U);
  
#line 564 
  struct mlx5_cmd *cmd = & dev->cmd;
  
#line 567 
  if (cmd->mode == 0) {
    
#line 568 
    wait_for_completion(& ent->done);
    
#line 569 
    err = ent->ret;
  }
  else {
    unsigned long tmp_0;
    
#line 571 
    tmp_0 = wait_for_completion_timeout(& ent->done,timeout);
    
#line 571 
    if (tmp_0 == 0UL) 
#line 572 
                      err = -110; else 
#line 574 
                                       err = 0;
  }
  
#line 576 
  if (err == -110) {
    u16 tmp_1;
    char const *tmp_3;
    u16 tmp_2;
    struct task_struct *tmp_4;
    
#line 577 
    tmp_1 = msg_to_opcode(ent->in);
    
#line 577 
    tmp_2 = msg_to_opcode(ent->in);
    
#line 577 
    tmp_3 = mlx5_command_str((int)tmp_2);
    
#line 577 
    tmp_4 = get_current();
    
#line 577 
    ;
    
#line 577 
    printk("\001",(char *)(& dev->priv.name),"wait_func",579,tmp_4->pid,tmp_3,(int)tmp_1);
  }
  else ;
  {
    
#line 581 
    struct _ddebug descriptor = {.modname = "mlx5_core", .function = "wait_func", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/cmd.c", .format = "%s:%s:%d:(pid %d): ", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))582U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 581 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
      char const *tmp_5;
      struct task_struct *tmp_6;
      
#line 581 
      ;
      
#line 581 
      tmp_5 = deliv_status_to_str((unsigned char)((int)ent->status));
      
#line 581 
      ;
      
#line 581 
      tmp_6 = get_current();
      
#line 581 
      ;
      
#line 581 
      __dynamic_pr_debug(& descriptor,"%s:%s:%d:(pid %d): ",(char *)(& dev->priv.name),"wait_func",582,tmp_6->pid,err,tmp_5,(int)ent->status);
    }
    else ;
  }
  
#line 584 
  return err;
}


#line 591  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/cmd.c"
static int mlx5_cmd_invoke(struct mlx5_core_dev *dev, struct mlx5_cmd_msg *in, struct mlx5_cmd_msg *out, void *uout, int uout_size, void (*callback)(int , void *), void *context, int page_queue, u8 *status)
{
  int __retres;
  struct mlx5_cmd_work_ent *ent;
  struct mlx5_cmd_stats *stats;
  s64 ds;
  u16 op;
  bool tmp_0;
  
#line 596 
  struct mlx5_cmd *cmd = & dev->cmd;
  
#line 599 
  int err = 0;
  
#line 603 
  if (callback != (void (*)(int , void *))0 && page_queue != 0) {
    
#line 604 
    __retres = -22;
    
#line 604 
    goto return_label;
  }
  else ;
  
#line 606 
  ent = alloc_cmd(cmd,in,out,uout,uout_size,callback,context,page_queue);
  
#line 608 
  tmp_0 = IS_ERR((void const *)ent);
  
#line 608 
  if ((int)tmp_0 != 0) {
    long tmp;
    
#line 609 
    tmp = PTR_ERR((void const *)ent);
    
#line 609 
    __retres = (int)tmp;
    
#line 609 
    goto return_label;
  }
  else ;
  
#line 611 
  if (callback == (void (*)(int , void *))0) 
#line 612 
                                             init_completion(& ent->done); else ;
  {
    struct lock_class_key __key;
    
#line 614 
    __init_work(& ent->work,0);
    
#line 614 
    atomic_long_t __constr_expr_32 = {.counter = WORK_STRUCT_NO_POOL};
    
#line 614 
    ent->work.data = __constr_expr_32;
    
#line 614 
    lockdep_init_map(& ent->work.lockdep_map,"(&ent->work)",& __key,0);
    
#line 614 
    INIT_LIST_HEAD(& ent->work.entry);
    
#line 614 
    ent->work.func = & cmd_work_handler;
  }
  
#line 615 
  if (page_queue != 0) 
#line 616 
                       cmd_work_handler(& ent->work);
  else {
    int tmp_3;
    bool tmp_2;
    
#line 617 
    tmp_2 = ldv_queue_work_65(cmd->wq,& ent->work);
    
#line 617 
    if (tmp_2) 
#line 617 
               tmp_3 = 0; else 
#line 617 
                               tmp_3 = 1;
    
#line 617 
    if (tmp_3) {
      struct task_struct *tmp_1;
      
#line 618 
      tmp_1 = get_current();
      
#line 618 
      ;
      
#line 618 
      printk("\001",(char *)(& dev->priv.name),"mlx5_cmd_invoke",618,tmp_1->pid);
      
#line 619 
      err = -12;
      
#line 620 
      goto out_free;
    }
    else ;
  }
  
#line 623 
  if (callback == (void (*)(int , void *))0) {
    
#line 624 
    err = wait_func(dev,ent);
    
#line 625 
    if (err == -110) 
#line 626 
                     goto out; else ;
    
#line 628 
    ds = (long long)(ent->ts2 - ent->ts1);
    
#line 629 
    if (0 != 0) 
#line 629 
                op = (unsigned short)(((int)((struct mlx5_inbox_hdr *)(& in->first.data))->opcode << 8) | ((int)((struct mlx5_inbox_hdr *)(& in->first.data))->opcode >> 8)); else 
                                                                    
#line 629 
                                                                    op = __fswab16((unsigned short)((int)((struct mlx5_inbox_hdr *)(& in->first.data))->opcode));
    
#line 630 
    if ((unsigned int)op <= 2335U) {
      
#line 631 
      stats = & cmd->stats[(int)op];
      
#line 632 
      ldv_spin_lock_irq_66(& stats->lock);
      
#line 633 
      stats->sum += (unsigned long long)ds;
      
#line 634 
      stats->n += 1ULL;
      
#line 635 
      ldv_spin_unlock_irq_67(& stats->lock);
    }
    else ;
    
#line 637 
    if ((mlx5_core_debug_mask & 2) != 0) {
      
#line 637 
      struct _ddebug descriptor = {.modname = "mlx5_core", .function = "mlx5_cmd_invoke", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/cmd.c", .format = "%s:%s:%d:(pid %d): ", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))639U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 637 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
        char const *tmp_5;
        struct task_struct *tmp_6;
        
#line 637 
        ;
        
#line 637 
        tmp_5 = mlx5_command_str((int)op);
        
#line 637 
        tmp_6 = get_current();
        
#line 637 
        ;
        
#line 637 
        __dynamic_pr_debug(& descriptor,"%s:%s:%d:(pid %d): ",(char *)(& dev->priv.name),"mlx5_cmd_invoke",639,tmp_6->pid,tmp_5,ds);
      }
      else ;
    }
    else ;
    
#line 640 
    *status = ent->status;
    
#line 641 
    free_cmd(ent);
  }
  else ;
  
#line 644 
  __retres = err;
  
#line 644 
  goto return_label;
  out_free: 
#line 646 
  ;
  
#line 647 
  free_cmd(ent);
  out: 
#line 648 
  ;
  
#line 649 
  __retres = err;
  return_label: 
#line 649 
                return __retres;
}


#line 652  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/cmd.c"
static ssize_t dbg_write(struct file *filp, char const *buf, size_t count, loff_t *pos)
{
  ssize_t __retres;
  char lbuf[3U];
  int err;
  unsigned long tmp;
  int tmp_0;
  unsigned long tmp_1;
  
#line 655 
  struct mlx5_core_dev *dev = (struct mlx5_core_dev *)filp->private_data;
  
#line 656 
  struct mlx5_cmd_debug *dbg = & dev->cmd.dbg;
  
#line 660 
  if (dbg->in_msg == (void *)0 || dbg->out_msg == (void *)0) {
    
#line 661 
    __retres = -12L;
    
#line 661 
    goto return_label;
  }
  else ;
  
#line 663 
  tmp = copy_from_user((void *)(& lbuf),(void const *)buf,3UL);
  
#line 663 
  if (tmp != 0UL) {
    
#line 664 
    __retres = -14L;
    
#line 664 
    goto return_label;
  }
  else ;
  
#line 666 
  lbuf[2UL] = (char)0;
  
#line 668 
  tmp_0 = strcmp((char const *)(& lbuf),"go");
  
#line 668 
  if (tmp_0 != 0) {
    
#line 669 
    __retres = -22L;
    
#line 669 
    goto return_label;
  }
  else ;
  
#line 671 
  err = mlx5_cmd_exec(dev,dbg->in_msg,(int)dbg->inlen,dbg->out_msg,(int)dbg->outlen);
  
#line 673 
  if (err != 0) 
#line 673 
                tmp_1 = (unsigned long)err; else 
#line 673 
                                                 tmp_1 = count;
  
#line 673 
  __retres = (long)tmp_1;
  return_label: 
#line 673 
                return __retres;
}


#line 677  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/cmd.c"
static struct file_operations const fops = {.owner = & __this_module, .llseek = (loff_t (*)(struct file *, loff_t , int ))0, .read = (ssize_t (*)(struct file *, char *, size_t , loff_t *))0, .write = & dbg_write, .read_iter = (ssize_t (*)(struct kiocb *, struct iov_iter *))0, .write_iter = (ssize_t (*)(struct kiocb *, struct iov_iter *))0, .iterate = (int (*)(struct file *, struct dir_context *))0, .poll = (unsigned int (*)(struct file *, struct poll_table_struct *))0, .unlocked_ioctl = (long (*)(struct file *, unsigned int , unsigned long ))0, .compat_ioctl = (long (*)(struct file *, unsigned int , unsigned long ))0, .mmap = (int (*)(struct file *, struct vm_area_struct *))0, .mremap = (int (*)(struct file *, struct vm_area_struct *))0, .open = & simple_open, .flush = (int (*)(struct file *, fl_owner_t ))0, .release = (int (*)(struct inode *, struct file *))0, .fsync = (int (*)(struct file *, loff_t , loff_t , int ))0, .aio_fsync = (int (*)(struct kiocb *, int ))0, .fasync = (int (*)(int , struct file *, int ))0, .lock = (int (*)(struct file *, int , struct file_lock *))0, .sendpage = (ssize_t (*)(struct file *, struct page *, int , size_t , loff_t *, int ))0, .get_unmapped_area = (unsigned long (*)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ))0, .check_flags = (int (*)(int ))0, .flock = (int (*)(struct file *, int , struct file_lock *))0, .splice_write = (ssize_t (*)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ))0, .splice_read = (ssize_t (*)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ))0, .setlease = (int (*)(struct file *, long , struct file_lock **, void **))0, .fallocate = (long (*)(struct file *, int , loff_t , loff_t ))0, .show_fdinfo = (void (*)(struct seq_file *, struct file *))0};

#line 683  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/cmd.c"
static int mlx5_copy_to_msg(struct mlx5_cmd_msg *to, void *from, int size)
{
  int __retres;
  struct mlx5_cmd_prot_block *block;
  struct mlx5_cmd_mailbox *next;
  int copy;
  int tmp_0;
  int tmp_2;
  
#line 689 
  if (to == (struct mlx5_cmd_msg *)0 || from == (void *)0) {
    
#line 690 
    __retres = -12;
    
#line 690 
    goto return_label;
  }
  else ;
  {
    int tmp;
    
#line 692 
    int __min1 = size;
    
#line 692 
    int __min2 = 16;
    
#line 692 
    if (__min1 < __min2) 
#line 692 
                         tmp = __min1; else 
#line 692 
                                            tmp = __min2;
    
#line 692 
    tmp_0 = tmp;
  }
  
#line 692 
  copy = tmp_0;
  
#line 693 
  memcpy((void *)(& to->first.data),(void const *)from,(unsigned long)copy);
  
#line 694 
  size -= copy;
  
#line 695 
  from += copy;
  
#line 697 
  next = to->next;
  
#line 698 
  goto ldv_40152;
  ldv_40151: 
#line 699 
  ;
  
#line 699 
  if (next == (struct mlx5_cmd_mailbox *)0) {
    
#line 701 
    __retres = -12;
    
#line 701 
    goto return_label;
  }
  else ;
  {
    int tmp_1;
    
#line 704 
    int __min1_0 = size;
    
#line 704 
    int __min2_0 = 512;
    
#line 704 
    if (__min1_0 < __min2_0) 
#line 704 
                             tmp_1 = __min1_0; else 
#line 704 
                                                    tmp_1 = __min2_0;
    
#line 704 
    tmp_2 = tmp_1;
  }
  
#line 704 
  copy = tmp_2;
  
#line 705 
  block = (struct mlx5_cmd_prot_block *)next->buf;
  
#line 706 
  memcpy((void *)(& block->data),(void const *)from,(unsigned long)copy);
  
#line 707 
  from += copy;
  
#line 708 
  size -= copy;
  
#line 709 
  next = next->next;
  ldv_40152: 
#line 710 
  ;
  
#line 698 
  if (size != 0) 
#line 700 
                 goto ldv_40151; else 
#line 703 
                                      goto ldv_40153;
  ldv_40153: 
#line 704 
  ;
  
#line 712 
  __retres = 0;
  return_label: 
#line 712 
                return __retres;
}


#line 715  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/cmd.c"
static int mlx5_copy_from_msg(void *to, struct mlx5_cmd_msg *from, int size)
{
  int __retres;
  struct mlx5_cmd_prot_block *block;
  struct mlx5_cmd_mailbox *next;
  int copy;
  int tmp_0;
  int tmp_2;
  
#line 721 
  if (to == (void *)0 || from == (struct mlx5_cmd_msg *)0) {
    
#line 722 
    __retres = -12;
    
#line 722 
    goto return_label;
  }
  else ;
  {
    int tmp;
    
#line 724 
    int __min1 = size;
    
#line 724 
    int __min2 = 16;
    
#line 724 
    if (__min1 < __min2) 
#line 724 
                         tmp = __min1; else 
#line 724 
                                            tmp = __min2;
    
#line 724 
    tmp_0 = tmp;
  }
  
#line 724 
  copy = tmp_0;
  
#line 725 
  memcpy(to,(void const *)(& from->first.data),(unsigned long)copy);
  
#line 726 
  size -= copy;
  
#line 727 
  to += copy;
  
#line 729 
  next = from->next;
  
#line 730 
  goto ldv_40169;
  ldv_40168: 
#line 731 
  ;
  
#line 731 
  if (next == (struct mlx5_cmd_mailbox *)0) {
    
#line 733 
    __retres = -12;
    
#line 733 
    goto return_label;
  }
  else ;
  {
    int tmp_1;
    
#line 736 
    int __min1_0 = size;
    
#line 736 
    int __min2_0 = 512;
    
#line 736 
    if (__min1_0 < __min2_0) 
#line 736 
                             tmp_1 = __min1_0; else 
#line 736 
                                                    tmp_1 = __min2_0;
    
#line 736 
    tmp_2 = tmp_1;
  }
  
#line 736 
  copy = tmp_2;
  
#line 737 
  block = (struct mlx5_cmd_prot_block *)next->buf;
  
#line 739 
  memcpy(to,(void const *)(& block->data),(unsigned long)copy);
  
#line 740 
  to += copy;
  
#line 741 
  size -= copy;
  
#line 742 
  next = next->next;
  ldv_40169: 
#line 743 
  ;
  
#line 730 
  if (size != 0) 
#line 732 
                 goto ldv_40168; else 
#line 735 
                                      goto ldv_40170;
  ldv_40170: 
#line 736 
  ;
  
#line 745 
  __retres = 0;
  return_label: 
#line 745 
                return __retres;
}


#line 748  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/cmd.c"
static struct mlx5_cmd_mailbox *alloc_cmd_box(struct mlx5_core_dev *dev, gfp_t flags)
{
  struct mlx5_cmd_mailbox *__retres;
  struct mlx5_cmd_mailbox *mailbox;
  
#line 753 
  mailbox = (struct mlx5_cmd_mailbox *)kmalloc(24UL,flags);
  
#line 754 
  if (mailbox == (struct mlx5_cmd_mailbox *)0) {
    struct mlx5_cmd_mailbox *tmp_0;
    
#line 755 
    tmp_0 = (struct mlx5_cmd_mailbox *)ERR_PTR(-12L);
    
#line 755 
    __retres = tmp_0;
    
#line 755 
    goto return_label;
  }
  else ;
  
#line 757 
  mailbox->buf = dma_pool_alloc(dev->cmd.pool,flags,& mailbox->dma);
  
#line 759 
  if (mailbox->buf == (void *)0) {
    struct mlx5_cmd_mailbox *tmp_2;
    {
      
#line 760 
      struct _ddebug descriptor = {.modname = "mlx5_core", .function = "alloc_cmd_box", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/cmd.c", .format = "%s:%s:%d:(pid %d): ", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))760U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 760 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
        struct task_struct *tmp_1;
        
#line 760 
        tmp_1 = get_current();
        
#line 760 
        ;
        
#line 760 
        __dynamic_pr_debug(& descriptor,"%s:%s:%d:(pid %d): ",(char *)(& dev->priv.name),"alloc_cmd_box",760,tmp_1->pid);
      }
      else ;
    }
    
#line 761 
    kfree((void const *)mailbox);
    
#line 762 
    tmp_2 = (struct mlx5_cmd_mailbox *)ERR_PTR(-12L);
    
#line 762 
    __retres = tmp_2;
    
#line 762 
    goto return_label;
  }
  else ;
  
#line 764 
  memset(mailbox->buf,0,576UL);
  
#line 765 
  mailbox->next = (struct mlx5_cmd_mailbox *)0;
  
#line 767 
  __retres = mailbox;
  return_label: 
#line 767 
                return __retres;
}


#line 770  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/cmd.c"
static void free_cmd_box(struct mlx5_core_dev *dev, struct mlx5_cmd_mailbox *mailbox)
{
  
#line 773 
  dma_pool_free(dev->cmd.pool,mailbox->buf,mailbox->dma);
  
#line 774 
  kfree((void const *)mailbox);
  
#line 775 
  return;
}


#line 777  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/cmd.c"
static struct mlx5_cmd_msg *mlx5_alloc_cmd_msg(struct mlx5_core_dev *dev, gfp_t flags, int size)
{
  struct mlx5_cmd_msg *__retres;
  struct mlx5_cmd_mailbox *tmp;
  struct mlx5_cmd_prot_block *block;
  struct mlx5_cmd_msg *msg;
  int blen;
  int err;
  int n;
  int i;
  int tmp_3;
  bool tmp_6;
  struct mlx5_cmd_msg *tmp_19;
  
#line 780 
  struct mlx5_cmd_mailbox *head = (struct mlx5_cmd_mailbox *)0;
  
#line 788 
  msg = (struct mlx5_cmd_msg *)kzalloc(56UL,flags);
  
#line 789 
  if (msg == (struct mlx5_cmd_msg *)0) {
    struct mlx5_cmd_msg *tmp_1;
    
#line 790 
    tmp_1 = (struct mlx5_cmd_msg *)ERR_PTR(-12L);
    
#line 790 
    __retres = tmp_1;
    
#line 790 
    goto return_label;
  }
  else ;
  {
    int tmp_2;
    
#line 792 
    int __min1 = 16;
    
#line 792 
    int __min2 = size;
    
#line 792 
    if (__min1 < __min2) 
#line 792 
                         tmp_2 = __min1; else 
#line 792 
                                              tmp_2 = __min2;
    
#line 792 
    tmp_3 = tmp_2;
  }
  
#line 792 
  blen = size - tmp_3;
  
#line 793 
  n = (blen + 511) / 512;
  
#line 795 
  i = 0;
  
#line 795 
  goto ldv_40201;
  ldv_40200: 
#line 796 
  ;
  
#line 796 
  tmp = alloc_cmd_box(dev,flags);
  
#line 797 
  tmp_6 = IS_ERR((void const *)tmp);
  
#line 797 
  if ((int)tmp_6 != 0) {
    struct task_struct *tmp_4;
    long tmp_5;
    
#line 798 
    tmp_4 = get_current();
    
#line 798 
    ;
    
#line 798 
    printk("\001",(char *)(& dev->priv.name),"mlx5_alloc_cmd_msg",798,tmp_4->pid);
    
#line 799 
    tmp_5 = PTR_ERR((void const *)tmp);
    
#line 799 
    err = (int)tmp_5;
    
#line 800 
    goto err_alloc;
  }
  else ;
  
#line 803 
  block = (struct mlx5_cmd_prot_block *)tmp->buf;
  
#line 804 
  tmp->next = head;
  
#line 805 
  if (0 != 0) {
    unsigned long long tmp_8;
    unsigned long long tmp_9;
    unsigned long long tmp_10;
    unsigned long long tmp_11;
    unsigned long long tmp_12;
    unsigned long long tmp_13;
    unsigned long long tmp_14;
    unsigned long long tmp_15;
    
#line 805 
    if (tmp->next != (struct mlx5_cmd_mailbox *)0) 
#line 805 
                                                   tmp_8 = (tmp->next)->dma << 56; else 
                                                                    
#line 805 
                                                                    tmp_8 = 0ULL;
    
#line 805 
    if (tmp->next != (struct mlx5_cmd_mailbox *)0) 
#line 805 
                                                   tmp_9 = ((tmp->next)->dma << 40) & 71776119061217280ULL; else 
                                                                    
#line 805 
                                                                    tmp_9 = 0ULL;
    
#line 805 
    if (tmp->next != (struct mlx5_cmd_mailbox *)0) 
#line 805 
                                                   tmp_10 = ((tmp->next)->dma << 24) & 280375465082880ULL; else 
                                                                    
#line 805 
                                                                    tmp_10 = 0ULL;
    
#line 805 
    if (tmp->next != (struct mlx5_cmd_mailbox *)0) 
#line 805 
                                                   tmp_11 = ((tmp->next)->dma << 8) & 1095216660480ULL; else 
                                                                    
#line 805 
                                                                    tmp_11 = 0ULL;
    
#line 805 
    if (tmp->next != (struct mlx5_cmd_mailbox *)0) 
#line 805 
                                                   tmp_12 = ((tmp->next)->dma >> 8) & 4278190080ULL; else 
                                                                    
#line 805 
                                                                    tmp_12 = 0ULL;
    
#line 805 
    if (tmp->next != (struct mlx5_cmd_mailbox *)0) 
#line 805 
                                                   tmp_13 = ((tmp->next)->dma >> 24) & 16711680ULL; else 
                                                                    
#line 805 
                                                                    tmp_13 = 0ULL;
    
#line 805 
    if (tmp->next != (struct mlx5_cmd_mailbox *)0) 
#line 805 
                                                   tmp_14 = ((tmp->next)->dma >> 40) & 65280ULL; else 
                                                                    
#line 805 
                                                                    tmp_14 = 0ULL;
    
#line 805 
    if (tmp->next != (struct mlx5_cmd_mailbox *)0) 
#line 805 
                                                   tmp_15 = (tmp->next)->dma >> 56; else 
                                                                    
#line 805 
                                                                    tmp_15 = 0ULL;
    
#line 805 
    block->next = ((((((tmp_8 | tmp_9) | tmp_10) | tmp_11) | tmp_12) | tmp_13) | tmp_14) | tmp_15;
  }
  else {
    __u64 tmp_17;
    dma_addr_t tmp_16;
    
#line 805 
    if (tmp->next != (struct mlx5_cmd_mailbox *)0) 
#line 805 
                                                   tmp_16 = (tmp->next)->dma; else 
                                                                    
#line 805 
                                                                    tmp_16 = 0ULL;
    
#line 805 
    tmp_17 = __fswab64(tmp_16);
    
#line 805 
    block->next = tmp_17;
  }
  
#line 806 
  if (0 != 0) 
#line 806 
              block->block_num = ((((unsigned int)((n - i) + -1) << 24) | (((unsigned int)((n - i) + -1) << 8) & 16711680U)) | (((unsigned int)((n - i) + -1) >> 8) & 65280U)) | ((unsigned int)((n - i) + -1) >> 24); else 
                                                                    
#line 806 
                                                                    block->block_num = __fswab32((unsigned int)((n - i) + -1));
  
#line 807 
  head = tmp;
  
#line 795 
  i += 1;
  ldv_40201: 
#line 796 
  ;
  
#line 795 
  if (i < n) 
#line 797 
             goto ldv_40200; else 
#line 800 
                                  goto ldv_40202;
  ldv_40202: 
#line 801 
  ;
  
#line 809 
  msg->next = head;
  
#line 810 
  msg->len = (unsigned int)size;
  
#line 811 
  __retres = msg;
  
#line 811 
  goto return_label;
  err_alloc: 
#line 813 
  ;
  
#line 814 
  goto ldv_40204;
  ldv_40203: 
#line 815 
  ;
  
#line 815 
  tmp = head->next;
  
#line 816 
  free_cmd_box(dev,head);
  
#line 817 
  head = tmp;
  ldv_40204: 
#line 818 
  ;
  
#line 814 
  if (head != (struct mlx5_cmd_mailbox *)0) 
#line 816 
                                            goto ldv_40203; else 
#line 819 
                                                                 goto ldv_40205;
  ldv_40205: 
#line 820 
  ;
  
#line 819 
  kfree((void const *)msg);
  
#line 821 
  tmp_19 = (struct mlx5_cmd_msg *)ERR_PTR((long)err);
  
#line 821 
  __retres = tmp_19;
  return_label: 
#line 821 
                return __retres;
}


#line 824  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/cmd.c"
static void mlx5_free_cmd_msg(struct mlx5_core_dev *dev, struct mlx5_cmd_msg *msg)
{
  struct mlx5_cmd_mailbox *next;
  
#line 827 
  struct mlx5_cmd_mailbox *head = msg->next;
  
#line 830 
  goto ldv_40213;
  ldv_40212: 
#line 831 
  ;
  
#line 831 
  next = head->next;
  
#line 832 
  free_cmd_box(dev,head);
  
#line 833 
  head = next;
  ldv_40213: 
#line 834 
  ;
  
#line 830 
  if (head != (struct mlx5_cmd_mailbox *)0) 
#line 832 
                                            goto ldv_40212; else 
#line 835 
                                                                 goto ldv_40214;
  ldv_40214: 
#line 836 
  ;
  
#line 835 
  kfree((void const *)msg);
  
#line 836 
  return;
}


#line 838  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/cmd.c"
static ssize_t data_write(struct file *filp, char const *buf, size_t count, loff_t *pos)
{
  ssize_t __retres;
  void *ptr;
  int err;
  unsigned long tmp;
  
#line 841 
  struct mlx5_core_dev *dev = (struct mlx5_core_dev *)filp->private_data;
  
#line 842 
  struct mlx5_cmd_debug *dbg = & dev->cmd.dbg;
  
#line 846 
  if (*pos != 0LL) {
    
#line 847 
    __retres = -22L;
    
#line 847 
    goto return_label;
  }
  else ;
  
#line 849 
  kfree((void const *)dbg->in_msg);
  
#line 850 
  dbg->in_msg = (void *)0;
  
#line 851 
  dbg->inlen = (unsigned short)0U;
  
#line 853 
  ptr = kzalloc(count,208U);
  
#line 854 
  if (ptr == (void *)0) {
    
#line 855 
    __retres = -12L;
    
#line 855 
    goto return_label;
  }
  else ;
  
#line 857 
  tmp = copy_from_user(ptr,(void const *)buf,count);
  
#line 857 
  if (tmp != 0UL) {
    
#line 858 
    err = -14;
    
#line 859 
    goto out;
  }
  else ;
  
#line 861 
  dbg->in_msg = ptr;
  
#line 862 
  dbg->inlen = (unsigned short)count;
  
#line 864 
  *pos = (long long)count;
  
#line 866 
  __retres = (long)count;
  
#line 866 
  goto return_label;
  out: 
#line 868 
  ;
  
#line 869 
  kfree((void const *)ptr);
  
#line 870 
  __retres = (long)err;
  return_label: 
#line 870 
                return __retres;
}


#line 873  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/cmd.c"
static ssize_t data_read(struct file *filp, char *buf, size_t count, loff_t *pos)
{
  ssize_t __retres;
  int copy;
  int tmp_0;
  unsigned long tmp_1;
  
#line 876 
  struct mlx5_core_dev *dev = (struct mlx5_core_dev *)filp->private_data;
  
#line 877 
  struct mlx5_cmd_debug *dbg = & dev->cmd.dbg;
  
#line 880 
  if (*pos != 0LL) {
    
#line 881 
    __retres = 0L;
    
#line 881 
    goto return_label;
  }
  else ;
  
#line 883 
  if (dbg->out_msg == (void *)0) {
    
#line 884 
    __retres = -12L;
    
#line 884 
    goto return_label;
  }
  else ;
  {
    int tmp;
    
#line 886 
    int __min1 = (int)count;
    
#line 886 
    int __min2 = (int)dbg->outlen;
    
#line 886 
    if (__min1 < __min2) 
#line 886 
                         tmp = __min1; else 
#line 886 
                                            tmp = __min2;
    
#line 886 
    tmp_0 = tmp;
  }
  
#line 886 
  copy = tmp_0;
  
#line 887 
  tmp_1 = copy_to_user((void *)buf,(void const *)dbg->out_msg,(unsigned long)copy);
  
#line 887 
  if (tmp_1 != 0UL) {
    
#line 888 
    __retres = -14L;
    
#line 888 
    goto return_label;
  }
  else ;
  
#line 890 
  *pos += (long long)copy;
  
#line 892 
  __retres = (long)copy;
  return_label: 
#line 892 
                return __retres;
}


#line 895  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/cmd.c"
static struct file_operations const dfops = {.owner = & __this_module, .llseek = (loff_t (*)(struct file *, loff_t , int ))0, .read = & data_read, .write = & data_write, .read_iter = (ssize_t (*)(struct kiocb *, struct iov_iter *))0, .write_iter = (ssize_t (*)(struct kiocb *, struct iov_iter *))0, .iterate = (int (*)(struct file *, struct dir_context *))0, .poll = (unsigned int (*)(struct file *, struct poll_table_struct *))0, .unlocked_ioctl = (long (*)(struct file *, unsigned int , unsigned long ))0, .compat_ioctl = (long (*)(struct file *, unsigned int , unsigned long ))0, .mmap = (int (*)(struct file *, struct vm_area_struct *))0, .mremap = (int (*)(struct file *, struct vm_area_struct *))0, .open = & simple_open, .flush = (int (*)(struct file *, fl_owner_t ))0, .release = (int (*)(struct inode *, struct file *))0, .fsync = (int (*)(struct file *, loff_t , loff_t , int ))0, .aio_fsync = (int (*)(struct kiocb *, int ))0, .fasync = (int (*)(int , struct file *, int ))0, .lock = (int (*)(struct file *, int , struct file_lock *))0, .sendpage = (ssize_t (*)(struct file *, struct page *, int , size_t , loff_t *, int ))0, .get_unmapped_area = (unsigned long (*)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ))0, .check_flags = (int (*)(int ))0, .flock = (int (*)(struct file *, int , struct file_lock *))0, .splice_write = (ssize_t (*)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ))0, .splice_read = (ssize_t (*)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ))0, .setlease = (int (*)(struct file *, long , struct file_lock **, void **))0, .fallocate = (long (*)(struct file *, int , loff_t , loff_t ))0, .show_fdinfo = (void (*)(struct seq_file *, struct file *))0};

#line 902  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/cmd.c"
static ssize_t outlen_read(struct file *filp, char *buf, size_t count, loff_t *pos)
{
  ssize_t __retres;
  char outlen[8U];
  int err;
  unsigned long tmp;
  
#line 905 
  struct mlx5_core_dev *dev = (struct mlx5_core_dev *)filp->private_data;
  
#line 906 
  struct mlx5_cmd_debug *dbg = & dev->cmd.dbg;
  
#line 910 
  if (*pos != 0LL) {
    
#line 911 
    __retres = 0L;
    
#line 911 
    goto return_label;
  }
  else ;
  
#line 913 
  err = snprintf((char *)(& outlen),8UL,"%d",(int)dbg->outlen);
  
#line 914 
  if (err < 0) {
    
#line 915 
    __retres = (long)err;
    
#line 915 
    goto return_label;
  }
  else ;
  
#line 917 
  tmp = copy_to_user((void *)buf,(void const *)(& outlen),(unsigned long)err);
  
#line 917 
  if (tmp != 0UL) {
    
#line 918 
    __retres = -14L;
    
#line 918 
    goto return_label;
  }
  else ;
  
#line 920 
  *pos += (long long)err;
  
#line 922 
  __retres = (long)err;
  return_label: 
#line 922 
                return __retres;
}


#line 925  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/cmd.c"
static ssize_t outlen_write(struct file *filp, char const *buf, size_t count, loff_t *pos)
{
  ssize_t __retres;
  char outlen_str[8U];
  int outlen;
  void *ptr;
  int err;
  unsigned long tmp;
  
#line 928 
  struct mlx5_core_dev *dev = (struct mlx5_core_dev *)filp->private_data;
  
#line 929 
  struct mlx5_cmd_debug *dbg = & dev->cmd.dbg;
  
#line 935 
  if (*pos != 0LL || count > 6UL) {
    
#line 936 
    __retres = -22L;
    
#line 936 
    goto return_label;
  }
  else ;
  
#line 938 
  kfree((void const *)dbg->out_msg);
  
#line 939 
  dbg->out_msg = (void *)0;
  
#line 940 
  dbg->outlen = (unsigned short)0U;
  
#line 942 
  tmp = copy_from_user((void *)(& outlen_str),(void const *)buf,count);
  
#line 942 
  if (tmp != 0UL) {
    
#line 943 
    __retres = -14L;
    
#line 943 
    goto return_label;
  }
  else ;
  
#line 945 
  outlen_str[7] = (char)0;
  
#line 947 
  err = sscanf((char const *)(& outlen_str),"%d",& outlen);
  
#line 948 
  if (err < 0) {
    
#line 949 
    __retres = (long)err;
    
#line 949 
    goto return_label;
  }
  else ;
  
#line 951 
  ptr = kzalloc((unsigned long)outlen,208U);
  
#line 952 
  if (ptr == (void *)0) {
    
#line 953 
    __retres = -12L;
    
#line 953 
    goto return_label;
  }
  else ;
  
#line 955 
  dbg->out_msg = ptr;
  
#line 956 
  dbg->outlen = (unsigned short)outlen;
  
#line 958 
  *pos = (long long)count;
  
#line 960 
  __retres = (long)count;
  return_label: 
#line 960 
                return __retres;
}


#line 963  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/cmd.c"
static struct file_operations const olfops = {.owner = & __this_module, .llseek = (loff_t (*)(struct file *, loff_t , int ))0, .read = & outlen_read, .write = & outlen_write, .read_iter = (ssize_t (*)(struct kiocb *, struct iov_iter *))0, .write_iter = (ssize_t (*)(struct kiocb *, struct iov_iter *))0, .iterate = (int (*)(struct file *, struct dir_context *))0, .poll = (unsigned int (*)(struct file *, struct poll_table_struct *))0, .unlocked_ioctl = (long (*)(struct file *, unsigned int , unsigned long ))0, .compat_ioctl = (long (*)(struct file *, unsigned int , unsigned long ))0, .mmap = (int (*)(struct file *, struct vm_area_struct *))0, .mremap = (int (*)(struct file *, struct vm_area_struct *))0, .open = & simple_open, .flush = (int (*)(struct file *, fl_owner_t ))0, .release = (int (*)(struct inode *, struct file *))0, .fsync = (int (*)(struct file *, loff_t , loff_t , int ))0, .aio_fsync = (int (*)(struct kiocb *, int ))0, .fasync = (int (*)(int , struct file *, int ))0, .lock = (int (*)(struct file *, int , struct file_lock *))0, .sendpage = (ssize_t (*)(struct file *, struct page *, int , size_t , loff_t *, int ))0, .get_unmapped_area = (unsigned long (*)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ))0, .check_flags = (int (*)(int ))0, .flock = (int (*)(struct file *, int , struct file_lock *))0, .splice_write = (ssize_t (*)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ))0, .splice_read = (ssize_t (*)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ))0, .setlease = (int (*)(struct file *, long , struct file_lock **, void **))0, .fallocate = (long (*)(struct file *, int , loff_t , loff_t ))0, .show_fdinfo = (void (*)(struct seq_file *, struct file *))0};

#line 970  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/cmd.c"
static void set_wqname(struct mlx5_core_dev *dev)
{
  char const *tmp;
  
#line 972 
  struct mlx5_cmd *cmd = & dev->cmd;
  
#line 974 
  tmp = dev_name((struct device const *)(& (dev->pdev)->dev));
  
#line 974 
  ;
  
#line 974 
  snprintf((char *)(& cmd->wq_name),32UL,"mlx5_cmd_%s",tmp);
  
#line 976 
  return;
}


#line 978  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/cmd.c"
static void clean_debug_files(struct mlx5_core_dev *dev)
{
  
#line 980 
  struct mlx5_cmd_debug *dbg = & dev->cmd.dbg;
  
#line 982 
  if (mlx5_debugfs_root == (struct dentry *)0) 
#line 983 
                                               goto return_label; else ;
  
#line 985 
  mlx5_cmdif_debugfs_cleanup(dev);
  
#line 986 
  debugfs_remove_recursive(dbg->dbg_root);
  return_label: 
#line 987 
                return;
}


#line 989  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/cmd.c"
static int create_debugfs_files(struct mlx5_core_dev *dev)
{
  int __retres;
  
#line 991 
  struct mlx5_cmd_debug *dbg = & dev->cmd.dbg;
  
#line 992 
  int err = -12;
  
#line 994 
  if (mlx5_debugfs_root == (struct dentry *)0) {
    
#line 995 
    __retres = 0;
    
#line 995 
    goto return_label;
  }
  else ;
  
#line 997 
  dbg->dbg_root = debugfs_create_dir("cmd",dev->priv.dbg_root);
  
#line 998 
  if (dbg->dbg_root == (struct dentry *)0) {
    
#line 999 
    __retres = err;
    
#line 999 
    goto return_label;
  }
  else ;
  
#line 1001 
  dbg->dbg_in = ldv_debugfs_create_file_68("in",(unsigned short)256,dbg->dbg_root,(void *)dev,& dfops);
  
#line 1003 
  if (dbg->dbg_in == (struct dentry *)0) 
#line 1004 
                                         goto err_dbg; else ;
  
#line 1006 
  dbg->dbg_out = ldv_debugfs_create_file_69("out",(unsigned short)128,dbg->dbg_root,(void *)dev,& dfops);
  
#line 1008 
  if (dbg->dbg_out == (struct dentry *)0) 
#line 1009 
                                          goto err_dbg; else ;
  
#line 1011 
  dbg->dbg_outlen = ldv_debugfs_create_file_70("out_len",(unsigned short)384,dbg->dbg_root,(void *)dev,& olfops);
  
#line 1013 
  if (dbg->dbg_outlen == (struct dentry *)0) 
#line 1014 
                                             goto err_dbg; else ;
  
#line 1016 
  dbg->dbg_status = debugfs_create_u8("status",(unsigned short)384,dbg->dbg_root,& dbg->status);
  
#line 1018 
  if (dbg->dbg_status == (struct dentry *)0) 
#line 1019 
                                             goto err_dbg; else ;
  
#line 1021 
  dbg->dbg_run = ldv_debugfs_create_file_71("run",(unsigned short)128,dbg->dbg_root,(void *)dev,& fops);
  
#line 1022 
  if (dbg->dbg_run == (struct dentry *)0) 
#line 1023 
                                          goto err_dbg; else ;
  
#line 1025 
  mlx5_cmdif_debugfs_init(dev);
  
#line 1027 
  __retres = 0;
  
#line 1027 
  goto return_label;
  err_dbg: 
#line 1029 
  ;
  
#line 1030 
  clean_debug_files(dev);
  
#line 1031 
  __retres = err;
  return_label: 
#line 1031 
                return __retres;
}


#line 1034  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/cmd.c"
void mlx5_cmd_use_events(struct mlx5_core_dev *dev)
{
  int i;
  
#line 1036 
  struct mlx5_cmd *cmd = & dev->cmd;
  
#line 1039 
  i = 0;
  
#line 1039 
  goto ldv_40282;
  ldv_40281: 
#line 1040 
  ;
  
#line 1040 
  down(& cmd->sem);
  
#line 1039 
  i += 1;
  ldv_40282: 
#line 1040 
  ;
  
#line 1039 
  if (cmd->max_reg_cmds > i) 
#line 1041 
                             goto ldv_40281; else 
#line 1044 
                                                  goto ldv_40283;
  ldv_40283: 
#line 1045 
  ;
  
#line 1042 
  down(& cmd->pages_sem);
  
#line 1044 
  flush_workqueue(cmd->wq);
  
#line 1046 
  cmd->mode = 1;
  
#line 1048 
  up(& cmd->pages_sem);
  
#line 1049 
  i = 0;
  
#line 1049 
  goto ldv_40285;
  ldv_40284: 
#line 1050 
  ;
  
#line 1050 
  up(& cmd->sem);
  
#line 1049 
  i += 1;
  ldv_40285: 
#line 1050 
  ;
  
#line 1049 
  if (cmd->max_reg_cmds > i) 
#line 1051 
                             goto ldv_40284; else 
#line 1054 
                                                  goto ldv_40286;
  ldv_40286: 
#line 1055 
  ;
  
#line 1056 
  return;
}


#line 1053  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/cmd.c"
void mlx5_cmd_use_polling(struct mlx5_core_dev *dev)
{
  int i;
  
#line 1055 
  struct mlx5_cmd *cmd = & dev->cmd;
  
#line 1058 
  i = 0;
  
#line 1058 
  goto ldv_40293;
  ldv_40292: 
#line 1059 
  ;
  
#line 1059 
  down(& cmd->sem);
  
#line 1058 
  i += 1;
  ldv_40293: 
#line 1059 
  ;
  
#line 1058 
  if (cmd->max_reg_cmds > i) 
#line 1060 
                             goto ldv_40292; else 
#line 1063 
                                                  goto ldv_40294;
  ldv_40294: 
#line 1064 
  ;
  
#line 1061 
  down(& cmd->pages_sem);
  
#line 1063 
  flush_workqueue(cmd->wq);
  
#line 1064 
  cmd->mode = 0;
  
#line 1066 
  up(& cmd->pages_sem);
  
#line 1067 
  i = 0;
  
#line 1067 
  goto ldv_40296;
  ldv_40295: 
#line 1068 
  ;
  
#line 1068 
  up(& cmd->sem);
  
#line 1067 
  i += 1;
  ldv_40296: 
#line 1068 
  ;
  
#line 1067 
  if (cmd->max_reg_cmds > i) 
#line 1069 
                             goto ldv_40295; else 
#line 1072 
                                                  goto ldv_40297;
  ldv_40297: 
#line 1073 
  ;
  
#line 1074 
  return;
}


#line 1071  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/cmd.c"
static void free_msg(struct mlx5_core_dev *dev, struct mlx5_cmd_msg *msg)
{
  unsigned long flags;
  
#line 1075 
  if (msg->cache != (struct cache_ent *)0) {
    
#line 1076 
    ldv___ldv_spin_lock_72(& (msg->cache)->lock);
    
#line 1077 
    list_add_tail(& msg->list,& (msg->cache)->head);
    
#line 1078 
    ldv_spin_unlock_irqrestore_73(& (msg->cache)->lock,flags);
  }
  else 
#line 1080 
       mlx5_free_cmd_msg(dev,msg);
  
#line 1081 
  return;
}


#line 1084  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/cmd.c"
void mlx5_cmd_comp_handler(struct mlx5_core_dev *dev, unsigned long vector)
{
  struct mlx5_cmd_work_ent *ent;
  void (*callback)(int , void *);
  void *context;
  int err;
  int i;
  s64 ds;
  struct mlx5_cmd_stats *stats;
  unsigned long flags;
  int tmp_3;
  
#line 1086 
  struct mlx5_cmd *cmd = & dev->cmd;
  
#line 1096 
  i = 0;
  
#line 1096 
  goto ldv_40323;
  ldv_40322: 
#line 1097 
  ;
  
#line 1097 
  if (0 != 0) {
    int tmp_1;
    
#line 1097 
    tmp_1 = constant_test_bit((long)i,(unsigned long const volatile *)(& vector));
    
#line 1097 
    tmp_3 = tmp_1 != 0;
  }
  else {
    int tmp_2;
    
#line 1097 
    tmp_2 = variable_test_bit((long)i,(unsigned long const volatile *)(& vector));
    
#line 1097 
    tmp_3 = tmp_2 != 0;
  }
  
#line 1097 
  if (tmp_3) {
    struct semaphore *sem;
    
#line 1100 
    ent = cmd->ent_arr[i];
    
#line 1101 
    if (ent->page_queue != 0) 
#line 1102 
                              sem = & cmd->pages_sem; else 
#line 1104 
                                                           sem = & cmd->sem;
    
#line 1105 
    ent->ts2 = ktime_get_ns();
    
#line 1106 
    memcpy((void *)(& (ent->out)->first.data),(void const *)(& (ent->lay)->out),16UL);
    
#line 1107 
    dump_command(dev,ent,0);
    
#line 1108 
    if (ent->ret == 0) {
      
#line 1109 
      if (cmd->checksum_disabled == 0) 
#line 1110 
                                       ent->ret = verify_signature(ent); else 
                                                                    
#line 1112 
                                                                    ent->ret = 0;
      
#line 1113 
      ent->status = (unsigned char)((int)(ent->lay)->status_own >> 1);
      {
        
#line 1114 
        struct _ddebug descriptor = {.modname = "mlx5_core", .function = "mlx5_cmd_comp_handler", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/cmd.c", .format = "%s:%s:%d:(pid %d): ", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1115U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
        
#line 1114 
        if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
          char const *tmp;
          struct task_struct *tmp_0;
          
#line 1114 
          ;
          
#line 1114 
          tmp = deliv_status_to_str((unsigned char)((int)ent->status));
          
#line 1114 
          ;
          
#line 1114 
          tmp_0 = get_current();
          
#line 1114 
          ;
          
#line 1114 
          __dynamic_pr_debug(& descriptor,"%s:%s:%d:(pid %d): ",(char *)(& dev->priv.name),"mlx5_cmd_comp_handler",1115,tmp_0->pid,ent->ret,tmp,(int)ent->status);
        }
        else ;
      }
    }
    else ;
    
#line 1117 
    free_ent(cmd,ent->idx);
    
#line 1118 
    if (ent->callback != (void (*)(int , void *))0) {
      
#line 1119 
      ds = (long long)(ent->ts2 - ent->ts1);
      
#line 1120 
      if ((unsigned int)ent->op <= 2335U) {
        
#line 1121 
        stats = & cmd->stats[(int)ent->op];
        
#line 1122 
        ldv___ldv_spin_lock_74(& stats->lock);
        
#line 1123 
        stats->sum += (unsigned long long)ds;
        
#line 1124 
        stats->n += 1ULL;
        
#line 1125 
        ldv_spin_unlock_irqrestore_75(& stats->lock,flags);
      }
      else ;
      
#line 1128 
      callback = ent->callback;
      
#line 1129 
      context = ent->context;
      
#line 1130 
      err = ent->ret;
      
#line 1131 
      if (err == 0) 
#line 1132 
                    err = mlx5_copy_from_msg(ent->uout,ent->out,ent->uout_size); else ;
      
#line 1136 
      mlx5_free_cmd_msg(dev,ent->out);
      
#line 1137 
      free_msg(dev,ent->in);
      
#line 1139 
      free_cmd(ent);
      
#line 1140 
      (*callback)(err,context);
    }
    else 
#line 1142 
         complete(& ent->done);
    
#line 1144 
    up(sem);
  }
  else ;
  
#line 1096 
  i += 1;
  ldv_40323: 
#line 1097 
  ;
  
#line 1096 
  if (1 << (int)cmd->log_sz > i) 
#line 1098 
                                 goto ldv_40322; else 
#line 1101 
                                                      goto ldv_40324;
  ldv_40324: 
#line 1102 
  ;
  
#line 1103 
  return;
}


#line 1148  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/cmd.c"
static char const __kstrtab_mlx5_cmd_comp_handler[22U] = {(char)'m', (char)'l', (char)'x', (char)'5', (char)'_', (char)'c', (char)'m', (char)'d', (char)'_', (char)'c', (char)'o', (char)'m', (char)'p', (char)'_', (char)'h', (char)'a', (char)'n', (char)'d', (char)'l', (char)'e', (char)'r', (char)'\000'};

#line 1148 
struct kernel_symbol const __ksymtab_mlx5_cmd_comp_handler;


#line 1148  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/cmd.c"
struct kernel_symbol const __ksymtab_mlx5_cmd_comp_handler = {.value = (unsigned long)(& mlx5_cmd_comp_handler), .name = (char const *)(& __kstrtab_mlx5_cmd_comp_handler)};

#line 1150  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/cmd.c"
static int status_to_err(u8 status)
{
  int tmp;
  
#line 1152 
  if ((unsigned int)status != 0U) 
#line 1152 
                                  tmp = -1; else 
#line 1152 
                                                 tmp = 0;
  
#line 1152 
  return tmp;
}


#line 1155  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/cmd.c"
static struct mlx5_cmd_msg *alloc_msg(struct mlx5_core_dev *dev, int in_size, gfp_t gfp)
{
  bool tmp_2;
  
#line 1158 
  struct mlx5_cmd_msg *msg = ERR_PTR(-12L);
  
#line 1159 
  struct mlx5_cmd *cmd = & dev->cmd;
  
#line 1160 
  struct cache_ent *ent = (struct cache_ent *)0;
  
#line 1162 
  if ((unsigned int)in_size + 4294966767U <= 4194303U) 
#line 1163 
                                                       ent = & cmd->cache.large;
  else 
    
#line 1164 
    if ((unsigned int)in_size + 4294967279U <= 511U) 
#line 1165 
                                                     ent = & cmd->cache.med; else ;
  
#line 1167 
  if (ent != (struct cache_ent *)0) {
    int tmp_1;
    
#line 1168 
    ldv_spin_lock_irq_76(& ent->lock);
    
#line 1169 
    tmp_1 = list_empty((struct list_head const *)(& ent->head));
    
#line 1169 
    if (tmp_1 == 0) {
      struct mlx5_cmd_msg *tmp_0;
      {
        
#line 1170 
        struct list_head const *__mptr = (struct list_head const *)ent->head.next;
        
#line 1170 
        tmp_0 = (struct mlx5_cmd_msg *)__mptr;
      }
      
#line 1170 
      msg = tmp_0;
      
#line 1174 
      msg->len = (unsigned int)in_size;
      
#line 1175 
      list_del(& msg->list);
    }
    else ;
    
#line 1177 
    ldv_spin_unlock_irq_77(& ent->lock);
  }
  else ;
  
#line 1180 
  tmp_2 = IS_ERR((void const *)msg);
  
#line 1180 
  if ((int)tmp_2 != 0) 
#line 1181 
                       msg = mlx5_alloc_cmd_msg(dev,gfp,in_size); else ;
  
#line 1183 
  return msg;
}


#line 1186  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/cmd.c"
static int is_manage_pages(struct mlx5_inbox_hdr *in)
{
  int tmp_0;
  
#line 1188 
  if (0 != 0) 
#line 1188 
              tmp_0 = (((int)in->opcode << 8) | ((int)in->opcode >> 8)) == 264;
  else {
    __u16 tmp;
    
#line 1188 
    tmp = __fswab16((unsigned short)((int)in->opcode));
    
#line 1188 
    tmp_0 = (unsigned int)tmp == 264U;
  }
  
#line 1188 
  return tmp_0;
}


#line 1191  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/cmd.c"
static int cmd_exec(struct mlx5_core_dev *dev, void *in, int in_size, void *out, int out_size, void (*callback)(int , void *), void *context)
{
  int __retres;
  struct mlx5_cmd_msg *inb_0;
  struct mlx5_cmd_msg *outb_0;
  int pages_queue;
  gfp_t gfp;
  int err;
  bool tmp_0;
  bool tmp_3;
  
#line 1199 
  u8 status = (unsigned char)0U;
  
#line 1201 
  pages_queue = is_manage_pages((struct mlx5_inbox_hdr *)in);
  
#line 1202 
  if (callback != (void (*)(int , void *))0) 
#line 1202 
                                             gfp = 32U; else 
#line 1202 
                                                             gfp = 208U;
  
#line 1204 
  inb_0 = alloc_msg(dev,in_size,gfp);
  
#line 1205 
  tmp_0 = IS_ERR((void const *)inb_0);
  
#line 1205 
  if ((int)tmp_0 != 0) {
    long tmp;
    
#line 1206 
    tmp = PTR_ERR((void const *)inb_0);
    
#line 1206 
    err = (int)tmp;
    
#line 1207 
    __retres = err;
    
#line 1207 
    goto return_label;
  }
  else ;
  
#line 1210 
  err = mlx5_copy_to_msg(inb_0,in,in_size);
  
#line 1211 
  if (err != 0) {
    struct task_struct *tmp_1;
    
#line 1212 
    ;
    
#line 1212 
    tmp_1 = get_current();
    
#line 1212 
    ;
    
#line 1212 
    printk("\001",(char *)(& dev->priv.name),"cmd_exec",1212,tmp_1->pid,err);
    
#line 1213 
    goto out_in;
  }
  else ;
  
#line 1216 
  outb_0 = mlx5_alloc_cmd_msg(dev,gfp,out_size);
  
#line 1217 
  tmp_3 = IS_ERR((void const *)outb_0);
  
#line 1217 
  if ((int)tmp_3 != 0) {
    long tmp_2;
    
#line 1218 
    tmp_2 = PTR_ERR((void const *)outb_0);
    
#line 1218 
    err = (int)tmp_2;
    
#line 1219 
    goto out_in;
  }
  else ;
  
#line 1222 
  err = mlx5_cmd_invoke(dev,inb_0,outb_0,out,out_size,callback,context,pages_queue,& status);
  
#line 1224 
  if (err != 0) 
#line 1225 
                goto out_out; else ;
  {
    
#line 1227 
    struct _ddebug descriptor = {.modname = "mlx5_core", .function = "cmd_exec", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/cmd.c", .format = "%s:%s:%d:(pid %d): ", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1227U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 1227 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
      struct task_struct *tmp_4;
      
#line 1227 
      ;
      
#line 1227 
      ;
      
#line 1227 
      tmp_4 = get_current();
      
#line 1227 
      ;
      
#line 1227 
      __dynamic_pr_debug(& descriptor,"%s:%s:%d:(pid %d): ",(char *)(& dev->priv.name),"cmd_exec",1227,tmp_4->pid,err,(int)status);
    }
    else ;
  }
  
#line 1228 
  if ((unsigned int)status != 0U) {
    
#line 1229 
    err = status_to_err((unsigned char)((int)status));
    
#line 1230 
    goto out_out;
  }
  else ;
  
#line 1233 
  if (callback == (void (*)(int , void *))0) 
#line 1234 
                                             err = mlx5_copy_from_msg(out,outb_0,out_size); else ;
  out_out: 
#line 1236 
  ;
  
#line 1237 
  if (callback == (void (*)(int , void *))0) 
#line 1238 
                                             mlx5_free_cmd_msg(dev,outb_0); else ;
  out_in: 
#line 1240 
  ;
  
#line 1241 
  if (callback == (void (*)(int , void *))0) 
#line 1242 
                                             free_msg(dev,inb_0); else ;
  
#line 1243 
  __retres = err;
  return_label: 
#line 1243 
                return __retres;
}


#line 1246  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/cmd.c"
int mlx5_cmd_exec(struct mlx5_core_dev *dev, void *in, int in_size, void *out, int out_size)
{
  int tmp;
  
#line 1249 
  tmp = cmd_exec(dev,in,in_size,out,out_size,(void (*)(int , void *))0,(void *)0);
  
#line 1249 
  return tmp;
}


#line 1251  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/cmd.c"
static char const __kstrtab_mlx5_cmd_exec[14U] = {(char)'m', (char)'l', (char)'x', (char)'5', (char)'_', (char)'c', (char)'m', (char)'d', (char)'_', (char)'e', (char)'x', (char)'e', (char)'c', (char)'\000'};

#line 1251 
struct kernel_symbol const __ksymtab_mlx5_cmd_exec;


#line 1251  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/cmd.c"
struct kernel_symbol const __ksymtab_mlx5_cmd_exec = {.value = (unsigned long)(& mlx5_cmd_exec), .name = (char const *)(& __kstrtab_mlx5_cmd_exec)};

#line 1253  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/cmd.c"
int mlx5_cmd_exec_cb(struct mlx5_core_dev *dev, void *in, int in_size, void *out, int out_size, void (*callback)(int , void *), void *context)
{
  int tmp;
  
#line 1257 
  tmp = cmd_exec(dev,in,in_size,out,out_size,callback,context);
  
#line 1257 
  return tmp;
}


#line 1259  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/cmd.c"
static char const __kstrtab_mlx5_cmd_exec_cb[17U] = {(char)'m', (char)'l', (char)'x', (char)'5', (char)'_', (char)'c', (char)'m', (char)'d', (char)'_', (char)'e', (char)'x', (char)'e', (char)'c', (char)'_', (char)'c', (char)'b', (char)'\000'};

#line 1259 
struct kernel_symbol const __ksymtab_mlx5_cmd_exec_cb;


#line 1259  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/cmd.c"
struct kernel_symbol const __ksymtab_mlx5_cmd_exec_cb = {.value = (unsigned long)(& mlx5_cmd_exec_cb), .name = (char const *)(& __kstrtab_mlx5_cmd_exec_cb)};

#line 1261  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/cmd.c"
static void destroy_msg_cache(struct mlx5_core_dev *dev)
{
  struct mlx5_cmd_msg *msg;
  struct mlx5_cmd_msg *n;
  struct mlx5_cmd_msg *tmp;
  struct mlx5_cmd_msg *tmp_0;
  struct mlx5_cmd_msg *tmp_1;
  struct mlx5_cmd_msg *tmp_2;
  struct mlx5_cmd_msg *tmp_3;
  struct mlx5_cmd_msg *tmp_4;
  
#line 1263 
  struct mlx5_cmd *cmd = & dev->cmd;
  {
    
#line 1267 
    struct list_head const *__mptr = (struct list_head const *)cmd->cache.large.head.next;
    
#line 1267 
    tmp = (struct mlx5_cmd_msg *)__mptr;
  }
  
#line 1267 
  msg = tmp;
  {
    
#line 1267 
    struct list_head const *__mptr_0 = (struct list_head const *)msg->list.next;
    
#line 1267 
    tmp_0 = (struct mlx5_cmd_msg *)__mptr_0;
  }
  
#line 1268 
  n = tmp_0;
  
#line 1267 
  goto ldv_40421;
  ldv_40420: 
#line 1268 
  ;
  
#line 1268 
  list_del(& msg->list);
  
#line 1269 
  mlx5_free_cmd_msg(dev,msg);
  
#line 1267 
  msg = n;
  {
    
#line 1267 
    struct list_head const *__mptr_1 = (struct list_head const *)n->list.next;
    
#line 1267 
    tmp_1 = (struct mlx5_cmd_msg *)__mptr_1;
  }
  
#line 1267 
  n = tmp_1;
  ldv_40421: 
#line 1269 
  ;
  
#line 1267 
  if (& msg->list != & cmd->cache.large.head) 
#line 1269 
                                              goto ldv_40420; else 
#line 1272 
                                                                   goto ldv_40422;
  ldv_40422: 
#line 1273 
  ;
  {
    
#line 1272 
    struct list_head const *__mptr_2 = (struct list_head const *)cmd->cache.med.head.next;
    
#line 1272 
    tmp_2 = (struct mlx5_cmd_msg *)__mptr_2;
  }
  
#line 1272 
  msg = tmp_2;
  {
    
#line 1272 
    struct list_head const *__mptr_3 = (struct list_head const *)msg->list.next;
    
#line 1272 
    tmp_3 = (struct mlx5_cmd_msg *)__mptr_3;
  }
  
#line 1273 
  n = tmp_3;
  
#line 1272 
  goto ldv_40430;
  ldv_40429: 
#line 1273 
  ;
  
#line 1273 
  list_del(& msg->list);
  
#line 1274 
  mlx5_free_cmd_msg(dev,msg);
  
#line 1272 
  msg = n;
  {
    
#line 1272 
    struct list_head const *__mptr_4 = (struct list_head const *)n->list.next;
    
#line 1272 
    tmp_4 = (struct mlx5_cmd_msg *)__mptr_4;
  }
  
#line 1272 
  n = tmp_4;
  ldv_40430: 
#line 1274 
  ;
  
#line 1272 
  if (& msg->list != & cmd->cache.med.head) 
#line 1274 
                                            goto ldv_40429; else 
#line 1277 
                                                                 goto ldv_40431;
  ldv_40431: 
#line 1278 
  ;
  
#line 1279 
  return;
}


#line 1278  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/cmd.c"
static int create_msg_cache(struct mlx5_core_dev *dev)
{
  int __retres;
  struct mlx5_cmd_msg *msg;
  int err;
  int i;
  bool tmp_0;
  bool tmp_2;
  
#line 1280 
  struct mlx5_cmd *cmd = & dev->cmd;
  
#line 1285 
  spinlock_check(& cmd->cache.large.lock);
  {
    struct lock_class_key __key;
    
#line 1285 
    __raw_spin_lock_init(& cmd->cache.large.lock.__anonCompField_spinlock_18.rlock,"&(&cmd->cache.large.lock)->rlock",& __key);
  }
  
#line 1286 
  INIT_LIST_HEAD(& cmd->cache.large.head);
  
#line 1287 
  spinlock_check(& cmd->cache.med.lock);
  {
    struct lock_class_key __key_0;
    
#line 1287 
    __raw_spin_lock_init(& cmd->cache.med.lock.__anonCompField_spinlock_18.rlock,"&(&cmd->cache.med.lock)->rlock",& __key_0);
  }
  
#line 1288 
  INIT_LIST_HEAD(& cmd->cache.med.head);
  
#line 1290 
  i = 0;
  
#line 1290 
  goto ldv_40443;
  ldv_40442: 
#line 1291 
  ;
  
#line 1291 
  msg = mlx5_alloc_cmd_msg(dev,208U,4194832);
  
#line 1292 
  tmp_0 = IS_ERR((void const *)msg);
  
#line 1292 
  if ((int)tmp_0 != 0) {
    long tmp;
    
#line 1293 
    tmp = PTR_ERR((void const *)msg);
    
#line 1293 
    err = (int)tmp;
    
#line 1294 
    goto ex_err;
  }
  else ;
  
#line 1296 
  msg->cache = & cmd->cache.large;
  
#line 1297 
  list_add_tail(& msg->list,& cmd->cache.large.head);
  
#line 1290 
  i += 1;
  ldv_40443: 
#line 1291 
  ;
  
#line 1290 
  if (i <= 1) 
#line 1292 
              goto ldv_40442; else 
#line 1295 
                                   goto ldv_40444;
  ldv_40444: 
#line 1296 
  ;
  
#line 1300 
  i = 0;
  
#line 1300 
  goto ldv_40446;
  ldv_40445: 
#line 1301 
  ;
  
#line 1301 
  msg = mlx5_alloc_cmd_msg(dev,208U,528);
  
#line 1302 
  tmp_2 = IS_ERR((void const *)msg);
  
#line 1302 
  if ((int)tmp_2 != 0) {
    long tmp_1;
    
#line 1303 
    tmp_1 = PTR_ERR((void const *)msg);
    
#line 1303 
    err = (int)tmp_1;
    
#line 1304 
    goto ex_err;
  }
  else ;
  
#line 1306 
  msg->cache = & cmd->cache.med;
  
#line 1307 
  list_add_tail(& msg->list,& cmd->cache.med.head);
  
#line 1300 
  i += 1;
  ldv_40446: 
#line 1301 
  ;
  
#line 1300 
  if (i <= 63) 
#line 1302 
               goto ldv_40445; else 
#line 1305 
                                    goto ldv_40447;
  ldv_40447: 
#line 1306 
  ;
  
#line 1310 
  __retres = 0;
  
#line 1310 
  goto return_label;
  ex_err: 
#line 1312 
  ;
  
#line 1313 
  destroy_msg_cache(dev);
  
#line 1314 
  __retres = err;
  return_label: 
#line 1314 
                return __retres;
}


#line 1317  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/cmd.c"
static int alloc_cmd_page(struct mlx5_core_dev *dev, struct mlx5_cmd *cmd)
{
  int __retres;
  
#line 1319 
  struct device *ddev = & (dev->pdev)->dev;
  
#line 1321 
  cmd->cmd_alloc_buf = dma_zalloc_coherent(ddev,4096UL,& cmd->alloc_dma,208U);
  
#line 1323 
  if (cmd->cmd_alloc_buf == (void *)0) {
    
#line 1324 
    __retres = -12;
    
#line 1324 
    goto return_label;
  }
  else ;
  
#line 1327 
  if (((unsigned long)cmd->cmd_alloc_buf & 4095UL) == 0UL) {
    
#line 1328 
    cmd->cmd_buf = cmd->cmd_alloc_buf;
    
#line 1329 
    cmd->dma = cmd->alloc_dma;
    
#line 1330 
    cmd->alloc_size = 4096;
    
#line 1331 
    __retres = 0;
    
#line 1331 
    goto return_label;
  }
  else ;
  
#line 1334 
  dma_free_attrs(ddev,4096UL,cmd->cmd_alloc_buf,cmd->alloc_dma,(struct dma_attrs *)0);
  
#line 1336 
  cmd->cmd_alloc_buf = dma_zalloc_coherent(ddev,8191UL,& cmd->alloc_dma,208U);
  
#line 1339 
  if (cmd->cmd_alloc_buf == (void *)0) {
    
#line 1340 
    __retres = -12;
    
#line 1340 
    goto return_label;
  }
  else ;
  
#line 1342 
  cmd->cmd_buf = (void *)(((unsigned long)cmd->cmd_alloc_buf + 4095UL) & 18446744073709547520UL);
  
#line 1343 
  cmd->dma = (cmd->alloc_dma + 4095ULL) & 18446744073709547520ULL;
  
#line 1344 
  cmd->alloc_size = 8191;
  
#line 1345 
  __retres = 0;
  return_label: 
#line 1345 
                return __retres;
}


#line 1348  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/cmd.c"
static void free_cmd_page(struct mlx5_core_dev *dev, struct mlx5_cmd *cmd)
{
  
#line 1350 
  struct device *ddev = & (dev->pdev)->dev;
  
#line 1352 
  dma_free_attrs(ddev,(unsigned long)cmd->alloc_size,cmd->cmd_alloc_buf,cmd->alloc_dma,(struct dma_attrs *)0);
  
#line 1353 
  return;
}


#line 1356  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/cmd.c"
int mlx5_cmd_init(struct mlx5_core_dev *dev)
{
  int __retres;
  unsigned int tmp_70;
  u32 cmd_h;
  u32 cmd_l;
  u16 cmd_if_rev;
  int err;
  int i;
  unsigned int tmp_71;
  unsigned int tmp_72;
  struct workqueue_struct *tmp_75;
  
#line 1358 
  int size = 576;
  
#line 1359 
  if (0 != 0) {
    unsigned int tmp_68;
    
#line 1359 
    if (size != 1) {
      unsigned int tmp_67;
      
#line 1359 
      if (0 != 0) {
        unsigned int tmp_65;
        
#line 1359 
        if (size + -1 <= 0) {
          int tmp;
          
#line 1359 
          tmp = ____ilog2_NaN();
          
#line 1359 
          tmp_65 = (unsigned int)((int)(1UL << (tmp + 1)));
        }
        else {
          unsigned int tmp_64;
          
#line 1359 
          if (size + -1 >= 0) {
            unsigned int tmp_63;
            
#line 1359 
            if (((unsigned long long)(size + -1) & 4611686018427387904ULL) == 0ULL) {
              unsigned int tmp_62;
              
#line 1359 
              if (((unsigned long long)(size + -1) & 2305843009213693952ULL) == 0ULL) {
                unsigned int tmp_61;
                
#line 1359 
                if (((unsigned long long)(size + -1) & 1152921504606846976ULL) == 0ULL) {
                  unsigned int tmp_60;
                  
#line 1359 
                  if (((unsigned long long)(size + -1) & 576460752303423488ULL) == 0ULL) {
                    unsigned int tmp_59;
                    
#line 1359 
                    if (((unsigned long long)(size + -1) & 288230376151711744ULL) == 0ULL) {
                      unsigned int tmp_58;
                      
#line 1359 
                      if (((unsigned long long)(size + -1) & 144115188075855872ULL) == 0ULL) {
                        unsigned int tmp_57;
                        
#line 1359 
                        if (((unsigned long long)(size + -1) & 72057594037927936ULL) == 0ULL) {
                          unsigned int tmp_56;
                          
#line 1359 
                          if (((unsigned long long)(size + -1) & 36028797018963968ULL) == 0ULL) {
                            unsigned int tmp_55;
                            
#line 1359 
                            if (((unsigned long long)(size + -1) & 18014398509481984ULL) == 0ULL) {
                              unsigned int tmp_54;
                              
#line 1359 
                              if (((unsigned long long)(size + -1) & 9007199254740992ULL) == 0ULL) {
                                unsigned int tmp_53;
                                
#line 1359 
                                if (((unsigned long long)(size + -1) & 4503599627370496ULL) == 0ULL) {
                                  unsigned int tmp_52;
                                  
#line 1359 
                                  if (((unsigned long long)(size + -1) & 2251799813685248ULL) == 0ULL) {
                                    unsigned int tmp_51;
                                    
#line 1359 
                                    if (((unsigned long long)(size + -1) & 1125899906842624ULL) == 0ULL) {
                                      unsigned int tmp_50;
                                      
#line 1359 
                                      if (((unsigned long long)(size + -1) & 562949953421312ULL) == 0ULL) {
                                        unsigned int tmp_49;
                                        
#line 1359 
                                        if (((unsigned long long)(size + -1) & 281474976710656ULL) == 0ULL) {
                                          unsigned int tmp_48;
                                          
#line 1359 
                                          if (((unsigned long long)(size + -1) & 140737488355328ULL) == 0ULL) {
                                            unsigned int tmp_47;
                                            
#line 1359 
                                            if (((unsigned long long)(size + -1) & 70368744177664ULL) == 0ULL) {
                                              unsigned int tmp_46;
                                              
#line 1359 
                                              if (((unsigned long long)(size + -1) & 35184372088832ULL) == 0ULL) {
                                                unsigned int tmp_45;
                                                
#line 1359 
                                                if (((unsigned long long)(size + -1) & 17592186044416ULL) == 0ULL) {
                                                  unsigned int tmp_44;
                                                  
#line 1359 
                                                  if (((unsigned long long)(size + -1) & 8796093022208ULL) == 0ULL) {
                                                    unsigned int tmp_43;
                                                    
#line 1359 
                                                    if (((unsigned long long)(size + -1) & 4398046511104ULL) == 0ULL) {
                                                      unsigned int tmp_42;
                                                      
#line 1359 
                                                      if (((unsigned long long)(size + -1) & 2199023255552ULL) == 0ULL) {
                                                        unsigned int tmp_41;
                                                        
#line 1359 
                                                        if (((unsigned long long)(size + -1) & 1099511627776ULL) == 0ULL) {
                                                          unsigned int tmp_40;
                                                          
#line 1359 
                                                          if (((unsigned long long)(size + -1) & 549755813888ULL) == 0ULL) {
                                                            unsigned int tmp_39;
                                                            
#line 1359 
                                                            if (((unsigned long long)(size + -1) & 274877906944ULL) == 0ULL) {
                                                              unsigned int tmp_38;
                                                              
#line 1359 
                                                              if (((unsigned long long)(size + -1) & 137438953472ULL) == 0ULL) {
                                                                unsigned int tmp_37;
                                                                
#line 1359 
                                                                if (((unsigned long long)(size + -1) & 68719476736ULL) == 0ULL) {
                                                                  unsigned int tmp_36;
                                                                  
#line 1359 
                                                                  if (
                                                                    ((unsigned long long)(size + -1) & 34359738368ULL) == 0ULL) {
                                                                    unsigned int tmp_35;
                                                                    
#line 1359 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 17179869184ULL) == 0ULL) {
                                                                    unsigned int tmp_34;
                                                                    
#line 1359 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 8589934592ULL) == 0ULL) {
                                                                    unsigned int tmp_33;
                                                                    
#line 1359 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 4294967296ULL) == 0ULL) {
                                                                    unsigned int tmp_32;
                                                                    
#line 1359 
                                                                    if (
                                                                    size + -1 >= 0) {
                                                                    unsigned int tmp_31;
                                                                    
#line 1359 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 1073741824ULL) == 0ULL) {
                                                                    int tmp_30;
                                                                    
#line 1359 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 536870912ULL) == 0ULL) {
                                                                    int tmp_29;
                                                                    
#line 1359 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 268435456ULL) == 0ULL) {
                                                                    int tmp_28;
                                                                    
#line 1359 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 134217728ULL) == 0ULL) {
                                                                    int tmp_27;
                                                                    
#line 1359 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 67108864ULL) == 0ULL) {
                                                                    int tmp_26;
                                                                    
#line 1359 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 33554432ULL) == 0ULL) {
                                                                    int tmp_25;
                                                                    
#line 1359 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 16777216ULL) == 0ULL) {
                                                                    int tmp_24;
                                                                    
#line 1359 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 8388608ULL) == 0ULL) {
                                                                    int tmp_23;
                                                                    
#line 1359 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 4194304ULL) == 0ULL) {
                                                                    int tmp_22;
                                                                    
#line 1359 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 2097152ULL) == 0ULL) {
                                                                    int tmp_21;
                                                                    
#line 1359 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 1048576ULL) == 0ULL) {
                                                                    int tmp_20;
                                                                    
#line 1359 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 524288ULL) == 0ULL) {
                                                                    int tmp_19;
                                                                    
#line 1359 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 262144ULL) == 0ULL) {
                                                                    int tmp_18;
                                                                    
#line 1359 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 131072ULL) == 0ULL) {
                                                                    int tmp_17;
                                                                    
#line 1359 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 65536ULL) == 0ULL) {
                                                                    int tmp_16;
                                                                    
#line 1359 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 32768ULL) == 0ULL) {
                                                                    int tmp_15;
                                                                    
#line 1359 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 16384ULL) == 0ULL) {
                                                                    int tmp_14;
                                                                    
#line 1359 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 8192ULL) == 0ULL) {
                                                                    int tmp_13;
                                                                    
#line 1359 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 4096ULL) == 0ULL) {
                                                                    int tmp_12;
                                                                    
#line 1359 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 2048ULL) == 0ULL) {
                                                                    int tmp_11;
                                                                    
#line 1359 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 1024ULL) == 0ULL) {
                                                                    int tmp_10;
                                                                    
#line 1359 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 512ULL) == 0ULL) {
                                                                    int tmp_9;
                                                                    
#line 1359 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 256ULL) == 0ULL) {
                                                                    int tmp_8;
                                                                    
#line 1359 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 128ULL) == 0ULL) {
                                                                    int tmp_7;
                                                                    
#line 1359 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 64ULL) == 0ULL) {
                                                                    int tmp_6;
                                                                    
#line 1359 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 32ULL) == 0ULL) {
                                                                    int tmp_5;
                                                                    
#line 1359 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 16ULL) == 0ULL) {
                                                                    int tmp_4;
                                                                    
#line 1359 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 8ULL) == 0ULL) {
                                                                    int tmp_3;
                                                                    
#line 1359 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 4ULL) == 0ULL) {
                                                                    int tmp_2;
                                                                    
#line 1359 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 2ULL) == 0ULL) {
                                                                    int tmp_1;
                                                                    
#line 1359 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 1ULL) == 0ULL) {
                                                                    int tmp_0;
                                                                    
#line 1359 
                                                                    tmp_0 = ____ilog2_NaN();
                                                                    
#line 1359 
                                                                    tmp_1 = (int)(1UL << (tmp_0 + 1));
                                                                    }
                                                                    else 
                                                                    
#line 1359 
                                                                    tmp_1 = 2;
                                                                    
#line 1359 
                                                                    tmp_2 = tmp_1;
                                                                    }
                                                                    else 
                                                                    
#line 1359 
                                                                    tmp_2 = 4;
                                                                    
#line 1359 
                                                                    tmp_3 = tmp_2;
                                                                    }
                                                                    else 
                                                                    
#line 1359 
                                                                    tmp_3 = 8;
                                                                    
#line 1359 
                                                                    tmp_4 = tmp_3;
                                                                    }
                                                                    else 
                                                                    
#line 1359 
                                                                    tmp_4 = 16;
                                                                    
#line 1359 
                                                                    tmp_5 = tmp_4;
                                                                    }
                                                                    else 
                                                                    
#line 1359 
                                                                    tmp_5 = 32;
                                                                    
#line 1359 
                                                                    tmp_6 = tmp_5;
                                                                    }
                                                                    else 
                                                                    
#line 1359 
                                                                    tmp_6 = 64;
                                                                    
#line 1359 
                                                                    tmp_7 = tmp_6;
                                                                    }
                                                                    else 
                                                                    
#line 1359 
                                                                    tmp_7 = 128;
                                                                    
#line 1359 
                                                                    tmp_8 = tmp_7;
                                                                    }
                                                                    else 
                                                                    
#line 1359 
                                                                    tmp_8 = 256;
                                                                    
#line 1359 
                                                                    tmp_9 = tmp_8;
                                                                    }
                                                                    else 
                                                                    
#line 1359 
                                                                    tmp_9 = 512;
                                                                    
#line 1359 
                                                                    tmp_10 = tmp_9;
                                                                    }
                                                                    else 
                                                                    
#line 1359 
                                                                    tmp_10 = 1024;
                                                                    
#line 1359 
                                                                    tmp_11 = tmp_10;
                                                                    }
                                                                    else 
                                                                    
#line 1359 
                                                                    tmp_11 = 2048;
                                                                    
#line 1359 
                                                                    tmp_12 = tmp_11;
                                                                    }
                                                                    else 
                                                                    
#line 1359 
                                                                    tmp_12 = 4096;
                                                                    
#line 1359 
                                                                    tmp_13 = tmp_12;
                                                                    }
                                                                    else 
                                                                    
#line 1359 
                                                                    tmp_13 = 8192;
                                                                    
#line 1359 
                                                                    tmp_14 = tmp_13;
                                                                    }
                                                                    else 
                                                                    
#line 1359 
                                                                    tmp_14 = 16384;
                                                                    
#line 1359 
                                                                    tmp_15 = tmp_14;
                                                                    }
                                                                    else 
                                                                    
#line 1359 
                                                                    tmp_15 = 32768;
                                                                    
#line 1359 
                                                                    tmp_16 = tmp_15;
                                                                    }
                                                                    else 
                                                                    
#line 1359 
                                                                    tmp_16 = 65536;
                                                                    
#line 1359 
                                                                    tmp_17 = tmp_16;
                                                                    }
                                                                    else 
                                                                    
#line 1359 
                                                                    tmp_17 = 131072;
                                                                    
#line 1359 
                                                                    tmp_18 = tmp_17;
                                                                    }
                                                                    else 
                                                                    
#line 1359 
                                                                    tmp_18 = 262144;
                                                                    
#line 1359 
                                                                    tmp_19 = tmp_18;
                                                                    }
                                                                    else 
                                                                    
#line 1359 
                                                                    tmp_19 = 524288;
                                                                    
#line 1359 
                                                                    tmp_20 = tmp_19;
                                                                    }
                                                                    else 
                                                                    
#line 1359 
                                                                    tmp_20 = 1048576;
                                                                    
#line 1359 
                                                                    tmp_21 = tmp_20;
                                                                    }
                                                                    else 
                                                                    
#line 1359 
                                                                    tmp_21 = 2097152;
                                                                    
#line 1359 
                                                                    tmp_22 = tmp_21;
                                                                    }
                                                                    else 
                                                                    
#line 1359 
                                                                    tmp_22 = 4194304;
                                                                    
#line 1359 
                                                                    tmp_23 = tmp_22;
                                                                    }
                                                                    else 
                                                                    
#line 1359 
                                                                    tmp_23 = 8388608;
                                                                    
#line 1359 
                                                                    tmp_24 = tmp_23;
                                                                    }
                                                                    else 
                                                                    
#line 1359 
                                                                    tmp_24 = 16777216;
                                                                    
#line 1359 
                                                                    tmp_25 = tmp_24;
                                                                    }
                                                                    else 
                                                                    
#line 1359 
                                                                    tmp_25 = 33554432;
                                                                    
#line 1359 
                                                                    tmp_26 = tmp_25;
                                                                    }
                                                                    else 
                                                                    
#line 1359 
                                                                    tmp_26 = 67108864;
                                                                    
#line 1359 
                                                                    tmp_27 = tmp_26;
                                                                    }
                                                                    else 
                                                                    
#line 1359 
                                                                    tmp_27 = 134217728;
                                                                    
#line 1359 
                                                                    tmp_28 = tmp_27;
                                                                    }
                                                                    else 
                                                                    
#line 1359 
                                                                    tmp_28 = 268435456;
                                                                    
#line 1359 
                                                                    tmp_29 = tmp_28;
                                                                    }
                                                                    else 
                                                                    
#line 1359 
                                                                    tmp_29 = 536870912;
                                                                    
#line 1359 
                                                                    tmp_30 = tmp_29;
                                                                    }
                                                                    else 
                                                                    
#line 1359 
                                                                    tmp_30 = 1073741824;
                                                                    
#line 1359 
                                                                    tmp_31 = (unsigned int)tmp_30;
                                                                    }
                                                                    else 
                                                                    
#line 1359 
                                                                    tmp_31 = -2147483648;
                                                                    
#line 1359 
                                                                    tmp_32 = tmp_31;
                                                                    }
                                                                    else 
                                                                    
#line 1359 
                                                                    tmp_32 = (unsigned int)0;
                                                                    
#line 1359 
                                                                    tmp_33 = tmp_32;
                                                                    }
                                                                    else 
                                                                    
#line 1359 
                                                                    tmp_33 = (unsigned int)0;
                                                                    
#line 1359 
                                                                    tmp_34 = tmp_33;
                                                                    }
                                                                    else 
                                                                    
#line 1359 
                                                                    tmp_34 = (unsigned int)0;
                                                                    
#line 1359 
                                                                    tmp_35 = tmp_34;
                                                                    }
                                                                    else 
                                                                    
#line 1359 
                                                                    tmp_35 = (unsigned int)0;
                                                                    
#line 1359 
                                                                    tmp_36 = tmp_35;
                                                                  }
                                                                  else 
                                                                    
#line 1359 
                                                                    tmp_36 = (unsigned int)0;
                                                                  
#line 1359 
                                                                  tmp_37 = tmp_36;
                                                                }
                                                                else 
                                                                  
#line 1359 
                                                                  tmp_37 = (unsigned int)0;
                                                                
#line 1359 
                                                                tmp_38 = tmp_37;
                                                              }
                                                              else 
#line 1359 
                                                                   tmp_38 = (unsigned int)0;
                                                              
#line 1359 
                                                              tmp_39 = tmp_38;
                                                            }
                                                            else 
#line 1359 
                                                                 tmp_39 = (unsigned int)0;
                                                            
#line 1359 
                                                            tmp_40 = tmp_39;
                                                          }
                                                          else 
#line 1359 
                                                               tmp_40 = (unsigned int)0;
                                                          
#line 1359 
                                                          tmp_41 = tmp_40;
                                                        }
                                                        else 
#line 1359 
                                                             tmp_41 = (unsigned int)0;
                                                        
#line 1359 
                                                        tmp_42 = tmp_41;
                                                      }
                                                      else 
#line 1359 
                                                           tmp_42 = (unsigned int)0;
                                                      
#line 1359 
                                                      tmp_43 = tmp_42;
                                                    }
                                                    else 
#line 1359 
                                                         tmp_43 = (unsigned int)0;
                                                    
#line 1359 
                                                    tmp_44 = tmp_43;
                                                  }
                                                  else 
#line 1359 
                                                       tmp_44 = (unsigned int)0;
                                                  
#line 1359 
                                                  tmp_45 = tmp_44;
                                                }
                                                else 
#line 1359 
                                                     tmp_45 = (unsigned int)0;
                                                
#line 1359 
                                                tmp_46 = tmp_45;
                                              }
                                              else 
#line 1359 
                                                   tmp_46 = (unsigned int)0;
                                              
#line 1359 
                                              tmp_47 = tmp_46;
                                            }
                                            else 
#line 1359 
                                                 tmp_47 = (unsigned int)0;
                                            
#line 1359 
                                            tmp_48 = tmp_47;
                                          }
                                          else 
#line 1359 
                                               tmp_48 = (unsigned int)0;
                                          
#line 1359 
                                          tmp_49 = tmp_48;
                                        }
                                        else 
#line 1359 
                                             tmp_49 = (unsigned int)0;
                                        
#line 1359 
                                        tmp_50 = tmp_49;
                                      }
                                      else 
#line 1359 
                                           tmp_50 = (unsigned int)0;
                                      
#line 1359 
                                      tmp_51 = tmp_50;
                                    }
                                    else 
#line 1359 
                                         tmp_51 = (unsigned int)0;
                                    
#line 1359 
                                    tmp_52 = tmp_51;
                                  }
                                  else 
#line 1359 
                                       tmp_52 = (unsigned int)0;
                                  
#line 1359 
                                  tmp_53 = tmp_52;
                                }
                                else 
#line 1359 
                                     tmp_53 = (unsigned int)0;
                                
#line 1359 
                                tmp_54 = tmp_53;
                              }
                              else 
#line 1359 
                                   tmp_54 = (unsigned int)0;
                              
#line 1359 
                              tmp_55 = tmp_54;
                            }
                            else 
#line 1359 
                                 tmp_55 = (unsigned int)0;
                            
#line 1359 
                            tmp_56 = tmp_55;
                          }
                          else 
#line 1359 
                               tmp_56 = (unsigned int)0;
                          
#line 1359 
                          tmp_57 = tmp_56;
                        }
                        else 
#line 1359 
                             tmp_57 = (unsigned int)0;
                        
#line 1359 
                        tmp_58 = tmp_57;
                      }
                      else 
#line 1359 
                           tmp_58 = (unsigned int)0;
                      
#line 1359 
                      tmp_59 = tmp_58;
                    }
                    else 
#line 1359 
                         tmp_59 = (unsigned int)0;
                    
#line 1359 
                    tmp_60 = tmp_59;
                  }
                  else 
#line 1359 
                       tmp_60 = (unsigned int)0;
                  
#line 1359 
                  tmp_61 = tmp_60;
                }
                else 
#line 1359 
                     tmp_61 = (unsigned int)0;
                
#line 1359 
                tmp_62 = tmp_61;
              }
              else 
#line 1359 
                   tmp_62 = (unsigned int)0;
              
#line 1359 
              tmp_63 = tmp_62;
            }
            else 
#line 1359 
                 tmp_63 = (unsigned int)0;
            
#line 1359 
            tmp_64 = tmp_63;
          }
          else 
#line 1359 
               tmp_64 = (unsigned int)0;
          
#line 1359 
          tmp_65 = tmp_64;
        }
        
#line 1359 
        tmp_67 = tmp_65;
      }
      else {
        int tmp_66;
        
#line 1359 
        tmp_66 = __ilog2_u32((unsigned int)(size + -1));
        
#line 1359 
        tmp_67 = (unsigned int)((int)(1UL << (tmp_66 + 1)));
      }
      
#line 1359 
      tmp_68 = tmp_67;
    }
    else 
#line 1359 
         tmp_68 = (unsigned int)1;
    
#line 1359 
    tmp_70 = tmp_68;
  }
  else {
    unsigned long tmp_69;
    
#line 1359 
    tmp_69 = __roundup_pow_of_two((unsigned long)size);
    
#line 1359 
    tmp_70 = (unsigned int)((int)tmp_69);
  }
  
#line 1359 
  int align = (int)tmp_70;
  
#line 1360 
  struct mlx5_cmd *cmd = & dev->cmd;
  
#line 1366 
  cmd_if_rev = cmdif_rev(dev);
  
#line 1367 
  if ((unsigned int)cmd_if_rev != 5U) {
    
#line 1368 
    dev_err((struct device const *)(& (dev->pdev)->dev),"Driver cmdif rev(%d) differs from firmware\'s(%d)\n",5,(int)cmd_if_rev);
    
#line 1371 
    __retres = -22;
    
#line 1371 
    goto return_label;
  }
  else ;
  
#line 1374 
  cmd->pool = dma_pool_create("mlx5_cmd",& (dev->pdev)->dev,(unsigned long)size,(unsigned long)align,0UL);
  
#line 1375 
  if (cmd->pool == (struct dma_pool *)0) {
    
#line 1376 
    __retres = -12;
    
#line 1376 
    goto return_label;
  }
  else ;
  
#line 1378 
  err = alloc_cmd_page(dev,cmd);
  
#line 1379 
  if (err != 0) 
#line 1380 
                goto err_free_pool; else ;
  
#line 1382 
  tmp_71 = ioread32be((void *)(& (dev->iseg)->cmdq_addr_l_sz));
  
#line 1382 
  cmd_l = tmp_71 & 255U;
  
#line 1383 
  cmd->log_sz = (unsigned char)((unsigned int)((unsigned char)(cmd_l >> 4)) & 15U);
  
#line 1384 
  cmd->log_stride = (unsigned char)((unsigned int)((unsigned char)cmd_l) & 15U);
  
#line 1385 
  if (1 << (int)cmd->log_sz > 32) {
    
#line 1386 
    dev_err((struct device const *)(& (dev->pdev)->dev),"firmware reports too many outstanding commands %d\n",1 << (int)cmd->log_sz);
    
#line 1388 
    err = -22;
    
#line 1389 
    goto err_free_page;
  }
  else ;
  
#line 1392 
  if ((int)cmd->log_sz + (int)cmd->log_stride > 12) {
    
#line 1393 
    dev_err((struct device const *)(& (dev->pdev)->dev),"command queue size overflow\n");
    
#line 1394 
    err = -22;
    
#line 1395 
    goto err_free_page;
  }
  else ;
  
#line 1398 
  cmd->checksum_disabled = 1;
  
#line 1399 
  cmd->max_reg_cmds = (1 << (int)cmd->log_sz) + -1;
  
#line 1400 
  cmd->bitmask = (unsigned long)((1 << cmd->max_reg_cmds) + -1);
  
#line 1402 
  tmp_72 = ioread32be((void *)(& (dev->iseg)->cmdif_rev_fw_sub));
  
#line 1402 
  cmd->cmdif_rev = (unsigned short)(tmp_72 >> 16);
  
#line 1403 
  if ((unsigned int)cmd->cmdif_rev > 5U) {
    
#line 1404 
    dev_err((struct device const *)(& (dev->pdev)->dev),"driver does not support command interface version. driver %d, firmware %d\n",5,(int)cmd->cmdif_rev);
    
#line 1406 
    err = -524;
    
#line 1407 
    goto err_free_page;
  }
  else ;
  
#line 1410 
  spinlock_check(& cmd->alloc_lock);
  {
    struct lock_class_key __key;
    
#line 1410 
    __raw_spin_lock_init(& cmd->alloc_lock.__anonCompField_spinlock_18.rlock,"&(&cmd->alloc_lock)->rlock",& __key);
  }
  
#line 1411 
  spinlock_check(& cmd->token_lock);
  {
    struct lock_class_key __key_0;
    
#line 1411 
    __raw_spin_lock_init(& cmd->token_lock.__anonCompField_spinlock_18.rlock,"&(&cmd->token_lock)->rlock",& __key_0);
  }
  
#line 1412 
  i = 0;
  
#line 1412 
  goto ldv_40478;
  ldv_40477: 
#line 1413 
  ;
  
#line 1413 
  spinlock_check(& cmd->stats[i].lock);
  {
    struct lock_class_key __key_1;
    
#line 1413 
    __raw_spin_lock_init(& cmd->stats[i].lock.__anonCompField_spinlock_18.rlock,"&(&cmd->stats[i].lock)->rlock",& __key_1);
  }
  
#line 1412 
  i += 1;
  ldv_40478: 
#line 1413 
  ;
  
#line 1412 
  if ((unsigned int)i <= 2335U) 
#line 1414 
                                goto ldv_40477; else 
#line 1417 
                                                     goto ldv_40479;
  ldv_40479: 
#line 1418 
  ;
  
#line 1415 
  sema_init(& cmd->sem,cmd->max_reg_cmds);
  
#line 1416 
  sema_init(& cmd->pages_sem,1);
  
#line 1418 
  cmd_h = (unsigned int)(cmd->dma >> 32);
  
#line 1419 
  cmd_l = (unsigned int)cmd->dma;
  
#line 1420 
  if ((cmd_l & 4095U) != 0U) {
    
#line 1421 
    dev_err((struct device const *)(& (dev->pdev)->dev),"invalid command queue address\n");
    
#line 1422 
    err = -12;
    
#line 1423 
    goto err_free_page;
  }
  else ;
  
#line 1426 
  iowrite32be(cmd_h,(void *)(& (dev->iseg)->cmdq_addr_h));
  
#line 1427 
  iowrite32be(cmd_l,(void *)(& (dev->iseg)->cmdq_addr_l_sz));
  
#line 1428 
  ldv_inline_asm();
  {
    
#line 1432 
    struct _ddebug descriptor = {.modname = "mlx5_core", .function = "mlx5_cmd_init", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/cmd.c", .format = "%s:%s:%d:(pid %d): ", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1432U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 1432 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
      struct task_struct *tmp_73;
      
#line 1432 
      ;
      
#line 1432 
      tmp_73 = get_current();
      
#line 1432 
      ;
      
#line 1432 
      __dynamic_pr_debug(& descriptor,"%s:%s:%d:(pid %d): ",(char *)(& dev->priv.name),"mlx5_cmd_init",1432,tmp_73->pid,cmd->dma);
    }
    else ;
  }
  
#line 1434 
  cmd->mode = 0;
  
#line 1436 
  err = create_msg_cache(dev);
  
#line 1437 
  if (err != 0) {
    
#line 1438 
    dev_err((struct device const *)(& (dev->pdev)->dev),"failed to create command cache\n");
    
#line 1439 
    goto err_free_page;
  }
  else ;
  
#line 1442 
  set_wqname(dev);
  {
    struct lock_class_key __key_2;
    char const *__lock_name;
    
#line 1443 
    __lock_name = "\"%s\"";
    
#line 1443 
    tmp_75 = __alloc_workqueue_key("%s",131082U,1,& __key_2,__lock_name,(char *)(& cmd->wq_name));
  }
  
#line 1443 
  cmd->wq = tmp_75;
  
#line 1444 
  if (cmd->wq == (struct workqueue_struct *)0) {
    
#line 1445 
    dev_err((struct device const *)(& (dev->pdev)->dev),"failed to create command workqueue\n");
    
#line 1446 
    err = -12;
    
#line 1447 
    goto err_cache;
  }
  else ;
  
#line 1450 
  err = create_debugfs_files(dev);
  
#line 1451 
  if (err != 0) {
    
#line 1452 
    err = -12;
    
#line 1453 
    goto err_wq;
  }
  else ;
  
#line 1456 
  __retres = 0;
  
#line 1456 
  goto return_label;
  err_wq: 
#line 1458 
  ;
  
#line 1459 
  destroy_workqueue(cmd->wq);
  err_cache: 
#line 1461 
  ;
  
#line 1462 
  destroy_msg_cache(dev);
  err_free_page: 
#line 1464 
  ;
  
#line 1465 
  free_cmd_page(dev,cmd);
  err_free_pool: 
#line 1467 
  ;
  
#line 1468 
  dma_pool_destroy(cmd->pool);
  
#line 1470 
  __retres = err;
  return_label: 
#line 1470 
                return __retres;
}


#line 1472  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/cmd.c"
static char const __kstrtab_mlx5_cmd_init[14U] = {(char)'m', (char)'l', (char)'x', (char)'5', (char)'_', (char)'c', (char)'m', (char)'d', (char)'_', (char)'i', (char)'n', (char)'i', (char)'t', (char)'\000'};

#line 1472 
struct kernel_symbol const __ksymtab_mlx5_cmd_init;


#line 1472  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/cmd.c"
struct kernel_symbol const __ksymtab_mlx5_cmd_init = {.value = (unsigned long)(& mlx5_cmd_init), .name = (char const *)(& __kstrtab_mlx5_cmd_init)};

#line 1474  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/cmd.c"
void mlx5_cmd_cleanup(struct mlx5_core_dev *dev)
{
  
#line 1476 
  struct mlx5_cmd *cmd = & dev->cmd;
  
#line 1478 
  clean_debug_files(dev);
  
#line 1479 
  destroy_workqueue(cmd->wq);
  
#line 1480 
  destroy_msg_cache(dev);
  
#line 1481 
  free_cmd_page(dev,cmd);
  
#line 1482 
  dma_pool_destroy(cmd->pool);
  
#line 1483 
  return;
}


#line 1484  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/cmd.c"
static char const __kstrtab_mlx5_cmd_cleanup[17U] = {(char)'m', (char)'l', (char)'x', (char)'5', (char)'_', (char)'c', (char)'m', (char)'d', (char)'_', (char)'c', (char)'l', (char)'e', (char)'a', (char)'n', (char)'u', (char)'p', (char)'\000'};

#line 1484 
struct kernel_symbol const __ksymtab_mlx5_cmd_cleanup;


#line 1484  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/cmd.c"
struct kernel_symbol const __ksymtab_mlx5_cmd_cleanup = {.value = (unsigned long)(& mlx5_cmd_cleanup), .name = (char const *)(& __kstrtab_mlx5_cmd_cleanup)};

#line 1486  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/cmd.c"
static char const *cmd_status_str(u8 status)
{
  char const *__retres;
  
#line 1488 
  switch ((int)status) {
    case 0: 
#line 1489 
    ;
    
#line 1490 
    __retres = "OK";
    
#line 1490 
    goto return_label;
    case 1: 
#line 1491 
    ;
    
#line 1492 
    __retres = "internal error";
    
#line 1492 
    goto return_label;
    case 2: 
#line 1493 
    ;
    
#line 1494 
    __retres = "bad operation";
    
#line 1494 
    goto return_label;
    case 3: 
#line 1495 
    ;
    
#line 1496 
    __retres = "bad parameter";
    
#line 1496 
    goto return_label;
    case 4: 
#line 1497 
    ;
    
#line 1498 
    __retres = "bad system state";
    
#line 1498 
    goto return_label;
    case 5: 
#line 1499 
    ;
    
#line 1500 
    __retres = "bad resource";
    
#line 1500 
    goto return_label;
    case 6: 
#line 1501 
    ;
    
#line 1502 
    __retres = "resource busy";
    
#line 1502 
    goto return_label;
    case 8: 
#line 1503 
    ;
    
#line 1504 
    __retres = "limits exceeded";
    
#line 1504 
    goto return_label;
    case 9: 
#line 1505 
    ;
    
#line 1506 
    __retres = "bad resource state";
    
#line 1506 
    goto return_label;
    case 10: 
#line 1507 
    ;
    
#line 1508 
    __retres = "bad index";
    
#line 1508 
    goto return_label;
    case 15: 
#line 1509 
    ;
    
#line 1510 
    __retres = "no resources";
    
#line 1510 
    goto return_label;
    case 80: 
#line 1511 
    ;
    
#line 1512 
    __retres = "bad input length";
    
#line 1512 
    goto return_label;
    case 81: 
#line 1513 
    ;
    
#line 1514 
    __retres = "bad output length";
    
#line 1514 
    goto return_label;
    case 16: 
#line 1515 
    ;
    
#line 1516 
    __retres = "bad QP state";
    
#line 1516 
    goto return_label;
    case 48: 
#line 1517 
    ;
    
#line 1518 
    __retres = "bad packet (discarded)";
    
#line 1518 
    goto return_label;
    case 64: 
#line 1519 
    ;
    
#line 1520 
    __retres = "bad size too many outstanding CQEs";
    
#line 1520 
    goto return_label;
    default: 
#line 1521 
    ;
    
#line 1522 
    __retres = "unknown status";
    
#line 1522 
    goto return_label;
  }
  return_label: 
#line 1488 
                return __retres;
}


#line 1526  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/cmd.c"
static int cmd_status_to_err(u8 status)
{
  int __retres;
  
#line 1528 
  switch ((int)status) {
    case 0: 
#line 1529 
    ;
    
#line 1529 
    __retres = 0;
    
#line 1529 
    goto return_label;
    case 1: 
#line 1530 
    ;
    
#line 1530 
    __retres = -5;
    
#line 1530 
    goto return_label;
    case 2: 
#line 1531 
    ;
    
#line 1531 
    __retres = -22;
    
#line 1531 
    goto return_label;
    case 3: 
#line 1532 
    ;
    
#line 1532 
    __retres = -22;
    
#line 1532 
    goto return_label;
    case 4: 
#line 1533 
    ;
    
#line 1533 
    __retres = -5;
    
#line 1533 
    goto return_label;
    case 5: 
#line 1534 
    ;
    
#line 1534 
    __retres = -22;
    
#line 1534 
    goto return_label;
    case 6: 
#line 1535 
    ;
    
#line 1535 
    __retres = -16;
    
#line 1535 
    goto return_label;
    case 8: 
#line 1536 
    ;
    
#line 1536 
    __retres = -12;
    
#line 1536 
    goto return_label;
    case 9: 
#line 1537 
    ;
    
#line 1537 
    __retres = -22;
    
#line 1537 
    goto return_label;
    case 10: 
#line 1538 
    ;
    
#line 1538 
    __retres = -22;
    
#line 1538 
    goto return_label;
    case 15: 
#line 1539 
    ;
    
#line 1539 
    __retres = -11;
    
#line 1539 
    goto return_label;
    case 80: 
#line 1540 
    ;
    
#line 1540 
    __retres = -5;
    
#line 1540 
    goto return_label;
    case 81: 
#line 1541 
    ;
    
#line 1541 
    __retres = -5;
    
#line 1541 
    goto return_label;
    case 16: 
#line 1542 
    ;
    
#line 1542 
    __retres = -22;
    
#line 1542 
    goto return_label;
    case 48: 
#line 1543 
    ;
    
#line 1543 
    __retres = -22;
    
#line 1543 
    goto return_label;
    case 64: 
#line 1544 
    ;
    
#line 1544 
    __retres = -22;
    
#line 1544 
    goto return_label;
    default: 
#line 1545 
    ;
    
#line 1545 
    __retres = -5;
    
#line 1545 
    goto return_label;
  }
  return_label: 
#line 1528 
                return __retres;
}


#line 1550  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/cmd.c"
int mlx5_cmd_status_to_err(struct mlx5_outbox_hdr *hdr)
{
  int __retres;
  unsigned int tmp_0;
  char const *tmp_1;
  int tmp_2;
  
#line 1552 
  if ((unsigned int)hdr->status == 0U) {
    
#line 1553 
    __retres = 0;
    
#line 1553 
    goto return_label;
  }
  else ;
  
#line 1555 
  if (0 != 0) 
#line 1555 
              tmp_0 = (((hdr->syndrome << 24) | ((hdr->syndrome << 8) & 16711680U)) | ((hdr->syndrome >> 8) & 65280U)) | (hdr->syndrome >> 24); else 
                                                                    
#line 1555 
                                                                    tmp_0 = __fswab32(hdr->syndrome);
  
#line 1555 
  ;
  
#line 1555 
  tmp_1 = cmd_status_str((unsigned char)((int)hdr->status));
  
#line 1555 
  printk("\001",tmp_1,(int)hdr->status,tmp_0);
  
#line 1559 
  tmp_2 = cmd_status_to_err((unsigned char)((int)hdr->status));
  
#line 1559 
  __retres = tmp_2;
  return_label: 
#line 1559 
                return __retres;
}


#line 1562  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/cmd.c"
int mlx5_cmd_status_to_err_v2(void *ptr)
{
  int __retres;
  u32 syndrome;
  u8 status;
  char const *tmp_1;
  int tmp_2;
  
#line 1567 
  if (0 != 0) 
#line 1567 
              status = (unsigned char)(((((*((__be32 *)ptr) << 24) | ((*((__be32 *)ptr) << 8) & 16711680U)) | ((*((__be32 *)ptr) >> 8) & 65280U)) | (*((__be32 *)ptr) >> 24)) >> 24);
  else {
    __u32 tmp;
    
#line 1567 
    tmp = __fswab32(*((__be32 *)ptr));
    
#line 1567 
    status = (unsigned char)(tmp >> 24);
  }
  
#line 1568 
  if ((unsigned int)status == 0U) {
    
#line 1569 
    __retres = 0;
    
#line 1569 
    goto return_label;
  }
  else ;
  
#line 1571 
  if (0 != 0) 
#line 1571 
              syndrome = (((*((__be32 *)(ptr + 4U)) << 24) | ((*((__be32 *)(ptr + 4U)) << 8) & 16711680U)) | ((*((__be32 *)(ptr + 4U)) >> 8) & 65280U)) | (*((__be32 *)(ptr + 4U)) >> 24); else 
                                                                    
#line 1571 
                                                                    syndrome = __fswab32(*((__be32 *)(ptr + 4U)));
  
#line 1573 
  ;
  
#line 1573 
  ;
  
#line 1573 
  tmp_1 = cmd_status_str((unsigned char)((int)status));
  
#line 1573 
  printk("\001",tmp_1,(int)status,syndrome);
  
#line 1576 
  tmp_2 = cmd_status_to_err((unsigned char)((int)status));
  
#line 1576 
  __retres = tmp_2;
  return_label: 
#line 1576 
                return __retres;
}


#line 56  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_cmd.c.aux"
struct file_operations *ldv_emg_alias_fops_2 = (struct file_operations *)(& fops);

#line 57  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_cmd.c.aux"
struct file_operations *ldv_emg_alias_olfops_2 = (struct file_operations *)(& olfops);

#line 58  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_cmd.c.aux"
struct file_operations *ldv_emg_alias_dfops_2 = (struct file_operations *)(& dfops);

#line 65 
struct dentry *ldv_emg_debugfs_create_file(char *arg0, unsigned short arg1, struct dentry *arg2, void *arg3, struct file_operations *arg4);


#line 68 
_Bool ldv_emg_queue_work(struct workqueue_struct *arg0, struct work_struct *arg1);


#line 73  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_cmd.c.aux"
long ldv_emg_wrapper_outlen_write_4(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  long tmp;
  
#line 74 
  tmp = outlen_write(arg0,(char const *)arg1,arg2,arg3);
  
#line 74 
  return tmp;
}


#line 78  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_cmd.c.aux"
long ldv_emg_wrapper_dbg_write_4(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  long tmp;
  
#line 79 
  tmp = dbg_write(arg0,(char const *)arg1,arg2,arg3);
  
#line 79 
  return tmp;
}


#line 83  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_cmd.c.aux"
long ldv_emg_wrapper_data_write_4(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  long tmp;
  
#line 84 
  tmp = data_write(arg0,(char const *)arg1,arg2,arg3);
  
#line 84 
  return tmp;
}


#line 88  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_cmd.c.aux"
long ldv_emg_wrapper_data_read_3(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  long tmp;
  
#line 89 
  tmp = data_read(arg0,arg1,arg2,arg3);
  
#line 89 
  return tmp;
}


#line 93  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_cmd.c.aux"
long ldv_emg_wrapper_outlen_read_3(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  long tmp;
  
#line 94 
  tmp = outlen_read(arg0,arg1,arg2,arg3);
  
#line 94 
  return tmp;
}


#line 99  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_cmd.c.aux"
static void *ERR_PTR(long error)
{
  void *tmp;
  
#line 102 
  tmp = ldv_err_ptr(error);
  
#line 102 
  return tmp;
}


#line 106  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_cmd.c.aux"
static long PTR_ERR(void const *ptr)
{
  long tmp;
  
#line 109 
  tmp = ldv_ptr_err(ptr);
  
#line 109 
  return tmp;
}


#line 113  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_cmd.c.aux"
static bool IS_ERR(void const *ptr)
{
  bool __retres;
  long ret;
  
#line 117 
  ret = ldv_is_err(ptr);
  
#line 118 
  __retres = (_Bool)(ret != 0L);
  
#line 118 
  return __retres;
}


#line 510  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_cmd.c.aux"
static void *kmalloc(size_t size, gfp_t flags)
{
  void *tmp;
  
#line 513 
  tmp = ldv_kmalloc(size,flags);
  
#line 513 
  return tmp;
}


#line 531  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_cmd.c.aux"
static void *kzalloc(size_t size, gfp_t flags)
{
  void *tmp;
  
#line 534 
  tmp = ldv_kzalloc(size,flags);
  
#line 534 
  return tmp;
}


#line 624  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_cmd.c.aux"
static void ldv_spin_lock_59(spinlock_t *lock)
{
  
#line 628 
  ldv_spin_model_lock((char *)"token_lock_of_mlx5_cmd");
  
#line 630 
  spin_lock(lock);
  
#line 631 
  return;
}


#line 634  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_cmd.c.aux"
static void ldv_spin_unlock_60(spinlock_t *lock)
{
  
#line 638 
  ldv_spin_model_unlock((char *)"token_lock_of_mlx5_cmd");
  
#line 640 
  spin_unlock(lock);
  
#line 641 
  return;
}


#line 644  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_cmd.c.aux"
static void ldv___ldv_spin_lock_61(spinlock_t *ldv_func_arg1)
{
  
#line 648 
  ldv_spin_model_lock((char *)"alloc_lock_of_mlx5_cmd");
  
#line 650 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 651 
  return;
}


#line 654  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_cmd.c.aux"
static void ldv_spin_unlock_irqrestore_62(spinlock_t *lock, unsigned long flags)
{
  
#line 658 
  ldv_spin_model_unlock((char *)"alloc_lock_of_mlx5_cmd");
  
#line 660 
  spin_unlock_irqrestore(lock,flags);
  
#line 661 
  return;
}


#line 664  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_cmd.c.aux"
static void ldv___ldv_spin_lock_63(spinlock_t *ldv_func_arg1)
{
  
#line 668 
  ldv_spin_model_lock((char *)"alloc_lock_of_mlx5_cmd");
  
#line 670 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 671 
  return;
}


#line 674  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_cmd.c.aux"
static void ldv_spin_unlock_irqrestore_64(spinlock_t *lock, unsigned long flags)
{
  
#line 678 
  ldv_spin_model_unlock((char *)"alloc_lock_of_mlx5_cmd");
  
#line 680 
  spin_unlock_irqrestore(lock,flags);
  
#line 681 
  return;
}


#line 684  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_cmd.c.aux"
static bool ldv_queue_work_65(struct workqueue_struct *wq, struct work_struct *work)
{
  bool __retres;
  bool tmp;
  
#line 688 
  tmp = ldv_emg_queue_work(wq,work);
  
#line 688 
  __retres = tmp != 0;
  
#line 688 
  return __retres;
}


#line 692  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_cmd.c.aux"
static void ldv_spin_lock_irq_66(spinlock_t *lock)
{
  
#line 696 
  ldv_spin_model_lock((char *)"lock_of_mlx5_cmd_stats");
  
#line 698 
  spin_lock_irq(lock);
  
#line 699 
  return;
}


#line 702  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_cmd.c.aux"
static void ldv_spin_unlock_irq_67(spinlock_t *lock)
{
  
#line 706 
  ldv_spin_model_unlock((char *)"lock_of_mlx5_cmd_stats");
  
#line 708 
  spin_unlock_irq(lock);
  
#line 709 
  return;
}


#line 712  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_cmd.c.aux"
static struct dentry *ldv_debugfs_create_file_68(char const *ldv_func_arg1, umode_t ldv_func_arg2, struct dentry *ldv_func_arg3, void *ldv_func_arg4, struct file_operations const *ldv_func_arg5)
{
  struct dentry *tmp;
  
#line 716 
  tmp = ldv_emg_debugfs_create_file((char *)ldv_func_arg1,(unsigned short)((int)ldv_func_arg2),ldv_func_arg3,ldv_func_arg4,(struct file_operations *)ldv_func_arg5);
  
#line 716 
  return tmp;
}


#line 720  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_cmd.c.aux"
static struct dentry *ldv_debugfs_create_file_69(char const *ldv_func_arg1, umode_t ldv_func_arg2, struct dentry *ldv_func_arg3, void *ldv_func_arg4, struct file_operations const *ldv_func_arg5)
{
  struct dentry *tmp;
  
#line 724 
  tmp = ldv_emg_debugfs_create_file((char *)ldv_func_arg1,(unsigned short)((int)ldv_func_arg2),ldv_func_arg3,ldv_func_arg4,(struct file_operations *)ldv_func_arg5);
  
#line 724 
  return tmp;
}


#line 728  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_cmd.c.aux"
static struct dentry *ldv_debugfs_create_file_70(char const *ldv_func_arg1, umode_t ldv_func_arg2, struct dentry *ldv_func_arg3, void *ldv_func_arg4, struct file_operations const *ldv_func_arg5)
{
  struct dentry *tmp;
  
#line 732 
  tmp = ldv_emg_debugfs_create_file((char *)ldv_func_arg1,(unsigned short)((int)ldv_func_arg2),ldv_func_arg3,ldv_func_arg4,(struct file_operations *)ldv_func_arg5);
  
#line 732 
  return tmp;
}


#line 736  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_cmd.c.aux"
static struct dentry *ldv_debugfs_create_file_71(char const *ldv_func_arg1, umode_t ldv_func_arg2, struct dentry *ldv_func_arg3, void *ldv_func_arg4, struct file_operations const *ldv_func_arg5)
{
  struct dentry *tmp;
  
#line 740 
  tmp = ldv_emg_debugfs_create_file((char *)ldv_func_arg1,(unsigned short)((int)ldv_func_arg2),ldv_func_arg3,ldv_func_arg4,(struct file_operations *)ldv_func_arg5);
  
#line 740 
  return tmp;
}


#line 744  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_cmd.c.aux"
static void ldv___ldv_spin_lock_72(spinlock_t *ldv_func_arg1)
{
  
#line 748 
  ldv_spin_model_lock((char *)"lock_of_cache_ent");
  
#line 750 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 751 
  return;
}


#line 754  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_cmd.c.aux"
static void ldv_spin_unlock_irqrestore_73(spinlock_t *lock, unsigned long flags)
{
  
#line 758 
  ldv_spin_model_unlock((char *)"lock_of_cache_ent");
  
#line 760 
  spin_unlock_irqrestore(lock,flags);
  
#line 761 
  return;
}


#line 764  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_cmd.c.aux"
static void ldv___ldv_spin_lock_74(spinlock_t *ldv_func_arg1)
{
  
#line 768 
  ldv_spin_model_lock((char *)"lock_of_mlx5_cmd_stats");
  
#line 770 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 771 
  return;
}


#line 774  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_cmd.c.aux"
static void ldv_spin_unlock_irqrestore_75(spinlock_t *lock, unsigned long flags)
{
  
#line 778 
  ldv_spin_model_unlock((char *)"lock_of_mlx5_cmd_stats");
  
#line 780 
  spin_unlock_irqrestore(lock,flags);
  
#line 781 
  return;
}


#line 784  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_cmd.c.aux"
static void ldv_spin_lock_irq_76(spinlock_t *lock)
{
  
#line 788 
  ldv_spin_model_lock((char *)"lock_of_cache_ent");
  
#line 790 
  spin_lock_irq(lock);
  
#line 791 
  return;
}


#line 794  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_cmd.c.aux"
static void ldv_spin_unlock_irq_77(spinlock_t *lock)
{
  
#line 798 
  ldv_spin_model_unlock((char *)"lock_of_cache_ent");
  
#line 800 
  spin_unlock_irq(lock);
  
#line 801 
  return;
}


#line 7  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_qp.c.aux"
void ldv_atomic_inc(atomic_t *v);


#line 8 
void ldv_atomic_dec(atomic_t *v);


#line 9 
int ldv_atomic_dec_and_test(atomic_t *v);


#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/atomic.h"
__inline static int atomic_read(atomic_t const *v)
{
  int __retres;
  int const volatile *tmp;
  {
    
#line 27 
    int const __var = 0;
    
#line 27 
    tmp = (int const volatile *)(& v->counter);
  }
  
#line 27 
  __retres = *tmp;
  
#line 27 
  return __retres;
}


#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/atomic.h"
__inline static void atomic_set(atomic_t *v, int i)
{
  
#line 39 
  v->counter = i;
  
#line 40 
  return;
}


#line 98 
static void atomic_inc(atomic_t *v);


#line 114 
static void atomic_dec(atomic_t *v);


#line 120 
static int atomic_dec_and_test(atomic_t *v);


#line 310  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_lock_0(spinlock_t *lock)
{
  
#line 312 
  _raw_spin_lock(& lock->__anonCompField_spinlock_18.rlock);
  
#line 313 
  return;
}


#line 334 
static void ldv_spin_lock_51(spinlock_t *lock);


#line 340  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_lock_irq_0(spinlock_t *lock)
{
  
#line 342 
  _raw_spin_lock_irq(& lock->__anonCompField_spinlock_18.rlock);
  
#line 343 
  return;
}


#line 366 
static void ldv_spin_lock_irq_53(spinlock_t *lock);


#line 367  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_unlock_0(spinlock_t *lock)
{
  
#line 369 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_18.rlock);
  
#line 370 
  return;
}


#line 387 
static void ldv_spin_unlock_52(spinlock_t *lock);


#line 401  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_unlock_irq_0(spinlock_t *lock)
{
  
#line 403 
  _raw_spin_unlock_irq(& lock->__anonCompField_spinlock_18.rlock);
  
#line 404 
  return;
}


#line 417 
static void ldv_spin_unlock_irq_54(spinlock_t *lock);


#line 418  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_unlock_irqrestore_0(spinlock_t *lock, unsigned long flags)
{
  {
    unsigned long __dummy;
    unsigned long __dummy2;
    
  }
  
#line 420 
  _raw_spin_unlock_irqrestore(& lock->__anonCompField_spinlock_18.rlock,flags);
  
#line 421 
  return;
}


#line 450 
static void ldv_spin_unlock_irqrestore_56(spinlock_t *lock, unsigned long flags);


#line 62  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_qp.c.aux"
static void ldv___ldv_spin_lock_55(spinlock_t *ldv_func_arg1);


#line 265  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/radix-tree.h"
int radix_tree_insert(struct radix_tree_root *, unsigned long, void *);


#line 268 
void *radix_tree_lookup(struct radix_tree_root *, unsigned long);


#line 273 
void *radix_tree_delete(struct radix_tree_root *, unsigned long);


#line 718  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/driver.h"
void mlx5_rsc_event(struct mlx5_core_dev *dev, u32 rsn, int event_type);


#line 720 
void mlx5_eq_pagefault(struct mlx5_core_dev *dev, struct mlx5_eqe *eqe);


#line 735 
int mlx5_qp_debugfs_init(struct mlx5_core_dev *dev);


#line 736 
void mlx5_qp_debugfs_cleanup(struct mlx5_core_dev *dev);


#line 784 
void mlx5_core_put_rsc(struct mlx5_core_rsc_common *common);


#line 619  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/qp.h"
int mlx5_core_create_qp(struct mlx5_core_dev *dev, struct mlx5_core_qp *qp, struct mlx5_create_qp_mbox_in *in, int inlen);


#line 623 
int mlx5_core_qp_modify(struct mlx5_core_dev *dev, enum mlx5_qp_state cur_state, enum mlx5_qp_state new_state, struct mlx5_modify_qp_mbox_in *in, int sqd_event, struct mlx5_core_qp *qp);


#line 627 
int mlx5_core_destroy_qp(struct mlx5_core_dev *dev, struct mlx5_core_qp *qp);


#line 629 
int mlx5_core_qp_query(struct mlx5_core_dev *dev, struct mlx5_core_qp *qp, struct mlx5_query_qp_mbox_out *out, int outlen);


#line 632 
int mlx5_core_xrcd_alloc(struct mlx5_core_dev *dev, u32 *xrcdn);


#line 633 
int mlx5_core_xrcd_dealloc(struct mlx5_core_dev *dev, u32 xrcdn);


#line 634 
void mlx5_init_qp_table(struct mlx5_core_dev *dev);


#line 635 
void mlx5_cleanup_qp_table(struct mlx5_core_dev *dev);


#line 636 
int mlx5_debug_qp_add(struct mlx5_core_dev *dev, struct mlx5_core_qp *qp);


#line 637 
void mlx5_debug_qp_remove(struct mlx5_core_dev *dev, struct mlx5_core_qp *qp);


#line 639 
int mlx5_core_page_fault_resume(struct mlx5_core_dev *dev, u32 qpn, u8 flags, int error);


#line 42  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/qp.c"
static struct mlx5_core_rsc_common *mlx5_get_rsc(struct mlx5_core_dev *dev, u32 rsn)
{
  struct mlx5_core_rsc_common *__retres;
  struct mlx5_core_rsc_common *common;
  
#line 45 
  struct mlx5_qp_table *table = & dev->priv.qp_table;
  
#line 48 
  ldv_spin_lock_51(& table->lock);
  
#line 50 
  common = (struct mlx5_core_rsc_common *)radix_tree_lookup(& table->tree,(unsigned long)rsn);
  
#line 51 
  if (common != (struct mlx5_core_rsc_common *)0) 
#line 52 
                                                  atomic_inc(& common->refcount); else ;
  
#line 54 
  ldv_spin_unlock_52(& table->lock);
  
#line 56 
  if (common == (struct mlx5_core_rsc_common *)0) {
    struct task_struct *tmp_0;
    
#line 57 
    ;
    
#line 57 
    tmp_0 = get_current();
    
#line 57 
    ;
    
#line 57 
    printk("\001",(char *)(& dev->priv.name),"mlx5_get_rsc",58,tmp_0->pid,rsn);
    
#line 59 
    __retres = (struct mlx5_core_rsc_common *)0;
    
#line 59 
    goto return_label;
  }
  else ;
  
#line 61 
  __retres = common;
  return_label: 
#line 61 
                return __retres;
}


#line 64  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/qp.c"
void mlx5_core_put_rsc(struct mlx5_core_rsc_common *common)
{
  int tmp;
  
#line 66 
  tmp = atomic_dec_and_test(& common->refcount);
  
#line 66 
  if (tmp != 0) 
#line 67 
                complete(& common->free); else ;
  
#line 68 
  return;
}


#line 70  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/qp.c"
void mlx5_rsc_event(struct mlx5_core_dev *dev, u32 rsn, int event_type)
{
  struct mlx5_core_qp *qp;
  
#line 72 
  struct mlx5_core_rsc_common *common = mlx5_get_rsc(dev,rsn);
  
#line 75 
  if (common == (struct mlx5_core_rsc_common *)0) 
#line 76 
                                                  goto return_label; else ;
  
#line 78 
  switch ((unsigned int)common->res) {
    struct task_struct *tmp_0;
    case (unsigned int)0: 
#line 79 
    ;
    
#line 80 
    qp = (struct mlx5_core_qp *)common;
    
#line 81 
    (*(qp->event))(qp,event_type);
    
#line 82 
    goto ldv_35421;
    default: 
#line 84 
    ;
    
#line 85 
    ;
    
#line 85 
    tmp_0 = get_current();
    
#line 85 
    ;
    
#line 85 
    printk("\001",(char *)(& dev->priv.name),"mlx5_rsc_event",85,tmp_0->pid,rsn);
  }
  ldv_35421: 
#line 88 
  ;
  
#line 88 
  mlx5_core_put_rsc(common);
  return_label: 
#line 89 
                return;
}


#line 92  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/qp.c"
void mlx5_eq_pagefault(struct mlx5_core_dev *dev, struct mlx5_eqe *eqe)
{
  unsigned int tmp_0;
  struct mlx5_core_qp *tmp_2;
  struct mlx5_pagefault pfault;
  unsigned int tmp_5;
  
#line 94 
  struct mlx5_eqe_page_fault *pf_eqe = & eqe->data.page_fault;
  
#line 95 
  if (0 != 0) 
#line 95 
              tmp_0 = ((((pf_eqe->flags_qpn << 24) | ((pf_eqe->flags_qpn << 8) & 16711680U)) | ((pf_eqe->flags_qpn >> 8) & 65280U)) | (pf_eqe->flags_qpn >> 24)) & 16777215U;
  else {
    __u32 tmp;
    
#line 95 
    tmp = __fswab32(pf_eqe->flags_qpn);
    
#line 95 
    tmp_0 = tmp & 16777215U;
  }
  
#line 95 
  int qpn = (int)tmp_0;
  
#line 96 
  struct mlx5_core_rsc_common *common = mlx5_get_rsc(dev,(unsigned int)qpn);
  {
    
#line 98 
    struct mlx5_core_rsc_common const *__mptr = (struct mlx5_core_rsc_common const *)common;
    
#line 98 
    tmp_2 = (struct mlx5_core_qp *)__mptr;
  }
  
#line 97 
  struct mlx5_core_qp *qp = tmp_2;
  
#line 101 
  if (qp == (struct mlx5_core_qp *)0) {
    struct task_struct *tmp_3;
    
#line 102 
    ;
    
#line 102 
    tmp_3 = get_current();
    
#line 102 
    ;
    
#line 102 
    printk("\001",(char *)(& dev->priv.name),"mlx5_eq_pagefault",103,tmp_3->pid,qpn);
    
#line 104 
    goto return_label;
  }
  else ;
  
#line 107 
  pfault.event_subtype = eqe->sub_type;
  
#line 108 
  if (0 != 0) 
#line 108 
              tmp_5 = (((((pf_eqe->flags_qpn << 24) | ((pf_eqe->flags_qpn << 8) & 16711680U)) | ((pf_eqe->flags_qpn >> 8) & 65280U)) | (pf_eqe->flags_qpn >> 24)) >> 24) & 7U;
  else {
    __u32 tmp_4;
    
#line 108 
    tmp_4 = __fswab32(pf_eqe->flags_qpn);
    
#line 108 
    tmp_5 = (tmp_4 >> 24) & 7U;
  }
  
#line 108 
  pfault.flags = (enum mlx5_pagefault_flags)tmp_5;
  
#line 110 
  if (0 != 0) 
#line 110 
              pfault.bytes_committed = (((pf_eqe->bytes_committed << 24) | ((pf_eqe->bytes_committed << 8) & 16711680U)) | ((pf_eqe->bytes_committed >> 8) & 65280U)) | (pf_eqe->bytes_committed >> 24); else 
                                                                    
#line 110 
                                                                    pfault.bytes_committed = __fswab32(pf_eqe->bytes_committed);
  {
    
#line 113 
    struct _ddebug descriptor = {.modname = "mlx5_core", .function = "mlx5_eq_pagefault", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/qp.c", .format = "%s:%s:%d:(pid %d): ", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))115U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 113 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
      struct task_struct *tmp_7;
      
#line 113 
      ;
      
#line 113 
      ;
      
#line 113 
      tmp_7 = get_current();
      
#line 113 
      ;
      
#line 113 
      __dynamic_pr_debug(& descriptor,"%s:%s:%d:(pid %d): ",(char *)(& dev->priv.name),"mlx5_eq_pagefault",115,tmp_7->pid,(int)eqe->sub_type,(unsigned int)pfault.flags);
    }
    else ;
  }
  
#line 117 
  switch ((int)eqe->sub_type) {
    int tmp_10;
    int tmp_19;
    struct task_struct *tmp_22;
    case 1: 
#line 118 
    ;
    
#line 120 
    if (0 != 0) 
#line 120 
                pfault.__anonCompField_mlx5_pagefault_62.rdma.r_key = (((pf_eqe->__anonCompField_mlx5_eqe_page_fault_50.rdma.r_key << 24) | ((pf_eqe->__anonCompField_mlx5_eqe_page_fault_50.rdma.r_key << 8) & 16711680U)) | ((pf_eqe->__anonCompField_mlx5_eqe_page_fault_50.rdma.r_key >> 8) & 65280U)) | (pf_eqe->__anonCompField_mlx5_eqe_page_fault_50.rdma.r_key >> 24); else 
                                                                    
#line 121 
                                                                    pfault.__anonCompField_mlx5_pagefault_62.rdma.r_key = __fswab32(pf_eqe->__anonCompField_mlx5_eqe_page_fault_50.rdma.r_key);
    
#line 123 
    if (0 != 0) 
#line 123 
                tmp_10 = (int)((unsigned short)(((int)pf_eqe->__anonCompField_mlx5_eqe_page_fault_50.rdma.packet_length << 8) | ((int)pf_eqe->__anonCompField_mlx5_eqe_page_fault_50.rdma.packet_length >> 8)));
    else {
      __u16 tmp_9;
      
#line 123 
      tmp_9 = __fswab16((unsigned short)((int)pf_eqe->__anonCompField_mlx5_eqe_page_fault_50.rdma.packet_length));
      
#line 123 
      tmp_10 = (int)tmp_9;
    }
    
#line 122 
    pfault.__anonCompField_mlx5_pagefault_62.rdma.packet_size = (unsigned int)tmp_10;
    
#line 124 
    if (0 != 0) 
#line 124 
                pfault.__anonCompField_mlx5_pagefault_62.rdma.rdma_op_len = (((pf_eqe->__anonCompField_mlx5_eqe_page_fault_50.rdma.rdma_op_len << 24) | ((pf_eqe->__anonCompField_mlx5_eqe_page_fault_50.rdma.rdma_op_len << 8) & 16711680U)) | ((pf_eqe->__anonCompField_mlx5_eqe_page_fault_50.rdma.rdma_op_len >> 8) & 65280U)) | (pf_eqe->__anonCompField_mlx5_eqe_page_fault_50.rdma.rdma_op_len >> 24); else 
                                                                    
#line 125 
                                                                    pfault.__anonCompField_mlx5_pagefault_62.rdma.rdma_op_len = __fswab32(pf_eqe->__anonCompField_mlx5_eqe_page_fault_50.rdma.rdma_op_len);
    
#line 126 
    if (0 != 0) 
#line 126 
                pfault.__anonCompField_mlx5_pagefault_62.rdma.rdma_va = (((((((pf_eqe->__anonCompField_mlx5_eqe_page_fault_50.rdma.rdma_va << 56) | ((pf_eqe->__anonCompField_mlx5_eqe_page_fault_50.rdma.rdma_va << 40) & 71776119061217280ULL)) | ((pf_eqe->__anonCompField_mlx5_eqe_page_fault_50.rdma.rdma_va << 24) & 280375465082880ULL)) | ((pf_eqe->__anonCompField_mlx5_eqe_page_fault_50.rdma.rdma_va << 8) & 1095216660480ULL)) | ((pf_eqe->__anonCompField_mlx5_eqe_page_fault_50.rdma.rdma_va >> 8) & 4278190080ULL)) | ((pf_eqe->__anonCompField_mlx5_eqe_page_fault_50.rdma.rdma_va >> 24) & 16711680ULL)) | ((pf_eqe->__anonCompField_mlx5_eqe_page_fault_50.rdma.rdma_va >> 40) & 65280ULL)) | (pf_eqe->__anonCompField_mlx5_eqe_page_fault_50.rdma.rdma_va >> 56); else 
                                                                    
#line 127 
                                                                    pfault.__anonCompField_mlx5_pagefault_62.rdma.rdma_va = __fswab64(pf_eqe->__anonCompField_mlx5_eqe_page_fault_50.rdma.rdma_va);
    {
      
#line 128 
      struct _ddebug descriptor_0 = {.modname = "mlx5_core", .function = "mlx5_eq_pagefault", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/qp.c", .format = "%s:%s:%d:(pid %d): ", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))130U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 128 
      if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) {
        struct task_struct *tmp_13;
        
#line 128 
        ;
        
#line 128 
        ;
        
#line 128 
        tmp_13 = get_current();
        
#line 128 
        ;
        
#line 128 
        __dynamic_pr_debug(& descriptor_0,"%s:%s:%d:(pid %d): ",(char *)(& dev->priv.name),"mlx5_eq_pagefault",130,tmp_13->pid,qpn,pfault.__anonCompField_mlx5_pagefault_62.rdma.r_key);
      }
      else ;
    }
    {
      
#line 131 
      struct _ddebug descriptor_1 = {.modname = "mlx5_core", .function = "mlx5_eq_pagefault", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/qp.c", .format = "%s:%s:%d:(pid %d): ", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))133U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 131 
      if ((long)(((int)descriptor_1.flags & 1) != 0) != 0L) {
        struct task_struct *tmp_14;
        
#line 131 
        ;
        
#line 131 
        tmp_14 = get_current();
        
#line 131 
        ;
        
#line 131 
        __dynamic_pr_debug(& descriptor_1,"%s:%s:%d:(pid %d): ",(char *)(& dev->priv.name),"mlx5_eq_pagefault",133,tmp_14->pid,pfault.__anonCompField_mlx5_pagefault_62.rdma.rdma_op_len);
      }
      else ;
    }
    {
      
#line 134 
      struct _ddebug descriptor_2 = {.modname = "mlx5_core", .function = "mlx5_eq_pagefault", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/qp.c", .format = "%s:%s:%d:(pid %d): ", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))136U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 134 
      if ((long)(((int)descriptor_2.flags & 1) != 0) != 0L) {
        struct task_struct *tmp_15;
        
#line 134 
        ;
        
#line 134 
        tmp_15 = get_current();
        
#line 134 
        ;
        
#line 134 
        __dynamic_pr_debug(& descriptor_2,"%s:%s:%d:(pid %d): ",(char *)(& dev->priv.name),"mlx5_eq_pagefault",136,tmp_15->pid,pfault.__anonCompField_mlx5_pagefault_62.rdma.rdma_va);
      }
      else ;
    }
    {
      
#line 137 
      struct _ddebug descriptor_3 = {.modname = "mlx5_core", .function = "mlx5_eq_pagefault", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/qp.c", .format = "%s:%s:%d:(pid %d): ", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))139U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 137 
      if ((long)(((int)descriptor_3.flags & 1) != 0) != 0L) {
        struct task_struct *tmp_16;
        
#line 137 
        ;
        
#line 137 
        tmp_16 = get_current();
        
#line 137 
        ;
        
#line 137 
        __dynamic_pr_debug(& descriptor_3,"%s:%s:%d:(pid %d): ",(char *)(& dev->priv.name),"mlx5_eq_pagefault",139,tmp_16->pid,pfault.bytes_committed);
      }
      else ;
    }
    
#line 140 
    goto ldv_35442;
    case 0: 
#line 142 
    ;
    
#line 144 
    if (0 != 0) 
#line 144 
                pfault.__anonCompField_mlx5_pagefault_62.wqe.wqe_index = (unsigned short)(((int)pf_eqe->__anonCompField_mlx5_eqe_page_fault_50.wqe.wqe_index << 8) | ((int)pf_eqe->__anonCompField_mlx5_eqe_page_fault_50.wqe.wqe_index >> 8)); else 
                                                                    
#line 145 
                                                                    pfault.__anonCompField_mlx5_pagefault_62.wqe.wqe_index = __fswab16((unsigned short)((int)pf_eqe->__anonCompField_mlx5_eqe_page_fault_50.wqe.wqe_index));
    
#line 147 
    if (0 != 0) 
#line 147 
                tmp_19 = (int)((unsigned short)(((int)pf_eqe->__anonCompField_mlx5_eqe_page_fault_50.wqe.packet_length << 8) | ((int)pf_eqe->__anonCompField_mlx5_eqe_page_fault_50.wqe.packet_length >> 8)));
    else {
      __u16 tmp_18;
      
#line 147 
      tmp_18 = __fswab16((unsigned short)((int)pf_eqe->__anonCompField_mlx5_eqe_page_fault_50.wqe.packet_length));
      
#line 147 
      tmp_19 = (int)tmp_18;
    }
    
#line 146 
    pfault.__anonCompField_mlx5_pagefault_62.wqe.packet_size = (unsigned int)tmp_19;
    {
      
#line 148 
      struct _ddebug descriptor_4 = {.modname = "mlx5_core", .function = "mlx5_eq_pagefault", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/qp.c", .format = "%s:%s:%d:(pid %d): ", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))150U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 148 
      if ((long)(((int)descriptor_4.flags & 1) != 0) != 0L) {
        struct task_struct *tmp_20;
        
#line 148 
        ;
        
#line 148 
        ;
        
#line 148 
        tmp_20 = get_current();
        
#line 148 
        ;
        
#line 148 
        __dynamic_pr_debug(& descriptor_4,"%s:%s:%d:(pid %d): ",(char *)(& dev->priv.name),"mlx5_eq_pagefault",150,tmp_20->pid,qpn,(int)pfault.__anonCompField_mlx5_pagefault_62.wqe.wqe_index);
      }
      else ;
    }
    {
      
#line 151 
      struct _ddebug descriptor_5 = {.modname = "mlx5_core", .function = "mlx5_eq_pagefault", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/qp.c", .format = "%s:%s:%d:(pid %d): ", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))153U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 151 
      if ((long)(((int)descriptor_5.flags & 1) != 0) != 0L) {
        struct task_struct *tmp_21;
        
#line 151 
        ;
        
#line 151 
        tmp_21 = get_current();
        
#line 151 
        ;
        
#line 151 
        __dynamic_pr_debug(& descriptor_5,"%s:%s:%d:(pid %d): ",(char *)(& dev->priv.name),"mlx5_eq_pagefault",153,tmp_21->pid,pfault.bytes_committed);
      }
      else ;
    }
    
#line 154 
    goto ldv_35442;
    default: 
#line 156 
    ;
    
#line 157 
    ;
    
#line 157 
    ;
    
#line 157 
    tmp_22 = get_current();
    
#line 157 
    ;
    
#line 157 
    printk("\001",(char *)(& dev->priv.name),"mlx5_eq_pagefault",159,tmp_22->pid,(int)eqe->sub_type,qpn);
  }
  ldv_35442: 
#line 165 
  ;
  
#line 165 
  if (qp->pfault_handler != (void (*)(struct mlx5_core_qp *, struct mlx5_pagefault *))0) 
    
#line 166 
    (*(qp->pfault_handler))(qp,& pfault);
  else {
    struct task_struct *tmp_23;
    
#line 168 
    ;
    
#line 168 
    tmp_23 = get_current();
    
#line 168 
    ;
    
#line 168 
    printk("\001",(char *)(& dev->priv.name),"mlx5_eq_pagefault",170,tmp_23->pid,qpn);
  }
  
#line 176 
  mlx5_core_put_rsc(common);
  return_label: 
#line 177 
                return;
}


#line 198 
void __compiletime_assert_198(void);


#line 180  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/qp.c"
int mlx5_core_create_qp(struct mlx5_core_dev *dev, struct mlx5_core_qp *qp, struct mlx5_create_qp_mbox_in *in, int inlen)
{
  int __retres;
  struct mlx5_create_qp_mbox_out out;
  struct mlx5_destroy_qp_mbox_in din;
  struct mlx5_destroy_qp_mbox_out dout;
  int err;
  void *qpc;
  unsigned int tmp_11;
  struct task_struct *tmp_15;
  
#line 185 
  struct mlx5_qp_table *table = & dev->priv.qp_table;
  
#line 192 
  memset((void *)(& out),0,16UL);
  
#line 193 
  in->hdr.opcode = (unsigned short)5U;
  
#line 195 
  if (dev->issi != 0U) {
    
#line 196 
    qpc = (void *)in + 24U;
    {
      
#line 198 
      bool __cond = (_Bool)0;
      
#line 198 
      if ((int)__cond != 0) 
#line 198 
                            __compiletime_assert_198(); else ;
    }
    
#line 198 
    if (0 != 0) {
      unsigned int tmp_2;
      
#line 198 
      if (0 != 0) 
#line 198 
                  tmp_2 = (((((*((__be32 *)qpc + 4U) << 24) | ((*((__be32 *)qpc + 4U) << 8) & 16711680U)) | ((*((__be32 *)qpc + 4U) >> 8) & 65280U)) | (*((__be32 *)qpc + 4U) >> 24)) >> 24) | 4294967040U;
      else {
        __u32 tmp_1;
        
#line 198 
        tmp_1 = __fswab32(*((__be32 *)qpc + 4U));
        
#line 198 
        tmp_2 = (tmp_1 >> 24) | 4294967040U;
      }
      
#line 198 
      *((__be32 *)qpc + 4U) = tmp_2;
    }
    else {
      __u32 tmp_5;
      unsigned int tmp_4;
      
#line 198 
      if (0 != 0) 
#line 198 
                  tmp_4 = ((((*((__be32 *)qpc + 4U) << 24) | ((*((__be32 *)qpc + 4U) << 8) & 16711680U)) | ((*((__be32 *)qpc + 4U) >> 8) & 65280U)) | (*((__be32 *)qpc + 4U) >> 24)) | 16777215U;
      else {
        __u32 tmp_3;
        
#line 198 
        tmp_3 = __fswab32(*((__be32 *)qpc + 4U));
        
#line 198 
        tmp_4 = tmp_3 | 16777215U;
      }
      
#line 198 
      tmp_5 = __fswab32(tmp_4);
      
#line 198 
      *((__be32 *)qpc + 4U) = tmp_5;
    }
  }
  else ;
  
#line 201 
  err = mlx5_cmd_exec(dev,(void *)in,inlen,(void *)(& out),16);
  
#line 202 
  if (err != 0) {
    struct task_struct *tmp_6;
    
#line 203 
    ;
    
#line 203 
    tmp_6 = get_current();
    
#line 203 
    ;
    
#line 203 
    printk("\001",(char *)(& dev->priv.name),"mlx5_core_create_qp",203,tmp_6->pid,err);
    
#line 204 
    __retres = err;
    
#line 204 
    goto return_label;
  }
  else ;
  
#line 207 
  if ((unsigned int)out.hdr.status != 0U) {
    int tmp_7;
    struct task_struct *tmp_8;
    int tmp_9;
    
#line 208 
    tmp_7 = atomic_read((atomic_t const *)(& dev->num_qps));
    
#line 208 
    tmp_8 = get_current();
    
#line 208 
    ;
    
#line 208 
    printk("\001",(char *)(& dev->priv.name),"mlx5_core_create_qp",209,tmp_8->pid,tmp_7);
    
#line 210 
    tmp_9 = mlx5_cmd_status_to_err(& out.hdr);
    
#line 210 
    __retres = tmp_9;
    
#line 210 
    goto return_label;
  }
  else ;
  
#line 213 
  if (0 != 0) 
#line 213 
              tmp_11 = ((((out.qpn << 24) | ((out.qpn << 8) & 16711680U)) | ((out.qpn >> 8) & 65280U)) | (out.qpn >> 24)) & 16777215U;
  else {
    __u32 tmp_10;
    
#line 213 
    tmp_10 = __fswab32(out.qpn);
    
#line 213 
    tmp_11 = tmp_10 & 16777215U;
  }
  
#line 213 
  qp->qpn = (int)tmp_11;
  {
    
#line 214 
    struct _ddebug descriptor = {.modname = "mlx5_core", .function = "mlx5_core_create_qp", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/qp.c", .format = "%s:%s:%d:(pid %d): ", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))214U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 214 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
      struct task_struct *tmp_12;
      
#line 214 
      ;
      
#line 214 
      tmp_12 = get_current();
      
#line 214 
      ;
      
#line 214 
      __dynamic_pr_debug(& descriptor,"%s:%s:%d:(pid %d): ",(char *)(& dev->priv.name),"mlx5_core_create_qp",214,tmp_12->pid,qp->qpn);
    }
    else ;
  }
  
#line 216 
  qp->common.res = MLX5_RES_QP;
  
#line 217 
  ldv_spin_lock_irq_53(& table->lock);
  
#line 218 
  err = radix_tree_insert(& table->tree,(unsigned long)qp->qpn,(void *)qp);
  
#line 219 
  ldv_spin_unlock_irq_54(& table->lock);
  
#line 220 
  if (err != 0) {
    struct task_struct *tmp_13;
    
#line 221 
    ;
    
#line 221 
    tmp_13 = get_current();
    
#line 221 
    ;
    
#line 221 
    printk("\001",(char *)(& dev->priv.name),"mlx5_core_create_qp",221,tmp_13->pid,err);
    
#line 222 
    goto err_cmd;
  }
  else ;
  
#line 225 
  err = mlx5_debug_qp_add(dev,qp);
  
#line 226 
  if (err != 0) {
    
#line 227 
    struct _ddebug descriptor_0 = {.modname = "mlx5_core", .function = "mlx5_core_create_qp", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/qp.c", .format = "%s:%s:%d:(pid %d): ", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))228U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 227 
    if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) {
      struct task_struct *tmp_14;
      
#line 227 
      ;
      
#line 227 
      tmp_14 = get_current();
      
#line 227 
      ;
      
#line 227 
      __dynamic_pr_debug(& descriptor_0,"%s:%s:%d:(pid %d): ",(char *)(& dev->priv.name),"mlx5_core_create_qp",228,tmp_14->pid,qp->qpn);
    }
    else ;
  }
  else ;
  
#line 230 
  tmp_15 = get_current();
  
#line 230 
  qp->pid = tmp_15->pid;
  
#line 231 
  atomic_set(& qp->common.refcount,1);
  
#line 232 
  atomic_inc(& dev->num_qps);
  
#line 233 
  init_completion(& qp->common.free);
  
#line 235 
  __retres = 0;
  
#line 235 
  goto return_label;
  err_cmd: 
#line 237 
  ;
  
#line 238 
  memset((void *)(& din),0,16UL);
  
#line 239 
  memset((void *)(& dout),0,16UL);
  
#line 240 
  din.hdr.opcode = (unsigned short)261U;
  
#line 241 
  if (0 != 0) 
#line 241 
              din.qpn = ((((unsigned int)qp->qpn << 24) | (((unsigned int)qp->qpn << 8) & 16711680U)) | (((unsigned int)qp->qpn >> 8) & 65280U)) | ((unsigned int)qp->qpn >> 24); else 
                                                                    
#line 241 
                                                                    din.qpn = __fswab32((unsigned int)qp->qpn);
  
#line 242 
  mlx5_cmd_exec(dev,(void *)(& din),16,(void *)(& out),16);
  
#line 244 
  __retres = err;
  return_label: 
#line 244 
                return __retres;
}


#line 246  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/qp.c"
static char const __kstrtab_mlx5_core_create_qp[20U] = {(char)'m', (char)'l', (char)'x', (char)'5', (char)'_', (char)'c', (char)'o', (char)'r', (char)'e', (char)'_', (char)'c', (char)'r', (char)'e', (char)'a', (char)'t', (char)'e', (char)'_', (char)'q', (char)'p', (char)'\000'};

#line 246 
struct kernel_symbol const __ksymtab_mlx5_core_create_qp;


#line 246  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/qp.c"
struct kernel_symbol const __ksymtab_mlx5_core_create_qp = {.value = (unsigned long)(& mlx5_core_create_qp), .name = (char const *)(& __kstrtab_mlx5_core_create_qp)};

#line 248  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/qp.c"
int mlx5_core_destroy_qp(struct mlx5_core_dev *dev, struct mlx5_core_qp *qp)
{
  int __retres;
  struct mlx5_destroy_qp_mbox_in in;
  struct mlx5_destroy_qp_mbox_out out;
  unsigned long flags;
  int err;
  
#line 253 
  struct mlx5_qp_table *table = & dev->priv.qp_table;
  
#line 257 
  mlx5_debug_qp_remove(dev,qp);
  
#line 259 
  ldv___ldv_spin_lock_55(& table->lock);
  
#line 260 
  radix_tree_delete(& table->tree,(unsigned long)qp->qpn);
  
#line 261 
  ldv_spin_unlock_irqrestore_56(& table->lock,flags);
  
#line 263 
  mlx5_core_put_rsc((struct mlx5_core_rsc_common *)qp);
  
#line 264 
  wait_for_completion(& qp->common.free);
  
#line 266 
  memset((void *)(& in),0,16UL);
  
#line 267 
  memset((void *)(& out),0,16UL);
  
#line 268 
  in.hdr.opcode = (unsigned short)261U;
  
#line 269 
  if (0 != 0) 
#line 269 
              in.qpn = ((((unsigned int)qp->qpn << 24) | (((unsigned int)qp->qpn << 8) & 16711680U)) | (((unsigned int)qp->qpn >> 8) & 65280U)) | ((unsigned int)qp->qpn >> 24); else 
                                                                    
#line 269 
                                                                    in.qpn = __fswab32((unsigned int)qp->qpn);
  
#line 270 
  err = mlx5_cmd_exec(dev,(void *)(& in),16,(void *)(& out),16);
  
#line 271 
  if (err != 0) {
    
#line 272 
    __retres = err;
    
#line 272 
    goto return_label;
  }
  else ;
  
#line 274 
  if ((unsigned int)out.hdr.status != 0U) {
    int tmp_0;
    
#line 275 
    tmp_0 = mlx5_cmd_status_to_err(& out.hdr);
    
#line 275 
    __retres = tmp_0;
    
#line 275 
    goto return_label;
  }
  else ;
  
#line 277 
  atomic_dec(& dev->num_qps);
  
#line 278 
  __retres = 0;
  return_label: 
#line 278 
                return __retres;
}


#line 280  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/qp.c"
static char const __kstrtab_mlx5_core_destroy_qp[21U] = {(char)'m', (char)'l', (char)'x', (char)'5', (char)'_', (char)'c', (char)'o', (char)'r', (char)'e', (char)'_', (char)'d', (char)'e', (char)'s', (char)'t', (char)'r', (char)'o', (char)'y', (char)'_', (char)'q', (char)'p', (char)'\000'};

#line 280 
struct kernel_symbol const __ksymtab_mlx5_core_destroy_qp;


#line 280  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/qp.c"
struct kernel_symbol const __ksymtab_mlx5_core_destroy_qp = {.value = (unsigned long)(& mlx5_core_destroy_qp), .name = (char const *)(& __kstrtab_mlx5_core_destroy_qp)};

#line 282  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/qp.c"
int mlx5_core_qp_modify(struct mlx5_core_dev *dev, enum mlx5_qp_state cur_state, enum mlx5_qp_state new_state, struct mlx5_modify_qp_mbox_in *in, int sqd_event, struct mlx5_core_qp *qp)
{
  int __retres;
  struct mlx5_modify_qp_mbox_out out;
  u16 op;
  int tmp_1;
  
#line 287 
  u16 const optab[10U][10U] = {{(unsigned short)1290U, (unsigned short)1282U, [6] = (unsigned short)1287U}, {(unsigned short)1290U, (unsigned short)1294U, (unsigned short)1283U, [6] = (unsigned short)1287U}, {(unsigned short)1290U, [3] = (unsigned short)1284U, [6] = (unsigned short)1287U}, {(unsigned short)1290U, [3] = (unsigned short)1285U, [6] = (unsigned short)1287U}, {(unsigned short)1290U, [3] = (unsigned short)1286U, [6] = (unsigned short)1287U}, {(unsigned short)1290U, [6] = (unsigned short)1287U}, {(unsigned short)1290U, [6] = (unsigned short)1287U}};
  
#line 325 
  int err = 0;
  
#line 328 
  if ((cur_state > (unsigned int)MLX5_QP_STATE_SUSPENDED || new_state > (unsigned int)MLX5_QP_STATE_SUSPENDED) || (unsigned int)optab[(unsigned int)cur_state][(unsigned int)new_state] == 0U) {
    
#line 330 
    __retres = -22;
    
#line 330 
    goto return_label;
  }
  else ;
  
#line 332 
  memset((void *)(& out),0,16UL);
  
#line 333 
  op = optab[(unsigned int)cur_state][(unsigned int)new_state];
  
#line 334 
  if (0 != 0) 
#line 334 
              in->hdr.opcode = (unsigned short)(((int)op << 8) | ((int)op >> 8)); else 
                                                                    
#line 334 
                                                                    in->hdr.opcode = __fswab16((unsigned short)((int)op));
  
#line 335 
  if (0 != 0) 
#line 335 
              in->qpn = ((((unsigned int)qp->qpn << 24) | (((unsigned int)qp->qpn << 8) & 16711680U)) | (((unsigned int)qp->qpn >> 8) & 65280U)) | ((unsigned int)qp->qpn >> 24); else 
                                                                    
#line 335 
                                                                    in->qpn = __fswab32((unsigned int)qp->qpn);
  
#line 336 
  err = mlx5_cmd_exec(dev,(void *)in,256,(void *)(& out),16);
  
#line 337 
  if (err != 0) {
    
#line 338 
    __retres = err;
    
#line 338 
    goto return_label;
  }
  else ;
  
#line 340 
  tmp_1 = mlx5_cmd_status_to_err(& out.hdr);
  
#line 340 
  __retres = tmp_1;
  return_label: 
#line 340 
                return __retres;
}


#line 342  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/qp.c"
static char const __kstrtab_mlx5_core_qp_modify[20U] = {(char)'m', (char)'l', (char)'x', (char)'5', (char)'_', (char)'c', (char)'o', (char)'r', (char)'e', (char)'_', (char)'q', (char)'p', (char)'_', (char)'m', (char)'o', (char)'d', (char)'i', (char)'f', (char)'y', (char)'\000'};

#line 342 
struct kernel_symbol const __ksymtab_mlx5_core_qp_modify;


#line 342  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/qp.c"
struct kernel_symbol const __ksymtab_mlx5_core_qp_modify = {.value = (unsigned long)(& mlx5_core_qp_modify), .name = (char const *)(& __kstrtab_mlx5_core_qp_modify)};

#line 344  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/qp.c"
void mlx5_init_qp_table(struct mlx5_core_dev *dev)
{
  
#line 346 
  struct mlx5_qp_table *table = & dev->priv.qp_table;
  
#line 348 
  spinlock_check(& table->lock);
  {
    struct lock_class_key __key;
    
#line 348 
    __raw_spin_lock_init(& table->lock.__anonCompField_spinlock_18.rlock,"&(&table->lock)->rlock",& __key);
  }
  
#line 349 
  table->tree.height = 0U;
  
#line 349 
  table->tree.gfp_mask = 32U;
  
#line 349 
  table->tree.rnode = (struct radix_tree_node *)0;
  
#line 350 
  mlx5_qp_debugfs_init(dev);
  
#line 351 
  return;
}


#line 353  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/qp.c"
void mlx5_cleanup_qp_table(struct mlx5_core_dev *dev)
{
  
#line 355 
  mlx5_qp_debugfs_cleanup(dev);
  
#line 356 
  return;
}


#line 358  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/qp.c"
int mlx5_core_qp_query(struct mlx5_core_dev *dev, struct mlx5_core_qp *qp, struct mlx5_query_qp_mbox_out *out, int outlen)
{
  int __retres;
  struct mlx5_query_qp_mbox_in in;
  int err;
  
#line 364 
  memset((void *)(& in),0,16UL);
  
#line 365 
  memset((void *)out,0,(unsigned long)outlen);
  
#line 366 
  in.hdr.opcode = (unsigned short)2821U;
  
#line 367 
  if (0 != 0) 
#line 367 
              in.qpn = ((((unsigned int)qp->qpn << 24) | (((unsigned int)qp->qpn << 8) & 16711680U)) | (((unsigned int)qp->qpn >> 8) & 65280U)) | ((unsigned int)qp->qpn >> 24); else 
                                                                    
#line 367 
                                                                    in.qpn = __fswab32((unsigned int)qp->qpn);
  
#line 368 
  err = mlx5_cmd_exec(dev,(void *)(& in),16,(void *)out,outlen);
  
#line 369 
  if (err != 0) {
    
#line 370 
    __retres = err;
    
#line 370 
    goto return_label;
  }
  else ;
  
#line 372 
  if ((unsigned int)out->hdr.status != 0U) {
    int tmp_0;
    
#line 373 
    tmp_0 = mlx5_cmd_status_to_err(& out->hdr);
    
#line 373 
    __retres = tmp_0;
    
#line 373 
    goto return_label;
  }
  else ;
  
#line 375 
  __retres = err;
  return_label: 
#line 375 
                return __retres;
}


#line 377  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/qp.c"
static char const __kstrtab_mlx5_core_qp_query[19U] = {(char)'m', (char)'l', (char)'x', (char)'5', (char)'_', (char)'c', (char)'o', (char)'r', (char)'e', (char)'_', (char)'q', (char)'p', (char)'_', (char)'q', (char)'u', (char)'e', (char)'r', (char)'y', (char)'\000'};

#line 377 
struct kernel_symbol const __ksymtab_mlx5_core_qp_query;


#line 377  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/qp.c"
struct kernel_symbol const __ksymtab_mlx5_core_qp_query = {.value = (unsigned long)(& mlx5_core_qp_query), .name = (char const *)(& __kstrtab_mlx5_core_qp_query)};

#line 379  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/qp.c"
int mlx5_core_xrcd_alloc(struct mlx5_core_dev *dev, u32 *xrcdn)
{
  int __retres;
  struct mlx5_alloc_xrcd_mbox_in in;
  struct mlx5_alloc_xrcd_mbox_out out;
  int err;
  
#line 385 
  memset((void *)(& in),0,16UL);
  
#line 386 
  memset((void *)(& out),0,16UL);
  
#line 387 
  in.hdr.opcode = (unsigned short)3592U;
  
#line 388 
  err = mlx5_cmd_exec(dev,(void *)(& in),16,(void *)(& out),16);
  
#line 389 
  if (err != 0) {
    
#line 390 
    __retres = err;
    
#line 390 
    goto return_label;
  }
  else ;
  
#line 392 
  if ((unsigned int)out.hdr.status != 0U) 
#line 393 
                                          err = mlx5_cmd_status_to_err(& out.hdr);
  else 
    
#line 395 
    if (0 != 0) 
#line 395 
                *xrcdn = (((out.xrcdn << 24) | ((out.xrcdn << 8) & 16711680U)) | ((out.xrcdn >> 8) & 65280U)) | (out.xrcdn >> 24); else 
                                                                    
#line 395 
                                                                    *xrcdn = __fswab32(out.xrcdn);
  
#line 397 
  __retres = err;
  return_label: 
#line 397 
                return __retres;
}


#line 399  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/qp.c"
static char const __kstrtab_mlx5_core_xrcd_alloc[21U] = {(char)'m', (char)'l', (char)'x', (char)'5', (char)'_', (char)'c', (char)'o', (char)'r', (char)'e', (char)'_', (char)'x', (char)'r', (char)'c', (char)'d', (char)'_', (char)'a', (char)'l', (char)'l', (char)'o', (char)'c', (char)'\000'};

#line 399 
struct kernel_symbol const __ksymtab_mlx5_core_xrcd_alloc;


#line 399  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/qp.c"
struct kernel_symbol const __ksymtab_mlx5_core_xrcd_alloc = {.value = (unsigned long)(& mlx5_core_xrcd_alloc), .name = (char const *)(& __kstrtab_mlx5_core_xrcd_alloc)};

#line 401  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/qp.c"
int mlx5_core_xrcd_dealloc(struct mlx5_core_dev *dev, u32 xrcdn)
{
  int __retres;
  struct mlx5_dealloc_xrcd_mbox_in in;
  struct mlx5_dealloc_xrcd_mbox_out out;
  int err;
  
#line 407 
  memset((void *)(& in),0,16UL);
  
#line 408 
  memset((void *)(& out),0,16UL);
  
#line 409 
  in.hdr.opcode = (unsigned short)3848U;
  
#line 410 
  if (0 != 0) 
#line 410 
              in.xrcdn = (((xrcdn << 24) | ((xrcdn << 8) & 16711680U)) | ((xrcdn >> 8) & 65280U)) | (xrcdn >> 24); else 
                                                                    
#line 410 
                                                                    in.xrcdn = __fswab32(xrcdn);
  
#line 411 
  err = mlx5_cmd_exec(dev,(void *)(& in),16,(void *)(& out),16);
  
#line 412 
  if (err != 0) {
    
#line 413 
    __retres = err;
    
#line 413 
    goto return_label;
  }
  else ;
  
#line 415 
  if ((unsigned int)out.hdr.status != 0U) 
#line 416 
                                          err = mlx5_cmd_status_to_err(& out.hdr); else ;
  
#line 418 
  __retres = err;
  return_label: 
#line 418 
                return __retres;
}


#line 420  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/qp.c"
static char const __kstrtab_mlx5_core_xrcd_dealloc[23U] = {(char)'m', (char)'l', (char)'x', (char)'5', (char)'_', (char)'c', (char)'o', (char)'r', (char)'e', (char)'_', (char)'x', (char)'r', (char)'c', (char)'d', (char)'_', (char)'d', (char)'e', (char)'a', (char)'l', (char)'l', (char)'o', (char)'c', (char)'\000'};

#line 420 
struct kernel_symbol const __ksymtab_mlx5_core_xrcd_dealloc;


#line 420  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/qp.c"
struct kernel_symbol const __ksymtab_mlx5_core_xrcd_dealloc = {.value = (unsigned long)(& mlx5_core_xrcd_dealloc), .name = (char const *)(& __kstrtab_mlx5_core_xrcd_dealloc)};

#line 423  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/qp.c"
int mlx5_core_page_fault_resume(struct mlx5_core_dev *dev, u32 qpn, u8 flags, int error)
{
  int __retres;
  struct mlx5_page_fault_resume_mbox_in in;
  struct mlx5_page_fault_resume_mbox_out out;
  int err;
  int tmp;
  
#line 430 
  memset((void *)(& in),0,16UL);
  
#line 431 
  memset((void *)(& out),0,16UL);
  
#line 432 
  in.hdr.opcode = (unsigned short)1026U;
  
#line 433 
  in.hdr.opmod = (unsigned short)0U;
  
#line 434 
  flags = (unsigned char)((unsigned int)flags & 7U);
  
#line 437 
  if (error != 0) 
#line 437 
                  tmp = -128; else 
#line 437 
                                   tmp = 0;
  
#line 437 
  flags = (unsigned char)(tmp | (int)flags);
  
#line 438 
  if (0 != 0) 
#line 438 
              in.flags_qpn = (((((qpn & 16777215U) | (unsigned int)((int)flags << 24)) << 24) | ((((qpn & 16777215U) | (unsigned int)((int)flags << 24)) << 8) & 16711680U)) | ((((qpn & 16777215U) | (unsigned int)((int)flags << 24)) >> 8) & 65280U)) | (((qpn & 16777215U) | (unsigned int)((int)flags << 24)) >> 24); else 
                                                                    
#line 438 
                                                                    in.flags_qpn = __fswab32((qpn & 16777215U) | (unsigned int)((int)flags << 24));
  
#line 440 
  err = mlx5_cmd_exec(dev,(void *)(& in),16,(void *)(& out),16);
  
#line 441 
  if (err != 0) {
    
#line 442 
    __retres = err;
    
#line 442 
    goto return_label;
  }
  else ;
  
#line 444 
  if ((unsigned int)out.hdr.status != 0U) 
#line 445 
                                          err = mlx5_cmd_status_to_err(& out.hdr); else ;
  
#line 447 
  __retres = err;
  return_label: 
#line 447 
                return __retres;
}


#line 449  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/qp.c"
static char const __kstrtab_mlx5_core_page_fault_resume[28U] = {(char)'m', (char)'l', (char)'x', (char)'5', (char)'_', (char)'c', (char)'o', (char)'r', (char)'e', (char)'_', (char)'p', (char)'a', (char)'g', (char)'e', (char)'_', (char)'f', (char)'a', (char)'u', (char)'l', (char)'t', (char)'_', (char)'r', (char)'e', (char)'s', (char)'u', (char)'m', (char)'e', (char)'\000'};

#line 449 
struct kernel_symbol const __ksymtab_mlx5_core_page_fault_resume;


#line 449  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/qp.c"
struct kernel_symbol const __ksymtab_mlx5_core_page_fault_resume = {.value = (unsigned long)(& mlx5_core_page_fault_resume), .name = (char const *)(& __kstrtab_mlx5_core_page_fault_resume)};

#line 118  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_qp.c.aux"
static void atomic_inc(atomic_t *v)
{
  
#line 121 
  ldv_atomic_inc(v);
  
#line 122 
  return;
}


#line 125  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_qp.c.aux"
static void atomic_dec(atomic_t *v)
{
  
#line 128 
  ldv_atomic_dec(v);
  
#line 129 
  return;
}


#line 132  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_qp.c.aux"
static int atomic_dec_and_test(atomic_t *v)
{
  int tmp;
  
#line 135 
  tmp = ldv_atomic_dec_and_test(v);
  
#line 135 
  return tmp;
}


#line 514  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_qp.c.aux"
static void ldv_spin_lock_51(spinlock_t *lock)
{
  
#line 518 
  ldv_spin_model_lock((char *)"lock_of_mlx5_qp_table");
  
#line 520 
  spin_lock_0(lock);
  
#line 521 
  return;
}


#line 524  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_qp.c.aux"
static void ldv_spin_unlock_52(spinlock_t *lock)
{
  
#line 528 
  ldv_spin_model_unlock((char *)"lock_of_mlx5_qp_table");
  
#line 530 
  spin_unlock_0(lock);
  
#line 531 
  return;
}


#line 534  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_qp.c.aux"
static void ldv_spin_lock_irq_53(spinlock_t *lock)
{
  
#line 538 
  ldv_spin_model_lock((char *)"lock_of_mlx5_qp_table");
  
#line 540 
  spin_lock_irq_0(lock);
  
#line 541 
  return;
}


#line 544  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_qp.c.aux"
static void ldv_spin_unlock_irq_54(spinlock_t *lock)
{
  
#line 548 
  ldv_spin_model_unlock((char *)"lock_of_mlx5_qp_table");
  
#line 550 
  spin_unlock_irq_0(lock);
  
#line 551 
  return;
}


#line 554  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_qp.c.aux"
static void ldv___ldv_spin_lock_55(spinlock_t *ldv_func_arg1)
{
  
#line 558 
  ldv_spin_model_lock((char *)"lock_of_mlx5_qp_table");
  
#line 560 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 561 
  return;
}


#line 564  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_qp.c.aux"
static void ldv_spin_unlock_irqrestore_56(spinlock_t *lock, unsigned long flags)
{
  
#line 568 
  ldv_spin_model_unlock((char *)"lock_of_mlx5_qp_table");
  
#line 570 
  spin_unlock_irqrestore_0(lock,flags);
  
#line 571 
  return;
}


#line 94  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/bitops.h"
__inline static void __set_bit(long nr, unsigned long volatile *addr)
{
  
#line 96 
  ldv_inline_asm();
  
#line 97 
  return;
}


#line 28  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/bitops/find.h"
unsigned long find_next_zero_bit(unsigned long const *, unsigned long, unsigned long);


#line 40  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/log2.h"
__inline static int __ilog2_u64(u64 n)
{
  int __retres;
  int tmp;
  
#line 42 
  tmp = fls64(n);
  
#line 42 
  __retres = tmp + -1;
  
#line 42 
  return __retres;
}


#line 63  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/string_64.h"
int memcmp(void const *, void const *, size_t);


#line 33  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_flow_table.c.aux"
static void ldv_mutex_lock_51(struct mutex *ldv_func_arg1);


#line 39 
void ldv_mutex_model_lock(struct mutex *, char *);


#line 41 
void ldv_mutex_model_unlock(struct mutex *, char *);


#line 25  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/slab.h"
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags);


#line 119  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mutex.h"
void __mutex_init(struct mutex *, char const *, struct lock_class_key *);


#line 189 
static void ldv_mutex_unlock_52(struct mutex *ldv_func_arg1);


#line 120  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/signal.h"
void __compiletime_assert_120(void);


#line 235  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rculist.h"
void __compiletime_assert_235(void);


#line 542  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/slab.h"
static void *kcalloc(size_t n, size_t size, gfp_t flags);


#line 581 
static void *kzalloc_0(size_t size, gfp_t flags);


#line 403  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm.h"
void kvfree(void const *);


#line 70  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/vmalloc.h"
void *vzalloc(unsigned long);


#line 637  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/driver.h"
__inline static void *mlx5_vzalloc(unsigned long size)
{
  void *rtn;
  
#line 641 
  rtn = kzalloc_0(size,720U);
  
#line 642 
  if (rtn == (void *)0) 
#line 643 
                        rtn = vzalloc(size); else ;
  
#line 644 
  return rtn;
}


#line 44  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/flow_table.h"
void *mlx5_create_flow_table(struct mlx5_core_dev *dev, u8 level, u8 table_type, u16 num_groups, struct mlx5_flow_table_group *group);


#line 47 
void mlx5_destroy_flow_table(void *flow_table);


#line 48 
int mlx5_add_flow_table_entry(void *flow_table, u8 match_criteria_enable, void *match_criteria, void *flow_context, u32 *flow_index);


#line 51 
void mlx5_del_flow_table_entry(void *flow_table, u32 flow_index);


#line 52 
u32 mlx5_get_flow_table_id(void *flow_table);


#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.h"
__inline static int mlx5_cmd_exec_check_status(struct mlx5_core_dev *dev, u32 *in, int in_size, u32 *out, int out_size)
{
  int tmp;
  
#line 76 
  mlx5_cmd_exec(dev,(void *)in,in_size,(void *)out,out_size);
  
#line 77 
  tmp = mlx5_cmd_status_to_err((struct mlx5_outbox_hdr *)out);
  
#line 77 
  return tmp;
}


#line 74  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/flow_table.c"
void __compiletime_assert_74(void);


#line 75 
void __compiletime_assert_75(void);


#line 76 
void __compiletime_assert_76(void);


#line 77 
void __compiletime_assert_77(void);


#line 83 
void __compiletime_assert_84(void);


#line 56  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/flow_table.c"
static int mlx5_set_flow_entry_cmd(struct mlx5_flow_table *ft, u32 group_ix, u32 flow_index, void *flow_context)
{
  int __retres;
  u32 out[4U];
  u32 *in;
  void *in_flow_context;
  unsigned int tmp_0;
  int err;
  
#line 62 
  if (0 != 0) 
#line 62 
              tmp_0 = (((((*((__be32 *)flow_context + 4U) << 24) | ((*((__be32 *)flow_context + 4U) << 8) & 16711680U)) | ((*((__be32 *)flow_context + 4U) >> 8) & 65280U)) | (*((__be32 *)flow_context + 4U) >> 24)) & 16777215U) * 8U;
  else {
    __u32 tmp;
    
#line 63 
    tmp = __fswab32(*((__be32 *)flow_context + 4U));
    
#line 62 
    tmp_0 = (tmp & 16777215U) * 8U;
  }
  
#line 62 
  int fcdls = (int)tmp_0;
  
#line 65 
  int inlen = (int)((unsigned int)fcdls + 832U);
  
#line 68 
  in = (u32 *)mlx5_vzalloc((unsigned long)inlen);
  
#line 69 
  if (in == (u32 *)0U) {
    struct task_struct *tmp_2;
    
#line 70 
    tmp_2 = get_current();
    
#line 70 
    ;
    
#line 70 
    printk("\001",(char *)(& (ft->dev)->priv.name),"mlx5_set_flow_entry_cmd",70,tmp_2->pid);
    
#line 71 
    __retres = -12;
    
#line 71 
    goto return_label;
  }
  else ;
  {
    
#line 74 
    bool __cond = (_Bool)0;
    
#line 74 
    if ((int)__cond != 0) 
#line 74 
                          __compiletime_assert_74(); else ;
  }
  
#line 74 
  if (0 != 0) {
    unsigned int tmp_6;
    unsigned int tmp_8;
    unsigned int tmp_10;
    unsigned int tmp_12;
    
#line 74 
    if (0 != 0) 
#line 74 
                tmp_6 = ((((*(in + 4U) << 24) | ((*(in + 4U) << 8) & 16711680U)) | ((*(in + 4U) >> 8) & 65280U)) | (*(in + 4U) >> 24)) & 16777215U;
    else {
      __u32 tmp_5;
      
#line 74 
      tmp_5 = __fswab32(*(in + 4U));
      
#line 74 
      tmp_6 = tmp_5 & 16777215U;
    }
    
#line 74 
    if (0 != 0) 
#line 74 
                tmp_8 = ((((*(in + 4U) << 24) | ((*(in + 4U) << 8) & 16711680U)) | ((*(in + 4U) >> 8) & 65280U)) | (*(in + 4U) >> 24)) & 16777215U;
    else {
      __u32 tmp_7;
      
#line 74 
      tmp_7 = __fswab32(*(in + 4U));
      
#line 74 
      tmp_8 = tmp_7 & 16777215U;
    }
    
#line 74 
    if (0 != 0) 
#line 74 
                tmp_10 = ((((*(in + 4U) << 24) | ((*(in + 4U) << 8) & 16711680U)) | ((*(in + 4U) >> 8) & 65280U)) | (*(in + 4U) >> 24)) & 16777215U;
    else {
      __u32 tmp_9;
      
#line 74 
      tmp_9 = __fswab32(*(in + 4U));
      
#line 74 
      tmp_10 = tmp_9 & 16777215U;
    }
    
#line 74 
    if (0 != 0) 
#line 74 
                tmp_12 = ((((*(in + 4U) << 24) | ((*(in + 4U) << 8) & 16711680U)) | ((*(in + 4U) >> 8) & 65280U)) | (*(in + 4U) >> 24)) & 16777215U;
    else {
      __u32 tmp_11;
      
#line 74 
      tmp_11 = __fswab32(*(in + 4U));
      
#line 74 
      tmp_12 = tmp_11 & 16777215U;
    }
    
#line 74 
    *(in + 4U) = ((((tmp_6 | ((unsigned int)ft->type << 24UL)) << 24) | (((tmp_8 | ((unsigned int)ft->type << 24UL)) << 8) & 16711680U)) | (((tmp_10 | ((unsigned int)ft->type << 24UL)) >> 8) & 65280U)) | ((tmp_12 | ((unsigned int)ft->type << 24UL)) >> 24);
  }
  else {
    __u32 tmp_15;
    unsigned int tmp_14;
    
#line 74 
    if (0 != 0) 
#line 74 
                tmp_14 = ((((*(in + 4U) << 24) | ((*(in + 4U) << 8) & 16711680U)) | ((*(in + 4U) >> 8) & 65280U)) | (*(in + 4U) >> 24)) & 16777215U;
    else {
      __u32 tmp_13;
      
#line 74 
      tmp_13 = __fswab32(*(in + 4U));
      
#line 74 
      tmp_14 = tmp_13 & 16777215U;
    }
    
#line 74 
    ;
    
#line 74 
    tmp_15 = __fswab32(tmp_14 | ((unsigned int)ft->type << 24UL));
    
#line 74 
    *(in + 4U) = tmp_15;
  }
  {
    
#line 75 
    bool __cond_0 = (_Bool)0;
    
#line 75 
    if ((int)__cond_0 != 0) 
#line 75 
                            __compiletime_assert_75(); else ;
  }
  
#line 75 
  if (0 != 0) {
    unsigned int tmp_19;
    unsigned int tmp_21;
    unsigned int tmp_23;
    unsigned int tmp_25;
    
#line 75 
    if (0 != 0) 
#line 75 
                tmp_19 = ((((*(in + 5U) << 24) | ((*(in + 5U) << 8) & 16711680U)) | ((*(in + 5U) >> 8) & 65280U)) | (*(in + 5U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_18;
      
#line 75 
      tmp_18 = __fswab32(*(in + 5U));
      
#line 75 
      tmp_19 = tmp_18 & 4278190080U;
    }
    
#line 75 
    if (0 != 0) 
#line 75 
                tmp_21 = ((((*(in + 5U) << 24) | ((*(in + 5U) << 8) & 16711680U)) | ((*(in + 5U) >> 8) & 65280U)) | (*(in + 5U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_20;
      
#line 75 
      tmp_20 = __fswab32(*(in + 5U));
      
#line 75 
      tmp_21 = tmp_20 & 4278190080U;
    }
    
#line 75 
    if (0 != 0) 
#line 75 
                tmp_23 = ((((*(in + 5U) << 24) | ((*(in + 5U) << 8) & 16711680U)) | ((*(in + 5U) >> 8) & 65280U)) | (*(in + 5U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_22;
      
#line 75 
      tmp_22 = __fswab32(*(in + 5U));
      
#line 75 
      tmp_23 = tmp_22 & 4278190080U;
    }
    
#line 75 
    if (0 != 0) 
#line 75 
                tmp_25 = ((((*(in + 5U) << 24) | ((*(in + 5U) << 8) & 16711680U)) | ((*(in + 5U) >> 8) & 65280U)) | (*(in + 5U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_24;
      
#line 75 
      tmp_24 = __fswab32(*(in + 5U));
      
#line 75 
      tmp_25 = tmp_24 & 4278190080U;
    }
    
#line 75 
    *(in + 5U) = ((((tmp_19 | (ft->id & 16777215U)) << 24) | (((tmp_21 | (ft->id & 16777215U)) << 8) & 16711680U)) | (((tmp_23 | (ft->id & 16777215U)) >> 8) & 65280U)) | ((tmp_25 | (ft->id & 16777215U)) >> 24);
  }
  else {
    __u32 tmp_28;
    unsigned int tmp_27;
    
#line 75 
    if (0 != 0) 
#line 75 
                tmp_27 = ((((*(in + 5U) << 24) | ((*(in + 5U) << 8) & 16711680U)) | ((*(in + 5U) >> 8) & 65280U)) | (*(in + 5U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_26;
      
#line 75 
      tmp_26 = __fswab32(*(in + 5U));
      
#line 75 
      tmp_27 = tmp_26 & 4278190080U;
    }
    
#line 75 
    ;
    
#line 75 
    tmp_28 = __fswab32(tmp_27 | (ft->id & 16777215U));
    
#line 75 
    *(in + 5U) = tmp_28;
  }
  {
    
#line 76 
    bool __cond_1 = (_Bool)0;
    
#line 76 
    if ((int)__cond_1 != 0) 
#line 76 
                            __compiletime_assert_76(); else ;
  }
  
#line 76 
  if (0 != 0) 
#line 76 
              *(in + 8U) = (((flow_index << 24) | ((flow_index << 8) & 16711680U)) | ((flow_index >> 8) & 65280U)) | (flow_index >> 24); else 
                                                                    
#line 76 
                                                                    *(in + 8U) = __fswab32(flow_index);
  {
    
#line 77 
    bool __cond_2 = (_Bool)0;
    
#line 77 
    if ((int)__cond_2 != 0) 
#line 77 
                            __compiletime_assert_77(); else ;
  }
  
#line 77 
  if (0 != 0) {
    unsigned int tmp_33;
    unsigned int tmp_35;
    
#line 77 
    if (0 != 0) 
#line 77 
                tmp_33 = ((((*in << 24) | ((*in << 8) & 16711680U)) | ((*in >> 8) & 65280U)) | (*in >> 24)) << 24;
    else {
      __u32 tmp_32;
      
#line 77 
      tmp_32 = __fswab32(*in);
      
#line 77 
      tmp_33 = tmp_32 << 24;
    }
    
#line 77 
    if (0 != 0) 
#line 77 
                tmp_35 = (((((*in << 24) | ((*in << 8) & 16711680U)) | ((*in >> 8) & 65280U)) | (*in >> 24)) << 8) & 16711680U;
    else {
      __u32 tmp_34;
      
#line 77 
      tmp_34 = __fswab32(*in);
      
#line 77 
      tmp_35 = (tmp_34 << 8) & 16711680U;
    }
    
#line 77 
    *in = (tmp_33 | tmp_35) | 13833U;
  }
  else {
    __u32 tmp_38;
    unsigned int tmp_37;
    
#line 77 
    if (0 != 0) 
#line 77 
                tmp_37 = (((((*in << 24) | ((*in << 8) & 16711680U)) | ((*in >> 8) & 65280U)) | (*in >> 24)) & 65535U) | 154533888U;
    else {
      __u32 tmp_36;
      
#line 77 
      tmp_36 = __fswab32(*in);
      
#line 77 
      tmp_37 = (tmp_36 & 65535U) | 154533888U;
    }
    
#line 77 
    tmp_38 = __fswab32(tmp_37);
    
#line 77 
    *in = tmp_38;
  }
  
#line 79 
  in_flow_context = (void *)in + 64U;
  
#line 80 
  memcpy(in_flow_context,(void const *)flow_context,(unsigned long)fcdls + 768UL);
  {
    
#line 83 
    bool __cond_3 = (_Bool)0;
    
#line 83 
    if ((int)__cond_3 != 0) 
#line 83 
                            __compiletime_assert_84(); else ;
  }
  
#line 83 
  if (0 != 0) 
#line 83 
              *((__be32 *)in_flow_context + 1U) = ((((ft->group + group_ix)->id << 24) | (((ft->group + group_ix)->id << 8) & 16711680U)) | (((ft->group + group_ix)->id >> 8) & 65280U)) | ((ft->group + group_ix)->id >> 24); else 
                                                                    
#line 83 
                                                                    *((__be32 *)in_flow_context + 1U) = __fswab32((ft->group + group_ix)->id);
  
#line 86 
  memset((void *)(& out),0,16UL);
  
#line 87 
  err = mlx5_cmd_exec_check_status(ft->dev,in,inlen,(u32 *)(& out),16);
  
#line 89 
  kvfree((void const *)in);
  
#line 91 
  __retres = err;
  return_label: 
#line 91 
                return __retres;
}


#line 103 
void __compiletime_assert_103(void);


#line 104 
void __compiletime_assert_104(void);


#line 105 
void __compiletime_assert_105(void);


#line 106 
void __compiletime_assert_106(void);


#line 94  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/flow_table.c"
static void mlx5_del_flow_entry_cmd(struct mlx5_flow_table *ft, u32 flow_index)
{
  u32 in[16U];
  u32 out[4U];
  
#line 99 
  memset((void *)(& in),0,64UL);
  
#line 100 
  memset((void *)(& out),0,16UL);
  {
    
#line 103 
    bool __cond = (_Bool)0;
    
#line 103 
    if ((int)__cond != 0) 
#line 103 
                          __compiletime_assert_103(); else ;
  }
  
#line 103 
  if (0 != 0) {
    unsigned int tmp_2;
    unsigned int tmp_4;
    unsigned int tmp_6;
    unsigned int tmp_8;
    
#line 103 
    if (0 != 0) 
#line 103 
                tmp_2 = ((((*((__be32 *)(& in) + 4U) << 24) | ((*((__be32 *)(& in) + 4U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 4U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 4U) >> 24)) & 16777215U;
    else {
      __u32 tmp_1;
      
#line 103 
      tmp_1 = __fswab32(*((__be32 *)(& in) + 4U));
      
#line 103 
      tmp_2 = tmp_1 & 16777215U;
    }
    
#line 103 
    if (0 != 0) 
#line 103 
                tmp_4 = ((((*((__be32 *)(& in) + 4U) << 24) | ((*((__be32 *)(& in) + 4U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 4U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 4U) >> 24)) & 16777215U;
    else {
      __u32 tmp_3;
      
#line 103 
      tmp_3 = __fswab32(*((__be32 *)(& in) + 4U));
      
#line 103 
      tmp_4 = tmp_3 & 16777215U;
    }
    
#line 103 
    if (0 != 0) 
#line 103 
                tmp_6 = ((((*((__be32 *)(& in) + 4U) << 24) | ((*((__be32 *)(& in) + 4U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 4U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 4U) >> 24)) & 16777215U;
    else {
      __u32 tmp_5;
      
#line 103 
      tmp_5 = __fswab32(*((__be32 *)(& in) + 4U));
      
#line 103 
      tmp_6 = tmp_5 & 16777215U;
    }
    
#line 103 
    if (0 != 0) 
#line 103 
                tmp_8 = ((((*((__be32 *)(& in) + 4U) << 24) | ((*((__be32 *)(& in) + 4U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 4U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 4U) >> 24)) & 16777215U;
    else {
      __u32 tmp_7;
      
#line 103 
      tmp_7 = __fswab32(*((__be32 *)(& in) + 4U));
      
#line 103 
      tmp_8 = tmp_7 & 16777215U;
    }
    
#line 103 
    *((__be32 *)(& in) + 4U) = ((((tmp_2 | ((unsigned int)ft->type << 24UL)) << 24) | (((tmp_4 | ((unsigned int)ft->type << 24UL)) << 8) & 16711680U)) | (((tmp_6 | ((unsigned int)ft->type << 24UL)) >> 8) & 65280U)) | ((tmp_8 | ((unsigned int)ft->type << 24UL)) >> 24);
  }
  else {
    __u32 tmp_11;
    unsigned int tmp_10;
    
#line 103 
    if (0 != 0) 
#line 103 
                tmp_10 = ((((*((__be32 *)(& in) + 4U) << 24) | ((*((__be32 *)(& in) + 4U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 4U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 4U) >> 24)) & 16777215U;
    else {
      __u32 tmp_9;
      
#line 103 
      tmp_9 = __fswab32(*((__be32 *)(& in) + 4U));
      
#line 103 
      tmp_10 = tmp_9 & 16777215U;
    }
    
#line 103 
    ;
    
#line 103 
    tmp_11 = __fswab32(tmp_10 | ((unsigned int)ft->type << 24UL));
    
#line 103 
    *((__be32 *)(& in) + 4U) = tmp_11;
  }
  {
    
#line 104 
    bool __cond_0 = (_Bool)0;
    
#line 104 
    if ((int)__cond_0 != 0) 
#line 104 
                            __compiletime_assert_104(); else ;
  }
  
#line 104 
  if (0 != 0) {
    unsigned int tmp_15;
    unsigned int tmp_17;
    unsigned int tmp_19;
    unsigned int tmp_21;
    
#line 104 
    if (0 != 0) 
#line 104 
                tmp_15 = ((((*((__be32 *)(& in) + 5U) << 24) | ((*((__be32 *)(& in) + 5U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 5U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 5U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_14;
      
#line 104 
      tmp_14 = __fswab32(*((__be32 *)(& in) + 5U));
      
#line 104 
      tmp_15 = tmp_14 & 4278190080U;
    }
    
#line 104 
    if (0 != 0) 
#line 104 
                tmp_17 = ((((*((__be32 *)(& in) + 5U) << 24) | ((*((__be32 *)(& in) + 5U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 5U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 5U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_16;
      
#line 104 
      tmp_16 = __fswab32(*((__be32 *)(& in) + 5U));
      
#line 104 
      tmp_17 = tmp_16 & 4278190080U;
    }
    
#line 104 
    if (0 != 0) 
#line 104 
                tmp_19 = ((((*((__be32 *)(& in) + 5U) << 24) | ((*((__be32 *)(& in) + 5U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 5U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 5U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_18;
      
#line 104 
      tmp_18 = __fswab32(*((__be32 *)(& in) + 5U));
      
#line 104 
      tmp_19 = tmp_18 & 4278190080U;
    }
    
#line 104 
    if (0 != 0) 
#line 104 
                tmp_21 = ((((*((__be32 *)(& in) + 5U) << 24) | ((*((__be32 *)(& in) + 5U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 5U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 5U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_20;
      
#line 104 
      tmp_20 = __fswab32(*((__be32 *)(& in) + 5U));
      
#line 104 
      tmp_21 = tmp_20 & 4278190080U;
    }
    
#line 104 
    *((__be32 *)(& in) + 5U) = ((((tmp_15 | (ft->id & 16777215U)) << 24) | (((tmp_17 | (ft->id & 16777215U)) << 8) & 16711680U)) | (((tmp_19 | (ft->id & 16777215U)) >> 8) & 65280U)) | ((tmp_21 | (ft->id & 16777215U)) >> 24);
  }
  else {
    __u32 tmp_24;
    unsigned int tmp_23;
    
#line 104 
    if (0 != 0) 
#line 104 
                tmp_23 = ((((*((__be32 *)(& in) + 5U) << 24) | ((*((__be32 *)(& in) + 5U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 5U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 5U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_22;
      
#line 104 
      tmp_22 = __fswab32(*((__be32 *)(& in) + 5U));
      
#line 104 
      tmp_23 = tmp_22 & 4278190080U;
    }
    
#line 104 
    ;
    
#line 104 
    tmp_24 = __fswab32(tmp_23 | (ft->id & 16777215U));
    
#line 104 
    *((__be32 *)(& in) + 5U) = tmp_24;
  }
  {
    
#line 105 
    bool __cond_1 = (_Bool)0;
    
#line 105 
    if ((int)__cond_1 != 0) 
#line 105 
                            __compiletime_assert_105(); else ;
  }
  
#line 105 
  if (0 != 0) 
#line 105 
              *((__be32 *)(& in) + 8U) = (((flow_index << 24) | ((flow_index << 8) & 16711680U)) | ((flow_index >> 8) & 65280U)) | (flow_index >> 24); else 
                                                                    
#line 105 
                                                                    *((__be32 *)(& in) + 8U) = __fswab32(flow_index);
  {
    
#line 106 
    bool __cond_2 = (_Bool)0;
    
#line 106 
    if ((int)__cond_2 != 0) 
#line 106 
                            __compiletime_assert_106(); else ;
  }
  
#line 106 
  if (0 != 0) {
    unsigned int tmp_29;
    unsigned int tmp_31;
    
#line 106 
    if (0 != 0) 
#line 106 
                tmp_29 = ((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) << 24;
    else {
      __u32 tmp_28;
      
#line 106 
      tmp_28 = __fswab32(*((__be32 *)(& in)));
      
#line 106 
      tmp_29 = tmp_28 << 24;
    }
    
#line 106 
    if (0 != 0) 
#line 106 
                tmp_31 = (((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) << 8) & 16711680U;
    else {
      __u32 tmp_30;
      
#line 106 
      tmp_30 = __fswab32(*((__be32 *)(& in)));
      
#line 106 
      tmp_31 = (tmp_30 << 8) & 16711680U;
    }
    
#line 106 
    *((__be32 *)(& in)) = (tmp_29 | tmp_31) | 14345U;
  }
  else {
    __u32 tmp_34;
    unsigned int tmp_33;
    
#line 106 
    if (0 != 0) 
#line 106 
                tmp_33 = (((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) & 65535U) | 154664960U;
    else {
      __u32 tmp_32;
      
#line 106 
      tmp_32 = __fswab32(*((__be32 *)(& in)));
      
#line 106 
      tmp_33 = (tmp_32 & 65535U) | 154664960U;
    }
    
#line 106 
    tmp_34 = __fswab32(tmp_33);
    
#line 106 
    *((__be32 *)(& in)) = tmp_34;
  }
  
#line 108 
  mlx5_cmd_exec_check_status(ft->dev,(u32 *)(& in),64,(u32 *)(& out),16);
  
#line 109 
  return;
}


#line 121 
void __compiletime_assert_121(void);


#line 122 
void __compiletime_assert_122(void);


#line 123 
void __compiletime_assert_123(void);


#line 111  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/flow_table.c"
static void mlx5_destroy_flow_group_cmd(struct mlx5_flow_table *ft, int i)
{
  u32 in[16U];
  u32 out[4U];
  
#line 116 
  memset((void *)(& in),0,64UL);
  
#line 117 
  memset((void *)(& out),0,16UL);
  {
    
#line 120 
    bool __cond = (_Bool)0;
    
#line 120 
    if ((int)__cond != 0) 
#line 120 
                          __compiletime_assert_120(); else ;
  }
  
#line 120 
  if (0 != 0) {
    unsigned int tmp_2;
    unsigned int tmp_4;
    unsigned int tmp_6;
    unsigned int tmp_8;
    
#line 120 
    if (0 != 0) 
#line 120 
                tmp_2 = ((((*((__be32 *)(& in) + 4U) << 24) | ((*((__be32 *)(& in) + 4U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 4U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 4U) >> 24)) & 16777215U;
    else {
      __u32 tmp_1;
      
#line 120 
      tmp_1 = __fswab32(*((__be32 *)(& in) + 4U));
      
#line 120 
      tmp_2 = tmp_1 & 16777215U;
    }
    
#line 120 
    if (0 != 0) 
#line 120 
                tmp_4 = ((((*((__be32 *)(& in) + 4U) << 24) | ((*((__be32 *)(& in) + 4U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 4U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 4U) >> 24)) & 16777215U;
    else {
      __u32 tmp_3;
      
#line 120 
      tmp_3 = __fswab32(*((__be32 *)(& in) + 4U));
      
#line 120 
      tmp_4 = tmp_3 & 16777215U;
    }
    
#line 120 
    if (0 != 0) 
#line 120 
                tmp_6 = ((((*((__be32 *)(& in) + 4U) << 24) | ((*((__be32 *)(& in) + 4U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 4U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 4U) >> 24)) & 16777215U;
    else {
      __u32 tmp_5;
      
#line 120 
      tmp_5 = __fswab32(*((__be32 *)(& in) + 4U));
      
#line 120 
      tmp_6 = tmp_5 & 16777215U;
    }
    
#line 120 
    if (0 != 0) 
#line 120 
                tmp_8 = ((((*((__be32 *)(& in) + 4U) << 24) | ((*((__be32 *)(& in) + 4U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 4U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 4U) >> 24)) & 16777215U;
    else {
      __u32 tmp_7;
      
#line 120 
      tmp_7 = __fswab32(*((__be32 *)(& in) + 4U));
      
#line 120 
      tmp_8 = tmp_7 & 16777215U;
    }
    
#line 120 
    *((__be32 *)(& in) + 4U) = ((((tmp_2 | ((unsigned int)ft->type << 24UL)) << 24) | (((tmp_4 | ((unsigned int)ft->type << 24UL)) << 8) & 16711680U)) | (((tmp_6 | ((unsigned int)ft->type << 24UL)) >> 8) & 65280U)) | ((tmp_8 | ((unsigned int)ft->type << 24UL)) >> 24);
  }
  else {
    __u32 tmp_11;
    unsigned int tmp_10;
    
#line 120 
    if (0 != 0) 
#line 120 
                tmp_10 = ((((*((__be32 *)(& in) + 4U) << 24) | ((*((__be32 *)(& in) + 4U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 4U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 4U) >> 24)) & 16777215U;
    else {
      __u32 tmp_9;
      
#line 120 
      tmp_9 = __fswab32(*((__be32 *)(& in) + 4U));
      
#line 120 
      tmp_10 = tmp_9 & 16777215U;
    }
    
#line 120 
    ;
    
#line 120 
    tmp_11 = __fswab32(tmp_10 | ((unsigned int)ft->type << 24UL));
    
#line 120 
    *((__be32 *)(& in) + 4U) = tmp_11;
  }
  {
    
#line 121 
    bool __cond_0 = (_Bool)0;
    
#line 121 
    if ((int)__cond_0 != 0) 
#line 121 
                            __compiletime_assert_121(); else ;
  }
  
#line 121 
  if (0 != 0) {
    unsigned int tmp_15;
    unsigned int tmp_17;
    unsigned int tmp_19;
    unsigned int tmp_21;
    
#line 121 
    if (0 != 0) 
#line 121 
                tmp_15 = ((((*((__be32 *)(& in) + 5U) << 24) | ((*((__be32 *)(& in) + 5U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 5U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 5U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_14;
      
#line 121 
      tmp_14 = __fswab32(*((__be32 *)(& in) + 5U));
      
#line 121 
      tmp_15 = tmp_14 & 4278190080U;
    }
    
#line 121 
    if (0 != 0) 
#line 121 
                tmp_17 = ((((*((__be32 *)(& in) + 5U) << 24) | ((*((__be32 *)(& in) + 5U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 5U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 5U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_16;
      
#line 121 
      tmp_16 = __fswab32(*((__be32 *)(& in) + 5U));
      
#line 121 
      tmp_17 = tmp_16 & 4278190080U;
    }
    
#line 121 
    if (0 != 0) 
#line 121 
                tmp_19 = ((((*((__be32 *)(& in) + 5U) << 24) | ((*((__be32 *)(& in) + 5U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 5U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 5U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_18;
      
#line 121 
      tmp_18 = __fswab32(*((__be32 *)(& in) + 5U));
      
#line 121 
      tmp_19 = tmp_18 & 4278190080U;
    }
    
#line 121 
    if (0 != 0) 
#line 121 
                tmp_21 = ((((*((__be32 *)(& in) + 5U) << 24) | ((*((__be32 *)(& in) + 5U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 5U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 5U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_20;
      
#line 121 
      tmp_20 = __fswab32(*((__be32 *)(& in) + 5U));
      
#line 121 
      tmp_21 = tmp_20 & 4278190080U;
    }
    
#line 121 
    *((__be32 *)(& in) + 5U) = ((((tmp_15 | (ft->id & 16777215U)) << 24) | (((tmp_17 | (ft->id & 16777215U)) << 8) & 16711680U)) | (((tmp_19 | (ft->id & 16777215U)) >> 8) & 65280U)) | ((tmp_21 | (ft->id & 16777215U)) >> 24);
  }
  else {
    __u32 tmp_24;
    unsigned int tmp_23;
    
#line 121 
    if (0 != 0) 
#line 121 
                tmp_23 = ((((*((__be32 *)(& in) + 5U) << 24) | ((*((__be32 *)(& in) + 5U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 5U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 5U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_22;
      
#line 121 
      tmp_22 = __fswab32(*((__be32 *)(& in) + 5U));
      
#line 121 
      tmp_23 = tmp_22 & 4278190080U;
    }
    
#line 121 
    ;
    
#line 121 
    tmp_24 = __fswab32(tmp_23 | (ft->id & 16777215U));
    
#line 121 
    *((__be32 *)(& in) + 5U) = tmp_24;
  }
  {
    
#line 122 
    bool __cond_1 = (_Bool)0;
    
#line 122 
    if ((int)__cond_1 != 0) 
#line 122 
                            __compiletime_assert_122(); else ;
  }
  
#line 122 
  if (0 != 0) {
    unsigned int tmp_28;
    unsigned int tmp_30;
    
#line 122 
    if (0 != 0) 
#line 122 
                tmp_28 = ((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) << 24;
    else {
      __u32 tmp_27;
      
#line 122 
      tmp_27 = __fswab32(*((__be32 *)(& in)));
      
#line 122 
      tmp_28 = tmp_27 << 24;
    }
    
#line 122 
    if (0 != 0) 
#line 122 
                tmp_30 = (((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) << 8) & 16711680U;
    else {
      __u32 tmp_29;
      
#line 122 
      tmp_29 = __fswab32(*((__be32 *)(& in)));
      
#line 122 
      tmp_30 = (tmp_29 << 8) & 16711680U;
    }
    
#line 122 
    *((__be32 *)(& in)) = (tmp_28 | tmp_30) | 13321U;
  }
  else {
    __u32 tmp_33;
    unsigned int tmp_32;
    
#line 122 
    if (0 != 0) 
#line 122 
                tmp_32 = (((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) & 65535U) | 154402816U;
    else {
      __u32 tmp_31;
      
#line 122 
      tmp_31 = __fswab32(*((__be32 *)(& in)));
      
#line 122 
      tmp_32 = (tmp_31 & 65535U) | 154402816U;
    }
    
#line 122 
    tmp_33 = __fswab32(tmp_32);
    
#line 122 
    *((__be32 *)(& in)) = tmp_33;
  }
  {
    
#line 123 
    bool __cond_2 = (_Bool)0;
    
#line 123 
    if ((int)__cond_2 != 0) 
#line 123 
                            __compiletime_assert_123(); else ;
  }
  
#line 123 
  if (0 != 0) 
#line 123 
              *((__be32 *)(& in) + 6U) = ((((ft->group + i)->id << 24) | (((ft->group + i)->id << 8) & 16711680U)) | (((ft->group + i)->id >> 8) & 65280U)) | ((ft->group + i)->id >> 24); else 
                                                                    
#line 123 
                                                                    *((__be32 *)(& in) + 6U) = __fswab32((ft->group + i)->id);
  
#line 124 
  mlx5_cmd_exec_check_status(ft->dev,(u32 *)(& in),64,(u32 *)(& out),16);
  
#line 125 
  return;
}


#line 149 
void __compiletime_assert_149(void);


#line 150 
void __compiletime_assert_150(void);


#line 151 
void __compiletime_assert_151(void);


#line 152 
void __compiletime_assert_152(void);


#line 153 
void __compiletime_assert_153(void);


#line 154 
void __compiletime_assert_154(void);


#line 127  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/flow_table.c"
static int mlx5_create_flow_group_cmd(struct mlx5_flow_table *ft, int i)
{
  int __retres;
  u32 out[4U];
  u32 *in;
  void *in_match_criteria;
  int err;
  
#line 132 
  int inlen = 1024;
  
#line 133 
  struct mlx5_flow_table_group *g = & (ft->group + i)->g;
  
#line 134 
  u32 start_ix = (ft->group + i)->start_ix;
  
#line 135 
  u32 end_ix = ((unsigned int)(1 << (int)g->log_sz) + start_ix) + 4294967295U;
  
#line 138 
  in = (u32 *)mlx5_vzalloc((unsigned long)inlen);
  
#line 139 
  if (in == (u32 *)0U) {
    struct task_struct *tmp_0;
    
#line 140 
    tmp_0 = get_current();
    
#line 140 
    ;
    
#line 140 
    printk("\001",(char *)(& (ft->dev)->priv.name),"mlx5_create_flow_group_cmd",140,tmp_0->pid);
    
#line 141 
    __retres = -12;
    
#line 141 
    goto return_label;
  }
  else ;
  
#line 143 
  in_match_criteria = (void *)in + 64U;
  
#line 146 
  memset((void *)(& out),0,16UL);
  {
    
#line 149 
    bool __cond = (_Bool)0;
    
#line 149 
    if ((int)__cond != 0) 
#line 149 
                          __compiletime_assert_149(); else ;
  }
  
#line 149 
  if (0 != 0) {
    unsigned int tmp_4;
    unsigned int tmp_6;
    unsigned int tmp_8;
    unsigned int tmp_10;
    
#line 149 
    if (0 != 0) 
#line 149 
                tmp_4 = ((((*(in + 4U) << 24) | ((*(in + 4U) << 8) & 16711680U)) | ((*(in + 4U) >> 8) & 65280U)) | (*(in + 4U) >> 24)) & 16777215U;
    else {
      __u32 tmp_3;
      
#line 149 
      tmp_3 = __fswab32(*(in + 4U));
      
#line 149 
      tmp_4 = tmp_3 & 16777215U;
    }
    
#line 149 
    if (0 != 0) 
#line 149 
                tmp_6 = ((((*(in + 4U) << 24) | ((*(in + 4U) << 8) & 16711680U)) | ((*(in + 4U) >> 8) & 65280U)) | (*(in + 4U) >> 24)) & 16777215U;
    else {
      __u32 tmp_5;
      
#line 149 
      tmp_5 = __fswab32(*(in + 4U));
      
#line 149 
      tmp_6 = tmp_5 & 16777215U;
    }
    
#line 149 
    if (0 != 0) 
#line 149 
                tmp_8 = ((((*(in + 4U) << 24) | ((*(in + 4U) << 8) & 16711680U)) | ((*(in + 4U) >> 8) & 65280U)) | (*(in + 4U) >> 24)) & 16777215U;
    else {
      __u32 tmp_7;
      
#line 149 
      tmp_7 = __fswab32(*(in + 4U));
      
#line 149 
      tmp_8 = tmp_7 & 16777215U;
    }
    
#line 149 
    if (0 != 0) 
#line 149 
                tmp_10 = ((((*(in + 4U) << 24) | ((*(in + 4U) << 8) & 16711680U)) | ((*(in + 4U) >> 8) & 65280U)) | (*(in + 4U) >> 24)) & 16777215U;
    else {
      __u32 tmp_9;
      
#line 149 
      tmp_9 = __fswab32(*(in + 4U));
      
#line 149 
      tmp_10 = tmp_9 & 16777215U;
    }
    
#line 149 
    *(in + 4U) = ((((tmp_4 | ((unsigned int)ft->type << 24UL)) << 24) | (((tmp_6 | ((unsigned int)ft->type << 24UL)) << 8) & 16711680U)) | (((tmp_8 | ((unsigned int)ft->type << 24UL)) >> 8) & 65280U)) | ((tmp_10 | ((unsigned int)ft->type << 24UL)) >> 24);
  }
  else {
    __u32 tmp_13;
    unsigned int tmp_12;
    
#line 149 
    if (0 != 0) 
#line 149 
                tmp_12 = ((((*(in + 4U) << 24) | ((*(in + 4U) << 8) & 16711680U)) | ((*(in + 4U) >> 8) & 65280U)) | (*(in + 4U) >> 24)) & 16777215U;
    else {
      __u32 tmp_11;
      
#line 149 
      tmp_11 = __fswab32(*(in + 4U));
      
#line 149 
      tmp_12 = tmp_11 & 16777215U;
    }
    
#line 149 
    ;
    
#line 149 
    tmp_13 = __fswab32(tmp_12 | ((unsigned int)ft->type << 24UL));
    
#line 149 
    *(in + 4U) = tmp_13;
  }
  {
    
#line 150 
    bool __cond_0 = (_Bool)0;
    
#line 150 
    if ((int)__cond_0 != 0) 
#line 150 
                            __compiletime_assert_150(); else ;
  }
  
#line 150 
  if (0 != 0) {
    unsigned int tmp_17;
    unsigned int tmp_19;
    unsigned int tmp_21;
    unsigned int tmp_23;
    
#line 150 
    if (0 != 0) 
#line 150 
                tmp_17 = ((((*(in + 5U) << 24) | ((*(in + 5U) << 8) & 16711680U)) | ((*(in + 5U) >> 8) & 65280U)) | (*(in + 5U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_16;
      
#line 150 
      tmp_16 = __fswab32(*(in + 5U));
      
#line 150 
      tmp_17 = tmp_16 & 4278190080U;
    }
    
#line 150 
    if (0 != 0) 
#line 150 
                tmp_19 = ((((*(in + 5U) << 24) | ((*(in + 5U) << 8) & 16711680U)) | ((*(in + 5U) >> 8) & 65280U)) | (*(in + 5U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_18;
      
#line 150 
      tmp_18 = __fswab32(*(in + 5U));
      
#line 150 
      tmp_19 = tmp_18 & 4278190080U;
    }
    
#line 150 
    if (0 != 0) 
#line 150 
                tmp_21 = ((((*(in + 5U) << 24) | ((*(in + 5U) << 8) & 16711680U)) | ((*(in + 5U) >> 8) & 65280U)) | (*(in + 5U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_20;
      
#line 150 
      tmp_20 = __fswab32(*(in + 5U));
      
#line 150 
      tmp_21 = tmp_20 & 4278190080U;
    }
    
#line 150 
    if (0 != 0) 
#line 150 
                tmp_23 = ((((*(in + 5U) << 24) | ((*(in + 5U) << 8) & 16711680U)) | ((*(in + 5U) >> 8) & 65280U)) | (*(in + 5U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_22;
      
#line 150 
      tmp_22 = __fswab32(*(in + 5U));
      
#line 150 
      tmp_23 = tmp_22 & 4278190080U;
    }
    
#line 150 
    *(in + 5U) = ((((tmp_17 | (ft->id & 16777215U)) << 24) | (((tmp_19 | (ft->id & 16777215U)) << 8) & 16711680U)) | (((tmp_21 | (ft->id & 16777215U)) >> 8) & 65280U)) | ((tmp_23 | (ft->id & 16777215U)) >> 24);
  }
  else {
    __u32 tmp_26;
    unsigned int tmp_25;
    
#line 150 
    if (0 != 0) 
#line 150 
                tmp_25 = ((((*(in + 5U) << 24) | ((*(in + 5U) << 8) & 16711680U)) | ((*(in + 5U) >> 8) & 65280U)) | (*(in + 5U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_24;
      
#line 150 
      tmp_24 = __fswab32(*(in + 5U));
      
#line 150 
      tmp_25 = tmp_24 & 4278190080U;
    }
    
#line 150 
    ;
    
#line 150 
    tmp_26 = __fswab32(tmp_25 | (ft->id & 16777215U));
    
#line 150 
    *(in + 5U) = tmp_26;
  }
  {
    
#line 151 
    bool __cond_1 = (_Bool)0;
    
#line 151 
    if ((int)__cond_1 != 0) 
#line 151 
                            __compiletime_assert_151(); else ;
  }
  
#line 151 
  if (0 != 0) {
    unsigned int tmp_30;
    unsigned int tmp_32;
    
#line 151 
    if (0 != 0) 
#line 151 
                tmp_30 = ((((*in << 24) | ((*in << 8) & 16711680U)) | ((*in >> 8) & 65280U)) | (*in >> 24)) << 24;
    else {
      __u32 tmp_29;
      
#line 151 
      tmp_29 = __fswab32(*in);
      
#line 151 
      tmp_30 = tmp_29 << 24;
    }
    
#line 151 
    if (0 != 0) 
#line 151 
                tmp_32 = (((((*in << 24) | ((*in << 8) & 16711680U)) | ((*in >> 8) & 65280U)) | (*in >> 24)) << 8) & 16711680U;
    else {
      __u32 tmp_31;
      
#line 151 
      tmp_31 = __fswab32(*in);
      
#line 151 
      tmp_32 = (tmp_31 << 8) & 16711680U;
    }
    
#line 151 
    *in = (tmp_30 | tmp_32) | 13065U;
  }
  else {
    __u32 tmp_35;
    unsigned int tmp_34;
    
#line 151 
    if (0 != 0) 
#line 151 
                tmp_34 = (((((*in << 24) | ((*in << 8) & 16711680U)) | ((*in >> 8) & 65280U)) | (*in >> 24)) & 65535U) | 154337280U;
    else {
      __u32 tmp_33;
      
#line 151 
      tmp_33 = __fswab32(*in);
      
#line 151 
      tmp_34 = (tmp_33 & 65535U) | 154337280U;
    }
    
#line 151 
    tmp_35 = __fswab32(tmp_34);
    
#line 151 
    *in = tmp_35;
  }
  {
    
#line 152 
    bool __cond_2 = (_Bool)0;
    
#line 152 
    if ((int)__cond_2 != 0) 
#line 152 
                            __compiletime_assert_152(); else ;
  }
  
#line 152 
  if (0 != 0) 
#line 152 
              *(in + 7U) = (((start_ix << 24) | ((start_ix << 8) & 16711680U)) | ((start_ix >> 8) & 65280U)) | (start_ix >> 24); else 
                                                                    
#line 152 
                                                                    *(in + 7U) = __fswab32(start_ix);
  {
    
#line 153 
    bool __cond_3 = (_Bool)0;
    
#line 153 
    if ((int)__cond_3 != 0) 
#line 153 
                            __compiletime_assert_153(); else ;
  }
  
#line 153 
  if (0 != 0) 
#line 153 
              *(in + 9U) = (((end_ix << 24) | ((end_ix << 8) & 16711680U)) | ((end_ix >> 8) & 65280U)) | (end_ix >> 24); else 
                                                                    
#line 153 
                                                                    *(in + 9U) = __fswab32(end_ix);
  {
    
#line 154 
    bool __cond_4 = (_Bool)0;
    
#line 154 
    if ((int)__cond_4 != 0) 
#line 154 
                            __compiletime_assert_154(); else ;
  }
  
#line 154 
  if (0 != 0) {
    unsigned int tmp_41;
    unsigned int tmp_43;
    unsigned int tmp_45;
    unsigned int tmp_47;
    
#line 154 
    if (0 != 0) 
#line 154 
                tmp_41 = ((((*(in + 15U) << 24) | ((*(in + 15U) << 8) & 16711680U)) | ((*(in + 15U) >> 8) & 65280U)) | (*(in + 15U) >> 24)) & 4294967040U;
    else {
      __u32 tmp_40;
      
#line 154 
      tmp_40 = __fswab32(*(in + 15U));
      
#line 154 
      tmp_41 = tmp_40 & 4294967040U;
    }
    
#line 154 
    if (0 != 0) 
#line 154 
                tmp_43 = ((((*(in + 15U) << 24) | ((*(in + 15U) << 8) & 16711680U)) | ((*(in + 15U) >> 8) & 65280U)) | (*(in + 15U) >> 24)) & 4294967040U;
    else {
      __u32 tmp_42;
      
#line 154 
      tmp_42 = __fswab32(*(in + 15U));
      
#line 154 
      tmp_43 = tmp_42 & 4294967040U;
    }
    
#line 154 
    if (0 != 0) 
#line 154 
                tmp_45 = ((((*(in + 15U) << 24) | ((*(in + 15U) << 8) & 16711680U)) | ((*(in + 15U) >> 8) & 65280U)) | (*(in + 15U) >> 24)) & 4294967040U;
    else {
      __u32 tmp_44;
      
#line 154 
      tmp_44 = __fswab32(*(in + 15U));
      
#line 154 
      tmp_45 = tmp_44 & 4294967040U;
    }
    
#line 154 
    if (0 != 0) 
#line 154 
                tmp_47 = ((((*(in + 15U) << 24) | ((*(in + 15U) << 8) & 16711680U)) | ((*(in + 15U) >> 8) & 65280U)) | (*(in + 15U) >> 24)) & 4294967040U;
    else {
      __u32 tmp_46;
      
#line 154 
      tmp_46 = __fswab32(*(in + 15U));
      
#line 154 
      tmp_47 = tmp_46 & 4294967040U;
    }
    
#line 154 
    *(in + 15U) = ((((tmp_41 | (unsigned int)g->match_criteria_enable) << 24) | (((tmp_43 | (unsigned int)g->match_criteria_enable) << 8) & 16711680U)) | (((tmp_45 | (unsigned int)g->match_criteria_enable) >> 8) & 65280U)) | ((tmp_47 | (unsigned int)g->match_criteria_enable) >> 24);
  }
  else {
    __u32 tmp_50;
    unsigned int tmp_49;
    
#line 154 
    if (0 != 0) 
#line 154 
                tmp_49 = ((((*(in + 15U) << 24) | ((*(in + 15U) << 8) & 16711680U)) | ((*(in + 15U) >> 8) & 65280U)) | (*(in + 15U) >> 24)) & 4294967040U;
    else {
      __u32 tmp_48;
      
#line 154 
      tmp_48 = __fswab32(*(in + 15U));
      
#line 154 
      tmp_49 = tmp_48 & 4294967040U;
    }
    
#line 154 
    ;
    
#line 154 
    tmp_50 = __fswab32(tmp_49 | (unsigned int)g->match_criteria_enable);
    
#line 154 
    *(in + 15U) = tmp_50;
  }
  
#line 156 
  memcpy(in_match_criteria,(void const *)(& g->match_criteria),512UL);
  
#line 159 
  err = mlx5_cmd_exec_check_status(ft->dev,in,inlen,(u32 *)(& out),16);
  
#line 161 
  if (err == 0) 
    
#line 162 
    if (0 != 0) 
#line 162 
                (ft->group + i)->id = ((((*((__be32 *)(& out) + 2U) << 24) | ((*((__be32 *)(& out) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& out) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& out) + 2U) >> 24)) & 16777215U;
    else {
      __u32 tmp_51;
      
#line 162 
      tmp_51 = __fswab32(*((__be32 *)(& out) + 2U));
      
#line 162 
      (ft->group + i)->id = tmp_51 & 16777215U;
    }
  else ;
  
#line 165 
  kvfree((void const *)in);
  
#line 167 
  __retres = err;
  return_label: 
#line 167 
                return __retres;
}


#line 170  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/flow_table.c"
static void mlx5_destroy_flow_table_groups(struct mlx5_flow_table *ft)
{
  int i;
  
#line 174 
  i = 0;
  
#line 174 
  goto ldv_35035;
  ldv_35034: 
#line 175 
  ;
  
#line 175 
  mlx5_destroy_flow_group_cmd(ft,i);
  
#line 174 
  i += 1;
  ldv_35035: 
#line 175 
  ;
  
#line 174 
  if ((int)ft->num_groups > i) 
#line 176 
                               goto ldv_35034; else 
#line 179 
                                                    goto ldv_35036;
  ldv_35036: 
#line 180 
  ;
  
#line 181 
  return;
}


#line 178  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/flow_table.c"
static int mlx5_create_flow_table_groups(struct mlx5_flow_table *ft)
{
  int __retres;
  int err;
  int i;
  
#line 183 
  i = 0;
  
#line 183 
  goto ldv_35044;
  ldv_35043: 
#line 184 
  ;
  
#line 184 
  err = mlx5_create_flow_group_cmd(ft,i);
  
#line 185 
  if (err != 0) 
#line 186 
                goto err_destroy_flow_table_groups; else ;
  
#line 183 
  i += 1;
  ldv_35044: 
#line 184 
  ;
  
#line 183 
  if ((int)ft->num_groups > i) 
#line 185 
                               goto ldv_35043; else 
#line 188 
                                                    goto ldv_35045;
  ldv_35045: 
#line 189 
  ;
  
#line 189 
  __retres = 0;
  
#line 189 
  goto return_label;
  err_destroy_flow_table_groups: 
#line 191 
  ;
  
#line 192 
  i -= 1;
  
#line 192 
  goto ldv_35047;
  ldv_35046: 
#line 193 
  ;
  
#line 193 
  mlx5_destroy_flow_group_cmd(ft,i);
  
#line 192 
  i -= 1;
  ldv_35047: 
#line 193 
  ;
  
#line 192 
  if (i >= 0) 
#line 194 
              goto ldv_35046; else 
#line 197 
                                   goto ldv_35048;
  ldv_35048: 
#line 198 
  ;
  
#line 195 
  __retres = err;
  return_label: 
#line 195 
                return __retres;
}


#line 206 
void __compiletime_assert_206(void);


#line 207 
void __compiletime_assert_207(void);


#line 208 
void __compiletime_assert_208(void);


#line 210 
void __compiletime_assert_211(void);


#line 198  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/flow_table.c"
static int mlx5_create_flow_table_cmd(struct mlx5_flow_table *ft)
{
  int __retres;
  u32 in[16U];
  u32 out[4U];
  int err;
  __u32 tmp_99;
  unsigned int tmp_26;
  int tmp_98;
  unsigned long tmp_97;
  
#line 204 
  memset((void *)(& in),0,64UL);
  {
    
#line 206 
    bool __cond = (_Bool)0;
    
#line 206 
    if ((int)__cond != 0) 
#line 206 
                          __compiletime_assert_206(); else ;
  }
  
#line 206 
  if (0 != 0) {
    unsigned int tmp_2;
    unsigned int tmp_4;
    unsigned int tmp_6;
    unsigned int tmp_8;
    
#line 206 
    if (0 != 0) 
#line 206 
                tmp_2 = ((((*((__be32 *)(& in) + 4U) << 24) | ((*((__be32 *)(& in) + 4U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 4U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 4U) >> 24)) & 16777215U;
    else {
      __u32 tmp_1;
      
#line 206 
      tmp_1 = __fswab32(*((__be32 *)(& in) + 4U));
      
#line 206 
      tmp_2 = tmp_1 & 16777215U;
    }
    
#line 206 
    if (0 != 0) 
#line 206 
                tmp_4 = ((((*((__be32 *)(& in) + 4U) << 24) | ((*((__be32 *)(& in) + 4U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 4U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 4U) >> 24)) & 16777215U;
    else {
      __u32 tmp_3;
      
#line 206 
      tmp_3 = __fswab32(*((__be32 *)(& in) + 4U));
      
#line 206 
      tmp_4 = tmp_3 & 16777215U;
    }
    
#line 206 
    if (0 != 0) 
#line 206 
                tmp_6 = ((((*((__be32 *)(& in) + 4U) << 24) | ((*((__be32 *)(& in) + 4U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 4U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 4U) >> 24)) & 16777215U;
    else {
      __u32 tmp_5;
      
#line 206 
      tmp_5 = __fswab32(*((__be32 *)(& in) + 4U));
      
#line 206 
      tmp_6 = tmp_5 & 16777215U;
    }
    
#line 206 
    if (0 != 0) 
#line 206 
                tmp_8 = ((((*((__be32 *)(& in) + 4U) << 24) | ((*((__be32 *)(& in) + 4U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 4U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 4U) >> 24)) & 16777215U;
    else {
      __u32 tmp_7;
      
#line 206 
      tmp_7 = __fswab32(*((__be32 *)(& in) + 4U));
      
#line 206 
      tmp_8 = tmp_7 & 16777215U;
    }
    
#line 206 
    *((__be32 *)(& in) + 4U) = ((((tmp_2 | ((unsigned int)ft->type << 24UL)) << 24) | (((tmp_4 | ((unsigned int)ft->type << 24UL)) << 8) & 16711680U)) | (((tmp_6 | ((unsigned int)ft->type << 24UL)) >> 8) & 65280U)) | ((tmp_8 | ((unsigned int)ft->type << 24UL)) >> 24);
  }
  else {
    __u32 tmp_11;
    unsigned int tmp_10;
    
#line 206 
    if (0 != 0) 
#line 206 
                tmp_10 = ((((*((__be32 *)(& in) + 4U) << 24) | ((*((__be32 *)(& in) + 4U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 4U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 4U) >> 24)) & 16777215U;
    else {
      __u32 tmp_9;
      
#line 206 
      tmp_9 = __fswab32(*((__be32 *)(& in) + 4U));
      
#line 206 
      tmp_10 = tmp_9 & 16777215U;
    }
    
#line 206 
    ;
    
#line 206 
    tmp_11 = __fswab32(tmp_10 | ((unsigned int)ft->type << 24UL));
    
#line 206 
    *((__be32 *)(& in) + 4U) = tmp_11;
  }
  {
    
#line 207 
    bool __cond_0 = (_Bool)0;
    
#line 207 
    if ((int)__cond_0 != 0) 
#line 207 
                            __compiletime_assert_207(); else ;
  }
  
#line 207 
  if (0 != 0) {
    unsigned int tmp_15;
    unsigned int tmp_17;
    unsigned int tmp_19;
    unsigned int tmp_21;
    
#line 207 
    if (0 != 0) 
#line 207 
                tmp_15 = ((((*((__be32 *)(& in) + 6U) << 24) | ((*((__be32 *)(& in) + 6U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 6U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 6U) >> 24)) & 4278255615U;
    else {
      __u32 tmp_14;
      
#line 207 
      tmp_14 = __fswab32(*((__be32 *)(& in) + 6U));
      
#line 207 
      tmp_15 = tmp_14 & 4278255615U;
    }
    
#line 207 
    if (0 != 0) 
#line 207 
                tmp_17 = ((((*((__be32 *)(& in) + 6U) << 24) | ((*((__be32 *)(& in) + 6U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 6U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 6U) >> 24)) & 4278255615U;
    else {
      __u32 tmp_16;
      
#line 207 
      tmp_16 = __fswab32(*((__be32 *)(& in) + 6U));
      
#line 207 
      tmp_17 = tmp_16 & 4278255615U;
    }
    
#line 207 
    if (0 != 0) 
#line 207 
                tmp_19 = ((((*((__be32 *)(& in) + 6U) << 24) | ((*((__be32 *)(& in) + 6U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 6U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 6U) >> 24)) & 4278255615U;
    else {
      __u32 tmp_18;
      
#line 207 
      tmp_18 = __fswab32(*((__be32 *)(& in) + 6U));
      
#line 207 
      tmp_19 = tmp_18 & 4278255615U;
    }
    
#line 207 
    if (0 != 0) 
#line 207 
                tmp_21 = ((((*((__be32 *)(& in) + 6U) << 24) | ((*((__be32 *)(& in) + 6U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 6U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 6U) >> 24)) & 4278255615U;
    else {
      __u32 tmp_20;
      
#line 207 
      tmp_20 = __fswab32(*((__be32 *)(& in) + 6U));
      
#line 207 
      tmp_21 = tmp_20 & 4278255615U;
    }
    
#line 207 
    *((__be32 *)(& in) + 6U) = ((((tmp_15 | ((unsigned int)ft->level << 16UL)) << 24) | (((tmp_17 | ((unsigned int)ft->level << 16UL)) << 8) & 16711680U)) | (((tmp_19 | ((unsigned int)ft->level << 16UL)) >> 8) & 65280U)) | ((tmp_21 | ((unsigned int)ft->level << 16UL)) >> 24);
  }
  else {
    __u32 tmp_24;
    unsigned int tmp_23;
    
#line 207 
    if (0 != 0) 
#line 207 
                tmp_23 = ((((*((__be32 *)(& in) + 6U) << 24) | ((*((__be32 *)(& in) + 6U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 6U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 6U) >> 24)) & 4278255615U;
    else {
      __u32 tmp_22;
      
#line 207 
      tmp_22 = __fswab32(*((__be32 *)(& in) + 6U));
      
#line 207 
      tmp_23 = tmp_22 & 4278255615U;
    }
    
#line 207 
    ;
    
#line 207 
    tmp_24 = __fswab32(tmp_23 | ((unsigned int)ft->level << 16UL));
    
#line 207 
    *((__be32 *)(& in) + 6U) = tmp_24;
  }
  {
    
#line 208 
    bool __cond_1 = (_Bool)0;
    
#line 208 
    if ((int)__cond_1 != 0) 
#line 208 
                            __compiletime_assert_208(); else ;
  }
  
#line 208 
  if (0 != 0) 
#line 208 
              tmp_26 = ((((*((__be32 *)(& in) + 6U) << 24) | ((*((__be32 *)(& in) + 6U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 6U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 6U) >> 24)) & 4294967040U;
  else {
    __u32 tmp_25;
    
#line 208 
    tmp_25 = __fswab32(*((__be32 *)(& in) + 6U));
    
#line 208 
    tmp_26 = tmp_25 & 4294967040U;
  }
  
#line 208 
  if (0 != 0) {
    unsigned long tmp_95;
    
#line 208 
    if (ft->size != 1U) {
      unsigned long tmp_94;
      
#line 208 
      if (0 != 0) {
        unsigned long tmp_92;
        
#line 208 
        if (ft->size == 1U) {
          int tmp_27;
          
#line 208 
          tmp_27 = ____ilog2_NaN();
          
#line 208 
          tmp_92 = 1UL << (tmp_27 + 1);
        }
        else {
          unsigned long tmp_91;
          
#line 208 
          if (((unsigned long long)(ft->size + 4294967295U) & 4611686018427387904ULL) == 0ULL) {
            unsigned long tmp_90;
            
#line 208 
            if (((unsigned long long)(ft->size + 4294967295U) & 2305843009213693952ULL) == 0ULL) {
              unsigned long tmp_89;
              
#line 208 
              if (((unsigned long long)(ft->size + 4294967295U) & 1152921504606846976ULL) == 0ULL) {
                unsigned long tmp_88;
                
#line 208 
                if (((unsigned long long)(ft->size + 4294967295U) & 576460752303423488ULL) == 0ULL) {
                  unsigned long tmp_87;
                  
#line 208 
                  if (((unsigned long long)(ft->size + 4294967295U) & 288230376151711744ULL) == 0ULL) {
                    unsigned long tmp_86;
                    
#line 208 
                    if (((unsigned long long)(ft->size + 4294967295U) & 144115188075855872ULL) == 0ULL) {
                      unsigned long tmp_85;
                      
#line 208 
                      if (((unsigned long long)(ft->size + 4294967295U) & 72057594037927936ULL) == 0ULL) {
                        unsigned long tmp_84;
                        
#line 208 
                        if (((unsigned long long)(ft->size + 4294967295U) & 36028797018963968ULL) == 0ULL) {
                          unsigned long tmp_83;
                          
#line 208 
                          if (((unsigned long long)(ft->size + 4294967295U) & 18014398509481984ULL) == 0ULL) {
                            unsigned long tmp_82;
                            
#line 208 
                            if (((unsigned long long)(ft->size + 4294967295U) & 9007199254740992ULL) == 0ULL) {
                              unsigned long tmp_81;
                              
#line 208 
                              if (((unsigned long long)(ft->size + 4294967295U) & 4503599627370496ULL) == 0ULL) {
                                unsigned long tmp_80;
                                
#line 208 
                                if (((unsigned long long)(ft->size + 4294967295U) & 2251799813685248ULL) == 0ULL) {
                                  unsigned long tmp_79;
                                  
#line 208 
                                  if (((unsigned long long)(ft->size + 4294967295U) & 1125899906842624ULL) == 0ULL) {
                                    unsigned long tmp_78;
                                    
#line 208 
                                    if (((unsigned long long)(ft->size + 4294967295U) & 562949953421312ULL) == 0ULL) {
                                      unsigned long tmp_77;
                                      
#line 208 
                                      if (((unsigned long long)(ft->size + 4294967295U) & 281474976710656ULL) == 0ULL) {
                                        unsigned long tmp_76;
                                        
#line 208 
                                        if (((unsigned long long)(ft->size + 4294967295U) & 140737488355328ULL) == 0ULL) {
                                          unsigned long tmp_75;
                                          
#line 208 
                                          if (((unsigned long long)(ft->size + 4294967295U) & 70368744177664ULL) == 0ULL) {
                                            unsigned long tmp_74;
                                            
#line 208 
                                            if (((unsigned long long)(ft->size + 4294967295U) & 35184372088832ULL) == 0ULL) {
                                              unsigned long tmp_73;
                                              
#line 208 
                                              if (((unsigned long long)(ft->size + 4294967295U) & 17592186044416ULL) == 0ULL) {
                                                unsigned long tmp_72;
                                                
#line 208 
                                                if (((unsigned long long)(ft->size + 4294967295U) & 8796093022208ULL) == 0ULL) {
                                                  unsigned long tmp_71;
                                                  
#line 208 
                                                  if (((unsigned long long)(ft->size + 4294967295U) & 4398046511104ULL) == 0ULL) {
                                                    unsigned long tmp_70;
                                                    
#line 208 
                                                    if (((unsigned long long)(ft->size + 4294967295U) & 2199023255552ULL) == 0ULL) {
                                                      unsigned long tmp_69;
                                                      
#line 208 
                                                      if (((unsigned long long)(ft->size + 4294967295U) & 1099511627776ULL) == 0ULL) {
                                                        unsigned long tmp_68;
                                                        
#line 208 
                                                        if (((unsigned long long)(ft->size + 4294967295U) & 549755813888ULL) == 0ULL) {
                                                          unsigned long tmp_67;
                                                          
#line 208 
                                                          if (((unsigned long long)(ft->size + 4294967295U) & 274877906944ULL) == 0ULL) {
                                                            unsigned long tmp_66;
                                                            
#line 208 
                                                            if (((unsigned long long)(ft->size + 4294967295U) & 137438953472ULL) == 0ULL) {
                                                              unsigned long tmp_65;
                                                              
#line 208 
                                                              if (((unsigned long long)(ft->size + 4294967295U) & 68719476736ULL) == 0ULL) {
                                                                unsigned long tmp_64;
                                                                
#line 208 
                                                                if (((unsigned long long)(ft->size + 4294967295U) & 34359738368ULL) == 0ULL) {
                                                                  unsigned long tmp_63;
                                                                  
#line 208 
                                                                  if (
                                                                    ((unsigned long long)(ft->size + 4294967295U) & 17179869184ULL) == 0ULL) {
                                                                    unsigned long tmp_62;
                                                                    
#line 208 
                                                                    if (
                                                                    ((unsigned long long)(ft->size + 4294967295U) & 8589934592ULL) == 0ULL) {
                                                                    unsigned long tmp_61;
                                                                    
#line 208 
                                                                    if (
                                                                    ((unsigned long long)(ft->size + 4294967295U) & 4294967296ULL) == 0ULL) {
                                                                    unsigned long tmp_60;
                                                                    
#line 208 
                                                                    if (
                                                                    ft->size + 4294967295U >= (u32)0) {
                                                                    unsigned long tmp_59;
                                                                    
#line 208 
                                                                    if (
                                                                    ((unsigned long long)(ft->size + 4294967295U) & 1073741824ULL) == 0ULL) {
                                                                    unsigned long tmp_58;
                                                                    
#line 208 
                                                                    if (
                                                                    ((unsigned long long)(ft->size + 4294967295U) & 536870912ULL) == 0ULL) {
                                                                    unsigned long tmp_57;
                                                                    
#line 208 
                                                                    if (
                                                                    ((unsigned long long)(ft->size + 4294967295U) & 268435456ULL) == 0ULL) {
                                                                    unsigned long tmp_56;
                                                                    
#line 208 
                                                                    if (
                                                                    ((unsigned long long)(ft->size + 4294967295U) & 134217728ULL) == 0ULL) {
                                                                    unsigned long tmp_55;
                                                                    
#line 208 
                                                                    if (
                                                                    ((unsigned long long)(ft->size + 4294967295U) & 67108864ULL) == 0ULL) {
                                                                    unsigned long tmp_54;
                                                                    
#line 208 
                                                                    if (
                                                                    ((unsigned long long)(ft->size + 4294967295U) & 33554432ULL) == 0ULL) {
                                                                    unsigned long tmp_53;
                                                                    
#line 208 
                                                                    if (
                                                                    ((unsigned long long)(ft->size + 4294967295U) & 16777216ULL) == 0ULL) {
                                                                    unsigned long tmp_52;
                                                                    
#line 208 
                                                                    if (
                                                                    ((unsigned long long)(ft->size + 4294967295U) & 8388608ULL) == 0ULL) {
                                                                    unsigned long tmp_51;
                                                                    
#line 208 
                                                                    if (
                                                                    ((unsigned long long)(ft->size + 4294967295U) & 4194304ULL) == 0ULL) {
                                                                    unsigned long tmp_50;
                                                                    
#line 208 
                                                                    if (
                                                                    ((unsigned long long)(ft->size + 4294967295U) & 2097152ULL) == 0ULL) {
                                                                    unsigned long tmp_49;
                                                                    
#line 208 
                                                                    if (
                                                                    ((unsigned long long)(ft->size + 4294967295U) & 1048576ULL) == 0ULL) {
                                                                    unsigned long tmp_48;
                                                                    
#line 208 
                                                                    if (
                                                                    ((unsigned long long)(ft->size + 4294967295U) & 524288ULL) == 0ULL) {
                                                                    unsigned long tmp_47;
                                                                    
#line 208 
                                                                    if (
                                                                    ((unsigned long long)(ft->size + 4294967295U) & 262144ULL) == 0ULL) {
                                                                    unsigned long tmp_46;
                                                                    
#line 208 
                                                                    if (
                                                                    ((unsigned long long)(ft->size + 4294967295U) & 131072ULL) == 0ULL) {
                                                                    unsigned long tmp_45;
                                                                    
#line 208 
                                                                    if (
                                                                    ((unsigned long long)(ft->size + 4294967295U) & 65536ULL) == 0ULL) {
                                                                    unsigned long tmp_44;
                                                                    
#line 208 
                                                                    if (
                                                                    ((unsigned long long)(ft->size + 4294967295U) & 32768ULL) == 0ULL) {
                                                                    unsigned long tmp_43;
                                                                    
#line 208 
                                                                    if (
                                                                    ((unsigned long long)(ft->size + 4294967295U) & 16384ULL) == 0ULL) {
                                                                    unsigned long tmp_42;
                                                                    
#line 208 
                                                                    if (
                                                                    ((unsigned long long)(ft->size + 4294967295U) & 8192ULL) == 0ULL) {
                                                                    unsigned long tmp_41;
                                                                    
#line 208 
                                                                    if (
                                                                    ((unsigned long long)(ft->size + 4294967295U) & 4096ULL) == 0ULL) {
                                                                    unsigned long tmp_40;
                                                                    
#line 208 
                                                                    if (
                                                                    ((unsigned long long)(ft->size + 4294967295U) & 2048ULL) == 0ULL) {
                                                                    unsigned long tmp_39;
                                                                    
#line 208 
                                                                    if (
                                                                    ((unsigned long long)(ft->size + 4294967295U) & 1024ULL) == 0ULL) {
                                                                    unsigned long tmp_38;
                                                                    
#line 208 
                                                                    if (
                                                                    ((unsigned long long)(ft->size + 4294967295U) & 512ULL) == 0ULL) {
                                                                    unsigned long tmp_37;
                                                                    
#line 208 
                                                                    if (
                                                                    ((unsigned long long)(ft->size + 4294967295U) & 256ULL) == 0ULL) {
                                                                    unsigned long tmp_36;
                                                                    
#line 208 
                                                                    if (
                                                                    ((unsigned long long)(ft->size + 4294967295U) & 128ULL) == 0ULL) {
                                                                    unsigned long tmp_35;
                                                                    
#line 208 
                                                                    if (
                                                                    ((unsigned long long)(ft->size + 4294967295U) & 64ULL) == 0ULL) {
                                                                    unsigned long tmp_34;
                                                                    
#line 208 
                                                                    if (
                                                                    ((unsigned long long)(ft->size + 4294967295U) & 32ULL) == 0ULL) {
                                                                    unsigned long tmp_33;
                                                                    
#line 208 
                                                                    if (
                                                                    ((unsigned long long)(ft->size + 4294967295U) & 16ULL) == 0ULL) {
                                                                    unsigned long tmp_32;
                                                                    
#line 208 
                                                                    if (
                                                                    ((unsigned long long)(ft->size + 4294967295U) & 8ULL) == 0ULL) {
                                                                    unsigned long tmp_31;
                                                                    
#line 208 
                                                                    if (
                                                                    ((unsigned long long)(ft->size + 4294967295U) & 4ULL) == 0ULL) {
                                                                    unsigned long tmp_30;
                                                                    
#line 208 
                                                                    if (
                                                                    ((unsigned long long)(ft->size + 4294967295U) & 2ULL) == 0ULL) {
                                                                    unsigned long tmp_29;
                                                                    
#line 208 
                                                                    if (
                                                                    ((unsigned long long)(ft->size + 4294967295U) & 1ULL) == 0ULL) {
                                                                    int tmp_28;
                                                                    
#line 208 
                                                                    tmp_28 = ____ilog2_NaN();
                                                                    
#line 208 
                                                                    tmp_29 = 1UL << (tmp_28 + 1);
                                                                    }
                                                                    else 
                                                                    
#line 208 
                                                                    tmp_29 = 2UL;
                                                                    
#line 208 
                                                                    tmp_30 = tmp_29;
                                                                    }
                                                                    else 
                                                                    
#line 208 
                                                                    tmp_30 = 4UL;
                                                                    
#line 208 
                                                                    tmp_31 = tmp_30;
                                                                    }
                                                                    else 
                                                                    
#line 208 
                                                                    tmp_31 = 8UL;
                                                                    
#line 208 
                                                                    tmp_32 = tmp_31;
                                                                    }
                                                                    else 
                                                                    
#line 208 
                                                                    tmp_32 = 16UL;
                                                                    
#line 208 
                                                                    tmp_33 = tmp_32;
                                                                    }
                                                                    else 
                                                                    
#line 208 
                                                                    tmp_33 = 32UL;
                                                                    
#line 208 
                                                                    tmp_34 = tmp_33;
                                                                    }
                                                                    else 
                                                                    
#line 208 
                                                                    tmp_34 = 64UL;
                                                                    
#line 208 
                                                                    tmp_35 = tmp_34;
                                                                    }
                                                                    else 
                                                                    
#line 208 
                                                                    tmp_35 = 128UL;
                                                                    
#line 208 
                                                                    tmp_36 = tmp_35;
                                                                    }
                                                                    else 
                                                                    
#line 208 
                                                                    tmp_36 = 256UL;
                                                                    
#line 208 
                                                                    tmp_37 = tmp_36;
                                                                    }
                                                                    else 
                                                                    
#line 208 
                                                                    tmp_37 = 512UL;
                                                                    
#line 208 
                                                                    tmp_38 = tmp_37;
                                                                    }
                                                                    else 
                                                                    
#line 208 
                                                                    tmp_38 = 1024UL;
                                                                    
#line 208 
                                                                    tmp_39 = tmp_38;
                                                                    }
                                                                    else 
                                                                    
#line 208 
                                                                    tmp_39 = 2048UL;
                                                                    
#line 208 
                                                                    tmp_40 = tmp_39;
                                                                    }
                                                                    else 
                                                                    
#line 208 
                                                                    tmp_40 = 4096UL;
                                                                    
#line 208 
                                                                    tmp_41 = tmp_40;
                                                                    }
                                                                    else 
                                                                    
#line 208 
                                                                    tmp_41 = 8192UL;
                                                                    
#line 208 
                                                                    tmp_42 = tmp_41;
                                                                    }
                                                                    else 
                                                                    
#line 208 
                                                                    tmp_42 = 16384UL;
                                                                    
#line 208 
                                                                    tmp_43 = tmp_42;
                                                                    }
                                                                    else 
                                                                    
#line 208 
                                                                    tmp_43 = 32768UL;
                                                                    
#line 208 
                                                                    tmp_44 = tmp_43;
                                                                    }
                                                                    else 
                                                                    
#line 208 
                                                                    tmp_44 = 65536UL;
                                                                    
#line 208 
                                                                    tmp_45 = tmp_44;
                                                                    }
                                                                    else 
                                                                    
#line 208 
                                                                    tmp_45 = 131072UL;
                                                                    
#line 208 
                                                                    tmp_46 = tmp_45;
                                                                    }
                                                                    else 
                                                                    
#line 208 
                                                                    tmp_46 = 262144UL;
                                                                    
#line 208 
                                                                    tmp_47 = tmp_46;
                                                                    }
                                                                    else 
                                                                    
#line 208 
                                                                    tmp_47 = 524288UL;
                                                                    
#line 208 
                                                                    tmp_48 = tmp_47;
                                                                    }
                                                                    else 
                                                                    
#line 208 
                                                                    tmp_48 = 1048576UL;
                                                                    
#line 208 
                                                                    tmp_49 = tmp_48;
                                                                    }
                                                                    else 
                                                                    
#line 208 
                                                                    tmp_49 = 2097152UL;
                                                                    
#line 208 
                                                                    tmp_50 = tmp_49;
                                                                    }
                                                                    else 
                                                                    
#line 208 
                                                                    tmp_50 = 4194304UL;
                                                                    
#line 208 
                                                                    tmp_51 = tmp_50;
                                                                    }
                                                                    else 
                                                                    
#line 208 
                                                                    tmp_51 = 8388608UL;
                                                                    
#line 208 
                                                                    tmp_52 = tmp_51;
                                                                    }
                                                                    else 
                                                                    
#line 208 
                                                                    tmp_52 = 16777216UL;
                                                                    
#line 208 
                                                                    tmp_53 = tmp_52;
                                                                    }
                                                                    else 
                                                                    
#line 208 
                                                                    tmp_53 = 33554432UL;
                                                                    
#line 208 
                                                                    tmp_54 = tmp_53;
                                                                    }
                                                                    else 
                                                                    
#line 208 
                                                                    tmp_54 = 67108864UL;
                                                                    
#line 208 
                                                                    tmp_55 = tmp_54;
                                                                    }
                                                                    else 
                                                                    
#line 208 
                                                                    tmp_55 = 134217728UL;
                                                                    
#line 208 
                                                                    tmp_56 = tmp_55;
                                                                    }
                                                                    else 
                                                                    
#line 208 
                                                                    tmp_56 = 268435456UL;
                                                                    
#line 208 
                                                                    tmp_57 = tmp_56;
                                                                    }
                                                                    else 
                                                                    
#line 208 
                                                                    tmp_57 = 536870912UL;
                                                                    
#line 208 
                                                                    tmp_58 = tmp_57;
                                                                    }
                                                                    else 
                                                                    
#line 208 
                                                                    tmp_58 = 1073741824UL;
                                                                    
#line 208 
                                                                    tmp_59 = tmp_58;
                                                                    }
                                                                    else 
                                                                    
#line 208 
                                                                    tmp_59 = 2147483648UL;
                                                                    
#line 208 
                                                                    tmp_60 = tmp_59;
                                                                    }
                                                                    else 
                                                                    
#line 208 
                                                                    tmp_60 = 4294967296UL;
                                                                    
#line 208 
                                                                    tmp_61 = tmp_60;
                                                                    }
                                                                    else 
                                                                    
#line 208 
                                                                    tmp_61 = 8589934592UL;
                                                                    
#line 208 
                                                                    tmp_62 = tmp_61;
                                                                    }
                                                                    else 
                                                                    
#line 208 
                                                                    tmp_62 = 17179869184UL;
                                                                    
#line 208 
                                                                    tmp_63 = tmp_62;
                                                                  }
                                                                  else 
                                                                    
#line 208 
                                                                    tmp_63 = 34359738368UL;
                                                                  
#line 208 
                                                                  tmp_64 = tmp_63;
                                                                }
                                                                else 
                                                                  
#line 208 
                                                                  tmp_64 = 68719476736UL;
                                                                
#line 208 
                                                                tmp_65 = tmp_64;
                                                              }
                                                              else 
#line 208 
                                                                   tmp_65 = 137438953472UL;
                                                              
#line 208 
                                                              tmp_66 = tmp_65;
                                                            }
                                                            else 
#line 208 
                                                                 tmp_66 = 274877906944UL;
                                                            
#line 208 
                                                            tmp_67 = tmp_66;
                                                          }
                                                          else 
#line 208 
                                                               tmp_67 = 549755813888UL;
                                                          
#line 208 
                                                          tmp_68 = tmp_67;
                                                        }
                                                        else 
#line 208 
                                                             tmp_68 = 1099511627776UL;
                                                        
#line 208 
                                                        tmp_69 = tmp_68;
                                                      }
                                                      else 
#line 208 
                                                           tmp_69 = 2199023255552UL;
                                                      
#line 208 
                                                      tmp_70 = tmp_69;
                                                    }
                                                    else 
#line 208 
                                                         tmp_70 = 4398046511104UL;
                                                    
#line 208 
                                                    tmp_71 = tmp_70;
                                                  }
                                                  else 
#line 208 
                                                       tmp_71 = 8796093022208UL;
                                                  
#line 208 
                                                  tmp_72 = tmp_71;
                                                }
                                                else 
#line 208 
                                                     tmp_72 = 17592186044416UL;
                                                
#line 208 
                                                tmp_73 = tmp_72;
                                              }
                                              else 
#line 208 
                                                   tmp_73 = 35184372088832UL;
                                              
#line 208 
                                              tmp_74 = tmp_73;
                                            }
                                            else 
#line 208 
                                                 tmp_74 = 70368744177664UL;
                                            
#line 208 
                                            tmp_75 = tmp_74;
                                          }
                                          else 
#line 208 
                                               tmp_75 = 140737488355328UL;
                                          
#line 208 
                                          tmp_76 = tmp_75;
                                        }
                                        else 
#line 208 
                                             tmp_76 = 281474976710656UL;
                                        
#line 208 
                                        tmp_77 = tmp_76;
                                      }
                                      else 
#line 208 
                                           tmp_77 = 562949953421312UL;
                                      
#line 208 
                                      tmp_78 = tmp_77;
                                    }
                                    else 
#line 208 
                                         tmp_78 = 1125899906842624UL;
                                    
#line 208 
                                    tmp_79 = tmp_78;
                                  }
                                  else 
#line 208 
                                       tmp_79 = 2251799813685248UL;
                                  
#line 208 
                                  tmp_80 = tmp_79;
                                }
                                else 
#line 208 
                                     tmp_80 = 4503599627370496UL;
                                
#line 208 
                                tmp_81 = tmp_80;
                              }
                              else 
#line 208 
                                   tmp_81 = 9007199254740992UL;
                              
#line 208 
                              tmp_82 = tmp_81;
                            }
                            else 
#line 208 
                                 tmp_82 = 18014398509481984UL;
                            
#line 208 
                            tmp_83 = tmp_82;
                          }
                          else 
#line 208 
                               tmp_83 = 36028797018963968UL;
                          
#line 208 
                          tmp_84 = tmp_83;
                        }
                        else 
#line 208 
                             tmp_84 = 72057594037927936UL;
                        
#line 208 
                        tmp_85 = tmp_84;
                      }
                      else 
#line 208 
                           tmp_85 = 144115188075855872UL;
                      
#line 208 
                      tmp_86 = tmp_85;
                    }
                    else 
#line 208 
                         tmp_86 = 288230376151711744UL;
                    
#line 208 
                    tmp_87 = tmp_86;
                  }
                  else 
#line 208 
                       tmp_87 = 576460752303423488UL;
                  
#line 208 
                  tmp_88 = tmp_87;
                }
                else 
#line 208 
                     tmp_88 = 1152921504606846976UL;
                
#line 208 
                tmp_89 = tmp_88;
              }
              else 
#line 208 
                   tmp_89 = 2305843009213693952UL;
              
#line 208 
              tmp_90 = tmp_89;
            }
            else 
#line 208 
                 tmp_90 = 4611686018427387904UL;
            
#line 208 
            tmp_91 = tmp_90;
          }
          else 
#line 208 
               tmp_91 = 9223372036854775808UL;
          
#line 208 
          tmp_92 = tmp_91;
        }
        
#line 208 
        tmp_94 = tmp_92;
      }
      else {
        int tmp_93;
        
#line 208 
        tmp_93 = __ilog2_u32(ft->size + 4294967295U);
        
#line 208 
        tmp_94 = 1UL << (tmp_93 + 1);
      }
      
#line 208 
      tmp_95 = tmp_94;
    }
    else 
#line 208 
         tmp_95 = 1UL;
    
#line 208 
    tmp_97 = tmp_95;
  }
  else 
#line 208 
       tmp_97 = __roundup_pow_of_two((unsigned long)ft->size);
  
#line 208 
  tmp_98 = __ilog2_u64((unsigned long long)tmp_97);
  
#line 208 
  tmp_99 = __fswab32(tmp_26 | ((unsigned int)tmp_98 & 255U));
  
#line 208 
  *((__be32 *)(& in) + 6U) = tmp_99;
  {
    
#line 210 
    bool __cond_2 = (_Bool)0;
    
#line 210 
    if ((int)__cond_2 != 0) 
#line 210 
                            __compiletime_assert_211(); else ;
  }
  
#line 210 
  if (0 != 0) {
    unsigned int tmp_103;
    unsigned int tmp_105;
    
#line 210 
    if (0 != 0) 
#line 210 
                tmp_103 = ((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) << 24;
    else {
      __u32 tmp_102;
      
#line 210 
      tmp_102 = __fswab32(*((__be32 *)(& in)));
      
#line 210 
      tmp_103 = tmp_102 << 24;
    }
    
#line 210 
    if (0 != 0) 
#line 210 
                tmp_105 = (((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) << 8) & 16711680U;
    else {
      __u32 tmp_104;
      
#line 210 
      tmp_104 = __fswab32(*((__be32 *)(& in)));
      
#line 210 
      tmp_105 = (tmp_104 << 8) & 16711680U;
    }
    
#line 210 
    *((__be32 *)(& in)) = (tmp_103 | tmp_105) | 12297U;
  }
  else {
    __u32 tmp_108;
    unsigned int tmp_107;
    
#line 210 
    if (0 != 0) 
#line 210 
                tmp_107 = (((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) & 65535U) | 154140672U;
    else {
      __u32 tmp_106;
      
#line 210 
      tmp_106 = __fswab32(*((__be32 *)(& in)));
      
#line 210 
      tmp_107 = (tmp_106 & 65535U) | 154140672U;
    }
    
#line 210 
    tmp_108 = __fswab32(tmp_107);
    
#line 210 
    *((__be32 *)(& in)) = tmp_108;
  }
  
#line 213 
  memset((void *)(& out),0,16UL);
  
#line 214 
  err = mlx5_cmd_exec_check_status(ft->dev,(u32 *)(& in),64,(u32 *)(& out),16);
  
#line 216 
  if (err != 0) {
    
#line 217 
    __retres = err;
    
#line 217 
    goto return_label;
  }
  else ;
  
#line 219 
  if (0 != 0) 
#line 219 
              ft->id = ((((*((__be32 *)(& out) + 2U) << 24) | ((*((__be32 *)(& out) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& out) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& out) + 2U) >> 24)) & 16777215U;
  else {
    __u32 tmp_109;
    
#line 219 
    tmp_109 = __fswab32(*((__be32 *)(& out) + 2U));
    
#line 219 
    ft->id = tmp_109 & 16777215U;
  }
  
#line 221 
  __retres = 0;
  return_label: 
#line 221 
                return __retres;
}


#line 233 
void __compiletime_assert_233(void);


#line 234 
void __compiletime_assert_234(void);


#line 224  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/flow_table.c"
static void mlx5_destroy_flow_table_cmd(struct mlx5_flow_table *ft)
{
  u32 in[16U];
  u32 out[4U];
  
#line 229 
  memset((void *)(& in),0,64UL);
  
#line 230 
  memset((void *)(& out),0,16UL);
  {
    
#line 233 
    bool __cond = (_Bool)0;
    
#line 233 
    if ((int)__cond != 0) 
#line 233 
                          __compiletime_assert_233(); else ;
  }
  
#line 233 
  if (0 != 0) {
    unsigned int tmp_2;
    unsigned int tmp_4;
    unsigned int tmp_6;
    unsigned int tmp_8;
    
#line 233 
    if (0 != 0) 
#line 233 
                tmp_2 = ((((*((__be32 *)(& in) + 4U) << 24) | ((*((__be32 *)(& in) + 4U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 4U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 4U) >> 24)) & 16777215U;
    else {
      __u32 tmp_1;
      
#line 233 
      tmp_1 = __fswab32(*((__be32 *)(& in) + 4U));
      
#line 233 
      tmp_2 = tmp_1 & 16777215U;
    }
    
#line 233 
    if (0 != 0) 
#line 233 
                tmp_4 = ((((*((__be32 *)(& in) + 4U) << 24) | ((*((__be32 *)(& in) + 4U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 4U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 4U) >> 24)) & 16777215U;
    else {
      __u32 tmp_3;
      
#line 233 
      tmp_3 = __fswab32(*((__be32 *)(& in) + 4U));
      
#line 233 
      tmp_4 = tmp_3 & 16777215U;
    }
    
#line 233 
    if (0 != 0) 
#line 233 
                tmp_6 = ((((*((__be32 *)(& in) + 4U) << 24) | ((*((__be32 *)(& in) + 4U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 4U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 4U) >> 24)) & 16777215U;
    else {
      __u32 tmp_5;
      
#line 233 
      tmp_5 = __fswab32(*((__be32 *)(& in) + 4U));
      
#line 233 
      tmp_6 = tmp_5 & 16777215U;
    }
    
#line 233 
    if (0 != 0) 
#line 233 
                tmp_8 = ((((*((__be32 *)(& in) + 4U) << 24) | ((*((__be32 *)(& in) + 4U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 4U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 4U) >> 24)) & 16777215U;
    else {
      __u32 tmp_7;
      
#line 233 
      tmp_7 = __fswab32(*((__be32 *)(& in) + 4U));
      
#line 233 
      tmp_8 = tmp_7 & 16777215U;
    }
    
#line 233 
    *((__be32 *)(& in) + 4U) = ((((tmp_2 | ((unsigned int)ft->type << 24UL)) << 24) | (((tmp_4 | ((unsigned int)ft->type << 24UL)) << 8) & 16711680U)) | (((tmp_6 | ((unsigned int)ft->type << 24UL)) >> 8) & 65280U)) | ((tmp_8 | ((unsigned int)ft->type << 24UL)) >> 24);
  }
  else {
    __u32 tmp_11;
    unsigned int tmp_10;
    
#line 233 
    if (0 != 0) 
#line 233 
                tmp_10 = ((((*((__be32 *)(& in) + 4U) << 24) | ((*((__be32 *)(& in) + 4U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 4U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 4U) >> 24)) & 16777215U;
    else {
      __u32 tmp_9;
      
#line 233 
      tmp_9 = __fswab32(*((__be32 *)(& in) + 4U));
      
#line 233 
      tmp_10 = tmp_9 & 16777215U;
    }
    
#line 233 
    ;
    
#line 233 
    tmp_11 = __fswab32(tmp_10 | ((unsigned int)ft->type << 24UL));
    
#line 233 
    *((__be32 *)(& in) + 4U) = tmp_11;
  }
  {
    
#line 234 
    bool __cond_0 = (_Bool)0;
    
#line 234 
    if ((int)__cond_0 != 0) 
#line 234 
                            __compiletime_assert_234(); else ;
  }
  
#line 234 
  if (0 != 0) {
    unsigned int tmp_15;
    unsigned int tmp_17;
    unsigned int tmp_19;
    unsigned int tmp_21;
    
#line 234 
    if (0 != 0) 
#line 234 
                tmp_15 = ((((*((__be32 *)(& in) + 5U) << 24) | ((*((__be32 *)(& in) + 5U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 5U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 5U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_14;
      
#line 234 
      tmp_14 = __fswab32(*((__be32 *)(& in) + 5U));
      
#line 234 
      tmp_15 = tmp_14 & 4278190080U;
    }
    
#line 234 
    if (0 != 0) 
#line 234 
                tmp_17 = ((((*((__be32 *)(& in) + 5U) << 24) | ((*((__be32 *)(& in) + 5U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 5U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 5U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_16;
      
#line 234 
      tmp_16 = __fswab32(*((__be32 *)(& in) + 5U));
      
#line 234 
      tmp_17 = tmp_16 & 4278190080U;
    }
    
#line 234 
    if (0 != 0) 
#line 234 
                tmp_19 = ((((*((__be32 *)(& in) + 5U) << 24) | ((*((__be32 *)(& in) + 5U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 5U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 5U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_18;
      
#line 234 
      tmp_18 = __fswab32(*((__be32 *)(& in) + 5U));
      
#line 234 
      tmp_19 = tmp_18 & 4278190080U;
    }
    
#line 234 
    if (0 != 0) 
#line 234 
                tmp_21 = ((((*((__be32 *)(& in) + 5U) << 24) | ((*((__be32 *)(& in) + 5U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 5U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 5U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_20;
      
#line 234 
      tmp_20 = __fswab32(*((__be32 *)(& in) + 5U));
      
#line 234 
      tmp_21 = tmp_20 & 4278190080U;
    }
    
#line 234 
    *((__be32 *)(& in) + 5U) = ((((tmp_15 | (ft->id & 16777215U)) << 24) | (((tmp_17 | (ft->id & 16777215U)) << 8) & 16711680U)) | (((tmp_19 | (ft->id & 16777215U)) >> 8) & 65280U)) | ((tmp_21 | (ft->id & 16777215U)) >> 24);
  }
  else {
    __u32 tmp_24;
    unsigned int tmp_23;
    
#line 234 
    if (0 != 0) 
#line 234 
                tmp_23 = ((((*((__be32 *)(& in) + 5U) << 24) | ((*((__be32 *)(& in) + 5U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 5U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 5U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_22;
      
#line 234 
      tmp_22 = __fswab32(*((__be32 *)(& in) + 5U));
      
#line 234 
      tmp_23 = tmp_22 & 4278190080U;
    }
    
#line 234 
    ;
    
#line 234 
    tmp_24 = __fswab32(tmp_23 | (ft->id & 16777215U));
    
#line 234 
    *((__be32 *)(& in) + 5U) = tmp_24;
  }
  {
    
#line 235 
    bool __cond_1 = (_Bool)0;
    
#line 235 
    if ((int)__cond_1 != 0) 
#line 235 
                            __compiletime_assert_235(); else ;
  }
  
#line 235 
  if (0 != 0) {
    unsigned int tmp_28;
    unsigned int tmp_30;
    
#line 235 
    if (0 != 0) 
#line 235 
                tmp_28 = ((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) << 24;
    else {
      __u32 tmp_27;
      
#line 235 
      tmp_27 = __fswab32(*((__be32 *)(& in)));
      
#line 235 
      tmp_28 = tmp_27 << 24;
    }
    
#line 235 
    if (0 != 0) 
#line 235 
                tmp_30 = (((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) << 8) & 16711680U;
    else {
      __u32 tmp_29;
      
#line 235 
      tmp_29 = __fswab32(*((__be32 *)(& in)));
      
#line 235 
      tmp_30 = (tmp_29 << 8) & 16711680U;
    }
    
#line 235 
    *((__be32 *)(& in)) = (tmp_28 | tmp_30) | 12553U;
  }
  else {
    __u32 tmp_33;
    unsigned int tmp_32;
    
#line 235 
    if (0 != 0) 
#line 235 
                tmp_32 = (((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) & 65535U) | 154206208U;
    else {
      __u32 tmp_31;
      
#line 235 
      tmp_31 = __fswab32(*((__be32 *)(& in)));
      
#line 235 
      tmp_32 = (tmp_31 & 65535U) | 154206208U;
    }
    
#line 235 
    tmp_33 = __fswab32(tmp_32);
    
#line 235 
    *((__be32 *)(& in)) = tmp_33;
  }
  
#line 237 
  mlx5_cmd_exec_check_status(ft->dev,(u32 *)(& in),64,(u32 *)(& out),16);
  
#line 238 
  return;
}


#line 240  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/flow_table.c"
static int mlx5_find_group(struct mlx5_flow_table *ft, u8 match_criteria_enable, u32 *match_criteria, int *group_ix)
{
  int __retres;
  int i;
  
#line 243 
  void *mc_outer = (void *)match_criteria;
  
#line 245 
  void *mc_misc = (void *)match_criteria + 64U;
  
#line 247 
  void *mc_inner = (void *)match_criteria + 128U;
  
#line 249 
  int mc_outer_sz = 64;
  
#line 250 
  int mc_misc_sz = 64;
  
#line 251 
  int mc_inner_sz = 64;
  
#line 254 
  i = 0;
  
#line 254 
  goto ldv_35107;
  ldv_35106: 
#line 255 
  ;
  {
    
#line 255 
    struct mlx5_flow_table_group *g = & (ft->group + i)->g;
    
#line 256 
    void *gmc_outer = (void *)(& g->match_criteria);
    
#line 259 
    void *gmc_misc = (void *)(& g->match_criteria) + 64U;
    
#line 262 
    void *gmc_inner = (void *)(& g->match_criteria) + 128U;
    
#line 266 
    if ((int)g->match_criteria_enable != (int)match_criteria_enable) 
      
#line 267 
      goto ldv_35105; else ;
    
#line 269 
    if (((int)match_criteria_enable & 1) != 0) {
      int tmp;
      
#line 270 
      tmp = memcmp((void const *)mc_outer,(void const *)gmc_outer,(unsigned long)mc_outer_sz);
      
#line 270 
      if (tmp != 0) 
#line 271 
                    goto ldv_35105; else ;
    }
    else ;
    
#line 273 
    if (((int)match_criteria_enable & 2) != 0) {
      int tmp_0;
      
#line 274 
      tmp_0 = memcmp((void const *)mc_misc,(void const *)gmc_misc,(unsigned long)mc_misc_sz);
      
#line 274 
      if (tmp_0 != 0) 
#line 275 
                      goto ldv_35105; else ;
    }
    else ;
    
#line 277 
    if (((int)match_criteria_enable & 4) != 0) {
      int tmp_1;
      
#line 278 
      tmp_1 = memcmp((void const *)mc_inner,(void const *)gmc_inner,(unsigned long)mc_inner_sz);
      
#line 278 
      if (tmp_1 != 0) 
#line 279 
                      goto ldv_35105; else ;
    }
    else ;
    
#line 281 
    *group_ix = i;
    
#line 282 
    __retres = 0;
    
#line 282 
    goto return_label;
  }
  ldv_35105: 
#line 284 
  ;
  
#line 254 
  i += 1;
  ldv_35107: 
#line 255 
  ;
  
#line 254 
  if ((int)ft->num_groups > i) 
#line 256 
                               goto ldv_35106; else 
#line 259 
                                                    goto ldv_35108;
  ldv_35108: 
#line 260 
  ;
  
#line 285 
  __retres = -22;
  return_label: 
#line 285 
                return __retres;
}


#line 288  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/flow_table.c"
static int alloc_flow_index(struct mlx5_flow_table *ft, int group_ix, u32 *ix)
{
  unsigned long tmp;
  
#line 290 
  struct mlx5_ftg *g = ft->group + group_ix;
  
#line 291 
  int err = 0;
  
#line 293 
  ldv_mutex_lock_51(& ft->mutex);
  
#line 295 
  tmp = find_next_zero_bit((unsigned long const *)ft->bitmap,(unsigned long)ft->size,(unsigned long)g->start_ix);
  
#line 295 
  *ix = (unsigned int)tmp;
  
#line 296 
  if (*ix >= g->start_ix + (unsigned int)(1 << (int)g->g.log_sz)) 
#line 297 
                                                                  err = -28; else 
                                                                    
#line 299 
                                                                    __set_bit((long)*ix,(unsigned long volatile *)ft->bitmap);
  
#line 301 
  ldv_mutex_unlock_52(& ft->mutex);
  
#line 303 
  return err;
}


#line 306  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/flow_table.c"
static void mlx5_free_flow_index(struct mlx5_flow_table *ft, u32 ix)
{
  
#line 308 
  __set_bit((long)ix,(unsigned long volatile *)ft->bitmap);
  
#line 309 
  return;
}


#line 311  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/flow_table.c"
int mlx5_add_flow_table_entry(void *flow_table, u8 match_criteria_enable, void *match_criteria, void *flow_context, u32 *flow_index)
{
  int __retres;
  int group_ix;
  int err;
  int tmp_1;
  
#line 315 
  struct mlx5_flow_table *ft = (struct mlx5_flow_table *)flow_table;
  
#line 319 
  err = mlx5_find_group(ft,(unsigned char)((int)match_criteria_enable),(u32 *)match_criteria,& group_ix);
  
#line 321 
  if (err != 0) {
    struct task_struct *tmp;
    
#line 322 
    tmp = get_current();
    
#line 322 
    ;
    
#line 322 
    printk("\001",(char *)(& (ft->dev)->priv.name),"mlx5_add_flow_table_entry",322,tmp->pid);
    
#line 323 
    __retres = err;
    
#line 323 
    goto return_label;
  }
  else ;
  
#line 326 
  err = alloc_flow_index(ft,group_ix,flow_index);
  
#line 327 
  if (err != 0) {
    struct task_struct *tmp_0;
    
#line 328 
    tmp_0 = get_current();
    
#line 328 
    ;
    
#line 328 
    printk("\001",(char *)(& (ft->dev)->priv.name),"mlx5_add_flow_table_entry",328,tmp_0->pid);
    
#line 329 
    __retres = err;
    
#line 329 
    goto return_label;
  }
  else ;
  
#line 332 
  tmp_1 = mlx5_set_flow_entry_cmd(ft,(unsigned int)group_ix,*flow_index,flow_context);
  
#line 332 
  __retres = tmp_1;
  return_label: 
#line 332 
                return __retres;
}


#line 334  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/flow_table.c"
static char const __kstrtab_mlx5_add_flow_table_entry[26U] = {(char)'m', (char)'l', (char)'x', (char)'5', (char)'_', (char)'a', (char)'d', (char)'d', (char)'_', (char)'f', (char)'l', (char)'o', (char)'w', (char)'_', (char)'t', (char)'a', (char)'b', (char)'l', (char)'e', (char)'_', (char)'e', (char)'n', (char)'t', (char)'r', (char)'y', (char)'\000'};

#line 334 
struct kernel_symbol const __ksymtab_mlx5_add_flow_table_entry;


#line 334  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/flow_table.c"
struct kernel_symbol const __ksymtab_mlx5_add_flow_table_entry = {.value = (unsigned long)(& mlx5_add_flow_table_entry), .name = (char const *)(& __kstrtab_mlx5_add_flow_table_entry)};

#line 336  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/flow_table.c"
void mlx5_del_flow_table_entry(void *flow_table, u32 flow_index)
{
  
#line 338 
  struct mlx5_flow_table *ft = (struct mlx5_flow_table *)flow_table;
  
#line 340 
  mlx5_del_flow_entry_cmd(ft,flow_index);
  
#line 341 
  mlx5_free_flow_index(ft,flow_index);
  
#line 342 
  return;
}


#line 343  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/flow_table.c"
static char const __kstrtab_mlx5_del_flow_table_entry[26U] = {(char)'m', (char)'l', (char)'x', (char)'5', (char)'_', (char)'d', (char)'e', (char)'l', (char)'_', (char)'f', (char)'l', (char)'o', (char)'w', (char)'_', (char)'t', (char)'a', (char)'b', (char)'l', (char)'e', (char)'_', (char)'e', (char)'n', (char)'t', (char)'r', (char)'y', (char)'\000'};

#line 343 
struct kernel_symbol const __ksymtab_mlx5_del_flow_table_entry;


#line 343  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/flow_table.c"
struct kernel_symbol const __ksymtab_mlx5_del_flow_table_entry = {.value = (unsigned long)(& mlx5_del_flow_table_entry), .name = (char const *)(& __kstrtab_mlx5_del_flow_table_entry)};

#line 345  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/flow_table.c"
void *mlx5_create_flow_table(struct mlx5_core_dev *dev, u8 level, u8 table_type, u16 num_groups, struct mlx5_flow_table_group *group)
{
  void *__retres;
  struct mlx5_flow_table *ft;
  void *gr;
  void *bm;
  int err;
  int i;
  struct task_struct *tmp_0;
  
#line 350 
  u32 start_ix = 0U;
  
#line 351 
  u32 ft_size = 0U;
  
#line 357 
  i = 0;
  
#line 357 
  goto ldv_35170;
  ldv_35169: 
#line 358 
  ;
  
#line 358 
  ft_size = (unsigned int)(1 << (int)(group + i)->log_sz) + ft_size;
  
#line 357 
  i += 1;
  ldv_35170: 
#line 358 
  ;
  
#line 357 
  if ((int)num_groups > i) 
#line 359 
                           goto ldv_35169; else 
#line 362 
                                                goto ldv_35171;
  ldv_35171: 
#line 363 
  ;
  
#line 360 
  ft = (struct mlx5_flow_table *)kzalloc_0(208UL,208U);
  
#line 361 
  gr = kcalloc((unsigned long)num_groups,524UL,208U);
  
#line 362 
  bm = kcalloc(((unsigned long)ft_size + 63UL) / 64UL,8UL,208U);
  
#line 363 
  if ((ft == (struct mlx5_flow_table *)0 || gr == (void *)0) || bm == (void *)0) 
    
#line 364 
    goto err_free_ft; else ;
  
#line 366 
  ft->group = (struct mlx5_ftg *)gr;
  
#line 367 
  ft->bitmap = (unsigned long *)bm;
  
#line 368 
  ft->num_groups = num_groups;
  
#line 369 
  ft->level = level;
  
#line 370 
  ft->type = table_type;
  
#line 371 
  ft->size = ft_size;
  
#line 372 
  ft->dev = dev;
  {
    struct lock_class_key __key;
    
#line 373 
    __mutex_init(& ft->mutex,"&ft->mutex",& __key);
  }
  
#line 375 
  i = 0;
  
#line 375 
  goto ldv_35175;
  ldv_35174: 
#line 376 
  ;
  
#line 376 
  memcpy((void *)(& (ft->group + i)->g),(void const *)(group + i),516UL);
  
#line 377 
  (ft->group + i)->start_ix = start_ix;
  
#line 378 
  start_ix = (unsigned int)(1 << (int)(group + i)->log_sz) + start_ix;
  
#line 375 
  i += 1;
  ldv_35175: 
#line 376 
  ;
  
#line 375 
  if ((int)ft->num_groups > i) 
#line 377 
                               goto ldv_35174; else 
#line 380 
                                                    goto ldv_35176;
  ldv_35176: 
#line 381 
  ;
  
#line 381 
  err = mlx5_create_flow_table_cmd(ft);
  
#line 382 
  if (err != 0) 
#line 383 
                goto err_free_ft; else ;
  
#line 385 
  err = mlx5_create_flow_table_groups(ft);
  
#line 386 
  if (err != 0) 
#line 387 
                goto err_destroy_flow_table_cmd; else ;
  
#line 389 
  __retres = (void *)ft;
  
#line 389 
  goto return_label;
  err_destroy_flow_table_cmd: 
#line 391 
  ;
  
#line 392 
  mlx5_destroy_flow_table_cmd(ft);
  err_free_ft: 
#line 394 
  ;
  
#line 395 
  tmp_0 = get_current();
  
#line 395 
  ;
  
#line 395 
  printk("\001",(char *)(& dev->priv.name),"mlx5_create_flow_table",395,tmp_0->pid);
  
#line 396 
  kfree((void const *)bm);
  
#line 397 
  kfree((void const *)gr);
  
#line 398 
  kfree((void const *)ft);
  
#line 400 
  __retres = (void *)0;
  return_label: 
#line 400 
                return __retres;
}


#line 402  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/flow_table.c"
static char const __kstrtab_mlx5_create_flow_table[23U] = {(char)'m', (char)'l', (char)'x', (char)'5', (char)'_', (char)'c', (char)'r', (char)'e', (char)'a', (char)'t', (char)'e', (char)'_', (char)'f', (char)'l', (char)'o', (char)'w', (char)'_', (char)'t', (char)'a', (char)'b', (char)'l', (char)'e', (char)'\000'};

#line 402 
struct kernel_symbol const __ksymtab_mlx5_create_flow_table;


#line 402  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/flow_table.c"
struct kernel_symbol const __ksymtab_mlx5_create_flow_table = {.value = (unsigned long)(& mlx5_create_flow_table), .name = (char const *)(& __kstrtab_mlx5_create_flow_table)};

#line 404  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/flow_table.c"
void mlx5_destroy_flow_table(void *flow_table)
{
  
#line 406 
  struct mlx5_flow_table *ft = (struct mlx5_flow_table *)flow_table;
  
#line 408 
  mlx5_destroy_flow_table_groups(ft);
  
#line 409 
  mlx5_destroy_flow_table_cmd(ft);
  
#line 410 
  kfree((void const *)ft->bitmap);
  
#line 411 
  kfree((void const *)ft->group);
  
#line 412 
  kfree((void const *)ft);
  
#line 413 
  return;
}


#line 414  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/flow_table.c"
static char const __kstrtab_mlx5_destroy_flow_table[24U] = {(char)'m', (char)'l', (char)'x', (char)'5', (char)'_', (char)'d', (char)'e', (char)'s', (char)'t', (char)'r', (char)'o', (char)'y', (char)'_', (char)'f', (char)'l', (char)'o', (char)'w', (char)'_', (char)'t', (char)'a', (char)'b', (char)'l', (char)'e', (char)'\000'};

#line 414 
struct kernel_symbol const __ksymtab_mlx5_destroy_flow_table;


#line 414  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/flow_table.c"
struct kernel_symbol const __ksymtab_mlx5_destroy_flow_table = {.value = (unsigned long)(& mlx5_destroy_flow_table), .name = (char const *)(& __kstrtab_mlx5_destroy_flow_table)};

#line 416  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/flow_table.c"
u32 mlx5_get_flow_table_id(void *flow_table)
{
  u32 __retres;
  
#line 418 
  struct mlx5_flow_table *ft = (struct mlx5_flow_table *)flow_table;
  
#line 420 
  __retres = ft->id;
  
#line 420 
  return __retres;
}


#line 422  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/flow_table.c"
static char const __kstrtab_mlx5_get_flow_table_id[23U] = {(char)'m', (char)'l', (char)'x', (char)'5', (char)'_', (char)'g', (char)'e', (char)'t', (char)'_', (char)'f', (char)'l', (char)'o', (char)'w', (char)'_', (char)'t', (char)'a', (char)'b', (char)'l', (char)'e', (char)'_', (char)'i', (char)'d', (char)'\000'};

#line 422 
struct kernel_symbol const __ksymtab_mlx5_get_flow_table_id;


#line 422  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/flow_table.c"
struct kernel_symbol const __ksymtab_mlx5_get_flow_table_id = {.value = (unsigned long)(& mlx5_get_flow_table_id), .name = (char const *)(& __kstrtab_mlx5_get_flow_table_id)};

#line 490  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_flow_table.c.aux"
static void *kcalloc(size_t n, size_t size, gfp_t flags)
{
  void *tmp;
  
#line 493 
  tmp = ldv_kcalloc(n,size,flags);
  
#line 493 
  return tmp;
}


#line 497  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_flow_table.c.aux"
static void *kzalloc_0(size_t size, gfp_t flags)
{
  void *tmp;
  
#line 500 
  tmp = ldv_kzalloc(size,flags);
  
#line 500 
  return tmp;
}


#line 514  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_flow_table.c.aux"
static void ldv_mutex_lock_51(struct mutex *ldv_func_arg1)
{
  
#line 518 
  ldv_mutex_model_lock(ldv_func_arg1,(char *)"mutex_of_mlx5_flow_table");
  
#line 519 
  return;
}


#line 522  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_flow_table.c.aux"
static void ldv_mutex_unlock_52(struct mutex *ldv_func_arg1)
{
  
#line 526 
  ldv_mutex_model_unlock(ldv_func_arg1,(char *)"mutex_of_mlx5_flow_table");
  
#line 527 
  return;
}


#line 700  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/driver.h"
int mlx5_core_alloc_pd(struct mlx5_core_dev *dev, u32 *pdn);


#line 701 
int mlx5_core_dealloc_pd(struct mlx5_core_dev *dev, u32 pdn);


#line 61  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/pd.c"
int mlx5_core_alloc_pd(struct mlx5_core_dev *dev, u32 *pdn)
{
  int __retres;
  struct mlx5_alloc_pd_mbox_in in;
  struct mlx5_alloc_pd_mbox_out out;
  int err;
  
#line 67 
  memset((void *)(& in),0,16UL);
  
#line 68 
  memset((void *)(& out),0,16UL);
  
#line 69 
  in.hdr.opcode = (unsigned short)8U;
  
#line 70 
  err = mlx5_cmd_exec(dev,(void *)(& in),16,(void *)(& out),16);
  
#line 71 
  if (err != 0) {
    
#line 72 
    __retres = err;
    
#line 72 
    goto return_label;
  }
  else ;
  
#line 74 
  if ((unsigned int)out.hdr.status != 0U) {
    int tmp;
    
#line 75 
    tmp = mlx5_cmd_status_to_err(& out.hdr);
    
#line 75 
    __retres = tmp;
    
#line 75 
    goto return_label;
  }
  else ;
  
#line 77 
  if (0 != 0) 
#line 77 
              *pdn = ((((out.pdn << 24) | ((out.pdn << 8) & 16711680U)) | ((out.pdn >> 8) & 65280U)) | (out.pdn >> 24)) & 16777215U;
  else {
    __u32 tmp_0;
    
#line 77 
    tmp_0 = __fswab32(out.pdn);
    
#line 77 
    *pdn = tmp_0 & 16777215U;
  }
  
#line 78 
  __retres = err;
  return_label: 
#line 78 
                return __retres;
}


#line 80  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/pd.c"
static char const __kstrtab_mlx5_core_alloc_pd[19U] = {(char)'m', (char)'l', (char)'x', (char)'5', (char)'_', (char)'c', (char)'o', (char)'r', (char)'e', (char)'_', (char)'a', (char)'l', (char)'l', (char)'o', (char)'c', (char)'_', (char)'p', (char)'d', (char)'\000'};

#line 80 
struct kernel_symbol const __ksymtab_mlx5_core_alloc_pd;


#line 80  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/pd.c"
struct kernel_symbol const __ksymtab_mlx5_core_alloc_pd = {.value = (unsigned long)(& mlx5_core_alloc_pd), .name = (char const *)(& __kstrtab_mlx5_core_alloc_pd)};

#line 82  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/pd.c"
int mlx5_core_dealloc_pd(struct mlx5_core_dev *dev, u32 pdn)
{
  int __retres;
  struct mlx5_dealloc_pd_mbox_in in;
  struct mlx5_dealloc_pd_mbox_out out;
  int err;
  
#line 88 
  memset((void *)(& in),0,16UL);
  
#line 89 
  memset((void *)(& out),0,16UL);
  
#line 90 
  in.hdr.opcode = (unsigned short)264U;
  
#line 91 
  if (0 != 0) 
#line 91 
              in.pdn = (((pdn << 24) | ((pdn << 8) & 16711680U)) | ((pdn >> 8) & 65280U)) | (pdn >> 24); else 
                                                                    
#line 91 
                                                                    in.pdn = __fswab32(pdn);
  
#line 92 
  err = mlx5_cmd_exec(dev,(void *)(& in),16,(void *)(& out),16);
  
#line 93 
  if (err != 0) {
    
#line 94 
    __retres = err;
    
#line 94 
    goto return_label;
  }
  else ;
  
#line 96 
  if ((unsigned int)out.hdr.status != 0U) {
    int tmp_0;
    
#line 97 
    tmp_0 = mlx5_cmd_status_to_err(& out.hdr);
    
#line 97 
    __retres = tmp_0;
    
#line 97 
    goto return_label;
  }
  else ;
  
#line 99 
  __retres = err;
  return_label: 
#line 99 
                return __retres;
}


#line 101  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/pd.c"
static char const __kstrtab_mlx5_core_dealloc_pd[21U] = {(char)'m', (char)'l', (char)'x', (char)'5', (char)'_', (char)'c', (char)'o', (char)'r', (char)'e', (char)'_', (char)'d', (char)'e', (char)'a', (char)'l', (char)'l', (char)'o', (char)'c', (char)'_', (char)'p', (char)'d', (char)'\000'};

#line 101 
struct kernel_symbol const __ksymtab_mlx5_core_dealloc_pd;


#line 101  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/pd.c"
struct kernel_symbol const __ksymtab_mlx5_core_dealloc_pd = {.value = (unsigned long)(& mlx5_core_dealloc_pd), .name = (char const *)(& __kstrtab_mlx5_core_dealloc_pd)};

#line 402  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernel.h"
int sprintf(char *, char const * , ...);


#line 45  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/math64.h"
__inline static u64 div64_u64(u64 dividend, u64 divisor)
{
  u64 __retres;
  
#line 47 
  __retres = dividend / divisor;
  
#line 47 
  return __retres;
}


#line 50  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/err.h"
static bool IS_ERR_OR_NULL(void const *ptr);


#line 340  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_lock_irq_1(spinlock_t *lock)
{
  
#line 342 
  _raw_spin_lock_irq(& lock->__anonCompField_spinlock_18.rlock);
  
#line 343 
  return;
}


#line 366 
static void ldv_spin_lock_irq_60(spinlock_t *lock);


#line 370 
static void ldv_spin_lock_irq_62(spinlock_t *lock);


#line 413  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_unlock_irq_1(spinlock_t *lock)
{
  
#line 415 
  _raw_spin_unlock_irq(& lock->__anonCompField_spinlock_18.rlock);
  
#line 416 
  return;
}


#line 429 
static void ldv_spin_unlock_irq_61(spinlock_t *lock);


#line 433 
static void ldv_spin_unlock_irq_63(spinlock_t *lock);


#line 28  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/err.h"
long ldv_is_err_or_null(void const *ptr);


#line 54  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/debugfs.h"
static struct dentry *ldv_debugfs_create_file_64(char const *ldv_func_arg1, umode_t ldv_func_arg2, struct dentry *ldv_func_arg3, void *ldv_func_arg4, struct file_operations const *ldv_func_arg5);


#line 58 
static struct dentry *ldv_debugfs_create_file_65(char const *ldv_func_arg1, umode_t ldv_func_arg2, struct dentry *ldv_func_arg3, void *ldv_func_arg4, struct file_operations const *ldv_func_arg5);


#line 79 
static void ldv_debugfs_remove_59(struct dentry *ldv_func_arg1);


#line 92 
struct dentry *debugfs_create_u64(char const *, umode_t, struct dentry *, u64 *);


#line 581  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/slab.h"
static void *kzalloc_1(size_t size, gfp_t flags);


#line 89  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/debugfs.c"
struct dentry *mlx5_debugfs_root;

#line 712  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/driver.h"
void mlx5_register_debugfs(void);


#line 713 
void mlx5_unregister_debugfs(void);


#line 767 
int mlx5_debug_eq_add(struct mlx5_core_dev *dev, struct mlx5_eq *eq);


#line 768 
void mlx5_debug_eq_remove(struct mlx5_core_dev *dev, struct mlx5_eq *eq);


#line 769 
int mlx5_core_eq_query(struct mlx5_core_dev *dev, struct mlx5_eq *eq, struct mlx5_query_eq_mbox_out *out, int outlen);


#line 771 
int mlx5_eq_debugfs_init(struct mlx5_core_dev *dev);


#line 772 
void mlx5_eq_debugfs_cleanup(struct mlx5_core_dev *dev);


#line 773 
int mlx5_cq_debugfs_init(struct mlx5_core_dev *dev);


#line 774 
void mlx5_cq_debugfs_cleanup(struct mlx5_core_dev *dev);


#line 643  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/qp.h"
__inline static char const *mlx5_qp_type_str(int type)
{
  char const *__retres;
  
#line 645 
  switch (type) {
    case 0: 
#line 646 
    ;
    
#line 646 
    __retres = "RC";
    
#line 646 
    goto return_label;
    case 1: 
#line 647 
    ;
    
#line 647 
    __retres = "C";
    
#line 647 
    goto return_label;
    case 2: 
#line 648 
    ;
    
#line 648 
    __retres = "UD";
    
#line 648 
    goto return_label;
    case 3: 
#line 649 
    ;
    
#line 649 
    __retres = "XRC";
    
#line 649 
    goto return_label;
    case 4: 
#line 650 
    ;
    
#line 650 
    __retres = "MLX";
    
#line 650 
    goto return_label;
    case 7: 
#line 651 
    ;
    
#line 651 
    __retres = "QP0";
    
#line 651 
    goto return_label;
    case 8: 
#line 652 
    ;
    
#line 652 
    __retres = "QP1";
    
#line 652 
    goto return_label;
    case 9: 
#line 653 
    ;
    
#line 653 
    __retres = "RAW_ETHERTYPE";
    
#line 653 
    goto return_label;
    case 10: 
#line 654 
    ;
    
#line 654 
    __retres = "RAW_IPV6";
    
#line 654 
    goto return_label;
    case 11: 
#line 655 
    ;
    
#line 655 
    __retres = "SNIFFER";
    
#line 655 
    goto return_label;
    case 14: 
#line 656 
    ;
    
#line 656 
    __retres = "SYNC_UMR";
    
#line 656 
    goto return_label;
    case 13: 
#line 657 
    ;
    
#line 657 
    __retres = "PTP_1588";
    
#line 657 
    goto return_label;
    case 12: 
#line 658 
    ;
    
#line 658 
    __retres = "REG_UMR";
    
#line 658 
    goto return_label;
    default: 
#line 659 
    ;
    
#line 659 
    __retres = "Invalid transport type";
    
#line 659 
    goto return_label;
  }
  return_label: 
#line 645 
                return __retres;
}


#line 663  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/qp.h"
__inline static char const *mlx5_qp_state_str(int state)
{
  char const *__retres;
  
#line 665 
  switch (state) {
    case 0: 
#line 666 
    ;
    
#line 667 
    __retres = "RST";
    
#line 667 
    goto return_label;
    case 1: 
#line 668 
    ;
    
#line 669 
    __retres = "INIT";
    
#line 669 
    goto return_label;
    case 2: 
#line 670 
    ;
    
#line 671 
    __retres = "RTR";
    
#line 671 
    goto return_label;
    case 3: 
#line 672 
    ;
    
#line 673 
    __retres = "RTS";
    
#line 673 
    goto return_label;
    case 4: 
#line 674 
    ;
    
#line 675 
    __retres = "SQER";
    
#line 675 
    goto return_label;
    case 5: 
#line 676 
    ;
    
#line 677 
    __retres = "SQD";
    
#line 677 
    goto return_label;
    case 6: 
#line 678 
    ;
    
#line 679 
    __retres = "ERR";
    
#line 679 
    goto return_label;
    case 7: 
#line 680 
    ;
    
#line 681 
    __retres = "SQ_DRAINING";
    
#line 681 
    goto return_label;
    case 9: 
#line 682 
    ;
    
#line 683 
    __retres = "SUSPENDED";
    
#line 683 
    goto return_label;
    default: 
#line 684 
    ;
    
#line 684 
    __retres = "Invalid QP state";
    
#line 684 
    goto return_label;
  }
  return_label: 
#line 665 
                return __retres;
}


#line 168  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/cq.h"
int mlx5_core_query_cq(struct mlx5_core_dev *dev, struct mlx5_core_cq *cq, struct mlx5_query_cq_mbox_out *out);


#line 175 
int mlx5_debug_cq_add(struct mlx5_core_dev *dev, struct mlx5_core_cq *cq);


#line 176 
void mlx5_debug_cq_remove(struct mlx5_core_dev *dev, struct mlx5_core_cq *cq);


#line 52  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/debugfs.c"
static char *qp_fields[9U] = {(char *)"pid", (char *)"state", (char *)"transport", (char *)"mtu", (char *)"num_recv", (char *)"rcv_wqe_sz", (char *)"num_send", (char *)"log2_page_sz", (char *)"remote_qpn"};

#line 70  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/debugfs.c"
static char *eq_fields[3U] = {(char *)"num_eqes", (char *)"intr", (char *)"log_page_size"};

#line 82  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/debugfs.c"
static char *cq_fields[3U] = {(char *)"pid", (char *)"num_cqes", (char *)"log_page_size"};

#line 89  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/debugfs.c"
static char const __kstrtab_mlx5_debugfs_root[18U] = {(char)'m', (char)'l', (char)'x', (char)'5', (char)'_', (char)'d', (char)'e', (char)'b', (char)'u', (char)'g', (char)'f', (char)'s', (char)'_', (char)'r', (char)'o', (char)'o', (char)'t', (char)'\000'};

#line 89 
struct kernel_symbol const __ksymtab_mlx5_debugfs_root;


#line 89  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/debugfs.c"
struct kernel_symbol const __ksymtab_mlx5_debugfs_root = {.value = (unsigned long)(& mlx5_debugfs_root), .name = (char const *)(& __kstrtab_mlx5_debugfs_root)};

#line 91  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/debugfs.c"
void mlx5_register_debugfs(void)
{
  bool tmp;
  
#line 93 
  mlx5_debugfs_root = debugfs_create_dir("mlx5",(struct dentry *)0);
  
#line 94 
  tmp = IS_ERR_OR_NULL((void const *)mlx5_debugfs_root);
  
#line 94 
  if ((int)tmp != 0) 
#line 95 
                     mlx5_debugfs_root = (struct dentry *)0; else ;
  
#line 96 
  return;
}


#line 98  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/debugfs.c"
void mlx5_unregister_debugfs(void)
{
  
#line 100 
  ldv_debugfs_remove_59(mlx5_debugfs_root);
  
#line 101 
  return;
}


#line 103  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/debugfs.c"
int mlx5_qp_debugfs_init(struct mlx5_core_dev *dev)
{
  int __retres;
  
#line 105 
  if (mlx5_debugfs_root == (struct dentry *)0) {
    
#line 106 
    __retres = 0;
    
#line 106 
    goto return_label;
  }
  else ;
  
#line 108 
  atomic_set(& dev->num_qps,0);
  
#line 110 
  dev->priv.qp_debugfs = debugfs_create_dir("QPs",dev->priv.dbg_root);
  
#line 111 
  if (dev->priv.qp_debugfs == (struct dentry *)0) {
    
#line 112 
    __retres = -12;
    
#line 112 
    goto return_label;
  }
  else ;
  
#line 114 
  __retres = 0;
  return_label: 
#line 114 
                return __retres;
}


#line 117  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/debugfs.c"
void mlx5_qp_debugfs_cleanup(struct mlx5_core_dev *dev)
{
  
#line 119 
  if (mlx5_debugfs_root == (struct dentry *)0) 
#line 120 
                                               goto return_label; else ;
  
#line 122 
  debugfs_remove_recursive(dev->priv.qp_debugfs);
  return_label: 
#line 123 
                return;
}


#line 125  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/debugfs.c"
int mlx5_eq_debugfs_init(struct mlx5_core_dev *dev)
{
  int __retres;
  
#line 127 
  if (mlx5_debugfs_root == (struct dentry *)0) {
    
#line 128 
    __retres = 0;
    
#line 128 
    goto return_label;
  }
  else ;
  
#line 130 
  dev->priv.eq_debugfs = debugfs_create_dir("EQs",dev->priv.dbg_root);
  
#line 131 
  if (dev->priv.eq_debugfs == (struct dentry *)0) {
    
#line 132 
    __retres = -12;
    
#line 132 
    goto return_label;
  }
  else ;
  
#line 134 
  __retres = 0;
  return_label: 
#line 134 
                return __retres;
}


#line 137  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/debugfs.c"
void mlx5_eq_debugfs_cleanup(struct mlx5_core_dev *dev)
{
  
#line 139 
  if (mlx5_debugfs_root == (struct dentry *)0) 
#line 140 
                                               goto return_label; else ;
  
#line 142 
  debugfs_remove_recursive(dev->priv.eq_debugfs);
  return_label: 
#line 143 
                return;
}


#line 145  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/debugfs.c"
static ssize_t average_read(struct file *filp, char *buf, size_t count, loff_t *pos)
{
  ssize_t __retres;
  struct mlx5_cmd_stats *stats;
  int ret;
  char tbuf[22U];
  
#line 149 
  u64 field = 0ULL;
  
#line 153 
  if (*pos != 0LL) {
    
#line 154 
    __retres = 0L;
    
#line 154 
    goto return_label;
  }
  else ;
  
#line 156 
  stats = (struct mlx5_cmd_stats *)filp->private_data;
  
#line 157 
  ldv_spin_lock_irq_60(& stats->lock);
  
#line 158 
  if (stats->n != 0ULL) 
#line 159 
                        field = div64_u64(stats->sum,stats->n); else ;
  
#line 160 
  ldv_spin_unlock_irq_61(& stats->lock);
  
#line 161 
  ret = snprintf((char *)(& tbuf),22UL,"%llu\n",field);
  
#line 162 
  if (ret > 0) {
    unsigned long tmp;
    
#line 163 
    tmp = copy_to_user((void *)buf,(void const *)(& tbuf),(unsigned long)ret);
    
#line 163 
    if (tmp != 0UL) {
      
#line 164 
      __retres = -14L;
      
#line 164 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 167 
  *pos += (long long)ret;
  
#line 168 
  __retres = (long)ret;
  return_label: 
#line 168 
                return __retres;
}


#line 172  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/debugfs.c"
static ssize_t average_write(struct file *filp, char const *buf, size_t count, loff_t *pos)
{
  ssize_t __retres;
  struct mlx5_cmd_stats *stats;
  
#line 177 
  stats = (struct mlx5_cmd_stats *)filp->private_data;
  
#line 178 
  ldv_spin_lock_irq_62(& stats->lock);
  
#line 179 
  stats->sum = 0ULL;
  
#line 180 
  stats->n = 0ULL;
  
#line 181 
  ldv_spin_unlock_irq_63(& stats->lock);
  
#line 183 
  *pos = (long long)((unsigned long long)*pos + (unsigned long long)count);
  
#line 185 
  __retres = (long)count;
  
#line 185 
  return __retres;
}


#line 188  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/debugfs.c"
static struct file_operations const stats_fops = {.owner = & __this_module, .llseek = (loff_t (*)(struct file *, loff_t , int ))0, .read = & average_read, .write = & average_write, .read_iter = (ssize_t (*)(struct kiocb *, struct iov_iter *))0, .write_iter = (ssize_t (*)(struct kiocb *, struct iov_iter *))0, .iterate = (int (*)(struct file *, struct dir_context *))0, .poll = (unsigned int (*)(struct file *, struct poll_table_struct *))0, .unlocked_ioctl = (long (*)(struct file *, unsigned int , unsigned long ))0, .compat_ioctl = (long (*)(struct file *, unsigned int , unsigned long ))0, .mmap = (int (*)(struct file *, struct vm_area_struct *))0, .mremap = (int (*)(struct file *, struct vm_area_struct *))0, .open = & simple_open, .flush = (int (*)(struct file *, fl_owner_t ))0, .release = (int (*)(struct inode *, struct file *))0, .fsync = (int (*)(struct file *, loff_t , loff_t , int ))0, .aio_fsync = (int (*)(struct kiocb *, int ))0, .fasync = (int (*)(int , struct file *, int ))0, .lock = (int (*)(struct file *, int , struct file_lock *))0, .sendpage = (ssize_t (*)(struct file *, struct page *, int , size_t , loff_t *, int ))0, .get_unmapped_area = (unsigned long (*)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ))0, .check_flags = (int (*)(int ))0, .flock = (int (*)(struct file *, int , struct file_lock *))0, .splice_write = (ssize_t (*)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ))0, .splice_read = (ssize_t (*)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ))0, .setlease = (int (*)(struct file *, long , struct file_lock **, void **))0, .fallocate = (long (*)(struct file *, int , loff_t , loff_t ))0, .show_fdinfo = (void (*)(struct seq_file *, struct file *))0};

#line 195  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/debugfs.c"
int mlx5_cmdif_debugfs_init(struct mlx5_core_dev *dev)
{
  int __retres;
  struct mlx5_cmd_stats *stats;
  struct dentry **cmd;
  char const *namep;
  int err;
  int i;
  int tmp_2;
  
#line 203 
  if (mlx5_debugfs_root == (struct dentry *)0) {
    
#line 204 
    __retres = 0;
    
#line 204 
    goto return_label;
  }
  else ;
  
#line 206 
  cmd = & dev->priv.cmdif_debugfs;
  
#line 207 
  *cmd = debugfs_create_dir("commands",dev->priv.dbg_root);
  
#line 208 
  if (*cmd == (struct dentry *)0) {
    
#line 209 
    __retres = -12;
    
#line 209 
    goto return_label;
  }
  else ;
  
#line 211 
  i = 0;
  
#line 211 
  goto ldv_40277;
  ldv_40276: 
#line 212 
  ;
  
#line 212 
  stats = & dev->cmd.stats[i];
  
#line 213 
  namep = mlx5_command_str(i);
  
#line 214 
  tmp_2 = strcmp(namep,"unknown command opcode");
  
#line 214 
  if (tmp_2 != 0) {
    
#line 215 
    stats->root = debugfs_create_dir(namep,*cmd);
    
#line 216 
    if (stats->root == (struct dentry *)0) {
      struct task_struct *tmp;
      
#line 217 
      ;
      
#line 217 
      tmp = get_current();
      
#line 217 
      ;
      
#line 217 
      printk("\001",(char *)(& dev->priv.name),"mlx5_cmdif_debugfs_init",218,tmp->pid,i);
      
#line 219 
      err = -12;
      
#line 220 
      goto out;
    }
    else ;
    
#line 223 
    stats->avg = ldv_debugfs_create_file_64("average",(unsigned short)256,stats->root,(void *)stats,& stats_fops);
    
#line 226 
    if (stats->avg == (struct dentry *)0) {
      struct task_struct *tmp_0;
      
#line 227 
      tmp_0 = get_current();
      
#line 227 
      ;
      
#line 227 
      printk("\001",(char *)(& dev->priv.name),"mlx5_cmdif_debugfs_init",227,tmp_0->pid);
      
#line 228 
      err = -12;
      
#line 229 
      goto out;
    }
    else ;
    
#line 232 
    stats->count = debugfs_create_u64("n",(unsigned short)256,stats->root,& stats->n);
    
#line 235 
    if (stats->count == (struct dentry *)0) {
      struct task_struct *tmp_1;
      
#line 236 
      tmp_1 = get_current();
      
#line 236 
      ;
      
#line 236 
      printk("\001",(char *)(& dev->priv.name),"mlx5_cmdif_debugfs_init",236,tmp_1->pid);
      
#line 237 
      err = -12;
      
#line 238 
      goto out;
    }
    else ;
  }
  else ;
  
#line 211 
  i += 1;
  ldv_40277: 
#line 212 
  ;
  
#line 211 
  if ((unsigned int)i <= 2335U) 
#line 213 
                                goto ldv_40276; else 
#line 216 
                                                     goto ldv_40278;
  ldv_40278: 
#line 217 
  ;
  
#line 243 
  __retres = 0;
  
#line 243 
  goto return_label;
  out: 
#line 244 
  ;
  
#line 245 
  debugfs_remove_recursive(dev->priv.cmdif_debugfs);
  
#line 246 
  __retres = err;
  return_label: 
#line 246 
                return __retres;
}


#line 249  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/debugfs.c"
void mlx5_cmdif_debugfs_cleanup(struct mlx5_core_dev *dev)
{
  
#line 251 
  if (mlx5_debugfs_root == (struct dentry *)0) 
#line 252 
                                               goto return_label; else ;
  
#line 254 
  debugfs_remove_recursive(dev->priv.cmdif_debugfs);
  return_label: 
#line 255 
                return;
}


#line 257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/debugfs.c"
int mlx5_cq_debugfs_init(struct mlx5_core_dev *dev)
{
  int __retres;
  
#line 259 
  if (mlx5_debugfs_root == (struct dentry *)0) {
    
#line 260 
    __retres = 0;
    
#line 260 
    goto return_label;
  }
  else ;
  
#line 262 
  dev->priv.cq_debugfs = debugfs_create_dir("CQs",dev->priv.dbg_root);
  
#line 263 
  if (dev->priv.cq_debugfs == (struct dentry *)0) {
    
#line 264 
    __retres = -12;
    
#line 264 
    goto return_label;
  }
  else ;
  
#line 266 
  __retres = 0;
  return_label: 
#line 266 
                return __retres;
}


#line 269  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/debugfs.c"
void mlx5_cq_debugfs_cleanup(struct mlx5_core_dev *dev)
{
  
#line 271 
  if (mlx5_debugfs_root == (struct dentry *)0) 
#line 272 
                                               goto return_label; else ;
  
#line 274 
  debugfs_remove_recursive(dev->priv.cq_debugfs);
  return_label: 
#line 275 
                return;
}


#line 277  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/debugfs.c"
static u64 qp_read_field(struct mlx5_core_dev *dev, struct mlx5_core_qp *qp, int index, int *is_str)
{
  u64 __retres;
  struct mlx5_query_qp_mbox_out *out;
  struct mlx5_qp_context *ctx;
  int err;
  int no_sq;
  
#line 282 
  u64 param = 0ULL;
  
#line 286 
  out = (struct mlx5_query_qp_mbox_out *)kzalloc_1(272UL,208U);
  
#line 287 
  if (out == (struct mlx5_query_qp_mbox_out *)0) {
    
#line 288 
    __retres = param;
    
#line 288 
    goto return_label;
  }
  else ;
  
#line 290 
  err = mlx5_core_qp_query(dev,qp,out,272);
  
#line 291 
  if (err != 0) {
    struct task_struct *tmp_0;
    
#line 292 
    tmp_0 = get_current();
    
#line 292 
    ;
    
#line 292 
    printk("\001",(char *)(& dev->priv.name),"qp_read_field",292,tmp_0->pid);
    
#line 293 
    goto out;
  }
  else ;
  
#line 296 
  *is_str = 0;
  
#line 297 
  ctx = & out->ctx;
  
#line 298 
  switch (index) {
    char const *tmp_3;
    unsigned int tmp_2;
    char const *tmp_6;
    unsigned int tmp_5;
    unsigned int tmp_11;
    unsigned int tmp_13;
    case 0: 
#line 299 
    ;
    
#line 300 
    param = (unsigned long long)qp->pid;
    
#line 301 
    goto ldv_40302;
    case 1: 
#line 302 
    ;
    
#line 303 
    if (0 != 0) 
#line 303 
                tmp_2 = ((((ctx->flags << 24) | ((ctx->flags << 8) & 16711680U)) | ((ctx->flags >> 8) & 65280U)) | (ctx->flags >> 24)) >> 28;
    else {
      __u32 tmp_1;
      
#line 303 
      tmp_1 = __fswab32(ctx->flags);
      
#line 303 
      tmp_2 = tmp_1 >> 28;
    }
    
#line 303 
    tmp_3 = mlx5_qp_state_str((int)tmp_2);
    
#line 303 
    param = (unsigned long long)tmp_3;
    
#line 304 
    *is_str = 1;
    
#line 305 
    goto ldv_40302;
    case 2: 
#line 306 
    ;
    
#line 307 
    if (0 != 0) 
#line 307 
                tmp_5 = (((((ctx->flags << 24) | ((ctx->flags << 8) & 16711680U)) | ((ctx->flags >> 8) & 65280U)) | (ctx->flags >> 24)) >> 16) & 255U;
    else {
      __u32 tmp_4;
      
#line 307 
      tmp_4 = __fswab32(ctx->flags);
      
#line 307 
      tmp_5 = (tmp_4 >> 16) & 255U;
    }
    
#line 307 
    tmp_6 = mlx5_qp_type_str((int)tmp_5);
    
#line 307 
    param = (unsigned long long)tmp_6;
    
#line 308 
    *is_str = 1;
    
#line 309 
    goto ldv_40302;
    case 3: 
#line 310 
    ;
    
#line 311 
    switch ((int)ctx->mtu_msgmax >> 5) {
      case 1: 
#line 312 
      ;
      
#line 313 
      param = 256ULL;
      
#line 314 
      goto ldv_40307;
      case 2: 
#line 315 
      ;
      
#line 316 
      param = 512ULL;
      
#line 317 
      goto ldv_40307;
      case 3: 
#line 318 
      ;
      
#line 319 
      param = 1024ULL;
      
#line 320 
      goto ldv_40307;
      case 4: 
#line 321 
      ;
      
#line 322 
      param = 2048ULL;
      
#line 323 
      goto ldv_40307;
      case 5: 
#line 324 
      ;
      
#line 325 
      param = 4096ULL;
      
#line 326 
      goto ldv_40307;
      default: 
#line 327 
      ;
      
#line 328 
      param = 0ULL;
    }
    ldv_40307: 
#line 330 
    ;
    
#line 330 
    goto ldv_40302;
    case 4: 
#line 331 
    ;
    
#line 332 
    param = (unsigned long long)(1 << (((int)ctx->rq_size_stride >> 3) & 15));
    
#line 333 
    goto ldv_40302;
    case 5: 
#line 334 
    ;
    
#line 335 
    param = (unsigned long long)(1 << (((int)ctx->rq_size_stride & 7) + 4));
    
#line 336 
    goto ldv_40302;
    case 6: 
#line 337 
    ;
    
#line 338 
    if (0 != 0) 
#line 338 
                no_sq = (int)((unsigned short)(((int)ctx->sq_crq_size << 8) | ((int)ctx->sq_crq_size >> 8))) >> 15;
    else {
      __u16 tmp_7;
      
#line 338 
      tmp_7 = __fswab16((unsigned short)((int)ctx->sq_crq_size));
      
#line 338 
      no_sq = (int)tmp_7 >> 15;
    }
    
#line 339 
    if (no_sq == 0) {
      int tmp_9;
      
#line 340 
      if (0 != 0) 
#line 340 
                  tmp_9 = 1 << ((int)((unsigned short)(((int)ctx->sq_crq_size << 8) | ((int)ctx->sq_crq_size >> 8))) >> 11);
      else {
        __u16 tmp_8;
        
#line 340 
        tmp_8 = __fswab16((unsigned short)((int)ctx->sq_crq_size));
        
#line 340 
        tmp_9 = 1 << ((int)tmp_8 >> 11);
      }
      
#line 340 
      param = (unsigned long long)tmp_9;
    }
    else 
#line 342 
         param = 0ULL;
    
#line 343 
    goto ldv_40302;
    case 7: 
#line 344 
    ;
    
#line 345 
    if (0 != 0) 
#line 345 
                tmp_11 = (((((ctx->log_pg_sz_remote_qpn << 24) | ((ctx->log_pg_sz_remote_qpn << 8) & 16711680U)) | ((ctx->log_pg_sz_remote_qpn >> 8) & 65280U)) | (ctx->log_pg_sz_remote_qpn >> 24)) >> 24) & 31U;
    else {
      __u32 tmp_10;
      
#line 345 
      tmp_10 = __fswab32(ctx->log_pg_sz_remote_qpn);
      
#line 345 
      tmp_11 = (tmp_10 >> 24) & 31U;
    }
    
#line 345 
    param = (unsigned long long)tmp_11;
    
#line 346 
    param += 12ULL;
    
#line 347 
    goto ldv_40302;
    case 8: 
#line 348 
    ;
    
#line 349 
    if (0 != 0) 
#line 349 
                tmp_13 = ((((ctx->log_pg_sz_remote_qpn << 24) | ((ctx->log_pg_sz_remote_qpn << 8) & 16711680U)) | ((ctx->log_pg_sz_remote_qpn >> 8) & 65280U)) | (ctx->log_pg_sz_remote_qpn >> 24)) & 16777215U;
    else {
      __u32 tmp_12;
      
#line 349 
      tmp_12 = __fswab32(ctx->log_pg_sz_remote_qpn);
      
#line 349 
      tmp_13 = tmp_12 & 16777215U;
    }
    
#line 349 
    param = (unsigned long long)tmp_13;
    
#line 350 
    goto ldv_40302;
  }
  ldv_40302: 
#line 353 
  ;
  out: 
#line 353 
  ;
  
#line 354 
  kfree((void const *)out);
  
#line 355 
  __retres = param;
  return_label: 
#line 355 
                return __retres;
}


#line 358  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/debugfs.c"
static u64 eq_read_field(struct mlx5_core_dev *dev, struct mlx5_eq *eq, int index)
{
  u64 __retres;
  struct mlx5_query_eq_mbox_out *out;
  struct mlx5_eq_context *ctx;
  int err;
  
#line 363 
  u64 param = 0ULL;
  
#line 366 
  out = (struct mlx5_query_eq_mbox_out *)kzalloc_1(80UL,208U);
  
#line 367 
  if (out == (struct mlx5_query_eq_mbox_out *)0) {
    
#line 368 
    __retres = param;
    
#line 368 
    goto return_label;
  }
  else ;
  
#line 370 
  ctx = & out->ctx;
  
#line 372 
  err = mlx5_core_eq_query(dev,eq,out,80);
  
#line 373 
  if (err != 0) {
    struct task_struct *tmp_0;
    
#line 374 
    tmp_0 = get_current();
    
#line 374 
    ;
    
#line 374 
    printk("\001",(char *)(& dev->priv.name),"eq_read_field",374,tmp_0->pid);
    
#line 375 
    goto out;
  }
  else ;
  
#line 378 
  switch (index) {
    int tmp_2;
    case 0: 
#line 379 
    ;
    
#line 380 
    if (0 != 0) 
#line 380 
                tmp_2 = 1 << ((((((ctx->log_sz_usr_page << 24) | ((ctx->log_sz_usr_page << 8) & 16711680U)) | ((ctx->log_sz_usr_page >> 8) & 65280U)) | (ctx->log_sz_usr_page >> 24)) >> 24) & 31U);
    else {
      __u32 tmp_1;
      
#line 380 
      tmp_1 = __fswab32(ctx->log_sz_usr_page);
      
#line 380 
      tmp_2 = 1 << ((tmp_1 >> 24) & 31U);
    }
    
#line 380 
    param = (unsigned long long)tmp_2;
    
#line 381 
    goto ldv_40330;
    case 1: 
#line 382 
    ;
    
#line 383 
    param = (unsigned long long)ctx->intr;
    
#line 384 
    goto ldv_40330;
    case 2: 
#line 385 
    ;
    
#line 386 
    param = (unsigned long long)(((int)ctx->log_page_size & 31) + 12);
    
#line 387 
    goto ldv_40330;
  }
  ldv_40330: 
#line 390 
  ;
  out: 
#line 390 
  ;
  
#line 391 
  kfree((void const *)out);
  
#line 392 
  __retres = param;
  return_label: 
#line 392 
                return __retres;
}


#line 395  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/debugfs.c"
static u64 cq_read_field(struct mlx5_core_dev *dev, struct mlx5_core_cq *cq, int index)
{
  u64 __retres;
  struct mlx5_query_cq_mbox_out *out;
  struct mlx5_cq_context *ctx;
  int err;
  
#line 400 
  u64 param = 0ULL;
  
#line 403 
  out = (struct mlx5_query_cq_mbox_out *)kzalloc_1(96UL,208U);
  
#line 404 
  if (out == (struct mlx5_query_cq_mbox_out *)0) {
    
#line 405 
    __retres = param;
    
#line 405 
    goto return_label;
  }
  else ;
  
#line 407 
  ctx = & out->ctx;
  
#line 409 
  err = mlx5_core_query_cq(dev,cq,out);
  
#line 410 
  if (err != 0) {
    struct task_struct *tmp_0;
    
#line 411 
    tmp_0 = get_current();
    
#line 411 
    ;
    
#line 411 
    printk("\001",(char *)(& dev->priv.name),"cq_read_field",411,tmp_0->pid);
    
#line 412 
    goto out;
  }
  else ;
  
#line 415 
  switch (index) {
    int tmp_2;
    case 0: 
#line 416 
    ;
    
#line 417 
    param = (unsigned long long)cq->pid;
    
#line 418 
    goto ldv_40345;
    case 1: 
#line 419 
    ;
    
#line 420 
    if (0 != 0) 
#line 420 
                tmp_2 = 1 << ((((((ctx->log_sz_usr_page << 24) | ((ctx->log_sz_usr_page << 8) & 16711680U)) | ((ctx->log_sz_usr_page >> 8) & 65280U)) | (ctx->log_sz_usr_page >> 24)) >> 24) & 31U);
    else {
      __u32 tmp_1;
      
#line 420 
      tmp_1 = __fswab32(ctx->log_sz_usr_page);
      
#line 420 
      tmp_2 = 1 << ((tmp_1 >> 24) & 31U);
    }
    
#line 420 
    param = (unsigned long long)tmp_2;
    
#line 421 
    goto ldv_40345;
    case 2: 
#line 422 
    ;
    
#line 423 
    param = (unsigned long long)(((int)ctx->log_pg_sz & 31) + 12);
    
#line 424 
    goto ldv_40345;
  }
  ldv_40345: 
#line 427 
  ;
  out: 
#line 427 
  ;
  
#line 428 
  kfree((void const *)out);
  
#line 429 
  __retres = param;
  return_label: 
#line 429 
                return __retres;
}


#line 432  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/debugfs.c"
static ssize_t dbg_read(struct file *filp, char *buf, size_t count, loff_t *pos)
{
  ssize_t __retres;
  struct mlx5_field_desc *desc;
  struct mlx5_rsc_debug *d;
  char tbuf[18U];
  u64 field;
  int ret;
  
#line 438 
  int is_str = 0;
  
#line 442 
  if (*pos != 0LL) {
    
#line 443 
    __retres = 0L;
    
#line 443 
    goto return_label;
  }
  else ;
  
#line 445 
  desc = (struct mlx5_field_desc *)filp->private_data;
  
#line 446 
  d = (struct mlx5_rsc_debug *)(desc + - desc->i) + 18446744073709551584U;
  
#line 447 
  switch ((unsigned int)d->type) {
    struct task_struct *tmp;
    case (unsigned int)0: 
#line 448 
    ;
    
#line 449 
    field = qp_read_field(d->dev,(struct mlx5_core_qp *)d->object,desc->i,& is_str);
    
#line 450 
    goto ldv_40361;
    case (unsigned int)1: 
#line 452 
    ;
    
#line 453 
    field = eq_read_field(d->dev,(struct mlx5_eq *)d->object,desc->i);
    
#line 454 
    goto ldv_40361;
    case (unsigned int)2: 
#line 456 
    ;
    
#line 457 
    field = cq_read_field(d->dev,(struct mlx5_core_cq *)d->object,desc->i);
    
#line 458 
    goto ldv_40361;
    default: 
#line 460 
    ;
    
#line 461 
    ;
    
#line 461 
    tmp = get_current();
    
#line 461 
    ;
    
#line 461 
    printk("\001",(char *)(& (d->dev)->priv.name),"dbg_read",461,tmp->pid,(unsigned int)d->type);
    
#line 462 
    __retres = -22L;
    
#line 462 
    goto return_label;
  }
  ldv_40361: 
#line 466 
  ;
  
#line 466 
  if (is_str != 0) 
#line 467 
                   ret = snprintf((char *)(& tbuf),18UL,"%s\n",(char const *)field); else 
                                                                    
#line 469 
                                                                    ret = snprintf((char *)(& tbuf),18UL,"0x%llx\n",field);
  
#line 471 
  if (ret > 0) {
    unsigned long tmp_0;
    
#line 472 
    tmp_0 = copy_to_user((void *)buf,(void const *)(& tbuf),(unsigned long)ret);
    
#line 472 
    if (tmp_0 != 0UL) {
      
#line 473 
      __retres = -14L;
      
#line 473 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 476 
  *pos += (long long)ret;
  
#line 477 
  __retres = (long)ret;
  return_label: 
#line 477 
                return __retres;
}


#line 480  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/debugfs.c"
static struct file_operations const fops_0 = {.owner = & __this_module, .llseek = (loff_t (*)(struct file *, loff_t , int ))0, .read = & dbg_read, .write = (ssize_t (*)(struct file *, char const *, size_t , loff_t *))0, .read_iter = (ssize_t (*)(struct kiocb *, struct iov_iter *))0, .write_iter = (ssize_t (*)(struct kiocb *, struct iov_iter *))0, .iterate = (int (*)(struct file *, struct dir_context *))0, .poll = (unsigned int (*)(struct file *, struct poll_table_struct *))0, .unlocked_ioctl = (long (*)(struct file *, unsigned int , unsigned long ))0, .compat_ioctl = (long (*)(struct file *, unsigned int , unsigned long ))0, .mmap = (int (*)(struct file *, struct vm_area_struct *))0, .mremap = (int (*)(struct file *, struct vm_area_struct *))0, .open = & simple_open, .flush = (int (*)(struct file *, fl_owner_t ))0, .release = (int (*)(struct inode *, struct file *))0, .fsync = (int (*)(struct file *, loff_t , loff_t , int ))0, .aio_fsync = (int (*)(struct kiocb *, int ))0, .fasync = (int (*)(int , struct file *, int ))0, .lock = (int (*)(struct file *, int , struct file_lock *))0, .sendpage = (ssize_t (*)(struct file *, struct page *, int , size_t , loff_t *, int ))0, .get_unmapped_area = (unsigned long (*)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ))0, .check_flags = (int (*)(int ))0, .flock = (int (*)(struct file *, int , struct file_lock *))0, .splice_write = (ssize_t (*)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ))0, .splice_read = (ssize_t (*)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ))0, .setlease = (int (*)(struct file *, long , struct file_lock **, void **))0, .fallocate = (long (*)(struct file *, int , loff_t , loff_t ))0, .show_fdinfo = (void (*)(struct seq_file *, struct file *))0};

#line 486  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/debugfs.c"
static int add_res_tree(struct mlx5_core_dev *dev, enum dbg_rsc_type type, struct dentry *root, struct mlx5_rsc_debug **dbg, int rsn, char **field, int nfile, void *data)
{
  int __retres;
  struct mlx5_rsc_debug *d;
  char resn[32U];
  int err;
  int i;
  
#line 495 
  d = (struct mlx5_rsc_debug *)kzalloc_1(((unsigned long)nfile + 2UL) * 16UL,208U);
  
#line 496 
  if (d == (struct mlx5_rsc_debug *)0) {
    
#line 497 
    __retres = -12;
    
#line 497 
    goto return_label;
  }
  else ;
  
#line 499 
  d->dev = dev;
  
#line 500 
  d->object = data;
  
#line 501 
  d->type = type;
  
#line 502 
  sprintf((char *)(& resn),"0x%x",rsn);
  
#line 503 
  d->root = debugfs_create_dir((char const *)(& resn),root);
  
#line 504 
  if (d->root == (struct dentry *)0) {
    
#line 505 
    err = -12;
    
#line 506 
    goto out_free;
  }
  else ;
  
#line 509 
  i = 0;
  
#line 509 
  goto ldv_40384;
  ldv_40383: 
#line 510 
  ;
  
#line 510 
  d->fields[i].i = i;
  
#line 511 
  d->fields[i].dent = ldv_debugfs_create_file_65((char const *)*(field + i),(unsigned short)256,d->root,(void *)(& d->fields[i]),& fops_0);
  
#line 514 
  if (d->fields[i].dent == (struct dentry *)0) {
    
#line 515 
    err = -12;
    
#line 516 
    goto out_rem;
  }
  else ;
  
#line 509 
  i += 1;
  ldv_40384: 
#line 510 
  ;
  
#line 509 
  if (i < nfile) 
#line 511 
                 goto ldv_40383; else 
#line 514 
                                      goto ldv_40385;
  ldv_40385: 
#line 515 
  ;
  
#line 519 
  *dbg = d;
  
#line 521 
  __retres = 0;
  
#line 521 
  goto return_label;
  out_rem: 
#line 522 
  ;
  
#line 523 
  debugfs_remove_recursive(d->root);
  out_free: 
#line 525 
  ;
  
#line 526 
  kfree((void const *)d);
  
#line 527 
  __retres = err;
  return_label: 
#line 527 
                return __retres;
}


#line 530  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/debugfs.c"
static void rem_res_tree(struct mlx5_rsc_debug *d)
{
  
#line 532 
  debugfs_remove_recursive(d->root);
  
#line 533 
  kfree((void const *)d);
  
#line 534 
  return;
}


#line 536  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/debugfs.c"
int mlx5_debug_qp_add(struct mlx5_core_dev *dev, struct mlx5_core_qp *qp)
{
  int __retres;
  int err;
  
#line 540 
  if (mlx5_debugfs_root == (struct dentry *)0) {
    
#line 541 
    __retres = 0;
    
#line 541 
    goto return_label;
  }
  else ;
  
#line 543 
  err = add_res_tree(dev,(enum dbg_rsc_type)MLX5_DBG_RSC_QP,dev->priv.qp_debugfs,& qp->dbg,qp->qpn,(char **)(& qp_fields),9,(void *)qp);
  
#line 546 
  if (err != 0) 
#line 547 
                qp->dbg = (struct mlx5_rsc_debug *)0; else ;
  
#line 549 
  __retres = err;
  return_label: 
#line 549 
                return __retres;
}


#line 552  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/debugfs.c"
void mlx5_debug_qp_remove(struct mlx5_core_dev *dev, struct mlx5_core_qp *qp)
{
  
#line 554 
  if (mlx5_debugfs_root == (struct dentry *)0) 
#line 555 
                                               goto return_label; else ;
  
#line 557 
  if (qp->dbg != (struct mlx5_rsc_debug *)0) 
#line 558 
                                             rem_res_tree(qp->dbg); else ;
  return_label: 
#line 559 
                return;
}


#line 562  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/debugfs.c"
int mlx5_debug_eq_add(struct mlx5_core_dev *dev, struct mlx5_eq *eq)
{
  int __retres;
  int err;
  
#line 566 
  if (mlx5_debugfs_root == (struct dentry *)0) {
    
#line 567 
    __retres = 0;
    
#line 567 
    goto return_label;
  }
  else ;
  
#line 569 
  err = add_res_tree(dev,(enum dbg_rsc_type)MLX5_DBG_RSC_EQ,dev->priv.eq_debugfs,& eq->dbg,(int)eq->eqn,(char **)(& eq_fields),3,(void *)eq);
  
#line 572 
  if (err != 0) 
#line 573 
                eq->dbg = (struct mlx5_rsc_debug *)0; else ;
  
#line 575 
  __retres = err;
  return_label: 
#line 575 
                return __retres;
}


#line 578  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/debugfs.c"
void mlx5_debug_eq_remove(struct mlx5_core_dev *dev, struct mlx5_eq *eq)
{
  
#line 580 
  if (mlx5_debugfs_root == (struct dentry *)0) 
#line 581 
                                               goto return_label; else ;
  
#line 583 
  if (eq->dbg != (struct mlx5_rsc_debug *)0) 
#line 584 
                                             rem_res_tree(eq->dbg); else ;
  return_label: 
#line 585 
                return;
}


#line 587  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/debugfs.c"
int mlx5_debug_cq_add(struct mlx5_core_dev *dev, struct mlx5_core_cq *cq)
{
  int __retres;
  int err;
  
#line 591 
  if (mlx5_debugfs_root == (struct dentry *)0) {
    
#line 592 
    __retres = 0;
    
#line 592 
    goto return_label;
  }
  else ;
  
#line 594 
  err = add_res_tree(dev,(enum dbg_rsc_type)MLX5_DBG_RSC_CQ,dev->priv.cq_debugfs,& cq->dbg,(int)cq->cqn,(char **)(& cq_fields),3,(void *)cq);
  
#line 597 
  if (err != 0) 
#line 598 
                cq->dbg = (struct mlx5_rsc_debug *)0; else ;
  
#line 600 
  __retres = err;
  return_label: 
#line 600 
                return __retres;
}


#line 603  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/debugfs.c"
void mlx5_debug_cq_remove(struct mlx5_core_dev *dev, struct mlx5_core_cq *cq)
{
  
#line 605 
  if (mlx5_debugfs_root == (struct dentry *)0) 
#line 606 
                                               goto return_label; else ;
  
#line 608 
  if (cq->dbg != (struct mlx5_rsc_debug *)0) 
#line 609 
                                             rem_res_tree(cq->dbg); else ;
  return_label: 
#line 610 
                return;
}


#line 56  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_debugfs.c.aux"
struct file_operations *ldv_emg_alias_stats_fops_2 = (struct file_operations *)(& stats_fops);

#line 57  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_debugfs.c.aux"
int (*ldv_emg_alias_simple_open_5)(struct inode *, struct file *) = & simple_open;

#line 65 
void ldv_emg_debugfs_remove(struct dentry *arg0);


#line 72  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_debugfs.c.aux"
long ldv_emg_wrapper_dbg_read_3(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  long tmp;
  
#line 73 
  tmp = dbg_read(arg0,arg1,arg2,arg3);
  
#line 73 
  return tmp;
}


#line 77  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_debugfs.c.aux"
long ldv_emg_wrapper_average_read_3(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  long tmp;
  
#line 78 
  tmp = average_read(arg0,arg1,arg2,arg3);
  
#line 78 
  return tmp;
}


#line 82  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_debugfs.c.aux"
long ldv_emg_wrapper_average_write_4(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  long tmp;
  
#line 83 
  tmp = average_write(arg0,(char const *)arg1,arg2,arg3);
  
#line 83 
  return tmp;
}


#line 111  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_debugfs.c.aux"
static bool IS_ERR_OR_NULL(void const *ptr)
{
  bool __retres;
  long ret;
  
#line 115 
  ret = ldv_is_err_or_null(ptr);
  
#line 116 
  __retres = (_Bool)(ret != 0L);
  
#line 116 
  return __retres;
}


#line 606  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_debugfs.c.aux"
static void *kzalloc_1(size_t size, gfp_t flags)
{
  void *tmp;
  
#line 609 
  tmp = ldv_kzalloc(size,flags);
  
#line 609 
  return tmp;
}


#line 613  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_debugfs.c.aux"
static void ldv_debugfs_remove_59(struct dentry *ldv_func_arg1)
{
  
#line 617 
  ldv_emg_debugfs_remove(ldv_func_arg1);
  
#line 618 
  return;
}


#line 621  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_debugfs.c.aux"
static void ldv_spin_lock_irq_60(spinlock_t *lock)
{
  
#line 625 
  ldv_spin_model_lock((char *)"lock_of_mlx5_cmd_stats");
  
#line 627 
  spin_lock_irq_1(lock);
  
#line 628 
  return;
}


#line 631  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_debugfs.c.aux"
static void ldv_spin_unlock_irq_61(spinlock_t *lock)
{
  
#line 635 
  ldv_spin_model_unlock((char *)"lock_of_mlx5_cmd_stats");
  
#line 637 
  spin_unlock_irq_1(lock);
  
#line 638 
  return;
}


#line 641  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_debugfs.c.aux"
static void ldv_spin_lock_irq_62(spinlock_t *lock)
{
  
#line 645 
  ldv_spin_model_lock((char *)"lock_of_mlx5_cmd_stats");
  
#line 647 
  spin_lock_irq_1(lock);
  
#line 648 
  return;
}


#line 651  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_debugfs.c.aux"
static void ldv_spin_unlock_irq_63(spinlock_t *lock)
{
  
#line 655 
  ldv_spin_model_unlock((char *)"lock_of_mlx5_cmd_stats");
  
#line 657 
  spin_unlock_irq_1(lock);
  
#line 658 
  return;
}


#line 661  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_debugfs.c.aux"
static struct dentry *ldv_debugfs_create_file_64(char const *ldv_func_arg1, umode_t ldv_func_arg2, struct dentry *ldv_func_arg3, void *ldv_func_arg4, struct file_operations const *ldv_func_arg5)
{
  struct dentry *tmp;
  
#line 665 
  tmp = ldv_emg_debugfs_create_file((char *)ldv_func_arg1,(unsigned short)((int)ldv_func_arg2),ldv_func_arg3,ldv_func_arg4,(struct file_operations *)ldv_func_arg5);
  
#line 665 
  return tmp;
}


#line 669  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_debugfs.c.aux"
static struct dentry *ldv_debugfs_create_file_65(char const *ldv_func_arg1, umode_t ldv_func_arg2, struct dentry *ldv_func_arg3, void *ldv_func_arg4, struct file_operations const *ldv_func_arg5)
{
  struct dentry *tmp;
  
#line 673 
  tmp = ldv_emg_debugfs_create_file((char *)ldv_func_arg1,(unsigned short)((int)ldv_func_arg2),ldv_func_arg3,ldv_func_arg4,(struct file_operations *)ldv_func_arg5);
  
#line 673 
  return tmp;
}


#line 98  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/atomic.h"
static void atomic_inc_0(atomic_t *v);


#line 120 
static int atomic_dec_and_test_0(atomic_t *v);


#line 310  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_lock_1(spinlock_t *lock)
{
  
#line 312 
  _raw_spin_lock(& lock->__anonCompField_spinlock_18.rlock);
  
#line 313 
  return;
}


#line 334 
static void ldv_spin_lock_51_0(spinlock_t *lock);


#line 338 
static void ldv_spin_lock_53(spinlock_t *lock);


#line 340  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_lock_irq_2(spinlock_t *lock)
{
  
#line 342 
  _raw_spin_lock_irq(& lock->__anonCompField_spinlock_18.rlock);
  
#line 343 
  return;
}


#line 366 
static void ldv_spin_lock_irq_55(spinlock_t *lock);


#line 370 
static void ldv_spin_lock_irq_57(spinlock_t *lock);


#line 371  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_unlock_1(spinlock_t *lock)
{
  
#line 373 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_18.rlock);
  
#line 374 
  return;
}


#line 391 
static void ldv_spin_unlock_52_0(spinlock_t *lock);


#line 395 
static void ldv_spin_unlock_54(spinlock_t *lock);


#line 409  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_unlock_irq_2(spinlock_t *lock)
{
  
#line 411 
  _raw_spin_unlock_irq(& lock->__anonCompField_spinlock_18.rlock);
  
#line 412 
  return;
}


#line 425 
static void ldv_spin_unlock_irq_56(spinlock_t *lock);


#line 429 
static void ldv_spin_unlock_irq_58(spinlock_t *lock);


#line 581  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/slab.h"
static void *kzalloc_2(size_t size, gfp_t flags);


#line 637  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/driver.h"
__inline static void *mlx5_vzalloc_0(unsigned long size)
{
  void *rtn;
  
#line 641 
  rtn = kzalloc_2(size,720U);
  
#line 642 
  if (rtn == (void *)0) 
#line 643 
                        rtn = vzalloc(size); else ;
  
#line 644 
  return rtn;
}


#line 681 
int mlx5_core_create_srq(struct mlx5_core_dev *dev, struct mlx5_core_srq *srq, struct mlx5_create_srq_mbox_in *in, int inlen, int is_xrc);


#line 684 
int mlx5_core_destroy_srq(struct mlx5_core_dev *dev, struct mlx5_core_srq *srq);


#line 685 
int mlx5_core_query_srq(struct mlx5_core_dev *dev, struct mlx5_core_srq *srq, struct mlx5_query_srq_mbox_out *out);


#line 687 
int mlx5_core_arm_srq(struct mlx5_core_dev *dev, struct mlx5_core_srq *srq, u16 lwm, int is_srq);


#line 722 
void mlx5_srq_event(struct mlx5_core_dev *dev, u32 srqn, int event_type);


#line 723 
struct mlx5_core_srq *mlx5_core_get_srq(struct mlx5_core_dev *dev, u32 srqn);


#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/srq.h"
void mlx5_init_srq_table(struct mlx5_core_dev *dev);


#line 39 
void mlx5_cleanup_srq_table(struct mlx5_core_dev *dev);


#line 52  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/transobj.h"
int mlx5_core_create_rmp(struct mlx5_core_dev *dev, u32 *in, int inlen, u32 *rmpn);


#line 54 
int mlx5_core_modify_rmp(struct mlx5_core_dev *dev, u32 *in, int inlen);


#line 55 
int mlx5_core_destroy_rmp(struct mlx5_core_dev *dev, u32 rmpn);


#line 56 
int mlx5_core_query_rmp(struct mlx5_core_dev *dev, u32 rmpn, u32 *out);


#line 42  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/srq.c"
void mlx5_srq_event(struct mlx5_core_dev *dev, u32 srqn, int event_type)
{
  struct mlx5_core_srq *srq;
  int tmp_1;
  
#line 44 
  struct mlx5_srq_table *table = & dev->priv.srq_table;
  
#line 47 
  ldv_spin_lock_51_0(& table->lock);
  
#line 49 
  srq = (struct mlx5_core_srq *)radix_tree_lookup(& table->tree,(unsigned long)srqn);
  
#line 50 
  if (srq != (struct mlx5_core_srq *)0) 
#line 51 
                                        atomic_inc_0(& srq->refcount); else ;
  
#line 53 
  ldv_spin_unlock_52_0(& table->lock);
  
#line 55 
  if (srq == (struct mlx5_core_srq *)0) {
    struct task_struct *tmp_0;
    
#line 56 
    ;
    
#line 56 
    tmp_0 = get_current();
    
#line 56 
    ;
    
#line 56 
    printk("\001",(char *)(& dev->priv.name),"mlx5_srq_event",56,tmp_0->pid,srqn);
    
#line 57 
    goto return_label;
  }
  else ;
  
#line 60 
  (*(srq->event))(srq,(enum mlx5_event)event_type);
  
#line 62 
  tmp_1 = atomic_dec_and_test_0(& srq->refcount);
  
#line 62 
  if (tmp_1 != 0) 
#line 63 
                  complete(& srq->free); else ;
  return_label: 
#line 64 
                return;
}


#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/srq.c"
static int get_pas_size(void *srqc)
{
  int __retres;
  unsigned int tmp_0;
  unsigned int tmp_2;
  unsigned int tmp_4;
  unsigned int tmp_6;
  
#line 68 
  if (0 != 0) 
#line 68 
              tmp_0 = ((((((*((__be32 *)srqc + 4U) << 24) | ((*((__be32 *)srqc + 4U) << 8) & 16711680U)) | ((*((__be32 *)srqc + 4U) >> 8) & 65280U)) | (*((__be32 *)srqc + 4U) >> 24)) >> 24UL) & 63U) + 12U;
  else {
    __u32 tmp;
    
#line 68 
    tmp = __fswab32(*((__be32 *)srqc + 4U));
    
#line 68 
    tmp_0 = ((tmp >> 24UL) & 63U) + 12U;
  }
  
#line 68 
  u32 log_page_size = tmp_0;
  
#line 69 
  if (0 != 0) 
#line 69 
              tmp_2 = (((((*((__be32 *)srqc) << 24) | ((*((__be32 *)srqc) << 8) & 16711680U)) | ((*((__be32 *)srqc) >> 8) & 65280U)) | (*((__be32 *)srqc) >> 24)) >> 24UL) & 15U;
  else {
    __u32 tmp_1;
    
#line 69 
    tmp_1 = __fswab32(*((__be32 *)srqc));
    
#line 69 
    tmp_2 = (tmp_1 >> 24UL) & 15U;
  }
  
#line 69 
  u32 log_srq_size = tmp_2;
  
#line 70 
  if (0 != 0) 
#line 70 
              tmp_4 = (((((*((__be32 *)srqc + 1U) << 24) | ((*((__be32 *)srqc + 1U) << 8) & 16711680U)) | ((*((__be32 *)srqc + 1U) >> 8) & 65280U)) | (*((__be32 *)srqc + 1U) >> 24)) >> 24UL) & 7U;
  else {
    __u32 tmp_3;
    
#line 70 
    tmp_3 = __fswab32(*((__be32 *)srqc + 1U));
    
#line 70 
    tmp_4 = (tmp_3 >> 24UL) & 7U;
  }
  
#line 70 
  u32 log_rq_stride = tmp_4;
  
#line 71 
  if (0 != 0) 
#line 71 
              tmp_6 = ((((*((__be32 *)srqc + 2U) << 24) | ((*((__be32 *)srqc + 2U) << 8) & 16711680U)) | ((*((__be32 *)srqc + 2U) >> 8) & 65280U)) | (*((__be32 *)srqc + 2U) >> 24)) >> 26UL;
  else {
    __u32 tmp_5;
    
#line 71 
    tmp_5 = __fswab32(*((__be32 *)srqc + 2U));
    
#line 71 
    tmp_6 = tmp_5 >> 26UL;
  }
  
#line 71 
  u32 page_offset = tmp_6;
  
#line 72 
  u32 po_quanta = (unsigned int)(1 << (log_page_size + 4294967290U));
  
#line 73 
  u32 rq_sz = (unsigned int)(1 << ((log_srq_size + log_rq_stride) + 4U));
  
#line 74 
  u32 page_size = (unsigned int)(1 << log_page_size);
  
#line 75 
  u32 rq_sz_po = page_offset * po_quanta + rq_sz;
  
#line 76 
  u32 rq_num_pas = ((rq_sz_po + page_size) + 4294967295U) / page_size;
  
#line 78 
  __retres = (int)(rq_num_pas * 8U);
  
#line 78 
  return __retres;
}


#line 88 
void __compiletime_assert_88(void);


#line 91 
void __compiletime_assert_91(void);


#line 96 
void __compiletime_assert_96(void);


#line 99 
void __compiletime_assert_99(void);


#line 100 
void __compiletime_assert_100(void);


#line 101 
void __compiletime_assert_101(void);


#line 102 
void __compiletime_assert_102(void);


#line 110 
void __compiletime_assert_110(void);


#line 113 
void __compiletime_assert_113(void);


#line 124 
void __compiletime_assert_124(void);


#line 125 
void __compiletime_assert_125(void);


#line 126 
void __compiletime_assert_126(void);


#line 127 
void __compiletime_assert_127(void);


#line 128 
void __compiletime_assert_128(void);


#line 129 
void __compiletime_assert_129(void);


#line 130 
void __compiletime_assert_130(void);


#line 81  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/srq.c"
static void rmpc_srqc_reformat(void *srqc, void *rmpc, bool srqc_to_rmpc)
{
  
#line 83 
  void *wq = rmpc + 48U;
  
#line 85 
  if ((int)srqc_to_rmpc != 0) {
    unsigned int tmp_0;
    
#line 86 
    if (0 != 0) 
#line 86 
                tmp_0 = ((((*((__be32 *)srqc) << 24) | ((*((__be32 *)srqc) << 8) & 16711680U)) | ((*((__be32 *)srqc) >> 8) & 65280U)) | (*((__be32 *)srqc) >> 24)) >> 28UL;
    else {
      __u32 tmp;
      
#line 86 
      tmp = __fswab32(*((__be32 *)srqc));
      
#line 86 
      tmp_0 = tmp >> 28UL;
    }
    
#line 86 
    switch (tmp_0) {
      unsigned int tmp_28;
      case (unsigned int)0: 
#line 87 
      ;
      {
        
#line 88 
        bool __cond = (_Bool)0;
        
#line 88 
        if ((int)__cond != 0) 
#line 88 
                              __compiletime_assert_88(); else ;
      }
      
#line 88 
      if (0 != 0) {
        unsigned int tmp_4;
        unsigned int tmp_6;
        unsigned int tmp_8;
        unsigned int tmp_10;
        
#line 88 
        if (0 != 0) 
#line 88 
                    tmp_4 = ((((*((__be32 *)rmpc) << 24) | ((*((__be32 *)rmpc) << 8) & 16711680U)) | ((*((__be32 *)rmpc) >> 8) & 65280U)) | (*((__be32 *)rmpc) >> 24)) << 24;
        else {
          __u32 tmp_3;
          
#line 88 
          tmp_3 = __fswab32(*((__be32 *)rmpc));
          
#line 88 
          tmp_4 = tmp_3 << 24;
        }
        
#line 88 
        if (0 != 0) 
#line 88 
                    tmp_6 = (((((*((__be32 *)rmpc) << 24) | ((*((__be32 *)rmpc) << 8) & 16711680U)) | ((*((__be32 *)rmpc) >> 8) & 65280U)) | (*((__be32 *)rmpc) >> 24)) << 8) & 16711680U;
        else {
          __u32 tmp_5;
          
#line 88 
          tmp_5 = __fswab32(*((__be32 *)rmpc));
          
#line 88 
          tmp_6 = (tmp_5 << 8) & 16711680U;
        }
        
#line 88 
        if (0 != 0) 
#line 88 
                    tmp_8 = ((((((*((__be32 *)rmpc) << 24) | ((*((__be32 *)rmpc) << 8) & 16711680U)) | ((*((__be32 *)rmpc) >> 8) & 65280U)) | (*((__be32 *)rmpc) >> 24)) >> 8) & 3840U) | 4096U;
        else {
          __u32 tmp_7;
          
#line 88 
          tmp_7 = __fswab32(*((__be32 *)rmpc));
          
#line 88 
          tmp_8 = ((tmp_7 >> 8) & 3840U) | 4096U;
        }
        
#line 88 
        if (0 != 0) 
#line 88 
                    tmp_10 = ((((*((__be32 *)rmpc) << 24) | ((*((__be32 *)rmpc) << 8) & 16711680U)) | ((*((__be32 *)rmpc) >> 8) & 65280U)) | (*((__be32 *)rmpc) >> 24)) >> 24;
        else {
          __u32 tmp_9;
          
#line 88 
          tmp_9 = __fswab32(*((__be32 *)rmpc));
          
#line 88 
          tmp_10 = tmp_9 >> 24;
        }
        
#line 88 
        *((__be32 *)rmpc) = ((tmp_4 | tmp_6) | tmp_8) | tmp_10;
      }
      else {
        __u32 tmp_13;
        unsigned int tmp_12;
        
#line 88 
        if (0 != 0) 
#line 88 
                    tmp_12 = (((((*((__be32 *)rmpc) << 24) | ((*((__be32 *)rmpc) << 8) & 16711680U)) | ((*((__be32 *)rmpc) >> 8) & 65280U)) | (*((__be32 *)rmpc) >> 24)) & 4279238655U) | 1048576U;
        else {
          __u32 tmp_11;
          
#line 88 
          tmp_11 = __fswab32(*((__be32 *)rmpc));
          
#line 88 
          tmp_12 = (tmp_11 & 4279238655U) | 1048576U;
        }
        
#line 88 
        tmp_13 = __fswab32(tmp_12);
        
#line 88 
        *((__be32 *)rmpc) = tmp_13;
      }
      
#line 89 
      goto ldv_35939;
      case (unsigned int)1: 
#line 90 
      ;
      {
        
#line 91 
        bool __cond_0 = (_Bool)0;
        
#line 91 
        if ((int)__cond_0 != 0) 
#line 91 
                                __compiletime_assert_91(); else ;
      }
      
#line 91 
      if (0 != 0) {
        unsigned int tmp_17;
        unsigned int tmp_19;
        unsigned int tmp_21;
        unsigned int tmp_23;
        
#line 91 
        if (0 != 0) 
#line 91 
                    tmp_17 = ((((*((__be32 *)rmpc) << 24) | ((*((__be32 *)rmpc) << 8) & 16711680U)) | ((*((__be32 *)rmpc) >> 8) & 65280U)) | (*((__be32 *)rmpc) >> 24)) << 24;
        else {
          __u32 tmp_16;
          
#line 91 
          tmp_16 = __fswab32(*((__be32 *)rmpc));
          
#line 91 
          tmp_17 = tmp_16 << 24;
        }
        
#line 91 
        if (0 != 0) 
#line 91 
                    tmp_19 = (((((*((__be32 *)rmpc) << 24) | ((*((__be32 *)rmpc) << 8) & 16711680U)) | ((*((__be32 *)rmpc) >> 8) & 65280U)) | (*((__be32 *)rmpc) >> 24)) << 8) & 16711680U;
        else {
          __u32 tmp_18;
          
#line 91 
          tmp_18 = __fswab32(*((__be32 *)rmpc));
          
#line 91 
          tmp_19 = (tmp_18 << 8) & 16711680U;
        }
        
#line 91 
        if (0 != 0) 
#line 91 
                    tmp_21 = ((((((*((__be32 *)rmpc) << 24) | ((*((__be32 *)rmpc) << 8) & 16711680U)) | ((*((__be32 *)rmpc) >> 8) & 65280U)) | (*((__be32 *)rmpc) >> 24)) >> 8) & 3840U) | 12288U;
        else {
          __u32 tmp_20;
          
#line 91 
          tmp_20 = __fswab32(*((__be32 *)rmpc));
          
#line 91 
          tmp_21 = ((tmp_20 >> 8) & 3840U) | 12288U;
        }
        
#line 91 
        if (0 != 0) 
#line 91 
                    tmp_23 = ((((*((__be32 *)rmpc) << 24) | ((*((__be32 *)rmpc) << 8) & 16711680U)) | ((*((__be32 *)rmpc) >> 8) & 65280U)) | (*((__be32 *)rmpc) >> 24)) >> 24;
        else {
          __u32 tmp_22;
          
#line 91 
          tmp_22 = __fswab32(*((__be32 *)rmpc));
          
#line 91 
          tmp_23 = tmp_22 >> 24;
        }
        
#line 91 
        *((__be32 *)rmpc) = ((tmp_17 | tmp_19) | tmp_21) | tmp_23;
      }
      else {
        __u32 tmp_26;
        unsigned int tmp_25;
        
#line 91 
        if (0 != 0) 
#line 91 
                    tmp_25 = (((((*((__be32 *)rmpc) << 24) | ((*((__be32 *)rmpc) << 8) & 16711680U)) | ((*((__be32 *)rmpc) >> 8) & 65280U)) | (*((__be32 *)rmpc) >> 24)) & 4279238655U) | 3145728U;
        else {
          __u32 tmp_24;
          
#line 91 
          tmp_24 = __fswab32(*((__be32 *)rmpc));
          
#line 91 
          tmp_25 = (tmp_24 & 4279238655U) | 3145728U;
        }
        
#line 91 
        tmp_26 = __fswab32(tmp_25);
        
#line 91 
        *((__be32 *)rmpc) = tmp_26;
      }
      
#line 92 
      goto ldv_35939;
      default: 
#line 93 
      ;
      
#line 94 
      if (0 != 0) 
#line 94 
                  tmp_28 = ((((*((__be32 *)srqc) << 24) | ((*((__be32 *)srqc) << 8) & 16711680U)) | ((*((__be32 *)srqc) >> 8) & 65280U)) | (*((__be32 *)srqc) >> 24)) >> 28UL;
      else {
        __u32 tmp_27;
        
#line 94 
        tmp_27 = __fswab32(*((__be32 *)srqc));
        
#line 94 
        tmp_28 = tmp_27 >> 28UL;
      }
      
#line 94 
      printk("\001","rmpc_srqc_reformat",94,tmp_28);
      {
        
#line 96 
        bool __cond_1 = (_Bool)0;
        
#line 96 
        if ((int)__cond_1 != 0) 
#line 96 
                                __compiletime_assert_96(); else ;
      }
      
#line 96 
      if (0 != 0) {
        unsigned int tmp_34;
        unsigned int tmp_36;
        unsigned int tmp_38;
        unsigned int tmp_40;
        unsigned int tmp_42;
        unsigned int tmp_44;
        unsigned int tmp_46;
        unsigned int tmp_48;
        
#line 96 
        if (0 != 0) 
#line 96 
                    tmp_34 = ((((*((__be32 *)rmpc) << 24) | ((*((__be32 *)rmpc) << 8) & 16711680U)) | ((*((__be32 *)rmpc) >> 8) & 65280U)) | (*((__be32 *)rmpc) >> 24)) & 4279238655U;
        else {
          __u32 tmp_33;
          
#line 96 
          tmp_33 = __fswab32(*((__be32 *)rmpc));
          
#line 96 
          tmp_34 = tmp_33 & 4279238655U;
        }
        
#line 96 
        if (0 != 0) 
#line 96 
                    tmp_36 = (((((*((__be32 *)srqc) << 24) | ((*((__be32 *)srqc) << 8) & 16711680U)) | ((*((__be32 *)srqc) >> 8) & 65280U)) | (*((__be32 *)srqc) >> 24)) >> 28UL) << 20UL;
        else {
          __u32 tmp_35;
          
#line 96 
          tmp_35 = __fswab32(*((__be32 *)srqc));
          
#line 96 
          tmp_36 = (tmp_35 >> 28UL) << 20UL;
        }
        
#line 96 
        if (0 != 0) 
#line 96 
                    tmp_38 = ((((*((__be32 *)rmpc) << 24) | ((*((__be32 *)rmpc) << 8) & 16711680U)) | ((*((__be32 *)rmpc) >> 8) & 65280U)) | (*((__be32 *)rmpc) >> 24)) & 4279238655U;
        else {
          __u32 tmp_37;
          
#line 96 
          tmp_37 = __fswab32(*((__be32 *)rmpc));
          
#line 96 
          tmp_38 = tmp_37 & 4279238655U;
        }
        
#line 96 
        if (0 != 0) 
#line 96 
                    tmp_40 = (((((*((__be32 *)srqc) << 24) | ((*((__be32 *)srqc) << 8) & 16711680U)) | ((*((__be32 *)srqc) >> 8) & 65280U)) | (*((__be32 *)srqc) >> 24)) >> 28UL) << 20UL;
        else {
          __u32 tmp_39;
          
#line 96 
          tmp_39 = __fswab32(*((__be32 *)srqc));
          
#line 96 
          tmp_40 = (tmp_39 >> 28UL) << 20UL;
        }
        
#line 96 
        if (0 != 0) 
#line 96 
                    tmp_42 = ((((*((__be32 *)rmpc) << 24) | ((*((__be32 *)rmpc) << 8) & 16711680U)) | ((*((__be32 *)rmpc) >> 8) & 65280U)) | (*((__be32 *)rmpc) >> 24)) & 4279238655U;
        else {
          __u32 tmp_41;
          
#line 96 
          tmp_41 = __fswab32(*((__be32 *)rmpc));
          
#line 96 
          tmp_42 = tmp_41 & 4279238655U;
        }
        
#line 96 
        if (0 != 0) 
#line 96 
                    tmp_44 = (((((*((__be32 *)srqc) << 24) | ((*((__be32 *)srqc) << 8) & 16711680U)) | ((*((__be32 *)srqc) >> 8) & 65280U)) | (*((__be32 *)srqc) >> 24)) >> 28UL) << 20UL;
        else {
          __u32 tmp_43;
          
#line 96 
          tmp_43 = __fswab32(*((__be32 *)srqc));
          
#line 96 
          tmp_44 = (tmp_43 >> 28UL) << 20UL;
        }
        
#line 96 
        if (0 != 0) 
#line 96 
                    tmp_46 = ((((*((__be32 *)rmpc) << 24) | ((*((__be32 *)rmpc) << 8) & 16711680U)) | ((*((__be32 *)rmpc) >> 8) & 65280U)) | (*((__be32 *)rmpc) >> 24)) & 4279238655U;
        else {
          __u32 tmp_45;
          
#line 96 
          tmp_45 = __fswab32(*((__be32 *)rmpc));
          
#line 96 
          tmp_46 = tmp_45 & 4279238655U;
        }
        
#line 96 
        if (0 != 0) 
#line 96 
                    tmp_48 = (((((*((__be32 *)srqc) << 24) | ((*((__be32 *)srqc) << 8) & 16711680U)) | ((*((__be32 *)srqc) >> 8) & 65280U)) | (*((__be32 *)srqc) >> 24)) >> 28UL) << 20UL;
        else {
          __u32 tmp_47;
          
#line 96 
          tmp_47 = __fswab32(*((__be32 *)srqc));
          
#line 96 
          tmp_48 = (tmp_47 >> 28UL) << 20UL;
        }
        
#line 96 
        *((__be32 *)rmpc) = ((((tmp_34 | tmp_36) << 24) | (((tmp_38 | tmp_40) << 8) & 16711680U)) | (((tmp_42 | tmp_44) >> 8) & 65280U)) | ((tmp_46 | tmp_48) >> 24);
      }
      else {
        __u32 tmp_53;
        unsigned int tmp_50;
        unsigned int tmp_52;
        
#line 96 
        if (0 != 0) 
#line 96 
                    tmp_50 = ((((*((__be32 *)rmpc) << 24) | ((*((__be32 *)rmpc) << 8) & 16711680U)) | ((*((__be32 *)rmpc) >> 8) & 65280U)) | (*((__be32 *)rmpc) >> 24)) & 4279238655U;
        else {
          __u32 tmp_49;
          
#line 96 
          tmp_49 = __fswab32(*((__be32 *)rmpc));
          
#line 96 
          tmp_50 = tmp_49 & 4279238655U;
        }
        
#line 96 
        if (0 != 0) 
#line 96 
                    tmp_52 = (((((*((__be32 *)srqc) << 24) | ((*((__be32 *)srqc) << 8) & 16711680U)) | ((*((__be32 *)srqc) >> 8) & 65280U)) | (*((__be32 *)srqc) >> 24)) >> 28UL) << 20UL;
        else {
          __u32 tmp_51;
          
#line 96 
          tmp_51 = __fswab32(*((__be32 *)srqc));
          
#line 96 
          tmp_52 = (tmp_51 >> 28UL) << 20UL;
        }
        
#line 96 
        tmp_53 = __fswab32(tmp_50 | tmp_52);
        
#line 96 
        *((__be32 *)rmpc) = tmp_53;
      }
    }
    ldv_35939: 
#line 99 
    ;
    {
      
#line 99 
      bool __cond_2 = (_Bool)0;
      
#line 99 
      if ((int)__cond_2 != 0) 
#line 99 
                              __compiletime_assert_99(); else ;
    }
    
#line 99 
    if (0 != 0) {
      unsigned int tmp_59;
      unsigned int tmp_61;
      unsigned int tmp_63;
      unsigned int tmp_65;
      unsigned int tmp_67;
      unsigned int tmp_69;
      unsigned int tmp_71;
      unsigned int tmp_73;
      
#line 99 
      if (0 != 0) 
#line 99 
                  tmp_59 = ((((*((__be32 *)wq) << 24) | ((*((__be32 *)wq) << 8) & 16711680U)) | ((*((__be32 *)wq) >> 8) & 65280U)) | (*((__be32 *)wq) >> 24)) & 4160749567U;
      else {
        __u32 tmp_58;
        
#line 99 
        tmp_58 = __fswab32(*((__be32 *)wq));
        
#line 99 
        tmp_59 = tmp_58 & 4160749567U;
      }
      
#line 99 
      if (0 != 0) 
#line 99 
                  tmp_61 = (((((*((__be32 *)srqc + 1U) << 24) | ((*((__be32 *)srqc + 1U) << 8) & 16711680U)) | ((*((__be32 *)srqc + 1U) >> 8) & 65280U)) | (*((__be32 *)srqc + 1U) >> 24)) >> 31UL) << 27UL;
      else {
        __u32 tmp_60;
        
#line 99 
        tmp_60 = __fswab32(*((__be32 *)srqc + 1U));
        
#line 99 
        tmp_61 = (tmp_60 >> 31UL) << 27UL;
      }
      
#line 99 
      if (0 != 0) 
#line 99 
                  tmp_63 = ((((*((__be32 *)wq) << 24) | ((*((__be32 *)wq) << 8) & 16711680U)) | ((*((__be32 *)wq) >> 8) & 65280U)) | (*((__be32 *)wq) >> 24)) & 4160749567U;
      else {
        __u32 tmp_62;
        
#line 99 
        tmp_62 = __fswab32(*((__be32 *)wq));
        
#line 99 
        tmp_63 = tmp_62 & 4160749567U;
      }
      
#line 99 
      if (0 != 0) 
#line 99 
                  tmp_65 = (((((*((__be32 *)srqc + 1U) << 24) | ((*((__be32 *)srqc + 1U) << 8) & 16711680U)) | ((*((__be32 *)srqc + 1U) >> 8) & 65280U)) | (*((__be32 *)srqc + 1U) >> 24)) >> 31UL) << 27UL;
      else {
        __u32 tmp_64;
        
#line 99 
        tmp_64 = __fswab32(*((__be32 *)srqc + 1U));
        
#line 99 
        tmp_65 = (tmp_64 >> 31UL) << 27UL;
      }
      
#line 99 
      if (0 != 0) 
#line 99 
                  tmp_67 = ((((*((__be32 *)wq) << 24) | ((*((__be32 *)wq) << 8) & 16711680U)) | ((*((__be32 *)wq) >> 8) & 65280U)) | (*((__be32 *)wq) >> 24)) & 4160749567U;
      else {
        __u32 tmp_66;
        
#line 99 
        tmp_66 = __fswab32(*((__be32 *)wq));
        
#line 99 
        tmp_67 = tmp_66 & 4160749567U;
      }
      
#line 99 
      if (0 != 0) 
#line 99 
                  tmp_69 = (((((*((__be32 *)srqc + 1U) << 24) | ((*((__be32 *)srqc + 1U) << 8) & 16711680U)) | ((*((__be32 *)srqc + 1U) >> 8) & 65280U)) | (*((__be32 *)srqc + 1U) >> 24)) >> 31UL) << 27UL;
      else {
        __u32 tmp_68;
        
#line 99 
        tmp_68 = __fswab32(*((__be32 *)srqc + 1U));
        
#line 99 
        tmp_69 = (tmp_68 >> 31UL) << 27UL;
      }
      
#line 99 
      if (0 != 0) 
#line 99 
                  tmp_71 = ((((*((__be32 *)wq) << 24) | ((*((__be32 *)wq) << 8) & 16711680U)) | ((*((__be32 *)wq) >> 8) & 65280U)) | (*((__be32 *)wq) >> 24)) & 4160749567U;
      else {
        __u32 tmp_70;
        
#line 99 
        tmp_70 = __fswab32(*((__be32 *)wq));
        
#line 99 
        tmp_71 = tmp_70 & 4160749567U;
      }
      
#line 99 
      if (0 != 0) 
#line 99 
                  tmp_73 = (((((*((__be32 *)srqc + 1U) << 24) | ((*((__be32 *)srqc + 1U) << 8) & 16711680U)) | ((*((__be32 *)srqc + 1U) >> 8) & 65280U)) | (*((__be32 *)srqc + 1U) >> 24)) >> 31UL) << 27UL;
      else {
        __u32 tmp_72;
        
#line 99 
        tmp_72 = __fswab32(*((__be32 *)srqc + 1U));
        
#line 99 
        tmp_73 = (tmp_72 >> 31UL) << 27UL;
      }
      
#line 99 
      *((__be32 *)wq) = ((((tmp_59 | tmp_61) << 24) | (((tmp_63 | tmp_65) << 8) & 16711680U)) | (((tmp_67 | tmp_69) >> 8) & 65280U)) | ((tmp_71 | tmp_73) >> 24);
    }
    else {
      __u32 tmp_78;
      unsigned int tmp_75;
      unsigned int tmp_77;
      
#line 99 
      if (0 != 0) 
#line 99 
                  tmp_75 = ((((*((__be32 *)wq) << 24) | ((*((__be32 *)wq) << 8) & 16711680U)) | ((*((__be32 *)wq) >> 8) & 65280U)) | (*((__be32 *)wq) >> 24)) & 4160749567U;
      else {
        __u32 tmp_74;
        
#line 99 
        tmp_74 = __fswab32(*((__be32 *)wq));
        
#line 99 
        tmp_75 = tmp_74 & 4160749567U;
      }
      
#line 99 
      if (0 != 0) 
#line 99 
                  tmp_77 = (((((*((__be32 *)srqc + 1U) << 24) | ((*((__be32 *)srqc + 1U) << 8) & 16711680U)) | ((*((__be32 *)srqc + 1U) >> 8) & 65280U)) | (*((__be32 *)srqc + 1U) >> 24)) >> 31UL) << 27UL;
      else {
        __u32 tmp_76;
        
#line 99 
        tmp_76 = __fswab32(*((__be32 *)srqc + 1U));
        
#line 99 
        tmp_77 = (tmp_76 >> 31UL) << 27UL;
      }
      
#line 99 
      tmp_78 = __fswab32(tmp_75 | tmp_77);
      
#line 99 
      *((__be32 *)wq) = tmp_78;
    }
    {
      
#line 100 
      bool __cond_3 = (_Bool)0;
      
#line 100 
      if ((int)__cond_3 != 0) 
#line 100 
                              __compiletime_assert_100(); else ;
    }
    
#line 100 
    if (0 != 0) {
      unsigned int tmp_84;
      unsigned int tmp_86;
      unsigned int tmp_88;
      unsigned int tmp_90;
      unsigned int tmp_92;
      unsigned int tmp_94;
      unsigned int tmp_96;
      unsigned int tmp_98;
      
#line 100 
      if (0 != 0) 
#line 100 
                  tmp_84 = ((((*((__be32 *)wq + 8U) << 24) | ((*((__be32 *)wq + 8U) << 8) & 16711680U)) | ((*((__be32 *)wq + 8U) >> 8) & 65280U)) | (*((__be32 *)wq + 8U) >> 24)) & 4294959359U;
      else {
        __u32 tmp_83;
        
#line 100 
        tmp_83 = __fswab32(*((__be32 *)wq + 8U));
        
#line 100 
        tmp_84 = tmp_83 & 4294959359U;
      }
      
#line 100 
      if (0 != 0) 
#line 100 
                  tmp_86 = ((((((*((__be32 *)srqc + 4U) << 24) | ((*((__be32 *)srqc + 4U) << 8) & 16711680U)) | ((*((__be32 *)srqc + 4U) >> 8) & 65280U)) | (*((__be32 *)srqc + 4U) >> 24)) >> 24UL) << 8UL) & 7936U;
      else {
        __u32 tmp_85;
        
#line 100 
        tmp_85 = __fswab32(*((__be32 *)srqc + 4U));
        
#line 100 
        tmp_86 = ((tmp_85 >> 24UL) << 8UL) & 7936U;
      }
      
#line 100 
      if (0 != 0) 
#line 100 
                  tmp_88 = ((((*((__be32 *)wq + 8U) << 24) | ((*((__be32 *)wq + 8U) << 8) & 16711680U)) | ((*((__be32 *)wq + 8U) >> 8) & 65280U)) | (*((__be32 *)wq + 8U) >> 24)) & 4294959359U;
      else {
        __u32 tmp_87;
        
#line 100 
        tmp_87 = __fswab32(*((__be32 *)wq + 8U));
        
#line 100 
        tmp_88 = tmp_87 & 4294959359U;
      }
      
#line 100 
      if (0 != 0) 
#line 100 
                  tmp_90 = ((((((*((__be32 *)srqc + 4U) << 24) | ((*((__be32 *)srqc + 4U) << 8) & 16711680U)) | ((*((__be32 *)srqc + 4U) >> 8) & 65280U)) | (*((__be32 *)srqc + 4U) >> 24)) >> 24UL) << 8UL) & 7936U;
      else {
        __u32 tmp_89;
        
#line 100 
        tmp_89 = __fswab32(*((__be32 *)srqc + 4U));
        
#line 100 
        tmp_90 = ((tmp_89 >> 24UL) << 8UL) & 7936U;
      }
      
#line 100 
      if (0 != 0) 
#line 100 
                  tmp_92 = ((((*((__be32 *)wq + 8U) << 24) | ((*((__be32 *)wq + 8U) << 8) & 16711680U)) | ((*((__be32 *)wq + 8U) >> 8) & 65280U)) | (*((__be32 *)wq + 8U) >> 24)) & 4294959359U;
      else {
        __u32 tmp_91;
        
#line 100 
        tmp_91 = __fswab32(*((__be32 *)wq + 8U));
        
#line 100 
        tmp_92 = tmp_91 & 4294959359U;
      }
      
#line 100 
      if (0 != 0) 
#line 100 
                  tmp_94 = ((((((*((__be32 *)srqc + 4U) << 24) | ((*((__be32 *)srqc + 4U) << 8) & 16711680U)) | ((*((__be32 *)srqc + 4U) >> 8) & 65280U)) | (*((__be32 *)srqc + 4U) >> 24)) >> 24UL) << 8UL) & 7936U;
      else {
        __u32 tmp_93;
        
#line 100 
        tmp_93 = __fswab32(*((__be32 *)srqc + 4U));
        
#line 100 
        tmp_94 = ((tmp_93 >> 24UL) << 8UL) & 7936U;
      }
      
#line 100 
      if (0 != 0) 
#line 100 
                  tmp_96 = ((((*((__be32 *)wq + 8U) << 24) | ((*((__be32 *)wq + 8U) << 8) & 16711680U)) | ((*((__be32 *)wq + 8U) >> 8) & 65280U)) | (*((__be32 *)wq + 8U) >> 24)) & 4294959359U;
      else {
        __u32 tmp_95;
        
#line 100 
        tmp_95 = __fswab32(*((__be32 *)wq + 8U));
        
#line 100 
        tmp_96 = tmp_95 & 4294959359U;
      }
      
#line 100 
      if (0 != 0) 
#line 100 
                  tmp_98 = ((((((*((__be32 *)srqc + 4U) << 24) | ((*((__be32 *)srqc + 4U) << 8) & 16711680U)) | ((*((__be32 *)srqc + 4U) >> 8) & 65280U)) | (*((__be32 *)srqc + 4U) >> 24)) >> 24UL) << 8UL) & 7936U;
      else {
        __u32 tmp_97;
        
#line 100 
        tmp_97 = __fswab32(*((__be32 *)srqc + 4U));
        
#line 100 
        tmp_98 = ((tmp_97 >> 24UL) << 8UL) & 7936U;
      }
      
#line 100 
      *((__be32 *)wq + 8U) = ((((tmp_84 | tmp_86) << 24) | (((tmp_88 | tmp_90) << 8) & 16711680U)) | (((tmp_92 | tmp_94) >> 8) & 65280U)) | ((tmp_96 | tmp_98) >> 24);
    }
    else {
      __u32 tmp_103;
      unsigned int tmp_100;
      unsigned int tmp_102;
      
#line 100 
      if (0 != 0) 
#line 100 
                  tmp_100 = ((((*((__be32 *)wq + 8U) << 24) | ((*((__be32 *)wq + 8U) << 8) & 16711680U)) | ((*((__be32 *)wq + 8U) >> 8) & 65280U)) | (*((__be32 *)wq + 8U) >> 24)) & 4294959359U;
      else {
        __u32 tmp_99;
        
#line 100 
        tmp_99 = __fswab32(*((__be32 *)wq + 8U));
        
#line 100 
        tmp_100 = tmp_99 & 4294959359U;
      }
      
#line 100 
      if (0 != 0) 
#line 100 
                  tmp_102 = ((((((*((__be32 *)srqc + 4U) << 24) | ((*((__be32 *)srqc + 4U) << 8) & 16711680U)) | ((*((__be32 *)srqc + 4U) >> 8) & 65280U)) | (*((__be32 *)srqc + 4U) >> 24)) >> 24UL) << 8UL) & 7936U;
      else {
        __u32 tmp_101;
        
#line 100 
        tmp_101 = __fswab32(*((__be32 *)srqc + 4U));
        
#line 100 
        tmp_102 = ((tmp_101 >> 24UL) << 8UL) & 7936U;
      }
      
#line 100 
      tmp_103 = __fswab32(tmp_100 | tmp_102);
      
#line 100 
      *((__be32 *)wq + 8U) = tmp_103;
    }
    {
      
#line 101 
      bool __cond_4 = (_Bool)0;
      
#line 101 
      if ((int)__cond_4 != 0) 
#line 101 
                              __compiletime_assert_101(); else ;
    }
    
#line 101 
    if (0 != 0) {
      unsigned int tmp_109;
      unsigned int tmp_111;
      unsigned int tmp_113;
      unsigned int tmp_115;
      unsigned int tmp_117;
      unsigned int tmp_119;
      unsigned int tmp_121;
      unsigned int tmp_123;
      
#line 101 
      if (0 != 0) 
#line 101 
                  tmp_109 = ((((*((__be32 *)wq + 8U) << 24) | ((*((__be32 *)wq + 8U) << 8) & 16711680U)) | ((*((__be32 *)wq + 8U) >> 8) & 65280U)) | (*((__be32 *)wq + 8U) >> 24)) & 4293984255U;
      else {
        __u32 tmp_108;
        
#line 101 
        tmp_108 = __fswab32(*((__be32 *)wq + 8U));
        
#line 101 
        tmp_109 = tmp_108 & 4293984255U;
      }
      
#line 101 
      if (0 != 0) 
#line 101 
                  tmp_111 = ((((((((*((__be32 *)srqc + 1U) << 24) | ((*((__be32 *)srqc + 1U) << 8) & 16711680U)) | ((*((__be32 *)srqc + 1U) >> 8) & 65280U)) | (*((__be32 *)srqc + 1U) >> 24)) >> 24UL) & 7U) + 4U) << 16UL) & 983040U;
      else {
        __u32 tmp_110;
        
#line 101 
        tmp_110 = __fswab32(*((__be32 *)srqc + 1U));
        
#line 101 
        tmp_111 = ((((tmp_110 >> 24UL) & 7U) + 4U) << 16UL) & 983040U;
      }
      
#line 101 
      if (0 != 0) 
#line 101 
                  tmp_113 = ((((*((__be32 *)wq + 8U) << 24) | ((*((__be32 *)wq + 8U) << 8) & 16711680U)) | ((*((__be32 *)wq + 8U) >> 8) & 65280U)) | (*((__be32 *)wq + 8U) >> 24)) & 4293984255U;
      else {
        __u32 tmp_112;
        
#line 101 
        tmp_112 = __fswab32(*((__be32 *)wq + 8U));
        
#line 101 
        tmp_113 = tmp_112 & 4293984255U;
      }
      
#line 101 
      if (0 != 0) 
#line 101 
                  tmp_115 = ((((((((*((__be32 *)srqc + 1U) << 24) | ((*((__be32 *)srqc + 1U) << 8) & 16711680U)) | ((*((__be32 *)srqc + 1U) >> 8) & 65280U)) | (*((__be32 *)srqc + 1U) >> 24)) >> 24UL) & 7U) + 4U) << 16UL) & 983040U;
      else {
        __u32 tmp_114;
        
#line 101 
        tmp_114 = __fswab32(*((__be32 *)srqc + 1U));
        
#line 101 
        tmp_115 = ((((tmp_114 >> 24UL) & 7U) + 4U) << 16UL) & 983040U;
      }
      
#line 101 
      if (0 != 0) 
#line 101 
                  tmp_117 = ((((*((__be32 *)wq + 8U) << 24) | ((*((__be32 *)wq + 8U) << 8) & 16711680U)) | ((*((__be32 *)wq + 8U) >> 8) & 65280U)) | (*((__be32 *)wq + 8U) >> 24)) & 4293984255U;
      else {
        __u32 tmp_116;
        
#line 101 
        tmp_116 = __fswab32(*((__be32 *)wq + 8U));
        
#line 101 
        tmp_117 = tmp_116 & 4293984255U;
      }
      
#line 101 
      if (0 != 0) 
#line 101 
                  tmp_119 = ((((((((*((__be32 *)srqc + 1U) << 24) | ((*((__be32 *)srqc + 1U) << 8) & 16711680U)) | ((*((__be32 *)srqc + 1U) >> 8) & 65280U)) | (*((__be32 *)srqc + 1U) >> 24)) >> 24UL) & 7U) + 4U) << 16UL) & 983040U;
      else {
        __u32 tmp_118;
        
#line 101 
        tmp_118 = __fswab32(*((__be32 *)srqc + 1U));
        
#line 101 
        tmp_119 = ((((tmp_118 >> 24UL) & 7U) + 4U) << 16UL) & 983040U;
      }
      
#line 101 
      if (0 != 0) 
#line 101 
                  tmp_121 = ((((*((__be32 *)wq + 8U) << 24) | ((*((__be32 *)wq + 8U) << 8) & 16711680U)) | ((*((__be32 *)wq + 8U) >> 8) & 65280U)) | (*((__be32 *)wq + 8U) >> 24)) & 4293984255U;
      else {
        __u32 tmp_120;
        
#line 101 
        tmp_120 = __fswab32(*((__be32 *)wq + 8U));
        
#line 101 
        tmp_121 = tmp_120 & 4293984255U;
      }
      
#line 101 
      if (0 != 0) 
#line 101 
                  tmp_123 = ((((((((*((__be32 *)srqc + 1U) << 24) | ((*((__be32 *)srqc + 1U) << 8) & 16711680U)) | ((*((__be32 *)srqc + 1U) >> 8) & 65280U)) | (*((__be32 *)srqc + 1U) >> 24)) >> 24UL) & 7U) + 4U) << 16UL) & 983040U;
      else {
        __u32 tmp_122;
        
#line 101 
        tmp_122 = __fswab32(*((__be32 *)srqc + 1U));
        
#line 101 
        tmp_123 = ((((tmp_122 >> 24UL) & 7U) + 4U) << 16UL) & 983040U;
      }
      
#line 101 
      *((__be32 *)wq + 8U) = ((((tmp_109 | tmp_111) << 24) | (((tmp_113 | tmp_115) << 8) & 16711680U)) | (((tmp_117 | tmp_119) >> 8) & 65280U)) | ((tmp_121 | tmp_123) >> 24);
    }
    else {
      __u32 tmp_128;
      unsigned int tmp_125;
      unsigned int tmp_127;
      
#line 101 
      if (0 != 0) 
#line 101 
                  tmp_125 = ((((*((__be32 *)wq + 8U) << 24) | ((*((__be32 *)wq + 8U) << 8) & 16711680U)) | ((*((__be32 *)wq + 8U) >> 8) & 65280U)) | (*((__be32 *)wq + 8U) >> 24)) & 4293984255U;
      else {
        __u32 tmp_124;
        
#line 101 
        tmp_124 = __fswab32(*((__be32 *)wq + 8U));
        
#line 101 
        tmp_125 = tmp_124 & 4293984255U;
      }
      
#line 101 
      if (0 != 0) 
#line 101 
                  tmp_127 = ((((((((*((__be32 *)srqc + 1U) << 24) | ((*((__be32 *)srqc + 1U) << 8) & 16711680U)) | ((*((__be32 *)srqc + 1U) >> 8) & 65280U)) | (*((__be32 *)srqc + 1U) >> 24)) >> 24UL) & 7U) + 4U) << 16UL) & 983040U;
      else {
        __u32 tmp_126;
        
#line 101 
        tmp_126 = __fswab32(*((__be32 *)srqc + 1U));
        
#line 101 
        tmp_127 = ((((tmp_126 >> 24UL) & 7U) + 4U) << 16UL) & 983040U;
      }
      
#line 101 
      tmp_128 = __fswab32(tmp_125 | tmp_127);
      
#line 101 
      *((__be32 *)wq + 8U) = tmp_128;
    }
    {
      
#line 102 
      bool __cond_5 = (_Bool)0;
      
#line 102 
      if ((int)__cond_5 != 0) 
#line 102 
                              __compiletime_assert_102(); else ;
    }
    
#line 102 
    if (0 != 0) {
      unsigned int tmp_134;
      unsigned int tmp_136;
      unsigned int tmp_138;
      unsigned int tmp_140;
      unsigned int tmp_142;
      unsigned int tmp_144;
      unsigned int tmp_146;
      unsigned int tmp_148;
      
#line 102 
      if (0 != 0) 
#line 102 
                  tmp_134 = ((((*((__be32 *)wq + 8U) << 24) | ((*((__be32 *)wq + 8U) << 8) & 16711680U)) | ((*((__be32 *)wq + 8U) >> 8) & 65280U)) | (*((__be32 *)wq + 8U) >> 24)) & 4294967264U;
      else {
        __u32 tmp_133;
        
#line 102 
        tmp_133 = __fswab32(*((__be32 *)wq + 8U));
        
#line 102 
        tmp_134 = tmp_133 & 4294967264U;
      }
      
#line 102 
      if (0 != 0) 
#line 102 
                  tmp_136 = (((((*((__be32 *)srqc) << 24) | ((*((__be32 *)srqc) << 8) & 16711680U)) | ((*((__be32 *)srqc) >> 8) & 65280U)) | (*((__be32 *)srqc) >> 24)) >> 24UL) & 15U;
      else {
        __u32 tmp_135;
        
#line 102 
        tmp_135 = __fswab32(*((__be32 *)srqc));
        
#line 102 
        tmp_136 = (tmp_135 >> 24UL) & 15U;
      }
      
#line 102 
      if (0 != 0) 
#line 102 
                  tmp_138 = ((((*((__be32 *)wq + 8U) << 24) | ((*((__be32 *)wq + 8U) << 8) & 16711680U)) | ((*((__be32 *)wq + 8U) >> 8) & 65280U)) | (*((__be32 *)wq + 8U) >> 24)) & 4294967264U;
      else {
        __u32 tmp_137;
        
#line 102 
        tmp_137 = __fswab32(*((__be32 *)wq + 8U));
        
#line 102 
        tmp_138 = tmp_137 & 4294967264U;
      }
      
#line 102 
      if (0 != 0) 
#line 102 
                  tmp_140 = (((((*((__be32 *)srqc) << 24) | ((*((__be32 *)srqc) << 8) & 16711680U)) | ((*((__be32 *)srqc) >> 8) & 65280U)) | (*((__be32 *)srqc) >> 24)) >> 24UL) & 15U;
      else {
        __u32 tmp_139;
        
#line 102 
        tmp_139 = __fswab32(*((__be32 *)srqc));
        
#line 102 
        tmp_140 = (tmp_139 >> 24UL) & 15U;
      }
      
#line 102 
      if (0 != 0) 
#line 102 
                  tmp_142 = ((((*((__be32 *)wq + 8U) << 24) | ((*((__be32 *)wq + 8U) << 8) & 16711680U)) | ((*((__be32 *)wq + 8U) >> 8) & 65280U)) | (*((__be32 *)wq + 8U) >> 24)) & 4294967264U;
      else {
        __u32 tmp_141;
        
#line 102 
        tmp_141 = __fswab32(*((__be32 *)wq + 8U));
        
#line 102 
        tmp_142 = tmp_141 & 4294967264U;
      }
      
#line 102 
      if (0 != 0) 
#line 102 
                  tmp_144 = (((((*((__be32 *)srqc) << 24) | ((*((__be32 *)srqc) << 8) & 16711680U)) | ((*((__be32 *)srqc) >> 8) & 65280U)) | (*((__be32 *)srqc) >> 24)) >> 24UL) & 15U;
      else {
        __u32 tmp_143;
        
#line 102 
        tmp_143 = __fswab32(*((__be32 *)srqc));
        
#line 102 
        tmp_144 = (tmp_143 >> 24UL) & 15U;
      }
      
#line 102 
      if (0 != 0) 
#line 102 
                  tmp_146 = ((((*((__be32 *)wq + 8U) << 24) | ((*((__be32 *)wq + 8U) << 8) & 16711680U)) | ((*((__be32 *)wq + 8U) >> 8) & 65280U)) | (*((__be32 *)wq + 8U) >> 24)) & 4294967264U;
      else {
        __u32 tmp_145;
        
#line 102 
        tmp_145 = __fswab32(*((__be32 *)wq + 8U));
        
#line 102 
        tmp_146 = tmp_145 & 4294967264U;
      }
      
#line 102 
      if (0 != 0) 
#line 102 
                  tmp_148 = (((((*((__be32 *)srqc) << 24) | ((*((__be32 *)srqc) << 8) & 16711680U)) | ((*((__be32 *)srqc) >> 8) & 65280U)) | (*((__be32 *)srqc) >> 24)) >> 24UL) & 15U;
      else {
        __u32 tmp_147;
        
#line 102 
        tmp_147 = __fswab32(*((__be32 *)srqc));
        
#line 102 
        tmp_148 = (tmp_147 >> 24UL) & 15U;
      }
      
#line 102 
      *((__be32 *)wq + 8U) = ((((tmp_134 | tmp_136) << 24) | (((tmp_138 | tmp_140) << 8) & 16711680U)) | (((tmp_142 | tmp_144) >> 8) & 65280U)) | ((tmp_146 | tmp_148) >> 24);
    }
    else {
      __u32 tmp_153;
      unsigned int tmp_150;
      unsigned int tmp_152;
      
#line 102 
      if (0 != 0) 
#line 102 
                  tmp_150 = ((((*((__be32 *)wq + 8U) << 24) | ((*((__be32 *)wq + 8U) << 8) & 16711680U)) | ((*((__be32 *)wq + 8U) >> 8) & 65280U)) | (*((__be32 *)wq + 8U) >> 24)) & 4294967264U;
      else {
        __u32 tmp_149;
        
#line 102 
        tmp_149 = __fswab32(*((__be32 *)wq + 8U));
        
#line 102 
        tmp_150 = tmp_149 & 4294967264U;
      }
      
#line 102 
      if (0 != 0) 
#line 102 
                  tmp_152 = (((((*((__be32 *)srqc) << 24) | ((*((__be32 *)srqc) << 8) & 16711680U)) | ((*((__be32 *)srqc) >> 8) & 65280U)) | (*((__be32 *)srqc) >> 24)) >> 24UL) & 15U;
      else {
        __u32 tmp_151;
        
#line 102 
        tmp_151 = __fswab32(*((__be32 *)srqc));
        
#line 102 
        tmp_152 = (tmp_151 >> 24UL) & 15U;
      }
      
#line 102 
      tmp_153 = __fswab32(tmp_150 | tmp_152);
      
#line 102 
      *((__be32 *)wq + 8U) = tmp_153;
    }
    {
      
#line 103 
      bool __cond_6 = (_Bool)0;
      
#line 103 
      if ((int)__cond_6 != 0) 
#line 103 
                              __compiletime_assert_103(); else ;
    }
    
#line 103 
    if (0 != 0) {
      unsigned int tmp_159;
      unsigned int tmp_161;
      unsigned int tmp_163;
      unsigned int tmp_165;
      unsigned int tmp_167;
      unsigned int tmp_169;
      unsigned int tmp_171;
      unsigned int tmp_173;
      
#line 103 
      if (0 != 0) 
#line 103 
                  tmp_159 = ((((*((__be32 *)wq + 1U) << 24) | ((*((__be32 *)wq + 1U) << 8) & 16711680U)) | ((*((__be32 *)wq + 1U) >> 8) & 65280U)) | (*((__be32 *)wq + 1U) >> 24)) & 4292935679U;
      else {
        __u32 tmp_158;
        
#line 103 
        tmp_158 = __fswab32(*((__be32 *)wq + 1U));
        
#line 103 
        tmp_159 = tmp_158 & 4292935679U;
      }
      
#line 103 
      if (0 != 0) 
#line 103 
                  tmp_161 = ((((((*((__be32 *)srqc + 2U) << 24) | ((*((__be32 *)srqc + 2U) << 8) & 16711680U)) | ((*((__be32 *)srqc + 2U) >> 8) & 65280U)) | (*((__be32 *)srqc + 2U) >> 24)) >> 26UL) << 16UL) & 2031616U;
      else {
        __u32 tmp_160;
        
#line 103 
        tmp_160 = __fswab32(*((__be32 *)srqc + 2U));
        
#line 103 
        tmp_161 = ((tmp_160 >> 26UL) << 16UL) & 2031616U;
      }
      
#line 103 
      if (0 != 0) 
#line 103 
                  tmp_163 = ((((*((__be32 *)wq + 1U) << 24) | ((*((__be32 *)wq + 1U) << 8) & 16711680U)) | ((*((__be32 *)wq + 1U) >> 8) & 65280U)) | (*((__be32 *)wq + 1U) >> 24)) & 4292935679U;
      else {
        __u32 tmp_162;
        
#line 103 
        tmp_162 = __fswab32(*((__be32 *)wq + 1U));
        
#line 103 
        tmp_163 = tmp_162 & 4292935679U;
      }
      
#line 103 
      if (0 != 0) 
#line 103 
                  tmp_165 = ((((((*((__be32 *)srqc + 2U) << 24) | ((*((__be32 *)srqc + 2U) << 8) & 16711680U)) | ((*((__be32 *)srqc + 2U) >> 8) & 65280U)) | (*((__be32 *)srqc + 2U) >> 24)) >> 26UL) << 16UL) & 2031616U;
      else {
        __u32 tmp_164;
        
#line 103 
        tmp_164 = __fswab32(*((__be32 *)srqc + 2U));
        
#line 103 
        tmp_165 = ((tmp_164 >> 26UL) << 16UL) & 2031616U;
      }
      
#line 103 
      if (0 != 0) 
#line 103 
                  tmp_167 = ((((*((__be32 *)wq + 1U) << 24) | ((*((__be32 *)wq + 1U) << 8) & 16711680U)) | ((*((__be32 *)wq + 1U) >> 8) & 65280U)) | (*((__be32 *)wq + 1U) >> 24)) & 4292935679U;
      else {
        __u32 tmp_166;
        
#line 103 
        tmp_166 = __fswab32(*((__be32 *)wq + 1U));
        
#line 103 
        tmp_167 = tmp_166 & 4292935679U;
      }
      
#line 103 
      if (0 != 0) 
#line 103 
                  tmp_169 = ((((((*((__be32 *)srqc + 2U) << 24) | ((*((__be32 *)srqc + 2U) << 8) & 16711680U)) | ((*((__be32 *)srqc + 2U) >> 8) & 65280U)) | (*((__be32 *)srqc + 2U) >> 24)) >> 26UL) << 16UL) & 2031616U;
      else {
        __u32 tmp_168;
        
#line 103 
        tmp_168 = __fswab32(*((__be32 *)srqc + 2U));
        
#line 103 
        tmp_169 = ((tmp_168 >> 26UL) << 16UL) & 2031616U;
      }
      
#line 103 
      if (0 != 0) 
#line 103 
                  tmp_171 = ((((*((__be32 *)wq + 1U) << 24) | ((*((__be32 *)wq + 1U) << 8) & 16711680U)) | ((*((__be32 *)wq + 1U) >> 8) & 65280U)) | (*((__be32 *)wq + 1U) >> 24)) & 4292935679U;
      else {
        __u32 tmp_170;
        
#line 103 
        tmp_170 = __fswab32(*((__be32 *)wq + 1U));
        
#line 103 
        tmp_171 = tmp_170 & 4292935679U;
      }
      
#line 103 
      if (0 != 0) 
#line 103 
                  tmp_173 = ((((((*((__be32 *)srqc + 2U) << 24) | ((*((__be32 *)srqc + 2U) << 8) & 16711680U)) | ((*((__be32 *)srqc + 2U) >> 8) & 65280U)) | (*((__be32 *)srqc + 2U) >> 24)) >> 26UL) << 16UL) & 2031616U;
      else {
        __u32 tmp_172;
        
#line 103 
        tmp_172 = __fswab32(*((__be32 *)srqc + 2U));
        
#line 103 
        tmp_173 = ((tmp_172 >> 26UL) << 16UL) & 2031616U;
      }
      
#line 103 
      *((__be32 *)wq + 1U) = ((((tmp_159 | tmp_161) << 24) | (((tmp_163 | tmp_165) << 8) & 16711680U)) | (((tmp_167 | tmp_169) >> 8) & 65280U)) | ((tmp_171 | tmp_173) >> 24);
    }
    else {
      __u32 tmp_178;
      unsigned int tmp_175;
      unsigned int tmp_177;
      
#line 103 
      if (0 != 0) 
#line 103 
                  tmp_175 = ((((*((__be32 *)wq + 1U) << 24) | ((*((__be32 *)wq + 1U) << 8) & 16711680U)) | ((*((__be32 *)wq + 1U) >> 8) & 65280U)) | (*((__be32 *)wq + 1U) >> 24)) & 4292935679U;
      else {
        __u32 tmp_174;
        
#line 103 
        tmp_174 = __fswab32(*((__be32 *)wq + 1U));
        
#line 103 
        tmp_175 = tmp_174 & 4292935679U;
      }
      
#line 103 
      if (0 != 0) 
#line 103 
                  tmp_177 = ((((((*((__be32 *)srqc + 2U) << 24) | ((*((__be32 *)srqc + 2U) << 8) & 16711680U)) | ((*((__be32 *)srqc + 2U) >> 8) & 65280U)) | (*((__be32 *)srqc + 2U) >> 24)) >> 26UL) << 16UL) & 2031616U;
      else {
        __u32 tmp_176;
        
#line 103 
        tmp_176 = __fswab32(*((__be32 *)srqc + 2U));
        
#line 103 
        tmp_177 = ((tmp_176 >> 26UL) << 16UL) & 2031616U;
      }
      
#line 103 
      tmp_178 = __fswab32(tmp_175 | tmp_177);
      
#line 103 
      *((__be32 *)wq + 1U) = tmp_178;
    }
    {
      
#line 104 
      bool __cond_7 = (_Bool)0;
      
#line 104 
      if ((int)__cond_7 != 0) 
#line 104 
                              __compiletime_assert_104(); else ;
    }
    
#line 104 
    if (0 != 0) {
      unsigned int tmp_184;
      unsigned int tmp_186;
      unsigned int tmp_188;
      unsigned int tmp_190;
      unsigned int tmp_192;
      unsigned int tmp_194;
      unsigned int tmp_196;
      unsigned int tmp_198;
      
#line 104 
      if (0 != 0) 
#line 104 
                  tmp_184 = ((((*((__be32 *)wq + 1U) << 24) | ((*((__be32 *)wq + 1U) << 8) & 16711680U)) | ((*((__be32 *)wq + 1U) >> 8) & 65280U)) | (*((__be32 *)wq + 1U) >> 24)) & 4294901760U;
      else {
        __u32 tmp_183;
        
#line 104 
        tmp_183 = __fswab32(*((__be32 *)wq + 1U));
        
#line 104 
        tmp_184 = tmp_183 & 4294901760U;
      }
      
#line 104 
      if (0 != 0) 
#line 104 
                  tmp_186 = ((((*((__be32 *)srqc + 7U) << 24) | ((*((__be32 *)srqc + 7U) << 8) & 16711680U)) | ((*((__be32 *)srqc + 7U) >> 8) & 65280U)) | (*((__be32 *)srqc + 7U) >> 24)) >> 16UL;
      else {
        __u32 tmp_185;
        
#line 104 
        tmp_185 = __fswab32(*((__be32 *)srqc + 7U));
        
#line 104 
        tmp_186 = tmp_185 >> 16UL;
      }
      
#line 104 
      if (0 != 0) 
#line 104 
                  tmp_188 = ((((*((__be32 *)wq + 1U) << 24) | ((*((__be32 *)wq + 1U) << 8) & 16711680U)) | ((*((__be32 *)wq + 1U) >> 8) & 65280U)) | (*((__be32 *)wq + 1U) >> 24)) & 4294901760U;
      else {
        __u32 tmp_187;
        
#line 104 
        tmp_187 = __fswab32(*((__be32 *)wq + 1U));
        
#line 104 
        tmp_188 = tmp_187 & 4294901760U;
      }
      
#line 104 
      if (0 != 0) 
#line 104 
                  tmp_190 = ((((*((__be32 *)srqc + 7U) << 24) | ((*((__be32 *)srqc + 7U) << 8) & 16711680U)) | ((*((__be32 *)srqc + 7U) >> 8) & 65280U)) | (*((__be32 *)srqc + 7U) >> 24)) >> 16UL;
      else {
        __u32 tmp_189;
        
#line 104 
        tmp_189 = __fswab32(*((__be32 *)srqc + 7U));
        
#line 104 
        tmp_190 = tmp_189 >> 16UL;
      }
      
#line 104 
      if (0 != 0) 
#line 104 
                  tmp_192 = ((((*((__be32 *)wq + 1U) << 24) | ((*((__be32 *)wq + 1U) << 8) & 16711680U)) | ((*((__be32 *)wq + 1U) >> 8) & 65280U)) | (*((__be32 *)wq + 1U) >> 24)) & 4294901760U;
      else {
        __u32 tmp_191;
        
#line 104 
        tmp_191 = __fswab32(*((__be32 *)wq + 1U));
        
#line 104 
        tmp_192 = tmp_191 & 4294901760U;
      }
      
#line 104 
      if (0 != 0) 
#line 104 
                  tmp_194 = ((((*((__be32 *)srqc + 7U) << 24) | ((*((__be32 *)srqc + 7U) << 8) & 16711680U)) | ((*((__be32 *)srqc + 7U) >> 8) & 65280U)) | (*((__be32 *)srqc + 7U) >> 24)) >> 16UL;
      else {
        __u32 tmp_193;
        
#line 104 
        tmp_193 = __fswab32(*((__be32 *)srqc + 7U));
        
#line 104 
        tmp_194 = tmp_193 >> 16UL;
      }
      
#line 104 
      if (0 != 0) 
#line 104 
                  tmp_196 = ((((*((__be32 *)wq + 1U) << 24) | ((*((__be32 *)wq + 1U) << 8) & 16711680U)) | ((*((__be32 *)wq + 1U) >> 8) & 65280U)) | (*((__be32 *)wq + 1U) >> 24)) & 4294901760U;
      else {
        __u32 tmp_195;
        
#line 104 
        tmp_195 = __fswab32(*((__be32 *)wq + 1U));
        
#line 104 
        tmp_196 = tmp_195 & 4294901760U;
      }
      
#line 104 
      if (0 != 0) 
#line 104 
                  tmp_198 = ((((*((__be32 *)srqc + 7U) << 24) | ((*((__be32 *)srqc + 7U) << 8) & 16711680U)) | ((*((__be32 *)srqc + 7U) >> 8) & 65280U)) | (*((__be32 *)srqc + 7U) >> 24)) >> 16UL;
      else {
        __u32 tmp_197;
        
#line 104 
        tmp_197 = __fswab32(*((__be32 *)srqc + 7U));
        
#line 104 
        tmp_198 = tmp_197 >> 16UL;
      }
      
#line 104 
      *((__be32 *)wq + 1U) = ((((tmp_184 | tmp_186) << 24) | (((tmp_188 | tmp_190) << 8) & 16711680U)) | (((tmp_192 | tmp_194) >> 8) & 65280U)) | ((tmp_196 | tmp_198) >> 24);
    }
    else {
      __u32 tmp_203;
      unsigned int tmp_200;
      unsigned int tmp_202;
      
#line 104 
      if (0 != 0) 
#line 104 
                  tmp_200 = ((((*((__be32 *)wq + 1U) << 24) | ((*((__be32 *)wq + 1U) << 8) & 16711680U)) | ((*((__be32 *)wq + 1U) >> 8) & 65280U)) | (*((__be32 *)wq + 1U) >> 24)) & 4294901760U;
      else {
        __u32 tmp_199;
        
#line 104 
        tmp_199 = __fswab32(*((__be32 *)wq + 1U));
        
#line 104 
        tmp_200 = tmp_199 & 4294901760U;
      }
      
#line 104 
      if (0 != 0) 
#line 104 
                  tmp_202 = ((((*((__be32 *)srqc + 7U) << 24) | ((*((__be32 *)srqc + 7U) << 8) & 16711680U)) | ((*((__be32 *)srqc + 7U) >> 8) & 65280U)) | (*((__be32 *)srqc + 7U) >> 24)) >> 16UL;
      else {
        __u32 tmp_201;
        
#line 104 
        tmp_201 = __fswab32(*((__be32 *)srqc + 7U));
        
#line 104 
        tmp_202 = tmp_201 >> 16UL;
      }
      
#line 104 
      tmp_203 = __fswab32(tmp_200 | tmp_202);
      
#line 104 
      *((__be32 *)wq + 1U) = tmp_203;
    }
    {
      
#line 105 
      bool __cond_8 = (_Bool)0;
      
#line 105 
      if ((int)__cond_8 != 0) 
#line 105 
                              __compiletime_assert_105(); else ;
    }
    
#line 105 
    if (0 != 0) {
      unsigned int tmp_209;
      unsigned int tmp_211;
      unsigned int tmp_213;
      unsigned int tmp_215;
      unsigned int tmp_217;
      unsigned int tmp_219;
      unsigned int tmp_221;
      unsigned int tmp_223;
      
#line 105 
      if (0 != 0) 
#line 105 
                  tmp_209 = ((((*((__be32 *)wq + 2U) << 24) | ((*((__be32 *)wq + 2U) << 8) & 16711680U)) | ((*((__be32 *)wq + 2U) >> 8) & 65280U)) | (*((__be32 *)wq + 2U) >> 24)) & 4278190080U;
      else {
        __u32 tmp_208;
        
#line 105 
        tmp_208 = __fswab32(*((__be32 *)wq + 2U));
        
#line 105 
        tmp_209 = tmp_208 & 4278190080U;
      }
      
#line 105 
      if (0 != 0) 
#line 105 
                  tmp_211 = ((((*((__be32 *)srqc + 6U) << 24) | ((*((__be32 *)srqc + 6U) << 8) & 16711680U)) | ((*((__be32 *)srqc + 6U) >> 8) & 65280U)) | (*((__be32 *)srqc + 6U) >> 24)) & 16777215U;
      else {
        __u32 tmp_210;
        
#line 105 
        tmp_210 = __fswab32(*((__be32 *)srqc + 6U));
        
#line 105 
        tmp_211 = tmp_210 & 16777215U;
      }
      
#line 105 
      if (0 != 0) 
#line 105 
                  tmp_213 = ((((*((__be32 *)wq + 2U) << 24) | ((*((__be32 *)wq + 2U) << 8) & 16711680U)) | ((*((__be32 *)wq + 2U) >> 8) & 65280U)) | (*((__be32 *)wq + 2U) >> 24)) & 4278190080U;
      else {
        __u32 tmp_212;
        
#line 105 
        tmp_212 = __fswab32(*((__be32 *)wq + 2U));
        
#line 105 
        tmp_213 = tmp_212 & 4278190080U;
      }
      
#line 105 
      if (0 != 0) 
#line 105 
                  tmp_215 = ((((*((__be32 *)srqc + 6U) << 24) | ((*((__be32 *)srqc + 6U) << 8) & 16711680U)) | ((*((__be32 *)srqc + 6U) >> 8) & 65280U)) | (*((__be32 *)srqc + 6U) >> 24)) & 16777215U;
      else {
        __u32 tmp_214;
        
#line 105 
        tmp_214 = __fswab32(*((__be32 *)srqc + 6U));
        
#line 105 
        tmp_215 = tmp_214 & 16777215U;
      }
      
#line 105 
      if (0 != 0) 
#line 105 
                  tmp_217 = ((((*((__be32 *)wq + 2U) << 24) | ((*((__be32 *)wq + 2U) << 8) & 16711680U)) | ((*((__be32 *)wq + 2U) >> 8) & 65280U)) | (*((__be32 *)wq + 2U) >> 24)) & 4278190080U;
      else {
        __u32 tmp_216;
        
#line 105 
        tmp_216 = __fswab32(*((__be32 *)wq + 2U));
        
#line 105 
        tmp_217 = tmp_216 & 4278190080U;
      }
      
#line 105 
      if (0 != 0) 
#line 105 
                  tmp_219 = ((((*((__be32 *)srqc + 6U) << 24) | ((*((__be32 *)srqc + 6U) << 8) & 16711680U)) | ((*((__be32 *)srqc + 6U) >> 8) & 65280U)) | (*((__be32 *)srqc + 6U) >> 24)) & 16777215U;
      else {
        __u32 tmp_218;
        
#line 105 
        tmp_218 = __fswab32(*((__be32 *)srqc + 6U));
        
#line 105 
        tmp_219 = tmp_218 & 16777215U;
      }
      
#line 105 
      if (0 != 0) 
#line 105 
                  tmp_221 = ((((*((__be32 *)wq + 2U) << 24) | ((*((__be32 *)wq + 2U) << 8) & 16711680U)) | ((*((__be32 *)wq + 2U) >> 8) & 65280U)) | (*((__be32 *)wq + 2U) >> 24)) & 4278190080U;
      else {
        __u32 tmp_220;
        
#line 105 
        tmp_220 = __fswab32(*((__be32 *)wq + 2U));
        
#line 105 
        tmp_221 = tmp_220 & 4278190080U;
      }
      
#line 105 
      if (0 != 0) 
#line 105 
                  tmp_223 = ((((*((__be32 *)srqc + 6U) << 24) | ((*((__be32 *)srqc + 6U) << 8) & 16711680U)) | ((*((__be32 *)srqc + 6U) >> 8) & 65280U)) | (*((__be32 *)srqc + 6U) >> 24)) & 16777215U;
      else {
        __u32 tmp_222;
        
#line 105 
        tmp_222 = __fswab32(*((__be32 *)srqc + 6U));
        
#line 105 
        tmp_223 = tmp_222 & 16777215U;
      }
      
#line 105 
      *((__be32 *)wq + 2U) = ((((tmp_209 | tmp_211) << 24) | (((tmp_213 | tmp_215) << 8) & 16711680U)) | (((tmp_217 | tmp_219) >> 8) & 65280U)) | ((tmp_221 | tmp_223) >> 24);
    }
    else {
      __u32 tmp_228;
      unsigned int tmp_225;
      unsigned int tmp_227;
      
#line 105 
      if (0 != 0) 
#line 105 
                  tmp_225 = ((((*((__be32 *)wq + 2U) << 24) | ((*((__be32 *)wq + 2U) << 8) & 16711680U)) | ((*((__be32 *)wq + 2U) >> 8) & 65280U)) | (*((__be32 *)wq + 2U) >> 24)) & 4278190080U;
      else {
        __u32 tmp_224;
        
#line 105 
        tmp_224 = __fswab32(*((__be32 *)wq + 2U));
        
#line 105 
        tmp_225 = tmp_224 & 4278190080U;
      }
      
#line 105 
      if (0 != 0) 
#line 105 
                  tmp_227 = ((((*((__be32 *)srqc + 6U) << 24) | ((*((__be32 *)srqc + 6U) << 8) & 16711680U)) | ((*((__be32 *)srqc + 6U) >> 8) & 65280U)) | (*((__be32 *)srqc + 6U) >> 24)) & 16777215U;
      else {
        __u32 tmp_226;
        
#line 105 
        tmp_226 = __fswab32(*((__be32 *)srqc + 6U));
        
#line 105 
        tmp_227 = tmp_226 & 16777215U;
      }
      
#line 105 
      tmp_228 = __fswab32(tmp_225 | tmp_227);
      
#line 105 
      *((__be32 *)wq + 2U) = tmp_228;
    }
    {
      
#line 106 
      bool __cond_9 = (_Bool)0;
      
#line 106 
      if ((int)__cond_9 != 0) 
#line 106 
                              __compiletime_assert_106(); else ;
    }
    {
      
#line 106 
      bool __cond_10 = (_Bool)0;
      
#line 106 
      if ((int)__cond_10 != 0) 
#line 106 
                               __compiletime_assert_106(); else ;
    }
    
#line 106 
    if (0 != 0) {
      unsigned long long tmp_232;
      unsigned long long tmp_234;
      unsigned long long tmp_236;
      unsigned long long tmp_238;
      unsigned long long tmp_240;
      unsigned long long tmp_242;
      unsigned long long tmp_244;
      unsigned long long tmp_246;
      
#line 106 
      if (0 != 0) 
#line 106 
                  tmp_232 = ((((((((*((__be64 *)srqc + 5U) << 56) | ((*((__be64 *)srqc + 5U) << 40) & 71776119061217280ULL)) | ((*((__be64 *)srqc + 5U) << 24) & 280375465082880ULL)) | ((*((__be64 *)srqc + 5U) << 8) & 1095216660480ULL)) | ((*((__be64 *)srqc + 5U) >> 8) & 4278190080ULL)) | ((*((__be64 *)srqc + 5U) >> 24) & 16711680ULL)) | ((*((__be64 *)srqc + 5U) >> 40) & 65280ULL)) | (*((__be64 *)srqc + 5U) >> 56)) << 56;
      else {
        __u64 tmp_231;
        
#line 106 
        tmp_231 = __fswab64(*((__be64 *)srqc + 5U));
        
#line 106 
        tmp_232 = tmp_231 << 56;
      }
      
#line 106 
      if (0 != 0) 
#line 106 
                  tmp_234 = (((((((((*((__be64 *)srqc + 5U) << 56) | ((*((__be64 *)srqc + 5U) << 40) & 71776119061217280ULL)) | ((*((__be64 *)srqc + 5U) << 24) & 280375465082880ULL)) | ((*((__be64 *)srqc + 5U) << 8) & 1095216660480ULL)) | ((*((__be64 *)srqc + 5U) >> 8) & 4278190080ULL)) | ((*((__be64 *)srqc + 5U) >> 24) & 16711680ULL)) | ((*((__be64 *)srqc + 5U) >> 40) & 65280ULL)) | (*((__be64 *)srqc + 5U) >> 56)) << 40) & 71776119061217280ULL;
      else {
        __u64 tmp_233;
        
#line 106 
        tmp_233 = __fswab64(*((__be64 *)srqc + 5U));
        
#line 106 
        tmp_234 = (tmp_233 << 40) & 71776119061217280ULL;
      }
      
#line 106 
      if (0 != 0) 
#line 106 
                  tmp_236 = (((((((((*((__be64 *)srqc + 5U) << 56) | ((*((__be64 *)srqc + 5U) << 40) & 71776119061217280ULL)) | ((*((__be64 *)srqc + 5U) << 24) & 280375465082880ULL)) | ((*((__be64 *)srqc + 5U) << 8) & 1095216660480ULL)) | ((*((__be64 *)srqc + 5U) >> 8) & 4278190080ULL)) | ((*((__be64 *)srqc + 5U) >> 24) & 16711680ULL)) | ((*((__be64 *)srqc + 5U) >> 40) & 65280ULL)) | (*((__be64 *)srqc + 5U) >> 56)) << 24) & 280375465082880ULL;
      else {
        __u64 tmp_235;
        
#line 106 
        tmp_235 = __fswab64(*((__be64 *)srqc + 5U));
        
#line 106 
        tmp_236 = (tmp_235 << 24) & 280375465082880ULL;
      }
      
#line 106 
      if (0 != 0) 
#line 106 
                  tmp_238 = (((((((((*((__be64 *)srqc + 5U) << 56) | ((*((__be64 *)srqc + 5U) << 40) & 71776119061217280ULL)) | ((*((__be64 *)srqc + 5U) << 24) & 280375465082880ULL)) | ((*((__be64 *)srqc + 5U) << 8) & 1095216660480ULL)) | ((*((__be64 *)srqc + 5U) >> 8) & 4278190080ULL)) | ((*((__be64 *)srqc + 5U) >> 24) & 16711680ULL)) | ((*((__be64 *)srqc + 5U) >> 40) & 65280ULL)) | (*((__be64 *)srqc + 5U) >> 56)) << 8) & 1095216660480ULL;
      else {
        __u64 tmp_237;
        
#line 106 
        tmp_237 = __fswab64(*((__be64 *)srqc + 5U));
        
#line 106 
        tmp_238 = (tmp_237 << 8) & 1095216660480ULL;
      }
      
#line 106 
      if (0 != 0) 
#line 106 
                  tmp_240 = (((((((((*((__be64 *)srqc + 5U) << 56) | ((*((__be64 *)srqc + 5U) << 40) & 71776119061217280ULL)) | ((*((__be64 *)srqc + 5U) << 24) & 280375465082880ULL)) | ((*((__be64 *)srqc + 5U) << 8) & 1095216660480ULL)) | ((*((__be64 *)srqc + 5U) >> 8) & 4278190080ULL)) | ((*((__be64 *)srqc + 5U) >> 24) & 16711680ULL)) | ((*((__be64 *)srqc + 5U) >> 40) & 65280ULL)) | (*((__be64 *)srqc + 5U) >> 56)) >> 8) & 4278190080ULL;
      else {
        __u64 tmp_239;
        
#line 106 
        tmp_239 = __fswab64(*((__be64 *)srqc + 5U));
        
#line 106 
        tmp_240 = (tmp_239 >> 8) & 4278190080ULL;
      }
      
#line 106 
      if (0 != 0) 
#line 106 
                  tmp_242 = (((((((((*((__be64 *)srqc + 5U) << 56) | ((*((__be64 *)srqc + 5U) << 40) & 71776119061217280ULL)) | ((*((__be64 *)srqc + 5U) << 24) & 280375465082880ULL)) | ((*((__be64 *)srqc + 5U) << 8) & 1095216660480ULL)) | ((*((__be64 *)srqc + 5U) >> 8) & 4278190080ULL)) | ((*((__be64 *)srqc + 5U) >> 24) & 16711680ULL)) | ((*((__be64 *)srqc + 5U) >> 40) & 65280ULL)) | (*((__be64 *)srqc + 5U) >> 56)) >> 24) & 16711680ULL;
      else {
        __u64 tmp_241;
        
#line 106 
        tmp_241 = __fswab64(*((__be64 *)srqc + 5U));
        
#line 106 
        tmp_242 = (tmp_241 >> 24) & 16711680ULL;
      }
      
#line 106 
      if (0 != 0) 
#line 106 
                  tmp_244 = (((((((((*((__be64 *)srqc + 5U) << 56) | ((*((__be64 *)srqc + 5U) << 40) & 71776119061217280ULL)) | ((*((__be64 *)srqc + 5U) << 24) & 280375465082880ULL)) | ((*((__be64 *)srqc + 5U) << 8) & 1095216660480ULL)) | ((*((__be64 *)srqc + 5U) >> 8) & 4278190080ULL)) | ((*((__be64 *)srqc + 5U) >> 24) & 16711680ULL)) | ((*((__be64 *)srqc + 5U) >> 40) & 65280ULL)) | (*((__be64 *)srqc + 5U) >> 56)) >> 40) & 65280ULL;
      else {
        __u64 tmp_243;
        
#line 106 
        tmp_243 = __fswab64(*((__be64 *)srqc + 5U));
        
#line 106 
        tmp_244 = (tmp_243 >> 40) & 65280ULL;
      }
      
#line 106 
      if (0 != 0) 
#line 106 
                  tmp_246 = ((((((((*((__be64 *)srqc + 5U) << 56) | ((*((__be64 *)srqc + 5U) << 40) & 71776119061217280ULL)) | ((*((__be64 *)srqc + 5U) << 24) & 280375465082880ULL)) | ((*((__be64 *)srqc + 5U) << 8) & 1095216660480ULL)) | ((*((__be64 *)srqc + 5U) >> 8) & 4278190080ULL)) | ((*((__be64 *)srqc + 5U) >> 24) & 16711680ULL)) | ((*((__be64 *)srqc + 5U) >> 40) & 65280ULL)) | (*((__be64 *)srqc + 5U) >> 56)) >> 56;
      else {
        __u64 tmp_245;
        
#line 106 
        tmp_245 = __fswab64(*((__be64 *)srqc + 5U));
        
#line 106 
        tmp_246 = tmp_245 >> 56;
      }
      
#line 106 
      *((__be64 *)wq + 2U) = ((((((tmp_232 | tmp_234) | tmp_236) | tmp_238) | tmp_240) | tmp_242) | tmp_244) | tmp_246;
    }
    else {
      __u64 tmp_249;
      unsigned long long tmp_248;
      
#line 106 
      if (0 != 0) 
#line 106 
                  tmp_248 = (((((((*((__be64 *)srqc + 5U) << 56) | ((*((__be64 *)srqc + 5U) << 40) & 71776119061217280ULL)) | ((*((__be64 *)srqc + 5U) << 24) & 280375465082880ULL)) | ((*((__be64 *)srqc + 5U) << 8) & 1095216660480ULL)) | ((*((__be64 *)srqc + 5U) >> 8) & 4278190080ULL)) | ((*((__be64 *)srqc + 5U) >> 24) & 16711680ULL)) | ((*((__be64 *)srqc + 5U) >> 40) & 65280ULL)) | (*((__be64 *)srqc + 5U) >> 56); else 
                                                                    
#line 106 
                                                                    tmp_248 = __fswab64(*((__be64 *)srqc + 5U));
      
#line 106 
      tmp_249 = __fswab64(tmp_248);
      
#line 106 
      *((__be64 *)wq + 2U) = tmp_249;
    }
  }
  else {
    unsigned int tmp_251;
    
#line 108 
    if (0 != 0) 
#line 108 
                tmp_251 = (((((*((__be32 *)rmpc) << 24) | ((*((__be32 *)rmpc) << 8) & 16711680U)) | ((*((__be32 *)rmpc) >> 8) & 65280U)) | (*((__be32 *)rmpc) >> 24)) >> 20UL) & 15U;
    else {
      __u32 tmp_250;
      
#line 108 
      tmp_250 = __fswab32(*((__be32 *)rmpc));
      
#line 108 
      tmp_251 = (tmp_250 >> 20UL) & 15U;
    }
    
#line 108 
    switch (tmp_251) {
      unsigned int tmp_279;
      case (unsigned int)1: 
#line 109 
      ;
      {
        
#line 110 
        bool __cond_11 = (_Bool)0;
        
#line 110 
        if ((int)__cond_11 != 0) 
#line 110 
                                 __compiletime_assert_110(); else ;
      }
      
#line 110 
      if (0 != 0) {
        unsigned int tmp_255;
        unsigned int tmp_257;
        unsigned int tmp_259;
        unsigned int tmp_261;
        
#line 110 
        if (0 != 0) 
#line 110 
                    tmp_255 = ((((*((__be32 *)srqc) << 24) | ((*((__be32 *)srqc) << 8) & 16711680U)) | ((*((__be32 *)srqc) >> 8) & 65280U)) | (*((__be32 *)srqc) >> 24)) << 24;
        else {
          __u32 tmp_254;
          
#line 110 
          tmp_254 = __fswab32(*((__be32 *)srqc));
          
#line 110 
          tmp_255 = tmp_254 << 24;
        }
        
#line 110 
        if (0 != 0) 
#line 110 
                    tmp_257 = (((((*((__be32 *)srqc) << 24) | ((*((__be32 *)srqc) << 8) & 16711680U)) | ((*((__be32 *)srqc) >> 8) & 65280U)) | (*((__be32 *)srqc) >> 24)) << 8) & 16711680U;
        else {
          __u32 tmp_256;
          
#line 110 
          tmp_256 = __fswab32(*((__be32 *)srqc));
          
#line 110 
          tmp_257 = (tmp_256 << 8) & 16711680U;
        }
        
#line 110 
        if (0 != 0) 
#line 110 
                    tmp_259 = (((((*((__be32 *)srqc) << 24) | ((*((__be32 *)srqc) << 8) & 16711680U)) | ((*((__be32 *)srqc) >> 8) & 65280U)) | (*((__be32 *)srqc) >> 24)) >> 8) & 65280U;
        else {
          __u32 tmp_258;
          
#line 110 
          tmp_258 = __fswab32(*((__be32 *)srqc));
          
#line 110 
          tmp_259 = (tmp_258 >> 8) & 65280U;
        }
        
#line 110 
        if (0 != 0) 
#line 110 
                    tmp_261 = (((((*((__be32 *)srqc) << 24) | ((*((__be32 *)srqc) << 8) & 16711680U)) | ((*((__be32 *)srqc) >> 8) & 65280U)) | (*((__be32 *)srqc) >> 24)) >> 24) & 15U;
        else {
          __u32 tmp_260;
          
#line 110 
          tmp_260 = __fswab32(*((__be32 *)srqc));
          
#line 110 
          tmp_261 = (tmp_260 >> 24) & 15U;
        }
        
#line 110 
        *((__be32 *)srqc) = ((tmp_255 | tmp_257) | tmp_259) | tmp_261;
      }
      else {
        __u32 tmp_264;
        unsigned int tmp_263;
        
#line 110 
        if (0 != 0) 
#line 110 
                    tmp_263 = ((((*((__be32 *)srqc) << 24) | ((*((__be32 *)srqc) << 8) & 16711680U)) | ((*((__be32 *)srqc) >> 8) & 65280U)) | (*((__be32 *)srqc) >> 24)) & 268435455U;
        else {
          __u32 tmp_262;
          
#line 110 
          tmp_262 = __fswab32(*((__be32 *)srqc));
          
#line 110 
          tmp_263 = tmp_262 & 268435455U;
        }
        
#line 110 
        tmp_264 = __fswab32(tmp_263);
        
#line 110 
        *((__be32 *)srqc) = tmp_264;
      }
      
#line 111 
      goto ldv_35992;
      case (unsigned int)3: 
#line 112 
      ;
      {
        
#line 113 
        bool __cond_12 = (_Bool)0;
        
#line 113 
        if ((int)__cond_12 != 0) 
#line 113 
                                 __compiletime_assert_113(); else ;
      }
      
#line 113 
      if (0 != 0) {
        unsigned int tmp_268;
        unsigned int tmp_270;
        unsigned int tmp_272;
        unsigned int tmp_274;
        
#line 113 
        if (0 != 0) 
#line 113 
                    tmp_268 = ((((*((__be32 *)srqc) << 24) | ((*((__be32 *)srqc) << 8) & 16711680U)) | ((*((__be32 *)srqc) >> 8) & 65280U)) | (*((__be32 *)srqc) >> 24)) << 24;
        else {
          __u32 tmp_267;
          
#line 113 
          tmp_267 = __fswab32(*((__be32 *)srqc));
          
#line 113 
          tmp_268 = tmp_267 << 24;
        }
        
#line 113 
        if (0 != 0) 
#line 113 
                    tmp_270 = (((((*((__be32 *)srqc) << 24) | ((*((__be32 *)srqc) << 8) & 16711680U)) | ((*((__be32 *)srqc) >> 8) & 65280U)) | (*((__be32 *)srqc) >> 24)) << 8) & 16711680U;
        else {
          __u32 tmp_269;
          
#line 113 
          tmp_269 = __fswab32(*((__be32 *)srqc));
          
#line 113 
          tmp_270 = (tmp_269 << 8) & 16711680U;
        }
        
#line 113 
        if (0 != 0) 
#line 113 
                    tmp_272 = (((((*((__be32 *)srqc) << 24) | ((*((__be32 *)srqc) << 8) & 16711680U)) | ((*((__be32 *)srqc) >> 8) & 65280U)) | (*((__be32 *)srqc) >> 24)) >> 8) & 65280U;
        else {
          __u32 tmp_271;
          
#line 113 
          tmp_271 = __fswab32(*((__be32 *)srqc));
          
#line 113 
          tmp_272 = (tmp_271 >> 8) & 65280U;
        }
        
#line 113 
        if (0 != 0) 
#line 113 
                    tmp_274 = ((((((*((__be32 *)srqc) << 24) | ((*((__be32 *)srqc) << 8) & 16711680U)) | ((*((__be32 *)srqc) >> 8) & 65280U)) | (*((__be32 *)srqc) >> 24)) >> 24) & 15U) | 16U;
        else {
          __u32 tmp_273;
          
#line 113 
          tmp_273 = __fswab32(*((__be32 *)srqc));
          
#line 113 
          tmp_274 = ((tmp_273 >> 24) & 15U) | 16U;
        }
        
#line 113 
        *((__be32 *)srqc) = ((tmp_268 | tmp_270) | tmp_272) | tmp_274;
      }
      else {
        __u32 tmp_277;
        unsigned int tmp_276;
        
#line 113 
        if (0 != 0) 
#line 113 
                    tmp_276 = (((((*((__be32 *)srqc) << 24) | ((*((__be32 *)srqc) << 8) & 16711680U)) | ((*((__be32 *)srqc) >> 8) & 65280U)) | (*((__be32 *)srqc) >> 24)) & 268435455U) | 268435456U;
        else {
          __u32 tmp_275;
          
#line 113 
          tmp_275 = __fswab32(*((__be32 *)srqc));
          
#line 113 
          tmp_276 = (tmp_275 & 268435455U) | 268435456U;
        }
        
#line 113 
        tmp_277 = __fswab32(tmp_276);
        
#line 113 
        *((__be32 *)srqc) = tmp_277;
      }
      
#line 114 
      goto ldv_35992;
      default: 
#line 115 
      ;
      
#line 116 
      if (0 != 0) 
#line 116 
                  tmp_279 = (((((*((__be32 *)rmpc) << 24) | ((*((__be32 *)rmpc) << 8) & 16711680U)) | ((*((__be32 *)rmpc) >> 8) & 65280U)) | (*((__be32 *)rmpc) >> 24)) >> 20UL) & 15U;
      else {
        __u32 tmp_278;
        
#line 116 
        tmp_278 = __fswab32(*((__be32 *)rmpc));
        
#line 116 
        tmp_279 = (tmp_278 >> 20UL) & 15U;
      }
      
#line 116 
      printk("\001","rmpc_srqc_reformat",116,tmp_279);
      {
        
#line 119 
        bool __cond_13 = (_Bool)0;
        
#line 119 
        if ((int)__cond_13 != 0) 
#line 119 
                                 __compiletime_assert_120(); else ;
      }
      
#line 119 
      if (0 != 0) {
        unsigned int tmp_285;
        unsigned int tmp_287;
        unsigned int tmp_289;
        unsigned int tmp_291;
        unsigned int tmp_293;
        unsigned int tmp_295;
        unsigned int tmp_297;
        unsigned int tmp_299;
        
#line 119 
        if (0 != 0) 
#line 119 
                    tmp_285 = ((((*((__be32 *)srqc) << 24) | ((*((__be32 *)srqc) << 8) & 16711680U)) | ((*((__be32 *)srqc) >> 8) & 65280U)) | (*((__be32 *)srqc) >> 24)) & 268435455U;
        else {
          __u32 tmp_284;
          
#line 119 
          tmp_284 = __fswab32(*((__be32 *)srqc));
          
#line 119 
          tmp_285 = tmp_284 & 268435455U;
        }
        
#line 119 
        if (0 != 0) 
#line 119 
                    tmp_287 = (((((*((__be32 *)rmpc) << 24) | ((*((__be32 *)rmpc) << 8) & 16711680U)) | ((*((__be32 *)rmpc) >> 8) & 65280U)) | (*((__be32 *)rmpc) >> 24)) >> 20UL) << 28UL;
        else {
          __u32 tmp_286;
          
#line 119 
          tmp_286 = __fswab32(*((__be32 *)rmpc));
          
#line 119 
          tmp_287 = (tmp_286 >> 20UL) << 28UL;
        }
        
#line 119 
        if (0 != 0) 
#line 119 
                    tmp_289 = ((((*((__be32 *)srqc) << 24) | ((*((__be32 *)srqc) << 8) & 16711680U)) | ((*((__be32 *)srqc) >> 8) & 65280U)) | (*((__be32 *)srqc) >> 24)) & 268435455U;
        else {
          __u32 tmp_288;
          
#line 119 
          tmp_288 = __fswab32(*((__be32 *)srqc));
          
#line 119 
          tmp_289 = tmp_288 & 268435455U;
        }
        
#line 119 
        if (0 != 0) 
#line 119 
                    tmp_291 = (((((*((__be32 *)rmpc) << 24) | ((*((__be32 *)rmpc) << 8) & 16711680U)) | ((*((__be32 *)rmpc) >> 8) & 65280U)) | (*((__be32 *)rmpc) >> 24)) >> 20UL) << 28UL;
        else {
          __u32 tmp_290;
          
#line 119 
          tmp_290 = __fswab32(*((__be32 *)rmpc));
          
#line 119 
          tmp_291 = (tmp_290 >> 20UL) << 28UL;
        }
        
#line 119 
        if (0 != 0) 
#line 119 
                    tmp_293 = ((((*((__be32 *)srqc) << 24) | ((*((__be32 *)srqc) << 8) & 16711680U)) | ((*((__be32 *)srqc) >> 8) & 65280U)) | (*((__be32 *)srqc) >> 24)) & 268435455U;
        else {
          __u32 tmp_292;
          
#line 119 
          tmp_292 = __fswab32(*((__be32 *)srqc));
          
#line 119 
          tmp_293 = tmp_292 & 268435455U;
        }
        
#line 119 
        if (0 != 0) 
#line 119 
                    tmp_295 = (((((*((__be32 *)rmpc) << 24) | ((*((__be32 *)rmpc) << 8) & 16711680U)) | ((*((__be32 *)rmpc) >> 8) & 65280U)) | (*((__be32 *)rmpc) >> 24)) >> 20UL) << 28UL;
        else {
          __u32 tmp_294;
          
#line 119 
          tmp_294 = __fswab32(*((__be32 *)rmpc));
          
#line 119 
          tmp_295 = (tmp_294 >> 20UL) << 28UL;
        }
        
#line 119 
        if (0 != 0) 
#line 119 
                    tmp_297 = ((((*((__be32 *)srqc) << 24) | ((*((__be32 *)srqc) << 8) & 16711680U)) | ((*((__be32 *)srqc) >> 8) & 65280U)) | (*((__be32 *)srqc) >> 24)) & 268435455U;
        else {
          __u32 tmp_296;
          
#line 119 
          tmp_296 = __fswab32(*((__be32 *)srqc));
          
#line 119 
          tmp_297 = tmp_296 & 268435455U;
        }
        
#line 119 
        if (0 != 0) 
#line 119 
                    tmp_299 = (((((*((__be32 *)rmpc) << 24) | ((*((__be32 *)rmpc) << 8) & 16711680U)) | ((*((__be32 *)rmpc) >> 8) & 65280U)) | (*((__be32 *)rmpc) >> 24)) >> 20UL) << 28UL;
        else {
          __u32 tmp_298;
          
#line 119 
          tmp_298 = __fswab32(*((__be32 *)rmpc));
          
#line 119 
          tmp_299 = (tmp_298 >> 20UL) << 28UL;
        }
        
#line 119 
        *((__be32 *)srqc) = ((((tmp_285 | tmp_287) << 24) | (((tmp_289 | tmp_291) << 8) & 16711680U)) | (((tmp_293 | tmp_295) >> 8) & 65280U)) | ((tmp_297 | tmp_299) >> 24);
      }
      else {
        __u32 tmp_304;
        unsigned int tmp_301;
        unsigned int tmp_303;
        
#line 119 
        if (0 != 0) 
#line 119 
                    tmp_301 = ((((*((__be32 *)srqc) << 24) | ((*((__be32 *)srqc) << 8) & 16711680U)) | ((*((__be32 *)srqc) >> 8) & 65280U)) | (*((__be32 *)srqc) >> 24)) & 268435455U;
        else {
          __u32 tmp_300;
          
#line 119 
          tmp_300 = __fswab32(*((__be32 *)srqc));
          
#line 119 
          tmp_301 = tmp_300 & 268435455U;
        }
        
#line 119 
        if (0 != 0) 
#line 119 
                    tmp_303 = (((((*((__be32 *)rmpc) << 24) | ((*((__be32 *)rmpc) << 8) & 16711680U)) | ((*((__be32 *)rmpc) >> 8) & 65280U)) | (*((__be32 *)rmpc) >> 24)) >> 20UL) << 28UL;
        else {
          __u32 tmp_302;
          
#line 119 
          tmp_302 = __fswab32(*((__be32 *)rmpc));
          
#line 119 
          tmp_303 = (tmp_302 >> 20UL) << 28UL;
        }
        
#line 119 
        tmp_304 = __fswab32(tmp_301 | tmp_303);
        
#line 119 
        *((__be32 *)srqc) = tmp_304;
      }
    }
    ldv_35992: 
#line 123 
    ;
    {
      
#line 123 
      bool __cond_14 = (_Bool)0;
      
#line 123 
      if ((int)__cond_14 != 0) 
#line 123 
                               __compiletime_assert_123(); else ;
    }
    
#line 123 
    if (0 != 0) {
      unsigned int tmp_310;
      unsigned int tmp_312;
      unsigned int tmp_314;
      unsigned int tmp_316;
      unsigned int tmp_318;
      unsigned int tmp_320;
      unsigned int tmp_322;
      unsigned int tmp_324;
      
#line 123 
      if (0 != 0) 
#line 123 
                  tmp_310 = ((((*((__be32 *)srqc + 1U) << 24) | ((*((__be32 *)srqc + 1U) << 8) & 16711680U)) | ((*((__be32 *)srqc + 1U) >> 8) & 65280U)) | (*((__be32 *)srqc + 1U) >> 24)) & 2147483647U;
      else {
        __u32 tmp_309;
        
#line 123 
        tmp_309 = __fswab32(*((__be32 *)srqc + 1U));
        
#line 123 
        tmp_310 = tmp_309 & 2147483647U;
      }
      
#line 123 
      if (0 != 0) 
#line 123 
                  tmp_312 = (((((*((__be32 *)wq) << 24) | ((*((__be32 *)wq) << 8) & 16711680U)) | ((*((__be32 *)wq) >> 8) & 65280U)) | (*((__be32 *)wq) >> 24)) >> 27UL) << 31UL;
      else {
        __u32 tmp_311;
        
#line 123 
        tmp_311 = __fswab32(*((__be32 *)wq));
        
#line 123 
        tmp_312 = (tmp_311 >> 27UL) << 31UL;
      }
      
#line 123 
      if (0 != 0) 
#line 123 
                  tmp_314 = ((((*((__be32 *)srqc + 1U) << 24) | ((*((__be32 *)srqc + 1U) << 8) & 16711680U)) | ((*((__be32 *)srqc + 1U) >> 8) & 65280U)) | (*((__be32 *)srqc + 1U) >> 24)) & 2147483647U;
      else {
        __u32 tmp_313;
        
#line 123 
        tmp_313 = __fswab32(*((__be32 *)srqc + 1U));
        
#line 123 
        tmp_314 = tmp_313 & 2147483647U;
      }
      
#line 123 
      if (0 != 0) 
#line 123 
                  tmp_316 = (((((*((__be32 *)wq) << 24) | ((*((__be32 *)wq) << 8) & 16711680U)) | ((*((__be32 *)wq) >> 8) & 65280U)) | (*((__be32 *)wq) >> 24)) >> 27UL) << 31UL;
      else {
        __u32 tmp_315;
        
#line 123 
        tmp_315 = __fswab32(*((__be32 *)wq));
        
#line 123 
        tmp_316 = (tmp_315 >> 27UL) << 31UL;
      }
      
#line 123 
      if (0 != 0) 
#line 123 
                  tmp_318 = ((((*((__be32 *)srqc + 1U) << 24) | ((*((__be32 *)srqc + 1U) << 8) & 16711680U)) | ((*((__be32 *)srqc + 1U) >> 8) & 65280U)) | (*((__be32 *)srqc + 1U) >> 24)) & 2147483647U;
      else {
        __u32 tmp_317;
        
#line 123 
        tmp_317 = __fswab32(*((__be32 *)srqc + 1U));
        
#line 123 
        tmp_318 = tmp_317 & 2147483647U;
      }
      
#line 123 
      if (0 != 0) 
#line 123 
                  tmp_320 = (((((*((__be32 *)wq) << 24) | ((*((__be32 *)wq) << 8) & 16711680U)) | ((*((__be32 *)wq) >> 8) & 65280U)) | (*((__be32 *)wq) >> 24)) >> 27UL) << 31UL;
      else {
        __u32 tmp_319;
        
#line 123 
        tmp_319 = __fswab32(*((__be32 *)wq));
        
#line 123 
        tmp_320 = (tmp_319 >> 27UL) << 31UL;
      }
      
#line 123 
      if (0 != 0) 
#line 123 
                  tmp_322 = ((((*((__be32 *)srqc + 1U) << 24) | ((*((__be32 *)srqc + 1U) << 8) & 16711680U)) | ((*((__be32 *)srqc + 1U) >> 8) & 65280U)) | (*((__be32 *)srqc + 1U) >> 24)) & 2147483647U;
      else {
        __u32 tmp_321;
        
#line 123 
        tmp_321 = __fswab32(*((__be32 *)srqc + 1U));
        
#line 123 
        tmp_322 = tmp_321 & 2147483647U;
      }
      
#line 123 
      if (0 != 0) 
#line 123 
                  tmp_324 = (((((*((__be32 *)wq) << 24) | ((*((__be32 *)wq) << 8) & 16711680U)) | ((*((__be32 *)wq) >> 8) & 65280U)) | (*((__be32 *)wq) >> 24)) >> 27UL) << 31UL;
      else {
        __u32 tmp_323;
        
#line 123 
        tmp_323 = __fswab32(*((__be32 *)wq));
        
#line 123 
        tmp_324 = (tmp_323 >> 27UL) << 31UL;
      }
      
#line 123 
      *((__be32 *)srqc + 1U) = ((((tmp_310 | tmp_312) << 24) | (((tmp_314 | tmp_316) << 8) & 16711680U)) | (((tmp_318 | tmp_320) >> 8) & 65280U)) | ((tmp_322 | tmp_324) >> 24);
    }
    else {
      __u32 tmp_329;
      unsigned int tmp_326;
      unsigned int tmp_328;
      
#line 123 
      if (0 != 0) 
#line 123 
                  tmp_326 = ((((*((__be32 *)srqc + 1U) << 24) | ((*((__be32 *)srqc + 1U) << 8) & 16711680U)) | ((*((__be32 *)srqc + 1U) >> 8) & 65280U)) | (*((__be32 *)srqc + 1U) >> 24)) & 2147483647U;
      else {
        __u32 tmp_325;
        
#line 123 
        tmp_325 = __fswab32(*((__be32 *)srqc + 1U));
        
#line 123 
        tmp_326 = tmp_325 & 2147483647U;
      }
      
#line 123 
      if (0 != 0) 
#line 123 
                  tmp_328 = (((((*((__be32 *)wq) << 24) | ((*((__be32 *)wq) << 8) & 16711680U)) | ((*((__be32 *)wq) >> 8) & 65280U)) | (*((__be32 *)wq) >> 24)) >> 27UL) << 31UL;
      else {
        __u32 tmp_327;
        
#line 123 
        tmp_327 = __fswab32(*((__be32 *)wq));
        
#line 123 
        tmp_328 = (tmp_327 >> 27UL) << 31UL;
      }
      
#line 123 
      tmp_329 = __fswab32(tmp_326 | tmp_328);
      
#line 123 
      *((__be32 *)srqc + 1U) = tmp_329;
    }
    {
      
#line 124 
      bool __cond_15 = (_Bool)0;
      
#line 124 
      if ((int)__cond_15 != 0) 
#line 124 
                               __compiletime_assert_124(); else ;
    }
    
#line 124 
    if (0 != 0) {
      unsigned int tmp_335;
      unsigned int tmp_337;
      unsigned int tmp_339;
      unsigned int tmp_341;
      unsigned int tmp_343;
      unsigned int tmp_345;
      unsigned int tmp_347;
      unsigned int tmp_349;
      
#line 124 
      if (0 != 0) 
#line 124 
                  tmp_335 = ((((*((__be32 *)srqc + 4U) << 24) | ((*((__be32 *)srqc + 4U) << 8) & 16711680U)) | ((*((__be32 *)srqc + 4U) >> 8) & 65280U)) | (*((__be32 *)srqc + 4U) >> 24)) & 3238002687U;
      else {
        __u32 tmp_334;
        
#line 124 
        tmp_334 = __fswab32(*((__be32 *)srqc + 4U));
        
#line 124 
        tmp_335 = tmp_334 & 3238002687U;
      }
      
#line 124 
      if (0 != 0) 
#line 124 
                  tmp_337 = ((((((*((__be32 *)wq + 8U) << 24) | ((*((__be32 *)wq + 8U) << 8) & 16711680U)) | ((*((__be32 *)wq + 8U) >> 8) & 65280U)) | (*((__be32 *)wq + 8U) >> 24)) >> 8UL) << 24UL) & 520093696U;
      else {
        __u32 tmp_336;
        
#line 124 
        tmp_336 = __fswab32(*((__be32 *)wq + 8U));
        
#line 124 
        tmp_337 = ((tmp_336 >> 8UL) << 24UL) & 520093696U;
      }
      
#line 124 
      if (0 != 0) 
#line 124 
                  tmp_339 = ((((*((__be32 *)srqc + 4U) << 24) | ((*((__be32 *)srqc + 4U) << 8) & 16711680U)) | ((*((__be32 *)srqc + 4U) >> 8) & 65280U)) | (*((__be32 *)srqc + 4U) >> 24)) & 3238002687U;
      else {
        __u32 tmp_338;
        
#line 124 
        tmp_338 = __fswab32(*((__be32 *)srqc + 4U));
        
#line 124 
        tmp_339 = tmp_338 & 3238002687U;
      }
      
#line 124 
      if (0 != 0) 
#line 124 
                  tmp_341 = ((((((*((__be32 *)wq + 8U) << 24) | ((*((__be32 *)wq + 8U) << 8) & 16711680U)) | ((*((__be32 *)wq + 8U) >> 8) & 65280U)) | (*((__be32 *)wq + 8U) >> 24)) >> 8UL) << 24UL) & 520093696U;
      else {
        __u32 tmp_340;
        
#line 124 
        tmp_340 = __fswab32(*((__be32 *)wq + 8U));
        
#line 124 
        tmp_341 = ((tmp_340 >> 8UL) << 24UL) & 520093696U;
      }
      
#line 124 
      if (0 != 0) 
#line 124 
                  tmp_343 = ((((*((__be32 *)srqc + 4U) << 24) | ((*((__be32 *)srqc + 4U) << 8) & 16711680U)) | ((*((__be32 *)srqc + 4U) >> 8) & 65280U)) | (*((__be32 *)srqc + 4U) >> 24)) & 3238002687U;
      else {
        __u32 tmp_342;
        
#line 124 
        tmp_342 = __fswab32(*((__be32 *)srqc + 4U));
        
#line 124 
        tmp_343 = tmp_342 & 3238002687U;
      }
      
#line 124 
      if (0 != 0) 
#line 124 
                  tmp_345 = ((((((*((__be32 *)wq + 8U) << 24) | ((*((__be32 *)wq + 8U) << 8) & 16711680U)) | ((*((__be32 *)wq + 8U) >> 8) & 65280U)) | (*((__be32 *)wq + 8U) >> 24)) >> 8UL) << 24UL) & 520093696U;
      else {
        __u32 tmp_344;
        
#line 124 
        tmp_344 = __fswab32(*((__be32 *)wq + 8U));
        
#line 124 
        tmp_345 = ((tmp_344 >> 8UL) << 24UL) & 520093696U;
      }
      
#line 124 
      if (0 != 0) 
#line 124 
                  tmp_347 = ((((*((__be32 *)srqc + 4U) << 24) | ((*((__be32 *)srqc + 4U) << 8) & 16711680U)) | ((*((__be32 *)srqc + 4U) >> 8) & 65280U)) | (*((__be32 *)srqc + 4U) >> 24)) & 3238002687U;
      else {
        __u32 tmp_346;
        
#line 124 
        tmp_346 = __fswab32(*((__be32 *)srqc + 4U));
        
#line 124 
        tmp_347 = tmp_346 & 3238002687U;
      }
      
#line 124 
      if (0 != 0) 
#line 124 
                  tmp_349 = ((((((*((__be32 *)wq + 8U) << 24) | ((*((__be32 *)wq + 8U) << 8) & 16711680U)) | ((*((__be32 *)wq + 8U) >> 8) & 65280U)) | (*((__be32 *)wq + 8U) >> 24)) >> 8UL) << 24UL) & 520093696U;
      else {
        __u32 tmp_348;
        
#line 124 
        tmp_348 = __fswab32(*((__be32 *)wq + 8U));
        
#line 124 
        tmp_349 = ((tmp_348 >> 8UL) << 24UL) & 520093696U;
      }
      
#line 124 
      *((__be32 *)srqc + 4U) = ((((tmp_335 | tmp_337) << 24) | (((tmp_339 | tmp_341) << 8) & 16711680U)) | (((tmp_343 | tmp_345) >> 8) & 65280U)) | ((tmp_347 | tmp_349) >> 24);
    }
    else {
      __u32 tmp_354;
      unsigned int tmp_351;
      unsigned int tmp_353;
      
#line 124 
      if (0 != 0) 
#line 124 
                  tmp_351 = ((((*((__be32 *)srqc + 4U) << 24) | ((*((__be32 *)srqc + 4U) << 8) & 16711680U)) | ((*((__be32 *)srqc + 4U) >> 8) & 65280U)) | (*((__be32 *)srqc + 4U) >> 24)) & 3238002687U;
      else {
        __u32 tmp_350;
        
#line 124 
        tmp_350 = __fswab32(*((__be32 *)srqc + 4U));
        
#line 124 
        tmp_351 = tmp_350 & 3238002687U;
      }
      
#line 124 
      if (0 != 0) 
#line 124 
                  tmp_353 = ((((((*((__be32 *)wq + 8U) << 24) | ((*((__be32 *)wq + 8U) << 8) & 16711680U)) | ((*((__be32 *)wq + 8U) >> 8) & 65280U)) | (*((__be32 *)wq + 8U) >> 24)) >> 8UL) << 24UL) & 520093696U;
      else {
        __u32 tmp_352;
        
#line 124 
        tmp_352 = __fswab32(*((__be32 *)wq + 8U));
        
#line 124 
        tmp_353 = ((tmp_352 >> 8UL) << 24UL) & 520093696U;
      }
      
#line 124 
      tmp_354 = __fswab32(tmp_351 | tmp_353);
      
#line 124 
      *((__be32 *)srqc + 4U) = tmp_354;
    }
    {
      
#line 125 
      bool __cond_16 = (_Bool)0;
      
#line 125 
      if ((int)__cond_16 != 0) 
#line 125 
                               __compiletime_assert_125(); else ;
    }
    
#line 125 
    if (0 != 0) {
      unsigned int tmp_360;
      unsigned int tmp_362;
      unsigned int tmp_364;
      unsigned int tmp_366;
      unsigned int tmp_368;
      unsigned int tmp_370;
      unsigned int tmp_372;
      unsigned int tmp_374;
      
#line 125 
      if (0 != 0) 
#line 125 
                  tmp_360 = ((((*((__be32 *)srqc + 1U) << 24) | ((*((__be32 *)srqc + 1U) << 8) & 16711680U)) | ((*((__be32 *)srqc + 1U) >> 8) & 65280U)) | (*((__be32 *)srqc + 1U) >> 24)) & 4177526783U;
      else {
        __u32 tmp_359;
        
#line 125 
        tmp_359 = __fswab32(*((__be32 *)srqc + 1U));
        
#line 125 
        tmp_360 = tmp_359 & 4177526783U;
      }
      
#line 125 
      if (0 != 0) 
#line 125 
                  tmp_362 = (((((((*((__be32 *)wq + 8U) << 24) | ((*((__be32 *)wq + 8U) << 8) & 16711680U)) | ((*((__be32 *)wq + 8U) >> 8) & 65280U)) | (*((__be32 *)wq + 8U) >> 24)) >> 16UL) + 4294967292U) << 24UL) & 117440512U;
      else {
        __u32 tmp_361;
        
#line 125 
        tmp_361 = __fswab32(*((__be32 *)wq + 8U));
        
#line 125 
        tmp_362 = (((tmp_361 >> 16UL) + 4294967292U) << 24UL) & 117440512U;
      }
      
#line 125 
      if (0 != 0) 
#line 125 
                  tmp_364 = ((((*((__be32 *)srqc + 1U) << 24) | ((*((__be32 *)srqc + 1U) << 8) & 16711680U)) | ((*((__be32 *)srqc + 1U) >> 8) & 65280U)) | (*((__be32 *)srqc + 1U) >> 24)) & 4177526783U;
      else {
        __u32 tmp_363;
        
#line 125 
        tmp_363 = __fswab32(*((__be32 *)srqc + 1U));
        
#line 125 
        tmp_364 = tmp_363 & 4177526783U;
      }
      
#line 125 
      if (0 != 0) 
#line 125 
                  tmp_366 = (((((((*((__be32 *)wq + 8U) << 24) | ((*((__be32 *)wq + 8U) << 8) & 16711680U)) | ((*((__be32 *)wq + 8U) >> 8) & 65280U)) | (*((__be32 *)wq + 8U) >> 24)) >> 16UL) + 4294967292U) << 24UL) & 117440512U;
      else {
        __u32 tmp_365;
        
#line 125 
        tmp_365 = __fswab32(*((__be32 *)wq + 8U));
        
#line 125 
        tmp_366 = (((tmp_365 >> 16UL) + 4294967292U) << 24UL) & 117440512U;
      }
      
#line 125 
      if (0 != 0) 
#line 125 
                  tmp_368 = ((((*((__be32 *)srqc + 1U) << 24) | ((*((__be32 *)srqc + 1U) << 8) & 16711680U)) | ((*((__be32 *)srqc + 1U) >> 8) & 65280U)) | (*((__be32 *)srqc + 1U) >> 24)) & 4177526783U;
      else {
        __u32 tmp_367;
        
#line 125 
        tmp_367 = __fswab32(*((__be32 *)srqc + 1U));
        
#line 125 
        tmp_368 = tmp_367 & 4177526783U;
      }
      
#line 125 
      if (0 != 0) 
#line 125 
                  tmp_370 = (((((((*((__be32 *)wq + 8U) << 24) | ((*((__be32 *)wq + 8U) << 8) & 16711680U)) | ((*((__be32 *)wq + 8U) >> 8) & 65280U)) | (*((__be32 *)wq + 8U) >> 24)) >> 16UL) + 4294967292U) << 24UL) & 117440512U;
      else {
        __u32 tmp_369;
        
#line 125 
        tmp_369 = __fswab32(*((__be32 *)wq + 8U));
        
#line 125 
        tmp_370 = (((tmp_369 >> 16UL) + 4294967292U) << 24UL) & 117440512U;
      }
      
#line 125 
      if (0 != 0) 
#line 125 
                  tmp_372 = ((((*((__be32 *)srqc + 1U) << 24) | ((*((__be32 *)srqc + 1U) << 8) & 16711680U)) | ((*((__be32 *)srqc + 1U) >> 8) & 65280U)) | (*((__be32 *)srqc + 1U) >> 24)) & 4177526783U;
      else {
        __u32 tmp_371;
        
#line 125 
        tmp_371 = __fswab32(*((__be32 *)srqc + 1U));
        
#line 125 
        tmp_372 = tmp_371 & 4177526783U;
      }
      
#line 125 
      if (0 != 0) 
#line 125 
                  tmp_374 = (((((((*((__be32 *)wq + 8U) << 24) | ((*((__be32 *)wq + 8U) << 8) & 16711680U)) | ((*((__be32 *)wq + 8U) >> 8) & 65280U)) | (*((__be32 *)wq + 8U) >> 24)) >> 16UL) + 4294967292U) << 24UL) & 117440512U;
      else {
        __u32 tmp_373;
        
#line 125 
        tmp_373 = __fswab32(*((__be32 *)wq + 8U));
        
#line 125 
        tmp_374 = (((tmp_373 >> 16UL) + 4294967292U) << 24UL) & 117440512U;
      }
      
#line 125 
      *((__be32 *)srqc + 1U) = ((((tmp_360 | tmp_362) << 24) | (((tmp_364 | tmp_366) << 8) & 16711680U)) | (((tmp_368 | tmp_370) >> 8) & 65280U)) | ((tmp_372 | tmp_374) >> 24);
    }
    else {
      __u32 tmp_379;
      unsigned int tmp_376;
      unsigned int tmp_378;
      
#line 125 
      if (0 != 0) 
#line 125 
                  tmp_376 = ((((*((__be32 *)srqc + 1U) << 24) | ((*((__be32 *)srqc + 1U) << 8) & 16711680U)) | ((*((__be32 *)srqc + 1U) >> 8) & 65280U)) | (*((__be32 *)srqc + 1U) >> 24)) & 4177526783U;
      else {
        __u32 tmp_375;
        
#line 125 
        tmp_375 = __fswab32(*((__be32 *)srqc + 1U));
        
#line 125 
        tmp_376 = tmp_375 & 4177526783U;
      }
      
#line 125 
      if (0 != 0) 
#line 125 
                  tmp_378 = (((((((*((__be32 *)wq + 8U) << 24) | ((*((__be32 *)wq + 8U) << 8) & 16711680U)) | ((*((__be32 *)wq + 8U) >> 8) & 65280U)) | (*((__be32 *)wq + 8U) >> 24)) >> 16UL) + 4294967292U) << 24UL) & 117440512U;
      else {
        __u32 tmp_377;
        
#line 125 
        tmp_377 = __fswab32(*((__be32 *)wq + 8U));
        
#line 125 
        tmp_378 = (((tmp_377 >> 16UL) + 4294967292U) << 24UL) & 117440512U;
      }
      
#line 125 
      tmp_379 = __fswab32(tmp_376 | tmp_378);
      
#line 125 
      *((__be32 *)srqc + 1U) = tmp_379;
    }
    {
      
#line 126 
      bool __cond_17 = (_Bool)0;
      
#line 126 
      if ((int)__cond_17 != 0) 
#line 126 
                               __compiletime_assert_126(); else ;
    }
    
#line 126 
    if (0 != 0) {
      unsigned int tmp_385;
      unsigned int tmp_387;
      unsigned int tmp_389;
      unsigned int tmp_391;
      unsigned int tmp_393;
      unsigned int tmp_395;
      unsigned int tmp_397;
      unsigned int tmp_399;
      
#line 126 
      if (0 != 0) 
#line 126 
                  tmp_385 = ((((*((__be32 *)srqc) << 24) | ((*((__be32 *)srqc) << 8) & 16711680U)) | ((*((__be32 *)srqc) >> 8) & 65280U)) | (*((__be32 *)srqc) >> 24)) & 4043309055U;
      else {
        __u32 tmp_384;
        
#line 126 
        tmp_384 = __fswab32(*((__be32 *)srqc));
        
#line 126 
        tmp_385 = tmp_384 & 4043309055U;
      }
      
#line 126 
      if (0 != 0) 
#line 126 
                  tmp_387 = (((((*((__be32 *)wq + 8U) << 24) | ((*((__be32 *)wq + 8U) << 8) & 16711680U)) | ((*((__be32 *)wq + 8U) >> 8) & 65280U)) | (*((__be32 *)wq + 8U) >> 24)) << 24UL) & 251658240U;
      else {
        __u32 tmp_386;
        
#line 126 
        tmp_386 = __fswab32(*((__be32 *)wq + 8U));
        
#line 126 
        tmp_387 = (tmp_386 << 24UL) & 251658240U;
      }
      
#line 126 
      if (0 != 0) 
#line 126 
                  tmp_389 = ((((*((__be32 *)srqc) << 24) | ((*((__be32 *)srqc) << 8) & 16711680U)) | ((*((__be32 *)srqc) >> 8) & 65280U)) | (*((__be32 *)srqc) >> 24)) & 4043309055U;
      else {
        __u32 tmp_388;
        
#line 126 
        tmp_388 = __fswab32(*((__be32 *)srqc));
        
#line 126 
        tmp_389 = tmp_388 & 4043309055U;
      }
      
#line 126 
      if (0 != 0) 
#line 126 
                  tmp_391 = (((((*((__be32 *)wq + 8U) << 24) | ((*((__be32 *)wq + 8U) << 8) & 16711680U)) | ((*((__be32 *)wq + 8U) >> 8) & 65280U)) | (*((__be32 *)wq + 8U) >> 24)) << 24UL) & 251658240U;
      else {
        __u32 tmp_390;
        
#line 126 
        tmp_390 = __fswab32(*((__be32 *)wq + 8U));
        
#line 126 
        tmp_391 = (tmp_390 << 24UL) & 251658240U;
      }
      
#line 126 
      if (0 != 0) 
#line 126 
                  tmp_393 = ((((*((__be32 *)srqc) << 24) | ((*((__be32 *)srqc) << 8) & 16711680U)) | ((*((__be32 *)srqc) >> 8) & 65280U)) | (*((__be32 *)srqc) >> 24)) & 4043309055U;
      else {
        __u32 tmp_392;
        
#line 126 
        tmp_392 = __fswab32(*((__be32 *)srqc));
        
#line 126 
        tmp_393 = tmp_392 & 4043309055U;
      }
      
#line 126 
      if (0 != 0) 
#line 126 
                  tmp_395 = (((((*((__be32 *)wq + 8U) << 24) | ((*((__be32 *)wq + 8U) << 8) & 16711680U)) | ((*((__be32 *)wq + 8U) >> 8) & 65280U)) | (*((__be32 *)wq + 8U) >> 24)) << 24UL) & 251658240U;
      else {
        __u32 tmp_394;
        
#line 126 
        tmp_394 = __fswab32(*((__be32 *)wq + 8U));
        
#line 126 
        tmp_395 = (tmp_394 << 24UL) & 251658240U;
      }
      
#line 126 
      if (0 != 0) 
#line 126 
                  tmp_397 = ((((*((__be32 *)srqc) << 24) | ((*((__be32 *)srqc) << 8) & 16711680U)) | ((*((__be32 *)srqc) >> 8) & 65280U)) | (*((__be32 *)srqc) >> 24)) & 4043309055U;
      else {
        __u32 tmp_396;
        
#line 126 
        tmp_396 = __fswab32(*((__be32 *)srqc));
        
#line 126 
        tmp_397 = tmp_396 & 4043309055U;
      }
      
#line 126 
      if (0 != 0) 
#line 126 
                  tmp_399 = (((((*((__be32 *)wq + 8U) << 24) | ((*((__be32 *)wq + 8U) << 8) & 16711680U)) | ((*((__be32 *)wq + 8U) >> 8) & 65280U)) | (*((__be32 *)wq + 8U) >> 24)) << 24UL) & 251658240U;
      else {
        __u32 tmp_398;
        
#line 126 
        tmp_398 = __fswab32(*((__be32 *)wq + 8U));
        
#line 126 
        tmp_399 = (tmp_398 << 24UL) & 251658240U;
      }
      
#line 126 
      *((__be32 *)srqc) = ((((tmp_385 | tmp_387) << 24) | (((tmp_389 | tmp_391) << 8) & 16711680U)) | (((tmp_393 | tmp_395) >> 8) & 65280U)) | ((tmp_397 | tmp_399) >> 24);
    }
    else {
      __u32 tmp_404;
      unsigned int tmp_401;
      unsigned int tmp_403;
      
#line 126 
      if (0 != 0) 
#line 126 
                  tmp_401 = ((((*((__be32 *)srqc) << 24) | ((*((__be32 *)srqc) << 8) & 16711680U)) | ((*((__be32 *)srqc) >> 8) & 65280U)) | (*((__be32 *)srqc) >> 24)) & 4043309055U;
      else {
        __u32 tmp_400;
        
#line 126 
        tmp_400 = __fswab32(*((__be32 *)srqc));
        
#line 126 
        tmp_401 = tmp_400 & 4043309055U;
      }
      
#line 126 
      if (0 != 0) 
#line 126 
                  tmp_403 = (((((*((__be32 *)wq + 8U) << 24) | ((*((__be32 *)wq + 8U) << 8) & 16711680U)) | ((*((__be32 *)wq + 8U) >> 8) & 65280U)) | (*((__be32 *)wq + 8U) >> 24)) << 24UL) & 251658240U;
      else {
        __u32 tmp_402;
        
#line 126 
        tmp_402 = __fswab32(*((__be32 *)wq + 8U));
        
#line 126 
        tmp_403 = (tmp_402 << 24UL) & 251658240U;
      }
      
#line 126 
      tmp_404 = __fswab32(tmp_401 | tmp_403);
      
#line 126 
      *((__be32 *)srqc) = tmp_404;
    }
    {
      
#line 127 
      bool __cond_18 = (_Bool)0;
      
#line 127 
      if ((int)__cond_18 != 0) 
#line 127 
                               __compiletime_assert_127(); else ;
    }
    
#line 127 
    if (0 != 0) {
      unsigned int tmp_410;
      unsigned int tmp_412;
      unsigned int tmp_414;
      unsigned int tmp_416;
      unsigned int tmp_418;
      unsigned int tmp_420;
      unsigned int tmp_422;
      unsigned int tmp_424;
      
#line 127 
      if (0 != 0) 
#line 127 
                  tmp_410 = ((((*((__be32 *)srqc + 2U) << 24) | ((*((__be32 *)srqc + 2U) << 8) & 16711680U)) | ((*((__be32 *)srqc + 2U) >> 8) & 65280U)) | (*((__be32 *)srqc + 2U) >> 24)) & 67108863U;
      else {
        __u32 tmp_409;
        
#line 127 
        tmp_409 = __fswab32(*((__be32 *)srqc + 2U));
        
#line 127 
        tmp_410 = tmp_409 & 67108863U;
      }
      
#line 127 
      if (0 != 0) 
#line 127 
                  tmp_412 = ((((((*((__be32 *)wq + 1U) << 24) | ((*((__be32 *)wq + 1U) << 8) & 16711680U)) | ((*((__be32 *)wq + 1U) >> 8) & 65280U)) | (*((__be32 *)wq + 1U) >> 24)) >> 16UL) << 26UL) & 2080374784U;
      else {
        __u32 tmp_411;
        
#line 127 
        tmp_411 = __fswab32(*((__be32 *)wq + 1U));
        
#line 127 
        tmp_412 = ((tmp_411 >> 16UL) << 26UL) & 2080374784U;
      }
      
#line 127 
      if (0 != 0) 
#line 127 
                  tmp_414 = ((((*((__be32 *)srqc + 2U) << 24) | ((*((__be32 *)srqc + 2U) << 8) & 16711680U)) | ((*((__be32 *)srqc + 2U) >> 8) & 65280U)) | (*((__be32 *)srqc + 2U) >> 24)) & 67108863U;
      else {
        __u32 tmp_413;
        
#line 127 
        tmp_413 = __fswab32(*((__be32 *)srqc + 2U));
        
#line 127 
        tmp_414 = tmp_413 & 67108863U;
      }
      
#line 127 
      if (0 != 0) 
#line 127 
                  tmp_416 = ((((((*((__be32 *)wq + 1U) << 24) | ((*((__be32 *)wq + 1U) << 8) & 16711680U)) | ((*((__be32 *)wq + 1U) >> 8) & 65280U)) | (*((__be32 *)wq + 1U) >> 24)) >> 16UL) << 26UL) & 2080374784U;
      else {
        __u32 tmp_415;
        
#line 127 
        tmp_415 = __fswab32(*((__be32 *)wq + 1U));
        
#line 127 
        tmp_416 = ((tmp_415 >> 16UL) << 26UL) & 2080374784U;
      }
      
#line 127 
      if (0 != 0) 
#line 127 
                  tmp_418 = ((((*((__be32 *)srqc + 2U) << 24) | ((*((__be32 *)srqc + 2U) << 8) & 16711680U)) | ((*((__be32 *)srqc + 2U) >> 8) & 65280U)) | (*((__be32 *)srqc + 2U) >> 24)) & 67108863U;
      else {
        __u32 tmp_417;
        
#line 127 
        tmp_417 = __fswab32(*((__be32 *)srqc + 2U));
        
#line 127 
        tmp_418 = tmp_417 & 67108863U;
      }
      
#line 127 
      if (0 != 0) 
#line 127 
                  tmp_420 = ((((((*((__be32 *)wq + 1U) << 24) | ((*((__be32 *)wq + 1U) << 8) & 16711680U)) | ((*((__be32 *)wq + 1U) >> 8) & 65280U)) | (*((__be32 *)wq + 1U) >> 24)) >> 16UL) << 26UL) & 2080374784U;
      else {
        __u32 tmp_419;
        
#line 127 
        tmp_419 = __fswab32(*((__be32 *)wq + 1U));
        
#line 127 
        tmp_420 = ((tmp_419 >> 16UL) << 26UL) & 2080374784U;
      }
      
#line 127 
      if (0 != 0) 
#line 127 
                  tmp_422 = ((((*((__be32 *)srqc + 2U) << 24) | ((*((__be32 *)srqc + 2U) << 8) & 16711680U)) | ((*((__be32 *)srqc + 2U) >> 8) & 65280U)) | (*((__be32 *)srqc + 2U) >> 24)) & 67108863U;
      else {
        __u32 tmp_421;
        
#line 127 
        tmp_421 = __fswab32(*((__be32 *)srqc + 2U));
        
#line 127 
        tmp_422 = tmp_421 & 67108863U;
      }
      
#line 127 
      if (0 != 0) 
#line 127 
                  tmp_424 = ((((((*((__be32 *)wq + 1U) << 24) | ((*((__be32 *)wq + 1U) << 8) & 16711680U)) | ((*((__be32 *)wq + 1U) >> 8) & 65280U)) | (*((__be32 *)wq + 1U) >> 24)) >> 16UL) << 26UL) & 2080374784U;
      else {
        __u32 tmp_423;
        
#line 127 
        tmp_423 = __fswab32(*((__be32 *)wq + 1U));
        
#line 127 
        tmp_424 = ((tmp_423 >> 16UL) << 26UL) & 2080374784U;
      }
      
#line 127 
      *((__be32 *)srqc + 2U) = ((((tmp_410 | tmp_412) << 24) | (((tmp_414 | tmp_416) << 8) & 16711680U)) | (((tmp_418 | tmp_420) >> 8) & 65280U)) | ((tmp_422 | tmp_424) >> 24);
    }
    else {
      __u32 tmp_429;
      unsigned int tmp_426;
      unsigned int tmp_428;
      
#line 127 
      if (0 != 0) 
#line 127 
                  tmp_426 = ((((*((__be32 *)srqc + 2U) << 24) | ((*((__be32 *)srqc + 2U) << 8) & 16711680U)) | ((*((__be32 *)srqc + 2U) >> 8) & 65280U)) | (*((__be32 *)srqc + 2U) >> 24)) & 67108863U;
      else {
        __u32 tmp_425;
        
#line 127 
        tmp_425 = __fswab32(*((__be32 *)srqc + 2U));
        
#line 127 
        tmp_426 = tmp_425 & 67108863U;
      }
      
#line 127 
      if (0 != 0) 
#line 127 
                  tmp_428 = ((((((*((__be32 *)wq + 1U) << 24) | ((*((__be32 *)wq + 1U) << 8) & 16711680U)) | ((*((__be32 *)wq + 1U) >> 8) & 65280U)) | (*((__be32 *)wq + 1U) >> 24)) >> 16UL) << 26UL) & 2080374784U;
      else {
        __u32 tmp_427;
        
#line 127 
        tmp_427 = __fswab32(*((__be32 *)wq + 1U));
        
#line 127 
        tmp_428 = ((tmp_427 >> 16UL) << 26UL) & 2080374784U;
      }
      
#line 127 
      tmp_429 = __fswab32(tmp_426 | tmp_428);
      
#line 127 
      *((__be32 *)srqc + 2U) = tmp_429;
    }
    {
      
#line 128 
      bool __cond_19 = (_Bool)0;
      
#line 128 
      if ((int)__cond_19 != 0) 
#line 128 
                               __compiletime_assert_128(); else ;
    }
    
#line 128 
    if (0 != 0) {
      unsigned int tmp_435;
      unsigned int tmp_437;
      unsigned int tmp_439;
      unsigned int tmp_441;
      unsigned int tmp_443;
      unsigned int tmp_445;
      unsigned int tmp_447;
      unsigned int tmp_449;
      
#line 128 
      if (0 != 0) 
#line 128 
                  tmp_435 = ((((*((__be32 *)srqc + 7U) << 24) | ((*((__be32 *)srqc + 7U) << 8) & 16711680U)) | ((*((__be32 *)srqc + 7U) >> 8) & 65280U)) | (*((__be32 *)srqc + 7U) >> 24)) & 65535U;
      else {
        __u32 tmp_434;
        
#line 128 
        tmp_434 = __fswab32(*((__be32 *)srqc + 7U));
        
#line 128 
        tmp_435 = tmp_434 & 65535U;
      }
      
#line 128 
      if (0 != 0) 
#line 128 
                  tmp_437 = ((((*((__be32 *)wq + 1U) << 24) | ((*((__be32 *)wq + 1U) << 8) & 16711680U)) | ((*((__be32 *)wq + 1U) >> 8) & 65280U)) | (*((__be32 *)wq + 1U) >> 24)) << 16UL;
      else {
        __u32 tmp_436;
        
#line 128 
        tmp_436 = __fswab32(*((__be32 *)wq + 1U));
        
#line 128 
        tmp_437 = tmp_436 << 16UL;
      }
      
#line 128 
      if (0 != 0) 
#line 128 
                  tmp_439 = ((((*((__be32 *)srqc + 7U) << 24) | ((*((__be32 *)srqc + 7U) << 8) & 16711680U)) | ((*((__be32 *)srqc + 7U) >> 8) & 65280U)) | (*((__be32 *)srqc + 7U) >> 24)) & 65535U;
      else {
        __u32 tmp_438;
        
#line 128 
        tmp_438 = __fswab32(*((__be32 *)srqc + 7U));
        
#line 128 
        tmp_439 = tmp_438 & 65535U;
      }
      
#line 128 
      if (0 != 0) 
#line 128 
                  tmp_441 = ((((*((__be32 *)wq + 1U) << 24) | ((*((__be32 *)wq + 1U) << 8) & 16711680U)) | ((*((__be32 *)wq + 1U) >> 8) & 65280U)) | (*((__be32 *)wq + 1U) >> 24)) << 16UL;
      else {
        __u32 tmp_440;
        
#line 128 
        tmp_440 = __fswab32(*((__be32 *)wq + 1U));
        
#line 128 
        tmp_441 = tmp_440 << 16UL;
      }
      
#line 128 
      if (0 != 0) 
#line 128 
                  tmp_443 = ((((*((__be32 *)srqc + 7U) << 24) | ((*((__be32 *)srqc + 7U) << 8) & 16711680U)) | ((*((__be32 *)srqc + 7U) >> 8) & 65280U)) | (*((__be32 *)srqc + 7U) >> 24)) & 65535U;
      else {
        __u32 tmp_442;
        
#line 128 
        tmp_442 = __fswab32(*((__be32 *)srqc + 7U));
        
#line 128 
        tmp_443 = tmp_442 & 65535U;
      }
      
#line 128 
      if (0 != 0) 
#line 128 
                  tmp_445 = ((((*((__be32 *)wq + 1U) << 24) | ((*((__be32 *)wq + 1U) << 8) & 16711680U)) | ((*((__be32 *)wq + 1U) >> 8) & 65280U)) | (*((__be32 *)wq + 1U) >> 24)) << 16UL;
      else {
        __u32 tmp_444;
        
#line 128 
        tmp_444 = __fswab32(*((__be32 *)wq + 1U));
        
#line 128 
        tmp_445 = tmp_444 << 16UL;
      }
      
#line 128 
      if (0 != 0) 
#line 128 
                  tmp_447 = ((((*((__be32 *)srqc + 7U) << 24) | ((*((__be32 *)srqc + 7U) << 8) & 16711680U)) | ((*((__be32 *)srqc + 7U) >> 8) & 65280U)) | (*((__be32 *)srqc + 7U) >> 24)) & 65535U;
      else {
        __u32 tmp_446;
        
#line 128 
        tmp_446 = __fswab32(*((__be32 *)srqc + 7U));
        
#line 128 
        tmp_447 = tmp_446 & 65535U;
      }
      
#line 128 
      if (0 != 0) 
#line 128 
                  tmp_449 = ((((*((__be32 *)wq + 1U) << 24) | ((*((__be32 *)wq + 1U) << 8) & 16711680U)) | ((*((__be32 *)wq + 1U) >> 8) & 65280U)) | (*((__be32 *)wq + 1U) >> 24)) << 16UL;
      else {
        __u32 tmp_448;
        
#line 128 
        tmp_448 = __fswab32(*((__be32 *)wq + 1U));
        
#line 128 
        tmp_449 = tmp_448 << 16UL;
      }
      
#line 128 
      *((__be32 *)srqc + 7U) = ((((tmp_435 | tmp_437) << 24) | (((tmp_439 | tmp_441) << 8) & 16711680U)) | (((tmp_443 | tmp_445) >> 8) & 65280U)) | ((tmp_447 | tmp_449) >> 24);
    }
    else {
      __u32 tmp_454;
      unsigned int tmp_451;
      unsigned int tmp_453;
      
#line 128 
      if (0 != 0) 
#line 128 
                  tmp_451 = ((((*((__be32 *)srqc + 7U) << 24) | ((*((__be32 *)srqc + 7U) << 8) & 16711680U)) | ((*((__be32 *)srqc + 7U) >> 8) & 65280U)) | (*((__be32 *)srqc + 7U) >> 24)) & 65535U;
      else {
        __u32 tmp_450;
        
#line 128 
        tmp_450 = __fswab32(*((__be32 *)srqc + 7U));
        
#line 128 
        tmp_451 = tmp_450 & 65535U;
      }
      
#line 128 
      if (0 != 0) 
#line 128 
                  tmp_453 = ((((*((__be32 *)wq + 1U) << 24) | ((*((__be32 *)wq + 1U) << 8) & 16711680U)) | ((*((__be32 *)wq + 1U) >> 8) & 65280U)) | (*((__be32 *)wq + 1U) >> 24)) << 16UL;
      else {
        __u32 tmp_452;
        
#line 128 
        tmp_452 = __fswab32(*((__be32 *)wq + 1U));
        
#line 128 
        tmp_453 = tmp_452 << 16UL;
      }
      
#line 128 
      tmp_454 = __fswab32(tmp_451 | tmp_453);
      
#line 128 
      *((__be32 *)srqc + 7U) = tmp_454;
    }
    {
      
#line 129 
      bool __cond_20 = (_Bool)0;
      
#line 129 
      if ((int)__cond_20 != 0) 
#line 129 
                               __compiletime_assert_129(); else ;
    }
    
#line 129 
    if (0 != 0) {
      unsigned int tmp_460;
      unsigned int tmp_462;
      unsigned int tmp_464;
      unsigned int tmp_466;
      unsigned int tmp_468;
      unsigned int tmp_470;
      unsigned int tmp_472;
      unsigned int tmp_474;
      
#line 129 
      if (0 != 0) 
#line 129 
                  tmp_460 = ((((*((__be32 *)srqc + 6U) << 24) | ((*((__be32 *)srqc + 6U) << 8) & 16711680U)) | ((*((__be32 *)srqc + 6U) >> 8) & 65280U)) | (*((__be32 *)srqc + 6U) >> 24)) & 4278190080U;
      else {
        __u32 tmp_459;
        
#line 129 
        tmp_459 = __fswab32(*((__be32 *)srqc + 6U));
        
#line 129 
        tmp_460 = tmp_459 & 4278190080U;
      }
      
#line 129 
      if (0 != 0) 
#line 129 
                  tmp_462 = ((((*((__be32 *)wq + 2U) << 24) | ((*((__be32 *)wq + 2U) << 8) & 16711680U)) | ((*((__be32 *)wq + 2U) >> 8) & 65280U)) | (*((__be32 *)wq + 2U) >> 24)) & 16777215U;
      else {
        __u32 tmp_461;
        
#line 129 
        tmp_461 = __fswab32(*((__be32 *)wq + 2U));
        
#line 129 
        tmp_462 = tmp_461 & 16777215U;
      }
      
#line 129 
      if (0 != 0) 
#line 129 
                  tmp_464 = ((((*((__be32 *)srqc + 6U) << 24) | ((*((__be32 *)srqc + 6U) << 8) & 16711680U)) | ((*((__be32 *)srqc + 6U) >> 8) & 65280U)) | (*((__be32 *)srqc + 6U) >> 24)) & 4278190080U;
      else {
        __u32 tmp_463;
        
#line 129 
        tmp_463 = __fswab32(*((__be32 *)srqc + 6U));
        
#line 129 
        tmp_464 = tmp_463 & 4278190080U;
      }
      
#line 129 
      if (0 != 0) 
#line 129 
                  tmp_466 = ((((*((__be32 *)wq + 2U) << 24) | ((*((__be32 *)wq + 2U) << 8) & 16711680U)) | ((*((__be32 *)wq + 2U) >> 8) & 65280U)) | (*((__be32 *)wq + 2U) >> 24)) & 16777215U;
      else {
        __u32 tmp_465;
        
#line 129 
        tmp_465 = __fswab32(*((__be32 *)wq + 2U));
        
#line 129 
        tmp_466 = tmp_465 & 16777215U;
      }
      
#line 129 
      if (0 != 0) 
#line 129 
                  tmp_468 = ((((*((__be32 *)srqc + 6U) << 24) | ((*((__be32 *)srqc + 6U) << 8) & 16711680U)) | ((*((__be32 *)srqc + 6U) >> 8) & 65280U)) | (*((__be32 *)srqc + 6U) >> 24)) & 4278190080U;
      else {
        __u32 tmp_467;
        
#line 129 
        tmp_467 = __fswab32(*((__be32 *)srqc + 6U));
        
#line 129 
        tmp_468 = tmp_467 & 4278190080U;
      }
      
#line 129 
      if (0 != 0) 
#line 129 
                  tmp_470 = ((((*((__be32 *)wq + 2U) << 24) | ((*((__be32 *)wq + 2U) << 8) & 16711680U)) | ((*((__be32 *)wq + 2U) >> 8) & 65280U)) | (*((__be32 *)wq + 2U) >> 24)) & 16777215U;
      else {
        __u32 tmp_469;
        
#line 129 
        tmp_469 = __fswab32(*((__be32 *)wq + 2U));
        
#line 129 
        tmp_470 = tmp_469 & 16777215U;
      }
      
#line 129 
      if (0 != 0) 
#line 129 
                  tmp_472 = ((((*((__be32 *)srqc + 6U) << 24) | ((*((__be32 *)srqc + 6U) << 8) & 16711680U)) | ((*((__be32 *)srqc + 6U) >> 8) & 65280U)) | (*((__be32 *)srqc + 6U) >> 24)) & 4278190080U;
      else {
        __u32 tmp_471;
        
#line 129 
        tmp_471 = __fswab32(*((__be32 *)srqc + 6U));
        
#line 129 
        tmp_472 = tmp_471 & 4278190080U;
      }
      
#line 129 
      if (0 != 0) 
#line 129 
                  tmp_474 = ((((*((__be32 *)wq + 2U) << 24) | ((*((__be32 *)wq + 2U) << 8) & 16711680U)) | ((*((__be32 *)wq + 2U) >> 8) & 65280U)) | (*((__be32 *)wq + 2U) >> 24)) & 16777215U;
      else {
        __u32 tmp_473;
        
#line 129 
        tmp_473 = __fswab32(*((__be32 *)wq + 2U));
        
#line 129 
        tmp_474 = tmp_473 & 16777215U;
      }
      
#line 129 
      *((__be32 *)srqc + 6U) = ((((tmp_460 | tmp_462) << 24) | (((tmp_464 | tmp_466) << 8) & 16711680U)) | (((tmp_468 | tmp_470) >> 8) & 65280U)) | ((tmp_472 | tmp_474) >> 24);
    }
    else {
      __u32 tmp_479;
      unsigned int tmp_476;
      unsigned int tmp_478;
      
#line 129 
      if (0 != 0) 
#line 129 
                  tmp_476 = ((((*((__be32 *)srqc + 6U) << 24) | ((*((__be32 *)srqc + 6U) << 8) & 16711680U)) | ((*((__be32 *)srqc + 6U) >> 8) & 65280U)) | (*((__be32 *)srqc + 6U) >> 24)) & 4278190080U;
      else {
        __u32 tmp_475;
        
#line 129 
        tmp_475 = __fswab32(*((__be32 *)srqc + 6U));
        
#line 129 
        tmp_476 = tmp_475 & 4278190080U;
      }
      
#line 129 
      if (0 != 0) 
#line 129 
                  tmp_478 = ((((*((__be32 *)wq + 2U) << 24) | ((*((__be32 *)wq + 2U) << 8) & 16711680U)) | ((*((__be32 *)wq + 2U) >> 8) & 65280U)) | (*((__be32 *)wq + 2U) >> 24)) & 16777215U;
      else {
        __u32 tmp_477;
        
#line 129 
        tmp_477 = __fswab32(*((__be32 *)wq + 2U));
        
#line 129 
        tmp_478 = tmp_477 & 16777215U;
      }
      
#line 129 
      tmp_479 = __fswab32(tmp_476 | tmp_478);
      
#line 129 
      *((__be32 *)srqc + 6U) = tmp_479;
    }
    {
      
#line 130 
      bool __cond_21 = (_Bool)0;
      
#line 130 
      if ((int)__cond_21 != 0) 
#line 130 
                               __compiletime_assert_130(); else ;
    }
    {
      
#line 130 
      bool __cond_22 = (_Bool)0;
      
#line 130 
      if ((int)__cond_22 != 0) 
#line 130 
                               __compiletime_assert_130(); else ;
    }
    
#line 130 
    if (0 != 0) {
      unsigned long long tmp_483;
      unsigned long long tmp_485;
      unsigned long long tmp_487;
      unsigned long long tmp_489;
      unsigned long long tmp_491;
      unsigned long long tmp_493;
      unsigned long long tmp_495;
      unsigned long long tmp_497;
      
#line 130 
      if (0 != 0) 
#line 130 
                  tmp_483 = ((((((((*((__be64 *)wq + 2U) << 56) | ((*((__be64 *)wq + 2U) << 40) & 71776119061217280ULL)) | ((*((__be64 *)wq + 2U) << 24) & 280375465082880ULL)) | ((*((__be64 *)wq + 2U) << 8) & 1095216660480ULL)) | ((*((__be64 *)wq + 2U) >> 8) & 4278190080ULL)) | ((*((__be64 *)wq + 2U) >> 24) & 16711680ULL)) | ((*((__be64 *)wq + 2U) >> 40) & 65280ULL)) | (*((__be64 *)wq + 2U) >> 56)) << 56;
      else {
        __u64 tmp_482;
        
#line 130 
        tmp_482 = __fswab64(*((__be64 *)wq + 2U));
        
#line 130 
        tmp_483 = tmp_482 << 56;
      }
      
#line 130 
      if (0 != 0) 
#line 130 
                  tmp_485 = (((((((((*((__be64 *)wq + 2U) << 56) | ((*((__be64 *)wq + 2U) << 40) & 71776119061217280ULL)) | ((*((__be64 *)wq + 2U) << 24) & 280375465082880ULL)) | ((*((__be64 *)wq + 2U) << 8) & 1095216660480ULL)) | ((*((__be64 *)wq + 2U) >> 8) & 4278190080ULL)) | ((*((__be64 *)wq + 2U) >> 24) & 16711680ULL)) | ((*((__be64 *)wq + 2U) >> 40) & 65280ULL)) | (*((__be64 *)wq + 2U) >> 56)) << 40) & 71776119061217280ULL;
      else {
        __u64 tmp_484;
        
#line 130 
        tmp_484 = __fswab64(*((__be64 *)wq + 2U));
        
#line 130 
        tmp_485 = (tmp_484 << 40) & 71776119061217280ULL;
      }
      
#line 130 
      if (0 != 0) 
#line 130 
                  tmp_487 = (((((((((*((__be64 *)wq + 2U) << 56) | ((*((__be64 *)wq + 2U) << 40) & 71776119061217280ULL)) | ((*((__be64 *)wq + 2U) << 24) & 280375465082880ULL)) | ((*((__be64 *)wq + 2U) << 8) & 1095216660480ULL)) | ((*((__be64 *)wq + 2U) >> 8) & 4278190080ULL)) | ((*((__be64 *)wq + 2U) >> 24) & 16711680ULL)) | ((*((__be64 *)wq + 2U) >> 40) & 65280ULL)) | (*((__be64 *)wq + 2U) >> 56)) << 24) & 280375465082880ULL;
      else {
        __u64 tmp_486;
        
#line 130 
        tmp_486 = __fswab64(*((__be64 *)wq + 2U));
        
#line 130 
        tmp_487 = (tmp_486 << 24) & 280375465082880ULL;
      }
      
#line 130 
      if (0 != 0) 
#line 130 
                  tmp_489 = (((((((((*((__be64 *)wq + 2U) << 56) | ((*((__be64 *)wq + 2U) << 40) & 71776119061217280ULL)) | ((*((__be64 *)wq + 2U) << 24) & 280375465082880ULL)) | ((*((__be64 *)wq + 2U) << 8) & 1095216660480ULL)) | ((*((__be64 *)wq + 2U) >> 8) & 4278190080ULL)) | ((*((__be64 *)wq + 2U) >> 24) & 16711680ULL)) | ((*((__be64 *)wq + 2U) >> 40) & 65280ULL)) | (*((__be64 *)wq + 2U) >> 56)) << 8) & 1095216660480ULL;
      else {
        __u64 tmp_488;
        
#line 130 
        tmp_488 = __fswab64(*((__be64 *)wq + 2U));
        
#line 130 
        tmp_489 = (tmp_488 << 8) & 1095216660480ULL;
      }
      
#line 130 
      if (0 != 0) 
#line 130 
                  tmp_491 = (((((((((*((__be64 *)wq + 2U) << 56) | ((*((__be64 *)wq + 2U) << 40) & 71776119061217280ULL)) | ((*((__be64 *)wq + 2U) << 24) & 280375465082880ULL)) | ((*((__be64 *)wq + 2U) << 8) & 1095216660480ULL)) | ((*((__be64 *)wq + 2U) >> 8) & 4278190080ULL)) | ((*((__be64 *)wq + 2U) >> 24) & 16711680ULL)) | ((*((__be64 *)wq + 2U) >> 40) & 65280ULL)) | (*((__be64 *)wq + 2U) >> 56)) >> 8) & 4278190080ULL;
      else {
        __u64 tmp_490;
        
#line 130 
        tmp_490 = __fswab64(*((__be64 *)wq + 2U));
        
#line 130 
        tmp_491 = (tmp_490 >> 8) & 4278190080ULL;
      }
      
#line 130 
      if (0 != 0) 
#line 130 
                  tmp_493 = (((((((((*((__be64 *)wq + 2U) << 56) | ((*((__be64 *)wq + 2U) << 40) & 71776119061217280ULL)) | ((*((__be64 *)wq + 2U) << 24) & 280375465082880ULL)) | ((*((__be64 *)wq + 2U) << 8) & 1095216660480ULL)) | ((*((__be64 *)wq + 2U) >> 8) & 4278190080ULL)) | ((*((__be64 *)wq + 2U) >> 24) & 16711680ULL)) | ((*((__be64 *)wq + 2U) >> 40) & 65280ULL)) | (*((__be64 *)wq + 2U) >> 56)) >> 24) & 16711680ULL;
      else {
        __u64 tmp_492;
        
#line 130 
        tmp_492 = __fswab64(*((__be64 *)wq + 2U));
        
#line 130 
        tmp_493 = (tmp_492 >> 24) & 16711680ULL;
      }
      
#line 130 
      if (0 != 0) 
#line 130 
                  tmp_495 = (((((((((*((__be64 *)wq + 2U) << 56) | ((*((__be64 *)wq + 2U) << 40) & 71776119061217280ULL)) | ((*((__be64 *)wq + 2U) << 24) & 280375465082880ULL)) | ((*((__be64 *)wq + 2U) << 8) & 1095216660480ULL)) | ((*((__be64 *)wq + 2U) >> 8) & 4278190080ULL)) | ((*((__be64 *)wq + 2U) >> 24) & 16711680ULL)) | ((*((__be64 *)wq + 2U) >> 40) & 65280ULL)) | (*((__be64 *)wq + 2U) >> 56)) >> 40) & 65280ULL;
      else {
        __u64 tmp_494;
        
#line 130 
        tmp_494 = __fswab64(*((__be64 *)wq + 2U));
        
#line 130 
        tmp_495 = (tmp_494 >> 40) & 65280ULL;
      }
      
#line 130 
      if (0 != 0) 
#line 130 
                  tmp_497 = ((((((((*((__be64 *)wq + 2U) << 56) | ((*((__be64 *)wq + 2U) << 40) & 71776119061217280ULL)) | ((*((__be64 *)wq + 2U) << 24) & 280375465082880ULL)) | ((*((__be64 *)wq + 2U) << 8) & 1095216660480ULL)) | ((*((__be64 *)wq + 2U) >> 8) & 4278190080ULL)) | ((*((__be64 *)wq + 2U) >> 24) & 16711680ULL)) | ((*((__be64 *)wq + 2U) >> 40) & 65280ULL)) | (*((__be64 *)wq + 2U) >> 56)) >> 56;
      else {
        __u64 tmp_496;
        
#line 130 
        tmp_496 = __fswab64(*((__be64 *)wq + 2U));
        
#line 130 
        tmp_497 = tmp_496 >> 56;
      }
      
#line 130 
      *((__be64 *)srqc + 5U) = ((((((tmp_483 | tmp_485) | tmp_487) | tmp_489) | tmp_491) | tmp_493) | tmp_495) | tmp_497;
    }
    else {
      __u64 tmp_500;
      unsigned long long tmp_499;
      
#line 130 
      if (0 != 0) 
#line 130 
                  tmp_499 = (((((((*((__be64 *)wq + 2U) << 56) | ((*((__be64 *)wq + 2U) << 40) & 71776119061217280ULL)) | ((*((__be64 *)wq + 2U) << 24) & 280375465082880ULL)) | ((*((__be64 *)wq + 2U) << 8) & 1095216660480ULL)) | ((*((__be64 *)wq + 2U) >> 8) & 4278190080ULL)) | ((*((__be64 *)wq + 2U) >> 24) & 16711680ULL)) | ((*((__be64 *)wq + 2U) >> 40) & 65280ULL)) | (*((__be64 *)wq + 2U) >> 56); else 
                                                                    
#line 130 
                                                                    tmp_499 = __fswab64(*((__be64 *)wq + 2U));
      
#line 130 
      tmp_500 = __fswab64(tmp_499);
      
#line 130 
      *((__be64 *)srqc + 5U) = tmp_500;
    }
  }
  
#line 132 
  return;
}


#line 134  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/srq.c"
struct mlx5_core_srq *mlx5_core_get_srq(struct mlx5_core_dev *dev, u32 srqn)
{
  struct mlx5_core_srq *srq;
  
#line 136 
  struct mlx5_srq_table *table = & dev->priv.srq_table;
  
#line 139 
  ldv_spin_lock_53(& table->lock);
  
#line 141 
  srq = (struct mlx5_core_srq *)radix_tree_lookup(& table->tree,(unsigned long)srqn);
  
#line 142 
  if (srq != (struct mlx5_core_srq *)0) 
#line 143 
                                        atomic_inc_0(& srq->refcount); else ;
  
#line 145 
  ldv_spin_unlock_54(& table->lock);
  
#line 147 
  return srq;
}


#line 149  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/srq.c"
static char const __kstrtab_mlx5_core_get_srq[18U] = {(char)'m', (char)'l', (char)'x', (char)'5', (char)'_', (char)'c', (char)'o', (char)'r', (char)'e', (char)'_', (char)'g', (char)'e', (char)'t', (char)'_', (char)'s', (char)'r', (char)'q', (char)'\000'};

#line 149 
struct kernel_symbol const __ksymtab_mlx5_core_get_srq;


#line 149  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/srq.c"
struct kernel_symbol const __ksymtab_mlx5_core_get_srq = {.value = (unsigned long)(& mlx5_core_get_srq), .name = (char const *)(& __kstrtab_mlx5_core_get_srq)};

#line 151  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/srq.c"
static int create_srq_cmd(struct mlx5_core_dev *dev, struct mlx5_core_srq *srq, struct mlx5_create_srq_mbox_in *in, int inlen)
{
  struct mlx5_create_srq_mbox_out out;
  int err;
  
#line 157 
  memset((void *)(& out),0,16UL);
  
#line 159 
  in->hdr.opcode = (unsigned short)7U;
  
#line 161 
  err = mlx5_cmd_exec_check_status(dev,(u32 *)in,inlen,(u32 *)(& out),16);
  
#line 164 
  if (0 != 0) 
#line 164 
              srq->srqn = ((((out.srqn << 24) | ((out.srqn << 8) & 16711680U)) | ((out.srqn >> 8) & 65280U)) | (out.srqn >> 24)) & 16777215U;
  else {
    __u32 tmp;
    
#line 164 
    tmp = __fswab32(out.srqn);
    
#line 164 
    srq->srqn = tmp & 16777215U;
  }
  
#line 166 
  return err;
}


#line 169  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/srq.c"
static int destroy_srq_cmd(struct mlx5_core_dev *dev, struct mlx5_core_srq *srq)
{
  struct mlx5_destroy_srq_mbox_in in;
  struct mlx5_destroy_srq_mbox_out out;
  int tmp_0;
  
#line 175 
  memset((void *)(& in),0,16UL);
  
#line 176 
  memset((void *)(& out),0,16UL);
  
#line 177 
  in.hdr.opcode = (unsigned short)263U;
  
#line 178 
  if (0 != 0) 
#line 178 
              in.srqn = (((srq->srqn << 24) | ((srq->srqn << 8) & 16711680U)) | ((srq->srqn >> 8) & 65280U)) | (srq->srqn >> 24); else 
                                                                    
#line 178 
                                                                    in.srqn = __fswab32(srq->srqn);
  
#line 180 
  tmp_0 = mlx5_cmd_exec_check_status(dev,(u32 *)(& in),16,(u32 *)(& out),16);
  
#line 180 
  return tmp_0;
}


#line 184  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/srq.c"
static int arm_srq_cmd(struct mlx5_core_dev *dev, struct mlx5_core_srq *srq, u16 lwm, int is_srq)
{
  struct mlx5_arm_srq_mbox_in in;
  struct mlx5_arm_srq_mbox_out out;
  int tmp_3;
  
#line 190 
  memset((void *)(& in),0,16UL);
  
#line 191 
  memset((void *)(& out),0,16UL);
  
#line 193 
  in.hdr.opcode = (unsigned short)775U;
  
#line 194 
  if (0 != 0) {
    int tmp;
    
#line 194 
    if (is_srq != 0) 
#line 194 
                     tmp = 256; else 
#line 194 
                                     tmp = 0;
    
#line 194 
    in.hdr.opmod = (unsigned short)tmp;
  }
  else 
#line 194 
       in.hdr.opmod = __fswab16((unsigned short)(is_srq != 0));
  
#line 195 
  if (0 != 0) 
#line 195 
              in.srqn = (((srq->srqn << 24) | ((srq->srqn << 8) & 16711680U)) | ((srq->srqn >> 8) & 65280U)) | (srq->srqn >> 24); else 
                                                                    
#line 195 
                                                                    in.srqn = __fswab32(srq->srqn);
  
#line 196 
  if (0 != 0) 
#line 196 
              in.lwm = (unsigned short)(((int)lwm << 8) | ((int)lwm >> 8)); else 
                                                                    
#line 196 
                                                                    in.lwm = __fswab16((unsigned short)((int)lwm));
  
#line 198 
  tmp_3 = mlx5_cmd_exec_check_status(dev,(u32 *)(& in),16,(u32 *)(& out),16);
  
#line 198 
  return tmp_3;
}


#line 203  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/srq.c"
static int query_srq_cmd(struct mlx5_core_dev *dev, struct mlx5_core_srq *srq, struct mlx5_query_srq_mbox_out *out)
{
  struct mlx5_query_srq_mbox_in in;
  int tmp_0;
  
#line 208 
  memset((void *)(& in),0,16UL);
  
#line 210 
  in.hdr.opcode = (unsigned short)519U;
  
#line 211 
  if (0 != 0) 
#line 211 
              in.srqn = (((srq->srqn << 24) | ((srq->srqn << 8) & 16711680U)) | ((srq->srqn >> 8) & 65280U)) | (srq->srqn >> 24); else 
                                                                    
#line 211 
                                                                    in.srqn = __fswab32(srq->srqn);
  
#line 213 
  tmp_0 = mlx5_cmd_exec_check_status(dev,(u32 *)(& in),16,(u32 *)out,96);
  
#line 213 
  return tmp_0;
}


#line 245 
void __compiletime_assert_245(void);


#line 246 
void __compiletime_assert_247(void);


#line 217  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/srq.c"
static int create_xrc_srq_cmd(struct mlx5_core_dev *dev, struct mlx5_core_srq *srq, struct mlx5_create_srq_mbox_in *in, int srq_inlen)
{
  int __retres;
  u32 create_out[4U];
  void *create_in;
  void *srqc;
  void *xrc_srqc;
  void *pas;
  int pas_size;
  int inlen;
  int err;
  
#line 231 
  srqc = (void *)in + 16U;
  
#line 232 
  pas_size = get_pas_size(srqc);
  
#line 233 
  inlen = (int)((unsigned int)pas_size + 272U);
  
#line 234 
  create_in = mlx5_vzalloc_0((unsigned long)inlen);
  
#line 235 
  if (create_in == (void *)0) {
    
#line 236 
    __retres = -12;
    
#line 236 
    goto return_label;
  }
  else ;
  
#line 238 
  xrc_srqc = create_in + 16U;
  
#line 240 
  pas = create_in + 272U;
  
#line 242 
  memcpy(xrc_srqc,(void const *)srqc,64UL);
  
#line 243 
  memcpy(pas,(void const *)(& in->pas),(unsigned long)pas_size);
  {
    
#line 245 
    bool __cond = (_Bool)0;
    
#line 245 
    if ((int)__cond != 0) 
#line 245 
                          __compiletime_assert_245(); else ;
  }
  
#line 245 
  if (0 != 0) {
    unsigned int tmp_2;
    
#line 245 
    if (0 != 0) 
#line 245 
                tmp_2 = (((((*((__be32 *)xrc_srqc + 4U) << 24) | ((*((__be32 *)xrc_srqc + 4U) << 8) & 16711680U)) | ((*((__be32 *)xrc_srqc + 4U) >> 8) & 65280U)) | (*((__be32 *)xrc_srqc + 4U) >> 24)) >> 24) | 4294967040U;
    else {
      __u32 tmp_1;
      
#line 245 
      tmp_1 = __fswab32(*((__be32 *)xrc_srqc + 4U));
      
#line 245 
      tmp_2 = (tmp_1 >> 24) | 4294967040U;
    }
    
#line 245 
    *((__be32 *)xrc_srqc + 4U) = tmp_2;
  }
  else {
    __u32 tmp_5;
    unsigned int tmp_4;
    
#line 245 
    if (0 != 0) 
#line 245 
                tmp_4 = ((((*((__be32 *)xrc_srqc + 4U) << 24) | ((*((__be32 *)xrc_srqc + 4U) << 8) & 16711680U)) | ((*((__be32 *)xrc_srqc + 4U) >> 8) & 65280U)) | (*((__be32 *)xrc_srqc + 4U) >> 24)) | 16777215U;
    else {
      __u32 tmp_3;
      
#line 245 
      tmp_3 = __fswab32(*((__be32 *)xrc_srqc + 4U));
      
#line 245 
      tmp_4 = tmp_3 | 16777215U;
    }
    
#line 245 
    tmp_5 = __fswab32(tmp_4);
    
#line 245 
    *((__be32 *)xrc_srqc + 4U) = tmp_5;
  }
  {
    
#line 246 
    bool __cond_0 = (_Bool)0;
    
#line 246 
    if ((int)__cond_0 != 0) 
#line 246 
                            __compiletime_assert_247(); else ;
  }
  
#line 246 
  if (0 != 0) {
    unsigned int tmp_9;
    unsigned int tmp_11;
    
#line 246 
    if (0 != 0) 
#line 246 
                tmp_9 = ((((*((__be32 *)create_in) << 24) | ((*((__be32 *)create_in) << 8) & 16711680U)) | ((*((__be32 *)create_in) >> 8) & 65280U)) | (*((__be32 *)create_in) >> 24)) << 24;
    else {
      __u32 tmp_8;
      
#line 246 
      tmp_8 = __fswab32(*((__be32 *)create_in));
      
#line 246 
      tmp_9 = tmp_8 << 24;
    }
    
#line 246 
    if (0 != 0) 
#line 246 
                tmp_11 = (((((*((__be32 *)create_in) << 24) | ((*((__be32 *)create_in) << 8) & 16711680U)) | ((*((__be32 *)create_in) >> 8) & 65280U)) | (*((__be32 *)create_in) >> 24)) << 8) & 16711680U;
    else {
      __u32 tmp_10;
      
#line 246 
      tmp_10 = __fswab32(*((__be32 *)create_in));
      
#line 246 
      tmp_11 = (tmp_10 << 8) & 16711680U;
    }
    
#line 246 
    *((__be32 *)create_in) = (tmp_9 | tmp_11) | 1287U;
  }
  else {
    __u32 tmp_14;
    unsigned int tmp_13;
    
#line 246 
    if (0 != 0) 
#line 246 
                tmp_13 = (((((*((__be32 *)create_in) << 24) | ((*((__be32 *)create_in) << 8) & 16711680U)) | ((*((__be32 *)create_in) >> 8) & 65280U)) | (*((__be32 *)create_in) >> 24)) & 65535U) | 117768192U;
    else {
      __u32 tmp_12;
      
#line 246 
      tmp_12 = __fswab32(*((__be32 *)create_in));
      
#line 246 
      tmp_13 = (tmp_12 & 65535U) | 117768192U;
    }
    
#line 246 
    tmp_14 = __fswab32(tmp_13);
    
#line 246 
    *((__be32 *)create_in) = tmp_14;
  }
  
#line 249 
  memset((void *)(& create_out),0,16UL);
  
#line 250 
  err = mlx5_cmd_exec_check_status(dev,(u32 *)create_in,inlen,(u32 *)(& create_out),16);
  
#line 252 
  if (err != 0) 
#line 253 
                goto out; else ;
  
#line 255 
  if (0 != 0) 
#line 255 
              srq->srqn = ((((*((__be32 *)(& create_out) + 2U) << 24) | ((*((__be32 *)(& create_out) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& create_out) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& create_out) + 2U) >> 24)) & 16777215U;
  else {
    __u32 tmp_15;
    
#line 255 
    tmp_15 = __fswab32(*((__be32 *)(& create_out) + 2U));
    
#line 255 
    srq->srqn = tmp_15 & 16777215U;
  }
  out: 
#line 256 
  ;
  
#line 257 
  kvfree((void const *)create_in);
  
#line 258 
  __retres = err;
  return_label: 
#line 258 
                return __retres;
}


#line 270 
void __compiletime_assert_271(void);


#line 272 
void __compiletime_assert_272(void);


#line 261  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/srq.c"
static int destroy_xrc_srq_cmd(struct mlx5_core_dev *dev, struct mlx5_core_srq *srq)
{
  u32 xrcsrq_in[4U];
  u32 xrcsrq_out[4U];
  int tmp_21;
  
#line 267 
  memset((void *)(& xrcsrq_in),0,16UL);
  
#line 268 
  memset((void *)(& xrcsrq_out),0,16UL);
  {
    
#line 270 
    bool __cond = (_Bool)0;
    
#line 270 
    if ((int)__cond != 0) 
#line 270 
                          __compiletime_assert_271(); else ;
  }
  
#line 270 
  if (0 != 0) {
    unsigned int tmp_2;
    unsigned int tmp_4;
    
#line 270 
    if (0 != 0) 
#line 270 
                tmp_2 = ((((*((__be32 *)(& xrcsrq_in)) << 24) | ((*((__be32 *)(& xrcsrq_in)) << 8) & 16711680U)) | ((*((__be32 *)(& xrcsrq_in)) >> 8) & 65280U)) | (*((__be32 *)(& xrcsrq_in)) >> 24)) << 24;
    else {
      __u32 tmp_1;
      
#line 270 
      tmp_1 = __fswab32(*((__be32 *)(& xrcsrq_in)));
      
#line 270 
      tmp_2 = tmp_1 << 24;
    }
    
#line 270 
    if (0 != 0) 
#line 270 
                tmp_4 = (((((*((__be32 *)(& xrcsrq_in)) << 24) | ((*((__be32 *)(& xrcsrq_in)) << 8) & 16711680U)) | ((*((__be32 *)(& xrcsrq_in)) >> 8) & 65280U)) | (*((__be32 *)(& xrcsrq_in)) >> 24)) << 8) & 16711680U;
    else {
      __u32 tmp_3;
      
#line 270 
      tmp_3 = __fswab32(*((__be32 *)(& xrcsrq_in)));
      
#line 270 
      tmp_4 = (tmp_3 << 8) & 16711680U;
    }
    
#line 270 
    *((__be32 *)(& xrcsrq_in)) = (tmp_2 | tmp_4) | 1543U;
  }
  else {
    __u32 tmp_7;
    unsigned int tmp_6;
    
#line 270 
    if (0 != 0) 
#line 270 
                tmp_6 = (((((*((__be32 *)(& xrcsrq_in)) << 24) | ((*((__be32 *)(& xrcsrq_in)) << 8) & 16711680U)) | ((*((__be32 *)(& xrcsrq_in)) >> 8) & 65280U)) | (*((__be32 *)(& xrcsrq_in)) >> 24)) & 65535U) | 117833728U;
    else {
      __u32 tmp_5;
      
#line 270 
      tmp_5 = __fswab32(*((__be32 *)(& xrcsrq_in)));
      
#line 270 
      tmp_6 = (tmp_5 & 65535U) | 117833728U;
    }
    
#line 270 
    tmp_7 = __fswab32(tmp_6);
    
#line 270 
    *((__be32 *)(& xrcsrq_in)) = tmp_7;
  }
  {
    
#line 272 
    bool __cond_0 = (_Bool)0;
    
#line 272 
    if ((int)__cond_0 != 0) 
#line 272 
                            __compiletime_assert_272(); else ;
  }
  
#line 272 
  if (0 != 0) {
    unsigned int tmp_11;
    unsigned int tmp_13;
    unsigned int tmp_15;
    unsigned int tmp_17;
    
#line 272 
    if (0 != 0) 
#line 272 
                tmp_11 = ((((*((__be32 *)(& xrcsrq_in) + 2U) << 24) | ((*((__be32 *)(& xrcsrq_in) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& xrcsrq_in) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& xrcsrq_in) + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_10;
      
#line 272 
      tmp_10 = __fswab32(*((__be32 *)(& xrcsrq_in) + 2U));
      
#line 272 
      tmp_11 = tmp_10 & 4278190080U;
    }
    
#line 272 
    if (0 != 0) 
#line 272 
                tmp_13 = ((((*((__be32 *)(& xrcsrq_in) + 2U) << 24) | ((*((__be32 *)(& xrcsrq_in) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& xrcsrq_in) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& xrcsrq_in) + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_12;
      
#line 272 
      tmp_12 = __fswab32(*((__be32 *)(& xrcsrq_in) + 2U));
      
#line 272 
      tmp_13 = tmp_12 & 4278190080U;
    }
    
#line 272 
    if (0 != 0) 
#line 272 
                tmp_15 = ((((*((__be32 *)(& xrcsrq_in) + 2U) << 24) | ((*((__be32 *)(& xrcsrq_in) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& xrcsrq_in) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& xrcsrq_in) + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_14;
      
#line 272 
      tmp_14 = __fswab32(*((__be32 *)(& xrcsrq_in) + 2U));
      
#line 272 
      tmp_15 = tmp_14 & 4278190080U;
    }
    
#line 272 
    if (0 != 0) 
#line 272 
                tmp_17 = ((((*((__be32 *)(& xrcsrq_in) + 2U) << 24) | ((*((__be32 *)(& xrcsrq_in) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& xrcsrq_in) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& xrcsrq_in) + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_16;
      
#line 272 
      tmp_16 = __fswab32(*((__be32 *)(& xrcsrq_in) + 2U));
      
#line 272 
      tmp_17 = tmp_16 & 4278190080U;
    }
    
#line 272 
    *((__be32 *)(& xrcsrq_in) + 2U) = ((((tmp_11 | (srq->srqn & 16777215U)) << 24) | (((tmp_13 | (srq->srqn & 16777215U)) << 8) & 16711680U)) | (((tmp_15 | (srq->srqn & 16777215U)) >> 8) & 65280U)) | ((tmp_17 | (srq->srqn & 16777215U)) >> 24);
  }
  else {
    __u32 tmp_20;
    unsigned int tmp_19;
    
#line 272 
    if (0 != 0) 
#line 272 
                tmp_19 = ((((*((__be32 *)(& xrcsrq_in) + 2U) << 24) | ((*((__be32 *)(& xrcsrq_in) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& xrcsrq_in) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& xrcsrq_in) + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_18;
      
#line 272 
      tmp_18 = __fswab32(*((__be32 *)(& xrcsrq_in) + 2U));
      
#line 272 
      tmp_19 = tmp_18 & 4278190080U;
    }
    
#line 272 
    ;
    
#line 272 
    tmp_20 = __fswab32(tmp_19 | (srq->srqn & 16777215U));
    
#line 272 
    *((__be32 *)(& xrcsrq_in) + 2U) = tmp_20;
  }
  
#line 274 
  tmp_21 = mlx5_cmd_exec_check_status(dev,(u32 *)(& xrcsrq_in),16,(u32 *)(& xrcsrq_out),16);
  
#line 274 
  return tmp_21;
}


#line 287 
void __compiletime_assert_287(void);


#line 288 
void __compiletime_assert_288(void);


#line 289 
void __compiletime_assert_289(void);


#line 290 
void __compiletime_assert_290(void);


#line 278  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/srq.c"
static int arm_xrc_srq_cmd(struct mlx5_core_dev *dev, struct mlx5_core_srq *srq, u16 lwm)
{
  u32 xrcsrq_in[4U];
  u32 xrcsrq_out[4U];
  int tmp_43;
  
#line 284 
  memset((void *)(& xrcsrq_in),0,16UL);
  
#line 285 
  memset((void *)(& xrcsrq_out),0,16UL);
  {
    
#line 287 
    bool __cond = (_Bool)0;
    
#line 287 
    if ((int)__cond != 0) 
#line 287 
                          __compiletime_assert_287(); else ;
  }
  
#line 287 
  if (0 != 0) {
    unsigned int tmp_2;
    unsigned int tmp_4;
    
#line 287 
    if (0 != 0) 
#line 287 
                tmp_2 = ((((*((__be32 *)(& xrcsrq_in)) << 24) | ((*((__be32 *)(& xrcsrq_in)) << 8) & 16711680U)) | ((*((__be32 *)(& xrcsrq_in)) >> 8) & 65280U)) | (*((__be32 *)(& xrcsrq_in)) >> 24)) << 24;
    else {
      __u32 tmp_1;
      
#line 287 
      tmp_1 = __fswab32(*((__be32 *)(& xrcsrq_in)));
      
#line 287 
      tmp_2 = tmp_1 << 24;
    }
    
#line 287 
    if (0 != 0) 
#line 287 
                tmp_4 = (((((*((__be32 *)(& xrcsrq_in)) << 24) | ((*((__be32 *)(& xrcsrq_in)) << 8) & 16711680U)) | ((*((__be32 *)(& xrcsrq_in)) >> 8) & 65280U)) | (*((__be32 *)(& xrcsrq_in)) >> 24)) << 8) & 16711680U;
    else {
      __u32 tmp_3;
      
#line 287 
      tmp_3 = __fswab32(*((__be32 *)(& xrcsrq_in)));
      
#line 287 
      tmp_4 = (tmp_3 << 8) & 16711680U;
    }
    
#line 287 
    *((__be32 *)(& xrcsrq_in)) = (tmp_2 | tmp_4) | 2055U;
  }
  else {
    __u32 tmp_7;
    unsigned int tmp_6;
    
#line 287 
    if (0 != 0) 
#line 287 
                tmp_6 = (((((*((__be32 *)(& xrcsrq_in)) << 24) | ((*((__be32 *)(& xrcsrq_in)) << 8) & 16711680U)) | ((*((__be32 *)(& xrcsrq_in)) >> 8) & 65280U)) | (*((__be32 *)(& xrcsrq_in)) >> 24)) & 65535U) | 117964800U;
    else {
      __u32 tmp_5;
      
#line 287 
      tmp_5 = __fswab32(*((__be32 *)(& xrcsrq_in)));
      
#line 287 
      tmp_6 = (tmp_5 & 65535U) | 117964800U;
    }
    
#line 287 
    tmp_7 = __fswab32(tmp_6);
    
#line 287 
    *((__be32 *)(& xrcsrq_in)) = tmp_7;
  }
  {
    
#line 288 
    bool __cond_0 = (_Bool)0;
    
#line 288 
    if ((int)__cond_0 != 0) 
#line 288 
                            __compiletime_assert_288(); else ;
  }
  
#line 288 
  if (0 != 0) {
    unsigned int tmp_11;
    unsigned int tmp_13;
    
#line 288 
    if (0 != 0) 
#line 288 
                tmp_11 = ((((((*((__be32 *)(& xrcsrq_in) + 1U) << 24) | ((*((__be32 *)(& xrcsrq_in) + 1U) << 8) & 16711680U)) | ((*((__be32 *)(& xrcsrq_in) + 1U) >> 8) & 65280U)) | (*((__be32 *)(& xrcsrq_in) + 1U) >> 24)) >> 8) & 65280U) | 16777216U;
    else {
      __u32 tmp_10;
      
#line 288 
      tmp_10 = __fswab32(*((__be32 *)(& xrcsrq_in) + 1U));
      
#line 288 
      tmp_11 = ((tmp_10 >> 8) & 65280U) | 16777216U;
    }
    
#line 288 
    if (0 != 0) 
#line 288 
                tmp_13 = ((((*((__be32 *)(& xrcsrq_in) + 1U) << 24) | ((*((__be32 *)(& xrcsrq_in) + 1U) << 8) & 16711680U)) | ((*((__be32 *)(& xrcsrq_in) + 1U) >> 8) & 65280U)) | (*((__be32 *)(& xrcsrq_in) + 1U) >> 24)) >> 24;
    else {
      __u32 tmp_12;
      
#line 288 
      tmp_12 = __fswab32(*((__be32 *)(& xrcsrq_in) + 1U));
      
#line 288 
      tmp_13 = tmp_12 >> 24;
    }
    
#line 288 
    *((__be32 *)(& xrcsrq_in) + 1U) = tmp_11 | tmp_13;
  }
  else {
    __u32 tmp_16;
    unsigned int tmp_15;
    
#line 288 
    if (0 != 0) 
#line 288 
                tmp_15 = (((((*((__be32 *)(& xrcsrq_in) + 1U) << 24) | ((*((__be32 *)(& xrcsrq_in) + 1U) << 8) & 16711680U)) | ((*((__be32 *)(& xrcsrq_in) + 1U) >> 8) & 65280U)) | (*((__be32 *)(& xrcsrq_in) + 1U) >> 24)) & 4294901760U) | 1U;
    else {
      __u32 tmp_14;
      
#line 288 
      tmp_14 = __fswab32(*((__be32 *)(& xrcsrq_in) + 1U));
      
#line 288 
      tmp_15 = (tmp_14 & 4294901760U) | 1U;
    }
    
#line 288 
    tmp_16 = __fswab32(tmp_15);
    
#line 288 
    *((__be32 *)(& xrcsrq_in) + 1U) = tmp_16;
  }
  {
    
#line 289 
    bool __cond_1 = (_Bool)0;
    
#line 289 
    if ((int)__cond_1 != 0) 
#line 289 
                            __compiletime_assert_289(); else ;
  }
  
#line 289 
  if (0 != 0) {
    unsigned int tmp_20;
    unsigned int tmp_22;
    unsigned int tmp_24;
    unsigned int tmp_26;
    
#line 289 
    if (0 != 0) 
#line 289 
                tmp_20 = ((((*((__be32 *)(& xrcsrq_in) + 2U) << 24) | ((*((__be32 *)(& xrcsrq_in) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& xrcsrq_in) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& xrcsrq_in) + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_19;
      
#line 289 
      tmp_19 = __fswab32(*((__be32 *)(& xrcsrq_in) + 2U));
      
#line 289 
      tmp_20 = tmp_19 & 4278190080U;
    }
    
#line 289 
    if (0 != 0) 
#line 289 
                tmp_22 = ((((*((__be32 *)(& xrcsrq_in) + 2U) << 24) | ((*((__be32 *)(& xrcsrq_in) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& xrcsrq_in) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& xrcsrq_in) + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_21;
      
#line 289 
      tmp_21 = __fswab32(*((__be32 *)(& xrcsrq_in) + 2U));
      
#line 289 
      tmp_22 = tmp_21 & 4278190080U;
    }
    
#line 289 
    if (0 != 0) 
#line 289 
                tmp_24 = ((((*((__be32 *)(& xrcsrq_in) + 2U) << 24) | ((*((__be32 *)(& xrcsrq_in) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& xrcsrq_in) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& xrcsrq_in) + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_23;
      
#line 289 
      tmp_23 = __fswab32(*((__be32 *)(& xrcsrq_in) + 2U));
      
#line 289 
      tmp_24 = tmp_23 & 4278190080U;
    }
    
#line 289 
    if (0 != 0) 
#line 289 
                tmp_26 = ((((*((__be32 *)(& xrcsrq_in) + 2U) << 24) | ((*((__be32 *)(& xrcsrq_in) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& xrcsrq_in) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& xrcsrq_in) + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_25;
      
#line 289 
      tmp_25 = __fswab32(*((__be32 *)(& xrcsrq_in) + 2U));
      
#line 289 
      tmp_26 = tmp_25 & 4278190080U;
    }
    
#line 289 
    *((__be32 *)(& xrcsrq_in) + 2U) = ((((tmp_20 | (srq->srqn & 16777215U)) << 24) | (((tmp_22 | (srq->srqn & 16777215U)) << 8) & 16711680U)) | (((tmp_24 | (srq->srqn & 16777215U)) >> 8) & 65280U)) | ((tmp_26 | (srq->srqn & 16777215U)) >> 24);
  }
  else {
    __u32 tmp_29;
    unsigned int tmp_28;
    
#line 289 
    if (0 != 0) 
#line 289 
                tmp_28 = ((((*((__be32 *)(& xrcsrq_in) + 2U) << 24) | ((*((__be32 *)(& xrcsrq_in) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& xrcsrq_in) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& xrcsrq_in) + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_27;
      
#line 289 
      tmp_27 = __fswab32(*((__be32 *)(& xrcsrq_in) + 2U));
      
#line 289 
      tmp_28 = tmp_27 & 4278190080U;
    }
    
#line 289 
    ;
    
#line 289 
    tmp_29 = __fswab32(tmp_28 | (srq->srqn & 16777215U));
    
#line 289 
    *((__be32 *)(& xrcsrq_in) + 2U) = tmp_29;
  }
  {
    
#line 290 
    bool __cond_2 = (_Bool)0;
    
#line 290 
    if ((int)__cond_2 != 0) 
#line 290 
                            __compiletime_assert_290(); else ;
  }
  
#line 290 
  if (0 != 0) {
    unsigned int tmp_33;
    unsigned int tmp_35;
    unsigned int tmp_37;
    unsigned int tmp_39;
    
#line 290 
    if (0 != 0) 
#line 290 
                tmp_33 = ((((*((__be32 *)(& xrcsrq_in) + 3U) << 24) | ((*((__be32 *)(& xrcsrq_in) + 3U) << 8) & 16711680U)) | ((*((__be32 *)(& xrcsrq_in) + 3U) >> 8) & 65280U)) | (*((__be32 *)(& xrcsrq_in) + 3U) >> 24)) & 4294901760U;
    else {
      __u32 tmp_32;
      
#line 290 
      tmp_32 = __fswab32(*((__be32 *)(& xrcsrq_in) + 3U));
      
#line 290 
      tmp_33 = tmp_32 & 4294901760U;
    }
    
#line 290 
    if (0 != 0) 
#line 290 
                tmp_35 = ((((*((__be32 *)(& xrcsrq_in) + 3U) << 24) | ((*((__be32 *)(& xrcsrq_in) + 3U) << 8) & 16711680U)) | ((*((__be32 *)(& xrcsrq_in) + 3U) >> 8) & 65280U)) | (*((__be32 *)(& xrcsrq_in) + 3U) >> 24)) & 4294901760U;
    else {
      __u32 tmp_34;
      
#line 290 
      tmp_34 = __fswab32(*((__be32 *)(& xrcsrq_in) + 3U));
      
#line 290 
      tmp_35 = tmp_34 & 4294901760U;
    }
    
#line 290 
    if (0 != 0) 
#line 290 
                tmp_37 = ((((*((__be32 *)(& xrcsrq_in) + 3U) << 24) | ((*((__be32 *)(& xrcsrq_in) + 3U) << 8) & 16711680U)) | ((*((__be32 *)(& xrcsrq_in) + 3U) >> 8) & 65280U)) | (*((__be32 *)(& xrcsrq_in) + 3U) >> 24)) & 4294901760U;
    else {
      __u32 tmp_36;
      
#line 290 
      tmp_36 = __fswab32(*((__be32 *)(& xrcsrq_in) + 3U));
      
#line 290 
      tmp_37 = tmp_36 & 4294901760U;
    }
    
#line 290 
    if (0 != 0) 
#line 290 
                tmp_39 = ((((*((__be32 *)(& xrcsrq_in) + 3U) << 24) | ((*((__be32 *)(& xrcsrq_in) + 3U) << 8) & 16711680U)) | ((*((__be32 *)(& xrcsrq_in) + 3U) >> 8) & 65280U)) | (*((__be32 *)(& xrcsrq_in) + 3U) >> 24)) & 4294901760U;
    else {
      __u32 tmp_38;
      
#line 290 
      tmp_38 = __fswab32(*((__be32 *)(& xrcsrq_in) + 3U));
      
#line 290 
      tmp_39 = tmp_38 & 4294901760U;
    }
    
#line 290 
    *((__be32 *)(& xrcsrq_in) + 3U) = ((((tmp_33 | (unsigned int)lwm) << 24) | (((tmp_35 | (unsigned int)lwm) << 8) & 16711680U)) | (((tmp_37 | (unsigned int)lwm) >> 8) & 65280U)) | ((tmp_39 | (unsigned int)lwm) >> 24);
  }
  else {
    __u32 tmp_42;
    unsigned int tmp_41;
    
#line 290 
    if (0 != 0) 
#line 290 
                tmp_41 = ((((*((__be32 *)(& xrcsrq_in) + 3U) << 24) | ((*((__be32 *)(& xrcsrq_in) + 3U) << 8) & 16711680U)) | ((*((__be32 *)(& xrcsrq_in) + 3U) >> 8) & 65280U)) | (*((__be32 *)(& xrcsrq_in) + 3U) >> 24)) & 4294901760U;
    else {
      __u32 tmp_40;
      
#line 290 
      tmp_40 = __fswab32(*((__be32 *)(& xrcsrq_in) + 3U));
      
#line 290 
      tmp_41 = tmp_40 & 4294901760U;
    }
    
#line 290 
    ;
    
#line 290 
    tmp_42 = __fswab32(tmp_41 | (unsigned int)lwm);
    
#line 290 
    *((__be32 *)(& xrcsrq_in) + 3U) = tmp_42;
  }
  
#line 292 
  tmp_43 = mlx5_cmd_exec_check_status(dev,(u32 *)(& xrcsrq_in),16,(u32 *)(& xrcsrq_out),16);
  
#line 292 
  return tmp_43;
}


#line 311 
void __compiletime_assert_312(void);


#line 313 
void __compiletime_assert_313(void);


#line 296  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/srq.c"
static int query_xrc_srq_cmd(struct mlx5_core_dev *dev, struct mlx5_core_srq *srq, struct mlx5_query_srq_mbox_out *out)
{
  int __retres;
  u32 xrcsrq_in[4U];
  u32 *xrcsrq_out;
  void *srqc;
  void *xrc_srqc;
  int err;
  
#line 306 
  xrcsrq_out = (u32 *)mlx5_vzalloc_0(272UL);
  
#line 307 
  if (xrcsrq_out == (u32 *)0U) {
    
#line 308 
    __retres = -12;
    
#line 308 
    goto return_label;
  }
  else ;
  
#line 309 
  memset((void *)(& xrcsrq_in),0,16UL);
  {
    
#line 311 
    bool __cond = (_Bool)0;
    
#line 311 
    if ((int)__cond != 0) 
#line 311 
                          __compiletime_assert_312(); else ;
  }
  
#line 311 
  if (0 != 0) {
    unsigned int tmp_3;
    unsigned int tmp_5;
    
#line 311 
    if (0 != 0) 
#line 311 
                tmp_3 = ((((*((__be32 *)(& xrcsrq_in)) << 24) | ((*((__be32 *)(& xrcsrq_in)) << 8) & 16711680U)) | ((*((__be32 *)(& xrcsrq_in)) >> 8) & 65280U)) | (*((__be32 *)(& xrcsrq_in)) >> 24)) << 24;
    else {
      __u32 tmp_2;
      
#line 311 
      tmp_2 = __fswab32(*((__be32 *)(& xrcsrq_in)));
      
#line 311 
      tmp_3 = tmp_2 << 24;
    }
    
#line 311 
    if (0 != 0) 
#line 311 
                tmp_5 = (((((*((__be32 *)(& xrcsrq_in)) << 24) | ((*((__be32 *)(& xrcsrq_in)) << 8) & 16711680U)) | ((*((__be32 *)(& xrcsrq_in)) >> 8) & 65280U)) | (*((__be32 *)(& xrcsrq_in)) >> 24)) << 8) & 16711680U;
    else {
      __u32 tmp_4;
      
#line 311 
      tmp_4 = __fswab32(*((__be32 *)(& xrcsrq_in)));
      
#line 311 
      tmp_5 = (tmp_4 << 8) & 16711680U;
    }
    
#line 311 
    *((__be32 *)(& xrcsrq_in)) = (tmp_3 | tmp_5) | 1799U;
  }
  else {
    __u32 tmp_8;
    unsigned int tmp_7;
    
#line 311 
    if (0 != 0) 
#line 311 
                tmp_7 = (((((*((__be32 *)(& xrcsrq_in)) << 24) | ((*((__be32 *)(& xrcsrq_in)) << 8) & 16711680U)) | ((*((__be32 *)(& xrcsrq_in)) >> 8) & 65280U)) | (*((__be32 *)(& xrcsrq_in)) >> 24)) & 65535U) | 117899264U;
    else {
      __u32 tmp_6;
      
#line 311 
      tmp_6 = __fswab32(*((__be32 *)(& xrcsrq_in)));
      
#line 311 
      tmp_7 = (tmp_6 & 65535U) | 117899264U;
    }
    
#line 311 
    tmp_8 = __fswab32(tmp_7);
    
#line 311 
    *((__be32 *)(& xrcsrq_in)) = tmp_8;
  }
  {
    
#line 313 
    bool __cond_0 = (_Bool)0;
    
#line 313 
    if ((int)__cond_0 != 0) 
#line 313 
                            __compiletime_assert_313(); else ;
  }
  
#line 313 
  if (0 != 0) {
    unsigned int tmp_12;
    unsigned int tmp_14;
    unsigned int tmp_16;
    unsigned int tmp_18;
    
#line 313 
    if (0 != 0) 
#line 313 
                tmp_12 = ((((*((__be32 *)(& xrcsrq_in) + 2U) << 24) | ((*((__be32 *)(& xrcsrq_in) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& xrcsrq_in) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& xrcsrq_in) + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_11;
      
#line 313 
      tmp_11 = __fswab32(*((__be32 *)(& xrcsrq_in) + 2U));
      
#line 313 
      tmp_12 = tmp_11 & 4278190080U;
    }
    
#line 313 
    if (0 != 0) 
#line 313 
                tmp_14 = ((((*((__be32 *)(& xrcsrq_in) + 2U) << 24) | ((*((__be32 *)(& xrcsrq_in) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& xrcsrq_in) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& xrcsrq_in) + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_13;
      
#line 313 
      tmp_13 = __fswab32(*((__be32 *)(& xrcsrq_in) + 2U));
      
#line 313 
      tmp_14 = tmp_13 & 4278190080U;
    }
    
#line 313 
    if (0 != 0) 
#line 313 
                tmp_16 = ((((*((__be32 *)(& xrcsrq_in) + 2U) << 24) | ((*((__be32 *)(& xrcsrq_in) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& xrcsrq_in) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& xrcsrq_in) + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_15;
      
#line 313 
      tmp_15 = __fswab32(*((__be32 *)(& xrcsrq_in) + 2U));
      
#line 313 
      tmp_16 = tmp_15 & 4278190080U;
    }
    
#line 313 
    if (0 != 0) 
#line 313 
                tmp_18 = ((((*((__be32 *)(& xrcsrq_in) + 2U) << 24) | ((*((__be32 *)(& xrcsrq_in) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& xrcsrq_in) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& xrcsrq_in) + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_17;
      
#line 313 
      tmp_17 = __fswab32(*((__be32 *)(& xrcsrq_in) + 2U));
      
#line 313 
      tmp_18 = tmp_17 & 4278190080U;
    }
    
#line 313 
    *((__be32 *)(& xrcsrq_in) + 2U) = ((((tmp_12 | (srq->srqn & 16777215U)) << 24) | (((tmp_14 | (srq->srqn & 16777215U)) << 8) & 16711680U)) | (((tmp_16 | (srq->srqn & 16777215U)) >> 8) & 65280U)) | ((tmp_18 | (srq->srqn & 16777215U)) >> 24);
  }
  else {
    __u32 tmp_21;
    unsigned int tmp_20;
    
#line 313 
    if (0 != 0) 
#line 313 
                tmp_20 = ((((*((__be32 *)(& xrcsrq_in) + 2U) << 24) | ((*((__be32 *)(& xrcsrq_in) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& xrcsrq_in) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& xrcsrq_in) + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_19;
      
#line 313 
      tmp_19 = __fswab32(*((__be32 *)(& xrcsrq_in) + 2U));
      
#line 313 
      tmp_20 = tmp_19 & 4278190080U;
    }
    
#line 313 
    ;
    
#line 313 
    tmp_21 = __fswab32(tmp_20 | (srq->srqn & 16777215U));
    
#line 313 
    *((__be32 *)(& xrcsrq_in) + 2U) = tmp_21;
  }
  
#line 314 
  err = mlx5_cmd_exec_check_status(dev,(u32 *)(& xrcsrq_in),16,xrcsrq_out,272);
  
#line 317 
  if (err != 0) 
#line 318 
                goto out; else ;
  
#line 320 
  xrc_srqc = (void *)xrcsrq_out + 16U;
  
#line 322 
  srqc = (void *)out + 16U;
  
#line 323 
  memcpy(srqc,(void const *)xrc_srqc,64UL);
  out: 
#line 325 
  ;
  
#line 326 
  kvfree((void const *)xrcsrq_out);
  
#line 327 
  __retres = err;
  return_label: 
#line 327 
                return __retres;
}


#line 330  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/srq.c"
static int create_rmp_cmd(struct mlx5_core_dev *dev, struct mlx5_core_srq *srq, struct mlx5_create_srq_mbox_in *in, int srq_inlen)
{
  int __retres;
  void *create_in;
  void *rmpc;
  void *srqc;
  int pas_size;
  int inlen;
  int err;
  
#line 340 
  srqc = (void *)in + 16U;
  
#line 341 
  pas_size = get_pas_size(srqc);
  
#line 342 
  inlen = (int)((unsigned int)pas_size + 272U);
  
#line 343 
  create_in = mlx5_vzalloc_0((unsigned long)inlen);
  
#line 344 
  if (create_in == (void *)0) {
    
#line 345 
    __retres = -12;
    
#line 345 
    goto return_label;
  }
  else ;
  
#line 347 
  rmpc = create_in + 32U;
  
#line 349 
  memcpy(rmpc + 240U,(void const *)(& in->pas),(unsigned long)pas_size);
  
#line 350 
  rmpc_srqc_reformat(srqc,rmpc,(_Bool)1);
  
#line 352 
  err = mlx5_core_create_rmp(dev,(u32 *)create_in,inlen,& srq->srqn);
  
#line 354 
  kvfree((void const *)create_in);
  
#line 355 
  __retres = err;
  return_label: 
#line 355 
                return __retres;
}


#line 358  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/srq.c"
static int destroy_rmp_cmd(struct mlx5_core_dev *dev, struct mlx5_core_srq *srq)
{
  int tmp;
  
#line 361 
  tmp = mlx5_core_destroy_rmp(dev,srq->srqn);
  
#line 361 
  return tmp;
}


#line 382 
void __compiletime_assert_382(void);


#line 383 
void __compiletime_assert_383(void);


#line 384 
void __compiletime_assert_384(void);


#line 385 
void __compiletime_assert_385(void);


#line 386 
void __compiletime_assert_386(void);


#line 364  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/srq.c"
static int arm_rmp_cmd(struct mlx5_core_dev *dev, struct mlx5_core_srq *srq, u16 lwm)
{
  int __retres;
  void *in;
  void *rmpc;
  void *wq;
  void *bitmask;
  int err;
  
#line 374 
  in = mlx5_vzalloc_0(272UL);
  
#line 375 
  if (in == (void *)0) {
    
#line 376 
    __retres = -12;
    
#line 376 
    goto return_label;
  }
  else ;
  
#line 378 
  rmpc = in + 32U;
  
#line 379 
  bitmask = in + 16U;
  
#line 380 
  wq = rmpc + 48U;
  {
    
#line 382 
    bool __cond = (_Bool)0;
    
#line 382 
    if ((int)__cond != 0) 
#line 382 
                          __compiletime_assert_382(); else ;
  }
  
#line 382 
  if (0 != 0) {
    unsigned int tmp_2;
    unsigned int tmp_4;
    unsigned int tmp_6;
    unsigned int tmp_8;
    
#line 382 
    if (0 != 0) 
#line 382 
                tmp_2 = ((((*((__be32 *)in + 2U) << 24) | ((*((__be32 *)in + 2U) << 8) & 16711680U)) | ((*((__be32 *)in + 2U) >> 8) & 65280U)) | (*((__be32 *)in + 2U) >> 24)) << 24;
    else {
      __u32 tmp_1;
      
#line 382 
      tmp_1 = __fswab32(*((__be32 *)in + 2U));
      
#line 382 
      tmp_2 = tmp_1 << 24;
    }
    
#line 382 
    if (0 != 0) 
#line 382 
                tmp_4 = (((((*((__be32 *)in + 2U) << 24) | ((*((__be32 *)in + 2U) << 8) & 16711680U)) | ((*((__be32 *)in + 2U) >> 8) & 65280U)) | (*((__be32 *)in + 2U) >> 24)) << 8) & 16711680U;
    else {
      __u32 tmp_3;
      
#line 382 
      tmp_3 = __fswab32(*((__be32 *)in + 2U));
      
#line 382 
      tmp_4 = (tmp_3 << 8) & 16711680U;
    }
    
#line 382 
    if (0 != 0) 
#line 382 
                tmp_6 = (((((*((__be32 *)in + 2U) << 24) | ((*((__be32 *)in + 2U) << 8) & 16711680U)) | ((*((__be32 *)in + 2U) >> 8) & 65280U)) | (*((__be32 *)in + 2U) >> 24)) >> 8) & 65280U;
    else {
      __u32 tmp_5;
      
#line 382 
      tmp_5 = __fswab32(*((__be32 *)in + 2U));
      
#line 382 
      tmp_6 = (tmp_5 >> 8) & 65280U;
    }
    
#line 382 
    if (0 != 0) 
#line 382 
                tmp_8 = ((((((*((__be32 *)in + 2U) << 24) | ((*((__be32 *)in + 2U) << 8) & 16711680U)) | ((*((__be32 *)in + 2U) >> 8) & 65280U)) | (*((__be32 *)in + 2U) >> 24)) >> 24) & 15U) | 16U;
    else {
      __u32 tmp_7;
      
#line 382 
      tmp_7 = __fswab32(*((__be32 *)in + 2U));
      
#line 382 
      tmp_8 = ((tmp_7 >> 24) & 15U) | 16U;
    }
    
#line 382 
    *((__be32 *)in + 2U) = ((tmp_2 | tmp_4) | tmp_6) | tmp_8;
  }
  else {
    __u32 tmp_11;
    unsigned int tmp_10;
    
#line 382 
    if (0 != 0) 
#line 382 
                tmp_10 = (((((*((__be32 *)in + 2U) << 24) | ((*((__be32 *)in + 2U) << 8) & 16711680U)) | ((*((__be32 *)in + 2U) >> 8) & 65280U)) | (*((__be32 *)in + 2U) >> 24)) & 268435455U) | 268435456U;
    else {
      __u32 tmp_9;
      
#line 382 
      tmp_9 = __fswab32(*((__be32 *)in + 2U));
      
#line 382 
      tmp_10 = (tmp_9 & 268435455U) | 268435456U;
    }
    
#line 382 
    tmp_11 = __fswab32(tmp_10);
    
#line 382 
    *((__be32 *)in + 2U) = tmp_11;
  }
  {
    
#line 383 
    bool __cond_0 = (_Bool)0;
    
#line 383 
    if ((int)__cond_0 != 0) 
#line 383 
                            __compiletime_assert_383(); else ;
  }
  
#line 383 
  if (0 != 0) {
    unsigned int tmp_15;
    unsigned int tmp_17;
    unsigned int tmp_19;
    unsigned int tmp_21;
    
#line 383 
    if (0 != 0) 
#line 383 
                tmp_15 = ((((*((__be32 *)in + 2U) << 24) | ((*((__be32 *)in + 2U) << 8) & 16711680U)) | ((*((__be32 *)in + 2U) >> 8) & 65280U)) | (*((__be32 *)in + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_14;
      
#line 383 
      tmp_14 = __fswab32(*((__be32 *)in + 2U));
      
#line 383 
      tmp_15 = tmp_14 & 4278190080U;
    }
    
#line 383 
    if (0 != 0) 
#line 383 
                tmp_17 = ((((*((__be32 *)in + 2U) << 24) | ((*((__be32 *)in + 2U) << 8) & 16711680U)) | ((*((__be32 *)in + 2U) >> 8) & 65280U)) | (*((__be32 *)in + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_16;
      
#line 383 
      tmp_16 = __fswab32(*((__be32 *)in + 2U));
      
#line 383 
      tmp_17 = tmp_16 & 4278190080U;
    }
    
#line 383 
    if (0 != 0) 
#line 383 
                tmp_19 = ((((*((__be32 *)in + 2U) << 24) | ((*((__be32 *)in + 2U) << 8) & 16711680U)) | ((*((__be32 *)in + 2U) >> 8) & 65280U)) | (*((__be32 *)in + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_18;
      
#line 383 
      tmp_18 = __fswab32(*((__be32 *)in + 2U));
      
#line 383 
      tmp_19 = tmp_18 & 4278190080U;
    }
    
#line 383 
    if (0 != 0) 
#line 383 
                tmp_21 = ((((*((__be32 *)in + 2U) << 24) | ((*((__be32 *)in + 2U) << 8) & 16711680U)) | ((*((__be32 *)in + 2U) >> 8) & 65280U)) | (*((__be32 *)in + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_20;
      
#line 383 
      tmp_20 = __fswab32(*((__be32 *)in + 2U));
      
#line 383 
      tmp_21 = tmp_20 & 4278190080U;
    }
    
#line 383 
    *((__be32 *)in + 2U) = ((((tmp_15 | (srq->srqn & 16777215U)) << 24) | (((tmp_17 | (srq->srqn & 16777215U)) << 8) & 16711680U)) | (((tmp_19 | (srq->srqn & 16777215U)) >> 8) & 65280U)) | ((tmp_21 | (srq->srqn & 16777215U)) >> 24);
  }
  else {
    __u32 tmp_24;
    unsigned int tmp_23;
    
#line 383 
    if (0 != 0) 
#line 383 
                tmp_23 = ((((*((__be32 *)in + 2U) << 24) | ((*((__be32 *)in + 2U) << 8) & 16711680U)) | ((*((__be32 *)in + 2U) >> 8) & 65280U)) | (*((__be32 *)in + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_22;
      
#line 383 
      tmp_22 = __fswab32(*((__be32 *)in + 2U));
      
#line 383 
      tmp_23 = tmp_22 & 4278190080U;
    }
    
#line 383 
    ;
    
#line 383 
    tmp_24 = __fswab32(tmp_23 | (srq->srqn & 16777215U));
    
#line 383 
    *((__be32 *)in + 2U) = tmp_24;
  }
  {
    
#line 384 
    bool __cond_1 = (_Bool)0;
    
#line 384 
    if ((int)__cond_1 != 0) 
#line 384 
                            __compiletime_assert_384(); else ;
  }
  
#line 384 
  if (0 != 0) {
    unsigned int tmp_28;
    unsigned int tmp_30;
    unsigned int tmp_32;
    unsigned int tmp_34;
    
#line 384 
    if (0 != 0) 
#line 384 
                tmp_28 = ((((*((__be32 *)wq + 1U) << 24) | ((*((__be32 *)wq + 1U) << 8) & 16711680U)) | ((*((__be32 *)wq + 1U) >> 8) & 65280U)) | (*((__be32 *)wq + 1U) >> 24)) & 4294901760U;
    else {
      __u32 tmp_27;
      
#line 384 
      tmp_27 = __fswab32(*((__be32 *)wq + 1U));
      
#line 384 
      tmp_28 = tmp_27 & 4294901760U;
    }
    
#line 384 
    if (0 != 0) 
#line 384 
                tmp_30 = ((((*((__be32 *)wq + 1U) << 24) | ((*((__be32 *)wq + 1U) << 8) & 16711680U)) | ((*((__be32 *)wq + 1U) >> 8) & 65280U)) | (*((__be32 *)wq + 1U) >> 24)) & 4294901760U;
    else {
      __u32 tmp_29;
      
#line 384 
      tmp_29 = __fswab32(*((__be32 *)wq + 1U));
      
#line 384 
      tmp_30 = tmp_29 & 4294901760U;
    }
    
#line 384 
    if (0 != 0) 
#line 384 
                tmp_32 = ((((*((__be32 *)wq + 1U) << 24) | ((*((__be32 *)wq + 1U) << 8) & 16711680U)) | ((*((__be32 *)wq + 1U) >> 8) & 65280U)) | (*((__be32 *)wq + 1U) >> 24)) & 4294901760U;
    else {
      __u32 tmp_31;
      
#line 384 
      tmp_31 = __fswab32(*((__be32 *)wq + 1U));
      
#line 384 
      tmp_32 = tmp_31 & 4294901760U;
    }
    
#line 384 
    if (0 != 0) 
#line 384 
                tmp_34 = ((((*((__be32 *)wq + 1U) << 24) | ((*((__be32 *)wq + 1U) << 8) & 16711680U)) | ((*((__be32 *)wq + 1U) >> 8) & 65280U)) | (*((__be32 *)wq + 1U) >> 24)) & 4294901760U;
    else {
      __u32 tmp_33;
      
#line 384 
      tmp_33 = __fswab32(*((__be32 *)wq + 1U));
      
#line 384 
      tmp_34 = tmp_33 & 4294901760U;
    }
    
#line 384 
    *((__be32 *)wq + 1U) = ((((tmp_28 | (unsigned int)lwm) << 24) | (((tmp_30 | (unsigned int)lwm) << 8) & 16711680U)) | (((tmp_32 | (unsigned int)lwm) >> 8) & 65280U)) | ((tmp_34 | (unsigned int)lwm) >> 24);
  }
  else {
    __u32 tmp_37;
    unsigned int tmp_36;
    
#line 384 
    if (0 != 0) 
#line 384 
                tmp_36 = ((((*((__be32 *)wq + 1U) << 24) | ((*((__be32 *)wq + 1U) << 8) & 16711680U)) | ((*((__be32 *)wq + 1U) >> 8) & 65280U)) | (*((__be32 *)wq + 1U) >> 24)) & 4294901760U;
    else {
      __u32 tmp_35;
      
#line 384 
      tmp_35 = __fswab32(*((__be32 *)wq + 1U));
      
#line 384 
      tmp_36 = tmp_35 & 4294901760U;
    }
    
#line 384 
    ;
    
#line 384 
    tmp_37 = __fswab32(tmp_36 | (unsigned int)lwm);
    
#line 384 
    *((__be32 *)wq + 1U) = tmp_37;
  }
  {
    
#line 385 
    bool __cond_2 = (_Bool)0;
    
#line 385 
    if ((int)__cond_2 != 0) 
#line 385 
                            __compiletime_assert_385(); else ;
  }
  
#line 385 
  if (0 != 0) {
    unsigned int tmp_41;
    unsigned int tmp_43;
    unsigned int tmp_45;
    unsigned int tmp_47;
    
#line 385 
    if (0 != 0) 
#line 385 
                tmp_41 = (((((*((__be32 *)bitmask + 1U) << 24) | ((*((__be32 *)bitmask + 1U) << 8) & 16711680U)) | ((*((__be32 *)bitmask + 1U) >> 8) & 65280U)) | (*((__be32 *)bitmask + 1U) >> 24)) << 24) | 16777216U;
    else {
      __u32 tmp_40;
      
#line 385 
      tmp_40 = __fswab32(*((__be32 *)bitmask + 1U));
      
#line 385 
      tmp_41 = (tmp_40 << 24) | 16777216U;
    }
    
#line 385 
    if (0 != 0) 
#line 385 
                tmp_43 = (((((*((__be32 *)bitmask + 1U) << 24) | ((*((__be32 *)bitmask + 1U) << 8) & 16711680U)) | ((*((__be32 *)bitmask + 1U) >> 8) & 65280U)) | (*((__be32 *)bitmask + 1U) >> 24)) << 8) & 16711680U;
    else {
      __u32 tmp_42;
      
#line 385 
      tmp_42 = __fswab32(*((__be32 *)bitmask + 1U));
      
#line 385 
      tmp_43 = (tmp_42 << 8) & 16711680U;
    }
    
#line 385 
    if (0 != 0) 
#line 385 
                tmp_45 = (((((*((__be32 *)bitmask + 1U) << 24) | ((*((__be32 *)bitmask + 1U) << 8) & 16711680U)) | ((*((__be32 *)bitmask + 1U) >> 8) & 65280U)) | (*((__be32 *)bitmask + 1U) >> 24)) >> 8) & 65280U;
    else {
      __u32 tmp_44;
      
#line 385 
      tmp_44 = __fswab32(*((__be32 *)bitmask + 1U));
      
#line 385 
      tmp_45 = (tmp_44 >> 8) & 65280U;
    }
    
#line 385 
    if (0 != 0) 
#line 385 
                tmp_47 = ((((*((__be32 *)bitmask + 1U) << 24) | ((*((__be32 *)bitmask + 1U) << 8) & 16711680U)) | ((*((__be32 *)bitmask + 1U) >> 8) & 65280U)) | (*((__be32 *)bitmask + 1U) >> 24)) >> 24;
    else {
      __u32 tmp_46;
      
#line 385 
      tmp_46 = __fswab32(*((__be32 *)bitmask + 1U));
      
#line 385 
      tmp_47 = tmp_46 >> 24;
    }
    
#line 385 
    *((__be32 *)bitmask + 1U) = ((tmp_41 | tmp_43) | tmp_45) | tmp_47;
  }
  else {
    __u32 tmp_50;
    unsigned int tmp_49;
    
#line 385 
    if (0 != 0) 
#line 385 
                tmp_49 = ((((*((__be32 *)bitmask + 1U) << 24) | ((*((__be32 *)bitmask + 1U) << 8) & 16711680U)) | ((*((__be32 *)bitmask + 1U) >> 8) & 65280U)) | (*((__be32 *)bitmask + 1U) >> 24)) | 1U;
    else {
      __u32 tmp_48;
      
#line 385 
      tmp_48 = __fswab32(*((__be32 *)bitmask + 1U));
      
#line 385 
      tmp_49 = tmp_48 | 1U;
    }
    
#line 385 
    tmp_50 = __fswab32(tmp_49);
    
#line 385 
    *((__be32 *)bitmask + 1U) = tmp_50;
  }
  {
    
#line 386 
    bool __cond_3 = (_Bool)0;
    
#line 386 
    if ((int)__cond_3 != 0) 
#line 386 
                            __compiletime_assert_386(); else ;
  }
  
#line 386 
  if (0 != 0) {
    unsigned int tmp_54;
    unsigned int tmp_56;
    unsigned int tmp_58;
    unsigned int tmp_60;
    
#line 386 
    if (0 != 0) 
#line 386 
                tmp_54 = ((((*((__be32 *)rmpc) << 24) | ((*((__be32 *)rmpc) << 8) & 16711680U)) | ((*((__be32 *)rmpc) >> 8) & 65280U)) | (*((__be32 *)rmpc) >> 24)) << 24;
    else {
      __u32 tmp_53;
      
#line 386 
      tmp_53 = __fswab32(*((__be32 *)rmpc));
      
#line 386 
      tmp_54 = tmp_53 << 24;
    }
    
#line 386 
    if (0 != 0) 
#line 386 
                tmp_56 = (((((*((__be32 *)rmpc) << 24) | ((*((__be32 *)rmpc) << 8) & 16711680U)) | ((*((__be32 *)rmpc) >> 8) & 65280U)) | (*((__be32 *)rmpc) >> 24)) << 8) & 16711680U;
    else {
      __u32 tmp_55;
      
#line 386 
      tmp_55 = __fswab32(*((__be32 *)rmpc));
      
#line 386 
      tmp_56 = (tmp_55 << 8) & 16711680U;
    }
    
#line 386 
    if (0 != 0) 
#line 386 
                tmp_58 = ((((((*((__be32 *)rmpc) << 24) | ((*((__be32 *)rmpc) << 8) & 16711680U)) | ((*((__be32 *)rmpc) >> 8) & 65280U)) | (*((__be32 *)rmpc) >> 24)) >> 8) & 3840U) | 4096U;
    else {
      __u32 tmp_57;
      
#line 386 
      tmp_57 = __fswab32(*((__be32 *)rmpc));
      
#line 386 
      tmp_58 = ((tmp_57 >> 8) & 3840U) | 4096U;
    }
    
#line 386 
    if (0 != 0) 
#line 386 
                tmp_60 = ((((*((__be32 *)rmpc) << 24) | ((*((__be32 *)rmpc) << 8) & 16711680U)) | ((*((__be32 *)rmpc) >> 8) & 65280U)) | (*((__be32 *)rmpc) >> 24)) >> 24;
    else {
      __u32 tmp_59;
      
#line 386 
      tmp_59 = __fswab32(*((__be32 *)rmpc));
      
#line 386 
      tmp_60 = tmp_59 >> 24;
    }
    
#line 386 
    *((__be32 *)rmpc) = ((tmp_54 | tmp_56) | tmp_58) | tmp_60;
  }
  else {
    __u32 tmp_63;
    unsigned int tmp_62;
    
#line 386 
    if (0 != 0) 
#line 386 
                tmp_62 = (((((*((__be32 *)rmpc) << 24) | ((*((__be32 *)rmpc) << 8) & 16711680U)) | ((*((__be32 *)rmpc) >> 8) & 65280U)) | (*((__be32 *)rmpc) >> 24)) & 4279238655U) | 1048576U;
    else {
      __u32 tmp_61;
      
#line 386 
      tmp_61 = __fswab32(*((__be32 *)rmpc));
      
#line 386 
      tmp_62 = (tmp_61 & 4279238655U) | 1048576U;
    }
    
#line 386 
    tmp_63 = __fswab32(tmp_62);
    
#line 386 
    *((__be32 *)rmpc) = tmp_63;
  }
  
#line 388 
  err = mlx5_core_modify_rmp(dev,(u32 *)in,272);
  
#line 390 
  kvfree((void const *)in);
  
#line 391 
  __retres = err;
  return_label: 
#line 391 
                return __retres;
}


#line 394  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/srq.c"
static int query_rmp_cmd(struct mlx5_core_dev *dev, struct mlx5_core_srq *srq, struct mlx5_query_srq_mbox_out *out)
{
  int __retres;
  u32 *rmp_out;
  void *rmpc;
  void *srqc;
  int err;
  
#line 402 
  rmp_out = (u32 *)mlx5_vzalloc_0(272UL);
  
#line 403 
  if (rmp_out == (u32 *)0U) {
    
#line 404 
    __retres = -12;
    
#line 404 
    goto return_label;
  }
  else ;
  
#line 406 
  err = mlx5_core_query_rmp(dev,srq->srqn,rmp_out);
  
#line 407 
  if (err != 0) 
#line 408 
                goto out; else ;
  
#line 410 
  srqc = (void *)out + 16U;
  
#line 411 
  rmpc = (void *)rmp_out + 32U;
  
#line 412 
  rmpc_srqc_reformat(srqc,rmpc,(_Bool)0);
  out: 
#line 414 
  ;
  
#line 415 
  kvfree((void const *)rmp_out);
  
#line 416 
  __retres = err;
  return_label: 
#line 416 
                return __retres;
}


#line 419  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/srq.c"
static int create_srq_split(struct mlx5_core_dev *dev, struct mlx5_core_srq *srq, struct mlx5_create_srq_mbox_in *in, int inlen, int is_xrc)
{
  int __retres;
  
#line 424 
  if (dev->issi == 0U) {
    int tmp;
    
#line 425 
    tmp = create_srq_cmd(dev,srq,in,inlen);
    
#line 425 
    __retres = tmp;
    
#line 425 
    goto return_label;
  }
  else 
    
#line 426 
    if (srq->common.res == (unsigned int)MLX5_RES_XSRQ) {
      int tmp_0;
      
#line 427 
      tmp_0 = create_xrc_srq_cmd(dev,srq,in,inlen);
      
#line 427 
      __retres = tmp_0;
      
#line 427 
      goto return_label;
    }
    else {
      int tmp_1;
      
#line 429 
      tmp_1 = create_rmp_cmd(dev,srq,in,inlen);
      
#line 429 
      __retres = tmp_1;
      
#line 429 
      goto return_label;
    }
  return_label: 
#line 424 
                return __retres;
}


#line 432  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/srq.c"
static int destroy_srq_split(struct mlx5_core_dev *dev, struct mlx5_core_srq *srq)
{
  int __retres;
  
#line 435 
  if (dev->issi == 0U) {
    int tmp;
    
#line 436 
    tmp = destroy_srq_cmd(dev,srq);
    
#line 436 
    __retres = tmp;
    
#line 436 
    goto return_label;
  }
  else 
    
#line 437 
    if (srq->common.res == (unsigned int)MLX5_RES_XSRQ) {
      int tmp_0;
      
#line 438 
      tmp_0 = destroy_xrc_srq_cmd(dev,srq);
      
#line 438 
      __retres = tmp_0;
      
#line 438 
      goto return_label;
    }
    else {
      int tmp_1;
      
#line 440 
      tmp_1 = destroy_rmp_cmd(dev,srq);
      
#line 440 
      __retres = tmp_1;
      
#line 440 
      goto return_label;
    }
  return_label: 
#line 435 
                return __retres;
}


#line 443  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/srq.c"
int mlx5_core_create_srq(struct mlx5_core_dev *dev, struct mlx5_core_srq *srq, struct mlx5_create_srq_mbox_in *in, int inlen, int is_xrc)
{
  int __retres;
  int err;
  int tmp;
  
#line 448 
  struct mlx5_srq_table *table = & dev->priv.srq_table;
  
#line 450 
  if (is_xrc != 0) 
#line 450 
                   tmp = 2; else 
#line 450 
                                 tmp = 1;
  
#line 450 
  srq->common.res = (enum mlx5_res_type)tmp;
  
#line 452 
  err = create_srq_split(dev,srq,in,inlen,is_xrc);
  
#line 453 
  if (err != 0) {
    
#line 454 
    __retres = err;
    
#line 454 
    goto return_label;
  }
  else ;
  
#line 456 
  atomic_set(& srq->refcount,1);
  
#line 457 
  init_completion(& srq->free);
  
#line 459 
  ldv_spin_lock_irq_55(& table->lock);
  
#line 460 
  err = radix_tree_insert(& table->tree,(unsigned long)srq->srqn,(void *)srq);
  
#line 461 
  ldv_spin_unlock_irq_56(& table->lock);
  
#line 462 
  if (err != 0) {
    struct task_struct *tmp_0;
    
#line 463 
    ;
    
#line 463 
    ;
    
#line 463 
    tmp_0 = get_current();
    
#line 463 
    ;
    
#line 463 
    printk("\001",(char *)(& dev->priv.name),"mlx5_core_create_srq",463,tmp_0->pid,err,srq->srqn);
    
#line 464 
    goto err_destroy_srq_split;
  }
  else ;
  
#line 467 
  __retres = 0;
  
#line 467 
  goto return_label;
  err_destroy_srq_split: 
#line 469 
  ;
  
#line 470 
  destroy_srq_split(dev,srq);
  
#line 472 
  __retres = err;
  return_label: 
#line 472 
                return __retres;
}


#line 474  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/srq.c"
static char const __kstrtab_mlx5_core_create_srq[21U] = {(char)'m', (char)'l', (char)'x', (char)'5', (char)'_', (char)'c', (char)'o', (char)'r', (char)'e', (char)'_', (char)'c', (char)'r', (char)'e', (char)'a', (char)'t', (char)'e', (char)'_', (char)'s', (char)'r', (char)'q', (char)'\000'};

#line 474 
struct kernel_symbol const __ksymtab_mlx5_core_create_srq;


#line 474  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/srq.c"
struct kernel_symbol const __ksymtab_mlx5_core_create_srq = {.value = (unsigned long)(& mlx5_core_create_srq), .name = (char const *)(& __kstrtab_mlx5_core_create_srq)};

#line 476  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/srq.c"
int mlx5_core_destroy_srq(struct mlx5_core_dev *dev, struct mlx5_core_srq *srq)
{
  int __retres;
  struct mlx5_core_srq *tmp;
  int err;
  int tmp_3;
  
#line 478 
  struct mlx5_srq_table *table = & dev->priv.srq_table;
  
#line 482 
  ldv_spin_lock_irq_57(& table->lock);
  
#line 483 
  tmp = (struct mlx5_core_srq *)radix_tree_delete(& table->tree,(unsigned long)srq->srqn);
  
#line 484 
  ldv_spin_unlock_irq_58(& table->lock);
  
#line 485 
  if (tmp == (struct mlx5_core_srq *)0) {
    struct task_struct *tmp_1;
    
#line 486 
    ;
    
#line 486 
    tmp_1 = get_current();
    
#line 486 
    ;
    
#line 486 
    printk("\001",(char *)(& dev->priv.name),"mlx5_core_destroy_srq",486,tmp_1->pid,srq->srqn);
    
#line 487 
    __retres = -22;
    
#line 487 
    goto return_label;
  }
  else ;
  
#line 489 
  if (tmp != srq) {
    struct task_struct *tmp_2;
    
#line 490 
    ;
    
#line 490 
    tmp_2 = get_current();
    
#line 490 
    ;
    
#line 490 
    printk("\001",(char *)(& dev->priv.name),"mlx5_core_destroy_srq",490,tmp_2->pid,srq->srqn);
    
#line 491 
    __retres = -22;
    
#line 491 
    goto return_label;
  }
  else ;
  
#line 494 
  err = destroy_srq_split(dev,srq);
  
#line 495 
  if (err != 0) {
    
#line 496 
    __retres = err;
    
#line 496 
    goto return_label;
  }
  else ;
  
#line 498 
  tmp_3 = atomic_dec_and_test_0(& srq->refcount);
  
#line 498 
  if (tmp_3 != 0) 
#line 499 
                  complete(& srq->free); else ;
  
#line 500 
  wait_for_completion(& srq->free);
  
#line 502 
  __retres = 0;
  return_label: 
#line 502 
                return __retres;
}


#line 504  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/srq.c"
static char const __kstrtab_mlx5_core_destroy_srq[22U] = {(char)'m', (char)'l', (char)'x', (char)'5', (char)'_', (char)'c', (char)'o', (char)'r', (char)'e', (char)'_', (char)'d', (char)'e', (char)'s', (char)'t', (char)'r', (char)'o', (char)'y', (char)'_', (char)'s', (char)'r', (char)'q', (char)'\000'};

#line 504 
struct kernel_symbol const __ksymtab_mlx5_core_destroy_srq;


#line 504  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/srq.c"
struct kernel_symbol const __ksymtab_mlx5_core_destroy_srq = {.value = (unsigned long)(& mlx5_core_destroy_srq), .name = (char const *)(& __kstrtab_mlx5_core_destroy_srq)};

#line 506  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/srq.c"
int mlx5_core_query_srq(struct mlx5_core_dev *dev, struct mlx5_core_srq *srq, struct mlx5_query_srq_mbox_out *out)
{
  int __retres;
  
#line 509 
  if (dev->issi == 0U) {
    int tmp;
    
#line 510 
    tmp = query_srq_cmd(dev,srq,out);
    
#line 510 
    __retres = tmp;
    
#line 510 
    goto return_label;
  }
  else 
    
#line 511 
    if (srq->common.res == (unsigned int)MLX5_RES_XSRQ) {
      int tmp_0;
      
#line 512 
      tmp_0 = query_xrc_srq_cmd(dev,srq,out);
      
#line 512 
      __retres = tmp_0;
      
#line 512 
      goto return_label;
    }
    else {
      int tmp_1;
      
#line 514 
      tmp_1 = query_rmp_cmd(dev,srq,out);
      
#line 514 
      __retres = tmp_1;
      
#line 514 
      goto return_label;
    }
  return_label: 
#line 509 
                return __retres;
}


#line 516  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/srq.c"
static char const __kstrtab_mlx5_core_query_srq[20U] = {(char)'m', (char)'l', (char)'x', (char)'5', (char)'_', (char)'c', (char)'o', (char)'r', (char)'e', (char)'_', (char)'q', (char)'u', (char)'e', (char)'r', (char)'y', (char)'_', (char)'s', (char)'r', (char)'q', (char)'\000'};

#line 516 
struct kernel_symbol const __ksymtab_mlx5_core_query_srq;


#line 516  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/srq.c"
struct kernel_symbol const __ksymtab_mlx5_core_query_srq = {.value = (unsigned long)(& mlx5_core_query_srq), .name = (char const *)(& __kstrtab_mlx5_core_query_srq)};

#line 518  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/srq.c"
int mlx5_core_arm_srq(struct mlx5_core_dev *dev, struct mlx5_core_srq *srq, u16 lwm, int is_srq)
{
  int __retres;
  
#line 521 
  if (dev->issi == 0U) {
    int tmp;
    
#line 522 
    tmp = arm_srq_cmd(dev,srq,(unsigned short)((int)lwm),is_srq);
    
#line 522 
    __retres = tmp;
    
#line 522 
    goto return_label;
  }
  else 
    
#line 523 
    if (srq->common.res == (unsigned int)MLX5_RES_XSRQ) {
      int tmp_0;
      
#line 524 
      tmp_0 = arm_xrc_srq_cmd(dev,srq,(unsigned short)((int)lwm));
      
#line 524 
      __retres = tmp_0;
      
#line 524 
      goto return_label;
    }
    else {
      int tmp_1;
      
#line 526 
      tmp_1 = arm_rmp_cmd(dev,srq,(unsigned short)((int)lwm));
      
#line 526 
      __retres = tmp_1;
      
#line 526 
      goto return_label;
    }
  return_label: 
#line 521 
                return __retres;
}


#line 528  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/srq.c"
static char const __kstrtab_mlx5_core_arm_srq[18U] = {(char)'m', (char)'l', (char)'x', (char)'5', (char)'_', (char)'c', (char)'o', (char)'r', (char)'e', (char)'_', (char)'a', (char)'r', (char)'m', (char)'_', (char)'s', (char)'r', (char)'q', (char)'\000'};

#line 528 
struct kernel_symbol const __ksymtab_mlx5_core_arm_srq;


#line 528  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/srq.c"
struct kernel_symbol const __ksymtab_mlx5_core_arm_srq = {.value = (unsigned long)(& mlx5_core_arm_srq), .name = (char const *)(& __kstrtab_mlx5_core_arm_srq)};

#line 530  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/srq.c"
void mlx5_init_srq_table(struct mlx5_core_dev *dev)
{
  
#line 532 
  struct mlx5_srq_table *table = & dev->priv.srq_table;
  
#line 534 
  spinlock_check(& table->lock);
  {
    struct lock_class_key __key;
    
#line 534 
    __raw_spin_lock_init(& table->lock.__anonCompField_spinlock_18.rlock,"&(&table->lock)->rlock",& __key);
  }
  
#line 535 
  table->tree.height = 0U;
  
#line 535 
  table->tree.gfp_mask = 32U;
  
#line 535 
  table->tree.rnode = (struct radix_tree_node *)0;
  
#line 536 
  return;
}


#line 538  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/srq.c"
void mlx5_cleanup_srq_table(struct mlx5_core_dev *dev)
{
  
#line 540 
  return;
}


#line 118  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_srq.c.aux"
static void atomic_inc_0(atomic_t *v)
{
  
#line 121 
  ldv_atomic_inc(v);
  
#line 122 
  return;
}


#line 132  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_srq.c.aux"
static int atomic_dec_and_test_0(atomic_t *v)
{
  int tmp;
  
#line 135 
  tmp = ldv_atomic_dec_and_test(v);
  
#line 135 
  return tmp;
}


#line 497  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_srq.c.aux"
static void *kzalloc_2(size_t size, gfp_t flags)
{
  void *tmp;
  
#line 500 
  tmp = ldv_kzalloc(size,flags);
  
#line 500 
  return tmp;
}


#line 514  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_srq.c.aux"
static void ldv_spin_lock_51_0(spinlock_t *lock)
{
  
#line 518 
  ldv_spin_model_lock((char *)"lock_of_mlx5_srq_table");
  
#line 520 
  spin_lock_1(lock);
  
#line 521 
  return;
}


#line 524  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_srq.c.aux"
static void ldv_spin_unlock_52_0(spinlock_t *lock)
{
  
#line 528 
  ldv_spin_model_unlock((char *)"lock_of_mlx5_srq_table");
  
#line 530 
  spin_unlock_1(lock);
  
#line 531 
  return;
}


#line 534  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_srq.c.aux"
static void ldv_spin_lock_53(spinlock_t *lock)
{
  
#line 538 
  ldv_spin_model_lock((char *)"lock_of_mlx5_srq_table");
  
#line 540 
  spin_lock_1(lock);
  
#line 541 
  return;
}


#line 544  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_srq.c.aux"
static void ldv_spin_unlock_54(spinlock_t *lock)
{
  
#line 548 
  ldv_spin_model_unlock((char *)"lock_of_mlx5_srq_table");
  
#line 550 
  spin_unlock_1(lock);
  
#line 551 
  return;
}


#line 554  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_srq.c.aux"
static void ldv_spin_lock_irq_55(spinlock_t *lock)
{
  
#line 558 
  ldv_spin_model_lock((char *)"lock_of_mlx5_srq_table");
  
#line 560 
  spin_lock_irq_2(lock);
  
#line 561 
  return;
}


#line 564  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_srq.c.aux"
static void ldv_spin_unlock_irq_56(spinlock_t *lock)
{
  
#line 568 
  ldv_spin_model_unlock((char *)"lock_of_mlx5_srq_table");
  
#line 570 
  spin_unlock_irq_2(lock);
  
#line 571 
  return;
}


#line 574  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_srq.c.aux"
static void ldv_spin_lock_irq_57(spinlock_t *lock)
{
  
#line 578 
  ldv_spin_model_lock((char *)"lock_of_mlx5_srq_table");
  
#line 580 
  spin_lock_irq_2(lock);
  
#line 581 
  return;
}


#line 584  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_srq.c.aux"
static void ldv_spin_unlock_irq_58(spinlock_t *lock)
{
  
#line 588 
  ldv_spin_model_unlock((char *)"lock_of_mlx5_srq_table");
  
#line 590 
  spin_unlock_irq_2(lock);
  
#line 591 
  return;
}


#line 14  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/bitops/find.h"
unsigned long find_next_bit(unsigned long const *, unsigned long, unsigned long);


#line 614  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list.h"
__inline static void __hlist_del(struct hlist_node *n)
{
  
#line 616 
  struct hlist_node *next = n->next;
  
#line 617 
  struct hlist_node **pprev = n->pprev;
  
#line 618 
  *pprev = next;
  
#line 619 
  if (next != (struct hlist_node *)0) 
#line 620 
                                      next->pprev = pprev; else ;
  
#line 621 
  return;
}


#line 623  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list.h"
__inline static void hlist_del(struct hlist_node *n)
{
  
#line 625 
  __hlist_del(n);
  
#line 626 
  n->next = (struct hlist_node *)(-2401263026317557504);
  
#line 627 
  n->pprev = (struct hlist_node **)(-2401263026316508672);
  
#line 628 
  return;
}


#line 638  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list.h"
__inline static void hlist_add_head(struct hlist_node *n, struct hlist_head *h)
{
  
#line 640 
  struct hlist_node *first = h->first;
  
#line 641 
  n->next = first;
  
#line 642 
  if (first != (struct hlist_node *)0) 
#line 643 
                                       first->pprev = & n->next; else ;
  
#line 644 
  h->first = n;
  
#line 645 
  n->pprev = & h->first;
  
#line 646 
  return;
}


#line 71  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/bug.h"
void warn_slowpath_null(char const *, int const);


#line 30  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock_api_smp.h"
void _raw_spin_lock_bh(raw_spinlock_t *);


#line 42 
void _raw_spin_unlock_bh(raw_spinlock_t *);


#line 355  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_lock_bh(spinlock_t *lock)
{
  
#line 357 
  _raw_spin_lock_bh(& lock->__anonCompField_spinlock_18.rlock);
  
#line 358 
  return;
}


#line 379 
static void ldv_spin_lock_bh_70(spinlock_t *lock);


#line 404  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_unlock_bh(spinlock_t *lock)
{
  
#line 406 
  _raw_spin_unlock_bh(& lock->__anonCompField_spinlock_18.rlock);
  
#line 407 
  return;
}


#line 428 
static void ldv_spin_unlock_bh_72(spinlock_t *lock);


#line 37  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_en_flow_table.c.aux"
static void ldv_mutex_lock_76(struct mutex *ldv_func_arg1);


#line 41 
static void ldv_mutex_lock_78(struct mutex *ldv_func_arg1);


#line 45 
static void ldv_mutex_lock_80(struct mutex *ldv_func_arg1);


#line 52 
int ldv_mutex_model_is_locked(struct mutex *, char *);


#line 141  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mutex.h"
static int ldv_mutex_is_locked_74(struct mutex *lock);


#line 145 
static int ldv_mutex_is_locked_75(struct mutex *lock);


#line 193 
static void ldv_mutex_unlock_77(struct mutex *ldv_func_arg1);


#line 197 
static void ldv_mutex_unlock_79(struct mutex *ldv_func_arg1);


#line 201 
static void ldv_mutex_unlock_81(struct mutex *ldv_func_arg1);


#line 542  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/slab.h"
static void *kcalloc_0(size_t n, size_t size, gfp_t flags);


#line 581 
static void *kzalloc_3(size_t size, gfp_t flags);


#line 1880  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void *netdev_priv(struct net_device const *dev)
{
  void *__retres;
  
#line 1882 
  __retres = (void *)dev + 3008U;
  
#line 1882 
  return __retres;
}


#line 3314  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void netif_addr_lock_bh(struct net_device *dev)
{
  
#line 3316 
  ldv_spin_lock_bh_70(& dev->addr_list_lock);
  
#line 3317 
  return;
}


#line 3324  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void netif_addr_unlock_bh(struct net_device *dev)
{
  
#line 3326 
  ldv_spin_unlock_bh_72(& dev->addr_list_lock);
  
#line 3327 
  return;
}


#line 3828 
void netdev_err(struct net_device const *, char const * , ...);


#line 241  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dst.h"
void __compiletime_assert_241(void);


#line 637  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/driver.h"
__inline static void *mlx5_vzalloc_1(unsigned long size)
{
  void *rtn;
  
#line 641 
  rtn = kzalloc_3(size,720U);
  
#line 642 
  if (rtn == (void *)0) 
#line 643 
                        rtn = vzalloc(size); else ;
  
#line 644 
  return rtn;
}


#line 111  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/etherdevice.h"
__inline static bool is_multicast_ether_addr(u8 const *addr)
{
  bool __retres;
  
#line 114 
  u32 a = *((u32 const *)addr);
  
#line 121 
  __retres = (_Bool)((a & 1U) != 0U);
  
#line 121 
  return __retres;
}


#line 170  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/etherdevice.h"
__inline static bool is_unicast_ether_addr(u8 const *addr)
{
  bool __retres;
  int tmp_0;
  bool tmp;
  
#line 172 
  tmp = is_multicast_ether_addr(addr);
  
#line 172 
  if ((int)tmp != 0) 
#line 172 
                     tmp_0 = 0; else 
#line 172 
                                     tmp_0 = 1;
  
#line 172 
  __retres = (_Bool)(tmp_0 != 0);
  
#line 172 
  return __retres;
}


#line 271  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/etherdevice.h"
__inline static void ether_addr_copy(u8 *dst, u8 const *src)
{
  
#line 274 
  *((u32 *)dst) = *((u32 const *)src);
  
#line 275 
  *((u16 *)(dst + 4U)) = *((u16 const *)(src + 4U));
  
#line 276 
  return;
}


#line 339  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/etherdevice.h"
__inline static bool ether_addr_equal_64bits(u8 const *addr1, u8 const *addr2)
{
  bool __retres;
  
#line 343 
  u64 fold = *((u64 const *)addr1) ^ *((u64 const *)addr2);
  
#line 348 
  __retres = (_Bool)(fold << 16 == 0ULL);
  
#line 348 
  return __retres;
}


#line 473  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en.h"
int mlx5e_open_flow_table(struct mlx5e_priv *priv);


#line 474 
void mlx5e_close_flow_table(struct mlx5e_priv *priv);


#line 475 
void mlx5e_init_eth_addr(struct mlx5e_priv *priv);


#line 476 
void mlx5e_set_rx_mode_core(struct mlx5e_priv *priv);


#line 477 
void mlx5e_set_rx_mode_work(struct work_struct *work);


#line 479 
int mlx5e_vlan_rx_add_vid(struct net_device *dev, __be16 proto, u16 vid);


#line 481 
int mlx5e_vlan_rx_kill_vid(struct net_device *dev, __be16 proto, u16 vid);


#line 483 
void mlx5e_enable_vlan_filter(struct mlx5e_priv *priv);


#line 484 
void mlx5e_disable_vlan_filter(struct mlx5e_priv *priv);


#line 485 
int mlx5e_add_all_vlan_rules(struct mlx5e_priv *priv);


#line 486 
void mlx5e_del_all_vlan_rules(struct mlx5e_priv *priv);


#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_flow_table.c"
__inline static int mlx5e_hash_eth_addr(u8 *addr)
{
  int __retres;
  
#line 67 
  __retres = (int)*(addr + 5U);
  
#line 67 
  return __retres;
}


#line 70  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_flow_table.c"
static void mlx5e_add_eth_addr_to_hash(struct hlist_head *hash, u8 *addr)
{
  struct mlx5e_eth_addr_hash_node *hn;
  struct mlx5e_eth_addr_hash_node *tmp_2;
  bool tmp_3;
  struct mlx5e_eth_addr_hash_node *tmp_6;
  
#line 73 
  int ix = mlx5e_hash_eth_addr(addr);
  
#line 74 
  int found = 0;
  {
    struct mlx5e_eth_addr_hash_node *tmp_1;
    
#line 76 
    struct hlist_node *____ptr = (hash + ix)->first;
    
#line 76 
    if (____ptr != (struct hlist_node *)0) {
      struct mlx5e_eth_addr_hash_node *tmp_0;
      {
        
#line 76 
        struct hlist_node const *__mptr = (struct hlist_node const *)____ptr;
        
#line 76 
        tmp_0 = (struct mlx5e_eth_addr_hash_node *)__mptr;
      }
      
#line 76 
      tmp_1 = tmp_0;
    }
    else 
#line 76 
         tmp_1 = (struct mlx5e_eth_addr_hash_node *)0;
    
#line 76 
    tmp_2 = tmp_1;
  }
  
#line 76 
  hn = tmp_2;
  
#line 76 
  goto ldv_59726;
  ldv_59725: 
#line 77 
  ;
  
#line 77 
  tmp_3 = ether_addr_equal_64bits((u8 const *)(& hn->ai.addr),(u8 const *)addr);
  
#line 77 
  if ((int)tmp_3 != 0) {
    
#line 78 
    found = 1;
    
#line 79 
    goto ldv_59724;
  }
  else ;
  {
    struct mlx5e_eth_addr_hash_node *tmp_5;
    
#line 76 
    struct hlist_node *____ptr_0 = hn->hlist.next;
    
#line 76 
    if (____ptr_0 != (struct hlist_node *)0) {
      struct mlx5e_eth_addr_hash_node *tmp_4;
      {
        
#line 76 
        struct hlist_node const *__mptr_0 = (struct hlist_node const *)____ptr_0;
        
#line 76 
        tmp_4 = (struct mlx5e_eth_addr_hash_node *)__mptr_0;
      }
      
#line 76 
      tmp_5 = tmp_4;
    }
    else 
#line 76 
         tmp_5 = (struct mlx5e_eth_addr_hash_node *)0;
    
#line 76 
    tmp_6 = tmp_5;
  }
  
#line 76 
  hn = tmp_6;
  ldv_59726: 
#line 78 
  ;
  
#line 76 
  if (hn != (struct mlx5e_eth_addr_hash_node *)0) 
#line 78 
                                                  goto ldv_59725; else 
                                                                    
#line 81 
                                                                    goto ldv_59724;
  ldv_59724: 
#line 82 
  ;
  
#line 82 
  if (found != 0) {
    
#line 83 
    hn->action = (unsigned char)0U;
    
#line 84 
    goto return_label;
  }
  else ;
  
#line 87 
  hn = (struct mlx5e_eth_addr_hash_node *)kzalloc_3(64UL,32U);
  
#line 88 
  if (hn == (struct mlx5e_eth_addr_hash_node *)0) 
#line 89 
                                                  goto return_label; else ;
  
#line 91 
  ether_addr_copy((u8 *)(& hn->ai.addr),(u8 const *)addr);
  
#line 92 
  hn->action = (unsigned char)1U;
  
#line 94 
  hlist_add_head(& hn->hlist,hash + ix);
  return_label: 
#line 95 
                return;
}


#line 97  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_flow_table.c"
static void mlx5e_del_eth_addr_from_hash(struct mlx5e_eth_addr_hash_node *hn)
{
  
#line 99 
  hlist_del(& hn->hlist);
  
#line 100 
  kfree((void const *)hn);
  
#line 101 
  return;
}


#line 103  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_flow_table.c"
static void mlx5e_del_eth_addr_from_flow_table(struct mlx5e_priv *priv, struct mlx5e_eth_addr_info *ai)
{
  
#line 106 
  void *ft = priv->ft.main;
  
#line 108 
  if ((ai->tt_vec & 2U) != 0U) 
#line 109 
                               mlx5_del_flow_table_entry(ft,ai->ft_ix[1]); else ;
  
#line 111 
  if ((ai->tt_vec & 1U) != 0U) 
#line 112 
                               mlx5_del_flow_table_entry(ft,ai->ft_ix[0]); else ;
  
#line 114 
  if ((ai->tt_vec & 8U) != 0U) 
#line 115 
                               mlx5_del_flow_table_entry(ft,ai->ft_ix[3]); else ;
  
#line 117 
  if ((ai->tt_vec & 4U) != 0U) 
#line 118 
                               mlx5_del_flow_table_entry(ft,ai->ft_ix[2]); else ;
  
#line 120 
  if ((ai->tt_vec & 32U) != 0U) 
#line 121 
                                mlx5_del_flow_table_entry(ft,ai->ft_ix[5]); else ;
  
#line 123 
  if ((ai->tt_vec & 16U) != 0U) 
#line 124 
                                mlx5_del_flow_table_entry(ft,ai->ft_ix[4]); else ;
  
#line 126 
  if ((ai->tt_vec & 64U) != 0U) 
#line 127 
                                mlx5_del_flow_table_entry(ft,ai->ft_ix[6]); else ;
  
#line 128 
  return;
}


#line 130  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_flow_table.c"
static int mlx5e_get_eth_addr_type(u8 *addr)
{
  int __retres;
  bool tmp;
  
#line 132 
  tmp = is_unicast_ether_addr((u8 const *)addr);
  
#line 132 
  if ((int)tmp != 0) {
    
#line 133 
    __retres = 0;
    
#line 133 
    goto return_label;
  }
  else ;
  
#line 135 
  if ((((unsigned int)*addr == 1U && (unsigned int)*(addr + 1U) == 0U) && (unsigned int)*(addr + 2U) == 94U) && (int)*(addr + 3U) >= 0) {
    
#line 139 
    __retres = 1;
    
#line 139 
    goto return_label;
  }
  else ;
  
#line 141 
  if ((unsigned int)*addr == 51U && (unsigned int)*(addr + 1U) == 51U) {
    
#line 143 
    __retres = 2;
    
#line 143 
    goto return_label;
  }
  else ;
  
#line 145 
  __retres = 3;
  return_label: 
#line 145 
                return __retres;
}


#line 148  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_flow_table.c"
static u32 mlx5e_get_tt_vec(struct mlx5e_eth_addr_info *ai, int type)
{
  int eth_addr_type;
  u32 ret;
  
#line 153 
  switch (type) {
    case 0: 
#line 154 
    ;
    
#line 155 
    eth_addr_type = mlx5e_get_eth_addr_type((u8 *)(& ai->addr));
    
#line 156 
    switch (eth_addr_type) {
      case 0: 
#line 157 
      ;
      
#line 158 
      ret = 127U;
      
#line 167 
      goto ldv_59746;
      case 1: 
#line 169 
      ;
      
#line 170 
      ret = 20U;
      
#line 174 
      goto ldv_59746;
      case 2: 
#line 176 
      ;
      
#line 177 
      ret = 40U;
      
#line 181 
      goto ldv_59746;
      case 3: 
#line 183 
      ;
      
#line 184 
      ret = 64U;
      
#line 187 
      goto ldv_59746;
    }
    ldv_59746: 
#line 190 
    ;
    
#line 190 
    goto ldv_59750;
    case 1: 
#line 192 
    ;
    
#line 193 
    ret = 124U;
    
#line 200 
    goto ldv_59750;
    default: 
#line 202 
    ;
    
#line 203 
    ret = 127U;
    
#line 212 
    goto ldv_59750;
  }
  ldv_59750: 
#line 215 
  ;
  
#line 215 
  return ret;
}


#line 239 
void __compiletime_assert_240(void);


#line 242 
void __compiletime_assert_243(void);


#line 265 
void __compiletime_assert_266(void);


#line 278 
void __compiletime_assert_279(void);


#line 282 
void __compiletime_assert_283(void);


#line 284 
void __compiletime_assert_285(void);


#line 297 
void __compiletime_assert_298(void);


#line 299 
void __compiletime_assert_300(void);


#line 313 
void __compiletime_assert_314(void);


#line 317 
void __compiletime_assert_318(void);


#line 319 
void __compiletime_assert_320(void);


#line 332 
void __compiletime_assert_333(void);


#line 334 
void __compiletime_assert_335(void);


#line 346 
void __compiletime_assert_347(void);


#line 350 
void __compiletime_assert_351(void);


#line 352 
void __compiletime_assert_353(void);


#line 365 
void __compiletime_assert_366(void);


#line 367 
void __compiletime_assert_368(void);


#line 218  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_flow_table.c"
static int __mlx5e_add_eth_addr_rule(struct mlx5e_priv *priv, struct mlx5e_eth_addr_info *ai, int type, void *flow_context, void *match_criteria)
{
  int __retres;
  void *match_value;
  void *dest;
  u8 *dmac;
  u8 *match_criteria_dmac;
  u32 tt_vec;
  int err;
  
#line 222 
  u8 match_criteria_enable = (unsigned char)0U;
  
#line 227 
  void *ft = priv->ft.main;
  
#line 228 
  u32 *tirn = (u32 *)(& priv->tirn);
  
#line 232 
  match_value = flow_context + 64U;
  
#line 233 
  dmac = (u8 *)match_value + 8U;
  
#line 235 
  match_criteria_dmac = (u8 *)match_criteria + 8U;
  
#line 237 
  dest = flow_context + 768U;
  {
    
#line 239 
    bool __cond = (_Bool)0;
    
#line 239 
    if ((int)__cond != 0) 
#line 239 
                          __compiletime_assert_240(); else ;
  }
  
#line 239 
  if (0 != 0) {
    unsigned int tmp_2;
    unsigned int tmp_4;
    
#line 239 
    if (0 != 0) 
#line 239 
                tmp_2 = ((((((*((__be32 *)flow_context + 3U) << 24) | ((*((__be32 *)flow_context + 3U) << 8) & 16711680U)) | ((*((__be32 *)flow_context + 3U) >> 8) & 65280U)) | (*((__be32 *)flow_context + 3U) >> 24)) >> 8) & 65280U) | 67108864U;
    else {
      __u32 tmp_1;
      
#line 239 
      tmp_1 = __fswab32(*((__be32 *)flow_context + 3U));
      
#line 239 
      tmp_2 = ((tmp_1 >> 8) & 65280U) | 67108864U;
    }
    
#line 239 
    if (0 != 0) 
#line 239 
                tmp_4 = ((((*((__be32 *)flow_context + 3U) << 24) | ((*((__be32 *)flow_context + 3U) << 8) & 16711680U)) | ((*((__be32 *)flow_context + 3U) >> 8) & 65280U)) | (*((__be32 *)flow_context + 3U) >> 24)) >> 24;
    else {
      __u32 tmp_3;
      
#line 239 
      tmp_3 = __fswab32(*((__be32 *)flow_context + 3U));
      
#line 239 
      tmp_4 = tmp_3 >> 24;
    }
    
#line 239 
    *((__be32 *)flow_context + 3U) = tmp_2 | tmp_4;
  }
  else {
    __u32 tmp_7;
    unsigned int tmp_6;
    
#line 239 
    if (0 != 0) 
#line 239 
                tmp_6 = (((((*((__be32 *)flow_context + 3U) << 24) | ((*((__be32 *)flow_context + 3U) << 8) & 16711680U)) | ((*((__be32 *)flow_context + 3U) >> 8) & 65280U)) | (*((__be32 *)flow_context + 3U) >> 24)) & 4294901760U) | 4U;
    else {
      __u32 tmp_5;
      
#line 239 
      tmp_5 = __fswab32(*((__be32 *)flow_context + 3U));
      
#line 239 
      tmp_6 = (tmp_5 & 4294901760U) | 4U;
    }
    
#line 239 
    tmp_7 = __fswab32(tmp_6);
    
#line 239 
    *((__be32 *)flow_context + 3U) = tmp_7;
  }
  {
    
#line 241 
    bool __cond_0 = (_Bool)0;
    
#line 241 
    if ((int)__cond_0 != 0) 
#line 241 
                            __compiletime_assert_241(); else ;
  }
  
#line 241 
  if (0 != 0) {
    unsigned int tmp_11;
    
#line 241 
    if (0 != 0) 
#line 241 
                tmp_11 = (((((*((__be32 *)flow_context + 4U) << 24) | ((*((__be32 *)flow_context + 4U) << 8) & 16711680U)) | ((*((__be32 *)flow_context + 4U) >> 8) & 65280U)) | (*((__be32 *)flow_context + 4U) >> 24)) >> 24) | 16777216U;
    else {
      __u32 tmp_10;
      
#line 241 
      tmp_10 = __fswab32(*((__be32 *)flow_context + 4U));
      
#line 241 
      tmp_11 = (tmp_10 >> 24) | 16777216U;
    }
    
#line 241 
    *((__be32 *)flow_context + 4U) = tmp_11;
  }
  else {
    __u32 tmp_14;
    unsigned int tmp_13;
    
#line 241 
    if (0 != 0) 
#line 241 
                tmp_13 = (((((*((__be32 *)flow_context + 4U) << 24) | ((*((__be32 *)flow_context + 4U) << 8) & 16711680U)) | ((*((__be32 *)flow_context + 4U) >> 8) & 65280U)) | (*((__be32 *)flow_context + 4U) >> 24)) & 4278190080U) | 1U;
    else {
      __u32 tmp_12;
      
#line 241 
      tmp_12 = __fswab32(*((__be32 *)flow_context + 4U));
      
#line 241 
      tmp_13 = (tmp_12 & 4278190080U) | 1U;
    }
    
#line 241 
    tmp_14 = __fswab32(tmp_13);
    
#line 241 
    *((__be32 *)flow_context + 4U) = tmp_14;
  }
  {
    
#line 242 
    bool __cond_1 = (_Bool)0;
    
#line 242 
    if ((int)__cond_1 != 0) 
#line 242 
                            __compiletime_assert_243(); else ;
  }
  
#line 242 
  if (0 != 0) {
    unsigned int tmp_18;
    unsigned int tmp_20;
    unsigned int tmp_22;
    
#line 242 
    if (0 != 0) 
#line 242 
                tmp_18 = ((((*((__be32 *)dest) << 24) | ((*((__be32 *)dest) << 8) & 16711680U)) | ((*((__be32 *)dest) >> 8) & 65280U)) | (*((__be32 *)dest) >> 24)) << 24;
    else {
      __u32 tmp_17;
      
#line 242 
      tmp_17 = __fswab32(*((__be32 *)dest));
      
#line 242 
      tmp_18 = tmp_17 << 24;
    }
    
#line 242 
    if (0 != 0) 
#line 242 
                tmp_20 = (((((*((__be32 *)dest) << 24) | ((*((__be32 *)dest) << 8) & 16711680U)) | ((*((__be32 *)dest) >> 8) & 65280U)) | (*((__be32 *)dest) >> 24)) << 8) & 16711680U;
    else {
      __u32 tmp_19;
      
#line 242 
      tmp_19 = __fswab32(*((__be32 *)dest));
      
#line 242 
      tmp_20 = (tmp_19 << 8) & 16711680U;
    }
    
#line 242 
    if (0 != 0) 
#line 242 
                tmp_22 = (((((*((__be32 *)dest) << 24) | ((*((__be32 *)dest) << 8) & 16711680U)) | ((*((__be32 *)dest) >> 8) & 65280U)) | (*((__be32 *)dest) >> 24)) >> 8) & 65280U;
    else {
      __u32 tmp_21;
      
#line 242 
      tmp_21 = __fswab32(*((__be32 *)dest));
      
#line 242 
      tmp_22 = (tmp_21 >> 8) & 65280U;
    }
    
#line 242 
    *((__be32 *)dest) = ((tmp_18 | tmp_20) | tmp_22) | 2U;
  }
  else {
    __u32 tmp_25;
    unsigned int tmp_24;
    
#line 242 
    if (0 != 0) 
#line 242 
                tmp_24 = (((((*((__be32 *)dest) << 24) | ((*((__be32 *)dest) << 8) & 16711680U)) | ((*((__be32 *)dest) >> 8) & 65280U)) | (*((__be32 *)dest) >> 24)) & 16777215U) | 33554432U;
    else {
      __u32 tmp_23;
      
#line 242 
      tmp_23 = __fswab32(*((__be32 *)dest));
      
#line 242 
      tmp_24 = (tmp_23 & 16777215U) | 33554432U;
    }
    
#line 242 
    tmp_25 = __fswab32(tmp_24);
    
#line 242 
    *((__be32 *)dest) = tmp_25;
  }
  
#line 245 
  switch (type) {
    case 0: 
#line 246 
    ;
    
#line 247 
    match_criteria_enable = (unsigned char)1U;
    
#line 248 
    memset((void *)match_criteria_dmac,255,6UL);
    
#line 249 
    ether_addr_copy(dmac,(u8 const *)(& ai->addr));
    
#line 250 
    goto ldv_59782;
    case 1: 
#line 252 
    ;
    
#line 253 
    match_criteria_enable = (unsigned char)1U;
    
#line 254 
    *match_criteria_dmac = (unsigned char)1U;
    
#line 255 
    *dmac = (unsigned char)1U;
    
#line 256 
    goto ldv_59782;
    case 2: 
#line 258 
    ;
    
#line 259 
    goto ldv_59782;
  }
  ldv_59782: 
#line 262 
  ;
  
#line 262 
  tt_vec = mlx5e_get_tt_vec(ai,type);
  
#line 264 
  if ((tt_vec & 64U) != 0U) {
    {
      
#line 265 
      bool __cond_2 = (_Bool)0;
      
#line 265 
      if ((int)__cond_2 != 0) 
#line 265 
                              __compiletime_assert_266(); else ;
    }
    
#line 265 
    if (0 != 0) {
      unsigned int tmp_29;
      unsigned int tmp_31;
      unsigned int tmp_33;
      unsigned int tmp_35;
      
#line 265 
      if (0 != 0) 
#line 265 
                  tmp_29 = ((((*((__be32 *)dest) << 24) | ((*((__be32 *)dest) << 8) & 16711680U)) | ((*((__be32 *)dest) >> 8) & 65280U)) | (*((__be32 *)dest) >> 24)) & 4278190080U;
      else {
        __u32 tmp_28;
        
#line 265 
        tmp_28 = __fswab32(*((__be32 *)dest));
        
#line 265 
        tmp_29 = tmp_28 & 4278190080U;
      }
      
#line 265 
      if (0 != 0) 
#line 265 
                  tmp_31 = ((((*((__be32 *)dest) << 24) | ((*((__be32 *)dest) << 8) & 16711680U)) | ((*((__be32 *)dest) >> 8) & 65280U)) | (*((__be32 *)dest) >> 24)) & 4278190080U;
      else {
        __u32 tmp_30;
        
#line 265 
        tmp_30 = __fswab32(*((__be32 *)dest));
        
#line 265 
        tmp_31 = tmp_30 & 4278190080U;
      }
      
#line 265 
      if (0 != 0) 
#line 265 
                  tmp_33 = ((((*((__be32 *)dest) << 24) | ((*((__be32 *)dest) << 8) & 16711680U)) | ((*((__be32 *)dest) >> 8) & 65280U)) | (*((__be32 *)dest) >> 24)) & 4278190080U;
      else {
        __u32 tmp_32;
        
#line 265 
        tmp_32 = __fswab32(*((__be32 *)dest));
        
#line 265 
        tmp_33 = tmp_32 & 4278190080U;
      }
      
#line 265 
      if (0 != 0) 
#line 265 
                  tmp_35 = ((((*((__be32 *)dest) << 24) | ((*((__be32 *)dest) << 8) & 16711680U)) | ((*((__be32 *)dest) >> 8) & 65280U)) | (*((__be32 *)dest) >> 24)) & 4278190080U;
      else {
        __u32 tmp_34;
        
#line 265 
        tmp_34 = __fswab32(*((__be32 *)dest));
        
#line 265 
        tmp_35 = tmp_34 & 4278190080U;
      }
      
#line 265 
      *((__be32 *)dest) = ((((tmp_29 | (*(tirn + 6U) & 16777215U)) << 24) | (((tmp_31 | (*(tirn + 6U) & 16777215U)) << 8) & 16711680U)) | (((tmp_33 | (*(tirn + 6U) & 16777215U)) >> 8) & 65280U)) | ((tmp_35 | (*(tirn + 6U) & 16777215U)) >> 24);
    }
    else {
      __u32 tmp_38;
      unsigned int tmp_37;
      
#line 265 
      if (0 != 0) 
#line 265 
                  tmp_37 = ((((*((__be32 *)dest) << 24) | ((*((__be32 *)dest) << 8) & 16711680U)) | ((*((__be32 *)dest) >> 8) & 65280U)) | (*((__be32 *)dest) >> 24)) & 4278190080U;
      else {
        __u32 tmp_36;
        
#line 265 
        tmp_36 = __fswab32(*((__be32 *)dest));
        
#line 265 
        tmp_37 = tmp_36 & 4278190080U;
      }
      
#line 265 
      ;
      
#line 265 
      tmp_38 = __fswab32(tmp_37 | (*(tirn + 6U) & 16777215U));
      
#line 265 
      *((__be32 *)dest) = tmp_38;
    }
    
#line 267 
    err = mlx5_add_flow_table_entry(ft,(unsigned char)((int)match_criteria_enable),match_criteria,flow_context,& ai->ft_ix[6]);
    
#line 270 
    if (err != 0) {
      
#line 271 
      mlx5e_del_eth_addr_from_flow_table(priv,ai);
      
#line 272 
      __retres = err;
      
#line 272 
      goto return_label;
    }
    else ;
    
#line 274 
    ai->tt_vec |= 64U;
  }
  else ;
  
#line 277 
  match_criteria_enable = (unsigned char)1U;
  {
    
#line 278 
    bool __cond_3 = (_Bool)0;
    
#line 278 
    if ((int)__cond_3 != 0) 
#line 278 
                            __compiletime_assert_279(); else ;
  }
  
#line 278 
  if (0 != 0) {
    unsigned int tmp_42;
    unsigned int tmp_44;
    
#line 278 
    if (0 != 0) 
#line 278 
                tmp_42 = ((((((*((__be32 *)match_criteria + 1U) << 24) | ((*((__be32 *)match_criteria + 1U) << 8) & 16711680U)) | ((*((__be32 *)match_criteria + 1U) >> 8) & 65280U)) | (*((__be32 *)match_criteria + 1U) >> 24)) >> 8) & 65280U) | 4294901760U;
    else {
      __u32 tmp_41;
      
#line 278 
      tmp_41 = __fswab32(*((__be32 *)match_criteria + 1U));
      
#line 278 
      tmp_42 = ((tmp_41 >> 8) & 65280U) | 4294901760U;
    }
    
#line 278 
    if (0 != 0) 
#line 278 
                tmp_44 = ((((*((__be32 *)match_criteria + 1U) << 24) | ((*((__be32 *)match_criteria + 1U) << 8) & 16711680U)) | ((*((__be32 *)match_criteria + 1U) >> 8) & 65280U)) | (*((__be32 *)match_criteria + 1U) >> 24)) >> 24;
    else {
      __u32 tmp_43;
      
#line 278 
      tmp_43 = __fswab32(*((__be32 *)match_criteria + 1U));
      
#line 278 
      tmp_44 = tmp_43 >> 24;
    }
    
#line 278 
    *((__be32 *)match_criteria + 1U) = tmp_42 | tmp_44;
  }
  else {
    __u32 tmp_47;
    unsigned int tmp_46;
    
#line 278 
    if (0 != 0) 
#line 278 
                tmp_46 = ((((*((__be32 *)match_criteria + 1U) << 24) | ((*((__be32 *)match_criteria + 1U) << 8) & 16711680U)) | ((*((__be32 *)match_criteria + 1U) >> 8) & 65280U)) | (*((__be32 *)match_criteria + 1U) >> 24)) | 65535U;
    else {
      __u32 tmp_45;
      
#line 278 
      tmp_45 = __fswab32(*((__be32 *)match_criteria + 1U));
      
#line 278 
      tmp_46 = tmp_45 | 65535U;
    }
    
#line 278 
    tmp_47 = __fswab32(tmp_46);
    
#line 278 
    *((__be32 *)match_criteria + 1U) = tmp_47;
  }
  
#line 281 
  if ((tt_vec & 16U) != 0U) {
    {
      
#line 282 
      bool __cond_4 = (_Bool)0;
      
#line 282 
      if ((int)__cond_4 != 0) 
#line 282 
                              __compiletime_assert_283(); else ;
    }
    
#line 282 
    if (0 != 0) {
      unsigned int tmp_51;
      unsigned int tmp_53;
      
#line 282 
      if (0 != 0) 
#line 282 
                  tmp_51 = ((((((*((__be32 *)match_value + 1U) << 24) | ((*((__be32 *)match_value + 1U) << 8) & 16711680U)) | ((*((__be32 *)match_value + 1U) >> 8) & 65280U)) | (*((__be32 *)match_value + 1U) >> 24)) >> 8) & 65280U) | 524288U;
      else {
        __u32 tmp_50;
        
#line 282 
        tmp_50 = __fswab32(*((__be32 *)match_value + 1U));
        
#line 282 
        tmp_51 = ((tmp_50 >> 8) & 65280U) | 524288U;
      }
      
#line 282 
      if (0 != 0) 
#line 282 
                  tmp_53 = ((((*((__be32 *)match_value + 1U) << 24) | ((*((__be32 *)match_value + 1U) << 8) & 16711680U)) | ((*((__be32 *)match_value + 1U) >> 8) & 65280U)) | (*((__be32 *)match_value + 1U) >> 24)) >> 24;
      else {
        __u32 tmp_52;
        
#line 282 
        tmp_52 = __fswab32(*((__be32 *)match_value + 1U));
        
#line 282 
        tmp_53 = tmp_52 >> 24;
      }
      
#line 282 
      *((__be32 *)match_value + 1U) = tmp_51 | tmp_53;
    }
    else {
      __u32 tmp_56;
      unsigned int tmp_55;
      
#line 282 
      if (0 != 0) 
#line 282 
                  tmp_55 = (((((*((__be32 *)match_value + 1U) << 24) | ((*((__be32 *)match_value + 1U) << 8) & 16711680U)) | ((*((__be32 *)match_value + 1U) >> 8) & 65280U)) | (*((__be32 *)match_value + 1U) >> 24)) & 4294901760U) | 2048U;
      else {
        __u32 tmp_54;
        
#line 282 
        tmp_54 = __fswab32(*((__be32 *)match_value + 1U));
        
#line 282 
        tmp_55 = (tmp_54 & 4294901760U) | 2048U;
      }
      
#line 282 
      tmp_56 = __fswab32(tmp_55);
      
#line 282 
      *((__be32 *)match_value + 1U) = tmp_56;
    }
    {
      
#line 284 
      bool __cond_5 = (_Bool)0;
      
#line 284 
      if ((int)__cond_5 != 0) 
#line 284 
                              __compiletime_assert_285(); else ;
    }
    
#line 284 
    if (0 != 0) {
      unsigned int tmp_60;
      unsigned int tmp_62;
      unsigned int tmp_64;
      unsigned int tmp_66;
      
#line 284 
      if (0 != 0) 
#line 284 
                  tmp_60 = ((((*((__be32 *)dest) << 24) | ((*((__be32 *)dest) << 8) & 16711680U)) | ((*((__be32 *)dest) >> 8) & 65280U)) | (*((__be32 *)dest) >> 24)) & 4278190080U;
      else {
        __u32 tmp_59;
        
#line 284 
        tmp_59 = __fswab32(*((__be32 *)dest));
        
#line 284 
        tmp_60 = tmp_59 & 4278190080U;
      }
      
#line 284 
      if (0 != 0) 
#line 284 
                  tmp_62 = ((((*((__be32 *)dest) << 24) | ((*((__be32 *)dest) << 8) & 16711680U)) | ((*((__be32 *)dest) >> 8) & 65280U)) | (*((__be32 *)dest) >> 24)) & 4278190080U;
      else {
        __u32 tmp_61;
        
#line 284 
        tmp_61 = __fswab32(*((__be32 *)dest));
        
#line 284 
        tmp_62 = tmp_61 & 4278190080U;
      }
      
#line 284 
      if (0 != 0) 
#line 284 
                  tmp_64 = ((((*((__be32 *)dest) << 24) | ((*((__be32 *)dest) << 8) & 16711680U)) | ((*((__be32 *)dest) >> 8) & 65280U)) | (*((__be32 *)dest) >> 24)) & 4278190080U;
      else {
        __u32 tmp_63;
        
#line 284 
        tmp_63 = __fswab32(*((__be32 *)dest));
        
#line 284 
        tmp_64 = tmp_63 & 4278190080U;
      }
      
#line 284 
      if (0 != 0) 
#line 284 
                  tmp_66 = ((((*((__be32 *)dest) << 24) | ((*((__be32 *)dest) << 8) & 16711680U)) | ((*((__be32 *)dest) >> 8) & 65280U)) | (*((__be32 *)dest) >> 24)) & 4278190080U;
      else {
        __u32 tmp_65;
        
#line 284 
        tmp_65 = __fswab32(*((__be32 *)dest));
        
#line 284 
        tmp_66 = tmp_65 & 4278190080U;
      }
      
#line 284 
      *((__be32 *)dest) = ((((tmp_60 | (*(tirn + 4U) & 16777215U)) << 24) | (((tmp_62 | (*(tirn + 4U) & 16777215U)) << 8) & 16711680U)) | (((tmp_64 | (*(tirn + 4U) & 16777215U)) >> 8) & 65280U)) | ((tmp_66 | (*(tirn + 4U) & 16777215U)) >> 24);
    }
    else {
      __u32 tmp_69;
      unsigned int tmp_68;
      
#line 284 
      if (0 != 0) 
#line 284 
                  tmp_68 = ((((*((__be32 *)dest) << 24) | ((*((__be32 *)dest) << 8) & 16711680U)) | ((*((__be32 *)dest) >> 8) & 65280U)) | (*((__be32 *)dest) >> 24)) & 4278190080U;
      else {
        __u32 tmp_67;
        
#line 284 
        tmp_67 = __fswab32(*((__be32 *)dest));
        
#line 284 
        tmp_68 = tmp_67 & 4278190080U;
      }
      
#line 284 
      ;
      
#line 284 
      tmp_69 = __fswab32(tmp_68 | (*(tirn + 4U) & 16777215U));
      
#line 284 
      *((__be32 *)dest) = tmp_69;
    }
    
#line 286 
    err = mlx5_add_flow_table_entry(ft,(unsigned char)((int)match_criteria_enable),match_criteria,flow_context,& ai->ft_ix[4]);
    
#line 289 
    if (err != 0) {
      
#line 290 
      mlx5e_del_eth_addr_from_flow_table(priv,ai);
      
#line 291 
      __retres = err;
      
#line 291 
      goto return_label;
    }
    else ;
    
#line 293 
    ai->tt_vec |= 16U;
  }
  else ;
  
#line 296 
  if ((tt_vec & 32U) != 0U) {
    {
      
#line 297 
      bool __cond_6 = (_Bool)0;
      
#line 297 
      if ((int)__cond_6 != 0) 
#line 297 
                              __compiletime_assert_298(); else ;
    }
    
#line 297 
    if (0 != 0) {
      unsigned int tmp_73;
      unsigned int tmp_75;
      
#line 297 
      if (0 != 0) 
#line 297 
                  tmp_73 = ((((((*((__be32 *)match_value + 1U) << 24) | ((*((__be32 *)match_value + 1U) << 8) & 16711680U)) | ((*((__be32 *)match_value + 1U) >> 8) & 65280U)) | (*((__be32 *)match_value + 1U) >> 24)) >> 8) & 65280U) | 3716546560U;
      else {
        __u32 tmp_72;
        
#line 297 
        tmp_72 = __fswab32(*((__be32 *)match_value + 1U));
        
#line 297 
        tmp_73 = ((tmp_72 >> 8) & 65280U) | 3716546560U;
      }
      
#line 297 
      if (0 != 0) 
#line 297 
                  tmp_75 = ((((*((__be32 *)match_value + 1U) << 24) | ((*((__be32 *)match_value + 1U) << 8) & 16711680U)) | ((*((__be32 *)match_value + 1U) >> 8) & 65280U)) | (*((__be32 *)match_value + 1U) >> 24)) >> 24;
      else {
        __u32 tmp_74;
        
#line 297 
        tmp_74 = __fswab32(*((__be32 *)match_value + 1U));
        
#line 297 
        tmp_75 = tmp_74 >> 24;
      }
      
#line 297 
      *((__be32 *)match_value + 1U) = tmp_73 | tmp_75;
    }
    else {
      __u32 tmp_78;
      unsigned int tmp_77;
      
#line 297 
      if (0 != 0) 
#line 297 
                  tmp_77 = (((((*((__be32 *)match_value + 1U) << 24) | ((*((__be32 *)match_value + 1U) << 8) & 16711680U)) | ((*((__be32 *)match_value + 1U) >> 8) & 65280U)) | (*((__be32 *)match_value + 1U) >> 24)) & 4294901760U) | 34525U;
      else {
        __u32 tmp_76;
        
#line 297 
        tmp_76 = __fswab32(*((__be32 *)match_value + 1U));
        
#line 297 
        tmp_77 = (tmp_76 & 4294901760U) | 34525U;
      }
      
#line 297 
      tmp_78 = __fswab32(tmp_77);
      
#line 297 
      *((__be32 *)match_value + 1U) = tmp_78;
    }
    {
      
#line 299 
      bool __cond_7 = (_Bool)0;
      
#line 299 
      if ((int)__cond_7 != 0) 
#line 299 
                              __compiletime_assert_300(); else ;
    }
    
#line 299 
    if (0 != 0) {
      unsigned int tmp_82;
      unsigned int tmp_84;
      unsigned int tmp_86;
      unsigned int tmp_88;
      
#line 299 
      if (0 != 0) 
#line 299 
                  tmp_82 = ((((*((__be32 *)dest) << 24) | ((*((__be32 *)dest) << 8) & 16711680U)) | ((*((__be32 *)dest) >> 8) & 65280U)) | (*((__be32 *)dest) >> 24)) & 4278190080U;
      else {
        __u32 tmp_81;
        
#line 299 
        tmp_81 = __fswab32(*((__be32 *)dest));
        
#line 299 
        tmp_82 = tmp_81 & 4278190080U;
      }
      
#line 299 
      if (0 != 0) 
#line 299 
                  tmp_84 = ((((*((__be32 *)dest) << 24) | ((*((__be32 *)dest) << 8) & 16711680U)) | ((*((__be32 *)dest) >> 8) & 65280U)) | (*((__be32 *)dest) >> 24)) & 4278190080U;
      else {
        __u32 tmp_83;
        
#line 299 
        tmp_83 = __fswab32(*((__be32 *)dest));
        
#line 299 
        tmp_84 = tmp_83 & 4278190080U;
      }
      
#line 299 
      if (0 != 0) 
#line 299 
                  tmp_86 = ((((*((__be32 *)dest) << 24) | ((*((__be32 *)dest) << 8) & 16711680U)) | ((*((__be32 *)dest) >> 8) & 65280U)) | (*((__be32 *)dest) >> 24)) & 4278190080U;
      else {
        __u32 tmp_85;
        
#line 299 
        tmp_85 = __fswab32(*((__be32 *)dest));
        
#line 299 
        tmp_86 = tmp_85 & 4278190080U;
      }
      
#line 299 
      if (0 != 0) 
#line 299 
                  tmp_88 = ((((*((__be32 *)dest) << 24) | ((*((__be32 *)dest) << 8) & 16711680U)) | ((*((__be32 *)dest) >> 8) & 65280U)) | (*((__be32 *)dest) >> 24)) & 4278190080U;
      else {
        __u32 tmp_87;
        
#line 299 
        tmp_87 = __fswab32(*((__be32 *)dest));
        
#line 299 
        tmp_88 = tmp_87 & 4278190080U;
      }
      
#line 299 
      *((__be32 *)dest) = ((((tmp_82 | (*(tirn + 5U) & 16777215U)) << 24) | (((tmp_84 | (*(tirn + 5U) & 16777215U)) << 8) & 16711680U)) | (((tmp_86 | (*(tirn + 5U) & 16777215U)) >> 8) & 65280U)) | ((tmp_88 | (*(tirn + 5U) & 16777215U)) >> 24);
    }
    else {
      __u32 tmp_91;
      unsigned int tmp_90;
      
#line 299 
      if (0 != 0) 
#line 299 
                  tmp_90 = ((((*((__be32 *)dest) << 24) | ((*((__be32 *)dest) << 8) & 16711680U)) | ((*((__be32 *)dest) >> 8) & 65280U)) | (*((__be32 *)dest) >> 24)) & 4278190080U;
      else {
        __u32 tmp_89;
        
#line 299 
        tmp_89 = __fswab32(*((__be32 *)dest));
        
#line 299 
        tmp_90 = tmp_89 & 4278190080U;
      }
      
#line 299 
      ;
      
#line 299 
      tmp_91 = __fswab32(tmp_90 | (*(tirn + 5U) & 16777215U));
      
#line 299 
      *((__be32 *)dest) = tmp_91;
    }
    
#line 301 
    err = mlx5_add_flow_table_entry(ft,(unsigned char)((int)match_criteria_enable),match_criteria,flow_context,& ai->ft_ix[5]);
    
#line 304 
    if (err != 0) {
      
#line 305 
      mlx5e_del_eth_addr_from_flow_table(priv,ai);
      
#line 306 
      __retres = err;
      
#line 306 
      goto return_label;
    }
    else ;
    
#line 308 
    ai->tt_vec |= 32U;
  }
  else ;
  {
    
#line 311 
    bool __cond_8 = (_Bool)0;
    
#line 311 
    if ((int)__cond_8 != 0) 
#line 311 
                            __compiletime_assert_312(); else ;
  }
  
#line 311 
  if (0 != 0) {
    unsigned int tmp_95;
    unsigned int tmp_97;
    unsigned int tmp_99;
    
#line 311 
    if (0 != 0) 
#line 311 
                tmp_95 = ((((*((__be32 *)match_criteria + 4U) << 24) | ((*((__be32 *)match_criteria + 4U) << 8) & 16711680U)) | ((*((__be32 *)match_criteria + 4U) >> 8) & 65280U)) | (*((__be32 *)match_criteria + 4U) >> 24)) << 24;
    else {
      __u32 tmp_94;
      
#line 311 
      tmp_94 = __fswab32(*((__be32 *)match_criteria + 4U));
      
#line 311 
      tmp_95 = tmp_94 << 24;
    }
    
#line 311 
    if (0 != 0) 
#line 311 
                tmp_97 = (((((*((__be32 *)match_criteria + 4U) << 24) | ((*((__be32 *)match_criteria + 4U) << 8) & 16711680U)) | ((*((__be32 *)match_criteria + 4U) >> 8) & 65280U)) | (*((__be32 *)match_criteria + 4U) >> 24)) << 8) & 16711680U;
    else {
      __u32 tmp_96;
      
#line 311 
      tmp_96 = __fswab32(*((__be32 *)match_criteria + 4U));
      
#line 311 
      tmp_97 = (tmp_96 << 8) & 16711680U;
    }
    
#line 311 
    if (0 != 0) 
#line 311 
                tmp_99 = (((((*((__be32 *)match_criteria + 4U) << 24) | ((*((__be32 *)match_criteria + 4U) << 8) & 16711680U)) | ((*((__be32 *)match_criteria + 4U) >> 8) & 65280U)) | (*((__be32 *)match_criteria + 4U) >> 24)) >> 8) & 65280U;
    else {
      __u32 tmp_98;
      
#line 311 
      tmp_98 = __fswab32(*((__be32 *)match_criteria + 4U));
      
#line 311 
      tmp_99 = (tmp_98 >> 8) & 65280U;
    }
    
#line 311 
    *((__be32 *)match_criteria + 4U) = ((tmp_95 | tmp_97) | tmp_99) | 255U;
  }
  else {
    __u32 tmp_102;
    unsigned int tmp_101;
    
#line 311 
    if (0 != 0) 
#line 311 
                tmp_101 = ((((*((__be32 *)match_criteria + 4U) << 24) | ((*((__be32 *)match_criteria + 4U) << 8) & 16711680U)) | ((*((__be32 *)match_criteria + 4U) >> 8) & 65280U)) | (*((__be32 *)match_criteria + 4U) >> 24)) | 4278190080U;
    else {
      __u32 tmp_100;
      
#line 311 
      tmp_100 = __fswab32(*((__be32 *)match_criteria + 4U));
      
#line 311 
      tmp_101 = tmp_100 | 4278190080U;
    }
    
#line 311 
    tmp_102 = __fswab32(tmp_101);
    
#line 311 
    *((__be32 *)match_criteria + 4U) = tmp_102;
  }
  {
    
#line 313 
    bool __cond_9 = (_Bool)0;
    
#line 313 
    if ((int)__cond_9 != 0) 
#line 313 
                            __compiletime_assert_314(); else ;
  }
  
#line 313 
  if (0 != 0) {
    unsigned int tmp_106;
    unsigned int tmp_108;
    unsigned int tmp_110;
    
#line 313 
    if (0 != 0) 
#line 313 
                tmp_106 = ((((*((__be32 *)match_value + 4U) << 24) | ((*((__be32 *)match_value + 4U) << 8) & 16711680U)) | ((*((__be32 *)match_value + 4U) >> 8) & 65280U)) | (*((__be32 *)match_value + 4U) >> 24)) << 24;
    else {
      __u32 tmp_105;
      
#line 313 
      tmp_105 = __fswab32(*((__be32 *)match_value + 4U));
      
#line 313 
      tmp_106 = tmp_105 << 24;
    }
    
#line 313 
    if (0 != 0) 
#line 313 
                tmp_108 = (((((*((__be32 *)match_value + 4U) << 24) | ((*((__be32 *)match_value + 4U) << 8) & 16711680U)) | ((*((__be32 *)match_value + 4U) >> 8) & 65280U)) | (*((__be32 *)match_value + 4U) >> 24)) << 8) & 16711680U;
    else {
      __u32 tmp_107;
      
#line 313 
      tmp_107 = __fswab32(*((__be32 *)match_value + 4U));
      
#line 313 
      tmp_108 = (tmp_107 << 8) & 16711680U;
    }
    
#line 313 
    if (0 != 0) 
#line 313 
                tmp_110 = (((((*((__be32 *)match_value + 4U) << 24) | ((*((__be32 *)match_value + 4U) << 8) & 16711680U)) | ((*((__be32 *)match_value + 4U) >> 8) & 65280U)) | (*((__be32 *)match_value + 4U) >> 24)) >> 8) & 65280U;
    else {
      __u32 tmp_109;
      
#line 313 
      tmp_109 = __fswab32(*((__be32 *)match_value + 4U));
      
#line 313 
      tmp_110 = (tmp_109 >> 8) & 65280U;
    }
    
#line 313 
    *((__be32 *)match_value + 4U) = ((tmp_106 | tmp_108) | tmp_110) | 17U;
  }
  else {
    __u32 tmp_113;
    unsigned int tmp_112;
    
#line 313 
    if (0 != 0) 
#line 313 
                tmp_112 = (((((*((__be32 *)match_value + 4U) << 24) | ((*((__be32 *)match_value + 4U) << 8) & 16711680U)) | ((*((__be32 *)match_value + 4U) >> 8) & 65280U)) | (*((__be32 *)match_value + 4U) >> 24)) & 16777215U) | 285212672U;
    else {
      __u32 tmp_111;
      
#line 313 
      tmp_111 = __fswab32(*((__be32 *)match_value + 4U));
      
#line 313 
      tmp_112 = (tmp_111 & 16777215U) | 285212672U;
    }
    
#line 313 
    tmp_113 = __fswab32(tmp_112);
    
#line 313 
    *((__be32 *)match_value + 4U) = tmp_113;
  }
  
#line 316 
  if ((tt_vec & 4U) != 0U) {
    {
      
#line 317 
      bool __cond_10 = (_Bool)0;
      
#line 317 
      if ((int)__cond_10 != 0) 
#line 317 
                               __compiletime_assert_318(); else ;
    }
    
#line 317 
    if (0 != 0) {
      unsigned int tmp_117;
      unsigned int tmp_119;
      
#line 317 
      if (0 != 0) 
#line 317 
                  tmp_117 = ((((((*((__be32 *)match_value + 1U) << 24) | ((*((__be32 *)match_value + 1U) << 8) & 16711680U)) | ((*((__be32 *)match_value + 1U) >> 8) & 65280U)) | (*((__be32 *)match_value + 1U) >> 24)) >> 8) & 65280U) | 524288U;
      else {
        __u32 tmp_116;
        
#line 317 
        tmp_116 = __fswab32(*((__be32 *)match_value + 1U));
        
#line 317 
        tmp_117 = ((tmp_116 >> 8) & 65280U) | 524288U;
      }
      
#line 317 
      if (0 != 0) 
#line 317 
                  tmp_119 = ((((*((__be32 *)match_value + 1U) << 24) | ((*((__be32 *)match_value + 1U) << 8) & 16711680U)) | ((*((__be32 *)match_value + 1U) >> 8) & 65280U)) | (*((__be32 *)match_value + 1U) >> 24)) >> 24;
      else {
        __u32 tmp_118;
        
#line 317 
        tmp_118 = __fswab32(*((__be32 *)match_value + 1U));
        
#line 317 
        tmp_119 = tmp_118 >> 24;
      }
      
#line 317 
      *((__be32 *)match_value + 1U) = tmp_117 | tmp_119;
    }
    else {
      __u32 tmp_122;
      unsigned int tmp_121;
      
#line 317 
      if (0 != 0) 
#line 317 
                  tmp_121 = (((((*((__be32 *)match_value + 1U) << 24) | ((*((__be32 *)match_value + 1U) << 8) & 16711680U)) | ((*((__be32 *)match_value + 1U) >> 8) & 65280U)) | (*((__be32 *)match_value + 1U) >> 24)) & 4294901760U) | 2048U;
      else {
        __u32 tmp_120;
        
#line 317 
        tmp_120 = __fswab32(*((__be32 *)match_value + 1U));
        
#line 317 
        tmp_121 = (tmp_120 & 4294901760U) | 2048U;
      }
      
#line 317 
      tmp_122 = __fswab32(tmp_121);
      
#line 317 
      *((__be32 *)match_value + 1U) = tmp_122;
    }
    {
      
#line 319 
      bool __cond_11 = (_Bool)0;
      
#line 319 
      if ((int)__cond_11 != 0) 
#line 319 
                               __compiletime_assert_320(); else ;
    }
    
#line 319 
    if (0 != 0) {
      unsigned int tmp_126;
      unsigned int tmp_128;
      unsigned int tmp_130;
      unsigned int tmp_132;
      
#line 319 
      if (0 != 0) 
#line 319 
                  tmp_126 = ((((*((__be32 *)dest) << 24) | ((*((__be32 *)dest) << 8) & 16711680U)) | ((*((__be32 *)dest) >> 8) & 65280U)) | (*((__be32 *)dest) >> 24)) & 4278190080U;
      else {
        __u32 tmp_125;
        
#line 319 
        tmp_125 = __fswab32(*((__be32 *)dest));
        
#line 319 
        tmp_126 = tmp_125 & 4278190080U;
      }
      
#line 319 
      if (0 != 0) 
#line 319 
                  tmp_128 = ((((*((__be32 *)dest) << 24) | ((*((__be32 *)dest) << 8) & 16711680U)) | ((*((__be32 *)dest) >> 8) & 65280U)) | (*((__be32 *)dest) >> 24)) & 4278190080U;
      else {
        __u32 tmp_127;
        
#line 319 
        tmp_127 = __fswab32(*((__be32 *)dest));
        
#line 319 
        tmp_128 = tmp_127 & 4278190080U;
      }
      
#line 319 
      if (0 != 0) 
#line 319 
                  tmp_130 = ((((*((__be32 *)dest) << 24) | ((*((__be32 *)dest) << 8) & 16711680U)) | ((*((__be32 *)dest) >> 8) & 65280U)) | (*((__be32 *)dest) >> 24)) & 4278190080U;
      else {
        __u32 tmp_129;
        
#line 319 
        tmp_129 = __fswab32(*((__be32 *)dest));
        
#line 319 
        tmp_130 = tmp_129 & 4278190080U;
      }
      
#line 319 
      if (0 != 0) 
#line 319 
                  tmp_132 = ((((*((__be32 *)dest) << 24) | ((*((__be32 *)dest) << 8) & 16711680U)) | ((*((__be32 *)dest) >> 8) & 65280U)) | (*((__be32 *)dest) >> 24)) & 4278190080U;
      else {
        __u32 tmp_131;
        
#line 319 
        tmp_131 = __fswab32(*((__be32 *)dest));
        
#line 319 
        tmp_132 = tmp_131 & 4278190080U;
      }
      
#line 319 
      *((__be32 *)dest) = ((((tmp_126 | (*(tirn + 2U) & 16777215U)) << 24) | (((tmp_128 | (*(tirn + 2U) & 16777215U)) << 8) & 16711680U)) | (((tmp_130 | (*(tirn + 2U) & 16777215U)) >> 8) & 65280U)) | ((tmp_132 | (*(tirn + 2U) & 16777215U)) >> 24);
    }
    else {
      __u32 tmp_135;
      unsigned int tmp_134;
      
#line 319 
      if (0 != 0) 
#line 319 
                  tmp_134 = ((((*((__be32 *)dest) << 24) | ((*((__be32 *)dest) << 8) & 16711680U)) | ((*((__be32 *)dest) >> 8) & 65280U)) | (*((__be32 *)dest) >> 24)) & 4278190080U;
      else {
        __u32 tmp_133;
        
#line 319 
        tmp_133 = __fswab32(*((__be32 *)dest));
        
#line 319 
        tmp_134 = tmp_133 & 4278190080U;
      }
      
#line 319 
      ;
      
#line 319 
      tmp_135 = __fswab32(tmp_134 | (*(tirn + 2U) & 16777215U));
      
#line 319 
      *((__be32 *)dest) = tmp_135;
    }
    
#line 321 
    err = mlx5_add_flow_table_entry(ft,(unsigned char)((int)match_criteria_enable),match_criteria,flow_context,& ai->ft_ix[2]);
    
#line 324 
    if (err != 0) {
      
#line 325 
      mlx5e_del_eth_addr_from_flow_table(priv,ai);
      
#line 326 
      __retres = err;
      
#line 326 
      goto return_label;
    }
    else ;
    
#line 328 
    ai->tt_vec |= 4U;
  }
  else ;
  
#line 331 
  if ((tt_vec & 8U) != 0U) {
    {
      
#line 332 
      bool __cond_12 = (_Bool)0;
      
#line 332 
      if ((int)__cond_12 != 0) 
#line 332 
                               __compiletime_assert_333(); else ;
    }
    
#line 332 
    if (0 != 0) {
      unsigned int tmp_139;
      unsigned int tmp_141;
      
#line 332 
      if (0 != 0) 
#line 332 
                  tmp_139 = ((((((*((__be32 *)match_value + 1U) << 24) | ((*((__be32 *)match_value + 1U) << 8) & 16711680U)) | ((*((__be32 *)match_value + 1U) >> 8) & 65280U)) | (*((__be32 *)match_value + 1U) >> 24)) >> 8) & 65280U) | 3716546560U;
      else {
        __u32 tmp_138;
        
#line 332 
        tmp_138 = __fswab32(*((__be32 *)match_value + 1U));
        
#line 332 
        tmp_139 = ((tmp_138 >> 8) & 65280U) | 3716546560U;
      }
      
#line 332 
      if (0 != 0) 
#line 332 
                  tmp_141 = ((((*((__be32 *)match_value + 1U) << 24) | ((*((__be32 *)match_value + 1U) << 8) & 16711680U)) | ((*((__be32 *)match_value + 1U) >> 8) & 65280U)) | (*((__be32 *)match_value + 1U) >> 24)) >> 24;
      else {
        __u32 tmp_140;
        
#line 332 
        tmp_140 = __fswab32(*((__be32 *)match_value + 1U));
        
#line 332 
        tmp_141 = tmp_140 >> 24;
      }
      
#line 332 
      *((__be32 *)match_value + 1U) = tmp_139 | tmp_141;
    }
    else {
      __u32 tmp_144;
      unsigned int tmp_143;
      
#line 332 
      if (0 != 0) 
#line 332 
                  tmp_143 = (((((*((__be32 *)match_value + 1U) << 24) | ((*((__be32 *)match_value + 1U) << 8) & 16711680U)) | ((*((__be32 *)match_value + 1U) >> 8) & 65280U)) | (*((__be32 *)match_value + 1U) >> 24)) & 4294901760U) | 34525U;
      else {
        __u32 tmp_142;
        
#line 332 
        tmp_142 = __fswab32(*((__be32 *)match_value + 1U));
        
#line 332 
        tmp_143 = (tmp_142 & 4294901760U) | 34525U;
      }
      
#line 332 
      tmp_144 = __fswab32(tmp_143);
      
#line 332 
      *((__be32 *)match_value + 1U) = tmp_144;
    }
    {
      
#line 334 
      bool __cond_13 = (_Bool)0;
      
#line 334 
      if ((int)__cond_13 != 0) 
#line 334 
                               __compiletime_assert_335(); else ;
    }
    
#line 334 
    if (0 != 0) {
      unsigned int tmp_148;
      unsigned int tmp_150;
      unsigned int tmp_152;
      unsigned int tmp_154;
      
#line 334 
      if (0 != 0) 
#line 334 
                  tmp_148 = ((((*((__be32 *)dest) << 24) | ((*((__be32 *)dest) << 8) & 16711680U)) | ((*((__be32 *)dest) >> 8) & 65280U)) | (*((__be32 *)dest) >> 24)) & 4278190080U;
      else {
        __u32 tmp_147;
        
#line 334 
        tmp_147 = __fswab32(*((__be32 *)dest));
        
#line 334 
        tmp_148 = tmp_147 & 4278190080U;
      }
      
#line 334 
      if (0 != 0) 
#line 334 
                  tmp_150 = ((((*((__be32 *)dest) << 24) | ((*((__be32 *)dest) << 8) & 16711680U)) | ((*((__be32 *)dest) >> 8) & 65280U)) | (*((__be32 *)dest) >> 24)) & 4278190080U;
      else {
        __u32 tmp_149;
        
#line 334 
        tmp_149 = __fswab32(*((__be32 *)dest));
        
#line 334 
        tmp_150 = tmp_149 & 4278190080U;
      }
      
#line 334 
      if (0 != 0) 
#line 334 
                  tmp_152 = ((((*((__be32 *)dest) << 24) | ((*((__be32 *)dest) << 8) & 16711680U)) | ((*((__be32 *)dest) >> 8) & 65280U)) | (*((__be32 *)dest) >> 24)) & 4278190080U;
      else {
        __u32 tmp_151;
        
#line 334 
        tmp_151 = __fswab32(*((__be32 *)dest));
        
#line 334 
        tmp_152 = tmp_151 & 4278190080U;
      }
      
#line 334 
      if (0 != 0) 
#line 334 
                  tmp_154 = ((((*((__be32 *)dest) << 24) | ((*((__be32 *)dest) << 8) & 16711680U)) | ((*((__be32 *)dest) >> 8) & 65280U)) | (*((__be32 *)dest) >> 24)) & 4278190080U;
      else {
        __u32 tmp_153;
        
#line 334 
        tmp_153 = __fswab32(*((__be32 *)dest));
        
#line 334 
        tmp_154 = tmp_153 & 4278190080U;
      }
      
#line 334 
      *((__be32 *)dest) = ((((tmp_148 | (*(tirn + 3U) & 16777215U)) << 24) | (((tmp_150 | (*(tirn + 3U) & 16777215U)) << 8) & 16711680U)) | (((tmp_152 | (*(tirn + 3U) & 16777215U)) >> 8) & 65280U)) | ((tmp_154 | (*(tirn + 3U) & 16777215U)) >> 24);
    }
    else {
      __u32 tmp_157;
      unsigned int tmp_156;
      
#line 334 
      if (0 != 0) 
#line 334 
                  tmp_156 = ((((*((__be32 *)dest) << 24) | ((*((__be32 *)dest) << 8) & 16711680U)) | ((*((__be32 *)dest) >> 8) & 65280U)) | (*((__be32 *)dest) >> 24)) & 4278190080U;
      else {
        __u32 tmp_155;
        
#line 334 
        tmp_155 = __fswab32(*((__be32 *)dest));
        
#line 334 
        tmp_156 = tmp_155 & 4278190080U;
      }
      
#line 334 
      ;
      
#line 334 
      tmp_157 = __fswab32(tmp_156 | (*(tirn + 3U) & 16777215U));
      
#line 334 
      *((__be32 *)dest) = tmp_157;
    }
    
#line 336 
    err = mlx5_add_flow_table_entry(ft,(unsigned char)((int)match_criteria_enable),match_criteria,flow_context,& ai->ft_ix[3]);
    
#line 339 
    if (err != 0) {
      
#line 340 
      mlx5e_del_eth_addr_from_flow_table(priv,ai);
      
#line 341 
      __retres = err;
      
#line 341 
      goto return_label;
    }
    else ;
    
#line 343 
    ai->tt_vec |= 8U;
  }
  else ;
  {
    
#line 346 
    bool __cond_14 = (_Bool)0;
    
#line 346 
    if ((int)__cond_14 != 0) 
#line 346 
                             __compiletime_assert_347(); else ;
  }
  
#line 346 
  if (0 != 0) {
    unsigned int tmp_161;
    unsigned int tmp_163;
    unsigned int tmp_165;
    
#line 346 
    if (0 != 0) 
#line 346 
                tmp_161 = ((((*((__be32 *)match_value + 4U) << 24) | ((*((__be32 *)match_value + 4U) << 8) & 16711680U)) | ((*((__be32 *)match_value + 4U) >> 8) & 65280U)) | (*((__be32 *)match_value + 4U) >> 24)) << 24;
    else {
      __u32 tmp_160;
      
#line 346 
      tmp_160 = __fswab32(*((__be32 *)match_value + 4U));
      
#line 346 
      tmp_161 = tmp_160 << 24;
    }
    
#line 346 
    if (0 != 0) 
#line 346 
                tmp_163 = (((((*((__be32 *)match_value + 4U) << 24) | ((*((__be32 *)match_value + 4U) << 8) & 16711680U)) | ((*((__be32 *)match_value + 4U) >> 8) & 65280U)) | (*((__be32 *)match_value + 4U) >> 24)) << 8) & 16711680U;
    else {
      __u32 tmp_162;
      
#line 346 
      tmp_162 = __fswab32(*((__be32 *)match_value + 4U));
      
#line 346 
      tmp_163 = (tmp_162 << 8) & 16711680U;
    }
    
#line 346 
    if (0 != 0) 
#line 346 
                tmp_165 = (((((*((__be32 *)match_value + 4U) << 24) | ((*((__be32 *)match_value + 4U) << 8) & 16711680U)) | ((*((__be32 *)match_value + 4U) >> 8) & 65280U)) | (*((__be32 *)match_value + 4U) >> 24)) >> 8) & 65280U;
    else {
      __u32 tmp_164;
      
#line 346 
      tmp_164 = __fswab32(*((__be32 *)match_value + 4U));
      
#line 346 
      tmp_165 = (tmp_164 >> 8) & 65280U;
    }
    
#line 346 
    *((__be32 *)match_value + 4U) = ((tmp_161 | tmp_163) | tmp_165) | 6U;
  }
  else {
    __u32 tmp_168;
    unsigned int tmp_167;
    
#line 346 
    if (0 != 0) 
#line 346 
                tmp_167 = (((((*((__be32 *)match_value + 4U) << 24) | ((*((__be32 *)match_value + 4U) << 8) & 16711680U)) | ((*((__be32 *)match_value + 4U) >> 8) & 65280U)) | (*((__be32 *)match_value + 4U) >> 24)) & 16777215U) | 100663296U;
    else {
      __u32 tmp_166;
      
#line 346 
      tmp_166 = __fswab32(*((__be32 *)match_value + 4U));
      
#line 346 
      tmp_167 = (tmp_166 & 16777215U) | 100663296U;
    }
    
#line 346 
    tmp_168 = __fswab32(tmp_167);
    
#line 346 
    *((__be32 *)match_value + 4U) = tmp_168;
  }
  
#line 349 
  if ((tt_vec & 1U) != 0U) {
    {
      
#line 350 
      bool __cond_15 = (_Bool)0;
      
#line 350 
      if ((int)__cond_15 != 0) 
#line 350 
                               __compiletime_assert_351(); else ;
    }
    
#line 350 
    if (0 != 0) {
      unsigned int tmp_172;
      unsigned int tmp_174;
      
#line 350 
      if (0 != 0) 
#line 350 
                  tmp_172 = ((((((*((__be32 *)match_value + 1U) << 24) | ((*((__be32 *)match_value + 1U) << 8) & 16711680U)) | ((*((__be32 *)match_value + 1U) >> 8) & 65280U)) | (*((__be32 *)match_value + 1U) >> 24)) >> 8) & 65280U) | 524288U;
      else {
        __u32 tmp_171;
        
#line 350 
        tmp_171 = __fswab32(*((__be32 *)match_value + 1U));
        
#line 350 
        tmp_172 = ((tmp_171 >> 8) & 65280U) | 524288U;
      }
      
#line 350 
      if (0 != 0) 
#line 350 
                  tmp_174 = ((((*((__be32 *)match_value + 1U) << 24) | ((*((__be32 *)match_value + 1U) << 8) & 16711680U)) | ((*((__be32 *)match_value + 1U) >> 8) & 65280U)) | (*((__be32 *)match_value + 1U) >> 24)) >> 24;
      else {
        __u32 tmp_173;
        
#line 350 
        tmp_173 = __fswab32(*((__be32 *)match_value + 1U));
        
#line 350 
        tmp_174 = tmp_173 >> 24;
      }
      
#line 350 
      *((__be32 *)match_value + 1U) = tmp_172 | tmp_174;
    }
    else {
      __u32 tmp_177;
      unsigned int tmp_176;
      
#line 350 
      if (0 != 0) 
#line 350 
                  tmp_176 = (((((*((__be32 *)match_value + 1U) << 24) | ((*((__be32 *)match_value + 1U) << 8) & 16711680U)) | ((*((__be32 *)match_value + 1U) >> 8) & 65280U)) | (*((__be32 *)match_value + 1U) >> 24)) & 4294901760U) | 2048U;
      else {
        __u32 tmp_175;
        
#line 350 
        tmp_175 = __fswab32(*((__be32 *)match_value + 1U));
        
#line 350 
        tmp_176 = (tmp_175 & 4294901760U) | 2048U;
      }
      
#line 350 
      tmp_177 = __fswab32(tmp_176);
      
#line 350 
      *((__be32 *)match_value + 1U) = tmp_177;
    }
    {
      
#line 352 
      bool __cond_16 = (_Bool)0;
      
#line 352 
      if ((int)__cond_16 != 0) 
#line 352 
                               __compiletime_assert_353(); else ;
    }
    
#line 352 
    if (0 != 0) {
      unsigned int tmp_181;
      unsigned int tmp_183;
      unsigned int tmp_185;
      unsigned int tmp_187;
      
#line 352 
      if (0 != 0) 
#line 352 
                  tmp_181 = ((((*((__be32 *)dest) << 24) | ((*((__be32 *)dest) << 8) & 16711680U)) | ((*((__be32 *)dest) >> 8) & 65280U)) | (*((__be32 *)dest) >> 24)) & 4278190080U;
      else {
        __u32 tmp_180;
        
#line 352 
        tmp_180 = __fswab32(*((__be32 *)dest));
        
#line 352 
        tmp_181 = tmp_180 & 4278190080U;
      }
      
#line 352 
      if (0 != 0) 
#line 352 
                  tmp_183 = ((((*((__be32 *)dest) << 24) | ((*((__be32 *)dest) << 8) & 16711680U)) | ((*((__be32 *)dest) >> 8) & 65280U)) | (*((__be32 *)dest) >> 24)) & 4278190080U;
      else {
        __u32 tmp_182;
        
#line 352 
        tmp_182 = __fswab32(*((__be32 *)dest));
        
#line 352 
        tmp_183 = tmp_182 & 4278190080U;
      }
      
#line 352 
      if (0 != 0) 
#line 352 
                  tmp_185 = ((((*((__be32 *)dest) << 24) | ((*((__be32 *)dest) << 8) & 16711680U)) | ((*((__be32 *)dest) >> 8) & 65280U)) | (*((__be32 *)dest) >> 24)) & 4278190080U;
      else {
        __u32 tmp_184;
        
#line 352 
        tmp_184 = __fswab32(*((__be32 *)dest));
        
#line 352 
        tmp_185 = tmp_184 & 4278190080U;
      }
      
#line 352 
      if (0 != 0) 
#line 352 
                  tmp_187 = ((((*((__be32 *)dest) << 24) | ((*((__be32 *)dest) << 8) & 16711680U)) | ((*((__be32 *)dest) >> 8) & 65280U)) | (*((__be32 *)dest) >> 24)) & 4278190080U;
      else {
        __u32 tmp_186;
        
#line 352 
        tmp_186 = __fswab32(*((__be32 *)dest));
        
#line 352 
        tmp_187 = tmp_186 & 4278190080U;
      }
      
#line 352 
      *((__be32 *)dest) = ((((tmp_181 | (*tirn & 16777215U)) << 24) | (((tmp_183 | (*tirn & 16777215U)) << 8) & 16711680U)) | (((tmp_185 | (*tirn & 16777215U)) >> 8) & 65280U)) | ((tmp_187 | (*tirn & 16777215U)) >> 24);
    }
    else {
      __u32 tmp_190;
      unsigned int tmp_189;
      
#line 352 
      if (0 != 0) 
#line 352 
                  tmp_189 = ((((*((__be32 *)dest) << 24) | ((*((__be32 *)dest) << 8) & 16711680U)) | ((*((__be32 *)dest) >> 8) & 65280U)) | (*((__be32 *)dest) >> 24)) & 4278190080U;
      else {
        __u32 tmp_188;
        
#line 352 
        tmp_188 = __fswab32(*((__be32 *)dest));
        
#line 352 
        tmp_189 = tmp_188 & 4278190080U;
      }
      
#line 352 
      ;
      
#line 352 
      tmp_190 = __fswab32(tmp_189 | (*tirn & 16777215U));
      
#line 352 
      *((__be32 *)dest) = tmp_190;
    }
    
#line 354 
    err = mlx5_add_flow_table_entry(ft,(unsigned char)((int)match_criteria_enable),match_criteria,flow_context,& ai->ft_ix[0]);
    
#line 357 
    if (err != 0) {
      
#line 358 
      mlx5e_del_eth_addr_from_flow_table(priv,ai);
      
#line 359 
      __retres = err;
      
#line 359 
      goto return_label;
    }
    else ;
    
#line 361 
    ai->tt_vec |= 1U;
  }
  else ;
  
#line 364 
  if ((tt_vec & 2U) != 0U) {
    {
      
#line 365 
      bool __cond_17 = (_Bool)0;
      
#line 365 
      if ((int)__cond_17 != 0) 
#line 365 
                               __compiletime_assert_366(); else ;
    }
    
#line 365 
    if (0 != 0) {
      unsigned int tmp_194;
      unsigned int tmp_196;
      
#line 365 
      if (0 != 0) 
#line 365 
                  tmp_194 = ((((((*((__be32 *)match_value + 1U) << 24) | ((*((__be32 *)match_value + 1U) << 8) & 16711680U)) | ((*((__be32 *)match_value + 1U) >> 8) & 65280U)) | (*((__be32 *)match_value + 1U) >> 24)) >> 8) & 65280U) | 3716546560U;
      else {
        __u32 tmp_193;
        
#line 365 
        tmp_193 = __fswab32(*((__be32 *)match_value + 1U));
        
#line 365 
        tmp_194 = ((tmp_193 >> 8) & 65280U) | 3716546560U;
      }
      
#line 365 
      if (0 != 0) 
#line 365 
                  tmp_196 = ((((*((__be32 *)match_value + 1U) << 24) | ((*((__be32 *)match_value + 1U) << 8) & 16711680U)) | ((*((__be32 *)match_value + 1U) >> 8) & 65280U)) | (*((__be32 *)match_value + 1U) >> 24)) >> 24;
      else {
        __u32 tmp_195;
        
#line 365 
        tmp_195 = __fswab32(*((__be32 *)match_value + 1U));
        
#line 365 
        tmp_196 = tmp_195 >> 24;
      }
      
#line 365 
      *((__be32 *)match_value + 1U) = tmp_194 | tmp_196;
    }
    else {
      __u32 tmp_199;
      unsigned int tmp_198;
      
#line 365 
      if (0 != 0) 
#line 365 
                  tmp_198 = (((((*((__be32 *)match_value + 1U) << 24) | ((*((__be32 *)match_value + 1U) << 8) & 16711680U)) | ((*((__be32 *)match_value + 1U) >> 8) & 65280U)) | (*((__be32 *)match_value + 1U) >> 24)) & 4294901760U) | 34525U;
      else {
        __u32 tmp_197;
        
#line 365 
        tmp_197 = __fswab32(*((__be32 *)match_value + 1U));
        
#line 365 
        tmp_198 = (tmp_197 & 4294901760U) | 34525U;
      }
      
#line 365 
      tmp_199 = __fswab32(tmp_198);
      
#line 365 
      *((__be32 *)match_value + 1U) = tmp_199;
    }
    {
      
#line 367 
      bool __cond_18 = (_Bool)0;
      
#line 367 
      if ((int)__cond_18 != 0) 
#line 367 
                               __compiletime_assert_368(); else ;
    }
    
#line 367 
    if (0 != 0) {
      unsigned int tmp_203;
      unsigned int tmp_205;
      unsigned int tmp_207;
      unsigned int tmp_209;
      
#line 367 
      if (0 != 0) 
#line 367 
                  tmp_203 = ((((*((__be32 *)dest) << 24) | ((*((__be32 *)dest) << 8) & 16711680U)) | ((*((__be32 *)dest) >> 8) & 65280U)) | (*((__be32 *)dest) >> 24)) & 4278190080U;
      else {
        __u32 tmp_202;
        
#line 367 
        tmp_202 = __fswab32(*((__be32 *)dest));
        
#line 367 
        tmp_203 = tmp_202 & 4278190080U;
      }
      
#line 367 
      if (0 != 0) 
#line 367 
                  tmp_205 = ((((*((__be32 *)dest) << 24) | ((*((__be32 *)dest) << 8) & 16711680U)) | ((*((__be32 *)dest) >> 8) & 65280U)) | (*((__be32 *)dest) >> 24)) & 4278190080U;
      else {
        __u32 tmp_204;
        
#line 367 
        tmp_204 = __fswab32(*((__be32 *)dest));
        
#line 367 
        tmp_205 = tmp_204 & 4278190080U;
      }
      
#line 367 
      if (0 != 0) 
#line 367 
                  tmp_207 = ((((*((__be32 *)dest) << 24) | ((*((__be32 *)dest) << 8) & 16711680U)) | ((*((__be32 *)dest) >> 8) & 65280U)) | (*((__be32 *)dest) >> 24)) & 4278190080U;
      else {
        __u32 tmp_206;
        
#line 367 
        tmp_206 = __fswab32(*((__be32 *)dest));
        
#line 367 
        tmp_207 = tmp_206 & 4278190080U;
      }
      
#line 367 
      if (0 != 0) 
#line 367 
                  tmp_209 = ((((*((__be32 *)dest) << 24) | ((*((__be32 *)dest) << 8) & 16711680U)) | ((*((__be32 *)dest) >> 8) & 65280U)) | (*((__be32 *)dest) >> 24)) & 4278190080U;
      else {
        __u32 tmp_208;
        
#line 367 
        tmp_208 = __fswab32(*((__be32 *)dest));
        
#line 367 
        tmp_209 = tmp_208 & 4278190080U;
      }
      
#line 367 
      *((__be32 *)dest) = ((((tmp_203 | (*(tirn + 1U) & 16777215U)) << 24) | (((tmp_205 | (*(tirn + 1U) & 16777215U)) << 8) & 16711680U)) | (((tmp_207 | (*(tirn + 1U) & 16777215U)) >> 8) & 65280U)) | ((tmp_209 | (*(tirn + 1U) & 16777215U)) >> 24);
    }
    else {
      __u32 tmp_212;
      unsigned int tmp_211;
      
#line 367 
      if (0 != 0) 
#line 367 
                  tmp_211 = ((((*((__be32 *)dest) << 24) | ((*((__be32 *)dest) << 8) & 16711680U)) | ((*((__be32 *)dest) >> 8) & 65280U)) | (*((__be32 *)dest) >> 24)) & 4278190080U;
      else {
        __u32 tmp_210;
        
#line 367 
        tmp_210 = __fswab32(*((__be32 *)dest));
        
#line 367 
        tmp_211 = tmp_210 & 4278190080U;
      }
      
#line 367 
      ;
      
#line 367 
      tmp_212 = __fswab32(tmp_211 | (*(tirn + 1U) & 16777215U));
      
#line 367 
      *((__be32 *)dest) = tmp_212;
    }
    
#line 369 
    err = mlx5_add_flow_table_entry(ft,(unsigned char)((int)match_criteria_enable),match_criteria,flow_context,& ai->ft_ix[1]);
    
#line 372 
    if (err != 0) {
      
#line 373 
      mlx5e_del_eth_addr_from_flow_table(priv,ai);
      
#line 374 
      __retres = err;
      
#line 374 
      goto return_label;
    }
    else ;
    
#line 376 
    ai->tt_vec |= 2U;
  }
  else ;
  
#line 379 
  __retres = 0;
  return_label: 
#line 379 
                return __retres;
}


#line 382  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_flow_table.c"
static int mlx5e_add_eth_addr_rule(struct mlx5e_priv *priv, struct mlx5e_eth_addr_info *ai, int type)
{
  u32 *flow_context;
  u32 *match_criteria;
  int err;
  
#line 389 
  flow_context = (u32 *)mlx5_vzalloc_1(776UL);
  
#line 391 
  match_criteria = (u32 *)mlx5_vzalloc_1(512UL);
  
#line 392 
  if (flow_context == (u32 *)0U || match_criteria == (u32 *)0U) {
    
#line 393 
    netdev_err((struct net_device const *)priv->netdev,"%s: alloc failed\n","mlx5e_add_eth_addr_rule");
    
#line 394 
    err = -12;
    
#line 395 
    goto add_eth_addr_rule_out;
  }
  else ;
  
#line 398 
  err = __mlx5e_add_eth_addr_rule(priv,ai,type,(void *)flow_context,(void *)match_criteria);
  
#line 400 
  if (err != 0) 
#line 401 
                netdev_err((struct net_device const *)priv->netdev,"%s: failed\n","mlx5e_add_eth_addr_rule"); else ;
  add_eth_addr_rule_out: 
#line 403 
  ;
  
#line 404 
  kvfree((void const *)match_criteria);
  
#line 405 
  kvfree((void const *)flow_context);
  
#line 406 
  return err;
}


#line 437 
void __compiletime_assert_438(void);


#line 439 
void __compiletime_assert_439(void);


#line 440 
void __compiletime_assert_441(void);


#line 442 
void __compiletime_assert_443(void);


#line 446 
void __compiletime_assert_447(void);


#line 455 
void __compiletime_assert_456(void);


#line 460 
void __compiletime_assert_461(void);


#line 462 
void __compiletime_assert_463(void);


#line 464 
void __compiletime_assert_465(void);


#line 415  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_flow_table.c"
static int mlx5e_add_vlan_rule(struct mlx5e_priv *priv, enum mlx5e_vlan_rule_type rule_type, u16 vid)
{
  u32 *flow_context;
  void *match_value;
  void *dest;
  u32 *match_criteria;
  u32 *ft_ix;
  int err;
  __u32 tmp_31;
  unsigned int tmp_29;
  u32 tmp_30;
  
#line 418 
  u8 match_criteria_enable = (unsigned char)0U;
  
#line 426 
  flow_context = (u32 *)mlx5_vzalloc_1(776UL);
  
#line 428 
  match_criteria = (u32 *)mlx5_vzalloc_1(512UL);
  
#line 429 
  if (flow_context == (u32 *)0U || match_criteria == (u32 *)0U) {
    
#line 430 
    netdev_err((struct net_device const *)priv->netdev,"%s: alloc failed\n","mlx5e_add_vlan_rule");
    
#line 431 
    err = -12;
    
#line 432 
    goto add_vlan_rule_out;
  }
  else ;
  
#line 434 
  match_value = (void *)flow_context + 64U;
  
#line 435 
  dest = (void *)flow_context + 768U;
  {
    
#line 437 
    bool __cond = (_Bool)0;
    
#line 437 
    if ((int)__cond != 0) 
#line 437 
                          __compiletime_assert_438(); else ;
  }
  
#line 437 
  if (0 != 0) {
    unsigned int tmp_4;
    unsigned int tmp_6;
    
#line 437 
    if (0 != 0) 
#line 437 
                tmp_4 = ((((((*(flow_context + 3U) << 24) | ((*(flow_context + 3U) << 8) & 16711680U)) | ((*(flow_context + 3U) >> 8) & 65280U)) | (*(flow_context + 3U) >> 24)) >> 8) & 65280U) | 67108864U;
    else {
      __u32 tmp_3;
      
#line 437 
      tmp_3 = __fswab32(*(flow_context + 3U));
      
#line 437 
      tmp_4 = ((tmp_3 >> 8) & 65280U) | 67108864U;
    }
    
#line 437 
    if (0 != 0) 
#line 437 
                tmp_6 = ((((*(flow_context + 3U) << 24) | ((*(flow_context + 3U) << 8) & 16711680U)) | ((*(flow_context + 3U) >> 8) & 65280U)) | (*(flow_context + 3U) >> 24)) >> 24;
    else {
      __u32 tmp_5;
      
#line 437 
      tmp_5 = __fswab32(*(flow_context + 3U));
      
#line 437 
      tmp_6 = tmp_5 >> 24;
    }
    
#line 437 
    *(flow_context + 3U) = tmp_4 | tmp_6;
  }
  else {
    __u32 tmp_9;
    unsigned int tmp_8;
    
#line 437 
    if (0 != 0) 
#line 437 
                tmp_8 = (((((*(flow_context + 3U) << 24) | ((*(flow_context + 3U) << 8) & 16711680U)) | ((*(flow_context + 3U) >> 8) & 65280U)) | (*(flow_context + 3U) >> 24)) & 4294901760U) | 4U;
    else {
      __u32 tmp_7;
      
#line 437 
      tmp_7 = __fswab32(*(flow_context + 3U));
      
#line 437 
      tmp_8 = (tmp_7 & 4294901760U) | 4U;
    }
    
#line 437 
    tmp_9 = __fswab32(tmp_8);
    
#line 437 
    *(flow_context + 3U) = tmp_9;
  }
  {
    
#line 439 
    bool __cond_0 = (_Bool)0;
    
#line 439 
    if ((int)__cond_0 != 0) 
#line 439 
                            __compiletime_assert_439(); else ;
  }
  
#line 439 
  if (0 != 0) {
    unsigned int tmp_13;
    
#line 439 
    if (0 != 0) 
#line 439 
                tmp_13 = (((((*(flow_context + 4U) << 24) | ((*(flow_context + 4U) << 8) & 16711680U)) | ((*(flow_context + 4U) >> 8) & 65280U)) | (*(flow_context + 4U) >> 24)) >> 24) | 16777216U;
    else {
      __u32 tmp_12;
      
#line 439 
      tmp_12 = __fswab32(*(flow_context + 4U));
      
#line 439 
      tmp_13 = (tmp_12 >> 24) | 16777216U;
    }
    
#line 439 
    *(flow_context + 4U) = tmp_13;
  }
  else {
    __u32 tmp_16;
    unsigned int tmp_15;
    
#line 439 
    if (0 != 0) 
#line 439 
                tmp_15 = (((((*(flow_context + 4U) << 24) | ((*(flow_context + 4U) << 8) & 16711680U)) | ((*(flow_context + 4U) >> 8) & 65280U)) | (*(flow_context + 4U) >> 24)) & 4278190080U) | 1U;
    else {
      __u32 tmp_14;
      
#line 439 
      tmp_14 = __fswab32(*(flow_context + 4U));
      
#line 439 
      tmp_15 = (tmp_14 & 4278190080U) | 1U;
    }
    
#line 439 
    tmp_16 = __fswab32(tmp_15);
    
#line 439 
    *(flow_context + 4U) = tmp_16;
  }
  {
    
#line 440 
    bool __cond_1 = (_Bool)0;
    
#line 440 
    if ((int)__cond_1 != 0) 
#line 440 
                            __compiletime_assert_441(); else ;
  }
  
#line 440 
  if (0 != 0) {
    unsigned int tmp_20;
    unsigned int tmp_22;
    unsigned int tmp_24;
    
#line 440 
    if (0 != 0) 
#line 440 
                tmp_20 = ((((*((__be32 *)dest) << 24) | ((*((__be32 *)dest) << 8) & 16711680U)) | ((*((__be32 *)dest) >> 8) & 65280U)) | (*((__be32 *)dest) >> 24)) << 24;
    else {
      __u32 tmp_19;
      
#line 440 
      tmp_19 = __fswab32(*((__be32 *)dest));
      
#line 440 
      tmp_20 = tmp_19 << 24;
    }
    
#line 440 
    if (0 != 0) 
#line 440 
                tmp_22 = (((((*((__be32 *)dest) << 24) | ((*((__be32 *)dest) << 8) & 16711680U)) | ((*((__be32 *)dest) >> 8) & 65280U)) | (*((__be32 *)dest) >> 24)) << 8) & 16711680U;
    else {
      __u32 tmp_21;
      
#line 440 
      tmp_21 = __fswab32(*((__be32 *)dest));
      
#line 440 
      tmp_22 = (tmp_21 << 8) & 16711680U;
    }
    
#line 440 
    if (0 != 0) 
#line 440 
                tmp_24 = (((((*((__be32 *)dest) << 24) | ((*((__be32 *)dest) << 8) & 16711680U)) | ((*((__be32 *)dest) >> 8) & 65280U)) | (*((__be32 *)dest) >> 24)) >> 8) & 65280U;
    else {
      __u32 tmp_23;
      
#line 440 
      tmp_23 = __fswab32(*((__be32 *)dest));
      
#line 440 
      tmp_24 = (tmp_23 >> 8) & 65280U;
    }
    
#line 440 
    *((__be32 *)dest) = ((tmp_20 | tmp_22) | tmp_24) | 1U;
  }
  else {
    __u32 tmp_27;
    unsigned int tmp_26;
    
#line 440 
    if (0 != 0) 
#line 440 
                tmp_26 = (((((*((__be32 *)dest) << 24) | ((*((__be32 *)dest) << 8) & 16711680U)) | ((*((__be32 *)dest) >> 8) & 65280U)) | (*((__be32 *)dest) >> 24)) & 16777215U) | 16777216U;
    else {
      __u32 tmp_25;
      
#line 440 
      tmp_25 = __fswab32(*((__be32 *)dest));
      
#line 440 
      tmp_26 = (tmp_25 & 16777215U) | 16777216U;
    }
    
#line 440 
    tmp_27 = __fswab32(tmp_26);
    
#line 440 
    *((__be32 *)dest) = tmp_27;
  }
  {
    
#line 442 
    bool __cond_2 = (_Bool)0;
    
#line 442 
    if ((int)__cond_2 != 0) 
#line 442 
                            __compiletime_assert_443(); else ;
  }
  
#line 442 
  if (0 != 0) 
#line 442 
              tmp_29 = ((((*((__be32 *)dest) << 24) | ((*((__be32 *)dest) << 8) & 16711680U)) | ((*((__be32 *)dest) >> 8) & 65280U)) | (*((__be32 *)dest) >> 24)) & 4278190080U;
  else {
    __u32 tmp_28;
    
#line 442 
    tmp_28 = __fswab32(*((__be32 *)dest));
    
#line 442 
    tmp_29 = tmp_28 & 4278190080U;
  }
  
#line 442 
  tmp_30 = mlx5_get_flow_table_id(priv->ft.main);
  
#line 442 
  tmp_31 = __fswab32(tmp_29 | (tmp_30 & 16777215U));
  
#line 442 
  *((__be32 *)dest) = tmp_31;
  
#line 445 
  match_criteria_enable = (unsigned char)1U;
  {
    
#line 446 
    bool __cond_3 = (_Bool)0;
    
#line 446 
    if ((int)__cond_3 != 0) 
#line 446 
                            __compiletime_assert_447(); else ;
  }
  
#line 446 
  if (0 != 0) {
    unsigned int tmp_35;
    unsigned int tmp_37;
    unsigned int tmp_39;
    unsigned int tmp_41;
    
#line 446 
    if (0 != 0) 
#line 446 
                tmp_35 = ((((*(match_criteria + 4U) << 24) | ((*(match_criteria + 4U) << 8) & 16711680U)) | ((*(match_criteria + 4U) >> 8) & 65280U)) | (*(match_criteria + 4U) >> 24)) << 24;
    else {
      __u32 tmp_34;
      
#line 446 
      tmp_34 = __fswab32(*(match_criteria + 4U));
      
#line 446 
      tmp_35 = tmp_34 << 24;
    }
    
#line 446 
    if (0 != 0) 
#line 446 
                tmp_37 = ((((((*(match_criteria + 4U) << 24) | ((*(match_criteria + 4U) << 8) & 16711680U)) | ((*(match_criteria + 4U) >> 8) & 65280U)) | (*(match_criteria + 4U) >> 24)) << 8) & 8323072U) | 8388608U;
    else {
      __u32 tmp_36;
      
#line 446 
      tmp_36 = __fswab32(*(match_criteria + 4U));
      
#line 446 
      tmp_37 = ((tmp_36 << 8) & 8323072U) | 8388608U;
    }
    
#line 446 
    if (0 != 0) 
#line 446 
                tmp_39 = (((((*(match_criteria + 4U) << 24) | ((*(match_criteria + 4U) << 8) & 16711680U)) | ((*(match_criteria + 4U) >> 8) & 65280U)) | (*(match_criteria + 4U) >> 24)) >> 8) & 65280U;
    else {
      __u32 tmp_38;
      
#line 446 
      tmp_38 = __fswab32(*(match_criteria + 4U));
      
#line 446 
      tmp_39 = (tmp_38 >> 8) & 65280U;
    }
    
#line 446 
    if (0 != 0) 
#line 446 
                tmp_41 = ((((*(match_criteria + 4U) << 24) | ((*(match_criteria + 4U) << 8) & 16711680U)) | ((*(match_criteria + 4U) >> 8) & 65280U)) | (*(match_criteria + 4U) >> 24)) >> 24;
    else {
      __u32 tmp_40;
      
#line 446 
      tmp_40 = __fswab32(*(match_criteria + 4U));
      
#line 446 
      tmp_41 = tmp_40 >> 24;
    }
    
#line 446 
    *(match_criteria + 4U) = ((tmp_35 | tmp_37) | tmp_39) | tmp_41;
  }
  else {
    __u32 tmp_44;
    unsigned int tmp_43;
    
#line 446 
    if (0 != 0) 
#line 446 
                tmp_43 = ((((*(match_criteria + 4U) << 24) | ((*(match_criteria + 4U) << 8) & 16711680U)) | ((*(match_criteria + 4U) >> 8) & 65280U)) | (*(match_criteria + 4U) >> 24)) | 32768U;
    else {
      __u32 tmp_42;
      
#line 446 
      tmp_42 = __fswab32(*(match_criteria + 4U));
      
#line 446 
      tmp_43 = tmp_42 | 32768U;
    }
    
#line 446 
    tmp_44 = __fswab32(tmp_43);
    
#line 446 
    *(match_criteria + 4U) = tmp_44;
  }
  
#line 449 
  switch ((unsigned int)rule_type) {
    case (unsigned int)0: 
#line 450 
    ;
    
#line 451 
    ft_ix = & priv->vlan.untagged_rule_ft_ix;
    
#line 452 
    goto ldv_59902;
    case (unsigned int)1: 
#line 453 
    ;
    
#line 454 
    ft_ix = & priv->vlan.any_vlan_rule_ft_ix;
    {
      
#line 455 
      bool __cond_4 = (_Bool)0;
      
#line 455 
      if ((int)__cond_4 != 0) 
#line 455 
                              __compiletime_assert_456(); else ;
    }
    
#line 455 
    if (0 != 0) {
      unsigned int tmp_48;
      unsigned int tmp_50;
      unsigned int tmp_52;
      unsigned int tmp_54;
      
#line 455 
      if (0 != 0) 
#line 455 
                  tmp_48 = ((((*((__be32 *)match_value + 4U) << 24) | ((*((__be32 *)match_value + 4U) << 8) & 16711680U)) | ((*((__be32 *)match_value + 4U) >> 8) & 65280U)) | (*((__be32 *)match_value + 4U) >> 24)) << 24;
      else {
        __u32 tmp_47;
        
#line 455 
        tmp_47 = __fswab32(*((__be32 *)match_value + 4U));
        
#line 455 
        tmp_48 = tmp_47 << 24;
      }
      
#line 455 
      if (0 != 0) 
#line 455 
                  tmp_50 = ((((((*((__be32 *)match_value + 4U) << 24) | ((*((__be32 *)match_value + 4U) << 8) & 16711680U)) | ((*((__be32 *)match_value + 4U) >> 8) & 65280U)) | (*((__be32 *)match_value + 4U) >> 24)) << 8) & 8323072U) | 8388608U;
      else {
        __u32 tmp_49;
        
#line 455 
        tmp_49 = __fswab32(*((__be32 *)match_value + 4U));
        
#line 455 
        tmp_50 = ((tmp_49 << 8) & 8323072U) | 8388608U;
      }
      
#line 455 
      if (0 != 0) 
#line 455 
                  tmp_52 = (((((*((__be32 *)match_value + 4U) << 24) | ((*((__be32 *)match_value + 4U) << 8) & 16711680U)) | ((*((__be32 *)match_value + 4U) >> 8) & 65280U)) | (*((__be32 *)match_value + 4U) >> 24)) >> 8) & 65280U;
      else {
        __u32 tmp_51;
        
#line 455 
        tmp_51 = __fswab32(*((__be32 *)match_value + 4U));
        
#line 455 
        tmp_52 = (tmp_51 >> 8) & 65280U;
      }
      
#line 455 
      if (0 != 0) 
#line 455 
                  tmp_54 = ((((*((__be32 *)match_value + 4U) << 24) | ((*((__be32 *)match_value + 4U) << 8) & 16711680U)) | ((*((__be32 *)match_value + 4U) >> 8) & 65280U)) | (*((__be32 *)match_value + 4U) >> 24)) >> 24;
      else {
        __u32 tmp_53;
        
#line 455 
        tmp_53 = __fswab32(*((__be32 *)match_value + 4U));
        
#line 455 
        tmp_54 = tmp_53 >> 24;
      }
      
#line 455 
      *((__be32 *)match_value + 4U) = ((tmp_48 | tmp_50) | tmp_52) | tmp_54;
    }
    else {
      __u32 tmp_57;
      unsigned int tmp_56;
      
#line 455 
      if (0 != 0) 
#line 455 
                  tmp_56 = ((((*((__be32 *)match_value + 4U) << 24) | ((*((__be32 *)match_value + 4U) << 8) & 16711680U)) | ((*((__be32 *)match_value + 4U) >> 8) & 65280U)) | (*((__be32 *)match_value + 4U) >> 24)) | 32768U;
      else {
        __u32 tmp_55;
        
#line 455 
        tmp_55 = __fswab32(*((__be32 *)match_value + 4U));
        
#line 455 
        tmp_56 = tmp_55 | 32768U;
      }
      
#line 455 
      tmp_57 = __fswab32(tmp_56);
      
#line 455 
      *((__be32 *)match_value + 4U) = tmp_57;
    }
    
#line 457 
    goto ldv_59902;
    default: 
#line 458 
    ;
    
#line 459 
    ft_ix = & priv->vlan.active_vlans_ft_ix[(int)vid];
    {
      
#line 460 
      bool __cond_5 = (_Bool)0;
      
#line 460 
      if ((int)__cond_5 != 0) 
#line 460 
                              __compiletime_assert_461(); else ;
    }
    
#line 460 
    if (0 != 0) {
      unsigned int tmp_61;
      unsigned int tmp_63;
      unsigned int tmp_65;
      unsigned int tmp_67;
      
#line 460 
      if (0 != 0) 
#line 460 
                  tmp_61 = ((((*((__be32 *)match_value + 4U) << 24) | ((*((__be32 *)match_value + 4U) << 8) & 16711680U)) | ((*((__be32 *)match_value + 4U) >> 8) & 65280U)) | (*((__be32 *)match_value + 4U) >> 24)) << 24;
      else {
        __u32 tmp_60;
        
#line 460 
        tmp_60 = __fswab32(*((__be32 *)match_value + 4U));
        
#line 460 
        tmp_61 = tmp_60 << 24;
      }
      
#line 460 
      if (0 != 0) 
#line 460 
                  tmp_63 = ((((((*((__be32 *)match_value + 4U) << 24) | ((*((__be32 *)match_value + 4U) << 8) & 16711680U)) | ((*((__be32 *)match_value + 4U) >> 8) & 65280U)) | (*((__be32 *)match_value + 4U) >> 24)) << 8) & 8323072U) | 8388608U;
      else {
        __u32 tmp_62;
        
#line 460 
        tmp_62 = __fswab32(*((__be32 *)match_value + 4U));
        
#line 460 
        tmp_63 = ((tmp_62 << 8) & 8323072U) | 8388608U;
      }
      
#line 460 
      if (0 != 0) 
#line 460 
                  tmp_65 = (((((*((__be32 *)match_value + 4U) << 24) | ((*((__be32 *)match_value + 4U) << 8) & 16711680U)) | ((*((__be32 *)match_value + 4U) >> 8) & 65280U)) | (*((__be32 *)match_value + 4U) >> 24)) >> 8) & 65280U;
      else {
        __u32 tmp_64;
        
#line 460 
        tmp_64 = __fswab32(*((__be32 *)match_value + 4U));
        
#line 460 
        tmp_65 = (tmp_64 >> 8) & 65280U;
      }
      
#line 460 
      if (0 != 0) 
#line 460 
                  tmp_67 = ((((*((__be32 *)match_value + 4U) << 24) | ((*((__be32 *)match_value + 4U) << 8) & 16711680U)) | ((*((__be32 *)match_value + 4U) >> 8) & 65280U)) | (*((__be32 *)match_value + 4U) >> 24)) >> 24;
      else {
        __u32 tmp_66;
        
#line 460 
        tmp_66 = __fswab32(*((__be32 *)match_value + 4U));
        
#line 460 
        tmp_67 = tmp_66 >> 24;
      }
      
#line 460 
      *((__be32 *)match_value + 4U) = ((tmp_61 | tmp_63) | tmp_65) | tmp_67;
    }
    else {
      __u32 tmp_70;
      unsigned int tmp_69;
      
#line 460 
      if (0 != 0) 
#line 460 
                  tmp_69 = ((((*((__be32 *)match_value + 4U) << 24) | ((*((__be32 *)match_value + 4U) << 8) & 16711680U)) | ((*((__be32 *)match_value + 4U) >> 8) & 65280U)) | (*((__be32 *)match_value + 4U) >> 24)) | 32768U;
      else {
        __u32 tmp_68;
        
#line 460 
        tmp_68 = __fswab32(*((__be32 *)match_value + 4U));
        
#line 460 
        tmp_69 = tmp_68 | 32768U;
      }
      
#line 460 
      tmp_70 = __fswab32(tmp_69);
      
#line 460 
      *((__be32 *)match_value + 4U) = tmp_70;
    }
    {
      
#line 462 
      bool __cond_6 = (_Bool)0;
      
#line 462 
      if ((int)__cond_6 != 0) 
#line 462 
                              __compiletime_assert_463(); else ;
    }
    
#line 462 
    if (0 != 0) {
      unsigned int tmp_74;
      unsigned int tmp_76;
      unsigned int tmp_78;
      
#line 462 
      if (0 != 0) 
#line 462 
                  tmp_74 = ((((((*(match_criteria + 3U) << 24) | ((*(match_criteria + 3U) << 8) & 16711680U)) | ((*(match_criteria + 3U) >> 8) & 65280U)) | (*(match_criteria + 3U) >> 24)) << 8) & 15728640U) | 4279173120U;
      else {
        __u32 tmp_73;
        
#line 462 
        tmp_73 = __fswab32(*(match_criteria + 3U));
        
#line 462 
        tmp_74 = ((tmp_73 << 8) & 15728640U) | 4279173120U;
      }
      
#line 462 
      if (0 != 0) 
#line 462 
                  tmp_76 = (((((*(match_criteria + 3U) << 24) | ((*(match_criteria + 3U) << 8) & 16711680U)) | ((*(match_criteria + 3U) >> 8) & 65280U)) | (*(match_criteria + 3U) >> 24)) >> 8) & 65280U;
      else {
        __u32 tmp_75;
        
#line 462 
        tmp_75 = __fswab32(*(match_criteria + 3U));
        
#line 462 
        tmp_76 = (tmp_75 >> 8) & 65280U;
      }
      
#line 462 
      if (0 != 0) 
#line 462 
                  tmp_78 = ((((*(match_criteria + 3U) << 24) | ((*(match_criteria + 3U) << 8) & 16711680U)) | ((*(match_criteria + 3U) >> 8) & 65280U)) | (*(match_criteria + 3U) >> 24)) >> 24;
      else {
        __u32 tmp_77;
        
#line 462 
        tmp_77 = __fswab32(*(match_criteria + 3U));
        
#line 462 
        tmp_78 = tmp_77 >> 24;
      }
      
#line 462 
      *(match_criteria + 3U) = (tmp_74 | tmp_76) | tmp_78;
    }
    else {
      __u32 tmp_81;
      unsigned int tmp_80;
      
#line 462 
      if (0 != 0) 
#line 462 
                  tmp_80 = ((((*(match_criteria + 3U) << 24) | ((*(match_criteria + 3U) << 8) & 16711680U)) | ((*(match_criteria + 3U) >> 8) & 65280U)) | (*(match_criteria + 3U) >> 24)) | 4095U;
      else {
        __u32 tmp_79;
        
#line 462 
        tmp_79 = __fswab32(*(match_criteria + 3U));
        
#line 462 
        tmp_80 = tmp_79 | 4095U;
      }
      
#line 462 
      tmp_81 = __fswab32(tmp_80);
      
#line 462 
      *(match_criteria + 3U) = tmp_81;
    }
    {
      
#line 464 
      bool __cond_7 = (_Bool)0;
      
#line 464 
      if ((int)__cond_7 != 0) 
#line 464 
                              __compiletime_assert_465(); else ;
    }
    
#line 464 
    if (0 != 0) {
      unsigned int tmp_85;
      unsigned int tmp_87;
      unsigned int tmp_89;
      unsigned int tmp_91;
      
#line 464 
      if (0 != 0) 
#line 464 
                  tmp_85 = ((((*((__be32 *)match_value + 3U) << 24) | ((*((__be32 *)match_value + 3U) << 8) & 16711680U)) | ((*((__be32 *)match_value + 3U) >> 8) & 65280U)) | (*((__be32 *)match_value + 3U) >> 24)) & 4294963200U;
      else {
        __u32 tmp_84;
        
#line 464 
        tmp_84 = __fswab32(*((__be32 *)match_value + 3U));
        
#line 464 
        tmp_85 = tmp_84 & 4294963200U;
      }
      
#line 464 
      if (0 != 0) 
#line 464 
                  tmp_87 = ((((*((__be32 *)match_value + 3U) << 24) | ((*((__be32 *)match_value + 3U) << 8) & 16711680U)) | ((*((__be32 *)match_value + 3U) >> 8) & 65280U)) | (*((__be32 *)match_value + 3U) >> 24)) & 4294963200U;
      else {
        __u32 tmp_86;
        
#line 464 
        tmp_86 = __fswab32(*((__be32 *)match_value + 3U));
        
#line 464 
        tmp_87 = tmp_86 & 4294963200U;
      }
      
#line 464 
      if (0 != 0) 
#line 464 
                  tmp_89 = ((((*((__be32 *)match_value + 3U) << 24) | ((*((__be32 *)match_value + 3U) << 8) & 16711680U)) | ((*((__be32 *)match_value + 3U) >> 8) & 65280U)) | (*((__be32 *)match_value + 3U) >> 24)) & 4294963200U;
      else {
        __u32 tmp_88;
        
#line 464 
        tmp_88 = __fswab32(*((__be32 *)match_value + 3U));
        
#line 464 
        tmp_89 = tmp_88 & 4294963200U;
      }
      
#line 464 
      if (0 != 0) 
#line 464 
                  tmp_91 = ((((*((__be32 *)match_value + 3U) << 24) | ((*((__be32 *)match_value + 3U) << 8) & 16711680U)) | ((*((__be32 *)match_value + 3U) >> 8) & 65280U)) | (*((__be32 *)match_value + 3U) >> 24)) & 4294963200U;
      else {
        __u32 tmp_90;
        
#line 464 
        tmp_90 = __fswab32(*((__be32 *)match_value + 3U));
        
#line 464 
        tmp_91 = tmp_90 & 4294963200U;
      }
      
#line 464 
      *((__be32 *)match_value + 3U) = ((((tmp_85 | ((unsigned int)vid & 4095U)) << 24) | (((tmp_87 | ((unsigned int)vid & 4095U)) << 8) & 16711680U)) | (((tmp_89 | ((unsigned int)vid & 4095U)) >> 8) & 65280U)) | ((tmp_91 | ((unsigned int)vid & 4095U)) >> 24);
    }
    else {
      __u32 tmp_94;
      unsigned int tmp_93;
      
#line 464 
      if (0 != 0) 
#line 464 
                  tmp_93 = ((((*((__be32 *)match_value + 3U) << 24) | ((*((__be32 *)match_value + 3U) << 8) & 16711680U)) | ((*((__be32 *)match_value + 3U) >> 8) & 65280U)) | (*((__be32 *)match_value + 3U) >> 24)) & 4294963200U;
      else {
        __u32 tmp_92;
        
#line 464 
        tmp_92 = __fswab32(*((__be32 *)match_value + 3U));
        
#line 464 
        tmp_93 = tmp_92 & 4294963200U;
      }
      
#line 464 
      ;
      
#line 464 
      tmp_94 = __fswab32(tmp_93 | ((unsigned int)vid & 4095U));
      
#line 464 
      *((__be32 *)match_value + 3U) = tmp_94;
    }
    
#line 466 
    goto ldv_59902;
  }
  ldv_59902: 
#line 469 
  ;
  
#line 469 
  err = mlx5_add_flow_table_entry(priv->ft.vlan,(unsigned char)((int)match_criteria_enable),(void *)match_criteria,(void *)flow_context,ft_ix);
  
#line 471 
  if (err != 0) 
#line 472 
                netdev_err((struct net_device const *)priv->netdev,"%s: failed\n","mlx5e_add_vlan_rule"); else ;
  add_vlan_rule_out: 
#line 474 
  ;
  
#line 475 
  kvfree((void const *)match_criteria);
  
#line 476 
  kvfree((void const *)flow_context);
  
#line 477 
  return err;
}


#line 480  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_flow_table.c"
static void mlx5e_del_vlan_rule(struct mlx5e_priv *priv, enum mlx5e_vlan_rule_type rule_type, u16 vid)
{
  
#line 483 
  switch ((unsigned int)rule_type) {
    case (unsigned int)0: 
#line 484 
    ;
    
#line 485 
    mlx5_del_flow_table_entry(priv->ft.vlan,priv->vlan.untagged_rule_ft_ix);
    
#line 487 
    goto ldv_59927;
    case (unsigned int)1: 
#line 488 
    ;
    
#line 489 
    mlx5_del_flow_table_entry(priv->ft.vlan,priv->vlan.any_vlan_rule_ft_ix);
    
#line 491 
    goto ldv_59927;
    case (unsigned int)2: 
#line 492 
    ;
    
#line 493 
    mlx5_del_flow_table_entry(priv->ft.vlan,priv->vlan.active_vlans_ft_ix[(int)vid]);
    
#line 495 
    goto ldv_59927;
  }
  ldv_59927: 
#line 497 
  ;
  
#line 498 
  return;
}


#line 499  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_flow_table.c"
void mlx5e_enable_vlan_filter(struct mlx5e_priv *priv)
{
  {
    int tmp;
    
#line 501 
    tmp = ldv_mutex_is_locked_74(& priv->state_lock);
    
#line 501 
    int __ret_warn_on = tmp == 0;
    
#line 501 
    if ((long)(__ret_warn_on != 0) != 0L) 
#line 501 
                                          warn_slowpath_null("/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_flow_table.c",501); else ;
    
#line 501 
    long tmp_2 = (long)(__ret_warn_on != 0);
  }
  
#line 503 
  if ((int)priv->vlan.filter_disabled != 0) {
    int tmp_0;
    
#line 504 
    priv->vlan.filter_disabled = (_Bool)0;
    
#line 505 
    tmp_0 = constant_test_bit(1L,(unsigned long const volatile *)(& priv->state));
    
#line 505 
    if (tmp_0 != 0) 
#line 506 
                    mlx5e_del_vlan_rule(priv,(enum mlx5e_vlan_rule_type)MLX5E_VLAN_RULE_TYPE_ANY_VID,(unsigned short)0); else ;
  }
  else ;
  
#line 508 
  return;
}


#line 511  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_flow_table.c"
void mlx5e_disable_vlan_filter(struct mlx5e_priv *priv)
{
  {
    int tmp;
    
#line 513 
    tmp = ldv_mutex_is_locked_75(& priv->state_lock);
    
#line 513 
    int __ret_warn_on = tmp == 0;
    
#line 513 
    if ((long)(__ret_warn_on != 0) != 0L) 
#line 513 
                                          warn_slowpath_null("/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_flow_table.c",513); else ;
    
#line 513 
    long tmp_2 = (long)(__ret_warn_on != 0);
  }
  
#line 515 
  if (! priv->vlan.filter_disabled) {
    int tmp_0;
    
#line 516 
    priv->vlan.filter_disabled = (_Bool)1;
    
#line 517 
    tmp_0 = constant_test_bit(1L,(unsigned long const volatile *)(& priv->state));
    
#line 517 
    if (tmp_0 != 0) 
#line 518 
                    mlx5e_add_vlan_rule(priv,(enum mlx5e_vlan_rule_type)MLX5E_VLAN_RULE_TYPE_ANY_VID,(unsigned short)0); else ;
  }
  else ;
  
#line 520 
  return;
}


#line 523  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_flow_table.c"
int mlx5e_vlan_rx_add_vid(struct net_device *dev, __be16 proto, u16 vid)
{
  int tmp_0;
  
#line 526 
  struct mlx5e_priv *priv = netdev_priv((struct net_device const *)dev);
  
#line 527 
  int err = 0;
  
#line 529 
  ldv_mutex_lock_76(& priv->state_lock);
  
#line 531 
  set_bit((long)vid,(unsigned long volatile *)(& priv->vlan.active_vlans));
  
#line 532 
  tmp_0 = constant_test_bit(1L,(unsigned long const volatile *)(& priv->state));
  
#line 532 
  if (tmp_0 != 0) 
#line 533 
                  err = mlx5e_add_vlan_rule(priv,(enum mlx5e_vlan_rule_type)MLX5E_VLAN_RULE_TYPE_MATCH_VID,(unsigned short)((int)vid)); else ;
  
#line 536 
  ldv_mutex_unlock_77(& priv->state_lock);
  
#line 538 
  return err;
}


#line 541  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_flow_table.c"
int mlx5e_vlan_rx_kill_vid(struct net_device *dev, __be16 proto, u16 vid)
{
  int __retres;
  int tmp_0;
  
#line 544 
  struct mlx5e_priv *priv = netdev_priv((struct net_device const *)dev);
  
#line 546 
  ldv_mutex_lock_78(& priv->state_lock);
  
#line 548 
  set_bit((long)vid,(unsigned long volatile *)(& priv->vlan.active_vlans));
  
#line 549 
  tmp_0 = constant_test_bit(1L,(unsigned long const volatile *)(& priv->state));
  
#line 549 
  if (tmp_0 != 0) 
#line 550 
                  mlx5e_del_vlan_rule(priv,(enum mlx5e_vlan_rule_type)MLX5E_VLAN_RULE_TYPE_MATCH_VID,(unsigned short)((int)vid)); else ;
  
#line 552 
  ldv_mutex_unlock_79(& priv->state_lock);
  
#line 554 
  __retres = 0;
  
#line 554 
  return __retres;
}


#line 557  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_flow_table.c"
int mlx5e_add_all_vlan_rules(struct mlx5e_priv *priv)
{
  int __retres;
  u16 vid;
  int err;
  unsigned long tmp;
  unsigned long tmp_0;
  
#line 562 
  tmp = find_first_bit((unsigned long const *)(& priv->vlan.active_vlans),4096UL);
  
#line 562 
  vid = (unsigned short)tmp;
  
#line 562 
  goto ldv_59959;
  ldv_59958: 
#line 563 
  ;
  
#line 563 
  err = mlx5e_add_vlan_rule(priv,(enum mlx5e_vlan_rule_type)MLX5E_VLAN_RULE_TYPE_MATCH_VID,(unsigned short)((int)vid));
  
#line 565 
  if (err != 0) {
    
#line 566 
    __retres = err;
    
#line 566 
    goto return_label;
  }
  else ;
  
#line 562 
  tmp_0 = find_next_bit((unsigned long const *)(& priv->vlan.active_vlans),4096UL,(unsigned long)((int)vid + 1));
  
#line 562 
  vid = (unsigned short)tmp_0;
  ldv_59959: 
#line 563 
  ;
  
#line 562 
  if ((unsigned int)vid <= 4095U) 
#line 564 
                                  goto ldv_59958; else 
#line 567 
                                                       goto ldv_59960;
  ldv_59960: 
#line 568 
  ;
  
#line 569 
  err = mlx5e_add_vlan_rule(priv,(enum mlx5e_vlan_rule_type)MLX5E_VLAN_RULE_TYPE_UNTAGGED,(unsigned short)0);
  
#line 570 
  if (err != 0) {
    
#line 571 
    __retres = err;
    
#line 571 
    goto return_label;
  }
  else ;
  
#line 573 
  if ((int)priv->vlan.filter_disabled != 0) {
    
#line 574 
    err = mlx5e_add_vlan_rule(priv,(enum mlx5e_vlan_rule_type)MLX5E_VLAN_RULE_TYPE_ANY_VID,(unsigned short)0);
    
#line 576 
    if (err != 0) {
      
#line 577 
      __retres = err;
      
#line 577 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 580 
  __retres = 0;
  return_label: 
#line 580 
                return __retres;
}


#line 583  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_flow_table.c"
void mlx5e_del_all_vlan_rules(struct mlx5e_priv *priv)
{
  u16 vid;
  unsigned long tmp;
  unsigned long tmp_0;
  
#line 587 
  if ((int)priv->vlan.filter_disabled != 0) 
#line 588 
                                            mlx5e_del_vlan_rule(priv,(enum mlx5e_vlan_rule_type)MLX5E_VLAN_RULE_TYPE_ANY_VID,(unsigned short)0); else ;
  
#line 590 
  mlx5e_del_vlan_rule(priv,(enum mlx5e_vlan_rule_type)MLX5E_VLAN_RULE_TYPE_UNTAGGED,(unsigned short)0);
  
#line 592 
  tmp = find_first_bit((unsigned long const *)(& priv->vlan.active_vlans),4096UL);
  
#line 592 
  vid = (unsigned short)tmp;
  
#line 592 
  goto ldv_59966;
  ldv_59965: 
#line 593 
  ;
  
#line 593 
  mlx5e_del_vlan_rule(priv,(enum mlx5e_vlan_rule_type)MLX5E_VLAN_RULE_TYPE_MATCH_VID,(unsigned short)((int)vid));
  
#line 592 
  tmp_0 = find_next_bit((unsigned long const *)(& priv->vlan.active_vlans),4096UL,(unsigned long)((int)vid + 1));
  
#line 592 
  vid = (unsigned short)tmp_0;
  ldv_59966: 
#line 593 
  ;
  
#line 592 
  if ((unsigned int)vid <= 4095U) 
#line 594 
                                  goto ldv_59965; else 
#line 597 
                                                       goto ldv_59967;
  ldv_59967: 
#line 598 
  ;
  
#line 599 
  return;
}


#line 600  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_flow_table.c"
static void mlx5e_execute_action(struct mlx5e_priv *priv, struct mlx5e_eth_addr_hash_node *hn)
{
  
#line 603 
  switch ((int)hn->action) {
    case 1: 
#line 604 
    ;
    
#line 605 
    mlx5e_add_eth_addr_rule(priv,& hn->ai,0);
    
#line 606 
    hn->action = (unsigned char)0U;
    
#line 607 
    goto ldv_59973;
    case 2: 
#line 609 
    ;
    
#line 610 
    mlx5e_del_eth_addr_from_flow_table(priv,& hn->ai);
    
#line 611 
    mlx5e_del_eth_addr_from_hash(hn);
    
#line 612 
    goto ldv_59973;
  }
  ldv_59973: 
#line 614 
  ;
  
#line 615 
  return;
}


#line 616  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_flow_table.c"
static void mlx5e_sync_netdev_addr(struct mlx5e_priv *priv)
{
  struct netdev_hw_addr *ha;
  struct netdev_hw_addr *tmp;
  struct netdev_hw_addr *tmp_0;
  struct netdev_hw_addr *tmp_1;
  struct netdev_hw_addr *tmp_2;
  
#line 618 
  struct net_device *netdev = priv->netdev;
  
#line 621 
  netif_addr_lock_bh(netdev);
  
#line 623 
  mlx5e_add_eth_addr_to_hash((struct hlist_head *)(& priv->eth_addr.netdev_uc),(priv->netdev)->dev_addr);
  {
    
#line 626 
    struct list_head const *__mptr = (struct list_head const *)netdev->uc.list.next;
    
#line 626 
    tmp = (struct netdev_hw_addr *)__mptr;
  }
  
#line 626 
  ha = tmp;
  
#line 626 
  goto ldv_59985;
  ldv_59984: 
#line 627 
  ;
  
#line 627 
  mlx5e_add_eth_addr_to_hash((struct hlist_head *)(& priv->eth_addr.netdev_uc),(u8 *)(& ha->addr));
  {
    
#line 626 
    struct list_head const *__mptr_0 = (struct list_head const *)ha->list.next;
    
#line 626 
    tmp_0 = (struct netdev_hw_addr *)__mptr_0;
  }
  
#line 626 
  ha = tmp_0;
  ldv_59985: 
#line 628 
  ;
  
#line 626 
  if (& ha->list != & netdev->uc.list) 
#line 628 
                                       goto ldv_59984; else 
#line 631 
                                                            goto ldv_59986;
  ldv_59986: 
#line 632 
  ;
  {
    
#line 629 
    struct list_head const *__mptr_1 = (struct list_head const *)netdev->mc.list.next;
    
#line 629 
    tmp_1 = (struct netdev_hw_addr *)__mptr_1;
  }
  
#line 629 
  ha = tmp_1;
  
#line 629 
  goto ldv_59992;
  ldv_59991: 
#line 630 
  ;
  
#line 630 
  mlx5e_add_eth_addr_to_hash((struct hlist_head *)(& priv->eth_addr.netdev_mc),(u8 *)(& ha->addr));
  {
    
#line 629 
    struct list_head const *__mptr_2 = (struct list_head const *)ha->list.next;
    
#line 629 
    tmp_2 = (struct netdev_hw_addr *)__mptr_2;
  }
  
#line 629 
  ha = tmp_2;
  ldv_59992: 
#line 631 
  ;
  
#line 629 
  if (& ha->list != & netdev->mc.list) 
#line 631 
                                       goto ldv_59991; else 
#line 634 
                                                            goto ldv_59993;
  ldv_59993: 
#line 635 
  ;
  
#line 632 
  netif_addr_unlock_bh(netdev);
  
#line 633 
  return;
}


#line 635  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_flow_table.c"
static void mlx5e_apply_netdev_addr(struct mlx5e_priv *priv)
{
  struct mlx5e_eth_addr_hash_node *hn;
  struct hlist_node *tmp;
  int i;
  struct mlx5e_eth_addr_hash_node *tmp_2;
  struct mlx5e_eth_addr_hash_node *tmp_5;
  struct mlx5e_eth_addr_hash_node *tmp_8;
  struct mlx5e_eth_addr_hash_node *tmp_11;
  
#line 641 
  i = 0;
  
#line 641 
  goto ldv_60013;
  ldv_60012: 
#line 642 
  ;
  {
    struct mlx5e_eth_addr_hash_node *tmp_1;
    
#line 641 
    struct hlist_node *____ptr = priv->eth_addr.netdev_uc[i].first;
    
#line 641 
    if (____ptr != (struct hlist_node *)0) {
      struct mlx5e_eth_addr_hash_node *tmp_0;
      {
        
#line 641 
        struct hlist_node const *__mptr = (struct hlist_node const *)____ptr;
        
#line 641 
        tmp_0 = (struct mlx5e_eth_addr_hash_node *)__mptr;
      }
      
#line 641 
      tmp_1 = tmp_0;
    }
    else 
#line 641 
         tmp_1 = (struct mlx5e_eth_addr_hash_node *)0;
    
#line 641 
    tmp_2 = tmp_1;
  }
  
#line 641 
  hn = tmp_2;
  
#line 641 
  goto ldv_60010;
  ldv_60009: 
#line 642 
  ;
  
#line 642 
  mlx5e_execute_action(priv,hn);
  {
    struct mlx5e_eth_addr_hash_node *tmp_4;
    
#line 641 
    struct hlist_node *____ptr_0 = tmp;
    
#line 641 
    if (____ptr_0 != (struct hlist_node *)0) {
      struct mlx5e_eth_addr_hash_node *tmp_3;
      {
        
#line 641 
        struct hlist_node const *__mptr_0 = (struct hlist_node const *)____ptr_0;
        
#line 641 
        tmp_3 = (struct mlx5e_eth_addr_hash_node *)__mptr_0;
      }
      
#line 641 
      tmp_4 = tmp_3;
    }
    else 
#line 641 
         tmp_4 = (struct mlx5e_eth_addr_hash_node *)0;
    
#line 641 
    tmp_5 = tmp_4;
  }
  
#line 641 
  hn = tmp_5;
  ldv_60010: 
#line 643 
  ;
  
#line 641 
  if (hn != (struct mlx5e_eth_addr_hash_node *)0) {
    
#line 641 
    tmp = hn->hlist.next;
    
#line 641 
    if (1 != 0) 
#line 643 
                goto ldv_60009; else 
#line 646 
                                     goto ldv_60011;
  }
  else 
#line 646 
       goto ldv_60011;
  ldv_60011: 
#line 647 
  ;
  
#line 641 
  i += 1;
  ldv_60013: 
#line 642 
  ;
  
#line 641 
  if (i <= 255) 
#line 643 
                goto ldv_60012; else 
#line 646 
                                     goto ldv_60014;
  ldv_60014: 
#line 647 
  ;
  
#line 644 
  i = 0;
  
#line 644 
  goto ldv_60028;
  ldv_60027: 
#line 645 
  ;
  {
    struct mlx5e_eth_addr_hash_node *tmp_7;
    
#line 644 
    struct hlist_node *____ptr_1 = priv->eth_addr.netdev_mc[i].first;
    
#line 644 
    if (____ptr_1 != (struct hlist_node *)0) {
      struct mlx5e_eth_addr_hash_node *tmp_6;
      {
        
#line 644 
        struct hlist_node const *__mptr_1 = (struct hlist_node const *)____ptr_1;
        
#line 644 
        tmp_6 = (struct mlx5e_eth_addr_hash_node *)__mptr_1;
      }
      
#line 644 
      tmp_7 = tmp_6;
    }
    else 
#line 644 
         tmp_7 = (struct mlx5e_eth_addr_hash_node *)0;
    
#line 644 
    tmp_8 = tmp_7;
  }
  
#line 644 
  hn = tmp_8;
  
#line 644 
  goto ldv_60025;
  ldv_60024: 
#line 645 
  ;
  
#line 645 
  mlx5e_execute_action(priv,hn);
  {
    struct mlx5e_eth_addr_hash_node *tmp_10;
    
#line 644 
    struct hlist_node *____ptr_2 = tmp;
    
#line 644 
    if (____ptr_2 != (struct hlist_node *)0) {
      struct mlx5e_eth_addr_hash_node *tmp_9;
      {
        
#line 644 
        struct hlist_node const *__mptr_2 = (struct hlist_node const *)____ptr_2;
        
#line 644 
        tmp_9 = (struct mlx5e_eth_addr_hash_node *)__mptr_2;
      }
      
#line 644 
      tmp_10 = tmp_9;
    }
    else 
#line 644 
         tmp_10 = (struct mlx5e_eth_addr_hash_node *)0;
    
#line 644 
    tmp_11 = tmp_10;
  }
  
#line 644 
  hn = tmp_11;
  ldv_60025: 
#line 646 
  ;
  
#line 644 
  if (hn != (struct mlx5e_eth_addr_hash_node *)0) {
    
#line 644 
    tmp = hn->hlist.next;
    
#line 644 
    if (1 != 0) 
#line 646 
                goto ldv_60024; else 
#line 649 
                                     goto ldv_60026;
  }
  else 
#line 649 
       goto ldv_60026;
  ldv_60026: 
#line 650 
  ;
  
#line 644 
  i += 1;
  ldv_60028: 
#line 645 
  ;
  
#line 644 
  if (i <= 255) 
#line 646 
                goto ldv_60027; else 
#line 649 
                                     goto ldv_60029;
  ldv_60029: 
#line 650 
  ;
  
#line 651 
  return;
}


#line 648  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_flow_table.c"
static void mlx5e_handle_netdev_addr(struct mlx5e_priv *priv)
{
  struct mlx5e_eth_addr_hash_node *hn;
  struct hlist_node *tmp;
  int i;
  struct mlx5e_eth_addr_hash_node *tmp_2;
  struct mlx5e_eth_addr_hash_node *tmp_5;
  struct mlx5e_eth_addr_hash_node *tmp_8;
  struct mlx5e_eth_addr_hash_node *tmp_11;
  int tmp_12;
  
#line 654 
  i = 0;
  
#line 654 
  goto ldv_60049;
  ldv_60048: 
#line 655 
  ;
  {
    struct mlx5e_eth_addr_hash_node *tmp_1;
    
#line 654 
    struct hlist_node *____ptr = priv->eth_addr.netdev_uc[i].first;
    
#line 654 
    if (____ptr != (struct hlist_node *)0) {
      struct mlx5e_eth_addr_hash_node *tmp_0;
      {
        
#line 654 
        struct hlist_node const *__mptr = (struct hlist_node const *)____ptr;
        
#line 654 
        tmp_0 = (struct mlx5e_eth_addr_hash_node *)__mptr;
      }
      
#line 654 
      tmp_1 = tmp_0;
    }
    else 
#line 654 
         tmp_1 = (struct mlx5e_eth_addr_hash_node *)0;
    
#line 654 
    tmp_2 = tmp_1;
  }
  
#line 654 
  hn = tmp_2;
  
#line 654 
  goto ldv_60046;
  ldv_60045: 
#line 655 
  ;
  
#line 655 
  hn->action = (unsigned char)2U;
  {
    struct mlx5e_eth_addr_hash_node *tmp_4;
    
#line 654 
    struct hlist_node *____ptr_0 = tmp;
    
#line 654 
    if (____ptr_0 != (struct hlist_node *)0) {
      struct mlx5e_eth_addr_hash_node *tmp_3;
      {
        
#line 654 
        struct hlist_node const *__mptr_0 = (struct hlist_node const *)____ptr_0;
        
#line 654 
        tmp_3 = (struct mlx5e_eth_addr_hash_node *)__mptr_0;
      }
      
#line 654 
      tmp_4 = tmp_3;
    }
    else 
#line 654 
         tmp_4 = (struct mlx5e_eth_addr_hash_node *)0;
    
#line 654 
    tmp_5 = tmp_4;
  }
  
#line 654 
  hn = tmp_5;
  ldv_60046: 
#line 656 
  ;
  
#line 654 
  if (hn != (struct mlx5e_eth_addr_hash_node *)0) {
    
#line 654 
    tmp = hn->hlist.next;
    
#line 654 
    if (1 != 0) 
#line 656 
                goto ldv_60045; else 
#line 659 
                                     goto ldv_60047;
  }
  else 
#line 659 
       goto ldv_60047;
  ldv_60047: 
#line 660 
  ;
  
#line 654 
  i += 1;
  ldv_60049: 
#line 655 
  ;
  
#line 654 
  if (i <= 255) 
#line 656 
                goto ldv_60048; else 
#line 659 
                                     goto ldv_60050;
  ldv_60050: 
#line 660 
  ;
  
#line 656 
  i = 0;
  
#line 656 
  goto ldv_60064;
  ldv_60063: 
#line 657 
  ;
  {
    struct mlx5e_eth_addr_hash_node *tmp_7;
    
#line 656 
    struct hlist_node *____ptr_1 = priv->eth_addr.netdev_mc[i].first;
    
#line 656 
    if (____ptr_1 != (struct hlist_node *)0) {
      struct mlx5e_eth_addr_hash_node *tmp_6;
      {
        
#line 656 
        struct hlist_node const *__mptr_1 = (struct hlist_node const *)____ptr_1;
        
#line 656 
        tmp_6 = (struct mlx5e_eth_addr_hash_node *)__mptr_1;
      }
      
#line 656 
      tmp_7 = tmp_6;
    }
    else 
#line 656 
         tmp_7 = (struct mlx5e_eth_addr_hash_node *)0;
    
#line 656 
    tmp_8 = tmp_7;
  }
  
#line 656 
  hn = tmp_8;
  
#line 656 
  goto ldv_60061;
  ldv_60060: 
#line 657 
  ;
  
#line 657 
  hn->action = (unsigned char)2U;
  {
    struct mlx5e_eth_addr_hash_node *tmp_10;
    
#line 656 
    struct hlist_node *____ptr_2 = tmp;
    
#line 656 
    if (____ptr_2 != (struct hlist_node *)0) {
      struct mlx5e_eth_addr_hash_node *tmp_9;
      {
        
#line 656 
        struct hlist_node const *__mptr_2 = (struct hlist_node const *)____ptr_2;
        
#line 656 
        tmp_9 = (struct mlx5e_eth_addr_hash_node *)__mptr_2;
      }
      
#line 656 
      tmp_10 = tmp_9;
    }
    else 
#line 656 
         tmp_10 = (struct mlx5e_eth_addr_hash_node *)0;
    
#line 656 
    tmp_11 = tmp_10;
  }
  
#line 656 
  hn = tmp_11;
  ldv_60061: 
#line 658 
  ;
  
#line 656 
  if (hn != (struct mlx5e_eth_addr_hash_node *)0) {
    
#line 656 
    tmp = hn->hlist.next;
    
#line 656 
    if (1 != 0) 
#line 658 
                goto ldv_60060; else 
#line 661 
                                     goto ldv_60062;
  }
  else 
#line 661 
       goto ldv_60062;
  ldv_60062: 
#line 662 
  ;
  
#line 656 
  i += 1;
  ldv_60064: 
#line 657 
  ;
  
#line 656 
  if (i <= 255) 
#line 658 
                goto ldv_60063; else 
#line 661 
                                     goto ldv_60065;
  ldv_60065: 
#line 662 
  ;
  
#line 659 
  tmp_12 = constant_test_bit(1L,(unsigned long const volatile *)(& priv->state));
  
#line 659 
  if (tmp_12 != 0) 
#line 660 
                   mlx5e_sync_netdev_addr(priv); else ;
  
#line 662 
  mlx5e_apply_netdev_addr(priv);
  
#line 663 
  return;
}


#line 665  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_flow_table.c"
void mlx5e_set_rx_mode_core(struct mlx5e_priv *priv)
{
  int tmp;
  
#line 667 
  struct mlx5e_eth_addr_db *ea = & priv->eth_addr;
  
#line 668 
  struct net_device *ndev = priv->netdev;
  
#line 670 
  tmp = constant_test_bit(1L,(unsigned long const volatile *)(& priv->state));
  
#line 670 
  bool rx_mode_enable = (_Bool)(tmp != 0);
  
#line 671 
  bool promisc_enabled = (_Bool)(((int)rx_mode_enable != 0 && (ndev->flags & 256U) != 0U) != 0);
  
#line 672 
  bool allmulti_enabled = (_Bool)(((int)rx_mode_enable != 0 && (ndev->flags & 512U) != 0U) != 0);
  
#line 673 
  bool broadcast_enabled = rx_mode_enable;
  
#line 675 
  bool enable_promisc = (_Bool)((! ea->promisc_enabled && (int)promisc_enabled != 0) != 0);
  
#line 676 
  bool disable_promisc = (_Bool)(((int)ea->promisc_enabled != 0 && ! promisc_enabled) != 0);
  
#line 677 
  bool enable_allmulti = (_Bool)((! ea->allmulti_enabled && (int)allmulti_enabled != 0) != 0);
  
#line 678 
  bool disable_allmulti = (_Bool)(((int)ea->allmulti_enabled != 0 && ! allmulti_enabled) != 0);
  
#line 679 
  bool enable_broadcast = (_Bool)((! ea->broadcast_enabled && (int)broadcast_enabled != 0) != 0);
  
#line 680 
  bool disable_broadcast = (_Bool)(((int)ea->broadcast_enabled != 0 && ! broadcast_enabled) != 0);
  
#line 682 
  if ((int)enable_promisc != 0) 
#line 683 
                                mlx5e_add_eth_addr_rule(priv,& ea->promisc,2); else ;
  
#line 684 
  if ((int)enable_allmulti != 0) 
#line 685 
                                 mlx5e_add_eth_addr_rule(priv,& ea->allmulti,1); else ;
  
#line 686 
  if ((int)enable_broadcast != 0) 
#line 687 
                                  mlx5e_add_eth_addr_rule(priv,& ea->broadcast,0); else ;
  
#line 689 
  mlx5e_handle_netdev_addr(priv);
  
#line 691 
  if ((int)disable_broadcast != 0) 
#line 692 
                                   mlx5e_del_eth_addr_from_flow_table(priv,& ea->broadcast); else ;
  
#line 693 
  if ((int)disable_allmulti != 0) 
#line 694 
                                  mlx5e_del_eth_addr_from_flow_table(priv,& ea->allmulti); else ;
  
#line 695 
  if ((int)disable_promisc != 0) 
#line 696 
                                 mlx5e_del_eth_addr_from_flow_table(priv,& ea->promisc); else ;
  
#line 698 
  ea->promisc_enabled = promisc_enabled;
  
#line 699 
  ea->allmulti_enabled = allmulti_enabled;
  
#line 700 
  ea->broadcast_enabled = broadcast_enabled;
  
#line 701 
  return;
}


#line 703  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_flow_table.c"
void mlx5e_set_rx_mode_work(struct work_struct *work)
{
  struct mlx5e_priv *tmp;
  int tmp_0;
  {
    
#line 705 
    struct work_struct const *__mptr = (struct work_struct const *)work;
    
#line 705 
    tmp = (struct mlx5e_priv *)__mptr + 18446744073709529952U;
  }
  
#line 705 
  struct mlx5e_priv *priv = tmp;
  
#line 708 
  ldv_mutex_lock_80(& priv->state_lock);
  
#line 709 
  tmp_0 = constant_test_bit(1L,(unsigned long const volatile *)(& priv->state));
  
#line 709 
  if (tmp_0 != 0) 
#line 710 
                  mlx5e_set_rx_mode_core(priv); else ;
  
#line 711 
  ldv_mutex_unlock_81(& priv->state_lock);
  
#line 712 
  return;
}


#line 714  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_flow_table.c"
void mlx5e_init_eth_addr(struct mlx5e_priv *priv)
{
  
#line 716 
  ether_addr_copy((u8 *)(& priv->eth_addr.broadcast.addr),(u8 const *)(& (priv->netdev)->broadcast));
  
#line 717 
  return;
}


#line 730 
void __compiletime_assert_731(void);


#line 732 
void __compiletime_assert_733(void);


#line 737 
void __compiletime_assert_738(void);


#line 747 
void __compiletime_assert_748(void);


#line 749 
void __compiletime_assert_750(void);


#line 757 
void __compiletime_assert_758(void);


#line 771 
void __compiletime_assert_772(void);


#line 773 
void __compiletime_assert_774(void);


#line 781 
void __compiletime_assert_782(void);


#line 719  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_flow_table.c"
static int mlx5e_create_main_flow_table(struct mlx5e_priv *priv)
{
  int __retres;
  struct mlx5_flow_table_group *g;
  u8 *dmac;
  int tmp_87;
  
#line 724 
  g = (struct mlx5_flow_table_group *)kcalloc_0(9UL,516UL,208U);
  
#line 725 
  if (g == (struct mlx5_flow_table_group *)0) {
    
#line 726 
    __retres = -12;
    
#line 726 
    goto return_label;
  }
  else ;
  
#line 728 
  g->log_sz = (unsigned char)2U;
  
#line 729 
  g->match_criteria_enable = (unsigned char)1U;
  {
    
#line 730 
    bool __cond = (_Bool)0;
    
#line 730 
    if ((int)__cond != 0) 
#line 730 
                          __compiletime_assert_731(); else ;
  }
  
#line 730 
  if (0 != 0) {
    unsigned int tmp_3;
    unsigned int tmp_5;
    
#line 730 
    if (0 != 0) 
#line 730 
                tmp_3 = ((((((*((__be32 *)(& g->match_criteria) + 1U) << 24) | ((*((__be32 *)(& g->match_criteria) + 1U) << 8) & 16711680U)) | ((*((__be32 *)(& g->match_criteria) + 1U) >> 8) & 65280U)) | (*((__be32 *)(& g->match_criteria) + 1U) >> 24)) >> 8) & 65280U) | 4294901760U;
    else {
      __u32 tmp_2;
      
#line 730 
      tmp_2 = __fswab32(*((__be32 *)(& g->match_criteria) + 1U));
      
#line 730 
      tmp_3 = ((tmp_2 >> 8) & 65280U) | 4294901760U;
    }
    
#line 730 
    if (0 != 0) 
#line 730 
                tmp_5 = ((((*((__be32 *)(& g->match_criteria) + 1U) << 24) | ((*((__be32 *)(& g->match_criteria) + 1U) << 8) & 16711680U)) | ((*((__be32 *)(& g->match_criteria) + 1U) >> 8) & 65280U)) | (*((__be32 *)(& g->match_criteria) + 1U) >> 24)) >> 24;
    else {
      __u32 tmp_4;
      
#line 730 
      tmp_4 = __fswab32(*((__be32 *)(& g->match_criteria) + 1U));
      
#line 730 
      tmp_5 = tmp_4 >> 24;
    }
    
#line 730 
    *((__be32 *)(& g->match_criteria) + 1U) = tmp_3 | tmp_5;
  }
  else {
    __u32 tmp_8;
    unsigned int tmp_7;
    
#line 730 
    if (0 != 0) 
#line 730 
                tmp_7 = ((((*((__be32 *)(& g->match_criteria) + 1U) << 24) | ((*((__be32 *)(& g->match_criteria) + 1U) << 8) & 16711680U)) | ((*((__be32 *)(& g->match_criteria) + 1U) >> 8) & 65280U)) | (*((__be32 *)(& g->match_criteria) + 1U) >> 24)) | 65535U;
    else {
      __u32 tmp_6;
      
#line 730 
      tmp_6 = __fswab32(*((__be32 *)(& g->match_criteria) + 1U));
      
#line 730 
      tmp_7 = tmp_6 | 65535U;
    }
    
#line 730 
    tmp_8 = __fswab32(tmp_7);
    
#line 730 
    *((__be32 *)(& g->match_criteria) + 1U) = tmp_8;
  }
  {
    
#line 732 
    bool __cond_0 = (_Bool)0;
    
#line 732 
    if ((int)__cond_0 != 0) 
#line 732 
                            __compiletime_assert_733(); else ;
  }
  
#line 732 
  if (0 != 0) {
    unsigned int tmp_12;
    unsigned int tmp_14;
    unsigned int tmp_16;
    
#line 732 
    if (0 != 0) 
#line 732 
                tmp_12 = ((((*((__be32 *)(& g->match_criteria) + 4U) << 24) | ((*((__be32 *)(& g->match_criteria) + 4U) << 8) & 16711680U)) | ((*((__be32 *)(& g->match_criteria) + 4U) >> 8) & 65280U)) | (*((__be32 *)(& g->match_criteria) + 4U) >> 24)) << 24;
    else {
      __u32 tmp_11;
      
#line 732 
      tmp_11 = __fswab32(*((__be32 *)(& g->match_criteria) + 4U));
      
#line 732 
      tmp_12 = tmp_11 << 24;
    }
    
#line 732 
    if (0 != 0) 
#line 732 
                tmp_14 = (((((*((__be32 *)(& g->match_criteria) + 4U) << 24) | ((*((__be32 *)(& g->match_criteria) + 4U) << 8) & 16711680U)) | ((*((__be32 *)(& g->match_criteria) + 4U) >> 8) & 65280U)) | (*((__be32 *)(& g->match_criteria) + 4U) >> 24)) << 8) & 16711680U;
    else {
      __u32 tmp_13;
      
#line 732 
      tmp_13 = __fswab32(*((__be32 *)(& g->match_criteria) + 4U));
      
#line 732 
      tmp_14 = (tmp_13 << 8) & 16711680U;
    }
    
#line 732 
    if (0 != 0) 
#line 732 
                tmp_16 = (((((*((__be32 *)(& g->match_criteria) + 4U) << 24) | ((*((__be32 *)(& g->match_criteria) + 4U) << 8) & 16711680U)) | ((*((__be32 *)(& g->match_criteria) + 4U) >> 8) & 65280U)) | (*((__be32 *)(& g->match_criteria) + 4U) >> 24)) >> 8) & 65280U;
    else {
      __u32 tmp_15;
      
#line 732 
      tmp_15 = __fswab32(*((__be32 *)(& g->match_criteria) + 4U));
      
#line 732 
      tmp_16 = (tmp_15 >> 8) & 65280U;
    }
    
#line 732 
    *((__be32 *)(& g->match_criteria) + 4U) = ((tmp_12 | tmp_14) | tmp_16) | 255U;
  }
  else {
    __u32 tmp_19;
    unsigned int tmp_18;
    
#line 732 
    if (0 != 0) 
#line 732 
                tmp_18 = ((((*((__be32 *)(& g->match_criteria) + 4U) << 24) | ((*((__be32 *)(& g->match_criteria) + 4U) << 8) & 16711680U)) | ((*((__be32 *)(& g->match_criteria) + 4U) >> 8) & 65280U)) | (*((__be32 *)(& g->match_criteria) + 4U) >> 24)) | 4278190080U;
    else {
      __u32 tmp_17;
      
#line 732 
      tmp_17 = __fswab32(*((__be32 *)(& g->match_criteria) + 4U));
      
#line 732 
      tmp_18 = tmp_17 | 4278190080U;
    }
    
#line 732 
    tmp_19 = __fswab32(tmp_18);
    
#line 732 
    *((__be32 *)(& g->match_criteria) + 4U) = tmp_19;
  }
  
#line 735 
  (g + 1U)->log_sz = (unsigned char)1U;
  
#line 736 
  (g + 1U)->match_criteria_enable = (unsigned char)1U;
  {
    
#line 737 
    bool __cond_1 = (_Bool)0;
    
#line 737 
    if ((int)__cond_1 != 0) 
#line 737 
                            __compiletime_assert_738(); else ;
  }
  
#line 737 
  if (0 != 0) {
    unsigned int tmp_23;
    unsigned int tmp_25;
    
#line 737 
    if (0 != 0) 
#line 737 
                tmp_23 = ((((((*((__be32 *)(& (g + 1U)->match_criteria) + 1U) << 24) | ((*((__be32 *)(& (g + 1U)->match_criteria) + 1U) << 8) & 16711680U)) | ((*((__be32 *)(& (g + 1U)->match_criteria) + 1U) >> 8) & 65280U)) | (*((__be32 *)(& (g + 1U)->match_criteria) + 1U) >> 24)) >> 8) & 65280U) | 4294901760U;
    else {
      __u32 tmp_22;
      
#line 737 
      tmp_22 = __fswab32(*((__be32 *)(& (g + 1U)->match_criteria) + 1U));
      
#line 737 
      tmp_23 = ((tmp_22 >> 8) & 65280U) | 4294901760U;
    }
    
#line 737 
    if (0 != 0) 
#line 737 
                tmp_25 = ((((*((__be32 *)(& (g + 1U)->match_criteria) + 1U) << 24) | ((*((__be32 *)(& (g + 1U)->match_criteria) + 1U) << 8) & 16711680U)) | ((*((__be32 *)(& (g + 1U)->match_criteria) + 1U) >> 8) & 65280U)) | (*((__be32 *)(& (g + 1U)->match_criteria) + 1U) >> 24)) >> 24;
    else {
      __u32 tmp_24;
      
#line 737 
      tmp_24 = __fswab32(*((__be32 *)(& (g + 1U)->match_criteria) + 1U));
      
#line 737 
      tmp_25 = tmp_24 >> 24;
    }
    
#line 737 
    *((__be32 *)(& (g + 1U)->match_criteria) + 1U) = tmp_23 | tmp_25;
  }
  else {
    __u32 tmp_28;
    unsigned int tmp_27;
    
#line 737 
    if (0 != 0) 
#line 737 
                tmp_27 = ((((*((__be32 *)(& (g + 1U)->match_criteria) + 1U) << 24) | ((*((__be32 *)(& (g + 1U)->match_criteria) + 1U) << 8) & 16711680U)) | ((*((__be32 *)(& (g + 1U)->match_criteria) + 1U) >> 8) & 65280U)) | (*((__be32 *)(& (g + 1U)->match_criteria) + 1U) >> 24)) | 65535U;
    else {
      __u32 tmp_26;
      
#line 737 
      tmp_26 = __fswab32(*((__be32 *)(& (g + 1U)->match_criteria) + 1U));
      
#line 737 
      tmp_27 = tmp_26 | 65535U;
    }
    
#line 737 
    tmp_28 = __fswab32(tmp_27);
    
#line 737 
    *((__be32 *)(& (g + 1U)->match_criteria) + 1U) = tmp_28;
  }
  
#line 740 
  (g + 2U)->log_sz = (unsigned char)0U;
  
#line 742 
  (g + 3U)->log_sz = (unsigned char)14U;
  
#line 743 
  (g + 3U)->match_criteria_enable = (unsigned char)1U;
  
#line 744 
  dmac = (u8 *)(& (g + 3U)->match_criteria) + 8U;
  
#line 746 
  memset((void *)dmac,255,6UL);
  {
    
#line 747 
    bool __cond_2 = (_Bool)0;
    
#line 747 
    if ((int)__cond_2 != 0) 
#line 747 
                            __compiletime_assert_748(); else ;
  }
  
#line 747 
  if (0 != 0) {
    unsigned int tmp_32;
    unsigned int tmp_34;
    
#line 747 
    if (0 != 0) 
#line 747 
                tmp_32 = ((((((*((__be32 *)(& (g + 3U)->match_criteria) + 1U) << 24) | ((*((__be32 *)(& (g + 3U)->match_criteria) + 1U) << 8) & 16711680U)) | ((*((__be32 *)(& (g + 3U)->match_criteria) + 1U) >> 8) & 65280U)) | (*((__be32 *)(& (g + 3U)->match_criteria) + 1U) >> 24)) >> 8) & 65280U) | 4294901760U;
    else {
      __u32 tmp_31;
      
#line 747 
      tmp_31 = __fswab32(*((__be32 *)(& (g + 3U)->match_criteria) + 1U));
      
#line 747 
      tmp_32 = ((tmp_31 >> 8) & 65280U) | 4294901760U;
    }
    
#line 747 
    if (0 != 0) 
#line 747 
                tmp_34 = ((((*((__be32 *)(& (g + 3U)->match_criteria) + 1U) << 24) | ((*((__be32 *)(& (g + 3U)->match_criteria) + 1U) << 8) & 16711680U)) | ((*((__be32 *)(& (g + 3U)->match_criteria) + 1U) >> 8) & 65280U)) | (*((__be32 *)(& (g + 3U)->match_criteria) + 1U) >> 24)) >> 24;
    else {
      __u32 tmp_33;
      
#line 747 
      tmp_33 = __fswab32(*((__be32 *)(& (g + 3U)->match_criteria) + 1U));
      
#line 747 
      tmp_34 = tmp_33 >> 24;
    }
    
#line 747 
    *((__be32 *)(& (g + 3U)->match_criteria) + 1U) = tmp_32 | tmp_34;
  }
  else {
    __u32 tmp_37;
    unsigned int tmp_36;
    
#line 747 
    if (0 != 0) 
#line 747 
                tmp_36 = ((((*((__be32 *)(& (g + 3U)->match_criteria) + 1U) << 24) | ((*((__be32 *)(& (g + 3U)->match_criteria) + 1U) << 8) & 16711680U)) | ((*((__be32 *)(& (g + 3U)->match_criteria) + 1U) >> 8) & 65280U)) | (*((__be32 *)(& (g + 3U)->match_criteria) + 1U) >> 24)) | 65535U;
    else {
      __u32 tmp_35;
      
#line 747 
      tmp_35 = __fswab32(*((__be32 *)(& (g + 3U)->match_criteria) + 1U));
      
#line 747 
      tmp_36 = tmp_35 | 65535U;
    }
    
#line 747 
    tmp_37 = __fswab32(tmp_36);
    
#line 747 
    *((__be32 *)(& (g + 3U)->match_criteria) + 1U) = tmp_37;
  }
  {
    
#line 749 
    bool __cond_3 = (_Bool)0;
    
#line 749 
    if ((int)__cond_3 != 0) 
#line 749 
                            __compiletime_assert_750(); else ;
  }
  
#line 749 
  if (0 != 0) {
    unsigned int tmp_41;
    unsigned int tmp_43;
    unsigned int tmp_45;
    
#line 749 
    if (0 != 0) 
#line 749 
                tmp_41 = ((((*((__be32 *)(& (g + 3U)->match_criteria) + 4U) << 24) | ((*((__be32 *)(& (g + 3U)->match_criteria) + 4U) << 8) & 16711680U)) | ((*((__be32 *)(& (g + 3U)->match_criteria) + 4U) >> 8) & 65280U)) | (*((__be32 *)(& (g + 3U)->match_criteria) + 4U) >> 24)) << 24;
    else {
      __u32 tmp_40;
      
#line 749 
      tmp_40 = __fswab32(*((__be32 *)(& (g + 3U)->match_criteria) + 4U));
      
#line 749 
      tmp_41 = tmp_40 << 24;
    }
    
#line 749 
    if (0 != 0) 
#line 749 
                tmp_43 = (((((*((__be32 *)(& (g + 3U)->match_criteria) + 4U) << 24) | ((*((__be32 *)(& (g + 3U)->match_criteria) + 4U) << 8) & 16711680U)) | ((*((__be32 *)(& (g + 3U)->match_criteria) + 4U) >> 8) & 65280U)) | (*((__be32 *)(& (g + 3U)->match_criteria) + 4U) >> 24)) << 8) & 16711680U;
    else {
      __u32 tmp_42;
      
#line 749 
      tmp_42 = __fswab32(*((__be32 *)(& (g + 3U)->match_criteria) + 4U));
      
#line 749 
      tmp_43 = (tmp_42 << 8) & 16711680U;
    }
    
#line 749 
    if (0 != 0) 
#line 749 
                tmp_45 = (((((*((__be32 *)(& (g + 3U)->match_criteria) + 4U) << 24) | ((*((__be32 *)(& (g + 3U)->match_criteria) + 4U) << 8) & 16711680U)) | ((*((__be32 *)(& (g + 3U)->match_criteria) + 4U) >> 8) & 65280U)) | (*((__be32 *)(& (g + 3U)->match_criteria) + 4U) >> 24)) >> 8) & 65280U;
    else {
      __u32 tmp_44;
      
#line 749 
      tmp_44 = __fswab32(*((__be32 *)(& (g + 3U)->match_criteria) + 4U));
      
#line 749 
      tmp_45 = (tmp_44 >> 8) & 65280U;
    }
    
#line 749 
    *((__be32 *)(& (g + 3U)->match_criteria) + 4U) = ((tmp_41 | tmp_43) | tmp_45) | 255U;
  }
  else {
    __u32 tmp_48;
    unsigned int tmp_47;
    
#line 749 
    if (0 != 0) 
#line 749 
                tmp_47 = ((((*((__be32 *)(& (g + 3U)->match_criteria) + 4U) << 24) | ((*((__be32 *)(& (g + 3U)->match_criteria) + 4U) << 8) & 16711680U)) | ((*((__be32 *)(& (g + 3U)->match_criteria) + 4U) >> 8) & 65280U)) | (*((__be32 *)(& (g + 3U)->match_criteria) + 4U) >> 24)) | 4278190080U;
    else {
      __u32 tmp_46;
      
#line 749 
      tmp_46 = __fswab32(*((__be32 *)(& (g + 3U)->match_criteria) + 4U));
      
#line 749 
      tmp_47 = tmp_46 | 4278190080U;
    }
    
#line 749 
    tmp_48 = __fswab32(tmp_47);
    
#line 749 
    *((__be32 *)(& (g + 3U)->match_criteria) + 4U) = tmp_48;
  }
  
#line 752 
  (g + 4U)->log_sz = (unsigned char)13U;
  
#line 753 
  (g + 4U)->match_criteria_enable = (unsigned char)1U;
  
#line 754 
  dmac = (u8 *)(& (g + 4U)->match_criteria) + 8U;
  
#line 756 
  memset((void *)dmac,255,6UL);
  {
    
#line 757 
    bool __cond_4 = (_Bool)0;
    
#line 757 
    if ((int)__cond_4 != 0) 
#line 757 
                            __compiletime_assert_758(); else ;
  }
  
#line 757 
  if (0 != 0) {
    unsigned int tmp_52;
    unsigned int tmp_54;
    
#line 757 
    if (0 != 0) 
#line 757 
                tmp_52 = ((((((*((__be32 *)(& (g + 4U)->match_criteria) + 1U) << 24) | ((*((__be32 *)(& (g + 4U)->match_criteria) + 1U) << 8) & 16711680U)) | ((*((__be32 *)(& (g + 4U)->match_criteria) + 1U) >> 8) & 65280U)) | (*((__be32 *)(& (g + 4U)->match_criteria) + 1U) >> 24)) >> 8) & 65280U) | 4294901760U;
    else {
      __u32 tmp_51;
      
#line 757 
      tmp_51 = __fswab32(*((__be32 *)(& (g + 4U)->match_criteria) + 1U));
      
#line 757 
      tmp_52 = ((tmp_51 >> 8) & 65280U) | 4294901760U;
    }
    
#line 757 
    if (0 != 0) 
#line 757 
                tmp_54 = ((((*((__be32 *)(& (g + 4U)->match_criteria) + 1U) << 24) | ((*((__be32 *)(& (g + 4U)->match_criteria) + 1U) << 8) & 16711680U)) | ((*((__be32 *)(& (g + 4U)->match_criteria) + 1U) >> 8) & 65280U)) | (*((__be32 *)(& (g + 4U)->match_criteria) + 1U) >> 24)) >> 24;
    else {
      __u32 tmp_53;
      
#line 757 
      tmp_53 = __fswab32(*((__be32 *)(& (g + 4U)->match_criteria) + 1U));
      
#line 757 
      tmp_54 = tmp_53 >> 24;
    }
    
#line 757 
    *((__be32 *)(& (g + 4U)->match_criteria) + 1U) = tmp_52 | tmp_54;
  }
  else {
    __u32 tmp_57;
    unsigned int tmp_56;
    
#line 757 
    if (0 != 0) 
#line 757 
                tmp_56 = ((((*((__be32 *)(& (g + 4U)->match_criteria) + 1U) << 24) | ((*((__be32 *)(& (g + 4U)->match_criteria) + 1U) << 8) & 16711680U)) | ((*((__be32 *)(& (g + 4U)->match_criteria) + 1U) >> 8) & 65280U)) | (*((__be32 *)(& (g + 4U)->match_criteria) + 1U) >> 24)) | 65535U;
    else {
      __u32 tmp_55;
      
#line 757 
      tmp_55 = __fswab32(*((__be32 *)(& (g + 4U)->match_criteria) + 1U));
      
#line 757 
      tmp_56 = tmp_55 | 65535U;
    }
    
#line 757 
    tmp_57 = __fswab32(tmp_56);
    
#line 757 
    *((__be32 *)(& (g + 4U)->match_criteria) + 1U) = tmp_57;
  }
  
#line 760 
  (g + 5U)->log_sz = (unsigned char)11U;
  
#line 761 
  (g + 5U)->match_criteria_enable = (unsigned char)1U;
  
#line 762 
  dmac = (u8 *)(& (g + 5U)->match_criteria) + 8U;
  
#line 764 
  memset((void *)dmac,255,6UL);
  
#line 766 
  (g + 6U)->log_sz = (unsigned char)2U;
  
#line 767 
  (g + 6U)->match_criteria_enable = (unsigned char)1U;
  
#line 768 
  dmac = (u8 *)(& (g + 6U)->match_criteria) + 8U;
  
#line 770 
  *dmac = (unsigned char)1U;
  {
    
#line 771 
    bool __cond_5 = (_Bool)0;
    
#line 771 
    if ((int)__cond_5 != 0) 
#line 771 
                            __compiletime_assert_772(); else ;
  }
  
#line 771 
  if (0 != 0) {
    unsigned int tmp_61;
    unsigned int tmp_63;
    
#line 771 
    if (0 != 0) 
#line 771 
                tmp_61 = ((((((*((__be32 *)(& (g + 6U)->match_criteria) + 1U) << 24) | ((*((__be32 *)(& (g + 6U)->match_criteria) + 1U) << 8) & 16711680U)) | ((*((__be32 *)(& (g + 6U)->match_criteria) + 1U) >> 8) & 65280U)) | (*((__be32 *)(& (g + 6U)->match_criteria) + 1U) >> 24)) >> 8) & 65280U) | 4294901760U;
    else {
      __u32 tmp_60;
      
#line 771 
      tmp_60 = __fswab32(*((__be32 *)(& (g + 6U)->match_criteria) + 1U));
      
#line 771 
      tmp_61 = ((tmp_60 >> 8) & 65280U) | 4294901760U;
    }
    
#line 771 
    if (0 != 0) 
#line 771 
                tmp_63 = ((((*((__be32 *)(& (g + 6U)->match_criteria) + 1U) << 24) | ((*((__be32 *)(& (g + 6U)->match_criteria) + 1U) << 8) & 16711680U)) | ((*((__be32 *)(& (g + 6U)->match_criteria) + 1U) >> 8) & 65280U)) | (*((__be32 *)(& (g + 6U)->match_criteria) + 1U) >> 24)) >> 24;
    else {
      __u32 tmp_62;
      
#line 771 
      tmp_62 = __fswab32(*((__be32 *)(& (g + 6U)->match_criteria) + 1U));
      
#line 771 
      tmp_63 = tmp_62 >> 24;
    }
    
#line 771 
    *((__be32 *)(& (g + 6U)->match_criteria) + 1U) = tmp_61 | tmp_63;
  }
  else {
    __u32 tmp_66;
    unsigned int tmp_65;
    
#line 771 
    if (0 != 0) 
#line 771 
                tmp_65 = ((((*((__be32 *)(& (g + 6U)->match_criteria) + 1U) << 24) | ((*((__be32 *)(& (g + 6U)->match_criteria) + 1U) << 8) & 16711680U)) | ((*((__be32 *)(& (g + 6U)->match_criteria) + 1U) >> 8) & 65280U)) | (*((__be32 *)(& (g + 6U)->match_criteria) + 1U) >> 24)) | 65535U;
    else {
      __u32 tmp_64;
      
#line 771 
      tmp_64 = __fswab32(*((__be32 *)(& (g + 6U)->match_criteria) + 1U));
      
#line 771 
      tmp_65 = tmp_64 | 65535U;
    }
    
#line 771 
    tmp_66 = __fswab32(tmp_65);
    
#line 771 
    *((__be32 *)(& (g + 6U)->match_criteria) + 1U) = tmp_66;
  }
  {
    
#line 773 
    bool __cond_6 = (_Bool)0;
    
#line 773 
    if ((int)__cond_6 != 0) 
#line 773 
                            __compiletime_assert_774(); else ;
  }
  
#line 773 
  if (0 != 0) {
    unsigned int tmp_70;
    unsigned int tmp_72;
    unsigned int tmp_74;
    
#line 773 
    if (0 != 0) 
#line 773 
                tmp_70 = ((((*((__be32 *)(& (g + 6U)->match_criteria) + 4U) << 24) | ((*((__be32 *)(& (g + 6U)->match_criteria) + 4U) << 8) & 16711680U)) | ((*((__be32 *)(& (g + 6U)->match_criteria) + 4U) >> 8) & 65280U)) | (*((__be32 *)(& (g + 6U)->match_criteria) + 4U) >> 24)) << 24;
    else {
      __u32 tmp_69;
      
#line 773 
      tmp_69 = __fswab32(*((__be32 *)(& (g + 6U)->match_criteria) + 4U));
      
#line 773 
      tmp_70 = tmp_69 << 24;
    }
    
#line 773 
    if (0 != 0) 
#line 773 
                tmp_72 = (((((*((__be32 *)(& (g + 6U)->match_criteria) + 4U) << 24) | ((*((__be32 *)(& (g + 6U)->match_criteria) + 4U) << 8) & 16711680U)) | ((*((__be32 *)(& (g + 6U)->match_criteria) + 4U) >> 8) & 65280U)) | (*((__be32 *)(& (g + 6U)->match_criteria) + 4U) >> 24)) << 8) & 16711680U;
    else {
      __u32 tmp_71;
      
#line 773 
      tmp_71 = __fswab32(*((__be32 *)(& (g + 6U)->match_criteria) + 4U));
      
#line 773 
      tmp_72 = (tmp_71 << 8) & 16711680U;
    }
    
#line 773 
    if (0 != 0) 
#line 773 
                tmp_74 = (((((*((__be32 *)(& (g + 6U)->match_criteria) + 4U) << 24) | ((*((__be32 *)(& (g + 6U)->match_criteria) + 4U) << 8) & 16711680U)) | ((*((__be32 *)(& (g + 6U)->match_criteria) + 4U) >> 8) & 65280U)) | (*((__be32 *)(& (g + 6U)->match_criteria) + 4U) >> 24)) >> 8) & 65280U;
    else {
      __u32 tmp_73;
      
#line 773 
      tmp_73 = __fswab32(*((__be32 *)(& (g + 6U)->match_criteria) + 4U));
      
#line 773 
      tmp_74 = (tmp_73 >> 8) & 65280U;
    }
    
#line 773 
    *((__be32 *)(& (g + 6U)->match_criteria) + 4U) = ((tmp_70 | tmp_72) | tmp_74) | 255U;
  }
  else {
    __u32 tmp_77;
    unsigned int tmp_76;
    
#line 773 
    if (0 != 0) 
#line 773 
                tmp_76 = ((((*((__be32 *)(& (g + 6U)->match_criteria) + 4U) << 24) | ((*((__be32 *)(& (g + 6U)->match_criteria) + 4U) << 8) & 16711680U)) | ((*((__be32 *)(& (g + 6U)->match_criteria) + 4U) >> 8) & 65280U)) | (*((__be32 *)(& (g + 6U)->match_criteria) + 4U) >> 24)) | 4278190080U;
    else {
      __u32 tmp_75;
      
#line 773 
      tmp_75 = __fswab32(*((__be32 *)(& (g + 6U)->match_criteria) + 4U));
      
#line 773 
      tmp_76 = tmp_75 | 4278190080U;
    }
    
#line 773 
    tmp_77 = __fswab32(tmp_76);
    
#line 773 
    *((__be32 *)(& (g + 6U)->match_criteria) + 4U) = tmp_77;
  }
  
#line 776 
  (g + 7U)->log_sz = (unsigned char)1U;
  
#line 777 
  (g + 7U)->match_criteria_enable = (unsigned char)1U;
  
#line 778 
  dmac = (u8 *)(& (g + 7U)->match_criteria) + 8U;
  
#line 780 
  *dmac = (unsigned char)1U;
  {
    
#line 781 
    bool __cond_7 = (_Bool)0;
    
#line 781 
    if ((int)__cond_7 != 0) 
#line 781 
                            __compiletime_assert_782(); else ;
  }
  
#line 781 
  if (0 != 0) {
    unsigned int tmp_81;
    unsigned int tmp_83;
    
#line 781 
    if (0 != 0) 
#line 781 
                tmp_81 = ((((((*((__be32 *)(& (g + 7U)->match_criteria) + 1U) << 24) | ((*((__be32 *)(& (g + 7U)->match_criteria) + 1U) << 8) & 16711680U)) | ((*((__be32 *)(& (g + 7U)->match_criteria) + 1U) >> 8) & 65280U)) | (*((__be32 *)(& (g + 7U)->match_criteria) + 1U) >> 24)) >> 8) & 65280U) | 4294901760U;
    else {
      __u32 tmp_80;
      
#line 781 
      tmp_80 = __fswab32(*((__be32 *)(& (g + 7U)->match_criteria) + 1U));
      
#line 781 
      tmp_81 = ((tmp_80 >> 8) & 65280U) | 4294901760U;
    }
    
#line 781 
    if (0 != 0) 
#line 781 
                tmp_83 = ((((*((__be32 *)(& (g + 7U)->match_criteria) + 1U) << 24) | ((*((__be32 *)(& (g + 7U)->match_criteria) + 1U) << 8) & 16711680U)) | ((*((__be32 *)(& (g + 7U)->match_criteria) + 1U) >> 8) & 65280U)) | (*((__be32 *)(& (g + 7U)->match_criteria) + 1U) >> 24)) >> 24;
    else {
      __u32 tmp_82;
      
#line 781 
      tmp_82 = __fswab32(*((__be32 *)(& (g + 7U)->match_criteria) + 1U));
      
#line 781 
      tmp_83 = tmp_82 >> 24;
    }
    
#line 781 
    *((__be32 *)(& (g + 7U)->match_criteria) + 1U) = tmp_81 | tmp_83;
  }
  else {
    __u32 tmp_86;
    unsigned int tmp_85;
    
#line 781 
    if (0 != 0) 
#line 781 
                tmp_85 = ((((*((__be32 *)(& (g + 7U)->match_criteria) + 1U) << 24) | ((*((__be32 *)(& (g + 7U)->match_criteria) + 1U) << 8) & 16711680U)) | ((*((__be32 *)(& (g + 7U)->match_criteria) + 1U) >> 8) & 65280U)) | (*((__be32 *)(& (g + 7U)->match_criteria) + 1U) >> 24)) | 65535U;
    else {
      __u32 tmp_84;
      
#line 781 
      tmp_84 = __fswab32(*((__be32 *)(& (g + 7U)->match_criteria) + 1U));
      
#line 781 
      tmp_85 = tmp_84 | 65535U;
    }
    
#line 781 
    tmp_86 = __fswab32(tmp_85);
    
#line 781 
    *((__be32 *)(& (g + 7U)->match_criteria) + 1U) = tmp_86;
  }
  
#line 784 
  (g + 8U)->log_sz = (unsigned char)0U;
  
#line 785 
  (g + 8U)->match_criteria_enable = (unsigned char)1U;
  
#line 786 
  dmac = (u8 *)(& (g + 8U)->match_criteria) + 8U;
  
#line 788 
  *dmac = (unsigned char)1U;
  
#line 789 
  priv->ft.main = mlx5_create_flow_table(priv->mdev,(unsigned char)1,(unsigned char)0,(unsigned short)9,g);
  
#line 792 
  kfree((void const *)g);
  
#line 794 
  if (priv->ft.main != (void *)0) 
#line 794 
                                  tmp_87 = 0; else 
#line 794 
                                                   tmp_87 = -12;
  
#line 794 
  __retres = tmp_87;
  return_label: 
#line 794 
                return __retres;
}


#line 797  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_flow_table.c"
static void mlx5e_destroy_main_flow_table(struct mlx5e_priv *priv)
{
  
#line 799 
  mlx5_destroy_flow_table(priv->ft.main);
  
#line 800 
  return;
}


#line 812 
void __compiletime_assert_813(void);


#line 814 
void __compiletime_assert_815(void);


#line 820 
void __compiletime_assert_821(void);


#line 802  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_flow_table.c"
static int mlx5e_create_vlan_flow_table(struct mlx5e_priv *priv)
{
  int __retres;
  struct mlx5_flow_table_group *g;
  int tmp_37;
  
#line 806 
  g = (struct mlx5_flow_table_group *)kcalloc_0(2UL,516UL,208U);
  
#line 807 
  if (g == (struct mlx5_flow_table_group *)0) {
    
#line 808 
    __retres = -12;
    
#line 808 
    goto return_label;
  }
  else ;
  
#line 810 
  g->log_sz = (unsigned char)12U;
  
#line 811 
  g->match_criteria_enable = (unsigned char)1U;
  {
    
#line 812 
    bool __cond = (_Bool)0;
    
#line 812 
    if ((int)__cond != 0) 
#line 812 
                          __compiletime_assert_813(); else ;
  }
  
#line 812 
  if (0 != 0) {
    unsigned int tmp_3;
    unsigned int tmp_5;
    unsigned int tmp_7;
    unsigned int tmp_9;
    
#line 812 
    if (0 != 0) 
#line 812 
                tmp_3 = ((((*((__be32 *)(& g->match_criteria) + 4U) << 24) | ((*((__be32 *)(& g->match_criteria) + 4U) << 8) & 16711680U)) | ((*((__be32 *)(& g->match_criteria) + 4U) >> 8) & 65280U)) | (*((__be32 *)(& g->match_criteria) + 4U) >> 24)) << 24;
    else {
      __u32 tmp_2;
      
#line 812 
      tmp_2 = __fswab32(*((__be32 *)(& g->match_criteria) + 4U));
      
#line 812 
      tmp_3 = tmp_2 << 24;
    }
    
#line 812 
    if (0 != 0) 
#line 812 
                tmp_5 = ((((((*((__be32 *)(& g->match_criteria) + 4U) << 24) | ((*((__be32 *)(& g->match_criteria) + 4U) << 8) & 16711680U)) | ((*((__be32 *)(& g->match_criteria) + 4U) >> 8) & 65280U)) | (*((__be32 *)(& g->match_criteria) + 4U) >> 24)) << 8) & 8323072U) | 8388608U;
    else {
      __u32 tmp_4;
      
#line 812 
      tmp_4 = __fswab32(*((__be32 *)(& g->match_criteria) + 4U));
      
#line 812 
      tmp_5 = ((tmp_4 << 8) & 8323072U) | 8388608U;
    }
    
#line 812 
    if (0 != 0) 
#line 812 
                tmp_7 = (((((*((__be32 *)(& g->match_criteria) + 4U) << 24) | ((*((__be32 *)(& g->match_criteria) + 4U) << 8) & 16711680U)) | ((*((__be32 *)(& g->match_criteria) + 4U) >> 8) & 65280U)) | (*((__be32 *)(& g->match_criteria) + 4U) >> 24)) >> 8) & 65280U;
    else {
      __u32 tmp_6;
      
#line 812 
      tmp_6 = __fswab32(*((__be32 *)(& g->match_criteria) + 4U));
      
#line 812 
      tmp_7 = (tmp_6 >> 8) & 65280U;
    }
    
#line 812 
    if (0 != 0) 
#line 812 
                tmp_9 = ((((*((__be32 *)(& g->match_criteria) + 4U) << 24) | ((*((__be32 *)(& g->match_criteria) + 4U) << 8) & 16711680U)) | ((*((__be32 *)(& g->match_criteria) + 4U) >> 8) & 65280U)) | (*((__be32 *)(& g->match_criteria) + 4U) >> 24)) >> 24;
    else {
      __u32 tmp_8;
      
#line 812 
      tmp_8 = __fswab32(*((__be32 *)(& g->match_criteria) + 4U));
      
#line 812 
      tmp_9 = tmp_8 >> 24;
    }
    
#line 812 
    *((__be32 *)(& g->match_criteria) + 4U) = ((tmp_3 | tmp_5) | tmp_7) | tmp_9;
  }
  else {
    __u32 tmp_12;
    unsigned int tmp_11;
    
#line 812 
    if (0 != 0) 
#line 812 
                tmp_11 = ((((*((__be32 *)(& g->match_criteria) + 4U) << 24) | ((*((__be32 *)(& g->match_criteria) + 4U) << 8) & 16711680U)) | ((*((__be32 *)(& g->match_criteria) + 4U) >> 8) & 65280U)) | (*((__be32 *)(& g->match_criteria) + 4U) >> 24)) | 32768U;
    else {
      __u32 tmp_10;
      
#line 812 
      tmp_10 = __fswab32(*((__be32 *)(& g->match_criteria) + 4U));
      
#line 812 
      tmp_11 = tmp_10 | 32768U;
    }
    
#line 812 
    tmp_12 = __fswab32(tmp_11);
    
#line 812 
    *((__be32 *)(& g->match_criteria) + 4U) = tmp_12;
  }
  {
    
#line 814 
    bool __cond_0 = (_Bool)0;
    
#line 814 
    if ((int)__cond_0 != 0) 
#line 814 
                            __compiletime_assert_815(); else ;
  }
  
#line 814 
  if (0 != 0) {
    unsigned int tmp_16;
    unsigned int tmp_18;
    unsigned int tmp_20;
    
#line 814 
    if (0 != 0) 
#line 814 
                tmp_16 = ((((((*((__be32 *)(& g->match_criteria) + 3U) << 24) | ((*((__be32 *)(& g->match_criteria) + 3U) << 8) & 16711680U)) | ((*((__be32 *)(& g->match_criteria) + 3U) >> 8) & 65280U)) | (*((__be32 *)(& g->match_criteria) + 3U) >> 24)) << 8) & 15728640U) | 4279173120U;
    else {
      __u32 tmp_15;
      
#line 814 
      tmp_15 = __fswab32(*((__be32 *)(& g->match_criteria) + 3U));
      
#line 814 
      tmp_16 = ((tmp_15 << 8) & 15728640U) | 4279173120U;
    }
    
#line 814 
    if (0 != 0) 
#line 814 
                tmp_18 = (((((*((__be32 *)(& g->match_criteria) + 3U) << 24) | ((*((__be32 *)(& g->match_criteria) + 3U) << 8) & 16711680U)) | ((*((__be32 *)(& g->match_criteria) + 3U) >> 8) & 65280U)) | (*((__be32 *)(& g->match_criteria) + 3U) >> 24)) >> 8) & 65280U;
    else {
      __u32 tmp_17;
      
#line 814 
      tmp_17 = __fswab32(*((__be32 *)(& g->match_criteria) + 3U));
      
#line 814 
      tmp_18 = (tmp_17 >> 8) & 65280U;
    }
    
#line 814 
    if (0 != 0) 
#line 814 
                tmp_20 = ((((*((__be32 *)(& g->match_criteria) + 3U) << 24) | ((*((__be32 *)(& g->match_criteria) + 3U) << 8) & 16711680U)) | ((*((__be32 *)(& g->match_criteria) + 3U) >> 8) & 65280U)) | (*((__be32 *)(& g->match_criteria) + 3U) >> 24)) >> 24;
    else {
      __u32 tmp_19;
      
#line 814 
      tmp_19 = __fswab32(*((__be32 *)(& g->match_criteria) + 3U));
      
#line 814 
      tmp_20 = tmp_19 >> 24;
    }
    
#line 814 
    *((__be32 *)(& g->match_criteria) + 3U) = (tmp_16 | tmp_18) | tmp_20;
  }
  else {
    __u32 tmp_23;
    unsigned int tmp_22;
    
#line 814 
    if (0 != 0) 
#line 814 
                tmp_22 = ((((*((__be32 *)(& g->match_criteria) + 3U) << 24) | ((*((__be32 *)(& g->match_criteria) + 3U) << 8) & 16711680U)) | ((*((__be32 *)(& g->match_criteria) + 3U) >> 8) & 65280U)) | (*((__be32 *)(& g->match_criteria) + 3U) >> 24)) | 4095U;
    else {
      __u32 tmp_21;
      
#line 814 
      tmp_21 = __fswab32(*((__be32 *)(& g->match_criteria) + 3U));
      
#line 814 
      tmp_22 = tmp_21 | 4095U;
    }
    
#line 814 
    tmp_23 = __fswab32(tmp_22);
    
#line 814 
    *((__be32 *)(& g->match_criteria) + 3U) = tmp_23;
  }
  
#line 818 
  (g + 1U)->log_sz = (unsigned char)1U;
  
#line 819 
  (g + 1U)->match_criteria_enable = (unsigned char)1U;
  {
    
#line 820 
    bool __cond_1 = (_Bool)0;
    
#line 820 
    if ((int)__cond_1 != 0) 
#line 820 
                            __compiletime_assert_821(); else ;
  }
  
#line 820 
  if (0 != 0) {
    unsigned int tmp_27;
    unsigned int tmp_29;
    unsigned int tmp_31;
    unsigned int tmp_33;
    
#line 820 
    if (0 != 0) 
#line 820 
                tmp_27 = ((((*((__be32 *)(& (g + 1U)->match_criteria) + 4U) << 24) | ((*((__be32 *)(& (g + 1U)->match_criteria) + 4U) << 8) & 16711680U)) | ((*((__be32 *)(& (g + 1U)->match_criteria) + 4U) >> 8) & 65280U)) | (*((__be32 *)(& (g + 1U)->match_criteria) + 4U) >> 24)) << 24;
    else {
      __u32 tmp_26;
      
#line 820 
      tmp_26 = __fswab32(*((__be32 *)(& (g + 1U)->match_criteria) + 4U));
      
#line 820 
      tmp_27 = tmp_26 << 24;
    }
    
#line 820 
    if (0 != 0) 
#line 820 
                tmp_29 = ((((((*((__be32 *)(& (g + 1U)->match_criteria) + 4U) << 24) | ((*((__be32 *)(& (g + 1U)->match_criteria) + 4U) << 8) & 16711680U)) | ((*((__be32 *)(& (g + 1U)->match_criteria) + 4U) >> 8) & 65280U)) | (*((__be32 *)(& (g + 1U)->match_criteria) + 4U) >> 24)) << 8) & 8323072U) | 8388608U;
    else {
      __u32 tmp_28;
      
#line 820 
      tmp_28 = __fswab32(*((__be32 *)(& (g + 1U)->match_criteria) + 4U));
      
#line 820 
      tmp_29 = ((tmp_28 << 8) & 8323072U) | 8388608U;
    }
    
#line 820 
    if (0 != 0) 
#line 820 
                tmp_31 = (((((*((__be32 *)(& (g + 1U)->match_criteria) + 4U) << 24) | ((*((__be32 *)(& (g + 1U)->match_criteria) + 4U) << 8) & 16711680U)) | ((*((__be32 *)(& (g + 1U)->match_criteria) + 4U) >> 8) & 65280U)) | (*((__be32 *)(& (g + 1U)->match_criteria) + 4U) >> 24)) >> 8) & 65280U;
    else {
      __u32 tmp_30;
      
#line 820 
      tmp_30 = __fswab32(*((__be32 *)(& (g + 1U)->match_criteria) + 4U));
      
#line 820 
      tmp_31 = (tmp_30 >> 8) & 65280U;
    }
    
#line 820 
    if (0 != 0) 
#line 820 
                tmp_33 = ((((*((__be32 *)(& (g + 1U)->match_criteria) + 4U) << 24) | ((*((__be32 *)(& (g + 1U)->match_criteria) + 4U) << 8) & 16711680U)) | ((*((__be32 *)(& (g + 1U)->match_criteria) + 4U) >> 8) & 65280U)) | (*((__be32 *)(& (g + 1U)->match_criteria) + 4U) >> 24)) >> 24;
    else {
      __u32 tmp_32;
      
#line 820 
      tmp_32 = __fswab32(*((__be32 *)(& (g + 1U)->match_criteria) + 4U));
      
#line 820 
      tmp_33 = tmp_32 >> 24;
    }
    
#line 820 
    *((__be32 *)(& (g + 1U)->match_criteria) + 4U) = ((tmp_27 | tmp_29) | tmp_31) | tmp_33;
  }
  else {
    __u32 tmp_36;
    unsigned int tmp_35;
    
#line 820 
    if (0 != 0) 
#line 820 
                tmp_35 = ((((*((__be32 *)(& (g + 1U)->match_criteria) + 4U) << 24) | ((*((__be32 *)(& (g + 1U)->match_criteria) + 4U) << 8) & 16711680U)) | ((*((__be32 *)(& (g + 1U)->match_criteria) + 4U) >> 8) & 65280U)) | (*((__be32 *)(& (g + 1U)->match_criteria) + 4U) >> 24)) | 32768U;
    else {
      __u32 tmp_34;
      
#line 820 
      tmp_34 = __fswab32(*((__be32 *)(& (g + 1U)->match_criteria) + 4U));
      
#line 820 
      tmp_35 = tmp_34 | 32768U;
    }
    
#line 820 
    tmp_36 = __fswab32(tmp_35);
    
#line 820 
    *((__be32 *)(& (g + 1U)->match_criteria) + 4U) = tmp_36;
  }
  
#line 823 
  priv->ft.vlan = mlx5_create_flow_table(priv->mdev,(unsigned char)0,(unsigned char)0,(unsigned short)2,g);
  
#line 827 
  kfree((void const *)g);
  
#line 828 
  if (priv->ft.vlan != (void *)0) 
#line 828 
                                  tmp_37 = 0; else 
#line 828 
                                                   tmp_37 = -12;
  
#line 828 
  __retres = tmp_37;
  return_label: 
#line 828 
                return __retres;
}


#line 831  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_flow_table.c"
static void mlx5e_destroy_vlan_flow_table(struct mlx5e_priv *priv)
{
  
#line 833 
  mlx5_destroy_flow_table(priv->ft.vlan);
  
#line 834 
  return;
}


#line 836  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_flow_table.c"
int mlx5e_open_flow_table(struct mlx5e_priv *priv)
{
  int __retres;
  int err;
  
#line 840 
  err = mlx5e_create_main_flow_table(priv);
  
#line 841 
  if (err != 0) {
    
#line 842 
    __retres = err;
    
#line 842 
    goto return_label;
  }
  else ;
  
#line 844 
  err = mlx5e_create_vlan_flow_table(priv);
  
#line 845 
  if (err != 0) 
#line 846 
                goto err_destroy_main_flow_table; else ;
  
#line 848 
  __retres = 0;
  
#line 848 
  goto return_label;
  err_destroy_main_flow_table: 
#line 850 
  ;
  
#line 851 
  mlx5e_destroy_main_flow_table(priv);
  
#line 853 
  __retres = err;
  return_label: 
#line 853 
                return __retres;
}


#line 856  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_flow_table.c"
void mlx5e_close_flow_table(struct mlx5e_priv *priv)
{
  
#line 858 
  mlx5e_destroy_vlan_flow_table(priv);
  
#line 859 
  mlx5e_destroy_main_flow_table(priv);
  
#line 860 
  return;
}


#line 425  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_en_flow_table.c.aux"
static void *kcalloc_0(size_t n, size_t size, gfp_t flags)
{
  void *tmp;
  
#line 428 
  tmp = ldv_kcalloc(n,size,flags);
  
#line 428 
  return tmp;
}


#line 432  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_en_flow_table.c.aux"
static void *kzalloc_3(size_t size, gfp_t flags)
{
  void *tmp;
  
#line 435 
  tmp = ldv_kzalloc(size,flags);
  
#line 435 
  return tmp;
}


#line 719  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_en_flow_table.c.aux"
static void ldv_spin_lock_bh_70(spinlock_t *lock)
{
  
#line 723 
  ldv_spin_model_lock((char *)"addr_list_lock_of_net_device");
  
#line 725 
  spin_lock_bh(lock);
  
#line 726 
  return;
}


#line 739  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_en_flow_table.c.aux"
static void ldv_spin_unlock_bh_72(spinlock_t *lock)
{
  
#line 743 
  ldv_spin_model_unlock((char *)"addr_list_lock_of_net_device");
  
#line 745 
  spin_unlock_bh(lock);
  
#line 746 
  return;
}


#line 759  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_en_flow_table.c.aux"
static int ldv_mutex_is_locked_74(struct mutex *lock)
{
  int tmp;
  
#line 762 
  tmp = ldv_mutex_model_is_locked(lock,(char *)"state_lock_of_mlx5e_priv");
  
#line 762 
  return tmp;
}


#line 766  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_en_flow_table.c.aux"
static int ldv_mutex_is_locked_75(struct mutex *lock)
{
  int tmp;
  
#line 769 
  tmp = ldv_mutex_model_is_locked(lock,(char *)"state_lock_of_mlx5e_priv");
  
#line 769 
  return tmp;
}


#line 773  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_en_flow_table.c.aux"
static void ldv_mutex_lock_76(struct mutex *ldv_func_arg1)
{
  
#line 777 
  ldv_mutex_model_lock(ldv_func_arg1,(char *)"state_lock_of_mlx5e_priv");
  
#line 778 
  return;
}


#line 781  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_en_flow_table.c.aux"
static void ldv_mutex_unlock_77(struct mutex *ldv_func_arg1)
{
  
#line 785 
  ldv_mutex_model_unlock(ldv_func_arg1,(char *)"state_lock_of_mlx5e_priv");
  
#line 786 
  return;
}


#line 789  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_en_flow_table.c.aux"
static void ldv_mutex_lock_78(struct mutex *ldv_func_arg1)
{
  
#line 793 
  ldv_mutex_model_lock(ldv_func_arg1,(char *)"state_lock_of_mlx5e_priv");
  
#line 794 
  return;
}


#line 797  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_en_flow_table.c.aux"
static void ldv_mutex_unlock_79(struct mutex *ldv_func_arg1)
{
  
#line 801 
  ldv_mutex_model_unlock(ldv_func_arg1,(char *)"state_lock_of_mlx5e_priv");
  
#line 802 
  return;
}


#line 805  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_en_flow_table.c.aux"
static void ldv_mutex_lock_80(struct mutex *ldv_func_arg1)
{
  
#line 809 
  ldv_mutex_model_lock(ldv_func_arg1,(char *)"state_lock_of_mlx5e_priv");
  
#line 810 
  return;
}


#line 813  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_en_flow_table.c.aux"
static void ldv_mutex_unlock_81(struct mutex *ldv_func_arg1)
{
  
#line 817 
  ldv_mutex_model_unlock(ldv_func_arg1,(char *)"state_lock_of_mlx5e_priv");
  
#line 818 
  return;
}


#line 45  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/arch_hweight.h"
__inline static unsigned long __arch_hweight64(__u64 w)
{
  
#line 47 
  unsigned long res = 0UL;
  
#line 48 
  ldv_inline_asm();
  
#line 58 
  return res;
}


#line 78  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bitops.h"
__inline static unsigned long hweight_long(unsigned long w)
{
  unsigned long tmp_0;
  
#line 80 
  if (0 != 0) 
#line 80 
              tmp_0 = (unsigned long)((((unsigned int)((((((((((unsigned long long)w & 1ULL) != 0ULL) + (((unsigned long long)w & 2ULL) != 0ULL)) + (((unsigned long long)w & 4ULL) != 0ULL)) + (((unsigned long long)w & 8ULL) != 0ULL)) + (((unsigned long long)w & 16ULL) != 0ULL)) + (((unsigned long long)w & 32ULL) != 0ULL)) + (((unsigned long long)w & 64ULL) != 0ULL)) + (((unsigned long long)w & 128ULL) != 0ULL)) + (unsigned int)((((((((((unsigned long long)(w >> 8) & 1ULL) != 0ULL) + (((unsigned long long)(w >> 8) & 2ULL) != 0ULL)) + (((unsigned long long)(w >> 8) & 4ULL) != 0ULL)) + (((unsigned long long)(w >> 8) & 8ULL) != 0ULL)) + (((unsigned long long)(w >> 8) & 16ULL) != 0ULL)) + (((unsigned long long)(w >> 8) & 32ULL) != 0ULL)) + (((unsigned long long)(w >> 8) & 64ULL) != 0ULL)) + (((unsigned long long)(w >> 8) & 128ULL) != 0ULL))) + ((unsigned int)((((((((((unsigned long long)(w >> 16) & 1ULL) != 0ULL) + (((unsigned long long)(w >> 16) & 2ULL) != 0ULL)) + (((unsigned long long)(w >> 16) & 4ULL) != 0ULL)) + (((unsigned long long)(w >> 16) & 8ULL) != 0ULL)) + (((unsigned long long)(w >> 16) & 16ULL) != 0ULL)) + (((unsigned long long)(w >> 16) & 32ULL) != 0ULL)) + (((unsigned long long)(w >> 16) & 64ULL) != 0ULL)) + (((unsigned long long)(w >> 16) & 128ULL) != 0ULL)) + (unsigned int)((((((((((unsigned long long)(w >> 24) & 1ULL) != 0ULL) + (((unsigned long long)(w >> 24) & 2ULL) != 0ULL)) + (((unsigned long long)(w >> 24) & 4ULL) != 0ULL)) + (((unsigned long long)(w >> 24) & 8ULL) != 0ULL)) + (((unsigned long long)(w >> 24) & 16ULL) != 0ULL)) + (((unsigned long long)(w >> 24) & 32ULL) != 0ULL)) + (((unsigned long long)(w >> 24) & 64ULL) != 0ULL)) + (((unsigned long long)(w >> 24) & 128ULL) != 0ULL)))) + (((unsigned int)((((((((((unsigned long long)(w >> 32) & 1ULL) != 0ULL) + (((unsigned long long)(w >> 32) & 2ULL) != 0ULL)) + (((unsigned long long)(w >> 32) & 4ULL) != 0ULL)) + (((unsigned long long)(w >> 32) & 8ULL) != 0ULL)) + (((unsigned long long)(w >> 32) & 16ULL) != 0ULL)) + (((unsigned long long)(w >> 32) & 32ULL) != 0ULL)) + (((unsigned long long)(w >> 32) & 64ULL) != 0ULL)) + (((unsigned long long)(w >> 32) & 128ULL) != 0ULL)) + (unsigned int)((((((((((unsigned long long)(w >> 40) & 1ULL) != 0ULL) + (((unsigned long long)(w >> 40) & 2ULL) != 0ULL)) + (((unsigned long long)(w >> 40) & 4ULL) != 0ULL)) + (((unsigned long long)(w >> 40) & 8ULL) != 0ULL)) + (((unsigned long long)(w >> 40) & 16ULL) != 0ULL)) + (((unsigned long long)(w >> 40) & 32ULL) != 0ULL)) + (((unsigned long long)(w >> 40) & 64ULL) != 0ULL)) + (((unsigned long long)(w >> 40) & 128ULL) != 0ULL))) + ((unsigned int)((((((((((unsigned long long)(w >> 48) & 1ULL) != 0ULL) + (((unsigned long long)(w >> 48) & 2ULL) != 0ULL)) + (((unsigned long long)(w >> 48) & 4ULL) != 0ULL)) + (((unsigned long long)(w >> 48) & 8ULL) != 0ULL)) + (((unsigned long long)(w >> 48) & 16ULL) != 0ULL)) + (((unsigned long long)(w >> 48) & 32ULL) != 0ULL)) + (((unsigned long long)(w >> 48) & 64ULL) != 0ULL)) + (((unsigned long long)(w >> 48) & 128ULL) != 0ULL)) + (unsigned int)((((((((((unsigned long long)(w >> 56) & 1ULL) != 0ULL) + (((unsigned long long)(w >> 56) & 2ULL) != 0ULL)) + (((unsigned long long)(w >> 56) & 4ULL) != 0ULL)) + (((unsigned long long)(w >> 56) & 8ULL) != 0ULL)) + (((unsigned long long)(w >> 56) & 16ULL) != 0ULL)) + (((unsigned long long)(w >> 56) & 32ULL) != 0ULL)) + (((unsigned long long)(w >> 56) & 64ULL) != 0ULL)) + (((unsigned long long)(w >> 56) & 128ULL) != 0ULL))))); else 
                                                                    
#line 80 
                                                                    tmp_0 = __arch_hweight64((unsigned long long)w);
  
#line 80 
  return tmp_0;
}


#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/string.h"
char *strncpy(char *, char const *, __kernel_size_t);


#line 112  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bitmap.h"
int __bitmap_weight(unsigned long const *, unsigned int);


#line 298  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bitmap.h"
__inline static int bitmap_weight(unsigned long const *src, unsigned int nbits)
{
  int __retres;
  int tmp_0;
  
#line 300 
  if (0 != 0 && nbits <= 64U) {
    unsigned long tmp;
    
#line 301 
    tmp = hweight_long(*src & (18446744073709551615UL >> (- nbits & 63U)));
    
#line 301 
    __retres = (int)tmp;
    
#line 301 
    goto return_label;
  }
  else ;
  
#line 302 
  tmp_0 = __bitmap_weight(src,nbits);
  
#line 302 
  __retres = tmp_0;
  return_label: 
#line 302 
                return __retres;
}


#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cpumask.h"
extern int nr_cpu_ids;


#line 89 
extern struct cpumask const * const cpu_online_mask;


#line 114  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cpumask.h"
__inline static unsigned int cpumask_check(unsigned int cpu)
{
  {
    bool __warned;
    
#line 117 
    int __ret_warn_once = cpu >= (unsigned int)nr_cpu_ids;
    
#line 117 
    if ((long)(__ret_warn_once != 0) != 0L) {
      int tmp;
      {
        
#line 117 
        int __ret_warn_on = ! __warned;
        
#line 117 
        if ((long)(__ret_warn_on != 0) != 0L) 
#line 117 
                                              warn_slowpath_null("include/linux/cpumask.h",117); else ;
        
#line 117 
        tmp = (long)(__ret_warn_on != 0);
      }
      
#line 117 
      if ((long)tmp != 0L) 
#line 117 
                           __warned = (_Bool)1; else ;
    }
    else ;
    
#line 117 
    long tmp_2 = (long)(__ret_warn_once != 0);
  }
  
#line 119 
  return cpu;
}


#line 209 
unsigned int cpumask_local_spread(unsigned int, int);


#line 270  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cpumask.h"
__inline static void cpumask_set_cpu(unsigned int cpu, struct cpumask *dstp)
{
  unsigned int tmp;
  
#line 272 
  ;
  
#line 272 
  tmp = cpumask_check(cpu);
  
#line 272 
  set_bit((long)tmp,(unsigned long volatile *)(& dstp->bits));
  
#line 273 
  return;
}


#line 474  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cpumask.h"
__inline static unsigned int cpumask_weight(struct cpumask const *srcp)
{
  unsigned int __retres;
  int tmp;
  
#line 476 
  tmp = bitmap_weight((unsigned long const *)(& srcp->bits),(unsigned int)nr_cpu_ids);
  
#line 476 
  __retres = (unsigned int)tmp;
  
#line 476 
  return __retres;
}


#line 659 
bool zalloc_cpumask_var(cpumask_var_t **, gfp_t);


#line 661 
void free_cpumask_var(cpumask_var_t);


#line 310  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_lock_2(spinlock_t *lock)
{
  
#line 312 
  _raw_spin_lock(& lock->__anonCompField_spinlock_18.rlock);
  
#line 313 
  return;
}


#line 346 
static void ldv_spin_lock_59_0(spinlock_t *lock);


#line 350 
static void ldv_spin_lock_61(spinlock_t *lock);


#line 354 
static void ldv_spin_lock_63(spinlock_t *lock);


#line 358 
static void ldv_spin_lock_65(spinlock_t *lock);


#line 340  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_lock_irq_3(spinlock_t *lock)
{
  
#line 342 
  _raw_spin_lock_irq(& lock->__anonCompField_spinlock_18.rlock);
  
#line 343 
  return;
}


#line 366 
static void ldv_spin_lock_irq_69(spinlock_t *lock);


#line 370 
static void ldv_spin_lock_irq_71(spinlock_t *lock);


#line 371  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_unlock_2(spinlock_t *lock)
{
  
#line 373 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_18.rlock);
  
#line 374 
  return;
}


#line 403 
static void ldv_spin_unlock_60_0(spinlock_t *lock);


#line 407 
static void ldv_spin_unlock_62(spinlock_t *lock);


#line 411 
static void ldv_spin_unlock_64(spinlock_t *lock);


#line 415 
static void ldv_spin_unlock_66(spinlock_t *lock);


#line 429  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_unlock_irq_3(spinlock_t *lock)
{
  
#line 431 
  _raw_spin_unlock_irq(& lock->__anonCompField_spinlock_18.rlock);
  
#line 432 
  return;
}


#line 445 
static void ldv_spin_unlock_irq_70(spinlock_t *lock);


#line 449 
static void ldv_spin_unlock_irq_72(spinlock_t *lock);


#line 450  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_unlock_irqrestore_1(spinlock_t *lock, unsigned long flags)
{
  {
    unsigned long __dummy;
    unsigned long __dummy2;
    
  }
  
#line 452 
  _raw_spin_unlock_irqrestore(& lock->__anonCompField_spinlock_18.rlock,flags);
  
#line 453 
  return;
}


#line 482 
static void ldv_spin_unlock_irqrestore_82(spinlock_t *lock, unsigned long flags);


#line 486 
static void ldv_spin_unlock_irqrestore_84(spinlock_t *lock, unsigned long flags);


#line 37  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_main.c.aux"
static void ldv_mutex_lock_73(struct mutex *ldv_func_arg1);


#line 41 
static void ldv_mutex_lock_75(struct mutex *ldv_func_arg1);


#line 45 
static void ldv_mutex_lock_77(struct mutex *ldv_func_arg1);


#line 49 
static void ldv_mutex_lock_79(struct mutex *ldv_func_arg1);


#line 82 
static void ldv___ldv_spin_lock_81(spinlock_t *ldv_func_arg1);


#line 86 
static void ldv___ldv_spin_lock_83(spinlock_t *ldv_func_arg1);


#line 193  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mutex.h"
static void ldv_mutex_unlock_74(struct mutex *ldv_func_arg1);


#line 197 
static void ldv_mutex_unlock_76(struct mutex *ldv_func_arg1);


#line 201 
static void ldv_mutex_unlock_78(struct mutex *ldv_func_arg1);


#line 205 
static void ldv_mutex_unlock_80(struct mutex *ldv_func_arg1);


#line 181  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/io.h"
void *ioremap_nocache(resource_size_t, unsigned long);


#line 190  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/io.h"
__inline static void *ioremap(resource_size_t offset, unsigned long size)
{
  void *tmp;
  
#line 192 
  tmp = ioremap_nocache(offset,size);
  
#line 192 
  return tmp;
}


#line 195 
void iounmap(void volatile *);


#line 36  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kmod.h"
int __request_module(bool, char const * , ...);


#line 846  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
__inline static int dev_to_node(struct device *dev)
{
  int __retres;
  
#line 848 
  __retres = dev->numa_node;
  
#line 848 
  return __retres;
}


#line 864  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
__inline static void *dev_get_drvdata(struct device const *dev)
{
  void *__retres;
  
#line 866 
  __retres = dev->driver_data;
  
#line 866 
  return __retres;
}


#line 869  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
__inline static void dev_set_drvdata(struct device *dev, void *data)
{
  
#line 871 
  dev->driver_data = data;
  
#line 872 
  return;
}


#line 1085 
void dev_warn(struct device const *, char const * , ...);


#line 1089 
void _dev_info(struct device const *, char const * , ...);


#line 418  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/slab.h"
static void *kmalloc_0(size_t size, gfp_t flags);


#line 542 
static void *kcalloc_1(size_t n, size_t size, gfp_t flags);


#line 581 
static void *kzalloc_4(size_t size, gfp_t flags);


#line 951  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
int pci_enable_device(struct pci_dev *);


#line 968 
void pci_disable_device(struct pci_dev *);


#line 971 
void pci_set_master(struct pci_dev *);


#line 972 
void pci_clear_master(struct pci_dev *);


#line 1094 
int pci_request_regions(struct pci_dev *, char const *);


#line 1096 
void pci_release_regions(struct pci_dev *);


#line 1146 
static int ldv___pci_register_driver_85(struct pci_driver *ldv_func_arg1, struct module *ldv_func_arg2, char const *ldv_func_arg3);


#line 1158 
static void ldv_pci_unregister_driver_86(struct pci_driver *ldv_func_arg1);


#line 1216 
void pci_disable_msix(struct pci_dev *);


#line 1227 
int pci_enable_msix_range(struct pci_dev *, struct msix_entry *, int, int);


#line 60  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/dma-mapping.h"
int dma_supported(struct device *, u64);


#line 61 
int dma_set_mask(struct device *, u64);


#line 101  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dma-mapping.h"
__inline static int dma_set_coherent_mask(struct device *dev, u64 mask)
{
  int __retres;
  int tmp;
  
#line 103 
  tmp = dma_supported(dev,mask);
  
#line 103 
  if (tmp == 0) {
    
#line 104 
    __retres = -5;
    
#line 104 
    goto return_label;
  }
  else ;
  
#line 105 
  dev->coherent_dma_mask = mask;
  
#line 106 
  __retres = 0;
  return_label: 
#line 106 
                return __retres;
}


#line 151  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dma-mapping.h"
__inline static unsigned int dma_set_max_seg_size(struct device *dev, unsigned int size)
{
  unsigned int __retres;
  
#line 154 
  if (dev->dma_parms != (struct device_dma_parameters *)0) {
    
#line 155 
    (dev->dma_parms)->max_segment_size = size;
    
#line 156 
    __retres = 0U;
    
#line 156 
    goto return_label;
  }
  else {
    
#line 158 
    __retres = 4294967291U;
    
#line 158 
    goto return_label;
  }
  return_label: 
#line 154 
                return __retres;
}


#line 113  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/pci-dma-compat.h"
__inline static int pci_set_dma_mask(struct pci_dev *dev, u64 mask)
{
  int tmp;
  
#line 115 
  tmp = dma_set_mask(& dev->dev,mask);
  
#line 115 
  return tmp;
}


#line 118  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/pci-dma-compat.h"
__inline static int pci_set_consistent_dma_mask(struct pci_dev *dev, u64 mask)
{
  int tmp;
  
#line 120 
  tmp = dma_set_coherent_mask(& dev->dev,mask);
  
#line 120 
  return tmp;
}


#line 1471  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
__inline static void *pci_get_drvdata(struct pci_dev *pdev)
{
  void *tmp;
  
#line 1473 
  tmp = dev_get_drvdata((struct device const *)(& pdev->dev));
  
#line 1473 
  return tmp;
}


#line 1476  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
__inline static void pci_set_drvdata(struct pci_dev *pdev, void *data)
{
  
#line 1478 
  dev_set_drvdata(& pdev->dev,data);
  
#line 1479 
  return;
}


#line 263  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/interrupt.h"
int irq_set_affinity_hint(unsigned int, struct cpumask const *);


#line 1185  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/device.h"
__inline static u16 mlx5_to_sw_pkey_sz(int pkey_sz)
{
  u16 __retres;
  
#line 1187 
  if (pkey_sz > 5) {
    
#line 1188 
    __retres = (unsigned short)0U;
    
#line 1188 
    goto return_label;
  }
  else ;
  
#line 1189 
  __retres = (unsigned short)(128 << pkey_sz);
  return_label: 
#line 1189 
                return __retres;
}


#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/main.c"
struct workqueue_struct *mlx5_core_wq;

#line 617  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/driver.h"
__inline static u16 fw_rev_maj(struct mlx5_core_dev *dev)
{
  u16 __retres;
  unsigned int tmp;
  
#line 619 
  tmp = ioread32be((void *)(& (dev->iseg)->fw_rev));
  
#line 619 
  __retres = (unsigned short)tmp;
  
#line 619 
  return __retres;
}


#line 622  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/driver.h"
__inline static u16 fw_rev_min(struct mlx5_core_dev *dev)
{
  u16 __retres;
  unsigned int tmp;
  
#line 624 
  tmp = ioread32be((void *)(& (dev->iseg)->fw_rev));
  
#line 624 
  __retres = (unsigned short)(tmp >> 16);
  
#line 624 
  return __retres;
}


#line 627  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/driver.h"
__inline static u16 fw_rev_sub(struct mlx5_core_dev *dev)
{
  u16 __retres;
  unsigned int tmp;
  
#line 629 
  tmp = ioread32be((void *)(& (dev->iseg)->cmdif_rev_fw_sub));
  
#line 629 
  __retres = (unsigned short)tmp;
  
#line 629 
  return __retres;
}


#line 658 
int mlx5_core_get_caps(struct mlx5_core_dev *dev, enum mlx5_cap_type cap_type, enum mlx5_cap_mode cap_mode);


#line 667 
int mlx5_alloc_uuars(struct mlx5_core_dev *dev, struct mlx5_uuar_info *uuari);


#line 668 
int mlx5_free_uuars(struct mlx5_core_dev *dev, struct mlx5_uuar_info *uuari);


#line 671 
void mlx5_health_cleanup(void);


#line 672 
void mlx5_health_init(void);


#line 673 
void mlx5_start_health_poll(struct mlx5_core_dev *dev);


#line 674 
void mlx5_stop_health_poll(struct mlx5_core_dev *dev);


#line 689 
void mlx5_init_mr_table(struct mlx5_core_dev *dev);


#line 704 
void mlx5_pagealloc_init(struct mlx5_core_dev *dev);


#line 705 
void mlx5_pagealloc_cleanup(struct mlx5_core_dev *dev);


#line 706 
int mlx5_pagealloc_start(struct mlx5_core_dev *dev);


#line 707 
void mlx5_pagealloc_stop(struct mlx5_core_dev *dev);


#line 710 
int mlx5_satisfy_startup_pages(struct mlx5_core_dev *dev, int boot);


#line 711 
int mlx5_reclaim_startup_pages(struct mlx5_core_dev *dev);


#line 714 
int mlx5_eq_init(struct mlx5_core_dev *dev);


#line 715 
void mlx5_eq_cleanup(struct mlx5_core_dev *dev);


#line 726 
int mlx5_create_map_eq(struct mlx5_core_dev *dev, struct mlx5_eq *eq, u8 vecidx, int nent, u64 mask, char const *name, struct mlx5_uar *uar);


#line 728 
int mlx5_destroy_unmap_eq(struct mlx5_core_dev *dev, struct mlx5_eq *eq);


#line 729 
int mlx5_start_eqs(struct mlx5_core_dev *dev);


#line 730 
int mlx5_stop_eqs(struct mlx5_core_dev *dev);


#line 731 
int mlx5_vector2eqn(struct mlx5_core_dev *dev, int vector, int *eqn, int *irqn);


#line 737 
int mlx5_core_access_reg(struct mlx5_core_dev *dev, void *data_in, int size_in, void *data_out, int size_out, u16 reg_num, int arg, int write);


#line 827 
void *mlx5_get_protocol_dev(struct mlx5_core_dev *mdev, int protocol);


#line 828 
int mlx5_register_interface(struct mlx5_interface *intf);


#line 829 
void mlx5_unregister_interface(struct mlx5_interface *intf);


#line 163  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/cq.h"
int mlx5_init_cq_table(struct mlx5_core_dev *dev);


#line 164 
void mlx5_cleanup_cq_table(struct mlx5_core_dev *dev);


#line 71  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/debugfs.h"
static void ldv_debugfs_remove_67(struct dentry *ldv_func_arg1);


#line 75 
static void ldv_debugfs_remove_68(struct dentry *ldv_func_arg1);


#line 56  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/main.c"
int mlx5_core_debug_mask;

#line 80  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.h"
int mlx5_query_hca_caps(struct mlx5_core_dev *dev);


#line 81 
int mlx5_query_board_id(struct mlx5_core_dev *dev);


#line 82 
int mlx5_cmd_init_hca(struct mlx5_core_dev *dev);


#line 83 
int mlx5_cmd_teardown_hca(struct mlx5_core_dev *dev);


#line 85 
void mlx5e_init(void);


#line 86 
void mlx5e_cleanup(void);


#line 61  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/main.c"
static int prof_sel = 2;

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/main.c"
static struct list_head intf_list = {.next = & intf_list, .prev = & intf_list};

#line 67  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/main.c"
static struct list_head dev_list = {.next = & dev_list, .prev = & dev_list};

#line 68  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/main.c"
static struct mutex intf_mutex = {.count = {.counter = 1}, .wait_lock = {.__anonCompField_spinlock_18 = {.rlock = {.raw_lock = {.val = {.counter = 0}}, .magic = 3735899821U, .owner_cpu = 4294967295U, .owner = (void *)(-1), .dep_map = {.key = (struct lock_class_key *)0, .class_cache = {(struct lock_class *)0, (struct lock_class *)0}, .name = "intf_mutex.wait_lock", .cpu = 0, .ip = 0UL}}}}, .wait_list = {.next = & intf_mutex.wait_list, .prev = & intf_mutex.wait_list}, .owner = (struct task_struct *)0, .magic = (void *)(& intf_mutex), .dep_map = {.key = (struct lock_class_key *)0, .class_cache = {(struct lock_class *)0, (struct lock_class *)0}, .name = "intf_mutex", .cpu = 0, .ip = 0UL}};

#line 76  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/main.c"
static struct mlx5_profile profile[3U] = {{.mask = 0ULL, .log_max_qp = (unsigned char)0, .mr_cache = {{.size = 0, .limit = 0}, {.size = 0, .limit = 0}, {.size = 0, .limit = 0}, {.size = 0, .limit = 0}, {.size = 0, .limit = 0}, {.size = 0, .limit = 0}, {.size = 0, .limit = 0}, {.size = 0, .limit = 0}, {.size = 0, .limit = 0}, {.size = 0, .limit = 0}, {.size = 0, .limit = 0}, {.size = 0, .limit = 0}, {.size = 0, .limit = 0}, {.size = 0, .limit = 0}, {.size = 0, .limit = 0}, {.size = 0, .limit = 0}}}, {.mask = 1ULL, .log_max_qp = (unsigned char)12U, .mr_cache = {{.size = 0, .limit = 0}, {.size = 0, .limit = 0}, {.size = 0, .limit = 0}, {.size = 0, .limit = 0}, {.size = 0, .limit = 0}, {.size = 0, .limit = 0}, {.size = 0, .limit = 0}, {.size = 0, .limit = 0}, {.size = 0, .limit = 0}, {.size = 0, .limit = 0}, {.size = 0, .limit = 0}, {.size = 0, .limit = 0}, {.size = 0, .limit = 0}, {.size = 0, .limit = 0}, {.size = 0, .limit = 0}, {.size = 0, .limit = 0}}}, {.mask = 3ULL, .log_max_qp = (unsigned char)17U, .mr_cache = {{.size = 500, .limit = 250}, {.size = 500, .limit = 250}, {.size = 500, .limit = 250}, {.size = 500, .limit = 250}, {.size = 500, .limit = 250}, {.size = 500, .limit = 250}, {.size = 500, .limit = 250}, {.size = 500, .limit = 250}, {.size = 500, .limit = 250}, {.size = 500, .limit = 250}, {.size = 500, .limit = 250}, {.size = 500, .limit = 250}, {.size = 64, .limit = 32}, {.size = 32, .limit = 16}, {.size = 16, .limit = 8}, {.size = 8, .limit = 4}}}};

#line 155  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/main.c"
static int set_dma_caps(struct pci_dev *pdev)
{
  int __retres;
  int err;
  
#line 159 
  err = pci_set_dma_mask(pdev,18446744073709551615ULL);
  
#line 160 
  if (err != 0) {
    
#line 161 
    dev_warn((struct device const *)(& pdev->dev),"Warning: couldn\'t set 64-bit PCI DMA mask\n");
    
#line 162 
    err = pci_set_dma_mask(pdev,4294967295ULL);
    
#line 163 
    if (err != 0) {
      
#line 164 
      dev_err((struct device const *)(& pdev->dev),"Can\'t set PCI DMA mask, aborting\n");
      
#line 165 
      __retres = err;
      
#line 165 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 169 
  err = pci_set_consistent_dma_mask(pdev,18446744073709551615ULL);
  
#line 170 
  if (err != 0) {
    
#line 171 
    dev_warn((struct device const *)(& pdev->dev),"Warning: couldn\'t set 64-bit consistent PCI DMA mask\n");
    
#line 173 
    err = pci_set_consistent_dma_mask(pdev,4294967295ULL);
    
#line 174 
    if (err != 0) {
      
#line 175 
      dev_err((struct device const *)(& pdev->dev),"Can\'t set consistent PCI DMA mask, aborting\n");
      
#line 177 
      __retres = err;
      
#line 177 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 181 
  dma_set_max_seg_size(& pdev->dev,2147483648U);
  
#line 182 
  __retres = err;
  return_label: 
#line 182 
                return __retres;
}


#line 185  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/main.c"
static int request_bar(struct pci_dev *pdev)
{
  int __retres;
  
#line 187 
  int err = 0;
  
#line 189 
  if ((pdev->resource[0].flags & 512UL) == 0UL) {
    
#line 190 
    dev_err((struct device const *)(& pdev->dev),"Missing registers BAR, aborting\n");
    
#line 191 
    __retres = -19;
    
#line 191 
    goto return_label;
  }
  else ;
  
#line 194 
  err = pci_request_regions(pdev,"mlx5_core");
  
#line 195 
  if (err != 0) 
#line 196 
                dev_err((struct device const *)(& pdev->dev),"Couldn\'t get PCI resources, aborting\n"); else ;
  
#line 198 
  __retres = err;
  return_label: 
#line 198 
                return __retres;
}


#line 201  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/main.c"
static void release_bar(struct pci_dev *pdev)
{
  
#line 203 
  pci_release_regions(pdev);
  
#line 204 
  return;
}


#line 206  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/main.c"
static int mlx5_enable_msix(struct mlx5_core_dev *dev)
{
  int __retres;
  int tmp_0;
  int nvec;
  int i;
  unsigned int tmp_2;
  unsigned int tmp_3;
  int tmp_5;
  
#line 208 
  struct mlx5_priv *priv = & dev->priv;
  
#line 209 
  struct mlx5_eq_table *table = & priv->eq_table;
  
#line 210 
  if (0 != 0) 
#line 210 
              tmp_0 = 1 << (((((*((__be32 *)(& dev->hca_caps_cur[0]) + 7U) << 24) | ((*((__be32 *)(& dev->hca_caps_cur[0]) + 7U) << 8) & 16711680U)) | ((*((__be32 *)(& dev->hca_caps_cur[0]) + 7U) >> 8) & 65280U)) | (*((__be32 *)(& dev->hca_caps_cur[0]) + 7U) >> 24)) & 15U);
  else {
    __u32 tmp;
    
#line 210 
    tmp = __fswab32(*((__be32 *)(& dev->hca_caps_cur[0]) + 7U));
    
#line 210 
    tmp_0 = 1 << (tmp & 15U);
  }
  
#line 210 
  int num_eqs = tmp_0;
  
#line 214 
  if (0 != 0) 
#line 214 
              tmp_2 = ((((*((__be32 *)(& dev->hca_caps_cur[0]) + 13U) << 24) | ((*((__be32 *)(& dev->hca_caps_cur[0]) + 13U) << 8) & 16711680U)) | ((*((__be32 *)(& dev->hca_caps_cur[0]) + 13U) >> 8) & 65280U)) | (*((__be32 *)(& dev->hca_caps_cur[0]) + 13U) >> 24)) & 255U;
  else {
    __u32 tmp_1;
    
#line 214 
    tmp_1 = __fswab32(*((__be32 *)(& dev->hca_caps_cur[0]) + 13U));
    
#line 214 
    tmp_2 = tmp_1 & 255U;
  }
  
#line 214 
  tmp_3 = cpumask_weight(cpu_online_mask);
  
#line 214 
  nvec = (int)(tmp_2 * tmp_3 + 3U);
  {
    int tmp_4;
    
#line 216 
    int __min1 = nvec;
    
#line 216 
    int __min2 = num_eqs;
    
#line 216 
    if (__min1 < __min2) 
#line 216 
                         tmp_4 = __min1; else 
#line 216 
                                              tmp_4 = __min2;
    
#line 216 
    tmp_5 = tmp_4;
  }
  
#line 216 
  nvec = tmp_5;
  
#line 217 
  if (nvec <= 3) {
    
#line 218 
    __retres = -12;
    
#line 218 
    goto return_label;
  }
  else ;
  
#line 220 
  priv->msix_arr = (struct msix_entry *)kcalloc_1((unsigned long)nvec,8UL,208U);
  
#line 222 
  priv->irq_info = (struct mlx5_irq_info *)kcalloc_1((unsigned long)nvec,40UL,208U);
  
#line 223 
  if (priv->msix_arr == (struct msix_entry *)0 || priv->irq_info == (struct mlx5_irq_info *)0) 
    
#line 224 
    goto err_free_msix; else ;
  
#line 226 
  i = 0;
  
#line 226 
  goto ldv_41906;
  ldv_41905: 
#line 227 
  ;
  
#line 227 
  (priv->msix_arr + i)->entry = (unsigned short)i;
  
#line 226 
  i += 1;
  ldv_41906: 
#line 227 
  ;
  
#line 226 
  if (i < nvec) 
#line 228 
                goto ldv_41905; else 
#line 231 
                                     goto ldv_41907;
  ldv_41907: 
#line 232 
  ;
  
#line 229 
  nvec = pci_enable_msix_range(dev->pdev,priv->msix_arr,4,nvec);
  
#line 231 
  if (nvec < 0) {
    
#line 232 
    __retres = nvec;
    
#line 232 
    goto return_label;
  }
  else ;
  
#line 234 
  table->num_comp_vectors = nvec + -3;
  
#line 236 
  __retres = 0;
  
#line 236 
  goto return_label;
  err_free_msix: 
#line 238 
  ;
  
#line 239 
  kfree((void const *)priv->irq_info);
  
#line 240 
  kfree((void const *)priv->msix_arr);
  
#line 241 
  __retres = -12;
  return_label: 
#line 241 
                return __retres;
}


#line 244  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/main.c"
static void mlx5_disable_msix(struct mlx5_core_dev *dev)
{
  
#line 246 
  struct mlx5_priv *priv = & dev->priv;
  
#line 248 
  pci_disable_msix(dev->pdev);
  
#line 249 
  kfree((void const *)priv->irq_info);
  
#line 250 
  kfree((void const *)priv->msix_arr);
  
#line 251 
  return;
}


#line 266  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/main.c"
static u16 to_fw_pkey_sz(u32 size)
{
  u16 __retres;
  
#line 268 
  switch (size) {
    case (u32)128: 
#line 269 
    ;
    
#line 270 
    __retres = (unsigned short)0U;
    
#line 270 
    goto return_label;
    case (u32)256: 
#line 271 
    ;
    
#line 272 
    __retres = (unsigned short)1U;
    
#line 272 
    goto return_label;
    case (u32)512: 
#line 273 
    ;
    
#line 274 
    __retres = (unsigned short)2U;
    
#line 274 
    goto return_label;
    case (u32)1024: 
#line 275 
    ;
    
#line 276 
    __retres = (unsigned short)3U;
    
#line 276 
    goto return_label;
    case (u32)2048: 
#line 277 
    ;
    
#line 278 
    __retres = (unsigned short)4U;
    
#line 278 
    goto return_label;
    case (u32)4096: 
#line 279 
    ;
    
#line 280 
    __retres = (unsigned short)5U;
    
#line 280 
    goto return_label;
    default: 
#line 281 
    ;
    
#line 282 
    printk("\001",size);
    
#line 283 
    __retres = (unsigned short)0U;
    
#line 283 
    goto return_label;
  }
  return_label: 
#line 268 
                return __retres;
}


#line 301 
void __compiletime_assert_301(void);


#line 302 
void __compiletime_assert_302(void);


#line 287  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/main.c"
int mlx5_core_get_caps(struct mlx5_core_dev *dev, enum mlx5_cap_type cap_type, enum mlx5_cap_mode cap_mode)
{
  int __retres;
  u8 in[16U];
  void *out;
  void *hca_caps;
  int err;
  
#line 291 
  int out_sz = 4112;
  
#line 293 
  u16 opmod = (unsigned short)((unsigned int)((int)((unsigned short)cap_type) << 1U) | ((unsigned int)((unsigned short)cap_mode) & 1U));
  
#line 296 
  memset((void *)(& in),0,16UL);
  
#line 297 
  out = kzalloc_4((unsigned long)out_sz,208U);
  
#line 298 
  if (out == (void *)0) {
    
#line 299 
    __retres = -12;
    
#line 299 
    goto return_label;
  }
  else ;
  {
    
#line 301 
    bool __cond = (_Bool)0;
    
#line 301 
    if ((int)__cond != 0) 
#line 301 
                          __compiletime_assert_301(); else ;
  }
  
#line 301 
  if (0 != 0) {
    unsigned int tmp_2;
    unsigned int tmp_4;
    
#line 301 
    if (0 != 0) 
#line 301 
                tmp_2 = ((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) << 24;
    else {
      __u32 tmp_1;
      
#line 301 
      tmp_1 = __fswab32(*((__be32 *)(& in)));
      
#line 301 
      tmp_2 = tmp_1 << 24;
    }
    
#line 301 
    if (0 != 0) 
#line 301 
                tmp_4 = (((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) << 8) & 16711680U;
    else {
      __u32 tmp_3;
      
#line 301 
      tmp_3 = __fswab32(*((__be32 *)(& in)));
      
#line 301 
      tmp_4 = (tmp_3 << 8) & 16711680U;
    }
    
#line 301 
    *((__be32 *)(& in)) = (tmp_2 | tmp_4) | 1U;
  }
  else {
    __u32 tmp_7;
    unsigned int tmp_6;
    
#line 301 
    if (0 != 0) 
#line 301 
                tmp_6 = (((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) & 65535U) | 16777216U;
    else {
      __u32 tmp_5;
      
#line 301 
      tmp_5 = __fswab32(*((__be32 *)(& in)));
      
#line 301 
      tmp_6 = (tmp_5 & 65535U) | 16777216U;
    }
    
#line 301 
    tmp_7 = __fswab32(tmp_6);
    
#line 301 
    *((__be32 *)(& in)) = tmp_7;
  }
  {
    
#line 302 
    bool __cond_0 = (_Bool)0;
    
#line 302 
    if ((int)__cond_0 != 0) 
#line 302 
                            __compiletime_assert_302(); else ;
  }
  
#line 302 
  if (0 != 0) {
    unsigned int tmp_11;
    unsigned int tmp_13;
    unsigned int tmp_15;
    unsigned int tmp_17;
    
#line 302 
    if (0 != 0) 
#line 302 
                tmp_11 = ((((*((__be32 *)(& in) + 1U) << 24) | ((*((__be32 *)(& in) + 1U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 1U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 1U) >> 24)) & 4294901760U;
    else {
      __u32 tmp_10;
      
#line 302 
      tmp_10 = __fswab32(*((__be32 *)(& in) + 1U));
      
#line 302 
      tmp_11 = tmp_10 & 4294901760U;
    }
    
#line 302 
    if (0 != 0) 
#line 302 
                tmp_13 = ((((*((__be32 *)(& in) + 1U) << 24) | ((*((__be32 *)(& in) + 1U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 1U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 1U) >> 24)) & 4294901760U;
    else {
      __u32 tmp_12;
      
#line 302 
      tmp_12 = __fswab32(*((__be32 *)(& in) + 1U));
      
#line 302 
      tmp_13 = tmp_12 & 4294901760U;
    }
    
#line 302 
    if (0 != 0) 
#line 302 
                tmp_15 = ((((*((__be32 *)(& in) + 1U) << 24) | ((*((__be32 *)(& in) + 1U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 1U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 1U) >> 24)) & 4294901760U;
    else {
      __u32 tmp_14;
      
#line 302 
      tmp_14 = __fswab32(*((__be32 *)(& in) + 1U));
      
#line 302 
      tmp_15 = tmp_14 & 4294901760U;
    }
    
#line 302 
    if (0 != 0) 
#line 302 
                tmp_17 = ((((*((__be32 *)(& in) + 1U) << 24) | ((*((__be32 *)(& in) + 1U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 1U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 1U) >> 24)) & 4294901760U;
    else {
      __u32 tmp_16;
      
#line 302 
      tmp_16 = __fswab32(*((__be32 *)(& in) + 1U));
      
#line 302 
      tmp_17 = tmp_16 & 4294901760U;
    }
    
#line 302 
    *((__be32 *)(& in) + 1U) = ((((tmp_11 | (unsigned int)opmod) << 24) | (((tmp_13 | (unsigned int)opmod) << 8) & 16711680U)) | (((tmp_15 | (unsigned int)opmod) >> 8) & 65280U)) | ((tmp_17 | (unsigned int)opmod) >> 24);
  }
  else {
    __u32 tmp_20;
    unsigned int tmp_19;
    
#line 302 
    if (0 != 0) 
#line 302 
                tmp_19 = ((((*((__be32 *)(& in) + 1U) << 24) | ((*((__be32 *)(& in) + 1U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 1U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 1U) >> 24)) & 4294901760U;
    else {
      __u32 tmp_18;
      
#line 302 
      tmp_18 = __fswab32(*((__be32 *)(& in) + 1U));
      
#line 302 
      tmp_19 = tmp_18 & 4294901760U;
    }
    
#line 302 
    ;
    
#line 302 
    tmp_20 = __fswab32(tmp_19 | (unsigned int)opmod);
    
#line 302 
    *((__be32 *)(& in) + 1U) = tmp_20;
  }
  
#line 303 
  err = mlx5_cmd_exec(dev,(void *)(& in),16,out,out_sz);
  
#line 304 
  if (err != 0) 
#line 305 
                goto query_ex; else ;
  
#line 307 
  err = mlx5_cmd_status_to_err_v2(out);
  
#line 308 
  if (err != 0) {
    struct task_struct *tmp_21;
    
#line 309 
    ;
    
#line 309 
    ;
    
#line 309 
    ;
    
#line 309 
    tmp_21 = get_current();
    
#line 309 
    ;
    
#line 309 
    printk("\001",(char *)(& dev->priv.name),"mlx5_core_get_caps",311,tmp_21->pid,(unsigned int)cap_type,(unsigned int)cap_mode,err);
    
#line 312 
    goto query_ex;
  }
  else ;
  
#line 315 
  hca_caps = out + 16U;
  
#line 317 
  switch ((unsigned int)cap_mode) {
    struct task_struct *tmp_22;
    case (unsigned int)0: 
#line 318 
    ;
    
#line 319 
    memcpy((void *)(& dev->hca_caps_max[(unsigned int)cap_type]),(void const *)hca_caps,4096UL);
    
#line 321 
    goto ldv_41949;
    case (unsigned int)1: 
#line 322 
    ;
    
#line 323 
    memcpy((void *)(& dev->hca_caps_cur[(unsigned int)cap_type]),(void const *)hca_caps,4096UL);
    
#line 325 
    goto ldv_41949;
    default: 
#line 326 
    ;
    
#line 327 
    ;
    
#line 327 
    ;
    
#line 327 
    tmp_22 = get_current();
    
#line 327 
    ;
    
#line 327 
    printk("\001",(char *)(& dev->priv.name),"mlx5_core_get_caps",329,tmp_22->pid,(unsigned int)cap_type,(unsigned int)cap_mode);
    
#line 330 
    err = -22;
    
#line 331 
    goto ldv_41949;
  }
  ldv_41949: 
#line 333 
  ;
  query_ex: 
#line 333 
  ;
  
#line 334 
  kfree((void const *)out);
  
#line 335 
  __retres = err;
  return_label: 
#line 335 
                return __retres;
}


#line 345 
void __compiletime_assert_345(void);


#line 338  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/main.c"
static int set_caps(struct mlx5_core_dev *dev, void *in, int in_sz)
{
  int __retres;
  u32 out[4U];
  int err;
  
#line 343 
  memset((void *)(& out),0,16UL);
  {
    
#line 345 
    bool __cond = (_Bool)0;
    
#line 345 
    if ((int)__cond != 0) 
#line 345 
                          __compiletime_assert_345(); else ;
  }
  
#line 345 
  if (0 != 0) {
    unsigned int tmp_2;
    unsigned int tmp_4;
    
#line 345 
    if (0 != 0) 
#line 345 
                tmp_2 = ((((*((__be32 *)in) << 24) | ((*((__be32 *)in) << 8) & 16711680U)) | ((*((__be32 *)in) >> 8) & 65280U)) | (*((__be32 *)in) >> 24)) << 24;
    else {
      __u32 tmp_1;
      
#line 345 
      tmp_1 = __fswab32(*((__be32 *)in));
      
#line 345 
      tmp_2 = tmp_1 << 24;
    }
    
#line 345 
    if (0 != 0) 
#line 345 
                tmp_4 = (((((*((__be32 *)in) << 24) | ((*((__be32 *)in) << 8) & 16711680U)) | ((*((__be32 *)in) >> 8) & 65280U)) | (*((__be32 *)in) >> 24)) << 8) & 16711680U;
    else {
      __u32 tmp_3;
      
#line 345 
      tmp_3 = __fswab32(*((__be32 *)in));
      
#line 345 
      tmp_4 = (tmp_3 << 8) & 16711680U;
    }
    
#line 345 
    *((__be32 *)in) = (tmp_2 | tmp_4) | 2305U;
  }
  else {
    __u32 tmp_7;
    unsigned int tmp_6;
    
#line 345 
    if (0 != 0) 
#line 345 
                tmp_6 = (((((*((__be32 *)in) << 24) | ((*((__be32 *)in) << 8) & 16711680U)) | ((*((__be32 *)in) >> 8) & 65280U)) | (*((__be32 *)in) >> 24)) & 65535U) | 17367040U;
    else {
      __u32 tmp_5;
      
#line 345 
      tmp_5 = __fswab32(*((__be32 *)in));
      
#line 345 
      tmp_6 = (tmp_5 & 65535U) | 17367040U;
    }
    
#line 345 
    tmp_7 = __fswab32(tmp_6);
    
#line 345 
    *((__be32 *)in) = tmp_7;
  }
  
#line 346 
  err = mlx5_cmd_exec(dev,in,in_sz,(void *)(& out),16);
  
#line 347 
  if (err != 0) {
    
#line 348 
    __retres = err;
    
#line 348 
    goto return_label;
  }
  else ;
  
#line 350 
  err = mlx5_cmd_status_to_err_v2((void *)(& out));
  
#line 352 
  __retres = err;
  return_label: 
#line 352 
                return __retres;
}


#line 388 
void __compiletime_assert_389(void);


#line 392 
void __compiletime_assert_392(void);


#line 394 
void __compiletime_assert_394(void);


#line 355  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/main.c"
static int handle_hca_cap(struct mlx5_core_dev *dev)
{
  void *set_hca_cap;
  __u32 tmp_6;
  unsigned int tmp_4;
  u16 tmp_5;
  
#line 357 
  void *set_ctx = (void *)0;
  
#line 358 
  struct mlx5_profile *prof = dev->profile;
  
#line 359 
  int err = -12;
  
#line 360 
  int set_sz = 4112;
  
#line 363 
  set_ctx = kzalloc_4((unsigned long)set_sz,208U);
  
#line 364 
  if (set_ctx == (void *)0) 
#line 365 
                            goto query_ex; else ;
  
#line 367 
  err = mlx5_core_get_caps(dev,(enum mlx5_cap_type)MLX5_CAP_GENERAL,(enum mlx5_cap_mode)HCA_CAP_OPMOD_GET_MAX);
  
#line 368 
  if (err != 0) 
#line 369 
                goto query_ex; else ;
  
#line 371 
  err = mlx5_core_get_caps(dev,(enum mlx5_cap_type)MLX5_CAP_GENERAL,(enum mlx5_cap_mode)HCA_CAP_OPMOD_GET_CUR);
  
#line 372 
  if (err != 0) 
#line 373 
                goto query_ex; else ;
  
#line 375 
  set_hca_cap = set_ctx + 16U;
  
#line 377 
  memcpy(set_hca_cap,(void const *)(& dev->hca_caps_cur[0]),256UL);
  {
    
#line 380 
    struct _ddebug descriptor = {.modname = "mlx5_core", .function = "handle_hca_cap", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/main.c", .format = "%s:%s:%d:(pid %d): ", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))382U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 380 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
      u16 tmp_1;
      unsigned int tmp_0;
      struct task_struct *tmp_2;
      
#line 380 
      if (0 != 0) 
#line 380 
                  tmp_0 = ((((*((__be32 *)(& dev->hca_caps_cur[0]) + 12U) << 24) | ((*((__be32 *)(& dev->hca_caps_cur[0]) + 12U) << 8) & 16711680U)) | ((*((__be32 *)(& dev->hca_caps_cur[0]) + 12U) >> 8) & 65280U)) | (*((__be32 *)(& dev->hca_caps_cur[0]) + 12U) >> 24)) & 65535U;
      else {
        __u32 tmp;
        
#line 380 
        tmp = __fswab32(*((__be32 *)(& dev->hca_caps_cur[0]) + 12U));
        
#line 380 
        tmp_0 = tmp & 65535U;
      }
      
#line 380 
      tmp_1 = mlx5_to_sw_pkey_sz((int)tmp_0);
      
#line 380 
      tmp_2 = get_current();
      
#line 380 
      ;
      
#line 380 
      __dynamic_pr_debug(& descriptor,"%s:%s:%d:(pid %d): ",(char *)(& dev->priv.name),"handle_hca_cap",382,tmp_2->pid,(int)tmp_1,128);
    }
    else ;
  }
  {
    
#line 384 
    bool __cond = (_Bool)0;
    
#line 384 
    if ((int)__cond != 0) 
#line 384 
                          __compiletime_assert_385(); else ;
  }
  
#line 384 
  if (0 != 0) 
#line 384 
              tmp_4 = ((((*((__be32 *)set_hca_cap + 12U) << 24) | ((*((__be32 *)set_hca_cap + 12U) << 8) & 16711680U)) | ((*((__be32 *)set_hca_cap + 12U) >> 8) & 65280U)) | (*((__be32 *)set_hca_cap + 12U) >> 24)) & 4294901760U;
  else {
    __u32 tmp_3;
    
#line 384 
    tmp_3 = __fswab32(*((__be32 *)set_hca_cap + 12U));
    
#line 384 
    tmp_4 = tmp_3 & 4294901760U;
  }
  
#line 384 
  tmp_5 = to_fw_pkey_sz(128U);
  
#line 384 
  tmp_6 = __fswab32(tmp_4 | (unsigned int)tmp_5);
  
#line 384 
  *((__be32 *)set_hca_cap + 12U) = tmp_6;
  
#line 387 
  if ((prof->mask & 1ULL) != 0ULL) {
    {
      
#line 388 
      bool __cond_0 = (_Bool)0;
      
#line 388 
      if ((int)__cond_0 != 0) 
#line 388 
                              __compiletime_assert_389(); else ;
    }
    
#line 388 
    if (0 != 0) {
      unsigned int tmp_10;
      unsigned int tmp_12;
      unsigned int tmp_14;
      unsigned int tmp_16;
      
#line 388 
      if (0 != 0) 
#line 388 
                  tmp_10 = ((((*((__be32 *)set_hca_cap + 4U) << 24) | ((*((__be32 *)set_hca_cap + 4U) << 8) & 16711680U)) | ((*((__be32 *)set_hca_cap + 4U) >> 8) & 65280U)) | (*((__be32 *)set_hca_cap + 4U) >> 24)) & 4294967264U;
      else {
        __u32 tmp_9;
        
#line 388 
        tmp_9 = __fswab32(*((__be32 *)set_hca_cap + 4U));
        
#line 388 
        tmp_10 = tmp_9 & 4294967264U;
      }
      
#line 388 
      if (0 != 0) 
#line 388 
                  tmp_12 = ((((*((__be32 *)set_hca_cap + 4U) << 24) | ((*((__be32 *)set_hca_cap + 4U) << 8) & 16711680U)) | ((*((__be32 *)set_hca_cap + 4U) >> 8) & 65280U)) | (*((__be32 *)set_hca_cap + 4U) >> 24)) & 4294967264U;
      else {
        __u32 tmp_11;
        
#line 388 
        tmp_11 = __fswab32(*((__be32 *)set_hca_cap + 4U));
        
#line 388 
        tmp_12 = tmp_11 & 4294967264U;
      }
      
#line 388 
      if (0 != 0) 
#line 388 
                  tmp_14 = ((((*((__be32 *)set_hca_cap + 4U) << 24) | ((*((__be32 *)set_hca_cap + 4U) << 8) & 16711680U)) | ((*((__be32 *)set_hca_cap + 4U) >> 8) & 65280U)) | (*((__be32 *)set_hca_cap + 4U) >> 24)) & 4294967264U;
      else {
        __u32 tmp_13;
        
#line 388 
        tmp_13 = __fswab32(*((__be32 *)set_hca_cap + 4U));
        
#line 388 
        tmp_14 = tmp_13 & 4294967264U;
      }
      
#line 388 
      if (0 != 0) 
#line 388 
                  tmp_16 = ((((*((__be32 *)set_hca_cap + 4U) << 24) | ((*((__be32 *)set_hca_cap + 4U) << 8) & 16711680U)) | ((*((__be32 *)set_hca_cap + 4U) >> 8) & 65280U)) | (*((__be32 *)set_hca_cap + 4U) >> 24)) & 4294967264U;
      else {
        __u32 tmp_15;
        
#line 388 
        tmp_15 = __fswab32(*((__be32 *)set_hca_cap + 4U));
        
#line 388 
        tmp_16 = tmp_15 & 4294967264U;
      }
      
#line 388 
      *((__be32 *)set_hca_cap + 4U) = ((((tmp_10 | ((unsigned int)prof->log_max_qp & 31U)) << 24) | (((tmp_12 | ((unsigned int)prof->log_max_qp & 31U)) << 8) & 16711680U)) | (((tmp_14 | ((unsigned int)prof->log_max_qp & 31U)) >> 8) & 65280U)) | ((tmp_16 | ((unsigned int)prof->log_max_qp & 31U)) >> 24);
    }
    else {
      __u32 tmp_19;
      unsigned int tmp_18;
      
#line 388 
      if (0 != 0) 
#line 388 
                  tmp_18 = ((((*((__be32 *)set_hca_cap + 4U) << 24) | ((*((__be32 *)set_hca_cap + 4U) << 8) & 16711680U)) | ((*((__be32 *)set_hca_cap + 4U) >> 8) & 65280U)) | (*((__be32 *)set_hca_cap + 4U) >> 24)) & 4294967264U;
      else {
        __u32 tmp_17;
        
#line 388 
        tmp_17 = __fswab32(*((__be32 *)set_hca_cap + 4U));
        
#line 388 
        tmp_18 = tmp_17 & 4294967264U;
      }
      
#line 388 
      ;
      
#line 388 
      tmp_19 = __fswab32(tmp_18 | ((unsigned int)prof->log_max_qp & 31U));
      
#line 388 
      *((__be32 *)set_hca_cap + 4U) = tmp_19;
    }
  }
  else ;
  {
    
#line 392 
    bool __cond_1 = (_Bool)0;
    
#line 392 
    if ((int)__cond_1 != 0) 
#line 392 
                            __compiletime_assert_392(); else ;
  }
  
#line 392 
  if (0 != 0) {
    unsigned int tmp_23;
    unsigned int tmp_25;
    unsigned int tmp_27;
    unsigned int tmp_29;
    
#line 392 
    if (0 != 0) 
#line 392 
                tmp_23 = ((((*((__be32 *)set_hca_cap + 16U) << 24) | ((*((__be32 *)set_hca_cap + 16U) << 8) & 16711680U)) | ((*((__be32 *)set_hca_cap + 16U) >> 8) & 65280U)) | (*((__be32 *)set_hca_cap + 16U) >> 24)) << 24;
    else {
      __u32 tmp_22;
      
#line 392 
      tmp_22 = __fswab32(*((__be32 *)set_hca_cap + 16U));
      
#line 392 
      tmp_23 = tmp_22 << 24;
    }
    
#line 392 
    if (0 != 0) 
#line 392 
                tmp_25 = (((((*((__be32 *)set_hca_cap + 16U) << 24) | ((*((__be32 *)set_hca_cap + 16U) << 8) & 16711680U)) | ((*((__be32 *)set_hca_cap + 16U) >> 8) & 65280U)) | (*((__be32 *)set_hca_cap + 16U) >> 24)) << 8) & 4128768U;
    else {
      __u32 tmp_24;
      
#line 392 
      tmp_24 = __fswab32(*((__be32 *)set_hca_cap + 16U));
      
#line 392 
      tmp_25 = (tmp_24 << 8) & 4128768U;
    }
    
#line 392 
    if (0 != 0) 
#line 392 
                tmp_27 = (((((*((__be32 *)set_hca_cap + 16U) << 24) | ((*((__be32 *)set_hca_cap + 16U) << 8) & 16711680U)) | ((*((__be32 *)set_hca_cap + 16U) >> 8) & 65280U)) | (*((__be32 *)set_hca_cap + 16U) >> 24)) >> 8) & 65280U;
    else {
      __u32 tmp_26;
      
#line 392 
      tmp_26 = __fswab32(*((__be32 *)set_hca_cap + 16U));
      
#line 392 
      tmp_27 = (tmp_26 >> 8) & 65280U;
    }
    
#line 392 
    if (0 != 0) 
#line 392 
                tmp_29 = ((((*((__be32 *)set_hca_cap + 16U) << 24) | ((*((__be32 *)set_hca_cap + 16U) << 8) & 16711680U)) | ((*((__be32 *)set_hca_cap + 16U) >> 8) & 65280U)) | (*((__be32 *)set_hca_cap + 16U) >> 24)) >> 24;
    else {
      __u32 tmp_28;
      
#line 392 
      tmp_28 = __fswab32(*((__be32 *)set_hca_cap + 16U));
      
#line 392 
      tmp_29 = tmp_28 >> 24;
    }
    
#line 392 
    *((__be32 *)set_hca_cap + 16U) = ((tmp_23 | tmp_25) | tmp_27) | tmp_29;
  }
  else {
    __u32 tmp_32;
    unsigned int tmp_31;
    
#line 392 
    if (0 != 0) 
#line 392 
                tmp_31 = ((((*((__be32 *)set_hca_cap + 16U) << 24) | ((*((__be32 *)set_hca_cap + 16U) << 8) & 16711680U)) | ((*((__be32 *)set_hca_cap + 16U) >> 8) & 65280U)) | (*((__be32 *)set_hca_cap + 16U) >> 24)) & 4294918143U;
    else {
      __u32 tmp_30;
      
#line 392 
      tmp_30 = __fswab32(*((__be32 *)set_hca_cap + 16U));
      
#line 392 
      tmp_31 = tmp_30 & 4294918143U;
    }
    
#line 392 
    tmp_32 = __fswab32(tmp_31);
    
#line 392 
    *((__be32 *)set_hca_cap + 16U) = tmp_32;
  }
  {
    
#line 394 
    bool __cond_2 = (_Bool)0;
    
#line 394 
    if ((int)__cond_2 != 0) 
#line 394 
                            __compiletime_assert_394(); else ;
  }
  
#line 394 
  if (0 != 0) {
    unsigned int tmp_36;
    unsigned int tmp_38;
    
#line 394 
    if (0 != 0) 
#line 394 
                tmp_36 = (((((*((__be32 *)set_hca_cap + 36U) << 24) | ((*((__be32 *)set_hca_cap + 36U) << 8) & 16711680U)) | ((*((__be32 *)set_hca_cap + 36U) >> 8) & 65280U)) | (*((__be32 *)set_hca_cap + 36U) >> 24)) >> 8) & 65280U;
    else {
      __u32 tmp_35;
      
#line 394 
      tmp_35 = __fswab32(*((__be32 *)set_hca_cap + 36U));
      
#line 394 
      tmp_36 = (tmp_35 >> 8) & 65280U;
    }
    
#line 394 
    if (0 != 0) 
#line 394 
                tmp_38 = ((((*((__be32 *)set_hca_cap + 36U) << 24) | ((*((__be32 *)set_hca_cap + 36U) << 8) & 16711680U)) | ((*((__be32 *)set_hca_cap + 36U) >> 8) & 65280U)) | (*((__be32 *)set_hca_cap + 36U) >> 24)) >> 24;
    else {
      __u32 tmp_37;
      
#line 394 
      tmp_37 = __fswab32(*((__be32 *)set_hca_cap + 36U));
      
#line 394 
      tmp_38 = tmp_37 >> 24;
    }
    
#line 394 
    *((__be32 *)set_hca_cap + 36U) = tmp_36 | tmp_38;
  }
  else {
    __u32 tmp_41;
    unsigned int tmp_40;
    
#line 394 
    if (0 != 0) 
#line 394 
                tmp_40 = ((((*((__be32 *)set_hca_cap + 36U) << 24) | ((*((__be32 *)set_hca_cap + 36U) << 8) & 16711680U)) | ((*((__be32 *)set_hca_cap + 36U) >> 8) & 65280U)) | (*((__be32 *)set_hca_cap + 36U) >> 24)) & 4294901760U;
    else {
      __u32 tmp_39;
      
#line 394 
      tmp_39 = __fswab32(*((__be32 *)set_hca_cap + 36U));
      
#line 394 
      tmp_40 = tmp_39 & 4294901760U;
    }
    
#line 394 
    tmp_41 = __fswab32(tmp_40);
    
#line 394 
    *((__be32 *)set_hca_cap + 36U) = tmp_41;
  }
  
#line 396 
  err = set_caps(dev,set_ctx,set_sz);
  query_ex: 
#line 398 
  ;
  
#line 399 
  kfree((void const *)set_ctx);
  
#line 400 
  return err;
}


#line 403  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/main.c"
static int set_hca_ctrl(struct mlx5_core_dev *dev)
{
  struct mlx5_reg_host_endianess he_in;
  struct mlx5_reg_host_endianess he_out;
  int err;
  
#line 409 
  memset((void *)(& he_in),0,16UL);
  
#line 410 
  he_in.he = (unsigned char)0U;
  
#line 411 
  err = mlx5_core_access_reg(dev,(void *)(& he_in),16,(void *)(& he_out),16,(unsigned short)28676,0,1);
  
#line 414 
  return err;
}


#line 417  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/main.c"
static int mlx5_core_enable_hca(struct mlx5_core_dev *dev)
{
  int __retres;
  int err;
  struct mlx5_enable_hca_mbox_in in;
  struct mlx5_enable_hca_mbox_out out;
  
#line 423 
  memset((void *)(& in),0,16UL);
  
#line 424 
  memset((void *)(& out),0,16UL);
  
#line 425 
  in.hdr.opcode = (unsigned short)1025U;
  
#line 426 
  err = mlx5_cmd_exec(dev,(void *)(& in),16,(void *)(& out),16);
  
#line 427 
  if (err != 0) {
    
#line 428 
    __retres = err;
    
#line 428 
    goto return_label;
  }
  else ;
  
#line 430 
  if ((unsigned int)out.hdr.status != 0U) {
    int tmp;
    
#line 431 
    tmp = mlx5_cmd_status_to_err(& out.hdr);
    
#line 431 
    __retres = tmp;
    
#line 431 
    goto return_label;
  }
  else ;
  
#line 433 
  __retres = 0;
  return_label: 
#line 433 
                return __retres;
}


#line 436  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/main.c"
static int mlx5_core_disable_hca(struct mlx5_core_dev *dev)
{
  int __retres;
  int err;
  struct mlx5_disable_hca_mbox_in in;
  struct mlx5_disable_hca_mbox_out out;
  
#line 442 
  memset((void *)(& in),0,16UL);
  
#line 443 
  memset((void *)(& out),0,16UL);
  
#line 444 
  in.hdr.opcode = (unsigned short)1281U;
  
#line 445 
  err = mlx5_cmd_exec(dev,(void *)(& in),16,(void *)(& out),16);
  
#line 446 
  if (err != 0) {
    
#line 447 
    __retres = err;
    
#line 447 
    goto return_label;
  }
  else ;
  
#line 449 
  if ((unsigned int)out.hdr.status != 0U) {
    int tmp;
    
#line 450 
    tmp = mlx5_cmd_status_to_err(& out.hdr);
    
#line 450 
    __retres = tmp;
    
#line 450 
    goto return_label;
  }
  else ;
  
#line 452 
  __retres = 0;
  return_label: 
#line 452 
                return __retres;
}


#line 455  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/main.c"
static int mlx5_irq_set_affinity_hint(struct mlx5_core_dev *mdev, int i)
{
  int __retres;
  int err;
  int tmp_2;
  bool tmp_1;
  unsigned int tmp_3;
  
#line 457 
  struct mlx5_priv *priv = & mdev->priv;
  
#line 458 
  struct msix_entry *msix = priv->msix_arr;
  
#line 459 
  int irq = (int)(msix + ((unsigned int)i + 3U))->vector;
  
#line 460 
  int numa_node_0 = dev_to_node(& (mdev->pdev)->dev);
  
#line 463 
  tmp_1 = zalloc_cpumask_var((cpumask_var_t **)(& (priv->irq_info + i)->mask),208U);
  
#line 463 
  if (tmp_1) 
#line 463 
             tmp_2 = 0; else 
#line 463 
                             tmp_2 = 1;
  
#line 463 
  if (tmp_2) {
    struct task_struct *tmp_0;
    
#line 464 
    tmp_0 = get_current();
    
#line 464 
    ;
    
#line 464 
    printk("\001",(char *)(& mdev->priv.name),"mlx5_irq_set_affinity_hint",464,tmp_0->pid);
    
#line 465 
    __retres = -12;
    
#line 465 
    goto return_label;
  }
  else ;
  
#line 468 
  ;
  
#line 468 
  tmp_3 = cpumask_local_spread((unsigned int)i,numa_node_0);
  
#line 468 
  cpumask_set_cpu(tmp_3,(priv->irq_info + i)->mask);
  
#line 471 
  err = irq_set_affinity_hint((unsigned int)irq,(struct cpumask const *)(priv->irq_info + i)->mask);
  
#line 472 
  if (err != 0) {
    struct task_struct *tmp_4;
    
#line 473 
    ;
    
#line 473 
    tmp_4 = get_current();
    
#line 473 
    ;
    
#line 473 
    printk("\001",(char *)(& mdev->priv.name),"mlx5_irq_set_affinity_hint",474,tmp_4->pid,irq);
    
#line 475 
    goto err_clear_mask;
  }
  else ;
  
#line 478 
  __retres = 0;
  
#line 478 
  goto return_label;
  err_clear_mask: 
#line 480 
  ;
  
#line 481 
  free_cpumask_var((priv->irq_info + i)->mask);
  
#line 482 
  __retres = err;
  return_label: 
#line 482 
                return __retres;
}


#line 485  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/main.c"
static void mlx5_irq_clear_affinity_hint(struct mlx5_core_dev *mdev, int i)
{
  
#line 487 
  struct mlx5_priv *priv = & mdev->priv;
  
#line 488 
  struct msix_entry *msix = priv->msix_arr;
  
#line 489 
  int irq = (int)(msix + ((unsigned int)i + 3U))->vector;
  
#line 491 
  irq_set_affinity_hint((unsigned int)irq,(struct cpumask const *)0);
  
#line 492 
  free_cpumask_var((priv->irq_info + i)->mask);
  
#line 493 
  return;
}


#line 495  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/main.c"
static int mlx5_irq_set_affinity_hints(struct mlx5_core_dev *mdev)
{
  int __retres;
  int err;
  int i;
  
#line 500 
  i = 0;
  
#line 500 
  goto ldv_42033;
  ldv_42032: 
#line 501 
  ;
  
#line 501 
  err = mlx5_irq_set_affinity_hint(mdev,i);
  
#line 502 
  if (err != 0) 
#line 503 
                goto err_out; else ;
  
#line 500 
  i += 1;
  ldv_42033: 
#line 501 
  ;
  
#line 500 
  if (mdev->priv.eq_table.num_comp_vectors > i) 
#line 502 
                                                goto ldv_42032; else 
                                                                  
#line 505 
                                                                  goto ldv_42034;
  ldv_42034: 
#line 506 
  ;
  
#line 506 
  __retres = 0;
  
#line 506 
  goto return_label;
  err_out: 
#line 508 
  ;
  
#line 509 
  i -= 1;
  
#line 509 
  goto ldv_42036;
  ldv_42035: 
#line 510 
  ;
  
#line 510 
  mlx5_irq_clear_affinity_hint(mdev,i);
  
#line 509 
  i -= 1;
  ldv_42036: 
#line 510 
  ;
  
#line 509 
  if (i >= 0) 
#line 511 
              goto ldv_42035; else 
#line 514 
                                   goto ldv_42037;
  ldv_42037: 
#line 515 
  ;
  
#line 512 
  __retres = err;
  return_label: 
#line 512 
                return __retres;
}


#line 515  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/main.c"
static void mlx5_irq_clear_affinity_hints(struct mlx5_core_dev *mdev)
{
  int i;
  
#line 519 
  i = 0;
  
#line 519 
  goto ldv_42043;
  ldv_42042: 
#line 520 
  ;
  
#line 520 
  mlx5_irq_clear_affinity_hint(mdev,i);
  
#line 519 
  i += 1;
  ldv_42043: 
#line 520 
  ;
  
#line 519 
  if (mdev->priv.eq_table.num_comp_vectors > i) 
#line 521 
                                                goto ldv_42042; else 
                                                                  
#line 524 
                                                                  goto ldv_42044;
  ldv_42044: 
#line 525 
  ;
  
#line 526 
  return;
}


#line 523  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/main.c"
int mlx5_vector2eqn(struct mlx5_core_dev *dev, int vector, int *eqn, int *irqn)
{
  struct mlx5_eq *eq;
  struct mlx5_eq *n;
  struct mlx5_eq *tmp;
  struct mlx5_eq *tmp_0;
  struct mlx5_eq *tmp_1;
  
#line 525 
  struct mlx5_eq_table *table = & dev->priv.eq_table;
  
#line 527 
  int err = -2;
  
#line 529 
  ldv_spin_lock_59_0(& table->lock);
  {
    
#line 530 
    struct list_head const *__mptr = (struct list_head const *)table->comp_eqs_list.next;
    
#line 530 
    tmp = (struct mlx5_eq *)__mptr + 18446744073709551536U;
  }
  
#line 530 
  eq = tmp;
  {
    
#line 530 
    struct list_head const *__mptr_0 = (struct list_head const *)eq->list.next;
    
#line 530 
    tmp_0 = (struct mlx5_eq *)__mptr_0 + 18446744073709551536U;
  }
  
#line 531 
  n = tmp_0;
  
#line 530 
  goto ldv_42063;
  ldv_42062: 
#line 531 
  ;
  
#line 531 
  if (eq->index == vector) {
    
#line 532 
    *eqn = (int)eq->eqn;
    
#line 533 
    *irqn = (int)eq->irqn;
    
#line 534 
    err = 0;
    
#line 535 
    goto ldv_42061;
  }
  else ;
  
#line 530 
  eq = n;
  {
    
#line 530 
    struct list_head const *__mptr_1 = (struct list_head const *)n->list.next;
    
#line 530 
    tmp_1 = (struct mlx5_eq *)__mptr_1 + 18446744073709551536U;
  }
  
#line 530 
  n = tmp_1;
  ldv_42063: 
#line 532 
  ;
  
#line 530 
  if (& eq->list != & table->comp_eqs_list) 
#line 532 
                                            goto ldv_42062; else 
#line 535 
                                                                 goto ldv_42061;
  ldv_42061: 
#line 536 
  ;
  
#line 538 
  ldv_spin_unlock_60_0(& table->lock);
  
#line 540 
  return err;
}


#line 542  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/main.c"
static char const __kstrtab_mlx5_vector2eqn[16U] = {(char)'m', (char)'l', (char)'x', (char)'5', (char)'_', (char)'v', (char)'e', (char)'c', (char)'t', (char)'o', (char)'r', (char)'2', (char)'e', (char)'q', (char)'n', (char)'\000'};

#line 542 
struct kernel_symbol const __ksymtab_mlx5_vector2eqn;


#line 542  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/main.c"
struct kernel_symbol const __ksymtab_mlx5_vector2eqn = {.value = (unsigned long)(& mlx5_vector2eqn), .name = (char const *)(& __kstrtab_mlx5_vector2eqn)};

#line 544  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/main.c"
static void free_comp_eqs(struct mlx5_core_dev *dev)
{
  struct mlx5_eq *eq;
  struct mlx5_eq *n;
  struct mlx5_eq *tmp;
  struct mlx5_eq *tmp_0;
  int tmp_2;
  struct mlx5_eq *tmp_3;
  
#line 546 
  struct mlx5_eq_table *table = & dev->priv.eq_table;
  
#line 549 
  ldv_spin_lock_61(& table->lock);
  {
    
#line 550 
    struct list_head const *__mptr = (struct list_head const *)table->comp_eqs_list.next;
    
#line 550 
    tmp = (struct mlx5_eq *)__mptr + 18446744073709551536U;
  }
  
#line 550 
  eq = tmp;
  {
    
#line 550 
    struct list_head const *__mptr_0 = (struct list_head const *)eq->list.next;
    
#line 550 
    tmp_0 = (struct mlx5_eq *)__mptr_0 + 18446744073709551536U;
  }
  
#line 551 
  n = tmp_0;
  
#line 550 
  goto ldv_42088;
  ldv_42087: 
#line 551 
  ;
  
#line 551 
  list_del(& eq->list);
  
#line 552 
  ldv_spin_unlock_62(& table->lock);
  
#line 553 
  tmp_2 = mlx5_destroy_unmap_eq(dev,eq);
  
#line 553 
  if (tmp_2 != 0) {
    struct task_struct *tmp_1;
    
#line 554 
    ;
    
#line 554 
    tmp_1 = get_current();
    
#line 554 
    ;
    
#line 554 
    printk("\001",(char *)(& dev->priv.name),"free_comp_eqs",555,tmp_1->pid,(int)eq->eqn);
  }
  else ;
  
#line 556 
  kfree((void const *)eq);
  
#line 557 
  ldv_spin_lock_63(& table->lock);
  
#line 550 
  eq = n;
  {
    
#line 550 
    struct list_head const *__mptr_1 = (struct list_head const *)n->list.next;
    
#line 550 
    tmp_3 = (struct mlx5_eq *)__mptr_1 + 18446744073709551536U;
  }
  
#line 550 
  n = tmp_3;
  ldv_42088: 
#line 552 
  ;
  
#line 550 
  if (& eq->list != & table->comp_eqs_list) 
#line 552 
                                            goto ldv_42087; else 
#line 555 
                                                                 goto ldv_42089;
  ldv_42089: 
#line 556 
  ;
  
#line 559 
  ldv_spin_unlock_64(& table->lock);
  
#line 560 
  return;
}


#line 562  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/main.c"
static int alloc_comp_eqs(struct mlx5_core_dev *dev)
{
  int __retres;
  char name[32U];
  struct mlx5_eq *eq;
  int ncomp_vec;
  int nent;
  int err;
  int i;
  
#line 564 
  struct mlx5_eq_table *table = & dev->priv.eq_table;
  
#line 572 
  INIT_LIST_HEAD(& table->comp_eqs_list);
  
#line 573 
  ncomp_vec = table->num_comp_vectors;
  
#line 574 
  nent = 1024;
  
#line 575 
  i = 0;
  
#line 575 
  goto ldv_42104;
  ldv_42103: 
#line 576 
  ;
  
#line 576 
  eq = (struct mlx5_eq *)kzalloc_4(112UL,208U);
  
#line 577 
  if (eq == (struct mlx5_eq *)0) {
    
#line 578 
    err = -12;
    
#line 579 
    goto clean;
  }
  else ;
  
#line 582 
  snprintf((char *)(& name),32UL,"mlx5_comp%d",i);
  
#line 583 
  err = mlx5_create_map_eq(dev,eq,(unsigned char)((int)((unsigned int)((unsigned char)i) + 3U)),nent,0ULL,(char const *)(& name),dev->priv.uuari.uars);
  
#line 586 
  if (err != 0) {
    
#line 587 
    kfree((void const *)eq);
    
#line 588 
    goto clean;
  }
  else ;
  {
    
#line 590 
    struct _ddebug descriptor = {.modname = "mlx5_core", .function = "alloc_comp_eqs", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/main.c", .format = "%s:%s:%d:(pid %d): ", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))590U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 590 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
      struct task_struct *tmp_0;
      
#line 590 
      ;
      
#line 590 
      tmp_0 = get_current();
      
#line 590 
      ;
      
#line 590 
      __dynamic_pr_debug(& descriptor,"%s:%s:%d:(pid %d): ",(char *)(& dev->priv.name),"alloc_comp_eqs",590,tmp_0->pid,(int)eq->eqn);
    }
    else ;
  }
  
#line 591 
  eq->index = i;
  
#line 592 
  ldv_spin_lock_65(& table->lock);
  
#line 593 
  list_add_tail(& eq->list,& table->comp_eqs_list);
  
#line 594 
  ldv_spin_unlock_66(& table->lock);
  
#line 575 
  i += 1;
  ldv_42104: 
#line 576 
  ;
  
#line 575 
  if (i < ncomp_vec) 
#line 577 
                     goto ldv_42103; else 
#line 580 
                                          goto ldv_42105;
  ldv_42105: 
#line 581 
  ;
  
#line 597 
  __retres = 0;
  
#line 597 
  goto return_label;
  clean: 
#line 599 
  ;
  
#line 600 
  free_comp_eqs(dev);
  
#line 601 
  __retres = err;
  return_label: 
#line 601 
                return __retres;
}


#line 617 
void __compiletime_assert_617(void);


#line 638 
void __compiletime_assert_638(void);


#line 639 
void __compiletime_assert_639(void);


#line 605  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/main.c"
static int mlx5_core_set_issi(struct mlx5_core_dev *dev)
{
  int __retres;
  u32 query_in[4U];
  u32 query_out[28U];
  u32 set_in[4U];
  u32 set_out[4U];
  int err;
  u32 sup_issi;
  
#line 614 
  memset((void *)(& query_in),0,16UL);
  
#line 615 
  memset((void *)(& query_out),0,112UL);
  {
    
#line 617 
    bool __cond = (_Bool)0;
    
#line 617 
    if ((int)__cond != 0) 
#line 617 
                          __compiletime_assert_617(); else ;
  }
  
#line 617 
  if (0 != 0) {
    unsigned int tmp_2;
    unsigned int tmp_4;
    
#line 617 
    if (0 != 0) 
#line 617 
                tmp_2 = ((((*((__be32 *)(& query_in)) << 24) | ((*((__be32 *)(& query_in)) << 8) & 16711680U)) | ((*((__be32 *)(& query_in)) >> 8) & 65280U)) | (*((__be32 *)(& query_in)) >> 24)) << 24;
    else {
      __u32 tmp_1;
      
#line 617 
      tmp_1 = __fswab32(*((__be32 *)(& query_in)));
      
#line 617 
      tmp_2 = tmp_1 << 24;
    }
    
#line 617 
    if (0 != 0) 
#line 617 
                tmp_4 = (((((*((__be32 *)(& query_in)) << 24) | ((*((__be32 *)(& query_in)) << 8) & 16711680U)) | ((*((__be32 *)(& query_in)) >> 8) & 65280U)) | (*((__be32 *)(& query_in)) >> 24)) << 8) & 16711680U;
    else {
      __u32 tmp_3;
      
#line 617 
      tmp_3 = __fswab32(*((__be32 *)(& query_in)));
      
#line 617 
      tmp_4 = (tmp_3 << 8) & 16711680U;
    }
    
#line 617 
    *((__be32 *)(& query_in)) = (tmp_2 | tmp_4) | 2561U;
  }
  else {
    __u32 tmp_7;
    unsigned int tmp_6;
    
#line 617 
    if (0 != 0) 
#line 617 
                tmp_6 = (((((*((__be32 *)(& query_in)) << 24) | ((*((__be32 *)(& query_in)) << 8) & 16711680U)) | ((*((__be32 *)(& query_in)) >> 8) & 65280U)) | (*((__be32 *)(& query_in)) >> 24)) & 65535U) | 17432576U;
    else {
      __u32 tmp_5;
      
#line 617 
      tmp_5 = __fswab32(*((__be32 *)(& query_in)));
      
#line 617 
      tmp_6 = (tmp_5 & 65535U) | 17432576U;
    }
    
#line 617 
    tmp_7 = __fswab32(tmp_6);
    
#line 617 
    *((__be32 *)(& query_in)) = tmp_7;
  }
  
#line 619 
  err = mlx5_cmd_exec_check_status(dev,(u32 *)(& query_in),16,(u32 *)(& query_out),112);
  
#line 621 
  if (err != 0) {
    
#line 622 
    if ((unsigned int)((struct mlx5_outbox_hdr *)(& query_out))->status == 2U) {
      {
        
#line 624 
        struct _ddebug descriptor = {.modname = "mlx5_core", .function = "mlx5_core_set_issi", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/main.c", .format = "Only ISSI 0 is supported\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))624U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
        
#line 624 
        if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 624 
                                                            __dynamic_pr_debug(& descriptor,"Only ISSI 0 is supported\n"); else ;
      }
      
#line 625 
      __retres = 0;
      
#line 625 
      goto return_label;
    }
    else ;
    
#line 628 
    printk("\001");
    
#line 629 
    __retres = err;
    
#line 629 
    goto return_label;
  }
  else ;
  
#line 632 
  if (0 != 0) 
#line 632 
              sup_issi = (((*((__be32 *)(& query_out) + 27U) << 24) | ((*((__be32 *)(& query_out) + 27U) << 8) & 16711680U)) | ((*((__be32 *)(& query_out) + 27U) >> 8) & 65280U)) | (*((__be32 *)(& query_out) + 27U) >> 24); else 
                                                                    
#line 632 
                                                                    sup_issi = __fswab32(*((__be32 *)(& query_out) + 27U));
  
#line 634 
  if ((sup_issi & 2U) != 0U) {
    
#line 635 
    memset((void *)(& set_in),0,16UL);
    
#line 636 
    memset((void *)(& set_out),0,16UL);
    {
      
#line 638 
      bool __cond_0 = (_Bool)0;
      
#line 638 
      if ((int)__cond_0 != 0) 
#line 638 
                              __compiletime_assert_638(); else ;
    }
    
#line 638 
    if (0 != 0) {
      unsigned int tmp_12;
      unsigned int tmp_14;
      
#line 638 
      if (0 != 0) 
#line 638 
                  tmp_12 = ((((*((__be32 *)(& set_in)) << 24) | ((*((__be32 *)(& set_in)) << 8) & 16711680U)) | ((*((__be32 *)(& set_in)) >> 8) & 65280U)) | (*((__be32 *)(& set_in)) >> 24)) << 24;
      else {
        __u32 tmp_11;
        
#line 638 
        tmp_11 = __fswab32(*((__be32 *)(& set_in)));
        
#line 638 
        tmp_12 = tmp_11 << 24;
      }
      
#line 638 
      if (0 != 0) 
#line 638 
                  tmp_14 = (((((*((__be32 *)(& set_in)) << 24) | ((*((__be32 *)(& set_in)) << 8) & 16711680U)) | ((*((__be32 *)(& set_in)) >> 8) & 65280U)) | (*((__be32 *)(& set_in)) >> 24)) << 8) & 16711680U;
      else {
        __u32 tmp_13;
        
#line 638 
        tmp_13 = __fswab32(*((__be32 *)(& set_in)));
        
#line 638 
        tmp_14 = (tmp_13 << 8) & 16711680U;
      }
      
#line 638 
      *((__be32 *)(& set_in)) = (tmp_12 | tmp_14) | 2817U;
    }
    else {
      __u32 tmp_17;
      unsigned int tmp_16;
      
#line 638 
      if (0 != 0) 
#line 638 
                  tmp_16 = (((((*((__be32 *)(& set_in)) << 24) | ((*((__be32 *)(& set_in)) << 8) & 16711680U)) | ((*((__be32 *)(& set_in)) >> 8) & 65280U)) | (*((__be32 *)(& set_in)) >> 24)) & 65535U) | 17498112U;
      else {
        __u32 tmp_15;
        
#line 638 
        tmp_15 = __fswab32(*((__be32 *)(& set_in)));
        
#line 638 
        tmp_16 = (tmp_15 & 65535U) | 17498112U;
      }
      
#line 638 
      tmp_17 = __fswab32(tmp_16);
      
#line 638 
      *((__be32 *)(& set_in)) = tmp_17;
    }
    {
      
#line 639 
      bool __cond_1 = (_Bool)0;
      
#line 639 
      if ((int)__cond_1 != 0) 
#line 639 
                              __compiletime_assert_639(); else ;
    }
    
#line 639 
    if (0 != 0) {
      unsigned int tmp_21;
      unsigned int tmp_23;
      
#line 639 
      if (0 != 0) 
#line 639 
                  tmp_21 = ((((((*((__be32 *)(& set_in) + 2U) << 24) | ((*((__be32 *)(& set_in) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& set_in) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& set_in) + 2U) >> 24)) >> 8) & 65280U) | 16777216U;
      else {
        __u32 tmp_20;
        
#line 639 
        tmp_20 = __fswab32(*((__be32 *)(& set_in) + 2U));
        
#line 639 
        tmp_21 = ((tmp_20 >> 8) & 65280U) | 16777216U;
      }
      
#line 639 
      if (0 != 0) 
#line 639 
                  tmp_23 = ((((*((__be32 *)(& set_in) + 2U) << 24) | ((*((__be32 *)(& set_in) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& set_in) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& set_in) + 2U) >> 24)) >> 24;
      else {
        __u32 tmp_22;
        
#line 639 
        tmp_22 = __fswab32(*((__be32 *)(& set_in) + 2U));
        
#line 639 
        tmp_23 = tmp_22 >> 24;
      }
      
#line 639 
      *((__be32 *)(& set_in) + 2U) = tmp_21 | tmp_23;
    }
    else {
      __u32 tmp_26;
      unsigned int tmp_25;
      
#line 639 
      if (0 != 0) 
#line 639 
                  tmp_25 = (((((*((__be32 *)(& set_in) + 2U) << 24) | ((*((__be32 *)(& set_in) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& set_in) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& set_in) + 2U) >> 24)) & 4294901760U) | 1U;
      else {
        __u32 tmp_24;
        
#line 639 
        tmp_24 = __fswab32(*((__be32 *)(& set_in) + 2U));
        
#line 639 
        tmp_25 = (tmp_24 & 4294901760U) | 1U;
      }
      
#line 639 
      tmp_26 = __fswab32(tmp_25);
      
#line 639 
      *((__be32 *)(& set_in) + 2U) = tmp_26;
    }
    
#line 641 
    err = mlx5_cmd_exec_check_status(dev,(u32 *)(& set_in),16,(u32 *)(& set_out),16);
    
#line 643 
    if (err != 0) {
      
#line 644 
      printk("\001");
      
#line 645 
      __retres = err;
      
#line 645 
      goto return_label;
    }
    else ;
    
#line 648 
    dev->issi = 1U;
    
#line 650 
    __retres = 0;
    
#line 650 
    goto return_label;
  }
  else 
    
#line 651 
    if ((sup_issi & 1U) != 0U || sup_issi == 0U) {
      
#line 652 
      __retres = 0;
      
#line 652 
      goto return_label;
    }
    else ;
  
#line 655 
  __retres = -524;
  return_label: 
#line 655 
                return __retres;
}


#line 659  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/main.c"
static int mlx5_dev_init(struct mlx5_core_dev *dev, struct pci_dev *pdev)
{
  int __retres;
  int err;
  char const *tmp;
  char const *tmp_0;
  u16 tmp_2;
  u16 tmp_3;
  u16 tmp_4;
  int tmp_5;
  
#line 661 
  struct mlx5_priv *priv = & dev->priv;
  
#line 664 
  dev->pdev = pdev;
  
#line 665 
  pci_set_drvdata(dev->pdev,(void *)dev);
  
#line 666 
  tmp = dev_name((struct device const *)(& pdev->dev));
  
#line 666 
  ;
  
#line 666 
  strncpy((char *)(& priv->name),tmp,16UL);
  
#line 667 
  priv->name[15] = (char)0;
  {
    struct lock_class_key __key;
    
#line 669 
    __mutex_init(& priv->pgdir_mutex,"&priv->pgdir_mutex",& __key);
  }
  
#line 670 
  INIT_LIST_HEAD(& priv->pgdir_list);
  
#line 671 
  spinlock_check(& priv->mkey_lock);
  {
    struct lock_class_key __key_0;
    
#line 671 
    __raw_spin_lock_init(& priv->mkey_lock.__anonCompField_spinlock_18.rlock,"&(&priv->mkey_lock)->rlock",& __key_0);
  }
  
#line 673 
  ;
  
#line 673 
  tmp_0 = dev_name((struct device const *)(& pdev->dev));
  
#line 673 
  priv->dbg_root = debugfs_create_dir(tmp_0,mlx5_debugfs_root);
  
#line 674 
  if (priv->dbg_root == (struct dentry *)0) {
    
#line 675 
    __retres = -12;
    
#line 675 
    goto return_label;
  }
  else ;
  
#line 677 
  err = pci_enable_device(pdev);
  
#line 678 
  if (err != 0) {
    
#line 679 
    dev_err((struct device const *)(& pdev->dev),"Cannot enable PCI device, aborting\n");
    
#line 680 
    goto err_dbg;
  }
  else ;
  
#line 683 
  err = request_bar(pdev);
  
#line 684 
  if (err != 0) {
    
#line 685 
    dev_err((struct device const *)(& pdev->dev),"error requesting BARs, aborting\n");
    
#line 686 
    goto err_disable;
  }
  else ;
  
#line 689 
  pci_set_master(pdev);
  
#line 691 
  err = set_dma_caps(pdev);
  
#line 692 
  if (err != 0) {
    
#line 693 
    dev_err((struct device const *)(& pdev->dev),"Failed setting DMA capabilities mask, aborting\n");
    
#line 694 
    goto err_clr_master;
  }
  else ;
  
#line 697 
  dev->iseg_base = (dev->pdev)->resource[0].start;
  
#line 698 
  dev->iseg = (struct mlx5_init_seg *)ioremap(dev->iseg_base,8208UL);
  
#line 699 
  if (dev->iseg == (struct mlx5_init_seg *)0) {
    
#line 700 
    err = -12;
    
#line 701 
    dev_err((struct device const *)(& pdev->dev),"Failed mapping initialization segment, aborting\n");
    
#line 702 
    goto err_clr_master;
  }
  else ;
  
#line 704 
  tmp_2 = fw_rev_sub(dev);
  
#line 704 
  tmp_3 = fw_rev_min(dev);
  
#line 704 
  tmp_4 = fw_rev_maj(dev);
  
#line 704 
  ;
  
#line 704 
  _dev_info((struct device const *)(& pdev->dev),"firmware version: %d.%d.%d\n",(int)tmp_4,(int)tmp_3,(int)tmp_2);
  
#line 707 
  err = mlx5_cmd_init(dev);
  
#line 708 
  if (err != 0) {
    
#line 709 
    dev_err((struct device const *)(& pdev->dev),"Failed initializing command interface, aborting\n");
    
#line 710 
    goto err_unmap;
  }
  else ;
  
#line 713 
  mlx5_pagealloc_init(dev);
  
#line 715 
  err = mlx5_core_enable_hca(dev);
  
#line 716 
  if (err != 0) {
    
#line 717 
    dev_err((struct device const *)(& pdev->dev),"enable hca failed\n");
    
#line 718 
    goto err_pagealloc_cleanup;
  }
  else ;
  
#line 722 
  err = mlx5_core_set_issi(dev);
  
#line 723 
  if (err != 0) {
    
#line 724 
    dev_err((struct device const *)(& pdev->dev),"failed to set issi\n");
    
#line 725 
    goto err_disable_hca;
  }
  else ;
  
#line 729 
  err = mlx5_satisfy_startup_pages(dev,1);
  
#line 730 
  if (err != 0) {
    
#line 731 
    dev_err((struct device const *)(& pdev->dev),"failed to allocate boot pages\n");
    
#line 732 
    goto err_disable_hca;
  }
  else ;
  
#line 735 
  err = set_hca_ctrl(dev);
  
#line 736 
  if (err != 0) {
    
#line 737 
    dev_err((struct device const *)(& pdev->dev),"set_hca_ctrl failed\n");
    
#line 738 
    goto reclaim_boot_pages;
  }
  else ;
  
#line 741 
  err = handle_hca_cap(dev);
  
#line 742 
  if (err != 0) {
    
#line 743 
    dev_err((struct device const *)(& pdev->dev),"handle_hca_cap failed\n");
    
#line 744 
    goto reclaim_boot_pages;
  }
  else ;
  
#line 747 
  err = mlx5_satisfy_startup_pages(dev,0);
  
#line 748 
  if (err != 0) {
    
#line 749 
    dev_err((struct device const *)(& pdev->dev),"failed to allocate init pages\n");
    
#line 750 
    goto reclaim_boot_pages;
  }
  else ;
  
#line 753 
  err = mlx5_pagealloc_start(dev);
  
#line 754 
  if (err != 0) {
    
#line 755 
    dev_err((struct device const *)(& pdev->dev),"mlx5_pagealloc_start failed\n");
    
#line 756 
    goto reclaim_boot_pages;
  }
  else ;
  
#line 759 
  err = mlx5_cmd_init_hca(dev);
  
#line 760 
  if (err != 0) {
    
#line 761 
    dev_err((struct device const *)(& pdev->dev),"init hca failed\n");
    
#line 762 
    goto err_pagealloc_stop;
  }
  else ;
  
#line 765 
  mlx5_start_health_poll(dev);
  
#line 767 
  err = mlx5_query_hca_caps(dev);
  
#line 768 
  if (err != 0) {
    
#line 769 
    dev_err((struct device const *)(& pdev->dev),"query hca failed\n");
    
#line 770 
    goto err_stop_poll;
  }
  else ;
  
#line 773 
  err = mlx5_query_board_id(dev);
  
#line 774 
  if (err != 0) {
    
#line 775 
    dev_err((struct device const *)(& pdev->dev),"query board id failed\n");
    
#line 776 
    goto err_stop_poll;
  }
  else ;
  
#line 779 
  err = mlx5_enable_msix(dev);
  
#line 780 
  if (err != 0) {
    
#line 781 
    dev_err((struct device const *)(& pdev->dev),"enable msix failed\n");
    
#line 782 
    goto err_stop_poll;
  }
  else ;
  
#line 785 
  err = mlx5_eq_init(dev);
  
#line 786 
  if (err != 0) {
    
#line 787 
    dev_err((struct device const *)(& pdev->dev),"failed to initialize eq\n");
    
#line 788 
    goto disable_msix;
  }
  else ;
  
#line 791 
  err = mlx5_alloc_uuars(dev,& priv->uuari);
  
#line 792 
  if (err != 0) {
    
#line 793 
    dev_err((struct device const *)(& pdev->dev),"Failed allocating uar, aborting\n");
    
#line 794 
    goto err_eq_cleanup;
  }
  else ;
  
#line 797 
  err = mlx5_start_eqs(dev);
  
#line 798 
  if (err != 0) {
    
#line 799 
    dev_err((struct device const *)(& pdev->dev),"Failed to start pages and async EQs\n");
    
#line 800 
    goto err_free_uar;
  }
  else ;
  
#line 803 
  err = alloc_comp_eqs(dev);
  
#line 804 
  if (err != 0) {
    
#line 805 
    dev_err((struct device const *)(& pdev->dev),"Failed to alloc completion EQs\n");
    
#line 806 
    goto err_stop_eqs;
  }
  else ;
  
#line 809 
  err = mlx5_irq_set_affinity_hints(dev);
  
#line 810 
  if (err != 0) {
    
#line 811 
    dev_err((struct device const *)(& pdev->dev),"Failed to alloc affinity hint cpumask\n");
    
#line 812 
    goto err_free_comp_eqs;
  }
  else ;
  
#line 817 
  mlx5_init_cq_table(dev);
  
#line 818 
  mlx5_init_qp_table(dev);
  
#line 819 
  mlx5_init_srq_table(dev);
  
#line 820 
  mlx5_init_mr_table(dev);
  
#line 822 
  __retres = 0;
  
#line 822 
  goto return_label;
  err_free_comp_eqs: 
#line 824 
  ;
  
#line 825 
  free_comp_eqs(dev);
  err_stop_eqs: 
#line 827 
  ;
  
#line 828 
  mlx5_stop_eqs(dev);
  err_free_uar: 
#line 830 
  ;
  
#line 831 
  mlx5_free_uuars(dev,& priv->uuari);
  err_eq_cleanup: 
#line 833 
  ;
  
#line 834 
  mlx5_eq_cleanup(dev);
  disable_msix: 
#line 836 
  ;
  
#line 837 
  mlx5_disable_msix(dev);
  err_stop_poll: 
#line 839 
  ;
  
#line 840 
  mlx5_stop_health_poll(dev);
  
#line 841 
  tmp_5 = mlx5_cmd_teardown_hca(dev);
  
#line 841 
  if (tmp_5 != 0) {
    
#line 842 
    dev_err((struct device const *)(& (dev->pdev)->dev),"tear_down_hca failed, skip cleanup\n");
    
#line 843 
    __retres = err;
    
#line 843 
    goto return_label;
  }
  else ;
  err_pagealloc_stop: 
#line 846 
  ;
  
#line 847 
  mlx5_pagealloc_stop(dev);
  reclaim_boot_pages: 
#line 849 
  ;
  
#line 850 
  mlx5_reclaim_startup_pages(dev);
  err_disable_hca: 
#line 852 
  ;
  
#line 853 
  mlx5_core_disable_hca(dev);
  err_pagealloc_cleanup: 
#line 855 
  ;
  
#line 856 
  mlx5_pagealloc_cleanup(dev);
  
#line 857 
  mlx5_cmd_cleanup(dev);
  err_unmap: 
#line 859 
  ;
  
#line 860 
  iounmap((void volatile *)dev->iseg);
  err_clr_master: 
#line 862 
  ;
  
#line 863 
  pci_clear_master(dev->pdev);
  
#line 864 
  release_bar(dev->pdev);
  err_disable: 
#line 866 
  ;
  
#line 867 
  pci_disable_device(dev->pdev);
  err_dbg: 
#line 869 
  ;
  
#line 870 
  ldv_debugfs_remove_67(priv->dbg_root);
  
#line 871 
  __retres = err;
  return_label: 
#line 871 
                return __retres;
}


#line 874  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/main.c"
static void mlx5_dev_cleanup(struct mlx5_core_dev *dev)
{
  int tmp;
  
#line 876 
  struct mlx5_priv *priv = & dev->priv;
  
#line 878 
  mlx5_cleanup_srq_table(dev);
  
#line 879 
  mlx5_cleanup_qp_table(dev);
  
#line 880 
  mlx5_cleanup_cq_table(dev);
  
#line 881 
  mlx5_irq_clear_affinity_hints(dev);
  
#line 882 
  free_comp_eqs(dev);
  
#line 883 
  mlx5_stop_eqs(dev);
  
#line 884 
  mlx5_free_uuars(dev,& priv->uuari);
  
#line 885 
  mlx5_eq_cleanup(dev);
  
#line 886 
  mlx5_disable_msix(dev);
  
#line 887 
  mlx5_stop_health_poll(dev);
  
#line 888 
  tmp = mlx5_cmd_teardown_hca(dev);
  
#line 888 
  if (tmp != 0) {
    
#line 889 
    dev_err((struct device const *)(& (dev->pdev)->dev),"tear_down_hca failed, skip cleanup\n");
    
#line 890 
    goto return_label;
  }
  else ;
  
#line 892 
  mlx5_pagealloc_stop(dev);
  
#line 893 
  mlx5_reclaim_startup_pages(dev);
  
#line 894 
  mlx5_core_disable_hca(dev);
  
#line 895 
  mlx5_pagealloc_cleanup(dev);
  
#line 896 
  mlx5_cmd_cleanup(dev);
  
#line 897 
  iounmap((void volatile *)dev->iseg);
  
#line 898 
  pci_clear_master(dev->pdev);
  
#line 899 
  release_bar(dev->pdev);
  
#line 900 
  pci_disable_device(dev->pdev);
  
#line 901 
  ldv_debugfs_remove_68(priv->dbg_root);
  return_label: 
#line 902 
                return;
}


#line 904  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/main.c"
static void mlx5_add_device(struct mlx5_interface *intf, struct mlx5_priv *priv)
{
  struct mlx5_device_context *dev_ctx;
  struct mlx5_core_dev *tmp;
  {
    
#line 907 
    struct mlx5_priv const *__mptr = (struct mlx5_priv const *)priv;
    
#line 907 
    tmp = (struct mlx5_core_dev *)__mptr + 18446744073709223336U;
  }
  
#line 907 
  struct mlx5_core_dev *dev = tmp;
  
#line 909 
  dev_ctx = (struct mlx5_device_context *)kmalloc_0(32UL,208U);
  
#line 910 
  if (dev_ctx == (struct mlx5_device_context *)0) {
    
#line 911 
    printk("\001");
    
#line 912 
    goto return_label;
  }
  else ;
  
#line 915 
  dev_ctx->intf = intf;
  
#line 916 
  dev_ctx->context = (*(intf->add))(dev);
  
#line 918 
  if (dev_ctx->context != (void *)0) {
    
#line 919 
    ldv_spin_lock_irq_69(& priv->ctx_lock);
    
#line 920 
    list_add_tail(& dev_ctx->list,& priv->ctx_list);
    
#line 921 
    ldv_spin_unlock_irq_70(& priv->ctx_lock);
  }
  else 
#line 923 
       kfree((void const *)dev_ctx);
  return_label: 
#line 924 
                return;
}


#line 927  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/main.c"
static void mlx5_remove_device(struct mlx5_interface *intf, struct mlx5_priv *priv)
{
  struct mlx5_device_context *dev_ctx;
  struct mlx5_core_dev *tmp;
  struct mlx5_device_context *tmp_0;
  struct mlx5_device_context *tmp_1;
  {
    
#line 930 
    struct mlx5_priv const *__mptr = (struct mlx5_priv const *)priv;
    
#line 930 
    tmp = (struct mlx5_core_dev *)__mptr + 18446744073709223336U;
  }
  
#line 930 
  struct mlx5_core_dev *dev = tmp;
  {
    
#line 932 
    struct list_head const *__mptr_0 = (struct list_head const *)priv->ctx_list.next;
    
#line 932 
    tmp_0 = (struct mlx5_device_context *)__mptr_0;
  }
  
#line 932 
  dev_ctx = tmp_0;
  
#line 932 
  goto ldv_42176;
  ldv_42175: 
#line 933 
  ;
  
#line 933 
  if (dev_ctx->intf == intf) {
    
#line 934 
    ldv_spin_lock_irq_71(& priv->ctx_lock);
    
#line 935 
    list_del(& dev_ctx->list);
    
#line 936 
    ldv_spin_unlock_irq_72(& priv->ctx_lock);
    
#line 938 
    (*(intf->remove))(dev,dev_ctx->context);
    
#line 939 
    kfree((void const *)dev_ctx);
    
#line 940 
    goto return_label;
  }
  else ;
  {
    
#line 932 
    struct list_head const *__mptr_1 = (struct list_head const *)dev_ctx->list.next;
    
#line 932 
    tmp_1 = (struct mlx5_device_context *)__mptr_1;
  }
  
#line 932 
  dev_ctx = tmp_1;
  ldv_42176: 
#line 934 
  ;
  
#line 932 
  if (& dev_ctx->list != & priv->ctx_list) 
#line 934 
                                           goto ldv_42175; else 
#line 937 
                                                                goto ldv_42177;
  ldv_42177: 
#line 938 
  ;
  return_label: 
#line 939 
                return;
}


#line 943  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/main.c"
static int mlx5_register_device(struct mlx5_core_dev *dev)
{
  int __retres;
  struct mlx5_interface *intf;
  struct mlx5_interface *tmp;
  struct mlx5_interface *tmp_0;
  
#line 945 
  struct mlx5_priv *priv = & dev->priv;
  
#line 948 
  ldv_mutex_lock_73(& intf_mutex);
  
#line 949 
  list_add_tail(& priv->dev_list,& dev_list);
  {
    
#line 950 
    struct list_head const *__mptr = (struct list_head const *)intf_list.next;
    
#line 950 
    tmp = (struct mlx5_interface *)__mptr + 18446744073709551576U;
  }
  
#line 950 
  intf = tmp;
  
#line 950 
  goto ldv_42188;
  ldv_42187: 
#line 951 
  ;
  
#line 951 
  mlx5_add_device(intf,priv);
  {
    
#line 950 
    struct list_head const *__mptr_0 = (struct list_head const *)intf->list.next;
    
#line 950 
    tmp_0 = (struct mlx5_interface *)__mptr_0 + 18446744073709551576U;
  }
  
#line 950 
  intf = tmp_0;
  ldv_42188: 
#line 952 
  ;
  
#line 950 
  if (& intf->list != & intf_list) 
#line 952 
                                   goto ldv_42187; else 
#line 955 
                                                        goto ldv_42189;
  ldv_42189: 
#line 956 
  ;
  
#line 952 
  ldv_mutex_unlock_74(& intf_mutex);
  
#line 954 
  __retres = 0;
  
#line 954 
  return __retres;
}


#line 956  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/main.c"
static void mlx5_unregister_device(struct mlx5_core_dev *dev)
{
  struct mlx5_interface *intf;
  struct mlx5_interface *tmp;
  struct mlx5_interface *tmp_0;
  
#line 958 
  struct mlx5_priv *priv = & dev->priv;
  
#line 961 
  ldv_mutex_lock_75(& intf_mutex);
  {
    
#line 962 
    struct list_head const *__mptr = (struct list_head const *)intf_list.next;
    
#line 962 
    tmp = (struct mlx5_interface *)__mptr + 18446744073709551576U;
  }
  
#line 962 
  intf = tmp;
  
#line 962 
  goto ldv_42200;
  ldv_42199: 
#line 963 
  ;
  
#line 963 
  mlx5_remove_device(intf,priv);
  {
    
#line 962 
    struct list_head const *__mptr_0 = (struct list_head const *)intf->list.next;
    
#line 962 
    tmp_0 = (struct mlx5_interface *)__mptr_0 + 18446744073709551576U;
  }
  
#line 962 
  intf = tmp_0;
  ldv_42200: 
#line 964 
  ;
  
#line 962 
  if (& intf->list != & intf_list) 
#line 964 
                                   goto ldv_42199; else 
#line 967 
                                                        goto ldv_42201;
  ldv_42201: 
#line 968 
  ;
  
#line 964 
  list_del(& priv->dev_list);
  
#line 965 
  ldv_mutex_unlock_76(& intf_mutex);
  
#line 966 
  return;
}


#line 968  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/main.c"
int mlx5_register_interface(struct mlx5_interface *intf)
{
  int __retres;
  struct mlx5_priv *priv;
  struct mlx5_priv *tmp;
  struct mlx5_priv *tmp_0;
  
#line 972 
  if (intf->add == (void *(*)(struct mlx5_core_dev *))0 || intf->remove == (void (*)(struct mlx5_core_dev *, void *))0) {
    
#line 973 
    __retres = -22;
    
#line 973 
    goto return_label;
  }
  else ;
  
#line 975 
  ldv_mutex_lock_77(& intf_mutex);
  
#line 976 
  list_add_tail(& intf->list,& intf_list);
  {
    
#line 977 
    struct list_head const *__mptr = (struct list_head const *)dev_list.next;
    
#line 977 
    tmp = (struct mlx5_priv *)__mptr + 18446744073709550072U;
  }
  
#line 977 
  priv = tmp;
  
#line 977 
  goto ldv_42211;
  ldv_42210: 
#line 978 
  ;
  
#line 978 
  mlx5_add_device(intf,priv);
  {
    
#line 977 
    struct list_head const *__mptr_0 = (struct list_head const *)priv->dev_list.next;
    
#line 977 
    tmp_0 = (struct mlx5_priv *)__mptr_0 + 18446744073709550072U;
  }
  
#line 977 
  priv = tmp_0;
  ldv_42211: 
#line 979 
  ;
  
#line 977 
  if (& priv->dev_list != & dev_list) 
#line 979 
                                      goto ldv_42210; else 
#line 982 
                                                           goto ldv_42212;
  ldv_42212: 
#line 983 
  ;
  
#line 979 
  ldv_mutex_unlock_78(& intf_mutex);
  
#line 981 
  __retres = 0;
  return_label: 
#line 981 
                return __retres;
}


#line 983  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/main.c"
static char const __kstrtab_mlx5_register_interface[24U] = {(char)'m', (char)'l', (char)'x', (char)'5', (char)'_', (char)'r', (char)'e', (char)'g', (char)'i', (char)'s', (char)'t', (char)'e', (char)'r', (char)'_', (char)'i', (char)'n', (char)'t', (char)'e', (char)'r', (char)'f', (char)'a', (char)'c', (char)'e', (char)'\000'};

#line 983 
struct kernel_symbol const __ksymtab_mlx5_register_interface;


#line 983  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/main.c"
struct kernel_symbol const __ksymtab_mlx5_register_interface = {.value = (unsigned long)(& mlx5_register_interface), .name = (char const *)(& __kstrtab_mlx5_register_interface)};

#line 985  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/main.c"
void mlx5_unregister_interface(struct mlx5_interface *intf)
{
  struct mlx5_priv *priv;
  struct mlx5_priv *tmp;
  struct mlx5_priv *tmp_0;
  
#line 989 
  ldv_mutex_lock_79(& intf_mutex);
  {
    
#line 990 
    struct list_head const *__mptr = (struct list_head const *)dev_list.next;
    
#line 990 
    tmp = (struct mlx5_priv *)__mptr + 18446744073709550072U;
  }
  
#line 990 
  priv = tmp;
  
#line 990 
  goto ldv_42229;
  ldv_42228: 
#line 991 
  ;
  
#line 991 
  mlx5_remove_device(intf,priv);
  {
    
#line 990 
    struct list_head const *__mptr_0 = (struct list_head const *)priv->dev_list.next;
    
#line 990 
    tmp_0 = (struct mlx5_priv *)__mptr_0 + 18446744073709550072U;
  }
  
#line 990 
  priv = tmp_0;
  ldv_42229: 
#line 992 
  ;
  
#line 990 
  if (& priv->dev_list != & dev_list) 
#line 992 
                                      goto ldv_42228; else 
#line 995 
                                                           goto ldv_42230;
  ldv_42230: 
#line 996 
  ;
  
#line 992 
  list_del(& intf->list);
  
#line 993 
  ldv_mutex_unlock_80(& intf_mutex);
  
#line 994 
  return;
}


#line 995  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/main.c"
static char const __kstrtab_mlx5_unregister_interface[26U] = {(char)'m', (char)'l', (char)'x', (char)'5', (char)'_', (char)'u', (char)'n', (char)'r', (char)'e', (char)'g', (char)'i', (char)'s', (char)'t', (char)'e', (char)'r', (char)'_', (char)'i', (char)'n', (char)'t', (char)'e', (char)'r', (char)'f', (char)'a', (char)'c', (char)'e', (char)'\000'};

#line 995 
struct kernel_symbol const __ksymtab_mlx5_unregister_interface;


#line 995  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/main.c"
struct kernel_symbol const __ksymtab_mlx5_unregister_interface = {.value = (unsigned long)(& mlx5_unregister_interface), .name = (char const *)(& __kstrtab_mlx5_unregister_interface)};

#line 997  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/main.c"
void *mlx5_get_protocol_dev(struct mlx5_core_dev *mdev, int protocol)
{
  struct mlx5_device_context *dev_ctx;
  unsigned long flags;
  struct mlx5_device_context *tmp;
  struct mlx5_device_context *tmp_0;
  
#line 999 
  struct mlx5_priv *priv = & mdev->priv;
  
#line 1002 
  void *result = (void *)0;
  
#line 1004 
  ldv___ldv_spin_lock_81(& priv->ctx_lock);
  {
    
#line 1006 
    struct list_head const *__mptr = (struct list_head const *)mdev->priv.ctx_list.next;
    
#line 1006 
    tmp = (struct mlx5_device_context *)__mptr;
  }
  
#line 1006 
  dev_ctx = tmp;
  
#line 1006 
  goto ldv_42252;
  ldv_42251: 
#line 1007 
  ;
  
#line 1007 
  if ((dev_ctx->intf)->protocol == protocol && (dev_ctx->intf)->get_dev != (void *(*)(void *))0) {
    
#line 1009 
    result = (*((dev_ctx->intf)->get_dev))(dev_ctx->context);
    
#line 1010 
    goto ldv_42250;
  }
  else ;
  {
    
#line 1006 
    struct list_head const *__mptr_0 = (struct list_head const *)dev_ctx->list.next;
    
#line 1006 
    tmp_0 = (struct mlx5_device_context *)__mptr_0;
  }
  
#line 1006 
  dev_ctx = tmp_0;
  ldv_42252: 
#line 1008 
  ;
  
#line 1006 
  if (& dev_ctx->list != & mdev->priv.ctx_list) 
#line 1008 
                                                goto ldv_42251; else 
                                                                  
#line 1011 
                                                                  goto ldv_42250;
  ldv_42250: 
#line 1012 
  ;
  
#line 1013 
  ldv_spin_unlock_irqrestore_82(& priv->ctx_lock,flags);
  
#line 1015 
  return result;
}


#line 1017  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/main.c"
static char const __kstrtab_mlx5_get_protocol_dev[22U] = {(char)'m', (char)'l', (char)'x', (char)'5', (char)'_', (char)'g', (char)'e', (char)'t', (char)'_', (char)'p', (char)'r', (char)'o', (char)'t', (char)'o', (char)'c', (char)'o', (char)'l', (char)'_', (char)'d', (char)'e', (char)'v', (char)'\000'};

#line 1017 
struct kernel_symbol const __ksymtab_mlx5_get_protocol_dev;


#line 1017  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/main.c"
struct kernel_symbol const __ksymtab_mlx5_get_protocol_dev = {.value = (unsigned long)(& mlx5_get_protocol_dev), .name = (char const *)(& __kstrtab_mlx5_get_protocol_dev)};

#line 1019  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/main.c"
static void mlx5_core_event(struct mlx5_core_dev *dev, enum mlx5_dev_event event, unsigned long param)
{
  struct mlx5_device_context *dev_ctx;
  unsigned long flags;
  struct mlx5_device_context *tmp;
  struct mlx5_device_context *tmp_0;
  
#line 1022 
  struct mlx5_priv *priv = & dev->priv;
  
#line 1026 
  ldv___ldv_spin_lock_83(& priv->ctx_lock);
  {
    
#line 1028 
    struct list_head const *__mptr = (struct list_head const *)priv->ctx_list.next;
    
#line 1028 
    tmp = (struct mlx5_device_context *)__mptr;
  }
  
#line 1028 
  dev_ctx = tmp;
  
#line 1028 
  goto ldv_42274;
  ldv_42273: 
#line 1029 
  ;
  
#line 1029 
  if ((dev_ctx->intf)->event != (void (*)(struct mlx5_core_dev *, void *, enum mlx5_dev_event , unsigned long ))0) 
    
#line 1030 
    (*((dev_ctx->intf)->event))(dev,dev_ctx->context,event,param); else ;
  {
    
#line 1028 
    struct list_head const *__mptr_0 = (struct list_head const *)dev_ctx->list.next;
    
#line 1028 
    tmp_0 = (struct mlx5_device_context *)__mptr_0;
  }
  
#line 1028 
  dev_ctx = tmp_0;
  ldv_42274: 
#line 1030 
  ;
  
#line 1028 
  if (& dev_ctx->list != & priv->ctx_list) 
#line 1030 
                                           goto ldv_42273; else 
#line 1033 
                                                                goto ldv_42275;
  ldv_42275: 
#line 1034 
  ;
  
#line 1032 
  ldv_spin_unlock_irqrestore_84(& priv->ctx_lock,flags);
  
#line 1033 
  return;
}


#line 1043  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/main.c"
static int init_one(struct pci_dev *pdev, struct pci_device_id const *id)
{
  int __retres;
  struct mlx5_core_dev *dev;
  struct mlx5_priv *priv;
  int err;
  
#line 1050 
  dev = (struct mlx5_core_dev *)kzalloc_4(329944UL,208U);
  
#line 1051 
  if (dev == (struct mlx5_core_dev *)0) {
    
#line 1052 
    dev_err((struct device const *)(& pdev->dev),"kzalloc failed\n");
    
#line 1053 
    __retres = -12;
    
#line 1053 
    goto return_label;
  }
  else ;
  
#line 1055 
  priv = & dev->priv;
  
#line 1057 
  pci_set_drvdata(pdev,(void *)dev);
  
#line 1059 
  if ((unsigned int)prof_sel > 2U) {
    
#line 1060 
    printk("\001",2);
    
#line 1062 
    prof_sel = 2;
  }
  else ;
  
#line 1064 
  dev->profile = & profile[prof_sel];
  
#line 1065 
  dev->event = & mlx5_core_event;
  
#line 1067 
  INIT_LIST_HEAD(& priv->ctx_list);
  
#line 1068 
  spinlock_check(& priv->ctx_lock);
  {
    struct lock_class_key __key;
    
#line 1068 
    __raw_spin_lock_init(& priv->ctx_lock.__anonCompField_spinlock_18.rlock,"&(&priv->ctx_lock)->rlock",& __key);
  }
  
#line 1069 
  err = mlx5_dev_init(dev,pdev);
  
#line 1070 
  if (err != 0) {
    
#line 1071 
    dev_err((struct device const *)(& pdev->dev),"mlx5_dev_init failed %d\n",err);
    
#line 1072 
    goto out;
  }
  else ;
  
#line 1075 
  err = mlx5_register_device(dev);
  
#line 1076 
  if (err != 0) {
    
#line 1077 
    dev_err((struct device const *)(& pdev->dev),"mlx5_register_device failed %d\n",err);
    
#line 1078 
    goto out_init;
  }
  else ;
  
#line 1081 
  err = __request_module((_Bool)0,"mlx5_ib");
  
#line 1082 
  if (err != 0) 
#line 1083 
                printk("\001",(char *)"mlx5_ib"); else ;
  
#line 1085 
  __retres = 0;
  
#line 1085 
  goto return_label;
  out_init: 
#line 1087 
  ;
  
#line 1088 
  mlx5_dev_cleanup(dev);
  out: 
#line 1089 
  ;
  
#line 1090 
  kfree((void const *)dev);
  
#line 1091 
  __retres = err;
  return_label: 
#line 1091 
                return __retres;
}


#line 1093  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/main.c"
static void remove_one(struct pci_dev *pdev)
{
  
#line 1095 
  struct mlx5_core_dev *dev = pci_get_drvdata(pdev);
  
#line 1097 
  mlx5_unregister_device(dev);
  
#line 1098 
  mlx5_dev_cleanup(dev);
  
#line 1099 
  kfree((void const *)dev);
  
#line 1100 
  return;
}


#line 1102  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/main.c"
static struct pci_device_id const mlx5_core_pci_table[7U] = {{.vendor = 5555U, .device = 4113U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}, {.vendor = 5555U, .device = 4114U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}, {.vendor = 5555U, .device = 4115U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}, {.vendor = 5555U, .device = 4116U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}, {.vendor = 5555U, .device = 4117U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}, {.vendor = 5555U, .device = 4118U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}, {.vendor = 0U, .device = 0U, .subvendor = 0U, .subdevice = 0U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}};

#line 1112  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/main.c"
struct pci_device_id const __mod_pci__mlx5_core_pci_table_device_table[7U];

#line 1114  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/main.c"
static struct pci_driver mlx5_core_driver = {.node = {.next = (struct list_head *)0, .prev = (struct list_head *)0}, .name = "mlx5_core", .id_table = (struct pci_device_id const *)(& mlx5_core_pci_table), .probe = & init_one, .remove = & remove_one, .suspend = (int (*)(struct pci_dev *, pm_message_t ))0, .suspend_late = (int (*)(struct pci_dev *, pm_message_t ))0, .resume_early = (int (*)(struct pci_dev *))0, .resume = (int (*)(struct pci_dev *))0, .shutdown = (void (*)(struct pci_dev *))0, .sriov_configure = (int (*)(struct pci_dev *, int ))0, .err_handler = (struct pci_error_handlers const *)0, .driver = {.name = (char const *)0, .bus = (struct bus_type *)0, .owner = (struct module *)0, .mod_name = (char const *)0, .suppress_bind_attrs = (_Bool)0, .probe_type = 0, .of_match_table = (struct of_device_id const *)0, .acpi_match_table = (struct acpi_device_id const *)0, .probe = (int (*)(struct device *))0, .remove = (int (*)(struct device *))0, .shutdown = (void (*)(struct device *))0, .suspend = (int (*)(struct device *, pm_message_t ))0, .resume = (int (*)(struct device *))0, .groups = (struct attribute_group const **)0, .pm = (struct dev_pm_ops const *)0, .p = (struct driver_private *)0}, .dynids = {.lock = {.__anonCompField_spinlock_18 = {.rlock = {.raw_lock = {.val = {.counter = 0}}, .magic = 0U, .owner_cpu = 0U, .owner = (void *)0, .dep_map = {.key = (struct lock_class_key *)0, .class_cache = {(struct lock_class *)0, (struct lock_class *)0}, .name = (char const *)0, .cpu = 0, .ip = 0UL}}}}, .list = {.next = (struct list_head *)0, .prev = (struct list_head *)0}}};

#line 1121  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/main.c"
static int init(void)
{
  int __retres;
  int err;
  struct workqueue_struct *tmp_0;
  
#line 1125 
  mlx5_register_debugfs();
  {
    struct lock_class_key __key;
    char const *__lock_name;
    
#line 1126 
    __lock_name = "\"%s\"";
    
#line 1126 
    tmp_0 = __alloc_workqueue_key("%s",131082U,1,& __key,__lock_name,(char *)"mlx5_core_wq");
  }
  
#line 1126 
  mlx5_core_wq = tmp_0;
  
#line 1127 
  if (mlx5_core_wq == (struct workqueue_struct *)0) {
    
#line 1128 
    err = -12;
    
#line 1129 
    goto err_debug;
  }
  else ;
  
#line 1131 
  mlx5_health_init();
  
#line 1133 
  err = ldv___pci_register_driver_85(& mlx5_core_driver,& __this_module,"mlx5_core");
  
#line 1134 
  if (err != 0) 
#line 1135 
                goto err_health; else ;
  
#line 1138 
  mlx5e_init();
  
#line 1141 
  __retres = 0;
  
#line 1141 
  goto return_label;
  err_health: 
#line 1143 
  ;
  
#line 1144 
  mlx5_health_cleanup();
  
#line 1145 
  destroy_workqueue(mlx5_core_wq);
  err_debug: 
#line 1146 
  ;
  
#line 1147 
  mlx5_unregister_debugfs();
  
#line 1148 
  __retres = err;
  return_label: 
#line 1148 
                return __retres;
}


#line 1151  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/main.c"
static void cleanup(void)
{
  
#line 1154 
  mlx5e_cleanup();
  
#line 1156 
  ldv_pci_unregister_driver_86(& mlx5_core_driver);
  
#line 1157 
  mlx5_health_cleanup();
  
#line 1158 
  destroy_workqueue(mlx5_core_wq);
  
#line 1159 
  mlx5_unregister_debugfs();
  
#line 1160 
  return;
}


#line 56  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_main.c.aux"
struct pci_driver *ldv_emg_alias_mlx5_core_driver_2 = & mlx5_core_driver;

#line 62 
int ldv_emg___pci_register_driver(struct pci_driver *arg0, struct module *arg1, char *arg2);


#line 67 
void ldv_emg_pci_unregister_driver(struct pci_driver *arg0);


#line 73  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_main.c.aux"
void ldv_emg_wrapper_remove_one_3(struct pci_dev *arg0)
{
  
#line 74 
  remove_one(arg0);
  
#line 75 
  return;
}


#line 78  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_main.c.aux"
int ldv_emg_init(void)
{
  int tmp;
  
#line 79 
  tmp = init();
  
#line 79 
  return tmp;
}


#line 82  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_main.c.aux"
void ldv_emg_cleanup(void)
{
  
#line 83 
  cleanup();
  
#line 84 
  return;
}


#line 86  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_main.c.aux"
int ldv_emg_wrapper_init_one_2(struct pci_dev *arg0, struct pci_device_id *arg1)
{
  int tmp;
  
#line 87 
  tmp = init_one(arg0,(struct pci_device_id const *)arg1);
  
#line 87 
  return tmp;
}


#line 503  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_main.c.aux"
static void *kmalloc_0(size_t size, gfp_t flags)
{
  void *tmp;
  
#line 506 
  tmp = ldv_kmalloc(size,flags);
  
#line 506 
  return tmp;
}


#line 517  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_main.c.aux"
static void *kcalloc_1(size_t n, size_t size, gfp_t flags)
{
  void *tmp;
  
#line 520 
  tmp = ldv_kcalloc(n,size,flags);
  
#line 520 
  return tmp;
}


#line 524  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_main.c.aux"
static void *kzalloc_4(size_t size, gfp_t flags)
{
  void *tmp;
  
#line 527 
  tmp = ldv_kzalloc(size,flags);
  
#line 527 
  return tmp;
}


#line 617  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_main.c.aux"
static void ldv_spin_lock_59_0(spinlock_t *lock)
{
  
#line 621 
  ldv_spin_model_lock((char *)"lock_of_mlx5_eq_table");
  
#line 623 
  spin_lock_2(lock);
  
#line 624 
  return;
}


#line 627  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_main.c.aux"
static void ldv_spin_unlock_60_0(spinlock_t *lock)
{
  
#line 631 
  ldv_spin_model_unlock((char *)"lock_of_mlx5_eq_table");
  
#line 633 
  spin_unlock_2(lock);
  
#line 634 
  return;
}


#line 637  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_main.c.aux"
static void ldv_spin_lock_61(spinlock_t *lock)
{
  
#line 641 
  ldv_spin_model_lock((char *)"lock_of_mlx5_eq_table");
  
#line 643 
  spin_lock_2(lock);
  
#line 644 
  return;
}


#line 647  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_main.c.aux"
static void ldv_spin_unlock_62(spinlock_t *lock)
{
  
#line 651 
  ldv_spin_model_unlock((char *)"lock_of_mlx5_eq_table");
  
#line 653 
  spin_unlock_2(lock);
  
#line 654 
  return;
}


#line 657  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_main.c.aux"
static void ldv_spin_lock_63(spinlock_t *lock)
{
  
#line 661 
  ldv_spin_model_lock((char *)"lock_of_mlx5_eq_table");
  
#line 663 
  spin_lock_2(lock);
  
#line 664 
  return;
}


#line 667  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_main.c.aux"
static void ldv_spin_unlock_64(spinlock_t *lock)
{
  
#line 671 
  ldv_spin_model_unlock((char *)"lock_of_mlx5_eq_table");
  
#line 673 
  spin_unlock_2(lock);
  
#line 674 
  return;
}


#line 677  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_main.c.aux"
static void ldv_spin_lock_65(spinlock_t *lock)
{
  
#line 681 
  ldv_spin_model_lock((char *)"lock_of_mlx5_eq_table");
  
#line 683 
  spin_lock_2(lock);
  
#line 684 
  return;
}


#line 687  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_main.c.aux"
static void ldv_spin_unlock_66(spinlock_t *lock)
{
  
#line 691 
  ldv_spin_model_unlock((char *)"lock_of_mlx5_eq_table");
  
#line 693 
  spin_unlock_2(lock);
  
#line 694 
  return;
}


#line 697  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_main.c.aux"
static void ldv_debugfs_remove_67(struct dentry *ldv_func_arg1)
{
  
#line 701 
  ldv_emg_debugfs_remove(ldv_func_arg1);
  
#line 702 
  return;
}


#line 705  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_main.c.aux"
static void ldv_debugfs_remove_68(struct dentry *ldv_func_arg1)
{
  
#line 709 
  ldv_emg_debugfs_remove(ldv_func_arg1);
  
#line 710 
  return;
}


#line 713  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_main.c.aux"
static void ldv_spin_lock_irq_69(spinlock_t *lock)
{
  
#line 717 
  ldv_spin_model_lock((char *)"ctx_lock_of_mlx5_priv");
  
#line 719 
  spin_lock_irq_3(lock);
  
#line 720 
  return;
}


#line 723  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_main.c.aux"
static void ldv_spin_unlock_irq_70(spinlock_t *lock)
{
  
#line 727 
  ldv_spin_model_unlock((char *)"ctx_lock_of_mlx5_priv");
  
#line 729 
  spin_unlock_irq_3(lock);
  
#line 730 
  return;
}


#line 733  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_main.c.aux"
static void ldv_spin_lock_irq_71(spinlock_t *lock)
{
  
#line 737 
  ldv_spin_model_lock((char *)"ctx_lock_of_mlx5_priv");
  
#line 739 
  spin_lock_irq_3(lock);
  
#line 740 
  return;
}


#line 743  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_main.c.aux"
static void ldv_spin_unlock_irq_72(spinlock_t *lock)
{
  
#line 747 
  ldv_spin_model_unlock((char *)"ctx_lock_of_mlx5_priv");
  
#line 749 
  spin_unlock_irq_3(lock);
  
#line 750 
  return;
}


#line 753  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_main.c.aux"
static void ldv_mutex_lock_73(struct mutex *ldv_func_arg1)
{
  
#line 757 
  ldv_mutex_model_lock(ldv_func_arg1,(char *)"intf_mutex");
  
#line 758 
  return;
}


#line 761  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_main.c.aux"
static void ldv_mutex_unlock_74(struct mutex *ldv_func_arg1)
{
  
#line 765 
  ldv_mutex_model_unlock(ldv_func_arg1,(char *)"intf_mutex");
  
#line 766 
  return;
}


#line 769  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_main.c.aux"
static void ldv_mutex_lock_75(struct mutex *ldv_func_arg1)
{
  
#line 773 
  ldv_mutex_model_lock(ldv_func_arg1,(char *)"intf_mutex");
  
#line 774 
  return;
}


#line 777  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_main.c.aux"
static void ldv_mutex_unlock_76(struct mutex *ldv_func_arg1)
{
  
#line 781 
  ldv_mutex_model_unlock(ldv_func_arg1,(char *)"intf_mutex");
  
#line 782 
  return;
}


#line 785  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_main.c.aux"
static void ldv_mutex_lock_77(struct mutex *ldv_func_arg1)
{
  
#line 789 
  ldv_mutex_model_lock(ldv_func_arg1,(char *)"intf_mutex");
  
#line 790 
  return;
}


#line 793  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_main.c.aux"
static void ldv_mutex_unlock_78(struct mutex *ldv_func_arg1)
{
  
#line 797 
  ldv_mutex_model_unlock(ldv_func_arg1,(char *)"intf_mutex");
  
#line 798 
  return;
}


#line 801  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_main.c.aux"
static void ldv_mutex_lock_79(struct mutex *ldv_func_arg1)
{
  
#line 805 
  ldv_mutex_model_lock(ldv_func_arg1,(char *)"intf_mutex");
  
#line 806 
  return;
}


#line 809  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_main.c.aux"
static void ldv_mutex_unlock_80(struct mutex *ldv_func_arg1)
{
  
#line 813 
  ldv_mutex_model_unlock(ldv_func_arg1,(char *)"intf_mutex");
  
#line 814 
  return;
}


#line 817  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_main.c.aux"
static void ldv___ldv_spin_lock_81(spinlock_t *ldv_func_arg1)
{
  
#line 821 
  ldv_spin_model_lock((char *)"ctx_lock_of_mlx5_priv");
  
#line 823 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 824 
  return;
}


#line 827  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_main.c.aux"
static void ldv_spin_unlock_irqrestore_82(spinlock_t *lock, unsigned long flags)
{
  
#line 831 
  ldv_spin_model_unlock((char *)"ctx_lock_of_mlx5_priv");
  
#line 833 
  spin_unlock_irqrestore_1(lock,flags);
  
#line 834 
  return;
}


#line 837  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_main.c.aux"
static void ldv___ldv_spin_lock_83(spinlock_t *ldv_func_arg1)
{
  
#line 841 
  ldv_spin_model_lock((char *)"ctx_lock_of_mlx5_priv");
  
#line 843 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 844 
  return;
}


#line 847  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_main.c.aux"
static void ldv_spin_unlock_irqrestore_84(spinlock_t *lock, unsigned long flags)
{
  
#line 851 
  ldv_spin_model_unlock((char *)"ctx_lock_of_mlx5_priv");
  
#line 853 
  spin_unlock_irqrestore_1(lock,flags);
  
#line 854 
  return;
}


#line 857  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_main.c.aux"
static int ldv___pci_register_driver_85(struct pci_driver *ldv_func_arg1, struct module *ldv_func_arg2, char const *ldv_func_arg3)
{
  int tmp;
  
#line 861 
  tmp = ldv_emg___pci_register_driver(ldv_func_arg1,ldv_func_arg2,(char *)ldv_func_arg3);
  
#line 861 
  return tmp;
}


#line 865  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_main.c.aux"
static void ldv_pci_unregister_driver_86(struct pci_driver *ldv_func_arg1)
{
  
#line 869 
  ldv_emg_pci_unregister_driver(ldv_func_arg1);
  
#line 870 
  return;
}

void __builtin_unreachable(void);


#line 295  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/percpu-defs.h"
void __bad_size_call_parameter(void);


#line 172  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cpumask.h"
__inline static unsigned int cpumask_first(struct cpumask const *srcp)
{
  unsigned int __retres;
  unsigned long tmp;
  
#line 174 
  tmp = find_first_bit((unsigned long const *)(& srcp->bits),(unsigned long)nr_cpu_ids);
  
#line 174 
  __retres = (unsigned int)tmp;
  
#line 174 
  return __retres;
}


#line 754 
extern unsigned long const cpu_bit_bitmap[65U][128U];


#line 756  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cpumask.h"
__inline static struct cpumask const *get_cpu_mask(unsigned int cpu)
{
  struct cpumask const *__retres;
  
#line 758 
  unsigned long const *p = (unsigned long const *)(& cpu_bit_bitmap[(cpu & 63U) + 1U]);
  
#line 759 
  p += - (cpu / 64U);
  
#line 760 
  __retres = (struct cpumask const *)p;
  
#line 760 
  return __retres;
}


#line 310  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_lock_3(spinlock_t *lock)
{
  
#line 312 
  _raw_spin_lock(& lock->__anonCompField_spinlock_18.rlock);
  
#line 313 
  return;
}


#line 358 
static void ldv_spin_lock_79(spinlock_t *lock);


#line 359  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_lock_bh_0(spinlock_t *lock)
{
  
#line 361 
  _raw_spin_lock_bh(& lock->__anonCompField_spinlock_18.rlock);
  
#line 362 
  return;
}


#line 379 
static void ldv_spin_lock_bh_62(spinlock_t *lock);


#line 383 
static void ldv_spin_lock_bh_70_0(spinlock_t *lock);


#line 344  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_lock_irq_4(spinlock_t *lock)
{
  
#line 346 
  _raw_spin_lock_irq(& lock->__anonCompField_spinlock_18.rlock);
  
#line 347 
  return;
}


#line 366 
static void ldv_spin_lock_irq_81(spinlock_t *lock);


#line 367  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_unlock_3(spinlock_t *lock)
{
  
#line 369 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_18.rlock);
  
#line 370 
  return;
}


#line 411 
static void ldv_spin_unlock_80(spinlock_t *lock);


#line 412  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_unlock_bh_0(spinlock_t *lock)
{
  
#line 414 
  _raw_spin_unlock_bh(& lock->__anonCompField_spinlock_18.rlock);
  
#line 415 
  return;
}


#line 432 
static void ldv_spin_unlock_bh_65(spinlock_t *lock);


#line 436 
static void ldv_spin_unlock_bh_72_0(spinlock_t *lock);


#line 437  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_unlock_irq_4(spinlock_t *lock)
{
  
#line 439 
  _raw_spin_unlock_irq(& lock->__anonCompField_spinlock_18.rlock);
  
#line 440 
  return;
}


#line 453 
static void ldv_spin_unlock_irq_82(spinlock_t *lock);


#line 37  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_en_main.c.aux"
static void ldv_mutex_lock_73_0(struct mutex *ldv_func_arg1);


#line 41 
static void ldv_mutex_lock_75_0(struct mutex *ldv_func_arg1);


#line 45 
static void ldv_mutex_lock_84(struct mutex *ldv_func_arg1);


#line 49 
static void ldv_mutex_lock_86(struct mutex *ldv_func_arg1);


#line 53 
static void ldv_mutex_lock_91(struct mutex *ldv_func_arg1);


#line 57 
static void ldv_mutex_lock_93(struct mutex *ldv_func_arg1);


#line 141  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mutex.h"
static int ldv_mutex_is_locked_88(struct mutex *lock);


#line 193 
static void ldv_mutex_unlock_74_0(struct mutex *ldv_func_arg1);


#line 197 
static void ldv_mutex_unlock_77_0(struct mutex *ldv_func_arg1);


#line 201 
static void ldv_mutex_unlock_85(struct mutex *ldv_func_arg1);


#line 205 
static void ldv_mutex_unlock_87(struct mutex *ldv_func_arg1);


#line 209 
static void ldv_mutex_unlock_92(struct mutex *ldv_func_arg1);


#line 213 
static void ldv_mutex_unlock_94(struct mutex *ldv_func_arg1);


#line 88  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timer.h"
void init_timer_key(struct timer_list *, unsigned int, char const *, struct lock_class_key *);


#line 20  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/workqueue.h"
void delayed_work_timer_fn(unsigned long);


#line 136  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/workqueue.h"
__inline static struct delayed_work *to_delayed_work(struct work_struct *work)
{
  struct delayed_work *tmp;
  {
    
#line 138 
    struct work_struct const *__mptr = (struct work_struct const *)work;
    
#line 138 
    tmp = (struct delayed_work *)__mptr;
  }
  
#line 138 
  return tmp;
}


#line 352 
extern struct workqueue_struct *system_wq;


#line 560 
static bool ldv_schedule_work_78(struct work_struct *work);


#line 564 
static bool ldv_schedule_work_89(struct work_struct *work);


#line 568 
static bool ldv_schedule_work_90(struct work_struct *work);


#line 569  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/workqueue.h"
__inline static void flush_scheduled_work(void)
{
  
#line 571 
  flush_workqueue(system_wq);
  
#line 572 
  return;
}


#line 597 
static bool ldv_schedule_delayed_work_76(struct delayed_work *dwork, unsigned long delay);


#line 601 
static bool ldv_schedule_delayed_work_83(struct delayed_work *dwork, unsigned long delay);


#line 57  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/topology.h"
int __cpu_to_node(int);


#line 91  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/io.h"
__inline static void writeq(unsigned long val, void volatile *addr)
{
  
#line 93 
  ldv_inline_asm();
  
#line 94 
  return;
}


#line 233  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/slab.h"
extern struct kmem_cache *kmalloc_caches[14U];


#line 246  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/slab.h"
__inline static int kmalloc_index(size_t size)
{
  int __retres;
  
#line 248 
  if (size == 0UL) {
    
#line 249 
    __retres = 0;
    
#line 249 
    goto return_label;
  }
  else ;
  
#line 251 
  if (size <= 8UL) {
    
#line 252 
    __retres = 3;
    
#line 252 
    goto return_label;
  }
  else ;
  
#line 254 
  if (size + 18446744073709551551UL <= 31UL) {
    
#line 255 
    __retres = 1;
    
#line 255 
    goto return_label;
  }
  else ;
  
#line 256 
  if (size + 18446744073709551487UL <= 63UL) {
    
#line 257 
    __retres = 2;
    
#line 257 
    goto return_label;
  }
  else ;
  
#line 258 
  if (size <= 8UL) {
    
#line 258 
    __retres = 3;
    
#line 258 
    goto return_label;
  }
  else ;
  
#line 259 
  if (size <= 16UL) {
    
#line 259 
    __retres = 4;
    
#line 259 
    goto return_label;
  }
  else ;
  
#line 260 
  if (size <= 32UL) {
    
#line 260 
    __retres = 5;
    
#line 260 
    goto return_label;
  }
  else ;
  
#line 261 
  if (size <= 64UL) {
    
#line 261 
    __retres = 6;
    
#line 261 
    goto return_label;
  }
  else ;
  
#line 262 
  if (size <= 128UL) {
    
#line 262 
    __retres = 7;
    
#line 262 
    goto return_label;
  }
  else ;
  
#line 263 
  if (size <= 256UL) {
    
#line 263 
    __retres = 8;
    
#line 263 
    goto return_label;
  }
  else ;
  
#line 264 
  if (size <= 512UL) {
    
#line 264 
    __retres = 9;
    
#line 264 
    goto return_label;
  }
  else ;
  
#line 265 
  if (size <= 1024UL) {
    
#line 265 
    __retres = 10;
    
#line 265 
    goto return_label;
  }
  else ;
  
#line 266 
  if (size <= 2048UL) {
    
#line 266 
    __retres = 11;
    
#line 266 
    goto return_label;
  }
  else ;
  
#line 267 
  if (size <= 4096UL) {
    
#line 267 
    __retres = 12;
    
#line 267 
    goto return_label;
  }
  else ;
  
#line 268 
  if (size <= 8192UL) {
    
#line 268 
    __retres = 13;
    
#line 268 
    goto return_label;
  }
  else ;
  
#line 269 
  if (size <= 16384UL) {
    
#line 269 
    __retres = 14;
    
#line 269 
    goto return_label;
  }
  else ;
  
#line 270 
  if (size <= 32768UL) {
    
#line 270 
    __retres = 15;
    
#line 270 
    goto return_label;
  }
  else ;
  
#line 271 
  if (size <= 65536UL) {
    
#line 271 
    __retres = 16;
    
#line 271 
    goto return_label;
  }
  else ;
  
#line 272 
  if (size <= 131072UL) {
    
#line 272 
    __retres = 17;
    
#line 272 
    goto return_label;
  }
  else ;
  
#line 273 
  if (size <= 262144UL) {
    
#line 273 
    __retres = 18;
    
#line 273 
    goto return_label;
  }
  else ;
  
#line 274 
  if (size <= 524288UL) {
    
#line 274 
    __retres = 19;
    
#line 274 
    goto return_label;
  }
  else ;
  
#line 275 
  if (size <= 1048576UL) {
    
#line 275 
    __retres = 20;
    
#line 275 
    goto return_label;
  }
  else ;
  
#line 276 
  if (size <= 2097152UL) {
    
#line 276 
    __retres = 21;
    
#line 276 
    goto return_label;
  }
  else ;
  
#line 277 
  if (size <= 4194304UL) {
    
#line 277 
    __retres = 22;
    
#line 277 
    goto return_label;
  }
  else ;
  
#line 278 
  if (size <= 8388608UL) {
    
#line 278 
    __retres = 23;
    
#line 278 
    goto return_label;
  }
  else ;
  
#line 279 
  if (size <= 16777216UL) {
    
#line 279 
    __retres = 24;
    
#line 279 
    goto return_label;
  }
  else ;
  
#line 280 
  if (size <= 33554432UL) {
    
#line 280 
    __retres = 25;
    
#line 280 
    goto return_label;
  }
  else ;
  
#line 281 
  if (size <= 67108864UL) {
    
#line 281 
    __retres = 26;
    
#line 281 
    goto return_label;
  }
  else ;
  
#line 282 
  ldv_inline_asm();
  
#line 282 
  ;
  
#line 285 
  __retres = -1;
  return_label: 
#line 285 
                return __retres;
}


#line 294 
void *__kmalloc_node(size_t, gfp_t, int);


#line 312 
void *kmem_cache_alloc_node_trace(struct kmem_cache *, gfp_t, int, size_t);


#line 462  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/slab.h"
__inline static void *kmalloc_node(size_t size, gfp_t flags, int node)
{
  void *__retres;
  void *tmp_1;
  
#line 465 
  if ((0 != 0 && size <= 8192UL) && (flags & 1U) == 0U) {
    void *tmp_0;
    
#line 467 
    int i = kmalloc_index(size);
    
#line 469 
    if (i == 0) {
      
#line 470 
      __retres = (void *)16;
      
#line 470 
      goto return_label;
    }
    else ;
    
#line 472 
    tmp_0 = kmem_cache_alloc_node_trace(kmalloc_caches[i],flags,node,size);
    
#line 472 
    __retres = tmp_0;
    
#line 472 
    goto return_label;
  }
  else ;
  
#line 476 
  tmp_1 = __kmalloc_node(size,flags,node);
  
#line 476 
  __retres = tmp_1;
  return_label: 
#line 476 
                return __retres;
}


#line 542 
static void *kcalloc_2(size_t n, size_t size, gfp_t flags);


#line 581 
static void *kzalloc_5(size_t size, gfp_t flags);


#line 596  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/slab.h"
__inline static void *kzalloc_node(size_t size, gfp_t flags, int node)
{
  void *tmp;
  
#line 598 
  tmp = kmalloc_node(size,flags | 32768U,node);
  
#line 598 
  return tmp;
}


#line 49  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/doorbell.h"
__inline static void mlx5_write64(__be32 *val, void *dest, spinlock_t *doorbell_lock)
{
  
#line 52 
  writeq((unsigned long)*((u64 *)val),(void volatile *)dest);
  
#line 53 
  return;
}


#line 637  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/driver.h"
__inline static void *mlx5_vzalloc_2(unsigned long size)
{
  void *rtn;
  
#line 641 
  rtn = kzalloc_5(size,720U);
  
#line 642 
  if (rtn == (void *)0) 
#line 643 
                        rtn = vzalloc(size); else ;
  
#line 644 
  return rtn;
}


#line 669 
int mlx5_alloc_map_uar(struct mlx5_core_dev *mdev, struct mlx5_uar *uar);


#line 670 
void mlx5_unmap_free_uar(struct mlx5_core_dev *mdev, struct mlx5_uar *uar);


#line 691 
int mlx5_core_create_mkey(struct mlx5_core_dev *dev, struct mlx5_core_mr *mr, struct mlx5_create_mkey_mbox_in *in, int inlen, void (*callback)(int , void *), void *context, struct mlx5_create_mkey_mbox_out *out);


#line 695 
int mlx5_core_destroy_mkey(struct mlx5_core_dev *dev, struct mlx5_core_mr *mr);


#line 716 
void mlx5_fill_page_array(struct mlx5_buf *buf, __be64 *pas);


#line 759 
int mlx5_set_port_mtu(struct mlx5_core_dev *dev, int mtu, u8 port);


#line 760 
void mlx5_query_port_max_mtu(struct mlx5_core_dev *dev, int *max_mtu, u8 port);


#line 761 
void mlx5_query_port_oper_mtu(struct mlx5_core_dev *dev, int *oper_mtu, u8 port);


#line 46  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/delay.h"
void msleep(unsigned int);


#line 98  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dynamic_queue_limits.h"
void dql_reset(struct dql *);


#line 496  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
void napi_disable(struct napi_struct *);


#line 505  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void napi_enable(struct napi_struct *n)
{
  int tmp;
  
#line 507 
  tmp = constant_test_bit(0L,(unsigned long const volatile *)(& n->state));
  
#line 507 
  if ((long)(tmp == 0) != 0L) {
    
#line 509 
    ldv_inline_asm();
    
#line 507 
    ;
  }
  else ;
  
#line 509 
  ldv_inline_asm();
  
#line 509 
  set_bit(0L,(unsigned long volatile *)(& n->state));
  
#line 510 
  return;
}


#line 521  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void napi_synchronize(struct napi_struct const *n)
{
  int tmp;
  
#line 523 
  goto ldv_50786;
  ldv_50785: 
#line 524 
  ;
  
#line 524 
  msleep(1U);
  ldv_50786: 
#line 525 
  ;
  
#line 523 
  tmp = constant_test_bit(0L,(unsigned long const volatile *)(& n->state));
  
#line 523 
  if (tmp != 0) 
#line 525 
                goto ldv_50785; else 
#line 528 
                                     goto ldv_50787;
  ldv_50787: 
#line 529 
  ;
  
#line 530 
  return;
}


#line 1822  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static struct netdev_queue *netdev_get_tx_queue(struct net_device const *dev, unsigned int index)
{
  struct netdev_queue *__retres;
  
#line 1825 
  __retres = dev->_tx + index;
  
#line 1825 
  return __retres;
}


#line 1911 
void netif_napi_add(struct net_device *, struct napi_struct *, int (*)(struct napi_struct *, int ), int);


#line 1920 
void netif_napi_del(struct napi_struct *);


#line 2205 
static void ldv_free_netdev_97(struct net_device *ldv_func_arg1);


#line 2209 
static void ldv_free_netdev_99(struct net_device *ldv_func_arg1);


#line 2515  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void netif_tx_start_queue(struct netdev_queue *dev_queue)
{
  
#line 2517 
  set_bit(0L,(unsigned long volatile *)(& dev_queue->state));
  
#line 2518 
  return;
}


#line 2723  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void netdev_tx_reset_queue(struct netdev_queue *q)
{
  
#line 2726 
  set_bit(1L,(unsigned long volatile *)(& q->state));
  
#line 2727 
  dql_reset(& q->dql);
  
#line 2728 
  return;
}


#line 2832 
int netif_set_xps_queue(struct net_device *, struct cpumask const *, u16);


#line 2867 
int netif_set_real_num_tx_queues(struct net_device *, unsigned int);


#line 2870 
int netif_set_real_num_rx_queues(struct net_device *, unsigned int);


#line 3047 
void netif_carrier_on(struct net_device *);


#line 3049 
void netif_carrier_off(struct net_device *);


#line 3176  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void __netif_tx_lock_bh(struct netdev_queue *txq)
{
  int tmp_3;
  
#line 3178 
  ldv_spin_lock_bh_62(& txq->_xmit_lock);
  {
    int pscr_ret__;
    {
      
#line 3179 
      void const *__vpp_verify = (void const *)0;
      
#line 3179 
      void const *tmp = __vpp_verify;
    }
    
#line 3179 
    switch (4UL) {
      int tmp_0;
      int tmp_0_0;
      int tmp_1;
      int tmp_2;
      case (unsigned long)1: 
#line 3179 
      ;
      {
        int pfo_ret__;
        
#line 3179 
        switch (4UL) {
          case (unsigned long)1: 
#line 3179 
          ;
          
#line 3180 
          ldv_inline_asm();
          
#line 3179 
          goto ldv_52267;
          case (unsigned long)2: 
#line 3179 
          ;
          
#line 3180 
          ldv_inline_asm();
          
#line 3179 
          goto ldv_52267;
          case (unsigned long)4: 
#line 3179 
          ;
          
#line 3180 
          ldv_inline_asm();
          
#line 3179 
          goto ldv_52267;
          case (unsigned long)8: 
#line 3179 
          ;
          
#line 3180 
          ldv_inline_asm();
          
#line 3179 
          goto ldv_52267;
          default: 
#line 3179 
          ;
          
#line 3179 
          __bad_percpu_size();
        }
        ldv_52267: 
#line 3179 
        ;
        
#line 3179 
        tmp_0 = pfo_ret__;
      }
      
#line 3179 
      pscr_ret__ = tmp_0;
      
#line 3179 
      goto ldv_52273;
      case (unsigned long)2: 
#line 3179 
      ;
      {
        int pfo_ret___0;
        
#line 3179 
        switch (4UL) {
          case (unsigned long)1: 
#line 3179 
          ;
          
#line 3180 
          ldv_inline_asm();
          
#line 3179 
          goto ldv_52277;
          case (unsigned long)2: 
#line 3179 
          ;
          
#line 3180 
          ldv_inline_asm();
          
#line 3179 
          goto ldv_52277;
          case (unsigned long)4: 
#line 3179 
          ;
          
#line 3180 
          ldv_inline_asm();
          
#line 3179 
          goto ldv_52277;
          case (unsigned long)8: 
#line 3179 
          ;
          
#line 3180 
          ldv_inline_asm();
          
#line 3179 
          goto ldv_52277;
          default: 
#line 3179 
          ;
          
#line 3179 
          __bad_percpu_size();
        }
        ldv_52277: 
#line 3179 
        ;
        
#line 3179 
        tmp_0_0 = pfo_ret___0;
      }
      
#line 3179 
      pscr_ret__ = tmp_0_0;
      
#line 3179 
      goto ldv_52273;
      case (unsigned long)4: 
#line 3179 
      ;
      {
        int pfo_ret___1;
        
#line 3179 
        switch (4UL) {
          case (unsigned long)1: 
#line 3179 
          ;
          
#line 3180 
          ldv_inline_asm();
          
#line 3179 
          goto ldv_52286;
          case (unsigned long)2: 
#line 3179 
          ;
          
#line 3180 
          ldv_inline_asm();
          
#line 3179 
          goto ldv_52286;
          case (unsigned long)4: 
#line 3179 
          ;
          
#line 3180 
          ldv_inline_asm();
          
#line 3179 
          goto ldv_52286;
          case (unsigned long)8: 
#line 3179 
          ;
          
#line 3180 
          ldv_inline_asm();
          
#line 3179 
          goto ldv_52286;
          default: 
#line 3179 
          ;
          
#line 3179 
          __bad_percpu_size();
        }
        ldv_52286: 
#line 3179 
        ;
        
#line 3179 
        tmp_1 = pfo_ret___1;
      }
      
#line 3179 
      pscr_ret__ = tmp_1;
      
#line 3179 
      goto ldv_52273;
      case (unsigned long)8: 
#line 3179 
      ;
      {
        int pfo_ret___2;
        
#line 3179 
        switch (4UL) {
          case (unsigned long)1: 
#line 3179 
          ;
          
#line 3180 
          ldv_inline_asm();
          
#line 3179 
          goto ldv_52295;
          case (unsigned long)2: 
#line 3179 
          ;
          
#line 3180 
          ldv_inline_asm();
          
#line 3179 
          goto ldv_52295;
          case (unsigned long)4: 
#line 3179 
          ;
          
#line 3180 
          ldv_inline_asm();
          
#line 3179 
          goto ldv_52295;
          case (unsigned long)8: 
#line 3179 
          ;
          
#line 3180 
          ldv_inline_asm();
          
#line 3179 
          goto ldv_52295;
          default: 
#line 3179 
          ;
          
#line 3179 
          __bad_percpu_size();
        }
        ldv_52295: 
#line 3179 
        ;
        
#line 3179 
        tmp_2 = pfo_ret___2;
      }
      
#line 3179 
      pscr_ret__ = tmp_2;
      
#line 3179 
      goto ldv_52273;
      default: 
#line 3179 
      ;
      
#line 3179 
      __bad_size_call_parameter();
      
#line 3179 
      goto ldv_52273;
    }
    ldv_52273: 
#line 3179 
    ;
    
#line 3179 
    tmp_3 = pscr_ret__;
  }
  
#line 3179 
  txq->xmit_lock_owner = tmp_3;
  
#line 3181 
  return;
}


#line 3196  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void __netif_tx_unlock_bh(struct netdev_queue *txq)
{
  
#line 3198 
  txq->xmit_lock_owner = -1;
  
#line 3199 
  ldv_spin_unlock_bh_65(& txq->_xmit_lock);
  
#line 3200 
  return;
}


#line 3314  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void netif_addr_lock_bh_0(struct net_device *dev)
{
  
#line 3316 
  ldv_spin_lock_bh_70_0(& dev->addr_list_lock);
  
#line 3317 
  return;
}


#line 3324  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void netif_addr_unlock_bh_0(struct net_device *dev)
{
  
#line 3326 
  ldv_spin_unlock_bh_72_0(& dev->addr_list_lock);
  
#line 3327 
  return;
}


#line 3355 
static int ldv_register_netdev_96(struct net_device *ldv_func_arg1);


#line 3360 
static void ldv_unregister_netdev_98(struct net_device *ldv_func_arg1);


#line 3549 
void netdev_rss_key_fill(void *, size_t);


#line 3830 
void netdev_warn(struct net_device const *, char const * , ...);


#line 53  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/etherdevice.h"
static struct net_device *ldv_alloc_etherdev_mqs_95(int ldv_func_arg1, unsigned int ldv_func_arg2, unsigned int ldv_func_arg3);


#line 93  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/etherdevice.h"
__inline static bool is_zero_ether_addr(u8 const *addr)
{
  bool __retres;
  
#line 96 
  __retres = (_Bool)((*((u32 const *)addr) | (unsigned int)*((u16 const *)(addr + 4U))) == 0U);
  
#line 96 
  return __retres;
}


#line 186  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/etherdevice.h"
__inline static bool is_valid_ether_addr(u8 const *addr)
{
  bool __retres;
  int tmp_3;
  int tmp_0;
  bool tmp;
  
#line 190 
  tmp = is_multicast_ether_addr(addr);
  
#line 190 
  if (tmp) 
#line 190 
           tmp_0 = 0; else 
#line 190 
                           tmp_0 = 1;
  
#line 190 
  if (tmp_0) {
    int tmp_2;
    bool tmp_1;
    
#line 190 
    tmp_1 = is_zero_ether_addr(addr);
    
#line 190 
    if (tmp_1) 
#line 190 
               tmp_2 = 0; else 
#line 190 
                               tmp_2 = 1;
    
#line 190 
    if (tmp_2) 
#line 190 
               tmp_3 = 1; else 
#line 190 
                               tmp_3 = 0;
  }
  else 
#line 190 
       tmp_3 = 0;
  
#line 190 
  __retres = (_Bool)(tmp_3 != 0);
  
#line 190 
  return __retres;
}


#line 138  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/cq.h"
__inline static void mlx5_cq_arm(struct mlx5_core_cq *cq, u32 cmd, void *uar_page, spinlock_t *doorbell_lock, u32 cons_index)
{
  __be32 doorbell[2U];
  u32 sn;
  u32 ci;
  
#line 147 
  sn = cq->arm_sn & 3U;
  
#line 148 
  ci = cons_index & 16777215U;
  
#line 150 
  if (0 != 0) 
#line 150 
              *(cq->arm_db) = ((((((sn << 28) | cmd) | ci) << 24) | (((((sn << 28) | cmd) | ci) << 8) & 16711680U)) | (((((sn << 28) | cmd) | ci) >> 8) & 65280U)) | ((((sn << 28) | cmd) | ci) >> 24); else 
                                                                    
#line 150 
                                                                    *(cq->arm_db) = __fswab32(((sn << 28) | cmd) | ci);
  
#line 151 
  ldv_inline_asm();
  
#line 157 
  if (0 != 0) 
#line 157 
              doorbell[0] = ((((((sn << 28) | cmd) | ci) << 24) | (((((sn << 28) | cmd) | ci) << 8) & 16711680U)) | (((((sn << 28) | cmd) | ci) >> 8) & 65280U)) | ((((sn << 28) | cmd) | ci) >> 24); else 
                                                                    
#line 157 
                                                                    doorbell[0] = __fswab32(((sn << 28) | cmd) | ci);
  
#line 158 
  if (0 != 0) 
#line 158 
              doorbell[1] = (((cq->cqn << 24) | ((cq->cqn << 8) & 16711680U)) | ((cq->cqn >> 8) & 65280U)) | (cq->cqn >> 24); else 
                                                                    
#line 158 
                                                                    doorbell[1] = __fswab32(cq->cqn);
  
#line 160 
  mlx5_write64((__be32 *)(& doorbell),uar_page + 32U,doorbell_lock);
  
#line 161 
  return;
}


#line 165 
int mlx5_core_create_cq(struct mlx5_core_dev *dev, struct mlx5_core_cq *cq, struct mlx5_create_cq_mbox_in *in, int inlen);


#line 167 
int mlx5_core_destroy_cq(struct mlx5_core_dev *dev, struct mlx5_core_cq *cq);


#line 172 
int mlx5_core_modify_cq_moderation(struct mlx5_core_dev *dev, struct mlx5_core_cq *cq, u16 cq_period, u16 cq_max_count);


#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/vport.h"
u8 mlx5_query_vport_state(struct mlx5_core_dev *mdev, u8 opmod);


#line 39 
void mlx5_query_nic_vport_mac_address(struct mlx5_core_dev *mdev, u8 *addr);


#line 76  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/wq.h"
int mlx5_wq_cyc_create(struct mlx5_core_dev *mdev, struct mlx5_wq_param *param, void *wqc, struct mlx5_wq_cyc *wq, struct mlx5_wq_ctrl *wq_ctrl);


#line 79 
u32 mlx5_wq_cyc_get_size(struct mlx5_wq_cyc *wq);


#line 81 
int mlx5_cqwq_create(struct mlx5_core_dev *mdev, struct mlx5_wq_param *param, void *cqc, struct mlx5_cqwq *wq, struct mlx5_wq_ctrl *wq_ctrl);


#line 84 
u32 mlx5_cqwq_get_size(struct mlx5_cqwq *wq);


#line 86 
int mlx5_wq_ll_create(struct mlx5_core_dev *mdev, struct mlx5_wq_param *param, void *wqc, struct mlx5_wq_ll *wq, struct mlx5_wq_ctrl *wq_ctrl);


#line 89 
u32 mlx5_wq_ll_get_size(struct mlx5_wq_ll *wq);


#line 91 
void mlx5_wq_destroy(struct mlx5_wq_ctrl *wq_ctrl);


#line 116  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/wq.h"
__inline static void *mlx5_cqwq_get_wqe(struct mlx5_cqwq *wq, u32 ix)
{
  void *__retres;
  
#line 118 
  __retres = wq->buf + (ix << (int)wq->log_stride);
  
#line 118 
  return __retres;
}


#line 141  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/wq.h"
__inline static int mlx5_wq_ll_is_empty(struct mlx5_wq_ll *wq)
{
  int __retres;
  
#line 143 
  __retres = (unsigned int)wq->cur_sz == 0U;
  
#line 143 
  return __retres;
}


#line 146  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/wq.h"
__inline static void *mlx5_wq_ll_get_wqe(struct mlx5_wq_ll *wq, u16 ix)
{
  void *__retres;
  
#line 148 
  __retres = wq->buf + ((int)ix << (int)wq->log_stride);
  
#line 148 
  return __retres;
}


#line 36  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/transobj.h"
int mlx5_alloc_transport_domain(struct mlx5_core_dev *dev, u32 *tdn);


#line 37 
void mlx5_dealloc_transport_domain(struct mlx5_core_dev *dev, u32 tdn);


#line 38 
int mlx5_core_create_rq(struct mlx5_core_dev *dev, u32 *in, int inlen, u32 *rqn);


#line 40 
int mlx5_core_modify_rq(struct mlx5_core_dev *dev, u32 rqn, u32 *in, int inlen);


#line 41 
void mlx5_core_destroy_rq(struct mlx5_core_dev *dev, u32 rqn);


#line 42 
int mlx5_core_create_sq(struct mlx5_core_dev *dev, u32 *in, int inlen, u32 *sqn);


#line 44 
int mlx5_core_modify_sq(struct mlx5_core_dev *dev, u32 sqn, u32 *in, int inlen);


#line 45 
void mlx5_core_destroy_sq(struct mlx5_core_dev *dev, u32 sqn);


#line 46 
int mlx5_core_create_tir(struct mlx5_core_dev *dev, u32 *in, int inlen, u32 *tirn);


#line 48 
void mlx5_core_destroy_tir(struct mlx5_core_dev *dev, u32 tirn);


#line 49 
int mlx5_core_create_tis(struct mlx5_core_dev *dev, u32 *in, int inlen, u32 *tisn);


#line 51 
void mlx5_core_destroy_tis(struct mlx5_core_dev *dev, u32 tisn);


#line 298  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en.h"
__inline static bool mlx5e_sq_has_room_for(struct mlx5e_sq *sq, u16 n)
{
  bool __retres;
  
#line 300 
  __retres = (_Bool)((((int)sq->wq.sz_m1 & ((int)sq->cc - (int)sq->pc)) >= (int)n || (int)sq->cc == (int)sq->pc) != 0);
  
#line 300 
  return __retres;
}


#line 458 
void mlx5e_send_nop(struct mlx5e_sq *sq, bool notify_hw);


#line 459 
u16 mlx5e_select_queue(struct net_device *dev, struct sk_buff *skb, void *accel_priv, u16 (*fallback)(struct net_device *, struct sk_buff *));


#line 461 
netdev_tx_t mlx5e_xmit(struct sk_buff *skb, struct net_device *dev);


#line 463 
void mlx5e_completion_event(struct mlx5_core_cq *mcq);


#line 464 
void mlx5e_cq_error_event(struct mlx5_core_cq *mcq, enum mlx5_event event);


#line 465 
int mlx5e_napi_poll(struct napi_struct *napi, int budget);


#line 471 
void mlx5e_update_stats(struct mlx5e_priv *priv);


#line 488 
int mlx5e_open_locked(struct net_device *netdev);


#line 489 
int mlx5e_close_locked(struct net_device *netdev);


#line 490 
int mlx5e_update_priv_params(struct mlx5e_priv *priv, struct mlx5e_params *new_params);


#line 513  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en.h"
__inline static void mlx5e_cq_arm(struct mlx5e_cq *cq)
{
  struct mlx5_core_cq *mcq;
  
#line 517 
  mcq = & cq->mcq;
  
#line 518 
  mlx5_cq_arm(mcq,0U,(mcq->uar)->map,(spinlock_t *)0,cq->wq.cc);
  
#line 519 
  return;
}


#line 521 
struct ethtool_ops const mlx5e_ethtool_ops;


#line 59  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_main.c"
static void mlx5e_update_carrier(struct mlx5e_priv *priv)
{
  u8 port_state;
  
#line 61 
  struct mlx5_core_dev *mdev = priv->mdev;
  
#line 64 
  port_state = mlx5_query_vport_state(mdev,(unsigned char)0);
  
#line 67 
  if ((unsigned int)port_state == 1U) 
#line 68 
                                      netif_carrier_on(priv->netdev); else 
                                                                    
#line 70 
                                                                    netif_carrier_off(priv->netdev);
  
#line 71 
  return;
}


#line 73  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_main.c"
static void mlx5e_update_carrier_work(struct work_struct *work)
{
  struct mlx5e_priv *tmp;
  int tmp_0;
  {
    
#line 75 
    struct work_struct const *__mptr = (struct work_struct const *)work;
    
#line 75 
    tmp = (struct mlx5e_priv *)__mptr + 18446744073709530032U;
  }
  
#line 75 
  struct mlx5e_priv *priv = tmp;
  
#line 78 
  ldv_mutex_lock_73_0(& priv->state_lock);
  
#line 79 
  tmp_0 = constant_test_bit(1L,(unsigned long const volatile *)(& priv->state));
  
#line 79 
  if (tmp_0 != 0) 
#line 80 
                  mlx5e_update_carrier(priv); else ;
  
#line 81 
  ldv_mutex_unlock_74_0(& priv->state_lock);
  
#line 82 
  return;
}


#line 134 
void __compiletime_assert_135(void);


#line 136 
void __compiletime_assert_136(void);


#line 137 
void __compiletime_assert_137(void);


#line 84  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_main.c"
void mlx5e_update_stats(struct mlx5e_priv *priv)
{
  struct mlx5e_rq_stats *rq_stats;
  struct mlx5e_sq_stats *sq_stats;
  u32 in[8U];
  u32 *out;
  u64 tx_offload_none;
  int i;
  int j;
  int tmp_31;
  
#line 86 
  struct mlx5_core_dev *mdev = priv->mdev;
  
#line 87 
  struct mlx5e_vport_stats *s = & priv->stats.vport;
  
#line 92 
  int outlen = 528;
  
#line 96 
  out = (u32 *)mlx5_vzalloc_2((unsigned long)outlen);
  
#line 97 
  if (out == (u32 *)0U) 
#line 98 
                        goto return_label; else ;
  
#line 101 
  s->tso_packets = 0ULL;
  
#line 102 
  s->tso_bytes = 0ULL;
  
#line 103 
  s->tx_queue_stopped = 0ULL;
  
#line 104 
  s->tx_queue_wake = 0ULL;
  
#line 105 
  s->tx_queue_dropped = 0ULL;
  
#line 106 
  tx_offload_none = 0ULL;
  
#line 107 
  s->lro_packets = 0ULL;
  
#line 108 
  s->lro_bytes = 0ULL;
  
#line 109 
  s->rx_csum_none = 0ULL;
  
#line 110 
  s->rx_wqe_err = 0ULL;
  
#line 111 
  i = 0;
  
#line 111 
  goto ldv_54966;
  ldv_54965: 
#line 112 
  ;
  
#line 112 
  rq_stats = & (*(priv->channel + i))->rq.stats;
  
#line 114 
  s->lro_packets += rq_stats->lro_packets;
  
#line 115 
  s->lro_bytes += rq_stats->lro_bytes;
  
#line 116 
  s->rx_csum_none += rq_stats->csum_none;
  
#line 117 
  s->rx_wqe_err += rq_stats->wqe_err;
  
#line 119 
  j = 0;
  
#line 119 
  goto ldv_54963;
  ldv_54962: 
#line 120 
  ;
  
#line 120 
  sq_stats = & (*(priv->channel + i))->sq[j].stats;
  
#line 122 
  s->tso_packets += sq_stats->tso_packets;
  
#line 123 
  s->tso_bytes += sq_stats->tso_bytes;
  
#line 124 
  s->tx_queue_stopped += sq_stats->stopped;
  
#line 125 
  s->tx_queue_wake += sq_stats->wake;
  
#line 126 
  s->tx_queue_dropped += sq_stats->dropped;
  
#line 127 
  tx_offload_none = sq_stats->csum_offload_none + tx_offload_none;
  
#line 119 
  j += 1;
  ldv_54963: 
#line 120 
  ;
  
#line 119 
  if (priv->num_tc > j) 
#line 121 
                        goto ldv_54962; else 
#line 124 
                                             goto ldv_54964;
  ldv_54964: 
#line 125 
  ;
  
#line 111 
  i += 1;
  ldv_54966: 
#line 112 
  ;
  
#line 111 
  if ((int)priv->params.num_channels > i) 
#line 113 
                                          goto ldv_54965; else 
#line 116 
                                                               goto ldv_54967;
  ldv_54967: 
#line 117 
  ;
  
#line 132 
  memset((void *)(& in),0,32UL);
  {
    
#line 134 
    bool __cond = (_Bool)0;
    
#line 134 
    if ((int)__cond != 0) 
#line 134 
                          __compiletime_assert_135(); else ;
  }
  
#line 134 
  if (0 != 0) {
    unsigned int tmp_3;
    unsigned int tmp_5;
    
#line 134 
    if (0 != 0) 
#line 134 
                tmp_3 = ((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) << 24;
    else {
      __u32 tmp_2;
      
#line 134 
      tmp_2 = __fswab32(*((__be32 *)(& in)));
      
#line 134 
      tmp_3 = tmp_2 << 24;
    }
    
#line 134 
    if (0 != 0) 
#line 134 
                tmp_5 = (((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) << 8) & 16711680U;
    else {
      __u32 tmp_4;
      
#line 134 
      tmp_4 = __fswab32(*((__be32 *)(& in)));
      
#line 134 
      tmp_5 = (tmp_4 << 8) & 16711680U;
    }
    
#line 134 
    *((__be32 *)(& in)) = (tmp_3 | tmp_5) | 28679U;
  }
  else {
    __u32 tmp_8;
    unsigned int tmp_7;
    
#line 134 
    if (0 != 0) 
#line 134 
                tmp_7 = (((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) & 65535U) | 124780544U;
    else {
      __u32 tmp_6;
      
#line 134 
      tmp_6 = __fswab32(*((__be32 *)(& in)));
      
#line 134 
      tmp_7 = (tmp_6 & 65535U) | 124780544U;
    }
    
#line 134 
    tmp_8 = __fswab32(tmp_7);
    
#line 134 
    *((__be32 *)(& in)) = tmp_8;
  }
  {
    
#line 136 
    bool __cond_0 = (_Bool)0;
    
#line 136 
    if ((int)__cond_0 != 0) 
#line 136 
                            __compiletime_assert_136(); else ;
  }
  
#line 136 
  if (0 != 0) {
    unsigned int tmp_12;
    unsigned int tmp_14;
    
#line 136 
    if (0 != 0) 
#line 136 
                tmp_12 = (((((*((__be32 *)(& in) + 1U) << 24) | ((*((__be32 *)(& in) + 1U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 1U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 1U) >> 24)) >> 8) & 65280U;
    else {
      __u32 tmp_11;
      
#line 136 
      tmp_11 = __fswab32(*((__be32 *)(& in) + 1U));
      
#line 136 
      tmp_12 = (tmp_11 >> 8) & 65280U;
    }
    
#line 136 
    if (0 != 0) 
#line 136 
                tmp_14 = ((((*((__be32 *)(& in) + 1U) << 24) | ((*((__be32 *)(& in) + 1U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 1U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 1U) >> 24)) >> 24;
    else {
      __u32 tmp_13;
      
#line 136 
      tmp_13 = __fswab32(*((__be32 *)(& in) + 1U));
      
#line 136 
      tmp_14 = tmp_13 >> 24;
    }
    
#line 136 
    *((__be32 *)(& in) + 1U) = tmp_12 | tmp_14;
  }
  else {
    __u32 tmp_17;
    unsigned int tmp_16;
    
#line 136 
    if (0 != 0) 
#line 136 
                tmp_16 = ((((*((__be32 *)(& in) + 1U) << 24) | ((*((__be32 *)(& in) + 1U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 1U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 1U) >> 24)) & 4294901760U;
    else {
      __u32 tmp_15;
      
#line 136 
      tmp_15 = __fswab32(*((__be32 *)(& in) + 1U));
      
#line 136 
      tmp_16 = tmp_15 & 4294901760U;
    }
    
#line 136 
    tmp_17 = __fswab32(tmp_16);
    
#line 136 
    *((__be32 *)(& in) + 1U) = tmp_17;
  }
  {
    
#line 137 
    bool __cond_1 = (_Bool)0;
    
#line 137 
    if ((int)__cond_1 != 0) 
#line 137 
                            __compiletime_assert_137(); else ;
  }
  
#line 137 
  if (0 != 0) {
    unsigned int tmp_21;
    unsigned int tmp_23;
    unsigned int tmp_25;
    unsigned int tmp_27;
    
#line 137 
    if (0 != 0) 
#line 137 
                tmp_21 = ((((*((__be32 *)(& in) + 2U) << 24) | ((*((__be32 *)(& in) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 2U) >> 24)) << 24;
    else {
      __u32 tmp_20;
      
#line 137 
      tmp_20 = __fswab32(*((__be32 *)(& in) + 2U));
      
#line 137 
      tmp_21 = tmp_20 << 24;
    }
    
#line 137 
    if (0 != 0) 
#line 137 
                tmp_23 = (((((*((__be32 *)(& in) + 2U) << 24) | ((*((__be32 *)(& in) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 2U) >> 24)) << 8) & 16711680U;
    else {
      __u32 tmp_22;
      
#line 137 
      tmp_22 = __fswab32(*((__be32 *)(& in) + 2U));
      
#line 137 
      tmp_23 = (tmp_22 << 8) & 16711680U;
    }
    
#line 137 
    if (0 != 0) 
#line 137 
                tmp_25 = (((((*((__be32 *)(& in) + 2U) << 24) | ((*((__be32 *)(& in) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 2U) >> 24)) >> 8) & 65280U;
    else {
      __u32 tmp_24;
      
#line 137 
      tmp_24 = __fswab32(*((__be32 *)(& in) + 2U));
      
#line 137 
      tmp_25 = (tmp_24 >> 8) & 65280U;
    }
    
#line 137 
    if (0 != 0) 
#line 137 
                tmp_27 = (((((*((__be32 *)(& in) + 2U) << 24) | ((*((__be32 *)(& in) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 2U) >> 24)) >> 24) & 127U;
    else {
      __u32 tmp_26;
      
#line 137 
      tmp_26 = __fswab32(*((__be32 *)(& in) + 2U));
      
#line 137 
      tmp_27 = (tmp_26 >> 24) & 127U;
    }
    
#line 137 
    *((__be32 *)(& in) + 2U) = ((tmp_21 | tmp_23) | tmp_25) | tmp_27;
  }
  else {
    __u32 tmp_30;
    unsigned int tmp_29;
    
#line 137 
    if (0 != 0) 
#line 137 
                tmp_29 = ((((*((__be32 *)(& in) + 2U) << 24) | ((*((__be32 *)(& in) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 2U) >> 24)) & 2147483647U;
    else {
      __u32 tmp_28;
      
#line 137 
      tmp_28 = __fswab32(*((__be32 *)(& in) + 2U));
      
#line 137 
      tmp_29 = tmp_28 & 2147483647U;
    }
    
#line 137 
    tmp_30 = __fswab32(tmp_29);
    
#line 137 
    *((__be32 *)(& in) + 2U) = tmp_30;
  }
  
#line 139 
  memset((void *)out,0,(unsigned long)outlen);
  
#line 141 
  tmp_31 = mlx5_cmd_exec(mdev,(void *)(& in),32,(void *)out,outlen);
  
#line 141 
  if (tmp_31 != 0) 
#line 142 
                   goto free_out; else ;
  
#line 147 
  if (0 != 0) 
#line 147 
              s->rx_error_packets = (((((((*((__be64 *)out + 2U) << 56) | ((*((__be64 *)out + 2U) << 40) & 71776119061217280ULL)) | ((*((__be64 *)out + 2U) << 24) & 280375465082880ULL)) | ((*((__be64 *)out + 2U) << 8) & 1095216660480ULL)) | ((*((__be64 *)out + 2U) >> 8) & 4278190080ULL)) | ((*((__be64 *)out + 2U) >> 24) & 16711680ULL)) | ((*((__be64 *)out + 2U) >> 40) & 65280ULL)) | (*((__be64 *)out + 2U) >> 56); else 
                                                                    
#line 148 
                                                                    s->rx_error_packets = __fswab64(*((__be64 *)out + 2U));
  
#line 149 
  if (0 != 0) 
#line 149 
              s->rx_error_bytes = (((((((*((__be64 *)out + 3U) << 56) | ((*((__be64 *)out + 3U) << 40) & 71776119061217280ULL)) | ((*((__be64 *)out + 3U) << 24) & 280375465082880ULL)) | ((*((__be64 *)out + 3U) << 8) & 1095216660480ULL)) | ((*((__be64 *)out + 3U) >> 8) & 4278190080ULL)) | ((*((__be64 *)out + 3U) >> 24) & 16711680ULL)) | ((*((__be64 *)out + 3U) >> 40) & 65280ULL)) | (*((__be64 *)out + 3U) >> 56); else 
                                                                    
#line 150 
                                                                    s->rx_error_bytes = __fswab64(*((__be64 *)out + 3U));
  
#line 151 
  if (0 != 0) 
#line 151 
              s->tx_error_packets = (((((((*((__be64 *)out + 4U) << 56) | ((*((__be64 *)out + 4U) << 40) & 71776119061217280ULL)) | ((*((__be64 *)out + 4U) << 24) & 280375465082880ULL)) | ((*((__be64 *)out + 4U) << 8) & 1095216660480ULL)) | ((*((__be64 *)out + 4U) >> 8) & 4278190080ULL)) | ((*((__be64 *)out + 4U) >> 24) & 16711680ULL)) | ((*((__be64 *)out + 4U) >> 40) & 65280ULL)) | (*((__be64 *)out + 4U) >> 56); else 
                                                                    
#line 152 
                                                                    s->tx_error_packets = __fswab64(*((__be64 *)out + 4U));
  
#line 153 
  if (0 != 0) 
#line 153 
              s->tx_error_bytes = (((((((*((__be64 *)out + 5U) << 56) | ((*((__be64 *)out + 5U) << 40) & 71776119061217280ULL)) | ((*((__be64 *)out + 5U) << 24) & 280375465082880ULL)) | ((*((__be64 *)out + 5U) << 8) & 1095216660480ULL)) | ((*((__be64 *)out + 5U) >> 8) & 4278190080ULL)) | ((*((__be64 *)out + 5U) >> 24) & 16711680ULL)) | ((*((__be64 *)out + 5U) >> 40) & 65280ULL)) | (*((__be64 *)out + 5U) >> 56); else 
                                                                    
#line 154 
                                                                    s->tx_error_bytes = __fswab64(*((__be64 *)out + 5U));
  
#line 156 
  if (0 != 0) 
#line 156 
              s->rx_unicast_packets = (((((((*((__be64 *)out + 18U) << 56) | ((*((__be64 *)out + 18U) << 40) & 71776119061217280ULL)) | ((*((__be64 *)out + 18U) << 24) & 280375465082880ULL)) | ((*((__be64 *)out + 18U) << 8) & 1095216660480ULL)) | ((*((__be64 *)out + 18U) >> 8) & 4278190080ULL)) | ((*((__be64 *)out + 18U) >> 24) & 16711680ULL)) | ((*((__be64 *)out + 18U) >> 40) & 65280ULL)) | (*((__be64 *)out + 18U) >> 56); else 
                                                                    
#line 157 
                                                                    s->rx_unicast_packets = __fswab64(*((__be64 *)out + 18U));
  
#line 158 
  if (0 != 0) 
#line 158 
              s->rx_unicast_bytes = (((((((*((__be64 *)out + 19U) << 56) | ((*((__be64 *)out + 19U) << 40) & 71776119061217280ULL)) | ((*((__be64 *)out + 19U) << 24) & 280375465082880ULL)) | ((*((__be64 *)out + 19U) << 8) & 1095216660480ULL)) | ((*((__be64 *)out + 19U) >> 8) & 4278190080ULL)) | ((*((__be64 *)out + 19U) >> 24) & 16711680ULL)) | ((*((__be64 *)out + 19U) >> 40) & 65280ULL)) | (*((__be64 *)out + 19U) >> 56); else 
                                                                    
#line 159 
                                                                    s->rx_unicast_bytes = __fswab64(*((__be64 *)out + 19U));
  
#line 160 
  if (0 != 0) 
#line 160 
              s->tx_unicast_packets = (((((((*((__be64 *)out + 20U) << 56) | ((*((__be64 *)out + 20U) << 40) & 71776119061217280ULL)) | ((*((__be64 *)out + 20U) << 24) & 280375465082880ULL)) | ((*((__be64 *)out + 20U) << 8) & 1095216660480ULL)) | ((*((__be64 *)out + 20U) >> 8) & 4278190080ULL)) | ((*((__be64 *)out + 20U) >> 24) & 16711680ULL)) | ((*((__be64 *)out + 20U) >> 40) & 65280ULL)) | (*((__be64 *)out + 20U) >> 56); else 
                                                                    
#line 161 
                                                                    s->tx_unicast_packets = __fswab64(*((__be64 *)out + 20U));
  
#line 162 
  if (0 != 0) 
#line 162 
              s->tx_unicast_bytes = (((((((*((__be64 *)out + 21U) << 56) | ((*((__be64 *)out + 21U) << 40) & 71776119061217280ULL)) | ((*((__be64 *)out + 21U) << 24) & 280375465082880ULL)) | ((*((__be64 *)out + 21U) << 8) & 1095216660480ULL)) | ((*((__be64 *)out + 21U) >> 8) & 4278190080ULL)) | ((*((__be64 *)out + 21U) >> 24) & 16711680ULL)) | ((*((__be64 *)out + 21U) >> 40) & 65280ULL)) | (*((__be64 *)out + 21U) >> 56); else 
                                                                    
#line 163 
                                                                    s->tx_unicast_bytes = __fswab64(*((__be64 *)out + 21U));
  
#line 165 
  if (0 != 0) 
#line 165 
              s->rx_multicast_packets = (((((((*((__be64 *)out + 22U) << 56) | ((*((__be64 *)out + 22U) << 40) & 71776119061217280ULL)) | ((*((__be64 *)out + 22U) << 24) & 280375465082880ULL)) | ((*((__be64 *)out + 22U) << 8) & 1095216660480ULL)) | ((*((__be64 *)out + 22U) >> 8) & 4278190080ULL)) | ((*((__be64 *)out + 22U) >> 24) & 16711680ULL)) | ((*((__be64 *)out + 22U) >> 40) & 65280ULL)) | (*((__be64 *)out + 22U) >> 56); else 
                                                                    
#line 166 
                                                                    s->rx_multicast_packets = __fswab64(*((__be64 *)out + 22U));
  
#line 167 
  if (0 != 0) 
#line 167 
              s->rx_multicast_bytes = (((((((*((__be64 *)out + 23U) << 56) | ((*((__be64 *)out + 23U) << 40) & 71776119061217280ULL)) | ((*((__be64 *)out + 23U) << 24) & 280375465082880ULL)) | ((*((__be64 *)out + 23U) << 8) & 1095216660480ULL)) | ((*((__be64 *)out + 23U) >> 8) & 4278190080ULL)) | ((*((__be64 *)out + 23U) >> 24) & 16711680ULL)) | ((*((__be64 *)out + 23U) >> 40) & 65280ULL)) | (*((__be64 *)out + 23U) >> 56); else 
                                                                    
#line 168 
                                                                    s->rx_multicast_bytes = __fswab64(*((__be64 *)out + 23U));
  
#line 169 
  if (0 != 0) 
#line 169 
              s->tx_multicast_packets = (((((((*((__be64 *)out + 24U) << 56) | ((*((__be64 *)out + 24U) << 40) & 71776119061217280ULL)) | ((*((__be64 *)out + 24U) << 24) & 280375465082880ULL)) | ((*((__be64 *)out + 24U) << 8) & 1095216660480ULL)) | ((*((__be64 *)out + 24U) >> 8) & 4278190080ULL)) | ((*((__be64 *)out + 24U) >> 24) & 16711680ULL)) | ((*((__be64 *)out + 24U) >> 40) & 65280ULL)) | (*((__be64 *)out + 24U) >> 56); else 
                                                                    
#line 170 
                                                                    s->tx_multicast_packets = __fswab64(*((__be64 *)out + 24U));
  
#line 171 
  if (0 != 0) 
#line 171 
              s->tx_multicast_bytes = (((((((*((__be64 *)out + 25U) << 56) | ((*((__be64 *)out + 25U) << 40) & 71776119061217280ULL)) | ((*((__be64 *)out + 25U) << 24) & 280375465082880ULL)) | ((*((__be64 *)out + 25U) << 8) & 1095216660480ULL)) | ((*((__be64 *)out + 25U) >> 8) & 4278190080ULL)) | ((*((__be64 *)out + 25U) >> 24) & 16711680ULL)) | ((*((__be64 *)out + 25U) >> 40) & 65280ULL)) | (*((__be64 *)out + 25U) >> 56); else 
                                                                    
#line 172 
                                                                    s->tx_multicast_bytes = __fswab64(*((__be64 *)out + 25U));
  
#line 174 
  if (0 != 0) 
#line 174 
              s->rx_broadcast_packets = (((((((*((__be64 *)out + 14U) << 56) | ((*((__be64 *)out + 14U) << 40) & 71776119061217280ULL)) | ((*((__be64 *)out + 14U) << 24) & 280375465082880ULL)) | ((*((__be64 *)out + 14U) << 8) & 1095216660480ULL)) | ((*((__be64 *)out + 14U) >> 8) & 4278190080ULL)) | ((*((__be64 *)out + 14U) >> 24) & 16711680ULL)) | ((*((__be64 *)out + 14U) >> 40) & 65280ULL)) | (*((__be64 *)out + 14U) >> 56); else 
                                                                    
#line 175 
                                                                    s->rx_broadcast_packets = __fswab64(*((__be64 *)out + 14U));
  
#line 176 
  if (0 != 0) 
#line 176 
              s->rx_broadcast_bytes = (((((((*((__be64 *)out + 15U) << 56) | ((*((__be64 *)out + 15U) << 40) & 71776119061217280ULL)) | ((*((__be64 *)out + 15U) << 24) & 280375465082880ULL)) | ((*((__be64 *)out + 15U) << 8) & 1095216660480ULL)) | ((*((__be64 *)out + 15U) >> 8) & 4278190080ULL)) | ((*((__be64 *)out + 15U) >> 24) & 16711680ULL)) | ((*((__be64 *)out + 15U) >> 40) & 65280ULL)) | (*((__be64 *)out + 15U) >> 56); else 
                                                                    
#line 177 
                                                                    s->rx_broadcast_bytes = __fswab64(*((__be64 *)out + 15U));
  
#line 178 
  if (0 != 0) 
#line 178 
              s->tx_broadcast_packets = (((((((*((__be64 *)out + 16U) << 56) | ((*((__be64 *)out + 16U) << 40) & 71776119061217280ULL)) | ((*((__be64 *)out + 16U) << 24) & 280375465082880ULL)) | ((*((__be64 *)out + 16U) << 8) & 1095216660480ULL)) | ((*((__be64 *)out + 16U) >> 8) & 4278190080ULL)) | ((*((__be64 *)out + 16U) >> 24) & 16711680ULL)) | ((*((__be64 *)out + 16U) >> 40) & 65280ULL)) | (*((__be64 *)out + 16U) >> 56); else 
                                                                    
#line 179 
                                                                    s->tx_broadcast_packets = __fswab64(*((__be64 *)out + 16U));
  
#line 180 
  if (0 != 0) 
#line 180 
              s->tx_broadcast_bytes = (((((((*((__be64 *)out + 17U) << 56) | ((*((__be64 *)out + 17U) << 40) & 71776119061217280ULL)) | ((*((__be64 *)out + 17U) << 24) & 280375465082880ULL)) | ((*((__be64 *)out + 17U) << 8) & 1095216660480ULL)) | ((*((__be64 *)out + 17U) >> 8) & 4278190080ULL)) | ((*((__be64 *)out + 17U) >> 24) & 16711680ULL)) | ((*((__be64 *)out + 17U) >> 40) & 65280ULL)) | (*((__be64 *)out + 17U) >> 56); else 
                                                                    
#line 181 
                                                                    s->tx_broadcast_bytes = __fswab64(*((__be64 *)out + 17U));
  
#line 183 
  s->rx_packets = (s->rx_unicast_packets + s->rx_multicast_packets) + s->rx_broadcast_packets;
  
#line 187 
  s->rx_bytes = (s->rx_unicast_bytes + s->rx_multicast_bytes) + s->rx_broadcast_bytes;
  
#line 191 
  s->tx_packets = (s->tx_unicast_packets + s->tx_multicast_packets) + s->tx_broadcast_packets;
  
#line 195 
  s->tx_bytes = (s->tx_unicast_bytes + s->tx_multicast_bytes) + s->tx_broadcast_bytes;
  
#line 201 
  s->tx_csum_offload = s->tx_packets - tx_offload_none;
  
#line 202 
  s->rx_csum_good = s->rx_packets - s->rx_csum_none;
  free_out: 
#line 204 
  ;
  
#line 205 
  kvfree((void const *)out);
  return_label: 
#line 206 
                return;
}


#line 208  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_main.c"
static void mlx5e_update_stats_work(struct work_struct *work)
{
  struct mlx5e_priv *tmp_0;
  int tmp_2;
  
#line 210 
  struct delayed_work *dwork = to_delayed_work(work);
  {
    
#line 211 
    struct delayed_work const *__mptr = (struct delayed_work const *)dwork;
    
#line 211 
    tmp_0 = (struct mlx5e_priv *)__mptr + 18446744073709529872U;
  }
  
#line 211 
  struct mlx5e_priv *priv = tmp_0;
  
#line 213 
  ldv_mutex_lock_75_0(& priv->state_lock);
  
#line 214 
  tmp_2 = constant_test_bit(1L,(unsigned long const volatile *)(& priv->state));
  
#line 214 
  if (tmp_2 != 0) {
    unsigned long tmp_1;
    
#line 215 
    mlx5e_update_stats(priv);
    
#line 216 
    tmp_1 = msecs_to_jiffies(200U);
    
#line 216 
    ;
    
#line 216 
    ldv_schedule_delayed_work_76(dwork,tmp_1);
  }
  else ;
  
#line 220 
  ldv_mutex_unlock_77_0(& priv->state_lock);
  
#line 221 
  return;
}


#line 223  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_main.c"
static void __mlx5e_async_event(struct mlx5e_priv *priv, enum mlx5_dev_event event)
{
  
#line 226 
  switch ((unsigned int)event) {
    case (unsigned int)1: 
#line 227 
    ;
    case (unsigned int)2: 
#line 228 
    ;
    
#line 229 
    ldv_schedule_work_78(& priv->update_carrier_work);
    
#line 230 
    goto ldv_54994;
    default: 
#line 232 
    ;
    
#line 233 
    goto ldv_54994;
  }
  ldv_54994: 
#line 235 
  ;
  
#line 236 
  return;
}


#line 237  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_main.c"
static void mlx5e_async_event(struct mlx5_core_dev *mdev, void *vpriv, enum mlx5_dev_event event, unsigned long param)
{
  int tmp;
  
#line 240 
  struct mlx5e_priv *priv = (struct mlx5e_priv *)vpriv;
  
#line 242 
  ldv_spin_lock_79(& priv->async_events_spinlock);
  
#line 243 
  tmp = constant_test_bit(0L,(unsigned long const volatile *)(& priv->state));
  
#line 243 
  if (tmp != 0) 
#line 244 
                __mlx5e_async_event(priv,event); else ;
  
#line 245 
  ldv_spin_unlock_80(& priv->async_events_spinlock);
  
#line 246 
  return;
}


#line 248  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_main.c"
static void mlx5e_enable_async_events(struct mlx5e_priv *priv)
{
  
#line 250 
  set_bit(0L,(unsigned long volatile *)(& priv->state));
  
#line 251 
  return;
}


#line 253  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_main.c"
static void mlx5e_disable_async_events(struct mlx5e_priv *priv)
{
  
#line 255 
  ldv_spin_lock_irq_81(& priv->async_events_spinlock);
  
#line 256 
  set_bit(0L,(unsigned long volatile *)(& priv->state));
  
#line 257 
  ldv_spin_unlock_irq_82(& priv->async_events_spinlock);
  
#line 258 
  return;
}


#line 263  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_main.c"
static int mlx5e_create_rq(struct mlx5e_channel *c, struct mlx5e_rq_param *param, struct mlx5e_rq *rq)
{
  int __retres;
  int wq_sz;
  int err;
  int i;
  u32 tmp;
  void *tmp_1;
  int tmp_0;
  
#line 267 
  struct mlx5e_priv *priv = c->priv;
  
#line 268 
  struct mlx5_core_dev *mdev = priv->mdev;
  
#line 269 
  void *rqc = (void *)(& param->rqc);
  
#line 270 
  void *rqc_wq = rqc + 48U;
  
#line 275 
  err = mlx5_wq_ll_create(mdev,& param->wq,rqc_wq,& rq->wq,& rq->wq_ctrl);
  
#line 277 
  if (err != 0) {
    
#line 278 
    __retres = err;
    
#line 278 
    goto return_label;
  }
  else ;
  
#line 280 
  rq->wq.db = rq->wq.db;
  
#line 282 
  tmp = mlx5_wq_ll_get_size(& rq->wq);
  
#line 282 
  wq_sz = (int)tmp;
  
#line 283 
  tmp_0 = __cpu_to_node(c->cpu);
  
#line 283 
  ;
  
#line 283 
  tmp_1 = kzalloc_node((unsigned long)wq_sz * 8UL,208U,tmp_0);
  
#line 283 
  rq->skb = (struct sk_buff **)tmp_1;
  
#line 285 
  if (rq->skb == (struct sk_buff **)0) {
    
#line 286 
    err = -12;
    
#line 287 
    goto err_rq_wq_destroy;
  }
  else ;
  
#line 290 
  if ((int)priv->params.lro_en != 0) 
#line 290 
                                     rq->wqe_sz = priv->params.lro_wqe_sz; else 
                                                                    
#line 290 
                                                                    rq->wqe_sz = (priv->netdev)->mtu + 22U;
  
#line 292 
  rq->wqe_sz = (rq->wqe_sz + 65U) & 4294967232U;
  
#line 294 
  i = 0;
  
#line 294 
  goto ldv_55025;
  ldv_55024: 
#line 295 
  ;
  {
    
#line 295 
    struct mlx5e_rx_wqe *wqe = mlx5_wq_ll_get_wqe(& rq->wq,(unsigned short)((int)((unsigned short)i)));
    
#line 296 
    u32 byte_count = rq->wqe_sz + 4294967294U;
    
#line 298 
    wqe->data.lkey = c->mkey_be;
    
#line 299 
    if (0 != 0) 
#line 299 
                wqe->data.byte_count = ((((byte_count << 24) | ((byte_count << 8) & 16711680U)) | ((byte_count >> 8) & 65280U)) | (byte_count >> 24)) | 128U; else 
                                                                    
#line 300 
                                                                    wqe->data.byte_count = __fswab32(byte_count | 2147483648U);
  }
  
#line 294 
  i += 1;
  ldv_55025: 
#line 295 
  ;
  
#line 294 
  if (i < wq_sz) 
#line 296 
                 goto ldv_55024; else 
#line 299 
                                      goto ldv_55026;
  ldv_55026: 
#line 300 
  ;
  
#line 303 
  rq->pdev = c->pdev;
  
#line 304 
  rq->netdev = c->netdev;
  
#line 305 
  rq->channel = c;
  
#line 306 
  rq->ix = c->ix;
  
#line 308 
  __retres = 0;
  
#line 308 
  goto return_label;
  err_rq_wq_destroy: 
#line 310 
  ;
  
#line 311 
  mlx5_wq_destroy(& rq->wq_ctrl);
  
#line 313 
  __retres = err;
  return_label: 
#line 313 
                return __retres;
}


#line 316  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_main.c"
static void mlx5e_destroy_rq(struct mlx5e_rq *rq)
{
  
#line 318 
  kfree((void const *)rq->skb);
  
#line 319 
  mlx5_wq_destroy(& rq->wq_ctrl);
  
#line 320 
  return;
}


#line 346 
void __compiletime_assert_346(void);


#line 348 
void __compiletime_assert_349(void);


#line 350 
void __compiletime_assert_350(void);


#line 322  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_main.c"
static int mlx5e_enable_rq(struct mlx5e_rq *rq, struct mlx5e_rq_param *param)
{
  int __retres;
  void *in;
  void *rqc;
  void *wq;
  int inlen;
  int err;
  
#line 324 
  struct mlx5e_channel *c = rq->channel;
  
#line 325 
  struct mlx5e_priv *priv = c->priv;
  
#line 326 
  struct mlx5_core_dev *mdev = priv->mdev;
  
#line 334 
  inlen = (int)(((unsigned long)rq->wq_ctrl.buf.npages + 34UL) * (unsigned long)8U);
  
#line 336 
  in = mlx5_vzalloc_2((unsigned long)inlen);
  
#line 337 
  if (in == (void *)0) {
    
#line 338 
    __retres = -12;
    
#line 338 
    goto return_label;
  }
  else ;
  
#line 340 
  rqc = in + 32U;
  
#line 341 
  wq = rqc + 48U;
  
#line 343 
  memcpy(rqc,(void const *)(& param->rqc),240UL);
  {
    
#line 345 
    bool __cond = (_Bool)0;
    
#line 345 
    if ((int)__cond != 0) 
#line 345 
                          __compiletime_assert_345(); else ;
  }
  
#line 345 
  if (0 != 0) {
    unsigned int tmp_2;
    unsigned int tmp_4;
    unsigned int tmp_6;
    unsigned int tmp_8;
    
#line 345 
    if (0 != 0) 
#line 345 
                tmp_2 = ((((*((__be32 *)rqc + 2U) << 24) | ((*((__be32 *)rqc + 2U) << 8) & 16711680U)) | ((*((__be32 *)rqc + 2U) >> 8) & 65280U)) | (*((__be32 *)rqc + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_1;
      
#line 345 
      tmp_1 = __fswab32(*((__be32 *)rqc + 2U));
      
#line 345 
      tmp_2 = tmp_1 & 4278190080U;
    }
    
#line 345 
    if (0 != 0) 
#line 345 
                tmp_4 = ((((*((__be32 *)rqc + 2U) << 24) | ((*((__be32 *)rqc + 2U) << 8) & 16711680U)) | ((*((__be32 *)rqc + 2U) >> 8) & 65280U)) | (*((__be32 *)rqc + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_3;
      
#line 345 
      tmp_3 = __fswab32(*((__be32 *)rqc + 2U));
      
#line 345 
      tmp_4 = tmp_3 & 4278190080U;
    }
    
#line 345 
    if (0 != 0) 
#line 345 
                tmp_6 = ((((*((__be32 *)rqc + 2U) << 24) | ((*((__be32 *)rqc + 2U) << 8) & 16711680U)) | ((*((__be32 *)rqc + 2U) >> 8) & 65280U)) | (*((__be32 *)rqc + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_5;
      
#line 345 
      tmp_5 = __fswab32(*((__be32 *)rqc + 2U));
      
#line 345 
      tmp_6 = tmp_5 & 4278190080U;
    }
    
#line 345 
    if (0 != 0) 
#line 345 
                tmp_8 = ((((*((__be32 *)rqc + 2U) << 24) | ((*((__be32 *)rqc + 2U) << 8) & 16711680U)) | ((*((__be32 *)rqc + 2U) >> 8) & 65280U)) | (*((__be32 *)rqc + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_7;
      
#line 345 
      tmp_7 = __fswab32(*((__be32 *)rqc + 2U));
      
#line 345 
      tmp_8 = tmp_7 & 4278190080U;
    }
    
#line 345 
    *((__be32 *)rqc + 2U) = ((((tmp_2 | (c->rq.cq.mcq.cqn & 16777215U)) << 24) | (((tmp_4 | (c->rq.cq.mcq.cqn & 16777215U)) << 8) & 16711680U)) | (((tmp_6 | (c->rq.cq.mcq.cqn & 16777215U)) >> 8) & 65280U)) | ((tmp_8 | (c->rq.cq.mcq.cqn & 16777215U)) >> 24);
  }
  else {
    __u32 tmp_11;
    unsigned int tmp_10;
    
#line 345 
    if (0 != 0) 
#line 345 
                tmp_10 = ((((*((__be32 *)rqc + 2U) << 24) | ((*((__be32 *)rqc + 2U) << 8) & 16711680U)) | ((*((__be32 *)rqc + 2U) >> 8) & 65280U)) | (*((__be32 *)rqc + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_9;
      
#line 345 
      tmp_9 = __fswab32(*((__be32 *)rqc + 2U));
      
#line 345 
      tmp_10 = tmp_9 & 4278190080U;
    }
    
#line 345 
    ;
    
#line 345 
    tmp_11 = __fswab32(tmp_10 | (c->rq.cq.mcq.cqn & 16777215U));
    
#line 345 
    *((__be32 *)rqc + 2U) = tmp_11;
  }
  {
    
#line 346 
    bool __cond_0 = (_Bool)0;
    
#line 346 
    if ((int)__cond_0 != 0) 
#line 346 
                            __compiletime_assert_346(); else ;
  }
  
#line 346 
  if (0 != 0) {
    unsigned int tmp_15;
    unsigned int tmp_17;
    unsigned int tmp_19;
    unsigned int tmp_21;
    
#line 346 
    if (0 != 0) 
#line 346 
                tmp_15 = ((((*((__be32 *)rqc) << 24) | ((*((__be32 *)rqc) << 8) & 16711680U)) | ((*((__be32 *)rqc) >> 8) & 65280U)) | (*((__be32 *)rqc) >> 24)) << 24;
    else {
      __u32 tmp_14;
      
#line 346 
      tmp_14 = __fswab32(*((__be32 *)rqc));
      
#line 346 
      tmp_15 = tmp_14 << 24;
    }
    
#line 346 
    if (0 != 0) 
#line 346 
                tmp_17 = (((((*((__be32 *)rqc) << 24) | ((*((__be32 *)rqc) << 8) & 16711680U)) | ((*((__be32 *)rqc) >> 8) & 65280U)) | (*((__be32 *)rqc) >> 24)) << 8) & 16711680U;
    else {
      __u32 tmp_16;
      
#line 346 
      tmp_16 = __fswab32(*((__be32 *)rqc));
      
#line 346 
      tmp_17 = (tmp_16 << 8) & 16711680U;
    }
    
#line 346 
    if (0 != 0) 
#line 346 
                tmp_19 = (((((*((__be32 *)rqc) << 24) | ((*((__be32 *)rqc) << 8) & 16711680U)) | ((*((__be32 *)rqc) >> 8) & 65280U)) | (*((__be32 *)rqc) >> 24)) >> 8) & 3840U;
    else {
      __u32 tmp_18;
      
#line 346 
      tmp_18 = __fswab32(*((__be32 *)rqc));
      
#line 346 
      tmp_19 = (tmp_18 >> 8) & 3840U;
    }
    
#line 346 
    if (0 != 0) 
#line 346 
                tmp_21 = ((((*((__be32 *)rqc) << 24) | ((*((__be32 *)rqc) << 8) & 16711680U)) | ((*((__be32 *)rqc) >> 8) & 65280U)) | (*((__be32 *)rqc) >> 24)) >> 24;
    else {
      __u32 tmp_20;
      
#line 346 
      tmp_20 = __fswab32(*((__be32 *)rqc));
      
#line 346 
      tmp_21 = tmp_20 >> 24;
    }
    
#line 346 
    *((__be32 *)rqc) = ((tmp_15 | tmp_17) | tmp_19) | tmp_21;
  }
  else {
    __u32 tmp_24;
    unsigned int tmp_23;
    
#line 346 
    if (0 != 0) 
#line 346 
                tmp_23 = ((((*((__be32 *)rqc) << 24) | ((*((__be32 *)rqc) << 8) & 16711680U)) | ((*((__be32 *)rqc) >> 8) & 65280U)) | (*((__be32 *)rqc) >> 24)) & 4279238655U;
    else {
      __u32 tmp_22;
      
#line 346 
      tmp_22 = __fswab32(*((__be32 *)rqc));
      
#line 346 
      tmp_23 = tmp_22 & 4279238655U;
    }
    
#line 346 
    tmp_24 = __fswab32(tmp_23);
    
#line 346 
    *((__be32 *)rqc) = tmp_24;
  }
  {
    
#line 347 
    bool __cond_1 = (_Bool)0;
    
#line 347 
    if ((int)__cond_1 != 0) 
#line 347 
                            __compiletime_assert_347(); else ;
  }
  
#line 347 
  if (0 != 0) {
    unsigned int tmp_28;
    unsigned int tmp_30;
    unsigned int tmp_32;
    unsigned int tmp_34;
    
#line 347 
    if (0 != 0) 
#line 347 
                tmp_28 = ((((*((__be32 *)rqc) << 24) | ((*((__be32 *)rqc) << 8) & 16711680U)) | ((*((__be32 *)rqc) >> 8) & 65280U)) | (*((__be32 *)rqc) >> 24)) << 24;
    else {
      __u32 tmp_27;
      
#line 347 
      tmp_27 = __fswab32(*((__be32 *)rqc));
      
#line 347 
      tmp_28 = tmp_27 << 24;
    }
    
#line 347 
    if (0 != 0) 
#line 347 
                tmp_30 = (((((*((__be32 *)rqc) << 24) | ((*((__be32 *)rqc) << 8) & 16711680U)) | ((*((__be32 *)rqc) >> 8) & 65280U)) | (*((__be32 *)rqc) >> 24)) << 8) & 16711680U;
    else {
      __u32 tmp_29;
      
#line 347 
      tmp_29 = __fswab32(*((__be32 *)rqc));
      
#line 347 
      tmp_30 = (tmp_29 << 8) & 16711680U;
    }
    
#line 347 
    if (0 != 0) 
#line 347 
                tmp_32 = ((((((*((__be32 *)rqc) << 24) | ((*((__be32 *)rqc) << 8) & 16711680U)) | ((*((__be32 *)rqc) >> 8) & 65280U)) | (*((__be32 *)rqc) >> 24)) >> 8) & 64256U) | 1024U;
    else {
      __u32 tmp_31;
      
#line 347 
      tmp_31 = __fswab32(*((__be32 *)rqc));
      
#line 347 
      tmp_32 = ((tmp_31 >> 8) & 64256U) | 1024U;
    }
    
#line 347 
    if (0 != 0) 
#line 347 
                tmp_34 = ((((*((__be32 *)rqc) << 24) | ((*((__be32 *)rqc) << 8) & 16711680U)) | ((*((__be32 *)rqc) >> 8) & 65280U)) | (*((__be32 *)rqc) >> 24)) >> 24;
    else {
      __u32 tmp_33;
      
#line 347 
      tmp_33 = __fswab32(*((__be32 *)rqc));
      
#line 347 
      tmp_34 = tmp_33 >> 24;
    }
    
#line 347 
    *((__be32 *)rqc) = ((tmp_28 | tmp_30) | tmp_32) | tmp_34;
  }
  else {
    __u32 tmp_37;
    unsigned int tmp_36;
    
#line 347 
    if (0 != 0) 
#line 347 
                tmp_36 = ((((*((__be32 *)rqc) << 24) | ((*((__be32 *)rqc) << 8) & 16711680U)) | ((*((__be32 *)rqc) >> 8) & 65280U)) | (*((__be32 *)rqc) >> 24)) | 262144U;
    else {
      __u32 tmp_35;
      
#line 347 
      tmp_35 = __fswab32(*((__be32 *)rqc));
      
#line 347 
      tmp_36 = tmp_35 | 262144U;
    }
    
#line 347 
    tmp_37 = __fswab32(tmp_36);
    
#line 347 
    *((__be32 *)rqc) = tmp_37;
  }
  {
    
#line 348 
    bool __cond_2 = (_Bool)0;
    
#line 348 
    if ((int)__cond_2 != 0) 
#line 348 
                            __compiletime_assert_349(); else ;
  }
  
#line 348 
  if (0 != 0) {
    unsigned int tmp_41;
    unsigned int tmp_43;
    unsigned int tmp_45;
    unsigned int tmp_47;
    
#line 348 
    if (0 != 0) 
#line 348 
                tmp_41 = ((((*((__be32 *)wq + 8U) << 24) | ((*((__be32 *)wq + 8U) << 8) & 16711680U)) | ((*((__be32 *)wq + 8U) >> 8) & 65280U)) | (*((__be32 *)wq + 8U) >> 24)) & 4294959359U;
    else {
      __u32 tmp_40;
      
#line 348 
      tmp_40 = __fswab32(*((__be32 *)wq + 8U));
      
#line 348 
      tmp_41 = tmp_40 & 4294959359U;
    }
    
#line 348 
    if (0 != 0) 
#line 348 
                tmp_43 = ((((*((__be32 *)wq + 8U) << 24) | ((*((__be32 *)wq + 8U) << 8) & 16711680U)) | ((*((__be32 *)wq + 8U) >> 8) & 65280U)) | (*((__be32 *)wq + 8U) >> 24)) & 4294959359U;
    else {
      __u32 tmp_42;
      
#line 348 
      tmp_42 = __fswab32(*((__be32 *)wq + 8U));
      
#line 348 
      tmp_43 = tmp_42 & 4294959359U;
    }
    
#line 348 
    if (0 != 0) 
#line 348 
                tmp_45 = ((((*((__be32 *)wq + 8U) << 24) | ((*((__be32 *)wq + 8U) << 8) & 16711680U)) | ((*((__be32 *)wq + 8U) >> 8) & 65280U)) | (*((__be32 *)wq + 8U) >> 24)) & 4294959359U;
    else {
      __u32 tmp_44;
      
#line 348 
      tmp_44 = __fswab32(*((__be32 *)wq + 8U));
      
#line 348 
      tmp_45 = tmp_44 & 4294959359U;
    }
    
#line 348 
    if (0 != 0) 
#line 348 
                tmp_47 = ((((*((__be32 *)wq + 8U) << 24) | ((*((__be32 *)wq + 8U) << 8) & 16711680U)) | ((*((__be32 *)wq + 8U) >> 8) & 65280U)) | (*((__be32 *)wq + 8U) >> 24)) & 4294959359U;
    else {
      __u32 tmp_46;
      
#line 348 
      tmp_46 = __fswab32(*((__be32 *)wq + 8U));
      
#line 348 
      tmp_47 = tmp_46 & 4294959359U;
    }
    
#line 348 
    *((__be32 *)wq + 8U) = ((((tmp_41 | (((unsigned int)((int)rq->wq_ctrl.buf.page_shift + -12) << 8UL) & 7936U)) << 24) | (((tmp_43 | (((unsigned int)((int)rq->wq_ctrl.buf.page_shift + -12) << 8UL) & 7936U)) << 8) & 16711680U)) | (((tmp_45 | (((unsigned int)((int)rq->wq_ctrl.buf.page_shift + -12) << 8UL) & 7936U)) >> 8) & 65280U)) | ((tmp_47 | (((unsigned int)((int)rq->wq_ctrl.buf.page_shift + -12) << 8UL) & 7936U)) >> 24);
  }
  else {
    __u32 tmp_50;
    unsigned int tmp_49;
    
#line 348 
    if (0 != 0) 
#line 348 
                tmp_49 = ((((*((__be32 *)wq + 8U) << 24) | ((*((__be32 *)wq + 8U) << 8) & 16711680U)) | ((*((__be32 *)wq + 8U) >> 8) & 65280U)) | (*((__be32 *)wq + 8U) >> 24)) & 4294959359U;
    else {
      __u32 tmp_48;
      
#line 348 
      tmp_48 = __fswab32(*((__be32 *)wq + 8U));
      
#line 348 
      tmp_49 = tmp_48 & 4294959359U;
    }
    
#line 348 
    ;
    
#line 348 
    tmp_50 = __fswab32(tmp_49 | (((unsigned int)((int)rq->wq_ctrl.buf.page_shift + -12) << 8UL) & 7936U));
    
#line 348 
    *((__be32 *)wq + 8U) = tmp_50;
  }
  {
    
#line 350 
    bool __cond_3 = (_Bool)0;
    
#line 350 
    if ((int)__cond_3 != 0) 
#line 350 
                            __compiletime_assert_350(); else ;
  }
  {
    
#line 350 
    bool __cond_4 = (_Bool)0;
    
#line 350 
    if ((int)__cond_4 != 0) 
#line 350 
                            __compiletime_assert_350(); else ;
  }
  
#line 350 
  if (0 != 0) 
#line 350 
              *((__be64 *)wq + 2U) = (((((((rq->wq_ctrl.db.dma << 56) | ((rq->wq_ctrl.db.dma << 40) & 71776119061217280ULL)) | ((rq->wq_ctrl.db.dma << 24) & 280375465082880ULL)) | ((rq->wq_ctrl.db.dma << 8) & 1095216660480ULL)) | ((rq->wq_ctrl.db.dma >> 8) & 4278190080ULL)) | ((rq->wq_ctrl.db.dma >> 24) & 16711680ULL)) | ((rq->wq_ctrl.db.dma >> 40) & 65280ULL)) | (rq->wq_ctrl.db.dma >> 56); else 
                                                                    
#line 350 
                                                                    *((__be64 *)wq + 2U) = __fswab64(rq->wq_ctrl.db.dma);
  
#line 352 
  mlx5_fill_page_array(& rq->wq_ctrl.buf,(__be64 *)wq + 192U);
  
#line 355 
  err = mlx5_core_create_rq(mdev,(u32 *)in,inlen,& rq->rqn);
  
#line 357 
  kvfree((void const *)in);
  
#line 359 
  __retres = err;
  return_label: 
#line 359 
                return __retres;
}


#line 380 
void __compiletime_assert_380(void);


#line 381 
void __compiletime_assert_381(void);


#line 362  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_main.c"
static int mlx5e_modify_rq(struct mlx5e_rq *rq, int curr_state, int next_state)
{
  int __retres;
  void *in;
  void *rqc;
  int inlen;
  int err;
  
#line 364 
  struct mlx5e_channel *c = rq->channel;
  
#line 365 
  struct mlx5e_priv *priv = c->priv;
  
#line 366 
  struct mlx5_core_dev *mdev = priv->mdev;
  
#line 373 
  inlen = 272;
  
#line 374 
  in = mlx5_vzalloc_2((unsigned long)inlen);
  
#line 375 
  if (in == (void *)0) {
    
#line 376 
    __retres = -12;
    
#line 376 
    goto return_label;
  }
  else ;
  
#line 378 
  rqc = in + 32U;
  {
    
#line 380 
    bool __cond = (_Bool)0;
    
#line 380 
    if ((int)__cond != 0) 
#line 380 
                          __compiletime_assert_380(); else ;
  }
  
#line 380 
  if (0 != 0) {
    unsigned int tmp_2;
    unsigned int tmp_4;
    unsigned int tmp_6;
    unsigned int tmp_8;
    
#line 380 
    if (0 != 0) 
#line 380 
                tmp_2 = ((((*((__be32 *)in + 2U) << 24) | ((*((__be32 *)in + 2U) << 8) & 16711680U)) | ((*((__be32 *)in + 2U) >> 8) & 65280U)) | (*((__be32 *)in + 2U) >> 24)) & 268435455U;
    else {
      __u32 tmp_1;
      
#line 380 
      tmp_1 = __fswab32(*((__be32 *)in + 2U));
      
#line 380 
      tmp_2 = tmp_1 & 268435455U;
    }
    
#line 380 
    if (0 != 0) 
#line 380 
                tmp_4 = ((((*((__be32 *)in + 2U) << 24) | ((*((__be32 *)in + 2U) << 8) & 16711680U)) | ((*((__be32 *)in + 2U) >> 8) & 65280U)) | (*((__be32 *)in + 2U) >> 24)) & 268435455U;
    else {
      __u32 tmp_3;
      
#line 380 
      tmp_3 = __fswab32(*((__be32 *)in + 2U));
      
#line 380 
      tmp_4 = tmp_3 & 268435455U;
    }
    
#line 380 
    if (0 != 0) 
#line 380 
                tmp_6 = ((((*((__be32 *)in + 2U) << 24) | ((*((__be32 *)in + 2U) << 8) & 16711680U)) | ((*((__be32 *)in + 2U) >> 8) & 65280U)) | (*((__be32 *)in + 2U) >> 24)) & 268435455U;
    else {
      __u32 tmp_5;
      
#line 380 
      tmp_5 = __fswab32(*((__be32 *)in + 2U));
      
#line 380 
      tmp_6 = tmp_5 & 268435455U;
    }
    
#line 380 
    if (0 != 0) 
#line 380 
                tmp_8 = ((((*((__be32 *)in + 2U) << 24) | ((*((__be32 *)in + 2U) << 8) & 16711680U)) | ((*((__be32 *)in + 2U) >> 8) & 65280U)) | (*((__be32 *)in + 2U) >> 24)) & 268435455U;
    else {
      __u32 tmp_7;
      
#line 380 
      tmp_7 = __fswab32(*((__be32 *)in + 2U));
      
#line 380 
      tmp_8 = tmp_7 & 268435455U;
    }
    
#line 380 
    *((__be32 *)in + 2U) = ((((tmp_2 | ((unsigned int)curr_state << 28UL)) << 24) | (((tmp_4 | ((unsigned int)curr_state << 28UL)) << 8) & 16711680U)) | (((tmp_6 | ((unsigned int)curr_state << 28UL)) >> 8) & 65280U)) | ((tmp_8 | ((unsigned int)curr_state << 28UL)) >> 24);
  }
  else {
    __u32 tmp_11;
    unsigned int tmp_10;
    
#line 380 
    if (0 != 0) 
#line 380 
                tmp_10 = ((((*((__be32 *)in + 2U) << 24) | ((*((__be32 *)in + 2U) << 8) & 16711680U)) | ((*((__be32 *)in + 2U) >> 8) & 65280U)) | (*((__be32 *)in + 2U) >> 24)) & 268435455U;
    else {
      __u32 tmp_9;
      
#line 380 
      tmp_9 = __fswab32(*((__be32 *)in + 2U));
      
#line 380 
      tmp_10 = tmp_9 & 268435455U;
    }
    
#line 380 
    ;
    
#line 380 
    tmp_11 = __fswab32(tmp_10 | ((unsigned int)curr_state << 28UL));
    
#line 380 
    *((__be32 *)in + 2U) = tmp_11;
  }
  {
    
#line 381 
    bool __cond_0 = (_Bool)0;
    
#line 381 
    if ((int)__cond_0 != 0) 
#line 381 
                            __compiletime_assert_381(); else ;
  }
  
#line 381 
  if (0 != 0) {
    unsigned int tmp_15;
    unsigned int tmp_17;
    unsigned int tmp_19;
    unsigned int tmp_21;
    
#line 381 
    if (0 != 0) 
#line 381 
                tmp_15 = ((((*((__be32 *)rqc) << 24) | ((*((__be32 *)rqc) << 8) & 16711680U)) | ((*((__be32 *)rqc) >> 8) & 65280U)) | (*((__be32 *)rqc) >> 24)) & 4279238655U;
    else {
      __u32 tmp_14;
      
#line 381 
      tmp_14 = __fswab32(*((__be32 *)rqc));
      
#line 381 
      tmp_15 = tmp_14 & 4279238655U;
    }
    
#line 381 
    if (0 != 0) 
#line 381 
                tmp_17 = ((((*((__be32 *)rqc) << 24) | ((*((__be32 *)rqc) << 8) & 16711680U)) | ((*((__be32 *)rqc) >> 8) & 65280U)) | (*((__be32 *)rqc) >> 24)) & 4279238655U;
    else {
      __u32 tmp_16;
      
#line 381 
      tmp_16 = __fswab32(*((__be32 *)rqc));
      
#line 381 
      tmp_17 = tmp_16 & 4279238655U;
    }
    
#line 381 
    if (0 != 0) 
#line 381 
                tmp_19 = ((((*((__be32 *)rqc) << 24) | ((*((__be32 *)rqc) << 8) & 16711680U)) | ((*((__be32 *)rqc) >> 8) & 65280U)) | (*((__be32 *)rqc) >> 24)) & 4279238655U;
    else {
      __u32 tmp_18;
      
#line 381 
      tmp_18 = __fswab32(*((__be32 *)rqc));
      
#line 381 
      tmp_19 = tmp_18 & 4279238655U;
    }
    
#line 381 
    if (0 != 0) 
#line 381 
                tmp_21 = ((((*((__be32 *)rqc) << 24) | ((*((__be32 *)rqc) << 8) & 16711680U)) | ((*((__be32 *)rqc) >> 8) & 65280U)) | (*((__be32 *)rqc) >> 24)) & 4279238655U;
    else {
      __u32 tmp_20;
      
#line 381 
      tmp_20 = __fswab32(*((__be32 *)rqc));
      
#line 381 
      tmp_21 = tmp_20 & 4279238655U;
    }
    
#line 381 
    *((__be32 *)rqc) = ((((tmp_15 | (((unsigned int)next_state << 20UL) & 15728640U)) << 24) | (((tmp_17 | (((unsigned int)next_state << 20UL) & 15728640U)) << 8) & 16711680U)) | (((tmp_19 | (((unsigned int)next_state << 20UL) & 15728640U)) >> 8) & 65280U)) | ((tmp_21 | (((unsigned int)next_state << 20UL) & 15728640U)) >> 24);
  }
  else {
    __u32 tmp_24;
    unsigned int tmp_23;
    
#line 381 
    if (0 != 0) 
#line 381 
                tmp_23 = ((((*((__be32 *)rqc) << 24) | ((*((__be32 *)rqc) << 8) & 16711680U)) | ((*((__be32 *)rqc) >> 8) & 65280U)) | (*((__be32 *)rqc) >> 24)) & 4279238655U;
    else {
      __u32 tmp_22;
      
#line 381 
      tmp_22 = __fswab32(*((__be32 *)rqc));
      
#line 381 
      tmp_23 = tmp_22 & 4279238655U;
    }
    
#line 381 
    ;
    
#line 381 
    tmp_24 = __fswab32(tmp_23 | (((unsigned int)next_state << 20UL) & 15728640U));
    
#line 381 
    *((__be32 *)rqc) = tmp_24;
  }
  
#line 383 
  err = mlx5_core_modify_rq(mdev,rq->rqn,(u32 *)in,inlen);
  
#line 385 
  kvfree((void const *)in);
  
#line 387 
  __retres = err;
  return_label: 
#line 387 
                return __retres;
}


#line 390  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_main.c"
static void mlx5e_disable_rq(struct mlx5e_rq *rq)
{
  
#line 392 
  struct mlx5e_channel *c = rq->channel;
  
#line 393 
  struct mlx5e_priv *priv = c->priv;
  
#line 394 
  struct mlx5_core_dev *mdev = priv->mdev;
  
#line 396 
  mlx5_core_destroy_rq(mdev,rq->rqn);
  
#line 397 
  return;
}


#line 399  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_main.c"
static int mlx5e_wait_for_min_rx_wqes(struct mlx5e_rq *rq)
{
  int __retres;
  int i;
  
#line 401 
  struct mlx5e_channel *c = rq->channel;
  
#line 402 
  struct mlx5e_priv *priv = c->priv;
  
#line 403 
  struct mlx5_wq_ll *wq = & rq->wq;
  
#line 406 
  i = 0;
  
#line 406 
  goto ldv_55100;
  ldv_55099: 
#line 407 
  ;
  
#line 407 
  if ((int)wq->cur_sz >= (int)priv->params.min_rx_wqes) {
    
#line 408 
    __retres = 0;
    
#line 408 
    goto return_label;
  }
  else ;
  
#line 410 
  msleep(20U);
  
#line 406 
  i += 1;
  ldv_55100: 
#line 407 
  ;
  
#line 406 
  if (i <= 999) 
#line 408 
                goto ldv_55099; else 
#line 411 
                                     goto ldv_55101;
  ldv_55101: 
#line 412 
  ;
  
#line 413 
  __retres = -110;
  return_label: 
#line 413 
                return __retres;
}


#line 416  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_main.c"
static int mlx5e_open_rq(struct mlx5e_channel *c, struct mlx5e_rq_param *param, struct mlx5e_rq *rq)
{
  int __retres;
  int err;
  
#line 422 
  err = mlx5e_create_rq(c,param,rq);
  
#line 423 
  if (err != 0) {
    
#line 424 
    __retres = err;
    
#line 424 
    goto return_label;
  }
  else ;
  
#line 426 
  err = mlx5e_enable_rq(rq,param);
  
#line 427 
  if (err != 0) 
#line 428 
                goto err_destroy_rq; else ;
  
#line 430 
  err = mlx5e_modify_rq(rq,0,1);
  
#line 431 
  if (err != 0) 
#line 432 
                goto err_disable_rq; else ;
  
#line 434 
  set_bit(0L,(unsigned long volatile *)(& rq->state));
  
#line 435 
  mlx5e_send_nop(& c->sq[0],(_Bool)1);
  
#line 437 
  __retres = 0;
  
#line 437 
  goto return_label;
  err_disable_rq: 
#line 439 
  ;
  
#line 440 
  mlx5e_disable_rq(rq);
  err_destroy_rq: 
#line 441 
  ;
  
#line 442 
  mlx5e_destroy_rq(rq);
  
#line 444 
  __retres = err;
  return_label: 
#line 444 
                return __retres;
}


#line 447  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_main.c"
static void mlx5e_close_rq(struct mlx5e_rq *rq)
{
  int tmp;
  
#line 449 
  set_bit(0L,(unsigned long volatile *)(& rq->state));
  
#line 450 
  napi_synchronize((struct napi_struct const *)(& (rq->channel)->napi));
  
#line 452 
  mlx5e_modify_rq(rq,1,3);
  
#line 453 
  goto ldv_55114;
  ldv_55113: 
#line 454 
  ;
  
#line 454 
  msleep(20U);
  ldv_55114: 
#line 455 
  ;
  
#line 453 
  tmp = mlx5_wq_ll_is_empty(& rq->wq);
  
#line 453 
  if (tmp == 0) 
#line 455 
                goto ldv_55113; else 
#line 458 
                                     goto ldv_55115;
  ldv_55115: 
#line 459 
  ;
  
#line 457 
  napi_synchronize((struct napi_struct const *)(& (rq->channel)->napi));
  
#line 459 
  mlx5e_disable_rq(rq);
  
#line 460 
  mlx5e_destroy_rq(rq);
  
#line 461 
  return;
}


#line 463  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_main.c"
static void mlx5e_free_sq_db(struct mlx5e_sq *sq)
{
  
#line 465 
  kfree((void const *)sq->dma_fifo);
  
#line 466 
  kfree((void const *)sq->skb);
  
#line 467 
  return;
}


#line 469  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_main.c"
static int mlx5e_alloc_sq_db(struct mlx5e_sq *sq, int numa)
{
  int __retres;
  u32 tmp;
  
#line 471 
  tmp = mlx5_wq_cyc_get_size(& sq->wq);
  
#line 471 
  int wq_sz = (int)tmp;
  
#line 472 
  int df_sz = wq_sz * 4;
  
#line 474 
  sq->skb = (struct sk_buff **)kzalloc_node((unsigned long)wq_sz * 8UL,208U,numa);
  
#line 475 
  sq->dma_fifo = (struct mlx5e_sq_dma *)kzalloc_node((unsigned long)df_sz * 16UL,208U,numa);
  
#line 478 
  if (sq->skb == (struct sk_buff **)0 || sq->dma_fifo == (struct mlx5e_sq_dma *)0) {
    
#line 479 
    mlx5e_free_sq_db(sq);
    
#line 480 
    __retres = -12;
    
#line 480 
    goto return_label;
  }
  else ;
  
#line 483 
  sq->dma_fifo_mask = (unsigned int)(df_sz + -1);
  
#line 485 
  __retres = 0;
  return_label: 
#line 485 
                return __retres;
}


#line 488  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_main.c"
static int mlx5e_create_sq(struct mlx5e_channel *c, int tc, struct mlx5e_sq_param *param, struct mlx5e_sq *sq)
{
  int __retres;
  int txq_ix;
  int err;
  int tmp_0;
  int tmp_1;
  
#line 493 
  struct mlx5e_priv *priv = c->priv;
  
#line 494 
  struct mlx5_core_dev *mdev = priv->mdev;
  
#line 496 
  void *sqc = (void *)(& param->sqc);
  
#line 497 
  void *sqc_wq = sqc + 48U;
  
#line 501 
  err = mlx5_alloc_map_uar(mdev,& sq->uar);
  
#line 502 
  if (err != 0) {
    
#line 503 
    __retres = err;
    
#line 503 
    goto return_label;
  }
  else ;
  
#line 505 
  err = mlx5_wq_cyc_create(mdev,& param->wq,sqc_wq,& sq->wq,& sq->wq_ctrl);
  
#line 507 
  if (err != 0) 
#line 508 
                goto err_unmap_free_uar; else ;
  
#line 510 
  sq->wq.db += 1U;
  
#line 511 
  sq->uar_map = sq->uar.map;
  
#line 512 
  if (0 != 0) 
#line 512 
              tmp_0 = (1 << ((((((*((__be32 *)(& mdev->hca_caps_cur[0]) + 19U) << 24) | ((*((__be32 *)(& mdev->hca_caps_cur[0]) + 19U) << 8) & 16711680U)) | ((*((__be32 *)(& mdev->hca_caps_cur[0]) + 19U) >> 8) & 65280U)) | (*((__be32 *)(& mdev->hca_caps_cur[0]) + 19U) >> 24)) >> 16UL) & 31U)) / 2;
  else {
    __u32 tmp;
    
#line 512 
    tmp = __fswab32(*((__be32 *)(& mdev->hca_caps_cur[0]) + 19U));
    
#line 512 
    tmp_0 = (1 << ((tmp >> 16UL) & 31U)) / 2;
  }
  
#line 512 
  sq->bf_buf_size = (unsigned int)tmp_0;
  
#line 514 
  tmp_1 = __cpu_to_node(c->cpu);
  
#line 514 
  ;
  
#line 514 
  err = mlx5e_alloc_sq_db(sq,tmp_1);
  
#line 515 
  if (err != 0) 
#line 516 
                goto err_sq_wq_destroy; else ;
  
#line 518 
  txq_ix = c->ix + (int)priv->params.num_channels * tc;
  
#line 519 
  sq->txq = netdev_get_tx_queue((struct net_device const *)priv->netdev,(unsigned int)txq_ix);
  
#line 521 
  sq->pdev = c->pdev;
  
#line 522 
  sq->mkey_be = c->mkey_be;
  
#line 523 
  sq->channel = c;
  
#line 524 
  sq->tc = tc;
  
#line 525 
  sq->edge = (unsigned short)((unsigned int)sq->wq.sz_m1 + 65521U);
  
#line 526 
  *(priv->txq_to_sq_map + txq_ix) = sq;
  
#line 528 
  __retres = 0;
  
#line 528 
  goto return_label;
  err_sq_wq_destroy: 
#line 530 
  ;
  
#line 531 
  mlx5_wq_destroy(& sq->wq_ctrl);
  err_unmap_free_uar: 
#line 533 
  ;
  
#line 534 
  mlx5_unmap_free_uar(mdev,& sq->uar);
  
#line 536 
  __retres = err;
  return_label: 
#line 536 
                return __retres;
}


#line 539  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_main.c"
static void mlx5e_destroy_sq(struct mlx5e_sq *sq)
{
  
#line 541 
  struct mlx5e_channel *c = sq->channel;
  
#line 542 
  struct mlx5e_priv *priv = c->priv;
  
#line 544 
  mlx5e_free_sq_db(sq);
  
#line 545 
  mlx5_wq_destroy(& sq->wq_ctrl);
  
#line 546 
  mlx5_unmap_free_uar(priv->mdev,& sq->uar);
  
#line 547 
  return;
}


#line 572 
void __compiletime_assert_572(void);


#line 573 
void __compiletime_assert_573(void);


#line 574 
void __compiletime_assert_574(void);


#line 575 
void __compiletime_assert_575(void);


#line 576 
void __compiletime_assert_576(void);


#line 577 
void __compiletime_assert_577(void);


#line 579 
void __compiletime_assert_579(void);


#line 580 
void __compiletime_assert_580(void);


#line 581 
void __compiletime_assert_582(void);


#line 583 
void __compiletime_assert_583(void);


#line 549  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_main.c"
static int mlx5e_enable_sq(struct mlx5e_sq *sq, struct mlx5e_sq_param *param)
{
  int __retres;
  void *in;
  void *sqc;
  void *wq;
  int inlen;
  int err;
  
#line 551 
  struct mlx5e_channel *c = sq->channel;
  
#line 552 
  struct mlx5e_priv *priv = c->priv;
  
#line 553 
  struct mlx5_core_dev *mdev = priv->mdev;
  
#line 561 
  inlen = (int)(((unsigned long)sq->wq_ctrl.buf.npages + 34UL) * (unsigned long)8U);
  
#line 563 
  in = mlx5_vzalloc_2((unsigned long)inlen);
  
#line 564 
  if (in == (void *)0) {
    
#line 565 
    __retres = -12;
    
#line 565 
    goto return_label;
  }
  else ;
  
#line 567 
  sqc = in + 32U;
  
#line 568 
  wq = sqc + 48U;
  
#line 570 
  memcpy(sqc,(void const *)(& param->sqc),240UL);
  {
    
#line 572 
    bool __cond = (_Bool)0;
    
#line 572 
    if ((int)__cond != 0) 
#line 572 
                          __compiletime_assert_572(); else ;
  }
  
#line 572 
  if (0 != 0) {
    unsigned int tmp_2;
    unsigned int tmp_4;
    unsigned int tmp_6;
    unsigned int tmp_8;
    
#line 572 
    if (0 != 0) 
#line 572 
                tmp_2 = ((((*((__be32 *)sqc + 1U) << 24) | ((*((__be32 *)sqc + 1U) << 8) & 16711680U)) | ((*((__be32 *)sqc + 1U) >> 8) & 65280U)) | (*((__be32 *)sqc + 1U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_1;
      
#line 572 
      tmp_1 = __fswab32(*((__be32 *)sqc + 1U));
      
#line 572 
      tmp_2 = tmp_1 & 4278190080U;
    }
    
#line 572 
    if (0 != 0) 
#line 572 
                tmp_4 = ((((*((__be32 *)sqc + 1U) << 24) | ((*((__be32 *)sqc + 1U) << 8) & 16711680U)) | ((*((__be32 *)sqc + 1U) >> 8) & 65280U)) | (*((__be32 *)sqc + 1U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_3;
      
#line 572 
      tmp_3 = __fswab32(*((__be32 *)sqc + 1U));
      
#line 572 
      tmp_4 = tmp_3 & 4278190080U;
    }
    
#line 572 
    if (0 != 0) 
#line 572 
                tmp_6 = ((((*((__be32 *)sqc + 1U) << 24) | ((*((__be32 *)sqc + 1U) << 8) & 16711680U)) | ((*((__be32 *)sqc + 1U) >> 8) & 65280U)) | (*((__be32 *)sqc + 1U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_5;
      
#line 572 
      tmp_5 = __fswab32(*((__be32 *)sqc + 1U));
      
#line 572 
      tmp_6 = tmp_5 & 4278190080U;
    }
    
#line 572 
    if (0 != 0) 
#line 572 
                tmp_8 = ((((*((__be32 *)sqc + 1U) << 24) | ((*((__be32 *)sqc + 1U) << 8) & 16711680U)) | ((*((__be32 *)sqc + 1U) >> 8) & 65280U)) | (*((__be32 *)sqc + 1U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_7;
      
#line 572 
      tmp_7 = __fswab32(*((__be32 *)sqc + 1U));
      
#line 572 
      tmp_8 = tmp_7 & 4278190080U;
    }
    
#line 572 
    *((__be32 *)sqc + 1U) = ((((tmp_2 | ((unsigned int)sq->tc & 16777215U)) << 24) | (((tmp_4 | ((unsigned int)sq->tc & 16777215U)) << 8) & 16711680U)) | (((tmp_6 | ((unsigned int)sq->tc & 16777215U)) >> 8) & 65280U)) | ((tmp_8 | ((unsigned int)sq->tc & 16777215U)) >> 24);
  }
  else {
    __u32 tmp_11;
    unsigned int tmp_10;
    
#line 572 
    if (0 != 0) 
#line 572 
                tmp_10 = ((((*((__be32 *)sqc + 1U) << 24) | ((*((__be32 *)sqc + 1U) << 8) & 16711680U)) | ((*((__be32 *)sqc + 1U) >> 8) & 65280U)) | (*((__be32 *)sqc + 1U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_9;
      
#line 572 
      tmp_9 = __fswab32(*((__be32 *)sqc + 1U));
      
#line 572 
      tmp_10 = tmp_9 & 4278190080U;
    }
    
#line 572 
    ;
    
#line 572 
    tmp_11 = __fswab32(tmp_10 | ((unsigned int)sq->tc & 16777215U));
    
#line 572 
    *((__be32 *)sqc + 1U) = tmp_11;
  }
  {
    
#line 573 
    bool __cond_0 = (_Bool)0;
    
#line 573 
    if ((int)__cond_0 != 0) 
#line 573 
                            __compiletime_assert_573(); else ;
  }
  
#line 573 
  if (0 != 0) {
    unsigned int tmp_15;
    unsigned int tmp_17;
    unsigned int tmp_19;
    unsigned int tmp_21;
    
#line 573 
    if (0 != 0) 
#line 573 
                tmp_15 = ((((*((__be32 *)sqc + 11U) << 24) | ((*((__be32 *)sqc + 11U) << 8) & 16711680U)) | ((*((__be32 *)sqc + 11U) >> 8) & 65280U)) | (*((__be32 *)sqc + 11U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_14;
      
#line 573 
      tmp_14 = __fswab32(*((__be32 *)sqc + 11U));
      
#line 573 
      tmp_15 = tmp_14 & 4278190080U;
    }
    
#line 573 
    if (0 != 0) 
#line 573 
                tmp_17 = ((((*((__be32 *)sqc + 11U) << 24) | ((*((__be32 *)sqc + 11U) << 8) & 16711680U)) | ((*((__be32 *)sqc + 11U) >> 8) & 65280U)) | (*((__be32 *)sqc + 11U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_16;
      
#line 573 
      tmp_16 = __fswab32(*((__be32 *)sqc + 11U));
      
#line 573 
      tmp_17 = tmp_16 & 4278190080U;
    }
    
#line 573 
    if (0 != 0) 
#line 573 
                tmp_19 = ((((*((__be32 *)sqc + 11U) << 24) | ((*((__be32 *)sqc + 11U) << 8) & 16711680U)) | ((*((__be32 *)sqc + 11U) >> 8) & 65280U)) | (*((__be32 *)sqc + 11U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_18;
      
#line 573 
      tmp_18 = __fswab32(*((__be32 *)sqc + 11U));
      
#line 573 
      tmp_19 = tmp_18 & 4278190080U;
    }
    
#line 573 
    if (0 != 0) 
#line 573 
                tmp_21 = ((((*((__be32 *)sqc + 11U) << 24) | ((*((__be32 *)sqc + 11U) << 8) & 16711680U)) | ((*((__be32 *)sqc + 11U) >> 8) & 65280U)) | (*((__be32 *)sqc + 11U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_20;
      
#line 573 
      tmp_20 = __fswab32(*((__be32 *)sqc + 11U));
      
#line 573 
      tmp_21 = tmp_20 & 4278190080U;
    }
    
#line 573 
    *((__be32 *)sqc + 11U) = ((((tmp_15 | (priv->tisn[sq->tc] & 16777215U)) << 24) | (((tmp_17 | (priv->tisn[sq->tc] & 16777215U)) << 8) & 16711680U)) | (((tmp_19 | (priv->tisn[sq->tc] & 16777215U)) >> 8) & 65280U)) | ((tmp_21 | (priv->tisn[sq->tc] & 16777215U)) >> 24);
  }
  else {
    __u32 tmp_24;
    unsigned int tmp_23;
    
#line 573 
    if (0 != 0) 
#line 573 
                tmp_23 = ((((*((__be32 *)sqc + 11U) << 24) | ((*((__be32 *)sqc + 11U) << 8) & 16711680U)) | ((*((__be32 *)sqc + 11U) >> 8) & 65280U)) | (*((__be32 *)sqc + 11U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_22;
      
#line 573 
      tmp_22 = __fswab32(*((__be32 *)sqc + 11U));
      
#line 573 
      tmp_23 = tmp_22 & 4278190080U;
    }
    
#line 573 
    ;
    
#line 573 
    tmp_24 = __fswab32(tmp_23 | (priv->tisn[sq->tc] & 16777215U));
    
#line 573 
    *((__be32 *)sqc + 11U) = tmp_24;
  }
  {
    
#line 574 
    bool __cond_1 = (_Bool)0;
    
#line 574 
    if ((int)__cond_1 != 0) 
#line 574 
                            __compiletime_assert_574(); else ;
  }
  
#line 574 
  if (0 != 0) {
    unsigned int tmp_28;
    unsigned int tmp_30;
    unsigned int tmp_32;
    unsigned int tmp_34;
    
#line 574 
    if (0 != 0) 
#line 574 
                tmp_28 = ((((*((__be32 *)sqc + 2U) << 24) | ((*((__be32 *)sqc + 2U) << 8) & 16711680U)) | ((*((__be32 *)sqc + 2U) >> 8) & 65280U)) | (*((__be32 *)sqc + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_27;
      
#line 574 
      tmp_27 = __fswab32(*((__be32 *)sqc + 2U));
      
#line 574 
      tmp_28 = tmp_27 & 4278190080U;
    }
    
#line 574 
    if (0 != 0) 
#line 574 
                tmp_30 = ((((*((__be32 *)sqc + 2U) << 24) | ((*((__be32 *)sqc + 2U) << 8) & 16711680U)) | ((*((__be32 *)sqc + 2U) >> 8) & 65280U)) | (*((__be32 *)sqc + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_29;
      
#line 574 
      tmp_29 = __fswab32(*((__be32 *)sqc + 2U));
      
#line 574 
      tmp_30 = tmp_29 & 4278190080U;
    }
    
#line 574 
    if (0 != 0) 
#line 574 
                tmp_32 = ((((*((__be32 *)sqc + 2U) << 24) | ((*((__be32 *)sqc + 2U) << 8) & 16711680U)) | ((*((__be32 *)sqc + 2U) >> 8) & 65280U)) | (*((__be32 *)sqc + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_31;
      
#line 574 
      tmp_31 = __fswab32(*((__be32 *)sqc + 2U));
      
#line 574 
      tmp_32 = tmp_31 & 4278190080U;
    }
    
#line 574 
    if (0 != 0) 
#line 574 
                tmp_34 = ((((*((__be32 *)sqc + 2U) << 24) | ((*((__be32 *)sqc + 2U) << 8) & 16711680U)) | ((*((__be32 *)sqc + 2U) >> 8) & 65280U)) | (*((__be32 *)sqc + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_33;
      
#line 574 
      tmp_33 = __fswab32(*((__be32 *)sqc + 2U));
      
#line 574 
      tmp_34 = tmp_33 & 4278190080U;
    }
    
#line 574 
    *((__be32 *)sqc + 2U) = ((((tmp_28 | (c->sq[sq->tc].cq.mcq.cqn & 16777215U)) << 24) | (((tmp_30 | (c->sq[sq->tc].cq.mcq.cqn & 16777215U)) << 8) & 16711680U)) | (((tmp_32 | (c->sq[sq->tc].cq.mcq.cqn & 16777215U)) >> 8) & 65280U)) | ((tmp_34 | (c->sq[sq->tc].cq.mcq.cqn & 16777215U)) >> 24);
  }
  else {
    __u32 tmp_37;
    unsigned int tmp_36;
    
#line 574 
    if (0 != 0) 
#line 574 
                tmp_36 = ((((*((__be32 *)sqc + 2U) << 24) | ((*((__be32 *)sqc + 2U) << 8) & 16711680U)) | ((*((__be32 *)sqc + 2U) >> 8) & 65280U)) | (*((__be32 *)sqc + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_35;
      
#line 574 
      tmp_35 = __fswab32(*((__be32 *)sqc + 2U));
      
#line 574 
      tmp_36 = tmp_35 & 4278190080U;
    }
    
#line 574 
    ;
    
#line 574 
    tmp_37 = __fswab32(tmp_36 | (c->sq[sq->tc].cq.mcq.cqn & 16777215U));
    
#line 574 
    *((__be32 *)sqc + 2U) = tmp_37;
  }
  {
    
#line 575 
    bool __cond_2 = (_Bool)0;
    
#line 575 
    if ((int)__cond_2 != 0) 
#line 575 
                            __compiletime_assert_575(); else ;
  }
  
#line 575 
  if (0 != 0) {
    unsigned int tmp_41;
    unsigned int tmp_43;
    unsigned int tmp_45;
    unsigned int tmp_47;
    
#line 575 
    if (0 != 0) 
#line 575 
                tmp_41 = ((((*((__be32 *)sqc) << 24) | ((*((__be32 *)sqc) << 8) & 16711680U)) | ((*((__be32 *)sqc) >> 8) & 65280U)) | (*((__be32 *)sqc) >> 24)) << 24;
    else {
      __u32 tmp_40;
      
#line 575 
      tmp_40 = __fswab32(*((__be32 *)sqc));
      
#line 575 
      tmp_41 = tmp_40 << 24;
    }
    
#line 575 
    if (0 != 0) 
#line 575 
                tmp_43 = (((((*((__be32 *)sqc) << 24) | ((*((__be32 *)sqc) << 8) & 16711680U)) | ((*((__be32 *)sqc) >> 8) & 65280U)) | (*((__be32 *)sqc) >> 24)) << 8) & 16711680U;
    else {
      __u32 tmp_42;
      
#line 575 
      tmp_42 = __fswab32(*((__be32 *)sqc));
      
#line 575 
      tmp_43 = (tmp_42 << 8) & 16711680U;
    }
    
#line 575 
    if (0 != 0) 
#line 575 
                tmp_45 = (((((*((__be32 *)sqc) << 24) | ((*((__be32 *)sqc) << 8) & 16711680U)) | ((*((__be32 *)sqc) >> 8) & 65280U)) | (*((__be32 *)sqc) >> 24)) >> 8) & 3840U;
    else {
      __u32 tmp_44;
      
#line 575 
      tmp_44 = __fswab32(*((__be32 *)sqc));
      
#line 575 
      tmp_45 = (tmp_44 >> 8) & 3840U;
    }
    
#line 575 
    if (0 != 0) 
#line 575 
                tmp_47 = ((((*((__be32 *)sqc) << 24) | ((*((__be32 *)sqc) << 8) & 16711680U)) | ((*((__be32 *)sqc) >> 8) & 65280U)) | (*((__be32 *)sqc) >> 24)) >> 24;
    else {
      __u32 tmp_46;
      
#line 575 
      tmp_46 = __fswab32(*((__be32 *)sqc));
      
#line 575 
      tmp_47 = tmp_46 >> 24;
    }
    
#line 575 
    *((__be32 *)sqc) = ((tmp_41 | tmp_43) | tmp_45) | tmp_47;
  }
  else {
    __u32 tmp_50;
    unsigned int tmp_49;
    
#line 575 
    if (0 != 0) 
#line 575 
                tmp_49 = ((((*((__be32 *)sqc) << 24) | ((*((__be32 *)sqc) << 8) & 16711680U)) | ((*((__be32 *)sqc) >> 8) & 65280U)) | (*((__be32 *)sqc) >> 24)) & 4279238655U;
    else {
      __u32 tmp_48;
      
#line 575 
      tmp_48 = __fswab32(*((__be32 *)sqc));
      
#line 575 
      tmp_49 = tmp_48 & 4279238655U;
    }
    
#line 575 
    tmp_50 = __fswab32(tmp_49);
    
#line 575 
    *((__be32 *)sqc) = tmp_50;
  }
  {
    
#line 576 
    bool __cond_3 = (_Bool)0;
    
#line 576 
    if ((int)__cond_3 != 0) 
#line 576 
                            __compiletime_assert_576(); else ;
  }
  
#line 576 
  if (0 != 0) {
    unsigned int tmp_54;
    unsigned int tmp_56;
    
#line 576 
    if (0 != 0) 
#line 576 
                tmp_54 = ((((*((__be32 *)sqc + 8U) << 24) | ((*((__be32 *)sqc + 8U) << 8) & 16711680U)) | ((*((__be32 *)sqc + 8U) >> 8) & 65280U)) | (*((__be32 *)sqc + 8U) >> 24)) << 24;
    else {
      __u32 tmp_53;
      
#line 576 
      tmp_53 = __fswab32(*((__be32 *)sqc + 8U));
      
#line 576 
      tmp_54 = tmp_53 << 24;
    }
    
#line 576 
    if (0 != 0) 
#line 576 
                tmp_56 = (((((*((__be32 *)sqc + 8U) << 24) | ((*((__be32 *)sqc + 8U) << 8) & 16711680U)) | ((*((__be32 *)sqc + 8U) >> 8) & 65280U)) | (*((__be32 *)sqc + 8U) >> 24)) << 8) & 16711680U;
    else {
      __u32 tmp_55;
      
#line 576 
      tmp_55 = __fswab32(*((__be32 *)sqc + 8U));
      
#line 576 
      tmp_56 = (tmp_55 << 8) & 16711680U;
    }
    
#line 576 
    *((__be32 *)sqc + 8U) = (tmp_54 | tmp_56) | 256U;
  }
  else {
    __u32 tmp_59;
    unsigned int tmp_58;
    
#line 576 
    if (0 != 0) 
#line 576 
                tmp_58 = (((((*((__be32 *)sqc + 8U) << 24) | ((*((__be32 *)sqc + 8U) << 8) & 16711680U)) | ((*((__be32 *)sqc + 8U) >> 8) & 65280U)) | (*((__be32 *)sqc + 8U) >> 24)) & 65535U) | 65536U;
    else {
      __u32 tmp_57;
      
#line 576 
      tmp_57 = __fswab32(*((__be32 *)sqc + 8U));
      
#line 576 
      tmp_58 = (tmp_57 & 65535U) | 65536U;
    }
    
#line 576 
    tmp_59 = __fswab32(tmp_58);
    
#line 576 
    *((__be32 *)sqc + 8U) = tmp_59;
  }
  {
    
#line 577 
    bool __cond_4 = (_Bool)0;
    
#line 577 
    if ((int)__cond_4 != 0) 
#line 577 
                            __compiletime_assert_577(); else ;
  }
  
#line 577 
  if (0 != 0) {
    unsigned int tmp_63;
    unsigned int tmp_65;
    unsigned int tmp_67;
    unsigned int tmp_69;
    
#line 577 
    if (0 != 0) 
#line 577 
                tmp_63 = ((((*((__be32 *)sqc) << 24) | ((*((__be32 *)sqc) << 8) & 16711680U)) | ((*((__be32 *)sqc) >> 8) & 65280U)) | (*((__be32 *)sqc) >> 24)) << 24;
    else {
      __u32 tmp_62;
      
#line 577 
      tmp_62 = __fswab32(*((__be32 *)sqc));
      
#line 577 
      tmp_63 = tmp_62 << 24;
    }
    
#line 577 
    if (0 != 0) 
#line 577 
                tmp_65 = (((((*((__be32 *)sqc) << 24) | ((*((__be32 *)sqc) << 8) & 16711680U)) | ((*((__be32 *)sqc) >> 8) & 65280U)) | (*((__be32 *)sqc) >> 24)) << 8) & 16711680U;
    else {
      __u32 tmp_64;
      
#line 577 
      tmp_64 = __fswab32(*((__be32 *)sqc));
      
#line 577 
      tmp_65 = (tmp_64 << 8) & 16711680U;
    }
    
#line 577 
    if (0 != 0) 
#line 577 
                tmp_67 = (((((*((__be32 *)sqc) << 24) | ((*((__be32 *)sqc) << 8) & 16711680U)) | ((*((__be32 *)sqc) >> 8) & 65280U)) | (*((__be32 *)sqc) >> 24)) >> 8) & 65280U;
    else {
      __u32 tmp_66;
      
#line 577 
      tmp_66 = __fswab32(*((__be32 *)sqc));
      
#line 577 
      tmp_67 = (tmp_66 >> 8) & 65280U;
    }
    
#line 577 
    if (0 != 0) 
#line 577 
                tmp_69 = (((((*((__be32 *)sqc) << 24) | ((*((__be32 *)sqc) << 8) & 16711680U)) | ((*((__be32 *)sqc) >> 8) & 65280U)) | (*((__be32 *)sqc) >> 24)) >> 24) | 16U;
    else {
      __u32 tmp_68;
      
#line 577 
      tmp_68 = __fswab32(*((__be32 *)sqc));
      
#line 577 
      tmp_69 = (tmp_68 >> 24) | 16U;
    }
    
#line 577 
    *((__be32 *)sqc) = ((tmp_63 | tmp_65) | tmp_67) | tmp_69;
  }
  else {
    __u32 tmp_72;
    unsigned int tmp_71;
    
#line 577 
    if (0 != 0) 
#line 577 
                tmp_71 = ((((*((__be32 *)sqc) << 24) | ((*((__be32 *)sqc) << 8) & 16711680U)) | ((*((__be32 *)sqc) >> 8) & 65280U)) | (*((__be32 *)sqc) >> 24)) | 268435456U;
    else {
      __u32 tmp_70;
      
#line 577 
      tmp_70 = __fswab32(*((__be32 *)sqc));
      
#line 577 
      tmp_71 = tmp_70 | 268435456U;
    }
    
#line 577 
    tmp_72 = __fswab32(tmp_71);
    
#line 577 
    *((__be32 *)sqc) = tmp_72;
  }
  {
    
#line 579 
    bool __cond_5 = (_Bool)0;
    
#line 579 
    if ((int)__cond_5 != 0) 
#line 579 
                            __compiletime_assert_579(); else ;
  }
  
#line 579 
  if (0 != 0) {
    unsigned int tmp_76;
    unsigned int tmp_78;
    unsigned int tmp_80;
    unsigned int tmp_82;
    
#line 579 
    if (0 != 0) 
#line 579 
                tmp_76 = ((((*((__be32 *)wq) << 24) | ((*((__be32 *)wq) << 8) & 16711680U)) | ((*((__be32 *)wq) >> 8) & 65280U)) | (*((__be32 *)wq) >> 24)) << 24;
    else {
      __u32 tmp_75;
      
#line 579 
      tmp_75 = __fswab32(*((__be32 *)wq));
      
#line 579 
      tmp_76 = tmp_75 << 24;
    }
    
#line 579 
    if (0 != 0) 
#line 579 
                tmp_78 = (((((*((__be32 *)wq) << 24) | ((*((__be32 *)wq) << 8) & 16711680U)) | ((*((__be32 *)wq) >> 8) & 65280U)) | (*((__be32 *)wq) >> 24)) << 8) & 16711680U;
    else {
      __u32 tmp_77;
      
#line 579 
      tmp_77 = __fswab32(*((__be32 *)wq));
      
#line 579 
      tmp_78 = (tmp_77 << 8) & 16711680U;
    }
    
#line 579 
    if (0 != 0) 
#line 579 
                tmp_80 = (((((*((__be32 *)wq) << 24) | ((*((__be32 *)wq) << 8) & 16711680U)) | ((*((__be32 *)wq) >> 8) & 65280U)) | (*((__be32 *)wq) >> 24)) >> 8) & 65280U;
    else {
      __u32 tmp_79;
      
#line 579 
      tmp_79 = __fswab32(*((__be32 *)wq));
      
#line 579 
      tmp_80 = (tmp_79 >> 8) & 65280U;
    }
    
#line 579 
    if (0 != 0) 
#line 579 
                tmp_82 = ((((((*((__be32 *)wq) << 24) | ((*((__be32 *)wq) << 8) & 16711680U)) | ((*((__be32 *)wq) >> 8) & 65280U)) | (*((__be32 *)wq) >> 24)) >> 24) & 15U) | 16U;
    else {
      __u32 tmp_81;
      
#line 579 
      tmp_81 = __fswab32(*((__be32 *)wq));
      
#line 579 
      tmp_82 = ((tmp_81 >> 24) & 15U) | 16U;
    }
    
#line 579 
    *((__be32 *)wq) = ((tmp_76 | tmp_78) | tmp_80) | tmp_82;
  }
  else {
    __u32 tmp_85;
    unsigned int tmp_84;
    
#line 579 
    if (0 != 0) 
#line 579 
                tmp_84 = (((((*((__be32 *)wq) << 24) | ((*((__be32 *)wq) << 8) & 16711680U)) | ((*((__be32 *)wq) >> 8) & 65280U)) | (*((__be32 *)wq) >> 24)) & 268435455U) | 268435456U;
    else {
      __u32 tmp_83;
      
#line 579 
      tmp_83 = __fswab32(*((__be32 *)wq));
      
#line 579 
      tmp_84 = (tmp_83 & 268435455U) | 268435456U;
    }
    
#line 579 
    tmp_85 = __fswab32(tmp_84);
    
#line 579 
    *((__be32 *)wq) = tmp_85;
  }
  {
    
#line 580 
    bool __cond_6 = (_Bool)0;
    
#line 580 
    if ((int)__cond_6 != 0) 
#line 580 
                            __compiletime_assert_580(); else ;
  }
  
#line 580 
  if (0 != 0) {
    unsigned int tmp_89;
    unsigned int tmp_91;
    unsigned int tmp_93;
    unsigned int tmp_95;
    
#line 580 
    if (0 != 0) 
#line 580 
                tmp_89 = ((((*((__be32 *)wq + 3U) << 24) | ((*((__be32 *)wq + 3U) << 8) & 16711680U)) | ((*((__be32 *)wq + 3U) >> 8) & 65280U)) | (*((__be32 *)wq + 3U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_88;
      
#line 580 
      tmp_88 = __fswab32(*((__be32 *)wq + 3U));
      
#line 580 
      tmp_89 = tmp_88 & 4278190080U;
    }
    
#line 580 
    if (0 != 0) 
#line 580 
                tmp_91 = ((((*((__be32 *)wq + 3U) << 24) | ((*((__be32 *)wq + 3U) << 8) & 16711680U)) | ((*((__be32 *)wq + 3U) >> 8) & 65280U)) | (*((__be32 *)wq + 3U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_90;
      
#line 580 
      tmp_90 = __fswab32(*((__be32 *)wq + 3U));
      
#line 580 
      tmp_91 = tmp_90 & 4278190080U;
    }
    
#line 580 
    if (0 != 0) 
#line 580 
                tmp_93 = ((((*((__be32 *)wq + 3U) << 24) | ((*((__be32 *)wq + 3U) << 8) & 16711680U)) | ((*((__be32 *)wq + 3U) >> 8) & 65280U)) | (*((__be32 *)wq + 3U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_92;
      
#line 580 
      tmp_92 = __fswab32(*((__be32 *)wq + 3U));
      
#line 580 
      tmp_93 = tmp_92 & 4278190080U;
    }
    
#line 580 
    if (0 != 0) 
#line 580 
                tmp_95 = ((((*((__be32 *)wq + 3U) << 24) | ((*((__be32 *)wq + 3U) << 8) & 16711680U)) | ((*((__be32 *)wq + 3U) >> 8) & 65280U)) | (*((__be32 *)wq + 3U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_94;
      
#line 580 
      tmp_94 = __fswab32(*((__be32 *)wq + 3U));
      
#line 580 
      tmp_95 = tmp_94 & 4278190080U;
    }
    
#line 580 
    *((__be32 *)wq + 3U) = ((((tmp_89 | (sq->uar.index & 16777215U)) << 24) | (((tmp_91 | (sq->uar.index & 16777215U)) << 8) & 16711680U)) | (((tmp_93 | (sq->uar.index & 16777215U)) >> 8) & 65280U)) | ((tmp_95 | (sq->uar.index & 16777215U)) >> 24);
  }
  else {
    __u32 tmp_98;
    unsigned int tmp_97;
    
#line 580 
    if (0 != 0) 
#line 580 
                tmp_97 = ((((*((__be32 *)wq + 3U) << 24) | ((*((__be32 *)wq + 3U) << 8) & 16711680U)) | ((*((__be32 *)wq + 3U) >> 8) & 65280U)) | (*((__be32 *)wq + 3U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_96;
      
#line 580 
      tmp_96 = __fswab32(*((__be32 *)wq + 3U));
      
#line 580 
      tmp_97 = tmp_96 & 4278190080U;
    }
    
#line 580 
    ;
    
#line 580 
    tmp_98 = __fswab32(tmp_97 | (sq->uar.index & 16777215U));
    
#line 580 
    *((__be32 *)wq + 3U) = tmp_98;
  }
  {
    
#line 581 
    bool __cond_7 = (_Bool)0;
    
#line 581 
    if ((int)__cond_7 != 0) 
#line 581 
                            __compiletime_assert_582(); else ;
  }
  
#line 581 
  if (0 != 0) {
    unsigned int tmp_102;
    unsigned int tmp_104;
    unsigned int tmp_106;
    unsigned int tmp_108;
    
#line 581 
    if (0 != 0) 
#line 581 
                tmp_102 = ((((*((__be32 *)wq + 8U) << 24) | ((*((__be32 *)wq + 8U) << 8) & 16711680U)) | ((*((__be32 *)wq + 8U) >> 8) & 65280U)) | (*((__be32 *)wq + 8U) >> 24)) & 4294959359U;
    else {
      __u32 tmp_101;
      
#line 581 
      tmp_101 = __fswab32(*((__be32 *)wq + 8U));
      
#line 581 
      tmp_102 = tmp_101 & 4294959359U;
    }
    
#line 581 
    if (0 != 0) 
#line 581 
                tmp_104 = ((((*((__be32 *)wq + 8U) << 24) | ((*((__be32 *)wq + 8U) << 8) & 16711680U)) | ((*((__be32 *)wq + 8U) >> 8) & 65280U)) | (*((__be32 *)wq + 8U) >> 24)) & 4294959359U;
    else {
      __u32 tmp_103;
      
#line 581 
      tmp_103 = __fswab32(*((__be32 *)wq + 8U));
      
#line 581 
      tmp_104 = tmp_103 & 4294959359U;
    }
    
#line 581 
    if (0 != 0) 
#line 581 
                tmp_106 = ((((*((__be32 *)wq + 8U) << 24) | ((*((__be32 *)wq + 8U) << 8) & 16711680U)) | ((*((__be32 *)wq + 8U) >> 8) & 65280U)) | (*((__be32 *)wq + 8U) >> 24)) & 4294959359U;
    else {
      __u32 tmp_105;
      
#line 581 
      tmp_105 = __fswab32(*((__be32 *)wq + 8U));
      
#line 581 
      tmp_106 = tmp_105 & 4294959359U;
    }
    
#line 581 
    if (0 != 0) 
#line 581 
                tmp_108 = ((((*((__be32 *)wq + 8U) << 24) | ((*((__be32 *)wq + 8U) << 8) & 16711680U)) | ((*((__be32 *)wq + 8U) >> 8) & 65280U)) | (*((__be32 *)wq + 8U) >> 24)) & 4294959359U;
    else {
      __u32 tmp_107;
      
#line 581 
      tmp_107 = __fswab32(*((__be32 *)wq + 8U));
      
#line 581 
      tmp_108 = tmp_107 & 4294959359U;
    }
    
#line 581 
    *((__be32 *)wq + 8U) = ((((tmp_102 | (((unsigned int)((int)sq->wq_ctrl.buf.page_shift + -12) << 8UL) & 7936U)) << 24) | (((tmp_104 | (((unsigned int)((int)sq->wq_ctrl.buf.page_shift + -12) << 8UL) & 7936U)) << 8) & 16711680U)) | (((tmp_106 | (((unsigned int)((int)sq->wq_ctrl.buf.page_shift + -12) << 8UL) & 7936U)) >> 8) & 65280U)) | ((tmp_108 | (((unsigned int)((int)sq->wq_ctrl.buf.page_shift + -12) << 8UL) & 7936U)) >> 24);
  }
  else {
    __u32 tmp_111;
    unsigned int tmp_110;
    
#line 581 
    if (0 != 0) 
#line 581 
                tmp_110 = ((((*((__be32 *)wq + 8U) << 24) | ((*((__be32 *)wq + 8U) << 8) & 16711680U)) | ((*((__be32 *)wq + 8U) >> 8) & 65280U)) | (*((__be32 *)wq + 8U) >> 24)) & 4294959359U;
    else {
      __u32 tmp_109;
      
#line 581 
      tmp_109 = __fswab32(*((__be32 *)wq + 8U));
      
#line 581 
      tmp_110 = tmp_109 & 4294959359U;
    }
    
#line 581 
    ;
    
#line 581 
    tmp_111 = __fswab32(tmp_110 | (((unsigned int)((int)sq->wq_ctrl.buf.page_shift + -12) << 8UL) & 7936U));
    
#line 581 
    *((__be32 *)wq + 8U) = tmp_111;
  }
  {
    
#line 583 
    bool __cond_8 = (_Bool)0;
    
#line 583 
    if ((int)__cond_8 != 0) 
#line 583 
                            __compiletime_assert_583(); else ;
  }
  {
    
#line 583 
    bool __cond_9 = (_Bool)0;
    
#line 583 
    if ((int)__cond_9 != 0) 
#line 583 
                            __compiletime_assert_583(); else ;
  }
  
#line 583 
  if (0 != 0) 
#line 583 
              *((__be64 *)wq + 2U) = (((((((sq->wq_ctrl.db.dma << 56) | ((sq->wq_ctrl.db.dma << 40) & 71776119061217280ULL)) | ((sq->wq_ctrl.db.dma << 24) & 280375465082880ULL)) | ((sq->wq_ctrl.db.dma << 8) & 1095216660480ULL)) | ((sq->wq_ctrl.db.dma >> 8) & 4278190080ULL)) | ((sq->wq_ctrl.db.dma >> 24) & 16711680ULL)) | ((sq->wq_ctrl.db.dma >> 40) & 65280ULL)) | (sq->wq_ctrl.db.dma >> 56); else 
                                                                    
#line 583 
                                                                    *((__be64 *)wq + 2U) = __fswab64(sq->wq_ctrl.db.dma);
  
#line 585 
  mlx5_fill_page_array(& sq->wq_ctrl.buf,(__be64 *)wq + 192U);
  
#line 588 
  err = mlx5_core_create_sq(mdev,(u32 *)in,inlen,& sq->sqn);
  
#line 590 
  kvfree((void const *)in);
  
#line 592 
  __retres = err;
  return_label: 
#line 592 
                return __retres;
}


#line 613 
void __compiletime_assert_613(void);


#line 614 
void __compiletime_assert_614(void);


#line 595  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_main.c"
static int mlx5e_modify_sq(struct mlx5e_sq *sq, int curr_state, int next_state)
{
  int __retres;
  void *in;
  void *sqc;
  int inlen;
  int err;
  
#line 597 
  struct mlx5e_channel *c = sq->channel;
  
#line 598 
  struct mlx5e_priv *priv = c->priv;
  
#line 599 
  struct mlx5_core_dev *mdev = priv->mdev;
  
#line 606 
  inlen = 272;
  
#line 607 
  in = mlx5_vzalloc_2((unsigned long)inlen);
  
#line 608 
  if (in == (void *)0) {
    
#line 609 
    __retres = -12;
    
#line 609 
    goto return_label;
  }
  else ;
  
#line 611 
  sqc = in + 32U;
  {
    
#line 613 
    bool __cond = (_Bool)0;
    
#line 613 
    if ((int)__cond != 0) 
#line 613 
                          __compiletime_assert_613(); else ;
  }
  
#line 613 
  if (0 != 0) {
    unsigned int tmp_2;
    unsigned int tmp_4;
    unsigned int tmp_6;
    unsigned int tmp_8;
    
#line 613 
    if (0 != 0) 
#line 613 
                tmp_2 = ((((*((__be32 *)in + 2U) << 24) | ((*((__be32 *)in + 2U) << 8) & 16711680U)) | ((*((__be32 *)in + 2U) >> 8) & 65280U)) | (*((__be32 *)in + 2U) >> 24)) & 268435455U;
    else {
      __u32 tmp_1;
      
#line 613 
      tmp_1 = __fswab32(*((__be32 *)in + 2U));
      
#line 613 
      tmp_2 = tmp_1 & 268435455U;
    }
    
#line 613 
    if (0 != 0) 
#line 613 
                tmp_4 = ((((*((__be32 *)in + 2U) << 24) | ((*((__be32 *)in + 2U) << 8) & 16711680U)) | ((*((__be32 *)in + 2U) >> 8) & 65280U)) | (*((__be32 *)in + 2U) >> 24)) & 268435455U;
    else {
      __u32 tmp_3;
      
#line 613 
      tmp_3 = __fswab32(*((__be32 *)in + 2U));
      
#line 613 
      tmp_4 = tmp_3 & 268435455U;
    }
    
#line 613 
    if (0 != 0) 
#line 613 
                tmp_6 = ((((*((__be32 *)in + 2U) << 24) | ((*((__be32 *)in + 2U) << 8) & 16711680U)) | ((*((__be32 *)in + 2U) >> 8) & 65280U)) | (*((__be32 *)in + 2U) >> 24)) & 268435455U;
    else {
      __u32 tmp_5;
      
#line 613 
      tmp_5 = __fswab32(*((__be32 *)in + 2U));
      
#line 613 
      tmp_6 = tmp_5 & 268435455U;
    }
    
#line 613 
    if (0 != 0) 
#line 613 
                tmp_8 = ((((*((__be32 *)in + 2U) << 24) | ((*((__be32 *)in + 2U) << 8) & 16711680U)) | ((*((__be32 *)in + 2U) >> 8) & 65280U)) | (*((__be32 *)in + 2U) >> 24)) & 268435455U;
    else {
      __u32 tmp_7;
      
#line 613 
      tmp_7 = __fswab32(*((__be32 *)in + 2U));
      
#line 613 
      tmp_8 = tmp_7 & 268435455U;
    }
    
#line 613 
    *((__be32 *)in + 2U) = ((((tmp_2 | ((unsigned int)curr_state << 28UL)) << 24) | (((tmp_4 | ((unsigned int)curr_state << 28UL)) << 8) & 16711680U)) | (((tmp_6 | ((unsigned int)curr_state << 28UL)) >> 8) & 65280U)) | ((tmp_8 | ((unsigned int)curr_state << 28UL)) >> 24);
  }
  else {
    __u32 tmp_11;
    unsigned int tmp_10;
    
#line 613 
    if (0 != 0) 
#line 613 
                tmp_10 = ((((*((__be32 *)in + 2U) << 24) | ((*((__be32 *)in + 2U) << 8) & 16711680U)) | ((*((__be32 *)in + 2U) >> 8) & 65280U)) | (*((__be32 *)in + 2U) >> 24)) & 268435455U;
    else {
      __u32 tmp_9;
      
#line 613 
      tmp_9 = __fswab32(*((__be32 *)in + 2U));
      
#line 613 
      tmp_10 = tmp_9 & 268435455U;
    }
    
#line 613 
    ;
    
#line 613 
    tmp_11 = __fswab32(tmp_10 | ((unsigned int)curr_state << 28UL));
    
#line 613 
    *((__be32 *)in + 2U) = tmp_11;
  }
  {
    
#line 614 
    bool __cond_0 = (_Bool)0;
    
#line 614 
    if ((int)__cond_0 != 0) 
#line 614 
                            __compiletime_assert_614(); else ;
  }
  
#line 614 
  if (0 != 0) {
    unsigned int tmp_15;
    unsigned int tmp_17;
    unsigned int tmp_19;
    unsigned int tmp_21;
    
#line 614 
    if (0 != 0) 
#line 614 
                tmp_15 = ((((*((__be32 *)sqc) << 24) | ((*((__be32 *)sqc) << 8) & 16711680U)) | ((*((__be32 *)sqc) >> 8) & 65280U)) | (*((__be32 *)sqc) >> 24)) & 4279238655U;
    else {
      __u32 tmp_14;
      
#line 614 
      tmp_14 = __fswab32(*((__be32 *)sqc));
      
#line 614 
      tmp_15 = tmp_14 & 4279238655U;
    }
    
#line 614 
    if (0 != 0) 
#line 614 
                tmp_17 = ((((*((__be32 *)sqc) << 24) | ((*((__be32 *)sqc) << 8) & 16711680U)) | ((*((__be32 *)sqc) >> 8) & 65280U)) | (*((__be32 *)sqc) >> 24)) & 4279238655U;
    else {
      __u32 tmp_16;
      
#line 614 
      tmp_16 = __fswab32(*((__be32 *)sqc));
      
#line 614 
      tmp_17 = tmp_16 & 4279238655U;
    }
    
#line 614 
    if (0 != 0) 
#line 614 
                tmp_19 = ((((*((__be32 *)sqc) << 24) | ((*((__be32 *)sqc) << 8) & 16711680U)) | ((*((__be32 *)sqc) >> 8) & 65280U)) | (*((__be32 *)sqc) >> 24)) & 4279238655U;
    else {
      __u32 tmp_18;
      
#line 614 
      tmp_18 = __fswab32(*((__be32 *)sqc));
      
#line 614 
      tmp_19 = tmp_18 & 4279238655U;
    }
    
#line 614 
    if (0 != 0) 
#line 614 
                tmp_21 = ((((*((__be32 *)sqc) << 24) | ((*((__be32 *)sqc) << 8) & 16711680U)) | ((*((__be32 *)sqc) >> 8) & 65280U)) | (*((__be32 *)sqc) >> 24)) & 4279238655U;
    else {
      __u32 tmp_20;
      
#line 614 
      tmp_20 = __fswab32(*((__be32 *)sqc));
      
#line 614 
      tmp_21 = tmp_20 & 4279238655U;
    }
    
#line 614 
    *((__be32 *)sqc) = ((((tmp_15 | (((unsigned int)next_state << 20UL) & 15728640U)) << 24) | (((tmp_17 | (((unsigned int)next_state << 20UL) & 15728640U)) << 8) & 16711680U)) | (((tmp_19 | (((unsigned int)next_state << 20UL) & 15728640U)) >> 8) & 65280U)) | ((tmp_21 | (((unsigned int)next_state << 20UL) & 15728640U)) >> 24);
  }
  else {
    __u32 tmp_24;
    unsigned int tmp_23;
    
#line 614 
    if (0 != 0) 
#line 614 
                tmp_23 = ((((*((__be32 *)sqc) << 24) | ((*((__be32 *)sqc) << 8) & 16711680U)) | ((*((__be32 *)sqc) >> 8) & 65280U)) | (*((__be32 *)sqc) >> 24)) & 4279238655U;
    else {
      __u32 tmp_22;
      
#line 614 
      tmp_22 = __fswab32(*((__be32 *)sqc));
      
#line 614 
      tmp_23 = tmp_22 & 4279238655U;
    }
    
#line 614 
    ;
    
#line 614 
    tmp_24 = __fswab32(tmp_23 | (((unsigned int)next_state << 20UL) & 15728640U));
    
#line 614 
    *((__be32 *)sqc) = tmp_24;
  }
  
#line 616 
  err = mlx5_core_modify_sq(mdev,sq->sqn,(u32 *)in,inlen);
  
#line 618 
  kvfree((void const *)in);
  
#line 620 
  __retres = err;
  return_label: 
#line 620 
                return __retres;
}


#line 623  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_main.c"
static void mlx5e_disable_sq(struct mlx5e_sq *sq)
{
  
#line 625 
  struct mlx5e_channel *c = sq->channel;
  
#line 626 
  struct mlx5e_priv *priv = c->priv;
  
#line 627 
  struct mlx5_core_dev *mdev = priv->mdev;
  
#line 629 
  mlx5_core_destroy_sq(mdev,sq->sqn);
  
#line 630 
  return;
}


#line 632  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_main.c"
static int mlx5e_open_sq(struct mlx5e_channel *c, int tc, struct mlx5e_sq_param *param, struct mlx5e_sq *sq)
{
  int __retres;
  int err;
  
#line 639 
  err = mlx5e_create_sq(c,tc,param,sq);
  
#line 640 
  if (err != 0) {
    
#line 641 
    __retres = err;
    
#line 641 
    goto return_label;
  }
  else ;
  
#line 643 
  err = mlx5e_enable_sq(sq,param);
  
#line 644 
  if (err != 0) 
#line 645 
                goto err_destroy_sq; else ;
  
#line 647 
  err = mlx5e_modify_sq(sq,0,1);
  
#line 648 
  if (err != 0) 
#line 649 
                goto err_disable_sq; else ;
  
#line 651 
  set_bit(0L,(unsigned long volatile *)(& sq->state));
  
#line 652 
  netdev_tx_reset_queue(sq->txq);
  
#line 653 
  netif_tx_start_queue(sq->txq);
  
#line 655 
  __retres = 0;
  
#line 655 
  goto return_label;
  err_disable_sq: 
#line 657 
  ;
  
#line 658 
  mlx5e_disable_sq(sq);
  err_destroy_sq: 
#line 659 
  ;
  
#line 660 
  mlx5e_destroy_sq(sq);
  
#line 662 
  __retres = err;
  return_label: 
#line 662 
                return __retres;
}


#line 665  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_main.c"
__inline static void netif_tx_disable_queue(struct netdev_queue *txq)
{
  
#line 667 
  __netif_tx_lock_bh(txq);
  
#line 668 
  netif_tx_start_queue(txq);
  
#line 669 
  __netif_tx_unlock_bh(txq);
  
#line 670 
  return;
}


#line 672  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_main.c"
static void mlx5e_close_sq(struct mlx5e_sq *sq)
{
  bool tmp;
  
#line 674 
  set_bit(0L,(unsigned long volatile *)(& sq->state));
  
#line 675 
  napi_synchronize((struct napi_struct const *)(& (sq->channel)->napi));
  
#line 676 
  netif_tx_disable_queue(sq->txq);
  
#line 679 
  tmp = mlx5e_sq_has_room_for(sq,(unsigned short)1);
  
#line 679 
  if ((int)tmp != 0) 
#line 680 
                     mlx5e_send_nop(sq,(_Bool)1); else ;
  
#line 682 
  mlx5e_modify_sq(sq,1,3);
  
#line 683 
  goto ldv_55242;
  ldv_55241: 
#line 684 
  ;
  
#line 684 
  msleep(20U);
  ldv_55242: 
#line 685 
  ;
  
#line 683 
  if ((int)sq->cc != (int)sq->pc) 
#line 685 
                                  goto ldv_55241; else 
#line 688 
                                                       goto ldv_55243;
  ldv_55243: 
#line 689 
  ;
  
#line 687 
  napi_synchronize((struct napi_struct const *)(& (sq->channel)->napi));
  
#line 689 
  mlx5e_disable_sq(sq);
  
#line 690 
  mlx5e_destroy_sq(sq);
  
#line 691 
  return;
}


#line 693  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_main.c"
static int mlx5e_create_cq(struct mlx5e_channel *c, struct mlx5e_cq_param *param, struct mlx5e_cq *cq)
{
  int __retres;
  int eqn_not_used;
  int irqn;
  int err;
  u32 i;
  u32 tmp_0;
  
#line 697 
  struct mlx5e_priv *priv = c->priv;
  
#line 698 
  struct mlx5_core_dev *mdev = priv->mdev;
  
#line 699 
  struct mlx5_core_cq *mcq = & cq->mcq;
  
#line 705 
  param->wq.numa = __cpu_to_node(c->cpu);
  
#line 706 
  param->eq_ix = (unsigned short)c->ix;
  
#line 708 
  err = mlx5_cqwq_create(mdev,& param->wq,(void *)(& param->cqc),& cq->wq,& cq->wq_ctrl);
  
#line 710 
  if (err != 0) {
    
#line 711 
    __retres = err;
    
#line 711 
    goto return_label;
  }
  else ;
  
#line 713 
  mlx5_vector2eqn(mdev,(int)param->eq_ix,& eqn_not_used,& irqn);
  
#line 715 
  cq->napi = & c->napi;
  
#line 717 
  mcq->cqe_sz = 64;
  
#line 718 
  mcq->set_ci_db = cq->wq_ctrl.db.db;
  
#line 719 
  mcq->arm_db = cq->wq_ctrl.db.db + 1U;
  
#line 720 
  *(mcq->set_ci_db) = 0U;
  
#line 721 
  *(mcq->arm_db) = 0U;
  
#line 722 
  mcq->vector = (unsigned int)param->eq_ix;
  
#line 723 
  mcq->comp = & mlx5e_completion_event;
  
#line 724 
  mcq->event = & mlx5e_cq_error_event;
  
#line 725 
  mcq->irqn = irqn;
  
#line 726 
  mcq->uar = & priv->cq_uar;
  
#line 728 
  i = 0U;
  
#line 728 
  goto ldv_55258;
  ldv_55257: 
#line 729 
  ;
  {
    
#line 729 
    struct mlx5_cqe64 *cqe = mlx5_cqwq_get_wqe(& cq->wq,i);
    
#line 731 
    cqe->op_own = (unsigned char)241U;
  }
  
#line 728 
  i += 1U;
  ldv_55258: 
#line 729 
  ;
  
#line 728 
  tmp_0 = mlx5_cqwq_get_size(& cq->wq);
  
#line 728 
  ;
  
#line 728 
  if (tmp_0 > i) 
#line 730 
                 goto ldv_55257; else 
#line 733 
                                      goto ldv_55259;
  ldv_55259: 
#line 734 
  ;
  
#line 734 
  cq->channel = c;
  
#line 736 
  __retres = 0;
  return_label: 
#line 736 
                return __retres;
}


#line 739  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_main.c"
static void mlx5e_destroy_cq(struct mlx5e_cq *cq)
{
  
#line 741 
  mlx5_wq_destroy(& cq->wq_ctrl);
  
#line 742 
  return;
}


#line 773 
void __compiletime_assert_773(void);


#line 775 
void __compiletime_assert_776(void);


#line 777 
void __compiletime_assert_777(void);


#line 744  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_main.c"
static int mlx5e_enable_cq(struct mlx5e_cq *cq, struct mlx5e_cq_param *param)
{
  int __retres;
  void *in;
  void *cqc;
  int inlen;
  int irqn_not_used;
  int eqn;
  int err;
  
#line 746 
  struct mlx5e_channel *c = cq->channel;
  
#line 747 
  struct mlx5e_priv *priv = c->priv;
  
#line 748 
  struct mlx5_core_dev *mdev = priv->mdev;
  
#line 749 
  struct mlx5_core_cq *mcq = & cq->mcq;
  
#line 758 
  inlen = (int)(((unsigned long)cq->wq_ctrl.buf.npages + 34UL) * (unsigned long)8U);
  
#line 760 
  in = mlx5_vzalloc_2((unsigned long)inlen);
  
#line 761 
  if (in == (void *)0) {
    
#line 762 
    __retres = -12;
    
#line 762 
    goto return_label;
  }
  else ;
  
#line 764 
  cqc = in + 16U;
  
#line 766 
  memcpy(cqc,(void const *)(& param->cqc),64UL);
  
#line 768 
  mlx5_fill_page_array(& cq->wq_ctrl.buf,(__be64 *)in + 272U);
  
#line 771 
  mlx5_vector2eqn(mdev,(int)param->eq_ix,& eqn,& irqn_not_used);
  {
    
#line 773 
    bool __cond = (_Bool)0;
    
#line 773 
    if ((int)__cond != 0) 
#line 773 
                          __compiletime_assert_773(); else ;
  }
  
#line 773 
  if (0 != 0) {
    unsigned int tmp_2;
    unsigned int tmp_4;
    unsigned int tmp_6;
    unsigned int tmp_8;
    
#line 773 
    if (0 != 0) 
#line 773 
                tmp_2 = ((((*((__be32 *)cqc + 5U) << 24) | ((*((__be32 *)cqc + 5U) << 8) & 16711680U)) | ((*((__be32 *)cqc + 5U) >> 8) & 65280U)) | (*((__be32 *)cqc + 5U) >> 24)) & 4294967040U;
    else {
      __u32 tmp_1;
      
#line 773 
      tmp_1 = __fswab32(*((__be32 *)cqc + 5U));
      
#line 773 
      tmp_2 = tmp_1 & 4294967040U;
    }
    
#line 773 
    if (0 != 0) 
#line 773 
                tmp_4 = ((((*((__be32 *)cqc + 5U) << 24) | ((*((__be32 *)cqc + 5U) << 8) & 16711680U)) | ((*((__be32 *)cqc + 5U) >> 8) & 65280U)) | (*((__be32 *)cqc + 5U) >> 24)) & 4294967040U;
    else {
      __u32 tmp_3;
      
#line 773 
      tmp_3 = __fswab32(*((__be32 *)cqc + 5U));
      
#line 773 
      tmp_4 = tmp_3 & 4294967040U;
    }
    
#line 773 
    if (0 != 0) 
#line 773 
                tmp_6 = ((((*((__be32 *)cqc + 5U) << 24) | ((*((__be32 *)cqc + 5U) << 8) & 16711680U)) | ((*((__be32 *)cqc + 5U) >> 8) & 65280U)) | (*((__be32 *)cqc + 5U) >> 24)) & 4294967040U;
    else {
      __u32 tmp_5;
      
#line 773 
      tmp_5 = __fswab32(*((__be32 *)cqc + 5U));
      
#line 773 
      tmp_6 = tmp_5 & 4294967040U;
    }
    
#line 773 
    if (0 != 0) 
#line 773 
                tmp_8 = ((((*((__be32 *)cqc + 5U) << 24) | ((*((__be32 *)cqc + 5U) << 8) & 16711680U)) | ((*((__be32 *)cqc + 5U) >> 8) & 65280U)) | (*((__be32 *)cqc + 5U) >> 24)) & 4294967040U;
    else {
      __u32 tmp_7;
      
#line 773 
      tmp_7 = __fswab32(*((__be32 *)cqc + 5U));
      
#line 773 
      tmp_8 = tmp_7 & 4294967040U;
    }
    
#line 773 
    *((__be32 *)cqc + 5U) = ((((tmp_2 | ((unsigned int)eqn & 255U)) << 24) | (((tmp_4 | ((unsigned int)eqn & 255U)) << 8) & 16711680U)) | (((tmp_6 | ((unsigned int)eqn & 255U)) >> 8) & 65280U)) | ((tmp_8 | ((unsigned int)eqn & 255U)) >> 24);
  }
  else {
    __u32 tmp_11;
    unsigned int tmp_10;
    
#line 773 
    if (0 != 0) 
#line 773 
                tmp_10 = ((((*((__be32 *)cqc + 5U) << 24) | ((*((__be32 *)cqc + 5U) << 8) & 16711680U)) | ((*((__be32 *)cqc + 5U) >> 8) & 65280U)) | (*((__be32 *)cqc + 5U) >> 24)) & 4294967040U;
    else {
      __u32 tmp_9;
      
#line 773 
      tmp_9 = __fswab32(*((__be32 *)cqc + 5U));
      
#line 773 
      tmp_10 = tmp_9 & 4294967040U;
    }
    
#line 773 
    ;
    
#line 773 
    tmp_11 = __fswab32(tmp_10 | ((unsigned int)eqn & 255U));
    
#line 773 
    *((__be32 *)cqc + 5U) = tmp_11;
  }
  {
    
#line 774 
    bool __cond_0 = (_Bool)0;
    
#line 774 
    if ((int)__cond_0 != 0) 
#line 774 
                            __compiletime_assert_774(); else ;
  }
  
#line 774 
  if (0 != 0) {
    unsigned int tmp_15;
    unsigned int tmp_17;
    unsigned int tmp_19;
    unsigned int tmp_21;
    
#line 774 
    if (0 != 0) 
#line 774 
                tmp_15 = ((((*((__be32 *)cqc + 3U) << 24) | ((*((__be32 *)cqc + 3U) << 8) & 16711680U)) | ((*((__be32 *)cqc + 3U) >> 8) & 65280U)) | (*((__be32 *)cqc + 3U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_14;
      
#line 774 
      tmp_14 = __fswab32(*((__be32 *)cqc + 3U));
      
#line 774 
      tmp_15 = tmp_14 & 4278190080U;
    }
    
#line 774 
    if (0 != 0) 
#line 774 
                tmp_17 = ((((*((__be32 *)cqc + 3U) << 24) | ((*((__be32 *)cqc + 3U) << 8) & 16711680U)) | ((*((__be32 *)cqc + 3U) >> 8) & 65280U)) | (*((__be32 *)cqc + 3U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_16;
      
#line 774 
      tmp_16 = __fswab32(*((__be32 *)cqc + 3U));
      
#line 774 
      tmp_17 = tmp_16 & 4278190080U;
    }
    
#line 774 
    if (0 != 0) 
#line 774 
                tmp_19 = ((((*((__be32 *)cqc + 3U) << 24) | ((*((__be32 *)cqc + 3U) << 8) & 16711680U)) | ((*((__be32 *)cqc + 3U) >> 8) & 65280U)) | (*((__be32 *)cqc + 3U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_18;
      
#line 774 
      tmp_18 = __fswab32(*((__be32 *)cqc + 3U));
      
#line 774 
      tmp_19 = tmp_18 & 4278190080U;
    }
    
#line 774 
    if (0 != 0) 
#line 774 
                tmp_21 = ((((*((__be32 *)cqc + 3U) << 24) | ((*((__be32 *)cqc + 3U) << 8) & 16711680U)) | ((*((__be32 *)cqc + 3U) >> 8) & 65280U)) | (*((__be32 *)cqc + 3U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_20;
      
#line 774 
      tmp_20 = __fswab32(*((__be32 *)cqc + 3U));
      
#line 774 
      tmp_21 = tmp_20 & 4278190080U;
    }
    
#line 774 
    *((__be32 *)cqc + 3U) = ((((tmp_15 | ((mcq->uar)->index & 16777215U)) << 24) | (((tmp_17 | ((mcq->uar)->index & 16777215U)) << 8) & 16711680U)) | (((tmp_19 | ((mcq->uar)->index & 16777215U)) >> 8) & 65280U)) | ((tmp_21 | ((mcq->uar)->index & 16777215U)) >> 24);
  }
  else {
    __u32 tmp_24;
    unsigned int tmp_23;
    
#line 774 
    if (0 != 0) 
#line 774 
                tmp_23 = ((((*((__be32 *)cqc + 3U) << 24) | ((*((__be32 *)cqc + 3U) << 8) & 16711680U)) | ((*((__be32 *)cqc + 3U) >> 8) & 65280U)) | (*((__be32 *)cqc + 3U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_22;
      
#line 774 
      tmp_22 = __fswab32(*((__be32 *)cqc + 3U));
      
#line 774 
      tmp_23 = tmp_22 & 4278190080U;
    }
    
#line 774 
    ;
    
#line 774 
    tmp_24 = __fswab32(tmp_23 | ((mcq->uar)->index & 16777215U));
    
#line 774 
    *((__be32 *)cqc + 3U) = tmp_24;
  }
  {
    
#line 775 
    bool __cond_1 = (_Bool)0;
    
#line 775 
    if ((int)__cond_1 != 0) 
#line 775 
                            __compiletime_assert_776(); else ;
  }
  
#line 775 
  if (0 != 0) {
    unsigned int tmp_28;
    unsigned int tmp_30;
    unsigned int tmp_32;
    unsigned int tmp_34;
    
#line 775 
    if (0 != 0) 
#line 775 
                tmp_28 = ((((*((__be32 *)cqc + 6U) << 24) | ((*((__be32 *)cqc + 6U) << 8) & 16711680U)) | ((*((__be32 *)cqc + 6U) >> 8) & 65280U)) | (*((__be32 *)cqc + 6U) >> 24)) & 3774873599U;
    else {
      __u32 tmp_27;
      
#line 775 
      tmp_27 = __fswab32(*((__be32 *)cqc + 6U));
      
#line 775 
      tmp_28 = tmp_27 & 3774873599U;
    }
    
#line 775 
    if (0 != 0) 
#line 775 
                tmp_30 = ((((*((__be32 *)cqc + 6U) << 24) | ((*((__be32 *)cqc + 6U) << 8) & 16711680U)) | ((*((__be32 *)cqc + 6U) >> 8) & 65280U)) | (*((__be32 *)cqc + 6U) >> 24)) & 3774873599U;
    else {
      __u32 tmp_29;
      
#line 775 
      tmp_29 = __fswab32(*((__be32 *)cqc + 6U));
      
#line 775 
      tmp_30 = tmp_29 & 3774873599U;
    }
    
#line 775 
    if (0 != 0) 
#line 775 
                tmp_32 = ((((*((__be32 *)cqc + 6U) << 24) | ((*((__be32 *)cqc + 6U) << 8) & 16711680U)) | ((*((__be32 *)cqc + 6U) >> 8) & 65280U)) | (*((__be32 *)cqc + 6U) >> 24)) & 3774873599U;
    else {
      __u32 tmp_31;
      
#line 775 
      tmp_31 = __fswab32(*((__be32 *)cqc + 6U));
      
#line 775 
      tmp_32 = tmp_31 & 3774873599U;
    }
    
#line 775 
    if (0 != 0) 
#line 775 
                tmp_34 = ((((*((__be32 *)cqc + 6U) << 24) | ((*((__be32 *)cqc + 6U) << 8) & 16711680U)) | ((*((__be32 *)cqc + 6U) >> 8) & 65280U)) | (*((__be32 *)cqc + 6U) >> 24)) & 3774873599U;
    else {
      __u32 tmp_33;
      
#line 775 
      tmp_33 = __fswab32(*((__be32 *)cqc + 6U));
      
#line 775 
      tmp_34 = tmp_33 & 3774873599U;
    }
    
#line 775 
    *((__be32 *)cqc + 6U) = ((((tmp_28 | (((unsigned int)((int)cq->wq_ctrl.buf.page_shift + -12) << 24UL) & 520093696U)) << 24) | (((tmp_30 | (((unsigned int)((int)cq->wq_ctrl.buf.page_shift + -12) << 24UL) & 520093696U)) << 8) & 16711680U)) | (((tmp_32 | (((unsigned int)((int)cq->wq_ctrl.buf.page_shift + -12) << 24UL) & 520093696U)) >> 8) & 65280U)) | ((tmp_34 | (((unsigned int)((int)cq->wq_ctrl.buf.page_shift + -12) << 24UL) & 520093696U)) >> 24);
  }
  else {
    __u32 tmp_37;
    unsigned int tmp_36;
    
#line 775 
    if (0 != 0) 
#line 775 
                tmp_36 = ((((*((__be32 *)cqc + 6U) << 24) | ((*((__be32 *)cqc + 6U) << 8) & 16711680U)) | ((*((__be32 *)cqc + 6U) >> 8) & 65280U)) | (*((__be32 *)cqc + 6U) >> 24)) & 3774873599U;
    else {
      __u32 tmp_35;
      
#line 775 
      tmp_35 = __fswab32(*((__be32 *)cqc + 6U));
      
#line 775 
      tmp_36 = tmp_35 & 3774873599U;
    }
    
#line 775 
    ;
    
#line 775 
    tmp_37 = __fswab32(tmp_36 | (((unsigned int)((int)cq->wq_ctrl.buf.page_shift + -12) << 24UL) & 520093696U));
    
#line 775 
    *((__be32 *)cqc + 6U) = tmp_37;
  }
  {
    
#line 777 
    bool __cond_2 = (_Bool)0;
    
#line 777 
    if ((int)__cond_2 != 0) 
#line 777 
                            __compiletime_assert_777(); else ;
  }
  {
    
#line 777 
    bool __cond_3 = (_Bool)0;
    
#line 777 
    if ((int)__cond_3 != 0) 
#line 777 
                            __compiletime_assert_777(); else ;
  }
  
#line 777 
  if (0 != 0) 
#line 777 
              *((__be64 *)cqc + 7U) = (((((((cq->wq_ctrl.db.dma << 56) | ((cq->wq_ctrl.db.dma << 40) & 71776119061217280ULL)) | ((cq->wq_ctrl.db.dma << 24) & 280375465082880ULL)) | ((cq->wq_ctrl.db.dma << 8) & 1095216660480ULL)) | ((cq->wq_ctrl.db.dma >> 8) & 4278190080ULL)) | ((cq->wq_ctrl.db.dma >> 24) & 16711680ULL)) | ((cq->wq_ctrl.db.dma >> 40) & 65280ULL)) | (cq->wq_ctrl.db.dma >> 56); else 
                                                                    
#line 777 
                                                                    *((__be64 *)cqc + 7U) = __fswab64(cq->wq_ctrl.db.dma);
  
#line 779 
  err = mlx5_core_create_cq(mdev,mcq,(struct mlx5_create_cq_mbox_in *)in,inlen);
  
#line 781 
  kvfree((void const *)in);
  
#line 783 
  if (err != 0) {
    
#line 784 
    __retres = err;
    
#line 784 
    goto return_label;
  }
  else ;
  
#line 786 
  mlx5e_cq_arm(cq);
  
#line 788 
  __retres = 0;
  return_label: 
#line 788 
                return __retres;
}


#line 791  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_main.c"
static void mlx5e_disable_cq(struct mlx5e_cq *cq)
{
  
#line 793 
  struct mlx5e_channel *c = cq->channel;
  
#line 794 
  struct mlx5e_priv *priv = c->priv;
  
#line 795 
  struct mlx5_core_dev *mdev = priv->mdev;
  
#line 797 
  mlx5_core_destroy_cq(mdev,& cq->mcq);
  
#line 798 
  return;
}


#line 800  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_main.c"
static int mlx5e_open_cq(struct mlx5e_channel *c, struct mlx5e_cq_param *param, struct mlx5e_cq *cq, u16 moderation_usecs, u16 moderation_frames)
{
  int __retres;
  int err;
  
#line 807 
  struct mlx5e_priv *priv = c->priv;
  
#line 808 
  struct mlx5_core_dev *mdev = priv->mdev;
  
#line 810 
  err = mlx5e_create_cq(c,param,cq);
  
#line 811 
  if (err != 0) {
    
#line 812 
    __retres = err;
    
#line 812 
    goto return_label;
  }
  else ;
  
#line 814 
  err = mlx5e_enable_cq(cq,param);
  
#line 815 
  if (err != 0) 
#line 816 
                goto err_destroy_cq; else ;
  
#line 818 
  err = mlx5_core_modify_cq_moderation(mdev,& cq->mcq,(unsigned short)((int)moderation_usecs),(unsigned short)((int)moderation_frames));
  
#line 821 
  if (err != 0) 
#line 822 
                goto err_destroy_cq; else ;
  
#line 824 
  __retres = 0;
  
#line 824 
  goto return_label;
  err_destroy_cq: 
#line 826 
  ;
  
#line 827 
  mlx5e_destroy_cq(cq);
  
#line 829 
  __retres = err;
  return_label: 
#line 829 
                return __retres;
}


#line 832  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_main.c"
static void mlx5e_close_cq(struct mlx5e_cq *cq)
{
  
#line 834 
  mlx5e_disable_cq(cq);
  
#line 835 
  mlx5e_destroy_cq(cq);
  
#line 836 
  return;
}


#line 838  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_main.c"
static int mlx5e_get_cpu(struct mlx5e_priv *priv, int ix)
{
  int __retres;
  unsigned int tmp;
  
#line 840 
  tmp = cpumask_first((struct cpumask const *)((priv->mdev)->priv.irq_info + ix)->mask);
  
#line 840 
  __retres = (int)tmp;
  
#line 840 
  return __retres;
}


#line 843  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_main.c"
static int mlx5e_open_tx_cqs(struct mlx5e_channel *c, struct mlx5e_channel_param *cparam)
{
  int __retres;
  int err;
  int tc;
  
#line 846 
  struct mlx5e_priv *priv = c->priv;
  
#line 850 
  tc = 0;
  
#line 850 
  goto ldv_55330;
  ldv_55329: 
#line 851 
  ;
  
#line 851 
  err = mlx5e_open_cq(c,& cparam->tx_cq,& c->sq[tc].cq,(unsigned short)((int)priv->params.tx_cq_moderation_usec),(unsigned short)((int)priv->params.tx_cq_moderation_pkts));
  
#line 854 
  if (err != 0) 
#line 855 
                goto err_close_tx_cqs; else ;
  
#line 850 
  tc += 1;
  ldv_55330: 
#line 851 
  ;
  
#line 850 
  if ((int)c->num_tc > tc) 
#line 852 
                           goto ldv_55329; else 
#line 855 
                                                goto ldv_55331;
  ldv_55331: 
#line 856 
  ;
  
#line 858 
  __retres = 0;
  
#line 858 
  goto return_label;
  err_close_tx_cqs: 
#line 860 
  ;
  
#line 861 
  tc -= 1;
  
#line 861 
  goto ldv_55333;
  ldv_55332: 
#line 862 
  ;
  
#line 862 
  mlx5e_close_cq(& c->sq[tc].cq);
  
#line 861 
  tc -= 1;
  ldv_55333: 
#line 862 
  ;
  
#line 861 
  if (tc >= 0) 
#line 863 
               goto ldv_55332; else 
#line 866 
                                    goto ldv_55334;
  ldv_55334: 
#line 867 
  ;
  
#line 864 
  __retres = err;
  return_label: 
#line 864 
                return __retres;
}


#line 867  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_main.c"
static void mlx5e_close_tx_cqs(struct mlx5e_channel *c)
{
  int tc;
  
#line 871 
  tc = 0;
  
#line 871 
  goto ldv_55340;
  ldv_55339: 
#line 872 
  ;
  
#line 872 
  mlx5e_close_cq(& c->sq[tc].cq);
  
#line 871 
  tc += 1;
  ldv_55340: 
#line 872 
  ;
  
#line 871 
  if ((int)c->num_tc > tc) 
#line 873 
                           goto ldv_55339; else 
#line 876 
                                                goto ldv_55341;
  ldv_55341: 
#line 877 
  ;
  
#line 878 
  return;
}


#line 875  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_main.c"
static int mlx5e_open_sqs(struct mlx5e_channel *c, struct mlx5e_channel_param *cparam)
{
  int __retres;
  int err;
  int tc;
  
#line 881 
  tc = 0;
  
#line 881 
  goto ldv_55350;
  ldv_55349: 
#line 882 
  ;
  
#line 882 
  err = mlx5e_open_sq(c,tc,& cparam->sq,& c->sq[tc]);
  
#line 883 
  if (err != 0) 
#line 884 
                goto err_close_sqs; else ;
  
#line 881 
  tc += 1;
  ldv_55350: 
#line 882 
  ;
  
#line 881 
  if ((int)c->num_tc > tc) 
#line 883 
                           goto ldv_55349; else 
#line 886 
                                                goto ldv_55351;
  ldv_55351: 
#line 887 
  ;
  
#line 887 
  __retres = 0;
  
#line 887 
  goto return_label;
  err_close_sqs: 
#line 889 
  ;
  
#line 890 
  tc -= 1;
  
#line 890 
  goto ldv_55353;
  ldv_55352: 
#line 891 
  ;
  
#line 891 
  mlx5e_close_sq(& c->sq[tc]);
  
#line 890 
  tc -= 1;
  ldv_55353: 
#line 891 
  ;
  
#line 890 
  if (tc >= 0) 
#line 892 
               goto ldv_55352; else 
#line 895 
                                    goto ldv_55354;
  ldv_55354: 
#line 896 
  ;
  
#line 893 
  __retres = err;
  return_label: 
#line 893 
                return __retres;
}


#line 896  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_main.c"
static void mlx5e_close_sqs(struct mlx5e_channel *c)
{
  int tc;
  
#line 900 
  tc = 0;
  
#line 900 
  goto ldv_55360;
  ldv_55359: 
#line 901 
  ;
  
#line 901 
  mlx5e_close_sq(& c->sq[tc]);
  
#line 900 
  tc += 1;
  ldv_55360: 
#line 901 
  ;
  
#line 900 
  if ((int)c->num_tc > tc) 
#line 902 
                           goto ldv_55359; else 
#line 905 
                                                goto ldv_55361;
  ldv_55361: 
#line 906 
  ;
  
#line 907 
  return;
}


#line 904  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_main.c"
static void mlx5e_build_tc_to_txq_map(struct mlx5e_channel *c, int num_channels)
{
  int i;
  
#line 909 
  i = 0;
  
#line 909 
  goto ldv_55368;
  ldv_55367: 
#line 910 
  ;
  
#line 910 
  c->tc_to_txq_map[i] = c->ix + i * num_channels;
  
#line 909 
  i += 1;
  ldv_55368: 
#line 910 
  ;
  
#line 909 
  if (i <= 7) 
#line 911 
              goto ldv_55367; else 
#line 914 
                                   goto ldv_55369;
  ldv_55369: 
#line 915 
  ;
  
#line 916 
  return;
}


#line 913  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_main.c"
static int mlx5e_open_channel(struct mlx5e_priv *priv, int ix, struct mlx5e_channel_param *cparam, struct mlx5e_channel **cp)
{
  int __retres;
  struct mlx5e_channel *c;
  int err;
  void *tmp_1;
  int tmp_0;
  struct cpumask const *tmp_3;
  
#line 917 
  struct net_device *netdev = priv->netdev;
  
#line 918 
  int cpu = mlx5e_get_cpu(priv,ix);
  
#line 922 
  tmp_0 = __cpu_to_node(cpu);
  
#line 922 
  tmp_1 = kzalloc_node(7104UL,208U,tmp_0);
  
#line 922 
  c = (struct mlx5e_channel *)tmp_1;
  
#line 923 
  if (c == (struct mlx5e_channel *)0) {
    
#line 924 
    __retres = -12;
    
#line 924 
    goto return_label;
  }
  else ;
  
#line 926 
  c->priv = priv;
  
#line 927 
  c->ix = ix;
  
#line 928 
  c->cpu = cpu;
  
#line 929 
  c->pdev = & ((priv->mdev)->pdev)->dev;
  
#line 930 
  c->netdev = priv->netdev;
  
#line 931 
  if (0 != 0) 
#line 931 
              c->mkey_be = (((priv->mr.key << 24) | ((priv->mr.key << 8) & 16711680U)) | ((priv->mr.key >> 8) & 65280U)) | (priv->mr.key >> 24); else 
                                                                    
#line 931 
                                                                    c->mkey_be = __fswab32(priv->mr.key);
  
#line 932 
  c->num_tc = (unsigned char)priv->num_tc;
  
#line 934 
  mlx5e_build_tc_to_txq_map(c,(int)priv->params.num_channels);
  
#line 936 
  netif_napi_add(netdev,& c->napi,& mlx5e_napi_poll,64);
  
#line 938 
  err = mlx5e_open_tx_cqs(c,cparam);
  
#line 939 
  if (err != 0) 
#line 940 
                goto err_napi_del; else ;
  
#line 942 
  err = mlx5e_open_cq(c,& cparam->rx_cq,& c->rq.cq,(unsigned short)((int)priv->params.rx_cq_moderation_usec),(unsigned short)((int)priv->params.rx_cq_moderation_pkts));
  
#line 945 
  if (err != 0) 
#line 946 
                goto err_close_tx_cqs; else ;
  
#line 948 
  napi_enable(& c->napi);
  
#line 950 
  err = mlx5e_open_sqs(c,cparam);
  
#line 951 
  if (err != 0) 
#line 952 
                goto err_disable_napi; else ;
  
#line 954 
  err = mlx5e_open_rq(c,& cparam->rq,& c->rq);
  
#line 955 
  if (err != 0) 
#line 956 
                goto err_close_sqs; else ;
  
#line 958 
  ;
  
#line 958 
  tmp_3 = get_cpu_mask((unsigned int)c->cpu);
  
#line 958 
  ;
  
#line 958 
  netif_set_xps_queue(netdev,tmp_3,(unsigned short)((int)((unsigned short)ix)));
  
#line 959 
  *cp = c;
  
#line 961 
  __retres = 0;
  
#line 961 
  goto return_label;
  err_close_sqs: 
#line 963 
  ;
  
#line 964 
  mlx5e_close_sqs(c);
  err_disable_napi: 
#line 966 
  ;
  
#line 967 
  napi_disable(& c->napi);
  
#line 968 
  mlx5e_close_cq(& c->rq.cq);
  err_close_tx_cqs: 
#line 970 
  ;
  
#line 971 
  mlx5e_close_tx_cqs(c);
  err_napi_del: 
#line 973 
  ;
  
#line 974 
  netif_napi_del(& c->napi);
  
#line 975 
  kfree((void const *)c);
  
#line 977 
  __retres = err;
  return_label: 
#line 977 
                return __retres;
}


#line 980  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_main.c"
static void mlx5e_close_channel(struct mlx5e_channel *c)
{
  
#line 982 
  mlx5e_close_rq(& c->rq);
  
#line 983 
  mlx5e_close_sqs(c);
  
#line 984 
  napi_disable(& c->napi);
  
#line 985 
  mlx5e_close_cq(& c->rq.cq);
  
#line 986 
  mlx5e_close_tx_cqs(c);
  
#line 987 
  netif_napi_del(& c->napi);
  
#line 988 
  kfree((void const *)c);
  
#line 989 
  return;
}


#line 997 
void __compiletime_assert_997(void);


#line 998 
void __compiletime_assert_998(void);


#line 999 
void __compiletime_assert_999(void);


#line 1000 
void __compiletime_assert_1000(void);


#line 1001 
void __compiletime_assert_1001(void);


#line 991  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_main.c"
static void mlx5e_build_rq_param(struct mlx5e_priv *priv, struct mlx5e_rq_param *param)
{
  
#line 994 
  void *rqc = (void *)(& param->rqc);
  
#line 995 
  void *wq = rqc + 48U;
  {
    
#line 997 
    bool __cond = (_Bool)0;
    
#line 997 
    if ((int)__cond != 0) 
#line 997 
                          __compiletime_assert_997(); else ;
  }
  
#line 997 
  if (0 != 0) {
    unsigned int tmp_2;
    unsigned int tmp_4;
    unsigned int tmp_6;
    unsigned int tmp_8;
    
#line 997 
    if (0 != 0) 
#line 997 
                tmp_2 = ((((*((__be32 *)wq) << 24) | ((*((__be32 *)wq) << 8) & 16711680U)) | ((*((__be32 *)wq) >> 8) & 65280U)) | (*((__be32 *)wq) >> 24)) << 24;
    else {
      __u32 tmp_1;
      
#line 997 
      tmp_1 = __fswab32(*((__be32 *)wq));
      
#line 997 
      tmp_2 = tmp_1 << 24;
    }
    
#line 997 
    if (0 != 0) 
#line 997 
                tmp_4 = (((((*((__be32 *)wq) << 24) | ((*((__be32 *)wq) << 8) & 16711680U)) | ((*((__be32 *)wq) >> 8) & 65280U)) | (*((__be32 *)wq) >> 24)) << 8) & 16711680U;
    else {
      __u32 tmp_3;
      
#line 997 
      tmp_3 = __fswab32(*((__be32 *)wq));
      
#line 997 
      tmp_4 = (tmp_3 << 8) & 16711680U;
    }
    
#line 997 
    if (0 != 0) 
#line 997 
                tmp_6 = (((((*((__be32 *)wq) << 24) | ((*((__be32 *)wq) << 8) & 16711680U)) | ((*((__be32 *)wq) >> 8) & 65280U)) | (*((__be32 *)wq) >> 24)) >> 8) & 65280U;
    else {
      __u32 tmp_5;
      
#line 997 
      tmp_5 = __fswab32(*((__be32 *)wq));
      
#line 997 
      tmp_6 = (tmp_5 >> 8) & 65280U;
    }
    
#line 997 
    if (0 != 0) 
#line 997 
                tmp_8 = (((((*((__be32 *)wq) << 24) | ((*((__be32 *)wq) << 8) & 16711680U)) | ((*((__be32 *)wq) >> 8) & 65280U)) | (*((__be32 *)wq) >> 24)) >> 24) & 15U;
    else {
      __u32 tmp_7;
      
#line 997 
      tmp_7 = __fswab32(*((__be32 *)wq));
      
#line 997 
      tmp_8 = (tmp_7 >> 24) & 15U;
    }
    
#line 997 
    *((__be32 *)wq) = ((tmp_2 | tmp_4) | tmp_6) | tmp_8;
  }
  else {
    __u32 tmp_11;
    unsigned int tmp_10;
    
#line 997 
    if (0 != 0) 
#line 997 
                tmp_10 = ((((*((__be32 *)wq) << 24) | ((*((__be32 *)wq) << 8) & 16711680U)) | ((*((__be32 *)wq) >> 8) & 65280U)) | (*((__be32 *)wq) >> 24)) & 268435455U;
    else {
      __u32 tmp_9;
      
#line 997 
      tmp_9 = __fswab32(*((__be32 *)wq));
      
#line 997 
      tmp_10 = tmp_9 & 268435455U;
    }
    
#line 997 
    tmp_11 = __fswab32(tmp_10);
    
#line 997 
    *((__be32 *)wq) = tmp_11;
  }
  {
    
#line 998 
    bool __cond_0 = (_Bool)0;
    
#line 998 
    if ((int)__cond_0 != 0) 
#line 998 
                            __compiletime_assert_998(); else ;
  }
  
#line 998 
  if (0 != 0) {
    unsigned int tmp_15;
    unsigned int tmp_17;
    unsigned int tmp_19;
    unsigned int tmp_21;
    
#line 998 
    if (0 != 0) 
#line 998 
                tmp_15 = ((((*((__be32 *)wq) << 24) | ((*((__be32 *)wq) << 8) & 16711680U)) | ((*((__be32 *)wq) >> 8) & 65280U)) | (*((__be32 *)wq) >> 24)) << 24;
    else {
      __u32 tmp_14;
      
#line 998 
      tmp_14 = __fswab32(*((__be32 *)wq));
      
#line 998 
      tmp_15 = tmp_14 << 24;
    }
    
#line 998 
    if (0 != 0) 
#line 998 
                tmp_17 = (((((*((__be32 *)wq) << 24) | ((*((__be32 *)wq) << 8) & 16711680U)) | ((*((__be32 *)wq) >> 8) & 65280U)) | (*((__be32 *)wq) >> 24)) << 8) & 16711680U;
    else {
      __u32 tmp_16;
      
#line 998 
      tmp_16 = __fswab32(*((__be32 *)wq));
      
#line 998 
      tmp_17 = (tmp_16 << 8) & 16711680U;
    }
    
#line 998 
    if (0 != 0) 
#line 998 
                tmp_19 = (((((*((__be32 *)wq) << 24) | ((*((__be32 *)wq) << 8) & 16711680U)) | ((*((__be32 *)wq) >> 8) & 65280U)) | (*((__be32 *)wq) >> 24)) >> 8) & 65280U;
    else {
      __u32 tmp_18;
      
#line 998 
      tmp_18 = __fswab32(*((__be32 *)wq));
      
#line 998 
      tmp_19 = (tmp_18 >> 8) & 65280U;
    }
    
#line 998 
    if (0 != 0) 
#line 998 
                tmp_21 = ((((((*((__be32 *)wq) << 24) | ((*((__be32 *)wq) << 8) & 16711680U)) | ((*((__be32 *)wq) >> 8) & 65280U)) | (*((__be32 *)wq) >> 24)) >> 24) & 249U) | 2U;
    else {
      __u32 tmp_20;
      
#line 998 
      tmp_20 = __fswab32(*((__be32 *)wq));
      
#line 998 
      tmp_21 = ((tmp_20 >> 24) & 249U) | 2U;
    }
    
#line 998 
    *((__be32 *)wq) = ((tmp_15 | tmp_17) | tmp_19) | tmp_21;
  }
  else {
    __u32 tmp_24;
    unsigned int tmp_23;
    
#line 998 
    if (0 != 0) 
#line 998 
                tmp_23 = (((((*((__be32 *)wq) << 24) | ((*((__be32 *)wq) << 8) & 16711680U)) | ((*((__be32 *)wq) >> 8) & 65280U)) | (*((__be32 *)wq) >> 24)) & 4194303999U) | 33554432U;
    else {
      __u32 tmp_22;
      
#line 998 
      tmp_22 = __fswab32(*((__be32 *)wq));
      
#line 998 
      tmp_23 = (tmp_22 & 4194303999U) | 33554432U;
    }
    
#line 998 
    tmp_24 = __fswab32(tmp_23);
    
#line 998 
    *((__be32 *)wq) = tmp_24;
  }
  {
    
#line 999 
    bool __cond_1 = (_Bool)0;
    
#line 999 
    if ((int)__cond_1 != 0) 
#line 999 
                            __compiletime_assert_999(); else ;
  }
  
#line 999 
  if (0 != 0) {
    unsigned int tmp_28;
    unsigned int tmp_30;
    unsigned int tmp_32;
    unsigned int tmp_34;
    
#line 999 
    if (0 != 0) 
#line 999 
                tmp_28 = ((((*((__be32 *)wq + 8U) << 24) | ((*((__be32 *)wq + 8U) << 8) & 16711680U)) | ((*((__be32 *)wq + 8U) >> 8) & 65280U)) | (*((__be32 *)wq + 8U) >> 24)) << 24;
    else {
      __u32 tmp_27;
      
#line 999 
      tmp_27 = __fswab32(*((__be32 *)wq + 8U));
      
#line 999 
      tmp_28 = tmp_27 << 24;
    }
    
#line 999 
    if (0 != 0) 
#line 999 
                tmp_30 = (((((*((__be32 *)wq + 8U) << 24) | ((*((__be32 *)wq + 8U) << 8) & 16711680U)) | ((*((__be32 *)wq + 8U) >> 8) & 65280U)) | (*((__be32 *)wq + 8U) >> 24)) << 8) & 16711680U;
    else {
      __u32 tmp_29;
      
#line 999 
      tmp_29 = __fswab32(*((__be32 *)wq + 8U));
      
#line 999 
      tmp_30 = (tmp_29 << 8) & 16711680U;
    }
    
#line 999 
    if (0 != 0) 
#line 999 
                tmp_32 = ((((((*((__be32 *)wq + 8U) << 24) | ((*((__be32 *)wq + 8U) << 8) & 16711680U)) | ((*((__be32 *)wq + 8U) >> 8) & 65280U)) | (*((__be32 *)wq + 8U) >> 24)) >> 8) & 61440U) | 1280U;
    else {
      __u32 tmp_31;
      
#line 999 
      tmp_31 = __fswab32(*((__be32 *)wq + 8U));
      
#line 999 
      tmp_32 = ((tmp_31 >> 8) & 61440U) | 1280U;
    }
    
#line 999 
    if (0 != 0) 
#line 999 
                tmp_34 = ((((*((__be32 *)wq + 8U) << 24) | ((*((__be32 *)wq + 8U) << 8) & 16711680U)) | ((*((__be32 *)wq + 8U) >> 8) & 65280U)) | (*((__be32 *)wq + 8U) >> 24)) >> 24;
    else {
      __u32 tmp_33;
      
#line 999 
      tmp_33 = __fswab32(*((__be32 *)wq + 8U));
      
#line 999 
      tmp_34 = tmp_33 >> 24;
    }
    
#line 999 
    *((__be32 *)wq + 8U) = ((tmp_28 | tmp_30) | tmp_32) | tmp_34;
  }
  else {
    __u32 tmp_37;
    unsigned int tmp_36;
    
#line 999 
    if (0 != 0) 
#line 999 
                tmp_36 = (((((*((__be32 *)wq + 8U) << 24) | ((*((__be32 *)wq + 8U) << 8) & 16711680U)) | ((*((__be32 *)wq + 8U) >> 8) & 65280U)) | (*((__be32 *)wq + 8U) >> 24)) & 4293984255U) | 327680U;
    else {
      __u32 tmp_35;
      
#line 999 
      tmp_35 = __fswab32(*((__be32 *)wq + 8U));
      
#line 999 
      tmp_36 = (tmp_35 & 4293984255U) | 327680U;
    }
    
#line 999 
    tmp_37 = __fswab32(tmp_36);
    
#line 999 
    *((__be32 *)wq + 8U) = tmp_37;
  }
  {
    
#line 1000 
    bool __cond_2 = (_Bool)0;
    
#line 1000 
    if ((int)__cond_2 != 0) 
#line 1000 
                            __compiletime_assert_1000(); else ;
  }
  
#line 1000 
  if (0 != 0) {
    unsigned int tmp_41;
    unsigned int tmp_43;
    unsigned int tmp_45;
    unsigned int tmp_47;
    
#line 1000 
    if (0 != 0) 
#line 1000 
                tmp_41 = ((((*((__be32 *)wq + 8U) << 24) | ((*((__be32 *)wq + 8U) << 8) & 16711680U)) | ((*((__be32 *)wq + 8U) >> 8) & 65280U)) | (*((__be32 *)wq + 8U) >> 24)) & 4294967264U;
    else {
      __u32 tmp_40;
      
#line 1000 
      tmp_40 = __fswab32(*((__be32 *)wq + 8U));
      
#line 1000 
      tmp_41 = tmp_40 & 4294967264U;
    }
    
#line 1000 
    if (0 != 0) 
#line 1000 
                tmp_43 = ((((*((__be32 *)wq + 8U) << 24) | ((*((__be32 *)wq + 8U) << 8) & 16711680U)) | ((*((__be32 *)wq + 8U) >> 8) & 65280U)) | (*((__be32 *)wq + 8U) >> 24)) & 4294967264U;
    else {
      __u32 tmp_42;
      
#line 1000 
      tmp_42 = __fswab32(*((__be32 *)wq + 8U));
      
#line 1000 
      tmp_43 = tmp_42 & 4294967264U;
    }
    
#line 1000 
    if (0 != 0) 
#line 1000 
                tmp_45 = ((((*((__be32 *)wq + 8U) << 24) | ((*((__be32 *)wq + 8U) << 8) & 16711680U)) | ((*((__be32 *)wq + 8U) >> 8) & 65280U)) | (*((__be32 *)wq + 8U) >> 24)) & 4294967264U;
    else {
      __u32 tmp_44;
      
#line 1000 
      tmp_44 = __fswab32(*((__be32 *)wq + 8U));
      
#line 1000 
      tmp_45 = tmp_44 & 4294967264U;
    }
    
#line 1000 
    if (0 != 0) 
#line 1000 
                tmp_47 = ((((*((__be32 *)wq + 8U) << 24) | ((*((__be32 *)wq + 8U) << 8) & 16711680U)) | ((*((__be32 *)wq + 8U) >> 8) & 65280U)) | (*((__be32 *)wq + 8U) >> 24)) & 4294967264U;
    else {
      __u32 tmp_46;
      
#line 1000 
      tmp_46 = __fswab32(*((__be32 *)wq + 8U));
      
#line 1000 
      tmp_47 = tmp_46 & 4294967264U;
    }
    
#line 1000 
    *((__be32 *)wq + 8U) = ((((tmp_41 | ((unsigned int)priv->params.log_rq_size & 31U)) << 24) | (((tmp_43 | ((unsigned int)priv->params.log_rq_size & 31U)) << 8) & 16711680U)) | (((tmp_45 | ((unsigned int)priv->params.log_rq_size & 31U)) >> 8) & 65280U)) | ((tmp_47 | ((unsigned int)priv->params.log_rq_size & 31U)) >> 24);
  }
  else {
    __u32 tmp_50;
    unsigned int tmp_49;
    
#line 1000 
    if (0 != 0) 
#line 1000 
                tmp_49 = ((((*((__be32 *)wq + 8U) << 24) | ((*((__be32 *)wq + 8U) << 8) & 16711680U)) | ((*((__be32 *)wq + 8U) >> 8) & 65280U)) | (*((__be32 *)wq + 8U) >> 24)) & 4294967264U;
    else {
      __u32 tmp_48;
      
#line 1000 
      tmp_48 = __fswab32(*((__be32 *)wq + 8U));
      
#line 1000 
      tmp_49 = tmp_48 & 4294967264U;
    }
    
#line 1000 
    ;
    
#line 1000 
    tmp_50 = __fswab32(tmp_49 | ((unsigned int)priv->params.log_rq_size & 31U));
    
#line 1000 
    *((__be32 *)wq + 8U) = tmp_50;
  }
  {
    
#line 1001 
    bool __cond_3 = (_Bool)0;
    
#line 1001 
    if ((int)__cond_3 != 0) 
#line 1001 
                            __compiletime_assert_1001(); else ;
  }
  
#line 1001 
  if (0 != 0) {
    unsigned int tmp_54;
    unsigned int tmp_56;
    unsigned int tmp_58;
    unsigned int tmp_60;
    
#line 1001 
    if (0 != 0) 
#line 1001 
                tmp_54 = ((((*((__be32 *)wq + 2U) << 24) | ((*((__be32 *)wq + 2U) << 8) & 16711680U)) | ((*((__be32 *)wq + 2U) >> 8) & 65280U)) | (*((__be32 *)wq + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_53;
      
#line 1001 
      tmp_53 = __fswab32(*((__be32 *)wq + 2U));
      
#line 1001 
      tmp_54 = tmp_53 & 4278190080U;
    }
    
#line 1001 
    if (0 != 0) 
#line 1001 
                tmp_56 = ((((*((__be32 *)wq + 2U) << 24) | ((*((__be32 *)wq + 2U) << 8) & 16711680U)) | ((*((__be32 *)wq + 2U) >> 8) & 65280U)) | (*((__be32 *)wq + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_55;
      
#line 1001 
      tmp_55 = __fswab32(*((__be32 *)wq + 2U));
      
#line 1001 
      tmp_56 = tmp_55 & 4278190080U;
    }
    
#line 1001 
    if (0 != 0) 
#line 1001 
                tmp_58 = ((((*((__be32 *)wq + 2U) << 24) | ((*((__be32 *)wq + 2U) << 8) & 16711680U)) | ((*((__be32 *)wq + 2U) >> 8) & 65280U)) | (*((__be32 *)wq + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_57;
      
#line 1001 
      tmp_57 = __fswab32(*((__be32 *)wq + 2U));
      
#line 1001 
      tmp_58 = tmp_57 & 4278190080U;
    }
    
#line 1001 
    if (0 != 0) 
#line 1001 
                tmp_60 = ((((*((__be32 *)wq + 2U) << 24) | ((*((__be32 *)wq + 2U) << 8) & 16711680U)) | ((*((__be32 *)wq + 2U) >> 8) & 65280U)) | (*((__be32 *)wq + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_59;
      
#line 1001 
      tmp_59 = __fswab32(*((__be32 *)wq + 2U));
      
#line 1001 
      tmp_60 = tmp_59 & 4278190080U;
    }
    
#line 1001 
    *((__be32 *)wq + 2U) = ((((tmp_54 | (priv->pdn & 16777215U)) << 24) | (((tmp_56 | (priv->pdn & 16777215U)) << 8) & 16711680U)) | (((tmp_58 | (priv->pdn & 16777215U)) >> 8) & 65280U)) | ((tmp_60 | (priv->pdn & 16777215U)) >> 24);
  }
  else {
    __u32 tmp_63;
    unsigned int tmp_62;
    
#line 1001 
    if (0 != 0) 
#line 1001 
                tmp_62 = ((((*((__be32 *)wq + 2U) << 24) | ((*((__be32 *)wq + 2U) << 8) & 16711680U)) | ((*((__be32 *)wq + 2U) >> 8) & 65280U)) | (*((__be32 *)wq + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_61;
      
#line 1001 
      tmp_61 = __fswab32(*((__be32 *)wq + 2U));
      
#line 1001 
      tmp_62 = tmp_61 & 4278190080U;
    }
    
#line 1001 
    ;
    
#line 1001 
    tmp_63 = __fswab32(tmp_62 | (priv->pdn & 16777215U));
    
#line 1001 
    *((__be32 *)wq + 2U) = tmp_63;
  }
  
#line 1003 
  param->wq.numa = dev_to_node(& ((priv->mdev)->pdev)->dev);
  
#line 1004 
  param->wq.linear = 1;
  
#line 1005 
  return;
}


#line 1013 
void __compiletime_assert_1013(void);


#line 1014 
void __compiletime_assert_1014(void);


#line 1015 
void __compiletime_assert_1015(void);


#line 1007  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_main.c"
static void mlx5e_build_sq_param(struct mlx5e_priv *priv, struct mlx5e_sq_param *param)
{
  
#line 1010 
  void *sqc = (void *)(& param->sqc);
  
#line 1011 
  void *wq = sqc + 48U;
  {
    
#line 1013 
    bool __cond = (_Bool)0;
    
#line 1013 
    if ((int)__cond != 0) 
#line 1013 
                          __compiletime_assert_1013(); else ;
  }
  
#line 1013 
  if (0 != 0) {
    unsigned int tmp_2;
    unsigned int tmp_4;
    unsigned int tmp_6;
    unsigned int tmp_8;
    
#line 1013 
    if (0 != 0) 
#line 1013 
                tmp_2 = ((((*((__be32 *)wq + 8U) << 24) | ((*((__be32 *)wq + 8U) << 8) & 16711680U)) | ((*((__be32 *)wq + 8U) >> 8) & 65280U)) | (*((__be32 *)wq + 8U) >> 24)) & 4294967264U;
    else {
      __u32 tmp_1;
      
#line 1013 
      tmp_1 = __fswab32(*((__be32 *)wq + 8U));
      
#line 1013 
      tmp_2 = tmp_1 & 4294967264U;
    }
    
#line 1013 
    if (0 != 0) 
#line 1013 
                tmp_4 = ((((*((__be32 *)wq + 8U) << 24) | ((*((__be32 *)wq + 8U) << 8) & 16711680U)) | ((*((__be32 *)wq + 8U) >> 8) & 65280U)) | (*((__be32 *)wq + 8U) >> 24)) & 4294967264U;
    else {
      __u32 tmp_3;
      
#line 1013 
      tmp_3 = __fswab32(*((__be32 *)wq + 8U));
      
#line 1013 
      tmp_4 = tmp_3 & 4294967264U;
    }
    
#line 1013 
    if (0 != 0) 
#line 1013 
                tmp_6 = ((((*((__be32 *)wq + 8U) << 24) | ((*((__be32 *)wq + 8U) << 8) & 16711680U)) | ((*((__be32 *)wq + 8U) >> 8) & 65280U)) | (*((__be32 *)wq + 8U) >> 24)) & 4294967264U;
    else {
      __u32 tmp_5;
      
#line 1013 
      tmp_5 = __fswab32(*((__be32 *)wq + 8U));
      
#line 1013 
      tmp_6 = tmp_5 & 4294967264U;
    }
    
#line 1013 
    if (0 != 0) 
#line 1013 
                tmp_8 = ((((*((__be32 *)wq + 8U) << 24) | ((*((__be32 *)wq + 8U) << 8) & 16711680U)) | ((*((__be32 *)wq + 8U) >> 8) & 65280U)) | (*((__be32 *)wq + 8U) >> 24)) & 4294967264U;
    else {
      __u32 tmp_7;
      
#line 1013 
      tmp_7 = __fswab32(*((__be32 *)wq + 8U));
      
#line 1013 
      tmp_8 = tmp_7 & 4294967264U;
    }
    
#line 1013 
    *((__be32 *)wq + 8U) = ((((tmp_2 | ((unsigned int)priv->params.log_sq_size & 31U)) << 24) | (((tmp_4 | ((unsigned int)priv->params.log_sq_size & 31U)) << 8) & 16711680U)) | (((tmp_6 | ((unsigned int)priv->params.log_sq_size & 31U)) >> 8) & 65280U)) | ((tmp_8 | ((unsigned int)priv->params.log_sq_size & 31U)) >> 24);
  }
  else {
    __u32 tmp_11;
    unsigned int tmp_10;
    
#line 1013 
    if (0 != 0) 
#line 1013 
                tmp_10 = ((((*((__be32 *)wq + 8U) << 24) | ((*((__be32 *)wq + 8U) << 8) & 16711680U)) | ((*((__be32 *)wq + 8U) >> 8) & 65280U)) | (*((__be32 *)wq + 8U) >> 24)) & 4294967264U;
    else {
      __u32 tmp_9;
      
#line 1013 
      tmp_9 = __fswab32(*((__be32 *)wq + 8U));
      
#line 1013 
      tmp_10 = tmp_9 & 4294967264U;
    }
    
#line 1013 
    ;
    
#line 1013 
    tmp_11 = __fswab32(tmp_10 | ((unsigned int)priv->params.log_sq_size & 31U));
    
#line 1013 
    *((__be32 *)wq + 8U) = tmp_11;
  }
  {
    
#line 1014 
    bool __cond_0 = (_Bool)0;
    
#line 1014 
    if ((int)__cond_0 != 0) 
#line 1014 
                            __compiletime_assert_1014(); else ;
  }
  
#line 1014 
  if (0 != 0) {
    unsigned int tmp_15;
    unsigned int tmp_17;
    unsigned int tmp_19;
    unsigned int tmp_21;
    
#line 1014 
    if (0 != 0) 
#line 1014 
                tmp_15 = ((((*((__be32 *)wq + 8U) << 24) | ((*((__be32 *)wq + 8U) << 8) & 16711680U)) | ((*((__be32 *)wq + 8U) >> 8) & 65280U)) | (*((__be32 *)wq + 8U) >> 24)) << 24;
    else {
      __u32 tmp_14;
      
#line 1014 
      tmp_14 = __fswab32(*((__be32 *)wq + 8U));
      
#line 1014 
      tmp_15 = tmp_14 << 24;
    }
    
#line 1014 
    if (0 != 0) 
#line 1014 
                tmp_17 = (((((*((__be32 *)wq + 8U) << 24) | ((*((__be32 *)wq + 8U) << 8) & 16711680U)) | ((*((__be32 *)wq + 8U) >> 8) & 65280U)) | (*((__be32 *)wq + 8U) >> 24)) << 8) & 16711680U;
    else {
      __u32 tmp_16;
      
#line 1014 
      tmp_16 = __fswab32(*((__be32 *)wq + 8U));
      
#line 1014 
      tmp_17 = (tmp_16 << 8) & 16711680U;
    }
    
#line 1014 
    if (0 != 0) 
#line 1014 
                tmp_19 = ((((((*((__be32 *)wq + 8U) << 24) | ((*((__be32 *)wq + 8U) << 8) & 16711680U)) | ((*((__be32 *)wq + 8U) >> 8) & 65280U)) | (*((__be32 *)wq + 8U) >> 24)) >> 8) & 61440U) | 1536U;
    else {
      __u32 tmp_18;
      
#line 1014 
      tmp_18 = __fswab32(*((__be32 *)wq + 8U));
      
#line 1014 
      tmp_19 = ((tmp_18 >> 8) & 61440U) | 1536U;
    }
    
#line 1014 
    if (0 != 0) 
#line 1014 
                tmp_21 = ((((*((__be32 *)wq + 8U) << 24) | ((*((__be32 *)wq + 8U) << 8) & 16711680U)) | ((*((__be32 *)wq + 8U) >> 8) & 65280U)) | (*((__be32 *)wq + 8U) >> 24)) >> 24;
    else {
      __u32 tmp_20;
      
#line 1014 
      tmp_20 = __fswab32(*((__be32 *)wq + 8U));
      
#line 1014 
      tmp_21 = tmp_20 >> 24;
    }
    
#line 1014 
    *((__be32 *)wq + 8U) = ((tmp_15 | tmp_17) | tmp_19) | tmp_21;
  }
  else {
    __u32 tmp_24;
    unsigned int tmp_23;
    
#line 1014 
    if (0 != 0) 
#line 1014 
                tmp_23 = (((((*((__be32 *)wq + 8U) << 24) | ((*((__be32 *)wq + 8U) << 8) & 16711680U)) | ((*((__be32 *)wq + 8U) >> 8) & 65280U)) | (*((__be32 *)wq + 8U) >> 24)) & 4293984255U) | 393216U;
    else {
      __u32 tmp_22;
      
#line 1014 
      tmp_22 = __fswab32(*((__be32 *)wq + 8U));
      
#line 1014 
      tmp_23 = (tmp_22 & 4293984255U) | 393216U;
    }
    
#line 1014 
    tmp_24 = __fswab32(tmp_23);
    
#line 1014 
    *((__be32 *)wq + 8U) = tmp_24;
  }
  {
    
#line 1015 
    bool __cond_1 = (_Bool)0;
    
#line 1015 
    if ((int)__cond_1 != 0) 
#line 1015 
                            __compiletime_assert_1015(); else ;
  }
  
#line 1015 
  if (0 != 0) {
    unsigned int tmp_28;
    unsigned int tmp_30;
    unsigned int tmp_32;
    unsigned int tmp_34;
    
#line 1015 
    if (0 != 0) 
#line 1015 
                tmp_28 = ((((*((__be32 *)wq + 2U) << 24) | ((*((__be32 *)wq + 2U) << 8) & 16711680U)) | ((*((__be32 *)wq + 2U) >> 8) & 65280U)) | (*((__be32 *)wq + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_27;
      
#line 1015 
      tmp_27 = __fswab32(*((__be32 *)wq + 2U));
      
#line 1015 
      tmp_28 = tmp_27 & 4278190080U;
    }
    
#line 1015 
    if (0 != 0) 
#line 1015 
                tmp_30 = ((((*((__be32 *)wq + 2U) << 24) | ((*((__be32 *)wq + 2U) << 8) & 16711680U)) | ((*((__be32 *)wq + 2U) >> 8) & 65280U)) | (*((__be32 *)wq + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_29;
      
#line 1015 
      tmp_29 = __fswab32(*((__be32 *)wq + 2U));
      
#line 1015 
      tmp_30 = tmp_29 & 4278190080U;
    }
    
#line 1015 
    if (0 != 0) 
#line 1015 
                tmp_32 = ((((*((__be32 *)wq + 2U) << 24) | ((*((__be32 *)wq + 2U) << 8) & 16711680U)) | ((*((__be32 *)wq + 2U) >> 8) & 65280U)) | (*((__be32 *)wq + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_31;
      
#line 1015 
      tmp_31 = __fswab32(*((__be32 *)wq + 2U));
      
#line 1015 
      tmp_32 = tmp_31 & 4278190080U;
    }
    
#line 1015 
    if (0 != 0) 
#line 1015 
                tmp_34 = ((((*((__be32 *)wq + 2U) << 24) | ((*((__be32 *)wq + 2U) << 8) & 16711680U)) | ((*((__be32 *)wq + 2U) >> 8) & 65280U)) | (*((__be32 *)wq + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_33;
      
#line 1015 
      tmp_33 = __fswab32(*((__be32 *)wq + 2U));
      
#line 1015 
      tmp_34 = tmp_33 & 4278190080U;
    }
    
#line 1015 
    *((__be32 *)wq + 2U) = ((((tmp_28 | (priv->pdn & 16777215U)) << 24) | (((tmp_30 | (priv->pdn & 16777215U)) << 8) & 16711680U)) | (((tmp_32 | (priv->pdn & 16777215U)) >> 8) & 65280U)) | ((tmp_34 | (priv->pdn & 16777215U)) >> 24);
  }
  else {
    __u32 tmp_37;
    unsigned int tmp_36;
    
#line 1015 
    if (0 != 0) 
#line 1015 
                tmp_36 = ((((*((__be32 *)wq + 2U) << 24) | ((*((__be32 *)wq + 2U) << 8) & 16711680U)) | ((*((__be32 *)wq + 2U) >> 8) & 65280U)) | (*((__be32 *)wq + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_35;
      
#line 1015 
      tmp_35 = __fswab32(*((__be32 *)wq + 2U));
      
#line 1015 
      tmp_36 = tmp_35 & 4278190080U;
    }
    
#line 1015 
    ;
    
#line 1015 
    tmp_37 = __fswab32(tmp_36 | (priv->pdn & 16777215U));
    
#line 1015 
    *((__be32 *)wq + 2U) = tmp_37;
  }
  
#line 1017 
  param->wq.numa = dev_to_node(& ((priv->mdev)->pdev)->dev);
  
#line 1018 
  return;
}


#line 1025 
void __compiletime_assert_1025(void);


#line 1020  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_main.c"
static void mlx5e_build_common_cq_param(struct mlx5e_priv *priv, struct mlx5e_cq_param *param)
{
  
#line 1023 
  void *cqc = (void *)(& param->cqc);
  {
    
#line 1025 
    bool __cond = (_Bool)0;
    
#line 1025 
    if ((int)__cond != 0) 
#line 1025 
                          __compiletime_assert_1025(); else ;
  }
  
#line 1025 
  if (0 != 0) {
    unsigned int tmp_2;
    unsigned int tmp_4;
    unsigned int tmp_6;
    unsigned int tmp_8;
    
#line 1025 
    if (0 != 0) 
#line 1025 
                tmp_2 = ((((*((__be32 *)cqc + 3U) << 24) | ((*((__be32 *)cqc + 3U) << 8) & 16711680U)) | ((*((__be32 *)cqc + 3U) >> 8) & 65280U)) | (*((__be32 *)cqc + 3U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_1;
      
#line 1025 
      tmp_1 = __fswab32(*((__be32 *)cqc + 3U));
      
#line 1025 
      tmp_2 = tmp_1 & 4278190080U;
    }
    
#line 1025 
    if (0 != 0) 
#line 1025 
                tmp_4 = ((((*((__be32 *)cqc + 3U) << 24) | ((*((__be32 *)cqc + 3U) << 8) & 16711680U)) | ((*((__be32 *)cqc + 3U) >> 8) & 65280U)) | (*((__be32 *)cqc + 3U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_3;
      
#line 1025 
      tmp_3 = __fswab32(*((__be32 *)cqc + 3U));
      
#line 1025 
      tmp_4 = tmp_3 & 4278190080U;
    }
    
#line 1025 
    if (0 != 0) 
#line 1025 
                tmp_6 = ((((*((__be32 *)cqc + 3U) << 24) | ((*((__be32 *)cqc + 3U) << 8) & 16711680U)) | ((*((__be32 *)cqc + 3U) >> 8) & 65280U)) | (*((__be32 *)cqc + 3U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_5;
      
#line 1025 
      tmp_5 = __fswab32(*((__be32 *)cqc + 3U));
      
#line 1025 
      tmp_6 = tmp_5 & 4278190080U;
    }
    
#line 1025 
    if (0 != 0) 
#line 1025 
                tmp_8 = ((((*((__be32 *)cqc + 3U) << 24) | ((*((__be32 *)cqc + 3U) << 8) & 16711680U)) | ((*((__be32 *)cqc + 3U) >> 8) & 65280U)) | (*((__be32 *)cqc + 3U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_7;
      
#line 1025 
      tmp_7 = __fswab32(*((__be32 *)cqc + 3U));
      
#line 1025 
      tmp_8 = tmp_7 & 4278190080U;
    }
    
#line 1025 
    *((__be32 *)cqc + 3U) = ((((tmp_2 | (priv->cq_uar.index & 16777215U)) << 24) | (((tmp_4 | (priv->cq_uar.index & 16777215U)) << 8) & 16711680U)) | (((tmp_6 | (priv->cq_uar.index & 16777215U)) >> 8) & 65280U)) | ((tmp_8 | (priv->cq_uar.index & 16777215U)) >> 24);
  }
  else {
    __u32 tmp_11;
    unsigned int tmp_10;
    
#line 1025 
    if (0 != 0) 
#line 1025 
                tmp_10 = ((((*((__be32 *)cqc + 3U) << 24) | ((*((__be32 *)cqc + 3U) << 8) & 16711680U)) | ((*((__be32 *)cqc + 3U) >> 8) & 65280U)) | (*((__be32 *)cqc + 3U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_9;
      
#line 1025 
      tmp_9 = __fswab32(*((__be32 *)cqc + 3U));
      
#line 1025 
      tmp_10 = tmp_9 & 4278190080U;
    }
    
#line 1025 
    ;
    
#line 1025 
    tmp_11 = __fswab32(tmp_10 | (priv->cq_uar.index & 16777215U));
    
#line 1025 
    *((__be32 *)cqc + 3U) = tmp_11;
  }
  
#line 1026 
  return;
}


#line 1033 
void __compiletime_assert_1033(void);


#line 1028  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_main.c"
static void mlx5e_build_rx_cq_param(struct mlx5e_priv *priv, struct mlx5e_cq_param *param)
{
  
#line 1031 
  void *cqc = (void *)(& param->cqc);
  {
    
#line 1033 
    bool __cond = (_Bool)0;
    
#line 1033 
    if ((int)__cond != 0) 
#line 1033 
                          __compiletime_assert_1033(); else ;
  }
  
#line 1033 
  if (0 != 0) {
    unsigned int tmp_2;
    unsigned int tmp_4;
    unsigned int tmp_6;
    unsigned int tmp_8;
    
#line 1033 
    if (0 != 0) 
#line 1033 
                tmp_2 = ((((*((__be32 *)cqc + 3U) << 24) | ((*((__be32 *)cqc + 3U) << 8) & 16711680U)) | ((*((__be32 *)cqc + 3U) >> 8) & 65280U)) | (*((__be32 *)cqc + 3U) >> 24)) & 3774873599U;
    else {
      __u32 tmp_1;
      
#line 1033 
      tmp_1 = __fswab32(*((__be32 *)cqc + 3U));
      
#line 1033 
      tmp_2 = tmp_1 & 3774873599U;
    }
    
#line 1033 
    if (0 != 0) 
#line 1033 
                tmp_4 = ((((*((__be32 *)cqc + 3U) << 24) | ((*((__be32 *)cqc + 3U) << 8) & 16711680U)) | ((*((__be32 *)cqc + 3U) >> 8) & 65280U)) | (*((__be32 *)cqc + 3U) >> 24)) & 3774873599U;
    else {
      __u32 tmp_3;
      
#line 1033 
      tmp_3 = __fswab32(*((__be32 *)cqc + 3U));
      
#line 1033 
      tmp_4 = tmp_3 & 3774873599U;
    }
    
#line 1033 
    if (0 != 0) 
#line 1033 
                tmp_6 = ((((*((__be32 *)cqc + 3U) << 24) | ((*((__be32 *)cqc + 3U) << 8) & 16711680U)) | ((*((__be32 *)cqc + 3U) >> 8) & 65280U)) | (*((__be32 *)cqc + 3U) >> 24)) & 3774873599U;
    else {
      __u32 tmp_5;
      
#line 1033 
      tmp_5 = __fswab32(*((__be32 *)cqc + 3U));
      
#line 1033 
      tmp_6 = tmp_5 & 3774873599U;
    }
    
#line 1033 
    if (0 != 0) 
#line 1033 
                tmp_8 = ((((*((__be32 *)cqc + 3U) << 24) | ((*((__be32 *)cqc + 3U) << 8) & 16711680U)) | ((*((__be32 *)cqc + 3U) >> 8) & 65280U)) | (*((__be32 *)cqc + 3U) >> 24)) & 3774873599U;
    else {
      __u32 tmp_7;
      
#line 1033 
      tmp_7 = __fswab32(*((__be32 *)cqc + 3U));
      
#line 1033 
      tmp_8 = tmp_7 & 3774873599U;
    }
    
#line 1033 
    *((__be32 *)cqc + 3U) = ((((tmp_2 | (((unsigned int)priv->params.log_rq_size << 24UL) & 520093696U)) << 24) | (((tmp_4 | (((unsigned int)priv->params.log_rq_size << 24UL) & 520093696U)) << 8) & 16711680U)) | (((tmp_6 | (((unsigned int)priv->params.log_rq_size << 24UL) & 520093696U)) >> 8) & 65280U)) | ((tmp_8 | (((unsigned int)priv->params.log_rq_size << 24UL) & 520093696U)) >> 24);
  }
  else {
    __u32 tmp_11;
    unsigned int tmp_10;
    
#line 1033 
    if (0 != 0) 
#line 1033 
                tmp_10 = ((((*((__be32 *)cqc + 3U) << 24) | ((*((__be32 *)cqc + 3U) << 8) & 16711680U)) | ((*((__be32 *)cqc + 3U) >> 8) & 65280U)) | (*((__be32 *)cqc + 3U) >> 24)) & 3774873599U;
    else {
      __u32 tmp_9;
      
#line 1033 
      tmp_9 = __fswab32(*((__be32 *)cqc + 3U));
      
#line 1033 
      tmp_10 = tmp_9 & 3774873599U;
    }
    
#line 1033 
    ;
    
#line 1033 
    tmp_11 = __fswab32(tmp_10 | (((unsigned int)priv->params.log_rq_size << 24UL) & 520093696U));
    
#line 1033 
    *((__be32 *)cqc + 3U) = tmp_11;
  }
  
#line 1035 
  mlx5e_build_common_cq_param(priv,param);
  
#line 1036 
  return;
}


#line 1043 
void __compiletime_assert_1043(void);


#line 1038  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_main.c"
static void mlx5e_build_tx_cq_param(struct mlx5e_priv *priv, struct mlx5e_cq_param *param)
{
  
#line 1041 
  void *cqc = (void *)(& param->cqc);
  {
    
#line 1043 
    bool __cond = (_Bool)0;
    
#line 1043 
    if ((int)__cond != 0) 
#line 1043 
                          __compiletime_assert_1043(); else ;
  }
  
#line 1043 
  if (0 != 0) {
    unsigned int tmp_2;
    unsigned int tmp_4;
    unsigned int tmp_6;
    unsigned int tmp_8;
    
#line 1043 
    if (0 != 0) 
#line 1043 
                tmp_2 = ((((*((__be32 *)cqc + 3U) << 24) | ((*((__be32 *)cqc + 3U) << 8) & 16711680U)) | ((*((__be32 *)cqc + 3U) >> 8) & 65280U)) | (*((__be32 *)cqc + 3U) >> 24)) & 3774873599U;
    else {
      __u32 tmp_1;
      
#line 1043 
      tmp_1 = __fswab32(*((__be32 *)cqc + 3U));
      
#line 1043 
      tmp_2 = tmp_1 & 3774873599U;
    }
    
#line 1043 
    if (0 != 0) 
#line 1043 
                tmp_4 = ((((*((__be32 *)cqc + 3U) << 24) | ((*((__be32 *)cqc + 3U) << 8) & 16711680U)) | ((*((__be32 *)cqc + 3U) >> 8) & 65280U)) | (*((__be32 *)cqc + 3U) >> 24)) & 3774873599U;
    else {
      __u32 tmp_3;
      
#line 1043 
      tmp_3 = __fswab32(*((__be32 *)cqc + 3U));
      
#line 1043 
      tmp_4 = tmp_3 & 3774873599U;
    }
    
#line 1043 
    if (0 != 0) 
#line 1043 
                tmp_6 = ((((*((__be32 *)cqc + 3U) << 24) | ((*((__be32 *)cqc + 3U) << 8) & 16711680U)) | ((*((__be32 *)cqc + 3U) >> 8) & 65280U)) | (*((__be32 *)cqc + 3U) >> 24)) & 3774873599U;
    else {
      __u32 tmp_5;
      
#line 1043 
      tmp_5 = __fswab32(*((__be32 *)cqc + 3U));
      
#line 1043 
      tmp_6 = tmp_5 & 3774873599U;
    }
    
#line 1043 
    if (0 != 0) 
#line 1043 
                tmp_8 = ((((*((__be32 *)cqc + 3U) << 24) | ((*((__be32 *)cqc + 3U) << 8) & 16711680U)) | ((*((__be32 *)cqc + 3U) >> 8) & 65280U)) | (*((__be32 *)cqc + 3U) >> 24)) & 3774873599U;
    else {
      __u32 tmp_7;
      
#line 1043 
      tmp_7 = __fswab32(*((__be32 *)cqc + 3U));
      
#line 1043 
      tmp_8 = tmp_7 & 3774873599U;
    }
    
#line 1043 
    *((__be32 *)cqc + 3U) = ((((tmp_2 | (((unsigned int)priv->params.log_sq_size << 24UL) & 520093696U)) << 24) | (((tmp_4 | (((unsigned int)priv->params.log_sq_size << 24UL) & 520093696U)) << 8) & 16711680U)) | (((tmp_6 | (((unsigned int)priv->params.log_sq_size << 24UL) & 520093696U)) >> 8) & 65280U)) | ((tmp_8 | (((unsigned int)priv->params.log_sq_size << 24UL) & 520093696U)) >> 24);
  }
  else {
    __u32 tmp_11;
    unsigned int tmp_10;
    
#line 1043 
    if (0 != 0) 
#line 1043 
                tmp_10 = ((((*((__be32 *)cqc + 3U) << 24) | ((*((__be32 *)cqc + 3U) << 8) & 16711680U)) | ((*((__be32 *)cqc + 3U) >> 8) & 65280U)) | (*((__be32 *)cqc + 3U) >> 24)) & 3774873599U;
    else {
      __u32 tmp_9;
      
#line 1043 
      tmp_9 = __fswab32(*((__be32 *)cqc + 3U));
      
#line 1043 
      tmp_10 = tmp_9 & 3774873599U;
    }
    
#line 1043 
    ;
    
#line 1043 
    tmp_11 = __fswab32(tmp_10 | (((unsigned int)priv->params.log_sq_size << 24UL) & 520093696U));
    
#line 1043 
    *((__be32 *)cqc + 3U) = tmp_11;
  }
  
#line 1045 
  mlx5e_build_common_cq_param(priv,param);
  
#line 1046 
  return;
}


#line 1048  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_main.c"
static void mlx5e_build_channel_param(struct mlx5e_priv *priv, struct mlx5e_channel_param *cparam)
{
  
#line 1051 
  memset((void *)cparam,0,648UL);
  
#line 1053 
  mlx5e_build_rq_param(priv,& cparam->rq);
  
#line 1054 
  mlx5e_build_sq_param(priv,& cparam->sq);
  
#line 1055 
  mlx5e_build_rx_cq_param(priv,& cparam->rx_cq);
  
#line 1056 
  mlx5e_build_tx_cq_param(priv,& cparam->tx_cq);
  
#line 1057 
  return;
}


#line 1059  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_main.c"
static int mlx5e_open_channels(struct mlx5e_priv *priv)
{
  int __retres;
  struct mlx5e_channel_param cparam;
  int i;
  int j;
  
#line 1062 
  int err = -12;
  
#line 1066 
  priv->channel = (struct mlx5e_channel **)kcalloc_2((unsigned long)priv->params.num_channels,8UL,208U);
  
#line 1069 
  priv->txq_to_sq_map = (struct mlx5e_sq **)kcalloc_2((unsigned long)((int)priv->params.num_channels * priv->num_tc),8UL,208U);
  
#line 1072 
  if (priv->channel == (struct mlx5e_channel **)0 || priv->txq_to_sq_map == (struct mlx5e_sq **)0) 
    
#line 1073 
    goto err_free_txq_to_sq_map; else ;
  
#line 1075 
  mlx5e_build_channel_param(priv,& cparam);
  
#line 1076 
  i = 0;
  
#line 1076 
  goto ldv_55472;
  ldv_55471: 
#line 1077 
  ;
  
#line 1077 
  err = mlx5e_open_channel(priv,i,& cparam,priv->channel + i);
  
#line 1078 
  if (err != 0) 
#line 1079 
                goto err_close_channels; else ;
  
#line 1076 
  i += 1;
  ldv_55472: 
#line 1077 
  ;
  
#line 1076 
  if ((int)priv->params.num_channels > i) 
#line 1078 
                                          goto ldv_55471; else 
#line 1081 
                                                               goto ldv_55473;
  ldv_55473: 
#line 1082 
  ;
  
#line 1082 
  j = 0;
  
#line 1082 
  goto ldv_55475;
  ldv_55474: 
#line 1083 
  ;
  
#line 1083 
  err = mlx5e_wait_for_min_rx_wqes(& (*(priv->channel + j))->rq);
  
#line 1084 
  if (err != 0) 
#line 1085 
                goto err_close_channels; else ;
  
#line 1082 
  j += 1;
  ldv_55475: 
#line 1083 
  ;
  
#line 1082 
  if ((int)priv->params.num_channels > j) 
#line 1084 
                                          goto ldv_55474; else 
#line 1087 
                                                               goto ldv_55476;
  ldv_55476: 
#line 1088 
  ;
  
#line 1088 
  __retres = 0;
  
#line 1088 
  goto return_label;
  err_close_channels: 
#line 1090 
  ;
  
#line 1091 
  i -= 1;
  
#line 1091 
  goto ldv_55478;
  ldv_55477: 
#line 1092 
  ;
  
#line 1092 
  mlx5e_close_channel(*(priv->channel + i));
  
#line 1091 
  i -= 1;
  ldv_55478: 
#line 1092 
  ;
  
#line 1091 
  if (i >= 0) 
#line 1093 
              goto ldv_55477; else 
#line 1096 
                                   goto ldv_55479;
  ldv_55479: 
#line 1097 
  ;
  err_free_txq_to_sq_map: 
#line 1094 
  ;
  
#line 1095 
  kfree((void const *)priv->txq_to_sq_map);
  
#line 1096 
  kfree((void const *)priv->channel);
  
#line 1098 
  __retres = err;
  return_label: 
#line 1098 
                return __retres;
}


#line 1101  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_main.c"
static void mlx5e_close_channels(struct mlx5e_priv *priv)
{
  int i;
  
#line 1105 
  i = 0;
  
#line 1105 
  goto ldv_55485;
  ldv_55484: 
#line 1106 
  ;
  
#line 1106 
  mlx5e_close_channel(*(priv->channel + i));
  
#line 1105 
  i += 1;
  ldv_55485: 
#line 1106 
  ;
  
#line 1105 
  if ((int)priv->params.num_channels > i) 
#line 1107 
                                          goto ldv_55484; else 
#line 1110 
                                                               goto ldv_55486;
  ldv_55486: 
#line 1111 
  ;
  
#line 1108 
  kfree((void const *)priv->txq_to_sq_map);
  
#line 1109 
  kfree((void const *)priv->channel);
  
#line 1110 
  return;
}


#line 1120 
void __compiletime_assert_1120(void);


#line 1121 
void __compiletime_assert_1121(void);


#line 1112  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_main.c"
static int mlx5e_open_tis(struct mlx5e_priv *priv, int tc)
{
  u32 in[48U];
  int tmp_25;
  
#line 1114 
  struct mlx5_core_dev *mdev = priv->mdev;
  
#line 1116 
  void *tisc = (void *)(& in) + 32U;
  
#line 1118 
  memset((void *)(& in),0,192UL);
  {
    
#line 1120 
    bool __cond = (_Bool)0;
    
#line 1120 
    if ((int)__cond != 0) 
#line 1120 
                          __compiletime_assert_1120(); else ;
  }
  
#line 1120 
  if (0 != 0) {
    unsigned int tmp_2;
    unsigned int tmp_4;
    unsigned int tmp_6;
    unsigned int tmp_8;
    
#line 1120 
    if (0 != 0) 
#line 1120 
                tmp_2 = ((((*((__be32 *)tisc) << 24) | ((*((__be32 *)tisc) << 8) & 16711680U)) | ((*((__be32 *)tisc) >> 8) & 65280U)) | (*((__be32 *)tisc) >> 24)) & 4293984255U;
    else {
      __u32 tmp_1;
      
#line 1120 
      tmp_1 = __fswab32(*((__be32 *)tisc));
      
#line 1120 
      tmp_2 = tmp_1 & 4293984255U;
    }
    
#line 1120 
    if (0 != 0) 
#line 1120 
                tmp_4 = ((((*((__be32 *)tisc) << 24) | ((*((__be32 *)tisc) << 8) & 16711680U)) | ((*((__be32 *)tisc) >> 8) & 65280U)) | (*((__be32 *)tisc) >> 24)) & 4293984255U;
    else {
      __u32 tmp_3;
      
#line 1120 
      tmp_3 = __fswab32(*((__be32 *)tisc));
      
#line 1120 
      tmp_4 = tmp_3 & 4293984255U;
    }
    
#line 1120 
    if (0 != 0) 
#line 1120 
                tmp_6 = ((((*((__be32 *)tisc) << 24) | ((*((__be32 *)tisc) << 8) & 16711680U)) | ((*((__be32 *)tisc) >> 8) & 65280U)) | (*((__be32 *)tisc) >> 24)) & 4293984255U;
    else {
      __u32 tmp_5;
      
#line 1120 
      tmp_5 = __fswab32(*((__be32 *)tisc));
      
#line 1120 
      tmp_6 = tmp_5 & 4293984255U;
    }
    
#line 1120 
    if (0 != 0) 
#line 1120 
                tmp_8 = ((((*((__be32 *)tisc) << 24) | ((*((__be32 *)tisc) << 8) & 16711680U)) | ((*((__be32 *)tisc) >> 8) & 65280U)) | (*((__be32 *)tisc) >> 24)) & 4293984255U;
    else {
      __u32 tmp_7;
      
#line 1120 
      tmp_7 = __fswab32(*((__be32 *)tisc));
      
#line 1120 
      tmp_8 = tmp_7 & 4293984255U;
    }
    
#line 1120 
    *((__be32 *)tisc) = ((((tmp_2 | (((unsigned int)tc << 16UL) & 983040U)) << 24) | (((tmp_4 | (((unsigned int)tc << 16UL) & 983040U)) << 8) & 16711680U)) | (((tmp_6 | (((unsigned int)tc << 16UL) & 983040U)) >> 8) & 65280U)) | ((tmp_8 | (((unsigned int)tc << 16UL) & 983040U)) >> 24);
  }
  else {
    __u32 tmp_11;
    unsigned int tmp_10;
    
#line 1120 
    if (0 != 0) 
#line 1120 
                tmp_10 = ((((*((__be32 *)tisc) << 24) | ((*((__be32 *)tisc) << 8) & 16711680U)) | ((*((__be32 *)tisc) >> 8) & 65280U)) | (*((__be32 *)tisc) >> 24)) & 4293984255U;
    else {
      __u32 tmp_9;
      
#line 1120 
      tmp_9 = __fswab32(*((__be32 *)tisc));
      
#line 1120 
      tmp_10 = tmp_9 & 4293984255U;
    }
    
#line 1120 
    ;
    
#line 1120 
    tmp_11 = __fswab32(tmp_10 | (((unsigned int)tc << 16UL) & 983040U));
    
#line 1120 
    *((__be32 *)tisc) = tmp_11;
  }
  {
    
#line 1121 
    bool __cond_0 = (_Bool)0;
    
#line 1121 
    if ((int)__cond_0 != 0) 
#line 1121 
                            __compiletime_assert_1121(); else ;
  }
  
#line 1121 
  if (0 != 0) {
    unsigned int tmp_15;
    unsigned int tmp_17;
    unsigned int tmp_19;
    unsigned int tmp_21;
    
#line 1121 
    if (0 != 0) 
#line 1121 
                tmp_15 = ((((*((__be32 *)tisc + 9U) << 24) | ((*((__be32 *)tisc + 9U) << 8) & 16711680U)) | ((*((__be32 *)tisc + 9U) >> 8) & 65280U)) | (*((__be32 *)tisc + 9U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_14;
      
#line 1121 
      tmp_14 = __fswab32(*((__be32 *)tisc + 9U));
      
#line 1121 
      tmp_15 = tmp_14 & 4278190080U;
    }
    
#line 1121 
    if (0 != 0) 
#line 1121 
                tmp_17 = ((((*((__be32 *)tisc + 9U) << 24) | ((*((__be32 *)tisc + 9U) << 8) & 16711680U)) | ((*((__be32 *)tisc + 9U) >> 8) & 65280U)) | (*((__be32 *)tisc + 9U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_16;
      
#line 1121 
      tmp_16 = __fswab32(*((__be32 *)tisc + 9U));
      
#line 1121 
      tmp_17 = tmp_16 & 4278190080U;
    }
    
#line 1121 
    if (0 != 0) 
#line 1121 
                tmp_19 = ((((*((__be32 *)tisc + 9U) << 24) | ((*((__be32 *)tisc + 9U) << 8) & 16711680U)) | ((*((__be32 *)tisc + 9U) >> 8) & 65280U)) | (*((__be32 *)tisc + 9U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_18;
      
#line 1121 
      tmp_18 = __fswab32(*((__be32 *)tisc + 9U));
      
#line 1121 
      tmp_19 = tmp_18 & 4278190080U;
    }
    
#line 1121 
    if (0 != 0) 
#line 1121 
                tmp_21 = ((((*((__be32 *)tisc + 9U) << 24) | ((*((__be32 *)tisc + 9U) << 8) & 16711680U)) | ((*((__be32 *)tisc + 9U) >> 8) & 65280U)) | (*((__be32 *)tisc + 9U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_20;
      
#line 1121 
      tmp_20 = __fswab32(*((__be32 *)tisc + 9U));
      
#line 1121 
      tmp_21 = tmp_20 & 4278190080U;
    }
    
#line 1121 
    *((__be32 *)tisc + 9U) = ((((tmp_15 | (priv->tdn & 16777215U)) << 24) | (((tmp_17 | (priv->tdn & 16777215U)) << 8) & 16711680U)) | (((tmp_19 | (priv->tdn & 16777215U)) >> 8) & 65280U)) | ((tmp_21 | (priv->tdn & 16777215U)) >> 24);
  }
  else {
    __u32 tmp_24;
    unsigned int tmp_23;
    
#line 1121 
    if (0 != 0) 
#line 1121 
                tmp_23 = ((((*((__be32 *)tisc + 9U) << 24) | ((*((__be32 *)tisc + 9U) << 8) & 16711680U)) | ((*((__be32 *)tisc + 9U) >> 8) & 65280U)) | (*((__be32 *)tisc + 9U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_22;
      
#line 1121 
      tmp_22 = __fswab32(*((__be32 *)tisc + 9U));
      
#line 1121 
      tmp_23 = tmp_22 & 4278190080U;
    }
    
#line 1121 
    ;
    
#line 1121 
    tmp_24 = __fswab32(tmp_23 | (priv->tdn & 16777215U));
    
#line 1121 
    *((__be32 *)tisc + 9U) = tmp_24;
  }
  
#line 1123 
  tmp_25 = mlx5_core_create_tis(mdev,(u32 *)(& in),192,& priv->tisn[tc]);
  
#line 1123 
  return tmp_25;
}


#line 1126  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_main.c"
static void mlx5e_close_tis(struct mlx5e_priv *priv, int tc)
{
  
#line 1128 
  mlx5_core_destroy_tis(priv->mdev,priv->tisn[tc]);
  
#line 1129 
  return;
}


#line 1131  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_main.c"
static int mlx5e_open_tises(struct mlx5e_priv *priv)
{
  int __retres;
  int err;
  int tc;
  
#line 1133 
  int num_tc = priv->num_tc;
  
#line 1137 
  tc = 0;
  
#line 1137 
  goto ldv_55514;
  ldv_55513: 
#line 1138 
  ;
  
#line 1138 
  err = mlx5e_open_tis(priv,tc);
  
#line 1139 
  if (err != 0) 
#line 1140 
                goto err_close_tises; else ;
  
#line 1137 
  tc += 1;
  ldv_55514: 
#line 1138 
  ;
  
#line 1137 
  if (tc < num_tc) 
#line 1139 
                   goto ldv_55513; else 
#line 1142 
                                        goto ldv_55515;
  ldv_55515: 
#line 1143 
  ;
  
#line 1143 
  __retres = 0;
  
#line 1143 
  goto return_label;
  err_close_tises: 
#line 1145 
  ;
  
#line 1146 
  tc -= 1;
  
#line 1146 
  goto ldv_55517;
  ldv_55516: 
#line 1147 
  ;
  
#line 1147 
  mlx5e_close_tis(priv,tc);
  
#line 1146 
  tc -= 1;
  ldv_55517: 
#line 1147 
  ;
  
#line 1146 
  if (tc >= 0) 
#line 1148 
               goto ldv_55516; else 
#line 1151 
                                    goto ldv_55518;
  ldv_55518: 
#line 1152 
  ;
  
#line 1149 
  __retres = err;
  return_label: 
#line 1149 
                return __retres;
}


#line 1152  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_main.c"
static void mlx5e_close_tises(struct mlx5e_priv *priv)
{
  int tc;
  
#line 1154 
  int num_tc = priv->num_tc;
  
#line 1157 
  tc = 0;
  
#line 1157 
  goto ldv_55525;
  ldv_55524: 
#line 1158 
  ;
  
#line 1158 
  mlx5e_close_tis(priv,tc);
  
#line 1157 
  tc += 1;
  ldv_55525: 
#line 1158 
  ;
  
#line 1157 
  if (tc < num_tc) 
#line 1159 
                   goto ldv_55524; else 
#line 1162 
                                        goto ldv_55526;
  ldv_55526: 
#line 1163 
  ;
  
#line 1164 
  return;
}


#line 1181 
void __compiletime_assert_1181(void);


#line 1182 
void __compiletime_assert_1182(void);


#line 1187 
void __compiletime_assert_1187(void);


#line 1190 
void __compiletime_assert_1190(void);


#line 1161  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_main.c"
static int mlx5e_open_rqt(struct mlx5e_priv *priv)
{
  int __retres;
  u32 *in;
  u32 out[4U];
  void *rqtc;
  int inlen;
  int err;
  int sz;
  int i;
  
#line 1163 
  struct mlx5_core_dev *mdev = priv->mdev;
  
#line 1172 
  sz = 1 << (int)priv->params.rx_hash_log_tbl_sz;
  
#line 1174 
  inlen = (int)(((unsigned long)sz + 68UL) * (unsigned long)4U);
  
#line 1175 
  in = (u32 *)mlx5_vzalloc_2((unsigned long)inlen);
  
#line 1176 
  if (in == (u32 *)0U) {
    
#line 1177 
    __retres = -12;
    
#line 1177 
    goto return_label;
  }
  else ;
  
#line 1179 
  rqtc = (void *)in + 32U;
  {
    
#line 1181 
    bool __cond = (_Bool)0;
    
#line 1181 
    if ((int)__cond != 0) 
#line 1181 
                          __compiletime_assert_1181(); else ;
  }
  
#line 1181 
  if (0 != 0) {
    unsigned int tmp_3;
    unsigned int tmp_5;
    unsigned int tmp_7;
    unsigned int tmp_9;
    
#line 1181 
    if (0 != 0) 
#line 1181 
                tmp_3 = ((((*((__be32 *)rqtc + 6U) << 24) | ((*((__be32 *)rqtc + 6U) << 8) & 16711680U)) | ((*((__be32 *)rqtc + 6U) >> 8) & 65280U)) | (*((__be32 *)rqtc + 6U) >> 24)) & 4294901760U;
    else {
      __u32 tmp_2;
      
#line 1181 
      tmp_2 = __fswab32(*((__be32 *)rqtc + 6U));
      
#line 1181 
      tmp_3 = tmp_2 & 4294901760U;
    }
    
#line 1181 
    if (0 != 0) 
#line 1181 
                tmp_5 = ((((*((__be32 *)rqtc + 6U) << 24) | ((*((__be32 *)rqtc + 6U) << 8) & 16711680U)) | ((*((__be32 *)rqtc + 6U) >> 8) & 65280U)) | (*((__be32 *)rqtc + 6U) >> 24)) & 4294901760U;
    else {
      __u32 tmp_4;
      
#line 1181 
      tmp_4 = __fswab32(*((__be32 *)rqtc + 6U));
      
#line 1181 
      tmp_5 = tmp_4 & 4294901760U;
    }
    
#line 1181 
    if (0 != 0) 
#line 1181 
                tmp_7 = ((((*((__be32 *)rqtc + 6U) << 24) | ((*((__be32 *)rqtc + 6U) << 8) & 16711680U)) | ((*((__be32 *)rqtc + 6U) >> 8) & 65280U)) | (*((__be32 *)rqtc + 6U) >> 24)) & 4294901760U;
    else {
      __u32 tmp_6;
      
#line 1181 
      tmp_6 = __fswab32(*((__be32 *)rqtc + 6U));
      
#line 1181 
      tmp_7 = tmp_6 & 4294901760U;
    }
    
#line 1181 
    if (0 != 0) 
#line 1181 
                tmp_9 = ((((*((__be32 *)rqtc + 6U) << 24) | ((*((__be32 *)rqtc + 6U) << 8) & 16711680U)) | ((*((__be32 *)rqtc + 6U) >> 8) & 65280U)) | (*((__be32 *)rqtc + 6U) >> 24)) & 4294901760U;
    else {
      __u32 tmp_8;
      
#line 1181 
      tmp_8 = __fswab32(*((__be32 *)rqtc + 6U));
      
#line 1181 
      tmp_9 = tmp_8 & 4294901760U;
    }
    
#line 1181 
    *((__be32 *)rqtc + 6U) = ((((tmp_3 | ((unsigned int)sz & 65535U)) << 24) | (((tmp_5 | ((unsigned int)sz & 65535U)) << 8) & 16711680U)) | (((tmp_7 | ((unsigned int)sz & 65535U)) >> 8) & 65280U)) | ((tmp_9 | ((unsigned int)sz & 65535U)) >> 24);
  }
  else {
    __u32 tmp_12;
    unsigned int tmp_11;
    
#line 1181 
    if (0 != 0) 
#line 1181 
                tmp_11 = ((((*((__be32 *)rqtc + 6U) << 24) | ((*((__be32 *)rqtc + 6U) << 8) & 16711680U)) | ((*((__be32 *)rqtc + 6U) >> 8) & 65280U)) | (*((__be32 *)rqtc + 6U) >> 24)) & 4294901760U;
    else {
      __u32 tmp_10;
      
#line 1181 
      tmp_10 = __fswab32(*((__be32 *)rqtc + 6U));
      
#line 1181 
      tmp_11 = tmp_10 & 4294901760U;
    }
    
#line 1181 
    ;
    
#line 1181 
    tmp_12 = __fswab32(tmp_11 | ((unsigned int)sz & 65535U));
    
#line 1181 
    *((__be32 *)rqtc + 6U) = tmp_12;
  }
  {
    
#line 1182 
    bool __cond_0 = (_Bool)0;
    
#line 1182 
    if ((int)__cond_0 != 0) 
#line 1182 
                            __compiletime_assert_1182(); else ;
  }
  
#line 1182 
  if (0 != 0) {
    unsigned int tmp_16;
    unsigned int tmp_18;
    unsigned int tmp_20;
    unsigned int tmp_22;
    
#line 1182 
    if (0 != 0) 
#line 1182 
                tmp_16 = ((((*((__be32 *)rqtc + 5U) << 24) | ((*((__be32 *)rqtc + 5U) << 8) & 16711680U)) | ((*((__be32 *)rqtc + 5U) >> 8) & 65280U)) | (*((__be32 *)rqtc + 5U) >> 24)) & 4294901760U;
    else {
      __u32 tmp_15;
      
#line 1182 
      tmp_15 = __fswab32(*((__be32 *)rqtc + 5U));
      
#line 1182 
      tmp_16 = tmp_15 & 4294901760U;
    }
    
#line 1182 
    if (0 != 0) 
#line 1182 
                tmp_18 = ((((*((__be32 *)rqtc + 5U) << 24) | ((*((__be32 *)rqtc + 5U) << 8) & 16711680U)) | ((*((__be32 *)rqtc + 5U) >> 8) & 65280U)) | (*((__be32 *)rqtc + 5U) >> 24)) & 4294901760U;
    else {
      __u32 tmp_17;
      
#line 1182 
      tmp_17 = __fswab32(*((__be32 *)rqtc + 5U));
      
#line 1182 
      tmp_18 = tmp_17 & 4294901760U;
    }
    
#line 1182 
    if (0 != 0) 
#line 1182 
                tmp_20 = ((((*((__be32 *)rqtc + 5U) << 24) | ((*((__be32 *)rqtc + 5U) << 8) & 16711680U)) | ((*((__be32 *)rqtc + 5U) >> 8) & 65280U)) | (*((__be32 *)rqtc + 5U) >> 24)) & 4294901760U;
    else {
      __u32 tmp_19;
      
#line 1182 
      tmp_19 = __fswab32(*((__be32 *)rqtc + 5U));
      
#line 1182 
      tmp_20 = tmp_19 & 4294901760U;
    }
    
#line 1182 
    if (0 != 0) 
#line 1182 
                tmp_22 = ((((*((__be32 *)rqtc + 5U) << 24) | ((*((__be32 *)rqtc + 5U) << 8) & 16711680U)) | ((*((__be32 *)rqtc + 5U) >> 8) & 65280U)) | (*((__be32 *)rqtc + 5U) >> 24)) & 4294901760U;
    else {
      __u32 tmp_21;
      
#line 1182 
      tmp_21 = __fswab32(*((__be32 *)rqtc + 5U));
      
#line 1182 
      tmp_22 = tmp_21 & 4294901760U;
    }
    
#line 1182 
    *((__be32 *)rqtc + 5U) = ((((tmp_16 | ((unsigned int)sz & 65535U)) << 24) | (((tmp_18 | ((unsigned int)sz & 65535U)) << 8) & 16711680U)) | (((tmp_20 | ((unsigned int)sz & 65535U)) >> 8) & 65280U)) | ((tmp_22 | ((unsigned int)sz & 65535U)) >> 24);
  }
  else {
    __u32 tmp_25;
    unsigned int tmp_24;
    
#line 1182 
    if (0 != 0) 
#line 1182 
                tmp_24 = ((((*((__be32 *)rqtc + 5U) << 24) | ((*((__be32 *)rqtc + 5U) << 8) & 16711680U)) | ((*((__be32 *)rqtc + 5U) >> 8) & 65280U)) | (*((__be32 *)rqtc + 5U) >> 24)) & 4294901760U;
    else {
      __u32 tmp_23;
      
#line 1182 
      tmp_23 = __fswab32(*((__be32 *)rqtc + 5U));
      
#line 1182 
      tmp_24 = tmp_23 & 4294901760U;
    }
    
#line 1182 
    ;
    
#line 1182 
    tmp_25 = __fswab32(tmp_24 | ((unsigned int)sz & 65535U));
    
#line 1182 
    *((__be32 *)rqtc + 5U) = tmp_25;
  }
  
#line 1184 
  i = 0;
  
#line 1184 
  goto ldv_55552;
  ldv_55551: 
#line 1185 
  ;
  {
    
#line 1185 
    int ix = i % (int)priv->params.num_channels;
    {
      
#line 1187 
      bool __cond_1 = (_Bool)0;
      
#line 1187 
      if ((int)__cond_1 != 0) 
#line 1187 
                              __compiletime_assert_1187(); else ;
    }
    
#line 1187 
    if (0 != 0) {
      unsigned int tmp_29;
      unsigned int tmp_31;
      unsigned int tmp_33;
      unsigned int tmp_35;
      
#line 1187 
      if (0 != 0) 
#line 1187 
                  tmp_29 = (((*((__be32 *)rqtc + (unsigned int)((long)((struct mlx5_ifc_rqtc_bits *)1920 + (unsigned int)i * 32U)) / 32U) << 24) | ((*((__be32 *)rqtc + (unsigned int)((long)((struct mlx5_ifc_rqtc_bits *)1920 + (unsigned int)i * 32U)) / 32U) << 8) & 16711680U)) | ((*((__be32 *)rqtc + (unsigned int)((long)((struct mlx5_ifc_rqtc_bits *)1920 + (unsigned int)i * 32U)) / 32U) >> 8) & 65280U)) | (*((__be32 *)rqtc + (unsigned int)((long)((struct mlx5_ifc_rqtc_bits *)1920 + (unsigned int)i * 32U)) / 32U) >> 24); else 
                                                                    
#line 1187 
                                                                    tmp_29 = __fswab32(*((__be32 *)rqtc + (unsigned int)((long)((struct mlx5_ifc_rqtc_bits *)1920 + (unsigned int)i * 32U)) / 32U));
      
#line 1187 
      if (0 != 0) 
#line 1187 
                  tmp_31 = (((*((__be32 *)rqtc + (unsigned int)((long)((struct mlx5_ifc_rqtc_bits *)1920 + (unsigned int)i * 32U)) / 32U) << 24) | ((*((__be32 *)rqtc + (unsigned int)((long)((struct mlx5_ifc_rqtc_bits *)1920 + (unsigned int)i * 32U)) / 32U) << 8) & 16711680U)) | ((*((__be32 *)rqtc + (unsigned int)((long)((struct mlx5_ifc_rqtc_bits *)1920 + (unsigned int)i * 32U)) / 32U) >> 8) & 65280U)) | (*((__be32 *)rqtc + (unsigned int)((long)((struct mlx5_ifc_rqtc_bits *)1920 + (unsigned int)i * 32U)) / 32U) >> 24); else 
                                                                    
#line 1187 
                                                                    tmp_31 = __fswab32(*((__be32 *)rqtc + (unsigned int)((long)((struct mlx5_ifc_rqtc_bits *)1920 + (unsigned int)i * 32U)) / 32U));
      
#line 1187 
      if (0 != 0) 
#line 1187 
                  tmp_33 = (((*((__be32 *)rqtc + (unsigned int)((long)((struct mlx5_ifc_rqtc_bits *)1920 + (unsigned int)i * 32U)) / 32U) << 24) | ((*((__be32 *)rqtc + (unsigned int)((long)((struct mlx5_ifc_rqtc_bits *)1920 + (unsigned int)i * 32U)) / 32U) << 8) & 16711680U)) | ((*((__be32 *)rqtc + (unsigned int)((long)((struct mlx5_ifc_rqtc_bits *)1920 + (unsigned int)i * 32U)) / 32U) >> 8) & 65280U)) | (*((__be32 *)rqtc + (unsigned int)((long)((struct mlx5_ifc_rqtc_bits *)1920 + (unsigned int)i * 32U)) / 32U) >> 24); else 
                                                                    
#line 1187 
                                                                    tmp_33 = __fswab32(*((__be32 *)rqtc + (unsigned int)((long)((struct mlx5_ifc_rqtc_bits *)1920 + (unsigned int)i * 32U)) / 32U));
      
#line 1187 
      if (0 != 0) 
#line 1187 
                  tmp_35 = (((*((__be32 *)rqtc + (unsigned int)((long)((struct mlx5_ifc_rqtc_bits *)1920 + (unsigned int)i * 32U)) / 32U) << 24) | ((*((__be32 *)rqtc + (unsigned int)((long)((struct mlx5_ifc_rqtc_bits *)1920 + (unsigned int)i * 32U)) / 32U) << 8) & 16711680U)) | ((*((__be32 *)rqtc + (unsigned int)((long)((struct mlx5_ifc_rqtc_bits *)1920 + (unsigned int)i * 32U)) / 32U) >> 8) & 65280U)) | (*((__be32 *)rqtc + (unsigned int)((long)((struct mlx5_ifc_rqtc_bits *)1920 + (unsigned int)i * 32U)) / 32U) >> 24); else 
                                                                    
#line 1187 
                                                                    tmp_35 = __fswab32(*((__be32 *)rqtc + (unsigned int)((long)((struct mlx5_ifc_rqtc_bits *)1920 + (unsigned int)i * 32U)) / 32U));
      
#line 1187 
      *((__be32 *)rqtc + (unsigned int)((long)((struct mlx5_ifc_rqtc_bits *)1920 + (unsigned int)i * 32U)) / 32U) = (((((tmp_29 & ~ (4294967295U << - ((unsigned long)((unsigned int)((long)((struct mlx5_ifc_rqtc_bits *)1920 + (unsigned int)i * 32U))) & 31UL))) | ((*(priv->channel + ix))->rq.rqn << - ((unsigned long)((unsigned int)((long)((struct mlx5_ifc_rqtc_bits *)1920 + (unsigned int)i * 32U))) & 31UL))) << 24) | ((((tmp_31 & ~ (4294967295U << - ((unsigned long)((unsigned int)((long)((struct mlx5_ifc_rqtc_bits *)1920 + (unsigned int)i * 32U))) & 31UL))) | ((*(priv->channel + ix))->rq.rqn << - ((unsigned long)((unsigned int)((long)((struct mlx5_ifc_rqtc_bits *)1920 + (unsigned int)i * 32U))) & 31UL))) << 8) & 16711680U)) | ((((tmp_33 & ~ (4294967295U << - ((unsigned long)((unsigned int)((long)((struct mlx5_ifc_rqtc_bits *)1920 + (unsigned int)i * 32U))) & 31UL))) | ((*(priv->channel + ix))->rq.rqn << - ((unsigned long)((unsigned int)((long)((struct mlx5_ifc_rqtc_bits *)1920 + (unsigned int)i * 32U))) & 31UL))) >> 8) & 65280U)) | (((tmp_35 & ~ (4294967295U << - ((unsigned long)((unsigned int)((long)((struct mlx5_ifc_rqtc_bits *)1920 + (unsigned int)i * 32U))) & 31UL))) | ((*(priv->channel + ix))->rq.rqn << - ((unsigned long)((unsigned int)((long)((struct mlx5_ifc_rqtc_bits *)1920 + (unsigned int)i * 32U))) & 31UL))) >> 24);
    }
    else {
      __u32 tmp_38;
      unsigned int tmp_37;
      
#line 1187 
      if (0 != 0) 
#line 1187 
                  tmp_37 = (((*((__be32 *)rqtc + (unsigned int)((long)((struct mlx5_ifc_rqtc_bits *)1920 + (unsigned int)i * 32U)) / 32U) << 24) | ((*((__be32 *)rqtc + (unsigned int)((long)((struct mlx5_ifc_rqtc_bits *)1920 + (unsigned int)i * 32U)) / 32U) << 8) & 16711680U)) | ((*((__be32 *)rqtc + (unsigned int)((long)((struct mlx5_ifc_rqtc_bits *)1920 + (unsigned int)i * 32U)) / 32U) >> 8) & 65280U)) | (*((__be32 *)rqtc + (unsigned int)((long)((struct mlx5_ifc_rqtc_bits *)1920 + (unsigned int)i * 32U)) / 32U) >> 24); else 
                                                                    
#line 1187 
                                                                    tmp_37 = __fswab32(*((__be32 *)rqtc + (unsigned int)((long)((struct mlx5_ifc_rqtc_bits *)1920 + (unsigned int)i * 32U)) / 32U));
      
#line 1187 
      ;
      
#line 1187 
      tmp_38 = __fswab32((tmp_37 & ~ (4294967295U << - ((unsigned long)((unsigned int)((long)((struct mlx5_ifc_rqtc_bits *)1920 + (unsigned int)i * 32U))) & 31UL))) | ((*(priv->channel + ix))->rq.rqn << - ((unsigned long)((unsigned int)((long)((struct mlx5_ifc_rqtc_bits *)1920 + (unsigned int)i * 32U))) & 31UL)));
      
#line 1187 
      *((__be32 *)rqtc + (unsigned int)((long)((struct mlx5_ifc_rqtc_bits *)1920 + (unsigned int)i * 32U)) / 32U) = tmp_38;
    }
  }
  
#line 1184 
  i += 1;
  ldv_55552: 
#line 1185 
  ;
  
#line 1184 
  if (i < sz) 
#line 1186 
              goto ldv_55551; else 
#line 1189 
                                   goto ldv_55553;
  ldv_55553: 
#line 1190 
  ;
  {
    
#line 1190 
    bool __cond_2 = (_Bool)0;
    
#line 1190 
    if ((int)__cond_2 != 0) 
#line 1190 
                            __compiletime_assert_1190(); else ;
  }
  
#line 1190 
  if (0 != 0) {
    unsigned int tmp_42;
    unsigned int tmp_44;
    
#line 1190 
    if (0 != 0) 
#line 1190 
                tmp_42 = ((((*in << 24) | ((*in << 8) & 16711680U)) | ((*in >> 8) & 65280U)) | (*in >> 24)) << 24;
    else {
      __u32 tmp_41;
      
#line 1190 
      tmp_41 = __fswab32(*in);
      
#line 1190 
      tmp_42 = tmp_41 << 24;
    }
    
#line 1190 
    if (0 != 0) 
#line 1190 
                tmp_44 = (((((*in << 24) | ((*in << 8) & 16711680U)) | ((*in >> 8) & 65280U)) | (*in >> 24)) << 8) & 16711680U;
    else {
      __u32 tmp_43;
      
#line 1190 
      tmp_43 = __fswab32(*in);
      
#line 1190 
      tmp_44 = (tmp_43 << 8) & 16711680U;
    }
    
#line 1190 
    *in = (tmp_42 | tmp_44) | 5641U;
  }
  else {
    __u32 tmp_47;
    unsigned int tmp_46;
    
#line 1190 
    if (0 != 0) 
#line 1190 
                tmp_46 = (((((*in << 24) | ((*in << 8) & 16711680U)) | ((*in >> 8) & 65280U)) | (*in >> 24)) & 65535U) | 152436736U;
    else {
      __u32 tmp_45;
      
#line 1190 
      tmp_45 = __fswab32(*in);
      
#line 1190 
      tmp_46 = (tmp_45 & 65535U) | 152436736U;
    }
    
#line 1190 
    tmp_47 = __fswab32(tmp_46);
    
#line 1190 
    *in = tmp_47;
  }
  
#line 1192 
  memset((void *)(& out),0,16UL);
  
#line 1193 
  err = mlx5_cmd_exec_check_status(mdev,in,inlen,(u32 *)(& out),16);
  
#line 1194 
  if (err == 0) 
    
#line 1195 
    if (0 != 0) 
#line 1195 
                priv->rqtn = ((((*((__be32 *)(& out) + 2U) << 24) | ((*((__be32 *)(& out) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& out) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& out) + 2U) >> 24)) & 16777215U;
    else {
      __u32 tmp_48;
      
#line 1195 
      tmp_48 = __fswab32(*((__be32 *)(& out) + 2U));
      
#line 1195 
      priv->rqtn = tmp_48 & 16777215U;
    }
  else ;
  
#line 1197 
  kvfree((void const *)in);
  
#line 1199 
  __retres = err;
  return_label: 
#line 1199 
                return __retres;
}


#line 1209 
void __compiletime_assert_1209(void);


#line 1210 
void __compiletime_assert_1210(void);


#line 1202  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_main.c"
static void mlx5e_close_rqt(struct mlx5e_priv *priv)
{
  u32 in[4U];
  u32 out[4U];
  
#line 1207 
  memset((void *)(& in),0,16UL);
  {
    
#line 1209 
    bool __cond = (_Bool)0;
    
#line 1209 
    if ((int)__cond != 0) 
#line 1209 
                          __compiletime_assert_1209(); else ;
  }
  
#line 1209 
  if (0 != 0) {
    unsigned int tmp_2;
    unsigned int tmp_4;
    
#line 1209 
    if (0 != 0) 
#line 1209 
                tmp_2 = ((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) << 24;
    else {
      __u32 tmp_1;
      
#line 1209 
      tmp_1 = __fswab32(*((__be32 *)(& in)));
      
#line 1209 
      tmp_2 = tmp_1 << 24;
    }
    
#line 1209 
    if (0 != 0) 
#line 1209 
                tmp_4 = (((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) << 8) & 16711680U;
    else {
      __u32 tmp_3;
      
#line 1209 
      tmp_3 = __fswab32(*((__be32 *)(& in)));
      
#line 1209 
      tmp_4 = (tmp_3 << 8) & 16711680U;
    }
    
#line 1209 
    *((__be32 *)(& in)) = (tmp_2 | tmp_4) | 6153U;
  }
  else {
    __u32 tmp_7;
    unsigned int tmp_6;
    
#line 1209 
    if (0 != 0) 
#line 1209 
                tmp_6 = (((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) & 65535U) | 152567808U;
    else {
      __u32 tmp_5;
      
#line 1209 
      tmp_5 = __fswab32(*((__be32 *)(& in)));
      
#line 1209 
      tmp_6 = (tmp_5 & 65535U) | 152567808U;
    }
    
#line 1209 
    tmp_7 = __fswab32(tmp_6);
    
#line 1209 
    *((__be32 *)(& in)) = tmp_7;
  }
  {
    
#line 1210 
    bool __cond_0 = (_Bool)0;
    
#line 1210 
    if ((int)__cond_0 != 0) 
#line 1210 
                            __compiletime_assert_1210(); else ;
  }
  
#line 1210 
  if (0 != 0) {
    unsigned int tmp_11;
    unsigned int tmp_13;
    unsigned int tmp_15;
    unsigned int tmp_17;
    
#line 1210 
    if (0 != 0) 
#line 1210 
                tmp_11 = ((((*((__be32 *)(& in) + 2U) << 24) | ((*((__be32 *)(& in) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_10;
      
#line 1210 
      tmp_10 = __fswab32(*((__be32 *)(& in) + 2U));
      
#line 1210 
      tmp_11 = tmp_10 & 4278190080U;
    }
    
#line 1210 
    if (0 != 0) 
#line 1210 
                tmp_13 = ((((*((__be32 *)(& in) + 2U) << 24) | ((*((__be32 *)(& in) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_12;
      
#line 1210 
      tmp_12 = __fswab32(*((__be32 *)(& in) + 2U));
      
#line 1210 
      tmp_13 = tmp_12 & 4278190080U;
    }
    
#line 1210 
    if (0 != 0) 
#line 1210 
                tmp_15 = ((((*((__be32 *)(& in) + 2U) << 24) | ((*((__be32 *)(& in) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_14;
      
#line 1210 
      tmp_14 = __fswab32(*((__be32 *)(& in) + 2U));
      
#line 1210 
      tmp_15 = tmp_14 & 4278190080U;
    }
    
#line 1210 
    if (0 != 0) 
#line 1210 
                tmp_17 = ((((*((__be32 *)(& in) + 2U) << 24) | ((*((__be32 *)(& in) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_16;
      
#line 1210 
      tmp_16 = __fswab32(*((__be32 *)(& in) + 2U));
      
#line 1210 
      tmp_17 = tmp_16 & 4278190080U;
    }
    
#line 1210 
    *((__be32 *)(& in) + 2U) = ((((tmp_11 | (priv->rqtn & 16777215U)) << 24) | (((tmp_13 | (priv->rqtn & 16777215U)) << 8) & 16711680U)) | (((tmp_15 | (priv->rqtn & 16777215U)) >> 8) & 65280U)) | ((tmp_17 | (priv->rqtn & 16777215U)) >> 24);
  }
  else {
    __u32 tmp_20;
    unsigned int tmp_19;
    
#line 1210 
    if (0 != 0) 
#line 1210 
                tmp_19 = ((((*((__be32 *)(& in) + 2U) << 24) | ((*((__be32 *)(& in) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_18;
      
#line 1210 
      tmp_18 = __fswab32(*((__be32 *)(& in) + 2U));
      
#line 1210 
      tmp_19 = tmp_18 & 4278190080U;
    }
    
#line 1210 
    ;
    
#line 1210 
    tmp_20 = __fswab32(tmp_19 | (priv->rqtn & 16777215U));
    
#line 1210 
    *((__be32 *)(& in) + 2U) = tmp_20;
  }
  
#line 1212 
  mlx5_cmd_exec_check_status(priv->mdev,(u32 *)(& in),16,(u32 *)(& out),16);
  
#line 1213 
  return;
}


#line 1220 
void __compiletime_assert_1220(void);


#line 1233 
void __compiletime_assert_1235(void);


#line 1236 
void __compiletime_assert_1238(void);


#line 1239 
void __compiletime_assert_1241(void);


#line 1246 
void __compiletime_assert_1247(void);


#line 1248 
void __compiletime_assert_1249(void);


#line 1252 
void __compiletime_assert_1253(void);


#line 1254 
void __compiletime_assert_1255(void);


#line 1256 
void __compiletime_assert_1257(void);


#line 1258 
void __compiletime_assert_1258(void);


#line 1268 
void __compiletime_assert_1269(void);


#line 1270 
void __compiletime_assert_1271(void);


#line 1272 
void __compiletime_assert_1273(void);


#line 1277 
void __compiletime_assert_1278(void);


#line 1279 
void __compiletime_assert_1280(void);


#line 1281 
void __compiletime_assert_1282(void);


#line 1286 
void __compiletime_assert_1287(void);


#line 1288 
void __compiletime_assert_1289(void);


#line 1290 
void __compiletime_assert_1291(void);


#line 1295 
void __compiletime_assert_1296(void);


#line 1297 
void __compiletime_assert_1298(void);


#line 1299 
void __compiletime_assert_1300(void);


#line 1304 
void __compiletime_assert_1305(void);


#line 1306 
void __compiletime_assert_1307(void);


#line 1311 
void __compiletime_assert_1312(void);


#line 1313 
void __compiletime_assert_1314(void);


#line 1216  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_main.c"
static void mlx5e_build_tir_ctx(struct mlx5e_priv *priv, u32 *tirc, int tt)
{
  
#line 1218 
  void *hfso = (void *)tirc + 80U;
  {
    
#line 1220 
    bool __cond = (_Bool)0;
    
#line 1220 
    if ((int)__cond != 0) 
#line 1220 
                          __compiletime_assert_1220(); else ;
  }
  
#line 1220 
  if (0 != 0) {
    unsigned int tmp_2;
    unsigned int tmp_4;
    unsigned int tmp_6;
    unsigned int tmp_8;
    
#line 1220 
    if (0 != 0) 
#line 1220 
                tmp_2 = ((((*(tirc + 9U) << 24) | ((*(tirc + 9U) << 8) & 16711680U)) | ((*(tirc + 9U) >> 8) & 65280U)) | (*(tirc + 9U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_1;
      
#line 1220 
      tmp_1 = __fswab32(*(tirc + 9U));
      
#line 1220 
      tmp_2 = tmp_1 & 4278190080U;
    }
    
#line 1220 
    if (0 != 0) 
#line 1220 
                tmp_4 = ((((*(tirc + 9U) << 24) | ((*(tirc + 9U) << 8) & 16711680U)) | ((*(tirc + 9U) >> 8) & 65280U)) | (*(tirc + 9U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_3;
      
#line 1220 
      tmp_3 = __fswab32(*(tirc + 9U));
      
#line 1220 
      tmp_4 = tmp_3 & 4278190080U;
    }
    
#line 1220 
    if (0 != 0) 
#line 1220 
                tmp_6 = ((((*(tirc + 9U) << 24) | ((*(tirc + 9U) << 8) & 16711680U)) | ((*(tirc + 9U) >> 8) & 65280U)) | (*(tirc + 9U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_5;
      
#line 1220 
      tmp_5 = __fswab32(*(tirc + 9U));
      
#line 1220 
      tmp_6 = tmp_5 & 4278190080U;
    }
    
#line 1220 
    if (0 != 0) 
#line 1220 
                tmp_8 = ((((*(tirc + 9U) << 24) | ((*(tirc + 9U) << 8) & 16711680U)) | ((*(tirc + 9U) >> 8) & 65280U)) | (*(tirc + 9U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_7;
      
#line 1220 
      tmp_7 = __fswab32(*(tirc + 9U));
      
#line 1220 
      tmp_8 = tmp_7 & 4278190080U;
    }
    
#line 1220 
    *(tirc + 9U) = ((((tmp_2 | (priv->tdn & 16777215U)) << 24) | (((tmp_4 | (priv->tdn & 16777215U)) << 8) & 16711680U)) | (((tmp_6 | (priv->tdn & 16777215U)) >> 8) & 65280U)) | ((tmp_8 | (priv->tdn & 16777215U)) >> 24);
  }
  else {
    __u32 tmp_11;
    unsigned int tmp_10;
    
#line 1220 
    if (0 != 0) 
#line 1220 
                tmp_10 = ((((*(tirc + 9U) << 24) | ((*(tirc + 9U) << 8) & 16711680U)) | ((*(tirc + 9U) >> 8) & 65280U)) | (*(tirc + 9U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_9;
      
#line 1220 
      tmp_9 = __fswab32(*(tirc + 9U));
      
#line 1220 
      tmp_10 = tmp_9 & 4278190080U;
    }
    
#line 1220 
    ;
    
#line 1220 
    tmp_11 = __fswab32(tmp_10 | (priv->tdn & 16777215U));
    
#line 1220 
    *(tirc + 9U) = tmp_11;
  }
  
#line 1232 
  if ((int)priv->params.lro_en != 0) {
    {
      
#line 1233 
      bool __cond_0 = (_Bool)0;
      
#line 1233 
      if ((int)__cond_0 != 0) 
#line 1233 
                              __compiletime_assert_1235(); else ;
    }
    
#line 1233 
    if (0 != 0) {
      unsigned int tmp_15;
      unsigned int tmp_17;
      unsigned int tmp_19;
      unsigned int tmp_21;
      
#line 1233 
      if (0 != 0) 
#line 1233 
                  tmp_15 = ((((*(tirc + 4U) << 24) | ((*(tirc + 4U) << 8) & 16711680U)) | ((*(tirc + 4U) >> 8) & 65280U)) | (*(tirc + 4U) >> 24)) << 24;
      else {
        __u32 tmp_14;
        
#line 1233 
        tmp_14 = __fswab32(*(tirc + 4U));
        
#line 1233 
        tmp_15 = tmp_14 << 24;
      }
      
#line 1233 
      if (0 != 0) 
#line 1233 
                  tmp_17 = ((((((*(tirc + 4U) << 24) | ((*(tirc + 4U) << 8) & 16711680U)) | ((*(tirc + 4U) >> 8) & 65280U)) | (*(tirc + 4U) >> 24)) << 8) & 15728640U) | 196608U;
      else {
        __u32 tmp_16;
        
#line 1233 
        tmp_16 = __fswab32(*(tirc + 4U));
        
#line 1233 
        tmp_17 = ((tmp_16 << 8) & 15728640U) | 196608U;
      }
      
#line 1233 
      if (0 != 0) 
#line 1233 
                  tmp_19 = (((((*(tirc + 4U) << 24) | ((*(tirc + 4U) << 8) & 16711680U)) | ((*(tirc + 4U) >> 8) & 65280U)) | (*(tirc + 4U) >> 24)) >> 8) & 65280U;
      else {
        __u32 tmp_18;
        
#line 1233 
        tmp_18 = __fswab32(*(tirc + 4U));
        
#line 1233 
        tmp_19 = (tmp_18 >> 8) & 65280U;
      }
      
#line 1233 
      if (0 != 0) 
#line 1233 
                  tmp_21 = ((((*(tirc + 4U) << 24) | ((*(tirc + 4U) << 8) & 16711680U)) | ((*(tirc + 4U) >> 8) & 65280U)) | (*(tirc + 4U) >> 24)) >> 24;
      else {
        __u32 tmp_20;
        
#line 1233 
        tmp_20 = __fswab32(*(tirc + 4U));
        
#line 1233 
        tmp_21 = tmp_20 >> 24;
      }
      
#line 1233 
      *(tirc + 4U) = ((tmp_15 | tmp_17) | tmp_19) | tmp_21;
    }
    else {
      __u32 tmp_24;
      unsigned int tmp_23;
      
#line 1233 
      if (0 != 0) 
#line 1233 
                  tmp_23 = (((((*(tirc + 4U) << 24) | ((*(tirc + 4U) << 8) & 16711680U)) | ((*(tirc + 4U) >> 8) & 65280U)) | (*(tirc + 4U) >> 24)) & 4294963455U) | 768U;
      else {
        __u32 tmp_22;
        
#line 1233 
        tmp_22 = __fswab32(*(tirc + 4U));
        
#line 1233 
        tmp_23 = (tmp_22 & 4294963455U) | 768U;
      }
      
#line 1233 
      tmp_24 = __fswab32(tmp_23);
      
#line 1233 
      *(tirc + 4U) = tmp_24;
    }
    {
      
#line 1236 
      bool __cond_1 = (_Bool)0;
      
#line 1236 
      if ((int)__cond_1 != 0) 
#line 1236 
                              __compiletime_assert_1238(); else ;
    }
    
#line 1236 
    if (0 != 0) {
      unsigned int tmp_28;
      unsigned int tmp_30;
      unsigned int tmp_32;
      unsigned int tmp_34;
      
#line 1236 
      if (0 != 0) 
#line 1236 
                  tmp_28 = ((((*(tirc + 4U) << 24) | ((*(tirc + 4U) << 8) & 16711680U)) | ((*(tirc + 4U) >> 8) & 65280U)) | (*(tirc + 4U) >> 24)) & 4294967040U;
      else {
        __u32 tmp_27;
        
#line 1236 
        tmp_27 = __fswab32(*(tirc + 4U));
        
#line 1236 
        tmp_28 = tmp_27 & 4294967040U;
      }
      
#line 1236 
      if (0 != 0) 
#line 1236 
                  tmp_30 = ((((*(tirc + 4U) << 24) | ((*(tirc + 4U) << 8) & 16711680U)) | ((*(tirc + 4U) >> 8) & 65280U)) | (*(tirc + 4U) >> 24)) & 4294967040U;
      else {
        __u32 tmp_29;
        
#line 1236 
        tmp_29 = __fswab32(*(tirc + 4U));
        
#line 1236 
        tmp_30 = tmp_29 & 4294967040U;
      }
      
#line 1236 
      if (0 != 0) 
#line 1236 
                  tmp_32 = ((((*(tirc + 4U) << 24) | ((*(tirc + 4U) << 8) & 16711680U)) | ((*(tirc + 4U) >> 8) & 65280U)) | (*(tirc + 4U) >> 24)) & 4294967040U;
      else {
        __u32 tmp_31;
        
#line 1236 
        tmp_31 = __fswab32(*(tirc + 4U));
        
#line 1236 
        tmp_32 = tmp_31 & 4294967040U;
      }
      
#line 1236 
      if (0 != 0) 
#line 1236 
                  tmp_34 = ((((*(tirc + 4U) << 24) | ((*(tirc + 4U) << 8) & 16711680U)) | ((*(tirc + 4U) >> 8) & 65280U)) | (*(tirc + 4U) >> 24)) & 4294967040U;
      else {
        __u32 tmp_33;
        
#line 1236 
        tmp_33 = __fswab32(*(tirc + 4U));
        
#line 1236 
        tmp_34 = tmp_33 & 4294967040U;
      }
      
#line 1236 
      *(tirc + 4U) = ((((tmp_28 | (((priv->params.lro_wqe_sz + 4294967040U) >> 8) & 255U)) << 24) | (((tmp_30 | (((priv->params.lro_wqe_sz + 4294967040U) >> 8) & 255U)) << 8) & 16711680U)) | (((tmp_32 | (((priv->params.lro_wqe_sz + 4294967040U) >> 8) & 255U)) >> 8) & 65280U)) | ((tmp_34 | (((priv->params.lro_wqe_sz + 4294967040U) >> 8) & 255U)) >> 24);
    }
    else {
      __u32 tmp_37;
      unsigned int tmp_36;
      
#line 1236 
      if (0 != 0) 
#line 1236 
                  tmp_36 = ((((*(tirc + 4U) << 24) | ((*(tirc + 4U) << 8) & 16711680U)) | ((*(tirc + 4U) >> 8) & 65280U)) | (*(tirc + 4U) >> 24)) & 4294967040U;
      else {
        __u32 tmp_35;
        
#line 1236 
        tmp_35 = __fswab32(*(tirc + 4U));
        
#line 1236 
        tmp_36 = tmp_35 & 4294967040U;
      }
      
#line 1236 
      ;
      
#line 1236 
      tmp_37 = __fswab32(tmp_36 | (((priv->params.lro_wqe_sz + 4294967040U) >> 8) & 255U));
      
#line 1236 
      *(tirc + 4U) = tmp_37;
    }
    {
      
#line 1239 
      bool __cond_2 = (_Bool)0;
      
#line 1239 
      if ((int)__cond_2 != 0) 
#line 1239 
                              __compiletime_assert_1241(); else ;
    }
    
#line 1239 
    if (0 != 0) {
      unsigned int tmp_43;
      unsigned int tmp_45;
      unsigned int tmp_47;
      unsigned int tmp_49;
      unsigned int tmp_51;
      unsigned int tmp_53;
      unsigned int tmp_55;
      unsigned int tmp_57;
      
#line 1239 
      if (0 != 0) 
#line 1239 
                  tmp_43 = ((((*(tirc + 4U) << 24) | ((*(tirc + 4U) << 8) & 16711680U)) | ((*(tirc + 4U) >> 8) & 65280U)) | (*(tirc + 4U) >> 24)) & 4026535935U;
      else {
        __u32 tmp_42;
        
#line 1239 
        tmp_42 = __fswab32(*(tirc + 4U));
        
#line 1239 
        tmp_43 = tmp_42 & 4026535935U;
      }
      
#line 1239 
      if (0 != 0) 
#line 1239 
                  tmp_45 = (((((*((__be32 *)(& (priv->mdev)->hca_caps_cur[1]) + 15U) << 24) | ((*((__be32 *)(& (priv->mdev)->hca_caps_cur[1]) + 15U) << 8) & 16711680U)) | ((*((__be32 *)(& (priv->mdev)->hca_caps_cur[1]) + 15U) >> 8) & 65280U)) | (*((__be32 *)(& (priv->mdev)->hca_caps_cur[1]) + 15U) >> 24)) << 12UL) & 268431360U;
      else {
        __u32 tmp_44;
        
#line 1239 
        tmp_44 = __fswab32(*((__be32 *)(& (priv->mdev)->hca_caps_cur[1]) + 15U));
        
#line 1239 
        tmp_45 = (tmp_44 << 12UL) & 268431360U;
      }
      
#line 1239 
      if (0 != 0) 
#line 1239 
                  tmp_47 = ((((*(tirc + 4U) << 24) | ((*(tirc + 4U) << 8) & 16711680U)) | ((*(tirc + 4U) >> 8) & 65280U)) | (*(tirc + 4U) >> 24)) & 4026535935U;
      else {
        __u32 tmp_46;
        
#line 1239 
        tmp_46 = __fswab32(*(tirc + 4U));
        
#line 1239 
        tmp_47 = tmp_46 & 4026535935U;
      }
      
#line 1239 
      if (0 != 0) 
#line 1239 
                  tmp_49 = (((((*((__be32 *)(& (priv->mdev)->hca_caps_cur[1]) + 15U) << 24) | ((*((__be32 *)(& (priv->mdev)->hca_caps_cur[1]) + 15U) << 8) & 16711680U)) | ((*((__be32 *)(& (priv->mdev)->hca_caps_cur[1]) + 15U) >> 8) & 65280U)) | (*((__be32 *)(& (priv->mdev)->hca_caps_cur[1]) + 15U) >> 24)) << 12UL) & 268431360U;
      else {
        __u32 tmp_48;
        
#line 1239 
        tmp_48 = __fswab32(*((__be32 *)(& (priv->mdev)->hca_caps_cur[1]) + 15U));
        
#line 1239 
        tmp_49 = (tmp_48 << 12UL) & 268431360U;
      }
      
#line 1239 
      if (0 != 0) 
#line 1239 
                  tmp_51 = ((((*(tirc + 4U) << 24) | ((*(tirc + 4U) << 8) & 16711680U)) | ((*(tirc + 4U) >> 8) & 65280U)) | (*(tirc + 4U) >> 24)) & 4026535935U;
      else {
        __u32 tmp_50;
        
#line 1239 
        tmp_50 = __fswab32(*(tirc + 4U));
        
#line 1239 
        tmp_51 = tmp_50 & 4026535935U;
      }
      
#line 1239 
      if (0 != 0) 
#line 1239 
                  tmp_53 = (((((*((__be32 *)(& (priv->mdev)->hca_caps_cur[1]) + 15U) << 24) | ((*((__be32 *)(& (priv->mdev)->hca_caps_cur[1]) + 15U) << 8) & 16711680U)) | ((*((__be32 *)(& (priv->mdev)->hca_caps_cur[1]) + 15U) >> 8) & 65280U)) | (*((__be32 *)(& (priv->mdev)->hca_caps_cur[1]) + 15U) >> 24)) << 12UL) & 268431360U;
      else {
        __u32 tmp_52;
        
#line 1239 
        tmp_52 = __fswab32(*((__be32 *)(& (priv->mdev)->hca_caps_cur[1]) + 15U));
        
#line 1239 
        tmp_53 = (tmp_52 << 12UL) & 268431360U;
      }
      
#line 1239 
      if (0 != 0) 
#line 1239 
                  tmp_55 = ((((*(tirc + 4U) << 24) | ((*(tirc + 4U) << 8) & 16711680U)) | ((*(tirc + 4U) >> 8) & 65280U)) | (*(tirc + 4U) >> 24)) & 4026535935U;
      else {
        __u32 tmp_54;
        
#line 1239 
        tmp_54 = __fswab32(*(tirc + 4U));
        
#line 1239 
        tmp_55 = tmp_54 & 4026535935U;
      }
      
#line 1239 
      if (0 != 0) 
#line 1239 
                  tmp_57 = (((((*((__be32 *)(& (priv->mdev)->hca_caps_cur[1]) + 15U) << 24) | ((*((__be32 *)(& (priv->mdev)->hca_caps_cur[1]) + 15U) << 8) & 16711680U)) | ((*((__be32 *)(& (priv->mdev)->hca_caps_cur[1]) + 15U) >> 8) & 65280U)) | (*((__be32 *)(& (priv->mdev)->hca_caps_cur[1]) + 15U) >> 24)) << 12UL) & 268431360U;
      else {
        __u32 tmp_56;
        
#line 1239 
        tmp_56 = __fswab32(*((__be32 *)(& (priv->mdev)->hca_caps_cur[1]) + 15U));
        
#line 1239 
        tmp_57 = (tmp_56 << 12UL) & 268431360U;
      }
      
#line 1239 
      *(tirc + 4U) = ((((tmp_43 | tmp_45) << 24) | (((tmp_47 | tmp_49) << 8) & 16711680U)) | (((tmp_51 | tmp_53) >> 8) & 65280U)) | ((tmp_55 | tmp_57) >> 24);
    }
    else {
      __u32 tmp_62;
      unsigned int tmp_59;
      unsigned int tmp_61;
      
#line 1239 
      if (0 != 0) 
#line 1239 
                  tmp_59 = ((((*(tirc + 4U) << 24) | ((*(tirc + 4U) << 8) & 16711680U)) | ((*(tirc + 4U) >> 8) & 65280U)) | (*(tirc + 4U) >> 24)) & 4026535935U;
      else {
        __u32 tmp_58;
        
#line 1239 
        tmp_58 = __fswab32(*(tirc + 4U));
        
#line 1239 
        tmp_59 = tmp_58 & 4026535935U;
      }
      
#line 1239 
      if (0 != 0) 
#line 1239 
                  tmp_61 = (((((*((__be32 *)(& (priv->mdev)->hca_caps_cur[1]) + 15U) << 24) | ((*((__be32 *)(& (priv->mdev)->hca_caps_cur[1]) + 15U) << 8) & 16711680U)) | ((*((__be32 *)(& (priv->mdev)->hca_caps_cur[1]) + 15U) >> 8) & 65280U)) | (*((__be32 *)(& (priv->mdev)->hca_caps_cur[1]) + 15U) >> 24)) << 12UL) & 268431360U;
      else {
        __u32 tmp_60;
        
#line 1239 
        tmp_60 = __fswab32(*((__be32 *)(& (priv->mdev)->hca_caps_cur[1]) + 15U));
        
#line 1239 
        tmp_61 = (tmp_60 << 12UL) & 268431360U;
      }
      
#line 1239 
      tmp_62 = __fswab32(tmp_59 | tmp_61);
      
#line 1239 
      *(tirc + 4U) = tmp_62;
    }
  }
  else ;
  
#line 1244 
  switch (tt) {
    case 6: 
#line 1245 
    ;
    {
      
#line 1246 
      bool __cond_3 = (_Bool)0;
      
#line 1246 
      if ((int)__cond_3 != 0) 
#line 1246 
                              __compiletime_assert_1247(); else ;
    }
    
#line 1246 
    if (0 != 0) {
      unsigned int tmp_66;
      unsigned int tmp_68;
      unsigned int tmp_70;
      unsigned int tmp_72;
      
#line 1246 
      if (0 != 0) 
#line 1246 
                  tmp_66 = ((((*(tirc + 1U) << 24) | ((*(tirc + 1U) << 8) & 16711680U)) | ((*(tirc + 1U) >> 8) & 65280U)) | (*(tirc + 1U) >> 24)) << 24;
      else {
        __u32 tmp_65;
        
#line 1246 
        tmp_65 = __fswab32(*(tirc + 1U));
        
#line 1246 
        tmp_66 = tmp_65 << 24;
      }
      
#line 1246 
      if (0 != 0) 
#line 1246 
                  tmp_68 = (((((*(tirc + 1U) << 24) | ((*(tirc + 1U) << 8) & 16711680U)) | ((*(tirc + 1U) >> 8) & 65280U)) | (*(tirc + 1U) >> 24)) << 8) & 16711680U;
      else {
        __u32 tmp_67;
        
#line 1246 
        tmp_67 = __fswab32(*(tirc + 1U));
        
#line 1246 
        tmp_68 = (tmp_67 << 8) & 16711680U;
      }
      
#line 1246 
      if (0 != 0) 
#line 1246 
                  tmp_70 = (((((*(tirc + 1U) << 24) | ((*(tirc + 1U) << 8) & 16711680U)) | ((*(tirc + 1U) >> 8) & 65280U)) | (*(tirc + 1U) >> 24)) >> 8) & 65280U;
      else {
        __u32 tmp_69;
        
#line 1246 
        tmp_69 = __fswab32(*(tirc + 1U));
        
#line 1246 
        tmp_70 = (tmp_69 >> 8) & 65280U;
      }
      
#line 1246 
      if (0 != 0) 
#line 1246 
                  tmp_72 = (((((*(tirc + 1U) << 24) | ((*(tirc + 1U) << 8) & 16711680U)) | ((*(tirc + 1U) >> 8) & 65280U)) | (*(tirc + 1U) >> 24)) >> 24) & 15U;
      else {
        __u32 tmp_71;
        
#line 1246 
        tmp_71 = __fswab32(*(tirc + 1U));
        
#line 1246 
        tmp_72 = (tmp_71 >> 24) & 15U;
      }
      
#line 1246 
      *(tirc + 1U) = ((tmp_66 | tmp_68) | tmp_70) | tmp_72;
    }
    else {
      __u32 tmp_75;
      unsigned int tmp_74;
      
#line 1246 
      if (0 != 0) 
#line 1246 
                  tmp_74 = ((((*(tirc + 1U) << 24) | ((*(tirc + 1U) << 8) & 16711680U)) | ((*(tirc + 1U) >> 8) & 65280U)) | (*(tirc + 1U) >> 24)) & 268435455U;
      else {
        __u32 tmp_73;
        
#line 1246 
        tmp_73 = __fswab32(*(tirc + 1U));
        
#line 1246 
        tmp_74 = tmp_73 & 268435455U;
      }
      
#line 1246 
      tmp_75 = __fswab32(tmp_74);
      
#line 1246 
      *(tirc + 1U) = tmp_75;
    }
    {
      
#line 1248 
      bool __cond_4 = (_Bool)0;
      
#line 1248 
      if ((int)__cond_4 != 0) 
#line 1248 
                              __compiletime_assert_1249(); else ;
    }
    
#line 1248 
    if (0 != 0) {
      unsigned int tmp_79;
      unsigned int tmp_81;
      unsigned int tmp_83;
      unsigned int tmp_85;
      
#line 1248 
      if (0 != 0) 
#line 1248 
                  tmp_79 = ((((*(tirc + 7U) << 24) | ((*(tirc + 7U) << 8) & 16711680U)) | ((*(tirc + 7U) >> 8) & 65280U)) | (*(tirc + 7U) >> 24)) & 4278190080U;
      else {
        __u32 tmp_78;
        
#line 1248 
        tmp_78 = __fswab32(*(tirc + 7U));
        
#line 1248 
        tmp_79 = tmp_78 & 4278190080U;
      }
      
#line 1248 
      if (0 != 0) 
#line 1248 
                  tmp_81 = ((((*(tirc + 7U) << 24) | ((*(tirc + 7U) << 8) & 16711680U)) | ((*(tirc + 7U) >> 8) & 65280U)) | (*(tirc + 7U) >> 24)) & 4278190080U;
      else {
        __u32 tmp_80;
        
#line 1248 
        tmp_80 = __fswab32(*(tirc + 7U));
        
#line 1248 
        tmp_81 = tmp_80 & 4278190080U;
      }
      
#line 1248 
      if (0 != 0) 
#line 1248 
                  tmp_83 = ((((*(tirc + 7U) << 24) | ((*(tirc + 7U) << 8) & 16711680U)) | ((*(tirc + 7U) >> 8) & 65280U)) | (*(tirc + 7U) >> 24)) & 4278190080U;
      else {
        __u32 tmp_82;
        
#line 1248 
        tmp_82 = __fswab32(*(tirc + 7U));
        
#line 1248 
        tmp_83 = tmp_82 & 4278190080U;
      }
      
#line 1248 
      if (0 != 0) 
#line 1248 
                  tmp_85 = ((((*(tirc + 7U) << 24) | ((*(tirc + 7U) << 8) & 16711680U)) | ((*(tirc + 7U) >> 8) & 65280U)) | (*(tirc + 7U) >> 24)) & 4278190080U;
      else {
        __u32 tmp_84;
        
#line 1248 
        tmp_84 = __fswab32(*(tirc + 7U));
        
#line 1248 
        tmp_85 = tmp_84 & 4278190080U;
      }
      
#line 1248 
      *(tirc + 7U) = ((((tmp_79 | ((*(priv->channel))->rq.rqn & 16777215U)) << 24) | (((tmp_81 | ((*(priv->channel))->rq.rqn & 16777215U)) << 8) & 16711680U)) | (((tmp_83 | ((*(priv->channel))->rq.rqn & 16777215U)) >> 8) & 65280U)) | ((tmp_85 | ((*(priv->channel))->rq.rqn & 16777215U)) >> 24);
    }
    else {
      __u32 tmp_88;
      unsigned int tmp_87;
      
#line 1248 
      if (0 != 0) 
#line 1248 
                  tmp_87 = ((((*(tirc + 7U) << 24) | ((*(tirc + 7U) << 8) & 16711680U)) | ((*(tirc + 7U) >> 8) & 65280U)) | (*(tirc + 7U) >> 24)) & 4278190080U;
      else {
        __u32 tmp_86;
        
#line 1248 
        tmp_86 = __fswab32(*(tirc + 7U));
        
#line 1248 
        tmp_87 = tmp_86 & 4278190080U;
      }
      
#line 1248 
      ;
      
#line 1248 
      tmp_88 = __fswab32(tmp_87 | ((*(priv->channel))->rq.rqn & 16777215U));
      
#line 1248 
      *(tirc + 7U) = tmp_88;
    }
    
#line 1250 
    goto ldv_55602;
    default: 
#line 1251 
    ;
    {
      
#line 1252 
      bool __cond_5 = (_Bool)0;
      
#line 1252 
      if ((int)__cond_5 != 0) 
#line 1252 
                              __compiletime_assert_1253(); else ;
    }
    
#line 1252 
    if (0 != 0) {
      unsigned int tmp_92;
      unsigned int tmp_94;
      unsigned int tmp_96;
      unsigned int tmp_98;
      
#line 1252 
      if (0 != 0) 
#line 1252 
                  tmp_92 = ((((*(tirc + 1U) << 24) | ((*(tirc + 1U) << 8) & 16711680U)) | ((*(tirc + 1U) >> 8) & 65280U)) | (*(tirc + 1U) >> 24)) << 24;
      else {
        __u32 tmp_91;
        
#line 1252 
        tmp_91 = __fswab32(*(tirc + 1U));
        
#line 1252 
        tmp_92 = tmp_91 << 24;
      }
      
#line 1252 
      if (0 != 0) 
#line 1252 
                  tmp_94 = (((((*(tirc + 1U) << 24) | ((*(tirc + 1U) << 8) & 16711680U)) | ((*(tirc + 1U) >> 8) & 65280U)) | (*(tirc + 1U) >> 24)) << 8) & 16711680U;
      else {
        __u32 tmp_93;
        
#line 1252 
        tmp_93 = __fswab32(*(tirc + 1U));
        
#line 1252 
        tmp_94 = (tmp_93 << 8) & 16711680U;
      }
      
#line 1252 
      if (0 != 0) 
#line 1252 
                  tmp_96 = (((((*(tirc + 1U) << 24) | ((*(tirc + 1U) << 8) & 16711680U)) | ((*(tirc + 1U) >> 8) & 65280U)) | (*(tirc + 1U) >> 24)) >> 8) & 65280U;
      else {
        __u32 tmp_95;
        
#line 1252 
        tmp_95 = __fswab32(*(tirc + 1U));
        
#line 1252 
        tmp_96 = (tmp_95 >> 8) & 65280U;
      }
      
#line 1252 
      if (0 != 0) 
#line 1252 
                  tmp_98 = ((((((*(tirc + 1U) << 24) | ((*(tirc + 1U) << 8) & 16711680U)) | ((*(tirc + 1U) >> 8) & 65280U)) | (*(tirc + 1U) >> 24)) >> 24) & 15U) | 16U;
      else {
        __u32 tmp_97;
        
#line 1252 
        tmp_97 = __fswab32(*(tirc + 1U));
        
#line 1252 
        tmp_98 = ((tmp_97 >> 24) & 15U) | 16U;
      }
      
#line 1252 
      *(tirc + 1U) = ((tmp_92 | tmp_94) | tmp_96) | tmp_98;
    }
    else {
      __u32 tmp_101;
      unsigned int tmp_100;
      
#line 1252 
      if (0 != 0) 
#line 1252 
                  tmp_100 = (((((*(tirc + 1U) << 24) | ((*(tirc + 1U) << 8) & 16711680U)) | ((*(tirc + 1U) >> 8) & 65280U)) | (*(tirc + 1U) >> 24)) & 268435455U) | 268435456U;
      else {
        __u32 tmp_99;
        
#line 1252 
        tmp_99 = __fswab32(*(tirc + 1U));
        
#line 1252 
        tmp_100 = (tmp_99 & 268435455U) | 268435456U;
      }
      
#line 1252 
      tmp_101 = __fswab32(tmp_100);
      
#line 1252 
      *(tirc + 1U) = tmp_101;
    }
    {
      
#line 1254 
      bool __cond_6 = (_Bool)0;
      
#line 1254 
      if ((int)__cond_6 != 0) 
#line 1254 
                              __compiletime_assert_1255(); else ;
    }
    
#line 1254 
    if (0 != 0) {
      unsigned int tmp_105;
      unsigned int tmp_107;
      unsigned int tmp_109;
      unsigned int tmp_111;
      
#line 1254 
      if (0 != 0) 
#line 1254 
                  tmp_105 = ((((*(tirc + 8U) << 24) | ((*(tirc + 8U) << 8) & 16711680U)) | ((*(tirc + 8U) >> 8) & 65280U)) | (*(tirc + 8U) >> 24)) & 4278190080U;
      else {
        __u32 tmp_104;
        
#line 1254 
        tmp_104 = __fswab32(*(tirc + 8U));
        
#line 1254 
        tmp_105 = tmp_104 & 4278190080U;
      }
      
#line 1254 
      if (0 != 0) 
#line 1254 
                  tmp_107 = ((((*(tirc + 8U) << 24) | ((*(tirc + 8U) << 8) & 16711680U)) | ((*(tirc + 8U) >> 8) & 65280U)) | (*(tirc + 8U) >> 24)) & 4278190080U;
      else {
        __u32 tmp_106;
        
#line 1254 
        tmp_106 = __fswab32(*(tirc + 8U));
        
#line 1254 
        tmp_107 = tmp_106 & 4278190080U;
      }
      
#line 1254 
      if (0 != 0) 
#line 1254 
                  tmp_109 = ((((*(tirc + 8U) << 24) | ((*(tirc + 8U) << 8) & 16711680U)) | ((*(tirc + 8U) >> 8) & 65280U)) | (*(tirc + 8U) >> 24)) & 4278190080U;
      else {
        __u32 tmp_108;
        
#line 1254 
        tmp_108 = __fswab32(*(tirc + 8U));
        
#line 1254 
        tmp_109 = tmp_108 & 4278190080U;
      }
      
#line 1254 
      if (0 != 0) 
#line 1254 
                  tmp_111 = ((((*(tirc + 8U) << 24) | ((*(tirc + 8U) << 8) & 16711680U)) | ((*(tirc + 8U) >> 8) & 65280U)) | (*(tirc + 8U) >> 24)) & 4278190080U;
      else {
        __u32 tmp_110;
        
#line 1254 
        tmp_110 = __fswab32(*(tirc + 8U));
        
#line 1254 
        tmp_111 = tmp_110 & 4278190080U;
      }
      
#line 1254 
      *(tirc + 8U) = ((((tmp_105 | (priv->rqtn & 16777215U)) << 24) | (((tmp_107 | (priv->rqtn & 16777215U)) << 8) & 16711680U)) | (((tmp_109 | (priv->rqtn & 16777215U)) >> 8) & 65280U)) | ((tmp_111 | (priv->rqtn & 16777215U)) >> 24);
    }
    else {
      __u32 tmp_114;
      unsigned int tmp_113;
      
#line 1254 
      if (0 != 0) 
#line 1254 
                  tmp_113 = ((((*(tirc + 8U) << 24) | ((*(tirc + 8U) << 8) & 16711680U)) | ((*(tirc + 8U) >> 8) & 65280U)) | (*(tirc + 8U) >> 24)) & 4278190080U;
      else {
        __u32 tmp_112;
        
#line 1254 
        tmp_112 = __fswab32(*(tirc + 8U));
        
#line 1254 
        tmp_113 = tmp_112 & 4278190080U;
      }
      
#line 1254 
      ;
      
#line 1254 
      tmp_114 = __fswab32(tmp_113 | (priv->rqtn & 16777215U));
      
#line 1254 
      *(tirc + 8U) = tmp_114;
    }
    {
      
#line 1256 
      bool __cond_7 = (_Bool)0;
      
#line 1256 
      if ((int)__cond_7 != 0) 
#line 1256 
                              __compiletime_assert_1257(); else ;
    }
    
#line 1256 
    if (0 != 0) {
      unsigned int tmp_118;
      unsigned int tmp_120;
      unsigned int tmp_122;
      unsigned int tmp_124;
      
#line 1256 
      if (0 != 0) 
#line 1256 
                  tmp_118 = ((((*(tirc + 9U) << 24) | ((*(tirc + 9U) << 8) & 16711680U)) | ((*(tirc + 9U) >> 8) & 65280U)) | (*(tirc + 9U) >> 24)) << 24;
      else {
        __u32 tmp_117;
        
#line 1256 
        tmp_117 = __fswab32(*(tirc + 9U));
        
#line 1256 
        tmp_118 = tmp_117 << 24;
      }
      
#line 1256 
      if (0 != 0) 
#line 1256 
                  tmp_120 = (((((*(tirc + 9U) << 24) | ((*(tirc + 9U) << 8) & 16711680U)) | ((*(tirc + 9U) >> 8) & 65280U)) | (*(tirc + 9U) >> 24)) << 8) & 16711680U;
      else {
        __u32 tmp_119;
        
#line 1256 
        tmp_119 = __fswab32(*(tirc + 9U));
        
#line 1256 
        tmp_120 = (tmp_119 << 8) & 16711680U;
      }
      
#line 1256 
      if (0 != 0) 
#line 1256 
                  tmp_122 = (((((*(tirc + 9U) << 24) | ((*(tirc + 9U) << 8) & 16711680U)) | ((*(tirc + 9U) >> 8) & 65280U)) | (*(tirc + 9U) >> 24)) >> 8) & 65280U;
      else {
        __u32 tmp_121;
        
#line 1256 
        tmp_121 = __fswab32(*(tirc + 9U));
        
#line 1256 
        tmp_122 = (tmp_121 >> 8) & 65280U;
      }
      
#line 1256 
      if (0 != 0) 
#line 1256 
                  tmp_124 = ((((((*(tirc + 9U) << 24) | ((*(tirc + 9U) << 8) & 16711680U)) | ((*(tirc + 9U) >> 8) & 65280U)) | (*(tirc + 9U) >> 24)) >> 24) & 15U) | 32U;
      else {
        __u32 tmp_123;
        
#line 1256 
        tmp_123 = __fswab32(*(tirc + 9U));
        
#line 1256 
        tmp_124 = ((tmp_123 >> 24) & 15U) | 32U;
      }
      
#line 1256 
      *(tirc + 9U) = ((tmp_118 | tmp_120) | tmp_122) | tmp_124;
    }
    else {
      __u32 tmp_127;
      unsigned int tmp_126;
      
#line 1256 
      if (0 != 0) 
#line 1256 
                  tmp_126 = (((((*(tirc + 9U) << 24) | ((*(tirc + 9U) << 8) & 16711680U)) | ((*(tirc + 9U) >> 8) & 65280U)) | (*(tirc + 9U) >> 24)) & 268435455U) | 536870912U;
      else {
        __u32 tmp_125;
        
#line 1256 
        tmp_125 = __fswab32(*(tirc + 9U));
        
#line 1256 
        tmp_126 = (tmp_125 & 268435455U) | 536870912U;
      }
      
#line 1256 
      tmp_127 = __fswab32(tmp_126);
      
#line 1256 
      *(tirc + 9U) = tmp_127;
    }
    {
      
#line 1258 
      bool __cond_8 = (_Bool)0;
      
#line 1258 
      if ((int)__cond_8 != 0) 
#line 1258 
                              __compiletime_assert_1258(); else ;
    }
    
#line 1258 
    if (0 != 0) {
      unsigned int tmp_131;
      unsigned int tmp_133;
      unsigned int tmp_135;
      unsigned int tmp_137;
      
#line 1258 
      if (0 != 0) 
#line 1258 
                  tmp_131 = ((((*(tirc + 8U) << 24) | ((*(tirc + 8U) << 8) & 16711680U)) | ((*(tirc + 8U) >> 8) & 65280U)) | (*(tirc + 8U) >> 24)) << 24;
      else {
        __u32 tmp_130;
        
#line 1258 
        tmp_130 = __fswab32(*(tirc + 8U));
        
#line 1258 
        tmp_131 = tmp_130 << 24;
      }
      
#line 1258 
      if (0 != 0) 
#line 1258 
                  tmp_133 = (((((*(tirc + 8U) << 24) | ((*(tirc + 8U) << 8) & 16711680U)) | ((*(tirc + 8U) >> 8) & 65280U)) | (*(tirc + 8U) >> 24)) << 8) & 16711680U;
      else {
        __u32 tmp_132;
        
#line 1258 
        tmp_132 = __fswab32(*(tirc + 8U));
        
#line 1258 
        tmp_133 = (tmp_132 << 8) & 16711680U;
      }
      
#line 1258 
      if (0 != 0) 
#line 1258 
                  tmp_135 = (((((*(tirc + 8U) << 24) | ((*(tirc + 8U) << 8) & 16711680U)) | ((*(tirc + 8U) >> 8) & 65280U)) | (*(tirc + 8U) >> 24)) >> 8) & 65280U;
      else {
        __u32 tmp_134;
        
#line 1258 
        tmp_134 = __fswab32(*(tirc + 8U));
        
#line 1258 
        tmp_135 = (tmp_134 >> 8) & 65280U;
      }
      
#line 1258 
      if (0 != 0) 
#line 1258 
                  tmp_137 = (((((*(tirc + 8U) << 24) | ((*(tirc + 8U) << 8) & 16711680U)) | ((*(tirc + 8U) >> 8) & 65280U)) | (*(tirc + 8U) >> 24)) >> 24) | 128U;
      else {
        __u32 tmp_136;
        
#line 1258 
        tmp_136 = __fswab32(*(tirc + 8U));
        
#line 1258 
        tmp_137 = (tmp_136 >> 24) | 128U;
      }
      
#line 1258 
      *(tirc + 8U) = ((tmp_131 | tmp_133) | tmp_135) | tmp_137;
    }
    else {
      __u32 tmp_140;
      unsigned int tmp_139;
      
#line 1258 
      if (0 != 0) 
#line 1258 
                  tmp_139 = ((((*(tirc + 8U) << 24) | ((*(tirc + 8U) << 8) & 16711680U)) | ((*(tirc + 8U) >> 8) & 65280U)) | (*(tirc + 8U) >> 24)) | 2147483648U;
      else {
        __u32 tmp_138;
        
#line 1258 
        tmp_138 = __fswab32(*(tirc + 8U));
        
#line 1258 
        tmp_139 = tmp_138 | 2147483648U;
      }
      
#line 1258 
      tmp_140 = __fswab32(tmp_139);
      
#line 1258 
      *(tirc + 8U) = tmp_140;
    }
    
#line 1259 
    netdev_rss_key_fill((void *)tirc + 40U,40UL);
    
#line 1263 
    goto ldv_55602;
  }
  ldv_55602: 
#line 1266 
  ;
  
#line 1266 
  switch (tt) {
    case 0: 
#line 1267 
    ;
    {
      
#line 1268 
      bool __cond_9 = (_Bool)0;
      
#line 1268 
      if ((int)__cond_9 != 0) 
#line 1268 
                              __compiletime_assert_1269(); else ;
    }
    
#line 1268 
    if (0 != 0) {
      unsigned int tmp_144;
      unsigned int tmp_146;
      unsigned int tmp_148;
      unsigned int tmp_150;
      
#line 1268 
      if (0 != 0) 
#line 1268 
                  tmp_144 = ((((*((__be32 *)hfso) << 24) | ((*((__be32 *)hfso) << 8) & 16711680U)) | ((*((__be32 *)hfso) >> 8) & 65280U)) | (*((__be32 *)hfso) >> 24)) << 24;
      else {
        __u32 tmp_143;
        
#line 1268 
        tmp_143 = __fswab32(*((__be32 *)hfso));
        
#line 1268 
        tmp_144 = tmp_143 << 24;
      }
      
#line 1268 
      if (0 != 0) 
#line 1268 
                  tmp_146 = (((((*((__be32 *)hfso) << 24) | ((*((__be32 *)hfso) << 8) & 16711680U)) | ((*((__be32 *)hfso) >> 8) & 65280U)) | (*((__be32 *)hfso) >> 24)) << 8) & 16711680U;
      else {
        __u32 tmp_145;
        
#line 1268 
        tmp_145 = __fswab32(*((__be32 *)hfso));
        
#line 1268 
        tmp_146 = (tmp_145 << 8) & 16711680U;
      }
      
#line 1268 
      if (0 != 0) 
#line 1268 
                  tmp_148 = (((((*((__be32 *)hfso) << 24) | ((*((__be32 *)hfso) << 8) & 16711680U)) | ((*((__be32 *)hfso) >> 8) & 65280U)) | (*((__be32 *)hfso) >> 24)) >> 8) & 65280U;
      else {
        __u32 tmp_147;
        
#line 1268 
        tmp_147 = __fswab32(*((__be32 *)hfso));
        
#line 1268 
        tmp_148 = (tmp_147 >> 8) & 65280U;
      }
      
#line 1268 
      if (0 != 0) 
#line 1268 
                  tmp_150 = (((((*((__be32 *)hfso) << 24) | ((*((__be32 *)hfso) << 8) & 16711680U)) | ((*((__be32 *)hfso) >> 8) & 65280U)) | (*((__be32 *)hfso) >> 24)) >> 24) & 127U;
      else {
        __u32 tmp_149;
        
#line 1268 
        tmp_149 = __fswab32(*((__be32 *)hfso));
        
#line 1268 
        tmp_150 = (tmp_149 >> 24) & 127U;
      }
      
#line 1268 
      *((__be32 *)hfso) = ((tmp_144 | tmp_146) | tmp_148) | tmp_150;
    }
    else {
      __u32 tmp_153;
      unsigned int tmp_152;
      
#line 1268 
      if (0 != 0) 
#line 1268 
                  tmp_152 = ((((*((__be32 *)hfso) << 24) | ((*((__be32 *)hfso) << 8) & 16711680U)) | ((*((__be32 *)hfso) >> 8) & 65280U)) | (*((__be32 *)hfso) >> 24)) & 2147483647U;
      else {
        __u32 tmp_151;
        
#line 1268 
        tmp_151 = __fswab32(*((__be32 *)hfso));
        
#line 1268 
        tmp_152 = tmp_151 & 2147483647U;
      }
      
#line 1268 
      tmp_153 = __fswab32(tmp_152);
      
#line 1268 
      *((__be32 *)hfso) = tmp_153;
    }
    {
      
#line 1270 
      bool __cond_10 = (_Bool)0;
      
#line 1270 
      if ((int)__cond_10 != 0) 
#line 1270 
                               __compiletime_assert_1271(); else ;
    }
    
#line 1270 
    if (0 != 0) {
      unsigned int tmp_157;
      unsigned int tmp_159;
      unsigned int tmp_161;
      unsigned int tmp_163;
      
#line 1270 
      if (0 != 0) 
#line 1270 
                  tmp_157 = ((((*((__be32 *)hfso) << 24) | ((*((__be32 *)hfso) << 8) & 16711680U)) | ((*((__be32 *)hfso) >> 8) & 65280U)) | (*((__be32 *)hfso) >> 24)) << 24;
      else {
        __u32 tmp_156;
        
#line 1270 
        tmp_156 = __fswab32(*((__be32 *)hfso));
        
#line 1270 
        tmp_157 = tmp_156 << 24;
      }
      
#line 1270 
      if (0 != 0) 
#line 1270 
                  tmp_159 = (((((*((__be32 *)hfso) << 24) | ((*((__be32 *)hfso) << 8) & 16711680U)) | ((*((__be32 *)hfso) >> 8) & 65280U)) | (*((__be32 *)hfso) >> 24)) << 8) & 16711680U;
      else {
        __u32 tmp_158;
        
#line 1270 
        tmp_158 = __fswab32(*((__be32 *)hfso));
        
#line 1270 
        tmp_159 = (tmp_158 << 8) & 16711680U;
      }
      
#line 1270 
      if (0 != 0) 
#line 1270 
                  tmp_161 = (((((*((__be32 *)hfso) << 24) | ((*((__be32 *)hfso) << 8) & 16711680U)) | ((*((__be32 *)hfso) >> 8) & 65280U)) | (*((__be32 *)hfso) >> 24)) >> 8) & 65280U;
      else {
        __u32 tmp_160;
        
#line 1270 
        tmp_160 = __fswab32(*((__be32 *)hfso));
        
#line 1270 
        tmp_161 = (tmp_160 >> 8) & 65280U;
      }
      
#line 1270 
      if (0 != 0) 
#line 1270 
                  tmp_163 = (((((*((__be32 *)hfso) << 24) | ((*((__be32 *)hfso) << 8) & 16711680U)) | ((*((__be32 *)hfso) >> 8) & 65280U)) | (*((__be32 *)hfso) >> 24)) >> 24) & 191U;
      else {
        __u32 tmp_162;
        
#line 1270 
        tmp_162 = __fswab32(*((__be32 *)hfso));
        
#line 1270 
        tmp_163 = (tmp_162 >> 24) & 191U;
      }
      
#line 1270 
      *((__be32 *)hfso) = ((tmp_157 | tmp_159) | tmp_161) | tmp_163;
    }
    else {
      __u32 tmp_166;
      unsigned int tmp_165;
      
#line 1270 
      if (0 != 0) 
#line 1270 
                  tmp_165 = ((((*((__be32 *)hfso) << 24) | ((*((__be32 *)hfso) << 8) & 16711680U)) | ((*((__be32 *)hfso) >> 8) & 65280U)) | (*((__be32 *)hfso) >> 24)) & 3221225471U;
      else {
        __u32 tmp_164;
        
#line 1270 
        tmp_164 = __fswab32(*((__be32 *)hfso));
        
#line 1270 
        tmp_165 = tmp_164 & 3221225471U;
      }
      
#line 1270 
      tmp_166 = __fswab32(tmp_165);
      
#line 1270 
      *((__be32 *)hfso) = tmp_166;
    }
    {
      
#line 1272 
      bool __cond_11 = (_Bool)0;
      
#line 1272 
      if ((int)__cond_11 != 0) 
#line 1272 
                               __compiletime_assert_1273(); else ;
    }
    
#line 1272 
    if (0 != 0) {
      unsigned int tmp_170;
      
#line 1272 
      if (0 != 0) 
#line 1272 
                  tmp_170 = ((((((*((__be32 *)hfso) << 24) | ((*((__be32 *)hfso) << 8) & 16711680U)) | ((*((__be32 *)hfso) >> 8) & 65280U)) | (*((__be32 *)hfso) >> 24)) >> 24) & 192U) | 251658240U;
      else {
        __u32 tmp_169;
        
#line 1272 
        tmp_169 = __fswab32(*((__be32 *)hfso));
        
#line 1272 
        tmp_170 = ((tmp_169 >> 24) & 192U) | 251658240U;
      }
      
#line 1272 
      *((__be32 *)hfso) = tmp_170;
    }
    else {
      __u32 tmp_173;
      unsigned int tmp_172;
      
#line 1272 
      if (0 != 0) 
#line 1272 
                  tmp_172 = (((((*((__be32 *)hfso) << 24) | ((*((__be32 *)hfso) << 8) & 16711680U)) | ((*((__be32 *)hfso) >> 8) & 65280U)) | (*((__be32 *)hfso) >> 24)) & 3221225472U) | 15U;
      else {
        __u32 tmp_171;
        
#line 1272 
        tmp_171 = __fswab32(*((__be32 *)hfso));
        
#line 1272 
        tmp_172 = (tmp_171 & 3221225472U) | 15U;
      }
      
#line 1272 
      tmp_173 = __fswab32(tmp_172);
      
#line 1272 
      *((__be32 *)hfso) = tmp_173;
    }
    
#line 1274 
    goto ldv_55633;
    case 1: 
#line 1276 
    ;
    {
      
#line 1277 
      bool __cond_12 = (_Bool)0;
      
#line 1277 
      if ((int)__cond_12 != 0) 
#line 1277 
                               __compiletime_assert_1278(); else ;
    }
    
#line 1277 
    if (0 != 0) {
      unsigned int tmp_177;
      unsigned int tmp_179;
      unsigned int tmp_181;
      unsigned int tmp_183;
      
#line 1277 
      if (0 != 0) 
#line 1277 
                  tmp_177 = ((((*((__be32 *)hfso) << 24) | ((*((__be32 *)hfso) << 8) & 16711680U)) | ((*((__be32 *)hfso) >> 8) & 65280U)) | (*((__be32 *)hfso) >> 24)) << 24;
      else {
        __u32 tmp_176;
        
#line 1277 
        tmp_176 = __fswab32(*((__be32 *)hfso));
        
#line 1277 
        tmp_177 = tmp_176 << 24;
      }
      
#line 1277 
      if (0 != 0) 
#line 1277 
                  tmp_179 = (((((*((__be32 *)hfso) << 24) | ((*((__be32 *)hfso) << 8) & 16711680U)) | ((*((__be32 *)hfso) >> 8) & 65280U)) | (*((__be32 *)hfso) >> 24)) << 8) & 16711680U;
      else {
        __u32 tmp_178;
        
#line 1277 
        tmp_178 = __fswab32(*((__be32 *)hfso));
        
#line 1277 
        tmp_179 = (tmp_178 << 8) & 16711680U;
      }
      
#line 1277 
      if (0 != 0) 
#line 1277 
                  tmp_181 = (((((*((__be32 *)hfso) << 24) | ((*((__be32 *)hfso) << 8) & 16711680U)) | ((*((__be32 *)hfso) >> 8) & 65280U)) | (*((__be32 *)hfso) >> 24)) >> 8) & 65280U;
      else {
        __u32 tmp_180;
        
#line 1277 
        tmp_180 = __fswab32(*((__be32 *)hfso));
        
#line 1277 
        tmp_181 = (tmp_180 >> 8) & 65280U;
      }
      
#line 1277 
      if (0 != 0) 
#line 1277 
                  tmp_183 = (((((*((__be32 *)hfso) << 24) | ((*((__be32 *)hfso) << 8) & 16711680U)) | ((*((__be32 *)hfso) >> 8) & 65280U)) | (*((__be32 *)hfso) >> 24)) >> 24) | 128U;
      else {
        __u32 tmp_182;
        
#line 1277 
        tmp_182 = __fswab32(*((__be32 *)hfso));
        
#line 1277 
        tmp_183 = (tmp_182 >> 24) | 128U;
      }
      
#line 1277 
      *((__be32 *)hfso) = ((tmp_177 | tmp_179) | tmp_181) | tmp_183;
    }
    else {
      __u32 tmp_186;
      unsigned int tmp_185;
      
#line 1277 
      if (0 != 0) 
#line 1277 
                  tmp_185 = ((((*((__be32 *)hfso) << 24) | ((*((__be32 *)hfso) << 8) & 16711680U)) | ((*((__be32 *)hfso) >> 8) & 65280U)) | (*((__be32 *)hfso) >> 24)) | 2147483648U;
      else {
        __u32 tmp_184;
        
#line 1277 
        tmp_184 = __fswab32(*((__be32 *)hfso));
        
#line 1277 
        tmp_185 = tmp_184 | 2147483648U;
      }
      
#line 1277 
      tmp_186 = __fswab32(tmp_185);
      
#line 1277 
      *((__be32 *)hfso) = tmp_186;
    }
    {
      
#line 1279 
      bool __cond_13 = (_Bool)0;
      
#line 1279 
      if ((int)__cond_13 != 0) 
#line 1279 
                               __compiletime_assert_1280(); else ;
    }
    
#line 1279 
    if (0 != 0) {
      unsigned int tmp_190;
      unsigned int tmp_192;
      unsigned int tmp_194;
      unsigned int tmp_196;
      
#line 1279 
      if (0 != 0) 
#line 1279 
                  tmp_190 = ((((*((__be32 *)hfso) << 24) | ((*((__be32 *)hfso) << 8) & 16711680U)) | ((*((__be32 *)hfso) >> 8) & 65280U)) | (*((__be32 *)hfso) >> 24)) << 24;
      else {
        __u32 tmp_189;
        
#line 1279 
        tmp_189 = __fswab32(*((__be32 *)hfso));
        
#line 1279 
        tmp_190 = tmp_189 << 24;
      }
      
#line 1279 
      if (0 != 0) 
#line 1279 
                  tmp_192 = (((((*((__be32 *)hfso) << 24) | ((*((__be32 *)hfso) << 8) & 16711680U)) | ((*((__be32 *)hfso) >> 8) & 65280U)) | (*((__be32 *)hfso) >> 24)) << 8) & 16711680U;
      else {
        __u32 tmp_191;
        
#line 1279 
        tmp_191 = __fswab32(*((__be32 *)hfso));
        
#line 1279 
        tmp_192 = (tmp_191 << 8) & 16711680U;
      }
      
#line 1279 
      if (0 != 0) 
#line 1279 
                  tmp_194 = (((((*((__be32 *)hfso) << 24) | ((*((__be32 *)hfso) << 8) & 16711680U)) | ((*((__be32 *)hfso) >> 8) & 65280U)) | (*((__be32 *)hfso) >> 24)) >> 8) & 65280U;
      else {
        __u32 tmp_193;
        
#line 1279 
        tmp_193 = __fswab32(*((__be32 *)hfso));
        
#line 1279 
        tmp_194 = (tmp_193 >> 8) & 65280U;
      }
      
#line 1279 
      if (0 != 0) 
#line 1279 
                  tmp_196 = (((((*((__be32 *)hfso) << 24) | ((*((__be32 *)hfso) << 8) & 16711680U)) | ((*((__be32 *)hfso) >> 8) & 65280U)) | (*((__be32 *)hfso) >> 24)) >> 24) & 191U;
      else {
        __u32 tmp_195;
        
#line 1279 
        tmp_195 = __fswab32(*((__be32 *)hfso));
        
#line 1279 
        tmp_196 = (tmp_195 >> 24) & 191U;
      }
      
#line 1279 
      *((__be32 *)hfso) = ((tmp_190 | tmp_192) | tmp_194) | tmp_196;
    }
    else {
      __u32 tmp_199;
      unsigned int tmp_198;
      
#line 1279 
      if (0 != 0) 
#line 1279 
                  tmp_198 = ((((*((__be32 *)hfso) << 24) | ((*((__be32 *)hfso) << 8) & 16711680U)) | ((*((__be32 *)hfso) >> 8) & 65280U)) | (*((__be32 *)hfso) >> 24)) & 3221225471U;
      else {
        __u32 tmp_197;
        
#line 1279 
        tmp_197 = __fswab32(*((__be32 *)hfso));
        
#line 1279 
        tmp_198 = tmp_197 & 3221225471U;
      }
      
#line 1279 
      tmp_199 = __fswab32(tmp_198);
      
#line 1279 
      *((__be32 *)hfso) = tmp_199;
    }
    {
      
#line 1281 
      bool __cond_14 = (_Bool)0;
      
#line 1281 
      if ((int)__cond_14 != 0) 
#line 1281 
                               __compiletime_assert_1282(); else ;
    }
    
#line 1281 
    if (0 != 0) {
      unsigned int tmp_203;
      
#line 1281 
      if (0 != 0) 
#line 1281 
                  tmp_203 = ((((((*((__be32 *)hfso) << 24) | ((*((__be32 *)hfso) << 8) & 16711680U)) | ((*((__be32 *)hfso) >> 8) & 65280U)) | (*((__be32 *)hfso) >> 24)) >> 24) & 192U) | 251658240U;
      else {
        __u32 tmp_202;
        
#line 1281 
        tmp_202 = __fswab32(*((__be32 *)hfso));
        
#line 1281 
        tmp_203 = ((tmp_202 >> 24) & 192U) | 251658240U;
      }
      
#line 1281 
      *((__be32 *)hfso) = tmp_203;
    }
    else {
      __u32 tmp_206;
      unsigned int tmp_205;
      
#line 1281 
      if (0 != 0) 
#line 1281 
                  tmp_205 = (((((*((__be32 *)hfso) << 24) | ((*((__be32 *)hfso) << 8) & 16711680U)) | ((*((__be32 *)hfso) >> 8) & 65280U)) | (*((__be32 *)hfso) >> 24)) & 3221225472U) | 15U;
      else {
        __u32 tmp_204;
        
#line 1281 
        tmp_204 = __fswab32(*((__be32 *)hfso));
        
#line 1281 
        tmp_205 = (tmp_204 & 3221225472U) | 15U;
      }
      
#line 1281 
      tmp_206 = __fswab32(tmp_205);
      
#line 1281 
      *((__be32 *)hfso) = tmp_206;
    }
    
#line 1283 
    goto ldv_55633;
    case 2: 
#line 1285 
    ;
    {
      
#line 1286 
      bool __cond_15 = (_Bool)0;
      
#line 1286 
      if ((int)__cond_15 != 0) 
#line 1286 
                               __compiletime_assert_1287(); else ;
    }
    
#line 1286 
    if (0 != 0) {
      unsigned int tmp_210;
      unsigned int tmp_212;
      unsigned int tmp_214;
      unsigned int tmp_216;
      
#line 1286 
      if (0 != 0) 
#line 1286 
                  tmp_210 = ((((*((__be32 *)hfso) << 24) | ((*((__be32 *)hfso) << 8) & 16711680U)) | ((*((__be32 *)hfso) >> 8) & 65280U)) | (*((__be32 *)hfso) >> 24)) << 24;
      else {
        __u32 tmp_209;
        
#line 1286 
        tmp_209 = __fswab32(*((__be32 *)hfso));
        
#line 1286 
        tmp_210 = tmp_209 << 24;
      }
      
#line 1286 
      if (0 != 0) 
#line 1286 
                  tmp_212 = (((((*((__be32 *)hfso) << 24) | ((*((__be32 *)hfso) << 8) & 16711680U)) | ((*((__be32 *)hfso) >> 8) & 65280U)) | (*((__be32 *)hfso) >> 24)) << 8) & 16711680U;
      else {
        __u32 tmp_211;
        
#line 1286 
        tmp_211 = __fswab32(*((__be32 *)hfso));
        
#line 1286 
        tmp_212 = (tmp_211 << 8) & 16711680U;
      }
      
#line 1286 
      if (0 != 0) 
#line 1286 
                  tmp_214 = (((((*((__be32 *)hfso) << 24) | ((*((__be32 *)hfso) << 8) & 16711680U)) | ((*((__be32 *)hfso) >> 8) & 65280U)) | (*((__be32 *)hfso) >> 24)) >> 8) & 65280U;
      else {
        __u32 tmp_213;
        
#line 1286 
        tmp_213 = __fswab32(*((__be32 *)hfso));
        
#line 1286 
        tmp_214 = (tmp_213 >> 8) & 65280U;
      }
      
#line 1286 
      if (0 != 0) 
#line 1286 
                  tmp_216 = (((((*((__be32 *)hfso) << 24) | ((*((__be32 *)hfso) << 8) & 16711680U)) | ((*((__be32 *)hfso) >> 8) & 65280U)) | (*((__be32 *)hfso) >> 24)) >> 24) & 127U;
      else {
        __u32 tmp_215;
        
#line 1286 
        tmp_215 = __fswab32(*((__be32 *)hfso));
        
#line 1286 
        tmp_216 = (tmp_215 >> 24) & 127U;
      }
      
#line 1286 
      *((__be32 *)hfso) = ((tmp_210 | tmp_212) | tmp_214) | tmp_216;
    }
    else {
      __u32 tmp_219;
      unsigned int tmp_218;
      
#line 1286 
      if (0 != 0) 
#line 1286 
                  tmp_218 = ((((*((__be32 *)hfso) << 24) | ((*((__be32 *)hfso) << 8) & 16711680U)) | ((*((__be32 *)hfso) >> 8) & 65280U)) | (*((__be32 *)hfso) >> 24)) & 2147483647U;
      else {
        __u32 tmp_217;
        
#line 1286 
        tmp_217 = __fswab32(*((__be32 *)hfso));
        
#line 1286 
        tmp_218 = tmp_217 & 2147483647U;
      }
      
#line 1286 
      tmp_219 = __fswab32(tmp_218);
      
#line 1286 
      *((__be32 *)hfso) = tmp_219;
    }
    {
      
#line 1288 
      bool __cond_16 = (_Bool)0;
      
#line 1288 
      if ((int)__cond_16 != 0) 
#line 1288 
                               __compiletime_assert_1289(); else ;
    }
    
#line 1288 
    if (0 != 0) {
      unsigned int tmp_223;
      unsigned int tmp_225;
      unsigned int tmp_227;
      unsigned int tmp_229;
      
#line 1288 
      if (0 != 0) 
#line 1288 
                  tmp_223 = ((((*((__be32 *)hfso) << 24) | ((*((__be32 *)hfso) << 8) & 16711680U)) | ((*((__be32 *)hfso) >> 8) & 65280U)) | (*((__be32 *)hfso) >> 24)) << 24;
      else {
        __u32 tmp_222;
        
#line 1288 
        tmp_222 = __fswab32(*((__be32 *)hfso));
        
#line 1288 
        tmp_223 = tmp_222 << 24;
      }
      
#line 1288 
      if (0 != 0) 
#line 1288 
                  tmp_225 = (((((*((__be32 *)hfso) << 24) | ((*((__be32 *)hfso) << 8) & 16711680U)) | ((*((__be32 *)hfso) >> 8) & 65280U)) | (*((__be32 *)hfso) >> 24)) << 8) & 16711680U;
      else {
        __u32 tmp_224;
        
#line 1288 
        tmp_224 = __fswab32(*((__be32 *)hfso));
        
#line 1288 
        tmp_225 = (tmp_224 << 8) & 16711680U;
      }
      
#line 1288 
      if (0 != 0) 
#line 1288 
                  tmp_227 = (((((*((__be32 *)hfso) << 24) | ((*((__be32 *)hfso) << 8) & 16711680U)) | ((*((__be32 *)hfso) >> 8) & 65280U)) | (*((__be32 *)hfso) >> 24)) >> 8) & 65280U;
      else {
        __u32 tmp_226;
        
#line 1288 
        tmp_226 = __fswab32(*((__be32 *)hfso));
        
#line 1288 
        tmp_227 = (tmp_226 >> 8) & 65280U;
      }
      
#line 1288 
      if (0 != 0) 
#line 1288 
                  tmp_229 = (((((*((__be32 *)hfso) << 24) | ((*((__be32 *)hfso) << 8) & 16711680U)) | ((*((__be32 *)hfso) >> 8) & 65280U)) | (*((__be32 *)hfso) >> 24)) >> 24) | 64U;
      else {
        __u32 tmp_228;
        
#line 1288 
        tmp_228 = __fswab32(*((__be32 *)hfso));
        
#line 1288 
        tmp_229 = (tmp_228 >> 24) | 64U;
      }
      
#line 1288 
      *((__be32 *)hfso) = ((tmp_223 | tmp_225) | tmp_227) | tmp_229;
    }
    else {
      __u32 tmp_232;
      unsigned int tmp_231;
      
#line 1288 
      if (0 != 0) 
#line 1288 
                  tmp_231 = ((((*((__be32 *)hfso) << 24) | ((*((__be32 *)hfso) << 8) & 16711680U)) | ((*((__be32 *)hfso) >> 8) & 65280U)) | (*((__be32 *)hfso) >> 24)) | 1073741824U;
      else {
        __u32 tmp_230;
        
#line 1288 
        tmp_230 = __fswab32(*((__be32 *)hfso));
        
#line 1288 
        tmp_231 = tmp_230 | 1073741824U;
      }
      
#line 1288 
      tmp_232 = __fswab32(tmp_231);
      
#line 1288 
      *((__be32 *)hfso) = tmp_232;
    }
    {
      
#line 1290 
      bool __cond_17 = (_Bool)0;
      
#line 1290 
      if ((int)__cond_17 != 0) 
#line 1290 
                               __compiletime_assert_1291(); else ;
    }
    
#line 1290 
    if (0 != 0) {
      unsigned int tmp_236;
      
#line 1290 
      if (0 != 0) 
#line 1290 
                  tmp_236 = ((((((*((__be32 *)hfso) << 24) | ((*((__be32 *)hfso) << 8) & 16711680U)) | ((*((__be32 *)hfso) >> 8) & 65280U)) | (*((__be32 *)hfso) >> 24)) >> 24) & 192U) | 251658240U;
      else {
        __u32 tmp_235;
        
#line 1290 
        tmp_235 = __fswab32(*((__be32 *)hfso));
        
#line 1290 
        tmp_236 = ((tmp_235 >> 24) & 192U) | 251658240U;
      }
      
#line 1290 
      *((__be32 *)hfso) = tmp_236;
    }
    else {
      __u32 tmp_239;
      unsigned int tmp_238;
      
#line 1290 
      if (0 != 0) 
#line 1290 
                  tmp_238 = (((((*((__be32 *)hfso) << 24) | ((*((__be32 *)hfso) << 8) & 16711680U)) | ((*((__be32 *)hfso) >> 8) & 65280U)) | (*((__be32 *)hfso) >> 24)) & 3221225472U) | 15U;
      else {
        __u32 tmp_237;
        
#line 1290 
        tmp_237 = __fswab32(*((__be32 *)hfso));
        
#line 1290 
        tmp_238 = (tmp_237 & 3221225472U) | 15U;
      }
      
#line 1290 
      tmp_239 = __fswab32(tmp_238);
      
#line 1290 
      *((__be32 *)hfso) = tmp_239;
    }
    
#line 1292 
    goto ldv_55633;
    case 3: 
#line 1294 
    ;
    {
      
#line 1295 
      bool __cond_18 = (_Bool)0;
      
#line 1295 
      if ((int)__cond_18 != 0) 
#line 1295 
                               __compiletime_assert_1296(); else ;
    }
    
#line 1295 
    if (0 != 0) {
      unsigned int tmp_243;
      unsigned int tmp_245;
      unsigned int tmp_247;
      unsigned int tmp_249;
      
#line 1295 
      if (0 != 0) 
#line 1295 
                  tmp_243 = ((((*((__be32 *)hfso) << 24) | ((*((__be32 *)hfso) << 8) & 16711680U)) | ((*((__be32 *)hfso) >> 8) & 65280U)) | (*((__be32 *)hfso) >> 24)) << 24;
      else {
        __u32 tmp_242;
        
#line 1295 
        tmp_242 = __fswab32(*((__be32 *)hfso));
        
#line 1295 
        tmp_243 = tmp_242 << 24;
      }
      
#line 1295 
      if (0 != 0) 
#line 1295 
                  tmp_245 = (((((*((__be32 *)hfso) << 24) | ((*((__be32 *)hfso) << 8) & 16711680U)) | ((*((__be32 *)hfso) >> 8) & 65280U)) | (*((__be32 *)hfso) >> 24)) << 8) & 16711680U;
      else {
        __u32 tmp_244;
        
#line 1295 
        tmp_244 = __fswab32(*((__be32 *)hfso));
        
#line 1295 
        tmp_245 = (tmp_244 << 8) & 16711680U;
      }
      
#line 1295 
      if (0 != 0) 
#line 1295 
                  tmp_247 = (((((*((__be32 *)hfso) << 24) | ((*((__be32 *)hfso) << 8) & 16711680U)) | ((*((__be32 *)hfso) >> 8) & 65280U)) | (*((__be32 *)hfso) >> 24)) >> 8) & 65280U;
      else {
        __u32 tmp_246;
        
#line 1295 
        tmp_246 = __fswab32(*((__be32 *)hfso));
        
#line 1295 
        tmp_247 = (tmp_246 >> 8) & 65280U;
      }
      
#line 1295 
      if (0 != 0) 
#line 1295 
                  tmp_249 = (((((*((__be32 *)hfso) << 24) | ((*((__be32 *)hfso) << 8) & 16711680U)) | ((*((__be32 *)hfso) >> 8) & 65280U)) | (*((__be32 *)hfso) >> 24)) >> 24) | 128U;
      else {
        __u32 tmp_248;
        
#line 1295 
        tmp_248 = __fswab32(*((__be32 *)hfso));
        
#line 1295 
        tmp_249 = (tmp_248 >> 24) | 128U;
      }
      
#line 1295 
      *((__be32 *)hfso) = ((tmp_243 | tmp_245) | tmp_247) | tmp_249;
    }
    else {
      __u32 tmp_252;
      unsigned int tmp_251;
      
#line 1295 
      if (0 != 0) 
#line 1295 
                  tmp_251 = ((((*((__be32 *)hfso) << 24) | ((*((__be32 *)hfso) << 8) & 16711680U)) | ((*((__be32 *)hfso) >> 8) & 65280U)) | (*((__be32 *)hfso) >> 24)) | 2147483648U;
      else {
        __u32 tmp_250;
        
#line 1295 
        tmp_250 = __fswab32(*((__be32 *)hfso));
        
#line 1295 
        tmp_251 = tmp_250 | 2147483648U;
      }
      
#line 1295 
      tmp_252 = __fswab32(tmp_251);
      
#line 1295 
      *((__be32 *)hfso) = tmp_252;
    }
    {
      
#line 1297 
      bool __cond_19 = (_Bool)0;
      
#line 1297 
      if ((int)__cond_19 != 0) 
#line 1297 
                               __compiletime_assert_1298(); else ;
    }
    
#line 1297 
    if (0 != 0) {
      unsigned int tmp_256;
      unsigned int tmp_258;
      unsigned int tmp_260;
      unsigned int tmp_262;
      
#line 1297 
      if (0 != 0) 
#line 1297 
                  tmp_256 = ((((*((__be32 *)hfso) << 24) | ((*((__be32 *)hfso) << 8) & 16711680U)) | ((*((__be32 *)hfso) >> 8) & 65280U)) | (*((__be32 *)hfso) >> 24)) << 24;
      else {
        __u32 tmp_255;
        
#line 1297 
        tmp_255 = __fswab32(*((__be32 *)hfso));
        
#line 1297 
        tmp_256 = tmp_255 << 24;
      }
      
#line 1297 
      if (0 != 0) 
#line 1297 
                  tmp_258 = (((((*((__be32 *)hfso) << 24) | ((*((__be32 *)hfso) << 8) & 16711680U)) | ((*((__be32 *)hfso) >> 8) & 65280U)) | (*((__be32 *)hfso) >> 24)) << 8) & 16711680U;
      else {
        __u32 tmp_257;
        
#line 1297 
        tmp_257 = __fswab32(*((__be32 *)hfso));
        
#line 1297 
        tmp_258 = (tmp_257 << 8) & 16711680U;
      }
      
#line 1297 
      if (0 != 0) 
#line 1297 
                  tmp_260 = (((((*((__be32 *)hfso) << 24) | ((*((__be32 *)hfso) << 8) & 16711680U)) | ((*((__be32 *)hfso) >> 8) & 65280U)) | (*((__be32 *)hfso) >> 24)) >> 8) & 65280U;
      else {
        __u32 tmp_259;
        
#line 1297 
        tmp_259 = __fswab32(*((__be32 *)hfso));
        
#line 1297 
        tmp_260 = (tmp_259 >> 8) & 65280U;
      }
      
#line 1297 
      if (0 != 0) 
#line 1297 
                  tmp_262 = (((((*((__be32 *)hfso) << 24) | ((*((__be32 *)hfso) << 8) & 16711680U)) | ((*((__be32 *)hfso) >> 8) & 65280U)) | (*((__be32 *)hfso) >> 24)) >> 24) | 64U;
      else {
        __u32 tmp_261;
        
#line 1297 
        tmp_261 = __fswab32(*((__be32 *)hfso));
        
#line 1297 
        tmp_262 = (tmp_261 >> 24) | 64U;
      }
      
#line 1297 
      *((__be32 *)hfso) = ((tmp_256 | tmp_258) | tmp_260) | tmp_262;
    }
    else {
      __u32 tmp_265;
      unsigned int tmp_264;
      
#line 1297 
      if (0 != 0) 
#line 1297 
                  tmp_264 = ((((*((__be32 *)hfso) << 24) | ((*((__be32 *)hfso) << 8) & 16711680U)) | ((*((__be32 *)hfso) >> 8) & 65280U)) | (*((__be32 *)hfso) >> 24)) | 1073741824U;
      else {
        __u32 tmp_263;
        
#line 1297 
        tmp_263 = __fswab32(*((__be32 *)hfso));
        
#line 1297 
        tmp_264 = tmp_263 | 1073741824U;
      }
      
#line 1297 
      tmp_265 = __fswab32(tmp_264);
      
#line 1297 
      *((__be32 *)hfso) = tmp_265;
    }
    {
      
#line 1299 
      bool __cond_20 = (_Bool)0;
      
#line 1299 
      if ((int)__cond_20 != 0) 
#line 1299 
                               __compiletime_assert_1300(); else ;
    }
    
#line 1299 
    if (0 != 0) {
      unsigned int tmp_269;
      
#line 1299 
      if (0 != 0) 
#line 1299 
                  tmp_269 = ((((((*((__be32 *)hfso) << 24) | ((*((__be32 *)hfso) << 8) & 16711680U)) | ((*((__be32 *)hfso) >> 8) & 65280U)) | (*((__be32 *)hfso) >> 24)) >> 24) & 192U) | 251658240U;
      else {
        __u32 tmp_268;
        
#line 1299 
        tmp_268 = __fswab32(*((__be32 *)hfso));
        
#line 1299 
        tmp_269 = ((tmp_268 >> 24) & 192U) | 251658240U;
      }
      
#line 1299 
      *((__be32 *)hfso) = tmp_269;
    }
    else {
      __u32 tmp_272;
      unsigned int tmp_271;
      
#line 1299 
      if (0 != 0) 
#line 1299 
                  tmp_271 = (((((*((__be32 *)hfso) << 24) | ((*((__be32 *)hfso) << 8) & 16711680U)) | ((*((__be32 *)hfso) >> 8) & 65280U)) | (*((__be32 *)hfso) >> 24)) & 3221225472U) | 15U;
      else {
        __u32 tmp_270;
        
#line 1299 
        tmp_270 = __fswab32(*((__be32 *)hfso));
        
#line 1299 
        tmp_271 = (tmp_270 & 3221225472U) | 15U;
      }
      
#line 1299 
      tmp_272 = __fswab32(tmp_271);
      
#line 1299 
      *((__be32 *)hfso) = tmp_272;
    }
    
#line 1301 
    goto ldv_55633;
    case 4: 
#line 1303 
    ;
    {
      
#line 1304 
      bool __cond_21 = (_Bool)0;
      
#line 1304 
      if ((int)__cond_21 != 0) 
#line 1304 
                               __compiletime_assert_1305(); else ;
    }
    
#line 1304 
    if (0 != 0) {
      unsigned int tmp_276;
      unsigned int tmp_278;
      unsigned int tmp_280;
      unsigned int tmp_282;
      
#line 1304 
      if (0 != 0) 
#line 1304 
                  tmp_276 = ((((*((__be32 *)hfso) << 24) | ((*((__be32 *)hfso) << 8) & 16711680U)) | ((*((__be32 *)hfso) >> 8) & 65280U)) | (*((__be32 *)hfso) >> 24)) << 24;
      else {
        __u32 tmp_275;
        
#line 1304 
        tmp_275 = __fswab32(*((__be32 *)hfso));
        
#line 1304 
        tmp_276 = tmp_275 << 24;
      }
      
#line 1304 
      if (0 != 0) 
#line 1304 
                  tmp_278 = (((((*((__be32 *)hfso) << 24) | ((*((__be32 *)hfso) << 8) & 16711680U)) | ((*((__be32 *)hfso) >> 8) & 65280U)) | (*((__be32 *)hfso) >> 24)) << 8) & 16711680U;
      else {
        __u32 tmp_277;
        
#line 1304 
        tmp_277 = __fswab32(*((__be32 *)hfso));
        
#line 1304 
        tmp_278 = (tmp_277 << 8) & 16711680U;
      }
      
#line 1304 
      if (0 != 0) 
#line 1304 
                  tmp_280 = (((((*((__be32 *)hfso) << 24) | ((*((__be32 *)hfso) << 8) & 16711680U)) | ((*((__be32 *)hfso) >> 8) & 65280U)) | (*((__be32 *)hfso) >> 24)) >> 8) & 65280U;
      else {
        __u32 tmp_279;
        
#line 1304 
        tmp_279 = __fswab32(*((__be32 *)hfso));
        
#line 1304 
        tmp_280 = (tmp_279 >> 8) & 65280U;
      }
      
#line 1304 
      if (0 != 0) 
#line 1304 
                  tmp_282 = (((((*((__be32 *)hfso) << 24) | ((*((__be32 *)hfso) << 8) & 16711680U)) | ((*((__be32 *)hfso) >> 8) & 65280U)) | (*((__be32 *)hfso) >> 24)) >> 24) & 127U;
      else {
        __u32 tmp_281;
        
#line 1304 
        tmp_281 = __fswab32(*((__be32 *)hfso));
        
#line 1304 
        tmp_282 = (tmp_281 >> 24) & 127U;
      }
      
#line 1304 
      *((__be32 *)hfso) = ((tmp_276 | tmp_278) | tmp_280) | tmp_282;
    }
    else {
      __u32 tmp_285;
      unsigned int tmp_284;
      
#line 1304 
      if (0 != 0) 
#line 1304 
                  tmp_284 = ((((*((__be32 *)hfso) << 24) | ((*((__be32 *)hfso) << 8) & 16711680U)) | ((*((__be32 *)hfso) >> 8) & 65280U)) | (*((__be32 *)hfso) >> 24)) & 2147483647U;
      else {
        __u32 tmp_283;
        
#line 1304 
        tmp_283 = __fswab32(*((__be32 *)hfso));
        
#line 1304 
        tmp_284 = tmp_283 & 2147483647U;
      }
      
#line 1304 
      tmp_285 = __fswab32(tmp_284);
      
#line 1304 
      *((__be32 *)hfso) = tmp_285;
    }
    {
      
#line 1306 
      bool __cond_22 = (_Bool)0;
      
#line 1306 
      if ((int)__cond_22 != 0) 
#line 1306 
                               __compiletime_assert_1307(); else ;
    }
    
#line 1306 
    if (0 != 0) {
      unsigned int tmp_289;
      
#line 1306 
      if (0 != 0) 
#line 1306 
                  tmp_289 = ((((((*((__be32 *)hfso) << 24) | ((*((__be32 *)hfso) << 8) & 16711680U)) | ((*((__be32 *)hfso) >> 8) & 65280U)) | (*((__be32 *)hfso) >> 24)) >> 24) & 192U) | 50331648U;
      else {
        __u32 tmp_288;
        
#line 1306 
        tmp_288 = __fswab32(*((__be32 *)hfso));
        
#line 1306 
        tmp_289 = ((tmp_288 >> 24) & 192U) | 50331648U;
      }
      
#line 1306 
      *((__be32 *)hfso) = tmp_289;
    }
    else {
      __u32 tmp_292;
      unsigned int tmp_291;
      
#line 1306 
      if (0 != 0) 
#line 1306 
                  tmp_291 = (((((*((__be32 *)hfso) << 24) | ((*((__be32 *)hfso) << 8) & 16711680U)) | ((*((__be32 *)hfso) >> 8) & 65280U)) | (*((__be32 *)hfso) >> 24)) & 3221225472U) | 3U;
      else {
        __u32 tmp_290;
        
#line 1306 
        tmp_290 = __fswab32(*((__be32 *)hfso));
        
#line 1306 
        tmp_291 = (tmp_290 & 3221225472U) | 3U;
      }
      
#line 1306 
      tmp_292 = __fswab32(tmp_291);
      
#line 1306 
      *((__be32 *)hfso) = tmp_292;
    }
    
#line 1308 
    goto ldv_55633;
    case 5: 
#line 1310 
    ;
    {
      
#line 1311 
      bool __cond_23 = (_Bool)0;
      
#line 1311 
      if ((int)__cond_23 != 0) 
#line 1311 
                               __compiletime_assert_1312(); else ;
    }
    
#line 1311 
    if (0 != 0) {
      unsigned int tmp_296;
      unsigned int tmp_298;
      unsigned int tmp_300;
      unsigned int tmp_302;
      
#line 1311 
      if (0 != 0) 
#line 1311 
                  tmp_296 = ((((*((__be32 *)hfso) << 24) | ((*((__be32 *)hfso) << 8) & 16711680U)) | ((*((__be32 *)hfso) >> 8) & 65280U)) | (*((__be32 *)hfso) >> 24)) << 24;
      else {
        __u32 tmp_295;
        
#line 1311 
        tmp_295 = __fswab32(*((__be32 *)hfso));
        
#line 1311 
        tmp_296 = tmp_295 << 24;
      }
      
#line 1311 
      if (0 != 0) 
#line 1311 
                  tmp_298 = (((((*((__be32 *)hfso) << 24) | ((*((__be32 *)hfso) << 8) & 16711680U)) | ((*((__be32 *)hfso) >> 8) & 65280U)) | (*((__be32 *)hfso) >> 24)) << 8) & 16711680U;
      else {
        __u32 tmp_297;
        
#line 1311 
        tmp_297 = __fswab32(*((__be32 *)hfso));
        
#line 1311 
        tmp_298 = (tmp_297 << 8) & 16711680U;
      }
      
#line 1311 
      if (0 != 0) 
#line 1311 
                  tmp_300 = (((((*((__be32 *)hfso) << 24) | ((*((__be32 *)hfso) << 8) & 16711680U)) | ((*((__be32 *)hfso) >> 8) & 65280U)) | (*((__be32 *)hfso) >> 24)) >> 8) & 65280U;
      else {
        __u32 tmp_299;
        
#line 1311 
        tmp_299 = __fswab32(*((__be32 *)hfso));
        
#line 1311 
        tmp_300 = (tmp_299 >> 8) & 65280U;
      }
      
#line 1311 
      if (0 != 0) 
#line 1311 
                  tmp_302 = (((((*((__be32 *)hfso) << 24) | ((*((__be32 *)hfso) << 8) & 16711680U)) | ((*((__be32 *)hfso) >> 8) & 65280U)) | (*((__be32 *)hfso) >> 24)) >> 24) | 128U;
      else {
        __u32 tmp_301;
        
#line 1311 
        tmp_301 = __fswab32(*((__be32 *)hfso));
        
#line 1311 
        tmp_302 = (tmp_301 >> 24) | 128U;
      }
      
#line 1311 
      *((__be32 *)hfso) = ((tmp_296 | tmp_298) | tmp_300) | tmp_302;
    }
    else {
      __u32 tmp_305;
      unsigned int tmp_304;
      
#line 1311 
      if (0 != 0) 
#line 1311 
                  tmp_304 = ((((*((__be32 *)hfso) << 24) | ((*((__be32 *)hfso) << 8) & 16711680U)) | ((*((__be32 *)hfso) >> 8) & 65280U)) | (*((__be32 *)hfso) >> 24)) | 2147483648U;
      else {
        __u32 tmp_303;
        
#line 1311 
        tmp_303 = __fswab32(*((__be32 *)hfso));
        
#line 1311 
        tmp_304 = tmp_303 | 2147483648U;
      }
      
#line 1311 
      tmp_305 = __fswab32(tmp_304);
      
#line 1311 
      *((__be32 *)hfso) = tmp_305;
    }
    {
      
#line 1313 
      bool __cond_24 = (_Bool)0;
      
#line 1313 
      if ((int)__cond_24 != 0) 
#line 1313 
                               __compiletime_assert_1314(); else ;
    }
    
#line 1313 
    if (0 != 0) {
      unsigned int tmp_309;
      
#line 1313 
      if (0 != 0) 
#line 1313 
                  tmp_309 = ((((((*((__be32 *)hfso) << 24) | ((*((__be32 *)hfso) << 8) & 16711680U)) | ((*((__be32 *)hfso) >> 8) & 65280U)) | (*((__be32 *)hfso) >> 24)) >> 24) & 192U) | 50331648U;
      else {
        __u32 tmp_308;
        
#line 1313 
        tmp_308 = __fswab32(*((__be32 *)hfso));
        
#line 1313 
        tmp_309 = ((tmp_308 >> 24) & 192U) | 50331648U;
      }
      
#line 1313 
      *((__be32 *)hfso) = tmp_309;
    }
    else {
      __u32 tmp_312;
      unsigned int tmp_311;
      
#line 1313 
      if (0 != 0) 
#line 1313 
                  tmp_311 = (((((*((__be32 *)hfso) << 24) | ((*((__be32 *)hfso) << 8) & 16711680U)) | ((*((__be32 *)hfso) >> 8) & 65280U)) | (*((__be32 *)hfso) >> 24)) & 3221225472U) | 3U;
      else {
        __u32 tmp_310;
        
#line 1313 
        tmp_310 = __fswab32(*((__be32 *)hfso));
        
#line 1313 
        tmp_311 = (tmp_310 & 3221225472U) | 3U;
      }
      
#line 1313 
      tmp_312 = __fswab32(tmp_311);
      
#line 1313 
      *((__be32 *)hfso) = tmp_312;
    }
    
#line 1315 
    goto ldv_55633;
  }
  ldv_55633: 
#line 1317 
  ;
  
#line 1318 
  return;
}


#line 1319  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_main.c"
static int mlx5e_open_tir(struct mlx5e_priv *priv, int tt)
{
  int __retres;
  u32 *in;
  void *tirc;
  int inlen;
  int err;
  
#line 1321 
  struct mlx5_core_dev *mdev = priv->mdev;
  
#line 1327 
  inlen = 272;
  
#line 1328 
  in = (u32 *)mlx5_vzalloc_2((unsigned long)inlen);
  
#line 1329 
  if (in == (u32 *)0U) {
    
#line 1330 
    __retres = -12;
    
#line 1330 
    goto return_label;
  }
  else ;
  
#line 1332 
  tirc = (void *)in + 32U;
  
#line 1334 
  mlx5e_build_tir_ctx(priv,(u32 *)tirc,tt);
  
#line 1336 
  err = mlx5_core_create_tir(mdev,in,inlen,& priv->tirn[tt]);
  
#line 1338 
  kvfree((void const *)in);
  
#line 1340 
  __retres = err;
  return_label: 
#line 1340 
                return __retres;
}


#line 1343  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_main.c"
static void mlx5e_close_tir(struct mlx5e_priv *priv, int tt)
{
  
#line 1345 
  mlx5_core_destroy_tir(priv->mdev,priv->tirn[tt]);
  
#line 1346 
  return;
}


#line 1348  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_main.c"
static int mlx5e_open_tirs(struct mlx5e_priv *priv)
{
  int __retres;
  int err;
  int i;
  
#line 1353 
  i = 0;
  
#line 1353 
  goto ldv_55711;
  ldv_55710: 
#line 1354 
  ;
  
#line 1354 
  err = mlx5e_open_tir(priv,i);
  
#line 1355 
  if (err != 0) 
#line 1356 
                goto err_close_tirs; else ;
  
#line 1353 
  i += 1;
  ldv_55711: 
#line 1354 
  ;
  
#line 1353 
  if (i <= 6) 
#line 1355 
              goto ldv_55710; else 
#line 1358 
                                   goto ldv_55712;
  ldv_55712: 
#line 1359 
  ;
  
#line 1359 
  __retres = 0;
  
#line 1359 
  goto return_label;
  err_close_tirs: 
#line 1361 
  ;
  
#line 1362 
  i -= 1;
  
#line 1362 
  goto ldv_55714;
  ldv_55713: 
#line 1363 
  ;
  
#line 1363 
  mlx5e_close_tir(priv,i);
  
#line 1362 
  i -= 1;
  ldv_55714: 
#line 1363 
  ;
  
#line 1362 
  if (i >= 0) 
#line 1364 
              goto ldv_55713; else 
#line 1367 
                                   goto ldv_55715;
  ldv_55715: 
#line 1368 
  ;
  
#line 1365 
  __retres = err;
  return_label: 
#line 1365 
                return __retres;
}


#line 1368  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_main.c"
static void mlx5e_close_tirs(struct mlx5e_priv *priv)
{
  int i;
  
#line 1372 
  i = 0;
  
#line 1372 
  goto ldv_55721;
  ldv_55720: 
#line 1373 
  ;
  
#line 1373 
  mlx5e_close_tir(priv,i);
  
#line 1372 
  i += 1;
  ldv_55721: 
#line 1373 
  ;
  
#line 1372 
  if (i <= 6) 
#line 1374 
              goto ldv_55720; else 
#line 1377 
                                   goto ldv_55722;
  ldv_55722: 
#line 1378 
  ;
  
#line 1379 
  return;
}


#line 1376  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_main.c"
static int mlx5e_set_dev_port_mtu(struct net_device *netdev)
{
  int __retres;
  int hw_mtu;
  int err;
  
#line 1378 
  struct mlx5e_priv *priv = netdev_priv((struct net_device const *)netdev);
  
#line 1379 
  struct mlx5_core_dev *mdev = priv->mdev;
  
#line 1383 
  err = mlx5_set_port_mtu(mdev,(int)(netdev->mtu + 22U),(unsigned char)1);
  
#line 1384 
  if (err != 0) {
    
#line 1385 
    __retres = err;
    
#line 1385 
    goto return_label;
  }
  else ;
  
#line 1387 
  mlx5_query_port_oper_mtu(mdev,& hw_mtu,(unsigned char)1);
  
#line 1389 
  if ((unsigned int)(hw_mtu + -22) != netdev->mtu) 
#line 1390 
                                                   netdev_warn((struct net_device const *)netdev,"%s: Port MTU %d is different than netdev mtu %d\n","mlx5e_set_dev_port_mtu",hw_mtu + -22,netdev->mtu); else ;
  
#line 1393 
  netdev->mtu = (unsigned int)(hw_mtu + -22);
  
#line 1394 
  __retres = 0;
  return_label: 
#line 1394 
                return __retres;
}


#line 1397  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_main.c"
int mlx5e_open_locked(struct net_device *netdev)
{
  int __retres;
  int num_txqs;
  int err;
  
#line 1399 
  struct mlx5e_priv *priv = netdev_priv((struct net_device const *)netdev);
  
#line 1403 
  num_txqs = (int)priv->params.num_channels * (int)priv->params.num_tc;
  
#line 1404 
  netif_set_real_num_tx_queues(netdev,(unsigned int)num_txqs);
  
#line 1405 
  netif_set_real_num_rx_queues(netdev,(unsigned int)priv->params.num_channels);
  
#line 1407 
  err = mlx5e_set_dev_port_mtu(netdev);
  
#line 1408 
  if (err != 0) {
    
#line 1409 
    __retres = err;
    
#line 1409 
    goto return_label;
  }
  else ;
  
#line 1411 
  err = mlx5e_open_tises(priv);
  
#line 1412 
  if (err != 0) {
    
#line 1413 
    netdev_err((struct net_device const *)netdev,"%s: mlx5e_open_tises failed, %d\n","mlx5e_open_locked",err);
    
#line 1415 
    __retres = err;
    
#line 1415 
    goto return_label;
  }
  else ;
  
#line 1418 
  err = mlx5e_open_channels(priv);
  
#line 1419 
  if (err != 0) {
    
#line 1420 
    netdev_err((struct net_device const *)netdev,"%s: mlx5e_open_channels failed, %d\n","mlx5e_open_locked",err);
    
#line 1422 
    goto err_close_tises;
  }
  else ;
  
#line 1425 
  err = mlx5e_open_rqt(priv);
  
#line 1426 
  if (err != 0) {
    
#line 1427 
    netdev_err((struct net_device const *)netdev,"%s: mlx5e_open_rqt failed, %d\n","mlx5e_open_locked",err);
    
#line 1429 
    goto err_close_channels;
  }
  else ;
  
#line 1432 
  err = mlx5e_open_tirs(priv);
  
#line 1433 
  if (err != 0) {
    
#line 1434 
    netdev_err((struct net_device const *)netdev,"%s: mlx5e_open_tir failed, %d\n","mlx5e_open_locked",err);
    
#line 1436 
    goto err_close_rqls;
  }
  else ;
  
#line 1439 
  err = mlx5e_open_flow_table(priv);
  
#line 1440 
  if (err != 0) {
    
#line 1441 
    netdev_err((struct net_device const *)netdev,"%s: mlx5e_open_flow_table failed, %d\n","mlx5e_open_locked",err);
    
#line 1443 
    goto err_close_tirs;
  }
  else ;
  
#line 1446 
  err = mlx5e_add_all_vlan_rules(priv);
  
#line 1447 
  if (err != 0) {
    
#line 1448 
    netdev_err((struct net_device const *)netdev,"%s: mlx5e_add_all_vlan_rules failed, %d\n","mlx5e_open_locked",err);
    
#line 1450 
    goto err_close_flow_table;
  }
  else ;
  
#line 1453 
  mlx5e_init_eth_addr(priv);
  
#line 1455 
  set_bit(1L,(unsigned long volatile *)(& priv->state));
  
#line 1457 
  mlx5e_update_carrier(priv);
  
#line 1458 
  mlx5e_set_rx_mode_core(priv);
  
#line 1460 
  ldv_schedule_delayed_work_83(& priv->update_stats_work,0UL);
  
#line 1461 
  __retres = 0;
  
#line 1461 
  goto return_label;
  err_close_flow_table: 
#line 1463 
  ;
  
#line 1464 
  mlx5e_close_flow_table(priv);
  err_close_tirs: 
#line 1466 
  ;
  
#line 1467 
  mlx5e_close_tirs(priv);
  err_close_rqls: 
#line 1469 
  ;
  
#line 1470 
  mlx5e_close_rqt(priv);
  err_close_channels: 
#line 1472 
  ;
  
#line 1473 
  mlx5e_close_channels(priv);
  err_close_tises: 
#line 1475 
  ;
  
#line 1476 
  mlx5e_close_tises(priv);
  
#line 1478 
  __retres = err;
  return_label: 
#line 1478 
                return __retres;
}


#line 1481  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_main.c"
static int mlx5e_open(struct net_device *netdev)
{
  int err;
  
#line 1483 
  struct mlx5e_priv *priv = netdev_priv((struct net_device const *)netdev);
  
#line 1486 
  ldv_mutex_lock_84(& priv->state_lock);
  
#line 1487 
  err = mlx5e_open_locked(netdev);
  
#line 1488 
  ldv_mutex_unlock_85(& priv->state_lock);
  
#line 1490 
  return err;
}


#line 1493  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_main.c"
int mlx5e_close_locked(struct net_device *netdev)
{
  int __retres;
  
#line 1495 
  struct mlx5e_priv *priv = netdev_priv((struct net_device const *)netdev);
  
#line 1497 
  set_bit(1L,(unsigned long volatile *)(& priv->state));
  
#line 1499 
  mlx5e_set_rx_mode_core(priv);
  
#line 1500 
  mlx5e_del_all_vlan_rules(priv);
  
#line 1501 
  netif_carrier_off(priv->netdev);
  
#line 1502 
  mlx5e_close_flow_table(priv);
  
#line 1503 
  mlx5e_close_tirs(priv);
  
#line 1504 
  mlx5e_close_rqt(priv);
  
#line 1505 
  mlx5e_close_channels(priv);
  
#line 1506 
  mlx5e_close_tises(priv);
  
#line 1508 
  __retres = 0;
  
#line 1508 
  return __retres;
}


#line 1511  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_main.c"
static int mlx5e_close(struct net_device *netdev)
{
  int err;
  
#line 1513 
  struct mlx5e_priv *priv = netdev_priv((struct net_device const *)netdev);
  
#line 1516 
  ldv_mutex_lock_86(& priv->state_lock);
  
#line 1517 
  err = mlx5e_close_locked(netdev);
  
#line 1518 
  ldv_mutex_unlock_87(& priv->state_lock);
  
#line 1520 
  return err;
}


#line 1523  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_main.c"
int mlx5e_update_priv_params(struct mlx5e_priv *priv, struct mlx5e_params *new_params)
{
  int was_opened;
  
#line 1526 
  int err = 0;
  {
    int tmp;
    
#line 1529 
    tmp = ldv_mutex_is_locked_88(& priv->state_lock);
    
#line 1529 
    int __ret_warn_on = tmp == 0;
    
#line 1529 
    if ((long)(__ret_warn_on != 0) != 0L) 
#line 1529 
                                          warn_slowpath_null("/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_main.c",1529); else ;
    
#line 1529 
    long tmp_2 = (long)(__ret_warn_on != 0);
  }
  
#line 1531 
  was_opened = constant_test_bit(1L,(unsigned long const volatile *)(& priv->state));
  
#line 1532 
  if (was_opened != 0) 
#line 1533 
                       mlx5e_close_locked(priv->netdev); else ;
  
#line 1535 
  priv->params = *new_params;
  
#line 1537 
  if (was_opened != 0) 
#line 1538 
                       err = mlx5e_open_locked(priv->netdev); else ;
  
#line 1540 
  return err;
}


#line 1544  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_main.c"
static struct rtnl_link_stats64 *mlx5e_get_stats(struct net_device *dev, struct rtnl_link_stats64 *stats)
{
  
#line 1546 
  struct mlx5e_priv *priv = netdev_priv((struct net_device const *)dev);
  
#line 1547 
  struct mlx5e_vport_stats *vstats = & priv->stats.vport;
  
#line 1549 
  stats->rx_packets = vstats->rx_packets;
  
#line 1550 
  stats->rx_bytes = vstats->rx_bytes;
  
#line 1551 
  stats->tx_packets = vstats->tx_packets;
  
#line 1552 
  stats->tx_bytes = vstats->tx_bytes;
  
#line 1553 
  stats->multicast = vstats->rx_multicast_packets + vstats->tx_multicast_packets;
  
#line 1555 
  stats->tx_errors = vstats->tx_error_packets;
  
#line 1556 
  stats->rx_errors = vstats->rx_error_packets;
  
#line 1557 
  stats->tx_dropped = vstats->tx_queue_dropped;
  
#line 1558 
  stats->rx_crc_errors = 0ULL;
  
#line 1559 
  stats->rx_length_errors = 0ULL;
  
#line 1561 
  return stats;
}


#line 1564  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_main.c"
static void mlx5e_set_rx_mode(struct net_device *dev)
{
  
#line 1566 
  struct mlx5e_priv *priv = netdev_priv((struct net_device const *)dev);
  
#line 1568 
  ldv_schedule_work_89(& priv->set_rx_mode_work);
  
#line 1569 
  return;
}


#line 1571  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_main.c"
static int mlx5e_set_mac(struct net_device *netdev, void *addr)
{
  int __retres;
  int tmp_1;
  bool tmp_0;
  
#line 1573 
  struct mlx5e_priv *priv = netdev_priv((struct net_device const *)netdev);
  
#line 1574 
  struct sockaddr *saddr = (struct sockaddr *)addr;
  
#line 1576 
  tmp_0 = is_valid_ether_addr((u8 const *)(& saddr->sa_data));
  
#line 1576 
  if (tmp_0) 
#line 1576 
             tmp_1 = 0; else 
#line 1576 
                             tmp_1 = 1;
  
#line 1576 
  if (tmp_1) {
    
#line 1577 
    __retres = -99;
    
#line 1577 
    goto return_label;
  }
  else ;
  
#line 1579 
  netif_addr_lock_bh_0(netdev);
  
#line 1580 
  ether_addr_copy(netdev->dev_addr,(u8 const *)(& saddr->sa_data));
  
#line 1581 
  netif_addr_unlock_bh_0(netdev);
  
#line 1583 
  ldv_schedule_work_90(& priv->set_rx_mode_work);
  
#line 1585 
  __retres = 0;
  return_label: 
#line 1585 
                return __retres;
}


#line 1588  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_main.c"
static int mlx5e_set_features(struct net_device *netdev, netdev_features_t features)
{
  int __retres;
  struct mlx5e_params new_params;
  
#line 1591 
  struct mlx5e_priv *priv = netdev_priv((struct net_device const *)netdev);
  
#line 1592 
  netdev_features_t changes = netdev->features ^ features;
  
#line 1594 
  bool update_params = (_Bool)0;
  
#line 1596 
  ldv_mutex_lock_91(& priv->state_lock);
  
#line 1597 
  new_params = priv->params;
  
#line 1599 
  if ((changes & 32768ULL) != 0ULL) {
    
#line 1600 
    new_params.lro_en = (_Bool)((features & 32768ULL) != 0ULL);
    
#line 1601 
    update_params = (_Bool)1;
  }
  else ;
  
#line 1604 
  if ((int)update_params != 0) 
#line 1605 
                               mlx5e_update_priv_params(priv,& new_params); else ;
  
#line 1607 
  if ((changes & 512ULL) != 0ULL) 
    
#line 1608 
    if ((features & 512ULL) != 0ULL) 
#line 1609 
                                     mlx5e_enable_vlan_filter(priv); else 
                                                                    
#line 1611 
                                                                    mlx5e_disable_vlan_filter(priv);
  else ;
  
#line 1614 
  ldv_mutex_unlock_92(& priv->state_lock);
  
#line 1616 
  __retres = 0;
  
#line 1616 
  return __retres;
}


#line 1619  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_main.c"
static int mlx5e_change_mtu(struct net_device *netdev, int new_mtu)
{
  int __retres;
  int max_mtu;
  int err;
  
#line 1621 
  struct mlx5e_priv *priv = netdev_priv((struct net_device const *)netdev);
  
#line 1622 
  struct mlx5_core_dev *mdev = priv->mdev;
  
#line 1626 
  mlx5_query_port_max_mtu(mdev,& max_mtu,(unsigned char)1);
  
#line 1628 
  if (new_mtu > max_mtu) {
    
#line 1629 
    netdev_err((struct net_device const *)netdev,"%s: Bad MTU (%d) > (%d) Max\n","mlx5e_change_mtu",new_mtu,max_mtu);
    
#line 1632 
    __retres = -22;
    
#line 1632 
    goto return_label;
  }
  else ;
  
#line 1635 
  ldv_mutex_lock_93(& priv->state_lock);
  
#line 1636 
  netdev->mtu = (unsigned int)new_mtu;
  
#line 1637 
  err = mlx5e_update_priv_params(priv,& priv->params);
  
#line 1638 
  ldv_mutex_unlock_94(& priv->state_lock);
  
#line 1640 
  __retres = err;
  return_label: 
#line 1640 
                return __retres;
}


#line 1643  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_main.c"
static struct net_device_ops mlx5e_netdev_ops = {.ndo_init = (int (*)(struct net_device *))0, .ndo_uninit = (void (*)(struct net_device *))0, .ndo_open = & mlx5e_open, .ndo_stop = & mlx5e_close, .ndo_start_xmit = & mlx5e_xmit, .ndo_select_queue = (u16 (*)(struct net_device *, struct sk_buff *, void *, u16 (*)(struct net_device *, struct sk_buff *)))0, .ndo_change_rx_flags = (void (*)(struct net_device *, int ))0, .ndo_set_rx_mode = & mlx5e_set_rx_mode, .ndo_set_mac_address = & mlx5e_set_mac, .ndo_validate_addr = (int (*)(struct net_device *))0, .ndo_do_ioctl = (int (*)(struct net_device *, struct ifreq *, int ))0, .ndo_set_config = (int (*)(struct net_device *, struct ifmap *))0, .ndo_change_mtu = & mlx5e_change_mtu, .ndo_neigh_setup = (int (*)(struct net_device *, struct neigh_parms *))0, .ndo_tx_timeout = (void (*)(struct net_device *))0, .ndo_get_stats64 = & mlx5e_get_stats, .ndo_get_stats = (struct net_device_stats *(*)(struct net_device *))0, .ndo_vlan_rx_add_vid = & mlx5e_vlan_rx_add_vid, .ndo_vlan_rx_kill_vid = & mlx5e_vlan_rx_kill_vid, .ndo_poll_controller = (void (*)(struct net_device *))0, .ndo_netpoll_setup = (int (*)(struct net_device *, struct netpoll_info *))0, .ndo_netpoll_cleanup = (void (*)(struct net_device *))0, .ndo_busy_poll = (int (*)(struct napi_struct *))0, .ndo_set_vf_mac = (int (*)(struct net_device *, int , u8 *))0, .ndo_set_vf_vlan = (int (*)(struct net_device *, int , u16 , u8 ))0, .ndo_set_vf_rate = (int (*)(struct net_device *, int , int , int ))0, .ndo_set_vf_spoofchk = (int (*)(struct net_device *, int , bool ))0, .ndo_get_vf_config = (int (*)(struct net_device *, int , struct ifla_vf_info *))0, .ndo_set_vf_link_state = (int (*)(struct net_device *, int , int ))0, .ndo_get_vf_stats = (int (*)(struct net_device *, int , struct ifla_vf_stats *))0, .ndo_set_vf_port = (int (*)(struct net_device *, int , struct nlattr **))0, .ndo_get_vf_port = (int (*)(struct net_device *, int , struct sk_buff *))0, .ndo_set_vf_rss_query_en = (int (*)(struct net_device *, int , bool ))0, .ndo_setup_tc = (int (*)(struct net_device *, u8 ))0, .ndo_fcoe_enable = (int (*)(struct net_device *))0, .ndo_fcoe_disable = (int (*)(struct net_device *))0, .ndo_fcoe_ddp_setup = (int (*)(struct net_device *, u16 , struct scatterlist *, unsigned int ))0, .ndo_fcoe_ddp_done = (int (*)(struct net_device *, u16 ))0, .ndo_fcoe_ddp_target = (int (*)(struct net_device *, u16 , struct scatterlist *, unsigned int ))0, .ndo_fcoe_get_hbainfo = (int (*)(struct net_device *, struct netdev_fcoe_hbainfo *))0, .ndo_fcoe_get_wwn = (int (*)(struct net_device *, u64 *, int ))0, .ndo_rx_flow_steer = (int (*)(struct net_device *, struct sk_buff const *, u16 , u32 ))0, .ndo_add_slave = (int (*)(struct net_device *, struct net_device *))0, .ndo_del_slave = (int (*)(struct net_device *, struct net_device *))0, .ndo_fix_features = (netdev_features_t (*)(struct net_device *, netdev_features_t ))0, .ndo_set_features = & mlx5e_set_features, .ndo_neigh_construct = (int (*)(struct neighbour *))0, .ndo_neigh_destroy = (void (*)(struct neighbour *))0, .ndo_fdb_add = (int (*)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char const *, u16 , u16 ))0, .ndo_fdb_del = (int (*)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char const *, u16 ))0, .ndo_fdb_dump = (int (*)(struct sk_buff *, struct netlink_callback *, struct net_device *, struct net_device *, int ))0, .ndo_bridge_setlink = (int (*)(struct net_device *, struct nlmsghdr *, u16 ))0, .ndo_bridge_getlink = (int (*)(struct sk_buff *, u32 , u32 , struct net_device *, u32 , int ))0, .ndo_bridge_dellink = (int (*)(struct net_device *, struct nlmsghdr *, u16 ))0, .ndo_change_carrier = (int (*)(struct net_device *, bool ))0, .ndo_get_phys_port_id = (int (*)(struct net_device *, struct netdev_phys_item_id *))0, .ndo_get_phys_port_name = (int (*)(struct net_device *, char *, size_t ))0, .ndo_add_vxlan_port = (void (*)(struct net_device *, sa_family_t , __be16 ))0, .ndo_del_vxlan_port = (void (*)(struct net_device *, sa_family_t , __be16 ))0, .ndo_dfwd_add_station = (void *(*)(struct net_device *, struct net_device *))0, .ndo_dfwd_del_station = (void (*)(struct net_device *, void *))0, .ndo_dfwd_start_xmit = (netdev_tx_t (*)(struct sk_buff *, struct net_device *, void *))0, .ndo_get_lock_subclass = (int (*)(struct net_device *))0, .ndo_features_check = (netdev_features_t (*)(struct sk_buff *, struct net_device *, netdev_features_t ))0, .ndo_set_tx_maxrate = (int (*)(struct net_device *, int , u32 ))0, .ndo_get_iflink = (int (*)(struct net_device const *))0};

#line 1656  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_main.c"
static int mlx5e_check_required_hca_cap(struct mlx5_core_dev *mdev)
{
  int __retres;
  int tmp_0;
  int tmp_3;
  
#line 1658 
  if (0 != 0) 
#line 1658 
              tmp_0 = ((((((*((__be32 *)(& mdev->hca_caps_cur[0]) + 13U) << 24) | ((*((__be32 *)(& mdev->hca_caps_cur[0]) + 13U) << 8) & 16711680U)) | ((*((__be32 *)(& mdev->hca_caps_cur[0]) + 13U) >> 8) & 65280U)) | (*((__be32 *)(& mdev->hca_caps_cur[0]) + 13U) >> 24)) >> 8UL) & 3U) != 1U;
  else {
    __u32 tmp;
    
#line 1658 
    tmp = __fswab32(*((__be32 *)(& mdev->hca_caps_cur[0]) + 13U));
    
#line 1658 
    tmp_0 = ((tmp >> 8UL) & 3U) != 1U;
  }
  
#line 1658 
  if (tmp_0) {
    
#line 1659 
    __retres = -524;
    
#line 1659 
    goto return_label;
  }
  else ;
  
#line 1660 
  if (0 != 0) 
#line 1660 
              tmp_3 = (((((*((__be32 *)(& mdev->hca_caps_cur[0]) + 16U) << 24) | ((*((__be32 *)(& mdev->hca_caps_cur[0]) + 16U) << 8) & 16711680U)) | ((*((__be32 *)(& mdev->hca_caps_cur[0]) + 16U) >> 8) & 65280U)) | (*((__be32 *)(& mdev->hca_caps_cur[0]) + 16U) >> 24)) & 8U) == 0U;
  else {
    __u32 tmp_2;
    
#line 1660 
    tmp_2 = __fswab32(*((__be32 *)(& mdev->hca_caps_cur[0]) + 16U));
    
#line 1660 
    tmp_3 = (tmp_2 & 8U) == 0U;
  }
  
#line 1660 
  if (tmp_3) 
#line 1660 
             goto _LOR;
  else {
    int tmp_5;
    
#line 1660 
    if (0 != 0) 
#line 1660 
                tmp_5 = (((((*((__be32 *)(& mdev->hca_caps_cur[0]) + 13U) << 24) | ((*((__be32 *)(& mdev->hca_caps_cur[0]) + 13U) << 8) & 16711680U)) | ((*((__be32 *)(& mdev->hca_caps_cur[0]) + 13U) >> 8) & 65280U)) | (*((__be32 *)(& mdev->hca_caps_cur[0]) + 13U) >> 24)) & 33554432U) == 0U;
    else {
      __u32 tmp_4;
      
#line 1661 
      tmp_4 = __fswab32(*((__be32 *)(& mdev->hca_caps_cur[0]) + 13U));
      
#line 1660 
      tmp_5 = (tmp_4 & 33554432U) == 0U;
    }
    
#line 1660 
    if (tmp_5) 
#line 1660 
               goto _LOR;
    else {
      int tmp_7;
      
#line 1661 
      if (0 != 0) 
#line 1661 
                  tmp_7 = ((((*((__be32 *)(& mdev->hca_caps_cur[1])) << 24) | ((*((__be32 *)(& mdev->hca_caps_cur[1])) << 8) & 16711680U)) | ((*((__be32 *)(& mdev->hca_caps_cur[1])) >> 8) & 65280U)) | (*((__be32 *)(& mdev->hca_caps_cur[1])) >> 24)) >= (unsigned int)0;
      else {
        __u32 tmp_6;
        
#line 1662 
        tmp_6 = __fswab32(*((__be32 *)(& mdev->hca_caps_cur[1])));
        
#line 1661 
        tmp_7 = tmp_6 >= (__u32)0;
      }
      
#line 1661 
      if (tmp_7) 
#line 1660 
                 goto _LOR;
      else {
        int tmp_9;
        
#line 1662 
        if (0 != 0) 
#line 1662 
                    tmp_9 = ((((((*((__be32 *)(& mdev->hca_caps_cur[1])) << 24) | ((*((__be32 *)(& mdev->hca_caps_cur[1])) << 8) & 16711680U)) | ((*((__be32 *)(& mdev->hca_caps_cur[1])) >> 8) & 65280U)) | (*((__be32 *)(& mdev->hca_caps_cur[1])) >> 24)) >> 16UL) & 31U) == 0U;
        else {
          __u32 tmp_8;
          
#line 1663 
          tmp_8 = __fswab32(*((__be32 *)(& mdev->hca_caps_cur[1])));
          
#line 1662 
          tmp_9 = ((tmp_8 >> 16UL) & 31U) == 0U;
        }
        
#line 1662 
        if (tmp_9) 
#line 1660 
                   goto _LOR;
        else {
          int tmp_11;
          
#line 1663 
          if (0 != 0) 
#line 1663 
                      tmp_11 = (((((*((__be32 *)(& mdev->hca_caps_cur[1])) << 24) | ((*((__be32 *)(& mdev->hca_caps_cur[1])) << 8) & 16711680U)) | ((*((__be32 *)(& mdev->hca_caps_cur[1])) >> 8) & 65280U)) | (*((__be32 *)(& mdev->hca_caps_cur[1])) >> 24)) & 1073741824U) == 0U;
          else {
            __u32 tmp_10;
            
#line 1664 
            tmp_10 = __fswab32(*((__be32 *)(& mdev->hca_caps_cur[1])));
            
#line 1663 
            tmp_11 = (tmp_10 & 1073741824U) == 0U;
          }
          
#line 1663 
          if (tmp_11) 
#line 1660 
                      goto _LOR;
          else {
            int tmp_13;
            
#line 1664 
            if (0 != 0) 
#line 1664 
                        tmp_13 = ((((((*((__be32 *)(& mdev->hca_caps_cur[1])) << 24) | ((*((__be32 *)(& mdev->hca_caps_cur[1])) << 8) & 16711680U)) | ((*((__be32 *)(& mdev->hca_caps_cur[1])) >> 8) & 65280U)) | (*((__be32 *)(& mdev->hca_caps_cur[1])) >> 24)) >> 8UL) & 15U) == 0U;
            else {
              __u32 tmp_12;
              
#line 1665 
              tmp_12 = __fswab32(*((__be32 *)(& mdev->hca_caps_cur[1])));
              
#line 1664 
              tmp_13 = ((tmp_12 >> 8UL) & 15U) == 0U;
            }
            
#line 1664 
            if (tmp_13) 
#line 1660 
                        goto _LOR;
            else {
              int tmp_15;
              
#line 1665 
              if (0 != 0) 
#line 1665 
                          tmp_15 = (((((*((__be32 *)(& mdev->hca_caps_cur[7]) + 17U) << 24) | ((*((__be32 *)(& mdev->hca_caps_cur[7]) + 17U) << 8) & 16711680U)) | ((*((__be32 *)(& mdev->hca_caps_cur[7]) + 17U) >> 8) & 65280U)) | (*((__be32 *)(& mdev->hca_caps_cur[7]) + 17U) >> 24)) & 255U) <= 2U;
              else {
                __u32 tmp_14;
                
#line 1666 
                tmp_14 = __fswab32(*((__be32 *)(& mdev->hca_caps_cur[7]) + 17U));
                
#line 1665 
                tmp_15 = (tmp_14 & 255U) <= 2U;
              }
              
#line 1665 
              if (tmp_15) {
                _LOR: {
                        struct task_struct *tmp_1;
                        
#line 1669 
                        tmp_1 = get_current();
                        
#line 1669 
                        ;
                        
#line 1669 
                        printk("\001",(char *)(& mdev->priv.name),"mlx5e_check_required_hca_cap",1670,tmp_1->pid);
                        
#line 1671 
                        __retres = -524;
                        
#line 1671 
                        goto return_label;
                      }
              }
              else ;
            }
          }
        }
      }
    }
  }
  
#line 1673 
  __retres = 0;
  return_label: 
#line 1673 
                return __retres;
}


#line 1676  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_main.c"
static void mlx5e_build_netdev_priv(struct mlx5_core_dev *mdev, struct net_device *netdev, int num_comp_vectors)
{
  int tmp_146;
  int tmp_72;
  unsigned long tmp_71;
  
#line 1680 
  struct mlx5e_priv *priv = netdev_priv((struct net_device const *)netdev);
  
#line 1682 
  priv->params.log_sq_size = (unsigned char)10U;
  
#line 1684 
  priv->params.log_rq_size = (unsigned char)10U;
  
#line 1686 
  priv->params.rx_cq_moderation_usec = (unsigned short)16U;
  
#line 1688 
  priv->params.rx_cq_moderation_pkts = (unsigned short)32U;
  
#line 1690 
  priv->params.tx_cq_moderation_usec = (unsigned short)16U;
  
#line 1692 
  priv->params.tx_cq_moderation_pkts = (unsigned short)32U;
  
#line 1694 
  priv->params.min_rx_wqes = (unsigned short)128U;
  
#line 1696 
  if (0 != 0) {
    unsigned long tmp_69;
    
#line 1696 
    if (num_comp_vectors != 1) {
      unsigned long tmp_68;
      
#line 1696 
      if (0 != 0) {
        unsigned long tmp_66;
        
#line 1696 
        if (num_comp_vectors + -1 <= 0) {
          int tmp_0;
          
#line 1696 
          tmp_0 = ____ilog2_NaN();
          
#line 1696 
          tmp_66 = 1UL << (tmp_0 + 1);
        }
        else {
          unsigned long tmp_65;
          
#line 1696 
          if (num_comp_vectors + -1 >= 0) {
            unsigned long tmp_64;
            
#line 1696 
            if (((unsigned long long)(num_comp_vectors + -1) & 4611686018427387904ULL) == 0ULL) {
              unsigned long tmp_63;
              
#line 1696 
              if (((unsigned long long)(num_comp_vectors + -1) & 2305843009213693952ULL) == 0ULL) {
                unsigned long tmp_62;
                
#line 1696 
                if (((unsigned long long)(num_comp_vectors + -1) & 1152921504606846976ULL) == 0ULL) {
                  unsigned long tmp_61;
                  
#line 1696 
                  if (((unsigned long long)(num_comp_vectors + -1) & 576460752303423488ULL) == 0ULL) {
                    unsigned long tmp_60;
                    
#line 1696 
                    if (((unsigned long long)(num_comp_vectors + -1) & 288230376151711744ULL) == 0ULL) {
                      unsigned long tmp_59;
                      
#line 1696 
                      if (((unsigned long long)(num_comp_vectors + -1) & 144115188075855872ULL) == 0ULL) {
                        unsigned long tmp_58;
                        
#line 1696 
                        if (((unsigned long long)(num_comp_vectors + -1) & 72057594037927936ULL) == 0ULL) {
                          unsigned long tmp_57;
                          
#line 1696 
                          if (((unsigned long long)(num_comp_vectors + -1) & 36028797018963968ULL) == 0ULL) {
                            unsigned long tmp_56;
                            
#line 1696 
                            if (((unsigned long long)(num_comp_vectors + -1) & 18014398509481984ULL) == 0ULL) {
                              unsigned long tmp_55;
                              
#line 1696 
                              if (((unsigned long long)(num_comp_vectors + -1) & 9007199254740992ULL) == 0ULL) {
                                unsigned long tmp_54;
                                
#line 1696 
                                if (((unsigned long long)(num_comp_vectors + -1) & 4503599627370496ULL) == 0ULL) {
                                  unsigned long tmp_53;
                                  
#line 1696 
                                  if (((unsigned long long)(num_comp_vectors + -1) & 2251799813685248ULL) == 0ULL) {
                                    unsigned long tmp_52;
                                    
#line 1696 
                                    if (((unsigned long long)(num_comp_vectors + -1) & 1125899906842624ULL) == 0ULL) {
                                      unsigned long tmp_51;
                                      
#line 1696 
                                      if (((unsigned long long)(num_comp_vectors + -1) & 562949953421312ULL) == 0ULL) {
                                        unsigned long tmp_50;
                                        
#line 1696 
                                        if (((unsigned long long)(num_comp_vectors + -1) & 281474976710656ULL) == 0ULL) {
                                          unsigned long tmp_49;
                                          
#line 1696 
                                          if (((unsigned long long)(num_comp_vectors + -1) & 140737488355328ULL) == 0ULL) {
                                            unsigned long tmp_48;
                                            
#line 1696 
                                            if (((unsigned long long)(num_comp_vectors + -1) & 70368744177664ULL) == 0ULL) {
                                              unsigned long tmp_47;
                                              
#line 1696 
                                              if (((unsigned long long)(num_comp_vectors + -1) & 35184372088832ULL) == 0ULL) {
                                                unsigned long tmp_46;
                                                
#line 1696 
                                                if (((unsigned long long)(num_comp_vectors + -1) & 17592186044416ULL) == 0ULL) {
                                                  unsigned long tmp_45;
                                                  
#line 1696 
                                                  if (((unsigned long long)(num_comp_vectors + -1) & 8796093022208ULL) == 0ULL) {
                                                    unsigned long tmp_44;
                                                    
#line 1696 
                                                    if (((unsigned long long)(num_comp_vectors + -1) & 4398046511104ULL) == 0ULL) {
                                                      unsigned long tmp_43;
                                                      
#line 1696 
                                                      if (((unsigned long long)(num_comp_vectors + -1) & 2199023255552ULL) == 0ULL) {
                                                        unsigned long tmp_42;
                                                        
#line 1696 
                                                        if (((unsigned long long)(num_comp_vectors + -1) & 1099511627776ULL) == 0ULL) {
                                                          unsigned long tmp_41;
                                                          
#line 1696 
                                                          if (((unsigned long long)(num_comp_vectors + -1) & 549755813888ULL) == 0ULL) {
                                                            unsigned long tmp_40;
                                                            
#line 1696 
                                                            if (((unsigned long long)(num_comp_vectors + -1) & 274877906944ULL) == 0ULL) {
                                                              unsigned long tmp_39;
                                                              
#line 1696 
                                                              if (((unsigned long long)(num_comp_vectors + -1) & 137438953472ULL) == 0ULL) {
                                                                unsigned long tmp_38;
                                                                
#line 1696 
                                                                if (((unsigned long long)(num_comp_vectors + -1) & 68719476736ULL) == 0ULL) {
                                                                  unsigned long tmp_37;
                                                                  
#line 1696 
                                                                  if (
                                                                    ((unsigned long long)(num_comp_vectors + -1) & 34359738368ULL) == 0ULL) {
                                                                    unsigned long tmp_36;
                                                                    
#line 1696 
                                                                    if (
                                                                    ((unsigned long long)(num_comp_vectors + -1) & 17179869184ULL) == 0ULL) {
                                                                    unsigned long tmp_35;
                                                                    
#line 1696 
                                                                    if (
                                                                    ((unsigned long long)(num_comp_vectors + -1) & 8589934592ULL) == 0ULL) {
                                                                    unsigned long tmp_34;
                                                                    
#line 1696 
                                                                    if (
                                                                    ((unsigned long long)(num_comp_vectors + -1) & 4294967296ULL) == 0ULL) {
                                                                    unsigned long tmp_33;
                                                                    
#line 1696 
                                                                    if (
                                                                    num_comp_vectors + -1 >= 0) {
                                                                    unsigned long tmp_32;
                                                                    
#line 1696 
                                                                    if (
                                                                    ((unsigned long long)(num_comp_vectors + -1) & 1073741824ULL) == 0ULL) {
                                                                    unsigned long tmp_31;
                                                                    
#line 1696 
                                                                    if (
                                                                    ((unsigned long long)(num_comp_vectors + -1) & 536870912ULL) == 0ULL) {
                                                                    unsigned long tmp_30;
                                                                    
#line 1696 
                                                                    if (
                                                                    ((unsigned long long)(num_comp_vectors + -1) & 268435456ULL) == 0ULL) {
                                                                    unsigned long tmp_29;
                                                                    
#line 1696 
                                                                    if (
                                                                    ((unsigned long long)(num_comp_vectors + -1) & 134217728ULL) == 0ULL) {
                                                                    unsigned long tmp_28;
                                                                    
#line 1696 
                                                                    if (
                                                                    ((unsigned long long)(num_comp_vectors + -1) & 67108864ULL) == 0ULL) {
                                                                    unsigned long tmp_27;
                                                                    
#line 1696 
                                                                    if (
                                                                    ((unsigned long long)(num_comp_vectors + -1) & 33554432ULL) == 0ULL) {
                                                                    unsigned long tmp_26;
                                                                    
#line 1696 
                                                                    if (
                                                                    ((unsigned long long)(num_comp_vectors + -1) & 16777216ULL) == 0ULL) {
                                                                    unsigned long tmp_25;
                                                                    
#line 1696 
                                                                    if (
                                                                    ((unsigned long long)(num_comp_vectors + -1) & 8388608ULL) == 0ULL) {
                                                                    unsigned long tmp_24;
                                                                    
#line 1696 
                                                                    if (
                                                                    ((unsigned long long)(num_comp_vectors + -1) & 4194304ULL) == 0ULL) {
                                                                    unsigned long tmp_23;
                                                                    
#line 1696 
                                                                    if (
                                                                    ((unsigned long long)(num_comp_vectors + -1) & 2097152ULL) == 0ULL) {
                                                                    unsigned long tmp_22;
                                                                    
#line 1696 
                                                                    if (
                                                                    ((unsigned long long)(num_comp_vectors + -1) & 1048576ULL) == 0ULL) {
                                                                    unsigned long tmp_21;
                                                                    
#line 1696 
                                                                    if (
                                                                    ((unsigned long long)(num_comp_vectors + -1) & 524288ULL) == 0ULL) {
                                                                    unsigned long tmp_20;
                                                                    
#line 1696 
                                                                    if (
                                                                    ((unsigned long long)(num_comp_vectors + -1) & 262144ULL) == 0ULL) {
                                                                    unsigned long tmp_19;
                                                                    
#line 1696 
                                                                    if (
                                                                    ((unsigned long long)(num_comp_vectors + -1) & 131072ULL) == 0ULL) {
                                                                    unsigned long tmp_18;
                                                                    
#line 1696 
                                                                    if (
                                                                    ((unsigned long long)(num_comp_vectors + -1) & 65536ULL) == 0ULL) {
                                                                    unsigned long tmp_17;
                                                                    
#line 1696 
                                                                    if (
                                                                    ((unsigned long long)(num_comp_vectors + -1) & 32768ULL) == 0ULL) {
                                                                    unsigned long tmp_16;
                                                                    
#line 1696 
                                                                    if (
                                                                    ((unsigned long long)(num_comp_vectors + -1) & 16384ULL) == 0ULL) {
                                                                    unsigned long tmp_15;
                                                                    
#line 1696 
                                                                    if (
                                                                    ((unsigned long long)(num_comp_vectors + -1) & 8192ULL) == 0ULL) {
                                                                    unsigned long tmp_14;
                                                                    
#line 1696 
                                                                    if (
                                                                    ((unsigned long long)(num_comp_vectors + -1) & 4096ULL) == 0ULL) {
                                                                    unsigned long tmp_13;
                                                                    
#line 1696 
                                                                    if (
                                                                    ((unsigned long long)(num_comp_vectors + -1) & 2048ULL) == 0ULL) {
                                                                    unsigned long tmp_12;
                                                                    
#line 1696 
                                                                    if (
                                                                    ((unsigned long long)(num_comp_vectors + -1) & 1024ULL) == 0ULL) {
                                                                    unsigned long tmp_11;
                                                                    
#line 1696 
                                                                    if (
                                                                    ((unsigned long long)(num_comp_vectors + -1) & 512ULL) == 0ULL) {
                                                                    unsigned long tmp_10;
                                                                    
#line 1696 
                                                                    if (
                                                                    ((unsigned long long)(num_comp_vectors + -1) & 256ULL) == 0ULL) {
                                                                    unsigned long tmp_9;
                                                                    
#line 1696 
                                                                    if (
                                                                    ((unsigned long long)(num_comp_vectors + -1) & 128ULL) == 0ULL) {
                                                                    unsigned long tmp_8;
                                                                    
#line 1696 
                                                                    if (
                                                                    ((unsigned long long)(num_comp_vectors + -1) & 64ULL) == 0ULL) {
                                                                    unsigned long tmp_7;
                                                                    
#line 1696 
                                                                    if (
                                                                    ((unsigned long long)(num_comp_vectors + -1) & 32ULL) == 0ULL) {
                                                                    unsigned long tmp_6;
                                                                    
#line 1696 
                                                                    if (
                                                                    ((unsigned long long)(num_comp_vectors + -1) & 16ULL) == 0ULL) {
                                                                    unsigned long tmp_5;
                                                                    
#line 1696 
                                                                    if (
                                                                    ((unsigned long long)(num_comp_vectors + -1) & 8ULL) == 0ULL) {
                                                                    unsigned long tmp_4;
                                                                    
#line 1696 
                                                                    if (
                                                                    ((unsigned long long)(num_comp_vectors + -1) & 4ULL) == 0ULL) {
                                                                    unsigned long tmp_3;
                                                                    
#line 1696 
                                                                    if (
                                                                    ((unsigned long long)(num_comp_vectors + -1) & 2ULL) == 0ULL) {
                                                                    unsigned long tmp_2;
                                                                    
#line 1696 
                                                                    if (
                                                                    ((unsigned long long)(num_comp_vectors + -1) & 1ULL) == 0ULL) {
                                                                    int tmp_1;
                                                                    
#line 1696 
                                                                    tmp_1 = ____ilog2_NaN();
                                                                    
#line 1696 
                                                                    tmp_2 = 1UL << (tmp_1 + 1);
                                                                    }
                                                                    else 
                                                                    
#line 1696 
                                                                    tmp_2 = 2UL;
                                                                    
#line 1696 
                                                                    tmp_3 = tmp_2;
                                                                    }
                                                                    else 
                                                                    
#line 1696 
                                                                    tmp_3 = 4UL;
                                                                    
#line 1696 
                                                                    tmp_4 = tmp_3;
                                                                    }
                                                                    else 
                                                                    
#line 1696 
                                                                    tmp_4 = 8UL;
                                                                    
#line 1696 
                                                                    tmp_5 = tmp_4;
                                                                    }
                                                                    else 
                                                                    
#line 1696 
                                                                    tmp_5 = 16UL;
                                                                    
#line 1696 
                                                                    tmp_6 = tmp_5;
                                                                    }
                                                                    else 
                                                                    
#line 1696 
                                                                    tmp_6 = 32UL;
                                                                    
#line 1696 
                                                                    tmp_7 = tmp_6;
                                                                    }
                                                                    else 
                                                                    
#line 1696 
                                                                    tmp_7 = 64UL;
                                                                    
#line 1696 
                                                                    tmp_8 = tmp_7;
                                                                    }
                                                                    else 
                                                                    
#line 1696 
                                                                    tmp_8 = 128UL;
                                                                    
#line 1696 
                                                                    tmp_9 = tmp_8;
                                                                    }
                                                                    else 
                                                                    
#line 1696 
                                                                    tmp_9 = 256UL;
                                                                    
#line 1696 
                                                                    tmp_10 = tmp_9;
                                                                    }
                                                                    else 
                                                                    
#line 1696 
                                                                    tmp_10 = 512UL;
                                                                    
#line 1696 
                                                                    tmp_11 = tmp_10;
                                                                    }
                                                                    else 
                                                                    
#line 1696 
                                                                    tmp_11 = 1024UL;
                                                                    
#line 1696 
                                                                    tmp_12 = tmp_11;
                                                                    }
                                                                    else 
                                                                    
#line 1696 
                                                                    tmp_12 = 2048UL;
                                                                    
#line 1696 
                                                                    tmp_13 = tmp_12;
                                                                    }
                                                                    else 
                                                                    
#line 1696 
                                                                    tmp_13 = 4096UL;
                                                                    
#line 1696 
                                                                    tmp_14 = tmp_13;
                                                                    }
                                                                    else 
                                                                    
#line 1696 
                                                                    tmp_14 = 8192UL;
                                                                    
#line 1696 
                                                                    tmp_15 = tmp_14;
                                                                    }
                                                                    else 
                                                                    
#line 1696 
                                                                    tmp_15 = 16384UL;
                                                                    
#line 1696 
                                                                    tmp_16 = tmp_15;
                                                                    }
                                                                    else 
                                                                    
#line 1696 
                                                                    tmp_16 = 32768UL;
                                                                    
#line 1696 
                                                                    tmp_17 = tmp_16;
                                                                    }
                                                                    else 
                                                                    
#line 1696 
                                                                    tmp_17 = 65536UL;
                                                                    
#line 1696 
                                                                    tmp_18 = tmp_17;
                                                                    }
                                                                    else 
                                                                    
#line 1696 
                                                                    tmp_18 = 131072UL;
                                                                    
#line 1696 
                                                                    tmp_19 = tmp_18;
                                                                    }
                                                                    else 
                                                                    
#line 1696 
                                                                    tmp_19 = 262144UL;
                                                                    
#line 1696 
                                                                    tmp_20 = tmp_19;
                                                                    }
                                                                    else 
                                                                    
#line 1696 
                                                                    tmp_20 = 524288UL;
                                                                    
#line 1696 
                                                                    tmp_21 = tmp_20;
                                                                    }
                                                                    else 
                                                                    
#line 1696 
                                                                    tmp_21 = 1048576UL;
                                                                    
#line 1696 
                                                                    tmp_22 = tmp_21;
                                                                    }
                                                                    else 
                                                                    
#line 1696 
                                                                    tmp_22 = 2097152UL;
                                                                    
#line 1696 
                                                                    tmp_23 = tmp_22;
                                                                    }
                                                                    else 
                                                                    
#line 1696 
                                                                    tmp_23 = 4194304UL;
                                                                    
#line 1696 
                                                                    tmp_24 = tmp_23;
                                                                    }
                                                                    else 
                                                                    
#line 1696 
                                                                    tmp_24 = 8388608UL;
                                                                    
#line 1696 
                                                                    tmp_25 = tmp_24;
                                                                    }
                                                                    else 
                                                                    
#line 1696 
                                                                    tmp_25 = 16777216UL;
                                                                    
#line 1696 
                                                                    tmp_26 = tmp_25;
                                                                    }
                                                                    else 
                                                                    
#line 1696 
                                                                    tmp_26 = 33554432UL;
                                                                    
#line 1696 
                                                                    tmp_27 = tmp_26;
                                                                    }
                                                                    else 
                                                                    
#line 1696 
                                                                    tmp_27 = 67108864UL;
                                                                    
#line 1696 
                                                                    tmp_28 = tmp_27;
                                                                    }
                                                                    else 
                                                                    
#line 1696 
                                                                    tmp_28 = 134217728UL;
                                                                    
#line 1696 
                                                                    tmp_29 = tmp_28;
                                                                    }
                                                                    else 
                                                                    
#line 1696 
                                                                    tmp_29 = 268435456UL;
                                                                    
#line 1696 
                                                                    tmp_30 = tmp_29;
                                                                    }
                                                                    else 
                                                                    
#line 1696 
                                                                    tmp_30 = 536870912UL;
                                                                    
#line 1696 
                                                                    tmp_31 = tmp_30;
                                                                    }
                                                                    else 
                                                                    
#line 1696 
                                                                    tmp_31 = 1073741824UL;
                                                                    
#line 1696 
                                                                    tmp_32 = tmp_31;
                                                                    }
                                                                    else 
                                                                    
#line 1696 
                                                                    tmp_32 = 2147483648UL;
                                                                    
#line 1696 
                                                                    tmp_33 = tmp_32;
                                                                    }
                                                                    else 
                                                                    
#line 1696 
                                                                    tmp_33 = 4294967296UL;
                                                                    
#line 1696 
                                                                    tmp_34 = tmp_33;
                                                                    }
                                                                    else 
                                                                    
#line 1696 
                                                                    tmp_34 = 8589934592UL;
                                                                    
#line 1696 
                                                                    tmp_35 = tmp_34;
                                                                    }
                                                                    else 
                                                                    
#line 1696 
                                                                    tmp_35 = 17179869184UL;
                                                                    
#line 1696 
                                                                    tmp_36 = tmp_35;
                                                                    }
                                                                    else 
                                                                    
#line 1696 
                                                                    tmp_36 = 34359738368UL;
                                                                    
#line 1696 
                                                                    tmp_37 = tmp_36;
                                                                  }
                                                                  else 
                                                                    
#line 1696 
                                                                    tmp_37 = 68719476736UL;
                                                                  
#line 1696 
                                                                  tmp_38 = tmp_37;
                                                                }
                                                                else 
                                                                  
#line 1696 
                                                                  tmp_38 = 137438953472UL;
                                                                
#line 1696 
                                                                tmp_39 = tmp_38;
                                                              }
                                                              else 
#line 1696 
                                                                   tmp_39 = 274877906944UL;
                                                              
#line 1696 
                                                              tmp_40 = tmp_39;
                                                            }
                                                            else 
#line 1696 
                                                                 tmp_40 = 549755813888UL;
                                                            
#line 1696 
                                                            tmp_41 = tmp_40;
                                                          }
                                                          else 
#line 1696 
                                                               tmp_41 = 1099511627776UL;
                                                          
#line 1696 
                                                          tmp_42 = tmp_41;
                                                        }
                                                        else 
#line 1696 
                                                             tmp_42 = 2199023255552UL;
                                                        
#line 1696 
                                                        tmp_43 = tmp_42;
                                                      }
                                                      else 
#line 1696 
                                                           tmp_43 = 4398046511104UL;
                                                      
#line 1696 
                                                      tmp_44 = tmp_43;
                                                    }
                                                    else 
#line 1696 
                                                         tmp_44 = 8796093022208UL;
                                                    
#line 1696 
                                                    tmp_45 = tmp_44;
                                                  }
                                                  else 
#line 1696 
                                                       tmp_45 = 17592186044416UL;
                                                  
#line 1696 
                                                  tmp_46 = tmp_45;
                                                }
                                                else 
#line 1696 
                                                     tmp_46 = 35184372088832UL;
                                                
#line 1696 
                                                tmp_47 = tmp_46;
                                              }
                                              else 
#line 1696 
                                                   tmp_47 = 70368744177664UL;
                                              
#line 1696 
                                              tmp_48 = tmp_47;
                                            }
                                            else 
#line 1696 
                                                 tmp_48 = 140737488355328UL;
                                            
#line 1696 
                                            tmp_49 = tmp_48;
                                          }
                                          else 
#line 1696 
                                               tmp_49 = 281474976710656UL;
                                          
#line 1696 
                                          tmp_50 = tmp_49;
                                        }
                                        else 
#line 1696 
                                             tmp_50 = 562949953421312UL;
                                        
#line 1696 
                                        tmp_51 = tmp_50;
                                      }
                                      else 
#line 1696 
                                           tmp_51 = 1125899906842624UL;
                                      
#line 1696 
                                      tmp_52 = tmp_51;
                                    }
                                    else 
#line 1696 
                                         tmp_52 = 2251799813685248UL;
                                    
#line 1696 
                                    tmp_53 = tmp_52;
                                  }
                                  else 
#line 1696 
                                       tmp_53 = 4503599627370496UL;
                                  
#line 1696 
                                  tmp_54 = tmp_53;
                                }
                                else 
#line 1696 
                                     tmp_54 = 9007199254740992UL;
                                
#line 1696 
                                tmp_55 = tmp_54;
                              }
                              else 
#line 1696 
                                   tmp_55 = 18014398509481984UL;
                              
#line 1696 
                              tmp_56 = tmp_55;
                            }
                            else 
#line 1696 
                                 tmp_56 = 36028797018963968UL;
                            
#line 1696 
                            tmp_57 = tmp_56;
                          }
                          else 
#line 1696 
                               tmp_57 = 72057594037927936UL;
                          
#line 1696 
                          tmp_58 = tmp_57;
                        }
                        else 
#line 1696 
                             tmp_58 = 144115188075855872UL;
                        
#line 1696 
                        tmp_59 = tmp_58;
                      }
                      else 
#line 1696 
                           tmp_59 = 288230376151711744UL;
                      
#line 1696 
                      tmp_60 = tmp_59;
                    }
                    else 
#line 1696 
                         tmp_60 = 576460752303423488UL;
                    
#line 1696 
                    tmp_61 = tmp_60;
                  }
                  else 
#line 1696 
                       tmp_61 = 1152921504606846976UL;
                  
#line 1696 
                  tmp_62 = tmp_61;
                }
                else 
#line 1696 
                     tmp_62 = 2305843009213693952UL;
                
#line 1696 
                tmp_63 = tmp_62;
              }
              else 
#line 1696 
                   tmp_63 = 4611686018427387904UL;
              
#line 1696 
              tmp_64 = tmp_63;
            }
            else 
#line 1696 
                 tmp_64 = 9223372036854775808UL;
            
#line 1696 
            tmp_65 = tmp_64;
          }
          else 
#line 1696 
               tmp_65 = 0UL;
          
#line 1696 
          tmp_66 = tmp_65;
        }
        
#line 1696 
        tmp_68 = tmp_66;
      }
      else {
        int tmp_67;
        
#line 1696 
        tmp_67 = __ilog2_u32((unsigned int)(num_comp_vectors + -1));
        
#line 1696 
        tmp_68 = 1UL << (tmp_67 + 1);
      }
      
#line 1696 
      tmp_69 = tmp_68;
    }
    else 
#line 1696 
         tmp_69 = 1UL;
    
#line 1696 
    tmp_71 = tmp_69;
  }
  else 
#line 1696 
       tmp_71 = __roundup_pow_of_two((unsigned long)num_comp_vectors);
  
#line 1696 
  tmp_72 = __ilog2_u64((unsigned long long)tmp_71);
  
#line 1696 
  if (7 > tmp_72) 
#line 1696 
                  tmp_146 = 7;
  else {
    int tmp_145;
    unsigned long tmp_144;
    
#line 1696 
    if (0 != 0) {
      unsigned long tmp_142;
      
#line 1696 
      if (num_comp_vectors != 1) {
        unsigned long tmp_141;
        
#line 1696 
        if (0 != 0) {
          unsigned long tmp_139;
          
#line 1696 
          if (num_comp_vectors + -1 <= 0) {
            int tmp_73;
            
#line 1696 
            tmp_73 = ____ilog2_NaN();
            
#line 1696 
            tmp_139 = 1UL << (tmp_73 + 1);
          }
          else {
            unsigned long tmp_138;
            
#line 1696 
            if (num_comp_vectors + -1 >= 0) {
              unsigned long tmp_137;
              
#line 1696 
              if (((unsigned long long)(num_comp_vectors + -1) & 4611686018427387904ULL) == 0ULL) {
                unsigned long tmp_136;
                
#line 1696 
                if (((unsigned long long)(num_comp_vectors + -1) & 2305843009213693952ULL) == 0ULL) {
                  unsigned long tmp_135;
                  
#line 1696 
                  if (((unsigned long long)(num_comp_vectors + -1) & 1152921504606846976ULL) == 0ULL) {
                    unsigned long tmp_134;
                    
#line 1696 
                    if (((unsigned long long)(num_comp_vectors + -1) & 576460752303423488ULL) == 0ULL) {
                      unsigned long tmp_133;
                      
#line 1696 
                      if (((unsigned long long)(num_comp_vectors + -1) & 288230376151711744ULL) == 0ULL) {
                        unsigned long tmp_132;
                        
#line 1696 
                        if (((unsigned long long)(num_comp_vectors + -1) & 144115188075855872ULL) == 0ULL) {
                          unsigned long tmp_131;
                          
#line 1696 
                          if (((unsigned long long)(num_comp_vectors + -1) & 72057594037927936ULL) == 0ULL) {
                            unsigned long tmp_130;
                            
#line 1696 
                            if (((unsigned long long)(num_comp_vectors + -1) & 36028797018963968ULL) == 0ULL) {
                              unsigned long tmp_129;
                              
#line 1696 
                              if (((unsigned long long)(num_comp_vectors + -1) & 18014398509481984ULL) == 0ULL) {
                                unsigned long tmp_128;
                                
#line 1696 
                                if (((unsigned long long)(num_comp_vectors + -1) & 9007199254740992ULL) == 0ULL) {
                                  unsigned long tmp_127;
                                  
#line 1696 
                                  if (((unsigned long long)(num_comp_vectors + -1) & 4503599627370496ULL) == 0ULL) {
                                    unsigned long tmp_126;
                                    
#line 1696 
                                    if (((unsigned long long)(num_comp_vectors + -1) & 2251799813685248ULL) == 0ULL) {
                                      unsigned long tmp_125;
                                      
#line 1696 
                                      if (((unsigned long long)(num_comp_vectors + -1) & 1125899906842624ULL) == 0ULL) {
                                        unsigned long tmp_124;
                                        
#line 1696 
                                        if (((unsigned long long)(num_comp_vectors + -1) & 562949953421312ULL) == 0ULL) {
                                          unsigned long tmp_123;
                                          
#line 1696 
                                          if (((unsigned long long)(num_comp_vectors + -1) & 281474976710656ULL) == 0ULL) {
                                            unsigned long tmp_122;
                                            
#line 1696 
                                            if (((unsigned long long)(num_comp_vectors + -1) & 140737488355328ULL) == 0ULL) {
                                              unsigned long tmp_121;
                                              
#line 1696 
                                              if (((unsigned long long)(num_comp_vectors + -1) & 70368744177664ULL) == 0ULL) {
                                                unsigned long tmp_120;
                                                
#line 1696 
                                                if (((unsigned long long)(num_comp_vectors + -1) & 35184372088832ULL) == 0ULL) {
                                                  unsigned long tmp_119;
                                                  
#line 1696 
                                                  if (((unsigned long long)(num_comp_vectors + -1) & 17592186044416ULL) == 0ULL) {
                                                    unsigned long tmp_118;
                                                    
#line 1696 
                                                    if (((unsigned long long)(num_comp_vectors + -1) & 8796093022208ULL) == 0ULL) {
                                                      unsigned long tmp_117;
                                                      
#line 1696 
                                                      if (((unsigned long long)(num_comp_vectors + -1) & 4398046511104ULL) == 0ULL) {
                                                        unsigned long tmp_116;
                                                        
#line 1696 
                                                        if (((unsigned long long)(num_comp_vectors + -1) & 2199023255552ULL) == 0ULL) {
                                                          unsigned long tmp_115;
                                                          
#line 1696 
                                                          if (((unsigned long long)(num_comp_vectors + -1) & 1099511627776ULL) == 0ULL) {
                                                            unsigned long tmp_114;
                                                            
#line 1696 
                                                            if (((unsigned long long)(num_comp_vectors + -1) & 549755813888ULL) == 0ULL) {
                                                              unsigned long tmp_113;
                                                              
#line 1696 
                                                              if (((unsigned long long)(num_comp_vectors + -1) & 274877906944ULL) == 0ULL) {
                                                                unsigned long tmp_112;
                                                                
#line 1696 
                                                                if (((unsigned long long)(num_comp_vectors + -1) & 137438953472ULL) == 0ULL) {
                                                                  unsigned long tmp_111;
                                                                  
#line 1696 
                                                                  if (
                                                                    ((unsigned long long)(num_comp_vectors + -1) & 68719476736ULL) == 0ULL) {
                                                                    unsigned long tmp_110;
                                                                    
#line 1696 
                                                                    if (
                                                                    ((unsigned long long)(num_comp_vectors + -1) & 34359738368ULL) == 0ULL) {
                                                                    unsigned long tmp_109;
                                                                    
#line 1696 
                                                                    if (
                                                                    ((unsigned long long)(num_comp_vectors + -1) & 17179869184ULL) == 0ULL) {
                                                                    unsigned long tmp_108;
                                                                    
#line 1696 
                                                                    if (
                                                                    ((unsigned long long)(num_comp_vectors + -1) & 8589934592ULL) == 0ULL) {
                                                                    unsigned long tmp_107;
                                                                    
#line 1696 
                                                                    if (
                                                                    ((unsigned long long)(num_comp_vectors + -1) & 4294967296ULL) == 0ULL) {
                                                                    unsigned long tmp_106;
                                                                    
#line 1696 
                                                                    if (
                                                                    num_comp_vectors + -1 >= 0) {
                                                                    unsigned long tmp_105;
                                                                    
#line 1696 
                                                                    if (
                                                                    ((unsigned long long)(num_comp_vectors + -1) & 1073741824ULL) == 0ULL) {
                                                                    unsigned long tmp_104;
                                                                    
#line 1696 
                                                                    if (
                                                                    ((unsigned long long)(num_comp_vectors + -1) & 536870912ULL) == 0ULL) {
                                                                    unsigned long tmp_103;
                                                                    
#line 1696 
                                                                    if (
                                                                    ((unsigned long long)(num_comp_vectors + -1) & 268435456ULL) == 0ULL) {
                                                                    unsigned long tmp_102;
                                                                    
#line 1696 
                                                                    if (
                                                                    ((unsigned long long)(num_comp_vectors + -1) & 134217728ULL) == 0ULL) {
                                                                    unsigned long tmp_101;
                                                                    
#line 1696 
                                                                    if (
                                                                    ((unsigned long long)(num_comp_vectors + -1) & 67108864ULL) == 0ULL) {
                                                                    unsigned long tmp_100;
                                                                    
#line 1696 
                                                                    if (
                                                                    ((unsigned long long)(num_comp_vectors + -1) & 33554432ULL) == 0ULL) {
                                                                    unsigned long tmp_99;
                                                                    
#line 1696 
                                                                    if (
                                                                    ((unsigned long long)(num_comp_vectors + -1) & 16777216ULL) == 0ULL) {
                                                                    unsigned long tmp_98;
                                                                    
#line 1696 
                                                                    if (
                                                                    ((unsigned long long)(num_comp_vectors + -1) & 8388608ULL) == 0ULL) {
                                                                    unsigned long tmp_97;
                                                                    
#line 1696 
                                                                    if (
                                                                    ((unsigned long long)(num_comp_vectors + -1) & 4194304ULL) == 0ULL) {
                                                                    unsigned long tmp_96;
                                                                    
#line 1696 
                                                                    if (
                                                                    ((unsigned long long)(num_comp_vectors + -1) & 2097152ULL) == 0ULL) {
                                                                    unsigned long tmp_95;
                                                                    
#line 1696 
                                                                    if (
                                                                    ((unsigned long long)(num_comp_vectors + -1) & 1048576ULL) == 0ULL) {
                                                                    unsigned long tmp_94;
                                                                    
#line 1696 
                                                                    if (
                                                                    ((unsigned long long)(num_comp_vectors + -1) & 524288ULL) == 0ULL) {
                                                                    unsigned long tmp_93;
                                                                    
#line 1696 
                                                                    if (
                                                                    ((unsigned long long)(num_comp_vectors + -1) & 262144ULL) == 0ULL) {
                                                                    unsigned long tmp_92;
                                                                    
#line 1696 
                                                                    if (
                                                                    ((unsigned long long)(num_comp_vectors + -1) & 131072ULL) == 0ULL) {
                                                                    unsigned long tmp_91;
                                                                    
#line 1696 
                                                                    if (
                                                                    ((unsigned long long)(num_comp_vectors + -1) & 65536ULL) == 0ULL) {
                                                                    unsigned long tmp_90;
                                                                    
#line 1696 
                                                                    if (
                                                                    ((unsigned long long)(num_comp_vectors + -1) & 32768ULL) == 0ULL) {
                                                                    unsigned long tmp_89;
                                                                    
#line 1696 
                                                                    if (
                                                                    ((unsigned long long)(num_comp_vectors + -1) & 16384ULL) == 0ULL) {
                                                                    unsigned long tmp_88;
                                                                    
#line 1696 
                                                                    if (
                                                                    ((unsigned long long)(num_comp_vectors + -1) & 8192ULL) == 0ULL) {
                                                                    unsigned long tmp_87;
                                                                    
#line 1696 
                                                                    if (
                                                                    ((unsigned long long)(num_comp_vectors + -1) & 4096ULL) == 0ULL) {
                                                                    unsigned long tmp_86;
                                                                    
#line 1696 
                                                                    if (
                                                                    ((unsigned long long)(num_comp_vectors + -1) & 2048ULL) == 0ULL) {
                                                                    unsigned long tmp_85;
                                                                    
#line 1696 
                                                                    if (
                                                                    ((unsigned long long)(num_comp_vectors + -1) & 1024ULL) == 0ULL) {
                                                                    unsigned long tmp_84;
                                                                    
#line 1696 
                                                                    if (
                                                                    ((unsigned long long)(num_comp_vectors + -1) & 512ULL) == 0ULL) {
                                                                    unsigned long tmp_83;
                                                                    
#line 1696 
                                                                    if (
                                                                    ((unsigned long long)(num_comp_vectors + -1) & 256ULL) == 0ULL) {
                                                                    unsigned long tmp_82;
                                                                    
#line 1696 
                                                                    if (
                                                                    ((unsigned long long)(num_comp_vectors + -1) & 128ULL) == 0ULL) {
                                                                    unsigned long tmp_81;
                                                                    
#line 1696 
                                                                    if (
                                                                    ((unsigned long long)(num_comp_vectors + -1) & 64ULL) == 0ULL) {
                                                                    unsigned long tmp_80;
                                                                    
#line 1696 
                                                                    if (
                                                                    ((unsigned long long)(num_comp_vectors + -1) & 32ULL) == 0ULL) {
                                                                    unsigned long tmp_79;
                                                                    
#line 1696 
                                                                    if (
                                                                    ((unsigned long long)(num_comp_vectors + -1) & 16ULL) == 0ULL) {
                                                                    unsigned long tmp_78;
                                                                    
#line 1696 
                                                                    if (
                                                                    ((unsigned long long)(num_comp_vectors + -1) & 8ULL) == 0ULL) {
                                                                    unsigned long tmp_77;
                                                                    
#line 1696 
                                                                    if (
                                                                    ((unsigned long long)(num_comp_vectors + -1) & 4ULL) == 0ULL) {
                                                                    unsigned long tmp_76;
                                                                    
#line 1696 
                                                                    if (
                                                                    ((unsigned long long)(num_comp_vectors + -1) & 2ULL) == 0ULL) {
                                                                    unsigned long tmp_75;
                                                                    
#line 1696 
                                                                    if (
                                                                    ((unsigned long long)(num_comp_vectors + -1) & 1ULL) == 0ULL) {
                                                                    int tmp_74;
                                                                    
#line 1696 
                                                                    tmp_74 = ____ilog2_NaN();
                                                                    
#line 1696 
                                                                    tmp_75 = 1UL << (tmp_74 + 1);
                                                                    }
                                                                    else 
                                                                    
#line 1696 
                                                                    tmp_75 = 2UL;
                                                                    
#line 1696 
                                                                    tmp_76 = tmp_75;
                                                                    }
                                                                    else 
                                                                    
#line 1696 
                                                                    tmp_76 = 4UL;
                                                                    
#line 1696 
                                                                    tmp_77 = tmp_76;
                                                                    }
                                                                    else 
                                                                    
#line 1696 
                                                                    tmp_77 = 8UL;
                                                                    
#line 1696 
                                                                    tmp_78 = tmp_77;
                                                                    }
                                                                    else 
                                                                    
#line 1696 
                                                                    tmp_78 = 16UL;
                                                                    
#line 1696 
                                                                    tmp_79 = tmp_78;
                                                                    }
                                                                    else 
                                                                    
#line 1696 
                                                                    tmp_79 = 32UL;
                                                                    
#line 1696 
                                                                    tmp_80 = tmp_79;
                                                                    }
                                                                    else 
                                                                    
#line 1696 
                                                                    tmp_80 = 64UL;
                                                                    
#line 1696 
                                                                    tmp_81 = tmp_80;
                                                                    }
                                                                    else 
                                                                    
#line 1696 
                                                                    tmp_81 = 128UL;
                                                                    
#line 1696 
                                                                    tmp_82 = tmp_81;
                                                                    }
                                                                    else 
                                                                    
#line 1696 
                                                                    tmp_82 = 256UL;
                                                                    
#line 1696 
                                                                    tmp_83 = tmp_82;
                                                                    }
                                                                    else 
                                                                    
#line 1696 
                                                                    tmp_83 = 512UL;
                                                                    
#line 1696 
                                                                    tmp_84 = tmp_83;
                                                                    }
                                                                    else 
                                                                    
#line 1696 
                                                                    tmp_84 = 1024UL;
                                                                    
#line 1696 
                                                                    tmp_85 = tmp_84;
                                                                    }
                                                                    else 
                                                                    
#line 1696 
                                                                    tmp_85 = 2048UL;
                                                                    
#line 1696 
                                                                    tmp_86 = tmp_85;
                                                                    }
                                                                    else 
                                                                    
#line 1696 
                                                                    tmp_86 = 4096UL;
                                                                    
#line 1696 
                                                                    tmp_87 = tmp_86;
                                                                    }
                                                                    else 
                                                                    
#line 1696 
                                                                    tmp_87 = 8192UL;
                                                                    
#line 1696 
                                                                    tmp_88 = tmp_87;
                                                                    }
                                                                    else 
                                                                    
#line 1696 
                                                                    tmp_88 = 16384UL;
                                                                    
#line 1696 
                                                                    tmp_89 = tmp_88;
                                                                    }
                                                                    else 
                                                                    
#line 1696 
                                                                    tmp_89 = 32768UL;
                                                                    
#line 1696 
                                                                    tmp_90 = tmp_89;
                                                                    }
                                                                    else 
                                                                    
#line 1696 
                                                                    tmp_90 = 65536UL;
                                                                    
#line 1696 
                                                                    tmp_91 = tmp_90;
                                                                    }
                                                                    else 
                                                                    
#line 1696 
                                                                    tmp_91 = 131072UL;
                                                                    
#line 1696 
                                                                    tmp_92 = tmp_91;
                                                                    }
                                                                    else 
                                                                    
#line 1696 
                                                                    tmp_92 = 262144UL;
                                                                    
#line 1696 
                                                                    tmp_93 = tmp_92;
                                                                    }
                                                                    else 
                                                                    
#line 1696 
                                                                    tmp_93 = 524288UL;
                                                                    
#line 1696 
                                                                    tmp_94 = tmp_93;
                                                                    }
                                                                    else 
                                                                    
#line 1696 
                                                                    tmp_94 = 1048576UL;
                                                                    
#line 1696 
                                                                    tmp_95 = tmp_94;
                                                                    }
                                                                    else 
                                                                    
#line 1696 
                                                                    tmp_95 = 2097152UL;
                                                                    
#line 1696 
                                                                    tmp_96 = tmp_95;
                                                                    }
                                                                    else 
                                                                    
#line 1696 
                                                                    tmp_96 = 4194304UL;
                                                                    
#line 1696 
                                                                    tmp_97 = tmp_96;
                                                                    }
                                                                    else 
                                                                    
#line 1696 
                                                                    tmp_97 = 8388608UL;
                                                                    
#line 1696 
                                                                    tmp_98 = tmp_97;
                                                                    }
                                                                    else 
                                                                    
#line 1696 
                                                                    tmp_98 = 16777216UL;
                                                                    
#line 1696 
                                                                    tmp_99 = tmp_98;
                                                                    }
                                                                    else 
                                                                    
#line 1696 
                                                                    tmp_99 = 33554432UL;
                                                                    
#line 1696 
                                                                    tmp_100 = tmp_99;
                                                                    }
                                                                    else 
                                                                    
#line 1696 
                                                                    tmp_100 = 67108864UL;
                                                                    
#line 1696 
                                                                    tmp_101 = tmp_100;
                                                                    }
                                                                    else 
                                                                    
#line 1696 
                                                                    tmp_101 = 134217728UL;
                                                                    
#line 1696 
                                                                    tmp_102 = tmp_101;
                                                                    }
                                                                    else 
                                                                    
#line 1696 
                                                                    tmp_102 = 268435456UL;
                                                                    
#line 1696 
                                                                    tmp_103 = tmp_102;
                                                                    }
                                                                    else 
                                                                    
#line 1696 
                                                                    tmp_103 = 536870912UL;
                                                                    
#line 1696 
                                                                    tmp_104 = tmp_103;
                                                                    }
                                                                    else 
                                                                    
#line 1696 
                                                                    tmp_104 = 1073741824UL;
                                                                    
#line 1696 
                                                                    tmp_105 = tmp_104;
                                                                    }
                                                                    else 
                                                                    
#line 1696 
                                                                    tmp_105 = 2147483648UL;
                                                                    
#line 1696 
                                                                    tmp_106 = tmp_105;
                                                                    }
                                                                    else 
                                                                    
#line 1696 
                                                                    tmp_106 = 4294967296UL;
                                                                    
#line 1696 
                                                                    tmp_107 = tmp_106;
                                                                    }
                                                                    else 
                                                                    
#line 1696 
                                                                    tmp_107 = 8589934592UL;
                                                                    
#line 1696 
                                                                    tmp_108 = tmp_107;
                                                                    }
                                                                    else 
                                                                    
#line 1696 
                                                                    tmp_108 = 17179869184UL;
                                                                    
#line 1696 
                                                                    tmp_109 = tmp_108;
                                                                    }
                                                                    else 
                                                                    
#line 1696 
                                                                    tmp_109 = 34359738368UL;
                                                                    
#line 1696 
                                                                    tmp_110 = tmp_109;
                                                                    }
                                                                    else 
                                                                    
#line 1696 
                                                                    tmp_110 = 68719476736UL;
                                                                    
#line 1696 
                                                                    tmp_111 = tmp_110;
                                                                  }
                                                                  else 
                                                                    
#line 1696 
                                                                    tmp_111 = 137438953472UL;
                                                                  
#line 1696 
                                                                  tmp_112 = tmp_111;
                                                                }
                                                                else 
                                                                  
#line 1696 
                                                                  tmp_112 = 274877906944UL;
                                                                
#line 1696 
                                                                tmp_113 = tmp_112;
                                                              }
                                                              else 
#line 1696 
                                                                   tmp_113 = 549755813888UL;
                                                              
#line 1696 
                                                              tmp_114 = tmp_113;
                                                            }
                                                            else 
#line 1696 
                                                                 tmp_114 = 1099511627776UL;
                                                            
#line 1696 
                                                            tmp_115 = tmp_114;
                                                          }
                                                          else 
#line 1696 
                                                               tmp_115 = 2199023255552UL;
                                                          
#line 1696 
                                                          tmp_116 = tmp_115;
                                                        }
                                                        else 
#line 1696 
                                                             tmp_116 = 4398046511104UL;
                                                        
#line 1696 
                                                        tmp_117 = tmp_116;
                                                      }
                                                      else 
#line 1696 
                                                           tmp_117 = 8796093022208UL;
                                                      
#line 1696 
                                                      tmp_118 = tmp_117;
                                                    }
                                                    else 
#line 1696 
                                                         tmp_118 = 17592186044416UL;
                                                    
#line 1696 
                                                    tmp_119 = tmp_118;
                                                  }
                                                  else 
#line 1696 
                                                       tmp_119 = 35184372088832UL;
                                                  
#line 1696 
                                                  tmp_120 = tmp_119;
                                                }
                                                else 
#line 1696 
                                                     tmp_120 = 70368744177664UL;
                                                
#line 1696 
                                                tmp_121 = tmp_120;
                                              }
                                              else 
#line 1696 
                                                   tmp_121 = 140737488355328UL;
                                              
#line 1696 
                                              tmp_122 = tmp_121;
                                            }
                                            else 
#line 1696 
                                                 tmp_122 = 281474976710656UL;
                                            
#line 1696 
                                            tmp_123 = tmp_122;
                                          }
                                          else 
#line 1696 
                                               tmp_123 = 562949953421312UL;
                                          
#line 1696 
                                          tmp_124 = tmp_123;
                                        }
                                        else 
#line 1696 
                                             tmp_124 = 1125899906842624UL;
                                        
#line 1696 
                                        tmp_125 = tmp_124;
                                      }
                                      else 
#line 1696 
                                           tmp_125 = 2251799813685248UL;
                                      
#line 1696 
                                      tmp_126 = tmp_125;
                                    }
                                    else 
#line 1696 
                                         tmp_126 = 4503599627370496UL;
                                    
#line 1696 
                                    tmp_127 = tmp_126;
                                  }
                                  else 
#line 1696 
                                       tmp_127 = 9007199254740992UL;
                                  
#line 1696 
                                  tmp_128 = tmp_127;
                                }
                                else 
#line 1696 
                                     tmp_128 = 18014398509481984UL;
                                
#line 1696 
                                tmp_129 = tmp_128;
                              }
                              else 
#line 1696 
                                   tmp_129 = 36028797018963968UL;
                              
#line 1696 
                              tmp_130 = tmp_129;
                            }
                            else 
#line 1696 
                                 tmp_130 = 72057594037927936UL;
                            
#line 1696 
                            tmp_131 = tmp_130;
                          }
                          else 
#line 1696 
                               tmp_131 = 144115188075855872UL;
                          
#line 1696 
                          tmp_132 = tmp_131;
                        }
                        else 
#line 1696 
                             tmp_132 = 288230376151711744UL;
                        
#line 1696 
                        tmp_133 = tmp_132;
                      }
                      else 
#line 1696 
                           tmp_133 = 576460752303423488UL;
                      
#line 1696 
                      tmp_134 = tmp_133;
                    }
                    else 
#line 1696 
                         tmp_134 = 1152921504606846976UL;
                    
#line 1696 
                    tmp_135 = tmp_134;
                  }
                  else 
#line 1696 
                       tmp_135 = 2305843009213693952UL;
                  
#line 1696 
                  tmp_136 = tmp_135;
                }
                else 
#line 1696 
                     tmp_136 = 4611686018427387904UL;
                
#line 1696 
                tmp_137 = tmp_136;
              }
              else 
#line 1696 
                   tmp_137 = 9223372036854775808UL;
              
#line 1696 
              tmp_138 = tmp_137;
            }
            else 
#line 1696 
                 tmp_138 = 0UL;
            
#line 1696 
            tmp_139 = tmp_138;
          }
          
#line 1696 
          tmp_141 = tmp_139;
        }
        else {
          int tmp_140;
          
#line 1696 
          tmp_140 = __ilog2_u32((unsigned int)(num_comp_vectors + -1));
          
#line 1696 
          tmp_141 = 1UL << (tmp_140 + 1);
        }
        
#line 1696 
        tmp_142 = tmp_141;
      }
      else 
#line 1696 
           tmp_142 = 1UL;
      
#line 1696 
      tmp_144 = tmp_142;
    }
    else 
#line 1696 
         tmp_144 = __roundup_pow_of_two((unsigned long)num_comp_vectors);
    
#line 1696 
    tmp_145 = __ilog2_u64((unsigned long long)tmp_144);
    
#line 1696 
    tmp_146 = tmp_145;
  }
  
#line 1696 
  priv->params.rx_hash_log_tbl_sz = (unsigned short)tmp_146;
  
#line 1701 
  priv->params.num_tc = (unsigned char)1U;
  
#line 1702 
  priv->params.default_vlan_prio = (unsigned char)0U;
  
#line 1704 
  priv->params.lro_en = (_Bool)0;
  
#line 1705 
  priv->params.lro_wqe_sz = 16384U;
  
#line 1708 
  priv->mdev = mdev;
  
#line 1709 
  priv->netdev = netdev;
  
#line 1710 
  priv->params.num_channels = (unsigned short)num_comp_vectors;
  
#line 1711 
  priv->num_tc = (int)priv->params.num_tc;
  
#line 1712 
  priv->default_vlan_prio = (int)priv->params.default_vlan_prio;
  
#line 1714 
  spinlock_check(& priv->async_events_spinlock);
  {
    struct lock_class_key __key;
    
#line 1714 
    __raw_spin_lock_init(& priv->async_events_spinlock.__anonCompField_spinlock_18.rlock,"&(&priv->async_events_spinlock)->rlock",& __key);
  }
  {
    struct lock_class_key __key_0;
    
#line 1715 
    __mutex_init(& priv->state_lock,"&priv->state_lock",& __key_0);
  }
  {
    struct lock_class_key __key_1;
    
#line 1717 
    __init_work(& priv->update_carrier_work,0);
    
#line 1717 
    atomic_long_t __constr_expr_37 = {.counter = WORK_STRUCT_NO_POOL_0};
    
#line 1717 
    priv->update_carrier_work.data = __constr_expr_37;
    
#line 1717 
    lockdep_init_map(& priv->update_carrier_work.lockdep_map,"(&priv->update_carrier_work)",& __key_1,0);
    
#line 1717 
    INIT_LIST_HEAD(& priv->update_carrier_work.entry);
    
#line 1717 
    priv->update_carrier_work.func = & mlx5e_update_carrier_work;
  }
  {
    struct lock_class_key __key_2;
    
#line 1718 
    __init_work(& priv->set_rx_mode_work,0);
    
#line 1718 
    atomic_long_t __constr_expr_38 = {.counter = WORK_STRUCT_NO_POOL_0};
    
#line 1718 
    priv->set_rx_mode_work.data = __constr_expr_38;
    
#line 1718 
    lockdep_init_map(& priv->set_rx_mode_work.lockdep_map,"(&priv->set_rx_mode_work)",& __key_2,0);
    
#line 1718 
    INIT_LIST_HEAD(& priv->set_rx_mode_work.entry);
    
#line 1718 
    priv->set_rx_mode_work.func = & mlx5e_set_rx_mode_work;
  }
  {
    struct lock_class_key __key_3;
    
#line 1719 
    __init_work(& priv->update_stats_work.work,0);
    
#line 1719 
    atomic_long_t __constr_expr_39 = {.counter = WORK_STRUCT_NO_POOL_0};
    
#line 1719 
    priv->update_stats_work.work.data = __constr_expr_39;
    
#line 1719 
    lockdep_init_map(& priv->update_stats_work.work.lockdep_map,"(&(&priv->update_stats_work)->work)",& __key_3,0);
    
#line 1719 
    INIT_LIST_HEAD(& priv->update_stats_work.work.entry);
    
#line 1719 
    priv->update_stats_work.work.func = & mlx5e_update_stats_work;
  }
  {
    struct lock_class_key __key_4;
    
#line 1719 
    init_timer_key(& priv->update_stats_work.timer,2097152U,"(&(&priv->update_stats_work)->timer)",& __key_4);
  }
  
#line 1719 
  priv->update_stats_work.timer.function = & delayed_work_timer_fn;
  
#line 1719 
  priv->update_stats_work.timer.data = (unsigned long)(& priv->update_stats_work);
  
#line 1720 
  return;
}


#line 1722  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_main.c"
static void mlx5e_set_netdev_dev_addr(struct net_device *netdev)
{
  
#line 1724 
  struct mlx5e_priv *priv = netdev_priv((struct net_device const *)netdev);
  
#line 1726 
  mlx5_query_nic_vport_mac_address(priv->mdev,netdev->dev_addr);
  
#line 1727 
  return;
}


#line 1729  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_main.c"
static void mlx5e_build_netdev(struct net_device *netdev)
{
  int tmp_1;
  
#line 1731 
  struct mlx5e_priv *priv = netdev_priv((struct net_device const *)netdev);
  
#line 1732 
  struct mlx5_core_dev *mdev = priv->mdev;
  
#line 1734 
  netdev->dev.parent = & (mdev->pdev)->dev;
  
#line 1736 
  if (priv->num_tc > 1) 
#line 1737 
                        mlx5e_netdev_ops.ndo_select_queue = & mlx5e_select_queue; else ;
  
#line 1740 
  netdev->netdev_ops = (struct net_device_ops const *)(& mlx5e_netdev_ops);
  
#line 1741 
  netdev->watchdog_timeo = 3750;
  
#line 1743 
  netdev->ethtool_ops = & mlx5e_ethtool_ops;
  
#line 1745 
  netdev->vlan_features |= 1ULL;
  
#line 1746 
  netdev->vlan_features |= 2ULL;
  
#line 1747 
  netdev->vlan_features |= 16ULL;
  
#line 1748 
  netdev->vlan_features |= 16384ULL;
  
#line 1749 
  netdev->vlan_features |= 65536ULL;
  
#line 1750 
  netdev->vlan_features |= 1048576ULL;
  
#line 1751 
  netdev->vlan_features |= 17179869184ULL;
  
#line 1752 
  netdev->vlan_features |= 8589934592ULL;
  
#line 1754 
  if (0 != 0) 
#line 1754 
              tmp_1 = (((((*((__be32 *)(& mdev->hca_caps_cur[1])) << 24) | ((*((__be32 *)(& mdev->hca_caps_cur[1])) << 8) & 16711680U)) | ((*((__be32 *)(& mdev->hca_caps_cur[1])) >> 8) & 65280U)) | (*((__be32 *)(& mdev->hca_caps_cur[1])) >> 24)) & 536870912U) != 0U;
  else {
    __u32 tmp_0;
    
#line 1754 
    tmp_0 = __fswab32(*((__be32 *)(& mdev->hca_caps_cur[1])));
    
#line 1754 
    tmp_1 = (tmp_0 & 536870912U) != 0U;
  }
  
#line 1754 
  if (tmp_1) 
#line 1755 
             netdev->vlan_features |= 32768ULL; else ;
  
#line 1757 
  netdev->hw_features = netdev->vlan_features;
  
#line 1758 
  netdev->hw_features |= 256ULL;
  
#line 1759 
  netdev->hw_features |= 512ULL;
  
#line 1761 
  netdev->features = netdev->hw_features;
  
#line 1762 
  if (! priv->params.lro_en) 
#line 1763 
                             netdev->features &= 18446744073709518847ULL; else ;
  
#line 1765 
  netdev->features |= 32ULL;
  
#line 1767 
  netdev->priv_flags |= 131072U;
  
#line 1769 
  mlx5e_set_netdev_dev_addr(netdev);
  
#line 1770 
  return;
}


#line 1772  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_main.c"
static int mlx5e_create_mkey(struct mlx5e_priv *priv, u32 pdn, struct mlx5_core_mr *mr)
{
  int __retres;
  struct mlx5_create_mkey_mbox_in *in;
  int err;
  
#line 1775 
  struct mlx5_core_dev *mdev = priv->mdev;
  
#line 1779 
  in = (struct mlx5_create_mkey_mbox_in *)mlx5_vzalloc_2(272UL);
  
#line 1780 
  if (in == (struct mlx5_create_mkey_mbox_in *)0) {
    
#line 1781 
    __retres = -12;
    
#line 1781 
    goto return_label;
  }
  else ;
  
#line 1783 
  in->seg.flags = (unsigned char)12U;
  
#line 1786 
  if (0 != 0) 
#line 1786 
              in->seg.flags_pd = ((((pdn << 24) | ((pdn << 8) & 16711680U)) | ((pdn >> 8) & 65280U)) | (pdn >> 24)) | 128U; else 
                                                                    
#line 1786 
                                                                    in->seg.flags_pd = __fswab32(pdn | 2147483648U);
  
#line 1787 
  in->seg.qpn_mkey7_0 = 16777215U;
  
#line 1789 
  err = mlx5_core_create_mkey(mdev,mr,in,272,(void (*)(int , void *))0,(void *)0,(struct mlx5_create_mkey_mbox_out *)0);
  
#line 1792 
  kvfree((void const *)in);
  
#line 1794 
  __retres = err;
  return_label: 
#line 1794 
                return __retres;
}


#line 1797  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_main.c"
static void *mlx5e_create_netdev(struct mlx5_core_dev *mdev)
{
  void *__retres;
  struct net_device *netdev;
  struct mlx5e_priv *priv;
  int err;
  int tmp;
  
#line 1801 
  int ncv = mdev->priv.eq_table.num_comp_vectors;
  
#line 1804 
  tmp = mlx5e_check_required_hca_cap(mdev);
  
#line 1804 
  if (tmp != 0) {
    
#line 1805 
    __retres = (void *)0;
    
#line 1805 
    goto return_label;
  }
  else ;
  
#line 1807 
  netdev = ldv_alloc_etherdev_mqs_95(22232,(unsigned int)ncv,(unsigned int)ncv);
  
#line 1808 
  if (netdev == (struct net_device *)0) {
    struct task_struct *tmp_0;
    
#line 1809 
    tmp_0 = get_current();
    
#line 1809 
    ;
    
#line 1809 
    printk("\001",(char *)(& mdev->priv.name),"mlx5e_create_netdev",1809,tmp_0->pid);
    
#line 1810 
    __retres = (void *)0;
    
#line 1810 
    goto return_label;
  }
  else ;
  
#line 1813 
  mlx5e_build_netdev_priv(mdev,netdev,ncv);
  
#line 1814 
  mlx5e_build_netdev(netdev);
  
#line 1816 
  netif_carrier_off(netdev);
  
#line 1818 
  priv = (struct mlx5e_priv *)netdev_priv((struct net_device const *)netdev);
  
#line 1820 
  err = mlx5_alloc_map_uar(mdev,& priv->cq_uar);
  
#line 1821 
  if (err != 0) {
    
#line 1822 
    netdev_err((struct net_device const *)netdev,"%s: mlx5_alloc_map_uar failed, %d\n","mlx5e_create_netdev",err);
    
#line 1824 
    goto err_free_netdev;
  }
  else ;
  
#line 1827 
  err = mlx5_core_alloc_pd(mdev,& priv->pdn);
  
#line 1828 
  if (err != 0) {
    
#line 1829 
    netdev_err((struct net_device const *)netdev,"%s: mlx5_core_alloc_pd failed, %d\n","mlx5e_create_netdev",err);
    
#line 1831 
    goto err_unmap_free_uar;
  }
  else ;
  
#line 1834 
  err = mlx5_alloc_transport_domain(mdev,& priv->tdn);
  
#line 1835 
  if (err != 0) {
    
#line 1836 
    netdev_err((struct net_device const *)netdev,"%s: mlx5_alloc_transport_domain failed, %d\n","mlx5e_create_netdev",err);
    
#line 1838 
    goto err_dealloc_pd;
  }
  else ;
  
#line 1841 
  err = mlx5e_create_mkey(priv,priv->pdn,& priv->mr);
  
#line 1842 
  if (err != 0) {
    
#line 1843 
    netdev_err((struct net_device const *)netdev,"%s: mlx5e_create_mkey failed, %d\n","mlx5e_create_netdev",err);
    
#line 1845 
    goto err_dealloc_transport_domain;
  }
  else ;
  
#line 1848 
  err = ldv_register_netdev_96(netdev);
  
#line 1849 
  if (err != 0) {
    
#line 1850 
    netdev_err((struct net_device const *)netdev,"%s: register_netdev failed, %d\n","mlx5e_create_netdev",err);
    
#line 1852 
    goto err_destroy_mkey;
  }
  else ;
  
#line 1855 
  mlx5e_enable_async_events(priv);
  
#line 1857 
  __retres = (void *)priv;
  
#line 1857 
  goto return_label;
  err_destroy_mkey: 
#line 1859 
  ;
  
#line 1860 
  mlx5_core_destroy_mkey(mdev,& priv->mr);
  err_dealloc_transport_domain: 
#line 1862 
  ;
  
#line 1863 
  mlx5_dealloc_transport_domain(mdev,priv->tdn);
  err_dealloc_pd: 
#line 1865 
  ;
  
#line 1866 
  mlx5_core_dealloc_pd(mdev,priv->pdn);
  err_unmap_free_uar: 
#line 1868 
  ;
  
#line 1869 
  mlx5_unmap_free_uar(mdev,& priv->cq_uar);
  err_free_netdev: 
#line 1871 
  ;
  
#line 1872 
  ldv_free_netdev_97(netdev);
  
#line 1874 
  __retres = (void *)0;
  return_label: 
#line 1874 
                return __retres;
}


#line 1877  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_main.c"
static void mlx5e_destroy_netdev(struct mlx5_core_dev *mdev, void *vpriv)
{
  
#line 1879 
  struct mlx5e_priv *priv = (struct mlx5e_priv *)vpriv;
  
#line 1880 
  struct net_device *netdev = priv->netdev;
  
#line 1882 
  ldv_unregister_netdev_98(netdev);
  
#line 1883 
  mlx5_core_destroy_mkey(priv->mdev,& priv->mr);
  
#line 1884 
  mlx5_dealloc_transport_domain(priv->mdev,priv->tdn);
  
#line 1885 
  mlx5_core_dealloc_pd(priv->mdev,priv->pdn);
  
#line 1886 
  mlx5_unmap_free_uar(priv->mdev,& priv->cq_uar);
  
#line 1887 
  mlx5e_disable_async_events(priv);
  
#line 1888 
  flush_scheduled_work();
  
#line 1889 
  ldv_free_netdev_99(netdev);
  
#line 1890 
  return;
}


#line 1892  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_main.c"
static void *mlx5e_get_netdev(void *vpriv)
{
  void *__retres;
  
#line 1894 
  struct mlx5e_priv *priv = (struct mlx5e_priv *)vpriv;
  
#line 1896 
  __retres = (void *)priv->netdev;
  
#line 1896 
  return __retres;
}


#line 1899  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_main.c"
static struct mlx5_interface mlx5e_interface = {.add = & mlx5e_create_netdev, .remove = & mlx5e_destroy_netdev, .event = & mlx5e_async_event, .get_dev = & mlx5e_get_netdev, .protocol = 1, .list = {.next = (struct list_head *)0, .prev = (struct list_head *)0}};

#line 1907  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_main.c"
void mlx5e_init(void)
{
  
#line 1909 
  mlx5_register_interface(& mlx5e_interface);
  
#line 1910 
  return;
}


#line 1912  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_main.c"
void mlx5e_cleanup(void)
{
  
#line 1914 
  mlx5_unregister_interface(& mlx5e_interface);
  
#line 1915 
  return;
}


#line 57  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_en_main.c.aux"
_Bool ldv_emg_schedule_delayed_work(struct delayed_work *arg0, unsigned long arg1);


#line 58 
void ldv_emg_free_netdev(struct net_device *arg0);


#line 62 
struct net_device *ldv_emg_alloc_etherdev_mqs(int arg0, unsigned int arg1, unsigned int arg2);


#line 63 
void ldv_emg_unregister_netdev(struct net_device *arg0);


#line 65 
int ldv_emg_register_netdev(struct net_device *arg0);


#line 66 
_Bool ldv_emg_schedule_work(struct work_struct *arg0);


#line 72  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_en_main.c.aux"
int ldv_emg_wrapper_mlx5e_set_mac_18(struct net_device *arg0, void *arg1)
{
  int tmp;
  
#line 73 
  tmp = mlx5e_set_mac(arg0,arg1);
  
#line 73 
  return tmp;
}


#line 77  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_en_main.c.aux"
int ldv_emg_wrapper_mlx5e_close_2(struct net_device *arg0)
{
  int tmp;
  
#line 78 
  tmp = mlx5e_close(arg0);
  
#line 78 
  return tmp;
}


#line 82  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_en_main.c.aux"
int ldv_emg_wrapper_mlx5e_change_mtu_6(struct net_device *arg0, int arg1)
{
  int tmp;
  
#line 83 
  tmp = mlx5e_change_mtu(arg0,arg1);
  
#line 83 
  return tmp;
}


#line 87  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_en_main.c.aux"
void ldv_emg_wrapper_mlx5e_set_rx_mode_19(struct net_device *arg0)
{
  
#line 88 
  mlx5e_set_rx_mode(arg0);
  
#line 89 
  return;
}


#line 92  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_en_main.c.aux"
int ldv_emg_wrapper_mlx5e_set_features_12(struct net_device *arg0, unsigned long long arg1)
{
  int tmp;
  
#line 93 
  tmp = mlx5e_set_features(arg0,arg1);
  
#line 93 
  return tmp;
}


#line 97  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_en_main.c.aux"
int ldv_emg_wrapper_mlx5e_open_2(struct net_device *arg0)
{
  int tmp;
  
#line 98 
  tmp = mlx5e_open(arg0);
  
#line 98 
  return tmp;
}


#line 102  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_en_main.c.aux"
struct rtnl_link_stats64 *ldv_emg_wrapper_mlx5e_get_stats_9(struct net_device *arg0, struct rtnl_link_stats64 *arg1)
{
  struct rtnl_link_stats64 *tmp;
  
#line 103 
  tmp = mlx5e_get_stats(arg0,arg1);
  
#line 103 
  return tmp;
}


#line 533  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_en_main.c.aux"
static void *kcalloc_2(size_t n, size_t size, gfp_t flags)
{
  void *tmp;
  
#line 536 
  tmp = ldv_kcalloc(n,size,flags);
  
#line 536 
  return tmp;
}


#line 540  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_en_main.c.aux"
static void *kzalloc_5(size_t size, gfp_t flags)
{
  void *tmp;
  
#line 543 
  tmp = ldv_kzalloc(size,flags);
  
#line 543 
  return tmp;
}


#line 663  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_en_main.c.aux"
static void ldv_spin_lock_bh_62(spinlock_t *lock)
{
  
#line 667 
  ldv_spin_model_lock((char *)"_xmit_lock_of_netdev_queue");
  
#line 669 
  spin_lock_bh_0(lock);
  
#line 670 
  return;
}


#line 706  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_en_main.c.aux"
static void ldv_spin_unlock_bh_65(spinlock_t *lock)
{
  
#line 710 
  ldv_spin_model_unlock((char *)"_xmit_lock_of_netdev_queue");
  
#line 712 
  spin_unlock_bh_0(lock);
  
#line 713 
  return;
}


#line 756  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_en_main.c.aux"
static void ldv_spin_lock_bh_70_0(spinlock_t *lock)
{
  
#line 760 
  ldv_spin_model_lock((char *)"addr_list_lock_of_net_device");
  
#line 762 
  spin_lock_bh_0(lock);
  
#line 763 
  return;
}


#line 776  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_en_main.c.aux"
static void ldv_spin_unlock_bh_72_0(spinlock_t *lock)
{
  
#line 780 
  ldv_spin_model_unlock((char *)"addr_list_lock_of_net_device");
  
#line 782 
  spin_unlock_bh_0(lock);
  
#line 783 
  return;
}


#line 786  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_en_main.c.aux"
static void ldv_mutex_lock_73_0(struct mutex *ldv_func_arg1)
{
  
#line 790 
  ldv_mutex_model_lock(ldv_func_arg1,(char *)"state_lock_of_mlx5e_priv");
  
#line 791 
  return;
}


#line 794  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_en_main.c.aux"
static void ldv_mutex_unlock_74_0(struct mutex *ldv_func_arg1)
{
  
#line 798 
  ldv_mutex_model_unlock(ldv_func_arg1,(char *)"state_lock_of_mlx5e_priv");
  
#line 799 
  return;
}


#line 802  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_en_main.c.aux"
static void ldv_mutex_lock_75_0(struct mutex *ldv_func_arg1)
{
  
#line 806 
  ldv_mutex_model_lock(ldv_func_arg1,(char *)"state_lock_of_mlx5e_priv");
  
#line 807 
  return;
}


#line 810  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_en_main.c.aux"
static bool ldv_schedule_delayed_work_76(struct delayed_work *dwork, unsigned long delay)
{
  bool __retres;
  bool tmp;
  
#line 814 
  tmp = ldv_emg_schedule_delayed_work(dwork,delay);
  
#line 814 
  __retres = tmp != 0;
  
#line 814 
  return __retres;
}


#line 818  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_en_main.c.aux"
static void ldv_mutex_unlock_77_0(struct mutex *ldv_func_arg1)
{
  
#line 822 
  ldv_mutex_model_unlock(ldv_func_arg1,(char *)"state_lock_of_mlx5e_priv");
  
#line 823 
  return;
}


#line 826  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_en_main.c.aux"
static bool ldv_schedule_work_78(struct work_struct *work)
{
  bool __retres;
  bool tmp;
  
#line 830 
  tmp = ldv_emg_schedule_work(work);
  
#line 830 
  __retres = tmp != 0;
  
#line 830 
  return __retres;
}


#line 834  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_en_main.c.aux"
static void ldv_spin_lock_79(spinlock_t *lock)
{
  
#line 838 
  ldv_spin_model_lock((char *)"async_events_spinlock_of_mlx5e_priv");
  
#line 840 
  spin_lock_3(lock);
  
#line 841 
  return;
}


#line 844  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_en_main.c.aux"
static void ldv_spin_unlock_80(spinlock_t *lock)
{
  
#line 848 
  ldv_spin_model_unlock((char *)"async_events_spinlock_of_mlx5e_priv");
  
#line 850 
  spin_unlock_3(lock);
  
#line 851 
  return;
}


#line 854  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_en_main.c.aux"
static void ldv_spin_lock_irq_81(spinlock_t *lock)
{
  
#line 858 
  ldv_spin_model_lock((char *)"async_events_spinlock_of_mlx5e_priv");
  
#line 860 
  spin_lock_irq_4(lock);
  
#line 861 
  return;
}


#line 864  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_en_main.c.aux"
static void ldv_spin_unlock_irq_82(spinlock_t *lock)
{
  
#line 868 
  ldv_spin_model_unlock((char *)"async_events_spinlock_of_mlx5e_priv");
  
#line 870 
  spin_unlock_irq_4(lock);
  
#line 871 
  return;
}


#line 874  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_en_main.c.aux"
static bool ldv_schedule_delayed_work_83(struct delayed_work *dwork, unsigned long delay)
{
  bool __retres;
  bool tmp;
  
#line 878 
  tmp = ldv_emg_schedule_delayed_work(dwork,delay);
  
#line 878 
  __retres = tmp != 0;
  
#line 878 
  return __retres;
}


#line 882  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_en_main.c.aux"
static void ldv_mutex_lock_84(struct mutex *ldv_func_arg1)
{
  
#line 886 
  ldv_mutex_model_lock(ldv_func_arg1,(char *)"state_lock_of_mlx5e_priv");
  
#line 887 
  return;
}


#line 890  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_en_main.c.aux"
static void ldv_mutex_unlock_85(struct mutex *ldv_func_arg1)
{
  
#line 894 
  ldv_mutex_model_unlock(ldv_func_arg1,(char *)"state_lock_of_mlx5e_priv");
  
#line 895 
  return;
}


#line 898  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_en_main.c.aux"
static void ldv_mutex_lock_86(struct mutex *ldv_func_arg1)
{
  
#line 902 
  ldv_mutex_model_lock(ldv_func_arg1,(char *)"state_lock_of_mlx5e_priv");
  
#line 903 
  return;
}


#line 906  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_en_main.c.aux"
static void ldv_mutex_unlock_87(struct mutex *ldv_func_arg1)
{
  
#line 910 
  ldv_mutex_model_unlock(ldv_func_arg1,(char *)"state_lock_of_mlx5e_priv");
  
#line 911 
  return;
}


#line 914  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_en_main.c.aux"
static int ldv_mutex_is_locked_88(struct mutex *lock)
{
  int tmp;
  
#line 917 
  tmp = ldv_mutex_model_is_locked(lock,(char *)"state_lock_of_mlx5e_priv");
  
#line 917 
  return tmp;
}


#line 921  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_en_main.c.aux"
static bool ldv_schedule_work_89(struct work_struct *work)
{
  bool __retres;
  bool tmp;
  
#line 925 
  tmp = ldv_emg_schedule_work(work);
  
#line 925 
  __retres = tmp != 0;
  
#line 925 
  return __retres;
}


#line 929  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_en_main.c.aux"
static bool ldv_schedule_work_90(struct work_struct *work)
{
  bool __retres;
  bool tmp;
  
#line 933 
  tmp = ldv_emg_schedule_work(work);
  
#line 933 
  __retres = tmp != 0;
  
#line 933 
  return __retres;
}


#line 937  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_en_main.c.aux"
static void ldv_mutex_lock_91(struct mutex *ldv_func_arg1)
{
  
#line 941 
  ldv_mutex_model_lock(ldv_func_arg1,(char *)"state_lock_of_mlx5e_priv");
  
#line 942 
  return;
}


#line 945  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_en_main.c.aux"
static void ldv_mutex_unlock_92(struct mutex *ldv_func_arg1)
{
  
#line 949 
  ldv_mutex_model_unlock(ldv_func_arg1,(char *)"state_lock_of_mlx5e_priv");
  
#line 950 
  return;
}


#line 953  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_en_main.c.aux"
static void ldv_mutex_lock_93(struct mutex *ldv_func_arg1)
{
  
#line 957 
  ldv_mutex_model_lock(ldv_func_arg1,(char *)"state_lock_of_mlx5e_priv");
  
#line 958 
  return;
}


#line 961  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_en_main.c.aux"
static void ldv_mutex_unlock_94(struct mutex *ldv_func_arg1)
{
  
#line 965 
  ldv_mutex_model_unlock(ldv_func_arg1,(char *)"state_lock_of_mlx5e_priv");
  
#line 966 
  return;
}


#line 969  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_en_main.c.aux"
static struct net_device *ldv_alloc_etherdev_mqs_95(int ldv_func_arg1, unsigned int ldv_func_arg2, unsigned int ldv_func_arg3)
{
  struct net_device *tmp;
  
#line 973 
  tmp = ldv_emg_alloc_etherdev_mqs(ldv_func_arg1,ldv_func_arg2,ldv_func_arg3);
  
#line 973 
  return tmp;
}


#line 977  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_en_main.c.aux"
static int ldv_register_netdev_96(struct net_device *ldv_func_arg1)
{
  int tmp;
  
#line 981 
  tmp = ldv_emg_register_netdev(ldv_func_arg1);
  
#line 981 
  return tmp;
}


#line 985  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_en_main.c.aux"
static void ldv_free_netdev_97(struct net_device *ldv_func_arg1)
{
  
#line 989 
  ldv_emg_free_netdev(ldv_func_arg1);
  
#line 990 
  return;
}


#line 993  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_en_main.c.aux"
static void ldv_unregister_netdev_98(struct net_device *ldv_func_arg1)
{
  
#line 997 
  ldv_emg_unregister_netdev(ldv_func_arg1);
  
#line 998 
  return;
}


#line 1001  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_en_main.c.aux"
static void ldv_free_netdev_99(struct net_device *ldv_func_arg1)
{
  
#line 1005 
  ldv_emg_free_netdev(ldv_func_arg1);
  
#line 1006 
  return;
}


#line 112  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list.h"
void __list_del_entry(struct list_head *);


#line 143  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list.h"
__inline static void list_del_init(struct list_head *entry)
{
  
#line 145 
  __list_del_entry(entry);
  
#line 146 
  INIT_LIST_HEAD(entry);
  
#line 147 
  return;
}


#line 274  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list.h"
__inline static void __list_splice(struct list_head const *list, struct list_head *prev, struct list_head *next)
{
  
#line 278 
  struct list_head *first = list->next;
  
#line 279 
  struct list_head *last = list->prev;
  
#line 281 
  first->prev = prev;
  
#line 282 
  prev->next = first;
  
#line 284 
  last->next = next;
  
#line 285 
  next->prev = last;
  
#line 286 
  return;
}


#line 319  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list.h"
__inline static void list_splice_init(struct list_head *list, struct list_head *head)
{
  int tmp;
  
#line 322 
  tmp = list_empty((struct list_head const *)list);
  
#line 322 
  if (tmp == 0) {
    
#line 323 
    __list_splice((struct list_head const *)list,head,head->next);
    
#line 324 
    INIT_LIST_HEAD(list);
  }
  else ;
  
#line 326 
  return;
}


#line 340  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_lock_irq_5(spinlock_t *lock)
{
  
#line 342 
  _raw_spin_lock_irq(& lock->__anonCompField_spinlock_18.rlock);
  
#line 343 
  return;
}


#line 366 
static void ldv_spin_lock_irq_51(spinlock_t *lock);


#line 370 
static void ldv_spin_lock_irq_53_0(spinlock_t *lock);


#line 374 
static void ldv_spin_lock_irq_55_0(spinlock_t *lock);


#line 378 
static void ldv_spin_lock_irq_60_0(spinlock_t *lock);


#line 409  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_unlock_irq_5(spinlock_t *lock)
{
  
#line 411 
  _raw_spin_unlock_irq(& lock->__anonCompField_spinlock_18.rlock);
  
#line 412 
  return;
}


#line 425 
static void ldv_spin_unlock_irq_52(spinlock_t *lock);


#line 429 
static void ldv_spin_unlock_irq_54_0(spinlock_t *lock);


#line 433 
static void ldv_spin_unlock_irq_56_0(spinlock_t *lock);


#line 437 
static void ldv_spin_unlock_irq_61_0(spinlock_t *lock);


#line 173  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timer.h"
static int ldv_mod_timer_58(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2);


#line 224 
void add_timer(struct timer_list *);


#line 232 
static int ldv_del_timer_sync_59(struct timer_list *ldv_func_arg1);


#line 252 
unsigned long round_jiffies(unsigned long);


#line 490  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/workqueue.h"
static bool ldv_queue_work_57(struct workqueue_struct *wq, struct work_struct *work);


#line 56  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/io.h"
__inline static unsigned char readb(void const volatile *addr)
{
  unsigned char ret;
  
#line 57 
  ldv_inline_asm();
  
#line 56 
  return ret;
}


#line 58  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/io.h"
__inline static unsigned int readl(void const volatile *addr)
{
  unsigned int ret;
  
#line 59 
  ldv_inline_asm();
  
#line 58 
  return ret;
}


#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/random.h"
void get_random_bytes(void *, int);


#line 57  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/health.c"
static spinlock_t health_lock = {.__anonCompField_spinlock_18 = {.rlock = {.raw_lock = {.val = {.counter = 0}}, .magic = 3735899821U, .owner_cpu = 4294967295U, .owner = (void *)(-1), .dep_map = {.key = (struct lock_class_key *)0, .class_cache = {(struct lock_class *)0, (struct lock_class *)0}, .name = "health_lock", .cpu = 0, .ip = 0UL}}}};

#line 58  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/health.c"
static struct list_head health_list = {.next = & health_list, .prev = & health_list};

#line 59  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/health.c"
static struct work_struct health_work;

#line 61  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/health.c"
static void health_care(struct work_struct *work)
{
  struct mlx5_core_health *health;
  struct mlx5_core_health *n;
  struct mlx5_core_dev *dev;
  struct mlx5_priv *priv;
  struct mlx5_core_health *tmp;
  struct mlx5_core_health *tmp_0;
  struct mlx5_priv *tmp_1;
  struct mlx5_core_dev *tmp_2;
  struct task_struct *tmp_3;
  struct mlx5_core_health *tmp_4;
  
#line 66 
  struct list_head tlist = {.next = & tlist, .prev = & tlist};
  
#line 68 
  ldv_spin_lock_irq_51(& health_lock);
  
#line 69 
  list_splice_init(& health_list,& tlist);
  
#line 71 
  ldv_spin_unlock_irq_52(& health_lock);
  {
    
#line 73 
    struct list_head const *__mptr = (struct list_head const *)tlist.next;
    
#line 73 
    tmp = (struct mlx5_core_health *)__mptr + 18446744073709551472U;
  }
  
#line 73 
  health = tmp;
  {
    
#line 73 
    struct list_head const *__mptr_0 = (struct list_head const *)health->list.next;
    
#line 73 
    tmp_0 = (struct mlx5_core_health *)__mptr_0 + 18446744073709551472U;
  }
  
#line 74 
  n = tmp_0;
  
#line 73 
  goto ldv_35980;
  ldv_35979: 
#line 74 
  ;
  {
    
#line 74 
    struct mlx5_core_health const *__mptr_1 = (struct mlx5_core_health const *)health;
    
#line 74 
    tmp_1 = (struct mlx5_priv *)__mptr_1 + 18446744073709550888U;
  }
  
#line 74 
  priv = tmp_1;
  {
    
#line 75 
    struct mlx5_priv const *__mptr_2 = (struct mlx5_priv const *)priv;
    
#line 75 
    tmp_2 = (struct mlx5_core_dev *)__mptr_2 + 18446744073709223336U;
  }
  
#line 75 
  dev = tmp_2;
  
#line 76 
  tmp_3 = get_current();
  
#line 76 
  ;
  
#line 76 
  printk("\001",(char *)(& dev->priv.name),"health_care",76,tmp_3->pid);
  
#line 78 
  ldv_spin_lock_irq_53_0(& health_lock);
  
#line 79 
  list_del_init(& health->list);
  
#line 80 
  ldv_spin_unlock_irq_54_0(& health_lock);
  
#line 73 
  health = n;
  {
    
#line 73 
    struct list_head const *__mptr_3 = (struct list_head const *)n->list.next;
    
#line 73 
    tmp_4 = (struct mlx5_core_health *)__mptr_3 + 18446744073709551472U;
  }
  
#line 73 
  n = tmp_4;
  ldv_35980: 
#line 75 
  ;
  
#line 73 
  if (& health->list != & tlist) 
#line 75 
                                 goto ldv_35979; else 
#line 78 
                                                      goto ldv_35981;
  ldv_35981: 
#line 79 
  ;
  
#line 80 
  return;
}


#line 84  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/health.c"
static char const *hsynd_str(u8 synd)
{
  char const *__retres;
  
#line 86 
  switch ((int)synd) {
    case 1: 
#line 87 
    ;
    
#line 88 
    __retres = "firmware internal error";
    
#line 88 
    goto return_label;
    case 7: 
#line 89 
    ;
    
#line 90 
    __retres = "irisc not responding";
    
#line 90 
    goto return_label;
    case 9: 
#line 91 
    ;
    
#line 92 
    __retres = "firmware CRC error";
    
#line 92 
    goto return_label;
    case 10: 
#line 93 
    ;
    
#line 94 
    __retres = "ICM fetch PCI error";
    
#line 94 
    goto return_label;
    case 11: 
#line 95 
    ;
    
#line 96 
    __retres = "HW fatal error\n";
    
#line 96 
    goto return_label;
    case 12: 
#line 97 
    ;
    
#line 98 
    __retres = "async EQ buffer overrun";
    
#line 98 
    goto return_label;
    case 13: 
#line 99 
    ;
    
#line 100 
    __retres = "EQ error";
    
#line 100 
    goto return_label;
    case 15: 
#line 101 
    ;
    
#line 102 
    __retres = "FFSER error";
    
#line 102 
    goto return_label;
    default: 
#line 103 
    ;
    
#line 104 
    __retres = "unrecognized error";
    
#line 104 
    goto return_label;
  }
  return_label: 
#line 86 
                return __retres;
}


#line 108  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/health.c"
static u16 read_be16(__be16 *p)
{
  u16 tmp_0;
  unsigned int tmp;
  
#line 110 
  tmp = readl((void const volatile *)p);
  
#line 110 
  tmp_0 = __fswab16((unsigned short)((int)((unsigned short)tmp)));
  
#line 110 
  return tmp_0;
}


#line 113  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/health.c"
static u32 read_be32(__be32 *p)
{
  u32 tmp_0;
  unsigned int tmp;
  
#line 115 
  tmp = readl((void const volatile *)p);
  
#line 115 
  tmp_0 = __fswab32(tmp);
  
#line 115 
  return tmp_0;
}


#line 118  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/health.c"
static void print_health_info(struct mlx5_core_dev *dev)
{
  int i;
  u32 tmp;
  u32 tmp_0;
  u32 tmp_1;
  u32 tmp_2;
  u32 tmp_3;
  unsigned char tmp_4;
  char const *tmp_6;
  unsigned char tmp_5;
  unsigned char tmp_7;
  u16 tmp_8;
  
#line 120 
  struct mlx5_core_health *health = & dev->priv.health;
  
#line 121 
  struct health_buffer *h = health->health;
  
#line 124 
  i = 0;
  
#line 124 
  goto ldv_36010;
  ldv_36009: 
#line 125 
  ;
  
#line 125 
  tmp = read_be32((__be32 *)(& h->assert_var) + i);
  
#line 125 
  ;
  
#line 125 
  printk("\001",i,tmp);
  
#line 124 
  i += 1;
  ldv_36010: 
#line 125 
  ;
  
#line 124 
  if ((unsigned int)i <= 4U) 
#line 126 
                             goto ldv_36009; else 
#line 129 
                                                  goto ldv_36011;
  ldv_36011: 
#line 130 
  ;
  
#line 127 
  tmp_0 = read_be32(& h->assert_exit_ptr);
  
#line 127 
  printk("\001",tmp_0);
  
#line 128 
  tmp_1 = read_be32(& h->assert_callra);
  
#line 128 
  printk("\001",tmp_1);
  
#line 129 
  tmp_2 = read_be32(& h->fw_ver);
  
#line 129 
  printk("\001",tmp_2);
  
#line 130 
  tmp_3 = read_be32(& h->hw_id);
  
#line 130 
  printk("\001",tmp_3);
  
#line 131 
  tmp_4 = readb((void const volatile *)(& h->irisc_index));
  
#line 131 
  printk("\001",(int)tmp_4);
  
#line 132 
  tmp_5 = readb((void const volatile *)(& h->synd));
  
#line 132 
  tmp_6 = hsynd_str((unsigned char)((int)tmp_5));
  
#line 132 
  tmp_7 = readb((void const volatile *)(& h->synd));
  
#line 132 
  printk("\001",(int)tmp_7,tmp_6);
  
#line 133 
  tmp_8 = read_be16(& h->ext_sync);
  
#line 133 
  printk("\001",(int)tmp_8);
  
#line 134 
  return;
}


#line 136  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/health.c"
static void poll_health(unsigned long data)
{
  unsigned long next;
  u32 count;
  
#line 138 
  struct mlx5_core_dev *dev = (struct mlx5_core_dev *)data;
  
#line 139 
  struct mlx5_core_health *health = & dev->priv.health;
  
#line 143 
  count = ioread32be((void *)health->health_counter);
  
#line 144 
  if (health->prev == count) 
#line 145 
                             health->miss_counter += 1; else 
#line 147 
                                                             health->miss_counter = 0;
  
#line 149 
  health->prev = count;
  
#line 150 
  if (health->miss_counter == 3) {
    struct task_struct *tmp;
    
#line 151 
    tmp = get_current();
    
#line 151 
    ;
    
#line 151 
    printk("\001",(char *)(& dev->priv.name),"poll_health",151,tmp->pid);
    
#line 152 
    print_health_info(dev);
    
#line 153 
    ldv_spin_lock_irq_55_0(& health_lock);
    
#line 154 
    list_add_tail(& health->list,& health_list);
    
#line 155 
    ldv_spin_unlock_irq_56_0(& health_lock);
    
#line 157 
    ldv_queue_work_57(mlx5_core_wq,& health_work);
  }
  else {
    
#line 159 
    get_random_bytes((void *)(& next),8);
    
#line 160 
    next %= 250UL;
    
#line 161 
    next = (jiffies + 500UL) + next;
    
#line 162 
    ldv_mod_timer_58(& health->timer,next);
  }
  
#line 164 
  return;
}


#line 166  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/health.c"
void mlx5_start_health_poll(struct mlx5_core_dev *dev)
{
  
#line 168 
  struct mlx5_core_health *health = & dev->priv.health;
  
#line 170 
  INIT_LIST_HEAD(& health->list);
  {
    struct lock_class_key __key;
    
#line 171 
    init_timer_key(& health->timer,0U,"(&health->timer)",& __key);
  }
  
#line 172 
  health->health = & (dev->iseg)->health;
  
#line 173 
  health->health_counter = & (dev->iseg)->health_counter;
  
#line 175 
  health->timer.data = (unsigned long)dev;
  
#line 176 
  health->timer.function = & poll_health;
  
#line 177 
  health->timer.expires = round_jiffies(jiffies + 500UL);
  
#line 178 
  add_timer(& health->timer);
  
#line 179 
  return;
}


#line 181  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/health.c"
void mlx5_stop_health_poll(struct mlx5_core_dev *dev)
{
  int tmp;
  
#line 183 
  struct mlx5_core_health *health = & dev->priv.health;
  
#line 185 
  ldv_del_timer_sync_59(& health->timer);
  
#line 187 
  ldv_spin_lock_irq_60_0(& health_lock);
  
#line 188 
  tmp = list_empty((struct list_head const *)(& health->list));
  
#line 188 
  if (tmp == 0) 
#line 189 
                list_del_init(& health->list); else ;
  
#line 190 
  ldv_spin_unlock_irq_61_0(& health_lock);
  
#line 191 
  return;
}


#line 193  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/health.c"
void mlx5_health_cleanup(void)
{
  
#line 195 
  return;
}


#line 197  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/health.c"
void mlx5_health_init(void)
{
  struct lock_class_key __key;
  
#line 199 
  __init_work(& health_work,0);
  
#line 199 
  atomic_long_t __constr_expr_27 = {.counter = WORK_STRUCT_NO_POOL_1};
  
#line 199 
  health_work.data = __constr_expr_27;
  
#line 199 
  lockdep_init_map(& health_work.lockdep_map,"(&health_work)",& __key,0);
  
#line 199 
  INIT_LIST_HEAD(& health_work.entry);
  
#line 199 
  health_work.func = & health_care;
  
#line 201 
  return;
}


#line 56  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_health.c.aux"
int ldv_emg_del_timer_sync(struct timer_list *arg0);


#line 62 
int ldv_emg_mod_timer(struct timer_list *arg0, unsigned long arg1);


#line 514  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_health.c.aux"
static void ldv_spin_lock_irq_51(spinlock_t *lock)
{
  
#line 518 
  ldv_spin_model_lock((char *)"health_lock");
  
#line 520 
  spin_lock_irq_5(lock);
  
#line 521 
  return;
}


#line 524  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_health.c.aux"
static void ldv_spin_unlock_irq_52(spinlock_t *lock)
{
  
#line 528 
  ldv_spin_model_unlock((char *)"health_lock");
  
#line 530 
  spin_unlock_irq_5(lock);
  
#line 531 
  return;
}


#line 534  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_health.c.aux"
static void ldv_spin_lock_irq_53_0(spinlock_t *lock)
{
  
#line 538 
  ldv_spin_model_lock((char *)"health_lock");
  
#line 540 
  spin_lock_irq_5(lock);
  
#line 541 
  return;
}


#line 544  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_health.c.aux"
static void ldv_spin_unlock_irq_54_0(spinlock_t *lock)
{
  
#line 548 
  ldv_spin_model_unlock((char *)"health_lock");
  
#line 550 
  spin_unlock_irq_5(lock);
  
#line 551 
  return;
}


#line 554  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_health.c.aux"
static void ldv_spin_lock_irq_55_0(spinlock_t *lock)
{
  
#line 558 
  ldv_spin_model_lock((char *)"health_lock");
  
#line 560 
  spin_lock_irq_5(lock);
  
#line 561 
  return;
}


#line 564  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_health.c.aux"
static void ldv_spin_unlock_irq_56_0(spinlock_t *lock)
{
  
#line 568 
  ldv_spin_model_unlock((char *)"health_lock");
  
#line 570 
  spin_unlock_irq_5(lock);
  
#line 571 
  return;
}


#line 574  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_health.c.aux"
static bool ldv_queue_work_57(struct workqueue_struct *wq, struct work_struct *work)
{
  bool __retres;
  bool tmp;
  
#line 578 
  tmp = ldv_emg_queue_work(wq,work);
  
#line 578 
  __retres = tmp != 0;
  
#line 578 
  return __retres;
}


#line 582  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_health.c.aux"
static int ldv_mod_timer_58(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2)
{
  int tmp;
  
#line 586 
  tmp = ldv_emg_mod_timer(ldv_func_arg1,ldv_func_arg2);
  
#line 586 
  return tmp;
}


#line 590  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_health.c.aux"
static int ldv_del_timer_sync_59(struct timer_list *ldv_func_arg1)
{
  int tmp;
  
#line 594 
  tmp = ldv_emg_del_timer_sync(ldv_func_arg1);
  
#line 594 
  return tmp;
}


#line 598  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_health.c.aux"
static void ldv_spin_lock_irq_60_0(spinlock_t *lock)
{
  
#line 602 
  ldv_spin_model_lock((char *)"health_lock");
  
#line 604 
  spin_lock_irq_5(lock);
  
#line 605 
  return;
}


#line 608  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_health.c.aux"
static void ldv_spin_unlock_irq_61_0(spinlock_t *lock)
{
  
#line 612 
  ldv_spin_model_unlock((char *)"health_lock");
  
#line 614 
  spin_unlock_irq_5(lock);
  
#line 615 
  return;
}


#line 250  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/bitops.h"
__inline static int test_and_clear_bit(long nr, unsigned long volatile *addr)
{
  int __retres;
  
#line 252 
  ldv_inline_asm();
  
#line 253 
  ldv_inline_asm();
  
#line 252 
  __retres = 0;
  
#line 252 
  goto return_label;
  cc_label: 
#line 252 
  ;
  
#line 252 
  __retres = 1;
  return_label: 
#line 252 
                return __retres;
}


#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/page_64.h"
unsigned long __phys_addr(unsigned long);


#line 131  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kmemcheck.h"
__inline static void kmemcheck_mark_initialized(void *address, unsigned int n)
{
  
#line 133 
  return;
}


#line 945  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm.h"
__inline static void *lowmem_page_address(struct page const *page)
{
  void *__retres;
  
#line 947 
  __retres = (void *)((unsigned long)((unsigned long long)(((long)page + 24189255811072L) / 64L) << 12) + 18446612132314218496UL);
  
#line 947 
  return __retres;
}


#line 73  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dma-mapping.h"
__inline static int valid_dma_direction(int dma_direction)
{
  int __retres;
  
#line 76 
  __retres = (unsigned int)dma_direction <= 2U;
  
#line 76 
  return __retres;
}


#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dma-debug.h"
void debug_dma_map_page(struct device *, struct page *, size_t, size_t, int, dma_addr_t, bool);


#line 42 
void debug_dma_mapping_error(struct device *, dma_addr_t);


#line 44 
void debug_dma_unmap_page(struct device *, dma_addr_t, size_t, int, bool);


#line 30  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/dma-mapping.h"
extern struct dma_map_ops *dma_ops;


#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/dma-mapping.h"
__inline static struct dma_map_ops *get_dma_ops(struct device *dev)
{
  struct dma_map_ops *__retres;
  
#line 37 
  if ((long)(dev == (struct device *)0) != 0L || dev->archdata.dma_ops == (struct dma_map_ops *)0) {
    
#line 38 
    __retres = dma_ops;
    
#line 38 
    goto return_label;
  }
  else {
    
#line 40 
    __retres = dev->archdata.dma_ops;
    
#line 40 
    goto return_label;
  }
  return_label: 
#line 37 
                return __retres;
}


#line 10  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/dma-mapping-common.h"
__inline static dma_addr_t dma_map_single_attrs(struct device *dev, void *ptr, size_t size, enum dma_data_direction dir, struct dma_attrs *attrs)
{
  dma_addr_t addr;
  int tmp_0;
  unsigned long tmp_1;
  unsigned long tmp_2;
  
#line 15 
  struct dma_map_ops *ops = get_dma_ops(dev);
  
#line 18 
  kmemcheck_mark_initialized(ptr,(unsigned int)size);
  
#line 19 
  tmp_0 = valid_dma_direction((int)dir);
  
#line 19 
  if ((long)(tmp_0 == 0) != 0L) {
    
#line 21 
    ldv_inline_asm();
    
#line 19 
    ;
  }
  else ;
  
#line 20 
  ;
  
#line 20 
  ;
  
#line 20 
  ;
  
#line 20 
  ;
  
#line 20 
  tmp_1 = __phys_addr((unsigned long)ptr);
  
#line 20 
  ;
  
#line 20 
  addr = (*(ops->map_page))(dev,(struct page *)(-24189255811072) + (tmp_1 >> 12),(unsigned long)ptr & 4095UL,size,dir,attrs);
  
#line 23 
  ;
  
#line 23 
  ;
  
#line 23 
  ;
  
#line 23 
  ;
  
#line 23 
  tmp_2 = __phys_addr((unsigned long)ptr);
  
#line 23 
  ;
  
#line 23 
  debug_dma_map_page(dev,(struct page *)(-24189255811072) + (tmp_2 >> 12),(unsigned long)ptr & 4095UL,size,(int)dir,addr,(_Bool)1);
  
#line 26 
  return addr;
}


#line 29  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/dma-mapping-common.h"
__inline static void dma_unmap_single_attrs(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir, struct dma_attrs *attrs)
{
  int tmp_0;
  
#line 34 
  struct dma_map_ops *ops = get_dma_ops(dev);
  
#line 36 
  tmp_0 = valid_dma_direction((int)dir);
  
#line 36 
  if ((long)(tmp_0 == 0) != 0L) {
    
#line 38 
    ldv_inline_asm();
    
#line 36 
    ;
  }
  else ;
  
#line 37 
  if (ops->unmap_page != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *))0) 
    
#line 38 
    (*(ops->unmap_page))(dev,addr,size,dir,attrs); else ;
  
#line 39 
  debug_dma_unmap_page(dev,addr,size,(int)dir,(_Bool)1);
  
#line 40 
  return;
}


#line 76  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/dma-mapping-common.h"
__inline static dma_addr_t dma_map_page(struct device *dev, struct page *page, size_t offset, size_t size, enum dma_data_direction dir)
{
  dma_addr_t addr;
  void *tmp_0;
  int tmp_1;
  
#line 80 
  struct dma_map_ops *ops = get_dma_ops(dev);
  
#line 83 
  ;
  
#line 83 
  tmp_0 = lowmem_page_address((struct page const *)page);
  
#line 83 
  ;
  
#line 83 
  kmemcheck_mark_initialized(tmp_0 + offset,(unsigned int)size);
  
#line 84 
  tmp_1 = valid_dma_direction((int)dir);
  
#line 84 
  if ((long)(tmp_1 == 0) != 0L) {
    
#line 86 
    ldv_inline_asm();
    
#line 84 
    ;
  }
  else ;
  
#line 85 
  addr = (*(ops->map_page))(dev,page,offset,size,dir,(struct dma_attrs *)0);
  
#line 86 
  debug_dma_map_page(dev,page,offset,size,(int)dir,addr,(_Bool)0);
  
#line 88 
  return addr;
}


#line 47  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/dma-mapping.h"
__inline static int dma_mapping_error(struct device *dev, dma_addr_t dma_addr)
{
  int __retres;
  
#line 49 
  struct dma_map_ops *ops = get_dma_ops(dev);
  
#line 50 
  debug_dma_mapping_error(dev,dma_addr);
  
#line 51 
  if (ops->mapping_error != (int (*)(struct device *, dma_addr_t ))0) {
    int tmp_0;
    
#line 52 
    tmp_0 = (*(ops->mapping_error))(dev,dma_addr);
    
#line 52 
    __retres = tmp_0;
    
#line 52 
    goto return_label;
  }
  else ;
  
#line 54 
  __retres = dma_addr == 0ULL;
  return_label: 
#line 54 
                return __retres;
}


#line 230  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static unsigned int skb_frag_size(skb_frag_t const *frag)
{
  unsigned int __retres;
  
#line 232 
  __retres = frag->size;
  
#line 232 
  return __retres;
}


#line 775 
void consume_skb(struct sk_buff *);


#line 976  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static unsigned char *skb_end_pointer(struct sk_buff const *skb)
{
  unsigned char *__retres;
  
#line 978 
  __retres = skb->head + skb->end;
  
#line 978 
  return __retres;
}


#line 1572  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static unsigned int skb_headlen(struct sk_buff const *skb)
{
  unsigned int __retres;
  
#line 1574 
  __retres = skb->len - skb->data_len;
  
#line 1574 
  return __retres;
}


#line 1707  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static unsigned char *__skb_pull(struct sk_buff *skb, unsigned int len)
{
  unsigned char *__retres;
  
#line 1709 
  skb->len -= len;
  
#line 1710 
  if ((long)(skb->len < skb->data_len) != 0L) {
    
#line 1712 
    ldv_inline_asm();
    
#line 1710 
    ;
  }
  else ;
  
#line 1711 
  skb->data += len;
  
#line 1711 
  __retres = skb->data;
  
#line 1711 
  return __retres;
}


#line 1714  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static unsigned char *skb_pull_inline(struct sk_buff *skb, unsigned int len)
{
  unsigned char *tmp_0;
  
#line 1716 
  if ((long)(skb->len < len) == 0L) 
#line 1716 
                                    tmp_0 = __skb_pull(skb,len); else 
                                                                   
#line 1716 
                                                                   tmp_0 = (unsigned char *)0U;
  
#line 1716 
  return tmp_0;
}


#line 1880  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static unsigned char *skb_transport_header(struct sk_buff const *skb)
{
  unsigned char *__retres;
  
#line 1882 
  __retres = skb->head + (int)skb->transport_header;
  
#line 1882 
  return __retres;
}


#line 1967  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static int skb_transport_offset(struct sk_buff const *skb)
{
  int __retres;
  unsigned char *tmp;
  
#line 1969 
  tmp = skb_transport_header(skb);
  
#line 1969 
  ;
  
#line 1969 
  __retres = (int)((long)tmp - (long)skb->data);
  
#line 1969 
  return __retres;
}


#line 2272  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static struct page *skb_frag_page(skb_frag_t const *frag)
{
  struct page *__retres;
  
#line 2274 
  __retres = frag->page.p;
  
#line 2274 
  return __retres;
}


#line 2390  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static dma_addr_t skb_frag_dma_map(struct device *dev, skb_frag_t const *frag, size_t offset, size_t size, enum dma_data_direction dir)
{
  dma_addr_t tmp_0;
  struct page *tmp;
  
#line 2395 
  ;
  
#line 2395 
  ;
  
#line 2395 
  ;
  
#line 2395 
  tmp = skb_frag_page(frag);
  
#line 2395 
  ;
  
#line 2395 
  tmp_0 = dma_map_page(dev,tmp,(unsigned long)frag->page_offset + offset,size,dir);
  
#line 2395 
  return tmp_0;
}


#line 2789  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void skb_copy_from_linear_data(struct sk_buff const *skb, void *to, unsigned int const len)
{
  
#line 2793 
  memcpy(to,(void const *)skb->data,(unsigned long)len);
  
#line 2794 
  return;
}


#line 3295  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static u16 skb_get_queue_mapping(struct sk_buff const *skb)
{
  u16 __retres;
  
#line 3297 
  __retres = skb->queue_mapping;
  
#line 3297 
  return __retres;
}


#line 3384  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static bool skb_is_gso(struct sk_buff const *skb)
{
  bool __retres;
  unsigned char *tmp;
  
#line 3386 
  tmp = skb_end_pointer(skb);
  
#line 3386 
  ;
  
#line 3386 
  __retres = (_Bool)((unsigned int)((struct skb_shared_info *)tmp)->gso_size != 0U);
  
#line 3386 
  return __retres;
}


#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dynamic_queue_limits.h"
__inline static void dql_queued(struct dql *dql, unsigned int count)
{
  
#line 74 
  if ((long)(count > 268435455U) != 0L) {
    
#line 76 
    ldv_inline_asm();
    
#line 74 
    ;
  }
  else ;
  
#line 76 
  dql->last_obj_cnt = count;
  
#line 77 
  ldv_inline_asm();
  
#line 85 
  dql->num_queued += count;
  
#line 86 
  return;
}


#line 89  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dynamic_queue_limits.h"
__inline static int dql_avail(struct dql const *dql)
{
  int __retres;
  unsigned int const volatile *tmp;
  unsigned int const volatile *tmp_0;
  {
    
#line 91 
    unsigned int const __var = 0U;
    
#line 91 
    tmp = (unsigned int const volatile *)(& dql->adj_limit);
  }
  {
    
#line 91 
    unsigned int const __var_0 = 0U;
    
#line 91 
    tmp_0 = (unsigned int const volatile *)(& dql->num_queued);
  }
  
#line 91 
  ;
  
#line 91 
  __retres = (int)(*tmp - *tmp_0);
  
#line 91 
  return __retres;
}


#line 95 
void dql_completed(struct dql *, unsigned int);


#line 1771  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static int netdev_get_prio_tc_map(struct net_device const *dev, u32 prio)
{
  int __retres;
  
#line 1773 
  __retres = (int)dev->prio_tc_map[prio & 15U];
  
#line 1773 
  return __retres;
}


#line 2505 
void netif_schedule_queue(struct netdev_queue *);


#line 2541 
void netif_tx_wake_queue(struct netdev_queue *);


#line 2584  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static bool netif_tx_queue_stopped(struct netdev_queue const *dev_queue)
{
  bool __retres;
  int tmp;
  
#line 2586 
  tmp = constant_test_bit(0L,(unsigned long const volatile *)(& dev_queue->state));
  
#line 2586 
  __retres = (_Bool)(tmp != 0);
  
#line 2586 
  return __retres;
}


#line 2600  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static bool netif_xmit_stopped(struct netdev_queue const *dev_queue)
{
  bool __retres;
  
#line 2602 
  __retres = (_Bool)((dev_queue->state & 3UL) != 0UL);
  
#line 2602 
  return __retres;
}


#line 2645  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void netdev_tx_sent_queue(struct netdev_queue *dev_queue, unsigned int bytes)
{
  int tmp;
  int tmp_0;
  
#line 2649 
  dql_queued(& dev_queue->dql,bytes);
  
#line 2651 
  tmp = dql_avail((struct dql const *)(& dev_queue->dql));
  
#line 2651 
  if ((long)(tmp >= 0) != 0L) 
#line 2652 
                              goto return_label; else ;
  
#line 2654 
  set_bit(1L,(unsigned long volatile *)(& dev_queue->state));
  
#line 2655 
  ldv_inline_asm();
  
#line 2664 
  tmp_0 = dql_avail((struct dql const *)(& dev_queue->dql));
  
#line 2664 
  if ((long)(tmp_0 >= 0) != 0L) 
#line 2665 
                                set_bit(1L,(unsigned long volatile *)(& dev_queue->state)); else ;
  return_label: 
#line 2666 
                return;
}


#line 2683  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void netdev_tx_completed_queue(struct netdev_queue *dev_queue, unsigned int pkts, unsigned int bytes)
{
  int tmp;
  int tmp_0;
  
#line 2687 
  if ((long)(bytes == 0U) != 0L) 
#line 2688 
                                 goto return_label; else ;
  
#line 2690 
  dql_completed(& dev_queue->dql,bytes);
  
#line 2691 
  ldv_inline_asm();
  
#line 2699 
  tmp = dql_avail((struct dql const *)(& dev_queue->dql));
  
#line 2699 
  if (tmp < 0) 
#line 2700 
               goto return_label; else ;
  
#line 2702 
  tmp_0 = test_and_clear_bit(1L,(unsigned long volatile *)(& dev_queue->state));
  
#line 2702 
  if (tmp_0 != 0) 
#line 2703 
                  netif_schedule_queue(dev_queue); else ;
  return_label: 
#line 2704 
                return;
}


#line 2900 
void __dev_kfree_skb_any(struct sk_buff *, enum skb_free_reason);


#line 2931  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void dev_kfree_skb_any(struct sk_buff *skb)
{
  
#line 2933 
  __dev_kfree_skb_any(skb,(enum skb_free_reason)SKB_REASON_DROPPED);
  
#line 2934 
  return;
}


#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/tcp.h"
__inline static struct tcphdr *tcp_hdr(struct sk_buff const *skb)
{
  struct tcphdr *tmp;
  
#line 29 
  tmp = (struct tcphdr *)skb_transport_header(skb);
  
#line 29 
  return tmp;
}


#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/tcp.h"
__inline static unsigned int tcp_hdrlen(struct sk_buff const *skb)
{
  unsigned int __retres;
  struct tcphdr *tmp;
  
#line 34 
  tmp = tcp_hdr(skb);
  
#line 34 
  ;
  
#line 34 
  __retres = (unsigned int)((int)tmp->doff * 4);
  
#line 34 
  return __retres;
}


#line 98  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/wq.h"
__inline static void *mlx5_wq_cyc_get_wqe(struct mlx5_wq_cyc *wq, u16 ix)
{
  void *__retres;
  
#line 100 
  __retres = wq->buf + ((int)ix << (int)wq->log_stride);
  
#line 100 
  return __retres;
}


#line 126  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/wq.h"
__inline static void mlx5_cqwq_pop(struct mlx5_cqwq *wq)
{
  
#line 128 
  wq->cc += 1U;
  
#line 129 
  return;
}


#line 131  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/wq.h"
__inline static void mlx5_cqwq_update_db_record(struct mlx5_cqwq *wq)
{
  
#line 133 
  if (0 != 0) 
#line 133 
              *(wq->db) = ((wq->cc << 24) | ((wq->cc << 8) & 16711680U)) | ((wq->cc >> 8) & 65280U); else 
                                                                    
#line 133 
                                                                    *(wq->db) = __fswab32(wq->cc & 16777215U);
  
#line 134 
  return;
}


#line 466  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en.h"
bool mlx5e_poll_tx_cq(struct mlx5e_cq *cq);


#line 469 
struct mlx5_cqe64 *mlx5e_get_cqe(struct mlx5e_cq *cq);


#line 493  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en.h"
__inline static void mlx5e_tx_notify_hw(struct mlx5e_sq *sq, struct mlx5e_tx_wqe *wqe)
{
  
#line 495 
  ldv_inline_asm();
  
#line 499 
  if (0 != 0) 
#line 499 
              *(sq->wq.db) = ((unsigned int)sq->pc << 24) | (((unsigned int)sq->pc << 8) & 16711680U); else 
                                                                    
#line 499 
                                                                    *(sq->wq.db) = __fswab32((unsigned int)sq->pc);
  
#line 500 
  ldv_inline_asm();
  
#line 506 
  mlx5_write64((__be32 *)(& wqe->ctrl),sq->uar_map + (sq->bf_offset + 2048U),(spinlock_t *)0);
  
#line 510 
  sq->bf_offset ^= sq->bf_buf_size;
  
#line 511 
  return;
}


#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_tx.c"
void mlx5e_send_nop(struct mlx5e_sq *sq, bool notify_hw)
{
  
#line 43 
  struct mlx5_wq_cyc *wq = & sq->wq;
  
#line 45 
  u16 pi = (unsigned short)((int)sq->pc & (int)wq->sz_m1);
  
#line 46 
  struct mlx5e_tx_wqe *wqe = mlx5_wq_cyc_get_wqe(wq,(unsigned short)((int)pi));
  
#line 48 
  struct mlx5_wqe_ctrl_seg *cseg = & wqe->ctrl;
  
#line 50 
  memset((void *)cseg,0,16UL);
  
#line 52 
  if (0 != 0) 
#line 52 
              cseg->opmod_idx_opcode = ((((unsigned int)((int)sq->pc << 8) << 8) & 16776960U) | (((unsigned int)((int)sq->pc << 8) >> 8) & 65280U)) | ((unsigned int)((int)sq->pc << 8) >> 24); else 
                                                                    
#line 52 
                                                                    cseg->opmod_idx_opcode = __fswab32((unsigned int)((int)sq->pc << 8));
  
#line 53 
  if (0 != 0) 
#line 53 
              cseg->qpn_ds = (((((sq->sqn << 8) << 24) | (((sq->sqn << 8) << 8) & 16711680U)) | (((sq->sqn << 8) >> 8) & 65280U)) | ((sq->sqn << 8) >> 24)) | 16777216U; else 
                                                                    
#line 53 
                                                                    cseg->qpn_ds = __fswab32((sq->sqn << 8) | 1U);
  
#line 55 
  *(sq->skb + (int)pi) = (struct sk_buff *)0;
  
#line 56 
  sq->pc = (u16)((int)sq->pc + 1);
  
#line 58 
  if ((int)notify_hw != 0) {
    
#line 59 
    cseg->fm_ce_se = (unsigned char)8U;
    
#line 60 
    mlx5e_tx_notify_hw(sq,wqe);
  }
  else ;
  
#line 62 
  return;
}


#line 64  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_tx.c"
static void mlx5e_dma_pop_last_pushed(struct mlx5e_sq *sq, dma_addr_t *addr, u32 *size)
{
  
#line 67 
  sq->dma_fifo_pc -= 1U;
  
#line 68 
  *addr = (sq->dma_fifo + (sq->dma_fifo_pc & sq->dma_fifo_mask))->addr;
  
#line 69 
  *size = (sq->dma_fifo + (sq->dma_fifo_pc & sq->dma_fifo_mask))->size;
  
#line 70 
  return;
}


#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_tx.c"
static void mlx5e_dma_unmap_wqe_err(struct mlx5e_sq *sq, struct sk_buff *skb)
{
  dma_addr_t addr;
  u32 size;
  int i;
  
#line 78 
  i = 0;
  
#line 78 
  goto ldv_59213;
  ldv_59212: 
#line 79 
  ;
  
#line 79 
  mlx5e_dma_pop_last_pushed(sq,& addr,& size);
  
#line 80 
  dma_unmap_single_attrs(sq->pdev,addr,(unsigned long)size,(enum dma_data_direction)DMA_TO_DEVICE,(struct dma_attrs *)0);
  
#line 78 
  i += 1;
  ldv_59213: 
#line 79 
  ;
  
#line 78 
  if ((int)((struct mlx5e_tx_skb_cb *)(& skb->cb))->num_dma > i) 
#line 80 
                                                                 goto ldv_59212; else 
                                                                    
#line 83 
                                                                    goto ldv_59214;
  ldv_59214: 
#line 84 
  ;
  
#line 85 
  return;
}


#line 84  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_tx.c"
__inline static void mlx5e_dma_push(struct mlx5e_sq *sq, dma_addr_t addr, u32 size)
{
  
#line 87 
  (sq->dma_fifo + (sq->dma_fifo_pc & sq->dma_fifo_mask))->addr = addr;
  
#line 88 
  (sq->dma_fifo + (sq->dma_fifo_pc & sq->dma_fifo_mask))->size = size;
  
#line 89 
  sq->dma_fifo_pc += 1U;
  
#line 90 
  return;
}


#line 92  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_tx.c"
__inline static void mlx5e_dma_get(struct mlx5e_sq *sq, u32 i, dma_addr_t *addr, u32 *size)
{
  
#line 95 
  *addr = (sq->dma_fifo + (sq->dma_fifo_mask & i))->addr;
  
#line 96 
  *size = (sq->dma_fifo + (sq->dma_fifo_mask & i))->size;
  
#line 97 
  return;
}


#line 99  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_tx.c"
u16 mlx5e_select_queue(struct net_device *dev, struct sk_buff *skb, void *accel_priv, u16 (*fallback)(struct net_device *, struct sk_buff *))
{
  u16 __retres;
  u16 tmp_0;
  int tmp_1;
  
#line 102 
  struct mlx5e_priv *priv = netdev_priv((struct net_device const *)dev);
  
#line 103 
  tmp_0 = (*fallback)(dev,skb);
  
#line 103 
  int channel_ix = (int)tmp_0;
  
#line 104 
  if (((int)skb->vlan_tci & 4096) != 0) 
#line 104 
                                        tmp_1 = (int)skb->vlan_tci >> 13; else 
                                                                    
#line 104 
                                                                    tmp_1 = priv->default_vlan_prio;
  
#line 104 
  int up_0 = tmp_1;
  
#line 107 
  int tc = netdev_get_prio_tc_map((struct net_device const *)dev,(unsigned int)up_0);
  
#line 109 
  __retres = (unsigned short)(*(priv->channel + channel_ix))->tc_to_txq_map[tc];
  
#line 109 
  return __retres;
}


#line 112  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_tx.c"
__inline static u16 mlx5e_get_inline_hdr_size(struct mlx5e_sq *sq, struct sk_buff *skb)
{
  u16 __retres;
  
#line 116 
  __retres = (unsigned short)16U;
  
#line 116 
  return __retres;
}


#line 119  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_tx.c"
static netdev_tx_t mlx5e_sq_xmit(struct mlx5e_sq *sq, struct sk_buff *skb)
{
  netdev_tx_t __retres;
  struct mlx5_wqe_data_seg *dseg;
  u16 headlen;
  u16 ds_cnt;
  u16 ihs;
  int i;
  bool tmp_7;
  unsigned int tmp_9;
  unsigned char *tmp_18;
  int tmp_22;
  bool tmp_21;
  
#line 121 
  struct mlx5_wq_cyc *wq = & sq->wq;
  
#line 123 
  u16 pi = (unsigned short)((int)sq->pc & (int)wq->sz_m1);
  
#line 124 
  struct mlx5e_tx_wqe *wqe = mlx5_wq_cyc_get_wqe(wq,(unsigned short)((int)pi));
  
#line 126 
  struct mlx5_wqe_ctrl_seg *cseg = & wqe->ctrl;
  
#line 127 
  struct mlx5_wqe_eth_seg *eseg = & wqe->eth;
  
#line 130 
  u8 opcode = (unsigned char)10U;
  
#line 131 
  dma_addr_t dma_addr = 0ULL;
  
#line 137 
  memset((void *)wqe,0,32UL);
  
#line 139 
  if ((long)((unsigned int)*((unsigned char *)skb + 145UL) == 6U) != 0L) 
    
#line 140 
    eseg->cs_flags = (unsigned char)192U; else 
#line 142 
                                               sq->stats.csum_offload_none += 1ULL;
  
#line 144 
  tmp_7 = skb_is_gso((struct sk_buff const *)skb);
  
#line 144 
  if ((int)tmp_7 != 0) {
    u32 payload_len;
    __u16 tmp_1;
    unsigned char *tmp_0;
    int tmp_2;
    unsigned int tmp_3;
    unsigned char *tmp_4;
    
#line 147 
    tmp_0 = skb_end_pointer((struct sk_buff const *)skb);
    
#line 147 
    tmp_1 = __fswab16((unsigned short)((int)((struct skb_shared_info *)tmp_0)->gso_size));
    
#line 147 
    eseg->mss = tmp_1;
    
#line 148 
    opcode = (unsigned char)14U;
    
#line 149 
    tmp_2 = skb_transport_offset((struct sk_buff const *)skb);
    
#line 149 
    tmp_3 = tcp_hdrlen((struct sk_buff const *)skb);
    
#line 149 
    ihs = (unsigned short)((int)((unsigned short)tmp_2) + (int)((unsigned short)tmp_3));
    
#line 150 
    payload_len = skb->len - (unsigned int)ihs;
    
#line 152 
    tmp_4 = skb_end_pointer((struct sk_buff const *)skb);
    
#line 151 
    ((struct mlx5e_tx_skb_cb *)(& skb->cb))->num_bytes = skb->len + (unsigned int)(((int)((struct skb_shared_info *)tmp_4)->gso_segs + -1) * (int)ihs);
    
#line 153 
    sq->stats.tso_packets += 1ULL;
    
#line 154 
    sq->stats.tso_bytes += (unsigned long long)payload_len;
  }
  else {
    unsigned int tmp_6;
    
#line 156 
    ihs = mlx5e_get_inline_hdr_size(sq,skb);
    {
      unsigned int tmp_5;
      
#line 157 
      unsigned int __max1 = skb->len;
      
#line 157 
      unsigned int __max2 = 60U;
      
#line 157 
      if (__max1 > __max2) 
#line 157 
                           tmp_5 = __max1; else 
#line 157 
                                                tmp_5 = __max2;
      
#line 157 
      tmp_6 = tmp_5;
    }
    
#line 157 
    ((struct mlx5e_tx_skb_cb *)(& skb->cb))->num_bytes = tmp_6;
  }
  
#line 161 
  skb_copy_from_linear_data((struct sk_buff const *)skb,(void *)(& eseg->inline_hdr_start),(unsigned int)ihs);
  
#line 162 
  skb_pull_inline(skb,(unsigned int)ihs);
  
#line 164 
  if (0 != 0) 
#line 164 
              eseg->inline_hdr_sz = (unsigned short)(((int)ihs << 8) | ((int)ihs >> 8)); else 
                                                                    
#line 164 
                                                                    eseg->inline_hdr_sz = __fswab16((unsigned short)((int)ihs));
  
#line 166 
  ds_cnt = (unsigned short)2U;
  
#line 167 
  ds_cnt = (unsigned short)((int)((unsigned short)(((unsigned long)ihs + 13UL) / 16UL)) + (int)ds_cnt);
  
#line 169 
  dseg = (struct mlx5_wqe_data_seg *)cseg + (int)ds_cnt;
  
#line 171 
  ((struct mlx5e_tx_skb_cb *)(& skb->cb))->num_dma = (unsigned char)0U;
  
#line 173 
  tmp_9 = skb_headlen((struct sk_buff const *)skb);
  
#line 173 
  headlen = (unsigned short)tmp_9;
  
#line 174 
  if ((unsigned int)headlen != 0U) {
    int tmp_10;
    
#line 175 
    dma_addr = dma_map_single_attrs(sq->pdev,(void *)skb->data,(unsigned long)headlen,(enum dma_data_direction)DMA_TO_DEVICE,(struct dma_attrs *)0);
    
#line 177 
    tmp_10 = dma_mapping_error(sq->pdev,dma_addr);
    
#line 177 
    if ((long)(tmp_10 != 0) != 0L) 
#line 178 
                                   goto dma_unmap_wqe_err; else ;
    
#line 180 
    if (0 != 0) 
#line 180 
                dseg->addr = (((((((dma_addr << 56) | ((dma_addr << 40) & 71776119061217280ULL)) | ((dma_addr << 24) & 280375465082880ULL)) | ((dma_addr << 8) & 1095216660480ULL)) | ((dma_addr >> 8) & 4278190080ULL)) | ((dma_addr >> 24) & 16711680ULL)) | ((dma_addr >> 40) & 65280ULL)) | (dma_addr >> 56); else 
                                                                    
#line 180 
                                                                    dseg->addr = __fswab64(dma_addr);
    
#line 181 
    dseg->lkey = sq->mkey_be;
    
#line 182 
    if (0 != 0) 
#line 182 
                dseg->byte_count = ((unsigned int)headlen << 24) | (((unsigned int)headlen << 8) & 16711680U); else 
                                                                    
#line 182 
                                                                    dseg->byte_count = __fswab32((unsigned int)headlen);
    
#line 184 
    mlx5e_dma_push(sq,dma_addr,(unsigned int)headlen);
    
#line 185 
    ((struct mlx5e_tx_skb_cb *)(& skb->cb))->num_dma = (u8)((int)((struct mlx5e_tx_skb_cb *)(& skb->cb))->num_dma + 1);
    
#line 187 
    dseg += 1;
  }
  else ;
  
#line 190 
  i = 0;
  
#line 190 
  goto ldv_59264;
  ldv_59263: 
#line 191 
  ;
  {
    unsigned char *tmp_13;
    unsigned int tmp_14;
    int tmp_15;
    
#line 191 
    tmp_13 = skb_end_pointer((struct sk_buff const *)skb);
    
#line 191 
    struct skb_frag_struct *frag = & ((struct skb_shared_info *)tmp_13)->frags[i];
    
#line 192 
    tmp_14 = skb_frag_size((skb_frag_t const *)frag);
    
#line 192 
    int fsz = (int)tmp_14;
    
#line 194 
    dma_addr = skb_frag_dma_map(sq->pdev,(skb_frag_t const *)frag,0UL,(unsigned long)fsz,(enum dma_data_direction)DMA_TO_DEVICE);
    
#line 196 
    tmp_15 = dma_mapping_error(sq->pdev,dma_addr);
    
#line 196 
    if ((long)(tmp_15 != 0) != 0L) 
#line 197 
                                   goto dma_unmap_wqe_err; else ;
    
#line 199 
    if (0 != 0) 
#line 199 
                dseg->addr = (((((((dma_addr << 56) | ((dma_addr << 40) & 71776119061217280ULL)) | ((dma_addr << 24) & 280375465082880ULL)) | ((dma_addr << 8) & 1095216660480ULL)) | ((dma_addr >> 8) & 4278190080ULL)) | ((dma_addr >> 24) & 16711680ULL)) | ((dma_addr >> 40) & 65280ULL)) | (dma_addr >> 56); else 
                                                                    
#line 199 
                                                                    dseg->addr = __fswab64(dma_addr);
    
#line 200 
    dseg->lkey = sq->mkey_be;
    
#line 201 
    if (0 != 0) 
#line 201 
                dseg->byte_count = ((((unsigned int)fsz << 24) | (((unsigned int)fsz << 8) & 16711680U)) | (((unsigned int)fsz >> 8) & 65280U)) | ((unsigned int)fsz >> 24); else 
                                                                    
#line 201 
                                                                    dseg->byte_count = __fswab32((unsigned int)fsz);
    
#line 203 
    mlx5e_dma_push(sq,dma_addr,(unsigned int)fsz);
    
#line 204 
    ((struct mlx5e_tx_skb_cb *)(& skb->cb))->num_dma = (u8)((int)((struct mlx5e_tx_skb_cb *)(& skb->cb))->num_dma + 1);
    
#line 206 
    dseg += 1;
  }
  
#line 190 
  i += 1;
  ldv_59264: 
#line 191 
  ;
  
#line 190 
  tmp_18 = skb_end_pointer((struct sk_buff const *)skb);
  
#line 190 
  ;
  
#line 190 
  if ((int)((struct skb_shared_info *)tmp_18)->nr_frags > i) 
#line 192 
                                                             goto ldv_59263; else 
                                                                    
#line 195 
                                                                    goto ldv_59265;
  ldv_59265: 
#line 196 
  ;
  
#line 209 
  ds_cnt = (unsigned short)((int)((unsigned short)((struct mlx5e_tx_skb_cb *)(& skb->cb))->num_dma) + (int)ds_cnt);
  
#line 211 
  if (0 != 0) 
#line 211 
              cseg->opmod_idx_opcode = ((((unsigned int)(((int)sq->pc << 8) | (int)opcode) << 24) | (((unsigned int)(((int)sq->pc << 8) | (int)opcode) << 8) & 16711680U)) | (((unsigned int)(((int)sq->pc << 8) | (int)opcode) >> 8) & 65280U)) | ((unsigned int)(((int)sq->pc << 8) | (int)opcode) >> 24); else 
                                                                    
#line 211 
                                                                    cseg->opmod_idx_opcode = __fswab32((unsigned int)(((int)sq->pc << 8) | (int)opcode));
  
#line 212 
  if (0 != 0) 
#line 212 
              cseg->qpn_ds = (((((sq->sqn << 8) | (unsigned int)ds_cnt) << 24) | ((((sq->sqn << 8) | (unsigned int)ds_cnt) << 8) & 16711680U)) | ((((sq->sqn << 8) | (unsigned int)ds_cnt) >> 8) & 65280U)) | (((sq->sqn << 8) | (unsigned int)ds_cnt) >> 24); else 
                                                                    
#line 212 
                                                                    cseg->qpn_ds = __fswab32((sq->sqn << 8) | (unsigned int)ds_cnt);
  
#line 214 
  *(sq->skb + (int)pi) = skb;
  
#line 216 
  ((struct mlx5e_tx_skb_cb *)(& skb->cb))->num_wqebbs = (unsigned char)(((int)ds_cnt + 3) / 4);
  
#line 218 
  sq->pc = (unsigned short)((int)sq->pc + (int)((unsigned short)((struct mlx5e_tx_skb_cb *)(& skb->cb))->num_wqebbs));
  
#line 220 
  netdev_tx_sent_queue(sq->txq,((struct mlx5e_tx_skb_cb *)(& skb->cb))->num_bytes);
  
#line 222 
  tmp_21 = mlx5e_sq_has_room_for(sq,(unsigned short)32);
  
#line 222 
  if (tmp_21) 
#line 222 
              tmp_22 = 0; else 
#line 222 
                               tmp_22 = 1;
  
#line 222 
  if ((long)tmp_22 != 0L) {
    
#line 223 
    netif_tx_start_queue(sq->txq);
    
#line 224 
    sq->stats.stopped += 1ULL;
  }
  else ;
  
#line 227 
  if ((unsigned int)*((unsigned char *)skb + 142UL) == 0U) 
#line 227 
                                                           goto _LOR;
  else {
    bool tmp_23;
    
#line 227 
    tmp_23 = netif_xmit_stopped((struct netdev_queue const *)sq->txq);
    
#line 227 
    if ((int)tmp_23 != 0) {
      _LOR: {
              
#line 228 
              cseg->fm_ce_se = (unsigned char)8U;
              
#line 229 
              mlx5e_tx_notify_hw(sq,wqe);
            }
    }
    else ;
  }
  
#line 233 
  goto ldv_59267;
  ldv_59266: 
#line 234 
  ;
  
#line 234 
  mlx5e_send_nop(sq,(_Bool)0);
  ldv_59267: 
#line 235 
  ;
  
#line 233 
  if (((int)sq->pc & (int)wq->sz_m1) > (int)sq->edge) 
#line 235 
                                                      goto ldv_59266; else 
                                                                    
#line 238 
                                                                    goto ldv_59268;
  ldv_59268: 
#line 239 
  ;
  
#line 236 
  sq->stats.packets += 1ULL;
  
#line 237 
  __retres = NETDEV_TX_OK;
  
#line 237 
  goto return_label;
  dma_unmap_wqe_err: 
#line 239 
  ;
  
#line 240 
  sq->stats.dropped += 1ULL;
  
#line 241 
  mlx5e_dma_unmap_wqe_err(sq,skb);
  
#line 243 
  dev_kfree_skb_any(skb);
  
#line 245 
  __retres = NETDEV_TX_OK;
  return_label: 
#line 245 
                return __retres;
}


#line 248  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_tx.c"
netdev_tx_t mlx5e_xmit(struct sk_buff *skb, struct net_device *dev)
{
  u16 tmp_0;
  netdev_tx_t tmp_1;
  
#line 250 
  struct mlx5e_priv *priv = netdev_priv((struct net_device const *)dev);
  
#line 251 
  tmp_0 = skb_get_queue_mapping((struct sk_buff const *)skb);
  
#line 251 
  struct mlx5e_sq *sq = *(priv->txq_to_sq_map + (int)tmp_0);
  
#line 253 
  tmp_1 = mlx5e_sq_xmit(sq,skb);
  
#line 253 
  return tmp_1;
}


#line 256  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_tx.c"
bool mlx5e_poll_tx_cq(struct mlx5e_cq *cq)
{
  bool __retres;
  struct mlx5e_sq *sq;
  u32 dma_fifo_cc;
  u32 nbytes;
  u16 npkts;
  u16 sqcc;
  int i;
  int tmp;
  struct mlx5e_sq *tmp_0;
  bool tmp_2;
  
#line 266 
  tmp = test_and_clear_bit(1L,(unsigned long volatile *)(& cq->flags));
  
#line 266 
  if (tmp == 0) {
    
#line 267 
    __retres = (_Bool)0;
    
#line 267 
    goto return_label;
  }
  else ;
  {
    
#line 269 
    struct mlx5e_cq const *__mptr = (struct mlx5e_cq const *)cq;
    
#line 269 
    tmp_0 = (struct mlx5e_sq *)__mptr + 18446744073709551424U;
  }
  
#line 269 
  sq = tmp_0;
  
#line 271 
  npkts = (unsigned short)0U;
  
#line 272 
  nbytes = 0U;
  
#line 277 
  sqcc = sq->cc;
  
#line 280 
  dma_fifo_cc = sq->dma_fifo_cc;
  
#line 282 
  i = 0;
  
#line 282 
  goto ldv_59302;
  ldv_59301: 
#line 283 
  ;
  {
    struct mlx5_cqe64 *cqe;
    u16 wqe_counter;
    bool last_wqe;
    
#line 287 
    cqe = mlx5e_get_cqe(cq);
    
#line 288 
    if (cqe == (struct mlx5_cqe64 *)0) 
#line 289 
                                       goto ldv_59289; else ;
    
#line 291 
    mlx5_cqwq_pop(& cq->wq);
    
#line 293 
    if (0 != 0) 
#line 293 
                wqe_counter = (unsigned short)(((int)cqe->wqe_counter << 8) | ((int)cqe->wqe_counter >> 8)); else 
                                                                    
#line 293 
                                                                    wqe_counter = __fswab16((unsigned short)((int)cqe->wqe_counter));
    ldv_59299: 
#line 294 
    ;
    {
      struct sk_buff *skb;
      u16 ci;
      int j;
      
#line 300 
      last_wqe = (_Bool)((int)sqcc == (int)wqe_counter);
      
#line 302 
      ci = (unsigned short)((int)sq->wq.sz_m1 & (int)sqcc);
      
#line 303 
      skb = *(sq->skb + (int)ci);
      
#line 305 
      if ((long)(skb == (struct sk_buff *)0) != 0L) {
        
#line 306 
        sq->stats.nop += 1ULL;
        
#line 307 
        sqcc = (u16)((int)sqcc + 1);
        
#line 308 
        goto ldv_59293;
      }
      else ;
      
#line 311 
      j = 0;
      
#line 311 
      goto ldv_59297;
      ldv_59296: 
#line 312 
      ;
      {
        dma_addr_t addr;
        u32 size;
        
#line 315 
        mlx5e_dma_get(sq,dma_fifo_cc,& addr,& size);
        
#line 316 
        dma_fifo_cc += 1U;
        
#line 317 
        dma_unmap_single_attrs(sq->pdev,addr,(unsigned long)size,(enum dma_data_direction)DMA_TO_DEVICE,(struct dma_attrs *)0);
      }
      
#line 311 
      j += 1;
      ldv_59297: 
#line 312 
      ;
      
#line 311 
      if ((int)((struct mlx5e_tx_skb_cb *)(& skb->cb))->num_dma > j) 
        
#line 313 
        goto ldv_59296; else 
#line 316 
                             goto ldv_59298;
      ldv_59298: 
#line 317 
      ;
      
#line 321 
      npkts = (u16)((int)npkts + 1);
      
#line 322 
      nbytes = ((struct mlx5e_tx_skb_cb *)(& skb->cb))->num_bytes + nbytes;
      
#line 323 
      sqcc = (unsigned short)((int)((unsigned short)((struct mlx5e_tx_skb_cb *)(& skb->cb))->num_wqebbs) + (int)sqcc);
      
#line 324 
      consume_skb(skb);
    }
    ldv_59293: 
#line 326 
    ;
    
#line 325 
    if (! last_wqe) 
#line 327 
                    goto ldv_59299; else 
#line 330 
                                         goto ldv_59300;
    ldv_59300: 
#line 331 
    ;
  }
  
#line 282 
  i += 1;
  ldv_59302: 
#line 283 
  ;
  
#line 282 
  if (i <= 127) 
#line 284 
                goto ldv_59301; else 
#line 287 
                                     goto ldv_59289;
  ldv_59289: 
#line 288 
  ;
  
#line 328 
  mlx5_cqwq_update_db_record(& cq->wq);
  
#line 329 
  ldv_inline_asm();
  
#line 333 
  sq->dma_fifo_cc = dma_fifo_cc;
  
#line 334 
  sq->cc = sqcc;
  
#line 336 
  netdev_tx_completed_queue(sq->txq,(unsigned int)npkts,nbytes);
  
#line 338 
  tmp_2 = netif_tx_queue_stopped((struct netdev_queue const *)sq->txq);
  
#line 338 
  if ((int)tmp_2 != 0) {
    bool tmp_3;
    
#line 338 
    tmp_3 = mlx5e_sq_has_room_for(sq,(unsigned short)32);
    
#line 338 
    if ((int)tmp_3 != 0) {
      int tmp_4;
      
#line 340 
      tmp_4 = constant_test_bit(0L,(unsigned long const volatile *)(& sq->state));
      
#line 339 
      if ((long)(tmp_4 != 0) != 0L) {
        
#line 341 
        netif_tx_wake_queue(sq->txq);
        
#line 342 
        sq->stats.wake += 1ULL;
      }
      else ;
    }
    else ;
  }
  else ;
  
#line 344 
  if (i == 128) {
    
#line 345 
    set_bit(1L,(unsigned long volatile *)(& cq->flags));
    
#line 346 
    __retres = (_Bool)1;
    
#line 346 
    goto return_label;
  }
  else ;
  
#line 349 
  __retres = (_Bool)0;
  return_label: 
#line 349 
                return __retres;
}


#line 61  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list.h"
__inline static void list_add(struct list_head *new, struct list_head *head)
{
  
#line 63 
  __list_add(new,head,head->next);
  
#line 64 
  return;
}


#line 62  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rbtree.h"
void rb_insert_color(struct rb_node *, struct rb_root *);


#line 63 
void rb_erase(struct rb_node *, struct rb_root *);


#line 69 
struct rb_node *rb_first(struct rb_root const *);


#line 80  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rbtree.h"
__inline static void rb_link_node(struct rb_node *node, struct rb_node *parent, struct rb_node **rb_link)
{
  struct rb_node *tmp;
  
#line 83 
  node->__rb_parent_color = (unsigned long)parent;
  
#line 84 
  tmp = (struct rb_node *)0;
  
#line 84 
  node->rb_right = tmp;
  
#line 84 
  node->rb_left = tmp;
  
#line 86 
  *rb_link = node;
  
#line 87 
  return;
}


#line 490  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/workqueue.h"
static bool ldv_queue_work_51(struct workqueue_struct *wq, struct work_struct *work);


#line 158  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/memory_hotplug.h"
extern pg_data_t *node_data[];


#line 75  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/topology.h"
__inline static int numa_node_id(void)
{
  int tmp_3;
  {
    int pscr_ret__;
    {
      
#line 77 
      void const *__vpp_verify = (void const *)0;
      
#line 77 
      void const *tmp = __vpp_verify;
    }
    
#line 77 
    switch (4UL) {
      int tmp_0;
      int tmp_0_0;
      int tmp_1;
      int tmp_2;
      case (unsigned long)1: 
#line 77 
      ;
      {
        int pfo_ret__;
        
#line 77 
        switch (4UL) {
          case (unsigned long)1: 
#line 77 
          ;
          
#line 78 
          ldv_inline_asm();
          
#line 77 
          goto ldv_14146;
          case (unsigned long)2: 
#line 77 
          ;
          
#line 78 
          ldv_inline_asm();
          
#line 77 
          goto ldv_14146;
          case (unsigned long)4: 
#line 77 
          ;
          
#line 78 
          ldv_inline_asm();
          
#line 77 
          goto ldv_14146;
          case (unsigned long)8: 
#line 77 
          ;
          
#line 78 
          ldv_inline_asm();
          
#line 77 
          goto ldv_14146;
          default: 
#line 77 
          ;
          
#line 77 
          __bad_percpu_size();
        }
        ldv_14146: 
#line 77 
        ;
        
#line 77 
        tmp_0 = pfo_ret__;
      }
      
#line 77 
      pscr_ret__ = tmp_0;
      
#line 77 
      goto ldv_14152;
      case (unsigned long)2: 
#line 77 
      ;
      {
        int pfo_ret___0;
        
#line 77 
        switch (4UL) {
          case (unsigned long)1: 
#line 77 
          ;
          
#line 78 
          ldv_inline_asm();
          
#line 77 
          goto ldv_14156;
          case (unsigned long)2: 
#line 77 
          ;
          
#line 78 
          ldv_inline_asm();
          
#line 77 
          goto ldv_14156;
          case (unsigned long)4: 
#line 77 
          ;
          
#line 78 
          ldv_inline_asm();
          
#line 77 
          goto ldv_14156;
          case (unsigned long)8: 
#line 77 
          ;
          
#line 78 
          ldv_inline_asm();
          
#line 77 
          goto ldv_14156;
          default: 
#line 77 
          ;
          
#line 77 
          __bad_percpu_size();
        }
        ldv_14156: 
#line 77 
        ;
        
#line 77 
        tmp_0_0 = pfo_ret___0;
      }
      
#line 77 
      pscr_ret__ = tmp_0_0;
      
#line 77 
      goto ldv_14152;
      case (unsigned long)4: 
#line 77 
      ;
      {
        int pfo_ret___1;
        
#line 77 
        switch (4UL) {
          case (unsigned long)1: 
#line 77 
          ;
          
#line 78 
          ldv_inline_asm();
          
#line 77 
          goto ldv_14165;
          case (unsigned long)2: 
#line 77 
          ;
          
#line 78 
          ldv_inline_asm();
          
#line 77 
          goto ldv_14165;
          case (unsigned long)4: 
#line 77 
          ;
          
#line 78 
          ldv_inline_asm();
          
#line 77 
          goto ldv_14165;
          case (unsigned long)8: 
#line 77 
          ;
          
#line 78 
          ldv_inline_asm();
          
#line 77 
          goto ldv_14165;
          default: 
#line 77 
          ;
          
#line 77 
          __bad_percpu_size();
        }
        ldv_14165: 
#line 77 
        ;
        
#line 77 
        tmp_1 = pfo_ret___1;
      }
      
#line 77 
      pscr_ret__ = tmp_1;
      
#line 77 
      goto ldv_14152;
      case (unsigned long)8: 
#line 77 
      ;
      {
        int pfo_ret___2;
        
#line 77 
        switch (4UL) {
          case (unsigned long)1: 
#line 77 
          ;
          
#line 78 
          ldv_inline_asm();
          
#line 77 
          goto ldv_14174;
          case (unsigned long)2: 
#line 77 
          ;
          
#line 78 
          ldv_inline_asm();
          
#line 77 
          goto ldv_14174;
          case (unsigned long)4: 
#line 77 
          ;
          
#line 78 
          ldv_inline_asm();
          
#line 77 
          goto ldv_14174;
          case (unsigned long)8: 
#line 77 
          ;
          
#line 78 
          ldv_inline_asm();
          
#line 77 
          goto ldv_14174;
          default: 
#line 77 
          ;
          
#line 77 
          __bad_percpu_size();
        }
        ldv_14174: 
#line 77 
        ;
        
#line 77 
        tmp_2 = pfo_ret___2;
      }
      
#line 77 
      pscr_ret__ = tmp_2;
      
#line 77 
      goto ldv_14152;
      default: 
#line 77 
      ;
      
#line 77 
      __bad_size_call_parameter();
      
#line 77 
      goto ldv_14152;
    }
    ldv_14152: 
#line 77 
    ;
    
#line 77 
    tmp_3 = pscr_ret__;
  }
  
#line 77 
  return tmp_3;
}


#line 263  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/gfp.h"
__inline static int gfp_zonelist(gfp_t flags)
{
  int __retres;
  
#line 265 
  if ((long)((flags & 262144U) != 0U) != 0L) {
    
#line 266 
    __retres = 1;
    
#line 266 
    goto return_label;
  }
  else ;
  
#line 268 
  __retres = 0;
  return_label: 
#line 268 
                return __retres;
}


#line 280  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/gfp.h"
__inline static struct zonelist *node_zonelist(int nid, gfp_t flags)
{
  struct zonelist *__retres;
  int tmp;
  
#line 282 
  tmp = gfp_zonelist(flags);
  
#line 282 
  ;
  
#line 282 
  __retres = (struct zonelist *)(& (node_data[nid])->node_zonelists) + tmp;
  
#line 282 
  return __retres;
}


#line 293 
struct page *__alloc_pages_nodemask(gfp_t, unsigned int, struct zonelist *, nodemask_t *);


#line 297  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/gfp.h"
__inline static struct page *__alloc_pages(gfp_t gfp_mask, unsigned int order, struct zonelist *zonelist)
{
  struct page *tmp;
  
#line 300 
  tmp = __alloc_pages_nodemask(gfp_mask,order,zonelist,(nodemask_t *)0);
  
#line 300 
  return tmp;
}


#line 303  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/gfp.h"
__inline static struct page *alloc_pages_node(int nid, gfp_t gfp_mask, unsigned int order)
{
  struct page *tmp_0;
  struct zonelist *tmp;
  
#line 307 
  if (nid < 0) 
#line 308 
               nid = numa_node_id(); else ;
  
#line 310 
  tmp = node_zonelist(nid,gfp_mask);
  
#line 310 
  ;
  
#line 310 
  ;
  
#line 310 
  tmp_0 = __alloc_pages(gfp_mask,order,tmp);
  
#line 310 
  return tmp_0;
}


#line 366 
void __free_pages(struct page *, unsigned int);


#line 581  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/slab.h"
static void *kzalloc_6(size_t size, gfp_t flags);


#line 91  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/dma-mapping-common.h"
__inline static void dma_unmap_page(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir)
{
  int tmp_0;
  
#line 94 
  struct dma_map_ops *ops = get_dma_ops(dev);
  
#line 96 
  tmp_0 = valid_dma_direction((int)dir);
  
#line 96 
  if ((long)(tmp_0 == 0) != 0L) {
    
#line 98 
    ldv_inline_asm();
    
#line 96 
    ;
  }
  else ;
  
#line 97 
  if (ops->unmap_page != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *))0) 
    
#line 98 
    (*(ops->unmap_page))(dev,addr,size,dir,(struct dma_attrs *)0); else ;
  
#line 99 
  debug_dma_unmap_page(dev,addr,size,(int)dir,(_Bool)0);
  
#line 100 
  return;
}


#line 637  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/driver.h"
__inline static void *mlx5_vzalloc_3(unsigned long size)
{
  void *rtn;
  
#line 641 
  rtn = kzalloc_6(size,720U);
  
#line 642 
  if (rtn == (void *)0) 
#line 643 
                        rtn = vzalloc(size); else ;
  
#line 644 
  return rtn;
}


#line 708 
void mlx5_core_req_pages_handler(struct mlx5_core_dev *dev, u16 func_id, s32 npages);


#line 105  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/pagealloc.c"
static int insert_page(struct mlx5_core_dev *dev, u64 addr, struct page *page, u16 func_id)
{
  int __retres;
  struct fw_page *nfp;
  struct fw_page *tfp;
  int i;
  struct fw_page *tmp;
  
#line 107 
  struct rb_root *root = & dev->priv.page_root;
  
#line 108 
  struct rb_node **new = & root->rb_node;
  
#line 109 
  struct rb_node *parent = (struct rb_node *)0;
  
#line 114 
  goto ldv_35848;
  ldv_35847: 
#line 115 
  ;
  
#line 115 
  parent = *new;
  {
    
#line 116 
    struct rb_node const *__mptr = (struct rb_node const *)parent;
    
#line 116 
    tmp = (struct fw_page *)__mptr;
  }
  
#line 116 
  tfp = tmp;
  
#line 117 
  if (tfp->addr < addr) 
#line 118 
                        new = & parent->rb_left;
  else 
    
#line 119 
    if (tfp->addr > addr) 
#line 120 
                          new = & parent->rb_right;
    else {
      
#line 122 
      __retres = -17;
      
#line 122 
      goto return_label;
    }
  ldv_35848: 
#line 123 
  ;
  
#line 114 
  if (*new != (struct rb_node *)0) 
#line 116 
                                   goto ldv_35847; else 
#line 119 
                                                        goto ldv_35849;
  ldv_35849: 
#line 120 
  ;
  
#line 125 
  nfp = (struct fw_page *)kzalloc_6(80UL,208U);
  
#line 126 
  if (nfp == (struct fw_page *)0) {
    
#line 127 
    __retres = -12;
    
#line 127 
    goto return_label;
  }
  else ;
  
#line 129 
  nfp->addr = addr;
  
#line 130 
  nfp->page = page;
  
#line 131 
  nfp->func_id = func_id;
  
#line 132 
  nfp->free_count = 1U;
  
#line 133 
  i = 0;
  
#line 133 
  goto ldv_35851;
  ldv_35850: 
#line 134 
  ;
  
#line 134 
  set_bit((long)i,(unsigned long volatile *)(& nfp->bitmask));
  
#line 133 
  i += 1;
  ldv_35851: 
#line 134 
  ;
  
#line 133 
  if (i <= 0) 
#line 135 
              goto ldv_35850; else 
#line 138 
                                   goto ldv_35852;
  ldv_35852: 
#line 139 
  ;
  
#line 136 
  rb_link_node(& nfp->rb_node,parent,new);
  
#line 137 
  rb_insert_color(& nfp->rb_node,root);
  
#line 138 
  list_add(& nfp->list,& dev->priv.free_list);
  
#line 140 
  __retres = 0;
  return_label: 
#line 140 
                return __retres;
}


#line 143  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/pagealloc.c"
static struct fw_page *find_fw_page(struct mlx5_core_dev *dev, u64 addr)
{
  struct fw_page *tfp;
  struct fw_page *tmp_0;
  
#line 145 
  struct rb_root *root = & dev->priv.page_root;
  
#line 146 
  struct rb_node *tmp = root->rb_node;
  
#line 147 
  struct fw_page *result = (struct fw_page *)0;
  
#line 150 
  goto ldv_35865;
  ldv_35864: 
#line 151 
  ;
  {
    
#line 151 
    struct rb_node const *__mptr = (struct rb_node const *)tmp;
    
#line 151 
    tmp_0 = (struct fw_page *)__mptr;
  }
  
#line 151 
  tfp = tmp_0;
  
#line 152 
  if (tfp->addr < addr) 
#line 153 
                        tmp = tmp->rb_left;
  else 
    
#line 154 
    if (tfp->addr > addr) 
#line 155 
                          tmp = tmp->rb_right;
    else {
      
#line 157 
      result = tfp;
      
#line 158 
      goto ldv_35863;
    }
  ldv_35865: 
#line 160 
  ;
  
#line 150 
  if (tmp != (struct rb_node *)0) 
#line 152 
                                  goto ldv_35864; else 
#line 155 
                                                       goto ldv_35863;
  ldv_35863: 
#line 156 
  ;
  
#line 162 
  return result;
}


#line 165  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/pagealloc.c"
static int mlx5_cmd_query_pages(struct mlx5_core_dev *dev, u16 *func_id, s32 *npages, int boot)
{
  int __retres;
  struct mlx5_query_pages_inbox in;
  struct mlx5_query_pages_outbox out;
  int err;
  unsigned int tmp_1;
  
#line 172 
  memset((void *)(& in),0,16UL);
  
#line 173 
  memset((void *)(& out),0,16UL);
  
#line 174 
  in.hdr.opcode = (unsigned short)1793U;
  
#line 175 
  if (boot != 0) 
#line 175 
                 in.hdr.opmod = (unsigned short)256U; else 
#line 175 
                                                           in.hdr.opmod = (unsigned short)512U;
  
#line 177 
  err = mlx5_cmd_exec(dev,(void *)(& in),16,(void *)(& out),16);
  
#line 178 
  if (err != 0) {
    
#line 179 
    __retres = err;
    
#line 179 
    goto return_label;
  }
  else ;
  
#line 181 
  if ((unsigned int)out.hdr.status != 0U) {
    int tmp;
    
#line 182 
    tmp = mlx5_cmd_status_to_err(& out.hdr);
    
#line 182 
    __retres = tmp;
    
#line 182 
    goto return_label;
  }
  else ;
  
#line 184 
  if (0 != 0) 
#line 184 
              tmp_1 = (((out.num_pages << 24) | ((out.num_pages << 8) & 16711680U)) | ((out.num_pages >> 8) & 65280U)) | (out.num_pages >> 24); else 
                                                                    
#line 184 
                                                                    tmp_1 = __fswab32(out.num_pages);
  
#line 184 
  *npages = (int)tmp_1;
  
#line 185 
  if (0 != 0) 
#line 185 
              *func_id = (unsigned short)(((int)out.func_id << 8) | ((int)out.func_id >> 8)); else 
                                                                    
#line 185 
                                                                    *func_id = __fswab16((unsigned short)((int)out.func_id));
  
#line 187 
  __retres = err;
  return_label: 
#line 187 
                return __retres;
}


#line 190  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/pagealloc.c"
static int alloc_4k(struct mlx5_core_dev *dev, u64 *addr)
{
  int __retres;
  struct fw_page *fp;
  unsigned int n;
  int tmp;
  struct fw_page *tmp_0;
  unsigned long tmp_1;
  
#line 195 
  tmp = list_empty((struct list_head const *)(& dev->priv.free_list));
  
#line 195 
  if (tmp != 0) {
    
#line 196 
    __retres = -12;
    
#line 196 
    goto return_label;
  }
  else ;
  {
    
#line 198 
    struct list_head const *__mptr = (struct list_head const *)dev->priv.free_list.next;
    
#line 198 
    tmp_0 = (struct fw_page *)__mptr + 18446744073709551560U;
  }
  
#line 198 
  fp = tmp_0;
  
#line 199 
  tmp_1 = find_first_bit((unsigned long const *)(& fp->bitmask),64UL);
  
#line 199 
  n = (unsigned int)tmp_1;
  
#line 200 
  if (n != 0U) {
    struct task_struct *tmp_2;
    
#line 201 
    tmp_2 = get_current();
    
#line 201 
    ;
    
#line 201 
    printk("\001",(char *)(& dev->priv.name),"alloc_4k",201,tmp_2->pid);
    
#line 202 
    __retres = -2;
    
#line 202 
    goto return_label;
  }
  else ;
  
#line 204 
  set_bit((long)n,(unsigned long volatile *)(& fp->bitmask));
  
#line 205 
  fp->free_count -= 1U;
  
#line 206 
  if (fp->free_count == 0U) 
#line 207 
                            list_del(& fp->list); else ;
  
#line 209 
  *addr = fp->addr + (unsigned long long)(n * 4096U);
  
#line 211 
  __retres = 0;
  return_label: 
#line 211 
                return __retres;
}


#line 216  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/pagealloc.c"
static void free_4k(struct mlx5_core_dev *dev, u64 addr)
{
  struct fw_page *fwp;
  int n;
  
#line 221 
  fwp = find_fw_page(dev,addr & 18446744073709547520ULL);
  
#line 222 
  if (fwp == (struct fw_page *)0) {
    struct task_struct *tmp;
    
#line 223 
    tmp = get_current();
    
#line 223 
    ;
    
#line 223 
    printk("\001",(char *)(& dev->priv.name),"free_4k",223,tmp->pid);
    
#line 224 
    goto return_label;
  }
  else ;
  
#line 227 
  n = 0;
  
#line 228 
  fwp->free_count += 1U;
  
#line 229 
  set_bit((long)n,(unsigned long volatile *)(& fwp->bitmask));
  
#line 230 
  if (fwp->free_count == 1U) {
    
#line 231 
    rb_erase(& fwp->rb_node,& dev->priv.page_root);
    
#line 232 
    if (fwp->free_count != 1U) 
#line 233 
                               list_del(& fwp->list); else ;
    
#line 234 
    dma_unmap_page(& (dev->pdev)->dev,addr & 18446744073709547520ULL,4096UL,(enum dma_data_direction)DMA_BIDIRECTIONAL);
    
#line 236 
    __free_pages(fwp->page,0U);
    
#line 237 
    kfree((void const *)fwp);
  }
  else 
    
#line 238 
    if (fwp->free_count == 1U) 
#line 239 
                               list_add(& fwp->list,& dev->priv.free_list); else ;
  return_label: 
#line 240 
                return;
}


#line 243  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/pagealloc.c"
static int alloc_system_page(struct mlx5_core_dev *dev, u16 func_id)
{
  int __retres;
  struct page *page;
  u64 addr;
  int err;
  int tmp_2;
  
#line 248 
  int nid = dev_to_node(& (dev->pdev)->dev);
  
#line 250 
  page = alloc_pages_node(nid,131282U,0U);
  
#line 251 
  if (page == (struct page *)0) {
    struct task_struct *tmp_0;
    
#line 252 
    tmp_0 = get_current();
    
#line 252 
    ;
    
#line 252 
    printk("\001",(char *)(& dev->priv.name),"alloc_system_page",252,tmp_0->pid);
    
#line 253 
    __retres = -12;
    
#line 253 
    goto return_label;
  }
  else ;
  
#line 255 
  addr = dma_map_page(& (dev->pdev)->dev,page,0UL,4096UL,(enum dma_data_direction)DMA_BIDIRECTIONAL);
  
#line 257 
  tmp_2 = dma_mapping_error(& (dev->pdev)->dev,addr);
  
#line 257 
  if (tmp_2 != 0) {
    struct task_struct *tmp_1;
    
#line 258 
    tmp_1 = get_current();
    
#line 258 
    ;
    
#line 258 
    printk("\001",(char *)(& dev->priv.name),"alloc_system_page",258,tmp_1->pid);
    
#line 259 
    err = -12;
    
#line 260 
    goto out_alloc;
  }
  else ;
  
#line 262 
  err = insert_page(dev,addr,page,(unsigned short)((int)func_id));
  
#line 263 
  if (err != 0) {
    struct task_struct *tmp_3;
    
#line 264 
    tmp_3 = get_current();
    
#line 264 
    ;
    
#line 264 
    printk("\001",(char *)(& dev->priv.name),"alloc_system_page",264,tmp_3->pid);
    
#line 265 
    goto out_mapping;
  }
  else ;
  
#line 268 
  __retres = 0;
  
#line 268 
  goto return_label;
  out_mapping: 
#line 270 
  ;
  
#line 271 
  dma_unmap_page(& (dev->pdev)->dev,addr,4096UL,(enum dma_data_direction)DMA_BIDIRECTIONAL);
  out_alloc: 
#line 273 
  ;
  
#line 274 
  __free_pages(page,0U);
  
#line 276 
  __retres = err;
  return_label: 
#line 276 
                return __retres;
}


#line 278  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/pagealloc.c"
static int give_pages(struct mlx5_core_dev *dev, u16 func_id, int npages, int notify_fail)
{
  int __retres;
  struct mlx5_manage_pages_inbox *in;
  struct mlx5_manage_pages_outbox out;
  struct mlx5_manage_pages_inbox *nin;
  int inlen;
  u64 addr;
  int err;
  int i;
  unsigned long long tmp_12;
  
#line 289 
  inlen = (int)(((unsigned long)npages + 2UL) * (unsigned long)8U);
  
#line 290 
  in = (struct mlx5_manage_pages_inbox *)mlx5_vzalloc_3((unsigned long)inlen);
  
#line 291 
  if (in == (struct mlx5_manage_pages_inbox *)0) {
    struct task_struct *tmp_0;
    
#line 292 
    ;
    
#line 292 
    tmp_0 = get_current();
    
#line 292 
    ;
    
#line 292 
    printk("\001",(char *)(& dev->priv.name),"give_pages",292,tmp_0->pid,inlen);
    
#line 293 
    __retres = -12;
    
#line 293 
    goto return_label;
  }
  else ;
  
#line 295 
  memset((void *)(& out),0,16UL);
  
#line 297 
  i = 0;
  
#line 297 
  goto ldv_35919;
  ldv_35918: 
#line 298 
  ;
  retry: 
#line 298 
  ;
  
#line 299 
  err = alloc_4k(dev,& addr);
  
#line 300 
  if (err != 0) {
    
#line 301 
    if (err == -12) 
#line 302 
                    err = alloc_system_page(dev,(unsigned short)((int)func_id)); else ;
    
#line 303 
    if (err != 0) 
#line 304 
                  goto out_4k; else ;
    
#line 306 
    goto retry;
  }
  else ;
  
#line 308 
  if (0 != 0) 
#line 308 
              in->pas[i] = (((((((addr << 56) | ((addr << 40) & 71776119061217280ULL)) | ((addr << 24) & 280375465082880ULL)) | ((addr << 8) & 1095216660480ULL)) | ((addr >> 8) & 4278190080ULL)) | ((addr >> 24) & 16711680ULL)) | ((addr >> 40) & 65280ULL)) | (addr >> 56); else 
                                                                    
#line 308 
                                                                    in->pas[i] = __fswab64(addr);
  
#line 297 
  i += 1;
  ldv_35919: 
#line 298 
  ;
  
#line 297 
  if (i < npages) 
#line 299 
                  goto ldv_35918; else 
#line 302 
                                       goto ldv_35920;
  ldv_35920: 
#line 303 
  ;
  
#line 311 
  in->hdr.opcode = (unsigned short)2049U;
  
#line 312 
  in->hdr.opmod = (unsigned short)256U;
  
#line 313 
  if (0 != 0) 
#line 313 
              in->func_id = (unsigned short)(((int)func_id << 8) | ((int)func_id >> 8)); else 
                                                                    
#line 313 
                                                                    in->func_id = __fswab16((unsigned short)((int)func_id));
  
#line 314 
  if (0 != 0) 
#line 314 
              in->num_entries = ((((unsigned int)npages << 24) | (((unsigned int)npages << 8) & 16711680U)) | (((unsigned int)npages >> 8) & 65280U)) | ((unsigned int)npages >> 24); else 
                                                                    
#line 314 
                                                                    in->num_entries = __fswab32((unsigned int)npages);
  
#line 315 
  err = mlx5_cmd_exec(dev,(void *)in,inlen,(void *)(& out),16);
  
#line 316 
  if (err != 0) {
    struct task_struct *tmp_4;
    
#line 317 
    ;
    
#line 317 
    ;
    
#line 317 
    ;
    
#line 317 
    tmp_4 = get_current();
    
#line 317 
    ;
    
#line 317 
    printk("\001",(char *)(& dev->priv.name),"give_pages",318,tmp_4->pid,(int)func_id,npages,err);
    
#line 319 
    goto out_alloc;
  }
  else ;
  
#line 321 
  dev->priv.fw_pages += npages;
  
#line 323 
  if ((unsigned int)out.hdr.status != 0U) {
    
#line 324 
    err = mlx5_cmd_status_to_err(& out.hdr);
    
#line 325 
    if (err != 0) {
      struct task_struct *tmp_5;
      
#line 326 
      ;
      
#line 326 
      ;
      
#line 326 
      ;
      
#line 326 
      tmp_5 = get_current();
      
#line 326 
      ;
      
#line 326 
      printk("\001",(char *)(& dev->priv.name),"give_pages",327,tmp_5->pid,(int)func_id,npages,(int)out.hdr.status);
      
#line 328 
      goto out_alloc;
    }
    else ;
  }
  else ;
  {
    
#line 332 
    struct _ddebug descriptor = {.modname = "mlx5_core", .function = "give_pages", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/pagealloc.c", .format = "%s:%s:%d:(pid %d): ", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))332U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 332 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
      struct task_struct *tmp_6;
      
#line 332 
      ;
      
#line 332 
      tmp_6 = get_current();
      
#line 332 
      ;
      
#line 332 
      __dynamic_pr_debug(& descriptor,"%s:%s:%d:(pid %d): ",(char *)(& dev->priv.name),"give_pages",332,tmp_6->pid,err);
    }
    else ;
  }
  
#line 334 
  goto out_free;
  out_alloc: 
#line 336 
  ;
  
#line 337 
  if (notify_fail != 0) {
    int tmp_10;
    
#line 338 
    nin = (struct mlx5_manage_pages_inbox *)kzalloc_6(16UL,208U);
    
#line 339 
    if (nin == (struct mlx5_manage_pages_inbox *)0) {
      struct task_struct *tmp_8;
      
#line 340 
      tmp_8 = get_current();
      
#line 340 
      ;
      
#line 340 
      printk("\001",(char *)(& dev->priv.name),"give_pages",340,tmp_8->pid);
      
#line 341 
      goto out_4k;
    }
    else ;
    
#line 343 
    memset((void *)(& out),0,16UL);
    
#line 344 
    nin->hdr.opcode = (unsigned short)2049U;
    
#line 345 
    nin->hdr.opmod = (unsigned short)0U;
    
#line 346 
    tmp_10 = mlx5_cmd_exec(dev,(void *)nin,16,(void *)(& out),16);
    
#line 346 
    if (tmp_10 != 0) {
      struct task_struct *tmp_9;
      
#line 347 
      tmp_9 = get_current();
      
#line 347 
      ;
      
#line 347 
      printk("\001",(char *)(& dev->priv.name),"give_pages",347,tmp_9->pid);
    }
    else ;
    
#line 348 
    kfree((void const *)nin);
  }
  else ;
  out_4k: 
#line 351 
  ;
  
#line 352 
  i -= 1;
  
#line 352 
  goto ldv_35925;
  ldv_35924: 
#line 353 
  ;
  
#line 353 
  if (0 != 0) 
#line 353 
              tmp_12 = (((((((in->pas[i] << 56) | ((in->pas[i] << 40) & 71776119061217280ULL)) | ((in->pas[i] << 24) & 280375465082880ULL)) | ((in->pas[i] << 8) & 1095216660480ULL)) | ((in->pas[i] >> 8) & 4278190080ULL)) | ((in->pas[i] >> 24) & 16711680ULL)) | ((in->pas[i] >> 40) & 65280ULL)) | (in->pas[i] >> 56); else 
                                                                    
#line 353 
                                                                    tmp_12 = __fswab64(in->pas[i]);
  
#line 353 
  ;
  
#line 353 
  free_4k(dev,tmp_12);
  
#line 352 
  i -= 1;
  ldv_35925: 
#line 353 
  ;
  
#line 352 
  if (i >= 0) 
#line 354 
              goto ldv_35924; else 
#line 357 
                                   goto ldv_35926;
  ldv_35926: 
#line 358 
  ;
  out_free: 
#line 354 
  ;
  
#line 355 
  kvfree((void const *)in);
  
#line 356 
  __retres = err;
  return_label: 
#line 356 
                return __retres;
}


#line 359  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/pagealloc.c"
static int reclaim_pages(struct mlx5_core_dev *dev, u32 func_id, int npages, int *nclaimed)
{
  int __retres;
  struct mlx5_manage_pages_inbox in;
  struct mlx5_manage_pages_outbox *out;
  int num_claimed;
  int outlen;
  u64 addr;
  int err;
  int i;
  unsigned int tmp_5;
  
#line 370 
  if (nclaimed != (int *)0) 
#line 371 
                            *nclaimed = 0; else ;
  
#line 373 
  memset((void *)(& in),0,16UL);
  
#line 374 
  outlen = (int)(((unsigned long)npages + 2UL) * (unsigned long)8U);
  
#line 375 
  out = (struct mlx5_manage_pages_outbox *)mlx5_vzalloc_3((unsigned long)outlen);
  
#line 376 
  if (out == (struct mlx5_manage_pages_outbox *)0) {
    
#line 377 
    __retres = -12;
    
#line 377 
    goto return_label;
  }
  else ;
  
#line 379 
  in.hdr.opcode = (unsigned short)2049U;
  
#line 380 
  in.hdr.opmod = (unsigned short)512U;
  
#line 381 
  if (0 != 0) 
#line 381 
              in.func_id = (unsigned short)(((int)((unsigned short)func_id) << 8) | ((int)((unsigned short)func_id) >> 8)); else 
                                                                    
#line 381 
                                                                    in.func_id = __fswab16((unsigned short)((int)((unsigned short)func_id)));
  
#line 382 
  if (0 != 0) 
#line 382 
              in.num_entries = ((((unsigned int)npages << 24) | (((unsigned int)npages << 8) & 16711680U)) | (((unsigned int)npages >> 8) & 65280U)) | ((unsigned int)npages >> 24); else 
                                                                    
#line 382 
                                                                    in.num_entries = __fswab32((unsigned int)npages);
  {
    
#line 383 
    struct _ddebug descriptor = {.modname = "mlx5_core", .function = "reclaim_pages", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/pagealloc.c", .format = "%s:%s:%d:(pid %d): ", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))383U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 383 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
      struct task_struct *tmp_2;
      
#line 383 
      ;
      
#line 383 
      ;
      
#line 383 
      tmp_2 = get_current();
      
#line 383 
      ;
      
#line 383 
      __dynamic_pr_debug(& descriptor,"%s:%s:%d:(pid %d): ",(char *)(& dev->priv.name),"reclaim_pages",383,tmp_2->pid,npages,outlen);
    }
    else ;
  }
  
#line 384 
  err = mlx5_cmd_exec(dev,(void *)(& in),16,(void *)out,outlen);
  
#line 385 
  if (err != 0) {
    struct task_struct *tmp_3;
    
#line 386 
    tmp_3 = get_current();
    
#line 386 
    ;
    
#line 386 
    printk("\001",(char *)(& dev->priv.name),"reclaim_pages",386,tmp_3->pid);
    
#line 387 
    goto out_free;
  }
  else ;
  
#line 389 
  dev->priv.fw_pages -= npages;
  
#line 391 
  if ((unsigned int)out->hdr.status != 0U) {
    
#line 392 
    err = mlx5_cmd_status_to_err(& out->hdr);
    
#line 393 
    goto out_free;
  }
  else ;
  
#line 396 
  if (0 != 0) 
#line 396 
              tmp_5 = (((out->num_entries << 24) | ((out->num_entries << 8) & 16711680U)) | ((out->num_entries >> 8) & 65280U)) | (out->num_entries >> 24); else 
                                                                    
#line 396 
                                                                    tmp_5 = __fswab32(out->num_entries);
  
#line 396 
  num_claimed = (int)tmp_5;
  
#line 397 
  if (nclaimed != (int *)0) 
#line 398 
                            *nclaimed = num_claimed; else ;
  
#line 400 
  i = 0;
  
#line 400 
  goto ldv_35944;
  ldv_35943: 
#line 401 
  ;
  
#line 401 
  if (0 != 0) 
#line 401 
              addr = (((((((out->pas[i] << 56) | ((out->pas[i] << 40) & 71776119061217280ULL)) | ((out->pas[i] << 24) & 280375465082880ULL)) | ((out->pas[i] << 8) & 1095216660480ULL)) | ((out->pas[i] >> 8) & 4278190080ULL)) | ((out->pas[i] >> 24) & 16711680ULL)) | ((out->pas[i] >> 40) & 65280ULL)) | (out->pas[i] >> 56); else 
                                                                    
#line 401 
                                                                    addr = __fswab64(out->pas[i]);
  
#line 402 
  free_4k(dev,addr);
  
#line 400 
  i += 1;
  ldv_35944: 
#line 401 
  ;
  
#line 400 
  if (i < num_claimed) 
#line 402 
                       goto ldv_35943; else 
#line 405 
                                            goto ldv_35945;
  ldv_35945: 
#line 406 
  ;
  out_free: 
#line 405 
  ;
  
#line 406 
  kvfree((void const *)out);
  
#line 407 
  __retres = err;
  return_label: 
#line 407 
                return __retres;
}


#line 410  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/pagealloc.c"
static void pages_work_handler(struct work_struct *work)
{
  struct mlx5_pages_req *tmp;
  {
    
#line 412 
    struct work_struct const *__mptr = (struct work_struct const *)work;
    
#line 412 
    tmp = (struct mlx5_pages_req *)__mptr + 18446744073709551600U;
  }
  
#line 412 
  struct mlx5_pages_req *req = tmp;
  
#line 413 
  struct mlx5_core_dev *dev = req->dev;
  
#line 414 
  int err = 0;
  
#line 416 
  if (req->npages < 0) 
#line 417 
                       err = reclaim_pages(dev,(unsigned int)req->func_id,- req->npages,(int *)0);
  else 
    
#line 418 
    if (req->npages > 0) 
#line 419 
                         err = give_pages(dev,(unsigned short)((int)req->func_id),req->npages,1); else ;
  
#line 421 
  if (err != 0) {
    char *tmp_0;
    struct task_struct *tmp_1;
    
#line 422 
    ;
    
#line 422 
    if (req->npages < 0) 
#line 422 
                         tmp_0 = (char *)"reclaim"; else 
#line 422 
                                                         tmp_0 = (char *)"give";
    
#line 422 
    tmp_1 = get_current();
    
#line 422 
    ;
    
#line 422 
    printk("\001",(char *)(& dev->priv.name),"pages_work_handler",423,tmp_1->pid,tmp_0,err);
  }
  else ;
  
#line 425 
  kfree((void const *)req);
  
#line 426 
  return;
}


#line 428  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/pagealloc.c"
void mlx5_core_req_pages_handler(struct mlx5_core_dev *dev, u16 func_id, s32 npages)
{
  struct mlx5_pages_req *req;
  
#line 433 
  req = (struct mlx5_pages_req *)kzalloc_6(96UL,32U);
  
#line 434 
  if (req == (struct mlx5_pages_req *)0) {
    struct task_struct *tmp_0;
    
#line 435 
    tmp_0 = get_current();
    
#line 435 
    ;
    
#line 435 
    printk("\001",(char *)(& dev->priv.name),"mlx5_core_req_pages_handler",435,tmp_0->pid);
    
#line 436 
    goto return_label;
  }
  else ;
  
#line 439 
  req->dev = dev;
  
#line 440 
  req->func_id = func_id;
  
#line 441 
  req->npages = npages;
  {
    struct lock_class_key __key;
    
#line 442 
    __init_work(& req->work,0);
    
#line 442 
    atomic_long_t __constr_expr_27 = {.counter = WORK_STRUCT_NO_POOL_2};
    
#line 442 
    req->work.data = __constr_expr_27;
    
#line 442 
    lockdep_init_map(& req->work.lockdep_map,"(&req->work)",& __key,0);
    
#line 442 
    INIT_LIST_HEAD(& req->work.entry);
    
#line 442 
    req->work.func = & pages_work_handler;
  }
  
#line 443 
  ldv_queue_work_51(dev->priv.pg_wq,& req->work);
  return_label: 
#line 444 
                return;
}


#line 446  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/pagealloc.c"
int mlx5_satisfy_startup_pages(struct mlx5_core_dev *dev, int boot)
{
  int __retres;
  int err;
  int tmp_1;
  
#line 448 
  u16 func_id = func_id;
  
#line 449 
  s32 npages = npages;
  
#line 452 
  err = mlx5_cmd_query_pages(dev,& func_id,& npages,boot);
  
#line 453 
  if (err != 0) {
    
#line 454 
    __retres = err;
    
#line 454 
    goto return_label;
  }
  else ;
  {
    
#line 456 
    struct _ddebug descriptor = {.modname = "mlx5_core", .function = "mlx5_satisfy_startup_pages", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/pagealloc.c", .format = "%s:%s:%d:(pid %d): ", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))457U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 456 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
      char *tmp;
      struct task_struct *tmp_0;
      
#line 456 
      ;
      
#line 456 
      if (boot != 0) 
#line 456 
                     tmp = (char *)"boot"; else 
#line 456 
                                                tmp = (char *)"init";
      
#line 456 
      ;
      
#line 456 
      tmp_0 = get_current();
      
#line 456 
      ;
      
#line 456 
      __dynamic_pr_debug(& descriptor,"%s:%s:%d:(pid %d): ",(char *)(& dev->priv.name),"mlx5_satisfy_startup_pages",457,tmp_0->pid,npages,tmp,(int)func_id);
    }
    else ;
  }
  
#line 459 
  tmp_1 = give_pages(dev,(unsigned short)((int)func_id),npages,0);
  
#line 459 
  __retres = tmp_1;
  return_label: 
#line 459 
                return __retres;
}


#line 466  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/pagealloc.c"
static int optimal_reclaimed_pages(void)
{
  struct mlx5_cmd_prot_block *block;
  struct mlx5_cmd_layout *lay;
  int ret;
  
#line 472 
  ret = 768;
  
#line 476 
  return ret;
}


#line 479  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/pagealloc.c"
int mlx5_reclaim_startup_pages(struct mlx5_core_dev *dev)
{
  int __retres;
  unsigned long tmp;
  struct fw_page *fwp;
  struct rb_node *p;
  int err;
  int tmp_5;
  
#line 481 
  tmp = msecs_to_jiffies(5000U);
  
#line 481 
  unsigned long end = tmp + jiffies;
  
#line 484 
  int nclaimed = 0;
  ldv_35999: 
#line 486 
  ;
  
#line 488 
  p = rb_first((struct rb_root const *)(& dev->priv.page_root));
  
#line 489 
  if (p != (struct rb_node *)0) {
    struct fw_page *tmp_0;
    int tmp_1;
    {
      
#line 490 
      struct rb_node const *__mptr = (struct rb_node const *)p;
      
#line 490 
      tmp_0 = (struct fw_page *)__mptr;
    }
    
#line 490 
    fwp = tmp_0;
    
#line 491 
    tmp_1 = optimal_reclaimed_pages();
    
#line 491 
    ;
    
#line 491 
    ;
    
#line 491 
    err = reclaim_pages(dev,(unsigned int)fwp->func_id,tmp_1,& nclaimed);
    
#line 494 
    if (err != 0) {
      struct task_struct *tmp_2;
      
#line 495 
      ;
      
#line 495 
      tmp_2 = get_current();
      
#line 495 
      ;
      
#line 495 
      printk("\001",(char *)(& dev->priv.name),"mlx5_reclaim_startup_pages",496,tmp_2->pid,err);
      
#line 497 
      __retres = err;
      
#line 497 
      goto return_label;
    }
    else ;
    
#line 499 
    if (nclaimed != 0) {
      unsigned long tmp_3;
      
#line 500 
      tmp_3 = msecs_to_jiffies(5000U);
      
#line 500 
      end = tmp_3 + jiffies;
    }
    else ;
  }
  else ;
  {
    unsigned long __dummy;
    unsigned long volatile __dummy2;
    
#line 502 
    tmp_5 = 1;
  }
  
#line 502 
  if (tmp_5 != 0) {
    int tmp_6;
    {
      unsigned long __dummy_0;
      unsigned long __dummy2_0;
      
#line 502 
      tmp_6 = 1;
    }
    
#line 502 
    if (tmp_6 != 0) {
      
#line 502 
      if ((long)(end - jiffies) < 0L) {
        struct task_struct *tmp_4;
        
#line 503 
        tmp_4 = get_current();
        
#line 503 
        ;
        
#line 503 
        printk("\001",(char *)(& dev->priv.name),"mlx5_reclaim_startup_pages",503,tmp_4->pid);
        
#line 504 
        goto ldv_35998;
      }
      else ;
    }
    else ;
  }
  else ;
  
#line 506 
  if (p != (struct rb_node *)0) 
#line 508 
                                goto ldv_35999; else 
#line 511 
                                                     goto ldv_35998;
  ldv_35998: 
#line 512 
  ;
  
#line 508 
  __retres = 0;
  return_label: 
#line 508 
                return __retres;
}


#line 511  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/pagealloc.c"
void mlx5_pagealloc_init(struct mlx5_core_dev *dev)
{
  
#line 513 
  struct rb_root __constr_expr_28 = {.rb_node = (struct rb_node *)0};
  
#line 513 
  dev->priv.page_root = __constr_expr_28;
  
#line 514 
  INIT_LIST_HEAD(& dev->priv.free_list);
  
#line 515 
  return;
}


#line 517  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/pagealloc.c"
void mlx5_pagealloc_cleanup(struct mlx5_core_dev *dev)
{
  
#line 519 
  return;
}


#line 522  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/pagealloc.c"
int mlx5_pagealloc_start(struct mlx5_core_dev *dev)
{
  int __retres;
  struct workqueue_struct *tmp_0;
  {
    struct lock_class_key __key;
    char const *__lock_name;
    
#line 524 
    __lock_name = "\"%s\"";
    
#line 524 
    tmp_0 = __alloc_workqueue_key("%s",131082U,1,& __key,__lock_name,(char *)"mlx5_page_allocator");
  }
  
#line 524 
  dev->priv.pg_wq = tmp_0;
  
#line 525 
  if (dev->priv.pg_wq == (struct workqueue_struct *)0) {
    
#line 526 
    __retres = -12;
    
#line 526 
    goto return_label;
  }
  else ;
  
#line 528 
  __retres = 0;
  return_label: 
#line 528 
                return __retres;
}


#line 531  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/pagealloc.c"
void mlx5_pagealloc_stop(struct mlx5_core_dev *dev)
{
  
#line 533 
  destroy_workqueue(dev->priv.pg_wq);
  
#line 534 
  return;
}


#line 497  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_pagealloc.c.aux"
static void *kzalloc_6(size_t size, gfp_t flags)
{
  void *tmp;
  
#line 500 
  tmp = ldv_kzalloc(size,flags);
  
#line 500 
  return tmp;
}


#line 514  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_pagealloc.c.aux"
static bool ldv_queue_work_51(struct workqueue_struct *wq, struct work_struct *work)
{
  bool __retres;
  bool tmp;
  
#line 518 
  tmp = ldv_emg_queue_work(wq,work);
  
#line 518 
  __retres = tmp != 0;
  
#line 518 
  return __retres;
}


#line 70  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/io.h"
__inline static void __writel(unsigned int val, void volatile *addr)
{
  
#line 72 
  ldv_inline_asm();
  
#line 73 
  return;
}


#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/hardirq.h"
void synchronize_irq(unsigned int);


#line 141  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/interrupt.h"
static int ldv_request_irq_51(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev);


#line 153 
static void ldv_free_irq_52(unsigned int ldv_func_arg1, void *ldv_func_arg2);


#line 157 
static void ldv_free_irq_53(unsigned int ldv_func_arg1, void *ldv_func_arg2);


#line 581  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/slab.h"
static void *kzalloc_7(size_t size, gfp_t flags);


#line 1484  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
__inline static char const *pci_name(struct pci_dev const *pdev)
{
  char const *tmp;
  
#line 1486 
  tmp = dev_name(& pdev->dev);
  
#line 1486 
  return tmp;
}


#line 592  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/driver.h"
__inline static void *mlx5_buf_offset(struct mlx5_buf *buf, int offset)
{
  void *__retres;
  
#line 594 
  __retres = buf->direct.buf + offset;
  
#line 594 
  return __retres;
}


#line 637  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/driver.h"
__inline static void *mlx5_vzalloc_4(unsigned long size)
{
  void *rtn;
  
#line 641 
  rtn = kzalloc_7(size,720U);
  
#line 642 
  if (rtn == (void *)0) 
#line 643 
                        rtn = vzalloc(size); else ;
  
#line 644 
  return rtn;
}


#line 675 
int mlx5_buf_alloc(struct mlx5_core_dev *dev, int size, struct mlx5_buf *buf);


#line 676 
void mlx5_buf_free(struct mlx5_core_dev *dev, struct mlx5_buf *buf);


#line 717 
void mlx5_cq_completion(struct mlx5_core_dev *dev, u32 cqn);


#line 725 
void mlx5_cq_event(struct mlx5_core_dev *dev, u32 cqn, int event_type);


#line 84  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/eq.c"
static int mlx5_cmd_destroy_eq(struct mlx5_core_dev *dev, u8 eqn)
{
  struct mlx5_destroy_eq_mbox_in in;
  struct mlx5_destroy_eq_mbox_out out;
  int err;
  
#line 90 
  memset((void *)(& in),0,16UL);
  
#line 91 
  memset((void *)(& out),0,16UL);
  
#line 92 
  in.hdr.opcode = (unsigned short)515U;
  
#line 93 
  in.eqn = eqn;
  
#line 94 
  err = mlx5_cmd_exec(dev,(void *)(& in),16,(void *)(& out),16);
  
#line 95 
  if (err == 0) 
#line 96 
                goto ex; else ;
  
#line 98 
  if ((unsigned int)out.hdr.status != 0U) 
#line 99 
                                          err = mlx5_cmd_status_to_err(& out.hdr); else ;
  ex: 
#line 101 
  ;
  
#line 102 
  return err;
}


#line 105  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/eq.c"
static struct mlx5_eqe *get_eqe(struct mlx5_eq *eq, u32 entry)
{
  struct mlx5_eqe *tmp;
  
#line 107 
  tmp = (struct mlx5_eqe *)mlx5_buf_offset(& eq->buf,(int)(entry * 64U));
  
#line 107 
  return tmp;
}


#line 110  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/eq.c"
static struct mlx5_eqe *next_eqe_sw(struct mlx5_eq *eq)
{
  struct mlx5_eqe *tmp_0;
  
#line 112 
  struct mlx5_eqe *eqe = get_eqe(eq,eq->cons_index & (unsigned int)(eq->nent + -1));
  
#line 114 
  if ((int)((_Bool)(eqe->owner != 0)) ^ ((eq->cons_index & (unsigned int)eq->nent) != 0U)) 
    
#line 114 
    tmp_0 = (struct mlx5_eqe *)0; else 
#line 114 
                                       tmp_0 = eqe;
  
#line 114 
  return tmp_0;
}


#line 117  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/eq.c"
static char const *eqe_type_str(u8 type)
{
  char const *__retres;
  
#line 119 
  switch ((int)type) {
    case 0: 
#line 120 
    ;
    
#line 121 
    __retres = "MLX5_EVENT_TYPE_COMP";
    
#line 121 
    goto return_label;
    case 1: 
#line 122 
    ;
    
#line 123 
    __retres = "MLX5_EVENT_TYPE_PATH_MIG";
    
#line 123 
    goto return_label;
    case 2: 
#line 124 
    ;
    
#line 125 
    __retres = "MLX5_EVENT_TYPE_COMM_EST";
    
#line 125 
    goto return_label;
    case 3: 
#line 126 
    ;
    
#line 127 
    __retres = "MLX5_EVENT_TYPE_SQ_DRAINED";
    
#line 127 
    goto return_label;
    case 19: 
#line 128 
    ;
    
#line 129 
    __retres = "MLX5_EVENT_TYPE_SRQ_LAST_WQE";
    
#line 129 
    goto return_label;
    case 20: 
#line 130 
    ;
    
#line 131 
    __retres = "MLX5_EVENT_TYPE_SRQ_RQ_LIMIT";
    
#line 131 
    goto return_label;
    case 4: 
#line 132 
    ;
    
#line 133 
    __retres = "MLX5_EVENT_TYPE_CQ_ERROR";
    
#line 133 
    goto return_label;
    case 5: 
#line 134 
    ;
    
#line 135 
    __retres = "MLX5_EVENT_TYPE_WQ_CATAS_ERROR";
    
#line 135 
    goto return_label;
    case 7: 
#line 136 
    ;
    
#line 137 
    __retres = "MLX5_EVENT_TYPE_PATH_MIG_FAILED";
    
#line 137 
    goto return_label;
    case 16: 
#line 138 
    ;
    
#line 139 
    __retres = "MLX5_EVENT_TYPE_WQ_INVAL_REQ_ERROR";
    
#line 139 
    goto return_label;
    case 17: 
#line 140 
    ;
    
#line 141 
    __retres = "MLX5_EVENT_TYPE_WQ_ACCESS_ERROR";
    
#line 141 
    goto return_label;
    case 18: 
#line 142 
    ;
    
#line 143 
    __retres = "MLX5_EVENT_TYPE_SRQ_CATAS_ERROR";
    
#line 143 
    goto return_label;
    case 8: 
#line 144 
    ;
    
#line 145 
    __retres = "MLX5_EVENT_TYPE_INTERNAL_ERROR";
    
#line 145 
    goto return_label;
    case 9: 
#line 146 
    ;
    
#line 147 
    __retres = "MLX5_EVENT_TYPE_PORT_CHANGE";
    
#line 147 
    goto return_label;
    case 21: 
#line 148 
    ;
    
#line 149 
    __retres = "MLX5_EVENT_TYPE_GPIO_EVENT";
    
#line 149 
    goto return_label;
    case 25: 
#line 150 
    ;
    
#line 151 
    __retres = "MLX5_EVENT_TYPE_REMOTE_CONFIG";
    
#line 151 
    goto return_label;
    case 26: 
#line 152 
    ;
    
#line 153 
    __retres = "MLX5_EVENT_TYPE_DB_BF_CONGESTION";
    
#line 153 
    goto return_label;
    case 27: 
#line 154 
    ;
    
#line 155 
    __retres = "MLX5_EVENT_TYPE_STALL_EVENT";
    
#line 155 
    goto return_label;
    case 10: 
#line 156 
    ;
    
#line 157 
    __retres = "MLX5_EVENT_TYPE_CMD";
    
#line 157 
    goto return_label;
    case 11: 
#line 158 
    ;
    
#line 159 
    __retres = "MLX5_EVENT_TYPE_PAGE_REQUEST";
    
#line 159 
    goto return_label;
    case 12: 
#line 160 
    ;
    
#line 161 
    __retres = "MLX5_EVENT_TYPE_PAGE_FAULT";
    
#line 161 
    goto return_label;
    default: 
#line 162 
    ;
    
#line 163 
    __retres = "Unrecognized event";
    
#line 163 
    goto return_label;
  }
  return_label: 
#line 119 
                return __retres;
}


#line 167  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/eq.c"
static enum mlx5_dev_event port_subtype_event(u8 subtype)
{
  enum mlx5_dev_event __retres;
  
#line 169 
  switch ((int)subtype) {
    case 1: 
#line 170 
    ;
    
#line 171 
    __retres = MLX5_DEV_EVENT_PORT_DOWN;
    
#line 171 
    goto return_label;
    case 4: 
#line 172 
    ;
    
#line 173 
    __retres = MLX5_DEV_EVENT_PORT_UP;
    
#line 173 
    goto return_label;
    case 5: 
#line 174 
    ;
    
#line 175 
    __retres = MLX5_DEV_EVENT_PORT_INITIALIZED;
    
#line 175 
    goto return_label;
    case 6: 
#line 176 
    ;
    
#line 177 
    __retres = MLX5_DEV_EVENT_LID_CHANGE;
    
#line 177 
    goto return_label;
    case 7: 
#line 178 
    ;
    
#line 179 
    __retres = MLX5_DEV_EVENT_PKEY_CHANGE;
    
#line 179 
    goto return_label;
    case 8: 
#line 180 
    ;
    
#line 181 
    __retres = MLX5_DEV_EVENT_GUID_CHANGE;
    
#line 181 
    goto return_label;
    case 9: 
#line 182 
    ;
    
#line 183 
    __retres = MLX5_DEV_EVENT_CLIENT_REREG;
    
#line 183 
    goto return_label;
  }
  
#line 185 
  __retres = 4294967295;
  return_label: 
#line 185 
                return __retres;
}


#line 188  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/eq.c"
static void eq_update_ci(struct mlx5_eq *eq, int arm)
{
  int tmp;
  unsigned int tmp_1;
  
#line 190 
  if (arm != 0) 
#line 190 
                tmp = 0; else 
#line 190 
                              tmp = 2;
  
#line 190 
  __be32 *addr = eq->doorbell + tmp;
  
#line 191 
  u32 val = (eq->cons_index & 16777215U) | (unsigned int)((int)eq->eqn << 24);
  
#line 192 
  ;
  
#line 192 
  if (0 != 0) 
#line 192 
              tmp_1 = (((val << 24) | ((val << 8) & 16711680U)) | ((val >> 8) & 65280U)) | (val >> 24); else 
                                                                    
#line 192 
                                                                    tmp_1 = __fswab32(val);
  
#line 192 
  __writel(tmp_1,(void volatile *)addr);
  
#line 193 
  ldv_inline_asm();
  
#line 194 
  return;
}


#line 197  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/eq.c"
static int mlx5_eq_int(struct mlx5_core_dev *dev, struct mlx5_eq *eq)
{
  struct mlx5_eqe *eqe;
  u32 cqn;
  u32 rsn;
  u8 port;
  
#line 200 
  int eqes_found = 0;
  
#line 201 
  int set_ci = 0;
  
#line 206 
  goto ldv_37408;
  ldv_37407: 
#line 207 
  ;
  
#line 208 
  ldv_inline_asm();
  {
    
#line 213 
    struct _ddebug descriptor = {.modname = "mlx5_core", .function = "mlx5_eq_int", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/eq.c", .format = "%s:%s:%d:(pid %d): ", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))214U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 213 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
      char const *tmp;
      struct task_struct *tmp_0;
      
#line 213 
      tmp = eqe_type_str((unsigned char)((int)eqe->type));
      
#line 213 
      ;
      
#line 213 
      tmp_0 = get_current();
      
#line 213 
      ;
      
#line 213 
      __dynamic_pr_debug(& descriptor,"%s:%s:%d:(pid %d): ",(char *)(& (eq->dev)->priv.name),"mlx5_eq_int",214,tmp_0->pid,(int)eq->eqn,tmp);
    }
    else ;
  }
  
#line 215 
  switch ((int)eqe->type) {
    unsigned int tmp_9;
    struct task_struct *tmp_13;
    struct task_struct *tmp_19;
    case 0: 
#line 216 
    ;
    
#line 217 
    if (0 != 0) 
#line 217 
                cqn = ((((eqe->data.comp.cqn << 24) | ((eqe->data.comp.cqn << 8) & 16711680U)) | ((eqe->data.comp.cqn >> 8) & 65280U)) | (eqe->data.comp.cqn >> 24)) & 16777215U;
    else {
      __u32 tmp_1;
      
#line 217 
      tmp_1 = __fswab32(eqe->data.comp.cqn);
      
#line 217 
      cqn = tmp_1 & 16777215U;
    }
    
#line 218 
    mlx5_cq_completion(dev,cqn);
    
#line 219 
    goto ldv_37376;
    case 1: 
#line 221 
    ;
    case 2: 
#line 222 
    ;
    case 3: 
#line 223 
    ;
    case 19: 
#line 224 
    ;
    case 5: 
#line 225 
    ;
    case 7: 
#line 226 
    ;
    case 16: 
#line 227 
    ;
    case 17: 
#line 228 
    ;
    
#line 229 
    if (0 != 0) 
#line 229 
                rsn = ((((eqe->data.qp_srq.qp_srq_n << 24) | ((eqe->data.qp_srq.qp_srq_n << 8) & 16711680U)) | ((eqe->data.qp_srq.qp_srq_n >> 8) & 65280U)) | (eqe->data.qp_srq.qp_srq_n >> 24)) & 16777215U;
    else {
      __u32 tmp_2;
      
#line 229 
      tmp_2 = __fswab32(eqe->data.qp_srq.qp_srq_n);
      
#line 229 
      rsn = tmp_2 & 16777215U;
    }
    {
      
#line 230 
      struct _ddebug descriptor_0 = {.modname = "mlx5_core", .function = "mlx5_eq_int", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/eq.c", .format = "%s:%s:%d:(pid %d): ", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))231U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 230 
      if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) {
        char const *tmp_3;
        struct task_struct *tmp_4;
        
#line 230 
        ;
        
#line 230 
        ;
        
#line 230 
        tmp_3 = eqe_type_str((unsigned char)((int)eqe->type));
        
#line 230 
        tmp_4 = get_current();
        
#line 230 
        ;
        
#line 230 
        __dynamic_pr_debug(& descriptor_0,"%s:%s:%d:(pid %d): ",(char *)(& dev->priv.name),"mlx5_eq_int",231,tmp_4->pid,tmp_3,(int)eqe->type,rsn);
      }
      else ;
    }
    
#line 232 
    mlx5_rsc_event(dev,rsn,(int)eqe->type);
    
#line 233 
    goto ldv_37376;
    case 20: 
#line 235 
    ;
    case 18: 
#line 236 
    ;
    
#line 237 
    if (0 != 0) 
#line 237 
                rsn = ((((eqe->data.qp_srq.qp_srq_n << 24) | ((eqe->data.qp_srq.qp_srq_n << 8) & 16711680U)) | ((eqe->data.qp_srq.qp_srq_n >> 8) & 65280U)) | (eqe->data.qp_srq.qp_srq_n >> 24)) & 16777215U;
    else {
      __u32 tmp_5;
      
#line 237 
      tmp_5 = __fswab32(eqe->data.qp_srq.qp_srq_n);
      
#line 237 
      rsn = tmp_5 & 16777215U;
    }
    {
      
#line 238 
      struct _ddebug descriptor_1 = {.modname = "mlx5_core", .function = "mlx5_eq_int", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/eq.c", .format = "%s:%s:%d:(pid %d): ", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))239U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 238 
      if ((long)(((int)descriptor_1.flags & 1) != 0) != 0L) {
        char const *tmp_6;
        struct task_struct *tmp_7;
        
#line 238 
        ;
        
#line 238 
        ;
        
#line 238 
        tmp_6 = eqe_type_str((unsigned char)((int)eqe->type));
        
#line 238 
        tmp_7 = get_current();
        
#line 238 
        ;
        
#line 238 
        __dynamic_pr_debug(& descriptor_1,"%s:%s:%d:(pid %d): ",(char *)(& dev->priv.name),"mlx5_eq_int",239,tmp_7->pid,tmp_6,(int)eqe->type,rsn);
      }
      else ;
    }
    
#line 240 
    mlx5_srq_event(dev,rsn,(int)eqe->type);
    
#line 241 
    goto ldv_37376;
    case 10: 
#line 243 
    ;
    
#line 244 
    if (0 != 0) 
#line 244 
                tmp_9 = (((eqe->data.cmd.vector << 24) | ((eqe->data.cmd.vector << 8) & 16711680U)) | ((eqe->data.cmd.vector >> 8) & 65280U)) | (eqe->data.cmd.vector >> 24); else 
                                                                    
#line 244 
                                                                    tmp_9 = __fswab32(eqe->data.cmd.vector);
    
#line 244 
    ;
    
#line 244 
    mlx5_cmd_comp_handler(dev,(unsigned long)tmp_9);
    
#line 245 
    goto ldv_37376;
    case 9: 
#line 247 
    ;
    
#line 248 
    port = (unsigned char)((int)eqe->data.port.port >> 4);
    
#line 249 
    switch ((int)eqe->sub_type) {
      struct task_struct *tmp_11;
      case 1: 
#line 250 
      ;
      case 4: 
#line 251 
      ;
      case 6: 
#line 252 
      ;
      case 7: 
#line 253 
      ;
      case 8: 
#line 254 
      ;
      case 9: 
#line 255 
      ;
      case 5: 
#line 256 
      ;
      
#line 257 
      if (dev->event != (void (*)(struct mlx5_core_dev *, enum mlx5_dev_event , unsigned long ))0) {
        enum mlx5_dev_event tmp_10;
        
#line 258 
        ;
        
#line 258 
        tmp_10 = port_subtype_event((unsigned char)((int)eqe->sub_type));
        
#line 258 
        ;
        
#line 258 
        (*(dev->event))(dev,tmp_10,(unsigned long)port);
      }
      else ;
      
#line 260 
      goto ldv_37398;
      default: 
#line 261 
      ;
      
#line 262 
      ;
      
#line 262 
      ;
      
#line 262 
      tmp_11 = get_current();
      
#line 262 
      ;
      
#line 262 
      printk("\001",(char *)(& dev->priv.name),"mlx5_eq_int",263,tmp_11->pid,(int)port,(int)eqe->sub_type);
    }
    ldv_37398: 
#line 265 
    ;
    
#line 265 
    goto ldv_37376;
    case 4: 
#line 266 
    ;
    
#line 267 
    if (0 != 0) 
#line 267 
                cqn = ((((eqe->data.cq_err.cqn << 24) | ((eqe->data.cq_err.cqn << 8) & 16711680U)) | ((eqe->data.cq_err.cqn >> 8) & 65280U)) | (eqe->data.cq_err.cqn >> 24)) & 16777215U;
    else {
      __u32 tmp_12;
      
#line 267 
      tmp_12 = __fswab32(eqe->data.cq_err.cqn);
      
#line 267 
      cqn = tmp_12 & 16777215U;
    }
    
#line 268 
    ;
    
#line 268 
    ;
    
#line 268 
    tmp_13 = get_current();
    
#line 268 
    ;
    
#line 268 
    printk("\001",(char *)(& dev->priv.name),"mlx5_eq_int",269,tmp_13->pid,cqn,(int)eqe->data.cq_err.syndrome);
    
#line 270 
    mlx5_cq_event(dev,cqn,(int)eqe->type);
    
#line 271 
    goto ldv_37376;
    case 11: 
#line 273 
    ;
    {
      int tmp_15;
      unsigned int tmp_17;
      
#line 275 
      if (0 != 0) 
#line 275 
                  tmp_15 = (int)((unsigned short)(((int)eqe->data.req_pages.func_id << 8) | ((int)eqe->data.req_pages.func_id >> 8)));
      else {
        __u16 tmp_14;
        
#line 275 
        tmp_14 = __fswab16((unsigned short)((int)eqe->data.req_pages.func_id));
        
#line 275 
        tmp_15 = (int)tmp_14;
      }
      
#line 275 
      u16 func_id = (unsigned short)tmp_15;
      
#line 276 
      if (0 != 0) 
#line 276 
                  tmp_17 = (((eqe->data.req_pages.num_pages << 24) | ((eqe->data.req_pages.num_pages << 8) & 16711680U)) | ((eqe->data.req_pages.num_pages >> 8) & 65280U)) | (eqe->data.req_pages.num_pages >> 24); else 
                                                                    
#line 276 
                                                                    tmp_17 = __fswab32(eqe->data.req_pages.num_pages);
      
#line 276 
      s32 npages = (int)tmp_17;
      {
        
#line 278 
        struct _ddebug descriptor_2 = {.modname = "mlx5_core", .function = "mlx5_eq_int", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/eq.c", .format = "%s:%s:%d:(pid %d): ", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))279U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
        
#line 278 
        if ((long)(((int)descriptor_2.flags & 1) != 0) != 0L) {
          struct task_struct *tmp_18;
          
#line 278 
          ;
          
#line 278 
          ;
          
#line 278 
          tmp_18 = get_current();
          
#line 278 
          ;
          
#line 278 
          __dynamic_pr_debug(& descriptor_2,"%s:%s:%d:(pid %d): ",(char *)(& dev->priv.name),"mlx5_eq_int",279,tmp_18->pid,(int)func_id,npages);
        }
        else ;
      }
      
#line 280 
      mlx5_core_req_pages_handler(dev,(unsigned short)((int)func_id),npages);
    }
    
#line 282 
    goto ldv_37376;
    case 12: 
#line 285 
    ;
    
#line 286 
    mlx5_eq_pagefault(dev,eqe);
    
#line 287 
    goto ldv_37376;
    default: 
#line 290 
    ;
    
#line 291 
    ;
    
#line 291 
    ;
    
#line 291 
    tmp_19 = get_current();
    
#line 291 
    ;
    
#line 291 
    printk("\001",(char *)(& dev->priv.name),"mlx5_eq_int",292,tmp_19->pid,(int)eqe->type,(int)eq->eqn);
    
#line 293 
    goto ldv_37376;
  }
  ldv_37376: 
#line 296 
  ;
  
#line 296 
  eq->cons_index += 1U;
  
#line 297 
  eqes_found = 1;
  
#line 298 
  set_ci += 1;
  
#line 306 
  if ((long)(set_ci > 127) != 0L) {
    
#line 307 
    eq_update_ci(eq,0);
    
#line 308 
    set_ci = 0;
  }
  else ;
  ldv_37408: 
#line 310 
  ;
  
#line 206 
  eqe = next_eqe_sw(eq);
  
#line 206 
  if (eqe != (struct mlx5_eqe *)0) 
#line 208 
                                   goto ldv_37407; else 
#line 211 
                                                        goto ldv_37409;
  ldv_37409: 
#line 212 
  ;
  
#line 312 
  eq_update_ci(eq,1);
  
#line 314 
  return eqes_found;
}


#line 317  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/eq.c"
static irqreturn_t mlx5_msix_handler(int irq, void *eq_ptr)
{
  irqreturn_t __retres;
  
#line 319 
  struct mlx5_eq *eq = (struct mlx5_eq *)eq_ptr;
  
#line 320 
  struct mlx5_core_dev *dev = eq->dev;
  
#line 322 
  mlx5_eq_int(dev,eq);
  
#line 325 
  __retres = IRQ_HANDLED;
  
#line 325 
  return __retres;
}


#line 328  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/eq.c"
static void init_eq_buf(struct mlx5_eq *eq)
{
  struct mlx5_eqe *eqe;
  int i;
  
#line 333 
  i = 0;
  
#line 333 
  goto ldv_37422;
  ldv_37421: 
#line 334 
  ;
  
#line 334 
  eqe = get_eqe(eq,(unsigned int)i);
  
#line 335 
  eqe->owner = (unsigned char)1U;
  
#line 333 
  i += 1;
  ldv_37422: 
#line 334 
  ;
  
#line 333 
  if (eq->nent > i) 
#line 335 
                    goto ldv_37421; else 
#line 338 
                                         goto ldv_37423;
  ldv_37423: 
#line 339 
  ;
  
#line 340 
  return;
}


#line 339  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/eq.c"
int mlx5_create_map_eq(struct mlx5_core_dev *dev, struct mlx5_eq *eq, u8 vecidx, int nent, u64 mask, char const *name, struct mlx5_uar *uar)
{
  int __retres;
  struct mlx5_create_eq_mbox_in *in;
  struct mlx5_create_eq_mbox_out out;
  int err;
  int inlen;
  __u32 tmp_140;
  int tmp_139;
  char const *tmp_142;
  
#line 342 
  struct mlx5_priv *priv = & dev->priv;
  
#line 348 
  if (0 != 0) {
    unsigned int tmp_68;
    
#line 348 
    if (nent != -127) {
      unsigned int tmp_67;
      
#line 348 
      if (0 != 0) {
        unsigned int tmp_65;
        
#line 348 
        if (nent + 127 <= 0) {
          int tmp;
          
#line 348 
          tmp = ____ilog2_NaN();
          
#line 348 
          tmp_65 = (unsigned int)((int)(1UL << (tmp + 1)));
        }
        else {
          unsigned int tmp_64;
          
#line 348 
          if (nent + 127 >= 0) {
            unsigned int tmp_63;
            
#line 348 
            if (((unsigned long long)(nent + 127) & 4611686018427387904ULL) == 0ULL) {
              unsigned int tmp_62;
              
#line 348 
              if (((unsigned long long)(nent + 127) & 2305843009213693952ULL) == 0ULL) {
                unsigned int tmp_61;
                
#line 348 
                if (((unsigned long long)(nent + 127) & 1152921504606846976ULL) == 0ULL) {
                  unsigned int tmp_60;
                  
#line 348 
                  if (((unsigned long long)(nent + 127) & 576460752303423488ULL) == 0ULL) {
                    unsigned int tmp_59;
                    
#line 348 
                    if (((unsigned long long)(nent + 127) & 288230376151711744ULL) == 0ULL) {
                      unsigned int tmp_58;
                      
#line 348 
                      if (((unsigned long long)(nent + 127) & 144115188075855872ULL) == 0ULL) {
                        unsigned int tmp_57;
                        
#line 348 
                        if (((unsigned long long)(nent + 127) & 72057594037927936ULL) == 0ULL) {
                          unsigned int tmp_56;
                          
#line 348 
                          if (((unsigned long long)(nent + 127) & 36028797018963968ULL) == 0ULL) {
                            unsigned int tmp_55;
                            
#line 348 
                            if (((unsigned long long)(nent + 127) & 18014398509481984ULL) == 0ULL) {
                              unsigned int tmp_54;
                              
#line 348 
                              if (((unsigned long long)(nent + 127) & 9007199254740992ULL) == 0ULL) {
                                unsigned int tmp_53;
                                
#line 348 
                                if (((unsigned long long)(nent + 127) & 4503599627370496ULL) == 0ULL) {
                                  unsigned int tmp_52;
                                  
#line 348 
                                  if (((unsigned long long)(nent + 127) & 2251799813685248ULL) == 0ULL) {
                                    unsigned int tmp_51;
                                    
#line 348 
                                    if (((unsigned long long)(nent + 127) & 1125899906842624ULL) == 0ULL) {
                                      unsigned int tmp_50;
                                      
#line 348 
                                      if (((unsigned long long)(nent + 127) & 562949953421312ULL) == 0ULL) {
                                        unsigned int tmp_49;
                                        
#line 348 
                                        if (((unsigned long long)(nent + 127) & 281474976710656ULL) == 0ULL) {
                                          unsigned int tmp_48;
                                          
#line 348 
                                          if (((unsigned long long)(nent + 127) & 140737488355328ULL) == 0ULL) {
                                            unsigned int tmp_47;
                                            
#line 348 
                                            if (((unsigned long long)(nent + 127) & 70368744177664ULL) == 0ULL) {
                                              unsigned int tmp_46;
                                              
#line 348 
                                              if (((unsigned long long)(nent + 127) & 35184372088832ULL) == 0ULL) {
                                                unsigned int tmp_45;
                                                
#line 348 
                                                if (((unsigned long long)(nent + 127) & 17592186044416ULL) == 0ULL) {
                                                  unsigned int tmp_44;
                                                  
#line 348 
                                                  if (((unsigned long long)(nent + 127) & 8796093022208ULL) == 0ULL) {
                                                    unsigned int tmp_43;
                                                    
#line 348 
                                                    if (((unsigned long long)(nent + 127) & 4398046511104ULL) == 0ULL) {
                                                      unsigned int tmp_42;
                                                      
#line 348 
                                                      if (((unsigned long long)(nent + 127) & 2199023255552ULL) == 0ULL) {
                                                        unsigned int tmp_41;
                                                        
#line 348 
                                                        if (((unsigned long long)(nent + 127) & 1099511627776ULL) == 0ULL) {
                                                          unsigned int tmp_40;
                                                          
#line 348 
                                                          if (((unsigned long long)(nent + 127) & 549755813888ULL) == 0ULL) {
                                                            unsigned int tmp_39;
                                                            
#line 348 
                                                            if (((unsigned long long)(nent + 127) & 274877906944ULL) == 0ULL) {
                                                              unsigned int tmp_38;
                                                              
#line 348 
                                                              if (((unsigned long long)(nent + 127) & 137438953472ULL) == 0ULL) {
                                                                unsigned int tmp_37;
                                                                
#line 348 
                                                                if (((unsigned long long)(nent + 127) & 68719476736ULL) == 0ULL) {
                                                                  unsigned int tmp_36;
                                                                  
#line 348 
                                                                  if (
                                                                    ((unsigned long long)(nent + 127) & 34359738368ULL) == 0ULL) {
                                                                    unsigned int tmp_35;
                                                                    
#line 348 
                                                                    if (
                                                                    ((unsigned long long)(nent + 127) & 17179869184ULL) == 0ULL) {
                                                                    unsigned int tmp_34;
                                                                    
#line 348 
                                                                    if (
                                                                    ((unsigned long long)(nent + 127) & 8589934592ULL) == 0ULL) {
                                                                    unsigned int tmp_33;
                                                                    
#line 348 
                                                                    if (
                                                                    ((unsigned long long)(nent + 127) & 4294967296ULL) == 0ULL) {
                                                                    unsigned int tmp_32;
                                                                    
#line 348 
                                                                    if (
                                                                    nent + 127 >= 0) {
                                                                    unsigned int tmp_31;
                                                                    
#line 348 
                                                                    if (
                                                                    ((unsigned long long)(nent + 127) & 1073741824ULL) == 0ULL) {
                                                                    int tmp_30;
                                                                    
#line 348 
                                                                    if (
                                                                    ((unsigned long long)(nent + 127) & 536870912ULL) == 0ULL) {
                                                                    int tmp_29;
                                                                    
#line 348 
                                                                    if (
                                                                    ((unsigned long long)(nent + 127) & 268435456ULL) == 0ULL) {
                                                                    int tmp_28;
                                                                    
#line 348 
                                                                    if (
                                                                    ((unsigned long long)(nent + 127) & 134217728ULL) == 0ULL) {
                                                                    int tmp_27;
                                                                    
#line 348 
                                                                    if (
                                                                    ((unsigned long long)(nent + 127) & 67108864ULL) == 0ULL) {
                                                                    int tmp_26;
                                                                    
#line 348 
                                                                    if (
                                                                    ((unsigned long long)(nent + 127) & 33554432ULL) == 0ULL) {
                                                                    int tmp_25;
                                                                    
#line 348 
                                                                    if (
                                                                    ((unsigned long long)(nent + 127) & 16777216ULL) == 0ULL) {
                                                                    int tmp_24;
                                                                    
#line 348 
                                                                    if (
                                                                    ((unsigned long long)(nent + 127) & 8388608ULL) == 0ULL) {
                                                                    int tmp_23;
                                                                    
#line 348 
                                                                    if (
                                                                    ((unsigned long long)(nent + 127) & 4194304ULL) == 0ULL) {
                                                                    int tmp_22;
                                                                    
#line 348 
                                                                    if (
                                                                    ((unsigned long long)(nent + 127) & 2097152ULL) == 0ULL) {
                                                                    int tmp_21;
                                                                    
#line 348 
                                                                    if (
                                                                    ((unsigned long long)(nent + 127) & 1048576ULL) == 0ULL) {
                                                                    int tmp_20;
                                                                    
#line 348 
                                                                    if (
                                                                    ((unsigned long long)(nent + 127) & 524288ULL) == 0ULL) {
                                                                    int tmp_19;
                                                                    
#line 348 
                                                                    if (
                                                                    ((unsigned long long)(nent + 127) & 262144ULL) == 0ULL) {
                                                                    int tmp_18;
                                                                    
#line 348 
                                                                    if (
                                                                    ((unsigned long long)(nent + 127) & 131072ULL) == 0ULL) {
                                                                    int tmp_17;
                                                                    
#line 348 
                                                                    if (
                                                                    ((unsigned long long)(nent + 127) & 65536ULL) == 0ULL) {
                                                                    int tmp_16;
                                                                    
#line 348 
                                                                    if (
                                                                    ((unsigned long long)(nent + 127) & 32768ULL) == 0ULL) {
                                                                    int tmp_15;
                                                                    
#line 348 
                                                                    if (
                                                                    ((unsigned long long)(nent + 127) & 16384ULL) == 0ULL) {
                                                                    int tmp_14;
                                                                    
#line 348 
                                                                    if (
                                                                    ((unsigned long long)(nent + 127) & 8192ULL) == 0ULL) {
                                                                    int tmp_13;
                                                                    
#line 348 
                                                                    if (
                                                                    ((unsigned long long)(nent + 127) & 4096ULL) == 0ULL) {
                                                                    int tmp_12;
                                                                    
#line 348 
                                                                    if (
                                                                    ((unsigned long long)(nent + 127) & 2048ULL) == 0ULL) {
                                                                    int tmp_11;
                                                                    
#line 348 
                                                                    if (
                                                                    ((unsigned long long)(nent + 127) & 1024ULL) == 0ULL) {
                                                                    int tmp_10;
                                                                    
#line 348 
                                                                    if (
                                                                    ((unsigned long long)(nent + 127) & 512ULL) == 0ULL) {
                                                                    int tmp_9;
                                                                    
#line 348 
                                                                    if (
                                                                    ((unsigned long long)(nent + 127) & 256ULL) == 0ULL) {
                                                                    int tmp_8;
                                                                    
#line 348 
                                                                    if (
                                                                    ((unsigned long long)(nent + 127) & 128ULL) == 0ULL) {
                                                                    int tmp_7;
                                                                    
#line 348 
                                                                    if (
                                                                    ((unsigned long long)(nent + 127) & 64ULL) == 0ULL) {
                                                                    int tmp_6;
                                                                    
#line 348 
                                                                    if (
                                                                    ((unsigned long long)(nent + 127) & 32ULL) == 0ULL) {
                                                                    int tmp_5;
                                                                    
#line 348 
                                                                    if (
                                                                    ((unsigned long long)(nent + 127) & 16ULL) == 0ULL) {
                                                                    int tmp_4;
                                                                    
#line 348 
                                                                    if (
                                                                    ((unsigned long long)(nent + 127) & 8ULL) == 0ULL) {
                                                                    int tmp_3;
                                                                    
#line 348 
                                                                    if (
                                                                    ((unsigned long long)(nent + 127) & 4ULL) == 0ULL) {
                                                                    int tmp_2;
                                                                    
#line 348 
                                                                    if (
                                                                    ((unsigned long long)(nent + 127) & 2ULL) == 0ULL) {
                                                                    int tmp_1;
                                                                    
#line 348 
                                                                    if (
                                                                    ((unsigned long long)(nent + 127) & 1ULL) == 0ULL) {
                                                                    int tmp_0;
                                                                    
#line 348 
                                                                    tmp_0 = ____ilog2_NaN();
                                                                    
#line 348 
                                                                    tmp_1 = (int)(1UL << (tmp_0 + 1));
                                                                    }
                                                                    else 
                                                                    
#line 348 
                                                                    tmp_1 = 2;
                                                                    
#line 348 
                                                                    tmp_2 = tmp_1;
                                                                    }
                                                                    else 
                                                                    
#line 348 
                                                                    tmp_2 = 4;
                                                                    
#line 348 
                                                                    tmp_3 = tmp_2;
                                                                    }
                                                                    else 
                                                                    
#line 348 
                                                                    tmp_3 = 8;
                                                                    
#line 348 
                                                                    tmp_4 = tmp_3;
                                                                    }
                                                                    else 
                                                                    
#line 348 
                                                                    tmp_4 = 16;
                                                                    
#line 348 
                                                                    tmp_5 = tmp_4;
                                                                    }
                                                                    else 
                                                                    
#line 348 
                                                                    tmp_5 = 32;
                                                                    
#line 348 
                                                                    tmp_6 = tmp_5;
                                                                    }
                                                                    else 
                                                                    
#line 348 
                                                                    tmp_6 = 64;
                                                                    
#line 348 
                                                                    tmp_7 = tmp_6;
                                                                    }
                                                                    else 
                                                                    
#line 348 
                                                                    tmp_7 = 128;
                                                                    
#line 348 
                                                                    tmp_8 = tmp_7;
                                                                    }
                                                                    else 
                                                                    
#line 348 
                                                                    tmp_8 = 256;
                                                                    
#line 348 
                                                                    tmp_9 = tmp_8;
                                                                    }
                                                                    else 
                                                                    
#line 348 
                                                                    tmp_9 = 512;
                                                                    
#line 348 
                                                                    tmp_10 = tmp_9;
                                                                    }
                                                                    else 
                                                                    
#line 348 
                                                                    tmp_10 = 1024;
                                                                    
#line 348 
                                                                    tmp_11 = tmp_10;
                                                                    }
                                                                    else 
                                                                    
#line 348 
                                                                    tmp_11 = 2048;
                                                                    
#line 348 
                                                                    tmp_12 = tmp_11;
                                                                    }
                                                                    else 
                                                                    
#line 348 
                                                                    tmp_12 = 4096;
                                                                    
#line 348 
                                                                    tmp_13 = tmp_12;
                                                                    }
                                                                    else 
                                                                    
#line 348 
                                                                    tmp_13 = 8192;
                                                                    
#line 348 
                                                                    tmp_14 = tmp_13;
                                                                    }
                                                                    else 
                                                                    
#line 348 
                                                                    tmp_14 = 16384;
                                                                    
#line 348 
                                                                    tmp_15 = tmp_14;
                                                                    }
                                                                    else 
                                                                    
#line 348 
                                                                    tmp_15 = 32768;
                                                                    
#line 348 
                                                                    tmp_16 = tmp_15;
                                                                    }
                                                                    else 
                                                                    
#line 348 
                                                                    tmp_16 = 65536;
                                                                    
#line 348 
                                                                    tmp_17 = tmp_16;
                                                                    }
                                                                    else 
                                                                    
#line 348 
                                                                    tmp_17 = 131072;
                                                                    
#line 348 
                                                                    tmp_18 = tmp_17;
                                                                    }
                                                                    else 
                                                                    
#line 348 
                                                                    tmp_18 = 262144;
                                                                    
#line 348 
                                                                    tmp_19 = tmp_18;
                                                                    }
                                                                    else 
                                                                    
#line 348 
                                                                    tmp_19 = 524288;
                                                                    
#line 348 
                                                                    tmp_20 = tmp_19;
                                                                    }
                                                                    else 
                                                                    
#line 348 
                                                                    tmp_20 = 1048576;
                                                                    
#line 348 
                                                                    tmp_21 = tmp_20;
                                                                    }
                                                                    else 
                                                                    
#line 348 
                                                                    tmp_21 = 2097152;
                                                                    
#line 348 
                                                                    tmp_22 = tmp_21;
                                                                    }
                                                                    else 
                                                                    
#line 348 
                                                                    tmp_22 = 4194304;
                                                                    
#line 348 
                                                                    tmp_23 = tmp_22;
                                                                    }
                                                                    else 
                                                                    
#line 348 
                                                                    tmp_23 = 8388608;
                                                                    
#line 348 
                                                                    tmp_24 = tmp_23;
                                                                    }
                                                                    else 
                                                                    
#line 348 
                                                                    tmp_24 = 16777216;
                                                                    
#line 348 
                                                                    tmp_25 = tmp_24;
                                                                    }
                                                                    else 
                                                                    
#line 348 
                                                                    tmp_25 = 33554432;
                                                                    
#line 348 
                                                                    tmp_26 = tmp_25;
                                                                    }
                                                                    else 
                                                                    
#line 348 
                                                                    tmp_26 = 67108864;
                                                                    
#line 348 
                                                                    tmp_27 = tmp_26;
                                                                    }
                                                                    else 
                                                                    
#line 348 
                                                                    tmp_27 = 134217728;
                                                                    
#line 348 
                                                                    tmp_28 = tmp_27;
                                                                    }
                                                                    else 
                                                                    
#line 348 
                                                                    tmp_28 = 268435456;
                                                                    
#line 348 
                                                                    tmp_29 = tmp_28;
                                                                    }
                                                                    else 
                                                                    
#line 348 
                                                                    tmp_29 = 536870912;
                                                                    
#line 348 
                                                                    tmp_30 = tmp_29;
                                                                    }
                                                                    else 
                                                                    
#line 348 
                                                                    tmp_30 = 1073741824;
                                                                    
#line 348 
                                                                    tmp_31 = (unsigned int)tmp_30;
                                                                    }
                                                                    else 
                                                                    
#line 348 
                                                                    tmp_31 = -2147483648;
                                                                    
#line 348 
                                                                    tmp_32 = tmp_31;
                                                                    }
                                                                    else 
                                                                    
#line 348 
                                                                    tmp_32 = (unsigned int)0;
                                                                    
#line 348 
                                                                    tmp_33 = tmp_32;
                                                                    }
                                                                    else 
                                                                    
#line 348 
                                                                    tmp_33 = (unsigned int)0;
                                                                    
#line 348 
                                                                    tmp_34 = tmp_33;
                                                                    }
                                                                    else 
                                                                    
#line 348 
                                                                    tmp_34 = (unsigned int)0;
                                                                    
#line 348 
                                                                    tmp_35 = tmp_34;
                                                                    }
                                                                    else 
                                                                    
#line 348 
                                                                    tmp_35 = (unsigned int)0;
                                                                    
#line 348 
                                                                    tmp_36 = tmp_35;
                                                                  }
                                                                  else 
                                                                    
#line 348 
                                                                    tmp_36 = (unsigned int)0;
                                                                  
#line 348 
                                                                  tmp_37 = tmp_36;
                                                                }
                                                                else 
                                                                  
#line 348 
                                                                  tmp_37 = (unsigned int)0;
                                                                
#line 348 
                                                                tmp_38 = tmp_37;
                                                              }
                                                              else 
#line 348 
                                                                   tmp_38 = (unsigned int)0;
                                                              
#line 348 
                                                              tmp_39 = tmp_38;
                                                            }
                                                            else 
#line 348 
                                                                 tmp_39 = (unsigned int)0;
                                                            
#line 348 
                                                            tmp_40 = tmp_39;
                                                          }
                                                          else 
#line 348 
                                                               tmp_40 = (unsigned int)0;
                                                          
#line 348 
                                                          tmp_41 = tmp_40;
                                                        }
                                                        else 
#line 348 
                                                             tmp_41 = (unsigned int)0;
                                                        
#line 348 
                                                        tmp_42 = tmp_41;
                                                      }
                                                      else 
#line 348 
                                                           tmp_42 = (unsigned int)0;
                                                      
#line 348 
                                                      tmp_43 = tmp_42;
                                                    }
                                                    else 
#line 348 
                                                         tmp_43 = (unsigned int)0;
                                                    
#line 348 
                                                    tmp_44 = tmp_43;
                                                  }
                                                  else 
#line 348 
                                                       tmp_44 = (unsigned int)0;
                                                  
#line 348 
                                                  tmp_45 = tmp_44;
                                                }
                                                else 
#line 348 
                                                     tmp_45 = (unsigned int)0;
                                                
#line 348 
                                                tmp_46 = tmp_45;
                                              }
                                              else 
#line 348 
                                                   tmp_46 = (unsigned int)0;
                                              
#line 348 
                                              tmp_47 = tmp_46;
                                            }
                                            else 
#line 348 
                                                 tmp_47 = (unsigned int)0;
                                            
#line 348 
                                            tmp_48 = tmp_47;
                                          }
                                          else 
#line 348 
                                               tmp_48 = (unsigned int)0;
                                          
#line 348 
                                          tmp_49 = tmp_48;
                                        }
                                        else 
#line 348 
                                             tmp_49 = (unsigned int)0;
                                        
#line 348 
                                        tmp_50 = tmp_49;
                                      }
                                      else 
#line 348 
                                           tmp_50 = (unsigned int)0;
                                      
#line 348 
                                      tmp_51 = tmp_50;
                                    }
                                    else 
#line 348 
                                         tmp_51 = (unsigned int)0;
                                    
#line 348 
                                    tmp_52 = tmp_51;
                                  }
                                  else 
#line 348 
                                       tmp_52 = (unsigned int)0;
                                  
#line 348 
                                  tmp_53 = tmp_52;
                                }
                                else 
#line 348 
                                     tmp_53 = (unsigned int)0;
                                
#line 348 
                                tmp_54 = tmp_53;
                              }
                              else 
#line 348 
                                   tmp_54 = (unsigned int)0;
                              
#line 348 
                              tmp_55 = tmp_54;
                            }
                            else 
#line 348 
                                 tmp_55 = (unsigned int)0;
                            
#line 348 
                            tmp_56 = tmp_55;
                          }
                          else 
#line 348 
                               tmp_56 = (unsigned int)0;
                          
#line 348 
                          tmp_57 = tmp_56;
                        }
                        else 
#line 348 
                             tmp_57 = (unsigned int)0;
                        
#line 348 
                        tmp_58 = tmp_57;
                      }
                      else 
#line 348 
                           tmp_58 = (unsigned int)0;
                      
#line 348 
                      tmp_59 = tmp_58;
                    }
                    else 
#line 348 
                         tmp_59 = (unsigned int)0;
                    
#line 348 
                    tmp_60 = tmp_59;
                  }
                  else 
#line 348 
                       tmp_60 = (unsigned int)0;
                  
#line 348 
                  tmp_61 = tmp_60;
                }
                else 
#line 348 
                     tmp_61 = (unsigned int)0;
                
#line 348 
                tmp_62 = tmp_61;
              }
              else 
#line 348 
                   tmp_62 = (unsigned int)0;
              
#line 348 
              tmp_63 = tmp_62;
            }
            else 
#line 348 
                 tmp_63 = (unsigned int)0;
            
#line 348 
            tmp_64 = tmp_63;
          }
          else 
#line 348 
               tmp_64 = (unsigned int)0;
          
#line 348 
          tmp_65 = tmp_64;
        }
        
#line 348 
        tmp_67 = tmp_65;
      }
      else {
        int tmp_66;
        
#line 348 
        tmp_66 = __ilog2_u32((unsigned int)(nent + 127));
        
#line 348 
        tmp_67 = (unsigned int)((int)(1UL << (tmp_66 + 1)));
      }
      
#line 348 
      tmp_68 = tmp_67;
    }
    else 
#line 348 
         tmp_68 = (unsigned int)1;
    
#line 348 
    eq->nent = (int)tmp_68;
  }
  else {
    unsigned long tmp_69;
    
#line 348 
    tmp_69 = __roundup_pow_of_two((unsigned long)(nent + 128));
    
#line 348 
    eq->nent = (int)tmp_69;
  }
  
#line 349 
  err = mlx5_buf_alloc(dev,eq->nent * 64,& eq->buf);
  
#line 350 
  if (err != 0) {
    
#line 351 
    __retres = err;
    
#line 351 
    goto return_label;
  }
  else ;
  
#line 353 
  init_eq_buf(eq);
  
#line 355 
  inlen = (int)(((unsigned long)eq->buf.npages + 34UL) * (unsigned long)8U);
  
#line 356 
  in = (struct mlx5_create_eq_mbox_in *)mlx5_vzalloc_4((unsigned long)inlen);
  
#line 357 
  if (in == (struct mlx5_create_eq_mbox_in *)0) {
    
#line 358 
    err = -12;
    
#line 359 
    goto err_buf;
  }
  else ;
  
#line 361 
  memset((void *)(& out),0,16UL);
  
#line 363 
  mlx5_fill_page_array(& eq->buf,(__be64 *)(& in->pas));
  
#line 365 
  in->hdr.opcode = (unsigned short)259U;
  
#line 366 
  if (0 != 0) {
    int tmp_137;
    
#line 366 
    if (eq->nent <= 0) {
      int tmp_71;
      
#line 366 
      tmp_71 = ____ilog2_NaN();
      
#line 366 
      tmp_137 = tmp_71 << 24;
    }
    else {
      int tmp_136;
      
#line 366 
      if (eq->nent >= 0) {
        int tmp_135;
        
#line 366 
        if (((unsigned long long)eq->nent & 4611686018427387904ULL) == 0ULL) {
          int tmp_134;
          
#line 366 
          if (((unsigned long long)eq->nent & 2305843009213693952ULL) == 0ULL) {
            int tmp_133;
            
#line 366 
            if (((unsigned long long)eq->nent & 1152921504606846976ULL) == 0ULL) {
              int tmp_132;
              
#line 366 
              if (((unsigned long long)eq->nent & 576460752303423488ULL) == 0ULL) {
                int tmp_131;
                
#line 366 
                if (((unsigned long long)eq->nent & 288230376151711744ULL) == 0ULL) {
                  int tmp_130;
                  
#line 366 
                  if (((unsigned long long)eq->nent & 144115188075855872ULL) == 0ULL) {
                    int tmp_129;
                    
#line 366 
                    if (((unsigned long long)eq->nent & 72057594037927936ULL) == 0ULL) {
                      int tmp_128;
                      
#line 366 
                      if (((unsigned long long)eq->nent & 36028797018963968ULL) == 0ULL) {
                        int tmp_127;
                        
#line 366 
                        if (((unsigned long long)eq->nent & 18014398509481984ULL) == 0ULL) {
                          int tmp_126;
                          
#line 366 
                          if (((unsigned long long)eq->nent & 9007199254740992ULL) == 0ULL) {
                            int tmp_125;
                            
#line 366 
                            if (((unsigned long long)eq->nent & 4503599627370496ULL) == 0ULL) {
                              int tmp_124;
                              
#line 366 
                              if (((unsigned long long)eq->nent & 2251799813685248ULL) == 0ULL) {
                                int tmp_123;
                                
#line 366 
                                if (((unsigned long long)eq->nent & 1125899906842624ULL) == 0ULL) {
                                  int tmp_122;
                                  
#line 366 
                                  if (((unsigned long long)eq->nent & 562949953421312ULL) == 0ULL) {
                                    int tmp_121;
                                    
#line 366 
                                    if (((unsigned long long)eq->nent & 281474976710656ULL) == 0ULL) {
                                      int tmp_120;
                                      
#line 366 
                                      if (((unsigned long long)eq->nent & 140737488355328ULL) == 0ULL) {
                                        int tmp_119;
                                        
#line 366 
                                        if (((unsigned long long)eq->nent & 70368744177664ULL) == 0ULL) {
                                          int tmp_118;
                                          
#line 366 
                                          if (((unsigned long long)eq->nent & 35184372088832ULL) == 0ULL) {
                                            int tmp_117;
                                            
#line 366 
                                            if (((unsigned long long)eq->nent & 17592186044416ULL) == 0ULL) {
                                              int tmp_116;
                                              
#line 366 
                                              if (((unsigned long long)eq->nent & 8796093022208ULL) == 0ULL) {
                                                int tmp_115;
                                                
#line 366 
                                                if (((unsigned long long)eq->nent & 4398046511104ULL) == 0ULL) {
                                                  int tmp_114;
                                                  
#line 366 
                                                  if (((unsigned long long)eq->nent & 2199023255552ULL) == 0ULL) {
                                                    int tmp_113;
                                                    
#line 366 
                                                    if (((unsigned long long)eq->nent & 1099511627776ULL) == 0ULL) {
                                                      int tmp_112;
                                                      
#line 366 
                                                      if (((unsigned long long)eq->nent & 549755813888ULL) == 0ULL) {
                                                        int tmp_111;
                                                        
#line 366 
                                                        if (((unsigned long long)eq->nent & 274877906944ULL) == 0ULL) {
                                                          int tmp_110;
                                                          
#line 366 
                                                          if (((unsigned long long)eq->nent & 137438953472ULL) == 0ULL) {
                                                            int tmp_109;
                                                            
#line 366 
                                                            if (((unsigned long long)eq->nent & 68719476736ULL) == 0ULL) {
                                                              int tmp_108;
                                                              
#line 366 
                                                              if (((unsigned long long)eq->nent & 34359738368ULL) == 0ULL) {
                                                                int tmp_107;
                                                                
#line 366 
                                                                if (((unsigned long long)eq->nent & 17179869184ULL) == 0ULL) {
                                                                  int tmp_106;
                                                                  
#line 366 
                                                                  if (
                                                                    ((unsigned long long)eq->nent & 8589934592ULL) == 0ULL) {
                                                                    int tmp_105;
                                                                    
#line 366 
                                                                    if (
                                                                    ((unsigned long long)eq->nent & 4294967296ULL) == 0ULL) {
                                                                    int tmp_104;
                                                                    
#line 366 
                                                                    if (
                                                                    eq->nent >= 0) {
                                                                    int tmp_103;
                                                                    
#line 366 
                                                                    if (
                                                                    ((unsigned long long)eq->nent & 1073741824ULL) == 0ULL) {
                                                                    int tmp_102;
                                                                    
#line 366 
                                                                    if (
                                                                    ((unsigned long long)eq->nent & 536870912ULL) == 0ULL) {
                                                                    int tmp_101;
                                                                    
#line 366 
                                                                    if (
                                                                    ((unsigned long long)eq->nent & 268435456ULL) == 0ULL) {
                                                                    int tmp_100;
                                                                    
#line 366 
                                                                    if (
                                                                    ((unsigned long long)eq->nent & 134217728ULL) == 0ULL) {
                                                                    int tmp_99;
                                                                    
#line 366 
                                                                    if (
                                                                    ((unsigned long long)eq->nent & 67108864ULL) == 0ULL) {
                                                                    int tmp_98;
                                                                    
#line 366 
                                                                    if (
                                                                    ((unsigned long long)eq->nent & 33554432ULL) == 0ULL) {
                                                                    int tmp_97;
                                                                    
#line 366 
                                                                    if (
                                                                    ((unsigned long long)eq->nent & 16777216ULL) == 0ULL) {
                                                                    int tmp_96;
                                                                    
#line 366 
                                                                    if (
                                                                    ((unsigned long long)eq->nent & 8388608ULL) == 0ULL) {
                                                                    int tmp_95;
                                                                    
#line 366 
                                                                    if (
                                                                    ((unsigned long long)eq->nent & 4194304ULL) == 0ULL) {
                                                                    int tmp_94;
                                                                    
#line 366 
                                                                    if (
                                                                    ((unsigned long long)eq->nent & 2097152ULL) == 0ULL) {
                                                                    int tmp_93;
                                                                    
#line 366 
                                                                    if (
                                                                    ((unsigned long long)eq->nent & 1048576ULL) == 0ULL) {
                                                                    int tmp_92;
                                                                    
#line 366 
                                                                    if (
                                                                    ((unsigned long long)eq->nent & 524288ULL) == 0ULL) {
                                                                    int tmp_91;
                                                                    
#line 366 
                                                                    if (
                                                                    ((unsigned long long)eq->nent & 262144ULL) == 0ULL) {
                                                                    int tmp_90;
                                                                    
#line 366 
                                                                    if (
                                                                    ((unsigned long long)eq->nent & 131072ULL) == 0ULL) {
                                                                    int tmp_89;
                                                                    
#line 366 
                                                                    if (
                                                                    ((unsigned long long)eq->nent & 65536ULL) == 0ULL) {
                                                                    int tmp_88;
                                                                    
#line 366 
                                                                    if (
                                                                    ((unsigned long long)eq->nent & 32768ULL) == 0ULL) {
                                                                    int tmp_87;
                                                                    
#line 366 
                                                                    if (
                                                                    ((unsigned long long)eq->nent & 16384ULL) == 0ULL) {
                                                                    int tmp_86;
                                                                    
#line 366 
                                                                    if (
                                                                    ((unsigned long long)eq->nent & 8192ULL) == 0ULL) {
                                                                    int tmp_85;
                                                                    
#line 366 
                                                                    if (
                                                                    ((unsigned long long)eq->nent & 4096ULL) == 0ULL) {
                                                                    int tmp_84;
                                                                    
#line 366 
                                                                    if (
                                                                    ((unsigned long long)eq->nent & 2048ULL) == 0ULL) {
                                                                    int tmp_83;
                                                                    
#line 366 
                                                                    if (
                                                                    ((unsigned long long)eq->nent & 1024ULL) == 0ULL) {
                                                                    int tmp_82;
                                                                    
#line 366 
                                                                    if (
                                                                    ((unsigned long long)eq->nent & 512ULL) == 0ULL) {
                                                                    int tmp_81;
                                                                    
#line 366 
                                                                    if (
                                                                    ((unsigned long long)eq->nent & 256ULL) == 0ULL) {
                                                                    int tmp_80;
                                                                    
#line 366 
                                                                    if (
                                                                    ((unsigned long long)eq->nent & 128ULL) == 0ULL) {
                                                                    int tmp_79;
                                                                    
#line 366 
                                                                    if (
                                                                    ((unsigned long long)eq->nent & 64ULL) == 0ULL) {
                                                                    int tmp_78;
                                                                    
#line 366 
                                                                    if (
                                                                    ((unsigned long long)eq->nent & 32ULL) == 0ULL) {
                                                                    int tmp_77;
                                                                    
#line 366 
                                                                    if (
                                                                    ((unsigned long long)eq->nent & 16ULL) == 0ULL) {
                                                                    int tmp_76;
                                                                    
#line 366 
                                                                    if (
                                                                    ((unsigned long long)eq->nent & 8ULL) == 0ULL) {
                                                                    int tmp_75;
                                                                    
#line 366 
                                                                    if (
                                                                    ((unsigned long long)eq->nent & 4ULL) == 0ULL) {
                                                                    int tmp_74;
                                                                    
#line 366 
                                                                    if (
                                                                    ((unsigned long long)eq->nent & 2ULL) == 0ULL) {
                                                                    int tmp_73;
                                                                    
#line 366 
                                                                    if (
                                                                    ((unsigned long long)eq->nent & 1ULL) == 0ULL) {
                                                                    int tmp_72;
                                                                    
#line 366 
                                                                    tmp_72 = ____ilog2_NaN();
                                                                    
#line 366 
                                                                    tmp_73 = tmp_72 << 24;
                                                                    }
                                                                    else 
                                                                    
#line 366 
                                                                    tmp_73 = 0;
                                                                    
#line 366 
                                                                    tmp_74 = tmp_73;
                                                                    }
                                                                    else 
                                                                    
#line 366 
                                                                    tmp_74 = 16777216;
                                                                    
#line 366 
                                                                    tmp_75 = tmp_74;
                                                                    }
                                                                    else 
                                                                    
#line 366 
                                                                    tmp_75 = 33554432;
                                                                    
#line 366 
                                                                    tmp_76 = tmp_75;
                                                                    }
                                                                    else 
                                                                    
#line 366 
                                                                    tmp_76 = 50331648;
                                                                    
#line 366 
                                                                    tmp_77 = tmp_76;
                                                                    }
                                                                    else 
                                                                    
#line 366 
                                                                    tmp_77 = 67108864;
                                                                    
#line 366 
                                                                    tmp_78 = tmp_77;
                                                                    }
                                                                    else 
                                                                    
#line 366 
                                                                    tmp_78 = 83886080;
                                                                    
#line 366 
                                                                    tmp_79 = tmp_78;
                                                                    }
                                                                    else 
                                                                    
#line 366 
                                                                    tmp_79 = 100663296;
                                                                    
#line 366 
                                                                    tmp_80 = tmp_79;
                                                                    }
                                                                    else 
                                                                    
#line 366 
                                                                    tmp_80 = 117440512;
                                                                    
#line 366 
                                                                    tmp_81 = tmp_80;
                                                                    }
                                                                    else 
                                                                    
#line 366 
                                                                    tmp_81 = 134217728;
                                                                    
#line 366 
                                                                    tmp_82 = tmp_81;
                                                                    }
                                                                    else 
                                                                    
#line 366 
                                                                    tmp_82 = 150994944;
                                                                    
#line 366 
                                                                    tmp_83 = tmp_82;
                                                                    }
                                                                    else 
                                                                    
#line 366 
                                                                    tmp_83 = 167772160;
                                                                    
#line 366 
                                                                    tmp_84 = tmp_83;
                                                                    }
                                                                    else 
                                                                    
#line 366 
                                                                    tmp_84 = 184549376;
                                                                    
#line 366 
                                                                    tmp_85 = tmp_84;
                                                                    }
                                                                    else 
                                                                    
#line 366 
                                                                    tmp_85 = 201326592;
                                                                    
#line 366 
                                                                    tmp_86 = tmp_85;
                                                                    }
                                                                    else 
                                                                    
#line 366 
                                                                    tmp_86 = 218103808;
                                                                    
#line 366 
                                                                    tmp_87 = tmp_86;
                                                                    }
                                                                    else 
                                                                    
#line 366 
                                                                    tmp_87 = 234881024;
                                                                    
#line 366 
                                                                    tmp_88 = tmp_87;
                                                                    }
                                                                    else 
                                                                    
#line 366 
                                                                    tmp_88 = 251658240;
                                                                    
#line 366 
                                                                    tmp_89 = tmp_88;
                                                                    }
                                                                    else 
                                                                    
#line 366 
                                                                    tmp_89 = 268435456;
                                                                    
#line 366 
                                                                    tmp_90 = tmp_89;
                                                                    }
                                                                    else 
                                                                    
#line 366 
                                                                    tmp_90 = 285212672;
                                                                    
#line 366 
                                                                    tmp_91 = tmp_90;
                                                                    }
                                                                    else 
                                                                    
#line 366 
                                                                    tmp_91 = 301989888;
                                                                    
#line 366 
                                                                    tmp_92 = tmp_91;
                                                                    }
                                                                    else 
                                                                    
#line 366 
                                                                    tmp_92 = 318767104;
                                                                    
#line 366 
                                                                    tmp_93 = tmp_92;
                                                                    }
                                                                    else 
                                                                    
#line 366 
                                                                    tmp_93 = 335544320;
                                                                    
#line 366 
                                                                    tmp_94 = tmp_93;
                                                                    }
                                                                    else 
                                                                    
#line 366 
                                                                    tmp_94 = 352321536;
                                                                    
#line 366 
                                                                    tmp_95 = tmp_94;
                                                                    }
                                                                    else 
                                                                    
#line 366 
                                                                    tmp_95 = 369098752;
                                                                    
#line 366 
                                                                    tmp_96 = tmp_95;
                                                                    }
                                                                    else 
                                                                    
#line 366 
                                                                    tmp_96 = 385875968;
                                                                    
#line 366 
                                                                    tmp_97 = tmp_96;
                                                                    }
                                                                    else 
                                                                    
#line 366 
                                                                    tmp_97 = 402653184;
                                                                    
#line 366 
                                                                    tmp_98 = tmp_97;
                                                                    }
                                                                    else 
                                                                    
#line 366 
                                                                    tmp_98 = 419430400;
                                                                    
#line 366 
                                                                    tmp_99 = tmp_98;
                                                                    }
                                                                    else 
                                                                    
#line 366 
                                                                    tmp_99 = 436207616;
                                                                    
#line 366 
                                                                    tmp_100 = tmp_99;
                                                                    }
                                                                    else 
                                                                    
#line 366 
                                                                    tmp_100 = 452984832;
                                                                    
#line 366 
                                                                    tmp_101 = tmp_100;
                                                                    }
                                                                    else 
                                                                    
#line 366 
                                                                    tmp_101 = 469762048;
                                                                    
#line 366 
                                                                    tmp_102 = tmp_101;
                                                                    }
                                                                    else 
                                                                    
#line 366 
                                                                    tmp_102 = 486539264;
                                                                    
#line 366 
                                                                    tmp_103 = tmp_102;
                                                                    }
                                                                    else 
                                                                    
#line 366 
                                                                    tmp_103 = 503316480;
                                                                    
#line 366 
                                                                    tmp_104 = tmp_103;
                                                                    }
                                                                    else 
                                                                    
#line 366 
                                                                    tmp_104 = 520093696;
                                                                    
#line 366 
                                                                    tmp_105 = tmp_104;
                                                                    }
                                                                    else 
                                                                    
#line 366 
                                                                    tmp_105 = 536870912;
                                                                    
#line 366 
                                                                    tmp_106 = tmp_105;
                                                                  }
                                                                  else 
                                                                    
#line 366 
                                                                    tmp_106 = 553648128;
                                                                  
#line 366 
                                                                  tmp_107 = tmp_106;
                                                                }
                                                                else 
                                                                  
#line 366 
                                                                  tmp_107 = 570425344;
                                                                
#line 366 
                                                                tmp_108 = tmp_107;
                                                              }
                                                              else 
#line 366 
                                                                   tmp_108 = 587202560;
                                                              
#line 366 
                                                              tmp_109 = tmp_108;
                                                            }
                                                            else 
#line 366 
                                                                 tmp_109 = 603979776;
                                                            
#line 366 
                                                            tmp_110 = tmp_109;
                                                          }
                                                          else 
#line 366 
                                                               tmp_110 = 620756992;
                                                          
#line 366 
                                                          tmp_111 = tmp_110;
                                                        }
                                                        else 
#line 366 
                                                             tmp_111 = 637534208;
                                                        
#line 366 
                                                        tmp_112 = tmp_111;
                                                      }
                                                      else 
#line 366 
                                                           tmp_112 = 654311424;
                                                      
#line 366 
                                                      tmp_113 = tmp_112;
                                                    }
                                                    else 
#line 366 
                                                         tmp_113 = 671088640;
                                                    
#line 366 
                                                    tmp_114 = tmp_113;
                                                  }
                                                  else 
#line 366 
                                                       tmp_114 = 687865856;
                                                  
#line 366 
                                                  tmp_115 = tmp_114;
                                                }
                                                else 
#line 366 
                                                     tmp_115 = 704643072;
                                                
#line 366 
                                                tmp_116 = tmp_115;
                                              }
                                              else 
#line 366 
                                                   tmp_116 = 721420288;
                                              
#line 366 
                                              tmp_117 = tmp_116;
                                            }
                                            else 
#line 366 
                                                 tmp_117 = 738197504;
                                            
#line 366 
                                            tmp_118 = tmp_117;
                                          }
                                          else 
#line 366 
                                               tmp_118 = 754974720;
                                          
#line 366 
                                          tmp_119 = tmp_118;
                                        }
                                        else 
#line 366 
                                             tmp_119 = 771751936;
                                        
#line 366 
                                        tmp_120 = tmp_119;
                                      }
                                      else 
#line 366 
                                           tmp_120 = 788529152;
                                      
#line 366 
                                      tmp_121 = tmp_120;
                                    }
                                    else 
#line 366 
                                         tmp_121 = 805306368;
                                    
#line 366 
                                    tmp_122 = tmp_121;
                                  }
                                  else 
#line 366 
                                       tmp_122 = 822083584;
                                  
#line 366 
                                  tmp_123 = tmp_122;
                                }
                                else 
#line 366 
                                     tmp_123 = 838860800;
                                
#line 366 
                                tmp_124 = tmp_123;
                              }
                              else 
#line 366 
                                   tmp_124 = 855638016;
                              
#line 366 
                              tmp_125 = tmp_124;
                            }
                            else 
#line 366 
                                 tmp_125 = 872415232;
                            
#line 366 
                            tmp_126 = tmp_125;
                          }
                          else 
#line 366 
                               tmp_126 = 889192448;
                          
#line 366 
                          tmp_127 = tmp_126;
                        }
                        else 
#line 366 
                             tmp_127 = 905969664;
                        
#line 366 
                        tmp_128 = tmp_127;
                      }
                      else 
#line 366 
                           tmp_128 = 922746880;
                      
#line 366 
                      tmp_129 = tmp_128;
                    }
                    else 
#line 366 
                         tmp_129 = 939524096;
                    
#line 366 
                    tmp_130 = tmp_129;
                  }
                  else 
#line 366 
                       tmp_130 = 956301312;
                  
#line 366 
                  tmp_131 = tmp_130;
                }
                else 
#line 366 
                     tmp_131 = 973078528;
                
#line 366 
                tmp_132 = tmp_131;
              }
              else 
#line 366 
                   tmp_132 = 989855744;
              
#line 366 
              tmp_133 = tmp_132;
            }
            else 
#line 366 
                 tmp_133 = 1006632960;
            
#line 366 
            tmp_134 = tmp_133;
          }
          else 
#line 366 
               tmp_134 = 1023410176;
          
#line 366 
          tmp_135 = tmp_134;
        }
        else 
#line 366 
             tmp_135 = 1040187392;
        
#line 366 
        tmp_136 = tmp_135;
      }
      else 
#line 366 
           tmp_136 = 1056964608;
      
#line 366 
      tmp_137 = tmp_136;
    }
    
#line 366 
    tmp_139 = tmp_137;
  }
  else {
    int tmp_138;
    
#line 366 
    tmp_138 = __ilog2_u32((unsigned int)eq->nent);
    
#line 366 
    tmp_139 = tmp_138 << 24;
  }
  
#line 366 
  ;
  
#line 366 
  tmp_140 = __fswab32((unsigned int)tmp_139 | uar->index);
  
#line 366 
  in->ctx.log_sz_usr_page = tmp_140;
  
#line 367 
  in->ctx.intr = vecidx;
  
#line 368 
  in->ctx.log_page_size = (unsigned char)((unsigned int)eq->buf.page_shift + 244U);
  
#line 369 
  if (0 != 0) 
#line 369 
              in->events_mask = (((((((mask << 56) | ((mask << 40) & 71776119061217280ULL)) | ((mask << 24) & 280375465082880ULL)) | ((mask << 8) & 1095216660480ULL)) | ((mask >> 8) & 4278190080ULL)) | ((mask >> 24) & 16711680ULL)) | ((mask >> 40) & 65280ULL)) | (mask >> 56); else 
                                                                    
#line 369 
                                                                    in->events_mask = __fswab64(mask);
  
#line 371 
  err = mlx5_cmd_exec(dev,(void *)in,inlen,(void *)(& out),16);
  
#line 372 
  if (err != 0) 
#line 373 
                goto err_in; else ;
  
#line 375 
  if ((unsigned int)out.hdr.status != 0U) {
    
#line 376 
    err = mlx5_cmd_status_to_err(& out.hdr);
    
#line 377 
    goto err_in;
  }
  else ;
  
#line 380 
  tmp_142 = pci_name((struct pci_dev const *)dev->pdev);
  
#line 380 
  ;
  
#line 380 
  ;
  
#line 380 
  snprintf((char *)(& (priv->irq_info + (int)vecidx)->name),32UL,"%s@pci:%s",name,tmp_142);
  
#line 383 
  eq->eqn = out.eq_number;
  
#line 384 
  eq->irqn = vecidx;
  
#line 385 
  eq->dev = dev;
  
#line 386 
  eq->doorbell = (__be32 *)(uar->map + 64U);
  
#line 387 
  err = ldv_request_irq_51((priv->msix_arr + (int)vecidx)->vector,& mlx5_msix_handler,0UL,(char const *)(& (priv->irq_info + (int)vecidx)->name),(void *)eq);
  
#line 389 
  if (err != 0) 
#line 390 
                goto err_eq; else ;
  
#line 392 
  err = mlx5_debug_eq_add(dev,eq);
  
#line 393 
  if (err != 0) 
#line 394 
                goto err_irq; else ;
  
#line 398 
  eq_update_ci(eq,1);
  
#line 400 
  kvfree((void const *)in);
  
#line 401 
  __retres = 0;
  
#line 401 
  goto return_label;
  err_irq: 
#line 403 
  ;
  
#line 404 
  ldv_free_irq_52((priv->msix_arr + (int)vecidx)->vector,(void *)eq);
  err_eq: 
#line 406 
  ;
  
#line 407 
  mlx5_cmd_destroy_eq(dev,(unsigned char)((int)eq->eqn));
  err_in: 
#line 409 
  ;
  
#line 410 
  kvfree((void const *)in);
  err_buf: 
#line 412 
  ;
  
#line 413 
  mlx5_buf_free(dev,& eq->buf);
  
#line 414 
  __retres = err;
  return_label: 
#line 414 
                return __retres;
}


#line 416  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/eq.c"
static char const __kstrtab_mlx5_create_map_eq[19U] = {(char)'m', (char)'l', (char)'x', (char)'5', (char)'_', (char)'c', (char)'r', (char)'e', (char)'a', (char)'t', (char)'e', (char)'_', (char)'m', (char)'a', (char)'p', (char)'_', (char)'e', (char)'q', (char)'\000'};

#line 416 
struct kernel_symbol const __ksymtab_mlx5_create_map_eq;


#line 416  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/eq.c"
struct kernel_symbol const __ksymtab_mlx5_create_map_eq = {.value = (unsigned long)(& mlx5_create_map_eq), .name = (char const *)(& __kstrtab_mlx5_create_map_eq)};

#line 418  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/eq.c"
int mlx5_destroy_unmap_eq(struct mlx5_core_dev *dev, struct mlx5_eq *eq)
{
  int err;
  
#line 422 
  mlx5_debug_eq_remove(dev,eq);
  
#line 423 
  ldv_free_irq_53((dev->priv.msix_arr + (int)eq->irqn)->vector,(void *)eq);
  
#line 424 
  err = mlx5_cmd_destroy_eq(dev,(unsigned char)((int)eq->eqn));
  
#line 425 
  if (err != 0) {
    struct task_struct *tmp;
    
#line 426 
    ;
    
#line 426 
    tmp = get_current();
    
#line 426 
    ;
    
#line 426 
    printk("\001",(char *)(& dev->priv.name),"mlx5_destroy_unmap_eq",427,tmp->pid,(int)eq->eqn);
  }
  else ;
  
#line 428 
  synchronize_irq((dev->priv.msix_arr + (int)eq->irqn)->vector);
  
#line 429 
  mlx5_buf_free(dev,& eq->buf);
  
#line 431 
  return err;
}


#line 433  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/eq.c"
static char const __kstrtab_mlx5_destroy_unmap_eq[22U] = {(char)'m', (char)'l', (char)'x', (char)'5', (char)'_', (char)'d', (char)'e', (char)'s', (char)'t', (char)'r', (char)'o', (char)'y', (char)'_', (char)'u', (char)'n', (char)'m', (char)'a', (char)'p', (char)'_', (char)'e', (char)'q', (char)'\000'};

#line 433 
struct kernel_symbol const __ksymtab_mlx5_destroy_unmap_eq;


#line 433  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/eq.c"
struct kernel_symbol const __ksymtab_mlx5_destroy_unmap_eq = {.value = (unsigned long)(& mlx5_destroy_unmap_eq), .name = (char const *)(& __kstrtab_mlx5_destroy_unmap_eq)};

#line 435  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/eq.c"
int mlx5_eq_init(struct mlx5_core_dev *dev)
{
  int err;
  
#line 439 
  spinlock_check(& dev->priv.eq_table.lock);
  {
    struct lock_class_key __key;
    
#line 439 
    __raw_spin_lock_init(& dev->priv.eq_table.lock.__anonCompField_spinlock_18.rlock,"&(&dev->priv.eq_table.lock)->rlock",& __key);
  }
  
#line 441 
  err = mlx5_eq_debugfs_init(dev);
  
#line 443 
  return err;
}


#line 447  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/eq.c"
void mlx5_eq_cleanup(struct mlx5_core_dev *dev)
{
  
#line 449 
  mlx5_eq_debugfs_cleanup(dev);
  
#line 450 
  return;
}


#line 452  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/eq.c"
int mlx5_start_eqs(struct mlx5_core_dev *dev)
{
  int __retres;
  int err;
  int tmp_0;
  
#line 454 
  struct mlx5_eq_table *table = & dev->priv.eq_table;
  
#line 455 
  u32 async_event_mask = 2032318U;
  
#line 458 
  if (0 != 0) 
#line 458 
              tmp_0 = (((((*((__be32 *)(& dev->hca_caps_cur[0]) + 17U) << 24) | ((*((__be32 *)(& dev->hca_caps_cur[0]) + 17U) << 8) & 16711680U)) | ((*((__be32 *)(& dev->hca_caps_cur[0]) + 17U) >> 8) & 65280U)) | (*((__be32 *)(& dev->hca_caps_cur[0]) + 17U) >> 24)) & 16777216U) != 0U;
  else {
    __u32 tmp;
    
#line 458 
    tmp = __fswab32(*((__be32 *)(& dev->hca_caps_cur[0]) + 17U));
    
#line 458 
    tmp_0 = (tmp & 16777216U) != 0U;
  }
  
#line 458 
  if (tmp_0) 
#line 459 
             async_event_mask |= 4096U; else ;
  
#line 461 
  err = mlx5_create_map_eq(dev,& table->cmd_eq,(unsigned char)1,32,1024ULL,"mlx5_cmd_eq",dev->priv.uuari.uars);
  
#line 464 
  if (err != 0) {
    struct task_struct *tmp_1;
    
#line 465 
    ;
    
#line 465 
    tmp_1 = get_current();
    
#line 465 
    ;
    
#line 465 
    printk("\001",(char *)(& dev->priv.name),"mlx5_start_eqs",465,tmp_1->pid,err);
    
#line 466 
    __retres = err;
    
#line 466 
    goto return_label;
  }
  else ;
  
#line 469 
  mlx5_cmd_use_events(dev);
  
#line 471 
  err = mlx5_create_map_eq(dev,& table->async_eq,(unsigned char)2,256,(unsigned long long)async_event_mask,"mlx5_async_eq",dev->priv.uuari.uars);
  
#line 474 
  if (err != 0) {
    struct task_struct *tmp_2;
    
#line 475 
    ;
    
#line 475 
    tmp_2 = get_current();
    
#line 475 
    ;
    
#line 475 
    printk("\001",(char *)(& dev->priv.name),"mlx5_start_eqs",475,tmp_2->pid,err);
    
#line 476 
    goto err1;
  }
  else ;
  
#line 479 
  err = mlx5_create_map_eq(dev,& table->pages_eq,(unsigned char)0,1,2048ULL,"mlx5_pages_eq",dev->priv.uuari.uars);
  
#line 484 
  if (err != 0) {
    struct task_struct *tmp_3;
    
#line 485 
    ;
    
#line 485 
    tmp_3 = get_current();
    
#line 485 
    ;
    
#line 485 
    printk("\001",(char *)(& dev->priv.name),"mlx5_start_eqs",485,tmp_3->pid,err);
    
#line 486 
    goto err2;
  }
  else ;
  
#line 489 
  __retres = err;
  
#line 489 
  goto return_label;
  err2: 
#line 491 
  ;
  
#line 492 
  mlx5_destroy_unmap_eq(dev,& table->async_eq);
  err1: 
#line 494 
  ;
  
#line 495 
  mlx5_cmd_use_polling(dev);
  
#line 496 
  mlx5_destroy_unmap_eq(dev,& table->cmd_eq);
  
#line 497 
  __retres = err;
  return_label: 
#line 497 
                return __retres;
}


#line 500  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/eq.c"
int mlx5_stop_eqs(struct mlx5_core_dev *dev)
{
  int __retres;
  int err;
  
#line 502 
  struct mlx5_eq_table *table = & dev->priv.eq_table;
  
#line 505 
  err = mlx5_destroy_unmap_eq(dev,& table->pages_eq);
  
#line 506 
  if (err != 0) {
    
#line 507 
    __retres = err;
    
#line 507 
    goto return_label;
  }
  else ;
  
#line 509 
  mlx5_destroy_unmap_eq(dev,& table->async_eq);
  
#line 510 
  mlx5_cmd_use_polling(dev);
  
#line 512 
  err = mlx5_destroy_unmap_eq(dev,& table->cmd_eq);
  
#line 513 
  if (err != 0) 
#line 514 
                mlx5_cmd_use_events(dev); else ;
  
#line 516 
  __retres = err;
  return_label: 
#line 516 
                return __retres;
}


#line 519  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/eq.c"
int mlx5_core_eq_query(struct mlx5_core_dev *dev, struct mlx5_eq *eq, struct mlx5_query_eq_mbox_out *out, int outlen)
{
  int __retres;
  struct mlx5_query_eq_mbox_in in;
  int err;
  
#line 525 
  memset((void *)(& in),0,16UL);
  
#line 526 
  memset((void *)out,0,(unsigned long)outlen);
  
#line 527 
  in.hdr.opcode = (unsigned short)771U;
  
#line 528 
  in.eqn = eq->eqn;
  
#line 529 
  err = mlx5_cmd_exec(dev,(void *)(& in),16,(void *)out,outlen);
  
#line 530 
  if (err != 0) {
    
#line 531 
    __retres = err;
    
#line 531 
    goto return_label;
  }
  else ;
  
#line 533 
  if ((unsigned int)out->hdr.status != 0U) 
#line 534 
                                           err = mlx5_cmd_status_to_err(& out->hdr); else ;
  
#line 536 
  __retres = err;
  return_label: 
#line 536 
                return __retres;
}


#line 538  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/eq.c"
static char const __kstrtab_mlx5_core_eq_query[19U] = {(char)'m', (char)'l', (char)'x', (char)'5', (char)'_', (char)'c', (char)'o', (char)'r', (char)'e', (char)'_', (char)'e', (char)'q', (char)'_', (char)'q', (char)'u', (char)'e', (char)'r', (char)'y', (char)'\000'};

#line 538 
struct kernel_symbol const __ksymtab_mlx5_core_eq_query;


#line 538  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/eq.c"
struct kernel_symbol const __ksymtab_mlx5_core_eq_query = {.value = (unsigned long)(& mlx5_core_eq_query), .name = (char const *)(& __kstrtab_mlx5_core_eq_query)};

#line 57  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_eq.c.aux"
void ldv_emg_free_irq(unsigned int arg0, void *arg1);


#line 60 
int ldv_emg_request_irq(unsigned int arg0, enum irqreturn (*arg1)(int , void *), unsigned long arg2, char *arg3, void *arg4);


#line 68  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_eq.c.aux"
enum irqreturn ldv_emg_wrapper_mlx5_msix_handler_2(int arg0, void *arg1)
{
  enum irqreturn tmp;
  
#line 69 
  tmp = mlx5_msix_handler(arg0,arg1);
  
#line 69 
  return tmp;
}


#line 506  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_eq.c.aux"
static void *kzalloc_7(size_t size, gfp_t flags)
{
  void *tmp;
  
#line 509 
  tmp = ldv_kzalloc(size,flags);
  
#line 509 
  return tmp;
}


#line 523  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_eq.c.aux"
static int ldv_request_irq_51(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev)
{
  int tmp;
  
#line 527 
  tmp = ldv_emg_request_irq(irq,handler,flags,(char *)name,dev);
  
#line 527 
  return tmp;
}


#line 531  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_eq.c.aux"
static void ldv_free_irq_52(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  
#line 535 
  ldv_emg_free_irq(ldv_func_arg1,ldv_func_arg2);
  
#line 536 
  return;
}


#line 539  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_eq.c.aux"
static void ldv_free_irq_53(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  
#line 543 
  ldv_emg_free_irq(ldv_func_arg1,ldv_func_arg2);
  
#line 544 
  return;
}


#line 391  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
void __napi_schedule(struct napi_struct *);


#line 394  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static bool napi_disable_pending(struct napi_struct *n)
{
  bool __retres;
  int tmp;
  
#line 396 
  tmp = constant_test_bit(1L,(unsigned long const volatile *)(& n->state));
  
#line 396 
  __retres = (_Bool)(tmp != 0);
  
#line 396 
  return __retres;
}


#line 408  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static bool napi_schedule_prep(struct napi_struct *n)
{
  bool __retres;
  int tmp_2;
  int tmp_0;
  bool tmp;
  
#line 410 
  tmp = napi_disable_pending(n);
  
#line 410 
  if (tmp) 
#line 410 
           tmp_0 = 0; else 
#line 410 
                           tmp_0 = 1;
  
#line 410 
  if (tmp_0) {
    int tmp_1;
    
#line 410 
    tmp_1 = test_and_clear_bit(0L,(unsigned long volatile *)(& n->state));
    
#line 410 
    if (tmp_1 == 0) 
#line 410 
                    tmp_2 = 1; else 
#line 410 
                                    tmp_2 = 0;
  }
  else 
#line 410 
       tmp_2 = 0;
  
#line 410 
  __retres = (_Bool)(tmp_2 != 0);
  
#line 410 
  return __retres;
}


#line 421  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void napi_schedule(struct napi_struct *n)
{
  bool tmp;
  
#line 423 
  tmp = napi_schedule_prep(n);
  
#line 423 
  if ((int)tmp != 0) 
#line 424 
                     __napi_schedule(n); else ;
  
#line 425 
  return;
}


#line 450 
void napi_complete_done(struct napi_struct *, int);


#line 458  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void napi_complete(struct napi_struct *n)
{
  
#line 460 
  napi_complete_done(n,0);
  
#line 461 
  return;
}


#line 111  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/wq.h"
__inline static u32 mlx5_cqwq_get_ci(struct mlx5_cqwq *wq)
{
  u32 __retres;
  
#line 113 
  __retres = wq->cc & wq->sz_m1;
  
#line 113 
  return __retres;
}


#line 121  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/wq.h"
__inline static u32 mlx5_cqwq_get_wrap_cnt(struct mlx5_cqwq *wq)
{
  u32 __retres;
  
#line 123 
  __retres = wq->cc >> (int)wq->log_sz;
  
#line 123 
  return __retres;
}


#line 467  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en.h"
bool mlx5e_poll_rx_cq(struct mlx5e_cq *cq, int budget);


#line 468 
bool mlx5e_post_rx_wqes(struct mlx5e_rq *rq);


#line 35  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_txrx.c"
struct mlx5_cqe64 *mlx5e_get_cqe(struct mlx5e_cq *cq)
{
  struct mlx5_cqe64 *__retres;
  u32 tmp_1;
  
#line 37 
  struct mlx5_cqwq *wq = & cq->wq;
  
#line 38 
  u32 ci = mlx5_cqwq_get_ci(wq);
  
#line 39 
  struct mlx5_cqe64 *cqe = mlx5_cqwq_get_wqe(wq,ci);
  
#line 40 
  int cqe_ownership_bit = (int)cqe->op_own & 1;
  
#line 41 
  tmp_1 = mlx5_cqwq_get_wrap_cnt(wq);
  
#line 41 
  int sw_ownership_val = (int)tmp_1 & 1;
  
#line 43 
  if (cqe_ownership_bit != sw_ownership_val) {
    
#line 44 
    __retres = (struct mlx5_cqe64 *)0;
    
#line 44 
    goto return_label;
  }
  else ;
  
#line 45 
  ldv_inline_asm();
  
#line 49 
  __retres = cqe;
  return_label: 
#line 49 
                return __retres;
}


#line 52  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_txrx.c"
int mlx5e_napi_poll(struct napi_struct *napi, int budget)
{
  int __retres;
  struct mlx5e_channel *tmp;
  int i;
  bool tmp_0;
  bool tmp_1;
  bool tmp_2;
  int tmp_3;
  {
    
#line 54 
    struct napi_struct const *__mptr = (struct napi_struct const *)napi;
    
#line 54 
    tmp = (struct mlx5e_channel *)__mptr + 18446744073709544896U;
  }
  
#line 54 
  struct mlx5e_channel *c = tmp;
  
#line 56 
  bool busy = (_Bool)0;
  
#line 59 
  set_bit(1L,(unsigned long volatile *)(& c->flags));
  
#line 61 
  i = 0;
  
#line 61 
  goto ldv_54790;
  ldv_54789: 
#line 62 
  ;
  
#line 62 
  tmp_0 = mlx5e_poll_tx_cq(& c->sq[i].cq);
  
#line 62 
  busy = (_Bool)(((int)tmp_0 | (int)busy) != 0);
  
#line 61 
  i += 1;
  ldv_54790: 
#line 62 
  ;
  
#line 61 
  if ((int)c->num_tc > i) 
#line 63 
                          goto ldv_54789; else 
#line 66 
                                               goto ldv_54791;
  ldv_54791: 
#line 67 
  ;
  
#line 64 
  tmp_1 = mlx5e_poll_rx_cq(& c->rq.cq,budget);
  
#line 64 
  busy = (_Bool)(((int)tmp_1 | (int)busy) != 0);
  
#line 66 
  tmp_2 = mlx5e_post_rx_wqes(& c->rq);
  
#line 66 
  busy = (_Bool)(((int)tmp_2 | (int)busy) != 0);
  
#line 68 
  if ((int)busy != 0) {
    
#line 69 
    __retres = budget;
    
#line 69 
    goto return_label;
  }
  else ;
  
#line 71 
  napi_complete(napi);
  
#line 74 
  tmp_3 = constant_test_bit(1L,(unsigned long const volatile *)(& c->flags));
  
#line 74 
  if (tmp_3 != 0) {
    
#line 75 
    napi_schedule(napi);
    
#line 76 
    __retres = 0;
    
#line 76 
    goto return_label;
  }
  else ;
  
#line 79 
  i = 0;
  
#line 79 
  goto ldv_54793;
  ldv_54792: 
#line 80 
  ;
  
#line 80 
  mlx5e_cq_arm(& c->sq[i].cq);
  
#line 79 
  i += 1;
  ldv_54793: 
#line 80 
  ;
  
#line 79 
  if ((int)c->num_tc > i) 
#line 81 
                          goto ldv_54792; else 
#line 84 
                                               goto ldv_54794;
  ldv_54794: 
#line 85 
  ;
  
#line 81 
  mlx5e_cq_arm(& c->rq.cq);
  
#line 83 
  __retres = 0;
  return_label: 
#line 83 
                return __retres;
}


#line 86  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_txrx.c"
void mlx5e_completion_event(struct mlx5_core_cq *mcq)
{
  struct mlx5e_cq *tmp;
  {
    
#line 88 
    struct mlx5_core_cq const *__mptr = (struct mlx5_core_cq const *)mcq;
    
#line 88 
    tmp = (struct mlx5e_cq *)__mptr + 18446744073709551568U;
  }
  
#line 88 
  struct mlx5e_cq *cq = tmp;
  
#line 90 
  set_bit(1L,(unsigned long volatile *)(& cq->flags));
  
#line 91 
  set_bit(1L,(unsigned long volatile *)(& (cq->channel)->flags));
  
#line 92 
  ldv_inline_asm();
  
#line 93 
  napi_schedule(cq->napi);
  
#line 94 
  return;
}


#line 96  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_txrx.c"
void mlx5e_cq_error_event(struct mlx5_core_cq *mcq, enum mlx5_event event)
{
  struct mlx5e_cq *tmp;
  {
    
#line 98 
    struct mlx5_core_cq const *__mptr = (struct mlx5_core_cq const *)mcq;
    
#line 98 
    tmp = (struct mlx5e_cq *)__mptr + 18446744073709551568U;
  }
  
#line 98 
  struct mlx5e_cq *cq = tmp;
  
#line 99 
  struct mlx5e_channel *c = cq->channel;
  
#line 100 
  struct mlx5e_priv *priv = c->priv;
  
#line 101 
  struct net_device *netdev = priv->netdev;
  
#line 103 
  netdev_err((struct net_device const *)netdev,"%s: cqn=0x%.6x event=0x%.2x\n","mlx5e_cq_error_event",mcq->cqn,(unsigned int)event);
  
#line 105 
  return;
}


#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rwlock.h"
void __rwlock_init(rwlock_t *, char const *, struct lock_class_key *);


#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rwlock_api_smp.h"
void _raw_write_lock_irq(rwlock_t *);


#line 26 
unsigned long _raw_write_lock_irqsave(rwlock_t *);


#line 35 
void _raw_write_unlock_irq(rwlock_t *);


#line 40 
void _raw_write_unlock_irqrestore(rwlock_t *, unsigned long);


#line 340  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_lock_irq_6(spinlock_t *lock)
{
  
#line 342 
  _raw_spin_lock_irq(& lock->__anonCompField_spinlock_18.rlock);
  
#line 343 
  return;
}


#line 366 
static void ldv_spin_lock_irq_51_0(spinlock_t *lock);


#line 397  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_unlock_irq_6(spinlock_t *lock)
{
  
#line 399 
  _raw_spin_unlock_irq(& lock->__anonCompField_spinlock_18.rlock);
  
#line 400 
  return;
}


#line 413 
static void ldv_spin_unlock_irq_52_0(spinlock_t *lock);


#line 647  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/driver.h"
__inline static u32 mlx5_base_mkey(u32 const key)
{
  u32 __retres;
  
#line 649 
  __retres = key & 4294967040U;
  
#line 649 
  return __retres;
}


#line 690 
void mlx5_cleanup_mr_table(struct mlx5_core_dev *dev);


#line 696 
int mlx5_core_query_mkey(struct mlx5_core_dev *dev, struct mlx5_core_mr *mr, struct mlx5_query_mkey_mbox_out *out, int outlen);


#line 698 
int mlx5_core_dump_fill_mkey(struct mlx5_core_dev *dev, struct mlx5_core_mr *mr, u32 *mkey);


#line 781 
int mlx5_core_create_psv(struct mlx5_core_dev *dev, u32 pdn, int npsvs, u32 *sig_index);


#line 783 
int mlx5_core_destroy_psv(struct mlx5_core_dev *dev, int psv_num);


#line 788  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/driver.h"
__inline static u32 mlx5_mkey_to_idx(u32 mkey)
{
  u32 __retres;
  
#line 790 
  __retres = mkey >> 8;
  
#line 790 
  return __retres;
}


#line 793  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/driver.h"
__inline static u32 mlx5_idx_to_mkey(u32 mkey_idx)
{
  u32 __retres;
  
#line 795 
  __retres = mkey_idx << 8;
  
#line 795 
  return __retres;
}


#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/mr.c"
void mlx5_init_mr_table(struct mlx5_core_dev *dev)
{
  
#line 41 
  struct mlx5_mr_table *table = & dev->priv.mr_table;
  {
    struct lock_class_key __key;
    
#line 43 
    __rwlock_init(& table->lock,"&table->lock",& __key);
  }
  
#line 44 
  table->tree.height = 0U;
  
#line 44 
  table->tree.gfp_mask = 32U;
  
#line 44 
  table->tree.rnode = (struct radix_tree_node *)0;
  
#line 45 
  return;
}


#line 47  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/mr.c"
void mlx5_cleanup_mr_table(struct mlx5_core_dev *dev)
{
  
#line 49 
  return;
}


#line 51  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/mr.c"
int mlx5_core_create_mkey(struct mlx5_core_dev *dev, struct mlx5_core_mr *mr, struct mlx5_create_mkey_mbox_in *in, int inlen, void (*callback)(int , void *), void *context, struct mlx5_create_mkey_mbox_out *out)
{
  int __retres;
  struct mlx5_create_mkey_mbox_out lout;
  int err;
  u8 key;
  u8 tmp;
  unsigned int tmp_1;
  u32 tmp_9;
  unsigned int tmp_8;
  u32 tmp_14;
  
#line 56 
  struct mlx5_mr_table *table = & dev->priv.mr_table;
  
#line 61 
  memset((void *)(& lout),0,16UL);
  
#line 62 
  ldv_spin_lock_irq_51_0(& dev->priv.mkey_lock);
  
#line 63 
  tmp = dev->priv.mkey_key;
  
#line 63 
  dev->priv.mkey_key = (u8)((int)dev->priv.mkey_key + 1);
  
#line 63 
  key = tmp;
  
#line 64 
  ldv_spin_unlock_irq_52_0(& dev->priv.mkey_lock);
  
#line 65 
  if (0 != 0) 
#line 65 
              tmp_1 = ((unsigned int)key << 24) | (((unsigned int)key << 8) & 16711680U); else 
                                                                    
#line 65 
                                                                    tmp_1 = __fswab32((unsigned int)key);
  
#line 65 
  in->seg.qpn_mkey7_0 |= tmp_1;
  
#line 66 
  in->hdr.opcode = (unsigned short)2U;
  
#line 67 
  if (callback != (void (*)(int , void *))0) {
    
#line 68 
    err = mlx5_cmd_exec_cb(dev,(void *)in,inlen,(void *)out,16,callback,context);
    
#line 70 
    __retres = err;
    
#line 70 
    goto return_label;
  }
  else 
#line 72 
       err = mlx5_cmd_exec(dev,(void *)in,inlen,(void *)(& lout),16);
  
#line 75 
  if (err != 0) {
    {
      
#line 76 
      struct _ddebug descriptor = {.modname = "mlx5_core", .function = "mlx5_core_create_mkey", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/mr.c", .format = "%s:%s:%d:(pid %d): ", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))76U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 76 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
        struct task_struct *tmp_2;
        
#line 76 
        ;
        
#line 76 
        tmp_2 = get_current();
        
#line 76 
        ;
        
#line 76 
        __dynamic_pr_debug(& descriptor,"%s:%s:%d:(pid %d): ",(char *)(& dev->priv.name),"mlx5_core_create_mkey",76,tmp_2->pid,err);
      }
      else ;
    }
    
#line 77 
    __retres = err;
    
#line 77 
    goto return_label;
  }
  else ;
  
#line 80 
  if ((unsigned int)lout.hdr.status != 0U) {
    int tmp_4;
    {
      
#line 81 
      struct _ddebug descriptor_0 = {.modname = "mlx5_core", .function = "mlx5_core_create_mkey", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/mr.c", .format = "%s:%s:%d:(pid %d): ", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))81U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 81 
      if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) {
        struct task_struct *tmp_3;
        
#line 81 
        ;
        
#line 81 
        tmp_3 = get_current();
        
#line 81 
        ;
        
#line 81 
        __dynamic_pr_debug(& descriptor_0,"%s:%s:%d:(pid %d): ",(char *)(& dev->priv.name),"mlx5_core_create_mkey",81,tmp_3->pid,(int)lout.hdr.status);
      }
      else ;
    }
    
#line 82 
    tmp_4 = mlx5_cmd_status_to_err(& lout.hdr);
    
#line 82 
    __retres = tmp_4;
    
#line 82 
    goto return_label;
  }
  else ;
  
#line 85 
  if (0 != 0) 
#line 85 
              mr->iova = (((((((in->seg.start_addr << 56) | ((in->seg.start_addr << 40) & 71776119061217280ULL)) | ((in->seg.start_addr << 24) & 280375465082880ULL)) | ((in->seg.start_addr << 8) & 1095216660480ULL)) | ((in->seg.start_addr >> 8) & 4278190080ULL)) | ((in->seg.start_addr >> 24) & 16711680ULL)) | ((in->seg.start_addr >> 40) & 65280ULL)) | (in->seg.start_addr >> 56); else 
                                                                    
#line 85 
                                                                    mr->iova = __fswab64(in->seg.start_addr);
  
#line 86 
  if (0 != 0) 
#line 86 
              mr->size = (((((((in->seg.len << 56) | ((in->seg.len << 40) & 71776119061217280ULL)) | ((in->seg.len << 24) & 280375465082880ULL)) | ((in->seg.len << 8) & 1095216660480ULL)) | ((in->seg.len >> 8) & 4278190080ULL)) | ((in->seg.len >> 24) & 16711680ULL)) | ((in->seg.len >> 40) & 65280ULL)) | (in->seg.len >> 56); else 
                                                                    
#line 86 
                                                                    mr->size = __fswab64(in->seg.len);
  
#line 87 
  if (0 != 0) 
#line 87 
              tmp_8 = ((((lout.mkey << 24) | ((lout.mkey << 8) & 16711680U)) | ((lout.mkey >> 8) & 65280U)) | (lout.mkey >> 24)) & 16777215U;
  else {
    __u32 tmp_7;
    
#line 87 
    tmp_7 = __fswab32(lout.mkey);
    
#line 87 
    tmp_8 = tmp_7 & 16777215U;
  }
  
#line 87 
  tmp_9 = mlx5_idx_to_mkey(tmp_8);
  
#line 87 
  mr->key = tmp_9 | (unsigned int)key;
  
#line 88 
  if (0 != 0) 
#line 88 
              mr->pd = ((((in->seg.flags_pd << 24) | ((in->seg.flags_pd << 8) & 16711680U)) | ((in->seg.flags_pd >> 8) & 65280U)) | (in->seg.flags_pd >> 24)) & 16777215U;
  else {
    __u32 tmp_10;
    
#line 88 
    tmp_10 = __fswab32(in->seg.flags_pd);
    
#line 88 
    mr->pd = tmp_10 & 16777215U;
  }
  {
    
#line 90 
    struct _ddebug descriptor_1 = {.modname = "mlx5_core", .function = "mlx5_core_create_mkey", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/mr.c", .format = "%s:%s:%d:(pid %d): ", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))91U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 90 
    if ((long)(((int)descriptor_1.flags & 1) != 0) != 0L) {
      unsigned int tmp_12;
      struct task_struct *tmp_13;
      
#line 90 
      ;
      
#line 90 
      ;
      
#line 90 
      if (0 != 0) 
#line 90 
                  tmp_12 = (((lout.mkey << 24) | ((lout.mkey << 8) & 16711680U)) | ((lout.mkey >> 8) & 65280U)) | (lout.mkey >> 24); else 
                                                                    
#line 90 
                                                                    tmp_12 = __fswab32(lout.mkey);
      
#line 90 
      tmp_13 = get_current();
      
#line 90 
      ;
      
#line 90 
      __dynamic_pr_debug(& descriptor_1,"%s:%s:%d:(pid %d): ",(char *)(& dev->priv.name),"mlx5_core_create_mkey",91,tmp_13->pid,tmp_12,(int)key,mr->key);
    }
    else ;
  }
  
#line 94 
  _raw_write_lock_irq(& table->lock);
  
#line 95 
  ;
  
#line 95 
  tmp_14 = mlx5_base_mkey(mr->key);
  
#line 95 
  ;
  
#line 95 
  err = radix_tree_insert(& table->tree,(unsigned long)tmp_14,(void *)mr);
  
#line 96 
  _raw_write_unlock_irq(& table->lock);
  
#line 97 
  if (err != 0) {
    u32 tmp_15;
    struct task_struct *tmp_16;
    
#line 98 
    ;
    
#line 98 
    tmp_15 = mlx5_base_mkey(mr->key);
    
#line 98 
    tmp_16 = get_current();
    
#line 98 
    ;
    
#line 98 
    printk("\001",(char *)(& dev->priv.name),"mlx5_core_create_mkey",99,tmp_16->pid,tmp_15,err);
    
#line 100 
    mlx5_core_destroy_mkey(dev,mr);
  }
  else ;
  
#line 103 
  __retres = err;
  return_label: 
#line 103 
                return __retres;
}


#line 105  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/mr.c"
static char const __kstrtab_mlx5_core_create_mkey[22U] = {(char)'m', (char)'l', (char)'x', (char)'5', (char)'_', (char)'c', (char)'o', (char)'r', (char)'e', (char)'_', (char)'c', (char)'r', (char)'e', (char)'a', (char)'t', (char)'e', (char)'_', (char)'m', (char)'k', (char)'e', (char)'y', (char)'\000'};

#line 105 
struct kernel_symbol const __ksymtab_mlx5_core_create_mkey;


#line 105  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/mr.c"
struct kernel_symbol const __ksymtab_mlx5_core_create_mkey = {.value = (unsigned long)(& mlx5_core_create_mkey), .name = (char const *)(& __kstrtab_mlx5_core_create_mkey)};

#line 107  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/mr.c"
int mlx5_core_destroy_mkey(struct mlx5_core_dev *dev, struct mlx5_core_mr *mr)
{
  int __retres;
  struct mlx5_destroy_mkey_mbox_in in;
  struct mlx5_destroy_mkey_mbox_out out;
  struct mlx5_core_mr *deleted_mr;
  unsigned long flags;
  int err;
  void *tmp_0;
  u32 tmp;
  __u32 tmp_4;
  u32 tmp_3;
  
#line 109 
  struct mlx5_mr_table *table = & dev->priv.mr_table;
  
#line 116 
  memset((void *)(& in),0,16UL);
  
#line 117 
  memset((void *)(& out),0,16UL);
  {
    unsigned long __dummy;
    unsigned long __dummy2;
    
  }
  
#line 119 
  flags = _raw_write_lock_irqsave(& table->lock);
  
#line 120 
  tmp = mlx5_base_mkey(mr->key);
  
#line 120 
  ;
  
#line 120 
  tmp_0 = radix_tree_delete(& table->tree,(unsigned long)tmp);
  
#line 120 
  deleted_mr = (struct mlx5_core_mr *)tmp_0;
  {
    unsigned long __dummy_0;
    unsigned long __dummy2_0;
    
  }
  
#line 121 
  _raw_write_unlock_irqrestore(& table->lock,flags);
  
#line 122 
  if (deleted_mr == (struct mlx5_core_mr *)0) {
    u32 tmp_1;
    struct task_struct *tmp_2;
    
#line 123 
    tmp_1 = mlx5_base_mkey(mr->key);
    
#line 123 
    tmp_2 = get_current();
    
#line 123 
    ;
    
#line 123 
    printk("\001",(char *)(& dev->priv.name),"mlx5_core_destroy_mkey",124,tmp_2->pid,tmp_1);
    
#line 125 
    __retres = -2;
    
#line 125 
    goto return_label;
  }
  else ;
  
#line 128 
  in.hdr.opcode = (unsigned short)514U;
  
#line 129 
  tmp_3 = mlx5_mkey_to_idx(mr->key);
  
#line 129 
  tmp_4 = __fswab32(tmp_3);
  
#line 129 
  in.mkey = tmp_4;
  
#line 130 
  err = mlx5_cmd_exec(dev,(void *)(& in),16,(void *)(& out),16);
  
#line 131 
  if (err != 0) {
    
#line 132 
    __retres = err;
    
#line 132 
    goto return_label;
  }
  else ;
  
#line 134 
  if ((unsigned int)out.hdr.status != 0U) {
    int tmp_5;
    
#line 135 
    tmp_5 = mlx5_cmd_status_to_err(& out.hdr);
    
#line 135 
    __retres = tmp_5;
    
#line 135 
    goto return_label;
  }
  else ;
  
#line 137 
  __retres = err;
  return_label: 
#line 137 
                return __retres;
}


#line 139  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/mr.c"
static char const __kstrtab_mlx5_core_destroy_mkey[23U] = {(char)'m', (char)'l', (char)'x', (char)'5', (char)'_', (char)'c', (char)'o', (char)'r', (char)'e', (char)'_', (char)'d', (char)'e', (char)'s', (char)'t', (char)'r', (char)'o', (char)'y', (char)'_', (char)'m', (char)'k', (char)'e', (char)'y', (char)'\000'};

#line 139 
struct kernel_symbol const __ksymtab_mlx5_core_destroy_mkey;


#line 139  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/mr.c"
struct kernel_symbol const __ksymtab_mlx5_core_destroy_mkey = {.value = (unsigned long)(& mlx5_core_destroy_mkey), .name = (char const *)(& __kstrtab_mlx5_core_destroy_mkey)};

#line 141  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/mr.c"
int mlx5_core_query_mkey(struct mlx5_core_dev *dev, struct mlx5_core_mr *mr, struct mlx5_query_mkey_mbox_out *out, int outlen)
{
  int __retres;
  struct mlx5_query_mkey_mbox_in in;
  int err;
  __u32 tmp_0;
  u32 tmp;
  
#line 147 
  memset((void *)(& in),0,12UL);
  
#line 148 
  memset((void *)out,0,(unsigned long)outlen);
  
#line 150 
  in.hdr.opcode = (unsigned short)258U;
  
#line 151 
  tmp = mlx5_mkey_to_idx(mr->key);
  
#line 151 
  tmp_0 = __fswab32(tmp);
  
#line 151 
  in.mkey = tmp_0;
  
#line 152 
  err = mlx5_cmd_exec(dev,(void *)(& in),12,(void *)out,outlen);
  
#line 153 
  if (err != 0) {
    
#line 154 
    __retres = err;
    
#line 154 
    goto return_label;
  }
  else ;
  
#line 156 
  if ((unsigned int)out->hdr.status != 0U) {
    int tmp_1;
    
#line 157 
    tmp_1 = mlx5_cmd_status_to_err(& out->hdr);
    
#line 157 
    __retres = tmp_1;
    
#line 157 
    goto return_label;
  }
  else ;
  
#line 159 
  __retres = err;
  return_label: 
#line 159 
                return __retres;
}


#line 161  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/mr.c"
static char const __kstrtab_mlx5_core_query_mkey[21U] = {(char)'m', (char)'l', (char)'x', (char)'5', (char)'_', (char)'c', (char)'o', (char)'r', (char)'e', (char)'_', (char)'q', (char)'u', (char)'e', (char)'r', (char)'y', (char)'_', (char)'m', (char)'k', (char)'e', (char)'y', (char)'\000'};

#line 161 
struct kernel_symbol const __ksymtab_mlx5_core_query_mkey;


#line 161  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/mr.c"
struct kernel_symbol const __ksymtab_mlx5_core_query_mkey = {.value = (unsigned long)(& mlx5_core_query_mkey), .name = (char const *)(& __kstrtab_mlx5_core_query_mkey)};

#line 163  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/mr.c"
int mlx5_core_dump_fill_mkey(struct mlx5_core_dev *dev, struct mlx5_core_mr *mr, u32 *mkey)
{
  int __retres;
  struct mlx5_query_special_ctxs_mbox_in in;
  struct mlx5_query_special_ctxs_mbox_out out;
  int err;
  
#line 170 
  memset((void *)(& in),0,16UL);
  
#line 171 
  memset((void *)(& out),0,16UL);
  
#line 173 
  in.hdr.opcode = (unsigned short)770U;
  
#line 174 
  err = mlx5_cmd_exec(dev,(void *)(& in),16,(void *)(& out),16);
  
#line 175 
  if (err != 0) {
    
#line 176 
    __retres = err;
    
#line 176 
    goto return_label;
  }
  else ;
  
#line 178 
  if ((unsigned int)out.hdr.status != 0U) {
    int tmp;
    
#line 179 
    tmp = mlx5_cmd_status_to_err(& out.hdr);
    
#line 179 
    __retres = tmp;
    
#line 179 
    goto return_label;
  }
  else ;
  
#line 181 
  if (0 != 0) 
#line 181 
              *mkey = (((out.dump_fill_mkey << 24) | ((out.dump_fill_mkey << 8) & 16711680U)) | ((out.dump_fill_mkey >> 8) & 65280U)) | (out.dump_fill_mkey >> 24); else 
                                                                    
#line 181 
                                                                    *mkey = __fswab32(out.dump_fill_mkey);
  
#line 183 
  __retres = err;
  return_label: 
#line 183 
                return __retres;
}


#line 185  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/mr.c"
static char const __kstrtab_mlx5_core_dump_fill_mkey[25U] = {(char)'m', (char)'l', (char)'x', (char)'5', (char)'_', (char)'c', (char)'o', (char)'r', (char)'e', (char)'_', (char)'d', (char)'u', (char)'m', (char)'p', (char)'_', (char)'f', (char)'i', (char)'l', (char)'l', (char)'_', (char)'m', (char)'k', (char)'e', (char)'y', (char)'\000'};

#line 185 
struct kernel_symbol const __ksymtab_mlx5_core_dump_fill_mkey;


#line 185  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/mr.c"
struct kernel_symbol const __ksymtab_mlx5_core_dump_fill_mkey = {.value = (unsigned long)(& mlx5_core_dump_fill_mkey), .name = (char const *)(& __kstrtab_mlx5_core_dump_fill_mkey)};

#line 187  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/mr.c"
int mlx5_core_create_psv(struct mlx5_core_dev *dev, u32 pdn, int npsvs, u32 *sig_index)
{
  int __retres;
  struct mlx5_allocate_psv_in in;
  struct mlx5_allocate_psv_out out;
  int i;
  int err;
  
#line 194 
  if (npsvs > 4) {
    
#line 195 
    __retres = -22;
    
#line 195 
    goto return_label;
  }
  else ;
  
#line 197 
  memset((void *)(& in),0,16UL);
  
#line 198 
  memset((void *)(& out),0,32UL);
  
#line 200 
  in.hdr.opcode = (unsigned short)6U;
  
#line 201 
  if (0 != 0) 
#line 201 
              in.npsv_pd = (((((unsigned int)(npsvs << 28) | pdn) << 24) | ((((unsigned int)(npsvs << 28) | pdn) << 8) & 16711680U)) | ((((unsigned int)(npsvs << 28) | pdn) >> 8) & 65280U)) | (((unsigned int)(npsvs << 28) | pdn) >> 24); else 
                                                                    
#line 201 
                                                                    in.npsv_pd = __fswab32((unsigned int)(npsvs << 28) | pdn);
  
#line 202 
  err = mlx5_cmd_exec(dev,(void *)(& in),16,(void *)(& out),32);
  
#line 203 
  if (err != 0) {
    struct task_struct *tmp_0;
    
#line 204 
    ;
    
#line 204 
    tmp_0 = get_current();
    
#line 204 
    ;
    
#line 204 
    printk("\001",(char *)(& dev->priv.name),"mlx5_core_create_psv",204,tmp_0->pid,err);
    
#line 205 
    __retres = err;
    
#line 205 
    goto return_label;
  }
  else ;
  
#line 208 
  if ((unsigned int)out.hdr.status != 0U) {
    struct task_struct *tmp_1;
    int tmp_2;
    
#line 209 
    ;
    
#line 209 
    tmp_1 = get_current();
    
#line 209 
    ;
    
#line 209 
    printk("\001",(char *)(& dev->priv.name),"mlx5_core_create_psv",210,tmp_1->pid,(int)out.hdr.status);
    
#line 211 
    tmp_2 = mlx5_cmd_status_to_err(& out.hdr);
    
#line 211 
    __retres = tmp_2;
    
#line 211 
    goto return_label;
  }
  else ;
  
#line 214 
  i = 0;
  
#line 214 
  goto ldv_35900;
  ldv_35899: 
#line 215 
  ;
  
#line 215 
  if (0 != 0) 
#line 215 
              *(sig_index + i) = ((((out.psv_idx[i] << 24) | ((out.psv_idx[i] << 8) & 16711680U)) | ((out.psv_idx[i] >> 8) & 65280U)) | (out.psv_idx[i] >> 24)) & 16777215U;
  else {
    __u32 tmp_3;
    
#line 215 
    tmp_3 = __fswab32(out.psv_idx[i]);
    
#line 215 
    *(sig_index + i) = tmp_3 & 16777215U;
  }
  
#line 214 
  i += 1;
  ldv_35900: 
#line 215 
  ;
  
#line 214 
  if (i < npsvs) 
#line 216 
                 goto ldv_35899; else 
#line 219 
                                      goto ldv_35901;
  ldv_35901: 
#line 220 
  ;
  
#line 217 
  __retres = err;
  return_label: 
#line 217 
                return __retres;
}


#line 219  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/mr.c"
static char const __kstrtab_mlx5_core_create_psv[21U] = {(char)'m', (char)'l', (char)'x', (char)'5', (char)'_', (char)'c', (char)'o', (char)'r', (char)'e', (char)'_', (char)'c', (char)'r', (char)'e', (char)'a', (char)'t', (char)'e', (char)'_', (char)'p', (char)'s', (char)'v', (char)'\000'};

#line 219 
struct kernel_symbol const __ksymtab_mlx5_core_create_psv;


#line 219  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/mr.c"
struct kernel_symbol const __ksymtab_mlx5_core_create_psv = {.value = (unsigned long)(& mlx5_core_create_psv), .name = (char const *)(& __kstrtab_mlx5_core_create_psv)};

#line 221  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/mr.c"
int mlx5_core_destroy_psv(struct mlx5_core_dev *dev, int psv_num)
{
  struct mlx5_destroy_psv_in in;
  struct mlx5_destroy_psv_out out;
  int err;
  
#line 227 
  memset((void *)(& in),0,16UL);
  
#line 228 
  memset((void *)(& out),0,16UL);
  
#line 230 
  if (0 != 0) 
#line 230 
              in.psv_number = ((((unsigned int)psv_num << 24) | (((unsigned int)psv_num << 8) & 16711680U)) | (((unsigned int)psv_num >> 8) & 65280U)) | ((unsigned int)psv_num >> 24); else 
                                                                    
#line 230 
                                                                    in.psv_number = __fswab32((unsigned int)psv_num);
  
#line 231 
  in.hdr.opcode = (unsigned short)262U;
  
#line 232 
  err = mlx5_cmd_exec(dev,(void *)(& in),16,(void *)(& out),16);
  
#line 233 
  if (err != 0) {
    struct task_struct *tmp_0;
    
#line 234 
    ;
    
#line 234 
    tmp_0 = get_current();
    
#line 234 
    ;
    
#line 234 
    printk("\001",(char *)(& dev->priv.name),"mlx5_core_destroy_psv",234,tmp_0->pid,err);
    
#line 235 
    goto out;
  }
  else ;
  
#line 238 
  if ((unsigned int)out.hdr.status != 0U) {
    struct task_struct *tmp_1;
    
#line 239 
    ;
    
#line 239 
    tmp_1 = get_current();
    
#line 239 
    ;
    
#line 239 
    printk("\001",(char *)(& dev->priv.name),"mlx5_core_destroy_psv",240,tmp_1->pid,(int)out.hdr.status);
    
#line 241 
    err = mlx5_cmd_status_to_err(& out.hdr);
    
#line 242 
    goto out;
  }
  else ;
  out: 
#line 245 
  ;
  
#line 246 
  return err;
}


#line 248  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/mr.c"
static char const __kstrtab_mlx5_core_destroy_psv[22U] = {(char)'m', (char)'l', (char)'x', (char)'5', (char)'_', (char)'c', (char)'o', (char)'r', (char)'e', (char)'_', (char)'d', (char)'e', (char)'s', (char)'t', (char)'r', (char)'o', (char)'y', (char)'_', (char)'p', (char)'s', (char)'v', (char)'\000'};

#line 248 
struct kernel_symbol const __ksymtab_mlx5_core_destroy_psv;


#line 248  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/mr.c"
struct kernel_symbol const __ksymtab_mlx5_core_destroy_psv = {.value = (unsigned long)(& mlx5_core_destroy_psv), .name = (char const *)(& __kstrtab_mlx5_core_destroy_psv)};

#line 514  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_mr.c.aux"
static void ldv_spin_lock_irq_51_0(spinlock_t *lock)
{
  
#line 518 
  ldv_spin_model_lock((char *)"mkey_lock_of_mlx5_priv");
  
#line 520 
  spin_lock_irq_6(lock);
  
#line 521 
  return;
}


#line 524  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_mr.c.aux"
static void ldv_spin_unlock_irq_52_0(spinlock_t *lock)
{
  
#line 528 
  ldv_spin_model_unlock((char *)"mkey_lock_of_mlx5_priv");
  
#line 530 
  spin_unlock_irq_6(lock);
  
#line 531 
  return;
}


#line 581  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/slab.h"
static void *kzalloc_8(size_t size, gfp_t flags);


#line 830  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/driver.h"
int mlx5_core_query_vendor_id(struct mlx5_core_dev *mdev, u32 *vendor_id);


#line 45  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/fw.c"
void __compiletime_assert_45(void);


#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/fw.c"
static int mlx5_cmd_query_adapter(struct mlx5_core_dev *dev, u32 *out, int outlen)
{
  u32 in[4U];
  int tmp_8;
  
#line 43 
  memset((void *)(& in),0,16UL);
  {
    
#line 45 
    bool __cond = (_Bool)0;
    
#line 45 
    if ((int)__cond != 0) 
#line 45 
                          __compiletime_assert_45(); else ;
  }
  
#line 45 
  if (0 != 0) {
    unsigned int tmp_2;
    unsigned int tmp_4;
    
#line 45 
    if (0 != 0) 
#line 45 
                tmp_2 = ((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) << 24;
    else {
      __u32 tmp_1;
      
#line 45 
      tmp_1 = __fswab32(*((__be32 *)(& in)));
      
#line 45 
      tmp_2 = tmp_1 << 24;
    }
    
#line 45 
    if (0 != 0) 
#line 45 
                tmp_4 = (((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) << 8) & 16711680U;
    else {
      __u32 tmp_3;
      
#line 45 
      tmp_3 = __fswab32(*((__be32 *)(& in)));
      
#line 45 
      tmp_4 = (tmp_3 << 8) & 16711680U;
    }
    
#line 45 
    *((__be32 *)(& in)) = (tmp_2 | tmp_4) | 257U;
  }
  else {
    __u32 tmp_7;
    unsigned int tmp_6;
    
#line 45 
    if (0 != 0) 
#line 45 
                tmp_6 = (((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) & 65535U) | 16842752U;
    else {
      __u32 tmp_5;
      
#line 45 
      tmp_5 = __fswab32(*((__be32 *)(& in)));
      
#line 45 
      tmp_6 = (tmp_5 & 65535U) | 16842752U;
    }
    
#line 45 
    tmp_7 = __fswab32(tmp_6);
    
#line 45 
    *((__be32 *)(& in)) = tmp_7;
  }
  
#line 47 
  tmp_8 = mlx5_cmd_exec_check_status(dev,(u32 *)(& in),16,out,outlen);
  
#line 47 
  return tmp_8;
}


#line 50  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/fw.c"
int mlx5_query_board_id(struct mlx5_core_dev *dev)
{
  int __retres;
  u32 *out;
  int err;
  
#line 53 
  int outlen = 272;
  
#line 56 
  out = (u32 *)kzalloc_8((unsigned long)outlen,208U);
  
#line 57 
  if (out == (u32 *)0U) {
    
#line 58 
    __retres = -12;
    
#line 58 
    goto return_label;
  }
  else ;
  
#line 60 
  err = mlx5_cmd_query_adapter(dev,out,outlen);
  
#line 61 
  if (err != 0) 
#line 62 
                goto out; else ;
  
#line 64 
  memcpy((void *)(& dev->board_id),(void const *)out + 256U,16UL);
  out: 
#line 70 
  ;
  
#line 71 
  kfree((void const *)out);
  
#line 72 
  __retres = err;
  return_label: 
#line 72 
                return __retres;
}


#line 75  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/fw.c"
int mlx5_core_query_vendor_id(struct mlx5_core_dev *mdev, u32 *vendor_id)
{
  int __retres;
  u32 *out;
  int err;
  
#line 78 
  int outlen = 272;
  
#line 81 
  out = (u32 *)kzalloc_8((unsigned long)outlen,208U);
  
#line 82 
  if (out == (u32 *)0U) {
    
#line 83 
    __retres = -12;
    
#line 83 
    goto return_label;
  }
  else ;
  
#line 85 
  err = mlx5_cmd_query_adapter(mdev,out,outlen);
  
#line 86 
  if (err != 0) 
#line 87 
                goto out; else ;
  
#line 89 
  if (0 != 0) 
#line 89 
              *vendor_id = ((((*(out + 10U) << 24) | ((*(out + 10U) << 8) & 16711680U)) | ((*(out + 10U) >> 8) & 65280U)) | (*(out + 10U) >> 24)) & 16777215U;
  else {
    __u32 tmp_0;
    
#line 89 
    tmp_0 = __fswab32(*(out + 10U));
    
#line 89 
    *vendor_id = tmp_0 & 16777215U;
  }
  out: 
#line 91 
  ;
  
#line 92 
  kfree((void const *)out);
  
#line 93 
  __retres = err;
  return_label: 
#line 93 
                return __retres;
}


#line 95  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/fw.c"
static char const __kstrtab_mlx5_core_query_vendor_id[26U] = {(char)'m', (char)'l', (char)'x', (char)'5', (char)'_', (char)'c', (char)'o', (char)'r', (char)'e', (char)'_', (char)'q', (char)'u', (char)'e', (char)'r', (char)'y', (char)'_', (char)'v', (char)'e', (char)'n', (char)'d', (char)'o', (char)'r', (char)'_', (char)'i', (char)'d', (char)'\000'};

#line 95 
struct kernel_symbol const __ksymtab_mlx5_core_query_vendor_id;


#line 95  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/fw.c"
struct kernel_symbol const __ksymtab_mlx5_core_query_vendor_id = {.value = (unsigned long)(& mlx5_core_query_vendor_id), .name = (char const *)(& __kstrtab_mlx5_core_query_vendor_id)};

#line 97  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/fw.c"
int mlx5_query_hca_caps(struct mlx5_core_dev *dev)
{
  int __retres;
  int err;
  int tmp_0;
  int tmp_2;
  int tmp_4;
  int tmp_6;
  int tmp_8;
  
#line 101 
  err = mlx5_core_get_caps(dev,(enum mlx5_cap_type)MLX5_CAP_GENERAL,(enum mlx5_cap_mode)HCA_CAP_OPMOD_GET_CUR);
  
#line 102 
  if (err != 0) {
    
#line 103 
    __retres = err;
    
#line 103 
    goto return_label;
  }
  else ;
  
#line 105 
  err = mlx5_core_get_caps(dev,(enum mlx5_cap_type)MLX5_CAP_GENERAL,(enum mlx5_cap_mode)HCA_CAP_OPMOD_GET_MAX);
  
#line 106 
  if (err != 0) {
    
#line 107 
    __retres = err;
    
#line 107 
    goto return_label;
  }
  else ;
  
#line 109 
  if (0 != 0) 
#line 109 
              tmp_0 = (((((*((__be32 *)(& dev->hca_caps_cur[0]) + 16U) << 24) | ((*((__be32 *)(& dev->hca_caps_cur[0]) + 16U) << 8) & 16711680U)) | ((*((__be32 *)(& dev->hca_caps_cur[0]) + 16U) >> 8) & 65280U)) | (*((__be32 *)(& dev->hca_caps_cur[0]) + 16U) >> 24)) & 8U) != 0U;
  else {
    __u32 tmp;
    
#line 109 
    tmp = __fswab32(*((__be32 *)(& dev->hca_caps_cur[0]) + 16U));
    
#line 109 
    tmp_0 = (tmp & 8U) != 0U;
  }
  
#line 109 
  if (tmp_0) {
    
#line 110 
    err = mlx5_core_get_caps(dev,(enum mlx5_cap_type)MLX5_CAP_ETHERNET_OFFLOADS,(enum mlx5_cap_mode)HCA_CAP_OPMOD_GET_CUR);
    
#line 112 
    if (err != 0) {
      
#line 113 
      __retres = err;
      
#line 113 
      goto return_label;
    }
    else ;
    
#line 114 
    err = mlx5_core_get_caps(dev,(enum mlx5_cap_type)MLX5_CAP_ETHERNET_OFFLOADS,(enum mlx5_cap_mode)HCA_CAP_OPMOD_GET_MAX);
    
#line 116 
    if (err != 0) {
      
#line 117 
      __retres = err;
      
#line 117 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 120 
  if (0 != 0) 
#line 120 
              tmp_2 = (((((*((__be32 *)(& dev->hca_caps_cur[0]) + 17U) << 24) | ((*((__be32 *)(& dev->hca_caps_cur[0]) + 17U) << 8) & 16711680U)) | ((*((__be32 *)(& dev->hca_caps_cur[0]) + 17U) >> 8) & 65280U)) | (*((__be32 *)(& dev->hca_caps_cur[0]) + 17U) >> 24)) & 16777216U) != 0U;
  else {
    __u32 tmp_1;
    
#line 120 
    tmp_1 = __fswab32(*((__be32 *)(& dev->hca_caps_cur[0]) + 17U));
    
#line 120 
    tmp_2 = (tmp_1 & 16777216U) != 0U;
  }
  
#line 120 
  if (tmp_2) {
    
#line 121 
    err = mlx5_core_get_caps(dev,(enum mlx5_cap_type)MLX5_CAP_ODP,(enum mlx5_cap_mode)HCA_CAP_OPMOD_GET_CUR);
    
#line 123 
    if (err != 0) {
      
#line 124 
      __retres = err;
      
#line 124 
      goto return_label;
    }
    else ;
    
#line 125 
    err = mlx5_core_get_caps(dev,(enum mlx5_cap_type)MLX5_CAP_ODP,(enum mlx5_cap_mode)HCA_CAP_OPMOD_GET_MAX);
    
#line 127 
    if (err != 0) {
      
#line 128 
      __retres = err;
      
#line 128 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 131 
  if (0 != 0) 
#line 131 
              tmp_4 = (((((*((__be32 *)(& dev->hca_caps_cur[0]) + 16U) << 24) | ((*((__be32 *)(& dev->hca_caps_cur[0]) + 16U) << 8) & 16711680U)) | ((*((__be32 *)(& dev->hca_caps_cur[0]) + 16U) >> 8) & 65280U)) | (*((__be32 *)(& dev->hca_caps_cur[0]) + 16U) >> 24)) & 2U) != 0U;
  else {
    __u32 tmp_3;
    
#line 131 
    tmp_3 = __fswab32(*((__be32 *)(& dev->hca_caps_cur[0]) + 16U));
    
#line 131 
    tmp_4 = (tmp_3 & 2U) != 0U;
  }
  
#line 131 
  if (tmp_4) {
    
#line 132 
    err = mlx5_core_get_caps(dev,(enum mlx5_cap_type)MLX5_CAP_ATOMIC,(enum mlx5_cap_mode)HCA_CAP_OPMOD_GET_CUR);
    
#line 134 
    if (err != 0) {
      
#line 135 
      __retres = err;
      
#line 135 
      goto return_label;
    }
    else ;
    
#line 136 
    err = mlx5_core_get_caps(dev,(enum mlx5_cap_type)MLX5_CAP_ATOMIC,(enum mlx5_cap_mode)HCA_CAP_OPMOD_GET_MAX);
    
#line 138 
    if (err != 0) {
      
#line 139 
      __retres = err;
      
#line 139 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 142 
  if (0 != 0) 
#line 142 
              tmp_6 = (((((*((__be32 *)(& dev->hca_caps_cur[0]) + 16U) << 24) | ((*((__be32 *)(& dev->hca_caps_cur[0]) + 16U) << 8) & 16711680U)) | ((*((__be32 *)(& dev->hca_caps_cur[0]) + 16U) >> 8) & 65280U)) | (*((__be32 *)(& dev->hca_caps_cur[0]) + 16U) >> 24)) & 4U) != 0U;
  else {
    __u32 tmp_5;
    
#line 142 
    tmp_5 = __fswab32(*((__be32 *)(& dev->hca_caps_cur[0]) + 16U));
    
#line 142 
    tmp_6 = (tmp_5 & 4U) != 0U;
  }
  
#line 142 
  if (tmp_6) {
    
#line 143 
    err = mlx5_core_get_caps(dev,(enum mlx5_cap_type)MLX5_CAP_ROCE,(enum mlx5_cap_mode)HCA_CAP_OPMOD_GET_CUR);
    
#line 145 
    if (err != 0) {
      
#line 146 
      __retres = err;
      
#line 146 
      goto return_label;
    }
    else ;
    
#line 147 
    err = mlx5_core_get_caps(dev,(enum mlx5_cap_type)MLX5_CAP_ROCE,(enum mlx5_cap_mode)HCA_CAP_OPMOD_GET_MAX);
    
#line 149 
    if (err != 0) {
      
#line 150 
      __retres = err;
      
#line 150 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 153 
  if (0 != 0) 
#line 153 
              tmp_8 = (((((*((__be32 *)(& dev->hca_caps_cur[0]) + 13U) << 24) | ((*((__be32 *)(& dev->hca_caps_cur[0]) + 13U) << 8) & 16711680U)) | ((*((__be32 *)(& dev->hca_caps_cur[0]) + 13U) >> 8) & 65280U)) | (*((__be32 *)(& dev->hca_caps_cur[0]) + 13U) >> 24)) & 33554432U) != 0U;
  else {
    __u32 tmp_7;
    
#line 153 
    tmp_7 = __fswab32(*((__be32 *)(& dev->hca_caps_cur[0]) + 13U));
    
#line 153 
    tmp_8 = (tmp_7 & 33554432U) != 0U;
  }
  
#line 153 
  if (tmp_8) {
    
#line 154 
    err = mlx5_core_get_caps(dev,(enum mlx5_cap_type)MLX5_CAP_FLOW_TABLE,(enum mlx5_cap_mode)HCA_CAP_OPMOD_GET_CUR);
    
#line 156 
    if (err != 0) {
      
#line 157 
      __retres = err;
      
#line 157 
      goto return_label;
    }
    else ;
    
#line 158 
    err = mlx5_core_get_caps(dev,(enum mlx5_cap_type)MLX5_CAP_FLOW_TABLE,(enum mlx5_cap_mode)HCA_CAP_OPMOD_GET_MAX);
    
#line 160 
    if (err != 0) {
      
#line 161 
      __retres = err;
      
#line 161 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 163 
  __retres = 0;
  return_label: 
#line 163 
                return __retres;
}


#line 166  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/fw.c"
int mlx5_cmd_init_hca(struct mlx5_core_dev *dev)
{
  int __retres;
  struct mlx5_cmd_init_hca_mbox_in in;
  struct mlx5_cmd_init_hca_mbox_out out;
  int err;
  
#line 172 
  memset((void *)(& in),0,16UL);
  
#line 173 
  memset((void *)(& out),0,16UL);
  
#line 174 
  in.hdr.opcode = (unsigned short)513U;
  
#line 175 
  err = mlx5_cmd_exec(dev,(void *)(& in),16,(void *)(& out),16);
  
#line 176 
  if (err != 0) {
    
#line 177 
    __retres = err;
    
#line 177 
    goto return_label;
  }
  else ;
  
#line 179 
  if ((unsigned int)out.hdr.status != 0U) 
#line 180 
                                          err = mlx5_cmd_status_to_err(& out.hdr); else ;
  
#line 182 
  __retres = err;
  return_label: 
#line 182 
                return __retres;
}


#line 185  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/fw.c"
int mlx5_cmd_teardown_hca(struct mlx5_core_dev *dev)
{
  int __retres;
  struct mlx5_cmd_teardown_hca_mbox_in in;
  struct mlx5_cmd_teardown_hca_mbox_out out;
  int err;
  
#line 191 
  memset((void *)(& in),0,16UL);
  
#line 192 
  memset((void *)(& out),0,16UL);
  
#line 193 
  in.hdr.opcode = (unsigned short)769U;
  
#line 194 
  err = mlx5_cmd_exec(dev,(void *)(& in),16,(void *)(& out),16);
  
#line 195 
  if (err != 0) {
    
#line 196 
    __retres = err;
    
#line 196 
    goto return_label;
  }
  else ;
  
#line 198 
  if ((unsigned int)out.hdr.status != 0U) 
#line 199 
                                          err = mlx5_cmd_status_to_err(& out.hdr); else ;
  
#line 201 
  __retres = err;
  return_label: 
#line 201 
                return __retres;
}


#line 497  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_fw.c.aux"
static void *kzalloc_8(size_t size, gfp_t flags)
{
  void *tmp;
  
#line 500 
  tmp = ldv_kzalloc(size,flags);
  
#line 500 
  return tmp;
}


#line 775  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/driver.h"
int mlx5_db_alloc(struct mlx5_core_dev *dev, struct mlx5_db *db);


#line 776 
void mlx5_db_free(struct mlx5_core_dev *dev, struct mlx5_db *db);


#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/wq.c"
u32 mlx5_wq_cyc_get_size(struct mlx5_wq_cyc *wq)
{
  u32 __retres;
  
#line 39 
  __retres = (unsigned int)wq->sz_m1 + 1U;
  
#line 39 
  return __retres;
}


#line 42  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/wq.c"
u32 mlx5_cqwq_get_size(struct mlx5_cqwq *wq)
{
  u32 __retres;
  
#line 44 
  __retres = wq->sz_m1 + 1U;
  
#line 44 
  return __retres;
}


#line 47  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/wq.c"
u32 mlx5_wq_ll_get_size(struct mlx5_wq_ll *wq)
{
  u32 __retres;
  
#line 49 
  __retres = (unsigned int)wq->sz_m1 + 1U;
  
#line 49 
  return __retres;
}


#line 52  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/wq.c"
static u32 mlx5_wq_cyc_get_byte_size(struct mlx5_wq_cyc *wq)
{
  u32 __retres;
  u32 tmp;
  
#line 54 
  tmp = mlx5_wq_cyc_get_size(wq);
  
#line 54 
  ;
  
#line 54 
  __retres = tmp << (int)wq->log_stride;
  
#line 54 
  return __retres;
}


#line 57  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/wq.c"
static u32 mlx5_cqwq_get_byte_size(struct mlx5_cqwq *wq)
{
  u32 __retres;
  u32 tmp;
  
#line 59 
  tmp = mlx5_cqwq_get_size(wq);
  
#line 59 
  ;
  
#line 59 
  __retres = tmp << (int)wq->log_stride;
  
#line 59 
  return __retres;
}


#line 62  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/wq.c"
static u32 mlx5_wq_ll_get_byte_size(struct mlx5_wq_ll *wq)
{
  u32 __retres;
  u32 tmp;
  
#line 64 
  tmp = mlx5_wq_ll_get_size(wq);
  
#line 64 
  ;
  
#line 64 
  __retres = tmp << (int)wq->log_stride;
  
#line 64 
  return __retres;
}


#line 67  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/wq.c"
int mlx5_wq_cyc_create(struct mlx5_core_dev *mdev, struct mlx5_wq_param *param, void *wqc, struct mlx5_wq_cyc *wq, struct mlx5_wq_ctrl *wq_ctrl)
{
  int __retres;
  int err;
  u32 tmp_2;
  
#line 73 
  if (0 != 0) 
#line 73 
              wq->log_stride = (unsigned char)((unsigned int)((unsigned char)(((((*((__be32 *)wqc + 8U) << 24) | ((*((__be32 *)wqc + 8U) << 8) & 16711680U)) | ((*((__be32 *)wqc + 8U) >> 8) & 65280U)) | (*((__be32 *)wqc + 8U) >> 24)) >> 16UL)) & 15U);
  else {
    __u32 tmp;
    
#line 73 
    tmp = __fswab32(*((__be32 *)wqc + 8U));
    
#line 73 
    wq->log_stride = (unsigned char)((unsigned int)((unsigned char)(tmp >> 16UL)) & 15U);
  }
  
#line 74 
  if (0 != 0) 
#line 74 
              wq->sz_m1 = (unsigned short)((unsigned int)((unsigned short)(1 << (((((*((__be32 *)wqc + 8U) << 24) | ((*((__be32 *)wqc + 8U) << 8) & 16711680U)) | ((*((__be32 *)wqc + 8U) >> 8) & 65280U)) | (*((__be32 *)wqc + 8U) >> 24)) & 31U))) + 65535U);
  else {
    __u32 tmp_0;
    
#line 74 
    tmp_0 = __fswab32(*((__be32 *)wqc + 8U));
    
#line 74 
    wq->sz_m1 = (unsigned short)((unsigned int)((unsigned short)(1 << (tmp_0 & 31U))) + 65535U);
  }
  
#line 76 
  err = mlx5_db_alloc(mdev,& wq_ctrl->db);
  
#line 77 
  if (err != 0) {
    struct task_struct *tmp_1;
    
#line 78 
    ;
    
#line 78 
    tmp_1 = get_current();
    
#line 78 
    ;
    
#line 78 
    printk("\001",(char *)(& mdev->priv.name),"mlx5_wq_cyc_create",78,tmp_1->pid,err);
    
#line 79 
    __retres = err;
    
#line 79 
    goto return_label;
  }
  else ;
  
#line 82 
  ;
  
#line 82 
  tmp_2 = mlx5_wq_cyc_get_byte_size(wq);
  
#line 82 
  ;
  
#line 82 
  err = mlx5_buf_alloc(mdev,(int)tmp_2,& wq_ctrl->buf);
  
#line 83 
  if (err != 0) {
    struct task_struct *tmp_3;
    
#line 84 
    ;
    
#line 84 
    tmp_3 = get_current();
    
#line 84 
    ;
    
#line 84 
    printk("\001",(char *)(& mdev->priv.name),"mlx5_wq_cyc_create",84,tmp_3->pid,err);
    
#line 85 
    goto err_db_free;
  }
  else ;
  
#line 88 
  wq->buf = wq_ctrl->buf.direct.buf;
  
#line 89 
  wq->db = wq_ctrl->db.db;
  
#line 91 
  wq_ctrl->mdev = mdev;
  
#line 93 
  __retres = 0;
  
#line 93 
  goto return_label;
  err_db_free: 
#line 95 
  ;
  
#line 96 
  mlx5_db_free(mdev,& wq_ctrl->db);
  
#line 98 
  __retres = err;
  return_label: 
#line 98 
                return __retres;
}


#line 101  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/wq.c"
int mlx5_cqwq_create(struct mlx5_core_dev *mdev, struct mlx5_wq_param *param, void *cqc, struct mlx5_cqwq *wq, struct mlx5_wq_ctrl *wq_ctrl)
{
  int __retres;
  int err;
  u32 tmp_2;
  
#line 107 
  if (0 != 0) 
#line 107 
              wq->log_stride = (unsigned char)(((unsigned int)((unsigned char)(((((*((__be32 *)cqc) << 24) | ((*((__be32 *)cqc) << 8) & 16711680U)) | ((*((__be32 *)cqc) >> 8) & 65280U)) | (*((__be32 *)cqc) >> 24)) >> 21UL)) & 7U) + 6U);
  else {
    __u32 tmp;
    
#line 107 
    tmp = __fswab32(*((__be32 *)cqc));
    
#line 107 
    wq->log_stride = (unsigned char)(((unsigned int)((unsigned char)(tmp >> 21UL)) & 7U) + 6U);
  }
  
#line 108 
  if (0 != 0) 
#line 108 
              wq->log_sz = (unsigned char)((unsigned int)((unsigned char)(((((*((__be32 *)cqc + 3U) << 24) | ((*((__be32 *)cqc + 3U) << 8) & 16711680U)) | ((*((__be32 *)cqc + 3U) >> 8) & 65280U)) | (*((__be32 *)cqc + 3U) >> 24)) >> 24UL)) & 31U);
  else {
    __u32 tmp_0;
    
#line 108 
    tmp_0 = __fswab32(*((__be32 *)cqc + 3U));
    
#line 108 
    wq->log_sz = (unsigned char)((unsigned int)((unsigned char)(tmp_0 >> 24UL)) & 31U);
  }
  
#line 109 
  wq->sz_m1 = (unsigned int)((1 << (int)wq->log_sz) + -1);
  
#line 111 
  err = mlx5_db_alloc(mdev,& wq_ctrl->db);
  
#line 112 
  if (err != 0) {
    struct task_struct *tmp_1;
    
#line 113 
    ;
    
#line 113 
    tmp_1 = get_current();
    
#line 113 
    ;
    
#line 113 
    printk("\001",(char *)(& mdev->priv.name),"mlx5_cqwq_create",113,tmp_1->pid,err);
    
#line 114 
    __retres = err;
    
#line 114 
    goto return_label;
  }
  else ;
  
#line 117 
  ;
  
#line 117 
  tmp_2 = mlx5_cqwq_get_byte_size(wq);
  
#line 117 
  ;
  
#line 117 
  err = mlx5_buf_alloc(mdev,(int)tmp_2,& wq_ctrl->buf);
  
#line 118 
  if (err != 0) {
    struct task_struct *tmp_3;
    
#line 119 
    ;
    
#line 119 
    tmp_3 = get_current();
    
#line 119 
    ;
    
#line 119 
    printk("\001",(char *)(& mdev->priv.name),"mlx5_cqwq_create",119,tmp_3->pid,err);
    
#line 120 
    goto err_db_free;
  }
  else ;
  
#line 123 
  wq->buf = wq_ctrl->buf.direct.buf;
  
#line 124 
  wq->db = wq_ctrl->db.db;
  
#line 126 
  wq_ctrl->mdev = mdev;
  
#line 128 
  __retres = 0;
  
#line 128 
  goto return_label;
  err_db_free: 
#line 130 
  ;
  
#line 131 
  mlx5_db_free(mdev,& wq_ctrl->db);
  
#line 133 
  __retres = err;
  return_label: 
#line 133 
                return __retres;
}


#line 136  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/wq.c"
int mlx5_wq_ll_create(struct mlx5_core_dev *mdev, struct mlx5_wq_param *param, void *wqc, struct mlx5_wq_ll *wq, struct mlx5_wq_ctrl *wq_ctrl)
{
  int __retres;
  struct mlx5_wqe_srq_next_seg *next_seg;
  int err;
  int i;
  u32 tmp_2;
  
#line 144 
  if (0 != 0) 
#line 144 
              wq->log_stride = (unsigned char)((unsigned int)((unsigned char)(((((*((__be32 *)wqc + 8U) << 24) | ((*((__be32 *)wqc + 8U) << 8) & 16711680U)) | ((*((__be32 *)wqc + 8U) >> 8) & 65280U)) | (*((__be32 *)wqc + 8U) >> 24)) >> 16UL)) & 15U);
  else {
    __u32 tmp;
    
#line 144 
    tmp = __fswab32(*((__be32 *)wqc + 8U));
    
#line 144 
    wq->log_stride = (unsigned char)((unsigned int)((unsigned char)(tmp >> 16UL)) & 15U);
  }
  
#line 145 
  if (0 != 0) 
#line 145 
              wq->sz_m1 = (unsigned short)((unsigned int)((unsigned short)(1 << (((((*((__be32 *)wqc + 8U) << 24) | ((*((__be32 *)wqc + 8U) << 8) & 16711680U)) | ((*((__be32 *)wqc + 8U) >> 8) & 65280U)) | (*((__be32 *)wqc + 8U) >> 24)) & 31U))) + 65535U);
  else {
    __u32 tmp_0;
    
#line 145 
    tmp_0 = __fswab32(*((__be32 *)wqc + 8U));
    
#line 145 
    wq->sz_m1 = (unsigned short)((unsigned int)((unsigned short)(1 << (tmp_0 & 31U))) + 65535U);
  }
  
#line 147 
  err = mlx5_db_alloc(mdev,& wq_ctrl->db);
  
#line 148 
  if (err != 0) {
    struct task_struct *tmp_1;
    
#line 149 
    ;
    
#line 149 
    tmp_1 = get_current();
    
#line 149 
    ;
    
#line 149 
    printk("\001",(char *)(& mdev->priv.name),"mlx5_wq_ll_create",149,tmp_1->pid,err);
    
#line 150 
    __retres = err;
    
#line 150 
    goto return_label;
  }
  else ;
  
#line 153 
  ;
  
#line 153 
  tmp_2 = mlx5_wq_ll_get_byte_size(wq);
  
#line 153 
  ;
  
#line 153 
  err = mlx5_buf_alloc(mdev,(int)tmp_2,& wq_ctrl->buf);
  
#line 154 
  if (err != 0) {
    struct task_struct *tmp_3;
    
#line 155 
    ;
    
#line 155 
    tmp_3 = get_current();
    
#line 155 
    ;
    
#line 155 
    printk("\001",(char *)(& mdev->priv.name),"mlx5_wq_ll_create",155,tmp_3->pid,err);
    
#line 156 
    goto err_db_free;
  }
  else ;
  
#line 159 
  wq->buf = wq_ctrl->buf.direct.buf;
  
#line 160 
  wq->db = wq_ctrl->db.db;
  
#line 162 
  i = 0;
  
#line 162 
  goto ldv_35028;
  ldv_35027: 
#line 163 
  ;
  
#line 163 
  next_seg = (struct mlx5_wqe_srq_next_seg *)mlx5_wq_ll_get_wqe(wq,(unsigned short)((int)((unsigned short)i)));
  
#line 164 
  if (0 != 0) 
#line 164 
              next_seg->next_wqe_index = (unsigned short)((unsigned int)((int)((unsigned int)((unsigned short)i) + 1U) << 8) | (((unsigned int)((unsigned short)i) + 1U) >> 8)); else 
                                                                    
#line 164 
                                                                    next_seg->next_wqe_index = __fswab16((unsigned short)((int)((unsigned int)((unsigned short)i) + 1U)));
  
#line 162 
  i += 1;
  ldv_35028: 
#line 163 
  ;
  
#line 162 
  if ((int)wq->sz_m1 > i) 
#line 164 
                          goto ldv_35027; else 
#line 167 
                                               goto ldv_35029;
  ldv_35029: 
#line 168 
  ;
  
#line 166 
  next_seg = (struct mlx5_wqe_srq_next_seg *)mlx5_wq_ll_get_wqe(wq,(unsigned short)((int)((unsigned short)i)));
  
#line 167 
  wq->tail_next = & next_seg->next_wqe_index;
  
#line 169 
  wq_ctrl->mdev = mdev;
  
#line 171 
  __retres = 0;
  
#line 171 
  goto return_label;
  err_db_free: 
#line 173 
  ;
  
#line 174 
  mlx5_db_free(mdev,& wq_ctrl->db);
  
#line 176 
  __retres = err;
  return_label: 
#line 176 
                return __retres;
}


#line 179  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/wq.c"
void mlx5_wq_destroy(struct mlx5_wq_ctrl *wq_ctrl)
{
  
#line 181 
  mlx5_buf_free(wq_ctrl->mdev,& wq_ctrl->buf);
  
#line 182 
  mlx5_db_free(wq_ctrl->mdev,& wq_ctrl->db);
  
#line 183 
  return;
}


#line 581  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/slab.h"
static void *kzalloc_9(size_t size, gfp_t flags);


#line 702  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/driver.h"
int mlx5_core_mad_ifc(struct mlx5_core_dev *dev, void const *inb, void *outb, u16 opmod, u8 port);


#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/mad.c"
int mlx5_core_mad_ifc(struct mlx5_core_dev *dev, void const *inb, void *outb, u16 opmod, u8 port)
{
  int __retres;
  int err;
  
#line 42 
  struct mlx5_mad_ifc_mbox_in *in = (struct mlx5_mad_ifc_mbox_in *)0;
  
#line 43 
  struct mlx5_mad_ifc_mbox_out *out = (struct mlx5_mad_ifc_mbox_out *)0;
  
#line 46 
  in = (struct mlx5_mad_ifc_mbox_in *)kzalloc_9(272UL,208U);
  
#line 47 
  if (in == (struct mlx5_mad_ifc_mbox_in *)0) {
    
#line 48 
    __retres = -12;
    
#line 48 
    goto return_label;
  }
  else ;
  
#line 50 
  out = (struct mlx5_mad_ifc_mbox_out *)kzalloc_9(272UL,208U);
  
#line 51 
  if (out == (struct mlx5_mad_ifc_mbox_out *)0) {
    
#line 52 
    err = -12;
    
#line 53 
    goto out;
  }
  else ;
  
#line 56 
  in->hdr.opcode = (unsigned short)3333U;
  
#line 57 
  if (0 != 0) 
#line 57 
              in->hdr.opmod = (unsigned short)(((int)opmod << 8) | ((int)opmod >> 8)); else 
                                                                    
#line 57 
                                                                    in->hdr.opmod = __fswab16((unsigned short)((int)opmod));
  
#line 58 
  in->port = port;
  
#line 60 
  memcpy((void *)(& in->data),inb,256UL);
  
#line 62 
  err = mlx5_cmd_exec(dev,(void *)in,272,(void *)out,272);
  
#line 63 
  if (err != 0) 
#line 64 
                goto out; else ;
  
#line 66 
  if ((unsigned int)out->hdr.status != 0U) {
    
#line 67 
    err = mlx5_cmd_status_to_err(& out->hdr);
    
#line 68 
    goto out;
  }
  else ;
  
#line 71 
  memcpy(outb,(void const *)(& out->data),256UL);
  out: 
#line 73 
  ;
  
#line 74 
  kfree((void const *)out);
  
#line 75 
  kfree((void const *)in);
  
#line 76 
  __retres = err;
  return_label: 
#line 76 
                return __retres;
}


#line 78  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/mad.c"
static char const __kstrtab_mlx5_core_mad_ifc[18U] = {(char)'m', (char)'l', (char)'x', (char)'5', (char)'_', (char)'c', (char)'o', (char)'r', (char)'e', (char)'_', (char)'m', (char)'a', (char)'d', (char)'_', (char)'i', (char)'f', (char)'c', (char)'\000'};

#line 78 
struct kernel_symbol const __ksymtab_mlx5_core_mad_ifc;


#line 78  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/mad.c"
struct kernel_symbol const __ksymtab_mlx5_core_mad_ifc = {.value = (unsigned long)(& mlx5_core_mad_ifc), .name = (char const *)(& __kstrtab_mlx5_core_mad_ifc)};

#line 497  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_mad.c.aux"
static void *kzalloc_9(size_t size, gfp_t flags)
{
  void *tmp;
  
#line 500 
  tmp = ldv_kzalloc(size,flags);
  
#line 500 
  return tmp;
}


#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/string_64.h"
char *strcpy(char *, char const *);


#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/string.h"
size_t strlcpy(char *, char const *, size_t);


#line 37  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_en_ethtool.c.aux"
static void ldv_mutex_lock_73_1(struct mutex *ldv_func_arg1);


#line 41 
static void ldv_mutex_lock_75_1(struct mutex *ldv_func_arg1);


#line 45 
static void ldv_mutex_lock_77_0(struct mutex *ldv_func_arg1);


#line 193  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mutex.h"
static void ldv_mutex_unlock_74_1(struct mutex *ldv_func_arg1);


#line 197 
static void ldv_mutex_unlock_76_0(struct mutex *ldv_func_arg1);


#line 201 
static void ldv_mutex_unlock_78_0(struct mutex *ldv_func_arg1);


#line 113  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
__inline static void ethtool_cmd_speed_set(struct ethtool_cmd *ep, __u32 speed)
{
  
#line 117 
  ep->speed = (unsigned short)speed;
  
#line 118 
  ep->speed_hi = (unsigned short)(speed >> 16);
  
#line 119 
  return;
}


#line 121  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
__inline static __u32 ethtool_cmd_speed(struct ethtool_cmd const *ep)
{
  __u32 __retres;
  
#line 123 
  __retres = (unsigned int)(((int)ep->speed_hi << 16) | (int)ep->speed);
  
#line 123 
  return __retres;
}


#line 85  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ethtool.h"
u32 ethtool_op_get_link(struct net_device *);


#line 3038  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static bool netif_carrier_ok(struct net_device const *dev)
{
  bool __retres;
  int tmp;
  
#line 3040 
  tmp = constant_test_bit(2L,(unsigned long const volatile *)(& dev->state));
  
#line 3040 
  __retres = (_Bool)(tmp == 0);
  
#line 3040 
  return __retres;
}


#line 3834 
void netdev_info(struct net_device const *, char const * , ...);


#line 742  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/driver.h"
int mlx5_query_port_ptys(struct mlx5_core_dev *dev, u32 *ptys, int ptys_size, int proto_mask, u8 local_port);


#line 744 
int mlx5_query_port_proto_cap(struct mlx5_core_dev *dev, u32 *proto_cap, int proto_mask);


#line 746 
int mlx5_query_port_proto_admin(struct mlx5_core_dev *dev, u32 *proto_admin, int proto_mask);


#line 753 
int mlx5_set_port_proto(struct mlx5_core_dev *dev, u32 proto_admin, int proto_mask);


#line 755 
int mlx5_set_port_status(struct mlx5_core_dev *dev, enum mlx5_port_status status);


#line 757 
int mlx5_query_port_status(struct mlx5_core_dev *dev, u8 *status);


#line 64  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en.h"
static char const vport_strings[31U][32U] = {{(char)'r', (char)'x', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s', (char)'\000'}, {(char)'r', (char)'x', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s', (char)'\000'}, {(char)'t', (char)'x', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s', (char)'\000'}, {(char)'t', (char)'x', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s', (char)'\000'}, {(char)'r', (char)'x', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s', (char)'\000'}, {(char)'r', (char)'x', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s', (char)'\000'}, {(char)'t', (char)'x', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s', (char)'\000'}, {(char)'t', (char)'x', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s', (char)'\000'}, {(char)'r', (char)'x', (char)'_', (char)'u', (char)'n', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s', (char)'\000'}, {(char)'r', (char)'x', (char)'_', (char)'u', (char)'n', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s', (char)'\000'}, {(char)'t', (char)'x', (char)'_', (char)'u', (char)'n', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s', (char)'\000'}, {(char)'t', (char)'x', (char)'_', (char)'u', (char)'n', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s', (char)'\000'}, {(char)'r', (char)'x', (char)'_', (char)'m', (char)'u', (char)'l', (char)'t', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s', (char)'\000'}, {(char)'r', (char)'x', (char)'_', (char)'m', (char)'u', (char)'l', (char)'t', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s', (char)'\000'}, {(char)'t', (char)'x', (char)'_', (char)'m', (char)'u', (char)'l', (char)'t', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s', (char)'\000'}, {(char)'t', (char)'x', (char)'_', (char)'m', (char)'u', (char)'l', (char)'t', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s', (char)'\000'}, {(char)'r', (char)'x', (char)'_', (char)'b', (char)'r', (char)'o', (char)'a', (char)'d', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s', (char)'\000'}, {(char)'r', (char)'x', (char)'_', (char)'b', (char)'r', (char)'o', (char)'a', (char)'d', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s', (char)'\000'}, {(char)'t', (char)'x', (char)'_', (char)'b', (char)'r', (char)'o', (char)'a', (char)'d', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s', (char)'\000'}, {(char)'t', (char)'x', (char)'_', (char)'b', (char)'r', (char)'o', (char)'a', (char)'d', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s', (char)'\000'}, {(char)'t', (char)'s', (char)'o', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s', (char)'\000'}, {(char)'t', (char)'s', (char)'o', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s', (char)'\000'}, {(char)'l', (char)'r', (char)'o', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s', (char)'\000'}, {(char)'l', (char)'r', (char)'o', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s', (char)'\000'}, {(char)'r', (char)'x', (char)'_', (char)'c', (char)'s', (char)'u', (char)'m', (char)'_', (char)'g', (char)'o', (char)'o', (char)'d', (char)'\000'}, {(char)'r', (char)'x', (char)'_', (char)'c', (char)'s', (char)'u', (char)'m', (char)'_', (char)'n', (char)'o', (char)'n', (char)'e', (char)'\000'}, {(char)'t', (char)'x', (char)'_', (char)'c', (char)'s', (char)'u', (char)'m', (char)'_', (char)'o', (char)'f', (char)'f', (char)'l', (char)'o', (char)'a', (char)'d', (char)'\000'}, {(char)'t', (char)'x', (char)'_', (char)'q', (char)'u', (char)'e', (char)'u', (char)'e', (char)'_', (char)'s', (char)'t', (char)'o', (char)'p', (char)'p', (char)'e', (char)'d', (char)'\000'}, {(char)'t', (char)'x', (char)'_', (char)'q', (char)'u', (char)'e', (char)'u', (char)'e', (char)'_', (char)'w', (char)'a', (char)'k', (char)'e', (char)'\000'}, {(char)'t', (char)'x', (char)'_', (char)'q', (char)'u', (char)'e', (char)'u', (char)'e', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'p', (char)'e', (char)'d', (char)'\000'}, {(char)'r', (char)'x', (char)'_', (char)'w', (char)'q', (char)'e', (char)'_', (char)'e', (char)'r', (char)'r', (char)'\000'}};

#line 140  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en.h"
static char const rq_stats_strings[5U][32U] = {{(char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s', (char)'\000'}, {(char)'c', (char)'s', (char)'u', (char)'m', (char)'_', (char)'n', (char)'o', (char)'n', (char)'e', (char)'\000'}, {(char)'l', (char)'r', (char)'o', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s', (char)'\000'}, {(char)'l', (char)'r', (char)'o', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s', (char)'\000'}, {(char)'w', (char)'q', (char)'e', (char)'_', (char)'e', (char)'r', (char)'r', (char)'\000'}};

#line 157  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en.h"
static char const sq_stats_strings[8U][32U] = {{(char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s', (char)'\000'}, {(char)'t', (char)'s', (char)'o', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s', (char)'\000'}, {(char)'t', (char)'s', (char)'o', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s', (char)'\000'}, {(char)'c', (char)'s', (char)'u', (char)'m', (char)'_', (char)'o', (char)'f', (char)'f', (char)'l', (char)'o', (char)'a', (char)'d', (char)'_', (char)'n', (char)'o', (char)'n', (char)'e', (char)'\000'}, {(char)'s', (char)'t', (char)'o', (char)'p', (char)'p', (char)'e', (char)'d', (char)'\000'}, {(char)'w', (char)'a', (char)'k', (char)'e', (char)'\000'}, {(char)'d', (char)'r', (char)'o', (char)'p', (char)'p', (char)'e', (char)'d', (char)'\000'}, {(char)'n', (char)'o', (char)'p', (char)'\000'}};

#line 35  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_ethtool.c"
static void mlx5e_get_drvinfo(struct net_device *dev, struct ethtool_drvinfo *drvinfo)
{
  u16 tmp_0;
  u16 tmp_1;
  u16 tmp_2;
  char const *tmp_3;
  
#line 38 
  struct mlx5e_priv *priv = netdev_priv((struct net_device const *)dev);
  
#line 39 
  struct mlx5_core_dev *mdev = priv->mdev;
  
#line 41 
  strlcpy((char *)(& drvinfo->driver),"mlx5_core",32UL);
  
#line 42 
  strlcpy((char *)(& drvinfo->version),"3.0-1",32UL);
  
#line 46 
  tmp_0 = fw_rev_sub(mdev);
  
#line 46 
  tmp_1 = fw_rev_min(mdev);
  
#line 46 
  tmp_2 = fw_rev_maj(mdev);
  
#line 44 
  ;
  
#line 44 
  snprintf((char *)(& drvinfo->fw_version),32UL,"%d.%d.%d",(int)tmp_2,(int)tmp_1,(int)tmp_0);
  
#line 47 
  tmp_3 = pci_name((struct pci_dev const *)mdev->pdev);
  
#line 47 
  ;
  
#line 47 
  strlcpy((char *)(& drvinfo->bus_info),tmp_3,32UL);
  
#line 48 
  return;
}


#line 55  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_ethtool.c"
static struct __anonstruct_ptys2ethtool_table_5411 const ptys2ethtool_table[32U] = {{.supported = 131072U, .advertised = 131072U, .speed = 1000U}, {.supported = 131072U, .advertised = 131072U, .speed = 1000U}, {.supported = 262144U, .advertised = 262144U, .speed = 10000U}, {.supported = 262144U, .advertised = 262144U, .speed = 10000U}, {.supported = 524288U, .advertised = 524288U, .speed = 10000U}, {.supported = 4194304U, .advertised = 4194304U, .speed = 20000U}, {.supported = 16777216U, .advertised = 16777216U, .speed = 40000U}, {.supported = 8388608U, .advertised = 8388608U, .speed = 40000U}, {.supported = 134217728U, .advertised = 134217728U, .speed = 56000U}, [12] = {.supported = 524288U, .advertised = 524288U, .speed = 10000U}, {.supported = 524288U, .advertised = 524288U, .speed = 10000U}, {.supported = 524288U, .advertised = 524288U, .speed = 10000U}, {.supported = 33554432U, .advertised = 33554432U, .speed = 40000U}, {.supported = 67108864U, .advertised = 67108864U, .speed = 40000U}, [20] = {.supported = 0U, .advertised = 0U, .speed = 100000U}, {.supported = 0U, .advertised = 0U, .speed = 100000U}, {.supported = 0U, .advertised = 0U, .speed = 100000U}, {.supported = 0U, .advertised = 0U, .speed = 100000U}, {.supported = 0U, .advertised = 0U, .speed = 100U}, {.supported = 8U, .advertised = 8U, .speed = 100U}, {.supported = 4096U, .advertised = 4096U, .speed = 1000U}, {.supported = 0U, .advertised = 0U, .speed = 25000U}, {.supported = 0U, .advertised = 0U, .speed = 25000U}, {.supported = 0U, .advertised = 0U, .speed = 25000U}, {.supported = 0U, .advertised = 0U, .speed = 50000U}, {.supported = 0U, .advertised = 0U, .speed = 50000U}};

#line 168  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_ethtool.c"
static int mlx5e_get_sset_count(struct net_device *dev, int sset)
{
  int __retres;
  
#line 170 
  struct mlx5e_priv *priv = netdev_priv((struct net_device const *)dev);
  
#line 172 
  switch (sset) {
    case 1: 
#line 173 
    ;
    
#line 175 
    __retres = ((int)priv->params.num_channels * 5 + 31) + ((int)priv->params.num_channels * priv->num_tc) * 8;
    
#line 175 
    goto return_label;
    default: 
#line 179 
    ;
    
#line 180 
    __retres = -95;
    
#line 180 
    goto return_label;
  }
  return_label: 
#line 172 
                return __retres;
}


#line 184  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_ethtool.c"
static void mlx5e_get_strings(struct net_device *dev, uint32_t stringset, uint8_t *data)
{
  int i;
  int j;
  int tc;
  
#line 187 
  int idx = 0;
  
#line 188 
  struct mlx5e_priv *priv = netdev_priv((struct net_device const *)dev);
  
#line 190 
  switch (stringset) {
    int tmp_0;
    int tmp_1;
    int tmp_2;
    case (uint32_t)2: 
#line 191 
    ;
    
#line 192 
    goto ldv_54825;
    case (uint32_t)0: 
#line 194 
    ;
    
#line 195 
    goto ldv_54825;
    case (uint32_t)1: 
#line 197 
    ;
    
#line 199 
    i = 0;
    
#line 199 
    goto ldv_54829;
    ldv_54828: 
#line 200 
    ;
    
#line 200 
    ;
    
#line 200 
    tmp_0 = idx;
    
#line 200 
    idx += 1;
    
#line 200 
    ;
    
#line 200 
    strcpy((char *)(data + tmp_0 * 32),(char const *)(& vport_strings[i]));
    
#line 199 
    i += 1;
    ldv_54829: 
#line 200 
    ;
    
#line 199 
    if (i <= 30) 
#line 201 
                 goto ldv_54828; else 
#line 204 
                                      goto ldv_54830;
    ldv_54830: 
#line 205 
    ;
    
#line 204 
    i = 0;
    
#line 204 
    goto ldv_54835;
    ldv_54834: 
#line 205 
    ;
    
#line 205 
    j = 0;
    
#line 205 
    goto ldv_54832;
    ldv_54831: 
#line 206 
    ;
    
#line 206 
    ;
    
#line 206 
    ;
    
#line 206 
    tmp_1 = idx;
    
#line 206 
    idx += 1;
    
#line 206 
    ;
    
#line 206 
    sprintf((char *)(data + tmp_1 * 32),"rx%d_%s",i,(char const *)(& rq_stats_strings[j]));
    
#line 205 
    j += 1;
    ldv_54832: 
#line 206 
    ;
    
#line 205 
    if (j <= 4) 
#line 207 
                goto ldv_54831; else 
#line 210 
                                     goto ldv_54833;
    ldv_54833: 
#line 211 
    ;
    
#line 204 
    i += 1;
    ldv_54835: 
#line 205 
    ;
    
#line 204 
    if ((int)priv->params.num_channels > i) 
#line 206 
                                            goto ldv_54834; else 
#line 209 
                                                                 goto ldv_54836;
    ldv_54836: 
#line 210 
    ;
    
#line 209 
    i = 0;
    
#line 209 
    goto ldv_54844;
    ldv_54843: 
#line 210 
    ;
    
#line 210 
    tc = 0;
    
#line 210 
    goto ldv_54841;
    ldv_54840: 
#line 211 
    ;
    
#line 211 
    j = 0;
    
#line 211 
    goto ldv_54838;
    ldv_54837: 
#line 212 
    ;
    
#line 212 
    ;
    
#line 212 
    ;
    
#line 212 
    ;
    
#line 212 
    tmp_2 = idx;
    
#line 212 
    idx += 1;
    
#line 212 
    ;
    
#line 212 
    sprintf((char *)(data + tmp_2 * 32),"tx%d_%d_%s",i,tc,(char const *)(& sq_stats_strings[j]));
    
#line 211 
    j += 1;
    ldv_54838: 
#line 212 
    ;
    
#line 211 
    if (j <= 7) 
#line 213 
                goto ldv_54837; else 
#line 216 
                                     goto ldv_54839;
    ldv_54839: 
#line 217 
    ;
    
#line 210 
    tc += 1;
    ldv_54841: 
#line 211 
    ;
    
#line 210 
    if (priv->num_tc > tc) 
#line 212 
                           goto ldv_54840; else 
#line 215 
                                                goto ldv_54842;
    ldv_54842: 
#line 216 
    ;
    
#line 209 
    i += 1;
    ldv_54844: 
#line 210 
    ;
    
#line 209 
    if ((int)priv->params.num_channels > i) 
#line 211 
                                            goto ldv_54843; else 
#line 214 
                                                                 goto ldv_54845;
    ldv_54845: 
#line 215 
    ;
    
#line 216 
    goto ldv_54825;
  }
  ldv_54825: 
#line 218 
  ;
  
#line 219 
  return;
}


#line 220  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_ethtool.c"
static void mlx5e_get_ethtool_stats(struct net_device *dev, struct ethtool_stats *stats, u64 *data)
{
  int i;
  int j;
  int tc;
  int tmp_0;
  int tmp_1;
  int tmp_2;
  int tmp_3;
  int tmp_4;
  int tmp_5;
  
#line 223 
  struct mlx5e_priv *priv = netdev_priv((struct net_device const *)dev);
  
#line 224 
  int idx = 0;
  
#line 226 
  if (data == (u64 *)0ULL) 
#line 227 
                           goto return_label; else ;
  
#line 229 
  ldv_mutex_lock_73_1(& priv->state_lock);
  
#line 230 
  tmp_0 = constant_test_bit(1L,(unsigned long const volatile *)(& priv->state));
  
#line 230 
  if (tmp_0 != 0) 
#line 231 
                  mlx5e_update_stats(priv); else ;
  
#line 232 
  ldv_mutex_unlock_74_1(& priv->state_lock);
  
#line 234 
  i = 0;
  
#line 234 
  goto ldv_54857;
  ldv_54856: 
#line 235 
  ;
  
#line 235 
  tmp_1 = idx;
  
#line 235 
  idx += 1;
  
#line 235 
  *(data + tmp_1) = *((u64 *)(& priv->stats.vport) + i);
  
#line 234 
  i += 1;
  ldv_54857: 
#line 235 
  ;
  
#line 234 
  if (i <= 30) 
#line 236 
               goto ldv_54856; else 
#line 239 
                                    goto ldv_54858;
  ldv_54858: 
#line 240 
  ;
  
#line 238 
  i = 0;
  
#line 238 
  goto ldv_54863;
  ldv_54862: 
#line 239 
  ;
  
#line 239 
  j = 0;
  
#line 239 
  goto ldv_54860;
  ldv_54859: 
#line 240 
  ;
  
#line 240 
  tmp_2 = idx;
  
#line 240 
  idx += 1;
  
#line 240 
  tmp_3 = constant_test_bit(1L,(unsigned long const volatile *)(& priv->state));
  
#line 240 
  if (tmp_3 != 0) 
#line 240 
                  *(data + tmp_2) = *((u64 *)(& (*(priv->channel + i))->rq.stats) + j); else 
                                                                    
#line 240 
                                                                    *(data + tmp_2) = 0ULL;
  
#line 239 
  j += 1;
  ldv_54860: 
#line 240 
  ;
  
#line 239 
  if (j <= 4) 
#line 241 
              goto ldv_54859; else 
#line 244 
                                   goto ldv_54861;
  ldv_54861: 
#line 245 
  ;
  
#line 238 
  i += 1;
  ldv_54863: 
#line 239 
  ;
  
#line 238 
  if ((int)priv->params.num_channels > i) 
#line 240 
                                          goto ldv_54862; else 
#line 243 
                                                               goto ldv_54864;
  ldv_54864: 
#line 244 
  ;
  
#line 244 
  i = 0;
  
#line 244 
  goto ldv_54872;
  ldv_54871: 
#line 245 
  ;
  
#line 245 
  tc = 0;
  
#line 245 
  goto ldv_54869;
  ldv_54868: 
#line 246 
  ;
  
#line 246 
  j = 0;
  
#line 246 
  goto ldv_54866;
  ldv_54865: 
#line 247 
  ;
  
#line 247 
  tmp_4 = idx;
  
#line 247 
  idx += 1;
  
#line 247 
  tmp_5 = constant_test_bit(1L,(unsigned long const volatile *)(& priv->state));
  
#line 247 
  if (tmp_5 != 0) 
#line 247 
                  *(data + tmp_4) = *((u64 *)(& (*(priv->channel + i))->sq[tc].stats) + j); else 
                                                                    
#line 247 
                                                                    *(data + tmp_4) = 0ULL;
  
#line 246 
  j += 1;
  ldv_54866: 
#line 247 
  ;
  
#line 246 
  if (j <= 7) 
#line 248 
              goto ldv_54865; else 
#line 251 
                                   goto ldv_54867;
  ldv_54867: 
#line 252 
  ;
  
#line 245 
  tc += 1;
  ldv_54869: 
#line 246 
  ;
  
#line 245 
  if (priv->num_tc > tc) 
#line 247 
                         goto ldv_54868; else 
#line 250 
                                              goto ldv_54870;
  ldv_54870: 
#line 251 
  ;
  
#line 244 
  i += 1;
  ldv_54872: 
#line 245 
  ;
  
#line 244 
  if ((int)priv->params.num_channels > i) 
#line 246 
                                          goto ldv_54871; else 
#line 249 
                                                               goto ldv_54873;
  ldv_54873: 
#line 250 
  ;
  return_label: 
#line 251 
                return;
}


#line 252  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_ethtool.c"
static void mlx5e_get_ringparam(struct net_device *dev, struct ethtool_ringparam *param)
{
  
#line 255 
  struct mlx5e_priv *priv = netdev_priv((struct net_device const *)dev);
  
#line 257 
  param->rx_max_pending = 8192U;
  
#line 258 
  param->tx_max_pending = 8192U;
  
#line 259 
  param->rx_pending = (unsigned int)(1 << (int)priv->params.log_rq_size);
  
#line 260 
  param->tx_pending = (unsigned int)(1 << (int)priv->params.log_sq_size);
  
#line 261 
  return;
}


#line 263  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_ethtool.c"
static int mlx5e_set_ringparam(struct net_device *dev, struct ethtool_ringparam *param)
{
  int __retres;
  struct mlx5e_params new_params;
  u16 min_rx_wqes;
  u8 log_rq_size;
  u8 log_sq_size;
  int tmp_71;
  unsigned long tmp_70;
  int tmp_143;
  unsigned long tmp_142;
  int tmp_145;
  
#line 266 
  struct mlx5e_priv *priv = netdev_priv((struct net_device const *)dev);
  
#line 271 
  int err = 0;
  
#line 273 
  if (param->rx_jumbo_pending != 0U) {
    
#line 274 
    netdev_info((struct net_device const *)dev,"%s: rx_jumbo_pending not supported\n","mlx5e_set_ringparam");
    
#line 276 
    __retres = -22;
    
#line 276 
    goto return_label;
  }
  else ;
  
#line 278 
  if (param->rx_mini_pending != 0U) {
    
#line 279 
    netdev_info((struct net_device const *)dev,"%s: rx_mini_pending not supported\n","mlx5e_set_ringparam");
    
#line 281 
    __retres = -22;
    
#line 281 
    goto return_label;
  }
  else ;
  
#line 283 
  if (param->rx_pending <= 127U) {
    
#line 284 
    netdev_info((struct net_device const *)dev,"%s: rx_pending (%d) < min (%d)\n","mlx5e_set_ringparam",param->rx_pending,128);
    
#line 287 
    __retres = -22;
    
#line 287 
    goto return_label;
  }
  else ;
  
#line 289 
  if (param->rx_pending > 8192U) {
    
#line 290 
    netdev_info((struct net_device const *)dev,"%s: rx_pending (%d) > max (%d)\n","mlx5e_set_ringparam",param->rx_pending,8192);
    
#line 293 
    __retres = -22;
    
#line 293 
    goto return_label;
  }
  else ;
  
#line 295 
  if (param->tx_pending <= 127U) {
    
#line 296 
    netdev_info((struct net_device const *)dev,"%s: tx_pending (%d) < min (%d)\n","mlx5e_set_ringparam",param->tx_pending,128);
    
#line 299 
    __retres = -22;
    
#line 299 
    goto return_label;
  }
  else ;
  
#line 301 
  if (param->tx_pending > 8192U) {
    
#line 302 
    netdev_info((struct net_device const *)dev,"%s: tx_pending (%d) > max (%d)\n","mlx5e_set_ringparam",param->tx_pending,8192);
    
#line 305 
    __retres = -22;
    
#line 305 
    goto return_label;
  }
  else ;
  
#line 308 
  if (0 != 0) {
    unsigned long tmp_68;
    
#line 308 
    if (param->rx_pending != 1U) {
      unsigned long tmp_67;
      
#line 308 
      if (0 != 0) {
        unsigned long tmp_65;
        
#line 308 
        if (param->rx_pending == 1U) {
          int tmp_0;
          
#line 308 
          tmp_0 = ____ilog2_NaN();
          
#line 308 
          tmp_65 = 1UL << (tmp_0 + 1);
        }
        else {
          unsigned long tmp_64;
          
#line 308 
          if (((unsigned long long)(param->rx_pending + 4294967295U) & 4611686018427387904ULL) == 0ULL) {
            unsigned long tmp_63;
            
#line 308 
            if (((unsigned long long)(param->rx_pending + 4294967295U) & 2305843009213693952ULL) == 0ULL) {
              unsigned long tmp_62;
              
#line 308 
              if (((unsigned long long)(param->rx_pending + 4294967295U) & 1152921504606846976ULL) == 0ULL) {
                unsigned long tmp_61;
                
#line 308 
                if (((unsigned long long)(param->rx_pending + 4294967295U) & 576460752303423488ULL) == 0ULL) {
                  unsigned long tmp_60;
                  
#line 308 
                  if (((unsigned long long)(param->rx_pending + 4294967295U) & 288230376151711744ULL) == 0ULL) {
                    unsigned long tmp_59;
                    
#line 308 
                    if (((unsigned long long)(param->rx_pending + 4294967295U) & 144115188075855872ULL) == 0ULL) {
                      unsigned long tmp_58;
                      
#line 308 
                      if (((unsigned long long)(param->rx_pending + 4294967295U) & 72057594037927936ULL) == 0ULL) {
                        unsigned long tmp_57;
                        
#line 308 
                        if (((unsigned long long)(param->rx_pending + 4294967295U) & 36028797018963968ULL) == 0ULL) {
                          unsigned long tmp_56;
                          
#line 308 
                          if (((unsigned long long)(param->rx_pending + 4294967295U) & 18014398509481984ULL) == 0ULL) {
                            unsigned long tmp_55;
                            
#line 308 
                            if (((unsigned long long)(param->rx_pending + 4294967295U) & 9007199254740992ULL) == 0ULL) {
                              unsigned long tmp_54;
                              
#line 308 
                              if (((unsigned long long)(param->rx_pending + 4294967295U) & 4503599627370496ULL) == 0ULL) {
                                unsigned long tmp_53;
                                
#line 308 
                                if (((unsigned long long)(param->rx_pending + 4294967295U) & 2251799813685248ULL) == 0ULL) {
                                  unsigned long tmp_52;
                                  
#line 308 
                                  if (((unsigned long long)(param->rx_pending + 4294967295U) & 1125899906842624ULL) == 0ULL) {
                                    unsigned long tmp_51;
                                    
#line 308 
                                    if (((unsigned long long)(param->rx_pending + 4294967295U) & 562949953421312ULL) == 0ULL) {
                                      unsigned long tmp_50;
                                      
#line 308 
                                      if (((unsigned long long)(param->rx_pending + 4294967295U) & 281474976710656ULL) == 0ULL) {
                                        unsigned long tmp_49;
                                        
#line 308 
                                        if (((unsigned long long)(param->rx_pending + 4294967295U) & 140737488355328ULL) == 0ULL) {
                                          unsigned long tmp_48;
                                          
#line 308 
                                          if (((unsigned long long)(param->rx_pending + 4294967295U) & 70368744177664ULL) == 0ULL) {
                                            unsigned long tmp_47;
                                            
#line 308 
                                            if (((unsigned long long)(param->rx_pending + 4294967295U) & 35184372088832ULL) == 0ULL) {
                                              unsigned long tmp_46;
                                              
#line 308 
                                              if (((unsigned long long)(param->rx_pending + 4294967295U) & 17592186044416ULL) == 0ULL) {
                                                unsigned long tmp_45;
                                                
#line 308 
                                                if (((unsigned long long)(param->rx_pending + 4294967295U) & 8796093022208ULL) == 0ULL) {
                                                  unsigned long tmp_44;
                                                  
#line 308 
                                                  if (((unsigned long long)(param->rx_pending + 4294967295U) & 4398046511104ULL) == 0ULL) {
                                                    unsigned long tmp_43;
                                                    
#line 308 
                                                    if (((unsigned long long)(param->rx_pending + 4294967295U) & 2199023255552ULL) == 0ULL) {
                                                      unsigned long tmp_42;
                                                      
#line 308 
                                                      if (((unsigned long long)(param->rx_pending + 4294967295U) & 1099511627776ULL) == 0ULL) {
                                                        unsigned long tmp_41;
                                                        
#line 308 
                                                        if (((unsigned long long)(param->rx_pending + 4294967295U) & 549755813888ULL) == 0ULL) {
                                                          unsigned long tmp_40;
                                                          
#line 308 
                                                          if (((unsigned long long)(param->rx_pending + 4294967295U) & 274877906944ULL) == 0ULL) {
                                                            unsigned long tmp_39;
                                                            
#line 308 
                                                            if (((unsigned long long)(param->rx_pending + 4294967295U) & 137438953472ULL) == 0ULL) {
                                                              unsigned long tmp_38;
                                                              
#line 308 
                                                              if (((unsigned long long)(param->rx_pending + 4294967295U) & 68719476736ULL) == 0ULL) {
                                                                unsigned long tmp_37;
                                                                
#line 308 
                                                                if (((unsigned long long)(param->rx_pending + 4294967295U) & 34359738368ULL) == 0ULL) {
                                                                  unsigned long tmp_36;
                                                                  
#line 308 
                                                                  if (
                                                                    ((unsigned long long)(param->rx_pending + 4294967295U) & 17179869184ULL) == 0ULL) {
                                                                    unsigned long tmp_35;
                                                                    
#line 308 
                                                                    if (
                                                                    ((unsigned long long)(param->rx_pending + 4294967295U) & 8589934592ULL) == 0ULL) {
                                                                    unsigned long tmp_34;
                                                                    
#line 308 
                                                                    if (
                                                                    ((unsigned long long)(param->rx_pending + 4294967295U) & 4294967296ULL) == 0ULL) {
                                                                    unsigned long tmp_33;
                                                                    
#line 308 
                                                                    if (
                                                                    param->rx_pending + 4294967295U >= (__u32)0) {
                                                                    unsigned long tmp_32;
                                                                    
#line 308 
                                                                    if (
                                                                    ((unsigned long long)(param->rx_pending + 4294967295U) & 1073741824ULL) == 0ULL) {
                                                                    unsigned long tmp_31;
                                                                    
#line 308 
                                                                    if (
                                                                    ((unsigned long long)(param->rx_pending + 4294967295U) & 536870912ULL) == 0ULL) {
                                                                    unsigned long tmp_30;
                                                                    
#line 308 
                                                                    if (
                                                                    ((unsigned long long)(param->rx_pending + 4294967295U) & 268435456ULL) == 0ULL) {
                                                                    unsigned long tmp_29;
                                                                    
#line 308 
                                                                    if (
                                                                    ((unsigned long long)(param->rx_pending + 4294967295U) & 134217728ULL) == 0ULL) {
                                                                    unsigned long tmp_28;
                                                                    
#line 308 
                                                                    if (
                                                                    ((unsigned long long)(param->rx_pending + 4294967295U) & 67108864ULL) == 0ULL) {
                                                                    unsigned long tmp_27;
                                                                    
#line 308 
                                                                    if (
                                                                    ((unsigned long long)(param->rx_pending + 4294967295U) & 33554432ULL) == 0ULL) {
                                                                    unsigned long tmp_26;
                                                                    
#line 308 
                                                                    if (
                                                                    ((unsigned long long)(param->rx_pending + 4294967295U) & 16777216ULL) == 0ULL) {
                                                                    unsigned long tmp_25;
                                                                    
#line 308 
                                                                    if (
                                                                    ((unsigned long long)(param->rx_pending + 4294967295U) & 8388608ULL) == 0ULL) {
                                                                    unsigned long tmp_24;
                                                                    
#line 308 
                                                                    if (
                                                                    ((unsigned long long)(param->rx_pending + 4294967295U) & 4194304ULL) == 0ULL) {
                                                                    unsigned long tmp_23;
                                                                    
#line 308 
                                                                    if (
                                                                    ((unsigned long long)(param->rx_pending + 4294967295U) & 2097152ULL) == 0ULL) {
                                                                    unsigned long tmp_22;
                                                                    
#line 308 
                                                                    if (
                                                                    ((unsigned long long)(param->rx_pending + 4294967295U) & 1048576ULL) == 0ULL) {
                                                                    unsigned long tmp_21;
                                                                    
#line 308 
                                                                    if (
                                                                    ((unsigned long long)(param->rx_pending + 4294967295U) & 524288ULL) == 0ULL) {
                                                                    unsigned long tmp_20;
                                                                    
#line 308 
                                                                    if (
                                                                    ((unsigned long long)(param->rx_pending + 4294967295U) & 262144ULL) == 0ULL) {
                                                                    unsigned long tmp_19;
                                                                    
#line 308 
                                                                    if (
                                                                    ((unsigned long long)(param->rx_pending + 4294967295U) & 131072ULL) == 0ULL) {
                                                                    unsigned long tmp_18;
                                                                    
#line 308 
                                                                    if (
                                                                    ((unsigned long long)(param->rx_pending + 4294967295U) & 65536ULL) == 0ULL) {
                                                                    unsigned long tmp_17;
                                                                    
#line 308 
                                                                    if (
                                                                    ((unsigned long long)(param->rx_pending + 4294967295U) & 32768ULL) == 0ULL) {
                                                                    unsigned long tmp_16;
                                                                    
#line 308 
                                                                    if (
                                                                    ((unsigned long long)(param->rx_pending + 4294967295U) & 16384ULL) == 0ULL) {
                                                                    unsigned long tmp_15;
                                                                    
#line 308 
                                                                    if (
                                                                    ((unsigned long long)(param->rx_pending + 4294967295U) & 8192ULL) == 0ULL) {
                                                                    unsigned long tmp_14;
                                                                    
#line 308 
                                                                    if (
                                                                    ((unsigned long long)(param->rx_pending + 4294967295U) & 4096ULL) == 0ULL) {
                                                                    unsigned long tmp_13;
                                                                    
#line 308 
                                                                    if (
                                                                    ((unsigned long long)(param->rx_pending + 4294967295U) & 2048ULL) == 0ULL) {
                                                                    unsigned long tmp_12;
                                                                    
#line 308 
                                                                    if (
                                                                    ((unsigned long long)(param->rx_pending + 4294967295U) & 1024ULL) == 0ULL) {
                                                                    unsigned long tmp_11;
                                                                    
#line 308 
                                                                    if (
                                                                    ((unsigned long long)(param->rx_pending + 4294967295U) & 512ULL) == 0ULL) {
                                                                    unsigned long tmp_10;
                                                                    
#line 308 
                                                                    if (
                                                                    ((unsigned long long)(param->rx_pending + 4294967295U) & 256ULL) == 0ULL) {
                                                                    unsigned long tmp_9;
                                                                    
#line 308 
                                                                    if (
                                                                    ((unsigned long long)(param->rx_pending + 4294967295U) & 128ULL) == 0ULL) {
                                                                    unsigned long tmp_8;
                                                                    
#line 308 
                                                                    if (
                                                                    ((unsigned long long)(param->rx_pending + 4294967295U) & 64ULL) == 0ULL) {
                                                                    unsigned long tmp_7;
                                                                    
#line 308 
                                                                    if (
                                                                    ((unsigned long long)(param->rx_pending + 4294967295U) & 32ULL) == 0ULL) {
                                                                    unsigned long tmp_6;
                                                                    
#line 308 
                                                                    if (
                                                                    ((unsigned long long)(param->rx_pending + 4294967295U) & 16ULL) == 0ULL) {
                                                                    unsigned long tmp_5;
                                                                    
#line 308 
                                                                    if (
                                                                    ((unsigned long long)(param->rx_pending + 4294967295U) & 8ULL) == 0ULL) {
                                                                    unsigned long tmp_4;
                                                                    
#line 308 
                                                                    if (
                                                                    ((unsigned long long)(param->rx_pending + 4294967295U) & 4ULL) == 0ULL) {
                                                                    unsigned long tmp_3;
                                                                    
#line 308 
                                                                    if (
                                                                    ((unsigned long long)(param->rx_pending + 4294967295U) & 2ULL) == 0ULL) {
                                                                    unsigned long tmp_2;
                                                                    
#line 308 
                                                                    if (
                                                                    ((unsigned long long)(param->rx_pending + 4294967295U) & 1ULL) == 0ULL) {
                                                                    int tmp_1;
                                                                    
#line 308 
                                                                    tmp_1 = ____ilog2_NaN();
                                                                    
#line 308 
                                                                    tmp_2 = 1UL << (tmp_1 + 1);
                                                                    }
                                                                    else 
                                                                    
#line 308 
                                                                    tmp_2 = 2UL;
                                                                    
#line 308 
                                                                    tmp_3 = tmp_2;
                                                                    }
                                                                    else 
                                                                    
#line 308 
                                                                    tmp_3 = 4UL;
                                                                    
#line 308 
                                                                    tmp_4 = tmp_3;
                                                                    }
                                                                    else 
                                                                    
#line 308 
                                                                    tmp_4 = 8UL;
                                                                    
#line 308 
                                                                    tmp_5 = tmp_4;
                                                                    }
                                                                    else 
                                                                    
#line 308 
                                                                    tmp_5 = 16UL;
                                                                    
#line 308 
                                                                    tmp_6 = tmp_5;
                                                                    }
                                                                    else 
                                                                    
#line 308 
                                                                    tmp_6 = 32UL;
                                                                    
#line 308 
                                                                    tmp_7 = tmp_6;
                                                                    }
                                                                    else 
                                                                    
#line 308 
                                                                    tmp_7 = 64UL;
                                                                    
#line 308 
                                                                    tmp_8 = tmp_7;
                                                                    }
                                                                    else 
                                                                    
#line 308 
                                                                    tmp_8 = 128UL;
                                                                    
#line 308 
                                                                    tmp_9 = tmp_8;
                                                                    }
                                                                    else 
                                                                    
#line 308 
                                                                    tmp_9 = 256UL;
                                                                    
#line 308 
                                                                    tmp_10 = tmp_9;
                                                                    }
                                                                    else 
                                                                    
#line 308 
                                                                    tmp_10 = 512UL;
                                                                    
#line 308 
                                                                    tmp_11 = tmp_10;
                                                                    }
                                                                    else 
                                                                    
#line 308 
                                                                    tmp_11 = 1024UL;
                                                                    
#line 308 
                                                                    tmp_12 = tmp_11;
                                                                    }
                                                                    else 
                                                                    
#line 308 
                                                                    tmp_12 = 2048UL;
                                                                    
#line 308 
                                                                    tmp_13 = tmp_12;
                                                                    }
                                                                    else 
                                                                    
#line 308 
                                                                    tmp_13 = 4096UL;
                                                                    
#line 308 
                                                                    tmp_14 = tmp_13;
                                                                    }
                                                                    else 
                                                                    
#line 308 
                                                                    tmp_14 = 8192UL;
                                                                    
#line 308 
                                                                    tmp_15 = tmp_14;
                                                                    }
                                                                    else 
                                                                    
#line 308 
                                                                    tmp_15 = 16384UL;
                                                                    
#line 308 
                                                                    tmp_16 = tmp_15;
                                                                    }
                                                                    else 
                                                                    
#line 308 
                                                                    tmp_16 = 32768UL;
                                                                    
#line 308 
                                                                    tmp_17 = tmp_16;
                                                                    }
                                                                    else 
                                                                    
#line 308 
                                                                    tmp_17 = 65536UL;
                                                                    
#line 308 
                                                                    tmp_18 = tmp_17;
                                                                    }
                                                                    else 
                                                                    
#line 308 
                                                                    tmp_18 = 131072UL;
                                                                    
#line 308 
                                                                    tmp_19 = tmp_18;
                                                                    }
                                                                    else 
                                                                    
#line 308 
                                                                    tmp_19 = 262144UL;
                                                                    
#line 308 
                                                                    tmp_20 = tmp_19;
                                                                    }
                                                                    else 
                                                                    
#line 308 
                                                                    tmp_20 = 524288UL;
                                                                    
#line 308 
                                                                    tmp_21 = tmp_20;
                                                                    }
                                                                    else 
                                                                    
#line 308 
                                                                    tmp_21 = 1048576UL;
                                                                    
#line 308 
                                                                    tmp_22 = tmp_21;
                                                                    }
                                                                    else 
                                                                    
#line 308 
                                                                    tmp_22 = 2097152UL;
                                                                    
#line 308 
                                                                    tmp_23 = tmp_22;
                                                                    }
                                                                    else 
                                                                    
#line 308 
                                                                    tmp_23 = 4194304UL;
                                                                    
#line 308 
                                                                    tmp_24 = tmp_23;
                                                                    }
                                                                    else 
                                                                    
#line 308 
                                                                    tmp_24 = 8388608UL;
                                                                    
#line 308 
                                                                    tmp_25 = tmp_24;
                                                                    }
                                                                    else 
                                                                    
#line 308 
                                                                    tmp_25 = 16777216UL;
                                                                    
#line 308 
                                                                    tmp_26 = tmp_25;
                                                                    }
                                                                    else 
                                                                    
#line 308 
                                                                    tmp_26 = 33554432UL;
                                                                    
#line 308 
                                                                    tmp_27 = tmp_26;
                                                                    }
                                                                    else 
                                                                    
#line 308 
                                                                    tmp_27 = 67108864UL;
                                                                    
#line 308 
                                                                    tmp_28 = tmp_27;
                                                                    }
                                                                    else 
                                                                    
#line 308 
                                                                    tmp_28 = 134217728UL;
                                                                    
#line 308 
                                                                    tmp_29 = tmp_28;
                                                                    }
                                                                    else 
                                                                    
#line 308 
                                                                    tmp_29 = 268435456UL;
                                                                    
#line 308 
                                                                    tmp_30 = tmp_29;
                                                                    }
                                                                    else 
                                                                    
#line 308 
                                                                    tmp_30 = 536870912UL;
                                                                    
#line 308 
                                                                    tmp_31 = tmp_30;
                                                                    }
                                                                    else 
                                                                    
#line 308 
                                                                    tmp_31 = 1073741824UL;
                                                                    
#line 308 
                                                                    tmp_32 = tmp_31;
                                                                    }
                                                                    else 
                                                                    
#line 308 
                                                                    tmp_32 = 2147483648UL;
                                                                    
#line 308 
                                                                    tmp_33 = tmp_32;
                                                                    }
                                                                    else 
                                                                    
#line 308 
                                                                    tmp_33 = 4294967296UL;
                                                                    
#line 308 
                                                                    tmp_34 = tmp_33;
                                                                    }
                                                                    else 
                                                                    
#line 308 
                                                                    tmp_34 = 8589934592UL;
                                                                    
#line 308 
                                                                    tmp_35 = tmp_34;
                                                                    }
                                                                    else 
                                                                    
#line 308 
                                                                    tmp_35 = 17179869184UL;
                                                                    
#line 308 
                                                                    tmp_36 = tmp_35;
                                                                  }
                                                                  else 
                                                                    
#line 308 
                                                                    tmp_36 = 34359738368UL;
                                                                  
#line 308 
                                                                  tmp_37 = tmp_36;
                                                                }
                                                                else 
                                                                  
#line 308 
                                                                  tmp_37 = 68719476736UL;
                                                                
#line 308 
                                                                tmp_38 = tmp_37;
                                                              }
                                                              else 
#line 308 
                                                                   tmp_38 = 137438953472UL;
                                                              
#line 308 
                                                              tmp_39 = tmp_38;
                                                            }
                                                            else 
#line 308 
                                                                 tmp_39 = 274877906944UL;
                                                            
#line 308 
                                                            tmp_40 = tmp_39;
                                                          }
                                                          else 
#line 308 
                                                               tmp_40 = 549755813888UL;
                                                          
#line 308 
                                                          tmp_41 = tmp_40;
                                                        }
                                                        else 
#line 308 
                                                             tmp_41 = 1099511627776UL;
                                                        
#line 308 
                                                        tmp_42 = tmp_41;
                                                      }
                                                      else 
#line 308 
                                                           tmp_42 = 2199023255552UL;
                                                      
#line 308 
                                                      tmp_43 = tmp_42;
                                                    }
                                                    else 
#line 308 
                                                         tmp_43 = 4398046511104UL;
                                                    
#line 308 
                                                    tmp_44 = tmp_43;
                                                  }
                                                  else 
#line 308 
                                                       tmp_44 = 8796093022208UL;
                                                  
#line 308 
                                                  tmp_45 = tmp_44;
                                                }
                                                else 
#line 308 
                                                     tmp_45 = 17592186044416UL;
                                                
#line 308 
                                                tmp_46 = tmp_45;
                                              }
                                              else 
#line 308 
                                                   tmp_46 = 35184372088832UL;
                                              
#line 308 
                                              tmp_47 = tmp_46;
                                            }
                                            else 
#line 308 
                                                 tmp_47 = 70368744177664UL;
                                            
#line 308 
                                            tmp_48 = tmp_47;
                                          }
                                          else 
#line 308 
                                               tmp_48 = 140737488355328UL;
                                          
#line 308 
                                          tmp_49 = tmp_48;
                                        }
                                        else 
#line 308 
                                             tmp_49 = 281474976710656UL;
                                        
#line 308 
                                        tmp_50 = tmp_49;
                                      }
                                      else 
#line 308 
                                           tmp_50 = 562949953421312UL;
                                      
#line 308 
                                      tmp_51 = tmp_50;
                                    }
                                    else 
#line 308 
                                         tmp_51 = 1125899906842624UL;
                                    
#line 308 
                                    tmp_52 = tmp_51;
                                  }
                                  else 
#line 308 
                                       tmp_52 = 2251799813685248UL;
                                  
#line 308 
                                  tmp_53 = tmp_52;
                                }
                                else 
#line 308 
                                     tmp_53 = 4503599627370496UL;
                                
#line 308 
                                tmp_54 = tmp_53;
                              }
                              else 
#line 308 
                                   tmp_54 = 9007199254740992UL;
                              
#line 308 
                              tmp_55 = tmp_54;
                            }
                            else 
#line 308 
                                 tmp_55 = 18014398509481984UL;
                            
#line 308 
                            tmp_56 = tmp_55;
                          }
                          else 
#line 308 
                               tmp_56 = 36028797018963968UL;
                          
#line 308 
                          tmp_57 = tmp_56;
                        }
                        else 
#line 308 
                             tmp_57 = 72057594037927936UL;
                        
#line 308 
                        tmp_58 = tmp_57;
                      }
                      else 
#line 308 
                           tmp_58 = 144115188075855872UL;
                      
#line 308 
                      tmp_59 = tmp_58;
                    }
                    else 
#line 308 
                         tmp_59 = 288230376151711744UL;
                    
#line 308 
                    tmp_60 = tmp_59;
                  }
                  else 
#line 308 
                       tmp_60 = 576460752303423488UL;
                  
#line 308 
                  tmp_61 = tmp_60;
                }
                else 
#line 308 
                     tmp_61 = 1152921504606846976UL;
                
#line 308 
                tmp_62 = tmp_61;
              }
              else 
#line 308 
                   tmp_62 = 2305843009213693952UL;
              
#line 308 
              tmp_63 = tmp_62;
            }
            else 
#line 308 
                 tmp_63 = 4611686018427387904UL;
            
#line 308 
            tmp_64 = tmp_63;
          }
          else 
#line 308 
               tmp_64 = 9223372036854775808UL;
          
#line 308 
          tmp_65 = tmp_64;
        }
        
#line 308 
        tmp_67 = tmp_65;
      }
      else {
        int tmp_66;
        
#line 308 
        tmp_66 = __ilog2_u32(param->rx_pending + 4294967295U);
        
#line 308 
        tmp_67 = 1UL << (tmp_66 + 1);
      }
      
#line 308 
      tmp_68 = tmp_67;
    }
    else 
#line 308 
         tmp_68 = 1UL;
    
#line 308 
    tmp_70 = tmp_68;
  }
  else 
#line 308 
       tmp_70 = __roundup_pow_of_two((unsigned long)param->rx_pending);
  
#line 308 
  tmp_71 = __ilog2_u64((unsigned long long)tmp_70);
  
#line 308 
  log_rq_size = (unsigned char)tmp_71;
  
#line 309 
  if (0 != 0) {
    unsigned long tmp_140;
    
#line 309 
    if (param->tx_pending != 1U) {
      unsigned long tmp_139;
      
#line 309 
      if (0 != 0) {
        unsigned long tmp_137;
        
#line 309 
        if (param->tx_pending == 1U) {
          int tmp_72;
          
#line 309 
          tmp_72 = ____ilog2_NaN();
          
#line 309 
          tmp_137 = 1UL << (tmp_72 + 1);
        }
        else {
          unsigned long tmp_136;
          
#line 309 
          if (((unsigned long long)(param->tx_pending + 4294967295U) & 4611686018427387904ULL) == 0ULL) {
            unsigned long tmp_135;
            
#line 309 
            if (((unsigned long long)(param->tx_pending + 4294967295U) & 2305843009213693952ULL) == 0ULL) {
              unsigned long tmp_134;
              
#line 309 
              if (((unsigned long long)(param->tx_pending + 4294967295U) & 1152921504606846976ULL) == 0ULL) {
                unsigned long tmp_133;
                
#line 309 
                if (((unsigned long long)(param->tx_pending + 4294967295U) & 576460752303423488ULL) == 0ULL) {
                  unsigned long tmp_132;
                  
#line 309 
                  if (((unsigned long long)(param->tx_pending + 4294967295U) & 288230376151711744ULL) == 0ULL) {
                    unsigned long tmp_131;
                    
#line 309 
                    if (((unsigned long long)(param->tx_pending + 4294967295U) & 144115188075855872ULL) == 0ULL) {
                      unsigned long tmp_130;
                      
#line 309 
                      if (((unsigned long long)(param->tx_pending + 4294967295U) & 72057594037927936ULL) == 0ULL) {
                        unsigned long tmp_129;
                        
#line 309 
                        if (((unsigned long long)(param->tx_pending + 4294967295U) & 36028797018963968ULL) == 0ULL) {
                          unsigned long tmp_128;
                          
#line 309 
                          if (((unsigned long long)(param->tx_pending + 4294967295U) & 18014398509481984ULL) == 0ULL) {
                            unsigned long tmp_127;
                            
#line 309 
                            if (((unsigned long long)(param->tx_pending + 4294967295U) & 9007199254740992ULL) == 0ULL) {
                              unsigned long tmp_126;
                              
#line 309 
                              if (((unsigned long long)(param->tx_pending + 4294967295U) & 4503599627370496ULL) == 0ULL) {
                                unsigned long tmp_125;
                                
#line 309 
                                if (((unsigned long long)(param->tx_pending + 4294967295U) & 2251799813685248ULL) == 0ULL) {
                                  unsigned long tmp_124;
                                  
#line 309 
                                  if (((unsigned long long)(param->tx_pending + 4294967295U) & 1125899906842624ULL) == 0ULL) {
                                    unsigned long tmp_123;
                                    
#line 309 
                                    if (((unsigned long long)(param->tx_pending + 4294967295U) & 562949953421312ULL) == 0ULL) {
                                      unsigned long tmp_122;
                                      
#line 309 
                                      if (((unsigned long long)(param->tx_pending + 4294967295U) & 281474976710656ULL) == 0ULL) {
                                        unsigned long tmp_121;
                                        
#line 309 
                                        if (((unsigned long long)(param->tx_pending + 4294967295U) & 140737488355328ULL) == 0ULL) {
                                          unsigned long tmp_120;
                                          
#line 309 
                                          if (((unsigned long long)(param->tx_pending + 4294967295U) & 70368744177664ULL) == 0ULL) {
                                            unsigned long tmp_119;
                                            
#line 309 
                                            if (((unsigned long long)(param->tx_pending + 4294967295U) & 35184372088832ULL) == 0ULL) {
                                              unsigned long tmp_118;
                                              
#line 309 
                                              if (((unsigned long long)(param->tx_pending + 4294967295U) & 17592186044416ULL) == 0ULL) {
                                                unsigned long tmp_117;
                                                
#line 309 
                                                if (((unsigned long long)(param->tx_pending + 4294967295U) & 8796093022208ULL) == 0ULL) {
                                                  unsigned long tmp_116;
                                                  
#line 309 
                                                  if (((unsigned long long)(param->tx_pending + 4294967295U) & 4398046511104ULL) == 0ULL) {
                                                    unsigned long tmp_115;
                                                    
#line 309 
                                                    if (((unsigned long long)(param->tx_pending + 4294967295U) & 2199023255552ULL) == 0ULL) {
                                                      unsigned long tmp_114;
                                                      
#line 309 
                                                      if (((unsigned long long)(param->tx_pending + 4294967295U) & 1099511627776ULL) == 0ULL) {
                                                        unsigned long tmp_113;
                                                        
#line 309 
                                                        if (((unsigned long long)(param->tx_pending + 4294967295U) & 549755813888ULL) == 0ULL) {
                                                          unsigned long tmp_112;
                                                          
#line 309 
                                                          if (((unsigned long long)(param->tx_pending + 4294967295U) & 274877906944ULL) == 0ULL) {
                                                            unsigned long tmp_111;
                                                            
#line 309 
                                                            if (((unsigned long long)(param->tx_pending + 4294967295U) & 137438953472ULL) == 0ULL) {
                                                              unsigned long tmp_110;
                                                              
#line 309 
                                                              if (((unsigned long long)(param->tx_pending + 4294967295U) & 68719476736ULL) == 0ULL) {
                                                                unsigned long tmp_109;
                                                                
#line 309 
                                                                if (((unsigned long long)(param->tx_pending + 4294967295U) & 34359738368ULL) == 0ULL) {
                                                                  unsigned long tmp_108;
                                                                  
#line 309 
                                                                  if (
                                                                    ((unsigned long long)(param->tx_pending + 4294967295U) & 17179869184ULL) == 0ULL) {
                                                                    unsigned long tmp_107;
                                                                    
#line 309 
                                                                    if (
                                                                    ((unsigned long long)(param->tx_pending + 4294967295U) & 8589934592ULL) == 0ULL) {
                                                                    unsigned long tmp_106;
                                                                    
#line 309 
                                                                    if (
                                                                    ((unsigned long long)(param->tx_pending + 4294967295U) & 4294967296ULL) == 0ULL) {
                                                                    unsigned long tmp_105;
                                                                    
#line 309 
                                                                    if (
                                                                    param->tx_pending + 4294967295U >= (__u32)0) {
                                                                    unsigned long tmp_104;
                                                                    
#line 309 
                                                                    if (
                                                                    ((unsigned long long)(param->tx_pending + 4294967295U) & 1073741824ULL) == 0ULL) {
                                                                    unsigned long tmp_103;
                                                                    
#line 309 
                                                                    if (
                                                                    ((unsigned long long)(param->tx_pending + 4294967295U) & 536870912ULL) == 0ULL) {
                                                                    unsigned long tmp_102;
                                                                    
#line 309 
                                                                    if (
                                                                    ((unsigned long long)(param->tx_pending + 4294967295U) & 268435456ULL) == 0ULL) {
                                                                    unsigned long tmp_101;
                                                                    
#line 309 
                                                                    if (
                                                                    ((unsigned long long)(param->tx_pending + 4294967295U) & 134217728ULL) == 0ULL) {
                                                                    unsigned long tmp_100;
                                                                    
#line 309 
                                                                    if (
                                                                    ((unsigned long long)(param->tx_pending + 4294967295U) & 67108864ULL) == 0ULL) {
                                                                    unsigned long tmp_99;
                                                                    
#line 309 
                                                                    if (
                                                                    ((unsigned long long)(param->tx_pending + 4294967295U) & 33554432ULL) == 0ULL) {
                                                                    unsigned long tmp_98;
                                                                    
#line 309 
                                                                    if (
                                                                    ((unsigned long long)(param->tx_pending + 4294967295U) & 16777216ULL) == 0ULL) {
                                                                    unsigned long tmp_97;
                                                                    
#line 309 
                                                                    if (
                                                                    ((unsigned long long)(param->tx_pending + 4294967295U) & 8388608ULL) == 0ULL) {
                                                                    unsigned long tmp_96;
                                                                    
#line 309 
                                                                    if (
                                                                    ((unsigned long long)(param->tx_pending + 4294967295U) & 4194304ULL) == 0ULL) {
                                                                    unsigned long tmp_95;
                                                                    
#line 309 
                                                                    if (
                                                                    ((unsigned long long)(param->tx_pending + 4294967295U) & 2097152ULL) == 0ULL) {
                                                                    unsigned long tmp_94;
                                                                    
#line 309 
                                                                    if (
                                                                    ((unsigned long long)(param->tx_pending + 4294967295U) & 1048576ULL) == 0ULL) {
                                                                    unsigned long tmp_93;
                                                                    
#line 309 
                                                                    if (
                                                                    ((unsigned long long)(param->tx_pending + 4294967295U) & 524288ULL) == 0ULL) {
                                                                    unsigned long tmp_92;
                                                                    
#line 309 
                                                                    if (
                                                                    ((unsigned long long)(param->tx_pending + 4294967295U) & 262144ULL) == 0ULL) {
                                                                    unsigned long tmp_91;
                                                                    
#line 309 
                                                                    if (
                                                                    ((unsigned long long)(param->tx_pending + 4294967295U) & 131072ULL) == 0ULL) {
                                                                    unsigned long tmp_90;
                                                                    
#line 309 
                                                                    if (
                                                                    ((unsigned long long)(param->tx_pending + 4294967295U) & 65536ULL) == 0ULL) {
                                                                    unsigned long tmp_89;
                                                                    
#line 309 
                                                                    if (
                                                                    ((unsigned long long)(param->tx_pending + 4294967295U) & 32768ULL) == 0ULL) {
                                                                    unsigned long tmp_88;
                                                                    
#line 309 
                                                                    if (
                                                                    ((unsigned long long)(param->tx_pending + 4294967295U) & 16384ULL) == 0ULL) {
                                                                    unsigned long tmp_87;
                                                                    
#line 309 
                                                                    if (
                                                                    ((unsigned long long)(param->tx_pending + 4294967295U) & 8192ULL) == 0ULL) {
                                                                    unsigned long tmp_86;
                                                                    
#line 309 
                                                                    if (
                                                                    ((unsigned long long)(param->tx_pending + 4294967295U) & 4096ULL) == 0ULL) {
                                                                    unsigned long tmp_85;
                                                                    
#line 309 
                                                                    if (
                                                                    ((unsigned long long)(param->tx_pending + 4294967295U) & 2048ULL) == 0ULL) {
                                                                    unsigned long tmp_84;
                                                                    
#line 309 
                                                                    if (
                                                                    ((unsigned long long)(param->tx_pending + 4294967295U) & 1024ULL) == 0ULL) {
                                                                    unsigned long tmp_83;
                                                                    
#line 309 
                                                                    if (
                                                                    ((unsigned long long)(param->tx_pending + 4294967295U) & 512ULL) == 0ULL) {
                                                                    unsigned long tmp_82;
                                                                    
#line 309 
                                                                    if (
                                                                    ((unsigned long long)(param->tx_pending + 4294967295U) & 256ULL) == 0ULL) {
                                                                    unsigned long tmp_81;
                                                                    
#line 309 
                                                                    if (
                                                                    ((unsigned long long)(param->tx_pending + 4294967295U) & 128ULL) == 0ULL) {
                                                                    unsigned long tmp_80;
                                                                    
#line 309 
                                                                    if (
                                                                    ((unsigned long long)(param->tx_pending + 4294967295U) & 64ULL) == 0ULL) {
                                                                    unsigned long tmp_79;
                                                                    
#line 309 
                                                                    if (
                                                                    ((unsigned long long)(param->tx_pending + 4294967295U) & 32ULL) == 0ULL) {
                                                                    unsigned long tmp_78;
                                                                    
#line 309 
                                                                    if (
                                                                    ((unsigned long long)(param->tx_pending + 4294967295U) & 16ULL) == 0ULL) {
                                                                    unsigned long tmp_77;
                                                                    
#line 309 
                                                                    if (
                                                                    ((unsigned long long)(param->tx_pending + 4294967295U) & 8ULL) == 0ULL) {
                                                                    unsigned long tmp_76;
                                                                    
#line 309 
                                                                    if (
                                                                    ((unsigned long long)(param->tx_pending + 4294967295U) & 4ULL) == 0ULL) {
                                                                    unsigned long tmp_75;
                                                                    
#line 309 
                                                                    if (
                                                                    ((unsigned long long)(param->tx_pending + 4294967295U) & 2ULL) == 0ULL) {
                                                                    unsigned long tmp_74;
                                                                    
#line 309 
                                                                    if (
                                                                    ((unsigned long long)(param->tx_pending + 4294967295U) & 1ULL) == 0ULL) {
                                                                    int tmp_73;
                                                                    
#line 309 
                                                                    tmp_73 = ____ilog2_NaN();
                                                                    
#line 309 
                                                                    tmp_74 = 1UL << (tmp_73 + 1);
                                                                    }
                                                                    else 
                                                                    
#line 309 
                                                                    tmp_74 = 2UL;
                                                                    
#line 309 
                                                                    tmp_75 = tmp_74;
                                                                    }
                                                                    else 
                                                                    
#line 309 
                                                                    tmp_75 = 4UL;
                                                                    
#line 309 
                                                                    tmp_76 = tmp_75;
                                                                    }
                                                                    else 
                                                                    
#line 309 
                                                                    tmp_76 = 8UL;
                                                                    
#line 309 
                                                                    tmp_77 = tmp_76;
                                                                    }
                                                                    else 
                                                                    
#line 309 
                                                                    tmp_77 = 16UL;
                                                                    
#line 309 
                                                                    tmp_78 = tmp_77;
                                                                    }
                                                                    else 
                                                                    
#line 309 
                                                                    tmp_78 = 32UL;
                                                                    
#line 309 
                                                                    tmp_79 = tmp_78;
                                                                    }
                                                                    else 
                                                                    
#line 309 
                                                                    tmp_79 = 64UL;
                                                                    
#line 309 
                                                                    tmp_80 = tmp_79;
                                                                    }
                                                                    else 
                                                                    
#line 309 
                                                                    tmp_80 = 128UL;
                                                                    
#line 309 
                                                                    tmp_81 = tmp_80;
                                                                    }
                                                                    else 
                                                                    
#line 309 
                                                                    tmp_81 = 256UL;
                                                                    
#line 309 
                                                                    tmp_82 = tmp_81;
                                                                    }
                                                                    else 
                                                                    
#line 309 
                                                                    tmp_82 = 512UL;
                                                                    
#line 309 
                                                                    tmp_83 = tmp_82;
                                                                    }
                                                                    else 
                                                                    
#line 309 
                                                                    tmp_83 = 1024UL;
                                                                    
#line 309 
                                                                    tmp_84 = tmp_83;
                                                                    }
                                                                    else 
                                                                    
#line 309 
                                                                    tmp_84 = 2048UL;
                                                                    
#line 309 
                                                                    tmp_85 = tmp_84;
                                                                    }
                                                                    else 
                                                                    
#line 309 
                                                                    tmp_85 = 4096UL;
                                                                    
#line 309 
                                                                    tmp_86 = tmp_85;
                                                                    }
                                                                    else 
                                                                    
#line 309 
                                                                    tmp_86 = 8192UL;
                                                                    
#line 309 
                                                                    tmp_87 = tmp_86;
                                                                    }
                                                                    else 
                                                                    
#line 309 
                                                                    tmp_87 = 16384UL;
                                                                    
#line 309 
                                                                    tmp_88 = tmp_87;
                                                                    }
                                                                    else 
                                                                    
#line 309 
                                                                    tmp_88 = 32768UL;
                                                                    
#line 309 
                                                                    tmp_89 = tmp_88;
                                                                    }
                                                                    else 
                                                                    
#line 309 
                                                                    tmp_89 = 65536UL;
                                                                    
#line 309 
                                                                    tmp_90 = tmp_89;
                                                                    }
                                                                    else 
                                                                    
#line 309 
                                                                    tmp_90 = 131072UL;
                                                                    
#line 309 
                                                                    tmp_91 = tmp_90;
                                                                    }
                                                                    else 
                                                                    
#line 309 
                                                                    tmp_91 = 262144UL;
                                                                    
#line 309 
                                                                    tmp_92 = tmp_91;
                                                                    }
                                                                    else 
                                                                    
#line 309 
                                                                    tmp_92 = 524288UL;
                                                                    
#line 309 
                                                                    tmp_93 = tmp_92;
                                                                    }
                                                                    else 
                                                                    
#line 309 
                                                                    tmp_93 = 1048576UL;
                                                                    
#line 309 
                                                                    tmp_94 = tmp_93;
                                                                    }
                                                                    else 
                                                                    
#line 309 
                                                                    tmp_94 = 2097152UL;
                                                                    
#line 309 
                                                                    tmp_95 = tmp_94;
                                                                    }
                                                                    else 
                                                                    
#line 309 
                                                                    tmp_95 = 4194304UL;
                                                                    
#line 309 
                                                                    tmp_96 = tmp_95;
                                                                    }
                                                                    else 
                                                                    
#line 309 
                                                                    tmp_96 = 8388608UL;
                                                                    
#line 309 
                                                                    tmp_97 = tmp_96;
                                                                    }
                                                                    else 
                                                                    
#line 309 
                                                                    tmp_97 = 16777216UL;
                                                                    
#line 309 
                                                                    tmp_98 = tmp_97;
                                                                    }
                                                                    else 
                                                                    
#line 309 
                                                                    tmp_98 = 33554432UL;
                                                                    
#line 309 
                                                                    tmp_99 = tmp_98;
                                                                    }
                                                                    else 
                                                                    
#line 309 
                                                                    tmp_99 = 67108864UL;
                                                                    
#line 309 
                                                                    tmp_100 = tmp_99;
                                                                    }
                                                                    else 
                                                                    
#line 309 
                                                                    tmp_100 = 134217728UL;
                                                                    
#line 309 
                                                                    tmp_101 = tmp_100;
                                                                    }
                                                                    else 
                                                                    
#line 309 
                                                                    tmp_101 = 268435456UL;
                                                                    
#line 309 
                                                                    tmp_102 = tmp_101;
                                                                    }
                                                                    else 
                                                                    
#line 309 
                                                                    tmp_102 = 536870912UL;
                                                                    
#line 309 
                                                                    tmp_103 = tmp_102;
                                                                    }
                                                                    else 
                                                                    
#line 309 
                                                                    tmp_103 = 1073741824UL;
                                                                    
#line 309 
                                                                    tmp_104 = tmp_103;
                                                                    }
                                                                    else 
                                                                    
#line 309 
                                                                    tmp_104 = 2147483648UL;
                                                                    
#line 309 
                                                                    tmp_105 = tmp_104;
                                                                    }
                                                                    else 
                                                                    
#line 309 
                                                                    tmp_105 = 4294967296UL;
                                                                    
#line 309 
                                                                    tmp_106 = tmp_105;
                                                                    }
                                                                    else 
                                                                    
#line 309 
                                                                    tmp_106 = 8589934592UL;
                                                                    
#line 309 
                                                                    tmp_107 = tmp_106;
                                                                    }
                                                                    else 
                                                                    
#line 309 
                                                                    tmp_107 = 17179869184UL;
                                                                    
#line 309 
                                                                    tmp_108 = tmp_107;
                                                                  }
                                                                  else 
                                                                    
#line 309 
                                                                    tmp_108 = 34359738368UL;
                                                                  
#line 309 
                                                                  tmp_109 = tmp_108;
                                                                }
                                                                else 
                                                                  
#line 309 
                                                                  tmp_109 = 68719476736UL;
                                                                
#line 309 
                                                                tmp_110 = tmp_109;
                                                              }
                                                              else 
#line 309 
                                                                   tmp_110 = 137438953472UL;
                                                              
#line 309 
                                                              tmp_111 = tmp_110;
                                                            }
                                                            else 
#line 309 
                                                                 tmp_111 = 274877906944UL;
                                                            
#line 309 
                                                            tmp_112 = tmp_111;
                                                          }
                                                          else 
#line 309 
                                                               tmp_112 = 549755813888UL;
                                                          
#line 309 
                                                          tmp_113 = tmp_112;
                                                        }
                                                        else 
#line 309 
                                                             tmp_113 = 1099511627776UL;
                                                        
#line 309 
                                                        tmp_114 = tmp_113;
                                                      }
                                                      else 
#line 309 
                                                           tmp_114 = 2199023255552UL;
                                                      
#line 309 
                                                      tmp_115 = tmp_114;
                                                    }
                                                    else 
#line 309 
                                                         tmp_115 = 4398046511104UL;
                                                    
#line 309 
                                                    tmp_116 = tmp_115;
                                                  }
                                                  else 
#line 309 
                                                       tmp_116 = 8796093022208UL;
                                                  
#line 309 
                                                  tmp_117 = tmp_116;
                                                }
                                                else 
#line 309 
                                                     tmp_117 = 17592186044416UL;
                                                
#line 309 
                                                tmp_118 = tmp_117;
                                              }
                                              else 
#line 309 
                                                   tmp_118 = 35184372088832UL;
                                              
#line 309 
                                              tmp_119 = tmp_118;
                                            }
                                            else 
#line 309 
                                                 tmp_119 = 70368744177664UL;
                                            
#line 309 
                                            tmp_120 = tmp_119;
                                          }
                                          else 
#line 309 
                                               tmp_120 = 140737488355328UL;
                                          
#line 309 
                                          tmp_121 = tmp_120;
                                        }
                                        else 
#line 309 
                                             tmp_121 = 281474976710656UL;
                                        
#line 309 
                                        tmp_122 = tmp_121;
                                      }
                                      else 
#line 309 
                                           tmp_122 = 562949953421312UL;
                                      
#line 309 
                                      tmp_123 = tmp_122;
                                    }
                                    else 
#line 309 
                                         tmp_123 = 1125899906842624UL;
                                    
#line 309 
                                    tmp_124 = tmp_123;
                                  }
                                  else 
#line 309 
                                       tmp_124 = 2251799813685248UL;
                                  
#line 309 
                                  tmp_125 = tmp_124;
                                }
                                else 
#line 309 
                                     tmp_125 = 4503599627370496UL;
                                
#line 309 
                                tmp_126 = tmp_125;
                              }
                              else 
#line 309 
                                   tmp_126 = 9007199254740992UL;
                              
#line 309 
                              tmp_127 = tmp_126;
                            }
                            else 
#line 309 
                                 tmp_127 = 18014398509481984UL;
                            
#line 309 
                            tmp_128 = tmp_127;
                          }
                          else 
#line 309 
                               tmp_128 = 36028797018963968UL;
                          
#line 309 
                          tmp_129 = tmp_128;
                        }
                        else 
#line 309 
                             tmp_129 = 72057594037927936UL;
                        
#line 309 
                        tmp_130 = tmp_129;
                      }
                      else 
#line 309 
                           tmp_130 = 144115188075855872UL;
                      
#line 309 
                      tmp_131 = tmp_130;
                    }
                    else 
#line 309 
                         tmp_131 = 288230376151711744UL;
                    
#line 309 
                    tmp_132 = tmp_131;
                  }
                  else 
#line 309 
                       tmp_132 = 576460752303423488UL;
                  
#line 309 
                  tmp_133 = tmp_132;
                }
                else 
#line 309 
                     tmp_133 = 1152921504606846976UL;
                
#line 309 
                tmp_134 = tmp_133;
              }
              else 
#line 309 
                   tmp_134 = 2305843009213693952UL;
              
#line 309 
              tmp_135 = tmp_134;
            }
            else 
#line 309 
                 tmp_135 = 4611686018427387904UL;
            
#line 309 
            tmp_136 = tmp_135;
          }
          else 
#line 309 
               tmp_136 = 9223372036854775808UL;
          
#line 309 
          tmp_137 = tmp_136;
        }
        
#line 309 
        tmp_139 = tmp_137;
      }
      else {
        int tmp_138;
        
#line 309 
        tmp_138 = __ilog2_u32(param->tx_pending + 4294967295U);
        
#line 309 
        tmp_139 = 1UL << (tmp_138 + 1);
      }
      
#line 309 
      tmp_140 = tmp_139;
    }
    else 
#line 309 
         tmp_140 = 1UL;
    
#line 309 
    tmp_142 = tmp_140;
  }
  else 
#line 309 
       tmp_142 = __roundup_pow_of_two((unsigned long)param->tx_pending);
  
#line 309 
  tmp_143 = __ilog2_u64((unsigned long long)tmp_142);
  
#line 309 
  log_sq_size = (unsigned char)tmp_143;
  {
    int tmp_144;
    
#line 310 
    u16 __min1 = (unsigned short)((unsigned int)((unsigned short)param->rx_pending) + 65535U);
    
#line 310 
    u16 __min2 = (unsigned short)128U;
    
#line 310 
    if ((int)__min1 < (int)__min2) 
#line 310 
                                   tmp_144 = (int)__min1; else 
#line 310 
                                                               tmp_144 = (int)__min2;
    
#line 310 
    tmp_145 = tmp_144;
  }
  
#line 310 
  min_rx_wqes = (unsigned short)tmp_145;
  
#line 313 
  if (((int)priv->params.log_rq_size == (int)log_rq_size && (int)priv->params.log_sq_size == (int)log_sq_size) && (int)priv->params.min_rx_wqes == (int)min_rx_wqes) {
    
#line 316 
    __retres = 0;
    
#line 316 
    goto return_label;
  }
  else ;
  
#line 318 
  ldv_mutex_lock_75_1(& priv->state_lock);
  
#line 319 
  new_params = priv->params;
  
#line 320 
  new_params.log_rq_size = log_rq_size;
  
#line 321 
  new_params.log_sq_size = log_sq_size;
  
#line 322 
  new_params.min_rx_wqes = min_rx_wqes;
  
#line 323 
  err = mlx5e_update_priv_params(priv,& new_params);
  
#line 324 
  ldv_mutex_unlock_76_0(& priv->state_lock);
  
#line 326 
  __retres = err;
  return_label: 
#line 326 
                return __retres;
}


#line 329  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_ethtool.c"
static void mlx5e_get_channels(struct net_device *dev, struct ethtool_channels *ch)
{
  
#line 332 
  struct mlx5e_priv *priv = netdev_priv((struct net_device const *)dev);
  
#line 333 
  int ncv = (priv->mdev)->priv.eq_table.num_comp_vectors;
  
#line 335 
  ch->max_combined = (unsigned int)ncv;
  
#line 336 
  ch->combined_count = (unsigned int)priv->params.num_channels;
  
#line 337 
  return;
}


#line 339  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_ethtool.c"
static int mlx5e_set_channels(struct net_device *dev, struct ethtool_channels *ch)
{
  int __retres;
  struct mlx5e_params new_params;
  
#line 342 
  struct mlx5e_priv *priv = netdev_priv((struct net_device const *)dev);
  
#line 343 
  int ncv = (priv->mdev)->priv.eq_table.num_comp_vectors;
  
#line 344 
  unsigned int count = ch->combined_count;
  
#line 346 
  int err = 0;
  
#line 348 
  if (count == 0U) {
    
#line 349 
    netdev_info((struct net_device const *)dev,"%s: combined_count=0 not supported\n","mlx5e_set_channels");
    
#line 351 
    __retres = -22;
    
#line 351 
    goto return_label;
  }
  else ;
  
#line 353 
  if (ch->rx_count != 0U || ch->tx_count != 0U) {
    
#line 354 
    netdev_info((struct net_device const *)dev,"%s: separate rx/tx count not supported\n","mlx5e_set_channels");
    
#line 356 
    __retres = -22;
    
#line 356 
    goto return_label;
  }
  else ;
  
#line 358 
  if (count > (unsigned int)ncv) {
    
#line 359 
    netdev_info((struct net_device const *)dev,"%s: count (%d) > max (%d)\n","mlx5e_set_channels",count,ncv);
    
#line 361 
    __retres = -22;
    
#line 361 
    goto return_label;
  }
  else ;
  
#line 364 
  if ((unsigned int)priv->params.num_channels == count) {
    
#line 365 
    __retres = 0;
    
#line 365 
    goto return_label;
  }
  else ;
  
#line 367 
  ldv_mutex_lock_77_0(& priv->state_lock);
  
#line 368 
  new_params = priv->params;
  
#line 369 
  new_params.num_channels = (unsigned short)count;
  
#line 370 
  err = mlx5e_update_priv_params(priv,& new_params);
  
#line 371 
  ldv_mutex_unlock_78_0(& priv->state_lock);
  
#line 373 
  __retres = err;
  return_label: 
#line 373 
                return __retres;
}


#line 376  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_ethtool.c"
static int mlx5e_get_coalesce(struct net_device *netdev, struct ethtool_coalesce *coal)
{
  int __retres;
  
#line 379 
  struct mlx5e_priv *priv = netdev_priv((struct net_device const *)netdev);
  
#line 381 
  coal->rx_coalesce_usecs = (unsigned int)priv->params.rx_cq_moderation_usec;
  
#line 382 
  coal->rx_max_coalesced_frames = (unsigned int)priv->params.rx_cq_moderation_pkts;
  
#line 383 
  coal->tx_coalesce_usecs = (unsigned int)priv->params.tx_cq_moderation_usec;
  
#line 384 
  coal->tx_max_coalesced_frames = (unsigned int)priv->params.tx_cq_moderation_pkts;
  
#line 386 
  __retres = 0;
  
#line 386 
  return __retres;
}


#line 389  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_ethtool.c"
static int mlx5e_set_coalesce(struct net_device *netdev, struct ethtool_coalesce *coal)
{
  int __retres;
  struct mlx5e_channel *c;
  int tc;
  int i;
  
#line 392 
  struct mlx5e_priv *priv = netdev_priv((struct net_device const *)netdev);
  
#line 393 
  struct mlx5_core_dev *mdev = priv->mdev;
  
#line 398 
  priv->params.tx_cq_moderation_usec = (unsigned short)coal->tx_coalesce_usecs;
  
#line 399 
  priv->params.tx_cq_moderation_pkts = (unsigned short)coal->tx_max_coalesced_frames;
  
#line 400 
  priv->params.rx_cq_moderation_usec = (unsigned short)coal->rx_coalesce_usecs;
  
#line 401 
  priv->params.rx_cq_moderation_pkts = (unsigned short)coal->rx_max_coalesced_frames;
  
#line 403 
  i = 0;
  
#line 403 
  goto ldv_54927;
  ldv_54926: 
#line 404 
  ;
  
#line 404 
  c = *(priv->channel + i);
  
#line 406 
  tc = 0;
  
#line 406 
  goto ldv_54924;
  ldv_54923: 
#line 407 
  ;
  
#line 407 
  mlx5_core_modify_cq_moderation(mdev,& c->sq[tc].cq.mcq,(unsigned short)((int)((unsigned short)coal->tx_coalesce_usecs)),(unsigned short)((int)((unsigned short)coal->tx_max_coalesced_frames)));
  
#line 406 
  tc += 1;
  ldv_54924: 
#line 407 
  ;
  
#line 406 
  if ((int)c->num_tc > tc) 
#line 408 
                           goto ldv_54923; else 
#line 411 
                                                goto ldv_54925;
  ldv_54925: 
#line 412 
  ;
  
#line 413 
  mlx5_core_modify_cq_moderation(mdev,& c->rq.cq.mcq,(unsigned short)((int)((unsigned short)coal->rx_coalesce_usecs)),(unsigned short)((int)((unsigned short)coal->rx_max_coalesced_frames)));
  
#line 403 
  i += 1;
  ldv_54927: 
#line 404 
  ;
  
#line 403 
  if ((int)priv->params.num_channels > i) 
#line 405 
                                          goto ldv_54926; else 
#line 408 
                                                               goto ldv_54928;
  ldv_54928: 
#line 409 
  ;
  
#line 418 
  __retres = 0;
  
#line 418 
  return __retres;
}


#line 421  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_ethtool.c"
static u32 ptys2ethtool_supported_link(u32 eth_proto_cap)
{
  int i;
  
#line 424 
  u32 supported_modes = 0U;
  
#line 426 
  i = 0;
  
#line 426 
  goto ldv_54935;
  ldv_54934: 
#line 427 
  ;
  
#line 427 
  if (((unsigned int)(1 << i) & eth_proto_cap) != 0U) 
#line 428 
                                                      supported_modes = ptys2ethtool_table[i].supported | supported_modes; else ;
  
#line 426 
  i += 1;
  ldv_54935: 
#line 427 
  ;
  
#line 426 
  if (i <= 31) 
#line 428 
               goto ldv_54934; else 
#line 431 
                                    goto ldv_54936;
  ldv_54936: 
#line 432 
  ;
  
#line 430 
  return supported_modes;
}


#line 433  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_ethtool.c"
static u32 ptys2ethtool_adver_link(u32 eth_proto_cap)
{
  int i;
  
#line 436 
  u32 advertising_modes = 0U;
  
#line 438 
  i = 0;
  
#line 438 
  goto ldv_54943;
  ldv_54942: 
#line 439 
  ;
  
#line 439 
  if (((unsigned int)(1 << i) & eth_proto_cap) != 0U) 
#line 440 
                                                      advertising_modes = ptys2ethtool_table[i].advertised | advertising_modes; else ;
  
#line 438 
  i += 1;
  ldv_54943: 
#line 439 
  ;
  
#line 438 
  if (i <= 31) 
#line 440 
               goto ldv_54942; else 
#line 443 
                                    goto ldv_54944;
  ldv_54944: 
#line 444 
  ;
  
#line 442 
  return advertising_modes;
}


#line 445  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_ethtool.c"
static u32 ptys2ethtool_supported_port(u32 eth_proto_cap)
{
  u32 __retres;
  
#line 447 
  if ((eth_proto_cap & 2142273U) != 0U) {
    
#line 453 
    __retres = 1024U;
    
#line 453 
    goto return_label;
  }
  else ;
  
#line 456 
  if ((eth_proto_cap & 4194458U) != 0U) {
    
#line 461 
    __retres = 65536U;
    
#line 461 
    goto return_label;
  }
  else ;
  
#line 463 
  __retres = 0U;
  return_label: 
#line 463 
                return __retres;
}


#line 466  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_ethtool.c"
static void get_speed_duplex(struct net_device *netdev, u32 eth_proto_oper, struct ethtool_cmd *cmd)
{
  int i;
  int tmp_0;
  bool tmp;
  
#line 471 
  u32 speed = 4294967295U;
  
#line 472 
  u8 duplex = (unsigned char)255U;
  
#line 474 
  tmp = netif_carrier_ok((struct net_device const *)netdev);
  
#line 474 
  if (tmp) 
#line 474 
           tmp_0 = 0; else 
#line 474 
                           tmp_0 = 1;
  
#line 474 
  if (tmp_0) 
#line 475 
             goto out; else ;
  
#line 477 
  i = 0;
  
#line 477 
  goto ldv_54959;
  ldv_54958: 
#line 478 
  ;
  
#line 478 
  if (((unsigned int)(1 << i) & eth_proto_oper) != 0U) {
    
#line 479 
    speed = ptys2ethtool_table[i].speed;
    
#line 480 
    duplex = (unsigned char)1U;
    
#line 481 
    goto ldv_54957;
  }
  else ;
  
#line 477 
  i += 1;
  ldv_54959: 
#line 478 
  ;
  
#line 477 
  if (i <= 31) 
#line 479 
               goto ldv_54958; else 
#line 482 
                                    goto ldv_54957;
  ldv_54957: 
#line 483 
  ;
  out: 
#line 484 
  ;
  
#line 485 
  ethtool_cmd_speed_set(cmd,speed);
  
#line 486 
  cmd->duplex = duplex;
  
#line 487 
  return;
}


#line 489  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_ethtool.c"
static void get_supported(u32 eth_proto_cap, u32 *supported)
{
  u32 tmp;
  u32 tmp_0;
  
#line 491 
  tmp = ptys2ethtool_supported_port(eth_proto_cap);
  
#line 491 
  *supported |= tmp;
  
#line 492 
  tmp_0 = ptys2ethtool_supported_link(eth_proto_cap);
  
#line 492 
  *supported |= tmp_0;
  
#line 493 
  *supported |= 24576U;
  
#line 494 
  return;
}


#line 496  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_ethtool.c"
static void get_advertising(u32 eth_proto_cap, u8 tx_pause, u8 rx_pause, u32 *advertising)
{
  u32 tmp;
  int tmp_0;
  int tmp_1;
  
#line 499 
  tmp = ptys2ethtool_adver_link(eth_proto_cap);
  
#line 499 
  *advertising |= tmp;
  
#line 500 
  if ((unsigned int)tx_pause != 0U) 
#line 500 
                                    tmp_0 = 8192; else 
#line 500 
                                                       tmp_0 = 0;
  
#line 500 
  *advertising |= (unsigned int)tmp_0;
  
#line 501 
  if ((int)tx_pause != (int)rx_pause) 
#line 501 
                                      tmp_1 = 16384; else 
#line 501 
                                                          tmp_1 = 0;
  
#line 501 
  *advertising |= (unsigned int)tmp_1;
  
#line 502 
  return;
}


#line 504  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_ethtool.c"
static u8 get_connector_port(u32 eth_proto)
{
  u8 __retres;
  
#line 506 
  if ((eth_proto & 2138113U) != 0U) {
    
#line 510 
    __retres = (unsigned char)3U;
    
#line 510 
    goto return_label;
  }
  else ;
  
#line 513 
  if ((eth_proto & 1052736U) != 0U) {
    
#line 516 
    __retres = (unsigned char)5U;
    
#line 516 
    goto return_label;
  }
  else ;
  
#line 519 
  if ((eth_proto & 4194456U) != 0U) {
    
#line 523 
    __retres = (unsigned char)239U;
    
#line 523 
    goto return_label;
  }
  else ;
  
#line 526 
  __retres = (unsigned char)255U;
  return_label: 
#line 526 
                return __retres;
}


#line 529  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_ethtool.c"
static void get_lp_advertising(u32 eth_proto_lp, u32 *lp_advertising)
{
  
#line 531 
  *lp_advertising = ptys2ethtool_adver_link(eth_proto_lp);
  
#line 532 
  return;
}


#line 534  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_ethtool.c"
static int mlx5e_get_settings(struct net_device *netdev, struct ethtool_cmd *cmd)
{
  u32 out[16U];
  u32 eth_proto_cap;
  u32 eth_proto_admin;
  u32 eth_proto_lp;
  u32 eth_proto_oper;
  int err;
  
#line 537 
  struct mlx5e_priv *priv = netdev_priv((struct net_device const *)netdev);
  
#line 538 
  struct mlx5_core_dev *mdev = priv->mdev;
  
#line 546 
  err = mlx5_query_port_ptys(mdev,(u32 *)(& out),64,4,(unsigned char)1);
  
#line 548 
  if (err != 0) {
    
#line 549 
    netdev_err((struct net_device const *)netdev,"%s: query port ptys failed: %d\n","mlx5e_get_settings",err);
    
#line 551 
    goto err_query_ptys;
  }
  else ;
  
#line 554 
  if (0 != 0) 
#line 554 
              eth_proto_cap = (((*((__be32 *)(& out) + 3U) << 24) | ((*((__be32 *)(& out) + 3U) << 8) & 16711680U)) | ((*((__be32 *)(& out) + 3U) >> 8) & 65280U)) | (*((__be32 *)(& out) + 3U) >> 24); else 
                                                                    
#line 554 
                                                                    eth_proto_cap = __fswab32(*((__be32 *)(& out) + 3U));
  
#line 555 
  if (0 != 0) 
#line 555 
              eth_proto_admin = (((*((__be32 *)(& out) + 6U) << 24) | ((*((__be32 *)(& out) + 6U) << 8) & 16711680U)) | ((*((__be32 *)(& out) + 6U) >> 8) & 65280U)) | (*((__be32 *)(& out) + 6U) >> 24); else 
                                                                    
#line 555 
                                                                    eth_proto_admin = __fswab32(*((__be32 *)(& out) + 6U));
  
#line 556 
  if (0 != 0) 
#line 556 
              eth_proto_oper = (((*((__be32 *)(& out) + 9U) << 24) | ((*((__be32 *)(& out) + 9U) << 8) & 16711680U)) | ((*((__be32 *)(& out) + 9U) >> 8) & 65280U)) | (*((__be32 *)(& out) + 9U) >> 24); else 
                                                                    
#line 556 
                                                                    eth_proto_oper = __fswab32(*((__be32 *)(& out) + 9U));
  
#line 557 
  if (0 != 0) 
#line 557 
              eth_proto_lp = (((*((__be32 *)(& out) + 12U) << 24) | ((*((__be32 *)(& out) + 12U) << 8) & 16711680U)) | ((*((__be32 *)(& out) + 12U) >> 8) & 65280U)) | (*((__be32 *)(& out) + 12U) >> 24); else 
                                                                    
#line 557 
                                                                    eth_proto_lp = __fswab32(*((__be32 *)(& out) + 12U));
  
#line 559 
  cmd->supported = 0U;
  
#line 560 
  cmd->advertising = 0U;
  
#line 562 
  get_supported(eth_proto_cap,& cmd->supported);
  
#line 563 
  get_advertising(eth_proto_admin,(unsigned char)0,(unsigned char)0,& cmd->advertising);
  
#line 564 
  get_speed_duplex(netdev,eth_proto_oper,cmd);
  
#line 566 
  if (eth_proto_oper != 0U) 
#line 566 
                            eth_proto_oper = eth_proto_oper; else 
#line 566 
                                                                  eth_proto_oper = eth_proto_cap;
  
#line 568 
  cmd->port = get_connector_port(eth_proto_oper);
  
#line 569 
  get_lp_advertising(eth_proto_lp,& cmd->lp_advertising);
  
#line 571 
  cmd->transceiver = (unsigned char)0U;
  err_query_ptys: 
#line 573 
  ;
  
#line 574 
  return err;
}


#line 577  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_ethtool.c"
static u32 mlx5e_ethtool2ptys_adver_link(u32 link_modes)
{
  u32 i;
  
#line 579 
  u32 ptys_modes = 0U;
  
#line 581 
  i = 0U;
  
#line 581 
  goto ldv_54997;
  ldv_54996: 
#line 582 
  ;
  
#line 582 
  if ((ptys2ethtool_table[i].advertised & link_modes) != 0U) 
#line 583 
                                                             ptys_modes = (unsigned int)(1 << i) | ptys_modes; else ;
  
#line 581 
  i += 1U;
  ldv_54997: 
#line 582 
  ;
  
#line 581 
  if (i <= 31U) 
#line 583 
                goto ldv_54996; else 
#line 586 
                                     goto ldv_54998;
  ldv_54998: 
#line 587 
  ;
  
#line 586 
  return ptys_modes;
}


#line 589  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_ethtool.c"
static u32 mlx5e_ethtool2ptys_speed_link(u32 speed)
{
  u32 i;
  
#line 591 
  u32 speed_links = 0U;
  
#line 593 
  i = 0U;
  
#line 593 
  goto ldv_55005;
  ldv_55004: 
#line 594 
  ;
  
#line 594 
  if (ptys2ethtool_table[i].speed == speed) 
#line 595 
                                            speed_links = (unsigned int)(1 << i) | speed_links; else ;
  
#line 593 
  i += 1U;
  ldv_55005: 
#line 594 
  ;
  
#line 593 
  if (i <= 31U) 
#line 595 
                goto ldv_55004; else 
#line 598 
                                     goto ldv_55006;
  ldv_55006: 
#line 599 
  ;
  
#line 598 
  return speed_links;
}


#line 601  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_ethtool.c"
static int mlx5e_set_settings(struct net_device *netdev, struct ethtool_cmd *cmd)
{
  int __retres;
  u32 link_modes;
  u32 speed;
  u32 eth_proto_cap;
  u32 eth_proto_admin;
  u8 port_status;
  int err;
  
#line 604 
  struct mlx5e_priv *priv = netdev_priv((struct net_device const *)netdev);
  
#line 605 
  struct mlx5_core_dev *mdev = priv->mdev;
  
#line 612 
  speed = ethtool_cmd_speed((struct ethtool_cmd const *)cmd);
  
#line 614 
  if ((unsigned int)cmd->autoneg == 1U) 
#line 614 
                                        link_modes = mlx5e_ethtool2ptys_adver_link(cmd->advertising); else 
                                                                    
#line 615 
                                                                    link_modes = mlx5e_ethtool2ptys_speed_link(speed);
  
#line 618 
  err = mlx5_query_port_proto_cap(mdev,& eth_proto_cap,4);
  
#line 619 
  if (err != 0) {
    
#line 620 
    netdev_err((struct net_device const *)netdev,"%s: query port eth proto cap failed: %d\n","mlx5e_set_settings",err);
    
#line 622 
    goto out;
  }
  else ;
  
#line 625 
  link_modes &= eth_proto_cap;
  
#line 626 
  if (link_modes == 0U) {
    
#line 627 
    netdev_err((struct net_device const *)netdev,"%s: Not supported link mode(s) requested","mlx5e_set_settings");
    
#line 629 
    err = -22;
    
#line 630 
    goto out;
  }
  else ;
  
#line 633 
  err = mlx5_query_port_proto_admin(mdev,& eth_proto_admin,4);
  
#line 634 
  if (err != 0) {
    
#line 635 
    netdev_err((struct net_device const *)netdev,"%s: query port eth proto admin failed: %d\n","mlx5e_set_settings",err);
    
#line 637 
    goto out;
  }
  else ;
  
#line 640 
  if (link_modes == eth_proto_admin) 
#line 641 
                                     goto out; else ;
  
#line 643 
  err = mlx5_set_port_proto(mdev,link_modes,4);
  
#line 644 
  if (err != 0) {
    
#line 645 
    netdev_err((struct net_device const *)netdev,"%s: set port eth proto admin failed: %d\n","mlx5e_set_settings",err);
    
#line 647 
    goto out;
  }
  else ;
  
#line 650 
  err = mlx5_query_port_status(mdev,& port_status);
  
#line 651 
  if (err != 0) 
#line 652 
                goto out; else ;
  
#line 654 
  if ((unsigned int)port_status == 4U) {
    
#line 655 
    __retres = 0;
    
#line 655 
    goto return_label;
  }
  else ;
  
#line 657 
  err = mlx5_set_port_status(mdev,(enum mlx5_port_status)MLX5_PORT_DOWN);
  
#line 658 
  if (err != 0) 
#line 659 
                goto out; else ;
  
#line 660 
  err = mlx5_set_port_status(mdev,(enum mlx5_port_status)MLX5_PORT_UP);
  out: 
#line 661 
  ;
  
#line 662 
  __retres = err;
  return_label: 
#line 662 
                return __retres;
}


#line 665  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_ethtool.c"
struct ethtool_ops const mlx5e_ethtool_ops = {.get_settings = & mlx5e_get_settings, .set_settings = & mlx5e_set_settings, .get_drvinfo = & mlx5e_get_drvinfo, .get_regs_len = (int (*)(struct net_device *))0, .get_regs = (void (*)(struct net_device *, struct ethtool_regs *, void *))0, .get_wol = (void (*)(struct net_device *, struct ethtool_wolinfo *))0, .set_wol = (int (*)(struct net_device *, struct ethtool_wolinfo *))0, .get_msglevel = (u32 (*)(struct net_device *))0, .set_msglevel = (void (*)(struct net_device *, u32 ))0, .nway_reset = (int (*)(struct net_device *))0, .get_link = & ethtool_op_get_link, .get_eeprom_len = (int (*)(struct net_device *))0, .get_eeprom = (int (*)(struct net_device *, struct ethtool_eeprom *, u8 *))0, .set_eeprom = (int (*)(struct net_device *, struct ethtool_eeprom *, u8 *))0, .get_coalesce = & mlx5e_get_coalesce, .set_coalesce = & mlx5e_set_coalesce, .get_ringparam = & mlx5e_get_ringparam, .set_ringparam = & mlx5e_set_ringparam, .get_pauseparam = (void (*)(struct net_device *, struct ethtool_pauseparam *))0, .set_pauseparam = (int (*)(struct net_device *, struct ethtool_pauseparam *))0, .self_test = (void (*)(struct net_device *, struct ethtool_test *, u64 *))0, .get_strings = & mlx5e_get_strings, .set_phys_id = (int (*)(struct net_device *, enum ethtool_phys_id_state ))0, .get_ethtool_stats = & mlx5e_get_ethtool_stats, .begin = (int (*)(struct net_device *))0, .complete = (void (*)(struct net_device *))0, .get_priv_flags = (u32 (*)(struct net_device *))0, .set_priv_flags = (int (*)(struct net_device *, u32 ))0, .get_sset_count = & mlx5e_get_sset_count, .get_rxnfc = (int (*)(struct net_device *, struct ethtool_rxnfc *, u32 *))0, .set_rxnfc = (int (*)(struct net_device *, struct ethtool_rxnfc *))0, .flash_device = (int (*)(struct net_device *, struct ethtool_flash *))0, .reset = (int (*)(struct net_device *, u32 *))0, .get_rxfh_key_size = (u32 (*)(struct net_device *))0, .get_rxfh_indir_size = (u32 (*)(struct net_device *))0, .get_rxfh = (int (*)(struct net_device *, u32 *, u8 *, u8 *))0, .set_rxfh = (int (*)(struct net_device *, u32 const *, u8 const *, u8 const ))0, .get_channels = & mlx5e_get_channels, .set_channels = & mlx5e_set_channels, .get_dump_flag = (int (*)(struct net_device *, struct ethtool_dump *))0, .get_dump_data = (int (*)(struct net_device *, struct ethtool_dump *, void *))0, .set_dump = (int (*)(struct net_device *, struct ethtool_dump *))0, .get_ts_info = (int (*)(struct net_device *, struct ethtool_ts_info *))0, .get_module_info = (int (*)(struct net_device *, struct ethtool_modinfo *))0, .get_module_eeprom = (int (*)(struct net_device *, struct ethtool_eeprom *, u8 *))0, .get_eee = (int (*)(struct net_device *, struct ethtool_eee *))0, .set_eee = (int (*)(struct net_device *, struct ethtool_eee *))0, .get_tunable = (int (*)(struct net_device *, struct ethtool_tunable const *, void *))0, .set_tunable = (int (*)(struct net_device *, struct ethtool_tunable const *, void const *))0};

#line 56  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_en_ethtool.c.aux"
unsigned int (*ldv_emg_alias_ethtool_op_get_link_4)(struct net_device *) = & ethtool_op_get_link;

#line 75  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_en_ethtool.c.aux"
int ldv_emg_wrapper_mlx5e_get_coalesce_7(struct net_device *arg0, struct ethtool_coalesce *arg1)
{
  int tmp;
  
#line 76 
  tmp = mlx5e_get_coalesce(arg0,arg1);
  
#line 76 
  return tmp;
}


#line 80  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_en_ethtool.c.aux"
int ldv_emg_wrapper_mlx5e_set_channels_5(struct net_device *arg0, struct ethtool_channels *arg1)
{
  int tmp;
  
#line 81 
  tmp = mlx5e_set_channels(arg0,arg1);
  
#line 81 
  return tmp;
}


#line 85  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_en_ethtool.c.aux"
void ldv_emg_wrapper_mlx5e_get_drvinfo_13(struct net_device *arg0, struct ethtool_drvinfo *arg1)
{
  
#line 86 
  mlx5e_get_drvinfo(arg0,arg1);
  
#line 87 
  return;
}


#line 90  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_en_ethtool.c.aux"
int ldv_emg_wrapper_mlx5e_set_settings_11(struct net_device *arg0, struct ethtool_cmd *arg1)
{
  int tmp;
  
#line 91 
  tmp = mlx5e_set_settings(arg0,arg1);
  
#line 91 
  return tmp;
}


#line 95  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_en_ethtool.c.aux"
int ldv_emg_wrapper_mlx5e_set_coalesce_16(struct net_device *arg0, struct ethtool_coalesce *arg1)
{
  int tmp;
  
#line 96 
  tmp = mlx5e_set_coalesce(arg0,arg1);
  
#line 96 
  return tmp;
}


#line 100  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_en_ethtool.c.aux"
int ldv_emg_wrapper_mlx5e_get_sset_count_3(struct net_device *arg0, int arg1)
{
  int tmp;
  
#line 101 
  tmp = mlx5e_get_sset_count(arg0,arg1);
  
#line 101 
  return tmp;
}


#line 105  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_en_ethtool.c.aux"
void ldv_emg_wrapper_mlx5e_get_ringparam_15(struct net_device *arg0, struct ethtool_ringparam *arg1)
{
  
#line 106 
  mlx5e_get_ringparam(arg0,arg1);
  
#line 107 
  return;
}


#line 110  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_en_ethtool.c.aux"
void ldv_emg_wrapper_mlx5e_get_channels_10(struct net_device *arg0, struct ethtool_channels *arg1)
{
  
#line 111 
  mlx5e_get_channels(arg0,arg1);
  
#line 112 
  return;
}


#line 115  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_en_ethtool.c.aux"
void ldv_emg_wrapper_mlx5e_get_strings_14(struct net_device *arg0, unsigned int arg1, unsigned char *arg2)
{
  
#line 116 
  mlx5e_get_strings(arg0,arg1,arg2);
  
#line 117 
  return;
}


#line 120  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_en_ethtool.c.aux"
int ldv_emg_wrapper_mlx5e_set_ringparam_17(struct net_device *arg0, struct ethtool_ringparam *arg1)
{
  int tmp;
  
#line 121 
  tmp = mlx5e_set_ringparam(arg0,arg1);
  
#line 121 
  return tmp;
}


#line 125  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_en_ethtool.c.aux"
int ldv_emg_wrapper_mlx5e_get_settings_2(struct net_device *arg0, struct ethtool_cmd *arg1)
{
  int tmp;
  
#line 126 
  tmp = mlx5e_get_settings(arg0,arg1);
  
#line 126 
  return tmp;
}


#line 130  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_en_ethtool.c.aux"
void ldv_emg_wrapper_mlx5e_get_ethtool_stats_8(struct net_device *arg0, struct ethtool_stats *arg1, unsigned long long *arg2)
{
  
#line 131 
  mlx5e_get_ethtool_stats(arg0,arg1,arg2);
  
#line 132 
  return;
}


#line 814  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_en_ethtool.c.aux"
static void ldv_mutex_lock_73_1(struct mutex *ldv_func_arg1)
{
  
#line 818 
  ldv_mutex_model_lock(ldv_func_arg1,(char *)"state_lock_of_mlx5e_priv");
  
#line 819 
  return;
}


#line 822  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_en_ethtool.c.aux"
static void ldv_mutex_unlock_74_1(struct mutex *ldv_func_arg1)
{
  
#line 826 
  ldv_mutex_model_unlock(ldv_func_arg1,(char *)"state_lock_of_mlx5e_priv");
  
#line 827 
  return;
}


#line 830  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_en_ethtool.c.aux"
static void ldv_mutex_lock_75_1(struct mutex *ldv_func_arg1)
{
  
#line 834 
  ldv_mutex_model_lock(ldv_func_arg1,(char *)"state_lock_of_mlx5e_priv");
  
#line 835 
  return;
}


#line 838  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_en_ethtool.c.aux"
static void ldv_mutex_unlock_76_0(struct mutex *ldv_func_arg1)
{
  
#line 842 
  ldv_mutex_model_unlock(ldv_func_arg1,(char *)"state_lock_of_mlx5e_priv");
  
#line 843 
  return;
}


#line 846  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_en_ethtool.c.aux"
static void ldv_mutex_lock_77_0(struct mutex *ldv_func_arg1)
{
  
#line 850 
  ldv_mutex_model_lock(ldv_func_arg1,(char *)"state_lock_of_mlx5e_priv");
  
#line 851 
  return;
}


#line 854  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_en_ethtool.c.aux"
static void ldv_mutex_unlock_78_0(struct mutex *ldv_func_arg1)
{
  
#line 858 
  ldv_mutex_model_unlock(ldv_func_arg1,(char *)"state_lock_of_mlx5e_priv");
  
#line 859 
  return;
}


#line 581  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/slab.h"
static void *kzalloc_10(size_t size, gfp_t flags);


#line 637  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/driver.h"
__inline static void *mlx5_vzalloc_5(unsigned long size)
{
  void *rtn;
  
#line 641 
  rtn = kzalloc_10(size,720U);
  
#line 642 
  if (rtn == (void *)0) 
#line 643 
                        rtn = vzalloc(size); else ;
  
#line 644 
  return rtn;
}


#line 57  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/transobj.h"
int mlx5_core_arm_rmp(struct mlx5_core_dev *dev, u32 rmpn, u16 lwm);


#line 58 
int mlx5_core_create_xsrq(struct mlx5_core_dev *dev, u32 *in, int inlen, u32 *xsrqn);


#line 60 
int mlx5_core_destroy_xsrq(struct mlx5_core_dev *dev, u32 xsrqn);


#line 61 
int mlx5_core_query_xsrq(struct mlx5_core_dev *dev, u32 xsrqn, u32 *out);


#line 62 
int mlx5_core_arm_xsrq(struct mlx5_core_dev *dev, u32 xsrqn, u16 lwm);


#line 46  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/transobj.c"
void __compiletime_assert_47(void);


#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/transobj.c"
int mlx5_alloc_transport_domain(struct mlx5_core_dev *dev, u32 *tdn)
{
  u32 in[4U];
  u32 out[4U];
  int err;
  
#line 43 
  memset((void *)(& in),0,16UL);
  
#line 44 
  memset((void *)(& out),0,16UL);
  {
    
#line 46 
    bool __cond = (_Bool)0;
    
#line 46 
    if ((int)__cond != 0) 
#line 46 
                          __compiletime_assert_47(); else ;
  }
  
#line 46 
  if (0 != 0) {
    unsigned int tmp_2;
    unsigned int tmp_4;
    
#line 46 
    if (0 != 0) 
#line 46 
                tmp_2 = ((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) << 24;
    else {
      __u32 tmp_1;
      
#line 46 
      tmp_1 = __fswab32(*((__be32 *)(& in)));
      
#line 46 
      tmp_2 = tmp_1 << 24;
    }
    
#line 46 
    if (0 != 0) 
#line 46 
                tmp_4 = (((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) << 8) & 16711680U;
    else {
      __u32 tmp_3;
      
#line 46 
      tmp_3 = __fswab32(*((__be32 *)(& in)));
      
#line 46 
      tmp_4 = (tmp_3 << 8) & 16711680U;
    }
    
#line 46 
    *((__be32 *)(& in)) = (tmp_2 | tmp_4) | 5640U;
  }
  else {
    __u32 tmp_7;
    unsigned int tmp_6;
    
#line 46 
    if (0 != 0) 
#line 46 
                tmp_6 = (((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) & 65535U) | 135659520U;
    else {
      __u32 tmp_5;
      
#line 46 
      tmp_5 = __fswab32(*((__be32 *)(& in)));
      
#line 46 
      tmp_6 = (tmp_5 & 65535U) | 135659520U;
    }
    
#line 46 
    tmp_7 = __fswab32(tmp_6);
    
#line 46 
    *((__be32 *)(& in)) = tmp_7;
  }
  
#line 49 
  err = mlx5_cmd_exec_check_status(dev,(u32 *)(& in),16,(u32 *)(& out),16);
  
#line 50 
  if (err == 0) 
    
#line 51 
    if (0 != 0) 
#line 51 
                *tdn = ((((*((__be32 *)(& out) + 2U) << 24) | ((*((__be32 *)(& out) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& out) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& out) + 2U) >> 24)) & 16777215U;
    else {
      __u32 tmp_8;
      
#line 51 
      tmp_8 = __fswab32(*((__be32 *)(& out) + 2U));
      
#line 51 
      *tdn = tmp_8 & 16777215U;
    }
  else ;
  
#line 54 
  return err;
}


#line 65 
void __compiletime_assert_66(void);


#line 67 
void __compiletime_assert_67(void);


#line 57  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/transobj.c"
void mlx5_dealloc_transport_domain(struct mlx5_core_dev *dev, u32 tdn)
{
  u32 in[4U];
  u32 out[4U];
  
#line 62 
  memset((void *)(& in),0,16UL);
  
#line 63 
  memset((void *)(& out),0,16UL);
  {
    
#line 65 
    bool __cond = (_Bool)0;
    
#line 65 
    if ((int)__cond != 0) 
#line 65 
                          __compiletime_assert_66(); else ;
  }
  
#line 65 
  if (0 != 0) {
    unsigned int tmp_2;
    unsigned int tmp_4;
    
#line 65 
    if (0 != 0) 
#line 65 
                tmp_2 = ((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) << 24;
    else {
      __u32 tmp_1;
      
#line 65 
      tmp_1 = __fswab32(*((__be32 *)(& in)));
      
#line 65 
      tmp_2 = tmp_1 << 24;
    }
    
#line 65 
    if (0 != 0) 
#line 65 
                tmp_4 = (((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) << 8) & 16711680U;
    else {
      __u32 tmp_3;
      
#line 65 
      tmp_3 = __fswab32(*((__be32 *)(& in)));
      
#line 65 
      tmp_4 = (tmp_3 << 8) & 16711680U;
    }
    
#line 65 
    *((__be32 *)(& in)) = (tmp_2 | tmp_4) | 5896U;
  }
  else {
    __u32 tmp_7;
    unsigned int tmp_6;
    
#line 65 
    if (0 != 0) 
#line 65 
                tmp_6 = (((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) & 65535U) | 135725056U;
    else {
      __u32 tmp_5;
      
#line 65 
      tmp_5 = __fswab32(*((__be32 *)(& in)));
      
#line 65 
      tmp_6 = (tmp_5 & 65535U) | 135725056U;
    }
    
#line 65 
    tmp_7 = __fswab32(tmp_6);
    
#line 65 
    *((__be32 *)(& in)) = tmp_7;
  }
  {
    
#line 67 
    bool __cond_0 = (_Bool)0;
    
#line 67 
    if ((int)__cond_0 != 0) 
#line 67 
                            __compiletime_assert_67(); else ;
  }
  
#line 67 
  if (0 != 0) {
    unsigned int tmp_11;
    unsigned int tmp_13;
    unsigned int tmp_15;
    unsigned int tmp_17;
    
#line 67 
    if (0 != 0) 
#line 67 
                tmp_11 = ((((*((__be32 *)(& in) + 2U) << 24) | ((*((__be32 *)(& in) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_10;
      
#line 67 
      tmp_10 = __fswab32(*((__be32 *)(& in) + 2U));
      
#line 67 
      tmp_11 = tmp_10 & 4278190080U;
    }
    
#line 67 
    if (0 != 0) 
#line 67 
                tmp_13 = ((((*((__be32 *)(& in) + 2U) << 24) | ((*((__be32 *)(& in) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_12;
      
#line 67 
      tmp_12 = __fswab32(*((__be32 *)(& in) + 2U));
      
#line 67 
      tmp_13 = tmp_12 & 4278190080U;
    }
    
#line 67 
    if (0 != 0) 
#line 67 
                tmp_15 = ((((*((__be32 *)(& in) + 2U) << 24) | ((*((__be32 *)(& in) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_14;
      
#line 67 
      tmp_14 = __fswab32(*((__be32 *)(& in) + 2U));
      
#line 67 
      tmp_15 = tmp_14 & 4278190080U;
    }
    
#line 67 
    if (0 != 0) 
#line 67 
                tmp_17 = ((((*((__be32 *)(& in) + 2U) << 24) | ((*((__be32 *)(& in) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_16;
      
#line 67 
      tmp_16 = __fswab32(*((__be32 *)(& in) + 2U));
      
#line 67 
      tmp_17 = tmp_16 & 4278190080U;
    }
    
#line 67 
    *((__be32 *)(& in) + 2U) = ((((tmp_11 | (tdn & 16777215U)) << 24) | (((tmp_13 | (tdn & 16777215U)) << 8) & 16711680U)) | (((tmp_15 | (tdn & 16777215U)) >> 8) & 65280U)) | ((tmp_17 | (tdn & 16777215U)) >> 24);
  }
  else {
    __u32 tmp_20;
    unsigned int tmp_19;
    
#line 67 
    if (0 != 0) 
#line 67 
                tmp_19 = ((((*((__be32 *)(& in) + 2U) << 24) | ((*((__be32 *)(& in) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_18;
      
#line 67 
      tmp_18 = __fswab32(*((__be32 *)(& in) + 2U));
      
#line 67 
      tmp_19 = tmp_18 & 4278190080U;
    }
    
#line 67 
    ;
    
#line 67 
    tmp_20 = __fswab32(tmp_19 | (tdn & 16777215U));
    
#line 67 
    *((__be32 *)(& in) + 2U) = tmp_20;
  }
  
#line 69 
  mlx5_cmd_exec_check_status(dev,(u32 *)(& in),16,(u32 *)(& out),16);
  
#line 70 
  return;
}


#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/transobj.c"
int mlx5_core_create_rq(struct mlx5_core_dev *dev, u32 *in, int inlen, u32 *rqn)
{
  u32 out[4U];
  int err;
  {
    
#line 77 
    bool __cond = (_Bool)0;
    
#line 77 
    if ((int)__cond != 0) 
#line 77 
                          __compiletime_assert_77(); else ;
  }
  
#line 77 
  if (0 != 0) {
    unsigned int tmp_2;
    unsigned int tmp_4;
    
#line 77 
    if (0 != 0) 
#line 77 
                tmp_2 = ((((*in << 24) | ((*in << 8) & 16711680U)) | ((*in >> 8) & 65280U)) | (*in >> 24)) << 24;
    else {
      __u32 tmp_1;
      
#line 77 
      tmp_1 = __fswab32(*in);
      
#line 77 
      tmp_2 = tmp_1 << 24;
    }
    
#line 77 
    if (0 != 0) 
#line 77 
                tmp_4 = (((((*in << 24) | ((*in << 8) & 16711680U)) | ((*in >> 8) & 65280U)) | (*in >> 24)) << 8) & 16711680U;
    else {
      __u32 tmp_3;
      
#line 77 
      tmp_3 = __fswab32(*in);
      
#line 77 
      tmp_4 = (tmp_3 << 8) & 16711680U;
    }
    
#line 77 
    *in = (tmp_2 | tmp_4) | 2057U;
  }
  else {
    __u32 tmp_7;
    unsigned int tmp_6;
    
#line 77 
    if (0 != 0) 
#line 77 
                tmp_6 = (((((*in << 24) | ((*in << 8) & 16711680U)) | ((*in >> 8) & 65280U)) | (*in >> 24)) & 65535U) | 151519232U;
    else {
      __u32 tmp_5;
      
#line 77 
      tmp_5 = __fswab32(*in);
      
#line 77 
      tmp_6 = (tmp_5 & 65535U) | 151519232U;
    }
    
#line 77 
    tmp_7 = __fswab32(tmp_6);
    
#line 77 
    *in = tmp_7;
  }
  
#line 79 
  memset((void *)(& out),0,16UL);
  
#line 80 
  err = mlx5_cmd_exec_check_status(dev,in,inlen,(u32 *)(& out),16);
  
#line 81 
  if (err == 0) 
    
#line 82 
    if (0 != 0) 
#line 82 
                *rqn = ((((*((__be32 *)(& out) + 2U) << 24) | ((*((__be32 *)(& out) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& out) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& out) + 2U) >> 24)) & 16777215U;
    else {
      __u32 tmp_8;
      
#line 82 
      tmp_8 = __fswab32(*((__be32 *)(& out) + 2U));
      
#line 82 
      *rqn = tmp_8 & 16777215U;
    }
  else ;
  
#line 84 
  return err;
}


#line 92 
void __compiletime_assert_92(void);


#line 87  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/transobj.c"
int mlx5_core_modify_rq(struct mlx5_core_dev *dev, u32 rqn, u32 *in, int inlen)
{
  u32 out[4U];
  int tmp_21;
  {
    
#line 91 
    bool __cond = (_Bool)0;
    
#line 91 
    if ((int)__cond != 0) 
#line 91 
                          __compiletime_assert_91(); else ;
  }
  
#line 91 
  if (0 != 0) {
    unsigned int tmp_2;
    unsigned int tmp_4;
    unsigned int tmp_6;
    unsigned int tmp_8;
    
#line 91 
    if (0 != 0) 
#line 91 
                tmp_2 = ((((*(in + 2U) << 24) | ((*(in + 2U) << 8) & 16711680U)) | ((*(in + 2U) >> 8) & 65280U)) | (*(in + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_1;
      
#line 91 
      tmp_1 = __fswab32(*(in + 2U));
      
#line 91 
      tmp_2 = tmp_1 & 4278190080U;
    }
    
#line 91 
    if (0 != 0) 
#line 91 
                tmp_4 = ((((*(in + 2U) << 24) | ((*(in + 2U) << 8) & 16711680U)) | ((*(in + 2U) >> 8) & 65280U)) | (*(in + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_3;
      
#line 91 
      tmp_3 = __fswab32(*(in + 2U));
      
#line 91 
      tmp_4 = tmp_3 & 4278190080U;
    }
    
#line 91 
    if (0 != 0) 
#line 91 
                tmp_6 = ((((*(in + 2U) << 24) | ((*(in + 2U) << 8) & 16711680U)) | ((*(in + 2U) >> 8) & 65280U)) | (*(in + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_5;
      
#line 91 
      tmp_5 = __fswab32(*(in + 2U));
      
#line 91 
      tmp_6 = tmp_5 & 4278190080U;
    }
    
#line 91 
    if (0 != 0) 
#line 91 
                tmp_8 = ((((*(in + 2U) << 24) | ((*(in + 2U) << 8) & 16711680U)) | ((*(in + 2U) >> 8) & 65280U)) | (*(in + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_7;
      
#line 91 
      tmp_7 = __fswab32(*(in + 2U));
      
#line 91 
      tmp_8 = tmp_7 & 4278190080U;
    }
    
#line 91 
    *(in + 2U) = ((((tmp_2 | (rqn & 16777215U)) << 24) | (((tmp_4 | (rqn & 16777215U)) << 8) & 16711680U)) | (((tmp_6 | (rqn & 16777215U)) >> 8) & 65280U)) | ((tmp_8 | (rqn & 16777215U)) >> 24);
  }
  else {
    __u32 tmp_11;
    unsigned int tmp_10;
    
#line 91 
    if (0 != 0) 
#line 91 
                tmp_10 = ((((*(in + 2U) << 24) | ((*(in + 2U) << 8) & 16711680U)) | ((*(in + 2U) >> 8) & 65280U)) | (*(in + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_9;
      
#line 91 
      tmp_9 = __fswab32(*(in + 2U));
      
#line 91 
      tmp_10 = tmp_9 & 4278190080U;
    }
    
#line 91 
    ;
    
#line 91 
    tmp_11 = __fswab32(tmp_10 | (rqn & 16777215U));
    
#line 91 
    *(in + 2U) = tmp_11;
  }
  {
    
#line 92 
    bool __cond_0 = (_Bool)0;
    
#line 92 
    if ((int)__cond_0 != 0) 
#line 92 
                            __compiletime_assert_92(); else ;
  }
  
#line 92 
  if (0 != 0) {
    unsigned int tmp_15;
    unsigned int tmp_17;
    
#line 92 
    if (0 != 0) 
#line 92 
                tmp_15 = ((((*in << 24) | ((*in << 8) & 16711680U)) | ((*in >> 8) & 65280U)) | (*in >> 24)) << 24;
    else {
      __u32 tmp_14;
      
#line 92 
      tmp_14 = __fswab32(*in);
      
#line 92 
      tmp_15 = tmp_14 << 24;
    }
    
#line 92 
    if (0 != 0) 
#line 92 
                tmp_17 = (((((*in << 24) | ((*in << 8) & 16711680U)) | ((*in >> 8) & 65280U)) | (*in >> 24)) << 8) & 16711680U;
    else {
      __u32 tmp_16;
      
#line 92 
      tmp_16 = __fswab32(*in);
      
#line 92 
      tmp_17 = (tmp_16 << 8) & 16711680U;
    }
    
#line 92 
    *in = (tmp_15 | tmp_17) | 2313U;
  }
  else {
    __u32 tmp_20;
    unsigned int tmp_19;
    
#line 92 
    if (0 != 0) 
#line 92 
                tmp_19 = (((((*in << 24) | ((*in << 8) & 16711680U)) | ((*in >> 8) & 65280U)) | (*in >> 24)) & 65535U) | 151584768U;
    else {
      __u32 tmp_18;
      
#line 92 
      tmp_18 = __fswab32(*in);
      
#line 92 
      tmp_19 = (tmp_18 & 65535U) | 151584768U;
    }
    
#line 92 
    tmp_20 = __fswab32(tmp_19);
    
#line 92 
    *in = tmp_20;
  }
  
#line 94 
  memset((void *)(& out),0,16UL);
  
#line 95 
  tmp_21 = mlx5_cmd_exec_check_status(dev,in,inlen,(u32 *)(& out),16);
  
#line 95 
  return tmp_21;
}


#line 98  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/transobj.c"
void mlx5_core_destroy_rq(struct mlx5_core_dev *dev, u32 rqn)
{
  u32 in[4U];
  u32 out[4U];
  
#line 103 
  memset((void *)(& in),0,16UL);
  {
    
#line 105 
    bool __cond = (_Bool)0;
    
#line 105 
    if ((int)__cond != 0) 
#line 105 
                          __compiletime_assert_105(); else ;
  }
  
#line 105 
  if (0 != 0) {
    unsigned int tmp_2;
    unsigned int tmp_4;
    
#line 105 
    if (0 != 0) 
#line 105 
                tmp_2 = ((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) << 24;
    else {
      __u32 tmp_1;
      
#line 105 
      tmp_1 = __fswab32(*((__be32 *)(& in)));
      
#line 105 
      tmp_2 = tmp_1 << 24;
    }
    
#line 105 
    if (0 != 0) 
#line 105 
                tmp_4 = (((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) << 8) & 16711680U;
    else {
      __u32 tmp_3;
      
#line 105 
      tmp_3 = __fswab32(*((__be32 *)(& in)));
      
#line 105 
      tmp_4 = (tmp_3 << 8) & 16711680U;
    }
    
#line 105 
    *((__be32 *)(& in)) = (tmp_2 | tmp_4) | 2569U;
  }
  else {
    __u32 tmp_7;
    unsigned int tmp_6;
    
#line 105 
    if (0 != 0) 
#line 105 
                tmp_6 = (((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) & 65535U) | 151650304U;
    else {
      __u32 tmp_5;
      
#line 105 
      tmp_5 = __fswab32(*((__be32 *)(& in)));
      
#line 105 
      tmp_6 = (tmp_5 & 65535U) | 151650304U;
    }
    
#line 105 
    tmp_7 = __fswab32(tmp_6);
    
#line 105 
    *((__be32 *)(& in)) = tmp_7;
  }
  {
    
#line 106 
    bool __cond_0 = (_Bool)0;
    
#line 106 
    if ((int)__cond_0 != 0) 
#line 106 
                            __compiletime_assert_106(); else ;
  }
  
#line 106 
  if (0 != 0) {
    unsigned int tmp_11;
    unsigned int tmp_13;
    unsigned int tmp_15;
    unsigned int tmp_17;
    
#line 106 
    if (0 != 0) 
#line 106 
                tmp_11 = ((((*((__be32 *)(& in) + 2U) << 24) | ((*((__be32 *)(& in) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_10;
      
#line 106 
      tmp_10 = __fswab32(*((__be32 *)(& in) + 2U));
      
#line 106 
      tmp_11 = tmp_10 & 4278190080U;
    }
    
#line 106 
    if (0 != 0) 
#line 106 
                tmp_13 = ((((*((__be32 *)(& in) + 2U) << 24) | ((*((__be32 *)(& in) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_12;
      
#line 106 
      tmp_12 = __fswab32(*((__be32 *)(& in) + 2U));
      
#line 106 
      tmp_13 = tmp_12 & 4278190080U;
    }
    
#line 106 
    if (0 != 0) 
#line 106 
                tmp_15 = ((((*((__be32 *)(& in) + 2U) << 24) | ((*((__be32 *)(& in) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_14;
      
#line 106 
      tmp_14 = __fswab32(*((__be32 *)(& in) + 2U));
      
#line 106 
      tmp_15 = tmp_14 & 4278190080U;
    }
    
#line 106 
    if (0 != 0) 
#line 106 
                tmp_17 = ((((*((__be32 *)(& in) + 2U) << 24) | ((*((__be32 *)(& in) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_16;
      
#line 106 
      tmp_16 = __fswab32(*((__be32 *)(& in) + 2U));
      
#line 106 
      tmp_17 = tmp_16 & 4278190080U;
    }
    
#line 106 
    *((__be32 *)(& in) + 2U) = ((((tmp_11 | (rqn & 16777215U)) << 24) | (((tmp_13 | (rqn & 16777215U)) << 8) & 16711680U)) | (((tmp_15 | (rqn & 16777215U)) >> 8) & 65280U)) | ((tmp_17 | (rqn & 16777215U)) >> 24);
  }
  else {
    __u32 tmp_20;
    unsigned int tmp_19;
    
#line 106 
    if (0 != 0) 
#line 106 
                tmp_19 = ((((*((__be32 *)(& in) + 2U) << 24) | ((*((__be32 *)(& in) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_18;
      
#line 106 
      tmp_18 = __fswab32(*((__be32 *)(& in) + 2U));
      
#line 106 
      tmp_19 = tmp_18 & 4278190080U;
    }
    
#line 106 
    ;
    
#line 106 
    tmp_20 = __fswab32(tmp_19 | (rqn & 16777215U));
    
#line 106 
    *((__be32 *)(& in) + 2U) = tmp_20;
  }
  
#line 108 
  mlx5_cmd_exec_check_status(dev,(u32 *)(& in),16,(u32 *)(& out),16);
  
#line 109 
  return;
}


#line 116 
void __compiletime_assert_116(void);


#line 111  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/transobj.c"
int mlx5_core_create_sq(struct mlx5_core_dev *dev, u32 *in, int inlen, u32 *sqn)
{
  u32 out[4U];
  int err;
  {
    
#line 116 
    bool __cond = (_Bool)0;
    
#line 116 
    if ((int)__cond != 0) 
#line 116 
                          __compiletime_assert_116(); else ;
  }
  
#line 116 
  if (0 != 0) {
    unsigned int tmp_2;
    unsigned int tmp_4;
    
#line 116 
    if (0 != 0) 
#line 116 
                tmp_2 = ((((*in << 24) | ((*in << 8) & 16711680U)) | ((*in >> 8) & 65280U)) | (*in >> 24)) << 24;
    else {
      __u32 tmp_1;
      
#line 116 
      tmp_1 = __fswab32(*in);
      
#line 116 
      tmp_2 = tmp_1 << 24;
    }
    
#line 116 
    if (0 != 0) 
#line 116 
                tmp_4 = (((((*in << 24) | ((*in << 8) & 16711680U)) | ((*in >> 8) & 65280U)) | (*in >> 24)) << 8) & 16711680U;
    else {
      __u32 tmp_3;
      
#line 116 
      tmp_3 = __fswab32(*in);
      
#line 116 
      tmp_4 = (tmp_3 << 8) & 16711680U;
    }
    
#line 116 
    *in = (tmp_2 | tmp_4) | 1033U;
  }
  else {
    __u32 tmp_7;
    unsigned int tmp_6;
    
#line 116 
    if (0 != 0) 
#line 116 
                tmp_6 = (((((*in << 24) | ((*in << 8) & 16711680U)) | ((*in >> 8) & 65280U)) | (*in >> 24)) & 65535U) | 151257088U;
    else {
      __u32 tmp_5;
      
#line 116 
      tmp_5 = __fswab32(*in);
      
#line 116 
      tmp_6 = (tmp_5 & 65535U) | 151257088U;
    }
    
#line 116 
    tmp_7 = __fswab32(tmp_6);
    
#line 116 
    *in = tmp_7;
  }
  
#line 118 
  memset((void *)(& out),0,16UL);
  
#line 119 
  err = mlx5_cmd_exec_check_status(dev,in,inlen,(u32 *)(& out),16);
  
#line 120 
  if (err == 0) 
    
#line 121 
    if (0 != 0) 
#line 121 
                *sqn = ((((*((__be32 *)(& out) + 2U) << 24) | ((*((__be32 *)(& out) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& out) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& out) + 2U) >> 24)) & 16777215U;
    else {
      __u32 tmp_8;
      
#line 121 
      tmp_8 = __fswab32(*((__be32 *)(& out) + 2U));
      
#line 121 
      *sqn = tmp_8 & 16777215U;
    }
  else ;
  
#line 123 
  return err;
}


#line 131 
void __compiletime_assert_131(void);


#line 126  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/transobj.c"
int mlx5_core_modify_sq(struct mlx5_core_dev *dev, u32 sqn, u32 *in, int inlen)
{
  u32 out[4U];
  int tmp_21;
  {
    
#line 130 
    bool __cond = (_Bool)0;
    
#line 130 
    if ((int)__cond != 0) 
#line 130 
                          __compiletime_assert_130(); else ;
  }
  
#line 130 
  if (0 != 0) {
    unsigned int tmp_2;
    unsigned int tmp_4;
    unsigned int tmp_6;
    unsigned int tmp_8;
    
#line 130 
    if (0 != 0) 
#line 130 
                tmp_2 = ((((*(in + 2U) << 24) | ((*(in + 2U) << 8) & 16711680U)) | ((*(in + 2U) >> 8) & 65280U)) | (*(in + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_1;
      
#line 130 
      tmp_1 = __fswab32(*(in + 2U));
      
#line 130 
      tmp_2 = tmp_1 & 4278190080U;
    }
    
#line 130 
    if (0 != 0) 
#line 130 
                tmp_4 = ((((*(in + 2U) << 24) | ((*(in + 2U) << 8) & 16711680U)) | ((*(in + 2U) >> 8) & 65280U)) | (*(in + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_3;
      
#line 130 
      tmp_3 = __fswab32(*(in + 2U));
      
#line 130 
      tmp_4 = tmp_3 & 4278190080U;
    }
    
#line 130 
    if (0 != 0) 
#line 130 
                tmp_6 = ((((*(in + 2U) << 24) | ((*(in + 2U) << 8) & 16711680U)) | ((*(in + 2U) >> 8) & 65280U)) | (*(in + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_5;
      
#line 130 
      tmp_5 = __fswab32(*(in + 2U));
      
#line 130 
      tmp_6 = tmp_5 & 4278190080U;
    }
    
#line 130 
    if (0 != 0) 
#line 130 
                tmp_8 = ((((*(in + 2U) << 24) | ((*(in + 2U) << 8) & 16711680U)) | ((*(in + 2U) >> 8) & 65280U)) | (*(in + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_7;
      
#line 130 
      tmp_7 = __fswab32(*(in + 2U));
      
#line 130 
      tmp_8 = tmp_7 & 4278190080U;
    }
    
#line 130 
    *(in + 2U) = ((((tmp_2 | (sqn & 16777215U)) << 24) | (((tmp_4 | (sqn & 16777215U)) << 8) & 16711680U)) | (((tmp_6 | (sqn & 16777215U)) >> 8) & 65280U)) | ((tmp_8 | (sqn & 16777215U)) >> 24);
  }
  else {
    __u32 tmp_11;
    unsigned int tmp_10;
    
#line 130 
    if (0 != 0) 
#line 130 
                tmp_10 = ((((*(in + 2U) << 24) | ((*(in + 2U) << 8) & 16711680U)) | ((*(in + 2U) >> 8) & 65280U)) | (*(in + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_9;
      
#line 130 
      tmp_9 = __fswab32(*(in + 2U));
      
#line 130 
      tmp_10 = tmp_9 & 4278190080U;
    }
    
#line 130 
    ;
    
#line 130 
    tmp_11 = __fswab32(tmp_10 | (sqn & 16777215U));
    
#line 130 
    *(in + 2U) = tmp_11;
  }
  {
    
#line 131 
    bool __cond_0 = (_Bool)0;
    
#line 131 
    if ((int)__cond_0 != 0) 
#line 131 
                            __compiletime_assert_131(); else ;
  }
  
#line 131 
  if (0 != 0) {
    unsigned int tmp_15;
    unsigned int tmp_17;
    
#line 131 
    if (0 != 0) 
#line 131 
                tmp_15 = ((((*in << 24) | ((*in << 8) & 16711680U)) | ((*in >> 8) & 65280U)) | (*in >> 24)) << 24;
    else {
      __u32 tmp_14;
      
#line 131 
      tmp_14 = __fswab32(*in);
      
#line 131 
      tmp_15 = tmp_14 << 24;
    }
    
#line 131 
    if (0 != 0) 
#line 131 
                tmp_17 = (((((*in << 24) | ((*in << 8) & 16711680U)) | ((*in >> 8) & 65280U)) | (*in >> 24)) << 8) & 16711680U;
    else {
      __u32 tmp_16;
      
#line 131 
      tmp_16 = __fswab32(*in);
      
#line 131 
      tmp_17 = (tmp_16 << 8) & 16711680U;
    }
    
#line 131 
    *in = (tmp_15 | tmp_17) | 1289U;
  }
  else {
    __u32 tmp_20;
    unsigned int tmp_19;
    
#line 131 
    if (0 != 0) 
#line 131 
                tmp_19 = (((((*in << 24) | ((*in << 8) & 16711680U)) | ((*in >> 8) & 65280U)) | (*in >> 24)) & 65535U) | 151322624U;
    else {
      __u32 tmp_18;
      
#line 131 
      tmp_18 = __fswab32(*in);
      
#line 131 
      tmp_19 = (tmp_18 & 65535U) | 151322624U;
    }
    
#line 131 
    tmp_20 = __fswab32(tmp_19);
    
#line 131 
    *in = tmp_20;
  }
  
#line 133 
  memset((void *)(& out),0,16UL);
  
#line 134 
  tmp_21 = mlx5_cmd_exec_check_status(dev,in,inlen,(u32 *)(& out),16);
  
#line 134 
  return tmp_21;
}


#line 144 
void __compiletime_assert_144(void);


#line 145 
void __compiletime_assert_145(void);


#line 137  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/transobj.c"
void mlx5_core_destroy_sq(struct mlx5_core_dev *dev, u32 sqn)
{
  u32 in[4U];
  u32 out[4U];
  
#line 142 
  memset((void *)(& in),0,16UL);
  {
    
#line 144 
    bool __cond = (_Bool)0;
    
#line 144 
    if ((int)__cond != 0) 
#line 144 
                          __compiletime_assert_144(); else ;
  }
  
#line 144 
  if (0 != 0) {
    unsigned int tmp_2;
    unsigned int tmp_4;
    
#line 144 
    if (0 != 0) 
#line 144 
                tmp_2 = ((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) << 24;
    else {
      __u32 tmp_1;
      
#line 144 
      tmp_1 = __fswab32(*((__be32 *)(& in)));
      
#line 144 
      tmp_2 = tmp_1 << 24;
    }
    
#line 144 
    if (0 != 0) 
#line 144 
                tmp_4 = (((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) << 8) & 16711680U;
    else {
      __u32 tmp_3;
      
#line 144 
      tmp_3 = __fswab32(*((__be32 *)(& in)));
      
#line 144 
      tmp_4 = (tmp_3 << 8) & 16711680U;
    }
    
#line 144 
    *((__be32 *)(& in)) = (tmp_2 | tmp_4) | 1545U;
  }
  else {
    __u32 tmp_7;
    unsigned int tmp_6;
    
#line 144 
    if (0 != 0) 
#line 144 
                tmp_6 = (((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) & 65535U) | 151388160U;
    else {
      __u32 tmp_5;
      
#line 144 
      tmp_5 = __fswab32(*((__be32 *)(& in)));
      
#line 144 
      tmp_6 = (tmp_5 & 65535U) | 151388160U;
    }
    
#line 144 
    tmp_7 = __fswab32(tmp_6);
    
#line 144 
    *((__be32 *)(& in)) = tmp_7;
  }
  {
    
#line 145 
    bool __cond_0 = (_Bool)0;
    
#line 145 
    if ((int)__cond_0 != 0) 
#line 145 
                            __compiletime_assert_145(); else ;
  }
  
#line 145 
  if (0 != 0) {
    unsigned int tmp_11;
    unsigned int tmp_13;
    unsigned int tmp_15;
    unsigned int tmp_17;
    
#line 145 
    if (0 != 0) 
#line 145 
                tmp_11 = ((((*((__be32 *)(& in) + 2U) << 24) | ((*((__be32 *)(& in) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_10;
      
#line 145 
      tmp_10 = __fswab32(*((__be32 *)(& in) + 2U));
      
#line 145 
      tmp_11 = tmp_10 & 4278190080U;
    }
    
#line 145 
    if (0 != 0) 
#line 145 
                tmp_13 = ((((*((__be32 *)(& in) + 2U) << 24) | ((*((__be32 *)(& in) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_12;
      
#line 145 
      tmp_12 = __fswab32(*((__be32 *)(& in) + 2U));
      
#line 145 
      tmp_13 = tmp_12 & 4278190080U;
    }
    
#line 145 
    if (0 != 0) 
#line 145 
                tmp_15 = ((((*((__be32 *)(& in) + 2U) << 24) | ((*((__be32 *)(& in) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_14;
      
#line 145 
      tmp_14 = __fswab32(*((__be32 *)(& in) + 2U));
      
#line 145 
      tmp_15 = tmp_14 & 4278190080U;
    }
    
#line 145 
    if (0 != 0) 
#line 145 
                tmp_17 = ((((*((__be32 *)(& in) + 2U) << 24) | ((*((__be32 *)(& in) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_16;
      
#line 145 
      tmp_16 = __fswab32(*((__be32 *)(& in) + 2U));
      
#line 145 
      tmp_17 = tmp_16 & 4278190080U;
    }
    
#line 145 
    *((__be32 *)(& in) + 2U) = ((((tmp_11 | (sqn & 16777215U)) << 24) | (((tmp_13 | (sqn & 16777215U)) << 8) & 16711680U)) | (((tmp_15 | (sqn & 16777215U)) >> 8) & 65280U)) | ((tmp_17 | (sqn & 16777215U)) >> 24);
  }
  else {
    __u32 tmp_20;
    unsigned int tmp_19;
    
#line 145 
    if (0 != 0) 
#line 145 
                tmp_19 = ((((*((__be32 *)(& in) + 2U) << 24) | ((*((__be32 *)(& in) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_18;
      
#line 145 
      tmp_18 = __fswab32(*((__be32 *)(& in) + 2U));
      
#line 145 
      tmp_19 = tmp_18 & 4278190080U;
    }
    
#line 145 
    ;
    
#line 145 
    tmp_20 = __fswab32(tmp_19 | (sqn & 16777215U));
    
#line 145 
    *((__be32 *)(& in) + 2U) = tmp_20;
  }
  
#line 147 
  mlx5_cmd_exec_check_status(dev,(u32 *)(& in),16,(u32 *)(& out),16);
  
#line 148 
  return;
}


#line 156 
void __compiletime_assert_156(void);


#line 150  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/transobj.c"
int mlx5_core_create_tir(struct mlx5_core_dev *dev, u32 *in, int inlen, u32 *tirn)
{
  u32 out[4U];
  int err;
  {
    
#line 156 
    bool __cond = (_Bool)0;
    
#line 156 
    if ((int)__cond != 0) 
#line 156 
                          __compiletime_assert_156(); else ;
  }
  
#line 156 
  if (0 != 0) {
    unsigned int tmp_2;
    unsigned int tmp_4;
    
#line 156 
    if (0 != 0) 
#line 156 
                tmp_2 = ((((*in << 24) | ((*in << 8) & 16711680U)) | ((*in >> 8) & 65280U)) | (*in >> 24)) << 24;
    else {
      __u32 tmp_1;
      
#line 156 
      tmp_1 = __fswab32(*in);
      
#line 156 
      tmp_2 = tmp_1 << 24;
    }
    
#line 156 
    if (0 != 0) 
#line 156 
                tmp_4 = (((((*in << 24) | ((*in << 8) & 16711680U)) | ((*in >> 8) & 65280U)) | (*in >> 24)) << 8) & 16711680U;
    else {
      __u32 tmp_3;
      
#line 156 
      tmp_3 = __fswab32(*in);
      
#line 156 
      tmp_4 = (tmp_3 << 8) & 16711680U;
    }
    
#line 156 
    *in = (tmp_2 | tmp_4) | 9U;
  }
  else {
    __u32 tmp_7;
    unsigned int tmp_6;
    
#line 156 
    if (0 != 0) 
#line 156 
                tmp_6 = (((((*in << 24) | ((*in << 8) & 16711680U)) | ((*in >> 8) & 65280U)) | (*in >> 24)) & 65535U) | 150994944U;
    else {
      __u32 tmp_5;
      
#line 156 
      tmp_5 = __fswab32(*in);
      
#line 156 
      tmp_6 = (tmp_5 & 65535U) | 150994944U;
    }
    
#line 156 
    tmp_7 = __fswab32(tmp_6);
    
#line 156 
    *in = tmp_7;
  }
  
#line 158 
  memset((void *)(& out),0,16UL);
  
#line 159 
  err = mlx5_cmd_exec_check_status(dev,in,inlen,(u32 *)(& out),16);
  
#line 160 
  if (err == 0) 
    
#line 161 
    if (0 != 0) 
#line 161 
                *tirn = ((((*((__be32 *)(& out) + 2U) << 24) | ((*((__be32 *)(& out) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& out) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& out) + 2U) >> 24)) & 16777215U;
    else {
      __u32 tmp_8;
      
#line 161 
      tmp_8 = __fswab32(*((__be32 *)(& out) + 2U));
      
#line 161 
      *tirn = tmp_8 & 16777215U;
    }
  else ;
  
#line 163 
  return err;
}


#line 173 
void __compiletime_assert_173(void);


#line 174 
void __compiletime_assert_174(void);


#line 166  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/transobj.c"
void mlx5_core_destroy_tir(struct mlx5_core_dev *dev, u32 tirn)
{
  u32 in[4U];
  u32 out[4U];
  
#line 171 
  memset((void *)(& in),0,16UL);
  {
    
#line 173 
    bool __cond = (_Bool)0;
    
#line 173 
    if ((int)__cond != 0) 
#line 173 
                          __compiletime_assert_173(); else ;
  }
  
#line 173 
  if (0 != 0) {
    unsigned int tmp_2;
    unsigned int tmp_4;
    
#line 173 
    if (0 != 0) 
#line 173 
                tmp_2 = ((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) << 24;
    else {
      __u32 tmp_1;
      
#line 173 
      tmp_1 = __fswab32(*((__be32 *)(& in)));
      
#line 173 
      tmp_2 = tmp_1 << 24;
    }
    
#line 173 
    if (0 != 0) 
#line 173 
                tmp_4 = (((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) << 8) & 16711680U;
    else {
      __u32 tmp_3;
      
#line 173 
      tmp_3 = __fswab32(*((__be32 *)(& in)));
      
#line 173 
      tmp_4 = (tmp_3 << 8) & 16711680U;
    }
    
#line 173 
    *((__be32 *)(& in)) = (tmp_2 | tmp_4) | 521U;
  }
  else {
    __u32 tmp_7;
    unsigned int tmp_6;
    
#line 173 
    if (0 != 0) 
#line 173 
                tmp_6 = (((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) & 65535U) | 151126016U;
    else {
      __u32 tmp_5;
      
#line 173 
      tmp_5 = __fswab32(*((__be32 *)(& in)));
      
#line 173 
      tmp_6 = (tmp_5 & 65535U) | 151126016U;
    }
    
#line 173 
    tmp_7 = __fswab32(tmp_6);
    
#line 173 
    *((__be32 *)(& in)) = tmp_7;
  }
  {
    
#line 174 
    bool __cond_0 = (_Bool)0;
    
#line 174 
    if ((int)__cond_0 != 0) 
#line 174 
                            __compiletime_assert_174(); else ;
  }
  
#line 174 
  if (0 != 0) {
    unsigned int tmp_11;
    unsigned int tmp_13;
    unsigned int tmp_15;
    unsigned int tmp_17;
    
#line 174 
    if (0 != 0) 
#line 174 
                tmp_11 = ((((*((__be32 *)(& in) + 2U) << 24) | ((*((__be32 *)(& in) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_10;
      
#line 174 
      tmp_10 = __fswab32(*((__be32 *)(& in) + 2U));
      
#line 174 
      tmp_11 = tmp_10 & 4278190080U;
    }
    
#line 174 
    if (0 != 0) 
#line 174 
                tmp_13 = ((((*((__be32 *)(& in) + 2U) << 24) | ((*((__be32 *)(& in) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_12;
      
#line 174 
      tmp_12 = __fswab32(*((__be32 *)(& in) + 2U));
      
#line 174 
      tmp_13 = tmp_12 & 4278190080U;
    }
    
#line 174 
    if (0 != 0) 
#line 174 
                tmp_15 = ((((*((__be32 *)(& in) + 2U) << 24) | ((*((__be32 *)(& in) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_14;
      
#line 174 
      tmp_14 = __fswab32(*((__be32 *)(& in) + 2U));
      
#line 174 
      tmp_15 = tmp_14 & 4278190080U;
    }
    
#line 174 
    if (0 != 0) 
#line 174 
                tmp_17 = ((((*((__be32 *)(& in) + 2U) << 24) | ((*((__be32 *)(& in) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_16;
      
#line 174 
      tmp_16 = __fswab32(*((__be32 *)(& in) + 2U));
      
#line 174 
      tmp_17 = tmp_16 & 4278190080U;
    }
    
#line 174 
    *((__be32 *)(& in) + 2U) = ((((tmp_11 | (tirn & 16777215U)) << 24) | (((tmp_13 | (tirn & 16777215U)) << 8) & 16711680U)) | (((tmp_15 | (tirn & 16777215U)) >> 8) & 65280U)) | ((tmp_17 | (tirn & 16777215U)) >> 24);
  }
  else {
    __u32 tmp_20;
    unsigned int tmp_19;
    
#line 174 
    if (0 != 0) 
#line 174 
                tmp_19 = ((((*((__be32 *)(& in) + 2U) << 24) | ((*((__be32 *)(& in) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_18;
      
#line 174 
      tmp_18 = __fswab32(*((__be32 *)(& in) + 2U));
      
#line 174 
      tmp_19 = tmp_18 & 4278190080U;
    }
    
#line 174 
    ;
    
#line 174 
    tmp_20 = __fswab32(tmp_19 | (tirn & 16777215U));
    
#line 174 
    *((__be32 *)(& in) + 2U) = tmp_20;
  }
  
#line 176 
  mlx5_cmd_exec_check_status(dev,(u32 *)(& in),16,(u32 *)(& out),16);
  
#line 177 
  return;
}


#line 185 
void __compiletime_assert_185(void);


#line 179  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/transobj.c"
int mlx5_core_create_tis(struct mlx5_core_dev *dev, u32 *in, int inlen, u32 *tisn)
{
  u32 out[4U];
  int err;
  {
    
#line 185 
    bool __cond = (_Bool)0;
    
#line 185 
    if ((int)__cond != 0) 
#line 185 
                          __compiletime_assert_185(); else ;
  }
  
#line 185 
  if (0 != 0) {
    unsigned int tmp_2;
    unsigned int tmp_4;
    
#line 185 
    if (0 != 0) 
#line 185 
                tmp_2 = ((((*in << 24) | ((*in << 8) & 16711680U)) | ((*in >> 8) & 65280U)) | (*in >> 24)) << 24;
    else {
      __u32 tmp_1;
      
#line 185 
      tmp_1 = __fswab32(*in);
      
#line 185 
      tmp_2 = tmp_1 << 24;
    }
    
#line 185 
    if (0 != 0) 
#line 185 
                tmp_4 = (((((*in << 24) | ((*in << 8) & 16711680U)) | ((*in >> 8) & 65280U)) | (*in >> 24)) << 8) & 16711680U;
    else {
      __u32 tmp_3;
      
#line 185 
      tmp_3 = __fswab32(*in);
      
#line 185 
      tmp_4 = (tmp_3 << 8) & 16711680U;
    }
    
#line 185 
    *in = (tmp_2 | tmp_4) | 4617U;
  }
  else {
    __u32 tmp_7;
    unsigned int tmp_6;
    
#line 185 
    if (0 != 0) 
#line 185 
                tmp_6 = (((((*in << 24) | ((*in << 8) & 16711680U)) | ((*in >> 8) & 65280U)) | (*in >> 24)) & 65535U) | 152174592U;
    else {
      __u32 tmp_5;
      
#line 185 
      tmp_5 = __fswab32(*in);
      
#line 185 
      tmp_6 = (tmp_5 & 65535U) | 152174592U;
    }
    
#line 185 
    tmp_7 = __fswab32(tmp_6);
    
#line 185 
    *in = tmp_7;
  }
  
#line 187 
  memset((void *)(& out),0,16UL);
  
#line 188 
  err = mlx5_cmd_exec_check_status(dev,in,inlen,(u32 *)(& out),16);
  
#line 189 
  if (err == 0) 
    
#line 190 
    if (0 != 0) 
#line 190 
                *tisn = ((((*((__be32 *)(& out) + 2U) << 24) | ((*((__be32 *)(& out) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& out) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& out) + 2U) >> 24)) & 16777215U;
    else {
      __u32 tmp_8;
      
#line 190 
      tmp_8 = __fswab32(*((__be32 *)(& out) + 2U));
      
#line 190 
      *tisn = tmp_8 & 16777215U;
    }
  else ;
  
#line 192 
  return err;
}


#line 202 
void __compiletime_assert_202(void);


#line 203 
void __compiletime_assert_203(void);


#line 195  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/transobj.c"
void mlx5_core_destroy_tis(struct mlx5_core_dev *dev, u32 tisn)
{
  u32 in[4U];
  u32 out[4U];
  
#line 200 
  memset((void *)(& in),0,16UL);
  {
    
#line 202 
    bool __cond = (_Bool)0;
    
#line 202 
    if ((int)__cond != 0) 
#line 202 
                          __compiletime_assert_202(); else ;
  }
  
#line 202 
  if (0 != 0) {
    unsigned int tmp_2;
    unsigned int tmp_4;
    
#line 202 
    if (0 != 0) 
#line 202 
                tmp_2 = ((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) << 24;
    else {
      __u32 tmp_1;
      
#line 202 
      tmp_1 = __fswab32(*((__be32 *)(& in)));
      
#line 202 
      tmp_2 = tmp_1 << 24;
    }
    
#line 202 
    if (0 != 0) 
#line 202 
                tmp_4 = (((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) << 8) & 16711680U;
    else {
      __u32 tmp_3;
      
#line 202 
      tmp_3 = __fswab32(*((__be32 *)(& in)));
      
#line 202 
      tmp_4 = (tmp_3 << 8) & 16711680U;
    }
    
#line 202 
    *((__be32 *)(& in)) = (tmp_2 | tmp_4) | 5129U;
  }
  else {
    __u32 tmp_7;
    unsigned int tmp_6;
    
#line 202 
    if (0 != 0) 
#line 202 
                tmp_6 = (((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) & 65535U) | 152305664U;
    else {
      __u32 tmp_5;
      
#line 202 
      tmp_5 = __fswab32(*((__be32 *)(& in)));
      
#line 202 
      tmp_6 = (tmp_5 & 65535U) | 152305664U;
    }
    
#line 202 
    tmp_7 = __fswab32(tmp_6);
    
#line 202 
    *((__be32 *)(& in)) = tmp_7;
  }
  {
    
#line 203 
    bool __cond_0 = (_Bool)0;
    
#line 203 
    if ((int)__cond_0 != 0) 
#line 203 
                            __compiletime_assert_203(); else ;
  }
  
#line 203 
  if (0 != 0) {
    unsigned int tmp_11;
    unsigned int tmp_13;
    unsigned int tmp_15;
    unsigned int tmp_17;
    
#line 203 
    if (0 != 0) 
#line 203 
                tmp_11 = ((((*((__be32 *)(& in) + 2U) << 24) | ((*((__be32 *)(& in) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_10;
      
#line 203 
      tmp_10 = __fswab32(*((__be32 *)(& in) + 2U));
      
#line 203 
      tmp_11 = tmp_10 & 4278190080U;
    }
    
#line 203 
    if (0 != 0) 
#line 203 
                tmp_13 = ((((*((__be32 *)(& in) + 2U) << 24) | ((*((__be32 *)(& in) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_12;
      
#line 203 
      tmp_12 = __fswab32(*((__be32 *)(& in) + 2U));
      
#line 203 
      tmp_13 = tmp_12 & 4278190080U;
    }
    
#line 203 
    if (0 != 0) 
#line 203 
                tmp_15 = ((((*((__be32 *)(& in) + 2U) << 24) | ((*((__be32 *)(& in) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_14;
      
#line 203 
      tmp_14 = __fswab32(*((__be32 *)(& in) + 2U));
      
#line 203 
      tmp_15 = tmp_14 & 4278190080U;
    }
    
#line 203 
    if (0 != 0) 
#line 203 
                tmp_17 = ((((*((__be32 *)(& in) + 2U) << 24) | ((*((__be32 *)(& in) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_16;
      
#line 203 
      tmp_16 = __fswab32(*((__be32 *)(& in) + 2U));
      
#line 203 
      tmp_17 = tmp_16 & 4278190080U;
    }
    
#line 203 
    *((__be32 *)(& in) + 2U) = ((((tmp_11 | (tisn & 16777215U)) << 24) | (((tmp_13 | (tisn & 16777215U)) << 8) & 16711680U)) | (((tmp_15 | (tisn & 16777215U)) >> 8) & 65280U)) | ((tmp_17 | (tisn & 16777215U)) >> 24);
  }
  else {
    __u32 tmp_20;
    unsigned int tmp_19;
    
#line 203 
    if (0 != 0) 
#line 203 
                tmp_19 = ((((*((__be32 *)(& in) + 2U) << 24) | ((*((__be32 *)(& in) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_18;
      
#line 203 
      tmp_18 = __fswab32(*((__be32 *)(& in) + 2U));
      
#line 203 
      tmp_19 = tmp_18 & 4278190080U;
    }
    
#line 203 
    ;
    
#line 203 
    tmp_20 = __fswab32(tmp_19 | (tisn & 16777215U));
    
#line 203 
    *((__be32 *)(& in) + 2U) = tmp_20;
  }
  
#line 205 
  mlx5_cmd_exec_check_status(dev,(u32 *)(& in),16,(u32 *)(& out),16);
  
#line 206 
  return;
}


#line 214 
void __compiletime_assert_214(void);


#line 208  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/transobj.c"
int mlx5_core_create_rmp(struct mlx5_core_dev *dev, u32 *in, int inlen, u32 *rmpn)
{
  u32 out[4U];
  int err;
  {
    
#line 214 
    bool __cond = (_Bool)0;
    
#line 214 
    if ((int)__cond != 0) 
#line 214 
                          __compiletime_assert_214(); else ;
  }
  
#line 214 
  if (0 != 0) {
    unsigned int tmp_2;
    unsigned int tmp_4;
    
#line 214 
    if (0 != 0) 
#line 214 
                tmp_2 = ((((*in << 24) | ((*in << 8) & 16711680U)) | ((*in >> 8) & 65280U)) | (*in >> 24)) << 24;
    else {
      __u32 tmp_1;
      
#line 214 
      tmp_1 = __fswab32(*in);
      
#line 214 
      tmp_2 = tmp_1 << 24;
    }
    
#line 214 
    if (0 != 0) 
#line 214 
                tmp_4 = (((((*in << 24) | ((*in << 8) & 16711680U)) | ((*in >> 8) & 65280U)) | (*in >> 24)) << 8) & 16711680U;
    else {
      __u32 tmp_3;
      
#line 214 
      tmp_3 = __fswab32(*in);
      
#line 214 
      tmp_4 = (tmp_3 << 8) & 16711680U;
    }
    
#line 214 
    *in = (tmp_2 | tmp_4) | 3081U;
  }
  else {
    __u32 tmp_7;
    unsigned int tmp_6;
    
#line 214 
    if (0 != 0) 
#line 214 
                tmp_6 = (((((*in << 24) | ((*in << 8) & 16711680U)) | ((*in >> 8) & 65280U)) | (*in >> 24)) & 65535U) | 151781376U;
    else {
      __u32 tmp_5;
      
#line 214 
      tmp_5 = __fswab32(*in);
      
#line 214 
      tmp_6 = (tmp_5 & 65535U) | 151781376U;
    }
    
#line 214 
    tmp_7 = __fswab32(tmp_6);
    
#line 214 
    *in = tmp_7;
  }
  
#line 216 
  memset((void *)(& out),0,16UL);
  
#line 217 
  err = mlx5_cmd_exec_check_status(dev,in,inlen,(u32 *)(& out),16);
  
#line 218 
  if (err == 0) 
    
#line 219 
    if (0 != 0) 
#line 219 
                *rmpn = ((((*((__be32 *)(& out) + 2U) << 24) | ((*((__be32 *)(& out) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& out) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& out) + 2U) >> 24)) & 16777215U;
    else {
      __u32 tmp_8;
      
#line 219 
      tmp_8 = __fswab32(*((__be32 *)(& out) + 2U));
      
#line 219 
      *rmpn = tmp_8 & 16777215U;
    }
  else ;
  
#line 221 
  return err;
}


#line 228 
void __compiletime_assert_228(void);


#line 224  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/transobj.c"
int mlx5_core_modify_rmp(struct mlx5_core_dev *dev, u32 *in, int inlen)
{
  u32 out[4U];
  int tmp_8;
  {
    
#line 228 
    bool __cond = (_Bool)0;
    
#line 228 
    if ((int)__cond != 0) 
#line 228 
                          __compiletime_assert_228(); else ;
  }
  
#line 228 
  if (0 != 0) {
    unsigned int tmp_2;
    unsigned int tmp_4;
    
#line 228 
    if (0 != 0) 
#line 228 
                tmp_2 = ((((*in << 24) | ((*in << 8) & 16711680U)) | ((*in >> 8) & 65280U)) | (*in >> 24)) << 24;
    else {
      __u32 tmp_1;
      
#line 228 
      tmp_1 = __fswab32(*in);
      
#line 228 
      tmp_2 = tmp_1 << 24;
    }
    
#line 228 
    if (0 != 0) 
#line 228 
                tmp_4 = (((((*in << 24) | ((*in << 8) & 16711680U)) | ((*in >> 8) & 65280U)) | (*in >> 24)) << 8) & 16711680U;
    else {
      __u32 tmp_3;
      
#line 228 
      tmp_3 = __fswab32(*in);
      
#line 228 
      tmp_4 = (tmp_3 << 8) & 16711680U;
    }
    
#line 228 
    *in = (tmp_2 | tmp_4) | 3337U;
  }
  else {
    __u32 tmp_7;
    unsigned int tmp_6;
    
#line 228 
    if (0 != 0) 
#line 228 
                tmp_6 = (((((*in << 24) | ((*in << 8) & 16711680U)) | ((*in >> 8) & 65280U)) | (*in >> 24)) & 65535U) | 151846912U;
    else {
      __u32 tmp_5;
      
#line 228 
      tmp_5 = __fswab32(*in);
      
#line 228 
      tmp_6 = (tmp_5 & 65535U) | 151846912U;
    }
    
#line 228 
    tmp_7 = __fswab32(tmp_6);
    
#line 228 
    *in = tmp_7;
  }
  
#line 230 
  memset((void *)(& out),0,16UL);
  
#line 231 
  tmp_8 = mlx5_cmd_exec_check_status(dev,in,inlen,(u32 *)(& out),16);
  
#line 231 
  return tmp_8;
}


#line 242 
void __compiletime_assert_242(void);


#line 234  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/transobj.c"
int mlx5_core_destroy_rmp(struct mlx5_core_dev *dev, u32 rmpn)
{
  u32 in[4U];
  u32 out[4U];
  int tmp_21;
  
#line 239 
  memset((void *)(& in),0,16UL);
  {
    
#line 241 
    bool __cond = (_Bool)0;
    
#line 241 
    if ((int)__cond != 0) 
#line 241 
                          __compiletime_assert_241(); else ;
  }
  
#line 241 
  if (0 != 0) {
    unsigned int tmp_2;
    unsigned int tmp_4;
    
#line 241 
    if (0 != 0) 
#line 241 
                tmp_2 = ((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) << 24;
    else {
      __u32 tmp_1;
      
#line 241 
      tmp_1 = __fswab32(*((__be32 *)(& in)));
      
#line 241 
      tmp_2 = tmp_1 << 24;
    }
    
#line 241 
    if (0 != 0) 
#line 241 
                tmp_4 = (((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) << 8) & 16711680U;
    else {
      __u32 tmp_3;
      
#line 241 
      tmp_3 = __fswab32(*((__be32 *)(& in)));
      
#line 241 
      tmp_4 = (tmp_3 << 8) & 16711680U;
    }
    
#line 241 
    *((__be32 *)(& in)) = (tmp_2 | tmp_4) | 3593U;
  }
  else {
    __u32 tmp_7;
    unsigned int tmp_6;
    
#line 241 
    if (0 != 0) 
#line 241 
                tmp_6 = (((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) & 65535U) | 151912448U;
    else {
      __u32 tmp_5;
      
#line 241 
      tmp_5 = __fswab32(*((__be32 *)(& in)));
      
#line 241 
      tmp_6 = (tmp_5 & 65535U) | 151912448U;
    }
    
#line 241 
    tmp_7 = __fswab32(tmp_6);
    
#line 241 
    *((__be32 *)(& in)) = tmp_7;
  }
  {
    
#line 242 
    bool __cond_0 = (_Bool)0;
    
#line 242 
    if ((int)__cond_0 != 0) 
#line 242 
                            __compiletime_assert_242(); else ;
  }
  
#line 242 
  if (0 != 0) {
    unsigned int tmp_11;
    unsigned int tmp_13;
    unsigned int tmp_15;
    unsigned int tmp_17;
    
#line 242 
    if (0 != 0) 
#line 242 
                tmp_11 = ((((*((__be32 *)(& in) + 2U) << 24) | ((*((__be32 *)(& in) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_10;
      
#line 242 
      tmp_10 = __fswab32(*((__be32 *)(& in) + 2U));
      
#line 242 
      tmp_11 = tmp_10 & 4278190080U;
    }
    
#line 242 
    if (0 != 0) 
#line 242 
                tmp_13 = ((((*((__be32 *)(& in) + 2U) << 24) | ((*((__be32 *)(& in) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_12;
      
#line 242 
      tmp_12 = __fswab32(*((__be32 *)(& in) + 2U));
      
#line 242 
      tmp_13 = tmp_12 & 4278190080U;
    }
    
#line 242 
    if (0 != 0) 
#line 242 
                tmp_15 = ((((*((__be32 *)(& in) + 2U) << 24) | ((*((__be32 *)(& in) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_14;
      
#line 242 
      tmp_14 = __fswab32(*((__be32 *)(& in) + 2U));
      
#line 242 
      tmp_15 = tmp_14 & 4278190080U;
    }
    
#line 242 
    if (0 != 0) 
#line 242 
                tmp_17 = ((((*((__be32 *)(& in) + 2U) << 24) | ((*((__be32 *)(& in) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_16;
      
#line 242 
      tmp_16 = __fswab32(*((__be32 *)(& in) + 2U));
      
#line 242 
      tmp_17 = tmp_16 & 4278190080U;
    }
    
#line 242 
    *((__be32 *)(& in) + 2U) = ((((tmp_11 | (rmpn & 16777215U)) << 24) | (((tmp_13 | (rmpn & 16777215U)) << 8) & 16711680U)) | (((tmp_15 | (rmpn & 16777215U)) >> 8) & 65280U)) | ((tmp_17 | (rmpn & 16777215U)) >> 24);
  }
  else {
    __u32 tmp_20;
    unsigned int tmp_19;
    
#line 242 
    if (0 != 0) 
#line 242 
                tmp_19 = ((((*((__be32 *)(& in) + 2U) << 24) | ((*((__be32 *)(& in) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_18;
      
#line 242 
      tmp_18 = __fswab32(*((__be32 *)(& in) + 2U));
      
#line 242 
      tmp_19 = tmp_18 & 4278190080U;
    }
    
#line 242 
    ;
    
#line 242 
    tmp_20 = __fswab32(tmp_19 | (rmpn & 16777215U));
    
#line 242 
    *((__be32 *)(& in) + 2U) = tmp_20;
  }
  
#line 244 
  tmp_21 = mlx5_cmd_exec_check_status(dev,(u32 *)(& in),16,(u32 *)(& out),16);
  
#line 244 
  return tmp_21;
}


#line 254 
void __compiletime_assert_254(void);


#line 255 
void __compiletime_assert_255(void);


#line 248  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/transobj.c"
int mlx5_core_query_rmp(struct mlx5_core_dev *dev, u32 rmpn, u32 *out)
{
  u32 in[4U];
  int tmp_21;
  
#line 251 
  int outlen = 272;
  
#line 253 
  memset((void *)(& in),0,16UL);
  {
    
#line 254 
    bool __cond = (_Bool)0;
    
#line 254 
    if ((int)__cond != 0) 
#line 254 
                          __compiletime_assert_254(); else ;
  }
  
#line 254 
  if (0 != 0) {
    unsigned int tmp_2;
    unsigned int tmp_4;
    
#line 254 
    if (0 != 0) 
#line 254 
                tmp_2 = ((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) << 24;
    else {
      __u32 tmp_1;
      
#line 254 
      tmp_1 = __fswab32(*((__be32 *)(& in)));
      
#line 254 
      tmp_2 = tmp_1 << 24;
    }
    
#line 254 
    if (0 != 0) 
#line 254 
                tmp_4 = (((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) << 8) & 16711680U;
    else {
      __u32 tmp_3;
      
#line 254 
      tmp_3 = __fswab32(*((__be32 *)(& in)));
      
#line 254 
      tmp_4 = (tmp_3 << 8) & 16711680U;
    }
    
#line 254 
    *((__be32 *)(& in)) = (tmp_2 | tmp_4) | 3849U;
  }
  else {
    __u32 tmp_7;
    unsigned int tmp_6;
    
#line 254 
    if (0 != 0) 
#line 254 
                tmp_6 = (((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) & 65535U) | 151977984U;
    else {
      __u32 tmp_5;
      
#line 254 
      tmp_5 = __fswab32(*((__be32 *)(& in)));
      
#line 254 
      tmp_6 = (tmp_5 & 65535U) | 151977984U;
    }
    
#line 254 
    tmp_7 = __fswab32(tmp_6);
    
#line 254 
    *((__be32 *)(& in)) = tmp_7;
  }
  {
    
#line 255 
    bool __cond_0 = (_Bool)0;
    
#line 255 
    if ((int)__cond_0 != 0) 
#line 255 
                            __compiletime_assert_255(); else ;
  }
  
#line 255 
  if (0 != 0) {
    unsigned int tmp_11;
    unsigned int tmp_13;
    unsigned int tmp_15;
    unsigned int tmp_17;
    
#line 255 
    if (0 != 0) 
#line 255 
                tmp_11 = ((((*((__be32 *)(& in) + 2U) << 24) | ((*((__be32 *)(& in) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_10;
      
#line 255 
      tmp_10 = __fswab32(*((__be32 *)(& in) + 2U));
      
#line 255 
      tmp_11 = tmp_10 & 4278190080U;
    }
    
#line 255 
    if (0 != 0) 
#line 255 
                tmp_13 = ((((*((__be32 *)(& in) + 2U) << 24) | ((*((__be32 *)(& in) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_12;
      
#line 255 
      tmp_12 = __fswab32(*((__be32 *)(& in) + 2U));
      
#line 255 
      tmp_13 = tmp_12 & 4278190080U;
    }
    
#line 255 
    if (0 != 0) 
#line 255 
                tmp_15 = ((((*((__be32 *)(& in) + 2U) << 24) | ((*((__be32 *)(& in) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_14;
      
#line 255 
      tmp_14 = __fswab32(*((__be32 *)(& in) + 2U));
      
#line 255 
      tmp_15 = tmp_14 & 4278190080U;
    }
    
#line 255 
    if (0 != 0) 
#line 255 
                tmp_17 = ((((*((__be32 *)(& in) + 2U) << 24) | ((*((__be32 *)(& in) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_16;
      
#line 255 
      tmp_16 = __fswab32(*((__be32 *)(& in) + 2U));
      
#line 255 
      tmp_17 = tmp_16 & 4278190080U;
    }
    
#line 255 
    *((__be32 *)(& in) + 2U) = ((((tmp_11 | (rmpn & 16777215U)) << 24) | (((tmp_13 | (rmpn & 16777215U)) << 8) & 16711680U)) | (((tmp_15 | (rmpn & 16777215U)) >> 8) & 65280U)) | ((tmp_17 | (rmpn & 16777215U)) >> 24);
  }
  else {
    __u32 tmp_20;
    unsigned int tmp_19;
    
#line 255 
    if (0 != 0) 
#line 255 
                tmp_19 = ((((*((__be32 *)(& in) + 2U) << 24) | ((*((__be32 *)(& in) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_18;
      
#line 255 
      tmp_18 = __fswab32(*((__be32 *)(& in) + 2U));
      
#line 255 
      tmp_19 = tmp_18 & 4278190080U;
    }
    
#line 255 
    ;
    
#line 255 
    tmp_20 = __fswab32(tmp_19 | (rmpn & 16777215U));
    
#line 255 
    *((__be32 *)(& in) + 2U) = tmp_20;
  }
  
#line 257 
  tmp_21 = mlx5_cmd_exec_check_status(dev,(u32 *)(& in),16,out,outlen);
  
#line 257 
  return tmp_21;
}


#line 276 
void __compiletime_assert_276(void);


#line 277 
void __compiletime_assert_277(void);


#line 278 
void __compiletime_assert_278(void);


#line 280 
void __compiletime_assert_280(void);


#line 260  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/transobj.c"
int mlx5_core_arm_rmp(struct mlx5_core_dev *dev, u32 rmpn, u16 lwm)
{
  int __retres;
  void *in;
  void *rmpc;
  void *wq;
  void *bitmask;
  int err;
  
#line 268 
  in = mlx5_vzalloc_5(272UL);
  
#line 269 
  if (in == (void *)0) {
    
#line 270 
    __retres = -12;
    
#line 270 
    goto return_label;
  }
  else ;
  
#line 272 
  rmpc = in + 32U;
  
#line 273 
  bitmask = in + 16U;
  
#line 274 
  wq = rmpc + 48U;
  {
    
#line 276 
    bool __cond = (_Bool)0;
    
#line 276 
    if ((int)__cond != 0) 
#line 276 
                          __compiletime_assert_276(); else ;
  }
  
#line 276 
  if (0 != 0) {
    unsigned int tmp_2;
    unsigned int tmp_4;
    unsigned int tmp_6;
    unsigned int tmp_8;
    
#line 276 
    if (0 != 0) 
#line 276 
                tmp_2 = ((((*((__be32 *)in + 2U) << 24) | ((*((__be32 *)in + 2U) << 8) & 16711680U)) | ((*((__be32 *)in + 2U) >> 8) & 65280U)) | (*((__be32 *)in + 2U) >> 24)) << 24;
    else {
      __u32 tmp_1;
      
#line 276 
      tmp_1 = __fswab32(*((__be32 *)in + 2U));
      
#line 276 
      tmp_2 = tmp_1 << 24;
    }
    
#line 276 
    if (0 != 0) 
#line 276 
                tmp_4 = (((((*((__be32 *)in + 2U) << 24) | ((*((__be32 *)in + 2U) << 8) & 16711680U)) | ((*((__be32 *)in + 2U) >> 8) & 65280U)) | (*((__be32 *)in + 2U) >> 24)) << 8) & 16711680U;
    else {
      __u32 tmp_3;
      
#line 276 
      tmp_3 = __fswab32(*((__be32 *)in + 2U));
      
#line 276 
      tmp_4 = (tmp_3 << 8) & 16711680U;
    }
    
#line 276 
    if (0 != 0) 
#line 276 
                tmp_6 = (((((*((__be32 *)in + 2U) << 24) | ((*((__be32 *)in + 2U) << 8) & 16711680U)) | ((*((__be32 *)in + 2U) >> 8) & 65280U)) | (*((__be32 *)in + 2U) >> 24)) >> 8) & 65280U;
    else {
      __u32 tmp_5;
      
#line 276 
      tmp_5 = __fswab32(*((__be32 *)in + 2U));
      
#line 276 
      tmp_6 = (tmp_5 >> 8) & 65280U;
    }
    
#line 276 
    if (0 != 0) 
#line 276 
                tmp_8 = ((((((*((__be32 *)in + 2U) << 24) | ((*((__be32 *)in + 2U) << 8) & 16711680U)) | ((*((__be32 *)in + 2U) >> 8) & 65280U)) | (*((__be32 *)in + 2U) >> 24)) >> 24) & 15U) | 16U;
    else {
      __u32 tmp_7;
      
#line 276 
      tmp_7 = __fswab32(*((__be32 *)in + 2U));
      
#line 276 
      tmp_8 = ((tmp_7 >> 24) & 15U) | 16U;
    }
    
#line 276 
    *((__be32 *)in + 2U) = ((tmp_2 | tmp_4) | tmp_6) | tmp_8;
  }
  else {
    __u32 tmp_11;
    unsigned int tmp_10;
    
#line 276 
    if (0 != 0) 
#line 276 
                tmp_10 = (((((*((__be32 *)in + 2U) << 24) | ((*((__be32 *)in + 2U) << 8) & 16711680U)) | ((*((__be32 *)in + 2U) >> 8) & 65280U)) | (*((__be32 *)in + 2U) >> 24)) & 268435455U) | 268435456U;
    else {
      __u32 tmp_9;
      
#line 276 
      tmp_9 = __fswab32(*((__be32 *)in + 2U));
      
#line 276 
      tmp_10 = (tmp_9 & 268435455U) | 268435456U;
    }
    
#line 276 
    tmp_11 = __fswab32(tmp_10);
    
#line 276 
    *((__be32 *)in + 2U) = tmp_11;
  }
  {
    
#line 277 
    bool __cond_0 = (_Bool)0;
    
#line 277 
    if ((int)__cond_0 != 0) 
#line 277 
                            __compiletime_assert_277(); else ;
  }
  
#line 277 
  if (0 != 0) {
    unsigned int tmp_15;
    unsigned int tmp_17;
    unsigned int tmp_19;
    unsigned int tmp_21;
    
#line 277 
    if (0 != 0) 
#line 277 
                tmp_15 = ((((*((__be32 *)in + 2U) << 24) | ((*((__be32 *)in + 2U) << 8) & 16711680U)) | ((*((__be32 *)in + 2U) >> 8) & 65280U)) | (*((__be32 *)in + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_14;
      
#line 277 
      tmp_14 = __fswab32(*((__be32 *)in + 2U));
      
#line 277 
      tmp_15 = tmp_14 & 4278190080U;
    }
    
#line 277 
    if (0 != 0) 
#line 277 
                tmp_17 = ((((*((__be32 *)in + 2U) << 24) | ((*((__be32 *)in + 2U) << 8) & 16711680U)) | ((*((__be32 *)in + 2U) >> 8) & 65280U)) | (*((__be32 *)in + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_16;
      
#line 277 
      tmp_16 = __fswab32(*((__be32 *)in + 2U));
      
#line 277 
      tmp_17 = tmp_16 & 4278190080U;
    }
    
#line 277 
    if (0 != 0) 
#line 277 
                tmp_19 = ((((*((__be32 *)in + 2U) << 24) | ((*((__be32 *)in + 2U) << 8) & 16711680U)) | ((*((__be32 *)in + 2U) >> 8) & 65280U)) | (*((__be32 *)in + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_18;
      
#line 277 
      tmp_18 = __fswab32(*((__be32 *)in + 2U));
      
#line 277 
      tmp_19 = tmp_18 & 4278190080U;
    }
    
#line 277 
    if (0 != 0) 
#line 277 
                tmp_21 = ((((*((__be32 *)in + 2U) << 24) | ((*((__be32 *)in + 2U) << 8) & 16711680U)) | ((*((__be32 *)in + 2U) >> 8) & 65280U)) | (*((__be32 *)in + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_20;
      
#line 277 
      tmp_20 = __fswab32(*((__be32 *)in + 2U));
      
#line 277 
      tmp_21 = tmp_20 & 4278190080U;
    }
    
#line 277 
    *((__be32 *)in + 2U) = ((((tmp_15 | (rmpn & 16777215U)) << 24) | (((tmp_17 | (rmpn & 16777215U)) << 8) & 16711680U)) | (((tmp_19 | (rmpn & 16777215U)) >> 8) & 65280U)) | ((tmp_21 | (rmpn & 16777215U)) >> 24);
  }
  else {
    __u32 tmp_24;
    unsigned int tmp_23;
    
#line 277 
    if (0 != 0) 
#line 277 
                tmp_23 = ((((*((__be32 *)in + 2U) << 24) | ((*((__be32 *)in + 2U) << 8) & 16711680U)) | ((*((__be32 *)in + 2U) >> 8) & 65280U)) | (*((__be32 *)in + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_22;
      
#line 277 
      tmp_22 = __fswab32(*((__be32 *)in + 2U));
      
#line 277 
      tmp_23 = tmp_22 & 4278190080U;
    }
    
#line 277 
    ;
    
#line 277 
    tmp_24 = __fswab32(tmp_23 | (rmpn & 16777215U));
    
#line 277 
    *((__be32 *)in + 2U) = tmp_24;
  }
  {
    
#line 278 
    bool __cond_1 = (_Bool)0;
    
#line 278 
    if ((int)__cond_1 != 0) 
#line 278 
                            __compiletime_assert_278(); else ;
  }
  
#line 278 
  if (0 != 0) {
    unsigned int tmp_28;
    unsigned int tmp_30;
    unsigned int tmp_32;
    unsigned int tmp_34;
    
#line 278 
    if (0 != 0) 
#line 278 
                tmp_28 = ((((*((__be32 *)wq + 1U) << 24) | ((*((__be32 *)wq + 1U) << 8) & 16711680U)) | ((*((__be32 *)wq + 1U) >> 8) & 65280U)) | (*((__be32 *)wq + 1U) >> 24)) & 4294901760U;
    else {
      __u32 tmp_27;
      
#line 278 
      tmp_27 = __fswab32(*((__be32 *)wq + 1U));
      
#line 278 
      tmp_28 = tmp_27 & 4294901760U;
    }
    
#line 278 
    if (0 != 0) 
#line 278 
                tmp_30 = ((((*((__be32 *)wq + 1U) << 24) | ((*((__be32 *)wq + 1U) << 8) & 16711680U)) | ((*((__be32 *)wq + 1U) >> 8) & 65280U)) | (*((__be32 *)wq + 1U) >> 24)) & 4294901760U;
    else {
      __u32 tmp_29;
      
#line 278 
      tmp_29 = __fswab32(*((__be32 *)wq + 1U));
      
#line 278 
      tmp_30 = tmp_29 & 4294901760U;
    }
    
#line 278 
    if (0 != 0) 
#line 278 
                tmp_32 = ((((*((__be32 *)wq + 1U) << 24) | ((*((__be32 *)wq + 1U) << 8) & 16711680U)) | ((*((__be32 *)wq + 1U) >> 8) & 65280U)) | (*((__be32 *)wq + 1U) >> 24)) & 4294901760U;
    else {
      __u32 tmp_31;
      
#line 278 
      tmp_31 = __fswab32(*((__be32 *)wq + 1U));
      
#line 278 
      tmp_32 = tmp_31 & 4294901760U;
    }
    
#line 278 
    if (0 != 0) 
#line 278 
                tmp_34 = ((((*((__be32 *)wq + 1U) << 24) | ((*((__be32 *)wq + 1U) << 8) & 16711680U)) | ((*((__be32 *)wq + 1U) >> 8) & 65280U)) | (*((__be32 *)wq + 1U) >> 24)) & 4294901760U;
    else {
      __u32 tmp_33;
      
#line 278 
      tmp_33 = __fswab32(*((__be32 *)wq + 1U));
      
#line 278 
      tmp_34 = tmp_33 & 4294901760U;
    }
    
#line 278 
    *((__be32 *)wq + 1U) = ((((tmp_28 | (unsigned int)lwm) << 24) | (((tmp_30 | (unsigned int)lwm) << 8) & 16711680U)) | (((tmp_32 | (unsigned int)lwm) >> 8) & 65280U)) | ((tmp_34 | (unsigned int)lwm) >> 24);
  }
  else {
    __u32 tmp_37;
    unsigned int tmp_36;
    
#line 278 
    if (0 != 0) 
#line 278 
                tmp_36 = ((((*((__be32 *)wq + 1U) << 24) | ((*((__be32 *)wq + 1U) << 8) & 16711680U)) | ((*((__be32 *)wq + 1U) >> 8) & 65280U)) | (*((__be32 *)wq + 1U) >> 24)) & 4294901760U;
    else {
      __u32 tmp_35;
      
#line 278 
      tmp_35 = __fswab32(*((__be32 *)wq + 1U));
      
#line 278 
      tmp_36 = tmp_35 & 4294901760U;
    }
    
#line 278 
    ;
    
#line 278 
    tmp_37 = __fswab32(tmp_36 | (unsigned int)lwm);
    
#line 278 
    *((__be32 *)wq + 1U) = tmp_37;
  }
  {
    
#line 279 
    bool __cond_2 = (_Bool)0;
    
#line 279 
    if ((int)__cond_2 != 0) 
#line 279 
                            __compiletime_assert_279(); else ;
  }
  
#line 279 
  if (0 != 0) {
    unsigned int tmp_41;
    unsigned int tmp_43;
    unsigned int tmp_45;
    unsigned int tmp_47;
    
#line 279 
    if (0 != 0) 
#line 279 
                tmp_41 = (((((*((__be32 *)bitmask + 1U) << 24) | ((*((__be32 *)bitmask + 1U) << 8) & 16711680U)) | ((*((__be32 *)bitmask + 1U) >> 8) & 65280U)) | (*((__be32 *)bitmask + 1U) >> 24)) << 24) | 16777216U;
    else {
      __u32 tmp_40;
      
#line 279 
      tmp_40 = __fswab32(*((__be32 *)bitmask + 1U));
      
#line 279 
      tmp_41 = (tmp_40 << 24) | 16777216U;
    }
    
#line 279 
    if (0 != 0) 
#line 279 
                tmp_43 = (((((*((__be32 *)bitmask + 1U) << 24) | ((*((__be32 *)bitmask + 1U) << 8) & 16711680U)) | ((*((__be32 *)bitmask + 1U) >> 8) & 65280U)) | (*((__be32 *)bitmask + 1U) >> 24)) << 8) & 16711680U;
    else {
      __u32 tmp_42;
      
#line 279 
      tmp_42 = __fswab32(*((__be32 *)bitmask + 1U));
      
#line 279 
      tmp_43 = (tmp_42 << 8) & 16711680U;
    }
    
#line 279 
    if (0 != 0) 
#line 279 
                tmp_45 = (((((*((__be32 *)bitmask + 1U) << 24) | ((*((__be32 *)bitmask + 1U) << 8) & 16711680U)) | ((*((__be32 *)bitmask + 1U) >> 8) & 65280U)) | (*((__be32 *)bitmask + 1U) >> 24)) >> 8) & 65280U;
    else {
      __u32 tmp_44;
      
#line 279 
      tmp_44 = __fswab32(*((__be32 *)bitmask + 1U));
      
#line 279 
      tmp_45 = (tmp_44 >> 8) & 65280U;
    }
    
#line 279 
    if (0 != 0) 
#line 279 
                tmp_47 = ((((*((__be32 *)bitmask + 1U) << 24) | ((*((__be32 *)bitmask + 1U) << 8) & 16711680U)) | ((*((__be32 *)bitmask + 1U) >> 8) & 65280U)) | (*((__be32 *)bitmask + 1U) >> 24)) >> 24;
    else {
      __u32 tmp_46;
      
#line 279 
      tmp_46 = __fswab32(*((__be32 *)bitmask + 1U));
      
#line 279 
      tmp_47 = tmp_46 >> 24;
    }
    
#line 279 
    *((__be32 *)bitmask + 1U) = ((tmp_41 | tmp_43) | tmp_45) | tmp_47;
  }
  else {
    __u32 tmp_50;
    unsigned int tmp_49;
    
#line 279 
    if (0 != 0) 
#line 279 
                tmp_49 = ((((*((__be32 *)bitmask + 1U) << 24) | ((*((__be32 *)bitmask + 1U) << 8) & 16711680U)) | ((*((__be32 *)bitmask + 1U) >> 8) & 65280U)) | (*((__be32 *)bitmask + 1U) >> 24)) | 1U;
    else {
      __u32 tmp_48;
      
#line 279 
      tmp_48 = __fswab32(*((__be32 *)bitmask + 1U));
      
#line 279 
      tmp_49 = tmp_48 | 1U;
    }
    
#line 279 
    tmp_50 = __fswab32(tmp_49);
    
#line 279 
    *((__be32 *)bitmask + 1U) = tmp_50;
  }
  {
    
#line 280 
    bool __cond_3 = (_Bool)0;
    
#line 280 
    if ((int)__cond_3 != 0) 
#line 280 
                            __compiletime_assert_280(); else ;
  }
  
#line 280 
  if (0 != 0) {
    unsigned int tmp_54;
    unsigned int tmp_56;
    unsigned int tmp_58;
    unsigned int tmp_60;
    
#line 280 
    if (0 != 0) 
#line 280 
                tmp_54 = ((((*((__be32 *)rmpc) << 24) | ((*((__be32 *)rmpc) << 8) & 16711680U)) | ((*((__be32 *)rmpc) >> 8) & 65280U)) | (*((__be32 *)rmpc) >> 24)) << 24;
    else {
      __u32 tmp_53;
      
#line 280 
      tmp_53 = __fswab32(*((__be32 *)rmpc));
      
#line 280 
      tmp_54 = tmp_53 << 24;
    }
    
#line 280 
    if (0 != 0) 
#line 280 
                tmp_56 = (((((*((__be32 *)rmpc) << 24) | ((*((__be32 *)rmpc) << 8) & 16711680U)) | ((*((__be32 *)rmpc) >> 8) & 65280U)) | (*((__be32 *)rmpc) >> 24)) << 8) & 16711680U;
    else {
      __u32 tmp_55;
      
#line 280 
      tmp_55 = __fswab32(*((__be32 *)rmpc));
      
#line 280 
      tmp_56 = (tmp_55 << 8) & 16711680U;
    }
    
#line 280 
    if (0 != 0) 
#line 280 
                tmp_58 = ((((((*((__be32 *)rmpc) << 24) | ((*((__be32 *)rmpc) << 8) & 16711680U)) | ((*((__be32 *)rmpc) >> 8) & 65280U)) | (*((__be32 *)rmpc) >> 24)) >> 8) & 3840U) | 4096U;
    else {
      __u32 tmp_57;
      
#line 280 
      tmp_57 = __fswab32(*((__be32 *)rmpc));
      
#line 280 
      tmp_58 = ((tmp_57 >> 8) & 3840U) | 4096U;
    }
    
#line 280 
    if (0 != 0) 
#line 280 
                tmp_60 = ((((*((__be32 *)rmpc) << 24) | ((*((__be32 *)rmpc) << 8) & 16711680U)) | ((*((__be32 *)rmpc) >> 8) & 65280U)) | (*((__be32 *)rmpc) >> 24)) >> 24;
    else {
      __u32 tmp_59;
      
#line 280 
      tmp_59 = __fswab32(*((__be32 *)rmpc));
      
#line 280 
      tmp_60 = tmp_59 >> 24;
    }
    
#line 280 
    *((__be32 *)rmpc) = ((tmp_54 | tmp_56) | tmp_58) | tmp_60;
  }
  else {
    __u32 tmp_63;
    unsigned int tmp_62;
    
#line 280 
    if (0 != 0) 
#line 280 
                tmp_62 = (((((*((__be32 *)rmpc) << 24) | ((*((__be32 *)rmpc) << 8) & 16711680U)) | ((*((__be32 *)rmpc) >> 8) & 65280U)) | (*((__be32 *)rmpc) >> 24)) & 4279238655U) | 1048576U;
    else {
      __u32 tmp_61;
      
#line 280 
      tmp_61 = __fswab32(*((__be32 *)rmpc));
      
#line 280 
      tmp_62 = (tmp_61 & 4279238655U) | 1048576U;
    }
    
#line 280 
    tmp_63 = __fswab32(tmp_62);
    
#line 280 
    *((__be32 *)rmpc) = tmp_63;
  }
  
#line 282 
  err = mlx5_core_modify_rmp(dev,(u32 *)in,272);
  
#line 284 
  kvfree((void const *)in);
  
#line 286 
  __retres = err;
  return_label: 
#line 286 
                return __retres;
}


#line 295 
void __compiletime_assert_295(void);


#line 289  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/transobj.c"
int mlx5_core_create_xsrq(struct mlx5_core_dev *dev, u32 *in, int inlen, u32 *xsrqn)
{
  u32 out[4U];
  int err;
  {
    
#line 295 
    bool __cond = (_Bool)0;
    
#line 295 
    if ((int)__cond != 0) 
#line 295 
                          __compiletime_assert_295(); else ;
  }
  
#line 295 
  if (0 != 0) {
    unsigned int tmp_2;
    unsigned int tmp_4;
    
#line 295 
    if (0 != 0) 
#line 295 
                tmp_2 = ((((*in << 24) | ((*in << 8) & 16711680U)) | ((*in >> 8) & 65280U)) | (*in >> 24)) << 24;
    else {
      __u32 tmp_1;
      
#line 295 
      tmp_1 = __fswab32(*in);
      
#line 295 
      tmp_2 = tmp_1 << 24;
    }
    
#line 295 
    if (0 != 0) 
#line 295 
                tmp_4 = (((((*in << 24) | ((*in << 8) & 16711680U)) | ((*in >> 8) & 65280U)) | (*in >> 24)) << 8) & 16711680U;
    else {
      __u32 tmp_3;
      
#line 295 
      tmp_3 = __fswab32(*in);
      
#line 295 
      tmp_4 = (tmp_3 << 8) & 16711680U;
    }
    
#line 295 
    *in = (tmp_2 | tmp_4) | 1287U;
  }
  else {
    __u32 tmp_7;
    unsigned int tmp_6;
    
#line 295 
    if (0 != 0) 
#line 295 
                tmp_6 = (((((*in << 24) | ((*in << 8) & 16711680U)) | ((*in >> 8) & 65280U)) | (*in >> 24)) & 65535U) | 117768192U;
    else {
      __u32 tmp_5;
      
#line 295 
      tmp_5 = __fswab32(*in);
      
#line 295 
      tmp_6 = (tmp_5 & 65535U) | 117768192U;
    }
    
#line 295 
    tmp_7 = __fswab32(tmp_6);
    
#line 295 
    *in = tmp_7;
  }
  
#line 297 
  memset((void *)(& out),0,16UL);
  
#line 298 
  err = mlx5_cmd_exec_check_status(dev,in,inlen,(u32 *)(& out),16);
  
#line 299 
  if (err == 0) 
    
#line 300 
    if (0 != 0) 
#line 300 
                *xsrqn = ((((*((__be32 *)(& out) + 2U) << 24) | ((*((__be32 *)(& out) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& out) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& out) + 2U) >> 24)) & 16777215U;
    else {
      __u32 tmp_8;
      
#line 300 
      tmp_8 = __fswab32(*((__be32 *)(& out) + 2U));
      
#line 300 
      *xsrqn = tmp_8 & 16777215U;
    }
  else ;
  
#line 302 
  return err;
}


#line 305  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/transobj.c"
int mlx5_core_destroy_xsrq(struct mlx5_core_dev *dev, u32 xsrqn)
{
  u32 in[4U];
  u32 out[4U];
  int tmp_21;
  
#line 310 
  memset((void *)(& in),0,16UL);
  
#line 311 
  memset((void *)(& out),0,16UL);
  {
    
#line 313 
    bool __cond = (_Bool)0;
    
#line 313 
    if ((int)__cond != 0) 
#line 313 
                          __compiletime_assert_313(); else ;
  }
  
#line 313 
  if (0 != 0) {
    unsigned int tmp_2;
    unsigned int tmp_4;
    
#line 313 
    if (0 != 0) 
#line 313 
                tmp_2 = ((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) << 24;
    else {
      __u32 tmp_1;
      
#line 313 
      tmp_1 = __fswab32(*((__be32 *)(& in)));
      
#line 313 
      tmp_2 = tmp_1 << 24;
    }
    
#line 313 
    if (0 != 0) 
#line 313 
                tmp_4 = (((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) << 8) & 16711680U;
    else {
      __u32 tmp_3;
      
#line 313 
      tmp_3 = __fswab32(*((__be32 *)(& in)));
      
#line 313 
      tmp_4 = (tmp_3 << 8) & 16711680U;
    }
    
#line 313 
    *((__be32 *)(& in)) = (tmp_2 | tmp_4) | 1543U;
  }
  else {
    __u32 tmp_7;
    unsigned int tmp_6;
    
#line 313 
    if (0 != 0) 
#line 313 
                tmp_6 = (((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) & 65535U) | 117833728U;
    else {
      __u32 tmp_5;
      
#line 313 
      tmp_5 = __fswab32(*((__be32 *)(& in)));
      
#line 313 
      tmp_6 = (tmp_5 & 65535U) | 117833728U;
    }
    
#line 313 
    tmp_7 = __fswab32(tmp_6);
    
#line 313 
    *((__be32 *)(& in)) = tmp_7;
  }
  {
    
#line 314 
    bool __cond_0 = (_Bool)0;
    
#line 314 
    if ((int)__cond_0 != 0) 
#line 314 
                            __compiletime_assert_314(); else ;
  }
  
#line 314 
  if (0 != 0) {
    unsigned int tmp_11;
    unsigned int tmp_13;
    unsigned int tmp_15;
    unsigned int tmp_17;
    
#line 314 
    if (0 != 0) 
#line 314 
                tmp_11 = ((((*((__be32 *)(& in) + 2U) << 24) | ((*((__be32 *)(& in) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_10;
      
#line 314 
      tmp_10 = __fswab32(*((__be32 *)(& in) + 2U));
      
#line 314 
      tmp_11 = tmp_10 & 4278190080U;
    }
    
#line 314 
    if (0 != 0) 
#line 314 
                tmp_13 = ((((*((__be32 *)(& in) + 2U) << 24) | ((*((__be32 *)(& in) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_12;
      
#line 314 
      tmp_12 = __fswab32(*((__be32 *)(& in) + 2U));
      
#line 314 
      tmp_13 = tmp_12 & 4278190080U;
    }
    
#line 314 
    if (0 != 0) 
#line 314 
                tmp_15 = ((((*((__be32 *)(& in) + 2U) << 24) | ((*((__be32 *)(& in) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_14;
      
#line 314 
      tmp_14 = __fswab32(*((__be32 *)(& in) + 2U));
      
#line 314 
      tmp_15 = tmp_14 & 4278190080U;
    }
    
#line 314 
    if (0 != 0) 
#line 314 
                tmp_17 = ((((*((__be32 *)(& in) + 2U) << 24) | ((*((__be32 *)(& in) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_16;
      
#line 314 
      tmp_16 = __fswab32(*((__be32 *)(& in) + 2U));
      
#line 314 
      tmp_17 = tmp_16 & 4278190080U;
    }
    
#line 314 
    *((__be32 *)(& in) + 2U) = ((((tmp_11 | (xsrqn & 16777215U)) << 24) | (((tmp_13 | (xsrqn & 16777215U)) << 8) & 16711680U)) | (((tmp_15 | (xsrqn & 16777215U)) >> 8) & 65280U)) | ((tmp_17 | (xsrqn & 16777215U)) >> 24);
  }
  else {
    __u32 tmp_20;
    unsigned int tmp_19;
    
#line 314 
    if (0 != 0) 
#line 314 
                tmp_19 = ((((*((__be32 *)(& in) + 2U) << 24) | ((*((__be32 *)(& in) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_18;
      
#line 314 
      tmp_18 = __fswab32(*((__be32 *)(& in) + 2U));
      
#line 314 
      tmp_19 = tmp_18 & 4278190080U;
    }
    
#line 314 
    ;
    
#line 314 
    tmp_20 = __fswab32(tmp_19 | (xsrqn & 16777215U));
    
#line 314 
    *((__be32 *)(& in) + 2U) = tmp_20;
  }
  
#line 316 
  tmp_21 = mlx5_cmd_exec_check_status(dev,(u32 *)(& in),16,(u32 *)(& out),16);
  
#line 316 
  return tmp_21;
}


#line 328 
void __compiletime_assert_328(void);


#line 329 
void __compiletime_assert_329(void);


#line 320  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/transobj.c"
int mlx5_core_query_xsrq(struct mlx5_core_dev *dev, u32 xsrqn, u32 *out)
{
  u32 in[4U];
  void *srqc;
  void *xrc_srqc;
  int err;
  
#line 327 
  memset((void *)(& in),0,16UL);
  {
    
#line 328 
    bool __cond = (_Bool)0;
    
#line 328 
    if ((int)__cond != 0) 
#line 328 
                          __compiletime_assert_328(); else ;
  }
  
#line 328 
  if (0 != 0) {
    unsigned int tmp_2;
    unsigned int tmp_4;
    
#line 328 
    if (0 != 0) 
#line 328 
                tmp_2 = ((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) << 24;
    else {
      __u32 tmp_1;
      
#line 328 
      tmp_1 = __fswab32(*((__be32 *)(& in)));
      
#line 328 
      tmp_2 = tmp_1 << 24;
    }
    
#line 328 
    if (0 != 0) 
#line 328 
                tmp_4 = (((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) << 8) & 16711680U;
    else {
      __u32 tmp_3;
      
#line 328 
      tmp_3 = __fswab32(*((__be32 *)(& in)));
      
#line 328 
      tmp_4 = (tmp_3 << 8) & 16711680U;
    }
    
#line 328 
    *((__be32 *)(& in)) = (tmp_2 | tmp_4) | 1799U;
  }
  else {
    __u32 tmp_7;
    unsigned int tmp_6;
    
#line 328 
    if (0 != 0) 
#line 328 
                tmp_6 = (((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) & 65535U) | 117899264U;
    else {
      __u32 tmp_5;
      
#line 328 
      tmp_5 = __fswab32(*((__be32 *)(& in)));
      
#line 328 
      tmp_6 = (tmp_5 & 65535U) | 117899264U;
    }
    
#line 328 
    tmp_7 = __fswab32(tmp_6);
    
#line 328 
    *((__be32 *)(& in)) = tmp_7;
  }
  {
    
#line 329 
    bool __cond_0 = (_Bool)0;
    
#line 329 
    if ((int)__cond_0 != 0) 
#line 329 
                            __compiletime_assert_329(); else ;
  }
  
#line 329 
  if (0 != 0) {
    unsigned int tmp_11;
    unsigned int tmp_13;
    unsigned int tmp_15;
    unsigned int tmp_17;
    
#line 329 
    if (0 != 0) 
#line 329 
                tmp_11 = ((((*((__be32 *)(& in) + 2U) << 24) | ((*((__be32 *)(& in) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_10;
      
#line 329 
      tmp_10 = __fswab32(*((__be32 *)(& in) + 2U));
      
#line 329 
      tmp_11 = tmp_10 & 4278190080U;
    }
    
#line 329 
    if (0 != 0) 
#line 329 
                tmp_13 = ((((*((__be32 *)(& in) + 2U) << 24) | ((*((__be32 *)(& in) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_12;
      
#line 329 
      tmp_12 = __fswab32(*((__be32 *)(& in) + 2U));
      
#line 329 
      tmp_13 = tmp_12 & 4278190080U;
    }
    
#line 329 
    if (0 != 0) 
#line 329 
                tmp_15 = ((((*((__be32 *)(& in) + 2U) << 24) | ((*((__be32 *)(& in) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_14;
      
#line 329 
      tmp_14 = __fswab32(*((__be32 *)(& in) + 2U));
      
#line 329 
      tmp_15 = tmp_14 & 4278190080U;
    }
    
#line 329 
    if (0 != 0) 
#line 329 
                tmp_17 = ((((*((__be32 *)(& in) + 2U) << 24) | ((*((__be32 *)(& in) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_16;
      
#line 329 
      tmp_16 = __fswab32(*((__be32 *)(& in) + 2U));
      
#line 329 
      tmp_17 = tmp_16 & 4278190080U;
    }
    
#line 329 
    *((__be32 *)(& in) + 2U) = ((((tmp_11 | (xsrqn & 16777215U)) << 24) | (((tmp_13 | (xsrqn & 16777215U)) << 8) & 16711680U)) | (((tmp_15 | (xsrqn & 16777215U)) >> 8) & 65280U)) | ((tmp_17 | (xsrqn & 16777215U)) >> 24);
  }
  else {
    __u32 tmp_20;
    unsigned int tmp_19;
    
#line 329 
    if (0 != 0) 
#line 329 
                tmp_19 = ((((*((__be32 *)(& in) + 2U) << 24) | ((*((__be32 *)(& in) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_18;
      
#line 329 
      tmp_18 = __fswab32(*((__be32 *)(& in) + 2U));
      
#line 329 
      tmp_19 = tmp_18 & 4278190080U;
    }
    
#line 329 
    ;
    
#line 329 
    tmp_20 = __fswab32(tmp_19 | (xsrqn & 16777215U));
    
#line 329 
    *((__be32 *)(& in) + 2U) = tmp_20;
  }
  
#line 331 
  err = mlx5_cmd_exec_check_status(dev,(u32 *)(& in),16,out,272);
  
#line 334 
  if (err == 0) {
    
#line 335 
    xrc_srqc = (void *)out + 16U;
    
#line 337 
    srqc = (void *)out + 16U;
    
#line 338 
    memcpy(srqc,(void const *)xrc_srqc,64UL);
  }
  else ;
  
#line 341 
  return err;
}


#line 352 
void __compiletime_assert_352(void);


#line 354 
void __compiletime_assert_354(void);


#line 355 
void __compiletime_assert_356(void);


#line 344  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/transobj.c"
int mlx5_core_arm_xsrq(struct mlx5_core_dev *dev, u32 xsrqn, u16 lwm)
{
  u32 in[4U];
  u32 out[4U];
  int tmp_43;
  
#line 349 
  memset((void *)(& in),0,16UL);
  
#line 350 
  memset((void *)(& out),0,16UL);
  {
    
#line 352 
    bool __cond = (_Bool)0;
    
#line 352 
    if ((int)__cond != 0) 
#line 352 
                          __compiletime_assert_352(); else ;
  }
  
#line 352 
  if (0 != 0) {
    unsigned int tmp_2;
    unsigned int tmp_4;
    
#line 352 
    if (0 != 0) 
#line 352 
                tmp_2 = ((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) << 24;
    else {
      __u32 tmp_1;
      
#line 352 
      tmp_1 = __fswab32(*((__be32 *)(& in)));
      
#line 352 
      tmp_2 = tmp_1 << 24;
    }
    
#line 352 
    if (0 != 0) 
#line 352 
                tmp_4 = (((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) << 8) & 16711680U;
    else {
      __u32 tmp_3;
      
#line 352 
      tmp_3 = __fswab32(*((__be32 *)(& in)));
      
#line 352 
      tmp_4 = (tmp_3 << 8) & 16711680U;
    }
    
#line 352 
    *((__be32 *)(& in)) = (tmp_2 | tmp_4) | 2055U;
  }
  else {
    __u32 tmp_7;
    unsigned int tmp_6;
    
#line 352 
    if (0 != 0) 
#line 352 
                tmp_6 = (((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) & 65535U) | 117964800U;
    else {
      __u32 tmp_5;
      
#line 352 
      tmp_5 = __fswab32(*((__be32 *)(& in)));
      
#line 352 
      tmp_6 = (tmp_5 & 65535U) | 117964800U;
    }
    
#line 352 
    tmp_7 = __fswab32(tmp_6);
    
#line 352 
    *((__be32 *)(& in)) = tmp_7;
  }
  {
    
#line 353 
    bool __cond_0 = (_Bool)0;
    
#line 353 
    if ((int)__cond_0 != 0) 
#line 353 
                            __compiletime_assert_353(); else ;
  }
  
#line 353 
  if (0 != 0) {
    unsigned int tmp_11;
    unsigned int tmp_13;
    unsigned int tmp_15;
    unsigned int tmp_17;
    
#line 353 
    if (0 != 0) 
#line 353 
                tmp_11 = ((((*((__be32 *)(& in) + 2U) << 24) | ((*((__be32 *)(& in) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_10;
      
#line 353 
      tmp_10 = __fswab32(*((__be32 *)(& in) + 2U));
      
#line 353 
      tmp_11 = tmp_10 & 4278190080U;
    }
    
#line 353 
    if (0 != 0) 
#line 353 
                tmp_13 = ((((*((__be32 *)(& in) + 2U) << 24) | ((*((__be32 *)(& in) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_12;
      
#line 353 
      tmp_12 = __fswab32(*((__be32 *)(& in) + 2U));
      
#line 353 
      tmp_13 = tmp_12 & 4278190080U;
    }
    
#line 353 
    if (0 != 0) 
#line 353 
                tmp_15 = ((((*((__be32 *)(& in) + 2U) << 24) | ((*((__be32 *)(& in) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_14;
      
#line 353 
      tmp_14 = __fswab32(*((__be32 *)(& in) + 2U));
      
#line 353 
      tmp_15 = tmp_14 & 4278190080U;
    }
    
#line 353 
    if (0 != 0) 
#line 353 
                tmp_17 = ((((*((__be32 *)(& in) + 2U) << 24) | ((*((__be32 *)(& in) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_16;
      
#line 353 
      tmp_16 = __fswab32(*((__be32 *)(& in) + 2U));
      
#line 353 
      tmp_17 = tmp_16 & 4278190080U;
    }
    
#line 353 
    *((__be32 *)(& in) + 2U) = ((((tmp_11 | (xsrqn & 16777215U)) << 24) | (((tmp_13 | (xsrqn & 16777215U)) << 8) & 16711680U)) | (((tmp_15 | (xsrqn & 16777215U)) >> 8) & 65280U)) | ((tmp_17 | (xsrqn & 16777215U)) >> 24);
  }
  else {
    __u32 tmp_20;
    unsigned int tmp_19;
    
#line 353 
    if (0 != 0) 
#line 353 
                tmp_19 = ((((*((__be32 *)(& in) + 2U) << 24) | ((*((__be32 *)(& in) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 2U) >> 24)) & 4278190080U;
    else {
      __u32 tmp_18;
      
#line 353 
      tmp_18 = __fswab32(*((__be32 *)(& in) + 2U));
      
#line 353 
      tmp_19 = tmp_18 & 4278190080U;
    }
    
#line 353 
    ;
    
#line 353 
    tmp_20 = __fswab32(tmp_19 | (xsrqn & 16777215U));
    
#line 353 
    *((__be32 *)(& in) + 2U) = tmp_20;
  }
  {
    
#line 354 
    bool __cond_1 = (_Bool)0;
    
#line 354 
    if ((int)__cond_1 != 0) 
#line 354 
                            __compiletime_assert_354(); else ;
  }
  
#line 354 
  if (0 != 0) {
    unsigned int tmp_24;
    unsigned int tmp_26;
    unsigned int tmp_28;
    unsigned int tmp_30;
    
#line 354 
    if (0 != 0) 
#line 354 
                tmp_24 = ((((*((__be32 *)(& in) + 3U) << 24) | ((*((__be32 *)(& in) + 3U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 3U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 3U) >> 24)) & 4294901760U;
    else {
      __u32 tmp_23;
      
#line 354 
      tmp_23 = __fswab32(*((__be32 *)(& in) + 3U));
      
#line 354 
      tmp_24 = tmp_23 & 4294901760U;
    }
    
#line 354 
    if (0 != 0) 
#line 354 
                tmp_26 = ((((*((__be32 *)(& in) + 3U) << 24) | ((*((__be32 *)(& in) + 3U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 3U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 3U) >> 24)) & 4294901760U;
    else {
      __u32 tmp_25;
      
#line 354 
      tmp_25 = __fswab32(*((__be32 *)(& in) + 3U));
      
#line 354 
      tmp_26 = tmp_25 & 4294901760U;
    }
    
#line 354 
    if (0 != 0) 
#line 354 
                tmp_28 = ((((*((__be32 *)(& in) + 3U) << 24) | ((*((__be32 *)(& in) + 3U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 3U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 3U) >> 24)) & 4294901760U;
    else {
      __u32 tmp_27;
      
#line 354 
      tmp_27 = __fswab32(*((__be32 *)(& in) + 3U));
      
#line 354 
      tmp_28 = tmp_27 & 4294901760U;
    }
    
#line 354 
    if (0 != 0) 
#line 354 
                tmp_30 = ((((*((__be32 *)(& in) + 3U) << 24) | ((*((__be32 *)(& in) + 3U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 3U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 3U) >> 24)) & 4294901760U;
    else {
      __u32 tmp_29;
      
#line 354 
      tmp_29 = __fswab32(*((__be32 *)(& in) + 3U));
      
#line 354 
      tmp_30 = tmp_29 & 4294901760U;
    }
    
#line 354 
    *((__be32 *)(& in) + 3U) = ((((tmp_24 | (unsigned int)lwm) << 24) | (((tmp_26 | (unsigned int)lwm) << 8) & 16711680U)) | (((tmp_28 | (unsigned int)lwm) >> 8) & 65280U)) | ((tmp_30 | (unsigned int)lwm) >> 24);
  }
  else {
    __u32 tmp_33;
    unsigned int tmp_32;
    
#line 354 
    if (0 != 0) 
#line 354 
                tmp_32 = ((((*((__be32 *)(& in) + 3U) << 24) | ((*((__be32 *)(& in) + 3U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 3U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 3U) >> 24)) & 4294901760U;
    else {
      __u32 tmp_31;
      
#line 354 
      tmp_31 = __fswab32(*((__be32 *)(& in) + 3U));
      
#line 354 
      tmp_32 = tmp_31 & 4294901760U;
    }
    
#line 354 
    ;
    
#line 354 
    tmp_33 = __fswab32(tmp_32 | (unsigned int)lwm);
    
#line 354 
    *((__be32 *)(& in) + 3U) = tmp_33;
  }
  {
    
#line 355 
    bool __cond_2 = (_Bool)0;
    
#line 355 
    if ((int)__cond_2 != 0) 
#line 355 
                            __compiletime_assert_356(); else ;
  }
  
#line 355 
  if (0 != 0) {
    unsigned int tmp_37;
    unsigned int tmp_39;
    
#line 355 
    if (0 != 0) 
#line 355 
                tmp_37 = ((((((*((__be32 *)(& in) + 1U) << 24) | ((*((__be32 *)(& in) + 1U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 1U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 1U) >> 24)) >> 8) & 65280U) | 16777216U;
    else {
      __u32 tmp_36;
      
#line 355 
      tmp_36 = __fswab32(*((__be32 *)(& in) + 1U));
      
#line 355 
      tmp_37 = ((tmp_36 >> 8) & 65280U) | 16777216U;
    }
    
#line 355 
    if (0 != 0) 
#line 355 
                tmp_39 = ((((*((__be32 *)(& in) + 1U) << 24) | ((*((__be32 *)(& in) + 1U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 1U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 1U) >> 24)) >> 24;
    else {
      __u32 tmp_38;
      
#line 355 
      tmp_38 = __fswab32(*((__be32 *)(& in) + 1U));
      
#line 355 
      tmp_39 = tmp_38 >> 24;
    }
    
#line 355 
    *((__be32 *)(& in) + 1U) = tmp_37 | tmp_39;
  }
  else {
    __u32 tmp_42;
    unsigned int tmp_41;
    
#line 355 
    if (0 != 0) 
#line 355 
                tmp_41 = (((((*((__be32 *)(& in) + 1U) << 24) | ((*((__be32 *)(& in) + 1U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 1U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 1U) >> 24)) & 4294901760U) | 1U;
    else {
      __u32 tmp_40;
      
#line 355 
      tmp_40 = __fswab32(*((__be32 *)(& in) + 1U));
      
#line 355 
      tmp_41 = (tmp_40 & 4294901760U) | 1U;
    }
    
#line 355 
    tmp_42 = __fswab32(tmp_41);
    
#line 355 
    *((__be32 *)(& in) + 1U) = tmp_42;
  }
  
#line 358 
  tmp_43 = mlx5_cmd_exec_check_status(dev,(u32 *)(& in),16,(u32 *)(& out),16);
  
#line 358 
  return tmp_43;
}


#line 497  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_transobj.c.aux"
static void *kzalloc_10(size_t size, gfp_t flags)
{
  void *tmp;
  
#line 500 
  tmp = ldv_kzalloc(size,flags);
  
#line 500 
  return tmp;
}

void __builtin_prefetch(void const * , ...);


#line 45  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/checksum_64.h"
__inline static __sum16 ip_fast_csum(void const *iph, unsigned int ihl)
{
  __sum16 __retres;
  unsigned int sum;
  
#line 48 
  ldv_inline_asm();
  
#line 72 
  __retres = (unsigned short)sum;
  
#line 72 
  return __retres;
}


#line 926  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void skb_set_hash(struct sk_buff *skb, __u32 hash, enum pkt_hash_types type)
{
  
#line 928 
  skb->l4_hash = (unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))(type == (unsigned int)PKT_HASH_TYPE_L4);
  
#line 929 
  skb->sw_hash = (unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U;
  
#line 930 
  skb->hash = hash;
  
#line 931 
  return;
}


#line 1688 
unsigned char *skb_put(struct sk_buff *, unsigned int);


#line 1789  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void skb_reserve(struct sk_buff *skb, int len)
{
  
#line 1791 
  skb->data += len;
  
#line 1792 
  skb->tail += (unsigned int)len;
  
#line 1793 
  return;
}


#line 2140 
struct sk_buff *__netdev_alloc_skb(struct net_device *, unsigned int, gfp_t);


#line 2156  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static struct sk_buff *netdev_alloc_skb(struct net_device *dev, unsigned int length)
{
  struct sk_buff *tmp;
  
#line 2159 
  tmp = __netdev_alloc_skb(dev,length,32U);
  
#line 2159 
  return tmp;
}


#line 3305  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void skb_record_rx_queue(struct sk_buff *skb, u16 rx_queue)
{
  
#line 3307 
  skb->queue_mapping = (unsigned short)((unsigned int)rx_queue + 1U);
  
#line 3308 
  return;
}


#line 2948  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
gro_result_t napi_gro_receive(struct napi_struct *, struct sk_buff *);


#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/etherdevice.h"
__be16 eth_type_trans(struct sk_buff *, struct net_device *);


#line 409  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/if_vlan.h"
__inline static void __vlan_hwaccel_put_tag(struct sk_buff *skb, __be16 vlan_proto, u16 vlan_tci)
{
  
#line 412 
  skb->vlan_proto = vlan_proto;
  
#line 413 
  skb->vlan_tci = (unsigned short)((unsigned int)vlan_tci | 4096U);
  
#line 414 
  return;
}


#line 602  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/device.h"
__inline static int get_cqe_lro_tcppsh(struct mlx5_cqe64 *cqe)
{
  int __retres;
  
#line 604 
  __retres = ((int)cqe->lro_tcppsh_abort_dupack >> 6) & 1;
  
#line 604 
  return __retres;
}


#line 607  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/device.h"
__inline static u8 get_cqe_l4_hdr_type(struct mlx5_cqe64 *cqe)
{
  u8 __retres;
  
#line 609 
  __retres = (unsigned char)((unsigned int)((unsigned char)((int)cqe->l4_hdr_type_etc >> 4)) & 7U);
  
#line 609 
  return __retres;
}


#line 612  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/device.h"
__inline static int cqe_has_vlan(struct mlx5_cqe64 *cqe)
{
  int __retres;
  
#line 614 
  __retres = ((int)cqe->l4_hdr_type_etc & 1) != 0;
  
#line 614 
  return __retres;
}


#line 136  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/wq.h"
__inline static int mlx5_wq_ll_is_full(struct mlx5_wq_ll *wq)
{
  int __retres;
  
#line 138 
  __retres = (int)wq->cur_sz == (int)wq->sz_m1;
  
#line 138 
  return __retres;
}


#line 151  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/wq.h"
__inline static void mlx5_wq_ll_push(struct mlx5_wq_ll *wq, u16 head_next)
{
  
#line 153 
  wq->head = head_next;
  
#line 154 
  wq->wqe_ctr = (u16)((int)wq->wqe_ctr + 1);
  
#line 155 
  wq->cur_sz = (u16)((int)wq->cur_sz + 1);
  
#line 156 
  return;
}


#line 158  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/wq.h"
__inline static void mlx5_wq_ll_pop(struct mlx5_wq_ll *wq, __be16 ix, __be16 *next_tail_next)
{
  
#line 161 
  *(wq->tail_next) = ix;
  
#line 162 
  wq->tail_next = next_tail_next;
  
#line 163 
  wq->cur_sz = (u16)((int)wq->cur_sz - 1);
  
#line 164 
  return;
}


#line 166  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/wq.h"
__inline static void mlx5_wq_ll_update_db_record(struct mlx5_wq_ll *wq)
{
  
#line 168 
  if (0 != 0) 
#line 168 
              *(wq->db) = ((unsigned int)wq->wqe_ctr << 24) | (((unsigned int)wq->wqe_ctr << 8) & 16711680U); else 
                                                                    
#line 168 
                                                                    *(wq->db) = __fswab32((unsigned int)wq->wqe_ctr);
  
#line 169 
  return;
}


#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_rx.c"
__inline static int mlx5e_alloc_rx_wqe(struct mlx5e_rq *rq, struct mlx5e_rx_wqe *wqe, u16 ix)
{
  int __retres;
  struct sk_buff *skb;
  dma_addr_t dma_addr;
  int tmp;
  
#line 44 
  skb = netdev_alloc_skb(rq->netdev,rq->wqe_sz);
  
#line 45 
  if ((long)(skb == (struct sk_buff *)0) != 0L) {
    
#line 46 
    __retres = -12;
    
#line 46 
    goto return_label;
  }
  else ;
  
#line 48 
  dma_addr = dma_map_single_attrs(rq->pdev,(void *)skb->data,(unsigned long)rq->wqe_sz,(enum dma_data_direction)DMA_FROM_DEVICE,(struct dma_attrs *)0);
  
#line 55 
  tmp = dma_mapping_error(rq->pdev,dma_addr);
  
#line 55 
  if ((long)(tmp != 0) != 0L) 
#line 56 
                              goto err_free_skb; else ;
  
#line 58 
  skb_reserve(skb,2);
  
#line 60 
  *((dma_addr_t *)(& skb->cb)) = dma_addr;
  
#line 61 
  if (0 != 0) 
#line 61 
              wqe->data.addr = ((((((((dma_addr + 2ULL) << 56) | (((dma_addr + 2ULL) << 40) & 71776119061217280ULL)) | (((dma_addr + 2ULL) << 24) & 280375465082880ULL)) | (((dma_addr + 2ULL) << 8) & 1095216660480ULL)) | (((dma_addr + 2ULL) >> 8) & 4278190080ULL)) | (((dma_addr + 2ULL) >> 24) & 16711680ULL)) | (((dma_addr + 2ULL) >> 40) & 65280ULL)) | ((dma_addr + 2ULL) >> 56); else 
                                                                    
#line 61 
                                                                    wqe->data.addr = __fswab64(dma_addr + 2ULL);
  
#line 63 
  *(rq->skb + (int)ix) = skb;
  
#line 65 
  __retres = 0;
  
#line 65 
  goto return_label;
  err_free_skb: 
#line 67 
  ;
  
#line 68 
  consume_skb(skb);
  
#line 70 
  __retres = -12;
  return_label: 
#line 70 
                return __retres;
}


#line 73  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_rx.c"
bool mlx5e_post_rx_wqes(struct mlx5e_rq *rq)
{
  bool __retres;
  int tmp;
  int tmp_4;
  int tmp_5;
  
#line 75 
  struct mlx5_wq_ll *wq = & rq->wq;
  
#line 77 
  tmp = constant_test_bit(0L,(unsigned long const volatile *)(& rq->state));
  
#line 77 
  if ((long)(tmp == 0) != 0L) {
    
#line 78 
    __retres = (_Bool)0;
    
#line 78 
    goto return_label;
  }
  else ;
  
#line 80 
  goto ldv_59647;
  ldv_59646: 
#line 81 
  ;
  {
    int tmp_1;
    int tmp_3;
    
#line 81 
    struct mlx5e_rx_wqe *wqe = mlx5_wq_ll_get_wqe(wq,(unsigned short)((int)wq->head));
    
#line 83 
    tmp_1 = mlx5e_alloc_rx_wqe(rq,wqe,(unsigned short)((int)wq->head));
    
#line 83 
    if ((long)(tmp_1 != 0) != 0L) 
#line 84 
                                  goto ldv_59645; else ;
    
#line 86 
    if (0 != 0) 
#line 86 
                tmp_3 = (int)((unsigned short)(((int)wqe->next.next_wqe_index << 8) | ((int)wqe->next.next_wqe_index >> 8)));
    else {
      __u16 tmp_2;
      
#line 86 
      tmp_2 = __fswab16((unsigned short)((int)wqe->next.next_wqe_index));
      
#line 86 
      tmp_3 = (int)tmp_2;
    }
    
#line 86 
    ;
    
#line 86 
    mlx5_wq_ll_push(wq,(unsigned short)tmp_3);
  }
  ldv_59647: 
#line 88 
  ;
  
#line 80 
  tmp_4 = mlx5_wq_ll_is_full(wq);
  
#line 80 
  if (tmp_4 == 0) 
#line 82 
                  goto ldv_59646; else 
#line 85 
                                       goto ldv_59645;
  ldv_59645: 
#line 86 
  ;
  
#line 87 
  ldv_inline_asm();
  
#line 92 
  mlx5_wq_ll_update_db_record(wq);
  
#line 94 
  tmp_5 = mlx5_wq_ll_is_full(wq);
  
#line 94 
  __retres = (_Bool)(tmp_5 == 0);
  return_label: 
#line 94 
                return __retres;
}


#line 97  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_rx.c"
static void mlx5e_lro_update_hdr(struct sk_buff *skb, struct mlx5_cqe64 *cqe)
{
  struct tcphdr *tcp;
  unsigned int tmp_1;
  int tmp_2;
  
#line 99 
  struct ethhdr *eth = (struct ethhdr *)skb->data;
  
#line 100 
  struct iphdr *ipv4 = (struct iphdr *)(skb->data + 14U);
  
#line 101 
  struct ipv6hdr *ipv6 = (struct ipv6hdr *)(skb->data + 14U);
  
#line 104 
  u8 l4_hdr_type = get_cqe_l4_hdr_type(cqe);
  
#line 105 
  int tcp_ack = (unsigned int)l4_hdr_type + 253U <= 1U;
  
#line 108 
  if (0 != 0) 
#line 108 
              tmp_1 = (((unsigned int)((unsigned short)(cqe->byte_cnt >> 8)) & 65280U) | (unsigned int)((unsigned short)(cqe->byte_cnt >> 24))) + 65522U;
  else {
    __u32 tmp_0;
    
#line 108 
    tmp_0 = __fswab32(cqe->byte_cnt);
    
#line 108 
    tmp_1 = (unsigned int)((unsigned short)tmp_0) + 65522U;
  }
  
#line 108 
  u16 tot_len = (unsigned short)tmp_1;
  
#line 110 
  if ((unsigned int)eth->h_proto == 8U) {
    
#line 111 
    tcp = (struct tcphdr *)(skb->data + 34U);
    
#line 113 
    ipv6 = (struct ipv6hdr *)0;
  }
  else {
    
#line 115 
    tcp = (struct tcphdr *)(skb->data + 54U);
    
#line 117 
    ipv4 = (struct iphdr *)0;
  }
  
#line 120 
  tmp_2 = get_cqe_lro_tcppsh(cqe);
  
#line 120 
  if (tmp_2 != 0) 
#line 121 
                  tcp->psh = (unsigned short __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U; else ;
  
#line 123 
  if (tcp_ack != 0) {
    
#line 124 
    tcp->ack = (unsigned short __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U;
    
#line 125 
    tcp->ack_seq = cqe->lro_ack_seq_num;
    
#line 126 
    tcp->window = cqe->lro_tcp_win;
  }
  else ;
  
#line 129 
  if (ipv4 != (struct iphdr *)0) {
    
#line 130 
    ipv4->ttl = cqe->lro_min_ttl;
    
#line 131 
    if (0 != 0) 
#line 131 
                ipv4->tot_len = (unsigned short)(((int)tot_len << 8) | ((int)tot_len >> 8)); else 
                                                                    
#line 131 
                                                                    ipv4->tot_len = __fswab16((unsigned short)((int)tot_len));
    
#line 132 
    ipv4->check = (unsigned short)0U;
    
#line 133 
    ipv4->check = ip_fast_csum((void const *)ipv4,(unsigned int)ipv4->ihl);
  }
  else {
    
#line 136 
    ipv6->hop_limit = cqe->lro_min_ttl;
    
#line 137 
    if (0 != 0) 
#line 137 
                ipv6->payload_len = (unsigned short)((unsigned int)((int)((unsigned int)tot_len + 65496U) << 8) | (((unsigned int)tot_len + 65496U) >> 8)); else 
                                                                    
#line 137 
                                                                    ipv6->payload_len = __fswab16((unsigned short)((int)((unsigned int)tot_len + 65496U)));
  }
  
#line 139 
  return;
}


#line 142  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_rx.c"
__inline static void mlx5e_skb_set_hash(struct mlx5_cqe64 *cqe, struct sk_buff *skb)
{
  int tmp_0;
  unsigned int tmp_2;
  
#line 145 
  u8 cht = cqe->rss_hash_type;
  
#line 146 
  if (((int)cht & 12) == 0) {
    int tmp;
    
#line 146 
    if (((int)cht & 192) != 0) 
#line 146 
                               tmp = 2; else 
#line 146 
                                             tmp = 0;
    
#line 146 
    tmp_0 = tmp;
  }
  else 
#line 146 
       tmp_0 = 3;
  
#line 146 
  int ht = tmp_0;
  
#line 149 
  ;
  
#line 149 
  if (0 != 0) 
#line 149 
              tmp_2 = (((cqe->rss_hash_result << 24) | ((cqe->rss_hash_result << 8) & 16711680U)) | ((cqe->rss_hash_result >> 8) & 65280U)) | (cqe->rss_hash_result >> 24); else 
                                                                    
#line 149 
                                                                    tmp_2 = __fswab32(cqe->rss_hash_result);
  
#line 149 
  ;
  
#line 149 
  skb_set_hash(skb,tmp_2,(enum pkt_hash_types)ht);
  
#line 150 
  return;
}


#line 152  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_rx.c"
__inline static void mlx5e_build_rx_skb(struct mlx5_cqe64 *cqe, struct mlx5e_rq *rq, struct sk_buff *skb)
{
  unsigned int tmp_0;
  int lro_num_seg;
  unsigned int tmp_2;
  int tmp_6;
  
#line 156 
  struct net_device *netdev = rq->netdev;
  
#line 157 
  if (0 != 0) 
#line 157 
              tmp_0 = (((cqe->byte_cnt << 24) | ((cqe->byte_cnt << 8) & 16711680U)) | ((cqe->byte_cnt >> 8) & 65280U)) | (cqe->byte_cnt >> 24); else 
                                                                    
#line 157 
                                                                    tmp_0 = __fswab32(cqe->byte_cnt);
  
#line 157 
  u32 cqe_bcnt = tmp_0;
  
#line 160 
  skb_put(skb,cqe_bcnt);
  
#line 162 
  if (0 != 0) 
#line 162 
              tmp_2 = ((((cqe->srqn << 24) | ((cqe->srqn << 8) & 16711680U)) | ((cqe->srqn >> 8) & 65280U)) | (cqe->srqn >> 24)) >> 24;
  else {
    __u32 tmp_1;
    
#line 162 
    tmp_1 = __fswab32(cqe->srqn);
    
#line 162 
    tmp_2 = tmp_1 >> 24;
  }
  
#line 162 
  lro_num_seg = (int)tmp_2;
  
#line 163 
  if (lro_num_seg > 1) {
    unsigned char *tmp_3;
    
#line 164 
    mlx5e_lro_update_hdr(skb,cqe);
    
#line 165 
    tmp_3 = skb_end_pointer((struct sk_buff const *)skb);
    
#line 165 
    ((struct skb_shared_info *)tmp_3)->gso_size = (unsigned short)16384U;
    
#line 166 
    rq->stats.lro_packets += 1ULL;
    
#line 167 
    rq->stats.lro_bytes += (unsigned long long)cqe_bcnt;
  }
  else ;
  
#line 170 
  if ((((long)((netdev->features & 17179869184ULL) != 0ULL) != 0L && ((int)cqe->hds_ip_ext & 1) != 0) && ((int)cqe->hds_ip_ext & 2) != 0) && ((int)cqe->hds_ip_ext & 4) != 0) 
    
#line 174 
    skb->ip_summed = (unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))1U;
  else {
    
#line 176 
    skb->ip_summed = (unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U;
    
#line 177 
    rq->stats.csum_none += 1ULL;
  }
  
#line 180 
  skb->protocol = eth_type_trans(skb,netdev);
  
#line 182 
  skb_record_rx_queue(skb,(unsigned short)((int)((unsigned short)rq->ix)));
  
#line 184 
  if ((long)((netdev->features & 8589934592ULL) != 0ULL) != 0L) 
#line 185 
                                                                mlx5e_skb_set_hash(cqe,skb); else ;
  
#line 187 
  tmp_6 = cqe_has_vlan(cqe);
  
#line 187 
  if (tmp_6 != 0) {
    int tmp_5;
    
#line 188 
    if (0 != 0) 
#line 188 
                tmp_5 = (int)((unsigned short)(((int)cqe->vlan_info << 8) | ((int)cqe->vlan_info >> 8)));
    else {
      __u16 tmp_4;
      
#line 189 
      tmp_4 = __fswab16((unsigned short)((int)cqe->vlan_info));
      
#line 188 
      tmp_5 = (int)tmp_4;
    }
    
#line 188 
    ;
    
#line 188 
    __vlan_hwaccel_put_tag(skb,(unsigned short)129,(unsigned short)tmp_5);
  }
  else ;
  
#line 190 
  return;
}


#line 192  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/en_rx.c"
bool mlx5e_poll_rx_cq(struct mlx5e_cq *cq, int budget)
{
  bool __retres;
  struct mlx5e_rq *tmp;
  int i;
  int tmp_0;
  {
    
#line 194 
    struct mlx5e_cq const *__mptr = (struct mlx5e_cq const *)cq;
    
#line 194 
    tmp = (struct mlx5e_rq *)__mptr + 18446744073709551488U;
  }
  
#line 194 
  struct mlx5e_rq *rq = tmp;
  
#line 198 
  tmp_0 = test_and_clear_bit(1L,(unsigned long volatile *)(& cq->flags));
  
#line 198 
  if (tmp_0 == 0) {
    
#line 199 
    __retres = (_Bool)0;
    
#line 199 
    goto return_label;
  }
  else ;
  
#line 201 
  i = 0;
  
#line 201 
  goto ldv_59689;
  ldv_59688: 
#line 202 
  ;
  {
    struct mlx5e_rx_wqe *wqe;
    struct mlx5_cqe64 *cqe;
    struct sk_buff *skb;
    __be16 wqe_counter_be;
    u16 wqe_counter;
    
#line 208 
    cqe = mlx5e_get_cqe(cq);
    
#line 209 
    if (cqe == (struct mlx5_cqe64 *)0) 
#line 210 
                                       goto ldv_59686; else ;
    
#line 212 
    mlx5_cqwq_pop(& cq->wq);
    
#line 214 
    wqe_counter_be = cqe->wqe_counter;
    
#line 215 
    if (0 != 0) 
#line 215 
                wqe_counter = (unsigned short)(((int)wqe_counter_be << 8) | ((int)wqe_counter_be >> 8)); else 
                                                                    
#line 215 
                                                                    wqe_counter = __fswab16((unsigned short)((int)wqe_counter_be));
    
#line 216 
    wqe = (struct mlx5e_rx_wqe *)mlx5_wq_ll_get_wqe(& rq->wq,(unsigned short)((int)wqe_counter));
    
#line 217 
    skb = *(rq->skb + (int)wqe_counter);
    
#line 218 
    __builtin_prefetch((void const *)skb->data);
    
#line 219 
    *(rq->skb + (int)wqe_counter) = (struct sk_buff *)0;
    
#line 221 
    dma_unmap_single_attrs(rq->pdev,*((dma_addr_t *)(& skb->cb)),(unsigned long)rq->wqe_sz,(enum dma_data_direction)DMA_FROM_DEVICE,(struct dma_attrs *)0);
    
#line 226 
    if ((long)((unsigned int)((int)cqe->op_own >> 4) != 2U) != 0L) {
      
#line 227 
      rq->stats.wqe_err += 1ULL;
      
#line 228 
      consume_skb(skb);
      
#line 229 
      goto wq_ll_pop;
    }
    else ;
    
#line 232 
    mlx5e_build_rx_skb(cqe,rq,skb);
    
#line 233 
    rq->stats.packets += 1ULL;
    
#line 234 
    napi_gro_receive(cq->napi,skb);
    wq_ll_pop: 
#line 236 
    ;
    
#line 237 
    mlx5_wq_ll_pop(& rq->wq,(unsigned short)((int)wqe_counter_be),& wqe->next.next_wqe_index);
  }
  
#line 201 
  i += 1;
  ldv_59689: 
#line 202 
  ;
  
#line 201 
  if (i < budget) 
#line 203 
                  goto ldv_59688; else 
#line 206 
                                       goto ldv_59686;
  ldv_59686: 
#line 207 
  ;
  
#line 241 
  mlx5_cqwq_update_db_record(& cq->wq);
  
#line 242 
  ldv_inline_asm();
  
#line 246 
  if (i == budget) {
    
#line 247 
    set_bit(1L,(unsigned long volatile *)(& cq->flags));
    
#line 248 
    __retres = (_Bool)1;
    
#line 248 
    goto return_label;
  }
  else ;
  
#line 251 
  __retres = (_Bool)0;
  return_label: 
#line 251 
                return __retres;
}


#line 732  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/driver.h"
int mlx5_core_attach_mcg(struct mlx5_core_dev *dev, union ib_gid *mgid, u32 qpn);


#line 733 
int mlx5_core_detach_mcg(struct mlx5_core_dev *dev, union ib_gid *mgid, u32 qpn);


#line 64  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/mcg.c"
int mlx5_core_attach_mcg(struct mlx5_core_dev *dev, union ib_gid *mgid, u32 qpn)
{
  int __retres;
  struct mlx5_attach_mcg_mbox_in in;
  struct mlx5_attach_mcg_mbox_out out;
  int err;
  
#line 70 
  memset((void *)(& in),0,32UL);
  
#line 71 
  memset((void *)(& out),0,16UL);
  
#line 72 
  in.hdr.opcode = (unsigned short)1544U;
  
#line 73 
  memcpy((void *)(& in.gid),(void const *)mgid,16UL);
  
#line 74 
  if (0 != 0) 
#line 74 
              in.qpn = (((qpn << 24) | ((qpn << 8) & 16711680U)) | ((qpn >> 8) & 65280U)) | (qpn >> 24); else 
                                                                    
#line 74 
                                                                    in.qpn = __fswab32(qpn);
  
#line 75 
  err = mlx5_cmd_exec(dev,(void *)(& in),32,(void *)(& out),16);
  
#line 76 
  if (err != 0) {
    
#line 77 
    __retres = err;
    
#line 77 
    goto return_label;
  }
  else ;
  
#line 79 
  if ((unsigned int)out.hdr.status != 0U) 
#line 80 
                                          err = mlx5_cmd_status_to_err(& out.hdr); else ;
  
#line 82 
  __retres = err;
  return_label: 
#line 82 
                return __retres;
}


#line 84  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/mcg.c"
static char const __kstrtab_mlx5_core_attach_mcg[21U] = {(char)'m', (char)'l', (char)'x', (char)'5', (char)'_', (char)'c', (char)'o', (char)'r', (char)'e', (char)'_', (char)'a', (char)'t', (char)'t', (char)'a', (char)'c', (char)'h', (char)'_', (char)'m', (char)'c', (char)'g', (char)'\000'};

#line 84 
struct kernel_symbol const __ksymtab_mlx5_core_attach_mcg;


#line 84  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/mcg.c"
struct kernel_symbol const __ksymtab_mlx5_core_attach_mcg = {.value = (unsigned long)(& mlx5_core_attach_mcg), .name = (char const *)(& __kstrtab_mlx5_core_attach_mcg)};

#line 86  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/mcg.c"
int mlx5_core_detach_mcg(struct mlx5_core_dev *dev, union ib_gid *mgid, u32 qpn)
{
  int __retres;
  struct mlx5_detach_mcg_mbox_in in;
  struct mlx5_detach_mcg_mbox_out out;
  int err;
  
#line 92 
  memset((void *)(& in),0,32UL);
  
#line 93 
  memset((void *)(& out),0,16UL);
  
#line 94 
  in.hdr.opcode = (unsigned short)1800U;
  
#line 95 
  memcpy((void *)(& in.gid),(void const *)mgid,16UL);
  
#line 96 
  if (0 != 0) 
#line 96 
              in.qpn = (((qpn << 24) | ((qpn << 8) & 16711680U)) | ((qpn >> 8) & 65280U)) | (qpn >> 24); else 
                                                                    
#line 96 
                                                                    in.qpn = __fswab32(qpn);
  
#line 97 
  err = mlx5_cmd_exec(dev,(void *)(& in),32,(void *)(& out),16);
  
#line 98 
  if (err != 0) {
    
#line 99 
    __retres = err;
    
#line 99 
    goto return_label;
  }
  else ;
  
#line 101 
  if ((unsigned int)out.hdr.status != 0U) 
#line 102 
                                          err = mlx5_cmd_status_to_err(& out.hdr); else ;
  
#line 104 
  __retres = err;
  return_label: 
#line 104 
                return __retres;
}


#line 106  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/mcg.c"
static char const __kstrtab_mlx5_core_detach_mcg[21U] = {(char)'m', (char)'l', (char)'x', (char)'5', (char)'_', (char)'c', (char)'o', (char)'r', (char)'e', (char)'_', (char)'d', (char)'e', (char)'t', (char)'a', (char)'c', (char)'h', (char)'_', (char)'m', (char)'c', (char)'g', (char)'\000'};

#line 106 
struct kernel_symbol const __ksymtab_mlx5_core_detach_mcg;


#line 106  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/mcg.c"
struct kernel_symbol const __ksymtab_mlx5_core_detach_mcg = {.value = (unsigned long)(& mlx5_core_detach_mcg), .name = (char const *)(& __kstrtab_mlx5_core_detach_mcg)};

#line 542  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/slab.h"
static void *kcalloc_3(size_t n, size_t size, gfp_t flags);


#line 665  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/driver.h"
int mlx5_cmd_alloc_uar(struct mlx5_core_dev *dev, u32 *uarn);


#line 666 
int mlx5_cmd_free_uar(struct mlx5_core_dev *dev, u32 uarn);


#line 67  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/uar.c"
int mlx5_cmd_alloc_uar(struct mlx5_core_dev *dev, u32 *uarn)
{
  struct mlx5_alloc_uar_mbox_in in;
  struct mlx5_alloc_uar_mbox_out out;
  int err;
  
#line 73 
  memset((void *)(& in),0,16UL);
  
#line 74 
  memset((void *)(& out),0,16UL);
  
#line 75 
  in.hdr.opcode = (unsigned short)520U;
  
#line 76 
  err = mlx5_cmd_exec(dev,(void *)(& in),16,(void *)(& out),16);
  
#line 77 
  if (err != 0) 
#line 78 
                goto ex; else ;
  
#line 80 
  if ((unsigned int)out.hdr.status != 0U) {
    
#line 81 
    err = mlx5_cmd_status_to_err(& out.hdr);
    
#line 82 
    goto ex;
  }
  else ;
  
#line 85 
  if (0 != 0) 
#line 85 
              *uarn = ((((out.uarn << 24) | ((out.uarn << 8) & 16711680U)) | ((out.uarn >> 8) & 65280U)) | (out.uarn >> 24)) & 16777215U;
  else {
    __u32 tmp;
    
#line 85 
    tmp = __fswab32(out.uarn);
    
#line 85 
    *uarn = tmp & 16777215U;
  }
  ex: 
#line 87 
  ;
  
#line 88 
  return err;
}


#line 90  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/uar.c"
static char const __kstrtab_mlx5_cmd_alloc_uar[19U] = {(char)'m', (char)'l', (char)'x', (char)'5', (char)'_', (char)'c', (char)'m', (char)'d', (char)'_', (char)'a', (char)'l', (char)'l', (char)'o', (char)'c', (char)'_', (char)'u', (char)'a', (char)'r', (char)'\000'};

#line 90 
struct kernel_symbol const __ksymtab_mlx5_cmd_alloc_uar;


#line 90  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/uar.c"
struct kernel_symbol const __ksymtab_mlx5_cmd_alloc_uar = {.value = (unsigned long)(& mlx5_cmd_alloc_uar), .name = (char const *)(& __kstrtab_mlx5_cmd_alloc_uar)};

#line 92  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/uar.c"
int mlx5_cmd_free_uar(struct mlx5_core_dev *dev, u32 uarn)
{
  struct mlx5_free_uar_mbox_in in;
  struct mlx5_free_uar_mbox_out out;
  int err;
  
#line 98 
  memset((void *)(& in),0,16UL);
  
#line 99 
  memset((void *)(& out),0,16UL);
  
#line 100 
  in.hdr.opcode = (unsigned short)776U;
  
#line 101 
  if (0 != 0) 
#line 101 
              in.uarn = (((uarn << 24) | ((uarn << 8) & 16711680U)) | ((uarn >> 8) & 65280U)) | (uarn >> 24); else 
                                                                    
#line 101 
                                                                    in.uarn = __fswab32(uarn);
  
#line 102 
  err = mlx5_cmd_exec(dev,(void *)(& in),16,(void *)(& out),16);
  
#line 103 
  if (err != 0) 
#line 104 
                goto ex; else ;
  
#line 106 
  if ((unsigned int)out.hdr.status != 0U) 
#line 107 
                                          err = mlx5_cmd_status_to_err(& out.hdr); else ;
  ex: 
#line 109 
  ;
  
#line 110 
  return err;
}


#line 112  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/uar.c"
static char const __kstrtab_mlx5_cmd_free_uar[18U] = {(char)'m', (char)'l', (char)'x', (char)'5', (char)'_', (char)'c', (char)'m', (char)'d', (char)'_', (char)'f', (char)'r', (char)'e', (char)'e', (char)'_', (char)'u', (char)'a', (char)'r', (char)'\000'};

#line 112 
struct kernel_symbol const __ksymtab_mlx5_cmd_free_uar;


#line 112  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/uar.c"
struct kernel_symbol const __ksymtab_mlx5_cmd_free_uar = {.value = (unsigned long)(& mlx5_cmd_free_uar), .name = (char const *)(& __kstrtab_mlx5_cmd_free_uar)};

#line 114  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/uar.c"
static int need_uuar_lock(int uuarn)
{
  int __retres;
  
#line 116 
  int tot_uuars = 16;
  
#line 118 
  if (uuarn == 0 || tot_uuars != 4) {
    
#line 119 
    __retres = 0;
    
#line 119 
    goto return_label;
  }
  else ;
  
#line 121 
  __retres = 1;
  return_label: 
#line 121 
                return __retres;
}


#line 124  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/uar.c"
int mlx5_alloc_uuars(struct mlx5_core_dev *dev, struct mlx5_uuar_info *uuari)
{
  int __retres;
  struct mlx5_bf *bf;
  phys_addr_t addr;
  int err;
  int i;
  int tmp_6;
  
#line 126 
  int tot_uuars = 16;
  
#line 132 
  uuari->num_uars = 4;
  
#line 133 
  uuari->num_low_latency_uuars = 4;
  {
    struct lock_class_key __key;
    
#line 135 
    __mutex_init(& uuari->lock,"&uuari->lock",& __key);
  }
  
#line 136 
  uuari->uars = (struct mlx5_uar *)kcalloc_3((unsigned long)uuari->num_uars,48UL,208U);
  
#line 137 
  if (uuari->uars == (struct mlx5_uar *)0) {
    
#line 138 
    __retres = -12;
    
#line 138 
    goto return_label;
  }
  else ;
  
#line 140 
  uuari->bfs = (struct mlx5_bf *)kcalloc_3((unsigned long)tot_uuars,200UL,208U);
  
#line 141 
  if (uuari->bfs == (struct mlx5_bf *)0) {
    
#line 142 
    err = -12;
    
#line 143 
    goto out_uars;
  }
  else ;
  
#line 146 
  uuari->bitmap = (unsigned long *)kcalloc_3(((unsigned long)tot_uuars + 63UL) / 64UL,8UL,208U);
  
#line 148 
  if (uuari->bitmap == (unsigned long *)0UL) {
    
#line 149 
    err = -12;
    
#line 150 
    goto out_bfs;
  }
  else ;
  
#line 153 
  uuari->count = (unsigned int *)kcalloc_3((unsigned long)tot_uuars,4UL,208U);
  
#line 154 
  if (uuari->count == (unsigned int *)0U) {
    
#line 155 
    err = -12;
    
#line 156 
    goto out_bitmap;
  }
  else ;
  
#line 159 
  i = 0;
  
#line 159 
  goto ldv_35850;
  ldv_35849: 
#line 160 
  ;
  
#line 160 
  err = mlx5_cmd_alloc_uar(dev,& (uuari->uars + i)->index);
  
#line 161 
  if (err != 0) 
#line 162 
                goto out_count; else ;
  
#line 164 
  addr = dev->iseg_base + ((unsigned long long)(uuari->uars + i)->index << 12);
  
#line 165 
  (uuari->uars + i)->map = ioremap(addr,4096UL);
  
#line 166 
  if ((uuari->uars + i)->map == (void *)0) {
    
#line 167 
    mlx5_cmd_free_uar(dev,(uuari->uars + i)->index);
    
#line 168 
    err = -12;
    
#line 169 
    goto out_count;
  }
  else ;
  {
    
#line 171 
    struct _ddebug descriptor = {.modname = "mlx5_core", .function = "mlx5_alloc_uuars", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/uar.c", .format = "%s:%s:%d:(pid %d): ", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))172U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 171 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
      struct task_struct *tmp_3;
      
#line 171 
      ;
      
#line 171 
      ;
      
#line 171 
      tmp_3 = get_current();
      
#line 171 
      ;
      
#line 171 
      __dynamic_pr_debug(& descriptor,"%s:%s:%d:(pid %d): ",(char *)(& dev->priv.name),"mlx5_alloc_uuars",172,tmp_3->pid,(uuari->uars + i)->index,(uuari->uars + i)->map);
    }
    else ;
  }
  
#line 159 
  i += 1;
  ldv_35850: 
#line 160 
  ;
  
#line 159 
  if (uuari->num_uars > i) 
#line 161 
                           goto ldv_35849; else 
#line 164 
                                                goto ldv_35851;
  ldv_35851: 
#line 165 
  ;
  
#line 175 
  i = 0;
  
#line 175 
  goto ldv_35855;
  ldv_35854: 
#line 176 
  ;
  
#line 176 
  bf = uuari->bfs + i;
  
#line 178 
  if (0 != 0) 
#line 178 
              bf->buf_size = (1 << ((((((*((__be32 *)(& dev->hca_caps_cur[0]) + 19U) << 24) | ((*((__be32 *)(& dev->hca_caps_cur[0]) + 19U) << 8) & 16711680U)) | ((*((__be32 *)(& dev->hca_caps_cur[0]) + 19U) >> 8) & 65280U)) | (*((__be32 *)(& dev->hca_caps_cur[0]) + 19U) >> 24)) >> 16UL) & 31U)) / 2;
  else {
    __u32 tmp_4;
    
#line 178 
    tmp_4 = __fswab32(*((__be32 *)(& dev->hca_caps_cur[0]) + 19U));
    
#line 178 
    bf->buf_size = (1 << ((tmp_4 >> 16UL) & 31U)) / 2;
  }
  
#line 179 
  bf->uar = uuari->uars + i / 4;
  
#line 180 
  bf->regreg = (uuari->uars + i / 4)->map;
  
#line 181 
  bf->reg = (void *)0;
  
#line 182 
  if (0 != 0) 
#line 182 
              tmp_6 = 1 << ((((((*((__be32 *)(& dev->hca_caps_cur[0]) + 19U) << 24) | ((*((__be32 *)(& dev->hca_caps_cur[0]) + 19U) << 8) & 16711680U)) | ((*((__be32 *)(& dev->hca_caps_cur[0]) + 19U) >> 8) & 65280U)) | (*((__be32 *)(& dev->hca_caps_cur[0]) + 19U) >> 24)) >> 16UL) & 31U);
  else {
    __u32 tmp_5;
    
#line 183 
    tmp_5 = __fswab32(*((__be32 *)(& dev->hca_caps_cur[0]) + 19U));
    
#line 182 
    tmp_6 = 1 << ((tmp_5 >> 16UL) & 31U);
  }
  
#line 182 
  bf->offset = (unsigned long)((i % 4) * tmp_6 + 2048);
  
#line 185 
  bf->need_lock = need_uuar_lock(i);
  
#line 186 
  spinlock_check(& bf->lock);
  {
    struct lock_class_key __key_0;
    
#line 186 
    __raw_spin_lock_init(& bf->lock.__anonCompField_spinlock_18.rlock,"&(&bf->lock)->rlock",& __key_0);
  }
  
#line 187 
  spinlock_check(& bf->lock32);
  {
    struct lock_class_key __key_1;
    
#line 187 
    __raw_spin_lock_init(& bf->lock32.__anonCompField_spinlock_18.rlock,"&(&bf->lock32)->rlock",& __key_1);
  }
  
#line 188 
  bf->uuarn = i;
  
#line 175 
  i += 1;
  ldv_35855: 
#line 176 
  ;
  
#line 175 
  if (i < tot_uuars) 
#line 177 
                     goto ldv_35854; else 
#line 180 
                                          goto ldv_35856;
  ldv_35856: 
#line 181 
  ;
  
#line 191 
  __retres = 0;
  
#line 191 
  goto return_label;
  out_count: 
#line 193 
  ;
  
#line 194 
  i -= 1;
  
#line 194 
  goto ldv_35858;
  ldv_35857: 
#line 195 
  ;
  
#line 195 
  iounmap((void volatile *)(uuari->uars + i)->map);
  
#line 196 
  mlx5_cmd_free_uar(dev,(uuari->uars + i)->index);
  
#line 194 
  i -= 1;
  ldv_35858: 
#line 195 
  ;
  
#line 194 
  if (i >= 0) 
#line 196 
              goto ldv_35857; else 
#line 199 
                                   goto ldv_35859;
  ldv_35859: 
#line 200 
  ;
  
#line 198 
  kfree((void const *)uuari->count);
  out_bitmap: 
#line 200 
  ;
  
#line 201 
  kfree((void const *)uuari->bitmap);
  out_bfs: 
#line 203 
  ;
  
#line 204 
  kfree((void const *)uuari->bfs);
  out_uars: 
#line 206 
  ;
  
#line 207 
  kfree((void const *)uuari->uars);
  
#line 208 
  __retres = err;
  return_label: 
#line 208 
                return __retres;
}


#line 211  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/uar.c"
int mlx5_free_uuars(struct mlx5_core_dev *dev, struct mlx5_uuar_info *uuari)
{
  int __retres;
  
#line 213 
  int i = uuari->num_uars;
  
#line 215 
  i -= 1;
  
#line 215 
  goto ldv_35866;
  ldv_35865: 
#line 216 
  ;
  
#line 216 
  iounmap((void volatile *)(uuari->uars + i)->map);
  
#line 217 
  mlx5_cmd_free_uar(dev,(uuari->uars + i)->index);
  
#line 215 
  i -= 1;
  ldv_35866: 
#line 216 
  ;
  
#line 215 
  if (i >= 0) 
#line 217 
              goto ldv_35865; else 
#line 220 
                                   goto ldv_35867;
  ldv_35867: 
#line 221 
  ;
  
#line 220 
  kfree((void const *)uuari->count);
  
#line 221 
  kfree((void const *)uuari->bitmap);
  
#line 222 
  kfree((void const *)uuari->bfs);
  
#line 223 
  kfree((void const *)uuari->uars);
  
#line 225 
  __retres = 0;
  
#line 225 
  return __retres;
}


#line 228  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/uar.c"
int mlx5_alloc_map_uar(struct mlx5_core_dev *mdev, struct mlx5_uar *uar)
{
  int __retres;
  phys_addr_t pfn;
  phys_addr_t uar_bar_start;
  int err;
  
#line 234 
  err = mlx5_cmd_alloc_uar(mdev,& uar->index);
  
#line 235 
  if (err != 0) {
    struct task_struct *tmp;
    
#line 236 
    ;
    
#line 236 
    tmp = get_current();
    
#line 236 
    ;
    
#line 236 
    printk("\001",(char *)(& mdev->priv.name),"mlx5_alloc_map_uar",236,tmp->pid,err);
    
#line 237 
    __retres = err;
    
#line 237 
    goto return_label;
  }
  else ;
  
#line 240 
  uar_bar_start = (mdev->pdev)->resource[0].start;
  
#line 241 
  pfn = (uar_bar_start >> 12) + (unsigned long long)uar->index;
  
#line 242 
  uar->map = ioremap(pfn << 12,4096UL);
  
#line 243 
  if (uar->map == (void *)0) {
    struct task_struct *tmp_0;
    
#line 244 
    ;
    
#line 244 
    tmp_0 = get_current();
    
#line 244 
    ;
    
#line 244 
    printk("\001",(char *)(& mdev->priv.name),"mlx5_alloc_map_uar",244,tmp_0->pid,err);
    
#line 245 
    err = -12;
    
#line 246 
    goto err_free_uar;
  }
  else ;
  
#line 249 
  __retres = 0;
  
#line 249 
  goto return_label;
  err_free_uar: 
#line 251 
  ;
  
#line 252 
  mlx5_cmd_free_uar(mdev,uar->index);
  
#line 254 
  __retres = err;
  return_label: 
#line 254 
                return __retres;
}


#line 256  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/uar.c"
static char const __kstrtab_mlx5_alloc_map_uar[19U] = {(char)'m', (char)'l', (char)'x', (char)'5', (char)'_', (char)'a', (char)'l', (char)'l', (char)'o', (char)'c', (char)'_', (char)'m', (char)'a', (char)'p', (char)'_', (char)'u', (char)'a', (char)'r', (char)'\000'};

#line 256 
struct kernel_symbol const __ksymtab_mlx5_alloc_map_uar;


#line 256  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/uar.c"
struct kernel_symbol const __ksymtab_mlx5_alloc_map_uar = {.value = (unsigned long)(& mlx5_alloc_map_uar), .name = (char const *)(& __kstrtab_mlx5_alloc_map_uar)};

#line 258  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/uar.c"
void mlx5_unmap_free_uar(struct mlx5_core_dev *mdev, struct mlx5_uar *uar)
{
  
#line 260 
  iounmap((void volatile *)uar->map);
  
#line 261 
  mlx5_cmd_free_uar(mdev,uar->index);
  
#line 262 
  return;
}


#line 263  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/uar.c"
static char const __kstrtab_mlx5_unmap_free_uar[20U] = {(char)'m', (char)'l', (char)'x', (char)'5', (char)'_', (char)'u', (char)'n', (char)'m', (char)'a', (char)'p', (char)'_', (char)'f', (char)'r', (char)'e', (char)'e', (char)'_', (char)'u', (char)'a', (char)'r', (char)'\000'};

#line 263 
struct kernel_symbol const __ksymtab_mlx5_unmap_free_uar;


#line 263  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/uar.c"
struct kernel_symbol const __ksymtab_mlx5_unmap_free_uar = {.value = (unsigned long)(& mlx5_unmap_free_uar), .name = (char const *)(& __kstrtab_mlx5_unmap_free_uar)};

#line 490  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_uar.c.aux"
static void *kcalloc_3(size_t n, size_t size, gfp_t flags)
{
  void *tmp;
  
#line 493 
  tmp = ldv_kcalloc(n,size,flags);
  
#line 493 
  return tmp;
}


#line 114  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/signal.h"
void __compiletime_assert_114(void);


#line 209  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/hrtimer.h"
void __compiletime_assert_209(void);


#line 581  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/slab.h"
static void *kzalloc_11(size_t size, gfp_t flags);


#line 637  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/driver.h"
__inline static void *mlx5_vzalloc_6(unsigned long size)
{
  void *rtn;
  
#line 641 
  rtn = kzalloc_11(size,720U);
  
#line 642 
  if (rtn == (void *)0) 
#line 643 
                        rtn = vzalloc(size); else ;
  
#line 644 
  return rtn;
}


#line 741 
int mlx5_set_port_caps(struct mlx5_core_dev *dev, u8 port_num, u32 caps);


#line 748 
int mlx5_query_port_link_width_oper(struct mlx5_core_dev *dev, u8 *link_width_oper, u8 local_port);


#line 750 
int mlx5_query_port_proto_oper(struct mlx5_core_dev *dev, u8 *proto_oper, int proto_mask, u8 local_port);


#line 764 
int mlx5_query_port_vl_hw_cap(struct mlx5_core_dev *dev, u8 *vl_hw_cap, u8 local_port);


#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/port.c"
int mlx5_core_access_reg(struct mlx5_core_dev *dev, void *data_in, int size_in, void *data_out, int size_out, u16 reg_num, int arg, int write)
{
  int __retres;
  
#line 42 
  struct mlx5_access_reg_mbox_in *in = (struct mlx5_access_reg_mbox_in *)0;
  
#line 43 
  struct mlx5_access_reg_mbox_out *out = (struct mlx5_access_reg_mbox_out *)0;
  
#line 44 
  int err = -12;
  
#line 46 
  in = (struct mlx5_access_reg_mbox_in *)mlx5_vzalloc_6((unsigned long)size_in + 16UL);
  
#line 47 
  if (in == (struct mlx5_access_reg_mbox_in *)0) {
    
#line 48 
    __retres = -12;
    
#line 48 
    goto return_label;
  }
  else ;
  
#line 50 
  out = (struct mlx5_access_reg_mbox_out *)mlx5_vzalloc_6((unsigned long)size_out + 16UL);
  
#line 51 
  if (out == (struct mlx5_access_reg_mbox_out *)0) 
#line 52 
                                                   goto ex1; else ;
  
#line 54 
  memcpy((void *)(& in->data),(void const *)data_in,(unsigned long)size_in);
  
#line 55 
  in->hdr.opcode = (unsigned short)1288U;
  
#line 56 
  if (0 != 0) {
    int tmp_1;
    
#line 56 
    if (write == 0) 
#line 56 
                    tmp_1 = 256; else 
#line 56 
                                      tmp_1 = 0;
    
#line 56 
    in->hdr.opmod = (unsigned short)tmp_1;
  }
  else 
#line 56 
       in->hdr.opmod = __fswab16((unsigned short)(write == 0));
  
#line 57 
  if (0 != 0) 
#line 57 
              in->arg = ((((unsigned int)arg << 24) | (((unsigned int)arg << 8) & 16711680U)) | (((unsigned int)arg >> 8) & 65280U)) | ((unsigned int)arg >> 24); else 
                                                                    
#line 57 
                                                                    in->arg = __fswab32((unsigned int)arg);
  
#line 58 
  if (0 != 0) 
#line 58 
              in->register_id = (unsigned short)(((int)reg_num << 8) | ((int)reg_num >> 8)); else 
                                                                    
#line 58 
                                                                    in->register_id = __fswab16((unsigned short)((int)reg_num));
  
#line 59 
  err = mlx5_cmd_exec(dev,(void *)in,(int)((unsigned int)size_in + 16U),(void *)out,(int)((unsigned int)size_out + 16U));
  
#line 61 
  if (err != 0) 
#line 62 
                goto ex2; else ;
  
#line 64 
  if ((unsigned int)out->hdr.status != 0U) 
#line 65 
                                           err = mlx5_cmd_status_to_err(& out->hdr); else ;
  
#line 67 
  if (err == 0) 
#line 68 
                memcpy(data_out,(void const *)(& out->data),(unsigned long)size_out); else ;
  ex2: 
#line 70 
  ;
  
#line 71 
  kvfree((void const *)out);
  ex1: 
#line 72 
  ;
  
#line 73 
  kvfree((void const *)in);
  
#line 74 
  __retres = err;
  return_label: 
#line 74 
                return __retres;
}


#line 76  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/port.c"
static char const __kstrtab_mlx5_core_access_reg[21U] = {(char)'m', (char)'l', (char)'x', (char)'5', (char)'_', (char)'c', (char)'o', (char)'r', (char)'e', (char)'_', (char)'a', (char)'c', (char)'c', (char)'e', (char)'s', (char)'s', (char)'_', (char)'r', (char)'e', (char)'g', (char)'\000'};

#line 76 
struct kernel_symbol const __ksymtab_mlx5_core_access_reg;


#line 76  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/port.c"
struct kernel_symbol const __ksymtab_mlx5_core_access_reg = {.value = (unsigned long)(& mlx5_core_access_reg), .name = (char const *)(& __kstrtab_mlx5_core_access_reg)};

#line 89  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/port.c"
int mlx5_set_port_caps(struct mlx5_core_dev *dev, u8 port_num, u32 caps)
{
  struct mlx5_reg_pcap in;
  struct mlx5_reg_pcap out;
  int err;
  
#line 95 
  memset((void *)(& in),0,20UL);
  
#line 96 
  if (0 != 0) 
#line 96 
              in.caps_127_96 = (((caps << 24) | ((caps << 8) & 16711680U)) | ((caps >> 8) & 65280U)) | (caps >> 24); else 
                                                                    
#line 96 
                                                                    in.caps_127_96 = __fswab32(caps);
  
#line 97 
  in.port_num = port_num;
  
#line 99 
  err = mlx5_core_access_reg(dev,(void *)(& in),20,(void *)(& out),20,(unsigned short)20481,0,1);
  
#line 102 
  return err;
}


#line 104  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/port.c"
static char const __kstrtab_mlx5_set_port_caps[19U] = {(char)'m', (char)'l', (char)'x', (char)'5', (char)'_', (char)'s', (char)'e', (char)'t', (char)'_', (char)'p', (char)'o', (char)'r', (char)'t', (char)'_', (char)'c', (char)'a', (char)'p', (char)'s', (char)'\000'};

#line 104 
struct kernel_symbol const __ksymtab_mlx5_set_port_caps;


#line 104  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/port.c"
struct kernel_symbol const __ksymtab_mlx5_set_port_caps = {.value = (unsigned long)(& mlx5_set_port_caps), .name = (char const *)(& __kstrtab_mlx5_set_port_caps)};

#line 106  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/port.c"
int mlx5_query_port_ptys(struct mlx5_core_dev *dev, u32 *ptys, int ptys_size, int proto_mask, u8 local_port)
{
  u32 in[16U];
  int err;
  
#line 112 
  memset((void *)(& in),0,64UL);
  {
    
#line 113 
    bool __cond = (_Bool)0;
    
#line 113 
    if ((int)__cond != 0) 
#line 113 
                          __compiletime_assert_113(); else ;
  }
  
#line 113 
  if (0 != 0) {
    unsigned int tmp_2;
    unsigned int tmp_4;
    unsigned int tmp_6;
    unsigned int tmp_8;
    
#line 113 
    if (0 != 0) 
#line 113 
                tmp_2 = ((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) & 4278255615U;
    else {
      __u32 tmp_1;
      
#line 113 
      tmp_1 = __fswab32(*((__be32 *)(& in)));
      
#line 113 
      tmp_2 = tmp_1 & 4278255615U;
    }
    
#line 113 
    if (0 != 0) 
#line 113 
                tmp_4 = ((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) & 4278255615U;
    else {
      __u32 tmp_3;
      
#line 113 
      tmp_3 = __fswab32(*((__be32 *)(& in)));
      
#line 113 
      tmp_4 = tmp_3 & 4278255615U;
    }
    
#line 113 
    if (0 != 0) 
#line 113 
                tmp_6 = ((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) & 4278255615U;
    else {
      __u32 tmp_5;
      
#line 113 
      tmp_5 = __fswab32(*((__be32 *)(& in)));
      
#line 113 
      tmp_6 = tmp_5 & 4278255615U;
    }
    
#line 113 
    if (0 != 0) 
#line 113 
                tmp_8 = ((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) & 4278255615U;
    else {
      __u32 tmp_7;
      
#line 113 
      tmp_7 = __fswab32(*((__be32 *)(& in)));
      
#line 113 
      tmp_8 = tmp_7 & 4278255615U;
    }
    
#line 113 
    *((__be32 *)(& in)) = ((((tmp_2 | ((unsigned int)local_port << 16UL)) << 24) | (((tmp_4 | ((unsigned int)local_port << 16UL)) << 8) & 16711680U)) | (((tmp_6 | ((unsigned int)local_port << 16UL)) >> 8) & 65280U)) | ((tmp_8 | ((unsigned int)local_port << 16UL)) >> 24);
  }
  else {
    __u32 tmp_11;
    unsigned int tmp_10;
    
#line 113 
    if (0 != 0) 
#line 113 
                tmp_10 = ((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) & 4278255615U;
    else {
      __u32 tmp_9;
      
#line 113 
      tmp_9 = __fswab32(*((__be32 *)(& in)));
      
#line 113 
      tmp_10 = tmp_9 & 4278255615U;
    }
    
#line 113 
    ;
    
#line 113 
    tmp_11 = __fswab32(tmp_10 | ((unsigned int)local_port << 16UL));
    
#line 113 
    *((__be32 *)(& in)) = tmp_11;
  }
  {
    
#line 114 
    bool __cond_0 = (_Bool)0;
    
#line 114 
    if ((int)__cond_0 != 0) 
#line 114 
                            __compiletime_assert_114(); else ;
  }
  
#line 114 
  if (0 != 0) {
    unsigned int tmp_15;
    unsigned int tmp_17;
    unsigned int tmp_19;
    unsigned int tmp_21;
    
#line 114 
    if (0 != 0) 
#line 114 
                tmp_15 = ((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) & 4294967288U;
    else {
      __u32 tmp_14;
      
#line 114 
      tmp_14 = __fswab32(*((__be32 *)(& in)));
      
#line 114 
      tmp_15 = tmp_14 & 4294967288U;
    }
    
#line 114 
    if (0 != 0) 
#line 114 
                tmp_17 = ((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) & 4294967288U;
    else {
      __u32 tmp_16;
      
#line 114 
      tmp_16 = __fswab32(*((__be32 *)(& in)));
      
#line 114 
      tmp_17 = tmp_16 & 4294967288U;
    }
    
#line 114 
    if (0 != 0) 
#line 114 
                tmp_19 = ((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) & 4294967288U;
    else {
      __u32 tmp_18;
      
#line 114 
      tmp_18 = __fswab32(*((__be32 *)(& in)));
      
#line 114 
      tmp_19 = tmp_18 & 4294967288U;
    }
    
#line 114 
    if (0 != 0) 
#line 114 
                tmp_21 = ((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) & 4294967288U;
    else {
      __u32 tmp_20;
      
#line 114 
      tmp_20 = __fswab32(*((__be32 *)(& in)));
      
#line 114 
      tmp_21 = tmp_20 & 4294967288U;
    }
    
#line 114 
    *((__be32 *)(& in)) = ((((tmp_15 | ((unsigned int)proto_mask & 7U)) << 24) | (((tmp_17 | ((unsigned int)proto_mask & 7U)) << 8) & 16711680U)) | (((tmp_19 | ((unsigned int)proto_mask & 7U)) >> 8) & 65280U)) | ((tmp_21 | ((unsigned int)proto_mask & 7U)) >> 24);
  }
  else {
    __u32 tmp_24;
    unsigned int tmp_23;
    
#line 114 
    if (0 != 0) 
#line 114 
                tmp_23 = ((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) & 4294967288U;
    else {
      __u32 tmp_22;
      
#line 114 
      tmp_22 = __fswab32(*((__be32 *)(& in)));
      
#line 114 
      tmp_23 = tmp_22 & 4294967288U;
    }
    
#line 114 
    ;
    
#line 114 
    tmp_24 = __fswab32(tmp_23 | ((unsigned int)proto_mask & 7U));
    
#line 114 
    *((__be32 *)(& in)) = tmp_24;
  }
  
#line 116 
  err = mlx5_core_access_reg(dev,(void *)(& in),64,(void *)ptys,ptys_size,(unsigned short)20484,0,0);
  
#line 119 
  return err;
}


#line 121  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/port.c"
static char const __kstrtab_mlx5_query_port_ptys[21U] = {(char)'m', (char)'l', (char)'x', (char)'5', (char)'_', (char)'q', (char)'u', (char)'e', (char)'r', (char)'y', (char)'_', (char)'p', (char)'o', (char)'r', (char)'t', (char)'_', (char)'p', (char)'t', (char)'y', (char)'s', (char)'\000'};

#line 121 
struct kernel_symbol const __ksymtab_mlx5_query_port_ptys;


#line 121  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/port.c"
struct kernel_symbol const __ksymtab_mlx5_query_port_ptys = {.value = (unsigned long)(& mlx5_query_port_ptys), .name = (char const *)(& __kstrtab_mlx5_query_port_ptys)};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/port.c"
int mlx5_query_port_proto_cap(struct mlx5_core_dev *dev, u32 *proto_cap, int proto_mask)
{
  int __retres;
  u32 out[16U];
  int err;
  
#line 129 
  err = mlx5_query_port_ptys(dev,(u32 *)(& out),64,proto_mask,(unsigned char)1);
  
#line 130 
  if (err != 0) {
    
#line 131 
    __retres = err;
    
#line 131 
    goto return_label;
  }
  else ;
  
#line 133 
  if (proto_mask == 4) 
    
#line 134 
    if (0 != 0) 
#line 134 
                *proto_cap = (((*((__be32 *)(& out) + 3U) << 24) | ((*((__be32 *)(& out) + 3U) << 8) & 16711680U)) | ((*((__be32 *)(& out) + 3U) >> 8) & 65280U)) | (*((__be32 *)(& out) + 3U) >> 24); else 
                                                                    
#line 134 
                                                                    *proto_cap = __fswab32(*((__be32 *)(& out) + 3U));
  else 
    
#line 136 
    if (0 != 0) 
#line 136 
                *proto_cap = ((((*((__be32 *)(& out) + 4U) << 24) | ((*((__be32 *)(& out) + 4U) << 8) & 16711680U)) | ((*((__be32 *)(& out) + 4U) >> 8) & 65280U)) | (*((__be32 *)(& out) + 4U) >> 24)) & 65535U;
    else {
      __u32 tmp_0;
      
#line 136 
      tmp_0 = __fswab32(*((__be32 *)(& out) + 4U));
      
#line 136 
      *proto_cap = tmp_0 & 65535U;
    }
  
#line 138 
  __retres = 0;
  return_label: 
#line 138 
                return __retres;
}


#line 140  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/port.c"
static char const __kstrtab_mlx5_query_port_proto_cap[26U] = {(char)'m', (char)'l', (char)'x', (char)'5', (char)'_', (char)'q', (char)'u', (char)'e', (char)'r', (char)'y', (char)'_', (char)'p', (char)'o', (char)'r', (char)'t', (char)'_', (char)'p', (char)'r', (char)'o', (char)'t', (char)'o', (char)'_', (char)'c', (char)'a', (char)'p', (char)'\000'};

#line 140 
struct kernel_symbol const __ksymtab_mlx5_query_port_proto_cap;


#line 140  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/port.c"
struct kernel_symbol const __ksymtab_mlx5_query_port_proto_cap = {.value = (unsigned long)(& mlx5_query_port_proto_cap), .name = (char const *)(& __kstrtab_mlx5_query_port_proto_cap)};

#line 142  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/port.c"
int mlx5_query_port_proto_admin(struct mlx5_core_dev *dev, u32 *proto_admin, int proto_mask)
{
  int __retres;
  u32 out[16U];
  int err;
  
#line 148 
  err = mlx5_query_port_ptys(dev,(u32 *)(& out),64,proto_mask,(unsigned char)1);
  
#line 149 
  if (err != 0) {
    
#line 150 
    __retres = err;
    
#line 150 
    goto return_label;
  }
  else ;
  
#line 152 
  if (proto_mask == 4) 
    
#line 153 
    if (0 != 0) 
#line 153 
                *proto_admin = (((*((__be32 *)(& out) + 6U) << 24) | ((*((__be32 *)(& out) + 6U) << 8) & 16711680U)) | ((*((__be32 *)(& out) + 6U) >> 8) & 65280U)) | (*((__be32 *)(& out) + 6U) >> 24); else 
                                                                    
#line 153 
                                                                    *proto_admin = __fswab32(*((__be32 *)(& out) + 6U));
  else 
    
#line 155 
    if (0 != 0) 
#line 155 
                *proto_admin = ((((*((__be32 *)(& out) + 7U) << 24) | ((*((__be32 *)(& out) + 7U) << 8) & 16711680U)) | ((*((__be32 *)(& out) + 7U) >> 8) & 65280U)) | (*((__be32 *)(& out) + 7U) >> 24)) & 65535U;
    else {
      __u32 tmp_0;
      
#line 155 
      tmp_0 = __fswab32(*((__be32 *)(& out) + 7U));
      
#line 155 
      *proto_admin = tmp_0 & 65535U;
    }
  
#line 157 
  __retres = 0;
  return_label: 
#line 157 
                return __retres;
}


#line 159  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/port.c"
static char const __kstrtab_mlx5_query_port_proto_admin[28U] = {(char)'m', (char)'l', (char)'x', (char)'5', (char)'_', (char)'q', (char)'u', (char)'e', (char)'r', (char)'y', (char)'_', (char)'p', (char)'o', (char)'r', (char)'t', (char)'_', (char)'p', (char)'r', (char)'o', (char)'t', (char)'o', (char)'_', (char)'a', (char)'d', (char)'m', (char)'i', (char)'n', (char)'\000'};

#line 159 
struct kernel_symbol const __ksymtab_mlx5_query_port_proto_admin;


#line 159  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/port.c"
struct kernel_symbol const __ksymtab_mlx5_query_port_proto_admin = {.value = (unsigned long)(& mlx5_query_port_proto_admin), .name = (char const *)(& __kstrtab_mlx5_query_port_proto_admin)};

#line 161  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/port.c"
int mlx5_query_port_link_width_oper(struct mlx5_core_dev *dev, u8 *link_width_oper, u8 local_port)
{
  int __retres;
  u32 out[16U];
  int err;
  
#line 167 
  err = mlx5_query_port_ptys(dev,(u32 *)(& out),64,1,(unsigned char)((int)local_port));
  
#line 168 
  if (err != 0) {
    
#line 169 
    __retres = err;
    
#line 169 
    goto return_label;
  }
  else ;
  
#line 171 
  if (0 != 0) 
#line 171 
              *link_width_oper = (unsigned char)(((((*((__be32 *)(& out) + 10U) << 24) | ((*((__be32 *)(& out) + 10U) << 8) & 16711680U)) | ((*((__be32 *)(& out) + 10U) >> 8) & 65280U)) | (*((__be32 *)(& out) + 10U) >> 24)) >> 16UL);
  else {
    __u32 tmp;
    
#line 171 
    tmp = __fswab32(*((__be32 *)(& out) + 10U));
    
#line 171 
    *link_width_oper = (unsigned char)(tmp >> 16UL);
  }
  
#line 173 
  __retres = 0;
  return_label: 
#line 173 
                return __retres;
}


#line 175  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/port.c"
static char const __kstrtab_mlx5_query_port_link_width_oper[32U] = {(char)'m', (char)'l', (char)'x', (char)'5', (char)'_', (char)'q', (char)'u', (char)'e', (char)'r', (char)'y', (char)'_', (char)'p', (char)'o', (char)'r', (char)'t', (char)'_', (char)'l', (char)'i', (char)'n', (char)'k', (char)'_', (char)'w', (char)'i', (char)'d', (char)'t', (char)'h', (char)'_', (char)'o', (char)'p', (char)'e', (char)'r', (char)'\000'};

#line 175 
struct kernel_symbol const __ksymtab_mlx5_query_port_link_width_oper;


#line 175  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/port.c"
struct kernel_symbol const __ksymtab_mlx5_query_port_link_width_oper = {.value = (unsigned long)(& mlx5_query_port_link_width_oper), .name = (char const *)(& __kstrtab_mlx5_query_port_link_width_oper)};

#line 177  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/port.c"
int mlx5_query_port_proto_oper(struct mlx5_core_dev *dev, u8 *proto_oper, int proto_mask, u8 local_port)
{
  int __retres;
  u32 out[16U];
  int err;
  
#line 184 
  err = mlx5_query_port_ptys(dev,(u32 *)(& out),64,proto_mask,(unsigned char)((int)local_port));
  
#line 185 
  if (err != 0) {
    
#line 186 
    __retres = err;
    
#line 186 
    goto return_label;
  }
  else ;
  
#line 188 
  if (proto_mask == 4) 
    
#line 189 
    if (0 != 0) 
#line 189 
                *proto_oper = (unsigned char)(*((__be32 *)(& out) + 9U) >> 24);
    else {
      __u32 tmp;
      
#line 189 
      tmp = __fswab32(*((__be32 *)(& out) + 9U));
      
#line 189 
      *proto_oper = (unsigned char)tmp;
    }
  else 
    
#line 191 
    if (0 != 0) 
#line 191 
                *proto_oper = (unsigned char)(*((__be32 *)(& out) + 10U) >> 24);
    else {
      __u32 tmp_0;
      
#line 191 
      tmp_0 = __fswab32(*((__be32 *)(& out) + 10U));
      
#line 191 
      *proto_oper = (unsigned char)tmp_0;
    }
  
#line 193 
  __retres = 0;
  return_label: 
#line 193 
                return __retres;
}


#line 195  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/port.c"
static char const __kstrtab_mlx5_query_port_proto_oper[27U] = {(char)'m', (char)'l', (char)'x', (char)'5', (char)'_', (char)'q', (char)'u', (char)'e', (char)'r', (char)'y', (char)'_', (char)'p', (char)'o', (char)'r', (char)'t', (char)'_', (char)'p', (char)'r', (char)'o', (char)'t', (char)'o', (char)'_', (char)'o', (char)'p', (char)'e', (char)'r', (char)'\000'};

#line 195 
struct kernel_symbol const __ksymtab_mlx5_query_port_proto_oper;


#line 195  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/port.c"
struct kernel_symbol const __ksymtab_mlx5_query_port_proto_oper = {.value = (unsigned long)(& mlx5_query_port_proto_oper), .name = (char const *)(& __kstrtab_mlx5_query_port_proto_oper)};

#line 197  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/port.c"
int mlx5_set_port_proto(struct mlx5_core_dev *dev, u32 proto_admin, int proto_mask)
{
  u32 in[16U];
  u32 out[16U];
  int err;
  
#line 204 
  memset((void *)(& in),0,64UL);
  {
    
#line 206 
    bool __cond = (_Bool)0;
    
#line 206 
    if ((int)__cond != 0) 
#line 206 
                          __compiletime_assert_206(); else ;
  }
  
#line 206 
  if (0 != 0) {
    unsigned int tmp_2;
    unsigned int tmp_4;
    unsigned int tmp_6;
    
#line 206 
    if (0 != 0) 
#line 206 
                tmp_2 = ((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) << 24;
    else {
      __u32 tmp_1;
      
#line 206 
      tmp_1 = __fswab32(*((__be32 *)(& in)));
      
#line 206 
      tmp_2 = tmp_1 << 24;
    }
    
#line 206 
    if (0 != 0) 
#line 206 
                tmp_4 = (((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) << 8) & 16711680U;
    else {
      __u32 tmp_3;
      
#line 206 
      tmp_3 = __fswab32(*((__be32 *)(& in)));
      
#line 206 
      tmp_4 = (tmp_3 << 8) & 16711680U;
    }
    
#line 206 
    if (0 != 0) 
#line 206 
                tmp_6 = ((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) >> 24;
    else {
      __u32 tmp_5;
      
#line 206 
      tmp_5 = __fswab32(*((__be32 *)(& in)));
      
#line 206 
      tmp_6 = tmp_5 >> 24;
    }
    
#line 206 
    *((__be32 *)(& in)) = ((tmp_2 | tmp_4) | tmp_6) | 256U;
  }
  else {
    __u32 tmp_9;
    unsigned int tmp_8;
    
#line 206 
    if (0 != 0) 
#line 206 
                tmp_8 = (((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) & 4278255615U) | 65536U;
    else {
      __u32 tmp_7;
      
#line 206 
      tmp_7 = __fswab32(*((__be32 *)(& in)));
      
#line 206 
      tmp_8 = (tmp_7 & 4278255615U) | 65536U;
    }
    
#line 206 
    tmp_9 = __fswab32(tmp_8);
    
#line 206 
    *((__be32 *)(& in)) = tmp_9;
  }
  {
    
#line 207 
    bool __cond_0 = (_Bool)0;
    
#line 207 
    if ((int)__cond_0 != 0) 
#line 207 
                            __compiletime_assert_207(); else ;
  }
  
#line 207 
  if (0 != 0) {
    unsigned int tmp_13;
    unsigned int tmp_15;
    unsigned int tmp_17;
    unsigned int tmp_19;
    
#line 207 
    if (0 != 0) 
#line 207 
                tmp_13 = ((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) & 4294967288U;
    else {
      __u32 tmp_12;
      
#line 207 
      tmp_12 = __fswab32(*((__be32 *)(& in)));
      
#line 207 
      tmp_13 = tmp_12 & 4294967288U;
    }
    
#line 207 
    if (0 != 0) 
#line 207 
                tmp_15 = ((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) & 4294967288U;
    else {
      __u32 tmp_14;
      
#line 207 
      tmp_14 = __fswab32(*((__be32 *)(& in)));
      
#line 207 
      tmp_15 = tmp_14 & 4294967288U;
    }
    
#line 207 
    if (0 != 0) 
#line 207 
                tmp_17 = ((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) & 4294967288U;
    else {
      __u32 tmp_16;
      
#line 207 
      tmp_16 = __fswab32(*((__be32 *)(& in)));
      
#line 207 
      tmp_17 = tmp_16 & 4294967288U;
    }
    
#line 207 
    if (0 != 0) 
#line 207 
                tmp_19 = ((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) & 4294967288U;
    else {
      __u32 tmp_18;
      
#line 207 
      tmp_18 = __fswab32(*((__be32 *)(& in)));
      
#line 207 
      tmp_19 = tmp_18 & 4294967288U;
    }
    
#line 207 
    *((__be32 *)(& in)) = ((((tmp_13 | ((unsigned int)proto_mask & 7U)) << 24) | (((tmp_15 | ((unsigned int)proto_mask & 7U)) << 8) & 16711680U)) | (((tmp_17 | ((unsigned int)proto_mask & 7U)) >> 8) & 65280U)) | ((tmp_19 | ((unsigned int)proto_mask & 7U)) >> 24);
  }
  else {
    __u32 tmp_22;
    unsigned int tmp_21;
    
#line 207 
    if (0 != 0) 
#line 207 
                tmp_21 = ((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) & 4294967288U;
    else {
      __u32 tmp_20;
      
#line 207 
      tmp_20 = __fswab32(*((__be32 *)(& in)));
      
#line 207 
      tmp_21 = tmp_20 & 4294967288U;
    }
    
#line 207 
    ;
    
#line 207 
    tmp_22 = __fswab32(tmp_21 | ((unsigned int)proto_mask & 7U));
    
#line 207 
    *((__be32 *)(& in)) = tmp_22;
  }
  
#line 208 
  if (proto_mask == 4) {
    {
      
#line 209 
      bool __cond_1 = (_Bool)0;
      
#line 209 
      if ((int)__cond_1 != 0) 
#line 209 
                              __compiletime_assert_209(); else ;
    }
    
#line 209 
    if (0 != 0) 
#line 209 
                *((__be32 *)(& in) + 6U) = (((proto_admin << 24) | ((proto_admin << 8) & 16711680U)) | ((proto_admin >> 8) & 65280U)) | (proto_admin >> 24); else 
                                                                    
#line 209 
                                                                    *((__be32 *)(& in) + 6U) = __fswab32(proto_admin);
  }
  else {
    {
      
#line 211 
      bool __cond_2 = (_Bool)0;
      
#line 211 
      if ((int)__cond_2 != 0) 
#line 211 
                              __compiletime_assert_211(); else ;
    }
    
#line 211 
    if (0 != 0) {
      unsigned int tmp_27;
      unsigned int tmp_29;
      unsigned int tmp_31;
      unsigned int tmp_33;
      
#line 211 
      if (0 != 0) 
#line 211 
                  tmp_27 = ((((*((__be32 *)(& in) + 7U) << 24) | ((*((__be32 *)(& in) + 7U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 7U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 7U) >> 24)) & 4294901760U;
      else {
        __u32 tmp_26;
        
#line 211 
        tmp_26 = __fswab32(*((__be32 *)(& in) + 7U));
        
#line 211 
        tmp_27 = tmp_26 & 4294901760U;
      }
      
#line 211 
      if (0 != 0) 
#line 211 
                  tmp_29 = ((((*((__be32 *)(& in) + 7U) << 24) | ((*((__be32 *)(& in) + 7U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 7U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 7U) >> 24)) & 4294901760U;
      else {
        __u32 tmp_28;
        
#line 211 
        tmp_28 = __fswab32(*((__be32 *)(& in) + 7U));
        
#line 211 
        tmp_29 = tmp_28 & 4294901760U;
      }
      
#line 211 
      if (0 != 0) 
#line 211 
                  tmp_31 = ((((*((__be32 *)(& in) + 7U) << 24) | ((*((__be32 *)(& in) + 7U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 7U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 7U) >> 24)) & 4294901760U;
      else {
        __u32 tmp_30;
        
#line 211 
        tmp_30 = __fswab32(*((__be32 *)(& in) + 7U));
        
#line 211 
        tmp_31 = tmp_30 & 4294901760U;
      }
      
#line 211 
      if (0 != 0) 
#line 211 
                  tmp_33 = ((((*((__be32 *)(& in) + 7U) << 24) | ((*((__be32 *)(& in) + 7U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 7U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 7U) >> 24)) & 4294901760U;
      else {
        __u32 tmp_32;
        
#line 211 
        tmp_32 = __fswab32(*((__be32 *)(& in) + 7U));
        
#line 211 
        tmp_33 = tmp_32 & 4294901760U;
      }
      
#line 211 
      *((__be32 *)(& in) + 7U) = ((((tmp_27 | (proto_admin & 65535U)) << 24) | (((tmp_29 | (proto_admin & 65535U)) << 8) & 16711680U)) | (((tmp_31 | (proto_admin & 65535U)) >> 8) & 65280U)) | ((tmp_33 | (proto_admin & 65535U)) >> 24);
    }
    else {
      __u32 tmp_36;
      unsigned int tmp_35;
      
#line 211 
      if (0 != 0) 
#line 211 
                  tmp_35 = ((((*((__be32 *)(& in) + 7U) << 24) | ((*((__be32 *)(& in) + 7U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 7U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 7U) >> 24)) & 4294901760U;
      else {
        __u32 tmp_34;
        
#line 211 
        tmp_34 = __fswab32(*((__be32 *)(& in) + 7U));
        
#line 211 
        tmp_35 = tmp_34 & 4294901760U;
      }
      
#line 211 
      ;
      
#line 211 
      tmp_36 = __fswab32(tmp_35 | (proto_admin & 65535U));
      
#line 211 
      *((__be32 *)(& in) + 7U) = tmp_36;
    }
  }
  
#line 213 
  err = mlx5_core_access_reg(dev,(void *)(& in),64,(void *)(& out),64,(unsigned short)20484,0,1);
  
#line 215 
  return err;
}


#line 217  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/port.c"
static char const __kstrtab_mlx5_set_port_proto[20U] = {(char)'m', (char)'l', (char)'x', (char)'5', (char)'_', (char)'s', (char)'e', (char)'t', (char)'_', (char)'p', (char)'o', (char)'r', (char)'t', (char)'_', (char)'p', (char)'r', (char)'o', (char)'t', (char)'o', (char)'\000'};

#line 217 
struct kernel_symbol const __ksymtab_mlx5_set_port_proto;


#line 217  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/port.c"
struct kernel_symbol const __ksymtab_mlx5_set_port_proto = {.value = (unsigned long)(& mlx5_set_port_proto), .name = (char const *)(& __kstrtab_mlx5_set_port_proto)};

#line 227 
void __compiletime_assert_227(void);


#line 219  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/port.c"
int mlx5_set_port_status(struct mlx5_core_dev *dev, enum mlx5_port_status status)
{
  u32 in[4U];
  u32 out[4U];
  int tmp_25;
  
#line 225 
  memset((void *)(& in),0,16UL);
  {
    
#line 227 
    bool __cond = (_Bool)0;
    
#line 227 
    if ((int)__cond != 0) 
#line 227 
                          __compiletime_assert_227(); else ;
  }
  
#line 227 
  if (0 != 0) {
    unsigned int tmp_2;
    unsigned int tmp_4;
    unsigned int tmp_6;
    unsigned int tmp_8;
    
#line 227 
    if (0 != 0) 
#line 227 
                tmp_2 = ((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) & 4294963455U;
    else {
      __u32 tmp_1;
      
#line 227 
      tmp_1 = __fswab32(*((__be32 *)(& in)));
      
#line 227 
      tmp_2 = tmp_1 & 4294963455U;
    }
    
#line 227 
    if (0 != 0) 
#line 227 
                tmp_4 = ((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) & 4294963455U;
    else {
      __u32 tmp_3;
      
#line 227 
      tmp_3 = __fswab32(*((__be32 *)(& in)));
      
#line 227 
      tmp_4 = tmp_3 & 4294963455U;
    }
    
#line 227 
    if (0 != 0) 
#line 227 
                tmp_6 = ((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) & 4294963455U;
    else {
      __u32 tmp_5;
      
#line 227 
      tmp_5 = __fswab32(*((__be32 *)(& in)));
      
#line 227 
      tmp_6 = tmp_5 & 4294963455U;
    }
    
#line 227 
    if (0 != 0) 
#line 227 
                tmp_8 = ((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) & 4294963455U;
    else {
      __u32 tmp_7;
      
#line 227 
      tmp_7 = __fswab32(*((__be32 *)(& in)));
      
#line 227 
      tmp_8 = tmp_7 & 4294963455U;
    }
    
#line 227 
    *((__be32 *)(& in)) = ((((tmp_2 | (((unsigned int)status << 8UL) & 3840U)) << 24) | (((tmp_4 | (((unsigned int)status << 8UL) & 3840U)) << 8) & 16711680U)) | (((tmp_6 | (((unsigned int)status << 8UL) & 3840U)) >> 8) & 65280U)) | ((tmp_8 | (((unsigned int)status << 8UL) & 3840U)) >> 24);
  }
  else {
    __u32 tmp_11;
    unsigned int tmp_10;
    
#line 227 
    if (0 != 0) 
#line 227 
                tmp_10 = ((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) & 4294963455U;
    else {
      __u32 tmp_9;
      
#line 227 
      tmp_9 = __fswab32(*((__be32 *)(& in)));
      
#line 227 
      tmp_10 = tmp_9 & 4294963455U;
    }
    
#line 227 
    ;
    
#line 227 
    tmp_11 = __fswab32(tmp_10 | (((unsigned int)status << 8UL) & 3840U));
    
#line 227 
    *((__be32 *)(& in)) = tmp_11;
  }
  {
    
#line 228 
    bool __cond_0 = (_Bool)0;
    
#line 228 
    if ((int)__cond_0 != 0) 
#line 228 
                            __compiletime_assert_228(); else ;
  }
  
#line 228 
  if (0 != 0) {
    unsigned int tmp_15;
    unsigned int tmp_17;
    unsigned int tmp_19;
    unsigned int tmp_21;
    
#line 228 
    if (0 != 0) 
#line 228 
                tmp_15 = ((((*((__be32 *)(& in) + 1U) << 24) | ((*((__be32 *)(& in) + 1U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 1U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 1U) >> 24)) << 24;
    else {
      __u32 tmp_14;
      
#line 228 
      tmp_14 = __fswab32(*((__be32 *)(& in) + 1U));
      
#line 228 
      tmp_15 = tmp_14 << 24;
    }
    
#line 228 
    if (0 != 0) 
#line 228 
                tmp_17 = (((((*((__be32 *)(& in) + 1U) << 24) | ((*((__be32 *)(& in) + 1U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 1U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 1U) >> 24)) << 8) & 16711680U;
    else {
      __u32 tmp_16;
      
#line 228 
      tmp_16 = __fswab32(*((__be32 *)(& in) + 1U));
      
#line 228 
      tmp_17 = (tmp_16 << 8) & 16711680U;
    }
    
#line 228 
    if (0 != 0) 
#line 228 
                tmp_19 = (((((*((__be32 *)(& in) + 1U) << 24) | ((*((__be32 *)(& in) + 1U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 1U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 1U) >> 24)) >> 8) & 65280U;
    else {
      __u32 tmp_18;
      
#line 228 
      tmp_18 = __fswab32(*((__be32 *)(& in) + 1U));
      
#line 228 
      tmp_19 = (tmp_18 >> 8) & 65280U;
    }
    
#line 228 
    if (0 != 0) 
#line 228 
                tmp_21 = (((((*((__be32 *)(& in) + 1U) << 24) | ((*((__be32 *)(& in) + 1U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 1U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 1U) >> 24)) >> 24) | 128U;
    else {
      __u32 tmp_20;
      
#line 228 
      tmp_20 = __fswab32(*((__be32 *)(& in) + 1U));
      
#line 228 
      tmp_21 = (tmp_20 >> 24) | 128U;
    }
    
#line 228 
    *((__be32 *)(& in) + 1U) = ((tmp_15 | tmp_17) | tmp_19) | tmp_21;
  }
  else {
    __u32 tmp_24;
    unsigned int tmp_23;
    
#line 228 
    if (0 != 0) 
#line 228 
                tmp_23 = ((((*((__be32 *)(& in) + 1U) << 24) | ((*((__be32 *)(& in) + 1U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 1U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 1U) >> 24)) | 2147483648U;
    else {
      __u32 tmp_22;
      
#line 228 
      tmp_22 = __fswab32(*((__be32 *)(& in) + 1U));
      
#line 228 
      tmp_23 = tmp_22 | 2147483648U;
    }
    
#line 228 
    tmp_24 = __fswab32(tmp_23);
    
#line 228 
    *((__be32 *)(& in) + 1U) = tmp_24;
  }
  
#line 230 
  tmp_25 = mlx5_core_access_reg(dev,(void *)(& in),16,(void *)(& out),16,(unsigned short)20486,0,1);
  
#line 230 
  return tmp_25;
}


#line 234  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/port.c"
int mlx5_query_port_status(struct mlx5_core_dev *dev, u8 *status)
{
  int __retres;
  u32 in[4U];
  u32 out[4U];
  int err;
  
#line 240 
  memset((void *)(& in),0,16UL);
  
#line 242 
  err = mlx5_core_access_reg(dev,(void *)(& in),16,(void *)(& out),16,(unsigned short)20486,0,0);
  
#line 244 
  if (err != 0) {
    
#line 245 
    __retres = err;
    
#line 245 
    goto return_label;
  }
  else ;
  
#line 247 
  if (0 != 0) 
#line 247 
              *status = (unsigned char)((unsigned int)((unsigned char)(*((__be32 *)(& out)) >> 24)) & 15U);
  else {
    __u32 tmp;
    
#line 247 
    tmp = __fswab32(*((__be32 *)(& out)));
    
#line 247 
    *status = (unsigned char)((unsigned int)((unsigned char)tmp) & 15U);
  }
  
#line 248 
  __retres = err;
  return_label: 
#line 248 
                return __retres;
}


#line 259 
void __compiletime_assert_259(void);


#line 251  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/port.c"
static void mlx5_query_port_mtu(struct mlx5_core_dev *dev, int *admin_mtu, int *max_mtu, int *oper_mtu, u8 port)
{
  u32 in[4U];
  u32 out[4U];
  
#line 257 
  memset((void *)(& in),0,16UL);
  {
    
#line 259 
    bool __cond = (_Bool)0;
    
#line 259 
    if ((int)__cond != 0) 
#line 259 
                          __compiletime_assert_259(); else ;
  }
  
#line 259 
  if (0 != 0) {
    unsigned int tmp_2;
    unsigned int tmp_4;
    unsigned int tmp_6;
    unsigned int tmp_8;
    
#line 259 
    if (0 != 0) 
#line 259 
                tmp_2 = ((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) & 4278255615U;
    else {
      __u32 tmp_1;
      
#line 259 
      tmp_1 = __fswab32(*((__be32 *)(& in)));
      
#line 259 
      tmp_2 = tmp_1 & 4278255615U;
    }
    
#line 259 
    if (0 != 0) 
#line 259 
                tmp_4 = ((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) & 4278255615U;
    else {
      __u32 tmp_3;
      
#line 259 
      tmp_3 = __fswab32(*((__be32 *)(& in)));
      
#line 259 
      tmp_4 = tmp_3 & 4278255615U;
    }
    
#line 259 
    if (0 != 0) 
#line 259 
                tmp_6 = ((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) & 4278255615U;
    else {
      __u32 tmp_5;
      
#line 259 
      tmp_5 = __fswab32(*((__be32 *)(& in)));
      
#line 259 
      tmp_6 = tmp_5 & 4278255615U;
    }
    
#line 259 
    if (0 != 0) 
#line 259 
                tmp_8 = ((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) & 4278255615U;
    else {
      __u32 tmp_7;
      
#line 259 
      tmp_7 = __fswab32(*((__be32 *)(& in)));
      
#line 259 
      tmp_8 = tmp_7 & 4278255615U;
    }
    
#line 259 
    *((__be32 *)(& in)) = ((((tmp_2 | ((unsigned int)port << 16UL)) << 24) | (((tmp_4 | ((unsigned int)port << 16UL)) << 8) & 16711680U)) | (((tmp_6 | ((unsigned int)port << 16UL)) >> 8) & 65280U)) | ((tmp_8 | ((unsigned int)port << 16UL)) >> 24);
  }
  else {
    __u32 tmp_11;
    unsigned int tmp_10;
    
#line 259 
    if (0 != 0) 
#line 259 
                tmp_10 = ((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) & 4278255615U;
    else {
      __u32 tmp_9;
      
#line 259 
      tmp_9 = __fswab32(*((__be32 *)(& in)));
      
#line 259 
      tmp_10 = tmp_9 & 4278255615U;
    }
    
#line 259 
    ;
    
#line 259 
    tmp_11 = __fswab32(tmp_10 | ((unsigned int)port << 16UL));
    
#line 259 
    *((__be32 *)(& in)) = tmp_11;
  }
  
#line 261 
  mlx5_core_access_reg(dev,(void *)(& in),16,(void *)(& out),16,(unsigned short)20483,0,0);
  
#line 264 
  if (max_mtu != (int *)0) {
    unsigned int tmp_13;
    
#line 265 
    if (0 != 0) 
#line 265 
                tmp_13 = ((((*((__be32 *)(& out) + 1U) << 24) | ((*((__be32 *)(& out) + 1U) << 8) & 16711680U)) | ((*((__be32 *)(& out) + 1U) >> 8) & 65280U)) | (*((__be32 *)(& out) + 1U) >> 24)) >> 16UL;
    else {
      __u32 tmp_12;
      
#line 265 
      tmp_12 = __fswab32(*((__be32 *)(& out) + 1U));
      
#line 265 
      tmp_13 = tmp_12 >> 16UL;
    }
    
#line 265 
    *max_mtu = (int)tmp_13;
  }
  else ;
  
#line 266 
  if (oper_mtu != (int *)0) {
    unsigned int tmp_15;
    
#line 267 
    if (0 != 0) 
#line 267 
                tmp_15 = ((((*((__be32 *)(& out) + 3U) << 24) | ((*((__be32 *)(& out) + 3U) << 8) & 16711680U)) | ((*((__be32 *)(& out) + 3U) >> 8) & 65280U)) | (*((__be32 *)(& out) + 3U) >> 24)) >> 16UL;
    else {
      __u32 tmp_14;
      
#line 267 
      tmp_14 = __fswab32(*((__be32 *)(& out) + 3U));
      
#line 267 
      tmp_15 = tmp_14 >> 16UL;
    }
    
#line 267 
    *oper_mtu = (int)tmp_15;
  }
  else ;
  
#line 268 
  if (admin_mtu != (int *)0) {
    unsigned int tmp_17;
    
#line 269 
    if (0 != 0) 
#line 269 
                tmp_17 = ((((*((__be32 *)(& out) + 2U) << 24) | ((*((__be32 *)(& out) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& out) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& out) + 2U) >> 24)) >> 16UL;
    else {
      __u32 tmp_16;
      
#line 269 
      tmp_16 = __fswab32(*((__be32 *)(& out) + 2U));
      
#line 269 
      tmp_17 = tmp_16 >> 16UL;
    }
    
#line 269 
    *admin_mtu = (int)tmp_17;
  }
  else ;
  
#line 270 
  return;
}


#line 272  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/port.c"
int mlx5_set_port_mtu(struct mlx5_core_dev *dev, int mtu, u8 port)
{
  u32 in[4U];
  u32 out[4U];
  int tmp_25;
  
#line 277 
  memset((void *)(& in),0,16UL);
  {
    
#line 279 
    bool __cond = (_Bool)0;
    
#line 279 
    if ((int)__cond != 0) 
#line 279 
                          __compiletime_assert_279(); else ;
  }
  
#line 279 
  if (0 != 0) {
    unsigned int tmp_2;
    unsigned int tmp_4;
    unsigned int tmp_6;
    unsigned int tmp_8;
    
#line 279 
    if (0 != 0) 
#line 279 
                tmp_2 = ((((*((__be32 *)(& in) + 2U) << 24) | ((*((__be32 *)(& in) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 2U) >> 24)) & 65535U;
    else {
      __u32 tmp_1;
      
#line 279 
      tmp_1 = __fswab32(*((__be32 *)(& in) + 2U));
      
#line 279 
      tmp_2 = tmp_1 & 65535U;
    }
    
#line 279 
    if (0 != 0) 
#line 279 
                tmp_4 = ((((*((__be32 *)(& in) + 2U) << 24) | ((*((__be32 *)(& in) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 2U) >> 24)) & 65535U;
    else {
      __u32 tmp_3;
      
#line 279 
      tmp_3 = __fswab32(*((__be32 *)(& in) + 2U));
      
#line 279 
      tmp_4 = tmp_3 & 65535U;
    }
    
#line 279 
    if (0 != 0) 
#line 279 
                tmp_6 = ((((*((__be32 *)(& in) + 2U) << 24) | ((*((__be32 *)(& in) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 2U) >> 24)) & 65535U;
    else {
      __u32 tmp_5;
      
#line 279 
      tmp_5 = __fswab32(*((__be32 *)(& in) + 2U));
      
#line 279 
      tmp_6 = tmp_5 & 65535U;
    }
    
#line 279 
    if (0 != 0) 
#line 279 
                tmp_8 = ((((*((__be32 *)(& in) + 2U) << 24) | ((*((__be32 *)(& in) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 2U) >> 24)) & 65535U;
    else {
      __u32 tmp_7;
      
#line 279 
      tmp_7 = __fswab32(*((__be32 *)(& in) + 2U));
      
#line 279 
      tmp_8 = tmp_7 & 65535U;
    }
    
#line 279 
    *((__be32 *)(& in) + 2U) = ((((tmp_2 | ((unsigned int)mtu << 16UL)) << 24) | (((tmp_4 | ((unsigned int)mtu << 16UL)) << 8) & 16711680U)) | (((tmp_6 | ((unsigned int)mtu << 16UL)) >> 8) & 65280U)) | ((tmp_8 | ((unsigned int)mtu << 16UL)) >> 24);
  }
  else {
    __u32 tmp_11;
    unsigned int tmp_10;
    
#line 279 
    if (0 != 0) 
#line 279 
                tmp_10 = ((((*((__be32 *)(& in) + 2U) << 24) | ((*((__be32 *)(& in) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 2U) >> 24)) & 65535U;
    else {
      __u32 tmp_9;
      
#line 279 
      tmp_9 = __fswab32(*((__be32 *)(& in) + 2U));
      
#line 279 
      tmp_10 = tmp_9 & 65535U;
    }
    
#line 279 
    ;
    
#line 279 
    tmp_11 = __fswab32(tmp_10 | ((unsigned int)mtu << 16UL));
    
#line 279 
    *((__be32 *)(& in) + 2U) = tmp_11;
  }
  {
    
#line 280 
    bool __cond_0 = (_Bool)0;
    
#line 280 
    if ((int)__cond_0 != 0) 
#line 280 
                            __compiletime_assert_280(); else ;
  }
  
#line 280 
  if (0 != 0) {
    unsigned int tmp_15;
    unsigned int tmp_17;
    unsigned int tmp_19;
    unsigned int tmp_21;
    
#line 280 
    if (0 != 0) 
#line 280 
                tmp_15 = ((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) & 4278255615U;
    else {
      __u32 tmp_14;
      
#line 280 
      tmp_14 = __fswab32(*((__be32 *)(& in)));
      
#line 280 
      tmp_15 = tmp_14 & 4278255615U;
    }
    
#line 280 
    if (0 != 0) 
#line 280 
                tmp_17 = ((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) & 4278255615U;
    else {
      __u32 tmp_16;
      
#line 280 
      tmp_16 = __fswab32(*((__be32 *)(& in)));
      
#line 280 
      tmp_17 = tmp_16 & 4278255615U;
    }
    
#line 280 
    if (0 != 0) 
#line 280 
                tmp_19 = ((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) & 4278255615U;
    else {
      __u32 tmp_18;
      
#line 280 
      tmp_18 = __fswab32(*((__be32 *)(& in)));
      
#line 280 
      tmp_19 = tmp_18 & 4278255615U;
    }
    
#line 280 
    if (0 != 0) 
#line 280 
                tmp_21 = ((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) & 4278255615U;
    else {
      __u32 tmp_20;
      
#line 280 
      tmp_20 = __fswab32(*((__be32 *)(& in)));
      
#line 280 
      tmp_21 = tmp_20 & 4278255615U;
    }
    
#line 280 
    *((__be32 *)(& in)) = ((((tmp_15 | ((unsigned int)port << 16UL)) << 24) | (((tmp_17 | ((unsigned int)port << 16UL)) << 8) & 16711680U)) | (((tmp_19 | ((unsigned int)port << 16UL)) >> 8) & 65280U)) | ((tmp_21 | ((unsigned int)port << 16UL)) >> 24);
  }
  else {
    __u32 tmp_24;
    unsigned int tmp_23;
    
#line 280 
    if (0 != 0) 
#line 280 
                tmp_23 = ((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) & 4278255615U;
    else {
      __u32 tmp_22;
      
#line 280 
      tmp_22 = __fswab32(*((__be32 *)(& in)));
      
#line 280 
      tmp_23 = tmp_22 & 4278255615U;
    }
    
#line 280 
    ;
    
#line 280 
    tmp_24 = __fswab32(tmp_23 | ((unsigned int)port << 16UL));
    
#line 280 
    *((__be32 *)(& in)) = tmp_24;
  }
  
#line 282 
  tmp_25 = mlx5_core_access_reg(dev,(void *)(& in),16,(void *)(& out),16,(unsigned short)20483,0,1);
  
#line 282 
  return tmp_25;
}


#line 285  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/port.c"
static char const __kstrtab_mlx5_set_port_mtu[18U] = {(char)'m', (char)'l', (char)'x', (char)'5', (char)'_', (char)'s', (char)'e', (char)'t', (char)'_', (char)'p', (char)'o', (char)'r', (char)'t', (char)'_', (char)'m', (char)'t', (char)'u', (char)'\000'};

#line 285 
struct kernel_symbol const __ksymtab_mlx5_set_port_mtu;


#line 285  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/port.c"
struct kernel_symbol const __ksymtab_mlx5_set_port_mtu = {.value = (unsigned long)(& mlx5_set_port_mtu), .name = (char const *)(& __kstrtab_mlx5_set_port_mtu)};

#line 287  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/port.c"
void mlx5_query_port_max_mtu(struct mlx5_core_dev *dev, int *max_mtu, u8 port)
{
  
#line 290 
  mlx5_query_port_mtu(dev,(int *)0,max_mtu,(int *)0,(unsigned char)((int)port));
  
#line 291 
  return;
}


#line 292  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/port.c"
static char const __kstrtab_mlx5_query_port_max_mtu[24U] = {(char)'m', (char)'l', (char)'x', (char)'5', (char)'_', (char)'q', (char)'u', (char)'e', (char)'r', (char)'y', (char)'_', (char)'p', (char)'o', (char)'r', (char)'t', (char)'_', (char)'m', (char)'a', (char)'x', (char)'_', (char)'m', (char)'t', (char)'u', (char)'\000'};

#line 292 
struct kernel_symbol const __ksymtab_mlx5_query_port_max_mtu;


#line 292  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/port.c"
struct kernel_symbol const __ksymtab_mlx5_query_port_max_mtu = {.value = (unsigned long)(& mlx5_query_port_max_mtu), .name = (char const *)(& __kstrtab_mlx5_query_port_max_mtu)};

#line 294  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/port.c"
void mlx5_query_port_oper_mtu(struct mlx5_core_dev *dev, int *oper_mtu, u8 port)
{
  
#line 297 
  mlx5_query_port_mtu(dev,(int *)0,(int *)0,oper_mtu,(unsigned char)((int)port));
  
#line 298 
  return;
}


#line 299  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/port.c"
static char const __kstrtab_mlx5_query_port_oper_mtu[25U] = {(char)'m', (char)'l', (char)'x', (char)'5', (char)'_', (char)'q', (char)'u', (char)'e', (char)'r', (char)'y', (char)'_', (char)'p', (char)'o', (char)'r', (char)'t', (char)'_', (char)'o', (char)'p', (char)'e', (char)'r', (char)'_', (char)'m', (char)'t', (char)'u', (char)'\000'};

#line 299 
struct kernel_symbol const __ksymtab_mlx5_query_port_oper_mtu;


#line 299  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/port.c"
struct kernel_symbol const __ksymtab_mlx5_query_port_oper_mtu = {.value = (unsigned long)(& mlx5_query_port_oper_mtu), .name = (char const *)(& __kstrtab_mlx5_query_port_oper_mtu)};

#line 308 
void __compiletime_assert_308(void);


#line 301  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/port.c"
static int mlx5_query_port_pvlc(struct mlx5_core_dev *dev, u32 *pvlc, int pvlc_size, u8 local_port)
{
  u32 in[4U];
  int err;
  
#line 307 
  memset((void *)(& in),0,16UL);
  {
    
#line 308 
    bool __cond = (_Bool)0;
    
#line 308 
    if ((int)__cond != 0) 
#line 308 
                          __compiletime_assert_308(); else ;
  }
  
#line 308 
  if (0 != 0) {
    unsigned int tmp_2;
    unsigned int tmp_4;
    unsigned int tmp_6;
    unsigned int tmp_8;
    
#line 308 
    if (0 != 0) 
#line 308 
                tmp_2 = ((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) & 4278255615U;
    else {
      __u32 tmp_1;
      
#line 308 
      tmp_1 = __fswab32(*((__be32 *)(& in)));
      
#line 308 
      tmp_2 = tmp_1 & 4278255615U;
    }
    
#line 308 
    if (0 != 0) 
#line 308 
                tmp_4 = ((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) & 4278255615U;
    else {
      __u32 tmp_3;
      
#line 308 
      tmp_3 = __fswab32(*((__be32 *)(& in)));
      
#line 308 
      tmp_4 = tmp_3 & 4278255615U;
    }
    
#line 308 
    if (0 != 0) 
#line 308 
                tmp_6 = ((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) & 4278255615U;
    else {
      __u32 tmp_5;
      
#line 308 
      tmp_5 = __fswab32(*((__be32 *)(& in)));
      
#line 308 
      tmp_6 = tmp_5 & 4278255615U;
    }
    
#line 308 
    if (0 != 0) 
#line 308 
                tmp_8 = ((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) & 4278255615U;
    else {
      __u32 tmp_7;
      
#line 308 
      tmp_7 = __fswab32(*((__be32 *)(& in)));
      
#line 308 
      tmp_8 = tmp_7 & 4278255615U;
    }
    
#line 308 
    *((__be32 *)(& in)) = ((((tmp_2 | ((unsigned int)local_port << 16UL)) << 24) | (((tmp_4 | ((unsigned int)local_port << 16UL)) << 8) & 16711680U)) | (((tmp_6 | ((unsigned int)local_port << 16UL)) >> 8) & 65280U)) | ((tmp_8 | ((unsigned int)local_port << 16UL)) >> 24);
  }
  else {
    __u32 tmp_11;
    unsigned int tmp_10;
    
#line 308 
    if (0 != 0) 
#line 308 
                tmp_10 = ((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) & 4278255615U;
    else {
      __u32 tmp_9;
      
#line 308 
      tmp_9 = __fswab32(*((__be32 *)(& in)));
      
#line 308 
      tmp_10 = tmp_9 & 4278255615U;
    }
    
#line 308 
    ;
    
#line 308 
    tmp_11 = __fswab32(tmp_10 | ((unsigned int)local_port << 16UL));
    
#line 308 
    *((__be32 *)(& in)) = tmp_11;
  }
  
#line 310 
  err = mlx5_core_access_reg(dev,(void *)(& in),16,(void *)pvlc,pvlc_size,(unsigned short)20495,0,0);
  
#line 313 
  return err;
}


#line 316  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/port.c"
int mlx5_query_port_vl_hw_cap(struct mlx5_core_dev *dev, u8 *vl_hw_cap, u8 local_port)
{
  int __retres;
  u32 out[4U];
  int err;
  
#line 322 
  err = mlx5_query_port_pvlc(dev,(u32 *)(& out),16,(unsigned char)((int)local_port));
  
#line 323 
  if (err != 0) {
    
#line 324 
    __retres = err;
    
#line 324 
    goto return_label;
  }
  else ;
  
#line 326 
  if (0 != 0) 
#line 326 
              *vl_hw_cap = (unsigned char)((unsigned int)((unsigned char)(*((__be32 *)(& out) + 1U) >> 24)) & 15U);
  else {
    __u32 tmp;
    
#line 326 
    tmp = __fswab32(*((__be32 *)(& out) + 1U));
    
#line 326 
    *vl_hw_cap = (unsigned char)((unsigned int)((unsigned char)tmp) & 15U);
  }
  
#line 328 
  __retres = 0;
  return_label: 
#line 328 
                return __retres;
}


#line 330  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/port.c"
static char const __kstrtab_mlx5_query_port_vl_hw_cap[26U] = {(char)'m', (char)'l', (char)'x', (char)'5', (char)'_', (char)'q', (char)'u', (char)'e', (char)'r', (char)'y', (char)'_', (char)'p', (char)'o', (char)'r', (char)'t', (char)'_', (char)'v', (char)'l', (char)'_', (char)'h', (char)'w', (char)'_', (char)'c', (char)'a', (char)'p', (char)'\000'};

#line 330 
struct kernel_symbol const __ksymtab_mlx5_query_port_vl_hw_cap;


#line 330  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/port.c"
struct kernel_symbol const __ksymtab_mlx5_query_port_vl_hw_cap = {.value = (unsigned long)(& mlx5_query_port_vl_hw_cap), .name = (char const *)(& __kstrtab_mlx5_query_port_vl_hw_cap)};

#line 497  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_port.c.aux"
static void *kzalloc_11(size_t size, gfp_t flags)
{
  void *tmp;
  
#line 500 
  tmp = ldv_kzalloc(size,flags);
  
#line 500 
  return tmp;
}


#line 98  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/atomic.h"
static void atomic_inc_1(atomic_t *v);


#line 120 
static int atomic_dec_and_test_1(atomic_t *v);


#line 310  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_lock_4(spinlock_t *lock)
{
  
#line 312 
  _raw_spin_lock(& lock->__anonCompField_spinlock_18.rlock);
  
#line 313 
  return;
}


#line 334 
static void ldv_spin_lock_51_1(spinlock_t *lock);


#line 338 
static void ldv_spin_lock_53_0(spinlock_t *lock);


#line 340  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_lock_irq_7(spinlock_t *lock)
{
  
#line 342 
  _raw_spin_lock_irq(& lock->__anonCompField_spinlock_18.rlock);
  
#line 343 
  return;
}


#line 366 
static void ldv_spin_lock_irq_55_1(spinlock_t *lock);


#line 370 
static void ldv_spin_lock_irq_57_0(spinlock_t *lock);


#line 371  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_unlock_4(spinlock_t *lock)
{
  
#line 373 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_18.rlock);
  
#line 374 
  return;
}


#line 391 
static void ldv_spin_unlock_52_1(spinlock_t *lock);


#line 395 
static void ldv_spin_unlock_54_0(spinlock_t *lock);


#line 409  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_unlock_irq_7(spinlock_t *lock)
{
  
#line 411 
  _raw_spin_unlock_irq(& lock->__anonCompField_spinlock_18.rlock);
  
#line 412 
  return;
}


#line 425 
static void ldv_spin_unlock_irq_56_1(spinlock_t *lock);


#line 429 
static void ldv_spin_unlock_irq_58_0(spinlock_t *lock);


#line 170  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/cq.h"
int mlx5_core_modify_cq(struct mlx5_core_dev *dev, struct mlx5_core_cq *cq, struct mlx5_modify_cq_mbox_in *in, int in_sz);


#line 42  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/cq.c"
void mlx5_cq_completion(struct mlx5_core_dev *dev, u32 cqn)
{
  struct mlx5_core_cq *cq;
  int tmp_1;
  
#line 45 
  struct mlx5_cq_table *table = & dev->priv.cq_table;
  
#line 47 
  ldv_spin_lock_51_1(& table->lock);
  
#line 48 
  cq = (struct mlx5_core_cq *)radix_tree_lookup(& table->tree,(unsigned long)cqn);
  
#line 49 
  if ((long)(cq != (struct mlx5_core_cq *)0) != 0L) 
#line 50 
                                                    atomic_inc_1(& cq->refcount); else ;
  
#line 51 
  ldv_spin_unlock_52_1(& table->lock);
  
#line 53 
  if (cq == (struct mlx5_core_cq *)0) {
    struct task_struct *tmp_0;
    
#line 54 
    ;
    
#line 54 
    tmp_0 = get_current();
    
#line 54 
    ;
    
#line 54 
    printk("\001",(char *)(& dev->priv.name),"mlx5_cq_completion",54,tmp_0->pid,cqn);
    
#line 55 
    goto return_label;
  }
  else ;
  
#line 58 
  cq->arm_sn += 1U;
  
#line 60 
  (*(cq->comp))(cq);
  
#line 62 
  tmp_1 = atomic_dec_and_test_1(& cq->refcount);
  
#line 62 
  if (tmp_1 != 0) 
#line 63 
                  complete(& cq->free); else ;
  return_label: 
#line 64 
                return;
}


#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/cq.c"
void mlx5_cq_event(struct mlx5_core_dev *dev, u32 cqn, int event_type)
{
  struct mlx5_core_cq *cq;
  int tmp_1;
  
#line 68 
  struct mlx5_cq_table *table = & dev->priv.cq_table;
  
#line 71 
  ldv_spin_lock_53_0(& table->lock);
  
#line 73 
  cq = (struct mlx5_core_cq *)radix_tree_lookup(& table->tree,(unsigned long)cqn);
  
#line 74 
  if (cq != (struct mlx5_core_cq *)0) 
#line 75 
                                      atomic_inc_1(& cq->refcount); else ;
  
#line 77 
  ldv_spin_unlock_54_0(& table->lock);
  
#line 79 
  if (cq == (struct mlx5_core_cq *)0) {
    struct task_struct *tmp_0;
    
#line 80 
    ;
    
#line 80 
    tmp_0 = get_current();
    
#line 80 
    ;
    
#line 80 
    printk("\001",(char *)(& dev->priv.name),"mlx5_cq_event",80,tmp_0->pid,cqn);
    
#line 81 
    goto return_label;
  }
  else ;
  
#line 84 
  (*(cq->event))(cq,(enum mlx5_event)event_type);
  
#line 86 
  tmp_1 = atomic_dec_and_test_1(& cq->refcount);
  
#line 86 
  if (tmp_1 != 0) 
#line 87 
                  complete(& cq->free); else ;
  return_label: 
#line 88 
                return;
}


#line 91  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/cq.c"
int mlx5_core_create_cq(struct mlx5_core_dev *dev, struct mlx5_core_cq *cq, struct mlx5_create_cq_mbox_in *in, int inlen)
{
  int __retres;
  int err;
  struct mlx5_create_cq_mbox_out out;
  struct mlx5_destroy_cq_mbox_in din;
  struct mlx5_destroy_cq_mbox_out dout;
  struct task_struct *tmp_1;
  
#line 95 
  struct mlx5_cq_table *table = & dev->priv.cq_table;
  
#line 100 
  in->hdr.opcode = (unsigned short)4U;
  
#line 101 
  memset((void *)(& out),0,16UL);
  
#line 102 
  err = mlx5_cmd_exec(dev,(void *)in,inlen,(void *)(& out),16);
  
#line 103 
  if (err != 0) {
    
#line 104 
    __retres = err;
    
#line 104 
    goto return_label;
  }
  else ;
  
#line 106 
  if ((unsigned int)out.hdr.status != 0U) {
    int tmp;
    
#line 107 
    tmp = mlx5_cmd_status_to_err(& out.hdr);
    
#line 107 
    __retres = tmp;
    
#line 107 
    goto return_label;
  }
  else ;
  
#line 109 
  if (0 != 0) 
#line 109 
              cq->cqn = ((((out.cqn << 24) | ((out.cqn << 8) & 16711680U)) | ((out.cqn >> 8) & 65280U)) | (out.cqn >> 24)) & 16777215U;
  else {
    __u32 tmp_0;
    
#line 109 
    tmp_0 = __fswab32(out.cqn);
    
#line 109 
    cq->cqn = tmp_0 & 16777215U;
  }
  
#line 110 
  cq->cons_index = 0U;
  
#line 111 
  cq->arm_sn = 0U;
  
#line 112 
  atomic_set(& cq->refcount,1);
  
#line 113 
  init_completion(& cq->free);
  
#line 115 
  ldv_spin_lock_irq_55_1(& table->lock);
  
#line 116 
  err = radix_tree_insert(& table->tree,(unsigned long)cq->cqn,(void *)cq);
  
#line 117 
  ldv_spin_unlock_irq_56_1(& table->lock);
  
#line 118 
  if (err != 0) 
#line 119 
                goto err_cmd; else ;
  
#line 121 
  tmp_1 = get_current();
  
#line 121 
  cq->pid = tmp_1->pid;
  
#line 122 
  err = mlx5_debug_cq_add(dev,cq);
  
#line 123 
  if (err != 0) {
    
#line 124 
    struct _ddebug descriptor = {.modname = "mlx5_core", .function = "mlx5_core_create_cq", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/cq.c", .format = "%s:%s:%d:(pid %d): ", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))125U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 124 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
      struct task_struct *tmp_2;
      
#line 124 
      ;
      
#line 124 
      tmp_2 = get_current();
      
#line 124 
      ;
      
#line 124 
      __dynamic_pr_debug(& descriptor,"%s:%s:%d:(pid %d): ",(char *)(& dev->priv.name),"mlx5_core_create_cq",125,tmp_2->pid,cq->cqn);
    }
    else ;
  }
  else ;
  
#line 127 
  __retres = 0;
  
#line 127 
  goto return_label;
  err_cmd: 
#line 129 
  ;
  
#line 130 
  memset((void *)(& din),0,16UL);
  
#line 131 
  memset((void *)(& dout),0,16UL);
  
#line 132 
  din.hdr.opcode = (unsigned short)260U;
  
#line 133 
  mlx5_cmd_exec(dev,(void *)(& din),16,(void *)(& dout),16);
  
#line 134 
  __retres = err;
  return_label: 
#line 134 
                return __retres;
}


#line 136  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/cq.c"
static char const __kstrtab_mlx5_core_create_cq[20U] = {(char)'m', (char)'l', (char)'x', (char)'5', (char)'_', (char)'c', (char)'o', (char)'r', (char)'e', (char)'_', (char)'c', (char)'r', (char)'e', (char)'a', (char)'t', (char)'e', (char)'_', (char)'c', (char)'q', (char)'\000'};

#line 136 
struct kernel_symbol const __ksymtab_mlx5_core_create_cq;


#line 136  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/cq.c"
struct kernel_symbol const __ksymtab_mlx5_core_create_cq = {.value = (unsigned long)(& mlx5_core_create_cq), .name = (char const *)(& __kstrtab_mlx5_core_create_cq)};

#line 138  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/cq.c"
int mlx5_core_destroy_cq(struct mlx5_core_dev *dev, struct mlx5_core_cq *cq)
{
  int __retres;
  struct mlx5_destroy_cq_mbox_in in;
  struct mlx5_destroy_cq_mbox_out out;
  struct mlx5_core_cq *tmp;
  int err;
  int tmp_5;
  
#line 140 
  struct mlx5_cq_table *table = & dev->priv.cq_table;
  
#line 146 
  ldv_spin_lock_irq_57_0(& table->lock);
  
#line 147 
  tmp = (struct mlx5_core_cq *)radix_tree_delete(& table->tree,(unsigned long)cq->cqn);
  
#line 148 
  ldv_spin_unlock_irq_58_0(& table->lock);
  
#line 149 
  if (tmp == (struct mlx5_core_cq *)0) {
    struct task_struct *tmp_1;
    
#line 150 
    ;
    
#line 150 
    tmp_1 = get_current();
    
#line 150 
    ;
    
#line 150 
    printk("\001",(char *)(& dev->priv.name),"mlx5_core_destroy_cq",150,tmp_1->pid,cq->cqn);
    
#line 151 
    __retres = -22;
    
#line 151 
    goto return_label;
  }
  else ;
  
#line 153 
  if (tmp != cq) {
    struct task_struct *tmp_2;
    
#line 154 
    ;
    
#line 154 
    tmp_2 = get_current();
    
#line 154 
    ;
    
#line 154 
    printk("\001",(char *)(& dev->priv.name),"mlx5_core_destroy_cq",154,tmp_2->pid,cq->cqn);
    
#line 155 
    __retres = -22;
    
#line 155 
    goto return_label;
  }
  else ;
  
#line 158 
  memset((void *)(& in),0,16UL);
  
#line 159 
  memset((void *)(& out),0,16UL);
  
#line 160 
  in.hdr.opcode = (unsigned short)260U;
  
#line 161 
  if (0 != 0) 
#line 161 
              in.cqn = (((cq->cqn << 24) | ((cq->cqn << 8) & 16711680U)) | ((cq->cqn >> 8) & 65280U)) | (cq->cqn >> 24); else 
                                                                    
#line 161 
                                                                    in.cqn = __fswab32(cq->cqn);
  
#line 162 
  err = mlx5_cmd_exec(dev,(void *)(& in),16,(void *)(& out),16);
  
#line 163 
  if (err != 0) {
    
#line 164 
    __retres = err;
    
#line 164 
    goto return_label;
  }
  else ;
  
#line 166 
  if ((unsigned int)out.hdr.status != 0U) {
    int tmp_4;
    
#line 167 
    tmp_4 = mlx5_cmd_status_to_err(& out.hdr);
    
#line 167 
    __retres = tmp_4;
    
#line 167 
    goto return_label;
  }
  else ;
  
#line 169 
  synchronize_irq((unsigned int)cq->irqn);
  
#line 171 
  mlx5_debug_cq_remove(dev,cq);
  
#line 172 
  tmp_5 = atomic_dec_and_test_1(& cq->refcount);
  
#line 172 
  if (tmp_5 != 0) 
#line 173 
                  complete(& cq->free); else ;
  
#line 174 
  wait_for_completion(& cq->free);
  
#line 176 
  __retres = 0;
  return_label: 
#line 176 
                return __retres;
}


#line 178  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/cq.c"
static char const __kstrtab_mlx5_core_destroy_cq[21U] = {(char)'m', (char)'l', (char)'x', (char)'5', (char)'_', (char)'c', (char)'o', (char)'r', (char)'e', (char)'_', (char)'d', (char)'e', (char)'s', (char)'t', (char)'r', (char)'o', (char)'y', (char)'_', (char)'c', (char)'q', (char)'\000'};

#line 178 
struct kernel_symbol const __ksymtab_mlx5_core_destroy_cq;


#line 178  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/cq.c"
struct kernel_symbol const __ksymtab_mlx5_core_destroy_cq = {.value = (unsigned long)(& mlx5_core_destroy_cq), .name = (char const *)(& __kstrtab_mlx5_core_destroy_cq)};

#line 180  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/cq.c"
int mlx5_core_query_cq(struct mlx5_core_dev *dev, struct mlx5_core_cq *cq, struct mlx5_query_cq_mbox_out *out)
{
  int __retres;
  struct mlx5_query_cq_mbox_in in;
  int err;
  
#line 186 
  memset((void *)(& in),0,16UL);
  
#line 187 
  memset((void *)out,0,96UL);
  
#line 189 
  in.hdr.opcode = (unsigned short)516U;
  
#line 190 
  if (0 != 0) 
#line 190 
              in.cqn = (((cq->cqn << 24) | ((cq->cqn << 8) & 16711680U)) | ((cq->cqn >> 8) & 65280U)) | (cq->cqn >> 24); else 
                                                                    
#line 190 
                                                                    in.cqn = __fswab32(cq->cqn);
  
#line 191 
  err = mlx5_cmd_exec(dev,(void *)(& in),16,(void *)out,96);
  
#line 192 
  if (err != 0) {
    
#line 193 
    __retres = err;
    
#line 193 
    goto return_label;
  }
  else ;
  
#line 195 
  if ((unsigned int)out->hdr.status != 0U) {
    int tmp_0;
    
#line 196 
    tmp_0 = mlx5_cmd_status_to_err(& out->hdr);
    
#line 196 
    __retres = tmp_0;
    
#line 196 
    goto return_label;
  }
  else ;
  
#line 198 
  __retres = err;
  return_label: 
#line 198 
                return __retres;
}


#line 200  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/cq.c"
static char const __kstrtab_mlx5_core_query_cq[19U] = {(char)'m', (char)'l', (char)'x', (char)'5', (char)'_', (char)'c', (char)'o', (char)'r', (char)'e', (char)'_', (char)'q', (char)'u', (char)'e', (char)'r', (char)'y', (char)'_', (char)'c', (char)'q', (char)'\000'};

#line 200 
struct kernel_symbol const __ksymtab_mlx5_core_query_cq;


#line 200  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/cq.c"
struct kernel_symbol const __ksymtab_mlx5_core_query_cq = {.value = (unsigned long)(& mlx5_core_query_cq), .name = (char const *)(& __kstrtab_mlx5_core_query_cq)};

#line 203  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/cq.c"
int mlx5_core_modify_cq(struct mlx5_core_dev *dev, struct mlx5_core_cq *cq, struct mlx5_modify_cq_mbox_in *in, int in_sz)
{
  int __retres;
  struct mlx5_modify_cq_mbox_out out;
  int err;
  
#line 209 
  memset((void *)(& out),0,16UL);
  
#line 210 
  in->hdr.opcode = (unsigned short)772U;
  
#line 211 
  err = mlx5_cmd_exec(dev,(void *)in,in_sz,(void *)(& out),16);
  
#line 212 
  if (err != 0) {
    
#line 213 
    __retres = err;
    
#line 213 
    goto return_label;
  }
  else ;
  
#line 215 
  if ((unsigned int)out.hdr.status != 0U) {
    int tmp;
    
#line 216 
    tmp = mlx5_cmd_status_to_err(& out.hdr);
    
#line 216 
    __retres = tmp;
    
#line 216 
    goto return_label;
  }
  else ;
  
#line 218 
  __retres = 0;
  return_label: 
#line 218 
                return __retres;
}


#line 220  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/cq.c"
static char const __kstrtab_mlx5_core_modify_cq[20U] = {(char)'m', (char)'l', (char)'x', (char)'5', (char)'_', (char)'c', (char)'o', (char)'r', (char)'e', (char)'_', (char)'m', (char)'o', (char)'d', (char)'i', (char)'f', (char)'y', (char)'_', (char)'c', (char)'q', (char)'\000'};

#line 220 
struct kernel_symbol const __ksymtab_mlx5_core_modify_cq;


#line 220  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/cq.c"
struct kernel_symbol const __ksymtab_mlx5_core_modify_cq = {.value = (unsigned long)(& mlx5_core_modify_cq), .name = (char const *)(& __kstrtab_mlx5_core_modify_cq)};

#line 222  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/cq.c"
int mlx5_core_modify_cq_moderation(struct mlx5_core_dev *dev, struct mlx5_core_cq *cq, u16 cq_period, u16 cq_max_count)
{
  struct mlx5_modify_cq_mbox_in in;
  int tmp_2;
  
#line 229 
  memset((void *)(& in),0,272UL);
  
#line 231 
  if (0 != 0) 
#line 231 
              in.cqn = (((cq->cqn << 24) | ((cq->cqn << 8) & 16711680U)) | ((cq->cqn >> 8) & 65280U)) | (cq->cqn >> 24); else 
                                                                    
#line 231 
                                                                    in.cqn = __fswab32(cq->cqn);
  
#line 232 
  if (0 != 0) 
#line 232 
              in.ctx.cq_period = (unsigned short)(((int)cq_period << 8) | ((int)cq_period >> 8)); else 
                                                                    
#line 232 
                                                                    in.ctx.cq_period = __fswab16((unsigned short)((int)cq_period));
  
#line 233 
  if (0 != 0) 
#line 233 
              in.ctx.cq_max_count = (unsigned short)(((int)cq_max_count << 8) | ((int)cq_max_count >> 8)); else 
                                                                    
#line 233 
                                                                    in.ctx.cq_max_count = __fswab16((unsigned short)((int)cq_max_count));
  
#line 234 
  in.field_select = 50331648U;
  
#line 237 
  tmp_2 = mlx5_core_modify_cq(dev,cq,& in,272);
  
#line 237 
  return tmp_2;
}


#line 240  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/cq.c"
int mlx5_init_cq_table(struct mlx5_core_dev *dev)
{
  int err;
  
#line 242 
  struct mlx5_cq_table *table = & dev->priv.cq_table;
  
#line 245 
  spinlock_check(& table->lock);
  {
    struct lock_class_key __key;
    
#line 245 
    __raw_spin_lock_init(& table->lock.__anonCompField_spinlock_18.rlock,"&(&table->lock)->rlock",& __key);
  }
  
#line 246 
  table->tree.height = 0U;
  
#line 246 
  table->tree.gfp_mask = 32U;
  
#line 246 
  table->tree.rnode = (struct radix_tree_node *)0;
  
#line 247 
  err = mlx5_cq_debugfs_init(dev);
  
#line 249 
  return err;
}


#line 252  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/cq.c"
void mlx5_cleanup_cq_table(struct mlx5_core_dev *dev)
{
  
#line 254 
  mlx5_cq_debugfs_cleanup(dev);
  
#line 255 
  return;
}


#line 118  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_cq.c.aux"
static void atomic_inc_1(atomic_t *v)
{
  
#line 121 
  ldv_atomic_inc(v);
  
#line 122 
  return;
}


#line 132  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_cq.c.aux"
static int atomic_dec_and_test_1(atomic_t *v)
{
  int tmp;
  
#line 135 
  tmp = ldv_atomic_dec_and_test(v);
  
#line 135 
  return tmp;
}


#line 514  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_cq.c.aux"
static void ldv_spin_lock_51_1(spinlock_t *lock)
{
  
#line 518 
  ldv_spin_model_lock((char *)"lock_of_mlx5_cq_table");
  
#line 520 
  spin_lock_4(lock);
  
#line 521 
  return;
}


#line 524  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_cq.c.aux"
static void ldv_spin_unlock_52_1(spinlock_t *lock)
{
  
#line 528 
  ldv_spin_model_unlock((char *)"lock_of_mlx5_cq_table");
  
#line 530 
  spin_unlock_4(lock);
  
#line 531 
  return;
}


#line 534  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_cq.c.aux"
static void ldv_spin_lock_53_0(spinlock_t *lock)
{
  
#line 538 
  ldv_spin_model_lock((char *)"lock_of_mlx5_cq_table");
  
#line 540 
  spin_lock_4(lock);
  
#line 541 
  return;
}


#line 544  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_cq.c.aux"
static void ldv_spin_unlock_54_0(spinlock_t *lock)
{
  
#line 548 
  ldv_spin_model_unlock((char *)"lock_of_mlx5_cq_table");
  
#line 550 
  spin_unlock_4(lock);
  
#line 551 
  return;
}


#line 554  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_cq.c.aux"
static void ldv_spin_lock_irq_55_1(spinlock_t *lock)
{
  
#line 558 
  ldv_spin_model_lock((char *)"lock_of_mlx5_cq_table");
  
#line 560 
  spin_lock_irq_7(lock);
  
#line 561 
  return;
}


#line 564  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_cq.c.aux"
static void ldv_spin_unlock_irq_56_1(spinlock_t *lock)
{
  
#line 568 
  ldv_spin_model_unlock((char *)"lock_of_mlx5_cq_table");
  
#line 570 
  spin_unlock_irq_7(lock);
  
#line 571 
  return;
}


#line 574  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_cq.c.aux"
static void ldv_spin_lock_irq_57_0(spinlock_t *lock)
{
  
#line 578 
  ldv_spin_model_lock((char *)"lock_of_mlx5_cq_table");
  
#line 580 
  spin_lock_irq_7(lock);
  
#line 581 
  return;
}


#line 584  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_cq.c.aux"
static void ldv_spin_unlock_irq_58_0(spinlock_t *lock)
{
  
#line 588 
  ldv_spin_model_unlock((char *)"lock_of_mlx5_cq_table");
  
#line 590 
  spin_unlock_irq_7(lock);
  
#line 591 
  return;
}


#line 581  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/slab.h"
static void *kzalloc_12(size_t size, gfp_t flags);


#line 197  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/flow.h"
void __compiletime_assert_197(void);


#line 637  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/driver.h"
__inline static void *mlx5_vzalloc_7(unsigned long size)
{
  void *rtn;
  
#line 641 
  rtn = kzalloc_12(size,720U);
  
#line 642 
  if (rtn == (void *)0) 
#line 643 
                        rtn = vzalloc(size); else ;
  
#line 644 
  return rtn;
}


#line 841  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/driver.h"
__inline static int mlx5_get_gid_table_len(u16 param)
{
  int __retres;
  
#line 843 
  if ((unsigned int)param > 4U) {
    
#line 844 
    printk("\001");
    
#line 845 
    __retres = 0;
    
#line 845 
    goto return_label;
  }
  else ;
  
#line 848 
  __retres = 8 << (int)param;
  return_label: 
#line 848 
                return __retres;
}


#line 40  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mlx5/vport.h"
int mlx5_query_hca_vport_gid(struct mlx5_core_dev *dev, u8 other_vport, u8 port_num, u16 vf_num, u16 gid_index, union ib_gid *gid);


#line 43 
int mlx5_query_hca_vport_pkey(struct mlx5_core_dev *dev, u8 other_vport, u8 port_num, u16 vf_num, u16 pkey_index, u16 *pkey);


#line 46 
int mlx5_query_hca_vport_context(struct mlx5_core_dev *dev, u8 other_vport, u8 port_num, u16 vf_num, struct mlx5_hca_vport_context *rep);


#line 50 
int mlx5_query_hca_vport_system_image_guid(struct mlx5_core_dev *dev, u64 *sys_image_guid);


#line 52 
int mlx5_query_hca_vport_node_guid(struct mlx5_core_dev *dev, u64 *node_guid);


#line 47  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/vport.c"
void __compiletime_assert_48(void);


#line 49 
void __compiletime_assert_49(void);


#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/vport.c"
u8 mlx5_query_vport_state(struct mlx5_core_dev *mdev, u8 opmod)
{
  u8 __retres;
  u32 in[4U];
  u32 out[4U];
  int err;
  unsigned int tmp_23;
  
#line 45 
  memset((void *)(& in),0,16UL);
  {
    
#line 47 
    bool __cond = (_Bool)0;
    
#line 47 
    if ((int)__cond != 0) 
#line 47 
                          __compiletime_assert_48(); else ;
  }
  
#line 47 
  if (0 != 0) {
    unsigned int tmp_2;
    unsigned int tmp_4;
    
#line 47 
    if (0 != 0) 
#line 47 
                tmp_2 = ((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) << 24;
    else {
      __u32 tmp_1;
      
#line 47 
      tmp_1 = __fswab32(*((__be32 *)(& in)));
      
#line 47 
      tmp_2 = tmp_1 << 24;
    }
    
#line 47 
    if (0 != 0) 
#line 47 
                tmp_4 = (((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) << 8) & 16711680U;
    else {
      __u32 tmp_3;
      
#line 47 
      tmp_3 = __fswab32(*((__be32 *)(& in)));
      
#line 47 
      tmp_4 = (tmp_3 << 8) & 16711680U;
    }
    
#line 47 
    *((__be32 *)(& in)) = (tmp_2 | tmp_4) | 20487U;
  }
  else {
    __u32 tmp_7;
    unsigned int tmp_6;
    
#line 47 
    if (0 != 0) 
#line 47 
                tmp_6 = (((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) & 65535U) | 122683392U;
    else {
      __u32 tmp_5;
      
#line 47 
      tmp_5 = __fswab32(*((__be32 *)(& in)));
      
#line 47 
      tmp_6 = (tmp_5 & 65535U) | 122683392U;
    }
    
#line 47 
    tmp_7 = __fswab32(tmp_6);
    
#line 47 
    *((__be32 *)(& in)) = tmp_7;
  }
  {
    
#line 49 
    bool __cond_0 = (_Bool)0;
    
#line 49 
    if ((int)__cond_0 != 0) 
#line 49 
                            __compiletime_assert_49(); else ;
  }
  
#line 49 
  if (0 != 0) {
    unsigned int tmp_11;
    unsigned int tmp_13;
    unsigned int tmp_15;
    unsigned int tmp_17;
    
#line 49 
    if (0 != 0) 
#line 49 
                tmp_11 = ((((*((__be32 *)(& in) + 1U) << 24) | ((*((__be32 *)(& in) + 1U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 1U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 1U) >> 24)) & 4294901760U;
    else {
      __u32 tmp_10;
      
#line 49 
      tmp_10 = __fswab32(*((__be32 *)(& in) + 1U));
      
#line 49 
      tmp_11 = tmp_10 & 4294901760U;
    }
    
#line 49 
    if (0 != 0) 
#line 49 
                tmp_13 = ((((*((__be32 *)(& in) + 1U) << 24) | ((*((__be32 *)(& in) + 1U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 1U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 1U) >> 24)) & 4294901760U;
    else {
      __u32 tmp_12;
      
#line 49 
      tmp_12 = __fswab32(*((__be32 *)(& in) + 1U));
      
#line 49 
      tmp_13 = tmp_12 & 4294901760U;
    }
    
#line 49 
    if (0 != 0) 
#line 49 
                tmp_15 = ((((*((__be32 *)(& in) + 1U) << 24) | ((*((__be32 *)(& in) + 1U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 1U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 1U) >> 24)) & 4294901760U;
    else {
      __u32 tmp_14;
      
#line 49 
      tmp_14 = __fswab32(*((__be32 *)(& in) + 1U));
      
#line 49 
      tmp_15 = tmp_14 & 4294901760U;
    }
    
#line 49 
    if (0 != 0) 
#line 49 
                tmp_17 = ((((*((__be32 *)(& in) + 1U) << 24) | ((*((__be32 *)(& in) + 1U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 1U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 1U) >> 24)) & 4294901760U;
    else {
      __u32 tmp_16;
      
#line 49 
      tmp_16 = __fswab32(*((__be32 *)(& in) + 1U));
      
#line 49 
      tmp_17 = tmp_16 & 4294901760U;
    }
    
#line 49 
    *((__be32 *)(& in) + 1U) = ((((tmp_11 | (unsigned int)opmod) << 24) | (((tmp_13 | (unsigned int)opmod) << 8) & 16711680U)) | (((tmp_15 | (unsigned int)opmod) >> 8) & 65280U)) | ((tmp_17 | (unsigned int)opmod) >> 24);
  }
  else {
    __u32 tmp_20;
    unsigned int tmp_19;
    
#line 49 
    if (0 != 0) 
#line 49 
                tmp_19 = ((((*((__be32 *)(& in) + 1U) << 24) | ((*((__be32 *)(& in) + 1U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 1U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 1U) >> 24)) & 4294901760U;
    else {
      __u32 tmp_18;
      
#line 49 
      tmp_18 = __fswab32(*((__be32 *)(& in) + 1U));
      
#line 49 
      tmp_19 = tmp_18 & 4294901760U;
    }
    
#line 49 
    ;
    
#line 49 
    tmp_20 = __fswab32(tmp_19 | (unsigned int)opmod);
    
#line 49 
    *((__be32 *)(& in) + 1U) = tmp_20;
  }
  
#line 51 
  err = mlx5_cmd_exec_check_status(mdev,(u32 *)(& in),16,(u32 *)(& out),16);
  
#line 53 
  if (err != 0) {
    struct task_struct *tmp_21;
    
#line 54 
    tmp_21 = get_current();
    
#line 54 
    ;
    
#line 54 
    printk("\001",(char *)(& mdev->priv.name),"mlx5_query_vport_state",54,tmp_21->pid);
  }
  else ;
  
#line 56 
  if (0 != 0) 
#line 56 
              tmp_23 = (unsigned int)((unsigned char)(*((__be32 *)(& out) + 3U) >> 24)) & 15U;
  else {
    __u32 tmp_22;
    
#line 56 
    tmp_22 = __fswab32(*((__be32 *)(& out) + 3U));
    
#line 56 
    tmp_23 = (unsigned int)((unsigned char)tmp_22) & 15U;
  }
  
#line 56 
  __retres = (unsigned char)tmp_23;
  
#line 56 
  return __retres;
}


#line 58  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/vport.c"
static char const __kstrtab_mlx5_query_vport_state[23U] = {(char)'m', (char)'l', (char)'x', (char)'5', (char)'_', (char)'q', (char)'u', (char)'e', (char)'r', (char)'y', (char)'_', (char)'v', (char)'p', (char)'o', (char)'r', (char)'t', (char)'_', (char)'s', (char)'t', (char)'a', (char)'t', (char)'e', (char)'\000'};

#line 58 
struct kernel_symbol const __ksymtab_mlx5_query_vport_state;


#line 58  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/vport.c"
struct kernel_symbol const __ksymtab_mlx5_query_vport_state = {.value = (unsigned long)(& mlx5_query_vport_state), .name = (char const *)(& __kstrtab_mlx5_query_vport_state)};

#line 60  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/vport.c"
void mlx5_query_nic_vport_mac_address(struct mlx5_core_dev *mdev, u8 *addr)
{
  u32 in[4U];
  u32 *out;
  u8 *out_addr;
  
#line 64 
  int outlen = 272;
  
#line 67 
  out = (u32 *)mlx5_vzalloc_7((unsigned long)outlen);
  
#line 68 
  if (out == (u32 *)0U) 
#line 69 
                        goto return_label; else ;
  
#line 71 
  out_addr = (u8 *)out + 260U;
  
#line 74 
  memset((void *)(& in),0,16UL);
  {
    
#line 76 
    bool __cond = (_Bool)0;
    
#line 76 
    if ((int)__cond != 0) 
#line 76 
                          __compiletime_assert_77(); else ;
  }
  
#line 76 
  if (0 != 0) {
    unsigned int tmp_3;
    unsigned int tmp_5;
    
#line 76 
    if (0 != 0) 
#line 76 
                tmp_3 = ((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) << 24;
    else {
      __u32 tmp_2;
      
#line 76 
      tmp_2 = __fswab32(*((__be32 *)(& in)));
      
#line 76 
      tmp_3 = tmp_2 << 24;
    }
    
#line 76 
    if (0 != 0) 
#line 76 
                tmp_5 = (((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) << 8) & 16711680U;
    else {
      __u32 tmp_4;
      
#line 76 
      tmp_4 = __fswab32(*((__be32 *)(& in)));
      
#line 76 
      tmp_5 = (tmp_4 << 8) & 16711680U;
    }
    
#line 76 
    *((__be32 *)(& in)) = (tmp_3 | tmp_5) | 21511U;
  }
  else {
    __u32 tmp_8;
    unsigned int tmp_7;
    
#line 76 
    if (0 != 0) 
#line 76 
                tmp_7 = (((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) & 65535U) | 122945536U;
    else {
      __u32 tmp_6;
      
#line 76 
      tmp_6 = __fswab32(*((__be32 *)(& in)));
      
#line 76 
      tmp_7 = (tmp_6 & 65535U) | 122945536U;
    }
    
#line 76 
    tmp_8 = __fswab32(tmp_7);
    
#line 76 
    *((__be32 *)(& in)) = tmp_8;
  }
  
#line 79 
  memset((void *)out,0,(unsigned long)outlen);
  
#line 80 
  mlx5_cmd_exec_check_status(mdev,(u32 *)(& in),16,out,outlen);
  
#line 82 
  ether_addr_copy(addr,(u8 const *)(out_addr + 2U));
  
#line 84 
  kvfree((void const *)out);
  return_label: 
#line 85 
                return;
}


#line 86  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/vport.c"
static char const __kstrtab_mlx5_query_nic_vport_mac_address[33U] = {(char)'m', (char)'l', (char)'x', (char)'5', (char)'_', (char)'q', (char)'u', (char)'e', (char)'r', (char)'y', (char)'_', (char)'n', (char)'i', (char)'c', (char)'_', (char)'v', (char)'p', (char)'o', (char)'r', (char)'t', (char)'_', (char)'m', (char)'a', (char)'c', (char)'_', (char)'a', (char)'d', (char)'d', (char)'r', (char)'e', (char)'s', (char)'s', (char)'\000'};

#line 86 
struct kernel_symbol const __ksymtab_mlx5_query_nic_vport_mac_address;


#line 86  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/vport.c"
struct kernel_symbol const __ksymtab_mlx5_query_nic_vport_mac_address = {.value = (unsigned long)(& mlx5_query_nic_vport_mac_address), .name = (char const *)(& __kstrtab_mlx5_query_nic_vport_mac_address)};

#line 134 
void __compiletime_assert_134(void);


#line 88  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/vport.c"
int mlx5_query_hca_vport_gid(struct mlx5_core_dev *dev, u8 other_vport, u8 port_num, u16 vf_num, u16 gid_index, union ib_gid *gid)
{
  int __retres;
  int is_group_manager;
  union ib_gid *tmp;
  int tbsz;
  int nout;
  int err;
  unsigned int tmp_1;
  unsigned int tmp_3;
  int tmp_67;
  
#line 92 
  int in_sz = 16;
  
#line 93 
  int out_sz = 16;
  
#line 95 
  void *out = (void *)0;
  
#line 96 
  void *in = (void *)0;
  
#line 102 
  if (0 != 0) 
#line 102 
              tmp_1 = ((((*((__be32 *)(& dev->hca_caps_cur[0]) + 13U) << 24) | ((*((__be32 *)(& dev->hca_caps_cur[0]) + 13U) << 8) & 16711680U)) | ((*((__be32 *)(& dev->hca_caps_cur[0]) + 13U) >> 8) & 65280U)) | (*((__be32 *)(& dev->hca_caps_cur[0]) + 13U) >> 24)) >> 31UL;
  else {
    __u32 tmp_0;
    
#line 102 
    tmp_0 = __fswab32(*((__be32 *)(& dev->hca_caps_cur[0]) + 13U));
    
#line 102 
    tmp_1 = tmp_0 >> 31UL;
  }
  
#line 102 
  is_group_manager = (int)tmp_1;
  
#line 103 
  if (0 != 0) 
#line 103 
              tmp_3 = ((unsigned int)((unsigned short)(*((__be32 *)(& dev->hca_caps_cur[0]) + 11U) >> 8)) & 65280U) | (unsigned int)((unsigned short)(*((__be32 *)(& dev->hca_caps_cur[0]) + 11U) >> 24));
  else {
    __u32 tmp_2;
    
#line 103 
    tmp_2 = __fswab32(*((__be32 *)(& dev->hca_caps_cur[0]) + 11U));
    
#line 103 
    tmp_3 = (unsigned int)((unsigned short)tmp_2);
  }
  
#line 103 
  tbsz = mlx5_get_gid_table_len((unsigned short)((int)tmp_3));
  {
    
#line 104 
    struct _ddebug descriptor = {.modname = "mlx5_core", .function = "mlx5_query_hca_vport_gid", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/vport.c", .format = "%s:%s:%d:(pid %d): ", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))105U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 104 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
      struct task_struct *tmp_4;
      
#line 104 
      ;
      
#line 104 
      ;
      
#line 104 
      ;
      
#line 104 
      tmp_4 = get_current();
      
#line 104 
      ;
      
#line 104 
      __dynamic_pr_debug(& descriptor,"%s:%s:%d:(pid %d): ",(char *)(& dev->priv.name),"mlx5_query_hca_vport_gid",105,tmp_4->pid,(int)vf_num,(int)gid_index,tbsz);
    }
    else ;
  }
  
#line 107 
  if ((int)gid_index > tbsz && (unsigned int)gid_index != 65535U) {
    
#line 108 
    __retres = -22;
    
#line 108 
    goto return_label;
  }
  else ;
  
#line 110 
  if ((unsigned int)gid_index == 65535U) 
#line 111 
                                         nout = tbsz; else 
#line 113 
                                                           nout = 1;
  
#line 115 
  out_sz = (int)((unsigned long)nout * (unsigned long)16U + (unsigned long)out_sz);
  
#line 117 
  in = kzalloc_12((unsigned long)in_sz,208U);
  
#line 118 
  out = kzalloc_12((unsigned long)out_sz,208U);
  
#line 119 
  if (in == (void *)0 || out == (void *)0) {
    
#line 120 
    err = -12;
    
#line 121 
    goto out;
  }
  else ;
  {
    
#line 124 
    bool __cond = (_Bool)0;
    
#line 124 
    if ((int)__cond != 0) 
#line 124 
                          __compiletime_assert_124(); else ;
  }
  
#line 124 
  if (0 != 0) {
    unsigned int tmp_8;
    unsigned int tmp_10;
    
#line 124 
    if (0 != 0) 
#line 124 
                tmp_8 = ((((*((__be32 *)in) << 24) | ((*((__be32 *)in) << 8) & 16711680U)) | ((*((__be32 *)in) >> 8) & 65280U)) | (*((__be32 *)in) >> 24)) << 24;
    else {
      __u32 tmp_7;
      
#line 124 
      tmp_7 = __fswab32(*((__be32 *)in));
      
#line 124 
      tmp_8 = tmp_7 << 24;
    }
    
#line 124 
    if (0 != 0) 
#line 124 
                tmp_10 = (((((*((__be32 *)in) << 24) | ((*((__be32 *)in) << 8) & 16711680U)) | ((*((__be32 *)in) >> 8) & 65280U)) | (*((__be32 *)in) >> 24)) << 8) & 16711680U;
    else {
      __u32 tmp_9;
      
#line 124 
      tmp_9 = __fswab32(*((__be32 *)in));
      
#line 124 
      tmp_10 = (tmp_9 << 8) & 16711680U;
    }
    
#line 124 
    *((__be32 *)in) = (tmp_8 | tmp_10) | 25607U;
  }
  else {
    __u32 tmp_13;
    unsigned int tmp_12;
    
#line 124 
    if (0 != 0) 
#line 124 
                tmp_12 = (((((*((__be32 *)in) << 24) | ((*((__be32 *)in) << 8) & 16711680U)) | ((*((__be32 *)in) >> 8) & 65280U)) | (*((__be32 *)in) >> 24)) & 65535U) | 123994112U;
    else {
      __u32 tmp_11;
      
#line 124 
      tmp_11 = __fswab32(*((__be32 *)in));
      
#line 124 
      tmp_12 = (tmp_11 & 65535U) | 123994112U;
    }
    
#line 124 
    tmp_13 = __fswab32(tmp_12);
    
#line 124 
    *((__be32 *)in) = tmp_13;
  }
  
#line 125 
  if ((unsigned int)other_vport != 0U) 
    
#line 126 
    if (is_group_manager != 0) {
      {
        
#line 127 
        bool __cond_0 = (_Bool)0;
        
#line 127 
        if ((int)__cond_0 != 0) 
#line 127 
                                __compiletime_assert_127(); else ;
      }
      
#line 127 
      if (0 != 0) {
        unsigned int tmp_17;
        unsigned int tmp_19;
        unsigned int tmp_21;
        unsigned int tmp_23;
        
#line 127 
        if (0 != 0) 
#line 127 
                    tmp_17 = ((((*((__be32 *)in + 2U) << 24) | ((*((__be32 *)in + 2U) << 8) & 16711680U)) | ((*((__be32 *)in + 2U) >> 8) & 65280U)) | (*((__be32 *)in + 2U) >> 24)) & 4294901760U;
        else {
          __u32 tmp_16;
          
#line 127 
          tmp_16 = __fswab32(*((__be32 *)in + 2U));
          
#line 127 
          tmp_17 = tmp_16 & 4294901760U;
        }
        
#line 127 
        if (0 != 0) 
#line 127 
                    tmp_19 = ((((*((__be32 *)in + 2U) << 24) | ((*((__be32 *)in + 2U) << 8) & 16711680U)) | ((*((__be32 *)in + 2U) >> 8) & 65280U)) | (*((__be32 *)in + 2U) >> 24)) & 4294901760U;
        else {
          __u32 tmp_18;
          
#line 127 
          tmp_18 = __fswab32(*((__be32 *)in + 2U));
          
#line 127 
          tmp_19 = tmp_18 & 4294901760U;
        }
        
#line 127 
        if (0 != 0) 
#line 127 
                    tmp_21 = ((((*((__be32 *)in + 2U) << 24) | ((*((__be32 *)in + 2U) << 8) & 16711680U)) | ((*((__be32 *)in + 2U) >> 8) & 65280U)) | (*((__be32 *)in + 2U) >> 24)) & 4294901760U;
        else {
          __u32 tmp_20;
          
#line 127 
          tmp_20 = __fswab32(*((__be32 *)in + 2U));
          
#line 127 
          tmp_21 = tmp_20 & 4294901760U;
        }
        
#line 127 
        if (0 != 0) 
#line 127 
                    tmp_23 = ((((*((__be32 *)in + 2U) << 24) | ((*((__be32 *)in + 2U) << 8) & 16711680U)) | ((*((__be32 *)in + 2U) >> 8) & 65280U)) | (*((__be32 *)in + 2U) >> 24)) & 4294901760U;
        else {
          __u32 tmp_22;
          
#line 127 
          tmp_22 = __fswab32(*((__be32 *)in + 2U));
          
#line 127 
          tmp_23 = tmp_22 & 4294901760U;
        }
        
#line 127 
        *((__be32 *)in + 2U) = ((((tmp_17 | (unsigned int)vf_num) << 24) | (((tmp_19 | (unsigned int)vf_num) << 8) & 16711680U)) | (((tmp_21 | (unsigned int)vf_num) >> 8) & 65280U)) | ((tmp_23 | (unsigned int)vf_num) >> 24);
      }
      else {
        __u32 tmp_26;
        unsigned int tmp_25;
        
#line 127 
        if (0 != 0) 
#line 127 
                    tmp_25 = ((((*((__be32 *)in + 2U) << 24) | ((*((__be32 *)in + 2U) << 8) & 16711680U)) | ((*((__be32 *)in + 2U) >> 8) & 65280U)) | (*((__be32 *)in + 2U) >> 24)) & 4294901760U;
        else {
          __u32 tmp_24;
          
#line 127 
          tmp_24 = __fswab32(*((__be32 *)in + 2U));
          
#line 127 
          tmp_25 = tmp_24 & 4294901760U;
        }
        
#line 127 
        ;
        
#line 127 
        tmp_26 = __fswab32(tmp_25 | (unsigned int)vf_num);
        
#line 127 
        *((__be32 *)in + 2U) = tmp_26;
      }
      {
        
#line 128 
        bool __cond_1 = (_Bool)0;
        
#line 128 
        if ((int)__cond_1 != 0) 
#line 128 
                                __compiletime_assert_128(); else ;
      }
      
#line 128 
      if (0 != 0) {
        unsigned int tmp_30;
        unsigned int tmp_32;
        unsigned int tmp_34;
        unsigned int tmp_36;
        
#line 128 
        if (0 != 0) 
#line 128 
                    tmp_30 = ((((*((__be32 *)in + 2U) << 24) | ((*((__be32 *)in + 2U) << 8) & 16711680U)) | ((*((__be32 *)in + 2U) >> 8) & 65280U)) | (*((__be32 *)in + 2U) >> 24)) << 24;
        else {
          __u32 tmp_29;
          
#line 128 
          tmp_29 = __fswab32(*((__be32 *)in + 2U));
          
#line 128 
          tmp_30 = tmp_29 << 24;
        }
        
#line 128 
        if (0 != 0) 
#line 128 
                    tmp_32 = (((((*((__be32 *)in + 2U) << 24) | ((*((__be32 *)in + 2U) << 8) & 16711680U)) | ((*((__be32 *)in + 2U) >> 8) & 65280U)) | (*((__be32 *)in + 2U) >> 24)) << 8) & 16711680U;
        else {
          __u32 tmp_31;
          
#line 128 
          tmp_31 = __fswab32(*((__be32 *)in + 2U));
          
#line 128 
          tmp_32 = (tmp_31 << 8) & 16711680U;
        }
        
#line 128 
        if (0 != 0) 
#line 128 
                    tmp_34 = (((((*((__be32 *)in + 2U) << 24) | ((*((__be32 *)in + 2U) << 8) & 16711680U)) | ((*((__be32 *)in + 2U) >> 8) & 65280U)) | (*((__be32 *)in + 2U) >> 24)) >> 8) & 65280U;
        else {
          __u32 tmp_33;
          
#line 128 
          tmp_33 = __fswab32(*((__be32 *)in + 2U));
          
#line 128 
          tmp_34 = (tmp_33 >> 8) & 65280U;
        }
        
#line 128 
        if (0 != 0) 
#line 128 
                    tmp_36 = (((((*((__be32 *)in + 2U) << 24) | ((*((__be32 *)in + 2U) << 8) & 16711680U)) | ((*((__be32 *)in + 2U) >> 8) & 65280U)) | (*((__be32 *)in + 2U) >> 24)) >> 24) | 128U;
        else {
          __u32 tmp_35;
          
#line 128 
          tmp_35 = __fswab32(*((__be32 *)in + 2U));
          
#line 128 
          tmp_36 = (tmp_35 >> 24) | 128U;
        }
        
#line 128 
        *((__be32 *)in + 2U) = ((tmp_30 | tmp_32) | tmp_34) | tmp_36;
      }
      else {
        __u32 tmp_39;
        unsigned int tmp_38;
        
#line 128 
        if (0 != 0) 
#line 128 
                    tmp_38 = ((((*((__be32 *)in + 2U) << 24) | ((*((__be32 *)in + 2U) << 8) & 16711680U)) | ((*((__be32 *)in + 2U) >> 8) & 65280U)) | (*((__be32 *)in + 2U) >> 24)) | 2147483648U;
        else {
          __u32 tmp_37;
          
#line 128 
          tmp_37 = __fswab32(*((__be32 *)in + 2U));
          
#line 128 
          tmp_38 = tmp_37 | 2147483648U;
        }
        
#line 128 
        tmp_39 = __fswab32(tmp_38);
        
#line 128 
        *((__be32 *)in + 2U) = tmp_39;
      }
    }
    else {
      
#line 130 
      err = -1;
      
#line 131 
      goto out;
    }
  else ;
  {
    
#line 134 
    bool __cond_2 = (_Bool)0;
    
#line 134 
    if ((int)__cond_2 != 0) 
#line 134 
                            __compiletime_assert_134(); else ;
  }
  
#line 134 
  if (0 != 0) {
    unsigned int tmp_43;
    unsigned int tmp_45;
    unsigned int tmp_47;
    unsigned int tmp_49;
    
#line 134 
    if (0 != 0) 
#line 134 
                tmp_43 = ((((*((__be32 *)in + 3U) << 24) | ((*((__be32 *)in + 3U) << 8) & 16711680U)) | ((*((__be32 *)in + 3U) >> 8) & 65280U)) | (*((__be32 *)in + 3U) >> 24)) & 4294901760U;
    else {
      __u32 tmp_42;
      
#line 134 
      tmp_42 = __fswab32(*((__be32 *)in + 3U));
      
#line 134 
      tmp_43 = tmp_42 & 4294901760U;
    }
    
#line 134 
    if (0 != 0) 
#line 134 
                tmp_45 = ((((*((__be32 *)in + 3U) << 24) | ((*((__be32 *)in + 3U) << 8) & 16711680U)) | ((*((__be32 *)in + 3U) >> 8) & 65280U)) | (*((__be32 *)in + 3U) >> 24)) & 4294901760U;
    else {
      __u32 tmp_44;
      
#line 134 
      tmp_44 = __fswab32(*((__be32 *)in + 3U));
      
#line 134 
      tmp_45 = tmp_44 & 4294901760U;
    }
    
#line 134 
    if (0 != 0) 
#line 134 
                tmp_47 = ((((*((__be32 *)in + 3U) << 24) | ((*((__be32 *)in + 3U) << 8) & 16711680U)) | ((*((__be32 *)in + 3U) >> 8) & 65280U)) | (*((__be32 *)in + 3U) >> 24)) & 4294901760U;
    else {
      __u32 tmp_46;
      
#line 134 
      tmp_46 = __fswab32(*((__be32 *)in + 3U));
      
#line 134 
      tmp_47 = tmp_46 & 4294901760U;
    }
    
#line 134 
    if (0 != 0) 
#line 134 
                tmp_49 = ((((*((__be32 *)in + 3U) << 24) | ((*((__be32 *)in + 3U) << 8) & 16711680U)) | ((*((__be32 *)in + 3U) >> 8) & 65280U)) | (*((__be32 *)in + 3U) >> 24)) & 4294901760U;
    else {
      __u32 tmp_48;
      
#line 134 
      tmp_48 = __fswab32(*((__be32 *)in + 3U));
      
#line 134 
      tmp_49 = tmp_48 & 4294901760U;
    }
    
#line 134 
    *((__be32 *)in + 3U) = ((((tmp_43 | (unsigned int)gid_index) << 24) | (((tmp_45 | (unsigned int)gid_index) << 8) & 16711680U)) | (((tmp_47 | (unsigned int)gid_index) >> 8) & 65280U)) | ((tmp_49 | (unsigned int)gid_index) >> 24);
  }
  else {
    __u32 tmp_52;
    unsigned int tmp_51;
    
#line 134 
    if (0 != 0) 
#line 134 
                tmp_51 = ((((*((__be32 *)in + 3U) << 24) | ((*((__be32 *)in + 3U) << 8) & 16711680U)) | ((*((__be32 *)in + 3U) >> 8) & 65280U)) | (*((__be32 *)in + 3U) >> 24)) & 4294901760U;
    else {
      __u32 tmp_50;
      
#line 134 
      tmp_50 = __fswab32(*((__be32 *)in + 3U));
      
#line 134 
      tmp_51 = tmp_50 & 4294901760U;
    }
    
#line 134 
    ;
    
#line 134 
    tmp_52 = __fswab32(tmp_51 | (unsigned int)gid_index);
    
#line 134 
    *((__be32 *)in + 3U) = tmp_52;
  }
  
#line 136 
  if (0 != 0) 
#line 136 
              tmp_67 = (((((*((__be32 *)(& dev->hca_caps_cur[0]) + 13U) << 24) | ((*((__be32 *)(& dev->hca_caps_cur[0]) + 13U) << 8) & 16711680U)) | ((*((__be32 *)(& dev->hca_caps_cur[0]) + 13U) >> 8) & 65280U)) | (*((__be32 *)(& dev->hca_caps_cur[0]) + 13U) >> 24)) & 255U) == 2U;
  else {
    __u32 tmp_66;
    
#line 136 
    tmp_66 = __fswab32(*((__be32 *)(& dev->hca_caps_cur[0]) + 13U));
    
#line 136 
    tmp_67 = (tmp_66 & 255U) == 2U;
  }
  
#line 136 
  if (tmp_67) {
    {
      
#line 137 
      bool __cond_3 = (_Bool)0;
      
#line 137 
      if ((int)__cond_3 != 0) 
#line 137 
                              __compiletime_assert_137(); else ;
    }
    
#line 137 
    if (0 != 0) {
      unsigned int tmp_56;
      unsigned int tmp_58;
      unsigned int tmp_60;
      unsigned int tmp_62;
      
#line 137 
      if (0 != 0) 
#line 137 
                  tmp_56 = ((((*((__be32 *)in + 2U) << 24) | ((*((__be32 *)in + 2U) << 8) & 16711680U)) | ((*((__be32 *)in + 2U) >> 8) & 65280U)) | (*((__be32 *)in + 2U) >> 24)) & 4293984255U;
      else {
        __u32 tmp_55;
        
#line 137 
        tmp_55 = __fswab32(*((__be32 *)in + 2U));
        
#line 137 
        tmp_56 = tmp_55 & 4293984255U;
      }
      
#line 137 
      if (0 != 0) 
#line 137 
                  tmp_58 = ((((*((__be32 *)in + 2U) << 24) | ((*((__be32 *)in + 2U) << 8) & 16711680U)) | ((*((__be32 *)in + 2U) >> 8) & 65280U)) | (*((__be32 *)in + 2U) >> 24)) & 4293984255U;
      else {
        __u32 tmp_57;
        
#line 137 
        tmp_57 = __fswab32(*((__be32 *)in + 2U));
        
#line 137 
        tmp_58 = tmp_57 & 4293984255U;
      }
      
#line 137 
      if (0 != 0) 
#line 137 
                  tmp_60 = ((((*((__be32 *)in + 2U) << 24) | ((*((__be32 *)in + 2U) << 8) & 16711680U)) | ((*((__be32 *)in + 2U) >> 8) & 65280U)) | (*((__be32 *)in + 2U) >> 24)) & 4293984255U;
      else {
        __u32 tmp_59;
        
#line 137 
        tmp_59 = __fswab32(*((__be32 *)in + 2U));
        
#line 137 
        tmp_60 = tmp_59 & 4293984255U;
      }
      
#line 137 
      if (0 != 0) 
#line 137 
                  tmp_62 = ((((*((__be32 *)in + 2U) << 24) | ((*((__be32 *)in + 2U) << 8) & 16711680U)) | ((*((__be32 *)in + 2U) >> 8) & 65280U)) | (*((__be32 *)in + 2U) >> 24)) & 4293984255U;
      else {
        __u32 tmp_61;
        
#line 137 
        tmp_61 = __fswab32(*((__be32 *)in + 2U));
        
#line 137 
        tmp_62 = tmp_61 & 4293984255U;
      }
      
#line 137 
      *((__be32 *)in + 2U) = ((((tmp_56 | (((unsigned int)port_num << 16UL) & 983040U)) << 24) | (((tmp_58 | (((unsigned int)port_num << 16UL) & 983040U)) << 8) & 16711680U)) | (((tmp_60 | (((unsigned int)port_num << 16UL) & 983040U)) >> 8) & 65280U)) | ((tmp_62 | (((unsigned int)port_num << 16UL) & 983040U)) >> 24);
    }
    else {
      __u32 tmp_65;
      unsigned int tmp_64;
      
#line 137 
      if (0 != 0) 
#line 137 
                  tmp_64 = ((((*((__be32 *)in + 2U) << 24) | ((*((__be32 *)in + 2U) << 8) & 16711680U)) | ((*((__be32 *)in + 2U) >> 8) & 65280U)) | (*((__be32 *)in + 2U) >> 24)) & 4293984255U;
      else {
        __u32 tmp_63;
        
#line 137 
        tmp_63 = __fswab32(*((__be32 *)in + 2U));
        
#line 137 
        tmp_64 = tmp_63 & 4293984255U;
      }
      
#line 137 
      ;
      
#line 137 
      tmp_65 = __fswab32(tmp_64 | (((unsigned int)port_num << 16UL) & 983040U));
      
#line 137 
      *((__be32 *)in + 2U) = tmp_65;
    }
  }
  else ;
  
#line 139 
  err = mlx5_cmd_exec(dev,in,in_sz,out,out_sz);
  
#line 140 
  if (err != 0) 
#line 141 
                goto out; else ;
  
#line 143 
  err = mlx5_cmd_status_to_err_v2(out);
  
#line 144 
  if (err != 0) 
#line 145 
                goto out; else ;
  
#line 147 
  tmp = (union ib_gid *)(out + 16U);
  
#line 148 
  gid->global.subnet_prefix = tmp->global.subnet_prefix;
  
#line 149 
  gid->global.interface_id = tmp->global.interface_id;
  out: 
#line 151 
  ;
  
#line 152 
  kfree((void const *)in);
  
#line 153 
  kfree((void const *)out);
  
#line 154 
  __retres = err;
  return_label: 
#line 154 
                return __retres;
}


#line 156  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/vport.c"
static char const __kstrtab_mlx5_query_hca_vport_gid[25U] = {(char)'m', (char)'l', (char)'x', (char)'5', (char)'_', (char)'q', (char)'u', (char)'e', (char)'r', (char)'y', (char)'_', (char)'h', (char)'c', (char)'a', (char)'_', (char)'v', (char)'p', (char)'o', (char)'r', (char)'t', (char)'_', (char)'g', (char)'i', (char)'d', (char)'\000'};

#line 156 
struct kernel_symbol const __ksymtab_mlx5_query_hca_vport_gid;


#line 156  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/vport.c"
struct kernel_symbol const __ksymtab_mlx5_query_hca_vport_gid = {.value = (unsigned long)(& mlx5_query_hca_vport_gid), .name = (char const *)(& __kstrtab_mlx5_query_hca_vport_gid)};

#line 193 
void __compiletime_assert_193(void);


#line 196 
void __compiletime_assert_196(void);


#line 158  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/vport.c"
int mlx5_query_hca_vport_pkey(struct mlx5_core_dev *dev, u8 other_vport, u8 port_num, u16 vf_num, u16 pkey_index, u16 *pkey)
{
  int __retres;
  int is_group_manager;
  void *pkarr;
  int nout;
  int tbsz;
  int err;
  int i;
  unsigned int tmp_0;
  u16 tmp_3;
  unsigned int tmp_2;
  int tmp_66;
  u32 tmp_69;
  
#line 162 
  int in_sz = 16;
  
#line 163 
  int out_sz = 16;
  
#line 165 
  void *out = (void *)0;
  
#line 166 
  void *in = (void *)0;
  
#line 173 
  if (0 != 0) 
#line 173 
              tmp_0 = ((((*((__be32 *)(& dev->hca_caps_cur[0]) + 13U) << 24) | ((*((__be32 *)(& dev->hca_caps_cur[0]) + 13U) << 8) & 16711680U)) | ((*((__be32 *)(& dev->hca_caps_cur[0]) + 13U) >> 8) & 65280U)) | (*((__be32 *)(& dev->hca_caps_cur[0]) + 13U) >> 24)) >> 31UL;
  else {
    __u32 tmp;
    
#line 173 
    tmp = __fswab32(*((__be32 *)(& dev->hca_caps_cur[0]) + 13U));
    
#line 173 
    tmp_0 = tmp >> 31UL;
  }
  
#line 173 
  is_group_manager = (int)tmp_0;
  
#line 175 
  if (0 != 0) 
#line 175 
              tmp_2 = ((((*((__be32 *)(& dev->hca_caps_cur[0]) + 12U) << 24) | ((*((__be32 *)(& dev->hca_caps_cur[0]) + 12U) << 8) & 16711680U)) | ((*((__be32 *)(& dev->hca_caps_cur[0]) + 12U) >> 8) & 65280U)) | (*((__be32 *)(& dev->hca_caps_cur[0]) + 12U) >> 24)) & 65535U;
  else {
    __u32 tmp_1;
    
#line 175 
    tmp_1 = __fswab32(*((__be32 *)(& dev->hca_caps_cur[0]) + 12U));
    
#line 175 
    tmp_2 = tmp_1 & 65535U;
  }
  
#line 175 
  tmp_3 = mlx5_to_sw_pkey_sz((int)tmp_2);
  
#line 175 
  tbsz = (int)tmp_3;
  
#line 176 
  if ((int)pkey_index > tbsz && (unsigned int)pkey_index != 65535U) {
    
#line 177 
    __retres = -22;
    
#line 177 
    goto return_label;
  }
  else ;
  
#line 179 
  if ((unsigned int)pkey_index == 65535U) 
#line 180 
                                          nout = tbsz; else 
#line 182 
                                                            nout = 1;
  
#line 184 
  out_sz = (int)((unsigned long)nout * (unsigned long)4U + (unsigned long)out_sz);
  
#line 186 
  in = kzalloc_12((unsigned long)in_sz,208U);
  
#line 187 
  out = kzalloc_12((unsigned long)out_sz,208U);
  
#line 188 
  if (in == (void *)0 || out == (void *)0) {
    
#line 189 
    err = -12;
    
#line 190 
    goto out;
  }
  else ;
  {
    
#line 193 
    bool __cond = (_Bool)0;
    
#line 193 
    if ((int)__cond != 0) 
#line 193 
                          __compiletime_assert_193(); else ;
  }
  
#line 193 
  if (0 != 0) {
    unsigned int tmp_7;
    unsigned int tmp_9;
    
#line 193 
    if (0 != 0) 
#line 193 
                tmp_7 = ((((*((__be32 *)in) << 24) | ((*((__be32 *)in) << 8) & 16711680U)) | ((*((__be32 *)in) >> 8) & 65280U)) | (*((__be32 *)in) >> 24)) << 24;
    else {
      __u32 tmp_6;
      
#line 193 
      tmp_6 = __fswab32(*((__be32 *)in));
      
#line 193 
      tmp_7 = tmp_6 << 24;
    }
    
#line 193 
    if (0 != 0) 
#line 193 
                tmp_9 = (((((*((__be32 *)in) << 24) | ((*((__be32 *)in) << 8) & 16711680U)) | ((*((__be32 *)in) >> 8) & 65280U)) | (*((__be32 *)in) >> 24)) << 8) & 16711680U;
    else {
      __u32 tmp_8;
      
#line 193 
      tmp_8 = __fswab32(*((__be32 *)in));
      
#line 193 
      tmp_9 = (tmp_8 << 8) & 16711680U;
    }
    
#line 193 
    *((__be32 *)in) = (tmp_7 | tmp_9) | 25863U;
  }
  else {
    __u32 tmp_12;
    unsigned int tmp_11;
    
#line 193 
    if (0 != 0) 
#line 193 
                tmp_11 = (((((*((__be32 *)in) << 24) | ((*((__be32 *)in) << 8) & 16711680U)) | ((*((__be32 *)in) >> 8) & 65280U)) | (*((__be32 *)in) >> 24)) & 65535U) | 124059648U;
    else {
      __u32 tmp_10;
      
#line 193 
      tmp_10 = __fswab32(*((__be32 *)in));
      
#line 193 
      tmp_11 = (tmp_10 & 65535U) | 124059648U;
    }
    
#line 193 
    tmp_12 = __fswab32(tmp_11);
    
#line 193 
    *((__be32 *)in) = tmp_12;
  }
  
#line 194 
  if ((unsigned int)other_vport != 0U) 
    
#line 195 
    if (is_group_manager != 0) {
      {
        
#line 196 
        bool __cond_0 = (_Bool)0;
        
#line 196 
        if ((int)__cond_0 != 0) 
#line 196 
                                __compiletime_assert_196(); else ;
      }
      
#line 196 
      if (0 != 0) {
        unsigned int tmp_16;
        unsigned int tmp_18;
        unsigned int tmp_20;
        unsigned int tmp_22;
        
#line 196 
        if (0 != 0) 
#line 196 
                    tmp_16 = ((((*((__be32 *)in + 2U) << 24) | ((*((__be32 *)in + 2U) << 8) & 16711680U)) | ((*((__be32 *)in + 2U) >> 8) & 65280U)) | (*((__be32 *)in + 2U) >> 24)) & 4294901760U;
        else {
          __u32 tmp_15;
          
#line 196 
          tmp_15 = __fswab32(*((__be32 *)in + 2U));
          
#line 196 
          tmp_16 = tmp_15 & 4294901760U;
        }
        
#line 196 
        if (0 != 0) 
#line 196 
                    tmp_18 = ((((*((__be32 *)in + 2U) << 24) | ((*((__be32 *)in + 2U) << 8) & 16711680U)) | ((*((__be32 *)in + 2U) >> 8) & 65280U)) | (*((__be32 *)in + 2U) >> 24)) & 4294901760U;
        else {
          __u32 tmp_17;
          
#line 196 
          tmp_17 = __fswab32(*((__be32 *)in + 2U));
          
#line 196 
          tmp_18 = tmp_17 & 4294901760U;
        }
        
#line 196 
        if (0 != 0) 
#line 196 
                    tmp_20 = ((((*((__be32 *)in + 2U) << 24) | ((*((__be32 *)in + 2U) << 8) & 16711680U)) | ((*((__be32 *)in + 2U) >> 8) & 65280U)) | (*((__be32 *)in + 2U) >> 24)) & 4294901760U;
        else {
          __u32 tmp_19;
          
#line 196 
          tmp_19 = __fswab32(*((__be32 *)in + 2U));
          
#line 196 
          tmp_20 = tmp_19 & 4294901760U;
        }
        
#line 196 
        if (0 != 0) 
#line 196 
                    tmp_22 = ((((*((__be32 *)in + 2U) << 24) | ((*((__be32 *)in + 2U) << 8) & 16711680U)) | ((*((__be32 *)in + 2U) >> 8) & 65280U)) | (*((__be32 *)in + 2U) >> 24)) & 4294901760U;
        else {
          __u32 tmp_21;
          
#line 196 
          tmp_21 = __fswab32(*((__be32 *)in + 2U));
          
#line 196 
          tmp_22 = tmp_21 & 4294901760U;
        }
        
#line 196 
        *((__be32 *)in + 2U) = ((((tmp_16 | (unsigned int)vf_num) << 24) | (((tmp_18 | (unsigned int)vf_num) << 8) & 16711680U)) | (((tmp_20 | (unsigned int)vf_num) >> 8) & 65280U)) | ((tmp_22 | (unsigned int)vf_num) >> 24);
      }
      else {
        __u32 tmp_25;
        unsigned int tmp_24;
        
#line 196 
        if (0 != 0) 
#line 196 
                    tmp_24 = ((((*((__be32 *)in + 2U) << 24) | ((*((__be32 *)in + 2U) << 8) & 16711680U)) | ((*((__be32 *)in + 2U) >> 8) & 65280U)) | (*((__be32 *)in + 2U) >> 24)) & 4294901760U;
        else {
          __u32 tmp_23;
          
#line 196 
          tmp_23 = __fswab32(*((__be32 *)in + 2U));
          
#line 196 
          tmp_24 = tmp_23 & 4294901760U;
        }
        
#line 196 
        ;
        
#line 196 
        tmp_25 = __fswab32(tmp_24 | (unsigned int)vf_num);
        
#line 196 
        *((__be32 *)in + 2U) = tmp_25;
      }
      {
        
#line 197 
        bool __cond_1 = (_Bool)0;
        
#line 197 
        if ((int)__cond_1 != 0) 
#line 197 
                                __compiletime_assert_197(); else ;
      }
      
#line 197 
      if (0 != 0) {
        unsigned int tmp_29;
        unsigned int tmp_31;
        unsigned int tmp_33;
        unsigned int tmp_35;
        
#line 197 
        if (0 != 0) 
#line 197 
                    tmp_29 = ((((*((__be32 *)in + 2U) << 24) | ((*((__be32 *)in + 2U) << 8) & 16711680U)) | ((*((__be32 *)in + 2U) >> 8) & 65280U)) | (*((__be32 *)in + 2U) >> 24)) << 24;
        else {
          __u32 tmp_28;
          
#line 197 
          tmp_28 = __fswab32(*((__be32 *)in + 2U));
          
#line 197 
          tmp_29 = tmp_28 << 24;
        }
        
#line 197 
        if (0 != 0) 
#line 197 
                    tmp_31 = (((((*((__be32 *)in + 2U) << 24) | ((*((__be32 *)in + 2U) << 8) & 16711680U)) | ((*((__be32 *)in + 2U) >> 8) & 65280U)) | (*((__be32 *)in + 2U) >> 24)) << 8) & 16711680U;
        else {
          __u32 tmp_30;
          
#line 197 
          tmp_30 = __fswab32(*((__be32 *)in + 2U));
          
#line 197 
          tmp_31 = (tmp_30 << 8) & 16711680U;
        }
        
#line 197 
        if (0 != 0) 
#line 197 
                    tmp_33 = (((((*((__be32 *)in + 2U) << 24) | ((*((__be32 *)in + 2U) << 8) & 16711680U)) | ((*((__be32 *)in + 2U) >> 8) & 65280U)) | (*((__be32 *)in + 2U) >> 24)) >> 8) & 65280U;
        else {
          __u32 tmp_32;
          
#line 197 
          tmp_32 = __fswab32(*((__be32 *)in + 2U));
          
#line 197 
          tmp_33 = (tmp_32 >> 8) & 65280U;
        }
        
#line 197 
        if (0 != 0) 
#line 197 
                    tmp_35 = (((((*((__be32 *)in + 2U) << 24) | ((*((__be32 *)in + 2U) << 8) & 16711680U)) | ((*((__be32 *)in + 2U) >> 8) & 65280U)) | (*((__be32 *)in + 2U) >> 24)) >> 24) | 128U;
        else {
          __u32 tmp_34;
          
#line 197 
          tmp_34 = __fswab32(*((__be32 *)in + 2U));
          
#line 197 
          tmp_35 = (tmp_34 >> 24) | 128U;
        }
        
#line 197 
        *((__be32 *)in + 2U) = ((tmp_29 | tmp_31) | tmp_33) | tmp_35;
      }
      else {
        __u32 tmp_38;
        unsigned int tmp_37;
        
#line 197 
        if (0 != 0) 
#line 197 
                    tmp_37 = ((((*((__be32 *)in + 2U) << 24) | ((*((__be32 *)in + 2U) << 8) & 16711680U)) | ((*((__be32 *)in + 2U) >> 8) & 65280U)) | (*((__be32 *)in + 2U) >> 24)) | 2147483648U;
        else {
          __u32 tmp_36;
          
#line 197 
          tmp_36 = __fswab32(*((__be32 *)in + 2U));
          
#line 197 
          tmp_37 = tmp_36 | 2147483648U;
        }
        
#line 197 
        tmp_38 = __fswab32(tmp_37);
        
#line 197 
        *((__be32 *)in + 2U) = tmp_38;
      }
    }
    else {
      
#line 199 
      err = -1;
      
#line 200 
      goto out;
    }
  else ;
  {
    
#line 203 
    bool __cond_2 = (_Bool)0;
    
#line 203 
    if ((int)__cond_2 != 0) 
#line 203 
                            __compiletime_assert_203(); else ;
  }
  
#line 203 
  if (0 != 0) {
    unsigned int tmp_42;
    unsigned int tmp_44;
    unsigned int tmp_46;
    unsigned int tmp_48;
    
#line 203 
    if (0 != 0) 
#line 203 
                tmp_42 = ((((*((__be32 *)in + 3U) << 24) | ((*((__be32 *)in + 3U) << 8) & 16711680U)) | ((*((__be32 *)in + 3U) >> 8) & 65280U)) | (*((__be32 *)in + 3U) >> 24)) & 4294901760U;
    else {
      __u32 tmp_41;
      
#line 203 
      tmp_41 = __fswab32(*((__be32 *)in + 3U));
      
#line 203 
      tmp_42 = tmp_41 & 4294901760U;
    }
    
#line 203 
    if (0 != 0) 
#line 203 
                tmp_44 = ((((*((__be32 *)in + 3U) << 24) | ((*((__be32 *)in + 3U) << 8) & 16711680U)) | ((*((__be32 *)in + 3U) >> 8) & 65280U)) | (*((__be32 *)in + 3U) >> 24)) & 4294901760U;
    else {
      __u32 tmp_43;
      
#line 203 
      tmp_43 = __fswab32(*((__be32 *)in + 3U));
      
#line 203 
      tmp_44 = tmp_43 & 4294901760U;
    }
    
#line 203 
    if (0 != 0) 
#line 203 
                tmp_46 = ((((*((__be32 *)in + 3U) << 24) | ((*((__be32 *)in + 3U) << 8) & 16711680U)) | ((*((__be32 *)in + 3U) >> 8) & 65280U)) | (*((__be32 *)in + 3U) >> 24)) & 4294901760U;
    else {
      __u32 tmp_45;
      
#line 203 
      tmp_45 = __fswab32(*((__be32 *)in + 3U));
      
#line 203 
      tmp_46 = tmp_45 & 4294901760U;
    }
    
#line 203 
    if (0 != 0) 
#line 203 
                tmp_48 = ((((*((__be32 *)in + 3U) << 24) | ((*((__be32 *)in + 3U) << 8) & 16711680U)) | ((*((__be32 *)in + 3U) >> 8) & 65280U)) | (*((__be32 *)in + 3U) >> 24)) & 4294901760U;
    else {
      __u32 tmp_47;
      
#line 203 
      tmp_47 = __fswab32(*((__be32 *)in + 3U));
      
#line 203 
      tmp_48 = tmp_47 & 4294901760U;
    }
    
#line 203 
    *((__be32 *)in + 3U) = ((((tmp_42 | (unsigned int)pkey_index) << 24) | (((tmp_44 | (unsigned int)pkey_index) << 8) & 16711680U)) | (((tmp_46 | (unsigned int)pkey_index) >> 8) & 65280U)) | ((tmp_48 | (unsigned int)pkey_index) >> 24);
  }
  else {
    __u32 tmp_51;
    unsigned int tmp_50;
    
#line 203 
    if (0 != 0) 
#line 203 
                tmp_50 = ((((*((__be32 *)in + 3U) << 24) | ((*((__be32 *)in + 3U) << 8) & 16711680U)) | ((*((__be32 *)in + 3U) >> 8) & 65280U)) | (*((__be32 *)in + 3U) >> 24)) & 4294901760U;
    else {
      __u32 tmp_49;
      
#line 203 
      tmp_49 = __fswab32(*((__be32 *)in + 3U));
      
#line 203 
      tmp_50 = tmp_49 & 4294901760U;
    }
    
#line 203 
    ;
    
#line 203 
    tmp_51 = __fswab32(tmp_50 | (unsigned int)pkey_index);
    
#line 203 
    *((__be32 *)in + 3U) = tmp_51;
  }
  
#line 205 
  if (0 != 0) 
#line 205 
              tmp_66 = (((((*((__be32 *)(& dev->hca_caps_cur[0]) + 13U) << 24) | ((*((__be32 *)(& dev->hca_caps_cur[0]) + 13U) << 8) & 16711680U)) | ((*((__be32 *)(& dev->hca_caps_cur[0]) + 13U) >> 8) & 65280U)) | (*((__be32 *)(& dev->hca_caps_cur[0]) + 13U) >> 24)) & 255U) == 2U;
  else {
    __u32 tmp_65;
    
#line 205 
    tmp_65 = __fswab32(*((__be32 *)(& dev->hca_caps_cur[0]) + 13U));
    
#line 205 
    tmp_66 = (tmp_65 & 255U) == 2U;
  }
  
#line 205 
  if (tmp_66) {
    {
      
#line 206 
      bool __cond_3 = (_Bool)0;
      
#line 206 
      if ((int)__cond_3 != 0) 
#line 206 
                              __compiletime_assert_206(); else ;
    }
    
#line 206 
    if (0 != 0) {
      unsigned int tmp_55;
      unsigned int tmp_57;
      unsigned int tmp_59;
      unsigned int tmp_61;
      
#line 206 
      if (0 != 0) 
#line 206 
                  tmp_55 = ((((*((__be32 *)in + 2U) << 24) | ((*((__be32 *)in + 2U) << 8) & 16711680U)) | ((*((__be32 *)in + 2U) >> 8) & 65280U)) | (*((__be32 *)in + 2U) >> 24)) & 4293984255U;
      else {
        __u32 tmp_54;
        
#line 206 
        tmp_54 = __fswab32(*((__be32 *)in + 2U));
        
#line 206 
        tmp_55 = tmp_54 & 4293984255U;
      }
      
#line 206 
      if (0 != 0) 
#line 206 
                  tmp_57 = ((((*((__be32 *)in + 2U) << 24) | ((*((__be32 *)in + 2U) << 8) & 16711680U)) | ((*((__be32 *)in + 2U) >> 8) & 65280U)) | (*((__be32 *)in + 2U) >> 24)) & 4293984255U;
      else {
        __u32 tmp_56;
        
#line 206 
        tmp_56 = __fswab32(*((__be32 *)in + 2U));
        
#line 206 
        tmp_57 = tmp_56 & 4293984255U;
      }
      
#line 206 
      if (0 != 0) 
#line 206 
                  tmp_59 = ((((*((__be32 *)in + 2U) << 24) | ((*((__be32 *)in + 2U) << 8) & 16711680U)) | ((*((__be32 *)in + 2U) >> 8) & 65280U)) | (*((__be32 *)in + 2U) >> 24)) & 4293984255U;
      else {
        __u32 tmp_58;
        
#line 206 
        tmp_58 = __fswab32(*((__be32 *)in + 2U));
        
#line 206 
        tmp_59 = tmp_58 & 4293984255U;
      }
      
#line 206 
      if (0 != 0) 
#line 206 
                  tmp_61 = ((((*((__be32 *)in + 2U) << 24) | ((*((__be32 *)in + 2U) << 8) & 16711680U)) | ((*((__be32 *)in + 2U) >> 8) & 65280U)) | (*((__be32 *)in + 2U) >> 24)) & 4293984255U;
      else {
        __u32 tmp_60;
        
#line 206 
        tmp_60 = __fswab32(*((__be32 *)in + 2U));
        
#line 206 
        tmp_61 = tmp_60 & 4293984255U;
      }
      
#line 206 
      *((__be32 *)in + 2U) = ((((tmp_55 | (((unsigned int)port_num << 16UL) & 983040U)) << 24) | (((tmp_57 | (((unsigned int)port_num << 16UL) & 983040U)) << 8) & 16711680U)) | (((tmp_59 | (((unsigned int)port_num << 16UL) & 983040U)) >> 8) & 65280U)) | ((tmp_61 | (((unsigned int)port_num << 16UL) & 983040U)) >> 24);
    }
    else {
      __u32 tmp_64;
      unsigned int tmp_63;
      
#line 206 
      if (0 != 0) 
#line 206 
                  tmp_63 = ((((*((__be32 *)in + 2U) << 24) | ((*((__be32 *)in + 2U) << 8) & 16711680U)) | ((*((__be32 *)in + 2U) >> 8) & 65280U)) | (*((__be32 *)in + 2U) >> 24)) & 4293984255U;
      else {
        __u32 tmp_62;
        
#line 206 
        tmp_62 = __fswab32(*((__be32 *)in + 2U));
        
#line 206 
        tmp_63 = tmp_62 & 4293984255U;
      }
      
#line 206 
      ;
      
#line 206 
      tmp_64 = __fswab32(tmp_63 | (((unsigned int)port_num << 16UL) & 983040U));
      
#line 206 
      *((__be32 *)in + 2U) = tmp_64;
    }
  }
  else ;
  
#line 208 
  err = mlx5_cmd_exec(dev,in,in_sz,out,out_sz);
  
#line 209 
  if (err != 0) 
#line 210 
                goto out; else ;
  
#line 212 
  err = mlx5_cmd_status_to_err_v2(out);
  
#line 213 
  if (err != 0) 
#line 214 
                goto out; else ;
  
#line 216 
  pkarr = out + 16U;
  
#line 217 
  i = 0;
  
#line 217 
  goto ldv_53205;
  ldv_53204: 
#line 218 
  ;
  {
    unsigned int tmp_68;
    
#line 218 
    if (0 != 0) 
#line 218 
                tmp_68 = ((((*((__be32 *)pkarr) << 24) | ((*((__be32 *)pkarr) << 8) & 16711680U)) | ((*((__be32 *)pkarr) >> 8) & 65280U)) | (*((__be32 *)pkarr) >> 24)) & 65535U;
    else {
      __u32 tmp_67;
      
#line 218 
      tmp_67 = __fswab32(*((__be32 *)pkarr));
      
#line 218 
      tmp_68 = tmp_67 & 65535U;
    }
    
#line 218 
    u32 ___t = tmp_68;
    {
      
#line 218 
      struct _ddebug descriptor = {.modname = "mlx5_core", .function = "mlx5_query_hca_vport_pkey", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/vport.c", .format = "pkey", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))218U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 218 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 218 
                                                          __dynamic_pr_debug(& descriptor,"pkey",___t); else ;
    }
    
#line 218 
    tmp_69 = ___t;
  }
  
#line 218 
  *pkey = (unsigned short)tmp_69;
  
#line 217 
  i += 1;
  
#line 217 
  pkey += 1;
  
#line 217 
  pkarr += 4U;
  ldv_53205: 
#line 218 
  ;
  
#line 217 
  if (i < nout) 
#line 219 
                goto ldv_53204; else 
#line 222 
                                     goto ldv_53206;
  ldv_53206: 
#line 223 
  ;
  out: 
#line 220 
  ;
  
#line 221 
  kfree((void const *)in);
  
#line 222 
  kfree((void const *)out);
  
#line 223 
  __retres = err;
  return_label: 
#line 223 
                return __retres;
}


#line 225  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/vport.c"
static char const __kstrtab_mlx5_query_hca_vport_pkey[26U] = {(char)'m', (char)'l', (char)'x', (char)'5', (char)'_', (char)'q', (char)'u', (char)'e', (char)'r', (char)'y', (char)'_', (char)'h', (char)'c', (char)'a', (char)'_', (char)'v', (char)'p', (char)'o', (char)'r', (char)'t', (char)'_', (char)'p', (char)'k', (char)'e', (char)'y', (char)'\000'};

#line 225 
struct kernel_symbol const __ksymtab_mlx5_query_hca_vport_pkey;


#line 225  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/vport.c"
struct kernel_symbol const __ksymtab_mlx5_query_hca_vport_pkey = {.value = (unsigned long)(& mlx5_query_hca_vport_pkey), .name = (char const *)(& __kstrtab_mlx5_query_hca_vport_pkey)};

#line 246 
void __compiletime_assert_246(void);


#line 250 
void __compiletime_assert_250(void);


#line 251 
void __compiletime_assert_251(void);


#line 227  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/vport.c"
int mlx5_query_hca_vport_context(struct mlx5_core_dev *dev, u8 other_vport, u8 port_num, u16 vf_num, struct mlx5_hca_vport_context *rep)
{
  int __retres;
  int in[4U];
  int is_group_manager;
  void *out;
  void *ctx;
  int err;
  unsigned int tmp_0;
  int tmp_50;
  u32 tmp_53;
  u32 tmp_56;
  u32 tmp_59;
  u32 tmp_62;
  u32 tmp_65;
  u32 tmp_68;
  u32 tmp_71;
  u32 tmp_74;
  u64 tmp_77;
  u64 tmp_80;
  u32 tmp_83;
  u32 tmp_86;
  u32 tmp_89;
  u32 tmp_92;
  u32 tmp_95;
  u32 tmp_98;
  u32 tmp_101;
  u32 tmp_104;
  u32 tmp_107;
  u32 tmp_110;
  u32 tmp_113;
  u32 tmp_116;
  u32 tmp_119;
  u64 tmp_122;
  
#line 232 
  int out_sz = 528;
  
#line 239 
  if (0 != 0) 
#line 239 
              tmp_0 = ((((*((__be32 *)(& dev->hca_caps_cur[0]) + 13U) << 24) | ((*((__be32 *)(& dev->hca_caps_cur[0]) + 13U) << 8) & 16711680U)) | ((*((__be32 *)(& dev->hca_caps_cur[0]) + 13U) >> 8) & 65280U)) | (*((__be32 *)(& dev->hca_caps_cur[0]) + 13U) >> 24)) >> 31UL;
  else {
    __u32 tmp;
    
#line 239 
    tmp = __fswab32(*((__be32 *)(& dev->hca_caps_cur[0]) + 13U));
    
#line 239 
    tmp_0 = tmp >> 31UL;
  }
  
#line 239 
  is_group_manager = (int)tmp_0;
  
#line 241 
  memset((void *)(& in),0,16UL);
  
#line 242 
  out = kzalloc_12((unsigned long)out_sz,208U);
  
#line 243 
  if (out == (void *)0) {
    
#line 244 
    __retres = -12;
    
#line 244 
    goto return_label;
  }
  else ;
  {
    
#line 246 
    bool __cond = (_Bool)0;
    
#line 246 
    if ((int)__cond != 0) 
#line 246 
                          __compiletime_assert_246(); else ;
  }
  
#line 246 
  if (0 != 0) {
    unsigned int tmp_4;
    unsigned int tmp_6;
    
#line 246 
    if (0 != 0) 
#line 246 
                tmp_4 = ((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) << 24;
    else {
      __u32 tmp_3;
      
#line 246 
      tmp_3 = __fswab32(*((__be32 *)(& in)));
      
#line 246 
      tmp_4 = tmp_3 << 24;
    }
    
#line 246 
    if (0 != 0) 
#line 246 
                tmp_6 = (((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) << 8) & 16711680U;
    else {
      __u32 tmp_5;
      
#line 246 
      tmp_5 = __fswab32(*((__be32 *)(& in)));
      
#line 246 
      tmp_6 = (tmp_5 << 8) & 16711680U;
    }
    
#line 246 
    *((__be32 *)(& in)) = (tmp_4 | tmp_6) | 25095U;
  }
  else {
    __u32 tmp_9;
    unsigned int tmp_8;
    
#line 246 
    if (0 != 0) 
#line 246 
                tmp_8 = (((((*((__be32 *)(& in)) << 24) | ((*((__be32 *)(& in)) << 8) & 16711680U)) | ((*((__be32 *)(& in)) >> 8) & 65280U)) | (*((__be32 *)(& in)) >> 24)) & 65535U) | 123863040U;
    else {
      __u32 tmp_7;
      
#line 246 
      tmp_7 = __fswab32(*((__be32 *)(& in)));
      
#line 246 
      tmp_8 = (tmp_7 & 65535U) | 123863040U;
    }
    
#line 246 
    tmp_9 = __fswab32(tmp_8);
    
#line 246 
    *((__be32 *)(& in)) = tmp_9;
  }
  
#line 248 
  if ((unsigned int)other_vport != 0U) 
    
#line 249 
    if (is_group_manager != 0) {
      {
        
#line 250 
        bool __cond_0 = (_Bool)0;
        
#line 250 
        if ((int)__cond_0 != 0) 
#line 250 
                                __compiletime_assert_250(); else ;
      }
      
#line 250 
      if (0 != 0) {
        unsigned int tmp_13;
        unsigned int tmp_15;
        unsigned int tmp_17;
        unsigned int tmp_19;
        
#line 250 
        if (0 != 0) 
#line 250 
                    tmp_13 = ((((*((__be32 *)(& in) + 2U) << 24) | ((*((__be32 *)(& in) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 2U) >> 24)) << 24;
        else {
          __u32 tmp_12;
          
#line 250 
          tmp_12 = __fswab32(*((__be32 *)(& in) + 2U));
          
#line 250 
          tmp_13 = tmp_12 << 24;
        }
        
#line 250 
        if (0 != 0) 
#line 250 
                    tmp_15 = (((((*((__be32 *)(& in) + 2U) << 24) | ((*((__be32 *)(& in) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 2U) >> 24)) << 8) & 16711680U;
        else {
          __u32 tmp_14;
          
#line 250 
          tmp_14 = __fswab32(*((__be32 *)(& in) + 2U));
          
#line 250 
          tmp_15 = (tmp_14 << 8) & 16711680U;
        }
        
#line 250 
        if (0 != 0) 
#line 250 
                    tmp_17 = (((((*((__be32 *)(& in) + 2U) << 24) | ((*((__be32 *)(& in) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 2U) >> 24)) >> 8) & 65280U;
        else {
          __u32 tmp_16;
          
#line 250 
          tmp_16 = __fswab32(*((__be32 *)(& in) + 2U));
          
#line 250 
          tmp_17 = (tmp_16 >> 8) & 65280U;
        }
        
#line 250 
        if (0 != 0) 
#line 250 
                    tmp_19 = (((((*((__be32 *)(& in) + 2U) << 24) | ((*((__be32 *)(& in) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 2U) >> 24)) >> 24) | 128U;
        else {
          __u32 tmp_18;
          
#line 250 
          tmp_18 = __fswab32(*((__be32 *)(& in) + 2U));
          
#line 250 
          tmp_19 = (tmp_18 >> 24) | 128U;
        }
        
#line 250 
        *((__be32 *)(& in) + 2U) = ((tmp_13 | tmp_15) | tmp_17) | tmp_19;
      }
      else {
        __u32 tmp_22;
        unsigned int tmp_21;
        
#line 250 
        if (0 != 0) 
#line 250 
                    tmp_21 = ((((*((__be32 *)(& in) + 2U) << 24) | ((*((__be32 *)(& in) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 2U) >> 24)) | 2147483648U;
        else {
          __u32 tmp_20;
          
#line 250 
          tmp_20 = __fswab32(*((__be32 *)(& in) + 2U));
          
#line 250 
          tmp_21 = tmp_20 | 2147483648U;
        }
        
#line 250 
        tmp_22 = __fswab32(tmp_21);
        
#line 250 
        *((__be32 *)(& in) + 2U) = tmp_22;
      }
      {
        
#line 251 
        bool __cond_1 = (_Bool)0;
        
#line 251 
        if ((int)__cond_1 != 0) 
#line 251 
                                __compiletime_assert_251(); else ;
      }
      
#line 251 
      if (0 != 0) {
        unsigned int tmp_26;
        unsigned int tmp_28;
        unsigned int tmp_30;
        unsigned int tmp_32;
        
#line 251 
        if (0 != 0) 
#line 251 
                    tmp_26 = ((((*((__be32 *)(& in) + 2U) << 24) | ((*((__be32 *)(& in) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 2U) >> 24)) & 4294901760U;
        else {
          __u32 tmp_25;
          
#line 251 
          tmp_25 = __fswab32(*((__be32 *)(& in) + 2U));
          
#line 251 
          tmp_26 = tmp_25 & 4294901760U;
        }
        
#line 251 
        if (0 != 0) 
#line 251 
                    tmp_28 = ((((*((__be32 *)(& in) + 2U) << 24) | ((*((__be32 *)(& in) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 2U) >> 24)) & 4294901760U;
        else {
          __u32 tmp_27;
          
#line 251 
          tmp_27 = __fswab32(*((__be32 *)(& in) + 2U));
          
#line 251 
          tmp_28 = tmp_27 & 4294901760U;
        }
        
#line 251 
        if (0 != 0) 
#line 251 
                    tmp_30 = ((((*((__be32 *)(& in) + 2U) << 24) | ((*((__be32 *)(& in) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 2U) >> 24)) & 4294901760U;
        else {
          __u32 tmp_29;
          
#line 251 
          tmp_29 = __fswab32(*((__be32 *)(& in) + 2U));
          
#line 251 
          tmp_30 = tmp_29 & 4294901760U;
        }
        
#line 251 
        if (0 != 0) 
#line 251 
                    tmp_32 = ((((*((__be32 *)(& in) + 2U) << 24) | ((*((__be32 *)(& in) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 2U) >> 24)) & 4294901760U;
        else {
          __u32 tmp_31;
          
#line 251 
          tmp_31 = __fswab32(*((__be32 *)(& in) + 2U));
          
#line 251 
          tmp_32 = tmp_31 & 4294901760U;
        }
        
#line 251 
        *((__be32 *)(& in) + 2U) = ((((tmp_26 | (unsigned int)vf_num) << 24) | (((tmp_28 | (unsigned int)vf_num) << 8) & 16711680U)) | (((tmp_30 | (unsigned int)vf_num) >> 8) & 65280U)) | ((tmp_32 | (unsigned int)vf_num) >> 24);
      }
      else {
        __u32 tmp_35;
        unsigned int tmp_34;
        
#line 251 
        if (0 != 0) 
#line 251 
                    tmp_34 = ((((*((__be32 *)(& in) + 2U) << 24) | ((*((__be32 *)(& in) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 2U) >> 24)) & 4294901760U;
        else {
          __u32 tmp_33;
          
#line 251 
          tmp_33 = __fswab32(*((__be32 *)(& in) + 2U));
          
#line 251 
          tmp_34 = tmp_33 & 4294901760U;
        }
        
#line 251 
        ;
        
#line 251 
        tmp_35 = __fswab32(tmp_34 | (unsigned int)vf_num);
        
#line 251 
        *((__be32 *)(& in) + 2U) = tmp_35;
      }
    }
    else {
      
#line 253 
      err = -1;
      
#line 254 
      goto ex;
    }
  else ;
  
#line 258 
  if (0 != 0) 
#line 258 
              tmp_50 = (((((*((__be32 *)(& dev->hca_caps_cur[0]) + 13U) << 24) | ((*((__be32 *)(& dev->hca_caps_cur[0]) + 13U) << 8) & 16711680U)) | ((*((__be32 *)(& dev->hca_caps_cur[0]) + 13U) >> 8) & 65280U)) | (*((__be32 *)(& dev->hca_caps_cur[0]) + 13U) >> 24)) & 255U) == 2U;
  else {
    __u32 tmp_49;
    
#line 258 
    tmp_49 = __fswab32(*((__be32 *)(& dev->hca_caps_cur[0]) + 13U));
    
#line 258 
    tmp_50 = (tmp_49 & 255U) == 2U;
  }
  
#line 258 
  if (tmp_50) {
    {
      
#line 259 
      bool __cond_2 = (_Bool)0;
      
#line 259 
      if ((int)__cond_2 != 0) 
#line 259 
                              __compiletime_assert_259(); else ;
    }
    
#line 259 
    if (0 != 0) {
      unsigned int tmp_39;
      unsigned int tmp_41;
      unsigned int tmp_43;
      unsigned int tmp_45;
      
#line 259 
      if (0 != 0) 
#line 259 
                  tmp_39 = ((((*((__be32 *)(& in) + 2U) << 24) | ((*((__be32 *)(& in) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 2U) >> 24)) & 4293984255U;
      else {
        __u32 tmp_38;
        
#line 259 
        tmp_38 = __fswab32(*((__be32 *)(& in) + 2U));
        
#line 259 
        tmp_39 = tmp_38 & 4293984255U;
      }
      
#line 259 
      if (0 != 0) 
#line 259 
                  tmp_41 = ((((*((__be32 *)(& in) + 2U) << 24) | ((*((__be32 *)(& in) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 2U) >> 24)) & 4293984255U;
      else {
        __u32 tmp_40;
        
#line 259 
        tmp_40 = __fswab32(*((__be32 *)(& in) + 2U));
        
#line 259 
        tmp_41 = tmp_40 & 4293984255U;
      }
      
#line 259 
      if (0 != 0) 
#line 259 
                  tmp_43 = ((((*((__be32 *)(& in) + 2U) << 24) | ((*((__be32 *)(& in) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 2U) >> 24)) & 4293984255U;
      else {
        __u32 tmp_42;
        
#line 259 
        tmp_42 = __fswab32(*((__be32 *)(& in) + 2U));
        
#line 259 
        tmp_43 = tmp_42 & 4293984255U;
      }
      
#line 259 
      if (0 != 0) 
#line 259 
                  tmp_45 = ((((*((__be32 *)(& in) + 2U) << 24) | ((*((__be32 *)(& in) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 2U) >> 24)) & 4293984255U;
      else {
        __u32 tmp_44;
        
#line 259 
        tmp_44 = __fswab32(*((__be32 *)(& in) + 2U));
        
#line 259 
        tmp_45 = tmp_44 & 4293984255U;
      }
      
#line 259 
      *((__be32 *)(& in) + 2U) = ((((tmp_39 | (((unsigned int)port_num << 16UL) & 983040U)) << 24) | (((tmp_41 | (((unsigned int)port_num << 16UL) & 983040U)) << 8) & 16711680U)) | (((tmp_43 | (((unsigned int)port_num << 16UL) & 983040U)) >> 8) & 65280U)) | ((tmp_45 | (((unsigned int)port_num << 16UL) & 983040U)) >> 24);
    }
    else {
      __u32 tmp_48;
      unsigned int tmp_47;
      
#line 259 
      if (0 != 0) 
#line 259 
                  tmp_47 = ((((*((__be32 *)(& in) + 2U) << 24) | ((*((__be32 *)(& in) + 2U) << 8) & 16711680U)) | ((*((__be32 *)(& in) + 2U) >> 8) & 65280U)) | (*((__be32 *)(& in) + 2U) >> 24)) & 4293984255U;
      else {
        __u32 tmp_46;
        
#line 259 
        tmp_46 = __fswab32(*((__be32 *)(& in) + 2U));
        
#line 259 
        tmp_47 = tmp_46 & 4293984255U;
      }
      
#line 259 
      ;
      
#line 259 
      tmp_48 = __fswab32(tmp_47 | (((unsigned int)port_num << 16UL) & 983040U));
      
#line 259 
      *((__be32 *)(& in) + 2U) = tmp_48;
    }
  }
  else ;
  
#line 261 
  err = mlx5_cmd_exec(dev,(void *)(& in),16,out,out_sz);
  
#line 262 
  if (err != 0) 
#line 263 
                goto ex; else ;
  
#line 264 
  err = mlx5_cmd_status_to_err_v2(out);
  
#line 265 
  if (err != 0) 
#line 266 
                goto ex; else ;
  
#line 268 
  ctx = out + 16U;
  {
    unsigned int tmp_52;
    
#line 269 
    if (0 != 0) 
#line 269 
                tmp_52 = (((*((__be32 *)ctx) << 24) | ((*((__be32 *)ctx) << 8) & 16711680U)) | ((*((__be32 *)ctx) >> 8) & 65280U)) | (*((__be32 *)ctx) >> 24); else 
                                                                    
#line 269 
                                                                    tmp_52 = __fswab32(*((__be32 *)ctx));
    
#line 269 
    u32 ___t = tmp_52;
    {
      
#line 269 
      struct _ddebug descriptor = {.modname = "mlx5_core", .function = "mlx5_query_hca_vport_context", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/vport.c", .format = "field_select", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))269U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 269 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 269 
                                                          __dynamic_pr_debug(& descriptor,"field_select",___t); else ;
    }
    
#line 269 
    tmp_53 = ___t;
  }
  
#line 269 
  rep->field_select = tmp_53;
  {
    unsigned int tmp_55;
    
#line 270 
    if (0 != 0) 
#line 270 
                tmp_55 = ((((*((__be32 *)ctx + 8U) << 24) | ((*((__be32 *)ctx + 8U) << 8) & 16711680U)) | ((*((__be32 *)ctx + 8U) >> 8) & 65280U)) | (*((__be32 *)ctx + 8U) >> 24)) >> 31UL;
    else {
      __u32 tmp_54;
      
#line 270 
      tmp_54 = __fswab32(*((__be32 *)ctx + 8U));
      
#line 270 
      tmp_55 = tmp_54 >> 31UL;
    }
    
#line 270 
    u32 ___t_0 = tmp_55;
    {
      
#line 270 
      struct _ddebug descriptor_0 = {.modname = "mlx5_core", .function = "mlx5_query_hca_vport_context", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/vport.c", .format = "sm_virt_aware", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))270U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 270 
      if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 270 
                                                            __dynamic_pr_debug(& descriptor_0,"sm_virt_aware",___t_0); else ;
    }
    
#line 270 
    tmp_56 = ___t_0;
  }
  
#line 270 
  rep->sm_virt_aware = (_Bool)(tmp_56 != 0U);
  {
    unsigned int tmp_58;
    
#line 271 
    if (0 != 0) 
#line 271 
                tmp_58 = (((((*((__be32 *)ctx + 8U) << 24) | ((*((__be32 *)ctx + 8U) << 8) & 16711680U)) | ((*((__be32 *)ctx + 8U) >> 8) & 65280U)) | (*((__be32 *)ctx + 8U) >> 24)) >> 30UL) & 1U;
    else {
      __u32 tmp_57;
      
#line 271 
      tmp_57 = __fswab32(*((__be32 *)ctx + 8U));
      
#line 271 
      tmp_58 = (tmp_57 >> 30UL) & 1U;
    }
    
#line 271 
    u32 ___t_1 = tmp_58;
    {
      
#line 271 
      struct _ddebug descriptor_1 = {.modname = "mlx5_core", .function = "mlx5_query_hca_vport_context", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/vport.c", .format = "has_smi", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))271U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 271 
      if ((long)(((int)descriptor_1.flags & 1) != 0) != 0L) 
#line 271 
                                                            __dynamic_pr_debug(& descriptor_1,"has_smi",___t_1); else ;
    }
    
#line 271 
    tmp_59 = ___t_1;
  }
  
#line 271 
  rep->has_smi = (_Bool)(tmp_59 != 0U);
  {
    unsigned int tmp_61;
    
#line 272 
    if (0 != 0) 
#line 272 
                tmp_61 = (((((*((__be32 *)ctx + 8U) << 24) | ((*((__be32 *)ctx + 8U) << 8) & 16711680U)) | ((*((__be32 *)ctx + 8U) >> 8) & 65280U)) | (*((__be32 *)ctx + 8U) >> 24)) >> 29UL) & 1U;
    else {
      __u32 tmp_60;
      
#line 272 
      tmp_60 = __fswab32(*((__be32 *)ctx + 8U));
      
#line 272 
      tmp_61 = (tmp_60 >> 29UL) & 1U;
    }
    
#line 272 
    u32 ___t_2 = tmp_61;
    {
      
#line 272 
      struct _ddebug descriptor_2 = {.modname = "mlx5_core", .function = "mlx5_query_hca_vport_context", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/vport.c", .format = "has_raw", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))272U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 272 
      if ((long)(((int)descriptor_2.flags & 1) != 0) != 0L) 
#line 272 
                                                            __dynamic_pr_debug(& descriptor_2,"has_raw",___t_2); else ;
    }
    
#line 272 
    tmp_62 = ___t_2;
  }
  
#line 272 
  rep->has_raw = (_Bool)(tmp_62 != 0U);
  {
    unsigned int tmp_64;
    
#line 273 
    if (0 != 0) 
#line 273 
                tmp_64 = (((((*((__be32 *)ctx + 8U) << 24) | ((*((__be32 *)ctx + 8U) << 8) & 16711680U)) | ((*((__be32 *)ctx + 8U) >> 8) & 65280U)) | (*((__be32 *)ctx + 8U) >> 24)) >> 8UL) & 15U;
    else {
      __u32 tmp_63;
      
#line 273 
      tmp_63 = __fswab32(*((__be32 *)ctx + 8U));
      
#line 273 
      tmp_64 = (tmp_63 >> 8UL) & 15U;
    }
    
#line 273 
    u32 ___t_3 = tmp_64;
    {
      
#line 273 
      struct _ddebug descriptor_3 = {.modname = "mlx5_core", .function = "mlx5_query_hca_vport_context", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/vport.c", .format = "vport_state_policy", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))273U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 273 
      if ((long)(((int)descriptor_3.flags & 1) != 0) != 0L) 
#line 273 
                                                            __dynamic_pr_debug(& descriptor_3,"vport_state_policy",___t_3); else ;
    }
    
#line 273 
    tmp_65 = ___t_3;
  }
  
#line 273 
  rep->policy = (enum port_state_policy)tmp_65;
  {
    unsigned int tmp_67;
    
#line 274 
    if (0 != 0) 
#line 274 
                tmp_67 = (((((*((__be32 *)ctx + 8U) << 24) | ((*((__be32 *)ctx + 8U) << 8) & 16711680U)) | ((*((__be32 *)ctx + 8U) >> 8) & 65280U)) | (*((__be32 *)ctx + 8U) >> 24)) >> 12UL) & 15U;
    else {
      __u32 tmp_66;
      
#line 274 
      tmp_66 = __fswab32(*((__be32 *)ctx + 8U));
      
#line 274 
      tmp_67 = (tmp_66 >> 12UL) & 15U;
    }
    
#line 274 
    u32 ___t_4 = tmp_67;
    {
      
#line 274 
      struct _ddebug descriptor_4 = {.modname = "mlx5_core", .function = "mlx5_query_hca_vport_context", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/vport.c", .format = "port_physical_state", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))275U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 274 
      if ((long)(((int)descriptor_4.flags & 1) != 0) != 0L) 
#line 274 
                                                            __dynamic_pr_debug(& descriptor_4,"port_physical_state",___t_4); else ;
    }
    
#line 274 
    tmp_68 = ___t_4;
  }
  
#line 274 
  rep->phys_state = (enum phy_port_state)tmp_68;
  {
    unsigned int tmp_70;
    
#line 276 
    if (0 != 0) 
#line 276 
                tmp_70 = ((((*((__be32 *)ctx + 8U) << 24) | ((*((__be32 *)ctx + 8U) << 8) & 16711680U)) | ((*((__be32 *)ctx + 8U) >> 8) & 65280U)) | (*((__be32 *)ctx + 8U) >> 24)) & 15U;
    else {
      __u32 tmp_69;
      
#line 276 
      tmp_69 = __fswab32(*((__be32 *)ctx + 8U));
      
#line 276 
      tmp_70 = tmp_69 & 15U;
    }
    
#line 276 
    u32 ___t_5 = tmp_70;
    {
      
#line 276 
      struct _ddebug descriptor_5 = {.modname = "mlx5_core", .function = "mlx5_query_hca_vport_context", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/vport.c", .format = "vport_state", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))276U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 276 
      if ((long)(((int)descriptor_5.flags & 1) != 0) != 0L) 
#line 276 
                                                            __dynamic_pr_debug(& descriptor_5,"vport_state",___t_5); else ;
    }
    
#line 276 
    tmp_71 = ___t_5;
  }
  
#line 276 
  rep->vport_state = (enum ib_port_state)tmp_71;
  {
    unsigned int tmp_73;
    
#line 277 
    if (0 != 0) 
#line 277 
                tmp_73 = (((((*((__be32 *)ctx + 8U) << 24) | ((*((__be32 *)ctx + 8U) << 8) & 16711680U)) | ((*((__be32 *)ctx + 8U) >> 8) & 65280U)) | (*((__be32 *)ctx + 8U) >> 24)) >> 12UL) & 15U;
    else {
      __u32 tmp_72;
      
#line 277 
      tmp_72 = __fswab32(*((__be32 *)ctx + 8U));
      
#line 277 
      tmp_73 = (tmp_72 >> 12UL) & 15U;
    }
    
#line 277 
    u32 ___t_6 = tmp_73;
    {
      
#line 277 
      struct _ddebug descriptor_6 = {.modname = "mlx5_core", .function = "mlx5_query_hca_vport_context", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/vport.c", .format = "port_physical_state", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))278U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 277 
      if ((long)(((int)descriptor_6.flags & 1) != 0) != 0L) 
#line 277 
                                                            __dynamic_pr_debug(& descriptor_6,"port_physical_state",___t_6); else ;
    }
    
#line 277 
    tmp_74 = ___t_6;
  }
  
#line 277 
  rep->port_physical_state = (unsigned char)tmp_74;
  {
    unsigned long long tmp_76;
    
#line 279 
    if (0 != 0) 
#line 279 
                tmp_76 = (((((((*((__be64 *)ctx + 6U) << 56) | ((*((__be64 *)ctx + 6U) << 40) & 71776119061217280ULL)) | ((*((__be64 *)ctx + 6U) << 24) & 280375465082880ULL)) | ((*((__be64 *)ctx + 6U) << 8) & 1095216660480ULL)) | ((*((__be64 *)ctx + 6U) >> 8) & 4278190080ULL)) | ((*((__be64 *)ctx + 6U) >> 24) & 16711680ULL)) | ((*((__be64 *)ctx + 6U) >> 40) & 65280ULL)) | (*((__be64 *)ctx + 6U) >> 56); else 
                                                                    
#line 279 
                                                                    tmp_76 = __fswab64(*((__be64 *)ctx + 6U));
    
#line 279 
    u64 ___t_7 = tmp_76;
    {
      
#line 279 
      struct _ddebug descriptor_7 = {.modname = "mlx5_core", .function = "mlx5_query_hca_vport_context", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/vport.c", .format = "port_guid", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))279U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 279 
      if ((long)(((int)descriptor_7.flags & 1) != 0) != 0L) 
#line 279 
                                                            __dynamic_pr_debug(& descriptor_7,"port_guid",___t_7); else ;
    }
    
#line 279 
    tmp_77 = ___t_7;
  }
  
#line 279 
  rep->port_guid = tmp_77;
  {
    unsigned long long tmp_79;
    
#line 280 
    if (0 != 0) 
#line 280 
                tmp_79 = (((((((*((__be64 *)ctx + 7U) << 56) | ((*((__be64 *)ctx + 7U) << 40) & 71776119061217280ULL)) | ((*((__be64 *)ctx + 7U) << 24) & 280375465082880ULL)) | ((*((__be64 *)ctx + 7U) << 8) & 1095216660480ULL)) | ((*((__be64 *)ctx + 7U) >> 8) & 4278190080ULL)) | ((*((__be64 *)ctx + 7U) >> 24) & 16711680ULL)) | ((*((__be64 *)ctx + 7U) >> 40) & 65280ULL)) | (*((__be64 *)ctx + 7U) >> 56); else 
                                                                    
#line 280 
                                                                    tmp_79 = __fswab64(*((__be64 *)ctx + 7U));
    
#line 280 
    u64 ___t_8 = tmp_79;
    {
      
#line 280 
      struct _ddebug descriptor_8 = {.modname = "mlx5_core", .function = "mlx5_query_hca_vport_context", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/vport.c", .format = "node_guid", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))280U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 280 
      if ((long)(((int)descriptor_8.flags & 1) != 0) != 0L) 
#line 280 
                                                            __dynamic_pr_debug(& descriptor_8,"node_guid",___t_8); else ;
    }
    
#line 280 
    tmp_80 = ___t_8;
  }
  
#line 280 
  rep->node_guid = tmp_80;
  {
    unsigned int tmp_82;
    
#line 281 
    if (0 != 0) 
#line 281 
                tmp_82 = (((*((__be32 *)ctx + 16U) << 24) | ((*((__be32 *)ctx + 16U) << 8) & 16711680U)) | ((*((__be32 *)ctx + 16U) >> 8) & 65280U)) | (*((__be32 *)ctx + 16U) >> 24); else 
                                                                    
#line 281 
                                                                    tmp_82 = __fswab32(*((__be32 *)ctx + 16U));
    
#line 281 
    u32 ___t_9 = tmp_82;
    {
      
#line 281 
      struct _ddebug descriptor_9 = {.modname = "mlx5_core", .function = "mlx5_query_hca_vport_context", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/vport.c", .format = "cap_mask1", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))281U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 281 
      if ((long)(((int)descriptor_9.flags & 1) != 0) != 0L) 
#line 281 
                                                            __dynamic_pr_debug(& descriptor_9,"cap_mask1",___t_9); else ;
    }
    
#line 281 
    tmp_83 = ___t_9;
  }
  
#line 281 
  rep->cap_mask1 = tmp_83;
  {
    unsigned int tmp_85;
    
#line 282 
    if (0 != 0) 
#line 282 
                tmp_85 = (((*((__be32 *)ctx + 17U) << 24) | ((*((__be32 *)ctx + 17U) << 8) & 16711680U)) | ((*((__be32 *)ctx + 17U) >> 8) & 65280U)) | (*((__be32 *)ctx + 17U) >> 24); else 
                                                                    
#line 282 
                                                                    tmp_85 = __fswab32(*((__be32 *)ctx + 17U));
    
#line 282 
    u32 ___t_10 = tmp_85;
    {
      
#line 282 
      struct _ddebug descriptor_10 = {.modname = "mlx5_core", .function = "mlx5_query_hca_vport_context", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/vport.c", .format = "cap_mask1_field_select", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))283U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 282 
      if ((long)(((int)descriptor_10.flags & 1) != 0) != 0L) 
#line 282 
                                                             __dynamic_pr_debug(& descriptor_10,"cap_mask1_field_select",___t_10); else ;
    }
    
#line 282 
    tmp_86 = ___t_10;
  }
  
#line 282 
  rep->cap_mask1_perm = tmp_86;
  {
    unsigned int tmp_88;
    
#line 284 
    if (0 != 0) 
#line 284 
                tmp_88 = (((*((__be32 *)ctx + 18U) << 24) | ((*((__be32 *)ctx + 18U) << 8) & 16711680U)) | ((*((__be32 *)ctx + 18U) >> 8) & 65280U)) | (*((__be32 *)ctx + 18U) >> 24); else 
                                                                    
#line 284 
                                                                    tmp_88 = __fswab32(*((__be32 *)ctx + 18U));
    
#line 284 
    u32 ___t_11 = tmp_88;
    {
      
#line 284 
      struct _ddebug descriptor_11 = {.modname = "mlx5_core", .function = "mlx5_query_hca_vport_context", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/vport.c", .format = "cap_mask2", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))284U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 284 
      if ((long)(((int)descriptor_11.flags & 1) != 0) != 0L) 
#line 284 
                                                             __dynamic_pr_debug(& descriptor_11,"cap_mask2",___t_11); else ;
    }
    
#line 284 
    tmp_89 = ___t_11;
  }
  
#line 284 
  rep->cap_mask2 = tmp_89;
  {
    unsigned int tmp_91;
    
#line 285 
    if (0 != 0) 
#line 285 
                tmp_91 = (((*((__be32 *)ctx + 19U) << 24) | ((*((__be32 *)ctx + 19U) << 8) & 16711680U)) | ((*((__be32 *)ctx + 19U) >> 8) & 65280U)) | (*((__be32 *)ctx + 19U) >> 24); else 
                                                                    
#line 285 
                                                                    tmp_91 = __fswab32(*((__be32 *)ctx + 19U));
    
#line 285 
    u32 ___t_12 = tmp_91;
    {
      
#line 285 
      struct _ddebug descriptor_12 = {.modname = "mlx5_core", .function = "mlx5_query_hca_vport_context", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/vport.c", .format = "cap_mask2_field_select", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))286U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 285 
      if ((long)(((int)descriptor_12.flags & 1) != 0) != 0L) 
#line 285 
                                                             __dynamic_pr_debug(& descriptor_12,"cap_mask2_field_select",___t_12); else ;
    }
    
#line 285 
    tmp_92 = ___t_12;
  }
  
#line 285 
  rep->cap_mask2_perm = tmp_92;
  {
    unsigned int tmp_94;
    
#line 287 
    if (0 != 0) 
#line 287 
                tmp_94 = ((((*((__be32 *)ctx + 24U) << 24) | ((*((__be32 *)ctx + 24U) << 8) & 16711680U)) | ((*((__be32 *)ctx + 24U) >> 8) & 65280U)) | (*((__be32 *)ctx + 24U) >> 24)) >> 16UL;
    else {
      __u32 tmp_93;
      
#line 287 
      tmp_93 = __fswab32(*((__be32 *)ctx + 24U));
      
#line 287 
      tmp_94 = tmp_93 >> 16UL;
    }
    
#line 287 
    u32 ___t_13 = tmp_94;
    {
      
#line 287 
      struct _ddebug descriptor_13 = {.modname = "mlx5_core", .function = "mlx5_query_hca_vport_context", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/vport.c", .format = "lid", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))287U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 287 
      if ((long)(((int)descriptor_13.flags & 1) != 0) != 0L) 
#line 287 
                                                             __dynamic_pr_debug(& descriptor_13,"lid",___t_13); else ;
    }
    
#line 287 
    tmp_95 = ___t_13;
  }
  
#line 287 
  rep->lid = (unsigned short)tmp_95;
  {
    unsigned int tmp_97;
    
#line 288 
    if (0 != 0) 
#line 288 
                tmp_97 = (((((*((__be32 *)ctx + 24U) << 24) | ((*((__be32 *)ctx + 24U) << 8) & 16711680U)) | ((*((__be32 *)ctx + 24U) >> 8) & 65280U)) | (*((__be32 *)ctx + 24U) >> 24)) >> 8UL) & 15U;
    else {
      __u32 tmp_96;
      
#line 288 
      tmp_96 = __fswab32(*((__be32 *)ctx + 24U));
      
#line 288 
      tmp_97 = (tmp_96 >> 8UL) & 15U;
    }
    
#line 288 
    u32 ___t_14 = tmp_97;
    {
      
#line 288 
      struct _ddebug descriptor_14 = {.modname = "mlx5_core", .function = "mlx5_query_hca_vport_context", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/vport.c", .format = "init_type_reply", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))289U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 288 
      if ((long)(((int)descriptor_14.flags & 1) != 0) != 0L) 
#line 288 
                                                             __dynamic_pr_debug(& descriptor_14,"init_type_reply",___t_14); else ;
    }
    
#line 288 
    tmp_98 = ___t_14;
  }
  
#line 288 
  rep->init_type_reply = (unsigned char)tmp_98;
  {
    unsigned int tmp_100;
    
#line 290 
    if (0 != 0) 
#line 290 
                tmp_100 = (((((*((__be32 *)ctx + 24U) << 24) | ((*((__be32 *)ctx + 24U) << 8) & 16711680U)) | ((*((__be32 *)ctx + 24U) >> 8) & 65280U)) | (*((__be32 *)ctx + 24U) >> 24)) >> 5UL) & 7U;
    else {
      __u32 tmp_99;
      
#line 290 
      tmp_99 = __fswab32(*((__be32 *)ctx + 24U));
      
#line 290 
      tmp_100 = (tmp_99 >> 5UL) & 7U;
    }
    
#line 290 
    u32 ___t_15 = tmp_100;
    {
      
#line 290 
      struct _ddebug descriptor_15 = {.modname = "mlx5_core", .function = "mlx5_query_hca_vport_context", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/vport.c", .format = "lmc", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))290U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 290 
      if ((long)(((int)descriptor_15.flags & 1) != 0) != 0L) 
#line 290 
                                                             __dynamic_pr_debug(& descriptor_15,"lmc",___t_15); else ;
    }
    
#line 290 
    tmp_101 = ___t_15;
  }
  
#line 290 
  rep->lmc = (unsigned char)tmp_101;
  {
    unsigned int tmp_103;
    
#line 291 
    if (0 != 0) 
#line 291 
                tmp_103 = ((((*((__be32 *)ctx + 24U) << 24) | ((*((__be32 *)ctx + 24U) << 8) & 16711680U)) | ((*((__be32 *)ctx + 24U) >> 8) & 65280U)) | (*((__be32 *)ctx + 24U) >> 24)) & 31U;
    else {
      __u32 tmp_102;
      
#line 291 
      tmp_102 = __fswab32(*((__be32 *)ctx + 24U));
      
#line 291 
      tmp_103 = tmp_102 & 31U;
    }
    
#line 291 
    u32 ___t_16 = tmp_103;
    {
      
#line 291 
      struct _ddebug descriptor_16 = {.modname = "mlx5_core", .function = "mlx5_query_hca_vport_context", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/vport.c", .format = "subnet_timeout", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))292U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 291 
      if ((long)(((int)descriptor_16.flags & 1) != 0) != 0L) 
#line 291 
                                                             __dynamic_pr_debug(& descriptor_16,"subnet_timeout",___t_16); else ;
    }
    
#line 291 
    tmp_104 = ___t_16;
  }
  
#line 291 
  rep->subnet_timeout = (unsigned char)tmp_104;
  {
    unsigned int tmp_106;
    
#line 293 
    if (0 != 0) 
#line 293 
                tmp_106 = ((((*((__be32 *)ctx + 25U) << 24) | ((*((__be32 *)ctx + 25U) << 8) & 16711680U)) | ((*((__be32 *)ctx + 25U) >> 8) & 65280U)) | (*((__be32 *)ctx + 25U) >> 24)) >> 16UL;
    else {
      __u32 tmp_105;
      
#line 293 
      tmp_105 = __fswab32(*((__be32 *)ctx + 25U));
      
#line 293 
      tmp_106 = tmp_105 >> 16UL;
    }
    
#line 293 
    u32 ___t_17 = tmp_106;
    {
      
#line 293 
      struct _ddebug descriptor_17 = {.modname = "mlx5_core", .function = "mlx5_query_hca_vport_context", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/vport.c", .format = "sm_lid", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))293U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 293 
      if ((long)(((int)descriptor_17.flags & 1) != 0) != 0L) 
#line 293 
                                                             __dynamic_pr_debug(& descriptor_17,"sm_lid",___t_17); else ;
    }
    
#line 293 
    tmp_107 = ___t_17;
  }
  
#line 293 
  rep->sm_lid = (unsigned short)tmp_107;
  {
    unsigned int tmp_109;
    
#line 294 
    if (0 != 0) 
#line 294 
                tmp_109 = (((((*((__be32 *)ctx + 25U) << 24) | ((*((__be32 *)ctx + 25U) << 8) & 16711680U)) | ((*((__be32 *)ctx + 25U) >> 8) & 65280U)) | (*((__be32 *)ctx + 25U) >> 24)) >> 12UL) & 15U;
    else {
      __u32 tmp_108;
      
#line 294 
      tmp_108 = __fswab32(*((__be32 *)ctx + 25U));
      
#line 294 
      tmp_109 = (tmp_108 >> 12UL) & 15U;
    }
    
#line 294 
    u32 ___t_18 = tmp_109;
    {
      
#line 294 
      struct _ddebug descriptor_18 = {.modname = "mlx5_core", .function = "mlx5_query_hca_vport_context", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/vport.c", .format = "sm_sl", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))294U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 294 
      if ((long)(((int)descriptor_18.flags & 1) != 0) != 0L) 
#line 294 
                                                             __dynamic_pr_debug(& descriptor_18,"sm_sl",___t_18); else ;
    }
    
#line 294 
    tmp_110 = ___t_18;
  }
  
#line 294 
  rep->sm_sl = (unsigned char)tmp_110;
  {
    unsigned int tmp_112;
    
#line 295 
    if (0 != 0) 
#line 295 
                tmp_112 = ((((*((__be32 *)ctx + 26U) << 24) | ((*((__be32 *)ctx + 26U) << 8) & 16711680U)) | ((*((__be32 *)ctx + 26U) >> 8) & 65280U)) | (*((__be32 *)ctx + 26U) >> 24)) >> 16UL;
    else {
      __u32 tmp_111;
      
#line 295 
      tmp_111 = __fswab32(*((__be32 *)ctx + 26U));
      
#line 295 
      tmp_112 = tmp_111 >> 16UL;
    }
    
#line 295 
    u32 ___t_19 = tmp_112;
    {
      
#line 295 
      struct _ddebug descriptor_19 = {.modname = "mlx5_core", .function = "mlx5_query_hca_vport_context", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/vport.c", .format = "qkey_violation_counter", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))296U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 295 
      if ((long)(((int)descriptor_19.flags & 1) != 0) != 0L) 
#line 295 
                                                             __dynamic_pr_debug(& descriptor_19,"qkey_violation_counter",___t_19); else ;
    }
    
#line 295 
    tmp_113 = ___t_19;
  }
  
#line 295 
  rep->qkey_violation_counter = (unsigned short)tmp_113;
  {
    unsigned int tmp_115;
    
#line 297 
    if (0 != 0) 
#line 297 
                tmp_115 = ((((*((__be32 *)ctx + 26U) << 24) | ((*((__be32 *)ctx + 26U) << 8) & 16711680U)) | ((*((__be32 *)ctx + 26U) >> 8) & 65280U)) | (*((__be32 *)ctx + 26U) >> 24)) & 65535U;
    else {
      __u32 tmp_114;
      
#line 297 
      tmp_114 = __fswab32(*((__be32 *)ctx + 26U));
      
#line 297 
      tmp_115 = tmp_114 & 65535U;
    }
    
#line 297 
    u32 ___t_20 = tmp_115;
    {
      
#line 297 
      struct _ddebug descriptor_20 = {.modname = "mlx5_core", .function = "mlx5_query_hca_vport_context", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/vport.c", .format = "pkey_violation_counter", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))298U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 297 
      if ((long)(((int)descriptor_20.flags & 1) != 0) != 0L) 
#line 297 
                                                             __dynamic_pr_debug(& descriptor_20,"pkey_violation_counter",___t_20); else ;
    }
    
#line 297 
    tmp_116 = ___t_20;
  }
  
#line 297 
  rep->pkey_violation_counter = (unsigned short)tmp_116;
  {
    unsigned int tmp_118;
    
#line 299 
    if (0 != 0) 
#line 299 
                tmp_118 = (((((*((__be32 *)ctx + 8U) << 24) | ((*((__be32 *)ctx + 8U) << 8) & 16711680U)) | ((*((__be32 *)ctx + 8U) >> 8) & 65280U)) | (*((__be32 *)ctx + 8U) >> 24)) >> 28UL) & 1U;
    else {
      __u32 tmp_117;
      
#line 299 
      tmp_117 = __fswab32(*((__be32 *)ctx + 8U));
      
#line 299 
      tmp_118 = (tmp_117 >> 28UL) & 1U;
    }
    
#line 299 
    u32 ___t_21 = tmp_118;
    {
      
#line 299 
      struct _ddebug descriptor_21 = {.modname = "mlx5_core", .function = "mlx5_query_hca_vport_context", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/vport.c", .format = "grh_required", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))299U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 299 
      if ((long)(((int)descriptor_21.flags & 1) != 0) != 0L) 
#line 299 
                                                             __dynamic_pr_debug(& descriptor_21,"grh_required",___t_21); else ;
    }
    
#line 299 
    tmp_119 = ___t_21;
  }
  
#line 299 
  rep->grh_required = (_Bool)(tmp_119 != 0U);
  {
    unsigned long long tmp_121;
    
#line 300 
    if (0 != 0) 
#line 300 
                tmp_121 = (((((((*((__be64 *)ctx + 5U) << 56) | ((*((__be64 *)ctx + 5U) << 40) & 71776119061217280ULL)) | ((*((__be64 *)ctx + 5U) << 24) & 280375465082880ULL)) | ((*((__be64 *)ctx + 5U) << 8) & 1095216660480ULL)) | ((*((__be64 *)ctx + 5U) >> 8) & 4278190080ULL)) | ((*((__be64 *)ctx + 5U) >> 24) & 16711680ULL)) | ((*((__be64 *)ctx + 5U) >> 40) & 65280ULL)) | (*((__be64 *)ctx + 5U) >> 56); else 
                                                                    
#line 300 
                                                                    tmp_121 = __fswab64(*((__be64 *)ctx + 5U));
    
#line 300 
    u64 ___t_22 = tmp_121;
    {
      
#line 300 
      struct _ddebug descriptor_22 = {.modname = "mlx5_core", .function = "mlx5_query_hca_vport_context", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/vport.c", .format = "system_image_guid", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))301U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 300 
      if ((long)(((int)descriptor_22.flags & 1) != 0) != 0L) 
#line 300 
                                                             __dynamic_pr_debug(& descriptor_22,"system_image_guid",___t_22); else ;
    }
    
#line 300 
    tmp_122 = ___t_22;
  }
  
#line 300 
  rep->sys_image_guid = tmp_122;
  ex: 
#line 303 
  ;
  
#line 304 
  kfree((void const *)out);
  
#line 305 
  __retres = err;
  return_label: 
#line 305 
                return __retres;
}


#line 307  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/vport.c"
static char const __kstrtab_mlx5_query_hca_vport_context[29U] = {(char)'m', (char)'l', (char)'x', (char)'5', (char)'_', (char)'q', (char)'u', (char)'e', (char)'r', (char)'y', (char)'_', (char)'h', (char)'c', (char)'a', (char)'_', (char)'v', (char)'p', (char)'o', (char)'r', (char)'t', (char)'_', (char)'c', (char)'o', (char)'n', (char)'t', (char)'e', (char)'x', (char)'t', (char)'\000'};

#line 307 
struct kernel_symbol const __ksymtab_mlx5_query_hca_vport_context;


#line 307  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/vport.c"
struct kernel_symbol const __ksymtab_mlx5_query_hca_vport_context = {.value = (unsigned long)(& mlx5_query_hca_vport_context), .name = (char const *)(& __kstrtab_mlx5_query_hca_vport_context)};

#line 309  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/vport.c"
int mlx5_query_hca_vport_system_image_guid(struct mlx5_core_dev *dev, u64 *sys_image_guid)
{
  int __retres;
  struct mlx5_hca_vport_context *rep;
  int err;
  
#line 315 
  rep = (struct mlx5_hca_vport_context *)kzalloc_12(80UL,208U);
  
#line 316 
  if (rep == (struct mlx5_hca_vport_context *)0) {
    
#line 317 
    __retres = -12;
    
#line 317 
    goto return_label;
  }
  else ;
  
#line 319 
  err = mlx5_query_hca_vport_context(dev,(unsigned char)0,(unsigned char)1,(unsigned short)0,rep);
  
#line 320 
  if (err == 0) 
#line 321 
                *sys_image_guid = rep->sys_image_guid; else ;
  
#line 323 
  kfree((void const *)rep);
  
#line 324 
  __retres = err;
  return_label: 
#line 324 
                return __retres;
}


#line 326  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/vport.c"
static char const __kstrtab_mlx5_query_hca_vport_system_image_guid[39U] = {(char)'m', (char)'l', (char)'x', (char)'5', (char)'_', (char)'q', (char)'u', (char)'e', (char)'r', (char)'y', (char)'_', (char)'h', (char)'c', (char)'a', (char)'_', (char)'v', (char)'p', (char)'o', (char)'r', (char)'t', (char)'_', (char)'s', (char)'y', (char)'s', (char)'t', (char)'e', (char)'m', (char)'_', (char)'i', (char)'m', (char)'a', (char)'g', (char)'e', (char)'_', (char)'g', (char)'u', (char)'i', (char)'d', (char)'\000'};

#line 326 
struct kernel_symbol const __ksymtab_mlx5_query_hca_vport_system_image_guid;


#line 326  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/vport.c"
struct kernel_symbol const __ksymtab_mlx5_query_hca_vport_system_image_guid = {.value = (unsigned long)(& mlx5_query_hca_vport_system_image_guid), .name = (char const *)(& __kstrtab_mlx5_query_hca_vport_system_image_guid)};

#line 328  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/vport.c"
int mlx5_query_hca_vport_node_guid(struct mlx5_core_dev *dev, u64 *node_guid)
{
  int __retres;
  struct mlx5_hca_vport_context *rep;
  int err;
  
#line 334 
  rep = (struct mlx5_hca_vport_context *)kzalloc_12(80UL,208U);
  
#line 335 
  if (rep == (struct mlx5_hca_vport_context *)0) {
    
#line 336 
    __retres = -12;
    
#line 336 
    goto return_label;
  }
  else ;
  
#line 338 
  err = mlx5_query_hca_vport_context(dev,(unsigned char)0,(unsigned char)1,(unsigned short)0,rep);
  
#line 339 
  if (err == 0) 
#line 340 
                *node_guid = rep->node_guid; else ;
  
#line 342 
  kfree((void const *)rep);
  
#line 343 
  __retres = err;
  return_label: 
#line 343 
                return __retres;
}


#line 345  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/vport.c"
static char const __kstrtab_mlx5_query_hca_vport_node_guid[31U] = {(char)'m', (char)'l', (char)'x', (char)'5', (char)'_', (char)'q', (char)'u', (char)'e', (char)'r', (char)'y', (char)'_', (char)'h', (char)'c', (char)'a', (char)'_', (char)'v', (char)'p', (char)'o', (char)'r', (char)'t', (char)'_', (char)'n', (char)'o', (char)'d', (char)'e', (char)'_', (char)'g', (char)'u', (char)'i', (char)'d', (char)'\000'};

#line 345 
struct kernel_symbol const __ksymtab_mlx5_query_hca_vport_node_guid;


#line 345  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/vport.c"
struct kernel_symbol const __ksymtab_mlx5_query_hca_vport_node_guid = {.value = (unsigned long)(& mlx5_query_hca_vport_node_guid), .name = (char const *)(& __kstrtab_mlx5_query_hca_vport_node_guid)};

#line 432  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_vport.c.aux"
static void *kzalloc_12(size_t size, gfp_t flags)
{
  void *tmp;
  
#line 435 
  tmp = ldv_kzalloc(size,flags);
  
#line 435 
  return tmp;
}


#line 53  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/bitops/find.h"
unsigned long find_first_zero_bit(unsigned long const *, unsigned long);


#line 13  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/getorder.h"
__inline static int __get_order(unsigned long size)
{
  int order;
  
#line 17 
  size -= 1UL;
  
#line 18 
  size >>= 12;
  
#line 22 
  order = fls64((unsigned long long)size);
  
#line 24 
  return order;
}


#line 191  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bitmap.h"
__inline static void bitmap_fill(unsigned long *dst, unsigned int nbits)
{
  
#line 193 
  unsigned int nlongs = (unsigned int)(((unsigned long)nbits + 63UL) / 64UL);
  
#line 194 
  if (0 == 0 || nbits > 64U) {
    
#line 195 
    unsigned int len = (nlongs + 536870911U) * 8U;
    
#line 196 
    memset((void *)dst,255,(unsigned long)len);
  }
  else ;
  
#line 198 
  *(dst + (nlongs + 4294967295U)) = 18446744073709551615UL >> (- nbits & 63U);
  
#line 199 
  return;
}


#line 290  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bitmap.h"
__inline static int bitmap_full(unsigned long const *src, unsigned int nbits)
{
  int __retres;
  unsigned long tmp;
  
#line 292 
  if (0 != 0 && nbits <= 64U) {
    
#line 293 
    __retres = (~ *src & (18446744073709551615UL >> (- nbits & 63U))) == 0UL;
    
#line 293 
    goto return_label;
  }
  else ;
  
#line 295 
  tmp = find_first_zero_bit(src,(unsigned long)nbits);
  
#line 295 
  ;
  
#line 295 
  __retres = tmp == (unsigned long)nbits;
  return_label: 
#line 295 
                return __retres;
}


#line 33  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_alloc.c.aux"
static void ldv_mutex_lock_51_0(struct mutex *ldv_func_arg1);


#line 37 
static void ldv_mutex_lock_53(struct mutex *ldv_func_arg1);


#line 189  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mutex.h"
static void ldv_mutex_unlock_52_0(struct mutex *ldv_func_arg1);


#line 193 
static void ldv_mutex_unlock_54(struct mutex *ldv_func_arg1);


#line 581  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/slab.h"
static void *kzalloc_13(size_t size, gfp_t flags);


#line 48  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/alloc.c"
int mlx5_buf_alloc(struct mlx5_core_dev *dev, int size, struct mlx5_buf *buf)
{
  int __retres;
  dma_addr_t t;
  
#line 52 
  buf->size = size;
  
#line 53 
  buf->npages = 1;
  
#line 54 
  if (0 != 0) {
    unsigned int tmp_69;
    
#line 54 
    if (size != 0) {
      unsigned int tmp_68;
      
#line 54 
      if ((unsigned int)size > 4095U) {
        unsigned int tmp_67;
        
#line 54 
        if (0 != 0) {
          unsigned int tmp_65;
          
#line 54 
          if (size + -1 <= 0) {
            int tmp;
            
#line 54 
            tmp = ____ilog2_NaN();
            
#line 54 
            tmp_65 = (unsigned int)((unsigned char)tmp) + 1U;
          }
          else {
            unsigned int tmp_64;
            
#line 54 
            if (size + -1 >= 0) {
              unsigned int tmp_63;
              
#line 54 
              if (((unsigned long long)(size + -1) & 4611686018427387904ULL) == 0ULL) {
                unsigned int tmp_62;
                
#line 54 
                if (((unsigned long long)(size + -1) & 2305843009213693952ULL) == 0ULL) {
                  unsigned int tmp_61;
                  
#line 54 
                  if (((unsigned long long)(size + -1) & 1152921504606846976ULL) == 0ULL) {
                    unsigned int tmp_60;
                    
#line 54 
                    if (((unsigned long long)(size + -1) & 576460752303423488ULL) == 0ULL) {
                      unsigned int tmp_59;
                      
#line 54 
                      if (((unsigned long long)(size + -1) & 288230376151711744ULL) == 0ULL) {
                        unsigned int tmp_58;
                        
#line 54 
                        if (((unsigned long long)(size + -1) & 144115188075855872ULL) == 0ULL) {
                          unsigned int tmp_57;
                          
#line 54 
                          if (((unsigned long long)(size + -1) & 72057594037927936ULL) == 0ULL) {
                            unsigned int tmp_56;
                            
#line 54 
                            if (((unsigned long long)(size + -1) & 36028797018963968ULL) == 0ULL) {
                              unsigned int tmp_55;
                              
#line 54 
                              if (((unsigned long long)(size + -1) & 18014398509481984ULL) == 0ULL) {
                                unsigned int tmp_54;
                                
#line 54 
                                if (((unsigned long long)(size + -1) & 9007199254740992ULL) == 0ULL) {
                                  unsigned int tmp_53;
                                  
#line 54 
                                  if (((unsigned long long)(size + -1) & 4503599627370496ULL) == 0ULL) {
                                    unsigned int tmp_52;
                                    
#line 54 
                                    if (((unsigned long long)(size + -1) & 2251799813685248ULL) == 0ULL) {
                                      unsigned int tmp_51;
                                      
#line 54 
                                      if (((unsigned long long)(size + -1) & 1125899906842624ULL) == 0ULL) {
                                        unsigned int tmp_50;
                                        
#line 54 
                                        if (((unsigned long long)(size + -1) & 562949953421312ULL) == 0ULL) {
                                          unsigned int tmp_49;
                                          
#line 54 
                                          if (((unsigned long long)(size + -1) & 281474976710656ULL) == 0ULL) {
                                            unsigned int tmp_48;
                                            
#line 54 
                                            if (((unsigned long long)(size + -1) & 140737488355328ULL) == 0ULL) {
                                              unsigned int tmp_47;
                                              
#line 54 
                                              if (((unsigned long long)(size + -1) & 70368744177664ULL) == 0ULL) {
                                                unsigned int tmp_46;
                                                
#line 54 
                                                if (((unsigned long long)(size + -1) & 35184372088832ULL) == 0ULL) {
                                                  unsigned int tmp_45;
                                                  
#line 54 
                                                  if (((unsigned long long)(size + -1) & 17592186044416ULL) == 0ULL) {
                                                    unsigned int tmp_44;
                                                    
#line 54 
                                                    if (((unsigned long long)(size + -1) & 8796093022208ULL) == 0ULL) {
                                                      unsigned int tmp_43;
                                                      
#line 54 
                                                      if (((unsigned long long)(size + -1) & 4398046511104ULL) == 0ULL) {
                                                        unsigned int tmp_42;
                                                        
#line 54 
                                                        if (((unsigned long long)(size + -1) & 2199023255552ULL) == 0ULL) {
                                                          unsigned int tmp_41;
                                                          
#line 54 
                                                          if (((unsigned long long)(size + -1) & 1099511627776ULL) == 0ULL) {
                                                            unsigned int tmp_40;
                                                            
#line 54 
                                                            if (((unsigned long long)(size + -1) & 549755813888ULL) == 0ULL) {
                                                              unsigned int tmp_39;
                                                              
#line 54 
                                                              if (((unsigned long long)(size + -1) & 274877906944ULL) == 0ULL) {
                                                                unsigned int tmp_38;
                                                                
#line 54 
                                                                if (((unsigned long long)(size + -1) & 137438953472ULL) == 0ULL) {
                                                                  unsigned int tmp_37;
                                                                  
#line 54 
                                                                  if (
                                                                    ((unsigned long long)(size + -1) & 68719476736ULL) == 0ULL) {
                                                                    unsigned int tmp_36;
                                                                    
#line 54 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 34359738368ULL) == 0ULL) {
                                                                    unsigned int tmp_35;
                                                                    
#line 54 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 17179869184ULL) == 0ULL) {
                                                                    unsigned int tmp_34;
                                                                    
#line 54 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 8589934592ULL) == 0ULL) {
                                                                    unsigned int tmp_33;
                                                                    
#line 54 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 4294967296ULL) == 0ULL) {
                                                                    unsigned int tmp_32;
                                                                    
#line 54 
                                                                    if (
                                                                    size + -1 >= 0) {
                                                                    unsigned int tmp_31;
                                                                    
#line 54 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 1073741824ULL) == 0ULL) {
                                                                    unsigned int tmp_30;
                                                                    
#line 54 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 536870912ULL) == 0ULL) {
                                                                    unsigned int tmp_29;
                                                                    
#line 54 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 268435456ULL) == 0ULL) {
                                                                    unsigned int tmp_28;
                                                                    
#line 54 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 134217728ULL) == 0ULL) {
                                                                    unsigned int tmp_27;
                                                                    
#line 54 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 67108864ULL) == 0ULL) {
                                                                    unsigned int tmp_26;
                                                                    
#line 54 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 33554432ULL) == 0ULL) {
                                                                    unsigned int tmp_25;
                                                                    
#line 54 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 16777216ULL) == 0ULL) {
                                                                    unsigned int tmp_24;
                                                                    
#line 54 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 8388608ULL) == 0ULL) {
                                                                    unsigned int tmp_23;
                                                                    
#line 54 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 4194304ULL) == 0ULL) {
                                                                    unsigned int tmp_22;
                                                                    
#line 54 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 2097152ULL) == 0ULL) {
                                                                    unsigned int tmp_21;
                                                                    
#line 54 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 1048576ULL) == 0ULL) {
                                                                    unsigned int tmp_20;
                                                                    
#line 54 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 524288ULL) == 0ULL) {
                                                                    unsigned int tmp_19;
                                                                    
#line 54 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 262144ULL) == 0ULL) {
                                                                    unsigned int tmp_18;
                                                                    
#line 54 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 131072ULL) == 0ULL) {
                                                                    unsigned int tmp_17;
                                                                    
#line 54 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 65536ULL) == 0ULL) {
                                                                    unsigned int tmp_16;
                                                                    
#line 54 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 32768ULL) == 0ULL) {
                                                                    unsigned int tmp_15;
                                                                    
#line 54 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 16384ULL) == 0ULL) {
                                                                    unsigned int tmp_14;
                                                                    
#line 54 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 8192ULL) == 0ULL) {
                                                                    unsigned int tmp_13;
                                                                    
#line 54 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 4096ULL) == 0ULL) {
                                                                    unsigned int tmp_12;
                                                                    
#line 54 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 2048ULL) == 0ULL) {
                                                                    unsigned int tmp_11;
                                                                    
#line 54 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 1024ULL) == 0ULL) {
                                                                    unsigned int tmp_10;
                                                                    
#line 54 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 512ULL) == 0ULL) {
                                                                    unsigned int tmp_9;
                                                                    
#line 54 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 256ULL) == 0ULL) {
                                                                    unsigned int tmp_8;
                                                                    
#line 54 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 128ULL) == 0ULL) {
                                                                    unsigned int tmp_7;
                                                                    
#line 54 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 64ULL) == 0ULL) {
                                                                    unsigned int tmp_6;
                                                                    
#line 54 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 32ULL) == 0ULL) {
                                                                    unsigned int tmp_5;
                                                                    
#line 54 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 16ULL) == 0ULL) {
                                                                    unsigned int tmp_4;
                                                                    
#line 54 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 8ULL) == 0ULL) {
                                                                    unsigned int tmp_3;
                                                                    
#line 54 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 4ULL) == 0ULL) {
                                                                    unsigned int tmp_2;
                                                                    
#line 54 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 2ULL) == 0ULL) {
                                                                    unsigned int tmp_1;
                                                                    
#line 54 
                                                                    if (
                                                                    ((unsigned long long)(size + -1) & 1ULL) == 0ULL) {
                                                                    int tmp_0;
                                                                    
#line 54 
                                                                    tmp_0 = ____ilog2_NaN();
                                                                    
#line 54 
                                                                    tmp_1 = (unsigned int)((unsigned char)tmp_0) + 1U;
                                                                    }
                                                                    else 
                                                                    
#line 54 
                                                                    tmp_1 = 1U;
                                                                    
#line 54 
                                                                    tmp_2 = tmp_1;
                                                                    }
                                                                    else 
                                                                    
#line 54 
                                                                    tmp_2 = 2U;
                                                                    
#line 54 
                                                                    tmp_3 = tmp_2;
                                                                    }
                                                                    else 
                                                                    
#line 54 
                                                                    tmp_3 = 3U;
                                                                    
#line 54 
                                                                    tmp_4 = tmp_3;
                                                                    }
                                                                    else 
                                                                    
#line 54 
                                                                    tmp_4 = 4U;
                                                                    
#line 54 
                                                                    tmp_5 = tmp_4;
                                                                    }
                                                                    else 
                                                                    
#line 54 
                                                                    tmp_5 = 5U;
                                                                    
#line 54 
                                                                    tmp_6 = tmp_5;
                                                                    }
                                                                    else 
                                                                    
#line 54 
                                                                    tmp_6 = 6U;
                                                                    
#line 54 
                                                                    tmp_7 = tmp_6;
                                                                    }
                                                                    else 
                                                                    
#line 54 
                                                                    tmp_7 = 7U;
                                                                    
#line 54 
                                                                    tmp_8 = tmp_7;
                                                                    }
                                                                    else 
                                                                    
#line 54 
                                                                    tmp_8 = 8U;
                                                                    
#line 54 
                                                                    tmp_9 = tmp_8;
                                                                    }
                                                                    else 
                                                                    
#line 54 
                                                                    tmp_9 = 9U;
                                                                    
#line 54 
                                                                    tmp_10 = tmp_9;
                                                                    }
                                                                    else 
                                                                    
#line 54 
                                                                    tmp_10 = 10U;
                                                                    
#line 54 
                                                                    tmp_11 = tmp_10;
                                                                    }
                                                                    else 
                                                                    
#line 54 
                                                                    tmp_11 = 11U;
                                                                    
#line 54 
                                                                    tmp_12 = tmp_11;
                                                                    }
                                                                    else 
                                                                    
#line 54 
                                                                    tmp_12 = 12U;
                                                                    
#line 54 
                                                                    tmp_13 = tmp_12;
                                                                    }
                                                                    else 
                                                                    
#line 54 
                                                                    tmp_13 = 13U;
                                                                    
#line 54 
                                                                    tmp_14 = tmp_13;
                                                                    }
                                                                    else 
                                                                    
#line 54 
                                                                    tmp_14 = 14U;
                                                                    
#line 54 
                                                                    tmp_15 = tmp_14;
                                                                    }
                                                                    else 
                                                                    
#line 54 
                                                                    tmp_15 = 15U;
                                                                    
#line 54 
                                                                    tmp_16 = tmp_15;
                                                                    }
                                                                    else 
                                                                    
#line 54 
                                                                    tmp_16 = 16U;
                                                                    
#line 54 
                                                                    tmp_17 = tmp_16;
                                                                    }
                                                                    else 
                                                                    
#line 54 
                                                                    tmp_17 = 17U;
                                                                    
#line 54 
                                                                    tmp_18 = tmp_17;
                                                                    }
                                                                    else 
                                                                    
#line 54 
                                                                    tmp_18 = 18U;
                                                                    
#line 54 
                                                                    tmp_19 = tmp_18;
                                                                    }
                                                                    else 
                                                                    
#line 54 
                                                                    tmp_19 = 19U;
                                                                    
#line 54 
                                                                    tmp_20 = tmp_19;
                                                                    }
                                                                    else 
                                                                    
#line 54 
                                                                    tmp_20 = 20U;
                                                                    
#line 54 
                                                                    tmp_21 = tmp_20;
                                                                    }
                                                                    else 
                                                                    
#line 54 
                                                                    tmp_21 = 21U;
                                                                    
#line 54 
                                                                    tmp_22 = tmp_21;
                                                                    }
                                                                    else 
                                                                    
#line 54 
                                                                    tmp_22 = 22U;
                                                                    
#line 54 
                                                                    tmp_23 = tmp_22;
                                                                    }
                                                                    else 
                                                                    
#line 54 
                                                                    tmp_23 = 23U;
                                                                    
#line 54 
                                                                    tmp_24 = tmp_23;
                                                                    }
                                                                    else 
                                                                    
#line 54 
                                                                    tmp_24 = 24U;
                                                                    
#line 54 
                                                                    tmp_25 = tmp_24;
                                                                    }
                                                                    else 
                                                                    
#line 54 
                                                                    tmp_25 = 25U;
                                                                    
#line 54 
                                                                    tmp_26 = tmp_25;
                                                                    }
                                                                    else 
                                                                    
#line 54 
                                                                    tmp_26 = 26U;
                                                                    
#line 54 
                                                                    tmp_27 = tmp_26;
                                                                    }
                                                                    else 
                                                                    
#line 54 
                                                                    tmp_27 = 27U;
                                                                    
#line 54 
                                                                    tmp_28 = tmp_27;
                                                                    }
                                                                    else 
                                                                    
#line 54 
                                                                    tmp_28 = 28U;
                                                                    
#line 54 
                                                                    tmp_29 = tmp_28;
                                                                    }
                                                                    else 
                                                                    
#line 54 
                                                                    tmp_29 = 29U;
                                                                    
#line 54 
                                                                    tmp_30 = tmp_29;
                                                                    }
                                                                    else 
                                                                    
#line 54 
                                                                    tmp_30 = 30U;
                                                                    
#line 54 
                                                                    tmp_31 = tmp_30;
                                                                    }
                                                                    else 
                                                                    
#line 54 
                                                                    tmp_31 = 31U;
                                                                    
#line 54 
                                                                    tmp_32 = tmp_31;
                                                                    }
                                                                    else 
                                                                    
#line 54 
                                                                    tmp_32 = 32U;
                                                                    
#line 54 
                                                                    tmp_33 = tmp_32;
                                                                    }
                                                                    else 
                                                                    
#line 54 
                                                                    tmp_33 = 33U;
                                                                    
#line 54 
                                                                    tmp_34 = tmp_33;
                                                                    }
                                                                    else 
                                                                    
#line 54 
                                                                    tmp_34 = 34U;
                                                                    
#line 54 
                                                                    tmp_35 = tmp_34;
                                                                    }
                                                                    else 
                                                                    
#line 54 
                                                                    tmp_35 = 35U;
                                                                    
#line 54 
                                                                    tmp_36 = tmp_35;
                                                                    }
                                                                    else 
                                                                    
#line 54 
                                                                    tmp_36 = 36U;
                                                                    
#line 54 
                                                                    tmp_37 = tmp_36;
                                                                  }
                                                                  else 
                                                                    
#line 54 
                                                                    tmp_37 = 37U;
                                                                  
#line 54 
                                                                  tmp_38 = tmp_37;
                                                                }
                                                                else 
                                                                  
#line 54 
                                                                  tmp_38 = 38U;
                                                                
#line 54 
                                                                tmp_39 = tmp_38;
                                                              }
                                                              else 
#line 54 
                                                                   tmp_39 = 39U;
                                                              
#line 54 
                                                              tmp_40 = tmp_39;
                                                            }
                                                            else 
#line 54 
                                                                 tmp_40 = 40U;
                                                            
#line 54 
                                                            tmp_41 = tmp_40;
                                                          }
                                                          else 
#line 54 
                                                               tmp_41 = 41U;
                                                          
#line 54 
                                                          tmp_42 = tmp_41;
                                                        }
                                                        else 
#line 54 
                                                             tmp_42 = 42U;
                                                        
#line 54 
                                                        tmp_43 = tmp_42;
                                                      }
                                                      else 
#line 54 
                                                           tmp_43 = 43U;
                                                      
#line 54 
                                                      tmp_44 = tmp_43;
                                                    }
                                                    else 
#line 54 
                                                         tmp_44 = 44U;
                                                    
#line 54 
                                                    tmp_45 = tmp_44;
                                                  }
                                                  else 
#line 54 
                                                       tmp_45 = 45U;
                                                  
#line 54 
                                                  tmp_46 = tmp_45;
                                                }
                                                else 
#line 54 
                                                     tmp_46 = 46U;
                                                
#line 54 
                                                tmp_47 = tmp_46;
                                              }
                                              else 
#line 54 
                                                   tmp_47 = 47U;
                                              
#line 54 
                                              tmp_48 = tmp_47;
                                            }
                                            else 
#line 54 
                                                 tmp_48 = 48U;
                                            
#line 54 
                                            tmp_49 = tmp_48;
                                          }
                                          else 
#line 54 
                                               tmp_49 = 49U;
                                          
#line 54 
                                          tmp_50 = tmp_49;
                                        }
                                        else 
#line 54 
                                             tmp_50 = 50U;
                                        
#line 54 
                                        tmp_51 = tmp_50;
                                      }
                                      else 
#line 54 
                                           tmp_51 = 51U;
                                      
#line 54 
                                      tmp_52 = tmp_51;
                                    }
                                    else 
#line 54 
                                         tmp_52 = 52U;
                                    
#line 54 
                                    tmp_53 = tmp_52;
                                  }
                                  else 
#line 54 
                                       tmp_53 = 53U;
                                  
#line 54 
                                  tmp_54 = tmp_53;
                                }
                                else 
#line 54 
                                     tmp_54 = 54U;
                                
#line 54 
                                tmp_55 = tmp_54;
                              }
                              else 
#line 54 
                                   tmp_55 = 55U;
                              
#line 54 
                              tmp_56 = tmp_55;
                            }
                            else 
#line 54 
                                 tmp_56 = 56U;
                            
#line 54 
                            tmp_57 = tmp_56;
                          }
                          else 
#line 54 
                               tmp_57 = 57U;
                          
#line 54 
                          tmp_58 = tmp_57;
                        }
                        else 
#line 54 
                             tmp_58 = 58U;
                        
#line 54 
                        tmp_59 = tmp_58;
                      }
                      else 
#line 54 
                           tmp_59 = 59U;
                      
#line 54 
                      tmp_60 = tmp_59;
                    }
                    else 
#line 54 
                         tmp_60 = 60U;
                    
#line 54 
                    tmp_61 = tmp_60;
                  }
                  else 
#line 54 
                       tmp_61 = 61U;
                  
#line 54 
                  tmp_62 = tmp_61;
                }
                else 
#line 54 
                     tmp_62 = 62U;
                
#line 54 
                tmp_63 = tmp_62;
              }
              else 
#line 54 
                   tmp_63 = 63U;
              
#line 54 
              tmp_64 = tmp_63;
            }
            else 
#line 54 
                 tmp_64 = 64U;
            
#line 54 
            tmp_65 = tmp_64;
          }
          
#line 54 
          tmp_67 = tmp_65;
        }
        else {
          int tmp_66;
          
#line 54 
          tmp_66 = __ilog2_u32((unsigned int)(size + -1));
          
#line 54 
          tmp_67 = (unsigned int)((unsigned char)tmp_66) + 1U;
        }
        
#line 54 
        tmp_68 = tmp_67;
      }
      else 
#line 54 
           tmp_68 = 12U;
      
#line 54 
      tmp_69 = tmp_68;
    }
    else 
#line 54 
         tmp_69 = 64U;
    
#line 54 
    buf->page_shift = (unsigned char)tmp_69;
  }
  else {
    int tmp_70;
    
#line 54 
    tmp_70 = __get_order((unsigned long)size);
    
#line 54 
    buf->page_shift = (unsigned char)((unsigned int)((unsigned char)tmp_70) + 12U);
  }
  
#line 55 
  buf->direct.buf = dma_zalloc_coherent(& (dev->pdev)->dev,(unsigned long)size,& t,208U);
  
#line 57 
  if (buf->direct.buf == (void *)0) {
    
#line 58 
    __retres = -12;
    
#line 58 
    goto return_label;
  }
  else ;
  
#line 60 
  buf->direct.map = t;
  
#line 62 
  goto ldv_34894;
  ldv_34893: 
#line 63 
  ;
  
#line 63 
  buf->page_shift = (u8)((int)buf->page_shift - 1);
  
#line 64 
  buf->npages *= 2;
  ldv_34894: 
#line 65 
  ;
  
#line 62 
  if (((unsigned long long)((1 << (int)buf->page_shift) + -1) & t) != 0ULL) 
    
#line 64 
    goto ldv_34893; else 
#line 67 
                         goto ldv_34895;
  ldv_34895: 
#line 68 
  ;
  
#line 67 
  __retres = 0;
  return_label: 
#line 67 
                return __retres;
}


#line 69  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/alloc.c"
static char const __kstrtab_mlx5_buf_alloc[15U] = {(char)'m', (char)'l', (char)'x', (char)'5', (char)'_', (char)'b', (char)'u', (char)'f', (char)'_', (char)'a', (char)'l', (char)'l', (char)'o', (char)'c', (char)'\000'};

#line 69 
struct kernel_symbol const __ksymtab_mlx5_buf_alloc;


#line 69  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/alloc.c"
struct kernel_symbol const __ksymtab_mlx5_buf_alloc = {.value = (unsigned long)(& mlx5_buf_alloc), .name = (char const *)(& __kstrtab_mlx5_buf_alloc)};

#line 71  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/alloc.c"
void mlx5_buf_free(struct mlx5_core_dev *dev, struct mlx5_buf *buf)
{
  
#line 73 
  dma_free_attrs(& (dev->pdev)->dev,(unsigned long)buf->size,buf->direct.buf,buf->direct.map,(struct dma_attrs *)0);
  
#line 74 
  return;
}


#line 76  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/alloc.c"
static char const __kstrtab_mlx5_buf_free[14U] = {(char)'m', (char)'l', (char)'x', (char)'5', (char)'_', (char)'b', (char)'u', (char)'f', (char)'_', (char)'f', (char)'r', (char)'e', (char)'e', (char)'\000'};

#line 76 
struct kernel_symbol const __ksymtab_mlx5_buf_free;


#line 76  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/alloc.c"
struct kernel_symbol const __ksymtab_mlx5_buf_free = {.value = (unsigned long)(& mlx5_buf_free), .name = (char const *)(& __kstrtab_mlx5_buf_free)};

#line 78  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/alloc.c"
static struct mlx5_db_pgdir *mlx5_alloc_db_pgdir(struct device *dma_device)
{
  struct mlx5_db_pgdir *__retres;
  struct mlx5_db_pgdir *pgdir;
  
#line 82 
  pgdir = (struct mlx5_db_pgdir *)kzalloc_13(40UL,208U);
  
#line 83 
  if (pgdir == (struct mlx5_db_pgdir *)0) {
    
#line 84 
    __retres = (struct mlx5_db_pgdir *)0;
    
#line 84 
    goto return_label;
  }
  else ;
  
#line 86 
  bitmap_fill((unsigned long *)(& pgdir->bitmap),64U);
  
#line 87 
  pgdir->db_page = (__be32 *)dma_alloc_attrs(dma_device,4096UL,& pgdir->db_dma,208U,(struct dma_attrs *)0);
  
#line 89 
  if (pgdir->db_page == (__be32 *)0U) {
    
#line 90 
    kfree((void const *)pgdir);
    
#line 91 
    __retres = (struct mlx5_db_pgdir *)0;
    
#line 91 
    goto return_label;
  }
  else ;
  
#line 94 
  __retres = pgdir;
  return_label: 
#line 94 
                return __retres;
}


#line 97  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/alloc.c"
static int mlx5_alloc_db_from_pgdir(struct mlx5_db_pgdir *pgdir, struct mlx5_db *db)
{
  int __retres;
  int offset;
  int i;
  unsigned long tmp;
  
#line 103 
  tmp = find_first_bit((unsigned long const *)(& pgdir->bitmap),64UL);
  
#line 103 
  i = (int)tmp;
  
#line 104 
  if (i > 63) {
    
#line 105 
    __retres = -12;
    
#line 105 
    goto return_label;
  }
  else ;
  
#line 107 
  __set_bit((long)i,(unsigned long volatile *)(& pgdir->bitmap));
  
#line 109 
  db->u.pgdir = pgdir;
  
#line 110 
  db->index = i;
  
#line 111 
  offset = db->index * 64;
  
#line 112 
  db->db = pgdir->db_page + (unsigned long)offset / 4UL;
  
#line 113 
  db->dma = pgdir->db_dma + (unsigned long long)offset;
  
#line 115 
  *(db->db) = 0U;
  
#line 116 
  *(db->db + 1U) = 0U;
  
#line 118 
  __retres = 0;
  return_label: 
#line 118 
                return __retres;
}


#line 121  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/alloc.c"
int mlx5_db_alloc(struct mlx5_core_dev *dev, struct mlx5_db *db)
{
  struct mlx5_db_pgdir *pgdir;
  struct mlx5_db_pgdir *tmp;
  int tmp_0;
  struct mlx5_db_pgdir *tmp_1;
  
#line 124 
  int ret = 0;
  
#line 126 
  ldv_mutex_lock_51_0(& dev->priv.pgdir_mutex);
  {
    
#line 128 
    struct list_head const *__mptr = (struct list_head const *)dev->priv.pgdir_list.next;
    
#line 128 
    tmp = (struct mlx5_db_pgdir *)__mptr;
  }
  
#line 128 
  pgdir = tmp;
  
#line 128 
  goto ldv_34939;
  ldv_34938: 
#line 129 
  ;
  
#line 129 
  tmp_0 = mlx5_alloc_db_from_pgdir(pgdir,db);
  
#line 129 
  if (tmp_0 == 0) 
#line 130 
                  goto out; else ;
  {
    
#line 128 
    struct list_head const *__mptr_0 = (struct list_head const *)pgdir->list.next;
    
#line 128 
    tmp_1 = (struct mlx5_db_pgdir *)__mptr_0;
  }
  
#line 128 
  pgdir = tmp_1;
  ldv_34939: 
#line 130 
  ;
  
#line 128 
  if (& pgdir->list != & dev->priv.pgdir_list) 
#line 130 
                                               goto ldv_34938; else 
#line 133 
                                                                    goto ldv_34940;
  ldv_34940: 
#line 134 
  ;
  
#line 132 
  pgdir = mlx5_alloc_db_pgdir(& (dev->pdev)->dev);
  
#line 133 
  if (pgdir == (struct mlx5_db_pgdir *)0) {
    
#line 134 
    ret = -12;
    
#line 135 
    goto out;
  }
  else ;
  
#line 138 
  list_add(& pgdir->list,& dev->priv.pgdir_list);
  {
    int tmp_2;
    
#line 141 
    tmp_2 = mlx5_alloc_db_from_pgdir(pgdir,db);
    
#line 141 
    int __ret_warn_on = tmp_2 != 0;
    
#line 141 
    if ((long)(__ret_warn_on != 0) != 0L) 
#line 141 
                                          warn_slowpath_null("/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/alloc.c",141); else ;
    
#line 141 
    long tmp_3 = (long)(__ret_warn_on != 0);
  }
  out: 
#line 143 
  ;
  
#line 144 
  ldv_mutex_unlock_52_0(& dev->priv.pgdir_mutex);
  
#line 146 
  return ret;
}


#line 148  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/alloc.c"
static char const __kstrtab_mlx5_db_alloc[14U] = {(char)'m', (char)'l', (char)'x', (char)'5', (char)'_', (char)'d', (char)'b', (char)'_', (char)'a', (char)'l', (char)'l', (char)'o', (char)'c', (char)'\000'};

#line 148 
struct kernel_symbol const __ksymtab_mlx5_db_alloc;


#line 148  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/alloc.c"
struct kernel_symbol const __ksymtab_mlx5_db_alloc = {.value = (unsigned long)(& mlx5_db_alloc), .name = (char const *)(& __kstrtab_mlx5_db_alloc)};

#line 150  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/alloc.c"
void mlx5_db_free(struct mlx5_core_dev *dev, struct mlx5_db *db)
{
  int tmp;
  
#line 152 
  ldv_mutex_lock_53(& dev->priv.pgdir_mutex);
  
#line 154 
  __set_bit((long)db->index,(unsigned long volatile *)(& (db->u.pgdir)->bitmap));
  
#line 156 
  tmp = bitmap_full((unsigned long const *)(& (db->u.pgdir)->bitmap),64U);
  
#line 156 
  if (tmp != 0) {
    
#line 157 
    dma_free_attrs(& (dev->pdev)->dev,4096UL,(void *)(db->u.pgdir)->db_page,(db->u.pgdir)->db_dma,(struct dma_attrs *)0);
    
#line 159 
    list_del(& (db->u.pgdir)->list);
    
#line 160 
    kfree((void const *)db->u.pgdir);
  }
  else ;
  
#line 163 
  ldv_mutex_unlock_54(& dev->priv.pgdir_mutex);
  
#line 164 
  return;
}


#line 165  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/alloc.c"
static char const __kstrtab_mlx5_db_free[13U] = {(char)'m', (char)'l', (char)'x', (char)'5', (char)'_', (char)'d', (char)'b', (char)'_', (char)'f', (char)'r', (char)'e', (char)'e', (char)'\000'};

#line 165 
struct kernel_symbol const __ksymtab_mlx5_db_free;


#line 165  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/alloc.c"
struct kernel_symbol const __ksymtab_mlx5_db_free = {.value = (unsigned long)(& mlx5_db_free), .name = (char const *)(& __kstrtab_mlx5_db_free)};

#line 168  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/alloc.c"
void mlx5_fill_page_array(struct mlx5_buf *buf, __be64 *pas)
{
  u64 addr;
  int i;
  
#line 173 
  i = 0;
  
#line 173 
  goto ldv_34970;
  ldv_34969: 
#line 174 
  ;
  
#line 174 
  addr = buf->direct.map + (unsigned long long)(i << (int)buf->page_shift);
  
#line 176 
  if (0 != 0) 
#line 176 
              *(pas + i) = (((((((addr << 56) | ((addr << 40) & 71776119061217280ULL)) | ((addr << 24) & 280375465082880ULL)) | ((addr << 8) & 1095216660480ULL)) | ((addr >> 8) & 4278190080ULL)) | ((addr >> 24) & 16711680ULL)) | ((addr >> 40) & 65280ULL)) | (addr >> 56); else 
                                                                    
#line 176 
                                                                    *(pas + i) = __fswab64(addr);
  
#line 173 
  i += 1;
  ldv_34970: 
#line 174 
  ;
  
#line 173 
  if (buf->npages > i) 
#line 175 
                       goto ldv_34969; else 
#line 178 
                                            goto ldv_34971;
  ldv_34971: 
#line 179 
  ;
  
#line 180 
  return;
}


#line 179  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/alloc.c"
static char const __kstrtab_mlx5_fill_page_array[21U] = {(char)'m', (char)'l', (char)'x', (char)'5', (char)'_', (char)'f', (char)'i', (char)'l', (char)'l', (char)'_', (char)'p', (char)'a', (char)'g', (char)'e', (char)'_', (char)'a', (char)'r', (char)'r', (char)'a', (char)'y', (char)'\000'};

#line 179 
struct kernel_symbol const __ksymtab_mlx5_fill_page_array;


#line 179  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/mellanox/mlx5/core/alloc.c"
struct kernel_symbol const __ksymtab_mlx5_fill_page_array = {.value = (unsigned long)(& mlx5_fill_page_array), .name = (char const *)(& __kstrtab_mlx5_fill_page_array)};

#line 426  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_alloc.c.aux"
static void *kzalloc_13(size_t size, gfp_t flags)
{
  void *tmp;
  
#line 429 
  tmp = ldv_kzalloc(size,flags);
  
#line 429 
  return tmp;
}


#line 514  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_alloc.c.aux"
static void ldv_mutex_lock_51_0(struct mutex *ldv_func_arg1)
{
  
#line 518 
  ldv_mutex_model_lock(ldv_func_arg1,(char *)"pgdir_mutex_of_mlx5_priv");
  
#line 519 
  return;
}


#line 522  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_alloc.c.aux"
static void ldv_mutex_unlock_52_0(struct mutex *ldv_func_arg1)
{
  
#line 526 
  ldv_mutex_model_unlock(ldv_func_arg1,(char *)"pgdir_mutex_of_mlx5_priv");
  
#line 527 
  return;
}


#line 530  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_alloc.c.aux"
static void ldv_mutex_lock_53(struct mutex *ldv_func_arg1)
{
  
#line 534 
  ldv_mutex_model_lock(ldv_func_arg1,(char *)"pgdir_mutex_of_mlx5_priv");
  
#line 535 
  return;
}


#line 538  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/weaver/.tmp_alloc.c.aux"
static void ldv_mutex_unlock_54(struct mutex *ldv_func_arg1)
{
  
#line 542 
  ldv_mutex_model_unlock(ldv_func_arg1,(char *)"pgdir_mutex_of_mlx5_priv");
  
#line 543 
  return;
}


#line 21  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
void ldv_atomic_add(int i, atomic_t *v)
{
  
#line 23 
  v->counter += i;
  
#line 24 
  return;
}


#line 27  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
void ldv_atomic_sub(int i, atomic_t *v)
{
  
#line 29 
  v->counter -= i;
  
#line 30 
  return;
}


#line 33  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
int ldv_atomic_sub_and_test(int i, atomic_t *v)
{
  int __retres;
  
#line 35 
  v->counter -= i;
  
#line 36 
  if (v->counter != 0) {
    
#line 37 
    __retres = 0;
    
#line 37 
    goto return_label;
  }
  else ;
  
#line 39 
  __retres = 1;
  return_label: 
#line 39 
                return __retres;
}


#line 43  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
void ldv_atomic_inc(atomic_t *v)
{
  
#line 45 
  v->counter += 1;
  
#line 46 
  return;
}


#line 49  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
void ldv_atomic_dec(atomic_t *v)
{
  
#line 51 
  v->counter -= 1;
  
#line 52 
  return;
}


#line 55  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
int ldv_atomic_dec_and_test(atomic_t *v)
{
  int __retres;
  
#line 57 
  v->counter -= 1;
  
#line 58 
  if (v->counter != 0) {
    
#line 59 
    __retres = 0;
    
#line 59 
    goto return_label;
  }
  else ;
  
#line 61 
  __retres = 1;
  return_label: 
#line 61 
                return __retres;
}


#line 65  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
int ldv_atomic_inc_and_test(atomic_t *v)
{
  int __retres;
  
#line 67 
  v->counter += 1;
  
#line 68 
  if (v->counter != 0) {
    
#line 69 
    __retres = 0;
    
#line 69 
    goto return_label;
  }
  else ;
  
#line 71 
  __retres = 1;
  return_label: 
#line 71 
                return __retres;
}


#line 75  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
int ldv_atomic_add_return(int i, atomic_t *v)
{
  int __retres;
  
#line 77 
  v->counter += i;
  
#line 78 
  __retres = v->counter;
  
#line 78 
  return __retres;
}


#line 82  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
int ldv_atomic_add_negative(int i, atomic_t *v)
{
  int __retres;
  
#line 84 
  v->counter += i;
  
#line 85 
  __retres = v->counter < 0;
  
#line 85 
  return __retres;
}


#line 89  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
int ldv_atomic_inc_short(short *v)
{
  int __retres;
  
#line 91 
  *v = (short)((unsigned int)*v + 1U);
  
#line 92 
  __retres = (int)*v;
  
#line 92 
  return __retres;
}


#line 23  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/device.h"
void *ldv_dev_get_drvdata(struct device const *dev);


#line 24 
int ldv_dev_set_drvdata(struct device *dev, void *data);


#line 30  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memory.h"
void *ldv_xmalloc(size_t size);


#line 31 
void *ldv_xzalloc(size_t size);


#line 28  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memlist.h"
struct ldv_list_element global_list = {.data = (void *)0, .next = (struct ldv_list_element *)0};

#line 33  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memlist.h"
__inline static ldv_list_ptr ldv_list_create(void *data)
{
  
#line 35 
  ldv_list_ptr list = (struct ldv_list_element *)0;
  
#line 37 
  list = (ldv_list_ptr)ldv_xmalloc(16UL);
  
#line 39 
  list->data = data;
  
#line 40 
  list->next = (struct ldv_list_element *)0;
  
#line 42 
  return list;
}


#line 45  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memlist.h"
__inline static void ldv_save_pointer(void *data)
{
  ldv_list_ptr element;
  ldv_list_ptr cached;
  
#line 50 
  if (global_list.data == (void *)0) {
    
#line 51 
    element = & global_list;
    
#line 52 
    element->data = data;
  }
  else {
    
#line 54 
    element = ldv_list_create(data);
    
#line 55 
    cached = global_list.next;
    
#line 56 
    global_list.next = element;
    
#line 57 
    element->next = cached;
  }
  
#line 60 
  return;
}


#line 28  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device const *dev)
{
  void *__retres;
  
#line 30 
  if (dev != (struct device const *)0 && dev->p != (struct device_private *)0) {
    
#line 31 
    __retres = (dev->p)->driver_data;
    
#line 31 
    goto return_label;
  }
  else ;
  
#line 33 
  __retres = (void *)0;
  return_label: 
#line 33 
                return __retres;
}


#line 42  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data)
{
  int __retres;
  
#line 44 
  dev->p = (struct device_private *)ldv_xzalloc(8UL);
  
#line 45 
  ldv_save_pointer((void *)dev->p);
  
#line 46 
  (dev->p)->driver_data = data;
  
#line 48 
  __retres = 0;
  
#line 48 
  return __retres;
}


#line 25  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memory.h"
void *ldv_zalloc(size_t size);


#line 23  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/drivers/spi.c"
struct spi_master *ldv_spi_alloc_master(struct device *host, unsigned int size)
{
  struct spi_master *__retres;
  struct spi_master *master;
  
#line 27 
  master = (struct spi_master *)ldv_zalloc((unsigned long)size + 2192UL);
  
#line 29 
  if (master == (struct spi_master *)0) {
    
#line 30 
    __retres = (struct spi_master *)0;
    
#line 30 
    goto return_label;
  }
  else ;
  
#line 32 
  ldv_dev_set_drvdata(& master->dev,(void *)(master + 1U));
  
#line 34 
  __retres = master;
  return_label: 
#line 34 
                return __retres;
}


#line 23  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/common.h"
void __VERIFIER_assume(int);


#line 21  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_is_err(void const *ptr)
{
  long __retres;
  
#line 23 
  __retres = (long)((unsigned long)ptr > 4294967295UL);
  
#line 23 
  return __retres;
}


#line 26  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error)
{
  void *__retres;
  
#line 28 
  __VERIFIER_assume(error < 0L);
  
#line 29 
  __retres = (void *)(4294967295L - error);
  
#line 29 
  return __retres;
}


#line 32  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_ptr_err(void const *ptr)
{
  long __retres;
  
#line 34 
  __VERIFIER_assume((unsigned long)ptr > 4294967295UL);
  
#line 35 
  __retres = (long)(4294967295UL - (unsigned long)ptr);
  
#line 35 
  return __retres;
}


#line 38  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_is_err_or_null(void const *ptr)
{
  long __retres;
  int tmp_0;
  
#line 40 
  if (ptr == (void const *)0) 
#line 40 
                              tmp_0 = 1;
  else {
    long tmp;
    
#line 40 
    tmp = ldv_is_err(ptr);
    
#line 40 
    if (tmp != 0L) 
#line 40 
                   tmp_0 = 1; else 
#line 40 
                                   tmp_0 = 0;
  }
  
#line 40 
  __retres = (long)tmp_0;
  
#line 40 
  return __retres;
}


#line 21  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/panic.h"
void ldv_panic(void);


#line 21  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void)
{
  
#line 23 
  __VERIFIER_assume(0);
  
#line 24 
  return;
}


#line 32  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.h"
void ldv_switch_to_interrupt_context(void);


#line 42 
void ldv_switch_to_process_context(void);


#line 50 
bool ldv_in_interrupt_context(void);


#line 112 
int ldv_post_init(int init_ret_val);


#line 132 
int ldv_post_probe(int probe_ret_val);


#line 133 
void ldv_check_return_value_probe(int);


#line 141 
int ldv_filter_err_code(int ret_val);


#line 25  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
static bool __ldv_in_interrupt_context = (_Bool)0;

#line 28  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
void ldv_switch_to_interrupt_context(void)
{
  
#line 30 
  __ldv_in_interrupt_context = (_Bool)1;
  
#line 31 
  return;
}


#line 34  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
void ldv_switch_to_process_context(void)
{
  
#line 36 
  __ldv_in_interrupt_context = (_Bool)0;
  
#line 37 
  return;
}


#line 39  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
bool ldv_in_interrupt_context(void)
{
  
#line 41 
  return __ldv_in_interrupt_context;
}


#line 44  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
static int ldv_filter_positive_int(int val)
{
  
#line 46 
  __VERIFIER_assume(val <= 0);
  
#line 47 
  return val;
}


#line 54  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
int ldv_post_init(int init_ret_val)
{
  int tmp;
  
#line 56 
  tmp = ldv_filter_positive_int(init_ret_val);
  
#line 56 
  return tmp;
}


#line 60  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
int ldv_post_probe(int probe_ret_val)
{
  int tmp;
  
#line 62 
  ldv_check_return_value_probe(probe_ret_val);
  
#line 63 
  tmp = ldv_filter_positive_int(probe_ret_val);
  
#line 63 
  return tmp;
}


#line 67  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
int ldv_filter_err_code(int ret_val)
{
  int tmp;
  
#line 69 
  tmp = ldv_filter_positive_int(ret_val);
  
#line 69 
  return tmp;
}


#line 26  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/slab.h"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags);


#line 28 
void ldv_check_alloc_flags(gfp_t);


#line 29 
void ldv_after_alloc(void *);


#line 23  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memory.h"
void *ldv_malloc(size_t size);


#line 24 
void *ldv_calloc(size_t nmemb, size_t size);


#line 21  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc(size_t size, gfp_t flags)
{
  void *res;
  
#line 25 
  ldv_check_alloc_flags(flags);
  
#line 26 
  res = ldv_malloc(size);
  
#line 27 
  ldv_after_alloc(res);
  
#line 29 
  return res;
}


#line 32  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags)
{
  void *res;
  
#line 36 
  ldv_check_alloc_flags(flags);
  
#line 37 
  res = ldv_calloc(n,size);
  
#line 38 
  ldv_after_alloc(res);
  
#line 40 
  return res;
}


#line 43  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kzalloc(size_t size, gfp_t flags)
{
  void *res;
  
#line 47 
  ldv_check_alloc_flags(flags);
  
#line 48 
  res = ldv_zalloc(size);
  
#line 49 
  ldv_after_alloc(res);
  
#line 51 
  return res;
}


#line 54  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  void *res;
  
#line 58 
  ldv_check_alloc_flags(flags);
  
#line 59 
  res = ldv_malloc(n * size);
  
#line 60 
  ldv_after_alloc(res);
  
#line 62 
  return res;
}


#line 26  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memory.h"
void ldv_free(void *s);


#line 35 
void *ldv_malloc_unknown_size(void);


#line 36 
void *ldv_calloc_unknown_size(void);


#line 37 
void *ldv_zalloc_unknown_size(void);


#line 40 
void *ldv_reference_malloc(size_t size);


#line 41 
void *ldv_reference_calloc(size_t nmemb, size_t size);


#line 42 
void *ldv_reference_zalloc(size_t size);


#line 43 
void ldv_reference_free(void *s);


#line 47 
void *ldv_reference_xmalloc(size_t size);


#line 48 
void *ldv_reference_xzalloc(size_t size);


#line 52 
void *ldv_reference_malloc_unknown_size(void);


#line 53 
void *ldv_reference_calloc_unknown_size(void);


#line 54 
void *ldv_reference_zalloc_unknown_size(void);


#line 61 
void *ldv_xmalloc_unknown_size(size_t size);


#line 32  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size);


#line 34  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc(size_t size)
{
  void *res;
  
#line 37 
  res = ldv_reference_malloc(size);
  
#line 38 
  if (res != (void *)0) {
    long tmp;
    
#line 39 
    tmp = ldv_is_err((void const *)res);
    
#line 39 
    __VERIFIER_assume(tmp == 0L);
  }
  else ;
  
#line 40 
  return res;
}


#line 43  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc(size_t nmemb, size_t size)
{
  void *res;
  
#line 46 
  res = ldv_reference_calloc(nmemb,size);
  
#line 47 
  if (res != (void *)0) {
    long tmp;
    
#line 48 
    tmp = ldv_is_err((void const *)res);
    
#line 48 
    __VERIFIER_assume(tmp == 0L);
  }
  else ;
  
#line 49 
  return res;
}


#line 52  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc(size_t size)
{
  void *res;
  
#line 55 
  res = ldv_reference_zalloc(size);
  
#line 56 
  if (res != (void *)0) {
    long tmp;
    
#line 57 
    tmp = ldv_is_err((void const *)res);
    
#line 57 
    __VERIFIER_assume(tmp == 0L);
  }
  else ;
  
#line 58 
  return res;
}


#line 61  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void ldv_free(void *s)
{
  
#line 63 
  ldv_reference_free(s);
  
#line 64 
  return;
}


#line 66  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc(size_t size)
{
  void *res;
  long tmp;
  
#line 69 
  res = ldv_reference_xmalloc(size);
  
#line 70 
  tmp = ldv_is_err((void const *)res);
  
#line 70 
  __VERIFIER_assume(tmp == 0L);
  
#line 71 
  return res;
}


#line 74  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xzalloc(size_t size)
{
  void *res;
  long tmp;
  
#line 77 
  res = ldv_reference_xzalloc(size);
  
#line 78 
  tmp = ldv_is_err((void const *)res);
  
#line 78 
  __VERIFIER_assume(tmp == 0L);
  
#line 79 
  return res;
}


#line 82  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc_unknown_size(void)
{
  void *res;
  
#line 85 
  res = ldv_reference_malloc_unknown_size();
  
#line 86 
  if (res != (void *)0) {
    long tmp;
    
#line 87 
    tmp = ldv_is_err((void const *)res);
    
#line 87 
    __VERIFIER_assume(tmp == 0L);
  }
  else ;
  
#line 88 
  return res;
}


#line 91  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void)
{
  void *res;
  
#line 94 
  res = ldv_reference_calloc_unknown_size();
  
#line 95 
  if (res != (void *)0) {
    long tmp;
    
#line 96 
    tmp = ldv_is_err((void const *)res);
    
#line 96 
    __VERIFIER_assume(tmp == 0L);
  }
  else ;
  
#line 97 
  return res;
}


#line 100  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void)
{
  void *res;
  
#line 103 
  res = ldv_reference_zalloc_unknown_size();
  
#line 104 
  if (res != (void *)0) {
    long tmp;
    
#line 105 
    tmp = ldv_is_err((void const *)res);
    
#line 105 
    __VERIFIER_assume(tmp == 0L);
  }
  else ;
  
#line 106 
  return res;
}


#line 109  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size)
{
  void *res;
  long tmp;
  
#line 112 
  res = ldv_reference_xmalloc_unknown_size(size);
  
#line 113 
  tmp = ldv_is_err((void const *)res);
  
#line 113 
  __VERIFIER_assume(tmp == 0L);
  
#line 114 
  return res;
}

long __builtin_expect(long exp, long c);


#line 22  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/common.h"
void __VERIFIER_error(void);


#line 24  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/gcc.c"
long __builtin_expect(long exp, long c)
{
  
#line 26 
  return exp;
}


#line 35  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/gcc.c"
void __builtin_trap(void)
{
  
#line 37 
  __VERIFIER_error();
  
#line 38 
  return;
}


#line 23  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.h"
int ldv_undef_int(void);


#line 24 
int ldv_undef_long(void);


#line 25 
unsigned int ldv_undef_uint(void);


#line 26 
unsigned long ldv_undef_ulong(void);


#line 27 
unsigned long long ldv_undef_ulonglong(void);


#line 28 
void *ldv_undef_ptr(void);


#line 31 
int ldv_undef_int_positive(void);


#line 34 
int ldv_undef_int_negative(void);


#line 37 
int ldv_undef_int_nonpositive(void);


#line 40 
void *ldv_undef_ptr_non_null(void);


#line 29  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __VERIFIER_nondet_int(void);


#line 31 
long __VERIFIER_nondet_long(void);


#line 38 
unsigned int __VERIFIER_nondet_uint(void);


#line 41 
unsigned long __VERIFIER_nondet_ulong(void);


#line 42 
unsigned long long __VERIFIER_nondet_ulonglong(void);


#line 43 
void *__VERIFIER_nondet_pointer(void);


#line 46  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int(void)
{
  int tmp;
  
#line 48 
  tmp = __VERIFIER_nondet_int();
  
#line 48 
  return tmp;
}


#line 51  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_long(void)
{
  int __retres;
  long tmp;
  
#line 53 
  tmp = __VERIFIER_nondet_long();
  
#line 53 
  __retres = (int)tmp;
  
#line 53 
  return __retres;
}


#line 56  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void)
{
  unsigned int tmp;
  
#line 58 
  tmp = __VERIFIER_nondet_uint();
  
#line 58 
  return tmp;
}


#line 61  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void)
{
  void *tmp;
  
#line 63 
  tmp = __VERIFIER_nondet_pointer();
  
#line 63 
  return tmp;
}


#line 66  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void)
{
  unsigned long tmp;
  
#line 68 
  tmp = __VERIFIER_nondet_ulong();
  
#line 68 
  return tmp;
}


#line 71  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void)
{
  unsigned long long tmp;
  
#line 73 
  tmp = __VERIFIER_nondet_ulonglong();
  
#line 73 
  return tmp;
}


#line 76  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_positive(void)
{
  
#line 78 
  int ret = ldv_undef_int();
  
#line 80 
  __VERIFIER_assume(ret > 0);
  
#line 82 
  return ret;
}


#line 85  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_negative(void)
{
  
#line 87 
  int ret = ldv_undef_int();
  
#line 89 
  __VERIFIER_assume(ret < 0);
  
#line 91 
  return ret;
}


#line 94  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonpositive(void)
{
  
#line 96 
  int ret = ldv_undef_int();
  
#line 98 
  __VERIFIER_assume(ret <= 0);
  
#line 100 
  return ret;
}


#line 103  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void)
{
  
#line 105 
  void *ret = ldv_undef_ptr();
  
#line 107 
  __VERIFIER_assume(ret != (void *)0);
  
#line 109 
  return ret;
}


#line 33  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memory.h"
void *external_allocated_data(void);


#line 45 
void *ldv_reference_realloc(void *ptr, size_t size);


#line 23  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *malloc(size_t);


#line 24 
void *calloc(size_t, size_t);


#line 25 
void free(void *);


#line 33  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size)
{
  void *__retres;
  void *res;
  int tmp;
  
#line 37 
  tmp = ldv_undef_int();
  
#line 37 
  if (tmp != 0) {
    
#line 39 
    res = malloc(size);
    
#line 40 
    __VERIFIER_assume(res != (void *)0);
    
#line 41 
    __retres = res;
    
#line 41 
    goto return_label;
  }
  else {
    
#line 44 
    __retres = (void *)0;
    
#line 44 
    goto return_label;
  }
  return_label: 
#line 37 
                return __retres;
}


#line 47  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size)
{
  void *tmp;
  
#line 49 
  tmp = calloc(nmemb,size);
  
#line 49 
  return tmp;
}


#line 52  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size)
{
  void *tmp;
  
#line 54 
  tmp = calloc(1UL,size);
  
#line 54 
  return tmp;
}


#line 57  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s)
{
  
#line 59 
  free(s);
  
#line 60 
  return;
}


#line 62  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size)
{
  void *__retres;
  void *res;
  int tmp;
  
#line 66 
  if (ptr != (void *)0 && size == 0UL) {
    
#line 67 
    free(ptr);
    
#line 68 
    __retres = (void *)0;
    
#line 68 
    goto return_label;
  }
  else ;
  
#line 71 
  if (ptr == (void *)0) {
    
#line 72 
    res = malloc(size);
    
#line 73 
    __retres = res;
    
#line 73 
    goto return_label;
  }
  else ;
  
#line 76 
  tmp = ldv_undef_int();
  
#line 76 
  if (tmp != 0) {
    
#line 78 
    res = malloc(size);
    
#line 79 
    __VERIFIER_assume(res != (void *)0);
    
#line 81 
    memcpy(res,(void const *)ptr,size);
    
#line 82 
    free(ptr);
    
#line 84 
    __retres = res;
    
#line 84 
    goto return_label;
  }
  else {
    
#line 87 
    __retres = (void *)0;
    
#line 87 
    goto return_label;
  }
  return_label: 
#line 76 
                return __retres;
}


#line 90  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size)
{
  void *res;
  
#line 94 
  res = malloc(size);
  
#line 95 
  __VERIFIER_assume(res != (void *)0);
  
#line 97 
  return res;
}


#line 100  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size)
{
  void *res;
  
#line 104 
  res = calloc(1UL,size);
  
#line 105 
  __VERIFIER_assume(res != (void *)0);
  
#line 107 
  return res;
}


#line 110  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void)
{
  void *__retres;
  void *res;
  int tmp;
  
#line 114 
  tmp = ldv_undef_int();
  
#line 114 
  if (tmp != 0) {
    
#line 115 
    res = external_allocated_data();
    
#line 116 
    __VERIFIER_assume(res != (void *)0);
    
#line 117 
    __retres = res;
    
#line 117 
    goto return_label;
  }
  else {
    
#line 120 
    __retres = (void *)0;
    
#line 120 
    goto return_label;
  }
  return_label: 
#line 114 
                return __retres;
}


#line 123  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void)
{
  void *__retres;
  void *res;
  int tmp;
  
#line 127 
  tmp = ldv_undef_int();
  
#line 127 
  if (tmp != 0) {
    
#line 128 
    res = external_allocated_data();
    
#line 129 
    memset(res,0,8UL);
    
#line 130 
    __VERIFIER_assume(res != (void *)0);
    
#line 131 
    __retres = res;
    
#line 131 
    goto return_label;
  }
  else {
    
#line 134 
    __retres = (void *)0;
    
#line 134 
    goto return_label;
  }
  return_label: 
#line 127 
                return __retres;
}


#line 137  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void)
{
  void *tmp;
  
#line 139 
  tmp = ldv_reference_calloc_unknown_size();
  
#line 139 
  return tmp;
}


#line 142  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size)
{
  void *res;
  
#line 146 
  res = external_allocated_data();
  
#line 147 
  __VERIFIER_assume(res != (void *)0);
  
#line 149 
  return res;
}


#line 62  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.h"
void ldv_initialize(void);


#line 97 
void ldv_failed_register_netdev(void);


#line 123 
void ldv_pre_probe(void);


#line 33  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/thread.h"
int pthread_create(pthread_t *, pthread_attr_t const *, void *(*)(void *), void *);


#line 37 
int pthread_join(pthread_t, void **);


#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/err.h"
__inline static void *ERR_PTR_0(long error)
{
  void *__retres;
  
#line 25 
  __retres = (void *)error;
  
#line 25 
  return __retres;
}


#line 97  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_deregister_5_1(struct net_device *arg0);


#line 98 
void *ldv_pci_scenario_23(void *arg0);


#line 99 
void *ldv_interrupt_scenario_22(void *arg0);


#line 101 
void *ldv_character_driver_scenario_21(void *arg0);


#line 102 
void ldv_dispatch_irq_register_16_3(int arg0, enum irqreturn (*arg1)(int , void *), enum irqreturn (*arg2)(int , void *), void *arg3);


#line 104 
void ldv_dispatch_irq_deregister_7_1(int arg0);


#line 105 
void *ldv_character_driver_scenario_19(void *arg0);


#line 108 
void ldv_dispatch_register_11_3(struct pci_driver *arg0);


#line 109 
void *ldv_character_driver_scenario_17(void *arg0);


#line 110 
void *ldv_character_driver_scenario_20(void *arg0);


#line 113 
void *ldv_timer_scenario_18(void *arg0);


#line 115 
void ldv_dispatch_deregister_9_1(struct pci_driver *arg0);


#line 116 
void *ldv_initialization_1(void *arg0);


#line 117 
void ldv_dispatch_instance_deregister_14_1(struct timer_list *arg0);


#line 118 
int main(void);


#line 122 
void ldv_dispatch_register_10_4(struct net_device *arg0);


#line 123 
void ldv_dispatch_instance_register_3_3(struct timer_list *arg0);


#line 126 
void *ldv_random_allocationless_scenario_24(void *arg0);


#line 128 
void ldv_dispatch_register_15_3(struct file_operations *arg0);


#line 129 
void ldv_dispatch_deregister_6_1(struct file_operations *arg0);


#line 134  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_17;

#line 135  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_21;

#line 136  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_19;

#line 137  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_24;

#line 138  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_22;

#line 139  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_18;

#line 140  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_20;

#line 141  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_23;

#line 145  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_deregister_5_1(struct net_device *arg0)
{
  int ret;
  struct ldv_struct_random_allocationless_scenario_24 *cf_arg_24;
  int tmp;
  
#line 148 
  tmp = ldv_undef_int();
  
#line 148 
  switch (tmp) {
    case 0: 
#line 149 
    ;
    
#line 150 
    ret = pthread_join(ldv_thread_24,(void **)0);
    
#line 151 
    __VERIFIER_assume(ret == 0);
    
#line 152 
    goto ldv_45511;
    default: 
#line 154 
    ;
    
#line 154 
    __VERIFIER_assume(0);
  }
  ldv_45511: 
#line 155 
  ;
  
#line 156 
  return;
}


#line 160  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_pci_scenario_23(void *arg0)
{
  void *__retres;
  struct pci_dev *ldv_23_resource_1;
  struct pci_device_id *ldv_23_ldv_param_1_2;
  struct pm_message ldv_23_resource_0;
  int tmp_2;
  int tmp_3;
  
#line 165 
  struct pci_driver *ldv_23_container = ldv_emg_alias_mlx5_core_driver_2;
  
#line 166 
  int ldv_23_ret = ldv_undef_int();
  
#line 169 
  struct ldv_struct_pci_scenario_23 *data = (struct ldv_struct_pci_scenario_23 *)arg0;
  
#line 173 
  ldv_23_ret = ldv_undef_int();
  
#line 176 
  if (data != (struct ldv_struct_pci_scenario_23 *)0) {
    
#line 177 
    ldv_23_container = data->arg0;
    
#line 178 
    ldv_free((void *)data);
  }
  else ;
  
#line 189 
  goto ldv_main_23;
  
#line 191 
  __retres = (void *)0;
  
#line 191 
  goto return_label;
  ldv_main_23: 
#line 194 
  ;
  
#line 197 
  tmp_2 = ldv_undef_int();
  
#line 197 
  if (tmp_2 != 0) {
    int tmp_1;
    
#line 199 
    ldv_23_ldv_param_1_2 = (struct pci_device_id *)ldv_xmalloc_unknown_size(0UL);
    
#line 204 
    ldv_pre_probe();
    
#line 206 
    ldv_23_ret = ldv_emg_wrapper_init_one_2(ldv_23_resource_1,ldv_23_ldv_param_1_2);
    
#line 208 
    ldv_23_ret = ldv_post_probe(ldv_23_ret);
    
#line 212 
    ldv_free((void *)ldv_23_ldv_param_1_2);
    
#line 215 
    tmp_1 = ldv_undef_int();
    
#line 215 
    if (tmp_1 != 0) {
      
#line 217 
      __VERIFIER_assume(ldv_23_ret == 0);
      
#line 224 
      goto ldv_call_23;
    }
    else {
      
#line 228 
      __VERIFIER_assume(ldv_23_ret != 0);
      
#line 235 
      goto ldv_main_23;
    }
  }
  else {
    
#line 247 
    __retres = (void *)0;
    
#line 247 
    goto return_label;
  }
  
#line 250 
  __retres = (void *)0;
  
#line 250 
  goto return_label;
  ldv_call_23: 
#line 253 
  ;
  
#line 256 
  tmp_3 = ldv_undef_int();
  
#line 256 
  switch (tmp_3) {
    case 1: 
#line 257 
    ;
    
#line 266 
    goto ldv_call_23;
    case 2: 
#line 269 
    ;
    
#line 271 
    if (ldv_23_container->suspend != (int (*)(struct pci_dev *, pm_message_t ))0) {
      
#line 273 
      ldv_23_ret = (*(ldv_23_container->suspend))(ldv_23_resource_1,ldv_23_resource_0);
      
#line 275 
      ldv_23_ret = ldv_filter_err_code(ldv_23_ret);
    }
    else 
#line 277 
         ldv_23_ret = ldv_undef_int();
    
#line 282 
    if (ldv_23_container->suspend_late != (int (*)(struct pci_dev *, pm_message_t ))0) {
      
#line 284 
      ldv_23_ret = (*(ldv_23_container->suspend_late))(ldv_23_resource_1,ldv_23_resource_0);
      
#line 286 
      ldv_23_ret = ldv_filter_err_code(ldv_23_ret);
    }
    else 
#line 288 
         ldv_23_ret = ldv_undef_int();
    
#line 293 
    if (ldv_23_container->resume_early != (int (*)(struct pci_dev *))0) 
      
#line 295 
      (*(ldv_23_container->resume_early))(ldv_23_resource_1); else ;
    
#line 300 
    if (ldv_23_container->resume != (int (*)(struct pci_dev *))0) 
#line 302 
                                                                  (*(ldv_23_container->resume))(ldv_23_resource_1); else ;
    
#line 310 
    goto ldv_call_23;
    case 3: 
#line 313 
    ;
    
#line 315 
    if (ldv_23_container->shutdown != (void (*)(struct pci_dev *))0) 
      
#line 317 
      (*(ldv_23_container->shutdown))(ldv_23_resource_1); else ;
    
#line 323 
    ldv_emg_wrapper_remove_one_3(ldv_23_resource_1);
    
#line 330 
    goto ldv_main_23;
    default: 
#line 333 
    ;
    
#line 333 
    __VERIFIER_assume(0);
  }
  
#line 336 
  __retres = (void *)0;
  return_label: 
#line 336 
                return __retres;
}


#line 341  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_interrupt_scenario_22(void *arg0)
{
  void *__retres;
  enum irqreturn ldv_22_ret_val;
  int ldv_22_line;
  void *ldv_22_data;
  enum irqreturn (*ldv_22_thread)(int , void *);
  int tmp;
  
#line 347 
  enum irqreturn (*ldv_22_callback)(int , void *) = & ldv_emg_wrapper_mlx5_msix_handler_2;
  
#line 350 
  struct ldv_struct_interrupt_scenario_22 *data = (struct ldv_struct_interrupt_scenario_22 *)arg0;
  
#line 355 
  if (data != (struct ldv_struct_interrupt_scenario_22 *)0) {
    
#line 356 
    ldv_22_line = data->arg0;
    
#line 357 
    ldv_22_callback = data->arg1;
    
#line 358 
    ldv_22_thread = data->arg2;
    
#line 359 
    ldv_22_data = data->arg3;
    
#line 360 
    ldv_free((void *)data);
  }
  else ;
  
#line 366 
  ldv_switch_to_interrupt_context();
  
#line 368 
  ldv_22_ret_val = ldv_emg_wrapper_mlx5_msix_handler_2(ldv_22_line,ldv_22_data);
  
#line 370 
  ldv_switch_to_process_context();
  
#line 373 
  tmp = ldv_undef_int();
  
#line 373 
  if (tmp != 0) {
    
#line 375 
    __VERIFIER_assume(ldv_22_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    
#line 379 
    if (ldv_22_thread != (enum irqreturn (*)(int , void *))0) 
#line 381 
                                                              (*ldv_22_thread)(ldv_22_line,ldv_22_data); else ;
  }
  else 
#line 388 
       __VERIFIER_assume(ldv_22_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  
#line 397 
  __retres = (void *)0;
  
#line 397 
  goto return_label;
  
#line 399 
  __retres = (void *)0;
  return_label: 
#line 399 
                return __retres;
}


#line 404  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/emg/environment_model.c"
int ldv_emg___pci_register_driver(struct pci_driver *arg0, struct module *arg1, char *arg2)
{
  int __retres;
  int tmp_0;
  
#line 407 
  struct pci_driver *ldv_11_pci_driver = ldv_emg_alias_mlx5_core_driver_2;
  
#line 411 
  tmp_0 = ldv_undef_int();
  
#line 411 
  if (tmp_0 != 0) {
    
#line 413 
    ldv_11_pci_driver = arg0;
    
#line 417 
    ldv_dispatch_register_11_3(ldv_11_pci_driver);
    
#line 421 
    __retres = 0;
    
#line 421 
    goto return_label;
  }
  else {
    int tmp;
    
#line 428 
    tmp = ldv_undef_int_negative();
    
#line 428 
    __retres = tmp;
    
#line 428 
    goto return_label;
  }
  return_label: 
#line 411 
                return __retres;
}


#line 438  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_character_driver_scenario_21(void *arg0)
{
  void *__retres;
  struct file *ldv_21_resource_1;
  char *ldv_21_ldv_param_1_2;
  unsigned long ldv_21_size_cnt;
  char *ldv_21_ldv_param_1_4;
  long long *ldv_21_ldv_param_3_3;
  long long *ldv_21_ldv_param_3_5;
  struct inode *ldv_21_resource_0;
  int tmp_1;
  int tmp_3;
  int tmp_4;
  
#line 446 
  struct file_operations *ldv_21_container = ldv_emg_alias_olfops_2;
  
#line 448 
  int ldv_21_ret = ldv_undef_int();
  
#line 451 
  struct ldv_struct_character_driver_scenario_17 *data = (struct ldv_struct_character_driver_scenario_17 *)arg0;
  
#line 455 
  ldv_21_ret = ldv_undef_int();
  
#line 458 
  if (data != (struct ldv_struct_character_driver_scenario_17 *)0) {
    
#line 459 
    ldv_21_container = data->arg0;
    
#line 460 
    ldv_free((void *)data);
  }
  else ;
  
#line 465 
  ldv_21_resource_0 = (struct inode *)ldv_xmalloc_unknown_size(0UL);
  
#line 466 
  tmp_1 = ldv_undef_int();
  
#line 466 
  ldv_21_size_cnt = (unsigned long)tmp_1;
  
#line 473 
  goto ldv_main_21;
  
#line 475 
  __retres = (void *)0;
  
#line 475 
  goto return_label;
  ldv_main_21: 
#line 478 
  ;
  
#line 481 
  tmp_3 = ldv_undef_int();
  
#line 481 
  if (tmp_3 != 0) {
    int tmp_2;
    
#line 484 
    ldv_21_ret = (*ldv_emg_alias_simple_open_5)(ldv_21_resource_0,ldv_21_resource_1);
    
#line 486 
    ldv_21_ret = ldv_filter_err_code(ldv_21_ret);
    
#line 489 
    tmp_2 = ldv_undef_int();
    
#line 489 
    if (tmp_2 != 0) {
      
#line 491 
      __VERIFIER_assume(ldv_21_ret == 0);
      
#line 498 
      goto ldv_call_21;
    }
    else {
      
#line 502 
      __VERIFIER_assume(ldv_21_ret != 0);
      
#line 509 
      goto ldv_main_21;
    }
  }
  else {
    
#line 514 
    ldv_free((void *)ldv_21_resource_0);
    
#line 522 
    __retres = (void *)0;
    
#line 522 
    goto return_label;
  }
  
#line 525 
  __retres = (void *)0;
  
#line 525 
  goto return_label;
  ldv_call_21: 
#line 528 
  ;
  
#line 531 
  tmp_4 = ldv_undef_int();
  
#line 531 
  switch (tmp_4) {
    case 1: 
#line 532 
    ;
    
#line 534 
    ldv_21_ldv_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
    
#line 535 
    ldv_21_ldv_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
    
#line 540 
    ldv_emg_wrapper_outlen_read_3(ldv_21_resource_1,ldv_21_ldv_param_1_2,ldv_21_size_cnt,ldv_21_ldv_param_3_3);
    
#line 544 
    ldv_free((void *)ldv_21_ldv_param_3_3);
    
#line 545 
    ldv_free((void *)ldv_21_ldv_param_1_2);
    
#line 552 
    goto ldv_call_21;
    case 2: 
#line 555 
    ;
    
#line 557 
    ldv_21_ldv_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
    
#line 558 
    ldv_21_ldv_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
    
#line 567 
    __VERIFIER_assume(ldv_21_size_cnt <= 2147479552UL);
    
#line 569 
    ldv_emg_wrapper_outlen_write_4(ldv_21_resource_1,ldv_21_ldv_param_1_4,ldv_21_size_cnt,ldv_21_ldv_param_3_5);
    
#line 573 
    ldv_free((void *)ldv_21_ldv_param_1_4);
    
#line 574 
    ldv_free((void *)ldv_21_ldv_param_3_5);
    
#line 581 
    goto ldv_call_21;
    case 3: 
#line 584 
    ;
    
#line 586 
    if (ldv_21_container->release != (int (*)(struct inode *, struct file *))0) 
      
#line 588 
      (*(ldv_21_container->release))(ldv_21_resource_0,ldv_21_resource_1); else ;
    
#line 596 
    goto ldv_main_21;
    default: 
#line 599 
    ;
    
#line 599 
    __VERIFIER_assume(0);
  }
  
#line 602 
  __retres = (void *)0;
  return_label: 
#line 602 
                return __retres;
}


#line 607  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_irq_register_16_3(int arg0, enum irqreturn (*arg1)(int , void *), enum irqreturn (*arg2)(int , void *), void *arg3)
{
  int ret;
  struct ldv_struct_interrupt_scenario_22 *cf_arg_22;
  int tmp;
  
#line 610 
  tmp = ldv_undef_int();
  
#line 610 
  switch (tmp) {
    case 0: 
#line 611 
    ;
    
#line 612 
    cf_arg_22 = (struct ldv_struct_interrupt_scenario_22 *)ldv_xmalloc(32UL);
    
#line 613 
    cf_arg_22->arg0 = arg0;
    
#line 614 
    cf_arg_22->arg1 = arg1;
    
#line 615 
    cf_arg_22->arg2 = arg2;
    
#line 616 
    cf_arg_22->arg3 = arg3;
    
#line 617 
    ret = pthread_create(& ldv_thread_22,(pthread_attr_t const *)0,& ldv_interrupt_scenario_22,(void *)cf_arg_22);
    
#line 618 
    __VERIFIER_assume(ret == 0);
    
#line 619 
    goto ldv_45579;
    default: 
#line 621 
    ;
    
#line 621 
    __VERIFIER_assume(0);
  }
  ldv_45579: 
#line 622 
  ;
  
#line 623 
  return;
}


#line 627  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/emg/environment_model.c"
_Bool ldv_emg_schedule_delayed_work(struct delayed_work *arg0, unsigned long arg1)
{
  _Bool __retres;
  struct work_struct *ldv_8_ldv_param_0_2;
  struct delayed_work *ldv_8_delayed_work;
  int tmp_0;
  
#line 635 
  tmp_0 = ldv_undef_int();
  
#line 635 
  if (tmp_0 != 0) {
    
#line 637 
    ldv_8_delayed_work = arg0;
    
#line 641 
    ldv_8_ldv_param_0_2 = (struct work_struct *)ldv_xmalloc_unknown_size(0UL);
    
#line 645 
    if (ldv_8_delayed_work->work.func != (void (*)(struct work_struct *))0) 
      
#line 647 
      (*(ldv_8_delayed_work->work.func))(ldv_8_ldv_param_0_2); else ;
    
#line 652 
    ldv_free((void *)ldv_8_ldv_param_0_2);
    
#line 656 
    __retres = (_Bool)1;
    
#line 656 
    goto return_label;
  }
  else {
    
#line 663 
    __retres = (_Bool)0;
    
#line 663 
    goto return_label;
  }
  return_label: 
#line 635 
                return __retres;
}


#line 673  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_register_10_4(struct net_device *arg0)
{
  int ret;
  struct ldv_struct_random_allocationless_scenario_24 *cf_arg_24;
  int tmp;
  
#line 676 
  tmp = ldv_undef_int();
  
#line 676 
  switch (tmp) {
    case 0: 
#line 677 
    ;
    
#line 678 
    cf_arg_24 = (struct ldv_struct_random_allocationless_scenario_24 *)ldv_xmalloc(16UL);
    
#line 679 
    cf_arg_24->arg0 = arg0;
    
#line 680 
    ret = pthread_create(& ldv_thread_24,(pthread_attr_t const *)0,& ldv_random_allocationless_scenario_24,(void *)cf_arg_24);
    
#line 681 
    __VERIFIER_assume(ret == 0);
    
#line 682 
    goto ldv_45593;
    default: 
#line 684 
    ;
    
#line 684 
    __VERIFIER_assume(0);
  }
  ldv_45593: 
#line 685 
  ;
  
#line 686 
  return;
}


#line 690  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_character_driver_scenario_19(void *arg0)
{
  void *__retres;
  struct file *ldv_19_resource_1;
  char *ldv_19_ldv_param_1_2;
  unsigned long ldv_19_size_cnt;
  char *ldv_19_ldv_param_1_4;
  long long *ldv_19_ldv_param_3_3;
  long long *ldv_19_ldv_param_3_5;
  struct inode *ldv_19_resource_0;
  int tmp_1;
  int tmp_3;
  int tmp_4;
  
#line 698 
  struct file_operations *ldv_19_container = ldv_emg_alias_fops_2;
  
#line 700 
  int ldv_19_ret = ldv_undef_int();
  
#line 703 
  struct ldv_struct_character_driver_scenario_17 *data = (struct ldv_struct_character_driver_scenario_17 *)arg0;
  
#line 707 
  ldv_19_ret = ldv_undef_int();
  
#line 710 
  if (data != (struct ldv_struct_character_driver_scenario_17 *)0) {
    
#line 711 
    ldv_19_container = data->arg0;
    
#line 712 
    ldv_free((void *)data);
  }
  else ;
  
#line 717 
  ldv_19_resource_0 = (struct inode *)ldv_xmalloc_unknown_size(0UL);
  
#line 718 
  tmp_1 = ldv_undef_int();
  
#line 718 
  ldv_19_size_cnt = (unsigned long)tmp_1;
  
#line 725 
  goto ldv_main_19;
  
#line 727 
  __retres = (void *)0;
  
#line 727 
  goto return_label;
  ldv_main_19: 
#line 730 
  ;
  
#line 733 
  tmp_3 = ldv_undef_int();
  
#line 733 
  if (tmp_3 != 0) {
    int tmp_2;
    
#line 736 
    ldv_19_ret = (*ldv_emg_alias_simple_open_5)(ldv_19_resource_0,ldv_19_resource_1);
    
#line 738 
    ldv_19_ret = ldv_filter_err_code(ldv_19_ret);
    
#line 741 
    tmp_2 = ldv_undef_int();
    
#line 741 
    if (tmp_2 != 0) {
      
#line 743 
      __VERIFIER_assume(ldv_19_ret == 0);
      
#line 750 
      goto ldv_call_19;
    }
    else {
      
#line 754 
      __VERIFIER_assume(ldv_19_ret != 0);
      
#line 761 
      goto ldv_main_19;
    }
  }
  else {
    
#line 766 
    ldv_free((void *)ldv_19_resource_0);
    
#line 774 
    __retres = (void *)0;
    
#line 774 
    goto return_label;
  }
  
#line 777 
  __retres = (void *)0;
  
#line 777 
  goto return_label;
  ldv_call_19: 
#line 780 
  ;
  
#line 783 
  tmp_4 = ldv_undef_int();
  
#line 783 
  switch (tmp_4) {
    case 1: 
#line 784 
    ;
    
#line 786 
    ldv_19_ldv_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
    
#line 787 
    ldv_19_ldv_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
    
#line 792 
    ldv_emg_wrapper_dbg_read_3(ldv_19_resource_1,ldv_19_ldv_param_1_2,ldv_19_size_cnt,ldv_19_ldv_param_3_3);
    
#line 796 
    ldv_free((void *)ldv_19_ldv_param_3_3);
    
#line 797 
    ldv_free((void *)ldv_19_ldv_param_1_2);
    
#line 804 
    goto ldv_call_19;
    case 2: 
#line 807 
    ;
    
#line 809 
    ldv_19_ldv_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
    
#line 810 
    ldv_19_ldv_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
    
#line 819 
    __VERIFIER_assume(ldv_19_size_cnt <= 2147479552UL);
    
#line 821 
    ldv_emg_wrapper_dbg_write_4(ldv_19_resource_1,ldv_19_ldv_param_1_4,ldv_19_size_cnt,ldv_19_ldv_param_3_5);
    
#line 825 
    ldv_free((void *)ldv_19_ldv_param_3_5);
    
#line 826 
    ldv_free((void *)ldv_19_ldv_param_1_4);
    
#line 833 
    goto ldv_call_19;
    case 3: 
#line 836 
    ;
    
#line 838 
    if (ldv_19_container->release != (int (*)(struct inode *, struct file *))0) 
      
#line 840 
      (*(ldv_19_container->release))(ldv_19_resource_0,ldv_19_resource_1); else ;
    
#line 848 
    goto ldv_main_19;
    default: 
#line 851 
    ;
    
#line 851 
    __VERIFIER_assume(0);
  }
  
#line 854 
  __retres = (void *)0;
  return_label: 
#line 854 
                return __retres;
}


#line 859  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/emg/environment_model.c"
_Bool ldv_emg_queue_work(struct workqueue_struct *arg0, struct work_struct *arg1)
{
  _Bool __retres;
  struct work_struct *ldv_13_work_struct;
  int tmp;
  
#line 866 
  tmp = ldv_undef_int();
  
#line 866 
  if (tmp != 0) {
    
#line 868 
    ldv_13_work_struct = arg1;
    
#line 872 
    if (ldv_13_work_struct->func != (void (*)(struct work_struct *))0) 
      
#line 874 
      (*(ldv_13_work_struct->func))(ldv_13_work_struct); else ;
    
#line 879 
    __retres = (_Bool)1;
    
#line 879 
    goto return_label;
  }
  else {
    
#line 886 
    __retres = (_Bool)0;
    
#line 886 
    goto return_label;
  }
  return_label: 
#line 866 
                return __retres;
}


#line 896  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/emg/environment_model.c"
struct net_device *ldv_emg_alloc_etherdev_mqs(int arg0, unsigned int arg1, unsigned int arg2)
{
  struct net_device *__retres;
  struct net_device *ldv_4_netdev;
  int tmp_0;
  
#line 903 
  tmp_0 = ldv_undef_int();
  
#line 903 
  if (tmp_0 != 0) {
    
#line 905 
    ldv_4_netdev = (struct net_device *)ldv_xmalloc_unknown_size(0UL);
    
#line 909 
    __retres = ldv_4_netdev;
    
#line 909 
    goto return_label;
  }
  else {
    
#line 916 
    __retres = (struct net_device *)0;
    
#line 916 
    goto return_label;
  }
  return_label: 
#line 903 
                return __retres;
}


#line 926  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_register_11_3(struct pci_driver *arg0)
{
  int ret;
  struct ldv_struct_pci_scenario_23 *cf_arg_23;
  int tmp;
  
#line 929 
  tmp = ldv_undef_int();
  
#line 929 
  switch (tmp) {
    case 0: 
#line 930 
    ;
    
#line 931 
    cf_arg_23 = (struct ldv_struct_pci_scenario_23 *)ldv_xmalloc(16UL);
    
#line 932 
    cf_arg_23->arg0 = arg0;
    
#line 933 
    ret = pthread_create(& ldv_thread_23,(pthread_attr_t const *)0,& ldv_pci_scenario_23,(void *)cf_arg_23);
    
#line 934 
    __VERIFIER_assume(ret == 0);
    
#line 935 
    goto ldv_45631;
    default: 
#line 937 
    ;
    
#line 937 
    __VERIFIER_assume(0);
  }
  ldv_45631: 
#line 938 
  ;
  
#line 939 
  return;
}


#line 943  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_character_driver_scenario_17(void *arg0)
{
  void *__retres;
  struct file *ldv_17_resource_1;
  char *ldv_17_ldv_param_1_2;
  unsigned long ldv_17_size_cnt;
  char *ldv_17_ldv_param_1_4;
  long long *ldv_17_ldv_param_3_3;
  long long *ldv_17_ldv_param_3_5;
  struct inode *ldv_17_resource_0;
  int tmp_1;
  int tmp_3;
  int tmp_4;
  
#line 951 
  struct file_operations *ldv_17_container = ldv_emg_alias_dfops_2;
  
#line 953 
  int ldv_17_ret = ldv_undef_int();
  
#line 956 
  struct ldv_struct_character_driver_scenario_17 *data = (struct ldv_struct_character_driver_scenario_17 *)arg0;
  
#line 960 
  ldv_17_ret = ldv_undef_int();
  
#line 963 
  if (data != (struct ldv_struct_character_driver_scenario_17 *)0) {
    
#line 964 
    ldv_17_container = data->arg0;
    
#line 965 
    ldv_free((void *)data);
  }
  else ;
  
#line 970 
  ldv_17_resource_0 = (struct inode *)ldv_xmalloc_unknown_size(0UL);
  
#line 971 
  tmp_1 = ldv_undef_int();
  
#line 971 
  ldv_17_size_cnt = (unsigned long)tmp_1;
  
#line 978 
  goto ldv_main_17;
  
#line 980 
  __retres = (void *)0;
  
#line 980 
  goto return_label;
  ldv_main_17: 
#line 983 
  ;
  
#line 986 
  tmp_3 = ldv_undef_int();
  
#line 986 
  if (tmp_3 != 0) {
    int tmp_2;
    
#line 989 
    ldv_17_ret = (*ldv_emg_alias_simple_open_5)(ldv_17_resource_0,ldv_17_resource_1);
    
#line 991 
    ldv_17_ret = ldv_filter_err_code(ldv_17_ret);
    
#line 994 
    tmp_2 = ldv_undef_int();
    
#line 994 
    if (tmp_2 != 0) {
      
#line 996 
      __VERIFIER_assume(ldv_17_ret == 0);
      
#line 1003 
      goto ldv_call_17;
    }
    else {
      
#line 1007 
      __VERIFIER_assume(ldv_17_ret != 0);
      
#line 1014 
      goto ldv_main_17;
    }
  }
  else {
    
#line 1019 
    ldv_free((void *)ldv_17_resource_0);
    
#line 1027 
    __retres = (void *)0;
    
#line 1027 
    goto return_label;
  }
  
#line 1030 
  __retres = (void *)0;
  
#line 1030 
  goto return_label;
  ldv_call_17: 
#line 1033 
  ;
  
#line 1036 
  tmp_4 = ldv_undef_int();
  
#line 1036 
  switch (tmp_4) {
    case 1: 
#line 1037 
    ;
    
#line 1039 
    ldv_17_ldv_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
    
#line 1040 
    ldv_17_ldv_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
    
#line 1045 
    ldv_emg_wrapper_data_read_3(ldv_17_resource_1,ldv_17_ldv_param_1_2,ldv_17_size_cnt,ldv_17_ldv_param_3_3);
    
#line 1049 
    ldv_free((void *)ldv_17_ldv_param_3_3);
    
#line 1050 
    ldv_free((void *)ldv_17_ldv_param_1_2);
    
#line 1057 
    goto ldv_call_17;
    case 2: 
#line 1060 
    ;
    
#line 1062 
    ldv_17_ldv_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
    
#line 1063 
    ldv_17_ldv_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
    
#line 1072 
    __VERIFIER_assume(ldv_17_size_cnt <= 2147479552UL);
    
#line 1074 
    ldv_emg_wrapper_data_write_4(ldv_17_resource_1,ldv_17_ldv_param_1_4,ldv_17_size_cnt,ldv_17_ldv_param_3_5);
    
#line 1078 
    ldv_free((void *)ldv_17_ldv_param_1_4);
    
#line 1079 
    ldv_free((void *)ldv_17_ldv_param_3_5);
    
#line 1086 
    goto ldv_call_17;
    case 3: 
#line 1089 
    ;
    
#line 1091 
    if (ldv_17_container->release != (int (*)(struct inode *, struct file *))0) 
      
#line 1093 
      (*(ldv_17_container->release))(ldv_17_resource_0,ldv_17_resource_1); else ;
    
#line 1101 
    goto ldv_main_17;
    default: 
#line 1104 
    ;
    
#line 1104 
    __VERIFIER_assume(0);
  }
  
#line 1107 
  __retres = (void *)0;
  return_label: 
#line 1107 
                return __retres;
}


#line 1112  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_character_driver_scenario_20(void *arg0)
{
  void *__retres;
  struct file *ldv_20_resource_1;
  char *ldv_20_ldv_param_1_2;
  unsigned long ldv_20_size_cnt;
  char *ldv_20_ldv_param_1_4;
  long long *ldv_20_ldv_param_3_3;
  long long *ldv_20_ldv_param_3_5;
  struct inode *ldv_20_resource_0;
  int tmp_1;
  int tmp_3;
  int tmp_4;
  
#line 1120 
  struct file_operations *ldv_20_container = ldv_emg_alias_stats_fops_2;
  
#line 1122 
  int ldv_20_ret = ldv_undef_int();
  
#line 1125 
  struct ldv_struct_character_driver_scenario_17 *data = (struct ldv_struct_character_driver_scenario_17 *)arg0;
  
#line 1129 
  ldv_20_ret = ldv_undef_int();
  
#line 1132 
  if (data != (struct ldv_struct_character_driver_scenario_17 *)0) {
    
#line 1133 
    ldv_20_container = data->arg0;
    
#line 1134 
    ldv_free((void *)data);
  }
  else ;
  
#line 1139 
  ldv_20_resource_0 = (struct inode *)ldv_xmalloc_unknown_size(0UL);
  
#line 1140 
  tmp_1 = ldv_undef_int();
  
#line 1140 
  ldv_20_size_cnt = (unsigned long)tmp_1;
  
#line 1147 
  goto ldv_main_20;
  
#line 1149 
  __retres = (void *)0;
  
#line 1149 
  goto return_label;
  ldv_main_20: 
#line 1152 
  ;
  
#line 1155 
  tmp_3 = ldv_undef_int();
  
#line 1155 
  if (tmp_3 != 0) {
    int tmp_2;
    
#line 1158 
    ldv_20_ret = (*ldv_emg_alias_simple_open_5)(ldv_20_resource_0,ldv_20_resource_1);
    
#line 1160 
    ldv_20_ret = ldv_filter_err_code(ldv_20_ret);
    
#line 1163 
    tmp_2 = ldv_undef_int();
    
#line 1163 
    if (tmp_2 != 0) {
      
#line 1165 
      __VERIFIER_assume(ldv_20_ret == 0);
      
#line 1172 
      goto ldv_call_20;
    }
    else {
      
#line 1176 
      __VERIFIER_assume(ldv_20_ret != 0);
      
#line 1183 
      goto ldv_main_20;
    }
  }
  else {
    
#line 1188 
    ldv_free((void *)ldv_20_resource_0);
    
#line 1196 
    __retres = (void *)0;
    
#line 1196 
    goto return_label;
  }
  
#line 1199 
  __retres = (void *)0;
  
#line 1199 
  goto return_label;
  ldv_call_20: 
#line 1202 
  ;
  
#line 1205 
  tmp_4 = ldv_undef_int();
  
#line 1205 
  switch (tmp_4) {
    case 1: 
#line 1206 
    ;
    
#line 1208 
    ldv_20_ldv_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
    
#line 1209 
    ldv_20_ldv_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
    
#line 1214 
    ldv_emg_wrapper_average_read_3(ldv_20_resource_1,ldv_20_ldv_param_1_2,ldv_20_size_cnt,ldv_20_ldv_param_3_3);
    
#line 1218 
    ldv_free((void *)ldv_20_ldv_param_3_3);
    
#line 1219 
    ldv_free((void *)ldv_20_ldv_param_1_2);
    
#line 1226 
    goto ldv_call_20;
    case 2: 
#line 1229 
    ;
    
#line 1231 
    ldv_20_ldv_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
    
#line 1232 
    ldv_20_ldv_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
    
#line 1241 
    __VERIFIER_assume(ldv_20_size_cnt <= 2147479552UL);
    
#line 1243 
    ldv_emg_wrapper_average_write_4(ldv_20_resource_1,ldv_20_ldv_param_1_4,ldv_20_size_cnt,ldv_20_ldv_param_3_5);
    
#line 1247 
    ldv_free((void *)ldv_20_ldv_param_1_4);
    
#line 1248 
    ldv_free((void *)ldv_20_ldv_param_3_5);
    
#line 1255 
    goto ldv_call_20;
    case 3: 
#line 1258 
    ;
    
#line 1260 
    if (ldv_20_container->release != (int (*)(struct inode *, struct file *))0) 
      
#line 1262 
      (*(ldv_20_container->release))(ldv_20_resource_0,ldv_20_resource_1); else ;
    
#line 1270 
    goto ldv_main_20;
    default: 
#line 1273 
    ;
    
#line 1273 
    __VERIFIER_assume(0);
  }
  
#line 1276 
  __retres = (void *)0;
  return_label: 
#line 1276 
                return __retres;
}


#line 1281  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/emg/environment_model.c"
int ldv_emg_request_irq(unsigned int arg0, enum irqreturn (*arg1)(int , void *), unsigned long arg2, char *arg3, void *arg4)
{
  int __retres;
  int ldv_16_line;
  void *ldv_16_data;
  enum irqreturn (*ldv_16_thread)(int , void *);
  int tmp_0;
  
#line 1286 
  enum irqreturn (*ldv_16_callback)(int , void *) = & ldv_emg_wrapper_mlx5_msix_handler_2;
  
#line 1291 
  tmp_0 = ldv_undef_int();
  
#line 1291 
  if (tmp_0 != 0) {
    
#line 1293 
    ldv_16_line = (int)arg0;
    
#line 1294 
    ldv_16_callback = arg1;
    
#line 1295 
    ldv_16_thread = (enum irqreturn (*)(int , void *))0;
    
#line 1296 
    ldv_16_data = arg4;
    
#line 1300 
    ldv_dispatch_irq_register_16_3(ldv_16_line,ldv_16_callback,ldv_16_thread,ldv_16_data);
    
#line 1304 
    __retres = 0;
    
#line 1304 
    goto return_label;
  }
  else {
    int tmp;
    
#line 1311 
    tmp = ldv_undef_int_negative();
    
#line 1311 
    __retres = tmp;
    
#line 1311 
    goto return_label;
  }
  return_label: 
#line 1291 
                return __retres;
}


#line 1321  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/emg/environment_model.c"
struct dentry *ldv_emg_debugfs_create_file(char *arg0, unsigned short arg1, struct dentry *arg2, void *arg3, struct file_operations *arg4)
{
  struct dentry *__retres;
  struct dentry *ldv_15_dentry;
  struct file_operations *ldv_15_file_operations;
  int tmp_1;
  
#line 1329 
  tmp_1 = ldv_undef_int();
  
#line 1329 
  if (tmp_1 != 0) {
    
#line 1331 
    ldv_15_dentry = (struct dentry *)ldv_xmalloc_unknown_size(0UL);
    
#line 1332 
    ldv_15_file_operations = arg4;
    
#line 1336 
    ldv_dispatch_register_15_3(ldv_15_file_operations);
    
#line 1340 
    __retres = ldv_15_dentry;
    
#line 1340 
    goto return_label;
  }
  else {
    struct dentry *tmp_0;
    
#line 1347 
    tmp_0 = (struct dentry *)ERR_PTR_0(-19L);
    
#line 1347 
    __retres = tmp_0;
    
#line 1347 
    goto return_label;
  }
  return_label: 
#line 1329 
                return __retres;
}


#line 1357  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_timer_scenario_18(void *arg0)
{
  void *__retres;
  struct timer_list *ldv_18_container;
  
#line 1362 
  struct ldv_struct_timer_scenario_18 *data = (struct ldv_struct_timer_scenario_18 *)arg0;
  
#line 1367 
  if (data != (struct ldv_struct_timer_scenario_18 *)0) {
    
#line 1368 
    ldv_18_container = data->arg0;
    
#line 1369 
    ldv_free((void *)data);
  }
  else ;
  
#line 1374 
  if (ldv_18_container->function != (void (*)(unsigned long ))0) {
    
#line 1376 
    ldv_switch_to_interrupt_context();
    
#line 1378 
    (*(ldv_18_container->function))(ldv_18_container->data);
    
#line 1380 
    ldv_switch_to_process_context();
  }
  else ;
  
#line 1389 
  __retres = (void *)0;
  
#line 1389 
  goto return_label;
  
#line 1391 
  __retres = (void *)0;
  return_label: 
#line 1391 
                return __retres;
}


#line 1396  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/emg/environment_model.c"
_Bool ldv_emg_schedule_work(struct work_struct *arg0)
{
  _Bool __retres;
  struct work_struct *ldv_12_work_struct;
  int tmp;
  
#line 1403 
  tmp = ldv_undef_int();
  
#line 1403 
  if (tmp != 0) {
    
#line 1405 
    ldv_12_work_struct = arg0;
    
#line 1409 
    if (ldv_12_work_struct->func != (void (*)(struct work_struct *))0) 
      
#line 1411 
      (*(ldv_12_work_struct->func))(ldv_12_work_struct); else ;
    
#line 1416 
    __retres = (_Bool)1;
    
#line 1416 
    goto return_label;
  }
  else {
    
#line 1423 
    __retres = (_Bool)0;
    
#line 1423 
    goto return_label;
  }
  return_label: 
#line 1403 
                return __retres;
}


#line 1433  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_deregister_9_1(struct pci_driver *arg0)
{
  int ret;
  struct ldv_struct_pci_scenario_23 *cf_arg_23;
  int tmp;
  
#line 1436 
  tmp = ldv_undef_int();
  
#line 1436 
  switch (tmp) {
    case 0: 
#line 1437 
    ;
    
#line 1438 
    ret = pthread_join(ldv_thread_23,(void **)0);
    
#line 1439 
    __VERIFIER_assume(ret == 0);
    
#line 1440 
    goto ldv_45712;
    default: 
#line 1442 
    ;
    
#line 1442 
    __VERIFIER_assume(0);
  }
  ldv_45712: 
#line 1443 
  ;
  
#line 1444 
  return;
}


#line 1448  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_initialization_1(void *arg0)
{
  void *__retres;
  int ldv_1_ret;
  int tmp;
  
#line 1455 
  ldv_1_ret = ldv_emg_init();
  
#line 1456 
  ldv_1_ret = ldv_post_init(ldv_1_ret);
  
#line 1459 
  tmp = ldv_undef_int();
  
#line 1459 
  if (tmp != 0) {
    
#line 1461 
    __VERIFIER_assume(ldv_1_ret != 0);
    
#line 1465 
    __retres = (void *)0;
    
#line 1465 
    goto return_label;
  }
  else {
    
#line 1469 
    __VERIFIER_assume(ldv_1_ret == 0);
    
#line 1474 
    ldv_emg_cleanup();
    
#line 1478 
    __retres = (void *)0;
    
#line 1478 
    goto return_label;
  }
  
#line 1481 
  __retres = (void *)0;
  return_label: 
#line 1481 
                return __retres;
}


#line 1486  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_emg_free_netdev(struct net_device *arg0)
{
  struct net_device *ldv_2_netdev;
  
#line 1492 
  ldv_2_netdev = arg0;
  
#line 1493 
  ldv_free((void *)ldv_2_netdev);
  
#line 1497 
  goto return_label;
  return_label: 
#line 1499 
                return;
}


#line 1504  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/emg/environment_model.c"
int main(void)
{
  int __retres;
  
#line 1507 
  ldv_initialize();
  
#line 1510 
  ldv_initialization_1((void *)0);
  
#line 1512 
  __retres = 0;
  
#line 1512 
  return __retres;
}


#line 1517  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_emg_debugfs_remove(struct dentry *arg0)
{
  struct dentry *ldv_6_dentry;
  struct file_operations *ldv_6_file_operations;
  
#line 1524 
  ldv_6_dentry = arg0;
  
#line 1525 
  ldv_free((void *)ldv_6_dentry);
  
#line 1529 
  ldv_dispatch_deregister_6_1(ldv_6_file_operations);
  
#line 1533 
  goto return_label;
  return_label: 
#line 1535 
                return;
}


#line 1540  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_instance_deregister_14_1(struct timer_list *arg0)
{
  int ret;
  struct ldv_struct_timer_scenario_18 *cf_arg_18;
  int tmp;
  
#line 1543 
  tmp = ldv_undef_int();
  
#line 1543 
  switch (tmp) {
    case 0: 
#line 1544 
    ;
    
#line 1545 
    ret = pthread_join(ldv_thread_18,(void **)0);
    
#line 1546 
    __VERIFIER_assume(ret == 0);
    
#line 1547 
    goto ldv_45736;
    default: 
#line 1549 
    ;
    
#line 1549 
    __VERIFIER_assume(0);
  }
  ldv_45736: 
#line 1550 
  ;
  
#line 1551 
  return;
}


#line 1555  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/emg/environment_model.c"
int ldv_emg_del_timer_sync(struct timer_list *arg0)
{
  int __retres;
  struct timer_list *ldv_14_timer_list;
  
#line 1561 
  ldv_14_timer_list = arg0;
  
#line 1565 
  ldv_dispatch_instance_deregister_14_1(ldv_14_timer_list);
  
#line 1566 
  ;
  
#line 1566 
  __retres = 0;
  
#line 1566 
  return __retres;
}


#line 1574  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_emg_pci_unregister_driver(struct pci_driver *arg0)
{
  
#line 1577 
  struct pci_driver *ldv_9_pci_driver = ldv_emg_alias_mlx5_core_driver_2;
  
#line 1580 
  ldv_9_pci_driver = arg0;
  
#line 1584 
  ldv_dispatch_deregister_9_1(ldv_9_pci_driver);
  
#line 1588 
  goto return_label;
  return_label: 
#line 1590 
                return;
}


#line 1595  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_irq_deregister_7_1(int arg0)
{
  int ret;
  struct ldv_struct_free_irq_7 *cf_arg_22;
  int tmp;
  
#line 1598 
  tmp = ldv_undef_int();
  
#line 1598 
  switch (tmp) {
    case 0: 
#line 1599 
    ;
    
#line 1600 
    ret = pthread_join(ldv_thread_22,(void **)0);
    
#line 1601 
    __VERIFIER_assume(ret == 0);
    
#line 1602 
    goto ldv_45752;
    default: 
#line 1604 
    ;
    
#line 1604 
    __VERIFIER_assume(0);
  }
  ldv_45752: 
#line 1605 
  ;
  
#line 1606 
  return;
}


#line 1610  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_instance_register_3_3(struct timer_list *arg0)
{
  int ret;
  struct ldv_struct_timer_scenario_18 *cf_arg_18;
  int tmp;
  
#line 1613 
  tmp = ldv_undef_int();
  
#line 1613 
  switch (tmp) {
    case 0: 
#line 1614 
    ;
    
#line 1615 
    cf_arg_18 = (struct ldv_struct_timer_scenario_18 *)ldv_xmalloc(16UL);
    
#line 1616 
    cf_arg_18->arg0 = arg0;
    
#line 1617 
    ret = pthread_create(& ldv_thread_18,(pthread_attr_t const *)0,& ldv_timer_scenario_18,(void *)cf_arg_18);
    
#line 1618 
    __VERIFIER_assume(ret == 0);
    
#line 1619 
    goto ldv_45760;
    default: 
#line 1621 
    ;
    
#line 1621 
    __VERIFIER_assume(0);
  }
  ldv_45760: 
#line 1622 
  ;
  
#line 1623 
  return;
}


#line 1627  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_emg_unregister_netdev(struct net_device *arg0)
{
  struct net_device *ldv_5_netdev;
  
#line 1633 
  ldv_5_netdev = arg0;
  
#line 1638 
  ldv_emg_wrapper_mlx5e_close_2(ldv_5_netdev);
  
#line 1642 
  ldv_dispatch_deregister_5_1(ldv_5_netdev);
  
#line 1646 
  goto return_label;
  return_label: 
#line 1648 
                return;
}


#line 1653  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_emg_free_irq(unsigned int arg0, void *arg1)
{
  int ldv_7_line;
  
#line 1659 
  ldv_7_line = (int)arg0;
  
#line 1663 
  ldv_dispatch_irq_deregister_7_1(ldv_7_line);
  
#line 1667 
  goto return_label;
  return_label: 
#line 1669 
                return;
}


#line 1674  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/emg/environment_model.c"
int ldv_emg_register_netdev(struct net_device *arg0)
{
  int __retres;
  struct net_device *ldv_10_netdev;
  int tmp_3;
  
#line 1678 
  int ldv_10_ret = ldv_undef_int();
  
#line 1681 
  ldv_10_ret = ldv_undef_int();
  
#line 1684 
  tmp_3 = ldv_undef_int();
  
#line 1684 
  if (tmp_3 != 0) {
    int tmp_1;
    
#line 1686 
    ldv_10_netdev = arg0;
    
#line 1691 
    ldv_10_ret = ldv_emg_wrapper_mlx5e_open_2(ldv_10_netdev);
    
#line 1694 
    tmp_1 = ldv_undef_int();
    
#line 1694 
    if (tmp_1 != 0) {
      
#line 1696 
      __VERIFIER_assume(ldv_10_ret == 0);
      
#line 1700 
      ldv_dispatch_register_10_4(ldv_10_netdev);
      
#line 1704 
      __retres = 0;
      
#line 1704 
      goto return_label;
    }
    else {
      int tmp_0;
      
#line 1711 
      __VERIFIER_assume(ldv_10_ret != 0);
      
#line 1712 
      ldv_failed_register_netdev();
      
#line 1713 
      tmp_0 = ldv_undef_int_negative();
      
#line 1713 
      __retres = tmp_0;
      
#line 1713 
      goto return_label;
    }
  }
  else {
    int tmp_2;
    
#line 1721 
    ldv_failed_register_netdev();
    
#line 1722 
    tmp_2 = ldv_undef_int_negative();
    
#line 1722 
    __retres = tmp_2;
    
#line 1722 
    goto return_label;
  }
  return_label: 
#line 1684 
                return __retres;
}


#line 1732  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_register_15_3(struct file_operations *arg0)
{
  int ret;
  struct ldv_struct_character_driver_scenario_17 *cf_arg_17;
  struct ldv_struct_character_driver_scenario_17 *cf_arg_19;
  struct ldv_struct_character_driver_scenario_17 *cf_arg_20;
  struct ldv_struct_character_driver_scenario_17 *cf_arg_21;
  int tmp;
  
#line 1738 
  tmp = ldv_undef_int();
  
#line 1738 
  switch (tmp) {
    case 0: 
#line 1739 
    ;
    
#line 1740 
    cf_arg_17 = (struct ldv_struct_character_driver_scenario_17 *)ldv_xmalloc(16UL);
    
#line 1741 
    cf_arg_17->arg0 = arg0;
    
#line 1742 
    ret = pthread_create(& ldv_thread_17,(pthread_attr_t const *)0,& ldv_character_driver_scenario_17,(void *)cf_arg_17);
    
#line 1743 
    __VERIFIER_assume(ret == 0);
    
#line 1744 
    goto ldv_45785;
    case 1: 
#line 1746 
    ;
    
#line 1747 
    cf_arg_19 = (struct ldv_struct_character_driver_scenario_17 *)ldv_xmalloc(16UL);
    
#line 1748 
    cf_arg_19->arg0 = arg0;
    
#line 1749 
    ret = pthread_create(& ldv_thread_19,(pthread_attr_t const *)0,& ldv_character_driver_scenario_19,(void *)cf_arg_19);
    
#line 1750 
    __VERIFIER_assume(ret == 0);
    
#line 1751 
    goto ldv_45785;
    case 2: 
#line 1753 
    ;
    
#line 1754 
    cf_arg_20 = (struct ldv_struct_character_driver_scenario_17 *)ldv_xmalloc(16UL);
    
#line 1755 
    cf_arg_20->arg0 = arg0;
    
#line 1756 
    ret = pthread_create(& ldv_thread_20,(pthread_attr_t const *)0,& ldv_character_driver_scenario_20,(void *)cf_arg_20);
    
#line 1757 
    __VERIFIER_assume(ret == 0);
    
#line 1758 
    goto ldv_45785;
    case 3: 
#line 1760 
    ;
    
#line 1761 
    cf_arg_21 = (struct ldv_struct_character_driver_scenario_17 *)ldv_xmalloc(16UL);
    
#line 1762 
    cf_arg_21->arg0 = arg0;
    
#line 1763 
    ret = pthread_create(& ldv_thread_21,(pthread_attr_t const *)0,& ldv_character_driver_scenario_21,(void *)cf_arg_21);
    
#line 1764 
    __VERIFIER_assume(ret == 0);
    
#line 1765 
    goto ldv_45785;
    default: 
#line 1767 
    ;
    
#line 1767 
    __VERIFIER_assume(0);
  }
  ldv_45785: 
#line 1768 
  ;
  
#line 1769 
  return;
}


#line 1773  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_deregister_6_1(struct file_operations *arg0)
{
  int ret;
  struct ldv_struct_character_driver_scenario_17 *cf_arg_17;
  struct ldv_struct_character_driver_scenario_17 *cf_arg_19;
  struct ldv_struct_character_driver_scenario_17 *cf_arg_20;
  struct ldv_struct_character_driver_scenario_17 *cf_arg_21;
  int tmp;
  
#line 1779 
  tmp = ldv_undef_int();
  
#line 1779 
  switch (tmp) {
    case 0: 
#line 1780 
    ;
    
#line 1781 
    ret = pthread_join(ldv_thread_17,(void **)0);
    
#line 1782 
    __VERIFIER_assume(ret == 0);
    
#line 1783 
    goto ldv_45799;
    case 1: 
#line 1785 
    ;
    
#line 1786 
    ret = pthread_join(ldv_thread_19,(void **)0);
    
#line 1787 
    __VERIFIER_assume(ret == 0);
    
#line 1788 
    goto ldv_45799;
    case 2: 
#line 1790 
    ;
    
#line 1791 
    ret = pthread_join(ldv_thread_20,(void **)0);
    
#line 1792 
    __VERIFIER_assume(ret == 0);
    
#line 1793 
    goto ldv_45799;
    case 3: 
#line 1795 
    ;
    
#line 1796 
    ret = pthread_join(ldv_thread_21,(void **)0);
    
#line 1797 
    __VERIFIER_assume(ret == 0);
    
#line 1798 
    goto ldv_45799;
    default: 
#line 1800 
    ;
    
#line 1800 
    __VERIFIER_assume(0);
  }
  ldv_45799: 
#line 1801 
  ;
  
#line 1802 
  return;
}


#line 1806  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_random_allocationless_scenario_24(void *arg0)
{
  void *__retres;
  unsigned long long ldv_24_ldv_param_1_3;
  struct ethtool_cmd *ldv_24_ldv_param_1_13;
  unsigned char *ldv_24_ldv_param_2_17;
  int ldv_24_ldv_param_1_14;
  struct ethtool_cmd *ldv_24_ldv_param_1_2;
  struct ethtool_coalesce *ldv_24_ldv_param_1_19;
  int ldv_24_ldv_param_1_5;
  unsigned short ldv_24_ldv_param_2_11;
  unsigned short ldv_24_ldv_param_2_22;
  struct ethtool_stats *ldv_24_ldv_param_1_8;
  unsigned short ldv_24_ldv_param_1_10;
  struct ethtool_channels *ldv_24_ldv_param_1_12;
  unsigned int ldv_24_ldv_param_1_16;
  struct ethtool_ringparam *ldv_24_ldv_param_1_18;
  struct ethtool_channels *ldv_24_ldv_param_1_20;
  unsigned short ldv_24_ldv_param_1_21;
  struct ethtool_drvinfo *ldv_24_ldv_param_1_15;
  struct rtnl_link_stats64 *ldv_24_ldv_param_1_6;
  struct ethtool_ringparam *ldv_24_ldv_param_1_4;
  void *ldv_24_ldv_param_1_24;
  struct sk_buff *ldv_24_ldv_param_0_23;
  struct net_device *ldv_24_container;
  unsigned long long *ldv_24_ldv_param_2_9;
  struct ethtool_coalesce *ldv_24_ldv_param_1_7;
  int tmp_14;
  
#line 1834 
  struct ldv_struct_random_allocationless_scenario_24 *data = (struct ldv_struct_random_allocationless_scenario_24 *)arg0;
  
#line 1839 
  if (data != (struct ldv_struct_random_allocationless_scenario_24 *)0) {
    
#line 1840 
    ldv_24_container = data->arg0;
    
#line 1841 
    ldv_free((void *)data);
  }
  else ;
  
#line 1849 
  goto ldv_call_24;
  
#line 1851 
  __retres = (void *)0;
  
#line 1851 
  goto return_label;
  ldv_call_24: 
#line 1854 
  ;
  
#line 1857 
  tmp_14 = ldv_undef_int();
  
#line 1857 
  if (tmp_14 != 0) {
    int tmp_0;
    
#line 1859 
    ldv_24_ldv_param_1_2 = (struct ethtool_cmd *)ldv_xmalloc_unknown_size(0UL);
    
#line 1862 
    tmp_0 = ldv_undef_int();
    
#line 1862 
    switch (tmp_0) {
      case 1: 
#line 1863 
      ;
      
#line 1866 
      ldv_emg_wrapper_mlx5e_get_settings_2(ldv_24_container,ldv_24_ldv_param_1_2);
      
#line 1869 
      goto ldv_45834;
      case 2: 
#line 1871 
      ;
      
#line 1874 
      ldv_emg_wrapper_mlx5e_set_rx_mode_19(ldv_24_container);
      
#line 1877 
      goto ldv_45834;
      case 3: 
#line 1879 
      ;
      
#line 1881 
      ldv_24_ldv_param_1_24 = ldv_xmalloc_unknown_size(0UL);
      
#line 1886 
      ldv_emg_wrapper_mlx5e_set_mac_18(ldv_24_container,ldv_24_ldv_param_1_24);
      
#line 1890 
      ldv_free(ldv_24_ldv_param_1_24);
      
#line 1893 
      goto ldv_45834;
      case 4: 
#line 1895 
      ;
      
#line 1897 
      ldv_24_ldv_param_0_23 = (struct sk_buff *)ldv_xmalloc_unknown_size(0UL);
      
#line 1902 
      mlx5e_xmit(ldv_24_ldv_param_0_23,ldv_24_container);
      
#line 1906 
      ldv_free((void *)ldv_24_ldv_param_0_23);
      
#line 1909 
      goto ldv_45834;
      case 5: 
#line 1911 
      ;
      
#line 1917 
      mlx5e_vlan_rx_kill_vid(ldv_24_container,(unsigned short)((int)ldv_24_ldv_param_1_21),(unsigned short)((int)ldv_24_ldv_param_2_22));
      
#line 1923 
      goto ldv_45834;
      case 6: 
#line 1925 
      ;
      
#line 1927 
      ldv_24_ldv_param_1_20 = (struct ethtool_channels *)ldv_xmalloc_unknown_size(0UL);
      
#line 1932 
      ldv_emg_wrapper_mlx5e_set_channels_5(ldv_24_container,ldv_24_ldv_param_1_20);
      
#line 1936 
      ldv_free((void *)ldv_24_ldv_param_1_20);
      
#line 1939 
      goto ldv_45834;
      case 7: 
#line 1941 
      ;
      
#line 1943 
      ldv_24_ldv_param_1_19 = (struct ethtool_coalesce *)ldv_xmalloc_unknown_size(0UL);
      
#line 1948 
      ldv_emg_wrapper_mlx5e_set_coalesce_16(ldv_24_container,ldv_24_ldv_param_1_19);
      
#line 1952 
      ldv_free((void *)ldv_24_ldv_param_1_19);
      
#line 1955 
      goto ldv_45834;
      case 8: 
#line 1957 
      ;
      
#line 1959 
      ldv_24_ldv_param_1_18 = (struct ethtool_ringparam *)ldv_xmalloc_unknown_size(0UL);
      
#line 1964 
      ldv_emg_wrapper_mlx5e_get_ringparam_15(ldv_24_container,ldv_24_ldv_param_1_18);
      
#line 1968 
      ldv_free((void *)ldv_24_ldv_param_1_18);
      
#line 1971 
      goto ldv_45834;
      case 9: 
#line 1973 
      ;
      
#line 1975 
      ldv_24_ldv_param_2_17 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
      
#line 1980 
      ldv_emg_wrapper_mlx5e_get_strings_14(ldv_24_container,ldv_24_ldv_param_1_16,ldv_24_ldv_param_2_17);
      
#line 1984 
      ldv_free((void *)ldv_24_ldv_param_2_17);
      
#line 1987 
      goto ldv_45834;
      case 10: 
#line 1989 
      ;
      
#line 1991 
      ldv_24_ldv_param_1_15 = (struct ethtool_drvinfo *)ldv_xmalloc_unknown_size(0UL);
      
#line 1996 
      ldv_emg_wrapper_mlx5e_get_drvinfo_13(ldv_24_container,ldv_24_ldv_param_1_15);
      
#line 2000 
      ldv_free((void *)ldv_24_ldv_param_1_15);
      
#line 2003 
      goto ldv_45834;
      case 11: 
#line 2005 
      ;
      
#line 2011 
      ldv_emg_wrapper_mlx5e_get_sset_count_3(ldv_24_container,ldv_24_ldv_param_1_14);
      
#line 2017 
      goto ldv_45834;
      case 12: 
#line 2019 
      ;
      
#line 2021 
      ldv_24_ldv_param_1_13 = (struct ethtool_cmd *)ldv_xmalloc_unknown_size(0UL);
      
#line 2026 
      ldv_emg_wrapper_mlx5e_set_settings_11(ldv_24_container,ldv_24_ldv_param_1_13);
      
#line 2030 
      ldv_free((void *)ldv_24_ldv_param_1_13);
      
#line 2033 
      goto ldv_45834;
      case 13: 
#line 2035 
      ;
      
#line 2037 
      ldv_24_ldv_param_1_12 = (struct ethtool_channels *)ldv_xmalloc_unknown_size(0UL);
      
#line 2042 
      ldv_emg_wrapper_mlx5e_get_channels_10(ldv_24_container,ldv_24_ldv_param_1_12);
      
#line 2046 
      ldv_free((void *)ldv_24_ldv_param_1_12);
      
#line 2049 
      goto ldv_45834;
      case 14: 
#line 2051 
      ;
      
#line 2057 
      mlx5e_vlan_rx_add_vid(ldv_24_container,(unsigned short)((int)ldv_24_ldv_param_1_10),(unsigned short)((int)ldv_24_ldv_param_2_11));
      
#line 2063 
      goto ldv_45834;
      case 15: 
#line 2065 
      ;
      
#line 2067 
      ldv_24_ldv_param_2_9 = (unsigned long long *)ldv_xmalloc_unknown_size(0UL);
      
#line 2068 
      ldv_24_ldv_param_1_8 = (struct ethtool_stats *)ldv_xmalloc_unknown_size(0UL);
      
#line 2073 
      ldv_emg_wrapper_mlx5e_get_ethtool_stats_8(ldv_24_container,ldv_24_ldv_param_1_8,ldv_24_ldv_param_2_9);
      
#line 2077 
      ldv_free((void *)ldv_24_ldv_param_2_9);
      
#line 2078 
      ldv_free((void *)ldv_24_ldv_param_1_8);
      
#line 2081 
      goto ldv_45834;
      case 16: 
#line 2083 
      ;
      
#line 2085 
      ldv_24_ldv_param_1_7 = (struct ethtool_coalesce *)ldv_xmalloc_unknown_size(0UL);
      
#line 2090 
      ldv_emg_wrapper_mlx5e_get_coalesce_7(ldv_24_container,ldv_24_ldv_param_1_7);
      
#line 2094 
      ldv_free((void *)ldv_24_ldv_param_1_7);
      
#line 2097 
      goto ldv_45834;
      case 17: 
#line 2099 
      ;
      
#line 2101 
      ldv_24_ldv_param_1_6 = (struct rtnl_link_stats64 *)ldv_xmalloc_unknown_size(0UL);
      
#line 2106 
      ldv_emg_wrapper_mlx5e_get_stats_9(ldv_24_container,ldv_24_ldv_param_1_6);
      
#line 2110 
      ldv_free((void *)ldv_24_ldv_param_1_6);
      
#line 2113 
      goto ldv_45834;
      case 18: 
#line 2115 
      ;
      
#line 2121 
      ldv_emg_wrapper_mlx5e_change_mtu_6(ldv_24_container,ldv_24_ldv_param_1_5);
      
#line 2127 
      goto ldv_45834;
      case 19: 
#line 2129 
      ;
      
#line 2131 
      ldv_24_ldv_param_1_4 = (struct ethtool_ringparam *)ldv_xmalloc_unknown_size(0UL);
      
#line 2136 
      ldv_emg_wrapper_mlx5e_set_ringparam_17(ldv_24_container,ldv_24_ldv_param_1_4);
      
#line 2140 
      ldv_free((void *)ldv_24_ldv_param_1_4);
      
#line 2143 
      goto ldv_45834;
      case 20: 
#line 2145 
      ;
      
#line 2148 
      (*ldv_emg_alias_ethtool_op_get_link_4)(ldv_24_container);
      
#line 2151 
      goto ldv_45834;
      case 21: 
#line 2153 
      ;
      
#line 2159 
      ldv_emg_wrapper_mlx5e_set_features_12(ldv_24_container,ldv_24_ldv_param_1_3);
      
#line 2165 
      goto ldv_45834;
      default: 
#line 2167 
      ;
      
#line 2167 
      __VERIFIER_assume(0);
    }
    ldv_45834: 
#line 2170 
    ;
    
#line 2170 
    ldv_free((void *)ldv_24_ldv_param_1_2);
    
#line 2177 
    goto ldv_call_24;
  }
  else {
    
#line 2185 
    __retres = (void *)0;
    
#line 2185 
    goto return_label;
  }
  
#line 2188 
  __retres = (void *)0;
  return_label: 
#line 2188 
                return __retres;
}


#line 2193  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.ko/linux:concurrency safety/emg/environment_model.c"
int ldv_emg_mod_timer(struct timer_list *arg0, unsigned long arg1)
{
  int __retres;
  struct timer_list *ldv_3_timer_list;
  int tmp_0;
  
#line 2200 
  tmp_0 = ldv_undef_int();
  
#line 2200 
  if (tmp_0 != 0) {
    
#line 2202 
    ldv_3_timer_list = arg0;
    
#line 2206 
    ldv_dispatch_instance_register_3_3(ldv_3_timer_list);
    
#line 2210 
    __retres = 0;
    
#line 2210 
    goto return_label;
  }
  else {
    int tmp;
    
#line 2217 
    tmp = ldv_undef_int_negative();
    
#line 2217 
    __retres = tmp;
    
#line 2217 
    goto return_label;
  }
  return_label: 
#line 2200 
                return __retres;
}


